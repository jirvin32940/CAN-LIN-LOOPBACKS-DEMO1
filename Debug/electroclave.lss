
electroclave.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002010  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008680  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000a800  8000a800  0000ac00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000250  8000aa00  8000aa00  0000ae00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000000a9  00000008  8000ac50  0000b408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000007  000000b1  8000acf9  0000b4b1  2**0
                  ALLOC
  8 .bss          00000aa8  000000b8  000000b8  00000000  2**2
                  ALLOC
  9 .heap         0000e4a0  00000b60  00000b60  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000b4b1  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000a50  00000000  00000000  0000b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001bc2  00000000  00000000  0000bf38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00019330  00000000  00000000  0000dafa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001d39  00000000  00000000  00026e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008eef  00000000  00000000  00028b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001f98  00000000  00000000  00031a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004a9f  00000000  00000000  000339ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000034b7  00000000  00000000  0003848b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 01031b36  00000000  00000000  0003b942  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .flash_nvram0 000003c0  8007f000  8000acf9  0000b800  2**0
                  ALLOC
 22 .flash_nvram1 000003c0  8007f800  8007f3c0  0000b800  2**0
                  ALLOC
 23 .debug_ranges 000009f0  00000000  00000000  0106d478  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	58 b0       	cp.w	r0,11

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	48 1f       	lddpc	pc,8000200c <program_start+0x4>
8000200a:	00 00       	add	r0,r0
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	58 b0       	cp.w	r0,11

Disassembly of section .text:

80002010 <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
80002010:	eb cd 40 80 	pushm	r7,lr
80002014:	1a 97       	mov	r7,sp
80002016:	20 1d       	sub	sp,4
80002018:	18 98       	mov	r8,r12
8000201a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (idx)
8000201e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002022:	58 28       	cp.w	r8,2
80002024:	c1 10       	breq	80002046 <io_pin+0x36>
80002026:	e0 89 00 07 	brgt	80002034 <io_pin+0x24>
8000202a:	58 08       	cp.w	r8,0
8000202c:	c0 90       	breq	8000203e <io_pin+0x2e>
8000202e:	58 18       	cp.w	r8,1
80002030:	c0 90       	breq	80002042 <io_pin+0x32>
80002032:	c1 08       	rjmp	80002052 <io_pin+0x42>
80002034:	58 38       	cp.w	r8,3
80002036:	c0 a0       	breq	8000204a <io_pin+0x3a>
80002038:	58 48       	cp.w	r8,4
8000203a:	c0 a0       	breq	8000204e <io_pin+0x3e>
8000203c:	c0 b8       	rjmp	80002052 <io_pin+0x42>
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
8000203e:	33 38       	mov	r8,51
80002040:	c0 a8       	rjmp	80002054 <io_pin+0x44>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
80002042:	33 48       	mov	r8,52
80002044:	c0 88       	rjmp	80002054 <io_pin+0x44>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
80002046:	33 58       	mov	r8,53
80002048:	c0 68       	rjmp	80002054 <io_pin+0x44>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
8000204a:	33 68       	mov	r8,54
8000204c:	c0 48       	rjmp	80002054 <io_pin+0x44>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
8000204e:	33 78       	mov	r8,55
80002050:	c0 28       	rjmp	80002054 <io_pin+0x44>
			break;
		default: 
			return 0; //TODO: return a better error code here
80002052:	30 08       	mov	r8,0
			break;
	}
}
80002054:	10 9c       	mov	r12,r8
80002056:	2f fd       	sub	sp,-4
80002058:	e3 cd 80 80 	ldm	sp++,r7,pc

8000205c <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
8000205c:	eb cd 40 80 	pushm	r7,lr
80002060:	1a 97       	mov	r7,sp
80002062:	20 3d       	sub	sp,12
80002064:	18 98       	mov	r8,r12
80002066:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
8000206a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000206e:	10 9c       	mov	r12,r8
80002070:	f0 1f 00 0c 	mcall	800020a0 <drive_DQ_low+0x44>
80002074:	18 98       	mov	r8,r12
80002076:	ef 68 ff fb 	st.b	r7[-5],r8
	
	ioFlags = (GPIO_DIR_OUTPUT); //14may15 experiment
8000207a:	30 18       	mov	r8,1
8000207c:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ioPin, ioFlags); //14may15 experiment
80002080:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002084:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002088:	12 9b       	mov	r11,r9
8000208a:	10 9c       	mov	r12,r8
8000208c:	f0 1f 00 06 	mcall	800020a4 <drive_DQ_low+0x48>

	gpio_set_pin_low(ioPin);
80002090:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002094:	10 9c       	mov	r12,r8
80002096:	f0 1f 00 05 	mcall	800020a8 <drive_DQ_low+0x4c>

}
8000209a:	2f dd       	sub	sp,-12
8000209c:	e3 cd 80 80 	ldm	sp++,r7,pc
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	20 10       	sub	r0,1
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	47 b0       	lddsp	r0,sp[0x1ec]
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	4a c4       	lddpc	r4,80002158 <sample_line+0x28>

800020ac <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
800020ac:	eb cd 40 80 	pushm	r7,lr
800020b0:	1a 97       	mov	r7,sp
800020b2:	20 3d       	sub	sp,12
800020b4:	18 98       	mov	r8,r12
800020b6:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
800020ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800020be:	10 9c       	mov	r12,r8
800020c0:	f0 1f 00 0a 	mcall	800020e8 <release_the_bus+0x3c>
800020c4:	18 98       	mov	r8,r12
800020c6:	ef 68 ff fb 	st.b	r7[-5],r8
	
//14may15 experiment	gpio_set_pin_high(ioPin);
	
	ioFlags = (GPIO_DIR_INPUT); //14may15 experiment
800020ca:	30 08       	mov	r8,0
800020cc:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ioPin, ioFlags); //14may15 experiment
800020d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020d4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800020d8:	12 9b       	mov	r11,r9
800020da:	10 9c       	mov	r12,r8
800020dc:	f0 1f 00 04 	mcall	800020ec <release_the_bus+0x40>

}
800020e0:	2f dd       	sub	sp,-12
800020e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800020e6:	00 00       	add	r0,r0
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	20 10       	sub	r0,1
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	47 b0       	lddsp	r0,sp[0x1ec]

800020f0 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
800020f0:	eb cd 40 80 	pushm	r7,lr
800020f4:	1a 97       	mov	r7,sp
800020f6:	20 3d       	sub	sp,12
800020f8:	18 98       	mov	r8,r12
800020fa:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 9c       	mov	r12,r8
80002104:	f0 1f 00 09 	mcall	80002128 <gpio_input+0x38>
80002108:	18 98       	mov	r8,r12
8000210a:	ef 68 ff ff 	st.b	r7[-1],r8
		
	ioFlags = (GPIO_DIR_INPUT);
8000210e:	30 08       	mov	r8,0
80002110:	ef 48 ff f8 	st.w	r7[-8],r8
	gpio_configure_pin(ioPin, ioFlags);
80002114:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002118:	ee fb ff f8 	ld.w	r11,r7[-8]
8000211c:	10 9c       	mov	r12,r8
8000211e:	f0 1f 00 04 	mcall	8000212c <gpio_input+0x3c>

}
80002122:	2f dd       	sub	sp,-12
80002124:	e3 cd 80 80 	ldm	sp++,r7,pc
80002128:	80 00       	ld.sh	r0,r0[0x0]
8000212a:	20 10       	sub	r0,1
8000212c:	80 00       	ld.sh	r0,r0[0x0]
8000212e:	47 b0       	lddsp	r0,sp[0x1ec]

80002130 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
80002130:	eb cd 40 80 	pushm	r7,lr
80002134:	1a 97       	mov	r7,sp
80002136:	20 2d       	sub	sp,8
80002138:	18 98       	mov	r8,r12
8000213a:	ef 68 ff f8 	st.b	r7[-8],r8
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
8000213e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002142:	10 9c       	mov	r12,r8
80002144:	f0 1f 00 0a 	mcall	8000216c <sample_line+0x3c>
80002148:	18 98       	mov	r8,r12
8000214a:	ef 68 ff ff 	st.b	r7[-1],r8
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = gpio_get_pin_value(ioPin);
8000214e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002152:	10 9c       	mov	r12,r8
80002154:	f0 1f 00 07 	mcall	80002170 <sample_line+0x40>
80002158:	18 98       	mov	r8,r12
8000215a:	ef 68 ff fe 	st.b	r7[-2],r8

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
8000215e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
80002162:	10 9c       	mov	r12,r8
80002164:	2f ed       	sub	sp,-8
80002166:	e3 cd 80 80 	ldm	sp++,r7,pc
8000216a:	00 00       	add	r0,r0
8000216c:	80 00       	ld.sh	r0,r0[0x0]
8000216e:	20 10       	sub	r0,1
80002170:	80 00       	ld.sh	r0,r0[0x0]
80002172:	4a 4e       	lddpc	lr,80002200 <SetSpeed+0x8c>

80002174 <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
80002174:	eb cd 40 80 	pushm	r7,lr
80002178:	1a 97       	mov	r7,sp
8000217a:	20 1d       	sub	sp,4
8000217c:	ef 4c ff fc 	st.w	r7[-4],r12
		J = 410;
	}
	
#endif

	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
80002180:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002184:	58 08       	cp.w	r8,0
80002186:	c2 20       	breq	800021ca <SetSpeed+0x56>
	{
		// Standard Speed
		A = 0; //6;
80002188:	4a 18       	lddpc	r8,8000220c <SetSpeed+0x98>
8000218a:	30 09       	mov	r9,0
8000218c:	91 09       	st.w	r8[0x0],r9
		B = 32; //64;
8000218e:	4a 18       	lddpc	r8,80002210 <SetSpeed+0x9c>
80002190:	32 09       	mov	r9,32
80002192:	91 09       	st.w	r8[0x0],r9
		C = 30; //60;
80002194:	4a 08       	lddpc	r8,80002214 <SetSpeed+0xa0>
80002196:	31 e9       	mov	r9,30
80002198:	91 09       	st.w	r8[0x0],r9
		D = 2; //10;
8000219a:	4a 08       	lddpc	r8,80002218 <SetSpeed+0xa4>
8000219c:	30 29       	mov	r9,2
8000219e:	91 09       	st.w	r8[0x0],r9
		E = 2; //9;
800021a0:	49 f8       	lddpc	r8,8000221c <SetSpeed+0xa8>
800021a2:	30 29       	mov	r9,2
800021a4:	91 09       	st.w	r8[0x0],r9
		F = 27; //55;
800021a6:	49 f8       	lddpc	r8,80002220 <SetSpeed+0xac>
800021a8:	31 b9       	mov	r9,27
800021aa:	91 09       	st.w	r8[0x0],r9
		G = 0; //0;
800021ac:	49 e8       	lddpc	r8,80002224 <SetSpeed+0xb0>
800021ae:	30 09       	mov	r9,0
800021b0:	91 09       	st.w	r8[0x0],r9
		H = 240; //480;
800021b2:	49 e8       	lddpc	r8,80002228 <SetSpeed+0xb4>
800021b4:	e0 69 00 f0 	mov	r9,240
800021b8:	91 09       	st.w	r8[0x0],r9
		I = 35; //70;
800021ba:	49 d8       	lddpc	r8,8000222c <SetSpeed+0xb8>
800021bc:	32 39       	mov	r9,35
800021be:	91 09       	st.w	r8[0x0],r9
		J = 205; //410;
800021c0:	49 c8       	lddpc	r8,80002230 <SetSpeed+0xbc>
800021c2:	e0 69 00 cd 	mov	r9,205
800021c6:	91 09       	st.w	r8[0x0],r9
800021c8:	c1 f8       	rjmp	80002206 <SetSpeed+0x92>


	else
	{
		// Overdrive Speed
		A = 1.5;
800021ca:	49 18       	lddpc	r8,8000220c <SetSpeed+0x98>
800021cc:	30 19       	mov	r9,1
800021ce:	91 09       	st.w	r8[0x0],r9
		B = 7.5;
800021d0:	49 08       	lddpc	r8,80002210 <SetSpeed+0x9c>
800021d2:	30 79       	mov	r9,7
800021d4:	91 09       	st.w	r8[0x0],r9
		C = 7.5;
800021d6:	49 08       	lddpc	r8,80002214 <SetSpeed+0xa0>
800021d8:	30 79       	mov	r9,7
800021da:	91 09       	st.w	r8[0x0],r9
		D = 2.5;
800021dc:	48 f8       	lddpc	r8,80002218 <SetSpeed+0xa4>
800021de:	30 29       	mov	r9,2
800021e0:	91 09       	st.w	r8[0x0],r9
		E = 0.75;
800021e2:	48 f8       	lddpc	r8,8000221c <SetSpeed+0xa8>
800021e4:	30 09       	mov	r9,0
800021e6:	91 09       	st.w	r8[0x0],r9
		F = 7;
800021e8:	48 e8       	lddpc	r8,80002220 <SetSpeed+0xac>
800021ea:	30 79       	mov	r9,7
800021ec:	91 09       	st.w	r8[0x0],r9
		G = 2.5;
800021ee:	48 e8       	lddpc	r8,80002224 <SetSpeed+0xb0>
800021f0:	30 29       	mov	r9,2
800021f2:	91 09       	st.w	r8[0x0],r9
		H = 70;
800021f4:	48 d8       	lddpc	r8,80002228 <SetSpeed+0xb4>
800021f6:	34 69       	mov	r9,70
800021f8:	91 09       	st.w	r8[0x0],r9
		I = 8.5;
800021fa:	48 d8       	lddpc	r8,8000222c <SetSpeed+0xb8>
800021fc:	30 89       	mov	r9,8
800021fe:	91 09       	st.w	r8[0x0],r9
		J = 40;
80002200:	48 c8       	lddpc	r8,80002230 <SetSpeed+0xbc>
80002202:	32 89       	mov	r9,40
80002204:	91 09       	st.w	r8[0x0],r9
	}
}
80002206:	2f fd       	sub	sp,-4
80002208:	e3 cd 80 80 	ldm	sp++,r7,pc
8000220c:	00 00       	add	r0,r0
8000220e:	02 b8       	st.h	r1++,r8
80002210:	00 00       	add	r0,r0
80002212:	02 bc       	st.h	r1++,r12
80002214:	00 00       	add	r0,r0
80002216:	02 c4       	st.b	r1++,r4
80002218:	00 00       	add	r0,r0
8000221a:	02 b4       	st.h	r1++,r4
8000221c:	00 00       	add	r0,r0
8000221e:	02 d0       	st.w	--r1,r0
80002220:	00 00       	add	r0,r0
80002222:	02 d8       	st.w	--r1,r8
80002224:	00 00       	add	r0,r0
80002226:	02 c8       	st.b	r1++,r8
80002228:	00 00       	add	r0,r0
8000222a:	02 cc       	st.b	r1++,r12
8000222c:	00 00       	add	r0,r0
8000222e:	02 d4       	st.w	--r1,r4
80002230:	00 00       	add	r0,r0
80002232:	02 c0       	st.b	r1++,r0

80002234 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
80002234:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002238:	1a 97       	mov	r7,sp
8000223a:	fa cd 00 e0 	sub	sp,sp,224
8000223e:	18 98       	mov	r8,r12
80002240:	ef 68 ff 48 	st.b	r7[-184],r8
	int result;

	cpu_delay_us(A, EC_CPU_CLOCK_FREQ);
80002244:	fe f8 05 9c 	ld.w	r8,pc[1436]
80002248:	70 08       	ld.w	r8,r8[0x0]
8000224a:	ef 48 ff 84 	st.w	r7[-124],r8
8000224e:	e0 68 e1 00 	mov	r8,57600
80002252:	ea 18 05 f5 	orh	r8,0x5f5
80002256:	ef 48 ff 80 	st.w	r7[-128],r8
8000225a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000225e:	ef 48 ff 8c 	st.w	r7[-116],r8
80002262:	ee f8 ff 80 	ld.w	r8,r7[-128]
80002266:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000226a:	ee f2 ff 8c 	ld.w	r2,r7[-116]
8000226e:	30 03       	mov	r3,0
80002270:	ee fa ff 88 	ld.w	r10,r7[-120]
80002274:	30 0b       	mov	r11,0
80002276:	e6 0a 02 49 	mul	r9,r3,r10
8000227a:	f6 02 02 48 	mul	r8,r11,r2
8000227e:	10 09       	add	r9,r8
80002280:	e4 0a 06 4a 	mulu.d	r10,r2,r10
80002284:	16 09       	add	r9,r11
80002286:	12 9b       	mov	r11,r9
80002288:	ee 78 42 3f 	mov	r8,999999
8000228c:	30 09       	mov	r9,0
8000228e:	10 0a       	add	r10,r8
80002290:	f6 09 00 4b 	adc	r11,r11,r9
80002294:	ee 78 42 40 	mov	r8,1000000
80002298:	30 09       	mov	r9,0
8000229a:	f0 1f 01 53 	mcall	800027e4 <OWTouchReset+0x5b0>
8000229e:	14 98       	mov	r8,r10
800022a0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800022a2:	ef 48 ff 94 	st.w	r7[-108],r8
800022a6:	ee c8 00 b4 	sub	r8,r7,180
800022aa:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022ae:	e1 b8 00 42 	mfsr	r8,0x108
800022b2:	10 99       	mov	r9,r8
800022b4:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022b8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022ba:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022be:	70 09       	ld.w	r9,r8[0x0]
800022c0:	ee f8 ff 94 	ld.w	r8,r7[-108]
800022c4:	10 09       	add	r9,r8
800022c6:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022ca:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800022cc:	ee f9 ff 90 	ld.w	r9,r7[-112]
800022d0:	30 08       	mov	r8,0
800022d2:	f3 68 00 08 	st.b	r9[8],r8
800022d6:	ee c8 00 b4 	sub	r8,r7,180
800022da:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022de:	e1 b8 00 42 	mfsr	r8,0x108
800022e2:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800022e6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022ea:	f1 39 00 08 	ld.ub	r9,r8[8]
800022ee:	30 28       	mov	r8,2
800022f0:	f0 09 18 00 	cp.b	r9,r8
800022f4:	c0 31       	brne	800022fa <OWTouchReset+0xc6>
    return false;
800022f6:	30 08       	mov	r8,0
800022f8:	c4 38       	rjmp	8000237e <OWTouchReset+0x14a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800022fa:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022fe:	f1 39 00 08 	ld.ub	r9,r8[8]
80002302:	30 18       	mov	r8,1
80002304:	f0 09 18 00 	cp.b	r9,r8
80002308:	c0 31       	brne	8000230e <OWTouchReset+0xda>
    return true;
8000230a:	30 18       	mov	r8,1
8000230c:	c3 98       	rjmp	8000237e <OWTouchReset+0x14a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000230e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002312:	70 09       	ld.w	r9,r8[0x0]
80002314:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002318:	70 18       	ld.w	r8,r8[0x4]
8000231a:	10 39       	cp.w	r9,r8
8000231c:	e0 88 00 1a 	brls	80002350 <OWTouchReset+0x11c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002320:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002324:	70 08       	ld.w	r8,r8[0x0]
80002326:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000232a:	10 39       	cp.w	r9,r8
8000232c:	c1 02       	brcc	8000234c <OWTouchReset+0x118>
8000232e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002332:	70 18       	ld.w	r8,r8[0x4]
80002334:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002338:	10 39       	cp.w	r9,r8
8000233a:	e0 88 00 09 	brls	8000234c <OWTouchReset+0x118>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000233e:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002342:	30 18       	mov	r8,1
80002344:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002348:	30 18       	mov	r8,1
8000234a:	c1 a8       	rjmp	8000237e <OWTouchReset+0x14a>
    }
    return false;
8000234c:	30 08       	mov	r8,0
8000234e:	c1 88       	rjmp	8000237e <OWTouchReset+0x14a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002350:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002354:	70 08       	ld.w	r8,r8[0x0]
80002356:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000235a:	10 39       	cp.w	r9,r8
8000235c:	c0 93       	brcs	8000236e <OWTouchReset+0x13a>
8000235e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002362:	70 18       	ld.w	r8,r8[0x4]
80002364:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002368:	10 39       	cp.w	r9,r8
8000236a:	e0 88 00 09 	brls	8000237c <OWTouchReset+0x148>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000236e:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002372:	30 18       	mov	r8,1
80002374:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002378:	30 18       	mov	r8,1
8000237a:	c0 28       	rjmp	8000237e <OWTouchReset+0x14a>
    }
    return false;
8000237c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000237e:	58 08       	cp.w	r8,0
80002380:	ca b0       	breq	800022d6 <OWTouchReset+0xa2>
	drive_DQ_low(idx);
80002382:	ef 38 ff 48 	ld.ub	r8,r7[-184]
80002386:	10 9c       	mov	r12,r8
80002388:	f0 1f 01 18 	mcall	800027e8 <OWTouchReset+0x5b4>
	cpu_delay_us(H, EC_CPU_CLOCK_FREQ);	//tRSTL (reset low) 480-640us
8000238c:	fe f8 04 60 	ld.w	r8,pc[1120]
80002390:	70 08       	ld.w	r8,r8[0x0]
80002392:	ef 48 ff a4 	st.w	r7[-92],r8
80002396:	e0 68 e1 00 	mov	r8,57600
8000239a:	ea 18 05 f5 	orh	r8,0x5f5
8000239e:	ef 48 ff a0 	st.w	r7[-96],r8
800023a2:	ee f8 ff a4 	ld.w	r8,r7[-92]
800023a6:	ef 48 ff ac 	st.w	r7[-84],r8
800023aa:	ee f8 ff a0 	ld.w	r8,r7[-96]
800023ae:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800023b2:	ee fc ff ac 	ld.w	r12,r7[-84]
800023b6:	ef 4c ff 2c 	st.w	r7[-212],r12
800023ba:	30 0b       	mov	r11,0
800023bc:	ef 4b ff 28 	st.w	r7[-216],r11
800023c0:	ee f9 ff a8 	ld.w	r9,r7[-88]
800023c4:	ef 49 ff 24 	st.w	r7[-220],r9
800023c8:	30 08       	mov	r8,0
800023ca:	ef 48 ff 20 	st.w	r7[-224],r8
800023ce:	ee fa ff 28 	ld.w	r10,r7[-216]
800023d2:	ee fc ff 24 	ld.w	r12,r7[-220]
800023d6:	b9 3a       	mul	r10,r12
800023d8:	ee f8 ff 20 	ld.w	r8,r7[-224]
800023dc:	ee fb ff 2c 	ld.w	r11,r7[-212]
800023e0:	b7 38       	mul	r8,r11
800023e2:	10 0a       	add	r10,r8
800023e4:	ee fc ff 2c 	ld.w	r12,r7[-212]
800023e8:	ee fb ff 24 	ld.w	r11,r7[-220]
800023ec:	f8 0b 06 48 	mulu.d	r8,r12,r11
800023f0:	12 0a       	add	r10,r9
800023f2:	14 99       	mov	r9,r10
800023f4:	ee 7a 42 3f 	mov	r10,999999
800023f8:	30 0b       	mov	r11,0
800023fa:	f0 0a 00 0a 	add	r10,r8,r10
800023fe:	f2 0b 00 4b 	adc	r11,r9,r11
80002402:	ee 78 42 40 	mov	r8,1000000
80002406:	30 09       	mov	r9,0
80002408:	f0 1f 00 f7 	mcall	800027e4 <OWTouchReset+0x5b0>
8000240c:	14 98       	mov	r8,r10
8000240e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002410:	ef 48 ff b4 	st.w	r7[-76],r8
80002414:	ee c8 00 a8 	sub	r8,r7,168
80002418:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000241c:	e1 b8 00 42 	mfsr	r8,0x108
80002420:	10 99       	mov	r9,r8
80002422:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002426:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002428:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000242c:	70 09       	ld.w	r9,r8[0x0]
8000242e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002432:	10 09       	add	r9,r8
80002434:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002438:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000243a:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000243e:	30 08       	mov	r8,0
80002440:	f3 68 00 08 	st.b	r9[8],r8
80002444:	ee c8 00 a8 	sub	r8,r7,168
80002448:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000244c:	e1 b8 00 42 	mfsr	r8,0x108
80002450:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002454:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002458:	f1 39 00 08 	ld.ub	r9,r8[8]
8000245c:	30 28       	mov	r8,2
8000245e:	f0 09 18 00 	cp.b	r9,r8
80002462:	c0 31       	brne	80002468 <OWTouchReset+0x234>
    return false;
80002464:	30 08       	mov	r8,0
80002466:	c4 38       	rjmp	800024ec <OWTouchReset+0x2b8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002468:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000246c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002470:	30 18       	mov	r8,1
80002472:	f0 09 18 00 	cp.b	r9,r8
80002476:	c0 31       	brne	8000247c <OWTouchReset+0x248>
    return true;
80002478:	30 18       	mov	r8,1
8000247a:	c3 98       	rjmp	800024ec <OWTouchReset+0x2b8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000247c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002480:	70 09       	ld.w	r9,r8[0x0]
80002482:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002486:	70 18       	ld.w	r8,r8[0x4]
80002488:	10 39       	cp.w	r9,r8
8000248a:	e0 88 00 1a 	brls	800024be <OWTouchReset+0x28a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000248e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002492:	70 08       	ld.w	r8,r8[0x0]
80002494:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002498:	10 39       	cp.w	r9,r8
8000249a:	c1 02       	brcc	800024ba <OWTouchReset+0x286>
8000249c:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024a0:	70 18       	ld.w	r8,r8[0x4]
800024a2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024a6:	10 39       	cp.w	r9,r8
800024a8:	e0 88 00 09 	brls	800024ba <OWTouchReset+0x286>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024ac:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024b0:	30 18       	mov	r8,1
800024b2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024b6:	30 18       	mov	r8,1
800024b8:	c1 a8       	rjmp	800024ec <OWTouchReset+0x2b8>
    }
    return false;
800024ba:	30 08       	mov	r8,0
800024bc:	c1 88       	rjmp	800024ec <OWTouchReset+0x2b8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800024be:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024c2:	70 08       	ld.w	r8,r8[0x0]
800024c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024c8:	10 39       	cp.w	r9,r8
800024ca:	c0 93       	brcs	800024dc <OWTouchReset+0x2a8>
800024cc:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024d0:	70 18       	ld.w	r8,r8[0x4]
800024d2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024d6:	10 39       	cp.w	r9,r8
800024d8:	e0 88 00 09 	brls	800024ea <OWTouchReset+0x2b6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024dc:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024e0:	30 18       	mov	r8,1
800024e2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024e6:	30 18       	mov	r8,1
800024e8:	c0 28       	rjmp	800024ec <OWTouchReset+0x2b8>
    }
    return false;
800024ea:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800024ec:	58 08       	cp.w	r8,0
800024ee:	ca b0       	breq	80002444 <OWTouchReset+0x210>
	release_the_bus(idx);
800024f0:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024f4:	10 9c       	mov	r12,r8
800024f6:	f0 1f 00 bf 	mcall	800027f0 <OWTouchReset+0x5bc>
	
	gpio_input(idx); //14may15 experiment
800024fa:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024fe:	10 9c       	mov	r12,r8
80002500:	f0 1f 00 bd 	mcall	800027f4 <OWTouchReset+0x5c0>

	
	cpu_delay_us(I, EC_CPU_CLOCK_FREQ);	//tMSP (presence detect sample) 60-75us
80002504:	fe f8 02 f4 	ld.w	r8,pc[756]
80002508:	70 08       	ld.w	r8,r8[0x0]
8000250a:	ef 48 ff c4 	st.w	r7[-60],r8
8000250e:	e0 68 e1 00 	mov	r8,57600
80002512:	ea 18 05 f5 	orh	r8,0x5f5
80002516:	ef 48 ff c0 	st.w	r7[-64],r8
8000251a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000251e:	ef 48 ff cc 	st.w	r7[-52],r8
80002522:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002526:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000252a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000252e:	ef 49 ff 3c 	st.w	r7[-196],r9
80002532:	30 08       	mov	r8,0
80002534:	ef 48 ff 38 	st.w	r7[-200],r8
80002538:	ee fc ff c8 	ld.w	r12,r7[-56]
8000253c:	ef 4c ff 34 	st.w	r7[-204],r12
80002540:	30 0b       	mov	r11,0
80002542:	ef 4b ff 30 	st.w	r7[-208],r11
80002546:	ee fa ff 38 	ld.w	r10,r7[-200]
8000254a:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000254e:	b3 3a       	mul	r10,r9
80002550:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002554:	ee fc ff 3c 	ld.w	r12,r7[-196]
80002558:	b9 38       	mul	r8,r12
8000255a:	10 0a       	add	r10,r8
8000255c:	ee fb ff 3c 	ld.w	r11,r7[-196]
80002560:	ee fc ff 34 	ld.w	r12,r7[-204]
80002564:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002568:	12 0a       	add	r10,r9
8000256a:	14 99       	mov	r9,r10
8000256c:	ee 7a 42 3f 	mov	r10,999999
80002570:	30 0b       	mov	r11,0
80002572:	f0 0a 00 0a 	add	r10,r8,r10
80002576:	f2 0b 00 4b 	adc	r11,r9,r11
8000257a:	ee 78 42 40 	mov	r8,1000000
8000257e:	30 09       	mov	r9,0
80002580:	f0 1f 00 99 	mcall	800027e4 <OWTouchReset+0x5b0>
80002584:	14 98       	mov	r8,r10
80002586:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002588:	ef 48 ff d4 	st.w	r7[-44],r8
8000258c:	ee c8 00 9c 	sub	r8,r7,156
80002590:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002594:	e1 b8 00 42 	mfsr	r8,0x108
80002598:	10 99       	mov	r9,r8
8000259a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000259e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025a0:	ee f8 ff d0 	ld.w	r8,r7[-48]
800025a4:	70 09       	ld.w	r9,r8[0x0]
800025a6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800025aa:	10 09       	add	r9,r8
800025ac:	ee f8 ff d0 	ld.w	r8,r7[-48]
800025b0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800025b2:	ee f9 ff d0 	ld.w	r9,r7[-48]
800025b6:	30 08       	mov	r8,0
800025b8:	f3 68 00 08 	st.b	r9[8],r8
800025bc:	ee c8 00 9c 	sub	r8,r7,156
800025c0:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025c4:	e1 b8 00 42 	mfsr	r8,0x108
800025c8:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800025cc:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025d0:	f1 39 00 08 	ld.ub	r9,r8[8]
800025d4:	30 28       	mov	r8,2
800025d6:	f0 09 18 00 	cp.b	r9,r8
800025da:	c0 31       	brne	800025e0 <OWTouchReset+0x3ac>
    return false;
800025dc:	30 08       	mov	r8,0
800025de:	c4 38       	rjmp	80002664 <OWTouchReset+0x430>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800025e0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025e4:	f1 39 00 08 	ld.ub	r9,r8[8]
800025e8:	30 18       	mov	r8,1
800025ea:	f0 09 18 00 	cp.b	r9,r8
800025ee:	c0 31       	brne	800025f4 <OWTouchReset+0x3c0>
    return true;
800025f0:	30 18       	mov	r8,1
800025f2:	c3 98       	rjmp	80002664 <OWTouchReset+0x430>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025f4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025f8:	70 09       	ld.w	r9,r8[0x0]
800025fa:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025fe:	70 18       	ld.w	r8,r8[0x4]
80002600:	10 39       	cp.w	r9,r8
80002602:	e0 88 00 1a 	brls	80002636 <OWTouchReset+0x402>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002606:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000260a:	70 08       	ld.w	r8,r8[0x0]
8000260c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002610:	10 39       	cp.w	r9,r8
80002612:	c1 02       	brcc	80002632 <OWTouchReset+0x3fe>
80002614:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002618:	70 18       	ld.w	r8,r8[0x4]
8000261a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000261e:	10 39       	cp.w	r9,r8
80002620:	e0 88 00 09 	brls	80002632 <OWTouchReset+0x3fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002624:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002628:	30 18       	mov	r8,1
8000262a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000262e:	30 18       	mov	r8,1
80002630:	c1 a8       	rjmp	80002664 <OWTouchReset+0x430>
    }
    return false;
80002632:	30 08       	mov	r8,0
80002634:	c1 88       	rjmp	80002664 <OWTouchReset+0x430>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002636:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000263a:	70 08       	ld.w	r8,r8[0x0]
8000263c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002640:	10 39       	cp.w	r9,r8
80002642:	c0 93       	brcs	80002654 <OWTouchReset+0x420>
80002644:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002648:	70 18       	ld.w	r8,r8[0x4]
8000264a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000264e:	10 39       	cp.w	r9,r8
80002650:	e0 88 00 09 	brls	80002662 <OWTouchReset+0x42e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002654:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002658:	30 18       	mov	r8,1
8000265a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000265e:	30 18       	mov	r8,1
80002660:	c0 28       	rjmp	80002664 <OWTouchReset+0x430>
    }
    return false;
80002662:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002664:	58 08       	cp.w	r8,0
80002666:	ca b0       	breq	800025bc <OWTouchReset+0x388>
	result = sample_line(idx);
80002668:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000266c:	10 9c       	mov	r12,r8
8000266e:	f0 1f 00 64 	mcall	800027fc <OWTouchReset+0x5c8>
80002672:	18 98       	mov	r8,r12
80002674:	ef 48 ff 7c 	st.w	r7[-132],r8
	
	gpio_input(idx); //14may15 experiement
80002678:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000267c:	10 9c       	mov	r12,r8
8000267e:	f0 1f 00 5e 	mcall	800027f4 <OWTouchReset+0x5c0>

	cpu_delay_us(J, EC_CPU_CLOCK_FREQ); // Complete the reset sequence recovery 5-??us (no max?)
80002682:	4e 08       	lddpc	r8,80002800 <OWTouchReset+0x5cc>
80002684:	70 08       	ld.w	r8,r8[0x0]
80002686:	ef 48 ff e4 	st.w	r7[-28],r8
8000268a:	e0 68 e1 00 	mov	r8,57600
8000268e:	ea 18 05 f5 	orh	r8,0x5f5
80002692:	ef 48 ff e0 	st.w	r7[-32],r8
80002696:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000269a:	ef 48 ff ec 	st.w	r7[-20],r8
8000269e:	ee f8 ff e0 	ld.w	r8,r7[-32]
800026a2:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800026a6:	ee fb ff ec 	ld.w	r11,r7[-20]
800026aa:	ef 4b ff 44 	st.w	r7[-188],r11
800026ae:	30 09       	mov	r9,0
800026b0:	ef 49 ff 40 	st.w	r7[-192],r9
800026b4:	ee f0 ff e8 	ld.w	r0,r7[-24]
800026b8:	30 01       	mov	r1,0
800026ba:	ee fa ff 40 	ld.w	r10,r7[-192]
800026be:	a1 3a       	mul	r10,r0
800026c0:	ee fc ff 44 	ld.w	r12,r7[-188]
800026c4:	e2 0c 02 48 	mul	r8,r1,r12
800026c8:	10 0a       	add	r10,r8
800026ca:	ee fb ff 44 	ld.w	r11,r7[-188]
800026ce:	f6 00 06 48 	mulu.d	r8,r11,r0
800026d2:	12 0a       	add	r10,r9
800026d4:	14 99       	mov	r9,r10
800026d6:	ee 7a 42 3f 	mov	r10,999999
800026da:	30 0b       	mov	r11,0
800026dc:	f0 0a 00 0a 	add	r10,r8,r10
800026e0:	f2 0b 00 4b 	adc	r11,r9,r11
800026e4:	ee 78 42 40 	mov	r8,1000000
800026e8:	30 09       	mov	r9,0
800026ea:	f0 1f 00 3f 	mcall	800027e4 <OWTouchReset+0x5b0>
800026ee:	14 98       	mov	r8,r10
800026f0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800026f2:	ef 48 ff f4 	st.w	r7[-12],r8
800026f6:	ee c8 00 90 	sub	r8,r7,144
800026fa:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026fe:	e1 b8 00 42 	mfsr	r8,0x108
80002702:	10 99       	mov	r9,r8
80002704:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002708:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000270a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000270e:	70 09       	ld.w	r9,r8[0x0]
80002710:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002714:	10 09       	add	r9,r8
80002716:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000271a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000271c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002720:	30 08       	mov	r8,0
80002722:	f3 68 00 08 	st.b	r9[8],r8
80002726:	ee c8 00 90 	sub	r8,r7,144
8000272a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000272e:	e1 b8 00 42 	mfsr	r8,0x108
80002732:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002736:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000273a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000273e:	30 28       	mov	r8,2
80002740:	f0 09 18 00 	cp.b	r9,r8
80002744:	c0 31       	brne	8000274a <OWTouchReset+0x516>
    return false;
80002746:	30 08       	mov	r8,0
80002748:	c4 38       	rjmp	800027ce <OWTouchReset+0x59a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000274a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000274e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002752:	30 18       	mov	r8,1
80002754:	f0 09 18 00 	cp.b	r9,r8
80002758:	c0 31       	brne	8000275e <OWTouchReset+0x52a>
    return true;
8000275a:	30 18       	mov	r8,1
8000275c:	c3 98       	rjmp	800027ce <OWTouchReset+0x59a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000275e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002762:	70 09       	ld.w	r9,r8[0x0]
80002764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002768:	70 18       	ld.w	r8,r8[0x4]
8000276a:	10 39       	cp.w	r9,r8
8000276c:	e0 88 00 1a 	brls	800027a0 <OWTouchReset+0x56c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002774:	70 08       	ld.w	r8,r8[0x0]
80002776:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000277a:	10 39       	cp.w	r9,r8
8000277c:	c1 02       	brcc	8000279c <OWTouchReset+0x568>
8000277e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002782:	70 18       	ld.w	r8,r8[0x4]
80002784:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002788:	10 39       	cp.w	r9,r8
8000278a:	e0 88 00 09 	brls	8000279c <OWTouchReset+0x568>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000278e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002792:	30 18       	mov	r8,1
80002794:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002798:	30 18       	mov	r8,1
8000279a:	c1 a8       	rjmp	800027ce <OWTouchReset+0x59a>
    }
    return false;
8000279c:	30 08       	mov	r8,0
8000279e:	c1 88       	rjmp	800027ce <OWTouchReset+0x59a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800027a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027a4:	70 08       	ld.w	r8,r8[0x0]
800027a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027aa:	10 39       	cp.w	r9,r8
800027ac:	c0 93       	brcs	800027be <OWTouchReset+0x58a>
800027ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027b2:	70 18       	ld.w	r8,r8[0x4]
800027b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027b8:	10 39       	cp.w	r9,r8
800027ba:	e0 88 00 09 	brls	800027cc <OWTouchReset+0x598>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800027c2:	30 18       	mov	r8,1
800027c4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027c8:	30 18       	mov	r8,1
800027ca:	c0 28       	rjmp	800027ce <OWTouchReset+0x59a>
    }
    return false;
800027cc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800027ce:	58 08       	cp.w	r8,0
800027d0:	ca b0       	breq	80002726 <OWTouchReset+0x4f2>
	return result; // Return sample presence pulse result
800027d2:	ee f8 ff 7c 	ld.w	r8,r7[-132]
}
800027d6:	10 9c       	mov	r12,r8
800027d8:	2c 8d       	sub	sp,-224
800027da:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800027de:	00 00       	add	r0,r0
800027e0:	00 00       	add	r0,r0
800027e2:	02 b8       	st.h	r1++,r8
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	a2 b6       	st.b	r1[0x3],r6
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	20 5c       	sub	r12,5
800027ec:	00 00       	add	r0,r0
800027ee:	02 cc       	st.b	r1++,r12
800027f0:	80 00       	ld.sh	r0,r0[0x0]
800027f2:	20 ac       	sub	r12,10
800027f4:	80 00       	ld.sh	r0,r0[0x0]
800027f6:	20 f0       	sub	r0,15
800027f8:	00 00       	add	r0,r0
800027fa:	02 d4       	st.w	--r1,r4
800027fc:	80 00       	ld.sh	r0,r0[0x0]
800027fe:	21 30       	sub	r0,19
80002800:	00 00       	add	r0,r0
80002802:	02 c0       	st.b	r1++,r0

80002804 <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
80002804:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002808:	1a 97       	mov	r7,sp
8000280a:	20 fd       	sub	sp,60
8000280c:	18 98       	mov	r8,r12
8000280e:	ef 68 ff c4 	st.b	r7[-60],r8
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
80002812:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80002816:	10 9c       	mov	r12,r8
80002818:	f0 1f 00 61 	mcall	8000299c <drive_DQ_low_and_release_the_bus+0x198>
8000281c:	18 98       	mov	r8,r12
8000281e:	ef 68 ff d7 	st.b	r7[-41],r8
	
	ioFlagsInput = (GPIO_DIR_INPUT);
80002822:	30 08       	mov	r8,0
80002824:	ef 48 ff dc 	st.w	r7[-36],r8
	ioFlagsOutput = (GPIO_DIR_OUTPUT); //14may15 experiment
80002828:	30 18       	mov	r8,1
8000282a:	ef 48 ff d8 	st.w	r7[-40],r8

	gpio_configure_pin(ioPin, ioFlagsOutput); //14may15 experiment
8000282e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002832:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80002836:	12 9b       	mov	r11,r9
80002838:	10 9c       	mov	r12,r8
8000283a:	f0 1f 00 5a 	mcall	800029a0 <drive_DQ_low_and_release_the_bus+0x19c>

	gpio_set_pin_low(ioPin);
8000283e:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80002842:	10 9c       	mov	r12,r8
80002844:	f0 1f 00 58 	mcall	800029a4 <drive_DQ_low_and_release_the_bus+0x1a0>
	
	cpu_delay_us(A, EC_CPU_CLOCK_FREQ);	//tW1L 5-15us
80002848:	4d 88       	lddpc	r8,800029a8 <drive_DQ_low_and_release_the_bus+0x1a4>
8000284a:	70 08       	ld.w	r8,r8[0x0]
8000284c:	ef 48 ff e4 	st.w	r7[-28],r8
80002850:	e0 68 e1 00 	mov	r8,57600
80002854:	ea 18 05 f5 	orh	r8,0x5f5
80002858:	ef 48 ff e0 	st.w	r7[-32],r8
8000285c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002860:	ef 48 ff ec 	st.w	r7[-20],r8
80002864:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002868:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000286c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002870:	30 01       	mov	r1,0
80002872:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002876:	30 03       	mov	r3,0
80002878:	e2 02 02 4a 	mul	r10,r1,r2
8000287c:	e6 00 02 48 	mul	r8,r3,r0
80002880:	10 0a       	add	r10,r8
80002882:	e0 02 06 48 	mulu.d	r8,r0,r2
80002886:	12 0a       	add	r10,r9
80002888:	14 99       	mov	r9,r10
8000288a:	ee 7a 42 3f 	mov	r10,999999
8000288e:	30 0b       	mov	r11,0
80002890:	f0 0a 00 0a 	add	r10,r8,r10
80002894:	f2 0b 00 4b 	adc	r11,r9,r11
80002898:	ee 78 42 40 	mov	r8,1000000
8000289c:	30 09       	mov	r9,0
8000289e:	f0 1f 00 44 	mcall	800029ac <drive_DQ_low_and_release_the_bus+0x1a8>
800028a2:	14 98       	mov	r8,r10
800028a4:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800028a6:	ef 48 ff f4 	st.w	r7[-12],r8
800028aa:	ee c8 00 38 	sub	r8,r7,56
800028ae:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800028b2:	e1 b8 00 42 	mfsr	r8,0x108
800028b6:	10 99       	mov	r9,r8
800028b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028bc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800028be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028c2:	70 09       	ld.w	r9,r8[0x0]
800028c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028c8:	10 09       	add	r9,r8
800028ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028ce:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800028d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800028d4:	30 08       	mov	r8,0
800028d6:	f3 68 00 08 	st.b	r9[8],r8
800028da:	ee c8 00 38 	sub	r8,r7,56
800028de:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800028e2:	e1 b8 00 42 	mfsr	r8,0x108
800028e6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800028ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ee:	f1 39 00 08 	ld.ub	r9,r8[8]
800028f2:	30 28       	mov	r8,2
800028f4:	f0 09 18 00 	cp.b	r9,r8
800028f8:	c0 31       	brne	800028fe <drive_DQ_low_and_release_the_bus+0xfa>
    return false;
800028fa:	30 08       	mov	r8,0
800028fc:	c4 38       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800028fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002902:	f1 39 00 08 	ld.ub	r9,r8[8]
80002906:	30 18       	mov	r8,1
80002908:	f0 09 18 00 	cp.b	r9,r8
8000290c:	c0 31       	brne	80002912 <drive_DQ_low_and_release_the_bus+0x10e>
    return true;
8000290e:	30 18       	mov	r8,1
80002910:	c3 98       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002912:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002916:	70 09       	ld.w	r9,r8[0x0]
80002918:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000291c:	70 18       	ld.w	r8,r8[0x4]
8000291e:	10 39       	cp.w	r9,r8
80002920:	e0 88 00 1a 	brls	80002954 <drive_DQ_low_and_release_the_bus+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002924:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002928:	70 08       	ld.w	r8,r8[0x0]
8000292a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000292e:	10 39       	cp.w	r9,r8
80002930:	c1 02       	brcc	80002950 <drive_DQ_low_and_release_the_bus+0x14c>
80002932:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002936:	70 18       	ld.w	r8,r8[0x4]
80002938:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000293c:	10 39       	cp.w	r9,r8
8000293e:	e0 88 00 09 	brls	80002950 <drive_DQ_low_and_release_the_bus+0x14c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002942:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002946:	30 18       	mov	r8,1
80002948:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000294c:	30 18       	mov	r8,1
8000294e:	c1 a8       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
    }
    return false;
80002950:	30 08       	mov	r8,0
80002952:	c1 88       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002954:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002958:	70 08       	ld.w	r8,r8[0x0]
8000295a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000295e:	10 39       	cp.w	r9,r8
80002960:	c0 93       	brcs	80002972 <drive_DQ_low_and_release_the_bus+0x16e>
80002962:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002966:	70 18       	ld.w	r8,r8[0x4]
80002968:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000296c:	10 39       	cp.w	r9,r8
8000296e:	e0 88 00 09 	brls	80002980 <drive_DQ_low_and_release_the_bus+0x17c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002972:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002976:	30 18       	mov	r8,1
80002978:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000297c:	30 18       	mov	r8,1
8000297e:	c0 28       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
    }
    return false;
80002980:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002982:	58 08       	cp.w	r8,0
80002984:	ca b0       	breq	800028da <drive_DQ_low_and_release_the_bus+0xd6>

	gpio_configure_pin(ioPin, ioFlagsInput); //14may15 experiment
80002986:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000298a:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000298e:	12 9b       	mov	r11,r9
80002990:	10 9c       	mov	r12,r8
80002992:	f0 1f 00 04 	mcall	800029a0 <drive_DQ_low_and_release_the_bus+0x19c>
	
}
80002996:	2f 1d       	sub	sp,-60
80002998:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000299c:	80 00       	ld.sh	r0,r0[0x0]
8000299e:	20 10       	sub	r0,1
800029a0:	80 00       	ld.sh	r0,r0[0x0]
800029a2:	47 b0       	lddsp	r0,sp[0x1ec]
800029a4:	80 00       	ld.sh	r0,r0[0x0]
800029a6:	4a c4       	lddpc	r4,80002a54 <OWWriteBit+0xa4>
800029a8:	00 00       	add	r0,r0
800029aa:	02 b8       	st.h	r1++,r8
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	a2 b6       	st.b	r1[0x3],r6

800029b0 <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
800029b0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800029b4:	1a 97       	mov	r7,sp
800029b6:	fa cd 00 ac 	sub	sp,sp,172
800029ba:	18 98       	mov	r8,r12
800029bc:	ef 4b ff 74 	st.w	r7[-140],r11
800029c0:	ef 68 ff 78 	st.b	r7[-136],r8
	if (bit)
800029c4:	ee f8 ff 74 	ld.w	r8,r7[-140]
800029c8:	58 08       	cp.w	r8,0
800029ca:	e0 80 00 ba 	breq	80002b3e <OWWriteBit+0x18e>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
800029ce:	ef 38 ff 78 	ld.ub	r8,r7[-136]
800029d2:	10 9c       	mov	r12,r8
800029d4:	f0 1f 01 0a 	mcall	80002dfc <OWWriteBit+0x44c>
#if 0
		drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough		cpu_delay_us(A, EC_CPU_CLOCK_FREQ	//tW1L 5-15us
		release_the_bus(idx);
#endif
		cpu_delay_us(B, EC_CPU_CLOCK_FREQ);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
800029d8:	fe f8 04 28 	ld.w	r8,pc[1064]
800029dc:	70 08       	ld.w	r8,r8[0x0]
800029de:	ef 48 ff a4 	st.w	r7[-92],r8
800029e2:	e0 68 e1 00 	mov	r8,57600
800029e6:	ea 18 05 f5 	orh	r8,0x5f5
800029ea:	ef 48 ff a0 	st.w	r7[-96],r8
800029ee:	ee f8 ff a4 	ld.w	r8,r7[-92]
800029f2:	ef 48 ff ac 	st.w	r7[-84],r8
800029f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800029fa:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800029fe:	ee fc ff ac 	ld.w	r12,r7[-84]
80002a02:	ef 4c ff 60 	st.w	r7[-160],r12
80002a06:	30 0b       	mov	r11,0
80002a08:	ef 4b ff 5c 	st.w	r7[-164],r11
80002a0c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80002a10:	ef 49 ff 58 	st.w	r7[-168],r9
80002a14:	30 08       	mov	r8,0
80002a16:	ef 48 ff 54 	st.w	r7[-172],r8
80002a1a:	ee fa ff 5c 	ld.w	r10,r7[-164]
80002a1e:	ee fc ff 58 	ld.w	r12,r7[-168]
80002a22:	b9 3a       	mul	r10,r12
80002a24:	ee f8 ff 54 	ld.w	r8,r7[-172]
80002a28:	ee fb ff 60 	ld.w	r11,r7[-160]
80002a2c:	b7 38       	mul	r8,r11
80002a2e:	10 0a       	add	r10,r8
80002a30:	ee fc ff 60 	ld.w	r12,r7[-160]
80002a34:	ee fb ff 58 	ld.w	r11,r7[-168]
80002a38:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002a3c:	12 0a       	add	r10,r9
80002a3e:	14 99       	mov	r9,r10
80002a40:	ee 7a 42 3f 	mov	r10,999999
80002a44:	30 0b       	mov	r11,0
80002a46:	f0 0a 00 0a 	add	r10,r8,r10
80002a4a:	f2 0b 00 4b 	adc	r11,r9,r11
80002a4e:	ee 78 42 40 	mov	r8,1000000
80002a52:	30 09       	mov	r9,0
80002a54:	f0 1f 00 ec 	mcall	80002e04 <OWWriteBit+0x454>
80002a58:	14 98       	mov	r8,r10
80002a5a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002a5c:	ef 48 ff b4 	st.w	r7[-76],r8
80002a60:	ee c8 00 84 	sub	r8,r7,132
80002a64:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a68:	e1 b8 00 42 	mfsr	r8,0x108
80002a6c:	10 99       	mov	r9,r8
80002a6e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a72:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a74:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a78:	70 09       	ld.w	r9,r8[0x0]
80002a7a:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002a7e:	10 09       	add	r9,r8
80002a80:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a84:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002a86:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002a8a:	30 08       	mov	r8,0
80002a8c:	f3 68 00 08 	st.b	r9[8],r8
80002a90:	ee c8 00 84 	sub	r8,r7,132
80002a94:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a98:	e1 b8 00 42 	mfsr	r8,0x108
80002a9c:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002aa0:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002aa4:	f1 39 00 08 	ld.ub	r9,r8[8]
80002aa8:	30 28       	mov	r8,2
80002aaa:	f0 09 18 00 	cp.b	r9,r8
80002aae:	c0 31       	brne	80002ab4 <OWWriteBit+0x104>
    return false;
80002ab0:	30 08       	mov	r8,0
80002ab2:	c4 38       	rjmp	80002b38 <OWWriteBit+0x188>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002ab4:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ab8:	f1 39 00 08 	ld.ub	r9,r8[8]
80002abc:	30 18       	mov	r8,1
80002abe:	f0 09 18 00 	cp.b	r9,r8
80002ac2:	c0 31       	brne	80002ac8 <OWWriteBit+0x118>
    return true;
80002ac4:	30 18       	mov	r8,1
80002ac6:	c3 98       	rjmp	80002b38 <OWWriteBit+0x188>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ac8:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002acc:	70 09       	ld.w	r9,r8[0x0]
80002ace:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ad2:	70 18       	ld.w	r8,r8[0x4]
80002ad4:	10 39       	cp.w	r9,r8
80002ad6:	e0 88 00 1a 	brls	80002b0a <OWWriteBit+0x15a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ada:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ade:	70 08       	ld.w	r8,r8[0x0]
80002ae0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002ae4:	10 39       	cp.w	r9,r8
80002ae6:	c1 02       	brcc	80002b06 <OWWriteBit+0x156>
80002ae8:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002aec:	70 18       	ld.w	r8,r8[0x4]
80002aee:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002af2:	10 39       	cp.w	r9,r8
80002af4:	e0 88 00 09 	brls	80002b06 <OWWriteBit+0x156>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002af8:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002afc:	30 18       	mov	r8,1
80002afe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b02:	30 18       	mov	r8,1
80002b04:	c1 a8       	rjmp	80002b38 <OWWriteBit+0x188>
    }
    return false;
80002b06:	30 08       	mov	r8,0
80002b08:	c1 88       	rjmp	80002b38 <OWWriteBit+0x188>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002b0a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002b0e:	70 08       	ld.w	r8,r8[0x0]
80002b10:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002b14:	10 39       	cp.w	r9,r8
80002b16:	c0 93       	brcs	80002b28 <OWWriteBit+0x178>
80002b18:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002b1c:	70 18       	ld.w	r8,r8[0x4]
80002b1e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002b22:	10 39       	cp.w	r9,r8
80002b24:	e0 88 00 09 	brls	80002b36 <OWWriteBit+0x186>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002b28:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002b2c:	30 18       	mov	r8,1
80002b2e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b32:	30 18       	mov	r8,1
80002b34:	c0 28       	rjmp	80002b38 <OWWriteBit+0x188>
    }
    return false;
80002b36:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002b38:	58 08       	cp.w	r8,0
80002b3a:	ca b0       	breq	80002a90 <OWWriteBit+0xe0>
80002b3c:	c5 c9       	rjmp	80002df4 <OWWriteBit+0x444>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
80002b3e:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002b42:	10 9c       	mov	r12,r8
80002b44:	f0 1f 00 b1 	mcall	80002e08 <OWWriteBit+0x458>
		cpu_delay_us(C, EC_CPU_CLOCK_FREQ);	//tW0L 60-120us
80002b48:	fe f8 02 c4 	ld.w	r8,pc[708]
80002b4c:	70 08       	ld.w	r8,r8[0x0]
80002b4e:	ef 48 ff c4 	st.w	r7[-60],r8
80002b52:	e0 68 e1 00 	mov	r8,57600
80002b56:	ea 18 05 f5 	orh	r8,0x5f5
80002b5a:	ef 48 ff c0 	st.w	r7[-64],r8
80002b5e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002b62:	ef 48 ff cc 	st.w	r7[-52],r8
80002b66:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002b6a:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002b6e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80002b72:	ef 49 ff 70 	st.w	r7[-144],r9
80002b76:	30 08       	mov	r8,0
80002b78:	ef 48 ff 6c 	st.w	r7[-148],r8
80002b7c:	ee fc ff c8 	ld.w	r12,r7[-56]
80002b80:	ef 4c ff 68 	st.w	r7[-152],r12
80002b84:	30 0b       	mov	r11,0
80002b86:	ef 4b ff 64 	st.w	r7[-156],r11
80002b8a:	ee fa ff 6c 	ld.w	r10,r7[-148]
80002b8e:	ee f9 ff 68 	ld.w	r9,r7[-152]
80002b92:	b3 3a       	mul	r10,r9
80002b94:	ee f8 ff 64 	ld.w	r8,r7[-156]
80002b98:	ee fc ff 70 	ld.w	r12,r7[-144]
80002b9c:	b9 38       	mul	r8,r12
80002b9e:	10 0a       	add	r10,r8
80002ba0:	ee fb ff 70 	ld.w	r11,r7[-144]
80002ba4:	ee fc ff 68 	ld.w	r12,r7[-152]
80002ba8:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002bac:	12 0a       	add	r10,r9
80002bae:	14 99       	mov	r9,r10
80002bb0:	ee 7a 42 3f 	mov	r10,999999
80002bb4:	30 0b       	mov	r11,0
80002bb6:	f0 0a 00 0a 	add	r10,r8,r10
80002bba:	f2 0b 00 4b 	adc	r11,r9,r11
80002bbe:	ee 78 42 40 	mov	r8,1000000
80002bc2:	30 09       	mov	r9,0
80002bc4:	f0 1f 00 90 	mcall	80002e04 <OWWriteBit+0x454>
80002bc8:	14 98       	mov	r8,r10
80002bca:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002bcc:	ef 48 ff d4 	st.w	r7[-44],r8
80002bd0:	ee c8 00 78 	sub	r8,r7,120
80002bd4:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002bd8:	e1 b8 00 42 	mfsr	r8,0x108
80002bdc:	10 99       	mov	r9,r8
80002bde:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002be2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002be4:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002be8:	70 09       	ld.w	r9,r8[0x0]
80002bea:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002bee:	10 09       	add	r9,r8
80002bf0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002bf4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002bf6:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002bfa:	30 08       	mov	r8,0
80002bfc:	f3 68 00 08 	st.b	r9[8],r8
80002c00:	ee c8 00 78 	sub	r8,r7,120
80002c04:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c08:	e1 b8 00 42 	mfsr	r8,0x108
80002c0c:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002c10:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c14:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c18:	30 28       	mov	r8,2
80002c1a:	f0 09 18 00 	cp.b	r9,r8
80002c1e:	c0 31       	brne	80002c24 <OWWriteBit+0x274>
    return false;
80002c20:	30 08       	mov	r8,0
80002c22:	c4 38       	rjmp	80002ca8 <OWWriteBit+0x2f8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002c24:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c28:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c2c:	30 18       	mov	r8,1
80002c2e:	f0 09 18 00 	cp.b	r9,r8
80002c32:	c0 31       	brne	80002c38 <OWWriteBit+0x288>
    return true;
80002c34:	30 18       	mov	r8,1
80002c36:	c3 98       	rjmp	80002ca8 <OWWriteBit+0x2f8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c38:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c3c:	70 09       	ld.w	r9,r8[0x0]
80002c3e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c42:	70 18       	ld.w	r8,r8[0x4]
80002c44:	10 39       	cp.w	r9,r8
80002c46:	e0 88 00 1a 	brls	80002c7a <OWWriteBit+0x2ca>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c4a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c4e:	70 08       	ld.w	r8,r8[0x0]
80002c50:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c54:	10 39       	cp.w	r9,r8
80002c56:	c1 02       	brcc	80002c76 <OWWriteBit+0x2c6>
80002c58:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c5c:	70 18       	ld.w	r8,r8[0x4]
80002c5e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c62:	10 39       	cp.w	r9,r8
80002c64:	e0 88 00 09 	brls	80002c76 <OWWriteBit+0x2c6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c68:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c6c:	30 18       	mov	r8,1
80002c6e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002c72:	30 18       	mov	r8,1
80002c74:	c1 a8       	rjmp	80002ca8 <OWWriteBit+0x2f8>
    }
    return false;
80002c76:	30 08       	mov	r8,0
80002c78:	c1 88       	rjmp	80002ca8 <OWWriteBit+0x2f8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c7a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c7e:	70 08       	ld.w	r8,r8[0x0]
80002c80:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c84:	10 39       	cp.w	r9,r8
80002c86:	c0 93       	brcs	80002c98 <OWWriteBit+0x2e8>
80002c88:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c8c:	70 18       	ld.w	r8,r8[0x4]
80002c8e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c92:	10 39       	cp.w	r9,r8
80002c94:	e0 88 00 09 	brls	80002ca6 <OWWriteBit+0x2f6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c98:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c9c:	30 18       	mov	r8,1
80002c9e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ca2:	30 18       	mov	r8,1
80002ca4:	c0 28       	rjmp	80002ca8 <OWWriteBit+0x2f8>
    }
    return false;
80002ca6:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002ca8:	58 08       	cp.w	r8,0
80002caa:	ca b0       	breq	80002c00 <OWWriteBit+0x250>
		release_the_bus(idx);
80002cac:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002cb0:	10 9c       	mov	r12,r8
80002cb2:	f0 1f 00 58 	mcall	80002e10 <OWWriteBit+0x460>
		cpu_delay_us(D, EC_CPU_CLOCK_FREQ);	//tREC 5-??us
80002cb6:	4d 88       	lddpc	r8,80002e14 <OWWriteBit+0x464>
80002cb8:	70 08       	ld.w	r8,r8[0x0]
80002cba:	ef 48 ff e4 	st.w	r7[-28],r8
80002cbe:	e0 68 e1 00 	mov	r8,57600
80002cc2:	ea 18 05 f5 	orh	r8,0x5f5
80002cc6:	ef 48 ff e0 	st.w	r7[-32],r8
80002cca:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002cce:	ef 48 ff ec 	st.w	r7[-20],r8
80002cd2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002cd6:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002cda:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002cde:	30 01       	mov	r1,0
80002ce0:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002ce4:	30 03       	mov	r3,0
80002ce6:	e2 02 02 4a 	mul	r10,r1,r2
80002cea:	e6 00 02 48 	mul	r8,r3,r0
80002cee:	10 0a       	add	r10,r8
80002cf0:	e0 02 06 48 	mulu.d	r8,r0,r2
80002cf4:	12 0a       	add	r10,r9
80002cf6:	14 99       	mov	r9,r10
80002cf8:	ee 7a 42 3f 	mov	r10,999999
80002cfc:	30 0b       	mov	r11,0
80002cfe:	f0 0a 00 0a 	add	r10,r8,r10
80002d02:	f2 0b 00 4b 	adc	r11,r9,r11
80002d06:	ee 78 42 40 	mov	r8,1000000
80002d0a:	30 09       	mov	r9,0
80002d0c:	f0 1f 00 3e 	mcall	80002e04 <OWWriteBit+0x454>
80002d10:	14 98       	mov	r8,r10
80002d12:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002d14:	ef 48 ff f4 	st.w	r7[-12],r8
80002d18:	ee c8 00 6c 	sub	r8,r7,108
80002d1c:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d20:	e1 b8 00 42 	mfsr	r8,0x108
80002d24:	10 99       	mov	r9,r8
80002d26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d2a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d30:	70 09       	ld.w	r9,r8[0x0]
80002d32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d36:	10 09       	add	r9,r8
80002d38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d3c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002d3e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002d42:	30 08       	mov	r8,0
80002d44:	f3 68 00 08 	st.b	r9[8],r8
80002d48:	ee c8 00 6c 	sub	r8,r7,108
80002d4c:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d50:	e1 b8 00 42 	mfsr	r8,0x108
80002d54:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002d58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d5c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d60:	30 28       	mov	r8,2
80002d62:	f0 09 18 00 	cp.b	r9,r8
80002d66:	c0 31       	brne	80002d6c <OWWriteBit+0x3bc>
    return false;
80002d68:	30 08       	mov	r8,0
80002d6a:	c4 38       	rjmp	80002df0 <OWWriteBit+0x440>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d70:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d74:	30 18       	mov	r8,1
80002d76:	f0 09 18 00 	cp.b	r9,r8
80002d7a:	c0 31       	brne	80002d80 <OWWriteBit+0x3d0>
    return true;
80002d7c:	30 18       	mov	r8,1
80002d7e:	c3 98       	rjmp	80002df0 <OWWriteBit+0x440>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d84:	70 09       	ld.w	r9,r8[0x0]
80002d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d8a:	70 18       	ld.w	r8,r8[0x4]
80002d8c:	10 39       	cp.w	r9,r8
80002d8e:	e0 88 00 1a 	brls	80002dc2 <OWWriteBit+0x412>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d96:	70 08       	ld.w	r8,r8[0x0]
80002d98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d9c:	10 39       	cp.w	r9,r8
80002d9e:	c1 02       	brcc	80002dbe <OWWriteBit+0x40e>
80002da0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002da4:	70 18       	ld.w	r8,r8[0x4]
80002da6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002daa:	10 39       	cp.w	r9,r8
80002dac:	e0 88 00 09 	brls	80002dbe <OWWriteBit+0x40e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002db0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002db4:	30 18       	mov	r8,1
80002db6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dba:	30 18       	mov	r8,1
80002dbc:	c1 a8       	rjmp	80002df0 <OWWriteBit+0x440>
    }
    return false;
80002dbe:	30 08       	mov	r8,0
80002dc0:	c1 88       	rjmp	80002df0 <OWWriteBit+0x440>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dc6:	70 08       	ld.w	r8,r8[0x0]
80002dc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dcc:	10 39       	cp.w	r9,r8
80002dce:	c0 93       	brcs	80002de0 <OWWriteBit+0x430>
80002dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dd4:	70 18       	ld.w	r8,r8[0x4]
80002dd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dda:	10 39       	cp.w	r9,r8
80002ddc:	e0 88 00 09 	brls	80002dee <OWWriteBit+0x43e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002de0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002de4:	30 18       	mov	r8,1
80002de6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dea:	30 18       	mov	r8,1
80002dec:	c0 28       	rjmp	80002df0 <OWWriteBit+0x440>
    }
    return false;
80002dee:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002df0:	58 08       	cp.w	r8,0
80002df2:	ca b0       	breq	80002d48 <OWWriteBit+0x398>
	}
}
80002df4:	2d 5d       	sub	sp,-172
80002df6:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002dfa:	00 00       	add	r0,r0
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	28 04       	sub	r4,-128
80002e00:	00 00       	add	r0,r0
80002e02:	02 bc       	st.h	r1++,r12
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	a2 b6       	st.b	r1[0x3],r6
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	20 5c       	sub	r12,5
80002e0c:	00 00       	add	r0,r0
80002e0e:	02 c4       	st.b	r1++,r4
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	20 ac       	sub	r12,10
80002e14:	00 00       	add	r0,r0
80002e16:	02 b4       	st.h	r1++,r4

80002e18 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
80002e18:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002e1c:	1a 97       	mov	r7,sp
80002e1e:	21 cd       	sub	sp,112
80002e20:	18 98       	mov	r8,r12
80002e22:	ef 68 ff a0 	st.b	r7[-96],r8
#if 0
	drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough	cpu_delay_us(A, EC_CPU_CLOCK_FREQ	//tRL 5-15us
	release_the_bus(idx);
#endif
	drive_DQ_low_and_release_the_bus(idx);
80002e26:	ef 38 ff a0 	ld.ub	r8,r7[-96]
80002e2a:	10 9c       	mov	r12,r8
80002e2c:	f0 1f 00 b1 	mcall	800030f0 <OWReadBit+0x2d8>
	
	cpu_delay_us(E, EC_CPU_CLOCK_FREQ);	//tMSR 5-15us
80002e30:	fe f8 02 c4 	ld.w	r8,pc[708]
80002e34:	70 08       	ld.w	r8,r8[0x0]
80002e36:	ef 48 ff c4 	st.w	r7[-60],r8
80002e3a:	e0 68 e1 00 	mov	r8,57600
80002e3e:	ea 18 05 f5 	orh	r8,0x5f5
80002e42:	ef 48 ff c0 	st.w	r7[-64],r8
80002e46:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002e4a:	ef 48 ff cc 	st.w	r7[-52],r8
80002e4e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002e52:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002e56:	ee fc ff cc 	ld.w	r12,r7[-52]
80002e5a:	ef 4c ff 9c 	st.w	r7[-100],r12
80002e5e:	30 0b       	mov	r11,0
80002e60:	ef 4b ff 98 	st.w	r7[-104],r11
80002e64:	ee f9 ff c8 	ld.w	r9,r7[-56]
80002e68:	ef 49 ff 94 	st.w	r7[-108],r9
80002e6c:	30 08       	mov	r8,0
80002e6e:	ef 48 ff 90 	st.w	r7[-112],r8
80002e72:	ee fa ff 98 	ld.w	r10,r7[-104]
80002e76:	ee fc ff 94 	ld.w	r12,r7[-108]
80002e7a:	b9 3a       	mul	r10,r12
80002e7c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002e80:	ee fb ff 9c 	ld.w	r11,r7[-100]
80002e84:	b7 38       	mul	r8,r11
80002e86:	10 0a       	add	r10,r8
80002e88:	ee fc ff 9c 	ld.w	r12,r7[-100]
80002e8c:	ee fb ff 94 	ld.w	r11,r7[-108]
80002e90:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002e94:	12 0a       	add	r10,r9
80002e96:	14 99       	mov	r9,r10
80002e98:	ee 7a 42 3f 	mov	r10,999999
80002e9c:	30 0b       	mov	r11,0
80002e9e:	f0 0a 00 0a 	add	r10,r8,r10
80002ea2:	f2 0b 00 4b 	adc	r11,r9,r11
80002ea6:	ee 78 42 40 	mov	r8,1000000
80002eaa:	30 09       	mov	r9,0
80002eac:	f0 1f 00 93 	mcall	800030f8 <OWReadBit+0x2e0>
80002eb0:	14 98       	mov	r8,r10
80002eb2:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002eb4:	ef 48 ff d4 	st.w	r7[-44],r8
80002eb8:	ee c8 00 5c 	sub	r8,r7,92
80002ebc:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ec0:	e1 b8 00 42 	mfsr	r8,0x108
80002ec4:	10 99       	mov	r9,r8
80002ec6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002eca:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ecc:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002ed0:	70 09       	ld.w	r9,r8[0x0]
80002ed2:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ed6:	10 09       	add	r9,r8
80002ed8:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002edc:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002ede:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002ee2:	30 08       	mov	r8,0
80002ee4:	f3 68 00 08 	st.b	r9[8],r8
80002ee8:	ee c8 00 5c 	sub	r8,r7,92
80002eec:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ef0:	e1 b8 00 42 	mfsr	r8,0x108
80002ef4:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002ef8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002efc:	f1 39 00 08 	ld.ub	r9,r8[8]
80002f00:	30 28       	mov	r8,2
80002f02:	f0 09 18 00 	cp.b	r9,r8
80002f06:	c0 31       	brne	80002f0c <OWReadBit+0xf4>
    return false;
80002f08:	30 08       	mov	r8,0
80002f0a:	c4 38       	rjmp	80002f90 <OWReadBit+0x178>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002f0c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f10:	f1 39 00 08 	ld.ub	r9,r8[8]
80002f14:	30 18       	mov	r8,1
80002f16:	f0 09 18 00 	cp.b	r9,r8
80002f1a:	c0 31       	brne	80002f20 <OWReadBit+0x108>
    return true;
80002f1c:	30 18       	mov	r8,1
80002f1e:	c3 98       	rjmp	80002f90 <OWReadBit+0x178>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f20:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f24:	70 09       	ld.w	r9,r8[0x0]
80002f26:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f2a:	70 18       	ld.w	r8,r8[0x4]
80002f2c:	10 39       	cp.w	r9,r8
80002f2e:	e0 88 00 1a 	brls	80002f62 <OWReadBit+0x14a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f32:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f36:	70 08       	ld.w	r8,r8[0x0]
80002f38:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f3c:	10 39       	cp.w	r9,r8
80002f3e:	c1 02       	brcc	80002f5e <OWReadBit+0x146>
80002f40:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f44:	70 18       	ld.w	r8,r8[0x4]
80002f46:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f4a:	10 39       	cp.w	r9,r8
80002f4c:	e0 88 00 09 	brls	80002f5e <OWReadBit+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002f50:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002f54:	30 18       	mov	r8,1
80002f56:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002f5a:	30 18       	mov	r8,1
80002f5c:	c1 a8       	rjmp	80002f90 <OWReadBit+0x178>
    }
    return false;
80002f5e:	30 08       	mov	r8,0
80002f60:	c1 88       	rjmp	80002f90 <OWReadBit+0x178>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f62:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f66:	70 08       	ld.w	r8,r8[0x0]
80002f68:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f6c:	10 39       	cp.w	r9,r8
80002f6e:	c0 93       	brcs	80002f80 <OWReadBit+0x168>
80002f70:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f74:	70 18       	ld.w	r8,r8[0x4]
80002f76:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f7a:	10 39       	cp.w	r9,r8
80002f7c:	e0 88 00 09 	brls	80002f8e <OWReadBit+0x176>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002f80:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002f84:	30 18       	mov	r8,1
80002f86:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002f8a:	30 18       	mov	r8,1
80002f8c:	c0 28       	rjmp	80002f90 <OWReadBit+0x178>
    }
    return false;
80002f8e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002f90:	58 08       	cp.w	r8,0
80002f92:	ca b0       	breq	80002ee8 <OWReadBit+0xd0>
	result = sample_line(idx);
80002f94:	ef 38 ff a0 	ld.ub	r8,r7[-96]
80002f98:	10 9c       	mov	r12,r8
80002f9a:	f0 1f 00 59 	mcall	800030fc <OWReadBit+0x2e4>
80002f9e:	18 98       	mov	r8,r12
80002fa0:	ef 48 ff bc 	st.w	r7[-68],r8
	cpu_delay_us(F, EC_CPU_CLOCK_FREQ); // Complete the time slot and 10us recovery tREC 5+us
80002fa4:	4d 78       	lddpc	r8,80003100 <OWReadBit+0x2e8>
80002fa6:	70 08       	ld.w	r8,r8[0x0]
80002fa8:	ef 48 ff e4 	st.w	r7[-28],r8
80002fac:	e0 68 e1 00 	mov	r8,57600
80002fb0:	ea 18 05 f5 	orh	r8,0x5f5
80002fb4:	ef 48 ff e0 	st.w	r7[-32],r8
80002fb8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002fbc:	ef 48 ff ec 	st.w	r7[-20],r8
80002fc0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002fc4:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002fc8:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002fcc:	30 01       	mov	r1,0
80002fce:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002fd2:	30 03       	mov	r3,0
80002fd4:	e2 02 02 4a 	mul	r10,r1,r2
80002fd8:	e6 00 02 48 	mul	r8,r3,r0
80002fdc:	10 0a       	add	r10,r8
80002fde:	e0 02 06 48 	mulu.d	r8,r0,r2
80002fe2:	12 0a       	add	r10,r9
80002fe4:	14 99       	mov	r9,r10
80002fe6:	ee 7a 42 3f 	mov	r10,999999
80002fea:	30 0b       	mov	r11,0
80002fec:	f0 0a 00 0a 	add	r10,r8,r10
80002ff0:	f2 0b 00 4b 	adc	r11,r9,r11
80002ff4:	ee 78 42 40 	mov	r8,1000000
80002ff8:	30 09       	mov	r9,0
80002ffa:	f0 1f 00 40 	mcall	800030f8 <OWReadBit+0x2e0>
80002ffe:	14 98       	mov	r8,r10
80003000:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80003002:	ef 48 ff f4 	st.w	r7[-12],r8
80003006:	ee c8 00 50 	sub	r8,r7,80
8000300a:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000300e:	e1 b8 00 42 	mfsr	r8,0x108
80003012:	10 99       	mov	r9,r8
80003014:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003018:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000301a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000301e:	70 09       	ld.w	r9,r8[0x0]
80003020:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003024:	10 09       	add	r9,r8
80003026:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000302a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000302c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003030:	30 08       	mov	r8,0
80003032:	f3 68 00 08 	st.b	r9[8],r8
80003036:	ee c8 00 50 	sub	r8,r7,80
8000303a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000303e:	e1 b8 00 42 	mfsr	r8,0x108
80003042:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000304a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000304e:	30 28       	mov	r8,2
80003050:	f0 09 18 00 	cp.b	r9,r8
80003054:	c0 31       	brne	8000305a <OWReadBit+0x242>
    return false;
80003056:	30 08       	mov	r8,0
80003058:	c4 38       	rjmp	800030de <OWReadBit+0x2c6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000305a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000305e:	f1 39 00 08 	ld.ub	r9,r8[8]
80003062:	30 18       	mov	r8,1
80003064:	f0 09 18 00 	cp.b	r9,r8
80003068:	c0 31       	brne	8000306e <OWReadBit+0x256>
    return true;
8000306a:	30 18       	mov	r8,1
8000306c:	c3 98       	rjmp	800030de <OWReadBit+0x2c6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000306e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003072:	70 09       	ld.w	r9,r8[0x0]
80003074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003078:	70 18       	ld.w	r8,r8[0x4]
8000307a:	10 39       	cp.w	r9,r8
8000307c:	e0 88 00 1a 	brls	800030b0 <OWReadBit+0x298>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003084:	70 08       	ld.w	r8,r8[0x0]
80003086:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000308a:	10 39       	cp.w	r9,r8
8000308c:	c1 02       	brcc	800030ac <OWReadBit+0x294>
8000308e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003092:	70 18       	ld.w	r8,r8[0x4]
80003094:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003098:	10 39       	cp.w	r9,r8
8000309a:	e0 88 00 09 	brls	800030ac <OWReadBit+0x294>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000309e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800030a2:	30 18       	mov	r8,1
800030a4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800030a8:	30 18       	mov	r8,1
800030aa:	c1 a8       	rjmp	800030de <OWReadBit+0x2c6>
    }
    return false;
800030ac:	30 08       	mov	r8,0
800030ae:	c1 88       	rjmp	800030de <OWReadBit+0x2c6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030b4:	70 08       	ld.w	r8,r8[0x0]
800030b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800030ba:	10 39       	cp.w	r9,r8
800030bc:	c0 93       	brcs	800030ce <OWReadBit+0x2b6>
800030be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030c2:	70 18       	ld.w	r8,r8[0x4]
800030c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800030c8:	10 39       	cp.w	r9,r8
800030ca:	e0 88 00 09 	brls	800030dc <OWReadBit+0x2c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800030ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800030d2:	30 18       	mov	r8,1
800030d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800030d8:	30 18       	mov	r8,1
800030da:	c0 28       	rjmp	800030de <OWReadBit+0x2c6>
    }
    return false;
800030dc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800030de:	58 08       	cp.w	r8,0
800030e0:	ca b0       	breq	80003036 <OWReadBit+0x21e>

	return result;
800030e2:	ee f8 ff bc 	ld.w	r8,r7[-68]
}
800030e6:	10 9c       	mov	r12,r8
800030e8:	2e 4d       	sub	sp,-112
800030ea:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800030ee:	00 00       	add	r0,r0
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	28 04       	sub	r4,-128
800030f4:	00 00       	add	r0,r0
800030f6:	02 d0       	st.w	--r1,r0
800030f8:	80 00       	ld.sh	r0,r0[0x0]
800030fa:	a2 b6       	st.b	r1[0x3],r6
800030fc:	80 00       	ld.sh	r0,r0[0x0]
800030fe:	21 30       	sub	r0,19
80003100:	00 00       	add	r0,r0
80003102:	02 d8       	st.w	--r1,r8

80003104 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
80003104:	eb cd 40 80 	pushm	r7,lr
80003108:	1a 97       	mov	r7,sp
8000310a:	20 3d       	sub	sp,12
8000310c:	18 98       	mov	r8,r12
8000310e:	ef 4b ff f4 	st.w	r7[-12],r11
80003112:	ef 68 ff f8 	st.b	r7[-8],r8
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
80003116:	30 08       	mov	r8,0
80003118:	ef 48 ff fc 	st.w	r7[-4],r8
8000311c:	c1 58       	rjmp	80003146 <OWWriteByte+0x42>
	{
		OWWriteBit(idx, data & 0x01);
8000311e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003122:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80003126:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000312a:	12 9b       	mov	r11,r9
8000312c:	10 9c       	mov	r12,r8
8000312e:	f0 1f 00 0b 	mcall	80003158 <OWWriteByte+0x54>

		// shift the data byte for the next bit
		data >>= 1;
80003132:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003136:	a1 58       	asr	r8,0x1
80003138:	ef 48 ff f4 	st.w	r7[-12],r8
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
8000313c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003140:	2f f8       	sub	r8,-1
80003142:	ef 48 ff fc 	st.w	r7[-4],r8
80003146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000314a:	58 78       	cp.w	r8,7
8000314c:	fe 9a ff e9 	brle	8000311e <OWWriteByte+0x1a>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
80003150:	2f dd       	sub	sp,-12
80003152:	e3 cd 80 80 	ldm	sp++,r7,pc
80003156:	00 00       	add	r0,r0
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	29 b0       	sub	r0,-101

8000315c <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
8000315c:	eb cd 40 80 	pushm	r7,lr
80003160:	1a 97       	mov	r7,sp
80003162:	20 3d       	sub	sp,12
80003164:	18 98       	mov	r8,r12
80003166:	ef 68 ff f4 	st.b	r7[-12],r8
	int loop, result=0;
8000316a:	30 08       	mov	r8,0
8000316c:	ef 48 ff fc 	st.w	r7[-4],r8

	for (loop = 0; loop < 8; loop++)
80003170:	30 08       	mov	r8,0
80003172:	ef 48 ff f8 	st.w	r7[-8],r8
80003176:	c1 88       	rjmp	800031a6 <OWReadByte+0x4a>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
80003178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000317c:	a1 58       	asr	r8,0x1
8000317e:	ef 48 ff fc 	st.w	r7[-4],r8

		// if result is one, then set MS bit
		if (OWReadBit(idx))
80003182:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003186:	10 9c       	mov	r12,r8
80003188:	f0 1f 00 0d 	mcall	800031bc <OWReadByte+0x60>
8000318c:	18 98       	mov	r8,r12
8000318e:	58 08       	cp.w	r8,0
80003190:	c0 60       	breq	8000319c <OWReadByte+0x40>
		result |= 0x80;
80003192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003196:	a7 b8       	sbr	r8,0x7
80003198:	ef 48 ff fc 	st.w	r7[-4],r8
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
8000319c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031a0:	2f f8       	sub	r8,-1
800031a2:	ef 48 ff f8 	st.w	r7[-8],r8
800031a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031aa:	58 78       	cp.w	r8,7
800031ac:	fe 9a ff e6 	brle	80003178 <OWReadByte+0x1c>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
800031b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800031b4:	10 9c       	mov	r12,r8
800031b6:	2f dd       	sub	sp,-12
800031b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800031bc:	80 00       	ld.sh	r0,r0[0x0]
800031be:	2e 18       	sub	r8,-31

800031c0 <init_ecdbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_ecdbg_rs232(long pba_hz)
{
800031c0:	eb cd 40 80 	pushm	r7,lr
800031c4:	1a 97       	mov	r7,sp
800031c6:	20 1d       	sub	sp,4
800031c8:	ef 4c ff fc 	st.w	r7[-4],r12
  init_ecdbg_rs232_ex(ECDBG_USART_BAUDRATE, pba_hz);
800031cc:	ee fb ff fc 	ld.w	r11,r7[-4]
800031d0:	e0 7c c2 00 	mov	r12,115200
800031d4:	f0 1f 00 03 	mcall	800031e0 <init_ecdbg_rs232+0x20>
}
800031d8:	2f fd       	sub	sp,-4
800031da:	e3 cd 80 80 	ldm	sp++,r7,pc
800031de:	00 00       	add	r0,r0
800031e0:	80 00       	ld.sh	r0,r0[0x0]
800031e2:	32 08       	mov	r8,32

800031e4 <init_display_rs232>:

void init_display_rs232(long pba_hz)
{
800031e4:	eb cd 40 80 	pushm	r7,lr
800031e8:	1a 97       	mov	r7,sp
800031ea:	20 1d       	sub	sp,4
800031ec:	ef 4c ff fc 	st.w	r7[-4],r12
	init_display_rs232_ex(DISPLAY_USART_BAUDRATE, pba_hz);
800031f0:	ee fb ff fc 	ld.w	r11,r7[-4]
800031f4:	e0 6c 12 c0 	mov	r12,4800
800031f8:	f0 1f 00 03 	mcall	80003204 <init_display_rs232+0x20>
}
800031fc:	2f fd       	sub	sp,-4
800031fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80003202:	00 00       	add	r0,r0
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	32 64       	mov	r4,38

80003208 <init_ecdbg_rs232_ex>:


void init_ecdbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80003208:	eb cd 40 80 	pushm	r7,lr
8000320c:	1a 97       	mov	r7,sp
8000320e:	20 5d       	sub	sp,20
80003210:	ef 4c ff f0 	st.w	r7[-16],r12
80003214:	ef 4b ff ec 	st.w	r7[-20],r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80003218:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000321c:	ef 48 ff f4 	st.w	r7[-12],r8
80003220:	30 88       	mov	r8,8
80003222:	ef 68 ff f8 	st.b	r7[-8],r8
80003226:	30 48       	mov	r8,4
80003228:	ef 68 ff f9 	st.b	r7[-7],r8
8000322c:	30 08       	mov	r8,0
8000322e:	ef 58 ff fa 	st.h	r7[-6],r8
80003232:	30 08       	mov	r8,0
80003234:	ef 68 ff fc 	st.b	r7[-4],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(ECDBG_USART_GPIO_MAP,
80003238:	30 2b       	mov	r11,2
8000323a:	48 8c       	lddpc	r12,80003258 <init_ecdbg_rs232_ex+0x50>
8000323c:	f0 1f 00 08 	mcall	8000325c <init_ecdbg_rs232_ex+0x54>
                     sizeof(ECDBG_USART_GPIO_MAP) / sizeof(ECDBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(ECDBG_USART, &ecdbg_usart_options, pba_hz);
80003240:	ee c8 00 0c 	sub	r8,r7,12
80003244:	ee fa ff ec 	ld.w	r10,r7[-20]
80003248:	10 9b       	mov	r11,r8
8000324a:	fe 7c 28 00 	mov	r12,-55296
8000324e:	f0 1f 00 05 	mcall	80003260 <init_ecdbg_rs232_ex+0x58>
}
80003252:	2f bd       	sub	sp,-20
80003254:	e3 cd 80 80 	ldm	sp++,r7,pc
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	aa 10       	st.h	r5[0x2],r0
8000325c:	80 00       	ld.sh	r0,r0[0x0]
8000325e:	44 c4       	lddsp	r4,sp[0x130]
80003260:	80 00       	ld.sh	r0,r0[0x0]
80003262:	56 68       	stdsp	sp[0x198],r8

80003264 <init_display_rs232_ex>:

void init_display_rs232_ex(unsigned long baudrate, long pba_hz)
{
80003264:	eb cd 40 80 	pushm	r7,lr
80003268:	1a 97       	mov	r7,sp
8000326a:	20 5d       	sub	sp,20
8000326c:	ef 4c ff f0 	st.w	r7[-16],r12
80003270:	ef 4b ff ec 	st.w	r7[-20],r11
		.baudrate = baudrate,
		.charlength = 8,
		.paritytype = USART_NO_PARITY,
		.stopbits = USART_1_STOPBIT,
		.channelmode = USART_NORMAL_CHMODE
	};
80003274:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003278:	ef 48 ff f4 	st.w	r7[-12],r8
8000327c:	30 88       	mov	r8,8
8000327e:	ef 68 ff f8 	st.b	r7[-8],r8
80003282:	30 48       	mov	r8,4
80003284:	ef 68 ff f9 	st.b	r7[-7],r8
80003288:	30 08       	mov	r8,0
8000328a:	ef 58 ff fa 	st.h	r7[-6],r8
8000328e:	30 08       	mov	r8,0
80003290:	ef 68 ff fc 	st.b	r7[-4],r8

	// Setup GPIO for debug USART.
	gpio_enable_module(DISPLAY_USART_GPIO_MAP,
80003294:	30 2b       	mov	r11,2
80003296:	48 8c       	lddpc	r12,800032b4 <init_display_rs232_ex+0x50>
80003298:	f0 1f 00 08 	mcall	800032b8 <init_display_rs232_ex+0x54>
	sizeof(DISPLAY_USART_GPIO_MAP) / sizeof(DISPLAY_USART_GPIO_MAP[0]));

	// Initialize it in RS232 mode.
	usart_init_rs232(DISPLAY_USART, &display_usart_options, pba_hz);
8000329c:	ee c8 00 0c 	sub	r8,r7,12
800032a0:	ee fa ff ec 	ld.w	r10,r7[-20]
800032a4:	10 9b       	mov	r11,r8
800032a6:	fc 7c 14 00 	mov	r12,-191488
800032aa:	f0 1f 00 05 	mcall	800032bc <init_display_rs232_ex+0x58>
}
800032ae:	2f bd       	sub	sp,-20
800032b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800032b4:	80 00       	ld.sh	r0,r0[0x0]
800032b6:	aa 00       	st.h	r5[0x0],r0
800032b8:	80 00       	ld.sh	r0,r0[0x0]
800032ba:	44 c4       	lddsp	r4,sp[0x130]
800032bc:	80 00       	ld.sh	r0,r0[0x0]
800032be:	56 68       	stdsp	sp[0x198],r8

800032c0 <print_ecdbg>:


void print_ecdbg(const char *str)
{
800032c0:	eb cd 40 80 	pushm	r7,lr
800032c4:	1a 97       	mov	r7,sp
800032c6:	20 1d       	sub	sp,4
800032c8:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print(ECDBG_USART, str);
800032cc:	ee fb ff fc 	ld.w	r11,r7[-4]
800032d0:	fe 7c 28 00 	mov	r12,-55296
800032d4:	f0 1f 00 03 	mcall	800032e0 <print_ecdbg+0x20>
}
800032d8:	2f fd       	sub	sp,-4
800032da:	e3 cd 80 80 	ldm	sp++,r7,pc
800032de:	00 00       	add	r0,r0
800032e0:	80 00       	ld.sh	r0,r0[0x0]
800032e2:	32 e4       	mov	r4,46

800032e4 <print>:
	print_hex(DISPLAY_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
800032e4:	eb cd 40 80 	pushm	r7,lr
800032e8:	1a 97       	mov	r7,sp
800032ea:	20 2d       	sub	sp,8
800032ec:	ef 4c ff fc 	st.w	r7[-4],r12
800032f0:	ef 4b ff f8 	st.w	r7[-8],r11
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
800032f4:	ee fb ff f8 	ld.w	r11,r7[-8]
800032f8:	ee fc ff fc 	ld.w	r12,r7[-4]
800032fc:	f0 1f 00 03 	mcall	80003308 <print+0x24>
}
80003300:	2f ed       	sub	sp,-8
80003302:	e3 cd 80 80 	ldm	sp++,r7,pc
80003306:	00 00       	add	r0,r0
80003308:	80 00       	ld.sh	r0,r0[0x0]
8000330a:	58 70       	cp.w	r0,7

8000330c <adcifa_get_calibration_data>:
 * \param adcifa       Base address of the ADCIFA
 * \param p_adcifa_opt Structure for the ADCIFA core configuration
 */
void adcifa_get_calibration_data(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt)
{
8000330c:	eb cd 40 80 	pushm	r7,lr
80003310:	1a 97       	mov	r7,sp
80003312:	20 6d       	sub	sp,24
80003314:	ef 4c ff ec 	st.w	r7[-20],r12
80003318:	ef 4b ff e8 	st.w	r7[-24],r11
	/* Get Offset Calibration */
	int32_t adc_ocal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
8000331c:	e0 68 02 04 	mov	r8,516
80003320:	ea 18 80 80 	orh	r8,0x8080
80003324:	70 08       	ld.w	r8,r8[0x0]
80003326:	e6 18 3f 00 	andh	r8,0x3f00,COH
			+ AVR32_FLASHC_FROW_OCAL_WORD)) &
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;
8000332a:	b9 48       	asr	r8,0x18
8000332c:	ef 48 ff f0 	st.w	r7[-16],r8
	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
80003330:	e0 68 02 04 	mov	r8,516
80003334:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;

	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003338:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
8000333a:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
8000333e:	ef 48 ff f4 	st.w	r7[-12],r8
	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
80003342:	e0 68 02 08 	mov	r8,520
80003346:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;

	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
8000334a:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
8000334c:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80003350:	ef 48 ff f8 	st.w	r7[-8],r8

	int32_t adc_gain1
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003354:	e0 68 02 08 	mov	r8,520
80003358:	ea 18 80 80 	orh	r8,0x8080
8000335c:	70 08       	ld.w	r8,r8[0x0]
8000335e:	e6 18 03 ff 	andh	r8,0x3ff,COH
			+ AVR32_FLASHC_FROW_GAIN1_WORD)) &
			AVR32_FLASHC_FROW_GAIN1_MASK) >>
			AVR32_FLASHC_FROW_GAIN1_OFFSET;
80003362:	b1 48       	asr	r8,0x10
80003364:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Get ADC Offset Calibration */
	p_adcifa_opt->offset_calibration_value = adc_ocal;
80003368:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000336c:	5c 88       	casts.h	r8
8000336e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003372:	b2 68       	st.h	r9[0xc],r8

	/* Get ADC Gain Calibration */
	p_adcifa_opt->gain_calibration_value = adc_gcal;
80003374:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003378:	5c 88       	casts.h	r8
8000337a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000337e:	b2 58       	st.h	r9[0xa],r8

	/* Get Sample & Hold Gain Calibration for Seq 0 */
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
80003380:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003384:	5c 88       	casts.h	r8
80003386:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000338a:	b2 78       	st.h	r9[0xe],r8

	/* Get Sample & Hold Gain Calibration for Seq 1 */
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
8000338c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003390:	5c 88       	casts.h	r8
80003392:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003396:	f3 58 00 10 	st.h	r9[16],r8
}
8000339a:	2f ad       	sub	sp,-24
8000339c:	e3 cd 80 80 	ldm	sp++,r7,pc

800033a0 <adcifa_configure>:
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt,
		uint32_t pb_hz)
{
800033a0:	eb cd 40 80 	pushm	r7,lr
800033a4:	1a 97       	mov	r7,sp
800033a6:	20 3d       	sub	sp,12
800033a8:	ef 4c ff fc 	st.w	r7[-4],r12
800033ac:	ef 4b ff f8 	st.w	r7[-8],r11
800033b0:	ef 4a ff f4 	st.w	r7[-12],r10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
800033b4:	fc 7a 24 00 	mov	r10,-187392
		= (p_adcifa_opt->sleep_mode_enable <<
800033b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033bc:	f1 38 00 08 	ld.ub	r8,r8[8]
800033c0:	f0 09 15 02 	lsl	r9,r8,0x2
			AVR32_ADCIFA_CFG_SLEEP)
			| (p_adcifa_opt->single_sequencer_mode <<
800033c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033c8:	11 e8       	ld.ub	r8,r8[0x6]
800033ca:	a3 78       	lsl	r8,0x3
			AVR32_ADCIFA_CFG_SSMQ)
			| (p_adcifa_opt->free_running_mode_enable <<
800033cc:	10 49       	or	r9,r8
800033ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033d2:	11 f8       	ld.ub	r8,r8[0x7]
800033d4:	a5 68       	lsl	r8,0x4
			AVR32_ADCIFA_CFG_FRM)
			| (p_adcifa_opt->reference_source <<
800033d6:	10 49       	or	r9,r8
800033d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033dc:	11 c8       	ld.ub	r8,r8[0x4]
800033de:	a5 78       	lsl	r8,0x5
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
800033e0:	10 49       	or	r9,r8
800033e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033e6:	11 d8       	ld.ub	r8,r8[0x5]
800033e8:	a7 78       	lsl	r8,0x7
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
800033ea:	10 49       	or	r9,r8
800033ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033f0:	f1 38 00 09 	ld.ub	r8,r8[9]
800033f4:	ab 68       	lsl	r8,0xa
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
800033f6:	f3 e8 10 08 	or	r8,r9,r8
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
800033fa:	10 9b       	mov	r11,r8
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
800033fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003400:	70 09       	ld.w	r9,r8[0x0]
80003402:	e0 68 4d d3 	mov	r8,19923
80003406:	ea 18 10 62 	orh	r8,0x1062
8000340a:	f2 08 06 48 	mulu.d	r8,r9,r8
8000340e:	a7 89       	lsr	r9,0x6
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
80003410:	e0 68 03 e8 	mov	r8,1000
80003414:	b1 39       	mul	r9,r8
80003416:	e0 68 4d d3 	mov	r8,19923
8000341a:	ea 18 10 62 	orh	r8,0x1062
8000341e:	f2 08 06 48 	mulu.d	r8,r9,r8
80003422:	f2 08 16 0b 	lsr	r8,r9,0xb
80003426:	b1 68       	lsl	r8,0x10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
80003428:	f7 e8 10 08 	or	r8,r11,r8
{
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
8000342c:	95 18       	st.w	r10[0x4],r8
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
			(2 * p_adcifa_opt->frequency)) - 1) <<
8000342e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003432:	70 08       	ld.w	r8,r8[0x0]
80003434:	f0 09 15 01 	lsl	r9,r8,0x1
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
80003438:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000343c:	f0 09 0d 08 	divu	r8,r8,r9
80003440:	20 18       	sub	r8,1
80003442:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
80003446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000344a:	f1 49 00 44 	st.w	r8[68],r9
			(2 * p_adcifa_opt->frequency)) - 1) <<
			AVR32_ADCIFA_CKDIV_CNT_OFFSET) &
			AVR32_ADCIFA_CKDIV_CNT_MASK;

	/* Set ADC Offset Calibration */
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
8000344e:	fc 78 24 00 	mov	r8,-187392
80003452:	fc 79 24 00 	mov	r9,-187392
80003456:	73 a9       	ld.w	r9,r9[0x68]
80003458:	12 9a       	mov	r10,r9
8000345a:	e4 1a c0 ff 	andh	r10,0xc0ff
8000345e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003462:	92 69       	ld.sh	r9,r9[0xc]
80003464:	b9 69       	lsl	r9,0x18
80003466:	e6 19 3f 00 	andh	r9,0x3f00,COH
8000346a:	f5 e9 10 09 	or	r9,r10,r9
8000346e:	f1 49 00 68 	st.w	r8[104],r9

	/* Set ADC Gain Calibration */
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
80003472:	fc 78 24 00 	mov	r8,-187392
80003476:	fc 79 24 00 	mov	r9,-187392
8000347a:	73 a9       	ld.w	r9,r9[0x68]
8000347c:	12 9a       	mov	r10,r9
8000347e:	e0 1a 80 00 	andl	r10,0x8000
80003482:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003486:	92 59       	ld.sh	r9,r9[0xa]
80003488:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
8000348c:	f5 e9 10 09 	or	r9,r10,r9
80003490:	f1 49 00 68 	st.w	r8[104],r9

	/* Set Sample & Hold Gain Calibration for seq 0 */
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
80003494:	fc 78 24 00 	mov	r8,-187392
80003498:	fc 79 24 00 	mov	r9,-187392
8000349c:	73 b9       	ld.w	r9,r9[0x6c]
8000349e:	12 9a       	mov	r10,r9
800034a0:	e0 1a fc 00 	andl	r10,0xfc00
800034a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034a8:	92 79       	ld.sh	r9,r9[0xe]
800034aa:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
800034ae:	f5 e9 10 09 	or	r9,r10,r9
800034b2:	f1 49 00 6c 	st.w	r8[108],r9

	/* Set Sample & Hold Gain Calibration for seq 1 */
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
800034b6:	fc 78 24 00 	mov	r8,-187392
800034ba:	fc 79 24 00 	mov	r9,-187392
800034be:	73 b9       	ld.w	r9,r9[0x6c]
800034c0:	12 9a       	mov	r10,r9
800034c2:	e4 1a fc 00 	andh	r10,0xfc00
800034c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034ca:	f3 09 00 10 	ld.sh	r9,r9[16]
800034ce:	b1 69       	lsl	r9,0x10
800034d0:	e6 19 03 ff 	andh	r9,0x3ff,COH
800034d4:	f5 e9 10 09 	or	r9,r10,r9
800034d8:	f1 49 00 6c 	st.w	r8[108],r9

	/* Enable ADCIFA */
	ADCIFA_enable();
800034dc:	fc 78 24 00 	mov	r8,-187392
800034e0:	fc 79 24 00 	mov	r9,-187392
800034e4:	72 19       	ld.w	r9,r9[0x4]
800034e6:	a1 a9       	sbr	r9,0x0
800034e8:	91 19       	st.w	r8[0x4],r9
800034ea:	c0 28       	rjmp	800034ee <adcifa_configure+0x14e>
	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
			break;
		}
	}
800034ec:	d7 03       	nop
	/* Enable ADCIFA */
	ADCIFA_enable();

	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
800034ee:	fc 78 24 00 	mov	r8,-187392
800034f2:	70 28       	ld.w	r8,r8[0x8]
800034f4:	e2 18 40 00 	andl	r8,0x4000,COH
800034f8:	cf a0       	breq	800034ec <adcifa_configure+0x14c>
			break;
		}
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
800034fa:	30 18       	mov	r8,1
}
800034fc:	10 9c       	mov	r12,r8
800034fe:	2f dd       	sub	sp,-12
80003500:	e3 cd 80 80 	ldm	sp++,r7,pc

80003504 <adcifa_configure_sequencer>:
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		adcifa_sequencer_conversion_opt_t *p_adcifa_sequencer_conversion_opt)
{
80003504:	eb cd 40 80 	pushm	r7,lr
80003508:	1a 97       	mov	r7,sp
8000350a:	21 1d       	sub	sp,68
8000350c:	ef 4c ff c8 	st.w	r7[-56],r12
80003510:	16 98       	mov	r8,r11
80003512:	ef 4a ff c0 	st.w	r7[-64],r10
80003516:	ef 49 ff bc 	st.w	r7[-68],r9
8000351a:	ef 68 ff c4 	st.b	r7[-60],r8
	uint8_t g[16] = {0};
8000351e:	30 08       	mov	r8,0
80003520:	30 09       	mov	r9,0
80003522:	ee e9 ff ec 	st.d	r7[-20],r8
80003526:	30 08       	mov	r8,0
80003528:	30 09       	mov	r9,0
8000352a:	ee e9 ff f4 	st.d	r7[-12],r8
	uint8_t mp[16] = {0};
8000352e:	30 08       	mov	r8,0
80003530:	30 09       	mov	r9,0
80003532:	ee e9 ff dc 	st.d	r7[-36],r8
80003536:	30 08       	mov	r8,0
80003538:	30 09       	mov	r9,0
8000353a:	ee e9 ff e4 	st.d	r7[-28],r8
	uint8_t mn[16] = {0};
8000353e:	30 08       	mov	r8,0
80003540:	30 09       	mov	r9,0
80003542:	ee e9 ff cc 	st.d	r7[-52],r8
80003546:	30 08       	mov	r8,0
80003548:	30 09       	mov	r9,0
8000354a:	ee e9 ff d4 	st.d	r7[-44],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch case with sequencer */
	switch (sequencer) {
8000354e:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80003552:	58 08       	cp.w	r8,0
80003554:	c0 60       	breq	80003560 <adcifa_configure_sequencer+0x5c>
80003556:	58 18       	cp.w	r8,1
80003558:	e0 80 01 65 	breq	80003822 <adcifa_configure_sequencer+0x31e>
8000355c:	e0 8f 02 54 	bral	80003a04 <adcifa_configure_sequencer+0x500>
	/* Sequencer 0 */
	case 0:
		/* Configure Sequencer 0 */
		ADCIFA_configure_sequencer_0(
80003560:	fc 78 24 00 	mov	r8,-187392
80003564:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003568:	13 89       	ld.ub	r9,r9[0x0]
8000356a:	20 19       	sub	r9,1
8000356c:	f2 0a 15 10 	lsl	r10,r9,0x10
80003570:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003574:	13 99       	ld.ub	r9,r9[0x1]
80003576:	ad 69       	lsl	r9,0xc
80003578:	12 4a       	or	r10,r9
8000357a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000357e:	13 a9       	ld.ub	r9,r9[0x2]
80003580:	a9 69       	lsl	r9,0x8
80003582:	12 4a       	or	r10,r9
80003584:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003588:	13 b9       	ld.ub	r9,r9[0x3]
8000358a:	a3 69       	lsl	r9,0x2
8000358c:	12 4a       	or	r10,r9
8000358e:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003592:	13 c9       	ld.ub	r9,r9[0x4]
80003594:	a3 79       	lsl	r9,0x3
80003596:	12 4a       	or	r10,r9
80003598:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000359c:	13 d9       	ld.ub	r9,r9[0x5]
8000359e:	a1 79       	lsl	r9,0x1
800035a0:	12 4a       	or	r10,r9
800035a2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035a6:	13 e9       	ld.ub	r9,r9[0x6]
800035a8:	f5 e9 10 09 	or	r9,r10,r9
800035ac:	91 59       	st.w	r8[0x14],r9
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800035ae:	30 08       	mov	r8,0
800035b0:	ef 68 ff ff 	st.b	r7[-1],r8
800035b4:	c1 68       	rjmp	800035e0 <adcifa_configure_sequencer+0xdc>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800035b6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800035ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800035be:	12 98       	mov	r8,r9
800035c0:	a1 78       	lsl	r8,0x1
800035c2:	12 08       	add	r8,r9
800035c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800035c8:	f2 08 00 08 	add	r8,r9,r8
800035cc:	11 a8       	ld.ub	r8,r8[0x2]
800035ce:	ee 0a 00 09 	add	r9,r7,r10
800035d2:	f3 68 ff ec 	st.b	r9[-20],r8
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800035d6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800035da:	2f f8       	sub	r8,-1
800035dc:	ef 68 ff ff 	st.b	r7[-1],r8
800035e0:	ee f8 ff c0 	ld.w	r8,r7[-64]
800035e4:	11 88       	ld.ub	r8,r8[0x0]
800035e6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800035ea:	f0 09 18 00 	cp.b	r9,r8
800035ee:	ce 43       	brcs	800035b6 <adcifa_configure_sequencer+0xb2>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
800035f0:	fc 78 24 00 	mov	r8,-187392
800035f4:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800035f8:	f2 0a 15 1c 	lsl	r10,r9,0x1c
800035fc:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80003600:	b9 69       	lsl	r9,0x18
80003602:	12 4a       	or	r10,r9
80003604:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80003608:	b5 69       	lsl	r9,0x14
8000360a:	12 4a       	or	r10,r9
8000360c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003610:	b1 69       	lsl	r9,0x10
80003612:	12 4a       	or	r10,r9
80003614:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003618:	ad 69       	lsl	r9,0xc
8000361a:	12 4a       	or	r10,r9
8000361c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80003620:	a9 69       	lsl	r9,0x8
80003622:	12 4a       	or	r10,r9
80003624:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80003628:	a5 69       	lsl	r9,0x4
8000362a:	12 4a       	or	r10,r9
8000362c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80003630:	f5 e9 10 09 	or	r9,r10,r9
80003634:	91 79       	st.w	r8[0x1c],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003636:	30 08       	mov	r8,0
80003638:	ef 68 ff ff 	st.b	r7[-1],r8
8000363c:	c2 68       	rjmp	80003688 <adcifa_configure_sequencer+0x184>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
8000363e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003642:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003646:	12 98       	mov	r8,r9
80003648:	a1 78       	lsl	r8,0x1
8000364a:	12 08       	add	r8,r9
8000364c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003650:	f2 08 00 08 	add	r8,r9,r8
80003654:	11 88       	ld.ub	r8,r8[0x0]
80003656:	ee 0a 00 09 	add	r9,r7,r10
8000365a:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
8000365e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003662:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003666:	12 98       	mov	r8,r9
80003668:	a1 78       	lsl	r8,0x1
8000366a:	12 08       	add	r8,r9
8000366c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003670:	f2 08 00 08 	add	r8,r9,r8
80003674:	11 98       	ld.ub	r8,r8[0x1]
80003676:	ee 0a 00 09 	add	r9,r7,r10
8000367a:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000367e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003682:	2f f8       	sub	r8,-1
80003684:	ef 68 ff ff 	st.b	r7[-1],r8
80003688:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000368c:	11 88       	ld.ub	r8,r8[0x0]
8000368e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003692:	f0 09 18 00 	cp.b	r9,r8
80003696:	cd 43       	brcs	8000363e <adcifa_configure_sequencer+0x13a>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3],
80003698:	fc 78 24 00 	mov	r8,-187392
8000369c:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800036a0:	f2 0a 15 18 	lsl	r10,r9,0x18
800036a4:	ef 39 ff e2 	ld.ub	r9,r7[-30]
800036a8:	b1 69       	lsl	r9,0x10
800036aa:	12 4a       	or	r10,r9
800036ac:	ef 39 ff e1 	ld.ub	r9,r7[-31]
800036b0:	a9 69       	lsl	r9,0x8
800036b2:	12 4a       	or	r10,r9
800036b4:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800036b8:	f5 e9 10 09 	or	r9,r10,r9
800036bc:	91 b9       	st.w	r8[0x2c],r9
800036be:	fc 78 24 00 	mov	r8,-187392
800036c2:	ef 39 ff df 	ld.ub	r9,r7[-33]
800036c6:	f2 0a 15 18 	lsl	r10,r9,0x18
800036ca:	ef 39 ff de 	ld.ub	r9,r7[-34]
800036ce:	b1 69       	lsl	r9,0x10
800036d0:	12 4a       	or	r10,r9
800036d2:	ef 39 ff dd 	ld.ub	r9,r7[-35]
800036d6:	a9 69       	lsl	r9,0x8
800036d8:	12 4a       	or	r10,r9
800036da:	ef 39 ff dc 	ld.ub	r9,r7[-36]
800036de:	f5 e9 10 09 	or	r9,r10,r9
800036e2:	91 99       	st.w	r8[0x24],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3],
800036e4:	fc 78 24 00 	mov	r8,-187392
800036e8:	ef 39 ff d3 	ld.ub	r9,r7[-45]
800036ec:	f2 0a 15 18 	lsl	r10,r9,0x18
800036f0:	ef 39 ff d2 	ld.ub	r9,r7[-46]
800036f4:	b1 69       	lsl	r9,0x10
800036f6:	12 4a       	or	r10,r9
800036f8:	ef 39 ff d1 	ld.ub	r9,r7[-47]
800036fc:	a9 69       	lsl	r9,0x8
800036fe:	12 4a       	or	r10,r9
80003700:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80003704:	f5 e9 10 09 	or	r9,r10,r9
80003708:	91 f9       	st.w	r8[0x3c],r9
8000370a:	fc 78 24 00 	mov	r8,-187392
8000370e:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003712:	f2 0a 15 18 	lsl	r10,r9,0x18
80003716:	ef 39 ff ce 	ld.ub	r9,r7[-50]
8000371a:	b1 69       	lsl	r9,0x10
8000371c:	12 4a       	or	r10,r9
8000371e:	ef 39 ff cd 	ld.ub	r9,r7[-51]
80003722:	a9 69       	lsl	r9,0x8
80003724:	12 4a       	or	r10,r9
80003726:	ef 39 ff cc 	ld.ub	r9,r7[-52]
8000372a:	f5 e9 10 09 	or	r9,r10,r9
8000372e:	91 d9       	st.w	r8[0x34],r9
		 * This adcifa_seq1_configured variable check if muxsel1p,muxsel1n 
		 * registers are already configured. This may happen if this function is
		 * called first with sequencer 1 as argument and then called with 
		 * sequencer 0 as argument in case dual mode is used.
		 */
		if(!adcifa_seq1_configured)
80003730:	fe f8 02 e0 	ld.w	r8,pc[736]
80003734:	11 88       	ld.ub	r8,r8[0x0]
80003736:	ec 18 00 01 	eorl	r8,0x1
8000373a:	5c 58       	castu.b	r8
8000373c:	e0 80 01 63 	breq	80003a02 <adcifa_configure_sequencer+0x4fe>
		{
			/*
			 * Configure gain for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */ 
			ADCIFA_configure_sh1gain(g[15], g[14], g[13], g[12], g[11], g[10], 
80003740:	fc 78 24 00 	mov	r8,-187392
80003744:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003748:	f2 0a 15 1c 	lsl	r10,r9,0x1c
8000374c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80003750:	b9 69       	lsl	r9,0x18
80003752:	12 4a       	or	r10,r9
80003754:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80003758:	b5 69       	lsl	r9,0x14
8000375a:	12 4a       	or	r10,r9
8000375c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80003760:	b1 69       	lsl	r9,0x10
80003762:	12 4a       	or	r10,r9
80003764:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80003768:	ad 69       	lsl	r9,0xc
8000376a:	12 4a       	or	r10,r9
8000376c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80003770:	a9 69       	lsl	r9,0x8
80003772:	12 4a       	or	r10,r9
80003774:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80003778:	a5 69       	lsl	r9,0x4
8000377a:	12 4a       	or	r10,r9
8000377c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003780:	f5 e9 10 09 	or	r9,r10,r9
80003784:	91 89       	st.w	r8[0x20],r9

			/*
			 * Configure Mux for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */
			ADCIFA_configure_muxsel1p(mp[15], mp[14], mp[13], mp[12], mp[11], 
80003786:	fc 78 24 00 	mov	r8,-187392
8000378a:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8000378e:	f2 0a 15 18 	lsl	r10,r9,0x18
80003792:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80003796:	b1 69       	lsl	r9,0x10
80003798:	12 4a       	or	r10,r9
8000379a:	ef 39 ff e9 	ld.ub	r9,r7[-23]
8000379e:	a9 69       	lsl	r9,0x8
800037a0:	12 4a       	or	r10,r9
800037a2:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800037a6:	f5 e9 10 09 	or	r9,r10,r9
800037aa:	91 c9       	st.w	r8[0x30],r9
800037ac:	fc 78 24 00 	mov	r8,-187392
800037b0:	ef 39 ff e7 	ld.ub	r9,r7[-25]
800037b4:	f2 0a 15 18 	lsl	r10,r9,0x18
800037b8:	ef 39 ff e6 	ld.ub	r9,r7[-26]
800037bc:	b1 69       	lsl	r9,0x10
800037be:	12 4a       	or	r10,r9
800037c0:	ef 39 ff e5 	ld.ub	r9,r7[-27]
800037c4:	a9 69       	lsl	r9,0x8
800037c6:	12 4a       	or	r10,r9
800037c8:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800037cc:	f5 e9 10 09 	or	r9,r10,r9
800037d0:	91 a9       	st.w	r8[0x28],r9
				mp[10], mp[9], mp[8]);
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
800037d2:	fc 78 24 00 	mov	r8,-187392
800037d6:	ef 39 ff db 	ld.ub	r9,r7[-37]
800037da:	f2 0a 15 18 	lsl	r10,r9,0x18
800037de:	ef 39 ff da 	ld.ub	r9,r7[-38]
800037e2:	b1 69       	lsl	r9,0x10
800037e4:	12 4a       	or	r10,r9
800037e6:	ef 39 ff d9 	ld.ub	r9,r7[-39]
800037ea:	a9 69       	lsl	r9,0x8
800037ec:	12 4a       	or	r10,r9
800037ee:	ef 39 ff d8 	ld.ub	r9,r7[-40]
800037f2:	f5 e9 10 09 	or	r9,r10,r9
800037f6:	f1 49 00 40 	st.w	r8[64],r9
800037fa:	fc 78 24 00 	mov	r8,-187392
800037fe:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003802:	f2 0a 15 18 	lsl	r10,r9,0x18
80003806:	ef 39 ff d6 	ld.ub	r9,r7[-42]
8000380a:	b1 69       	lsl	r9,0x10
8000380c:	12 4a       	or	r10,r9
8000380e:	ef 39 ff d5 	ld.ub	r9,r7[-43]
80003812:	a9 69       	lsl	r9,0x8
80003814:	12 4a       	or	r10,r9
80003816:	ef 39 ff d4 	ld.ub	r9,r7[-44]
8000381a:	f5 e9 10 09 	or	r9,r10,r9
8000381e:	91 e9       	st.w	r8[0x38],r9
				mn[10], mn[9], mn[8]);

		}

		break;
80003820:	cf 28       	rjmp	80003a04 <adcifa_configure_sequencer+0x500>

	/* Sequencer 1 */
	case 1:
		/* Configure Sequencer 1 */
		ADCIFA_configure_sequencer_1(
80003822:	fc 78 24 00 	mov	r8,-187392
80003826:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000382a:	13 89       	ld.ub	r9,r9[0x0]
8000382c:	20 19       	sub	r9,1
8000382e:	f2 0a 15 10 	lsl	r10,r9,0x10
80003832:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003836:	13 99       	ld.ub	r9,r9[0x1]
80003838:	ad 69       	lsl	r9,0xc
8000383a:	12 4a       	or	r10,r9
8000383c:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003840:	13 a9       	ld.ub	r9,r9[0x2]
80003842:	a9 69       	lsl	r9,0x8
80003844:	12 4a       	or	r10,r9
80003846:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000384a:	13 b9       	ld.ub	r9,r9[0x3]
8000384c:	a3 69       	lsl	r9,0x2
8000384e:	12 4a       	or	r10,r9
80003850:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003854:	13 c9       	ld.ub	r9,r9[0x4]
80003856:	a3 79       	lsl	r9,0x3
80003858:	12 4a       	or	r10,r9
8000385a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000385e:	13 d9       	ld.ub	r9,r9[0x5]
80003860:	a1 79       	lsl	r9,0x1
80003862:	f5 e9 10 09 	or	r9,r10,r9
80003866:	12 9a       	mov	r10,r9
80003868:	a5 aa       	sbr	r10,0x4
8000386a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000386e:	13 e9       	ld.ub	r9,r9[0x6]
80003870:	f5 e9 10 09 	or	r9,r10,r9
80003874:	91 69       	st.w	r8[0x18],r9
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003876:	30 08       	mov	r8,0
80003878:	ef 68 ff ff 	st.b	r7[-1],r8
8000387c:	c1 68       	rjmp	800038a8 <adcifa_configure_sequencer+0x3a4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8000387e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003882:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003886:	12 98       	mov	r8,r9
80003888:	a1 78       	lsl	r8,0x1
8000388a:	12 08       	add	r8,r9
8000388c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003890:	f2 08 00 08 	add	r8,r9,r8
80003894:	11 a8       	ld.ub	r8,r8[0x2]
80003896:	ee 0a 00 09 	add	r9,r7,r10
8000389a:	f3 68 ff ec 	st.b	r9[-20],r8
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000389e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800038a2:	2f f8       	sub	r8,-1
800038a4:	ef 68 ff ff 	st.b	r7[-1],r8
800038a8:	ee f8 ff c0 	ld.w	r8,r7[-64]
800038ac:	11 88       	ld.ub	r8,r8[0x0]
800038ae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800038b2:	f0 09 18 00 	cp.b	r9,r8
800038b6:	ce 43       	brcs	8000387e <adcifa_configure_sequencer+0x37a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
800038b8:	fc 78 24 00 	mov	r8,-187392
800038bc:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800038c0:	f2 0a 15 1c 	lsl	r10,r9,0x1c
800038c4:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800038c8:	b9 69       	lsl	r9,0x18
800038ca:	12 4a       	or	r10,r9
800038cc:	ef 39 ff f1 	ld.ub	r9,r7[-15]
800038d0:	b5 69       	lsl	r9,0x14
800038d2:	12 4a       	or	r10,r9
800038d4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800038d8:	b1 69       	lsl	r9,0x10
800038da:	12 4a       	or	r10,r9
800038dc:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800038e0:	ad 69       	lsl	r9,0xc
800038e2:	12 4a       	or	r10,r9
800038e4:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800038e8:	a9 69       	lsl	r9,0x8
800038ea:	12 4a       	or	r10,r9
800038ec:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800038f0:	a5 69       	lsl	r9,0x4
800038f2:	12 4a       	or	r10,r9
800038f4:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800038f8:	f5 e9 10 09 	or	r9,r10,r9
800038fc:	91 89       	st.w	r8[0x20],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800038fe:	30 08       	mov	r8,0
80003900:	ef 68 ff ff 	st.b	r7[-1],r8
80003904:	c2 68       	rjmp	80003950 <adcifa_configure_sequencer+0x44c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
80003906:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000390a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000390e:	12 98       	mov	r8,r9
80003910:	a1 78       	lsl	r8,0x1
80003912:	12 08       	add	r8,r9
80003914:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003918:	f2 08 00 08 	add	r8,r9,r8
8000391c:	11 88       	ld.ub	r8,r8[0x0]
8000391e:	ee 0a 00 09 	add	r9,r7,r10
80003922:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
80003926:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000392a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000392e:	12 98       	mov	r8,r9
80003930:	a1 78       	lsl	r8,0x1
80003932:	12 08       	add	r8,r9
80003934:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003938:	f2 08 00 08 	add	r8,r9,r8
8000393c:	11 98       	ld.ub	r8,r8[0x1]
8000393e:	ee 0a 00 09 	add	r9,r7,r10
80003942:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003946:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000394a:	2f f8       	sub	r8,-1
8000394c:	ef 68 ff ff 	st.b	r7[-1],r8
80003950:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003954:	11 88       	ld.ub	r8,r8[0x0]
80003956:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000395a:	f0 09 18 00 	cp.b	r9,r8
8000395e:	cd 43       	brcs	80003906 <adcifa_configure_sequencer+0x402>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3],
80003960:	fc 78 24 00 	mov	r8,-187392
80003964:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80003968:	f2 0a 15 18 	lsl	r10,r9,0x18
8000396c:	ef 39 ff e2 	ld.ub	r9,r7[-30]
80003970:	b1 69       	lsl	r9,0x10
80003972:	12 4a       	or	r10,r9
80003974:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80003978:	a9 69       	lsl	r9,0x8
8000397a:	12 4a       	or	r10,r9
8000397c:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80003980:	f5 e9 10 09 	or	r9,r10,r9
80003984:	91 c9       	st.w	r8[0x30],r9
80003986:	fc 78 24 00 	mov	r8,-187392
8000398a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000398e:	f2 0a 15 18 	lsl	r10,r9,0x18
80003992:	ef 39 ff de 	ld.ub	r9,r7[-34]
80003996:	b1 69       	lsl	r9,0x10
80003998:	12 4a       	or	r10,r9
8000399a:	ef 39 ff dd 	ld.ub	r9,r7[-35]
8000399e:	a9 69       	lsl	r9,0x8
800039a0:	12 4a       	or	r10,r9
800039a2:	ef 39 ff dc 	ld.ub	r9,r7[-36]
800039a6:	f5 e9 10 09 	or	r9,r10,r9
800039aa:	91 a9       	st.w	r8[0x28],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3],
800039ac:	fc 78 24 00 	mov	r8,-187392
800039b0:	ef 39 ff d3 	ld.ub	r9,r7[-45]
800039b4:	f2 0a 15 18 	lsl	r10,r9,0x18
800039b8:	ef 39 ff d2 	ld.ub	r9,r7[-46]
800039bc:	b1 69       	lsl	r9,0x10
800039be:	12 4a       	or	r10,r9
800039c0:	ef 39 ff d1 	ld.ub	r9,r7[-47]
800039c4:	a9 69       	lsl	r9,0x8
800039c6:	12 4a       	or	r10,r9
800039c8:	ef 39 ff d0 	ld.ub	r9,r7[-48]
800039cc:	f5 e9 10 09 	or	r9,r10,r9
800039d0:	f1 49 00 40 	st.w	r8[64],r9
800039d4:	fc 78 24 00 	mov	r8,-187392
800039d8:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800039dc:	f2 0a 15 18 	lsl	r10,r9,0x18
800039e0:	ef 39 ff ce 	ld.ub	r9,r7[-50]
800039e4:	b1 69       	lsl	r9,0x10
800039e6:	12 4a       	or	r10,r9
800039e8:	ef 39 ff cd 	ld.ub	r9,r7[-51]
800039ec:	a9 69       	lsl	r9,0x8
800039ee:	12 4a       	or	r10,r9
800039f0:	ef 39 ff cc 	ld.ub	r9,r7[-52]
800039f4:	f5 e9 10 09 	or	r9,r10,r9
800039f8:	91 e9       	st.w	r8[0x38],r9
				mn[2], mn[1], mn[0]);

		adcifa_seq1_configured = true;
800039fa:	48 69       	lddpc	r9,80003a10 <adcifa_configure_sequencer+0x50c>
800039fc:	30 18       	mov	r8,1
800039fe:	b2 88       	st.b	r9[0x0],r8
80003a00:	c0 28       	rjmp	80003a04 <adcifa_configure_sequencer+0x500>
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
				mn[10], mn[9], mn[8]);

		}

		break;
80003a02:	d7 03       	nop
		break;

	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
80003a04:	30 18       	mov	r8,1
}
80003a06:	10 9c       	mov	r12,r8
80003a08:	2e fd       	sub	sp,-68
80003a0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a0e:	00 00       	add	r0,r0
80003a10:	00 00       	add	r0,r0
80003a12:	00 b8       	st.h	r0++,r8

80003a14 <adcifa_start_sequencer>:
/** \brief Start analog to digital conversion for a specific sequencer
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
void adcifa_start_sequencer(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003a14:	eb cd 40 80 	pushm	r7,lr
80003a18:	1a 97       	mov	r7,sp
80003a1a:	20 2d       	sub	sp,8
80003a1c:	ef 4c ff fc 	st.w	r7[-4],r12
80003a20:	16 98       	mov	r8,r11
80003a22:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch Sequencer */
	switch (sequencer) {
80003a26:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003a2a:	58 18       	cp.w	r8,1
80003a2c:	c0 a0       	breq	80003a40 <adcifa_start_sequencer+0x2c>
80003a2e:	58 38       	cp.w	r8,3
80003a30:	c0 d0       	breq	80003a4a <adcifa_start_sequencer+0x36>
80003a32:	58 08       	cp.w	r8,0
80003a34:	c0 f1       	brne	80003a52 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
80003a36:	fc 78 24 00 	mov	r8,-187392
80003a3a:	30 19       	mov	r9,1
80003a3c:	91 09       	st.w	r8[0x0],r9
		break;
80003a3e:	c0 a8       	rjmp	80003a52 <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
80003a40:	fc 78 24 00 	mov	r8,-187392
80003a44:	30 29       	mov	r9,2
80003a46:	91 09       	st.w	r8[0x0],r9
		break;
80003a48:	c0 58       	rjmp	80003a52 <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(
80003a4a:	fc 78 24 00 	mov	r8,-187392
80003a4e:	30 39       	mov	r9,3
80003a50:	91 09       	st.w	r8[0x0],r9
		break;

	default:
		break;
	}
}
80003a52:	2f ed       	sub	sp,-8
80003a54:	e3 cd 80 80 	ldm	sp++,r7,pc

80003a58 <adcifa_check_eos>:
/** \brief Get End of Conversion status bit
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
bool adcifa_check_eos(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003a58:	eb cd 40 80 	pushm	r7,lr
80003a5c:	1a 97       	mov	r7,sp
80003a5e:	20 2d       	sub	sp,8
80003a60:	ef 4c ff fc 	st.w	r7[-4],r12
80003a64:	16 98       	mov	r8,r11
80003a66:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* get SR register : EOS bit for channel */
	switch (sequencer) {
80003a6a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003a6e:	58 08       	cp.w	r8,0
80003a70:	c0 40       	breq	80003a78 <adcifa_check_eos+0x20>
80003a72:	58 18       	cp.w	r8,1
80003a74:	c0 90       	breq	80003a86 <adcifa_check_eos+0x2e>
80003a76:	c1 08       	rjmp	80003a96 <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
80003a78:	fc 78 24 00 	mov	r8,-187392
80003a7c:	70 28       	ld.w	r8,r8[0x8]
80003a7e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003a82:	5c 58       	castu.b	r8
80003a84:	c0 a8       	rjmp	80003a98 <adcifa_check_eos+0x40>

	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
80003a86:	fc 78 24 00 	mov	r8,-187392
80003a8a:	70 28       	ld.w	r8,r8[0x8]
80003a8c:	e2 18 00 10 	andl	r8,0x10,COH
80003a90:	5f 18       	srne	r8
80003a92:	5c 58       	castu.b	r8
80003a94:	c0 28       	rjmp	80003a98 <adcifa_check_eos+0x40>

	default:
		break;
	}
	return false;
80003a96:	30 08       	mov	r8,0
}
80003a98:	10 9c       	mov	r12,r8
80003a9a:	2f ed       	sub	sp,-8
80003a9c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003aa0 <adcifa_get_values_from_sequencer>:
 */
uint8_t adcifa_get_values_from_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		int16_t *adcifa_values)
{
80003aa0:	eb cd 40 80 	pushm	r7,lr
80003aa4:	1a 97       	mov	r7,sp
80003aa6:	20 5d       	sub	sp,20
80003aa8:	ef 4c ff f8 	st.w	r7[-8],r12
80003aac:	16 98       	mov	r8,r11
80003aae:	ef 4a ff f0 	st.w	r7[-16],r10
80003ab2:	ef 49 ff ec 	st.w	r7[-20],r9
80003ab6:	ef 68 ff f4 	st.b	r7[-12],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* wait for end of sequence */
	if (adcifa_check_eos(adcifa, sequencer) != true) {
80003aba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003abe:	10 9b       	mov	r11,r8
80003ac0:	ee fc ff f8 	ld.w	r12,r7[-8]
80003ac4:	f0 1f 00 2c 	mcall	80003b74 <adcifa_get_values_from_sequencer+0xd4>
80003ac8:	18 98       	mov	r8,r12
80003aca:	ec 18 00 01 	eorl	r8,0x1
80003ace:	5c 58       	castu.b	r8
80003ad0:	c0 30       	breq	80003ad6 <adcifa_get_values_from_sequencer+0x36>
		return ADCIFA_STATUS_NOT_COMPLETED;
80003ad2:	30 38       	mov	r8,3
80003ad4:	c4 b8       	rjmp	80003b6a <adcifa_get_values_from_sequencer+0xca>
	}

	switch (sequencer) {
80003ad6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003ada:	58 08       	cp.w	r8,0
80003adc:	c0 40       	breq	80003ae4 <adcifa_get_values_from_sequencer+0x44>
80003ade:	58 18       	cp.w	r8,1
80003ae0:	c2 30       	breq	80003b26 <adcifa_get_values_from_sequencer+0x86>
80003ae2:	c4 38       	rjmp	80003b68 <adcifa_get_values_from_sequencer+0xc8>
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003ae4:	30 08       	mov	r8,0
80003ae6:	ef 68 ff ff 	st.b	r7[-1],r8
80003aea:	c1 58       	rjmp	80003b14 <adcifa_get_values_from_sequencer+0x74>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
80003aec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003af0:	a1 78       	lsl	r8,0x1
80003af2:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003af6:	10 09       	add	r9,r8
80003af8:	fc 78 24 00 	mov	r8,-187392
80003afc:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003b00:	2d fa       	sub	r10,-33
80003b02:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003b06:	5c 88       	casts.h	r8
80003b08:	b2 08       	st.h	r9[0x0],r8
	}

	switch (sequencer) {
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b0a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b0e:	2f f8       	sub	r8,-1
80003b10:	ef 68 ff ff 	st.b	r7[-1],r8
80003b14:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b18:	11 88       	ld.ub	r8,r8[0x0]
80003b1a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003b1e:	f0 09 18 00 	cp.b	r9,r8
80003b22:	ce 53       	brcs	80003aec <adcifa_get_values_from_sequencer+0x4c>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
80003b24:	c2 28       	rjmp	80003b68 <adcifa_get_values_from_sequencer+0xc8>

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b26:	30 08       	mov	r8,0
80003b28:	ef 68 ff ff 	st.b	r7[-1],r8
80003b2c:	c1 68       	rjmp	80003b58 <adcifa_get_values_from_sequencer+0xb8>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
80003b2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b32:	a1 78       	lsl	r8,0x1
80003b34:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003b38:	10 09       	add	r9,r8
80003b3a:	fc 78 24 00 	mov	r8,-187392
80003b3e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003b42:	2f 8a       	sub	r10,-8
80003b44:	2d fa       	sub	r10,-33
80003b46:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003b4a:	5c 88       	casts.h	r8
80003b4c:	b2 08       	st.h	r9[0x0],r8
		}
		break;

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b52:	2f f8       	sub	r8,-1
80003b54:	ef 68 ff ff 	st.b	r7[-1],r8
80003b58:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b5c:	11 88       	ld.ub	r8,r8[0x0]
80003b5e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003b62:	f0 09 18 00 	cp.b	r9,r8
80003b66:	ce 43       	brcs	80003b2e <adcifa_get_values_from_sequencer+0x8e>

	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
80003b68:	30 28       	mov	r8,2
}
80003b6a:	10 9c       	mov	r12,r8
80003b6c:	2f bd       	sub	sp,-20
80003b6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b72:	00 00       	add	r0,r0
80003b74:	80 00       	ld.sh	r0,r0[0x0]
80003b76:	3a 58       	mov	r8,-91

80003b78 <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
80003b78:	eb cd 40 80 	pushm	r7,lr
80003b7c:	1a 97       	mov	r7,sp
80003b7e:	20 8d       	sub	sp,32
		384,
		512,
		768,
		1024,
		2048,
	};
80003b80:	48 c9       	lddpc	r9,80003bb0 <flashc_get_flash_size+0x38>
80003b82:	ee c8 00 1e 	sub	r8,r7,30
80003b86:	31 ea       	mov	r10,30
80003b88:	12 9b       	mov	r11,r9
80003b8a:	10 9c       	mov	r12,r8
80003b8c:	f0 1f 00 0a 	mcall	80003bb4 <flashc_get_flash_size+0x3c>
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK)
80003b90:	fe 68 00 00 	mov	r8,-131072
80003b94:	70 38       	ld.w	r8,r8[0xc]
80003b96:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003b9a:	a1 78       	lsl	r8,0x1
80003b9c:	ee 08 00 08 	add	r8,r7,r8
80003ba0:	f1 08 ff e2 	ld.sh	r8,r8[-30]
80003ba4:	5c 78       	castu.h	r8
80003ba6:	ab 68       	lsl	r8,0xa
		1024,
	};
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
			>> AVR32_FLASHC_FSR_FSZ_OFFSET]) << 10;
#endif
}
80003ba8:	10 9c       	mov	r12,r8
80003baa:	2f 8d       	sub	sp,-32
80003bac:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bb0:	80 00       	ld.sh	r0,r0[0x0]
80003bb2:	aa 20       	st.h	r5[0x4],r0
80003bb4:	80 00       	ld.sh	r0,r0[0x0]
80003bb6:	a5 1a       	ld.d	r10,--r2

80003bb8 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
80003bb8:	eb cd 40 80 	pushm	r7,lr
80003bbc:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80003bbe:	fe 68 00 00 	mov	r8,-131072
80003bc2:	70 28       	ld.w	r8,r8[0x8]
80003bc4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003bc8:	5c 58       	castu.b	r8
}
80003bca:	10 9c       	mov	r12,r8
80003bcc:	e3 cd 80 80 	ldm	sp++,r7,pc

80003bd0 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80003bd0:	eb cd 40 80 	pushm	r7,lr
80003bd4:	1a 97       	mov	r7,sp
	while (!flashc_is_ready());
80003bd6:	f0 1f 00 05 	mcall	80003be8 <flashc_default_wait_until_ready+0x18>
80003bda:	18 98       	mov	r8,r12
80003bdc:	ec 18 00 01 	eorl	r8,0x1
80003be0:	5c 58       	castu.b	r8
80003be2:	cf a1       	brne	80003bd6 <flashc_default_wait_until_ready+0x6>
}
80003be4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003be8:	80 00       	ld.sh	r0,r0[0x0]
80003bea:	3b b8       	mov	r8,-69

80003bec <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80003bec:	eb cd 40 80 	pushm	r7,lr
80003bf0:	1a 97       	mov	r7,sp
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80003bf2:	fe 68 00 00 	mov	r8,-131072
80003bf6:	70 28       	ld.w	r8,r8[0x8]
80003bf8:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHC_FSR_PROGE_MASK);
}
80003bfc:	10 9c       	mov	r12,r8
80003bfe:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c02:	d7 03       	nop

80003c04 <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80003c04:	eb cd 40 80 	pushm	r7,lr
80003c08:	1a 97       	mov	r7,sp
80003c0a:	20 3d       	sub	sp,12
80003c0c:	ef 4c ff f8 	st.w	r7[-8],r12
80003c10:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003c14:	49 b8       	lddpc	r8,80003c80 <flashc_issue_command+0x7c>
80003c16:	70 08       	ld.w	r8,r8[0x0]
80003c18:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80003c1a:	fe 68 00 00 	mov	r8,-131072
80003c1e:	70 18       	ld.w	r8,r8[0x4]
80003c20:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80003c24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c28:	5c 58       	castu.b	r8
80003c2a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80003c2e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003c32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c36:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80003c3a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80003c3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003c42:	58 08       	cp.w	r8,0
80003c44:	c0 b5       	brlt	80003c5a <flashc_issue_command+0x56>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80003c46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003c4a:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80003c4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c52:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80003c56:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80003c5a:	3a 58       	mov	r8,-91
80003c5c:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80003c60:	fe 68 00 00 	mov	r8,-131072
80003c64:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003c68:	91 19       	st.w	r8[0x4],r9
	flashc_error_status = flashc_get_error_status();
80003c6a:	f0 1f 00 07 	mcall	80003c84 <flashc_issue_command+0x80>
80003c6e:	18 99       	mov	r9,r12
80003c70:	48 68       	lddpc	r8,80003c88 <flashc_issue_command+0x84>
80003c72:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80003c74:	48 38       	lddpc	r8,80003c80 <flashc_issue_command+0x7c>
80003c76:	70 08       	ld.w	r8,r8[0x0]
80003c78:	5d 18       	icall	r8
}
80003c7a:	2f dd       	sub	sp,-12
80003c7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c80:	00 00       	add	r0,r0
80003c82:	00 08       	add	r8,r0
80003c84:	80 00       	ld.sh	r0,r0[0x0]
80003c86:	3b ec       	mov	r12,-66
80003c88:	00 00       	add	r0,r0
80003c8a:	00 bc       	st.h	r0++,r12

80003c8c <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80003c8c:	eb cd 40 80 	pushm	r7,lr
80003c90:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80003c92:	3f fb       	mov	r11,-1
80003c94:	30 3c       	mov	r12,3
80003c96:	f0 1f 00 03 	mcall	80003ca0 <flashc_clear_page_buffer+0x14>
}
80003c9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c9e:	00 00       	add	r0,r0
80003ca0:	80 00       	ld.sh	r0,r0[0x0]
80003ca2:	3c 04       	mov	r4,-64

80003ca4 <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
80003ca4:	eb cd 40 80 	pushm	r7,lr
80003ca8:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80003caa:	fe 68 00 00 	mov	r8,-131072
80003cae:	70 28       	ld.w	r8,r8[0x8]
80003cb0:	e2 18 00 20 	andl	r8,0x20,COH
80003cb4:	5f 18       	srne	r8
80003cb6:	5c 58       	castu.b	r8
}
80003cb8:	10 9c       	mov	r12,r8
80003cba:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cbe:	d7 03       	nop

80003cc0 <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80003cc0:	eb cd 40 80 	pushm	r7,lr
80003cc4:	1a 97       	mov	r7,sp
80003cc6:	20 1d       	sub	sp,4
80003cc8:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80003ccc:	ee fb ff fc 	ld.w	r11,r7[-4]
80003cd0:	30 cc       	mov	r12,12
80003cd2:	f0 1f 00 05 	mcall	80003ce4 <flashc_quick_page_read+0x24>
	return flashc_is_page_erased();
80003cd6:	f0 1f 00 05 	mcall	80003ce8 <flashc_quick_page_read+0x28>
80003cda:	18 98       	mov	r8,r12
}
80003cdc:	10 9c       	mov	r12,r8
80003cde:	2f fd       	sub	sp,-4
80003ce0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ce4:	80 00       	ld.sh	r0,r0[0x0]
80003ce6:	3c 04       	mov	r4,-64
80003ce8:	80 00       	ld.sh	r0,r0[0x0]
80003cea:	3c a4       	mov	r4,-54

80003cec <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80003cec:	eb cd 40 80 	pushm	r7,lr
80003cf0:	1a 97       	mov	r7,sp
80003cf2:	20 4d       	sub	sp,16
80003cf4:	ef 4c ff f4 	st.w	r7[-12],r12
80003cf8:	16 98       	mov	r8,r11
80003cfa:	ef 68 ff f0 	st.b	r7[-16],r8
	bool page_erased = true;
80003cfe:	30 18       	mov	r8,1
80003d00:	ef 68 ff fb 	st.b	r7[-5],r8

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80003d04:	ee fb ff f4 	ld.w	r11,r7[-12]
80003d08:	30 2c       	mov	r12,2
80003d0a:	f0 1f 00 10 	mcall	80003d48 <flashc_erase_page+0x5c>
	if (check) {
80003d0e:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003d12:	30 08       	mov	r8,0
80003d14:	f0 09 18 00 	cp.b	r9,r8
80003d18:	c1 20       	breq	80003d3c <flashc_erase_page+0x50>
		unsigned int error_status = flashc_error_status;
80003d1a:	48 d8       	lddpc	r8,80003d4c <flashc_erase_page+0x60>
80003d1c:	70 08       	ld.w	r8,r8[0x0]
80003d1e:	ef 48 ff fc 	st.w	r7[-4],r8
		page_erased = flashc_quick_page_read(-1);
80003d22:	3f fc       	mov	r12,-1
80003d24:	f0 1f 00 0b 	mcall	80003d50 <flashc_erase_page+0x64>
80003d28:	18 98       	mov	r8,r12
80003d2a:	ef 68 ff fb 	st.b	r7[-5],r8
		flashc_error_status |= error_status;
80003d2e:	48 88       	lddpc	r8,80003d4c <flashc_erase_page+0x60>
80003d30:	70 09       	ld.w	r9,r8[0x0]
80003d32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d36:	10 49       	or	r9,r8
80003d38:	48 58       	lddpc	r8,80003d4c <flashc_erase_page+0x60>
80003d3a:	91 09       	st.w	r8[0x0],r9
	}
	return page_erased;
80003d3c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80003d40:	10 9c       	mov	r12,r8
80003d42:	2f cd       	sub	sp,-16
80003d44:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d48:	80 00       	ld.sh	r0,r0[0x0]
80003d4a:	3c 04       	mov	r4,-64
80003d4c:	00 00       	add	r0,r0
80003d4e:	00 bc       	st.h	r0++,r12
80003d50:	80 00       	ld.sh	r0,r0[0x0]
80003d52:	3c c0       	mov	r0,-52

80003d54 <flashc_write_page>:
	return all_pages_erased;
}


void flashc_write_page(int page_number)
{
80003d54:	eb cd 40 80 	pushm	r7,lr
80003d58:	1a 97       	mov	r7,sp
80003d5a:	20 1d       	sub	sp,4
80003d5c:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80003d60:	ee fb ff fc 	ld.w	r11,r7[-4]
80003d64:	30 1c       	mov	r12,1
80003d66:	f0 1f 00 03 	mcall	80003d70 <flashc_write_page+0x1c>
}
80003d6a:	2f fd       	sub	sp,-4
80003d6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d70:	80 00       	ld.sh	r0,r0[0x0]
80003d72:	3c 04       	mov	r4,-64

80003d74 <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80003d74:	eb cd 40 80 	pushm	r7,lr
80003d78:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80003d7a:	3f fb       	mov	r11,-1
80003d7c:	30 fc       	mov	r12,15
80003d7e:	f0 1f 00 05 	mcall	80003d90 <flashc_quick_user_page_read+0x1c>
	return flashc_is_page_erased();
80003d82:	f0 1f 00 05 	mcall	80003d94 <flashc_quick_user_page_read+0x20>
80003d86:	18 98       	mov	r8,r12
}
80003d88:	10 9c       	mov	r12,r8
80003d8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d8e:	00 00       	add	r0,r0
80003d90:	80 00       	ld.sh	r0,r0[0x0]
80003d92:	3c 04       	mov	r4,-64
80003d94:	80 00       	ld.sh	r0,r0[0x0]
80003d96:	3c a4       	mov	r4,-54

80003d98 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80003d98:	eb cd 40 80 	pushm	r7,lr
80003d9c:	1a 97       	mov	r7,sp
80003d9e:	20 1d       	sub	sp,4
80003da0:	18 98       	mov	r8,r12
80003da2:	ef 68 ff fc 	st.b	r7[-4],r8
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80003da6:	3f fb       	mov	r11,-1
80003da8:	30 ec       	mov	r12,14
80003daa:	f0 1f 00 09 	mcall	80003dcc <flashc_erase_user_page+0x34>
	return (check) ? flashc_quick_user_page_read() : true;
80003dae:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003db2:	30 08       	mov	r8,0
80003db4:	f0 09 18 00 	cp.b	r9,r8
80003db8:	c0 50       	breq	80003dc2 <flashc_erase_user_page+0x2a>
80003dba:	f0 1f 00 06 	mcall	80003dd0 <flashc_erase_user_page+0x38>
80003dbe:	18 98       	mov	r8,r12
80003dc0:	c0 28       	rjmp	80003dc4 <flashc_erase_user_page+0x2c>
80003dc2:	30 18       	mov	r8,1
}
80003dc4:	10 9c       	mov	r12,r8
80003dc6:	2f fd       	sub	sp,-4
80003dc8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003dcc:	80 00       	ld.sh	r0,r0[0x0]
80003dce:	3c 04       	mov	r4,-64
80003dd0:	80 00       	ld.sh	r0,r0[0x0]
80003dd2:	3d 74       	mov	r4,-41

80003dd4 <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80003dd4:	eb cd 40 80 	pushm	r7,lr
80003dd8:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80003dda:	3f fb       	mov	r11,-1
80003ddc:	30 dc       	mov	r12,13
80003dde:	f0 1f 00 03 	mcall	80003de8 <flashc_write_user_page+0x14>
}
80003de2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003de6:	00 00       	add	r0,r0
80003de8:	80 00       	ld.sh	r0,r0[0x0]
80003dea:	3c 04       	mov	r4,-64

80003dec <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, uint8_t src, size_t nbytes, bool erase)
{
80003dec:	eb cd 40 80 	pushm	r7,lr
80003df0:	1a 97       	mov	r7,sp
80003df2:	20 4d       	sub	sp,16
80003df4:	ef 4c ff fc 	st.w	r7[-4],r12
80003df8:	ef 4a ff f4 	st.w	r7[-12],r10
80003dfc:	12 98       	mov	r8,r9
80003dfe:	16 99       	mov	r9,r11
80003e00:	ef 69 ff f8 	st.b	r7[-8],r9
80003e04:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset16(dst, src | (uint16_t)src << 8, nbytes, erase);
80003e08:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003e0c:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80003e10:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003e14:	a9 68       	lsl	r8,0x8
80003e16:	5c 88       	casts.h	r8
80003e18:	f5 e8 10 08 	or	r8,r10,r8
80003e1c:	5c 88       	casts.h	r8
80003e1e:	5c 78       	castu.h	r8
80003e20:	ee fa ff f4 	ld.w	r10,r7[-12]
80003e24:	10 9b       	mov	r11,r8
80003e26:	ee fc ff fc 	ld.w	r12,r7[-4]
80003e2a:	f0 1f 00 04 	mcall	80003e38 <flashc_memset8+0x4c>
80003e2e:	18 98       	mov	r8,r12
}
80003e30:	10 9c       	mov	r12,r8
80003e32:	2f cd       	sub	sp,-16
80003e34:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e38:	80 00       	ld.sh	r0,r0[0x0]
80003e3a:	3e 3c       	mov	r12,-29

80003e3c <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, uint16_t src, size_t nbytes, bool erase)
{
80003e3c:	eb cd 40 80 	pushm	r7,lr
80003e40:	1a 97       	mov	r7,sp
80003e42:	20 4d       	sub	sp,16
80003e44:	ef 4c ff fc 	st.w	r7[-4],r12
80003e48:	ef 4a ff f4 	st.w	r7[-12],r10
80003e4c:	12 98       	mov	r8,r9
80003e4e:	16 99       	mov	r9,r11
80003e50:	ef 59 ff f8 	st.h	r7[-8],r9
80003e54:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset32(dst, src | (uint32_t)src << 16, nbytes, erase);
80003e58:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003e5c:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80003e60:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003e64:	b1 68       	lsl	r8,0x10
80003e66:	f5 e8 10 08 	or	r8,r10,r8
80003e6a:	ee fa ff f4 	ld.w	r10,r7[-12]
80003e6e:	10 9b       	mov	r11,r8
80003e70:	ee fc ff fc 	ld.w	r12,r7[-4]
80003e74:	f0 1f 00 04 	mcall	80003e84 <flashc_memset16+0x48>
80003e78:	18 98       	mov	r8,r12
}
80003e7a:	10 9c       	mov	r12,r8
80003e7c:	2f cd       	sub	sp,-16
80003e7e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e82:	00 00       	add	r0,r0
80003e84:	80 00       	ld.sh	r0,r0[0x0]
80003e86:	3e 88       	mov	r8,-24

80003e88 <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, uint32_t src, size_t nbytes, bool erase)
{
80003e88:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80003e8c:	1a 97       	mov	r7,sp
80003e8e:	20 6d       	sub	sp,24
80003e90:	ef 4c ff fc 	st.w	r7[-4],r12
80003e94:	ef 4b ff f8 	st.w	r7[-8],r11
80003e98:	ef 4a ff f4 	st.w	r7[-12],r10
80003e9c:	12 98       	mov	r8,r9
80003e9e:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
80003ea2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003ea6:	ee f0 ff f8 	ld.w	r0,r7[-8]
80003eaa:	30 01       	mov	r1,0
80003eac:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003eb0:	ef 49 ff ec 	st.w	r7[-20],r9
80003eb4:	30 09       	mov	r9,0
80003eb6:	ef 49 ff e8 	st.w	r7[-24],r9
80003eba:	ee f3 ff ec 	ld.w	r3,r7[-20]
80003ebe:	a1 63       	lsl	r3,0x0
80003ec0:	30 02       	mov	r2,0
80003ec2:	e1 e2 10 0a 	or	r10,r0,r2
80003ec6:	e3 e3 10 0b 	or	r11,r1,r3
80003eca:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003ece:	ee fc ff fc 	ld.w	r12,r7[-4]
80003ed2:	f0 1f 00 04 	mcall	80003ee0 <flashc_memset32+0x58>
80003ed6:	18 98       	mov	r8,r12
}
80003ed8:	10 9c       	mov	r12,r8
80003eda:	2f ad       	sub	sp,-24
80003edc:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80003ee0:	80 00       	ld.sh	r0,r0[0x0]
80003ee2:	3e e4       	mov	r4,-18

80003ee4 <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80003ee4:	eb cd 40 80 	pushm	r7,lr
80003ee8:	1a 97       	mov	r7,sp
80003eea:	21 bd       	sub	sp,108
80003eec:	ef 4c ff a4 	st.w	r7[-92],r12
80003ef0:	ee eb ff 9c 	st.d	r7[-100],r10
80003ef4:	ef 49 ff 98 	st.w	r7[-104],r9
80003ef8:	ef 68 ff 94 	st.b	r7[-108],r8
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
80003efc:	30 08       	mov	r8,0
80003efe:	30 09       	mov	r9,0
80003f00:	ee e9 ff d8 	st.d	r7[-40],r8
	StructCVPtr dest_end;
	UnionCVPtr flash_page_source_end;
	bool incomplete_flash_page_end;
	Union64 flash_dword;
	UnionVPtr tmp;
	unsigned int error_status = 0;
80003f04:	30 08       	mov	r8,0
80003f06:	ef 48 ff ec 	st.w	r7[-20],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80003f0a:	f0 1f 00 fa 	mcall	800042f0 <flashc_memset64+0x40c>
80003f0e:	18 99       	mov	r9,r12
80003f10:	fc 18 80 00 	movh	r8,0x8000
80003f14:	f2 08 00 08 	add	r8,r9,r8
80003f18:	ef 48 ff e4 	st.w	r7[-28],r8
	dest.u8ptr = dst;
80003f1c:	ee f8 ff a4 	ld.w	r8,r7[-92]
80003f20:	ef 48 ff e0 	st.w	r7[-32],r8
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80003f24:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003f28:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003f2c:	20 18       	sub	r8,1
80003f2e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003f32:	ef 48 ff f0 	st.w	r7[-16],r8
80003f36:	c1 f8       	rjmp	80003f74 <flashc_memset64+0x90>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
80003f38:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003f3c:	ef 38 ff a3 	ld.ub	r8,r7[-93]
80003f40:	ee 09 00 09 	add	r9,r7,r9
80003f44:	f3 68 ff d8 	st.b	r9[-40],r8
		src >>= 8;
80003f48:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80003f4c:	b9 68       	lsl	r8,0x18
80003f4e:	ee f9 ff a0 	ld.w	r9,r7[-96]
80003f52:	a9 89       	lsr	r9,0x8
80003f54:	f3 e8 10 08 	or	r8,r9,r8
80003f58:	ef 48 ff a0 	st.w	r7[-96],r8
80003f5c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80003f60:	a9 88       	lsr	r8,0x8
80003f62:	ef 48 ff 9c 	st.w	r7[-100],r8

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
80003f66:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003f6a:	20 18       	sub	r8,1
80003f6c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003f70:	ef 48 ff f0 	st.w	r7[-16],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80003f74:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80003f78:	58 08       	cp.w	r8,0
80003f7a:	5c 29       	cpc	r9
80003f7c:	cd e1       	brne	80003f38 <flashc_memset64+0x54>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
80003f7e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80003f82:	ee f8 ff 98 	ld.w	r8,r7[-104]
80003f86:	f2 08 00 08 	add	r8,r9,r8
80003f8a:	ef 48 ff d4 	st.w	r7[-44],r8

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
80003f8e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003f92:	e0 69 ff ff 	mov	r9,65535
80003f96:	ea 19 7f ff 	orh	r9,0x7fff
80003f9a:	12 38       	cp.w	r8,r9
80003f9c:	e0 8b 00 07 	brhi	80003faa <flashc_memset64+0xc6>
		dest.u8ptr = AVR32_FLASH;
80003fa0:	fc 18 80 00 	movh	r8,0x8000
80003fa4:	ef 48 ff e0 	st.w	r7[-32],r8
80003fa8:	c1 58       	rjmp	80003fd2 <flashc_memset64+0xee>
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
80003faa:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003fae:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003fb2:	10 39       	cp.w	r9,r8
80003fb4:	e0 8b 00 0f 	brhi	80003fd2 <flashc_memset64+0xee>
80003fb8:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003fbc:	e0 69 ff ff 	mov	r9,65535
80003fc0:	ea 19 80 7f 	orh	r9,0x807f
80003fc4:	12 38       	cp.w	r8,r9
80003fc6:	e0 8b 00 06 	brhi	80003fd2 <flashc_memset64+0xee>
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80003fca:	fc 18 80 80 	movh	r8,0x8080
80003fce:	ef 48 ff e0 	st.w	r7[-32],r8
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
80003fd2:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003fd6:	e0 69 02 00 	mov	r9,512
80003fda:	ea 19 80 80 	orh	r9,0x8080
80003fde:	12 38       	cp.w	r8,r9
80003fe0:	e0 88 00 09 	brls	80003ff2 <flashc_memset64+0x10e>
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80003fe4:	e0 68 02 00 	mov	r8,512
80003fe8:	ea 18 80 80 	orh	r8,0x8080
80003fec:	ef 48 ff d4 	st.w	r7[-44],r8
80003ff0:	c1 38       	rjmp	80004016 <flashc_memset64+0x132>
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
80003ff2:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003ff6:	fc 19 80 80 	movh	r9,0x8080
80003ffa:	12 38       	cp.w	r8,r9
80003ffc:	e0 8b 00 0d 	brhi	80004016 <flashc_memset64+0x132>
80004000:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004004:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004008:	10 39       	cp.w	r9,r8
8000400a:	e0 88 00 06 	brls	80004016 <flashc_memset64+0x132>
		dest_end.u8ptr = flash_array_end.u8ptr;
8000400e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004012:	ef 48 ff d4 	st.w	r7[-44],r8
	}

	// Align each end of destination pointer with its natural boundary.
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
80004016:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000401a:	a1 c8       	cbr	r8,0x0
8000401c:	ef 48 ff cc 	st.w	r7[-52],r8
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
80004020:	ee f8 ff cc 	ld.w	r8,r7[-52]
80004024:	e0 18 ff fc 	andl	r8,0xfffc
80004028:	ef 48 ff c4 	st.w	r7[-60],r8
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));
8000402c:	ee f8 ff c4 	ld.w	r8,r7[-60]
80004030:	e0 18 ff f8 	andl	r8,0xfff8
80004034:	ef 48 ff bc 	st.w	r7[-68],r8

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
80004038:	c4 b9       	rjmp	800042ce <flashc_memset64+0x3ea>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
8000403a:	f0 1f 00 af 	mcall	800042f4 <flashc_memset64+0x410>
		error_status |= flashc_error_status;
8000403e:	fe f8 02 ba 	ld.w	r8,pc[698]
80004042:	70 08       	ld.w	r8,r8[0x0]
80004044:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004048:	f3 e8 10 08 	or	r8,r9,r8
8000404c:	ef 48 ff ec 	st.w	r7[-20],r8

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
80004050:	ee f8 ff bc 	ld.w	r8,r7[-68]
80004054:	ef 48 ff f8 	st.w	r7[-8],r8
80004058:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000405c:	e0 18 fe 00 	andl	r8,0xfe00
80004060:	f0 c8 fe 00 	sub	r8,r8,-512
80004064:	ef 48 ff fc 	st.w	r7[-4],r8
80004068:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000406c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004070:	f0 09 0d 48 	min	r8,r8,r9
80004074:	ef 48 ff f4 	st.w	r7[-12],r8
80004078:	ee f8 ff f4 	ld.w	r8,r7[-12]
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
8000407c:	ef 48 ff b4 	st.w	r7[-76],r8
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80004080:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004084:	10 9a       	mov	r10,r8
80004086:	e0 1a fe 00 	andl	r10,0xfe00
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
8000408a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000408e:	10 99       	mov	r9,r8
80004090:	e0 19 fe 00 	andl	r9,0xfe00
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80004094:	30 18       	mov	r8,1
80004096:	12 3a       	cp.w	r10,r9
80004098:	c0 22       	brcc	8000409c <flashc_memset64+0x1b8>
8000409a:	30 08       	mov	r8,0
8000409c:	ef 68 ff eb 	st.b	r7[-21],r8
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
800040a0:	ee e8 ff d8 	ld.d	r8,r7[-40]
800040a4:	ee e9 ff ac 	st.d	r7[-84],r8

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
800040a8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040ac:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800040b0:	c5 b0       	breq	80004166 <flashc_memset64+0x282>
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800040b2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040b6:	e0 18 fe 00 	andl	r8,0xfe00
800040ba:	ef 48 ff a8 	st.w	r7[-88],r8
800040be:	c0 e8       	rjmp	800040da <flashc_memset64+0x1f6>
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
800040c0:	ee fa ff a8 	ld.w	r10,r7[-88]
800040c4:	ee f8 ff a8 	ld.w	r8,r7[-88]
800040c8:	f0 e8 00 00 	ld.d	r8,r8[0]
800040cc:	f4 e9 00 00 	st.d	r10[0],r8
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
800040d0:	ee f8 ff a8 	ld.w	r8,r7[-88]
800040d4:	2f 88       	sub	r8,-8
800040d6:	ef 48 ff a8 	st.w	r7[-88],r8
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
800040da:	ee f9 ff a8 	ld.w	r9,r7[-88]
800040de:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040e2:	e0 18 ff f8 	andl	r8,0xfff8
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800040e6:	10 39       	cp.w	r9,r8
800040e8:	ce c3       	brcs	800040c0 <flashc_memset64+0x1dc>
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
800040ea:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040ee:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800040f2:	c3 a0       	breq	80004166 <flashc_memset64+0x282>
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
800040f4:	30 08       	mov	r8,0
800040f6:	ef 48 ff f0 	st.w	r7[-16],r8
800040fa:	c1 38       	rjmp	80004120 <flashc_memset64+0x23c>
					flash_dword.u8[i] = *tmp.u8ptr++;
800040fc:	ee fa ff f0 	ld.w	r10,r7[-16]
80004100:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004104:	11 89       	ld.ub	r9,r8[0x0]
80004106:	5c 59       	castu.b	r9
80004108:	ee 0a 00 0a 	add	r10,r7,r10
8000410c:	f5 69 ff ac 	st.b	r10[-84],r9
80004110:	2f f8       	sub	r8,-1
80004112:	ef 48 ff a8 	st.w	r7[-88],r8
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
80004116:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000411a:	2f f8       	sub	r8,-1
8000411c:	ef 48 ff f0 	st.w	r7[-16],r8
80004120:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004124:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80004128:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000412c:	10 39       	cp.w	r9,r8
8000412e:	fe 9b ff e7 	brhi	800040fc <flashc_memset64+0x218>
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80004132:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004136:	e0 18 ff f8 	andl	r8,0xfff8
8000413a:	ef 48 ff e0 	st.w	r7[-32],r8

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
8000413e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80004142:	ee f8 ff bc 	ld.w	r8,r7[-68]
80004146:	10 39       	cp.w	r9,r8
80004148:	c0 f2       	brcc	80004166 <flashc_memset64+0x282>
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
8000414a:	ee fa ff e0 	ld.w	r10,r7[-32]
8000414e:	ee e8 ff ac 	ld.d	r8,r7[-84]
80004152:	f4 e9 00 00 	st.d	r10[0],r8
80004156:	f4 c8 ff f8 	sub	r8,r10,-8
8000415a:	ef 48 ff e0 	st.w	r7[-32],r8
					flash_dword.u64 = source.u64;
8000415e:	ee e8 ff d8 	ld.d	r8,r7[-40]
80004162:	ee e9 ff ac 	st.d	r7[-84],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80004166:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000416a:	10 99       	mov	r9,r8
8000416c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004170:	f2 08 01 08 	sub	r8,r9,r8
80004174:	a3 58       	asr	r8,0x3
80004176:	ef 48 ff f0 	st.w	r7[-16],r8
8000417a:	c1 08       	rjmp	8000419a <flashc_memset64+0x2b6>
			*dest.u64ptr++ = source.u64;
8000417c:	ee fa ff e0 	ld.w	r10,r7[-32]
80004180:	ee e8 ff d8 	ld.d	r8,r7[-40]
80004184:	f4 e9 00 00 	st.d	r10[0],r8
80004188:	f4 c8 ff f8 	sub	r8,r10,-8
8000418c:	ef 48 ff e0 	st.w	r7[-32],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80004190:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004194:	20 18       	sub	r8,1
80004196:	ef 48 ff f0 	st.w	r7[-16],r8
8000419a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000419e:	58 08       	cp.w	r8,0
800041a0:	ce e1       	brne	8000417c <flashc_memset64+0x298>
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
800041a2:	ef 39 ff eb 	ld.ub	r9,r7[-21]
800041a6:	30 08       	mov	r8,0
800041a8:	f0 09 18 00 	cp.b	r9,r8
800041ac:	c4 70       	breq	8000423a <flashc_memset64+0x356>
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
800041ae:	ee f8 ff d4 	ld.w	r8,r7[-44]
800041b2:	ef 48 ff a8 	st.w	r7[-88],r8

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
800041b6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800041ba:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800041be:	c3 80       	breq	8000422e <flashc_memset64+0x34a>
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
800041c0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800041c4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800041c8:	ef 48 ff f0 	st.w	r7[-16],r8
800041cc:	c1 38       	rjmp	800041f2 <flashc_memset64+0x30e>
						flash_dword.u8[i] = *tmp.u8ptr++;
800041ce:	ee fa ff f0 	ld.w	r10,r7[-16]
800041d2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800041d6:	11 89       	ld.ub	r9,r8[0x0]
800041d8:	5c 59       	castu.b	r9
800041da:	ee 0a 00 0a 	add	r10,r7,r10
800041de:	f5 69 ff ac 	st.b	r10[-84],r9
800041e2:	2f f8       	sub	r8,-1
800041e4:	ef 48 ff a8 	st.w	r7[-88],r8
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
800041e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041ec:	2f f8       	sub	r8,-1
800041ee:	ef 48 ff f0 	st.w	r7[-16],r8
800041f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041f6:	58 78       	cp.w	r8,7
800041f8:	fe 98 ff eb 	brls	800041ce <flashc_memset64+0x2ea>
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
800041fc:	ee fa ff e0 	ld.w	r10,r7[-32]
80004200:	ee e8 ff ac 	ld.d	r8,r7[-84]
80004204:	f4 e9 00 00 	st.d	r10[0],r8
80004208:	f4 c8 ff f8 	sub	r8,r10,-8
8000420c:	ef 48 ff e0 	st.w	r7[-32],r8
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80004210:	c1 08       	rjmp	80004230 <flashc_memset64+0x34c>
					*tmp.u64ptr = *tmp.u64ptr;
80004212:	ee fa ff a8 	ld.w	r10,r7[-88]
80004216:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000421a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000421e:	f4 e9 00 00 	st.d	r10[0],r8
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80004222:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004226:	2f 88       	sub	r8,-8
80004228:	ef 48 ff a8 	st.w	r7[-88],r8
8000422c:	c0 28       	rjmp	80004230 <flashc_memset64+0x34c>
8000422e:	d7 03       	nop
80004230:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004234:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004238:	ce d1       	brne	80004212 <flashc_memset64+0x32e>
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
8000423a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000423e:	fc 19 80 80 	movh	r9,0x8080
80004242:	12 38       	cp.w	r8,r9
80004244:	e0 8b 00 2a 	brhi	80004298 <flashc_memset64+0x3b4>
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
80004248:	ef 39 ff 94 	ld.ub	r9,r7[-108]
8000424c:	30 08       	mov	r8,0
8000424e:	f0 09 18 00 	cp.b	r9,r8
80004252:	c0 d0       	breq	8000426c <flashc_memset64+0x388>
				flashc_erase_page(-1, false);
80004254:	30 0b       	mov	r11,0
80004256:	3f fc       	mov	r12,-1
80004258:	f0 1f 00 29 	mcall	800042fc <flashc_memset64+0x418>
				error_status |= flashc_error_status;
8000425c:	4a 78       	lddpc	r8,800042f8 <flashc_memset64+0x414>
8000425e:	70 08       	ld.w	r8,r8[0x0]
80004260:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004264:	f3 e8 10 08 	or	r8,r9,r8
80004268:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_page(-1);
8000426c:	3f fc       	mov	r12,-1
8000426e:	f0 1f 00 25 	mcall	80004300 <flashc_memset64+0x41c>
			error_status |= flashc_error_status;
80004272:	4a 28       	lddpc	r8,800042f8 <flashc_memset64+0x414>
80004274:	70 08       	ld.w	r8,r8[0x0]
80004276:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000427a:	f3 e8 10 08 	or	r8,r9,r8
8000427e:	ef 48 ff ec 	st.w	r7[-20],r8

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
80004282:	ee f9 ff e0 	ld.w	r9,r7[-32]
80004286:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000428a:	10 39       	cp.w	r9,r8
8000428c:	c2 13       	brcs	800042ce <flashc_memset64+0x3ea>
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
8000428e:	fc 18 80 80 	movh	r8,0x8080
80004292:	ef 48 ff e0 	st.w	r7[-32],r8
80004296:	c1 c8       	rjmp	800042ce <flashc_memset64+0x3ea>
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
80004298:	ef 39 ff 94 	ld.ub	r9,r7[-108]
8000429c:	30 08       	mov	r8,0
8000429e:	f0 09 18 00 	cp.b	r9,r8
800042a2:	c0 c0       	breq	800042ba <flashc_memset64+0x3d6>
				flashc_erase_user_page(false);
800042a4:	30 0c       	mov	r12,0
800042a6:	f0 1f 00 18 	mcall	80004304 <flashc_memset64+0x420>
				error_status |= flashc_error_status;
800042aa:	49 48       	lddpc	r8,800042f8 <flashc_memset64+0x414>
800042ac:	70 08       	ld.w	r8,r8[0x0]
800042ae:	ee f9 ff ec 	ld.w	r9,r7[-20]
800042b2:	f3 e8 10 08 	or	r8,r9,r8
800042b6:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_user_page();
800042ba:	f0 1f 00 14 	mcall	80004308 <flashc_memset64+0x424>
			error_status |= flashc_error_status;
800042be:	48 f8       	lddpc	r8,800042f8 <flashc_memset64+0x414>
800042c0:	70 08       	ld.w	r8,r8[0x0]
800042c2:	ee f9 ff ec 	ld.w	r9,r7[-20]
800042c6:	f3 e8 10 08 	or	r8,r9,r8
800042ca:	ef 48 ff ec 	st.w	r7[-20],r8
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
800042ce:	ee f9 ff e0 	ld.w	r9,r7[-32]
800042d2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800042d6:	10 39       	cp.w	r9,r8
800042d8:	fe 93 fe b1 	brlo	8000403a <flashc_memset64+0x156>
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
800042dc:	48 78       	lddpc	r8,800042f8 <flashc_memset64+0x414>
800042de:	ee f9 ff ec 	ld.w	r9,r7[-20]
800042e2:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memset function does.
	return dst;
800042e4:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
800042e8:	10 9c       	mov	r12,r8
800042ea:	2e 5d       	sub	sp,-108
800042ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800042f0:	80 00       	ld.sh	r0,r0[0x0]
800042f2:	3b 78       	mov	r8,-73
800042f4:	80 00       	ld.sh	r0,r0[0x0]
800042f6:	3c 8c       	mov	r12,-56
800042f8:	00 00       	add	r0,r0
800042fa:	00 bc       	st.h	r0++,r12
800042fc:	80 00       	ld.sh	r0,r0[0x0]
800042fe:	3c ec       	mov	r12,-50
80004300:	80 00       	ld.sh	r0,r0[0x0]
80004302:	3d 54       	mov	r4,-43
80004304:	80 00       	ld.sh	r0,r0[0x0]
80004306:	3d 98       	mov	r8,-39
80004308:	80 00       	ld.sh	r0,r0[0x0]
8000430a:	3d d4       	mov	r4,-35

8000430c <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
8000430c:	eb cd 40 80 	pushm	r7,lr
80004310:	1a 97       	mov	r7,sp
80004312:	20 bd       	sub	sp,44
80004314:	ef 4c ff e0 	st.w	r7[-32],r12
80004318:	ef 4b ff dc 	st.w	r7[-36],r11
8000431c:	ef 4a ff d8 	st.w	r7[-40],r10
80004320:	12 98       	mov	r8,r9
80004322:	ef 68 ff d4 	st.b	r7[-44],r8
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
80004326:	30 08       	mov	r8,0
80004328:	ef 48 ff f0 	st.w	r7[-16],r8
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
8000432c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004330:	ef 48 ff f8 	st.w	r7[-8],r8
	const uint8_t* src_buf=(const uint8_t*)src;
80004334:	ee f8 ff dc 	ld.w	r8,r7[-36]
80004338:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
8000433c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80004340:	30 18       	mov	r8,1
80004342:	e0 6a ff ff 	mov	r10,65535
80004346:	ea 1a 80 7f 	orh	r10,0x807f
8000434a:	14 39       	cp.w	r9,r10
8000434c:	e0 8b 00 03 	brhi	80004352 <flashc_memcpy+0x46>
80004350:	30 08       	mov	r8,0
80004352:	ef 68 ff ef 	st.b	r7[-17],r8

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
80004356:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000435a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000435e:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004362:	f2 08 01 08 	sub	r8,r9,r8
80004366:	ef 48 ff f4 	st.w	r7[-12],r8

	while (nbytes) {
8000436a:	c9 18       	rjmp	8000448c <flashc_memcpy+0x180>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
8000436c:	f0 1f 00 50 	mcall	800044ac <flashc_memcpy+0x1a0>
		error_status |= flashc_error_status;
80004370:	4d 08       	lddpc	r8,800044b0 <flashc_memcpy+0x1a4>
80004372:	70 08       	ld.w	r8,r8[0x0]
80004374:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004378:	f3 e8 10 08 	or	r8,r9,r8
8000437c:	ef 48 ff f0 	st.w	r7[-16],r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80004380:	30 08       	mov	r8,0
80004382:	ef 58 ff ec 	st.h	r7[-20],r8
80004386:	c4 b8       	rjmp	8000441c <flashc_memcpy+0x110>
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
80004388:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000438c:	f0 e8 00 00 	ld.d	r8,r8[0]
80004390:	ee e9 ff e4 	st.d	r7[-28],r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80004394:	30 08       	mov	r8,0
80004396:	ef 68 ff ee 	st.b	r7[-18],r8
8000439a:	c2 d8       	rjmp	800043f4 <flashc_memcpy+0xe8>
				if (nbytes && (flash_add == dest_add)) {
8000439c:	ee f8 ff d8 	ld.w	r8,r7[-40]
800043a0:	58 08       	cp.w	r8,0
800043a2:	c1 f0       	breq	800043e0 <flashc_memcpy+0xd4>
800043a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800043a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043ac:	10 39       	cp.w	r9,r8
800043ae:	c1 91       	brne	800043e0 <flashc_memcpy+0xd4>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
800043b0:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800043b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043b8:	11 88       	ld.ub	r8,r8[0x0]
800043ba:	ee 09 00 09 	add	r9,r7,r9
800043be:	f3 68 ff e4 	st.b	r9[-28],r8
800043c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043c6:	2f f8       	sub	r8,-1
800043c8:	ef 48 ff fc 	st.w	r7[-4],r8
					dest_add++;
800043cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043d0:	2f f8       	sub	r8,-1
800043d2:	ef 48 ff f8 	st.w	r7[-8],r8
					nbytes--;
800043d6:	ee f8 ff d8 	ld.w	r8,r7[-40]
800043da:	20 18       	sub	r8,1
800043dc:	ef 48 ff d8 	st.w	r7[-40],r8
				}
				flash_add++;
800043e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800043e4:	2f f8       	sub	r8,-1
800043e6:	ef 48 ff f4 	st.w	r7[-12],r8
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
800043ea:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800043ee:	2f f8       	sub	r8,-1
800043f0:	ef 68 ff ee 	st.b	r7[-18],r8
800043f4:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800043f8:	30 78       	mov	r8,7
800043fa:	f0 09 18 00 	cp.b	r9,r8
800043fe:	fe 98 ff cf 	brls	8000439c <flashc_memcpy+0x90>
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
80004402:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004406:	20 88       	sub	r8,8
80004408:	10 9a       	mov	r10,r8
8000440a:	ee e8 ff e4 	ld.d	r8,r7[-28]
8000440e:	f4 e9 00 00 	st.d	r10[0],r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80004412:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80004416:	2f 88       	sub	r8,-8
80004418:	ef 58 ff ec 	st.h	r7[-20],r8
8000441c:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80004420:	e0 68 01 ff 	mov	r8,511
80004424:	f0 09 19 00 	cp.h	r9,r8
80004428:	fe 98 ff b0 	brls	80004388 <flashc_memcpy+0x7c>
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
8000442c:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80004430:	30 08       	mov	r8,0
80004432:	f0 09 18 00 	cp.b	r9,r8
80004436:	c1 70       	breq	80004464 <flashc_memcpy+0x158>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
80004438:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000443c:	30 08       	mov	r8,0
8000443e:	f0 09 18 00 	cp.b	r9,r8
80004442:	c0 50       	breq	8000444c <flashc_memcpy+0x140>
80004444:	30 0c       	mov	r12,0
80004446:	f0 1f 00 1c 	mcall	800044b4 <flashc_memcpy+0x1a8>
8000444a:	c0 58       	rjmp	80004454 <flashc_memcpy+0x148>
8000444c:	30 0b       	mov	r11,0
8000444e:	3f fc       	mov	r12,-1
80004450:	f0 1f 00 1a 	mcall	800044b8 <flashc_memcpy+0x1ac>
			error_status |= flashc_error_status;
80004454:	49 78       	lddpc	r8,800044b0 <flashc_memcpy+0x1a4>
80004456:	70 08       	ld.w	r8,r8[0x0]
80004458:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000445c:	f3 e8 10 08 	or	r8,r9,r8
80004460:	ef 48 ff f0 	st.w	r7[-16],r8
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
80004464:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80004468:	30 08       	mov	r8,0
8000446a:	f0 09 18 00 	cp.b	r9,r8
8000446e:	c0 40       	breq	80004476 <flashc_memcpy+0x16a>
80004470:	f0 1f 00 13 	mcall	800044bc <flashc_memcpy+0x1b0>
80004474:	c0 48       	rjmp	8000447c <flashc_memcpy+0x170>
80004476:	3f fc       	mov	r12,-1
80004478:	f0 1f 00 12 	mcall	800044c0 <flashc_memcpy+0x1b4>
		error_status |= flashc_error_status;
8000447c:	48 d8       	lddpc	r8,800044b0 <flashc_memcpy+0x1a4>
8000447e:	70 08       	ld.w	r8,r8[0x0]
80004480:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004484:	f3 e8 10 08 	or	r8,r9,r8
80004488:	ef 48 ff f0 	st.w	r7[-16],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
8000448c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004490:	58 08       	cp.w	r8,0
80004492:	fe 91 ff 6d 	brne	8000436c <flashc_memcpy+0x60>
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
80004496:	48 78       	lddpc	r8,800044b0 <flashc_memcpy+0x1a4>
80004498:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000449c:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
8000449e:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
800044a2:	10 9c       	mov	r12,r8
800044a4:	2f 5d       	sub	sp,-44
800044a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800044aa:	00 00       	add	r0,r0
800044ac:	80 00       	ld.sh	r0,r0[0x0]
800044ae:	3c 8c       	mov	r12,-56
800044b0:	00 00       	add	r0,r0
800044b2:	00 bc       	st.h	r0++,r12
800044b4:	80 00       	ld.sh	r0,r0[0x0]
800044b6:	3d 98       	mov	r8,-39
800044b8:	80 00       	ld.sh	r0,r0[0x0]
800044ba:	3c ec       	mov	r12,-50
800044bc:	80 00       	ld.sh	r0,r0[0x0]
800044be:	3d d4       	mov	r4,-35
800044c0:	80 00       	ld.sh	r0,r0[0x0]
800044c2:	3d 54       	mov	r4,-43

800044c4 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800044c4:	eb cd 40 80 	pushm	r7,lr
800044c8:	1a 97       	mov	r7,sp
800044ca:	20 4d       	sub	sp,16
800044cc:	ef 4c ff f4 	st.w	r7[-12],r12
800044d0:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
800044d4:	30 08       	mov	r8,0
800044d6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
800044da:	30 08       	mov	r8,0
800044dc:	ef 48 ff fc 	st.w	r7[-4],r8
800044e0:	c1 c8       	rjmp	80004518 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800044e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044e6:	70 19       	ld.w	r9,r8[0x4]
800044e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044ec:	70 08       	ld.w	r8,r8[0x0]
800044ee:	12 9b       	mov	r11,r9
800044f0:	10 9c       	mov	r12,r8
800044f2:	f0 1f 00 10 	mcall	80004530 <gpio_enable_module+0x6c>
800044f6:	18 98       	mov	r8,r12
800044f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800044fc:	f3 e8 10 08 	or	r8,r9,r8
80004500:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
80004504:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004508:	2f 88       	sub	r8,-8
8000450a:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000450e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004512:	2f f8       	sub	r8,-1
80004514:	ef 48 ff fc 	st.w	r7[-4],r8
80004518:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000451c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004520:	10 39       	cp.w	r9,r8
80004522:	ce 03       	brcs	800044e2 <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
80004524:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80004528:	10 9c       	mov	r12,r8
8000452a:	2f cd       	sub	sp,-16
8000452c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004530:	80 00       	ld.sh	r0,r0[0x0]
80004532:	45 34       	lddsp	r4,sp[0x14c]

80004534 <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80004534:	eb cd 40 80 	pushm	r7,lr
80004538:	1a 97       	mov	r7,sp
8000453a:	20 3d       	sub	sp,12
8000453c:	ef 4c ff f8 	st.w	r7[-8],r12
80004540:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004544:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004548:	a5 98       	lsr	r8,0x5
8000454a:	a9 78       	lsl	r8,0x9
8000454c:	e0 28 e0 00 	sub	r8,57344
80004550:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
80004554:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004558:	58 78       	cp.w	r8,7
8000455a:	e0 8b 01 16 	brhi	80004786 <gpio_enable_module_pin+0x252>
8000455e:	fe f9 02 4e 	ld.w	r9,pc[590]
80004562:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004566:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000456a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000456e:	30 19       	mov	r9,1
80004570:	f2 08 09 48 	lsl	r8,r9,r8
80004574:	10 99       	mov	r9,r8
80004576:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000457a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000457c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004580:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004584:	30 19       	mov	r9,1
80004586:	f2 08 09 48 	lsl	r8,r9,r8
8000458a:	10 99       	mov	r9,r8
8000458c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004590:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80004592:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004596:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000459a:	30 19       	mov	r9,1
8000459c:	f2 08 09 48 	lsl	r8,r9,r8
800045a0:	10 99       	mov	r9,r8
800045a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045a6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800045a8:	cf 18       	rjmp	8000478a <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800045aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045b2:	30 19       	mov	r9,1
800045b4:	f2 08 09 48 	lsl	r8,r9,r8
800045b8:	10 99       	mov	r9,r8
800045ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045be:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800045c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045c8:	30 19       	mov	r9,1
800045ca:	f2 08 09 48 	lsl	r8,r9,r8
800045ce:	10 99       	mov	r9,r8
800045d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045d4:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800045d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045de:	30 19       	mov	r9,1
800045e0:	f2 08 09 48 	lsl	r8,r9,r8
800045e4:	10 99       	mov	r9,r8
800045e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045ea:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800045ec:	cc f8       	rjmp	8000478a <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800045ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045f6:	30 19       	mov	r9,1
800045f8:	f2 08 09 48 	lsl	r8,r9,r8
800045fc:	10 99       	mov	r9,r8
800045fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004602:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004604:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004608:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000460c:	30 19       	mov	r9,1
8000460e:	f2 08 09 48 	lsl	r8,r9,r8
80004612:	10 99       	mov	r9,r8
80004614:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004618:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000461a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000461e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004622:	30 19       	mov	r9,1
80004624:	f2 08 09 48 	lsl	r8,r9,r8
80004628:	10 99       	mov	r9,r8
8000462a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000462e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004630:	ca d8       	rjmp	8000478a <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004632:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004636:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000463a:	30 19       	mov	r9,1
8000463c:	f2 08 09 48 	lsl	r8,r9,r8
80004640:	10 99       	mov	r9,r8
80004642:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004646:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004648:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000464c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004650:	30 19       	mov	r9,1
80004652:	f2 08 09 48 	lsl	r8,r9,r8
80004656:	10 99       	mov	r9,r8
80004658:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000465c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000465e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004662:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004666:	30 19       	mov	r9,1
80004668:	f2 08 09 48 	lsl	r8,r9,r8
8000466c:	10 99       	mov	r9,r8
8000466e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004672:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004674:	c8 b8       	rjmp	8000478a <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000467a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000467e:	30 19       	mov	r9,1
80004680:	f2 08 09 48 	lsl	r8,r9,r8
80004684:	10 99       	mov	r9,r8
80004686:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000468a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000468c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004690:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004694:	30 19       	mov	r9,1
80004696:	f2 08 09 48 	lsl	r8,r9,r8
8000469a:	10 99       	mov	r9,r8
8000469c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046a0:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800046a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046aa:	30 19       	mov	r9,1
800046ac:	f2 08 09 48 	lsl	r8,r9,r8
800046b0:	10 99       	mov	r9,r8
800046b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046b6:	91 d9       	st.w	r8[0x34],r9
		break;
800046b8:	c6 98       	rjmp	8000478a <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800046ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046c2:	30 19       	mov	r9,1
800046c4:	f2 08 09 48 	lsl	r8,r9,r8
800046c8:	10 99       	mov	r9,r8
800046ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046ce:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800046d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046d8:	30 19       	mov	r9,1
800046da:	f2 08 09 48 	lsl	r8,r9,r8
800046de:	10 99       	mov	r9,r8
800046e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046e4:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800046e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046ee:	30 19       	mov	r9,1
800046f0:	f2 08 09 48 	lsl	r8,r9,r8
800046f4:	10 99       	mov	r9,r8
800046f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046fa:	91 d9       	st.w	r8[0x34],r9
		break;
800046fc:	c4 78       	rjmp	8000478a <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800046fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004702:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004706:	30 19       	mov	r9,1
80004708:	f2 08 09 48 	lsl	r8,r9,r8
8000470c:	10 99       	mov	r9,r8
8000470e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004712:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004714:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004718:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000471c:	30 19       	mov	r9,1
8000471e:	f2 08 09 48 	lsl	r8,r9,r8
80004722:	10 99       	mov	r9,r8
80004724:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004728:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000472a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000472e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004732:	30 19       	mov	r9,1
80004734:	f2 08 09 48 	lsl	r8,r9,r8
80004738:	10 99       	mov	r9,r8
8000473a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000473e:	91 d9       	st.w	r8[0x34],r9
		break;
80004740:	c2 58       	rjmp	8000478a <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004742:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004746:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000474a:	30 19       	mov	r9,1
8000474c:	f2 08 09 48 	lsl	r8,r9,r8
80004750:	10 99       	mov	r9,r8
80004752:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004756:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004758:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000475c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004760:	30 19       	mov	r9,1
80004762:	f2 08 09 48 	lsl	r8,r9,r8
80004766:	10 99       	mov	r9,r8
80004768:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000476c:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000476e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004772:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004776:	30 19       	mov	r9,1
80004778:	f2 08 09 48 	lsl	r8,r9,r8
8000477c:	10 99       	mov	r9,r8
8000477e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004782:	91 d9       	st.w	r8[0x34],r9
		break;
80004784:	c0 38       	rjmp	8000478a <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
80004786:	30 18       	mov	r8,1
80004788:	c0 d8       	rjmp	800047a2 <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000478a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000478e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004792:	30 19       	mov	r9,1
80004794:	f2 08 09 48 	lsl	r8,r9,r8
80004798:	10 99       	mov	r9,r8
8000479a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000479e:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
800047a0:	30 08       	mov	r8,0
}
800047a2:	10 9c       	mov	r12,r8
800047a4:	2f dd       	sub	sp,-12
800047a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800047aa:	00 00       	add	r0,r0
800047ac:	80 00       	ld.sh	r0,r0[0x0]
800047ae:	aa 40       	st.h	r5[0x8],r0

800047b0 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
800047b0:	eb cd 40 80 	pushm	r7,lr
800047b4:	1a 97       	mov	r7,sp
800047b6:	20 3d       	sub	sp,12
800047b8:	ef 4c ff f8 	st.w	r7[-8],r12
800047bc:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800047c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047c4:	a5 98       	lsr	r8,0x5
800047c6:	a9 78       	lsl	r8,0x9
800047c8:	e0 28 e0 00 	sub	r8,57344
800047cc:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
800047d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800047d4:	e2 18 00 08 	andl	r8,0x8,COH
800047d8:	c0 e0       	breq	800047f4 <gpio_configure_pin+0x44>
		gpio_port->pders = 1 << (pin & 0x1F);
800047da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047e2:	30 19       	mov	r9,1
800047e4:	f2 08 09 48 	lsl	r8,r9,r8
800047e8:	10 99       	mov	r9,r8
800047ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047ee:	f1 49 00 84 	st.w	r8[132],r9
800047f2:	c0 d8       	rjmp	8000480c <gpio_configure_pin+0x5c>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
800047f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047fc:	30 19       	mov	r9,1
800047fe:	f2 08 09 48 	lsl	r8,r9,r8
80004802:	10 99       	mov	r9,r8
80004804:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004808:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
8000480c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004810:	e2 18 00 04 	andl	r8,0x4,COH
80004814:	c0 e0       	breq	80004830 <gpio_configure_pin+0x80>
		gpio_port->puers = 1 << (pin & 0x1F);
80004816:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000481a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000481e:	30 19       	mov	r9,1
80004820:	f2 08 09 48 	lsl	r8,r9,r8
80004824:	10 99       	mov	r9,r8
80004826:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000482a:	f1 49 00 74 	st.w	r8[116],r9
8000482e:	c0 d8       	rjmp	80004848 <gpio_configure_pin+0x98>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80004830:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004834:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004838:	30 19       	mov	r9,1
8000483a:	f2 08 09 48 	lsl	r8,r9,r8
8000483e:	10 99       	mov	r9,r8
80004840:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004844:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
80004848:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000484c:	e2 18 00 40 	andl	r8,0x40,COH
80004850:	c0 e0       	breq	8000486c <gpio_configure_pin+0xbc>
		gpio_port->odmers = 1 << (pin & 0x1F);
80004852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004856:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000485a:	30 19       	mov	r9,1
8000485c:	f2 08 09 48 	lsl	r8,r9,r8
80004860:	10 99       	mov	r9,r8
80004862:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004866:	f1 49 00 e4 	st.w	r8[228],r9
8000486a:	c0 d8       	rjmp	80004884 <gpio_configure_pin+0xd4>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
8000486c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004870:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004874:	30 19       	mov	r9,1
80004876:	f2 08 09 48 	lsl	r8,r9,r8
8000487a:	10 99       	mov	r9,r8
8000487c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004880:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
80004884:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004888:	e2 18 00 10 	andl	r8,0x10,COH
8000488c:	c0 e0       	breq	800048a8 <gpio_configure_pin+0xf8>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
8000488e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004892:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004896:	30 19       	mov	r9,1
80004898:	f2 08 09 48 	lsl	r8,r9,r8
8000489c:	10 99       	mov	r9,r8
8000489e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048a2:	f1 49 01 04 	st.w	r8[260],r9
800048a6:	c0 d8       	rjmp	800048c0 <gpio_configure_pin+0x110>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
800048a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048b0:	30 19       	mov	r9,1
800048b2:	f2 08 09 48 	lsl	r8,r9,r8
800048b6:	10 99       	mov	r9,r8
800048b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048bc:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
800048c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048c4:	e2 18 00 20 	andl	r8,0x20,COH
800048c8:	c0 e0       	breq	800048e4 <gpio_configure_pin+0x134>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
800048ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048d2:	30 19       	mov	r9,1
800048d4:	f2 08 09 48 	lsl	r8,r9,r8
800048d8:	10 99       	mov	r9,r8
800048da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048de:	f1 49 01 14 	st.w	r8[276],r9
800048e2:	c0 d8       	rjmp	800048fc <gpio_configure_pin+0x14c>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
800048e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048ec:	30 19       	mov	r9,1
800048ee:	f2 08 09 48 	lsl	r8,r9,r8
800048f2:	10 99       	mov	r9,r8
800048f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048f8:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800048fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004900:	e2 18 00 80 	andl	r8,0x80,COH
80004904:	c5 a0       	breq	800049b8 <gpio_configure_pin+0x208>
		if (flags & GPIO_BOTHEDGES) {
80004906:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000490a:	e2 18 01 80 	andl	r8,0x180,COH
8000490e:	c1 a0       	breq	80004942 <gpio_configure_pin+0x192>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004910:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004914:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004918:	30 19       	mov	r9,1
8000491a:	f2 08 09 48 	lsl	r8,r9,r8
8000491e:	10 99       	mov	r9,r8
80004920:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004924:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80004928:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000492c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004930:	30 19       	mov	r9,1
80004932:	f2 08 09 48 	lsl	r8,r9,r8
80004936:	10 99       	mov	r9,r8
80004938:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000493c:	f1 49 00 b8 	st.w	r8[184],r9
80004940:	c3 c8       	rjmp	800049b8 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_RISING) {
80004942:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004946:	e2 18 02 80 	andl	r8,0x280,COH
8000494a:	c1 a0       	breq	8000497e <gpio_configure_pin+0x1ce>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000494c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004950:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004954:	30 19       	mov	r9,1
80004956:	f2 08 09 48 	lsl	r8,r9,r8
8000495a:	10 99       	mov	r9,r8
8000495c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004960:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80004964:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004968:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000496c:	30 19       	mov	r9,1
8000496e:	f2 08 09 48 	lsl	r8,r9,r8
80004972:	10 99       	mov	r9,r8
80004974:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004978:	f1 49 00 b8 	st.w	r8[184],r9
8000497c:	c1 e8       	rjmp	800049b8 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_FALLING) {
8000497e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004982:	e2 18 03 80 	andl	r8,0x380,COH
80004986:	c1 90       	breq	800049b8 <gpio_configure_pin+0x208>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000498c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004990:	30 19       	mov	r9,1
80004992:	f2 08 09 48 	lsl	r8,r9,r8
80004996:	10 99       	mov	r9,r8
80004998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000499c:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
800049a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049a8:	30 19       	mov	r9,1
800049aa:	f2 08 09 48 	lsl	r8,r9,r8
800049ae:	10 99       	mov	r9,r8
800049b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049b4:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800049b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049bc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800049c0:	5c 58       	castu.b	r8
800049c2:	c2 c0       	breq	80004a1a <gpio_configure_pin+0x26a>
		if (flags & GPIO_INIT_HIGH) {
800049c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049c8:	e2 18 00 02 	andl	r8,0x2,COH
800049cc:	c0 e0       	breq	800049e8 <gpio_configure_pin+0x238>
			gpio_port->ovrs = 1 << (pin & 0x1F);
800049ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049d6:	30 19       	mov	r9,1
800049d8:	f2 08 09 48 	lsl	r8,r9,r8
800049dc:	10 99       	mov	r9,r8
800049de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049e2:	f1 49 00 54 	st.w	r8[84],r9
800049e6:	c0 d8       	rjmp	80004a00 <gpio_configure_pin+0x250>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
800049e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049f0:	30 19       	mov	r9,1
800049f2:	f2 08 09 48 	lsl	r8,r9,r8
800049f6:	10 99       	mov	r9,r8
800049f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049fc:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80004a00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a04:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a08:	30 19       	mov	r9,1
80004a0a:	f2 08 09 48 	lsl	r8,r9,r8
80004a0e:	10 99       	mov	r9,r8
80004a10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a14:	f1 49 00 44 	st.w	r8[68],r9
80004a18:	c0 d8       	rjmp	80004a32 <gpio_configure_pin+0x282>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80004a1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a1e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a22:	30 19       	mov	r9,1
80004a24:	f2 08 09 48 	lsl	r8,r9,r8
80004a28:	10 99       	mov	r9,r8
80004a2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a2e:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004a32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a36:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a3a:	30 19       	mov	r9,1
80004a3c:	f2 08 09 48 	lsl	r8,r9,r8
80004a40:	10 99       	mov	r9,r8
80004a42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a46:	91 19       	st.w	r8[0x4],r9
}
80004a48:	2f dd       	sub	sp,-12
80004a4a:	e3 cd 80 80 	ldm	sp++,r7,pc

80004a4e <gpio_get_pin_value>:
 * \param pin The pin number.
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
80004a4e:	eb cd 40 80 	pushm	r7,lr
80004a52:	1a 97       	mov	r7,sp
80004a54:	20 2d       	sub	sp,8
80004a56:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004a5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a5e:	a5 98       	lsr	r8,0x5
80004a60:	a9 78       	lsl	r8,0x9
80004a62:	e0 28 e0 00 	sub	r8,57344
80004a66:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80004a6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a6e:	71 89       	ld.w	r9,r8[0x60]
80004a70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a74:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a78:	f2 08 0a 48 	lsr	r8,r9,r8
80004a7c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004a80:	5c 58       	castu.b	r8
}
80004a82:	10 9c       	mov	r12,r8
80004a84:	2f ed       	sub	sp,-8
80004a86:	e3 cd 80 80 	ldm	sp++,r7,pc

80004a8a <gpio_set_pin_high>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
80004a8a:	eb cd 40 80 	pushm	r7,lr
80004a8e:	1a 97       	mov	r7,sp
80004a90:	20 2d       	sub	sp,8
80004a92:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004a96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a9a:	a5 98       	lsr	r8,0x5
80004a9c:	a9 78       	lsl	r8,0x9
80004a9e:	e0 28 e0 00 	sub	r8,57344
80004aa2:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80004aa6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aaa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004aae:	30 19       	mov	r9,1
80004ab0:	f2 08 09 48 	lsl	r8,r9,r8
80004ab4:	10 99       	mov	r9,r8
80004ab6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004aba:	f1 49 00 54 	st.w	r8[84],r9
}
80004abe:	2f ed       	sub	sp,-8
80004ac0:	e3 cd 80 80 	ldm	sp++,r7,pc

80004ac4 <gpio_set_pin_low>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
80004ac4:	eb cd 40 80 	pushm	r7,lr
80004ac8:	1a 97       	mov	r7,sp
80004aca:	20 2d       	sub	sp,8
80004acc:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004ad0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ad4:	a5 98       	lsr	r8,0x5
80004ad6:	a9 78       	lsl	r8,0x9
80004ad8:	e0 28 e0 00 	sub	r8,57344
80004adc:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004ae0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ae4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004ae8:	30 19       	mov	r9,1
80004aea:	f2 08 09 48 	lsl	r8,r9,r8
80004aee:	10 99       	mov	r9,r8
80004af0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004af4:	f1 49 00 58 	st.w	r8[88],r9
}
80004af8:	2f ed       	sub	sp,-8
80004afa:	e3 cd 80 80 	ldm	sp++,r7,pc

80004afe <gpio_toggle_pin>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
80004afe:	eb cd 40 80 	pushm	r7,lr
80004b02:	1a 97       	mov	r7,sp
80004b04:	20 2d       	sub	sp,8
80004b06:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b0e:	a5 98       	lsr	r8,0x5
80004b10:	a9 78       	lsl	r8,0x9
80004b12:	e0 28 e0 00 	sub	r8,57344
80004b16:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80004b1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b1e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b22:	30 19       	mov	r9,1
80004b24:	f2 08 09 48 	lsl	r8,r9,r8
80004b28:	10 99       	mov	r9,r8
80004b2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b2e:	f1 49 00 5c 	st.w	r8[92],r9
}
80004b32:	2f ed       	sub	sp,-8
80004b34:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b38 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80004b38:	eb cd 40 80 	pushm	r7,lr
80004b3c:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80004b3e:	c0 08       	rjmp	80004b3e <_unhandled_interrupt+0x6>

80004b40 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80004b40:	eb cd 40 80 	pushm	r7,lr
80004b44:	1a 97       	mov	r7,sp
80004b46:	20 3d       	sub	sp,12
80004b48:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80004b4c:	fe 78 00 00 	mov	r8,-65536
80004b50:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004b54:	f2 09 11 03 	rsub	r9,r9,3
80004b58:	28 09       	sub	r9,-128
80004b5a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004b5e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80004b62:	fe 78 00 00 	mov	r8,-65536
80004b66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004b6a:	2c 09       	sub	r9,-64
80004b6c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004b70:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004b74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b78:	58 08       	cp.w	r8,0
80004b7a:	c1 30       	breq	80004ba0 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004b7c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004b80:	48 b8       	lddpc	r8,80004bac <_get_interrupt_handler+0x6c>
80004b82:	a1 79       	lsl	r9,0x1
80004b84:	2f f9       	sub	r9,-1
80004b86:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004b8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b8e:	f0 08 12 00 	clz	r8,r8
80004b92:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80004b96:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004b98:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004b9c:	70 08       	ld.w	r8,r8[0x0]
80004b9e:	c0 28       	rjmp	80004ba2 <_get_interrupt_handler+0x62>
80004ba0:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80004ba2:	10 9c       	mov	r12,r8
80004ba4:	2f dd       	sub	sp,-12
80004ba6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004baa:	00 00       	add	r0,r0
80004bac:	80 00       	ld.sh	r0,r0[0x0]
80004bae:	aa 60       	st.h	r5[0xc],r0

80004bb0 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80004bb0:	eb cd 40 80 	pushm	r7,lr
80004bb4:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004bb6:	48 38       	lddpc	r8,80004bc0 <INTC_init_evba+0x10>
80004bb8:	e3 b8 00 01 	mtsr	0x4,r8
}
80004bbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80004bc0:	80 00       	ld.sh	r0,r0[0x0]
80004bc2:	a8 00       	st.h	r4[0x0],r0

80004bc4 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80004bc4:	eb cd 40 80 	pushm	r7,lr
80004bc8:	1a 97       	mov	r7,sp
80004bca:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80004bcc:	f0 1f 00 20 	mcall	80004c4c <INTC_init_interrupts+0x88>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004bd0:	30 08       	mov	r8,0
80004bd2:	ef 48 ff f8 	st.w	r7[-8],r8
80004bd6:	c3 18       	rjmp	80004c38 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004bd8:	30 08       	mov	r8,0
80004bda:	ef 48 ff fc 	st.w	r7[-4],r8
80004bde:	c1 48       	rjmp	80004c06 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80004be0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004be4:	49 b8       	lddpc	r8,80004c50 <INTC_init_interrupts+0x8c>
80004be6:	a1 79       	lsl	r9,0x1
80004be8:	2f f9       	sub	r9,-1
80004bea:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004bee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bf2:	a3 68       	lsl	r8,0x2
80004bf4:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004bf8:	49 79       	lddpc	r9,80004c54 <INTC_init_interrupts+0x90>
80004bfa:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004bfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c00:	2f f8       	sub	r8,-1
80004c02:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80004c06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c0a:	49 28       	lddpc	r8,80004c50 <INTC_init_interrupts+0x8c>
80004c0c:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004c10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c14:	10 39       	cp.w	r9,r8
80004c16:	fe 9b ff e5 	brhi	80004be0 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004c1a:	fe 78 00 00 	mov	r8,-65536
80004c1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c22:	48 eb       	lddpc	r11,80004c58 <INTC_init_interrupts+0x94>
80004c24:	48 ea       	lddpc	r10,80004c5c <INTC_init_interrupts+0x98>
80004c26:	f6 0a 01 0a 	sub	r10,r11,r10
80004c2a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004c2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c32:	2f f8       	sub	r8,-1
80004c34:	ef 48 ff f8 	st.w	r7[-8],r8
80004c38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c3c:	e0 48 00 2e 	cp.w	r8,46
80004c40:	fe 98 ff cc 	brls	80004bd8 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80004c44:	2f ed       	sub	sp,-8
80004c46:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c4a:	00 00       	add	r0,r0
80004c4c:	80 00       	ld.sh	r0,r0[0x0]
80004c4e:	4b b0       	lddpc	r0,80004d38 <cpu_irq_save+0x4>
80004c50:	80 00       	ld.sh	r0,r0[0x0]
80004c52:	aa 60       	st.h	r5[0xc],r0
80004c54:	80 00       	ld.sh	r0,r0[0x0]
80004c56:	4b 38       	lddpc	r8,80004d20 <INTC_register_interrupt+0xc0>
80004c58:	80 00       	ld.sh	r0,r0[0x0]
80004c5a:	a9 04       	ld.d	r4,r4
80004c5c:	80 00       	ld.sh	r0,r0[0x0]
80004c5e:	a8 00       	st.h	r4[0x0],r0

80004c60 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80004c60:	eb cd 40 80 	pushm	r7,lr
80004c64:	1a 97       	mov	r7,sp
80004c66:	20 4d       	sub	sp,16
80004c68:	ef 4c ff f8 	st.w	r7[-8],r12
80004c6c:	ef 4b ff f4 	st.w	r7[-12],r11
80004c70:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80004c74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c78:	a5 98       	lsr	r8,0x5
80004c7a:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80004c7e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004c82:	4a 78       	lddpc	r8,80004d1c <INTC_register_interrupt+0xbc>
80004c84:	a1 79       	lsl	r9,0x1
80004c86:	2f f9       	sub	r9,-1
80004c88:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004c8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c90:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004c94:	a3 68       	lsl	r8,0x2
80004c96:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80004c9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c9e:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80004ca0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004ca4:	58 08       	cp.w	r8,0
80004ca6:	c0 c1       	brne	80004cbe <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004ca8:	fe 78 00 00 	mov	r8,-65536
80004cac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004cb0:	49 cb       	lddpc	r11,80004d20 <INTC_register_interrupt+0xc0>
80004cb2:	49 da       	lddpc	r10,80004d24 <INTC_register_interrupt+0xc4>
80004cb4:	f6 0a 01 0a 	sub	r10,r11,r10
80004cb8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004cbc:	c2 d8       	rjmp	80004d16 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80004cbe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004cc2:	58 18       	cp.w	r8,1
80004cc4:	c0 d1       	brne	80004cde <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004cc6:	fe 78 00 00 	mov	r8,-65536
80004cca:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004cce:	49 7b       	lddpc	r11,80004d28 <INTC_register_interrupt+0xc8>
80004cd0:	49 5a       	lddpc	r10,80004d24 <INTC_register_interrupt+0xc4>
80004cd2:	f6 0a 01 0a 	sub	r10,r11,r10
80004cd6:	bf aa       	sbr	r10,0x1e
80004cd8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004cdc:	c1 d8       	rjmp	80004d16 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80004cde:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004ce2:	58 28       	cp.w	r8,2
80004ce4:	c0 d1       	brne	80004cfe <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80004ce6:	fe 78 00 00 	mov	r8,-65536
80004cea:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004cee:	49 0b       	lddpc	r11,80004d2c <INTC_register_interrupt+0xcc>
80004cf0:	48 da       	lddpc	r10,80004d24 <INTC_register_interrupt+0xc4>
80004cf2:	f6 0a 01 0a 	sub	r10,r11,r10
80004cf6:	bf ba       	sbr	r10,0x1f
80004cf8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004cfc:	c0 d8       	rjmp	80004d16 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004cfe:	fe 78 00 00 	mov	r8,-65536
80004d02:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d06:	48 bb       	lddpc	r11,80004d30 <INTC_register_interrupt+0xd0>
80004d08:	48 7a       	lddpc	r10,80004d24 <INTC_register_interrupt+0xc4>
80004d0a:	f6 0a 01 0a 	sub	r10,r11,r10
80004d0e:	ea 1a c0 00 	orh	r10,0xc000
80004d12:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80004d16:	2f cd       	sub	sp,-16
80004d18:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d1c:	80 00       	ld.sh	r0,r0[0x0]
80004d1e:	aa 60       	st.h	r5[0xc],r0
80004d20:	80 00       	ld.sh	r0,r0[0x0]
80004d22:	a9 04       	ld.d	r4,r4
80004d24:	80 00       	ld.sh	r0,r0[0x0]
80004d26:	a8 00       	st.h	r4[0x0],r0
80004d28:	80 00       	ld.sh	r0,r0[0x0]
80004d2a:	a9 12       	ld.d	r2,--r4
80004d2c:	80 00       	ld.sh	r0,r0[0x0]
80004d2e:	a9 20       	st.d	r4++,r0
80004d30:	80 00       	ld.sh	r0,r0[0x0]
80004d32:	a9 2e       	st.d	r4++,lr

80004d34 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80004d34:	eb cd 40 80 	pushm	r7,lr
80004d38:	1a 97       	mov	r7,sp
80004d3a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004d3c:	e1 b8 00 00 	mfsr	r8,0x0
80004d40:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80004d44:	d3 03       	ssrf	0x10

	return flags;
80004d46:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80004d4a:	10 9c       	mov	r12,r8
80004d4c:	2f fd       	sub	sp,-4
80004d4e:	e3 cd 80 80 	ldm	sp++,r7,pc

80004d52 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004d52:	eb cd 40 80 	pushm	r7,lr
80004d56:	1a 97       	mov	r7,sp
80004d58:	20 1d       	sub	sp,4
80004d5a:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004d5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d62:	e6 18 00 01 	andh	r8,0x1,COH
80004d66:	5f 08       	sreq	r8
80004d68:	5c 58       	castu.b	r8
}
80004d6a:	10 9c       	mov	r12,r8
80004d6c:	2f fd       	sub	sp,-4
80004d6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d72:	d7 03       	nop

80004d74 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80004d74:	eb cd 40 80 	pushm	r7,lr
80004d78:	1a 97       	mov	r7,sp
80004d7a:	20 1d       	sub	sp,4
80004d7c:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004d80:	ee fc ff fc 	ld.w	r12,r7[-4]
80004d84:	f0 1f 00 05 	mcall	80004d98 <cpu_irq_restore+0x24>
80004d88:	18 98       	mov	r8,r12
80004d8a:	58 08       	cp.w	r8,0
80004d8c:	c0 20       	breq	80004d90 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80004d8e:	d5 03       	csrf	0x10
   }

	barrier();
}
80004d90:	2f fd       	sub	sp,-4
80004d92:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d96:	00 00       	add	r0,r0
80004d98:	80 00       	ld.sh	r0,r0[0x0]
80004d9a:	4d 52       	lddpc	r2,80004eec <twim_set_speed+0xc>

80004d9c <twim_master_interrupt_handler>:
/**
 * \internal
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80004d9c:	eb cd 40 80 	pushm	r7,lr
80004da0:	1a 97       	mov	r7,sp
80004da2:	20 1d       	sub	sp,4
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80004da4:	4c 68       	lddpc	r8,80004ebc <twim_master_interrupt_handler+0x120>
80004da6:	70 08       	ld.w	r8,r8[0x0]
80004da8:	70 79       	ld.w	r9,r8[0x1c]
80004daa:	4c 68       	lddpc	r8,80004ec0 <twim_master_interrupt_handler+0x124>
80004dac:	70 08       	ld.w	r8,r8[0x0]
80004dae:	f3 e8 00 08 	and	r8,r9,r8
80004db2:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80004db6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dba:	e2 18 07 00 	andl	r8,0x700,COH
80004dbe:	c1 e0       	breq	80004dfa <twim_master_interrupt_handler+0x5e>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80004dc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dc4:	e2 18 03 00 	andl	r8,0x300,COH
80004dc8:	c0 30       	breq	80004dce <twim_master_interrupt_handler+0x32>
80004dca:	3f c8       	mov	r8,-4
80004dcc:	c0 28       	rjmp	80004dd0 <twim_master_interrupt_handler+0x34>
80004dce:	3f e8       	mov	r8,-2
80004dd0:	4b d9       	lddpc	r9,80004ec4 <twim_master_interrupt_handler+0x128>
80004dd2:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80004dd4:	4b a8       	lddpc	r8,80004ebc <twim_master_interrupt_handler+0x120>
80004dd6:	70 09       	ld.w	r9,r8[0x0]
80004dd8:	72 38       	ld.w	r8,r9[0xc]
80004dda:	30 0a       	mov	r10,0
80004ddc:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80004de0:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80004de2:	4b 78       	lddpc	r8,80004ebc <twim_master_interrupt_handler+0x120>
80004de4:	70 08       	ld.w	r8,r8[0x0]
80004de6:	3f f9       	mov	r9,-1
80004de8:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80004dea:	4b 58       	lddpc	r8,80004ebc <twim_master_interrupt_handler+0x120>
80004dec:	70 08       	ld.w	r8,r8[0x0]
80004dee:	3f f9       	mov	r9,-1
80004df0:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80004df2:	4b 69       	lddpc	r9,80004ec8 <twim_master_interrupt_handler+0x12c>
80004df4:	30 08       	mov	r8,0
80004df6:	b2 88       	st.b	r9[0x0],r8
80004df8:	c5 e8       	rjmp	80004eb4 <twim_master_interrupt_handler+0x118>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80004dfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dfe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004e02:	5c 58       	castu.b	r8
80004e04:	c2 00       	breq	80004e44 <twim_master_interrupt_handler+0xa8>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80004e06:	4b 28       	lddpc	r8,80004ecc <twim_master_interrupt_handler+0x130>
80004e08:	70 09       	ld.w	r9,r8[0x0]
80004e0a:	4a d8       	lddpc	r8,80004ebc <twim_master_interrupt_handler+0x120>
80004e0c:	70 08       	ld.w	r8,r8[0x0]
80004e0e:	70 58       	ld.w	r8,r8[0x14]
80004e10:	5c 58       	castu.b	r8
80004e12:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80004e14:	4a e8       	lddpc	r8,80004ecc <twim_master_interrupt_handler+0x130>
80004e16:	70 08       	ld.w	r8,r8[0x0]
80004e18:	f0 c9 ff ff 	sub	r9,r8,-1
80004e1c:	4a c8       	lddpc	r8,80004ecc <twim_master_interrupt_handler+0x130>
80004e1e:	91 09       	st.w	r8[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80004e20:	4a c8       	lddpc	r8,80004ed0 <twim_master_interrupt_handler+0x134>
80004e22:	70 08       	ld.w	r8,r8[0x0]
80004e24:	f0 c9 00 01 	sub	r9,r8,1
80004e28:	4a a8       	lddpc	r8,80004ed0 <twim_master_interrupt_handler+0x134>
80004e2a:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80004e2c:	4a 98       	lddpc	r8,80004ed0 <twim_master_interrupt_handler+0x134>
80004e2e:	70 08       	ld.w	r8,r8[0x0]
80004e30:	58 08       	cp.w	r8,0
80004e32:	c4 11       	brne	80004eb4 <twim_master_interrupt_handler+0x118>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80004e34:	4a 28       	lddpc	r8,80004ebc <twim_master_interrupt_handler+0x120>
80004e36:	70 08       	ld.w	r8,r8[0x0]
80004e38:	30 19       	mov	r9,1
80004e3a:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004e3c:	4a 39       	lddpc	r9,80004ec8 <twim_master_interrupt_handler+0x12c>
80004e3e:	30 08       	mov	r8,0
80004e40:	b2 88       	st.b	r9[0x0],r8
80004e42:	c3 98       	rjmp	80004eb4 <twim_master_interrupt_handler+0x118>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80004e44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e48:	e2 18 00 02 	andl	r8,0x2,COH
80004e4c:	c3 40       	breq	80004eb4 <twim_master_interrupt_handler+0x118>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80004e4e:	4a 28       	lddpc	r8,80004ed4 <twim_master_interrupt_handler+0x138>
80004e50:	70 08       	ld.w	r8,r8[0x0]
80004e52:	58 08       	cp.w	r8,0
80004e54:	c0 91       	brne	80004e66 <twim_master_interrupt_handler+0xca>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80004e56:	49 a8       	lddpc	r8,80004ebc <twim_master_interrupt_handler+0x120>
80004e58:	70 08       	ld.w	r8,r8[0x0]
80004e5a:	30 29       	mov	r9,2
80004e5c:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004e5e:	49 b9       	lddpc	r9,80004ec8 <twim_master_interrupt_handler+0x12c>
80004e60:	30 08       	mov	r8,0
80004e62:	b2 88       	st.b	r9[0x0],r8
80004e64:	c2 88       	rjmp	80004eb4 <twim_master_interrupt_handler+0x118>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80004e66:	49 68       	lddpc	r8,80004ebc <twim_master_interrupt_handler+0x120>
80004e68:	70 0a       	ld.w	r10,r8[0x0]
80004e6a:	49 c8       	lddpc	r8,80004ed8 <twim_master_interrupt_handler+0x13c>
80004e6c:	70 08       	ld.w	r8,r8[0x0]
80004e6e:	11 89       	ld.ub	r9,r8[0x0]
80004e70:	5c 59       	castu.b	r9
80004e72:	95 69       	st.w	r10[0x18],r9
80004e74:	f0 c9 ff ff 	sub	r9,r8,-1
80004e78:	49 88       	lddpc	r8,80004ed8 <twim_master_interrupt_handler+0x13c>
80004e7a:	91 09       	st.w	r8[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80004e7c:	49 68       	lddpc	r8,80004ed4 <twim_master_interrupt_handler+0x138>
80004e7e:	70 08       	ld.w	r8,r8[0x0]
80004e80:	f0 c9 00 01 	sub	r9,r8,1
80004e84:	49 48       	lddpc	r8,80004ed4 <twim_master_interrupt_handler+0x138>
80004e86:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80004e88:	49 38       	lddpc	r8,80004ed4 <twim_master_interrupt_handler+0x138>
80004e8a:	70 08       	ld.w	r8,r8[0x0]
80004e8c:	58 08       	cp.w	r8,0
80004e8e:	c1 31       	brne	80004eb4 <twim_master_interrupt_handler+0x118>
				// Check for next transfer
				if(twim_next) {
80004e90:	48 e8       	lddpc	r8,80004ec8 <twim_master_interrupt_handler+0x12c>
80004e92:	11 88       	ld.ub	r8,r8[0x0]
80004e94:	5c 58       	castu.b	r8
80004e96:	c0 f0       	breq	80004eb4 <twim_master_interrupt_handler+0x118>
					twim_next = false;
80004e98:	48 c9       	lddpc	r9,80004ec8 <twim_master_interrupt_handler+0x12c>
80004e9a:	30 08       	mov	r8,0
80004e9c:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80004e9e:	49 08       	lddpc	r8,80004edc <twim_master_interrupt_handler+0x140>
80004ea0:	70 08       	ld.w	r8,r8[0x0]
80004ea2:	70 39       	ld.w	r9,r8[0xc]
80004ea4:	48 c8       	lddpc	r8,80004ed4 <twim_master_interrupt_handler+0x138>
80004ea6:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80004ea8:	48 d8       	lddpc	r8,80004edc <twim_master_interrupt_handler+0x140>
80004eaa:	70 08       	ld.w	r8,r8[0x0]
80004eac:	70 28       	ld.w	r8,r8[0x8]
80004eae:	10 99       	mov	r9,r8
80004eb0:	48 a8       	lddpc	r8,80004ed8 <twim_master_interrupt_handler+0x13c>
80004eb2:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80004eb4:	2f fd       	sub	sp,-4
80004eb6:	e3 cd 40 80 	ldm	sp++,r7,lr
80004eba:	d6 03       	rete
80004ebc:	00 00       	add	r0,r0
80004ebe:	02 88       	andn	r8,r1
80004ec0:	00 00       	add	r0,r0
80004ec2:	02 a0       	st.w	r1++,r0
80004ec4:	00 00       	add	r0,r0
80004ec6:	02 94       	mov	r4,r1
80004ec8:	00 00       	add	r0,r0
80004eca:	02 a8       	st.w	r1++,r8
80004ecc:	00 00       	add	r0,r0
80004ece:	02 90       	mov	r0,r1
80004ed0:	00 00       	add	r0,r0
80004ed2:	02 9c       	mov	r12,r1
80004ed4:	00 00       	add	r0,r0
80004ed6:	02 98       	mov	r8,r1
80004ed8:	00 00       	add	r0,r0
80004eda:	02 8c       	andn	r12,r1
80004edc:	00 00       	add	r0,r0
80004ede:	02 a4       	st.w	r1++,r4

80004ee0 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80004ee0:	eb cd 40 80 	pushm	r7,lr
80004ee4:	1a 97       	mov	r7,sp
80004ee6:	20 5d       	sub	sp,20
80004ee8:	ef 4c ff f4 	st.w	r7[-12],r12
80004eec:	ef 4b ff f0 	st.w	r7[-16],r11
80004ef0:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
80004ef4:	30 08       	mov	r8,0
80004ef6:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
80004efa:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004efe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004f02:	f0 09 0d 08 	divu	r8,r8,r9
80004f06:	a1 98       	lsr	r8,0x1
80004f08:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004f0c:	c0 b8       	rjmp	80004f22 <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
80004f0e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004f12:	2f f8       	sub	r8,-1
80004f14:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
80004f18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f1c:	a1 98       	lsr	r8,0x1
80004f1e:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004f22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f26:	e0 48 00 ff 	cp.w	r8,255
80004f2a:	e0 88 00 09 	brls	80004f3c <twim_set_speed+0x5c>
80004f2e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f32:	30 78       	mov	r8,7
80004f34:	f0 09 18 00 	cp.b	r9,r8
80004f38:	fe 98 ff eb 	brls	80004f0e <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80004f3c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f40:	30 78       	mov	r8,7
80004f42:	f0 09 18 00 	cp.b	r9,r8
80004f46:	e0 88 00 04 	brls	80004f4e <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
80004f4a:	3f 88       	mov	r8,-8
80004f4c:	c1 a8       	rjmp	80004f80 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004f4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f52:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80004f56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f5a:	a1 98       	lsr	r8,0x1
80004f5c:	ee fa ff f8 	ld.w	r10,r7[-8]
80004f60:	f4 08 01 08 	sub	r8,r10,r8
80004f64:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
80004f66:	10 49       	or	r9,r8
80004f68:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004f6c:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
80004f6e:	10 49       	or	r9,r8
80004f70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f74:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004f76:	10 49       	or	r9,r8
80004f78:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004f7c:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
80004f7e:	30 08       	mov	r8,0
}
80004f80:	10 9c       	mov	r12,r8
80004f82:	2f bd       	sub	sp,-20
80004f84:	e3 cd 80 80 	ldm	sp++,r7,pc

80004f88 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80004f88:	eb cd 40 80 	pushm	r7,lr
80004f8c:	1a 97       	mov	r7,sp
80004f8e:	20 4d       	sub	sp,16
80004f90:	ef 4c ff f4 	st.w	r7[-12],r12
80004f94:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80004f98:	e1 b8 00 00 	mfsr	r8,0x0
80004f9c:	10 9c       	mov	r12,r8
80004f9e:	f0 1f 00 37 	mcall	80005078 <twim_master_init+0xf0>
80004fa2:	18 98       	mov	r8,r12
80004fa4:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80004fa8:	4b 58       	lddpc	r8,8000507c <twim_master_init+0xf4>
80004faa:	30 09       	mov	r9,0
80004fac:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80004fae:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80004fb2:	30 08       	mov	r8,0
80004fb4:	f0 09 18 00 	cp.b	r9,r8
80004fb8:	c0 20       	breq	80004fbc <twim_master_init+0x34>
		cpu_irq_disable ();
80004fba:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80004fbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004fc0:	3f f9       	mov	r9,-1
80004fc2:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80004fc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004fc8:	30 19       	mov	r9,1
80004fca:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80004fcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004fd0:	e0 69 00 80 	mov	r9,128
80004fd4:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
80004fd6:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80004fda:	30 08       	mov	r8,0
80004fdc:	f0 09 18 00 	cp.b	r9,r8
80004fe0:	c0 20       	breq	80004fe4 <twim_master_init+0x5c>
		cpu_irq_enable ();
80004fe2:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80004fe4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004fe8:	3f f9       	mov	r9,-1
80004fea:	91 b9       	st.w	r8[0x2c],r9

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
80004fec:	f0 1f 00 25 	mcall	80005080 <twim_master_init+0xf8>
80004ff0:	18 98       	mov	r8,r12
80004ff2:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
80004ff6:	30 1a       	mov	r10,1
80004ff8:	e0 6b 03 20 	mov	r11,800
80004ffc:	4a 2c       	lddpc	r12,80005084 <twim_master_init+0xfc>
80004ffe:	f0 1f 00 23 	mcall	80005088 <twim_master_init+0x100>
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
80005002:	ee fc ff fc 	ld.w	r12,r7[-4]
80005006:	f0 1f 00 22 	mcall	8000508c <twim_master_init+0x104>

	if (opt->smbus) {
8000500a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000500e:	f1 38 00 0c 	ld.ub	r8,r8[12]
80005012:	58 08       	cp.w	r8,0
80005014:	c0 90       	breq	80005026 <twim_master_init+0x9e>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80005016:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000501a:	31 09       	mov	r9,16
8000501c:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
8000501e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005022:	3f f9       	mov	r9,-1
80005024:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80005026:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000502a:	70 09       	ld.w	r9,r8[0x0]
8000502c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005030:	70 18       	ld.w	r8,r8[0x4]
80005032:	12 9a       	mov	r10,r9
80005034:	10 9b       	mov	r11,r8
80005036:	ee fc ff f4 	ld.w	r12,r7[-12]
8000503a:	f0 1f 00 16 	mcall	80005090 <twim_master_init+0x108>
8000503e:	18 98       	mov	r8,r12
80005040:	5b 88       	cp.w	r8,-8
80005042:	c0 31       	brne	80005048 <twim_master_init+0xc0>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
80005044:	3f 88       	mov	r8,-8
80005046:	c1 48       	rjmp	8000506e <twim_master_init+0xe6>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80005048:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000504c:	70 28       	ld.w	r8,r8[0x8]
8000504e:	10 9b       	mov	r11,r8
80005050:	ee fc ff f4 	ld.w	r12,r7[-12]
80005054:	f0 1f 00 10 	mcall	80005094 <twim_master_init+0x10c>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005058:	48 98       	lddpc	r8,8000507c <twim_master_init+0xf4>
8000505a:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
8000505c:	5b c8       	cp.w	r8,-4
8000505e:	c0 50       	breq	80005068 <twim_master_init+0xe0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005060:	48 78       	lddpc	r8,8000507c <twim_master_init+0xf4>
80005062:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80005064:	5b e8       	cp.w	r8,-2
80005066:	c0 31       	brne	8000506c <twim_master_init+0xe4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005068:	3f f8       	mov	r8,-1
8000506a:	c0 28       	rjmp	8000506e <twim_master_init+0xe6>
	}
	return STATUS_OK;
8000506c:	30 08       	mov	r8,0
}
8000506e:	10 9c       	mov	r12,r8
80005070:	2f cd       	sub	sp,-16
80005072:	e3 cd 80 80 	ldm	sp++,r7,pc
80005076:	00 00       	add	r0,r0
80005078:	80 00       	ld.sh	r0,r0[0x0]
8000507a:	4d 52       	lddpc	r2,800051cc <twim_read_packet+0xb8>
8000507c:	00 00       	add	r0,r0
8000507e:	02 94       	mov	r4,r1
80005080:	80 00       	ld.sh	r0,r0[0x0]
80005082:	4d 34       	lddpc	r4,800051cc <twim_read_packet+0xb8>
80005084:	80 00       	ld.sh	r0,r0[0x0]
80005086:	4d 9c       	lddpc	r12,800051e8 <twim_read_packet+0xd4>
80005088:	80 00       	ld.sh	r0,r0[0x0]
8000508a:	4c 60       	lddpc	r0,800051a0 <twim_read_packet+0x8c>
8000508c:	80 00       	ld.sh	r0,r0[0x0]
8000508e:	4d 74       	lddpc	r4,800051e8 <twim_read_packet+0xd4>
80005090:	80 00       	ld.sh	r0,r0[0x0]
80005092:	4e e0       	lddpc	r0,80005248 <twim_read_packet+0x134>
80005094:	80 00       	ld.sh	r0,r0[0x0]
80005096:	50 dc       	stdsp	sp[0x34],r12

80005098 <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
80005098:	eb cd 40 80 	pushm	r7,lr
8000509c:	1a 97       	mov	r7,sp
8000509e:	20 2d       	sub	sp,8
800050a0:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
800050a4:	e1 b8 00 00 	mfsr	r8,0x0
800050a8:	10 9c       	mov	r12,r8
800050aa:	f0 1f 00 0c 	mcall	800050d8 <twim_disable_interrupt+0x40>
800050ae:	18 98       	mov	r8,r12
800050b0:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
800050b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800050b8:	30 08       	mov	r8,0
800050ba:	f0 09 18 00 	cp.b	r9,r8
800050be:	c0 20       	breq	800050c2 <twim_disable_interrupt+0x2a>
		cpu_irq_disable ();
800050c0:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
800050c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050c6:	3f f9       	mov	r9,-1
800050c8:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
800050ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050ce:	3f f9       	mov	r9,-1
800050d0:	91 b9       	st.w	r8[0x2c],r9
}
800050d2:	2f ed       	sub	sp,-8
800050d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800050d8:	80 00       	ld.sh	r0,r0[0x0]
800050da:	4d 52       	lddpc	r2,8000522c <twim_read_packet+0x118>

800050dc <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
800050dc:	eb cd 40 80 	pushm	r7,lr
800050e0:	1a 97       	mov	r7,sp
800050e2:	20 3d       	sub	sp,12
800050e4:	ef 4c ff f8 	st.w	r7[-8],r12
800050e8:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
800050ec:	30 08       	mov	r8,0
800050ee:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
800050f2:	ee cb 00 04 	sub	r11,r7,4
800050f6:	30 08       	mov	r8,0
800050f8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800050fc:	30 0a       	mov	r10,0
800050fe:	ee fc ff f8 	ld.w	r12,r7[-8]
80005102:	f0 1f 00 04 	mcall	80005110 <twim_probe+0x34>
80005106:	18 98       	mov	r8,r12
}
80005108:	10 9c       	mov	r12,r8
8000510a:	2f dd       	sub	sp,-12
8000510c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005110:	80 00       	ld.sh	r0,r0[0x0]
80005112:	53 cc       	stdsp	sp[0xf0],r12

80005114 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80005114:	eb cd 40 80 	pushm	r7,lr
80005118:	1a 97       	mov	r7,sp
8000511a:	20 2d       	sub	sp,8
8000511c:	ef 4c ff fc 	st.w	r7[-4],r12
80005120:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005124:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005128:	30 29       	mov	r9,2
8000512a:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000512c:	4c f8       	lddpc	r8,80005268 <twim_read_packet+0x154>
8000512e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005132:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80005134:	4c d8       	lddpc	r8,80005268 <twim_read_packet+0x154>
80005136:	70 08       	ld.w	r8,r8[0x0]
80005138:	10 9c       	mov	r12,r8
8000513a:	f0 1f 00 4d 	mcall	8000526c <twim_read_packet+0x158>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
8000513e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005142:	70 28       	ld.w	r8,r8[0x8]
80005144:	10 99       	mov	r9,r8
80005146:	4c b8       	lddpc	r8,80005270 <twim_read_packet+0x15c>
80005148:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8000514a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000514e:	70 39       	ld.w	r9,r8[0xc]
80005150:	4c 98       	lddpc	r8,80005274 <twim_read_packet+0x160>
80005152:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80005154:	4c 99       	lddpc	r9,80005278 <twim_read_packet+0x164>
80005156:	30 08       	mov	r8,0
80005158:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000515a:	4c 98       	lddpc	r8,8000527c <twim_read_packet+0x168>
8000515c:	30 09       	mov	r9,0
8000515e:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
80005160:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005164:	11 f8       	ld.ub	r8,r8[0x7]
80005166:	58 08       	cp.w	r8,0
80005168:	c3 f0       	breq	800051e6 <twim_read_packet+0xd2>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8000516a:	4c 08       	lddpc	r8,80005268 <twim_read_packet+0x154>
8000516c:	70 08       	ld.w	r8,r8[0x0]
8000516e:	30 19       	mov	r9,1
80005170:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
80005172:	4b e8       	lddpc	r8,80005268 <twim_read_packet+0x154>
80005174:	70 08       	ld.w	r8,r8[0x0]
80005176:	e0 69 00 80 	mov	r9,128
8000517a:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
8000517c:	4b b8       	lddpc	r8,80005268 <twim_read_packet+0x154>
8000517e:	70 08       	ld.w	r8,r8[0x0]
80005180:	30 29       	mov	r9,2
80005182:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80005184:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005188:	2f c8       	sub	r8,-4
8000518a:	10 99       	mov	r9,r8
8000518c:	4b d8       	lddpc	r8,80005280 <twim_read_packet+0x16c>
8000518e:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80005190:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005194:	11 f8       	ld.ub	r8,r8[0x7]
80005196:	10 99       	mov	r9,r8
80005198:	4b b8       	lddpc	r8,80005284 <twim_read_packet+0x170>
8000519a:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
8000519c:	4b b8       	lddpc	r8,80005288 <twim_read_packet+0x174>
8000519e:	e0 69 07 03 	mov	r9,1795
800051a2:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800051a4:	4b 18       	lddpc	r8,80005268 <twim_read_packet+0x154>
800051a6:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
800051a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800051ac:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800051ae:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800051b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800051b6:	13 f9       	ld.ub	r9,r9[0x7]
800051b8:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
800051ba:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800051be:	e8 19 a0 00 	orl	r9,0xa000
800051c2:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
800051c4:	4a 98       	lddpc	r8,80005268 <twim_read_packet+0x154>
800051c6:	70 08       	ld.w	r8,r8[0x0]
800051c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800051cc:	72 09       	ld.w	r9,r9[0x0]
800051ce:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
800051d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800051d6:	72 39       	ld.w	r9,r9[0xc]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800051d8:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
800051da:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
800051de:	e8 19 e0 01 	orl	r9,0xe001
800051e2:	91 49       	st.w	r8[0x10],r9
800051e4:	c1 88       	rjmp	80005214 <twim_read_packet+0x100>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800051e6:	4a 88       	lddpc	r8,80005284 <twim_read_packet+0x170>
800051e8:	30 09       	mov	r9,0
800051ea:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800051ec:	4a 78       	lddpc	r8,80005288 <twim_read_packet+0x174>
800051ee:	e0 69 07 01 	mov	r9,1793
800051f2:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800051f4:	49 d8       	lddpc	r8,80005268 <twim_read_packet+0x154>
800051f6:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
800051f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800051fc:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800051fe:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005202:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005206:	72 39       	ld.w	r9,r9[0xc]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005208:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000520a:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000520e:	e8 19 e0 01 	orl	r9,0xe001
80005212:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80005214:	49 58       	lddpc	r8,80005268 <twim_read_packet+0x154>
80005216:	70 08       	ld.w	r8,r8[0x0]
80005218:	49 c9       	lddpc	r9,80005288 <twim_read_packet+0x174>
8000521a:	72 09       	ld.w	r9,r9[0x0]
8000521c:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000521e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005222:	30 19       	mov	r9,1
80005224:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
80005226:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80005228:	c0 38       	rjmp	8000522e <twim_read_packet+0x11a>
		cpu_relax();
8000522a:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8000522e:	49 48       	lddpc	r8,8000527c <twim_read_packet+0x168>
80005230:	70 08       	ld.w	r8,r8[0x0]
80005232:	58 08       	cp.w	r8,0
80005234:	c0 61       	brne	80005240 <twim_read_packet+0x12c>
80005236:	f0 1f 00 16 	mcall	8000528c <twim_read_packet+0x178>
8000523a:	18 98       	mov	r8,r12
8000523c:	58 08       	cp.w	r8,0
8000523e:	cf 60       	breq	8000522a <twim_read_packet+0x116>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005240:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005244:	30 29       	mov	r9,2
80005246:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005248:	48 d8       	lddpc	r8,8000527c <twim_read_packet+0x168>
8000524a:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8000524c:	5b c8       	cp.w	r8,-4
8000524e:	c0 50       	breq	80005258 <twim_read_packet+0x144>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005250:	48 b8       	lddpc	r8,8000527c <twim_read_packet+0x168>
80005252:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80005254:	5b e8       	cp.w	r8,-2
80005256:	c0 31       	brne	8000525c <twim_read_packet+0x148>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005258:	3f f8       	mov	r8,-1
8000525a:	c0 28       	rjmp	8000525e <twim_read_packet+0x14a>
	}
	return STATUS_OK;
8000525c:	30 08       	mov	r8,0
}
8000525e:	10 9c       	mov	r12,r8
80005260:	2f ed       	sub	sp,-8
80005262:	e3 cd 80 80 	ldm	sp++,r7,pc
80005266:	00 00       	add	r0,r0
80005268:	00 00       	add	r0,r0
8000526a:	02 88       	andn	r8,r1
8000526c:	80 00       	ld.sh	r0,r0[0x0]
8000526e:	50 98       	stdsp	sp[0x24],r8
80005270:	00 00       	add	r0,r0
80005272:	02 90       	mov	r0,r1
80005274:	00 00       	add	r0,r0
80005276:	02 9c       	mov	r12,r1
80005278:	00 00       	add	r0,r0
8000527a:	02 a8       	st.w	r1++,r8
8000527c:	00 00       	add	r0,r0
8000527e:	02 94       	mov	r4,r1
80005280:	00 00       	add	r0,r0
80005282:	02 8c       	andn	r12,r1
80005284:	00 00       	add	r0,r0
80005286:	02 98       	mov	r8,r1
80005288:	00 00       	add	r0,r0
8000528a:	02 a0       	st.w	r1++,r0
8000528c:	80 00       	ld.sh	r0,r0[0x0]
8000528e:	54 d0       	stdsp	sp[0x134],r0

80005290 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80005290:	eb cd 40 80 	pushm	r7,lr
80005294:	1a 97       	mov	r7,sp
80005296:	20 2d       	sub	sp,8
80005298:	ef 4c ff fc 	st.w	r7[-4],r12
8000529c:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800052a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052a4:	30 19       	mov	r9,1
800052a6:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800052a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052ac:	e0 69 00 80 	mov	r9,128
800052b0:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800052b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052b6:	30 29       	mov	r9,2
800052b8:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800052ba:	4b c8       	lddpc	r8,800053a8 <twim_write_packet+0x118>
800052bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800052c0:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800052c2:	4b a8       	lddpc	r8,800053a8 <twim_write_packet+0x118>
800052c4:	70 08       	ld.w	r8,r8[0x0]
800052c6:	10 9c       	mov	r12,r8
800052c8:	f0 1f 00 39 	mcall	800053ac <twim_write_packet+0x11c>
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800052cc:	4b 98       	lddpc	r8,800053b0 <twim_write_packet+0x120>
800052ce:	30 09       	mov	r9,0
800052d0:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800052d2:	4b 98       	lddpc	r8,800053b4 <twim_write_packet+0x124>
800052d4:	e0 69 07 02 	mov	r9,1794
800052d8:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
800052da:	4b 89       	lddpc	r9,800053b8 <twim_write_packet+0x128>
800052dc:	30 08       	mov	r8,0
800052de:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
800052e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052e4:	11 f8       	ld.ub	r8,r8[0x7]
800052e6:	58 08       	cp.w	r8,0
800052e8:	c1 50       	breq	80005312 <twim_write_packet+0x82>
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
800052ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052ee:	2f c8       	sub	r8,-4
800052f0:	10 99       	mov	r9,r8
800052f2:	4b 38       	lddpc	r8,800053bc <twim_write_packet+0x12c>
800052f4:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
800052f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052fa:	11 f8       	ld.ub	r8,r8[0x7]
800052fc:	10 99       	mov	r9,r8
800052fe:	4b 18       	lddpc	r8,800053c0 <twim_write_packet+0x130>
80005300:	91 09       	st.w	r8[0x0],r9
		// set next transfer to true
		twim_next = true;
80005302:	4a e9       	lddpc	r9,800053b8 <twim_write_packet+0x128>
80005304:	30 18       	mov	r8,1
80005306:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
80005308:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000530c:	4a e8       	lddpc	r8,800053c4 <twim_write_packet+0x134>
8000530e:	91 09       	st.w	r8[0x0],r9
80005310:	c0 c8       	rjmp	80005328 <twim_write_packet+0x98>
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
80005312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005316:	70 28       	ld.w	r8,r8[0x8]
80005318:	10 99       	mov	r9,r8
8000531a:	4a 98       	lddpc	r8,800053bc <twim_write_packet+0x12c>
8000531c:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
8000531e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005322:	70 39       	ld.w	r9,r8[0xc]
80005324:	4a 78       	lddpc	r8,800053c0 <twim_write_packet+0x130>
80005326:	91 09       	st.w	r8[0x0],r9
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| ((package->length + package->addr_length)
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
80005328:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000532c:	70 08       	ld.w	r8,r8[0x0]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000532e:	f0 09 15 01 	lsl	r9,r8,0x1
			| ((package->length + package->addr_length)
80005332:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005336:	70 3a       	ld.w	r10,r8[0xc]
80005338:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000533c:	11 f8       	ld.ub	r8,r8[0x7]
8000533e:	f4 08 00 08 	add	r8,r10,r8
80005342:	b1 68       	lsl	r8,0x10
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
80005344:	f3 e8 10 08 	or	r8,r9,r8
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005348:	10 99       	mov	r9,r8
8000534a:	e8 19 e0 00 	orl	r9,0xe000
8000534e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005352:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80005354:	49 58       	lddpc	r8,800053a8 <twim_write_packet+0x118>
80005356:	70 08       	ld.w	r8,r8[0x0]
80005358:	49 79       	lddpc	r9,800053b4 <twim_write_packet+0x124>
8000535a:	72 09       	ld.w	r9,r9[0x0]
8000535c:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8000535e:	49 38       	lddpc	r8,800053a8 <twim_write_packet+0x118>
80005360:	70 08       	ld.w	r8,r8[0x0]
80005362:	30 19       	mov	r9,1
80005364:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
80005366:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80005368:	c0 38       	rjmp	8000536e <twim_write_packet+0xde>
		cpu_relax();
8000536a:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8000536e:	49 18       	lddpc	r8,800053b0 <twim_write_packet+0x120>
80005370:	70 08       	ld.w	r8,r8[0x0]
80005372:	58 08       	cp.w	r8,0
80005374:	c0 61       	brne	80005380 <twim_write_packet+0xf0>
80005376:	f0 1f 00 15 	mcall	800053c8 <twim_write_packet+0x138>
8000537a:	18 98       	mov	r8,r12
8000537c:	58 08       	cp.w	r8,0
8000537e:	cf 60       	breq	8000536a <twim_write_packet+0xda>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005380:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005384:	30 29       	mov	r9,2
80005386:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005388:	48 a8       	lddpc	r8,800053b0 <twim_write_packet+0x120>
8000538a:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8000538c:	5b c8       	cp.w	r8,-4
8000538e:	c0 50       	breq	80005398 <twim_write_packet+0x108>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005390:	48 88       	lddpc	r8,800053b0 <twim_write_packet+0x120>
80005392:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80005394:	5b e8       	cp.w	r8,-2
80005396:	c0 31       	brne	8000539c <twim_write_packet+0x10c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005398:	3f f8       	mov	r8,-1
8000539a:	c0 28       	rjmp	8000539e <twim_write_packet+0x10e>
	}
	return STATUS_OK;
8000539c:	30 08       	mov	r8,0
}
8000539e:	10 9c       	mov	r12,r8
800053a0:	2f ed       	sub	sp,-8
800053a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800053a6:	00 00       	add	r0,r0
800053a8:	00 00       	add	r0,r0
800053aa:	02 88       	andn	r8,r1
800053ac:	80 00       	ld.sh	r0,r0[0x0]
800053ae:	50 98       	stdsp	sp[0x24],r8
800053b0:	00 00       	add	r0,r0
800053b2:	02 94       	mov	r4,r1
800053b4:	00 00       	add	r0,r0
800053b6:	02 a0       	st.w	r1++,r0
800053b8:	00 00       	add	r0,r0
800053ba:	02 a8       	st.w	r1++,r8
800053bc:	00 00       	add	r0,r0
800053be:	02 8c       	andn	r12,r1
800053c0:	00 00       	add	r0,r0
800053c2:	02 98       	mov	r8,r1
800053c4:	00 00       	add	r0,r0
800053c6:	02 a4       	st.w	r1++,r4
800053c8:	80 00       	ld.sh	r0,r0[0x0]
800053ca:	54 d0       	stdsp	sp[0x134],r0

800053cc <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
800053cc:	eb cd 40 80 	pushm	r7,lr
800053d0:	1a 97       	mov	r7,sp
800053d2:	20 5d       	sub	sp,20
800053d4:	ef 4c ff fc 	st.w	r7[-4],r12
800053d8:	ef 4b ff f8 	st.w	r7[-8],r11
800053dc:	ef 4a ff f4 	st.w	r7[-12],r10
800053e0:	ef 49 ff f0 	st.w	r7[-16],r9
800053e4:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800053e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053ec:	30 19       	mov	r9,1
800053ee:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800053f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053f4:	e0 69 00 80 	mov	r9,128
800053f8:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800053fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053fe:	30 29       	mov	r9,2
80005400:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80005402:	4a c8       	lddpc	r8,800054b0 <twim_write+0xe4>
80005404:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005408:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000540a:	4a a8       	lddpc	r8,800054b0 <twim_write+0xe4>
8000540c:	70 08       	ld.w	r8,r8[0x0]
8000540e:	10 9c       	mov	r12,r8
80005410:	f0 1f 00 29 	mcall	800054b4 <twim_write+0xe8>
	// get a pointer to applicative data
	twim_tx_data = buffer;
80005414:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005418:	4a 88       	lddpc	r8,800054b8 <twim_write+0xec>
8000541a:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8000541c:	4a 88       	lddpc	r8,800054bc <twim_write+0xf0>
8000541e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005422:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
80005424:	4a 79       	lddpc	r9,800054c0 <twim_write+0xf4>
80005426:	30 08       	mov	r8,0
80005428:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000542a:	4a 78       	lddpc	r8,800054c4 <twim_write+0xf8>
8000542c:	30 09       	mov	r9,0
8000542e:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80005430:	4a 08       	lddpc	r8,800054b0 <twim_write+0xe4>
80005432:	70 08       	ld.w	r8,r8[0x0]
80005434:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005438:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8000543c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005440:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
80005442:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
80005444:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80005448:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000544a:	f5 e9 10 09 	or	r9,r10,r9
8000544e:	e8 19 e0 00 	orl	r9,0xe000
80005452:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80005454:	49 d8       	lddpc	r8,800054c8 <twim_write+0xfc>
80005456:	e0 69 03 02 	mov	r9,770
8000545a:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8000545c:	49 58       	lddpc	r8,800054b0 <twim_write+0xe4>
8000545e:	70 08       	ld.w	r8,r8[0x0]
80005460:	49 a9       	lddpc	r9,800054c8 <twim_write+0xfc>
80005462:	72 09       	ld.w	r9,r9[0x0]
80005464:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80005466:	49 38       	lddpc	r8,800054b0 <twim_write+0xe4>
80005468:	70 08       	ld.w	r8,r8[0x0]
8000546a:	30 19       	mov	r9,1
8000546c:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8000546e:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80005470:	c0 38       	rjmp	80005476 <twim_write+0xaa>
		cpu_relax();
80005472:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80005476:	49 48       	lddpc	r8,800054c4 <twim_write+0xf8>
80005478:	70 08       	ld.w	r8,r8[0x0]
8000547a:	58 08       	cp.w	r8,0
8000547c:	c0 61       	brne	80005488 <twim_write+0xbc>
8000547e:	f0 1f 00 14 	mcall	800054cc <twim_write+0x100>
80005482:	18 98       	mov	r8,r12
80005484:	58 08       	cp.w	r8,0
80005486:	cf 60       	breq	80005472 <twim_write+0xa6>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000548c:	30 29       	mov	r9,2
8000548e:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005490:	48 d8       	lddpc	r8,800054c4 <twim_write+0xf8>
80005492:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80005494:	5b c8       	cp.w	r8,-4
80005496:	c0 50       	breq	800054a0 <twim_write+0xd4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005498:	48 b8       	lddpc	r8,800054c4 <twim_write+0xf8>
8000549a:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8000549c:	5b e8       	cp.w	r8,-2
8000549e:	c0 31       	brne	800054a4 <twim_write+0xd8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
800054a0:	3f f8       	mov	r8,-1
800054a2:	c0 28       	rjmp	800054a6 <twim_write+0xda>
	}
	return STATUS_OK;
800054a4:	30 08       	mov	r8,0
}
800054a6:	10 9c       	mov	r12,r8
800054a8:	2f bd       	sub	sp,-20
800054aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800054ae:	00 00       	add	r0,r0
800054b0:	00 00       	add	r0,r0
800054b2:	02 88       	andn	r8,r1
800054b4:	80 00       	ld.sh	r0,r0[0x0]
800054b6:	50 98       	stdsp	sp[0x24],r8
800054b8:	00 00       	add	r0,r0
800054ba:	02 8c       	andn	r12,r1
800054bc:	00 00       	add	r0,r0
800054be:	02 98       	mov	r8,r1
800054c0:	00 00       	add	r0,r0
800054c2:	02 a8       	st.w	r1++,r8
800054c4:	00 00       	add	r0,r0
800054c6:	02 94       	mov	r4,r1
800054c8:	00 00       	add	r0,r0
800054ca:	02 a0       	st.w	r1++,r0
800054cc:	80 00       	ld.sh	r0,r0[0x0]
800054ce:	54 d0       	stdsp	sp[0x134],r0

800054d0 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
800054d0:	eb cd 40 80 	pushm	r7,lr
800054d4:	1a 97       	mov	r7,sp
800054d6:	20 1d       	sub	sp,4
	uint32_t status = twim_inst->sr;
800054d8:	48 98       	lddpc	r8,800054fc <twim_status+0x2c>
800054da:	70 08       	ld.w	r8,r8[0x0]
800054dc:	70 78       	ld.w	r8,r8[0x1c]
800054de:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
800054e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054e6:	e2 18 00 10 	andl	r8,0x10,COH
800054ea:	c0 30       	breq	800054f0 <twim_status+0x20>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif
		) {
		return 1;
800054ec:	30 18       	mov	r8,1
800054ee:	c0 28       	rjmp	800054f2 <twim_status+0x22>
	} else {
		return 0;
800054f0:	30 08       	mov	r8,0
	}
}
800054f2:	10 9c       	mov	r12,r8
800054f4:	2f fd       	sub	sp,-4
800054f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800054fa:	00 00       	add	r0,r0
800054fc:	00 00       	add	r0,r0
800054fe:	02 88       	andn	r8,r1

80005500 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005500:	eb cd 40 80 	pushm	r7,lr
80005504:	1a 97       	mov	r7,sp
80005506:	20 1d       	sub	sp,4
80005508:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000550c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005510:	e6 18 00 01 	andh	r8,0x1,COH
80005514:	5f 08       	sreq	r8
80005516:	5c 58       	castu.b	r8
}
80005518:	10 9c       	mov	r12,r8
8000551a:	2f fd       	sub	sp,-4
8000551c:	e3 cd 80 80 	ldm	sp++,r7,pc

80005520 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80005520:	eb cd 40 80 	pushm	r7,lr
80005524:	1a 97       	mov	r7,sp
80005526:	20 7d       	sub	sp,28
80005528:	ef 4c ff ec 	st.w	r7[-20],r12
8000552c:	ef 4b ff e8 	st.w	r7[-24],r11
80005530:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80005534:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005538:	f0 09 15 04 	lsl	r9,r8,0x4
8000553c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005540:	10 39       	cp.w	r9,r8
80005542:	e0 8b 00 04 	brhi	8000554a <usart_set_async_baudrate+0x2a>
80005546:	31 08       	mov	r8,16
80005548:	c0 28       	rjmp	8000554c <usart_set_async_baudrate+0x2c>
8000554a:	30 88       	mov	r8,8
8000554c:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80005550:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005554:	f0 09 15 03 	lsl	r9,r8,0x3
80005558:	ee fa ff f0 	ld.w	r10,r7[-16]
8000555c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005560:	f4 08 02 48 	mul	r8,r10,r8
80005564:	a1 98       	lsr	r8,0x1
80005566:	f2 08 00 08 	add	r8,r9,r8
8000556a:	ee fa ff f0 	ld.w	r10,r7[-16]
8000556e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80005572:	f4 09 02 49 	mul	r9,r10,r9
80005576:	f0 09 0d 08 	divu	r8,r8,r9
8000557a:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
8000557e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005582:	a3 98       	lsr	r8,0x3
80005584:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80005588:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000558c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80005590:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80005594:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005598:	58 08       	cp.w	r8,0
8000559a:	c0 70       	breq	800055a8 <usart_set_async_baudrate+0x88>
8000559c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800055a0:	e0 48 ff ff 	cp.w	r8,65535
800055a4:	e0 88 00 04 	brls	800055ac <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
800055a8:	30 18       	mov	r8,1
800055aa:	c2 08       	rjmp	800055ea <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
800055ac:	ee f8 ff ec 	ld.w	r8,r7[-20]
800055b0:	70 18       	ld.w	r8,r8[0x4]
800055b2:	10 99       	mov	r9,r8
800055b4:	e4 19 ff f7 	andh	r9,0xfff7
800055b8:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800055bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800055c0:	59 08       	cp.w	r8,16
800055c2:	c0 40       	breq	800055ca <usart_set_async_baudrate+0xaa>
800055c4:	e8 68 00 00 	mov	r8,524288
800055c8:	c0 28       	rjmp	800055cc <usart_set_async_baudrate+0xac>
800055ca:	30 08       	mov	r8,0
800055cc:	10 49       	or	r9,r8
800055ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800055d2:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
800055d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055d8:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800055dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800055e0:	10 49       	or	r9,r8
800055e2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800055e6:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
800055e8:	30 08       	mov	r8,0
}
800055ea:	10 9c       	mov	r12,r8
800055ec:	2f 9d       	sub	sp,-28
800055ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800055f2:	d7 03       	nop

800055f4 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
800055f4:	eb cd 40 80 	pushm	r7,lr
800055f8:	1a 97       	mov	r7,sp
800055fa:	20 2d       	sub	sp,8
800055fc:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80005600:	e1 b8 00 00 	mfsr	r8,0x0
80005604:	10 9c       	mov	r12,r8
80005606:	f0 1f 00 18 	mcall	80005664 <usart_reset+0x70>
8000560a:	18 98       	mov	r8,r12
8000560c:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80005610:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005614:	30 08       	mov	r8,0
80005616:	f0 09 18 00 	cp.b	r9,r8
8000561a:	c0 20       	breq	8000561e <usart_reset+0x2a>
8000561c:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8000561e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005622:	3f f9       	mov	r9,-1
80005624:	91 39       	st.w	r8[0xc],r9
  usart->csr;
80005626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000562a:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
8000562c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005630:	30 08       	mov	r8,0
80005632:	f0 09 18 00 	cp.b	r9,r8
80005636:	c0 20       	breq	8000563a <usart_reset+0x46>
80005638:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8000563a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000563e:	30 09       	mov	r9,0
80005640:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80005642:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005646:	30 09       	mov	r9,0
80005648:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
8000564a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000564e:	30 09       	mov	r9,0
80005650:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80005652:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005656:	ea 69 61 0c 	mov	r9,680204
8000565a:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8000565c:	2f ed       	sub	sp,-8
8000565e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005662:	00 00       	add	r0,r0
80005664:	80 00       	ld.sh	r0,r0[0x0]
80005666:	55 00       	stdsp	sp[0x140],r0

80005668 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80005668:	eb cd 40 80 	pushm	r7,lr
8000566c:	1a 97       	mov	r7,sp
8000566e:	20 3d       	sub	sp,12
80005670:	ef 4c ff fc 	st.w	r7[-4],r12
80005674:	ef 4b ff f8 	st.w	r7[-8],r11
80005678:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8000567c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005680:	f0 1f 00 54 	mcall	800057d0 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80005684:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005688:	58 08       	cp.w	r8,0
8000568a:	c3 90       	breq	800056fc <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
8000568c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005690:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80005692:	30 48       	mov	r8,4
80005694:	f0 09 18 00 	cp.b	r9,r8
80005698:	e0 88 00 32 	brls	800056fc <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
8000569c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056a0:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800056a2:	30 98       	mov	r8,9
800056a4:	f0 09 18 00 	cp.b	r9,r8
800056a8:	e0 8b 00 2a 	brhi	800056fc <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
800056ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056b0:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800056b2:	30 78       	mov	r8,7
800056b4:	f0 09 18 00 	cp.b	r9,r8
800056b8:	e0 8b 00 22 	brhi	800056fc <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
800056bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056c0:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800056c2:	e0 68 01 01 	mov	r8,257
800056c6:	f0 09 19 00 	cp.h	r9,r8
800056ca:	e0 8b 00 19 	brhi	800056fc <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
800056ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056d2:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800056d6:	30 38       	mov	r8,3
800056d8:	f0 09 18 00 	cp.b	r9,r8
800056dc:	e0 8b 00 10 	brhi	800056fc <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800056e0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800056e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056e8:	70 08       	ld.w	r8,r8[0x0]
800056ea:	12 9a       	mov	r10,r9
800056ec:	10 9b       	mov	r11,r8
800056ee:	ee fc ff fc 	ld.w	r12,r7[-4]
800056f2:	f0 1f 00 39 	mcall	800057d4 <usart_init_rs232+0x16c>
800056f6:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800056f8:	58 18       	cp.w	r8,1
800056fa:	c0 31       	brne	80005700 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
800056fc:	30 18       	mov	r8,1
800056fe:	c6 48       	rjmp	800057c6 <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80005700:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005704:	11 c9       	ld.ub	r9,r8[0x4]
80005706:	30 98       	mov	r8,9
80005708:	f0 09 18 00 	cp.b	r9,r8
8000570c:	c0 a1       	brne	80005720 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8000570e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005712:	70 18       	ld.w	r8,r8[0x4]
80005714:	10 99       	mov	r9,r8
80005716:	b1 b9       	sbr	r9,0x11
80005718:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000571c:	91 19       	st.w	r8[0x4],r9
8000571e:	c0 d8       	rjmp	80005738 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80005720:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005724:	70 19       	ld.w	r9,r8[0x4]
80005726:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000572a:	11 c8       	ld.ub	r8,r8[0x4]
8000572c:	20 58       	sub	r8,5
8000572e:	a7 68       	lsl	r8,0x6
80005730:	10 49       	or	r9,r8
80005732:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005736:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80005738:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000573c:	70 19       	ld.w	r9,r8[0x4]
8000573e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005742:	11 d8       	ld.ub	r8,r8[0x5]
80005744:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80005748:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000574c:	f1 38 00 08 	ld.ub	r8,r8[8]
80005750:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80005752:	f5 e8 10 08 	or	r8,r10,r8
80005756:	10 49       	or	r9,r8
80005758:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000575c:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8000575e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005762:	90 39       	ld.sh	r9,r8[0x6]
80005764:	30 28       	mov	r8,2
80005766:	f0 09 19 00 	cp.h	r9,r8
8000576a:	e0 88 00 14 	brls	80005792 <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8000576e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005772:	70 18       	ld.w	r8,r8[0x4]
80005774:	10 99       	mov	r9,r8
80005776:	ad b9       	sbr	r9,0xd
80005778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000577c:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8000577e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005782:	90 38       	ld.sh	r8,r8[0x6]
80005784:	5c 78       	castu.h	r8
80005786:	20 28       	sub	r8,2
80005788:	10 99       	mov	r9,r8
8000578a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000578e:	91 a9       	st.w	r8[0x28],r9
80005790:	c0 d8       	rjmp	800057aa <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80005792:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005796:	70 19       	ld.w	r9,r8[0x4]
80005798:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000579c:	90 38       	ld.sh	r8,r8[0x6]
8000579e:	5c 78       	castu.h	r8
800057a0:	ad 68       	lsl	r8,0xc
800057a2:	10 49       	or	r9,r8
800057a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057a8:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800057aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057ae:	70 18       	ld.w	r8,r8[0x4]
800057b0:	10 99       	mov	r9,r8
800057b2:	e0 19 ff f0 	andl	r9,0xfff0
800057b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057ba:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800057bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057c0:	35 09       	mov	r9,80
800057c2:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800057c4:	30 08       	mov	r8,0
}
800057c6:	10 9c       	mov	r12,r8
800057c8:	2f dd       	sub	sp,-12
800057ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800057ce:	00 00       	add	r0,r0
800057d0:	80 00       	ld.sh	r0,r0[0x0]
800057d2:	55 f4       	stdsp	sp[0x17c],r4
800057d4:	80 00       	ld.sh	r0,r0[0x0]
800057d6:	55 20       	stdsp	sp[0x148],r0

800057d8 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
800057d8:	eb cd 40 80 	pushm	r7,lr
800057dc:	1a 97       	mov	r7,sp
800057de:	20 3d       	sub	sp,12
800057e0:	ef 4c ff f8 	st.w	r7[-8],r12
800057e4:	ef 4b ff f4 	st.w	r7[-12],r11
800057e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057ec:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800057f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057f4:	70 58       	ld.w	r8,r8[0x14]
800057f6:	e2 18 00 02 	andl	r8,0x2,COH
800057fa:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
800057fc:	58 08       	cp.w	r8,0
800057fe:	c0 a0       	breq	80005812 <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80005800:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005804:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80005808:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000580c:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
8000580e:	30 08       	mov	r8,0
80005810:	c0 28       	rjmp	80005814 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
80005812:	30 28       	mov	r8,2
}
80005814:	10 9c       	mov	r12,r8
80005816:	2f dd       	sub	sp,-12
80005818:	e3 cd 80 80 	ldm	sp++,r7,pc

8000581c <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
8000581c:	eb cd 40 80 	pushm	r7,lr
80005820:	1a 97       	mov	r7,sp
80005822:	20 3d       	sub	sp,12
80005824:	ef 4c ff f8 	st.w	r7[-8],r12
80005828:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
8000582c:	e0 68 27 10 	mov	r8,10000
80005830:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80005834:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005838:	58 08       	cp.w	r8,0
8000583a:	5f 08       	sreq	r8
8000583c:	5c 58       	castu.b	r8
8000583e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005842:	20 19       	sub	r9,1
80005844:	ef 49 ff fc 	st.w	r7[-4],r9
80005848:	58 08       	cp.w	r8,0
8000584a:	c0 30       	breq	80005850 <usart_putchar+0x34>
8000584c:	3f f8       	mov	r8,-1
8000584e:	c0 b8       	rjmp	80005864 <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80005850:	ee fb ff f4 	ld.w	r11,r7[-12]
80005854:	ee fc ff f8 	ld.w	r12,r7[-8]
80005858:	f0 1f 00 05 	mcall	8000586c <usart_putchar+0x50>
8000585c:	18 98       	mov	r8,r12
8000585e:	58 08       	cp.w	r8,0
80005860:	ce a1       	brne	80005834 <usart_putchar+0x18>

  return USART_SUCCESS;
80005862:	30 08       	mov	r8,0
}
80005864:	10 9c       	mov	r12,r8
80005866:	2f dd       	sub	sp,-12
80005868:	e3 cd 80 80 	ldm	sp++,r7,pc
8000586c:	80 00       	ld.sh	r0,r0[0x0]
8000586e:	57 d8       	stdsp	sp[0x1f4],r8

80005870 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80005870:	eb cd 40 80 	pushm	r7,lr
80005874:	1a 97       	mov	r7,sp
80005876:	20 2d       	sub	sp,8
80005878:	ef 4c ff fc 	st.w	r7[-4],r12
8000587c:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
80005880:	c0 e8       	rjmp	8000589c <usart_write_line+0x2c>
    usart_putchar(usart, *string++);
80005882:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005886:	11 88       	ld.ub	r8,r8[0x0]
80005888:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000588c:	2f f9       	sub	r9,-1
8000588e:	ef 49 ff f8 	st.w	r7[-8],r9
80005892:	10 9b       	mov	r11,r8
80005894:	ee fc ff fc 	ld.w	r12,r7[-4]
80005898:	f0 1f 00 05 	mcall	800058ac <usart_write_line+0x3c>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
8000589c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058a0:	11 88       	ld.ub	r8,r8[0x0]
800058a2:	58 08       	cp.w	r8,0
800058a4:	ce f1       	brne	80005882 <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
800058a6:	2f ed       	sub	sp,-8
800058a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800058ac:	80 00       	ld.sh	r0,r0[0x0]
800058ae:	58 1c       	cp.w	r12,1

800058b0 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800058b0:	48 cd       	lddpc	sp,800058e0 <udata_clear_loop_end+0x2>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
800058b2:	48 d0       	lddpc	r0,800058e4 <udata_clear_loop_end+0x6>
  mtsr    AVR32_EVBA, r0
800058b4:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800058b8:	d5 53       	csrf	0x15

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
800058ba:	48 c0       	lddpc	r0,800058e8 <udata_clear_loop_end+0xa>
  lda.w   r1, _edata
800058bc:	48 c1       	lddpc	r1,800058ec <udata_clear_loop_end+0xe>
  cp      r0, r1
800058be:	02 30       	cp.w	r0,r1
  brhs    idata_load_loop_end
800058c0:	c0 62       	brcc	800058cc <idata_load_loop_end>
  lda.w   r2, _data_lma
800058c2:	48 c2       	lddpc	r2,800058f0 <udata_clear_loop_end+0x12>

800058c4 <idata_load_loop>:
idata_load_loop:
  ld.d    r4, r2++
800058c4:	a5 05       	ld.d	r4,r2++
  st.d    r0++, r4
800058c6:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800058c8:	02 30       	cp.w	r0,r1
  brlo    idata_load_loop
800058ca:	cf d3       	brcs	800058c4 <idata_load_loop>

800058cc <idata_load_loop_end>:
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800058cc:	48 a0       	lddpc	r0,800058f4 <udata_clear_loop_end+0x16>
  lda.w   r1, _end
800058ce:	48 b1       	lddpc	r1,800058f8 <udata_clear_loop_end+0x1a>
  cp      r0, r1
800058d0:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800058d2:	c0 62       	brcc	800058de <udata_clear_loop_end>
  mov     r2, 0
800058d4:	30 02       	mov	r2,0
  mov     r3, 0
800058d6:	30 03       	mov	r3,0

800058d8 <udata_clear_loop>:
udata_clear_loop:
  st.d    r0++, r2
800058d8:	a1 22       	st.d	r0++,r2
  cp      r0, r1
800058da:	02 30       	cp.w	r0,r1
  brlo    udata_clear_loop
800058dc:	cf e3       	brcs	800058d8 <udata_clear_loop>

800058de <udata_clear_loop_end>:
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800058de:	48 8f       	lddpc	pc,800058fc <udata_clear_loop_end+0x1e>
800058e0:	00 01       	add	r1,r0
800058e2:	00 00       	add	r0,r0
800058e4:	80 00       	ld.sh	r0,r0[0x0]
800058e6:	a8 00       	st.h	r4[0x0],r0
800058e8:	00 00       	add	r0,r0
800058ea:	00 08       	add	r8,r0
800058ec:	00 00       	add	r0,r0
800058ee:	00 b8       	st.h	r0++,r8
800058f0:	80 00       	ld.sh	r0,r0[0x0]
800058f2:	ac 50       	st.h	r6[0xa],r0
800058f4:	00 00       	add	r0,r0
800058f6:	00 b8       	st.h	r0++,r8
800058f8:	00 00       	add	r0,r0
800058fa:	0b 60       	ld.uh	r0,--r5
800058fc:	80 00       	ld.sh	r0,r0[0x0]
800058fe:	89 30       	st.w	r4[0xc],r0

80005900 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005900:	eb cd 40 80 	pushm	r7,lr
80005904:	1a 97       	mov	r7,sp
80005906:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005908:	e1 b8 00 00 	mfsr	r8,0x0
8000590c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005910:	d3 03       	ssrf	0x10

	return flags;
80005912:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005916:	10 9c       	mov	r12,r8
80005918:	2f fd       	sub	sp,-4
8000591a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000591e <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8000591e:	eb cd 40 80 	pushm	r7,lr
80005922:	1a 97       	mov	r7,sp
80005924:	20 1d       	sub	sp,4
80005926:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000592a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000592e:	e6 18 00 01 	andh	r8,0x1,COH
80005932:	5f 08       	sreq	r8
80005934:	5c 58       	castu.b	r8
}
80005936:	10 9c       	mov	r12,r8
80005938:	2f fd       	sub	sp,-4
8000593a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000593e:	d7 03       	nop

80005940 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005940:	eb cd 40 80 	pushm	r7,lr
80005944:	1a 97       	mov	r7,sp
80005946:	20 1d       	sub	sp,4
80005948:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000594c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005950:	f0 1f 00 05 	mcall	80005964 <cpu_irq_restore+0x24>
80005954:	18 98       	mov	r8,r12
80005956:	58 08       	cp.w	r8,0
80005958:	c0 20       	breq	8000595c <cpu_irq_restore+0x1c>
      cpu_irq_enable();
8000595a:	d5 03       	csrf	0x10
   }

	barrier();
}
8000595c:	2f fd       	sub	sp,-4
8000595e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005962:	00 00       	add	r0,r0
80005964:	80 00       	ld.sh	r0,r0[0x0]
80005966:	59 1e       	cp.w	lr,17

80005968 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
80005968:	eb cd 40 80 	pushm	r7,lr
8000596c:	1a 97       	mov	r7,sp
8000596e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005970:	f0 1f 00 0c 	mcall	800059a0 <osc_priv_enable_osc0+0x38>
80005974:	18 98       	mov	r8,r12
80005976:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8000597a:	fe 78 08 00 	mov	r8,-63488
8000597e:	32 49       	mov	r9,36
80005980:	ea 19 aa 00 	orh	r9,0xaa00
80005984:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] =
80005986:	fe 78 08 00 	mov	r8,-63488
8000598a:	e0 79 0c 07 	mov	r9,68615
8000598e:	91 99       	st.w	r8[0x24],r9
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
80005990:	ee fc ff fc 	ld.w	r12,r7[-4]
80005994:	f0 1f 00 04 	mcall	800059a4 <osc_priv_enable_osc0+0x3c>
}
80005998:	2f fd       	sub	sp,-4
8000599a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000599e:	00 00       	add	r0,r0
800059a0:	80 00       	ld.sh	r0,r0[0x0]
800059a2:	59 00       	cp.w	r0,16
800059a4:	80 00       	ld.sh	r0,r0[0x0]
800059a6:	59 40       	cp.w	r0,20

800059a8 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
800059a8:	eb cd 40 80 	pushm	r7,lr
800059ac:	1a 97       	mov	r7,sp
800059ae:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
800059b0:	f0 1f 00 0c 	mcall	800059e0 <osc_priv_enable_osc32+0x38>
800059b4:	18 98       	mov	r8,r12
800059b6:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
800059ba:	fe 78 08 00 	mov	r8,-63488
800059be:	34 c9       	mov	r9,76
800059c0:	ea 19 aa 00 	orh	r9,0xaa00
800059c4:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 =
800059c6:	fe 78 08 00 	mov	r8,-63488
800059ca:	e2 69 01 01 	mov	r9,131329
800059ce:	f1 49 00 4c 	st.w	r8[76],r9
			(OSC32_STARTUP_VALUE << AVR32_SCIF_OSCCTRL32_STARTUP)
			| (OSC32_MODE_VALUE << AVR32_SCIF_OSCCTRL32_MODE)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
800059d2:	ee fc ff fc 	ld.w	r12,r7[-4]
800059d6:	f0 1f 00 04 	mcall	800059e4 <osc_priv_enable_osc32+0x3c>
}
800059da:	2f fd       	sub	sp,-4
800059dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800059e0:	80 00       	ld.sh	r0,r0[0x0]
800059e2:	59 00       	cp.w	r0,16
800059e4:	80 00       	ld.sh	r0,r0[0x0]
800059e6:	59 40       	cp.w	r0,20

800059e8 <osc_priv_enable_rc8m>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc8m(void)
{
800059e8:	eb cd 40 80 	pushm	r7,lr
800059ec:	1a 97       	mov	r7,sp
800059ee:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint32_t   rccr8;
    uint32_t* calibration_bits = (uint32_t*)0x80800200;
800059f0:	e0 68 02 00 	mov	r8,512
800059f4:	ea 18 80 80 	orh	r8,0x8080
800059f8:	ef 48 ff fc 	st.w	r7[-4],r8
	/* Wait for the CALIB field to be updated from fuses after reset */
	while (!(AVR32_SCIF.rccr8 & AVR32_SCIF_RCCR8_FCD_MASK)) {
800059fc:	fe 78 08 00 	mov	r8,-63488
80005a00:	71 28       	ld.w	r8,r8[0x48]
80005a02:	e6 18 00 01 	andh	r8,0x1,COH
80005a06:	cf b0       	breq	800059fc <osc_priv_enable_rc8m+0x14>
		/* Do nothing */
	}

	/* Enable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
80005a08:	f0 1f 00 17 	mcall	80005a64 <osc_priv_enable_rc8m+0x7c>
80005a0c:	18 98       	mov	r8,r12
80005a0e:	ef 48 ff f4 	st.w	r7[-12],r8
	rccr8 = AVR32_SCIF.rccr8;
80005a12:	fe 78 08 00 	mov	r8,-63488
80005a16:	71 28       	ld.w	r8,r8[0x48]
80005a18:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
80005a1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a20:	70 08       	ld.w	r8,r8[0x0]
80005a22:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80005a26:	b1 a8       	sbr	r8,0x10
80005a28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005a2c:	f3 e8 00 08 	and	r8,r9,r8
80005a30:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 |= 1U << AVR32_SCIF_RCOSC8_EN;
80005a34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a38:	b9 a8       	sbr	r8,0x18
80005a3a:	ef 48 ff f8 	st.w	r7[-8],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
80005a3e:	fe 78 08 00 	mov	r8,-63488
80005a42:	34 89       	mov	r9,72
80005a44:	ea 19 aa 00 	orh	r9,0xaa00
80005a48:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
80005a4a:	fe 78 08 00 	mov	r8,-63488
80005a4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005a52:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
80005a56:	ee fc ff f4 	ld.w	r12,r7[-12]
80005a5a:	f0 1f 00 04 	mcall	80005a68 <osc_priv_enable_rc8m+0x80>
}
80005a5e:	2f dd       	sub	sp,-12
80005a60:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a64:	80 00       	ld.sh	r0,r0[0x0]
80005a66:	59 00       	cp.w	r0,16
80005a68:	80 00       	ld.sh	r0,r0[0x0]
80005a6a:	59 40       	cp.w	r0,20

80005a6c <osc_priv_enable_rc120m>:
	AVR32_SCIF.rccr8 = rccr8;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc120m(void)
{
80005a6c:	eb cd 40 80 	pushm	r7,lr
80005a70:	1a 97       	mov	r7,sp
80005a72:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005a74:	f0 1f 00 0c 	mcall	80005aa4 <osc_priv_enable_rc120m+0x38>
80005a78:	18 98       	mov	r8,r12
80005a7a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
80005a7e:	fe 78 08 00 	mov	r8,-63488
80005a82:	35 89       	mov	r9,88
80005a84:	ea 19 aa 00 	orh	r9,0xaa00
80005a88:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
80005a8a:	fe 78 08 00 	mov	r8,-63488
80005a8e:	30 19       	mov	r9,1
80005a90:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
80005a94:	ee fc ff fc 	ld.w	r12,r7[-4]
80005a98:	f0 1f 00 04 	mcall	80005aa8 <osc_priv_enable_rc120m+0x3c>
}
80005a9c:	2f fd       	sub	sp,-4
80005a9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005aa2:	00 00       	add	r0,r0
80005aa4:	80 00       	ld.sh	r0,r0[0x0]
80005aa6:	59 00       	cp.w	r0,16
80005aa8:	80 00       	ld.sh	r0,r0[0x0]
80005aaa:	59 40       	cp.w	r0,20

80005aac <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005aac:	eb cd 40 80 	pushm	r7,lr
80005ab0:	1a 97       	mov	r7,sp
80005ab2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005ab4:	e1 b8 00 00 	mfsr	r8,0x0
80005ab8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005abc:	d3 03       	ssrf	0x10

	return flags;
80005abe:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005ac2:	10 9c       	mov	r12,r8
80005ac4:	2f fd       	sub	sp,-4
80005ac6:	e3 cd 80 80 	ldm	sp++,r7,pc

80005aca <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005aca:	eb cd 40 80 	pushm	r7,lr
80005ace:	1a 97       	mov	r7,sp
80005ad0:	20 1d       	sub	sp,4
80005ad2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005ad6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ada:	e6 18 00 01 	andh	r8,0x1,COH
80005ade:	5f 08       	sreq	r8
80005ae0:	5c 58       	castu.b	r8
}
80005ae2:	10 9c       	mov	r12,r8
80005ae4:	2f fd       	sub	sp,-4
80005ae6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005aea:	d7 03       	nop

80005aec <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005aec:	eb cd 40 80 	pushm	r7,lr
80005af0:	1a 97       	mov	r7,sp
80005af2:	20 1d       	sub	sp,4
80005af4:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005af8:	ee fc ff fc 	ld.w	r12,r7[-4]
80005afc:	f0 1f 00 05 	mcall	80005b10 <cpu_irq_restore+0x24>
80005b00:	18 98       	mov	r8,r12
80005b02:	58 08       	cp.w	r8,0
80005b04:	c0 20       	breq	80005b08 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005b06:	d5 03       	csrf	0x10
   }

	barrier();
}
80005b08:	2f fd       	sub	sp,-4
80005b0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b0e:	00 00       	add	r0,r0
80005b10:	80 00       	ld.sh	r0,r0[0x0]
80005b12:	5a ca       	cp.w	r10,-20

80005b14 <pll_enable>:
	AVR32_SCIF.pll[pll_id] = cfg->ctrl;
	cpu_irq_restore(flags);
}

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
80005b14:	eb cd 40 80 	pushm	r7,lr
80005b18:	1a 97       	mov	r7,sp
80005b1a:	20 3d       	sub	sp,12
80005b1c:	ef 4c ff f8 	st.w	r7[-8],r12
80005b20:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
80005b24:	f0 1f 00 10 	mcall	80005b64 <pll_enable+0x50>
80005b28:	18 98       	mov	r8,r12
80005b2a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
80005b2e:	fe 78 08 00 	mov	r8,-63488
80005b32:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005b36:	2f 99       	sub	r9,-7
80005b38:	a3 69       	lsl	r9,0x2
80005b3a:	ea 19 aa 00 	orh	r9,0xaa00
80005b3e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
80005b40:	fe 78 08 00 	mov	r8,-63488
80005b44:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005b48:	ee fa ff f8 	ld.w	r10,r7[-8]
80005b4c:	74 0a       	ld.w	r10,r10[0x0]
80005b4e:	a1 aa       	sbr	r10,0x0
80005b50:	2f 99       	sub	r9,-7
80005b52:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
80005b56:	ee fc ff fc 	ld.w	r12,r7[-4]
80005b5a:	f0 1f 00 04 	mcall	80005b68 <pll_enable+0x54>
}
80005b5e:	2f dd       	sub	sp,-12
80005b60:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b64:	80 00       	ld.sh	r0,r0[0x0]
80005b66:	5a ac       	cp.w	r12,-22
80005b68:	80 00       	ld.sh	r0,r0[0x0]
80005b6a:	5a ec       	cp.w	r12,-18

80005b6c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005b6c:	eb cd 40 80 	pushm	r7,lr
80005b70:	1a 97       	mov	r7,sp
80005b72:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005b74:	e1 b8 00 00 	mfsr	r8,0x0
80005b78:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005b7c:	d3 03       	ssrf	0x10

	return flags;
80005b7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005b82:	10 9c       	mov	r12,r8
80005b84:	2f fd       	sub	sp,-4
80005b86:	e3 cd 80 80 	ldm	sp++,r7,pc

80005b8a <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005b8a:	eb cd 40 80 	pushm	r7,lr
80005b8e:	1a 97       	mov	r7,sp
80005b90:	20 1d       	sub	sp,4
80005b92:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005b96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005b9a:	e6 18 00 01 	andh	r8,0x1,COH
80005b9e:	5f 08       	sreq	r8
80005ba0:	5c 58       	castu.b	r8
}
80005ba2:	10 9c       	mov	r12,r8
80005ba4:	2f fd       	sub	sp,-4
80005ba6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005baa:	d7 03       	nop

80005bac <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005bac:	eb cd 40 80 	pushm	r7,lr
80005bb0:	1a 97       	mov	r7,sp
80005bb2:	20 1d       	sub	sp,4
80005bb4:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005bb8:	ee fc ff fc 	ld.w	r12,r7[-4]
80005bbc:	f0 1f 00 05 	mcall	80005bd0 <cpu_irq_restore+0x24>
80005bc0:	18 98       	mov	r8,r12
80005bc2:	58 08       	cp.w	r8,0
80005bc4:	c0 20       	breq	80005bc8 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005bc6:	d5 03       	csrf	0x10
   }

	barrier();
}
80005bc8:	2f fd       	sub	sp,-4
80005bca:	e3 cd 80 80 	ldm	sp++,r7,pc
80005bce:	00 00       	add	r0,r0
80005bd0:	80 00       	ld.sh	r0,r0[0x0]
80005bd2:	5b 8a       	cp.w	r10,-8

80005bd4 <sysclk_set_prescalers>:
 * \param pbc_shift The PBC clock will be divided by \f$2^{pbc\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift,
		unsigned int pbc_shift)
{
80005bd4:	eb cd 40 80 	pushm	r7,lr
80005bd8:	1a 97       	mov	r7,sp
80005bda:	20 9d       	sub	sp,36
80005bdc:	ef 4c ff e8 	st.w	r7[-24],r12
80005be0:	ef 4b ff e4 	st.w	r7[-28],r11
80005be4:	ef 4a ff e0 	st.w	r7[-32],r10
80005be8:	ef 49 ff dc 	st.w	r7[-36],r9
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
80005bec:	30 08       	mov	r8,0
80005bee:	ef 48 ff f0 	st.w	r7[-16],r8
	uint32_t   pba_cksel = 0;
80005bf2:	30 08       	mov	r8,0
80005bf4:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t   pbb_cksel = 0;
80005bf8:	30 08       	mov	r8,0
80005bfa:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t   pbc_cksel = 0;
80005bfe:	30 08       	mov	r8,0
80005c00:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
80005c04:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005c08:	58 08       	cp.w	r8,0
80005c0a:	c0 70       	breq	80005c18 <sysclk_set_prescalers+0x44>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_CPUSEL)
80005c0c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005c10:	20 18       	sub	r8,1
80005c12:	a7 b8       	sbr	r8,0x7
80005c14:	ef 48 ff f0 	st.w	r7[-16],r8
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
80005c18:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005c1c:	58 08       	cp.w	r8,0
80005c1e:	c0 70       	breq	80005c2c <sysclk_set_prescalers+0x58>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_PBSEL)
80005c20:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005c24:	20 18       	sub	r8,1
80005c26:	a7 b8       	sbr	r8,0x7
80005c28:	ef 48 ff f4 	st.w	r7[-12],r8
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
80005c2c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c30:	58 08       	cp.w	r8,0
80005c32:	c0 70       	breq	80005c40 <sysclk_set_prescalers+0x6c>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_PBSEL)
80005c34:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c38:	20 18       	sub	r8,1
80005c3a:	a7 b8       	sbr	r8,0x7
80005c3c:	ef 48 ff f8 	st.w	r7[-8],r8
				| (1U << AVR32_PM_PBBDIV);

	if (pbc_shift > 0)
80005c40:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005c44:	58 08       	cp.w	r8,0
80005c46:	c0 70       	breq	80005c54 <sysclk_set_prescalers+0x80>
		pbc_cksel = ((pbc_shift - 1) << AVR32_PM_PBCSEL_PBSEL)
80005c48:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005c4c:	20 18       	sub	r8,1
80005c4e:	a7 b8       	sbr	r8,0x7
80005c50:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_PBCDIV);

	flags = cpu_irq_save();
80005c54:	f0 1f 00 1e 	mcall	80005ccc <sysclk_set_prescalers+0xf8>
80005c58:	18 98       	mov	r8,r12
80005c5a:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
80005c5e:	fe 78 04 00 	mov	r8,-64512
80005c62:	30 49       	mov	r9,4
80005c64:	ea 19 aa 00 	orh	r9,0xaa00
80005c68:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.cpusel = cpu_cksel;
80005c6c:	fe 78 04 00 	mov	r8,-64512
80005c70:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005c74:	91 19       	st.w	r8[0x4],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
80005c76:	fe 78 04 00 	mov	r8,-64512
80005c7a:	30 c9       	mov	r9,12
80005c7c:	ea 19 aa 00 	orh	r9,0xaa00
80005c80:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbasel = pba_cksel;
80005c84:	fe 78 04 00 	mov	r8,-64512
80005c88:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005c8c:	91 39       	st.w	r8[0xc],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
80005c8e:	fe 78 04 00 	mov	r8,-64512
80005c92:	31 09       	mov	r9,16
80005c94:	ea 19 aa 00 	orh	r9,0xaa00
80005c98:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbb_cksel;
80005c9c:	fe 78 04 00 	mov	r8,-64512
80005ca0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005ca4:	91 49       	st.w	r8[0x10],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBCSEL;
80005ca6:	fe 78 04 00 	mov	r8,-64512
80005caa:	31 49       	mov	r9,20
80005cac:	ea 19 aa 00 	orh	r9,0xaa00
80005cb0:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbcsel = pbc_cksel;
80005cb4:	fe 78 04 00 	mov	r8,-64512
80005cb8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005cbc:	91 59       	st.w	r8[0x14],r9
	cpu_irq_restore(flags);
80005cbe:	ee fc ff ec 	ld.w	r12,r7[-20]
80005cc2:	f0 1f 00 04 	mcall	80005cd0 <sysclk_set_prescalers+0xfc>
}
80005cc6:	2f 7d       	sub	sp,-36
80005cc8:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ccc:	80 00       	ld.sh	r0,r0[0x0]
80005cce:	5b 6c       	cp.w	r12,-10
80005cd0:	80 00       	ld.sh	r0,r0[0x0]
80005cd2:	5b ac       	cp.w	r12,-6

80005cd4 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80005cd4:	eb cd 40 80 	pushm	r7,lr
80005cd8:	1a 97       	mov	r7,sp
80005cda:	20 2d       	sub	sp,8
80005cdc:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
80005ce0:	f0 1f 00 0c 	mcall	80005d10 <sysclk_set_source+0x3c>
80005ce4:	18 98       	mov	r8,r12
80005ce6:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80005cea:	fe 78 04 00 	mov	r8,-64512
80005cee:	fc 19 aa 00 	movh	r9,0xaa00
80005cf2:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
80005cf6:	fe 78 04 00 	mov	r8,-64512
80005cfa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005cfe:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80005d00:	ee fc ff fc 	ld.w	r12,r7[-4]
80005d04:	f0 1f 00 04 	mcall	80005d14 <sysclk_set_source+0x40>
}
80005d08:	2f ed       	sub	sp,-8
80005d0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d0e:	00 00       	add	r0,r0
80005d10:	80 00       	ld.sh	r0,r0[0x0]
80005d12:	5b 6c       	cp.w	r12,-10
80005d14:	80 00       	ld.sh	r0,r0[0x0]
80005d16:	5b ac       	cp.w	r12,-6

80005d18 <twi_master_read>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005d18:	eb cd 40 80 	pushm	r7,lr
80005d1c:	1a 97       	mov	r7,sp
80005d1e:	20 2d       	sub	sp,8
80005d20:	ef 4c ff fc 	st.w	r7[-4],r12
80005d24:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_read_packet (twim, package));
80005d28:	ee fb ff f8 	ld.w	r11,r7[-8]
80005d2c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005d30:	f0 1f 00 04 	mcall	80005d40 <twi_master_read+0x28>
80005d34:	18 98       	mov	r8,r12
}
80005d36:	10 9c       	mov	r12,r8
80005d38:	2f ed       	sub	sp,-8
80005d3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d3e:	00 00       	add	r0,r0
80005d40:	80 00       	ld.sh	r0,r0[0x0]
80005d42:	51 14       	stdsp	sp[0x44],r4

80005d44 <twi_master_write>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   if all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005d44:	eb cd 40 80 	pushm	r7,lr
80005d48:	1a 97       	mov	r7,sp
80005d4a:	20 2d       	sub	sp,8
80005d4c:	ef 4c ff fc 	st.w	r7[-4],r12
80005d50:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_write_packet (twim, package));
80005d54:	ee fb ff f8 	ld.w	r11,r7[-8]
80005d58:	ee fc ff fc 	ld.w	r12,r7[-4]
80005d5c:	f0 1f 00 04 	mcall	80005d6c <twi_master_write+0x28>
80005d60:	18 98       	mov	r8,r12
}
80005d62:	10 9c       	mov	r12,r8
80005d64:	2f ed       	sub	sp,-8
80005d66:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d6a:	00 00       	add	r0,r0
80005d6c:	80 00       	ld.sh	r0,r0[0x0]
80005d6e:	52 90       	stdsp	sp[0xa4],r0

80005d70 <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
80005d70:	eb cd 40 80 	pushm	r7,lr
80005d74:	1a 97       	mov	r7,sp
80005d76:	20 9d       	sub	sp,36
80005d78:	16 99       	mov	r9,r11
80005d7a:	14 98       	mov	r8,r10
80005d7c:	18 9a       	mov	r10,r12
80005d7e:	ef 6a ff e4 	st.b	r7[-28],r10
80005d82:	ef 69 ff e0 	st.b	r7[-32],r9
80005d86:	ef 68 ff dc 	st.b	r7[-36],r8
uint8_t pack[2];
twi_package_t twi_package;

	pack[0] = reg_index;
80005d8a:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80005d8e:	ef 68 ff fc 	st.b	r7[-4],r8
	pack[1] = data;
80005d92:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80005d96:	ef 68 ff fd 	st.b	r7[-3],r8

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005d9a:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80005d9e:	30 08       	mov	r8,0
80005da0:	f0 09 18 00 	cp.b	r9,r8
80005da4:	c0 51       	brne	80005dae <PCA9952_write_reg+0x3e>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005da6:	36 08       	mov	r8,96
80005da8:	ef 48 ff e8 	st.w	r7[-24],r8
80005dac:	c0 a8       	rjmp	80005dc0 <PCA9952_write_reg+0x50>
	}
	else if (topBotn == LED_BOTTOM)
80005dae:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80005db2:	30 18       	mov	r8,1
80005db4:	f0 09 18 00 	cp.b	r9,r8
80005db8:	c0 41       	brne	80005dc0 <PCA9952_write_reg+0x50>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005dba:	36 18       	mov	r8,97
80005dbc:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	twi_package.addr_length = 0;
80005dc0:	30 08       	mov	r8,0
80005dc2:	ef 68 ff ef 	st.b	r7[-17],r8
	twi_package.buffer = &pack;
80005dc6:	ee c8 00 04 	sub	r8,r7,4
80005dca:	ef 48 ff f0 	st.w	r7[-16],r8
	twi_package.length = sizeof(pack);
80005dce:	30 28       	mov	r8,2
80005dd0:	ef 48 ff f4 	st.w	r7[-12],r8

	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005dd4:	ee c8 00 18 	sub	r8,r7,24
80005dd8:	10 9b       	mov	r11,r8
80005dda:	fe 7c 38 00 	mov	r12,-51200
80005dde:	f0 1f 00 05 	mcall	80005df0 <PCA9952_write_reg+0x80>
80005de2:	18 98       	mov	r8,r12
80005de4:	58 08       	cp.w	r8,0
80005de6:	cf 71       	brne	80005dd4 <PCA9952_write_reg+0x64>

	return;
}
80005de8:	2f 7d       	sub	sp,-36
80005dea:	e3 cd 80 80 	ldm	sp++,r7,pc
80005dee:	00 00       	add	r0,r0
80005df0:	80 00       	ld.sh	r0,r0[0x0]
80005df2:	5d 44       	*unknown*

80005df4 <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
80005df4:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005df8:	1a 97       	mov	r7,sp
80005dfa:	21 3d       	sub	sp,76
80005dfc:	18 99       	mov	r9,r12
80005dfe:	16 98       	mov	r8,r11
80005e00:	ef 69 ff b8 	st.b	r7[-72],r9
80005e04:	ef 68 ff b4 	st.b	r7[-76],r8
uint8_t data;
twi_package_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005e08:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005e0c:	30 08       	mov	r8,0
80005e0e:	f0 09 18 00 	cp.b	r9,r8
80005e12:	c0 51       	brne	80005e1c <PCA9952_read_reg+0x28>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005e14:	36 08       	mov	r8,96
80005e16:	ef 48 ff c8 	st.w	r7[-56],r8
80005e1a:	c0 a8       	rjmp	80005e2e <PCA9952_read_reg+0x3a>
	}
	else if (topBotn == LED_BOTTOM)
80005e1c:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005e20:	30 18       	mov	r8,1
80005e22:	f0 09 18 00 	cp.b	r9,r8
80005e26:	c0 41       	brne	80005e2e <PCA9952_read_reg+0x3a>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005e28:	36 18       	mov	r8,97
80005e2a:	ef 48 ff c8 	st.w	r7[-56],r8
	}

	twi_package.addr_length = 0;
80005e2e:	30 08       	mov	r8,0
80005e30:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &reg_index;
80005e34:	ee c8 00 4c 	sub	r8,r7,76
80005e38:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
80005e3c:	30 18       	mov	r8,1
80005e3e:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005e42:	ee c8 00 38 	sub	r8,r7,56
80005e46:	10 9b       	mov	r11,r8
80005e48:	fe 7c 38 00 	mov	r12,-51200
80005e4c:	f0 1f 00 5e 	mcall	80005fc4 <PCA9952_read_reg+0x1d0>
80005e50:	18 98       	mov	r8,r12
80005e52:	58 08       	cp.w	r8,0
80005e54:	cf 71       	brne	80005e42 <PCA9952_read_reg+0x4e>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	cpu_delay_us(20, cpu_hz);
80005e56:	4d d8       	lddpc	r8,80005fc8 <PCA9952_read_reg+0x1d4>
80005e58:	70 08       	ld.w	r8,r8[0x0]
80005e5a:	31 49       	mov	r9,20
80005e5c:	ef 49 ff e4 	st.w	r7[-28],r9
80005e60:	ef 48 ff e0 	st.w	r7[-32],r8
80005e64:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005e68:	ef 48 ff ec 	st.w	r7[-20],r8
80005e6c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005e70:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80005e74:	ee f0 ff ec 	ld.w	r0,r7[-20]
80005e78:	30 01       	mov	r1,0
80005e7a:	ee f2 ff e8 	ld.w	r2,r7[-24]
80005e7e:	30 03       	mov	r3,0
80005e80:	e2 02 02 4a 	mul	r10,r1,r2
80005e84:	e6 00 02 48 	mul	r8,r3,r0
80005e88:	10 0a       	add	r10,r8
80005e8a:	e0 02 06 48 	mulu.d	r8,r0,r2
80005e8e:	12 0a       	add	r10,r9
80005e90:	14 99       	mov	r9,r10
80005e92:	ee 7a 42 3f 	mov	r10,999999
80005e96:	30 0b       	mov	r11,0
80005e98:	f0 0a 00 0a 	add	r10,r8,r10
80005e9c:	f2 0b 00 4b 	adc	r11,r9,r11
80005ea0:	ee 78 42 40 	mov	r8,1000000
80005ea4:	30 09       	mov	r9,0
80005ea6:	f0 1f 00 4a 	mcall	80005fcc <PCA9952_read_reg+0x1d8>
80005eaa:	14 98       	mov	r8,r10
80005eac:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80005eae:	ef 48 ff f4 	st.w	r7[-12],r8
80005eb2:	ee c8 00 44 	sub	r8,r7,68
80005eb6:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005eba:	e1 b8 00 42 	mfsr	r8,0x108
80005ebe:	10 99       	mov	r9,r8
80005ec0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005ec4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005ec6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005eca:	70 09       	ld.w	r9,r8[0x0]
80005ecc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005ed0:	10 09       	add	r9,r8
80005ed2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005ed6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005ed8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005edc:	30 08       	mov	r8,0
80005ede:	f3 68 00 08 	st.b	r9[8],r8
80005ee2:	ee c8 00 44 	sub	r8,r7,68
80005ee6:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005eea:	e1 b8 00 42 	mfsr	r8,0x108
80005eee:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005ef2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ef6:	f1 39 00 08 	ld.ub	r9,r8[8]
80005efa:	30 28       	mov	r8,2
80005efc:	f0 09 18 00 	cp.b	r9,r8
80005f00:	c0 31       	brne	80005f06 <PCA9952_read_reg+0x112>
    return false;
80005f02:	30 08       	mov	r8,0
80005f04:	c4 38       	rjmp	80005f8a <PCA9952_read_reg+0x196>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005f06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f0a:	f1 39 00 08 	ld.ub	r9,r8[8]
80005f0e:	30 18       	mov	r8,1
80005f10:	f0 09 18 00 	cp.b	r9,r8
80005f14:	c0 31       	brne	80005f1a <PCA9952_read_reg+0x126>
    return true;
80005f16:	30 18       	mov	r8,1
80005f18:	c3 98       	rjmp	80005f8a <PCA9952_read_reg+0x196>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005f1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f1e:	70 09       	ld.w	r9,r8[0x0]
80005f20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f24:	70 18       	ld.w	r8,r8[0x4]
80005f26:	10 39       	cp.w	r9,r8
80005f28:	e0 88 00 1a 	brls	80005f5c <PCA9952_read_reg+0x168>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005f2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f30:	70 08       	ld.w	r8,r8[0x0]
80005f32:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005f36:	10 39       	cp.w	r9,r8
80005f38:	c1 02       	brcc	80005f58 <PCA9952_read_reg+0x164>
80005f3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f3e:	70 18       	ld.w	r8,r8[0x4]
80005f40:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005f44:	10 39       	cp.w	r9,r8
80005f46:	e0 88 00 09 	brls	80005f58 <PCA9952_read_reg+0x164>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005f4a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005f4e:	30 18       	mov	r8,1
80005f50:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005f54:	30 18       	mov	r8,1
80005f56:	c1 a8       	rjmp	80005f8a <PCA9952_read_reg+0x196>
    }
    return false;
80005f58:	30 08       	mov	r8,0
80005f5a:	c1 88       	rjmp	80005f8a <PCA9952_read_reg+0x196>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005f5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f60:	70 08       	ld.w	r8,r8[0x0]
80005f62:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005f66:	10 39       	cp.w	r9,r8
80005f68:	c0 93       	brcs	80005f7a <PCA9952_read_reg+0x186>
80005f6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f6e:	70 18       	ld.w	r8,r8[0x4]
80005f70:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005f74:	10 39       	cp.w	r9,r8
80005f76:	e0 88 00 09 	brls	80005f88 <PCA9952_read_reg+0x194>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005f7a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005f7e:	30 18       	mov	r8,1
80005f80:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005f84:	30 18       	mov	r8,1
80005f86:	c0 28       	rjmp	80005f8a <PCA9952_read_reg+0x196>
    }
    return false;
80005f88:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005f8a:	58 08       	cp.w	r8,0
80005f8c:	ca b0       	breq	80005ee2 <PCA9952_read_reg+0xee>

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
80005f8e:	30 08       	mov	r8,0
80005f90:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &data;
80005f94:	ee c8 00 21 	sub	r8,r7,33
80005f98:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
80005f9c:	30 18       	mov	r8,1
80005f9e:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_read(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005fa2:	ee c8 00 38 	sub	r8,r7,56
80005fa6:	10 9b       	mov	r11,r8
80005fa8:	fe 7c 38 00 	mov	r12,-51200
80005fac:	f0 1f 00 09 	mcall	80005fd0 <PCA9952_read_reg+0x1dc>
80005fb0:	18 98       	mov	r8,r12
80005fb2:	58 08       	cp.w	r8,0
80005fb4:	cf 71       	brne	80005fa2 <PCA9952_read_reg+0x1ae>

	return data;
80005fb6:	ef 38 ff df 	ld.ub	r8,r7[-33]
}
80005fba:	10 9c       	mov	r12,r8
80005fbc:	2e dd       	sub	sp,-76
80005fbe:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005fc2:	00 00       	add	r0,r0
80005fc4:	80 00       	ld.sh	r0,r0[0x0]
80005fc6:	5d 44       	*unknown*
80005fc8:	00 00       	add	r0,r0
80005fca:	02 ac       	st.w	r1++,r12
80005fcc:	80 00       	ld.sh	r0,r0[0x0]
80005fce:	a2 b6       	st.b	r1[0x3],r6
80005fd0:	80 00       	ld.sh	r0,r0[0x0]
80005fd2:	5d 18       	icall	r8

80005fd4 <PCA9952_channel>:
}


void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn);
void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn)
{
80005fd4:	eb cd 40 80 	pushm	r7,lr
80005fd8:	1a 97       	mov	r7,sp
80005fda:	20 5d       	sub	sp,20
80005fdc:	16 99       	mov	r9,r11
80005fde:	14 98       	mov	r8,r10
80005fe0:	18 9a       	mov	r10,r12
80005fe2:	ef 6a ff f4 	st.b	r7[-12],r10
80005fe6:	ef 69 ff f0 	st.b	r7[-16],r9
80005fea:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char regIdx, regPos, regShadow, maskVal, writeVal;
	
	regIdx = (channel / 4); //LEDOUT0 controls channels 0..3, LEDOUT1 controls channels 4..7 etc.
80005fee:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005ff2:	a3 88       	lsr	r8,0x2
80005ff4:	ef 68 ff fb 	st.b	r7[-5],r8
	regPos = (channel % 4);
80005ff8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005ffc:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80006000:	ef 68 ff fc 	st.b	r7[-4],r8
	
	switch(regIdx)
80006004:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006008:	58 18       	cp.w	r8,1
8000600a:	c1 50       	breq	80006034 <PCA9952_channel+0x60>
8000600c:	e0 89 00 05 	brgt	80006016 <PCA9952_channel+0x42>
80006010:	58 08       	cp.w	r8,0
80006012:	c0 70       	breq	80006020 <PCA9952_channel+0x4c>
80006014:	c2 d8       	rjmp	8000606e <PCA9952_channel+0x9a>
80006016:	58 28       	cp.w	r8,2
80006018:	c1 80       	breq	80006048 <PCA9952_channel+0x74>
8000601a:	58 38       	cp.w	r8,3
8000601c:	c2 00       	breq	8000605c <PCA9952_channel+0x88>
8000601e:	c2 88       	rjmp	8000606e <PCA9952_channel+0x9a>
	{
		case 0:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT0);
80006020:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006024:	30 2b       	mov	r11,2
80006026:	10 9c       	mov	r12,r8
80006028:	f0 1f 00 49 	mcall	8000614c <PCA9952_channel+0x178>
8000602c:	18 98       	mov	r8,r12
8000602e:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80006032:	c1 e8       	rjmp	8000606e <PCA9952_channel+0x9a>
		case 1:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT1);
80006034:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006038:	30 3b       	mov	r11,3
8000603a:	10 9c       	mov	r12,r8
8000603c:	f0 1f 00 44 	mcall	8000614c <PCA9952_channel+0x178>
80006040:	18 98       	mov	r8,r12
80006042:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80006046:	c1 48       	rjmp	8000606e <PCA9952_channel+0x9a>
		case 2:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT2);
80006048:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000604c:	30 4b       	mov	r11,4
8000604e:	10 9c       	mov	r12,r8
80006050:	f0 1f 00 3f 	mcall	8000614c <PCA9952_channel+0x178>
80006054:	18 98       	mov	r8,r12
80006056:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
8000605a:	c0 a8       	rjmp	8000606e <PCA9952_channel+0x9a>
		case 3:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT3);
8000605c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006060:	30 5b       	mov	r11,5
80006062:	10 9c       	mov	r12,r8
80006064:	f0 1f 00 3a 	mcall	8000614c <PCA9952_channel+0x178>
80006068:	18 98       	mov	r8,r12
8000606a:	ef 68 ff fd 	st.b	r7[-3],r8
			break;		
	}

	maskVal = 0xFF << (regPos * 2);
8000606e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006072:	a1 78       	lsl	r8,0x1
80006074:	e0 69 00 ff 	mov	r9,255
80006078:	f2 08 09 48 	lsl	r8,r9,r8
8000607c:	ef 68 ff fe 	st.b	r7[-2],r8
	maskVal = maskVal ^ 0xFF;
80006080:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006084:	5c d8       	com	r8
80006086:	ef 68 ff fe 	st.b	r7[-2],r8
	regShadow &= maskVal;
8000608a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000608e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006092:	f3 e8 00 08 	and	r8,r9,r8
80006096:	ef 68 ff fd 	st.b	r7[-3],r8

	if (onOffn == LED_ON)
8000609a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000609e:	30 18       	mov	r8,1
800060a0:	f0 09 18 00 	cp.b	r9,r8
800060a4:	c0 a1       	brne	800060b8 <PCA9952_channel+0xe4>
	{
		writeVal = (0x01 << (regPos * 2));
800060a6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800060aa:	a1 78       	lsl	r8,0x1
800060ac:	30 19       	mov	r9,1
800060ae:	f2 08 09 48 	lsl	r8,r9,r8
800060b2:	ef 68 ff ff 	st.b	r7[-1],r8
800060b6:	c0 a8       	rjmp	800060ca <PCA9952_channel+0xf6>
	}
	else if (onOffn == LED_OFF)
800060b8:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800060bc:	30 08       	mov	r8,0
800060be:	f0 09 18 00 	cp.b	r9,r8
800060c2:	c0 41       	brne	800060ca <PCA9952_channel+0xf6>
	{
		writeVal = 0;
800060c4:	30 08       	mov	r8,0
800060c6:	ef 68 ff ff 	st.b	r7[-1],r8
	}
	
	regShadow |= writeVal;
800060ca:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800060ce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800060d2:	f3 e8 10 08 	or	r8,r9,r8
800060d6:	ef 68 ff fd 	st.b	r7[-3],r8
	
	switch(regIdx)
800060da:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800060de:	58 18       	cp.w	r8,1
800060e0:	c1 50       	breq	8000610a <PCA9952_channel+0x136>
800060e2:	e0 89 00 05 	brgt	800060ec <PCA9952_channel+0x118>
800060e6:	58 08       	cp.w	r8,0
800060e8:	c0 70       	breq	800060f6 <PCA9952_channel+0x122>
800060ea:	c2 d8       	rjmp	80006144 <PCA9952_channel+0x170>
800060ec:	58 28       	cp.w	r8,2
800060ee:	c1 80       	breq	8000611e <PCA9952_channel+0x14a>
800060f0:	58 38       	cp.w	r8,3
800060f2:	c2 00       	breq	80006132 <PCA9952_channel+0x15e>
800060f4:	c2 88       	rjmp	80006144 <PCA9952_channel+0x170>
	{
		case 0:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT0, regShadow);
800060f6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800060fa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800060fe:	12 9a       	mov	r10,r9
80006100:	30 2b       	mov	r11,2
80006102:	10 9c       	mov	r12,r8
80006104:	f0 1f 00 13 	mcall	80006150 <PCA9952_channel+0x17c>
			break;
80006108:	c1 e8       	rjmp	80006144 <PCA9952_channel+0x170>
		case 1:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT1, regShadow);
8000610a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000610e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006112:	12 9a       	mov	r10,r9
80006114:	30 3b       	mov	r11,3
80006116:	10 9c       	mov	r12,r8
80006118:	f0 1f 00 0e 	mcall	80006150 <PCA9952_channel+0x17c>
			break;
8000611c:	c1 48       	rjmp	80006144 <PCA9952_channel+0x170>
		case 2:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT2, regShadow);
8000611e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006122:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006126:	12 9a       	mov	r10,r9
80006128:	30 4b       	mov	r11,4
8000612a:	10 9c       	mov	r12,r8
8000612c:	f0 1f 00 09 	mcall	80006150 <PCA9952_channel+0x17c>
			break;
80006130:	c0 a8       	rjmp	80006144 <PCA9952_channel+0x170>
		case 3:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT3, regShadow);
80006132:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006136:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000613a:	12 9a       	mov	r10,r9
8000613c:	30 5b       	mov	r11,5
8000613e:	10 9c       	mov	r12,r8
80006140:	f0 1f 00 04 	mcall	80006150 <PCA9952_channel+0x17c>
			break;
	}

}
80006144:	2f bd       	sub	sp,-20
80006146:	e3 cd 80 80 	ldm	sp++,r7,pc
8000614a:	00 00       	add	r0,r0
8000614c:	80 00       	ld.sh	r0,r0[0x0]
8000614e:	5d f4       	*unknown*
80006150:	80 00       	ld.sh	r0,r0[0x0]
80006152:	5d 70       	*unknown*

80006154 <led_shelf>:

void led_shelf(unsigned char shelf, unsigned char onOffn)
{
80006154:	eb cd 40 80 	pushm	r7,lr
80006158:	1a 97       	mov	r7,sp
8000615a:	20 2d       	sub	sp,8
8000615c:	18 99       	mov	r9,r12
8000615e:	16 98       	mov	r8,r11
80006160:	ef 69 ff fc 	st.b	r7[-4],r9
80006164:	ef 68 ff f8 	st.b	r7[-8],r8
	switch(shelf)
80006168:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000616c:	58 18       	cp.w	r8,1
8000616e:	c2 f0       	breq	800061cc <led_shelf+0x78>
80006170:	e0 89 00 05 	brgt	8000617a <led_shelf+0x26>
80006174:	58 08       	cp.w	r8,0
80006176:	c0 70       	breq	80006184 <led_shelf+0x30>
80006178:	c9 58       	rjmp	800062a2 <led_shelf+0x14e>
8000617a:	58 28       	cp.w	r8,2
8000617c:	c4 c0       	breq	80006214 <led_shelf+0xc0>
8000617e:	58 38       	cp.w	r8,3
80006180:	c6 e0       	breq	8000625c <led_shelf+0x108>
80006182:	c9 08       	rjmp	800062a2 <led_shelf+0x14e>
	{
		case 0: //bottom of LED board 0 which is the upper board in the shelf, and top of LED board 1 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 0, onOffn);
80006184:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006188:	10 9a       	mov	r10,r8
8000618a:	30 0b       	mov	r11,0
8000618c:	30 1c       	mov	r12,1
8000618e:	f0 1f 00 47 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 1, onOffn);
80006192:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006196:	10 9a       	mov	r10,r8
80006198:	30 1b       	mov	r11,1
8000619a:	30 1c       	mov	r12,1
8000619c:	f0 1f 00 43 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 2, onOffn);
800061a0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800061a4:	10 9a       	mov	r10,r8
800061a6:	30 2b       	mov	r11,2
800061a8:	30 1c       	mov	r12,1
800061aa:	f0 1f 00 40 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 0, onOffn);
800061ae:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800061b2:	10 9a       	mov	r10,r8
800061b4:	30 0b       	mov	r11,0
800061b6:	30 0c       	mov	r12,0
800061b8:	f0 1f 00 3c 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 1, onOffn);
800061bc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800061c0:	10 9a       	mov	r10,r8
800061c2:	30 1b       	mov	r11,1
800061c4:	30 0c       	mov	r12,0
800061c6:	f0 1f 00 39 	mcall	800062a8 <led_shelf+0x154>
			break;
800061ca:	c6 c8       	rjmp	800062a2 <led_shelf+0x14e>

		case 1: //bottom of LED board 1 which is the upper board in the shelf, and top of LED board 2 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 3, onOffn);
800061cc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800061d0:	10 9a       	mov	r10,r8
800061d2:	30 3b       	mov	r11,3
800061d4:	30 1c       	mov	r12,1
800061d6:	f0 1f 00 35 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 4, onOffn);
800061da:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800061de:	10 9a       	mov	r10,r8
800061e0:	30 4b       	mov	r11,4
800061e2:	30 1c       	mov	r12,1
800061e4:	f0 1f 00 31 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 5, onOffn);
800061e8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800061ec:	10 9a       	mov	r10,r8
800061ee:	30 5b       	mov	r11,5
800061f0:	30 1c       	mov	r12,1
800061f2:	f0 1f 00 2e 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 2, onOffn);
800061f6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800061fa:	10 9a       	mov	r10,r8
800061fc:	30 2b       	mov	r11,2
800061fe:	30 0c       	mov	r12,0
80006200:	f0 1f 00 2a 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 3, onOffn);
80006204:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006208:	10 9a       	mov	r10,r8
8000620a:	30 3b       	mov	r11,3
8000620c:	30 0c       	mov	r12,0
8000620e:	f0 1f 00 27 	mcall	800062a8 <led_shelf+0x154>
			break;
80006212:	c4 88       	rjmp	800062a2 <led_shelf+0x14e>

		case 2: //bottom of LED board 2 which is the upper board in the shelf, and top of LED board 3 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 6, onOffn);
80006214:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006218:	10 9a       	mov	r10,r8
8000621a:	30 6b       	mov	r11,6
8000621c:	30 1c       	mov	r12,1
8000621e:	f0 1f 00 23 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 7, onOffn);
80006222:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006226:	10 9a       	mov	r10,r8
80006228:	30 7b       	mov	r11,7
8000622a:	30 1c       	mov	r12,1
8000622c:	f0 1f 00 1f 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 8, onOffn);
80006230:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006234:	10 9a       	mov	r10,r8
80006236:	30 8b       	mov	r11,8
80006238:	30 1c       	mov	r12,1
8000623a:	f0 1f 00 1c 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 4, onOffn);
8000623e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006242:	10 9a       	mov	r10,r8
80006244:	30 4b       	mov	r11,4
80006246:	30 0c       	mov	r12,0
80006248:	f0 1f 00 18 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 5, onOffn);
8000624c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006250:	10 9a       	mov	r10,r8
80006252:	30 5b       	mov	r11,5
80006254:	30 0c       	mov	r12,0
80006256:	f0 1f 00 15 	mcall	800062a8 <led_shelf+0x154>
			break;
8000625a:	c2 48       	rjmp	800062a2 <led_shelf+0x14e>

		case 3: //bottom of LED board 3 which is the upper board in the shelf, and top of LED board 4 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 9, onOffn);
8000625c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006260:	10 9a       	mov	r10,r8
80006262:	30 9b       	mov	r11,9
80006264:	30 1c       	mov	r12,1
80006266:	f0 1f 00 11 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 10, onOffn);
8000626a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000626e:	10 9a       	mov	r10,r8
80006270:	30 ab       	mov	r11,10
80006272:	30 1c       	mov	r12,1
80006274:	f0 1f 00 0d 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 11, onOffn);
80006278:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000627c:	10 9a       	mov	r10,r8
8000627e:	30 bb       	mov	r11,11
80006280:	30 1c       	mov	r12,1
80006282:	f0 1f 00 0a 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 6, onOffn);
80006286:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000628a:	10 9a       	mov	r10,r8
8000628c:	30 6b       	mov	r11,6
8000628e:	30 0c       	mov	r12,0
80006290:	f0 1f 00 06 	mcall	800062a8 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 7, onOffn);
80006294:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006298:	10 9a       	mov	r10,r8
8000629a:	30 7b       	mov	r11,7
8000629c:	30 0c       	mov	r12,0
8000629e:	f0 1f 00 03 	mcall	800062a8 <led_shelf+0x154>
			break;
	}	
	
}
800062a2:	2f ed       	sub	sp,-8
800062a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800062a8:	80 00       	ld.sh	r0,r0[0x0]
800062aa:	5f d4       	srvc	r4
800062ac:	53 68       	stdsp	sp[0xd8],r8
800062ae:	65 6c       	ld.w	r12,r2[0x58]
800062b0:	66 20       	ld.w	r0,r3[0x8]
800062b2:	30 20       	mov	r0,2
800062b4:	61 63       	ld.w	r3,r0[0x58]
800062b6:	74 69       	ld.w	r9,r10[0x18]
800062b8:	76 65       	ld.w	r5,r11[0x18]
800062ba:	0d 0a       	ld.w	r10,r6++
800062bc:	00 00       	add	r0,r0
800062be:	00 00       	add	r0,r0
800062c0:	53 68       	stdsp	sp[0xd8],r8
800062c2:	65 6c       	ld.w	r12,r2[0x58]
800062c4:	66 20       	ld.w	r0,r3[0x8]
800062c6:	31 20       	mov	r0,18
800062c8:	61 63       	ld.w	r3,r0[0x58]
800062ca:	74 69       	ld.w	r9,r10[0x18]
800062cc:	76 65       	ld.w	r5,r11[0x18]
800062ce:	0d 0a       	ld.w	r10,r6++
800062d0:	00 00       	add	r0,r0
800062d2:	00 00       	add	r0,r0
800062d4:	53 68       	stdsp	sp[0xd8],r8
800062d6:	65 6c       	ld.w	r12,r2[0x58]
800062d8:	66 20       	ld.w	r0,r3[0x8]
800062da:	32 20       	mov	r0,34
800062dc:	61 63       	ld.w	r3,r0[0x58]
800062de:	74 69       	ld.w	r9,r10[0x18]
800062e0:	76 65       	ld.w	r5,r11[0x18]
800062e2:	0d 0a       	ld.w	r10,r6++
800062e4:	00 00       	add	r0,r0
800062e6:	00 00       	add	r0,r0
800062e8:	53 68       	stdsp	sp[0xd8],r8
800062ea:	65 6c       	ld.w	r12,r2[0x58]
800062ec:	66 20       	ld.w	r0,r3[0x8]
800062ee:	33 20       	mov	r0,50
800062f0:	61 63       	ld.w	r3,r0[0x58]
800062f2:	74 69       	ld.w	r9,r10[0x18]
800062f4:	76 65       	ld.w	r5,r11[0x18]
800062f6:	0d 0a       	ld.w	r10,r6++
800062f8:	00 00       	add	r0,r0
800062fa:	00 00       	add	r0,r0
800062fc:	53 45       	stdsp	sp[0xd0],r5
800062fe:	41 4c       	lddsp	r12,sp[0x50]
80006300:	20 53       	sub	r3,5
80006302:	48 49       	lddpc	r9,80006310 <led_shelf+0x1bc>
80006304:	45 4c       	lddsp	r12,sp[0x150]
80006306:	44 20       	lddsp	r0,sp[0x108]
80006308:	44 45       	lddsp	r5,sp[0x110]
8000630a:	4d 4f       	lddpc	pc,80006458 <osc_enable+0xc>
8000630c:	20 0d       	sub	sp,0
8000630e:	0a 20       	rsub	r0,r5
80006310:	43 6f       	lddsp	pc,sp[0xd8]
80006312:	70 79       	ld.w	r9,r8[0x1c]
80006314:	72 69       	ld.w	r9,r9[0x18]
80006316:	67 68       	ld.w	r8,r3[0x58]
80006318:	74 20       	ld.w	r0,r10[0x8]
8000631a:	28 63       	sub	r3,-122
8000631c:	29 20       	sub	r0,-110
8000631e:	32 30       	mov	r0,35
80006320:	31 35       	mov	r5,19
80006322:	20 54       	sub	r4,5
80006324:	65 63       	ld.w	r3,r2[0x58]
80006326:	68 6e       	ld.w	lr,r4[0x18]
80006328:	69 63       	ld.w	r3,r4[0x58]
8000632a:	61 6c       	ld.w	r12,r0[0x58]
8000632c:	20 53       	sub	r3,5
8000632e:	6f 6c       	ld.w	r12,r7[0x58]
80006330:	75 74       	ld.w	r4,r10[0x5c]
80006332:	69 6f       	ld.w	pc,r4[0x58]
80006334:	6e 73       	ld.w	r3,r7[0x1c]
80006336:	20 47       	sub	r7,4
80006338:	72 6f       	ld.w	pc,r9[0x18]
8000633a:	75 70       	ld.w	r0,r10[0x5c]
8000633c:	2c 20       	sub	r0,-62
8000633e:	49 6e       	lddpc	lr,80006394 <led_shelf+0x240>
80006340:	63 2e       	ld.w	lr,r1[0x48]
80006342:	0d 0a       	ld.w	r10,r6++
80006344:	00 00       	add	r0,r0
80006346:	00 00       	add	r0,r0
80006348:	44 6f       	lddsp	pc,sp[0x118]
8000634a:	6f 72       	ld.w	r2,r7[0x5c]
8000634c:	20 6c       	sub	r12,6
8000634e:	61 74       	ld.w	r4,r0[0x5c]
80006350:	63 68       	ld.w	r8,r1[0x58]
80006352:	20 64       	sub	r4,6
80006354:	65 74       	ld.w	r4,r2[0x5c]
80006356:	65 63       	ld.w	r3,r2[0x58]
80006358:	74 65       	ld.w	r5,r10[0x18]
8000635a:	64 0d       	ld.w	sp,r2[0x0]
8000635c:	0a 00       	add	r0,r5
8000635e:	00 00       	add	r0,r0
80006360:	41 63       	lddsp	r3,sp[0x58]
80006362:	74 69       	ld.w	r9,r10[0x18]
80006364:	6f 6e       	ld.w	lr,r7[0x58]
80006366:	20 70       	sub	r0,7
80006368:	75 73       	ld.w	r3,r10[0x5c]
8000636a:	68 20       	ld.w	r0,r4[0x8]
8000636c:	62 75       	ld.w	r5,r1[0x1c]
8000636e:	74 74       	ld.w	r4,r10[0x1c]
80006370:	6f 6e       	ld.w	lr,r7[0x58]
80006372:	20 70       	sub	r0,7
80006374:	72 65       	ld.w	r5,r9[0x18]
80006376:	73 73       	ld.w	r3,r9[0x5c]
80006378:	20 64       	sub	r4,6
8000637a:	65 74       	ld.w	r4,r2[0x5c]
8000637c:	65 63       	ld.w	r3,r2[0x58]
8000637e:	74 65       	ld.w	r5,r10[0x18]
80006380:	64 0d       	ld.w	sp,r2[0x0]
80006382:	0a 00       	add	r0,r5
80006384:	41 63       	lddsp	r3,sp[0x58]
80006386:	74 69       	ld.w	r9,r10[0x18]
80006388:	6f 6e       	ld.w	lr,r7[0x58]
8000638a:	20 70       	sub	r0,7
8000638c:	75 73       	ld.w	r3,r10[0x5c]
8000638e:	68 20       	ld.w	r0,r4[0x8]
80006390:	62 75       	ld.w	r5,r1[0x1c]
80006392:	74 74       	ld.w	r4,r10[0x1c]
80006394:	6f 6e       	ld.w	lr,r7[0x58]
80006396:	20 72       	sub	r2,7
80006398:	65 6c       	ld.w	r12,r2[0x58]
8000639a:	65 61       	ld.w	r1,r2[0x58]
8000639c:	73 65       	ld.w	r5,r9[0x58]
8000639e:	20 64       	sub	r4,6
800063a0:	65 74       	ld.w	r4,r2[0x5c]
800063a2:	65 63       	ld.w	r3,r2[0x58]
800063a4:	74 65       	ld.w	r5,r10[0x18]
800063a6:	64 0d       	ld.w	sp,r2[0x0]
800063a8:	0a 00       	add	r0,r5
800063aa:	00 00       	add	r0,r0
800063ac:	53 74       	stdsp	sp[0xdc],r4
800063ae:	61 72       	ld.w	r2,r0[0x5c]
800063b0:	74 20       	ld.w	r0,r10[0x8]
800063b2:	73 61       	ld.w	r1,r9[0x58]
800063b4:	6e 69       	ld.w	r9,r7[0x18]
800063b6:	74 69       	ld.w	r9,r10[0x18]
800063b8:	7a 69       	ld.w	r9,sp[0x18]
800063ba:	6e 67       	ld.w	r7,r7[0x18]
800063bc:	0d 0a       	ld.w	r10,r6++
800063be:	00 00       	add	r0,r0
800063c0:	4e 6f       	lddpc	pc,80006558 <pll_config_init+0x20>
800063c2:	20 73       	sub	r3,7
800063c4:	68 65       	ld.w	r5,r4[0x18]
800063c6:	6c 76       	ld.w	r6,r6[0x1c]
800063c8:	65 73       	ld.w	r3,r2[0x5c]
800063ca:	2c 20       	sub	r0,-62
800063cc:	6e 6f       	ld.w	pc,r7[0x18]
800063ce:	20 64       	sub	r4,6
800063d0:	65 76       	ld.w	r6,r2[0x5c]
800063d2:	69 63       	ld.w	r3,r4[0x58]
800063d4:	65 73       	ld.w	r3,r2[0x5c]
800063d6:	20 6f       	sub	pc,6
800063d8:	72 20       	ld.w	r0,r9[0x8]
800063da:	73 68       	ld.w	r8,r9[0x58]
800063dc:	65 6c       	ld.w	r12,r2[0x58]
800063de:	76 65       	ld.w	r5,r11[0x18]
800063e0:	73 20       	ld.w	r0,r9[0x48]
800063e2:	61 72       	ld.w	r2,r0[0x5c]
800063e4:	65 20       	ld.w	r0,r2[0x48]
800063e6:	70 61       	ld.w	r1,r8[0x18]
800063e8:	73 74       	ld.w	r4,r9[0x5c]
800063ea:	20 6c       	sub	r12,6
800063ec:	69 66       	ld.w	r6,r4[0x58]
800063ee:	65 74       	ld.w	r4,r2[0x5c]
800063f0:	69 6d       	ld.w	sp,r4[0x58]
800063f2:	65 2c       	ld.w	r12,r2[0x48]
800063f4:	20 63       	sub	r3,6
800063f6:	68 61       	ld.w	r1,r4[0x18]
800063f8:	72 67       	ld.w	r7,r9[0x18]
800063fa:	69 6e       	ld.w	lr,r4[0x58]
800063fc:	67 20       	ld.w	r0,r3[0x48]
800063fe:	64 65       	ld.w	r5,r2[0x18]
80006400:	76 69       	ld.w	r9,r11[0x18]
80006402:	63 65       	ld.w	r5,r1[0x58]
80006404:	73 0d       	ld.w	sp,r9[0x40]
80006406:	0a 00       	add	r0,r5
80006408:	53 68       	stdsp	sp[0xd8],r8
8000640a:	65 6c       	ld.w	r12,r2[0x58]
8000640c:	66 20       	ld.w	r0,r3[0x8]
8000640e:	63 6c       	ld.w	r12,r1[0x58]
80006410:	65 61       	ld.w	r1,r2[0x58]
80006412:	6e 0d       	ld.w	sp,r7[0x0]
80006414:	0a 00       	add	r0,r5
80006416:	00 00       	add	r0,r0
80006418:	44 6f       	lddsp	pc,sp[0x118]
8000641a:	6f 72       	ld.w	r2,r7[0x5c]
8000641c:	20 6c       	sub	r12,6
8000641e:	61 74       	ld.w	r4,r0[0x5c]
80006420:	63 68       	ld.w	r8,r1[0x58]
80006422:	20 6f       	sub	pc,6
80006424:	70 65       	ld.w	r5,r8[0x18]
80006426:	6e 65       	ld.w	r5,r7[0x18]
80006428:	64 2c       	ld.w	r12,r2[0x8]
8000642a:	20 73       	sub	r3,7
8000642c:	68 75       	ld.w	r5,r4[0x1c]
8000642e:	74 74       	ld.w	r4,r10[0x1c]
80006430:	69 6e       	ld.w	lr,r4[0x58]
80006432:	67 20       	ld.w	r0,r3[0x48]
80006434:	64 6f       	ld.w	pc,r2[0x18]
80006436:	77 6e       	ld.w	lr,r11[0x58]
80006438:	20 61       	sub	r1,6
8000643a:	6c 6c       	ld.w	r12,r6[0x18]
8000643c:	20 70       	sub	r0,7
8000643e:	72 6f       	ld.w	pc,r9[0x18]
80006440:	63 65       	ld.w	r5,r1[0x58]
80006442:	73 73       	ld.w	r3,r9[0x5c]
80006444:	65 73       	ld.w	r3,r2[0x5c]
80006446:	0d 0a       	ld.w	r10,r6++
80006448:	00 00       	add	r0,r0
	...

8000644c <osc_enable>:
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);
extern bool osc_priv_rc120m_is_ready(void);

static inline void osc_enable(uint8_t id)
{
8000644c:	eb cd 40 80 	pushm	r7,lr
80006450:	1a 97       	mov	r7,sp
80006452:	20 1d       	sub	sp,4
80006454:	18 98       	mov	r8,r12
80006456:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000645a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000645e:	58 28       	cp.w	r8,2
80006460:	c1 10       	breq	80006482 <osc_enable+0x36>
80006462:	e0 89 00 05 	brgt	8000646c <osc_enable+0x20>
80006466:	58 08       	cp.w	r8,0
80006468:	c0 70       	breq	80006476 <osc_enable+0x2a>
8000646a:	c1 18       	rjmp	8000648c <osc_enable+0x40>
8000646c:	58 38       	cp.w	r8,3
8000646e:	c0 70       	breq	8000647c <osc_enable+0x30>
80006470:	58 48       	cp.w	r8,4
80006472:	c0 b0       	breq	80006488 <osc_enable+0x3c>
80006474:	c0 c8       	rjmp	8000648c <osc_enable+0x40>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
80006476:	f0 1f 00 08 	mcall	80006494 <osc_enable+0x48>
		break;
8000647a:	c0 98       	rjmp	8000648c <osc_enable+0x40>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
8000647c:	f0 1f 00 07 	mcall	80006498 <osc_enable+0x4c>
		break;
80006480:	c0 68       	rjmp	8000648c <osc_enable+0x40>
#endif

	case OSC_ID_RC8M:
		osc_priv_enable_rc8m();
80006482:	f0 1f 00 07 	mcall	8000649c <osc_enable+0x50>
		break;
80006486:	c0 38       	rjmp	8000648c <osc_enable+0x40>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
80006488:	f0 1f 00 06 	mcall	800064a0 <osc_enable+0x54>

	default:
		/* unhandled_case(id); */
		break;
	}
}
8000648c:	2f fd       	sub	sp,-4
8000648e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006492:	00 00       	add	r0,r0
80006494:	80 00       	ld.sh	r0,r0[0x0]
80006496:	59 68       	cp.w	r8,22
80006498:	80 00       	ld.sh	r0,r0[0x0]
8000649a:	59 a8       	cp.w	r8,26
8000649c:	80 00       	ld.sh	r0,r0[0x0]
8000649e:	59 e8       	cp.w	r8,30
800064a0:	80 00       	ld.sh	r0,r0[0x0]
800064a2:	5a 6c       	cp.w	r12,-26

800064a4 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
800064a4:	eb cd 40 80 	pushm	r7,lr
800064a8:	1a 97       	mov	r7,sp
800064aa:	20 1d       	sub	sp,4
800064ac:	18 98       	mov	r8,r12
800064ae:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
800064b2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800064b6:	58 38       	cp.w	r8,3
800064b8:	c1 20       	breq	800064dc <osc_get_rate+0x38>
800064ba:	e0 89 00 07 	brgt	800064c8 <osc_get_rate+0x24>
800064be:	58 08       	cp.w	r8,0
800064c0:	c0 90       	breq	800064d2 <osc_get_rate+0x2e>
800064c2:	58 28       	cp.w	r8,2
800064c4:	c0 f0       	breq	800064e2 <osc_get_rate+0x3e>
800064c6:	c1 b8       	rjmp	800064fc <osc_get_rate+0x58>
800064c8:	58 48       	cp.w	r8,4
800064ca:	c1 10       	breq	800064ec <osc_get_rate+0x48>
800064cc:	58 58       	cp.w	r8,5
800064ce:	c1 40       	breq	800064f6 <osc_get_rate+0x52>
800064d0:	c1 68       	rjmp	800064fc <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
800064d2:	e0 68 24 00 	mov	r8,9216
800064d6:	ea 18 00 f4 	orh	r8,0xf4
800064da:	c1 28       	rjmp	800064fe <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
800064dc:	e0 68 80 00 	mov	r8,32768
800064e0:	c0 f8       	rjmp	800064fe <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
800064e2:	e0 68 12 00 	mov	r8,4608
800064e6:	ea 18 00 7a 	orh	r8,0x7a
800064ea:	c0 a8       	rjmp	800064fe <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
800064ec:	e0 68 0e 00 	mov	r8,3584
800064f0:	ea 18 07 27 	orh	r8,0x727
800064f4:	c0 58       	rjmp	800064fe <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
800064f6:	e0 78 c1 38 	mov	r8,115000
800064fa:	c0 28       	rjmp	800064fe <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
800064fc:	30 08       	mov	r8,0
	}
}
800064fe:	10 9c       	mov	r12,r8
80006500:	2f fd       	sub	sp,-4
80006502:	e3 cd 80 80 	ldm	sp++,r7,pc

80006506 <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
80006506:	eb cd 40 80 	pushm	r7,lr
8000650a:	1a 97       	mov	r7,sp
8000650c:	20 2d       	sub	sp,8
8000650e:	ef 4c ff fc 	st.w	r7[-4],r12
80006512:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
80006516:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000651a:	70 09       	ld.w	r9,r8[0x0]
8000651c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006520:	2f d8       	sub	r8,-3
80006522:	30 1a       	mov	r10,1
80006524:	f4 08 09 48 	lsl	r8,r10,r8
80006528:	10 49       	or	r9,r8
8000652a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000652e:	91 09       	st.w	r8[0x0],r9
}
80006530:	2f ed       	sub	sp,-8
80006532:	e3 cd 80 80 	ldm	sp++,r7,pc
80006536:	d7 03       	nop

80006538 <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
80006538:	eb cd 40 80 	pushm	r7,lr
8000653c:	1a 97       	mov	r7,sp
8000653e:	20 5d       	sub	sp,20
80006540:	ef 4c ff f8 	st.w	r7[-8],r12
80006544:	ef 4b ff f4 	st.w	r7[-12],r11
80006548:	ef 4a ff f0 	st.w	r7[-16],r10
8000654c:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
80006550:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006554:	5c 58       	castu.b	r8
80006556:	10 9c       	mov	r12,r8
80006558:	f0 1f 00 2e 	mcall	80006610 <pll_config_init+0xd8>
8000655c:	18 99       	mov	r9,r12
8000655e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006562:	f2 08 02 48 	mul	r8,r9,r8
80006566:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8000656a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000656e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006572:	f0 09 0d 08 	divu	r8,r8,r9
80006576:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8000657a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000657e:	30 09       	mov	r9,0
80006580:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
80006582:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006586:	e0 69 b3 ff 	mov	r9,46079
8000658a:	ea 19 04 c4 	orh	r9,0x4c4
8000658e:	12 38       	cp.w	r8,r9
80006590:	e0 8b 00 16 	brhi	800065bc <pll_config_init+0x84>
80006594:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006598:	58 88       	cp.w	r8,8
8000659a:	e0 8b 00 11 	brhi	800065bc <pll_config_init+0x84>
		mul *= 2;
8000659e:	ee f8 ff ec 	ld.w	r8,r7[-20]
800065a2:	a1 78       	lsl	r8,0x1
800065a4:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
800065a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800065ac:	a1 78       	lsl	r8,0x1
800065ae:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
800065b2:	30 1b       	mov	r11,1
800065b4:	ee fc ff f8 	ld.w	r12,r7[-8]
800065b8:	f0 1f 00 17 	mcall	80006614 <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
800065bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800065c0:	e0 69 fe 7f 	mov	r9,65151
800065c4:	ea 19 0a 21 	orh	r9,0xa21
800065c8:	12 38       	cp.w	r8,r9
800065ca:	e0 8b 00 07 	brhi	800065d8 <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
800065ce:	30 0b       	mov	r11,0
800065d0:	ee fc ff f8 	ld.w	r12,r7[-8]
800065d4:	f0 1f 00 10 	mcall	80006614 <pll_config_init+0xdc>

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
800065d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800065dc:	70 09       	ld.w	r9,r8[0x0]
800065de:	ee f8 ff ec 	ld.w	r8,r7[-20]
800065e2:	20 18       	sub	r8,1
800065e4:	f0 0a 15 10 	lsl	r10,r8,0x10
		| (div << AVR32_SCIF_PLLDIV)
800065e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800065ec:	a9 68       	lsl	r8,0x8
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
800065ee:	10 4a       	or	r10,r8
		| (src << AVR32_SCIF_PLLOSC);
800065f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800065f4:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
800065f6:	f5 e8 10 08 	or	r8,r10,r8
800065fa:	f3 e8 10 08 	or	r8,r9,r8
800065fe:	10 99       	mov	r9,r8
80006600:	ea 19 3f 00 	orh	r9,0x3f00
80006604:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006608:	91 09       	st.w	r8[0x0],r9
		| (div << AVR32_SCIF_PLLDIV)
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
		| (src << AVR32_SCIF_PLLOSC);
}
8000660a:	2f bd       	sub	sp,-20
8000660c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006610:	80 00       	ld.sh	r0,r0[0x0]
80006612:	64 a4       	ld.w	r4,r2[0x28]
80006614:	80 00       	ld.sh	r0,r0[0x0]
80006616:	65 06       	ld.w	r6,r2[0x40]

80006618 <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_enable(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_disable(unsigned int pll_id);

static inline bool pll_is_locked(unsigned int pll_id)
{
80006618:	eb cd 40 80 	pushm	r7,lr
8000661c:	1a 97       	mov	r7,sp
8000661e:	20 1d       	sub	sp,4
80006620:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
80006624:	fe 78 08 00 	mov	r8,-63488
80006628:	70 59       	ld.w	r9,r8[0x14]
8000662a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000662e:	2f c8       	sub	r8,-4
80006630:	30 1a       	mov	r10,1
80006632:	f4 08 09 48 	lsl	r8,r10,r8
80006636:	f3 e8 00 08 	and	r8,r9,r8
8000663a:	5f 18       	srne	r8
8000663c:	5c 58       	castu.b	r8
}
8000663e:	10 9c       	mov	r12,r8
80006640:	2f fd       	sub	sp,-4
80006642:	e3 cd 80 80 	ldm	sp++,r7,pc
80006646:	d7 03       	nop

80006648 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
80006648:	eb cd 40 80 	pushm	r7,lr
8000664c:	1a 97       	mov	r7,sp
8000664e:	20 1d       	sub	sp,4
80006650:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
80006654:	ee fc ff fc 	ld.w	r12,r7[-4]
80006658:	f0 1f 00 06 	mcall	80006670 <pll_wait_for_lock+0x28>
8000665c:	18 98       	mov	r8,r12
8000665e:	ec 18 00 01 	eorl	r8,0x1
80006662:	5c 58       	castu.b	r8
80006664:	cf 81       	brne	80006654 <pll_wait_for_lock+0xc>
		/* Do nothing */
	}

	return 0;
80006666:	30 08       	mov	r8,0
}
80006668:	10 9c       	mov	r12,r8
8000666a:	2f fd       	sub	sp,-4
8000666c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006670:	80 00       	ld.sh	r0,r0[0x0]
80006672:	66 18       	ld.w	r8,r3[0x4]

80006674 <display_text>:
};


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
80006674:	eb cd 40 80 	pushm	r7,lr
80006678:	1a 97       	mov	r7,sp
8000667a:	20 2d       	sub	sp,8
8000667c:	18 98       	mov	r8,r12
8000667e:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i = 0; i<7; i++)
80006682:	30 08       	mov	r8,0
80006684:	ef 48 ff fc 	st.w	r7[-4],r8
80006688:	c1 58       	rjmp	800066b2 <display_text+0x3e>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
8000668a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000668e:	48 e8       	lddpc	r8,800066c4 <display_text+0x50>
80006690:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006694:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006698:	f2 08 00 08 	add	r8,r9,r8
8000669c:	11 88       	ld.ub	r8,r8[0x0]
8000669e:	10 9b       	mov	r11,r8
800066a0:	fc 7c 14 00 	mov	r12,-191488
800066a4:	f0 1f 00 09 	mcall	800066c8 <display_text+0x54>


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
	for (int i = 0; i<7; i++)
800066a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800066ac:	2f f8       	sub	r8,-1
800066ae:	ef 48 ff fc 	st.w	r7[-4],r8
800066b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800066b6:	58 68       	cp.w	r8,6
800066b8:	fe 9a ff e9 	brle	8000668a <display_text+0x16>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
	}
	
}
800066bc:	2f ed       	sub	sp,-8
800066be:	e3 cd 80 80 	ldm	sp++,r7,pc
800066c2:	00 00       	add	r0,r0
800066c4:	00 00       	add	r0,r0
800066c6:	00 5c       	eor	r12,r0
800066c8:	80 00       	ld.sh	r0,r0[0x0]
800066ca:	58 1c       	cp.w	r12,1

800066cc <chassis_error>:

void chassis_error(void);
void chassis_error(void)
{
800066cc:	eb cd 40 80 	pushm	r7,lr
800066d0:	1a 97       	mov	r7,sp
	display_text(IDX_ERROR);
800066d2:	30 4c       	mov	r12,4
800066d4:	f0 1f 00 02 	mcall	800066dc <chassis_error+0x10>
	
	while(1); //catastrophic error, just hang TODO: allow technician interface to work here possibly
800066d8:	c0 08       	rjmp	800066d8 <chassis_error+0xc>
800066da:	00 00       	add	r0,r0
800066dc:	80 00       	ld.sh	r0,r0[0x0]
800066de:	66 74       	ld.w	r4,r3[0x1c]

800066e0 <init_io>:
	
}

void init_io(void);
void init_io(void)
{
800066e0:	eb cd 40 80 	pushm	r7,lr
800066e4:	1a 97       	mov	r7,sp
800066e6:	20 1d       	sub	sp,4
	uint32_t ioFlags;
	
	
	ioFlags = (GPIO_DIR_INPUT);
800066e8:	30 08       	mov	r8,0
800066ea:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DOOR_LATCH, ioFlags);
800066ee:	ee fb ff fc 	ld.w	r11,r7[-4]
800066f2:	33 ec       	mov	r12,62
800066f4:	f0 1f 00 2b 	mcall	800067a0 <init_io+0xc0>

	ioFlags = (GPIO_DIR_INPUT);
800066f8:	30 08       	mov	r8,0
800066fa:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_ACTION_PB, ioFlags);
800066fe:	ee fb ff fc 	ld.w	r11,r7[-4]
80006702:	33 fc       	mov	r12,63
80006704:	f0 1f 00 27 	mcall	800067a0 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006708:	30 38       	mov	r8,3
8000670a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID0, ioFlags);
8000670e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006712:	33 3c       	mov	r12,51
80006714:	f0 1f 00 23 	mcall	800067a0 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006718:	30 38       	mov	r8,3
8000671a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID1, ioFlags);
8000671e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006722:	33 4c       	mov	r12,52
80006724:	f0 1f 00 1f 	mcall	800067a0 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006728:	30 38       	mov	r8,3
8000672a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID2, ioFlags);
8000672e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006732:	33 5c       	mov	r12,53
80006734:	f0 1f 00 1b 	mcall	800067a0 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006738:	30 38       	mov	r8,3
8000673a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID3, ioFlags);
8000673e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006742:	33 6c       	mov	r12,54
80006744:	f0 1f 00 17 	mcall	800067a0 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006748:	30 38       	mov	r8,3
8000674a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID4, ioFlags);
8000674e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006752:	33 7c       	mov	r12,55
80006754:	f0 1f 00 13 	mcall	800067a0 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
80006758:	30 18       	mov	r8,1
8000675a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DEBUG_LED, ioFlags);
8000675e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006762:	37 cc       	mov	r12,124
80006764:	f0 1f 00 0f 	mcall	800067a0 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006768:	30 38       	mov	r8,3
8000676a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_PSUPPLY_ONn, ioFlags);
8000676e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006772:	31 7c       	mov	r12,23
80006774:	f0 1f 00 0b 	mcall	800067a0 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006778:	30 38       	mov	r8,3
8000677a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_LED_OEn, ioFlags);
8000677e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006782:	31 6c       	mov	r12,22
80006784:	f0 1f 00 07 	mcall	800067a0 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW); //high=1x multiplier, low=4x multiplier 10apr15
80006788:	30 18       	mov	r8,1
8000678a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_MFP, ioFlags);
8000678e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006792:	31 5c       	mov	r12,21
80006794:	f0 1f 00 03 	mcall	800067a0 <init_io+0xc0>

}
80006798:	2f fd       	sub	sp,-4
8000679a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000679e:	00 00       	add	r0,r0
800067a0:	80 00       	ld.sh	r0,r0[0x0]
800067a2:	47 b0       	lddsp	r0,sp[0x1ec]

800067a4 <read_led_board_serial_ids>:
};

/* One serial ID chip per board */
void read_led_board_serial_ids(void);
void read_led_board_serial_ids(void)
{
800067a4:	eb cd 40 e0 	pushm	r5-r7,lr
800067a8:	1a 97       	mov	r7,sp
800067aa:	20 2d       	sub	sp,8
	/*
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
800067ac:	30 1c       	mov	r12,1
800067ae:	f0 1f 00 6e 	mcall	80006964 <read_led_board_serial_ids+0x1c0>
	
	ledBrd[0].present = !OWTouchReset(0);
800067b2:	30 0c       	mov	r12,0
800067b4:	f0 1f 00 6d 	mcall	80006968 <read_led_board_serial_ids+0x1c4>
800067b8:	18 98       	mov	r8,r12
800067ba:	58 08       	cp.w	r8,0
800067bc:	5f 08       	sreq	r8
800067be:	4e c9       	lddpc	r9,8000696c <read_led_board_serial_ids+0x1c8>
800067c0:	f3 68 00 08 	st.b	r9[8],r8
	ledBrd[1].present = !OWTouchReset(1);
800067c4:	30 1c       	mov	r12,1
800067c6:	f0 1f 00 69 	mcall	80006968 <read_led_board_serial_ids+0x1c4>
800067ca:	18 98       	mov	r8,r12
800067cc:	58 08       	cp.w	r8,0
800067ce:	5f 08       	sreq	r8
800067d0:	4e 79       	lddpc	r9,8000696c <read_led_board_serial_ids+0x1c8>
800067d2:	f3 68 00 16 	st.b	r9[22],r8
	ledBrd[2].present = !OWTouchReset(2);
800067d6:	30 2c       	mov	r12,2
800067d8:	f0 1f 00 64 	mcall	80006968 <read_led_board_serial_ids+0x1c4>
800067dc:	18 98       	mov	r8,r12
800067de:	58 08       	cp.w	r8,0
800067e0:	5f 08       	sreq	r8
800067e2:	4e 39       	lddpc	r9,8000696c <read_led_board_serial_ids+0x1c8>
800067e4:	f3 68 00 24 	st.b	r9[36],r8
	ledBrd[3].present = !OWTouchReset(3);
800067e8:	30 3c       	mov	r12,3
800067ea:	f0 1f 00 60 	mcall	80006968 <read_led_board_serial_ids+0x1c4>
800067ee:	18 98       	mov	r8,r12
800067f0:	58 08       	cp.w	r8,0
800067f2:	5f 08       	sreq	r8
800067f4:	4d e9       	lddpc	r9,8000696c <read_led_board_serial_ids+0x1c8>
800067f6:	f3 68 00 32 	st.b	r9[50],r8
	ledBrd[4].present = !OWTouchReset(4);
800067fa:	30 4c       	mov	r12,4
800067fc:	f0 1f 00 5b 	mcall	80006968 <read_led_board_serial_ids+0x1c4>
80006800:	18 98       	mov	r8,r12
80006802:	58 08       	cp.w	r8,0
80006804:	5f 08       	sreq	r8
80006806:	4d a9       	lddpc	r9,8000696c <read_led_board_serial_ids+0x1c8>
80006808:	f3 68 00 40 	st.b	r9[64],r8
	
	if (ledBrd[0].present && ledBrd[1].present)
8000680c:	4d 88       	lddpc	r8,8000696c <read_led_board_serial_ids+0x1c8>
8000680e:	f1 38 00 08 	ld.ub	r8,r8[8]
80006812:	58 08       	cp.w	r8,0
80006814:	c0 90       	breq	80006826 <read_led_board_serial_ids+0x82>
80006816:	4d 68       	lddpc	r8,8000696c <read_led_board_serial_ids+0x1c8>
80006818:	f1 38 00 16 	ld.ub	r8,r8[22]
8000681c:	58 08       	cp.w	r8,0
8000681e:	c0 40       	breq	80006826 <read_led_board_serial_ids+0x82>
	{
		shelf[0].present = 1;
80006820:	4d 49       	lddpc	r9,80006970 <read_led_board_serial_ids+0x1cc>
80006822:	30 18       	mov	r8,1
80006824:	b2 c8       	st.b	r9[0x4],r8
	}
	if (ledBrd[1].present && ledBrd[2].present)
80006826:	4d 28       	lddpc	r8,8000696c <read_led_board_serial_ids+0x1c8>
80006828:	f1 38 00 16 	ld.ub	r8,r8[22]
8000682c:	58 08       	cp.w	r8,0
8000682e:	c0 a0       	breq	80006842 <read_led_board_serial_ids+0x9e>
80006830:	4c f8       	lddpc	r8,8000696c <read_led_board_serial_ids+0x1c8>
80006832:	f1 38 00 24 	ld.ub	r8,r8[36]
80006836:	58 08       	cp.w	r8,0
80006838:	c0 50       	breq	80006842 <read_led_board_serial_ids+0x9e>
	{
		shelf[1].present = 1;
8000683a:	4c e9       	lddpc	r9,80006970 <read_led_board_serial_ids+0x1cc>
8000683c:	30 18       	mov	r8,1
8000683e:	f3 68 00 09 	st.b	r9[9],r8
	}
	if (ledBrd[2].present && ledBrd[3].present)
80006842:	4c b8       	lddpc	r8,8000696c <read_led_board_serial_ids+0x1c8>
80006844:	f1 38 00 24 	ld.ub	r8,r8[36]
80006848:	58 08       	cp.w	r8,0
8000684a:	c0 a0       	breq	8000685e <read_led_board_serial_ids+0xba>
8000684c:	4c 88       	lddpc	r8,8000696c <read_led_board_serial_ids+0x1c8>
8000684e:	f1 38 00 32 	ld.ub	r8,r8[50]
80006852:	58 08       	cp.w	r8,0
80006854:	c0 50       	breq	8000685e <read_led_board_serial_ids+0xba>
	{
		shelf[2].present = 1;
80006856:	4c 79       	lddpc	r9,80006970 <read_led_board_serial_ids+0x1cc>
80006858:	30 18       	mov	r8,1
8000685a:	f3 68 00 0e 	st.b	r9[14],r8
	}
	if (ledBrd[3].present && ledBrd[4].present)
8000685e:	4c 48       	lddpc	r8,8000696c <read_led_board_serial_ids+0x1c8>
80006860:	f1 38 00 32 	ld.ub	r8,r8[50]
80006864:	58 08       	cp.w	r8,0
80006866:	c0 a0       	breq	8000687a <read_led_board_serial_ids+0xd6>
80006868:	4c 18       	lddpc	r8,8000696c <read_led_board_serial_ids+0x1c8>
8000686a:	f1 38 00 40 	ld.ub	r8,r8[64]
8000686e:	58 08       	cp.w	r8,0
80006870:	c0 50       	breq	8000687a <read_led_board_serial_ids+0xd6>
	{
		shelf[3].present = 1;
80006872:	4c 09       	lddpc	r9,80006970 <read_led_board_serial_ids+0x1cc>
80006874:	30 18       	mov	r8,1
80006876:	f3 68 00 13 	st.b	r9[19],r8
	}
	

//for (;;) //DEBUG 12may15
//{
	for (int i=0; i<NUM_LED_BOARDS; i++)
8000687a:	30 08       	mov	r8,0
8000687c:	ef 48 ff f8 	st.w	r7[-8],r8
80006880:	c6 a8       	rjmp	80006954 <read_led_board_serial_ids+0x1b0>
	{
		if (ledBrd[i].present)
80006882:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006886:	4b aa       	lddpc	r10,8000696c <read_led_board_serial_ids+0x1c8>
80006888:	12 98       	mov	r8,r9
8000688a:	a3 78       	lsl	r8,0x3
8000688c:	12 18       	sub	r8,r9
8000688e:	a1 78       	lsl	r8,0x1
80006890:	f4 08 00 08 	add	r8,r10,r8
80006894:	2f 88       	sub	r8,-8
80006896:	11 88       	ld.ub	r8,r8[0x0]
80006898:	58 08       	cp.w	r8,0
8000689a:	c5 80       	breq	8000694a <read_led_board_serial_ids+0x1a6>
		{
			OWWriteByte(i, 0x33); //Read ID command
8000689c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800068a0:	5c 58       	castu.b	r8
800068a2:	33 3b       	mov	r11,51
800068a4:	10 9c       	mov	r12,r8
800068a6:	f0 1f 00 34 	mcall	80006974 <read_led_board_serial_ids+0x1d0>
			
			ledBrd[i].idFamily = OWReadByte(i);
800068aa:	ee f6 ff f8 	ld.w	r6,r7[-8]
800068ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800068b2:	5c 58       	castu.b	r8
800068b4:	10 9c       	mov	r12,r8
800068b6:	f0 1f 00 31 	mcall	80006978 <read_led_board_serial_ids+0x1d4>
800068ba:	18 98       	mov	r8,r12
800068bc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800068c0:	4a ba       	lddpc	r10,8000696c <read_led_board_serial_ids+0x1c8>
800068c2:	0c 98       	mov	r8,r6
800068c4:	a3 78       	lsl	r8,0x3
800068c6:	0c 18       	sub	r8,r6
800068c8:	a1 78       	lsl	r8,0x1
800068ca:	10 0a       	add	r10,r8
800068cc:	12 98       	mov	r8,r9
800068ce:	b4 88       	st.b	r10[0x0],r8
			
			for (int j=0; j<6; j++)
800068d0:	30 08       	mov	r8,0
800068d2:	ef 48 ff fc 	st.w	r7[-4],r8
800068d6:	c1 f8       	rjmp	80006914 <read_led_board_serial_ids+0x170>
			{
				ledBrd[i].id[j] = OWReadByte(i);
800068d8:	ee f6 ff f8 	ld.w	r6,r7[-8]
800068dc:	ee f5 ff fc 	ld.w	r5,r7[-4]
800068e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800068e4:	5c 58       	castu.b	r8
800068e6:	10 9c       	mov	r12,r8
800068e8:	f0 1f 00 24 	mcall	80006978 <read_led_board_serial_ids+0x1d4>
800068ec:	18 98       	mov	r8,r12
800068ee:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800068f2:	49 fa       	lddpc	r10,8000696c <read_led_board_serial_ids+0x1c8>
800068f4:	0c 98       	mov	r8,r6
800068f6:	a3 78       	lsl	r8,0x3
800068f8:	0c 18       	sub	r8,r6
800068fa:	a1 78       	lsl	r8,0x1
800068fc:	f4 08 00 08 	add	r8,r10,r8
80006900:	0a 08       	add	r8,r5
80006902:	f0 ca ff ff 	sub	r10,r8,-1
80006906:	12 98       	mov	r8,r9
80006908:	b4 88       	st.b	r10[0x0],r8
		{
			OWWriteByte(i, 0x33); //Read ID command
			
			ledBrd[i].idFamily = OWReadByte(i);
			
			for (int j=0; j<6; j++)
8000690a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000690e:	2f f8       	sub	r8,-1
80006910:	ef 48 ff fc 	st.w	r7[-4],r8
80006914:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006918:	58 58       	cp.w	r8,5
8000691a:	fe 9a ff df 	brle	800068d8 <read_led_board_serial_ids+0x134>
			{
				ledBrd[i].id[j] = OWReadByte(i);
			}
			
			ledBrd[i].idcsum = OWReadByte(i);
8000691e:	ee f6 ff f8 	ld.w	r6,r7[-8]
80006922:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006926:	5c 58       	castu.b	r8
80006928:	10 9c       	mov	r12,r8
8000692a:	f0 1f 00 14 	mcall	80006978 <read_led_board_serial_ids+0x1d4>
8000692e:	18 98       	mov	r8,r12
80006930:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006934:	48 ea       	lddpc	r10,8000696c <read_led_board_serial_ids+0x1c8>
80006936:	0c 98       	mov	r8,r6
80006938:	a3 78       	lsl	r8,0x3
8000693a:	0c 18       	sub	r8,r6
8000693c:	a1 78       	lsl	r8,0x1
8000693e:	f4 08 00 08 	add	r8,r10,r8
80006942:	f0 ca ff f9 	sub	r10,r8,-7
80006946:	12 98       	mov	r8,r9
80006948:	b4 88       	st.b	r10[0x0],r8
	}
	

//for (;;) //DEBUG 12may15
//{
	for (int i=0; i<NUM_LED_BOARDS; i++)
8000694a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000694e:	2f f8       	sub	r8,-1
80006950:	ef 48 ff f8 	st.w	r7[-8],r8
80006954:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006958:	58 48       	cp.w	r8,4
8000695a:	fe 9a ff 94 	brle	80006882 <read_led_board_serial_ids+0xde>
	ledBrd[2].id[2] = 0x67;
	ledBrd[2].id[3] = 0x45;
	ledBrd[2].id[4] = 0x23;
	ledBrd[2].id[5] = 0x01;
#endif
}
8000695e:	2f ed       	sub	sp,-8
80006960:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006964:	80 00       	ld.sh	r0,r0[0x0]
80006966:	21 74       	sub	r4,23
80006968:	80 00       	ld.sh	r0,r0[0x0]
8000696a:	22 34       	sub	r4,35
8000696c:	00 00       	add	r0,r0
8000696e:	02 f4       	st.b	--r1,r4
80006970:	00 00       	add	r0,r0
80006972:	03 3a       	ld.ub	r10,r1++
80006974:	80 00       	ld.sh	r0,r0[0x0]
80006976:	31 04       	mov	r4,16
80006978:	80 00       	ld.sh	r0,r0[0x0]
8000697a:	31 5c       	mov	r12,21

8000697c <check_led_brd_side_lifetime>:
};

/* Each side of an LED board will get different usage */
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx);
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx)
{
8000697c:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80006980:	1a 97       	mov	r7,sp
80006982:	20 4d       	sub	sp,16
80006984:	18 98       	mov	r8,r12
80006986:	ef 68 ff f0 	st.b	r7[-16],r8
	 * Find the record for this board's serial ID number, and check the usage hours and see if we
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
8000698a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000698e:	4e 1a       	lddpc	r10,80006b10 <check_led_brd_side_lifetime+0x194>
80006990:	12 98       	mov	r8,r9
80006992:	a3 68       	lsl	r8,0x2
80006994:	12 08       	add	r8,r9
80006996:	f4 08 00 08 	add	r8,r10,r8
8000699a:	2f f8       	sub	r8,-1
8000699c:	11 88       	ld.ub	r8,r8[0x0]
8000699e:	ef 68 ff f7 	st.b	r7[-9],r8
	hours = (usageShdw[0].u[idx].hrs_thous * 1000) +
800069a2:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800069a6:	4d ca       	lddpc	r10,80006b14 <check_led_brd_side_lifetime+0x198>
800069a8:	12 98       	mov	r8,r9
800069aa:	a3 68       	lsl	r8,0x2
800069ac:	12 08       	add	r8,r9
800069ae:	a1 78       	lsl	r8,0x1
800069b0:	f4 08 00 08 	add	r8,r10,r8
800069b4:	2f c8       	sub	r8,-4
800069b6:	11 b8       	ld.ub	r8,r8[0x3]
800069b8:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800069bc:	5c 58       	castu.b	r8
800069be:	10 99       	mov	r9,r8
800069c0:	e0 68 03 e8 	mov	r8,1000
800069c4:	f2 08 02 4a 	mul	r10,r9,r8
		(usageShdw[0].u[idx].hrs_huns * 100) +
800069c8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800069cc:	4d 2b       	lddpc	r11,80006b14 <check_led_brd_side_lifetime+0x198>
800069ce:	12 98       	mov	r8,r9
800069d0:	a3 68       	lsl	r8,0x2
800069d2:	12 08       	add	r8,r9
800069d4:	a1 78       	lsl	r8,0x1
800069d6:	f6 08 00 08 	add	r8,r11,r8
800069da:	2f c8       	sub	r8,-4
800069dc:	11 b8       	ld.ub	r8,r8[0x3]
800069de:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800069e2:	5c 58       	castu.b	r8
800069e4:	f0 08 10 64 	mul	r8,r8,100
800069e8:	10 0a       	add	r10,r8
		(usageShdw[0].u[idx].hrs_tens * 10) +
800069ea:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800069ee:	4c ab       	lddpc	r11,80006b14 <check_led_brd_side_lifetime+0x198>
800069f0:	12 98       	mov	r8,r9
800069f2:	a3 68       	lsl	r8,0x2
800069f4:	12 08       	add	r8,r9
800069f6:	a1 78       	lsl	r8,0x1
800069f8:	f6 08 00 08 	add	r8,r11,r8
800069fc:	2f 88       	sub	r8,-8
800069fe:	11 88       	ld.ub	r8,r8[0x0]
80006a00:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80006a04:	5c 58       	castu.b	r8
80006a06:	10 99       	mov	r9,r8
80006a08:	12 98       	mov	r8,r9
80006a0a:	a3 68       	lsl	r8,0x2
80006a0c:	12 08       	add	r8,r9
80006a0e:	a1 78       	lsl	r8,0x1
80006a10:	10 0a       	add	r10,r8
		(usageShdw[0].u[idx].hrs_ones);
80006a12:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006a16:	4c 0b       	lddpc	r11,80006b14 <check_led_brd_side_lifetime+0x198>
80006a18:	12 98       	mov	r8,r9
80006a1a:	a3 68       	lsl	r8,0x2
80006a1c:	12 08       	add	r8,r9
80006a1e:	a1 78       	lsl	r8,0x1
80006a20:	f6 08 00 08 	add	r8,r11,r8
80006a24:	2f 88       	sub	r8,-8
80006a26:	11 88       	ld.ub	r8,r8[0x0]
80006a28:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006a2c:	5c 58       	castu.b	r8
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
	hours = (usageShdw[0].u[idx].hrs_thous * 1000) +
80006a2e:	f4 08 00 08 	add	r8,r10,r8
80006a32:	ef 48 ff f8 	st.w	r7[-8],r8
		

/*
 * Since we have to calculate the hours to see if the shelf is valid, finish out the calculations for the sanitizing time also. We'll need it later.
 */
	intensity = ((0.00002 * hours * hours) - (0.0699 * hours) + 92.879);
80006a36:	ee fc ff f8 	ld.w	r12,r7[-8]
80006a3a:	f0 1f 00 38 	mcall	80006b18 <check_led_brd_side_lifetime+0x19c>
80006a3e:	e0 68 68 f1 	mov	r8,26865
80006a42:	ea 18 88 e3 	orh	r8,0x88e3
80006a46:	e0 69 f8 b5 	mov	r9,63669
80006a4a:	ea 19 3e f4 	orh	r9,0x3ef4
80006a4e:	f0 1f 00 34 	mcall	80006b1c <check_led_brd_side_lifetime+0x1a0>
80006a52:	14 98       	mov	r8,r10
80006a54:	16 99       	mov	r9,r11
80006a56:	10 92       	mov	r2,r8
80006a58:	12 93       	mov	r3,r9
80006a5a:	ee fc ff f8 	ld.w	r12,r7[-8]
80006a5e:	f0 1f 00 2f 	mcall	80006b18 <check_led_brd_side_lifetime+0x19c>
80006a62:	14 98       	mov	r8,r10
80006a64:	16 99       	mov	r9,r11
80006a66:	04 9a       	mov	r10,r2
80006a68:	06 9b       	mov	r11,r3
80006a6a:	f0 1f 00 2d 	mcall	80006b1c <check_led_brd_side_lifetime+0x1a0>
80006a6e:	14 98       	mov	r8,r10
80006a70:	16 99       	mov	r9,r11
80006a72:	10 92       	mov	r2,r8
80006a74:	12 93       	mov	r3,r9
80006a76:	ee fc ff f8 	ld.w	r12,r7[-8]
80006a7a:	f0 1f 00 28 	mcall	80006b18 <check_led_brd_side_lifetime+0x19c>
80006a7e:	e0 68 8a db 	mov	r8,35547
80006a82:	ea 18 65 fd 	orh	r8,0x65fd
80006a86:	e0 69 e4 f7 	mov	r9,58615
80006a8a:	ea 19 bf b1 	orh	r9,0xbfb1
80006a8e:	f0 1f 00 24 	mcall	80006b1c <check_led_brd_side_lifetime+0x1a0>
80006a92:	14 98       	mov	r8,r10
80006a94:	16 99       	mov	r9,r11
80006a96:	04 9a       	mov	r10,r2
80006a98:	06 9b       	mov	r11,r3
80006a9a:	f0 1f 00 22 	mcall	80006b20 <check_led_brd_side_lifetime+0x1a4>
80006a9e:	14 98       	mov	r8,r10
80006aa0:	16 99       	mov	r9,r11
80006aa2:	10 9a       	mov	r10,r8
80006aa4:	12 9b       	mov	r11,r9
80006aa6:	e0 68 4b c7 	mov	r8,19399
80006aaa:	ea 18 89 37 	orh	r8,0x8937
80006aae:	e0 69 38 41 	mov	r9,14401
80006ab2:	ea 19 40 57 	orh	r9,0x4057
80006ab6:	f0 1f 00 1b 	mcall	80006b20 <check_led_brd_side_lifetime+0x1a4>
80006aba:	14 98       	mov	r8,r10
80006abc:	16 99       	mov	r9,r11
80006abe:	10 9a       	mov	r10,r8
80006ac0:	12 9b       	mov	r11,r9
80006ac2:	f0 1f 00 19 	mcall	80006b24 <check_led_brd_side_lifetime+0x1a8>
80006ac6:	18 98       	mov	r8,r12
80006ac8:	ef 48 ff fc 	st.w	r7[-4],r8
		
	ledBrdSide[sideIdx].sanitizeMinutes = (20 * 100)/intensity; //Shortest sanitize time is 20 minutes. Sanitize time increases as LED intensity drops with usage. Sanitize time is around 49 minutes when usage is at 2000 hours.
80006acc:	ef 36 ff f0 	ld.ub	r6,r7[-16]
80006ad0:	ee fb ff fc 	ld.w	r11,r7[-4]
80006ad4:	fc 1c 44 fa 	movh	r12,0x44fa
80006ad8:	f0 1f 00 14 	mcall	80006b28 <check_led_brd_side_lifetime+0x1ac>
80006adc:	18 98       	mov	r8,r12
80006ade:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
80006ae2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006ae6:	48 ba       	lddpc	r10,80006b10 <check_led_brd_side_lifetime+0x194>
80006ae8:	0c 98       	mov	r8,r6
80006aea:	a3 68       	lsl	r8,0x2
80006aec:	0c 08       	add	r8,r6
80006aee:	10 0a       	add	r10,r8
80006af0:	12 98       	mov	r8,r9
80006af2:	b4 88       	st.b	r10[0x0],r8
	
	if (hours < 1999)
80006af4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006af8:	e0 48 07 ce 	cp.w	r8,1998
80006afc:	e0 8b 00 04 	brhi	80006b04 <check_led_brd_side_lifetime+0x188>
	{
		return LED_BOARD_SIDE_WITHIN_LIFETIME_LIMIT;
80006b00:	30 18       	mov	r8,1
80006b02:	c0 28       	rjmp	80006b06 <check_led_brd_side_lifetime+0x18a>
	}
	else
	{
		return LED_BOARD_SIDE_PAST_LIFETIME_LIMIT;
80006b04:	30 08       	mov	r8,0
	}
}
80006b06:	10 9c       	mov	r12,r8
80006b08:	2f cd       	sub	sp,-16
80006b0a:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80006b0e:	00 00       	add	r0,r0
80006b10:	00 00       	add	r0,r0
80006b12:	0b 24       	ld.uh	r4,r5++
80006b14:	00 00       	add	r0,r0
80006b16:	03 88       	ld.ub	r8,r1[0x0]
80006b18:	80 00       	ld.sh	r0,r0[0x0]
80006b1a:	9f e4       	st.w	pc[0x38],r4
80006b1c:	80 00       	ld.sh	r0,r0[0x0]
80006b1e:	9b 60       	st.w	sp[0x18],r0
80006b20:	80 00       	ld.sh	r0,r0[0x0]
80006b22:	9e d4       	ld.uh	r4,pc[0xa]
80006b24:	80 00       	ld.sh	r0,r0[0x0]
80006b26:	a2 2c       	st.h	r1[0x4],r12
80006b28:	80 00       	ld.sh	r0,r0[0x0]
80006b2a:	a0 cc       	st.b	r0[0x4],r12

80006b2c <check_led_brd_side_lifetimes>:

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
80006b2c:	eb cd 40 c0 	pushm	r6-r7,lr
80006b30:	1a 97       	mov	r7,sp
80006b32:	20 2d       	sub	sp,8
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80006b34:	30 08       	mov	r8,0
80006b36:	ef 48 ff fc 	st.w	r7[-4],r8
80006b3a:	c3 78       	rjmp	80006ba8 <check_led_brd_side_lifetimes+0x7c>
	{
		brdIdx = ledBrdSide[i].boardIdx;
80006b3c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006b40:	49 ea       	lddpc	r10,80006bb8 <check_led_brd_side_lifetimes+0x8c>
80006b42:	12 98       	mov	r8,r9
80006b44:	a3 68       	lsl	r8,0x2
80006b46:	12 08       	add	r8,r9
80006b48:	f4 08 00 08 	add	r8,r10,r8
80006b4c:	2f c8       	sub	r8,-4
80006b4e:	11 88       	ld.ub	r8,r8[0x0]
80006b50:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[brdIdx].present)
80006b54:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80006b58:	49 9a       	lddpc	r10,80006bbc <check_led_brd_side_lifetimes+0x90>
80006b5a:	12 98       	mov	r8,r9
80006b5c:	a3 78       	lsl	r8,0x3
80006b5e:	12 18       	sub	r8,r9
80006b60:	a1 78       	lsl	r8,0x1
80006b62:	f4 08 00 08 	add	r8,r10,r8
80006b66:	2f 88       	sub	r8,-8
80006b68:	11 88       	ld.ub	r8,r8[0x0]
80006b6a:	58 08       	cp.w	r8,0
80006b6c:	c1 90       	breq	80006b9e <check_led_brd_side_lifetimes+0x72>
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
80006b6e:	ee f6 ff fc 	ld.w	r6,r7[-4]
80006b72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006b76:	5c 58       	castu.b	r8
80006b78:	10 9c       	mov	r12,r8
80006b7a:	f0 1f 00 12 	mcall	80006bc0 <check_led_brd_side_lifetimes+0x94>
80006b7e:	18 98       	mov	r8,r12
80006b80:	10 99       	mov	r9,r8
80006b82:	30 08       	mov	r8,0
80006b84:	f0 09 18 00 	cp.b	r9,r8
80006b88:	5f 09       	sreq	r9
80006b8a:	48 ca       	lddpc	r10,80006bb8 <check_led_brd_side_lifetimes+0x8c>
80006b8c:	0c 98       	mov	r8,r6
80006b8e:	a3 68       	lsl	r8,0x2
80006b90:	0c 08       	add	r8,r6
80006b92:	f4 08 00 08 	add	r8,r10,r8
80006b96:	f0 ca ff fe 	sub	r10,r8,-2
80006b9a:	12 98       	mov	r8,r9
80006b9c:	b4 88       	st.b	r10[0x0],r8
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80006b9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006ba2:	2f f8       	sub	r8,-1
80006ba4:	ef 48 ff fc 	st.w	r7[-4],r8
80006ba8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006bac:	58 78       	cp.w	r8,7
80006bae:	fe 9a ff c7 	brle	80006b3c <check_led_brd_side_lifetimes+0x10>
		if (ledBrd[brdIdx].present)
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
		}	
	}
}
80006bb2:	2f ed       	sub	sp,-8
80006bb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006bb8:	00 00       	add	r0,r0
80006bba:	0b 24       	ld.uh	r4,r5++
80006bbc:	00 00       	add	r0,r0
80006bbe:	02 f4       	st.b	--r1,r4
80006bc0:	80 00       	ld.sh	r0,r0[0x0]
80006bc2:	69 7c       	ld.w	r12,r4[0x5c]

80006bc4 <adc_process_task>:

volatile avr32_adcifa_t *adcifa = &AVR32_ADCIFA; // ADCIFA IP registers address

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
80006bc4:	eb cd 40 80 	pushm	r7,lr
80006bc8:	1a 97       	mov	r7,sp
80006bca:	20 1d       	sub	sp,4
80006bcc:	18 98       	mov	r8,r12
80006bce:	ef 68 ff fc 	st.b	r7[-4],r8
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
80006bd2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);
80006bd6:	12 98       	mov	r8,r9
80006bd8:	a1 78       	lsl	r8,0x1
80006bda:	f0 09 00 09 	add	r9,r8,r9

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
80006bde:	49 88       	lddpc	r8,80006c3c <adc_process_task+0x78>
80006be0:	10 09       	add	r9,r8
80006be2:	49 88       	lddpc	r8,80006c40 <adc_process_task+0x7c>
80006be4:	70 08       	ld.w	r8,r8[0x0]
80006be6:	49 8a       	lddpc	r10,80006c44 <adc_process_task+0x80>
80006be8:	30 0b       	mov	r11,0
80006bea:	10 9c       	mov	r12,r8
80006bec:	f0 1f 00 17 	mcall	80006c48 <adc_process_task+0x84>
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);

	// Start ADCIFA sequencer 0
	adcifa_start_sequencer(adcifa, 0);
80006bf0:	49 48       	lddpc	r8,80006c40 <adc_process_task+0x7c>
80006bf2:	70 08       	ld.w	r8,r8[0x0]
80006bf4:	30 0b       	mov	r11,0
80006bf6:	10 9c       	mov	r12,r8
80006bf8:	f0 1f 00 15 	mcall	80006c4c <adc_process_task+0x88>
80006bfc:	c0 28       	rjmp	80006c00 <adc_process_task+0x3c>
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
			return bluesense_buf[shelfIdx];
		}
	}
80006bfe:	d7 03       	nop
	// Get Values from sequencer 0
	while(1)
	{
		//TODO: need a timeout here and error handling in case the ADC gets stuck for some reason
		
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
80006c00:	49 08       	lddpc	r8,80006c40 <adc_process_task+0x7c>
80006c02:	70 08       	ld.w	r8,r8[0x0]
80006c04:	49 39       	lddpc	r9,80006c50 <adc_process_task+0x8c>
80006c06:	49 0a       	lddpc	r10,80006c44 <adc_process_task+0x80>
80006c08:	30 0b       	mov	r11,0
80006c0a:	10 9c       	mov	r12,r8
80006c0c:	f0 1f 00 12 	mcall	80006c54 <adc_process_task+0x90>
80006c10:	18 98       	mov	r8,r12
80006c12:	10 99       	mov	r9,r8
80006c14:	30 28       	mov	r8,2
80006c16:	f0 09 18 00 	cp.b	r9,r8
80006c1a:	cf 21       	brne	80006bfe <adc_process_task+0x3a>
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
80006c1c:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80006c20:	48 c8       	lddpc	r8,80006c50 <adc_process_task+0x8c>
80006c22:	90 08       	ld.sh	r8,r8[0x0]
80006c24:	48 d9       	lddpc	r9,80006c58 <adc_process_task+0x94>
80006c26:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
			return bluesense_buf[shelfIdx];
80006c2a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006c2e:	48 b8       	lddpc	r8,80006c58 <adc_process_task+0x94>
80006c30:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
		}
	}
}
80006c34:	10 9c       	mov	r12,r8
80006c36:	2f fd       	sub	sp,-4
80006c38:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c3c:	00 00       	add	r0,r0
80006c3e:	00 9f       	mov	pc,r0
80006c40:	00 00       	add	r0,r0
80006c42:	00 ac       	st.w	r0++,r12
80006c44:	00 00       	add	r0,r0
80006c46:	00 98       	mov	r8,r0
80006c48:	80 00       	ld.sh	r0,r0[0x0]
80006c4a:	35 04       	mov	r4,80
80006c4c:	80 00       	ld.sh	r0,r0[0x0]
80006c4e:	3a 14       	mov	r4,-95
80006c50:	00 00       	add	r0,r0
80006c52:	02 f2       	st.b	--r1,r2
80006c54:	80 00       	ld.sh	r0,r0[0x0]
80006c56:	3a a0       	mov	r0,-86
80006c58:	00 00       	add	r0,r0
80006c5a:	02 e8       	st.h	--r1,r8

80006c5c <check_shelf_for_devices>:
	DEVICES_PRESENT
};

unsigned char check_shelf_for_devices(unsigned char shelfPosition);
unsigned char check_shelf_for_devices(unsigned char shelfPosition)
{
80006c5c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80006c60:	1a 97       	mov	r7,sp
80006c62:	20 dd       	sub	sp,52
80006c64:	18 98       	mov	r8,r12
80006c66:	ef 68 ff cc 	st.b	r7[-52],r8
	U16 bluesense;
	
	led_shelf(shelfPosition, LED_ON); //TODO: do we finish this task fast enough to not check the door latch in here? Can't have LEDs on if the door opens
80006c6a:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80006c6e:	30 1b       	mov	r11,1
80006c70:	10 9c       	mov	r12,r8
80006c72:	f0 1f 00 61 	mcall	80006df4 <check_shelf_for_devices+0x198>
80006c76:	33 28       	mov	r8,50
80006c78:	ef 48 ff e4 	st.w	r7[-28],r8
80006c7c:	e0 68 e1 00 	mov	r8,57600
80006c80:	ea 18 05 f5 	orh	r8,0x5f5
80006c84:	ef 48 ff e0 	st.w	r7[-32],r8
80006c88:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006c8c:	ef 48 ff ec 	st.w	r7[-20],r8
80006c90:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006c94:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80006c98:	ee f0 ff ec 	ld.w	r0,r7[-20]
80006c9c:	30 01       	mov	r1,0
80006c9e:	ee f2 ff e8 	ld.w	r2,r7[-24]
80006ca2:	30 03       	mov	r3,0
80006ca4:	e2 02 02 4a 	mul	r10,r1,r2
80006ca8:	e6 00 02 48 	mul	r8,r3,r0
80006cac:	10 0a       	add	r10,r8
80006cae:	e0 02 06 48 	mulu.d	r8,r0,r2
80006cb2:	12 0a       	add	r10,r9
80006cb4:	14 99       	mov	r9,r10
80006cb6:	e0 6a 03 e7 	mov	r10,999
80006cba:	30 0b       	mov	r11,0
80006cbc:	f0 0a 00 0a 	add	r10,r8,r10
80006cc0:	f2 0b 00 4b 	adc	r11,r9,r11
80006cc4:	e0 68 03 e8 	mov	r8,1000
80006cc8:	30 09       	mov	r9,0
80006cca:	f0 1f 00 4c 	mcall	80006df8 <check_shelf_for_devices+0x19c>
80006cce:	14 98       	mov	r8,r10
80006cd0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80006cd2:	ef 48 ff f4 	st.w	r7[-12],r8
80006cd6:	ee c8 00 30 	sub	r8,r7,48
80006cda:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006cde:	e1 b8 00 42 	mfsr	r8,0x108
80006ce2:	10 99       	mov	r9,r8
80006ce4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006ce8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006cea:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006cee:	70 09       	ld.w	r9,r8[0x0]
80006cf0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006cf4:	10 09       	add	r9,r8
80006cf6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006cfa:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006cfc:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006d00:	30 08       	mov	r8,0
80006d02:	f3 68 00 08 	st.b	r9[8],r8
80006d06:	ee c8 00 30 	sub	r8,r7,48
80006d0a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006d0e:	e1 b8 00 42 	mfsr	r8,0x108
80006d12:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006d16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d1a:	f1 39 00 08 	ld.ub	r9,r8[8]
80006d1e:	30 28       	mov	r8,2
80006d20:	f0 09 18 00 	cp.b	r9,r8
80006d24:	c0 31       	brne	80006d2a <check_shelf_for_devices+0xce>
    return false;
80006d26:	30 08       	mov	r8,0
80006d28:	c4 38       	rjmp	80006dae <check_shelf_for_devices+0x152>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006d2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d2e:	f1 39 00 08 	ld.ub	r9,r8[8]
80006d32:	30 18       	mov	r8,1
80006d34:	f0 09 18 00 	cp.b	r9,r8
80006d38:	c0 31       	brne	80006d3e <check_shelf_for_devices+0xe2>
    return true;
80006d3a:	30 18       	mov	r8,1
80006d3c:	c3 98       	rjmp	80006dae <check_shelf_for_devices+0x152>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006d3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d42:	70 09       	ld.w	r9,r8[0x0]
80006d44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d48:	70 18       	ld.w	r8,r8[0x4]
80006d4a:	10 39       	cp.w	r9,r8
80006d4c:	e0 88 00 1a 	brls	80006d80 <check_shelf_for_devices+0x124>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006d50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d54:	70 08       	ld.w	r8,r8[0x0]
80006d56:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006d5a:	10 39       	cp.w	r9,r8
80006d5c:	c1 02       	brcc	80006d7c <check_shelf_for_devices+0x120>
80006d5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d62:	70 18       	ld.w	r8,r8[0x4]
80006d64:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006d68:	10 39       	cp.w	r9,r8
80006d6a:	e0 88 00 09 	brls	80006d7c <check_shelf_for_devices+0x120>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006d6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006d72:	30 18       	mov	r8,1
80006d74:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006d78:	30 18       	mov	r8,1
80006d7a:	c1 a8       	rjmp	80006dae <check_shelf_for_devices+0x152>
    }
    return false;
80006d7c:	30 08       	mov	r8,0
80006d7e:	c1 88       	rjmp	80006dae <check_shelf_for_devices+0x152>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d84:	70 08       	ld.w	r8,r8[0x0]
80006d86:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006d8a:	10 39       	cp.w	r9,r8
80006d8c:	c0 93       	brcs	80006d9e <check_shelf_for_devices+0x142>
80006d8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d92:	70 18       	ld.w	r8,r8[0x4]
80006d94:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006d98:	10 39       	cp.w	r9,r8
80006d9a:	e0 88 00 09 	brls	80006dac <check_shelf_for_devices+0x150>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006d9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006da2:	30 18       	mov	r8,1
80006da4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006da8:	30 18       	mov	r8,1
80006daa:	c0 28       	rjmp	80006dae <check_shelf_for_devices+0x152>
    }
    return false;
80006dac:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006dae:	58 08       	cp.w	r8,0
80006db0:	ca b0       	breq	80006d06 <check_shelf_for_devices+0xaa>
	
	cpu_delay_ms(50, EC_CPU_CLOCK_FREQ);
		
	//Read bluesense for this shelf
	bluesense = 0;
80006db2:	30 08       	mov	r8,0
80006db4:	ef 58 ff de 	st.h	r7[-34],r8
	bluesense = adc_process_task(shelfPosition);
80006db8:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80006dbc:	10 9c       	mov	r12,r8
80006dbe:	f0 1f 00 10 	mcall	80006dfc <check_shelf_for_devices+0x1a0>
80006dc2:	18 98       	mov	r8,r12
80006dc4:	ef 58 ff de 	st.h	r7[-34],r8

	led_shelf(shelfPosition, LED_OFF);
80006dc8:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80006dcc:	30 0b       	mov	r11,0
80006dce:	10 9c       	mov	r12,r8
80006dd0:	f0 1f 00 09 	mcall	80006df4 <check_shelf_for_devices+0x198>
	

	if (bluesense > 0x800)
80006dd4:	ef 09 ff de 	ld.sh	r9,r7[-34]
80006dd8:	e0 68 08 00 	mov	r8,2048
80006ddc:	f0 09 19 00 	cp.h	r9,r8
80006de0:	e0 88 00 04 	brls	80006de8 <check_shelf_for_devices+0x18c>
	{
		return DEVICES_PRESENT;
80006de4:	30 18       	mov	r8,1
80006de6:	c0 28       	rjmp	80006dea <check_shelf_for_devices+0x18e>
	}
	else
	{
		return NO_DEVICES_PRESENT;
80006de8:	30 08       	mov	r8,0
	}
}
80006dea:	10 9c       	mov	r12,r8
80006dec:	2f 3d       	sub	sp,-52
80006dee:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80006df2:	00 00       	add	r0,r0
80006df4:	80 00       	ld.sh	r0,r0[0x0]
80006df6:	61 54       	ld.w	r4,r0[0x54]
80006df8:	80 00       	ld.sh	r0,r0[0x0]
80006dfa:	a2 b6       	st.b	r1[0x3],r6
80006dfc:	80 00       	ld.sh	r0,r0[0x0]
80006dfe:	6b c4       	ld.w	r4,r5[0x70]

80006e00 <check_shelves_for_devices>:

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
80006e00:	eb cd 40 c0 	pushm	r6-r7,lr
80006e04:	1a 97       	mov	r7,sp
80006e06:	20 1d       	sub	sp,4
	for (int i=0; i<NUM_SHELVES; i++)
80006e08:	30 08       	mov	r8,0
80006e0a:	ef 48 ff fc 	st.w	r7[-4],r8
80006e0e:	c2 68       	rjmp	80006e5a <check_shelves_for_devices+0x5a>
	{
		if (shelf[i].present)
80006e10:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006e14:	49 6a       	lddpc	r10,80006e6c <check_shelves_for_devices+0x6c>
80006e16:	12 98       	mov	r8,r9
80006e18:	a3 68       	lsl	r8,0x2
80006e1a:	12 08       	add	r8,r9
80006e1c:	f4 08 00 08 	add	r8,r10,r8
80006e20:	2f c8       	sub	r8,-4
80006e22:	11 88       	ld.ub	r8,r8[0x0]
80006e24:	58 08       	cp.w	r8,0
80006e26:	c1 50       	breq	80006e50 <check_shelves_for_devices+0x50>
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);	
80006e28:	ee f6 ff fc 	ld.w	r6,r7[-4]
80006e2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e30:	5c 58       	castu.b	r8
80006e32:	10 9c       	mov	r12,r8
80006e34:	f0 1f 00 0f 	mcall	80006e70 <check_shelves_for_devices+0x70>
80006e38:	18 98       	mov	r8,r12
80006e3a:	10 99       	mov	r9,r8
80006e3c:	48 ca       	lddpc	r10,80006e6c <check_shelves_for_devices+0x6c>
80006e3e:	0c 98       	mov	r8,r6
80006e40:	a3 68       	lsl	r8,0x2
80006e42:	0c 08       	add	r8,r6
80006e44:	f4 08 00 08 	add	r8,r10,r8
80006e48:	f0 ca ff fd 	sub	r10,r8,-3
80006e4c:	12 98       	mov	r8,r9
80006e4e:	b4 88       	st.b	r10[0x0],r8
}

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
	for (int i=0; i<NUM_SHELVES; i++)
80006e50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e54:	2f f8       	sub	r8,-1
80006e56:	ef 48 ff fc 	st.w	r7[-4],r8
80006e5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e5e:	58 38       	cp.w	r8,3
80006e60:	fe 9a ff d8 	brle	80006e10 <check_shelves_for_devices+0x10>
		if (shelf[i].present)
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);	
		}
	}
}
80006e64:	2f fd       	sub	sp,-4
80006e66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006e6a:	00 00       	add	r0,r0
80006e6c:	00 00       	add	r0,r0
80006e6e:	03 3a       	ld.ub	r10,r1++
80006e70:	80 00       	ld.sh	r0,r0[0x0]
80006e72:	6c 5c       	ld.w	r12,r6[0x14]

80006e74 <set_shelves_active_inactive>:

unsigned char topEflag0, topEflag1, botEflag0, botEflag1;

void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
80006e74:	eb cd 40 80 	pushm	r7,lr
80006e78:	1a 97       	mov	r7,sp
80006e7a:	20 1d       	sub	sp,4
	numActiveShelves = 0;
80006e7c:	4c e9       	lddpc	r9,80006fb4 <set_shelves_active_inactive+0x140>
80006e7e:	30 08       	mov	r8,0
80006e80:	b2 88       	st.b	r9[0x0],r8
	/*
	 * The rest of the evaluation
	 */
	
	
	for (int i=0; i<NUM_SHELVES; i++)
80006e82:	30 08       	mov	r8,0
80006e84:	ef 48 ff fc 	st.w	r7[-4],r8
80006e88:	c1 08       	rjmp	80006ea8 <set_shelves_active_inactive+0x34>
	{
		shelf[i].active = SHELF_INACTIVE;
80006e8a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006e8e:	4c ba       	lddpc	r10,80006fb8 <set_shelves_active_inactive+0x144>
80006e90:	12 98       	mov	r8,r9
80006e92:	a3 68       	lsl	r8,0x2
80006e94:	12 08       	add	r8,r9
80006e96:	f4 08 00 09 	add	r9,r10,r8
80006e9a:	30 18       	mov	r8,1
80006e9c:	b2 88       	st.b	r9[0x0],r8
	/*
	 * The rest of the evaluation
	 */
	
	
	for (int i=0; i<NUM_SHELVES; i++)
80006e9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006ea2:	2f f8       	sub	r8,-1
80006ea4:	ef 48 ff fc 	st.w	r7[-4],r8
80006ea8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006eac:	58 38       	cp.w	r8,3
80006eae:	fe 9a ff ee 	brle	80006e8a <set_shelves_active_inactive+0x16>
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80006eb2:	4c 28       	lddpc	r8,80006fb8 <set_shelves_active_inactive+0x144>
80006eb4:	11 c8       	ld.ub	r8,r8[0x4]
80006eb6:	58 08       	cp.w	r8,0
80006eb8:	c1 90       	breq	80006eea <set_shelves_active_inactive+0x76>
		shelf[0].devicesPresent && 
80006eba:	4c 08       	lddpc	r8,80006fb8 <set_shelves_active_inactive+0x144>
80006ebc:	11 b8       	ld.ub	r8,r8[0x3]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80006ebe:	58 08       	cp.w	r8,0
80006ec0:	c1 50       	breq	80006eea <set_shelves_active_inactive+0x76>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
80006ec2:	4b f8       	lddpc	r8,80006fbc <set_shelves_active_inactive+0x148>
80006ec4:	11 a8       	ld.ub	r8,r8[0x2]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80006ec6:	58 08       	cp.w	r8,0
80006ec8:	c1 11       	brne	80006eea <set_shelves_active_inactive+0x76>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
80006eca:	4b d8       	lddpc	r8,80006fbc <set_shelves_active_inactive+0x148>
80006ecc:	11 f8       	ld.ub	r8,r8[0x7]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80006ece:	58 08       	cp.w	r8,0
80006ed0:	c0 d1       	brne	80006eea <set_shelves_active_inactive+0x76>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
	{
		shelf[0].active = SHELF_ACTIVE;
80006ed2:	4b a9       	lddpc	r9,80006fb8 <set_shelves_active_inactive+0x144>
80006ed4:	30 08       	mov	r8,0
80006ed6:	b2 88       	st.b	r9[0x0],r8
		numActiveShelves++;
80006ed8:	4b 78       	lddpc	r8,80006fb4 <set_shelves_active_inactive+0x140>
80006eda:	11 88       	ld.ub	r8,r8[0x0]
80006edc:	2f f8       	sub	r8,-1
80006ede:	5c 58       	castu.b	r8
80006ee0:	4b 59       	lddpc	r9,80006fb4 <set_shelves_active_inactive+0x140>
80006ee2:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 0 active\r\n");
80006ee4:	4b 7c       	lddpc	r12,80006fc0 <set_shelves_active_inactive+0x14c>
80006ee6:	f0 1f 00 38 	mcall	80006fc4 <set_shelves_active_inactive+0x150>
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80006eea:	4b 48       	lddpc	r8,80006fb8 <set_shelves_active_inactive+0x144>
80006eec:	f1 38 00 09 	ld.ub	r8,r8[9]
80006ef0:	58 08       	cp.w	r8,0
80006ef2:	c1 c0       	breq	80006f2a <set_shelves_active_inactive+0xb6>
	shelf[1].devicesPresent &&
80006ef4:	4b 18       	lddpc	r8,80006fb8 <set_shelves_active_inactive+0x144>
80006ef6:	f1 38 00 08 	ld.ub	r8,r8[8]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80006efa:	58 08       	cp.w	r8,0
80006efc:	c1 70       	breq	80006f2a <set_shelves_active_inactive+0xb6>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
80006efe:	4b 08       	lddpc	r8,80006fbc <set_shelves_active_inactive+0x148>
80006f00:	f1 38 00 0c 	ld.ub	r8,r8[12]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80006f04:	58 08       	cp.w	r8,0
80006f06:	c1 21       	brne	80006f2a <set_shelves_active_inactive+0xb6>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
80006f08:	4a d8       	lddpc	r8,80006fbc <set_shelves_active_inactive+0x148>
80006f0a:	f1 38 00 11 	ld.ub	r8,r8[17]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80006f0e:	58 08       	cp.w	r8,0
80006f10:	c0 d1       	brne	80006f2a <set_shelves_active_inactive+0xb6>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
	{
		shelf[1].active = SHELF_ACTIVE;
80006f12:	4a a9       	lddpc	r9,80006fb8 <set_shelves_active_inactive+0x144>
80006f14:	30 08       	mov	r8,0
80006f16:	b2 d8       	st.b	r9[0x5],r8
		numActiveShelves++;
80006f18:	4a 78       	lddpc	r8,80006fb4 <set_shelves_active_inactive+0x140>
80006f1a:	11 88       	ld.ub	r8,r8[0x0]
80006f1c:	2f f8       	sub	r8,-1
80006f1e:	5c 58       	castu.b	r8
80006f20:	4a 59       	lddpc	r9,80006fb4 <set_shelves_active_inactive+0x140>
80006f22:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 1 active\r\n");
80006f24:	4a 9c       	lddpc	r12,80006fc8 <set_shelves_active_inactive+0x154>
80006f26:	f0 1f 00 28 	mcall	80006fc4 <set_shelves_active_inactive+0x150>
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80006f2a:	4a 48       	lddpc	r8,80006fb8 <set_shelves_active_inactive+0x144>
80006f2c:	f1 38 00 0e 	ld.ub	r8,r8[14]
80006f30:	58 08       	cp.w	r8,0
80006f32:	c1 d0       	breq	80006f6c <set_shelves_active_inactive+0xf8>
	shelf[2].devicesPresent &&
80006f34:	4a 18       	lddpc	r8,80006fb8 <set_shelves_active_inactive+0x144>
80006f36:	f1 38 00 0d 	ld.ub	r8,r8[13]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80006f3a:	58 08       	cp.w	r8,0
80006f3c:	c1 80       	breq	80006f6c <set_shelves_active_inactive+0xf8>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
80006f3e:	4a 08       	lddpc	r8,80006fbc <set_shelves_active_inactive+0x148>
80006f40:	f1 38 00 16 	ld.ub	r8,r8[22]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80006f44:	58 08       	cp.w	r8,0
80006f46:	c1 31       	brne	80006f6c <set_shelves_active_inactive+0xf8>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
80006f48:	49 d8       	lddpc	r8,80006fbc <set_shelves_active_inactive+0x148>
80006f4a:	f1 38 00 1b 	ld.ub	r8,r8[27]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80006f4e:	58 08       	cp.w	r8,0
80006f50:	c0 e1       	brne	80006f6c <set_shelves_active_inactive+0xf8>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
	{
		shelf[2].active = SHELF_ACTIVE;
80006f52:	49 a9       	lddpc	r9,80006fb8 <set_shelves_active_inactive+0x144>
80006f54:	30 08       	mov	r8,0
80006f56:	f3 68 00 0a 	st.b	r9[10],r8
		numActiveShelves++;
80006f5a:	49 78       	lddpc	r8,80006fb4 <set_shelves_active_inactive+0x140>
80006f5c:	11 88       	ld.ub	r8,r8[0x0]
80006f5e:	2f f8       	sub	r8,-1
80006f60:	5c 58       	castu.b	r8
80006f62:	49 59       	lddpc	r9,80006fb4 <set_shelves_active_inactive+0x140>
80006f64:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 2 active\r\n");
80006f66:	49 ac       	lddpc	r12,80006fcc <set_shelves_active_inactive+0x158>
80006f68:	f0 1f 00 17 	mcall	80006fc4 <set_shelves_active_inactive+0x150>
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
80006f6c:	49 38       	lddpc	r8,80006fb8 <set_shelves_active_inactive+0x144>
80006f6e:	f1 38 00 13 	ld.ub	r8,r8[19]
80006f72:	58 08       	cp.w	r8,0
80006f74:	c1 d0       	breq	80006fae <set_shelves_active_inactive+0x13a>
	shelf[3].devicesPresent &&
80006f76:	49 18       	lddpc	r8,80006fb8 <set_shelves_active_inactive+0x144>
80006f78:	f1 38 00 12 	ld.ub	r8,r8[18]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
80006f7c:	58 08       	cp.w	r8,0
80006f7e:	c1 80       	breq	80006fae <set_shelves_active_inactive+0x13a>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
80006f80:	48 f8       	lddpc	r8,80006fbc <set_shelves_active_inactive+0x148>
80006f82:	f1 38 00 20 	ld.ub	r8,r8[32]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
80006f86:	58 08       	cp.w	r8,0
80006f88:	c1 31       	brne	80006fae <set_shelves_active_inactive+0x13a>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
80006f8a:	48 d8       	lddpc	r8,80006fbc <set_shelves_active_inactive+0x148>
80006f8c:	f1 38 00 25 	ld.ub	r8,r8[37]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
80006f90:	58 08       	cp.w	r8,0
80006f92:	c0 e1       	brne	80006fae <set_shelves_active_inactive+0x13a>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
	{
		shelf[3].active = SHELF_ACTIVE;
80006f94:	48 99       	lddpc	r9,80006fb8 <set_shelves_active_inactive+0x144>
80006f96:	30 08       	mov	r8,0
80006f98:	f3 68 00 0f 	st.b	r9[15],r8
		numActiveShelves++;
80006f9c:	48 68       	lddpc	r8,80006fb4 <set_shelves_active_inactive+0x140>
80006f9e:	11 88       	ld.ub	r8,r8[0x0]
80006fa0:	2f f8       	sub	r8,-1
80006fa2:	5c 58       	castu.b	r8
80006fa4:	48 49       	lddpc	r9,80006fb4 <set_shelves_active_inactive+0x140>
80006fa6:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 3 active\r\n");
80006fa8:	48 ac       	lddpc	r12,80006fd0 <set_shelves_active_inactive+0x15c>
80006faa:	f0 1f 00 07 	mcall	80006fc4 <set_shelves_active_inactive+0x150>
	}
}
80006fae:	2f fd       	sub	sp,-4
80006fb0:	e3 cd 80 80 	ldm	sp++,r7,pc
80006fb4:	00 00       	add	r0,r0
80006fb6:	0b 4e       	ld.w	lr,--r5
80006fb8:	00 00       	add	r0,r0
80006fba:	03 3a       	ld.ub	r10,r1++
80006fbc:	00 00       	add	r0,r0
80006fbe:	0b 24       	ld.uh	r4,r5++
80006fc0:	80 00       	ld.sh	r0,r0[0x0]
80006fc2:	62 ac       	ld.w	r12,r1[0x28]
80006fc4:	80 00       	ld.sh	r0,r0[0x0]
80006fc6:	32 c0       	mov	r0,44
80006fc8:	80 00       	ld.sh	r0,r0[0x0]
80006fca:	62 c0       	ld.w	r0,r1[0x30]
80006fcc:	80 00       	ld.sh	r0,r0[0x0]
80006fce:	62 d4       	ld.w	r4,r1[0x34]
80006fd0:	80 00       	ld.sh	r0,r0[0x0]
80006fd2:	62 e8       	ld.w	r8,r1[0x38]

80006fd4 <num_active_shelves>:

unsigned char num_active_shelves(void);
unsigned char num_active_shelves(void)
{
80006fd4:	eb cd 40 80 	pushm	r7,lr
80006fd8:	1a 97       	mov	r7,sp
	return numActiveShelves;
80006fda:	48 38       	lddpc	r8,80006fe4 <num_active_shelves+0x10>
80006fdc:	11 88       	ld.ub	r8,r8[0x0]
}
80006fde:	10 9c       	mov	r12,r8
80006fe0:	e3 cd 80 80 	ldm	sp++,r7,pc
80006fe4:	00 00       	add	r0,r0
80006fe6:	0b 4e       	ld.w	lr,--r5

80006fe8 <init_sys_clocks>:
/*
 * Using RC8M (internal 8MHz)
 */
void init_sys_clocks(void);
void init_sys_clocks(void)
{
80006fe8:	eb cd 40 80 	pushm	r7,lr
80006fec:	1a 97       	mov	r7,sp
80006fee:	20 1d       	sub	sp,4
#endif  //experiment to see if cranking up the clock enables us to read the serial ID chip while running the debugger 16may15

/*
 * From CLOCK_EXAMPLE31 which changes clock sources on the fly. Trying to get a faster clock so that we can work with the serial ID chip (DS2411) which needs control to 6us. 16may15
 */
	osc_enable(OSC_ID_RC8M);
80006ff0:	30 2c       	mov	r12,2
80006ff2:	f0 1f 00 10 	mcall	80007030 <init_sys_clocks+0x48>
	pll_config_init(&pcfg, PLL_SRC_RC8M, 1, EC_CPU_CLOCK_FREQ/OSC_RC8M_NOMINAL_HZ);
80006ff6:	ee c8 00 04 	sub	r8,r7,4
80006ffa:	30 c9       	mov	r9,12
80006ffc:	30 1a       	mov	r10,1
80006ffe:	30 2b       	mov	r11,2
80007000:	10 9c       	mov	r12,r8
80007002:	f0 1f 00 0d 	mcall	80007034 <init_sys_clocks+0x4c>
	pll_enable(&pcfg, 0);
80007006:	ee c8 00 04 	sub	r8,r7,4
8000700a:	30 0b       	mov	r11,0
8000700c:	10 9c       	mov	r12,r8
8000700e:	f0 1f 00 0b 	mcall	80007038 <init_sys_clocks+0x50>
	sysclk_set_prescalers(1,1,1,1);
80007012:	30 19       	mov	r9,1
80007014:	30 1a       	mov	r10,1
80007016:	30 1b       	mov	r11,1
80007018:	30 1c       	mov	r12,1
8000701a:	f0 1f 00 09 	mcall	8000703c <init_sys_clocks+0x54>
	pll_wait_for_lock(0);
8000701e:	30 0c       	mov	r12,0
80007020:	f0 1f 00 08 	mcall	80007040 <init_sys_clocks+0x58>
	sysclk_set_source(SYSCLK_SRC_PLL0);	
80007024:	30 3c       	mov	r12,3
80007026:	f0 1f 00 08 	mcall	80007044 <init_sys_clocks+0x5c>
	/* put the clock out on PC19 so we can check to make sure we set it up correctly */
	//Note this code comes from ASF example AVR32 SCIF example 3
//16may15 seems to cause problems, leave out for now	scif_start_gclk(AVR32_SCIF_GCLK_GCLK0PIN, &gclkOpt);
//16may15 seems to cause problems, leave out for now	gpio_enable_module_pin(AVR32_SCIF_GCLK_0_1_PIN, AVR32_SCIF_GCLK_0_1_FUNCTION);

}
8000702a:	2f fd       	sub	sp,-4
8000702c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007030:	80 00       	ld.sh	r0,r0[0x0]
80007032:	64 4c       	ld.w	r12,r2[0x10]
80007034:	80 00       	ld.sh	r0,r0[0x0]
80007036:	65 38       	ld.w	r8,r2[0x4c]
80007038:	80 00       	ld.sh	r0,r0[0x0]
8000703a:	5b 14       	cp.w	r4,-15
8000703c:	80 00       	ld.sh	r0,r0[0x0]
8000703e:	5b d4       	cp.w	r4,-3
80007040:	80 00       	ld.sh	r0,r0[0x0]
80007042:	66 48       	ld.w	r8,r3[0x10]
80007044:	80 00       	ld.sh	r0,r0[0x0]
80007046:	5c d4       	com	r4

80007048 <adc_process_init>:
 *
 *
 */
void adc_process_init(void);
void adc_process_init(void)
{
80007048:	eb cd 40 80 	pushm	r7,lr
8000704c:	1a 97       	mov	r7,sp
		{INPUT3_ADC_PIN, INPUT3_ADC_FUNCTION},
		{INPUT4_ADC_PIN, INPUT4_ADC_FUNCTION}
	};

	// Assign and enable GPIO pins to the ADC function.
	gpio_enable_module(ADCIFA_GPIO_MAP,
8000704e:	30 6b       	mov	r11,6
80007050:	48 bc       	lddpc	r12,8000707c <adc_process_init+0x34>
80007052:	f0 1f 00 0c 	mcall	80007080 <adc_process_init+0x38>
			sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));

	// Get ADCIFA Factory Configuration
	adcifa_get_calibration_data(adcifa, &adc_config_t);
80007056:	48 c8       	lddpc	r8,80007084 <adc_process_init+0x3c>
80007058:	70 08       	ld.w	r8,r8[0x0]
8000705a:	48 cb       	lddpc	r11,80007088 <adc_process_init+0x40>
8000705c:	10 9c       	mov	r12,r8
8000705e:	f0 1f 00 0c 	mcall	8000708c <adc_process_init+0x44>

	// Configure ADCIFA core
	adcifa_configure(adcifa, &adc_config_t, EC_CPU_CLOCK_FREQ);
80007062:	48 98       	lddpc	r8,80007084 <adc_process_init+0x3c>
80007064:	70 08       	ld.w	r8,r8[0x0]
80007066:	e0 6a e1 00 	mov	r10,57600
8000706a:	ea 1a 05 f5 	orh	r10,0x5f5
8000706e:	48 7b       	lddpc	r11,80007088 <adc_process_init+0x40>
80007070:	10 9c       	mov	r12,r8
80007072:	f0 1f 00 08 	mcall	80007090 <adc_process_init+0x48>

}
80007076:	e3 cd 80 80 	ldm	sp++,r7,pc
8000707a:	00 00       	add	r0,r0
8000707c:	80 00       	ld.sh	r0,r0[0x0]
8000707e:	ac 20       	st.h	r6[0x4],r0
80007080:	80 00       	ld.sh	r0,r0[0x0]
80007082:	44 c4       	lddsp	r4,sp[0x130]
80007084:	00 00       	add	r0,r0
80007086:	00 ac       	st.w	r0++,r12
80007088:	00 00       	add	r0,r0
8000708a:	00 84       	andn	r4,r0
8000708c:	80 00       	ld.sh	r0,r0[0x0]
8000708e:	33 0c       	mov	r12,48
80007090:	80 00       	ld.sh	r0,r0[0x0]
80007092:	33 a0       	mov	r0,58

80007094 <twi_init>:
 *
 *
 */
static void twi_init(void);
static void twi_init(void)
{
80007094:	eb cd 40 80 	pushm	r7,lr
80007098:	1a 97       	mov	r7,sp
8000709a:	20 8d       	sub	sp,32
	const gpio_map_t PCA9952_TWI_GPIO_MAP = {
		{PCA9952_TWI_SCL_PIN, PCA9952_TWI_SCL_FUNCTION},
		{PCA9952_TWI_SDA_PIN, PCA9952_TWI_SDA_FUNCTION}
	};
8000709c:	49 a9       	lddpc	r9,80007104 <twi_init+0x70>
8000709e:	ee c8 00 10 	sub	r8,r7,16
800070a2:	20 08       	sub	r8,0
800070a4:	20 09       	sub	r9,0
800070a6:	72 0a       	ld.w	r10,r9[0x0]
800070a8:	91 0a       	st.w	r8[0x0],r10
800070aa:	72 1a       	ld.w	r10,r9[0x4]
800070ac:	91 1a       	st.w	r8[0x4],r10
800070ae:	72 2a       	ld.w	r10,r9[0x8]
800070b0:	91 2a       	st.w	r8[0x8],r10
800070b2:	72 39       	ld.w	r9,r9[0xc]
800070b4:	91 39       	st.w	r8[0xc],r9
	twi_options_t PCA9952_TWI_OPTIONS = { //7apr15 make this *not* a const so we can change it and rerun twi_master_init() if necessary
		.pba_hz = FPBA_HZ,
		.speed = PCA9952_TWI_MASTER_SPEED,
		.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS, //7apr15
		.smbus        = false,
	};
800070b6:	49 59       	lddpc	r9,80007108 <twi_init+0x74>
800070b8:	ee c8 00 20 	sub	r8,r7,32
800070bc:	20 08       	sub	r8,0
800070be:	20 09       	sub	r9,0
800070c0:	72 0a       	ld.w	r10,r9[0x0]
800070c2:	91 0a       	st.w	r8[0x0],r10
800070c4:	72 1a       	ld.w	r10,r9[0x4]
800070c6:	91 1a       	st.w	r8[0x4],r10
800070c8:	72 2a       	ld.w	r10,r9[0x8]
800070ca:	91 2a       	st.w	r8[0x8],r10
800070cc:	72 39       	ld.w	r9,r9[0xc]
800070ce:	91 39       	st.w	r8[0xc],r9

	// Assign I/Os to TWI.
	gpio_enable_module(PCA9952_TWI_GPIO_MAP,
800070d0:	ee c8 00 10 	sub	r8,r7,16
800070d4:	30 2b       	mov	r11,2
800070d6:	10 9c       	mov	r12,r8
800070d8:	f0 1f 00 0d 	mcall	8000710c <twi_init+0x78>
	sizeof(PCA9952_TWI_GPIO_MAP) / sizeof(PCA9952_TWI_GPIO_MAP[0]));
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
800070dc:	ee c8 00 20 	sub	r8,r7,32
800070e0:	10 9b       	mov	r11,r8
800070e2:	fe 7c 38 00 	mov	r12,-51200
800070e6:	f0 1f 00 0b 	mcall	80007110 <twi_init+0x7c>
	
	
	PCA9952_TWI_OPTIONS.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
800070ea:	36 18       	mov	r8,97
800070ec:	ef 48 ff e8 	st.w	r7[-24],r8
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
800070f0:	ee c8 00 20 	sub	r8,r7,32
800070f4:	10 9b       	mov	r11,r8
800070f6:	fe 7c 38 00 	mov	r12,-51200
800070fa:	f0 1f 00 06 	mcall	80007110 <twi_init+0x7c>
	
	
}
800070fe:	2f 8d       	sub	sp,-32
80007100:	e3 cd 80 80 	ldm	sp++,r7,pc
80007104:	80 00       	ld.sh	r0,r0[0x0]
80007106:	ac 00       	st.h	r6[0x0],r0
80007108:	80 00       	ld.sh	r0,r0[0x0]
8000710a:	ac 10       	st.h	r6[0x2],r0
8000710c:	80 00       	ld.sh	r0,r0[0x0]
8000710e:	44 c4       	lddsp	r4,sp[0x130]
80007110:	80 00       	ld.sh	r0,r0[0x0]
80007112:	4f 88       	lddpc	r8,800072f0 <usage_idx+0xdc>

80007114 <calc_sanitize_time>:
	STATE_SHUTDOWN_PROCESSES
};

unsigned char calc_sanitize_time(unsigned char shelfIdx);
unsigned char calc_sanitize_time(unsigned char shelfIdx)
{
80007114:	eb cd 40 80 	pushm	r7,lr
80007118:	1a 97       	mov	r7,sp
8000711a:	20 3d       	sub	sp,12
8000711c:	18 98       	mov	r8,r12
8000711e:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char uSideMinutes, lSideMinutes, minutes, boardIdx, sideIdx;
	
	boardIdx = shelf[shelfIdx].tLedIdx;							//top board in the shelf
80007122:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80007126:	4a da       	lddpc	r10,800071d8 <calc_sanitize_time+0xc4>
80007128:	12 98       	mov	r8,r9
8000712a:	a3 68       	lsl	r8,0x2
8000712c:	12 08       	add	r8,r9
8000712e:	f4 08 00 08 	add	r8,r10,r8
80007132:	2f f8       	sub	r8,-1
80007134:	11 88       	ld.ub	r8,r8[0x0]
80007136:	ef 68 ff fe 	st.b	r7[-2],r8
	sideIdx = ledBrd[boardIdx].lSideIdx;						//lower side of the top board
8000713a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000713e:	4a 8a       	lddpc	r10,800071dc <calc_sanitize_time+0xc8>
80007140:	12 98       	mov	r8,r9
80007142:	a3 78       	lsl	r8,0x3
80007144:	12 18       	sub	r8,r9
80007146:	a1 78       	lsl	r8,0x1
80007148:	f4 08 00 08 	add	r8,r10,r8
8000714c:	2f 58       	sub	r8,-11
8000714e:	11 88       	ld.ub	r8,r8[0x0]
80007150:	ef 68 ff ff 	st.b	r7[-1],r8
	lSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
80007154:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007158:	4a 2a       	lddpc	r10,800071e0 <calc_sanitize_time+0xcc>
8000715a:	12 98       	mov	r8,r9
8000715c:	a3 68       	lsl	r8,0x2
8000715e:	12 08       	add	r8,r9
80007160:	f4 08 00 08 	add	r8,r10,r8
80007164:	11 88       	ld.ub	r8,r8[0x0]
80007166:	ef 68 ff fc 	st.b	r7[-4],r8
	

	boardIdx = shelf[shelfIdx].bLedIdx;							//bottom board in the shelf					
8000716a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000716e:	49 ba       	lddpc	r10,800071d8 <calc_sanitize_time+0xc4>
80007170:	12 98       	mov	r8,r9
80007172:	a3 68       	lsl	r8,0x2
80007174:	12 08       	add	r8,r9
80007176:	f4 08 00 08 	add	r8,r10,r8
8000717a:	2f e8       	sub	r8,-2
8000717c:	11 88       	ld.ub	r8,r8[0x0]
8000717e:	ef 68 ff fe 	st.b	r7[-2],r8
	sideIdx = ledBrd[boardIdx].uSideIdx;						//upper side of the bottom board
80007182:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007186:	49 6a       	lddpc	r10,800071dc <calc_sanitize_time+0xc8>
80007188:	12 98       	mov	r8,r9
8000718a:	a3 78       	lsl	r8,0x3
8000718c:	12 18       	sub	r8,r9
8000718e:	a1 78       	lsl	r8,0x1
80007190:	f4 08 00 08 	add	r8,r10,r8
80007194:	2f 68       	sub	r8,-10
80007196:	11 88       	ld.ub	r8,r8[0x0]
80007198:	ef 68 ff ff 	st.b	r7[-1],r8
	uSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
8000719c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800071a0:	49 0a       	lddpc	r10,800071e0 <calc_sanitize_time+0xcc>
800071a2:	12 98       	mov	r8,r9
800071a4:	a3 68       	lsl	r8,0x2
800071a6:	12 08       	add	r8,r9
800071a8:	f4 08 00 08 	add	r8,r10,r8
800071ac:	11 88       	ld.ub	r8,r8[0x0]
800071ae:	ef 68 ff fb 	st.b	r7[-5],r8

	minutes = (uSideMinutes >= lSideMinutes) ? uSideMinutes : lSideMinutes; //choose the sanitize time for the more worn-out leds
800071b2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800071b6:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800071ba:	ef 3a ff fb 	ld.ub	r10,r7[-5]
800071be:	f0 0a 18 00 	cp.b	r10,r8
800071c2:	f2 08 17 20 	movhs	r8,r9
800071c6:	ef 68 ff fd 	st.b	r7[-3],r8
	
	return (minutes);
800071ca:	ef 38 ff fd 	ld.ub	r8,r7[-3]
	
}
800071ce:	10 9c       	mov	r12,r8
800071d0:	2f dd       	sub	sp,-12
800071d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800071d6:	00 00       	add	r0,r0
800071d8:	00 00       	add	r0,r0
800071da:	03 3a       	ld.ub	r10,r1++
800071dc:	00 00       	add	r0,r0
800071de:	02 f4       	st.b	--r1,r4
800071e0:	00 00       	add	r0,r0
800071e2:	0b 24       	ld.uh	r4,r5++

800071e4 <door_latch_open_kill_all_shelves>:


void door_latch_open_kill_all_shelves(void);
void door_latch_open_kill_all_shelves(void)
{
800071e4:	eb cd 40 80 	pushm	r7,lr
800071e8:	1a 97       	mov	r7,sp
	led_shelf(0, LED_OFF);
800071ea:	30 0b       	mov	r11,0
800071ec:	30 0c       	mov	r12,0
800071ee:	f0 1f 00 09 	mcall	80007210 <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(1, LED_OFF);
800071f2:	30 0b       	mov	r11,0
800071f4:	30 1c       	mov	r12,1
800071f6:	f0 1f 00 07 	mcall	80007210 <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(2, LED_OFF);
800071fa:	30 0b       	mov	r11,0
800071fc:	30 2c       	mov	r12,2
800071fe:	f0 1f 00 05 	mcall	80007210 <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(3, LED_OFF);
80007202:	30 0b       	mov	r11,0
80007204:	30 3c       	mov	r12,3
80007206:	f0 1f 00 03 	mcall	80007210 <door_latch_open_kill_all_shelves+0x2c>
}
8000720a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000720e:	00 00       	add	r0,r0
80007210:	80 00       	ld.sh	r0,r0[0x0]
80007212:	61 54       	ld.w	r4,r0[0x54]

80007214 <usage_idx>:

#define STRINGS_MATCH 0

unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn);
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn)
{
80007214:	eb cd 40 80 	pushm	r7,lr
80007218:	1a 97       	mov	r7,sp
8000721a:	20 5d       	sub	sp,20
8000721c:	18 99       	mov	r9,r12
8000721e:	ef 4b ff f0 	st.w	r7[-16],r11
80007222:	14 98       	mov	r8,r10
80007224:	ef 69 ff f4 	st.b	r7[-12],r9
80007228:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char tmpBoardId[6];
	
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
8000722c:	30 08       	mov	r8,0
8000722e:	ef 68 ff ff 	st.b	r7[-1],r8
80007232:	cf b8       	rjmp	80007428 <usage_idx+0x214>
		if ((strncmp((char*)idPtr, (char*)(&usageShdw[sel].u[i].id[0]),6)) && (usageShdw[sel].u[i].top_botn == top_botn) == STRINGS_MATCH)
		{
			return (i); //Found a match!
		}
#endif
		if (usageShdw[sel].u[i].slotFilled)
80007234:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007238:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000723c:	fe fb 02 08 	ld.w	r11,pc[520]
80007240:	12 98       	mov	r8,r9
80007242:	a3 68       	lsl	r8,0x2
80007244:	12 08       	add	r8,r9
80007246:	a1 78       	lsl	r8,0x1
80007248:	14 99       	mov	r9,r10
8000724a:	a5 79       	lsl	r9,0x5
8000724c:	14 19       	sub	r9,r10
8000724e:	f2 0a 15 05 	lsl	r10,r9,0x5
80007252:	12 1a       	sub	r10,r9
80007254:	14 08       	add	r8,r10
80007256:	f6 08 00 08 	add	r8,r11,r8
8000725a:	2f c8       	sub	r8,-4
8000725c:	11 a8       	ld.ub	r8,r8[0x2]
8000725e:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80007262:	5c 58       	castu.b	r8
80007264:	e0 80 00 dd 	breq	8000741e <usage_idx+0x20a>
		{
			tmpBoardId[0] = *(idPtr+0);
80007268:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000726c:	11 88       	ld.ub	r8,r8[0x0]
8000726e:	ef 68 ff f8 	st.b	r7[-8],r8
			tmpBoardId[1] = *(idPtr+1);
80007272:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007276:	2f f8       	sub	r8,-1
80007278:	11 88       	ld.ub	r8,r8[0x0]
8000727a:	ef 68 ff f9 	st.b	r7[-7],r8
			tmpBoardId[2] = *(idPtr+2);
8000727e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007282:	2f e8       	sub	r8,-2
80007284:	11 88       	ld.ub	r8,r8[0x0]
80007286:	ef 68 ff fa 	st.b	r7[-6],r8
			tmpBoardId[3] = *(idPtr+3);
8000728a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000728e:	2f d8       	sub	r8,-3
80007290:	11 88       	ld.ub	r8,r8[0x0]
80007292:	ef 68 ff fb 	st.b	r7[-5],r8
			tmpBoardId[4] = *(idPtr+4);
80007296:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000729a:	2f c8       	sub	r8,-4
8000729c:	11 88       	ld.ub	r8,r8[0x0]
8000729e:	ef 68 ff fc 	st.b	r7[-4],r8
			tmpBoardId[5] = *(idPtr+5);
800072a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800072a6:	2f b8       	sub	r8,-5
800072a8:	11 88       	ld.ub	r8,r8[0x0]
800072aa:	ef 68 ff fd 	st.b	r7[-3],r8
			
		
			if (tmpBoardId[0] == usageShdw[sel].u[i].id[0]) {
800072ae:	ef 3b ff f8 	ld.ub	r11,r7[-8]
800072b2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800072b6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800072ba:	4e 3c       	lddpc	r12,80007444 <usage_idx+0x230>
800072bc:	12 98       	mov	r8,r9
800072be:	a3 68       	lsl	r8,0x2
800072c0:	12 08       	add	r8,r9
800072c2:	a1 78       	lsl	r8,0x1
800072c4:	14 99       	mov	r9,r10
800072c6:	a5 79       	lsl	r9,0x5
800072c8:	14 19       	sub	r9,r10
800072ca:	f2 0a 15 05 	lsl	r10,r9,0x5
800072ce:	12 1a       	sub	r10,r9
800072d0:	14 08       	add	r8,r10
800072d2:	f8 08 00 08 	add	r8,r12,r8
800072d6:	11 88       	ld.ub	r8,r8[0x0]
800072d8:	f0 0b 18 00 	cp.b	r11,r8
800072dc:	e0 81 00 a1 	brne	8000741e <usage_idx+0x20a>
				if (tmpBoardId[1] == usageShdw[sel].u[i].id[1]) {
800072e0:	ef 3b ff f9 	ld.ub	r11,r7[-7]
800072e4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800072e8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800072ec:	4d 6c       	lddpc	r12,80007444 <usage_idx+0x230>
800072ee:	12 98       	mov	r8,r9
800072f0:	a3 68       	lsl	r8,0x2
800072f2:	12 08       	add	r8,r9
800072f4:	a1 78       	lsl	r8,0x1
800072f6:	14 99       	mov	r9,r10
800072f8:	a5 79       	lsl	r9,0x5
800072fa:	14 19       	sub	r9,r10
800072fc:	f2 0a 15 05 	lsl	r10,r9,0x5
80007300:	12 1a       	sub	r10,r9
80007302:	14 08       	add	r8,r10
80007304:	f8 08 00 08 	add	r8,r12,r8
80007308:	2f f8       	sub	r8,-1
8000730a:	11 88       	ld.ub	r8,r8[0x0]
8000730c:	f0 0b 18 00 	cp.b	r11,r8
80007310:	e0 81 00 87 	brne	8000741e <usage_idx+0x20a>
					if (tmpBoardId[2] == usageShdw[sel].u[i].id[2]) {
80007314:	ef 3b ff fa 	ld.ub	r11,r7[-6]
80007318:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000731c:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80007320:	4c 9c       	lddpc	r12,80007444 <usage_idx+0x230>
80007322:	14 98       	mov	r8,r10
80007324:	a3 68       	lsl	r8,0x2
80007326:	14 08       	add	r8,r10
80007328:	2f f8       	sub	r8,-1
8000732a:	f0 0a 15 01 	lsl	r10,r8,0x1
8000732e:	12 98       	mov	r8,r9
80007330:	a5 78       	lsl	r8,0x5
80007332:	12 18       	sub	r8,r9
80007334:	f0 09 15 05 	lsl	r9,r8,0x5
80007338:	10 19       	sub	r9,r8
8000733a:	f4 09 00 08 	add	r8,r10,r9
8000733e:	f8 08 00 08 	add	r8,r12,r8
80007342:	11 88       	ld.ub	r8,r8[0x0]
80007344:	f0 0b 18 00 	cp.b	r11,r8
80007348:	c6 b1       	brne	8000741e <usage_idx+0x20a>
						if (tmpBoardId[3] == usageShdw[sel].u[i].id[3]) {
8000734a:	ef 3b ff fb 	ld.ub	r11,r7[-5]
8000734e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007352:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007356:	4b cc       	lddpc	r12,80007444 <usage_idx+0x230>
80007358:	12 98       	mov	r8,r9
8000735a:	a3 68       	lsl	r8,0x2
8000735c:	12 08       	add	r8,r9
8000735e:	a1 78       	lsl	r8,0x1
80007360:	14 99       	mov	r9,r10
80007362:	a5 79       	lsl	r9,0x5
80007364:	14 19       	sub	r9,r10
80007366:	f2 0a 15 05 	lsl	r10,r9,0x5
8000736a:	12 1a       	sub	r10,r9
8000736c:	14 08       	add	r8,r10
8000736e:	f8 08 00 08 	add	r8,r12,r8
80007372:	2f d8       	sub	r8,-3
80007374:	11 88       	ld.ub	r8,r8[0x0]
80007376:	f0 0b 18 00 	cp.b	r11,r8
8000737a:	c5 21       	brne	8000741e <usage_idx+0x20a>
							if (tmpBoardId[4] == usageShdw[sel].u[i].id[4]) {
8000737c:	ef 3b ff fc 	ld.ub	r11,r7[-4]
80007380:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007384:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007388:	4a fc       	lddpc	r12,80007444 <usage_idx+0x230>
8000738a:	12 98       	mov	r8,r9
8000738c:	a3 68       	lsl	r8,0x2
8000738e:	12 08       	add	r8,r9
80007390:	a1 78       	lsl	r8,0x1
80007392:	14 99       	mov	r9,r10
80007394:	a5 79       	lsl	r9,0x5
80007396:	14 19       	sub	r9,r10
80007398:	f2 0a 15 05 	lsl	r10,r9,0x5
8000739c:	12 1a       	sub	r10,r9
8000739e:	14 08       	add	r8,r10
800073a0:	f8 08 00 08 	add	r8,r12,r8
800073a4:	2f c8       	sub	r8,-4
800073a6:	11 88       	ld.ub	r8,r8[0x0]
800073a8:	f0 0b 18 00 	cp.b	r11,r8
800073ac:	c3 91       	brne	8000741e <usage_idx+0x20a>
								if (tmpBoardId[5] == usageShdw[sel].u[i].id[5]) {
800073ae:	ef 3b ff fd 	ld.ub	r11,r7[-3]
800073b2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800073b6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800073ba:	4a 3c       	lddpc	r12,80007444 <usage_idx+0x230>
800073bc:	12 98       	mov	r8,r9
800073be:	a3 68       	lsl	r8,0x2
800073c0:	12 08       	add	r8,r9
800073c2:	a1 78       	lsl	r8,0x1
800073c4:	14 99       	mov	r9,r10
800073c6:	a5 79       	lsl	r9,0x5
800073c8:	14 19       	sub	r9,r10
800073ca:	f2 0a 15 05 	lsl	r10,r9,0x5
800073ce:	12 1a       	sub	r10,r9
800073d0:	14 08       	add	r8,r10
800073d2:	f8 08 00 08 	add	r8,r12,r8
800073d6:	2f b8       	sub	r8,-5
800073d8:	11 88       	ld.ub	r8,r8[0x0]
800073da:	f0 0b 18 00 	cp.b	r11,r8
800073de:	c2 01       	brne	8000741e <usage_idx+0x20a>
									if (top_botn == usageShdw[sel].u[i].top_botn)
800073e0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800073e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800073e8:	49 7b       	lddpc	r11,80007444 <usage_idx+0x230>
800073ea:	12 98       	mov	r8,r9
800073ec:	a3 68       	lsl	r8,0x2
800073ee:	12 08       	add	r8,r9
800073f0:	a1 78       	lsl	r8,0x1
800073f2:	14 99       	mov	r9,r10
800073f4:	a5 79       	lsl	r9,0x5
800073f6:	14 19       	sub	r9,r10
800073f8:	f2 0a 15 05 	lsl	r10,r9,0x5
800073fc:	12 1a       	sub	r10,r9
800073fe:	14 08       	add	r8,r10
80007400:	f6 08 00 08 	add	r8,r11,r8
80007404:	2f c8       	sub	r8,-4
80007406:	11 a8       	ld.ub	r8,r8[0x2]
80007408:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
8000740c:	5c 58       	castu.b	r8
8000740e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80007412:	f0 09 18 00 	cp.b	r9,r8
80007416:	c0 41       	brne	8000741e <usage_idx+0x20a>
									{
										return (i); //found a match!
80007418:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000741c:	c0 f8       	rjmp	8000743a <usage_idx+0x226>
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn);
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn)
{
	unsigned char tmpBoardId[6];
	
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
8000741e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007422:	2f f8       	sub	r8,-1
80007424:	ef 68 ff ff 	st.b	r7[-1],r8
80007428:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000742c:	35 f8       	mov	r8,95
8000742e:	f0 09 18 00 	cp.b	r9,r8
80007432:	fe 98 ff 01 	brls	80007234 <usage_idx+0x20>
				} //tmpBoardId[1]
			} //tmpBoardId[0]
		} //if slotFilled (don't check against slots that haven't been assigned
	} //for each slot in usageShdw[sel]
	
	return NO_LED_BOARD_PRESENT; //no match found
80007436:	e0 68 00 ff 	mov	r8,255
}
8000743a:	10 9c       	mov	r12,r8
8000743c:	2f bd       	sub	sp,-20
8000743e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007442:	00 00       	add	r0,r0
80007444:	00 00       	add	r0,r0
80007446:	03 88       	ld.ub	r8,r1[0x0]

80007448 <load_usage_indeces>:

void load_usage_indeces(unsigned char sel)
{
80007448:	eb cd 40 e0 	pushm	r5-r7,lr
8000744c:	1a 97       	mov	r7,sp
8000744e:	20 3d       	sub	sp,12
80007450:	18 98       	mov	r8,r12
80007452:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char top_botn, brdIdx;
		
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80007456:	30 08       	mov	r8,0
80007458:	ef 48 ff fc 	st.w	r7[-4],r8
8000745c:	c5 58       	rjmp	80007506 <load_usage_indeces+0xbe>
	{
		brdIdx = ledBrdSide[i].boardIdx;
8000745e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007462:	4a ea       	lddpc	r10,80007518 <load_usage_indeces+0xd0>
80007464:	12 98       	mov	r8,r9
80007466:	a3 68       	lsl	r8,0x2
80007468:	12 08       	add	r8,r9
8000746a:	f4 08 00 08 	add	r8,r10,r8
8000746e:	2f c8       	sub	r8,-4
80007470:	11 88       	ld.ub	r8,r8[0x0]
80007472:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[brdIdx].present)
80007476:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000747a:	4a 9a       	lddpc	r10,8000751c <load_usage_indeces+0xd4>
8000747c:	12 98       	mov	r8,r9
8000747e:	a3 78       	lsl	r8,0x3
80007480:	12 18       	sub	r8,r9
80007482:	a1 78       	lsl	r8,0x1
80007484:	f4 08 00 08 	add	r8,r10,r8
80007488:	2f 88       	sub	r8,-8
8000748a:	11 88       	ld.ub	r8,r8[0x0]
8000748c:	58 08       	cp.w	r8,0
8000748e:	c2 c0       	breq	800074e6 <load_usage_indeces+0x9e>
		{
			top_botn = i%2;
80007490:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007494:	f2 08 14 1f 	asr	r8,r9,0x1f
80007498:	bf 98       	lsr	r8,0x1f
8000749a:	10 09       	add	r9,r8
8000749c:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800074a0:	f2 08 01 08 	sub	r8,r9,r8
800074a4:	ef 68 ff fa 	st.b	r7[-6],r8
			
			usageIdx[sel][i] = usage_idx(sel, &ledBrd[brdIdx].id[0], top_botn); //TODO: should change this nomenclature to upper/lower, we are talking about board sides here, not which board in the shelf, be consistent
800074a8:	ef 35 ff f4 	ld.ub	r5,r7[-12]
800074ac:	ee f6 ff fc 	ld.w	r6,r7[-4]
800074b0:	ef 3a ff fa 	ld.ub	r10,r7[-6]
800074b4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800074b8:	12 98       	mov	r8,r9
800074ba:	a3 78       	lsl	r8,0x3
800074bc:	12 18       	sub	r8,r9
800074be:	a1 78       	lsl	r8,0x1
800074c0:	49 79       	lddpc	r9,8000751c <load_usage_indeces+0xd4>
800074c2:	12 08       	add	r8,r9
800074c4:	f0 c9 ff ff 	sub	r9,r8,-1
800074c8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800074cc:	12 9b       	mov	r11,r9
800074ce:	10 9c       	mov	r12,r8
800074d0:	f0 1f 00 14 	mcall	80007520 <load_usage_indeces+0xd8>
800074d4:	18 98       	mov	r8,r12
800074d6:	49 4a       	lddpc	r10,80007524 <load_usage_indeces+0xdc>
800074d8:	ea 09 15 03 	lsl	r9,r5,0x3
800074dc:	0c 09       	add	r9,r6
800074de:	f4 09 00 09 	add	r9,r10,r9
800074e2:	b2 88       	st.b	r9[0x0],r8
800074e4:	c0 c8       	rjmp	800074fc <load_usage_indeces+0xb4>
		}
		else
		{
			usageIdx[sel][i] = NO_LED_BOARD_PRESENT;
800074e6:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800074ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074ee:	48 e9       	lddpc	r9,80007524 <load_usage_indeces+0xdc>
800074f0:	a3 7a       	lsl	r10,0x3
800074f2:	f4 08 00 08 	add	r8,r10,r8
800074f6:	10 09       	add	r9,r8
800074f8:	3f f8       	mov	r8,-1
800074fa:	b2 88       	st.b	r9[0x0],r8

void load_usage_indeces(unsigned char sel)
{
	unsigned char top_botn, brdIdx;
		
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
800074fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007500:	2f f8       	sub	r8,-1
80007502:	ef 48 ff fc 	st.w	r7[-4],r8
80007506:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000750a:	58 78       	cp.w	r8,7
8000750c:	fe 9a ff a9 	brle	8000745e <load_usage_indeces+0x16>
		else
		{
			usageIdx[sel][i] = NO_LED_BOARD_PRESENT;
		}
	}
}
80007510:	2f dd       	sub	sp,-12
80007512:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007516:	00 00       	add	r0,r0
80007518:	00 00       	add	r0,r0
8000751a:	0b 24       	ld.uh	r4,r5++
8000751c:	00 00       	add	r0,r0
8000751e:	02 f4       	st.b	--r1,r4
80007520:	80 00       	ld.sh	r0,r0[0x0]
80007522:	72 14       	ld.w	r4,r9[0x4]
80007524:	00 00       	add	r0,r0
80007526:	03 69       	ld.uh	r9,--r1

80007528 <read_usage_struct>:

enum{CHECKSUM_INVALID, CHECKSUM_VALID};

unsigned char read_usage_struct(unsigned char sel)
{
80007528:	eb cd 40 80 	pushm	r7,lr
8000752c:	1a 97       	mov	r7,sp
8000752e:	20 2d       	sub	sp,8
80007530:	18 98       	mov	r8,r12
80007532:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char tmpCsum;
	
	if (sel == 0)
80007536:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000753a:	30 08       	mov	r8,0
8000753c:	f0 09 18 00 	cp.b	r9,r8
80007540:	c0 81       	brne	80007550 <read_usage_struct+0x28>
	{
		memcpy(&usageShdw[0],serialIdAndUsageFlashZero, sizeof(usageShdw[0]));
80007542:	e0 6a 03 c1 	mov	r10,961
80007546:	49 9b       	lddpc	r11,800075a8 <read_usage_struct+0x80>
80007548:	49 9c       	lddpc	r12,800075ac <read_usage_struct+0x84>
8000754a:	f0 1f 00 1a 	mcall	800075b0 <read_usage_struct+0x88>
8000754e:	c0 a8       	rjmp	80007562 <read_usage_struct+0x3a>
	}
	else
	{
		memcpy(&usageShdw[1],serialIdAndUsageFlashOne, sizeof(usageShdw[1]));
80007550:	49 78       	lddpc	r8,800075ac <read_usage_struct+0x84>
80007552:	f0 c8 fc 3f 	sub	r8,r8,-961
80007556:	e0 6a 03 c1 	mov	r10,961
8000755a:	49 7b       	lddpc	r11,800075b4 <read_usage_struct+0x8c>
8000755c:	10 9c       	mov	r12,r8
8000755e:	f0 1f 00 15 	mcall	800075b0 <read_usage_struct+0x88>
	}
	
	tmpCsum = calc_usage_csum(sel);
80007562:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007566:	10 9c       	mov	r12,r8
80007568:	f0 1f 00 14 	mcall	800075b8 <read_usage_struct+0x90>
8000756c:	18 98       	mov	r8,r12
8000756e:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (tmpCsum == usageShdw[sel].csum)
80007572:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007576:	48 ea       	lddpc	r10,800075ac <read_usage_struct+0x84>
80007578:	12 98       	mov	r8,r9
8000757a:	a5 78       	lsl	r8,0x5
8000757c:	12 18       	sub	r8,r9
8000757e:	f0 09 15 05 	lsl	r9,r8,0x5
80007582:	10 19       	sub	r9,r8
80007584:	f4 09 00 08 	add	r8,r10,r9
80007588:	f0 c8 fc 40 	sub	r8,r8,-960
8000758c:	11 88       	ld.ub	r8,r8[0x0]
8000758e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007592:	f0 09 18 00 	cp.b	r9,r8
80007596:	c0 31       	brne	8000759c <read_usage_struct+0x74>
	{
		return CHECKSUM_VALID;
80007598:	30 18       	mov	r8,1
8000759a:	c0 28       	rjmp	8000759e <read_usage_struct+0x76>
	}
	else
	{
		return CHECKSUM_INVALID;
8000759c:	30 08       	mov	r8,0
	}
}
8000759e:	10 9c       	mov	r12,r8
800075a0:	2f ed       	sub	sp,-8
800075a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800075a6:	00 00       	add	r0,r0
800075a8:	80 07       	ld.sh	r7,r0[0x0]
800075aa:	f0 00 00 00 	add	r0,r8,r0
800075ae:	03 88       	ld.ub	r8,r1[0x0]
800075b0:	80 00       	ld.sh	r0,r0[0x0]
800075b2:	a5 1a       	ld.d	r10,--r2
800075b4:	80 07       	ld.sh	r7,r0[0x0]
800075b6:	f8 00       	*unknown*
800075b8:	80 00       	ld.sh	r0,r0[0x0]
800075ba:	78 a8       	ld.w	r8,r12[0x28]

800075bc <test_flash>:

enum {SUCCESS, ERROR};

unsigned char test_flash(unsigned char sel)
{
800075bc:	eb cd 40 80 	pushm	r7,lr
800075c0:	1a 97       	mov	r7,sp
800075c2:	20 8d       	sub	sp,32
800075c4:	18 98       	mov	r8,r12
800075c6:	ef 68 ff e0 	st.b	r7[-32],r8
	volatile void* memPtr;
	unsigned char pattern[4] = {0xFF, 0x00, 0xAA, 0x55}, ubyte;
800075ca:	4b 28       	lddpc	r8,80007690 <test_flash+0xd4>
800075cc:	70 08       	ld.w	r8,r8[0x0]
800075ce:	ef 48 ff e4 	st.w	r7[-28],r8
	unsigned char *ubPtr;
	unsigned long memSize;
	
	memSize = sizeof(usageShdw[sel]);
800075d2:	e0 68 03 c1 	mov	r8,961
800075d6:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (sel == 0)
800075da:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800075de:	30 08       	mov	r8,0
800075e0:	f0 09 18 00 	cp.b	r9,r8
800075e4:	c0 51       	brne	800075ee <test_flash+0x32>
	{
		memPtr = &serialIdAndUsageFlashZero;
800075e6:	4a c8       	lddpc	r8,80007694 <test_flash+0xd8>
800075e8:	ef 48 ff e8 	st.w	r7[-24],r8
800075ec:	c0 48       	rjmp	800075f4 <test_flash+0x38>
	}
	else
	{
		memPtr = &serialIdAndUsageFlashOne;
800075ee:	4a b8       	lddpc	r8,80007698 <test_flash+0xdc>
800075f0:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
800075f4:	30 08       	mov	r8,0
800075f6:	ef 68 ff fb 	st.b	r7[-5],r8
800075fa:	c3 e8       	rjmp	80007676 <test_flash+0xba>
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
800075fc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007600:	ee 08 00 08 	add	r8,r7,r8
80007604:	f1 38 ff e4 	ld.ub	r8,r8[-28]
80007608:	30 19       	mov	r9,1
8000760a:	ee fa ff f4 	ld.w	r10,r7[-12]
8000760e:	10 9b       	mov	r11,r8
80007610:	ee fc ff e8 	ld.w	r12,r7[-24]
80007614:	f0 1f 00 22 	mcall	8000769c <test_flash+0xe0>
	
		ubPtr = (unsigned char*) memPtr;
80007618:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000761c:	ef 48 ff f0 	st.w	r7[-16],r8
		for (unsigned long j=0; j<memSize; j++)
80007620:	30 08       	mov	r8,0
80007622:	ef 48 ff fc 	st.w	r7[-4],r8
80007626:	c1 d8       	rjmp	80007660 <test_flash+0xa4>
		{
			ubyte = (*ubPtr);
80007628:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000762c:	11 88       	ld.ub	r8,r8[0x0]
8000762e:	ef 68 ff ef 	st.b	r7[-17],r8
			if (ubyte != pattern[i])
80007632:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007636:	ee 08 00 08 	add	r8,r7,r8
8000763a:	f1 38 ff e4 	ld.ub	r8,r8[-28]
8000763e:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007642:	f0 09 18 00 	cp.b	r9,r8
80007646:	c0 30       	breq	8000764c <test_flash+0x90>
			{
				return ERROR;
80007648:	30 18       	mov	r8,1
8000764a:	c1 e8       	rjmp	80007686 <test_flash+0xca>
			}
			ubPtr++;
8000764c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007650:	2f f8       	sub	r8,-1
80007652:	ef 48 ff f0 	st.w	r7[-16],r8
	for (unsigned char i=0; i<4; i++) //4 patterns to test
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
	
		ubPtr = (unsigned char*) memPtr;
		for (unsigned long j=0; j<memSize; j++)
80007656:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000765a:	2f f8       	sub	r8,-1
8000765c:	ef 48 ff fc 	st.w	r7[-4],r8
80007660:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007664:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007668:	10 39       	cp.w	r9,r8
8000766a:	cd f3       	brcs	80007628 <test_flash+0x6c>
	else
	{
		memPtr = &serialIdAndUsageFlashOne;
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
8000766c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007670:	2f f8       	sub	r8,-1
80007672:	ef 68 ff fb 	st.b	r7[-5],r8
80007676:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000767a:	30 38       	mov	r8,3
8000767c:	f0 09 18 00 	cp.b	r9,r8
80007680:	fe 98 ff be 	brls	800075fc <test_flash+0x40>
			}
			ubPtr++;
		}
	}
	
	return SUCCESS;
80007684:	30 08       	mov	r8,0
}
80007686:	10 9c       	mov	r12,r8
80007688:	2f 8d       	sub	sp,-32
8000768a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000768e:	00 00       	add	r0,r0
80007690:	80 00       	ld.sh	r0,r0[0x0]
80007692:	ab fc       	*unknown*
80007694:	80 07       	ld.sh	r7,r0[0x0]
80007696:	f0 00       	*unknown*
80007698:	80 07       	ld.sh	r7,r0[0x0]
8000769a:	f8 00       	*unknown*
8000769c:	80 00       	ld.sh	r0,r0[0x0]
8000769e:	3d ec       	mov	r12,-34

800076a0 <find_first_open_usage_slot>:

#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(unsigned char sel);
unsigned char find_first_open_usage_slot(unsigned char sel)
{
800076a0:	eb cd 40 80 	pushm	r7,lr
800076a4:	1a 97       	mov	r7,sp
800076a6:	20 2d       	sub	sp,8
800076a8:	18 98       	mov	r8,r12
800076aa:	ef 68 ff f8 	st.b	r7[-8],r8
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800076ae:	30 08       	mov	r8,0
800076b0:	ef 48 ff fc 	st.w	r7[-4],r8
800076b4:	c2 28       	rjmp	800076f8 <find_first_open_usage_slot+0x58>
	{
		if (!usageShdw[sel].u[i].slotFilled)
800076b6:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800076ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800076be:	49 5b       	lddpc	r11,80007710 <find_first_open_usage_slot+0x70>
800076c0:	12 98       	mov	r8,r9
800076c2:	a3 68       	lsl	r8,0x2
800076c4:	12 08       	add	r8,r9
800076c6:	a1 78       	lsl	r8,0x1
800076c8:	14 99       	mov	r9,r10
800076ca:	a5 79       	lsl	r9,0x5
800076cc:	14 19       	sub	r9,r10
800076ce:	f2 0a 15 05 	lsl	r10,r9,0x5
800076d2:	12 1a       	sub	r10,r9
800076d4:	14 08       	add	r8,r10
800076d6:	f6 08 00 08 	add	r8,r11,r8
800076da:	2f c8       	sub	r8,-4
800076dc:	11 a8       	ld.ub	r8,r8[0x2]
800076de:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800076e2:	5c 58       	castu.b	r8
800076e4:	c0 51       	brne	800076ee <find_first_open_usage_slot+0x4e>
		{
			return i;
800076e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076ea:	5c 58       	castu.b	r8
800076ec:	c0 e8       	rjmp	80007708 <find_first_open_usage_slot+0x68>
#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(unsigned char sel);
unsigned char find_first_open_usage_slot(unsigned char sel)
{
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800076ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076f2:	2f f8       	sub	r8,-1
800076f4:	ef 48 ff fc 	st.w	r7[-4],r8
800076f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076fc:	e0 48 00 5f 	cp.w	r8,95
80007700:	fe 98 ff db 	brls	800076b6 <find_first_open_usage_slot+0x16>
		{
			return i;
		}
	}
	
	return USAGE_FULL; //Error, no open slots
80007704:	e0 68 00 ff 	mov	r8,255
}
80007708:	10 9c       	mov	r12,r8
8000770a:	2f ed       	sub	sp,-8
8000770c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007710:	00 00       	add	r0,r0
80007712:	03 88       	ld.ub	r8,r1[0x0]

80007714 <add_new_led_board_sides_to_usage>:

void add_new_led_board_sides_to_usage(unsigned char sel)
{
80007714:	eb cd 40 80 	pushm	r7,lr
80007718:	1a 97       	mov	r7,sp
8000771a:	20 3d       	sub	sp,12
8000771c:	18 98       	mov	r8,r12
8000771e:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char firstOpenSlot, slotAssignment, brdIdx, top_botn;
	
	//NOTE that load_usage_indeces() must have been run already for this function to work. 
	// i.e., usageIdx[][] must be populated.
	
	firstOpenSlot = find_first_open_usage_slot(sel);
80007722:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007726:	10 9c       	mov	r12,r8
80007728:	f0 1f 00 5a 	mcall	80007890 <add_new_led_board_sides_to_usage+0x17c>
8000772c:	18 98       	mov	r8,r12
8000772e:	ef 68 ff fb 	st.b	r7[-5],r8
	
	slotAssignment = firstOpenSlot;
80007732:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007736:	ef 68 ff fc 	st.b	r7[-4],r8
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
8000773a:	30 08       	mov	r8,0
8000773c:	ef 68 ff ff 	st.b	r7[-1],r8
80007740:	c9 d8       	rjmp	8000787a <add_new_led_board_sides_to_usage+0x166>
	{
		brdIdx = ledBrdSide[i].boardIdx;
80007742:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007746:	4d 4a       	lddpc	r10,80007894 <add_new_led_board_sides_to_usage+0x180>
80007748:	12 98       	mov	r8,r9
8000774a:	a3 68       	lsl	r8,0x2
8000774c:	12 08       	add	r8,r9
8000774e:	f4 08 00 08 	add	r8,r10,r8
80007752:	2f c8       	sub	r8,-4
80007754:	11 88       	ld.ub	r8,r8[0x0]
80007756:	ef 68 ff fd 	st.b	r7[-3],r8
		
		top_botn = (i%2) ? TOP : BOTTOM; //odd sides are top, even sides are bottom
8000775a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000775e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007762:	ef 68 ff fe 	st.b	r7[-2],r8
		
		if ((ledBrd[brdIdx].present) && (usageIdx[sel][i] == NO_LED_BOARD_PRESENT)) //TODO: do I need the NO_LED_BOARD_PRESENT check? this should always be open at this point
80007766:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000776a:	4c ca       	lddpc	r10,80007898 <add_new_led_board_sides_to_usage+0x184>
8000776c:	12 98       	mov	r8,r9
8000776e:	a3 78       	lsl	r8,0x3
80007770:	12 18       	sub	r8,r9
80007772:	a1 78       	lsl	r8,0x1
80007774:	f4 08 00 08 	add	r8,r10,r8
80007778:	2f 88       	sub	r8,-8
8000777a:	11 88       	ld.ub	r8,r8[0x0]
8000777c:	58 08       	cp.w	r8,0
8000777e:	c7 90       	breq	80007870 <add_new_led_board_sides_to_usage+0x15c>
80007780:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007784:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007788:	4c 59       	lddpc	r9,8000789c <add_new_led_board_sides_to_usage+0x188>
8000778a:	a3 7a       	lsl	r10,0x3
8000778c:	f4 08 00 08 	add	r8,r10,r8
80007790:	f2 08 00 08 	add	r8,r9,r8
80007794:	11 89       	ld.ub	r9,r8[0x0]
80007796:	3f f8       	mov	r8,-1
80007798:	f0 09 18 00 	cp.b	r9,r8
8000779c:	c6 a1       	brne	80007870 <add_new_led_board_sides_to_usage+0x15c>
		{
			strncpy((char*)&usageShdw[sel].u[slotAssignment].id[0], (char*)&ledBrd[brdIdx].id[0],6);
8000779e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800077a2:	12 98       	mov	r8,r9
800077a4:	a3 78       	lsl	r8,0x3
800077a6:	12 18       	sub	r8,r9
800077a8:	a1 78       	lsl	r8,0x1
800077aa:	4b c9       	lddpc	r9,80007898 <add_new_led_board_sides_to_usage+0x184>
800077ac:	12 08       	add	r8,r9
800077ae:	f0 cb ff ff 	sub	r11,r8,-1
800077b2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800077b6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800077ba:	12 98       	mov	r8,r9
800077bc:	a3 68       	lsl	r8,0x2
800077be:	12 08       	add	r8,r9
800077c0:	a1 78       	lsl	r8,0x1
800077c2:	14 99       	mov	r9,r10
800077c4:	a5 79       	lsl	r9,0x5
800077c6:	14 19       	sub	r9,r10
800077c8:	f2 0a 15 05 	lsl	r10,r9,0x5
800077cc:	12 1a       	sub	r10,r9
800077ce:	f0 0a 00 09 	add	r9,r8,r10
800077d2:	4b 48       	lddpc	r8,800078a0 <add_new_led_board_sides_to_usage+0x18c>
800077d4:	f2 08 00 08 	add	r8,r9,r8
800077d8:	30 6a       	mov	r10,6
800077da:	10 9c       	mov	r12,r8
800077dc:	f0 1f 00 32 	mcall	800078a4 <add_new_led_board_sides_to_usage+0x190>
			
			usageShdw[sel].u[slotAssignment].top_botn = top_botn;
800077e0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800077e4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800077e8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800077ec:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800077f0:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800077f4:	4a bc       	lddpc	r12,800078a0 <add_new_led_board_sides_to_usage+0x18c>
800077f6:	12 98       	mov	r8,r9
800077f8:	a3 68       	lsl	r8,0x2
800077fa:	12 08       	add	r8,r9
800077fc:	a1 78       	lsl	r8,0x1
800077fe:	14 99       	mov	r9,r10
80007800:	a5 79       	lsl	r9,0x5
80007802:	14 19       	sub	r9,r10
80007804:	f2 0a 15 05 	lsl	r10,r9,0x5
80007808:	12 1a       	sub	r10,r9
8000780a:	14 08       	add	r8,r10
8000780c:	f8 08 00 08 	add	r8,r12,r8
80007810:	f0 c9 ff fc 	sub	r9,r8,-4
80007814:	13 a8       	ld.ub	r8,r9[0x2]
80007816:	f1 db d0 c1 	bfins	r8,r11,0x6,0x1
8000781a:	b2 a8       	st.b	r9[0x2],r8
			
			usageShdw[sel].u[slotAssignment].slotFilled = 1;
8000781c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007820:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007824:	49 fb       	lddpc	r11,800078a0 <add_new_led_board_sides_to_usage+0x18c>
80007826:	12 98       	mov	r8,r9
80007828:	a3 68       	lsl	r8,0x2
8000782a:	12 08       	add	r8,r9
8000782c:	a1 78       	lsl	r8,0x1
8000782e:	14 99       	mov	r9,r10
80007830:	a5 79       	lsl	r9,0x5
80007832:	14 19       	sub	r9,r10
80007834:	f2 0a 15 05 	lsl	r10,r9,0x5
80007838:	12 1a       	sub	r10,r9
8000783a:	14 08       	add	r8,r10
8000783c:	f6 08 00 08 	add	r8,r11,r8
80007840:	f0 c9 ff fc 	sub	r9,r8,-4
80007844:	13 a8       	ld.ub	r8,r9[0x2]
80007846:	30 1a       	mov	r10,1
80007848:	f1 da d0 a1 	bfins	r8,r10,0x5,0x1
8000784c:	b2 a8       	st.b	r9[0x2],r8

			usageIdx[sel][i] = slotAssignment++;
8000784e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007852:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007856:	49 29       	lddpc	r9,8000789c <add_new_led_board_sides_to_usage+0x188>
80007858:	a3 7a       	lsl	r10,0x3
8000785a:	f4 08 00 08 	add	r8,r10,r8
8000785e:	10 09       	add	r9,r8
80007860:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007864:	b2 88       	st.b	r9[0x0],r8
80007866:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000786a:	2f f8       	sub	r8,-1
8000786c:	ef 68 ff fc 	st.b	r7[-4],r8
	
	firstOpenSlot = find_first_open_usage_slot(sel);
	
	slotAssignment = firstOpenSlot;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
80007870:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007874:	2f f8       	sub	r8,-1
80007876:	ef 68 ff ff 	st.b	r7[-1],r8
8000787a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000787e:	30 78       	mov	r8,7
80007880:	f0 09 18 00 	cp.b	r9,r8
80007884:	fe 98 ff 5f 	brls	80007742 <add_new_led_board_sides_to_usage+0x2e>
			usageShdw[sel].u[slotAssignment].slotFilled = 1;

			usageIdx[sel][i] = slotAssignment++;
		}
	}
}
80007888:	2f dd       	sub	sp,-12
8000788a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000788e:	00 00       	add	r0,r0
80007890:	80 00       	ld.sh	r0,r0[0x0]
80007892:	76 a0       	ld.w	r0,r11[0x28]
80007894:	00 00       	add	r0,r0
80007896:	0b 24       	ld.uh	r4,r5++
80007898:	00 00       	add	r0,r0
8000789a:	02 f4       	st.b	--r1,r4
8000789c:	00 00       	add	r0,r0
8000789e:	03 69       	ld.uh	r9,--r1
800078a0:	00 00       	add	r0,r0
800078a2:	03 88       	ld.ub	r8,r1[0x0]
800078a4:	80 00       	ld.sh	r0,r0[0x0]
800078a6:	a6 70       	st.h	r3[0xe],r0

800078a8 <calc_usage_csum>:

unsigned char calc_usage_csum(unsigned char sel)
{
800078a8:	eb cd 40 80 	pushm	r7,lr
800078ac:	1a 97       	mov	r7,sp
800078ae:	20 2d       	sub	sp,8
800078b0:	18 98       	mov	r8,r12
800078b2:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char csum = 0;
800078b6:	30 08       	mov	r8,0
800078b8:	ef 68 ff fe 	st.b	r7[-2],r8
	
/*
 * Lots of ways to checksum this struct, don't over-think it
 */

	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800078bc:	30 08       	mov	r8,0
800078be:	ef 68 ff ff 	st.b	r7[-1],r8
800078c2:	ca f9       	rjmp	80007c20 <calc_usage_csum+0x378>
	{
		csum += usageShdw[sel].u[i].hrs_thous;
800078c4:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800078c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800078cc:	fe fb 03 70 	ld.w	r11,pc[880]
800078d0:	12 98       	mov	r8,r9
800078d2:	a3 68       	lsl	r8,0x2
800078d4:	12 08       	add	r8,r9
800078d6:	a1 78       	lsl	r8,0x1
800078d8:	14 99       	mov	r9,r10
800078da:	a5 79       	lsl	r9,0x5
800078dc:	14 19       	sub	r9,r10
800078de:	f2 0a 15 05 	lsl	r10,r9,0x5
800078e2:	12 1a       	sub	r10,r9
800078e4:	14 08       	add	r8,r10
800078e6:	f6 08 00 08 	add	r8,r11,r8
800078ea:	2f c8       	sub	r8,-4
800078ec:	11 b8       	ld.ub	r8,r8[0x3]
800078ee:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800078f2:	5c 58       	castu.b	r8
800078f4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800078f8:	f2 08 00 08 	add	r8,r9,r8
800078fc:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_huns;
80007900:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007904:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007908:	fe fb 03 34 	ld.w	r11,pc[820]
8000790c:	12 98       	mov	r8,r9
8000790e:	a3 68       	lsl	r8,0x2
80007910:	12 08       	add	r8,r9
80007912:	a1 78       	lsl	r8,0x1
80007914:	14 99       	mov	r9,r10
80007916:	a5 79       	lsl	r9,0x5
80007918:	14 19       	sub	r9,r10
8000791a:	f2 0a 15 05 	lsl	r10,r9,0x5
8000791e:	12 1a       	sub	r10,r9
80007920:	14 08       	add	r8,r10
80007922:	f6 08 00 08 	add	r8,r11,r8
80007926:	2f c8       	sub	r8,-4
80007928:	11 b8       	ld.ub	r8,r8[0x3]
8000792a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000792e:	5c 58       	castu.b	r8
80007930:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007934:	f2 08 00 08 	add	r8,r9,r8
80007938:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_tens;
8000793c:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007940:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007944:	fe fb 02 f8 	ld.w	r11,pc[760]
80007948:	12 98       	mov	r8,r9
8000794a:	a3 68       	lsl	r8,0x2
8000794c:	12 08       	add	r8,r9
8000794e:	a1 78       	lsl	r8,0x1
80007950:	14 99       	mov	r9,r10
80007952:	a5 79       	lsl	r9,0x5
80007954:	14 19       	sub	r9,r10
80007956:	f2 0a 15 05 	lsl	r10,r9,0x5
8000795a:	12 1a       	sub	r10,r9
8000795c:	14 08       	add	r8,r10
8000795e:	f6 08 00 08 	add	r8,r11,r8
80007962:	2f 88       	sub	r8,-8
80007964:	11 88       	ld.ub	r8,r8[0x0]
80007966:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000796a:	5c 58       	castu.b	r8
8000796c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007970:	f2 08 00 08 	add	r8,r9,r8
80007974:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_ones;
80007978:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8000797c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007980:	fe fb 02 bc 	ld.w	r11,pc[700]
80007984:	12 98       	mov	r8,r9
80007986:	a3 68       	lsl	r8,0x2
80007988:	12 08       	add	r8,r9
8000798a:	a1 78       	lsl	r8,0x1
8000798c:	14 99       	mov	r9,r10
8000798e:	a5 79       	lsl	r9,0x5
80007990:	14 19       	sub	r9,r10
80007992:	f2 0a 15 05 	lsl	r10,r9,0x5
80007996:	12 1a       	sub	r10,r9
80007998:	14 08       	add	r8,r10
8000799a:	f6 08 00 08 	add	r8,r11,r8
8000799e:	2f 88       	sub	r8,-8
800079a0:	11 88       	ld.ub	r8,r8[0x0]
800079a2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800079a6:	5c 58       	castu.b	r8
800079a8:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800079ac:	f2 08 00 08 	add	r8,r9,r8
800079b0:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].min_tens;
800079b4:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800079b8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800079bc:	fe fb 02 80 	ld.w	r11,pc[640]
800079c0:	12 98       	mov	r8,r9
800079c2:	a3 68       	lsl	r8,0x2
800079c4:	12 08       	add	r8,r9
800079c6:	a1 78       	lsl	r8,0x1
800079c8:	14 99       	mov	r9,r10
800079ca:	a5 79       	lsl	r9,0x5
800079cc:	14 19       	sub	r9,r10
800079ce:	f2 0a 15 05 	lsl	r10,r9,0x5
800079d2:	12 1a       	sub	r10,r9
800079d4:	14 08       	add	r8,r10
800079d6:	f6 08 00 08 	add	r8,r11,r8
800079da:	2f 88       	sub	r8,-8
800079dc:	11 98       	ld.ub	r8,r8[0x1]
800079de:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800079e2:	5c 58       	castu.b	r8
800079e4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800079e8:	f2 08 00 08 	add	r8,r9,r8
800079ec:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].min_ones;
800079f0:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800079f4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800079f8:	fe fb 02 44 	ld.w	r11,pc[580]
800079fc:	12 98       	mov	r8,r9
800079fe:	a3 68       	lsl	r8,0x2
80007a00:	12 08       	add	r8,r9
80007a02:	a1 78       	lsl	r8,0x1
80007a04:	14 99       	mov	r9,r10
80007a06:	a5 79       	lsl	r9,0x5
80007a08:	14 19       	sub	r9,r10
80007a0a:	f2 0a 15 05 	lsl	r10,r9,0x5
80007a0e:	12 1a       	sub	r10,r9
80007a10:	14 08       	add	r8,r10
80007a12:	f6 08 00 08 	add	r8,r11,r8
80007a16:	2f 88       	sub	r8,-8
80007a18:	11 98       	ld.ub	r8,r8[0x1]
80007a1a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007a1e:	5c 58       	castu.b	r8
80007a20:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007a24:	f2 08 00 08 	add	r8,r9,r8
80007a28:	ef 68 ff fe 	st.b	r7[-2],r8
		
		csum += usageShdw[sel].u[i].id[0];
80007a2c:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007a30:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a34:	fe fb 02 08 	ld.w	r11,pc[520]
80007a38:	12 98       	mov	r8,r9
80007a3a:	a3 68       	lsl	r8,0x2
80007a3c:	12 08       	add	r8,r9
80007a3e:	a1 78       	lsl	r8,0x1
80007a40:	14 99       	mov	r9,r10
80007a42:	a5 79       	lsl	r9,0x5
80007a44:	14 19       	sub	r9,r10
80007a46:	f2 0a 15 05 	lsl	r10,r9,0x5
80007a4a:	12 1a       	sub	r10,r9
80007a4c:	14 08       	add	r8,r10
80007a4e:	f6 08 00 08 	add	r8,r11,r8
80007a52:	11 88       	ld.ub	r8,r8[0x0]
80007a54:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007a58:	f2 08 00 08 	add	r8,r9,r8
80007a5c:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[1];
80007a60:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007a64:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a68:	4f 5b       	lddpc	r11,80007c3c <calc_usage_csum+0x394>
80007a6a:	12 98       	mov	r8,r9
80007a6c:	a3 68       	lsl	r8,0x2
80007a6e:	12 08       	add	r8,r9
80007a70:	a1 78       	lsl	r8,0x1
80007a72:	14 99       	mov	r9,r10
80007a74:	a5 79       	lsl	r9,0x5
80007a76:	14 19       	sub	r9,r10
80007a78:	f2 0a 15 05 	lsl	r10,r9,0x5
80007a7c:	12 1a       	sub	r10,r9
80007a7e:	14 08       	add	r8,r10
80007a80:	f6 08 00 08 	add	r8,r11,r8
80007a84:	2f f8       	sub	r8,-1
80007a86:	11 88       	ld.ub	r8,r8[0x0]
80007a88:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007a8c:	f2 08 00 08 	add	r8,r9,r8
80007a90:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[2];
80007a94:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007a98:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80007a9c:	4e 8b       	lddpc	r11,80007c3c <calc_usage_csum+0x394>
80007a9e:	14 98       	mov	r8,r10
80007aa0:	a3 68       	lsl	r8,0x2
80007aa2:	14 08       	add	r8,r10
80007aa4:	2f f8       	sub	r8,-1
80007aa6:	f0 0a 15 01 	lsl	r10,r8,0x1
80007aaa:	12 98       	mov	r8,r9
80007aac:	a5 78       	lsl	r8,0x5
80007aae:	12 18       	sub	r8,r9
80007ab0:	f0 09 15 05 	lsl	r9,r8,0x5
80007ab4:	10 19       	sub	r9,r8
80007ab6:	f4 09 00 08 	add	r8,r10,r9
80007aba:	f6 08 00 08 	add	r8,r11,r8
80007abe:	11 88       	ld.ub	r8,r8[0x0]
80007ac0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007ac4:	f2 08 00 08 	add	r8,r9,r8
80007ac8:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[3];
80007acc:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007ad0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007ad4:	4d ab       	lddpc	r11,80007c3c <calc_usage_csum+0x394>
80007ad6:	12 98       	mov	r8,r9
80007ad8:	a3 68       	lsl	r8,0x2
80007ada:	12 08       	add	r8,r9
80007adc:	a1 78       	lsl	r8,0x1
80007ade:	14 99       	mov	r9,r10
80007ae0:	a5 79       	lsl	r9,0x5
80007ae2:	14 19       	sub	r9,r10
80007ae4:	f2 0a 15 05 	lsl	r10,r9,0x5
80007ae8:	12 1a       	sub	r10,r9
80007aea:	14 08       	add	r8,r10
80007aec:	f6 08 00 08 	add	r8,r11,r8
80007af0:	2f d8       	sub	r8,-3
80007af2:	11 88       	ld.ub	r8,r8[0x0]
80007af4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007af8:	f2 08 00 08 	add	r8,r9,r8
80007afc:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[4];
80007b00:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007b04:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007b08:	4c db       	lddpc	r11,80007c3c <calc_usage_csum+0x394>
80007b0a:	12 98       	mov	r8,r9
80007b0c:	a3 68       	lsl	r8,0x2
80007b0e:	12 08       	add	r8,r9
80007b10:	a1 78       	lsl	r8,0x1
80007b12:	14 99       	mov	r9,r10
80007b14:	a5 79       	lsl	r9,0x5
80007b16:	14 19       	sub	r9,r10
80007b18:	f2 0a 15 05 	lsl	r10,r9,0x5
80007b1c:	12 1a       	sub	r10,r9
80007b1e:	14 08       	add	r8,r10
80007b20:	f6 08 00 08 	add	r8,r11,r8
80007b24:	2f c8       	sub	r8,-4
80007b26:	11 88       	ld.ub	r8,r8[0x0]
80007b28:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007b2c:	f2 08 00 08 	add	r8,r9,r8
80007b30:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[5];
80007b34:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007b38:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007b3c:	4c 0b       	lddpc	r11,80007c3c <calc_usage_csum+0x394>
80007b3e:	12 98       	mov	r8,r9
80007b40:	a3 68       	lsl	r8,0x2
80007b42:	12 08       	add	r8,r9
80007b44:	a1 78       	lsl	r8,0x1
80007b46:	14 99       	mov	r9,r10
80007b48:	a5 79       	lsl	r9,0x5
80007b4a:	14 19       	sub	r9,r10
80007b4c:	f2 0a 15 05 	lsl	r10,r9,0x5
80007b50:	12 1a       	sub	r10,r9
80007b52:	14 08       	add	r8,r10
80007b54:	f6 08 00 08 	add	r8,r11,r8
80007b58:	2f b8       	sub	r8,-5
80007b5a:	11 88       	ld.ub	r8,r8[0x0]
80007b5c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007b60:	f2 08 00 08 	add	r8,r9,r8
80007b64:	ef 68 ff fe 	st.b	r7[-2],r8
		
		csum += usageShdw[sel].u[i].maxUsageReached;
80007b68:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007b6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007b70:	4b 3b       	lddpc	r11,80007c3c <calc_usage_csum+0x394>
80007b72:	12 98       	mov	r8,r9
80007b74:	a3 68       	lsl	r8,0x2
80007b76:	12 08       	add	r8,r9
80007b78:	a1 78       	lsl	r8,0x1
80007b7a:	14 99       	mov	r9,r10
80007b7c:	a5 79       	lsl	r9,0x5
80007b7e:	14 19       	sub	r9,r10
80007b80:	f2 0a 15 05 	lsl	r10,r9,0x5
80007b84:	12 1a       	sub	r10,r9
80007b86:	14 08       	add	r8,r10
80007b88:	f6 08 00 08 	add	r8,r11,r8
80007b8c:	2f c8       	sub	r8,-4
80007b8e:	11 a8       	ld.ub	r8,r8[0x2]
80007b90:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80007b94:	5c 58       	castu.b	r8
80007b96:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007b9a:	f2 08 00 08 	add	r8,r9,r8
80007b9e:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].top_botn;
80007ba2:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007ba6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007baa:	4a 5b       	lddpc	r11,80007c3c <calc_usage_csum+0x394>
80007bac:	12 98       	mov	r8,r9
80007bae:	a3 68       	lsl	r8,0x2
80007bb0:	12 08       	add	r8,r9
80007bb2:	a1 78       	lsl	r8,0x1
80007bb4:	14 99       	mov	r9,r10
80007bb6:	a5 79       	lsl	r9,0x5
80007bb8:	14 19       	sub	r9,r10
80007bba:	f2 0a 15 05 	lsl	r10,r9,0x5
80007bbe:	12 1a       	sub	r10,r9
80007bc0:	14 08       	add	r8,r10
80007bc2:	f6 08 00 08 	add	r8,r11,r8
80007bc6:	2f c8       	sub	r8,-4
80007bc8:	11 a8       	ld.ub	r8,r8[0x2]
80007bca:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80007bce:	5c 58       	castu.b	r8
80007bd0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007bd4:	f2 08 00 08 	add	r8,r9,r8
80007bd8:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].slotFilled;
80007bdc:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007be0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007be4:	49 6b       	lddpc	r11,80007c3c <calc_usage_csum+0x394>
80007be6:	12 98       	mov	r8,r9
80007be8:	a3 68       	lsl	r8,0x2
80007bea:	12 08       	add	r8,r9
80007bec:	a1 78       	lsl	r8,0x1
80007bee:	14 99       	mov	r9,r10
80007bf0:	a5 79       	lsl	r9,0x5
80007bf2:	14 19       	sub	r9,r10
80007bf4:	f2 0a 15 05 	lsl	r10,r9,0x5
80007bf8:	12 1a       	sub	r10,r9
80007bfa:	14 08       	add	r8,r10
80007bfc:	f6 08 00 08 	add	r8,r11,r8
80007c00:	2f c8       	sub	r8,-4
80007c02:	11 a8       	ld.ub	r8,r8[0x2]
80007c04:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80007c08:	5c 58       	castu.b	r8
80007c0a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007c0e:	f2 08 00 08 	add	r8,r9,r8
80007c12:	ef 68 ff fe 	st.b	r7[-2],r8
	
/*
 * Lots of ways to checksum this struct, don't over-think it
 */

	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007c16:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007c1a:	2f f8       	sub	r8,-1
80007c1c:	ef 68 ff ff 	st.b	r7[-1],r8
80007c20:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007c24:	35 f8       	mov	r8,95
80007c26:	f0 09 18 00 	cp.b	r9,r8
80007c2a:	fe 98 fe 4d 	brls	800078c4 <calc_usage_csum+0x1c>
		csum += usageShdw[sel].u[i].maxUsageReached;
		csum += usageShdw[sel].u[i].top_botn;
		csum += usageShdw[sel].u[i].slotFilled;
	}
	
	return csum;
80007c2e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
80007c32:	10 9c       	mov	r12,r8
80007c34:	2f ed       	sub	sp,-8
80007c36:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c3a:	00 00       	add	r0,r0
80007c3c:	00 00       	add	r0,r0
80007c3e:	03 88       	ld.ub	r8,r1[0x0]

80007c40 <copy_usage_to_usage>:

void copy_usage_to_usage(unsigned char dst, unsigned char src)
{
80007c40:	eb cd 40 80 	pushm	r7,lr
80007c44:	1a 97       	mov	r7,sp
80007c46:	20 2d       	sub	sp,8
80007c48:	18 99       	mov	r9,r12
80007c4a:	16 98       	mov	r8,r11
80007c4c:	ef 69 ff fc 	st.b	r7[-4],r9
80007c50:	ef 68 ff f8 	st.b	r7[-8],r8
	memcpy(&usageShdw[dst], &usageShdw[src], sizeof(usageShdw[src]));
80007c54:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007c58:	12 98       	mov	r8,r9
80007c5a:	a5 78       	lsl	r8,0x5
80007c5c:	12 18       	sub	r8,r9
80007c5e:	f0 09 15 05 	lsl	r9,r8,0x5
80007c62:	10 19       	sub	r9,r8
80007c64:	48 b8       	lddpc	r8,80007c90 <copy_usage_to_usage+0x50>
80007c66:	f2 08 00 0b 	add	r11,r9,r8
80007c6a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c6e:	12 98       	mov	r8,r9
80007c70:	a5 78       	lsl	r8,0x5
80007c72:	12 18       	sub	r8,r9
80007c74:	f0 09 15 05 	lsl	r9,r8,0x5
80007c78:	10 19       	sub	r9,r8
80007c7a:	48 68       	lddpc	r8,80007c90 <copy_usage_to_usage+0x50>
80007c7c:	f2 08 00 08 	add	r8,r9,r8
80007c80:	e0 6a 03 c1 	mov	r10,961
80007c84:	10 9c       	mov	r12,r8
80007c86:	f0 1f 00 04 	mcall	80007c94 <copy_usage_to_usage+0x54>
}
80007c8a:	2f ed       	sub	sp,-8
80007c8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c90:	00 00       	add	r0,r0
80007c92:	03 88       	ld.ub	r8,r1[0x0]
80007c94:	80 00       	ld.sh	r0,r0[0x0]
80007c96:	a5 1a       	ld.d	r10,--r2

80007c98 <write_usage_to_flash>:

void write_usage_to_flash(unsigned char sel)
{
80007c98:	eb cd 40 80 	pushm	r7,lr
80007c9c:	1a 97       	mov	r7,sp
80007c9e:	20 1d       	sub	sp,4
80007ca0:	18 98       	mov	r8,r12
80007ca2:	ef 68 ff fc 	st.b	r7[-4],r8
	if (sel == 0)
80007ca6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007caa:	30 08       	mov	r8,0
80007cac:	f0 09 18 00 	cp.b	r9,r8
80007cb0:	c0 91       	brne	80007cc2 <write_usage_to_flash+0x2a>
	{
		flashc_memcpy(serialIdAndUsageFlashZero, &usageShdw[0], sizeof(usageShdw[0]),true);
80007cb2:	30 19       	mov	r9,1
80007cb4:	e0 6a 03 c1 	mov	r10,961
80007cb8:	48 9b       	lddpc	r11,80007cdc <write_usage_to_flash+0x44>
80007cba:	48 ac       	lddpc	r12,80007ce0 <write_usage_to_flash+0x48>
80007cbc:	f0 1f 00 0a 	mcall	80007ce4 <write_usage_to_flash+0x4c>
80007cc0:	c0 b8       	rjmp	80007cd6 <write_usage_to_flash+0x3e>
	}
	else
	{
		flashc_memcpy(serialIdAndUsageFlashOne, &usageShdw[1], sizeof(usageShdw[1]),true);
80007cc2:	48 78       	lddpc	r8,80007cdc <write_usage_to_flash+0x44>
80007cc4:	f0 c8 fc 3f 	sub	r8,r8,-961
80007cc8:	30 19       	mov	r9,1
80007cca:	e0 6a 03 c1 	mov	r10,961
80007cce:	10 9b       	mov	r11,r8
80007cd0:	48 6c       	lddpc	r12,80007ce8 <write_usage_to_flash+0x50>
80007cd2:	f0 1f 00 05 	mcall	80007ce4 <write_usage_to_flash+0x4c>
	}
}
80007cd6:	2f fd       	sub	sp,-4
80007cd8:	e3 cd 80 80 	ldm	sp++,r7,pc
80007cdc:	00 00       	add	r0,r0
80007cde:	03 88       	ld.ub	r8,r1[0x0]
80007ce0:	80 07       	ld.sh	r7,r0[0x0]
80007ce2:	f0 00       	*unknown*
80007ce4:	80 00       	ld.sh	r0,r0[0x0]
80007ce6:	43 0c       	lddsp	r12,sp[0xc0]
80007ce8:	80 07       	ld.sh	r7,r0[0x0]
80007cea:	f8 00       	*unknown*

80007cec <calc_usage_current_led_boards>:

unsigned long calc_usage_current_led_boards(unsigned char sel);
unsigned long calc_usage_current_led_boards(unsigned char sel)
{
80007cec:	eb cd 40 80 	pushm	r7,lr
80007cf0:	1a 97       	mov	r7,sp
80007cf2:	20 ad       	sub	sp,40
80007cf4:	18 98       	mov	r8,r12
80007cf6:	ef 68 ff d8 	st.b	r7[-40],r8
	unsigned long hrs_thous = 0, 
80007cfa:	30 08       	mov	r8,0
80007cfc:	ef 48 ff dc 	st.w	r7[-36],r8
		hrs_huns = 0, 
80007d00:	30 08       	mov	r8,0
80007d02:	ef 48 ff e0 	st.w	r7[-32],r8
		hrs_tens = 0, 
80007d06:	30 08       	mov	r8,0
80007d08:	ef 48 ff e4 	st.w	r7[-28],r8
		hrs_ones = 0, 
80007d0c:	30 08       	mov	r8,0
80007d0e:	ef 48 ff e8 	st.w	r7[-24],r8
		min_tens = 0, 
80007d12:	30 08       	mov	r8,0
80007d14:	ef 48 ff ec 	st.w	r7[-20],r8
		min_ones = 0;
80007d18:	30 08       	mov	r8,0
80007d1a:	ef 48 ff f0 	st.w	r7[-16],r8
		
	unsigned char idx;
	unsigned long retMinutes;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
80007d1e:	30 08       	mov	r8,0
80007d20:	ef 68 ff ff 	st.b	r7[-1],r8
80007d24:	cd 28       	rjmp	80007ec8 <calc_usage_current_led_boards+0x1dc>
	{
		if (usageIdx[sel][i] != NO_LED_BOARD_PRESENT)
80007d26:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007d2a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007d2e:	fe f9 02 1a 	ld.w	r9,pc[538]
80007d32:	a3 7a       	lsl	r10,0x3
80007d34:	f4 08 00 08 	add	r8,r10,r8
80007d38:	f2 08 00 08 	add	r8,r9,r8
80007d3c:	11 89       	ld.ub	r9,r8[0x0]
80007d3e:	3f f8       	mov	r8,-1
80007d40:	f0 09 18 00 	cp.b	r9,r8
80007d44:	e0 80 00 bd 	breq	80007ebe <calc_usage_current_led_boards+0x1d2>
		{
			idx = usageIdx[sel][i];
80007d48:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007d4c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007d50:	4f e9       	lddpc	r9,80007f48 <calc_usage_current_led_boards+0x25c>
80007d52:	a3 7a       	lsl	r10,0x3
80007d54:	f4 08 00 08 	add	r8,r10,r8
80007d58:	f2 08 00 08 	add	r8,r9,r8
80007d5c:	11 88       	ld.ub	r8,r8[0x0]
80007d5e:	ef 68 ff f7 	st.b	r7[-9],r8
					
			hrs_thous += usageShdw[sel].u[idx].hrs_thous;
80007d62:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007d66:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80007d6a:	4f 9b       	lddpc	r11,80007f4c <calc_usage_current_led_boards+0x260>
80007d6c:	12 98       	mov	r8,r9
80007d6e:	a3 68       	lsl	r8,0x2
80007d70:	12 08       	add	r8,r9
80007d72:	a1 78       	lsl	r8,0x1
80007d74:	14 99       	mov	r9,r10
80007d76:	a5 79       	lsl	r9,0x5
80007d78:	14 19       	sub	r9,r10
80007d7a:	f2 0a 15 05 	lsl	r10,r9,0x5
80007d7e:	12 1a       	sub	r10,r9
80007d80:	14 08       	add	r8,r10
80007d82:	f6 08 00 08 	add	r8,r11,r8
80007d86:	2f c8       	sub	r8,-4
80007d88:	11 b8       	ld.ub	r8,r8[0x3]
80007d8a:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007d8e:	5c 58       	castu.b	r8
80007d90:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007d94:	f2 08 00 08 	add	r8,r9,r8
80007d98:	ef 48 ff dc 	st.w	r7[-36],r8
			hrs_huns += usageShdw[sel].u[idx].hrs_huns;
80007d9c:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007da0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80007da4:	4e ab       	lddpc	r11,80007f4c <calc_usage_current_led_boards+0x260>
80007da6:	12 98       	mov	r8,r9
80007da8:	a3 68       	lsl	r8,0x2
80007daa:	12 08       	add	r8,r9
80007dac:	a1 78       	lsl	r8,0x1
80007dae:	14 99       	mov	r9,r10
80007db0:	a5 79       	lsl	r9,0x5
80007db2:	14 19       	sub	r9,r10
80007db4:	f2 0a 15 05 	lsl	r10,r9,0x5
80007db8:	12 1a       	sub	r10,r9
80007dba:	14 08       	add	r8,r10
80007dbc:	f6 08 00 08 	add	r8,r11,r8
80007dc0:	2f c8       	sub	r8,-4
80007dc2:	11 b8       	ld.ub	r8,r8[0x3]
80007dc4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007dc8:	5c 58       	castu.b	r8
80007dca:	ee f9 ff e0 	ld.w	r9,r7[-32]
80007dce:	f2 08 00 08 	add	r8,r9,r8
80007dd2:	ef 48 ff e0 	st.w	r7[-32],r8
			hrs_tens += usageShdw[sel].u[idx].hrs_tens;
80007dd6:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007dda:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80007dde:	4d cb       	lddpc	r11,80007f4c <calc_usage_current_led_boards+0x260>
80007de0:	12 98       	mov	r8,r9
80007de2:	a3 68       	lsl	r8,0x2
80007de4:	12 08       	add	r8,r9
80007de6:	a1 78       	lsl	r8,0x1
80007de8:	14 99       	mov	r9,r10
80007dea:	a5 79       	lsl	r9,0x5
80007dec:	14 19       	sub	r9,r10
80007dee:	f2 0a 15 05 	lsl	r10,r9,0x5
80007df2:	12 1a       	sub	r10,r9
80007df4:	14 08       	add	r8,r10
80007df6:	f6 08 00 08 	add	r8,r11,r8
80007dfa:	2f 88       	sub	r8,-8
80007dfc:	11 88       	ld.ub	r8,r8[0x0]
80007dfe:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007e02:	5c 58       	castu.b	r8
80007e04:	ee f9 ff e4 	ld.w	r9,r7[-28]
80007e08:	f2 08 00 08 	add	r8,r9,r8
80007e0c:	ef 48 ff e4 	st.w	r7[-28],r8
			hrs_ones += usageShdw[sel].u[idx].hrs_ones;
80007e10:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007e14:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80007e18:	4c db       	lddpc	r11,80007f4c <calc_usage_current_led_boards+0x260>
80007e1a:	12 98       	mov	r8,r9
80007e1c:	a3 68       	lsl	r8,0x2
80007e1e:	12 08       	add	r8,r9
80007e20:	a1 78       	lsl	r8,0x1
80007e22:	14 99       	mov	r9,r10
80007e24:	a5 79       	lsl	r9,0x5
80007e26:	14 19       	sub	r9,r10
80007e28:	f2 0a 15 05 	lsl	r10,r9,0x5
80007e2c:	12 1a       	sub	r10,r9
80007e2e:	14 08       	add	r8,r10
80007e30:	f6 08 00 08 	add	r8,r11,r8
80007e34:	2f 88       	sub	r8,-8
80007e36:	11 88       	ld.ub	r8,r8[0x0]
80007e38:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007e3c:	5c 58       	castu.b	r8
80007e3e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80007e42:	f2 08 00 08 	add	r8,r9,r8
80007e46:	ef 48 ff e8 	st.w	r7[-24],r8
			min_tens += usageShdw[sel].u[idx].min_tens;
80007e4a:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007e4e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80007e52:	4b fb       	lddpc	r11,80007f4c <calc_usage_current_led_boards+0x260>
80007e54:	12 98       	mov	r8,r9
80007e56:	a3 68       	lsl	r8,0x2
80007e58:	12 08       	add	r8,r9
80007e5a:	a1 78       	lsl	r8,0x1
80007e5c:	14 99       	mov	r9,r10
80007e5e:	a5 79       	lsl	r9,0x5
80007e60:	14 19       	sub	r9,r10
80007e62:	f2 0a 15 05 	lsl	r10,r9,0x5
80007e66:	12 1a       	sub	r10,r9
80007e68:	14 08       	add	r8,r10
80007e6a:	f6 08 00 08 	add	r8,r11,r8
80007e6e:	2f 88       	sub	r8,-8
80007e70:	11 98       	ld.ub	r8,r8[0x1]
80007e72:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007e76:	5c 58       	castu.b	r8
80007e78:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007e7c:	f2 08 00 08 	add	r8,r9,r8
80007e80:	ef 48 ff ec 	st.w	r7[-20],r8
			min_ones += usageShdw[sel].u[idx].min_ones;
80007e84:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007e88:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80007e8c:	4b 0b       	lddpc	r11,80007f4c <calc_usage_current_led_boards+0x260>
80007e8e:	12 98       	mov	r8,r9
80007e90:	a3 68       	lsl	r8,0x2
80007e92:	12 08       	add	r8,r9
80007e94:	a1 78       	lsl	r8,0x1
80007e96:	14 99       	mov	r9,r10
80007e98:	a5 79       	lsl	r9,0x5
80007e9a:	14 19       	sub	r9,r10
80007e9c:	f2 0a 15 05 	lsl	r10,r9,0x5
80007ea0:	12 1a       	sub	r10,r9
80007ea2:	14 08       	add	r8,r10
80007ea4:	f6 08 00 08 	add	r8,r11,r8
80007ea8:	2f 88       	sub	r8,-8
80007eaa:	11 98       	ld.ub	r8,r8[0x1]
80007eac:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007eb0:	5c 58       	castu.b	r8
80007eb2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007eb6:	f2 08 00 08 	add	r8,r9,r8
80007eba:	ef 48 ff f0 	st.w	r7[-16],r8
		min_ones = 0;
		
	unsigned char idx;
	unsigned long retMinutes;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
80007ebe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007ec2:	2f f8       	sub	r8,-1
80007ec4:	ef 68 ff ff 	st.b	r7[-1],r8
80007ec8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007ecc:	30 78       	mov	r8,7
80007ece:	f0 09 18 00 	cp.b	r9,r8
80007ed2:	fe 98 ff 2a 	brls	80007d26 <calc_usage_current_led_boards+0x3a>
			min_tens += usageShdw[sel].u[idx].min_tens;
			min_ones += usageShdw[sel].u[idx].min_ones;
		}
	}
	
	retMinutes = (hrs_thous * 1000) + (hrs_huns * 100) + (hrs_tens * 10) + (hrs_ones);
80007ed6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007eda:	e0 68 03 e8 	mov	r8,1000
80007ede:	b1 39       	mul	r9,r8
80007ee0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007ee4:	f0 08 10 64 	mul	r8,r8,100
80007ee8:	f2 08 00 0a 	add	r10,r9,r8
80007eec:	ee f9 ff e4 	ld.w	r9,r7[-28]
80007ef0:	12 98       	mov	r8,r9
80007ef2:	a3 68       	lsl	r8,0x2
80007ef4:	12 08       	add	r8,r9
80007ef6:	a1 78       	lsl	r8,0x1
80007ef8:	f4 08 00 09 	add	r9,r10,r8
80007efc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007f00:	f2 08 00 08 	add	r8,r9,r8
80007f04:	ef 48 ff f8 	st.w	r7[-8],r8
	retMinutes *= 60;
80007f08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007f0c:	12 98       	mov	r8,r9
80007f0e:	a5 68       	lsl	r8,0x4
80007f10:	12 18       	sub	r8,r9
80007f12:	a3 68       	lsl	r8,0x2
80007f14:	ef 48 ff f8 	st.w	r7[-8],r8
	retMinutes += ((min_tens * 10) + (min_ones));
80007f18:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007f1c:	12 98       	mov	r8,r9
80007f1e:	a3 68       	lsl	r8,0x2
80007f20:	12 08       	add	r8,r9
80007f22:	a1 78       	lsl	r8,0x1
80007f24:	10 99       	mov	r9,r8
80007f26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f2a:	f2 08 00 08 	add	r8,r9,r8
80007f2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007f32:	f2 08 00 08 	add	r8,r9,r8
80007f36:	ef 48 ff f8 	st.w	r7[-8],r8
	
	return retMinutes;
80007f3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80007f3e:	10 9c       	mov	r12,r8
80007f40:	2f 6d       	sub	sp,-40
80007f42:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f46:	00 00       	add	r0,r0
80007f48:	00 00       	add	r0,r0
80007f4a:	03 69       	ld.uh	r9,--r1
80007f4c:	00 00       	add	r0,r0
80007f4e:	03 88       	ld.ub	r8,r1[0x0]

80007f50 <increment_ledBoard_usage_min>:

void increment_ledBoard_usage_min(void);
void increment_ledBoard_usage_min(void)
{
80007f50:	eb cd 40 c0 	pushm	r6-r7,lr
80007f54:	1a 97       	mov	r7,sp
80007f56:	20 3d       	sub	sp,12
	unsigned char topLEDboardLowerSideIdx;
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	
	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
80007f58:	30 08       	mov	r8,0
80007f5a:	ef 68 ff fd 	st.b	r7[-3],r8
80007f5e:	c8 f9       	rjmp	8000827c <increment_ledBoard_usage_min+0x32c>
	{
		if (shelf[i].active == SHELF_ACTIVE)
80007f60:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80007f64:	fe fa 03 7c 	ld.w	r10,pc[892]
80007f68:	12 98       	mov	r8,r9
80007f6a:	a3 68       	lsl	r8,0x2
80007f6c:	12 08       	add	r8,r9
80007f6e:	f4 08 00 08 	add	r8,r10,r8
80007f72:	11 88       	ld.ub	r8,r8[0x0]
80007f74:	58 08       	cp.w	r8,0
80007f76:	e0 81 01 7e 	brne	80008272 <increment_ledBoard_usage_min+0x322>
		{
			topLEDboardLowerSideIdx = ledBrd[shelf[i].tLedIdx].lSideIdx;
80007f7a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80007f7e:	fe fa 03 62 	ld.w	r10,pc[866]
80007f82:	12 98       	mov	r8,r9
80007f84:	a3 68       	lsl	r8,0x2
80007f86:	12 08       	add	r8,r9
80007f88:	f4 08 00 08 	add	r8,r10,r8
80007f8c:	2f f8       	sub	r8,-1
80007f8e:	11 88       	ld.ub	r8,r8[0x0]
80007f90:	10 99       	mov	r9,r8
80007f92:	fe fa 03 52 	ld.w	r10,pc[850]
80007f96:	12 98       	mov	r8,r9
80007f98:	a3 78       	lsl	r8,0x3
80007f9a:	12 18       	sub	r8,r9
80007f9c:	a1 78       	lsl	r8,0x1
80007f9e:	f4 08 00 08 	add	r8,r10,r8
80007fa2:	2f 58       	sub	r8,-11
80007fa4:	11 88       	ld.ub	r8,r8[0x0]
80007fa6:	ef 68 ff f9 	st.b	r7[-7],r8
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
80007faa:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80007fae:	fe fa 03 32 	ld.w	r10,pc[818]
80007fb2:	12 98       	mov	r8,r9
80007fb4:	a3 68       	lsl	r8,0x2
80007fb6:	12 08       	add	r8,r9
80007fb8:	f4 08 00 08 	add	r8,r10,r8
80007fbc:	2f e8       	sub	r8,-2
80007fbe:	11 88       	ld.ub	r8,r8[0x0]
80007fc0:	10 99       	mov	r9,r8
80007fc2:	fe fa 03 22 	ld.w	r10,pc[802]
80007fc6:	12 98       	mov	r8,r9
80007fc8:	a3 78       	lsl	r8,0x3
80007fca:	12 18       	sub	r8,r9
80007fcc:	a1 78       	lsl	r8,0x1
80007fce:	f4 08 00 08 	add	r8,r10,r8
80007fd2:	2f 68       	sub	r8,-10
80007fd4:	11 88       	ld.ub	r8,r8[0x0]
80007fd6:	ef 68 ff fa 	st.b	r7[-6],r8
		
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
80007fda:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80007fde:	fe fa 03 0a 	ld.w	r10,pc[778]
80007fe2:	12 98       	mov	r8,r9
80007fe4:	a3 68       	lsl	r8,0x2
80007fe6:	12 08       	add	r8,r9
80007fe8:	f4 08 00 08 	add	r8,r10,r8
80007fec:	2f f8       	sub	r8,-1
80007fee:	11 88       	ld.ub	r8,r8[0x0]
80007ff0:	ef 68 ff fb 	st.b	r7[-5],r8
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
80007ff4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80007ff8:	fe fa 02 f0 	ld.w	r10,pc[752]
80007ffc:	12 98       	mov	r8,r9
80007ffe:	a3 68       	lsl	r8,0x2
80008000:	12 08       	add	r8,r9
80008002:	f4 08 00 08 	add	r8,r10,r8
80008006:	2f f8       	sub	r8,-1
80008008:	11 88       	ld.ub	r8,r8[0x0]
8000800a:	ef 68 ff fc 	st.b	r7[-4],r8
		
			for (unsigned char j=0; j<2; j++) //for each copy of usageShdw[] (update both copies every time)
8000800e:	30 08       	mov	r8,0
80008010:	ef 68 ff fe 	st.b	r7[-2],r8
80008014:	c2 89       	rjmp	80008264 <increment_ledBoard_usage_min+0x314>
			{
				for (unsigned char k=0; k<2; k++) //for each board side in the shelf
80008016:	30 08       	mov	r8,0
80008018:	ef 68 ff ff 	st.b	r7[-1],r8
8000801c:	c1 89       	rjmp	8000824c <increment_ledBoard_usage_min+0x2fc>
				{
					switch (k)
8000801e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008022:	58 08       	cp.w	r8,0
80008024:	c0 40       	breq	8000802c <increment_ledBoard_usage_min+0xdc>
80008026:	58 18       	cp.w	r8,1
80008028:	c1 90       	breq	8000805a <increment_ledBoard_usage_min+0x10a>
8000802a:	c2 e8       	rjmp	80008086 <increment_ledBoard_usage_min+0x136>
					{
						case 0:
							tmp = &usageShdw[j].u[topUIdx];
8000802c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80008030:	12 98       	mov	r8,r9
80008032:	a5 78       	lsl	r8,0x5
80008034:	12 18       	sub	r8,r9
80008036:	f0 09 15 05 	lsl	r9,r8,0x5
8000803a:	10 19       	sub	r9,r8
8000803c:	fe f8 02 b0 	ld.w	r8,pc[688]
80008040:	f2 08 00 0a 	add	r10,r9,r8
80008044:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80008048:	12 98       	mov	r8,r9
8000804a:	a3 68       	lsl	r8,0x2
8000804c:	12 08       	add	r8,r9
8000804e:	a1 78       	lsl	r8,0x1
80008050:	f4 08 00 08 	add	r8,r10,r8
80008054:	ef 48 ff f4 	st.w	r7[-12],r8
							break;
80008058:	c1 78       	rjmp	80008086 <increment_ledBoard_usage_min+0x136>
						case 1:
							tmp = &usageShdw[j].u[bottomUIdx];
8000805a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000805e:	12 98       	mov	r8,r9
80008060:	a5 78       	lsl	r8,0x5
80008062:	12 18       	sub	r8,r9
80008064:	f0 09 15 05 	lsl	r9,r8,0x5
80008068:	10 19       	sub	r9,r8
8000806a:	fe f8 02 82 	ld.w	r8,pc[642]
8000806e:	f2 08 00 0a 	add	r10,r9,r8
80008072:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80008076:	12 98       	mov	r8,r9
80008078:	a3 68       	lsl	r8,0x2
8000807a:	12 08       	add	r8,r9
8000807c:	a1 78       	lsl	r8,0x1
8000807e:	f4 08 00 08 	add	r8,r10,r8
80008082:	ef 48 ff f4 	st.w	r7[-12],r8
							break;
					}

					if (++(tmp->min_ones) > 9)
80008086:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000808a:	f1 38 00 09 	ld.ub	r8,r8[9]
8000808e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008092:	5c 58       	castu.b	r8
80008094:	2f f8       	sub	r8,-1
80008096:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000809a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8000809e:	ee f9 ff f4 	ld.w	r9,r7[-12]
800080a2:	f3 38 00 09 	ld.ub	r8,r9[9]
800080a6:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
800080aa:	f3 68 00 09 	st.b	r9[9],r8
800080ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800080b2:	f1 38 00 09 	ld.ub	r8,r8[9]
800080b6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800080ba:	5c 58       	castu.b	r8
800080bc:	58 98       	cp.w	r8,9
800080be:	e0 8a 00 c2 	brle	80008242 <increment_ledBoard_usage_min+0x2f2>
					{
						tmp->min_ones = 0;
800080c2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800080c6:	f3 38 00 09 	ld.ub	r8,r9[9]
800080ca:	30 0a       	mov	r10,0
800080cc:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
800080d0:	f3 68 00 09 	st.b	r9[9],r8
				
						if (++(tmp->min_tens) > 5)
800080d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800080d8:	f1 38 00 09 	ld.ub	r8,r8[9]
800080dc:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800080e0:	5c 58       	castu.b	r8
800080e2:	2f f8       	sub	r8,-1
800080e4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800080e8:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800080ec:	ee f9 ff f4 	ld.w	r9,r7[-12]
800080f0:	f3 38 00 09 	ld.ub	r8,r9[9]
800080f4:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
800080f8:	f3 68 00 09 	st.b	r9[9],r8
800080fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008100:	f1 38 00 09 	ld.ub	r8,r8[9]
80008104:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80008108:	5c 58       	castu.b	r8
8000810a:	58 58       	cp.w	r8,5
8000810c:	e0 8a 00 9b 	brle	80008242 <increment_ledBoard_usage_min+0x2f2>
						{
							tmp->min_tens = 0;
80008110:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008114:	f3 38 00 09 	ld.ub	r8,r9[9]
80008118:	30 0a       	mov	r10,0
8000811a:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8000811e:	f3 68 00 09 	st.b	r9[9],r8
					
							if (++(tmp->hrs_ones) > 9)
80008122:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008126:	f1 38 00 08 	ld.ub	r8,r8[8]
8000812a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000812e:	5c 58       	castu.b	r8
80008130:	2f f8       	sub	r8,-1
80008132:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008136:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8000813a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000813e:	f3 38 00 08 	ld.ub	r8,r9[8]
80008142:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80008146:	f3 68 00 08 	st.b	r9[8],r8
8000814a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000814e:	f1 38 00 08 	ld.ub	r8,r8[8]
80008152:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008156:	5c 58       	castu.b	r8
80008158:	58 98       	cp.w	r8,9
8000815a:	e0 8a 00 74 	brle	80008242 <increment_ledBoard_usage_min+0x2f2>
							{
								tmp->hrs_ones = 0;
8000815e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008162:	f3 38 00 08 	ld.ub	r8,r9[8]
80008166:	30 0a       	mov	r10,0
80008168:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
8000816c:	f3 68 00 08 	st.b	r9[8],r8
						
								if (++(tmp->hrs_tens) > 9)
80008170:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008174:	f1 38 00 08 	ld.ub	r8,r8[8]
80008178:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000817c:	5c 58       	castu.b	r8
8000817e:	2f f8       	sub	r8,-1
80008180:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008184:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80008188:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000818c:	f3 38 00 08 	ld.ub	r8,r9[8]
80008190:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80008194:	f3 68 00 08 	st.b	r9[8],r8
80008198:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000819c:	f1 38 00 08 	ld.ub	r8,r8[8]
800081a0:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800081a4:	5c 58       	castu.b	r8
800081a6:	58 98       	cp.w	r8,9
800081a8:	e0 8a 00 4d 	brle	80008242 <increment_ledBoard_usage_min+0x2f2>
								{
									tmp->hrs_tens = 0;
800081ac:	ee f9 ff f4 	ld.w	r9,r7[-12]
800081b0:	f3 38 00 08 	ld.ub	r8,r9[8]
800081b4:	30 0a       	mov	r10,0
800081b6:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
800081ba:	f3 68 00 08 	st.b	r9[8],r8
							
									if (++(tmp->hrs_huns) > 9)
800081be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800081c2:	11 f8       	ld.ub	r8,r8[0x7]
800081c4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800081c8:	5c 58       	castu.b	r8
800081ca:	2f f8       	sub	r8,-1
800081cc:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800081d0:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800081d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800081d8:	13 f8       	ld.ub	r8,r9[0x7]
800081da:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
800081de:	b2 f8       	st.b	r9[0x7],r8
800081e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800081e4:	11 f8       	ld.ub	r8,r8[0x7]
800081e6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800081ea:	5c 58       	castu.b	r8
800081ec:	58 98       	cp.w	r8,9
800081ee:	e0 8a 00 2a 	brle	80008242 <increment_ledBoard_usage_min+0x2f2>
									{
										tmp->hrs_huns = 0;
800081f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800081f6:	13 f8       	ld.ub	r8,r9[0x7]
800081f8:	30 0a       	mov	r10,0
800081fa:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
800081fe:	b2 f8       	st.b	r9[0x7],r8
								
										if (++(tmp->hrs_thous) > 1)
80008200:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008204:	11 f8       	ld.ub	r8,r8[0x7]
80008206:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000820a:	5c 58       	castu.b	r8
8000820c:	2f f8       	sub	r8,-1
8000820e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008212:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80008216:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000821a:	13 f8       	ld.ub	r8,r9[0x7]
8000821c:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80008220:	b2 f8       	st.b	r9[0x7],r8
80008222:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008226:	11 f8       	ld.ub	r8,r8[0x7]
80008228:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000822c:	5c 58       	castu.b	r8
8000822e:	58 18       	cp.w	r8,1
80008230:	e0 8a 00 09 	brle	80008242 <increment_ledBoard_usage_min+0x2f2>
										{
											tmp->maxUsageReached = 1; //And...we're done. Reached 2000 hours.
80008234:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008238:	13 e8       	ld.ub	r8,r9[0x6]
8000823a:	30 1a       	mov	r10,1
8000823c:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
80008240:	b2 e8       	st.b	r9[0x6],r8
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
		
			for (unsigned char j=0; j<2; j++) //for each copy of usageShdw[] (update both copies every time)
			{
				for (unsigned char k=0; k<2; k++) //for each board side in the shelf
80008242:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008246:	2f f8       	sub	r8,-1
80008248:	ef 68 ff ff 	st.b	r7[-1],r8
8000824c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008250:	30 18       	mov	r8,1
80008252:	f0 09 18 00 	cp.b	r9,r8
80008256:	fe 98 fe e4 	brls	8000801e <increment_ledBoard_usage_min+0xce>
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
		
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
		
			for (unsigned char j=0; j<2; j++) //for each copy of usageShdw[] (update both copies every time)
8000825a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000825e:	2f f8       	sub	r8,-1
80008260:	ef 68 ff fe 	st.b	r7[-2],r8
80008264:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80008268:	30 18       	mov	r8,1
8000826a:	f0 09 18 00 	cp.b	r9,r8
8000826e:	fe 98 fe d4 	brls	80008016 <increment_ledBoard_usage_min+0xc6>
	unsigned char topLEDboardLowerSideIdx;
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	
	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
80008272:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008276:	2f f8       	sub	r8,-1
80008278:	ef 68 ff fd 	st.b	r7[-3],r8
8000827c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80008280:	30 38       	mov	r8,3
80008282:	f0 09 18 00 	cp.b	r9,r8
80008286:	fe 98 fe 6d 	brls	80007f60 <increment_ledBoard_usage_min+0x10>
				} //for each board side in the shelf (k)
			} //for each copy of usageShdw
		} //if (shelf[i].active)
	} //for (i=0; i<NUM_SHELVES; i++)
	
	usageShdw[pingPong].csum = calc_usage_csum(pingPong);
8000828a:	49 a8       	lddpc	r8,800082f0 <increment_ledBoard_usage_min+0x3a0>
8000828c:	11 88       	ld.ub	r8,r8[0x0]
8000828e:	10 96       	mov	r6,r8
80008290:	49 88       	lddpc	r8,800082f0 <increment_ledBoard_usage_min+0x3a0>
80008292:	11 88       	ld.ub	r8,r8[0x0]
80008294:	10 9c       	mov	r12,r8
80008296:	f0 1f 00 18 	mcall	800082f4 <increment_ledBoard_usage_min+0x3a4>
8000829a:	18 98       	mov	r8,r12
8000829c:	10 9a       	mov	r10,r8
8000829e:	49 4b       	lddpc	r11,800082ec <increment_ledBoard_usage_min+0x39c>
800082a0:	0c 98       	mov	r8,r6
800082a2:	a5 78       	lsl	r8,0x5
800082a4:	0c 18       	sub	r8,r6
800082a6:	f0 09 15 05 	lsl	r9,r8,0x5
800082aa:	10 19       	sub	r9,r8
800082ac:	f6 09 00 08 	add	r8,r11,r9
800082b0:	f0 c9 fc 40 	sub	r9,r8,-960
800082b4:	14 98       	mov	r8,r10
800082b6:	b2 88       	st.b	r9[0x0],r8
			
	write_usage_to_flash(pingPong);
800082b8:	48 e8       	lddpc	r8,800082f0 <increment_ledBoard_usage_min+0x3a0>
800082ba:	11 88       	ld.ub	r8,r8[0x0]
800082bc:	10 9c       	mov	r12,r8
800082be:	f0 1f 00 0f 	mcall	800082f8 <increment_ledBoard_usage_min+0x3a8>
	
	pingPong++;
800082c2:	48 c8       	lddpc	r8,800082f0 <increment_ledBoard_usage_min+0x3a0>
800082c4:	11 88       	ld.ub	r8,r8[0x0]
800082c6:	2f f8       	sub	r8,-1
800082c8:	5c 58       	castu.b	r8
800082ca:	48 a9       	lddpc	r9,800082f0 <increment_ledBoard_usage_min+0x3a0>
800082cc:	b2 88       	st.b	r9[0x0],r8
	pingPong &= 1; //toggle between 0 (EVEN) and 1 (ODD)
800082ce:	48 98       	lddpc	r8,800082f0 <increment_ledBoard_usage_min+0x3a0>
800082d0:	11 88       	ld.ub	r8,r8[0x0]
800082d2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800082d6:	48 79       	lddpc	r9,800082f0 <increment_ledBoard_usage_min+0x3a0>
800082d8:	b2 88       	st.b	r9[0x0],r8
}
800082da:	2f dd       	sub	sp,-12
800082dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800082e0:	00 00       	add	r0,r0
800082e2:	03 3a       	ld.ub	r10,r1++
800082e4:	00 00       	add	r0,r0
800082e6:	02 f4       	st.b	--r1,r4
800082e8:	00 00       	add	r0,r0
800082ea:	0b 24       	ld.uh	r4,r5++
800082ec:	00 00       	add	r0,r0
800082ee:	03 88       	ld.ub	r8,r1[0x0]
800082f0:	00 00       	add	r0,r0
800082f2:	0b 4d       	ld.w	sp,--r5
800082f4:	80 00       	ld.sh	r0,r0[0x0]
800082f6:	78 a8       	ld.w	r8,r12[0x28]
800082f8:	80 00       	ld.sh	r0,r0[0x0]
800082fa:	7c 98       	ld.w	r8,lr[0x24]

800082fc <init_shelf_n_ledBrd_structs>:


void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
800082fc:	eb cd 40 80 	pushm	r7,lr
80008300:	1a 97       	mov	r7,sp
80008302:	20 5d       	sub	sp,20
	
	for (int i=0; i<NUM_SHELVES; i++)
80008304:	30 08       	mov	r8,0
80008306:	ef 48 ff ec 	st.w	r7[-20],r8
8000830a:	c2 b8       	rjmp	80008360 <init_shelf_n_ledBrd_structs+0x64>
	{
		shelf[i].active = 0;
8000830c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008310:	fe fa 02 ac 	ld.w	r10,pc[684]
80008314:	12 98       	mov	r8,r9
80008316:	a3 68       	lsl	r8,0x2
80008318:	12 08       	add	r8,r9
8000831a:	f4 08 00 09 	add	r9,r10,r8
8000831e:	30 08       	mov	r8,0
80008320:	b2 88       	st.b	r9[0x0],r8
		shelf[i].devicesPresent = 0;
80008322:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008326:	fe fa 02 96 	ld.w	r10,pc[662]
8000832a:	12 98       	mov	r8,r9
8000832c:	a3 68       	lsl	r8,0x2
8000832e:	12 08       	add	r8,r9
80008330:	f4 08 00 08 	add	r8,r10,r8
80008334:	f0 c9 ff fd 	sub	r9,r8,-3
80008338:	30 08       	mov	r8,0
8000833a:	b2 88       	st.b	r9[0x0],r8
		shelf[i].present = 0;
8000833c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008340:	fe fa 02 7c 	ld.w	r10,pc[636]
80008344:	12 98       	mov	r8,r9
80008346:	a3 68       	lsl	r8,0x2
80008348:	12 08       	add	r8,r9
8000834a:	f4 08 00 08 	add	r8,r10,r8
8000834e:	f0 c9 ff fc 	sub	r9,r8,-4
80008352:	30 08       	mov	r8,0
80008354:	b2 88       	st.b	r9[0x0],r8

void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
	
	for (int i=0; i<NUM_SHELVES; i++)
80008356:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000835a:	2f f8       	sub	r8,-1
8000835c:	ef 48 ff ec 	st.w	r7[-20],r8
80008360:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008364:	58 38       	cp.w	r8,3
80008366:	fe 9a ff d3 	brle	8000830c <init_shelf_n_ledBrd_structs+0x10>
		shelf[i].active = 0;
		shelf[i].devicesPresent = 0;
		shelf[i].present = 0;
	}
	
	shelf[0].tLedIdx = 0;
8000836a:	fe f9 02 52 	ld.w	r9,pc[594]
8000836e:	30 08       	mov	r8,0
80008370:	b2 98       	st.b	r9[0x1],r8
	shelf[0].bLedIdx = 1;
80008372:	fe f9 02 4a 	ld.w	r9,pc[586]
80008376:	30 18       	mov	r8,1
80008378:	b2 a8       	st.b	r9[0x2],r8
	shelf[1].tLedIdx = 1;
8000837a:	fe f9 02 42 	ld.w	r9,pc[578]
8000837e:	30 18       	mov	r8,1
80008380:	b2 e8       	st.b	r9[0x6],r8
	shelf[1].bLedIdx = 2;
80008382:	fe f9 02 3a 	ld.w	r9,pc[570]
80008386:	30 28       	mov	r8,2
80008388:	b2 f8       	st.b	r9[0x7],r8
	shelf[2].tLedIdx = 2;
8000838a:	fe f9 02 32 	ld.w	r9,pc[562]
8000838e:	30 28       	mov	r8,2
80008390:	f3 68 00 0b 	st.b	r9[11],r8
	shelf[2].bLedIdx = 3;
80008394:	fe f9 02 28 	ld.w	r9,pc[552]
80008398:	30 38       	mov	r8,3
8000839a:	f3 68 00 0c 	st.b	r9[12],r8
	shelf[3].tLedIdx = 3;
8000839e:	fe f9 02 1e 	ld.w	r9,pc[542]
800083a2:	30 38       	mov	r8,3
800083a4:	f3 68 00 10 	st.b	r9[16],r8
	shelf[3].bLedIdx = 4;
800083a8:	fe f9 02 14 	ld.w	r9,pc[532]
800083ac:	30 48       	mov	r8,4
800083ae:	f3 68 00 11 	st.b	r9[17],r8
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
800083b2:	30 08       	mov	r8,0
800083b4:	ef 48 ff f0 	st.w	r7[-16],r8
800083b8:	c1 48       	rjmp	800083e0 <init_shelf_n_ledBrd_structs+0xe4>
	{
		ledBrd[i].present = 0;
800083ba:	ee f9 ff f0 	ld.w	r9,r7[-16]
800083be:	fe fa 02 02 	ld.w	r10,pc[514]
800083c2:	12 98       	mov	r8,r9
800083c4:	a3 78       	lsl	r8,0x3
800083c6:	12 18       	sub	r8,r9
800083c8:	a1 78       	lsl	r8,0x1
800083ca:	f4 08 00 08 	add	r8,r10,r8
800083ce:	f0 c9 ff f8 	sub	r9,r8,-8
800083d2:	30 08       	mov	r8,0
800083d4:	b2 88       	st.b	r9[0x0],r8
	shelf[2].tLedIdx = 2;
	shelf[2].bLedIdx = 3;
	shelf[3].tLedIdx = 3;
	shelf[3].bLedIdx = 4;
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
800083d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800083da:	2f f8       	sub	r8,-1
800083dc:	ef 48 ff f0 	st.w	r7[-16],r8
800083e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800083e4:	58 48       	cp.w	r8,4
800083e6:	fe 9a ff ea 	brle	800083ba <init_shelf_n_ledBrd_structs+0xbe>
	{
		ledBrd[i].present = 0;
	}
	
	ledBrd[0].uSideIdx = 0xFF;
800083ea:	4f 69       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
800083ec:	3f f8       	mov	r8,-1
800083ee:	f3 68 00 0a 	st.b	r9[10],r8
	ledBrd[0].lSideIdx = 0;
800083f2:	4f 49       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
800083f4:	30 08       	mov	r8,0
800083f6:	f3 68 00 0b 	st.b	r9[11],r8
	ledBrd[1].uSideIdx = 1;
800083fa:	4f 29       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
800083fc:	30 18       	mov	r8,1
800083fe:	f3 68 00 18 	st.b	r9[24],r8
	ledBrd[1].lSideIdx = 2;
80008402:	4f 09       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
80008404:	30 28       	mov	r8,2
80008406:	f3 68 00 19 	st.b	r9[25],r8
	ledBrd[2].uSideIdx = 3;
8000840a:	4e e9       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
8000840c:	30 38       	mov	r8,3
8000840e:	f3 68 00 26 	st.b	r9[38],r8
	ledBrd[2].lSideIdx = 4;
80008412:	4e c9       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
80008414:	30 48       	mov	r8,4
80008416:	f3 68 00 27 	st.b	r9[39],r8
	ledBrd[3].uSideIdx = 5;
8000841a:	4e a9       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
8000841c:	30 58       	mov	r8,5
8000841e:	f3 68 00 34 	st.b	r9[52],r8
	ledBrd[3].lSideIdx = 6;
80008422:	4e 89       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
80008424:	30 68       	mov	r8,6
80008426:	f3 68 00 35 	st.b	r9[53],r8
	ledBrd[4].uSideIdx = 7;
8000842a:	4e 69       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
8000842c:	30 78       	mov	r8,7
8000842e:	f3 68 00 42 	st.b	r9[66],r8
	ledBrd[4].lSideIdx = 0xFF;
80008432:	4e 49       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
80008434:	3f f8       	mov	r8,-1
80008436:	f3 68 00 43 	st.b	r9[67],r8

	ledBrd[0].uSideShelfIdx = 0xFF;
8000843a:	4e 29       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
8000843c:	3f f8       	mov	r8,-1
8000843e:	f3 68 00 0c 	st.b	r9[12],r8
	ledBrd[1].uSideShelfIdx = 0;
80008442:	4e 09       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
80008444:	30 08       	mov	r8,0
80008446:	f3 68 00 1a 	st.b	r9[26],r8
	ledBrd[2].uSideShelfIdx = 1;
8000844a:	4d e9       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
8000844c:	30 18       	mov	r8,1
8000844e:	f3 68 00 28 	st.b	r9[40],r8
	ledBrd[3].uSideShelfIdx = 2;
80008452:	4d c9       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
80008454:	30 28       	mov	r8,2
80008456:	f3 68 00 36 	st.b	r9[54],r8
	ledBrd[4].uSideShelfIdx = 3;
8000845a:	4d a9       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
8000845c:	30 38       	mov	r8,3
8000845e:	f3 68 00 44 	st.b	r9[68],r8
 
	ledBrd[0].lSideShelfIdx = 0;
80008462:	4d 89       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
80008464:	30 08       	mov	r8,0
80008466:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrd[1].lSideShelfIdx = 1;
8000846a:	4d 69       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
8000846c:	30 18       	mov	r8,1
8000846e:	f3 68 00 1b 	st.b	r9[27],r8
	ledBrd[2].lSideShelfIdx = 2;
80008472:	4d 49       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
80008474:	30 28       	mov	r8,2
80008476:	f3 68 00 29 	st.b	r9[41],r8
	ledBrd[3].lSideShelfIdx = 3;
8000847a:	4d 29       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
8000847c:	30 38       	mov	r8,3
8000847e:	f3 68 00 37 	st.b	r9[55],r8
	ledBrd[4].lSideShelfIdx = 0xFF;
80008482:	4d 09       	lddpc	r9,800085c0 <init_shelf_n_ledBrd_structs+0x2c4>
80008484:	3f f8       	mov	r8,-1
80008486:	f3 68 00 45 	st.b	r9[69],r8
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
8000848a:	30 08       	mov	r8,0
8000848c:	ef 48 ff f4 	st.w	r7[-12],r8
80008490:	c2 88       	rjmp	800084e0 <init_shelf_n_ledBrd_structs+0x1e4>
	{
		ledBrdSide[i].maxUsageReached = 0;
80008492:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008496:	4c ca       	lddpc	r10,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
80008498:	12 98       	mov	r8,r9
8000849a:	a3 68       	lsl	r8,0x2
8000849c:	12 08       	add	r8,r9
8000849e:	f4 08 00 08 	add	r8,r10,r8
800084a2:	f0 c9 ff fe 	sub	r9,r8,-2
800084a6:	30 08       	mov	r8,0
800084a8:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].sanitizeMinutes = 0;
800084aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800084ae:	4c 6a       	lddpc	r10,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
800084b0:	12 98       	mov	r8,r9
800084b2:	a3 68       	lsl	r8,0x2
800084b4:	12 08       	add	r8,r9
800084b6:	f4 08 00 09 	add	r9,r10,r8
800084ba:	30 08       	mov	r8,0
800084bc:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].ushdwIdx = 0xFF;
800084be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800084c2:	4c 1a       	lddpc	r10,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
800084c4:	12 98       	mov	r8,r9
800084c6:	a3 68       	lsl	r8,0x2
800084c8:	12 08       	add	r8,r9
800084ca:	f4 08 00 08 	add	r8,r10,r8
800084ce:	f0 c9 ff ff 	sub	r9,r8,-1
800084d2:	3f f8       	mov	r8,-1
800084d4:	b2 88       	st.b	r9[0x0],r8
	ledBrd[2].lSideShelfIdx = 2;
	ledBrd[3].lSideShelfIdx = 3;
	ledBrd[4].lSideShelfIdx = 0xFF;
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
800084d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084da:	2f f8       	sub	r8,-1
800084dc:	ef 48 ff f4 	st.w	r7[-12],r8
800084e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084e4:	58 78       	cp.w	r8,7
800084e6:	fe 9a ff d6 	brle	80008492 <init_shelf_n_ledBrd_structs+0x196>
		ledBrdSide[i].maxUsageReached = 0;
		ledBrdSide[i].sanitizeMinutes = 0;
		ledBrdSide[i].ushdwIdx = 0xFF;
	}
	
	ledBrdSide[0].boardIdx = 0;
800084ea:	4b 79       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
800084ec:	30 08       	mov	r8,0
800084ee:	b2 c8       	st.b	r9[0x4],r8
	ledBrdSide[1].boardIdx = 1;
800084f0:	4b 59       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
800084f2:	30 18       	mov	r8,1
800084f4:	f3 68 00 09 	st.b	r9[9],r8
	ledBrdSide[2].boardIdx = 1;
800084f8:	4b 39       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
800084fa:	30 18       	mov	r8,1
800084fc:	f3 68 00 0e 	st.b	r9[14],r8
	ledBrdSide[3].boardIdx = 2;
80008500:	4b 19       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
80008502:	30 28       	mov	r8,2
80008504:	f3 68 00 13 	st.b	r9[19],r8
	ledBrdSide[4].boardIdx = 2;
80008508:	4a f9       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
8000850a:	30 28       	mov	r8,2
8000850c:	f3 68 00 18 	st.b	r9[24],r8
	ledBrdSide[5].boardIdx = 3;
80008510:	4a d9       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
80008512:	30 38       	mov	r8,3
80008514:	f3 68 00 1d 	st.b	r9[29],r8
	ledBrdSide[6].boardIdx = 3;
80008518:	4a b9       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
8000851a:	30 38       	mov	r8,3
8000851c:	f3 68 00 22 	st.b	r9[34],r8
	ledBrdSide[7].boardIdx = 4;
80008520:	4a 99       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
80008522:	30 48       	mov	r8,4
80008524:	f3 68 00 27 	st.b	r9[39],r8
	

	ledBrdSide[0].shelfIdx = 0;
80008528:	4a 79       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
8000852a:	30 08       	mov	r8,0
8000852c:	b2 b8       	st.b	r9[0x3],r8
	ledBrdSide[1].shelfIdx = 0;
8000852e:	4a 69       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
80008530:	30 08       	mov	r8,0
80008532:	f3 68 00 08 	st.b	r9[8],r8
	ledBrdSide[2].shelfIdx = 1;
80008536:	4a 49       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
80008538:	30 18       	mov	r8,1
8000853a:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrdSide[3].shelfIdx = 1;
8000853e:	4a 29       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
80008540:	30 18       	mov	r8,1
80008542:	f3 68 00 12 	st.b	r9[18],r8
	ledBrdSide[4].shelfIdx = 2;
80008546:	4a 09       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
80008548:	30 28       	mov	r8,2
8000854a:	f3 68 00 17 	st.b	r9[23],r8
	ledBrdSide[5].shelfIdx = 2;
8000854e:	49 e9       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
80008550:	30 28       	mov	r8,2
80008552:	f3 68 00 1c 	st.b	r9[28],r8
	ledBrdSide[6].shelfIdx = 3;
80008556:	49 c9       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
80008558:	30 38       	mov	r8,3
8000855a:	f3 68 00 21 	st.b	r9[33],r8
	ledBrdSide[7].shelfIdx = 3;
8000855e:	49 a9       	lddpc	r9,800085c4 <init_shelf_n_ledBrd_structs+0x2c8>
80008560:	30 38       	mov	r8,3
80008562:	f3 68 00 26 	st.b	r9[38],r8
	
	for (int i=0; i<2; i++)
80008566:	30 08       	mov	r8,0
80008568:	ef 48 ff f8 	st.w	r7[-8],r8
8000856c:	c1 f8       	rjmp	800085aa <init_shelf_n_ledBrd_structs+0x2ae>
	{
		for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
8000856e:	30 08       	mov	r8,0
80008570:	ef 48 ff fc 	st.w	r7[-4],r8
80008574:	c1 18       	rjmp	80008596 <init_shelf_n_ledBrd_structs+0x29a>
		{
			usageIdx[i][j] = NO_LED_BOARD_PRESENT;
80008576:	ee fa ff f8 	ld.w	r10,r7[-8]
8000857a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000857e:	49 39       	lddpc	r9,800085c8 <init_shelf_n_ledBrd_structs+0x2cc>
80008580:	a3 7a       	lsl	r10,0x3
80008582:	f4 08 00 08 	add	r8,r10,r8
80008586:	10 09       	add	r9,r8
80008588:	3f f8       	mov	r8,-1
8000858a:	b2 88       	st.b	r9[0x0],r8
	ledBrdSide[6].shelfIdx = 3;
	ledBrdSide[7].shelfIdx = 3;
	
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
8000858c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008590:	2f f8       	sub	r8,-1
80008592:	ef 48 ff fc 	st.w	r7[-4],r8
80008596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000859a:	58 78       	cp.w	r8,7
8000859c:	fe 9a ff ed 	brle	80008576 <init_shelf_n_ledBrd_structs+0x27a>
	ledBrdSide[4].shelfIdx = 2;
	ledBrdSide[5].shelfIdx = 2;
	ledBrdSide[6].shelfIdx = 3;
	ledBrdSide[7].shelfIdx = 3;
	
	for (int i=0; i<2; i++)
800085a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800085a4:	2f f8       	sub	r8,-1
800085a6:	ef 48 ff f8 	st.w	r7[-8],r8
800085aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800085ae:	58 18       	cp.w	r8,1
800085b0:	fe 9a ff df 	brle	8000856e <init_shelf_n_ledBrd_structs+0x272>
		{
			usageIdx[i][j] = NO_LED_BOARD_PRESENT;
		}
	}

}
800085b4:	2f bd       	sub	sp,-20
800085b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800085ba:	00 00       	add	r0,r0
800085bc:	00 00       	add	r0,r0
800085be:	03 3a       	ld.ub	r10,r1++
800085c0:	00 00       	add	r0,r0
800085c2:	02 f4       	st.b	--r1,r4
800085c4:	00 00       	add	r0,r0
800085c6:	0b 24       	ld.uh	r4,r5++
800085c8:	00 00       	add	r0,r0
800085ca:	03 69       	ld.uh	r9,--r1

800085cc <load_usageIdx_to_ledBrdSide>:

void load_usageIdx_to_ledBrdSide(unsigned char sel);
void load_usageIdx_to_ledBrdSide(unsigned char sel)
{
800085cc:	eb cd 40 80 	pushm	r7,lr
800085d0:	1a 97       	mov	r7,sp
800085d2:	20 2d       	sub	sp,8
800085d4:	18 98       	mov	r8,r12
800085d6:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
800085da:	30 08       	mov	r8,0
800085dc:	ef 48 ff fc 	st.w	r7[-4],r8
800085e0:	c1 d8       	rjmp	8000861a <load_usageIdx_to_ledBrdSide+0x4e>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[sel][i];
800085e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800085e6:	ef 3b ff f8 	ld.ub	r11,r7[-8]
800085ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085ee:	49 0a       	lddpc	r10,8000862c <load_usageIdx_to_ledBrdSide+0x60>
800085f0:	a3 7b       	lsl	r11,0x3
800085f2:	f6 08 00 08 	add	r8,r11,r8
800085f6:	f4 08 00 08 	add	r8,r10,r8
800085fa:	11 8a       	ld.ub	r10,r8[0x0]
800085fc:	48 db       	lddpc	r11,80008630 <load_usageIdx_to_ledBrdSide+0x64>
800085fe:	12 98       	mov	r8,r9
80008600:	a3 68       	lsl	r8,0x2
80008602:	12 08       	add	r8,r9
80008604:	f6 08 00 08 	add	r8,r11,r8
80008608:	f0 c9 ff ff 	sub	r9,r8,-1
8000860c:	14 98       	mov	r8,r10
8000860e:	b2 88       	st.b	r9[0x0],r8
}

void load_usageIdx_to_ledBrdSide(unsigned char sel);
void load_usageIdx_to_ledBrdSide(unsigned char sel)
{
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80008610:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008614:	2f f8       	sub	r8,-1
80008616:	ef 48 ff fc 	st.w	r7[-4],r8
8000861a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000861e:	58 78       	cp.w	r8,7
80008620:	fe 9a ff e1 	brle	800085e2 <load_usageIdx_to_ledBrdSide+0x16>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[sel][i];
	}
}
80008624:	2f ed       	sub	sp,-8
80008626:	e3 cd 80 80 	ldm	sp++,r7,pc
8000862a:	00 00       	add	r0,r0
8000862c:	00 00       	add	r0,r0
8000862e:	03 69       	ld.uh	r9,--r1
80008630:	00 00       	add	r0,r0
80008632:	0b 24       	ld.uh	r4,r5++

80008634 <init_led_board_info>:


void init_led_board_info(void);
void init_led_board_info(void)
{
80008634:	eb cd 40 c0 	pushm	r6-r7,lr
80008638:	1a 97       	mov	r7,sp
8000863a:	20 5d       	sub	sp,20
	unsigned char usage0good, usage1good;
	unsigned int usage0cnt, usage1cnt;
	unsigned char newer, older, previouslyOlder;
	unsigned char good, bad, previouslyBad;
	
	init_shelf_n_ledBrd_structs();
8000863c:	f0 1f 00 ae 	mcall	800088f4 <init_led_board_info+0x2c0>
	
	read_led_board_serial_ids();
80008640:	f0 1f 00 ae 	mcall	800088f8 <init_led_board_info+0x2c4>
	usage0good = read_usage_struct(0);
80008644:	30 0c       	mov	r12,0
80008646:	f0 1f 00 ae 	mcall	800088fc <init_led_board_info+0x2c8>
8000864a:	18 98       	mov	r8,r12
8000864c:	ef 68 ff ee 	st.b	r7[-18],r8
	usage1good = read_usage_struct(1);
80008650:	30 1c       	mov	r12,1
80008652:	f0 1f 00 ab 	mcall	800088fc <init_led_board_info+0x2c8>
80008656:	18 98       	mov	r8,r12
80008658:	ef 68 ff ef 	st.b	r7[-17],r8
	
	if (usage0good)
8000865c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008660:	30 08       	mov	r8,0
80008662:	f0 09 18 00 	cp.b	r9,r8
80008666:	c0 50       	breq	80008670 <init_led_board_info+0x3c>
	{
		load_usage_indeces(0);
80008668:	30 0c       	mov	r12,0
8000866a:	f0 1f 00 a6 	mcall	80008900 <init_led_board_info+0x2cc>
8000866e:	c0 88       	rjmp	8000867e <init_led_board_info+0x4a>
	}
	else
	{
		memset(&usageShdw[0], 0x00, sizeof(usageShdw[0]));
80008670:	e0 6a 03 c1 	mov	r10,961
80008674:	30 0b       	mov	r11,0
80008676:	fe fc 02 8e 	ld.w	r12,pc[654]
8000867a:	f0 1f 00 a4 	mcall	80008908 <init_led_board_info+0x2d4>
	}
	
	if (usage1good)
8000867e:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008682:	30 08       	mov	r8,0
80008684:	f0 09 18 00 	cp.b	r9,r8
80008688:	c0 50       	breq	80008692 <init_led_board_info+0x5e>
	{
		load_usage_indeces(1);
8000868a:	30 1c       	mov	r12,1
8000868c:	f0 1f 00 9d 	mcall	80008900 <init_led_board_info+0x2cc>
80008690:	c0 b8       	rjmp	800086a6 <init_led_board_info+0x72>
	}
	else
	{
		memset(&usageShdw[1], 0x00, sizeof(usageShdw[1]));
80008692:	fe f8 02 72 	ld.w	r8,pc[626]
80008696:	f0 c8 fc 3f 	sub	r8,r8,-961
8000869a:	e0 6a 03 c1 	mov	r10,961
8000869e:	30 0b       	mov	r11,0
800086a0:	10 9c       	mov	r12,r8
800086a2:	f0 1f 00 9a 	mcall	80008908 <init_led_board_info+0x2d4>
	}
	
	if ((!usage0good) && (!usage1good)) //Chassis is probably powering up for the first time
800086a6:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800086aa:	30 08       	mov	r8,0
800086ac:	f0 09 18 00 	cp.b	r9,r8
800086b0:	c3 a1       	brne	80008724 <init_led_board_info+0xf0>
800086b2:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800086b6:	30 08       	mov	r8,0
800086b8:	f0 09 18 00 	cp.b	r9,r8
800086bc:	c3 41       	brne	80008724 <init_led_board_info+0xf0>
	{
		if (test_flash(0) == ERROR)
800086be:	30 0c       	mov	r12,0
800086c0:	f0 1f 00 93 	mcall	8000890c <init_led_board_info+0x2d8>
800086c4:	18 98       	mov	r8,r12
800086c6:	10 99       	mov	r9,r8
800086c8:	30 18       	mov	r8,1
800086ca:	f0 09 18 00 	cp.b	r9,r8
800086ce:	c0 31       	brne	800086d4 <init_led_board_info+0xa0>
		{
			chassis_error();
800086d0:	f0 1f 00 90 	mcall	80008910 <init_led_board_info+0x2dc>
		}
		if (test_flash(1) == ERROR)
800086d4:	30 1c       	mov	r12,1
800086d6:	f0 1f 00 8e 	mcall	8000890c <init_led_board_info+0x2d8>
800086da:	18 98       	mov	r8,r12
800086dc:	10 99       	mov	r9,r8
800086de:	30 18       	mov	r8,1
800086e0:	f0 09 18 00 	cp.b	r9,r8
800086e4:	c0 31       	brne	800086ea <init_led_board_info+0xb6>
		{
			chassis_error();
800086e6:	f0 1f 00 8b 	mcall	80008910 <init_led_board_info+0x2dc>
		}
		add_new_led_board_sides_to_usage(0);
800086ea:	30 0c       	mov	r12,0
800086ec:	f0 1f 00 8a 	mcall	80008914 <init_led_board_info+0x2e0>
		load_usageIdx_to_ledBrdSide(0);
800086f0:	30 0c       	mov	r12,0
800086f2:	f0 1f 00 8a 	mcall	80008918 <init_led_board_info+0x2e4>
		usageShdw[0].csum = calc_usage_csum(0);
800086f6:	30 0c       	mov	r12,0
800086f8:	f0 1f 00 89 	mcall	8000891c <init_led_board_info+0x2e8>
800086fc:	18 98       	mov	r8,r12
800086fe:	fe f9 02 06 	ld.w	r9,pc[518]
80008702:	f3 68 03 c0 	st.b	r9[960],r8
		copy_usage_to_usage(1,0);
80008706:	30 0b       	mov	r11,0
80008708:	30 1c       	mov	r12,1
8000870a:	f0 1f 00 86 	mcall	80008920 <init_led_board_info+0x2ec>
		write_usage_to_flash(0);
8000870e:	30 0c       	mov	r12,0
80008710:	f0 1f 00 85 	mcall	80008924 <init_led_board_info+0x2f0>
		write_usage_to_flash(1);
80008714:	30 1c       	mov	r12,1
80008716:	f0 1f 00 84 	mcall	80008924 <init_led_board_info+0x2f0>
		pingPong = 0;
8000871a:	fe f9 02 0e 	ld.w	r9,pc[526]
8000871e:	30 08       	mov	r8,0
80008720:	b2 88       	st.b	r9[0x0],r8
	else
	{
		memset(&usageShdw[1], 0x00, sizeof(usageShdw[1]));
	}
	
	if ((!usage0good) && (!usage1good)) //Chassis is probably powering up for the first time
80008722:	ce 68       	rjmp	800088ee <init_led_board_info+0x2ba>
		write_usage_to_flash(0);
		write_usage_to_flash(1);
		pingPong = 0;
		
	}
	else if (usage0good && usage1good) //Both usage structs are good, find the newer one
80008724:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008728:	30 08       	mov	r8,0
8000872a:	f0 09 18 00 	cp.b	r9,r8
8000872e:	c7 a0       	breq	80008822 <init_led_board_info+0x1ee>
80008730:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008734:	30 08       	mov	r8,0
80008736:	f0 09 18 00 	cp.b	r9,r8
8000873a:	c7 40       	breq	80008822 <init_led_board_info+0x1ee>
	{
		usage0cnt = calc_usage_current_led_boards(0);
8000873c:	30 0c       	mov	r12,0
8000873e:	f0 1f 00 7c 	mcall	8000892c <init_led_board_info+0x2f8>
80008742:	18 98       	mov	r8,r12
80008744:	ef 48 ff f0 	st.w	r7[-16],r8
		usage1cnt = calc_usage_current_led_boards(1);
80008748:	30 1c       	mov	r12,1
8000874a:	f0 1f 00 79 	mcall	8000892c <init_led_board_info+0x2f8>
8000874e:	18 98       	mov	r8,r12
80008750:	ef 48 ff f4 	st.w	r7[-12],r8
		
		if (usage0cnt >= usage1cnt)
80008754:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008758:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000875c:	10 39       	cp.w	r9,r8
8000875e:	c0 53       	brcs	80008768 <init_led_board_info+0x134>
		{
			newer = 0;
80008760:	30 08       	mov	r8,0
80008762:	ef 68 ff fa 	st.b	r7[-6],r8
80008766:	c0 48       	rjmp	8000876e <init_led_board_info+0x13a>
		}
		else
		{
			newer = 1;
80008768:	30 18       	mov	r8,1
8000876a:	ef 68 ff fa 	st.b	r7[-6],r8
		}
		older = newer ^ 1; //older is the opposite of newer
8000876e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008772:	ec 18 00 01 	eorl	r8,0x1
80008776:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (test_flash(older) == ERROR)
8000877a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000877e:	10 9c       	mov	r12,r8
80008780:	f0 1f 00 63 	mcall	8000890c <init_led_board_info+0x2d8>
80008784:	18 98       	mov	r8,r12
80008786:	10 99       	mov	r9,r8
80008788:	30 18       	mov	r8,1
8000878a:	f0 09 18 00 	cp.b	r9,r8
8000878e:	c0 31       	brne	80008794 <init_led_board_info+0x160>
		{
			chassis_error();
80008790:	f0 1f 00 60 	mcall	80008910 <init_led_board_info+0x2dc>
		}

		add_new_led_board_sides_to_usage(newer);
80008794:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008798:	10 9c       	mov	r12,r8
8000879a:	f0 1f 00 5f 	mcall	80008914 <init_led_board_info+0x2e0>
		load_usageIdx_to_ledBrdSide(newer);
8000879e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800087a2:	10 9c       	mov	r12,r8
800087a4:	f0 1f 00 5d 	mcall	80008918 <init_led_board_info+0x2e4>
		usageShdw[newer].csum = calc_usage_csum(newer);
800087a8:	ef 36 ff fa 	ld.ub	r6,r7[-6]
800087ac:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800087b0:	10 9c       	mov	r12,r8
800087b2:	f0 1f 00 5b 	mcall	8000891c <init_led_board_info+0x2e8>
800087b6:	18 98       	mov	r8,r12
800087b8:	10 9a       	mov	r10,r8
800087ba:	4d 3b       	lddpc	r11,80008904 <init_led_board_info+0x2d0>
800087bc:	0c 98       	mov	r8,r6
800087be:	a5 78       	lsl	r8,0x5
800087c0:	0c 18       	sub	r8,r6
800087c2:	f0 09 15 05 	lsl	r9,r8,0x5
800087c6:	10 19       	sub	r9,r8
800087c8:	f6 09 00 08 	add	r8,r11,r9
800087cc:	f0 c9 fc 40 	sub	r9,r8,-960
800087d0:	14 98       	mov	r8,r10
800087d2:	b2 88       	st.b	r9[0x0],r8
		copy_usage_to_usage(older, newer);
800087d4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800087d8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800087dc:	12 9b       	mov	r11,r9
800087de:	10 9c       	mov	r12,r8
800087e0:	f0 1f 00 50 	mcall	80008920 <init_led_board_info+0x2ec>
		previouslyOlder = older;
800087e4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800087e8:	ef 68 ff fc 	st.b	r7[-4],r8
		write_usage_to_flash(previouslyOlder);
800087ec:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800087f0:	10 9c       	mov	r12,r8
800087f2:	f0 1f 00 4d 	mcall	80008924 <init_led_board_info+0x2f0>
		if (test_flash(newer) == ERROR)
800087f6:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800087fa:	10 9c       	mov	r12,r8
800087fc:	f0 1f 00 44 	mcall	8000890c <init_led_board_info+0x2d8>
80008800:	18 98       	mov	r8,r12
80008802:	10 99       	mov	r9,r8
80008804:	30 18       	mov	r8,1
80008806:	f0 09 18 00 	cp.b	r9,r8
8000880a:	c0 31       	brne	80008810 <init_led_board_info+0x1dc>
		{
			chassis_error();
8000880c:	f0 1f 00 41 	mcall	80008910 <init_led_board_info+0x2dc>
		}

		write_usage_to_flash(newer);
80008810:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008814:	10 9c       	mov	r12,r8
80008816:	f0 1f 00 44 	mcall	80008924 <init_led_board_info+0x2f0>
		pingPong = 0;
8000881a:	4c 49       	lddpc	r9,80008928 <init_led_board_info+0x2f4>
8000881c:	30 08       	mov	r8,0
8000881e:	b2 88       	st.b	r9[0x0],r8
		write_usage_to_flash(0);
		write_usage_to_flash(1);
		pingPong = 0;
		
	}
	else if (usage0good && usage1good) //Both usage structs are good, find the newer one
80008820:	c6 78       	rjmp	800088ee <init_led_board_info+0x2ba>
		pingPong = 0;
		
	}
	else //Only one usage struct is good, the other was probably corrupted during a power-down while sanitizing
	{
		if (usage0good)
80008822:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008826:	30 08       	mov	r8,0
80008828:	f0 09 18 00 	cp.b	r9,r8
8000882c:	c0 50       	breq	80008836 <init_led_board_info+0x202>
		{
			good = 0;
8000882e:	30 08       	mov	r8,0
80008830:	ef 68 ff fd 	st.b	r7[-3],r8
80008834:	c0 48       	rjmp	8000883c <init_led_board_info+0x208>
		}
		else
		{
			good = 1;
80008836:	30 18       	mov	r8,1
80008838:	ef 68 ff fd 	st.b	r7[-3],r8
		}
		bad = good ^ 1; //bad is the opposite of good
8000883c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008840:	ec 18 00 01 	eorl	r8,0x1
80008844:	ef 68 ff fe 	st.b	r7[-2],r8
		
		if (test_flash(bad) == ERROR)
80008848:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000884c:	10 9c       	mov	r12,r8
8000884e:	f0 1f 00 30 	mcall	8000890c <init_led_board_info+0x2d8>
80008852:	18 98       	mov	r8,r12
80008854:	10 99       	mov	r9,r8
80008856:	30 18       	mov	r8,1
80008858:	f0 09 18 00 	cp.b	r9,r8
8000885c:	c0 31       	brne	80008862 <init_led_board_info+0x22e>
		{
			chassis_error();
8000885e:	f0 1f 00 2d 	mcall	80008910 <init_led_board_info+0x2dc>
		}
		
		add_new_led_board_sides_to_usage(good);
80008862:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008866:	10 9c       	mov	r12,r8
80008868:	f0 1f 00 2b 	mcall	80008914 <init_led_board_info+0x2e0>
		load_usageIdx_to_ledBrdSide(good);
8000886c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008870:	10 9c       	mov	r12,r8
80008872:	f0 1f 00 2a 	mcall	80008918 <init_led_board_info+0x2e4>
		usageShdw[good].csum = calc_usage_csum(good);
80008876:	ef 36 ff fd 	ld.ub	r6,r7[-3]
8000887a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000887e:	10 9c       	mov	r12,r8
80008880:	f0 1f 00 27 	mcall	8000891c <init_led_board_info+0x2e8>
80008884:	18 98       	mov	r8,r12
80008886:	10 9a       	mov	r10,r8
80008888:	49 fb       	lddpc	r11,80008904 <init_led_board_info+0x2d0>
8000888a:	0c 98       	mov	r8,r6
8000888c:	a5 78       	lsl	r8,0x5
8000888e:	0c 18       	sub	r8,r6
80008890:	f0 09 15 05 	lsl	r9,r8,0x5
80008894:	10 19       	sub	r9,r8
80008896:	f6 09 00 08 	add	r8,r11,r9
8000889a:	f0 c9 fc 40 	sub	r9,r8,-960
8000889e:	14 98       	mov	r8,r10
800088a0:	b2 88       	st.b	r9[0x0],r8
		copy_usage_to_usage(bad, good);
800088a2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800088a6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800088aa:	12 9b       	mov	r11,r9
800088ac:	10 9c       	mov	r12,r8
800088ae:	f0 1f 00 1d 	mcall	80008920 <init_led_board_info+0x2ec>
		previouslyBad = bad;
800088b2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800088b6:	ef 68 ff ff 	st.b	r7[-1],r8
		write_usage_to_flash(previouslyBad);
800088ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800088be:	10 9c       	mov	r12,r8
800088c0:	f0 1f 00 19 	mcall	80008924 <init_led_board_info+0x2f0>
		if (test_flash(good) == ERROR)
800088c4:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800088c8:	10 9c       	mov	r12,r8
800088ca:	f0 1f 00 11 	mcall	8000890c <init_led_board_info+0x2d8>
800088ce:	18 98       	mov	r8,r12
800088d0:	10 99       	mov	r9,r8
800088d2:	30 18       	mov	r8,1
800088d4:	f0 09 18 00 	cp.b	r9,r8
800088d8:	c0 31       	brne	800088de <init_led_board_info+0x2aa>
		{
			chassis_error();
800088da:	f0 1f 00 0e 	mcall	80008910 <init_led_board_info+0x2dc>
		}
		
		write_usage_to_flash(good);
800088de:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800088e2:	10 9c       	mov	r12,r8
800088e4:	f0 1f 00 10 	mcall	80008924 <init_led_board_info+0x2f0>
		pingPong = 0;
800088e8:	49 09       	lddpc	r9,80008928 <init_led_board_info+0x2f4>
800088ea:	30 08       	mov	r8,0
800088ec:	b2 88       	st.b	r9[0x0],r8
	}
	
}
800088ee:	2f bd       	sub	sp,-20
800088f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800088f4:	80 00       	ld.sh	r0,r0[0x0]
800088f6:	82 fc       	ld.uh	r12,r1[0xe]
800088f8:	80 00       	ld.sh	r0,r0[0x0]
800088fa:	67 a4       	ld.w	r4,r3[0x68]
800088fc:	80 00       	ld.sh	r0,r0[0x0]
800088fe:	75 28       	ld.w	r8,r10[0x48]
80008900:	80 00       	ld.sh	r0,r0[0x0]
80008902:	74 48       	ld.w	r8,r10[0x10]
80008904:	00 00       	add	r0,r0
80008906:	03 88       	ld.ub	r8,r1[0x0]
80008908:	80 00       	ld.sh	r0,r0[0x0]
8000890a:	a6 62       	st.h	r3[0xc],r2
8000890c:	80 00       	ld.sh	r0,r0[0x0]
8000890e:	75 bc       	ld.w	r12,r10[0x6c]
80008910:	80 00       	ld.sh	r0,r0[0x0]
80008912:	66 cc       	ld.w	r12,r3[0x30]
80008914:	80 00       	ld.sh	r0,r0[0x0]
80008916:	77 14       	ld.w	r4,r11[0x44]
80008918:	80 00       	ld.sh	r0,r0[0x0]
8000891a:	85 cc       	st.w	r2[0x30],r12
8000891c:	80 00       	ld.sh	r0,r0[0x0]
8000891e:	78 a8       	ld.w	r8,r12[0x28]
80008920:	80 00       	ld.sh	r0,r0[0x0]
80008922:	7c 40       	ld.w	r0,lr[0x10]
80008924:	80 00       	ld.sh	r0,r0[0x0]
80008926:	7c 98       	ld.w	r8,lr[0x24]
80008928:	00 00       	add	r0,r0
8000892a:	0b 4d       	ld.w	sp,--r5
8000892c:	80 00       	ld.sh	r0,r0[0x0]
8000892e:	7c ec       	ld.w	r12,lr[0x38]

80008930 <main>:

/*! \brief Main File Section:
 *          - Initialization (CPU, TWI, Usart,...)
 */
int main(void)
{
80008930:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80008934:	1a 97       	mov	r7,sp
80008936:	fa cd 02 14 	sub	sp,sp,532
	static unsigned char displayIdx = 0;
	unsigned long usec = 1000;
8000893a:	e0 68 03 e8 	mov	r8,1000
8000893e:	ef 48 fe bc 	st.w	r7[-324],r8
	
	// Initialize System Clock
	init_sys_clocks();
80008942:	f0 1f 04 5c 	mcall	80009ab0 <main+0x1180>

	init_io();
80008946:	f0 1f 04 5c 	mcall	80009ab4 <main+0x1184>
	

	// Initialize USART
	init_ecdbg_rs232(FPBA_HZ);
8000894a:	e0 6c e1 00 	mov	r12,57600
8000894e:	ea 1c 05 f5 	orh	r12,0x5f5
80008952:	f0 1f 04 5a 	mcall	80009ab8 <main+0x1188>
	init_display_rs232(FPBA_HZ);
80008956:	e0 6c e1 00 	mov	r12,57600
8000895a:	ea 1c 05 f5 	orh	r12,0x5f5
8000895e:	f0 1f 04 58 	mcall	80009abc <main+0x118c>

	// Print Startup Message
	print_ecdbg("SEAL SHIELD DEMO \r\n Copyright (c) 2015 Technical Solutions Group, Inc.\r\n");
80008962:	fe fc 11 5e 	ld.w	r12,pc[4446]
80008966:	f0 1f 04 58 	mcall	80009ac4 <main+0x1194>
	display_text(IDX_READY);
8000896a:	30 0c       	mov	r12,0
8000896c:	f0 1f 04 57 	mcall	80009ac8 <main+0x1198>
	
	// Initialize ADC for bluesense channels which are used to see if there are any devices (phones, tablets, etc.) on the shelves
	adc_process_init();
80008970:	f0 1f 04 57 	mcall	80009acc <main+0x119c>

	
	// Initialize Interrupts
	irq_initialize_vectors(); //TODO: probably remove 5apr15
80008974:	f0 1f 04 57 	mcall	80009ad0 <main+0x11a0>

	cpu_irq_enable();
80008978:	d5 03       	csrf	0x10
	
	// Initialize TWI Interface
	twi_init();
8000897a:	f0 1f 04 57 	mcall	80009ad4 <main+0x11a4>

	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level
8000897e:	31 6c       	mov	r12,22
80008980:	f0 1f 04 56 	mcall	80009ad8 <main+0x11a8>
//16may15 DEBUG need to put this back in once we get the clock stuff worked out	PCA9952_init();
	
	electroclaveState = STATE_EC_IDLE;
80008984:	fe f9 11 58 	ld.w	r9,pc[4440]
80008988:	30 08       	mov	r8,0
8000898a:	b2 88       	st.b	r9[0x0],r8
	
	init_led_board_info();
8000898c:	f0 1f 04 55 	mcall	80009ae0 <main+0x11b0>
	
	gpio_set_pin_low(ECLAVE_LED_OEn); //...and we are live!
80008990:	31 6c       	mov	r12,22
80008992:	f0 1f 04 55 	mcall	80009ae4 <main+0x11b4>
	gpio_set_pin_low(ECLAVE_PSUPPLY_ONn); //turn the leds on first and then the power supply
80008996:	31 7c       	mov	r12,23
80008998:	f0 1f 04 53 	mcall	80009ae4 <main+0x11b4>
8000899c:	e0 68 03 e8 	mov	r8,1000
800089a0:	ef 48 fe d0 	st.w	r7[-304],r8
800089a4:	e0 68 12 00 	mov	r8,4608
800089a8:	ea 18 00 7a 	orh	r8,0x7a
800089ac:	ef 48 fe cc 	st.w	r7[-308],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800089b0:	ee f0 fe d0 	ld.w	r0,r7[-304]
800089b4:	30 01       	mov	r1,0
800089b6:	ee f2 fe cc 	ld.w	r2,r7[-308]
800089ba:	30 03       	mov	r3,0
800089bc:	e2 02 02 49 	mul	r9,r1,r2
800089c0:	e6 00 02 48 	mul	r8,r3,r0
800089c4:	10 09       	add	r9,r8
800089c6:	e0 02 06 4a 	mulu.d	r10,r0,r2
800089ca:	16 09       	add	r9,r11
800089cc:	12 9b       	mov	r11,r9
800089ce:	e0 68 03 e7 	mov	r8,999
800089d2:	30 09       	mov	r9,0
800089d4:	10 0a       	add	r10,r8
800089d6:	f6 09 00 4b 	adc	r11,r11,r9
800089da:	e0 68 03 e8 	mov	r8,1000
800089de:	30 09       	mov	r9,0
800089e0:	f0 1f 04 42 	mcall	80009ae8 <main+0x11b8>
800089e4:	14 98       	mov	r8,r10
800089e6:	16 99       	mov	r9,r11
	
	cpu_set_timeout(EC_ONE_SECOND/2, &debugTimer);
800089e8:	a1 98       	lsr	r8,0x1
800089ea:	ef 48 fe d8 	st.w	r7[-296],r8
800089ee:	fe f8 10 fe 	ld.w	r8,pc[4350]
800089f2:	ef 48 fe d4 	st.w	r7[-300],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800089f6:	e1 b8 00 42 	mfsr	r8,0x108
800089fa:	10 99       	mov	r9,r8
800089fc:	ee f8 fe d4 	ld.w	r8,r7[-300]
80008a00:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008a02:	ee f8 fe d4 	ld.w	r8,r7[-300]
80008a06:	70 09       	ld.w	r9,r8[0x0]
80008a08:	ee f8 fe d8 	ld.w	r8,r7[-296]
80008a0c:	10 09       	add	r9,r8
80008a0e:	ee f8 fe d4 	ld.w	r8,r7[-300]
80008a12:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008a14:	ee f9 fe d4 	ld.w	r9,r7[-300]
80008a18:	30 08       	mov	r8,0
80008a1a:	f3 68 00 08 	st.b	r9[8],r8
80008a1e:	c0 28       	rjmp	80008a22 <main+0xf2>
		{
			cpu_stop_timeout(&debugTimer);
			cpu_set_timeout((EC_ONE_SECOND/2), &debugTimer);
			gpio_toggle_pin(ECLAVE_DEBUG_LED);
		}
	} //while(true)
80008a20:	d7 03       	nop


	// Main loop
	while (true) {

		switch(electroclaveState)
80008a22:	fe f8 10 ba 	ld.w	r8,pc[4282]
80008a26:	11 88       	ld.ub	r8,r8[0x0]
80008a28:	10 99       	mov	r9,r8
80008a2a:	58 89       	cp.w	r9,8
80008a2c:	e0 8b 06 b5 	brhi	80009796 <main+0xe66>
80008a30:	fe f8 10 c0 	ld.w	r8,pc[4288]
80008a34:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
		{
			case STATE_EC_IDLE:
				if (EC_DOOR_LATCHED) {
80008a38:	33 ec       	mov	r12,62
80008a3a:	f0 1f 04 2f 	mcall	80009af4 <main+0x11c4>
80008a3e:	18 98       	mov	r8,r12
80008a40:	ec 18 00 01 	eorl	r8,0x1
80008a44:	5c 58       	castu.b	r8
80008a46:	e0 80 06 9f 	breq	80009784 <main+0xe54>
					gpio_set_pin_low(ECLAVE_DEBUG_LED);
80008a4a:	37 cc       	mov	r12,124
80008a4c:	f0 1f 04 26 	mcall	80009ae4 <main+0x11b4>
					print_ecdbg("Door latch detected\r\n");
80008a50:	fe fc 10 a8 	ld.w	r12,pc[4264]
80008a54:	f0 1f 04 1c 	mcall	80009ac4 <main+0x1194>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
80008a58:	30 0c       	mov	r12,0
80008a5a:	f0 1f 04 1c 	mcall	80009ac8 <main+0x1198>
					electroclaveState = STATE_DOOR_LATCHED;
80008a5e:	fe f9 10 7e 	ld.w	r9,pc[4222]
80008a62:	30 18       	mov	r8,1
80008a64:	b2 88       	st.b	r9[0x0],r8
					firstTimeThrough = 1;
80008a66:	fe f9 10 96 	ld.w	r9,pc[4246]
80008a6a:	30 18       	mov	r8,1
80008a6c:	b2 88       	st.b	r9[0x0],r8
				}
				break;
80008a6e:	e0 8f 06 94 	bral	80009796 <main+0xe66>
				
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
80008a72:	33 fc       	mov	r12,63
80008a74:	f0 1f 04 20 	mcall	80009af4 <main+0x11c4>
80008a78:	18 98       	mov	r8,r12
80008a7a:	58 08       	cp.w	r8,0
80008a7c:	e0 80 06 86 	breq	80009788 <main+0xe58>
					print_ecdbg("Action push button press detected\r\n");
80008a80:	fe fc 10 80 	ld.w	r12,pc[4224]
80008a84:	f0 1f 04 10 	mcall	80009ac4 <main+0x1194>
					electroclaveState = STATE_ACTION_PB_PRESSED;
80008a88:	fe f9 10 54 	ld.w	r9,pc[4180]
80008a8c:	30 28       	mov	r8,2
80008a8e:	b2 88       	st.b	r9[0x0],r8
				}
				break;
80008a90:	e0 8f 06 83 	bral	80009796 <main+0xe66>
				
			case STATE_ACTION_PB_PRESSED:
				if (EC_ACTION_PB)
80008a94:	33 fc       	mov	r12,63
80008a96:	f0 1f 04 18 	mcall	80009af4 <main+0x11c4>
80008a9a:	18 98       	mov	r8,r12
80008a9c:	ec 18 00 01 	eorl	r8,0x1
80008aa0:	5c 58       	castu.b	r8
80008aa2:	e0 80 06 75 	breq	8000978c <main+0xe5c>
				{
					print_ecdbg("Action push button release detected\r\n");
80008aa6:	fe fc 10 5e 	ld.w	r12,pc[4190]
80008aaa:	f0 1f 04 07 	mcall	80009ac4 <main+0x1194>
					electroclaveState = STATE_ACTION_PB_RELEASED;	
80008aae:	fe f9 10 2e 	ld.w	r9,pc[4142]
80008ab2:	30 38       	mov	r8,3
80008ab4:	b2 88       	st.b	r9[0x0],r8
				}
				break;
80008ab6:	e0 8f 06 70 	bral	80009796 <main+0xe66>
				
			case STATE_ACTION_PB_RELEASED:
				check_led_brd_side_lifetimes();
80008aba:	f0 1f 04 14 	mcall	80009b08 <main+0x11d8>
				check_shelves_for_devices();
80008abe:	f0 1f 04 14 	mcall	80009b0c <main+0x11dc>
				set_shelves_active_inactive();
80008ac2:	f0 1f 04 14 	mcall	80009b10 <main+0x11e0>
				
				if (num_active_shelves() != 0) {
80008ac6:	f0 1f 04 14 	mcall	80009b14 <main+0x11e4>
80008aca:	18 98       	mov	r8,r12
80008acc:	58 08       	cp.w	r8,0
80008ace:	e0 80 01 72 	breq	80008db2 <main+0x482>
					electroclaveState = STATE_START_SANITIZE;	
80008ad2:	fe f9 10 0a 	ld.w	r9,pc[4106]
80008ad6:	30 48       	mov	r8,4
80008ad8:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("Start sanitizing\r\n");
80008ada:	fe fc 10 3e 	ld.w	r12,pc[4158]
80008ade:	f0 1f 03 fa 	mcall	80009ac4 <main+0x1194>
					display_text(IDX_CLEAR);
80008ae2:	30 9c       	mov	r12,9
80008ae4:	f0 1f 03 f9 	mcall	80009ac8 <main+0x1198>
80008ae8:	e0 68 01 f4 	mov	r8,500
80008aec:	ef 48 fe e0 	st.w	r7[-288],r8
80008af0:	e0 68 e1 00 	mov	r8,57600
80008af4:	ea 18 05 f5 	orh	r8,0x5f5
80008af8:	ef 48 fe dc 	st.w	r7[-292],r8
80008afc:	ee f8 fe e0 	ld.w	r8,r7[-288]
80008b00:	ef 48 fe e8 	st.w	r7[-280],r8
80008b04:	ee f8 fe dc 	ld.w	r8,r7[-292]
80008b08:	ef 48 fe e4 	st.w	r7[-284],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008b0c:	ee fc fe e8 	ld.w	r12,r7[-280]
80008b10:	ef 4c fd f8 	st.w	r7[-520],r12
80008b14:	30 0a       	mov	r10,0
80008b16:	ef 4a fd f4 	st.w	r7[-524],r10
80008b1a:	ee f8 fe e4 	ld.w	r8,r7[-284]
80008b1e:	ef 48 fd f0 	st.w	r7[-528],r8
80008b22:	30 0c       	mov	r12,0
80008b24:	ef 4c fd ec 	st.w	r7[-532],r12
80008b28:	ee f9 fd f4 	ld.w	r9,r7[-524]
80008b2c:	ee fa fd f0 	ld.w	r10,r7[-528]
80008b30:	b5 39       	mul	r9,r10
80008b32:	ee f8 fd ec 	ld.w	r8,r7[-532]
80008b36:	ee fc fd f8 	ld.w	r12,r7[-520]
80008b3a:	b9 38       	mul	r8,r12
80008b3c:	10 09       	add	r9,r8
80008b3e:	ee f8 fd f8 	ld.w	r8,r7[-520]
80008b42:	ee fc fd f0 	ld.w	r12,r7[-528]
80008b46:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008b4a:	16 09       	add	r9,r11
80008b4c:	12 9b       	mov	r11,r9
80008b4e:	e0 68 03 e7 	mov	r8,999
80008b52:	30 09       	mov	r9,0
80008b54:	10 0a       	add	r10,r8
80008b56:	f6 09 00 4b 	adc	r11,r11,r9
80008b5a:	e0 68 03 e8 	mov	r8,1000
80008b5e:	30 09       	mov	r9,0
80008b60:	f0 1f 03 e2 	mcall	80009ae8 <main+0x11b8>
80008b64:	14 98       	mov	r8,r10
80008b66:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80008b68:	ef 48 fe f0 	st.w	r7[-272],r8
80008b6c:	ee c8 01 74 	sub	r8,r7,372
80008b70:	ef 48 fe ec 	st.w	r7[-276],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008b74:	e1 b8 00 42 	mfsr	r8,0x108
80008b78:	10 99       	mov	r9,r8
80008b7a:	ee f8 fe ec 	ld.w	r8,r7[-276]
80008b7e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008b80:	ee f8 fe ec 	ld.w	r8,r7[-276]
80008b84:	70 09       	ld.w	r9,r8[0x0]
80008b86:	ee f8 fe f0 	ld.w	r8,r7[-272]
80008b8a:	10 09       	add	r9,r8
80008b8c:	ee f8 fe ec 	ld.w	r8,r7[-276]
80008b90:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008b92:	ee f9 fe ec 	ld.w	r9,r7[-276]
80008b96:	30 08       	mov	r8,0
80008b98:	f3 68 00 08 	st.b	r9[8],r8
80008b9c:	ee c8 01 74 	sub	r8,r7,372
80008ba0:	ef 48 fe f4 	st.w	r7[-268],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008ba4:	e1 b8 00 42 	mfsr	r8,0x108
80008ba8:	ef 48 fe f8 	st.w	r7[-264],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008bac:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008bb0:	f1 39 00 08 	ld.ub	r9,r8[8]
80008bb4:	30 28       	mov	r8,2
80008bb6:	f0 09 18 00 	cp.b	r9,r8
80008bba:	c0 31       	brne	80008bc0 <main+0x290>
    return false;
80008bbc:	30 08       	mov	r8,0
80008bbe:	c4 38       	rjmp	80008c44 <main+0x314>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008bc0:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008bc4:	f1 39 00 08 	ld.ub	r9,r8[8]
80008bc8:	30 18       	mov	r8,1
80008bca:	f0 09 18 00 	cp.b	r9,r8
80008bce:	c0 31       	brne	80008bd4 <main+0x2a4>
    return true;
80008bd0:	30 18       	mov	r8,1
80008bd2:	c3 98       	rjmp	80008c44 <main+0x314>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008bd4:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008bd8:	70 09       	ld.w	r9,r8[0x0]
80008bda:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008bde:	70 18       	ld.w	r8,r8[0x4]
80008be0:	10 39       	cp.w	r9,r8
80008be2:	e0 88 00 1a 	brls	80008c16 <main+0x2e6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008be6:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008bea:	70 09       	ld.w	r9,r8[0x0]
80008bec:	ee f8 fe f8 	ld.w	r8,r7[-264]
80008bf0:	12 38       	cp.w	r8,r9
80008bf2:	c1 02       	brcc	80008c12 <main+0x2e2>
80008bf4:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008bf8:	70 19       	ld.w	r9,r8[0x4]
80008bfa:	ee f8 fe f8 	ld.w	r8,r7[-264]
80008bfe:	12 38       	cp.w	r8,r9
80008c00:	e0 88 00 09 	brls	80008c12 <main+0x2e2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008c04:	ee f9 fe f4 	ld.w	r9,r7[-268]
80008c08:	30 18       	mov	r8,1
80008c0a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008c0e:	30 18       	mov	r8,1
80008c10:	c1 a8       	rjmp	80008c44 <main+0x314>
    }
    return false;
80008c12:	30 08       	mov	r8,0
80008c14:	c1 88       	rjmp	80008c44 <main+0x314>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008c16:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008c1a:	70 09       	ld.w	r9,r8[0x0]
80008c1c:	ee f8 fe f8 	ld.w	r8,r7[-264]
80008c20:	12 38       	cp.w	r8,r9
80008c22:	c0 93       	brcs	80008c34 <main+0x304>
80008c24:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008c28:	70 19       	ld.w	r9,r8[0x4]
80008c2a:	ee f8 fe f8 	ld.w	r8,r7[-264]
80008c2e:	12 38       	cp.w	r8,r9
80008c30:	e0 88 00 09 	brls	80008c42 <main+0x312>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008c34:	ee f9 fe f4 	ld.w	r9,r7[-268]
80008c38:	30 18       	mov	r8,1
80008c3a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008c3e:	30 18       	mov	r8,1
80008c40:	c0 28       	rjmp	80008c44 <main+0x314>
    }
    return false;
80008c42:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80008c44:	58 08       	cp.w	r8,0
80008c46:	ca b0       	breq	80008b9c <main+0x26c>
					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
80008c48:	30 2c       	mov	r12,2
80008c4a:	f0 1f 03 a0 	mcall	80009ac8 <main+0x1198>
80008c4e:	e0 68 0b b8 	mov	r8,3000
80008c52:	ef 48 ff 00 	st.w	r7[-256],r8
80008c56:	e0 68 e1 00 	mov	r8,57600
80008c5a:	ea 18 05 f5 	orh	r8,0x5f5
80008c5e:	ef 48 fe fc 	st.w	r7[-260],r8
80008c62:	ee f8 ff 00 	ld.w	r8,r7[-256]
80008c66:	ef 48 ff 08 	st.w	r7[-248],r8
80008c6a:	ee f8 fe fc 	ld.w	r8,r7[-260]
80008c6e:	ef 48 ff 04 	st.w	r7[-252],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008c72:	ee fa ff 08 	ld.w	r10,r7[-248]
80008c76:	ef 4a fe 08 	st.w	r7[-504],r10
80008c7a:	30 08       	mov	r8,0
80008c7c:	ef 48 fe 04 	st.w	r7[-508],r8
80008c80:	ee fc ff 04 	ld.w	r12,r7[-252]
80008c84:	ef 4c fe 00 	st.w	r7[-512],r12
80008c88:	30 0a       	mov	r10,0
80008c8a:	ef 4a fd fc 	st.w	r7[-516],r10
80008c8e:	ee f9 fe 04 	ld.w	r9,r7[-508]
80008c92:	ee f8 fe 00 	ld.w	r8,r7[-512]
80008c96:	b1 39       	mul	r9,r8
80008c98:	ee f8 fd fc 	ld.w	r8,r7[-516]
80008c9c:	ee fc fe 08 	ld.w	r12,r7[-504]
80008ca0:	b9 38       	mul	r8,r12
80008ca2:	10 09       	add	r9,r8
80008ca4:	ee f8 fe 08 	ld.w	r8,r7[-504]
80008ca8:	ee fc fe 00 	ld.w	r12,r7[-512]
80008cac:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008cb0:	16 09       	add	r9,r11
80008cb2:	12 9b       	mov	r11,r9
80008cb4:	e0 68 03 e7 	mov	r8,999
80008cb8:	30 09       	mov	r9,0
80008cba:	10 0a       	add	r10,r8
80008cbc:	f6 09 00 4b 	adc	r11,r11,r9
80008cc0:	e0 68 03 e8 	mov	r8,1000
80008cc4:	30 09       	mov	r9,0
80008cc6:	f0 1f 03 89 	mcall	80009ae8 <main+0x11b8>
80008cca:	14 98       	mov	r8,r10
80008ccc:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80008cce:	ef 48 ff 10 	st.w	r7[-240],r8
80008cd2:	ee c8 01 68 	sub	r8,r7,360
80008cd6:	ef 48 ff 0c 	st.w	r7[-244],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008cda:	e1 b8 00 42 	mfsr	r8,0x108
80008cde:	10 99       	mov	r9,r8
80008ce0:	ee f8 ff 0c 	ld.w	r8,r7[-244]
80008ce4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008ce6:	ee f8 ff 0c 	ld.w	r8,r7[-244]
80008cea:	70 09       	ld.w	r9,r8[0x0]
80008cec:	ee f8 ff 10 	ld.w	r8,r7[-240]
80008cf0:	10 09       	add	r9,r8
80008cf2:	ee f8 ff 0c 	ld.w	r8,r7[-244]
80008cf6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008cf8:	ee f9 ff 0c 	ld.w	r9,r7[-244]
80008cfc:	30 08       	mov	r8,0
80008cfe:	f3 68 00 08 	st.b	r9[8],r8
80008d02:	ee c8 01 68 	sub	r8,r7,360
80008d06:	ef 48 ff 14 	st.w	r7[-236],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008d0a:	e1 b8 00 42 	mfsr	r8,0x108
80008d0e:	ef 48 ff 18 	st.w	r7[-232],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008d12:	ee f8 ff 14 	ld.w	r8,r7[-236]
80008d16:	f1 39 00 08 	ld.ub	r9,r8[8]
80008d1a:	30 28       	mov	r8,2
80008d1c:	f0 09 18 00 	cp.b	r9,r8
80008d20:	c0 31       	brne	80008d26 <main+0x3f6>
    return false;
80008d22:	30 08       	mov	r8,0
80008d24:	c4 38       	rjmp	80008daa <main+0x47a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008d26:	ee f8 ff 14 	ld.w	r8,r7[-236]
80008d2a:	f1 39 00 08 	ld.ub	r9,r8[8]
80008d2e:	30 18       	mov	r8,1
80008d30:	f0 09 18 00 	cp.b	r9,r8
80008d34:	c0 31       	brne	80008d3a <main+0x40a>
    return true;
80008d36:	30 18       	mov	r8,1
80008d38:	c3 98       	rjmp	80008daa <main+0x47a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008d3a:	ee f8 ff 14 	ld.w	r8,r7[-236]
80008d3e:	70 09       	ld.w	r9,r8[0x0]
80008d40:	ee f8 ff 14 	ld.w	r8,r7[-236]
80008d44:	70 18       	ld.w	r8,r8[0x4]
80008d46:	10 39       	cp.w	r9,r8
80008d48:	e0 88 00 1a 	brls	80008d7c <main+0x44c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008d4c:	ee f8 ff 14 	ld.w	r8,r7[-236]
80008d50:	70 09       	ld.w	r9,r8[0x0]
80008d52:	ee f8 ff 18 	ld.w	r8,r7[-232]
80008d56:	12 38       	cp.w	r8,r9
80008d58:	c1 02       	brcc	80008d78 <main+0x448>
80008d5a:	ee f8 ff 14 	ld.w	r8,r7[-236]
80008d5e:	70 19       	ld.w	r9,r8[0x4]
80008d60:	ee f8 ff 18 	ld.w	r8,r7[-232]
80008d64:	12 38       	cp.w	r8,r9
80008d66:	e0 88 00 09 	brls	80008d78 <main+0x448>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008d6a:	ee f9 ff 14 	ld.w	r9,r7[-236]
80008d6e:	30 18       	mov	r8,1
80008d70:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008d74:	30 18       	mov	r8,1
80008d76:	c1 a8       	rjmp	80008daa <main+0x47a>
    }
    return false;
80008d78:	30 08       	mov	r8,0
80008d7a:	c1 88       	rjmp	80008daa <main+0x47a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008d7c:	ee f8 ff 14 	ld.w	r8,r7[-236]
80008d80:	70 09       	ld.w	r9,r8[0x0]
80008d82:	ee f8 ff 18 	ld.w	r8,r7[-232]
80008d86:	12 38       	cp.w	r8,r9
80008d88:	c0 93       	brcs	80008d9a <main+0x46a>
80008d8a:	ee f8 ff 14 	ld.w	r8,r7[-236]
80008d8e:	70 19       	ld.w	r9,r8[0x4]
80008d90:	ee f8 ff 18 	ld.w	r8,r7[-232]
80008d94:	12 38       	cp.w	r8,r9
80008d96:	e0 88 00 09 	brls	80008da8 <main+0x478>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008d9a:	ee f9 ff 14 	ld.w	r9,r7[-236]
80008d9e:	30 18       	mov	r8,1
80008da0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008da4:	30 18       	mov	r8,1
80008da6:	c0 28       	rjmp	80008daa <main+0x47a>
    }
    return false;
80008da8:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80008daa:	58 08       	cp.w	r8,0
80008dac:	ca b0       	breq	80008d02 <main+0x3d2>
					electroclaveState = STATE_START_CLEAN;
					print_ecdbg("No shelves, no devices or shelves are past lifetime, charging devices\r\n");
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
				}
				break;
80008dae:	e0 8f 04 f4 	bral	80009796 <main+0xe66>
					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
					cpu_delay_ms(3000, EC_CPU_CLOCK_FREQ); //give display time to update, scroll all the way across
				}
				else {
					electroclaveState = STATE_START_CLEAN;
80008db2:	fe f9 0d 2a 	ld.w	r9,pc[3370]
80008db6:	30 68       	mov	r8,6
80008db8:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("No shelves, no devices or shelves are past lifetime, charging devices\r\n");
80008dba:	fe fc 0d 62 	ld.w	r12,pc[3426]
80008dbe:	f0 1f 03 42 	mcall	80009ac4 <main+0x1194>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
80008dc2:	30 0c       	mov	r12,0
80008dc4:	f0 1f 03 41 	mcall	80009ac8 <main+0x1198>
				}
				break;
80008dc8:	e0 8f 04 e7 	bral	80009796 <main+0xe66>
				
			case STATE_START_SANITIZE:
				display_text(IDX_CLEAR);
80008dcc:	30 9c       	mov	r12,9
80008dce:	f0 1f 03 3f 	mcall	80009ac8 <main+0x1198>
80008dd2:	e0 68 01 f4 	mov	r8,500
80008dd6:	ef 48 ff 20 	st.w	r7[-224],r8
80008dda:	e0 68 e1 00 	mov	r8,57600
80008dde:	ea 18 05 f5 	orh	r8,0x5f5
80008de2:	ef 48 ff 1c 	st.w	r7[-228],r8
80008de6:	ee f8 ff 20 	ld.w	r8,r7[-224]
80008dea:	ef 48 ff 28 	st.w	r7[-216],r8
80008dee:	ee f8 ff 1c 	ld.w	r8,r7[-228]
80008df2:	ef 48 ff 24 	st.w	r7[-220],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008df6:	ee fa ff 28 	ld.w	r10,r7[-216]
80008dfa:	ef 4a fe 18 	st.w	r7[-488],r10
80008dfe:	30 08       	mov	r8,0
80008e00:	ef 48 fe 14 	st.w	r7[-492],r8
80008e04:	ee fc ff 24 	ld.w	r12,r7[-220]
80008e08:	ef 4c fe 10 	st.w	r7[-496],r12
80008e0c:	30 0a       	mov	r10,0
80008e0e:	ef 4a fe 0c 	st.w	r7[-500],r10
80008e12:	ee f9 fe 14 	ld.w	r9,r7[-492]
80008e16:	ee f8 fe 10 	ld.w	r8,r7[-496]
80008e1a:	b1 39       	mul	r9,r8
80008e1c:	ee f8 fe 0c 	ld.w	r8,r7[-500]
80008e20:	ee fc fe 18 	ld.w	r12,r7[-488]
80008e24:	b9 38       	mul	r8,r12
80008e26:	10 09       	add	r9,r8
80008e28:	ee f8 fe 18 	ld.w	r8,r7[-488]
80008e2c:	ee fc fe 10 	ld.w	r12,r7[-496]
80008e30:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008e34:	16 09       	add	r9,r11
80008e36:	12 9b       	mov	r11,r9
80008e38:	e0 68 03 e7 	mov	r8,999
80008e3c:	30 09       	mov	r9,0
80008e3e:	10 0a       	add	r10,r8
80008e40:	f6 09 00 4b 	adc	r11,r11,r9
80008e44:	e0 68 03 e8 	mov	r8,1000
80008e48:	30 09       	mov	r9,0
80008e4a:	f0 1f 03 28 	mcall	80009ae8 <main+0x11b8>
80008e4e:	14 98       	mov	r8,r10
80008e50:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80008e52:	ef 48 ff 30 	st.w	r7[-208],r8
80008e56:	ee c8 01 5c 	sub	r8,r7,348
80008e5a:	ef 48 ff 2c 	st.w	r7[-212],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008e5e:	e1 b8 00 42 	mfsr	r8,0x108
80008e62:	10 99       	mov	r9,r8
80008e64:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80008e68:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008e6a:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80008e6e:	70 09       	ld.w	r9,r8[0x0]
80008e70:	ee f8 ff 30 	ld.w	r8,r7[-208]
80008e74:	10 09       	add	r9,r8
80008e76:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80008e7a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008e7c:	ee f9 ff 2c 	ld.w	r9,r7[-212]
80008e80:	30 08       	mov	r8,0
80008e82:	f3 68 00 08 	st.b	r9[8],r8
80008e86:	ee c8 01 5c 	sub	r8,r7,348
80008e8a:	ef 48 ff 34 	st.w	r7[-204],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008e8e:	e1 b8 00 42 	mfsr	r8,0x108
80008e92:	ef 48 ff 38 	st.w	r7[-200],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008e96:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008e9a:	f1 39 00 08 	ld.ub	r9,r8[8]
80008e9e:	30 28       	mov	r8,2
80008ea0:	f0 09 18 00 	cp.b	r9,r8
80008ea4:	c0 31       	brne	80008eaa <main+0x57a>
    return false;
80008ea6:	30 08       	mov	r8,0
80008ea8:	c4 38       	rjmp	80008f2e <main+0x5fe>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008eaa:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008eae:	f1 39 00 08 	ld.ub	r9,r8[8]
80008eb2:	30 18       	mov	r8,1
80008eb4:	f0 09 18 00 	cp.b	r9,r8
80008eb8:	c0 31       	brne	80008ebe <main+0x58e>
    return true;
80008eba:	30 18       	mov	r8,1
80008ebc:	c3 98       	rjmp	80008f2e <main+0x5fe>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008ebe:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008ec2:	70 09       	ld.w	r9,r8[0x0]
80008ec4:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008ec8:	70 18       	ld.w	r8,r8[0x4]
80008eca:	10 39       	cp.w	r9,r8
80008ecc:	e0 88 00 1a 	brls	80008f00 <main+0x5d0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008ed0:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008ed4:	70 09       	ld.w	r9,r8[0x0]
80008ed6:	ee f8 ff 38 	ld.w	r8,r7[-200]
80008eda:	12 38       	cp.w	r8,r9
80008edc:	c1 02       	brcc	80008efc <main+0x5cc>
80008ede:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008ee2:	70 19       	ld.w	r9,r8[0x4]
80008ee4:	ee f8 ff 38 	ld.w	r8,r7[-200]
80008ee8:	12 38       	cp.w	r8,r9
80008eea:	e0 88 00 09 	brls	80008efc <main+0x5cc>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008eee:	ee f9 ff 34 	ld.w	r9,r7[-204]
80008ef2:	30 18       	mov	r8,1
80008ef4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008ef8:	30 18       	mov	r8,1
80008efa:	c1 a8       	rjmp	80008f2e <main+0x5fe>
    }
    return false;
80008efc:	30 08       	mov	r8,0
80008efe:	c1 88       	rjmp	80008f2e <main+0x5fe>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008f00:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008f04:	70 09       	ld.w	r9,r8[0x0]
80008f06:	ee f8 ff 38 	ld.w	r8,r7[-200]
80008f0a:	12 38       	cp.w	r8,r9
80008f0c:	c0 93       	brcs	80008f1e <main+0x5ee>
80008f0e:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008f12:	70 19       	ld.w	r9,r8[0x4]
80008f14:	ee f8 ff 38 	ld.w	r8,r7[-200]
80008f18:	12 38       	cp.w	r8,r9
80008f1a:	e0 88 00 09 	brls	80008f2c <main+0x5fc>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008f1e:	ee f9 ff 34 	ld.w	r9,r7[-204]
80008f22:	30 18       	mov	r8,1
80008f24:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008f28:	30 18       	mov	r8,1
80008f2a:	c0 28       	rjmp	80008f2e <main+0x5fe>
    }
    return false;
80008f2c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80008f2e:	58 08       	cp.w	r8,0
80008f30:	ca b0       	breq	80008e86 <main+0x556>
				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
80008f32:	fe f9 0b ee 	ld.w	r9,pc[3054]
80008f36:	3f f8       	mov	r8,-1
80008f38:	b2 88       	st.b	r9[0x0],r8
				sanitizeMinutes = 0;
80008f3a:	fe f9 0b ea 	ld.w	r9,pc[3050]
80008f3e:	30 08       	mov	r8,0
80008f40:	93 08       	st.w	r9[0x0],r8
				for (int i = 0; i<NUM_SHELVES; i++) {
80008f42:	30 08       	mov	r8,0
80008f44:	ef 48 fe c0 	st.w	r7[-320],r8
80008f48:	c4 08       	rjmp	80008fc8 <main+0x698>
					if (shelf[i].active == SHELF_ACTIVE) {
80008f4a:	ee f9 fe c0 	ld.w	r9,r7[-320]
80008f4e:	fe fa 0b da 	ld.w	r10,pc[3034]
80008f52:	12 98       	mov	r8,r9
80008f54:	a3 68       	lsl	r8,0x2
80008f56:	12 08       	add	r8,r9
80008f58:	f4 08 00 08 	add	r8,r10,r8
80008f5c:	11 88       	ld.ub	r8,r8[0x0]
80008f5e:	58 08       	cp.w	r8,0
80008f60:	c2 f1       	brne	80008fbe <main+0x68e>
						tmpSanitizeMinutes = calc_sanitize_time(i);
80008f62:	ee f8 fe c0 	ld.w	r8,r7[-320]
80008f66:	5c 58       	castu.b	r8
80008f68:	10 9c       	mov	r12,r8
80008f6a:	f0 1f 02 f1 	mcall	80009b2c <main+0x11fc>
80008f6e:	18 98       	mov	r8,r12
80008f70:	10 99       	mov	r9,r8
80008f72:	fe f8 0b be 	ld.w	r8,pc[3006]
80008f76:	91 09       	st.w	r8[0x0],r9
						
						if (tmpSanitizeMinutes > sanitizeMinutes)
80008f78:	fe f8 0b b8 	ld.w	r8,pc[3000]
80008f7c:	70 09       	ld.w	r9,r8[0x0]
80008f7e:	fe f8 0b a6 	ld.w	r8,pc[2982]
80008f82:	70 08       	ld.w	r8,r8[0x0]
80008f84:	10 39       	cp.w	r9,r8
80008f86:	e0 88 00 08 	brls	80008f96 <main+0x666>
						{
							sanitizeMinutes = tmpSanitizeMinutes;
80008f8a:	fe f8 0b a6 	ld.w	r8,pc[2982]
80008f8e:	70 09       	ld.w	r9,r8[0x0]
80008f90:	fe f8 0b 94 	ld.w	r8,pc[2964]
80008f94:	91 09       	st.w	r8[0x0],r9
						}
						
						led_shelf(i, LED_ON);
80008f96:	ee f8 fe c0 	ld.w	r8,r7[-320]
80008f9a:	5c 58       	castu.b	r8
80008f9c:	30 1b       	mov	r11,1
80008f9e:	10 9c       	mov	r12,r8
80008fa0:	f0 1f 02 e5 	mcall	80009b34 <main+0x1204>
						
						if (displayIdx == 0xFF)
80008fa4:	fe f8 0b 7c 	ld.w	r8,pc[2940]
80008fa8:	11 89       	ld.ub	r9,r8[0x0]
80008faa:	3f f8       	mov	r8,-1
80008fac:	f0 09 18 00 	cp.b	r9,r8
80008fb0:	c0 71       	brne	80008fbe <main+0x68e>
						{
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
80008fb2:	ee f8 fe c0 	ld.w	r8,r7[-320]
80008fb6:	5c 58       	castu.b	r8
80008fb8:	fe f9 0b 68 	ld.w	r9,pc[2920]
80008fbc:	b2 88       	st.b	r9[0x0],r8
				display_text(IDX_CLEAR);
				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
				sanitizeMinutes = 0;
				for (int i = 0; i<NUM_SHELVES; i++) {
80008fbe:	ee f8 fe c0 	ld.w	r8,r7[-320]
80008fc2:	2f f8       	sub	r8,-1
80008fc4:	ef 48 fe c0 	st.w	r7[-320],r8
80008fc8:	ee f8 fe c0 	ld.w	r8,r7[-320]
80008fcc:	58 38       	cp.w	r8,3
80008fce:	fe 9a ff be 	brle	80008f4a <main+0x61a>
80008fd2:	e0 68 1f 40 	mov	r8,8000
80008fd6:	ef 48 ff 40 	st.w	r7[-192],r8
80008fda:	e0 68 e1 00 	mov	r8,57600
80008fde:	ea 18 05 f5 	orh	r8,0x5f5
80008fe2:	ef 48 ff 3c 	st.w	r7[-196],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008fe6:	ee fa ff 40 	ld.w	r10,r7[-192]
80008fea:	ef 4a fe 28 	st.w	r7[-472],r10
80008fee:	30 08       	mov	r8,0
80008ff0:	ef 48 fe 24 	st.w	r7[-476],r8
80008ff4:	ee fc ff 3c 	ld.w	r12,r7[-196]
80008ff8:	ef 4c fe 20 	st.w	r7[-480],r12
80008ffc:	30 0a       	mov	r10,0
80008ffe:	ef 4a fe 1c 	st.w	r7[-484],r10
80009002:	ee f9 fe 24 	ld.w	r9,r7[-476]
80009006:	ee f8 fe 20 	ld.w	r8,r7[-480]
8000900a:	b1 39       	mul	r9,r8
8000900c:	ee f8 fe 1c 	ld.w	r8,r7[-484]
80009010:	ee fc fe 28 	ld.w	r12,r7[-472]
80009014:	b9 38       	mul	r8,r12
80009016:	10 09       	add	r9,r8
80009018:	ee f8 fe 28 	ld.w	r8,r7[-472]
8000901c:	ee fc fe 20 	ld.w	r12,r7[-480]
80009020:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009024:	16 09       	add	r9,r11
80009026:	12 9b       	mov	r11,r9
80009028:	e0 68 03 e7 	mov	r8,999
8000902c:	30 09       	mov	r9,0
8000902e:	10 0a       	add	r10,r8
80009030:	f6 09 00 4b 	adc	r11,r11,r9
80009034:	e0 68 03 e8 	mov	r8,1000
80009038:	30 09       	mov	r9,0
8000903a:	f0 1f 02 ac 	mcall	80009ae8 <main+0x11b8>
8000903e:	14 98       	mov	r8,r10
80009040:	16 99       	mov	r9,r11
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
						}
					}
				}
				
				displayTimerSeconds = cpu_ms_2_cy(8000, EC_CPU_CLOCK_FREQ); //8 seconds per "shelf" display is enough time for the text to scroll twice
80009042:	10 99       	mov	r9,r8
80009044:	fe f8 0a f4 	ld.w	r8,pc[2804]
80009048:	91 09       	st.w	r8[0x0],r9
				cpu_set_timeout(displayTimerSeconds, &displayTimer);
8000904a:	fe f8 0a ee 	ld.w	r8,pc[2798]
8000904e:	70 08       	ld.w	r8,r8[0x0]
80009050:	ef 48 ff 48 	st.w	r7[-184],r8
80009054:	fe f8 0a e8 	ld.w	r8,pc[2792]
80009058:	ef 48 ff 44 	st.w	r7[-188],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000905c:	e1 b8 00 42 	mfsr	r8,0x108
80009060:	10 99       	mov	r9,r8
80009062:	ee f8 ff 44 	ld.w	r8,r7[-188]
80009066:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009068:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000906c:	70 09       	ld.w	r9,r8[0x0]
8000906e:	ee f8 ff 48 	ld.w	r8,r7[-184]
80009072:	10 09       	add	r9,r8
80009074:	ee f8 ff 44 	ld.w	r8,r7[-188]
80009078:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000907a:	ee f9 ff 44 	ld.w	r9,r7[-188]
8000907e:	30 08       	mov	r8,0
80009080:	f3 68 00 08 	st.b	r9[8],r8
80009084:	e0 68 03 e8 	mov	r8,1000
80009088:	ef 48 ff 50 	st.w	r7[-176],r8
8000908c:	e0 68 e1 00 	mov	r8,57600
80009090:	ea 18 05 f5 	orh	r8,0x5f5
80009094:	ef 48 ff 4c 	st.w	r7[-180],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009098:	ee fa ff 50 	ld.w	r10,r7[-176]
8000909c:	ef 4a fe 38 	st.w	r7[-456],r10
800090a0:	30 08       	mov	r8,0
800090a2:	ef 48 fe 34 	st.w	r7[-460],r8
800090a6:	ee fc ff 4c 	ld.w	r12,r7[-180]
800090aa:	ef 4c fe 30 	st.w	r7[-464],r12
800090ae:	30 0a       	mov	r10,0
800090b0:	ef 4a fe 2c 	st.w	r7[-468],r10
800090b4:	ee f9 fe 34 	ld.w	r9,r7[-460]
800090b8:	ee f8 fe 30 	ld.w	r8,r7[-464]
800090bc:	b1 39       	mul	r9,r8
800090be:	ee f8 fe 2c 	ld.w	r8,r7[-468]
800090c2:	ee fc fe 38 	ld.w	r12,r7[-456]
800090c6:	b9 38       	mul	r8,r12
800090c8:	10 09       	add	r9,r8
800090ca:	ee f8 fe 38 	ld.w	r8,r7[-456]
800090ce:	ee fc fe 30 	ld.w	r12,r7[-464]
800090d2:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800090d6:	16 09       	add	r9,r11
800090d8:	12 9b       	mov	r11,r9
800090da:	e0 68 03 e7 	mov	r8,999
800090de:	30 09       	mov	r9,0
800090e0:	10 0a       	add	r10,r8
800090e2:	f6 09 00 4b 	adc	r11,r11,r9
800090e6:	e0 68 03 e8 	mov	r8,1000
800090ea:	30 09       	mov	r9,0
800090ec:	f0 1f 02 7f 	mcall	80009ae8 <main+0x11b8>
800090f0:	14 98       	mov	r8,r10
800090f2:	16 99       	mov	r9,r11
				
#if 0 //DEBUG: set this to seconds not minutes so we can debug this logic faster 11may15				
				cpu_set_timeout((sanitizeMinutes * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer);
#endif
				cpu_set_timeout((sanitizeMinutes * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer); //DEBUG take this out when done debugging logic, put it back to minutes 11may15
800090f4:	10 99       	mov	r9,r8
800090f6:	fe f8 0a 2e 	ld.w	r8,pc[2606]
800090fa:	70 08       	ld.w	r8,r8[0x0]
800090fc:	f2 08 02 48 	mul	r8,r9,r8
80009100:	ef 48 ff 58 	st.w	r7[-168],r8
80009104:	fe f8 0a 3c 	ld.w	r8,pc[2620]
80009108:	ef 48 ff 54 	st.w	r7[-172],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000910c:	e1 b8 00 42 	mfsr	r8,0x108
80009110:	10 99       	mov	r9,r8
80009112:	ee f8 ff 54 	ld.w	r8,r7[-172]
80009116:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009118:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000911c:	70 09       	ld.w	r9,r8[0x0]
8000911e:	ee f8 ff 58 	ld.w	r8,r7[-168]
80009122:	10 09       	add	r9,r8
80009124:	ee f8 ff 54 	ld.w	r8,r7[-172]
80009128:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000912a:	ee f9 ff 54 	ld.w	r9,r7[-172]
8000912e:	30 08       	mov	r8,0
80009130:	f3 68 00 08 	st.b	r9[8],r8
80009134:	e0 68 03 e8 	mov	r8,1000
80009138:	ef 48 ff 60 	st.w	r7[-160],r8
8000913c:	e0 68 e1 00 	mov	r8,57600
80009140:	ea 18 05 f5 	orh	r8,0x5f5
80009144:	ef 48 ff 5c 	st.w	r7[-164],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009148:	ee fa ff 60 	ld.w	r10,r7[-160]
8000914c:	ef 4a fe 48 	st.w	r7[-440],r10
80009150:	30 08       	mov	r8,0
80009152:	ef 48 fe 44 	st.w	r7[-444],r8
80009156:	ee fc ff 5c 	ld.w	r12,r7[-164]
8000915a:	ef 4c fe 40 	st.w	r7[-448],r12
8000915e:	30 0a       	mov	r10,0
80009160:	ef 4a fe 3c 	st.w	r7[-452],r10
80009164:	ee f9 fe 44 	ld.w	r9,r7[-444]
80009168:	ee f8 fe 40 	ld.w	r8,r7[-448]
8000916c:	b1 39       	mul	r9,r8
8000916e:	ee f8 fe 3c 	ld.w	r8,r7[-452]
80009172:	ee fc fe 48 	ld.w	r12,r7[-440]
80009176:	b9 38       	mul	r8,r12
80009178:	10 09       	add	r9,r8
8000917a:	ee f8 fe 48 	ld.w	r8,r7[-440]
8000917e:	ee fc fe 40 	ld.w	r12,r7[-448]
80009182:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009186:	16 09       	add	r9,r11
80009188:	12 9b       	mov	r11,r9
8000918a:	e0 68 03 e7 	mov	r8,999
8000918e:	30 09       	mov	r9,0
80009190:	10 0a       	add	r10,r8
80009192:	f6 09 00 4b 	adc	r11,r11,r9
80009196:	e0 68 03 e8 	mov	r8,1000
8000919a:	30 09       	mov	r9,0
8000919c:	f0 1f 02 53 	mcall	80009ae8 <main+0x11b8>
800091a0:	14 98       	mov	r8,r10
800091a2:	16 99       	mov	r9,r11

				
//DEBUG 11may15 do this once per second for debug				cpu_set_timeout((60 * cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics
				cpu_set_timeout((cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics DEBUG 11may15
800091a4:	ef 48 ff 68 	st.w	r7[-152],r8
800091a8:	fe f8 09 9c 	ld.w	r8,pc[2460]
800091ac:	ef 48 ff 64 	st.w	r7[-156],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800091b0:	e1 b8 00 42 	mfsr	r8,0x108
800091b4:	10 99       	mov	r9,r8
800091b6:	ee f8 ff 64 	ld.w	r8,r7[-156]
800091ba:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800091bc:	ee f8 ff 64 	ld.w	r8,r7[-156]
800091c0:	70 09       	ld.w	r9,r8[0x0]
800091c2:	ee f8 ff 68 	ld.w	r8,r7[-152]
800091c6:	10 09       	add	r9,r8
800091c8:	ee f8 ff 64 	ld.w	r8,r7[-156]
800091cc:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800091ce:	ee f9 ff 64 	ld.w	r9,r7[-156]
800091d2:	30 08       	mov	r8,0
800091d4:	f3 68 00 08 	st.b	r9[8],r8

				electroclaveState = STATE_SANITIZE;
800091d8:	fe f9 09 04 	ld.w	r9,pc[2308]
800091dc:	30 58       	mov	r8,5
800091de:	b2 88       	st.b	r9[0x0],r8
				
				break;
800091e0:	e0 8f 02 db 	bral	80009796 <main+0xe66>
800091e4:	fe f8 09 58 	ld.w	r8,pc[2392]
800091e8:	ef 48 ff 6c 	st.w	r7[-148],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800091ec:	e1 b8 00 42 	mfsr	r8,0x108
800091f0:	ef 48 ff 70 	st.w	r7[-144],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800091f4:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800091f8:	f1 39 00 08 	ld.ub	r9,r8[8]
800091fc:	30 28       	mov	r8,2
800091fe:	f0 09 18 00 	cp.b	r9,r8
80009202:	c0 31       	brne	80009208 <main+0x8d8>
    return false;
80009204:	30 08       	mov	r8,0
80009206:	c4 38       	rjmp	8000928c <main+0x95c>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009208:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000920c:	f1 39 00 08 	ld.ub	r9,r8[8]
80009210:	30 18       	mov	r8,1
80009212:	f0 09 18 00 	cp.b	r9,r8
80009216:	c0 31       	brne	8000921c <main+0x8ec>
    return true;
80009218:	30 18       	mov	r8,1
8000921a:	c3 98       	rjmp	8000928c <main+0x95c>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000921c:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009220:	70 09       	ld.w	r9,r8[0x0]
80009222:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009226:	70 18       	ld.w	r8,r8[0x4]
80009228:	10 39       	cp.w	r9,r8
8000922a:	e0 88 00 1a 	brls	8000925e <main+0x92e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000922e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009232:	70 09       	ld.w	r9,r8[0x0]
80009234:	ee f8 ff 70 	ld.w	r8,r7[-144]
80009238:	12 38       	cp.w	r8,r9
8000923a:	c1 02       	brcc	8000925a <main+0x92a>
8000923c:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009240:	70 19       	ld.w	r9,r8[0x4]
80009242:	ee f8 ff 70 	ld.w	r8,r7[-144]
80009246:	12 38       	cp.w	r8,r9
80009248:	e0 88 00 09 	brls	8000925a <main+0x92a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000924c:	ee f9 ff 6c 	ld.w	r9,r7[-148]
80009250:	30 18       	mov	r8,1
80009252:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009256:	30 18       	mov	r8,1
80009258:	c1 a8       	rjmp	8000928c <main+0x95c>
    }
    return false;
8000925a:	30 08       	mov	r8,0
8000925c:	c1 88       	rjmp	8000928c <main+0x95c>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000925e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009262:	70 09       	ld.w	r9,r8[0x0]
80009264:	ee f8 ff 70 	ld.w	r8,r7[-144]
80009268:	12 38       	cp.w	r8,r9
8000926a:	c0 93       	brcs	8000927c <main+0x94c>
8000926c:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009270:	70 19       	ld.w	r9,r8[0x4]
80009272:	ee f8 ff 70 	ld.w	r8,r7[-144]
80009276:	12 38       	cp.w	r8,r9
80009278:	e0 88 00 09 	brls	8000928a <main+0x95a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000927c:	ee f9 ff 6c 	ld.w	r9,r7[-148]
80009280:	30 18       	mov	r8,1
80009282:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009286:	30 18       	mov	r8,1
80009288:	c0 28       	rjmp	8000928c <main+0x95c>
    }
    return false;
8000928a:	30 08       	mov	r8,0
				
			case STATE_SANITIZE:
				/*
    			 * Manage the display
				 */
				if (cpu_is_timeout(&displayTimer))
8000928c:	58 08       	cp.w	r8,0
8000928e:	c6 90       	breq	80009360 <main+0xa30>
80009290:	fe f8 08 ac 	ld.w	r8,pc[2220]
80009294:	ef 48 ff 74 	st.w	r7[-140],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80009298:	ee f9 ff 74 	ld.w	r9,r7[-140]
8000929c:	30 28       	mov	r8,2
8000929e:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout(&displayTimer);
					switch (displayIdx)
800092a2:	fe f8 08 7e 	ld.w	r8,pc[2174]
800092a6:	11 88       	ld.ub	r8,r8[0x0]
800092a8:	58 18       	cp.w	r8,1
800092aa:	c0 f0       	breq	800092c8 <main+0x998>
800092ac:	e0 89 00 05 	brgt	800092b6 <main+0x986>
800092b0:	58 08       	cp.w	r8,0
800092b2:	c0 70       	breq	800092c0 <main+0x990>
800092b4:	c1 78       	rjmp	800092e2 <main+0x9b2>
800092b6:	58 28       	cp.w	r8,2
800092b8:	c0 c0       	breq	800092d0 <main+0x9a0>
800092ba:	58 38       	cp.w	r8,3
800092bc:	c0 e0       	breq	800092d8 <main+0x9a8>
800092be:	c1 28       	rjmp	800092e2 <main+0x9b2>
					{
						case 0:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF1);
800092c0:	30 5c       	mov	r12,5
800092c2:	f0 1f 02 02 	mcall	80009ac8 <main+0x1198>
							break;
800092c6:	c0 e8       	rjmp	800092e2 <main+0x9b2>
						case 1:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF2);
800092c8:	30 6c       	mov	r12,6
800092ca:	f0 1f 02 00 	mcall	80009ac8 <main+0x1198>
							break;
800092ce:	c0 a8       	rjmp	800092e2 <main+0x9b2>
						case 2:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF3);
800092d0:	30 7c       	mov	r12,7
800092d2:	f0 1f 01 fe 	mcall	80009ac8 <main+0x1198>
							break;
800092d6:	c0 68       	rjmp	800092e2 <main+0x9b2>
						case 3:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF4);
800092d8:	30 8c       	mov	r12,8
800092da:	f0 1f 01 fc 	mcall	80009ac8 <main+0x1198>
800092de:	c0 28       	rjmp	800092e2 <main+0x9b2>
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
800092e0:	d7 03       	nop
							break;
					}
					
					while (1)
					{
						if (++displayIdx >= NUM_SHELVES)
800092e2:	fe f8 08 3e 	ld.w	r8,pc[2110]
800092e6:	11 88       	ld.ub	r8,r8[0x0]
800092e8:	2f f8       	sub	r8,-1
800092ea:	5c 58       	castu.b	r8
800092ec:	fe f9 08 34 	ld.w	r9,pc[2100]
800092f0:	b2 88       	st.b	r9[0x0],r8
800092f2:	fe f8 08 2e 	ld.w	r8,pc[2094]
800092f6:	11 89       	ld.ub	r9,r8[0x0]
800092f8:	30 38       	mov	r8,3
800092fa:	f0 09 18 00 	cp.b	r9,r8
800092fe:	e0 88 00 06 	brls	8000930a <main+0x9da>
						{
							displayIdx = 0; //12apr15 wrap around
80009302:	fe f9 08 1e 	ld.w	r9,pc[2078]
80009306:	30 08       	mov	r8,0
80009308:	b2 88       	st.b	r9[0x0],r8
						}
						
						if (shelf[displayIdx].active)
8000930a:	fe f8 08 16 	ld.w	r8,pc[2070]
8000930e:	11 88       	ld.ub	r8,r8[0x0]
80009310:	10 99       	mov	r9,r8
80009312:	fe fa 08 16 	ld.w	r10,pc[2070]
80009316:	12 98       	mov	r8,r9
80009318:	a3 68       	lsl	r8,0x2
8000931a:	12 08       	add	r8,r9
8000931c:	f4 08 00 08 	add	r8,r10,r8
80009320:	11 88       	ld.ub	r8,r8[0x0]
80009322:	58 08       	cp.w	r8,0
80009324:	cd e0       	breq	800092e0 <main+0x9b0>
							break; //this shelf is active, we don't need to look for another one
						}
						
					}

					cpu_set_timeout(displayTimerSeconds, &displayTimer); //8 seconds per shelf
80009326:	fe f8 08 12 	ld.w	r8,pc[2066]
8000932a:	70 08       	ld.w	r8,r8[0x0]
8000932c:	ef 48 ff 7c 	st.w	r7[-132],r8
80009330:	fe f8 08 0c 	ld.w	r8,pc[2060]
80009334:	ef 48 ff 78 	st.w	r7[-136],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009338:	e1 b8 00 42 	mfsr	r8,0x108
8000933c:	10 99       	mov	r9,r8
8000933e:	ee f8 ff 78 	ld.w	r8,r7[-136]
80009342:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009344:	ee f8 ff 78 	ld.w	r8,r7[-136]
80009348:	70 09       	ld.w	r9,r8[0x0]
8000934a:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000934e:	10 09       	add	r9,r8
80009350:	ee f8 ff 78 	ld.w	r8,r7[-136]
80009354:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009356:	ee f9 ff 78 	ld.w	r9,r7[-136]
8000935a:	30 08       	mov	r8,0
8000935c:	f3 68 00 08 	st.b	r9[8],r8
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
80009360:	fe f8 07 e4 	ld.w	r8,pc[2020]
80009364:	ef 48 ff 80 	st.w	r7[-128],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009368:	e1 b8 00 42 	mfsr	r8,0x108
8000936c:	ef 48 ff 84 	st.w	r7[-124],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009370:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009374:	f1 39 00 08 	ld.ub	r9,r8[8]
80009378:	30 28       	mov	r8,2
8000937a:	f0 09 18 00 	cp.b	r9,r8
8000937e:	c0 31       	brne	80009384 <main+0xa54>
    return false;
80009380:	30 08       	mov	r8,0
80009382:	c4 38       	rjmp	80009408 <main+0xad8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009384:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009388:	f1 39 00 08 	ld.ub	r9,r8[8]
8000938c:	30 18       	mov	r8,1
8000938e:	f0 09 18 00 	cp.b	r9,r8
80009392:	c0 31       	brne	80009398 <main+0xa68>
    return true;
80009394:	30 18       	mov	r8,1
80009396:	c3 98       	rjmp	80009408 <main+0xad8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009398:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000939c:	70 09       	ld.w	r9,r8[0x0]
8000939e:	ee f8 ff 80 	ld.w	r8,r7[-128]
800093a2:	70 18       	ld.w	r8,r8[0x4]
800093a4:	10 39       	cp.w	r9,r8
800093a6:	e0 88 00 1a 	brls	800093da <main+0xaaa>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800093aa:	ee f8 ff 80 	ld.w	r8,r7[-128]
800093ae:	70 09       	ld.w	r9,r8[0x0]
800093b0:	ee f8 ff 84 	ld.w	r8,r7[-124]
800093b4:	12 38       	cp.w	r8,r9
800093b6:	c1 02       	brcc	800093d6 <main+0xaa6>
800093b8:	ee f8 ff 80 	ld.w	r8,r7[-128]
800093bc:	70 19       	ld.w	r9,r8[0x4]
800093be:	ee f8 ff 84 	ld.w	r8,r7[-124]
800093c2:	12 38       	cp.w	r8,r9
800093c4:	e0 88 00 09 	brls	800093d6 <main+0xaa6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800093c8:	ee f9 ff 80 	ld.w	r9,r7[-128]
800093cc:	30 18       	mov	r8,1
800093ce:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800093d2:	30 18       	mov	r8,1
800093d4:	c1 a8       	rjmp	80009408 <main+0xad8>
    }
    return false;
800093d6:	30 08       	mov	r8,0
800093d8:	c1 88       	rjmp	80009408 <main+0xad8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800093da:	ee f8 ff 80 	ld.w	r8,r7[-128]
800093de:	70 09       	ld.w	r9,r8[0x0]
800093e0:	ee f8 ff 84 	ld.w	r8,r7[-124]
800093e4:	12 38       	cp.w	r8,r9
800093e6:	c0 93       	brcs	800093f8 <main+0xac8>
800093e8:	ee f8 ff 80 	ld.w	r8,r7[-128]
800093ec:	70 19       	ld.w	r9,r8[0x4]
800093ee:	ee f8 ff 84 	ld.w	r8,r7[-124]
800093f2:	12 38       	cp.w	r8,r9
800093f4:	e0 88 00 09 	brls	80009406 <main+0xad6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800093f8:	ee f9 ff 80 	ld.w	r9,r7[-128]
800093fc:	30 18       	mov	r8,1
800093fe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009402:	30 18       	mov	r8,1
80009404:	c0 28       	rjmp	80009408 <main+0xad8>
    }
    return false;
80009406:	30 08       	mov	r8,0
				}

				/*
    			 * Manage storing usage statistics to flash
				 */
				if (cpu_is_timeout (&oneMinuteTimer))
80009408:	58 08       	cp.w	r8,0
8000940a:	c5 e0       	breq	800094c6 <main+0xb96>
8000940c:	fe f8 07 38 	ld.w	r8,pc[1848]
80009410:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80009414:	ee f9 ff 88 	ld.w	r9,r7[-120]
80009418:	30 28       	mov	r8,2
8000941a:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout (&oneMinuteTimer);
					
					increment_ledBoard_usage_min(); //increments usage minutes for active shelves only
8000941e:	f0 1f 01 cb 	mcall	80009b48 <main+0x1218>
80009422:	e0 68 03 e8 	mov	r8,1000
80009426:	ef 48 ff 90 	st.w	r7[-112],r8
8000942a:	e0 68 e1 00 	mov	r8,57600
8000942e:	ea 18 05 f5 	orh	r8,0x5f5
80009432:	ef 48 ff 8c 	st.w	r7[-116],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009436:	ee fa ff 90 	ld.w	r10,r7[-112]
8000943a:	ef 4a fe 58 	st.w	r7[-424],r10
8000943e:	30 08       	mov	r8,0
80009440:	ef 48 fe 54 	st.w	r7[-428],r8
80009444:	ee fc ff 8c 	ld.w	r12,r7[-116]
80009448:	ef 4c fe 50 	st.w	r7[-432],r12
8000944c:	30 0a       	mov	r10,0
8000944e:	ef 4a fe 4c 	st.w	r7[-436],r10
80009452:	ee f9 fe 54 	ld.w	r9,r7[-428]
80009456:	ee f8 fe 50 	ld.w	r8,r7[-432]
8000945a:	b1 39       	mul	r9,r8
8000945c:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80009460:	ee fc fe 58 	ld.w	r12,r7[-424]
80009464:	b9 38       	mul	r8,r12
80009466:	10 09       	add	r9,r8
80009468:	ee f8 fe 58 	ld.w	r8,r7[-424]
8000946c:	ee fc fe 50 	ld.w	r12,r7[-432]
80009470:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009474:	16 09       	add	r9,r11
80009476:	12 9b       	mov	r11,r9
80009478:	e0 68 03 e7 	mov	r8,999
8000947c:	30 09       	mov	r9,0
8000947e:	10 0a       	add	r10,r8
80009480:	f6 09 00 4b 	adc	r11,r11,r9
80009484:	e0 68 03 e8 	mov	r8,1000
80009488:	30 09       	mov	r9,0
8000948a:	f0 1f 01 98 	mcall	80009ae8 <main+0x11b8>
8000948e:	14 98       	mov	r8,r10
80009490:	16 99       	mov	r9,r11
					
//DEBUG 11may15 set to one second for debug					cpu_set_timeout(cpu_ms_2_cy(60000, EC_CPU_CLOCK_FREQ), &oneMinuteTimer); //one minute for the usage statistics
					cpu_set_timeout((cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics DEBUG 11may15 one second instead of one minute
80009492:	ef 48 ff 98 	st.w	r7[-104],r8
80009496:	fe f8 06 ae 	ld.w	r8,pc[1710]
8000949a:	ef 48 ff 94 	st.w	r7[-108],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000949e:	e1 b8 00 42 	mfsr	r8,0x108
800094a2:	10 99       	mov	r9,r8
800094a4:	ee f8 ff 94 	ld.w	r8,r7[-108]
800094a8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800094aa:	ee f8 ff 94 	ld.w	r8,r7[-108]
800094ae:	70 09       	ld.w	r9,r8[0x0]
800094b0:	ee f8 ff 98 	ld.w	r8,r7[-104]
800094b4:	10 09       	add	r9,r8
800094b6:	ee f8 ff 94 	ld.w	r8,r7[-108]
800094ba:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800094bc:	ee f9 ff 94 	ld.w	r9,r7[-108]
800094c0:	30 08       	mov	r8,0
800094c2:	f3 68 00 08 	st.b	r9[8],r8
800094c6:	fe f8 06 7a 	ld.w	r8,pc[1658]
800094ca:	ef 48 ff 9c 	st.w	r7[-100],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800094ce:	e1 b8 00 42 	mfsr	r8,0x108
800094d2:	ef 48 ff a0 	st.w	r7[-96],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800094d6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800094da:	f1 39 00 08 	ld.ub	r9,r8[8]
800094de:	30 28       	mov	r8,2
800094e0:	f0 09 18 00 	cp.b	r9,r8
800094e4:	c0 31       	brne	800094ea <main+0xbba>
    return false;
800094e6:	30 08       	mov	r8,0
800094e8:	c4 38       	rjmp	8000956e <main+0xc3e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800094ea:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800094ee:	f1 39 00 08 	ld.ub	r9,r8[8]
800094f2:	30 18       	mov	r8,1
800094f4:	f0 09 18 00 	cp.b	r9,r8
800094f8:	c0 31       	brne	800094fe <main+0xbce>
    return true;
800094fa:	30 18       	mov	r8,1
800094fc:	c3 98       	rjmp	8000956e <main+0xc3e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800094fe:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009502:	70 09       	ld.w	r9,r8[0x0]
80009504:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009508:	70 18       	ld.w	r8,r8[0x4]
8000950a:	10 39       	cp.w	r9,r8
8000950c:	e0 88 00 1a 	brls	80009540 <main+0xc10>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009510:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009514:	70 09       	ld.w	r9,r8[0x0]
80009516:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000951a:	12 38       	cp.w	r8,r9
8000951c:	c1 02       	brcc	8000953c <main+0xc0c>
8000951e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009522:	70 19       	ld.w	r9,r8[0x4]
80009524:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009528:	12 38       	cp.w	r8,r9
8000952a:	e0 88 00 09 	brls	8000953c <main+0xc0c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000952e:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80009532:	30 18       	mov	r8,1
80009534:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009538:	30 18       	mov	r8,1
8000953a:	c1 a8       	rjmp	8000956e <main+0xc3e>
    }
    return false;
8000953c:	30 08       	mov	r8,0
8000953e:	c1 88       	rjmp	8000956e <main+0xc3e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009540:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009544:	70 09       	ld.w	r9,r8[0x0]
80009546:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000954a:	12 38       	cp.w	r8,r9
8000954c:	c0 93       	brcs	8000955e <main+0xc2e>
8000954e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009552:	70 19       	ld.w	r9,r8[0x4]
80009554:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009558:	12 38       	cp.w	r8,r9
8000955a:	e0 88 00 09 	brls	8000956c <main+0xc3c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000955e:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80009562:	30 18       	mov	r8,1
80009564:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009568:	30 18       	mov	r8,1
8000956a:	c0 28       	rjmp	8000956e <main+0xc3e>
    }
    return false;
8000956c:	30 08       	mov	r8,0
				}
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
8000956e:	58 08       	cp.w	r8,0
80009570:	e0 80 01 10 	breq	80009790 <main+0xe60>
					
					for (int i=0; i< NUM_SHELVES; i++)
80009574:	30 08       	mov	r8,0
80009576:	ef 48 fe c4 	st.w	r7[-316],r8
8000957a:	c0 d8       	rjmp	80009594 <main+0xc64>
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
8000957c:	ee f8 fe c4 	ld.w	r8,r7[-316]
80009580:	5c 58       	castu.b	r8
80009582:	30 0b       	mov	r11,0
80009584:	10 9c       	mov	r12,r8
80009586:	f0 1f 01 6c 	mcall	80009b34 <main+0x1204>
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
					
					for (int i=0; i< NUM_SHELVES; i++)
8000958a:	ee f8 fe c4 	ld.w	r8,r7[-316]
8000958e:	2f f8       	sub	r8,-1
80009590:	ef 48 fe c4 	st.w	r7[-316],r8
80009594:	ee f8 fe c4 	ld.w	r8,r7[-316]
80009598:	58 38       	cp.w	r8,3
8000959a:	fe 9a ff f1 	brle	8000957c <main+0xc4c>
8000959e:	fe f8 05 a2 	ld.w	r8,pc[1442]
800095a2:	ef 48 ff a4 	st.w	r7[-92],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
800095a6:	ee f9 ff a4 	ld.w	r9,r7[-92]
800095aa:	30 28       	mov	r8,2
800095ac:	f3 68 00 08 	st.b	r9[8],r8
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
800095b0:	fe fc 05 9c 	ld.w	r12,pc[1436]
800095b4:	f0 1f 01 44 	mcall	80009ac4 <main+0x1194>
					electroclaveState = STATE_START_CLEAN;
800095b8:	fe f9 05 24 	ld.w	r9,pc[1316]
800095bc:	30 68       	mov	r8,6
800095be:	b2 88       	st.b	r9[0x0],r8
				}
				break;
800095c0:	ce b8       	rjmp	80009796 <main+0xe66>
				
			case STATE_START_CLEAN:
				display_text(IDX_CLEAN);
800095c2:	30 1c       	mov	r12,1
800095c4:	f0 1f 01 41 	mcall	80009ac8 <main+0x1198>
				electroclaveState = STATE_CLEAN;
800095c8:	fe f9 05 14 	ld.w	r9,pc[1300]
800095cc:	30 78       	mov	r8,7
800095ce:	b2 88       	st.b	r9[0x0],r8
800095d0:	e0 68 03 e8 	mov	r8,1000
800095d4:	ef 48 ff ac 	st.w	r7[-84],r8
800095d8:	e0 68 e1 00 	mov	r8,57600
800095dc:	ea 18 05 f5 	orh	r8,0x5f5
800095e0:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800095e4:	ee fa ff ac 	ld.w	r10,r7[-84]
800095e8:	ef 4a fe 68 	st.w	r7[-408],r10
800095ec:	30 08       	mov	r8,0
800095ee:	ef 48 fe 64 	st.w	r7[-412],r8
800095f2:	ee fc ff a8 	ld.w	r12,r7[-88]
800095f6:	ef 4c fe 60 	st.w	r7[-416],r12
800095fa:	30 0a       	mov	r10,0
800095fc:	ef 4a fe 5c 	st.w	r7[-420],r10
80009600:	ee f9 fe 64 	ld.w	r9,r7[-412]
80009604:	ee f8 fe 60 	ld.w	r8,r7[-416]
80009608:	b1 39       	mul	r9,r8
8000960a:	ee f8 fe 5c 	ld.w	r8,r7[-420]
8000960e:	ee fc fe 68 	ld.w	r12,r7[-408]
80009612:	b9 38       	mul	r8,r12
80009614:	10 09       	add	r9,r8
80009616:	ee f8 fe 68 	ld.w	r8,r7[-408]
8000961a:	ee fc fe 60 	ld.w	r12,r7[-416]
8000961e:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009622:	16 09       	add	r9,r11
80009624:	12 9b       	mov	r11,r9
80009626:	e0 68 03 e7 	mov	r8,999
8000962a:	30 09       	mov	r9,0
8000962c:	10 0a       	add	r10,r8
8000962e:	f6 09 00 4b 	adc	r11,r11,r9
80009632:	e0 68 03 e8 	mov	r8,1000
80009636:	30 09       	mov	r9,0
80009638:	f0 1f 01 2c 	mcall	80009ae8 <main+0x11b8>
8000963c:	14 98       	mov	r8,r10
8000963e:	16 99       	mov	r9,r11
#if 0 //DEBUG do this in seconds to debug logic 11may15				
				cpu_set_timeout((20 * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //TODO: this time period will be parameterized from the technician UART interface
#endif
				cpu_set_timeout((20 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //DEBUG 11may15 
80009640:	10 99       	mov	r9,r8
80009642:	12 98       	mov	r8,r9
80009644:	a3 68       	lsl	r8,0x2
80009646:	12 08       	add	r8,r9
80009648:	a3 68       	lsl	r8,0x2
8000964a:	ef 48 ff b4 	st.w	r7[-76],r8
8000964e:	fe f8 05 02 	ld.w	r8,pc[1282]
80009652:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009656:	e1 b8 00 42 	mfsr	r8,0x108
8000965a:	10 99       	mov	r9,r8
8000965c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009660:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009662:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009666:	70 09       	ld.w	r9,r8[0x0]
80009668:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000966c:	10 09       	add	r9,r8
8000966e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009672:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009674:	ee f9 ff b0 	ld.w	r9,r7[-80]
80009678:	30 08       	mov	r8,0
8000967a:	f3 68 00 08 	st.b	r9[8],r8

				break;	
8000967e:	c8 c8       	rjmp	80009796 <main+0xe66>
80009680:	fe f8 04 d0 	ld.w	r8,pc[1232]
80009684:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009688:	e1 b8 00 42 	mfsr	r8,0x108
8000968c:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009690:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009694:	f1 39 00 08 	ld.ub	r9,r8[8]
80009698:	30 28       	mov	r8,2
8000969a:	f0 09 18 00 	cp.b	r9,r8
8000969e:	c0 31       	brne	800096a4 <main+0xd74>
    return false;
800096a0:	30 08       	mov	r8,0
800096a2:	c4 38       	rjmp	80009728 <main+0xdf8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800096a4:	ee f8 ff b8 	ld.w	r8,r7[-72]
800096a8:	f1 39 00 08 	ld.ub	r9,r8[8]
800096ac:	30 18       	mov	r8,1
800096ae:	f0 09 18 00 	cp.b	r9,r8
800096b2:	c0 31       	brne	800096b8 <main+0xd88>
    return true;
800096b4:	30 18       	mov	r8,1
800096b6:	c3 98       	rjmp	80009728 <main+0xdf8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800096b8:	ee f8 ff b8 	ld.w	r8,r7[-72]
800096bc:	70 09       	ld.w	r9,r8[0x0]
800096be:	ee f8 ff b8 	ld.w	r8,r7[-72]
800096c2:	70 18       	ld.w	r8,r8[0x4]
800096c4:	10 39       	cp.w	r9,r8
800096c6:	e0 88 00 1a 	brls	800096fa <main+0xdca>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800096ca:	ee f8 ff b8 	ld.w	r8,r7[-72]
800096ce:	70 09       	ld.w	r9,r8[0x0]
800096d0:	ee f8 ff bc 	ld.w	r8,r7[-68]
800096d4:	12 38       	cp.w	r8,r9
800096d6:	c1 02       	brcc	800096f6 <main+0xdc6>
800096d8:	ee f8 ff b8 	ld.w	r8,r7[-72]
800096dc:	70 19       	ld.w	r9,r8[0x4]
800096de:	ee f8 ff bc 	ld.w	r8,r7[-68]
800096e2:	12 38       	cp.w	r8,r9
800096e4:	e0 88 00 09 	brls	800096f6 <main+0xdc6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800096e8:	ee f9 ff b8 	ld.w	r9,r7[-72]
800096ec:	30 18       	mov	r8,1
800096ee:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800096f2:	30 18       	mov	r8,1
800096f4:	c1 a8       	rjmp	80009728 <main+0xdf8>
    }
    return false;
800096f6:	30 08       	mov	r8,0
800096f8:	c1 88       	rjmp	80009728 <main+0xdf8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800096fa:	ee f8 ff b8 	ld.w	r8,r7[-72]
800096fe:	70 09       	ld.w	r9,r8[0x0]
80009700:	ee f8 ff bc 	ld.w	r8,r7[-68]
80009704:	12 38       	cp.w	r8,r9
80009706:	c0 93       	brcs	80009718 <main+0xde8>
80009708:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000970c:	70 19       	ld.w	r9,r8[0x4]
8000970e:	ee f8 ff bc 	ld.w	r8,r7[-68]
80009712:	12 38       	cp.w	r8,r9
80009714:	e0 88 00 09 	brls	80009726 <main+0xdf6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009718:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000971c:	30 18       	mov	r8,1
8000971e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009722:	30 18       	mov	r8,1
80009724:	c0 28       	rjmp	80009728 <main+0xdf8>
    }
    return false;
80009726:	30 08       	mov	r8,0
				
			case STATE_CLEAN:
				if (cpu_is_timeout(&cleanTimer)) {
80009728:	58 08       	cp.w	r8,0
8000972a:	c3 50       	breq	80009794 <main+0xe64>
8000972c:	fe f8 04 24 	ld.w	r8,pc[1060]
80009730:	ef 48 ff c0 	st.w	r7[-64],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80009734:	ee f9 ff c0 	ld.w	r9,r7[-64]
80009738:	30 28       	mov	r8,2
8000973a:	f3 68 00 08 	st.b	r9[8],r8
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
8000973e:	fe f9 03 9e 	ld.w	r9,pc[926]
80009742:	30 38       	mov	r8,3
80009744:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("Start sanitizing\r\n");
80009746:	fe fc 03 d2 	ld.w	r12,pc[978]
8000974a:	f0 1f 00 df 	mcall	80009ac4 <main+0x1194>

				}
				break;
8000974e:	c2 48       	rjmp	80009796 <main+0xe66>
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
80009750:	30 08       	mov	r8,0
80009752:	ef 48 fe c8 	st.w	r7[-312],r8
80009756:	c0 d8       	rjmp	80009770 <main+0xe40>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
80009758:	ee f8 fe c8 	ld.w	r8,r7[-312]
8000975c:	5c 58       	castu.b	r8
8000975e:	30 0b       	mov	r11,0
80009760:	10 9c       	mov	r12,r8
80009762:	f0 1f 00 f5 	mcall	80009b34 <main+0x1204>
				}
				break;
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
80009766:	ee f8 fe c8 	ld.w	r8,r7[-312]
8000976a:	2f f8       	sub	r8,-1
8000976c:	ef 48 fe c8 	st.w	r7[-312],r8
80009770:	ee f8 fe c8 	ld.w	r8,r7[-312]
80009774:	58 38       	cp.w	r8,3
80009776:	fe 9a ff f1 	brle	80009758 <main+0xe28>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				electroclaveState = STATE_EC_IDLE;
8000977a:	fe f9 03 62 	ld.w	r9,pc[866]
8000977e:	30 08       	mov	r8,0
80009780:	b2 88       	st.b	r9[0x0],r8
80009782:	c0 a8       	rjmp	80009796 <main+0xe66>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
					electroclaveState = STATE_DOOR_LATCHED;
					firstTimeThrough = 1;
				}
				break;
80009784:	d7 03       	nop
80009786:	c0 88       	rjmp	80009796 <main+0xe66>
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
					print_ecdbg("Action push button press detected\r\n");
					electroclaveState = STATE_ACTION_PB_PRESSED;
				}
				break;
80009788:	d7 03       	nop
8000978a:	c0 68       	rjmp	80009796 <main+0xe66>
				if (EC_ACTION_PB)
				{
					print_ecdbg("Action push button release detected\r\n");
					electroclaveState = STATE_ACTION_PB_RELEASED;	
				}
				break;
8000978c:	d7 03       	nop
8000978e:	c0 48       	rjmp	80009796 <main+0xe66>
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
					electroclaveState = STATE_START_CLEAN;
				}
				break;
80009790:	d7 03       	nop
80009792:	c0 28       	rjmp	80009796 <main+0xe66>
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
					print_ecdbg("Start sanitizing\r\n");

				}
				break;
80009794:	d7 03       	nop
		
		/*
		 * This check overrides everything going on in the state machine, if the user opens the door,
		 * shut down all processes for safety
		 */
		if (!EC_DOOR_LATCHED) {
80009796:	33 ec       	mov	r12,62
80009798:	f0 1f 00 d7 	mcall	80009af4 <main+0x11c4>
8000979c:	18 98       	mov	r8,r12
8000979e:	58 08       	cp.w	r8,0
800097a0:	e0 80 00 d2 	breq	80009944 <main+0x1014>
		
			if (firstTimeThrough)
800097a4:	fe f8 03 58 	ld.w	r8,pc[856]
800097a8:	11 88       	ld.ub	r8,r8[0x0]
800097aa:	58 08       	cp.w	r8,0
800097ac:	e0 80 00 cc 	breq	80009944 <main+0x1014>
			{
				door_latch_open_kill_all_shelves();
800097b0:	f0 1f 00 e9 	mcall	80009b54 <main+0x1224>

				display_text(IDX_CLEAR);
800097b4:	30 9c       	mov	r12,9
800097b6:	f0 1f 00 c5 	mcall	80009ac8 <main+0x1198>
800097ba:	e0 68 01 f4 	mov	r8,500
800097be:	ef 48 ff c8 	st.w	r7[-56],r8
800097c2:	e0 68 e1 00 	mov	r8,57600
800097c6:	ea 18 05 f5 	orh	r8,0x5f5
800097ca:	ef 48 ff c4 	st.w	r7[-60],r8
800097ce:	ee f8 ff c8 	ld.w	r8,r7[-56]
800097d2:	ef 48 ff d0 	st.w	r7[-48],r8
800097d6:	ee f8 ff c4 	ld.w	r8,r7[-60]
800097da:	ef 48 ff cc 	st.w	r7[-52],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800097de:	ee fa ff d0 	ld.w	r10,r7[-48]
800097e2:	ef 4a fe 78 	st.w	r7[-392],r10
800097e6:	30 08       	mov	r8,0
800097e8:	ef 48 fe 74 	st.w	r7[-396],r8
800097ec:	ee fc ff cc 	ld.w	r12,r7[-52]
800097f0:	ef 4c fe 70 	st.w	r7[-400],r12
800097f4:	30 0a       	mov	r10,0
800097f6:	ef 4a fe 6c 	st.w	r7[-404],r10
800097fa:	ee f9 fe 74 	ld.w	r9,r7[-396]
800097fe:	ee f8 fe 70 	ld.w	r8,r7[-400]
80009802:	b1 39       	mul	r9,r8
80009804:	ee f8 fe 6c 	ld.w	r8,r7[-404]
80009808:	ee fc fe 78 	ld.w	r12,r7[-392]
8000980c:	b9 38       	mul	r8,r12
8000980e:	10 09       	add	r9,r8
80009810:	ee f8 fe 78 	ld.w	r8,r7[-392]
80009814:	ee fc fe 70 	ld.w	r12,r7[-400]
80009818:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000981c:	16 09       	add	r9,r11
8000981e:	12 9b       	mov	r11,r9
80009820:	e0 68 03 e7 	mov	r8,999
80009824:	30 09       	mov	r9,0
80009826:	10 0a       	add	r10,r8
80009828:	f6 09 00 4b 	adc	r11,r11,r9
8000982c:	e0 68 03 e8 	mov	r8,1000
80009830:	30 09       	mov	r9,0
80009832:	f0 1f 00 ae 	mcall	80009ae8 <main+0x11b8>
80009836:	14 98       	mov	r8,r10
80009838:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000983a:	ef 48 ff d8 	st.w	r7[-40],r8
8000983e:	ee c8 01 50 	sub	r8,r7,336
80009842:	ef 48 ff d4 	st.w	r7[-44],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009846:	e1 b8 00 42 	mfsr	r8,0x108
8000984a:	10 99       	mov	r9,r8
8000984c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009850:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009852:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009856:	70 09       	ld.w	r9,r8[0x0]
80009858:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000985c:	10 09       	add	r9,r8
8000985e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009862:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009864:	ee f9 ff d4 	ld.w	r9,r7[-44]
80009868:	30 08       	mov	r8,0
8000986a:	f3 68 00 08 	st.b	r9[8],r8
8000986e:	ee c8 01 50 	sub	r8,r7,336
80009872:	ef 48 ff dc 	st.w	r7[-36],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009876:	e1 b8 00 42 	mfsr	r8,0x108
8000987a:	ef 48 ff e0 	st.w	r7[-32],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000987e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009882:	f1 39 00 08 	ld.ub	r9,r8[8]
80009886:	30 28       	mov	r8,2
80009888:	f0 09 18 00 	cp.b	r9,r8
8000988c:	c0 31       	brne	80009892 <main+0xf62>
    return false;
8000988e:	30 08       	mov	r8,0
80009890:	c4 38       	rjmp	80009916 <main+0xfe6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009892:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009896:	f1 39 00 08 	ld.ub	r9,r8[8]
8000989a:	30 18       	mov	r8,1
8000989c:	f0 09 18 00 	cp.b	r9,r8
800098a0:	c0 31       	brne	800098a6 <main+0xf76>
    return true;
800098a2:	30 18       	mov	r8,1
800098a4:	c3 98       	rjmp	80009916 <main+0xfe6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800098a6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800098aa:	70 09       	ld.w	r9,r8[0x0]
800098ac:	ee f8 ff dc 	ld.w	r8,r7[-36]
800098b0:	70 18       	ld.w	r8,r8[0x4]
800098b2:	10 39       	cp.w	r9,r8
800098b4:	e0 88 00 1a 	brls	800098e8 <main+0xfb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800098b8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800098bc:	70 09       	ld.w	r9,r8[0x0]
800098be:	ee f8 ff e0 	ld.w	r8,r7[-32]
800098c2:	12 38       	cp.w	r8,r9
800098c4:	c1 02       	brcc	800098e4 <main+0xfb4>
800098c6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800098ca:	70 19       	ld.w	r9,r8[0x4]
800098cc:	ee f8 ff e0 	ld.w	r8,r7[-32]
800098d0:	12 38       	cp.w	r8,r9
800098d2:	e0 88 00 09 	brls	800098e4 <main+0xfb4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800098d6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800098da:	30 18       	mov	r8,1
800098dc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800098e0:	30 18       	mov	r8,1
800098e2:	c1 a8       	rjmp	80009916 <main+0xfe6>
    }
    return false;
800098e4:	30 08       	mov	r8,0
800098e6:	c1 88       	rjmp	80009916 <main+0xfe6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800098e8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800098ec:	70 09       	ld.w	r9,r8[0x0]
800098ee:	ee f8 ff e0 	ld.w	r8,r7[-32]
800098f2:	12 38       	cp.w	r8,r9
800098f4:	c0 93       	brcs	80009906 <main+0xfd6>
800098f6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800098fa:	70 19       	ld.w	r9,r8[0x4]
800098fc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009900:	12 38       	cp.w	r8,r9
80009902:	e0 88 00 09 	brls	80009914 <main+0xfe4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009906:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000990a:	30 18       	mov	r8,1
8000990c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009910:	30 18       	mov	r8,1
80009912:	c0 28       	rjmp	80009916 <main+0xfe6>
    }
    return false;
80009914:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80009916:	58 08       	cp.w	r8,0
80009918:	ca b0       	breq	8000986e <main+0xf3e>
				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
				switch (electroclaveState)
8000991a:	4f 18       	lddpc	r8,80009adc <main+0x11ac>
8000991c:	11 88       	ld.ub	r8,r8[0x0]
8000991e:	58 58       	cp.w	r8,5
80009920:	c0 51       	brne	8000992a <main+0xffa>
				{
					case STATE_SANITIZE:
						display_text(IDX_DIRTY);
80009922:	30 3c       	mov	r12,3
80009924:	f0 1f 00 69 	mcall	80009ac8 <main+0x1198>
						break;
80009928:	c0 48       	rjmp	80009930 <main+0x1000>
					
					default:
						display_text(IDX_CLEAN);
8000992a:	30 1c       	mov	r12,1
8000992c:	f0 1f 00 67 	mcall	80009ac8 <main+0x1198>
						break;
				}

				electroclaveState = STATE_SHUTDOWN_PROCESSES;
80009930:	4e b9       	lddpc	r9,80009adc <main+0x11ac>
80009932:	30 88       	mov	r8,8
80009934:	b2 88       	st.b	r9[0x0],r8
				print_ecdbg("Door latch opened, shutting down all processes\r\n");
80009936:	fe fc 02 22 	ld.w	r12,pc[546]
8000993a:	f0 1f 00 63 	mcall	80009ac4 <main+0x1194>
				firstTimeThrough = 0;
8000993e:	4f 09       	lddpc	r9,80009afc <main+0x11cc>
80009940:	30 08       	mov	r8,0
80009942:	b2 88       	st.b	r9[0x0],r8
80009944:	4e a8       	lddpc	r8,80009aec <main+0x11bc>
80009946:	ef 48 ff e4 	st.w	r7[-28],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000994a:	e1 b8 00 42 	mfsr	r8,0x108
8000994e:	ef 48 ff e8 	st.w	r7[-24],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009952:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009956:	f1 39 00 08 	ld.ub	r9,r8[8]
8000995a:	30 28       	mov	r8,2
8000995c:	f0 09 18 00 	cp.b	r9,r8
80009960:	c0 31       	brne	80009966 <main+0x1036>
    return false;
80009962:	30 08       	mov	r8,0
80009964:	c4 38       	rjmp	800099ea <main+0x10ba>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009966:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000996a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000996e:	30 18       	mov	r8,1
80009970:	f0 09 18 00 	cp.b	r9,r8
80009974:	c0 31       	brne	8000997a <main+0x104a>
    return true;
80009976:	30 18       	mov	r8,1
80009978:	c3 98       	rjmp	800099ea <main+0x10ba>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000997a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000997e:	70 09       	ld.w	r9,r8[0x0]
80009980:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009984:	70 18       	ld.w	r8,r8[0x4]
80009986:	10 39       	cp.w	r9,r8
80009988:	e0 88 00 1a 	brls	800099bc <main+0x108c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000998c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009990:	70 09       	ld.w	r9,r8[0x0]
80009992:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009996:	12 38       	cp.w	r8,r9
80009998:	c1 02       	brcc	800099b8 <main+0x1088>
8000999a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000999e:	70 19       	ld.w	r9,r8[0x4]
800099a0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800099a4:	12 38       	cp.w	r8,r9
800099a6:	e0 88 00 09 	brls	800099b8 <main+0x1088>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800099aa:	ee f9 ff e4 	ld.w	r9,r7[-28]
800099ae:	30 18       	mov	r8,1
800099b0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800099b4:	30 18       	mov	r8,1
800099b6:	c1 a8       	rjmp	800099ea <main+0x10ba>
    }
    return false;
800099b8:	30 08       	mov	r8,0
800099ba:	c1 88       	rjmp	800099ea <main+0x10ba>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800099bc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800099c0:	70 09       	ld.w	r9,r8[0x0]
800099c2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800099c6:	12 38       	cp.w	r8,r9
800099c8:	c0 93       	brcs	800099da <main+0x10aa>
800099ca:	ee f8 ff e4 	ld.w	r8,r7[-28]
800099ce:	70 19       	ld.w	r9,r8[0x4]
800099d0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800099d4:	12 38       	cp.w	r8,r9
800099d6:	e0 88 00 09 	brls	800099e8 <main+0x10b8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800099da:	ee f9 ff e4 	ld.w	r9,r7[-28]
800099de:	30 18       	mov	r8,1
800099e0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800099e4:	30 18       	mov	r8,1
800099e6:	c0 28       	rjmp	800099ea <main+0x10ba>
    }
    return false;
800099e8:	30 08       	mov	r8,0
				
			}
		} //if (!EC_DOOR_LATCHED)
		
		if (cpu_is_timeout(&debugTimer))
800099ea:	58 08       	cp.w	r8,0
800099ec:	fe 90 f8 1a 	breq	80008a20 <main+0xf0>
800099f0:	4b f8       	lddpc	r8,80009aec <main+0x11bc>
800099f2:	ef 48 ff ec 	st.w	r7[-20],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
800099f6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800099fa:	30 28       	mov	r8,2
800099fc:	f3 68 00 08 	st.b	r9[8],r8
80009a00:	e0 68 03 e8 	mov	r8,1000
80009a04:	ef 48 ff f4 	st.w	r7[-12],r8
80009a08:	e0 68 12 00 	mov	r8,4608
80009a0c:	ea 18 00 7a 	orh	r8,0x7a
80009a10:	ef 48 ff f0 	st.w	r7[-16],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009a14:	ee fa ff f4 	ld.w	r10,r7[-12]
80009a18:	ef 4a fe 88 	st.w	r7[-376],r10
80009a1c:	30 08       	mov	r8,0
80009a1e:	ef 48 fe 84 	st.w	r7[-380],r8
80009a22:	ee fc ff f0 	ld.w	r12,r7[-16]
80009a26:	ef 4c fe 80 	st.w	r7[-384],r12
80009a2a:	30 0a       	mov	r10,0
80009a2c:	ef 4a fe 7c 	st.w	r7[-388],r10
80009a30:	ee f9 fe 84 	ld.w	r9,r7[-380]
80009a34:	ee f8 fe 80 	ld.w	r8,r7[-384]
80009a38:	b1 39       	mul	r9,r8
80009a3a:	ee f8 fe 7c 	ld.w	r8,r7[-388]
80009a3e:	ee fc fe 88 	ld.w	r12,r7[-376]
80009a42:	b9 38       	mul	r8,r12
80009a44:	10 09       	add	r9,r8
80009a46:	ee f8 fe 88 	ld.w	r8,r7[-376]
80009a4a:	ee fc fe 80 	ld.w	r12,r7[-384]
80009a4e:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009a52:	16 09       	add	r9,r11
80009a54:	12 9b       	mov	r11,r9
80009a56:	e0 68 03 e7 	mov	r8,999
80009a5a:	30 09       	mov	r9,0
80009a5c:	10 0a       	add	r10,r8
80009a5e:	f6 09 00 4b 	adc	r11,r11,r9
80009a62:	e0 68 03 e8 	mov	r8,1000
80009a66:	30 09       	mov	r9,0
80009a68:	f0 1f 00 20 	mcall	80009ae8 <main+0x11b8>
80009a6c:	14 98       	mov	r8,r10
80009a6e:	16 99       	mov	r9,r11
		{
			cpu_stop_timeout(&debugTimer);
			cpu_set_timeout((EC_ONE_SECOND/2), &debugTimer);
80009a70:	a1 98       	lsr	r8,0x1
80009a72:	ef 48 ff fc 	st.w	r7[-4],r8
80009a76:	49 e8       	lddpc	r8,80009aec <main+0x11bc>
80009a78:	ef 48 ff f8 	st.w	r7[-8],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009a7c:	e1 b8 00 42 	mfsr	r8,0x108
80009a80:	10 99       	mov	r9,r8
80009a82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a86:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009a88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a8c:	70 09       	ld.w	r9,r8[0x0]
80009a8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a92:	10 09       	add	r9,r8
80009a94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a98:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009a9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009a9e:	30 08       	mov	r8,0
80009aa0:	f3 68 00 08 	st.b	r9[8],r8
			gpio_toggle_pin(ECLAVE_DEBUG_LED);
80009aa4:	37 cc       	mov	r12,124
80009aa6:	f0 1f 00 2e 	mcall	80009b5c <main+0x122c>
		}
	} //while(true)
80009aaa:	fe 9f f7 bc 	bral	80008a22 <main+0xf2>
80009aae:	00 00       	add	r0,r0
80009ab0:	80 00       	ld.sh	r0,r0[0x0]
80009ab2:	6f e8       	ld.w	r8,r7[0x78]
80009ab4:	80 00       	ld.sh	r0,r0[0x0]
80009ab6:	66 e0       	ld.w	r0,r3[0x38]
80009ab8:	80 00       	ld.sh	r0,r0[0x0]
80009aba:	31 c0       	mov	r0,28
80009abc:	80 00       	ld.sh	r0,r0[0x0]
80009abe:	31 e4       	mov	r4,30
80009ac0:	80 00       	ld.sh	r0,r0[0x0]
80009ac2:	62 fc       	ld.w	r12,r1[0x3c]
80009ac4:	80 00       	ld.sh	r0,r0[0x0]
80009ac6:	32 c0       	mov	r0,44
80009ac8:	80 00       	ld.sh	r0,r0[0x0]
80009aca:	66 74       	ld.w	r4,r3[0x1c]
80009acc:	80 00       	ld.sh	r0,r0[0x0]
80009ace:	70 48       	ld.w	r8,r8[0x10]
80009ad0:	80 00       	ld.sh	r0,r0[0x0]
80009ad2:	4b c4       	lddpc	r4,80009bc0 <__avr32_f64_mul+0x60>
80009ad4:	80 00       	ld.sh	r0,r0[0x0]
80009ad6:	70 94       	ld.w	r4,r8[0x24]
80009ad8:	80 00       	ld.sh	r0,r0[0x0]
80009ada:	4a 8a       	lddpc	r10,80009b78 <__avr32_f64_mul+0x18>
80009adc:	00 00       	add	r0,r0
80009ade:	0b 4c       	ld.w	r12,--r5
80009ae0:	80 00       	ld.sh	r0,r0[0x0]
80009ae2:	86 34       	ld.sh	r4,r3[0x6]
80009ae4:	80 00       	ld.sh	r0,r0[0x0]
80009ae6:	4a c4       	lddpc	r4,80009b94 <__avr32_f64_mul+0x34>
80009ae8:	80 00       	ld.sh	r0,r0[0x0]
80009aea:	a2 b6       	st.b	r1[0x3],r6
80009aec:	00 00       	add	r0,r0
80009aee:	03 7c       	ld.ub	r12,--r1
80009af0:	80 00       	ld.sh	r0,r0[0x0]
80009af2:	ab d8       	cbr	r8,0xb
80009af4:	80 00       	ld.sh	r0,r0[0x0]
80009af6:	4a 4e       	lddpc	lr,80009b84 <__avr32_f64_mul+0x24>
80009af8:	80 00       	ld.sh	r0,r0[0x0]
80009afa:	63 48       	ld.w	r8,r1[0x50]
80009afc:	00 00       	add	r0,r0
80009afe:	00 b0       	st.h	r0++,r0
80009b00:	80 00       	ld.sh	r0,r0[0x0]
80009b02:	63 60       	ld.w	r0,r1[0x58]
80009b04:	80 00       	ld.sh	r0,r0[0x0]
80009b06:	63 84       	ld.w	r4,r1[0x60]
80009b08:	80 00       	ld.sh	r0,r0[0x0]
80009b0a:	6b 2c       	ld.w	r12,r5[0x48]
80009b0c:	80 00       	ld.sh	r0,r0[0x0]
80009b0e:	6e 00       	ld.w	r0,r7[0x0]
80009b10:	80 00       	ld.sh	r0,r0[0x0]
80009b12:	6e 74       	ld.w	r4,r7[0x1c]
80009b14:	80 00       	ld.sh	r0,r0[0x0]
80009b16:	6f d4       	ld.w	r4,r7[0x74]
80009b18:	80 00       	ld.sh	r0,r0[0x0]
80009b1a:	63 ac       	ld.w	r12,r1[0x68]
80009b1c:	80 00       	ld.sh	r0,r0[0x0]
80009b1e:	63 c0       	ld.w	r0,r1[0x70]
80009b20:	00 00       	add	r0,r0
80009b22:	02 b0       	st.h	r1++,r0
80009b24:	00 00       	add	r0,r0
80009b26:	03 5c       	ld.sh	r12,--r1
80009b28:	00 00       	add	r0,r0
80009b2a:	03 3a       	ld.ub	r10,r1++
80009b2c:	80 00       	ld.sh	r0,r0[0x0]
80009b2e:	71 14       	ld.w	r4,r8[0x44]
80009b30:	00 00       	add	r0,r0
80009b32:	03 64       	ld.uh	r4,--r1
80009b34:	80 00       	ld.sh	r0,r0[0x0]
80009b36:	61 54       	ld.w	r4,r0[0x54]
80009b38:	00 00       	add	r0,r0
80009b3a:	02 e0       	st.h	--r1,r0
80009b3c:	00 00       	add	r0,r0
80009b3e:	0b 0c       	ld.w	r12,r5++
80009b40:	00 00       	add	r0,r0
80009b42:	03 50       	ld.sh	r0,--r1
80009b44:	00 00       	add	r0,r0
80009b46:	0b 50       	ld.sh	r0,--r5
80009b48:	80 00       	ld.sh	r0,r0[0x0]
80009b4a:	7f 50       	ld.w	r0,pc[0x54]
80009b4c:	80 00       	ld.sh	r0,r0[0x0]
80009b4e:	64 08       	ld.w	r8,r2[0x0]
80009b50:	00 00       	add	r0,r0
80009b52:	0b 18       	ld.sh	r8,r5++
80009b54:	80 00       	ld.sh	r0,r0[0x0]
80009b56:	71 e4       	ld.w	r4,r8[0x78]
80009b58:	80 00       	ld.sh	r0,r0[0x0]
80009b5a:	64 18       	ld.w	r8,r2[0x4]
80009b5c:	80 00       	ld.sh	r0,r0[0x0]
80009b5e:	4a fe       	lddpc	lr,80009c18 <__avr32_f64_mul_op1_subnormal+0x1e>

80009b60 <__avr32_f64_mul>:
80009b60:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80009b64:	e0 80 00 dc 	breq	80009d1c <__avr32_f64_mul_op1_zero>
80009b68:	d4 21       	pushm	r4-r7,lr
80009b6a:	f7 e9 20 0e 	eor	lr,r11,r9
80009b6e:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80009b72:	30 15       	mov	r5,1
80009b74:	c4 30       	breq	80009bfa <__avr32_f64_mul_op1_subnormal>
80009b76:	ab 6b       	lsl	r11,0xa
80009b78:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80009b7c:	ab 6a       	lsl	r10,0xa
80009b7e:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80009b82:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80009b86:	c5 c0       	breq	80009c3e <__avr32_f64_mul_op2_subnormal>
80009b88:	a1 78       	lsl	r8,0x1
80009b8a:	5c f9       	rol	r9
80009b8c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80009b90:	e0 47 07 ff 	cp.w	r7,2047
80009b94:	c7 70       	breq	80009c82 <__avr32_f64_mul_op_nan_or_inf>
80009b96:	e0 46 07 ff 	cp.w	r6,2047
80009b9a:	c7 40       	breq	80009c82 <__avr32_f64_mul_op_nan_or_inf>
80009b9c:	ee 06 00 0c 	add	r12,r7,r6
80009ba0:	e0 2c 03 fe 	sub	r12,1022
80009ba4:	f6 08 06 44 	mulu.d	r4,r11,r8
80009ba8:	f4 09 07 44 	macu.d	r4,r10,r9
80009bac:	f4 08 06 46 	mulu.d	r6,r10,r8
80009bb0:	f6 09 06 4a 	mulu.d	r10,r11,r9
80009bb4:	08 07       	add	r7,r4
80009bb6:	f4 05 00 4a 	adc	r10,r10,r5
80009bba:	5c 0b       	acr	r11
80009bbc:	ed bb 00 14 	bld	r11,0x14
80009bc0:	c0 50       	breq	80009bca <__avr32_f64_mul+0x6a>
80009bc2:	a1 77       	lsl	r7,0x1
80009bc4:	5c fa       	rol	r10
80009bc6:	5c fb       	rol	r11
80009bc8:	20 1c       	sub	r12,1
80009bca:	58 0c       	cp.w	r12,0
80009bcc:	e0 8a 00 6f 	brle	80009caa <__avr32_f64_mul_res_subnormal>
80009bd0:	e0 4c 07 ff 	cp.w	r12,2047
80009bd4:	e0 84 00 9c 	brge	80009d0c <__avr32_f64_mul_res_inf>
80009bd8:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80009bdc:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80009be0:	ef e6 12 17 	or	r7,r7,r6>>0x1
80009be4:	ee 17 80 00 	eorh	r7,0x8000
80009be8:	f1 b7 04 20 	satu	r7,0x1
80009bec:	0e 0a       	add	r10,r7
80009bee:	5c 0b       	acr	r11
80009bf0:	ed be 00 1f 	bld	lr,0x1f
80009bf4:	ef bb 00 1f 	bst	r11,0x1f
80009bf8:	d8 22       	popm	r4-r7,pc

80009bfa <__avr32_f64_mul_op1_subnormal>:
80009bfa:	e4 1b 00 0f 	andh	r11,0xf
80009bfe:	f4 0c 12 00 	clz	r12,r10
80009c02:	f6 06 12 00 	clz	r6,r11
80009c06:	f7 bc 03 e1 	sublo	r12,-31
80009c0a:	f8 06 17 30 	movlo	r6,r12
80009c0e:	f7 b6 02 01 	subhs	r6,1
80009c12:	e0 46 00 20 	cp.w	r6,32
80009c16:	c0 d4       	brge	80009c30 <__avr32_f64_mul_op1_subnormal+0x36>
80009c18:	ec 0c 11 20 	rsub	r12,r6,32
80009c1c:	f6 06 09 4b 	lsl	r11,r11,r6
80009c20:	f4 0c 0a 4c 	lsr	r12,r10,r12
80009c24:	18 4b       	or	r11,r12
80009c26:	f4 06 09 4a 	lsl	r10,r10,r6
80009c2a:	20 b6       	sub	r6,11
80009c2c:	0c 17       	sub	r7,r6
80009c2e:	ca ab       	rjmp	80009b82 <__avr32_f64_mul+0x22>
80009c30:	f4 06 09 4b 	lsl	r11,r10,r6
80009c34:	c6 40       	breq	80009cfc <__avr32_f64_mul_res_zero>
80009c36:	30 0a       	mov	r10,0
80009c38:	20 b6       	sub	r6,11
80009c3a:	0c 17       	sub	r7,r6
80009c3c:	ca 3b       	rjmp	80009b82 <__avr32_f64_mul+0x22>

80009c3e <__avr32_f64_mul_op2_subnormal>:
80009c3e:	e4 19 00 0f 	andh	r9,0xf
80009c42:	f0 0c 12 00 	clz	r12,r8
80009c46:	f2 05 12 00 	clz	r5,r9
80009c4a:	f7 bc 03 ea 	sublo	r12,-22
80009c4e:	f8 05 17 30 	movlo	r5,r12
80009c52:	f7 b5 02 0a 	subhs	r5,10
80009c56:	e0 45 00 20 	cp.w	r5,32
80009c5a:	c0 d4       	brge	80009c74 <__avr32_f64_mul_op2_subnormal+0x36>
80009c5c:	ea 0c 11 20 	rsub	r12,r5,32
80009c60:	f2 05 09 49 	lsl	r9,r9,r5
80009c64:	f0 0c 0a 4c 	lsr	r12,r8,r12
80009c68:	18 49       	or	r9,r12
80009c6a:	f0 05 09 48 	lsl	r8,r8,r5
80009c6e:	20 25       	sub	r5,2
80009c70:	0a 16       	sub	r6,r5
80009c72:	c8 fb       	rjmp	80009b90 <__avr32_f64_mul+0x30>
80009c74:	f0 05 09 49 	lsl	r9,r8,r5
80009c78:	c4 20       	breq	80009cfc <__avr32_f64_mul_res_zero>
80009c7a:	30 08       	mov	r8,0
80009c7c:	20 25       	sub	r5,2
80009c7e:	0a 16       	sub	r6,r5
80009c80:	c8 8b       	rjmp	80009b90 <__avr32_f64_mul+0x30>

80009c82 <__avr32_f64_mul_op_nan_or_inf>:
80009c82:	e4 19 00 0f 	andh	r9,0xf
80009c86:	e4 1b 00 0f 	andh	r11,0xf
80009c8a:	14 4b       	or	r11,r10
80009c8c:	10 49       	or	r9,r8
80009c8e:	e0 47 07 ff 	cp.w	r7,2047
80009c92:	c0 91       	brne	80009ca4 <__avr32_f64_mul_op1_not_naninf>
80009c94:	58 0b       	cp.w	r11,0
80009c96:	c3 81       	brne	80009d06 <__avr32_f64_mul_res_nan>
80009c98:	e0 46 07 ff 	cp.w	r6,2047
80009c9c:	c3 81       	brne	80009d0c <__avr32_f64_mul_res_inf>
80009c9e:	58 09       	cp.w	r9,0
80009ca0:	c3 60       	breq	80009d0c <__avr32_f64_mul_res_inf>
80009ca2:	c3 28       	rjmp	80009d06 <__avr32_f64_mul_res_nan>

80009ca4 <__avr32_f64_mul_op1_not_naninf>:
80009ca4:	58 09       	cp.w	r9,0
80009ca6:	c3 30       	breq	80009d0c <__avr32_f64_mul_res_inf>
80009ca8:	c2 f8       	rjmp	80009d06 <__avr32_f64_mul_res_nan>

80009caa <__avr32_f64_mul_res_subnormal>:
80009caa:	5c 3c       	neg	r12
80009cac:	2f fc       	sub	r12,-1
80009cae:	f1 bc 04 c0 	satu	r12,0x6
80009cb2:	e0 4c 00 20 	cp.w	r12,32
80009cb6:	c1 14       	brge	80009cd8 <__avr32_f64_mul_res_subnormal+0x2e>
80009cb8:	f8 08 11 20 	rsub	r8,r12,32
80009cbc:	0e 46       	or	r6,r7
80009cbe:	ee 0c 0a 47 	lsr	r7,r7,r12
80009cc2:	f4 08 09 49 	lsl	r9,r10,r8
80009cc6:	12 47       	or	r7,r9
80009cc8:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009ccc:	f6 08 09 49 	lsl	r9,r11,r8
80009cd0:	12 4a       	or	r10,r9
80009cd2:	f6 0c 0a 4b 	lsr	r11,r11,r12
80009cd6:	c8 3b       	rjmp	80009bdc <__avr32_f64_mul+0x7c>
80009cd8:	f8 08 11 20 	rsub	r8,r12,32
80009cdc:	f9 b9 00 00 	moveq	r9,0
80009ce0:	c0 30       	breq	80009ce6 <__avr32_f64_mul_res_subnormal+0x3c>
80009ce2:	f6 08 09 49 	lsl	r9,r11,r8
80009ce6:	0e 46       	or	r6,r7
80009ce8:	ed ea 10 16 	or	r6,r6,r10<<0x1
80009cec:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009cf0:	f3 ea 10 07 	or	r7,r9,r10
80009cf4:	f6 0c 0a 4a 	lsr	r10,r11,r12
80009cf8:	30 0b       	mov	r11,0
80009cfa:	c7 1b       	rjmp	80009bdc <__avr32_f64_mul+0x7c>

80009cfc <__avr32_f64_mul_res_zero>:
80009cfc:	1c 9b       	mov	r11,lr
80009cfe:	e6 1b 80 00 	andh	r11,0x8000,COH
80009d02:	30 0a       	mov	r10,0
80009d04:	d8 22       	popm	r4-r7,pc

80009d06 <__avr32_f64_mul_res_nan>:
80009d06:	3f fb       	mov	r11,-1
80009d08:	3f fa       	mov	r10,-1
80009d0a:	d8 22       	popm	r4-r7,pc

80009d0c <__avr32_f64_mul_res_inf>:
80009d0c:	f0 6b 00 00 	mov	r11,-1048576
80009d10:	ed be 00 1f 	bld	lr,0x1f
80009d14:	ef bb 00 1f 	bst	r11,0x1f
80009d18:	30 0a       	mov	r10,0
80009d1a:	d8 22       	popm	r4-r7,pc

80009d1c <__avr32_f64_mul_op1_zero>:
80009d1c:	f7 e9 20 0b 	eor	r11,r11,r9
80009d20:	e6 1b 80 00 	andh	r11,0x8000,COH
80009d24:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80009d28:	e0 4c 07 ff 	cp.w	r12,2047
80009d2c:	5e 1c       	retne	r12
80009d2e:	3f fa       	mov	r10,-1
80009d30:	3f fb       	mov	r11,-1
80009d32:	5e fc       	retal	r12

80009d34 <__avr32_f64_sub_from_add>:
80009d34:	ee 19 80 00 	eorh	r9,0x8000

80009d38 <__avr32_f64_sub>:
80009d38:	f7 e9 20 0c 	eor	r12,r11,r9
80009d3c:	e0 86 00 ca 	brmi	80009ed0 <__avr32_f64_add_from_sub>
80009d40:	eb cd 40 e0 	pushm	r5-r7,lr
80009d44:	16 9c       	mov	r12,r11
80009d46:	e6 1c 80 00 	andh	r12,0x8000,COH
80009d4a:	bf db       	cbr	r11,0x1f
80009d4c:	bf d9       	cbr	r9,0x1f
80009d4e:	10 3a       	cp.w	r10,r8
80009d50:	f2 0b 13 00 	cpc	r11,r9
80009d54:	c0 92       	brcc	80009d66 <__avr32_f64_sub+0x2e>
80009d56:	16 97       	mov	r7,r11
80009d58:	12 9b       	mov	r11,r9
80009d5a:	0e 99       	mov	r9,r7
80009d5c:	14 97       	mov	r7,r10
80009d5e:	10 9a       	mov	r10,r8
80009d60:	0e 98       	mov	r8,r7
80009d62:	ee 1c 80 00 	eorh	r12,0x8000
80009d66:	f6 07 16 14 	lsr	r7,r11,0x14
80009d6a:	ab 7b       	lsl	r11,0xb
80009d6c:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80009d70:	ab 7a       	lsl	r10,0xb
80009d72:	bf bb       	sbr	r11,0x1f
80009d74:	f2 06 16 14 	lsr	r6,r9,0x14
80009d78:	c4 40       	breq	80009e00 <__avr32_f64_sub_opL_subnormal>
80009d7a:	ab 79       	lsl	r9,0xb
80009d7c:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009d80:	ab 78       	lsl	r8,0xb
80009d82:	bf b9       	sbr	r9,0x1f

80009d84 <__avr32_f64_sub_opL_subnormal_done>:
80009d84:	e0 47 07 ff 	cp.w	r7,2047
80009d88:	c4 f0       	breq	80009e26 <__avr32_f64_sub_opH_nan_or_inf>
80009d8a:	0e 26       	rsub	r6,r7
80009d8c:	c1 20       	breq	80009db0 <__avr32_f64_sub_shift_done>
80009d8e:	ec 05 11 20 	rsub	r5,r6,32
80009d92:	e0 46 00 20 	cp.w	r6,32
80009d96:	c7 c2       	brcc	80009e8e <__avr32_f64_sub_longshift>
80009d98:	f0 05 09 4e 	lsl	lr,r8,r5
80009d9c:	f2 05 09 45 	lsl	r5,r9,r5
80009da0:	f0 06 0a 48 	lsr	r8,r8,r6
80009da4:	f2 06 0a 49 	lsr	r9,r9,r6
80009da8:	0a 48       	or	r8,r5
80009daa:	58 0e       	cp.w	lr,0
80009dac:	5f 1e       	srne	lr
80009dae:	1c 48       	or	r8,lr

80009db0 <__avr32_f64_sub_shift_done>:
80009db0:	10 1a       	sub	r10,r8
80009db2:	f6 09 01 4b 	sbc	r11,r11,r9
80009db6:	f6 06 12 00 	clz	r6,r11
80009dba:	c0 e0       	breq	80009dd6 <__avr32_f64_sub_longnormalize_done>
80009dbc:	c7 83       	brcs	80009eac <__avr32_f64_sub_longnormalize>
80009dbe:	ec 0e 11 20 	rsub	lr,r6,32
80009dc2:	f6 06 09 4b 	lsl	r11,r11,r6
80009dc6:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009dca:	1c 4b       	or	r11,lr
80009dcc:	f4 06 09 4a 	lsl	r10,r10,r6
80009dd0:	0c 17       	sub	r7,r6
80009dd2:	e0 8a 00 39 	brle	80009e44 <__avr32_f64_sub_subnormal_result>

80009dd6 <__avr32_f64_sub_longnormalize_done>:
80009dd6:	f4 09 15 15 	lsl	r9,r10,0x15
80009dda:	ab 9a       	lsr	r10,0xb
80009ddc:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80009de0:	ab 9b       	lsr	r11,0xb
80009de2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009de6:	18 4b       	or	r11,r12

80009de8 <__avr32_f64_sub_round>:
80009de8:	fc 17 80 00 	movh	r7,0x8000
80009dec:	ed ba 00 00 	bld	r10,0x0
80009df0:	f7 b7 01 ff 	subne	r7,-1
80009df4:	0e 39       	cp.w	r9,r7
80009df6:	5f 29       	srhs	r9
80009df8:	12 0a       	add	r10,r9
80009dfa:	5c 0b       	acr	r11
80009dfc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009e00 <__avr32_f64_sub_opL_subnormal>:
80009e00:	ab 79       	lsl	r9,0xb
80009e02:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009e06:	ab 78       	lsl	r8,0xb
80009e08:	f3 e8 10 0e 	or	lr,r9,r8
80009e0c:	f9 b6 01 01 	movne	r6,1
80009e10:	ee 0e 11 00 	rsub	lr,r7,0
80009e14:	f9 b7 00 01 	moveq	r7,1
80009e18:	ef bb 00 1f 	bst	r11,0x1f
80009e1c:	f7 ea 10 0e 	or	lr,r11,r10
80009e20:	f9 b7 00 00 	moveq	r7,0
80009e24:	cb 0b       	rjmp	80009d84 <__avr32_f64_sub_opL_subnormal_done>

80009e26 <__avr32_f64_sub_opH_nan_or_inf>:
80009e26:	bf db       	cbr	r11,0x1f
80009e28:	f7 ea 10 0e 	or	lr,r11,r10
80009e2c:	c0 81       	brne	80009e3c <__avr32_f64_sub_return_nan>
80009e2e:	e0 46 07 ff 	cp.w	r6,2047
80009e32:	c0 50       	breq	80009e3c <__avr32_f64_sub_return_nan>
80009e34:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80009e38:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009e3c <__avr32_f64_sub_return_nan>:
80009e3c:	3f fa       	mov	r10,-1
80009e3e:	3f fb       	mov	r11,-1
80009e40:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009e44 <__avr32_f64_sub_subnormal_result>:
80009e44:	5c 37       	neg	r7
80009e46:	2f f7       	sub	r7,-1
80009e48:	f1 b7 04 c0 	satu	r7,0x6
80009e4c:	e0 47 00 20 	cp.w	r7,32
80009e50:	c1 14       	brge	80009e72 <__avr32_f64_sub_subnormal_result+0x2e>
80009e52:	ee 08 11 20 	rsub	r8,r7,32
80009e56:	f4 08 09 49 	lsl	r9,r10,r8
80009e5a:	5f 16       	srne	r6
80009e5c:	f4 07 0a 4a 	lsr	r10,r10,r7
80009e60:	0c 4a       	or	r10,r6
80009e62:	f6 08 09 49 	lsl	r9,r11,r8
80009e66:	f5 e9 10 0a 	or	r10,r10,r9
80009e6a:	f4 07 0a 4b 	lsr	r11,r10,r7
80009e6e:	30 07       	mov	r7,0
80009e70:	cb 3b       	rjmp	80009dd6 <__avr32_f64_sub_longnormalize_done>
80009e72:	ee 08 11 40 	rsub	r8,r7,64
80009e76:	f6 08 09 49 	lsl	r9,r11,r8
80009e7a:	14 49       	or	r9,r10
80009e7c:	5f 16       	srne	r6
80009e7e:	f6 07 0a 4a 	lsr	r10,r11,r7
80009e82:	0c 4a       	or	r10,r6
80009e84:	30 0b       	mov	r11,0
80009e86:	30 07       	mov	r7,0
80009e88:	ca 7b       	rjmp	80009dd6 <__avr32_f64_sub_longnormalize_done>
80009e8a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009e8e <__avr32_f64_sub_longshift>:
80009e8e:	f1 b6 04 c0 	satu	r6,0x6
80009e92:	f0 0e 17 00 	moveq	lr,r8
80009e96:	c0 40       	breq	80009e9e <__avr32_f64_sub_longshift+0x10>
80009e98:	f2 05 09 4e 	lsl	lr,r9,r5
80009e9c:	10 4e       	or	lr,r8
80009e9e:	f2 06 0a 48 	lsr	r8,r9,r6
80009ea2:	30 09       	mov	r9,0
80009ea4:	58 0e       	cp.w	lr,0
80009ea6:	5f 1e       	srne	lr
80009ea8:	1c 48       	or	r8,lr
80009eaa:	c8 3b       	rjmp	80009db0 <__avr32_f64_sub_shift_done>

80009eac <__avr32_f64_sub_longnormalize>:
80009eac:	f4 06 12 00 	clz	r6,r10
80009eb0:	f9 b7 03 00 	movlo	r7,0
80009eb4:	f9 b6 03 00 	movlo	r6,0
80009eb8:	f9 bc 03 00 	movlo	r12,0
80009ebc:	f7 b6 02 e0 	subhs	r6,-32
80009ec0:	f4 06 09 4b 	lsl	r11,r10,r6
80009ec4:	30 0a       	mov	r10,0
80009ec6:	0c 17       	sub	r7,r6
80009ec8:	fe 9a ff be 	brle	80009e44 <__avr32_f64_sub_subnormal_result>
80009ecc:	c8 5b       	rjmp	80009dd6 <__avr32_f64_sub_longnormalize_done>
	...

80009ed0 <__avr32_f64_add_from_sub>:
80009ed0:	ee 19 80 00 	eorh	r9,0x8000

80009ed4 <__avr32_f64_add>:
80009ed4:	f7 e9 20 0c 	eor	r12,r11,r9
80009ed8:	fe 96 ff 2e 	brmi	80009d34 <__avr32_f64_sub_from_add>
80009edc:	eb cd 40 e0 	pushm	r5-r7,lr
80009ee0:	16 9c       	mov	r12,r11
80009ee2:	e6 1c 80 00 	andh	r12,0x8000,COH
80009ee6:	bf db       	cbr	r11,0x1f
80009ee8:	bf d9       	cbr	r9,0x1f
80009eea:	12 3b       	cp.w	r11,r9
80009eec:	c0 72       	brcc	80009efa <__avr32_f64_add+0x26>
80009eee:	16 97       	mov	r7,r11
80009ef0:	12 9b       	mov	r11,r9
80009ef2:	0e 99       	mov	r9,r7
80009ef4:	14 97       	mov	r7,r10
80009ef6:	10 9a       	mov	r10,r8
80009ef8:	0e 98       	mov	r8,r7
80009efa:	30 0e       	mov	lr,0
80009efc:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80009f00:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80009f04:	b5 ab       	sbr	r11,0x14
80009f06:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80009f0a:	c6 20       	breq	80009fce <__avr32_f64_add_op2_subnormal>
80009f0c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80009f10:	b5 a9       	sbr	r9,0x14
80009f12:	e0 47 07 ff 	cp.w	r7,2047
80009f16:	c2 80       	breq	80009f66 <__avr32_f64_add_opH_nan_or_inf>
80009f18:	0e 26       	rsub	r6,r7
80009f1a:	c1 20       	breq	80009f3e <__avr32_f64_add_shift_done>
80009f1c:	e0 46 00 36 	cp.w	r6,54
80009f20:	c1 52       	brcc	80009f4a <__avr32_f64_add_res_of_done>
80009f22:	ec 05 11 20 	rsub	r5,r6,32
80009f26:	e0 46 00 20 	cp.w	r6,32
80009f2a:	c3 52       	brcc	80009f94 <__avr32_f64_add_longshift>
80009f2c:	f0 05 09 4e 	lsl	lr,r8,r5
80009f30:	f2 05 09 45 	lsl	r5,r9,r5
80009f34:	f0 06 0a 48 	lsr	r8,r8,r6
80009f38:	f2 06 0a 49 	lsr	r9,r9,r6
80009f3c:	0a 48       	or	r8,r5

80009f3e <__avr32_f64_add_shift_done>:
80009f3e:	10 0a       	add	r10,r8
80009f40:	f6 09 00 4b 	adc	r11,r11,r9
80009f44:	ed bb 00 15 	bld	r11,0x15
80009f48:	c3 40       	breq	80009fb0 <__avr32_f64_add_res_of>

80009f4a <__avr32_f64_add_res_of_done>:
80009f4a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009f4e:	18 4b       	or	r11,r12

80009f50 <__avr32_f64_add_round>:
80009f50:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80009f54:	18 4e       	or	lr,r12
80009f56:	ee 1e 80 00 	eorh	lr,0x8000
80009f5a:	f1 be 04 20 	satu	lr,0x1
80009f5e:	1c 0a       	add	r10,lr
80009f60:	5c 0b       	acr	r11
80009f62:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009f66 <__avr32_f64_add_opH_nan_or_inf>:
80009f66:	b5 cb       	cbr	r11,0x14
80009f68:	f7 ea 10 0e 	or	lr,r11,r10
80009f6c:	c1 01       	brne	80009f8c <__avr32_f64_add_return_nan>
80009f6e:	e0 46 07 ff 	cp.w	r6,2047
80009f72:	c0 30       	breq	80009f78 <__avr32_f64_add_opL_nan_or_inf>
80009f74:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009f78 <__avr32_f64_add_opL_nan_or_inf>:
80009f78:	b5 c9       	cbr	r9,0x14
80009f7a:	f3 e8 10 0e 	or	lr,r9,r8
80009f7e:	c0 71       	brne	80009f8c <__avr32_f64_add_return_nan>
80009f80:	30 0a       	mov	r10,0
80009f82:	fc 1b 7f f0 	movh	r11,0x7ff0
80009f86:	18 4b       	or	r11,r12
80009f88:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009f8c <__avr32_f64_add_return_nan>:
80009f8c:	3f fa       	mov	r10,-1
80009f8e:	3f fb       	mov	r11,-1
80009f90:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009f94 <__avr32_f64_add_longshift>:
80009f94:	f1 b6 04 c0 	satu	r6,0x6
80009f98:	f0 0e 17 00 	moveq	lr,r8
80009f9c:	c0 60       	breq	80009fa8 <__avr32_f64_add_longshift+0x14>
80009f9e:	f2 05 09 4e 	lsl	lr,r9,r5
80009fa2:	58 08       	cp.w	r8,0
80009fa4:	5f 18       	srne	r8
80009fa6:	10 4e       	or	lr,r8
80009fa8:	f2 06 0a 48 	lsr	r8,r9,r6
80009fac:	30 09       	mov	r9,0
80009fae:	cc 8b       	rjmp	80009f3e <__avr32_f64_add_shift_done>

80009fb0 <__avr32_f64_add_res_of>:
80009fb0:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80009fb4:	a1 9b       	lsr	r11,0x1
80009fb6:	5d 0a       	ror	r10
80009fb8:	5d 0e       	ror	lr
80009fba:	2f f7       	sub	r7,-1
80009fbc:	e0 47 07 ff 	cp.w	r7,2047
80009fc0:	f9 ba 00 00 	moveq	r10,0
80009fc4:	f9 bb 00 00 	moveq	r11,0
80009fc8:	f9 be 00 00 	moveq	lr,0
80009fcc:	cb fb       	rjmp	80009f4a <__avr32_f64_add_res_of_done>

80009fce <__avr32_f64_add_op2_subnormal>:
80009fce:	30 16       	mov	r6,1
80009fd0:	58 07       	cp.w	r7,0
80009fd2:	ca 01       	brne	80009f12 <__avr32_f64_add+0x3e>
80009fd4:	b5 cb       	cbr	r11,0x14
80009fd6:	10 0a       	add	r10,r8
80009fd8:	f6 09 00 4b 	adc	r11,r11,r9
80009fdc:	18 4b       	or	r11,r12
80009fde:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	...

80009fe4 <__avr32_u32_to_f64>:
80009fe4:	f8 cb 00 00 	sub	r11,r12,0
80009fe8:	30 0c       	mov	r12,0
80009fea:	c0 38       	rjmp	80009ff0 <__avr32_s32_to_f64+0x4>

80009fec <__avr32_s32_to_f64>:
80009fec:	18 9b       	mov	r11,r12
80009fee:	5c 4b       	abs	r11
80009ff0:	30 0a       	mov	r10,0
80009ff2:	5e 0b       	reteq	r11
80009ff4:	d4 01       	pushm	lr
80009ff6:	e0 69 04 1e 	mov	r9,1054
80009ffa:	f6 08 12 00 	clz	r8,r11
80009ffe:	c1 70       	breq	8000a02c <__avr32_s32_to_f64+0x40>
8000a000:	c0 c3       	brcs	8000a018 <__avr32_s32_to_f64+0x2c>
8000a002:	f0 0e 11 20 	rsub	lr,r8,32
8000a006:	f6 08 09 4b 	lsl	r11,r11,r8
8000a00a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a00e:	1c 4b       	or	r11,lr
8000a010:	f4 08 09 4a 	lsl	r10,r10,r8
8000a014:	10 19       	sub	r9,r8
8000a016:	c0 b8       	rjmp	8000a02c <__avr32_s32_to_f64+0x40>
8000a018:	f4 08 12 00 	clz	r8,r10
8000a01c:	f9 b8 03 00 	movlo	r8,0
8000a020:	f7 b8 02 e0 	subhs	r8,-32
8000a024:	f4 08 09 4b 	lsl	r11,r10,r8
8000a028:	30 0a       	mov	r10,0
8000a02a:	10 19       	sub	r9,r8
8000a02c:	58 09       	cp.w	r9,0
8000a02e:	e0 89 00 30 	brgt	8000a08e <__avr32_s32_to_f64+0xa2>
8000a032:	5c 39       	neg	r9
8000a034:	2f f9       	sub	r9,-1
8000a036:	e0 49 00 36 	cp.w	r9,54
8000a03a:	c0 43       	brcs	8000a042 <__avr32_s32_to_f64+0x56>
8000a03c:	30 0b       	mov	r11,0
8000a03e:	30 0a       	mov	r10,0
8000a040:	c2 68       	rjmp	8000a08c <__avr32_s32_to_f64+0xa0>
8000a042:	2f 69       	sub	r9,-10
8000a044:	f2 08 11 20 	rsub	r8,r9,32
8000a048:	e0 49 00 20 	cp.w	r9,32
8000a04c:	c0 b2       	brcc	8000a062 <__avr32_s32_to_f64+0x76>
8000a04e:	f4 08 09 4e 	lsl	lr,r10,r8
8000a052:	f6 08 09 48 	lsl	r8,r11,r8
8000a056:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a05a:	f6 09 0a 4b 	lsr	r11,r11,r9
8000a05e:	10 4b       	or	r11,r8
8000a060:	c0 88       	rjmp	8000a070 <__avr32_s32_to_f64+0x84>
8000a062:	f6 08 09 4e 	lsl	lr,r11,r8
8000a066:	14 4e       	or	lr,r10
8000a068:	16 9a       	mov	r10,r11
8000a06a:	30 0b       	mov	r11,0
8000a06c:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a070:	ed ba 00 00 	bld	r10,0x0
8000a074:	c0 92       	brcc	8000a086 <__avr32_s32_to_f64+0x9a>
8000a076:	1c 7e       	tst	lr,lr
8000a078:	c0 41       	brne	8000a080 <__avr32_s32_to_f64+0x94>
8000a07a:	ed ba 00 01 	bld	r10,0x1
8000a07e:	c0 42       	brcc	8000a086 <__avr32_s32_to_f64+0x9a>
8000a080:	2f fa       	sub	r10,-1
8000a082:	f7 bb 02 ff 	subhs	r11,-1
8000a086:	5c fc       	rol	r12
8000a088:	5d 0b       	ror	r11
8000a08a:	5d 0a       	ror	r10
8000a08c:	d8 02       	popm	pc
8000a08e:	e0 68 03 ff 	mov	r8,1023
8000a092:	ed ba 00 0b 	bld	r10,0xb
8000a096:	f7 b8 00 ff 	subeq	r8,-1
8000a09a:	10 0a       	add	r10,r8
8000a09c:	5c 0b       	acr	r11
8000a09e:	f7 b9 03 fe 	sublo	r9,-2
8000a0a2:	e0 49 07 ff 	cp.w	r9,2047
8000a0a6:	c0 55       	brlt	8000a0b0 <__avr32_s32_to_f64+0xc4>
8000a0a8:	30 0a       	mov	r10,0
8000a0aa:	fc 1b ff e0 	movh	r11,0xffe0
8000a0ae:	c0 c8       	rjmp	8000a0c6 <__floatsidf_return_op1>
8000a0b0:	ed bb 00 1f 	bld	r11,0x1f
8000a0b4:	f7 b9 01 01 	subne	r9,1
8000a0b8:	ab 9a       	lsr	r10,0xb
8000a0ba:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a0be:	a1 7b       	lsl	r11,0x1
8000a0c0:	ab 9b       	lsr	r11,0xb
8000a0c2:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000a0c6 <__floatsidf_return_op1>:
8000a0c6:	a1 7c       	lsl	r12,0x1
8000a0c8:	5d 0b       	ror	r11
8000a0ca:	d8 02       	popm	pc

8000a0cc <__avr32_f32_div>:
8000a0cc:	f7 ec 20 08 	eor	r8,r11,r12
8000a0d0:	a1 7c       	lsl	r12,0x1
8000a0d2:	a1 7b       	lsl	r11,0x1
8000a0d4:	c7 a0       	breq	8000a1c8 <__divsf_return_op1+0x16>
8000a0d6:	18 7c       	tst	r12,r12
8000a0d8:	f9 b9 00 00 	moveq	r9,0
8000a0dc:	c0 90       	breq	8000a0ee <__avr32_f32_div+0x22>
8000a0de:	f8 09 16 18 	lsr	r9,r12,0x18
8000a0e2:	c7 e0       	breq	8000a1de <__divsf_return_op1+0x2c>
8000a0e4:	e0 49 00 ff 	cp.w	r9,255
8000a0e8:	c6 82       	brcc	8000a1b8 <__divsf_return_op1+0x6>
8000a0ea:	a7 7c       	lsl	r12,0x7
8000a0ec:	bf bc       	sbr	r12,0x1f
8000a0ee:	f6 0a 16 18 	lsr	r10,r11,0x18
8000a0f2:	c7 e0       	breq	8000a1ee <__divsf_return_op1+0x3c>
8000a0f4:	e0 4a 00 ff 	cp.w	r10,255
8000a0f8:	c6 62       	brcc	8000a1c4 <__divsf_return_op1+0x12>
8000a0fa:	a7 7b       	lsl	r11,0x7
8000a0fc:	bf bb       	sbr	r11,0x1f
8000a0fe:	58 09       	cp.w	r9,0
8000a100:	f5 bc 00 00 	subfeq	r12,0
8000a104:	5e 0d       	reteq	0
8000a106:	1a d5       	st.w	--sp,r5
8000a108:	bb 27       	st.d	--sp,r6
8000a10a:	14 19       	sub	r9,r10
8000a10c:	28 19       	sub	r9,-127
8000a10e:	fc 1a 80 00 	movh	r10,0x8000
8000a112:	a3 8c       	lsr	r12,0x2
8000a114:	f6 05 16 02 	lsr	r5,r11,0x2
8000a118:	f4 0b 16 01 	lsr	r11,r10,0x1
8000a11c:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8000a120:	5c d6       	com	r6
8000a122:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
8000a126:	f6 05 06 46 	mulu.d	r6,r11,r5
8000a12a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000a12e:	f6 07 06 46 	mulu.d	r6,r11,r7
8000a132:	ee 0b 15 02 	lsl	r11,r7,0x2
8000a136:	f6 05 06 46 	mulu.d	r6,r11,r5
8000a13a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000a13e:	f6 07 06 46 	mulu.d	r6,r11,r7
8000a142:	ee 0b 15 02 	lsl	r11,r7,0x2
8000a146:	f6 05 06 46 	mulu.d	r6,r11,r5
8000a14a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000a14e:	f6 07 06 46 	mulu.d	r6,r11,r7
8000a152:	ee 0b 15 02 	lsl	r11,r7,0x2
8000a156:	f6 05 06 46 	mulu.d	r6,r11,r5
8000a15a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000a15e:	f6 07 06 46 	mulu.d	r6,r11,r7
8000a162:	ee 0b 15 02 	lsl	r11,r7,0x2
8000a166:	f6 0c 06 46 	mulu.d	r6,r11,r12
8000a16a:	a5 8c       	lsr	r12,0x4
8000a16c:	ed b7 00 1c 	bld	r7,0x1c
8000a170:	c0 40       	breq	8000a178 <__avr32_f32_div+0xac>
8000a172:	a1 77       	lsl	r7,0x1
8000a174:	20 19       	sub	r9,1
8000a176:	a1 7c       	lsl	r12,0x1
8000a178:	58 09       	cp.w	r9,0
8000a17a:	e0 8a 00 42 	brle	8000a1fe <__avr32_f32_div_res_subnormal>
8000a17e:	e0 17 ff e0 	andl	r7,0xffe0
8000a182:	e8 17 00 10 	orl	r7,0x10
8000a186:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000a18a:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000a18e:	58 0a       	cp.w	r10,0

8000a190 <__avr32_f32_div_round_subnormal>:
8000a190:	f8 0b 13 00 	cpc	r11,r12
8000a194:	5f 3b       	srlo	r11
8000a196:	ea 0b 17 00 	moveq	r11,r5
8000a19a:	ee 0c 16 05 	lsr	r12,r7,0x5
8000a19e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8000a1a2:	bb 07       	ld.d	r6,sp++
8000a1a4:	1b 05       	ld.w	r5,sp++
8000a1a6:	ed b8 00 1f 	bld	r8,0x1f
8000a1aa:	ef bc 00 1f 	bst	r12,0x1f
8000a1ae:	16 0c       	add	r12,r11
8000a1b0:	5e fc       	retal	r12

8000a1b2 <__divsf_return_op1>:
8000a1b2:	a1 78       	lsl	r8,0x1
8000a1b4:	5d 0c       	ror	r12
8000a1b6:	5e fc       	retal	r12
8000a1b8:	5e 1e       	retne	-1
8000a1ba:	fc 19 ff 00 	movh	r9,0xff00
8000a1be:	12 3b       	cp.w	r11,r9
8000a1c0:	cf 93       	brcs	8000a1b2 <__divsf_return_op1>
8000a1c2:	5e fe       	retal	-1
8000a1c4:	5e 0d       	reteq	0
8000a1c6:	5e fe       	retal	-1
8000a1c8:	18 7c       	tst	r12,r12
8000a1ca:	5e 0e       	reteq	-1
8000a1cc:	f8 09 16 18 	lsr	r9,r12,0x18
8000a1d0:	c0 70       	breq	8000a1de <__divsf_return_op1+0x2c>
8000a1d2:	e0 49 00 ff 	cp.w	r9,255
8000a1d6:	cf 12       	brcc	8000a1b8 <__divsf_return_op1+0x6>
8000a1d8:	fc 1c ff 00 	movh	r12,0xff00
8000a1dc:	ce bb       	rjmp	8000a1b2 <__divsf_return_op1>
8000a1de:	a7 7c       	lsl	r12,0x7
8000a1e0:	f8 09 12 00 	clz	r9,r12
8000a1e4:	f8 09 09 4c 	lsl	r12,r12,r9
8000a1e8:	f2 09 11 01 	rsub	r9,r9,1
8000a1ec:	c8 1b       	rjmp	8000a0ee <__avr32_f32_div+0x22>
8000a1ee:	a7 7b       	lsl	r11,0x7
8000a1f0:	f6 0a 12 00 	clz	r10,r11
8000a1f4:	f6 0a 09 4b 	lsl	r11,r11,r10
8000a1f8:	f4 0a 11 01 	rsub	r10,r10,1
8000a1fc:	c8 5b       	rjmp	8000a106 <__avr32_f32_div+0x3a>

8000a1fe <__avr32_f32_div_res_subnormal>:
8000a1fe:	5c 39       	neg	r9
8000a200:	2f f9       	sub	r9,-1
8000a202:	f1 b9 04 a0 	satu	r9,0x5
8000a206:	f2 0a 11 20 	rsub	r10,r9,32
8000a20a:	ee 09 0a 47 	lsr	r7,r7,r9
8000a20e:	f8 0a 09 46 	lsl	r6,r12,r10
8000a212:	f8 09 0a 4c 	lsr	r12,r12,r9
8000a216:	e0 17 ff e0 	andl	r7,0xffe0
8000a21a:	e8 17 00 10 	orl	r7,0x10
8000a21e:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000a222:	30 09       	mov	r9,0
8000a224:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000a228:	0c 3a       	cp.w	r10,r6
8000a22a:	cb 3b       	rjmp	8000a190 <__avr32_f32_div_round_subnormal>

8000a22c <__avr32_f64_to_f32>:
8000a22c:	f6 09 15 01 	lsl	r9,r11,0x1
8000a230:	b5 99       	lsr	r9,0x15
8000a232:	5e 0d       	reteq	0
8000a234:	f6 08 15 0a 	lsl	r8,r11,0xa
8000a238:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
8000a23c:	ab 6a       	lsl	r10,0xa
8000a23e:	5c 3a       	neg	r10
8000a240:	5c fc       	rol	r12
8000a242:	e0 49 07 ff 	cp.w	r9,2047
8000a246:	c1 a0       	breq	8000a27a <__truncdfsf_return_op1+0x6>
8000a248:	e0 29 03 80 	sub	r9,896
8000a24c:	bf bc       	sbr	r12,0x1f
8000a24e:	58 09       	cp.w	r9,0
8000a250:	e0 8a 00 1a 	brle	8000a284 <__truncdfsf_return_op1+0x10>
8000a254:	37 fa       	mov	r10,127
8000a256:	ed bc 00 08 	bld	r12,0x8
8000a25a:	f7 ba 00 ff 	subeq	r10,-1
8000a25e:	14 0c       	add	r12,r10
8000a260:	f7 b9 03 fe 	sublo	r9,-2
8000a264:	ed bc 00 1f 	bld	r12,0x1f
8000a268:	f7 b9 01 01 	subne	r9,1
8000a26c:	f8 0c 16 07 	lsr	r12,r12,0x7
8000a270:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

8000a274 <__truncdfsf_return_op1>:
8000a274:	a1 7b       	lsl	r11,0x1
8000a276:	5d 0c       	ror	r12
8000a278:	5e fc       	retal	r12
8000a27a:	bf dc       	cbr	r12,0x1f
8000a27c:	5e 1e       	retne	-1
8000a27e:	fc 1c 7f 80 	movh	r12,0x7f80
8000a282:	5e fc       	retal	r12
8000a284:	f2 09 11 01 	rsub	r9,r9,1
8000a288:	59 99       	cp.w	r9,25
8000a28a:	f9 bc 02 00 	movhs	r12,0
8000a28e:	c1 32       	brcc	8000a2b4 <__truncdfsf_return_op1+0x40>
8000a290:	f2 0a 11 20 	rsub	r10,r9,32
8000a294:	f8 0a 09 4a 	lsl	r10,r12,r10
8000a298:	5f 1a       	srne	r10
8000a29a:	f8 09 0a 4c 	lsr	r12,r12,r9
8000a29e:	14 4c       	or	r12,r10
8000a2a0:	37 fa       	mov	r10,127
8000a2a2:	ed bc 00 08 	bld	r12,0x8
8000a2a6:	f7 ba 00 ff 	subeq	r10,-1
8000a2aa:	14 0c       	add	r12,r10
8000a2ac:	f8 0c 16 07 	lsr	r12,r12,0x7
8000a2b0:	a1 7b       	lsl	r11,0x1
8000a2b2:	5d 0c       	ror	r12
8000a2b4:	5e fc       	retal	r12

8000a2b6 <__avr32_udiv64>:
8000a2b6:	d4 31       	pushm	r0-r7,lr
8000a2b8:	1a 97       	mov	r7,sp
8000a2ba:	20 3d       	sub	sp,12
8000a2bc:	10 9c       	mov	r12,r8
8000a2be:	12 9e       	mov	lr,r9
8000a2c0:	14 93       	mov	r3,r10
8000a2c2:	58 09       	cp.w	r9,0
8000a2c4:	e0 81 00 bd 	brne	8000a43e <__avr32_udiv64+0x188>
8000a2c8:	16 38       	cp.w	r8,r11
8000a2ca:	e0 88 00 40 	brls	8000a34a <__avr32_udiv64+0x94>
8000a2ce:	f0 08 12 00 	clz	r8,r8
8000a2d2:	c0 d0       	breq	8000a2ec <__avr32_udiv64+0x36>
8000a2d4:	f6 08 09 4b 	lsl	r11,r11,r8
8000a2d8:	f0 09 11 20 	rsub	r9,r8,32
8000a2dc:	f8 08 09 4c 	lsl	r12,r12,r8
8000a2e0:	f4 09 0a 49 	lsr	r9,r10,r9
8000a2e4:	f4 08 09 43 	lsl	r3,r10,r8
8000a2e8:	f3 eb 10 0b 	or	r11,r9,r11
8000a2ec:	f8 0e 16 10 	lsr	lr,r12,0x10
8000a2f0:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000a2f4:	f6 0e 0d 00 	divu	r0,r11,lr
8000a2f8:	e6 0b 16 10 	lsr	r11,r3,0x10
8000a2fc:	00 99       	mov	r9,r0
8000a2fe:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a302:	e0 0a 02 48 	mul	r8,r0,r10
8000a306:	10 3b       	cp.w	r11,r8
8000a308:	c0 a2       	brcc	8000a31c <__avr32_udiv64+0x66>
8000a30a:	20 19       	sub	r9,1
8000a30c:	18 0b       	add	r11,r12
8000a30e:	18 3b       	cp.w	r11,r12
8000a310:	c0 63       	brcs	8000a31c <__avr32_udiv64+0x66>
8000a312:	10 3b       	cp.w	r11,r8
8000a314:	f7 b9 03 01 	sublo	r9,1
8000a318:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a31c:	f6 08 01 01 	sub	r1,r11,r8
8000a320:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000a324:	e2 0e 0d 00 	divu	r0,r1,lr
8000a328:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000a32c:	00 98       	mov	r8,r0
8000a32e:	e0 0a 02 4a 	mul	r10,r0,r10
8000a332:	14 33       	cp.w	r3,r10
8000a334:	c0 82       	brcc	8000a344 <__avr32_udiv64+0x8e>
8000a336:	20 18       	sub	r8,1
8000a338:	18 03       	add	r3,r12
8000a33a:	18 33       	cp.w	r3,r12
8000a33c:	c0 43       	brcs	8000a344 <__avr32_udiv64+0x8e>
8000a33e:	14 33       	cp.w	r3,r10
8000a340:	f7 b8 03 01 	sublo	r8,1
8000a344:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000a348:	cd f8       	rjmp	8000a506 <__avr32_udiv64+0x250>
8000a34a:	58 08       	cp.w	r8,0
8000a34c:	c0 51       	brne	8000a356 <__avr32_udiv64+0xa0>
8000a34e:	30 19       	mov	r9,1
8000a350:	f2 08 0d 08 	divu	r8,r9,r8
8000a354:	10 9c       	mov	r12,r8
8000a356:	f8 06 12 00 	clz	r6,r12
8000a35a:	c0 41       	brne	8000a362 <__avr32_udiv64+0xac>
8000a35c:	18 1b       	sub	r11,r12
8000a35e:	30 19       	mov	r9,1
8000a360:	c4 08       	rjmp	8000a3e0 <__avr32_udiv64+0x12a>
8000a362:	ec 01 11 20 	rsub	r1,r6,32
8000a366:	f4 01 0a 49 	lsr	r9,r10,r1
8000a36a:	f8 06 09 4c 	lsl	r12,r12,r6
8000a36e:	f6 06 09 48 	lsl	r8,r11,r6
8000a372:	f6 01 0a 41 	lsr	r1,r11,r1
8000a376:	f3 e8 10 08 	or	r8,r9,r8
8000a37a:	f8 03 16 10 	lsr	r3,r12,0x10
8000a37e:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000a382:	e2 03 0d 00 	divu	r0,r1,r3
8000a386:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a38a:	00 9e       	mov	lr,r0
8000a38c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a390:	e0 05 02 49 	mul	r9,r0,r5
8000a394:	12 3b       	cp.w	r11,r9
8000a396:	c0 a2       	brcc	8000a3aa <__avr32_udiv64+0xf4>
8000a398:	20 1e       	sub	lr,1
8000a39a:	18 0b       	add	r11,r12
8000a39c:	18 3b       	cp.w	r11,r12
8000a39e:	c0 63       	brcs	8000a3aa <__avr32_udiv64+0xf4>
8000a3a0:	12 3b       	cp.w	r11,r9
8000a3a2:	f7 be 03 01 	sublo	lr,1
8000a3a6:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a3aa:	12 1b       	sub	r11,r9
8000a3ac:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000a3b0:	f6 03 0d 02 	divu	r2,r11,r3
8000a3b4:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000a3b8:	04 99       	mov	r9,r2
8000a3ba:	e4 05 02 4b 	mul	r11,r2,r5
8000a3be:	16 38       	cp.w	r8,r11
8000a3c0:	c0 a2       	brcc	8000a3d4 <__avr32_udiv64+0x11e>
8000a3c2:	20 19       	sub	r9,1
8000a3c4:	18 08       	add	r8,r12
8000a3c6:	18 38       	cp.w	r8,r12
8000a3c8:	c0 63       	brcs	8000a3d4 <__avr32_udiv64+0x11e>
8000a3ca:	16 38       	cp.w	r8,r11
8000a3cc:	f7 b9 03 01 	sublo	r9,1
8000a3d0:	f1 dc e3 08 	addcs	r8,r8,r12
8000a3d4:	f4 06 09 43 	lsl	r3,r10,r6
8000a3d8:	f0 0b 01 0b 	sub	r11,r8,r11
8000a3dc:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000a3e0:	f8 06 16 10 	lsr	r6,r12,0x10
8000a3e4:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000a3e8:	f6 06 0d 00 	divu	r0,r11,r6
8000a3ec:	e6 0b 16 10 	lsr	r11,r3,0x10
8000a3f0:	00 9a       	mov	r10,r0
8000a3f2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a3f6:	e0 0e 02 48 	mul	r8,r0,lr
8000a3fa:	10 3b       	cp.w	r11,r8
8000a3fc:	c0 a2       	brcc	8000a410 <__avr32_udiv64+0x15a>
8000a3fe:	20 1a       	sub	r10,1
8000a400:	18 0b       	add	r11,r12
8000a402:	18 3b       	cp.w	r11,r12
8000a404:	c0 63       	brcs	8000a410 <__avr32_udiv64+0x15a>
8000a406:	10 3b       	cp.w	r11,r8
8000a408:	f7 ba 03 01 	sublo	r10,1
8000a40c:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a410:	f6 08 01 01 	sub	r1,r11,r8
8000a414:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000a418:	e2 06 0d 00 	divu	r0,r1,r6
8000a41c:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000a420:	00 98       	mov	r8,r0
8000a422:	e0 0e 02 4b 	mul	r11,r0,lr
8000a426:	16 33       	cp.w	r3,r11
8000a428:	c0 82       	brcc	8000a438 <__avr32_udiv64+0x182>
8000a42a:	20 18       	sub	r8,1
8000a42c:	18 03       	add	r3,r12
8000a42e:	18 33       	cp.w	r3,r12
8000a430:	c0 43       	brcs	8000a438 <__avr32_udiv64+0x182>
8000a432:	16 33       	cp.w	r3,r11
8000a434:	f7 b8 03 01 	sublo	r8,1
8000a438:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000a43c:	c6 98       	rjmp	8000a50e <__avr32_udiv64+0x258>
8000a43e:	16 39       	cp.w	r9,r11
8000a440:	e0 8b 00 65 	brhi	8000a50a <__avr32_udiv64+0x254>
8000a444:	f2 09 12 00 	clz	r9,r9
8000a448:	c0 b1       	brne	8000a45e <__avr32_udiv64+0x1a8>
8000a44a:	10 3a       	cp.w	r10,r8
8000a44c:	5f 2a       	srhs	r10
8000a44e:	1c 3b       	cp.w	r11,lr
8000a450:	5f b8       	srhi	r8
8000a452:	10 4a       	or	r10,r8
8000a454:	f2 0a 18 00 	cp.b	r10,r9
8000a458:	c5 90       	breq	8000a50a <__avr32_udiv64+0x254>
8000a45a:	30 18       	mov	r8,1
8000a45c:	c5 98       	rjmp	8000a50e <__avr32_udiv64+0x258>
8000a45e:	f0 09 09 46 	lsl	r6,r8,r9
8000a462:	f2 03 11 20 	rsub	r3,r9,32
8000a466:	fc 09 09 4e 	lsl	lr,lr,r9
8000a46a:	f0 03 0a 48 	lsr	r8,r8,r3
8000a46e:	f6 09 09 4c 	lsl	r12,r11,r9
8000a472:	f4 03 0a 42 	lsr	r2,r10,r3
8000a476:	ef 46 ff f4 	st.w	r7[-12],r6
8000a47a:	f6 03 0a 43 	lsr	r3,r11,r3
8000a47e:	18 42       	or	r2,r12
8000a480:	f1 ee 10 0c 	or	r12,r8,lr
8000a484:	f8 01 16 10 	lsr	r1,r12,0x10
8000a488:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000a48c:	e6 01 0d 04 	divu	r4,r3,r1
8000a490:	e4 03 16 10 	lsr	r3,r2,0x10
8000a494:	08 9e       	mov	lr,r4
8000a496:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000a49a:	e8 06 02 48 	mul	r8,r4,r6
8000a49e:	10 33       	cp.w	r3,r8
8000a4a0:	c0 a2       	brcc	8000a4b4 <__avr32_udiv64+0x1fe>
8000a4a2:	20 1e       	sub	lr,1
8000a4a4:	18 03       	add	r3,r12
8000a4a6:	18 33       	cp.w	r3,r12
8000a4a8:	c0 63       	brcs	8000a4b4 <__avr32_udiv64+0x1fe>
8000a4aa:	10 33       	cp.w	r3,r8
8000a4ac:	f7 be 03 01 	sublo	lr,1
8000a4b0:	e7 dc e3 03 	addcs	r3,r3,r12
8000a4b4:	10 13       	sub	r3,r8
8000a4b6:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000a4ba:	e6 01 0d 00 	divu	r0,r3,r1
8000a4be:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a4c2:	00 98       	mov	r8,r0
8000a4c4:	e0 06 02 46 	mul	r6,r0,r6
8000a4c8:	0c 3b       	cp.w	r11,r6
8000a4ca:	c0 a2       	brcc	8000a4de <__avr32_udiv64+0x228>
8000a4cc:	20 18       	sub	r8,1
8000a4ce:	18 0b       	add	r11,r12
8000a4d0:	18 3b       	cp.w	r11,r12
8000a4d2:	c0 63       	brcs	8000a4de <__avr32_udiv64+0x228>
8000a4d4:	0c 3b       	cp.w	r11,r6
8000a4d6:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a4da:	f7 b8 03 01 	sublo	r8,1
8000a4de:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000a4e2:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000a4e6:	0c 1b       	sub	r11,r6
8000a4e8:	f0 04 06 42 	mulu.d	r2,r8,r4
8000a4ec:	06 95       	mov	r5,r3
8000a4ee:	16 35       	cp.w	r5,r11
8000a4f0:	e0 8b 00 0a 	brhi	8000a504 <__avr32_udiv64+0x24e>
8000a4f4:	5f 0b       	sreq	r11
8000a4f6:	f4 09 09 49 	lsl	r9,r10,r9
8000a4fa:	12 32       	cp.w	r2,r9
8000a4fc:	5f b9       	srhi	r9
8000a4fe:	f7 e9 00 09 	and	r9,r11,r9
8000a502:	c0 60       	breq	8000a50e <__avr32_udiv64+0x258>
8000a504:	20 18       	sub	r8,1
8000a506:	30 09       	mov	r9,0
8000a508:	c0 38       	rjmp	8000a50e <__avr32_udiv64+0x258>
8000a50a:	30 09       	mov	r9,0
8000a50c:	12 98       	mov	r8,r9
8000a50e:	10 9a       	mov	r10,r8
8000a510:	12 93       	mov	r3,r9
8000a512:	10 92       	mov	r2,r8
8000a514:	12 9b       	mov	r11,r9
8000a516:	2f dd       	sub	sp,-12
8000a518:	d8 32       	popm	r0-r7,pc

8000a51a <memcpy>:
8000a51a:	58 8a       	cp.w	r10,8
8000a51c:	c2 f5       	brlt	8000a57a <memcpy+0x60>
8000a51e:	f9 eb 10 09 	or	r9,r12,r11
8000a522:	e2 19 00 03 	andl	r9,0x3,COH
8000a526:	e0 81 00 97 	brne	8000a654 <memcpy+0x13a>
8000a52a:	e0 4a 00 20 	cp.w	r10,32
8000a52e:	c3 b4       	brge	8000a5a4 <memcpy+0x8a>
8000a530:	f4 08 14 02 	asr	r8,r10,0x2
8000a534:	f0 09 11 08 	rsub	r9,r8,8
8000a538:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000a53c:	76 69       	ld.w	r9,r11[0x18]
8000a53e:	99 69       	st.w	r12[0x18],r9
8000a540:	76 59       	ld.w	r9,r11[0x14]
8000a542:	99 59       	st.w	r12[0x14],r9
8000a544:	76 49       	ld.w	r9,r11[0x10]
8000a546:	99 49       	st.w	r12[0x10],r9
8000a548:	76 39       	ld.w	r9,r11[0xc]
8000a54a:	99 39       	st.w	r12[0xc],r9
8000a54c:	76 29       	ld.w	r9,r11[0x8]
8000a54e:	99 29       	st.w	r12[0x8],r9
8000a550:	76 19       	ld.w	r9,r11[0x4]
8000a552:	99 19       	st.w	r12[0x4],r9
8000a554:	76 09       	ld.w	r9,r11[0x0]
8000a556:	99 09       	st.w	r12[0x0],r9
8000a558:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000a55c:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000a560:	e0 1a 00 03 	andl	r10,0x3
8000a564:	f4 0a 11 04 	rsub	r10,r10,4
8000a568:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000a56c:	17 a9       	ld.ub	r9,r11[0x2]
8000a56e:	b0 a9       	st.b	r8[0x2],r9
8000a570:	17 99       	ld.ub	r9,r11[0x1]
8000a572:	b0 99       	st.b	r8[0x1],r9
8000a574:	17 89       	ld.ub	r9,r11[0x0]
8000a576:	b0 89       	st.b	r8[0x0],r9
8000a578:	5e fc       	retal	r12
8000a57a:	f4 0a 11 09 	rsub	r10,r10,9
8000a57e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000a582:	17 f9       	ld.ub	r9,r11[0x7]
8000a584:	b8 f9       	st.b	r12[0x7],r9
8000a586:	17 e9       	ld.ub	r9,r11[0x6]
8000a588:	b8 e9       	st.b	r12[0x6],r9
8000a58a:	17 d9       	ld.ub	r9,r11[0x5]
8000a58c:	b8 d9       	st.b	r12[0x5],r9
8000a58e:	17 c9       	ld.ub	r9,r11[0x4]
8000a590:	b8 c9       	st.b	r12[0x4],r9
8000a592:	17 b9       	ld.ub	r9,r11[0x3]
8000a594:	b8 b9       	st.b	r12[0x3],r9
8000a596:	17 a9       	ld.ub	r9,r11[0x2]
8000a598:	b8 a9       	st.b	r12[0x2],r9
8000a59a:	17 99       	ld.ub	r9,r11[0x1]
8000a59c:	b8 99       	st.b	r12[0x1],r9
8000a59e:	17 89       	ld.ub	r9,r11[0x0]
8000a5a0:	b8 89       	st.b	r12[0x0],r9
8000a5a2:	5e fc       	retal	r12
8000a5a4:	eb cd 40 c0 	pushm	r6-r7,lr
8000a5a8:	18 99       	mov	r9,r12
8000a5aa:	22 0a       	sub	r10,32
8000a5ac:	b7 07       	ld.d	r6,r11++
8000a5ae:	b3 26       	st.d	r9++,r6
8000a5b0:	b7 07       	ld.d	r6,r11++
8000a5b2:	b3 26       	st.d	r9++,r6
8000a5b4:	b7 07       	ld.d	r6,r11++
8000a5b6:	b3 26       	st.d	r9++,r6
8000a5b8:	b7 07       	ld.d	r6,r11++
8000a5ba:	b3 26       	st.d	r9++,r6
8000a5bc:	22 0a       	sub	r10,32
8000a5be:	cf 74       	brge	8000a5ac <memcpy+0x92>
8000a5c0:	2f 0a       	sub	r10,-16
8000a5c2:	c0 65       	brlt	8000a5ce <memcpy+0xb4>
8000a5c4:	b7 07       	ld.d	r6,r11++
8000a5c6:	b3 26       	st.d	r9++,r6
8000a5c8:	b7 07       	ld.d	r6,r11++
8000a5ca:	b3 26       	st.d	r9++,r6
8000a5cc:	21 0a       	sub	r10,16
8000a5ce:	5c 3a       	neg	r10
8000a5d0:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000a5d4:	d7 03       	nop
8000a5d6:	d7 03       	nop
8000a5d8:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000a5dc:	f3 66 00 0e 	st.b	r9[14],r6
8000a5e0:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000a5e4:	f3 66 00 0d 	st.b	r9[13],r6
8000a5e8:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000a5ec:	f3 66 00 0c 	st.b	r9[12],r6
8000a5f0:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000a5f4:	f3 66 00 0b 	st.b	r9[11],r6
8000a5f8:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000a5fc:	f3 66 00 0a 	st.b	r9[10],r6
8000a600:	f7 36 00 09 	ld.ub	r6,r11[9]
8000a604:	f3 66 00 09 	st.b	r9[9],r6
8000a608:	f7 36 00 08 	ld.ub	r6,r11[8]
8000a60c:	f3 66 00 08 	st.b	r9[8],r6
8000a610:	f7 36 00 07 	ld.ub	r6,r11[7]
8000a614:	f3 66 00 07 	st.b	r9[7],r6
8000a618:	f7 36 00 06 	ld.ub	r6,r11[6]
8000a61c:	f3 66 00 06 	st.b	r9[6],r6
8000a620:	f7 36 00 05 	ld.ub	r6,r11[5]
8000a624:	f3 66 00 05 	st.b	r9[5],r6
8000a628:	f7 36 00 04 	ld.ub	r6,r11[4]
8000a62c:	f3 66 00 04 	st.b	r9[4],r6
8000a630:	f7 36 00 03 	ld.ub	r6,r11[3]
8000a634:	f3 66 00 03 	st.b	r9[3],r6
8000a638:	f7 36 00 02 	ld.ub	r6,r11[2]
8000a63c:	f3 66 00 02 	st.b	r9[2],r6
8000a640:	f7 36 00 01 	ld.ub	r6,r11[1]
8000a644:	f3 66 00 01 	st.b	r9[1],r6
8000a648:	f7 36 00 00 	ld.ub	r6,r11[0]
8000a64c:	f3 66 00 00 	st.b	r9[0],r6
8000a650:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a654:	20 1a       	sub	r10,1
8000a656:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000a65a:	f8 0a 0b 09 	st.b	r12[r10],r9
8000a65e:	cf b1       	brne	8000a654 <memcpy+0x13a>
8000a660:	5e fc       	retal	r12

8000a662 <memset>:
8000a662:	18 98       	mov	r8,r12
8000a664:	c0 38       	rjmp	8000a66a <memset+0x8>
8000a666:	10 cb       	st.b	r8++,r11
8000a668:	20 1a       	sub	r10,1
8000a66a:	58 0a       	cp.w	r10,0
8000a66c:	cf d1       	brne	8000a666 <memset+0x4>
8000a66e:	5e fc       	retal	r12

8000a670 <strncpy>:
8000a670:	30 08       	mov	r8,0
8000a672:	10 3a       	cp.w	r10,r8
8000a674:	5e 0c       	reteq	r12
8000a676:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000a67a:	f8 08 0b 09 	st.b	r12[r8],r9
8000a67e:	2f f8       	sub	r8,-1
8000a680:	58 09       	cp.w	r9,0
8000a682:	cf 81       	brne	8000a672 <strncpy+0x2>
8000a684:	10 3a       	cp.w	r10,r8
8000a686:	5e 0c       	reteq	r12
8000a688:	f8 08 0b 09 	st.b	r12[r8],r9
8000a68c:	2f f8       	sub	r8,-1
8000a68e:	cf bb       	rjmp	8000a684 <strncpy+0x14>

Disassembly of section .exception:

8000a800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000a800:	c0 08       	rjmp	8000a800 <_evba>
	...

8000a804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000a804:	c0 08       	rjmp	8000a804 <_handle_TLB_Multiple_Hit>
	...

8000a808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000a808:	c0 08       	rjmp	8000a808 <_handle_Bus_Error_Data_Fetch>
	...

8000a80c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000a80c:	c0 08       	rjmp	8000a80c <_handle_Bus_Error_Instruction_Fetch>
	...

8000a810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000a810:	c0 08       	rjmp	8000a810 <_handle_NMI>
	...

8000a814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000a814:	c0 08       	rjmp	8000a814 <_handle_Instruction_Address>
	...

8000a818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000a818:	c0 08       	rjmp	8000a818 <_handle_ITLB_Protection>
	...

8000a81c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000a81c:	c0 08       	rjmp	8000a81c <_handle_Breakpoint>
	...

8000a820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000a820:	c0 08       	rjmp	8000a820 <_handle_Illegal_Opcode>
	...

8000a824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000a824:	c0 08       	rjmp	8000a824 <_handle_Unimplemented_Instruction>
	...

8000a828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000a828:	c0 08       	rjmp	8000a828 <_handle_Privilege_Violation>
	...

8000a82c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000a82c:	c0 08       	rjmp	8000a82c <_handle_Floating_Point>
	...

8000a830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000a830:	c0 08       	rjmp	8000a830 <_handle_Coprocessor_Absent>
	...

8000a834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000a834:	c0 08       	rjmp	8000a834 <_handle_Data_Address_Read>
	...

8000a838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000a838:	c0 08       	rjmp	8000a838 <_handle_Data_Address_Write>
	...

8000a83c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000a83c:	c0 08       	rjmp	8000a83c <_handle_DTLB_Protection_Read>
	...

8000a840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000a840:	c0 08       	rjmp	8000a840 <_handle_DTLB_Protection_Write>
	...

8000a844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000a844:	c0 08       	rjmp	8000a844 <_handle_DTLB_Modified>
	...

8000a850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000a850:	c0 08       	rjmp	8000a850 <_handle_ITLB_Miss>
	...

8000a860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000a860:	c0 08       	rjmp	8000a860 <_handle_DTLB_Miss_Read>
	...

8000a870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000a870:	c0 08       	rjmp	8000a870 <_handle_DTLB_Miss_Write>
	...

8000a900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000a900:	c0 08       	rjmp	8000a900 <_handle_Supervisor_Call>
	...

8000a904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a904:	30 0c       	mov	r12,0
8000a906:	f0 1f 00 0e 	mcall	8000a93c <_int3+0xe>
8000a90a:	58 0c       	cp.w	r12,0
8000a90c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a910:	d6 03       	rete

8000a912 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a912:	30 1c       	mov	r12,1
8000a914:	f0 1f 00 0a 	mcall	8000a93c <_int3+0xe>
8000a918:	58 0c       	cp.w	r12,0
8000a91a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a91e:	d6 03       	rete

8000a920 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a920:	30 2c       	mov	r12,2
8000a922:	f0 1f 00 07 	mcall	8000a93c <_int3+0xe>
8000a926:	58 0c       	cp.w	r12,0
8000a928:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a92c:	d6 03       	rete

8000a92e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a92e:	30 3c       	mov	r12,3
8000a930:	f0 1f 00 03 	mcall	8000a93c <_int3+0xe>
8000a934:	58 0c       	cp.w	r12,0
8000a936:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a93a:	d6 03       	rete
8000a93c:	80 00       	ld.sh	r0,r0[0x0]
8000a93e:	4b 40       	lddpc	r0,8000aa0c <DISPLAY_USART_GPIO_MAP.14651+0xc>
	...
