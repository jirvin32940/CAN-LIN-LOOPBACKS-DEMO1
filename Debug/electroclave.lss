
electroclave.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002010  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000e610  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80010800  80010800  00010c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007dc  80010a00  80010a00  00010e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  800111dc  800111dc  000115dc  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         000005b0  00000008  800111e0  00011808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001020  000005b8  000005b8  00000000  2**2
                  ALLOC
  9 .heap         0000da28  000015d8  000015d8  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  00011db8  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001158  00000000  00000000  00011de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00002652  00000000  00000000  00012f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0002e4ee  00000000  00000000  00015592  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000057df  00000000  00000000  00043a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001115d  00000000  00000000  0004925f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000030f8  00000000  00000000  0005a3bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006a7d  00000000  00000000  0005d4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000abc0  00000000  00000000  00063f31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 01032805  00000000  00000000  0006eaf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .flash_nvram0 00000660  8007f000  80011790  00012000  2**0
                  ALLOC
 22 .flash_nvram1 00000660  8007f800  8007f660  00012000  2**0
                  ALLOC
 23 .debug_ranges 000011d0  00000000  00000000  010a12f8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	59 28       	cp.w	r8,18

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	48 1f       	lddpc	pc,8000200c <program_start+0x4>
8000200a:	00 00       	add	r0,r0
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	59 28       	cp.w	r8,18

Disassembly of section .text:

80002010 <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
80002010:	eb cd 40 80 	pushm	r7,lr
80002014:	1a 97       	mov	r7,sp
80002016:	20 1d       	sub	sp,4
80002018:	18 98       	mov	r8,r12
8000201a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (idx)
8000201e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002022:	58 28       	cp.w	r8,2
80002024:	c1 10       	breq	80002046 <io_pin+0x36>
80002026:	e0 89 00 07 	brgt	80002034 <io_pin+0x24>
8000202a:	58 08       	cp.w	r8,0
8000202c:	c0 90       	breq	8000203e <io_pin+0x2e>
8000202e:	58 18       	cp.w	r8,1
80002030:	c0 90       	breq	80002042 <io_pin+0x32>
80002032:	c1 08       	rjmp	80002052 <io_pin+0x42>
80002034:	58 38       	cp.w	r8,3
80002036:	c0 a0       	breq	8000204a <io_pin+0x3a>
80002038:	58 48       	cp.w	r8,4
8000203a:	c0 a0       	breq	8000204e <io_pin+0x3e>
8000203c:	c0 b8       	rjmp	80002052 <io_pin+0x42>
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
8000203e:	33 38       	mov	r8,51
80002040:	c0 a8       	rjmp	80002054 <io_pin+0x44>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
80002042:	33 48       	mov	r8,52
80002044:	c0 88       	rjmp	80002054 <io_pin+0x44>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
80002046:	33 58       	mov	r8,53
80002048:	c0 68       	rjmp	80002054 <io_pin+0x44>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
8000204a:	33 68       	mov	r8,54
8000204c:	c0 48       	rjmp	80002054 <io_pin+0x44>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
8000204e:	33 78       	mov	r8,55
80002050:	c0 28       	rjmp	80002054 <io_pin+0x44>
			break;
		default: 
			return 0; //TODO: return a better error code here
80002052:	30 08       	mov	r8,0
			break;
	}
}
80002054:	10 9c       	mov	r12,r8
80002056:	2f fd       	sub	sp,-4
80002058:	e3 cd 80 80 	ldm	sp++,r7,pc

8000205c <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
8000205c:	eb cd 40 80 	pushm	r7,lr
80002060:	1a 97       	mov	r7,sp
80002062:	20 3d       	sub	sp,12
80002064:	18 98       	mov	r8,r12
80002066:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
8000206a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000206e:	10 9c       	mov	r12,r8
80002070:	f0 1f 00 0c 	mcall	800020a0 <drive_DQ_low+0x44>
80002074:	18 98       	mov	r8,r12
80002076:	ef 68 ff fb 	st.b	r7[-5],r8
	
	ioFlags = (GPIO_DIR_OUTPUT); //14may15 experiment
8000207a:	30 18       	mov	r8,1
8000207c:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ioPin, ioFlags); //14may15 experiment
80002080:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002084:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002088:	12 9b       	mov	r11,r9
8000208a:	10 9c       	mov	r12,r8
8000208c:	f0 1f 00 06 	mcall	800020a4 <drive_DQ_low+0x48>

	gpio_set_pin_low(ioPin);
80002090:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002094:	10 9c       	mov	r12,r8
80002096:	f0 1f 00 05 	mcall	800020a8 <drive_DQ_low+0x4c>

}
8000209a:	2f dd       	sub	sp,-12
8000209c:	e3 cd 80 80 	ldm	sp++,r7,pc
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	20 10       	sub	r0,1
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	48 28       	lddpc	r8,800020ac <release_the_bus>
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	4b 3c       	lddpc	r12,80002174 <SetSpeed>

800020ac <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
800020ac:	eb cd 40 80 	pushm	r7,lr
800020b0:	1a 97       	mov	r7,sp
800020b2:	20 3d       	sub	sp,12
800020b4:	18 98       	mov	r8,r12
800020b6:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
800020ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800020be:	10 9c       	mov	r12,r8
800020c0:	f0 1f 00 0a 	mcall	800020e8 <release_the_bus+0x3c>
800020c4:	18 98       	mov	r8,r12
800020c6:	ef 68 ff fb 	st.b	r7[-5],r8
	
//14may15 experiment	gpio_set_pin_high(ioPin);
	
	ioFlags = (GPIO_DIR_INPUT); //14may15 experiment
800020ca:	30 08       	mov	r8,0
800020cc:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ioPin, ioFlags); //14may15 experiment
800020d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020d4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800020d8:	12 9b       	mov	r11,r9
800020da:	10 9c       	mov	r12,r8
800020dc:	f0 1f 00 04 	mcall	800020ec <release_the_bus+0x40>

}
800020e0:	2f dd       	sub	sp,-12
800020e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800020e6:	00 00       	add	r0,r0
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	20 10       	sub	r0,1
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	48 28       	lddpc	r8,800020f4 <gpio_input+0x4>

800020f0 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
800020f0:	eb cd 40 80 	pushm	r7,lr
800020f4:	1a 97       	mov	r7,sp
800020f6:	20 3d       	sub	sp,12
800020f8:	18 98       	mov	r8,r12
800020fa:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 9c       	mov	r12,r8
80002104:	f0 1f 00 09 	mcall	80002128 <gpio_input+0x38>
80002108:	18 98       	mov	r8,r12
8000210a:	ef 68 ff ff 	st.b	r7[-1],r8
		
	ioFlags = (GPIO_DIR_INPUT);
8000210e:	30 08       	mov	r8,0
80002110:	ef 48 ff f8 	st.w	r7[-8],r8
	gpio_configure_pin(ioPin, ioFlags);
80002114:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002118:	ee fb ff f8 	ld.w	r11,r7[-8]
8000211c:	10 9c       	mov	r12,r8
8000211e:	f0 1f 00 04 	mcall	8000212c <gpio_input+0x3c>

}
80002122:	2f dd       	sub	sp,-12
80002124:	e3 cd 80 80 	ldm	sp++,r7,pc
80002128:	80 00       	ld.sh	r0,r0[0x0]
8000212a:	20 10       	sub	r0,1
8000212c:	80 00       	ld.sh	r0,r0[0x0]
8000212e:	48 28       	lddpc	r8,80002134 <sample_line+0x4>

80002130 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
80002130:	eb cd 40 80 	pushm	r7,lr
80002134:	1a 97       	mov	r7,sp
80002136:	20 2d       	sub	sp,8
80002138:	18 98       	mov	r8,r12
8000213a:	ef 68 ff f8 	st.b	r7[-8],r8
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
8000213e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002142:	10 9c       	mov	r12,r8
80002144:	f0 1f 00 0a 	mcall	8000216c <sample_line+0x3c>
80002148:	18 98       	mov	r8,r12
8000214a:	ef 68 ff ff 	st.b	r7[-1],r8
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = gpio_get_pin_value(ioPin);
8000214e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002152:	10 9c       	mov	r12,r8
80002154:	f0 1f 00 07 	mcall	80002170 <sample_line+0x40>
80002158:	18 98       	mov	r8,r12
8000215a:	ef 68 ff fe 	st.b	r7[-2],r8

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
8000215e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
80002162:	10 9c       	mov	r12,r8
80002164:	2f ed       	sub	sp,-8
80002166:	e3 cd 80 80 	ldm	sp++,r7,pc
8000216a:	00 00       	add	r0,r0
8000216c:	80 00       	ld.sh	r0,r0[0x0]
8000216e:	20 10       	sub	r0,1
80002170:	80 00       	ld.sh	r0,r0[0x0]
80002172:	4a c6       	lddpc	r6,80002220 <SetSpeed+0xac>

80002174 <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
80002174:	eb cd 40 80 	pushm	r7,lr
80002178:	1a 97       	mov	r7,sp
8000217a:	20 1d       	sub	sp,4
8000217c:	ef 4c ff fc 	st.w	r7[-4],r12
		J = 410;
	}
	
#endif

	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
80002180:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002184:	58 08       	cp.w	r8,0
80002186:	c2 20       	breq	800021ca <SetSpeed+0x56>
	{
		// Standard Speed
		A = 0; //6;
80002188:	4a 18       	lddpc	r8,8000220c <SetSpeed+0x98>
8000218a:	30 09       	mov	r9,0
8000218c:	91 09       	st.w	r8[0x0],r9
		B = 32; //64;
8000218e:	4a 18       	lddpc	r8,80002210 <SetSpeed+0x9c>
80002190:	32 09       	mov	r9,32
80002192:	91 09       	st.w	r8[0x0],r9
		C = 30; //60;
80002194:	4a 08       	lddpc	r8,80002214 <SetSpeed+0xa0>
80002196:	31 e9       	mov	r9,30
80002198:	91 09       	st.w	r8[0x0],r9
		D = 2; //10;
8000219a:	4a 08       	lddpc	r8,80002218 <SetSpeed+0xa4>
8000219c:	30 29       	mov	r9,2
8000219e:	91 09       	st.w	r8[0x0],r9
		E = 2; //9;
800021a0:	49 f8       	lddpc	r8,8000221c <SetSpeed+0xa8>
800021a2:	30 29       	mov	r9,2
800021a4:	91 09       	st.w	r8[0x0],r9
		F = 27; //55;
800021a6:	49 f8       	lddpc	r8,80002220 <SetSpeed+0xac>
800021a8:	31 b9       	mov	r9,27
800021aa:	91 09       	st.w	r8[0x0],r9
		G = 0; //0;
800021ac:	49 e8       	lddpc	r8,80002224 <SetSpeed+0xb0>
800021ae:	30 09       	mov	r9,0
800021b0:	91 09       	st.w	r8[0x0],r9
		H = 240; //480;
800021b2:	49 e8       	lddpc	r8,80002228 <SetSpeed+0xb4>
800021b4:	e0 69 00 f0 	mov	r9,240
800021b8:	91 09       	st.w	r8[0x0],r9
		I = 35; //70;
800021ba:	49 d8       	lddpc	r8,8000222c <SetSpeed+0xb8>
800021bc:	32 39       	mov	r9,35
800021be:	91 09       	st.w	r8[0x0],r9
		J = 205; //410;
800021c0:	49 c8       	lddpc	r8,80002230 <SetSpeed+0xbc>
800021c2:	e0 69 00 cd 	mov	r9,205
800021c6:	91 09       	st.w	r8[0x0],r9
800021c8:	c1 f8       	rjmp	80002206 <SetSpeed+0x92>


	else
	{
		// Overdrive Speed
		A = 1.5;
800021ca:	49 18       	lddpc	r8,8000220c <SetSpeed+0x98>
800021cc:	30 19       	mov	r9,1
800021ce:	91 09       	st.w	r8[0x0],r9
		B = 7.5;
800021d0:	49 08       	lddpc	r8,80002210 <SetSpeed+0x9c>
800021d2:	30 79       	mov	r9,7
800021d4:	91 09       	st.w	r8[0x0],r9
		C = 7.5;
800021d6:	49 08       	lddpc	r8,80002214 <SetSpeed+0xa0>
800021d8:	30 79       	mov	r9,7
800021da:	91 09       	st.w	r8[0x0],r9
		D = 2.5;
800021dc:	48 f8       	lddpc	r8,80002218 <SetSpeed+0xa4>
800021de:	30 29       	mov	r9,2
800021e0:	91 09       	st.w	r8[0x0],r9
		E = 0.75;
800021e2:	48 f8       	lddpc	r8,8000221c <SetSpeed+0xa8>
800021e4:	30 09       	mov	r9,0
800021e6:	91 09       	st.w	r8[0x0],r9
		F = 7;
800021e8:	48 e8       	lddpc	r8,80002220 <SetSpeed+0xac>
800021ea:	30 79       	mov	r9,7
800021ec:	91 09       	st.w	r8[0x0],r9
		G = 2.5;
800021ee:	48 e8       	lddpc	r8,80002224 <SetSpeed+0xb0>
800021f0:	30 29       	mov	r9,2
800021f2:	91 09       	st.w	r8[0x0],r9
		H = 70;
800021f4:	48 d8       	lddpc	r8,80002228 <SetSpeed+0xb4>
800021f6:	34 69       	mov	r9,70
800021f8:	91 09       	st.w	r8[0x0],r9
		I = 8.5;
800021fa:	48 d8       	lddpc	r8,8000222c <SetSpeed+0xb8>
800021fc:	30 89       	mov	r9,8
800021fe:	91 09       	st.w	r8[0x0],r9
		J = 40;
80002200:	48 c8       	lddpc	r8,80002230 <SetSpeed+0xbc>
80002202:	32 89       	mov	r9,40
80002204:	91 09       	st.w	r8[0x0],r9
	}
}
80002206:	2f fd       	sub	sp,-4
80002208:	e3 cd 80 80 	ldm	sp++,r7,pc
8000220c:	00 00       	add	r0,r0
8000220e:	07 f4       	ld.ub	r4,r3[0x7]
80002210:	00 00       	add	r0,r0
80002212:	07 f8       	ld.ub	r8,r3[0x7]
80002214:	00 00       	add	r0,r0
80002216:	08 00       	add	r0,r4
80002218:	00 00       	add	r0,r0
8000221a:	07 f0       	ld.ub	r0,r3[0x7]
8000221c:	00 00       	add	r0,r0
8000221e:	08 0c       	add	r12,r4
80002220:	00 00       	add	r0,r0
80002222:	08 14       	sub	r4,r4
80002224:	00 00       	add	r0,r0
80002226:	08 04       	add	r4,r4
80002228:	00 00       	add	r0,r0
8000222a:	08 08       	add	r8,r4
8000222c:	00 00       	add	r0,r0
8000222e:	08 10       	sub	r0,r4
80002230:	00 00       	add	r0,r0
80002232:	07 fc       	ld.ub	r12,r3[0x7]

80002234 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
80002234:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002238:	1a 97       	mov	r7,sp
8000223a:	fa cd 00 e0 	sub	sp,sp,224
8000223e:	18 98       	mov	r8,r12
80002240:	ef 68 ff 48 	st.b	r7[-184],r8
	int result;

	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ);
80002244:	fe f8 05 9c 	ld.w	r8,pc[1436]
80002248:	70 08       	ld.w	r8,r8[0x0]
8000224a:	ef 48 ff 84 	st.w	r7[-124],r8
8000224e:	e0 68 e1 00 	mov	r8,57600
80002252:	ea 18 05 f5 	orh	r8,0x5f5
80002256:	ef 48 ff 80 	st.w	r7[-128],r8
8000225a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000225e:	ef 48 ff 8c 	st.w	r7[-116],r8
80002262:	ee f8 ff 80 	ld.w	r8,r7[-128]
80002266:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000226a:	ee f2 ff 8c 	ld.w	r2,r7[-116]
8000226e:	30 03       	mov	r3,0
80002270:	ee fa ff 88 	ld.w	r10,r7[-120]
80002274:	30 0b       	mov	r11,0
80002276:	e6 0a 02 49 	mul	r9,r3,r10
8000227a:	f6 02 02 48 	mul	r8,r11,r2
8000227e:	10 09       	add	r9,r8
80002280:	e4 0a 06 4a 	mulu.d	r10,r2,r10
80002284:	16 09       	add	r9,r11
80002286:	12 9b       	mov	r11,r9
80002288:	ee 78 42 3f 	mov	r8,999999
8000228c:	30 09       	mov	r9,0
8000228e:	10 0a       	add	r10,r8
80002290:	f6 09 00 4b 	adc	r11,r11,r9
80002294:	ee 78 42 40 	mov	r8,1000000
80002298:	30 09       	mov	r9,0
8000229a:	f0 1f 01 53 	mcall	800027e4 <OWTouchReset+0x5b0>
8000229e:	14 98       	mov	r8,r10
800022a0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800022a2:	ef 48 ff 94 	st.w	r7[-108],r8
800022a6:	ee c8 00 b4 	sub	r8,r7,180
800022aa:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022ae:	e1 b8 00 42 	mfsr	r8,0x108
800022b2:	10 99       	mov	r9,r8
800022b4:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022b8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022ba:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022be:	70 09       	ld.w	r9,r8[0x0]
800022c0:	ee f8 ff 94 	ld.w	r8,r7[-108]
800022c4:	10 09       	add	r9,r8
800022c6:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022ca:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800022cc:	ee f9 ff 90 	ld.w	r9,r7[-112]
800022d0:	30 08       	mov	r8,0
800022d2:	f3 68 00 08 	st.b	r9[8],r8
800022d6:	ee c8 00 b4 	sub	r8,r7,180
800022da:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022de:	e1 b8 00 42 	mfsr	r8,0x108
800022e2:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800022e6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022ea:	f1 39 00 08 	ld.ub	r9,r8[8]
800022ee:	30 28       	mov	r8,2
800022f0:	f0 09 18 00 	cp.b	r9,r8
800022f4:	c0 31       	brne	800022fa <OWTouchReset+0xc6>
    return false;
800022f6:	30 08       	mov	r8,0
800022f8:	c4 38       	rjmp	8000237e <OWTouchReset+0x14a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800022fa:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022fe:	f1 39 00 08 	ld.ub	r9,r8[8]
80002302:	30 18       	mov	r8,1
80002304:	f0 09 18 00 	cp.b	r9,r8
80002308:	c0 31       	brne	8000230e <OWTouchReset+0xda>
    return true;
8000230a:	30 18       	mov	r8,1
8000230c:	c3 98       	rjmp	8000237e <OWTouchReset+0x14a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000230e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002312:	70 09       	ld.w	r9,r8[0x0]
80002314:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002318:	70 18       	ld.w	r8,r8[0x4]
8000231a:	10 39       	cp.w	r9,r8
8000231c:	e0 88 00 1a 	brls	80002350 <OWTouchReset+0x11c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002320:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002324:	70 08       	ld.w	r8,r8[0x0]
80002326:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000232a:	10 39       	cp.w	r9,r8
8000232c:	c1 02       	brcc	8000234c <OWTouchReset+0x118>
8000232e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002332:	70 18       	ld.w	r8,r8[0x4]
80002334:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002338:	10 39       	cp.w	r9,r8
8000233a:	e0 88 00 09 	brls	8000234c <OWTouchReset+0x118>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000233e:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002342:	30 18       	mov	r8,1
80002344:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002348:	30 18       	mov	r8,1
8000234a:	c1 a8       	rjmp	8000237e <OWTouchReset+0x14a>
    }
    return false;
8000234c:	30 08       	mov	r8,0
8000234e:	c1 88       	rjmp	8000237e <OWTouchReset+0x14a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002350:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002354:	70 08       	ld.w	r8,r8[0x0]
80002356:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000235a:	10 39       	cp.w	r9,r8
8000235c:	c0 93       	brcs	8000236e <OWTouchReset+0x13a>
8000235e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002362:	70 18       	ld.w	r8,r8[0x4]
80002364:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002368:	10 39       	cp.w	r9,r8
8000236a:	e0 88 00 09 	brls	8000237c <OWTouchReset+0x148>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000236e:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002372:	30 18       	mov	r8,1
80002374:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002378:	30 18       	mov	r8,1
8000237a:	c0 28       	rjmp	8000237e <OWTouchReset+0x14a>
    }
    return false;
8000237c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000237e:	58 08       	cp.w	r8,0
80002380:	ca b0       	breq	800022d6 <OWTouchReset+0xa2>
	drive_DQ_low(idx);
80002382:	ef 38 ff 48 	ld.ub	r8,r7[-184]
80002386:	10 9c       	mov	r12,r8
80002388:	f0 1f 01 18 	mcall	800027e8 <OWTouchReset+0x5b4>
	cpu_delay_us(H, EC_CPU_CLOCK_100MHZ);	//tRSTL (reset low) 480-640us
8000238c:	fe f8 04 60 	ld.w	r8,pc[1120]
80002390:	70 08       	ld.w	r8,r8[0x0]
80002392:	ef 48 ff a4 	st.w	r7[-92],r8
80002396:	e0 68 e1 00 	mov	r8,57600
8000239a:	ea 18 05 f5 	orh	r8,0x5f5
8000239e:	ef 48 ff a0 	st.w	r7[-96],r8
800023a2:	ee f8 ff a4 	ld.w	r8,r7[-92]
800023a6:	ef 48 ff ac 	st.w	r7[-84],r8
800023aa:	ee f8 ff a0 	ld.w	r8,r7[-96]
800023ae:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800023b2:	ee fc ff ac 	ld.w	r12,r7[-84]
800023b6:	ef 4c ff 2c 	st.w	r7[-212],r12
800023ba:	30 0b       	mov	r11,0
800023bc:	ef 4b ff 28 	st.w	r7[-216],r11
800023c0:	ee f9 ff a8 	ld.w	r9,r7[-88]
800023c4:	ef 49 ff 24 	st.w	r7[-220],r9
800023c8:	30 08       	mov	r8,0
800023ca:	ef 48 ff 20 	st.w	r7[-224],r8
800023ce:	ee fa ff 28 	ld.w	r10,r7[-216]
800023d2:	ee fc ff 24 	ld.w	r12,r7[-220]
800023d6:	b9 3a       	mul	r10,r12
800023d8:	ee f8 ff 20 	ld.w	r8,r7[-224]
800023dc:	ee fb ff 2c 	ld.w	r11,r7[-212]
800023e0:	b7 38       	mul	r8,r11
800023e2:	10 0a       	add	r10,r8
800023e4:	ee fc ff 2c 	ld.w	r12,r7[-212]
800023e8:	ee fb ff 24 	ld.w	r11,r7[-220]
800023ec:	f8 0b 06 48 	mulu.d	r8,r12,r11
800023f0:	12 0a       	add	r10,r9
800023f2:	14 99       	mov	r9,r10
800023f4:	ee 7a 42 3f 	mov	r10,999999
800023f8:	30 0b       	mov	r11,0
800023fa:	f0 0a 00 0a 	add	r10,r8,r10
800023fe:	f2 0b 00 4b 	adc	r11,r9,r11
80002402:	ee 78 42 40 	mov	r8,1000000
80002406:	30 09       	mov	r9,0
80002408:	f0 1f 00 f7 	mcall	800027e4 <OWTouchReset+0x5b0>
8000240c:	14 98       	mov	r8,r10
8000240e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002410:	ef 48 ff b4 	st.w	r7[-76],r8
80002414:	ee c8 00 a8 	sub	r8,r7,168
80002418:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000241c:	e1 b8 00 42 	mfsr	r8,0x108
80002420:	10 99       	mov	r9,r8
80002422:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002426:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002428:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000242c:	70 09       	ld.w	r9,r8[0x0]
8000242e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002432:	10 09       	add	r9,r8
80002434:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002438:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000243a:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000243e:	30 08       	mov	r8,0
80002440:	f3 68 00 08 	st.b	r9[8],r8
80002444:	ee c8 00 a8 	sub	r8,r7,168
80002448:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000244c:	e1 b8 00 42 	mfsr	r8,0x108
80002450:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002454:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002458:	f1 39 00 08 	ld.ub	r9,r8[8]
8000245c:	30 28       	mov	r8,2
8000245e:	f0 09 18 00 	cp.b	r9,r8
80002462:	c0 31       	brne	80002468 <OWTouchReset+0x234>
    return false;
80002464:	30 08       	mov	r8,0
80002466:	c4 38       	rjmp	800024ec <OWTouchReset+0x2b8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002468:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000246c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002470:	30 18       	mov	r8,1
80002472:	f0 09 18 00 	cp.b	r9,r8
80002476:	c0 31       	brne	8000247c <OWTouchReset+0x248>
    return true;
80002478:	30 18       	mov	r8,1
8000247a:	c3 98       	rjmp	800024ec <OWTouchReset+0x2b8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000247c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002480:	70 09       	ld.w	r9,r8[0x0]
80002482:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002486:	70 18       	ld.w	r8,r8[0x4]
80002488:	10 39       	cp.w	r9,r8
8000248a:	e0 88 00 1a 	brls	800024be <OWTouchReset+0x28a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000248e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002492:	70 08       	ld.w	r8,r8[0x0]
80002494:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002498:	10 39       	cp.w	r9,r8
8000249a:	c1 02       	brcc	800024ba <OWTouchReset+0x286>
8000249c:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024a0:	70 18       	ld.w	r8,r8[0x4]
800024a2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024a6:	10 39       	cp.w	r9,r8
800024a8:	e0 88 00 09 	brls	800024ba <OWTouchReset+0x286>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024ac:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024b0:	30 18       	mov	r8,1
800024b2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024b6:	30 18       	mov	r8,1
800024b8:	c1 a8       	rjmp	800024ec <OWTouchReset+0x2b8>
    }
    return false;
800024ba:	30 08       	mov	r8,0
800024bc:	c1 88       	rjmp	800024ec <OWTouchReset+0x2b8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800024be:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024c2:	70 08       	ld.w	r8,r8[0x0]
800024c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024c8:	10 39       	cp.w	r9,r8
800024ca:	c0 93       	brcs	800024dc <OWTouchReset+0x2a8>
800024cc:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024d0:	70 18       	ld.w	r8,r8[0x4]
800024d2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024d6:	10 39       	cp.w	r9,r8
800024d8:	e0 88 00 09 	brls	800024ea <OWTouchReset+0x2b6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024dc:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024e0:	30 18       	mov	r8,1
800024e2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024e6:	30 18       	mov	r8,1
800024e8:	c0 28       	rjmp	800024ec <OWTouchReset+0x2b8>
    }
    return false;
800024ea:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800024ec:	58 08       	cp.w	r8,0
800024ee:	ca b0       	breq	80002444 <OWTouchReset+0x210>
	release_the_bus(idx);
800024f0:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024f4:	10 9c       	mov	r12,r8
800024f6:	f0 1f 00 bf 	mcall	800027f0 <OWTouchReset+0x5bc>
	
	gpio_input(idx); //14may15 experiment
800024fa:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024fe:	10 9c       	mov	r12,r8
80002500:	f0 1f 00 bd 	mcall	800027f4 <OWTouchReset+0x5c0>

	
	cpu_delay_us(I, EC_CPU_CLOCK_100MHZ);	//tMSP (presence detect sample) 60-75us
80002504:	fe f8 02 f4 	ld.w	r8,pc[756]
80002508:	70 08       	ld.w	r8,r8[0x0]
8000250a:	ef 48 ff c4 	st.w	r7[-60],r8
8000250e:	e0 68 e1 00 	mov	r8,57600
80002512:	ea 18 05 f5 	orh	r8,0x5f5
80002516:	ef 48 ff c0 	st.w	r7[-64],r8
8000251a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000251e:	ef 48 ff cc 	st.w	r7[-52],r8
80002522:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002526:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000252a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000252e:	ef 49 ff 3c 	st.w	r7[-196],r9
80002532:	30 08       	mov	r8,0
80002534:	ef 48 ff 38 	st.w	r7[-200],r8
80002538:	ee fc ff c8 	ld.w	r12,r7[-56]
8000253c:	ef 4c ff 34 	st.w	r7[-204],r12
80002540:	30 0b       	mov	r11,0
80002542:	ef 4b ff 30 	st.w	r7[-208],r11
80002546:	ee fa ff 38 	ld.w	r10,r7[-200]
8000254a:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000254e:	b3 3a       	mul	r10,r9
80002550:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002554:	ee fc ff 3c 	ld.w	r12,r7[-196]
80002558:	b9 38       	mul	r8,r12
8000255a:	10 0a       	add	r10,r8
8000255c:	ee fb ff 3c 	ld.w	r11,r7[-196]
80002560:	ee fc ff 34 	ld.w	r12,r7[-204]
80002564:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002568:	12 0a       	add	r10,r9
8000256a:	14 99       	mov	r9,r10
8000256c:	ee 7a 42 3f 	mov	r10,999999
80002570:	30 0b       	mov	r11,0
80002572:	f0 0a 00 0a 	add	r10,r8,r10
80002576:	f2 0b 00 4b 	adc	r11,r9,r11
8000257a:	ee 78 42 40 	mov	r8,1000000
8000257e:	30 09       	mov	r9,0
80002580:	f0 1f 00 99 	mcall	800027e4 <OWTouchReset+0x5b0>
80002584:	14 98       	mov	r8,r10
80002586:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002588:	ef 48 ff d4 	st.w	r7[-44],r8
8000258c:	ee c8 00 9c 	sub	r8,r7,156
80002590:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002594:	e1 b8 00 42 	mfsr	r8,0x108
80002598:	10 99       	mov	r9,r8
8000259a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000259e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025a0:	ee f8 ff d0 	ld.w	r8,r7[-48]
800025a4:	70 09       	ld.w	r9,r8[0x0]
800025a6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800025aa:	10 09       	add	r9,r8
800025ac:	ee f8 ff d0 	ld.w	r8,r7[-48]
800025b0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800025b2:	ee f9 ff d0 	ld.w	r9,r7[-48]
800025b6:	30 08       	mov	r8,0
800025b8:	f3 68 00 08 	st.b	r9[8],r8
800025bc:	ee c8 00 9c 	sub	r8,r7,156
800025c0:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025c4:	e1 b8 00 42 	mfsr	r8,0x108
800025c8:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800025cc:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025d0:	f1 39 00 08 	ld.ub	r9,r8[8]
800025d4:	30 28       	mov	r8,2
800025d6:	f0 09 18 00 	cp.b	r9,r8
800025da:	c0 31       	brne	800025e0 <OWTouchReset+0x3ac>
    return false;
800025dc:	30 08       	mov	r8,0
800025de:	c4 38       	rjmp	80002664 <OWTouchReset+0x430>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800025e0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025e4:	f1 39 00 08 	ld.ub	r9,r8[8]
800025e8:	30 18       	mov	r8,1
800025ea:	f0 09 18 00 	cp.b	r9,r8
800025ee:	c0 31       	brne	800025f4 <OWTouchReset+0x3c0>
    return true;
800025f0:	30 18       	mov	r8,1
800025f2:	c3 98       	rjmp	80002664 <OWTouchReset+0x430>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025f4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025f8:	70 09       	ld.w	r9,r8[0x0]
800025fa:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025fe:	70 18       	ld.w	r8,r8[0x4]
80002600:	10 39       	cp.w	r9,r8
80002602:	e0 88 00 1a 	brls	80002636 <OWTouchReset+0x402>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002606:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000260a:	70 08       	ld.w	r8,r8[0x0]
8000260c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002610:	10 39       	cp.w	r9,r8
80002612:	c1 02       	brcc	80002632 <OWTouchReset+0x3fe>
80002614:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002618:	70 18       	ld.w	r8,r8[0x4]
8000261a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000261e:	10 39       	cp.w	r9,r8
80002620:	e0 88 00 09 	brls	80002632 <OWTouchReset+0x3fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002624:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002628:	30 18       	mov	r8,1
8000262a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000262e:	30 18       	mov	r8,1
80002630:	c1 a8       	rjmp	80002664 <OWTouchReset+0x430>
    }
    return false;
80002632:	30 08       	mov	r8,0
80002634:	c1 88       	rjmp	80002664 <OWTouchReset+0x430>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002636:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000263a:	70 08       	ld.w	r8,r8[0x0]
8000263c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002640:	10 39       	cp.w	r9,r8
80002642:	c0 93       	brcs	80002654 <OWTouchReset+0x420>
80002644:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002648:	70 18       	ld.w	r8,r8[0x4]
8000264a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000264e:	10 39       	cp.w	r9,r8
80002650:	e0 88 00 09 	brls	80002662 <OWTouchReset+0x42e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002654:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002658:	30 18       	mov	r8,1
8000265a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000265e:	30 18       	mov	r8,1
80002660:	c0 28       	rjmp	80002664 <OWTouchReset+0x430>
    }
    return false;
80002662:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002664:	58 08       	cp.w	r8,0
80002666:	ca b0       	breq	800025bc <OWTouchReset+0x388>
	result = sample_line(idx);
80002668:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000266c:	10 9c       	mov	r12,r8
8000266e:	f0 1f 00 64 	mcall	800027fc <OWTouchReset+0x5c8>
80002672:	18 98       	mov	r8,r12
80002674:	ef 48 ff 7c 	st.w	r7[-132],r8
	
	gpio_input(idx); //14may15 experiement
80002678:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000267c:	10 9c       	mov	r12,r8
8000267e:	f0 1f 00 5e 	mcall	800027f4 <OWTouchReset+0x5c0>

	cpu_delay_us(J, EC_CPU_CLOCK_100MHZ); // Complete the reset sequence recovery 5-??us (no max?)
80002682:	4e 08       	lddpc	r8,80002800 <OWTouchReset+0x5cc>
80002684:	70 08       	ld.w	r8,r8[0x0]
80002686:	ef 48 ff e4 	st.w	r7[-28],r8
8000268a:	e0 68 e1 00 	mov	r8,57600
8000268e:	ea 18 05 f5 	orh	r8,0x5f5
80002692:	ef 48 ff e0 	st.w	r7[-32],r8
80002696:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000269a:	ef 48 ff ec 	st.w	r7[-20],r8
8000269e:	ee f8 ff e0 	ld.w	r8,r7[-32]
800026a2:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800026a6:	ee fb ff ec 	ld.w	r11,r7[-20]
800026aa:	ef 4b ff 44 	st.w	r7[-188],r11
800026ae:	30 09       	mov	r9,0
800026b0:	ef 49 ff 40 	st.w	r7[-192],r9
800026b4:	ee f0 ff e8 	ld.w	r0,r7[-24]
800026b8:	30 01       	mov	r1,0
800026ba:	ee fa ff 40 	ld.w	r10,r7[-192]
800026be:	a1 3a       	mul	r10,r0
800026c0:	ee fc ff 44 	ld.w	r12,r7[-188]
800026c4:	e2 0c 02 48 	mul	r8,r1,r12
800026c8:	10 0a       	add	r10,r8
800026ca:	ee fb ff 44 	ld.w	r11,r7[-188]
800026ce:	f6 00 06 48 	mulu.d	r8,r11,r0
800026d2:	12 0a       	add	r10,r9
800026d4:	14 99       	mov	r9,r10
800026d6:	ee 7a 42 3f 	mov	r10,999999
800026da:	30 0b       	mov	r11,0
800026dc:	f0 0a 00 0a 	add	r10,r8,r10
800026e0:	f2 0b 00 4b 	adc	r11,r9,r11
800026e4:	ee 78 42 40 	mov	r8,1000000
800026e8:	30 09       	mov	r9,0
800026ea:	f0 1f 00 3f 	mcall	800027e4 <OWTouchReset+0x5b0>
800026ee:	14 98       	mov	r8,r10
800026f0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800026f2:	ef 48 ff f4 	st.w	r7[-12],r8
800026f6:	ee c8 00 90 	sub	r8,r7,144
800026fa:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026fe:	e1 b8 00 42 	mfsr	r8,0x108
80002702:	10 99       	mov	r9,r8
80002704:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002708:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000270a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000270e:	70 09       	ld.w	r9,r8[0x0]
80002710:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002714:	10 09       	add	r9,r8
80002716:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000271a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000271c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002720:	30 08       	mov	r8,0
80002722:	f3 68 00 08 	st.b	r9[8],r8
80002726:	ee c8 00 90 	sub	r8,r7,144
8000272a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000272e:	e1 b8 00 42 	mfsr	r8,0x108
80002732:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002736:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000273a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000273e:	30 28       	mov	r8,2
80002740:	f0 09 18 00 	cp.b	r9,r8
80002744:	c0 31       	brne	8000274a <OWTouchReset+0x516>
    return false;
80002746:	30 08       	mov	r8,0
80002748:	c4 38       	rjmp	800027ce <OWTouchReset+0x59a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000274a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000274e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002752:	30 18       	mov	r8,1
80002754:	f0 09 18 00 	cp.b	r9,r8
80002758:	c0 31       	brne	8000275e <OWTouchReset+0x52a>
    return true;
8000275a:	30 18       	mov	r8,1
8000275c:	c3 98       	rjmp	800027ce <OWTouchReset+0x59a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000275e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002762:	70 09       	ld.w	r9,r8[0x0]
80002764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002768:	70 18       	ld.w	r8,r8[0x4]
8000276a:	10 39       	cp.w	r9,r8
8000276c:	e0 88 00 1a 	brls	800027a0 <OWTouchReset+0x56c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002774:	70 08       	ld.w	r8,r8[0x0]
80002776:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000277a:	10 39       	cp.w	r9,r8
8000277c:	c1 02       	brcc	8000279c <OWTouchReset+0x568>
8000277e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002782:	70 18       	ld.w	r8,r8[0x4]
80002784:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002788:	10 39       	cp.w	r9,r8
8000278a:	e0 88 00 09 	brls	8000279c <OWTouchReset+0x568>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000278e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002792:	30 18       	mov	r8,1
80002794:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002798:	30 18       	mov	r8,1
8000279a:	c1 a8       	rjmp	800027ce <OWTouchReset+0x59a>
    }
    return false;
8000279c:	30 08       	mov	r8,0
8000279e:	c1 88       	rjmp	800027ce <OWTouchReset+0x59a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800027a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027a4:	70 08       	ld.w	r8,r8[0x0]
800027a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027aa:	10 39       	cp.w	r9,r8
800027ac:	c0 93       	brcs	800027be <OWTouchReset+0x58a>
800027ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027b2:	70 18       	ld.w	r8,r8[0x4]
800027b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027b8:	10 39       	cp.w	r9,r8
800027ba:	e0 88 00 09 	brls	800027cc <OWTouchReset+0x598>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800027c2:	30 18       	mov	r8,1
800027c4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027c8:	30 18       	mov	r8,1
800027ca:	c0 28       	rjmp	800027ce <OWTouchReset+0x59a>
    }
    return false;
800027cc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800027ce:	58 08       	cp.w	r8,0
800027d0:	ca b0       	breq	80002726 <OWTouchReset+0x4f2>
	return result; // Return sample presence pulse result
800027d2:	ee f8 ff 7c 	ld.w	r8,r7[-132]
}
800027d6:	10 9c       	mov	r12,r8
800027d8:	2c 8d       	sub	sp,-224
800027da:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800027de:	00 00       	add	r0,r0
800027e0:	00 00       	add	r0,r0
800027e2:	07 f4       	ld.ub	r4,r3[0x7]
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	ae c2       	st.b	r7[0x4],r2
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	20 5c       	sub	r12,5
800027ec:	00 00       	add	r0,r0
800027ee:	08 08       	add	r8,r4
800027f0:	80 00       	ld.sh	r0,r0[0x0]
800027f2:	20 ac       	sub	r12,10
800027f4:	80 00       	ld.sh	r0,r0[0x0]
800027f6:	20 f0       	sub	r0,15
800027f8:	00 00       	add	r0,r0
800027fa:	08 10       	sub	r0,r4
800027fc:	80 00       	ld.sh	r0,r0[0x0]
800027fe:	21 30       	sub	r0,19
80002800:	00 00       	add	r0,r0
80002802:	07 fc       	ld.ub	r12,r3[0x7]

80002804 <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
80002804:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002808:	1a 97       	mov	r7,sp
8000280a:	20 fd       	sub	sp,60
8000280c:	18 98       	mov	r8,r12
8000280e:	ef 68 ff c4 	st.b	r7[-60],r8
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
80002812:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80002816:	10 9c       	mov	r12,r8
80002818:	f0 1f 00 61 	mcall	8000299c <drive_DQ_low_and_release_the_bus+0x198>
8000281c:	18 98       	mov	r8,r12
8000281e:	ef 68 ff d7 	st.b	r7[-41],r8
	
	ioFlagsInput = (GPIO_DIR_INPUT);
80002822:	30 08       	mov	r8,0
80002824:	ef 48 ff dc 	st.w	r7[-36],r8
	ioFlagsOutput = (GPIO_DIR_OUTPUT); //14may15 experiment
80002828:	30 18       	mov	r8,1
8000282a:	ef 48 ff d8 	st.w	r7[-40],r8

	gpio_configure_pin(ioPin, ioFlagsOutput); //14may15 experiment
8000282e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002832:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80002836:	12 9b       	mov	r11,r9
80002838:	10 9c       	mov	r12,r8
8000283a:	f0 1f 00 5a 	mcall	800029a0 <drive_DQ_low_and_release_the_bus+0x19c>

	gpio_set_pin_low(ioPin);
8000283e:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80002842:	10 9c       	mov	r12,r8
80002844:	f0 1f 00 58 	mcall	800029a4 <drive_DQ_low_and_release_the_bus+0x1a0>
	
	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ);	//tW1L 5-15us
80002848:	4d 88       	lddpc	r8,800029a8 <drive_DQ_low_and_release_the_bus+0x1a4>
8000284a:	70 08       	ld.w	r8,r8[0x0]
8000284c:	ef 48 ff e4 	st.w	r7[-28],r8
80002850:	e0 68 e1 00 	mov	r8,57600
80002854:	ea 18 05 f5 	orh	r8,0x5f5
80002858:	ef 48 ff e0 	st.w	r7[-32],r8
8000285c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002860:	ef 48 ff ec 	st.w	r7[-20],r8
80002864:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002868:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000286c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002870:	30 01       	mov	r1,0
80002872:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002876:	30 03       	mov	r3,0
80002878:	e2 02 02 4a 	mul	r10,r1,r2
8000287c:	e6 00 02 48 	mul	r8,r3,r0
80002880:	10 0a       	add	r10,r8
80002882:	e0 02 06 48 	mulu.d	r8,r0,r2
80002886:	12 0a       	add	r10,r9
80002888:	14 99       	mov	r9,r10
8000288a:	ee 7a 42 3f 	mov	r10,999999
8000288e:	30 0b       	mov	r11,0
80002890:	f0 0a 00 0a 	add	r10,r8,r10
80002894:	f2 0b 00 4b 	adc	r11,r9,r11
80002898:	ee 78 42 40 	mov	r8,1000000
8000289c:	30 09       	mov	r9,0
8000289e:	f0 1f 00 44 	mcall	800029ac <drive_DQ_low_and_release_the_bus+0x1a8>
800028a2:	14 98       	mov	r8,r10
800028a4:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800028a6:	ef 48 ff f4 	st.w	r7[-12],r8
800028aa:	ee c8 00 38 	sub	r8,r7,56
800028ae:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800028b2:	e1 b8 00 42 	mfsr	r8,0x108
800028b6:	10 99       	mov	r9,r8
800028b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028bc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800028be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028c2:	70 09       	ld.w	r9,r8[0x0]
800028c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028c8:	10 09       	add	r9,r8
800028ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028ce:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800028d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800028d4:	30 08       	mov	r8,0
800028d6:	f3 68 00 08 	st.b	r9[8],r8
800028da:	ee c8 00 38 	sub	r8,r7,56
800028de:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800028e2:	e1 b8 00 42 	mfsr	r8,0x108
800028e6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800028ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ee:	f1 39 00 08 	ld.ub	r9,r8[8]
800028f2:	30 28       	mov	r8,2
800028f4:	f0 09 18 00 	cp.b	r9,r8
800028f8:	c0 31       	brne	800028fe <drive_DQ_low_and_release_the_bus+0xfa>
    return false;
800028fa:	30 08       	mov	r8,0
800028fc:	c4 38       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800028fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002902:	f1 39 00 08 	ld.ub	r9,r8[8]
80002906:	30 18       	mov	r8,1
80002908:	f0 09 18 00 	cp.b	r9,r8
8000290c:	c0 31       	brne	80002912 <drive_DQ_low_and_release_the_bus+0x10e>
    return true;
8000290e:	30 18       	mov	r8,1
80002910:	c3 98       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002912:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002916:	70 09       	ld.w	r9,r8[0x0]
80002918:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000291c:	70 18       	ld.w	r8,r8[0x4]
8000291e:	10 39       	cp.w	r9,r8
80002920:	e0 88 00 1a 	brls	80002954 <drive_DQ_low_and_release_the_bus+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002924:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002928:	70 08       	ld.w	r8,r8[0x0]
8000292a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000292e:	10 39       	cp.w	r9,r8
80002930:	c1 02       	brcc	80002950 <drive_DQ_low_and_release_the_bus+0x14c>
80002932:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002936:	70 18       	ld.w	r8,r8[0x4]
80002938:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000293c:	10 39       	cp.w	r9,r8
8000293e:	e0 88 00 09 	brls	80002950 <drive_DQ_low_and_release_the_bus+0x14c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002942:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002946:	30 18       	mov	r8,1
80002948:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000294c:	30 18       	mov	r8,1
8000294e:	c1 a8       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
    }
    return false;
80002950:	30 08       	mov	r8,0
80002952:	c1 88       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002954:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002958:	70 08       	ld.w	r8,r8[0x0]
8000295a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000295e:	10 39       	cp.w	r9,r8
80002960:	c0 93       	brcs	80002972 <drive_DQ_low_and_release_the_bus+0x16e>
80002962:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002966:	70 18       	ld.w	r8,r8[0x4]
80002968:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000296c:	10 39       	cp.w	r9,r8
8000296e:	e0 88 00 09 	brls	80002980 <drive_DQ_low_and_release_the_bus+0x17c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002972:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002976:	30 18       	mov	r8,1
80002978:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000297c:	30 18       	mov	r8,1
8000297e:	c0 28       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
    }
    return false;
80002980:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002982:	58 08       	cp.w	r8,0
80002984:	ca b0       	breq	800028da <drive_DQ_low_and_release_the_bus+0xd6>

	gpio_configure_pin(ioPin, ioFlagsInput); //14may15 experiment
80002986:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000298a:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000298e:	12 9b       	mov	r11,r9
80002990:	10 9c       	mov	r12,r8
80002992:	f0 1f 00 04 	mcall	800029a0 <drive_DQ_low_and_release_the_bus+0x19c>
	
}
80002996:	2f 1d       	sub	sp,-60
80002998:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000299c:	80 00       	ld.sh	r0,r0[0x0]
8000299e:	20 10       	sub	r0,1
800029a0:	80 00       	ld.sh	r0,r0[0x0]
800029a2:	48 28       	lddpc	r8,800029a8 <drive_DQ_low_and_release_the_bus+0x1a4>
800029a4:	80 00       	ld.sh	r0,r0[0x0]
800029a6:	4b 3c       	lddpc	r12,80002a70 <OWWriteBit+0xc0>
800029a8:	00 00       	add	r0,r0
800029aa:	07 f4       	ld.ub	r4,r3[0x7]
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	ae c2       	st.b	r7[0x4],r2

800029b0 <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
800029b0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800029b4:	1a 97       	mov	r7,sp
800029b6:	fa cd 00 ac 	sub	sp,sp,172
800029ba:	18 98       	mov	r8,r12
800029bc:	ef 4b ff 74 	st.w	r7[-140],r11
800029c0:	ef 68 ff 78 	st.b	r7[-136],r8
	if (bit)
800029c4:	ee f8 ff 74 	ld.w	r8,r7[-140]
800029c8:	58 08       	cp.w	r8,0
800029ca:	e0 80 00 ba 	breq	80002b3e <OWWriteBit+0x18e>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
800029ce:	ef 38 ff 78 	ld.ub	r8,r7[-136]
800029d2:	10 9c       	mov	r12,r8
800029d4:	f0 1f 01 0a 	mcall	80002dfc <OWWriteBit+0x44c>
#if 0
		drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough		cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tW1L 5-15us
		release_the_bus(idx);
#endif
		cpu_delay_us(B, EC_CPU_CLOCK_100MHZ);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
800029d8:	fe f8 04 28 	ld.w	r8,pc[1064]
800029dc:	70 08       	ld.w	r8,r8[0x0]
800029de:	ef 48 ff a4 	st.w	r7[-92],r8
800029e2:	e0 68 e1 00 	mov	r8,57600
800029e6:	ea 18 05 f5 	orh	r8,0x5f5
800029ea:	ef 48 ff a0 	st.w	r7[-96],r8
800029ee:	ee f8 ff a4 	ld.w	r8,r7[-92]
800029f2:	ef 48 ff ac 	st.w	r7[-84],r8
800029f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800029fa:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800029fe:	ee fc ff ac 	ld.w	r12,r7[-84]
80002a02:	ef 4c ff 60 	st.w	r7[-160],r12
80002a06:	30 0b       	mov	r11,0
80002a08:	ef 4b ff 5c 	st.w	r7[-164],r11
80002a0c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80002a10:	ef 49 ff 58 	st.w	r7[-168],r9
80002a14:	30 08       	mov	r8,0
80002a16:	ef 48 ff 54 	st.w	r7[-172],r8
80002a1a:	ee fa ff 5c 	ld.w	r10,r7[-164]
80002a1e:	ee fc ff 58 	ld.w	r12,r7[-168]
80002a22:	b9 3a       	mul	r10,r12
80002a24:	ee f8 ff 54 	ld.w	r8,r7[-172]
80002a28:	ee fb ff 60 	ld.w	r11,r7[-160]
80002a2c:	b7 38       	mul	r8,r11
80002a2e:	10 0a       	add	r10,r8
80002a30:	ee fc ff 60 	ld.w	r12,r7[-160]
80002a34:	ee fb ff 58 	ld.w	r11,r7[-168]
80002a38:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002a3c:	12 0a       	add	r10,r9
80002a3e:	14 99       	mov	r9,r10
80002a40:	ee 7a 42 3f 	mov	r10,999999
80002a44:	30 0b       	mov	r11,0
80002a46:	f0 0a 00 0a 	add	r10,r8,r10
80002a4a:	f2 0b 00 4b 	adc	r11,r9,r11
80002a4e:	ee 78 42 40 	mov	r8,1000000
80002a52:	30 09       	mov	r9,0
80002a54:	f0 1f 00 ec 	mcall	80002e04 <OWWriteBit+0x454>
80002a58:	14 98       	mov	r8,r10
80002a5a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002a5c:	ef 48 ff b4 	st.w	r7[-76],r8
80002a60:	ee c8 00 84 	sub	r8,r7,132
80002a64:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a68:	e1 b8 00 42 	mfsr	r8,0x108
80002a6c:	10 99       	mov	r9,r8
80002a6e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a72:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a74:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a78:	70 09       	ld.w	r9,r8[0x0]
80002a7a:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002a7e:	10 09       	add	r9,r8
80002a80:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a84:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002a86:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002a8a:	30 08       	mov	r8,0
80002a8c:	f3 68 00 08 	st.b	r9[8],r8
80002a90:	ee c8 00 84 	sub	r8,r7,132
80002a94:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a98:	e1 b8 00 42 	mfsr	r8,0x108
80002a9c:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002aa0:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002aa4:	f1 39 00 08 	ld.ub	r9,r8[8]
80002aa8:	30 28       	mov	r8,2
80002aaa:	f0 09 18 00 	cp.b	r9,r8
80002aae:	c0 31       	brne	80002ab4 <OWWriteBit+0x104>
    return false;
80002ab0:	30 08       	mov	r8,0
80002ab2:	c4 38       	rjmp	80002b38 <OWWriteBit+0x188>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002ab4:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ab8:	f1 39 00 08 	ld.ub	r9,r8[8]
80002abc:	30 18       	mov	r8,1
80002abe:	f0 09 18 00 	cp.b	r9,r8
80002ac2:	c0 31       	brne	80002ac8 <OWWriteBit+0x118>
    return true;
80002ac4:	30 18       	mov	r8,1
80002ac6:	c3 98       	rjmp	80002b38 <OWWriteBit+0x188>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ac8:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002acc:	70 09       	ld.w	r9,r8[0x0]
80002ace:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ad2:	70 18       	ld.w	r8,r8[0x4]
80002ad4:	10 39       	cp.w	r9,r8
80002ad6:	e0 88 00 1a 	brls	80002b0a <OWWriteBit+0x15a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ada:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ade:	70 08       	ld.w	r8,r8[0x0]
80002ae0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002ae4:	10 39       	cp.w	r9,r8
80002ae6:	c1 02       	brcc	80002b06 <OWWriteBit+0x156>
80002ae8:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002aec:	70 18       	ld.w	r8,r8[0x4]
80002aee:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002af2:	10 39       	cp.w	r9,r8
80002af4:	e0 88 00 09 	brls	80002b06 <OWWriteBit+0x156>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002af8:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002afc:	30 18       	mov	r8,1
80002afe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b02:	30 18       	mov	r8,1
80002b04:	c1 a8       	rjmp	80002b38 <OWWriteBit+0x188>
    }
    return false;
80002b06:	30 08       	mov	r8,0
80002b08:	c1 88       	rjmp	80002b38 <OWWriteBit+0x188>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002b0a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002b0e:	70 08       	ld.w	r8,r8[0x0]
80002b10:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002b14:	10 39       	cp.w	r9,r8
80002b16:	c0 93       	brcs	80002b28 <OWWriteBit+0x178>
80002b18:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002b1c:	70 18       	ld.w	r8,r8[0x4]
80002b1e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002b22:	10 39       	cp.w	r9,r8
80002b24:	e0 88 00 09 	brls	80002b36 <OWWriteBit+0x186>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002b28:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002b2c:	30 18       	mov	r8,1
80002b2e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b32:	30 18       	mov	r8,1
80002b34:	c0 28       	rjmp	80002b38 <OWWriteBit+0x188>
    }
    return false;
80002b36:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002b38:	58 08       	cp.w	r8,0
80002b3a:	ca b0       	breq	80002a90 <OWWriteBit+0xe0>
80002b3c:	c5 c9       	rjmp	80002df4 <OWWriteBit+0x444>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
80002b3e:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002b42:	10 9c       	mov	r12,r8
80002b44:	f0 1f 00 b1 	mcall	80002e08 <OWWriteBit+0x458>
		cpu_delay_us(C, EC_CPU_CLOCK_100MHZ);	//tW0L 60-120us
80002b48:	fe f8 02 c4 	ld.w	r8,pc[708]
80002b4c:	70 08       	ld.w	r8,r8[0x0]
80002b4e:	ef 48 ff c4 	st.w	r7[-60],r8
80002b52:	e0 68 e1 00 	mov	r8,57600
80002b56:	ea 18 05 f5 	orh	r8,0x5f5
80002b5a:	ef 48 ff c0 	st.w	r7[-64],r8
80002b5e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002b62:	ef 48 ff cc 	st.w	r7[-52],r8
80002b66:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002b6a:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002b6e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80002b72:	ef 49 ff 70 	st.w	r7[-144],r9
80002b76:	30 08       	mov	r8,0
80002b78:	ef 48 ff 6c 	st.w	r7[-148],r8
80002b7c:	ee fc ff c8 	ld.w	r12,r7[-56]
80002b80:	ef 4c ff 68 	st.w	r7[-152],r12
80002b84:	30 0b       	mov	r11,0
80002b86:	ef 4b ff 64 	st.w	r7[-156],r11
80002b8a:	ee fa ff 6c 	ld.w	r10,r7[-148]
80002b8e:	ee f9 ff 68 	ld.w	r9,r7[-152]
80002b92:	b3 3a       	mul	r10,r9
80002b94:	ee f8 ff 64 	ld.w	r8,r7[-156]
80002b98:	ee fc ff 70 	ld.w	r12,r7[-144]
80002b9c:	b9 38       	mul	r8,r12
80002b9e:	10 0a       	add	r10,r8
80002ba0:	ee fb ff 70 	ld.w	r11,r7[-144]
80002ba4:	ee fc ff 68 	ld.w	r12,r7[-152]
80002ba8:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002bac:	12 0a       	add	r10,r9
80002bae:	14 99       	mov	r9,r10
80002bb0:	ee 7a 42 3f 	mov	r10,999999
80002bb4:	30 0b       	mov	r11,0
80002bb6:	f0 0a 00 0a 	add	r10,r8,r10
80002bba:	f2 0b 00 4b 	adc	r11,r9,r11
80002bbe:	ee 78 42 40 	mov	r8,1000000
80002bc2:	30 09       	mov	r9,0
80002bc4:	f0 1f 00 90 	mcall	80002e04 <OWWriteBit+0x454>
80002bc8:	14 98       	mov	r8,r10
80002bca:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002bcc:	ef 48 ff d4 	st.w	r7[-44],r8
80002bd0:	ee c8 00 78 	sub	r8,r7,120
80002bd4:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002bd8:	e1 b8 00 42 	mfsr	r8,0x108
80002bdc:	10 99       	mov	r9,r8
80002bde:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002be2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002be4:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002be8:	70 09       	ld.w	r9,r8[0x0]
80002bea:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002bee:	10 09       	add	r9,r8
80002bf0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002bf4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002bf6:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002bfa:	30 08       	mov	r8,0
80002bfc:	f3 68 00 08 	st.b	r9[8],r8
80002c00:	ee c8 00 78 	sub	r8,r7,120
80002c04:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c08:	e1 b8 00 42 	mfsr	r8,0x108
80002c0c:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002c10:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c14:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c18:	30 28       	mov	r8,2
80002c1a:	f0 09 18 00 	cp.b	r9,r8
80002c1e:	c0 31       	brne	80002c24 <OWWriteBit+0x274>
    return false;
80002c20:	30 08       	mov	r8,0
80002c22:	c4 38       	rjmp	80002ca8 <OWWriteBit+0x2f8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002c24:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c28:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c2c:	30 18       	mov	r8,1
80002c2e:	f0 09 18 00 	cp.b	r9,r8
80002c32:	c0 31       	brne	80002c38 <OWWriteBit+0x288>
    return true;
80002c34:	30 18       	mov	r8,1
80002c36:	c3 98       	rjmp	80002ca8 <OWWriteBit+0x2f8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c38:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c3c:	70 09       	ld.w	r9,r8[0x0]
80002c3e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c42:	70 18       	ld.w	r8,r8[0x4]
80002c44:	10 39       	cp.w	r9,r8
80002c46:	e0 88 00 1a 	brls	80002c7a <OWWriteBit+0x2ca>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c4a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c4e:	70 08       	ld.w	r8,r8[0x0]
80002c50:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c54:	10 39       	cp.w	r9,r8
80002c56:	c1 02       	brcc	80002c76 <OWWriteBit+0x2c6>
80002c58:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c5c:	70 18       	ld.w	r8,r8[0x4]
80002c5e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c62:	10 39       	cp.w	r9,r8
80002c64:	e0 88 00 09 	brls	80002c76 <OWWriteBit+0x2c6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c68:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c6c:	30 18       	mov	r8,1
80002c6e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002c72:	30 18       	mov	r8,1
80002c74:	c1 a8       	rjmp	80002ca8 <OWWriteBit+0x2f8>
    }
    return false;
80002c76:	30 08       	mov	r8,0
80002c78:	c1 88       	rjmp	80002ca8 <OWWriteBit+0x2f8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c7a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c7e:	70 08       	ld.w	r8,r8[0x0]
80002c80:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c84:	10 39       	cp.w	r9,r8
80002c86:	c0 93       	brcs	80002c98 <OWWriteBit+0x2e8>
80002c88:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c8c:	70 18       	ld.w	r8,r8[0x4]
80002c8e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c92:	10 39       	cp.w	r9,r8
80002c94:	e0 88 00 09 	brls	80002ca6 <OWWriteBit+0x2f6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c98:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c9c:	30 18       	mov	r8,1
80002c9e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ca2:	30 18       	mov	r8,1
80002ca4:	c0 28       	rjmp	80002ca8 <OWWriteBit+0x2f8>
    }
    return false;
80002ca6:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002ca8:	58 08       	cp.w	r8,0
80002caa:	ca b0       	breq	80002c00 <OWWriteBit+0x250>
		release_the_bus(idx);
80002cac:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002cb0:	10 9c       	mov	r12,r8
80002cb2:	f0 1f 00 58 	mcall	80002e10 <OWWriteBit+0x460>
		cpu_delay_us(D, EC_CPU_CLOCK_100MHZ);	//tREC 5-??us
80002cb6:	4d 88       	lddpc	r8,80002e14 <OWWriteBit+0x464>
80002cb8:	70 08       	ld.w	r8,r8[0x0]
80002cba:	ef 48 ff e4 	st.w	r7[-28],r8
80002cbe:	e0 68 e1 00 	mov	r8,57600
80002cc2:	ea 18 05 f5 	orh	r8,0x5f5
80002cc6:	ef 48 ff e0 	st.w	r7[-32],r8
80002cca:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002cce:	ef 48 ff ec 	st.w	r7[-20],r8
80002cd2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002cd6:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002cda:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002cde:	30 01       	mov	r1,0
80002ce0:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002ce4:	30 03       	mov	r3,0
80002ce6:	e2 02 02 4a 	mul	r10,r1,r2
80002cea:	e6 00 02 48 	mul	r8,r3,r0
80002cee:	10 0a       	add	r10,r8
80002cf0:	e0 02 06 48 	mulu.d	r8,r0,r2
80002cf4:	12 0a       	add	r10,r9
80002cf6:	14 99       	mov	r9,r10
80002cf8:	ee 7a 42 3f 	mov	r10,999999
80002cfc:	30 0b       	mov	r11,0
80002cfe:	f0 0a 00 0a 	add	r10,r8,r10
80002d02:	f2 0b 00 4b 	adc	r11,r9,r11
80002d06:	ee 78 42 40 	mov	r8,1000000
80002d0a:	30 09       	mov	r9,0
80002d0c:	f0 1f 00 3e 	mcall	80002e04 <OWWriteBit+0x454>
80002d10:	14 98       	mov	r8,r10
80002d12:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002d14:	ef 48 ff f4 	st.w	r7[-12],r8
80002d18:	ee c8 00 6c 	sub	r8,r7,108
80002d1c:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d20:	e1 b8 00 42 	mfsr	r8,0x108
80002d24:	10 99       	mov	r9,r8
80002d26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d2a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d30:	70 09       	ld.w	r9,r8[0x0]
80002d32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d36:	10 09       	add	r9,r8
80002d38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d3c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002d3e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002d42:	30 08       	mov	r8,0
80002d44:	f3 68 00 08 	st.b	r9[8],r8
80002d48:	ee c8 00 6c 	sub	r8,r7,108
80002d4c:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d50:	e1 b8 00 42 	mfsr	r8,0x108
80002d54:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002d58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d5c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d60:	30 28       	mov	r8,2
80002d62:	f0 09 18 00 	cp.b	r9,r8
80002d66:	c0 31       	brne	80002d6c <OWWriteBit+0x3bc>
    return false;
80002d68:	30 08       	mov	r8,0
80002d6a:	c4 38       	rjmp	80002df0 <OWWriteBit+0x440>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d70:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d74:	30 18       	mov	r8,1
80002d76:	f0 09 18 00 	cp.b	r9,r8
80002d7a:	c0 31       	brne	80002d80 <OWWriteBit+0x3d0>
    return true;
80002d7c:	30 18       	mov	r8,1
80002d7e:	c3 98       	rjmp	80002df0 <OWWriteBit+0x440>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d84:	70 09       	ld.w	r9,r8[0x0]
80002d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d8a:	70 18       	ld.w	r8,r8[0x4]
80002d8c:	10 39       	cp.w	r9,r8
80002d8e:	e0 88 00 1a 	brls	80002dc2 <OWWriteBit+0x412>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d96:	70 08       	ld.w	r8,r8[0x0]
80002d98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d9c:	10 39       	cp.w	r9,r8
80002d9e:	c1 02       	brcc	80002dbe <OWWriteBit+0x40e>
80002da0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002da4:	70 18       	ld.w	r8,r8[0x4]
80002da6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002daa:	10 39       	cp.w	r9,r8
80002dac:	e0 88 00 09 	brls	80002dbe <OWWriteBit+0x40e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002db0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002db4:	30 18       	mov	r8,1
80002db6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dba:	30 18       	mov	r8,1
80002dbc:	c1 a8       	rjmp	80002df0 <OWWriteBit+0x440>
    }
    return false;
80002dbe:	30 08       	mov	r8,0
80002dc0:	c1 88       	rjmp	80002df0 <OWWriteBit+0x440>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dc6:	70 08       	ld.w	r8,r8[0x0]
80002dc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dcc:	10 39       	cp.w	r9,r8
80002dce:	c0 93       	brcs	80002de0 <OWWriteBit+0x430>
80002dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dd4:	70 18       	ld.w	r8,r8[0x4]
80002dd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dda:	10 39       	cp.w	r9,r8
80002ddc:	e0 88 00 09 	brls	80002dee <OWWriteBit+0x43e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002de0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002de4:	30 18       	mov	r8,1
80002de6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dea:	30 18       	mov	r8,1
80002dec:	c0 28       	rjmp	80002df0 <OWWriteBit+0x440>
    }
    return false;
80002dee:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002df0:	58 08       	cp.w	r8,0
80002df2:	ca b0       	breq	80002d48 <OWWriteBit+0x398>
	}
}
80002df4:	2d 5d       	sub	sp,-172
80002df6:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002dfa:	00 00       	add	r0,r0
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	28 04       	sub	r4,-128
80002e00:	00 00       	add	r0,r0
80002e02:	07 f8       	ld.ub	r8,r3[0x7]
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	ae c2       	st.b	r7[0x4],r2
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	20 5c       	sub	r12,5
80002e0c:	00 00       	add	r0,r0
80002e0e:	08 00       	add	r0,r4
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	20 ac       	sub	r12,10
80002e14:	00 00       	add	r0,r0
80002e16:	07 f0       	ld.ub	r0,r3[0x7]

80002e18 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
80002e18:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002e1c:	1a 97       	mov	r7,sp
80002e1e:	21 cd       	sub	sp,112
80002e20:	18 98       	mov	r8,r12
80002e22:	ef 68 ff a0 	st.b	r7[-96],r8
#if 0
	drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tRL 5-15us
	release_the_bus(idx);
#endif
	drive_DQ_low_and_release_the_bus(idx);
80002e26:	ef 38 ff a0 	ld.ub	r8,r7[-96]
80002e2a:	10 9c       	mov	r12,r8
80002e2c:	f0 1f 00 b1 	mcall	800030f0 <OWReadBit+0x2d8>
	
	cpu_delay_us(E, EC_CPU_CLOCK_100MHZ);	//tMSR 5-15us
80002e30:	fe f8 02 c4 	ld.w	r8,pc[708]
80002e34:	70 08       	ld.w	r8,r8[0x0]
80002e36:	ef 48 ff c4 	st.w	r7[-60],r8
80002e3a:	e0 68 e1 00 	mov	r8,57600
80002e3e:	ea 18 05 f5 	orh	r8,0x5f5
80002e42:	ef 48 ff c0 	st.w	r7[-64],r8
80002e46:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002e4a:	ef 48 ff cc 	st.w	r7[-52],r8
80002e4e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002e52:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002e56:	ee fc ff cc 	ld.w	r12,r7[-52]
80002e5a:	ef 4c ff 9c 	st.w	r7[-100],r12
80002e5e:	30 0b       	mov	r11,0
80002e60:	ef 4b ff 98 	st.w	r7[-104],r11
80002e64:	ee f9 ff c8 	ld.w	r9,r7[-56]
80002e68:	ef 49 ff 94 	st.w	r7[-108],r9
80002e6c:	30 08       	mov	r8,0
80002e6e:	ef 48 ff 90 	st.w	r7[-112],r8
80002e72:	ee fa ff 98 	ld.w	r10,r7[-104]
80002e76:	ee fc ff 94 	ld.w	r12,r7[-108]
80002e7a:	b9 3a       	mul	r10,r12
80002e7c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002e80:	ee fb ff 9c 	ld.w	r11,r7[-100]
80002e84:	b7 38       	mul	r8,r11
80002e86:	10 0a       	add	r10,r8
80002e88:	ee fc ff 9c 	ld.w	r12,r7[-100]
80002e8c:	ee fb ff 94 	ld.w	r11,r7[-108]
80002e90:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002e94:	12 0a       	add	r10,r9
80002e96:	14 99       	mov	r9,r10
80002e98:	ee 7a 42 3f 	mov	r10,999999
80002e9c:	30 0b       	mov	r11,0
80002e9e:	f0 0a 00 0a 	add	r10,r8,r10
80002ea2:	f2 0b 00 4b 	adc	r11,r9,r11
80002ea6:	ee 78 42 40 	mov	r8,1000000
80002eaa:	30 09       	mov	r9,0
80002eac:	f0 1f 00 93 	mcall	800030f8 <OWReadBit+0x2e0>
80002eb0:	14 98       	mov	r8,r10
80002eb2:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002eb4:	ef 48 ff d4 	st.w	r7[-44],r8
80002eb8:	ee c8 00 5c 	sub	r8,r7,92
80002ebc:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ec0:	e1 b8 00 42 	mfsr	r8,0x108
80002ec4:	10 99       	mov	r9,r8
80002ec6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002eca:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ecc:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002ed0:	70 09       	ld.w	r9,r8[0x0]
80002ed2:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ed6:	10 09       	add	r9,r8
80002ed8:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002edc:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002ede:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002ee2:	30 08       	mov	r8,0
80002ee4:	f3 68 00 08 	st.b	r9[8],r8
80002ee8:	ee c8 00 5c 	sub	r8,r7,92
80002eec:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ef0:	e1 b8 00 42 	mfsr	r8,0x108
80002ef4:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002ef8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002efc:	f1 39 00 08 	ld.ub	r9,r8[8]
80002f00:	30 28       	mov	r8,2
80002f02:	f0 09 18 00 	cp.b	r9,r8
80002f06:	c0 31       	brne	80002f0c <OWReadBit+0xf4>
    return false;
80002f08:	30 08       	mov	r8,0
80002f0a:	c4 38       	rjmp	80002f90 <OWReadBit+0x178>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002f0c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f10:	f1 39 00 08 	ld.ub	r9,r8[8]
80002f14:	30 18       	mov	r8,1
80002f16:	f0 09 18 00 	cp.b	r9,r8
80002f1a:	c0 31       	brne	80002f20 <OWReadBit+0x108>
    return true;
80002f1c:	30 18       	mov	r8,1
80002f1e:	c3 98       	rjmp	80002f90 <OWReadBit+0x178>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f20:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f24:	70 09       	ld.w	r9,r8[0x0]
80002f26:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f2a:	70 18       	ld.w	r8,r8[0x4]
80002f2c:	10 39       	cp.w	r9,r8
80002f2e:	e0 88 00 1a 	brls	80002f62 <OWReadBit+0x14a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f32:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f36:	70 08       	ld.w	r8,r8[0x0]
80002f38:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f3c:	10 39       	cp.w	r9,r8
80002f3e:	c1 02       	brcc	80002f5e <OWReadBit+0x146>
80002f40:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f44:	70 18       	ld.w	r8,r8[0x4]
80002f46:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f4a:	10 39       	cp.w	r9,r8
80002f4c:	e0 88 00 09 	brls	80002f5e <OWReadBit+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002f50:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002f54:	30 18       	mov	r8,1
80002f56:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002f5a:	30 18       	mov	r8,1
80002f5c:	c1 a8       	rjmp	80002f90 <OWReadBit+0x178>
    }
    return false;
80002f5e:	30 08       	mov	r8,0
80002f60:	c1 88       	rjmp	80002f90 <OWReadBit+0x178>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f62:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f66:	70 08       	ld.w	r8,r8[0x0]
80002f68:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f6c:	10 39       	cp.w	r9,r8
80002f6e:	c0 93       	brcs	80002f80 <OWReadBit+0x168>
80002f70:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f74:	70 18       	ld.w	r8,r8[0x4]
80002f76:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f7a:	10 39       	cp.w	r9,r8
80002f7c:	e0 88 00 09 	brls	80002f8e <OWReadBit+0x176>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002f80:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002f84:	30 18       	mov	r8,1
80002f86:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002f8a:	30 18       	mov	r8,1
80002f8c:	c0 28       	rjmp	80002f90 <OWReadBit+0x178>
    }
    return false;
80002f8e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002f90:	58 08       	cp.w	r8,0
80002f92:	ca b0       	breq	80002ee8 <OWReadBit+0xd0>
	result = sample_line(idx);
80002f94:	ef 38 ff a0 	ld.ub	r8,r7[-96]
80002f98:	10 9c       	mov	r12,r8
80002f9a:	f0 1f 00 59 	mcall	800030fc <OWReadBit+0x2e4>
80002f9e:	18 98       	mov	r8,r12
80002fa0:	ef 48 ff bc 	st.w	r7[-68],r8
	cpu_delay_us(F, EC_CPU_CLOCK_100MHZ); // Complete the time slot and 10us recovery tREC 5+us
80002fa4:	4d 78       	lddpc	r8,80003100 <OWReadBit+0x2e8>
80002fa6:	70 08       	ld.w	r8,r8[0x0]
80002fa8:	ef 48 ff e4 	st.w	r7[-28],r8
80002fac:	e0 68 e1 00 	mov	r8,57600
80002fb0:	ea 18 05 f5 	orh	r8,0x5f5
80002fb4:	ef 48 ff e0 	st.w	r7[-32],r8
80002fb8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002fbc:	ef 48 ff ec 	st.w	r7[-20],r8
80002fc0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002fc4:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002fc8:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002fcc:	30 01       	mov	r1,0
80002fce:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002fd2:	30 03       	mov	r3,0
80002fd4:	e2 02 02 4a 	mul	r10,r1,r2
80002fd8:	e6 00 02 48 	mul	r8,r3,r0
80002fdc:	10 0a       	add	r10,r8
80002fde:	e0 02 06 48 	mulu.d	r8,r0,r2
80002fe2:	12 0a       	add	r10,r9
80002fe4:	14 99       	mov	r9,r10
80002fe6:	ee 7a 42 3f 	mov	r10,999999
80002fea:	30 0b       	mov	r11,0
80002fec:	f0 0a 00 0a 	add	r10,r8,r10
80002ff0:	f2 0b 00 4b 	adc	r11,r9,r11
80002ff4:	ee 78 42 40 	mov	r8,1000000
80002ff8:	30 09       	mov	r9,0
80002ffa:	f0 1f 00 40 	mcall	800030f8 <OWReadBit+0x2e0>
80002ffe:	14 98       	mov	r8,r10
80003000:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80003002:	ef 48 ff f4 	st.w	r7[-12],r8
80003006:	ee c8 00 50 	sub	r8,r7,80
8000300a:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000300e:	e1 b8 00 42 	mfsr	r8,0x108
80003012:	10 99       	mov	r9,r8
80003014:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003018:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000301a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000301e:	70 09       	ld.w	r9,r8[0x0]
80003020:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003024:	10 09       	add	r9,r8
80003026:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000302a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000302c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003030:	30 08       	mov	r8,0
80003032:	f3 68 00 08 	st.b	r9[8],r8
80003036:	ee c8 00 50 	sub	r8,r7,80
8000303a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000303e:	e1 b8 00 42 	mfsr	r8,0x108
80003042:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000304a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000304e:	30 28       	mov	r8,2
80003050:	f0 09 18 00 	cp.b	r9,r8
80003054:	c0 31       	brne	8000305a <OWReadBit+0x242>
    return false;
80003056:	30 08       	mov	r8,0
80003058:	c4 38       	rjmp	800030de <OWReadBit+0x2c6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000305a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000305e:	f1 39 00 08 	ld.ub	r9,r8[8]
80003062:	30 18       	mov	r8,1
80003064:	f0 09 18 00 	cp.b	r9,r8
80003068:	c0 31       	brne	8000306e <OWReadBit+0x256>
    return true;
8000306a:	30 18       	mov	r8,1
8000306c:	c3 98       	rjmp	800030de <OWReadBit+0x2c6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000306e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003072:	70 09       	ld.w	r9,r8[0x0]
80003074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003078:	70 18       	ld.w	r8,r8[0x4]
8000307a:	10 39       	cp.w	r9,r8
8000307c:	e0 88 00 1a 	brls	800030b0 <OWReadBit+0x298>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003084:	70 08       	ld.w	r8,r8[0x0]
80003086:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000308a:	10 39       	cp.w	r9,r8
8000308c:	c1 02       	brcc	800030ac <OWReadBit+0x294>
8000308e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003092:	70 18       	ld.w	r8,r8[0x4]
80003094:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003098:	10 39       	cp.w	r9,r8
8000309a:	e0 88 00 09 	brls	800030ac <OWReadBit+0x294>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000309e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800030a2:	30 18       	mov	r8,1
800030a4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800030a8:	30 18       	mov	r8,1
800030aa:	c1 a8       	rjmp	800030de <OWReadBit+0x2c6>
    }
    return false;
800030ac:	30 08       	mov	r8,0
800030ae:	c1 88       	rjmp	800030de <OWReadBit+0x2c6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030b4:	70 08       	ld.w	r8,r8[0x0]
800030b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800030ba:	10 39       	cp.w	r9,r8
800030bc:	c0 93       	brcs	800030ce <OWReadBit+0x2b6>
800030be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030c2:	70 18       	ld.w	r8,r8[0x4]
800030c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800030c8:	10 39       	cp.w	r9,r8
800030ca:	e0 88 00 09 	brls	800030dc <OWReadBit+0x2c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800030ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800030d2:	30 18       	mov	r8,1
800030d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800030d8:	30 18       	mov	r8,1
800030da:	c0 28       	rjmp	800030de <OWReadBit+0x2c6>
    }
    return false;
800030dc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800030de:	58 08       	cp.w	r8,0
800030e0:	ca b0       	breq	80003036 <OWReadBit+0x21e>

	return result;
800030e2:	ee f8 ff bc 	ld.w	r8,r7[-68]
}
800030e6:	10 9c       	mov	r12,r8
800030e8:	2e 4d       	sub	sp,-112
800030ea:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800030ee:	00 00       	add	r0,r0
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	28 04       	sub	r4,-128
800030f4:	00 00       	add	r0,r0
800030f6:	08 0c       	add	r12,r4
800030f8:	80 00       	ld.sh	r0,r0[0x0]
800030fa:	ae c2       	st.b	r7[0x4],r2
800030fc:	80 00       	ld.sh	r0,r0[0x0]
800030fe:	21 30       	sub	r0,19
80003100:	00 00       	add	r0,r0
80003102:	08 14       	sub	r4,r4

80003104 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
80003104:	eb cd 40 80 	pushm	r7,lr
80003108:	1a 97       	mov	r7,sp
8000310a:	20 3d       	sub	sp,12
8000310c:	18 98       	mov	r8,r12
8000310e:	ef 4b ff f4 	st.w	r7[-12],r11
80003112:	ef 68 ff f8 	st.b	r7[-8],r8
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
80003116:	30 08       	mov	r8,0
80003118:	ef 48 ff fc 	st.w	r7[-4],r8
8000311c:	c1 58       	rjmp	80003146 <OWWriteByte+0x42>
	{
		OWWriteBit(idx, data & 0x01);
8000311e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003122:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80003126:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000312a:	12 9b       	mov	r11,r9
8000312c:	10 9c       	mov	r12,r8
8000312e:	f0 1f 00 0b 	mcall	80003158 <OWWriteByte+0x54>

		// shift the data byte for the next bit
		data >>= 1;
80003132:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003136:	a1 58       	asr	r8,0x1
80003138:	ef 48 ff f4 	st.w	r7[-12],r8
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
8000313c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003140:	2f f8       	sub	r8,-1
80003142:	ef 48 ff fc 	st.w	r7[-4],r8
80003146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000314a:	58 78       	cp.w	r8,7
8000314c:	fe 9a ff e9 	brle	8000311e <OWWriteByte+0x1a>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
80003150:	2f dd       	sub	sp,-12
80003152:	e3 cd 80 80 	ldm	sp++,r7,pc
80003156:	00 00       	add	r0,r0
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	29 b0       	sub	r0,-101

8000315c <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
8000315c:	eb cd 40 80 	pushm	r7,lr
80003160:	1a 97       	mov	r7,sp
80003162:	20 3d       	sub	sp,12
80003164:	18 98       	mov	r8,r12
80003166:	ef 68 ff f4 	st.b	r7[-12],r8
	int loop, result=0;
8000316a:	30 08       	mov	r8,0
8000316c:	ef 48 ff fc 	st.w	r7[-4],r8

	for (loop = 0; loop < 8; loop++)
80003170:	30 08       	mov	r8,0
80003172:	ef 48 ff f8 	st.w	r7[-8],r8
80003176:	c1 88       	rjmp	800031a6 <OWReadByte+0x4a>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
80003178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000317c:	a1 58       	asr	r8,0x1
8000317e:	ef 48 ff fc 	st.w	r7[-4],r8

		// if result is one, then set MS bit
		if (OWReadBit(idx))
80003182:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003186:	10 9c       	mov	r12,r8
80003188:	f0 1f 00 0d 	mcall	800031bc <OWReadByte+0x60>
8000318c:	18 98       	mov	r8,r12
8000318e:	58 08       	cp.w	r8,0
80003190:	c0 60       	breq	8000319c <OWReadByte+0x40>
		result |= 0x80;
80003192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003196:	a7 b8       	sbr	r8,0x7
80003198:	ef 48 ff fc 	st.w	r7[-4],r8
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
8000319c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031a0:	2f f8       	sub	r8,-1
800031a2:	ef 48 ff f8 	st.w	r7[-8],r8
800031a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031aa:	58 78       	cp.w	r8,7
800031ac:	fe 9a ff e6 	brle	80003178 <OWReadByte+0x1c>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
800031b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800031b4:	10 9c       	mov	r12,r8
800031b6:	2f dd       	sub	sp,-12
800031b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800031bc:	80 00       	ld.sh	r0,r0[0x0]
800031be:	2e 18       	sub	r8,-31

800031c0 <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
800031c0:	eb cd 40 80 	pushm	r7,lr
800031c4:	1a 97       	mov	r7,sp
800031c6:	20 3d       	sub	sp,12
800031c8:	18 99       	mov	r9,r12
800031ca:	16 98       	mov	r8,r11
800031cc:	ef 69 ff f8 	st.b	r7[-8],r9
800031d0:	ef 68 ff f4 	st.b	r7[-12],r8
   int i;
   acc ^= byte;
800031d4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800031d8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800031dc:	f3 e8 20 08 	eor	r8,r9,r8
800031e0:	ef 68 ff f8 	st.b	r7[-8],r8
   for(i = 0; i < 8; i++) 
800031e4:	30 08       	mov	r8,0
800031e6:	ef 48 ff fc 	st.w	r7[-4],r8
800031ea:	c1 c8       	rjmp	80003222 <crc8_add+0x62>
   {
		if(acc & 1) 
800031ec:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800031f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800031f4:	5c 58       	castu.b	r8
800031f6:	c0 c0       	breq	8000320e <crc8_add+0x4e>
		{
			acc = (acc >> 1) ^ 0x8c;
800031f8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800031fc:	a1 98       	lsr	r8,0x1
800031fe:	5c 58       	castu.b	r8
80003200:	ee 18 ff ff 	eorh	r8,0xffff
80003204:	ec 18 ff 8c 	eorl	r8,0xff8c
80003208:	ef 68 ff f8 	st.b	r7[-8],r8
8000320c:	c0 68       	rjmp	80003218 <crc8_add+0x58>
		} 
		else 
		{
			acc >>= 1;
8000320e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003212:	a1 98       	lsr	r8,0x1
80003214:	ef 68 ff f8 	st.b	r7[-8],r8
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
80003218:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000321c:	2f f8       	sub	r8,-1
8000321e:	ef 48 ff fc 	st.w	r7[-4],r8
80003222:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003226:	58 78       	cp.w	r8,7
80003228:	fe 9a ff e2 	brle	800031ec <crc8_add+0x2c>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
8000322c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
}
80003230:	10 9c       	mov	r12,r8
80003232:	2f dd       	sub	sp,-12
80003234:	e3 cd 80 80 	ldm	sp++,r7,pc

80003238 <init_ecdbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_ecdbg_rs232(long pba_hz)
{
80003238:	eb cd 40 80 	pushm	r7,lr
8000323c:	1a 97       	mov	r7,sp
8000323e:	20 1d       	sub	sp,4
80003240:	ef 4c ff fc 	st.w	r7[-4],r12
  init_ecdbg_rs232_ex(ECDBG_USART_BAUDRATE, pba_hz);
80003244:	ee fb ff fc 	ld.w	r11,r7[-4]
80003248:	e0 7c c2 00 	mov	r12,115200
8000324c:	f0 1f 00 03 	mcall	80003258 <init_ecdbg_rs232+0x20>
}
80003250:	2f fd       	sub	sp,-4
80003252:	e3 cd 80 80 	ldm	sp++,r7,pc
80003256:	00 00       	add	r0,r0
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	32 80       	mov	r0,40

8000325c <init_display_rs232>:

void init_display_rs232(long pba_hz)
{
8000325c:	eb cd 40 80 	pushm	r7,lr
80003260:	1a 97       	mov	r7,sp
80003262:	20 1d       	sub	sp,4
80003264:	ef 4c ff fc 	st.w	r7[-4],r12
	init_display_rs232_ex(DISPLAY_USART_BAUDRATE, pba_hz);
80003268:	ee fb ff fc 	ld.w	r11,r7[-4]
8000326c:	e0 6c 12 c0 	mov	r12,4800
80003270:	f0 1f 00 03 	mcall	8000327c <init_display_rs232+0x20>
}
80003274:	2f fd       	sub	sp,-4
80003276:	e3 cd 80 80 	ldm	sp++,r7,pc
8000327a:	00 00       	add	r0,r0
8000327c:	80 00       	ld.sh	r0,r0[0x0]
8000327e:	32 dc       	mov	r12,45

80003280 <init_ecdbg_rs232_ex>:


void init_ecdbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80003280:	eb cd 40 80 	pushm	r7,lr
80003284:	1a 97       	mov	r7,sp
80003286:	20 5d       	sub	sp,20
80003288:	ef 4c ff f0 	st.w	r7[-16],r12
8000328c:	ef 4b ff ec 	st.w	r7[-20],r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80003290:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003294:	ef 48 ff f4 	st.w	r7[-12],r8
80003298:	30 88       	mov	r8,8
8000329a:	ef 68 ff f8 	st.b	r7[-8],r8
8000329e:	30 48       	mov	r8,4
800032a0:	ef 68 ff f9 	st.b	r7[-7],r8
800032a4:	30 08       	mov	r8,0
800032a6:	ef 58 ff fa 	st.h	r7[-6],r8
800032aa:	30 08       	mov	r8,0
800032ac:	ef 68 ff fc 	st.b	r7[-4],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(ECDBG_USART_GPIO_MAP,
800032b0:	30 2b       	mov	r11,2
800032b2:	48 8c       	lddpc	r12,800032d0 <init_ecdbg_rs232_ex+0x50>
800032b4:	f0 1f 00 08 	mcall	800032d4 <init_ecdbg_rs232_ex+0x54>
                     sizeof(ECDBG_USART_GPIO_MAP) / sizeof(ECDBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(ECDBG_USART, &ecdbg_usart_options, pba_hz);
800032b8:	ee c8 00 0c 	sub	r8,r7,12
800032bc:	ee fa ff ec 	ld.w	r10,r7[-20]
800032c0:	10 9b       	mov	r11,r8
800032c2:	fe 7c 28 00 	mov	r12,-55296
800032c6:	f0 1f 00 05 	mcall	800032d8 <init_ecdbg_rs232_ex+0x58>
}
800032ca:	2f bd       	sub	sp,-20
800032cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800032d0:	80 01       	ld.sh	r1,r0[0x0]
800032d2:	0a 10       	sub	r0,r5
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	45 3c       	lddsp	r12,sp[0x14c]
800032d8:	80 00       	ld.sh	r0,r0[0x0]
800032da:	56 e0       	stdsp	sp[0x1b8],r0

800032dc <init_display_rs232_ex>:

void init_display_rs232_ex(unsigned long baudrate, long pba_hz)
{
800032dc:	eb cd 40 80 	pushm	r7,lr
800032e0:	1a 97       	mov	r7,sp
800032e2:	20 5d       	sub	sp,20
800032e4:	ef 4c ff f0 	st.w	r7[-16],r12
800032e8:	ef 4b ff ec 	st.w	r7[-20],r11
		.baudrate = baudrate,
		.charlength = 8,
		.paritytype = USART_NO_PARITY,
		.stopbits = USART_1_STOPBIT,
		.channelmode = USART_NORMAL_CHMODE
	};
800032ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800032f0:	ef 48 ff f4 	st.w	r7[-12],r8
800032f4:	30 88       	mov	r8,8
800032f6:	ef 68 ff f8 	st.b	r7[-8],r8
800032fa:	30 48       	mov	r8,4
800032fc:	ef 68 ff f9 	st.b	r7[-7],r8
80003300:	30 08       	mov	r8,0
80003302:	ef 58 ff fa 	st.h	r7[-6],r8
80003306:	30 08       	mov	r8,0
80003308:	ef 68 ff fc 	st.b	r7[-4],r8

	// Setup GPIO for debug USART.
	gpio_enable_module(DISPLAY_USART_GPIO_MAP,
8000330c:	30 2b       	mov	r11,2
8000330e:	48 8c       	lddpc	r12,8000332c <init_display_rs232_ex+0x50>
80003310:	f0 1f 00 08 	mcall	80003330 <init_display_rs232_ex+0x54>
	sizeof(DISPLAY_USART_GPIO_MAP) / sizeof(DISPLAY_USART_GPIO_MAP[0]));

	// Initialize it in RS232 mode.
	usart_init_rs232(DISPLAY_USART, &display_usart_options, pba_hz);
80003314:	ee c8 00 0c 	sub	r8,r7,12
80003318:	ee fa ff ec 	ld.w	r10,r7[-20]
8000331c:	10 9b       	mov	r11,r8
8000331e:	fc 7c 14 00 	mov	r12,-191488
80003322:	f0 1f 00 05 	mcall	80003334 <init_display_rs232_ex+0x58>
}
80003326:	2f bd       	sub	sp,-20
80003328:	e3 cd 80 80 	ldm	sp++,r7,pc
8000332c:	80 01       	ld.sh	r1,r0[0x0]
8000332e:	0a 00       	add	r0,r5
80003330:	80 00       	ld.sh	r0,r0[0x0]
80003332:	45 3c       	lddsp	r12,sp[0x14c]
80003334:	80 00       	ld.sh	r0,r0[0x0]
80003336:	56 e0       	stdsp	sp[0x1b8],r0

80003338 <print_ecdbg>:


void print_ecdbg(const char *str)
{
80003338:	eb cd 40 80 	pushm	r7,lr
8000333c:	1a 97       	mov	r7,sp
8000333e:	20 1d       	sub	sp,4
80003340:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print(ECDBG_USART, str);
80003344:	ee fb ff fc 	ld.w	r11,r7[-4]
80003348:	fe 7c 28 00 	mov	r12,-55296
8000334c:	f0 1f 00 03 	mcall	80003358 <print_ecdbg+0x20>
}
80003350:	2f fd       	sub	sp,-4
80003352:	e3 cd 80 80 	ldm	sp++,r7,pc
80003356:	00 00       	add	r0,r0
80003358:	80 00       	ld.sh	r0,r0[0x0]
8000335a:	33 5c       	mov	r12,53

8000335c <print>:
	print_hex(DISPLAY_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
8000335c:	eb cd 40 80 	pushm	r7,lr
80003360:	1a 97       	mov	r7,sp
80003362:	20 2d       	sub	sp,8
80003364:	ef 4c ff fc 	st.w	r7[-4],r12
80003368:	ef 4b ff f8 	st.w	r7[-8],r11
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
8000336c:	ee fb ff f8 	ld.w	r11,r7[-8]
80003370:	ee fc ff fc 	ld.w	r12,r7[-4]
80003374:	f0 1f 00 03 	mcall	80003380 <print+0x24>
}
80003378:	2f ed       	sub	sp,-8
8000337a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000337e:	00 00       	add	r0,r0
80003380:	80 00       	ld.sh	r0,r0[0x0]
80003382:	58 e8       	cp.w	r8,14

80003384 <adcifa_get_calibration_data>:
 * \param adcifa       Base address of the ADCIFA
 * \param p_adcifa_opt Structure for the ADCIFA core configuration
 */
void adcifa_get_calibration_data(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt)
{
80003384:	eb cd 40 80 	pushm	r7,lr
80003388:	1a 97       	mov	r7,sp
8000338a:	20 6d       	sub	sp,24
8000338c:	ef 4c ff ec 	st.w	r7[-20],r12
80003390:	ef 4b ff e8 	st.w	r7[-24],r11
	/* Get Offset Calibration */
	int32_t adc_ocal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003394:	e0 68 02 04 	mov	r8,516
80003398:	ea 18 80 80 	orh	r8,0x8080
8000339c:	70 08       	ld.w	r8,r8[0x0]
8000339e:	e6 18 3f 00 	andh	r8,0x3f00,COH
			+ AVR32_FLASHC_FROW_OCAL_WORD)) &
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;
800033a2:	b9 48       	asr	r8,0x18
800033a4:	ef 48 ff f0 	st.w	r7[-16],r8
	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
800033a8:	e0 68 02 04 	mov	r8,516
800033ac:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;

	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800033b0:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
800033b2:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
800033b6:	ef 48 ff f4 	st.w	r7[-12],r8
	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
800033ba:	e0 68 02 08 	mov	r8,520
800033be:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;

	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800033c2:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
800033c4:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800033c8:	ef 48 ff f8 	st.w	r7[-8],r8

	int32_t adc_gain1
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800033cc:	e0 68 02 08 	mov	r8,520
800033d0:	ea 18 80 80 	orh	r8,0x8080
800033d4:	70 08       	ld.w	r8,r8[0x0]
800033d6:	e6 18 03 ff 	andh	r8,0x3ff,COH
			+ AVR32_FLASHC_FROW_GAIN1_WORD)) &
			AVR32_FLASHC_FROW_GAIN1_MASK) >>
			AVR32_FLASHC_FROW_GAIN1_OFFSET;
800033da:	b1 48       	asr	r8,0x10
800033dc:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Get ADC Offset Calibration */
	p_adcifa_opt->offset_calibration_value = adc_ocal;
800033e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033e4:	5c 88       	casts.h	r8
800033e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800033ea:	b2 68       	st.h	r9[0xc],r8

	/* Get ADC Gain Calibration */
	p_adcifa_opt->gain_calibration_value = adc_gcal;
800033ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033f0:	5c 88       	casts.h	r8
800033f2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800033f6:	b2 58       	st.h	r9[0xa],r8

	/* Get Sample & Hold Gain Calibration for Seq 0 */
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
800033f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033fc:	5c 88       	casts.h	r8
800033fe:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003402:	b2 78       	st.h	r9[0xe],r8

	/* Get Sample & Hold Gain Calibration for Seq 1 */
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
80003404:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003408:	5c 88       	casts.h	r8
8000340a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000340e:	f3 58 00 10 	st.h	r9[16],r8
}
80003412:	2f ad       	sub	sp,-24
80003414:	e3 cd 80 80 	ldm	sp++,r7,pc

80003418 <adcifa_configure>:
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt,
		uint32_t pb_hz)
{
80003418:	eb cd 40 80 	pushm	r7,lr
8000341c:	1a 97       	mov	r7,sp
8000341e:	20 3d       	sub	sp,12
80003420:	ef 4c ff fc 	st.w	r7[-4],r12
80003424:	ef 4b ff f8 	st.w	r7[-8],r11
80003428:	ef 4a ff f4 	st.w	r7[-12],r10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
8000342c:	fc 7a 24 00 	mov	r10,-187392
		= (p_adcifa_opt->sleep_mode_enable <<
80003430:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003434:	f1 38 00 08 	ld.ub	r8,r8[8]
80003438:	f0 09 15 02 	lsl	r9,r8,0x2
			AVR32_ADCIFA_CFG_SLEEP)
			| (p_adcifa_opt->single_sequencer_mode <<
8000343c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003440:	11 e8       	ld.ub	r8,r8[0x6]
80003442:	a3 78       	lsl	r8,0x3
			AVR32_ADCIFA_CFG_SSMQ)
			| (p_adcifa_opt->free_running_mode_enable <<
80003444:	10 49       	or	r9,r8
80003446:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000344a:	11 f8       	ld.ub	r8,r8[0x7]
8000344c:	a5 68       	lsl	r8,0x4
			AVR32_ADCIFA_CFG_FRM)
			| (p_adcifa_opt->reference_source <<
8000344e:	10 49       	or	r9,r8
80003450:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003454:	11 c8       	ld.ub	r8,r8[0x4]
80003456:	a5 78       	lsl	r8,0x5
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
80003458:	10 49       	or	r9,r8
8000345a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000345e:	11 d8       	ld.ub	r8,r8[0x5]
80003460:	a7 78       	lsl	r8,0x7
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
80003462:	10 49       	or	r9,r8
80003464:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003468:	f1 38 00 09 	ld.ub	r8,r8[9]
8000346c:	ab 68       	lsl	r8,0xa
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
8000346e:	f3 e8 10 08 	or	r8,r9,r8
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
80003472:	10 9b       	mov	r11,r8
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
80003474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003478:	70 09       	ld.w	r9,r8[0x0]
8000347a:	e0 68 4d d3 	mov	r8,19923
8000347e:	ea 18 10 62 	orh	r8,0x1062
80003482:	f2 08 06 48 	mulu.d	r8,r9,r8
80003486:	a7 89       	lsr	r9,0x6
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
80003488:	e0 68 03 e8 	mov	r8,1000
8000348c:	b1 39       	mul	r9,r8
8000348e:	e0 68 4d d3 	mov	r8,19923
80003492:	ea 18 10 62 	orh	r8,0x1062
80003496:	f2 08 06 48 	mulu.d	r8,r9,r8
8000349a:	f2 08 16 0b 	lsr	r8,r9,0xb
8000349e:	b1 68       	lsl	r8,0x10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
800034a0:	f7 e8 10 08 	or	r8,r11,r8
{
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
800034a4:	95 18       	st.w	r10[0x4],r8
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
			(2 * p_adcifa_opt->frequency)) - 1) <<
800034a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034aa:	70 08       	ld.w	r8,r8[0x0]
800034ac:	f0 09 15 01 	lsl	r9,r8,0x1
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
800034b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034b4:	f0 09 0d 08 	divu	r8,r8,r9
800034b8:	20 18       	sub	r8,1
800034ba:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
800034be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034c2:	f1 49 00 44 	st.w	r8[68],r9
			(2 * p_adcifa_opt->frequency)) - 1) <<
			AVR32_ADCIFA_CKDIV_CNT_OFFSET) &
			AVR32_ADCIFA_CKDIV_CNT_MASK;

	/* Set ADC Offset Calibration */
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
800034c6:	fc 78 24 00 	mov	r8,-187392
800034ca:	fc 79 24 00 	mov	r9,-187392
800034ce:	73 a9       	ld.w	r9,r9[0x68]
800034d0:	12 9a       	mov	r10,r9
800034d2:	e4 1a c0 ff 	andh	r10,0xc0ff
800034d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034da:	92 69       	ld.sh	r9,r9[0xc]
800034dc:	b9 69       	lsl	r9,0x18
800034de:	e6 19 3f 00 	andh	r9,0x3f00,COH
800034e2:	f5 e9 10 09 	or	r9,r10,r9
800034e6:	f1 49 00 68 	st.w	r8[104],r9

	/* Set ADC Gain Calibration */
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
800034ea:	fc 78 24 00 	mov	r8,-187392
800034ee:	fc 79 24 00 	mov	r9,-187392
800034f2:	73 a9       	ld.w	r9,r9[0x68]
800034f4:	12 9a       	mov	r10,r9
800034f6:	e0 1a 80 00 	andl	r10,0x8000
800034fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034fe:	92 59       	ld.sh	r9,r9[0xa]
80003500:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
80003504:	f5 e9 10 09 	or	r9,r10,r9
80003508:	f1 49 00 68 	st.w	r8[104],r9

	/* Set Sample & Hold Gain Calibration for seq 0 */
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
8000350c:	fc 78 24 00 	mov	r8,-187392
80003510:	fc 79 24 00 	mov	r9,-187392
80003514:	73 b9       	ld.w	r9,r9[0x6c]
80003516:	12 9a       	mov	r10,r9
80003518:	e0 1a fc 00 	andl	r10,0xfc00
8000351c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003520:	92 79       	ld.sh	r9,r9[0xe]
80003522:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
80003526:	f5 e9 10 09 	or	r9,r10,r9
8000352a:	f1 49 00 6c 	st.w	r8[108],r9

	/* Set Sample & Hold Gain Calibration for seq 1 */
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
8000352e:	fc 78 24 00 	mov	r8,-187392
80003532:	fc 79 24 00 	mov	r9,-187392
80003536:	73 b9       	ld.w	r9,r9[0x6c]
80003538:	12 9a       	mov	r10,r9
8000353a:	e4 1a fc 00 	andh	r10,0xfc00
8000353e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003542:	f3 09 00 10 	ld.sh	r9,r9[16]
80003546:	b1 69       	lsl	r9,0x10
80003548:	e6 19 03 ff 	andh	r9,0x3ff,COH
8000354c:	f5 e9 10 09 	or	r9,r10,r9
80003550:	f1 49 00 6c 	st.w	r8[108],r9

	/* Enable ADCIFA */
	ADCIFA_enable();
80003554:	fc 78 24 00 	mov	r8,-187392
80003558:	fc 79 24 00 	mov	r9,-187392
8000355c:	72 19       	ld.w	r9,r9[0x4]
8000355e:	a1 a9       	sbr	r9,0x0
80003560:	91 19       	st.w	r8[0x4],r9
80003562:	c0 28       	rjmp	80003566 <adcifa_configure+0x14e>
	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
			break;
		}
	}
80003564:	d7 03       	nop
	/* Enable ADCIFA */
	ADCIFA_enable();

	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
80003566:	fc 78 24 00 	mov	r8,-187392
8000356a:	70 28       	ld.w	r8,r8[0x8]
8000356c:	e2 18 40 00 	andl	r8,0x4000,COH
80003570:	cf a0       	breq	80003564 <adcifa_configure+0x14c>
			break;
		}
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
80003572:	30 18       	mov	r8,1
}
80003574:	10 9c       	mov	r12,r8
80003576:	2f dd       	sub	sp,-12
80003578:	e3 cd 80 80 	ldm	sp++,r7,pc

8000357c <adcifa_configure_sequencer>:
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		adcifa_sequencer_conversion_opt_t *p_adcifa_sequencer_conversion_opt)
{
8000357c:	eb cd 40 80 	pushm	r7,lr
80003580:	1a 97       	mov	r7,sp
80003582:	21 1d       	sub	sp,68
80003584:	ef 4c ff c8 	st.w	r7[-56],r12
80003588:	16 98       	mov	r8,r11
8000358a:	ef 4a ff c0 	st.w	r7[-64],r10
8000358e:	ef 49 ff bc 	st.w	r7[-68],r9
80003592:	ef 68 ff c4 	st.b	r7[-60],r8
	uint8_t g[16] = {0};
80003596:	30 08       	mov	r8,0
80003598:	30 09       	mov	r9,0
8000359a:	ee e9 ff ec 	st.d	r7[-20],r8
8000359e:	30 08       	mov	r8,0
800035a0:	30 09       	mov	r9,0
800035a2:	ee e9 ff f4 	st.d	r7[-12],r8
	uint8_t mp[16] = {0};
800035a6:	30 08       	mov	r8,0
800035a8:	30 09       	mov	r9,0
800035aa:	ee e9 ff dc 	st.d	r7[-36],r8
800035ae:	30 08       	mov	r8,0
800035b0:	30 09       	mov	r9,0
800035b2:	ee e9 ff e4 	st.d	r7[-28],r8
	uint8_t mn[16] = {0};
800035b6:	30 08       	mov	r8,0
800035b8:	30 09       	mov	r9,0
800035ba:	ee e9 ff cc 	st.d	r7[-52],r8
800035be:	30 08       	mov	r8,0
800035c0:	30 09       	mov	r9,0
800035c2:	ee e9 ff d4 	st.d	r7[-44],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch case with sequencer */
	switch (sequencer) {
800035c6:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800035ca:	58 08       	cp.w	r8,0
800035cc:	c0 60       	breq	800035d8 <adcifa_configure_sequencer+0x5c>
800035ce:	58 18       	cp.w	r8,1
800035d0:	e0 80 01 65 	breq	8000389a <adcifa_configure_sequencer+0x31e>
800035d4:	e0 8f 02 54 	bral	80003a7c <adcifa_configure_sequencer+0x500>
	/* Sequencer 0 */
	case 0:
		/* Configure Sequencer 0 */
		ADCIFA_configure_sequencer_0(
800035d8:	fc 78 24 00 	mov	r8,-187392
800035dc:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035e0:	13 89       	ld.ub	r9,r9[0x0]
800035e2:	20 19       	sub	r9,1
800035e4:	f2 0a 15 10 	lsl	r10,r9,0x10
800035e8:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035ec:	13 99       	ld.ub	r9,r9[0x1]
800035ee:	ad 69       	lsl	r9,0xc
800035f0:	12 4a       	or	r10,r9
800035f2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035f6:	13 a9       	ld.ub	r9,r9[0x2]
800035f8:	a9 69       	lsl	r9,0x8
800035fa:	12 4a       	or	r10,r9
800035fc:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003600:	13 b9       	ld.ub	r9,r9[0x3]
80003602:	a3 69       	lsl	r9,0x2
80003604:	12 4a       	or	r10,r9
80003606:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000360a:	13 c9       	ld.ub	r9,r9[0x4]
8000360c:	a3 79       	lsl	r9,0x3
8000360e:	12 4a       	or	r10,r9
80003610:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003614:	13 d9       	ld.ub	r9,r9[0x5]
80003616:	a1 79       	lsl	r9,0x1
80003618:	12 4a       	or	r10,r9
8000361a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000361e:	13 e9       	ld.ub	r9,r9[0x6]
80003620:	f5 e9 10 09 	or	r9,r10,r9
80003624:	91 59       	st.w	r8[0x14],r9
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003626:	30 08       	mov	r8,0
80003628:	ef 68 ff ff 	st.b	r7[-1],r8
8000362c:	c1 68       	rjmp	80003658 <adcifa_configure_sequencer+0xdc>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8000362e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003632:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003636:	12 98       	mov	r8,r9
80003638:	a1 78       	lsl	r8,0x1
8000363a:	12 08       	add	r8,r9
8000363c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003640:	f2 08 00 08 	add	r8,r9,r8
80003644:	11 a8       	ld.ub	r8,r8[0x2]
80003646:	ee 0a 00 09 	add	r9,r7,r10
8000364a:	f3 68 ff ec 	st.b	r9[-20],r8
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000364e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003652:	2f f8       	sub	r8,-1
80003654:	ef 68 ff ff 	st.b	r7[-1],r8
80003658:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000365c:	11 88       	ld.ub	r8,r8[0x0]
8000365e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003662:	f0 09 18 00 	cp.b	r9,r8
80003666:	ce 43       	brcs	8000362e <adcifa_configure_sequencer+0xb2>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
80003668:	fc 78 24 00 	mov	r8,-187392
8000366c:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80003670:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80003674:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80003678:	b9 69       	lsl	r9,0x18
8000367a:	12 4a       	or	r10,r9
8000367c:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80003680:	b5 69       	lsl	r9,0x14
80003682:	12 4a       	or	r10,r9
80003684:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003688:	b1 69       	lsl	r9,0x10
8000368a:	12 4a       	or	r10,r9
8000368c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003690:	ad 69       	lsl	r9,0xc
80003692:	12 4a       	or	r10,r9
80003694:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80003698:	a9 69       	lsl	r9,0x8
8000369a:	12 4a       	or	r10,r9
8000369c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800036a0:	a5 69       	lsl	r9,0x4
800036a2:	12 4a       	or	r10,r9
800036a4:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800036a8:	f5 e9 10 09 	or	r9,r10,r9
800036ac:	91 79       	st.w	r8[0x1c],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800036ae:	30 08       	mov	r8,0
800036b0:	ef 68 ff ff 	st.b	r7[-1],r8
800036b4:	c2 68       	rjmp	80003700 <adcifa_configure_sequencer+0x184>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800036b6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800036ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036be:	12 98       	mov	r8,r9
800036c0:	a1 78       	lsl	r8,0x1
800036c2:	12 08       	add	r8,r9
800036c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800036c8:	f2 08 00 08 	add	r8,r9,r8
800036cc:	11 88       	ld.ub	r8,r8[0x0]
800036ce:	ee 0a 00 09 	add	r9,r7,r10
800036d2:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800036d6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800036da:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036de:	12 98       	mov	r8,r9
800036e0:	a1 78       	lsl	r8,0x1
800036e2:	12 08       	add	r8,r9
800036e4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800036e8:	f2 08 00 08 	add	r8,r9,r8
800036ec:	11 98       	ld.ub	r8,r8[0x1]
800036ee:	ee 0a 00 09 	add	r9,r7,r10
800036f2:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800036f6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036fa:	2f f8       	sub	r8,-1
800036fc:	ef 68 ff ff 	st.b	r7[-1],r8
80003700:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003704:	11 88       	ld.ub	r8,r8[0x0]
80003706:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000370a:	f0 09 18 00 	cp.b	r9,r8
8000370e:	cd 43       	brcs	800036b6 <adcifa_configure_sequencer+0x13a>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3],
80003710:	fc 78 24 00 	mov	r8,-187392
80003714:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80003718:	f2 0a 15 18 	lsl	r10,r9,0x18
8000371c:	ef 39 ff e2 	ld.ub	r9,r7[-30]
80003720:	b1 69       	lsl	r9,0x10
80003722:	12 4a       	or	r10,r9
80003724:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80003728:	a9 69       	lsl	r9,0x8
8000372a:	12 4a       	or	r10,r9
8000372c:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80003730:	f5 e9 10 09 	or	r9,r10,r9
80003734:	91 b9       	st.w	r8[0x2c],r9
80003736:	fc 78 24 00 	mov	r8,-187392
8000373a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000373e:	f2 0a 15 18 	lsl	r10,r9,0x18
80003742:	ef 39 ff de 	ld.ub	r9,r7[-34]
80003746:	b1 69       	lsl	r9,0x10
80003748:	12 4a       	or	r10,r9
8000374a:	ef 39 ff dd 	ld.ub	r9,r7[-35]
8000374e:	a9 69       	lsl	r9,0x8
80003750:	12 4a       	or	r10,r9
80003752:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80003756:	f5 e9 10 09 	or	r9,r10,r9
8000375a:	91 99       	st.w	r8[0x24],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3],
8000375c:	fc 78 24 00 	mov	r8,-187392
80003760:	ef 39 ff d3 	ld.ub	r9,r7[-45]
80003764:	f2 0a 15 18 	lsl	r10,r9,0x18
80003768:	ef 39 ff d2 	ld.ub	r9,r7[-46]
8000376c:	b1 69       	lsl	r9,0x10
8000376e:	12 4a       	or	r10,r9
80003770:	ef 39 ff d1 	ld.ub	r9,r7[-47]
80003774:	a9 69       	lsl	r9,0x8
80003776:	12 4a       	or	r10,r9
80003778:	ef 39 ff d0 	ld.ub	r9,r7[-48]
8000377c:	f5 e9 10 09 	or	r9,r10,r9
80003780:	91 f9       	st.w	r8[0x3c],r9
80003782:	fc 78 24 00 	mov	r8,-187392
80003786:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000378a:	f2 0a 15 18 	lsl	r10,r9,0x18
8000378e:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003792:	b1 69       	lsl	r9,0x10
80003794:	12 4a       	or	r10,r9
80003796:	ef 39 ff cd 	ld.ub	r9,r7[-51]
8000379a:	a9 69       	lsl	r9,0x8
8000379c:	12 4a       	or	r10,r9
8000379e:	ef 39 ff cc 	ld.ub	r9,r7[-52]
800037a2:	f5 e9 10 09 	or	r9,r10,r9
800037a6:	91 d9       	st.w	r8[0x34],r9
		 * This adcifa_seq1_configured variable check if muxsel1p,muxsel1n 
		 * registers are already configured. This may happen if this function is
		 * called first with sequencer 1 as argument and then called with 
		 * sequencer 0 as argument in case dual mode is used.
		 */
		if(!adcifa_seq1_configured)
800037a8:	fe f8 02 e0 	ld.w	r8,pc[736]
800037ac:	11 88       	ld.ub	r8,r8[0x0]
800037ae:	ec 18 00 01 	eorl	r8,0x1
800037b2:	5c 58       	castu.b	r8
800037b4:	e0 80 01 63 	breq	80003a7a <adcifa_configure_sequencer+0x4fe>
		{
			/*
			 * Configure gain for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */ 
			ADCIFA_configure_sh1gain(g[15], g[14], g[13], g[12], g[11], g[10], 
800037b8:	fc 78 24 00 	mov	r8,-187392
800037bc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800037c0:	f2 0a 15 1c 	lsl	r10,r9,0x1c
800037c4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800037c8:	b9 69       	lsl	r9,0x18
800037ca:	12 4a       	or	r10,r9
800037cc:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800037d0:	b5 69       	lsl	r9,0x14
800037d2:	12 4a       	or	r10,r9
800037d4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800037d8:	b1 69       	lsl	r9,0x10
800037da:	12 4a       	or	r10,r9
800037dc:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800037e0:	ad 69       	lsl	r9,0xc
800037e2:	12 4a       	or	r10,r9
800037e4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800037e8:	a9 69       	lsl	r9,0x8
800037ea:	12 4a       	or	r10,r9
800037ec:	ef 39 ff f5 	ld.ub	r9,r7[-11]
800037f0:	a5 69       	lsl	r9,0x4
800037f2:	12 4a       	or	r10,r9
800037f4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800037f8:	f5 e9 10 09 	or	r9,r10,r9
800037fc:	91 89       	st.w	r8[0x20],r9

			/*
			 * Configure Mux for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */
			ADCIFA_configure_muxsel1p(mp[15], mp[14], mp[13], mp[12], mp[11], 
800037fe:	fc 78 24 00 	mov	r8,-187392
80003802:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80003806:	f2 0a 15 18 	lsl	r10,r9,0x18
8000380a:	ef 39 ff ea 	ld.ub	r9,r7[-22]
8000380e:	b1 69       	lsl	r9,0x10
80003810:	12 4a       	or	r10,r9
80003812:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80003816:	a9 69       	lsl	r9,0x8
80003818:	12 4a       	or	r10,r9
8000381a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000381e:	f5 e9 10 09 	or	r9,r10,r9
80003822:	91 c9       	st.w	r8[0x30],r9
80003824:	fc 78 24 00 	mov	r8,-187392
80003828:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8000382c:	f2 0a 15 18 	lsl	r10,r9,0x18
80003830:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80003834:	b1 69       	lsl	r9,0x10
80003836:	12 4a       	or	r10,r9
80003838:	ef 39 ff e5 	ld.ub	r9,r7[-27]
8000383c:	a9 69       	lsl	r9,0x8
8000383e:	12 4a       	or	r10,r9
80003840:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80003844:	f5 e9 10 09 	or	r9,r10,r9
80003848:	91 a9       	st.w	r8[0x28],r9
				mp[10], mp[9], mp[8]);
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
8000384a:	fc 78 24 00 	mov	r8,-187392
8000384e:	ef 39 ff db 	ld.ub	r9,r7[-37]
80003852:	f2 0a 15 18 	lsl	r10,r9,0x18
80003856:	ef 39 ff da 	ld.ub	r9,r7[-38]
8000385a:	b1 69       	lsl	r9,0x10
8000385c:	12 4a       	or	r10,r9
8000385e:	ef 39 ff d9 	ld.ub	r9,r7[-39]
80003862:	a9 69       	lsl	r9,0x8
80003864:	12 4a       	or	r10,r9
80003866:	ef 39 ff d8 	ld.ub	r9,r7[-40]
8000386a:	f5 e9 10 09 	or	r9,r10,r9
8000386e:	f1 49 00 40 	st.w	r8[64],r9
80003872:	fc 78 24 00 	mov	r8,-187392
80003876:	ef 39 ff d7 	ld.ub	r9,r7[-41]
8000387a:	f2 0a 15 18 	lsl	r10,r9,0x18
8000387e:	ef 39 ff d6 	ld.ub	r9,r7[-42]
80003882:	b1 69       	lsl	r9,0x10
80003884:	12 4a       	or	r10,r9
80003886:	ef 39 ff d5 	ld.ub	r9,r7[-43]
8000388a:	a9 69       	lsl	r9,0x8
8000388c:	12 4a       	or	r10,r9
8000388e:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80003892:	f5 e9 10 09 	or	r9,r10,r9
80003896:	91 e9       	st.w	r8[0x38],r9
				mn[10], mn[9], mn[8]);

		}

		break;
80003898:	cf 28       	rjmp	80003a7c <adcifa_configure_sequencer+0x500>

	/* Sequencer 1 */
	case 1:
		/* Configure Sequencer 1 */
		ADCIFA_configure_sequencer_1(
8000389a:	fc 78 24 00 	mov	r8,-187392
8000389e:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038a2:	13 89       	ld.ub	r9,r9[0x0]
800038a4:	20 19       	sub	r9,1
800038a6:	f2 0a 15 10 	lsl	r10,r9,0x10
800038aa:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038ae:	13 99       	ld.ub	r9,r9[0x1]
800038b0:	ad 69       	lsl	r9,0xc
800038b2:	12 4a       	or	r10,r9
800038b4:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038b8:	13 a9       	ld.ub	r9,r9[0x2]
800038ba:	a9 69       	lsl	r9,0x8
800038bc:	12 4a       	or	r10,r9
800038be:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038c2:	13 b9       	ld.ub	r9,r9[0x3]
800038c4:	a3 69       	lsl	r9,0x2
800038c6:	12 4a       	or	r10,r9
800038c8:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038cc:	13 c9       	ld.ub	r9,r9[0x4]
800038ce:	a3 79       	lsl	r9,0x3
800038d0:	12 4a       	or	r10,r9
800038d2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038d6:	13 d9       	ld.ub	r9,r9[0x5]
800038d8:	a1 79       	lsl	r9,0x1
800038da:	f5 e9 10 09 	or	r9,r10,r9
800038de:	12 9a       	mov	r10,r9
800038e0:	a5 aa       	sbr	r10,0x4
800038e2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038e6:	13 e9       	ld.ub	r9,r9[0x6]
800038e8:	f5 e9 10 09 	or	r9,r10,r9
800038ec:	91 69       	st.w	r8[0x18],r9
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800038ee:	30 08       	mov	r8,0
800038f0:	ef 68 ff ff 	st.b	r7[-1],r8
800038f4:	c1 68       	rjmp	80003920 <adcifa_configure_sequencer+0x3a4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800038f6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800038fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800038fe:	12 98       	mov	r8,r9
80003900:	a1 78       	lsl	r8,0x1
80003902:	12 08       	add	r8,r9
80003904:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003908:	f2 08 00 08 	add	r8,r9,r8
8000390c:	11 a8       	ld.ub	r8,r8[0x2]
8000390e:	ee 0a 00 09 	add	r9,r7,r10
80003912:	f3 68 ff ec 	st.b	r9[-20],r8
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003916:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000391a:	2f f8       	sub	r8,-1
8000391c:	ef 68 ff ff 	st.b	r7[-1],r8
80003920:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003924:	11 88       	ld.ub	r8,r8[0x0]
80003926:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000392a:	f0 09 18 00 	cp.b	r9,r8
8000392e:	ce 43       	brcs	800038f6 <adcifa_configure_sequencer+0x37a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
80003930:	fc 78 24 00 	mov	r8,-187392
80003934:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80003938:	f2 0a 15 1c 	lsl	r10,r9,0x1c
8000393c:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80003940:	b9 69       	lsl	r9,0x18
80003942:	12 4a       	or	r10,r9
80003944:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80003948:	b5 69       	lsl	r9,0x14
8000394a:	12 4a       	or	r10,r9
8000394c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003950:	b1 69       	lsl	r9,0x10
80003952:	12 4a       	or	r10,r9
80003954:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003958:	ad 69       	lsl	r9,0xc
8000395a:	12 4a       	or	r10,r9
8000395c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80003960:	a9 69       	lsl	r9,0x8
80003962:	12 4a       	or	r10,r9
80003964:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80003968:	a5 69       	lsl	r9,0x4
8000396a:	12 4a       	or	r10,r9
8000396c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80003970:	f5 e9 10 09 	or	r9,r10,r9
80003974:	91 89       	st.w	r8[0x20],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003976:	30 08       	mov	r8,0
80003978:	ef 68 ff ff 	st.b	r7[-1],r8
8000397c:	c2 68       	rjmp	800039c8 <adcifa_configure_sequencer+0x44c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
8000397e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003982:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003986:	12 98       	mov	r8,r9
80003988:	a1 78       	lsl	r8,0x1
8000398a:	12 08       	add	r8,r9
8000398c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003990:	f2 08 00 08 	add	r8,r9,r8
80003994:	11 88       	ld.ub	r8,r8[0x0]
80003996:	ee 0a 00 09 	add	r9,r7,r10
8000399a:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
8000399e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800039a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039a6:	12 98       	mov	r8,r9
800039a8:	a1 78       	lsl	r8,0x1
800039aa:	12 08       	add	r8,r9
800039ac:	ee f9 ff bc 	ld.w	r9,r7[-68]
800039b0:	f2 08 00 08 	add	r8,r9,r8
800039b4:	11 98       	ld.ub	r8,r8[0x1]
800039b6:	ee 0a 00 09 	add	r9,r7,r10
800039ba:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800039be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800039c2:	2f f8       	sub	r8,-1
800039c4:	ef 68 ff ff 	st.b	r7[-1],r8
800039c8:	ee f8 ff c0 	ld.w	r8,r7[-64]
800039cc:	11 88       	ld.ub	r8,r8[0x0]
800039ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039d2:	f0 09 18 00 	cp.b	r9,r8
800039d6:	cd 43       	brcs	8000397e <adcifa_configure_sequencer+0x402>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3],
800039d8:	fc 78 24 00 	mov	r8,-187392
800039dc:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800039e0:	f2 0a 15 18 	lsl	r10,r9,0x18
800039e4:	ef 39 ff e2 	ld.ub	r9,r7[-30]
800039e8:	b1 69       	lsl	r9,0x10
800039ea:	12 4a       	or	r10,r9
800039ec:	ef 39 ff e1 	ld.ub	r9,r7[-31]
800039f0:	a9 69       	lsl	r9,0x8
800039f2:	12 4a       	or	r10,r9
800039f4:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800039f8:	f5 e9 10 09 	or	r9,r10,r9
800039fc:	91 c9       	st.w	r8[0x30],r9
800039fe:	fc 78 24 00 	mov	r8,-187392
80003a02:	ef 39 ff df 	ld.ub	r9,r7[-33]
80003a06:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a0a:	ef 39 ff de 	ld.ub	r9,r7[-34]
80003a0e:	b1 69       	lsl	r9,0x10
80003a10:	12 4a       	or	r10,r9
80003a12:	ef 39 ff dd 	ld.ub	r9,r7[-35]
80003a16:	a9 69       	lsl	r9,0x8
80003a18:	12 4a       	or	r10,r9
80003a1a:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80003a1e:	f5 e9 10 09 	or	r9,r10,r9
80003a22:	91 a9       	st.w	r8[0x28],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3],
80003a24:	fc 78 24 00 	mov	r8,-187392
80003a28:	ef 39 ff d3 	ld.ub	r9,r7[-45]
80003a2c:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a30:	ef 39 ff d2 	ld.ub	r9,r7[-46]
80003a34:	b1 69       	lsl	r9,0x10
80003a36:	12 4a       	or	r10,r9
80003a38:	ef 39 ff d1 	ld.ub	r9,r7[-47]
80003a3c:	a9 69       	lsl	r9,0x8
80003a3e:	12 4a       	or	r10,r9
80003a40:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80003a44:	f5 e9 10 09 	or	r9,r10,r9
80003a48:	f1 49 00 40 	st.w	r8[64],r9
80003a4c:	fc 78 24 00 	mov	r8,-187392
80003a50:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003a54:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a58:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003a5c:	b1 69       	lsl	r9,0x10
80003a5e:	12 4a       	or	r10,r9
80003a60:	ef 39 ff cd 	ld.ub	r9,r7[-51]
80003a64:	a9 69       	lsl	r9,0x8
80003a66:	12 4a       	or	r10,r9
80003a68:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80003a6c:	f5 e9 10 09 	or	r9,r10,r9
80003a70:	91 e9       	st.w	r8[0x38],r9
				mn[2], mn[1], mn[0]);

		adcifa_seq1_configured = true;
80003a72:	48 69       	lddpc	r9,80003a88 <adcifa_configure_sequencer+0x50c>
80003a74:	30 18       	mov	r8,1
80003a76:	b2 88       	st.b	r9[0x0],r8
80003a78:	c0 28       	rjmp	80003a7c <adcifa_configure_sequencer+0x500>
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
				mn[10], mn[9], mn[8]);

		}

		break;
80003a7a:	d7 03       	nop
		break;

	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
80003a7c:	30 18       	mov	r8,1
}
80003a7e:	10 9c       	mov	r12,r8
80003a80:	2e fd       	sub	sp,-68
80003a82:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a86:	00 00       	add	r0,r0
80003a88:	00 00       	add	r0,r0
80003a8a:	05 b8       	ld.ub	r8,r2[0x3]

80003a8c <adcifa_start_sequencer>:
/** \brief Start analog to digital conversion for a specific sequencer
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
void adcifa_start_sequencer(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003a8c:	eb cd 40 80 	pushm	r7,lr
80003a90:	1a 97       	mov	r7,sp
80003a92:	20 2d       	sub	sp,8
80003a94:	ef 4c ff fc 	st.w	r7[-4],r12
80003a98:	16 98       	mov	r8,r11
80003a9a:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch Sequencer */
	switch (sequencer) {
80003a9e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003aa2:	58 18       	cp.w	r8,1
80003aa4:	c0 a0       	breq	80003ab8 <adcifa_start_sequencer+0x2c>
80003aa6:	58 38       	cp.w	r8,3
80003aa8:	c0 d0       	breq	80003ac2 <adcifa_start_sequencer+0x36>
80003aaa:	58 08       	cp.w	r8,0
80003aac:	c0 f1       	brne	80003aca <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
80003aae:	fc 78 24 00 	mov	r8,-187392
80003ab2:	30 19       	mov	r9,1
80003ab4:	91 09       	st.w	r8[0x0],r9
		break;
80003ab6:	c0 a8       	rjmp	80003aca <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
80003ab8:	fc 78 24 00 	mov	r8,-187392
80003abc:	30 29       	mov	r9,2
80003abe:	91 09       	st.w	r8[0x0],r9
		break;
80003ac0:	c0 58       	rjmp	80003aca <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(
80003ac2:	fc 78 24 00 	mov	r8,-187392
80003ac6:	30 39       	mov	r9,3
80003ac8:	91 09       	st.w	r8[0x0],r9
		break;

	default:
		break;
	}
}
80003aca:	2f ed       	sub	sp,-8
80003acc:	e3 cd 80 80 	ldm	sp++,r7,pc

80003ad0 <adcifa_check_eos>:
/** \brief Get End of Conversion status bit
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
bool adcifa_check_eos(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003ad0:	eb cd 40 80 	pushm	r7,lr
80003ad4:	1a 97       	mov	r7,sp
80003ad6:	20 2d       	sub	sp,8
80003ad8:	ef 4c ff fc 	st.w	r7[-4],r12
80003adc:	16 98       	mov	r8,r11
80003ade:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* get SR register : EOS bit for channel */
	switch (sequencer) {
80003ae2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003ae6:	58 08       	cp.w	r8,0
80003ae8:	c0 40       	breq	80003af0 <adcifa_check_eos+0x20>
80003aea:	58 18       	cp.w	r8,1
80003aec:	c0 90       	breq	80003afe <adcifa_check_eos+0x2e>
80003aee:	c1 08       	rjmp	80003b0e <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
80003af0:	fc 78 24 00 	mov	r8,-187392
80003af4:	70 28       	ld.w	r8,r8[0x8]
80003af6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003afa:	5c 58       	castu.b	r8
80003afc:	c0 a8       	rjmp	80003b10 <adcifa_check_eos+0x40>

	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
80003afe:	fc 78 24 00 	mov	r8,-187392
80003b02:	70 28       	ld.w	r8,r8[0x8]
80003b04:	e2 18 00 10 	andl	r8,0x10,COH
80003b08:	5f 18       	srne	r8
80003b0a:	5c 58       	castu.b	r8
80003b0c:	c0 28       	rjmp	80003b10 <adcifa_check_eos+0x40>

	default:
		break;
	}
	return false;
80003b0e:	30 08       	mov	r8,0
}
80003b10:	10 9c       	mov	r12,r8
80003b12:	2f ed       	sub	sp,-8
80003b14:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b18 <adcifa_get_values_from_sequencer>:
 */
uint8_t adcifa_get_values_from_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		int16_t *adcifa_values)
{
80003b18:	eb cd 40 80 	pushm	r7,lr
80003b1c:	1a 97       	mov	r7,sp
80003b1e:	20 5d       	sub	sp,20
80003b20:	ef 4c ff f8 	st.w	r7[-8],r12
80003b24:	16 98       	mov	r8,r11
80003b26:	ef 4a ff f0 	st.w	r7[-16],r10
80003b2a:	ef 49 ff ec 	st.w	r7[-20],r9
80003b2e:	ef 68 ff f4 	st.b	r7[-12],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* wait for end of sequence */
	if (adcifa_check_eos(adcifa, sequencer) != true) {
80003b32:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003b36:	10 9b       	mov	r11,r8
80003b38:	ee fc ff f8 	ld.w	r12,r7[-8]
80003b3c:	f0 1f 00 2c 	mcall	80003bec <adcifa_get_values_from_sequencer+0xd4>
80003b40:	18 98       	mov	r8,r12
80003b42:	ec 18 00 01 	eorl	r8,0x1
80003b46:	5c 58       	castu.b	r8
80003b48:	c0 30       	breq	80003b4e <adcifa_get_values_from_sequencer+0x36>
		return ADCIFA_STATUS_NOT_COMPLETED;
80003b4a:	30 38       	mov	r8,3
80003b4c:	c4 b8       	rjmp	80003be2 <adcifa_get_values_from_sequencer+0xca>
	}

	switch (sequencer) {
80003b4e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003b52:	58 08       	cp.w	r8,0
80003b54:	c0 40       	breq	80003b5c <adcifa_get_values_from_sequencer+0x44>
80003b56:	58 18       	cp.w	r8,1
80003b58:	c2 30       	breq	80003b9e <adcifa_get_values_from_sequencer+0x86>
80003b5a:	c4 38       	rjmp	80003be0 <adcifa_get_values_from_sequencer+0xc8>
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b5c:	30 08       	mov	r8,0
80003b5e:	ef 68 ff ff 	st.b	r7[-1],r8
80003b62:	c1 58       	rjmp	80003b8c <adcifa_get_values_from_sequencer+0x74>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
80003b64:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b68:	a1 78       	lsl	r8,0x1
80003b6a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003b6e:	10 09       	add	r9,r8
80003b70:	fc 78 24 00 	mov	r8,-187392
80003b74:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003b78:	2d fa       	sub	r10,-33
80003b7a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003b7e:	5c 88       	casts.h	r8
80003b80:	b2 08       	st.h	r9[0x0],r8
	}

	switch (sequencer) {
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b86:	2f f8       	sub	r8,-1
80003b88:	ef 68 ff ff 	st.b	r7[-1],r8
80003b8c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b90:	11 88       	ld.ub	r8,r8[0x0]
80003b92:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003b96:	f0 09 18 00 	cp.b	r9,r8
80003b9a:	ce 53       	brcs	80003b64 <adcifa_get_values_from_sequencer+0x4c>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
80003b9c:	c2 28       	rjmp	80003be0 <adcifa_get_values_from_sequencer+0xc8>

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b9e:	30 08       	mov	r8,0
80003ba0:	ef 68 ff ff 	st.b	r7[-1],r8
80003ba4:	c1 68       	rjmp	80003bd0 <adcifa_get_values_from_sequencer+0xb8>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
80003ba6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003baa:	a1 78       	lsl	r8,0x1
80003bac:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003bb0:	10 09       	add	r9,r8
80003bb2:	fc 78 24 00 	mov	r8,-187392
80003bb6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003bba:	2f 8a       	sub	r10,-8
80003bbc:	2d fa       	sub	r10,-33
80003bbe:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003bc2:	5c 88       	casts.h	r8
80003bc4:	b2 08       	st.h	r9[0x0],r8
		}
		break;

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003bc6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003bca:	2f f8       	sub	r8,-1
80003bcc:	ef 68 ff ff 	st.b	r7[-1],r8
80003bd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bd4:	11 88       	ld.ub	r8,r8[0x0]
80003bd6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003bda:	f0 09 18 00 	cp.b	r9,r8
80003bde:	ce 43       	brcs	80003ba6 <adcifa_get_values_from_sequencer+0x8e>

	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
80003be0:	30 28       	mov	r8,2
}
80003be2:	10 9c       	mov	r12,r8
80003be4:	2f bd       	sub	sp,-20
80003be6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bea:	00 00       	add	r0,r0
80003bec:	80 00       	ld.sh	r0,r0[0x0]
80003bee:	3a d0       	mov	r0,-83

80003bf0 <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
80003bf0:	eb cd 40 80 	pushm	r7,lr
80003bf4:	1a 97       	mov	r7,sp
80003bf6:	20 8d       	sub	sp,32
		384,
		512,
		768,
		1024,
		2048,
	};
80003bf8:	48 c9       	lddpc	r9,80003c28 <flashc_get_flash_size+0x38>
80003bfa:	ee c8 00 1e 	sub	r8,r7,30
80003bfe:	31 ea       	mov	r10,30
80003c00:	12 9b       	mov	r11,r9
80003c02:	10 9c       	mov	r12,r8
80003c04:	f0 1f 00 0a 	mcall	80003c2c <flashc_get_flash_size+0x3c>
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK)
80003c08:	fe 68 00 00 	mov	r8,-131072
80003c0c:	70 38       	ld.w	r8,r8[0xc]
80003c0e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003c12:	a1 78       	lsl	r8,0x1
80003c14:	ee 08 00 08 	add	r8,r7,r8
80003c18:	f1 08 ff e2 	ld.sh	r8,r8[-30]
80003c1c:	5c 78       	castu.h	r8
80003c1e:	ab 68       	lsl	r8,0xa
		1024,
	};
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
			>> AVR32_FLASHC_FSR_FSZ_OFFSET]) << 10;
#endif
}
80003c20:	10 9c       	mov	r12,r8
80003c22:	2f 8d       	sub	sp,-32
80003c24:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c28:	80 01       	ld.sh	r1,r0[0x0]
80003c2a:	0a 20       	rsub	r0,r5
80003c2c:	80 00       	ld.sh	r0,r0[0x0]
80003c2e:	b1 26       	st.d	r8++,r6

80003c30 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
80003c30:	eb cd 40 80 	pushm	r7,lr
80003c34:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80003c36:	fe 68 00 00 	mov	r8,-131072
80003c3a:	70 28       	ld.w	r8,r8[0x8]
80003c3c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003c40:	5c 58       	castu.b	r8
}
80003c42:	10 9c       	mov	r12,r8
80003c44:	e3 cd 80 80 	ldm	sp++,r7,pc

80003c48 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80003c48:	eb cd 40 80 	pushm	r7,lr
80003c4c:	1a 97       	mov	r7,sp
	while (!flashc_is_ready());
80003c4e:	f0 1f 00 05 	mcall	80003c60 <flashc_default_wait_until_ready+0x18>
80003c52:	18 98       	mov	r8,r12
80003c54:	ec 18 00 01 	eorl	r8,0x1
80003c58:	5c 58       	castu.b	r8
80003c5a:	cf a1       	brne	80003c4e <flashc_default_wait_until_ready+0x6>
}
80003c5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c60:	80 00       	ld.sh	r0,r0[0x0]
80003c62:	3c 30       	mov	r0,-61

80003c64 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80003c64:	eb cd 40 80 	pushm	r7,lr
80003c68:	1a 97       	mov	r7,sp
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80003c6a:	fe 68 00 00 	mov	r8,-131072
80003c6e:	70 28       	ld.w	r8,r8[0x8]
80003c70:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHC_FSR_PROGE_MASK);
}
80003c74:	10 9c       	mov	r12,r8
80003c76:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c7a:	d7 03       	nop

80003c7c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80003c7c:	eb cd 40 80 	pushm	r7,lr
80003c80:	1a 97       	mov	r7,sp
80003c82:	20 3d       	sub	sp,12
80003c84:	ef 4c ff f8 	st.w	r7[-8],r12
80003c88:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003c8c:	49 b8       	lddpc	r8,80003cf8 <flashc_issue_command+0x7c>
80003c8e:	70 08       	ld.w	r8,r8[0x0]
80003c90:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80003c92:	fe 68 00 00 	mov	r8,-131072
80003c96:	70 18       	ld.w	r8,r8[0x4]
80003c98:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80003c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ca0:	5c 58       	castu.b	r8
80003ca2:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80003ca6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003caa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cae:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80003cb2:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80003cb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003cba:	58 08       	cp.w	r8,0
80003cbc:	c0 b5       	brlt	80003cd2 <flashc_issue_command+0x56>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80003cbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003cc2:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80003cc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cca:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80003cce:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80003cd2:	3a 58       	mov	r8,-91
80003cd4:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80003cd8:	fe 68 00 00 	mov	r8,-131072
80003cdc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003ce0:	91 19       	st.w	r8[0x4],r9
	flashc_error_status = flashc_get_error_status();
80003ce2:	f0 1f 00 07 	mcall	80003cfc <flashc_issue_command+0x80>
80003ce6:	18 99       	mov	r9,r12
80003ce8:	48 68       	lddpc	r8,80003d00 <flashc_issue_command+0x84>
80003cea:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80003cec:	48 38       	lddpc	r8,80003cf8 <flashc_issue_command+0x7c>
80003cee:	70 08       	ld.w	r8,r8[0x0]
80003cf0:	5d 18       	icall	r8
}
80003cf2:	2f dd       	sub	sp,-12
80003cf4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cf8:	00 00       	add	r0,r0
80003cfa:	00 08       	add	r8,r0
80003cfc:	80 00       	ld.sh	r0,r0[0x0]
80003cfe:	3c 64       	mov	r4,-58
80003d00:	00 00       	add	r0,r0
80003d02:	05 bc       	ld.ub	r12,r2[0x3]

80003d04 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80003d04:	eb cd 40 80 	pushm	r7,lr
80003d08:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80003d0a:	3f fb       	mov	r11,-1
80003d0c:	30 3c       	mov	r12,3
80003d0e:	f0 1f 00 03 	mcall	80003d18 <flashc_clear_page_buffer+0x14>
}
80003d12:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d16:	00 00       	add	r0,r0
80003d18:	80 00       	ld.sh	r0,r0[0x0]
80003d1a:	3c 7c       	mov	r12,-57

80003d1c <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
80003d1c:	eb cd 40 80 	pushm	r7,lr
80003d20:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80003d22:	fe 68 00 00 	mov	r8,-131072
80003d26:	70 28       	ld.w	r8,r8[0x8]
80003d28:	e2 18 00 20 	andl	r8,0x20,COH
80003d2c:	5f 18       	srne	r8
80003d2e:	5c 58       	castu.b	r8
}
80003d30:	10 9c       	mov	r12,r8
80003d32:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d36:	d7 03       	nop

80003d38 <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80003d38:	eb cd 40 80 	pushm	r7,lr
80003d3c:	1a 97       	mov	r7,sp
80003d3e:	20 1d       	sub	sp,4
80003d40:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80003d44:	ee fb ff fc 	ld.w	r11,r7[-4]
80003d48:	30 cc       	mov	r12,12
80003d4a:	f0 1f 00 05 	mcall	80003d5c <flashc_quick_page_read+0x24>
	return flashc_is_page_erased();
80003d4e:	f0 1f 00 05 	mcall	80003d60 <flashc_quick_page_read+0x28>
80003d52:	18 98       	mov	r8,r12
}
80003d54:	10 9c       	mov	r12,r8
80003d56:	2f fd       	sub	sp,-4
80003d58:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d5c:	80 00       	ld.sh	r0,r0[0x0]
80003d5e:	3c 7c       	mov	r12,-57
80003d60:	80 00       	ld.sh	r0,r0[0x0]
80003d62:	3d 1c       	mov	r12,-47

80003d64 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80003d64:	eb cd 40 80 	pushm	r7,lr
80003d68:	1a 97       	mov	r7,sp
80003d6a:	20 4d       	sub	sp,16
80003d6c:	ef 4c ff f4 	st.w	r7[-12],r12
80003d70:	16 98       	mov	r8,r11
80003d72:	ef 68 ff f0 	st.b	r7[-16],r8
	bool page_erased = true;
80003d76:	30 18       	mov	r8,1
80003d78:	ef 68 ff fb 	st.b	r7[-5],r8

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80003d7c:	ee fb ff f4 	ld.w	r11,r7[-12]
80003d80:	30 2c       	mov	r12,2
80003d82:	f0 1f 00 10 	mcall	80003dc0 <flashc_erase_page+0x5c>
	if (check) {
80003d86:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003d8a:	30 08       	mov	r8,0
80003d8c:	f0 09 18 00 	cp.b	r9,r8
80003d90:	c1 20       	breq	80003db4 <flashc_erase_page+0x50>
		unsigned int error_status = flashc_error_status;
80003d92:	48 d8       	lddpc	r8,80003dc4 <flashc_erase_page+0x60>
80003d94:	70 08       	ld.w	r8,r8[0x0]
80003d96:	ef 48 ff fc 	st.w	r7[-4],r8
		page_erased = flashc_quick_page_read(-1);
80003d9a:	3f fc       	mov	r12,-1
80003d9c:	f0 1f 00 0b 	mcall	80003dc8 <flashc_erase_page+0x64>
80003da0:	18 98       	mov	r8,r12
80003da2:	ef 68 ff fb 	st.b	r7[-5],r8
		flashc_error_status |= error_status;
80003da6:	48 88       	lddpc	r8,80003dc4 <flashc_erase_page+0x60>
80003da8:	70 09       	ld.w	r9,r8[0x0]
80003daa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003dae:	10 49       	or	r9,r8
80003db0:	48 58       	lddpc	r8,80003dc4 <flashc_erase_page+0x60>
80003db2:	91 09       	st.w	r8[0x0],r9
	}
	return page_erased;
80003db4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80003db8:	10 9c       	mov	r12,r8
80003dba:	2f cd       	sub	sp,-16
80003dbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003dc0:	80 00       	ld.sh	r0,r0[0x0]
80003dc2:	3c 7c       	mov	r12,-57
80003dc4:	00 00       	add	r0,r0
80003dc6:	05 bc       	ld.ub	r12,r2[0x3]
80003dc8:	80 00       	ld.sh	r0,r0[0x0]
80003dca:	3d 38       	mov	r8,-45

80003dcc <flashc_write_page>:
	return all_pages_erased;
}


void flashc_write_page(int page_number)
{
80003dcc:	eb cd 40 80 	pushm	r7,lr
80003dd0:	1a 97       	mov	r7,sp
80003dd2:	20 1d       	sub	sp,4
80003dd4:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80003dd8:	ee fb ff fc 	ld.w	r11,r7[-4]
80003ddc:	30 1c       	mov	r12,1
80003dde:	f0 1f 00 03 	mcall	80003de8 <flashc_write_page+0x1c>
}
80003de2:	2f fd       	sub	sp,-4
80003de4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003de8:	80 00       	ld.sh	r0,r0[0x0]
80003dea:	3c 7c       	mov	r12,-57

80003dec <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80003dec:	eb cd 40 80 	pushm	r7,lr
80003df0:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80003df2:	3f fb       	mov	r11,-1
80003df4:	30 fc       	mov	r12,15
80003df6:	f0 1f 00 05 	mcall	80003e08 <flashc_quick_user_page_read+0x1c>
	return flashc_is_page_erased();
80003dfa:	f0 1f 00 05 	mcall	80003e0c <flashc_quick_user_page_read+0x20>
80003dfe:	18 98       	mov	r8,r12
}
80003e00:	10 9c       	mov	r12,r8
80003e02:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e06:	00 00       	add	r0,r0
80003e08:	80 00       	ld.sh	r0,r0[0x0]
80003e0a:	3c 7c       	mov	r12,-57
80003e0c:	80 00       	ld.sh	r0,r0[0x0]
80003e0e:	3d 1c       	mov	r12,-47

80003e10 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80003e10:	eb cd 40 80 	pushm	r7,lr
80003e14:	1a 97       	mov	r7,sp
80003e16:	20 1d       	sub	sp,4
80003e18:	18 98       	mov	r8,r12
80003e1a:	ef 68 ff fc 	st.b	r7[-4],r8
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80003e1e:	3f fb       	mov	r11,-1
80003e20:	30 ec       	mov	r12,14
80003e22:	f0 1f 00 09 	mcall	80003e44 <flashc_erase_user_page+0x34>
	return (check) ? flashc_quick_user_page_read() : true;
80003e26:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003e2a:	30 08       	mov	r8,0
80003e2c:	f0 09 18 00 	cp.b	r9,r8
80003e30:	c0 50       	breq	80003e3a <flashc_erase_user_page+0x2a>
80003e32:	f0 1f 00 06 	mcall	80003e48 <flashc_erase_user_page+0x38>
80003e36:	18 98       	mov	r8,r12
80003e38:	c0 28       	rjmp	80003e3c <flashc_erase_user_page+0x2c>
80003e3a:	30 18       	mov	r8,1
}
80003e3c:	10 9c       	mov	r12,r8
80003e3e:	2f fd       	sub	sp,-4
80003e40:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e44:	80 00       	ld.sh	r0,r0[0x0]
80003e46:	3c 7c       	mov	r12,-57
80003e48:	80 00       	ld.sh	r0,r0[0x0]
80003e4a:	3d ec       	mov	r12,-34

80003e4c <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80003e4c:	eb cd 40 80 	pushm	r7,lr
80003e50:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80003e52:	3f fb       	mov	r11,-1
80003e54:	30 dc       	mov	r12,13
80003e56:	f0 1f 00 03 	mcall	80003e60 <flashc_write_user_page+0x14>
}
80003e5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e5e:	00 00       	add	r0,r0
80003e60:	80 00       	ld.sh	r0,r0[0x0]
80003e62:	3c 7c       	mov	r12,-57

80003e64 <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, uint8_t src, size_t nbytes, bool erase)
{
80003e64:	eb cd 40 80 	pushm	r7,lr
80003e68:	1a 97       	mov	r7,sp
80003e6a:	20 4d       	sub	sp,16
80003e6c:	ef 4c ff fc 	st.w	r7[-4],r12
80003e70:	ef 4a ff f4 	st.w	r7[-12],r10
80003e74:	12 98       	mov	r8,r9
80003e76:	16 99       	mov	r9,r11
80003e78:	ef 69 ff f8 	st.b	r7[-8],r9
80003e7c:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset16(dst, src | (uint16_t)src << 8, nbytes, erase);
80003e80:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003e84:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80003e88:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003e8c:	a9 68       	lsl	r8,0x8
80003e8e:	5c 88       	casts.h	r8
80003e90:	f5 e8 10 08 	or	r8,r10,r8
80003e94:	5c 88       	casts.h	r8
80003e96:	5c 78       	castu.h	r8
80003e98:	ee fa ff f4 	ld.w	r10,r7[-12]
80003e9c:	10 9b       	mov	r11,r8
80003e9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80003ea2:	f0 1f 00 04 	mcall	80003eb0 <flashc_memset8+0x4c>
80003ea6:	18 98       	mov	r8,r12
}
80003ea8:	10 9c       	mov	r12,r8
80003eaa:	2f cd       	sub	sp,-16
80003eac:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eb0:	80 00       	ld.sh	r0,r0[0x0]
80003eb2:	3e b4       	mov	r4,-21

80003eb4 <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, uint16_t src, size_t nbytes, bool erase)
{
80003eb4:	eb cd 40 80 	pushm	r7,lr
80003eb8:	1a 97       	mov	r7,sp
80003eba:	20 4d       	sub	sp,16
80003ebc:	ef 4c ff fc 	st.w	r7[-4],r12
80003ec0:	ef 4a ff f4 	st.w	r7[-12],r10
80003ec4:	12 98       	mov	r8,r9
80003ec6:	16 99       	mov	r9,r11
80003ec8:	ef 59 ff f8 	st.h	r7[-8],r9
80003ecc:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset32(dst, src | (uint32_t)src << 16, nbytes, erase);
80003ed0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003ed4:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80003ed8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003edc:	b1 68       	lsl	r8,0x10
80003ede:	f5 e8 10 08 	or	r8,r10,r8
80003ee2:	ee fa ff f4 	ld.w	r10,r7[-12]
80003ee6:	10 9b       	mov	r11,r8
80003ee8:	ee fc ff fc 	ld.w	r12,r7[-4]
80003eec:	f0 1f 00 04 	mcall	80003efc <flashc_memset16+0x48>
80003ef0:	18 98       	mov	r8,r12
}
80003ef2:	10 9c       	mov	r12,r8
80003ef4:	2f cd       	sub	sp,-16
80003ef6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003efa:	00 00       	add	r0,r0
80003efc:	80 00       	ld.sh	r0,r0[0x0]
80003efe:	3f 00       	mov	r0,-16

80003f00 <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, uint32_t src, size_t nbytes, bool erase)
{
80003f00:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80003f04:	1a 97       	mov	r7,sp
80003f06:	20 6d       	sub	sp,24
80003f08:	ef 4c ff fc 	st.w	r7[-4],r12
80003f0c:	ef 4b ff f8 	st.w	r7[-8],r11
80003f10:	ef 4a ff f4 	st.w	r7[-12],r10
80003f14:	12 98       	mov	r8,r9
80003f16:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
80003f1a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003f1e:	ee f0 ff f8 	ld.w	r0,r7[-8]
80003f22:	30 01       	mov	r1,0
80003f24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003f28:	ef 49 ff ec 	st.w	r7[-20],r9
80003f2c:	30 09       	mov	r9,0
80003f2e:	ef 49 ff e8 	st.w	r7[-24],r9
80003f32:	ee f3 ff ec 	ld.w	r3,r7[-20]
80003f36:	a1 63       	lsl	r3,0x0
80003f38:	30 02       	mov	r2,0
80003f3a:	e1 e2 10 0a 	or	r10,r0,r2
80003f3e:	e3 e3 10 0b 	or	r11,r1,r3
80003f42:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003f46:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f4a:	f0 1f 00 04 	mcall	80003f58 <flashc_memset32+0x58>
80003f4e:	18 98       	mov	r8,r12
}
80003f50:	10 9c       	mov	r12,r8
80003f52:	2f ad       	sub	sp,-24
80003f54:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80003f58:	80 00       	ld.sh	r0,r0[0x0]
80003f5a:	3f 5c       	mov	r12,-11

80003f5c <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80003f5c:	eb cd 40 80 	pushm	r7,lr
80003f60:	1a 97       	mov	r7,sp
80003f62:	21 bd       	sub	sp,108
80003f64:	ef 4c ff a4 	st.w	r7[-92],r12
80003f68:	ee eb ff 9c 	st.d	r7[-100],r10
80003f6c:	ef 49 ff 98 	st.w	r7[-104],r9
80003f70:	ef 68 ff 94 	st.b	r7[-108],r8
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
80003f74:	30 08       	mov	r8,0
80003f76:	30 09       	mov	r9,0
80003f78:	ee e9 ff d8 	st.d	r7[-40],r8
	StructCVPtr dest_end;
	UnionCVPtr flash_page_source_end;
	bool incomplete_flash_page_end;
	Union64 flash_dword;
	UnionVPtr tmp;
	unsigned int error_status = 0;
80003f7c:	30 08       	mov	r8,0
80003f7e:	ef 48 ff ec 	st.w	r7[-20],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80003f82:	f0 1f 00 fa 	mcall	80004368 <flashc_memset64+0x40c>
80003f86:	18 99       	mov	r9,r12
80003f88:	fc 18 80 00 	movh	r8,0x8000
80003f8c:	f2 08 00 08 	add	r8,r9,r8
80003f90:	ef 48 ff e4 	st.w	r7[-28],r8
	dest.u8ptr = dst;
80003f94:	ee f8 ff a4 	ld.w	r8,r7[-92]
80003f98:	ef 48 ff e0 	st.w	r7[-32],r8
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80003f9c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003fa0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003fa4:	20 18       	sub	r8,1
80003fa6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003faa:	ef 48 ff f0 	st.w	r7[-16],r8
80003fae:	c1 f8       	rjmp	80003fec <flashc_memset64+0x90>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
80003fb0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003fb4:	ef 38 ff a3 	ld.ub	r8,r7[-93]
80003fb8:	ee 09 00 09 	add	r9,r7,r9
80003fbc:	f3 68 ff d8 	st.b	r9[-40],r8
		src >>= 8;
80003fc0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80003fc4:	b9 68       	lsl	r8,0x18
80003fc6:	ee f9 ff a0 	ld.w	r9,r7[-96]
80003fca:	a9 89       	lsr	r9,0x8
80003fcc:	f3 e8 10 08 	or	r8,r9,r8
80003fd0:	ef 48 ff a0 	st.w	r7[-96],r8
80003fd4:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80003fd8:	a9 88       	lsr	r8,0x8
80003fda:	ef 48 ff 9c 	st.w	r7[-100],r8

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
80003fde:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003fe2:	20 18       	sub	r8,1
80003fe4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003fe8:	ef 48 ff f0 	st.w	r7[-16],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80003fec:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80003ff0:	58 08       	cp.w	r8,0
80003ff2:	5c 29       	cpc	r9
80003ff4:	cd e1       	brne	80003fb0 <flashc_memset64+0x54>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
80003ff6:	ee f9 ff e0 	ld.w	r9,r7[-32]
80003ffa:	ee f8 ff 98 	ld.w	r8,r7[-104]
80003ffe:	f2 08 00 08 	add	r8,r9,r8
80004002:	ef 48 ff d4 	st.w	r7[-44],r8

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
80004006:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000400a:	e0 69 ff ff 	mov	r9,65535
8000400e:	ea 19 7f ff 	orh	r9,0x7fff
80004012:	12 38       	cp.w	r8,r9
80004014:	e0 8b 00 07 	brhi	80004022 <flashc_memset64+0xc6>
		dest.u8ptr = AVR32_FLASH;
80004018:	fc 18 80 00 	movh	r8,0x8000
8000401c:	ef 48 ff e0 	st.w	r7[-32],r8
80004020:	c1 58       	rjmp	8000404a <flashc_memset64+0xee>
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
80004022:	ee f9 ff e4 	ld.w	r9,r7[-28]
80004026:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000402a:	10 39       	cp.w	r9,r8
8000402c:	e0 8b 00 0f 	brhi	8000404a <flashc_memset64+0xee>
80004030:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004034:	e0 69 ff ff 	mov	r9,65535
80004038:	ea 19 80 7f 	orh	r9,0x807f
8000403c:	12 38       	cp.w	r8,r9
8000403e:	e0 8b 00 06 	brhi	8000404a <flashc_memset64+0xee>
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80004042:	fc 18 80 80 	movh	r8,0x8080
80004046:	ef 48 ff e0 	st.w	r7[-32],r8
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
8000404a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000404e:	e0 69 02 00 	mov	r9,512
80004052:	ea 19 80 80 	orh	r9,0x8080
80004056:	12 38       	cp.w	r8,r9
80004058:	e0 88 00 09 	brls	8000406a <flashc_memset64+0x10e>
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
8000405c:	e0 68 02 00 	mov	r8,512
80004060:	ea 18 80 80 	orh	r8,0x8080
80004064:	ef 48 ff d4 	st.w	r7[-44],r8
80004068:	c1 38       	rjmp	8000408e <flashc_memset64+0x132>
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
8000406a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000406e:	fc 19 80 80 	movh	r9,0x8080
80004072:	12 38       	cp.w	r8,r9
80004074:	e0 8b 00 0d 	brhi	8000408e <flashc_memset64+0x132>
80004078:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000407c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004080:	10 39       	cp.w	r9,r8
80004082:	e0 88 00 06 	brls	8000408e <flashc_memset64+0x132>
		dest_end.u8ptr = flash_array_end.u8ptr;
80004086:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000408a:	ef 48 ff d4 	st.w	r7[-44],r8
	}

	// Align each end of destination pointer with its natural boundary.
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
8000408e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004092:	a1 c8       	cbr	r8,0x0
80004094:	ef 48 ff cc 	st.w	r7[-52],r8
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
80004098:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000409c:	e0 18 ff fc 	andl	r8,0xfffc
800040a0:	ef 48 ff c4 	st.w	r7[-60],r8
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));
800040a4:	ee f8 ff c4 	ld.w	r8,r7[-60]
800040a8:	e0 18 ff f8 	andl	r8,0xfff8
800040ac:	ef 48 ff bc 	st.w	r7[-68],r8

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
800040b0:	c4 b9       	rjmp	80004346 <flashc_memset64+0x3ea>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800040b2:	f0 1f 00 af 	mcall	8000436c <flashc_memset64+0x410>
		error_status |= flashc_error_status;
800040b6:	fe f8 02 ba 	ld.w	r8,pc[698]
800040ba:	70 08       	ld.w	r8,r8[0x0]
800040bc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800040c0:	f3 e8 10 08 	or	r8,r9,r8
800040c4:	ef 48 ff ec 	st.w	r7[-20],r8

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
800040c8:	ee f8 ff bc 	ld.w	r8,r7[-68]
800040cc:	ef 48 ff f8 	st.w	r7[-8],r8
800040d0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040d4:	e0 18 fe 00 	andl	r8,0xfe00
800040d8:	f0 c8 fe 00 	sub	r8,r8,-512
800040dc:	ef 48 ff fc 	st.w	r7[-4],r8
800040e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800040e8:	f0 09 0d 48 	min	r8,r8,r9
800040ec:	ef 48 ff f4 	st.w	r7[-12],r8
800040f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
800040f4:	ef 48 ff b4 	st.w	r7[-76],r8
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800040f8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040fc:	10 9a       	mov	r10,r8
800040fe:	e0 1a fe 00 	andl	r10,0xfe00
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
80004102:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004106:	10 99       	mov	r9,r8
80004108:	e0 19 fe 00 	andl	r9,0xfe00
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
8000410c:	30 18       	mov	r8,1
8000410e:	12 3a       	cp.w	r10,r9
80004110:	c0 22       	brcc	80004114 <flashc_memset64+0x1b8>
80004112:	30 08       	mov	r8,0
80004114:	ef 68 ff eb 	st.b	r7[-21],r8
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80004118:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000411c:	ee e9 ff ac 	st.d	r7[-84],r8

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80004120:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004124:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004128:	c5 b0       	breq	800041de <flashc_memset64+0x282>
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8000412a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000412e:	e0 18 fe 00 	andl	r8,0xfe00
80004132:	ef 48 ff a8 	st.w	r7[-88],r8
80004136:	c0 e8       	rjmp	80004152 <flashc_memset64+0x1f6>
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
80004138:	ee fa ff a8 	ld.w	r10,r7[-88]
8000413c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004140:	f0 e8 00 00 	ld.d	r8,r8[0]
80004144:	f4 e9 00 00 	st.d	r10[0],r8
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
80004148:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000414c:	2f 88       	sub	r8,-8
8000414e:	ef 48 ff a8 	st.w	r7[-88],r8
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80004152:	ee f9 ff a8 	ld.w	r9,r7[-88]
80004156:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000415a:	e0 18 ff f8 	andl	r8,0xfff8
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8000415e:	10 39       	cp.w	r9,r8
80004160:	ce c3       	brcs	80004138 <flashc_memset64+0x1dc>
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
80004162:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004166:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000416a:	c3 a0       	breq	800041de <flashc_memset64+0x282>
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
8000416c:	30 08       	mov	r8,0
8000416e:	ef 48 ff f0 	st.w	r7[-16],r8
80004172:	c1 38       	rjmp	80004198 <flashc_memset64+0x23c>
					flash_dword.u8[i] = *tmp.u8ptr++;
80004174:	ee fa ff f0 	ld.w	r10,r7[-16]
80004178:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000417c:	11 89       	ld.ub	r9,r8[0x0]
8000417e:	5c 59       	castu.b	r9
80004180:	ee 0a 00 0a 	add	r10,r7,r10
80004184:	f5 69 ff ac 	st.b	r10[-84],r9
80004188:	2f f8       	sub	r8,-1
8000418a:	ef 48 ff a8 	st.w	r7[-88],r8
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
8000418e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004192:	2f f8       	sub	r8,-1
80004194:	ef 48 ff f0 	st.w	r7[-16],r8
80004198:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000419c:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800041a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041a4:	10 39       	cp.w	r9,r8
800041a6:	fe 9b ff e7 	brhi	80004174 <flashc_memset64+0x218>
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
800041aa:	ee f8 ff e0 	ld.w	r8,r7[-32]
800041ae:	e0 18 ff f8 	andl	r8,0xfff8
800041b2:	ef 48 ff e0 	st.w	r7[-32],r8

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
800041b6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800041ba:	ee f8 ff bc 	ld.w	r8,r7[-68]
800041be:	10 39       	cp.w	r9,r8
800041c0:	c0 f2       	brcc	800041de <flashc_memset64+0x282>
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
800041c2:	ee fa ff e0 	ld.w	r10,r7[-32]
800041c6:	ee e8 ff ac 	ld.d	r8,r7[-84]
800041ca:	f4 e9 00 00 	st.d	r10[0],r8
800041ce:	f4 c8 ff f8 	sub	r8,r10,-8
800041d2:	ef 48 ff e0 	st.w	r7[-32],r8
					flash_dword.u64 = source.u64;
800041d6:	ee e8 ff d8 	ld.d	r8,r7[-40]
800041da:	ee e9 ff ac 	st.d	r7[-84],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
800041de:	ee f8 ff b4 	ld.w	r8,r7[-76]
800041e2:	10 99       	mov	r9,r8
800041e4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800041e8:	f2 08 01 08 	sub	r8,r9,r8
800041ec:	a3 58       	asr	r8,0x3
800041ee:	ef 48 ff f0 	st.w	r7[-16],r8
800041f2:	c1 08       	rjmp	80004212 <flashc_memset64+0x2b6>
			*dest.u64ptr++ = source.u64;
800041f4:	ee fa ff e0 	ld.w	r10,r7[-32]
800041f8:	ee e8 ff d8 	ld.d	r8,r7[-40]
800041fc:	f4 e9 00 00 	st.d	r10[0],r8
80004200:	f4 c8 ff f8 	sub	r8,r10,-8
80004204:	ef 48 ff e0 	st.w	r7[-32],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80004208:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000420c:	20 18       	sub	r8,1
8000420e:	ef 48 ff f0 	st.w	r7[-16],r8
80004212:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004216:	58 08       	cp.w	r8,0
80004218:	ce e1       	brne	800041f4 <flashc_memset64+0x298>
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
8000421a:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8000421e:	30 08       	mov	r8,0
80004220:	f0 09 18 00 	cp.b	r9,r8
80004224:	c4 70       	breq	800042b2 <flashc_memset64+0x356>
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
80004226:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000422a:	ef 48 ff a8 	st.w	r7[-88],r8

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
8000422e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004232:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004236:	c3 80       	breq	800042a6 <flashc_memset64+0x34a>
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80004238:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000423c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004240:	ef 48 ff f0 	st.w	r7[-16],r8
80004244:	c1 38       	rjmp	8000426a <flashc_memset64+0x30e>
						flash_dword.u8[i] = *tmp.u8ptr++;
80004246:	ee fa ff f0 	ld.w	r10,r7[-16]
8000424a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000424e:	11 89       	ld.ub	r9,r8[0x0]
80004250:	5c 59       	castu.b	r9
80004252:	ee 0a 00 0a 	add	r10,r7,r10
80004256:	f5 69 ff ac 	st.b	r10[-84],r9
8000425a:	2f f8       	sub	r8,-1
8000425c:	ef 48 ff a8 	st.w	r7[-88],r8
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80004260:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004264:	2f f8       	sub	r8,-1
80004266:	ef 48 ff f0 	st.w	r7[-16],r8
8000426a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000426e:	58 78       	cp.w	r8,7
80004270:	fe 98 ff eb 	brls	80004246 <flashc_memset64+0x2ea>
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
80004274:	ee fa ff e0 	ld.w	r10,r7[-32]
80004278:	ee e8 ff ac 	ld.d	r8,r7[-84]
8000427c:	f4 e9 00 00 	st.d	r10[0],r8
80004280:	f4 c8 ff f8 	sub	r8,r10,-8
80004284:	ef 48 ff e0 	st.w	r7[-32],r8
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80004288:	c1 08       	rjmp	800042a8 <flashc_memset64+0x34c>
					*tmp.u64ptr = *tmp.u64ptr;
8000428a:	ee fa ff a8 	ld.w	r10,r7[-88]
8000428e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004292:	f0 e8 00 00 	ld.d	r8,r8[0]
80004296:	f4 e9 00 00 	st.d	r10[0],r8
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
8000429a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000429e:	2f 88       	sub	r8,-8
800042a0:	ef 48 ff a8 	st.w	r7[-88],r8
800042a4:	c0 28       	rjmp	800042a8 <flashc_memset64+0x34c>
800042a6:	d7 03       	nop
800042a8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800042ac:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800042b0:	ce d1       	brne	8000428a <flashc_memset64+0x32e>
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
800042b2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800042b6:	fc 19 80 80 	movh	r9,0x8080
800042ba:	12 38       	cp.w	r8,r9
800042bc:	e0 8b 00 2a 	brhi	80004310 <flashc_memset64+0x3b4>
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
800042c0:	ef 39 ff 94 	ld.ub	r9,r7[-108]
800042c4:	30 08       	mov	r8,0
800042c6:	f0 09 18 00 	cp.b	r9,r8
800042ca:	c0 d0       	breq	800042e4 <flashc_memset64+0x388>
				flashc_erase_page(-1, false);
800042cc:	30 0b       	mov	r11,0
800042ce:	3f fc       	mov	r12,-1
800042d0:	f0 1f 00 29 	mcall	80004374 <flashc_memset64+0x418>
				error_status |= flashc_error_status;
800042d4:	4a 78       	lddpc	r8,80004370 <flashc_memset64+0x414>
800042d6:	70 08       	ld.w	r8,r8[0x0]
800042d8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800042dc:	f3 e8 10 08 	or	r8,r9,r8
800042e0:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_page(-1);
800042e4:	3f fc       	mov	r12,-1
800042e6:	f0 1f 00 25 	mcall	80004378 <flashc_memset64+0x41c>
			error_status |= flashc_error_status;
800042ea:	4a 28       	lddpc	r8,80004370 <flashc_memset64+0x414>
800042ec:	70 08       	ld.w	r8,r8[0x0]
800042ee:	ee f9 ff ec 	ld.w	r9,r7[-20]
800042f2:	f3 e8 10 08 	or	r8,r9,r8
800042f6:	ef 48 ff ec 	st.w	r7[-20],r8

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
800042fa:	ee f9 ff e0 	ld.w	r9,r7[-32]
800042fe:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004302:	10 39       	cp.w	r9,r8
80004304:	c2 13       	brcs	80004346 <flashc_memset64+0x3ea>
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80004306:	fc 18 80 80 	movh	r8,0x8080
8000430a:	ef 48 ff e0 	st.w	r7[-32],r8
8000430e:	c1 c8       	rjmp	80004346 <flashc_memset64+0x3ea>
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
80004310:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80004314:	30 08       	mov	r8,0
80004316:	f0 09 18 00 	cp.b	r9,r8
8000431a:	c0 c0       	breq	80004332 <flashc_memset64+0x3d6>
				flashc_erase_user_page(false);
8000431c:	30 0c       	mov	r12,0
8000431e:	f0 1f 00 18 	mcall	8000437c <flashc_memset64+0x420>
				error_status |= flashc_error_status;
80004322:	49 48       	lddpc	r8,80004370 <flashc_memset64+0x414>
80004324:	70 08       	ld.w	r8,r8[0x0]
80004326:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000432a:	f3 e8 10 08 	or	r8,r9,r8
8000432e:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_user_page();
80004332:	f0 1f 00 14 	mcall	80004380 <flashc_memset64+0x424>
			error_status |= flashc_error_status;
80004336:	48 f8       	lddpc	r8,80004370 <flashc_memset64+0x414>
80004338:	70 08       	ld.w	r8,r8[0x0]
8000433a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000433e:	f3 e8 10 08 	or	r8,r9,r8
80004342:	ef 48 ff ec 	st.w	r7[-20],r8
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
80004346:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000434a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000434e:	10 39       	cp.w	r9,r8
80004350:	fe 93 fe b1 	brlo	800040b2 <flashc_memset64+0x156>
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
80004354:	48 78       	lddpc	r8,80004370 <flashc_memset64+0x414>
80004356:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000435a:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memset function does.
	return dst;
8000435c:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
80004360:	10 9c       	mov	r12,r8
80004362:	2e 5d       	sub	sp,-108
80004364:	e3 cd 80 80 	ldm	sp++,r7,pc
80004368:	80 00       	ld.sh	r0,r0[0x0]
8000436a:	3b f0       	mov	r0,-65
8000436c:	80 00       	ld.sh	r0,r0[0x0]
8000436e:	3d 04       	mov	r4,-48
80004370:	00 00       	add	r0,r0
80004372:	05 bc       	ld.ub	r12,r2[0x3]
80004374:	80 00       	ld.sh	r0,r0[0x0]
80004376:	3d 64       	mov	r4,-42
80004378:	80 00       	ld.sh	r0,r0[0x0]
8000437a:	3d cc       	mov	r12,-36
8000437c:	80 00       	ld.sh	r0,r0[0x0]
8000437e:	3e 10       	mov	r0,-31
80004380:	80 00       	ld.sh	r0,r0[0x0]
80004382:	3e 4c       	mov	r12,-28

80004384 <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80004384:	eb cd 40 80 	pushm	r7,lr
80004388:	1a 97       	mov	r7,sp
8000438a:	20 bd       	sub	sp,44
8000438c:	ef 4c ff e0 	st.w	r7[-32],r12
80004390:	ef 4b ff dc 	st.w	r7[-36],r11
80004394:	ef 4a ff d8 	st.w	r7[-40],r10
80004398:	12 98       	mov	r8,r9
8000439a:	ef 68 ff d4 	st.b	r7[-44],r8
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
8000439e:	30 08       	mov	r8,0
800043a0:	ef 48 ff f0 	st.w	r7[-16],r8
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
800043a4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800043a8:	ef 48 ff f8 	st.w	r7[-8],r8
	const uint8_t* src_buf=(const uint8_t*)src;
800043ac:	ee f8 ff dc 	ld.w	r8,r7[-36]
800043b0:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
800043b4:	ee f9 ff e0 	ld.w	r9,r7[-32]
800043b8:	30 18       	mov	r8,1
800043ba:	e0 6a ff ff 	mov	r10,65535
800043be:	ea 1a 80 7f 	orh	r10,0x807f
800043c2:	14 39       	cp.w	r9,r10
800043c4:	e0 8b 00 03 	brhi	800043ca <flashc_memcpy+0x46>
800043c8:	30 08       	mov	r8,0
800043ca:	ef 68 ff ef 	st.b	r7[-17],r8

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
800043ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043d6:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800043da:	f2 08 01 08 	sub	r8,r9,r8
800043de:	ef 48 ff f4 	st.w	r7[-12],r8

	while (nbytes) {
800043e2:	c9 18       	rjmp	80004504 <flashc_memcpy+0x180>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800043e4:	f0 1f 00 50 	mcall	80004524 <flashc_memcpy+0x1a0>
		error_status |= flashc_error_status;
800043e8:	4d 08       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
800043ea:	70 08       	ld.w	r8,r8[0x0]
800043ec:	ee f9 ff f0 	ld.w	r9,r7[-16]
800043f0:	f3 e8 10 08 	or	r8,r9,r8
800043f4:	ef 48 ff f0 	st.w	r7[-16],r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
800043f8:	30 08       	mov	r8,0
800043fa:	ef 58 ff ec 	st.h	r7[-20],r8
800043fe:	c4 b8       	rjmp	80004494 <flashc_memcpy+0x110>
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
80004400:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004404:	f0 e8 00 00 	ld.d	r8,r8[0]
80004408:	ee e9 ff e4 	st.d	r7[-28],r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
8000440c:	30 08       	mov	r8,0
8000440e:	ef 68 ff ee 	st.b	r7[-18],r8
80004412:	c2 d8       	rjmp	8000446c <flashc_memcpy+0xe8>
				if (nbytes && (flash_add == dest_add)) {
80004414:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004418:	58 08       	cp.w	r8,0
8000441a:	c1 f0       	breq	80004458 <flashc_memcpy+0xd4>
8000441c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004424:	10 39       	cp.w	r9,r8
80004426:	c1 91       	brne	80004458 <flashc_memcpy+0xd4>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80004428:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000442c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004430:	11 88       	ld.ub	r8,r8[0x0]
80004432:	ee 09 00 09 	add	r9,r7,r9
80004436:	f3 68 ff e4 	st.b	r9[-28],r8
8000443a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000443e:	2f f8       	sub	r8,-1
80004440:	ef 48 ff fc 	st.w	r7[-4],r8
					dest_add++;
80004444:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004448:	2f f8       	sub	r8,-1
8000444a:	ef 48 ff f8 	st.w	r7[-8],r8
					nbytes--;
8000444e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004452:	20 18       	sub	r8,1
80004454:	ef 48 ff d8 	st.w	r7[-40],r8
				}
				flash_add++;
80004458:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000445c:	2f f8       	sub	r8,-1
8000445e:	ef 48 ff f4 	st.w	r7[-12],r8
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80004462:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004466:	2f f8       	sub	r8,-1
80004468:	ef 68 ff ee 	st.b	r7[-18],r8
8000446c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80004470:	30 78       	mov	r8,7
80004472:	f0 09 18 00 	cp.b	r9,r8
80004476:	fe 98 ff cf 	brls	80004414 <flashc_memcpy+0x90>
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
8000447a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000447e:	20 88       	sub	r8,8
80004480:	10 9a       	mov	r10,r8
80004482:	ee e8 ff e4 	ld.d	r8,r7[-28]
80004486:	f4 e9 00 00 	st.d	r10[0],r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
8000448a:	ef 08 ff ec 	ld.sh	r8,r7[-20]
8000448e:	2f 88       	sub	r8,-8
80004490:	ef 58 ff ec 	st.h	r7[-20],r8
80004494:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80004498:	e0 68 01 ff 	mov	r8,511
8000449c:	f0 09 19 00 	cp.h	r9,r8
800044a0:	fe 98 ff b0 	brls	80004400 <flashc_memcpy+0x7c>
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
800044a4:	ef 39 ff d4 	ld.ub	r9,r7[-44]
800044a8:	30 08       	mov	r8,0
800044aa:	f0 09 18 00 	cp.b	r9,r8
800044ae:	c1 70       	breq	800044dc <flashc_memcpy+0x158>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
800044b0:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800044b4:	30 08       	mov	r8,0
800044b6:	f0 09 18 00 	cp.b	r9,r8
800044ba:	c0 50       	breq	800044c4 <flashc_memcpy+0x140>
800044bc:	30 0c       	mov	r12,0
800044be:	f0 1f 00 1c 	mcall	8000452c <flashc_memcpy+0x1a8>
800044c2:	c0 58       	rjmp	800044cc <flashc_memcpy+0x148>
800044c4:	30 0b       	mov	r11,0
800044c6:	3f fc       	mov	r12,-1
800044c8:	f0 1f 00 1a 	mcall	80004530 <flashc_memcpy+0x1ac>
			error_status |= flashc_error_status;
800044cc:	49 78       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
800044ce:	70 08       	ld.w	r8,r8[0x0]
800044d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800044d4:	f3 e8 10 08 	or	r8,r9,r8
800044d8:	ef 48 ff f0 	st.w	r7[-16],r8
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
800044dc:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800044e0:	30 08       	mov	r8,0
800044e2:	f0 09 18 00 	cp.b	r9,r8
800044e6:	c0 40       	breq	800044ee <flashc_memcpy+0x16a>
800044e8:	f0 1f 00 13 	mcall	80004534 <flashc_memcpy+0x1b0>
800044ec:	c0 48       	rjmp	800044f4 <flashc_memcpy+0x170>
800044ee:	3f fc       	mov	r12,-1
800044f0:	f0 1f 00 12 	mcall	80004538 <flashc_memcpy+0x1b4>
		error_status |= flashc_error_status;
800044f4:	48 d8       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
800044f6:	70 08       	ld.w	r8,r8[0x0]
800044f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800044fc:	f3 e8 10 08 	or	r8,r9,r8
80004500:	ef 48 ff f0 	st.w	r7[-16],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80004504:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004508:	58 08       	cp.w	r8,0
8000450a:	fe 91 ff 6d 	brne	800043e4 <flashc_memcpy+0x60>
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
8000450e:	48 78       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
80004510:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004514:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
80004516:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
8000451a:	10 9c       	mov	r12,r8
8000451c:	2f 5d       	sub	sp,-44
8000451e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004522:	00 00       	add	r0,r0
80004524:	80 00       	ld.sh	r0,r0[0x0]
80004526:	3d 04       	mov	r4,-48
80004528:	00 00       	add	r0,r0
8000452a:	05 bc       	ld.ub	r12,r2[0x3]
8000452c:	80 00       	ld.sh	r0,r0[0x0]
8000452e:	3e 10       	mov	r0,-31
80004530:	80 00       	ld.sh	r0,r0[0x0]
80004532:	3d 64       	mov	r4,-42
80004534:	80 00       	ld.sh	r0,r0[0x0]
80004536:	3e 4c       	mov	r12,-28
80004538:	80 00       	ld.sh	r0,r0[0x0]
8000453a:	3d cc       	mov	r12,-36

8000453c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000453c:	eb cd 40 80 	pushm	r7,lr
80004540:	1a 97       	mov	r7,sp
80004542:	20 4d       	sub	sp,16
80004544:	ef 4c ff f4 	st.w	r7[-12],r12
80004548:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000454c:	30 08       	mov	r8,0
8000454e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
80004552:	30 08       	mov	r8,0
80004554:	ef 48 ff fc 	st.w	r7[-4],r8
80004558:	c1 c8       	rjmp	80004590 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000455a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000455e:	70 19       	ld.w	r9,r8[0x4]
80004560:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004564:	70 08       	ld.w	r8,r8[0x0]
80004566:	12 9b       	mov	r11,r9
80004568:	10 9c       	mov	r12,r8
8000456a:	f0 1f 00 10 	mcall	800045a8 <gpio_enable_module+0x6c>
8000456e:	18 98       	mov	r8,r12
80004570:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004574:	f3 e8 10 08 	or	r8,r9,r8
80004578:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
8000457c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004580:	2f 88       	sub	r8,-8
80004582:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80004586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000458a:	2f f8       	sub	r8,-1
8000458c:	ef 48 ff fc 	st.w	r7[-4],r8
80004590:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004594:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004598:	10 39       	cp.w	r9,r8
8000459a:	ce 03       	brcs	8000455a <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
8000459c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800045a0:	10 9c       	mov	r12,r8
800045a2:	2f cd       	sub	sp,-16
800045a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800045a8:	80 00       	ld.sh	r0,r0[0x0]
800045aa:	45 ac       	lddsp	r12,sp[0x168]

800045ac <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800045ac:	eb cd 40 80 	pushm	r7,lr
800045b0:	1a 97       	mov	r7,sp
800045b2:	20 3d       	sub	sp,12
800045b4:	ef 4c ff f8 	st.w	r7[-8],r12
800045b8:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800045bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045c0:	a5 98       	lsr	r8,0x5
800045c2:	a9 78       	lsl	r8,0x9
800045c4:	e0 28 e0 00 	sub	r8,57344
800045c8:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
800045cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800045d0:	58 78       	cp.w	r8,7
800045d2:	e0 8b 01 16 	brhi	800047fe <gpio_enable_module_pin+0x252>
800045d6:	fe f9 02 4e 	ld.w	r9,pc[590]
800045da:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800045de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045e6:	30 19       	mov	r9,1
800045e8:	f2 08 09 48 	lsl	r8,r9,r8
800045ec:	10 99       	mov	r9,r8
800045ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045f2:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800045f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045fc:	30 19       	mov	r9,1
800045fe:	f2 08 09 48 	lsl	r8,r9,r8
80004602:	10 99       	mov	r9,r8
80004604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004608:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000460a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000460e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004612:	30 19       	mov	r9,1
80004614:	f2 08 09 48 	lsl	r8,r9,r8
80004618:	10 99       	mov	r9,r8
8000461a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000461e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004620:	cf 18       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004626:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000462a:	30 19       	mov	r9,1
8000462c:	f2 08 09 48 	lsl	r8,r9,r8
80004630:	10 99       	mov	r9,r8
80004632:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004636:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004638:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000463c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004640:	30 19       	mov	r9,1
80004642:	f2 08 09 48 	lsl	r8,r9,r8
80004646:	10 99       	mov	r9,r8
80004648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000464c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000464e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004652:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004656:	30 19       	mov	r9,1
80004658:	f2 08 09 48 	lsl	r8,r9,r8
8000465c:	10 99       	mov	r9,r8
8000465e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004662:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004664:	cc f8       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000466a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000466e:	30 19       	mov	r9,1
80004670:	f2 08 09 48 	lsl	r8,r9,r8
80004674:	10 99       	mov	r9,r8
80004676:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000467a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000467c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004680:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004684:	30 19       	mov	r9,1
80004686:	f2 08 09 48 	lsl	r8,r9,r8
8000468a:	10 99       	mov	r9,r8
8000468c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004690:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80004692:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004696:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000469a:	30 19       	mov	r9,1
8000469c:	f2 08 09 48 	lsl	r8,r9,r8
800046a0:	10 99       	mov	r9,r8
800046a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046a6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800046a8:	ca d8       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800046aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046b2:	30 19       	mov	r9,1
800046b4:	f2 08 09 48 	lsl	r8,r9,r8
800046b8:	10 99       	mov	r9,r8
800046ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046be:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800046c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046c8:	30 19       	mov	r9,1
800046ca:	f2 08 09 48 	lsl	r8,r9,r8
800046ce:	10 99       	mov	r9,r8
800046d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046d4:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800046d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046de:	30 19       	mov	r9,1
800046e0:	f2 08 09 48 	lsl	r8,r9,r8
800046e4:	10 99       	mov	r9,r8
800046e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046ea:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800046ec:	c8 b8       	rjmp	80004802 <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800046ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046f6:	30 19       	mov	r9,1
800046f8:	f2 08 09 48 	lsl	r8,r9,r8
800046fc:	10 99       	mov	r9,r8
800046fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004702:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004708:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000470c:	30 19       	mov	r9,1
8000470e:	f2 08 09 48 	lsl	r8,r9,r8
80004712:	10 99       	mov	r9,r8
80004714:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004718:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000471a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000471e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004722:	30 19       	mov	r9,1
80004724:	f2 08 09 48 	lsl	r8,r9,r8
80004728:	10 99       	mov	r9,r8
8000472a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000472e:	91 d9       	st.w	r8[0x34],r9
		break;
80004730:	c6 98       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004736:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000473a:	30 19       	mov	r9,1
8000473c:	f2 08 09 48 	lsl	r8,r9,r8
80004740:	10 99       	mov	r9,r8
80004742:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004746:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004748:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000474c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004750:	30 19       	mov	r9,1
80004752:	f2 08 09 48 	lsl	r8,r9,r8
80004756:	10 99       	mov	r9,r8
80004758:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000475c:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000475e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004762:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004766:	30 19       	mov	r9,1
80004768:	f2 08 09 48 	lsl	r8,r9,r8
8000476c:	10 99       	mov	r9,r8
8000476e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004772:	91 d9       	st.w	r8[0x34],r9
		break;
80004774:	c4 78       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000477a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000477e:	30 19       	mov	r9,1
80004780:	f2 08 09 48 	lsl	r8,r9,r8
80004784:	10 99       	mov	r9,r8
80004786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000478a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000478c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004790:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004794:	30 19       	mov	r9,1
80004796:	f2 08 09 48 	lsl	r8,r9,r8
8000479a:	10 99       	mov	r9,r8
8000479c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047a0:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800047a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047aa:	30 19       	mov	r9,1
800047ac:	f2 08 09 48 	lsl	r8,r9,r8
800047b0:	10 99       	mov	r9,r8
800047b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047b6:	91 d9       	st.w	r8[0x34],r9
		break;
800047b8:	c2 58       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800047ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047c2:	30 19       	mov	r9,1
800047c4:	f2 08 09 48 	lsl	r8,r9,r8
800047c8:	10 99       	mov	r9,r8
800047ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047ce:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800047d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047d8:	30 19       	mov	r9,1
800047da:	f2 08 09 48 	lsl	r8,r9,r8
800047de:	10 99       	mov	r9,r8
800047e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047e4:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800047e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047ee:	30 19       	mov	r9,1
800047f0:	f2 08 09 48 	lsl	r8,r9,r8
800047f4:	10 99       	mov	r9,r8
800047f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047fa:	91 d9       	st.w	r8[0x34],r9
		break;
800047fc:	c0 38       	rjmp	80004802 <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
800047fe:	30 18       	mov	r8,1
80004800:	c0 d8       	rjmp	8000481a <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80004802:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004806:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000480a:	30 19       	mov	r9,1
8000480c:	f2 08 09 48 	lsl	r8,r9,r8
80004810:	10 99       	mov	r9,r8
80004812:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004816:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80004818:	30 08       	mov	r8,0
}
8000481a:	10 9c       	mov	r12,r8
8000481c:	2f dd       	sub	sp,-12
8000481e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004822:	00 00       	add	r0,r0
80004824:	80 01       	ld.sh	r1,r0[0x0]
80004826:	0a 40       	or	r0,r5

80004828 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80004828:	eb cd 40 80 	pushm	r7,lr
8000482c:	1a 97       	mov	r7,sp
8000482e:	20 3d       	sub	sp,12
80004830:	ef 4c ff f8 	st.w	r7[-8],r12
80004834:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000483c:	a5 98       	lsr	r8,0x5
8000483e:	a9 78       	lsl	r8,0x9
80004840:	e0 28 e0 00 	sub	r8,57344
80004844:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
80004848:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000484c:	e2 18 00 08 	andl	r8,0x8,COH
80004850:	c0 e0       	breq	8000486c <gpio_configure_pin+0x44>
		gpio_port->pders = 1 << (pin & 0x1F);
80004852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004856:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000485a:	30 19       	mov	r9,1
8000485c:	f2 08 09 48 	lsl	r8,r9,r8
80004860:	10 99       	mov	r9,r8
80004862:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004866:	f1 49 00 84 	st.w	r8[132],r9
8000486a:	c0 d8       	rjmp	80004884 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
8000486c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004870:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004874:	30 19       	mov	r9,1
80004876:	f2 08 09 48 	lsl	r8,r9,r8
8000487a:	10 99       	mov	r9,r8
8000487c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004880:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
80004884:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004888:	e2 18 00 04 	andl	r8,0x4,COH
8000488c:	c0 e0       	breq	800048a8 <gpio_configure_pin+0x80>
		gpio_port->puers = 1 << (pin & 0x1F);
8000488e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004892:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004896:	30 19       	mov	r9,1
80004898:	f2 08 09 48 	lsl	r8,r9,r8
8000489c:	10 99       	mov	r9,r8
8000489e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048a2:	f1 49 00 74 	st.w	r8[116],r9
800048a6:	c0 d8       	rjmp	800048c0 <gpio_configure_pin+0x98>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800048a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048b0:	30 19       	mov	r9,1
800048b2:	f2 08 09 48 	lsl	r8,r9,r8
800048b6:	10 99       	mov	r9,r8
800048b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048bc:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
800048c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048c4:	e2 18 00 40 	andl	r8,0x40,COH
800048c8:	c0 e0       	breq	800048e4 <gpio_configure_pin+0xbc>
		gpio_port->odmers = 1 << (pin & 0x1F);
800048ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048d2:	30 19       	mov	r9,1
800048d4:	f2 08 09 48 	lsl	r8,r9,r8
800048d8:	10 99       	mov	r9,r8
800048da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048de:	f1 49 00 e4 	st.w	r8[228],r9
800048e2:	c0 d8       	rjmp	800048fc <gpio_configure_pin+0xd4>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
800048e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048ec:	30 19       	mov	r9,1
800048ee:	f2 08 09 48 	lsl	r8,r9,r8
800048f2:	10 99       	mov	r9,r8
800048f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048f8:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
800048fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004900:	e2 18 00 10 	andl	r8,0x10,COH
80004904:	c0 e0       	breq	80004920 <gpio_configure_pin+0xf8>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
80004906:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000490a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000490e:	30 19       	mov	r9,1
80004910:	f2 08 09 48 	lsl	r8,r9,r8
80004914:	10 99       	mov	r9,r8
80004916:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000491a:	f1 49 01 04 	st.w	r8[260],r9
8000491e:	c0 d8       	rjmp	80004938 <gpio_configure_pin+0x110>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
80004920:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004924:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004928:	30 19       	mov	r9,1
8000492a:	f2 08 09 48 	lsl	r8,r9,r8
8000492e:	10 99       	mov	r9,r8
80004930:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004934:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
80004938:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000493c:	e2 18 00 20 	andl	r8,0x20,COH
80004940:	c0 e0       	breq	8000495c <gpio_configure_pin+0x134>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
80004942:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004946:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000494a:	30 19       	mov	r9,1
8000494c:	f2 08 09 48 	lsl	r8,r9,r8
80004950:	10 99       	mov	r9,r8
80004952:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004956:	f1 49 01 14 	st.w	r8[276],r9
8000495a:	c0 d8       	rjmp	80004974 <gpio_configure_pin+0x14c>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
8000495c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004960:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004964:	30 19       	mov	r9,1
80004966:	f2 08 09 48 	lsl	r8,r9,r8
8000496a:	10 99       	mov	r9,r8
8000496c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004970:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80004974:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004978:	e2 18 00 80 	andl	r8,0x80,COH
8000497c:	c5 a0       	breq	80004a30 <gpio_configure_pin+0x208>
		if (flags & GPIO_BOTHEDGES) {
8000497e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004982:	e2 18 01 80 	andl	r8,0x180,COH
80004986:	c1 a0       	breq	800049ba <gpio_configure_pin+0x192>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000498c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004990:	30 19       	mov	r9,1
80004992:	f2 08 09 48 	lsl	r8,r9,r8
80004996:	10 99       	mov	r9,r8
80004998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000499c:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800049a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049a8:	30 19       	mov	r9,1
800049aa:	f2 08 09 48 	lsl	r8,r9,r8
800049ae:	10 99       	mov	r9,r8
800049b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049b4:	f1 49 00 b8 	st.w	r8[184],r9
800049b8:	c3 c8       	rjmp	80004a30 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_RISING) {
800049ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049be:	e2 18 02 80 	andl	r8,0x280,COH
800049c2:	c1 a0       	breq	800049f6 <gpio_configure_pin+0x1ce>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800049c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049cc:	30 19       	mov	r9,1
800049ce:	f2 08 09 48 	lsl	r8,r9,r8
800049d2:	10 99       	mov	r9,r8
800049d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049d8:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800049dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049e4:	30 19       	mov	r9,1
800049e6:	f2 08 09 48 	lsl	r8,r9,r8
800049ea:	10 99       	mov	r9,r8
800049ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049f0:	f1 49 00 b8 	st.w	r8[184],r9
800049f4:	c1 e8       	rjmp	80004a30 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_FALLING) {
800049f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049fa:	e2 18 03 80 	andl	r8,0x380,COH
800049fe:	c1 90       	breq	80004a30 <gpio_configure_pin+0x208>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004a00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a04:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a08:	30 19       	mov	r9,1
80004a0a:	f2 08 09 48 	lsl	r8,r9,r8
80004a0e:	10 99       	mov	r9,r8
80004a10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a14:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80004a18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a1c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a20:	30 19       	mov	r9,1
80004a22:	f2 08 09 48 	lsl	r8,r9,r8
80004a26:	10 99       	mov	r9,r8
80004a28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a2c:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80004a30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a34:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004a38:	5c 58       	castu.b	r8
80004a3a:	c2 c0       	breq	80004a92 <gpio_configure_pin+0x26a>
		if (flags & GPIO_INIT_HIGH) {
80004a3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a40:	e2 18 00 02 	andl	r8,0x2,COH
80004a44:	c0 e0       	breq	80004a60 <gpio_configure_pin+0x238>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80004a46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a4e:	30 19       	mov	r9,1
80004a50:	f2 08 09 48 	lsl	r8,r9,r8
80004a54:	10 99       	mov	r9,r8
80004a56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a5a:	f1 49 00 54 	st.w	r8[84],r9
80004a5e:	c0 d8       	rjmp	80004a78 <gpio_configure_pin+0x250>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80004a60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a64:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a68:	30 19       	mov	r9,1
80004a6a:	f2 08 09 48 	lsl	r8,r9,r8
80004a6e:	10 99       	mov	r9,r8
80004a70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a74:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80004a78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a7c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a80:	30 19       	mov	r9,1
80004a82:	f2 08 09 48 	lsl	r8,r9,r8
80004a86:	10 99       	mov	r9,r8
80004a88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a8c:	f1 49 00 44 	st.w	r8[68],r9
80004a90:	c0 d8       	rjmp	80004aaa <gpio_configure_pin+0x282>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80004a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a9a:	30 19       	mov	r9,1
80004a9c:	f2 08 09 48 	lsl	r8,r9,r8
80004aa0:	10 99       	mov	r9,r8
80004aa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004aa6:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004aaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004ab2:	30 19       	mov	r9,1
80004ab4:	f2 08 09 48 	lsl	r8,r9,r8
80004ab8:	10 99       	mov	r9,r8
80004aba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004abe:	91 19       	st.w	r8[0x4],r9
}
80004ac0:	2f dd       	sub	sp,-12
80004ac2:	e3 cd 80 80 	ldm	sp++,r7,pc

80004ac6 <gpio_get_pin_value>:
 * \param pin The pin number.
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
80004ac6:	eb cd 40 80 	pushm	r7,lr
80004aca:	1a 97       	mov	r7,sp
80004acc:	20 2d       	sub	sp,8
80004ace:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004ad2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ad6:	a5 98       	lsr	r8,0x5
80004ad8:	a9 78       	lsl	r8,0x9
80004ada:	e0 28 e0 00 	sub	r8,57344
80004ade:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80004ae2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ae6:	71 89       	ld.w	r9,r8[0x60]
80004ae8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004af0:	f2 08 0a 48 	lsr	r8,r9,r8
80004af4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004af8:	5c 58       	castu.b	r8
}
80004afa:	10 9c       	mov	r12,r8
80004afc:	2f ed       	sub	sp,-8
80004afe:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b02 <gpio_set_pin_high>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
80004b02:	eb cd 40 80 	pushm	r7,lr
80004b06:	1a 97       	mov	r7,sp
80004b08:	20 2d       	sub	sp,8
80004b0a:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b12:	a5 98       	lsr	r8,0x5
80004b14:	a9 78       	lsl	r8,0x9
80004b16:	e0 28 e0 00 	sub	r8,57344
80004b1a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80004b1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b22:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b26:	30 19       	mov	r9,1
80004b28:	f2 08 09 48 	lsl	r8,r9,r8
80004b2c:	10 99       	mov	r9,r8
80004b2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b32:	f1 49 00 54 	st.w	r8[84],r9
}
80004b36:	2f ed       	sub	sp,-8
80004b38:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b3c <gpio_set_pin_low>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
80004b3c:	eb cd 40 80 	pushm	r7,lr
80004b40:	1a 97       	mov	r7,sp
80004b42:	20 2d       	sub	sp,8
80004b44:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b4c:	a5 98       	lsr	r8,0x5
80004b4e:	a9 78       	lsl	r8,0x9
80004b50:	e0 28 e0 00 	sub	r8,57344
80004b54:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b5c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b60:	30 19       	mov	r9,1
80004b62:	f2 08 09 48 	lsl	r8,r9,r8
80004b66:	10 99       	mov	r9,r8
80004b68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b6c:	f1 49 00 58 	st.w	r8[88],r9
}
80004b70:	2f ed       	sub	sp,-8
80004b72:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b76 <gpio_toggle_pin>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
80004b76:	eb cd 40 80 	pushm	r7,lr
80004b7a:	1a 97       	mov	r7,sp
80004b7c:	20 2d       	sub	sp,8
80004b7e:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b86:	a5 98       	lsr	r8,0x5
80004b88:	a9 78       	lsl	r8,0x9
80004b8a:	e0 28 e0 00 	sub	r8,57344
80004b8e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80004b92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b9a:	30 19       	mov	r9,1
80004b9c:	f2 08 09 48 	lsl	r8,r9,r8
80004ba0:	10 99       	mov	r9,r8
80004ba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ba6:	f1 49 00 5c 	st.w	r8[92],r9
}
80004baa:	2f ed       	sub	sp,-8
80004bac:	e3 cd 80 80 	ldm	sp++,r7,pc

80004bb0 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80004bb0:	eb cd 40 80 	pushm	r7,lr
80004bb4:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80004bb6:	c0 08       	rjmp	80004bb6 <_unhandled_interrupt+0x6>

80004bb8 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80004bb8:	eb cd 40 80 	pushm	r7,lr
80004bbc:	1a 97       	mov	r7,sp
80004bbe:	20 3d       	sub	sp,12
80004bc0:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80004bc4:	fe 78 00 00 	mov	r8,-65536
80004bc8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004bcc:	f2 09 11 03 	rsub	r9,r9,3
80004bd0:	28 09       	sub	r9,-128
80004bd2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004bd6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80004bda:	fe 78 00 00 	mov	r8,-65536
80004bde:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004be2:	2c 09       	sub	r9,-64
80004be4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004be8:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004bec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bf0:	58 08       	cp.w	r8,0
80004bf2:	c1 30       	breq	80004c18 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004bf4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bf8:	48 b8       	lddpc	r8,80004c24 <_get_interrupt_handler+0x6c>
80004bfa:	a1 79       	lsl	r9,0x1
80004bfc:	2f f9       	sub	r9,-1
80004bfe:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c06:	f0 08 12 00 	clz	r8,r8
80004c0a:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80004c0e:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004c10:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004c14:	70 08       	ld.w	r8,r8[0x0]
80004c16:	c0 28       	rjmp	80004c1a <_get_interrupt_handler+0x62>
80004c18:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80004c1a:	10 9c       	mov	r12,r8
80004c1c:	2f dd       	sub	sp,-12
80004c1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c22:	00 00       	add	r0,r0
80004c24:	80 01       	ld.sh	r1,r0[0x0]
80004c26:	0a 60       	and	r0,r5

80004c28 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80004c28:	eb cd 40 80 	pushm	r7,lr
80004c2c:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004c2e:	48 38       	lddpc	r8,80004c38 <INTC_init_evba+0x10>
80004c30:	e3 b8 00 01 	mtsr	0x4,r8
}
80004c34:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c38:	80 01       	ld.sh	r1,r0[0x0]
80004c3a:	08 00       	add	r0,r4

80004c3c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80004c3c:	eb cd 40 80 	pushm	r7,lr
80004c40:	1a 97       	mov	r7,sp
80004c42:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80004c44:	f0 1f 00 20 	mcall	80004cc4 <INTC_init_interrupts+0x88>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004c48:	30 08       	mov	r8,0
80004c4a:	ef 48 ff f8 	st.w	r7[-8],r8
80004c4e:	c3 18       	rjmp	80004cb0 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004c50:	30 08       	mov	r8,0
80004c52:	ef 48 ff fc 	st.w	r7[-4],r8
80004c56:	c1 48       	rjmp	80004c7e <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80004c58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c5c:	49 b8       	lddpc	r8,80004cc8 <INTC_init_interrupts+0x8c>
80004c5e:	a1 79       	lsl	r9,0x1
80004c60:	2f f9       	sub	r9,-1
80004c62:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004c66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c6a:	a3 68       	lsl	r8,0x2
80004c6c:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004c70:	49 79       	lddpc	r9,80004ccc <INTC_init_interrupts+0x90>
80004c72:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004c74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c78:	2f f8       	sub	r8,-1
80004c7a:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80004c7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c82:	49 28       	lddpc	r8,80004cc8 <INTC_init_interrupts+0x8c>
80004c84:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004c88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c8c:	10 39       	cp.w	r9,r8
80004c8e:	fe 9b ff e5 	brhi	80004c58 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004c92:	fe 78 00 00 	mov	r8,-65536
80004c96:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c9a:	48 eb       	lddpc	r11,80004cd0 <INTC_init_interrupts+0x94>
80004c9c:	48 ea       	lddpc	r10,80004cd4 <INTC_init_interrupts+0x98>
80004c9e:	f6 0a 01 0a 	sub	r10,r11,r10
80004ca2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004ca6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004caa:	2f f8       	sub	r8,-1
80004cac:	ef 48 ff f8 	st.w	r7[-8],r8
80004cb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004cb4:	e0 48 00 2e 	cp.w	r8,46
80004cb8:	fe 98 ff cc 	brls	80004c50 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80004cbc:	2f ed       	sub	sp,-8
80004cbe:	e3 cd 80 80 	ldm	sp++,r7,pc
80004cc2:	00 00       	add	r0,r0
80004cc4:	80 00       	ld.sh	r0,r0[0x0]
80004cc6:	4c 28       	lddpc	r8,80004dcc <cpu_irq_is_enabled_flags+0x2>
80004cc8:	80 01       	ld.sh	r1,r0[0x0]
80004cca:	0a 60       	and	r0,r5
80004ccc:	80 00       	ld.sh	r0,r0[0x0]
80004cce:	4b b0       	lddpc	r0,80004db8 <cpu_irq_save+0xc>
80004cd0:	80 01       	ld.sh	r1,r0[0x0]
80004cd2:	09 04       	ld.w	r4,r4++
80004cd4:	80 01       	ld.sh	r1,r0[0x0]
80004cd6:	08 00       	add	r0,r4

80004cd8 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80004cd8:	eb cd 40 80 	pushm	r7,lr
80004cdc:	1a 97       	mov	r7,sp
80004cde:	20 4d       	sub	sp,16
80004ce0:	ef 4c ff f8 	st.w	r7[-8],r12
80004ce4:	ef 4b ff f4 	st.w	r7[-12],r11
80004ce8:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80004cec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004cf0:	a5 98       	lsr	r8,0x5
80004cf2:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80004cf6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004cfa:	4a 78       	lddpc	r8,80004d94 <INTC_register_interrupt+0xbc>
80004cfc:	a1 79       	lsl	r9,0x1
80004cfe:	2f f9       	sub	r9,-1
80004d00:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004d04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004d08:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004d0c:	a3 68       	lsl	r8,0x2
80004d0e:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80004d12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004d16:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80004d18:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d1c:	58 08       	cp.w	r8,0
80004d1e:	c0 c1       	brne	80004d36 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004d20:	fe 78 00 00 	mov	r8,-65536
80004d24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d28:	49 cb       	lddpc	r11,80004d98 <INTC_register_interrupt+0xc0>
80004d2a:	49 da       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d2c:	f6 0a 01 0a 	sub	r10,r11,r10
80004d30:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004d34:	c2 d8       	rjmp	80004d8e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80004d36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d3a:	58 18       	cp.w	r8,1
80004d3c:	c0 d1       	brne	80004d56 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004d3e:	fe 78 00 00 	mov	r8,-65536
80004d42:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d46:	49 7b       	lddpc	r11,80004da0 <INTC_register_interrupt+0xc8>
80004d48:	49 5a       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d4a:	f6 0a 01 0a 	sub	r10,r11,r10
80004d4e:	bf aa       	sbr	r10,0x1e
80004d50:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004d54:	c1 d8       	rjmp	80004d8e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80004d56:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d5a:	58 28       	cp.w	r8,2
80004d5c:	c0 d1       	brne	80004d76 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80004d5e:	fe 78 00 00 	mov	r8,-65536
80004d62:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d66:	49 0b       	lddpc	r11,80004da4 <INTC_register_interrupt+0xcc>
80004d68:	48 da       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d6a:	f6 0a 01 0a 	sub	r10,r11,r10
80004d6e:	bf ba       	sbr	r10,0x1f
80004d70:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004d74:	c0 d8       	rjmp	80004d8e <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004d76:	fe 78 00 00 	mov	r8,-65536
80004d7a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d7e:	48 bb       	lddpc	r11,80004da8 <INTC_register_interrupt+0xd0>
80004d80:	48 7a       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d82:	f6 0a 01 0a 	sub	r10,r11,r10
80004d86:	ea 1a c0 00 	orh	r10,0xc000
80004d8a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80004d8e:	2f cd       	sub	sp,-16
80004d90:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d94:	80 01       	ld.sh	r1,r0[0x0]
80004d96:	0a 60       	and	r0,r5
80004d98:	80 01       	ld.sh	r1,r0[0x0]
80004d9a:	09 04       	ld.w	r4,r4++
80004d9c:	80 01       	ld.sh	r1,r0[0x0]
80004d9e:	08 00       	add	r0,r4
80004da0:	80 01       	ld.sh	r1,r0[0x0]
80004da2:	09 12       	ld.sh	r2,r4++
80004da4:	80 01       	ld.sh	r1,r0[0x0]
80004da6:	09 20       	ld.uh	r0,r4++
80004da8:	80 01       	ld.sh	r1,r0[0x0]
80004daa:	09 2e       	ld.uh	lr,r4++

80004dac <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80004dac:	eb cd 40 80 	pushm	r7,lr
80004db0:	1a 97       	mov	r7,sp
80004db2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004db4:	e1 b8 00 00 	mfsr	r8,0x0
80004db8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80004dbc:	d3 03       	ssrf	0x10

	return flags;
80004dbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80004dc2:	10 9c       	mov	r12,r8
80004dc4:	2f fd       	sub	sp,-4
80004dc6:	e3 cd 80 80 	ldm	sp++,r7,pc

80004dca <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004dca:	eb cd 40 80 	pushm	r7,lr
80004dce:	1a 97       	mov	r7,sp
80004dd0:	20 1d       	sub	sp,4
80004dd2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004dd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dda:	e6 18 00 01 	andh	r8,0x1,COH
80004dde:	5f 08       	sreq	r8
80004de0:	5c 58       	castu.b	r8
}
80004de2:	10 9c       	mov	r12,r8
80004de4:	2f fd       	sub	sp,-4
80004de6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004dea:	d7 03       	nop

80004dec <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80004dec:	eb cd 40 80 	pushm	r7,lr
80004df0:	1a 97       	mov	r7,sp
80004df2:	20 1d       	sub	sp,4
80004df4:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004df8:	ee fc ff fc 	ld.w	r12,r7[-4]
80004dfc:	f0 1f 00 05 	mcall	80004e10 <cpu_irq_restore+0x24>
80004e00:	18 98       	mov	r8,r12
80004e02:	58 08       	cp.w	r8,0
80004e04:	c0 20       	breq	80004e08 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80004e06:	d5 03       	csrf	0x10
   }

	barrier();
}
80004e08:	2f fd       	sub	sp,-4
80004e0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e0e:	00 00       	add	r0,r0
80004e10:	80 00       	ld.sh	r0,r0[0x0]
80004e12:	4d ca       	lddpc	r10,80004f80 <twim_set_speed+0x28>

80004e14 <twim_master_interrupt_handler>:
/**
 * \internal
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80004e14:	eb cd 40 80 	pushm	r7,lr
80004e18:	1a 97       	mov	r7,sp
80004e1a:	20 1d       	sub	sp,4
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80004e1c:	4c 68       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e1e:	70 08       	ld.w	r8,r8[0x0]
80004e20:	70 79       	ld.w	r9,r8[0x1c]
80004e22:	4c 68       	lddpc	r8,80004f38 <twim_master_interrupt_handler+0x124>
80004e24:	70 08       	ld.w	r8,r8[0x0]
80004e26:	f3 e8 00 08 	and	r8,r9,r8
80004e2a:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80004e2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e32:	e2 18 07 00 	andl	r8,0x700,COH
80004e36:	c1 e0       	breq	80004e72 <twim_master_interrupt_handler+0x5e>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80004e38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e3c:	e2 18 03 00 	andl	r8,0x300,COH
80004e40:	c0 30       	breq	80004e46 <twim_master_interrupt_handler+0x32>
80004e42:	3f c8       	mov	r8,-4
80004e44:	c0 28       	rjmp	80004e48 <twim_master_interrupt_handler+0x34>
80004e46:	3f e8       	mov	r8,-2
80004e48:	4b d9       	lddpc	r9,80004f3c <twim_master_interrupt_handler+0x128>
80004e4a:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80004e4c:	4b a8       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e4e:	70 09       	ld.w	r9,r8[0x0]
80004e50:	72 38       	ld.w	r8,r9[0xc]
80004e52:	30 0a       	mov	r10,0
80004e54:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80004e58:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80004e5a:	4b 78       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e5c:	70 08       	ld.w	r8,r8[0x0]
80004e5e:	3f f9       	mov	r9,-1
80004e60:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80004e62:	4b 58       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e64:	70 08       	ld.w	r8,r8[0x0]
80004e66:	3f f9       	mov	r9,-1
80004e68:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80004e6a:	4b 69       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004e6c:	30 08       	mov	r8,0
80004e6e:	b2 88       	st.b	r9[0x0],r8
80004e70:	c5 e8       	rjmp	80004f2c <twim_master_interrupt_handler+0x118>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80004e72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e76:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004e7a:	5c 58       	castu.b	r8
80004e7c:	c2 00       	breq	80004ebc <twim_master_interrupt_handler+0xa8>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80004e7e:	4b 28       	lddpc	r8,80004f44 <twim_master_interrupt_handler+0x130>
80004e80:	70 09       	ld.w	r9,r8[0x0]
80004e82:	4a d8       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e84:	70 08       	ld.w	r8,r8[0x0]
80004e86:	70 58       	ld.w	r8,r8[0x14]
80004e88:	5c 58       	castu.b	r8
80004e8a:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80004e8c:	4a e8       	lddpc	r8,80004f44 <twim_master_interrupt_handler+0x130>
80004e8e:	70 08       	ld.w	r8,r8[0x0]
80004e90:	f0 c9 ff ff 	sub	r9,r8,-1
80004e94:	4a c8       	lddpc	r8,80004f44 <twim_master_interrupt_handler+0x130>
80004e96:	91 09       	st.w	r8[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80004e98:	4a c8       	lddpc	r8,80004f48 <twim_master_interrupt_handler+0x134>
80004e9a:	70 08       	ld.w	r8,r8[0x0]
80004e9c:	f0 c9 00 01 	sub	r9,r8,1
80004ea0:	4a a8       	lddpc	r8,80004f48 <twim_master_interrupt_handler+0x134>
80004ea2:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80004ea4:	4a 98       	lddpc	r8,80004f48 <twim_master_interrupt_handler+0x134>
80004ea6:	70 08       	ld.w	r8,r8[0x0]
80004ea8:	58 08       	cp.w	r8,0
80004eaa:	c4 11       	brne	80004f2c <twim_master_interrupt_handler+0x118>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80004eac:	4a 28       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004eae:	70 08       	ld.w	r8,r8[0x0]
80004eb0:	30 19       	mov	r9,1
80004eb2:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004eb4:	4a 39       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004eb6:	30 08       	mov	r8,0
80004eb8:	b2 88       	st.b	r9[0x0],r8
80004eba:	c3 98       	rjmp	80004f2c <twim_master_interrupt_handler+0x118>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80004ebc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ec0:	e2 18 00 02 	andl	r8,0x2,COH
80004ec4:	c3 40       	breq	80004f2c <twim_master_interrupt_handler+0x118>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80004ec6:	4a 28       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004ec8:	70 08       	ld.w	r8,r8[0x0]
80004eca:	58 08       	cp.w	r8,0
80004ecc:	c0 91       	brne	80004ede <twim_master_interrupt_handler+0xca>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80004ece:	49 a8       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004ed0:	70 08       	ld.w	r8,r8[0x0]
80004ed2:	30 29       	mov	r9,2
80004ed4:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004ed6:	49 b9       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004ed8:	30 08       	mov	r8,0
80004eda:	b2 88       	st.b	r9[0x0],r8
80004edc:	c2 88       	rjmp	80004f2c <twim_master_interrupt_handler+0x118>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80004ede:	49 68       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004ee0:	70 0a       	ld.w	r10,r8[0x0]
80004ee2:	49 c8       	lddpc	r8,80004f50 <twim_master_interrupt_handler+0x13c>
80004ee4:	70 08       	ld.w	r8,r8[0x0]
80004ee6:	11 89       	ld.ub	r9,r8[0x0]
80004ee8:	5c 59       	castu.b	r9
80004eea:	95 69       	st.w	r10[0x18],r9
80004eec:	f0 c9 ff ff 	sub	r9,r8,-1
80004ef0:	49 88       	lddpc	r8,80004f50 <twim_master_interrupt_handler+0x13c>
80004ef2:	91 09       	st.w	r8[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80004ef4:	49 68       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004ef6:	70 08       	ld.w	r8,r8[0x0]
80004ef8:	f0 c9 00 01 	sub	r9,r8,1
80004efc:	49 48       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004efe:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80004f00:	49 38       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004f02:	70 08       	ld.w	r8,r8[0x0]
80004f04:	58 08       	cp.w	r8,0
80004f06:	c1 31       	brne	80004f2c <twim_master_interrupt_handler+0x118>
				// Check for next transfer
				if(twim_next) {
80004f08:	48 e8       	lddpc	r8,80004f40 <twim_master_interrupt_handler+0x12c>
80004f0a:	11 88       	ld.ub	r8,r8[0x0]
80004f0c:	5c 58       	castu.b	r8
80004f0e:	c0 f0       	breq	80004f2c <twim_master_interrupt_handler+0x118>
					twim_next = false;
80004f10:	48 c9       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004f12:	30 08       	mov	r8,0
80004f14:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80004f16:	49 08       	lddpc	r8,80004f54 <twim_master_interrupt_handler+0x140>
80004f18:	70 08       	ld.w	r8,r8[0x0]
80004f1a:	70 39       	ld.w	r9,r8[0xc]
80004f1c:	48 c8       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004f1e:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80004f20:	48 d8       	lddpc	r8,80004f54 <twim_master_interrupt_handler+0x140>
80004f22:	70 08       	ld.w	r8,r8[0x0]
80004f24:	70 28       	ld.w	r8,r8[0x8]
80004f26:	10 99       	mov	r9,r8
80004f28:	48 a8       	lddpc	r8,80004f50 <twim_master_interrupt_handler+0x13c>
80004f2a:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80004f2c:	2f fd       	sub	sp,-4
80004f2e:	e3 cd 40 80 	ldm	sp++,r7,lr
80004f32:	d6 03       	rete
80004f34:	00 00       	add	r0,r0
80004f36:	07 88       	ld.ub	r8,r3[0x0]
80004f38:	00 00       	add	r0,r0
80004f3a:	07 a0       	ld.ub	r0,r3[0x2]
80004f3c:	00 00       	add	r0,r0
80004f3e:	07 94       	ld.ub	r4,r3[0x1]
80004f40:	00 00       	add	r0,r0
80004f42:	07 a8       	ld.ub	r8,r3[0x2]
80004f44:	00 00       	add	r0,r0
80004f46:	07 90       	ld.ub	r0,r3[0x1]
80004f48:	00 00       	add	r0,r0
80004f4a:	07 9c       	ld.ub	r12,r3[0x1]
80004f4c:	00 00       	add	r0,r0
80004f4e:	07 98       	ld.ub	r8,r3[0x1]
80004f50:	00 00       	add	r0,r0
80004f52:	07 8c       	ld.ub	r12,r3[0x0]
80004f54:	00 00       	add	r0,r0
80004f56:	07 a4       	ld.ub	r4,r3[0x2]

80004f58 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80004f58:	eb cd 40 80 	pushm	r7,lr
80004f5c:	1a 97       	mov	r7,sp
80004f5e:	20 5d       	sub	sp,20
80004f60:	ef 4c ff f4 	st.w	r7[-12],r12
80004f64:	ef 4b ff f0 	st.w	r7[-16],r11
80004f68:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
80004f6c:	30 08       	mov	r8,0
80004f6e:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
80004f72:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004f76:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004f7a:	f0 09 0d 08 	divu	r8,r8,r9
80004f7e:	a1 98       	lsr	r8,0x1
80004f80:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004f84:	c0 b8       	rjmp	80004f9a <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
80004f86:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004f8a:	2f f8       	sub	r8,-1
80004f8c:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
80004f90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f94:	a1 98       	lsr	r8,0x1
80004f96:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004f9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f9e:	e0 48 00 ff 	cp.w	r8,255
80004fa2:	e0 88 00 09 	brls	80004fb4 <twim_set_speed+0x5c>
80004fa6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004faa:	30 78       	mov	r8,7
80004fac:	f0 09 18 00 	cp.b	r9,r8
80004fb0:	fe 98 ff eb 	brls	80004f86 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80004fb4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004fb8:	30 78       	mov	r8,7
80004fba:	f0 09 18 00 	cp.b	r9,r8
80004fbe:	e0 88 00 04 	brls	80004fc6 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
80004fc2:	3f 88       	mov	r8,-8
80004fc4:	c1 a8       	rjmp	80004ff8 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004fc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fca:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80004fce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fd2:	a1 98       	lsr	r8,0x1
80004fd4:	ee fa ff f8 	ld.w	r10,r7[-8]
80004fd8:	f4 08 01 08 	sub	r8,r10,r8
80004fdc:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
80004fde:	10 49       	or	r9,r8
80004fe0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004fe4:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
80004fe6:	10 49       	or	r9,r8
80004fe8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fec:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004fee:	10 49       	or	r9,r8
80004ff0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ff4:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
80004ff6:	30 08       	mov	r8,0
}
80004ff8:	10 9c       	mov	r12,r8
80004ffa:	2f bd       	sub	sp,-20
80004ffc:	e3 cd 80 80 	ldm	sp++,r7,pc

80005000 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80005000:	eb cd 40 80 	pushm	r7,lr
80005004:	1a 97       	mov	r7,sp
80005006:	20 4d       	sub	sp,16
80005008:	ef 4c ff f4 	st.w	r7[-12],r12
8000500c:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80005010:	e1 b8 00 00 	mfsr	r8,0x0
80005014:	10 9c       	mov	r12,r8
80005016:	f0 1f 00 37 	mcall	800050f0 <twim_master_init+0xf0>
8000501a:	18 98       	mov	r8,r12
8000501c:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80005020:	4b 58       	lddpc	r8,800050f4 <twim_master_init+0xf4>
80005022:	30 09       	mov	r9,0
80005024:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80005026:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000502a:	30 08       	mov	r8,0
8000502c:	f0 09 18 00 	cp.b	r9,r8
80005030:	c0 20       	breq	80005034 <twim_master_init+0x34>
		cpu_irq_disable ();
80005032:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80005034:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005038:	3f f9       	mov	r9,-1
8000503a:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000503c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005040:	30 19       	mov	r9,1
80005042:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005044:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005048:	e0 69 00 80 	mov	r9,128
8000504c:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
8000504e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80005052:	30 08       	mov	r8,0
80005054:	f0 09 18 00 	cp.b	r9,r8
80005058:	c0 20       	breq	8000505c <twim_master_init+0x5c>
		cpu_irq_enable ();
8000505a:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
8000505c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005060:	3f f9       	mov	r9,-1
80005062:	91 b9       	st.w	r8[0x2c],r9

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
80005064:	f0 1f 00 25 	mcall	800050f8 <twim_master_init+0xf8>
80005068:	18 98       	mov	r8,r12
8000506a:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
8000506e:	30 1a       	mov	r10,1
80005070:	e0 6b 03 20 	mov	r11,800
80005074:	4a 2c       	lddpc	r12,800050fc <twim_master_init+0xfc>
80005076:	f0 1f 00 23 	mcall	80005100 <twim_master_init+0x100>
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
8000507a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000507e:	f0 1f 00 22 	mcall	80005104 <twim_master_init+0x104>

	if (opt->smbus) {
80005082:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005086:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000508a:	58 08       	cp.w	r8,0
8000508c:	c0 90       	breq	8000509e <twim_master_init+0x9e>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000508e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005092:	31 09       	mov	r9,16
80005094:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
80005096:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000509a:	3f f9       	mov	r9,-1
8000509c:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
8000509e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050a2:	70 09       	ld.w	r9,r8[0x0]
800050a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050a8:	70 18       	ld.w	r8,r8[0x4]
800050aa:	12 9a       	mov	r10,r9
800050ac:	10 9b       	mov	r11,r8
800050ae:	ee fc ff f4 	ld.w	r12,r7[-12]
800050b2:	f0 1f 00 16 	mcall	80005108 <twim_master_init+0x108>
800050b6:	18 98       	mov	r8,r12
800050b8:	5b 88       	cp.w	r8,-8
800050ba:	c0 31       	brne	800050c0 <twim_master_init+0xc0>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
800050bc:	3f 88       	mov	r8,-8
800050be:	c1 48       	rjmp	800050e6 <twim_master_init+0xe6>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800050c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050c4:	70 28       	ld.w	r8,r8[0x8]
800050c6:	10 9b       	mov	r11,r8
800050c8:	ee fc ff f4 	ld.w	r12,r7[-12]
800050cc:	f0 1f 00 10 	mcall	8000510c <twim_master_init+0x10c>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800050d0:	48 98       	lddpc	r8,800050f4 <twim_master_init+0xf4>
800050d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800050d4:	5b c8       	cp.w	r8,-4
800050d6:	c0 50       	breq	800050e0 <twim_master_init+0xe0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800050d8:	48 78       	lddpc	r8,800050f4 <twim_master_init+0xf4>
800050da:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800050dc:	5b e8       	cp.w	r8,-2
800050de:	c0 31       	brne	800050e4 <twim_master_init+0xe4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
800050e0:	3f f8       	mov	r8,-1
800050e2:	c0 28       	rjmp	800050e6 <twim_master_init+0xe6>
	}
	return STATUS_OK;
800050e4:	30 08       	mov	r8,0
}
800050e6:	10 9c       	mov	r12,r8
800050e8:	2f cd       	sub	sp,-16
800050ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800050ee:	00 00       	add	r0,r0
800050f0:	80 00       	ld.sh	r0,r0[0x0]
800050f2:	4d ca       	lddpc	r10,80005260 <twim_read_packet+0xd4>
800050f4:	00 00       	add	r0,r0
800050f6:	07 94       	ld.ub	r4,r3[0x1]
800050f8:	80 00       	ld.sh	r0,r0[0x0]
800050fa:	4d ac       	lddpc	r12,80005260 <twim_read_packet+0xd4>
800050fc:	80 00       	ld.sh	r0,r0[0x0]
800050fe:	4e 14       	lddpc	r4,80005280 <twim_read_packet+0xf4>
80005100:	80 00       	ld.sh	r0,r0[0x0]
80005102:	4c d8       	lddpc	r8,80005234 <twim_read_packet+0xa8>
80005104:	80 00       	ld.sh	r0,r0[0x0]
80005106:	4d ec       	lddpc	r12,8000527c <twim_read_packet+0xf0>
80005108:	80 00       	ld.sh	r0,r0[0x0]
8000510a:	4f 58       	lddpc	r8,800052dc <twim_read_packet+0x150>
8000510c:	80 00       	ld.sh	r0,r0[0x0]
8000510e:	51 54       	stdsp	sp[0x54],r4

80005110 <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
80005110:	eb cd 40 80 	pushm	r7,lr
80005114:	1a 97       	mov	r7,sp
80005116:	20 2d       	sub	sp,8
80005118:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000511c:	e1 b8 00 00 	mfsr	r8,0x0
80005120:	10 9c       	mov	r12,r8
80005122:	f0 1f 00 0c 	mcall	80005150 <twim_disable_interrupt+0x40>
80005126:	18 98       	mov	r8,r12
80005128:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
8000512c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005130:	30 08       	mov	r8,0
80005132:	f0 09 18 00 	cp.b	r9,r8
80005136:	c0 20       	breq	8000513a <twim_disable_interrupt+0x2a>
		cpu_irq_disable ();
80005138:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
8000513a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000513e:	3f f9       	mov	r9,-1
80005140:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
80005142:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005146:	3f f9       	mov	r9,-1
80005148:	91 b9       	st.w	r8[0x2c],r9
}
8000514a:	2f ed       	sub	sp,-8
8000514c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005150:	80 00       	ld.sh	r0,r0[0x0]
80005152:	4d ca       	lddpc	r10,800052c0 <twim_read_packet+0x134>

80005154 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80005154:	eb cd 40 80 	pushm	r7,lr
80005158:	1a 97       	mov	r7,sp
8000515a:	20 3d       	sub	sp,12
8000515c:	ef 4c ff f8 	st.w	r7[-8],r12
80005160:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
80005164:	30 08       	mov	r8,0
80005166:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000516a:	ee cb 00 04 	sub	r11,r7,4
8000516e:	30 08       	mov	r8,0
80005170:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005174:	30 0a       	mov	r10,0
80005176:	ee fc ff f8 	ld.w	r12,r7[-8]
8000517a:	f0 1f 00 04 	mcall	80005188 <twim_probe+0x34>
8000517e:	18 98       	mov	r8,r12
}
80005180:	10 9c       	mov	r12,r8
80005182:	2f dd       	sub	sp,-12
80005184:	e3 cd 80 80 	ldm	sp++,r7,pc
80005188:	80 00       	ld.sh	r0,r0[0x0]
8000518a:	54 44       	stdsp	sp[0x110],r4

8000518c <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8000518c:	eb cd 40 80 	pushm	r7,lr
80005190:	1a 97       	mov	r7,sp
80005192:	20 2d       	sub	sp,8
80005194:	ef 4c ff fc 	st.w	r7[-4],r12
80005198:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000519c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051a0:	30 29       	mov	r9,2
800051a2:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800051a4:	4c f8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800051aa:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800051ac:	4c d8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051ae:	70 08       	ld.w	r8,r8[0x0]
800051b0:	10 9c       	mov	r12,r8
800051b2:	f0 1f 00 4d 	mcall	800052e4 <twim_read_packet+0x158>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
800051b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051ba:	70 28       	ld.w	r8,r8[0x8]
800051bc:	10 99       	mov	r9,r8
800051be:	4c b8       	lddpc	r8,800052e8 <twim_read_packet+0x15c>
800051c0:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
800051c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051c6:	70 39       	ld.w	r9,r8[0xc]
800051c8:	4c 98       	lddpc	r8,800052ec <twim_read_packet+0x160>
800051ca:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
800051cc:	4c 99       	lddpc	r9,800052f0 <twim_read_packet+0x164>
800051ce:	30 08       	mov	r8,0
800051d0:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800051d2:	4c 98       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800051d4:	30 09       	mov	r9,0
800051d6:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
800051d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051dc:	11 f8       	ld.ub	r8,r8[0x7]
800051de:	58 08       	cp.w	r8,0
800051e0:	c3 f0       	breq	8000525e <twim_read_packet+0xd2>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800051e2:	4c 08       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051e4:	70 08       	ld.w	r8,r8[0x0]
800051e6:	30 19       	mov	r9,1
800051e8:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
800051ea:	4b e8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051ec:	70 08       	ld.w	r8,r8[0x0]
800051ee:	e0 69 00 80 	mov	r9,128
800051f2:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
800051f4:	4b b8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051f6:	70 08       	ld.w	r8,r8[0x0]
800051f8:	30 29       	mov	r9,2
800051fa:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
800051fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005200:	2f c8       	sub	r8,-4
80005202:	10 99       	mov	r9,r8
80005204:	4b d8       	lddpc	r8,800052f8 <twim_read_packet+0x16c>
80005206:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80005208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000520c:	11 f8       	ld.ub	r8,r8[0x7]
8000520e:	10 99       	mov	r9,r8
80005210:	4b b8       	lddpc	r8,800052fc <twim_read_packet+0x170>
80005212:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80005214:	4b b8       	lddpc	r8,80005300 <twim_read_packet+0x174>
80005216:	e0 69 07 03 	mov	r9,1795
8000521a:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000521c:	4b 18       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000521e:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005220:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005224:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005226:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8000522a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000522e:	13 f9       	ld.ub	r9,r9[0x7]
80005230:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005232:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005236:	e8 19 a0 00 	orl	r9,0xa000
8000523a:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000523c:	4a 98       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000523e:	70 08       	ld.w	r8,r8[0x0]
80005240:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005244:	72 09       	ld.w	r9,r9[0x0]
80005246:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000524a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000524e:	72 39       	ld.w	r9,r9[0xc]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005250:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005252:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80005256:	e8 19 e0 01 	orl	r9,0xe001
8000525a:	91 49       	st.w	r8[0x10],r9
8000525c:	c1 88       	rjmp	8000528c <twim_read_packet+0x100>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
8000525e:	4a 88       	lddpc	r8,800052fc <twim_read_packet+0x170>
80005260:	30 09       	mov	r9,0
80005262:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
80005264:	4a 78       	lddpc	r8,80005300 <twim_read_packet+0x174>
80005266:	e0 69 07 01 	mov	r9,1793
8000526a:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000526c:	49 d8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000526e:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005270:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005274:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005276:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000527a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000527e:	72 39       	ld.w	r9,r9[0xc]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005280:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005282:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005286:	e8 19 e0 01 	orl	r9,0xe001
8000528a:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8000528c:	49 58       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000528e:	70 08       	ld.w	r8,r8[0x0]
80005290:	49 c9       	lddpc	r9,80005300 <twim_read_packet+0x174>
80005292:	72 09       	ld.w	r9,r9[0x0]
80005294:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005296:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000529a:	30 19       	mov	r9,1
8000529c:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8000529e:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800052a0:	c0 38       	rjmp	800052a6 <twim_read_packet+0x11a>
		cpu_relax();
800052a2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800052a6:	49 48       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800052a8:	70 08       	ld.w	r8,r8[0x0]
800052aa:	58 08       	cp.w	r8,0
800052ac:	c0 61       	brne	800052b8 <twim_read_packet+0x12c>
800052ae:	f0 1f 00 16 	mcall	80005304 <twim_read_packet+0x178>
800052b2:	18 98       	mov	r8,r12
800052b4:	58 08       	cp.w	r8,0
800052b6:	cf 60       	breq	800052a2 <twim_read_packet+0x116>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800052b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052bc:	30 29       	mov	r9,2
800052be:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800052c0:	48 d8       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800052c2:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
800052c4:	5b c8       	cp.w	r8,-4
800052c6:	c0 50       	breq	800052d0 <twim_read_packet+0x144>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800052c8:	48 b8       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800052ca:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
800052cc:	5b e8       	cp.w	r8,-2
800052ce:	c0 31       	brne	800052d4 <twim_read_packet+0x148>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
800052d0:	3f f8       	mov	r8,-1
800052d2:	c0 28       	rjmp	800052d6 <twim_read_packet+0x14a>
	}
	return STATUS_OK;
800052d4:	30 08       	mov	r8,0
}
800052d6:	10 9c       	mov	r12,r8
800052d8:	2f ed       	sub	sp,-8
800052da:	e3 cd 80 80 	ldm	sp++,r7,pc
800052de:	00 00       	add	r0,r0
800052e0:	00 00       	add	r0,r0
800052e2:	07 88       	ld.ub	r8,r3[0x0]
800052e4:	80 00       	ld.sh	r0,r0[0x0]
800052e6:	51 10       	stdsp	sp[0x44],r0
800052e8:	00 00       	add	r0,r0
800052ea:	07 90       	ld.ub	r0,r3[0x1]
800052ec:	00 00       	add	r0,r0
800052ee:	07 9c       	ld.ub	r12,r3[0x1]
800052f0:	00 00       	add	r0,r0
800052f2:	07 a8       	ld.ub	r8,r3[0x2]
800052f4:	00 00       	add	r0,r0
800052f6:	07 94       	ld.ub	r4,r3[0x1]
800052f8:	00 00       	add	r0,r0
800052fa:	07 8c       	ld.ub	r12,r3[0x0]
800052fc:	00 00       	add	r0,r0
800052fe:	07 98       	ld.ub	r8,r3[0x1]
80005300:	00 00       	add	r0,r0
80005302:	07 a0       	ld.ub	r0,r3[0x2]
80005304:	80 00       	ld.sh	r0,r0[0x0]
80005306:	55 48       	stdsp	sp[0x150],r8

80005308 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80005308:	eb cd 40 80 	pushm	r7,lr
8000530c:	1a 97       	mov	r7,sp
8000530e:	20 2d       	sub	sp,8
80005310:	ef 4c ff fc 	st.w	r7[-4],r12
80005314:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005318:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000531c:	30 19       	mov	r9,1
8000531e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005324:	e0 69 00 80 	mov	r9,128
80005328:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000532a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000532e:	30 29       	mov	r9,2
80005330:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80005332:	4b c8       	lddpc	r8,80005420 <twim_write_packet+0x118>
80005334:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005338:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000533a:	4b a8       	lddpc	r8,80005420 <twim_write_packet+0x118>
8000533c:	70 08       	ld.w	r8,r8[0x0]
8000533e:	10 9c       	mov	r12,r8
80005340:	f0 1f 00 39 	mcall	80005424 <twim_write_packet+0x11c>
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80005344:	4b 98       	lddpc	r8,80005428 <twim_write_packet+0x120>
80005346:	30 09       	mov	r9,0
80005348:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8000534a:	4b 98       	lddpc	r8,8000542c <twim_write_packet+0x124>
8000534c:	e0 69 07 02 	mov	r9,1794
80005350:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
80005352:	4b 89       	lddpc	r9,80005430 <twim_write_packet+0x128>
80005354:	30 08       	mov	r8,0
80005356:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
80005358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000535c:	11 f8       	ld.ub	r8,r8[0x7]
8000535e:	58 08       	cp.w	r8,0
80005360:	c1 50       	breq	8000538a <twim_write_packet+0x82>
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80005362:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005366:	2f c8       	sub	r8,-4
80005368:	10 99       	mov	r9,r8
8000536a:	4b 38       	lddpc	r8,80005434 <twim_write_packet+0x12c>
8000536c:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8000536e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005372:	11 f8       	ld.ub	r8,r8[0x7]
80005374:	10 99       	mov	r9,r8
80005376:	4b 18       	lddpc	r8,80005438 <twim_write_packet+0x130>
80005378:	91 09       	st.w	r8[0x0],r9
		// set next transfer to true
		twim_next = true;
8000537a:	4a e9       	lddpc	r9,80005430 <twim_write_packet+0x128>
8000537c:	30 18       	mov	r8,1
8000537e:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
80005380:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005384:	4a e8       	lddpc	r8,8000543c <twim_write_packet+0x134>
80005386:	91 09       	st.w	r8[0x0],r9
80005388:	c0 c8       	rjmp	800053a0 <twim_write_packet+0x98>
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
8000538a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000538e:	70 28       	ld.w	r8,r8[0x8]
80005390:	10 99       	mov	r9,r8
80005392:	4a 98       	lddpc	r8,80005434 <twim_write_packet+0x12c>
80005394:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
80005396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000539a:	70 39       	ld.w	r9,r8[0xc]
8000539c:	4a 78       	lddpc	r8,80005438 <twim_write_packet+0x130>
8000539e:	91 09       	st.w	r8[0x0],r9
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| ((package->length + package->addr_length)
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
800053a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053a4:	70 08       	ld.w	r8,r8[0x0]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800053a6:	f0 09 15 01 	lsl	r9,r8,0x1
			| ((package->length + package->addr_length)
800053aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053ae:	70 3a       	ld.w	r10,r8[0xc]
800053b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053b4:	11 f8       	ld.ub	r8,r8[0x7]
800053b6:	f4 08 00 08 	add	r8,r10,r8
800053ba:	b1 68       	lsl	r8,0x10
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
800053bc:	f3 e8 10 08 	or	r8,r9,r8
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800053c0:	10 99       	mov	r9,r8
800053c2:	e8 19 e0 00 	orl	r9,0xe000
800053c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053ca:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800053cc:	49 58       	lddpc	r8,80005420 <twim_write_packet+0x118>
800053ce:	70 08       	ld.w	r8,r8[0x0]
800053d0:	49 79       	lddpc	r9,8000542c <twim_write_packet+0x124>
800053d2:	72 09       	ld.w	r9,r9[0x0]
800053d4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800053d6:	49 38       	lddpc	r8,80005420 <twim_write_packet+0x118>
800053d8:	70 08       	ld.w	r8,r8[0x0]
800053da:	30 19       	mov	r9,1
800053dc:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800053de:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800053e0:	c0 38       	rjmp	800053e6 <twim_write_packet+0xde>
		cpu_relax();
800053e2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800053e6:	49 18       	lddpc	r8,80005428 <twim_write_packet+0x120>
800053e8:	70 08       	ld.w	r8,r8[0x0]
800053ea:	58 08       	cp.w	r8,0
800053ec:	c0 61       	brne	800053f8 <twim_write_packet+0xf0>
800053ee:	f0 1f 00 15 	mcall	80005440 <twim_write_packet+0x138>
800053f2:	18 98       	mov	r8,r12
800053f4:	58 08       	cp.w	r8,0
800053f6:	cf 60       	breq	800053e2 <twim_write_packet+0xda>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800053f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053fc:	30 29       	mov	r9,2
800053fe:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005400:	48 a8       	lddpc	r8,80005428 <twim_write_packet+0x120>
80005402:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80005404:	5b c8       	cp.w	r8,-4
80005406:	c0 50       	breq	80005410 <twim_write_packet+0x108>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005408:	48 88       	lddpc	r8,80005428 <twim_write_packet+0x120>
8000540a:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8000540c:	5b e8       	cp.w	r8,-2
8000540e:	c0 31       	brne	80005414 <twim_write_packet+0x10c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005410:	3f f8       	mov	r8,-1
80005412:	c0 28       	rjmp	80005416 <twim_write_packet+0x10e>
	}
	return STATUS_OK;
80005414:	30 08       	mov	r8,0
}
80005416:	10 9c       	mov	r12,r8
80005418:	2f ed       	sub	sp,-8
8000541a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000541e:	00 00       	add	r0,r0
80005420:	00 00       	add	r0,r0
80005422:	07 88       	ld.ub	r8,r3[0x0]
80005424:	80 00       	ld.sh	r0,r0[0x0]
80005426:	51 10       	stdsp	sp[0x44],r0
80005428:	00 00       	add	r0,r0
8000542a:	07 94       	ld.ub	r4,r3[0x1]
8000542c:	00 00       	add	r0,r0
8000542e:	07 a0       	ld.ub	r0,r3[0x2]
80005430:	00 00       	add	r0,r0
80005432:	07 a8       	ld.ub	r8,r3[0x2]
80005434:	00 00       	add	r0,r0
80005436:	07 8c       	ld.ub	r12,r3[0x0]
80005438:	00 00       	add	r0,r0
8000543a:	07 98       	ld.ub	r8,r3[0x1]
8000543c:	00 00       	add	r0,r0
8000543e:	07 a4       	ld.ub	r4,r3[0x2]
80005440:	80 00       	ld.sh	r0,r0[0x0]
80005442:	55 48       	stdsp	sp[0x150],r8

80005444 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80005444:	eb cd 40 80 	pushm	r7,lr
80005448:	1a 97       	mov	r7,sp
8000544a:	20 5d       	sub	sp,20
8000544c:	ef 4c ff fc 	st.w	r7[-4],r12
80005450:	ef 4b ff f8 	st.w	r7[-8],r11
80005454:	ef 4a ff f4 	st.w	r7[-12],r10
80005458:	ef 49 ff f0 	st.w	r7[-16],r9
8000545c:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005460:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005464:	30 19       	mov	r9,1
80005466:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005468:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000546c:	e0 69 00 80 	mov	r9,128
80005470:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005472:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005476:	30 29       	mov	r9,2
80005478:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000547a:	4a c8       	lddpc	r8,80005528 <twim_write+0xe4>
8000547c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005480:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80005482:	4a a8       	lddpc	r8,80005528 <twim_write+0xe4>
80005484:	70 08       	ld.w	r8,r8[0x0]
80005486:	10 9c       	mov	r12,r8
80005488:	f0 1f 00 29 	mcall	8000552c <twim_write+0xe8>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000548c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005490:	4a 88       	lddpc	r8,80005530 <twim_write+0xec>
80005492:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80005494:	4a 88       	lddpc	r8,80005534 <twim_write+0xf0>
80005496:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000549a:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8000549c:	4a 79       	lddpc	r9,80005538 <twim_write+0xf4>
8000549e:	30 08       	mov	r8,0
800054a0:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800054a2:	4a 78       	lddpc	r8,8000553c <twim_write+0xf8>
800054a4:	30 09       	mov	r9,0
800054a6:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800054a8:	4a 08       	lddpc	r8,80005528 <twim_write+0xe4>
800054aa:	70 08       	ld.w	r8,r8[0x0]
800054ac:	ee f9 ff f0 	ld.w	r9,r7[-16]
800054b0:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800054b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800054b8:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
800054ba:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
800054bc:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800054c0:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800054c2:	f5 e9 10 09 	or	r9,r10,r9
800054c6:	e8 19 e0 00 	orl	r9,0xe000
800054ca:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800054cc:	49 d8       	lddpc	r8,80005540 <twim_write+0xfc>
800054ce:	e0 69 03 02 	mov	r9,770
800054d2:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800054d4:	49 58       	lddpc	r8,80005528 <twim_write+0xe4>
800054d6:	70 08       	ld.w	r8,r8[0x0]
800054d8:	49 a9       	lddpc	r9,80005540 <twim_write+0xfc>
800054da:	72 09       	ld.w	r9,r9[0x0]
800054dc:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800054de:	49 38       	lddpc	r8,80005528 <twim_write+0xe4>
800054e0:	70 08       	ld.w	r8,r8[0x0]
800054e2:	30 19       	mov	r9,1
800054e4:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800054e6:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800054e8:	c0 38       	rjmp	800054ee <twim_write+0xaa>
		cpu_relax();
800054ea:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800054ee:	49 48       	lddpc	r8,8000553c <twim_write+0xf8>
800054f0:	70 08       	ld.w	r8,r8[0x0]
800054f2:	58 08       	cp.w	r8,0
800054f4:	c0 61       	brne	80005500 <twim_write+0xbc>
800054f6:	f0 1f 00 14 	mcall	80005544 <twim_write+0x100>
800054fa:	18 98       	mov	r8,r12
800054fc:	58 08       	cp.w	r8,0
800054fe:	cf 60       	breq	800054ea <twim_write+0xa6>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005500:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005504:	30 29       	mov	r9,2
80005506:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005508:	48 d8       	lddpc	r8,8000553c <twim_write+0xf8>
8000550a:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8000550c:	5b c8       	cp.w	r8,-4
8000550e:	c0 50       	breq	80005518 <twim_write+0xd4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005510:	48 b8       	lddpc	r8,8000553c <twim_write+0xf8>
80005512:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80005514:	5b e8       	cp.w	r8,-2
80005516:	c0 31       	brne	8000551c <twim_write+0xd8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005518:	3f f8       	mov	r8,-1
8000551a:	c0 28       	rjmp	8000551e <twim_write+0xda>
	}
	return STATUS_OK;
8000551c:	30 08       	mov	r8,0
}
8000551e:	10 9c       	mov	r12,r8
80005520:	2f bd       	sub	sp,-20
80005522:	e3 cd 80 80 	ldm	sp++,r7,pc
80005526:	00 00       	add	r0,r0
80005528:	00 00       	add	r0,r0
8000552a:	07 88       	ld.ub	r8,r3[0x0]
8000552c:	80 00       	ld.sh	r0,r0[0x0]
8000552e:	51 10       	stdsp	sp[0x44],r0
80005530:	00 00       	add	r0,r0
80005532:	07 8c       	ld.ub	r12,r3[0x0]
80005534:	00 00       	add	r0,r0
80005536:	07 98       	ld.ub	r8,r3[0x1]
80005538:	00 00       	add	r0,r0
8000553a:	07 a8       	ld.ub	r8,r3[0x2]
8000553c:	00 00       	add	r0,r0
8000553e:	07 94       	ld.ub	r4,r3[0x1]
80005540:	00 00       	add	r0,r0
80005542:	07 a0       	ld.ub	r0,r3[0x2]
80005544:	80 00       	ld.sh	r0,r0[0x0]
80005546:	55 48       	stdsp	sp[0x150],r8

80005548 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
80005548:	eb cd 40 80 	pushm	r7,lr
8000554c:	1a 97       	mov	r7,sp
8000554e:	20 1d       	sub	sp,4
	uint32_t status = twim_inst->sr;
80005550:	48 98       	lddpc	r8,80005574 <twim_status+0x2c>
80005552:	70 08       	ld.w	r8,r8[0x0]
80005554:	70 78       	ld.w	r8,r8[0x1c]
80005556:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
8000555a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000555e:	e2 18 00 10 	andl	r8,0x10,COH
80005562:	c0 30       	breq	80005568 <twim_status+0x20>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif
		) {
		return 1;
80005564:	30 18       	mov	r8,1
80005566:	c0 28       	rjmp	8000556a <twim_status+0x22>
	} else {
		return 0;
80005568:	30 08       	mov	r8,0
	}
}
8000556a:	10 9c       	mov	r12,r8
8000556c:	2f fd       	sub	sp,-4
8000556e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005572:	00 00       	add	r0,r0
80005574:	00 00       	add	r0,r0
80005576:	07 88       	ld.ub	r8,r3[0x0]

80005578 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005578:	eb cd 40 80 	pushm	r7,lr
8000557c:	1a 97       	mov	r7,sp
8000557e:	20 1d       	sub	sp,4
80005580:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005584:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005588:	e6 18 00 01 	andh	r8,0x1,COH
8000558c:	5f 08       	sreq	r8
8000558e:	5c 58       	castu.b	r8
}
80005590:	10 9c       	mov	r12,r8
80005592:	2f fd       	sub	sp,-4
80005594:	e3 cd 80 80 	ldm	sp++,r7,pc

80005598 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80005598:	eb cd 40 80 	pushm	r7,lr
8000559c:	1a 97       	mov	r7,sp
8000559e:	20 7d       	sub	sp,28
800055a0:	ef 4c ff ec 	st.w	r7[-20],r12
800055a4:	ef 4b ff e8 	st.w	r7[-24],r11
800055a8:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
800055ac:	ee f8 ff e8 	ld.w	r8,r7[-24]
800055b0:	f0 09 15 04 	lsl	r9,r8,0x4
800055b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800055b8:	10 39       	cp.w	r9,r8
800055ba:	e0 8b 00 04 	brhi	800055c2 <usart_set_async_baudrate+0x2a>
800055be:	31 08       	mov	r8,16
800055c0:	c0 28       	rjmp	800055c4 <usart_set_async_baudrate+0x2c>
800055c2:	30 88       	mov	r8,8
800055c4:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
800055c8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800055cc:	f0 09 15 03 	lsl	r9,r8,0x3
800055d0:	ee fa ff f0 	ld.w	r10,r7[-16]
800055d4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800055d8:	f4 08 02 48 	mul	r8,r10,r8
800055dc:	a1 98       	lsr	r8,0x1
800055de:	f2 08 00 08 	add	r8,r9,r8
800055e2:	ee fa ff f0 	ld.w	r10,r7[-16]
800055e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800055ea:	f4 09 02 49 	mul	r9,r10,r9
800055ee:	f0 09 0d 08 	divu	r8,r8,r9
800055f2:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800055f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800055fa:	a3 98       	lsr	r8,0x3
800055fc:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80005600:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005604:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80005608:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000560c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005610:	58 08       	cp.w	r8,0
80005612:	c0 70       	breq	80005620 <usart_set_async_baudrate+0x88>
80005614:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005618:	e0 48 ff ff 	cp.w	r8,65535
8000561c:	e0 88 00 04 	brls	80005624 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80005620:	30 18       	mov	r8,1
80005622:	c2 08       	rjmp	80005662 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80005624:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005628:	70 18       	ld.w	r8,r8[0x4]
8000562a:	10 99       	mov	r9,r8
8000562c:	e4 19 ff f7 	andh	r9,0xfff7
80005630:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80005634:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005638:	59 08       	cp.w	r8,16
8000563a:	c0 40       	breq	80005642 <usart_set_async_baudrate+0xaa>
8000563c:	e8 68 00 00 	mov	r8,524288
80005640:	c0 28       	rjmp	80005644 <usart_set_async_baudrate+0xac>
80005642:	30 08       	mov	r8,0
80005644:	10 49       	or	r9,r8
80005646:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000564a:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
8000564c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005650:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80005654:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005658:	10 49       	or	r9,r8
8000565a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000565e:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80005660:	30 08       	mov	r8,0
}
80005662:	10 9c       	mov	r12,r8
80005664:	2f 9d       	sub	sp,-28
80005666:	e3 cd 80 80 	ldm	sp++,r7,pc
8000566a:	d7 03       	nop

8000566c <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
8000566c:	eb cd 40 80 	pushm	r7,lr
80005670:	1a 97       	mov	r7,sp
80005672:	20 2d       	sub	sp,8
80005674:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80005678:	e1 b8 00 00 	mfsr	r8,0x0
8000567c:	10 9c       	mov	r12,r8
8000567e:	f0 1f 00 18 	mcall	800056dc <usart_reset+0x70>
80005682:	18 98       	mov	r8,r12
80005684:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80005688:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000568c:	30 08       	mov	r8,0
8000568e:	f0 09 18 00 	cp.b	r9,r8
80005692:	c0 20       	breq	80005696 <usart_reset+0x2a>
80005694:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80005696:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000569a:	3f f9       	mov	r9,-1
8000569c:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8000569e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056a2:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800056a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800056a8:	30 08       	mov	r8,0
800056aa:	f0 09 18 00 	cp.b	r9,r8
800056ae:	c0 20       	breq	800056b2 <usart_reset+0x46>
800056b0:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800056b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056b6:	30 09       	mov	r9,0
800056b8:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
800056ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056be:	30 09       	mov	r9,0
800056c0:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
800056c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056c6:	30 09       	mov	r9,0
800056c8:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800056ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056ce:	ea 69 61 0c 	mov	r9,680204
800056d2:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
800056d4:	2f ed       	sub	sp,-8
800056d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800056da:	00 00       	add	r0,r0
800056dc:	80 00       	ld.sh	r0,r0[0x0]
800056de:	55 78       	stdsp	sp[0x15c],r8

800056e0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800056e0:	eb cd 40 80 	pushm	r7,lr
800056e4:	1a 97       	mov	r7,sp
800056e6:	20 3d       	sub	sp,12
800056e8:	ef 4c ff fc 	st.w	r7[-4],r12
800056ec:	ef 4b ff f8 	st.w	r7[-8],r11
800056f0:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800056f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800056f8:	f0 1f 00 54 	mcall	80005848 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
800056fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005700:	58 08       	cp.w	r8,0
80005702:	c3 90       	breq	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80005704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005708:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000570a:	30 48       	mov	r8,4
8000570c:	f0 09 18 00 	cp.b	r9,r8
80005710:	e0 88 00 32 	brls	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80005714:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005718:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000571a:	30 98       	mov	r8,9
8000571c:	f0 09 18 00 	cp.b	r9,r8
80005720:	e0 8b 00 2a 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80005724:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005728:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000572a:	30 78       	mov	r8,7
8000572c:	f0 09 18 00 	cp.b	r9,r8
80005730:	e0 8b 00 22 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80005734:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005738:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000573a:	e0 68 01 01 	mov	r8,257
8000573e:	f0 09 19 00 	cp.h	r9,r8
80005742:	e0 8b 00 19 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80005746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000574a:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000574e:	30 38       	mov	r8,3
80005750:	f0 09 18 00 	cp.b	r9,r8
80005754:	e0 8b 00 10 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80005758:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000575c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005760:	70 08       	ld.w	r8,r8[0x0]
80005762:	12 9a       	mov	r10,r9
80005764:	10 9b       	mov	r11,r8
80005766:	ee fc ff fc 	ld.w	r12,r7[-4]
8000576a:	f0 1f 00 39 	mcall	8000584c <usart_init_rs232+0x16c>
8000576e:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80005770:	58 18       	cp.w	r8,1
80005772:	c0 31       	brne	80005778 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80005774:	30 18       	mov	r8,1
80005776:	c6 48       	rjmp	8000583e <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80005778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000577c:	11 c9       	ld.ub	r9,r8[0x4]
8000577e:	30 98       	mov	r8,9
80005780:	f0 09 18 00 	cp.b	r9,r8
80005784:	c0 a1       	brne	80005798 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80005786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000578a:	70 18       	ld.w	r8,r8[0x4]
8000578c:	10 99       	mov	r9,r8
8000578e:	b1 b9       	sbr	r9,0x11
80005790:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005794:	91 19       	st.w	r8[0x4],r9
80005796:	c0 d8       	rjmp	800057b0 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80005798:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000579c:	70 19       	ld.w	r9,r8[0x4]
8000579e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057a2:	11 c8       	ld.ub	r8,r8[0x4]
800057a4:	20 58       	sub	r8,5
800057a6:	a7 68       	lsl	r8,0x6
800057a8:	10 49       	or	r9,r8
800057aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057ae:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800057b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057b4:	70 19       	ld.w	r9,r8[0x4]
800057b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057ba:	11 d8       	ld.ub	r8,r8[0x5]
800057bc:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
800057c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057c4:	f1 38 00 08 	ld.ub	r8,r8[8]
800057c8:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800057ca:	f5 e8 10 08 	or	r8,r10,r8
800057ce:	10 49       	or	r9,r8
800057d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057d4:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800057d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057da:	90 39       	ld.sh	r9,r8[0x6]
800057dc:	30 28       	mov	r8,2
800057de:	f0 09 19 00 	cp.h	r9,r8
800057e2:	e0 88 00 14 	brls	8000580a <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800057e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057ea:	70 18       	ld.w	r8,r8[0x4]
800057ec:	10 99       	mov	r9,r8
800057ee:	ad b9       	sbr	r9,0xd
800057f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057f4:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800057f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057fa:	90 38       	ld.sh	r8,r8[0x6]
800057fc:	5c 78       	castu.h	r8
800057fe:	20 28       	sub	r8,2
80005800:	10 99       	mov	r9,r8
80005802:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005806:	91 a9       	st.w	r8[0x28],r9
80005808:	c0 d8       	rjmp	80005822 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8000580a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000580e:	70 19       	ld.w	r9,r8[0x4]
80005810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005814:	90 38       	ld.sh	r8,r8[0x6]
80005816:	5c 78       	castu.h	r8
80005818:	ad 68       	lsl	r8,0xc
8000581a:	10 49       	or	r9,r8
8000581c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005820:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80005822:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005826:	70 18       	ld.w	r8,r8[0x4]
80005828:	10 99       	mov	r9,r8
8000582a:	e0 19 ff f0 	andl	r9,0xfff0
8000582e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005832:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80005834:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005838:	35 09       	mov	r9,80
8000583a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8000583c:	30 08       	mov	r8,0
}
8000583e:	10 9c       	mov	r12,r8
80005840:	2f dd       	sub	sp,-12
80005842:	e3 cd 80 80 	ldm	sp++,r7,pc
80005846:	00 00       	add	r0,r0
80005848:	80 00       	ld.sh	r0,r0[0x0]
8000584a:	56 6c       	stdsp	sp[0x198],r12
8000584c:	80 00       	ld.sh	r0,r0[0x0]
8000584e:	55 98       	stdsp	sp[0x164],r8

80005850 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80005850:	eb cd 40 80 	pushm	r7,lr
80005854:	1a 97       	mov	r7,sp
80005856:	20 3d       	sub	sp,12
80005858:	ef 4c ff f8 	st.w	r7[-8],r12
8000585c:	ef 4b ff f4 	st.w	r7[-12],r11
80005860:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005864:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80005868:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000586c:	70 58       	ld.w	r8,r8[0x14]
8000586e:	e2 18 00 02 	andl	r8,0x2,COH
80005872:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80005874:	58 08       	cp.w	r8,0
80005876:	c0 a0       	breq	8000588a <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80005878:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000587c:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80005880:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005884:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80005886:	30 08       	mov	r8,0
80005888:	c0 28       	rjmp	8000588c <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
8000588a:	30 28       	mov	r8,2
}
8000588c:	10 9c       	mov	r12,r8
8000588e:	2f dd       	sub	sp,-12
80005890:	e3 cd 80 80 	ldm	sp++,r7,pc

80005894 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80005894:	eb cd 40 80 	pushm	r7,lr
80005898:	1a 97       	mov	r7,sp
8000589a:	20 3d       	sub	sp,12
8000589c:	ef 4c ff f8 	st.w	r7[-8],r12
800058a0:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
800058a4:	e0 68 27 10 	mov	r8,10000
800058a8:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
800058ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058b0:	58 08       	cp.w	r8,0
800058b2:	5f 08       	sreq	r8
800058b4:	5c 58       	castu.b	r8
800058b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800058ba:	20 19       	sub	r9,1
800058bc:	ef 49 ff fc 	st.w	r7[-4],r9
800058c0:	58 08       	cp.w	r8,0
800058c2:	c0 30       	breq	800058c8 <usart_putchar+0x34>
800058c4:	3f f8       	mov	r8,-1
800058c6:	c0 b8       	rjmp	800058dc <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
800058c8:	ee fb ff f4 	ld.w	r11,r7[-12]
800058cc:	ee fc ff f8 	ld.w	r12,r7[-8]
800058d0:	f0 1f 00 05 	mcall	800058e4 <usart_putchar+0x50>
800058d4:	18 98       	mov	r8,r12
800058d6:	58 08       	cp.w	r8,0
800058d8:	ce a1       	brne	800058ac <usart_putchar+0x18>

  return USART_SUCCESS;
800058da:	30 08       	mov	r8,0
}
800058dc:	10 9c       	mov	r12,r8
800058de:	2f dd       	sub	sp,-12
800058e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800058e4:	80 00       	ld.sh	r0,r0[0x0]
800058e6:	58 50       	cp.w	r0,5

800058e8 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
800058e8:	eb cd 40 80 	pushm	r7,lr
800058ec:	1a 97       	mov	r7,sp
800058ee:	20 2d       	sub	sp,8
800058f0:	ef 4c ff fc 	st.w	r7[-4],r12
800058f4:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
800058f8:	c0 e8       	rjmp	80005914 <usart_write_line+0x2c>
    usart_putchar(usart, *string++);
800058fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058fe:	11 88       	ld.ub	r8,r8[0x0]
80005900:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005904:	2f f9       	sub	r9,-1
80005906:	ef 49 ff f8 	st.w	r7[-8],r9
8000590a:	10 9b       	mov	r11,r8
8000590c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005910:	f0 1f 00 05 	mcall	80005924 <usart_write_line+0x3c>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80005914:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005918:	11 88       	ld.ub	r8,r8[0x0]
8000591a:	58 08       	cp.w	r8,0
8000591c:	ce f1       	brne	800058fa <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
8000591e:	2f ed       	sub	sp,-8
80005920:	e3 cd 80 80 	ldm	sp++,r7,pc
80005924:	80 00       	ld.sh	r0,r0[0x0]
80005926:	58 94       	cp.w	r4,9

80005928 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80005928:	48 cd       	lddpc	sp,80005958 <udata_clear_loop_end+0x2>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
8000592a:	48 d0       	lddpc	r0,8000595c <udata_clear_loop_end+0x6>
  mtsr    AVR32_EVBA, r0
8000592c:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80005930:	d5 53       	csrf	0x15

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
80005932:	48 c0       	lddpc	r0,80005960 <udata_clear_loop_end+0xa>
  lda.w   r1, _edata
80005934:	48 c1       	lddpc	r1,80005964 <udata_clear_loop_end+0xe>
  cp      r0, r1
80005936:	02 30       	cp.w	r0,r1
  brhs    idata_load_loop_end
80005938:	c0 62       	brcc	80005944 <idata_load_loop_end>
  lda.w   r2, _data_lma
8000593a:	48 c2       	lddpc	r2,80005968 <udata_clear_loop_end+0x12>

8000593c <idata_load_loop>:
idata_load_loop:
  ld.d    r4, r2++
8000593c:	a5 05       	ld.d	r4,r2++
  st.d    r0++, r4
8000593e:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80005940:	02 30       	cp.w	r0,r1
  brlo    idata_load_loop
80005942:	cf d3       	brcs	8000593c <idata_load_loop>

80005944 <idata_load_loop_end>:
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80005944:	48 a0       	lddpc	r0,8000596c <udata_clear_loop_end+0x16>
  lda.w   r1, _end
80005946:	48 b1       	lddpc	r1,80005970 <udata_clear_loop_end+0x1a>
  cp      r0, r1
80005948:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000594a:	c0 62       	brcc	80005956 <udata_clear_loop_end>
  mov     r2, 0
8000594c:	30 02       	mov	r2,0
  mov     r3, 0
8000594e:	30 03       	mov	r3,0

80005950 <udata_clear_loop>:
udata_clear_loop:
  st.d    r0++, r2
80005950:	a1 22       	st.d	r0++,r2
  cp      r0, r1
80005952:	02 30       	cp.w	r0,r1
  brlo    udata_clear_loop
80005954:	cf e3       	brcs	80005950 <udata_clear_loop>

80005956 <udata_clear_loop_end>:
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80005956:	48 8f       	lddpc	pc,80005974 <udata_clear_loop_end+0x1e>
80005958:	00 01       	add	r1,r0
8000595a:	00 00       	add	r0,r0
8000595c:	80 01       	ld.sh	r1,r0[0x0]
8000595e:	08 00       	add	r0,r4
80005960:	00 00       	add	r0,r0
80005962:	00 08       	add	r8,r0
80005964:	00 00       	add	r0,r0
80005966:	05 b8       	ld.ub	r8,r2[0x3]
80005968:	80 01       	ld.sh	r1,r0[0x0]
8000596a:	11 e0       	ld.ub	r0,r8[0x6]
8000596c:	00 00       	add	r0,r0
8000596e:	05 b8       	ld.ub	r8,r2[0x3]
80005970:	00 00       	add	r0,r0
80005972:	15 d8       	ld.ub	r8,r10[0x5]
80005974:	80 00       	ld.sh	r0,r0[0x0]
80005976:	92 08       	ld.sh	r8,r9[0x0]

80005978 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005978:	eb cd 40 80 	pushm	r7,lr
8000597c:	1a 97       	mov	r7,sp
8000597e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005980:	e1 b8 00 00 	mfsr	r8,0x0
80005984:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005988:	d3 03       	ssrf	0x10

	return flags;
8000598a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000598e:	10 9c       	mov	r12,r8
80005990:	2f fd       	sub	sp,-4
80005992:	e3 cd 80 80 	ldm	sp++,r7,pc

80005996 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005996:	eb cd 40 80 	pushm	r7,lr
8000599a:	1a 97       	mov	r7,sp
8000599c:	20 1d       	sub	sp,4
8000599e:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800059a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059a6:	e6 18 00 01 	andh	r8,0x1,COH
800059aa:	5f 08       	sreq	r8
800059ac:	5c 58       	castu.b	r8
}
800059ae:	10 9c       	mov	r12,r8
800059b0:	2f fd       	sub	sp,-4
800059b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800059b6:	d7 03       	nop

800059b8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
800059b8:	eb cd 40 80 	pushm	r7,lr
800059bc:	1a 97       	mov	r7,sp
800059be:	20 1d       	sub	sp,4
800059c0:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800059c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800059c8:	f0 1f 00 05 	mcall	800059dc <cpu_irq_restore+0x24>
800059cc:	18 98       	mov	r8,r12
800059ce:	58 08       	cp.w	r8,0
800059d0:	c0 20       	breq	800059d4 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
800059d2:	d5 03       	csrf	0x10
   }

	barrier();
}
800059d4:	2f fd       	sub	sp,-4
800059d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800059da:	00 00       	add	r0,r0
800059dc:	80 00       	ld.sh	r0,r0[0x0]
800059de:	59 96       	cp.w	r6,25

800059e0 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
800059e0:	eb cd 40 80 	pushm	r7,lr
800059e4:	1a 97       	mov	r7,sp
800059e6:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
800059e8:	f0 1f 00 0c 	mcall	80005a18 <osc_priv_enable_osc0+0x38>
800059ec:	18 98       	mov	r8,r12
800059ee:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
800059f2:	fe 78 08 00 	mov	r8,-63488
800059f6:	32 49       	mov	r9,36
800059f8:	ea 19 aa 00 	orh	r9,0xaa00
800059fc:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] =
800059fe:	fe 78 08 00 	mov	r8,-63488
80005a02:	e0 79 0c 07 	mov	r9,68615
80005a06:	91 99       	st.w	r8[0x24],r9
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
80005a08:	ee fc ff fc 	ld.w	r12,r7[-4]
80005a0c:	f0 1f 00 04 	mcall	80005a1c <osc_priv_enable_osc0+0x3c>
}
80005a10:	2f fd       	sub	sp,-4
80005a12:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a16:	00 00       	add	r0,r0
80005a18:	80 00       	ld.sh	r0,r0[0x0]
80005a1a:	59 78       	cp.w	r8,23
80005a1c:	80 00       	ld.sh	r0,r0[0x0]
80005a1e:	59 b8       	cp.w	r8,27

80005a20 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
80005a20:	eb cd 40 80 	pushm	r7,lr
80005a24:	1a 97       	mov	r7,sp
80005a26:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005a28:	f0 1f 00 0c 	mcall	80005a58 <osc_priv_enable_osc32+0x38>
80005a2c:	18 98       	mov	r8,r12
80005a2e:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
80005a32:	fe 78 08 00 	mov	r8,-63488
80005a36:	34 c9       	mov	r9,76
80005a38:	ea 19 aa 00 	orh	r9,0xaa00
80005a3c:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 =
80005a3e:	fe 78 08 00 	mov	r8,-63488
80005a42:	e2 69 01 01 	mov	r9,131329
80005a46:	f1 49 00 4c 	st.w	r8[76],r9
			(OSC32_STARTUP_VALUE << AVR32_SCIF_OSCCTRL32_STARTUP)
			| (OSC32_MODE_VALUE << AVR32_SCIF_OSCCTRL32_MODE)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
80005a4a:	ee fc ff fc 	ld.w	r12,r7[-4]
80005a4e:	f0 1f 00 04 	mcall	80005a5c <osc_priv_enable_osc32+0x3c>
}
80005a52:	2f fd       	sub	sp,-4
80005a54:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a58:	80 00       	ld.sh	r0,r0[0x0]
80005a5a:	59 78       	cp.w	r8,23
80005a5c:	80 00       	ld.sh	r0,r0[0x0]
80005a5e:	59 b8       	cp.w	r8,27

80005a60 <osc_priv_enable_rc8m>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc8m(void)
{
80005a60:	eb cd 40 80 	pushm	r7,lr
80005a64:	1a 97       	mov	r7,sp
80005a66:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint32_t   rccr8;
    uint32_t* calibration_bits = (uint32_t*)0x80800200;
80005a68:	e0 68 02 00 	mov	r8,512
80005a6c:	ea 18 80 80 	orh	r8,0x8080
80005a70:	ef 48 ff fc 	st.w	r7[-4],r8
	/* Wait for the CALIB field to be updated from fuses after reset */
	while (!(AVR32_SCIF.rccr8 & AVR32_SCIF_RCCR8_FCD_MASK)) {
80005a74:	fe 78 08 00 	mov	r8,-63488
80005a78:	71 28       	ld.w	r8,r8[0x48]
80005a7a:	e6 18 00 01 	andh	r8,0x1,COH
80005a7e:	cf b0       	breq	80005a74 <osc_priv_enable_rc8m+0x14>
		/* Do nothing */
	}

	/* Enable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
80005a80:	f0 1f 00 17 	mcall	80005adc <osc_priv_enable_rc8m+0x7c>
80005a84:	18 98       	mov	r8,r12
80005a86:	ef 48 ff f4 	st.w	r7[-12],r8
	rccr8 = AVR32_SCIF.rccr8;
80005a8a:	fe 78 08 00 	mov	r8,-63488
80005a8e:	71 28       	ld.w	r8,r8[0x48]
80005a90:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
80005a94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a98:	70 08       	ld.w	r8,r8[0x0]
80005a9a:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80005a9e:	b1 a8       	sbr	r8,0x10
80005aa0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005aa4:	f3 e8 00 08 	and	r8,r9,r8
80005aa8:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 |= 1U << AVR32_SCIF_RCOSC8_EN;
80005aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ab0:	b9 a8       	sbr	r8,0x18
80005ab2:	ef 48 ff f8 	st.w	r7[-8],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
80005ab6:	fe 78 08 00 	mov	r8,-63488
80005aba:	34 89       	mov	r9,72
80005abc:	ea 19 aa 00 	orh	r9,0xaa00
80005ac0:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
80005ac2:	fe 78 08 00 	mov	r8,-63488
80005ac6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005aca:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
80005ace:	ee fc ff f4 	ld.w	r12,r7[-12]
80005ad2:	f0 1f 00 04 	mcall	80005ae0 <osc_priv_enable_rc8m+0x80>
}
80005ad6:	2f dd       	sub	sp,-12
80005ad8:	e3 cd 80 80 	ldm	sp++,r7,pc
80005adc:	80 00       	ld.sh	r0,r0[0x0]
80005ade:	59 78       	cp.w	r8,23
80005ae0:	80 00       	ld.sh	r0,r0[0x0]
80005ae2:	59 b8       	cp.w	r8,27

80005ae4 <osc_priv_enable_rc120m>:
	AVR32_SCIF.rccr8 = rccr8;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc120m(void)
{
80005ae4:	eb cd 40 80 	pushm	r7,lr
80005ae8:	1a 97       	mov	r7,sp
80005aea:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005aec:	f0 1f 00 0c 	mcall	80005b1c <osc_priv_enable_rc120m+0x38>
80005af0:	18 98       	mov	r8,r12
80005af2:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
80005af6:	fe 78 08 00 	mov	r8,-63488
80005afa:	35 89       	mov	r9,88
80005afc:	ea 19 aa 00 	orh	r9,0xaa00
80005b00:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
80005b02:	fe 78 08 00 	mov	r8,-63488
80005b06:	30 19       	mov	r9,1
80005b08:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
80005b0c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005b10:	f0 1f 00 04 	mcall	80005b20 <osc_priv_enable_rc120m+0x3c>
}
80005b14:	2f fd       	sub	sp,-4
80005b16:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b1a:	00 00       	add	r0,r0
80005b1c:	80 00       	ld.sh	r0,r0[0x0]
80005b1e:	59 78       	cp.w	r8,23
80005b20:	80 00       	ld.sh	r0,r0[0x0]
80005b22:	59 b8       	cp.w	r8,27

80005b24 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005b24:	eb cd 40 80 	pushm	r7,lr
80005b28:	1a 97       	mov	r7,sp
80005b2a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005b2c:	e1 b8 00 00 	mfsr	r8,0x0
80005b30:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005b34:	d3 03       	ssrf	0x10

	return flags;
80005b36:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005b3a:	10 9c       	mov	r12,r8
80005b3c:	2f fd       	sub	sp,-4
80005b3e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005b42 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005b42:	eb cd 40 80 	pushm	r7,lr
80005b46:	1a 97       	mov	r7,sp
80005b48:	20 1d       	sub	sp,4
80005b4a:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005b4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005b52:	e6 18 00 01 	andh	r8,0x1,COH
80005b56:	5f 08       	sreq	r8
80005b58:	5c 58       	castu.b	r8
}
80005b5a:	10 9c       	mov	r12,r8
80005b5c:	2f fd       	sub	sp,-4
80005b5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b62:	d7 03       	nop

80005b64 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005b64:	eb cd 40 80 	pushm	r7,lr
80005b68:	1a 97       	mov	r7,sp
80005b6a:	20 1d       	sub	sp,4
80005b6c:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005b70:	ee fc ff fc 	ld.w	r12,r7[-4]
80005b74:	f0 1f 00 05 	mcall	80005b88 <cpu_irq_restore+0x24>
80005b78:	18 98       	mov	r8,r12
80005b7a:	58 08       	cp.w	r8,0
80005b7c:	c0 20       	breq	80005b80 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005b7e:	d5 03       	csrf	0x10
   }

	barrier();
}
80005b80:	2f fd       	sub	sp,-4
80005b82:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b86:	00 00       	add	r0,r0
80005b88:	80 00       	ld.sh	r0,r0[0x0]
80005b8a:	5b 42       	cp.w	r2,-12

80005b8c <pll_enable>:
	AVR32_SCIF.pll[pll_id] = cfg->ctrl;
	cpu_irq_restore(flags);
}

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
80005b8c:	eb cd 40 80 	pushm	r7,lr
80005b90:	1a 97       	mov	r7,sp
80005b92:	20 3d       	sub	sp,12
80005b94:	ef 4c ff f8 	st.w	r7[-8],r12
80005b98:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
80005b9c:	f0 1f 00 10 	mcall	80005bdc <pll_enable+0x50>
80005ba0:	18 98       	mov	r8,r12
80005ba2:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
80005ba6:	fe 78 08 00 	mov	r8,-63488
80005baa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005bae:	2f 99       	sub	r9,-7
80005bb0:	a3 69       	lsl	r9,0x2
80005bb2:	ea 19 aa 00 	orh	r9,0xaa00
80005bb6:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
80005bb8:	fe 78 08 00 	mov	r8,-63488
80005bbc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005bc0:	ee fa ff f8 	ld.w	r10,r7[-8]
80005bc4:	74 0a       	ld.w	r10,r10[0x0]
80005bc6:	a1 aa       	sbr	r10,0x0
80005bc8:	2f 99       	sub	r9,-7
80005bca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
80005bce:	ee fc ff fc 	ld.w	r12,r7[-4]
80005bd2:	f0 1f 00 04 	mcall	80005be0 <pll_enable+0x54>
}
80005bd6:	2f dd       	sub	sp,-12
80005bd8:	e3 cd 80 80 	ldm	sp++,r7,pc
80005bdc:	80 00       	ld.sh	r0,r0[0x0]
80005bde:	5b 24       	cp.w	r4,-14
80005be0:	80 00       	ld.sh	r0,r0[0x0]
80005be2:	5b 64       	cp.w	r4,-10

80005be4 <pll_disable>:

void pll_disable(unsigned int pll_id)
{
80005be4:	eb cd 40 80 	pushm	r7,lr
80005be8:	1a 97       	mov	r7,sp
80005bea:	20 2d       	sub	sp,8
80005bec:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
80005bf0:	f0 1f 00 0f 	mcall	80005c2c <pll_disable+0x48>
80005bf4:	18 98       	mov	r8,r12
80005bf6:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
80005bfa:	fe 78 08 00 	mov	r8,-63488
80005bfe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005c02:	2f 99       	sub	r9,-7
80005c04:	a3 69       	lsl	r9,0x2
80005c06:	ea 19 aa 00 	orh	r9,0xaa00
80005c0a:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = 0;
80005c0c:	fe 78 08 00 	mov	r8,-63488
80005c10:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005c14:	2f 99       	sub	r9,-7
80005c16:	30 0a       	mov	r10,0
80005c18:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
80005c1c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005c20:	f0 1f 00 04 	mcall	80005c30 <pll_disable+0x4c>
}
80005c24:	2f ed       	sub	sp,-8
80005c26:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c2a:	00 00       	add	r0,r0
80005c2c:	80 00       	ld.sh	r0,r0[0x0]
80005c2e:	5b 24       	cp.w	r4,-14
80005c30:	80 00       	ld.sh	r0,r0[0x0]
80005c32:	5b 64       	cp.w	r4,-10

80005c34 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005c34:	eb cd 40 80 	pushm	r7,lr
80005c38:	1a 97       	mov	r7,sp
80005c3a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005c3c:	e1 b8 00 00 	mfsr	r8,0x0
80005c40:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005c44:	d3 03       	ssrf	0x10

	return flags;
80005c46:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005c4a:	10 9c       	mov	r12,r8
80005c4c:	2f fd       	sub	sp,-4
80005c4e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005c52 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005c52:	eb cd 40 80 	pushm	r7,lr
80005c56:	1a 97       	mov	r7,sp
80005c58:	20 1d       	sub	sp,4
80005c5a:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005c5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c62:	e6 18 00 01 	andh	r8,0x1,COH
80005c66:	5f 08       	sreq	r8
80005c68:	5c 58       	castu.b	r8
}
80005c6a:	10 9c       	mov	r12,r8
80005c6c:	2f fd       	sub	sp,-4
80005c6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c72:	d7 03       	nop

80005c74 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005c74:	eb cd 40 80 	pushm	r7,lr
80005c78:	1a 97       	mov	r7,sp
80005c7a:	20 1d       	sub	sp,4
80005c7c:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005c80:	ee fc ff fc 	ld.w	r12,r7[-4]
80005c84:	f0 1f 00 05 	mcall	80005c98 <cpu_irq_restore+0x24>
80005c88:	18 98       	mov	r8,r12
80005c8a:	58 08       	cp.w	r8,0
80005c8c:	c0 20       	breq	80005c90 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005c8e:	d5 03       	csrf	0x10
   }

	barrier();
}
80005c90:	2f fd       	sub	sp,-4
80005c92:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c96:	00 00       	add	r0,r0
80005c98:	80 00       	ld.sh	r0,r0[0x0]
80005c9a:	5c 52       	castu.b	r2

80005c9c <sysclk_set_prescalers>:
 * \param pbc_shift The PBC clock will be divided by \f$2^{pbc\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift,
		unsigned int pbc_shift)
{
80005c9c:	eb cd 40 80 	pushm	r7,lr
80005ca0:	1a 97       	mov	r7,sp
80005ca2:	20 9d       	sub	sp,36
80005ca4:	ef 4c ff e8 	st.w	r7[-24],r12
80005ca8:	ef 4b ff e4 	st.w	r7[-28],r11
80005cac:	ef 4a ff e0 	st.w	r7[-32],r10
80005cb0:	ef 49 ff dc 	st.w	r7[-36],r9
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
80005cb4:	30 08       	mov	r8,0
80005cb6:	ef 48 ff f0 	st.w	r7[-16],r8
	uint32_t   pba_cksel = 0;
80005cba:	30 08       	mov	r8,0
80005cbc:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t   pbb_cksel = 0;
80005cc0:	30 08       	mov	r8,0
80005cc2:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t   pbc_cksel = 0;
80005cc6:	30 08       	mov	r8,0
80005cc8:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
80005ccc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005cd0:	58 08       	cp.w	r8,0
80005cd2:	c0 70       	breq	80005ce0 <sysclk_set_prescalers+0x44>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_CPUSEL)
80005cd4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005cd8:	20 18       	sub	r8,1
80005cda:	a7 b8       	sbr	r8,0x7
80005cdc:	ef 48 ff f0 	st.w	r7[-16],r8
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
80005ce0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005ce4:	58 08       	cp.w	r8,0
80005ce6:	c0 70       	breq	80005cf4 <sysclk_set_prescalers+0x58>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_PBSEL)
80005ce8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005cec:	20 18       	sub	r8,1
80005cee:	a7 b8       	sbr	r8,0x7
80005cf0:	ef 48 ff f4 	st.w	r7[-12],r8
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
80005cf4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005cf8:	58 08       	cp.w	r8,0
80005cfa:	c0 70       	breq	80005d08 <sysclk_set_prescalers+0x6c>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_PBSEL)
80005cfc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d00:	20 18       	sub	r8,1
80005d02:	a7 b8       	sbr	r8,0x7
80005d04:	ef 48 ff f8 	st.w	r7[-8],r8
				| (1U << AVR32_PM_PBBDIV);

	if (pbc_shift > 0)
80005d08:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005d0c:	58 08       	cp.w	r8,0
80005d0e:	c0 70       	breq	80005d1c <sysclk_set_prescalers+0x80>
		pbc_cksel = ((pbc_shift - 1) << AVR32_PM_PBCSEL_PBSEL)
80005d10:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005d14:	20 18       	sub	r8,1
80005d16:	a7 b8       	sbr	r8,0x7
80005d18:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_PBCDIV);

	flags = cpu_irq_save();
80005d1c:	f0 1f 00 1e 	mcall	80005d94 <sysclk_set_prescalers+0xf8>
80005d20:	18 98       	mov	r8,r12
80005d22:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
80005d26:	fe 78 04 00 	mov	r8,-64512
80005d2a:	30 49       	mov	r9,4
80005d2c:	ea 19 aa 00 	orh	r9,0xaa00
80005d30:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.cpusel = cpu_cksel;
80005d34:	fe 78 04 00 	mov	r8,-64512
80005d38:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005d3c:	91 19       	st.w	r8[0x4],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
80005d3e:	fe 78 04 00 	mov	r8,-64512
80005d42:	30 c9       	mov	r9,12
80005d44:	ea 19 aa 00 	orh	r9,0xaa00
80005d48:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbasel = pba_cksel;
80005d4c:	fe 78 04 00 	mov	r8,-64512
80005d50:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005d54:	91 39       	st.w	r8[0xc],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
80005d56:	fe 78 04 00 	mov	r8,-64512
80005d5a:	31 09       	mov	r9,16
80005d5c:	ea 19 aa 00 	orh	r9,0xaa00
80005d60:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbb_cksel;
80005d64:	fe 78 04 00 	mov	r8,-64512
80005d68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d6c:	91 49       	st.w	r8[0x10],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBCSEL;
80005d6e:	fe 78 04 00 	mov	r8,-64512
80005d72:	31 49       	mov	r9,20
80005d74:	ea 19 aa 00 	orh	r9,0xaa00
80005d78:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbcsel = pbc_cksel;
80005d7c:	fe 78 04 00 	mov	r8,-64512
80005d80:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d84:	91 59       	st.w	r8[0x14],r9
	cpu_irq_restore(flags);
80005d86:	ee fc ff ec 	ld.w	r12,r7[-20]
80005d8a:	f0 1f 00 04 	mcall	80005d98 <sysclk_set_prescalers+0xfc>
}
80005d8e:	2f 7d       	sub	sp,-36
80005d90:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d94:	80 00       	ld.sh	r0,r0[0x0]
80005d96:	5c 34       	neg	r4
80005d98:	80 00       	ld.sh	r0,r0[0x0]
80005d9a:	5c 74       	castu.h	r4

80005d9c <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80005d9c:	eb cd 40 80 	pushm	r7,lr
80005da0:	1a 97       	mov	r7,sp
80005da2:	20 2d       	sub	sp,8
80005da4:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
80005da8:	f0 1f 00 0c 	mcall	80005dd8 <sysclk_set_source+0x3c>
80005dac:	18 98       	mov	r8,r12
80005dae:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80005db2:	fe 78 04 00 	mov	r8,-64512
80005db6:	fc 19 aa 00 	movh	r9,0xaa00
80005dba:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
80005dbe:	fe 78 04 00 	mov	r8,-64512
80005dc2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005dc6:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80005dc8:	ee fc ff fc 	ld.w	r12,r7[-4]
80005dcc:	f0 1f 00 04 	mcall	80005ddc <sysclk_set_source+0x40>
}
80005dd0:	2f ed       	sub	sp,-8
80005dd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005dd6:	00 00       	add	r0,r0
80005dd8:	80 00       	ld.sh	r0,r0[0x0]
80005dda:	5c 34       	neg	r4
80005ddc:	80 00       	ld.sh	r0,r0[0x0]
80005dde:	5c 74       	castu.h	r4

80005de0 <twi_master_read>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005de0:	eb cd 40 80 	pushm	r7,lr
80005de4:	1a 97       	mov	r7,sp
80005de6:	20 2d       	sub	sp,8
80005de8:	ef 4c ff fc 	st.w	r7[-4],r12
80005dec:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_read_packet (twim, package));
80005df0:	ee fb ff f8 	ld.w	r11,r7[-8]
80005df4:	ee fc ff fc 	ld.w	r12,r7[-4]
80005df8:	f0 1f 00 04 	mcall	80005e08 <twi_master_read+0x28>
80005dfc:	18 98       	mov	r8,r12
}
80005dfe:	10 9c       	mov	r12,r8
80005e00:	2f ed       	sub	sp,-8
80005e02:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e06:	00 00       	add	r0,r0
80005e08:	80 00       	ld.sh	r0,r0[0x0]
80005e0a:	51 8c       	stdsp	sp[0x60],r12

80005e0c <twi_master_write>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   if all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005e0c:	eb cd 40 80 	pushm	r7,lr
80005e10:	1a 97       	mov	r7,sp
80005e12:	20 2d       	sub	sp,8
80005e14:	ef 4c ff fc 	st.w	r7[-4],r12
80005e18:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_write_packet (twim, package));
80005e1c:	ee fb ff f8 	ld.w	r11,r7[-8]
80005e20:	ee fc ff fc 	ld.w	r12,r7[-4]
80005e24:	f0 1f 00 04 	mcall	80005e34 <twi_master_write+0x28>
80005e28:	18 98       	mov	r8,r12
}
80005e2a:	10 9c       	mov	r12,r8
80005e2c:	2f ed       	sub	sp,-8
80005e2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e32:	00 00       	add	r0,r0
80005e34:	80 00       	ld.sh	r0,r0[0x0]
80005e36:	53 08       	stdsp	sp[0xc0],r8

80005e38 <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
80005e38:	eb cd 40 80 	pushm	r7,lr
80005e3c:	1a 97       	mov	r7,sp
80005e3e:	20 9d       	sub	sp,36
80005e40:	16 99       	mov	r9,r11
80005e42:	14 98       	mov	r8,r10
80005e44:	18 9a       	mov	r10,r12
80005e46:	ef 6a ff e4 	st.b	r7[-28],r10
80005e4a:	ef 69 ff e0 	st.b	r7[-32],r9
80005e4e:	ef 68 ff dc 	st.b	r7[-36],r8
uint8_t pack[2];
twi_package_t twi_package;

	pack[0] = reg_index;
80005e52:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80005e56:	ef 68 ff fc 	st.b	r7[-4],r8
	pack[1] = data;
80005e5a:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80005e5e:	ef 68 ff fd 	st.b	r7[-3],r8

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005e62:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80005e66:	30 08       	mov	r8,0
80005e68:	f0 09 18 00 	cp.b	r9,r8
80005e6c:	c0 51       	brne	80005e76 <PCA9952_write_reg+0x3e>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005e6e:	36 08       	mov	r8,96
80005e70:	ef 48 ff e8 	st.w	r7[-24],r8
80005e74:	c0 a8       	rjmp	80005e88 <PCA9952_write_reg+0x50>
	}
	else if (topBotn == LED_BOTTOM)
80005e76:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80005e7a:	30 18       	mov	r8,1
80005e7c:	f0 09 18 00 	cp.b	r9,r8
80005e80:	c0 41       	brne	80005e88 <PCA9952_write_reg+0x50>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005e82:	36 18       	mov	r8,97
80005e84:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	twi_package.addr_length = 0;
80005e88:	30 08       	mov	r8,0
80005e8a:	ef 68 ff ef 	st.b	r7[-17],r8
	twi_package.buffer = &pack;
80005e8e:	ee c8 00 04 	sub	r8,r7,4
80005e92:	ef 48 ff f0 	st.w	r7[-16],r8
	twi_package.length = sizeof(pack);
80005e96:	30 28       	mov	r8,2
80005e98:	ef 48 ff f4 	st.w	r7[-12],r8

	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005e9c:	ee c8 00 18 	sub	r8,r7,24
80005ea0:	10 9b       	mov	r11,r8
80005ea2:	fe 7c 38 00 	mov	r12,-51200
80005ea6:	f0 1f 00 05 	mcall	80005eb8 <PCA9952_write_reg+0x80>
80005eaa:	18 98       	mov	r8,r12
80005eac:	58 08       	cp.w	r8,0
80005eae:	cf 71       	brne	80005e9c <PCA9952_write_reg+0x64>

	return;
}
80005eb0:	2f 7d       	sub	sp,-36
80005eb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005eb6:	00 00       	add	r0,r0
80005eb8:	80 00       	ld.sh	r0,r0[0x0]
80005eba:	5e 0c       	reteq	r12

80005ebc <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
80005ebc:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005ec0:	1a 97       	mov	r7,sp
80005ec2:	21 3d       	sub	sp,76
80005ec4:	18 99       	mov	r9,r12
80005ec6:	16 98       	mov	r8,r11
80005ec8:	ef 69 ff b8 	st.b	r7[-72],r9
80005ecc:	ef 68 ff b4 	st.b	r7[-76],r8
uint8_t data;
twi_package_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005ed0:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005ed4:	30 08       	mov	r8,0
80005ed6:	f0 09 18 00 	cp.b	r9,r8
80005eda:	c0 51       	brne	80005ee4 <PCA9952_read_reg+0x28>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005edc:	36 08       	mov	r8,96
80005ede:	ef 48 ff c8 	st.w	r7[-56],r8
80005ee2:	c0 a8       	rjmp	80005ef6 <PCA9952_read_reg+0x3a>
	}
	else if (topBotn == LED_BOTTOM)
80005ee4:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005ee8:	30 18       	mov	r8,1
80005eea:	f0 09 18 00 	cp.b	r9,r8
80005eee:	c0 41       	brne	80005ef6 <PCA9952_read_reg+0x3a>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005ef0:	36 18       	mov	r8,97
80005ef2:	ef 48 ff c8 	st.w	r7[-56],r8
	}

	twi_package.addr_length = 0;
80005ef6:	30 08       	mov	r8,0
80005ef8:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &reg_index;
80005efc:	ee c8 00 4c 	sub	r8,r7,76
80005f00:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
80005f04:	30 18       	mov	r8,1
80005f06:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005f0a:	ee c8 00 38 	sub	r8,r7,56
80005f0e:	10 9b       	mov	r11,r8
80005f10:	fe 7c 38 00 	mov	r12,-51200
80005f14:	f0 1f 00 5e 	mcall	8000608c <PCA9952_read_reg+0x1d0>
80005f18:	18 98       	mov	r8,r12
80005f1a:	58 08       	cp.w	r8,0
80005f1c:	cf 71       	brne	80005f0a <PCA9952_read_reg+0x4e>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	cpu_delay_us(20, cpu_hz);
80005f1e:	4d d8       	lddpc	r8,80006090 <PCA9952_read_reg+0x1d4>
80005f20:	70 08       	ld.w	r8,r8[0x0]
80005f22:	31 49       	mov	r9,20
80005f24:	ef 49 ff e4 	st.w	r7[-28],r9
80005f28:	ef 48 ff e0 	st.w	r7[-32],r8
80005f2c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005f30:	ef 48 ff ec 	st.w	r7[-20],r8
80005f34:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005f38:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80005f3c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80005f40:	30 01       	mov	r1,0
80005f42:	ee f2 ff e8 	ld.w	r2,r7[-24]
80005f46:	30 03       	mov	r3,0
80005f48:	e2 02 02 4a 	mul	r10,r1,r2
80005f4c:	e6 00 02 48 	mul	r8,r3,r0
80005f50:	10 0a       	add	r10,r8
80005f52:	e0 02 06 48 	mulu.d	r8,r0,r2
80005f56:	12 0a       	add	r10,r9
80005f58:	14 99       	mov	r9,r10
80005f5a:	ee 7a 42 3f 	mov	r10,999999
80005f5e:	30 0b       	mov	r11,0
80005f60:	f0 0a 00 0a 	add	r10,r8,r10
80005f64:	f2 0b 00 4b 	adc	r11,r9,r11
80005f68:	ee 78 42 40 	mov	r8,1000000
80005f6c:	30 09       	mov	r9,0
80005f6e:	f0 1f 00 4a 	mcall	80006094 <PCA9952_read_reg+0x1d8>
80005f72:	14 98       	mov	r8,r10
80005f74:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80005f76:	ef 48 ff f4 	st.w	r7[-12],r8
80005f7a:	ee c8 00 44 	sub	r8,r7,68
80005f7e:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005f82:	e1 b8 00 42 	mfsr	r8,0x108
80005f86:	10 99       	mov	r9,r8
80005f88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f8c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005f8e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f92:	70 09       	ld.w	r9,r8[0x0]
80005f94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f98:	10 09       	add	r9,r8
80005f9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f9e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005fa0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005fa4:	30 08       	mov	r8,0
80005fa6:	f3 68 00 08 	st.b	r9[8],r8
80005faa:	ee c8 00 44 	sub	r8,r7,68
80005fae:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005fb2:	e1 b8 00 42 	mfsr	r8,0x108
80005fb6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005fba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fbe:	f1 39 00 08 	ld.ub	r9,r8[8]
80005fc2:	30 28       	mov	r8,2
80005fc4:	f0 09 18 00 	cp.b	r9,r8
80005fc8:	c0 31       	brne	80005fce <PCA9952_read_reg+0x112>
    return false;
80005fca:	30 08       	mov	r8,0
80005fcc:	c4 38       	rjmp	80006052 <PCA9952_read_reg+0x196>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005fce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fd2:	f1 39 00 08 	ld.ub	r9,r8[8]
80005fd6:	30 18       	mov	r8,1
80005fd8:	f0 09 18 00 	cp.b	r9,r8
80005fdc:	c0 31       	brne	80005fe2 <PCA9952_read_reg+0x126>
    return true;
80005fde:	30 18       	mov	r8,1
80005fe0:	c3 98       	rjmp	80006052 <PCA9952_read_reg+0x196>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005fe2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fe6:	70 09       	ld.w	r9,r8[0x0]
80005fe8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fec:	70 18       	ld.w	r8,r8[0x4]
80005fee:	10 39       	cp.w	r9,r8
80005ff0:	e0 88 00 1a 	brls	80006024 <PCA9952_read_reg+0x168>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005ff4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ff8:	70 08       	ld.w	r8,r8[0x0]
80005ffa:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ffe:	10 39       	cp.w	r9,r8
80006000:	c1 02       	brcc	80006020 <PCA9952_read_reg+0x164>
80006002:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006006:	70 18       	ld.w	r8,r8[0x4]
80006008:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000600c:	10 39       	cp.w	r9,r8
8000600e:	e0 88 00 09 	brls	80006020 <PCA9952_read_reg+0x164>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006012:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006016:	30 18       	mov	r8,1
80006018:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000601c:	30 18       	mov	r8,1
8000601e:	c1 a8       	rjmp	80006052 <PCA9952_read_reg+0x196>
    }
    return false;
80006020:	30 08       	mov	r8,0
80006022:	c1 88       	rjmp	80006052 <PCA9952_read_reg+0x196>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006024:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006028:	70 08       	ld.w	r8,r8[0x0]
8000602a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000602e:	10 39       	cp.w	r9,r8
80006030:	c0 93       	brcs	80006042 <PCA9952_read_reg+0x186>
80006032:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006036:	70 18       	ld.w	r8,r8[0x4]
80006038:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000603c:	10 39       	cp.w	r9,r8
8000603e:	e0 88 00 09 	brls	80006050 <PCA9952_read_reg+0x194>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006042:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006046:	30 18       	mov	r8,1
80006048:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000604c:	30 18       	mov	r8,1
8000604e:	c0 28       	rjmp	80006052 <PCA9952_read_reg+0x196>
    }
    return false;
80006050:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006052:	58 08       	cp.w	r8,0
80006054:	ca b0       	breq	80005faa <PCA9952_read_reg+0xee>

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
80006056:	30 08       	mov	r8,0
80006058:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &data;
8000605c:	ee c8 00 21 	sub	r8,r7,33
80006060:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
80006064:	30 18       	mov	r8,1
80006066:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_read(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
8000606a:	ee c8 00 38 	sub	r8,r7,56
8000606e:	10 9b       	mov	r11,r8
80006070:	fe 7c 38 00 	mov	r12,-51200
80006074:	f0 1f 00 09 	mcall	80006098 <PCA9952_read_reg+0x1dc>
80006078:	18 98       	mov	r8,r12
8000607a:	58 08       	cp.w	r8,0
8000607c:	cf 71       	brne	8000606a <PCA9952_read_reg+0x1ae>

	return data;
8000607e:	ef 38 ff df 	ld.ub	r8,r7[-33]
}
80006082:	10 9c       	mov	r12,r8
80006084:	2e dd       	sub	sp,-76
80006086:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000608a:	00 00       	add	r0,r0
8000608c:	80 00       	ld.sh	r0,r0[0x0]
8000608e:	5e 0c       	reteq	r12
80006090:	00 00       	add	r0,r0
80006092:	07 ac       	ld.ub	r12,r3[0x2]
80006094:	80 00       	ld.sh	r0,r0[0x0]
80006096:	ae c2       	st.b	r7[0x4],r2
80006098:	80 00       	ld.sh	r0,r0[0x0]
8000609a:	5d e0       	*unknown*

8000609c <PCA9952_init>:


void PCA9952_init(void) //7apr15
{
8000609c:	eb cd 40 80 	pushm	r7,lr
800060a0:	1a 97       	mov	r7,sp
800060a2:	20 1d       	sub	sp,4
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
800060a4:	30 0a       	mov	r10,0
800060a6:	30 0b       	mov	r11,0
800060a8:	30 0c       	mov	r12,0
800060aa:	f0 1f 00 32 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
800060ae:	30 0a       	mov	r10,0
800060b0:	30 1b       	mov	r11,1
800060b2:	30 0c       	mov	r12,0
800060b4:	f0 1f 00 2f 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
800060b8:	36 4a       	mov	r10,100
800060ba:	34 3b       	mov	r11,67
800060bc:	30 0c       	mov	r12,0
800060be:	f0 1f 00 2d 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
800060c2:	30 0a       	mov	r10,0
800060c4:	30 2b       	mov	r11,2
800060c6:	30 0c       	mov	r12,0
800060c8:	f0 1f 00 2a 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
800060cc:	30 0a       	mov	r10,0
800060ce:	30 3b       	mov	r11,3
800060d0:	30 0c       	mov	r12,0
800060d2:	f0 1f 00 28 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
800060d6:	30 0a       	mov	r10,0
800060d8:	30 4b       	mov	r11,4
800060da:	30 0c       	mov	r12,0
800060dc:	f0 1f 00 25 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
800060e0:	30 0a       	mov	r10,0
800060e2:	30 5b       	mov	r11,5
800060e4:	30 0c       	mov	r12,0
800060e6:	f0 1f 00 23 	mcall	80006170 <PCA9952_init+0xd4>

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
800060ea:	34 4b       	mov	r11,68
800060ec:	30 0c       	mov	r12,0
800060ee:	f0 1f 00 22 	mcall	80006174 <PCA9952_init+0xd8>
800060f2:	18 98       	mov	r8,r12
800060f4:	ef 68 ff ff 	st.b	r7[-1],r8
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
800060f8:	34 5b       	mov	r11,69
800060fa:	30 0c       	mov	r12,0
800060fc:	f0 1f 00 1e 	mcall	80006174 <PCA9952_init+0xd8>
80006100:	18 98       	mov	r8,r12
80006102:	ef 68 ff fe 	st.b	r7[-2],r8

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
80006106:	30 0a       	mov	r10,0
80006108:	30 0b       	mov	r11,0
8000610a:	30 1c       	mov	r12,1
8000610c:	f0 1f 00 19 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
80006110:	30 0a       	mov	r10,0
80006112:	30 1b       	mov	r11,1
80006114:	30 1c       	mov	r12,1
80006116:	f0 1f 00 17 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
8000611a:	36 4a       	mov	r10,100
8000611c:	34 3b       	mov	r11,67
8000611e:	30 1c       	mov	r12,1
80006120:	f0 1f 00 14 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
80006124:	30 0a       	mov	r10,0
80006126:	30 2b       	mov	r11,2
80006128:	30 1c       	mov	r12,1
8000612a:	f0 1f 00 12 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
8000612e:	30 0a       	mov	r10,0
80006130:	30 3b       	mov	r11,3
80006132:	30 1c       	mov	r12,1
80006134:	f0 1f 00 0f 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
80006138:	30 0a       	mov	r10,0
8000613a:	30 4b       	mov	r11,4
8000613c:	30 1c       	mov	r12,1
8000613e:	f0 1f 00 0d 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
80006142:	30 0a       	mov	r10,0
80006144:	30 5b       	mov	r11,5
80006146:	30 1c       	mov	r12,1
80006148:	f0 1f 00 0a 	mcall	80006170 <PCA9952_init+0xd4>

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
8000614c:	34 4b       	mov	r11,68
8000614e:	30 1c       	mov	r12,1
80006150:	f0 1f 00 09 	mcall	80006174 <PCA9952_init+0xd8>
80006154:	18 98       	mov	r8,r12
80006156:	ef 68 ff fd 	st.b	r7[-3],r8
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
8000615a:	34 5b       	mov	r11,69
8000615c:	30 1c       	mov	r12,1
8000615e:	f0 1f 00 06 	mcall	80006174 <PCA9952_init+0xd8>
80006162:	18 98       	mov	r8,r12
80006164:	ef 68 ff fc 	st.b	r7[-4],r8

}
80006168:	2f fd       	sub	sp,-4
8000616a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000616e:	00 00       	add	r0,r0
80006170:	80 00       	ld.sh	r0,r0[0x0]
80006172:	5e 38       	retlo	r8
80006174:	80 00       	ld.sh	r0,r0[0x0]
80006176:	5e bc       	rethi	r12

80006178 <PCA9952_channel>:


void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn);
void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn)
{
80006178:	eb cd 40 80 	pushm	r7,lr
8000617c:	1a 97       	mov	r7,sp
8000617e:	20 5d       	sub	sp,20
80006180:	16 99       	mov	r9,r11
80006182:	14 98       	mov	r8,r10
80006184:	18 9a       	mov	r10,r12
80006186:	ef 6a ff f4 	st.b	r7[-12],r10
8000618a:	ef 69 ff f0 	st.b	r7[-16],r9
8000618e:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char regIdx, regPos, regShadow, maskVal, writeVal;
	
	regIdx = (channel / 4); //LEDOUT0 controls channels 0..3, LEDOUT1 controls channels 4..7 etc.
80006192:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80006196:	a3 88       	lsr	r8,0x2
80006198:	ef 68 ff fb 	st.b	r7[-5],r8
	regPos = (channel % 4);
8000619c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800061a0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800061a4:	ef 68 ff fc 	st.b	r7[-4],r8
	
	switch(regIdx)
800061a8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800061ac:	58 18       	cp.w	r8,1
800061ae:	c1 50       	breq	800061d8 <PCA9952_channel+0x60>
800061b0:	e0 89 00 05 	brgt	800061ba <PCA9952_channel+0x42>
800061b4:	58 08       	cp.w	r8,0
800061b6:	c0 70       	breq	800061c4 <PCA9952_channel+0x4c>
800061b8:	c2 d8       	rjmp	80006212 <PCA9952_channel+0x9a>
800061ba:	58 28       	cp.w	r8,2
800061bc:	c1 80       	breq	800061ec <PCA9952_channel+0x74>
800061be:	58 38       	cp.w	r8,3
800061c0:	c2 00       	breq	80006200 <PCA9952_channel+0x88>
800061c2:	c2 88       	rjmp	80006212 <PCA9952_channel+0x9a>
	{
		case 0:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT0);
800061c4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800061c8:	30 2b       	mov	r11,2
800061ca:	10 9c       	mov	r12,r8
800061cc:	f0 1f 00 49 	mcall	800062f0 <PCA9952_channel+0x178>
800061d0:	18 98       	mov	r8,r12
800061d2:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
800061d6:	c1 e8       	rjmp	80006212 <PCA9952_channel+0x9a>
		case 1:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT1);
800061d8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800061dc:	30 3b       	mov	r11,3
800061de:	10 9c       	mov	r12,r8
800061e0:	f0 1f 00 44 	mcall	800062f0 <PCA9952_channel+0x178>
800061e4:	18 98       	mov	r8,r12
800061e6:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
800061ea:	c1 48       	rjmp	80006212 <PCA9952_channel+0x9a>
		case 2:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT2);
800061ec:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800061f0:	30 4b       	mov	r11,4
800061f2:	10 9c       	mov	r12,r8
800061f4:	f0 1f 00 3f 	mcall	800062f0 <PCA9952_channel+0x178>
800061f8:	18 98       	mov	r8,r12
800061fa:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
800061fe:	c0 a8       	rjmp	80006212 <PCA9952_channel+0x9a>
		case 3:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT3);
80006200:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006204:	30 5b       	mov	r11,5
80006206:	10 9c       	mov	r12,r8
80006208:	f0 1f 00 3a 	mcall	800062f0 <PCA9952_channel+0x178>
8000620c:	18 98       	mov	r8,r12
8000620e:	ef 68 ff fd 	st.b	r7[-3],r8
			break;		
	}

	maskVal = 0xFF << (regPos * 2);
80006212:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006216:	a1 78       	lsl	r8,0x1
80006218:	e0 69 00 ff 	mov	r9,255
8000621c:	f2 08 09 48 	lsl	r8,r9,r8
80006220:	ef 68 ff fe 	st.b	r7[-2],r8
	maskVal = maskVal ^ 0xFF;
80006224:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006228:	5c d8       	com	r8
8000622a:	ef 68 ff fe 	st.b	r7[-2],r8
	regShadow &= maskVal;
8000622e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006232:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006236:	f3 e8 00 08 	and	r8,r9,r8
8000623a:	ef 68 ff fd 	st.b	r7[-3],r8

	if (onOffn == LED_ON)
8000623e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80006242:	30 18       	mov	r8,1
80006244:	f0 09 18 00 	cp.b	r9,r8
80006248:	c0 a1       	brne	8000625c <PCA9952_channel+0xe4>
	{
		writeVal = (0x01 << (regPos * 2));
8000624a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000624e:	a1 78       	lsl	r8,0x1
80006250:	30 19       	mov	r9,1
80006252:	f2 08 09 48 	lsl	r8,r9,r8
80006256:	ef 68 ff ff 	st.b	r7[-1],r8
8000625a:	c0 a8       	rjmp	8000626e <PCA9952_channel+0xf6>
	}
	else if (onOffn == LED_OFF)
8000625c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80006260:	30 08       	mov	r8,0
80006262:	f0 09 18 00 	cp.b	r9,r8
80006266:	c0 41       	brne	8000626e <PCA9952_channel+0xf6>
	{
		writeVal = 0;
80006268:	30 08       	mov	r8,0
8000626a:	ef 68 ff ff 	st.b	r7[-1],r8
	}
	
	regShadow |= writeVal;
8000626e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006272:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006276:	f3 e8 10 08 	or	r8,r9,r8
8000627a:	ef 68 ff fd 	st.b	r7[-3],r8
	
	switch(regIdx)
8000627e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006282:	58 18       	cp.w	r8,1
80006284:	c1 50       	breq	800062ae <PCA9952_channel+0x136>
80006286:	e0 89 00 05 	brgt	80006290 <PCA9952_channel+0x118>
8000628a:	58 08       	cp.w	r8,0
8000628c:	c0 70       	breq	8000629a <PCA9952_channel+0x122>
8000628e:	c2 d8       	rjmp	800062e8 <PCA9952_channel+0x170>
80006290:	58 28       	cp.w	r8,2
80006292:	c1 80       	breq	800062c2 <PCA9952_channel+0x14a>
80006294:	58 38       	cp.w	r8,3
80006296:	c2 00       	breq	800062d6 <PCA9952_channel+0x15e>
80006298:	c2 88       	rjmp	800062e8 <PCA9952_channel+0x170>
	{
		case 0:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT0, regShadow);
8000629a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000629e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800062a2:	12 9a       	mov	r10,r9
800062a4:	30 2b       	mov	r11,2
800062a6:	10 9c       	mov	r12,r8
800062a8:	f0 1f 00 13 	mcall	800062f4 <PCA9952_channel+0x17c>
			break;
800062ac:	c1 e8       	rjmp	800062e8 <PCA9952_channel+0x170>
		case 1:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT1, regShadow);
800062ae:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800062b2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800062b6:	12 9a       	mov	r10,r9
800062b8:	30 3b       	mov	r11,3
800062ba:	10 9c       	mov	r12,r8
800062bc:	f0 1f 00 0e 	mcall	800062f4 <PCA9952_channel+0x17c>
			break;
800062c0:	c1 48       	rjmp	800062e8 <PCA9952_channel+0x170>
		case 2:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT2, regShadow);
800062c2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800062c6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800062ca:	12 9a       	mov	r10,r9
800062cc:	30 4b       	mov	r11,4
800062ce:	10 9c       	mov	r12,r8
800062d0:	f0 1f 00 09 	mcall	800062f4 <PCA9952_channel+0x17c>
			break;
800062d4:	c0 a8       	rjmp	800062e8 <PCA9952_channel+0x170>
		case 3:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT3, regShadow);
800062d6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800062da:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800062de:	12 9a       	mov	r10,r9
800062e0:	30 5b       	mov	r11,5
800062e2:	10 9c       	mov	r12,r8
800062e4:	f0 1f 00 04 	mcall	800062f4 <PCA9952_channel+0x17c>
			break;
	}

}
800062e8:	2f bd       	sub	sp,-20
800062ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800062ee:	00 00       	add	r0,r0
800062f0:	80 00       	ld.sh	r0,r0[0x0]
800062f2:	5e bc       	rethi	r12
800062f4:	80 00       	ld.sh	r0,r0[0x0]
800062f6:	5e 38       	retlo	r8

800062f8 <led_shelf>:

void led_shelf(unsigned char shelf, unsigned char onOffn)
{
800062f8:	eb cd 40 80 	pushm	r7,lr
800062fc:	1a 97       	mov	r7,sp
800062fe:	20 2d       	sub	sp,8
80006300:	18 99       	mov	r9,r12
80006302:	16 98       	mov	r8,r11
80006304:	ef 69 ff fc 	st.b	r7[-4],r9
80006308:	ef 68 ff f8 	st.b	r7[-8],r8
	switch(shelf)
8000630c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006310:	58 18       	cp.w	r8,1
80006312:	c2 f0       	breq	80006370 <led_shelf+0x78>
80006314:	e0 89 00 05 	brgt	8000631e <led_shelf+0x26>
80006318:	58 08       	cp.w	r8,0
8000631a:	c0 70       	breq	80006328 <led_shelf+0x30>
8000631c:	c9 58       	rjmp	80006446 <led_shelf+0x14e>
8000631e:	58 28       	cp.w	r8,2
80006320:	c4 c0       	breq	800063b8 <led_shelf+0xc0>
80006322:	58 38       	cp.w	r8,3
80006324:	c6 e0       	breq	80006400 <led_shelf+0x108>
80006326:	c9 08       	rjmp	80006446 <led_shelf+0x14e>
	{
		case 0: //bottom of LED board 0 which is the upper board in the shelf, and top of LED board 1 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 0, onOffn);
80006328:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000632c:	10 9a       	mov	r10,r8
8000632e:	30 0b       	mov	r11,0
80006330:	30 1c       	mov	r12,1
80006332:	f0 1f 00 47 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 1, onOffn);
80006336:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000633a:	10 9a       	mov	r10,r8
8000633c:	30 1b       	mov	r11,1
8000633e:	30 1c       	mov	r12,1
80006340:	f0 1f 00 43 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 2, onOffn);
80006344:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006348:	10 9a       	mov	r10,r8
8000634a:	30 2b       	mov	r11,2
8000634c:	30 1c       	mov	r12,1
8000634e:	f0 1f 00 40 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 0, onOffn);
80006352:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006356:	10 9a       	mov	r10,r8
80006358:	30 0b       	mov	r11,0
8000635a:	30 0c       	mov	r12,0
8000635c:	f0 1f 00 3c 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 1, onOffn);
80006360:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006364:	10 9a       	mov	r10,r8
80006366:	30 1b       	mov	r11,1
80006368:	30 0c       	mov	r12,0
8000636a:	f0 1f 00 39 	mcall	8000644c <led_shelf+0x154>
			break;
8000636e:	c6 c8       	rjmp	80006446 <led_shelf+0x14e>

		case 1: //bottom of LED board 1 which is the upper board in the shelf, and top of LED board 2 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 3, onOffn);
80006370:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006374:	10 9a       	mov	r10,r8
80006376:	30 3b       	mov	r11,3
80006378:	30 1c       	mov	r12,1
8000637a:	f0 1f 00 35 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 4, onOffn);
8000637e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006382:	10 9a       	mov	r10,r8
80006384:	30 4b       	mov	r11,4
80006386:	30 1c       	mov	r12,1
80006388:	f0 1f 00 31 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 5, onOffn);
8000638c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006390:	10 9a       	mov	r10,r8
80006392:	30 5b       	mov	r11,5
80006394:	30 1c       	mov	r12,1
80006396:	f0 1f 00 2e 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 2, onOffn);
8000639a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000639e:	10 9a       	mov	r10,r8
800063a0:	30 2b       	mov	r11,2
800063a2:	30 0c       	mov	r12,0
800063a4:	f0 1f 00 2a 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 3, onOffn);
800063a8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063ac:	10 9a       	mov	r10,r8
800063ae:	30 3b       	mov	r11,3
800063b0:	30 0c       	mov	r12,0
800063b2:	f0 1f 00 27 	mcall	8000644c <led_shelf+0x154>
			break;
800063b6:	c4 88       	rjmp	80006446 <led_shelf+0x14e>

		case 2: //bottom of LED board 2 which is the upper board in the shelf, and top of LED board 3 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 6, onOffn);
800063b8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063bc:	10 9a       	mov	r10,r8
800063be:	30 6b       	mov	r11,6
800063c0:	30 1c       	mov	r12,1
800063c2:	f0 1f 00 23 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 7, onOffn);
800063c6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063ca:	10 9a       	mov	r10,r8
800063cc:	30 7b       	mov	r11,7
800063ce:	30 1c       	mov	r12,1
800063d0:	f0 1f 00 1f 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 8, onOffn);
800063d4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063d8:	10 9a       	mov	r10,r8
800063da:	30 8b       	mov	r11,8
800063dc:	30 1c       	mov	r12,1
800063de:	f0 1f 00 1c 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 4, onOffn);
800063e2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063e6:	10 9a       	mov	r10,r8
800063e8:	30 4b       	mov	r11,4
800063ea:	30 0c       	mov	r12,0
800063ec:	f0 1f 00 18 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 5, onOffn);
800063f0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063f4:	10 9a       	mov	r10,r8
800063f6:	30 5b       	mov	r11,5
800063f8:	30 0c       	mov	r12,0
800063fa:	f0 1f 00 15 	mcall	8000644c <led_shelf+0x154>
			break;
800063fe:	c2 48       	rjmp	80006446 <led_shelf+0x14e>

		case 3: //bottom of LED board 3 which is the upper board in the shelf, and top of LED board 4 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 9, onOffn);
80006400:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006404:	10 9a       	mov	r10,r8
80006406:	30 9b       	mov	r11,9
80006408:	30 1c       	mov	r12,1
8000640a:	f0 1f 00 11 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 10, onOffn);
8000640e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006412:	10 9a       	mov	r10,r8
80006414:	30 ab       	mov	r11,10
80006416:	30 1c       	mov	r12,1
80006418:	f0 1f 00 0d 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 11, onOffn);
8000641c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006420:	10 9a       	mov	r10,r8
80006422:	30 bb       	mov	r11,11
80006424:	30 1c       	mov	r12,1
80006426:	f0 1f 00 0a 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 6, onOffn);
8000642a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000642e:	10 9a       	mov	r10,r8
80006430:	30 6b       	mov	r11,6
80006432:	30 0c       	mov	r12,0
80006434:	f0 1f 00 06 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 7, onOffn);
80006438:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000643c:	10 9a       	mov	r10,r8
8000643e:	30 7b       	mov	r11,7
80006440:	30 0c       	mov	r12,0
80006442:	f0 1f 00 03 	mcall	8000644c <led_shelf+0x154>
			break;
	}	
	
}
80006446:	2f ed       	sub	sp,-8
80006448:	e3 cd 80 80 	ldm	sp++,r7,pc
8000644c:	80 00       	ld.sh	r0,r0[0x0]
8000644e:	61 78       	ld.w	r8,r0[0x5c]
80006450:	53 68       	stdsp	sp[0xd8],r8
80006452:	65 6c       	ld.w	r12,r2[0x58]
80006454:	66 20       	ld.w	r0,r3[0x8]
80006456:	30 20       	mov	r0,2
80006458:	61 63       	ld.w	r3,r0[0x58]
8000645a:	74 69       	ld.w	r9,r10[0x18]
8000645c:	76 65       	ld.w	r5,r11[0x18]
8000645e:	0d 0a       	ld.w	r10,r6++
80006460:	00 00       	add	r0,r0
80006462:	00 00       	add	r0,r0
80006464:	53 68       	stdsp	sp[0xd8],r8
80006466:	65 6c       	ld.w	r12,r2[0x58]
80006468:	66 20       	ld.w	r0,r3[0x8]
8000646a:	31 20       	mov	r0,18
8000646c:	61 63       	ld.w	r3,r0[0x58]
8000646e:	74 69       	ld.w	r9,r10[0x18]
80006470:	76 65       	ld.w	r5,r11[0x18]
80006472:	0d 0a       	ld.w	r10,r6++
80006474:	00 00       	add	r0,r0
80006476:	00 00       	add	r0,r0
80006478:	53 68       	stdsp	sp[0xd8],r8
8000647a:	65 6c       	ld.w	r12,r2[0x58]
8000647c:	66 20       	ld.w	r0,r3[0x8]
8000647e:	32 20       	mov	r0,34
80006480:	61 63       	ld.w	r3,r0[0x58]
80006482:	74 69       	ld.w	r9,r10[0x18]
80006484:	76 65       	ld.w	r5,r11[0x18]
80006486:	0d 0a       	ld.w	r10,r6++
80006488:	00 00       	add	r0,r0
8000648a:	00 00       	add	r0,r0
8000648c:	53 68       	stdsp	sp[0xd8],r8
8000648e:	65 6c       	ld.w	r12,r2[0x58]
80006490:	66 20       	ld.w	r0,r3[0x8]
80006492:	33 20       	mov	r0,50
80006494:	61 63       	ld.w	r3,r0[0x58]
80006496:	74 69       	ld.w	r9,r10[0x18]
80006498:	76 65       	ld.w	r5,r11[0x18]
8000649a:	0d 0a       	ld.w	r10,r6++
8000649c:	00 00       	add	r0,r0
8000649e:	00 00       	add	r0,r0
800064a0:	0d 0a       	ld.w	r10,r6++
800064a2:	2a 2a       	sub	r10,-94
800064a4:	2a 49       	sub	r9,-92
800064a6:	4e 53       	lddpc	r3,80006638 <led_shelf+0x340>
800064a8:	54 41       	stdsp	sp[0x110],r1
800064aa:	4c 4c       	lddpc	r12,800065b8 <led_shelf+0x2c0>
800064ac:	45 44       	lddsp	r4,sp[0x150]
800064ae:	20 4c       	sub	r12,4
800064b0:	45 44       	lddsp	r4,sp[0x150]
800064b2:	20 42       	sub	r2,4
800064b4:	4f 41       	lddpc	r1,80006684 <led_shelf+0x38c>
800064b6:	52 44       	stdsp	sp[0x90],r4
800064b8:	53 2a       	stdsp	sp[0xc8],r10
800064ba:	2a 2a       	sub	r10,-94
800064bc:	0d 0a       	ld.w	r10,r6++
800064be:	0d 0a       	ld.w	r10,r6++
800064c0:	00 00       	add	r0,r0
800064c2:	00 00       	add	r0,r0
800064c4:	53 4c       	stdsp	sp[0xd0],r12
800064c6:	4f 54       	lddpc	r4,80006698 <led_shelf+0x3a0>
800064c8:	20 20       	sub	r0,2
800064ca:	20 20       	sub	r0,2
800064cc:	49 44       	lddpc	r4,8000651c <led_shelf+0x224>
800064ce:	20 20       	sub	r0,2
800064d0:	20 20       	sub	r0,2
800064d2:	20 20       	sub	r0,2
800064d4:	20 20       	sub	r0,2
800064d6:	20 20       	sub	r0,2
800064d8:	20 20       	sub	r0,2
800064da:	20 20       	sub	r0,2
800064dc:	54 4f       	stdsp	sp[0x110],pc
800064de:	50 20       	stdsp	sp[0x8],r0
800064e0:	48 52       	lddpc	r2,800064f4 <led_shelf+0x1fc>
800064e2:	53 3a       	stdsp	sp[0xcc],r10
800064e4:	4d 49       	lddpc	r9,80006634 <led_shelf+0x33c>
800064e6:	4e 20       	lddpc	r0,8000666c <led_shelf+0x374>
800064e8:	20 20       	sub	r0,2
800064ea:	20 42       	sub	r2,4
800064ec:	4f 54       	lddpc	r4,800066c0 <led_shelf+0x3c8>
800064ee:	20 48       	sub	r8,4
800064f0:	52 53       	stdsp	sp[0x94],r3
800064f2:	3a 4d       	mov	sp,-92
800064f4:	49 4e       	lddpc	lr,80006544 <led_shelf+0x24c>
800064f6:	0d 0a       	ld.w	r10,r6++
800064f8:	00 00       	add	r0,r0
800064fa:	00 00       	add	r0,r0
800064fc:	2d 2d       	sub	sp,-184
800064fe:	2d 2d       	sub	sp,-184
80006500:	2d 2d       	sub	sp,-184
80006502:	2d 2d       	sub	sp,-184
80006504:	2d 2d       	sub	sp,-184
80006506:	2d 2d       	sub	sp,-184
80006508:	2d 2d       	sub	sp,-184
8000650a:	2d 2d       	sub	sp,-184
8000650c:	2d 2d       	sub	sp,-184
8000650e:	2d 2d       	sub	sp,-184
80006510:	2d 2d       	sub	sp,-184
80006512:	2d 2d       	sub	sp,-184
80006514:	2d 2d       	sub	sp,-184
80006516:	2d 2d       	sub	sp,-184
80006518:	2d 2d       	sub	sp,-184
8000651a:	2d 2d       	sub	sp,-184
8000651c:	2d 2d       	sub	sp,-184
8000651e:	2d 2d       	sub	sp,-184
80006520:	2d 2d       	sub	sp,-184
80006522:	2d 2d       	sub	sp,-184
80006524:	2d 2d       	sub	sp,-184
80006526:	2d 2d       	sub	sp,-184
80006528:	2d 2d       	sub	sp,-184
8000652a:	2d 2d       	sub	sp,-184
8000652c:	2d 2d       	sub	sp,-184
8000652e:	0d 0a       	ld.w	r10,r6++
80006530:	00 00       	add	r0,r0
80006532:	00 00       	add	r0,r0
80006534:	20 25       	sub	r5,2
80006536:	64 20       	ld.w	r0,r2[0x8]
80006538:	20 20       	sub	r0,2
8000653a:	20 20       	sub	r0,2
8000653c:	20 25       	sub	r5,2
8000653e:	58 25       	cp.w	r5,2
80006540:	58 25       	cp.w	r5,2
80006542:	58 25       	cp.w	r5,2
80006544:	58 25       	cp.w	r5,2
80006546:	58 25       	cp.w	r5,2
80006548:	58 20       	cp.w	r0,2
8000654a:	20 20       	sub	r0,2
8000654c:	20 20       	sub	r0,2
8000654e:	20 20       	sub	r0,2
80006550:	20 20       	sub	r0,2
80006552:	25 30       	sub	r0,83
80006554:	31 64       	mov	r4,22
80006556:	25 30       	sub	r0,83
80006558:	31 64       	mov	r4,22
8000655a:	25 30       	sub	r0,83
8000655c:	31 64       	mov	r4,22
8000655e:	25 30       	sub	r0,83
80006560:	31 64       	mov	r4,22
80006562:	3a 25       	mov	r5,-94
80006564:	30 32       	mov	r2,3
80006566:	64 20       	ld.w	r0,r2[0x8]
80006568:	20 20       	sub	r0,2
8000656a:	20 20       	sub	r0,2
8000656c:	20 20       	sub	r0,2
8000656e:	20 25       	sub	r5,2
80006570:	30 31       	mov	r1,3
80006572:	64 25       	ld.w	r5,r2[0x8]
80006574:	30 31       	mov	r1,3
80006576:	64 25       	ld.w	r5,r2[0x8]
80006578:	30 31       	mov	r1,3
8000657a:	64 25       	ld.w	r5,r2[0x8]
8000657c:	30 31       	mov	r1,3
8000657e:	64 3a       	ld.w	r10,r2[0xc]
80006580:	25 30       	sub	r0,83
80006582:	32 64       	mov	r4,38
80006584:	0d 0a       	ld.w	r10,r6++
80006586:	00 00       	add	r0,r0
80006588:	0d 0a       	ld.w	r10,r6++
8000658a:	0d 00       	ld.w	r0,r6++
8000658c:	0d 0a       	ld.w	r10,r6++
8000658e:	53 45       	stdsp	sp[0xd0],r5
80006590:	41 4c       	lddsp	r12,sp[0x50]
80006592:	20 53       	sub	r3,5
80006594:	48 49       	lddpc	r9,800065a4 <led_shelf+0x2ac>
80006596:	45 4c       	lddsp	r12,sp[0x150]
80006598:	44 20       	lddsp	r0,sp[0x108]
8000659a:	44 45       	lddsp	r5,sp[0x110]
8000659c:	4d 4f       	lddpc	pc,800066ec <osc_enable+0x10>
8000659e:	0d 0a       	ld.w	r10,r6++
800065a0:	43 6f       	lddsp	pc,sp[0xd8]
800065a2:	70 79       	ld.w	r9,r8[0x1c]
800065a4:	72 69       	ld.w	r9,r9[0x18]
800065a6:	67 68       	ld.w	r8,r3[0x58]
800065a8:	74 20       	ld.w	r0,r10[0x8]
800065aa:	28 63       	sub	r3,-122
800065ac:	29 20       	sub	r0,-110
800065ae:	32 30       	mov	r0,35
800065b0:	31 35       	mov	r5,19
800065b2:	20 54       	sub	r4,5
800065b4:	65 63       	ld.w	r3,r2[0x58]
800065b6:	68 6e       	ld.w	lr,r4[0x18]
800065b8:	69 63       	ld.w	r3,r4[0x58]
800065ba:	61 6c       	ld.w	r12,r0[0x58]
800065bc:	20 53       	sub	r3,5
800065be:	6f 6c       	ld.w	r12,r7[0x58]
800065c0:	75 74       	ld.w	r4,r10[0x5c]
800065c2:	69 6f       	ld.w	pc,r4[0x58]
800065c4:	6e 73       	ld.w	r3,r7[0x1c]
800065c6:	20 47       	sub	r7,4
800065c8:	72 6f       	ld.w	pc,r9[0x18]
800065ca:	75 70       	ld.w	r0,r10[0x5c]
800065cc:	2c 20       	sub	r0,-62
800065ce:	49 6e       	lddpc	lr,80006624 <led_shelf+0x32c>
800065d0:	63 2e       	ld.w	lr,r1[0x48]
800065d2:	0d 0a       	ld.w	r10,r6++
800065d4:	00 00       	add	r0,r0
800065d6:	00 00       	add	r0,r0
800065d8:	44 6f       	lddsp	pc,sp[0x118]
800065da:	6f 72       	ld.w	r2,r7[0x5c]
800065dc:	20 6c       	sub	r12,6
800065de:	61 74       	ld.w	r4,r0[0x5c]
800065e0:	63 68       	ld.w	r8,r1[0x58]
800065e2:	20 64       	sub	r4,6
800065e4:	65 74       	ld.w	r4,r2[0x5c]
800065e6:	65 63       	ld.w	r3,r2[0x58]
800065e8:	74 65       	ld.w	r5,r10[0x18]
800065ea:	64 0d       	ld.w	sp,r2[0x0]
800065ec:	0a 00       	add	r0,r5
800065ee:	00 00       	add	r0,r0
800065f0:	41 63       	lddsp	r3,sp[0x58]
800065f2:	74 69       	ld.w	r9,r10[0x18]
800065f4:	6f 6e       	ld.w	lr,r7[0x58]
800065f6:	20 70       	sub	r0,7
800065f8:	75 73       	ld.w	r3,r10[0x5c]
800065fa:	68 20       	ld.w	r0,r4[0x8]
800065fc:	62 75       	ld.w	r5,r1[0x1c]
800065fe:	74 74       	ld.w	r4,r10[0x1c]
80006600:	6f 6e       	ld.w	lr,r7[0x58]
80006602:	20 70       	sub	r0,7
80006604:	72 65       	ld.w	r5,r9[0x18]
80006606:	73 73       	ld.w	r3,r9[0x5c]
80006608:	20 64       	sub	r4,6
8000660a:	65 74       	ld.w	r4,r2[0x5c]
8000660c:	65 63       	ld.w	r3,r2[0x58]
8000660e:	74 65       	ld.w	r5,r10[0x18]
80006610:	64 0d       	ld.w	sp,r2[0x0]
80006612:	0a 00       	add	r0,r5
80006614:	41 63       	lddsp	r3,sp[0x58]
80006616:	74 69       	ld.w	r9,r10[0x18]
80006618:	6f 6e       	ld.w	lr,r7[0x58]
8000661a:	20 70       	sub	r0,7
8000661c:	75 73       	ld.w	r3,r10[0x5c]
8000661e:	68 20       	ld.w	r0,r4[0x8]
80006620:	62 75       	ld.w	r5,r1[0x1c]
80006622:	74 74       	ld.w	r4,r10[0x1c]
80006624:	6f 6e       	ld.w	lr,r7[0x58]
80006626:	20 72       	sub	r2,7
80006628:	65 6c       	ld.w	r12,r2[0x58]
8000662a:	65 61       	ld.w	r1,r2[0x58]
8000662c:	73 65       	ld.w	r5,r9[0x58]
8000662e:	20 64       	sub	r4,6
80006630:	65 74       	ld.w	r4,r2[0x5c]
80006632:	65 63       	ld.w	r3,r2[0x58]
80006634:	74 65       	ld.w	r5,r10[0x18]
80006636:	64 0d       	ld.w	sp,r2[0x0]
80006638:	0a 00       	add	r0,r5
8000663a:	00 00       	add	r0,r0
8000663c:	53 74       	stdsp	sp[0xdc],r4
8000663e:	61 72       	ld.w	r2,r0[0x5c]
80006640:	74 20       	ld.w	r0,r10[0x8]
80006642:	73 61       	ld.w	r1,r9[0x58]
80006644:	6e 69       	ld.w	r9,r7[0x18]
80006646:	74 69       	ld.w	r9,r10[0x18]
80006648:	7a 69       	ld.w	r9,sp[0x18]
8000664a:	6e 67       	ld.w	r7,r7[0x18]
8000664c:	0d 0a       	ld.w	r10,r6++
8000664e:	00 00       	add	r0,r0
80006650:	4e 6f       	lddpc	pc,800067e8 <osc_get_rate+0x38>
80006652:	20 73       	sub	r3,7
80006654:	68 65       	ld.w	r5,r4[0x18]
80006656:	6c 76       	ld.w	r6,r6[0x1c]
80006658:	65 73       	ld.w	r3,r2[0x5c]
8000665a:	2c 20       	sub	r0,-62
8000665c:	6e 6f       	ld.w	pc,r7[0x18]
8000665e:	20 64       	sub	r4,6
80006660:	65 76       	ld.w	r6,r2[0x5c]
80006662:	69 63       	ld.w	r3,r4[0x58]
80006664:	65 73       	ld.w	r3,r2[0x5c]
80006666:	20 6f       	sub	pc,6
80006668:	72 20       	ld.w	r0,r9[0x8]
8000666a:	73 68       	ld.w	r8,r9[0x58]
8000666c:	65 6c       	ld.w	r12,r2[0x58]
8000666e:	76 65       	ld.w	r5,r11[0x18]
80006670:	73 20       	ld.w	r0,r9[0x48]
80006672:	61 72       	ld.w	r2,r0[0x5c]
80006674:	65 20       	ld.w	r0,r2[0x48]
80006676:	70 61       	ld.w	r1,r8[0x18]
80006678:	73 74       	ld.w	r4,r9[0x5c]
8000667a:	20 6c       	sub	r12,6
8000667c:	69 66       	ld.w	r6,r4[0x58]
8000667e:	65 74       	ld.w	r4,r2[0x5c]
80006680:	69 6d       	ld.w	sp,r4[0x58]
80006682:	65 2c       	ld.w	r12,r2[0x48]
80006684:	20 63       	sub	r3,6
80006686:	68 61       	ld.w	r1,r4[0x18]
80006688:	72 67       	ld.w	r7,r9[0x18]
8000668a:	69 6e       	ld.w	lr,r4[0x58]
8000668c:	67 20       	ld.w	r0,r3[0x48]
8000668e:	64 65       	ld.w	r5,r2[0x18]
80006690:	76 69       	ld.w	r9,r11[0x18]
80006692:	63 65       	ld.w	r5,r1[0x58]
80006694:	73 0d       	ld.w	sp,r9[0x40]
80006696:	0a 00       	add	r0,r5
80006698:	53 68       	stdsp	sp[0xd8],r8
8000669a:	65 6c       	ld.w	r12,r2[0x58]
8000669c:	66 20       	ld.w	r0,r3[0x8]
8000669e:	63 6c       	ld.w	r12,r1[0x58]
800066a0:	65 61       	ld.w	r1,r2[0x58]
800066a2:	6e 0d       	ld.w	sp,r7[0x0]
800066a4:	0a 00       	add	r0,r5
800066a6:	00 00       	add	r0,r0
800066a8:	44 6f       	lddsp	pc,sp[0x118]
800066aa:	6f 72       	ld.w	r2,r7[0x5c]
800066ac:	20 6c       	sub	r12,6
800066ae:	61 74       	ld.w	r4,r0[0x5c]
800066b0:	63 68       	ld.w	r8,r1[0x58]
800066b2:	20 6f       	sub	pc,6
800066b4:	70 65       	ld.w	r5,r8[0x18]
800066b6:	6e 65       	ld.w	r5,r7[0x18]
800066b8:	64 2c       	ld.w	r12,r2[0x8]
800066ba:	20 73       	sub	r3,7
800066bc:	68 75       	ld.w	r5,r4[0x1c]
800066be:	74 74       	ld.w	r4,r10[0x1c]
800066c0:	69 6e       	ld.w	lr,r4[0x58]
800066c2:	67 20       	ld.w	r0,r3[0x48]
800066c4:	64 6f       	ld.w	pc,r2[0x18]
800066c6:	77 6e       	ld.w	lr,r11[0x58]
800066c8:	20 61       	sub	r1,6
800066ca:	6c 6c       	ld.w	r12,r6[0x18]
800066cc:	20 70       	sub	r0,7
800066ce:	72 6f       	ld.w	pc,r9[0x18]
800066d0:	63 65       	ld.w	r5,r1[0x58]
800066d2:	73 73       	ld.w	r3,r9[0x5c]
800066d4:	65 73       	ld.w	r3,r2[0x5c]
800066d6:	0d 0a       	ld.w	r10,r6++
800066d8:	00 00       	add	r0,r0
	...

800066dc <osc_enable>:
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);
extern bool osc_priv_rc120m_is_ready(void);

static inline void osc_enable(uint8_t id)
{
800066dc:	eb cd 40 80 	pushm	r7,lr
800066e0:	1a 97       	mov	r7,sp
800066e2:	20 1d       	sub	sp,4
800066e4:	18 98       	mov	r8,r12
800066e6:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
800066ea:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800066ee:	58 28       	cp.w	r8,2
800066f0:	c1 10       	breq	80006712 <osc_enable+0x36>
800066f2:	e0 89 00 05 	brgt	800066fc <osc_enable+0x20>
800066f6:	58 08       	cp.w	r8,0
800066f8:	c0 70       	breq	80006706 <osc_enable+0x2a>
800066fa:	c1 18       	rjmp	8000671c <osc_enable+0x40>
800066fc:	58 38       	cp.w	r8,3
800066fe:	c0 70       	breq	8000670c <osc_enable+0x30>
80006700:	58 48       	cp.w	r8,4
80006702:	c0 b0       	breq	80006718 <osc_enable+0x3c>
80006704:	c0 c8       	rjmp	8000671c <osc_enable+0x40>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
80006706:	f0 1f 00 08 	mcall	80006724 <osc_enable+0x48>
		break;
8000670a:	c0 98       	rjmp	8000671c <osc_enable+0x40>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
8000670c:	f0 1f 00 07 	mcall	80006728 <osc_enable+0x4c>
		break;
80006710:	c0 68       	rjmp	8000671c <osc_enable+0x40>
#endif

	case OSC_ID_RC8M:
		osc_priv_enable_rc8m();
80006712:	f0 1f 00 07 	mcall	8000672c <osc_enable+0x50>
		break;
80006716:	c0 38       	rjmp	8000671c <osc_enable+0x40>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
80006718:	f0 1f 00 06 	mcall	80006730 <osc_enable+0x54>

	default:
		/* unhandled_case(id); */
		break;
	}
}
8000671c:	2f fd       	sub	sp,-4
8000671e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006722:	00 00       	add	r0,r0
80006724:	80 00       	ld.sh	r0,r0[0x0]
80006726:	59 e0       	cp.w	r0,30
80006728:	80 00       	ld.sh	r0,r0[0x0]
8000672a:	5a 20       	cp.w	r0,-30
8000672c:	80 00       	ld.sh	r0,r0[0x0]
8000672e:	5a 60       	cp.w	r0,-26
80006730:	80 00       	ld.sh	r0,r0[0x0]
80006732:	5a e4       	cp.w	r4,-18

80006734 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
80006734:	eb cd 40 80 	pushm	r7,lr
80006738:	1a 97       	mov	r7,sp
8000673a:	20 1d       	sub	sp,4
8000673c:	18 98       	mov	r8,r12
8000673e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80006742:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006746:	58 38       	cp.w	r8,3
80006748:	c1 50       	breq	80006772 <osc_is_ready+0x3e>
8000674a:	e0 89 00 07 	brgt	80006758 <osc_is_ready+0x24>
8000674e:	58 08       	cp.w	r8,0
80006750:	c0 90       	breq	80006762 <osc_is_ready+0x2e>
80006752:	58 28       	cp.w	r8,2
80006754:	c1 70       	breq	80006782 <osc_is_ready+0x4e>
80006756:	c2 88       	rjmp	800067a6 <osc_is_ready+0x72>
80006758:	58 48       	cp.w	r8,4
8000675a:	c1 c0       	breq	80006792 <osc_is_ready+0x5e>
8000675c:	58 58       	cp.w	r8,5
8000675e:	c2 20       	breq	800067a2 <osc_is_ready+0x6e>
80006760:	c2 38       	rjmp	800067a6 <osc_is_ready+0x72>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
80006762:	fe 78 08 00 	mov	r8,-63488
80006766:	70 58       	ld.w	r8,r8[0x14]
80006768:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000676c:	5f 18       	srne	r8
8000676e:	5c 58       	castu.b	r8
80006770:	c1 c8       	rjmp	800067a8 <osc_is_ready+0x74>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
80006772:	fe 78 08 00 	mov	r8,-63488
80006776:	70 58       	ld.w	r8,r8[0x14]
80006778:	e2 18 00 04 	andl	r8,0x4,COH
8000677c:	5f 18       	srne	r8
8000677e:	5c 58       	castu.b	r8
80006780:	c1 48       	rjmp	800067a8 <osc_is_ready+0x74>
#endif

	case OSC_ID_RC8M:
		return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_RCOSC8MRDY));
80006782:	fe 78 08 00 	mov	r8,-63488
80006786:	70 58       	ld.w	r8,r8[0x14]
80006788:	e2 18 00 08 	andl	r8,0x8,COH
8000678c:	5f 18       	srne	r8
8000678e:	5c 58       	castu.b	r8
80006790:	c0 c8       	rjmp	800067a8 <osc_is_ready+0x74>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
80006792:	fe 78 08 00 	mov	r8,-63488
80006796:	71 68       	ld.w	r8,r8[0x58]
80006798:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000679c:	5f 18       	srne	r8
8000679e:	5c 58       	castu.b	r8
800067a0:	c0 48       	rjmp	800067a8 <osc_is_ready+0x74>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
800067a2:	30 18       	mov	r8,1
800067a4:	c0 28       	rjmp	800067a8 <osc_is_ready+0x74>

	default:
		/* unhandled_case(id); */
		return false;
800067a6:	30 08       	mov	r8,0
	}
}
800067a8:	10 9c       	mov	r12,r8
800067aa:	2f fd       	sub	sp,-4
800067ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800067b0 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
800067b0:	eb cd 40 80 	pushm	r7,lr
800067b4:	1a 97       	mov	r7,sp
800067b6:	20 1d       	sub	sp,4
800067b8:	18 98       	mov	r8,r12
800067ba:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
800067be:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800067c2:	58 38       	cp.w	r8,3
800067c4:	c1 20       	breq	800067e8 <osc_get_rate+0x38>
800067c6:	e0 89 00 07 	brgt	800067d4 <osc_get_rate+0x24>
800067ca:	58 08       	cp.w	r8,0
800067cc:	c0 90       	breq	800067de <osc_get_rate+0x2e>
800067ce:	58 28       	cp.w	r8,2
800067d0:	c0 f0       	breq	800067ee <osc_get_rate+0x3e>
800067d2:	c1 b8       	rjmp	80006808 <osc_get_rate+0x58>
800067d4:	58 48       	cp.w	r8,4
800067d6:	c1 10       	breq	800067f8 <osc_get_rate+0x48>
800067d8:	58 58       	cp.w	r8,5
800067da:	c1 40       	breq	80006802 <osc_get_rate+0x52>
800067dc:	c1 68       	rjmp	80006808 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
800067de:	e0 68 24 00 	mov	r8,9216
800067e2:	ea 18 00 f4 	orh	r8,0xf4
800067e6:	c1 28       	rjmp	8000680a <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
800067e8:	e0 68 80 00 	mov	r8,32768
800067ec:	c0 f8       	rjmp	8000680a <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
800067ee:	e0 68 12 00 	mov	r8,4608
800067f2:	ea 18 00 7a 	orh	r8,0x7a
800067f6:	c0 a8       	rjmp	8000680a <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
800067f8:	e0 68 0e 00 	mov	r8,3584
800067fc:	ea 18 07 27 	orh	r8,0x727
80006800:	c0 58       	rjmp	8000680a <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80006802:	e0 78 c1 38 	mov	r8,115000
80006806:	c0 28       	rjmp	8000680a <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80006808:	30 08       	mov	r8,0
	}
}
8000680a:	10 9c       	mov	r12,r8
8000680c:	2f fd       	sub	sp,-4
8000680e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006812:	d7 03       	nop

80006814 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
80006814:	eb cd 40 80 	pushm	r7,lr
80006818:	1a 97       	mov	r7,sp
8000681a:	20 1d       	sub	sp,4
8000681c:	18 98       	mov	r8,r12
8000681e:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
80006822:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006826:	10 9c       	mov	r12,r8
80006828:	f0 1f 00 05 	mcall	8000683c <osc_wait_ready+0x28>
8000682c:	18 98       	mov	r8,r12
8000682e:	ec 18 00 01 	eorl	r8,0x1
80006832:	5c 58       	castu.b	r8
80006834:	cf 71       	brne	80006822 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
80006836:	2f fd       	sub	sp,-4
80006838:	e3 cd 80 80 	ldm	sp++,r7,pc
8000683c:	80 00       	ld.sh	r0,r0[0x0]
8000683e:	67 34       	ld.w	r4,r3[0x4c]

80006840 <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
80006840:	eb cd 40 80 	pushm	r7,lr
80006844:	1a 97       	mov	r7,sp
80006846:	20 2d       	sub	sp,8
80006848:	ef 4c ff fc 	st.w	r7[-4],r12
8000684c:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
80006850:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006854:	70 09       	ld.w	r9,r8[0x0]
80006856:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000685a:	2f d8       	sub	r8,-3
8000685c:	30 1a       	mov	r10,1
8000685e:	f4 08 09 48 	lsl	r8,r10,r8
80006862:	10 49       	or	r9,r8
80006864:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006868:	91 09       	st.w	r8[0x0],r9
}
8000686a:	2f ed       	sub	sp,-8
8000686c:	e3 cd 80 80 	ldm	sp++,r7,pc

80006870 <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
80006870:	eb cd 40 80 	pushm	r7,lr
80006874:	1a 97       	mov	r7,sp
80006876:	20 5d       	sub	sp,20
80006878:	ef 4c ff f8 	st.w	r7[-8],r12
8000687c:	ef 4b ff f4 	st.w	r7[-12],r11
80006880:	ef 4a ff f0 	st.w	r7[-16],r10
80006884:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
80006888:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000688c:	5c 58       	castu.b	r8
8000688e:	10 9c       	mov	r12,r8
80006890:	f0 1f 00 2e 	mcall	80006948 <pll_config_init+0xd8>
80006894:	18 99       	mov	r9,r12
80006896:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000689a:	f2 08 02 48 	mul	r8,r9,r8
8000689e:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
800068a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800068a6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800068aa:	f0 09 0d 08 	divu	r8,r8,r9
800068ae:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
800068b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800068b6:	30 09       	mov	r9,0
800068b8:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
800068ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800068be:	e0 69 b3 ff 	mov	r9,46079
800068c2:	ea 19 04 c4 	orh	r9,0x4c4
800068c6:	12 38       	cp.w	r8,r9
800068c8:	e0 8b 00 16 	brhi	800068f4 <pll_config_init+0x84>
800068cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800068d0:	58 88       	cp.w	r8,8
800068d2:	e0 8b 00 11 	brhi	800068f4 <pll_config_init+0x84>
		mul *= 2;
800068d6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800068da:	a1 78       	lsl	r8,0x1
800068dc:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
800068e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800068e4:	a1 78       	lsl	r8,0x1
800068e6:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
800068ea:	30 1b       	mov	r11,1
800068ec:	ee fc ff f8 	ld.w	r12,r7[-8]
800068f0:	f0 1f 00 17 	mcall	8000694c <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
800068f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800068f8:	e0 69 fe 7f 	mov	r9,65151
800068fc:	ea 19 0a 21 	orh	r9,0xa21
80006900:	12 38       	cp.w	r8,r9
80006902:	e0 8b 00 07 	brhi	80006910 <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
80006906:	30 0b       	mov	r11,0
80006908:	ee fc ff f8 	ld.w	r12,r7[-8]
8000690c:	f0 1f 00 10 	mcall	8000694c <pll_config_init+0xdc>

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
80006910:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006914:	70 09       	ld.w	r9,r8[0x0]
80006916:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000691a:	20 18       	sub	r8,1
8000691c:	f0 0a 15 10 	lsl	r10,r8,0x10
		| (div << AVR32_SCIF_PLLDIV)
80006920:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006924:	a9 68       	lsl	r8,0x8
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
80006926:	10 4a       	or	r10,r8
		| (src << AVR32_SCIF_PLLOSC);
80006928:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000692c:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8000692e:	f5 e8 10 08 	or	r8,r10,r8
80006932:	f3 e8 10 08 	or	r8,r9,r8
80006936:	10 99       	mov	r9,r8
80006938:	ea 19 3f 00 	orh	r9,0x3f00
8000693c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006940:	91 09       	st.w	r8[0x0],r9
		| (div << AVR32_SCIF_PLLDIV)
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
		| (src << AVR32_SCIF_PLLOSC);
}
80006942:	2f bd       	sub	sp,-20
80006944:	e3 cd 80 80 	ldm	sp++,r7,pc
80006948:	80 00       	ld.sh	r0,r0[0x0]
8000694a:	67 b0       	ld.w	r0,r3[0x6c]
8000694c:	80 00       	ld.sh	r0,r0[0x0]
8000694e:	68 40       	ld.w	r0,r4[0x10]

80006950 <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_enable(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_disable(unsigned int pll_id);

static inline bool pll_is_locked(unsigned int pll_id)
{
80006950:	eb cd 40 80 	pushm	r7,lr
80006954:	1a 97       	mov	r7,sp
80006956:	20 1d       	sub	sp,4
80006958:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
8000695c:	fe 78 08 00 	mov	r8,-63488
80006960:	70 59       	ld.w	r9,r8[0x14]
80006962:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006966:	2f c8       	sub	r8,-4
80006968:	30 1a       	mov	r10,1
8000696a:	f4 08 09 48 	lsl	r8,r10,r8
8000696e:	f3 e8 00 08 	and	r8,r9,r8
80006972:	5f 18       	srne	r8
80006974:	5c 58       	castu.b	r8
}
80006976:	10 9c       	mov	r12,r8
80006978:	2f fd       	sub	sp,-4
8000697a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000697e:	d7 03       	nop

80006980 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
80006980:	eb cd 40 80 	pushm	r7,lr
80006984:	1a 97       	mov	r7,sp
80006986:	20 1d       	sub	sp,4
80006988:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
8000698c:	ee fc ff fc 	ld.w	r12,r7[-4]
80006990:	f0 1f 00 06 	mcall	800069a8 <pll_wait_for_lock+0x28>
80006994:	18 98       	mov	r8,r12
80006996:	ec 18 00 01 	eorl	r8,0x1
8000699a:	5c 58       	castu.b	r8
8000699c:	cf 81       	brne	8000698c <pll_wait_for_lock+0xc>
		/* Do nothing */
	}

	return 0;
8000699e:	30 08       	mov	r8,0
}
800069a0:	10 9c       	mov	r12,r8
800069a2:	2f fd       	sub	sp,-4
800069a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800069a8:	80 00       	ld.sh	r0,r0[0x0]
800069aa:	69 50       	ld.w	r0,r4[0x54]

800069ac <display_text>:
};


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
800069ac:	eb cd 40 80 	pushm	r7,lr
800069b0:	1a 97       	mov	r7,sp
800069b2:	20 2d       	sub	sp,8
800069b4:	18 98       	mov	r8,r12
800069b6:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i = 0; i<7; i++)
800069ba:	30 08       	mov	r8,0
800069bc:	ef 48 ff fc 	st.w	r7[-4],r8
800069c0:	c1 58       	rjmp	800069ea <display_text+0x3e>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
800069c2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800069c6:	48 e8       	lddpc	r8,800069fc <display_text+0x50>
800069c8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800069cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800069d0:	f2 08 00 08 	add	r8,r9,r8
800069d4:	11 88       	ld.ub	r8,r8[0x0]
800069d6:	10 9b       	mov	r11,r8
800069d8:	fc 7c 14 00 	mov	r12,-191488
800069dc:	f0 1f 00 09 	mcall	80006a00 <display_text+0x54>


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
	for (int i = 0; i<7; i++)
800069e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800069e4:	2f f8       	sub	r8,-1
800069e6:	ef 48 ff fc 	st.w	r7[-4],r8
800069ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800069ee:	58 68       	cp.w	r8,6
800069f0:	fe 9a ff e9 	brle	800069c2 <display_text+0x16>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
	}
	
}
800069f4:	2f ed       	sub	sp,-8
800069f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800069fa:	00 00       	add	r0,r0
800069fc:	00 00       	add	r0,r0
800069fe:	00 5c       	eor	r12,r0
80006a00:	80 00       	ld.sh	r0,r0[0x0]
80006a02:	58 94       	cp.w	r4,9

80006a04 <chassis_error>:

void chassis_error(void);
void chassis_error(void)
{
80006a04:	eb cd 40 80 	pushm	r7,lr
80006a08:	1a 97       	mov	r7,sp
	display_text(IDX_ERROR);
80006a0a:	30 4c       	mov	r12,4
80006a0c:	f0 1f 00 02 	mcall	80006a14 <chassis_error+0x10>
	
	while(1); //catastrophic error, just hang TODO: allow technician interface to work here possibly
80006a10:	c0 08       	rjmp	80006a10 <chassis_error+0xc>
80006a12:	00 00       	add	r0,r0
80006a14:	80 00       	ld.sh	r0,r0[0x0]
80006a16:	69 ac       	ld.w	r12,r4[0x68]

80006a18 <init_io>:
	
}

void init_io(void);
void init_io(void)
{
80006a18:	eb cd 40 80 	pushm	r7,lr
80006a1c:	1a 97       	mov	r7,sp
80006a1e:	20 1d       	sub	sp,4
	uint32_t ioFlags;
	
	
	ioFlags = (GPIO_DIR_INPUT);
80006a20:	30 08       	mov	r8,0
80006a22:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DOOR_LATCH, ioFlags);
80006a26:	ee fb ff fc 	ld.w	r11,r7[-4]
80006a2a:	33 ec       	mov	r12,62
80006a2c:	f0 1f 00 2b 	mcall	80006ad8 <init_io+0xc0>

	ioFlags = (GPIO_DIR_INPUT);
80006a30:	30 08       	mov	r8,0
80006a32:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_ACTION_PB, ioFlags);
80006a36:	ee fb ff fc 	ld.w	r11,r7[-4]
80006a3a:	33 fc       	mov	r12,63
80006a3c:	f0 1f 00 27 	mcall	80006ad8 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006a40:	30 38       	mov	r8,3
80006a42:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID0, ioFlags);
80006a46:	ee fb ff fc 	ld.w	r11,r7[-4]
80006a4a:	33 3c       	mov	r12,51
80006a4c:	f0 1f 00 23 	mcall	80006ad8 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006a50:	30 38       	mov	r8,3
80006a52:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID1, ioFlags);
80006a56:	ee fb ff fc 	ld.w	r11,r7[-4]
80006a5a:	33 4c       	mov	r12,52
80006a5c:	f0 1f 00 1f 	mcall	80006ad8 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006a60:	30 38       	mov	r8,3
80006a62:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID2, ioFlags);
80006a66:	ee fb ff fc 	ld.w	r11,r7[-4]
80006a6a:	33 5c       	mov	r12,53
80006a6c:	f0 1f 00 1b 	mcall	80006ad8 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006a70:	30 38       	mov	r8,3
80006a72:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID3, ioFlags);
80006a76:	ee fb ff fc 	ld.w	r11,r7[-4]
80006a7a:	33 6c       	mov	r12,54
80006a7c:	f0 1f 00 17 	mcall	80006ad8 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006a80:	30 38       	mov	r8,3
80006a82:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID4, ioFlags);
80006a86:	ee fb ff fc 	ld.w	r11,r7[-4]
80006a8a:	33 7c       	mov	r12,55
80006a8c:	f0 1f 00 13 	mcall	80006ad8 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
80006a90:	30 18       	mov	r8,1
80006a92:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DEBUG_LED, ioFlags);
80006a96:	ee fb ff fc 	ld.w	r11,r7[-4]
80006a9a:	37 cc       	mov	r12,124
80006a9c:	f0 1f 00 0f 	mcall	80006ad8 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006aa0:	30 38       	mov	r8,3
80006aa2:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_PSUPPLY_ONn, ioFlags);
80006aa6:	ee fb ff fc 	ld.w	r11,r7[-4]
80006aaa:	31 7c       	mov	r12,23
80006aac:	f0 1f 00 0b 	mcall	80006ad8 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006ab0:	30 38       	mov	r8,3
80006ab2:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_LED_OEn, ioFlags);
80006ab6:	ee fb ff fc 	ld.w	r11,r7[-4]
80006aba:	31 6c       	mov	r12,22
80006abc:	f0 1f 00 07 	mcall	80006ad8 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW); //high=1x multiplier, low=4x multiplier 10apr15
80006ac0:	30 18       	mov	r8,1
80006ac2:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_MFP, ioFlags);
80006ac6:	ee fb ff fc 	ld.w	r11,r7[-4]
80006aca:	31 5c       	mov	r12,21
80006acc:	f0 1f 00 03 	mcall	80006ad8 <init_io+0xc0>

}
80006ad0:	2f fd       	sub	sp,-4
80006ad2:	e3 cd 80 80 	ldm	sp++,r7,pc
80006ad6:	00 00       	add	r0,r0
80006ad8:	80 00       	ld.sh	r0,r0[0x0]
80006ada:	48 28       	lddpc	r8,80006ae0 <read_led_board_serial_ids+0x4>

80006adc <read_led_board_serial_ids>:
};

/* One serial ID chip per board */
void read_led_board_serial_ids(void);
void read_led_board_serial_ids(void)
{
80006adc:	eb cd 40 e0 	pushm	r5-r7,lr
80006ae0:	1a 97       	mov	r7,sp
80006ae2:	20 3d       	sub	sp,12
	/*
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
80006ae4:	30 1c       	mov	r12,1
80006ae6:	f0 1f 00 96 	mcall	80006d3c <read_led_board_serial_ids+0x260>
	
	ledBrd[0].present = !OWTouchReset(0);
80006aea:	30 0c       	mov	r12,0
80006aec:	f0 1f 00 95 	mcall	80006d40 <read_led_board_serial_ids+0x264>
80006af0:	18 98       	mov	r8,r12
80006af2:	58 08       	cp.w	r8,0
80006af4:	5f 08       	sreq	r8
80006af6:	fe f9 02 4e 	ld.w	r9,pc[590]
80006afa:	f3 68 00 08 	st.b	r9[8],r8
	ledBrd[1].present = !OWTouchReset(1);
80006afe:	30 1c       	mov	r12,1
80006b00:	f0 1f 00 90 	mcall	80006d40 <read_led_board_serial_ids+0x264>
80006b04:	18 98       	mov	r8,r12
80006b06:	58 08       	cp.w	r8,0
80006b08:	5f 08       	sreq	r8
80006b0a:	fe f9 02 3a 	ld.w	r9,pc[570]
80006b0e:	f3 68 00 16 	st.b	r9[22],r8
	ledBrd[2].present = !OWTouchReset(2);
80006b12:	30 2c       	mov	r12,2
80006b14:	f0 1f 00 8b 	mcall	80006d40 <read_led_board_serial_ids+0x264>
80006b18:	18 98       	mov	r8,r12
80006b1a:	58 08       	cp.w	r8,0
80006b1c:	5f 08       	sreq	r8
80006b1e:	fe f9 02 26 	ld.w	r9,pc[550]
80006b22:	f3 68 00 24 	st.b	r9[36],r8
	ledBrd[3].present = !OWTouchReset(3);
80006b26:	30 3c       	mov	r12,3
80006b28:	f0 1f 00 86 	mcall	80006d40 <read_led_board_serial_ids+0x264>
80006b2c:	18 98       	mov	r8,r12
80006b2e:	58 08       	cp.w	r8,0
80006b30:	5f 08       	sreq	r8
80006b32:	fe f9 02 12 	ld.w	r9,pc[530]
80006b36:	f3 68 00 32 	st.b	r9[50],r8
	ledBrd[4].present = !OWTouchReset(4);
80006b3a:	30 4c       	mov	r12,4
80006b3c:	f0 1f 00 81 	mcall	80006d40 <read_led_board_serial_ids+0x264>
80006b40:	18 98       	mov	r8,r12
80006b42:	58 08       	cp.w	r8,0
80006b44:	5f 08       	sreq	r8
80006b46:	fe f9 01 fe 	ld.w	r9,pc[510]
80006b4a:	f3 68 00 40 	st.b	r9[64],r8
	
	if (ledBrd[0].present && ledBrd[1].present)
80006b4e:	4f e8       	lddpc	r8,80006d44 <read_led_board_serial_ids+0x268>
80006b50:	f1 38 00 08 	ld.ub	r8,r8[8]
80006b54:	58 08       	cp.w	r8,0
80006b56:	c0 90       	breq	80006b68 <read_led_board_serial_ids+0x8c>
80006b58:	4f b8       	lddpc	r8,80006d44 <read_led_board_serial_ids+0x268>
80006b5a:	f1 38 00 16 	ld.ub	r8,r8[22]
80006b5e:	58 08       	cp.w	r8,0
80006b60:	c0 40       	breq	80006b68 <read_led_board_serial_ids+0x8c>
	{
		shelf[0].present = 1;
80006b62:	4f a9       	lddpc	r9,80006d48 <read_led_board_serial_ids+0x26c>
80006b64:	30 18       	mov	r8,1
80006b66:	b2 c8       	st.b	r9[0x4],r8
	}
	if (ledBrd[1].present && ledBrd[2].present)
80006b68:	4f 78       	lddpc	r8,80006d44 <read_led_board_serial_ids+0x268>
80006b6a:	f1 38 00 16 	ld.ub	r8,r8[22]
80006b6e:	58 08       	cp.w	r8,0
80006b70:	c0 a0       	breq	80006b84 <read_led_board_serial_ids+0xa8>
80006b72:	4f 58       	lddpc	r8,80006d44 <read_led_board_serial_ids+0x268>
80006b74:	f1 38 00 24 	ld.ub	r8,r8[36]
80006b78:	58 08       	cp.w	r8,0
80006b7a:	c0 50       	breq	80006b84 <read_led_board_serial_ids+0xa8>
	{
		shelf[1].present = 1;
80006b7c:	4f 39       	lddpc	r9,80006d48 <read_led_board_serial_ids+0x26c>
80006b7e:	30 18       	mov	r8,1
80006b80:	f3 68 00 09 	st.b	r9[9],r8
	}
	if (ledBrd[2].present && ledBrd[3].present)
80006b84:	4f 08       	lddpc	r8,80006d44 <read_led_board_serial_ids+0x268>
80006b86:	f1 38 00 24 	ld.ub	r8,r8[36]
80006b8a:	58 08       	cp.w	r8,0
80006b8c:	c0 a0       	breq	80006ba0 <read_led_board_serial_ids+0xc4>
80006b8e:	4e e8       	lddpc	r8,80006d44 <read_led_board_serial_ids+0x268>
80006b90:	f1 38 00 32 	ld.ub	r8,r8[50]
80006b94:	58 08       	cp.w	r8,0
80006b96:	c0 50       	breq	80006ba0 <read_led_board_serial_ids+0xc4>
	{
		shelf[2].present = 1;
80006b98:	4e c9       	lddpc	r9,80006d48 <read_led_board_serial_ids+0x26c>
80006b9a:	30 18       	mov	r8,1
80006b9c:	f3 68 00 0e 	st.b	r9[14],r8
	}
	if (ledBrd[3].present && ledBrd[4].present)
80006ba0:	4e 98       	lddpc	r8,80006d44 <read_led_board_serial_ids+0x268>
80006ba2:	f1 38 00 32 	ld.ub	r8,r8[50]
80006ba6:	58 08       	cp.w	r8,0
80006ba8:	c0 a0       	breq	80006bbc <read_led_board_serial_ids+0xe0>
80006baa:	4e 78       	lddpc	r8,80006d44 <read_led_board_serial_ids+0x268>
80006bac:	f1 38 00 40 	ld.ub	r8,r8[64]
80006bb0:	58 08       	cp.w	r8,0
80006bb2:	c0 50       	breq	80006bbc <read_led_board_serial_ids+0xe0>
	{
		shelf[3].present = 1;
80006bb4:	4e 59       	lddpc	r9,80006d48 <read_led_board_serial_ids+0x26c>
80006bb6:	30 18       	mov	r8,1
80006bb8:	f3 68 00 13 	st.b	r9[19],r8
	}
	

//for (;;) //DEBUG 12may15
//{
	for (int i=0; i<NUM_LED_BOARDS; i++)
80006bbc:	30 08       	mov	r8,0
80006bbe:	ef 48 ff f4 	st.w	r7[-12],r8
80006bc2:	cb 48       	rjmp	80006d2a <read_led_board_serial_ids+0x24e>
	{
		unsigned char acc = 0;
80006bc4:	30 08       	mov	r8,0
80006bc6:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[i].present)
80006bca:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006bce:	4d ea       	lddpc	r10,80006d44 <read_led_board_serial_ids+0x268>
80006bd0:	12 98       	mov	r8,r9
80006bd2:	a3 78       	lsl	r8,0x3
80006bd4:	12 18       	sub	r8,r9
80006bd6:	a1 78       	lsl	r8,0x1
80006bd8:	f4 08 00 08 	add	r8,r10,r8
80006bdc:	2f 88       	sub	r8,-8
80006bde:	11 88       	ld.ub	r8,r8[0x0]
80006be0:	58 08       	cp.w	r8,0
80006be2:	e0 80 00 9f 	breq	80006d20 <read_led_board_serial_ids+0x244>
		{
			OWWriteByte(i, 0x33); //Read ID command
80006be6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006bea:	5c 58       	castu.b	r8
80006bec:	33 3b       	mov	r11,51
80006bee:	10 9c       	mov	r12,r8
80006bf0:	f0 1f 00 57 	mcall	80006d4c <read_led_board_serial_ids+0x270>
			
			ledBrd[i].idFamily = OWReadByte(i);
80006bf4:	ee f6 ff f4 	ld.w	r6,r7[-12]
80006bf8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006bfc:	5c 58       	castu.b	r8
80006bfe:	10 9c       	mov	r12,r8
80006c00:	f0 1f 00 54 	mcall	80006d50 <read_led_board_serial_ids+0x274>
80006c04:	18 98       	mov	r8,r12
80006c06:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006c0a:	4c fa       	lddpc	r10,80006d44 <read_led_board_serial_ids+0x268>
80006c0c:	0c 98       	mov	r8,r6
80006c0e:	a3 78       	lsl	r8,0x3
80006c10:	0c 18       	sub	r8,r6
80006c12:	a1 78       	lsl	r8,0x1
80006c14:	10 0a       	add	r10,r8
80006c16:	12 98       	mov	r8,r9
80006c18:	b4 88       	st.b	r10[0x0],r8
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
80006c1a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006c1e:	4c aa       	lddpc	r10,80006d44 <read_led_board_serial_ids+0x268>
80006c20:	12 98       	mov	r8,r9
80006c22:	a3 78       	lsl	r8,0x3
80006c24:	12 18       	sub	r8,r9
80006c26:	a1 78       	lsl	r8,0x1
80006c28:	f4 08 00 08 	add	r8,r10,r8
80006c2c:	11 88       	ld.ub	r8,r8[0x0]
80006c2e:	10 9b       	mov	r11,r8
80006c30:	30 0c       	mov	r12,0
80006c32:	f0 1f 00 49 	mcall	80006d54 <read_led_board_serial_ids+0x278>
80006c36:	18 98       	mov	r8,r12
80006c38:	ef 68 ff fb 	st.b	r7[-5],r8
			
			for (int j=0; j<6; j++)
80006c3c:	30 08       	mov	r8,0
80006c3e:	ef 48 ff fc 	st.w	r7[-4],r8
80006c42:	c3 78       	rjmp	80006cb0 <read_led_board_serial_ids+0x1d4>
			{
				ledBrd[i].id[j] = OWReadByte(i);
80006c44:	ee f6 ff f4 	ld.w	r6,r7[-12]
80006c48:	ee f5 ff fc 	ld.w	r5,r7[-4]
80006c4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c50:	5c 58       	castu.b	r8
80006c52:	10 9c       	mov	r12,r8
80006c54:	f0 1f 00 3f 	mcall	80006d50 <read_led_board_serial_ids+0x274>
80006c58:	18 98       	mov	r8,r12
80006c5a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006c5e:	4b aa       	lddpc	r10,80006d44 <read_led_board_serial_ids+0x268>
80006c60:	0c 98       	mov	r8,r6
80006c62:	a3 78       	lsl	r8,0x3
80006c64:	0c 18       	sub	r8,r6
80006c66:	a1 78       	lsl	r8,0x1
80006c68:	f4 08 00 08 	add	r8,r10,r8
80006c6c:	0a 08       	add	r8,r5
80006c6e:	f0 ca ff ff 	sub	r10,r8,-1
80006c72:	12 98       	mov	r8,r9
80006c74:	b4 88       	st.b	r10[0x0],r8
				acc = crc8_add(acc, ledBrd[i].id[j]);
80006c76:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006c7a:	ee fa ff fc 	ld.w	r10,r7[-4]
80006c7e:	4b 2b       	lddpc	r11,80006d44 <read_led_board_serial_ids+0x268>
80006c80:	12 98       	mov	r8,r9
80006c82:	a3 78       	lsl	r8,0x3
80006c84:	12 18       	sub	r8,r9
80006c86:	a1 78       	lsl	r8,0x1
80006c88:	f6 08 00 08 	add	r8,r11,r8
80006c8c:	14 08       	add	r8,r10
80006c8e:	2f f8       	sub	r8,-1
80006c90:	11 88       	ld.ub	r8,r8[0x0]
80006c92:	10 99       	mov	r9,r8
80006c94:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006c98:	12 9b       	mov	r11,r9
80006c9a:	10 9c       	mov	r12,r8
80006c9c:	f0 1f 00 2e 	mcall	80006d54 <read_led_board_serial_ids+0x278>
80006ca0:	18 98       	mov	r8,r12
80006ca2:	ef 68 ff fb 	st.b	r7[-5],r8
			
			ledBrd[i].idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
			
			for (int j=0; j<6; j++)
80006ca6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006caa:	2f f8       	sub	r8,-1
80006cac:	ef 48 ff fc 	st.w	r7[-4],r8
80006cb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006cb4:	58 58       	cp.w	r8,5
80006cb6:	fe 9a ff c7 	brle	80006c44 <read_led_board_serial_ids+0x168>
			{
				ledBrd[i].id[j] = OWReadByte(i);
				acc = crc8_add(acc, ledBrd[i].id[j]);
			}
			
			ledBrd[i].idcsum = OWReadByte(i);
80006cba:	ee f6 ff f4 	ld.w	r6,r7[-12]
80006cbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006cc2:	5c 58       	castu.b	r8
80006cc4:	10 9c       	mov	r12,r8
80006cc6:	f0 1f 00 23 	mcall	80006d50 <read_led_board_serial_ids+0x274>
80006cca:	18 98       	mov	r8,r12
80006ccc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006cd0:	49 da       	lddpc	r10,80006d44 <read_led_board_serial_ids+0x268>
80006cd2:	0c 98       	mov	r8,r6
80006cd4:	a3 78       	lsl	r8,0x3
80006cd6:	0c 18       	sub	r8,r6
80006cd8:	a1 78       	lsl	r8,0x1
80006cda:	f4 08 00 08 	add	r8,r10,r8
80006cde:	f0 ca ff f9 	sub	r10,r8,-7
80006ce2:	12 98       	mov	r8,r9
80006ce4:	b4 88       	st.b	r10[0x0],r8
			
			if (acc != ledBrd[i].idcsum)
80006ce6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006cea:	49 7a       	lddpc	r10,80006d44 <read_led_board_serial_ids+0x268>
80006cec:	12 98       	mov	r8,r9
80006cee:	a3 78       	lsl	r8,0x3
80006cf0:	12 18       	sub	r8,r9
80006cf2:	a1 78       	lsl	r8,0x1
80006cf4:	f4 08 00 08 	add	r8,r10,r8
80006cf8:	2f 98       	sub	r8,-7
80006cfa:	11 88       	ld.ub	r8,r8[0x0]
80006cfc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80006d00:	f0 09 18 00 	cp.b	r9,r8
80006d04:	c0 e0       	breq	80006d20 <read_led_board_serial_ids+0x244>
			{
				ledBrd[i].present = 0; //crc8 wasn't valid for this ID chip, don't trust the board
80006d06:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006d0a:	48 fa       	lddpc	r10,80006d44 <read_led_board_serial_ids+0x268>
80006d0c:	12 98       	mov	r8,r9
80006d0e:	a3 78       	lsl	r8,0x3
80006d10:	12 18       	sub	r8,r9
80006d12:	a1 78       	lsl	r8,0x1
80006d14:	f4 08 00 08 	add	r8,r10,r8
80006d18:	f0 c9 ff f8 	sub	r9,r8,-8
80006d1c:	30 08       	mov	r8,0
80006d1e:	b2 88       	st.b	r9[0x0],r8
	}
	

//for (;;) //DEBUG 12may15
//{
	for (int i=0; i<NUM_LED_BOARDS; i++)
80006d20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006d24:	2f f8       	sub	r8,-1
80006d26:	ef 48 ff f4 	st.w	r7[-12],r8
80006d2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006d2e:	58 48       	cp.w	r8,4
80006d30:	fe 9a ff 4a 	brle	80006bc4 <read_led_board_serial_ids+0xe8>
	ledBrd[2].id[2] = 0x67;
	ledBrd[2].id[3] = 0x45;
	ledBrd[2].id[4] = 0x23;
	ledBrd[2].id[5] = 0x01;
#endif
}
80006d34:	2f dd       	sub	sp,-12
80006d36:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006d3a:	00 00       	add	r0,r0
80006d3c:	80 00       	ld.sh	r0,r0[0x0]
80006d3e:	21 74       	sub	r4,23
80006d40:	80 00       	ld.sh	r0,r0[0x0]
80006d42:	22 34       	sub	r4,35
80006d44:	00 00       	add	r0,r0
80006d46:	08 2a       	rsub	r10,r4
80006d48:	00 00       	add	r0,r0
80006d4a:	08 70       	tst	r0,r4
80006d4c:	80 00       	ld.sh	r0,r0[0x0]
80006d4e:	31 04       	mov	r4,16
80006d50:	80 00       	ld.sh	r0,r0[0x0]
80006d52:	31 5c       	mov	r12,21
80006d54:	80 00       	ld.sh	r0,r0[0x0]
80006d56:	31 c0       	mov	r0,28

80006d58 <check_led_brd_side_lifetime>:
};

/* Each side of an LED board will get different usage */
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx);
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx)
{
80006d58:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80006d5c:	1a 97       	mov	r7,sp
80006d5e:	20 4d       	sub	sp,16
80006d60:	18 98       	mov	r8,r12
80006d62:	ef 68 ff f0 	st.b	r7[-16],r8
	 * Find the record for this board's serial ID number, and check the usage hours and see if we
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
80006d66:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80006d6a:	4d fa       	lddpc	r10,80006ee4 <check_led_brd_side_lifetime+0x18c>
80006d6c:	12 98       	mov	r8,r9
80006d6e:	a3 68       	lsl	r8,0x2
80006d70:	12 08       	add	r8,r9
80006d72:	f4 08 00 08 	add	r8,r10,r8
80006d76:	2f f8       	sub	r8,-1
80006d78:	11 88       	ld.ub	r8,r8[0x0]
80006d7a:	ef 68 ff f7 	st.b	r7[-9],r8
	hours = (usageShdw[0].u[idx].hrs_thous * 1000) +
80006d7e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006d82:	4d aa       	lddpc	r10,80006ee8 <check_led_brd_side_lifetime+0x190>
80006d84:	12 98       	mov	r8,r9
80006d86:	a5 68       	lsl	r8,0x4
80006d88:	12 08       	add	r8,r9
80006d8a:	f4 08 00 08 	add	r8,r10,r8
80006d8e:	2f c8       	sub	r8,-4
80006d90:	11 b8       	ld.ub	r8,r8[0x3]
80006d92:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80006d96:	5c 58       	castu.b	r8
80006d98:	10 99       	mov	r9,r8
80006d9a:	e0 68 03 e8 	mov	r8,1000
80006d9e:	f2 08 02 4a 	mul	r10,r9,r8
		(usageShdw[0].u[idx].hrs_huns * 100) +
80006da2:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006da6:	4d 1b       	lddpc	r11,80006ee8 <check_led_brd_side_lifetime+0x190>
80006da8:	12 98       	mov	r8,r9
80006daa:	a5 68       	lsl	r8,0x4
80006dac:	12 08       	add	r8,r9
80006dae:	f6 08 00 08 	add	r8,r11,r8
80006db2:	2f c8       	sub	r8,-4
80006db4:	11 b8       	ld.ub	r8,r8[0x3]
80006db6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006dba:	5c 58       	castu.b	r8
80006dbc:	f0 08 10 64 	mul	r8,r8,100
80006dc0:	10 0a       	add	r10,r8
		(usageShdw[0].u[idx].hrs_tens * 10) +
80006dc2:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006dc6:	4c 9b       	lddpc	r11,80006ee8 <check_led_brd_side_lifetime+0x190>
80006dc8:	12 98       	mov	r8,r9
80006dca:	a5 68       	lsl	r8,0x4
80006dcc:	12 08       	add	r8,r9
80006dce:	f6 08 00 08 	add	r8,r11,r8
80006dd2:	2f 88       	sub	r8,-8
80006dd4:	11 88       	ld.ub	r8,r8[0x0]
80006dd6:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80006dda:	5c 58       	castu.b	r8
80006ddc:	10 99       	mov	r9,r8
80006dde:	12 98       	mov	r8,r9
80006de0:	a3 68       	lsl	r8,0x2
80006de2:	12 08       	add	r8,r9
80006de4:	a1 78       	lsl	r8,0x1
80006de6:	10 0a       	add	r10,r8
		(usageShdw[0].u[idx].hrs_ones);
80006de8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006dec:	4b fb       	lddpc	r11,80006ee8 <check_led_brd_side_lifetime+0x190>
80006dee:	12 98       	mov	r8,r9
80006df0:	a5 68       	lsl	r8,0x4
80006df2:	12 08       	add	r8,r9
80006df4:	f6 08 00 08 	add	r8,r11,r8
80006df8:	2f 88       	sub	r8,-8
80006dfa:	11 88       	ld.ub	r8,r8[0x0]
80006dfc:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006e00:	5c 58       	castu.b	r8
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
	hours = (usageShdw[0].u[idx].hrs_thous * 1000) +
80006e02:	f4 08 00 08 	add	r8,r10,r8
80006e06:	ef 48 ff f8 	st.w	r7[-8],r8
		

/*
 * Since we have to calculate the hours to see if the shelf is valid, finish out the calculations for the sanitizing time also. We'll need it later.
 */
	intensity = ((0.00002 * hours * hours) - (0.0699 * hours) + 92.879);
80006e0a:	ee fc ff f8 	ld.w	r12,r7[-8]
80006e0e:	f0 1f 00 38 	mcall	80006eec <check_led_brd_side_lifetime+0x194>
80006e12:	e0 68 68 f1 	mov	r8,26865
80006e16:	ea 18 88 e3 	orh	r8,0x88e3
80006e1a:	e0 69 f8 b5 	mov	r9,63669
80006e1e:	ea 19 3e f4 	orh	r9,0x3ef4
80006e22:	f0 1f 00 34 	mcall	80006ef0 <check_led_brd_side_lifetime+0x198>
80006e26:	14 98       	mov	r8,r10
80006e28:	16 99       	mov	r9,r11
80006e2a:	10 92       	mov	r2,r8
80006e2c:	12 93       	mov	r3,r9
80006e2e:	ee fc ff f8 	ld.w	r12,r7[-8]
80006e32:	f0 1f 00 2f 	mcall	80006eec <check_led_brd_side_lifetime+0x194>
80006e36:	14 98       	mov	r8,r10
80006e38:	16 99       	mov	r9,r11
80006e3a:	04 9a       	mov	r10,r2
80006e3c:	06 9b       	mov	r11,r3
80006e3e:	f0 1f 00 2d 	mcall	80006ef0 <check_led_brd_side_lifetime+0x198>
80006e42:	14 98       	mov	r8,r10
80006e44:	16 99       	mov	r9,r11
80006e46:	10 92       	mov	r2,r8
80006e48:	12 93       	mov	r3,r9
80006e4a:	ee fc ff f8 	ld.w	r12,r7[-8]
80006e4e:	f0 1f 00 28 	mcall	80006eec <check_led_brd_side_lifetime+0x194>
80006e52:	e0 68 8a db 	mov	r8,35547
80006e56:	ea 18 65 fd 	orh	r8,0x65fd
80006e5a:	e0 69 e4 f7 	mov	r9,58615
80006e5e:	ea 19 bf b1 	orh	r9,0xbfb1
80006e62:	f0 1f 00 24 	mcall	80006ef0 <check_led_brd_side_lifetime+0x198>
80006e66:	14 98       	mov	r8,r10
80006e68:	16 99       	mov	r9,r11
80006e6a:	04 9a       	mov	r10,r2
80006e6c:	06 9b       	mov	r11,r3
80006e6e:	f0 1f 00 22 	mcall	80006ef4 <check_led_brd_side_lifetime+0x19c>
80006e72:	14 98       	mov	r8,r10
80006e74:	16 99       	mov	r9,r11
80006e76:	10 9a       	mov	r10,r8
80006e78:	12 9b       	mov	r11,r9
80006e7a:	e0 68 4b c7 	mov	r8,19399
80006e7e:	ea 18 89 37 	orh	r8,0x8937
80006e82:	e0 69 38 41 	mov	r9,14401
80006e86:	ea 19 40 57 	orh	r9,0x4057
80006e8a:	f0 1f 00 1b 	mcall	80006ef4 <check_led_brd_side_lifetime+0x19c>
80006e8e:	14 98       	mov	r8,r10
80006e90:	16 99       	mov	r9,r11
80006e92:	10 9a       	mov	r10,r8
80006e94:	12 9b       	mov	r11,r9
80006e96:	f0 1f 00 19 	mcall	80006ef8 <check_led_brd_side_lifetime+0x1a0>
80006e9a:	18 98       	mov	r8,r12
80006e9c:	ef 48 ff fc 	st.w	r7[-4],r8
		
	ledBrdSide[sideIdx].sanitizeMinutes = (20 * 100)/intensity; //Shortest sanitize time is 20 minutes. Sanitize time increases as LED intensity drops with usage. Sanitize time is around 49 minutes when usage is at 2000 hours.
80006ea0:	ef 36 ff f0 	ld.ub	r6,r7[-16]
80006ea4:	ee fb ff fc 	ld.w	r11,r7[-4]
80006ea8:	fc 1c 44 fa 	movh	r12,0x44fa
80006eac:	f0 1f 00 14 	mcall	80006efc <check_led_brd_side_lifetime+0x1a4>
80006eb0:	18 98       	mov	r8,r12
80006eb2:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
80006eb6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006eba:	48 ba       	lddpc	r10,80006ee4 <check_led_brd_side_lifetime+0x18c>
80006ebc:	0c 98       	mov	r8,r6
80006ebe:	a3 68       	lsl	r8,0x2
80006ec0:	0c 08       	add	r8,r6
80006ec2:	10 0a       	add	r10,r8
80006ec4:	12 98       	mov	r8,r9
80006ec6:	b4 88       	st.b	r10[0x0],r8
	
	if (hours < 1999)
80006ec8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ecc:	e0 48 07 ce 	cp.w	r8,1998
80006ed0:	e0 8b 00 04 	brhi	80006ed8 <check_led_brd_side_lifetime+0x180>
	{
		return LED_BOARD_SIDE_WITHIN_LIFETIME_LIMIT;
80006ed4:	30 18       	mov	r8,1
80006ed6:	c0 28       	rjmp	80006eda <check_led_brd_side_lifetime+0x182>
	}
	else
	{
		return LED_BOARD_SIDE_PAST_LIFETIME_LIMIT;
80006ed8:	30 08       	mov	r8,0
	}
}
80006eda:	10 9c       	mov	r12,r8
80006edc:	2f cd       	sub	sp,-16
80006ede:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80006ee2:	00 00       	add	r0,r0
80006ee4:	00 00       	add	r0,r0
80006ee6:	15 94       	ld.ub	r4,r10[0x1]
80006ee8:	00 00       	add	r0,r0
80006eea:	08 b8       	st.h	r4++,r8
80006eec:	80 00       	ld.sh	r0,r0[0x0]
80006eee:	ab f0       	*unknown*
80006ef0:	80 00       	ld.sh	r0,r0[0x0]
80006ef2:	a7 6c       	lsl	r12,0x6
80006ef4:	80 00       	ld.sh	r0,r0[0x0]
80006ef6:	aa e0       	st.b	r5[0x6],r0
80006ef8:	80 00       	ld.sh	r0,r0[0x0]
80006efa:	ae 38       	st.h	r7[0x6],r8
80006efc:	80 00       	ld.sh	r0,r0[0x0]
80006efe:	ac d8       	st.b	r6[0x5],r8

80006f00 <check_led_brd_side_lifetimes>:

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
80006f00:	eb cd 40 c0 	pushm	r6-r7,lr
80006f04:	1a 97       	mov	r7,sp
80006f06:	20 2d       	sub	sp,8
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80006f08:	30 08       	mov	r8,0
80006f0a:	ef 48 ff fc 	st.w	r7[-4],r8
80006f0e:	c3 78       	rjmp	80006f7c <check_led_brd_side_lifetimes+0x7c>
	{
		brdIdx = ledBrdSide[i].boardIdx;
80006f10:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006f14:	49 ea       	lddpc	r10,80006f8c <check_led_brd_side_lifetimes+0x8c>
80006f16:	12 98       	mov	r8,r9
80006f18:	a3 68       	lsl	r8,0x2
80006f1a:	12 08       	add	r8,r9
80006f1c:	f4 08 00 08 	add	r8,r10,r8
80006f20:	2f c8       	sub	r8,-4
80006f22:	11 88       	ld.ub	r8,r8[0x0]
80006f24:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[brdIdx].present)
80006f28:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80006f2c:	49 9a       	lddpc	r10,80006f90 <check_led_brd_side_lifetimes+0x90>
80006f2e:	12 98       	mov	r8,r9
80006f30:	a3 78       	lsl	r8,0x3
80006f32:	12 18       	sub	r8,r9
80006f34:	a1 78       	lsl	r8,0x1
80006f36:	f4 08 00 08 	add	r8,r10,r8
80006f3a:	2f 88       	sub	r8,-8
80006f3c:	11 88       	ld.ub	r8,r8[0x0]
80006f3e:	58 08       	cp.w	r8,0
80006f40:	c1 90       	breq	80006f72 <check_led_brd_side_lifetimes+0x72>
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
80006f42:	ee f6 ff fc 	ld.w	r6,r7[-4]
80006f46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006f4a:	5c 58       	castu.b	r8
80006f4c:	10 9c       	mov	r12,r8
80006f4e:	f0 1f 00 12 	mcall	80006f94 <check_led_brd_side_lifetimes+0x94>
80006f52:	18 98       	mov	r8,r12
80006f54:	10 99       	mov	r9,r8
80006f56:	30 08       	mov	r8,0
80006f58:	f0 09 18 00 	cp.b	r9,r8
80006f5c:	5f 09       	sreq	r9
80006f5e:	48 ca       	lddpc	r10,80006f8c <check_led_brd_side_lifetimes+0x8c>
80006f60:	0c 98       	mov	r8,r6
80006f62:	a3 68       	lsl	r8,0x2
80006f64:	0c 08       	add	r8,r6
80006f66:	f4 08 00 08 	add	r8,r10,r8
80006f6a:	f0 ca ff fe 	sub	r10,r8,-2
80006f6e:	12 98       	mov	r8,r9
80006f70:	b4 88       	st.b	r10[0x0],r8
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80006f72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006f76:	2f f8       	sub	r8,-1
80006f78:	ef 48 ff fc 	st.w	r7[-4],r8
80006f7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006f80:	58 78       	cp.w	r8,7
80006f82:	fe 9a ff c7 	brle	80006f10 <check_led_brd_side_lifetimes+0x10>
		if (ledBrd[brdIdx].present)
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
		}	
	}
}
80006f86:	2f ed       	sub	sp,-8
80006f88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006f8c:	00 00       	add	r0,r0
80006f8e:	15 94       	ld.ub	r4,r10[0x1]
80006f90:	00 00       	add	r0,r0
80006f92:	08 2a       	rsub	r10,r4
80006f94:	80 00       	ld.sh	r0,r0[0x0]
80006f96:	6d 58       	ld.w	r8,r6[0x54]

80006f98 <adc_process_task>:

volatile avr32_adcifa_t *adcifa = &AVR32_ADCIFA; // ADCIFA IP registers address

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
80006f98:	eb cd 40 80 	pushm	r7,lr
80006f9c:	1a 97       	mov	r7,sp
80006f9e:	20 1d       	sub	sp,4
80006fa0:	18 98       	mov	r8,r12
80006fa2:	ef 68 ff fc 	st.b	r7[-4],r8
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
80006fa6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);
80006faa:	12 98       	mov	r8,r9
80006fac:	a1 78       	lsl	r8,0x1
80006fae:	f0 09 00 09 	add	r9,r8,r9

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
80006fb2:	49 88       	lddpc	r8,80007010 <adc_process_task+0x78>
80006fb4:	10 09       	add	r9,r8
80006fb6:	49 88       	lddpc	r8,80007014 <adc_process_task+0x7c>
80006fb8:	70 08       	ld.w	r8,r8[0x0]
80006fba:	49 8a       	lddpc	r10,80007018 <adc_process_task+0x80>
80006fbc:	30 0b       	mov	r11,0
80006fbe:	10 9c       	mov	r12,r8
80006fc0:	f0 1f 00 17 	mcall	8000701c <adc_process_task+0x84>
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);

	// Start ADCIFA sequencer 0
	adcifa_start_sequencer(adcifa, 0);
80006fc4:	49 48       	lddpc	r8,80007014 <adc_process_task+0x7c>
80006fc6:	70 08       	ld.w	r8,r8[0x0]
80006fc8:	30 0b       	mov	r11,0
80006fca:	10 9c       	mov	r12,r8
80006fcc:	f0 1f 00 15 	mcall	80007020 <adc_process_task+0x88>
80006fd0:	c0 28       	rjmp	80006fd4 <adc_process_task+0x3c>
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
			return bluesense_buf[shelfIdx];
		}
	}
80006fd2:	d7 03       	nop
	// Get Values from sequencer 0
	while(1)
	{
		//TODO: need a timeout here and error handling in case the ADC gets stuck for some reason
		
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
80006fd4:	49 08       	lddpc	r8,80007014 <adc_process_task+0x7c>
80006fd6:	70 08       	ld.w	r8,r8[0x0]
80006fd8:	49 39       	lddpc	r9,80007024 <adc_process_task+0x8c>
80006fda:	49 0a       	lddpc	r10,80007018 <adc_process_task+0x80>
80006fdc:	30 0b       	mov	r11,0
80006fde:	10 9c       	mov	r12,r8
80006fe0:	f0 1f 00 12 	mcall	80007028 <adc_process_task+0x90>
80006fe4:	18 98       	mov	r8,r12
80006fe6:	10 99       	mov	r9,r8
80006fe8:	30 28       	mov	r8,2
80006fea:	f0 09 18 00 	cp.b	r9,r8
80006fee:	cf 21       	brne	80006fd2 <adc_process_task+0x3a>
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
80006ff0:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80006ff4:	48 c8       	lddpc	r8,80007024 <adc_process_task+0x8c>
80006ff6:	90 08       	ld.sh	r8,r8[0x0]
80006ff8:	48 d9       	lddpc	r9,8000702c <adc_process_task+0x94>
80006ffa:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
			return bluesense_buf[shelfIdx];
80006ffe:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007002:	48 b8       	lddpc	r8,8000702c <adc_process_task+0x94>
80007004:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
		}
	}
}
80007008:	10 9c       	mov	r12,r8
8000700a:	2f fd       	sub	sp,-4
8000700c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007010:	00 00       	add	r0,r0
80007012:	00 9f       	mov	pc,r0
80007014:	00 00       	add	r0,r0
80007016:	00 ac       	st.w	r0++,r12
80007018:	00 00       	add	r0,r0
8000701a:	00 98       	mov	r8,r0
8000701c:	80 00       	ld.sh	r0,r0[0x0]
8000701e:	35 7c       	mov	r12,87
80007020:	80 00       	ld.sh	r0,r0[0x0]
80007022:	3a 8c       	mov	r12,-88
80007024:	00 00       	add	r0,r0
80007026:	08 28       	rsub	r8,r4
80007028:	80 00       	ld.sh	r0,r0[0x0]
8000702a:	3b 18       	mov	r8,-79
8000702c:	00 00       	add	r0,r0
8000702e:	08 20       	rsub	r0,r4

80007030 <check_shelf_for_devices>:
	DEVICES_PRESENT
};

unsigned char check_shelf_for_devices(unsigned char shelfPosition);
unsigned char check_shelf_for_devices(unsigned char shelfPosition)
{
80007030:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80007034:	1a 97       	mov	r7,sp
80007036:	20 dd       	sub	sp,52
80007038:	18 98       	mov	r8,r12
8000703a:	ef 68 ff cc 	st.b	r7[-52],r8
	U16 bluesense;
	
	led_shelf(shelfPosition, LED_ON); //TODO: do we finish this task fast enough to not check the door latch in here? Can't have LEDs on if the door opens
8000703e:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80007042:	30 1b       	mov	r11,1
80007044:	10 9c       	mov	r12,r8
80007046:	f0 1f 00 61 	mcall	800071c8 <check_shelf_for_devices+0x198>
8000704a:	33 28       	mov	r8,50
8000704c:	ef 48 ff e4 	st.w	r7[-28],r8
80007050:	e0 68 12 00 	mov	r8,4608
80007054:	ea 18 00 7a 	orh	r8,0x7a
80007058:	ef 48 ff e0 	st.w	r7[-32],r8
8000705c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007060:	ef 48 ff ec 	st.w	r7[-20],r8
80007064:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007068:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000706c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80007070:	30 01       	mov	r1,0
80007072:	ee f2 ff e8 	ld.w	r2,r7[-24]
80007076:	30 03       	mov	r3,0
80007078:	e2 02 02 4a 	mul	r10,r1,r2
8000707c:	e6 00 02 48 	mul	r8,r3,r0
80007080:	10 0a       	add	r10,r8
80007082:	e0 02 06 48 	mulu.d	r8,r0,r2
80007086:	12 0a       	add	r10,r9
80007088:	14 99       	mov	r9,r10
8000708a:	e0 6a 03 e7 	mov	r10,999
8000708e:	30 0b       	mov	r11,0
80007090:	f0 0a 00 0a 	add	r10,r8,r10
80007094:	f2 0b 00 4b 	adc	r11,r9,r11
80007098:	e0 68 03 e8 	mov	r8,1000
8000709c:	30 09       	mov	r9,0
8000709e:	f0 1f 00 4c 	mcall	800071cc <check_shelf_for_devices+0x19c>
800070a2:	14 98       	mov	r8,r10
800070a4:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800070a6:	ef 48 ff f4 	st.w	r7[-12],r8
800070aa:	ee c8 00 30 	sub	r8,r7,48
800070ae:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800070b2:	e1 b8 00 42 	mfsr	r8,0x108
800070b6:	10 99       	mov	r9,r8
800070b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800070bc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800070be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800070c2:	70 09       	ld.w	r9,r8[0x0]
800070c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800070c8:	10 09       	add	r9,r8
800070ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800070ce:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800070d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800070d4:	30 08       	mov	r8,0
800070d6:	f3 68 00 08 	st.b	r9[8],r8
800070da:	ee c8 00 30 	sub	r8,r7,48
800070de:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800070e2:	e1 b8 00 42 	mfsr	r8,0x108
800070e6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800070ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070ee:	f1 39 00 08 	ld.ub	r9,r8[8]
800070f2:	30 28       	mov	r8,2
800070f4:	f0 09 18 00 	cp.b	r9,r8
800070f8:	c0 31       	brne	800070fe <check_shelf_for_devices+0xce>
    return false;
800070fa:	30 08       	mov	r8,0
800070fc:	c4 38       	rjmp	80007182 <check_shelf_for_devices+0x152>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800070fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007102:	f1 39 00 08 	ld.ub	r9,r8[8]
80007106:	30 18       	mov	r8,1
80007108:	f0 09 18 00 	cp.b	r9,r8
8000710c:	c0 31       	brne	80007112 <check_shelf_for_devices+0xe2>
    return true;
8000710e:	30 18       	mov	r8,1
80007110:	c3 98       	rjmp	80007182 <check_shelf_for_devices+0x152>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007112:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007116:	70 09       	ld.w	r9,r8[0x0]
80007118:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000711c:	70 18       	ld.w	r8,r8[0x4]
8000711e:	10 39       	cp.w	r9,r8
80007120:	e0 88 00 1a 	brls	80007154 <check_shelf_for_devices+0x124>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007124:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007128:	70 08       	ld.w	r8,r8[0x0]
8000712a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000712e:	10 39       	cp.w	r9,r8
80007130:	c1 02       	brcc	80007150 <check_shelf_for_devices+0x120>
80007132:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007136:	70 18       	ld.w	r8,r8[0x4]
80007138:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000713c:	10 39       	cp.w	r9,r8
8000713e:	e0 88 00 09 	brls	80007150 <check_shelf_for_devices+0x120>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80007142:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007146:	30 18       	mov	r8,1
80007148:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000714c:	30 18       	mov	r8,1
8000714e:	c1 a8       	rjmp	80007182 <check_shelf_for_devices+0x152>
    }
    return false;
80007150:	30 08       	mov	r8,0
80007152:	c1 88       	rjmp	80007182 <check_shelf_for_devices+0x152>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007154:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007158:	70 08       	ld.w	r8,r8[0x0]
8000715a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000715e:	10 39       	cp.w	r9,r8
80007160:	c0 93       	brcs	80007172 <check_shelf_for_devices+0x142>
80007162:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007166:	70 18       	ld.w	r8,r8[0x4]
80007168:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000716c:	10 39       	cp.w	r9,r8
8000716e:	e0 88 00 09 	brls	80007180 <check_shelf_for_devices+0x150>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80007172:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007176:	30 18       	mov	r8,1
80007178:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000717c:	30 18       	mov	r8,1
8000717e:	c0 28       	rjmp	80007182 <check_shelf_for_devices+0x152>
    }
    return false;
80007180:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80007182:	58 08       	cp.w	r8,0
80007184:	ca b0       	breq	800070da <check_shelf_for_devices+0xaa>
	
	cpu_delay_ms(50, EC_CPU_CLOCK_FREQ);
		
	//Read bluesense for this shelf
	bluesense = 0;
80007186:	30 08       	mov	r8,0
80007188:	ef 58 ff de 	st.h	r7[-34],r8
	bluesense = adc_process_task(shelfPosition);
8000718c:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80007190:	10 9c       	mov	r12,r8
80007192:	f0 1f 00 10 	mcall	800071d0 <check_shelf_for_devices+0x1a0>
80007196:	18 98       	mov	r8,r12
80007198:	ef 58 ff de 	st.h	r7[-34],r8

	led_shelf(shelfPosition, LED_OFF);
8000719c:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800071a0:	30 0b       	mov	r11,0
800071a2:	10 9c       	mov	r12,r8
800071a4:	f0 1f 00 09 	mcall	800071c8 <check_shelf_for_devices+0x198>
	

	if (bluesense > 0x800)
800071a8:	ef 09 ff de 	ld.sh	r9,r7[-34]
800071ac:	e0 68 08 00 	mov	r8,2048
800071b0:	f0 09 19 00 	cp.h	r9,r8
800071b4:	e0 88 00 04 	brls	800071bc <check_shelf_for_devices+0x18c>
	{
		return DEVICES_PRESENT;
800071b8:	30 18       	mov	r8,1
800071ba:	c0 28       	rjmp	800071be <check_shelf_for_devices+0x18e>
	}
	else
	{
		return NO_DEVICES_PRESENT;
800071bc:	30 08       	mov	r8,0
	}
}
800071be:	10 9c       	mov	r12,r8
800071c0:	2f 3d       	sub	sp,-52
800071c2:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800071c6:	00 00       	add	r0,r0
800071c8:	80 00       	ld.sh	r0,r0[0x0]
800071ca:	62 f8       	ld.w	r8,r1[0x3c]
800071cc:	80 00       	ld.sh	r0,r0[0x0]
800071ce:	ae c2       	st.b	r7[0x4],r2
800071d0:	80 00       	ld.sh	r0,r0[0x0]
800071d2:	6f 98       	ld.w	r8,r7[0x64]

800071d4 <check_shelves_for_devices>:

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
800071d4:	eb cd 40 c0 	pushm	r6-r7,lr
800071d8:	1a 97       	mov	r7,sp
800071da:	20 1d       	sub	sp,4
	for (int i=0; i<NUM_SHELVES; i++)
800071dc:	30 08       	mov	r8,0
800071de:	ef 48 ff fc 	st.w	r7[-4],r8
800071e2:	c2 68       	rjmp	8000722e <check_shelves_for_devices+0x5a>
	{
		if (shelf[i].present)
800071e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800071e8:	49 6a       	lddpc	r10,80007240 <check_shelves_for_devices+0x6c>
800071ea:	12 98       	mov	r8,r9
800071ec:	a3 68       	lsl	r8,0x2
800071ee:	12 08       	add	r8,r9
800071f0:	f4 08 00 08 	add	r8,r10,r8
800071f4:	2f c8       	sub	r8,-4
800071f6:	11 88       	ld.ub	r8,r8[0x0]
800071f8:	58 08       	cp.w	r8,0
800071fa:	c1 50       	breq	80007224 <check_shelves_for_devices+0x50>
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);	
800071fc:	ee f6 ff fc 	ld.w	r6,r7[-4]
80007200:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007204:	5c 58       	castu.b	r8
80007206:	10 9c       	mov	r12,r8
80007208:	f0 1f 00 0f 	mcall	80007244 <check_shelves_for_devices+0x70>
8000720c:	18 98       	mov	r8,r12
8000720e:	10 99       	mov	r9,r8
80007210:	48 ca       	lddpc	r10,80007240 <check_shelves_for_devices+0x6c>
80007212:	0c 98       	mov	r8,r6
80007214:	a3 68       	lsl	r8,0x2
80007216:	0c 08       	add	r8,r6
80007218:	f4 08 00 08 	add	r8,r10,r8
8000721c:	f0 ca ff fd 	sub	r10,r8,-3
80007220:	12 98       	mov	r8,r9
80007222:	b4 88       	st.b	r10[0x0],r8
}

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
	for (int i=0; i<NUM_SHELVES; i++)
80007224:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007228:	2f f8       	sub	r8,-1
8000722a:	ef 48 ff fc 	st.w	r7[-4],r8
8000722e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007232:	58 38       	cp.w	r8,3
80007234:	fe 9a ff d8 	brle	800071e4 <check_shelves_for_devices+0x10>
		if (shelf[i].present)
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);	
		}
	}
}
80007238:	2f fd       	sub	sp,-4
8000723a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000723e:	00 00       	add	r0,r0
80007240:	00 00       	add	r0,r0
80007242:	08 70       	tst	r0,r4
80007244:	80 00       	ld.sh	r0,r0[0x0]
80007246:	70 30       	ld.w	r0,r8[0xc]

80007248 <set_shelves_active_inactive>:

unsigned char topEflag0 = 0, topEflag1 = 0, botEflag0 = 0, botEflag1 = 0;

void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
80007248:	eb cd 40 80 	pushm	r7,lr
8000724c:	1a 97       	mov	r7,sp
8000724e:	20 5d       	sub	sp,20
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
80007250:	30 08       	mov	r8,0
80007252:	ef 68 ff ef 	st.b	r7[-17],r8
	
	for (int i=0; i<NUM_SHELVES; i++)
80007256:	30 08       	mov	r8,0
80007258:	ef 48 ff f0 	st.w	r7[-16],r8
8000725c:	c1 88       	rjmp	8000728c <set_shelves_active_inactive+0x44>
	{
		if (shelf[i].present)
8000725e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007262:	fe fa 02 96 	ld.w	r10,pc[662]
80007266:	12 98       	mov	r8,r9
80007268:	a3 68       	lsl	r8,0x2
8000726a:	12 08       	add	r8,r9
8000726c:	f4 08 00 08 	add	r8,r10,r8
80007270:	2f c8       	sub	r8,-4
80007272:	11 88       	ld.ub	r8,r8[0x0]
80007274:	58 08       	cp.w	r8,0
80007276:	c0 60       	breq	80007282 <set_shelves_active_inactive+0x3a>
		{	
			numShelvesPresent++;
80007278:	ef 38 ff ef 	ld.ub	r8,r7[-17]
8000727c:	2f f8       	sub	r8,-1
8000727e:	ef 68 ff ef 	st.b	r7[-17],r8
void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
	
	for (int i=0; i<NUM_SHELVES; i++)
80007282:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007286:	2f f8       	sub	r8,-1
80007288:	ef 48 ff f0 	st.w	r7[-16],r8
8000728c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007290:	58 38       	cp.w	r8,3
80007292:	fe 9a ff e6 	brle	8000725e <set_shelves_active_inactive+0x16>
		{	
			numShelvesPresent++;
		}
	}
	
	if (numShelvesPresent !=0)
80007296:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000729a:	30 08       	mov	r8,0
8000729c:	f0 09 18 00 	cp.b	r9,r8
800072a0:	e0 80 00 90 	breq	800073c0 <set_shelves_active_inactive+0x178>
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
800072a4:	30 ca       	mov	r10,12
800072a6:	34 3b       	mov	r11,67
800072a8:	30 0c       	mov	r12,0
800072aa:	f0 1f 00 95 	mcall	800074fc <set_shelves_active_inactive+0x2b4>
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
800072ae:	30 ca       	mov	r10,12
800072b0:	34 3b       	mov	r11,67
800072b2:	30 1c       	mov	r12,1
800072b4:	f0 1f 00 92 	mcall	800074fc <set_shelves_active_inactive+0x2b4>

		for (int i=0; i<NUM_SHELVES; i++)
800072b8:	30 08       	mov	r8,0
800072ba:	ef 48 ff f4 	st.w	r7[-12],r8
800072be:	c1 a8       	rjmp	800072f2 <set_shelves_active_inactive+0xaa>
		{
			if (shelf[i].present)
800072c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800072c4:	fe fa 02 34 	ld.w	r10,pc[564]
800072c8:	12 98       	mov	r8,r9
800072ca:	a3 68       	lsl	r8,0x2
800072cc:	12 08       	add	r8,r9
800072ce:	f4 08 00 08 	add	r8,r10,r8
800072d2:	2f c8       	sub	r8,-4
800072d4:	11 88       	ld.ub	r8,r8[0x0]
800072d6:	58 08       	cp.w	r8,0
800072d8:	c0 80       	breq	800072e8 <set_shelves_active_inactive+0xa0>
			{
				led_shelf(i, LED_ON);	
800072da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800072de:	5c 58       	castu.b	r8
800072e0:	30 1b       	mov	r11,1
800072e2:	10 9c       	mov	r12,r8
800072e4:	f0 1f 00 87 	mcall	80007500 <set_shelves_active_inactive+0x2b8>
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);

		for (int i=0; i<NUM_SHELVES; i++)
800072e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800072ec:	2f f8       	sub	r8,-1
800072ee:	ef 48 ff f4 	st.w	r7[-12],r8
800072f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800072f6:	58 38       	cp.w	r8,3
800072f8:	fe 9a ff e4 	brle	800072c0 <set_shelves_active_inactive+0x78>
			{
				led_shelf(i, LED_ON);	
			}
		}

		PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0x40); //starts fault test
800072fc:	34 0a       	mov	r10,64
800072fe:	30 1b       	mov	r11,1
80007300:	30 0c       	mov	r12,0
80007302:	f0 1f 00 7f 	mcall	800074fc <set_shelves_active_inactive+0x2b4>
		PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0x40); //starts fault test
80007306:	34 0a       	mov	r10,64
80007308:	30 1b       	mov	r11,1
8000730a:	30 1c       	mov	r12,1
8000730c:	f0 1f 00 7c 	mcall	800074fc <set_shelves_active_inactive+0x2b4>
80007310:	c0 28       	rjmp	80007314 <set_shelves_active_inactive+0xcc>
				topEflag1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
			
				break; //fault test for LED_TOP strings is complete
			}
		
		}
80007312:	d7 03       	nop
		PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0x40); //starts fault test
		PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0x40); //starts fault test
	
		while (1)
		{
			tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_MODE2);
80007314:	30 1b       	mov	r11,1
80007316:	30 0c       	mov	r12,0
80007318:	f0 1f 00 7b 	mcall	80007504 <set_shelves_active_inactive+0x2bc>
8000731c:	18 98       	mov	r8,r12
8000731e:	ef 68 ff ed 	st.b	r7[-19],r8
		
			if ((tmp1 & 0x40) == 0)
80007322:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007326:	e2 18 00 40 	andl	r8,0x40,COH
8000732a:	cf 41       	brne	80007312 <set_shelves_active_inactive+0xca>
			{
				topEflag0 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);
8000732c:	34 4b       	mov	r11,68
8000732e:	30 0c       	mov	r12,0
80007330:	f0 1f 00 75 	mcall	80007504 <set_shelves_active_inactive+0x2bc>
80007334:	18 98       	mov	r8,r12
80007336:	4f 59       	lddpc	r9,80007508 <set_shelves_active_inactive+0x2c0>
80007338:	b2 88       	st.b	r9[0x0],r8
				topEflag1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
8000733a:	34 5b       	mov	r11,69
8000733c:	30 0c       	mov	r12,0
8000733e:	f0 1f 00 72 	mcall	80007504 <set_shelves_active_inactive+0x2bc>
80007342:	18 98       	mov	r8,r12
80007344:	4f 29       	lddpc	r9,8000750c <set_shelves_active_inactive+0x2c4>
80007346:	b2 88       	st.b	r9[0x0],r8
			
				break; //fault test for LED_TOP strings is complete
80007348:	d7 03       	nop
8000734a:	c0 28       	rjmp	8000734e <set_shelves_active_inactive+0x106>
				botEflag1 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
			
				break; //fault test for LED_BOTTOM strings is complete
			}
		
		}
8000734c:	d7 03       	nop
		
		}
	
		while (1)
		{
			tmp2 = PCA9952_read_reg(LED_BOTTOM, PCA9952_MODE2);
8000734e:	30 1b       	mov	r11,1
80007350:	30 1c       	mov	r12,1
80007352:	f0 1f 00 6d 	mcall	80007504 <set_shelves_active_inactive+0x2bc>
80007356:	18 98       	mov	r8,r12
80007358:	ef 68 ff ee 	st.b	r7[-18],r8
		
			if ((tmp2 & 0x40) == 0)
8000735c:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80007360:	e2 18 00 40 	andl	r8,0x40,COH
80007364:	cf 41       	brne	8000734c <set_shelves_active_inactive+0x104>
			{
				botEflag0 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);
80007366:	34 4b       	mov	r11,68
80007368:	30 1c       	mov	r12,1
8000736a:	f0 1f 00 67 	mcall	80007504 <set_shelves_active_inactive+0x2bc>
8000736e:	18 98       	mov	r8,r12
80007370:	4e 89       	lddpc	r9,80007510 <set_shelves_active_inactive+0x2c8>
80007372:	b2 88       	st.b	r9[0x0],r8
				botEflag1 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
80007374:	34 5b       	mov	r11,69
80007376:	30 1c       	mov	r12,1
80007378:	f0 1f 00 63 	mcall	80007504 <set_shelves_active_inactive+0x2bc>
8000737c:	18 98       	mov	r8,r12
8000737e:	4e 69       	lddpc	r9,80007514 <set_shelves_active_inactive+0x2cc>
80007380:	b2 88       	st.b	r9[0x0],r8
		
		}
		
		//TODO: Deal with the errors from the above tests, topEflag0, topEflag1, botEflag0, botEflag1. Report on the technician interface.
	
		for (int i=0; i<NUM_SHELVES; i++)
80007382:	30 08       	mov	r8,0
80007384:	ef 48 ff f8 	st.w	r7[-8],r8
80007388:	c0 d8       	rjmp	800073a2 <set_shelves_active_inactive+0x15a>
		{
			led_shelf(i, LED_OFF);
8000738a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000738e:	5c 58       	castu.b	r8
80007390:	30 0b       	mov	r11,0
80007392:	10 9c       	mov	r12,r8
80007394:	f0 1f 00 5b 	mcall	80007500 <set_shelves_active_inactive+0x2b8>
		
		}
		
		//TODO: Deal with the errors from the above tests, topEflag0, topEflag1, botEflag0, botEflag1. Report on the technician interface.
	
		for (int i=0; i<NUM_SHELVES; i++)
80007398:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000739c:	2f f8       	sub	r8,-1
8000739e:	ef 48 ff f8 	st.w	r7[-8],r8
800073a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800073a6:	58 38       	cp.w	r8,3
800073a8:	fe 9a ff f1 	brle	8000738a <set_shelves_active_inactive+0x142>
		{
			led_shelf(i, LED_OFF);
		}
		
		//Put driver current back to full power
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT);
800073ac:	36 4a       	mov	r10,100
800073ae:	34 3b       	mov	r11,67
800073b0:	30 0c       	mov	r12,0
800073b2:	f0 1f 00 53 	mcall	800074fc <set_shelves_active_inactive+0x2b4>
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT);
800073b6:	36 4a       	mov	r10,100
800073b8:	34 3b       	mov	r11,67
800073ba:	30 1c       	mov	r12,1
800073bc:	f0 1f 00 50 	mcall	800074fc <set_shelves_active_inactive+0x2b4>

	/*
	 * Continuing the evaluation
	 */
	
	numActiveShelves = 0;
800073c0:	4d 69       	lddpc	r9,80007518 <set_shelves_active_inactive+0x2d0>
800073c2:	30 08       	mov	r8,0
800073c4:	b2 88       	st.b	r9[0x0],r8
	
	for (int i=0; i<NUM_SHELVES; i++)
800073c6:	30 08       	mov	r8,0
800073c8:	ef 48 ff fc 	st.w	r7[-4],r8
800073cc:	c1 08       	rjmp	800073ec <set_shelves_active_inactive+0x1a4>
	{
		shelf[i].active = SHELF_INACTIVE;
800073ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800073d2:	4c aa       	lddpc	r10,800074f8 <set_shelves_active_inactive+0x2b0>
800073d4:	12 98       	mov	r8,r9
800073d6:	a3 68       	lsl	r8,0x2
800073d8:	12 08       	add	r8,r9
800073da:	f4 08 00 09 	add	r9,r10,r8
800073de:	30 08       	mov	r8,0
800073e0:	b2 88       	st.b	r9[0x0],r8
	 * Continuing the evaluation
	 */
	
	numActiveShelves = 0;
	
	for (int i=0; i<NUM_SHELVES; i++)
800073e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800073e6:	2f f8       	sub	r8,-1
800073e8:	ef 48 ff fc 	st.w	r7[-4],r8
800073ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800073f0:	58 38       	cp.w	r8,3
800073f2:	fe 9a ff ee 	brle	800073ce <set_shelves_active_inactive+0x186>
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
800073f6:	4c 18       	lddpc	r8,800074f8 <set_shelves_active_inactive+0x2b0>
800073f8:	11 c8       	ld.ub	r8,r8[0x4]
800073fa:	58 08       	cp.w	r8,0
800073fc:	c1 90       	breq	8000742e <set_shelves_active_inactive+0x1e6>
		shelf[0].devicesPresent && 
800073fe:	4b f8       	lddpc	r8,800074f8 <set_shelves_active_inactive+0x2b0>
80007400:	11 b8       	ld.ub	r8,r8[0x3]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80007402:	58 08       	cp.w	r8,0
80007404:	c1 50       	breq	8000742e <set_shelves_active_inactive+0x1e6>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
80007406:	4c 68       	lddpc	r8,8000751c <set_shelves_active_inactive+0x2d4>
80007408:	11 a8       	ld.ub	r8,r8[0x2]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
8000740a:	58 08       	cp.w	r8,0
8000740c:	c1 11       	brne	8000742e <set_shelves_active_inactive+0x1e6>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
8000740e:	4c 48       	lddpc	r8,8000751c <set_shelves_active_inactive+0x2d4>
80007410:	11 f8       	ld.ub	r8,r8[0x7]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80007412:	58 08       	cp.w	r8,0
80007414:	c0 d1       	brne	8000742e <set_shelves_active_inactive+0x1e6>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
	{
		shelf[0].active = SHELF_ACTIVE;
80007416:	4b 99       	lddpc	r9,800074f8 <set_shelves_active_inactive+0x2b0>
80007418:	30 18       	mov	r8,1
8000741a:	b2 88       	st.b	r9[0x0],r8
		numActiveShelves++;
8000741c:	4b f8       	lddpc	r8,80007518 <set_shelves_active_inactive+0x2d0>
8000741e:	11 88       	ld.ub	r8,r8[0x0]
80007420:	2f f8       	sub	r8,-1
80007422:	5c 58       	castu.b	r8
80007424:	4b d9       	lddpc	r9,80007518 <set_shelves_active_inactive+0x2d0>
80007426:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 0 active\r\n");
80007428:	4b ec       	lddpc	r12,80007520 <set_shelves_active_inactive+0x2d8>
8000742a:	f0 1f 00 3f 	mcall	80007524 <set_shelves_active_inactive+0x2dc>
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
8000742e:	4b 38       	lddpc	r8,800074f8 <set_shelves_active_inactive+0x2b0>
80007430:	f1 38 00 09 	ld.ub	r8,r8[9]
80007434:	58 08       	cp.w	r8,0
80007436:	c1 c0       	breq	8000746e <set_shelves_active_inactive+0x226>
	shelf[1].devicesPresent &&
80007438:	4b 08       	lddpc	r8,800074f8 <set_shelves_active_inactive+0x2b0>
8000743a:	f1 38 00 08 	ld.ub	r8,r8[8]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
8000743e:	58 08       	cp.w	r8,0
80007440:	c1 70       	breq	8000746e <set_shelves_active_inactive+0x226>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
80007442:	4b 78       	lddpc	r8,8000751c <set_shelves_active_inactive+0x2d4>
80007444:	f1 38 00 0c 	ld.ub	r8,r8[12]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80007448:	58 08       	cp.w	r8,0
8000744a:	c1 21       	brne	8000746e <set_shelves_active_inactive+0x226>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
8000744c:	4b 48       	lddpc	r8,8000751c <set_shelves_active_inactive+0x2d4>
8000744e:	f1 38 00 11 	ld.ub	r8,r8[17]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80007452:	58 08       	cp.w	r8,0
80007454:	c0 d1       	brne	8000746e <set_shelves_active_inactive+0x226>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
	{
		shelf[1].active = SHELF_ACTIVE;
80007456:	4a 99       	lddpc	r9,800074f8 <set_shelves_active_inactive+0x2b0>
80007458:	30 18       	mov	r8,1
8000745a:	b2 d8       	st.b	r9[0x5],r8
		numActiveShelves++;
8000745c:	4a f8       	lddpc	r8,80007518 <set_shelves_active_inactive+0x2d0>
8000745e:	11 88       	ld.ub	r8,r8[0x0]
80007460:	2f f8       	sub	r8,-1
80007462:	5c 58       	castu.b	r8
80007464:	4a d9       	lddpc	r9,80007518 <set_shelves_active_inactive+0x2d0>
80007466:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 1 active\r\n");
80007468:	4b 0c       	lddpc	r12,80007528 <set_shelves_active_inactive+0x2e0>
8000746a:	f0 1f 00 2f 	mcall	80007524 <set_shelves_active_inactive+0x2dc>
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
8000746e:	4a 38       	lddpc	r8,800074f8 <set_shelves_active_inactive+0x2b0>
80007470:	f1 38 00 0e 	ld.ub	r8,r8[14]
80007474:	58 08       	cp.w	r8,0
80007476:	c1 d0       	breq	800074b0 <set_shelves_active_inactive+0x268>
	shelf[2].devicesPresent &&
80007478:	4a 08       	lddpc	r8,800074f8 <set_shelves_active_inactive+0x2b0>
8000747a:	f1 38 00 0d 	ld.ub	r8,r8[13]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
8000747e:	58 08       	cp.w	r8,0
80007480:	c1 80       	breq	800074b0 <set_shelves_active_inactive+0x268>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
80007482:	4a 78       	lddpc	r8,8000751c <set_shelves_active_inactive+0x2d4>
80007484:	f1 38 00 16 	ld.ub	r8,r8[22]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80007488:	58 08       	cp.w	r8,0
8000748a:	c1 31       	brne	800074b0 <set_shelves_active_inactive+0x268>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
8000748c:	4a 48       	lddpc	r8,8000751c <set_shelves_active_inactive+0x2d4>
8000748e:	f1 38 00 1b 	ld.ub	r8,r8[27]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80007492:	58 08       	cp.w	r8,0
80007494:	c0 e1       	brne	800074b0 <set_shelves_active_inactive+0x268>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
	{
		shelf[2].active = SHELF_ACTIVE;
80007496:	49 99       	lddpc	r9,800074f8 <set_shelves_active_inactive+0x2b0>
80007498:	30 18       	mov	r8,1
8000749a:	f3 68 00 0a 	st.b	r9[10],r8
		numActiveShelves++;
8000749e:	49 f8       	lddpc	r8,80007518 <set_shelves_active_inactive+0x2d0>
800074a0:	11 88       	ld.ub	r8,r8[0x0]
800074a2:	2f f8       	sub	r8,-1
800074a4:	5c 58       	castu.b	r8
800074a6:	49 d9       	lddpc	r9,80007518 <set_shelves_active_inactive+0x2d0>
800074a8:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 2 active\r\n");
800074aa:	4a 1c       	lddpc	r12,8000752c <set_shelves_active_inactive+0x2e4>
800074ac:	f0 1f 00 1e 	mcall	80007524 <set_shelves_active_inactive+0x2dc>
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
800074b0:	49 28       	lddpc	r8,800074f8 <set_shelves_active_inactive+0x2b0>
800074b2:	f1 38 00 13 	ld.ub	r8,r8[19]
800074b6:	58 08       	cp.w	r8,0
800074b8:	c1 d0       	breq	800074f2 <set_shelves_active_inactive+0x2aa>
	shelf[3].devicesPresent &&
800074ba:	49 08       	lddpc	r8,800074f8 <set_shelves_active_inactive+0x2b0>
800074bc:	f1 38 00 12 	ld.ub	r8,r8[18]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
800074c0:	58 08       	cp.w	r8,0
800074c2:	c1 80       	breq	800074f2 <set_shelves_active_inactive+0x2aa>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
800074c4:	49 68       	lddpc	r8,8000751c <set_shelves_active_inactive+0x2d4>
800074c6:	f1 38 00 20 	ld.ub	r8,r8[32]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
800074ca:	58 08       	cp.w	r8,0
800074cc:	c1 31       	brne	800074f2 <set_shelves_active_inactive+0x2aa>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
800074ce:	49 48       	lddpc	r8,8000751c <set_shelves_active_inactive+0x2d4>
800074d0:	f1 38 00 25 	ld.ub	r8,r8[37]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
800074d4:	58 08       	cp.w	r8,0
800074d6:	c0 e1       	brne	800074f2 <set_shelves_active_inactive+0x2aa>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
	{
		shelf[3].active = SHELF_ACTIVE;
800074d8:	48 89       	lddpc	r9,800074f8 <set_shelves_active_inactive+0x2b0>
800074da:	30 18       	mov	r8,1
800074dc:	f3 68 00 0f 	st.b	r9[15],r8
		numActiveShelves++;
800074e0:	48 e8       	lddpc	r8,80007518 <set_shelves_active_inactive+0x2d0>
800074e2:	11 88       	ld.ub	r8,r8[0x0]
800074e4:	2f f8       	sub	r8,-1
800074e6:	5c 58       	castu.b	r8
800074e8:	48 c9       	lddpc	r9,80007518 <set_shelves_active_inactive+0x2d0>
800074ea:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 3 active\r\n");
800074ec:	49 1c       	lddpc	r12,80007530 <set_shelves_active_inactive+0x2e8>
800074ee:	f0 1f 00 0e 	mcall	80007524 <set_shelves_active_inactive+0x2dc>
	}
}
800074f2:	2f bd       	sub	sp,-20
800074f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800074f8:	00 00       	add	r0,r0
800074fa:	08 70       	tst	r0,r4
800074fc:	80 00       	ld.sh	r0,r0[0x0]
800074fe:	5e 38       	retlo	r8
80007500:	80 00       	ld.sh	r0,r0[0x0]
80007502:	62 f8       	ld.w	r8,r1[0x3c]
80007504:	80 00       	ld.sh	r0,r0[0x0]
80007506:	5e bc       	rethi	r12
80007508:	00 00       	add	r0,r0
8000750a:	07 b0       	ld.ub	r0,r3[0x3]
8000750c:	00 00       	add	r0,r0
8000750e:	07 b1       	ld.ub	r1,r3[0x3]
80007510:	00 00       	add	r0,r0
80007512:	07 b2       	ld.ub	r2,r3[0x3]
80007514:	00 00       	add	r0,r0
80007516:	07 b3       	ld.ub	r3,r3[0x3]
80007518:	00 00       	add	r0,r0
8000751a:	15 bd       	ld.ub	sp,r10[0x3]
8000751c:	00 00       	add	r0,r0
8000751e:	15 94       	ld.ub	r4,r10[0x1]
80007520:	80 00       	ld.sh	r0,r0[0x0]
80007522:	64 50       	ld.w	r0,r2[0x14]
80007524:	80 00       	ld.sh	r0,r0[0x0]
80007526:	33 38       	mov	r8,51
80007528:	80 00       	ld.sh	r0,r0[0x0]
8000752a:	64 64       	ld.w	r4,r2[0x18]
8000752c:	80 00       	ld.sh	r0,r0[0x0]
8000752e:	64 78       	ld.w	r8,r2[0x1c]
80007530:	80 00       	ld.sh	r0,r0[0x0]
80007532:	64 8c       	ld.w	r12,r2[0x20]

80007534 <num_active_shelves>:

unsigned char num_active_shelves(void);
unsigned char num_active_shelves(void)
{
80007534:	eb cd 40 80 	pushm	r7,lr
80007538:	1a 97       	mov	r7,sp
	return numActiveShelves;
8000753a:	48 38       	lddpc	r8,80007544 <num_active_shelves+0x10>
8000753c:	11 88       	ld.ub	r8,r8[0x0]
}
8000753e:	10 9c       	mov	r12,r8
80007540:	e3 cd 80 80 	ldm	sp++,r7,pc
80007544:	00 00       	add	r0,r0
80007546:	15 bd       	ld.ub	sp,r10[0x3]

80007548 <init_sys_clocks>:
/*
 * Using RC8M (internal 8MHz)
 */
void init_sys_clocks(void);
void init_sys_clocks(void)
{
80007548:	eb cd 40 80 	pushm	r7,lr
8000754c:	1a 97       	mov	r7,sp
8000754e:	20 1d       	sub	sp,4

//this kinda works for 100MHz, problems with TWIM, but maybe we can work around that 17may15
/*
 * From CLOCK_EXAMPLE31 which changes clock sources on the fly. Trying to get a faster clock so that we can work with the serial ID chip (DS2411) which needs control to 6us. 16may15
 */
	osc_enable(OSC_ID_RC8M);
80007550:	30 2c       	mov	r12,2
80007552:	f0 1f 00 10 	mcall	80007590 <init_sys_clocks+0x48>
	pll_config_init(&pcfg, PLL_SRC_RC8M, 1, EC_CPU_CLOCK_100MHZ/OSC_RC8M_NOMINAL_HZ);
80007556:	ee c8 00 04 	sub	r8,r7,4
8000755a:	30 c9       	mov	r9,12
8000755c:	30 1a       	mov	r10,1
8000755e:	30 2b       	mov	r11,2
80007560:	10 9c       	mov	r12,r8
80007562:	f0 1f 00 0d 	mcall	80007594 <init_sys_clocks+0x4c>
	pll_enable(&pcfg, 0);
80007566:	ee c8 00 04 	sub	r8,r7,4
8000756a:	30 0b       	mov	r11,0
8000756c:	10 9c       	mov	r12,r8
8000756e:	f0 1f 00 0b 	mcall	80007598 <init_sys_clocks+0x50>
	sysclk_set_prescalers(1,1,1,1);
80007572:	30 19       	mov	r9,1
80007574:	30 1a       	mov	r10,1
80007576:	30 1b       	mov	r11,1
80007578:	30 1c       	mov	r12,1
8000757a:	f0 1f 00 09 	mcall	8000759c <init_sys_clocks+0x54>
	pll_wait_for_lock(0);
8000757e:	30 0c       	mov	r12,0
80007580:	f0 1f 00 08 	mcall	800075a0 <init_sys_clocks+0x58>
	sysclk_set_source(SYSCLK_SRC_PLL0);	
80007584:	30 3c       	mov	r12,3
80007586:	f0 1f 00 08 	mcall	800075a4 <init_sys_clocks+0x5c>
	/* put the clock out on PC19 so we can check to make sure we set it up correctly */
	//Note this code comes from ASF example AVR32 SCIF example 3
//16may15 seems to cause problems, leave out for now	scif_start_gclk(AVR32_SCIF_GCLK_GCLK0PIN, &gclkOpt);
//16may15 seems to cause problems, leave out for now	gpio_enable_module_pin(AVR32_SCIF_GCLK_0_1_PIN, AVR32_SCIF_GCLK_0_1_FUNCTION);

}
8000758a:	2f fd       	sub	sp,-4
8000758c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007590:	80 00       	ld.sh	r0,r0[0x0]
80007592:	66 dc       	ld.w	r12,r3[0x34]
80007594:	80 00       	ld.sh	r0,r0[0x0]
80007596:	68 70       	ld.w	r0,r4[0x1c]
80007598:	80 00       	ld.sh	r0,r0[0x0]
8000759a:	5b 8c       	cp.w	r12,-8
8000759c:	80 00       	ld.sh	r0,r0[0x0]
8000759e:	5c 9c       	brev	r12
800075a0:	80 00       	ld.sh	r0,r0[0x0]
800075a2:	69 80       	ld.w	r0,r4[0x60]
800075a4:	80 00       	ld.sh	r0,r0[0x0]
800075a6:	5d 9c       	*unknown*

800075a8 <adc_process_init>:
 *
 *
 */
void adc_process_init(void);
void adc_process_init(void)
{
800075a8:	eb cd 40 80 	pushm	r7,lr
800075ac:	1a 97       	mov	r7,sp
		{INPUT3_ADC_PIN, INPUT3_ADC_FUNCTION},
		{INPUT4_ADC_PIN, INPUT4_ADC_FUNCTION}
	};

	// Assign and enable GPIO pins to the ADC function.
	gpio_enable_module(ADCIFA_GPIO_MAP,
800075ae:	30 6b       	mov	r11,6
800075b0:	48 bc       	lddpc	r12,800075dc <adc_process_init+0x34>
800075b2:	f0 1f 00 0c 	mcall	800075e0 <adc_process_init+0x38>
			sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));

	// Get ADCIFA Factory Configuration
	adcifa_get_calibration_data(adcifa, &adc_config_t);
800075b6:	48 c8       	lddpc	r8,800075e4 <adc_process_init+0x3c>
800075b8:	70 08       	ld.w	r8,r8[0x0]
800075ba:	48 cb       	lddpc	r11,800075e8 <adc_process_init+0x40>
800075bc:	10 9c       	mov	r12,r8
800075be:	f0 1f 00 0c 	mcall	800075ec <adc_process_init+0x44>

	// Configure ADCIFA core
	adcifa_configure(adcifa, &adc_config_t, EC_CPU_CLOCK_FREQ);
800075c2:	48 98       	lddpc	r8,800075e4 <adc_process_init+0x3c>
800075c4:	70 08       	ld.w	r8,r8[0x0]
800075c6:	e0 6a 12 00 	mov	r10,4608
800075ca:	ea 1a 00 7a 	orh	r10,0x7a
800075ce:	48 7b       	lddpc	r11,800075e8 <adc_process_init+0x40>
800075d0:	10 9c       	mov	r12,r8
800075d2:	f0 1f 00 08 	mcall	800075f0 <adc_process_init+0x48>

}
800075d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800075da:	00 00       	add	r0,r0
800075dc:	80 01       	ld.sh	r1,r0[0x0]
800075de:	0c 20       	rsub	r0,r6
800075e0:	80 00       	ld.sh	r0,r0[0x0]
800075e2:	45 3c       	lddsp	r12,sp[0x14c]
800075e4:	00 00       	add	r0,r0
800075e6:	00 ac       	st.w	r0++,r12
800075e8:	00 00       	add	r0,r0
800075ea:	00 84       	andn	r4,r0
800075ec:	80 00       	ld.sh	r0,r0[0x0]
800075ee:	33 84       	mov	r4,56
800075f0:	80 00       	ld.sh	r0,r0[0x0]
800075f2:	34 18       	mov	r8,65

800075f4 <twi_init>:
 *
 *
 */
static void twi_init(void);
static void twi_init(void)
{
800075f4:	eb cd 40 80 	pushm	r7,lr
800075f8:	1a 97       	mov	r7,sp
800075fa:	20 8d       	sub	sp,32
	const gpio_map_t PCA9952_TWI_GPIO_MAP = {
		{PCA9952_TWI_SCL_PIN, PCA9952_TWI_SCL_FUNCTION},
		{PCA9952_TWI_SDA_PIN, PCA9952_TWI_SDA_FUNCTION}
	};
800075fc:	49 a9       	lddpc	r9,80007664 <twi_init+0x70>
800075fe:	ee c8 00 10 	sub	r8,r7,16
80007602:	20 08       	sub	r8,0
80007604:	20 09       	sub	r9,0
80007606:	72 0a       	ld.w	r10,r9[0x0]
80007608:	91 0a       	st.w	r8[0x0],r10
8000760a:	72 1a       	ld.w	r10,r9[0x4]
8000760c:	91 1a       	st.w	r8[0x4],r10
8000760e:	72 2a       	ld.w	r10,r9[0x8]
80007610:	91 2a       	st.w	r8[0x8],r10
80007612:	72 39       	ld.w	r9,r9[0xc]
80007614:	91 39       	st.w	r8[0xc],r9
	twi_options_t PCA9952_TWI_OPTIONS = { //7apr15 make this *not* a const so we can change it and rerun twi_master_init() if necessary
		.pba_hz = FPBA_HZ,
		.speed = PCA9952_TWI_MASTER_SPEED,
		.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS, //7apr15
		.smbus        = false,
	};
80007616:	49 59       	lddpc	r9,80007668 <twi_init+0x74>
80007618:	ee c8 00 20 	sub	r8,r7,32
8000761c:	20 08       	sub	r8,0
8000761e:	20 09       	sub	r9,0
80007620:	72 0a       	ld.w	r10,r9[0x0]
80007622:	91 0a       	st.w	r8[0x0],r10
80007624:	72 1a       	ld.w	r10,r9[0x4]
80007626:	91 1a       	st.w	r8[0x4],r10
80007628:	72 2a       	ld.w	r10,r9[0x8]
8000762a:	91 2a       	st.w	r8[0x8],r10
8000762c:	72 39       	ld.w	r9,r9[0xc]
8000762e:	91 39       	st.w	r8[0xc],r9

	// Assign I/Os to TWI.
	gpio_enable_module(PCA9952_TWI_GPIO_MAP,
80007630:	ee c8 00 10 	sub	r8,r7,16
80007634:	30 2b       	mov	r11,2
80007636:	10 9c       	mov	r12,r8
80007638:	f0 1f 00 0d 	mcall	8000766c <twi_init+0x78>
	sizeof(PCA9952_TWI_GPIO_MAP) / sizeof(PCA9952_TWI_GPIO_MAP[0]));
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
8000763c:	ee c8 00 20 	sub	r8,r7,32
80007640:	10 9b       	mov	r11,r8
80007642:	fe 7c 38 00 	mov	r12,-51200
80007646:	f0 1f 00 0b 	mcall	80007670 <twi_init+0x7c>
	
	
	PCA9952_TWI_OPTIONS.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
8000764a:	36 18       	mov	r8,97
8000764c:	ef 48 ff e8 	st.w	r7[-24],r8
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
80007650:	ee c8 00 20 	sub	r8,r7,32
80007654:	10 9b       	mov	r11,r8
80007656:	fe 7c 38 00 	mov	r12,-51200
8000765a:	f0 1f 00 06 	mcall	80007670 <twi_init+0x7c>
	
	
}
8000765e:	2f 8d       	sub	sp,-32
80007660:	e3 cd 80 80 	ldm	sp++,r7,pc
80007664:	80 01       	ld.sh	r1,r0[0x0]
80007666:	0c 00       	add	r0,r6
80007668:	80 01       	ld.sh	r1,r0[0x0]
8000766a:	0c 10       	sub	r0,r6
8000766c:	80 00       	ld.sh	r0,r0[0x0]
8000766e:	45 3c       	lddsp	r12,sp[0x14c]
80007670:	80 00       	ld.sh	r0,r0[0x0]
80007672:	50 00       	stdsp	sp[0x0],r0

80007674 <calc_sanitize_time>:
	STATE_SHUTDOWN_PROCESSES
};

unsigned char calc_sanitize_time(unsigned char shelfIdx);
unsigned char calc_sanitize_time(unsigned char shelfIdx)
{
80007674:	eb cd 40 80 	pushm	r7,lr
80007678:	1a 97       	mov	r7,sp
8000767a:	20 3d       	sub	sp,12
8000767c:	18 98       	mov	r8,r12
8000767e:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char uSideMinutes, lSideMinutes, minutes, boardIdx, sideIdx;
	
	boardIdx = shelf[shelfIdx].tLedIdx;							//top board in the shelf
80007682:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80007686:	4a da       	lddpc	r10,80007738 <calc_sanitize_time+0xc4>
80007688:	12 98       	mov	r8,r9
8000768a:	a3 68       	lsl	r8,0x2
8000768c:	12 08       	add	r8,r9
8000768e:	f4 08 00 08 	add	r8,r10,r8
80007692:	2f f8       	sub	r8,-1
80007694:	11 88       	ld.ub	r8,r8[0x0]
80007696:	ef 68 ff fe 	st.b	r7[-2],r8
	sideIdx = ledBrd[boardIdx].lSideIdx;						//lower side of the top board
8000769a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000769e:	4a 8a       	lddpc	r10,8000773c <calc_sanitize_time+0xc8>
800076a0:	12 98       	mov	r8,r9
800076a2:	a3 78       	lsl	r8,0x3
800076a4:	12 18       	sub	r8,r9
800076a6:	a1 78       	lsl	r8,0x1
800076a8:	f4 08 00 08 	add	r8,r10,r8
800076ac:	2f 58       	sub	r8,-11
800076ae:	11 88       	ld.ub	r8,r8[0x0]
800076b0:	ef 68 ff ff 	st.b	r7[-1],r8
	lSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
800076b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800076b8:	4a 2a       	lddpc	r10,80007740 <calc_sanitize_time+0xcc>
800076ba:	12 98       	mov	r8,r9
800076bc:	a3 68       	lsl	r8,0x2
800076be:	12 08       	add	r8,r9
800076c0:	f4 08 00 08 	add	r8,r10,r8
800076c4:	11 88       	ld.ub	r8,r8[0x0]
800076c6:	ef 68 ff fc 	st.b	r7[-4],r8
	

	boardIdx = shelf[shelfIdx].bLedIdx;							//bottom board in the shelf					
800076ca:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800076ce:	49 ba       	lddpc	r10,80007738 <calc_sanitize_time+0xc4>
800076d0:	12 98       	mov	r8,r9
800076d2:	a3 68       	lsl	r8,0x2
800076d4:	12 08       	add	r8,r9
800076d6:	f4 08 00 08 	add	r8,r10,r8
800076da:	2f e8       	sub	r8,-2
800076dc:	11 88       	ld.ub	r8,r8[0x0]
800076de:	ef 68 ff fe 	st.b	r7[-2],r8
	sideIdx = ledBrd[boardIdx].uSideIdx;						//upper side of the bottom board
800076e2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800076e6:	49 6a       	lddpc	r10,8000773c <calc_sanitize_time+0xc8>
800076e8:	12 98       	mov	r8,r9
800076ea:	a3 78       	lsl	r8,0x3
800076ec:	12 18       	sub	r8,r9
800076ee:	a1 78       	lsl	r8,0x1
800076f0:	f4 08 00 08 	add	r8,r10,r8
800076f4:	2f 68       	sub	r8,-10
800076f6:	11 88       	ld.ub	r8,r8[0x0]
800076f8:	ef 68 ff ff 	st.b	r7[-1],r8
	uSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
800076fc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007700:	49 0a       	lddpc	r10,80007740 <calc_sanitize_time+0xcc>
80007702:	12 98       	mov	r8,r9
80007704:	a3 68       	lsl	r8,0x2
80007706:	12 08       	add	r8,r9
80007708:	f4 08 00 08 	add	r8,r10,r8
8000770c:	11 88       	ld.ub	r8,r8[0x0]
8000770e:	ef 68 ff fb 	st.b	r7[-5],r8

	minutes = (uSideMinutes >= lSideMinutes) ? uSideMinutes : lSideMinutes; //choose the sanitize time for the more worn-out leds
80007712:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007716:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000771a:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8000771e:	f0 0a 18 00 	cp.b	r10,r8
80007722:	f2 08 17 20 	movhs	r8,r9
80007726:	ef 68 ff fd 	st.b	r7[-3],r8
	
	return (minutes);
8000772a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
	
}
8000772e:	10 9c       	mov	r12,r8
80007730:	2f dd       	sub	sp,-12
80007732:	e3 cd 80 80 	ldm	sp++,r7,pc
80007736:	00 00       	add	r0,r0
80007738:	00 00       	add	r0,r0
8000773a:	08 70       	tst	r0,r4
8000773c:	00 00       	add	r0,r0
8000773e:	08 2a       	rsub	r10,r4
80007740:	00 00       	add	r0,r0
80007742:	15 94       	ld.ub	r4,r10[0x1]

80007744 <door_latch_open_kill_all_shelves>:


void door_latch_open_kill_all_shelves(void);
void door_latch_open_kill_all_shelves(void)
{
80007744:	eb cd 40 80 	pushm	r7,lr
80007748:	1a 97       	mov	r7,sp
	led_shelf(0, LED_OFF);
8000774a:	30 0b       	mov	r11,0
8000774c:	30 0c       	mov	r12,0
8000774e:	f0 1f 00 09 	mcall	80007770 <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(1, LED_OFF);
80007752:	30 0b       	mov	r11,0
80007754:	30 1c       	mov	r12,1
80007756:	f0 1f 00 07 	mcall	80007770 <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(2, LED_OFF);
8000775a:	30 0b       	mov	r11,0
8000775c:	30 2c       	mov	r12,2
8000775e:	f0 1f 00 05 	mcall	80007770 <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(3, LED_OFF);
80007762:	30 0b       	mov	r11,0
80007764:	30 3c       	mov	r12,3
80007766:	f0 1f 00 03 	mcall	80007770 <door_latch_open_kill_all_shelves+0x2c>
}
8000776a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000776e:	00 00       	add	r0,r0
80007770:	80 00       	ld.sh	r0,r0[0x0]
80007772:	62 f8       	ld.w	r8,r1[0x3c]

80007774 <minute_count>:
#endif
;


unsigned char minute_count(unsigned char * pMinuteBits)
{
80007774:	eb cd 40 80 	pushm	r7,lr
80007778:	1a 97       	mov	r7,sp
8000777a:	20 4d       	sub	sp,16
8000777c:	ef 4c ff f0 	st.w	r7[-16],r12
	unsigned char tmpMinBits, minuteCount = 0, bit;
80007780:	30 08       	mov	r8,0
80007782:	ef 68 ff f6 	st.b	r7[-10],r8
	
	for (int i=0; i<8; i++)
80007786:	30 08       	mov	r8,0
80007788:	ef 48 ff f8 	st.w	r7[-8],r8
8000778c:	c3 28       	rjmp	800077f0 <minute_count+0x7c>
	{
		tmpMinBits = *(pMinuteBits+i);
8000778e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007792:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007796:	f2 08 00 08 	add	r8,r9,r8
8000779a:	11 88       	ld.ub	r8,r8[0x0]
8000779c:	ef 68 ff f5 	st.b	r7[-11],r8
		bit = 0x80;
800077a0:	38 08       	mov	r8,-128
800077a2:	ef 68 ff f7 	st.b	r7[-9],r8
		for (int j=0; j<8; j++)
800077a6:	30 08       	mov	r8,0
800077a8:	ef 48 ff fc 	st.w	r7[-4],r8
800077ac:	c1 88       	rjmp	800077dc <minute_count+0x68>
		{
			if ((bit & tmpMinBits) == 0)
800077ae:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800077b2:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800077b6:	f3 e8 00 08 	and	r8,r9,r8
800077ba:	5c 58       	castu.b	r8
800077bc:	c0 61       	brne	800077c8 <minute_count+0x54>
			{
				minuteCount++;
800077be:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800077c2:	2f f8       	sub	r8,-1
800077c4:	ef 68 ff f6 	st.b	r7[-10],r8
			}
			
			bit >>= 1;
800077c8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800077cc:	a1 98       	lsr	r8,0x1
800077ce:	ef 68 ff f7 	st.b	r7[-9],r8
	
	for (int i=0; i<8; i++)
	{
		tmpMinBits = *(pMinuteBits+i);
		bit = 0x80;
		for (int j=0; j<8; j++)
800077d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800077d6:	2f f8       	sub	r8,-1
800077d8:	ef 48 ff fc 	st.w	r7[-4],r8
800077dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800077e0:	58 78       	cp.w	r8,7
800077e2:	fe 9a ff e6 	brle	800077ae <minute_count+0x3a>

unsigned char minute_count(unsigned char * pMinuteBits)
{
	unsigned char tmpMinBits, minuteCount = 0, bit;
	
	for (int i=0; i<8; i++)
800077e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800077ea:	2f f8       	sub	r8,-1
800077ec:	ef 48 ff f8 	st.w	r7[-8],r8
800077f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800077f4:	58 78       	cp.w	r8,7
800077f6:	fe 9a ff cc 	brle	8000778e <minute_count+0x1a>
			
			bit >>= 1;
		}
	}
	
	return minuteCount;
800077fa:	ef 38 ff f6 	ld.ub	r8,r7[-10]
}
800077fe:	10 9c       	mov	r12,r8
80007800:	2f cd       	sub	sp,-16
80007802:	e3 cd 80 80 	ldm	sp++,r7,pc

80007806 <inc_minutes>:

unsigned char inc_minutes(unsigned char * pMinuteBits)
{
80007806:	eb cd 40 80 	pushm	r7,lr
8000780a:	1a 97       	mov	r7,sp
8000780c:	20 4d       	sub	sp,16
8000780e:	ef 4c ff f0 	st.w	r7[-16],r12
	unsigned char bit, invBit, tmpMinBits, minCount = 0;
80007812:	30 08       	mov	r8,0
80007814:	ef 68 ff f7 	st.b	r7[-9],r8
	
	for (int i=0; i<8; i++)
80007818:	30 08       	mov	r8,0
8000781a:	ef 48 ff f8 	st.w	r7[-8],r8
8000781e:	c4 e8       	rjmp	800078ba <inc_minutes+0xb4>
	{
		bit = 0x80;
80007820:	38 08       	mov	r8,-128
80007822:	ef 68 ff f4 	st.b	r7[-12],r8
		tmpMinBits = (*(pMinuteBits+i));
80007826:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000782a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000782e:	f2 08 00 08 	add	r8,r9,r8
80007832:	11 88       	ld.ub	r8,r8[0x0]
80007834:	ef 68 ff f6 	st.b	r7[-10],r8
		
		for (int j=0; j<8; j++)
80007838:	30 08       	mov	r8,0
8000783a:	ef 48 ff fc 	st.w	r7[-4],r8
8000783e:	c3 48       	rjmp	800078a6 <inc_minutes+0xa0>
		{
			minCount++;			
80007840:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80007844:	2f f8       	sub	r8,-1
80007846:	ef 68 ff f7 	st.b	r7[-9],r8
			if (bit & tmpMinBits)
8000784a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000784e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80007852:	f3 e8 00 08 	and	r8,r9,r8
80007856:	5c 58       	castu.b	r8
80007858:	c1 d0       	breq	80007892 <inc_minutes+0x8c>
			{
				invBit = (bit ^= 0xFF);
8000785a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000785e:	5c d8       	com	r8
80007860:	ef 68 ff f4 	st.b	r7[-12],r8
80007864:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007868:	ef 68 ff f5 	st.b	r7[-11],r8
				tmpMinBits &= invBit;
8000786c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80007870:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80007874:	f3 e8 00 08 	and	r8,r9,r8
80007878:	ef 68 ff f6 	st.b	r7[-10],r8
				(*(pMinuteBits+i)) = tmpMinBits;
8000787c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007880:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007884:	10 09       	add	r9,r8
80007886:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000788a:	b2 88       	st.b	r9[0x0],r8
				return minCount;
8000788c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80007890:	c1 b8       	rjmp	800078c6 <inc_minutes+0xc0>
			}
			bit >>= 1;
80007892:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007896:	a1 98       	lsr	r8,0x1
80007898:	ef 68 ff f4 	st.b	r7[-12],r8
	for (int i=0; i<8; i++)
	{
		bit = 0x80;
		tmpMinBits = (*(pMinuteBits+i));
		
		for (int j=0; j<8; j++)
8000789c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800078a0:	2f f8       	sub	r8,-1
800078a2:	ef 48 ff fc 	st.w	r7[-4],r8
800078a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800078aa:	58 78       	cp.w	r8,7
800078ac:	fe 9a ff ca 	brle	80007840 <inc_minutes+0x3a>

unsigned char inc_minutes(unsigned char * pMinuteBits)
{
	unsigned char bit, invBit, tmpMinBits, minCount = 0;
	
	for (int i=0; i<8; i++)
800078b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800078b4:	2f f8       	sub	r8,-1
800078b6:	ef 48 ff f8 	st.w	r7[-8],r8
800078ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800078be:	58 78       	cp.w	r8,7
800078c0:	fe 9a ff b0 	brle	80007820 <inc_minutes+0x1a>
			}
			bit >>= 1;
		}
	}
	
	return 0; //we should never get here, but we need this to avoid the warning
800078c4:	30 08       	mov	r8,0
}
800078c6:	10 9c       	mov	r12,r8
800078c8:	2f cd       	sub	sp,-16
800078ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800078ce <reset_minutes>:


void reset_minutes(unsigned char * pMinuteBits)
{
800078ce:	eb cd 40 80 	pushm	r7,lr
800078d2:	1a 97       	mov	r7,sp
800078d4:	20 2d       	sub	sp,8
800078d6:	ef 4c ff f8 	st.w	r7[-8],r12
	for (int i=0; i<8; i++)
800078da:	30 08       	mov	r8,0
800078dc:	ef 48 ff fc 	st.w	r7[-4],r8
800078e0:	c0 d8       	rjmp	800078fa <reset_minutes+0x2c>
	{
		*(pMinuteBits+i) = 0xFF; //Set to all ones: we will flip one bit from 1 to 0 each minute to save from having to erase flash every minute
800078e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800078e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800078ea:	10 09       	add	r9,r8
800078ec:	3f f8       	mov	r8,-1
800078ee:	b2 88       	st.b	r9[0x0],r8
}


void reset_minutes(unsigned char * pMinuteBits)
{
	for (int i=0; i<8; i++)
800078f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800078f4:	2f f8       	sub	r8,-1
800078f6:	ef 48 ff fc 	st.w	r7[-4],r8
800078fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800078fe:	58 78       	cp.w	r8,7
80007900:	fe 9a ff f1 	brle	800078e2 <reset_minutes+0x14>
	{
		*(pMinuteBits+i) = 0xFF; //Set to all ones: we will flip one bit from 1 to 0 each minute to save from having to erase flash every minute
	}	
	
}
80007904:	2f ed       	sub	sp,-8
80007906:	e3 cd 80 80 	ldm	sp++,r7,pc
8000790a:	d7 03       	nop

8000790c <usage_idx>:

#define STRINGS_MATCH 0

unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn);
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn)
{
8000790c:	eb cd 40 80 	pushm	r7,lr
80007910:	1a 97       	mov	r7,sp
80007912:	20 5d       	sub	sp,20
80007914:	18 99       	mov	r9,r12
80007916:	ef 4b ff f0 	st.w	r7[-16],r11
8000791a:	14 98       	mov	r8,r10
8000791c:	ef 69 ff f4 	st.b	r7[-12],r9
80007920:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char tmpBoardId[6];
	
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007924:	30 08       	mov	r8,0
80007926:	ef 68 ff ff 	st.b	r7[-1],r8
8000792a:	cd f8       	rjmp	80007ae8 <usage_idx+0x1dc>
		if ((strncmp((char*)idPtr, (char*)(&usageShdw[sel].u[i].id[0]),6)) && (usageShdw[sel].u[i].top_botn == top_botn) == STRINGS_MATCH)
		{
			return (i); //Found a match!
		}
#endif
		if (usageShdw[sel].u[i].slotFilled)
8000792c:	ef 3b ff f4 	ld.ub	r11,r7[-12]
80007930:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007934:	4f 4a       	lddpc	r10,80007b04 <usage_idx+0x1f8>
80007936:	12 98       	mov	r8,r9
80007938:	a5 68       	lsl	r8,0x4
8000793a:	12 08       	add	r8,r9
8000793c:	e0 69 06 61 	mov	r9,1633
80007940:	f6 09 02 49 	mul	r9,r11,r9
80007944:	12 08       	add	r8,r9
80007946:	f4 08 00 08 	add	r8,r10,r8
8000794a:	2f c8       	sub	r8,-4
8000794c:	11 a8       	ld.ub	r8,r8[0x2]
8000794e:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80007952:	5c 58       	castu.b	r8
80007954:	e0 80 00 c5 	breq	80007ade <usage_idx+0x1d2>
		{
			tmpBoardId[0] = *(idPtr+0);
80007958:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000795c:	11 88       	ld.ub	r8,r8[0x0]
8000795e:	ef 68 ff f8 	st.b	r7[-8],r8
			tmpBoardId[1] = *(idPtr+1);
80007962:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007966:	2f f8       	sub	r8,-1
80007968:	11 88       	ld.ub	r8,r8[0x0]
8000796a:	ef 68 ff f9 	st.b	r7[-7],r8
			tmpBoardId[2] = *(idPtr+2);
8000796e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007972:	2f e8       	sub	r8,-2
80007974:	11 88       	ld.ub	r8,r8[0x0]
80007976:	ef 68 ff fa 	st.b	r7[-6],r8
			tmpBoardId[3] = *(idPtr+3);
8000797a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000797e:	2f d8       	sub	r8,-3
80007980:	11 88       	ld.ub	r8,r8[0x0]
80007982:	ef 68 ff fb 	st.b	r7[-5],r8
			tmpBoardId[4] = *(idPtr+4);
80007986:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000798a:	2f c8       	sub	r8,-4
8000798c:	11 88       	ld.ub	r8,r8[0x0]
8000798e:	ef 68 ff fc 	st.b	r7[-4],r8
			tmpBoardId[5] = *(idPtr+5);
80007992:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007996:	2f b8       	sub	r8,-5
80007998:	11 88       	ld.ub	r8,r8[0x0]
8000799a:	ef 68 ff fd 	st.b	r7[-3],r8
			
		
			if (tmpBoardId[0] == usageShdw[sel].u[i].id[0]) {
8000799e:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800079a2:	ef 3c ff f4 	ld.ub	r12,r7[-12]
800079a6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800079aa:	4d 7b       	lddpc	r11,80007b04 <usage_idx+0x1f8>
800079ac:	12 98       	mov	r8,r9
800079ae:	a5 68       	lsl	r8,0x4
800079b0:	12 08       	add	r8,r9
800079b2:	e0 69 06 61 	mov	r9,1633
800079b6:	f8 09 02 49 	mul	r9,r12,r9
800079ba:	12 08       	add	r8,r9
800079bc:	f6 08 00 08 	add	r8,r11,r8
800079c0:	11 88       	ld.ub	r8,r8[0x0]
800079c2:	f0 0a 18 00 	cp.b	r10,r8
800079c6:	e0 81 00 8c 	brne	80007ade <usage_idx+0x1d2>
				if (tmpBoardId[1] == usageShdw[sel].u[i].id[1]) {
800079ca:	ef 3a ff f9 	ld.ub	r10,r7[-7]
800079ce:	ef 3c ff f4 	ld.ub	r12,r7[-12]
800079d2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800079d6:	4c cb       	lddpc	r11,80007b04 <usage_idx+0x1f8>
800079d8:	12 98       	mov	r8,r9
800079da:	a5 68       	lsl	r8,0x4
800079dc:	12 08       	add	r8,r9
800079de:	e0 69 06 61 	mov	r9,1633
800079e2:	f8 09 02 49 	mul	r9,r12,r9
800079e6:	12 08       	add	r8,r9
800079e8:	f6 08 00 08 	add	r8,r11,r8
800079ec:	2f f8       	sub	r8,-1
800079ee:	11 88       	ld.ub	r8,r8[0x0]
800079f0:	f0 0a 18 00 	cp.b	r10,r8
800079f4:	c7 51       	brne	80007ade <usage_idx+0x1d2>
					if (tmpBoardId[2] == usageShdw[sel].u[i].id[2]) {
800079f6:	ef 3a ff fa 	ld.ub	r10,r7[-6]
800079fa:	ef 3c ff f4 	ld.ub	r12,r7[-12]
800079fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a02:	4c 1b       	lddpc	r11,80007b04 <usage_idx+0x1f8>
80007a04:	12 98       	mov	r8,r9
80007a06:	a5 68       	lsl	r8,0x4
80007a08:	12 08       	add	r8,r9
80007a0a:	e0 69 06 61 	mov	r9,1633
80007a0e:	f8 09 02 49 	mul	r9,r12,r9
80007a12:	12 08       	add	r8,r9
80007a14:	f6 08 00 08 	add	r8,r11,r8
80007a18:	2f e8       	sub	r8,-2
80007a1a:	11 88       	ld.ub	r8,r8[0x0]
80007a1c:	f0 0a 18 00 	cp.b	r10,r8
80007a20:	c5 f1       	brne	80007ade <usage_idx+0x1d2>
						if (tmpBoardId[3] == usageShdw[sel].u[i].id[3]) {
80007a22:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80007a26:	ef 3c ff f4 	ld.ub	r12,r7[-12]
80007a2a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a2e:	4b 6b       	lddpc	r11,80007b04 <usage_idx+0x1f8>
80007a30:	12 98       	mov	r8,r9
80007a32:	a5 68       	lsl	r8,0x4
80007a34:	12 08       	add	r8,r9
80007a36:	e0 69 06 61 	mov	r9,1633
80007a3a:	f8 09 02 49 	mul	r9,r12,r9
80007a3e:	12 08       	add	r8,r9
80007a40:	f6 08 00 08 	add	r8,r11,r8
80007a44:	2f d8       	sub	r8,-3
80007a46:	11 88       	ld.ub	r8,r8[0x0]
80007a48:	f0 0a 18 00 	cp.b	r10,r8
80007a4c:	c4 91       	brne	80007ade <usage_idx+0x1d2>
							if (tmpBoardId[4] == usageShdw[sel].u[i].id[4]) {
80007a4e:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80007a52:	ef 3c ff f4 	ld.ub	r12,r7[-12]
80007a56:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a5a:	4a bb       	lddpc	r11,80007b04 <usage_idx+0x1f8>
80007a5c:	12 98       	mov	r8,r9
80007a5e:	a5 68       	lsl	r8,0x4
80007a60:	12 08       	add	r8,r9
80007a62:	e0 69 06 61 	mov	r9,1633
80007a66:	f8 09 02 49 	mul	r9,r12,r9
80007a6a:	12 08       	add	r8,r9
80007a6c:	f6 08 00 08 	add	r8,r11,r8
80007a70:	2f c8       	sub	r8,-4
80007a72:	11 88       	ld.ub	r8,r8[0x0]
80007a74:	f0 0a 18 00 	cp.b	r10,r8
80007a78:	c3 31       	brne	80007ade <usage_idx+0x1d2>
								if (tmpBoardId[5] == usageShdw[sel].u[i].id[5]) {
80007a7a:	ef 3a ff fd 	ld.ub	r10,r7[-3]
80007a7e:	ef 3c ff f4 	ld.ub	r12,r7[-12]
80007a82:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a86:	4a 0b       	lddpc	r11,80007b04 <usage_idx+0x1f8>
80007a88:	12 98       	mov	r8,r9
80007a8a:	a5 68       	lsl	r8,0x4
80007a8c:	12 08       	add	r8,r9
80007a8e:	e0 69 06 61 	mov	r9,1633
80007a92:	f8 09 02 49 	mul	r9,r12,r9
80007a96:	12 08       	add	r8,r9
80007a98:	f6 08 00 08 	add	r8,r11,r8
80007a9c:	2f b8       	sub	r8,-5
80007a9e:	11 88       	ld.ub	r8,r8[0x0]
80007aa0:	f0 0a 18 00 	cp.b	r10,r8
80007aa4:	c1 d1       	brne	80007ade <usage_idx+0x1d2>
									if (top_botn == usageShdw[sel].u[i].top_botn)
80007aa6:	ef 3b ff f4 	ld.ub	r11,r7[-12]
80007aaa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007aae:	49 6a       	lddpc	r10,80007b04 <usage_idx+0x1f8>
80007ab0:	12 98       	mov	r8,r9
80007ab2:	a5 68       	lsl	r8,0x4
80007ab4:	12 08       	add	r8,r9
80007ab6:	e0 69 06 61 	mov	r9,1633
80007aba:	f6 09 02 49 	mul	r9,r11,r9
80007abe:	12 08       	add	r8,r9
80007ac0:	f4 08 00 08 	add	r8,r10,r8
80007ac4:	2f c8       	sub	r8,-4
80007ac6:	11 a8       	ld.ub	r8,r8[0x2]
80007ac8:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80007acc:	5c 58       	castu.b	r8
80007ace:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80007ad2:	f0 09 18 00 	cp.b	r9,r8
80007ad6:	c0 41       	brne	80007ade <usage_idx+0x1d2>
									{
										return (i); //found a match!
80007ad8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007adc:	c0 f8       	rjmp	80007afa <usage_idx+0x1ee>
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn);
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn)
{
	unsigned char tmpBoardId[6];
	
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007ade:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007ae2:	2f f8       	sub	r8,-1
80007ae4:	ef 68 ff ff 	st.b	r7[-1],r8
80007ae8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007aec:	35 f8       	mov	r8,95
80007aee:	f0 09 18 00 	cp.b	r9,r8
80007af2:	fe 98 ff 1d 	brls	8000792c <usage_idx+0x20>
				} //tmpBoardId[1]
			} //tmpBoardId[0]
		} //if slotFilled (don't check against slots that haven't been assigned
	} //for each slot in usageShdw[sel]
	
	return NO_LED_BOARD_PRESENT; //no match found
80007af6:	e0 68 00 ff 	mov	r8,255
}
80007afa:	10 9c       	mov	r12,r8
80007afc:	2f bd       	sub	sp,-20
80007afe:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b02:	00 00       	add	r0,r0
80007b04:	00 00       	add	r0,r0
80007b06:	08 b8       	st.h	r4++,r8

80007b08 <load_usage_indeces>:

void load_usage_indeces(unsigned char sel)
{
80007b08:	eb cd 40 e0 	pushm	r5-r7,lr
80007b0c:	1a 97       	mov	r7,sp
80007b0e:	20 3d       	sub	sp,12
80007b10:	18 98       	mov	r8,r12
80007b12:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char top_botn, brdIdx;
		
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80007b16:	30 08       	mov	r8,0
80007b18:	ef 48 ff fc 	st.w	r7[-4],r8
80007b1c:	c5 58       	rjmp	80007bc6 <load_usage_indeces+0xbe>
	{
		brdIdx = ledBrdSide[i].boardIdx;
80007b1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007b22:	4a ea       	lddpc	r10,80007bd8 <load_usage_indeces+0xd0>
80007b24:	12 98       	mov	r8,r9
80007b26:	a3 68       	lsl	r8,0x2
80007b28:	12 08       	add	r8,r9
80007b2a:	f4 08 00 08 	add	r8,r10,r8
80007b2e:	2f c8       	sub	r8,-4
80007b30:	11 88       	ld.ub	r8,r8[0x0]
80007b32:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[brdIdx].present)
80007b36:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007b3a:	4a 9a       	lddpc	r10,80007bdc <load_usage_indeces+0xd4>
80007b3c:	12 98       	mov	r8,r9
80007b3e:	a3 78       	lsl	r8,0x3
80007b40:	12 18       	sub	r8,r9
80007b42:	a1 78       	lsl	r8,0x1
80007b44:	f4 08 00 08 	add	r8,r10,r8
80007b48:	2f 88       	sub	r8,-8
80007b4a:	11 88       	ld.ub	r8,r8[0x0]
80007b4c:	58 08       	cp.w	r8,0
80007b4e:	c2 c0       	breq	80007ba6 <load_usage_indeces+0x9e>
		{
			top_botn = i%2;
80007b50:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007b54:	f2 08 14 1f 	asr	r8,r9,0x1f
80007b58:	bf 98       	lsr	r8,0x1f
80007b5a:	10 09       	add	r9,r8
80007b5c:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80007b60:	f2 08 01 08 	sub	r8,r9,r8
80007b64:	ef 68 ff fa 	st.b	r7[-6],r8
			
			usageIdx[sel][i] = usage_idx(sel, &ledBrd[brdIdx].id[0], top_botn); //TODO: should change this nomenclature to upper/lower, we are talking about board sides here, not which board in the shelf, be consistent
80007b68:	ef 35 ff f4 	ld.ub	r5,r7[-12]
80007b6c:	ee f6 ff fc 	ld.w	r6,r7[-4]
80007b70:	ef 3a ff fa 	ld.ub	r10,r7[-6]
80007b74:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007b78:	12 98       	mov	r8,r9
80007b7a:	a3 78       	lsl	r8,0x3
80007b7c:	12 18       	sub	r8,r9
80007b7e:	a1 78       	lsl	r8,0x1
80007b80:	49 79       	lddpc	r9,80007bdc <load_usage_indeces+0xd4>
80007b82:	12 08       	add	r8,r9
80007b84:	f0 c9 ff ff 	sub	r9,r8,-1
80007b88:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007b8c:	12 9b       	mov	r11,r9
80007b8e:	10 9c       	mov	r12,r8
80007b90:	f0 1f 00 14 	mcall	80007be0 <load_usage_indeces+0xd8>
80007b94:	18 98       	mov	r8,r12
80007b96:	49 4a       	lddpc	r10,80007be4 <load_usage_indeces+0xdc>
80007b98:	ea 09 15 03 	lsl	r9,r5,0x3
80007b9c:	0c 09       	add	r9,r6
80007b9e:	f4 09 00 09 	add	r9,r10,r9
80007ba2:	b2 88       	st.b	r9[0x0],r8
80007ba4:	c0 c8       	rjmp	80007bbc <load_usage_indeces+0xb4>
		}
		else
		{
			usageIdx[sel][i] = NO_LED_BOARD_PRESENT;
80007ba6:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007baa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bae:	48 e9       	lddpc	r9,80007be4 <load_usage_indeces+0xdc>
80007bb0:	a3 7a       	lsl	r10,0x3
80007bb2:	f4 08 00 08 	add	r8,r10,r8
80007bb6:	10 09       	add	r9,r8
80007bb8:	3f f8       	mov	r8,-1
80007bba:	b2 88       	st.b	r9[0x0],r8

void load_usage_indeces(unsigned char sel)
{
	unsigned char top_botn, brdIdx;
		
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80007bbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bc0:	2f f8       	sub	r8,-1
80007bc2:	ef 48 ff fc 	st.w	r7[-4],r8
80007bc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bca:	58 78       	cp.w	r8,7
80007bcc:	fe 9a ff a9 	brle	80007b1e <load_usage_indeces+0x16>
		else
		{
			usageIdx[sel][i] = NO_LED_BOARD_PRESENT;
		}
	}
}
80007bd0:	2f dd       	sub	sp,-12
80007bd2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007bd6:	00 00       	add	r0,r0
80007bd8:	00 00       	add	r0,r0
80007bda:	15 94       	ld.ub	r4,r10[0x1]
80007bdc:	00 00       	add	r0,r0
80007bde:	08 2a       	rsub	r10,r4
80007be0:	80 00       	ld.sh	r0,r0[0x0]
80007be2:	79 0c       	ld.w	r12,r12[0x40]
80007be4:	00 00       	add	r0,r0
80007be6:	08 9c       	mov	r12,r4

80007be8 <read_usage_struct>:

enum{CHECKSUM_INVALID, CHECKSUM_VALID};

unsigned char read_usage_struct(unsigned char sel)
{
80007be8:	eb cd 40 80 	pushm	r7,lr
80007bec:	1a 97       	mov	r7,sp
80007bee:	20 2d       	sub	sp,8
80007bf0:	18 98       	mov	r8,r12
80007bf2:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char tmpCsum;
	
	if (sel == 0)
80007bf6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007bfa:	30 08       	mov	r8,0
80007bfc:	f0 09 18 00 	cp.b	r9,r8
80007c00:	c0 81       	brne	80007c10 <read_usage_struct+0x28>
	{
		memcpy(&usageShdw[0],serialIdAndUsageFlashZero, sizeof(usageShdw[0]));
80007c02:	e0 6a 06 61 	mov	r10,1633
80007c06:	49 8b       	lddpc	r11,80007c64 <read_usage_struct+0x7c>
80007c08:	49 8c       	lddpc	r12,80007c68 <read_usage_struct+0x80>
80007c0a:	f0 1f 00 19 	mcall	80007c6c <read_usage_struct+0x84>
80007c0e:	c0 a8       	rjmp	80007c22 <read_usage_struct+0x3a>
	}
	else
	{
		memcpy(&usageShdw[1],serialIdAndUsageFlashOne, sizeof(usageShdw[1]));
80007c10:	49 68       	lddpc	r8,80007c68 <read_usage_struct+0x80>
80007c12:	f0 c8 f9 9f 	sub	r8,r8,-1633
80007c16:	e0 6a 06 61 	mov	r10,1633
80007c1a:	49 6b       	lddpc	r11,80007c70 <read_usage_struct+0x88>
80007c1c:	10 9c       	mov	r12,r8
80007c1e:	f0 1f 00 14 	mcall	80007c6c <read_usage_struct+0x84>
	}
	
	tmpCsum = calc_usage_csum(sel);
80007c22:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007c26:	10 9c       	mov	r12,r8
80007c28:	f0 1f 00 13 	mcall	80007c74 <read_usage_struct+0x8c>
80007c2c:	18 98       	mov	r8,r12
80007c2e:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (tmpCsum == usageShdw[sel].csum)
80007c32:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007c36:	48 d9       	lddpc	r9,80007c68 <read_usage_struct+0x80>
80007c38:	e0 68 06 61 	mov	r8,1633
80007c3c:	f4 08 02 48 	mul	r8,r10,r8
80007c40:	f2 08 00 08 	add	r8,r9,r8
80007c44:	f0 c8 f9 a0 	sub	r8,r8,-1632
80007c48:	11 88       	ld.ub	r8,r8[0x0]
80007c4a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007c4e:	f0 09 18 00 	cp.b	r9,r8
80007c52:	c0 31       	brne	80007c58 <read_usage_struct+0x70>
	{
		return CHECKSUM_VALID;
80007c54:	30 18       	mov	r8,1
80007c56:	c0 28       	rjmp	80007c5a <read_usage_struct+0x72>
	}
	else
	{
		return CHECKSUM_INVALID;
80007c58:	30 08       	mov	r8,0
	}
}
80007c5a:	10 9c       	mov	r12,r8
80007c5c:	2f ed       	sub	sp,-8
80007c5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c62:	00 00       	add	r0,r0
80007c64:	80 07       	ld.sh	r7,r0[0x0]
80007c66:	f0 00 00 00 	add	r0,r8,r0
80007c6a:	08 b8       	st.h	r4++,r8
80007c6c:	80 00       	ld.sh	r0,r0[0x0]
80007c6e:	b1 26       	st.d	r8++,r6
80007c70:	80 07       	ld.sh	r7,r0[0x0]
80007c72:	f8 00       	*unknown*
80007c74:	80 00       	ld.sh	r0,r0[0x0]
80007c76:	7f 4c       	ld.w	r12,pc[0x50]

80007c78 <test_flash>:

enum {SUCCESS, ERROR};

unsigned char test_flash(unsigned char sel)
{
80007c78:	eb cd 40 80 	pushm	r7,lr
80007c7c:	1a 97       	mov	r7,sp
80007c7e:	20 8d       	sub	sp,32
80007c80:	18 98       	mov	r8,r12
80007c82:	ef 68 ff e0 	st.b	r7[-32],r8
	volatile void* memPtr;
	unsigned char pattern[4] = {0xFF, 0x00, 0xAA, 0x55}, ubyte;
80007c86:	4b 28       	lddpc	r8,80007d4c <test_flash+0xd4>
80007c88:	70 08       	ld.w	r8,r8[0x0]
80007c8a:	ef 48 ff e4 	st.w	r7[-28],r8
	unsigned char *ubPtr;
	unsigned long memSize;
	
	memSize = sizeof(usageShdw[sel]);
80007c8e:	e0 68 06 61 	mov	r8,1633
80007c92:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (sel == 0)
80007c96:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80007c9a:	30 08       	mov	r8,0
80007c9c:	f0 09 18 00 	cp.b	r9,r8
80007ca0:	c0 51       	brne	80007caa <test_flash+0x32>
	{
		memPtr = &serialIdAndUsageFlashZero;
80007ca2:	4a c8       	lddpc	r8,80007d50 <test_flash+0xd8>
80007ca4:	ef 48 ff e8 	st.w	r7[-24],r8
80007ca8:	c0 48       	rjmp	80007cb0 <test_flash+0x38>
	}
	else
	{
		memPtr = &serialIdAndUsageFlashOne;
80007caa:	4a b8       	lddpc	r8,80007d54 <test_flash+0xdc>
80007cac:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
80007cb0:	30 08       	mov	r8,0
80007cb2:	ef 68 ff fb 	st.b	r7[-5],r8
80007cb6:	c3 e8       	rjmp	80007d32 <test_flash+0xba>
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
80007cb8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007cbc:	ee 08 00 08 	add	r8,r7,r8
80007cc0:	f1 38 ff e4 	ld.ub	r8,r8[-28]
80007cc4:	30 19       	mov	r9,1
80007cc6:	ee fa ff f4 	ld.w	r10,r7[-12]
80007cca:	10 9b       	mov	r11,r8
80007ccc:	ee fc ff e8 	ld.w	r12,r7[-24]
80007cd0:	f0 1f 00 22 	mcall	80007d58 <test_flash+0xe0>
	
		ubPtr = (unsigned char*) memPtr;
80007cd4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007cd8:	ef 48 ff f0 	st.w	r7[-16],r8
		for (unsigned long j=0; j<memSize; j++)
80007cdc:	30 08       	mov	r8,0
80007cde:	ef 48 ff fc 	st.w	r7[-4],r8
80007ce2:	c1 d8       	rjmp	80007d1c <test_flash+0xa4>
		{
			ubyte = (*ubPtr);
80007ce4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007ce8:	11 88       	ld.ub	r8,r8[0x0]
80007cea:	ef 68 ff ef 	st.b	r7[-17],r8
			if (ubyte != pattern[i])
80007cee:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007cf2:	ee 08 00 08 	add	r8,r7,r8
80007cf6:	f1 38 ff e4 	ld.ub	r8,r8[-28]
80007cfa:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007cfe:	f0 09 18 00 	cp.b	r9,r8
80007d02:	c0 30       	breq	80007d08 <test_flash+0x90>
			{
				return ERROR;
80007d04:	30 18       	mov	r8,1
80007d06:	c1 e8       	rjmp	80007d42 <test_flash+0xca>
			}
			ubPtr++;
80007d08:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007d0c:	2f f8       	sub	r8,-1
80007d0e:	ef 48 ff f0 	st.w	r7[-16],r8
	for (unsigned char i=0; i<4; i++) //4 patterns to test
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
	
		ubPtr = (unsigned char*) memPtr;
		for (unsigned long j=0; j<memSize; j++)
80007d12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007d16:	2f f8       	sub	r8,-1
80007d18:	ef 48 ff fc 	st.w	r7[-4],r8
80007d1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007d20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007d24:	10 39       	cp.w	r9,r8
80007d26:	cd f3       	brcs	80007ce4 <test_flash+0x6c>
	else
	{
		memPtr = &serialIdAndUsageFlashOne;
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
80007d28:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007d2c:	2f f8       	sub	r8,-1
80007d2e:	ef 68 ff fb 	st.b	r7[-5],r8
80007d32:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007d36:	30 38       	mov	r8,3
80007d38:	f0 09 18 00 	cp.b	r9,r8
80007d3c:	fe 98 ff be 	brls	80007cb8 <test_flash+0x40>
			}
			ubPtr++;
		}
	}
	
	return SUCCESS;
80007d40:	30 08       	mov	r8,0
}
80007d42:	10 9c       	mov	r12,r8
80007d44:	2f 8d       	sub	sp,-32
80007d46:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d4a:	00 00       	add	r0,r0
80007d4c:	80 01       	ld.sh	r1,r0[0x0]
80007d4e:	0b fc       	ld.ub	r12,r5[0x7]
80007d50:	80 07       	ld.sh	r7,r0[0x0]
80007d52:	f0 00       	*unknown*
80007d54:	80 07       	ld.sh	r7,r0[0x0]
80007d56:	f8 00       	*unknown*
80007d58:	80 00       	ld.sh	r0,r0[0x0]
80007d5a:	3e 64       	mov	r4,-26

80007d5c <find_first_open_usage_slot>:

#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(unsigned char sel);
unsigned char find_first_open_usage_slot(unsigned char sel)
{
80007d5c:	eb cd 40 80 	pushm	r7,lr
80007d60:	1a 97       	mov	r7,sp
80007d62:	20 2d       	sub	sp,8
80007d64:	18 98       	mov	r8,r12
80007d66:	ef 68 ff f8 	st.b	r7[-8],r8
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007d6a:	30 08       	mov	r8,0
80007d6c:	ef 48 ff fc 	st.w	r7[-4],r8
80007d70:	c1 f8       	rjmp	80007dae <find_first_open_usage_slot+0x52>
	{
		if (!usageShdw[sel].u[i].slotFilled)
80007d72:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80007d76:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007d7a:	49 4a       	lddpc	r10,80007dc8 <find_first_open_usage_slot+0x6c>
80007d7c:	12 98       	mov	r8,r9
80007d7e:	a5 68       	lsl	r8,0x4
80007d80:	12 08       	add	r8,r9
80007d82:	e0 69 06 61 	mov	r9,1633
80007d86:	f6 09 02 49 	mul	r9,r11,r9
80007d8a:	12 08       	add	r8,r9
80007d8c:	f4 08 00 08 	add	r8,r10,r8
80007d90:	2f c8       	sub	r8,-4
80007d92:	11 a8       	ld.ub	r8,r8[0x2]
80007d94:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80007d98:	5c 58       	castu.b	r8
80007d9a:	c0 51       	brne	80007da4 <find_first_open_usage_slot+0x48>
		{
			return i;
80007d9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007da0:	5c 58       	castu.b	r8
80007da2:	c0 e8       	rjmp	80007dbe <find_first_open_usage_slot+0x62>
#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(unsigned char sel);
unsigned char find_first_open_usage_slot(unsigned char sel)
{
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007da4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007da8:	2f f8       	sub	r8,-1
80007daa:	ef 48 ff fc 	st.w	r7[-4],r8
80007dae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007db2:	e0 48 00 5f 	cp.w	r8,95
80007db6:	fe 98 ff de 	brls	80007d72 <find_first_open_usage_slot+0x16>
		{
			return i;
		}
	}
	
	return USAGE_FULL; //Error, no open slots
80007dba:	e0 68 00 ff 	mov	r8,255
}
80007dbe:	10 9c       	mov	r12,r8
80007dc0:	2f ed       	sub	sp,-8
80007dc2:	e3 cd 80 80 	ldm	sp++,r7,pc
80007dc6:	00 00       	add	r0,r0
80007dc8:	00 00       	add	r0,r0
80007dca:	08 b8       	st.h	r4++,r8

80007dcc <add_new_led_board_sides_to_usage>:

void add_new_led_board_sides_to_usage(unsigned char sel)
{
80007dcc:	eb cd 40 80 	pushm	r7,lr
80007dd0:	1a 97       	mov	r7,sp
80007dd2:	20 3d       	sub	sp,12
80007dd4:	18 98       	mov	r8,r12
80007dd6:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char firstOpenSlot, slotAssignment, brdIdx, top_botn;
	
	//NOTE that load_usage_indeces() must have been run already for this function to work. 
	// i.e., usageIdx[][] must be populated.
	
	firstOpenSlot = find_first_open_usage_slot(sel);
80007dda:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007dde:	10 9c       	mov	r12,r8
80007de0:	f0 1f 00 55 	mcall	80007f34 <add_new_led_board_sides_to_usage+0x168>
80007de4:	18 98       	mov	r8,r12
80007de6:	ef 68 ff fb 	st.b	r7[-5],r8
	
	slotAssignment = firstOpenSlot;
80007dea:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007dee:	ef 68 ff fc 	st.b	r7[-4],r8
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
80007df2:	30 08       	mov	r8,0
80007df4:	ef 68 ff ff 	st.b	r7[-1],r8
80007df8:	c9 48       	rjmp	80007f20 <add_new_led_board_sides_to_usage+0x154>
	{
		brdIdx = ledBrdSide[i].boardIdx;
80007dfa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007dfe:	4c fa       	lddpc	r10,80007f38 <add_new_led_board_sides_to_usage+0x16c>
80007e00:	12 98       	mov	r8,r9
80007e02:	a3 68       	lsl	r8,0x2
80007e04:	12 08       	add	r8,r9
80007e06:	f4 08 00 08 	add	r8,r10,r8
80007e0a:	2f c8       	sub	r8,-4
80007e0c:	11 88       	ld.ub	r8,r8[0x0]
80007e0e:	ef 68 ff fd 	st.b	r7[-3],r8
		
		top_botn = (i%2) ? TOP : BOTTOM; //odd sides are top, even sides are bottom
80007e12:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007e16:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007e1a:	ef 68 ff fe 	st.b	r7[-2],r8
		
		if ((ledBrd[brdIdx].present) && (usageIdx[sel][i] == NO_LED_BOARD_PRESENT)) //TODO: do I need the NO_LED_BOARD_PRESENT check? this should always be open at this point
80007e1e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80007e22:	4c 7a       	lddpc	r10,80007f3c <add_new_led_board_sides_to_usage+0x170>
80007e24:	12 98       	mov	r8,r9
80007e26:	a3 78       	lsl	r8,0x3
80007e28:	12 18       	sub	r8,r9
80007e2a:	a1 78       	lsl	r8,0x1
80007e2c:	f4 08 00 08 	add	r8,r10,r8
80007e30:	2f 88       	sub	r8,-8
80007e32:	11 88       	ld.ub	r8,r8[0x0]
80007e34:	58 08       	cp.w	r8,0
80007e36:	c7 00       	breq	80007f16 <add_new_led_board_sides_to_usage+0x14a>
80007e38:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007e3c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007e40:	4c 09       	lddpc	r9,80007f40 <add_new_led_board_sides_to_usage+0x174>
80007e42:	a3 7a       	lsl	r10,0x3
80007e44:	f4 08 00 08 	add	r8,r10,r8
80007e48:	f2 08 00 08 	add	r8,r9,r8
80007e4c:	11 89       	ld.ub	r9,r8[0x0]
80007e4e:	3f f8       	mov	r8,-1
80007e50:	f0 09 18 00 	cp.b	r9,r8
80007e54:	c6 11       	brne	80007f16 <add_new_led_board_sides_to_usage+0x14a>
		{
			strncpy((char*)&usageShdw[sel].u[slotAssignment].id[0], (char*)&ledBrd[brdIdx].id[0],6);
80007e56:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80007e5a:	12 98       	mov	r8,r9
80007e5c:	a3 78       	lsl	r8,0x3
80007e5e:	12 18       	sub	r8,r9
80007e60:	a1 78       	lsl	r8,0x1
80007e62:	4b 79       	lddpc	r9,80007f3c <add_new_led_board_sides_to_usage+0x170>
80007e64:	12 08       	add	r8,r9
80007e66:	f0 cb ff ff 	sub	r11,r8,-1
80007e6a:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007e6e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007e72:	12 98       	mov	r8,r9
80007e74:	a5 68       	lsl	r8,0x4
80007e76:	12 08       	add	r8,r9
80007e78:	e0 69 06 61 	mov	r9,1633
80007e7c:	f4 09 02 49 	mul	r9,r10,r9
80007e80:	f0 09 00 09 	add	r9,r8,r9
80007e84:	4b 08       	lddpc	r8,80007f44 <add_new_led_board_sides_to_usage+0x178>
80007e86:	f2 08 00 08 	add	r8,r9,r8
80007e8a:	30 6a       	mov	r10,6
80007e8c:	10 9c       	mov	r12,r8
80007e8e:	f0 1f 00 2f 	mcall	80007f48 <add_new_led_board_sides_to_usage+0x17c>
			
			usageShdw[sel].u[slotAssignment].top_botn = top_botn;
80007e92:	ef 3c ff f4 	ld.ub	r12,r7[-12]
80007e96:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007e9a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007e9e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007ea2:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007ea6:	4a 8b       	lddpc	r11,80007f44 <add_new_led_board_sides_to_usage+0x178>
80007ea8:	12 98       	mov	r8,r9
80007eaa:	a5 68       	lsl	r8,0x4
80007eac:	12 08       	add	r8,r9
80007eae:	e0 69 06 61 	mov	r9,1633
80007eb2:	f8 09 02 49 	mul	r9,r12,r9
80007eb6:	12 08       	add	r8,r9
80007eb8:	f6 08 00 08 	add	r8,r11,r8
80007ebc:	f0 c9 ff fc 	sub	r9,r8,-4
80007ec0:	13 a8       	ld.ub	r8,r9[0x2]
80007ec2:	f1 da d0 c1 	bfins	r8,r10,0x6,0x1
80007ec6:	b2 a8       	st.b	r9[0x2],r8
			
			usageShdw[sel].u[slotAssignment].slotFilled = 1;
80007ec8:	ef 3b ff f4 	ld.ub	r11,r7[-12]
80007ecc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007ed0:	49 da       	lddpc	r10,80007f44 <add_new_led_board_sides_to_usage+0x178>
80007ed2:	12 98       	mov	r8,r9
80007ed4:	a5 68       	lsl	r8,0x4
80007ed6:	12 08       	add	r8,r9
80007ed8:	e0 69 06 61 	mov	r9,1633
80007edc:	f6 09 02 49 	mul	r9,r11,r9
80007ee0:	12 08       	add	r8,r9
80007ee2:	f4 08 00 08 	add	r8,r10,r8
80007ee6:	f0 c9 ff fc 	sub	r9,r8,-4
80007eea:	13 a8       	ld.ub	r8,r9[0x2]
80007eec:	30 1a       	mov	r10,1
80007eee:	f1 da d0 a1 	bfins	r8,r10,0x5,0x1
80007ef2:	b2 a8       	st.b	r9[0x2],r8

			usageIdx[sel][i] = slotAssignment++;
80007ef4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007ef8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007efc:	49 19       	lddpc	r9,80007f40 <add_new_led_board_sides_to_usage+0x174>
80007efe:	a3 7a       	lsl	r10,0x3
80007f00:	f4 08 00 08 	add	r8,r10,r8
80007f04:	10 09       	add	r9,r8
80007f06:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007f0a:	b2 88       	st.b	r9[0x0],r8
80007f0c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007f10:	2f f8       	sub	r8,-1
80007f12:	ef 68 ff fc 	st.b	r7[-4],r8
	
	firstOpenSlot = find_first_open_usage_slot(sel);
	
	slotAssignment = firstOpenSlot;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
80007f16:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007f1a:	2f f8       	sub	r8,-1
80007f1c:	ef 68 ff ff 	st.b	r7[-1],r8
80007f20:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007f24:	30 78       	mov	r8,7
80007f26:	f0 09 18 00 	cp.b	r9,r8
80007f2a:	fe 98 ff 68 	brls	80007dfa <add_new_led_board_sides_to_usage+0x2e>
			usageShdw[sel].u[slotAssignment].slotFilled = 1;

			usageIdx[sel][i] = slotAssignment++;
		}
	}
}
80007f2e:	2f dd       	sub	sp,-12
80007f30:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f34:	80 00       	ld.sh	r0,r0[0x0]
80007f36:	7d 5c       	ld.w	r12,lr[0x54]
80007f38:	00 00       	add	r0,r0
80007f3a:	15 94       	ld.ub	r4,r10[0x1]
80007f3c:	00 00       	add	r0,r0
80007f3e:	08 2a       	rsub	r10,r4
80007f40:	00 00       	add	r0,r0
80007f42:	08 9c       	mov	r12,r4
80007f44:	00 00       	add	r0,r0
80007f46:	08 b8       	st.h	r4++,r8
80007f48:	80 00       	ld.sh	r0,r0[0x0]
80007f4a:	b3 4c       	asr	r12,0x12

80007f4c <calc_usage_csum>:

unsigned char calc_usage_csum(unsigned char sel)
{
80007f4c:	eb cd 40 80 	pushm	r7,lr
80007f50:	1a 97       	mov	r7,sp
80007f52:	20 2d       	sub	sp,8
80007f54:	18 98       	mov	r8,r12
80007f56:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char csum = 0;
80007f5a:	30 08       	mov	r8,0
80007f5c:	ef 68 ff fe 	st.b	r7[-2],r8
	
/*
 * Lots of ways to checksum this struct, don't over-think it
 */

	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007f60:	30 08       	mov	r8,0
80007f62:	ef 68 ff ff 	st.b	r7[-1],r8
80007f66:	c4 99       	rjmp	800081f8 <calc_usage_csum+0x2ac>
	{
		csum += usageShdw[sel].u[i].hrs_thous;
80007f68:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80007f6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007f70:	fe fa 02 a4 	ld.w	r10,pc[676]
80007f74:	12 98       	mov	r8,r9
80007f76:	a5 68       	lsl	r8,0x4
80007f78:	12 08       	add	r8,r9
80007f7a:	e0 69 06 61 	mov	r9,1633
80007f7e:	f6 09 02 49 	mul	r9,r11,r9
80007f82:	12 08       	add	r8,r9
80007f84:	f4 08 00 08 	add	r8,r10,r8
80007f88:	2f c8       	sub	r8,-4
80007f8a:	11 b8       	ld.ub	r8,r8[0x3]
80007f8c:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007f90:	5c 58       	castu.b	r8
80007f92:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007f96:	f2 08 00 08 	add	r8,r9,r8
80007f9a:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_huns;
80007f9e:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80007fa2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007fa6:	fe fa 02 6e 	ld.w	r10,pc[622]
80007faa:	12 98       	mov	r8,r9
80007fac:	a5 68       	lsl	r8,0x4
80007fae:	12 08       	add	r8,r9
80007fb0:	e0 69 06 61 	mov	r9,1633
80007fb4:	f6 09 02 49 	mul	r9,r11,r9
80007fb8:	12 08       	add	r8,r9
80007fba:	f4 08 00 08 	add	r8,r10,r8
80007fbe:	2f c8       	sub	r8,-4
80007fc0:	11 b8       	ld.ub	r8,r8[0x3]
80007fc2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007fc6:	5c 58       	castu.b	r8
80007fc8:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007fcc:	f2 08 00 08 	add	r8,r9,r8
80007fd0:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_tens;
80007fd4:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80007fd8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007fdc:	fe fa 02 38 	ld.w	r10,pc[568]
80007fe0:	12 98       	mov	r8,r9
80007fe2:	a5 68       	lsl	r8,0x4
80007fe4:	12 08       	add	r8,r9
80007fe6:	e0 69 06 61 	mov	r9,1633
80007fea:	f6 09 02 49 	mul	r9,r11,r9
80007fee:	12 08       	add	r8,r9
80007ff0:	f4 08 00 08 	add	r8,r10,r8
80007ff4:	2f 88       	sub	r8,-8
80007ff6:	11 88       	ld.ub	r8,r8[0x0]
80007ff8:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007ffc:	5c 58       	castu.b	r8
80007ffe:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80008002:	f2 08 00 08 	add	r8,r9,r8
80008006:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_ones;
8000800a:	ef 3b ff f8 	ld.ub	r11,r7[-8]
8000800e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008012:	fe fa 02 02 	ld.w	r10,pc[514]
80008016:	12 98       	mov	r8,r9
80008018:	a5 68       	lsl	r8,0x4
8000801a:	12 08       	add	r8,r9
8000801c:	e0 69 06 61 	mov	r9,1633
80008020:	f6 09 02 49 	mul	r9,r11,r9
80008024:	12 08       	add	r8,r9
80008026:	f4 08 00 08 	add	r8,r10,r8
8000802a:	2f 88       	sub	r8,-8
8000802c:	11 88       	ld.ub	r8,r8[0x0]
8000802e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008032:	5c 58       	castu.b	r8
80008034:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80008038:	f2 08 00 08 	add	r8,r9,r8
8000803c:	ef 68 ff fe 	st.b	r7[-2],r8
//		for (int j=0; j<8; j++)
//		{
//			csum += usageShdw[sel].u[i].minuteBits[j];
//		}
		
		csum += usageShdw[sel].u[i].id[0];
80008040:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80008044:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008048:	4f 3a       	lddpc	r10,80008214 <calc_usage_csum+0x2c8>
8000804a:	12 98       	mov	r8,r9
8000804c:	a5 68       	lsl	r8,0x4
8000804e:	12 08       	add	r8,r9
80008050:	e0 69 06 61 	mov	r9,1633
80008054:	f6 09 02 49 	mul	r9,r11,r9
80008058:	12 08       	add	r8,r9
8000805a:	f4 08 00 08 	add	r8,r10,r8
8000805e:	11 88       	ld.ub	r8,r8[0x0]
80008060:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80008064:	f2 08 00 08 	add	r8,r9,r8
80008068:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[1];
8000806c:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80008070:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008074:	4e 8a       	lddpc	r10,80008214 <calc_usage_csum+0x2c8>
80008076:	12 98       	mov	r8,r9
80008078:	a5 68       	lsl	r8,0x4
8000807a:	12 08       	add	r8,r9
8000807c:	e0 69 06 61 	mov	r9,1633
80008080:	f6 09 02 49 	mul	r9,r11,r9
80008084:	12 08       	add	r8,r9
80008086:	f4 08 00 08 	add	r8,r10,r8
8000808a:	2f f8       	sub	r8,-1
8000808c:	11 88       	ld.ub	r8,r8[0x0]
8000808e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80008092:	f2 08 00 08 	add	r8,r9,r8
80008096:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[2];
8000809a:	ef 3b ff f8 	ld.ub	r11,r7[-8]
8000809e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800080a2:	4d da       	lddpc	r10,80008214 <calc_usage_csum+0x2c8>
800080a4:	12 98       	mov	r8,r9
800080a6:	a5 68       	lsl	r8,0x4
800080a8:	12 08       	add	r8,r9
800080aa:	e0 69 06 61 	mov	r9,1633
800080ae:	f6 09 02 49 	mul	r9,r11,r9
800080b2:	12 08       	add	r8,r9
800080b4:	f4 08 00 08 	add	r8,r10,r8
800080b8:	2f e8       	sub	r8,-2
800080ba:	11 88       	ld.ub	r8,r8[0x0]
800080bc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800080c0:	f2 08 00 08 	add	r8,r9,r8
800080c4:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[3];
800080c8:	ef 3b ff f8 	ld.ub	r11,r7[-8]
800080cc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800080d0:	4d 1a       	lddpc	r10,80008214 <calc_usage_csum+0x2c8>
800080d2:	12 98       	mov	r8,r9
800080d4:	a5 68       	lsl	r8,0x4
800080d6:	12 08       	add	r8,r9
800080d8:	e0 69 06 61 	mov	r9,1633
800080dc:	f6 09 02 49 	mul	r9,r11,r9
800080e0:	12 08       	add	r8,r9
800080e2:	f4 08 00 08 	add	r8,r10,r8
800080e6:	2f d8       	sub	r8,-3
800080e8:	11 88       	ld.ub	r8,r8[0x0]
800080ea:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800080ee:	f2 08 00 08 	add	r8,r9,r8
800080f2:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[4];
800080f6:	ef 3b ff f8 	ld.ub	r11,r7[-8]
800080fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800080fe:	4c 6a       	lddpc	r10,80008214 <calc_usage_csum+0x2c8>
80008100:	12 98       	mov	r8,r9
80008102:	a5 68       	lsl	r8,0x4
80008104:	12 08       	add	r8,r9
80008106:	e0 69 06 61 	mov	r9,1633
8000810a:	f6 09 02 49 	mul	r9,r11,r9
8000810e:	12 08       	add	r8,r9
80008110:	f4 08 00 08 	add	r8,r10,r8
80008114:	2f c8       	sub	r8,-4
80008116:	11 88       	ld.ub	r8,r8[0x0]
80008118:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000811c:	f2 08 00 08 	add	r8,r9,r8
80008120:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[5];
80008124:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80008128:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000812c:	4b aa       	lddpc	r10,80008214 <calc_usage_csum+0x2c8>
8000812e:	12 98       	mov	r8,r9
80008130:	a5 68       	lsl	r8,0x4
80008132:	12 08       	add	r8,r9
80008134:	e0 69 06 61 	mov	r9,1633
80008138:	f6 09 02 49 	mul	r9,r11,r9
8000813c:	12 08       	add	r8,r9
8000813e:	f4 08 00 08 	add	r8,r10,r8
80008142:	2f b8       	sub	r8,-5
80008144:	11 88       	ld.ub	r8,r8[0x0]
80008146:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000814a:	f2 08 00 08 	add	r8,r9,r8
8000814e:	ef 68 ff fe 	st.b	r7[-2],r8
		
		csum += usageShdw[sel].u[i].maxUsageReached;
80008152:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80008156:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000815a:	4a fa       	lddpc	r10,80008214 <calc_usage_csum+0x2c8>
8000815c:	12 98       	mov	r8,r9
8000815e:	a5 68       	lsl	r8,0x4
80008160:	12 08       	add	r8,r9
80008162:	e0 69 06 61 	mov	r9,1633
80008166:	f6 09 02 49 	mul	r9,r11,r9
8000816a:	12 08       	add	r8,r9
8000816c:	f4 08 00 08 	add	r8,r10,r8
80008170:	2f c8       	sub	r8,-4
80008172:	11 a8       	ld.ub	r8,r8[0x2]
80008174:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80008178:	5c 58       	castu.b	r8
8000817a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000817e:	f2 08 00 08 	add	r8,r9,r8
80008182:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].top_botn;
80008186:	ef 3b ff f8 	ld.ub	r11,r7[-8]
8000818a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000818e:	4a 2a       	lddpc	r10,80008214 <calc_usage_csum+0x2c8>
80008190:	12 98       	mov	r8,r9
80008192:	a5 68       	lsl	r8,0x4
80008194:	12 08       	add	r8,r9
80008196:	e0 69 06 61 	mov	r9,1633
8000819a:	f6 09 02 49 	mul	r9,r11,r9
8000819e:	12 08       	add	r8,r9
800081a0:	f4 08 00 08 	add	r8,r10,r8
800081a4:	2f c8       	sub	r8,-4
800081a6:	11 a8       	ld.ub	r8,r8[0x2]
800081a8:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800081ac:	5c 58       	castu.b	r8
800081ae:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800081b2:	f2 08 00 08 	add	r8,r9,r8
800081b6:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].slotFilled;
800081ba:	ef 3b ff f8 	ld.ub	r11,r7[-8]
800081be:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800081c2:	49 5a       	lddpc	r10,80008214 <calc_usage_csum+0x2c8>
800081c4:	12 98       	mov	r8,r9
800081c6:	a5 68       	lsl	r8,0x4
800081c8:	12 08       	add	r8,r9
800081ca:	e0 69 06 61 	mov	r9,1633
800081ce:	f6 09 02 49 	mul	r9,r11,r9
800081d2:	12 08       	add	r8,r9
800081d4:	f4 08 00 08 	add	r8,r10,r8
800081d8:	2f c8       	sub	r8,-4
800081da:	11 a8       	ld.ub	r8,r8[0x2]
800081dc:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800081e0:	5c 58       	castu.b	r8
800081e2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800081e6:	f2 08 00 08 	add	r8,r9,r8
800081ea:	ef 68 ff fe 	st.b	r7[-2],r8
	
/*
 * Lots of ways to checksum this struct, don't over-think it
 */

	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800081ee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800081f2:	2f f8       	sub	r8,-1
800081f4:	ef 68 ff ff 	st.b	r7[-1],r8
800081f8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800081fc:	35 f8       	mov	r8,95
800081fe:	f0 09 18 00 	cp.b	r9,r8
80008202:	fe 98 fe b3 	brls	80007f68 <calc_usage_csum+0x1c>
		csum += usageShdw[sel].u[i].maxUsageReached;
		csum += usageShdw[sel].u[i].top_botn;
		csum += usageShdw[sel].u[i].slotFilled;
	}
	
	return csum;
80008206:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
8000820a:	10 9c       	mov	r12,r8
8000820c:	2f ed       	sub	sp,-8
8000820e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008212:	00 00       	add	r0,r0
80008214:	00 00       	add	r0,r0
80008216:	08 b8       	st.h	r4++,r8

80008218 <copy_usage_to_usage>:

void copy_usage_to_usage(unsigned char dst, unsigned char src)
{
80008218:	eb cd 40 80 	pushm	r7,lr
8000821c:	1a 97       	mov	r7,sp
8000821e:	20 2d       	sub	sp,8
80008220:	18 99       	mov	r9,r12
80008222:	16 98       	mov	r8,r11
80008224:	ef 69 ff fc 	st.b	r7[-4],r9
80008228:	ef 68 ff f8 	st.b	r7[-8],r8
	memcpy(&usageShdw[dst], &usageShdw[src], sizeof(usageShdw[src]));
8000822c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80008230:	e0 68 06 61 	mov	r8,1633
80008234:	b1 39       	mul	r9,r8
80008236:	48 a8       	lddpc	r8,8000825c <copy_usage_to_usage+0x44>
80008238:	10 09       	add	r9,r8
8000823a:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000823e:	e0 68 06 61 	mov	r8,1633
80008242:	b1 3a       	mul	r10,r8
80008244:	48 68       	lddpc	r8,8000825c <copy_usage_to_usage+0x44>
80008246:	f4 08 00 08 	add	r8,r10,r8
8000824a:	e0 6a 06 61 	mov	r10,1633
8000824e:	12 9b       	mov	r11,r9
80008250:	10 9c       	mov	r12,r8
80008252:	f0 1f 00 04 	mcall	80008260 <copy_usage_to_usage+0x48>
}
80008256:	2f ed       	sub	sp,-8
80008258:	e3 cd 80 80 	ldm	sp++,r7,pc
8000825c:	00 00       	add	r0,r0
8000825e:	08 b8       	st.h	r4++,r8
80008260:	80 00       	ld.sh	r0,r0[0x0]
80008262:	b1 26       	st.d	r8++,r6

80008264 <write_usage_to_flash>:

void write_usage_to_flash(unsigned char sel)
{
80008264:	eb cd 40 80 	pushm	r7,lr
80008268:	1a 97       	mov	r7,sp
8000826a:	20 1d       	sub	sp,4
8000826c:	18 98       	mov	r8,r12
8000826e:	ef 68 ff fc 	st.b	r7[-4],r8
	if (sel == 0)
80008272:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80008276:	30 08       	mov	r8,0
80008278:	f0 09 18 00 	cp.b	r9,r8
8000827c:	c0 91       	brne	8000828e <write_usage_to_flash+0x2a>
	{
		flashc_memcpy(serialIdAndUsageFlashZero, &usageShdw[0], sizeof(usageShdw[0]),true);
8000827e:	30 19       	mov	r9,1
80008280:	e0 6a 06 61 	mov	r10,1633
80008284:	48 9b       	lddpc	r11,800082a8 <write_usage_to_flash+0x44>
80008286:	48 ac       	lddpc	r12,800082ac <write_usage_to_flash+0x48>
80008288:	f0 1f 00 0a 	mcall	800082b0 <write_usage_to_flash+0x4c>
8000828c:	c0 b8       	rjmp	800082a2 <write_usage_to_flash+0x3e>
	}
	else
	{
		flashc_memcpy(serialIdAndUsageFlashOne, &usageShdw[1], sizeof(usageShdw[1]),true);
8000828e:	48 78       	lddpc	r8,800082a8 <write_usage_to_flash+0x44>
80008290:	f0 c8 f9 9f 	sub	r8,r8,-1633
80008294:	30 19       	mov	r9,1
80008296:	e0 6a 06 61 	mov	r10,1633
8000829a:	10 9b       	mov	r11,r8
8000829c:	48 6c       	lddpc	r12,800082b4 <write_usage_to_flash+0x50>
8000829e:	f0 1f 00 05 	mcall	800082b0 <write_usage_to_flash+0x4c>
	}
}
800082a2:	2f fd       	sub	sp,-4
800082a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800082a8:	00 00       	add	r0,r0
800082aa:	08 b8       	st.h	r4++,r8
800082ac:	80 07       	ld.sh	r7,r0[0x0]
800082ae:	f0 00       	*unknown*
800082b0:	80 00       	ld.sh	r0,r0[0x0]
800082b2:	43 84       	lddsp	r4,sp[0xe0]
800082b4:	80 07       	ld.sh	r7,r0[0x0]
800082b6:	f8 00       	*unknown*

800082b8 <calc_usage_current_led_boards>:
}


unsigned long calc_usage_current_led_boards(unsigned char sel);
unsigned long calc_usage_current_led_boards(unsigned char sel)
{
800082b8:	eb cd 40 80 	pushm	r7,lr
800082bc:	1a 97       	mov	r7,sp
800082be:	20 9d       	sub	sp,36
800082c0:	18 98       	mov	r8,r12
800082c2:	ef 68 ff dc 	st.b	r7[-36],r8
	unsigned long hrs_thous = 0, 
800082c6:	30 08       	mov	r8,0
800082c8:	ef 48 ff e0 	st.w	r7[-32],r8
		hrs_huns = 0, 
800082cc:	30 08       	mov	r8,0
800082ce:	ef 48 ff e4 	st.w	r7[-28],r8
		hrs_tens = 0, 
800082d2:	30 08       	mov	r8,0
800082d4:	ef 48 ff e8 	st.w	r7[-24],r8
		hrs_ones = 0, 
800082d8:	30 08       	mov	r8,0
800082da:	ef 48 ff ec 	st.w	r7[-20],r8
		minutes = 0; 
800082de:	30 08       	mov	r8,0
800082e0:	ef 48 ff f0 	st.w	r7[-16],r8
		
	unsigned char idx;
	unsigned long retMinutes;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
800082e4:	30 08       	mov	r8,0
800082e6:	ef 68 ff ff 	st.b	r7[-1],r8
800082ea:	ca 78       	rjmp	80008438 <calc_usage_current_led_boards+0x180>
	{
		if (usageIdx[sel][i] != NO_LED_BOARD_PRESENT)
800082ec:	ef 3a ff dc 	ld.ub	r10,r7[-36]
800082f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800082f4:	4e c9       	lddpc	r9,800084a4 <calc_usage_current_led_boards+0x1ec>
800082f6:	a3 7a       	lsl	r10,0x3
800082f8:	f4 08 00 08 	add	r8,r10,r8
800082fc:	f2 08 00 08 	add	r8,r9,r8
80008300:	11 89       	ld.ub	r9,r8[0x0]
80008302:	3f f8       	mov	r8,-1
80008304:	f0 09 18 00 	cp.b	r9,r8
80008308:	e0 80 00 93 	breq	8000842e <calc_usage_current_led_boards+0x176>
		{
			idx = usageIdx[sel][i];
8000830c:	ef 3a ff dc 	ld.ub	r10,r7[-36]
80008310:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008314:	4e 49       	lddpc	r9,800084a4 <calc_usage_current_led_boards+0x1ec>
80008316:	a3 7a       	lsl	r10,0x3
80008318:	f4 08 00 08 	add	r8,r10,r8
8000831c:	f2 08 00 08 	add	r8,r9,r8
80008320:	11 88       	ld.ub	r8,r8[0x0]
80008322:	ef 68 ff f7 	st.b	r7[-9],r8
					
			hrs_thous += usageShdw[sel].u[idx].hrs_thous;
80008326:	ef 3b ff dc 	ld.ub	r11,r7[-36]
8000832a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000832e:	4d fa       	lddpc	r10,800084a8 <calc_usage_current_led_boards+0x1f0>
80008330:	12 98       	mov	r8,r9
80008332:	a5 68       	lsl	r8,0x4
80008334:	12 08       	add	r8,r9
80008336:	e0 69 06 61 	mov	r9,1633
8000833a:	f6 09 02 49 	mul	r9,r11,r9
8000833e:	12 08       	add	r8,r9
80008340:	f4 08 00 08 	add	r8,r10,r8
80008344:	2f c8       	sub	r8,-4
80008346:	11 b8       	ld.ub	r8,r8[0x3]
80008348:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000834c:	5c 58       	castu.b	r8
8000834e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008352:	f2 08 00 08 	add	r8,r9,r8
80008356:	ef 48 ff e0 	st.w	r7[-32],r8
			hrs_huns += usageShdw[sel].u[idx].hrs_huns;
8000835a:	ef 3b ff dc 	ld.ub	r11,r7[-36]
8000835e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80008362:	4d 2a       	lddpc	r10,800084a8 <calc_usage_current_led_boards+0x1f0>
80008364:	12 98       	mov	r8,r9
80008366:	a5 68       	lsl	r8,0x4
80008368:	12 08       	add	r8,r9
8000836a:	e0 69 06 61 	mov	r9,1633
8000836e:	f6 09 02 49 	mul	r9,r11,r9
80008372:	12 08       	add	r8,r9
80008374:	f4 08 00 08 	add	r8,r10,r8
80008378:	2f c8       	sub	r8,-4
8000837a:	11 b8       	ld.ub	r8,r8[0x3]
8000837c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008380:	5c 58       	castu.b	r8
80008382:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008386:	f2 08 00 08 	add	r8,r9,r8
8000838a:	ef 48 ff e4 	st.w	r7[-28],r8
			hrs_tens += usageShdw[sel].u[idx].hrs_tens;
8000838e:	ef 3b ff dc 	ld.ub	r11,r7[-36]
80008392:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80008396:	4c 5a       	lddpc	r10,800084a8 <calc_usage_current_led_boards+0x1f0>
80008398:	12 98       	mov	r8,r9
8000839a:	a5 68       	lsl	r8,0x4
8000839c:	12 08       	add	r8,r9
8000839e:	e0 69 06 61 	mov	r9,1633
800083a2:	f6 09 02 49 	mul	r9,r11,r9
800083a6:	12 08       	add	r8,r9
800083a8:	f4 08 00 08 	add	r8,r10,r8
800083ac:	2f 88       	sub	r8,-8
800083ae:	11 88       	ld.ub	r8,r8[0x0]
800083b0:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800083b4:	5c 58       	castu.b	r8
800083b6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800083ba:	f2 08 00 08 	add	r8,r9,r8
800083be:	ef 48 ff e8 	st.w	r7[-24],r8
			hrs_ones += usageShdw[sel].u[idx].hrs_ones;
800083c2:	ef 3b ff dc 	ld.ub	r11,r7[-36]
800083c6:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800083ca:	4b 8a       	lddpc	r10,800084a8 <calc_usage_current_led_boards+0x1f0>
800083cc:	12 98       	mov	r8,r9
800083ce:	a5 68       	lsl	r8,0x4
800083d0:	12 08       	add	r8,r9
800083d2:	e0 69 06 61 	mov	r9,1633
800083d6:	f6 09 02 49 	mul	r9,r11,r9
800083da:	12 08       	add	r8,r9
800083dc:	f4 08 00 08 	add	r8,r10,r8
800083e0:	2f 88       	sub	r8,-8
800083e2:	11 88       	ld.ub	r8,r8[0x0]
800083e4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800083e8:	5c 58       	castu.b	r8
800083ea:	ee f9 ff ec 	ld.w	r9,r7[-20]
800083ee:	f2 08 00 08 	add	r8,r9,r8
800083f2:	ef 48 ff ec 	st.w	r7[-20],r8
			
			minutes += minute_count(&usageShdw[sel].u[idx].minuteBits[0]);
800083f6:	ef 3a ff dc 	ld.ub	r10,r7[-36]
800083fa:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800083fe:	12 98       	mov	r8,r9
80008400:	a5 68       	lsl	r8,0x4
80008402:	12 08       	add	r8,r9
80008404:	e0 69 06 61 	mov	r9,1633
80008408:	f4 09 02 49 	mul	r9,r10,r9
8000840c:	12 08       	add	r8,r9
8000840e:	f0 c9 ff f8 	sub	r9,r8,-8
80008412:	4a 68       	lddpc	r8,800084a8 <calc_usage_current_led_boards+0x1f0>
80008414:	f2 08 00 08 	add	r8,r9,r8
80008418:	2f f8       	sub	r8,-1
8000841a:	10 9c       	mov	r12,r8
8000841c:	f0 1f 00 24 	mcall	800084ac <calc_usage_current_led_boards+0x1f4>
80008420:	18 98       	mov	r8,r12
80008422:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008426:	f2 08 00 08 	add	r8,r9,r8
8000842a:	ef 48 ff f0 	st.w	r7[-16],r8
		minutes = 0; 
		
	unsigned char idx;
	unsigned long retMinutes;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
8000842e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008432:	2f f8       	sub	r8,-1
80008434:	ef 68 ff ff 	st.b	r7[-1],r8
80008438:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000843c:	30 78       	mov	r8,7
8000843e:	f0 09 18 00 	cp.b	r9,r8
80008442:	fe 98 ff 55 	brls	800082ec <calc_usage_current_led_boards+0x34>
			
			minutes += minute_count(&usageShdw[sel].u[idx].minuteBits[0]);
		}
	}
	
	retMinutes = (hrs_thous * 1000) + (hrs_huns * 100) + (hrs_tens * 10) + (hrs_ones);
80008446:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000844a:	e0 68 03 e8 	mov	r8,1000
8000844e:	b1 39       	mul	r9,r8
80008450:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008454:	f0 08 10 64 	mul	r8,r8,100
80008458:	f2 08 00 0a 	add	r10,r9,r8
8000845c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80008460:	12 98       	mov	r8,r9
80008462:	a3 68       	lsl	r8,0x2
80008464:	12 08       	add	r8,r9
80008466:	a1 78       	lsl	r8,0x1
80008468:	f4 08 00 09 	add	r9,r10,r8
8000846c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008470:	f2 08 00 08 	add	r8,r9,r8
80008474:	ef 48 ff f8 	st.w	r7[-8],r8
	retMinutes *= 60;
80008478:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000847c:	12 98       	mov	r8,r9
8000847e:	a5 68       	lsl	r8,0x4
80008480:	12 18       	sub	r8,r9
80008482:	a3 68       	lsl	r8,0x2
80008484:	ef 48 ff f8 	st.w	r7[-8],r8
	retMinutes += minutes;
80008488:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000848c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008490:	f2 08 00 08 	add	r8,r9,r8
80008494:	ef 48 ff f8 	st.w	r7[-8],r8
	
	return retMinutes;
80008498:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000849c:	10 9c       	mov	r12,r8
8000849e:	2f 7d       	sub	sp,-36
800084a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800084a4:	00 00       	add	r0,r0
800084a6:	08 9c       	mov	r12,r4
800084a8:	00 00       	add	r0,r0
800084aa:	08 b8       	st.h	r4++,r8
800084ac:	80 00       	ld.sh	r0,r0[0x0]
800084ae:	77 74       	ld.w	r4,r11[0x5c]

800084b0 <increment_ledBoard_usage_min>:

void increment_ledBoard_usage_min(void);
void increment_ledBoard_usage_min(void)
{
800084b0:	eb cd 40 c0 	pushm	r6-r7,lr
800084b4:	1a 97       	mov	r7,sp
800084b6:	20 3d       	sub	sp,12
	SERIAL_ID_AND_USAGE *tmp;
	unsigned char topLEDboardLowerSideIdx;
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	unsigned char hourRollover = 0;
800084b8:	30 08       	mov	r8,0
800084ba:	ef 68 ff fc 	st.b	r7[-4],r8
	
	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
800084be:	30 08       	mov	r8,0
800084c0:	ef 68 ff fd 	st.b	r7[-3],r8
800084c4:	c5 b9       	rjmp	8000877a <increment_ledBoard_usage_min+0x2ca>
	{
		if (shelf[i].active == SHELF_ACTIVE)
800084c6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800084ca:	fe fa 03 36 	ld.w	r10,pc[822]
800084ce:	12 98       	mov	r8,r9
800084d0:	a3 68       	lsl	r8,0x2
800084d2:	12 08       	add	r8,r9
800084d4:	f4 08 00 08 	add	r8,r10,r8
800084d8:	11 89       	ld.ub	r9,r8[0x0]
800084da:	30 18       	mov	r8,1
800084dc:	f0 09 18 00 	cp.b	r9,r8
800084e0:	e0 81 01 48 	brne	80008770 <increment_ledBoard_usage_min+0x2c0>
		{
			topLEDboardLowerSideIdx = ledBrd[shelf[i].tLedIdx].lSideIdx;
800084e4:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800084e8:	fe fa 03 18 	ld.w	r10,pc[792]
800084ec:	12 98       	mov	r8,r9
800084ee:	a3 68       	lsl	r8,0x2
800084f0:	12 08       	add	r8,r9
800084f2:	f4 08 00 08 	add	r8,r10,r8
800084f6:	2f f8       	sub	r8,-1
800084f8:	11 88       	ld.ub	r8,r8[0x0]
800084fa:	10 99       	mov	r9,r8
800084fc:	fe fa 03 08 	ld.w	r10,pc[776]
80008500:	12 98       	mov	r8,r9
80008502:	a3 78       	lsl	r8,0x3
80008504:	12 18       	sub	r8,r9
80008506:	a1 78       	lsl	r8,0x1
80008508:	f4 08 00 08 	add	r8,r10,r8
8000850c:	2f 58       	sub	r8,-11
8000850e:	11 88       	ld.ub	r8,r8[0x0]
80008510:	ef 68 ff f8 	st.b	r7[-8],r8
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
80008514:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80008518:	fe fa 02 e8 	ld.w	r10,pc[744]
8000851c:	12 98       	mov	r8,r9
8000851e:	a3 68       	lsl	r8,0x2
80008520:	12 08       	add	r8,r9
80008522:	f4 08 00 08 	add	r8,r10,r8
80008526:	2f e8       	sub	r8,-2
80008528:	11 88       	ld.ub	r8,r8[0x0]
8000852a:	10 99       	mov	r9,r8
8000852c:	fe fa 02 d8 	ld.w	r10,pc[728]
80008530:	12 98       	mov	r8,r9
80008532:	a3 78       	lsl	r8,0x3
80008534:	12 18       	sub	r8,r9
80008536:	a1 78       	lsl	r8,0x1
80008538:	f4 08 00 08 	add	r8,r10,r8
8000853c:	2f 68       	sub	r8,-10
8000853e:	11 88       	ld.ub	r8,r8[0x0]
80008540:	ef 68 ff f9 	st.b	r7[-7],r8
		
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
80008544:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80008548:	fe fa 02 c0 	ld.w	r10,pc[704]
8000854c:	12 98       	mov	r8,r9
8000854e:	a3 68       	lsl	r8,0x2
80008550:	12 08       	add	r8,r9
80008552:	f4 08 00 08 	add	r8,r10,r8
80008556:	2f f8       	sub	r8,-1
80008558:	11 88       	ld.ub	r8,r8[0x0]
8000855a:	ef 68 ff fa 	st.b	r7[-6],r8
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
8000855e:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80008562:	fe fa 02 a6 	ld.w	r10,pc[678]
80008566:	12 98       	mov	r8,r9
80008568:	a3 68       	lsl	r8,0x2
8000856a:	12 08       	add	r8,r9
8000856c:	f4 08 00 08 	add	r8,r10,r8
80008570:	2f f8       	sub	r8,-1
80008572:	11 88       	ld.ub	r8,r8[0x0]
80008574:	ef 68 ff fb 	st.b	r7[-5],r8
		
			for (unsigned char j=0; j<2; j++) //for each copy of usageShdw[] (update both copies every time even though we only write one to flash each time)
80008578:	30 08       	mov	r8,0
8000857a:	ef 68 ff fe 	st.b	r7[-2],r8
8000857e:	cf 28       	rjmp	80008762 <increment_ledBoard_usage_min+0x2b2>
			{
				for (unsigned char k=0; k<2; k++) //for each board side in the shelf
80008580:	30 08       	mov	r8,0
80008582:	ef 68 ff ff 	st.b	r7[-1],r8
80008586:	ce 28       	rjmp	8000874a <increment_ledBoard_usage_min+0x29a>
				{
					switch (k)
80008588:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000858c:	58 08       	cp.w	r8,0
8000858e:	c0 40       	breq	80008596 <increment_ledBoard_usage_min+0xe6>
80008590:	58 18       	cp.w	r8,1
80008592:	c1 50       	breq	800085bc <increment_ledBoard_usage_min+0x10c>
80008594:	c2 68       	rjmp	800085e0 <increment_ledBoard_usage_min+0x130>
					{
						case 0:
							tmp = &usageShdw[j].u[topUIdx];
80008596:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000859a:	e0 68 06 61 	mov	r8,1633
8000859e:	b1 39       	mul	r9,r8
800085a0:	fe f8 02 6c 	ld.w	r8,pc[620]
800085a4:	f2 08 00 0a 	add	r10,r9,r8
800085a8:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800085ac:	12 98       	mov	r8,r9
800085ae:	a5 68       	lsl	r8,0x4
800085b0:	12 08       	add	r8,r9
800085b2:	f4 08 00 08 	add	r8,r10,r8
800085b6:	ef 48 ff f4 	st.w	r7[-12],r8
							break;
800085ba:	c1 38       	rjmp	800085e0 <increment_ledBoard_usage_min+0x130>
						case 1:
							tmp = &usageShdw[j].u[bottomUIdx];
800085bc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800085c0:	e0 68 06 61 	mov	r8,1633
800085c4:	b1 39       	mul	r9,r8
800085c6:	fe f8 02 46 	ld.w	r8,pc[582]
800085ca:	f2 08 00 0a 	add	r10,r9,r8
800085ce:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800085d2:	12 98       	mov	r8,r9
800085d4:	a5 68       	lsl	r8,0x4
800085d6:	12 08       	add	r8,r9
800085d8:	f4 08 00 08 	add	r8,r10,r8
800085dc:	ef 48 ff f4 	st.w	r7[-12],r8
							break;
					}

					if (inc_minutes(tmp->minuteBits) > 59)
800085e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085e4:	2f 78       	sub	r8,-9
800085e6:	10 9c       	mov	r12,r8
800085e8:	f0 1f 00 8a 	mcall	80008810 <increment_ledBoard_usage_min+0x360>
800085ec:	18 98       	mov	r8,r12
800085ee:	10 99       	mov	r9,r8
800085f0:	33 b8       	mov	r8,59
800085f2:	f0 09 18 00 	cp.b	r9,r8
800085f6:	e0 88 00 a5 	brls	80008740 <increment_ledBoard_usage_min+0x290>
					{
						reset_minutes(tmp->minuteBits);
800085fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085fe:	2f 78       	sub	r8,-9
80008600:	10 9c       	mov	r12,r8
80008602:	f0 1f 00 85 	mcall	80008814 <increment_ledBoard_usage_min+0x364>

						if (j == hourPingPong)
80008606:	fe f8 02 12 	ld.w	r8,pc[530]
8000860a:	11 88       	ld.ub	r8,r8[0x0]
8000860c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80008610:	f0 09 18 00 	cp.b	r9,r8
80008614:	c0 61       	brne	80008620 <increment_ledBoard_usage_min+0x170>
						{
							hourRollover++; //count number of board sides that had hours rollover this pass for the current hourPingPong selection
80008616:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000861a:	2f f8       	sub	r8,-1
8000861c:	ef 68 ff fc 	st.b	r7[-4],r8
						}
					
						if (++(tmp->hrs_ones) > 9)
80008620:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008624:	f1 38 00 08 	ld.ub	r8,r8[8]
80008628:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000862c:	5c 58       	castu.b	r8
8000862e:	2f f8       	sub	r8,-1
80008630:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008634:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80008638:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000863c:	f3 38 00 08 	ld.ub	r8,r9[8]
80008640:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80008644:	f3 68 00 08 	st.b	r9[8],r8
80008648:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000864c:	f1 38 00 08 	ld.ub	r8,r8[8]
80008650:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008654:	5c 58       	castu.b	r8
80008656:	58 98       	cp.w	r8,9
80008658:	e0 8a 00 74 	brle	80008740 <increment_ledBoard_usage_min+0x290>
						{
							tmp->hrs_ones = 0;
8000865c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008660:	f3 38 00 08 	ld.ub	r8,r9[8]
80008664:	30 0a       	mov	r10,0
80008666:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
8000866a:	f3 68 00 08 	st.b	r9[8],r8
						
							if (++(tmp->hrs_tens) > 9)
8000866e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008672:	f1 38 00 08 	ld.ub	r8,r8[8]
80008676:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000867a:	5c 58       	castu.b	r8
8000867c:	2f f8       	sub	r8,-1
8000867e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008682:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80008686:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000868a:	f3 38 00 08 	ld.ub	r8,r9[8]
8000868e:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80008692:	f3 68 00 08 	st.b	r9[8],r8
80008696:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000869a:	f1 38 00 08 	ld.ub	r8,r8[8]
8000869e:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800086a2:	5c 58       	castu.b	r8
800086a4:	58 98       	cp.w	r8,9
800086a6:	e0 8a 00 4d 	brle	80008740 <increment_ledBoard_usage_min+0x290>
							{
								tmp->hrs_tens = 0;
800086aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800086ae:	f3 38 00 08 	ld.ub	r8,r9[8]
800086b2:	30 0a       	mov	r10,0
800086b4:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
800086b8:	f3 68 00 08 	st.b	r9[8],r8
							
								if (++(tmp->hrs_huns) > 9)
800086bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800086c0:	11 f8       	ld.ub	r8,r8[0x7]
800086c2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800086c6:	5c 58       	castu.b	r8
800086c8:	2f f8       	sub	r8,-1
800086ca:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800086ce:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800086d2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800086d6:	13 f8       	ld.ub	r8,r9[0x7]
800086d8:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
800086dc:	b2 f8       	st.b	r9[0x7],r8
800086de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800086e2:	11 f8       	ld.ub	r8,r8[0x7]
800086e4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800086e8:	5c 58       	castu.b	r8
800086ea:	58 98       	cp.w	r8,9
800086ec:	e0 8a 00 2a 	brle	80008740 <increment_ledBoard_usage_min+0x290>
								{
									tmp->hrs_huns = 0;
800086f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800086f4:	13 f8       	ld.ub	r8,r9[0x7]
800086f6:	30 0a       	mov	r10,0
800086f8:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
800086fc:	b2 f8       	st.b	r9[0x7],r8
								
									if (++(tmp->hrs_thous) > 1)
800086fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008702:	11 f8       	ld.ub	r8,r8[0x7]
80008704:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80008708:	5c 58       	castu.b	r8
8000870a:	2f f8       	sub	r8,-1
8000870c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008710:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80008714:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008718:	13 f8       	ld.ub	r8,r9[0x7]
8000871a:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8000871e:	b2 f8       	st.b	r9[0x7],r8
80008720:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008724:	11 f8       	ld.ub	r8,r8[0x7]
80008726:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000872a:	5c 58       	castu.b	r8
8000872c:	58 18       	cp.w	r8,1
8000872e:	e0 8a 00 09 	brle	80008740 <increment_ledBoard_usage_min+0x290>
									{
										tmp->maxUsageReached = 1; //And...we're done. Reached 2000 hours.
80008732:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008736:	13 e8       	ld.ub	r8,r9[0x6]
80008738:	30 1a       	mov	r10,1
8000873a:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
8000873e:	b2 e8       	st.b	r9[0x6],r8
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
		
			for (unsigned char j=0; j<2; j++) //for each copy of usageShdw[] (update both copies every time even though we only write one to flash each time)
			{
				for (unsigned char k=0; k<2; k++) //for each board side in the shelf
80008740:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008744:	2f f8       	sub	r8,-1
80008746:	ef 68 ff ff 	st.b	r7[-1],r8
8000874a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000874e:	30 18       	mov	r8,1
80008750:	f0 09 18 00 	cp.b	r9,r8
80008754:	fe 98 ff 1a 	brls	80008588 <increment_ledBoard_usage_min+0xd8>
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
		
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
		
			for (unsigned char j=0; j<2; j++) //for each copy of usageShdw[] (update both copies every time even though we only write one to flash each time)
80008758:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000875c:	2f f8       	sub	r8,-1
8000875e:	ef 68 ff fe 	st.b	r7[-2],r8
80008762:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80008766:	30 18       	mov	r8,1
80008768:	f0 09 18 00 	cp.b	r9,r8
8000876c:	fe 98 ff 0a 	brls	80008580 <increment_ledBoard_usage_min+0xd0>
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	unsigned char hourRollover = 0;
	
	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
80008770:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008774:	2f f8       	sub	r8,-1
80008776:	ef 68 ff fd 	st.b	r7[-3],r8
8000877a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000877e:	30 38       	mov	r8,3
80008780:	f0 09 18 00 	cp.b	r9,r8
80008784:	fe 98 fe a1 	brls	800084c6 <increment_ledBoard_usage_min+0x16>
				} //for each board side in the shelf (k)
			} //for each copy of usageShdw
		} //if (shelf[i].active)
	} //for (i=0; i<NUM_SHELVES; i++)
	
	if (hourRollover)
80008788:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000878c:	30 08       	mov	r8,0
8000878e:	f0 09 18 00 	cp.b	r9,r8
80008792:	c2 80       	breq	800087e2 <increment_ledBoard_usage_min+0x332>
	{
		usageShdw[hourPingPong].csum = calc_usage_csum(hourPingPong);
80008794:	4a 18       	lddpc	r8,80008818 <increment_ledBoard_usage_min+0x368>
80008796:	11 88       	ld.ub	r8,r8[0x0]
80008798:	10 96       	mov	r6,r8
8000879a:	4a 08       	lddpc	r8,80008818 <increment_ledBoard_usage_min+0x368>
8000879c:	11 88       	ld.ub	r8,r8[0x0]
8000879e:	10 9c       	mov	r12,r8
800087a0:	f0 1f 00 1f 	mcall	8000881c <increment_ledBoard_usage_min+0x36c>
800087a4:	18 98       	mov	r8,r12
800087a6:	49 aa       	lddpc	r10,8000880c <increment_ledBoard_usage_min+0x35c>
800087a8:	e0 69 06 61 	mov	r9,1633
800087ac:	ec 09 02 49 	mul	r9,r6,r9
800087b0:	f4 09 00 09 	add	r9,r10,r9
800087b4:	f2 c9 f9 a0 	sub	r9,r9,-1632
800087b8:	b2 88       	st.b	r9[0x0],r8
		write_usage_to_flash(hourPingPong);
800087ba:	49 88       	lddpc	r8,80008818 <increment_ledBoard_usage_min+0x368>
800087bc:	11 88       	ld.ub	r8,r8[0x0]
800087be:	10 9c       	mov	r12,r8
800087c0:	f0 1f 00 18 	mcall	80008820 <increment_ledBoard_usage_min+0x370>
		hourRollover = 0; //reset for next pass
800087c4:	30 08       	mov	r8,0
800087c6:	ef 68 ff fc 	st.b	r7[-4],r8
		hourPingPong++;
800087ca:	49 48       	lddpc	r8,80008818 <increment_ledBoard_usage_min+0x368>
800087cc:	11 88       	ld.ub	r8,r8[0x0]
800087ce:	2f f8       	sub	r8,-1
800087d0:	5c 58       	castu.b	r8
800087d2:	49 29       	lddpc	r9,80008818 <increment_ledBoard_usage_min+0x368>
800087d4:	b2 88       	st.b	r9[0x0],r8
		hourPingPong &= 1; //toggle between 0 (EVEN) and 1 (ODD)
800087d6:	49 18       	lddpc	r8,80008818 <increment_ledBoard_usage_min+0x368>
800087d8:	11 88       	ld.ub	r8,r8[0x0]
800087da:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800087de:	48 f9       	lddpc	r9,80008818 <increment_ledBoard_usage_min+0x368>
800087e0:	b2 88       	st.b	r9[0x0],r8
	else
	{
//17may15 TODO: this doesn't seem to work, maybe we can live without it for now.		write_usage_to_flash_no_erase(minPingPong); //all data should be the same except minuteBits, don't update the checksum when we are only updating minuteBits
	}
	
	minPingPong++;
800087e2:	49 18       	lddpc	r8,80008824 <increment_ledBoard_usage_min+0x374>
800087e4:	11 88       	ld.ub	r8,r8[0x0]
800087e6:	2f f8       	sub	r8,-1
800087e8:	5c 58       	castu.b	r8
800087ea:	48 f9       	lddpc	r9,80008824 <increment_ledBoard_usage_min+0x374>
800087ec:	b2 88       	st.b	r9[0x0],r8
	minPingPong &= 1; //toggle between 0 (EVEN) and 1 (ODD)
800087ee:	48 e8       	lddpc	r8,80008824 <increment_ledBoard_usage_min+0x374>
800087f0:	11 88       	ld.ub	r8,r8[0x0]
800087f2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800087f6:	48 c9       	lddpc	r9,80008824 <increment_ledBoard_usage_min+0x374>
800087f8:	b2 88       	st.b	r9[0x0],r8
}
800087fa:	2f dd       	sub	sp,-12
800087fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008800:	00 00       	add	r0,r0
80008802:	08 70       	tst	r0,r4
80008804:	00 00       	add	r0,r0
80008806:	08 2a       	rsub	r10,r4
80008808:	00 00       	add	r0,r0
8000880a:	15 94       	ld.ub	r4,r10[0x1]
8000880c:	00 00       	add	r0,r0
8000880e:	08 b8       	st.h	r4++,r8
80008810:	80 00       	ld.sh	r0,r0[0x0]
80008812:	78 06       	ld.w	r6,r12[0x0]
80008814:	80 00       	ld.sh	r0,r0[0x0]
80008816:	78 ce       	ld.w	lr,r12[0x30]
80008818:	00 00       	add	r0,r0
8000881a:	15 cc       	ld.ub	r12,r10[0x4]
8000881c:	80 00       	ld.sh	r0,r0[0x0]
8000881e:	7f 4c       	ld.w	r12,pc[0x50]
80008820:	80 00       	ld.sh	r0,r0[0x0]
80008822:	82 64       	ld.sh	r4,r1[0xc]
80008824:	00 00       	add	r0,r0
80008826:	08 94       	mov	r4,r4

80008828 <init_shelf_n_ledBrd_structs>:


void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
80008828:	eb cd 40 80 	pushm	r7,lr
8000882c:	1a 97       	mov	r7,sp
8000882e:	20 5d       	sub	sp,20
	
	for (int i=0; i<NUM_SHELVES; i++)
80008830:	30 08       	mov	r8,0
80008832:	ef 48 ff ec 	st.w	r7[-20],r8
80008836:	c2 b8       	rjmp	8000888c <init_shelf_n_ledBrd_structs+0x64>
	{
		shelf[i].active = 0;
80008838:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000883c:	fe fa 02 ac 	ld.w	r10,pc[684]
80008840:	12 98       	mov	r8,r9
80008842:	a3 68       	lsl	r8,0x2
80008844:	12 08       	add	r8,r9
80008846:	f4 08 00 09 	add	r9,r10,r8
8000884a:	30 08       	mov	r8,0
8000884c:	b2 88       	st.b	r9[0x0],r8
		shelf[i].devicesPresent = 0;
8000884e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008852:	fe fa 02 96 	ld.w	r10,pc[662]
80008856:	12 98       	mov	r8,r9
80008858:	a3 68       	lsl	r8,0x2
8000885a:	12 08       	add	r8,r9
8000885c:	f4 08 00 08 	add	r8,r10,r8
80008860:	f0 c9 ff fd 	sub	r9,r8,-3
80008864:	30 08       	mov	r8,0
80008866:	b2 88       	st.b	r9[0x0],r8
		shelf[i].present = 0;
80008868:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000886c:	fe fa 02 7c 	ld.w	r10,pc[636]
80008870:	12 98       	mov	r8,r9
80008872:	a3 68       	lsl	r8,0x2
80008874:	12 08       	add	r8,r9
80008876:	f4 08 00 08 	add	r8,r10,r8
8000887a:	f0 c9 ff fc 	sub	r9,r8,-4
8000887e:	30 08       	mov	r8,0
80008880:	b2 88       	st.b	r9[0x0],r8

void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
	
	for (int i=0; i<NUM_SHELVES; i++)
80008882:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008886:	2f f8       	sub	r8,-1
80008888:	ef 48 ff ec 	st.w	r7[-20],r8
8000888c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008890:	58 38       	cp.w	r8,3
80008892:	fe 9a ff d3 	brle	80008838 <init_shelf_n_ledBrd_structs+0x10>
		shelf[i].active = 0;
		shelf[i].devicesPresent = 0;
		shelf[i].present = 0;
	}
	
	shelf[0].tLedIdx = 0;
80008896:	fe f9 02 52 	ld.w	r9,pc[594]
8000889a:	30 08       	mov	r8,0
8000889c:	b2 98       	st.b	r9[0x1],r8
	shelf[0].bLedIdx = 1;
8000889e:	fe f9 02 4a 	ld.w	r9,pc[586]
800088a2:	30 18       	mov	r8,1
800088a4:	b2 a8       	st.b	r9[0x2],r8
	shelf[1].tLedIdx = 1;
800088a6:	fe f9 02 42 	ld.w	r9,pc[578]
800088aa:	30 18       	mov	r8,1
800088ac:	b2 e8       	st.b	r9[0x6],r8
	shelf[1].bLedIdx = 2;
800088ae:	fe f9 02 3a 	ld.w	r9,pc[570]
800088b2:	30 28       	mov	r8,2
800088b4:	b2 f8       	st.b	r9[0x7],r8
	shelf[2].tLedIdx = 2;
800088b6:	fe f9 02 32 	ld.w	r9,pc[562]
800088ba:	30 28       	mov	r8,2
800088bc:	f3 68 00 0b 	st.b	r9[11],r8
	shelf[2].bLedIdx = 3;
800088c0:	fe f9 02 28 	ld.w	r9,pc[552]
800088c4:	30 38       	mov	r8,3
800088c6:	f3 68 00 0c 	st.b	r9[12],r8
	shelf[3].tLedIdx = 3;
800088ca:	fe f9 02 1e 	ld.w	r9,pc[542]
800088ce:	30 38       	mov	r8,3
800088d0:	f3 68 00 10 	st.b	r9[16],r8
	shelf[3].bLedIdx = 4;
800088d4:	fe f9 02 14 	ld.w	r9,pc[532]
800088d8:	30 48       	mov	r8,4
800088da:	f3 68 00 11 	st.b	r9[17],r8
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
800088de:	30 08       	mov	r8,0
800088e0:	ef 48 ff f0 	st.w	r7[-16],r8
800088e4:	c1 48       	rjmp	8000890c <init_shelf_n_ledBrd_structs+0xe4>
	{
		ledBrd[i].present = 0;
800088e6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800088ea:	fe fa 02 02 	ld.w	r10,pc[514]
800088ee:	12 98       	mov	r8,r9
800088f0:	a3 78       	lsl	r8,0x3
800088f2:	12 18       	sub	r8,r9
800088f4:	a1 78       	lsl	r8,0x1
800088f6:	f4 08 00 08 	add	r8,r10,r8
800088fa:	f0 c9 ff f8 	sub	r9,r8,-8
800088fe:	30 08       	mov	r8,0
80008900:	b2 88       	st.b	r9[0x0],r8
	shelf[2].tLedIdx = 2;
	shelf[2].bLedIdx = 3;
	shelf[3].tLedIdx = 3;
	shelf[3].bLedIdx = 4;
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80008902:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008906:	2f f8       	sub	r8,-1
80008908:	ef 48 ff f0 	st.w	r7[-16],r8
8000890c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008910:	58 48       	cp.w	r8,4
80008912:	fe 9a ff ea 	brle	800088e6 <init_shelf_n_ledBrd_structs+0xbe>
	{
		ledBrd[i].present = 0;
	}
	
	ledBrd[0].uSideIdx = 0xFF;
80008916:	4f 69       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008918:	3f f8       	mov	r8,-1
8000891a:	f3 68 00 0a 	st.b	r9[10],r8
	ledBrd[0].lSideIdx = 0;
8000891e:	4f 49       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008920:	30 08       	mov	r8,0
80008922:	f3 68 00 0b 	st.b	r9[11],r8
	ledBrd[1].uSideIdx = 1;
80008926:	4f 29       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008928:	30 18       	mov	r8,1
8000892a:	f3 68 00 18 	st.b	r9[24],r8
	ledBrd[1].lSideIdx = 2;
8000892e:	4f 09       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008930:	30 28       	mov	r8,2
80008932:	f3 68 00 19 	st.b	r9[25],r8
	ledBrd[2].uSideIdx = 3;
80008936:	4e e9       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008938:	30 38       	mov	r8,3
8000893a:	f3 68 00 26 	st.b	r9[38],r8
	ledBrd[2].lSideIdx = 4;
8000893e:	4e c9       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008940:	30 48       	mov	r8,4
80008942:	f3 68 00 27 	st.b	r9[39],r8
	ledBrd[3].uSideIdx = 5;
80008946:	4e a9       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008948:	30 58       	mov	r8,5
8000894a:	f3 68 00 34 	st.b	r9[52],r8
	ledBrd[3].lSideIdx = 6;
8000894e:	4e 89       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008950:	30 68       	mov	r8,6
80008952:	f3 68 00 35 	st.b	r9[53],r8
	ledBrd[4].uSideIdx = 7;
80008956:	4e 69       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008958:	30 78       	mov	r8,7
8000895a:	f3 68 00 42 	st.b	r9[66],r8
	ledBrd[4].lSideIdx = 0xFF;
8000895e:	4e 49       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008960:	3f f8       	mov	r8,-1
80008962:	f3 68 00 43 	st.b	r9[67],r8

	ledBrd[0].uSideShelfIdx = 0xFF;
80008966:	4e 29       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008968:	3f f8       	mov	r8,-1
8000896a:	f3 68 00 0c 	st.b	r9[12],r8
	ledBrd[1].uSideShelfIdx = 0;
8000896e:	4e 09       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008970:	30 08       	mov	r8,0
80008972:	f3 68 00 1a 	st.b	r9[26],r8
	ledBrd[2].uSideShelfIdx = 1;
80008976:	4d e9       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008978:	30 18       	mov	r8,1
8000897a:	f3 68 00 28 	st.b	r9[40],r8
	ledBrd[3].uSideShelfIdx = 2;
8000897e:	4d c9       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008980:	30 28       	mov	r8,2
80008982:	f3 68 00 36 	st.b	r9[54],r8
	ledBrd[4].uSideShelfIdx = 3;
80008986:	4d a9       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008988:	30 38       	mov	r8,3
8000898a:	f3 68 00 44 	st.b	r9[68],r8
 
	ledBrd[0].lSideShelfIdx = 0;
8000898e:	4d 89       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008990:	30 08       	mov	r8,0
80008992:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrd[1].lSideShelfIdx = 1;
80008996:	4d 69       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
80008998:	30 18       	mov	r8,1
8000899a:	f3 68 00 1b 	st.b	r9[27],r8
	ledBrd[2].lSideShelfIdx = 2;
8000899e:	4d 49       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
800089a0:	30 28       	mov	r8,2
800089a2:	f3 68 00 29 	st.b	r9[41],r8
	ledBrd[3].lSideShelfIdx = 3;
800089a6:	4d 29       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
800089a8:	30 38       	mov	r8,3
800089aa:	f3 68 00 37 	st.b	r9[55],r8
	ledBrd[4].lSideShelfIdx = 0xFF;
800089ae:	4d 09       	lddpc	r9,80008aec <init_shelf_n_ledBrd_structs+0x2c4>
800089b0:	3f f8       	mov	r8,-1
800089b2:	f3 68 00 45 	st.b	r9[69],r8
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
800089b6:	30 08       	mov	r8,0
800089b8:	ef 48 ff f4 	st.w	r7[-12],r8
800089bc:	c2 88       	rjmp	80008a0c <init_shelf_n_ledBrd_structs+0x1e4>
	{
		ledBrdSide[i].maxUsageReached = 0;
800089be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800089c2:	4c ca       	lddpc	r10,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
800089c4:	12 98       	mov	r8,r9
800089c6:	a3 68       	lsl	r8,0x2
800089c8:	12 08       	add	r8,r9
800089ca:	f4 08 00 08 	add	r8,r10,r8
800089ce:	f0 c9 ff fe 	sub	r9,r8,-2
800089d2:	30 08       	mov	r8,0
800089d4:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].sanitizeMinutes = 0;
800089d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800089da:	4c 6a       	lddpc	r10,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
800089dc:	12 98       	mov	r8,r9
800089de:	a3 68       	lsl	r8,0x2
800089e0:	12 08       	add	r8,r9
800089e2:	f4 08 00 09 	add	r9,r10,r8
800089e6:	30 08       	mov	r8,0
800089e8:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].ushdwIdx = 0xFF;
800089ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800089ee:	4c 1a       	lddpc	r10,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
800089f0:	12 98       	mov	r8,r9
800089f2:	a3 68       	lsl	r8,0x2
800089f4:	12 08       	add	r8,r9
800089f6:	f4 08 00 08 	add	r8,r10,r8
800089fa:	f0 c9 ff ff 	sub	r9,r8,-1
800089fe:	3f f8       	mov	r8,-1
80008a00:	b2 88       	st.b	r9[0x0],r8
	ledBrd[2].lSideShelfIdx = 2;
	ledBrd[3].lSideShelfIdx = 3;
	ledBrd[4].lSideShelfIdx = 0xFF;
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80008a02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008a06:	2f f8       	sub	r8,-1
80008a08:	ef 48 ff f4 	st.w	r7[-12],r8
80008a0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008a10:	58 78       	cp.w	r8,7
80008a12:	fe 9a ff d6 	brle	800089be <init_shelf_n_ledBrd_structs+0x196>
		ledBrdSide[i].maxUsageReached = 0;
		ledBrdSide[i].sanitizeMinutes = 0;
		ledBrdSide[i].ushdwIdx = 0xFF;
	}
	
	ledBrdSide[0].boardIdx = 0;
80008a16:	4b 79       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a18:	30 08       	mov	r8,0
80008a1a:	b2 c8       	st.b	r9[0x4],r8
	ledBrdSide[1].boardIdx = 1;
80008a1c:	4b 59       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a1e:	30 18       	mov	r8,1
80008a20:	f3 68 00 09 	st.b	r9[9],r8
	ledBrdSide[2].boardIdx = 1;
80008a24:	4b 39       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a26:	30 18       	mov	r8,1
80008a28:	f3 68 00 0e 	st.b	r9[14],r8
	ledBrdSide[3].boardIdx = 2;
80008a2c:	4b 19       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a2e:	30 28       	mov	r8,2
80008a30:	f3 68 00 13 	st.b	r9[19],r8
	ledBrdSide[4].boardIdx = 2;
80008a34:	4a f9       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a36:	30 28       	mov	r8,2
80008a38:	f3 68 00 18 	st.b	r9[24],r8
	ledBrdSide[5].boardIdx = 3;
80008a3c:	4a d9       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a3e:	30 38       	mov	r8,3
80008a40:	f3 68 00 1d 	st.b	r9[29],r8
	ledBrdSide[6].boardIdx = 3;
80008a44:	4a b9       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a46:	30 38       	mov	r8,3
80008a48:	f3 68 00 22 	st.b	r9[34],r8
	ledBrdSide[7].boardIdx = 4;
80008a4c:	4a 99       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a4e:	30 48       	mov	r8,4
80008a50:	f3 68 00 27 	st.b	r9[39],r8
	

	ledBrdSide[0].shelfIdx = 0;
80008a54:	4a 79       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a56:	30 08       	mov	r8,0
80008a58:	b2 b8       	st.b	r9[0x3],r8
	ledBrdSide[1].shelfIdx = 0;
80008a5a:	4a 69       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a5c:	30 08       	mov	r8,0
80008a5e:	f3 68 00 08 	st.b	r9[8],r8
	ledBrdSide[2].shelfIdx = 1;
80008a62:	4a 49       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a64:	30 18       	mov	r8,1
80008a66:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrdSide[3].shelfIdx = 1;
80008a6a:	4a 29       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a6c:	30 18       	mov	r8,1
80008a6e:	f3 68 00 12 	st.b	r9[18],r8
	ledBrdSide[4].shelfIdx = 2;
80008a72:	4a 09       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a74:	30 28       	mov	r8,2
80008a76:	f3 68 00 17 	st.b	r9[23],r8
	ledBrdSide[5].shelfIdx = 2;
80008a7a:	49 e9       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a7c:	30 28       	mov	r8,2
80008a7e:	f3 68 00 1c 	st.b	r9[28],r8
	ledBrdSide[6].shelfIdx = 3;
80008a82:	49 c9       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a84:	30 38       	mov	r8,3
80008a86:	f3 68 00 21 	st.b	r9[33],r8
	ledBrdSide[7].shelfIdx = 3;
80008a8a:	49 a9       	lddpc	r9,80008af0 <init_shelf_n_ledBrd_structs+0x2c8>
80008a8c:	30 38       	mov	r8,3
80008a8e:	f3 68 00 26 	st.b	r9[38],r8
	
	for (int i=0; i<2; i++)
80008a92:	30 08       	mov	r8,0
80008a94:	ef 48 ff f8 	st.w	r7[-8],r8
80008a98:	c1 f8       	rjmp	80008ad6 <init_shelf_n_ledBrd_structs+0x2ae>
	{
		for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
80008a9a:	30 08       	mov	r8,0
80008a9c:	ef 48 ff fc 	st.w	r7[-4],r8
80008aa0:	c1 18       	rjmp	80008ac2 <init_shelf_n_ledBrd_structs+0x29a>
		{
			usageIdx[i][j] = NO_LED_BOARD_PRESENT;
80008aa2:	ee fa ff f8 	ld.w	r10,r7[-8]
80008aa6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008aaa:	49 39       	lddpc	r9,80008af4 <init_shelf_n_ledBrd_structs+0x2cc>
80008aac:	a3 7a       	lsl	r10,0x3
80008aae:	f4 08 00 08 	add	r8,r10,r8
80008ab2:	10 09       	add	r9,r8
80008ab4:	3f f8       	mov	r8,-1
80008ab6:	b2 88       	st.b	r9[0x0],r8
	ledBrdSide[6].shelfIdx = 3;
	ledBrdSide[7].shelfIdx = 3;
	
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
80008ab8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008abc:	2f f8       	sub	r8,-1
80008abe:	ef 48 ff fc 	st.w	r7[-4],r8
80008ac2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ac6:	58 78       	cp.w	r8,7
80008ac8:	fe 9a ff ed 	brle	80008aa2 <init_shelf_n_ledBrd_structs+0x27a>
	ledBrdSide[4].shelfIdx = 2;
	ledBrdSide[5].shelfIdx = 2;
	ledBrdSide[6].shelfIdx = 3;
	ledBrdSide[7].shelfIdx = 3;
	
	for (int i=0; i<2; i++)
80008acc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ad0:	2f f8       	sub	r8,-1
80008ad2:	ef 48 ff f8 	st.w	r7[-8],r8
80008ad6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ada:	58 18       	cp.w	r8,1
80008adc:	fe 9a ff df 	brle	80008a9a <init_shelf_n_ledBrd_structs+0x272>
		{
			usageIdx[i][j] = NO_LED_BOARD_PRESENT;
		}
	}

}
80008ae0:	2f bd       	sub	sp,-20
80008ae2:	e3 cd 80 80 	ldm	sp++,r7,pc
80008ae6:	00 00       	add	r0,r0
80008ae8:	00 00       	add	r0,r0
80008aea:	08 70       	tst	r0,r4
80008aec:	00 00       	add	r0,r0
80008aee:	08 2a       	rsub	r10,r4
80008af0:	00 00       	add	r0,r0
80008af2:	15 94       	ld.ub	r4,r10[0x1]
80008af4:	00 00       	add	r0,r0
80008af6:	08 9c       	mov	r12,r4

80008af8 <load_usageIdx_to_ledBrdSide>:

void load_usageIdx_to_ledBrdSide(unsigned char sel);
void load_usageIdx_to_ledBrdSide(unsigned char sel)
{
80008af8:	eb cd 40 80 	pushm	r7,lr
80008afc:	1a 97       	mov	r7,sp
80008afe:	20 2d       	sub	sp,8
80008b00:	18 98       	mov	r8,r12
80008b02:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80008b06:	30 08       	mov	r8,0
80008b08:	ef 48 ff fc 	st.w	r7[-4],r8
80008b0c:	c1 d8       	rjmp	80008b46 <load_usageIdx_to_ledBrdSide+0x4e>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[sel][i];
80008b0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008b12:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80008b16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b1a:	49 0a       	lddpc	r10,80008b58 <load_usageIdx_to_ledBrdSide+0x60>
80008b1c:	a3 7b       	lsl	r11,0x3
80008b1e:	f6 08 00 08 	add	r8,r11,r8
80008b22:	f4 08 00 08 	add	r8,r10,r8
80008b26:	11 8a       	ld.ub	r10,r8[0x0]
80008b28:	48 db       	lddpc	r11,80008b5c <load_usageIdx_to_ledBrdSide+0x64>
80008b2a:	12 98       	mov	r8,r9
80008b2c:	a3 68       	lsl	r8,0x2
80008b2e:	12 08       	add	r8,r9
80008b30:	f6 08 00 08 	add	r8,r11,r8
80008b34:	f0 c9 ff ff 	sub	r9,r8,-1
80008b38:	14 98       	mov	r8,r10
80008b3a:	b2 88       	st.b	r9[0x0],r8
}

void load_usageIdx_to_ledBrdSide(unsigned char sel);
void load_usageIdx_to_ledBrdSide(unsigned char sel)
{
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80008b3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b40:	2f f8       	sub	r8,-1
80008b42:	ef 48 ff fc 	st.w	r7[-4],r8
80008b46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b4a:	58 78       	cp.w	r8,7
80008b4c:	fe 9a ff e1 	brle	80008b0e <load_usageIdx_to_ledBrdSide+0x16>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[sel][i];
	}
}
80008b50:	2f ed       	sub	sp,-8
80008b52:	e3 cd 80 80 	ldm	sp++,r7,pc
80008b56:	00 00       	add	r0,r0
80008b58:	00 00       	add	r0,r0
80008b5a:	08 9c       	mov	r12,r4
80008b5c:	00 00       	add	r0,r0
80008b5e:	15 94       	ld.ub	r4,r10[0x1]

80008b60 <init_led_board_info>:


void init_led_board_info(void);
void init_led_board_info(void)
{
80008b60:	eb cd 40 c0 	pushm	r6-r7,lr
80008b64:	1a 97       	mov	r7,sp
80008b66:	20 7d       	sub	sp,28
	unsigned char usage0good, usage1good;
	unsigned int usage0cnt, usage1cnt;
	unsigned char newer, older, previouslyOlder;
	unsigned char good, bad, previouslyBad;
	
	init_shelf_n_ledBrd_structs();
80008b68:	f0 1f 00 cd 	mcall	80008e9c <init_led_board_info+0x33c>
	
	read_led_board_serial_ids();
80008b6c:	f0 1f 00 cd 	mcall	80008ea0 <init_led_board_info+0x340>
	usage0good = read_usage_struct(0);
80008b70:	30 0c       	mov	r12,0
80008b72:	f0 1f 00 cd 	mcall	80008ea4 <init_led_board_info+0x344>
80008b76:	18 98       	mov	r8,r12
80008b78:	ef 68 ff e6 	st.b	r7[-26],r8
	usage1good = read_usage_struct(1);
80008b7c:	30 1c       	mov	r12,1
80008b7e:	f0 1f 00 ca 	mcall	80008ea4 <init_led_board_info+0x344>
80008b82:	18 98       	mov	r8,r12
80008b84:	ef 68 ff e7 	st.b	r7[-25],r8
	
	if (usage0good)
80008b88:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80008b8c:	30 08       	mov	r8,0
80008b8e:	f0 09 18 00 	cp.b	r9,r8
80008b92:	c0 50       	breq	80008b9c <init_led_board_info+0x3c>
	{
		load_usage_indeces(0);
80008b94:	30 0c       	mov	r12,0
80008b96:	f0 1f 00 c5 	mcall	80008ea8 <init_led_board_info+0x348>
80008b9a:	c2 68       	rjmp	80008be6 <init_led_board_info+0x86>
	}
	else
	{
		memset(&usageShdw[0], 0x00, sizeof(usageShdw[0]));
80008b9c:	e0 6a 06 61 	mov	r10,1633
80008ba0:	30 0b       	mov	r11,0
80008ba2:	fe fc 03 0a 	ld.w	r12,pc[778]
80008ba6:	f0 1f 00 c3 	mcall	80008eb0 <init_led_board_info+0x350>
		
		for (int i=0; i<(NUM_LED_BOARD_SIDES * NUM_SETS_LED_BOARD_SIDES); i++)
80008baa:	30 08       	mov	r8,0
80008bac:	ef 48 ff f8 	st.w	r7[-8],r8
80008bb0:	c1 58       	rjmp	80008bda <init_led_board_info+0x7a>
		{
			reset_minutes(&usageShdw[0].u[i].minuteBits[0]);
80008bb2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008bb6:	12 98       	mov	r8,r9
80008bb8:	a5 68       	lsl	r8,0x4
80008bba:	12 08       	add	r8,r9
80008bbc:	f0 c9 ff f8 	sub	r9,r8,-8
80008bc0:	fe f8 02 ec 	ld.w	r8,pc[748]
80008bc4:	f2 08 00 08 	add	r8,r9,r8
80008bc8:	2f f8       	sub	r8,-1
80008bca:	10 9c       	mov	r12,r8
80008bcc:	f0 1f 00 ba 	mcall	80008eb4 <init_led_board_info+0x354>
	}
	else
	{
		memset(&usageShdw[0], 0x00, sizeof(usageShdw[0]));
		
		for (int i=0; i<(NUM_LED_BOARD_SIDES * NUM_SETS_LED_BOARD_SIDES); i++)
80008bd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bd4:	2f f8       	sub	r8,-1
80008bd6:	ef 48 ff f8 	st.w	r7[-8],r8
80008bda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bde:	e0 48 00 5f 	cp.w	r8,95
80008be2:	fe 9a ff e8 	brle	80008bb2 <init_led_board_info+0x52>
		{
			reset_minutes(&usageShdw[0].u[i].minuteBits[0]);
		}
	}
	
	if (usage1good)
80008be6:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80008bea:	30 08       	mov	r8,0
80008bec:	f0 09 18 00 	cp.b	r9,r8
80008bf0:	c0 50       	breq	80008bfa <init_led_board_info+0x9a>
	{
		load_usage_indeces(1);
80008bf2:	30 1c       	mov	r12,1
80008bf4:	f0 1f 00 ad 	mcall	80008ea8 <init_led_board_info+0x348>
80008bf8:	c2 98       	rjmp	80008c4a <init_led_board_info+0xea>
	}
	else
	{
		memset(&usageShdw[1], 0x00, sizeof(usageShdw[1]));
80008bfa:	fe f8 02 b2 	ld.w	r8,pc[690]
80008bfe:	f0 c8 f9 9f 	sub	r8,r8,-1633
80008c02:	e0 6a 06 61 	mov	r10,1633
80008c06:	30 0b       	mov	r11,0
80008c08:	10 9c       	mov	r12,r8
80008c0a:	f0 1f 00 aa 	mcall	80008eb0 <init_led_board_info+0x350>

		for (int i=0; i<(NUM_LED_BOARD_SIDES * NUM_SETS_LED_BOARD_SIDES); i++)
80008c0e:	30 08       	mov	r8,0
80008c10:	ef 48 ff fc 	st.w	r7[-4],r8
80008c14:	c1 58       	rjmp	80008c3e <init_led_board_info+0xde>
		{
			reset_minutes(&usageShdw[1].u[i].minuteBits[0]);
80008c16:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008c1a:	12 98       	mov	r8,r9
80008c1c:	a5 68       	lsl	r8,0x4
80008c1e:	12 08       	add	r8,r9
80008c20:	f0 c9 f9 97 	sub	r9,r8,-1641
80008c24:	fe f8 02 88 	ld.w	r8,pc[648]
80008c28:	f2 08 00 08 	add	r8,r9,r8
80008c2c:	2f f8       	sub	r8,-1
80008c2e:	10 9c       	mov	r12,r8
80008c30:	f0 1f 00 a1 	mcall	80008eb4 <init_led_board_info+0x354>
	}
	else
	{
		memset(&usageShdw[1], 0x00, sizeof(usageShdw[1]));

		for (int i=0; i<(NUM_LED_BOARD_SIDES * NUM_SETS_LED_BOARD_SIDES); i++)
80008c34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c38:	2f f8       	sub	r8,-1
80008c3a:	ef 48 ff fc 	st.w	r7[-4],r8
80008c3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c42:	e0 48 00 5f 	cp.w	r8,95
80008c46:	fe 9a ff e8 	brle	80008c16 <init_led_board_info+0xb6>
		{
			reset_minutes(&usageShdw[1].u[i].minuteBits[0]);
		}
	}
	
	if ((!usage0good) && (!usage1good)) //Chassis is probably powering up for the first time
80008c4a:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80008c4e:	30 08       	mov	r8,0
80008c50:	f0 09 18 00 	cp.b	r9,r8
80008c54:	c3 e1       	brne	80008cd0 <init_led_board_info+0x170>
80008c56:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80008c5a:	30 08       	mov	r8,0
80008c5c:	f0 09 18 00 	cp.b	r9,r8
80008c60:	c3 81       	brne	80008cd0 <init_led_board_info+0x170>
	{
		if (test_flash(0) == ERROR)
80008c62:	30 0c       	mov	r12,0
80008c64:	f0 1f 00 95 	mcall	80008eb8 <init_led_board_info+0x358>
80008c68:	18 98       	mov	r8,r12
80008c6a:	10 99       	mov	r9,r8
80008c6c:	30 18       	mov	r8,1
80008c6e:	f0 09 18 00 	cp.b	r9,r8
80008c72:	c0 31       	brne	80008c78 <init_led_board_info+0x118>
		{
			chassis_error();
80008c74:	f0 1f 00 92 	mcall	80008ebc <init_led_board_info+0x35c>
		}
		if (test_flash(1) == ERROR)
80008c78:	30 1c       	mov	r12,1
80008c7a:	f0 1f 00 90 	mcall	80008eb8 <init_led_board_info+0x358>
80008c7e:	18 98       	mov	r8,r12
80008c80:	10 99       	mov	r9,r8
80008c82:	30 18       	mov	r8,1
80008c84:	f0 09 18 00 	cp.b	r9,r8
80008c88:	c0 31       	brne	80008c8e <init_led_board_info+0x12e>
		{
			chassis_error();
80008c8a:	f0 1f 00 8d 	mcall	80008ebc <init_led_board_info+0x35c>
		}
		add_new_led_board_sides_to_usage(0);
80008c8e:	30 0c       	mov	r12,0
80008c90:	f0 1f 00 8c 	mcall	80008ec0 <init_led_board_info+0x360>
		load_usageIdx_to_ledBrdSide(0);
80008c94:	30 0c       	mov	r12,0
80008c96:	f0 1f 00 8c 	mcall	80008ec4 <init_led_board_info+0x364>
		usageShdw[0].csum = calc_usage_csum(0);
80008c9a:	30 0c       	mov	r12,0
80008c9c:	f0 1f 00 8b 	mcall	80008ec8 <init_led_board_info+0x368>
80008ca0:	18 98       	mov	r8,r12
80008ca2:	fe f9 02 0a 	ld.w	r9,pc[522]
80008ca6:	f3 68 06 60 	st.b	r9[1632],r8
		copy_usage_to_usage(1,0);
80008caa:	30 0b       	mov	r11,0
80008cac:	30 1c       	mov	r12,1
80008cae:	f0 1f 00 88 	mcall	80008ecc <init_led_board_info+0x36c>
		write_usage_to_flash(0);
80008cb2:	30 0c       	mov	r12,0
80008cb4:	f0 1f 00 87 	mcall	80008ed0 <init_led_board_info+0x370>
		write_usage_to_flash(1);
80008cb8:	30 1c       	mov	r12,1
80008cba:	f0 1f 00 86 	mcall	80008ed0 <init_led_board_info+0x370>
		minPingPong = 0;
80008cbe:	fe f9 02 16 	ld.w	r9,pc[534]
80008cc2:	30 08       	mov	r8,0
80008cc4:	b2 88       	st.b	r9[0x0],r8
		hourPingPong = 0;
80008cc6:	fe f9 02 12 	ld.w	r9,pc[530]
80008cca:	30 08       	mov	r8,0
80008ccc:	b2 88       	st.b	r9[0x0],r8
		{
			reset_minutes(&usageShdw[1].u[i].minuteBits[0]);
		}
	}
	
	if ((!usage0good) && (!usage1good)) //Chassis is probably powering up for the first time
80008cce:	ce 48       	rjmp	80008e96 <init_led_board_info+0x336>
		write_usage_to_flash(1);
		minPingPong = 0;
		hourPingPong = 0;
		
	}
	else if (usage0good && usage1good) //Both usage structs are good, find the newer one
80008cd0:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80008cd4:	30 08       	mov	r8,0
80008cd6:	f0 09 18 00 	cp.b	r9,r8
80008cda:	c7 90       	breq	80008dcc <init_led_board_info+0x26c>
80008cdc:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80008ce0:	30 08       	mov	r8,0
80008ce2:	f0 09 18 00 	cp.b	r9,r8
80008ce6:	c7 30       	breq	80008dcc <init_led_board_info+0x26c>
	{
		usage0cnt = calc_usage_current_led_boards(0);
80008ce8:	30 0c       	mov	r12,0
80008cea:	f0 1f 00 7d 	mcall	80008edc <init_led_board_info+0x37c>
80008cee:	18 98       	mov	r8,r12
80008cf0:	ef 48 ff e8 	st.w	r7[-24],r8
		usage1cnt = calc_usage_current_led_boards(1);
80008cf4:	30 1c       	mov	r12,1
80008cf6:	f0 1f 00 7a 	mcall	80008edc <init_led_board_info+0x37c>
80008cfa:	18 98       	mov	r8,r12
80008cfc:	ef 48 ff ec 	st.w	r7[-20],r8
		
		if (usage0cnt >= usage1cnt)
80008d00:	ee f9 ff e8 	ld.w	r9,r7[-24]
80008d04:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008d08:	10 39       	cp.w	r9,r8
80008d0a:	c0 53       	brcs	80008d14 <init_led_board_info+0x1b4>
		{
			newer = 0;
80008d0c:	30 08       	mov	r8,0
80008d0e:	ef 68 ff f2 	st.b	r7[-14],r8
80008d12:	c0 48       	rjmp	80008d1a <init_led_board_info+0x1ba>
		}
		else
		{
			newer = 1;
80008d14:	30 18       	mov	r8,1
80008d16:	ef 68 ff f2 	st.b	r7[-14],r8
		}
		older = newer ^ 1; //older is the opposite of newer
80008d1a:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80008d1e:	ec 18 00 01 	eorl	r8,0x1
80008d22:	ef 68 ff f3 	st.b	r7[-13],r8
		
		if (test_flash(older) == ERROR)
80008d26:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80008d2a:	10 9c       	mov	r12,r8
80008d2c:	f0 1f 00 63 	mcall	80008eb8 <init_led_board_info+0x358>
80008d30:	18 98       	mov	r8,r12
80008d32:	10 99       	mov	r9,r8
80008d34:	30 18       	mov	r8,1
80008d36:	f0 09 18 00 	cp.b	r9,r8
80008d3a:	c0 31       	brne	80008d40 <init_led_board_info+0x1e0>
		{
			chassis_error();
80008d3c:	f0 1f 00 60 	mcall	80008ebc <init_led_board_info+0x35c>
		}

		add_new_led_board_sides_to_usage(newer);
80008d40:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80008d44:	10 9c       	mov	r12,r8
80008d46:	f0 1f 00 5f 	mcall	80008ec0 <init_led_board_info+0x360>
		load_usageIdx_to_ledBrdSide(newer);
80008d4a:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80008d4e:	10 9c       	mov	r12,r8
80008d50:	f0 1f 00 5d 	mcall	80008ec4 <init_led_board_info+0x364>
		usageShdw[newer].csum = calc_usage_csum(newer);
80008d54:	ef 36 ff f2 	ld.ub	r6,r7[-14]
80008d58:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80008d5c:	10 9c       	mov	r12,r8
80008d5e:	f0 1f 00 5b 	mcall	80008ec8 <init_led_board_info+0x368>
80008d62:	18 98       	mov	r8,r12
80008d64:	4d 2a       	lddpc	r10,80008eac <init_led_board_info+0x34c>
80008d66:	e0 69 06 61 	mov	r9,1633
80008d6a:	ec 09 02 49 	mul	r9,r6,r9
80008d6e:	f4 09 00 09 	add	r9,r10,r9
80008d72:	f2 c9 f9 a0 	sub	r9,r9,-1632
80008d76:	b2 88       	st.b	r9[0x0],r8
		copy_usage_to_usage(older, newer);
80008d78:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80008d7c:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80008d80:	12 9b       	mov	r11,r9
80008d82:	10 9c       	mov	r12,r8
80008d84:	f0 1f 00 52 	mcall	80008ecc <init_led_board_info+0x36c>
		previouslyOlder = older;
80008d88:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80008d8c:	ef 68 ff f4 	st.b	r7[-12],r8
		write_usage_to_flash(previouslyOlder);
80008d90:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008d94:	10 9c       	mov	r12,r8
80008d96:	f0 1f 00 4f 	mcall	80008ed0 <init_led_board_info+0x370>
		if (test_flash(newer) == ERROR)
80008d9a:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80008d9e:	10 9c       	mov	r12,r8
80008da0:	f0 1f 00 46 	mcall	80008eb8 <init_led_board_info+0x358>
80008da4:	18 98       	mov	r8,r12
80008da6:	10 99       	mov	r9,r8
80008da8:	30 18       	mov	r8,1
80008daa:	f0 09 18 00 	cp.b	r9,r8
80008dae:	c0 31       	brne	80008db4 <init_led_board_info+0x254>
		{
			chassis_error();
80008db0:	f0 1f 00 43 	mcall	80008ebc <init_led_board_info+0x35c>
		}

		write_usage_to_flash(newer);
80008db4:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80008db8:	10 9c       	mov	r12,r8
80008dba:	f0 1f 00 46 	mcall	80008ed0 <init_led_board_info+0x370>
		minPingPong = 0;
80008dbe:	4c 69       	lddpc	r9,80008ed4 <init_led_board_info+0x374>
80008dc0:	30 08       	mov	r8,0
80008dc2:	b2 88       	st.b	r9[0x0],r8
		hourPingPong = 0;
80008dc4:	4c 59       	lddpc	r9,80008ed8 <init_led_board_info+0x378>
80008dc6:	30 08       	mov	r8,0
80008dc8:	b2 88       	st.b	r9[0x0],r8
		write_usage_to_flash(1);
		minPingPong = 0;
		hourPingPong = 0;
		
	}
	else if (usage0good && usage1good) //Both usage structs are good, find the newer one
80008dca:	c6 68       	rjmp	80008e96 <init_led_board_info+0x336>
		hourPingPong = 0;
		
	}
	else //Only one usage struct is good, the other was probably corrupted during a power-down while sanitizing
	{
		if (usage0good)
80008dcc:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80008dd0:	30 08       	mov	r8,0
80008dd2:	f0 09 18 00 	cp.b	r9,r8
80008dd6:	c0 50       	breq	80008de0 <init_led_board_info+0x280>
		{
			good = 0;
80008dd8:	30 08       	mov	r8,0
80008dda:	ef 68 ff f5 	st.b	r7[-11],r8
80008dde:	c0 48       	rjmp	80008de6 <init_led_board_info+0x286>
		}
		else
		{
			good = 1;
80008de0:	30 18       	mov	r8,1
80008de2:	ef 68 ff f5 	st.b	r7[-11],r8
		}
		bad = good ^ 1; //bad is the opposite of good
80008de6:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80008dea:	ec 18 00 01 	eorl	r8,0x1
80008dee:	ef 68 ff f6 	st.b	r7[-10],r8
		
		if (test_flash(bad) == ERROR)
80008df2:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80008df6:	10 9c       	mov	r12,r8
80008df8:	f0 1f 00 30 	mcall	80008eb8 <init_led_board_info+0x358>
80008dfc:	18 98       	mov	r8,r12
80008dfe:	10 99       	mov	r9,r8
80008e00:	30 18       	mov	r8,1
80008e02:	f0 09 18 00 	cp.b	r9,r8
80008e06:	c0 31       	brne	80008e0c <init_led_board_info+0x2ac>
		{
			chassis_error();
80008e08:	f0 1f 00 2d 	mcall	80008ebc <init_led_board_info+0x35c>
		}
		
		add_new_led_board_sides_to_usage(good);
80008e0c:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80008e10:	10 9c       	mov	r12,r8
80008e12:	f0 1f 00 2c 	mcall	80008ec0 <init_led_board_info+0x360>
		load_usageIdx_to_ledBrdSide(good);
80008e16:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80008e1a:	10 9c       	mov	r12,r8
80008e1c:	f0 1f 00 2a 	mcall	80008ec4 <init_led_board_info+0x364>
		usageShdw[good].csum = calc_usage_csum(good);
80008e20:	ef 36 ff f5 	ld.ub	r6,r7[-11]
80008e24:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80008e28:	10 9c       	mov	r12,r8
80008e2a:	f0 1f 00 28 	mcall	80008ec8 <init_led_board_info+0x368>
80008e2e:	18 98       	mov	r8,r12
80008e30:	49 fa       	lddpc	r10,80008eac <init_led_board_info+0x34c>
80008e32:	e0 69 06 61 	mov	r9,1633
80008e36:	ec 09 02 49 	mul	r9,r6,r9
80008e3a:	f4 09 00 09 	add	r9,r10,r9
80008e3e:	f2 c9 f9 a0 	sub	r9,r9,-1632
80008e42:	b2 88       	st.b	r9[0x0],r8
		copy_usage_to_usage(bad, good);
80008e44:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80008e48:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80008e4c:	12 9b       	mov	r11,r9
80008e4e:	10 9c       	mov	r12,r8
80008e50:	f0 1f 00 1f 	mcall	80008ecc <init_led_board_info+0x36c>
		previouslyBad = bad;
80008e54:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80008e58:	ef 68 ff f7 	st.b	r7[-9],r8
		write_usage_to_flash(previouslyBad);
80008e5c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80008e60:	10 9c       	mov	r12,r8
80008e62:	f0 1f 00 1c 	mcall	80008ed0 <init_led_board_info+0x370>
		if (test_flash(good) == ERROR)
80008e66:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80008e6a:	10 9c       	mov	r12,r8
80008e6c:	f0 1f 00 13 	mcall	80008eb8 <init_led_board_info+0x358>
80008e70:	18 98       	mov	r8,r12
80008e72:	10 99       	mov	r9,r8
80008e74:	30 18       	mov	r8,1
80008e76:	f0 09 18 00 	cp.b	r9,r8
80008e7a:	c0 31       	brne	80008e80 <init_led_board_info+0x320>
		{
			chassis_error();
80008e7c:	f0 1f 00 10 	mcall	80008ebc <init_led_board_info+0x35c>
		}
		
		write_usage_to_flash(good);
80008e80:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80008e84:	10 9c       	mov	r12,r8
80008e86:	f0 1f 00 13 	mcall	80008ed0 <init_led_board_info+0x370>
		minPingPong = 0;
80008e8a:	49 39       	lddpc	r9,80008ed4 <init_led_board_info+0x374>
80008e8c:	30 08       	mov	r8,0
80008e8e:	b2 88       	st.b	r9[0x0],r8
		hourPingPong = 0;
80008e90:	49 29       	lddpc	r9,80008ed8 <init_led_board_info+0x378>
80008e92:	30 08       	mov	r8,0
80008e94:	b2 88       	st.b	r9[0x0],r8
	}
	
}
80008e96:	2f 9d       	sub	sp,-28
80008e98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008e9c:	80 00       	ld.sh	r0,r0[0x0]
80008e9e:	88 28       	ld.sh	r8,r4[0x4]
80008ea0:	80 00       	ld.sh	r0,r0[0x0]
80008ea2:	6a dc       	ld.w	r12,r5[0x34]
80008ea4:	80 00       	ld.sh	r0,r0[0x0]
80008ea6:	7b e8       	ld.w	r8,sp[0x78]
80008ea8:	80 00       	ld.sh	r0,r0[0x0]
80008eaa:	7b 08       	ld.w	r8,sp[0x40]
80008eac:	00 00       	add	r0,r0
80008eae:	08 b8       	st.h	r4++,r8
80008eb0:	80 00       	ld.sh	r0,r0[0x0]
80008eb2:	b2 6e       	st.h	r9[0xc],lr
80008eb4:	80 00       	ld.sh	r0,r0[0x0]
80008eb6:	78 ce       	ld.w	lr,r12[0x30]
80008eb8:	80 00       	ld.sh	r0,r0[0x0]
80008eba:	7c 78       	ld.w	r8,lr[0x1c]
80008ebc:	80 00       	ld.sh	r0,r0[0x0]
80008ebe:	6a 04       	ld.w	r4,r5[0x0]
80008ec0:	80 00       	ld.sh	r0,r0[0x0]
80008ec2:	7d cc       	ld.w	r12,lr[0x70]
80008ec4:	80 00       	ld.sh	r0,r0[0x0]
80008ec6:	8a f8       	ld.uh	r8,r5[0xe]
80008ec8:	80 00       	ld.sh	r0,r0[0x0]
80008eca:	7f 4c       	ld.w	r12,pc[0x50]
80008ecc:	80 00       	ld.sh	r0,r0[0x0]
80008ece:	82 18       	ld.sh	r8,r1[0x2]
80008ed0:	80 00       	ld.sh	r0,r0[0x0]
80008ed2:	82 64       	ld.sh	r4,r1[0xc]
80008ed4:	00 00       	add	r0,r0
80008ed6:	08 94       	mov	r4,r4
80008ed8:	00 00       	add	r0,r0
80008eda:	15 cc       	ld.ub	r12,r10[0x4]
80008edc:	80 00       	ld.sh	r0,r0[0x0]
80008ede:	82 b8       	ld.uh	r8,r1[0x6]

80008ee0 <show_chassis_status_info>:

void show_chassis_status_info(void);
void show_chassis_status_info(void)
{
80008ee0:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80008ee4:	1a 97       	mov	r7,sp
80008ee6:	21 dd       	sub	sp,116
	char pStr[80];
	unsigned char uSideIdx, lSideIdx, uSideUsageIdx, lSideUsageIdx, uSideMinutes, lSideMinutes;
	
	print_ecdbg("\r\n***INSTALLED LED BOARDS***\r\n\r\n");
80008ee8:	fe fc 02 f0 	ld.w	r12,pc[752]
80008eec:	f0 1f 00 bc 	mcall	800091dc <show_chassis_status_info+0x2fc>
	
	print_ecdbg("SLOT    ID              TOP HRS:MIN    BOT HRS:MIN\r\n");
80008ef0:	fe fc 02 f0 	ld.w	r12,pc[752]
80008ef4:	f0 1f 00 ba 	mcall	800091dc <show_chassis_status_info+0x2fc>
	print_ecdbg("--------------------------------------------------\r\n");
80008ef8:	fe fc 02 ec 	ld.w	r12,pc[748]
80008efc:	f0 1f 00 b8 	mcall	800091dc <show_chassis_status_info+0x2fc>
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80008f00:	30 08       	mov	r8,0
80008f02:	ef 48 ff fc 	st.w	r7[-4],r8
80008f06:	c5 d9       	rjmp	800091c0 <show_chassis_status_info+0x2e0>
	{
		if (ledBrd[i].present)
80008f08:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008f0c:	fe fa 02 dc 	ld.w	r10,pc[732]
80008f10:	12 98       	mov	r8,r9
80008f12:	a3 78       	lsl	r8,0x3
80008f14:	12 18       	sub	r8,r9
80008f16:	a1 78       	lsl	r8,0x1
80008f18:	f4 08 00 08 	add	r8,r10,r8
80008f1c:	2f 88       	sub	r8,-8
80008f1e:	11 88       	ld.ub	r8,r8[0x0]
80008f20:	58 08       	cp.w	r8,0
80008f22:	e0 80 01 4a 	breq	800091b6 <show_chassis_status_info+0x2d6>
		{
			uSideIdx = ledBrd[i].uSideIdx;
80008f26:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008f2a:	fe fa 02 be 	ld.w	r10,pc[702]
80008f2e:	12 98       	mov	r8,r9
80008f30:	a3 78       	lsl	r8,0x3
80008f32:	12 18       	sub	r8,r9
80008f34:	a1 78       	lsl	r8,0x1
80008f36:	f4 08 00 08 	add	r8,r10,r8
80008f3a:	2f 68       	sub	r8,-10
80008f3c:	11 88       	ld.ub	r8,r8[0x0]
80008f3e:	ef 68 ff f6 	st.b	r7[-10],r8
			lSideIdx = ledBrd[i].lSideIdx; 
80008f42:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008f46:	fe fa 02 a2 	ld.w	r10,pc[674]
80008f4a:	12 98       	mov	r8,r9
80008f4c:	a3 78       	lsl	r8,0x3
80008f4e:	12 18       	sub	r8,r9
80008f50:	a1 78       	lsl	r8,0x1
80008f52:	f4 08 00 08 	add	r8,r10,r8
80008f56:	2f 58       	sub	r8,-11
80008f58:	11 88       	ld.ub	r8,r8[0x0]
80008f5a:	ef 68 ff f7 	st.b	r7[-9],r8
			
			uSideUsageIdx = ledBrdSide[uSideIdx].ushdwIdx;
80008f5e:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80008f62:	fe fa 02 8a 	ld.w	r10,pc[650]
80008f66:	12 98       	mov	r8,r9
80008f68:	a3 68       	lsl	r8,0x2
80008f6a:	12 08       	add	r8,r9
80008f6c:	f4 08 00 08 	add	r8,r10,r8
80008f70:	2f f8       	sub	r8,-1
80008f72:	11 88       	ld.ub	r8,r8[0x0]
80008f74:	ef 68 ff f8 	st.b	r7[-8],r8
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
80008f78:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80008f7c:	fe fa 02 70 	ld.w	r10,pc[624]
80008f80:	12 98       	mov	r8,r9
80008f82:	a3 68       	lsl	r8,0x2
80008f84:	12 08       	add	r8,r9
80008f86:	f4 08 00 08 	add	r8,r10,r8
80008f8a:	2f f8       	sub	r8,-1
80008f8c:	11 88       	ld.ub	r8,r8[0x0]
80008f8e:	ef 68 ff f9 	st.b	r7[-7],r8
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
80008f92:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80008f96:	12 98       	mov	r8,r9
80008f98:	a5 68       	lsl	r8,0x4
80008f9a:	12 08       	add	r8,r9
80008f9c:	f0 c9 ff f8 	sub	r9,r8,-8
80008fa0:	fe f8 02 50 	ld.w	r8,pc[592]
80008fa4:	f2 08 00 08 	add	r8,r9,r8
80008fa8:	2f f8       	sub	r8,-1
80008faa:	10 9c       	mov	r12,r8
80008fac:	f0 1f 00 92 	mcall	800091f4 <show_chassis_status_info+0x314>
80008fb0:	18 98       	mov	r8,r12
80008fb2:	ef 68 ff fa 	st.b	r7[-6],r8
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
80008fb6:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80008fba:	12 98       	mov	r8,r9
80008fbc:	a5 68       	lsl	r8,0x4
80008fbe:	12 08       	add	r8,r9
80008fc0:	f0 c9 ff f8 	sub	r9,r8,-8
80008fc4:	fe f8 02 2c 	ld.w	r8,pc[556]
80008fc8:	f2 08 00 08 	add	r8,r9,r8
80008fcc:	2f f8       	sub	r8,-1
80008fce:	10 9c       	mov	r12,r8
80008fd0:	f0 1f 00 89 	mcall	800091f4 <show_chassis_status_info+0x314>
80008fd4:	18 98       	mov	r8,r12
80008fd6:	ef 68 ff fb 	st.b	r7[-5],r8
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
80008fda:	ef 36 ff fb 	ld.ub	r6,r7[-5]
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				usageShdw[0].u[uSideUsageIdx].hrs_thous, usageShdw[0].u[uSideUsageIdx].hrs_huns, usageShdw[0].u[uSideUsageIdx].hrs_tens, usageShdw[0].u[uSideUsageIdx].hrs_ones, uSideMinutes,
				usageShdw[0].u[lSideUsageIdx].hrs_thous, usageShdw[0].u[lSideUsageIdx].hrs_huns, usageShdw[0].u[lSideUsageIdx].hrs_tens, usageShdw[0].u[lSideUsageIdx].hrs_ones, lSideMinutes);
80008fde:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80008fe2:	fe fa 02 0e 	ld.w	r10,pc[526]
80008fe6:	12 98       	mov	r8,r9
80008fe8:	a5 68       	lsl	r8,0x4
80008fea:	12 08       	add	r8,r9
80008fec:	f4 08 00 08 	add	r8,r10,r8
80008ff0:	2f 88       	sub	r8,-8
80008ff2:	11 88       	ld.ub	r8,r8[0x0]
80008ff4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008ff8:	5c 58       	castu.b	r8
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
80008ffa:	10 93       	mov	r3,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				usageShdw[0].u[uSideUsageIdx].hrs_thous, usageShdw[0].u[uSideUsageIdx].hrs_huns, usageShdw[0].u[uSideUsageIdx].hrs_tens, usageShdw[0].u[uSideUsageIdx].hrs_ones, uSideMinutes,
				usageShdw[0].u[lSideUsageIdx].hrs_thous, usageShdw[0].u[lSideUsageIdx].hrs_huns, usageShdw[0].u[lSideUsageIdx].hrs_tens, usageShdw[0].u[lSideUsageIdx].hrs_ones, lSideMinutes);
80008ffc:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80009000:	4f ca       	lddpc	r10,800091f0 <show_chassis_status_info+0x310>
80009002:	12 98       	mov	r8,r9
80009004:	a5 68       	lsl	r8,0x4
80009006:	12 08       	add	r8,r9
80009008:	f4 08 00 08 	add	r8,r10,r8
8000900c:	2f 88       	sub	r8,-8
8000900e:	11 88       	ld.ub	r8,r8[0x0]
80009010:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80009014:	5c 58       	castu.b	r8
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
80009016:	10 92       	mov	r2,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				usageShdw[0].u[uSideUsageIdx].hrs_thous, usageShdw[0].u[uSideUsageIdx].hrs_huns, usageShdw[0].u[uSideUsageIdx].hrs_tens, usageShdw[0].u[uSideUsageIdx].hrs_ones, uSideMinutes,
				usageShdw[0].u[lSideUsageIdx].hrs_thous, usageShdw[0].u[lSideUsageIdx].hrs_huns, usageShdw[0].u[lSideUsageIdx].hrs_tens, usageShdw[0].u[lSideUsageIdx].hrs_ones, lSideMinutes);
80009018:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000901c:	4f 5a       	lddpc	r10,800091f0 <show_chassis_status_info+0x310>
8000901e:	12 98       	mov	r8,r9
80009020:	a5 68       	lsl	r8,0x4
80009022:	12 08       	add	r8,r9
80009024:	f4 08 00 08 	add	r8,r10,r8
80009028:	2f c8       	sub	r8,-4
8000902a:	11 b8       	ld.ub	r8,r8[0x3]
8000902c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009030:	5c 58       	castu.b	r8
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
80009032:	ef 48 ff 8c 	st.w	r7[-116],r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				usageShdw[0].u[uSideUsageIdx].hrs_thous, usageShdw[0].u[uSideUsageIdx].hrs_huns, usageShdw[0].u[uSideUsageIdx].hrs_tens, usageShdw[0].u[uSideUsageIdx].hrs_ones, uSideMinutes,
				usageShdw[0].u[lSideUsageIdx].hrs_thous, usageShdw[0].u[lSideUsageIdx].hrs_huns, usageShdw[0].u[lSideUsageIdx].hrs_tens, usageShdw[0].u[lSideUsageIdx].hrs_ones, lSideMinutes);
80009036:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000903a:	4e ea       	lddpc	r10,800091f0 <show_chassis_status_info+0x310>
8000903c:	12 98       	mov	r8,r9
8000903e:	a5 68       	lsl	r8,0x4
80009040:	12 08       	add	r8,r9
80009042:	f4 08 00 08 	add	r8,r10,r8
80009046:	2f c8       	sub	r8,-4
80009048:	11 b8       	ld.ub	r8,r8[0x3]
8000904a:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000904e:	5c 58       	castu.b	r8
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
80009050:	ef 48 ff 90 	st.w	r7[-112],r8
80009054:	ef 3a ff fa 	ld.ub	r10,r7[-6]
80009058:	ef 4a ff 94 	st.w	r7[-108],r10
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				usageShdw[0].u[uSideUsageIdx].hrs_thous, usageShdw[0].u[uSideUsageIdx].hrs_huns, usageShdw[0].u[uSideUsageIdx].hrs_tens, usageShdw[0].u[uSideUsageIdx].hrs_ones, uSideMinutes,
8000905c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009060:	4e 4a       	lddpc	r10,800091f0 <show_chassis_status_info+0x310>
80009062:	12 98       	mov	r8,r9
80009064:	a5 68       	lsl	r8,0x4
80009066:	12 08       	add	r8,r9
80009068:	f4 08 00 08 	add	r8,r10,r8
8000906c:	2f 88       	sub	r8,-8
8000906e:	11 88       	ld.ub	r8,r8[0x0]
80009070:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009074:	5c 58       	castu.b	r8
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
80009076:	ef 48 ff 98 	st.w	r7[-104],r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				usageShdw[0].u[uSideUsageIdx].hrs_thous, usageShdw[0].u[uSideUsageIdx].hrs_huns, usageShdw[0].u[uSideUsageIdx].hrs_tens, usageShdw[0].u[uSideUsageIdx].hrs_ones, uSideMinutes,
8000907a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000907e:	4d da       	lddpc	r10,800091f0 <show_chassis_status_info+0x310>
80009080:	12 98       	mov	r8,r9
80009082:	a5 68       	lsl	r8,0x4
80009084:	12 08       	add	r8,r9
80009086:	f4 08 00 08 	add	r8,r10,r8
8000908a:	2f 88       	sub	r8,-8
8000908c:	11 88       	ld.ub	r8,r8[0x0]
8000908e:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80009092:	5c 58       	castu.b	r8
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
80009094:	ef 48 ff 9c 	st.w	r7[-100],r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				usageShdw[0].u[uSideUsageIdx].hrs_thous, usageShdw[0].u[uSideUsageIdx].hrs_huns, usageShdw[0].u[uSideUsageIdx].hrs_tens, usageShdw[0].u[uSideUsageIdx].hrs_ones, uSideMinutes,
80009098:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000909c:	4d 5a       	lddpc	r10,800091f0 <show_chassis_status_info+0x310>
8000909e:	12 98       	mov	r8,r9
800090a0:	a5 68       	lsl	r8,0x4
800090a2:	12 08       	add	r8,r9
800090a4:	f4 08 00 08 	add	r8,r10,r8
800090a8:	2f c8       	sub	r8,-4
800090aa:	11 b8       	ld.ub	r8,r8[0x3]
800090ac:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800090b0:	5c 58       	castu.b	r8
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
800090b2:	ef 48 ff a0 	st.w	r7[-96],r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				usageShdw[0].u[uSideUsageIdx].hrs_thous, usageShdw[0].u[uSideUsageIdx].hrs_huns, usageShdw[0].u[uSideUsageIdx].hrs_tens, usageShdw[0].u[uSideUsageIdx].hrs_ones, uSideMinutes,
800090b6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800090ba:	4c ea       	lddpc	r10,800091f0 <show_chassis_status_info+0x310>
800090bc:	12 98       	mov	r8,r9
800090be:	a5 68       	lsl	r8,0x4
800090c0:	12 08       	add	r8,r9
800090c2:	f4 08 00 08 	add	r8,r10,r8
800090c6:	2f c8       	sub	r8,-4
800090c8:	11 b8       	ld.ub	r8,r8[0x3]
800090ca:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800090ce:	5c 58       	castu.b	r8
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
800090d0:	10 90       	mov	r0,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
800090d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800090d6:	4c 5a       	lddpc	r10,800091e8 <show_chassis_status_info+0x308>
800090d8:	12 98       	mov	r8,r9
800090da:	a3 78       	lsl	r8,0x3
800090dc:	12 18       	sub	r8,r9
800090de:	a1 78       	lsl	r8,0x1
800090e0:	f4 08 00 08 	add	r8,r10,r8
800090e4:	2f a8       	sub	r8,-6
800090e6:	11 88       	ld.ub	r8,r8[0x0]
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
800090e8:	10 91       	mov	r1,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
800090ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
800090ee:	4b fa       	lddpc	r10,800091e8 <show_chassis_status_info+0x308>
800090f0:	12 98       	mov	r8,r9
800090f2:	a3 78       	lsl	r8,0x3
800090f4:	12 18       	sub	r8,r9
800090f6:	a1 78       	lsl	r8,0x1
800090f8:	f4 08 00 08 	add	r8,r10,r8
800090fc:	2f b8       	sub	r8,-5
800090fe:	11 88       	ld.ub	r8,r8[0x0]
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
80009100:	10 95       	mov	r5,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
80009102:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009106:	4b 9a       	lddpc	r10,800091e8 <show_chassis_status_info+0x308>
80009108:	12 98       	mov	r8,r9
8000910a:	a3 78       	lsl	r8,0x3
8000910c:	12 18       	sub	r8,r9
8000910e:	a1 78       	lsl	r8,0x1
80009110:	f4 08 00 08 	add	r8,r10,r8
80009114:	2f c8       	sub	r8,-4
80009116:	11 88       	ld.ub	r8,r8[0x0]
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
80009118:	10 9e       	mov	lr,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
8000911a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000911e:	4b 3a       	lddpc	r10,800091e8 <show_chassis_status_info+0x308>
80009120:	12 98       	mov	r8,r9
80009122:	a3 78       	lsl	r8,0x3
80009124:	12 18       	sub	r8,r9
80009126:	2f f8       	sub	r8,-1
80009128:	a1 78       	lsl	r8,0x1
8000912a:	f4 08 00 08 	add	r8,r10,r8
8000912e:	11 98       	ld.ub	r8,r8[0x1]
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
80009130:	10 9c       	mov	r12,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
80009132:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009136:	4a da       	lddpc	r10,800091e8 <show_chassis_status_info+0x308>
80009138:	12 98       	mov	r8,r9
8000913a:	a3 78       	lsl	r8,0x3
8000913c:	12 18       	sub	r8,r9
8000913e:	a1 78       	lsl	r8,0x1
80009140:	f4 08 00 08 	add	r8,r10,r8
80009144:	2f e8       	sub	r8,-2
80009146:	11 88       	ld.ub	r8,r8[0x0]
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
80009148:	10 9b       	mov	r11,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
8000914a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000914e:	4a 7a       	lddpc	r10,800091e8 <show_chassis_status_info+0x308>
80009150:	12 98       	mov	r8,r9
80009152:	a3 78       	lsl	r8,0x3
80009154:	12 18       	sub	r8,r9
80009156:	a1 78       	lsl	r8,0x1
80009158:	f4 08 00 08 	add	r8,r10,r8
8000915c:	2f f8       	sub	r8,-1
8000915e:	11 88       	ld.ub	r8,r8[0x0]
			lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;
			
			uSideMinutes = minute_count(&usageShdw[0].u[uSideUsageIdx].minuteBits[0]);
			lSideMinutes = minute_count(&usageShdw[0].u[lSideUsageIdx].minuteBits[0]);
			
			sprintf(pStr, " %d      %X%X%X%X%X%X         %01d%01d%01d%01d:%02d        %01d%01d%01d%01d:%02d\r\n", 
80009160:	ee c9 00 5c 	sub	r9,r7,92
80009164:	1a d6       	st.w	--sp,r6
80009166:	1a d3       	st.w	--sp,r3
80009168:	1a d2       	st.w	--sp,r2
8000916a:	ee fa ff 8c 	ld.w	r10,r7[-116]
8000916e:	1a da       	st.w	--sp,r10
80009170:	ee fa ff 90 	ld.w	r10,r7[-112]
80009174:	1a da       	st.w	--sp,r10
80009176:	ee fa ff 94 	ld.w	r10,r7[-108]
8000917a:	1a da       	st.w	--sp,r10
8000917c:	ee fa ff 98 	ld.w	r10,r7[-104]
80009180:	1a da       	st.w	--sp,r10
80009182:	ee fa ff 9c 	ld.w	r10,r7[-100]
80009186:	1a da       	st.w	--sp,r10
80009188:	ee fa ff a0 	ld.w	r10,r7[-96]
8000918c:	1a da       	st.w	--sp,r10
8000918e:	1a d0       	st.w	--sp,r0
80009190:	1a d1       	st.w	--sp,r1
80009192:	1a d5       	st.w	--sp,r5
80009194:	1a de       	st.w	--sp,lr
80009196:	1a dc       	st.w	--sp,r12
80009198:	1a db       	st.w	--sp,r11
8000919a:	1a d8       	st.w	--sp,r8
8000919c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800091a0:	1a d8       	st.w	--sp,r8
800091a2:	49 6b       	lddpc	r11,800091f8 <show_chassis_status_info+0x318>
800091a4:	12 9c       	mov	r12,r9
800091a6:	f0 1f 00 16 	mcall	800091fc <show_chassis_status_info+0x31c>
800091aa:	2e fd       	sub	sp,-68
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				usageShdw[0].u[uSideUsageIdx].hrs_thous, usageShdw[0].u[uSideUsageIdx].hrs_huns, usageShdw[0].u[uSideUsageIdx].hrs_tens, usageShdw[0].u[uSideUsageIdx].hrs_ones, uSideMinutes,
				usageShdw[0].u[lSideUsageIdx].hrs_thous, usageShdw[0].u[lSideUsageIdx].hrs_huns, usageShdw[0].u[lSideUsageIdx].hrs_tens, usageShdw[0].u[lSideUsageIdx].hrs_ones, lSideMinutes);
			print_ecdbg(pStr);
800091ac:	ee c8 00 5c 	sub	r8,r7,92
800091b0:	10 9c       	mov	r12,r8
800091b2:	f0 1f 00 0b 	mcall	800091dc <show_chassis_status_info+0x2fc>
	print_ecdbg("\r\n***INSTALLED LED BOARDS***\r\n\r\n");
	
	print_ecdbg("SLOT    ID              TOP HRS:MIN    BOT HRS:MIN\r\n");
	print_ecdbg("--------------------------------------------------\r\n");
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
800091b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800091ba:	2f f8       	sub	r8,-1
800091bc:	ef 48 ff fc 	st.w	r7[-4],r8
800091c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800091c4:	58 48       	cp.w	r8,4
800091c6:	fe 9a fe a1 	brle	80008f08 <show_chassis_status_info+0x28>
				usageShdw[0].u[lSideUsageIdx].hrs_thous, usageShdw[0].u[lSideUsageIdx].hrs_huns, usageShdw[0].u[lSideUsageIdx].hrs_tens, usageShdw[0].u[lSideUsageIdx].hrs_ones, lSideMinutes);
			print_ecdbg(pStr);
		}
	}
	
	printf("\r\n\r\n");
800091ca:	48 ec       	lddpc	r12,80009200 <show_chassis_status_info+0x320>
800091cc:	f0 1f 00 0e 	mcall	80009204 <show_chassis_status_info+0x324>
	
}
800091d0:	2e 3d       	sub	sp,-116
800091d2:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
800091d6:	00 00       	add	r0,r0
800091d8:	80 00       	ld.sh	r0,r0[0x0]
800091da:	64 a0       	ld.w	r0,r2[0x28]
800091dc:	80 00       	ld.sh	r0,r0[0x0]
800091de:	33 38       	mov	r8,51
800091e0:	80 00       	ld.sh	r0,r0[0x0]
800091e2:	64 c4       	ld.w	r4,r2[0x30]
800091e4:	80 00       	ld.sh	r0,r0[0x0]
800091e6:	64 fc       	ld.w	r12,r2[0x3c]
800091e8:	00 00       	add	r0,r0
800091ea:	08 2a       	rsub	r10,r4
800091ec:	00 00       	add	r0,r0
800091ee:	15 94       	ld.ub	r4,r10[0x1]
800091f0:	00 00       	add	r0,r0
800091f2:	08 b8       	st.h	r4++,r8
800091f4:	80 00       	ld.sh	r0,r0[0x0]
800091f6:	77 74       	ld.w	r4,r11[0x5c]
800091f8:	80 00       	ld.sh	r0,r0[0x0]
800091fa:	65 34       	ld.w	r4,r2[0x4c]
800091fc:	80 00       	ld.sh	r0,r0[0x0]
800091fe:	b2 f4       	st.b	r9[0x7],r4
80009200:	80 00       	ld.sh	r0,r0[0x0]
80009202:	65 88       	ld.w	r8,r2[0x60]
80009204:	80 00       	ld.sh	r0,r0[0x0]
80009206:	b2 dc       	st.b	r9[0x5],r12

80009208 <main>:

/*! \brief Main File Section:
 *          - Initialization (CPU, TWI, Usart,...)
 */
int main(void)
{
80009208:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000920c:	1a 97       	mov	r7,sp
8000920e:	fa cd 02 90 	sub	sp,sp,656
	static unsigned char displayIdx = 0;
	unsigned long usec = 1000, stayInLoop = 0;
80009212:	e0 68 03 e8 	mov	r8,1000
80009216:	ef 48 fe 78 	st.w	r7[-392],r8
8000921a:	30 08       	mov	r8,0
8000921c:	ef 48 fe 7c 	st.w	r7[-388],r8
	
	// Initialize System Clock
	init_sys_clocks();
80009220:	f0 1f 05 20 	mcall	8000a6a0 <main+0x1498>

	init_io();
80009224:	f0 1f 05 20 	mcall	8000a6a4 <main+0x149c>
	

	init_led_board_info();
80009228:	f0 1f 05 20 	mcall	8000a6a8 <main+0x14a0>
	
	while (stayInLoop)
8000922c:	ca 28       	rjmp	80009370 <main+0x168>
	{
		gpio_toggle_pin(ECLAVE_DEBUG_LED);
8000922e:	37 cc       	mov	r12,124
80009230:	f0 1f 05 1f 	mcall	8000a6ac <main+0x14a4>
80009234:	ee f8 fe 78 	ld.w	r8,r7[-392]
80009238:	ef 48 fe 90 	st.w	r7[-368],r8
8000923c:	e0 68 e1 00 	mov	r8,57600
80009240:	ea 18 05 f5 	orh	r8,0x5f5
80009244:	ef 48 fe 8c 	st.w	r7[-372],r8
80009248:	ee f8 fe 90 	ld.w	r8,r7[-368]
8000924c:	ef 48 fe 98 	st.w	r7[-360],r8
80009250:	ee f8 fe 8c 	ld.w	r8,r7[-372]
80009254:	ef 48 fe 94 	st.w	r7[-364],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80009258:	ee f2 fe 98 	ld.w	r2,r7[-360]
8000925c:	30 03       	mov	r3,0
8000925e:	ee f0 fe 94 	ld.w	r0,r7[-364]
80009262:	30 01       	mov	r1,0
80009264:	e6 00 02 49 	mul	r9,r3,r0
80009268:	e2 02 02 48 	mul	r8,r1,r2
8000926c:	10 09       	add	r9,r8
8000926e:	e4 00 06 4a 	mulu.d	r10,r2,r0
80009272:	16 09       	add	r9,r11
80009274:	12 9b       	mov	r11,r9
80009276:	ee 78 42 3f 	mov	r8,999999
8000927a:	30 09       	mov	r9,0
8000927c:	10 0a       	add	r10,r8
8000927e:	f6 09 00 4b 	adc	r11,r11,r9
80009282:	ee 78 42 40 	mov	r8,1000000
80009286:	30 09       	mov	r9,0
80009288:	f0 1f 05 0a 	mcall	8000a6b0 <main+0x14a8>
8000928c:	14 98       	mov	r8,r10
8000928e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80009290:	ef 48 fe a0 	st.w	r7[-352],r8
80009294:	ee c8 01 d0 	sub	r8,r7,464
80009298:	ef 48 fe 9c 	st.w	r7[-356],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000929c:	e1 b8 00 42 	mfsr	r8,0x108
800092a0:	10 99       	mov	r9,r8
800092a2:	ee f8 fe 9c 	ld.w	r8,r7[-356]
800092a6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800092a8:	ee f8 fe 9c 	ld.w	r8,r7[-356]
800092ac:	70 09       	ld.w	r9,r8[0x0]
800092ae:	ee f8 fe a0 	ld.w	r8,r7[-352]
800092b2:	10 09       	add	r9,r8
800092b4:	ee f8 fe 9c 	ld.w	r8,r7[-356]
800092b8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800092ba:	ee f9 fe 9c 	ld.w	r9,r7[-356]
800092be:	30 08       	mov	r8,0
800092c0:	f3 68 00 08 	st.b	r9[8],r8
800092c4:	ee c8 01 d0 	sub	r8,r7,464
800092c8:	ef 48 fe a4 	st.w	r7[-348],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800092cc:	e1 b8 00 42 	mfsr	r8,0x108
800092d0:	ef 48 fe a8 	st.w	r7[-344],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800092d4:	ee f8 fe a4 	ld.w	r8,r7[-348]
800092d8:	f1 39 00 08 	ld.ub	r9,r8[8]
800092dc:	30 28       	mov	r8,2
800092de:	f0 09 18 00 	cp.b	r9,r8
800092e2:	c0 31       	brne	800092e8 <main+0xe0>
    return false;
800092e4:	30 08       	mov	r8,0
800092e6:	c4 38       	rjmp	8000936c <main+0x164>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800092e8:	ee f8 fe a4 	ld.w	r8,r7[-348]
800092ec:	f1 39 00 08 	ld.ub	r9,r8[8]
800092f0:	30 18       	mov	r8,1
800092f2:	f0 09 18 00 	cp.b	r9,r8
800092f6:	c0 31       	brne	800092fc <main+0xf4>
    return true;
800092f8:	30 18       	mov	r8,1
800092fa:	c3 98       	rjmp	8000936c <main+0x164>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800092fc:	ee f8 fe a4 	ld.w	r8,r7[-348]
80009300:	70 09       	ld.w	r9,r8[0x0]
80009302:	ee f8 fe a4 	ld.w	r8,r7[-348]
80009306:	70 18       	ld.w	r8,r8[0x4]
80009308:	10 39       	cp.w	r9,r8
8000930a:	e0 88 00 1a 	brls	8000933e <main+0x136>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000930e:	ee f8 fe a4 	ld.w	r8,r7[-348]
80009312:	70 09       	ld.w	r9,r8[0x0]
80009314:	ee f8 fe a8 	ld.w	r8,r7[-344]
80009318:	12 38       	cp.w	r8,r9
8000931a:	c1 02       	brcc	8000933a <main+0x132>
8000931c:	ee f8 fe a4 	ld.w	r8,r7[-348]
80009320:	70 19       	ld.w	r9,r8[0x4]
80009322:	ee f8 fe a8 	ld.w	r8,r7[-344]
80009326:	12 38       	cp.w	r8,r9
80009328:	e0 88 00 09 	brls	8000933a <main+0x132>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000932c:	ee f9 fe a4 	ld.w	r9,r7[-348]
80009330:	30 18       	mov	r8,1
80009332:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009336:	30 18       	mov	r8,1
80009338:	c1 a8       	rjmp	8000936c <main+0x164>
    }
    return false;
8000933a:	30 08       	mov	r8,0
8000933c:	c1 88       	rjmp	8000936c <main+0x164>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000933e:	ee f8 fe a4 	ld.w	r8,r7[-348]
80009342:	70 09       	ld.w	r9,r8[0x0]
80009344:	ee f8 fe a8 	ld.w	r8,r7[-344]
80009348:	12 38       	cp.w	r8,r9
8000934a:	c0 93       	brcs	8000935c <main+0x154>
8000934c:	ee f8 fe a4 	ld.w	r8,r7[-348]
80009350:	70 19       	ld.w	r9,r8[0x4]
80009352:	ee f8 fe a8 	ld.w	r8,r7[-344]
80009356:	12 38       	cp.w	r8,r9
80009358:	e0 88 00 09 	brls	8000936a <main+0x162>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000935c:	ee f9 fe a4 	ld.w	r9,r7[-348]
80009360:	30 18       	mov	r8,1
80009362:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009366:	30 18       	mov	r8,1
80009368:	c0 28       	rjmp	8000936c <main+0x164>
    }
    return false;
8000936a:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000936c:	58 08       	cp.w	r8,0
8000936e:	ca b0       	breq	800092c4 <main+0xbc>
	init_io();
	

	init_led_board_info();
	
	while (stayInLoop)
80009370:	ee f8 fe 7c 	ld.w	r8,r7[-388]
80009374:	58 08       	cp.w	r8,0
80009376:	fe 91 ff 5c 	brne	8000922e <main+0x26>
		cpu_delay_us(usec, EC_CPU_CLOCK_100MHZ);
	}

	//Set clock to 8MHz. We start at 100MHz to get through the DS2411 LED board serial ID detection. But we don't need to run that fast for remaining operations.
	
	osc_enable(OSC_ID_RC8M);
8000937a:	30 2c       	mov	r12,2
8000937c:	f0 1f 04 ce 	mcall	8000a6b4 <main+0x14ac>
	osc_wait_ready(OSC_ID_RC8M);
80009380:	30 2c       	mov	r12,2
80009382:	f0 1f 04 ce 	mcall	8000a6b8 <main+0x14b0>
	sysclk_set_source(SYSCLK_SRC_RC8M);
80009386:	30 5c       	mov	r12,5
80009388:	f0 1f 04 cd 	mcall	8000a6bc <main+0x14b4>
	sysclk_set_prescalers(0,0,0,0);
8000938c:	30 09       	mov	r9,0
8000938e:	30 0a       	mov	r10,0
80009390:	30 0b       	mov	r11,0
80009392:	30 0c       	mov	r12,0
80009394:	f0 1f 04 cb 	mcall	8000a6c0 <main+0x14b8>
	pll_disable(0);
80009398:	30 0c       	mov	r12,0
8000939a:	f0 1f 04 cb 	mcall	8000a6c4 <main+0x14bc>

	while (stayInLoop)
8000939e:	cb 48       	rjmp	80009506 <main+0x2fe>
	{
		gpio_toggle_pin(ECLAVE_DEBUG_LED);
800093a0:	37 cc       	mov	r12,124
800093a2:	f0 1f 04 c3 	mcall	8000a6ac <main+0x14a4>
800093a6:	ee f8 fe 78 	ld.w	r8,r7[-392]
800093aa:	ef 48 fe b0 	st.w	r7[-336],r8
800093ae:	e0 68 12 00 	mov	r8,4608
800093b2:	ea 18 00 7a 	orh	r8,0x7a
800093b6:	ef 48 fe ac 	st.w	r7[-340],r8
800093ba:	ee f8 fe b0 	ld.w	r8,r7[-336]
800093be:	ef 48 fe b8 	st.w	r7[-328],r8
800093c2:	ee f8 fe ac 	ld.w	r8,r7[-340]
800093c6:	ef 48 fe b4 	st.w	r7[-332],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800093ca:	ee fc fe b8 	ld.w	r12,r7[-328]
800093ce:	ef 4c fd 7c 	st.w	r7[-644],r12
800093d2:	30 0a       	mov	r10,0
800093d4:	ef 4a fd 78 	st.w	r7[-648],r10
800093d8:	ee f8 fe b4 	ld.w	r8,r7[-332]
800093dc:	ef 48 fd 74 	st.w	r7[-652],r8
800093e0:	30 0c       	mov	r12,0
800093e2:	ef 4c fd 70 	st.w	r7[-656],r12
800093e6:	ee f9 fd 78 	ld.w	r9,r7[-648]
800093ea:	ee fa fd 74 	ld.w	r10,r7[-652]
800093ee:	b5 39       	mul	r9,r10
800093f0:	ee f8 fd 70 	ld.w	r8,r7[-656]
800093f4:	ee fc fd 7c 	ld.w	r12,r7[-644]
800093f8:	b9 38       	mul	r8,r12
800093fa:	10 09       	add	r9,r8
800093fc:	ee f8 fd 7c 	ld.w	r8,r7[-644]
80009400:	ee fc fd 74 	ld.w	r12,r7[-652]
80009404:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009408:	16 09       	add	r9,r11
8000940a:	12 9b       	mov	r11,r9
8000940c:	ee 78 42 3f 	mov	r8,999999
80009410:	30 09       	mov	r9,0
80009412:	10 0a       	add	r10,r8
80009414:	f6 09 00 4b 	adc	r11,r11,r9
80009418:	ee 78 42 40 	mov	r8,1000000
8000941c:	30 09       	mov	r9,0
8000941e:	f0 1f 04 a5 	mcall	8000a6b0 <main+0x14a8>
80009422:	14 98       	mov	r8,r10
80009424:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80009426:	ef 48 fe c0 	st.w	r7[-320],r8
8000942a:	ee c8 01 c4 	sub	r8,r7,452
8000942e:	ef 48 fe bc 	st.w	r7[-324],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009432:	e1 b8 00 42 	mfsr	r8,0x108
80009436:	10 99       	mov	r9,r8
80009438:	ee f8 fe bc 	ld.w	r8,r7[-324]
8000943c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000943e:	ee f8 fe bc 	ld.w	r8,r7[-324]
80009442:	70 09       	ld.w	r9,r8[0x0]
80009444:	ee f8 fe c0 	ld.w	r8,r7[-320]
80009448:	10 09       	add	r9,r8
8000944a:	ee f8 fe bc 	ld.w	r8,r7[-324]
8000944e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009450:	ee f9 fe bc 	ld.w	r9,r7[-324]
80009454:	30 08       	mov	r8,0
80009456:	f3 68 00 08 	st.b	r9[8],r8
8000945a:	ee c8 01 c4 	sub	r8,r7,452
8000945e:	ef 48 fe c4 	st.w	r7[-316],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009462:	e1 b8 00 42 	mfsr	r8,0x108
80009466:	ef 48 fe c8 	st.w	r7[-312],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000946a:	ee f8 fe c4 	ld.w	r8,r7[-316]
8000946e:	f1 39 00 08 	ld.ub	r9,r8[8]
80009472:	30 28       	mov	r8,2
80009474:	f0 09 18 00 	cp.b	r9,r8
80009478:	c0 31       	brne	8000947e <main+0x276>
    return false;
8000947a:	30 08       	mov	r8,0
8000947c:	c4 38       	rjmp	80009502 <main+0x2fa>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000947e:	ee f8 fe c4 	ld.w	r8,r7[-316]
80009482:	f1 39 00 08 	ld.ub	r9,r8[8]
80009486:	30 18       	mov	r8,1
80009488:	f0 09 18 00 	cp.b	r9,r8
8000948c:	c0 31       	brne	80009492 <main+0x28a>
    return true;
8000948e:	30 18       	mov	r8,1
80009490:	c3 98       	rjmp	80009502 <main+0x2fa>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009492:	ee f8 fe c4 	ld.w	r8,r7[-316]
80009496:	70 09       	ld.w	r9,r8[0x0]
80009498:	ee f8 fe c4 	ld.w	r8,r7[-316]
8000949c:	70 18       	ld.w	r8,r8[0x4]
8000949e:	10 39       	cp.w	r9,r8
800094a0:	e0 88 00 1a 	brls	800094d4 <main+0x2cc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800094a4:	ee f8 fe c4 	ld.w	r8,r7[-316]
800094a8:	70 09       	ld.w	r9,r8[0x0]
800094aa:	ee f8 fe c8 	ld.w	r8,r7[-312]
800094ae:	12 38       	cp.w	r8,r9
800094b0:	c1 02       	brcc	800094d0 <main+0x2c8>
800094b2:	ee f8 fe c4 	ld.w	r8,r7[-316]
800094b6:	70 19       	ld.w	r9,r8[0x4]
800094b8:	ee f8 fe c8 	ld.w	r8,r7[-312]
800094bc:	12 38       	cp.w	r8,r9
800094be:	e0 88 00 09 	brls	800094d0 <main+0x2c8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800094c2:	ee f9 fe c4 	ld.w	r9,r7[-316]
800094c6:	30 18       	mov	r8,1
800094c8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800094cc:	30 18       	mov	r8,1
800094ce:	c1 a8       	rjmp	80009502 <main+0x2fa>
    }
    return false;
800094d0:	30 08       	mov	r8,0
800094d2:	c1 88       	rjmp	80009502 <main+0x2fa>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800094d4:	ee f8 fe c4 	ld.w	r8,r7[-316]
800094d8:	70 09       	ld.w	r9,r8[0x0]
800094da:	ee f8 fe c8 	ld.w	r8,r7[-312]
800094de:	12 38       	cp.w	r8,r9
800094e0:	c0 93       	brcs	800094f2 <main+0x2ea>
800094e2:	ee f8 fe c4 	ld.w	r8,r7[-316]
800094e6:	70 19       	ld.w	r9,r8[0x4]
800094e8:	ee f8 fe c8 	ld.w	r8,r7[-312]
800094ec:	12 38       	cp.w	r8,r9
800094ee:	e0 88 00 09 	brls	80009500 <main+0x2f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800094f2:	ee f9 fe c4 	ld.w	r9,r7[-316]
800094f6:	30 18       	mov	r8,1
800094f8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800094fc:	30 18       	mov	r8,1
800094fe:	c0 28       	rjmp	80009502 <main+0x2fa>
    }
    return false;
80009500:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80009502:	58 08       	cp.w	r8,0
80009504:	ca b0       	breq	8000945a <main+0x252>
	osc_wait_ready(OSC_ID_RC8M);
	sysclk_set_source(SYSCLK_SRC_RC8M);
	sysclk_set_prescalers(0,0,0,0);
	pll_disable(0);

	while (stayInLoop)
80009506:	ee f8 fe 7c 	ld.w	r8,r7[-388]
8000950a:	58 08       	cp.w	r8,0
8000950c:	fe 91 ff 4a 	brne	800093a0 <main+0x198>
	}



	// Initialize USART
	init_ecdbg_rs232(FPBA_HZ);
80009510:	e0 6c 12 00 	mov	r12,4608
80009514:	ea 1c 00 7a 	orh	r12,0x7a
80009518:	f0 1f 04 6c 	mcall	8000a6c8 <main+0x14c0>
	init_display_rs232(FPBA_HZ);
8000951c:	e0 6c 12 00 	mov	r12,4608
80009520:	ea 1c 00 7a 	orh	r12,0x7a
80009524:	f0 1f 04 6a 	mcall	8000a6cc <main+0x14c4>

	// Print Startup Message
	print_ecdbg("\r\nSEAL SHIELD DEMO\r\nCopyright (c) 2015 Technical Solutions Group, Inc.\r\n");
80009528:	fe fc 11 a8 	ld.w	r12,pc[4520]
8000952c:	f0 1f 04 6a 	mcall	8000a6d4 <main+0x14cc>
	display_text(IDX_READY);
80009530:	30 0c       	mov	r12,0
80009532:	f0 1f 04 6a 	mcall	8000a6d8 <main+0x14d0>
	
	// Initialize ADC for bluesense channels which are used to see if there are any devices (phones, tablets, etc.) on the shelves
	adc_process_init();
80009536:	f0 1f 04 6a 	mcall	8000a6dc <main+0x14d4>

	
	// Initialize Interrupts
	irq_initialize_vectors(); //TODO: probably remove 5apr15
8000953a:	f0 1f 04 6a 	mcall	8000a6e0 <main+0x14d8>

	cpu_irq_enable();
8000953e:	d5 03       	csrf	0x10


	
	// Initialize TWI Interface
	twi_init();
80009540:	f0 1f 04 69 	mcall	8000a6e4 <main+0x14dc>

	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level
80009544:	31 6c       	mov	r12,22
80009546:	f0 1f 04 69 	mcall	8000a6e8 <main+0x14e0>
	PCA9952_init();
8000954a:	f0 1f 04 69 	mcall	8000a6ec <main+0x14e4>
	
	electroclaveState = STATE_EC_IDLE;
8000954e:	fe f9 11 a2 	ld.w	r9,pc[4514]
80009552:	30 08       	mov	r8,0
80009554:	b2 88       	st.b	r9[0x0],r8
	
	show_chassis_status_info();
80009556:	f0 1f 04 68 	mcall	8000a6f4 <main+0x14ec>
	
	gpio_set_pin_low(ECLAVE_LED_OEn); //...and we are live!
8000955a:	31 6c       	mov	r12,22
8000955c:	f0 1f 04 67 	mcall	8000a6f8 <main+0x14f0>
	gpio_set_pin_low(ECLAVE_PSUPPLY_ONn); //turn the leds on first and then the power supply
80009560:	31 7c       	mov	r12,23
80009562:	f0 1f 04 66 	mcall	8000a6f8 <main+0x14f0>
80009566:	e0 68 03 e8 	mov	r8,1000
8000956a:	ef 48 fe d0 	st.w	r7[-304],r8
8000956e:	e0 68 12 00 	mov	r8,4608
80009572:	ea 18 00 7a 	orh	r8,0x7a
80009576:	ef 48 fe cc 	st.w	r7[-308],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000957a:	ee fa fe d0 	ld.w	r10,r7[-304]
8000957e:	ef 4a fd 8c 	st.w	r7[-628],r10
80009582:	30 08       	mov	r8,0
80009584:	ef 48 fd 88 	st.w	r7[-632],r8
80009588:	ee fc fe cc 	ld.w	r12,r7[-308]
8000958c:	ef 4c fd 84 	st.w	r7[-636],r12
80009590:	30 0a       	mov	r10,0
80009592:	ef 4a fd 80 	st.w	r7[-640],r10
80009596:	ee f9 fd 88 	ld.w	r9,r7[-632]
8000959a:	ee f8 fd 84 	ld.w	r8,r7[-636]
8000959e:	b1 39       	mul	r9,r8
800095a0:	ee f8 fd 80 	ld.w	r8,r7[-640]
800095a4:	ee fc fd 8c 	ld.w	r12,r7[-628]
800095a8:	b9 38       	mul	r8,r12
800095aa:	10 09       	add	r9,r8
800095ac:	ee f8 fd 8c 	ld.w	r8,r7[-628]
800095b0:	ee fc fd 84 	ld.w	r12,r7[-636]
800095b4:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800095b8:	16 09       	add	r9,r11
800095ba:	12 9b       	mov	r11,r9
800095bc:	e0 68 03 e7 	mov	r8,999
800095c0:	30 09       	mov	r9,0
800095c2:	10 0a       	add	r10,r8
800095c4:	f6 09 00 4b 	adc	r11,r11,r9
800095c8:	e0 68 03 e8 	mov	r8,1000
800095cc:	30 09       	mov	r9,0
800095ce:	f0 1f 04 39 	mcall	8000a6b0 <main+0x14a8>
800095d2:	14 98       	mov	r8,r10
800095d4:	16 99       	mov	r9,r11
	
	cpu_set_timeout(EC_ONE_SECOND/2, &debugTimer);
800095d6:	a1 98       	lsr	r8,0x1
800095d8:	ef 48 fe d8 	st.w	r7[-296],r8
800095dc:	fe f8 11 20 	ld.w	r8,pc[4384]
800095e0:	ef 48 fe d4 	st.w	r7[-300],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800095e4:	e1 b8 00 42 	mfsr	r8,0x108
800095e8:	10 99       	mov	r9,r8
800095ea:	ee f8 fe d4 	ld.w	r8,r7[-300]
800095ee:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800095f0:	ee f8 fe d4 	ld.w	r8,r7[-300]
800095f4:	70 09       	ld.w	r9,r8[0x0]
800095f6:	ee f8 fe d8 	ld.w	r8,r7[-296]
800095fa:	10 09       	add	r9,r8
800095fc:	ee f8 fe d4 	ld.w	r8,r7[-300]
80009600:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009602:	ee f9 fe d4 	ld.w	r9,r7[-300]
80009606:	30 08       	mov	r8,0
80009608:	f3 68 00 08 	st.b	r9[8],r8
8000960c:	c0 28       	rjmp	80009610 <main+0x408>
		{
			cpu_stop_timeout(&debugTimer);
			cpu_set_timeout((EC_ONE_SECOND/2), &debugTimer);
			gpio_toggle_pin(ECLAVE_DEBUG_LED);
		}
	} //while(true)
8000960e:	d7 03       	nop


	// Main loop
	while (true) {

		switch(electroclaveState)
80009610:	fe f8 10 e0 	ld.w	r8,pc[4320]
80009614:	11 88       	ld.ub	r8,r8[0x0]
80009616:	10 99       	mov	r9,r8
80009618:	58 89       	cp.w	r9,8
8000961a:	e0 8b 06 b7 	brhi	8000a388 <main+0x1180>
8000961e:	fe f8 10 e2 	ld.w	r8,pc[4322]
80009622:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
		{
			case STATE_EC_IDLE:
				if (EC_DOOR_LATCHED) {
80009626:	33 ec       	mov	r12,62
80009628:	f0 1f 04 37 	mcall	8000a704 <main+0x14fc>
8000962c:	18 98       	mov	r8,r12
8000962e:	ec 18 00 01 	eorl	r8,0x1
80009632:	5c 58       	castu.b	r8
80009634:	e0 80 06 a1 	breq	8000a376 <main+0x116e>
					gpio_set_pin_low(ECLAVE_DEBUG_LED);
80009638:	37 cc       	mov	r12,124
8000963a:	f0 1f 04 30 	mcall	8000a6f8 <main+0x14f0>
					print_ecdbg("Door latch detected\r\n");
8000963e:	fe fc 10 ca 	ld.w	r12,pc[4298]
80009642:	f0 1f 04 25 	mcall	8000a6d4 <main+0x14cc>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
80009646:	30 0c       	mov	r12,0
80009648:	f0 1f 04 24 	mcall	8000a6d8 <main+0x14d0>
					electroclaveState = STATE_DOOR_LATCHED;
8000964c:	fe f9 10 a4 	ld.w	r9,pc[4260]
80009650:	30 18       	mov	r8,1
80009652:	b2 88       	st.b	r9[0x0],r8
					firstTimeThrough = 1;
80009654:	fe f9 10 b8 	ld.w	r9,pc[4280]
80009658:	30 18       	mov	r8,1
8000965a:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000965c:	e0 8f 06 96 	bral	8000a388 <main+0x1180>
				
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
80009660:	33 fc       	mov	r12,63
80009662:	f0 1f 04 29 	mcall	8000a704 <main+0x14fc>
80009666:	18 98       	mov	r8,r12
80009668:	58 08       	cp.w	r8,0
8000966a:	e0 80 06 88 	breq	8000a37a <main+0x1172>
					print_ecdbg("Action push button press detected\r\n");
8000966e:	fe fc 10 a2 	ld.w	r12,pc[4258]
80009672:	f0 1f 04 19 	mcall	8000a6d4 <main+0x14cc>
					electroclaveState = STATE_ACTION_PB_PRESSED;
80009676:	fe f9 10 7a 	ld.w	r9,pc[4218]
8000967a:	30 28       	mov	r8,2
8000967c:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000967e:	e0 8f 06 85 	bral	8000a388 <main+0x1180>
				
			case STATE_ACTION_PB_PRESSED:
				if (EC_ACTION_PB)
80009682:	33 fc       	mov	r12,63
80009684:	f0 1f 04 20 	mcall	8000a704 <main+0x14fc>
80009688:	18 98       	mov	r8,r12
8000968a:	ec 18 00 01 	eorl	r8,0x1
8000968e:	5c 58       	castu.b	r8
80009690:	e0 80 06 77 	breq	8000a37e <main+0x1176>
				{
					print_ecdbg("Action push button release detected\r\n");
80009694:	fe fc 10 80 	ld.w	r12,pc[4224]
80009698:	f0 1f 04 0f 	mcall	8000a6d4 <main+0x14cc>
					electroclaveState = STATE_ACTION_PB_RELEASED;	
8000969c:	fe f9 10 54 	ld.w	r9,pc[4180]
800096a0:	30 38       	mov	r8,3
800096a2:	b2 88       	st.b	r9[0x0],r8
				}
				break;
800096a4:	e0 8f 06 72 	bral	8000a388 <main+0x1180>
				
			case STATE_ACTION_PB_RELEASED:
				check_led_brd_side_lifetimes();
800096a8:	f0 1f 04 1c 	mcall	8000a718 <main+0x1510>
				check_shelves_for_devices();
800096ac:	f0 1f 04 1c 	mcall	8000a71c <main+0x1514>
				set_shelves_active_inactive();
800096b0:	f0 1f 04 1c 	mcall	8000a720 <main+0x1518>
				
				if (num_active_shelves() != 0) {
800096b4:	f0 1f 04 1c 	mcall	8000a724 <main+0x151c>
800096b8:	18 98       	mov	r8,r12
800096ba:	58 08       	cp.w	r8,0
800096bc:	e0 80 01 72 	breq	800099a0 <main+0x798>
					electroclaveState = STATE_START_SANITIZE;	
800096c0:	fe f9 10 30 	ld.w	r9,pc[4144]
800096c4:	30 48       	mov	r8,4
800096c6:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("Start sanitizing\r\n");
800096c8:	fe fc 10 60 	ld.w	r12,pc[4192]
800096cc:	f0 1f 04 02 	mcall	8000a6d4 <main+0x14cc>
					display_text(IDX_CLEAR);
800096d0:	30 9c       	mov	r12,9
800096d2:	f0 1f 04 02 	mcall	8000a6d8 <main+0x14d0>
800096d6:	e0 68 01 f4 	mov	r8,500
800096da:	ef 48 fe e0 	st.w	r7[-288],r8
800096de:	e0 68 12 00 	mov	r8,4608
800096e2:	ea 18 00 7a 	orh	r8,0x7a
800096e6:	ef 48 fe dc 	st.w	r7[-292],r8
800096ea:	ee f8 fe e0 	ld.w	r8,r7[-288]
800096ee:	ef 48 fe e8 	st.w	r7[-280],r8
800096f2:	ee f8 fe dc 	ld.w	r8,r7[-292]
800096f6:	ef 48 fe e4 	st.w	r7[-284],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800096fa:	ee fa fe e8 	ld.w	r10,r7[-280]
800096fe:	ef 4a fd 9c 	st.w	r7[-612],r10
80009702:	30 08       	mov	r8,0
80009704:	ef 48 fd 98 	st.w	r7[-616],r8
80009708:	ee fc fe e4 	ld.w	r12,r7[-284]
8000970c:	ef 4c fd 94 	st.w	r7[-620],r12
80009710:	30 0a       	mov	r10,0
80009712:	ef 4a fd 90 	st.w	r7[-624],r10
80009716:	ee f9 fd 98 	ld.w	r9,r7[-616]
8000971a:	ee f8 fd 94 	ld.w	r8,r7[-620]
8000971e:	b1 39       	mul	r9,r8
80009720:	ee f8 fd 90 	ld.w	r8,r7[-624]
80009724:	ee fc fd 9c 	ld.w	r12,r7[-612]
80009728:	b9 38       	mul	r8,r12
8000972a:	10 09       	add	r9,r8
8000972c:	ee f8 fd 9c 	ld.w	r8,r7[-612]
80009730:	ee fc fd 94 	ld.w	r12,r7[-620]
80009734:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009738:	16 09       	add	r9,r11
8000973a:	12 9b       	mov	r11,r9
8000973c:	e0 68 03 e7 	mov	r8,999
80009740:	30 09       	mov	r9,0
80009742:	10 0a       	add	r10,r8
80009744:	f6 09 00 4b 	adc	r11,r11,r9
80009748:	e0 68 03 e8 	mov	r8,1000
8000974c:	30 09       	mov	r9,0
8000974e:	f0 1f 03 d9 	mcall	8000a6b0 <main+0x14a8>
80009752:	14 98       	mov	r8,r10
80009754:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80009756:	ef 48 fe f0 	st.w	r7[-272],r8
8000975a:	ee c8 01 b8 	sub	r8,r7,440
8000975e:	ef 48 fe ec 	st.w	r7[-276],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009762:	e1 b8 00 42 	mfsr	r8,0x108
80009766:	10 99       	mov	r9,r8
80009768:	ee f8 fe ec 	ld.w	r8,r7[-276]
8000976c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000976e:	ee f8 fe ec 	ld.w	r8,r7[-276]
80009772:	70 09       	ld.w	r9,r8[0x0]
80009774:	ee f8 fe f0 	ld.w	r8,r7[-272]
80009778:	10 09       	add	r9,r8
8000977a:	ee f8 fe ec 	ld.w	r8,r7[-276]
8000977e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009780:	ee f9 fe ec 	ld.w	r9,r7[-276]
80009784:	30 08       	mov	r8,0
80009786:	f3 68 00 08 	st.b	r9[8],r8
8000978a:	ee c8 01 b8 	sub	r8,r7,440
8000978e:	ef 48 fe f4 	st.w	r7[-268],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009792:	e1 b8 00 42 	mfsr	r8,0x108
80009796:	ef 48 fe f8 	st.w	r7[-264],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000979a:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000979e:	f1 39 00 08 	ld.ub	r9,r8[8]
800097a2:	30 28       	mov	r8,2
800097a4:	f0 09 18 00 	cp.b	r9,r8
800097a8:	c0 31       	brne	800097ae <main+0x5a6>
    return false;
800097aa:	30 08       	mov	r8,0
800097ac:	c4 38       	rjmp	80009832 <main+0x62a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800097ae:	ee f8 fe f4 	ld.w	r8,r7[-268]
800097b2:	f1 39 00 08 	ld.ub	r9,r8[8]
800097b6:	30 18       	mov	r8,1
800097b8:	f0 09 18 00 	cp.b	r9,r8
800097bc:	c0 31       	brne	800097c2 <main+0x5ba>
    return true;
800097be:	30 18       	mov	r8,1
800097c0:	c3 98       	rjmp	80009832 <main+0x62a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800097c2:	ee f8 fe f4 	ld.w	r8,r7[-268]
800097c6:	70 09       	ld.w	r9,r8[0x0]
800097c8:	ee f8 fe f4 	ld.w	r8,r7[-268]
800097cc:	70 18       	ld.w	r8,r8[0x4]
800097ce:	10 39       	cp.w	r9,r8
800097d0:	e0 88 00 1a 	brls	80009804 <main+0x5fc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800097d4:	ee f8 fe f4 	ld.w	r8,r7[-268]
800097d8:	70 09       	ld.w	r9,r8[0x0]
800097da:	ee f8 fe f8 	ld.w	r8,r7[-264]
800097de:	12 38       	cp.w	r8,r9
800097e0:	c1 02       	brcc	80009800 <main+0x5f8>
800097e2:	ee f8 fe f4 	ld.w	r8,r7[-268]
800097e6:	70 19       	ld.w	r9,r8[0x4]
800097e8:	ee f8 fe f8 	ld.w	r8,r7[-264]
800097ec:	12 38       	cp.w	r8,r9
800097ee:	e0 88 00 09 	brls	80009800 <main+0x5f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800097f2:	ee f9 fe f4 	ld.w	r9,r7[-268]
800097f6:	30 18       	mov	r8,1
800097f8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800097fc:	30 18       	mov	r8,1
800097fe:	c1 a8       	rjmp	80009832 <main+0x62a>
    }
    return false;
80009800:	30 08       	mov	r8,0
80009802:	c1 88       	rjmp	80009832 <main+0x62a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009804:	ee f8 fe f4 	ld.w	r8,r7[-268]
80009808:	70 09       	ld.w	r9,r8[0x0]
8000980a:	ee f8 fe f8 	ld.w	r8,r7[-264]
8000980e:	12 38       	cp.w	r8,r9
80009810:	c0 93       	brcs	80009822 <main+0x61a>
80009812:	ee f8 fe f4 	ld.w	r8,r7[-268]
80009816:	70 19       	ld.w	r9,r8[0x4]
80009818:	ee f8 fe f8 	ld.w	r8,r7[-264]
8000981c:	12 38       	cp.w	r8,r9
8000981e:	e0 88 00 09 	brls	80009830 <main+0x628>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009822:	ee f9 fe f4 	ld.w	r9,r7[-268]
80009826:	30 18       	mov	r8,1
80009828:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000982c:	30 18       	mov	r8,1
8000982e:	c0 28       	rjmp	80009832 <main+0x62a>
    }
    return false;
80009830:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80009832:	58 08       	cp.w	r8,0
80009834:	ca b0       	breq	8000978a <main+0x582>
					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
80009836:	30 2c       	mov	r12,2
80009838:	f0 1f 03 a8 	mcall	8000a6d8 <main+0x14d0>
8000983c:	e0 68 0b b8 	mov	r8,3000
80009840:	ef 48 ff 00 	st.w	r7[-256],r8
80009844:	e0 68 12 00 	mov	r8,4608
80009848:	ea 18 00 7a 	orh	r8,0x7a
8000984c:	ef 48 fe fc 	st.w	r7[-260],r8
80009850:	ee f8 ff 00 	ld.w	r8,r7[-256]
80009854:	ef 48 ff 08 	st.w	r7[-248],r8
80009858:	ee f8 fe fc 	ld.w	r8,r7[-260]
8000985c:	ef 48 ff 04 	st.w	r7[-252],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009860:	ee fa ff 08 	ld.w	r10,r7[-248]
80009864:	ef 4a fd ac 	st.w	r7[-596],r10
80009868:	30 08       	mov	r8,0
8000986a:	ef 48 fd a8 	st.w	r7[-600],r8
8000986e:	ee fc ff 04 	ld.w	r12,r7[-252]
80009872:	ef 4c fd a4 	st.w	r7[-604],r12
80009876:	30 0a       	mov	r10,0
80009878:	ef 4a fd a0 	st.w	r7[-608],r10
8000987c:	ee f9 fd a8 	ld.w	r9,r7[-600]
80009880:	ee f8 fd a4 	ld.w	r8,r7[-604]
80009884:	b1 39       	mul	r9,r8
80009886:	ee f8 fd a0 	ld.w	r8,r7[-608]
8000988a:	ee fc fd ac 	ld.w	r12,r7[-596]
8000988e:	b9 38       	mul	r8,r12
80009890:	10 09       	add	r9,r8
80009892:	ee f8 fd ac 	ld.w	r8,r7[-596]
80009896:	ee fc fd a4 	ld.w	r12,r7[-604]
8000989a:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000989e:	16 09       	add	r9,r11
800098a0:	12 9b       	mov	r11,r9
800098a2:	e0 68 03 e7 	mov	r8,999
800098a6:	30 09       	mov	r9,0
800098a8:	10 0a       	add	r10,r8
800098aa:	f6 09 00 4b 	adc	r11,r11,r9
800098ae:	e0 68 03 e8 	mov	r8,1000
800098b2:	30 09       	mov	r9,0
800098b4:	f0 1f 03 7f 	mcall	8000a6b0 <main+0x14a8>
800098b8:	14 98       	mov	r8,r10
800098ba:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800098bc:	ef 48 ff 10 	st.w	r7[-240],r8
800098c0:	ee c8 01 ac 	sub	r8,r7,428
800098c4:	ef 48 ff 0c 	st.w	r7[-244],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800098c8:	e1 b8 00 42 	mfsr	r8,0x108
800098cc:	10 99       	mov	r9,r8
800098ce:	ee f8 ff 0c 	ld.w	r8,r7[-244]
800098d2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800098d4:	ee f8 ff 0c 	ld.w	r8,r7[-244]
800098d8:	70 09       	ld.w	r9,r8[0x0]
800098da:	ee f8 ff 10 	ld.w	r8,r7[-240]
800098de:	10 09       	add	r9,r8
800098e0:	ee f8 ff 0c 	ld.w	r8,r7[-244]
800098e4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800098e6:	ee f9 ff 0c 	ld.w	r9,r7[-244]
800098ea:	30 08       	mov	r8,0
800098ec:	f3 68 00 08 	st.b	r9[8],r8
800098f0:	ee c8 01 ac 	sub	r8,r7,428
800098f4:	ef 48 ff 14 	st.w	r7[-236],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800098f8:	e1 b8 00 42 	mfsr	r8,0x108
800098fc:	ef 48 ff 18 	st.w	r7[-232],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009900:	ee f8 ff 14 	ld.w	r8,r7[-236]
80009904:	f1 39 00 08 	ld.ub	r9,r8[8]
80009908:	30 28       	mov	r8,2
8000990a:	f0 09 18 00 	cp.b	r9,r8
8000990e:	c0 31       	brne	80009914 <main+0x70c>
    return false;
80009910:	30 08       	mov	r8,0
80009912:	c4 38       	rjmp	80009998 <main+0x790>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009914:	ee f8 ff 14 	ld.w	r8,r7[-236]
80009918:	f1 39 00 08 	ld.ub	r9,r8[8]
8000991c:	30 18       	mov	r8,1
8000991e:	f0 09 18 00 	cp.b	r9,r8
80009922:	c0 31       	brne	80009928 <main+0x720>
    return true;
80009924:	30 18       	mov	r8,1
80009926:	c3 98       	rjmp	80009998 <main+0x790>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009928:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000992c:	70 09       	ld.w	r9,r8[0x0]
8000992e:	ee f8 ff 14 	ld.w	r8,r7[-236]
80009932:	70 18       	ld.w	r8,r8[0x4]
80009934:	10 39       	cp.w	r9,r8
80009936:	e0 88 00 1a 	brls	8000996a <main+0x762>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000993a:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000993e:	70 09       	ld.w	r9,r8[0x0]
80009940:	ee f8 ff 18 	ld.w	r8,r7[-232]
80009944:	12 38       	cp.w	r8,r9
80009946:	c1 02       	brcc	80009966 <main+0x75e>
80009948:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000994c:	70 19       	ld.w	r9,r8[0x4]
8000994e:	ee f8 ff 18 	ld.w	r8,r7[-232]
80009952:	12 38       	cp.w	r8,r9
80009954:	e0 88 00 09 	brls	80009966 <main+0x75e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009958:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000995c:	30 18       	mov	r8,1
8000995e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009962:	30 18       	mov	r8,1
80009964:	c1 a8       	rjmp	80009998 <main+0x790>
    }
    return false;
80009966:	30 08       	mov	r8,0
80009968:	c1 88       	rjmp	80009998 <main+0x790>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000996a:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000996e:	70 09       	ld.w	r9,r8[0x0]
80009970:	ee f8 ff 18 	ld.w	r8,r7[-232]
80009974:	12 38       	cp.w	r8,r9
80009976:	c0 93       	brcs	80009988 <main+0x780>
80009978:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000997c:	70 19       	ld.w	r9,r8[0x4]
8000997e:	ee f8 ff 18 	ld.w	r8,r7[-232]
80009982:	12 38       	cp.w	r8,r9
80009984:	e0 88 00 09 	brls	80009996 <main+0x78e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009988:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000998c:	30 18       	mov	r8,1
8000998e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009992:	30 18       	mov	r8,1
80009994:	c0 28       	rjmp	80009998 <main+0x790>
    }
    return false;
80009996:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80009998:	58 08       	cp.w	r8,0
8000999a:	ca b0       	breq	800098f0 <main+0x6e8>
					electroclaveState = STATE_START_CLEAN;
					print_ecdbg("No shelves, no devices or shelves are past lifetime, charging devices\r\n");
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
				}
				break;
8000999c:	e0 8f 04 f6 	bral	8000a388 <main+0x1180>
					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
					cpu_delay_ms(3000, EC_CPU_CLOCK_FREQ); //give display time to update, scroll all the way across
				}
				else {
					electroclaveState = STATE_START_CLEAN;
800099a0:	fe f9 0d 50 	ld.w	r9,pc[3408]
800099a4:	30 68       	mov	r8,6
800099a6:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("No shelves, no devices or shelves are past lifetime, charging devices\r\n");
800099a8:	fe fc 0d 84 	ld.w	r12,pc[3460]
800099ac:	f0 1f 03 4a 	mcall	8000a6d4 <main+0x14cc>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
800099b0:	30 0c       	mov	r12,0
800099b2:	f0 1f 03 4a 	mcall	8000a6d8 <main+0x14d0>
				}
				break;
800099b6:	e0 8f 04 e9 	bral	8000a388 <main+0x1180>
				
			case STATE_START_SANITIZE:
				display_text(IDX_CLEAR);
800099ba:	30 9c       	mov	r12,9
800099bc:	f0 1f 03 47 	mcall	8000a6d8 <main+0x14d0>
800099c0:	e0 68 01 f4 	mov	r8,500
800099c4:	ef 48 ff 20 	st.w	r7[-224],r8
800099c8:	e0 68 12 00 	mov	r8,4608
800099cc:	ea 18 00 7a 	orh	r8,0x7a
800099d0:	ef 48 ff 1c 	st.w	r7[-228],r8
800099d4:	ee f8 ff 20 	ld.w	r8,r7[-224]
800099d8:	ef 48 ff 28 	st.w	r7[-216],r8
800099dc:	ee f8 ff 1c 	ld.w	r8,r7[-228]
800099e0:	ef 48 ff 24 	st.w	r7[-220],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800099e4:	ee fa ff 28 	ld.w	r10,r7[-216]
800099e8:	ef 4a fd bc 	st.w	r7[-580],r10
800099ec:	30 08       	mov	r8,0
800099ee:	ef 48 fd b8 	st.w	r7[-584],r8
800099f2:	ee fc ff 24 	ld.w	r12,r7[-220]
800099f6:	ef 4c fd b4 	st.w	r7[-588],r12
800099fa:	30 0a       	mov	r10,0
800099fc:	ef 4a fd b0 	st.w	r7[-592],r10
80009a00:	ee f9 fd b8 	ld.w	r9,r7[-584]
80009a04:	ee f8 fd b4 	ld.w	r8,r7[-588]
80009a08:	b1 39       	mul	r9,r8
80009a0a:	ee f8 fd b0 	ld.w	r8,r7[-592]
80009a0e:	ee fc fd bc 	ld.w	r12,r7[-580]
80009a12:	b9 38       	mul	r8,r12
80009a14:	10 09       	add	r9,r8
80009a16:	ee f8 fd bc 	ld.w	r8,r7[-580]
80009a1a:	ee fc fd b4 	ld.w	r12,r7[-588]
80009a1e:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009a22:	16 09       	add	r9,r11
80009a24:	12 9b       	mov	r11,r9
80009a26:	e0 68 03 e7 	mov	r8,999
80009a2a:	30 09       	mov	r9,0
80009a2c:	10 0a       	add	r10,r8
80009a2e:	f6 09 00 4b 	adc	r11,r11,r9
80009a32:	e0 68 03 e8 	mov	r8,1000
80009a36:	30 09       	mov	r9,0
80009a38:	f0 1f 03 1e 	mcall	8000a6b0 <main+0x14a8>
80009a3c:	14 98       	mov	r8,r10
80009a3e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80009a40:	ef 48 ff 30 	st.w	r7[-208],r8
80009a44:	ee c8 01 a0 	sub	r8,r7,416
80009a48:	ef 48 ff 2c 	st.w	r7[-212],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009a4c:	e1 b8 00 42 	mfsr	r8,0x108
80009a50:	10 99       	mov	r9,r8
80009a52:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80009a56:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009a58:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80009a5c:	70 09       	ld.w	r9,r8[0x0]
80009a5e:	ee f8 ff 30 	ld.w	r8,r7[-208]
80009a62:	10 09       	add	r9,r8
80009a64:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80009a68:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009a6a:	ee f9 ff 2c 	ld.w	r9,r7[-212]
80009a6e:	30 08       	mov	r8,0
80009a70:	f3 68 00 08 	st.b	r9[8],r8
80009a74:	ee c8 01 a0 	sub	r8,r7,416
80009a78:	ef 48 ff 34 	st.w	r7[-204],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009a7c:	e1 b8 00 42 	mfsr	r8,0x108
80009a80:	ef 48 ff 38 	st.w	r7[-200],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009a84:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009a88:	f1 39 00 08 	ld.ub	r9,r8[8]
80009a8c:	30 28       	mov	r8,2
80009a8e:	f0 09 18 00 	cp.b	r9,r8
80009a92:	c0 31       	brne	80009a98 <main+0x890>
    return false;
80009a94:	30 08       	mov	r8,0
80009a96:	c4 38       	rjmp	80009b1c <main+0x914>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009a98:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009a9c:	f1 39 00 08 	ld.ub	r9,r8[8]
80009aa0:	30 18       	mov	r8,1
80009aa2:	f0 09 18 00 	cp.b	r9,r8
80009aa6:	c0 31       	brne	80009aac <main+0x8a4>
    return true;
80009aa8:	30 18       	mov	r8,1
80009aaa:	c3 98       	rjmp	80009b1c <main+0x914>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009aac:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009ab0:	70 09       	ld.w	r9,r8[0x0]
80009ab2:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009ab6:	70 18       	ld.w	r8,r8[0x4]
80009ab8:	10 39       	cp.w	r9,r8
80009aba:	e0 88 00 1a 	brls	80009aee <main+0x8e6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009abe:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009ac2:	70 09       	ld.w	r9,r8[0x0]
80009ac4:	ee f8 ff 38 	ld.w	r8,r7[-200]
80009ac8:	12 38       	cp.w	r8,r9
80009aca:	c1 02       	brcc	80009aea <main+0x8e2>
80009acc:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009ad0:	70 19       	ld.w	r9,r8[0x4]
80009ad2:	ee f8 ff 38 	ld.w	r8,r7[-200]
80009ad6:	12 38       	cp.w	r8,r9
80009ad8:	e0 88 00 09 	brls	80009aea <main+0x8e2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009adc:	ee f9 ff 34 	ld.w	r9,r7[-204]
80009ae0:	30 18       	mov	r8,1
80009ae2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009ae6:	30 18       	mov	r8,1
80009ae8:	c1 a8       	rjmp	80009b1c <main+0x914>
    }
    return false;
80009aea:	30 08       	mov	r8,0
80009aec:	c1 88       	rjmp	80009b1c <main+0x914>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009aee:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009af2:	70 09       	ld.w	r9,r8[0x0]
80009af4:	ee f8 ff 38 	ld.w	r8,r7[-200]
80009af8:	12 38       	cp.w	r8,r9
80009afa:	c0 93       	brcs	80009b0c <main+0x904>
80009afc:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009b00:	70 19       	ld.w	r9,r8[0x4]
80009b02:	ee f8 ff 38 	ld.w	r8,r7[-200]
80009b06:	12 38       	cp.w	r8,r9
80009b08:	e0 88 00 09 	brls	80009b1a <main+0x912>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009b0c:	ee f9 ff 34 	ld.w	r9,r7[-204]
80009b10:	30 18       	mov	r8,1
80009b12:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009b16:	30 18       	mov	r8,1
80009b18:	c0 28       	rjmp	80009b1c <main+0x914>
    }
    return false;
80009b1a:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80009b1c:	58 08       	cp.w	r8,0
80009b1e:	ca b0       	breq	80009a74 <main+0x86c>
				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
80009b20:	fe f9 0c 10 	ld.w	r9,pc[3088]
80009b24:	3f f8       	mov	r8,-1
80009b26:	b2 88       	st.b	r9[0x0],r8
				sanitizeMinutes = 0;
80009b28:	fe f9 0c 0c 	ld.w	r9,pc[3084]
80009b2c:	30 08       	mov	r8,0
80009b2e:	93 08       	st.w	r9[0x0],r8
				for (int i = 0; i<NUM_SHELVES; i++) {
80009b30:	30 08       	mov	r8,0
80009b32:	ef 48 fe 80 	st.w	r7[-384],r8
80009b36:	c4 28       	rjmp	80009bba <main+0x9b2>
					if (shelf[i].active == SHELF_ACTIVE) {
80009b38:	ee f9 fe 80 	ld.w	r9,r7[-384]
80009b3c:	fe fa 0b fc 	ld.w	r10,pc[3068]
80009b40:	12 98       	mov	r8,r9
80009b42:	a3 68       	lsl	r8,0x2
80009b44:	12 08       	add	r8,r9
80009b46:	f4 08 00 08 	add	r8,r10,r8
80009b4a:	11 89       	ld.ub	r9,r8[0x0]
80009b4c:	30 18       	mov	r8,1
80009b4e:	f0 09 18 00 	cp.b	r9,r8
80009b52:	c2 f1       	brne	80009bb0 <main+0x9a8>
						tmpSanitizeMinutes = calc_sanitize_time(i);
80009b54:	ee f8 fe 80 	ld.w	r8,r7[-384]
80009b58:	5c 58       	castu.b	r8
80009b5a:	10 9c       	mov	r12,r8
80009b5c:	f0 1f 02 f8 	mcall	8000a73c <main+0x1534>
80009b60:	18 98       	mov	r8,r12
80009b62:	10 99       	mov	r9,r8
80009b64:	fe f8 0b dc 	ld.w	r8,pc[3036]
80009b68:	91 09       	st.w	r8[0x0],r9
						
						if (tmpSanitizeMinutes > sanitizeMinutes)
80009b6a:	fe f8 0b d6 	ld.w	r8,pc[3030]
80009b6e:	70 09       	ld.w	r9,r8[0x0]
80009b70:	fe f8 0b c4 	ld.w	r8,pc[3012]
80009b74:	70 08       	ld.w	r8,r8[0x0]
80009b76:	10 39       	cp.w	r9,r8
80009b78:	e0 88 00 08 	brls	80009b88 <main+0x980>
						{
							sanitizeMinutes = tmpSanitizeMinutes;
80009b7c:	fe f8 0b c4 	ld.w	r8,pc[3012]
80009b80:	70 09       	ld.w	r9,r8[0x0]
80009b82:	fe f8 0b b2 	ld.w	r8,pc[2994]
80009b86:	91 09       	st.w	r8[0x0],r9
						}
						
						led_shelf(i, LED_ON);
80009b88:	ee f8 fe 80 	ld.w	r8,r7[-384]
80009b8c:	5c 58       	castu.b	r8
80009b8e:	30 1b       	mov	r11,1
80009b90:	10 9c       	mov	r12,r8
80009b92:	f0 1f 02 ed 	mcall	8000a744 <main+0x153c>
						
						if (displayIdx == 0xFF)
80009b96:	fe f8 0b 9a 	ld.w	r8,pc[2970]
80009b9a:	11 89       	ld.ub	r9,r8[0x0]
80009b9c:	3f f8       	mov	r8,-1
80009b9e:	f0 09 18 00 	cp.b	r9,r8
80009ba2:	c0 71       	brne	80009bb0 <main+0x9a8>
						{
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
80009ba4:	ee f8 fe 80 	ld.w	r8,r7[-384]
80009ba8:	5c 58       	castu.b	r8
80009baa:	fe f9 0b 86 	ld.w	r9,pc[2950]
80009bae:	b2 88       	st.b	r9[0x0],r8
				display_text(IDX_CLEAR);
				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
				sanitizeMinutes = 0;
				for (int i = 0; i<NUM_SHELVES; i++) {
80009bb0:	ee f8 fe 80 	ld.w	r8,r7[-384]
80009bb4:	2f f8       	sub	r8,-1
80009bb6:	ef 48 fe 80 	st.w	r7[-384],r8
80009bba:	ee f8 fe 80 	ld.w	r8,r7[-384]
80009bbe:	58 38       	cp.w	r8,3
80009bc0:	fe 9a ff bc 	brle	80009b38 <main+0x930>
80009bc4:	e0 68 1f 40 	mov	r8,8000
80009bc8:	ef 48 ff 40 	st.w	r7[-192],r8
80009bcc:	e0 68 12 00 	mov	r8,4608
80009bd0:	ea 18 00 7a 	orh	r8,0x7a
80009bd4:	ef 48 ff 3c 	st.w	r7[-196],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009bd8:	ee fa ff 40 	ld.w	r10,r7[-192]
80009bdc:	ef 4a fd cc 	st.w	r7[-564],r10
80009be0:	30 08       	mov	r8,0
80009be2:	ef 48 fd c8 	st.w	r7[-568],r8
80009be6:	ee fc ff 3c 	ld.w	r12,r7[-196]
80009bea:	ef 4c fd c4 	st.w	r7[-572],r12
80009bee:	30 0a       	mov	r10,0
80009bf0:	ef 4a fd c0 	st.w	r7[-576],r10
80009bf4:	ee f9 fd c8 	ld.w	r9,r7[-568]
80009bf8:	ee f8 fd c4 	ld.w	r8,r7[-572]
80009bfc:	b1 39       	mul	r9,r8
80009bfe:	ee f8 fd c0 	ld.w	r8,r7[-576]
80009c02:	ee fc fd cc 	ld.w	r12,r7[-564]
80009c06:	b9 38       	mul	r8,r12
80009c08:	10 09       	add	r9,r8
80009c0a:	ee f8 fd cc 	ld.w	r8,r7[-564]
80009c0e:	ee fc fd c4 	ld.w	r12,r7[-572]
80009c12:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009c16:	16 09       	add	r9,r11
80009c18:	12 9b       	mov	r11,r9
80009c1a:	e0 68 03 e7 	mov	r8,999
80009c1e:	30 09       	mov	r9,0
80009c20:	10 0a       	add	r10,r8
80009c22:	f6 09 00 4b 	adc	r11,r11,r9
80009c26:	e0 68 03 e8 	mov	r8,1000
80009c2a:	30 09       	mov	r9,0
80009c2c:	f0 1f 02 a1 	mcall	8000a6b0 <main+0x14a8>
80009c30:	14 98       	mov	r8,r10
80009c32:	16 99       	mov	r9,r11
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
						}
					}
				}
				
				displayTimerSeconds = cpu_ms_2_cy(8000, EC_CPU_CLOCK_FREQ); //8 seconds per "shelf" display is enough time for the text to scroll twice
80009c34:	10 99       	mov	r9,r8
80009c36:	fe f8 0b 12 	ld.w	r8,pc[2834]
80009c3a:	91 09       	st.w	r8[0x0],r9
				cpu_set_timeout(displayTimerSeconds, &displayTimer);
80009c3c:	fe f8 0b 0c 	ld.w	r8,pc[2828]
80009c40:	70 08       	ld.w	r8,r8[0x0]
80009c42:	ef 48 ff 48 	st.w	r7[-184],r8
80009c46:	fe f8 0b 06 	ld.w	r8,pc[2822]
80009c4a:	ef 48 ff 44 	st.w	r7[-188],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009c4e:	e1 b8 00 42 	mfsr	r8,0x108
80009c52:	10 99       	mov	r9,r8
80009c54:	ee f8 ff 44 	ld.w	r8,r7[-188]
80009c58:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009c5a:	ee f8 ff 44 	ld.w	r8,r7[-188]
80009c5e:	70 09       	ld.w	r9,r8[0x0]
80009c60:	ee f8 ff 48 	ld.w	r8,r7[-184]
80009c64:	10 09       	add	r9,r8
80009c66:	ee f8 ff 44 	ld.w	r8,r7[-188]
80009c6a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009c6c:	ee f9 ff 44 	ld.w	r9,r7[-188]
80009c70:	30 08       	mov	r8,0
80009c72:	f3 68 00 08 	st.b	r9[8],r8
80009c76:	e0 68 03 e8 	mov	r8,1000
80009c7a:	ef 48 ff 50 	st.w	r7[-176],r8
80009c7e:	e0 68 12 00 	mov	r8,4608
80009c82:	ea 18 00 7a 	orh	r8,0x7a
80009c86:	ef 48 ff 4c 	st.w	r7[-180],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009c8a:	ee fa ff 50 	ld.w	r10,r7[-176]
80009c8e:	ef 4a fd dc 	st.w	r7[-548],r10
80009c92:	30 08       	mov	r8,0
80009c94:	ef 48 fd d8 	st.w	r7[-552],r8
80009c98:	ee fc ff 4c 	ld.w	r12,r7[-180]
80009c9c:	ef 4c fd d4 	st.w	r7[-556],r12
80009ca0:	30 0a       	mov	r10,0
80009ca2:	ef 4a fd d0 	st.w	r7[-560],r10
80009ca6:	ee f9 fd d8 	ld.w	r9,r7[-552]
80009caa:	ee f8 fd d4 	ld.w	r8,r7[-556]
80009cae:	b1 39       	mul	r9,r8
80009cb0:	ee f8 fd d0 	ld.w	r8,r7[-560]
80009cb4:	ee fc fd dc 	ld.w	r12,r7[-548]
80009cb8:	b9 38       	mul	r8,r12
80009cba:	10 09       	add	r9,r8
80009cbc:	ee f8 fd dc 	ld.w	r8,r7[-548]
80009cc0:	ee fc fd d4 	ld.w	r12,r7[-556]
80009cc4:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009cc8:	16 09       	add	r9,r11
80009cca:	12 9b       	mov	r11,r9
80009ccc:	e0 68 03 e7 	mov	r8,999
80009cd0:	30 09       	mov	r9,0
80009cd2:	10 0a       	add	r10,r8
80009cd4:	f6 09 00 4b 	adc	r11,r11,r9
80009cd8:	e0 68 03 e8 	mov	r8,1000
80009cdc:	30 09       	mov	r9,0
80009cde:	f0 1f 02 75 	mcall	8000a6b0 <main+0x14a8>
80009ce2:	14 98       	mov	r8,r10
80009ce4:	16 99       	mov	r9,r11
				
#if 0 //DEBUG: set this to seconds not minutes so we can debug this logic faster 11may15				
				cpu_set_timeout((sanitizeMinutes * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer);
#endif
				cpu_set_timeout((sanitizeMinutes * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer); //DEBUG take this out when done debugging logic, put it back to minutes 11may15
80009ce6:	10 99       	mov	r9,r8
80009ce8:	fe f8 0a 4c 	ld.w	r8,pc[2636]
80009cec:	70 08       	ld.w	r8,r8[0x0]
80009cee:	f2 08 02 48 	mul	r8,r9,r8
80009cf2:	ef 48 ff 58 	st.w	r7[-168],r8
80009cf6:	fe f8 0a 5a 	ld.w	r8,pc[2650]
80009cfa:	ef 48 ff 54 	st.w	r7[-172],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009cfe:	e1 b8 00 42 	mfsr	r8,0x108
80009d02:	10 99       	mov	r9,r8
80009d04:	ee f8 ff 54 	ld.w	r8,r7[-172]
80009d08:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009d0a:	ee f8 ff 54 	ld.w	r8,r7[-172]
80009d0e:	70 09       	ld.w	r9,r8[0x0]
80009d10:	ee f8 ff 58 	ld.w	r8,r7[-168]
80009d14:	10 09       	add	r9,r8
80009d16:	ee f8 ff 54 	ld.w	r8,r7[-172]
80009d1a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009d1c:	ee f9 ff 54 	ld.w	r9,r7[-172]
80009d20:	30 08       	mov	r8,0
80009d22:	f3 68 00 08 	st.b	r9[8],r8
80009d26:	e0 68 03 e8 	mov	r8,1000
80009d2a:	ef 48 ff 60 	st.w	r7[-160],r8
80009d2e:	e0 68 12 00 	mov	r8,4608
80009d32:	ea 18 00 7a 	orh	r8,0x7a
80009d36:	ef 48 ff 5c 	st.w	r7[-164],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009d3a:	ee fa ff 60 	ld.w	r10,r7[-160]
80009d3e:	ef 4a fd ec 	st.w	r7[-532],r10
80009d42:	30 08       	mov	r8,0
80009d44:	ef 48 fd e8 	st.w	r7[-536],r8
80009d48:	ee fc ff 5c 	ld.w	r12,r7[-164]
80009d4c:	ef 4c fd e4 	st.w	r7[-540],r12
80009d50:	30 0a       	mov	r10,0
80009d52:	ef 4a fd e0 	st.w	r7[-544],r10
80009d56:	ee f9 fd e8 	ld.w	r9,r7[-536]
80009d5a:	ee f8 fd e4 	ld.w	r8,r7[-540]
80009d5e:	b1 39       	mul	r9,r8
80009d60:	ee f8 fd e0 	ld.w	r8,r7[-544]
80009d64:	ee fc fd ec 	ld.w	r12,r7[-532]
80009d68:	b9 38       	mul	r8,r12
80009d6a:	10 09       	add	r9,r8
80009d6c:	ee f8 fd ec 	ld.w	r8,r7[-532]
80009d70:	ee fc fd e4 	ld.w	r12,r7[-540]
80009d74:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009d78:	16 09       	add	r9,r11
80009d7a:	12 9b       	mov	r11,r9
80009d7c:	e0 68 03 e7 	mov	r8,999
80009d80:	30 09       	mov	r9,0
80009d82:	10 0a       	add	r10,r8
80009d84:	f6 09 00 4b 	adc	r11,r11,r9
80009d88:	e0 68 03 e8 	mov	r8,1000
80009d8c:	30 09       	mov	r9,0
80009d8e:	f0 1f 02 49 	mcall	8000a6b0 <main+0x14a8>
80009d92:	14 98       	mov	r8,r10
80009d94:	16 99       	mov	r9,r11

				
//DEBUG 11may15 do this once per second for debug				cpu_set_timeout((60 * cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics
				cpu_set_timeout((cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics DEBUG 11may15
80009d96:	ef 48 ff 68 	st.w	r7[-152],r8
80009d9a:	fe f8 09 ba 	ld.w	r8,pc[2490]
80009d9e:	ef 48 ff 64 	st.w	r7[-156],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009da2:	e1 b8 00 42 	mfsr	r8,0x108
80009da6:	10 99       	mov	r9,r8
80009da8:	ee f8 ff 64 	ld.w	r8,r7[-156]
80009dac:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009dae:	ee f8 ff 64 	ld.w	r8,r7[-156]
80009db2:	70 09       	ld.w	r9,r8[0x0]
80009db4:	ee f8 ff 68 	ld.w	r8,r7[-152]
80009db8:	10 09       	add	r9,r8
80009dba:	ee f8 ff 64 	ld.w	r8,r7[-156]
80009dbe:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009dc0:	ee f9 ff 64 	ld.w	r9,r7[-156]
80009dc4:	30 08       	mov	r8,0
80009dc6:	f3 68 00 08 	st.b	r9[8],r8

				electroclaveState = STATE_SANITIZE;
80009dca:	fe f9 09 26 	ld.w	r9,pc[2342]
80009dce:	30 58       	mov	r8,5
80009dd0:	b2 88       	st.b	r9[0x0],r8
				
				break;
80009dd2:	e0 8f 02 db 	bral	8000a388 <main+0x1180>
80009dd6:	fe f8 09 76 	ld.w	r8,pc[2422]
80009dda:	ef 48 ff 6c 	st.w	r7[-148],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009dde:	e1 b8 00 42 	mfsr	r8,0x108
80009de2:	ef 48 ff 70 	st.w	r7[-144],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009de6:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009dea:	f1 39 00 08 	ld.ub	r9,r8[8]
80009dee:	30 28       	mov	r8,2
80009df0:	f0 09 18 00 	cp.b	r9,r8
80009df4:	c0 31       	brne	80009dfa <main+0xbf2>
    return false;
80009df6:	30 08       	mov	r8,0
80009df8:	c4 38       	rjmp	80009e7e <main+0xc76>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009dfa:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009dfe:	f1 39 00 08 	ld.ub	r9,r8[8]
80009e02:	30 18       	mov	r8,1
80009e04:	f0 09 18 00 	cp.b	r9,r8
80009e08:	c0 31       	brne	80009e0e <main+0xc06>
    return true;
80009e0a:	30 18       	mov	r8,1
80009e0c:	c3 98       	rjmp	80009e7e <main+0xc76>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009e0e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009e12:	70 09       	ld.w	r9,r8[0x0]
80009e14:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009e18:	70 18       	ld.w	r8,r8[0x4]
80009e1a:	10 39       	cp.w	r9,r8
80009e1c:	e0 88 00 1a 	brls	80009e50 <main+0xc48>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009e20:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009e24:	70 09       	ld.w	r9,r8[0x0]
80009e26:	ee f8 ff 70 	ld.w	r8,r7[-144]
80009e2a:	12 38       	cp.w	r8,r9
80009e2c:	c1 02       	brcc	80009e4c <main+0xc44>
80009e2e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009e32:	70 19       	ld.w	r9,r8[0x4]
80009e34:	ee f8 ff 70 	ld.w	r8,r7[-144]
80009e38:	12 38       	cp.w	r8,r9
80009e3a:	e0 88 00 09 	brls	80009e4c <main+0xc44>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009e3e:	ee f9 ff 6c 	ld.w	r9,r7[-148]
80009e42:	30 18       	mov	r8,1
80009e44:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009e48:	30 18       	mov	r8,1
80009e4a:	c1 a8       	rjmp	80009e7e <main+0xc76>
    }
    return false;
80009e4c:	30 08       	mov	r8,0
80009e4e:	c1 88       	rjmp	80009e7e <main+0xc76>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009e50:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009e54:	70 09       	ld.w	r9,r8[0x0]
80009e56:	ee f8 ff 70 	ld.w	r8,r7[-144]
80009e5a:	12 38       	cp.w	r8,r9
80009e5c:	c0 93       	brcs	80009e6e <main+0xc66>
80009e5e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009e62:	70 19       	ld.w	r9,r8[0x4]
80009e64:	ee f8 ff 70 	ld.w	r8,r7[-144]
80009e68:	12 38       	cp.w	r8,r9
80009e6a:	e0 88 00 09 	brls	80009e7c <main+0xc74>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009e6e:	ee f9 ff 6c 	ld.w	r9,r7[-148]
80009e72:	30 18       	mov	r8,1
80009e74:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009e78:	30 18       	mov	r8,1
80009e7a:	c0 28       	rjmp	80009e7e <main+0xc76>
    }
    return false;
80009e7c:	30 08       	mov	r8,0
				
			case STATE_SANITIZE:
				/*
    			 * Manage the display
				 */
				if (cpu_is_timeout(&displayTimer))
80009e7e:	58 08       	cp.w	r8,0
80009e80:	c6 90       	breq	80009f52 <main+0xd4a>
80009e82:	fe f8 08 ca 	ld.w	r8,pc[2250]
80009e86:	ef 48 ff 74 	st.w	r7[-140],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80009e8a:	ee f9 ff 74 	ld.w	r9,r7[-140]
80009e8e:	30 28       	mov	r8,2
80009e90:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout(&displayTimer);
					switch (displayIdx)
80009e94:	fe f8 08 9c 	ld.w	r8,pc[2204]
80009e98:	11 88       	ld.ub	r8,r8[0x0]
80009e9a:	58 18       	cp.w	r8,1
80009e9c:	c0 f0       	breq	80009eba <main+0xcb2>
80009e9e:	e0 89 00 05 	brgt	80009ea8 <main+0xca0>
80009ea2:	58 08       	cp.w	r8,0
80009ea4:	c0 70       	breq	80009eb2 <main+0xcaa>
80009ea6:	c1 78       	rjmp	80009ed4 <main+0xccc>
80009ea8:	58 28       	cp.w	r8,2
80009eaa:	c0 c0       	breq	80009ec2 <main+0xcba>
80009eac:	58 38       	cp.w	r8,3
80009eae:	c0 e0       	breq	80009eca <main+0xcc2>
80009eb0:	c1 28       	rjmp	80009ed4 <main+0xccc>
					{
						case 0:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF1);
80009eb2:	30 5c       	mov	r12,5
80009eb4:	f0 1f 02 09 	mcall	8000a6d8 <main+0x14d0>
							break;
80009eb8:	c0 e8       	rjmp	80009ed4 <main+0xccc>
						case 1:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF2);
80009eba:	30 6c       	mov	r12,6
80009ebc:	f0 1f 02 07 	mcall	8000a6d8 <main+0x14d0>
							break;
80009ec0:	c0 a8       	rjmp	80009ed4 <main+0xccc>
						case 2:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF3);
80009ec2:	30 7c       	mov	r12,7
80009ec4:	f0 1f 02 05 	mcall	8000a6d8 <main+0x14d0>
							break;
80009ec8:	c0 68       	rjmp	80009ed4 <main+0xccc>
						case 3:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF4);
80009eca:	30 8c       	mov	r12,8
80009ecc:	f0 1f 02 03 	mcall	8000a6d8 <main+0x14d0>
80009ed0:	c0 28       	rjmp	80009ed4 <main+0xccc>
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
80009ed2:	d7 03       	nop
							break;
					}
					
					while (1)
					{
						if (++displayIdx >= NUM_SHELVES)
80009ed4:	fe f8 08 5c 	ld.w	r8,pc[2140]
80009ed8:	11 88       	ld.ub	r8,r8[0x0]
80009eda:	2f f8       	sub	r8,-1
80009edc:	5c 58       	castu.b	r8
80009ede:	fe f9 08 52 	ld.w	r9,pc[2130]
80009ee2:	b2 88       	st.b	r9[0x0],r8
80009ee4:	fe f8 08 4c 	ld.w	r8,pc[2124]
80009ee8:	11 89       	ld.ub	r9,r8[0x0]
80009eea:	30 38       	mov	r8,3
80009eec:	f0 09 18 00 	cp.b	r9,r8
80009ef0:	e0 88 00 06 	brls	80009efc <main+0xcf4>
						{
							displayIdx = 0; //12apr15 wrap around
80009ef4:	fe f9 08 3c 	ld.w	r9,pc[2108]
80009ef8:	30 08       	mov	r8,0
80009efa:	b2 88       	st.b	r9[0x0],r8
						}
						
						if (shelf[displayIdx].active)
80009efc:	fe f8 08 34 	ld.w	r8,pc[2100]
80009f00:	11 88       	ld.ub	r8,r8[0x0]
80009f02:	10 99       	mov	r9,r8
80009f04:	fe fa 08 34 	ld.w	r10,pc[2100]
80009f08:	12 98       	mov	r8,r9
80009f0a:	a3 68       	lsl	r8,0x2
80009f0c:	12 08       	add	r8,r9
80009f0e:	f4 08 00 08 	add	r8,r10,r8
80009f12:	11 88       	ld.ub	r8,r8[0x0]
80009f14:	58 08       	cp.w	r8,0
80009f16:	cd e0       	breq	80009ed2 <main+0xcca>
							break; //this shelf is active, we don't need to look for another one
						}
						
					}

					cpu_set_timeout(displayTimerSeconds, &displayTimer); //8 seconds per shelf
80009f18:	fe f8 08 30 	ld.w	r8,pc[2096]
80009f1c:	70 08       	ld.w	r8,r8[0x0]
80009f1e:	ef 48 ff 7c 	st.w	r7[-132],r8
80009f22:	fe f8 08 2a 	ld.w	r8,pc[2090]
80009f26:	ef 48 ff 78 	st.w	r7[-136],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009f2a:	e1 b8 00 42 	mfsr	r8,0x108
80009f2e:	10 99       	mov	r9,r8
80009f30:	ee f8 ff 78 	ld.w	r8,r7[-136]
80009f34:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009f36:	ee f8 ff 78 	ld.w	r8,r7[-136]
80009f3a:	70 09       	ld.w	r9,r8[0x0]
80009f3c:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80009f40:	10 09       	add	r9,r8
80009f42:	ee f8 ff 78 	ld.w	r8,r7[-136]
80009f46:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009f48:	ee f9 ff 78 	ld.w	r9,r7[-136]
80009f4c:	30 08       	mov	r8,0
80009f4e:	f3 68 00 08 	st.b	r9[8],r8
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
80009f52:	fe f8 08 02 	ld.w	r8,pc[2050]
80009f56:	ef 48 ff 80 	st.w	r7[-128],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009f5a:	e1 b8 00 42 	mfsr	r8,0x108
80009f5e:	ef 48 ff 84 	st.w	r7[-124],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009f62:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009f66:	f1 39 00 08 	ld.ub	r9,r8[8]
80009f6a:	30 28       	mov	r8,2
80009f6c:	f0 09 18 00 	cp.b	r9,r8
80009f70:	c0 31       	brne	80009f76 <main+0xd6e>
    return false;
80009f72:	30 08       	mov	r8,0
80009f74:	c4 38       	rjmp	80009ffa <main+0xdf2>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009f76:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009f7a:	f1 39 00 08 	ld.ub	r9,r8[8]
80009f7e:	30 18       	mov	r8,1
80009f80:	f0 09 18 00 	cp.b	r9,r8
80009f84:	c0 31       	brne	80009f8a <main+0xd82>
    return true;
80009f86:	30 18       	mov	r8,1
80009f88:	c3 98       	rjmp	80009ffa <main+0xdf2>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009f8a:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009f8e:	70 09       	ld.w	r9,r8[0x0]
80009f90:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009f94:	70 18       	ld.w	r8,r8[0x4]
80009f96:	10 39       	cp.w	r9,r8
80009f98:	e0 88 00 1a 	brls	80009fcc <main+0xdc4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009f9c:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009fa0:	70 09       	ld.w	r9,r8[0x0]
80009fa2:	ee f8 ff 84 	ld.w	r8,r7[-124]
80009fa6:	12 38       	cp.w	r8,r9
80009fa8:	c1 02       	brcc	80009fc8 <main+0xdc0>
80009faa:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009fae:	70 19       	ld.w	r9,r8[0x4]
80009fb0:	ee f8 ff 84 	ld.w	r8,r7[-124]
80009fb4:	12 38       	cp.w	r8,r9
80009fb6:	e0 88 00 09 	brls	80009fc8 <main+0xdc0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009fba:	ee f9 ff 80 	ld.w	r9,r7[-128]
80009fbe:	30 18       	mov	r8,1
80009fc0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009fc4:	30 18       	mov	r8,1
80009fc6:	c1 a8       	rjmp	80009ffa <main+0xdf2>
    }
    return false;
80009fc8:	30 08       	mov	r8,0
80009fca:	c1 88       	rjmp	80009ffa <main+0xdf2>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009fcc:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009fd0:	70 09       	ld.w	r9,r8[0x0]
80009fd2:	ee f8 ff 84 	ld.w	r8,r7[-124]
80009fd6:	12 38       	cp.w	r8,r9
80009fd8:	c0 93       	brcs	80009fea <main+0xde2>
80009fda:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009fde:	70 19       	ld.w	r9,r8[0x4]
80009fe0:	ee f8 ff 84 	ld.w	r8,r7[-124]
80009fe4:	12 38       	cp.w	r8,r9
80009fe6:	e0 88 00 09 	brls	80009ff8 <main+0xdf0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009fea:	ee f9 ff 80 	ld.w	r9,r7[-128]
80009fee:	30 18       	mov	r8,1
80009ff0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009ff4:	30 18       	mov	r8,1
80009ff6:	c0 28       	rjmp	80009ffa <main+0xdf2>
    }
    return false;
80009ff8:	30 08       	mov	r8,0
				}

				/*
    			 * Manage storing usage statistics to flash
				 */
				if (cpu_is_timeout (&oneMinuteTimer))
80009ffa:	58 08       	cp.w	r8,0
80009ffc:	c5 e0       	breq	8000a0b8 <main+0xeb0>
80009ffe:	fe f8 07 56 	ld.w	r8,pc[1878]
8000a002:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000a006:	ee f9 ff 88 	ld.w	r9,r7[-120]
8000a00a:	30 28       	mov	r8,2
8000a00c:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout (&oneMinuteTimer);
					
					increment_ledBoard_usage_min(); //increments usage minutes for active shelves only
8000a010:	f0 1f 01 d2 	mcall	8000a758 <main+0x1550>
8000a014:	e0 68 03 e8 	mov	r8,1000
8000a018:	ef 48 ff 90 	st.w	r7[-112],r8
8000a01c:	e0 68 12 00 	mov	r8,4608
8000a020:	ea 18 00 7a 	orh	r8,0x7a
8000a024:	ef 48 ff 8c 	st.w	r7[-116],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000a028:	ee fa ff 90 	ld.w	r10,r7[-112]
8000a02c:	ef 4a fd fc 	st.w	r7[-516],r10
8000a030:	30 08       	mov	r8,0
8000a032:	ef 48 fd f8 	st.w	r7[-520],r8
8000a036:	ee fc ff 8c 	ld.w	r12,r7[-116]
8000a03a:	ef 4c fd f4 	st.w	r7[-524],r12
8000a03e:	30 0a       	mov	r10,0
8000a040:	ef 4a fd f0 	st.w	r7[-528],r10
8000a044:	ee f9 fd f8 	ld.w	r9,r7[-520]
8000a048:	ee f8 fd f4 	ld.w	r8,r7[-524]
8000a04c:	b1 39       	mul	r9,r8
8000a04e:	ee f8 fd f0 	ld.w	r8,r7[-528]
8000a052:	ee fc fd fc 	ld.w	r12,r7[-516]
8000a056:	b9 38       	mul	r8,r12
8000a058:	10 09       	add	r9,r8
8000a05a:	ee f8 fd fc 	ld.w	r8,r7[-516]
8000a05e:	ee fc fd f4 	ld.w	r12,r7[-524]
8000a062:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000a066:	16 09       	add	r9,r11
8000a068:	12 9b       	mov	r11,r9
8000a06a:	e0 68 03 e7 	mov	r8,999
8000a06e:	30 09       	mov	r9,0
8000a070:	10 0a       	add	r10,r8
8000a072:	f6 09 00 4b 	adc	r11,r11,r9
8000a076:	e0 68 03 e8 	mov	r8,1000
8000a07a:	30 09       	mov	r9,0
8000a07c:	f0 1f 01 8d 	mcall	8000a6b0 <main+0x14a8>
8000a080:	14 98       	mov	r8,r10
8000a082:	16 99       	mov	r9,r11
					
//DEBUG 11may15 set to one second for debug					cpu_set_timeout(cpu_ms_2_cy(60000, EC_CPU_CLOCK_FREQ), &oneMinuteTimer); //one minute for the usage statistics
					cpu_set_timeout((cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics DEBUG 11may15 one second instead of one minute
8000a084:	ef 48 ff 98 	st.w	r7[-104],r8
8000a088:	fe f8 06 cc 	ld.w	r8,pc[1740]
8000a08c:	ef 48 ff 94 	st.w	r7[-108],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a090:	e1 b8 00 42 	mfsr	r8,0x108
8000a094:	10 99       	mov	r9,r8
8000a096:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000a09a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a09c:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000a0a0:	70 09       	ld.w	r9,r8[0x0]
8000a0a2:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000a0a6:	10 09       	add	r9,r8
8000a0a8:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000a0ac:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000a0ae:	ee f9 ff 94 	ld.w	r9,r7[-108]
8000a0b2:	30 08       	mov	r8,0
8000a0b4:	f3 68 00 08 	st.b	r9[8],r8
8000a0b8:	fe f8 06 98 	ld.w	r8,pc[1688]
8000a0bc:	ef 48 ff 9c 	st.w	r7[-100],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a0c0:	e1 b8 00 42 	mfsr	r8,0x108
8000a0c4:	ef 48 ff a0 	st.w	r7[-96],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000a0c8:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a0cc:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a0d0:	30 28       	mov	r8,2
8000a0d2:	f0 09 18 00 	cp.b	r9,r8
8000a0d6:	c0 31       	brne	8000a0dc <main+0xed4>
    return false;
8000a0d8:	30 08       	mov	r8,0
8000a0da:	c4 38       	rjmp	8000a160 <main+0xf58>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000a0dc:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a0e0:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a0e4:	30 18       	mov	r8,1
8000a0e6:	f0 09 18 00 	cp.b	r9,r8
8000a0ea:	c0 31       	brne	8000a0f0 <main+0xee8>
    return true;
8000a0ec:	30 18       	mov	r8,1
8000a0ee:	c3 98       	rjmp	8000a160 <main+0xf58>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a0f0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a0f4:	70 09       	ld.w	r9,r8[0x0]
8000a0f6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a0fa:	70 18       	ld.w	r8,r8[0x4]
8000a0fc:	10 39       	cp.w	r9,r8
8000a0fe:	e0 88 00 1a 	brls	8000a132 <main+0xf2a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a102:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a106:	70 09       	ld.w	r9,r8[0x0]
8000a108:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000a10c:	12 38       	cp.w	r8,r9
8000a10e:	c1 02       	brcc	8000a12e <main+0xf26>
8000a110:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a114:	70 19       	ld.w	r9,r8[0x4]
8000a116:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000a11a:	12 38       	cp.w	r8,r9
8000a11c:	e0 88 00 09 	brls	8000a12e <main+0xf26>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000a120:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000a124:	30 18       	mov	r8,1
8000a126:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000a12a:	30 18       	mov	r8,1
8000a12c:	c1 a8       	rjmp	8000a160 <main+0xf58>
    }
    return false;
8000a12e:	30 08       	mov	r8,0
8000a130:	c1 88       	rjmp	8000a160 <main+0xf58>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a132:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a136:	70 09       	ld.w	r9,r8[0x0]
8000a138:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000a13c:	12 38       	cp.w	r8,r9
8000a13e:	c0 93       	brcs	8000a150 <main+0xf48>
8000a140:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a144:	70 19       	ld.w	r9,r8[0x4]
8000a146:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000a14a:	12 38       	cp.w	r8,r9
8000a14c:	e0 88 00 09 	brls	8000a15e <main+0xf56>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000a150:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000a154:	30 18       	mov	r8,1
8000a156:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000a15a:	30 18       	mov	r8,1
8000a15c:	c0 28       	rjmp	8000a160 <main+0xf58>
    }
    return false;
8000a15e:	30 08       	mov	r8,0
				}
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
8000a160:	58 08       	cp.w	r8,0
8000a162:	e0 80 01 10 	breq	8000a382 <main+0x117a>
					
					for (int i=0; i< NUM_SHELVES; i++)
8000a166:	30 08       	mov	r8,0
8000a168:	ef 48 fe 84 	st.w	r7[-380],r8
8000a16c:	c0 d8       	rjmp	8000a186 <main+0xf7e>
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
8000a16e:	ee f8 fe 84 	ld.w	r8,r7[-380]
8000a172:	5c 58       	castu.b	r8
8000a174:	30 0b       	mov	r11,0
8000a176:	10 9c       	mov	r12,r8
8000a178:	f0 1f 01 73 	mcall	8000a744 <main+0x153c>
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
					
					for (int i=0; i< NUM_SHELVES; i++)
8000a17c:	ee f8 fe 84 	ld.w	r8,r7[-380]
8000a180:	2f f8       	sub	r8,-1
8000a182:	ef 48 fe 84 	st.w	r7[-380],r8
8000a186:	ee f8 fe 84 	ld.w	r8,r7[-380]
8000a18a:	58 38       	cp.w	r8,3
8000a18c:	fe 9a ff f1 	brle	8000a16e <main+0xf66>
8000a190:	fe f8 05 c0 	ld.w	r8,pc[1472]
8000a194:	ef 48 ff a4 	st.w	r7[-92],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000a198:	ee f9 ff a4 	ld.w	r9,r7[-92]
8000a19c:	30 28       	mov	r8,2
8000a19e:	f3 68 00 08 	st.b	r9[8],r8
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
8000a1a2:	fe fc 05 ba 	ld.w	r12,pc[1466]
8000a1a6:	f0 1f 01 4c 	mcall	8000a6d4 <main+0x14cc>
					electroclaveState = STATE_START_CLEAN;
8000a1aa:	fe f9 05 46 	ld.w	r9,pc[1350]
8000a1ae:	30 68       	mov	r8,6
8000a1b0:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000a1b2:	ce b8       	rjmp	8000a388 <main+0x1180>
				
			case STATE_START_CLEAN:
				display_text(IDX_CLEAN);
8000a1b4:	30 1c       	mov	r12,1
8000a1b6:	f0 1f 01 49 	mcall	8000a6d8 <main+0x14d0>
				electroclaveState = STATE_CLEAN;
8000a1ba:	fe f9 05 36 	ld.w	r9,pc[1334]
8000a1be:	30 78       	mov	r8,7
8000a1c0:	b2 88       	st.b	r9[0x0],r8
8000a1c2:	e0 68 03 e8 	mov	r8,1000
8000a1c6:	ef 48 ff ac 	st.w	r7[-84],r8
8000a1ca:	e0 68 12 00 	mov	r8,4608
8000a1ce:	ea 18 00 7a 	orh	r8,0x7a
8000a1d2:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000a1d6:	ee fa ff ac 	ld.w	r10,r7[-84]
8000a1da:	ef 4a fe 0c 	st.w	r7[-500],r10
8000a1de:	30 08       	mov	r8,0
8000a1e0:	ef 48 fe 08 	st.w	r7[-504],r8
8000a1e4:	ee fc ff a8 	ld.w	r12,r7[-88]
8000a1e8:	ef 4c fe 04 	st.w	r7[-508],r12
8000a1ec:	30 0a       	mov	r10,0
8000a1ee:	ef 4a fe 00 	st.w	r7[-512],r10
8000a1f2:	ee f9 fe 08 	ld.w	r9,r7[-504]
8000a1f6:	ee f8 fe 04 	ld.w	r8,r7[-508]
8000a1fa:	b1 39       	mul	r9,r8
8000a1fc:	ee f8 fe 00 	ld.w	r8,r7[-512]
8000a200:	ee fc fe 0c 	ld.w	r12,r7[-500]
8000a204:	b9 38       	mul	r8,r12
8000a206:	10 09       	add	r9,r8
8000a208:	ee f8 fe 0c 	ld.w	r8,r7[-500]
8000a20c:	ee fc fe 04 	ld.w	r12,r7[-508]
8000a210:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000a214:	16 09       	add	r9,r11
8000a216:	12 9b       	mov	r11,r9
8000a218:	e0 68 03 e7 	mov	r8,999
8000a21c:	30 09       	mov	r9,0
8000a21e:	10 0a       	add	r10,r8
8000a220:	f6 09 00 4b 	adc	r11,r11,r9
8000a224:	e0 68 03 e8 	mov	r8,1000
8000a228:	30 09       	mov	r9,0
8000a22a:	f0 1f 01 22 	mcall	8000a6b0 <main+0x14a8>
8000a22e:	14 98       	mov	r8,r10
8000a230:	16 99       	mov	r9,r11
#if 0 //DEBUG do this in seconds to debug logic 11may15				
				cpu_set_timeout((20 * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //TODO: this time period will be parameterized from the technician UART interface
#endif
				cpu_set_timeout((20 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //DEBUG 11may15 
8000a232:	10 99       	mov	r9,r8
8000a234:	12 98       	mov	r8,r9
8000a236:	a3 68       	lsl	r8,0x2
8000a238:	12 08       	add	r8,r9
8000a23a:	a3 68       	lsl	r8,0x2
8000a23c:	ef 48 ff b4 	st.w	r7[-76],r8
8000a240:	fe f8 05 20 	ld.w	r8,pc[1312]
8000a244:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a248:	e1 b8 00 42 	mfsr	r8,0x108
8000a24c:	10 99       	mov	r9,r8
8000a24e:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000a252:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a254:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000a258:	70 09       	ld.w	r9,r8[0x0]
8000a25a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000a25e:	10 09       	add	r9,r8
8000a260:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000a264:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000a266:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000a26a:	30 08       	mov	r8,0
8000a26c:	f3 68 00 08 	st.b	r9[8],r8

				break;	
8000a270:	c8 c8       	rjmp	8000a388 <main+0x1180>
8000a272:	fe f8 04 ee 	ld.w	r8,pc[1262]
8000a276:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a27a:	e1 b8 00 42 	mfsr	r8,0x108
8000a27e:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000a282:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000a286:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a28a:	30 28       	mov	r8,2
8000a28c:	f0 09 18 00 	cp.b	r9,r8
8000a290:	c0 31       	brne	8000a296 <main+0x108e>
    return false;
8000a292:	30 08       	mov	r8,0
8000a294:	c4 38       	rjmp	8000a31a <main+0x1112>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000a296:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000a29a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a29e:	30 18       	mov	r8,1
8000a2a0:	f0 09 18 00 	cp.b	r9,r8
8000a2a4:	c0 31       	brne	8000a2aa <main+0x10a2>
    return true;
8000a2a6:	30 18       	mov	r8,1
8000a2a8:	c3 98       	rjmp	8000a31a <main+0x1112>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a2aa:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000a2ae:	70 09       	ld.w	r9,r8[0x0]
8000a2b0:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000a2b4:	70 18       	ld.w	r8,r8[0x4]
8000a2b6:	10 39       	cp.w	r9,r8
8000a2b8:	e0 88 00 1a 	brls	8000a2ec <main+0x10e4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a2bc:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000a2c0:	70 09       	ld.w	r9,r8[0x0]
8000a2c2:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000a2c6:	12 38       	cp.w	r8,r9
8000a2c8:	c1 02       	brcc	8000a2e8 <main+0x10e0>
8000a2ca:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000a2ce:	70 19       	ld.w	r9,r8[0x4]
8000a2d0:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000a2d4:	12 38       	cp.w	r8,r9
8000a2d6:	e0 88 00 09 	brls	8000a2e8 <main+0x10e0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000a2da:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000a2de:	30 18       	mov	r8,1
8000a2e0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000a2e4:	30 18       	mov	r8,1
8000a2e6:	c1 a8       	rjmp	8000a31a <main+0x1112>
    }
    return false;
8000a2e8:	30 08       	mov	r8,0
8000a2ea:	c1 88       	rjmp	8000a31a <main+0x1112>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a2ec:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000a2f0:	70 09       	ld.w	r9,r8[0x0]
8000a2f2:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000a2f6:	12 38       	cp.w	r8,r9
8000a2f8:	c0 93       	brcs	8000a30a <main+0x1102>
8000a2fa:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000a2fe:	70 19       	ld.w	r9,r8[0x4]
8000a300:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000a304:	12 38       	cp.w	r8,r9
8000a306:	e0 88 00 09 	brls	8000a318 <main+0x1110>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000a30a:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000a30e:	30 18       	mov	r8,1
8000a310:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000a314:	30 18       	mov	r8,1
8000a316:	c0 28       	rjmp	8000a31a <main+0x1112>
    }
    return false;
8000a318:	30 08       	mov	r8,0
				
			case STATE_CLEAN:
				if (cpu_is_timeout(&cleanTimer)) {
8000a31a:	58 08       	cp.w	r8,0
8000a31c:	c3 50       	breq	8000a386 <main+0x117e>
8000a31e:	fe f8 04 42 	ld.w	r8,pc[1090]
8000a322:	ef 48 ff c0 	st.w	r7[-64],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000a326:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000a32a:	30 28       	mov	r8,2
8000a32c:	f3 68 00 08 	st.b	r9[8],r8
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
8000a330:	fe f9 03 c0 	ld.w	r9,pc[960]
8000a334:	30 38       	mov	r8,3
8000a336:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("Start sanitizing\r\n");
8000a338:	fe fc 03 f0 	ld.w	r12,pc[1008]
8000a33c:	f0 1f 00 e6 	mcall	8000a6d4 <main+0x14cc>

				}
				break;
8000a340:	c2 48       	rjmp	8000a388 <main+0x1180>
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
8000a342:	30 08       	mov	r8,0
8000a344:	ef 48 fe 88 	st.w	r7[-376],r8
8000a348:	c0 d8       	rjmp	8000a362 <main+0x115a>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
8000a34a:	ee f8 fe 88 	ld.w	r8,r7[-376]
8000a34e:	5c 58       	castu.b	r8
8000a350:	30 0b       	mov	r11,0
8000a352:	10 9c       	mov	r12,r8
8000a354:	f0 1f 00 fc 	mcall	8000a744 <main+0x153c>
				}
				break;
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
8000a358:	ee f8 fe 88 	ld.w	r8,r7[-376]
8000a35c:	2f f8       	sub	r8,-1
8000a35e:	ef 48 fe 88 	st.w	r7[-376],r8
8000a362:	ee f8 fe 88 	ld.w	r8,r7[-376]
8000a366:	58 38       	cp.w	r8,3
8000a368:	fe 9a ff f1 	brle	8000a34a <main+0x1142>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				electroclaveState = STATE_EC_IDLE;
8000a36c:	fe f9 03 84 	ld.w	r9,pc[900]
8000a370:	30 08       	mov	r8,0
8000a372:	b2 88       	st.b	r9[0x0],r8
8000a374:	c0 a8       	rjmp	8000a388 <main+0x1180>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
					electroclaveState = STATE_DOOR_LATCHED;
					firstTimeThrough = 1;
				}
				break;
8000a376:	d7 03       	nop
8000a378:	c0 88       	rjmp	8000a388 <main+0x1180>
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
					print_ecdbg("Action push button press detected\r\n");
					electroclaveState = STATE_ACTION_PB_PRESSED;
				}
				break;
8000a37a:	d7 03       	nop
8000a37c:	c0 68       	rjmp	8000a388 <main+0x1180>
				if (EC_ACTION_PB)
				{
					print_ecdbg("Action push button release detected\r\n");
					electroclaveState = STATE_ACTION_PB_RELEASED;	
				}
				break;
8000a37e:	d7 03       	nop
8000a380:	c0 48       	rjmp	8000a388 <main+0x1180>
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
					electroclaveState = STATE_START_CLEAN;
				}
				break;
8000a382:	d7 03       	nop
8000a384:	c0 28       	rjmp	8000a388 <main+0x1180>
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
					print_ecdbg("Start sanitizing\r\n");

				}
				break;
8000a386:	d7 03       	nop
		
		/*
		 * This check overrides everything going on in the state machine, if the user opens the door,
		 * shut down all processes for safety
		 */
		if (!EC_DOOR_LATCHED) {
8000a388:	33 ec       	mov	r12,62
8000a38a:	f0 1f 00 df 	mcall	8000a704 <main+0x14fc>
8000a38e:	18 98       	mov	r8,r12
8000a390:	58 08       	cp.w	r8,0
8000a392:	e0 80 00 d2 	breq	8000a536 <main+0x132e>
		
			if (firstTimeThrough)
8000a396:	fe f8 03 76 	ld.w	r8,pc[886]
8000a39a:	11 88       	ld.ub	r8,r8[0x0]
8000a39c:	58 08       	cp.w	r8,0
8000a39e:	e0 80 00 cc 	breq	8000a536 <main+0x132e>
			{
				door_latch_open_kill_all_shelves();
8000a3a2:	f0 1f 00 f1 	mcall	8000a764 <main+0x155c>

				display_text(IDX_CLEAR);
8000a3a6:	30 9c       	mov	r12,9
8000a3a8:	f0 1f 00 cc 	mcall	8000a6d8 <main+0x14d0>
8000a3ac:	e0 68 01 f4 	mov	r8,500
8000a3b0:	ef 48 ff c8 	st.w	r7[-56],r8
8000a3b4:	e0 68 12 00 	mov	r8,4608
8000a3b8:	ea 18 00 7a 	orh	r8,0x7a
8000a3bc:	ef 48 ff c4 	st.w	r7[-60],r8
8000a3c0:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000a3c4:	ef 48 ff d0 	st.w	r7[-48],r8
8000a3c8:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000a3cc:	ef 48 ff cc 	st.w	r7[-52],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000a3d0:	ee fa ff d0 	ld.w	r10,r7[-48]
8000a3d4:	ef 4a fe 1c 	st.w	r7[-484],r10
8000a3d8:	30 08       	mov	r8,0
8000a3da:	ef 48 fe 18 	st.w	r7[-488],r8
8000a3de:	ee fc ff cc 	ld.w	r12,r7[-52]
8000a3e2:	ef 4c fe 14 	st.w	r7[-492],r12
8000a3e6:	30 0a       	mov	r10,0
8000a3e8:	ef 4a fe 10 	st.w	r7[-496],r10
8000a3ec:	ee f9 fe 18 	ld.w	r9,r7[-488]
8000a3f0:	ee f8 fe 14 	ld.w	r8,r7[-492]
8000a3f4:	b1 39       	mul	r9,r8
8000a3f6:	ee f8 fe 10 	ld.w	r8,r7[-496]
8000a3fa:	ee fc fe 1c 	ld.w	r12,r7[-484]
8000a3fe:	b9 38       	mul	r8,r12
8000a400:	10 09       	add	r9,r8
8000a402:	ee f8 fe 1c 	ld.w	r8,r7[-484]
8000a406:	ee fc fe 14 	ld.w	r12,r7[-492]
8000a40a:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000a40e:	16 09       	add	r9,r11
8000a410:	12 9b       	mov	r11,r9
8000a412:	e0 68 03 e7 	mov	r8,999
8000a416:	30 09       	mov	r9,0
8000a418:	10 0a       	add	r10,r8
8000a41a:	f6 09 00 4b 	adc	r11,r11,r9
8000a41e:	e0 68 03 e8 	mov	r8,1000
8000a422:	30 09       	mov	r9,0
8000a424:	f0 1f 00 a3 	mcall	8000a6b0 <main+0x14a8>
8000a428:	14 98       	mov	r8,r10
8000a42a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000a42c:	ef 48 ff d8 	st.w	r7[-40],r8
8000a430:	ee c8 01 94 	sub	r8,r7,404
8000a434:	ef 48 ff d4 	st.w	r7[-44],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a438:	e1 b8 00 42 	mfsr	r8,0x108
8000a43c:	10 99       	mov	r9,r8
8000a43e:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a442:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a444:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a448:	70 09       	ld.w	r9,r8[0x0]
8000a44a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000a44e:	10 09       	add	r9,r8
8000a450:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a454:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000a456:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000a45a:	30 08       	mov	r8,0
8000a45c:	f3 68 00 08 	st.b	r9[8],r8
8000a460:	ee c8 01 94 	sub	r8,r7,404
8000a464:	ef 48 ff dc 	st.w	r7[-36],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a468:	e1 b8 00 42 	mfsr	r8,0x108
8000a46c:	ef 48 ff e0 	st.w	r7[-32],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000a470:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a474:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a478:	30 28       	mov	r8,2
8000a47a:	f0 09 18 00 	cp.b	r9,r8
8000a47e:	c0 31       	brne	8000a484 <main+0x127c>
    return false;
8000a480:	30 08       	mov	r8,0
8000a482:	c4 38       	rjmp	8000a508 <main+0x1300>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000a484:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a488:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a48c:	30 18       	mov	r8,1
8000a48e:	f0 09 18 00 	cp.b	r9,r8
8000a492:	c0 31       	brne	8000a498 <main+0x1290>
    return true;
8000a494:	30 18       	mov	r8,1
8000a496:	c3 98       	rjmp	8000a508 <main+0x1300>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a498:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a49c:	70 09       	ld.w	r9,r8[0x0]
8000a49e:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a4a2:	70 18       	ld.w	r8,r8[0x4]
8000a4a4:	10 39       	cp.w	r9,r8
8000a4a6:	e0 88 00 1a 	brls	8000a4da <main+0x12d2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a4aa:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a4ae:	70 09       	ld.w	r9,r8[0x0]
8000a4b0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a4b4:	12 38       	cp.w	r8,r9
8000a4b6:	c1 02       	brcc	8000a4d6 <main+0x12ce>
8000a4b8:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a4bc:	70 19       	ld.w	r9,r8[0x4]
8000a4be:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a4c2:	12 38       	cp.w	r8,r9
8000a4c4:	e0 88 00 09 	brls	8000a4d6 <main+0x12ce>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000a4c8:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000a4cc:	30 18       	mov	r8,1
8000a4ce:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000a4d2:	30 18       	mov	r8,1
8000a4d4:	c1 a8       	rjmp	8000a508 <main+0x1300>
    }
    return false;
8000a4d6:	30 08       	mov	r8,0
8000a4d8:	c1 88       	rjmp	8000a508 <main+0x1300>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a4da:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a4de:	70 09       	ld.w	r9,r8[0x0]
8000a4e0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a4e4:	12 38       	cp.w	r8,r9
8000a4e6:	c0 93       	brcs	8000a4f8 <main+0x12f0>
8000a4e8:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a4ec:	70 19       	ld.w	r9,r8[0x4]
8000a4ee:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a4f2:	12 38       	cp.w	r8,r9
8000a4f4:	e0 88 00 09 	brls	8000a506 <main+0x12fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000a4f8:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000a4fc:	30 18       	mov	r8,1
8000a4fe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000a502:	30 18       	mov	r8,1
8000a504:	c0 28       	rjmp	8000a508 <main+0x1300>
    }
    return false;
8000a506:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000a508:	58 08       	cp.w	r8,0
8000a50a:	ca b0       	breq	8000a460 <main+0x1258>
				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
				switch (electroclaveState)
8000a50c:	4f 98       	lddpc	r8,8000a6f0 <main+0x14e8>
8000a50e:	11 88       	ld.ub	r8,r8[0x0]
8000a510:	58 58       	cp.w	r8,5
8000a512:	c0 51       	brne	8000a51c <main+0x1314>
				{
					case STATE_SANITIZE:
						display_text(IDX_DIRTY);
8000a514:	30 3c       	mov	r12,3
8000a516:	f0 1f 00 71 	mcall	8000a6d8 <main+0x14d0>
						break;
8000a51a:	c0 48       	rjmp	8000a522 <main+0x131a>
					
					default:
						display_text(IDX_CLEAN);
8000a51c:	30 1c       	mov	r12,1
8000a51e:	f0 1f 00 6f 	mcall	8000a6d8 <main+0x14d0>
						break;
				}

				electroclaveState = STATE_SHUTDOWN_PROCESSES;
8000a522:	4f 49       	lddpc	r9,8000a6f0 <main+0x14e8>
8000a524:	30 88       	mov	r8,8
8000a526:	b2 88       	st.b	r9[0x0],r8
				print_ecdbg("Door latch opened, shutting down all processes\r\n");
8000a528:	fe fc 02 40 	ld.w	r12,pc[576]
8000a52c:	f0 1f 00 6a 	mcall	8000a6d4 <main+0x14cc>
				firstTimeThrough = 0;
8000a530:	4f 79       	lddpc	r9,8000a70c <main+0x1504>
8000a532:	30 08       	mov	r8,0
8000a534:	b2 88       	st.b	r9[0x0],r8
8000a536:	4f 28       	lddpc	r8,8000a6fc <main+0x14f4>
8000a538:	ef 48 ff e4 	st.w	r7[-28],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a53c:	e1 b8 00 42 	mfsr	r8,0x108
8000a540:	ef 48 ff e8 	st.w	r7[-24],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000a544:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a548:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a54c:	30 28       	mov	r8,2
8000a54e:	f0 09 18 00 	cp.b	r9,r8
8000a552:	c0 31       	brne	8000a558 <main+0x1350>
    return false;
8000a554:	30 08       	mov	r8,0
8000a556:	c4 38       	rjmp	8000a5dc <main+0x13d4>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000a558:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a55c:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a560:	30 18       	mov	r8,1
8000a562:	f0 09 18 00 	cp.b	r9,r8
8000a566:	c0 31       	brne	8000a56c <main+0x1364>
    return true;
8000a568:	30 18       	mov	r8,1
8000a56a:	c3 98       	rjmp	8000a5dc <main+0x13d4>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a56c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a570:	70 09       	ld.w	r9,r8[0x0]
8000a572:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a576:	70 18       	ld.w	r8,r8[0x4]
8000a578:	10 39       	cp.w	r9,r8
8000a57a:	e0 88 00 1a 	brls	8000a5ae <main+0x13a6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a57e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a582:	70 09       	ld.w	r9,r8[0x0]
8000a584:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000a588:	12 38       	cp.w	r8,r9
8000a58a:	c1 02       	brcc	8000a5aa <main+0x13a2>
8000a58c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a590:	70 19       	ld.w	r9,r8[0x4]
8000a592:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000a596:	12 38       	cp.w	r8,r9
8000a598:	e0 88 00 09 	brls	8000a5aa <main+0x13a2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000a59c:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a5a0:	30 18       	mov	r8,1
8000a5a2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000a5a6:	30 18       	mov	r8,1
8000a5a8:	c1 a8       	rjmp	8000a5dc <main+0x13d4>
    }
    return false;
8000a5aa:	30 08       	mov	r8,0
8000a5ac:	c1 88       	rjmp	8000a5dc <main+0x13d4>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a5ae:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a5b2:	70 09       	ld.w	r9,r8[0x0]
8000a5b4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000a5b8:	12 38       	cp.w	r8,r9
8000a5ba:	c0 93       	brcs	8000a5cc <main+0x13c4>
8000a5bc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a5c0:	70 19       	ld.w	r9,r8[0x4]
8000a5c2:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000a5c6:	12 38       	cp.w	r8,r9
8000a5c8:	e0 88 00 09 	brls	8000a5da <main+0x13d2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000a5cc:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a5d0:	30 18       	mov	r8,1
8000a5d2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000a5d6:	30 18       	mov	r8,1
8000a5d8:	c0 28       	rjmp	8000a5dc <main+0x13d4>
    }
    return false;
8000a5da:	30 08       	mov	r8,0
				
			}
		} //if (!EC_DOOR_LATCHED)
		
		if (cpu_is_timeout(&debugTimer))
8000a5dc:	58 08       	cp.w	r8,0
8000a5de:	fe 90 f8 18 	breq	8000960e <main+0x406>
8000a5e2:	4c 78       	lddpc	r8,8000a6fc <main+0x14f4>
8000a5e4:	ef 48 ff ec 	st.w	r7[-20],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000a5e8:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a5ec:	30 28       	mov	r8,2
8000a5ee:	f3 68 00 08 	st.b	r9[8],r8
8000a5f2:	e0 68 03 e8 	mov	r8,1000
8000a5f6:	ef 48 ff f4 	st.w	r7[-12],r8
8000a5fa:	e0 68 12 00 	mov	r8,4608
8000a5fe:	ea 18 00 7a 	orh	r8,0x7a
8000a602:	ef 48 ff f0 	st.w	r7[-16],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000a606:	ee fa ff f4 	ld.w	r10,r7[-12]
8000a60a:	ef 4a fe 2c 	st.w	r7[-468],r10
8000a60e:	30 08       	mov	r8,0
8000a610:	ef 48 fe 28 	st.w	r7[-472],r8
8000a614:	ee fc ff f0 	ld.w	r12,r7[-16]
8000a618:	ef 4c fe 24 	st.w	r7[-476],r12
8000a61c:	30 0a       	mov	r10,0
8000a61e:	ef 4a fe 20 	st.w	r7[-480],r10
8000a622:	ee f9 fe 28 	ld.w	r9,r7[-472]
8000a626:	ee f8 fe 24 	ld.w	r8,r7[-476]
8000a62a:	b1 39       	mul	r9,r8
8000a62c:	ee f8 fe 20 	ld.w	r8,r7[-480]
8000a630:	ee fc fe 2c 	ld.w	r12,r7[-468]
8000a634:	b9 38       	mul	r8,r12
8000a636:	10 09       	add	r9,r8
8000a638:	ee f8 fe 2c 	ld.w	r8,r7[-468]
8000a63c:	ee fc fe 24 	ld.w	r12,r7[-476]
8000a640:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000a644:	16 09       	add	r9,r11
8000a646:	12 9b       	mov	r11,r9
8000a648:	e0 68 03 e7 	mov	r8,999
8000a64c:	30 09       	mov	r9,0
8000a64e:	10 0a       	add	r10,r8
8000a650:	f6 09 00 4b 	adc	r11,r11,r9
8000a654:	e0 68 03 e8 	mov	r8,1000
8000a658:	30 09       	mov	r9,0
8000a65a:	f0 1f 00 16 	mcall	8000a6b0 <main+0x14a8>
8000a65e:	14 98       	mov	r8,r10
8000a660:	16 99       	mov	r9,r11
		{
			cpu_stop_timeout(&debugTimer);
			cpu_set_timeout((EC_ONE_SECOND/2), &debugTimer);
8000a662:	a1 98       	lsr	r8,0x1
8000a664:	ef 48 ff fc 	st.w	r7[-4],r8
8000a668:	4a 58       	lddpc	r8,8000a6fc <main+0x14f4>
8000a66a:	ef 48 ff f8 	st.w	r7[-8],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a66e:	e1 b8 00 42 	mfsr	r8,0x108
8000a672:	10 99       	mov	r9,r8
8000a674:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a678:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a67a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a67e:	70 09       	ld.w	r9,r8[0x0]
8000a680:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a684:	10 09       	add	r9,r8
8000a686:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a68a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000a68c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a690:	30 08       	mov	r8,0
8000a692:	f3 68 00 08 	st.b	r9[8],r8
			gpio_toggle_pin(ECLAVE_DEBUG_LED);
8000a696:	37 cc       	mov	r12,124
8000a698:	f0 1f 00 05 	mcall	8000a6ac <main+0x14a4>
		}
	} //while(true)
8000a69c:	fe 9f f7 ba 	bral	80009610 <main+0x408>
8000a6a0:	80 00       	ld.sh	r0,r0[0x0]
8000a6a2:	75 48       	ld.w	r8,r10[0x50]
8000a6a4:	80 00       	ld.sh	r0,r0[0x0]
8000a6a6:	6a 18       	ld.w	r8,r5[0x4]
8000a6a8:	80 00       	ld.sh	r0,r0[0x0]
8000a6aa:	8b 60       	st.w	r5[0x18],r0
8000a6ac:	80 00       	ld.sh	r0,r0[0x0]
8000a6ae:	4b 76       	lddpc	r6,8000a788 <__avr32_f64_mul+0x1c>
8000a6b0:	80 00       	ld.sh	r0,r0[0x0]
8000a6b2:	ae c2       	st.b	r7[0x4],r2
8000a6b4:	80 00       	ld.sh	r0,r0[0x0]
8000a6b6:	66 dc       	ld.w	r12,r3[0x34]
8000a6b8:	80 00       	ld.sh	r0,r0[0x0]
8000a6ba:	68 14       	ld.w	r4,r4[0x4]
8000a6bc:	80 00       	ld.sh	r0,r0[0x0]
8000a6be:	5d 9c       	*unknown*
8000a6c0:	80 00       	ld.sh	r0,r0[0x0]
8000a6c2:	5c 9c       	brev	r12
8000a6c4:	80 00       	ld.sh	r0,r0[0x0]
8000a6c6:	5b e4       	cp.w	r4,-2
8000a6c8:	80 00       	ld.sh	r0,r0[0x0]
8000a6ca:	32 38       	mov	r8,35
8000a6cc:	80 00       	ld.sh	r0,r0[0x0]
8000a6ce:	32 5c       	mov	r12,37
8000a6d0:	80 00       	ld.sh	r0,r0[0x0]
8000a6d2:	65 8c       	ld.w	r12,r2[0x60]
8000a6d4:	80 00       	ld.sh	r0,r0[0x0]
8000a6d6:	33 38       	mov	r8,51
8000a6d8:	80 00       	ld.sh	r0,r0[0x0]
8000a6da:	69 ac       	ld.w	r12,r4[0x68]
8000a6dc:	80 00       	ld.sh	r0,r0[0x0]
8000a6de:	75 a8       	ld.w	r8,r10[0x68]
8000a6e0:	80 00       	ld.sh	r0,r0[0x0]
8000a6e2:	4c 3c       	lddpc	r12,8000a7ec <__avr32_f64_mul+0x80>
8000a6e4:	80 00       	ld.sh	r0,r0[0x0]
8000a6e6:	75 f4       	ld.w	r4,r10[0x7c]
8000a6e8:	80 00       	ld.sh	r0,r0[0x0]
8000a6ea:	4b 02       	lddpc	r2,8000a7a8 <__avr32_f64_mul+0x3c>
8000a6ec:	80 00       	ld.sh	r0,r0[0x0]
8000a6ee:	60 9c       	ld.w	r12,r0[0x24]
8000a6f0:	00 00       	add	r0,r0
8000a6f2:	15 bc       	ld.ub	r12,r10[0x3]
8000a6f4:	80 00       	ld.sh	r0,r0[0x0]
8000a6f6:	8e e0       	ld.uh	r0,r7[0xc]
8000a6f8:	80 00       	ld.sh	r0,r0[0x0]
8000a6fa:	4b 3c       	lddpc	r12,8000a7c4 <__avr32_f64_mul+0x58>
8000a6fc:	00 00       	add	r0,r0
8000a6fe:	08 ac       	st.w	r4++,r12
8000a700:	80 01       	ld.sh	r1,r0[0x0]
8000a702:	0b d8       	ld.ub	r8,r5[0x5]
8000a704:	80 00       	ld.sh	r0,r0[0x0]
8000a706:	4a c6       	lddpc	r6,8000a7b4 <__avr32_f64_mul+0x48>
8000a708:	80 00       	ld.sh	r0,r0[0x0]
8000a70a:	65 d8       	ld.w	r8,r2[0x74]
8000a70c:	00 00       	add	r0,r0
8000a70e:	00 b0       	st.h	r0++,r0
8000a710:	80 00       	ld.sh	r0,r0[0x0]
8000a712:	65 f0       	ld.w	r0,r2[0x7c]
8000a714:	80 00       	ld.sh	r0,r0[0x0]
8000a716:	66 14       	ld.w	r4,r3[0x4]
8000a718:	80 00       	ld.sh	r0,r0[0x0]
8000a71a:	6f 00       	ld.w	r0,r7[0x40]
8000a71c:	80 00       	ld.sh	r0,r0[0x0]
8000a71e:	71 d4       	ld.w	r4,r8[0x74]
8000a720:	80 00       	ld.sh	r0,r0[0x0]
8000a722:	72 48       	ld.w	r8,r9[0x10]
8000a724:	80 00       	ld.sh	r0,r0[0x0]
8000a726:	75 34       	ld.w	r4,r10[0x4c]
8000a728:	80 00       	ld.sh	r0,r0[0x0]
8000a72a:	66 3c       	ld.w	r12,r3[0xc]
8000a72c:	80 00       	ld.sh	r0,r0[0x0]
8000a72e:	66 50       	ld.w	r0,r3[0x14]
8000a730:	00 00       	add	r0,r0
8000a732:	07 b4       	ld.ub	r4,r3[0x3]
8000a734:	00 00       	add	r0,r0
8000a736:	08 90       	mov	r0,r4
8000a738:	00 00       	add	r0,r0
8000a73a:	08 70       	tst	r0,r4
8000a73c:	80 00       	ld.sh	r0,r0[0x0]
8000a73e:	76 74       	ld.w	r4,r11[0x1c]
8000a740:	00 00       	add	r0,r0
8000a742:	08 98       	mov	r8,r4
8000a744:	80 00       	ld.sh	r0,r0[0x0]
8000a746:	62 f8       	ld.w	r8,r1[0x3c]
8000a748:	00 00       	add	r0,r0
8000a74a:	08 18       	sub	r8,r4
8000a74c:	00 00       	add	r0,r0
8000a74e:	15 7c       	ld.ub	r12,--r10
8000a750:	00 00       	add	r0,r0
8000a752:	08 84       	andn	r4,r4
8000a754:	00 00       	add	r0,r0
8000a756:	15 c0       	ld.ub	r0,r10[0x4]
8000a758:	80 00       	ld.sh	r0,r0[0x0]
8000a75a:	84 b0       	ld.uh	r0,r2[0x6]
8000a75c:	80 00       	ld.sh	r0,r0[0x0]
8000a75e:	66 98       	ld.w	r8,r3[0x24]
8000a760:	00 00       	add	r0,r0
8000a762:	15 88       	ld.ub	r8,r10[0x0]
8000a764:	80 00       	ld.sh	r0,r0[0x0]
8000a766:	77 44       	ld.w	r4,r11[0x50]
8000a768:	80 00       	ld.sh	r0,r0[0x0]
8000a76a:	66 a8       	ld.w	r8,r3[0x28]

8000a76c <__avr32_f64_mul>:
8000a76c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000a770:	e0 80 00 dc 	breq	8000a928 <__avr32_f64_mul_op1_zero>
8000a774:	d4 21       	pushm	r4-r7,lr
8000a776:	f7 e9 20 0e 	eor	lr,r11,r9
8000a77a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000a77e:	30 15       	mov	r5,1
8000a780:	c4 30       	breq	8000a806 <__avr32_f64_mul_op1_subnormal>
8000a782:	ab 6b       	lsl	r11,0xa
8000a784:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000a788:	ab 6a       	lsl	r10,0xa
8000a78a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000a78e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000a792:	c5 c0       	breq	8000a84a <__avr32_f64_mul_op2_subnormal>
8000a794:	a1 78       	lsl	r8,0x1
8000a796:	5c f9       	rol	r9
8000a798:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000a79c:	e0 47 07 ff 	cp.w	r7,2047
8000a7a0:	c7 70       	breq	8000a88e <__avr32_f64_mul_op_nan_or_inf>
8000a7a2:	e0 46 07 ff 	cp.w	r6,2047
8000a7a6:	c7 40       	breq	8000a88e <__avr32_f64_mul_op_nan_or_inf>
8000a7a8:	ee 06 00 0c 	add	r12,r7,r6
8000a7ac:	e0 2c 03 fe 	sub	r12,1022
8000a7b0:	f6 08 06 44 	mulu.d	r4,r11,r8
8000a7b4:	f4 09 07 44 	macu.d	r4,r10,r9
8000a7b8:	f4 08 06 46 	mulu.d	r6,r10,r8
8000a7bc:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000a7c0:	08 07       	add	r7,r4
8000a7c2:	f4 05 00 4a 	adc	r10,r10,r5
8000a7c6:	5c 0b       	acr	r11
8000a7c8:	ed bb 00 14 	bld	r11,0x14
8000a7cc:	c0 50       	breq	8000a7d6 <__avr32_f64_mul+0x6a>
8000a7ce:	a1 77       	lsl	r7,0x1
8000a7d0:	5c fa       	rol	r10
8000a7d2:	5c fb       	rol	r11
8000a7d4:	20 1c       	sub	r12,1
8000a7d6:	58 0c       	cp.w	r12,0
8000a7d8:	e0 8a 00 6f 	brle	8000a8b6 <__avr32_f64_mul_res_subnormal>
8000a7dc:	e0 4c 07 ff 	cp.w	r12,2047
8000a7e0:	e0 84 00 9c 	brge	8000a918 <__avr32_f64_mul_res_inf>
8000a7e4:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000a7e8:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000a7ec:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000a7f0:	ee 17 80 00 	eorh	r7,0x8000
8000a7f4:	f1 b7 04 20 	satu	r7,0x1
8000a7f8:	0e 0a       	add	r10,r7
8000a7fa:	5c 0b       	acr	r11
8000a7fc:	ed be 00 1f 	bld	lr,0x1f
8000a800:	ef bb 00 1f 	bst	r11,0x1f
8000a804:	d8 22       	popm	r4-r7,pc

8000a806 <__avr32_f64_mul_op1_subnormal>:
8000a806:	e4 1b 00 0f 	andh	r11,0xf
8000a80a:	f4 0c 12 00 	clz	r12,r10
8000a80e:	f6 06 12 00 	clz	r6,r11
8000a812:	f7 bc 03 e1 	sublo	r12,-31
8000a816:	f8 06 17 30 	movlo	r6,r12
8000a81a:	f7 b6 02 01 	subhs	r6,1
8000a81e:	e0 46 00 20 	cp.w	r6,32
8000a822:	c0 d4       	brge	8000a83c <__avr32_f64_mul_op1_subnormal+0x36>
8000a824:	ec 0c 11 20 	rsub	r12,r6,32
8000a828:	f6 06 09 4b 	lsl	r11,r11,r6
8000a82c:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000a830:	18 4b       	or	r11,r12
8000a832:	f4 06 09 4a 	lsl	r10,r10,r6
8000a836:	20 b6       	sub	r6,11
8000a838:	0c 17       	sub	r7,r6
8000a83a:	ca ab       	rjmp	8000a78e <__avr32_f64_mul+0x22>
8000a83c:	f4 06 09 4b 	lsl	r11,r10,r6
8000a840:	c6 40       	breq	8000a908 <__avr32_f64_mul_res_zero>
8000a842:	30 0a       	mov	r10,0
8000a844:	20 b6       	sub	r6,11
8000a846:	0c 17       	sub	r7,r6
8000a848:	ca 3b       	rjmp	8000a78e <__avr32_f64_mul+0x22>

8000a84a <__avr32_f64_mul_op2_subnormal>:
8000a84a:	e4 19 00 0f 	andh	r9,0xf
8000a84e:	f0 0c 12 00 	clz	r12,r8
8000a852:	f2 05 12 00 	clz	r5,r9
8000a856:	f7 bc 03 ea 	sublo	r12,-22
8000a85a:	f8 05 17 30 	movlo	r5,r12
8000a85e:	f7 b5 02 0a 	subhs	r5,10
8000a862:	e0 45 00 20 	cp.w	r5,32
8000a866:	c0 d4       	brge	8000a880 <__avr32_f64_mul_op2_subnormal+0x36>
8000a868:	ea 0c 11 20 	rsub	r12,r5,32
8000a86c:	f2 05 09 49 	lsl	r9,r9,r5
8000a870:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000a874:	18 49       	or	r9,r12
8000a876:	f0 05 09 48 	lsl	r8,r8,r5
8000a87a:	20 25       	sub	r5,2
8000a87c:	0a 16       	sub	r6,r5
8000a87e:	c8 fb       	rjmp	8000a79c <__avr32_f64_mul+0x30>
8000a880:	f0 05 09 49 	lsl	r9,r8,r5
8000a884:	c4 20       	breq	8000a908 <__avr32_f64_mul_res_zero>
8000a886:	30 08       	mov	r8,0
8000a888:	20 25       	sub	r5,2
8000a88a:	0a 16       	sub	r6,r5
8000a88c:	c8 8b       	rjmp	8000a79c <__avr32_f64_mul+0x30>

8000a88e <__avr32_f64_mul_op_nan_or_inf>:
8000a88e:	e4 19 00 0f 	andh	r9,0xf
8000a892:	e4 1b 00 0f 	andh	r11,0xf
8000a896:	14 4b       	or	r11,r10
8000a898:	10 49       	or	r9,r8
8000a89a:	e0 47 07 ff 	cp.w	r7,2047
8000a89e:	c0 91       	brne	8000a8b0 <__avr32_f64_mul_op1_not_naninf>
8000a8a0:	58 0b       	cp.w	r11,0
8000a8a2:	c3 81       	brne	8000a912 <__avr32_f64_mul_res_nan>
8000a8a4:	e0 46 07 ff 	cp.w	r6,2047
8000a8a8:	c3 81       	brne	8000a918 <__avr32_f64_mul_res_inf>
8000a8aa:	58 09       	cp.w	r9,0
8000a8ac:	c3 60       	breq	8000a918 <__avr32_f64_mul_res_inf>
8000a8ae:	c3 28       	rjmp	8000a912 <__avr32_f64_mul_res_nan>

8000a8b0 <__avr32_f64_mul_op1_not_naninf>:
8000a8b0:	58 09       	cp.w	r9,0
8000a8b2:	c3 30       	breq	8000a918 <__avr32_f64_mul_res_inf>
8000a8b4:	c2 f8       	rjmp	8000a912 <__avr32_f64_mul_res_nan>

8000a8b6 <__avr32_f64_mul_res_subnormal>:
8000a8b6:	5c 3c       	neg	r12
8000a8b8:	2f fc       	sub	r12,-1
8000a8ba:	f1 bc 04 c0 	satu	r12,0x6
8000a8be:	e0 4c 00 20 	cp.w	r12,32
8000a8c2:	c1 14       	brge	8000a8e4 <__avr32_f64_mul_res_subnormal+0x2e>
8000a8c4:	f8 08 11 20 	rsub	r8,r12,32
8000a8c8:	0e 46       	or	r6,r7
8000a8ca:	ee 0c 0a 47 	lsr	r7,r7,r12
8000a8ce:	f4 08 09 49 	lsl	r9,r10,r8
8000a8d2:	12 47       	or	r7,r9
8000a8d4:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a8d8:	f6 08 09 49 	lsl	r9,r11,r8
8000a8dc:	12 4a       	or	r10,r9
8000a8de:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000a8e2:	c8 3b       	rjmp	8000a7e8 <__avr32_f64_mul+0x7c>
8000a8e4:	f8 08 11 20 	rsub	r8,r12,32
8000a8e8:	f9 b9 00 00 	moveq	r9,0
8000a8ec:	c0 30       	breq	8000a8f2 <__avr32_f64_mul_res_subnormal+0x3c>
8000a8ee:	f6 08 09 49 	lsl	r9,r11,r8
8000a8f2:	0e 46       	or	r6,r7
8000a8f4:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000a8f8:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a8fc:	f3 ea 10 07 	or	r7,r9,r10
8000a900:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000a904:	30 0b       	mov	r11,0
8000a906:	c7 1b       	rjmp	8000a7e8 <__avr32_f64_mul+0x7c>

8000a908 <__avr32_f64_mul_res_zero>:
8000a908:	1c 9b       	mov	r11,lr
8000a90a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a90e:	30 0a       	mov	r10,0
8000a910:	d8 22       	popm	r4-r7,pc

8000a912 <__avr32_f64_mul_res_nan>:
8000a912:	3f fb       	mov	r11,-1
8000a914:	3f fa       	mov	r10,-1
8000a916:	d8 22       	popm	r4-r7,pc

8000a918 <__avr32_f64_mul_res_inf>:
8000a918:	f0 6b 00 00 	mov	r11,-1048576
8000a91c:	ed be 00 1f 	bld	lr,0x1f
8000a920:	ef bb 00 1f 	bst	r11,0x1f
8000a924:	30 0a       	mov	r10,0
8000a926:	d8 22       	popm	r4-r7,pc

8000a928 <__avr32_f64_mul_op1_zero>:
8000a928:	f7 e9 20 0b 	eor	r11,r11,r9
8000a92c:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a930:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000a934:	e0 4c 07 ff 	cp.w	r12,2047
8000a938:	5e 1c       	retne	r12
8000a93a:	3f fa       	mov	r10,-1
8000a93c:	3f fb       	mov	r11,-1
8000a93e:	5e fc       	retal	r12

8000a940 <__avr32_f64_sub_from_add>:
8000a940:	ee 19 80 00 	eorh	r9,0x8000

8000a944 <__avr32_f64_sub>:
8000a944:	f7 e9 20 0c 	eor	r12,r11,r9
8000a948:	e0 86 00 ca 	brmi	8000aadc <__avr32_f64_add_from_sub>
8000a94c:	eb cd 40 e0 	pushm	r5-r7,lr
8000a950:	16 9c       	mov	r12,r11
8000a952:	e6 1c 80 00 	andh	r12,0x8000,COH
8000a956:	bf db       	cbr	r11,0x1f
8000a958:	bf d9       	cbr	r9,0x1f
8000a95a:	10 3a       	cp.w	r10,r8
8000a95c:	f2 0b 13 00 	cpc	r11,r9
8000a960:	c0 92       	brcc	8000a972 <__avr32_f64_sub+0x2e>
8000a962:	16 97       	mov	r7,r11
8000a964:	12 9b       	mov	r11,r9
8000a966:	0e 99       	mov	r9,r7
8000a968:	14 97       	mov	r7,r10
8000a96a:	10 9a       	mov	r10,r8
8000a96c:	0e 98       	mov	r8,r7
8000a96e:	ee 1c 80 00 	eorh	r12,0x8000
8000a972:	f6 07 16 14 	lsr	r7,r11,0x14
8000a976:	ab 7b       	lsl	r11,0xb
8000a978:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000a97c:	ab 7a       	lsl	r10,0xb
8000a97e:	bf bb       	sbr	r11,0x1f
8000a980:	f2 06 16 14 	lsr	r6,r9,0x14
8000a984:	c4 40       	breq	8000aa0c <__avr32_f64_sub_opL_subnormal>
8000a986:	ab 79       	lsl	r9,0xb
8000a988:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000a98c:	ab 78       	lsl	r8,0xb
8000a98e:	bf b9       	sbr	r9,0x1f

8000a990 <__avr32_f64_sub_opL_subnormal_done>:
8000a990:	e0 47 07 ff 	cp.w	r7,2047
8000a994:	c4 f0       	breq	8000aa32 <__avr32_f64_sub_opH_nan_or_inf>
8000a996:	0e 26       	rsub	r6,r7
8000a998:	c1 20       	breq	8000a9bc <__avr32_f64_sub_shift_done>
8000a99a:	ec 05 11 20 	rsub	r5,r6,32
8000a99e:	e0 46 00 20 	cp.w	r6,32
8000a9a2:	c7 c2       	brcc	8000aa9a <__avr32_f64_sub_longshift>
8000a9a4:	f0 05 09 4e 	lsl	lr,r8,r5
8000a9a8:	f2 05 09 45 	lsl	r5,r9,r5
8000a9ac:	f0 06 0a 48 	lsr	r8,r8,r6
8000a9b0:	f2 06 0a 49 	lsr	r9,r9,r6
8000a9b4:	0a 48       	or	r8,r5
8000a9b6:	58 0e       	cp.w	lr,0
8000a9b8:	5f 1e       	srne	lr
8000a9ba:	1c 48       	or	r8,lr

8000a9bc <__avr32_f64_sub_shift_done>:
8000a9bc:	10 1a       	sub	r10,r8
8000a9be:	f6 09 01 4b 	sbc	r11,r11,r9
8000a9c2:	f6 06 12 00 	clz	r6,r11
8000a9c6:	c0 e0       	breq	8000a9e2 <__avr32_f64_sub_longnormalize_done>
8000a9c8:	c7 83       	brcs	8000aab8 <__avr32_f64_sub_longnormalize>
8000a9ca:	ec 0e 11 20 	rsub	lr,r6,32
8000a9ce:	f6 06 09 4b 	lsl	r11,r11,r6
8000a9d2:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a9d6:	1c 4b       	or	r11,lr
8000a9d8:	f4 06 09 4a 	lsl	r10,r10,r6
8000a9dc:	0c 17       	sub	r7,r6
8000a9de:	e0 8a 00 39 	brle	8000aa50 <__avr32_f64_sub_subnormal_result>

8000a9e2 <__avr32_f64_sub_longnormalize_done>:
8000a9e2:	f4 09 15 15 	lsl	r9,r10,0x15
8000a9e6:	ab 9a       	lsr	r10,0xb
8000a9e8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a9ec:	ab 9b       	lsr	r11,0xb
8000a9ee:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a9f2:	18 4b       	or	r11,r12

8000a9f4 <__avr32_f64_sub_round>:
8000a9f4:	fc 17 80 00 	movh	r7,0x8000
8000a9f8:	ed ba 00 00 	bld	r10,0x0
8000a9fc:	f7 b7 01 ff 	subne	r7,-1
8000aa00:	0e 39       	cp.w	r9,r7
8000aa02:	5f 29       	srhs	r9
8000aa04:	12 0a       	add	r10,r9
8000aa06:	5c 0b       	acr	r11
8000aa08:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000aa0c <__avr32_f64_sub_opL_subnormal>:
8000aa0c:	ab 79       	lsl	r9,0xb
8000aa0e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000aa12:	ab 78       	lsl	r8,0xb
8000aa14:	f3 e8 10 0e 	or	lr,r9,r8
8000aa18:	f9 b6 01 01 	movne	r6,1
8000aa1c:	ee 0e 11 00 	rsub	lr,r7,0
8000aa20:	f9 b7 00 01 	moveq	r7,1
8000aa24:	ef bb 00 1f 	bst	r11,0x1f
8000aa28:	f7 ea 10 0e 	or	lr,r11,r10
8000aa2c:	f9 b7 00 00 	moveq	r7,0
8000aa30:	cb 0b       	rjmp	8000a990 <__avr32_f64_sub_opL_subnormal_done>

8000aa32 <__avr32_f64_sub_opH_nan_or_inf>:
8000aa32:	bf db       	cbr	r11,0x1f
8000aa34:	f7 ea 10 0e 	or	lr,r11,r10
8000aa38:	c0 81       	brne	8000aa48 <__avr32_f64_sub_return_nan>
8000aa3a:	e0 46 07 ff 	cp.w	r6,2047
8000aa3e:	c0 50       	breq	8000aa48 <__avr32_f64_sub_return_nan>
8000aa40:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000aa44:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000aa48 <__avr32_f64_sub_return_nan>:
8000aa48:	3f fa       	mov	r10,-1
8000aa4a:	3f fb       	mov	r11,-1
8000aa4c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000aa50 <__avr32_f64_sub_subnormal_result>:
8000aa50:	5c 37       	neg	r7
8000aa52:	2f f7       	sub	r7,-1
8000aa54:	f1 b7 04 c0 	satu	r7,0x6
8000aa58:	e0 47 00 20 	cp.w	r7,32
8000aa5c:	c1 14       	brge	8000aa7e <__avr32_f64_sub_subnormal_result+0x2e>
8000aa5e:	ee 08 11 20 	rsub	r8,r7,32
8000aa62:	f4 08 09 49 	lsl	r9,r10,r8
8000aa66:	5f 16       	srne	r6
8000aa68:	f4 07 0a 4a 	lsr	r10,r10,r7
8000aa6c:	0c 4a       	or	r10,r6
8000aa6e:	f6 08 09 49 	lsl	r9,r11,r8
8000aa72:	f5 e9 10 0a 	or	r10,r10,r9
8000aa76:	f4 07 0a 4b 	lsr	r11,r10,r7
8000aa7a:	30 07       	mov	r7,0
8000aa7c:	cb 3b       	rjmp	8000a9e2 <__avr32_f64_sub_longnormalize_done>
8000aa7e:	ee 08 11 40 	rsub	r8,r7,64
8000aa82:	f6 08 09 49 	lsl	r9,r11,r8
8000aa86:	14 49       	or	r9,r10
8000aa88:	5f 16       	srne	r6
8000aa8a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000aa8e:	0c 4a       	or	r10,r6
8000aa90:	30 0b       	mov	r11,0
8000aa92:	30 07       	mov	r7,0
8000aa94:	ca 7b       	rjmp	8000a9e2 <__avr32_f64_sub_longnormalize_done>
8000aa96:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000aa9a <__avr32_f64_sub_longshift>:
8000aa9a:	f1 b6 04 c0 	satu	r6,0x6
8000aa9e:	f0 0e 17 00 	moveq	lr,r8
8000aaa2:	c0 40       	breq	8000aaaa <__avr32_f64_sub_longshift+0x10>
8000aaa4:	f2 05 09 4e 	lsl	lr,r9,r5
8000aaa8:	10 4e       	or	lr,r8
8000aaaa:	f2 06 0a 48 	lsr	r8,r9,r6
8000aaae:	30 09       	mov	r9,0
8000aab0:	58 0e       	cp.w	lr,0
8000aab2:	5f 1e       	srne	lr
8000aab4:	1c 48       	or	r8,lr
8000aab6:	c8 3b       	rjmp	8000a9bc <__avr32_f64_sub_shift_done>

8000aab8 <__avr32_f64_sub_longnormalize>:
8000aab8:	f4 06 12 00 	clz	r6,r10
8000aabc:	f9 b7 03 00 	movlo	r7,0
8000aac0:	f9 b6 03 00 	movlo	r6,0
8000aac4:	f9 bc 03 00 	movlo	r12,0
8000aac8:	f7 b6 02 e0 	subhs	r6,-32
8000aacc:	f4 06 09 4b 	lsl	r11,r10,r6
8000aad0:	30 0a       	mov	r10,0
8000aad2:	0c 17       	sub	r7,r6
8000aad4:	fe 9a ff be 	brle	8000aa50 <__avr32_f64_sub_subnormal_result>
8000aad8:	c8 5b       	rjmp	8000a9e2 <__avr32_f64_sub_longnormalize_done>
	...

8000aadc <__avr32_f64_add_from_sub>:
8000aadc:	ee 19 80 00 	eorh	r9,0x8000

8000aae0 <__avr32_f64_add>:
8000aae0:	f7 e9 20 0c 	eor	r12,r11,r9
8000aae4:	fe 96 ff 2e 	brmi	8000a940 <__avr32_f64_sub_from_add>
8000aae8:	eb cd 40 e0 	pushm	r5-r7,lr
8000aaec:	16 9c       	mov	r12,r11
8000aaee:	e6 1c 80 00 	andh	r12,0x8000,COH
8000aaf2:	bf db       	cbr	r11,0x1f
8000aaf4:	bf d9       	cbr	r9,0x1f
8000aaf6:	12 3b       	cp.w	r11,r9
8000aaf8:	c0 72       	brcc	8000ab06 <__avr32_f64_add+0x26>
8000aafa:	16 97       	mov	r7,r11
8000aafc:	12 9b       	mov	r11,r9
8000aafe:	0e 99       	mov	r9,r7
8000ab00:	14 97       	mov	r7,r10
8000ab02:	10 9a       	mov	r10,r8
8000ab04:	0e 98       	mov	r8,r7
8000ab06:	30 0e       	mov	lr,0
8000ab08:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000ab0c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000ab10:	b5 ab       	sbr	r11,0x14
8000ab12:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000ab16:	c6 20       	breq	8000abda <__avr32_f64_add_op2_subnormal>
8000ab18:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000ab1c:	b5 a9       	sbr	r9,0x14
8000ab1e:	e0 47 07 ff 	cp.w	r7,2047
8000ab22:	c2 80       	breq	8000ab72 <__avr32_f64_add_opH_nan_or_inf>
8000ab24:	0e 26       	rsub	r6,r7
8000ab26:	c1 20       	breq	8000ab4a <__avr32_f64_add_shift_done>
8000ab28:	e0 46 00 36 	cp.w	r6,54
8000ab2c:	c1 52       	brcc	8000ab56 <__avr32_f64_add_res_of_done>
8000ab2e:	ec 05 11 20 	rsub	r5,r6,32
8000ab32:	e0 46 00 20 	cp.w	r6,32
8000ab36:	c3 52       	brcc	8000aba0 <__avr32_f64_add_longshift>
8000ab38:	f0 05 09 4e 	lsl	lr,r8,r5
8000ab3c:	f2 05 09 45 	lsl	r5,r9,r5
8000ab40:	f0 06 0a 48 	lsr	r8,r8,r6
8000ab44:	f2 06 0a 49 	lsr	r9,r9,r6
8000ab48:	0a 48       	or	r8,r5

8000ab4a <__avr32_f64_add_shift_done>:
8000ab4a:	10 0a       	add	r10,r8
8000ab4c:	f6 09 00 4b 	adc	r11,r11,r9
8000ab50:	ed bb 00 15 	bld	r11,0x15
8000ab54:	c3 40       	breq	8000abbc <__avr32_f64_add_res_of>

8000ab56 <__avr32_f64_add_res_of_done>:
8000ab56:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000ab5a:	18 4b       	or	r11,r12

8000ab5c <__avr32_f64_add_round>:
8000ab5c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000ab60:	18 4e       	or	lr,r12
8000ab62:	ee 1e 80 00 	eorh	lr,0x8000
8000ab66:	f1 be 04 20 	satu	lr,0x1
8000ab6a:	1c 0a       	add	r10,lr
8000ab6c:	5c 0b       	acr	r11
8000ab6e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000ab72 <__avr32_f64_add_opH_nan_or_inf>:
8000ab72:	b5 cb       	cbr	r11,0x14
8000ab74:	f7 ea 10 0e 	or	lr,r11,r10
8000ab78:	c1 01       	brne	8000ab98 <__avr32_f64_add_return_nan>
8000ab7a:	e0 46 07 ff 	cp.w	r6,2047
8000ab7e:	c0 30       	breq	8000ab84 <__avr32_f64_add_opL_nan_or_inf>
8000ab80:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000ab84 <__avr32_f64_add_opL_nan_or_inf>:
8000ab84:	b5 c9       	cbr	r9,0x14
8000ab86:	f3 e8 10 0e 	or	lr,r9,r8
8000ab8a:	c0 71       	brne	8000ab98 <__avr32_f64_add_return_nan>
8000ab8c:	30 0a       	mov	r10,0
8000ab8e:	fc 1b 7f f0 	movh	r11,0x7ff0
8000ab92:	18 4b       	or	r11,r12
8000ab94:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000ab98 <__avr32_f64_add_return_nan>:
8000ab98:	3f fa       	mov	r10,-1
8000ab9a:	3f fb       	mov	r11,-1
8000ab9c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000aba0 <__avr32_f64_add_longshift>:
8000aba0:	f1 b6 04 c0 	satu	r6,0x6
8000aba4:	f0 0e 17 00 	moveq	lr,r8
8000aba8:	c0 60       	breq	8000abb4 <__avr32_f64_add_longshift+0x14>
8000abaa:	f2 05 09 4e 	lsl	lr,r9,r5
8000abae:	58 08       	cp.w	r8,0
8000abb0:	5f 18       	srne	r8
8000abb2:	10 4e       	or	lr,r8
8000abb4:	f2 06 0a 48 	lsr	r8,r9,r6
8000abb8:	30 09       	mov	r9,0
8000abba:	cc 8b       	rjmp	8000ab4a <__avr32_f64_add_shift_done>

8000abbc <__avr32_f64_add_res_of>:
8000abbc:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000abc0:	a1 9b       	lsr	r11,0x1
8000abc2:	5d 0a       	ror	r10
8000abc4:	5d 0e       	ror	lr
8000abc6:	2f f7       	sub	r7,-1
8000abc8:	e0 47 07 ff 	cp.w	r7,2047
8000abcc:	f9 ba 00 00 	moveq	r10,0
8000abd0:	f9 bb 00 00 	moveq	r11,0
8000abd4:	f9 be 00 00 	moveq	lr,0
8000abd8:	cb fb       	rjmp	8000ab56 <__avr32_f64_add_res_of_done>

8000abda <__avr32_f64_add_op2_subnormal>:
8000abda:	30 16       	mov	r6,1
8000abdc:	58 07       	cp.w	r7,0
8000abde:	ca 01       	brne	8000ab1e <__avr32_f64_add+0x3e>
8000abe0:	b5 cb       	cbr	r11,0x14
8000abe2:	10 0a       	add	r10,r8
8000abe4:	f6 09 00 4b 	adc	r11,r11,r9
8000abe8:	18 4b       	or	r11,r12
8000abea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	...

8000abf0 <__avr32_u32_to_f64>:
8000abf0:	f8 cb 00 00 	sub	r11,r12,0
8000abf4:	30 0c       	mov	r12,0
8000abf6:	c0 38       	rjmp	8000abfc <__avr32_s32_to_f64+0x4>

8000abf8 <__avr32_s32_to_f64>:
8000abf8:	18 9b       	mov	r11,r12
8000abfa:	5c 4b       	abs	r11
8000abfc:	30 0a       	mov	r10,0
8000abfe:	5e 0b       	reteq	r11
8000ac00:	d4 01       	pushm	lr
8000ac02:	e0 69 04 1e 	mov	r9,1054
8000ac06:	f6 08 12 00 	clz	r8,r11
8000ac0a:	c1 70       	breq	8000ac38 <__avr32_s32_to_f64+0x40>
8000ac0c:	c0 c3       	brcs	8000ac24 <__avr32_s32_to_f64+0x2c>
8000ac0e:	f0 0e 11 20 	rsub	lr,r8,32
8000ac12:	f6 08 09 4b 	lsl	r11,r11,r8
8000ac16:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000ac1a:	1c 4b       	or	r11,lr
8000ac1c:	f4 08 09 4a 	lsl	r10,r10,r8
8000ac20:	10 19       	sub	r9,r8
8000ac22:	c0 b8       	rjmp	8000ac38 <__avr32_s32_to_f64+0x40>
8000ac24:	f4 08 12 00 	clz	r8,r10
8000ac28:	f9 b8 03 00 	movlo	r8,0
8000ac2c:	f7 b8 02 e0 	subhs	r8,-32
8000ac30:	f4 08 09 4b 	lsl	r11,r10,r8
8000ac34:	30 0a       	mov	r10,0
8000ac36:	10 19       	sub	r9,r8
8000ac38:	58 09       	cp.w	r9,0
8000ac3a:	e0 89 00 30 	brgt	8000ac9a <__avr32_s32_to_f64+0xa2>
8000ac3e:	5c 39       	neg	r9
8000ac40:	2f f9       	sub	r9,-1
8000ac42:	e0 49 00 36 	cp.w	r9,54
8000ac46:	c0 43       	brcs	8000ac4e <__avr32_s32_to_f64+0x56>
8000ac48:	30 0b       	mov	r11,0
8000ac4a:	30 0a       	mov	r10,0
8000ac4c:	c2 68       	rjmp	8000ac98 <__avr32_s32_to_f64+0xa0>
8000ac4e:	2f 69       	sub	r9,-10
8000ac50:	f2 08 11 20 	rsub	r8,r9,32
8000ac54:	e0 49 00 20 	cp.w	r9,32
8000ac58:	c0 b2       	brcc	8000ac6e <__avr32_s32_to_f64+0x76>
8000ac5a:	f4 08 09 4e 	lsl	lr,r10,r8
8000ac5e:	f6 08 09 48 	lsl	r8,r11,r8
8000ac62:	f4 09 0a 4a 	lsr	r10,r10,r9
8000ac66:	f6 09 0a 4b 	lsr	r11,r11,r9
8000ac6a:	10 4b       	or	r11,r8
8000ac6c:	c0 88       	rjmp	8000ac7c <__avr32_s32_to_f64+0x84>
8000ac6e:	f6 08 09 4e 	lsl	lr,r11,r8
8000ac72:	14 4e       	or	lr,r10
8000ac74:	16 9a       	mov	r10,r11
8000ac76:	30 0b       	mov	r11,0
8000ac78:	f4 09 0a 4a 	lsr	r10,r10,r9
8000ac7c:	ed ba 00 00 	bld	r10,0x0
8000ac80:	c0 92       	brcc	8000ac92 <__avr32_s32_to_f64+0x9a>
8000ac82:	1c 7e       	tst	lr,lr
8000ac84:	c0 41       	brne	8000ac8c <__avr32_s32_to_f64+0x94>
8000ac86:	ed ba 00 01 	bld	r10,0x1
8000ac8a:	c0 42       	brcc	8000ac92 <__avr32_s32_to_f64+0x9a>
8000ac8c:	2f fa       	sub	r10,-1
8000ac8e:	f7 bb 02 ff 	subhs	r11,-1
8000ac92:	5c fc       	rol	r12
8000ac94:	5d 0b       	ror	r11
8000ac96:	5d 0a       	ror	r10
8000ac98:	d8 02       	popm	pc
8000ac9a:	e0 68 03 ff 	mov	r8,1023
8000ac9e:	ed ba 00 0b 	bld	r10,0xb
8000aca2:	f7 b8 00 ff 	subeq	r8,-1
8000aca6:	10 0a       	add	r10,r8
8000aca8:	5c 0b       	acr	r11
8000acaa:	f7 b9 03 fe 	sublo	r9,-2
8000acae:	e0 49 07 ff 	cp.w	r9,2047
8000acb2:	c0 55       	brlt	8000acbc <__avr32_s32_to_f64+0xc4>
8000acb4:	30 0a       	mov	r10,0
8000acb6:	fc 1b ff e0 	movh	r11,0xffe0
8000acba:	c0 c8       	rjmp	8000acd2 <__floatsidf_return_op1>
8000acbc:	ed bb 00 1f 	bld	r11,0x1f
8000acc0:	f7 b9 01 01 	subne	r9,1
8000acc4:	ab 9a       	lsr	r10,0xb
8000acc6:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000acca:	a1 7b       	lsl	r11,0x1
8000accc:	ab 9b       	lsr	r11,0xb
8000acce:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000acd2 <__floatsidf_return_op1>:
8000acd2:	a1 7c       	lsl	r12,0x1
8000acd4:	5d 0b       	ror	r11
8000acd6:	d8 02       	popm	pc

8000acd8 <__avr32_f32_div>:
8000acd8:	f7 ec 20 08 	eor	r8,r11,r12
8000acdc:	a1 7c       	lsl	r12,0x1
8000acde:	a1 7b       	lsl	r11,0x1
8000ace0:	c7 a0       	breq	8000add4 <__divsf_return_op1+0x16>
8000ace2:	18 7c       	tst	r12,r12
8000ace4:	f9 b9 00 00 	moveq	r9,0
8000ace8:	c0 90       	breq	8000acfa <__avr32_f32_div+0x22>
8000acea:	f8 09 16 18 	lsr	r9,r12,0x18
8000acee:	c7 e0       	breq	8000adea <__divsf_return_op1+0x2c>
8000acf0:	e0 49 00 ff 	cp.w	r9,255
8000acf4:	c6 82       	brcc	8000adc4 <__divsf_return_op1+0x6>
8000acf6:	a7 7c       	lsl	r12,0x7
8000acf8:	bf bc       	sbr	r12,0x1f
8000acfa:	f6 0a 16 18 	lsr	r10,r11,0x18
8000acfe:	c7 e0       	breq	8000adfa <__divsf_return_op1+0x3c>
8000ad00:	e0 4a 00 ff 	cp.w	r10,255
8000ad04:	c6 62       	brcc	8000add0 <__divsf_return_op1+0x12>
8000ad06:	a7 7b       	lsl	r11,0x7
8000ad08:	bf bb       	sbr	r11,0x1f
8000ad0a:	58 09       	cp.w	r9,0
8000ad0c:	f5 bc 00 00 	subfeq	r12,0
8000ad10:	5e 0d       	reteq	0
8000ad12:	1a d5       	st.w	--sp,r5
8000ad14:	bb 27       	st.d	--sp,r6
8000ad16:	14 19       	sub	r9,r10
8000ad18:	28 19       	sub	r9,-127
8000ad1a:	fc 1a 80 00 	movh	r10,0x8000
8000ad1e:	a3 8c       	lsr	r12,0x2
8000ad20:	f6 05 16 02 	lsr	r5,r11,0x2
8000ad24:	f4 0b 16 01 	lsr	r11,r10,0x1
8000ad28:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8000ad2c:	5c d6       	com	r6
8000ad2e:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
8000ad32:	f6 05 06 46 	mulu.d	r6,r11,r5
8000ad36:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000ad3a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000ad3e:	ee 0b 15 02 	lsl	r11,r7,0x2
8000ad42:	f6 05 06 46 	mulu.d	r6,r11,r5
8000ad46:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000ad4a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000ad4e:	ee 0b 15 02 	lsl	r11,r7,0x2
8000ad52:	f6 05 06 46 	mulu.d	r6,r11,r5
8000ad56:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000ad5a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000ad5e:	ee 0b 15 02 	lsl	r11,r7,0x2
8000ad62:	f6 05 06 46 	mulu.d	r6,r11,r5
8000ad66:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000ad6a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000ad6e:	ee 0b 15 02 	lsl	r11,r7,0x2
8000ad72:	f6 0c 06 46 	mulu.d	r6,r11,r12
8000ad76:	a5 8c       	lsr	r12,0x4
8000ad78:	ed b7 00 1c 	bld	r7,0x1c
8000ad7c:	c0 40       	breq	8000ad84 <__avr32_f32_div+0xac>
8000ad7e:	a1 77       	lsl	r7,0x1
8000ad80:	20 19       	sub	r9,1
8000ad82:	a1 7c       	lsl	r12,0x1
8000ad84:	58 09       	cp.w	r9,0
8000ad86:	e0 8a 00 42 	brle	8000ae0a <__avr32_f32_div_res_subnormal>
8000ad8a:	e0 17 ff e0 	andl	r7,0xffe0
8000ad8e:	e8 17 00 10 	orl	r7,0x10
8000ad92:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000ad96:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000ad9a:	58 0a       	cp.w	r10,0

8000ad9c <__avr32_f32_div_round_subnormal>:
8000ad9c:	f8 0b 13 00 	cpc	r11,r12
8000ada0:	5f 3b       	srlo	r11
8000ada2:	ea 0b 17 00 	moveq	r11,r5
8000ada6:	ee 0c 16 05 	lsr	r12,r7,0x5
8000adaa:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8000adae:	bb 07       	ld.d	r6,sp++
8000adb0:	1b 05       	ld.w	r5,sp++
8000adb2:	ed b8 00 1f 	bld	r8,0x1f
8000adb6:	ef bc 00 1f 	bst	r12,0x1f
8000adba:	16 0c       	add	r12,r11
8000adbc:	5e fc       	retal	r12

8000adbe <__divsf_return_op1>:
8000adbe:	a1 78       	lsl	r8,0x1
8000adc0:	5d 0c       	ror	r12
8000adc2:	5e fc       	retal	r12
8000adc4:	5e 1e       	retne	-1
8000adc6:	fc 19 ff 00 	movh	r9,0xff00
8000adca:	12 3b       	cp.w	r11,r9
8000adcc:	cf 93       	brcs	8000adbe <__divsf_return_op1>
8000adce:	5e fe       	retal	-1
8000add0:	5e 0d       	reteq	0
8000add2:	5e fe       	retal	-1
8000add4:	18 7c       	tst	r12,r12
8000add6:	5e 0e       	reteq	-1
8000add8:	f8 09 16 18 	lsr	r9,r12,0x18
8000addc:	c0 70       	breq	8000adea <__divsf_return_op1+0x2c>
8000adde:	e0 49 00 ff 	cp.w	r9,255
8000ade2:	cf 12       	brcc	8000adc4 <__divsf_return_op1+0x6>
8000ade4:	fc 1c ff 00 	movh	r12,0xff00
8000ade8:	ce bb       	rjmp	8000adbe <__divsf_return_op1>
8000adea:	a7 7c       	lsl	r12,0x7
8000adec:	f8 09 12 00 	clz	r9,r12
8000adf0:	f8 09 09 4c 	lsl	r12,r12,r9
8000adf4:	f2 09 11 01 	rsub	r9,r9,1
8000adf8:	c8 1b       	rjmp	8000acfa <__avr32_f32_div+0x22>
8000adfa:	a7 7b       	lsl	r11,0x7
8000adfc:	f6 0a 12 00 	clz	r10,r11
8000ae00:	f6 0a 09 4b 	lsl	r11,r11,r10
8000ae04:	f4 0a 11 01 	rsub	r10,r10,1
8000ae08:	c8 5b       	rjmp	8000ad12 <__avr32_f32_div+0x3a>

8000ae0a <__avr32_f32_div_res_subnormal>:
8000ae0a:	5c 39       	neg	r9
8000ae0c:	2f f9       	sub	r9,-1
8000ae0e:	f1 b9 04 a0 	satu	r9,0x5
8000ae12:	f2 0a 11 20 	rsub	r10,r9,32
8000ae16:	ee 09 0a 47 	lsr	r7,r7,r9
8000ae1a:	f8 0a 09 46 	lsl	r6,r12,r10
8000ae1e:	f8 09 0a 4c 	lsr	r12,r12,r9
8000ae22:	e0 17 ff e0 	andl	r7,0xffe0
8000ae26:	e8 17 00 10 	orl	r7,0x10
8000ae2a:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000ae2e:	30 09       	mov	r9,0
8000ae30:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000ae34:	0c 3a       	cp.w	r10,r6
8000ae36:	cb 3b       	rjmp	8000ad9c <__avr32_f32_div_round_subnormal>

8000ae38 <__avr32_f64_to_f32>:
8000ae38:	f6 09 15 01 	lsl	r9,r11,0x1
8000ae3c:	b5 99       	lsr	r9,0x15
8000ae3e:	5e 0d       	reteq	0
8000ae40:	f6 08 15 0a 	lsl	r8,r11,0xa
8000ae44:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
8000ae48:	ab 6a       	lsl	r10,0xa
8000ae4a:	5c 3a       	neg	r10
8000ae4c:	5c fc       	rol	r12
8000ae4e:	e0 49 07 ff 	cp.w	r9,2047
8000ae52:	c1 a0       	breq	8000ae86 <__truncdfsf_return_op1+0x6>
8000ae54:	e0 29 03 80 	sub	r9,896
8000ae58:	bf bc       	sbr	r12,0x1f
8000ae5a:	58 09       	cp.w	r9,0
8000ae5c:	e0 8a 00 1a 	brle	8000ae90 <__truncdfsf_return_op1+0x10>
8000ae60:	37 fa       	mov	r10,127
8000ae62:	ed bc 00 08 	bld	r12,0x8
8000ae66:	f7 ba 00 ff 	subeq	r10,-1
8000ae6a:	14 0c       	add	r12,r10
8000ae6c:	f7 b9 03 fe 	sublo	r9,-2
8000ae70:	ed bc 00 1f 	bld	r12,0x1f
8000ae74:	f7 b9 01 01 	subne	r9,1
8000ae78:	f8 0c 16 07 	lsr	r12,r12,0x7
8000ae7c:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

8000ae80 <__truncdfsf_return_op1>:
8000ae80:	a1 7b       	lsl	r11,0x1
8000ae82:	5d 0c       	ror	r12
8000ae84:	5e fc       	retal	r12
8000ae86:	bf dc       	cbr	r12,0x1f
8000ae88:	5e 1e       	retne	-1
8000ae8a:	fc 1c 7f 80 	movh	r12,0x7f80
8000ae8e:	5e fc       	retal	r12
8000ae90:	f2 09 11 01 	rsub	r9,r9,1
8000ae94:	59 99       	cp.w	r9,25
8000ae96:	f9 bc 02 00 	movhs	r12,0
8000ae9a:	c1 32       	brcc	8000aec0 <__truncdfsf_return_op1+0x40>
8000ae9c:	f2 0a 11 20 	rsub	r10,r9,32
8000aea0:	f8 0a 09 4a 	lsl	r10,r12,r10
8000aea4:	5f 1a       	srne	r10
8000aea6:	f8 09 0a 4c 	lsr	r12,r12,r9
8000aeaa:	14 4c       	or	r12,r10
8000aeac:	37 fa       	mov	r10,127
8000aeae:	ed bc 00 08 	bld	r12,0x8
8000aeb2:	f7 ba 00 ff 	subeq	r10,-1
8000aeb6:	14 0c       	add	r12,r10
8000aeb8:	f8 0c 16 07 	lsr	r12,r12,0x7
8000aebc:	a1 7b       	lsl	r11,0x1
8000aebe:	5d 0c       	ror	r12
8000aec0:	5e fc       	retal	r12

8000aec2 <__avr32_udiv64>:
8000aec2:	d4 31       	pushm	r0-r7,lr
8000aec4:	1a 97       	mov	r7,sp
8000aec6:	20 3d       	sub	sp,12
8000aec8:	10 9c       	mov	r12,r8
8000aeca:	12 9e       	mov	lr,r9
8000aecc:	14 93       	mov	r3,r10
8000aece:	58 09       	cp.w	r9,0
8000aed0:	e0 81 00 bd 	brne	8000b04a <__avr32_udiv64+0x188>
8000aed4:	16 38       	cp.w	r8,r11
8000aed6:	e0 88 00 40 	brls	8000af56 <__avr32_udiv64+0x94>
8000aeda:	f0 08 12 00 	clz	r8,r8
8000aede:	c0 d0       	breq	8000aef8 <__avr32_udiv64+0x36>
8000aee0:	f6 08 09 4b 	lsl	r11,r11,r8
8000aee4:	f0 09 11 20 	rsub	r9,r8,32
8000aee8:	f8 08 09 4c 	lsl	r12,r12,r8
8000aeec:	f4 09 0a 49 	lsr	r9,r10,r9
8000aef0:	f4 08 09 43 	lsl	r3,r10,r8
8000aef4:	f3 eb 10 0b 	or	r11,r9,r11
8000aef8:	f8 0e 16 10 	lsr	lr,r12,0x10
8000aefc:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000af00:	f6 0e 0d 00 	divu	r0,r11,lr
8000af04:	e6 0b 16 10 	lsr	r11,r3,0x10
8000af08:	00 99       	mov	r9,r0
8000af0a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000af0e:	e0 0a 02 48 	mul	r8,r0,r10
8000af12:	10 3b       	cp.w	r11,r8
8000af14:	c0 a2       	brcc	8000af28 <__avr32_udiv64+0x66>
8000af16:	20 19       	sub	r9,1
8000af18:	18 0b       	add	r11,r12
8000af1a:	18 3b       	cp.w	r11,r12
8000af1c:	c0 63       	brcs	8000af28 <__avr32_udiv64+0x66>
8000af1e:	10 3b       	cp.w	r11,r8
8000af20:	f7 b9 03 01 	sublo	r9,1
8000af24:	f7 dc e3 0b 	addcs	r11,r11,r12
8000af28:	f6 08 01 01 	sub	r1,r11,r8
8000af2c:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000af30:	e2 0e 0d 00 	divu	r0,r1,lr
8000af34:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000af38:	00 98       	mov	r8,r0
8000af3a:	e0 0a 02 4a 	mul	r10,r0,r10
8000af3e:	14 33       	cp.w	r3,r10
8000af40:	c0 82       	brcc	8000af50 <__avr32_udiv64+0x8e>
8000af42:	20 18       	sub	r8,1
8000af44:	18 03       	add	r3,r12
8000af46:	18 33       	cp.w	r3,r12
8000af48:	c0 43       	brcs	8000af50 <__avr32_udiv64+0x8e>
8000af4a:	14 33       	cp.w	r3,r10
8000af4c:	f7 b8 03 01 	sublo	r8,1
8000af50:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000af54:	cd f8       	rjmp	8000b112 <__avr32_udiv64+0x250>
8000af56:	58 08       	cp.w	r8,0
8000af58:	c0 51       	brne	8000af62 <__avr32_udiv64+0xa0>
8000af5a:	30 19       	mov	r9,1
8000af5c:	f2 08 0d 08 	divu	r8,r9,r8
8000af60:	10 9c       	mov	r12,r8
8000af62:	f8 06 12 00 	clz	r6,r12
8000af66:	c0 41       	brne	8000af6e <__avr32_udiv64+0xac>
8000af68:	18 1b       	sub	r11,r12
8000af6a:	30 19       	mov	r9,1
8000af6c:	c4 08       	rjmp	8000afec <__avr32_udiv64+0x12a>
8000af6e:	ec 01 11 20 	rsub	r1,r6,32
8000af72:	f4 01 0a 49 	lsr	r9,r10,r1
8000af76:	f8 06 09 4c 	lsl	r12,r12,r6
8000af7a:	f6 06 09 48 	lsl	r8,r11,r6
8000af7e:	f6 01 0a 41 	lsr	r1,r11,r1
8000af82:	f3 e8 10 08 	or	r8,r9,r8
8000af86:	f8 03 16 10 	lsr	r3,r12,0x10
8000af8a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000af8e:	e2 03 0d 00 	divu	r0,r1,r3
8000af92:	f0 0b 16 10 	lsr	r11,r8,0x10
8000af96:	00 9e       	mov	lr,r0
8000af98:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000af9c:	e0 05 02 49 	mul	r9,r0,r5
8000afa0:	12 3b       	cp.w	r11,r9
8000afa2:	c0 a2       	brcc	8000afb6 <__avr32_udiv64+0xf4>
8000afa4:	20 1e       	sub	lr,1
8000afa6:	18 0b       	add	r11,r12
8000afa8:	18 3b       	cp.w	r11,r12
8000afaa:	c0 63       	brcs	8000afb6 <__avr32_udiv64+0xf4>
8000afac:	12 3b       	cp.w	r11,r9
8000afae:	f7 be 03 01 	sublo	lr,1
8000afb2:	f7 dc e3 0b 	addcs	r11,r11,r12
8000afb6:	12 1b       	sub	r11,r9
8000afb8:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000afbc:	f6 03 0d 02 	divu	r2,r11,r3
8000afc0:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000afc4:	04 99       	mov	r9,r2
8000afc6:	e4 05 02 4b 	mul	r11,r2,r5
8000afca:	16 38       	cp.w	r8,r11
8000afcc:	c0 a2       	brcc	8000afe0 <__avr32_udiv64+0x11e>
8000afce:	20 19       	sub	r9,1
8000afd0:	18 08       	add	r8,r12
8000afd2:	18 38       	cp.w	r8,r12
8000afd4:	c0 63       	brcs	8000afe0 <__avr32_udiv64+0x11e>
8000afd6:	16 38       	cp.w	r8,r11
8000afd8:	f7 b9 03 01 	sublo	r9,1
8000afdc:	f1 dc e3 08 	addcs	r8,r8,r12
8000afe0:	f4 06 09 43 	lsl	r3,r10,r6
8000afe4:	f0 0b 01 0b 	sub	r11,r8,r11
8000afe8:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000afec:	f8 06 16 10 	lsr	r6,r12,0x10
8000aff0:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000aff4:	f6 06 0d 00 	divu	r0,r11,r6
8000aff8:	e6 0b 16 10 	lsr	r11,r3,0x10
8000affc:	00 9a       	mov	r10,r0
8000affe:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000b002:	e0 0e 02 48 	mul	r8,r0,lr
8000b006:	10 3b       	cp.w	r11,r8
8000b008:	c0 a2       	brcc	8000b01c <__avr32_udiv64+0x15a>
8000b00a:	20 1a       	sub	r10,1
8000b00c:	18 0b       	add	r11,r12
8000b00e:	18 3b       	cp.w	r11,r12
8000b010:	c0 63       	brcs	8000b01c <__avr32_udiv64+0x15a>
8000b012:	10 3b       	cp.w	r11,r8
8000b014:	f7 ba 03 01 	sublo	r10,1
8000b018:	f7 dc e3 0b 	addcs	r11,r11,r12
8000b01c:	f6 08 01 01 	sub	r1,r11,r8
8000b020:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000b024:	e2 06 0d 00 	divu	r0,r1,r6
8000b028:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000b02c:	00 98       	mov	r8,r0
8000b02e:	e0 0e 02 4b 	mul	r11,r0,lr
8000b032:	16 33       	cp.w	r3,r11
8000b034:	c0 82       	brcc	8000b044 <__avr32_udiv64+0x182>
8000b036:	20 18       	sub	r8,1
8000b038:	18 03       	add	r3,r12
8000b03a:	18 33       	cp.w	r3,r12
8000b03c:	c0 43       	brcs	8000b044 <__avr32_udiv64+0x182>
8000b03e:	16 33       	cp.w	r3,r11
8000b040:	f7 b8 03 01 	sublo	r8,1
8000b044:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000b048:	c6 98       	rjmp	8000b11a <__avr32_udiv64+0x258>
8000b04a:	16 39       	cp.w	r9,r11
8000b04c:	e0 8b 00 65 	brhi	8000b116 <__avr32_udiv64+0x254>
8000b050:	f2 09 12 00 	clz	r9,r9
8000b054:	c0 b1       	brne	8000b06a <__avr32_udiv64+0x1a8>
8000b056:	10 3a       	cp.w	r10,r8
8000b058:	5f 2a       	srhs	r10
8000b05a:	1c 3b       	cp.w	r11,lr
8000b05c:	5f b8       	srhi	r8
8000b05e:	10 4a       	or	r10,r8
8000b060:	f2 0a 18 00 	cp.b	r10,r9
8000b064:	c5 90       	breq	8000b116 <__avr32_udiv64+0x254>
8000b066:	30 18       	mov	r8,1
8000b068:	c5 98       	rjmp	8000b11a <__avr32_udiv64+0x258>
8000b06a:	f0 09 09 46 	lsl	r6,r8,r9
8000b06e:	f2 03 11 20 	rsub	r3,r9,32
8000b072:	fc 09 09 4e 	lsl	lr,lr,r9
8000b076:	f0 03 0a 48 	lsr	r8,r8,r3
8000b07a:	f6 09 09 4c 	lsl	r12,r11,r9
8000b07e:	f4 03 0a 42 	lsr	r2,r10,r3
8000b082:	ef 46 ff f4 	st.w	r7[-12],r6
8000b086:	f6 03 0a 43 	lsr	r3,r11,r3
8000b08a:	18 42       	or	r2,r12
8000b08c:	f1 ee 10 0c 	or	r12,r8,lr
8000b090:	f8 01 16 10 	lsr	r1,r12,0x10
8000b094:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000b098:	e6 01 0d 04 	divu	r4,r3,r1
8000b09c:	e4 03 16 10 	lsr	r3,r2,0x10
8000b0a0:	08 9e       	mov	lr,r4
8000b0a2:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000b0a6:	e8 06 02 48 	mul	r8,r4,r6
8000b0aa:	10 33       	cp.w	r3,r8
8000b0ac:	c0 a2       	brcc	8000b0c0 <__avr32_udiv64+0x1fe>
8000b0ae:	20 1e       	sub	lr,1
8000b0b0:	18 03       	add	r3,r12
8000b0b2:	18 33       	cp.w	r3,r12
8000b0b4:	c0 63       	brcs	8000b0c0 <__avr32_udiv64+0x1fe>
8000b0b6:	10 33       	cp.w	r3,r8
8000b0b8:	f7 be 03 01 	sublo	lr,1
8000b0bc:	e7 dc e3 03 	addcs	r3,r3,r12
8000b0c0:	10 13       	sub	r3,r8
8000b0c2:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000b0c6:	e6 01 0d 00 	divu	r0,r3,r1
8000b0ca:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000b0ce:	00 98       	mov	r8,r0
8000b0d0:	e0 06 02 46 	mul	r6,r0,r6
8000b0d4:	0c 3b       	cp.w	r11,r6
8000b0d6:	c0 a2       	brcc	8000b0ea <__avr32_udiv64+0x228>
8000b0d8:	20 18       	sub	r8,1
8000b0da:	18 0b       	add	r11,r12
8000b0dc:	18 3b       	cp.w	r11,r12
8000b0de:	c0 63       	brcs	8000b0ea <__avr32_udiv64+0x228>
8000b0e0:	0c 3b       	cp.w	r11,r6
8000b0e2:	f7 dc e3 0b 	addcs	r11,r11,r12
8000b0e6:	f7 b8 03 01 	sublo	r8,1
8000b0ea:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000b0ee:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000b0f2:	0c 1b       	sub	r11,r6
8000b0f4:	f0 04 06 42 	mulu.d	r2,r8,r4
8000b0f8:	06 95       	mov	r5,r3
8000b0fa:	16 35       	cp.w	r5,r11
8000b0fc:	e0 8b 00 0a 	brhi	8000b110 <__avr32_udiv64+0x24e>
8000b100:	5f 0b       	sreq	r11
8000b102:	f4 09 09 49 	lsl	r9,r10,r9
8000b106:	12 32       	cp.w	r2,r9
8000b108:	5f b9       	srhi	r9
8000b10a:	f7 e9 00 09 	and	r9,r11,r9
8000b10e:	c0 60       	breq	8000b11a <__avr32_udiv64+0x258>
8000b110:	20 18       	sub	r8,1
8000b112:	30 09       	mov	r9,0
8000b114:	c0 38       	rjmp	8000b11a <__avr32_udiv64+0x258>
8000b116:	30 09       	mov	r9,0
8000b118:	12 98       	mov	r8,r9
8000b11a:	10 9a       	mov	r10,r8
8000b11c:	12 93       	mov	r3,r9
8000b11e:	10 92       	mov	r2,r8
8000b120:	12 9b       	mov	r11,r9
8000b122:	2f dd       	sub	sp,-12
8000b124:	d8 32       	popm	r0-r7,pc

8000b126 <memcpy>:
8000b126:	58 8a       	cp.w	r10,8
8000b128:	c2 f5       	brlt	8000b186 <memcpy+0x60>
8000b12a:	f9 eb 10 09 	or	r9,r12,r11
8000b12e:	e2 19 00 03 	andl	r9,0x3,COH
8000b132:	e0 81 00 97 	brne	8000b260 <memcpy+0x13a>
8000b136:	e0 4a 00 20 	cp.w	r10,32
8000b13a:	c3 b4       	brge	8000b1b0 <memcpy+0x8a>
8000b13c:	f4 08 14 02 	asr	r8,r10,0x2
8000b140:	f0 09 11 08 	rsub	r9,r8,8
8000b144:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000b148:	76 69       	ld.w	r9,r11[0x18]
8000b14a:	99 69       	st.w	r12[0x18],r9
8000b14c:	76 59       	ld.w	r9,r11[0x14]
8000b14e:	99 59       	st.w	r12[0x14],r9
8000b150:	76 49       	ld.w	r9,r11[0x10]
8000b152:	99 49       	st.w	r12[0x10],r9
8000b154:	76 39       	ld.w	r9,r11[0xc]
8000b156:	99 39       	st.w	r12[0xc],r9
8000b158:	76 29       	ld.w	r9,r11[0x8]
8000b15a:	99 29       	st.w	r12[0x8],r9
8000b15c:	76 19       	ld.w	r9,r11[0x4]
8000b15e:	99 19       	st.w	r12[0x4],r9
8000b160:	76 09       	ld.w	r9,r11[0x0]
8000b162:	99 09       	st.w	r12[0x0],r9
8000b164:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000b168:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000b16c:	e0 1a 00 03 	andl	r10,0x3
8000b170:	f4 0a 11 04 	rsub	r10,r10,4
8000b174:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000b178:	17 a9       	ld.ub	r9,r11[0x2]
8000b17a:	b0 a9       	st.b	r8[0x2],r9
8000b17c:	17 99       	ld.ub	r9,r11[0x1]
8000b17e:	b0 99       	st.b	r8[0x1],r9
8000b180:	17 89       	ld.ub	r9,r11[0x0]
8000b182:	b0 89       	st.b	r8[0x0],r9
8000b184:	5e fc       	retal	r12
8000b186:	f4 0a 11 09 	rsub	r10,r10,9
8000b18a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000b18e:	17 f9       	ld.ub	r9,r11[0x7]
8000b190:	b8 f9       	st.b	r12[0x7],r9
8000b192:	17 e9       	ld.ub	r9,r11[0x6]
8000b194:	b8 e9       	st.b	r12[0x6],r9
8000b196:	17 d9       	ld.ub	r9,r11[0x5]
8000b198:	b8 d9       	st.b	r12[0x5],r9
8000b19a:	17 c9       	ld.ub	r9,r11[0x4]
8000b19c:	b8 c9       	st.b	r12[0x4],r9
8000b19e:	17 b9       	ld.ub	r9,r11[0x3]
8000b1a0:	b8 b9       	st.b	r12[0x3],r9
8000b1a2:	17 a9       	ld.ub	r9,r11[0x2]
8000b1a4:	b8 a9       	st.b	r12[0x2],r9
8000b1a6:	17 99       	ld.ub	r9,r11[0x1]
8000b1a8:	b8 99       	st.b	r12[0x1],r9
8000b1aa:	17 89       	ld.ub	r9,r11[0x0]
8000b1ac:	b8 89       	st.b	r12[0x0],r9
8000b1ae:	5e fc       	retal	r12
8000b1b0:	eb cd 40 c0 	pushm	r6-r7,lr
8000b1b4:	18 99       	mov	r9,r12
8000b1b6:	22 0a       	sub	r10,32
8000b1b8:	b7 07       	ld.d	r6,r11++
8000b1ba:	b3 26       	st.d	r9++,r6
8000b1bc:	b7 07       	ld.d	r6,r11++
8000b1be:	b3 26       	st.d	r9++,r6
8000b1c0:	b7 07       	ld.d	r6,r11++
8000b1c2:	b3 26       	st.d	r9++,r6
8000b1c4:	b7 07       	ld.d	r6,r11++
8000b1c6:	b3 26       	st.d	r9++,r6
8000b1c8:	22 0a       	sub	r10,32
8000b1ca:	cf 74       	brge	8000b1b8 <memcpy+0x92>
8000b1cc:	2f 0a       	sub	r10,-16
8000b1ce:	c0 65       	brlt	8000b1da <memcpy+0xb4>
8000b1d0:	b7 07       	ld.d	r6,r11++
8000b1d2:	b3 26       	st.d	r9++,r6
8000b1d4:	b7 07       	ld.d	r6,r11++
8000b1d6:	b3 26       	st.d	r9++,r6
8000b1d8:	21 0a       	sub	r10,16
8000b1da:	5c 3a       	neg	r10
8000b1dc:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000b1e0:	d7 03       	nop
8000b1e2:	d7 03       	nop
8000b1e4:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000b1e8:	f3 66 00 0e 	st.b	r9[14],r6
8000b1ec:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000b1f0:	f3 66 00 0d 	st.b	r9[13],r6
8000b1f4:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000b1f8:	f3 66 00 0c 	st.b	r9[12],r6
8000b1fc:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000b200:	f3 66 00 0b 	st.b	r9[11],r6
8000b204:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000b208:	f3 66 00 0a 	st.b	r9[10],r6
8000b20c:	f7 36 00 09 	ld.ub	r6,r11[9]
8000b210:	f3 66 00 09 	st.b	r9[9],r6
8000b214:	f7 36 00 08 	ld.ub	r6,r11[8]
8000b218:	f3 66 00 08 	st.b	r9[8],r6
8000b21c:	f7 36 00 07 	ld.ub	r6,r11[7]
8000b220:	f3 66 00 07 	st.b	r9[7],r6
8000b224:	f7 36 00 06 	ld.ub	r6,r11[6]
8000b228:	f3 66 00 06 	st.b	r9[6],r6
8000b22c:	f7 36 00 05 	ld.ub	r6,r11[5]
8000b230:	f3 66 00 05 	st.b	r9[5],r6
8000b234:	f7 36 00 04 	ld.ub	r6,r11[4]
8000b238:	f3 66 00 04 	st.b	r9[4],r6
8000b23c:	f7 36 00 03 	ld.ub	r6,r11[3]
8000b240:	f3 66 00 03 	st.b	r9[3],r6
8000b244:	f7 36 00 02 	ld.ub	r6,r11[2]
8000b248:	f3 66 00 02 	st.b	r9[2],r6
8000b24c:	f7 36 00 01 	ld.ub	r6,r11[1]
8000b250:	f3 66 00 01 	st.b	r9[1],r6
8000b254:	f7 36 00 00 	ld.ub	r6,r11[0]
8000b258:	f3 66 00 00 	st.b	r9[0],r6
8000b25c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000b260:	20 1a       	sub	r10,1
8000b262:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000b266:	f8 0a 0b 09 	st.b	r12[r10],r9
8000b26a:	cf b1       	brne	8000b260 <memcpy+0x13a>
8000b26c:	5e fc       	retal	r12

8000b26e <memset>:
8000b26e:	18 98       	mov	r8,r12
8000b270:	c0 38       	rjmp	8000b276 <memset+0x8>
8000b272:	10 cb       	st.b	r8++,r11
8000b274:	20 1a       	sub	r10,1
8000b276:	58 0a       	cp.w	r10,0
8000b278:	cf d1       	brne	8000b272 <memset+0x4>
8000b27a:	5e fc       	retal	r12

8000b27c <_puts_r>:
8000b27c:	d4 21       	pushm	r4-r7,lr
8000b27e:	20 7d       	sub	sp,28
8000b280:	16 96       	mov	r6,r11
8000b282:	18 97       	mov	r7,r12
8000b284:	16 9c       	mov	r12,r11
8000b286:	f0 1f 00 12 	mcall	8000b2cc <_puts_r+0x50>
8000b28a:	f8 c8 ff ff 	sub	r8,r12,-1
8000b28e:	50 68       	stdsp	sp[0x18],r8
8000b290:	49 08       	lddpc	r8,8000b2d0 <_puts_r+0x54>
8000b292:	50 28       	stdsp	sp[0x8],r8
8000b294:	30 18       	mov	r8,1
8000b296:	50 06       	stdsp	sp[0x0],r6
8000b298:	50 38       	stdsp	sp[0xc],r8
8000b29a:	50 1c       	stdsp	sp[0x4],r12
8000b29c:	30 28       	mov	r8,2
8000b29e:	50 4d       	stdsp	sp[0x10],sp
8000b2a0:	50 58       	stdsp	sp[0x14],r8
8000b2a2:	58 07       	cp.w	r7,0
8000b2a4:	c0 70       	breq	8000b2b2 <_puts_r+0x36>
8000b2a6:	6e 68       	ld.w	r8,r7[0x18]
8000b2a8:	58 08       	cp.w	r8,0
8000b2aa:	c0 41       	brne	8000b2b2 <_puts_r+0x36>
8000b2ac:	0e 9c       	mov	r12,r7
8000b2ae:	f0 1f 00 0a 	mcall	8000b2d4 <_puts_r+0x58>
8000b2b2:	0e 9c       	mov	r12,r7
8000b2b4:	fa ca ff f0 	sub	r10,sp,-16
8000b2b8:	6e 1b       	ld.w	r11,r7[0x4]
8000b2ba:	f0 1f 00 08 	mcall	8000b2d8 <_puts_r+0x5c>
8000b2be:	f9 bc 01 ff 	movne	r12,-1
8000b2c2:	f9 bc 00 0a 	moveq	r12,10
8000b2c6:	2f 9d       	sub	sp,-28
8000b2c8:	d8 22       	popm	r4-r7,pc
8000b2ca:	00 00       	add	r0,r0
8000b2cc:	80 00       	ld.sh	r0,r0[0x0]
8000b2ce:	b3 34       	mul	r4,r9
8000b2d0:	80 01       	ld.sh	r1,r0[0x0]
8000b2d2:	0c 50       	eor	r0,r6
8000b2d4:	80 00       	ld.sh	r0,r0[0x0]
8000b2d6:	e6 c4 80 00 	sub	r4,r3,-32768
8000b2da:	e9 bc       	*unknown*

8000b2dc <puts>:
8000b2dc:	d4 01       	pushm	lr
8000b2de:	48 48       	lddpc	r8,8000b2ec <puts+0x10>
8000b2e0:	18 9b       	mov	r11,r12
8000b2e2:	70 0c       	ld.w	r12,r8[0x0]
8000b2e4:	f0 1f 00 03 	mcall	8000b2f0 <puts+0x14>
8000b2e8:	d8 02       	popm	pc
8000b2ea:	00 00       	add	r0,r0
8000b2ec:	00 00       	add	r0,r0
8000b2ee:	01 a4       	ld.ub	r4,r0[0x2]
8000b2f0:	80 00       	ld.sh	r0,r0[0x0]
8000b2f2:	b2 7c       	st.h	r9[0xe],r12

8000b2f4 <sprintf>:
8000b2f4:	d4 01       	pushm	lr
8000b2f6:	21 7d       	sub	sp,92
8000b2f8:	e0 68 ff ff 	mov	r8,65535
8000b2fc:	ea 18 7f ff 	orh	r8,0x7fff
8000b300:	50 58       	stdsp	sp[0x14],r8
8000b302:	50 28       	stdsp	sp[0x8],r8
8000b304:	e0 68 02 08 	mov	r8,520
8000b308:	ba 68       	st.h	sp[0xc],r8
8000b30a:	3f f8       	mov	r8,-1
8000b30c:	ba 78       	st.h	sp[0xe],r8
8000b30e:	48 88       	lddpc	r8,8000b32c <sprintf+0x38>
8000b310:	50 4c       	stdsp	sp[0x10],r12
8000b312:	16 9a       	mov	r10,r11
8000b314:	50 0c       	stdsp	sp[0x0],r12
8000b316:	fa c9 ff a0 	sub	r9,sp,-96
8000b31a:	70 0c       	ld.w	r12,r8[0x0]
8000b31c:	1a 9b       	mov	r11,sp
8000b31e:	f0 1f 00 05 	mcall	8000b330 <sprintf+0x3c>
8000b322:	30 09       	mov	r9,0
8000b324:	40 08       	lddsp	r8,sp[0x0]
8000b326:	b0 89       	st.b	r8[0x0],r9
8000b328:	2e 9d       	sub	sp,-92
8000b32a:	d8 02       	popm	pc
8000b32c:	00 00       	add	r0,r0
8000b32e:	01 a4       	ld.ub	r4,r0[0x2]
8000b330:	80 00       	ld.sh	r0,r0[0x0]
8000b332:	b6 b0       	st.b	r11[0x3],r0

8000b334 <strlen>:
8000b334:	30 09       	mov	r9,0
8000b336:	18 98       	mov	r8,r12
8000b338:	c0 28       	rjmp	8000b33c <strlen+0x8>
8000b33a:	2f f8       	sub	r8,-1
8000b33c:	11 8a       	ld.ub	r10,r8[0x0]
8000b33e:	f2 0a 18 00 	cp.b	r10,r9
8000b342:	cf c1       	brne	8000b33a <strlen+0x6>
8000b344:	f0 0c 01 0c 	sub	r12,r8,r12
8000b348:	5e fc       	retal	r12
8000b34a:	d7 03       	nop

8000b34c <strncpy>:
8000b34c:	30 08       	mov	r8,0
8000b34e:	10 3a       	cp.w	r10,r8
8000b350:	5e 0c       	reteq	r12
8000b352:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000b356:	f8 08 0b 09 	st.b	r12[r8],r9
8000b35a:	2f f8       	sub	r8,-1
8000b35c:	58 09       	cp.w	r9,0
8000b35e:	cf 81       	brne	8000b34e <strncpy+0x2>
8000b360:	10 3a       	cp.w	r10,r8
8000b362:	5e 0c       	reteq	r12
8000b364:	f8 08 0b 09 	st.b	r12[r8],r9
8000b368:	2f f8       	sub	r8,-1
8000b36a:	cf bb       	rjmp	8000b360 <strncpy+0x14>

8000b36c <get_arg>:
8000b36c:	d4 31       	pushm	r0-r7,lr
8000b36e:	20 8d       	sub	sp,32
8000b370:	fa c4 ff bc 	sub	r4,sp,-68
8000b374:	50 4b       	stdsp	sp[0x10],r11
8000b376:	68 2e       	ld.w	lr,r4[0x8]
8000b378:	50 58       	stdsp	sp[0x14],r8
8000b37a:	12 96       	mov	r6,r9
8000b37c:	7c 0b       	ld.w	r11,lr[0x0]
8000b37e:	70 05       	ld.w	r5,r8[0x0]
8000b380:	50 6e       	stdsp	sp[0x18],lr
8000b382:	58 0b       	cp.w	r11,0
8000b384:	f4 0b 17 00 	moveq	r11,r10
8000b388:	68 03       	ld.w	r3,r4[0x0]
8000b38a:	68 11       	ld.w	r1,r4[0x4]
8000b38c:	40 49       	lddsp	r9,sp[0x10]
8000b38e:	30 08       	mov	r8,0
8000b390:	c2 e9       	rjmp	8000b5ec <get_arg+0x280>
8000b392:	2f fb       	sub	r11,-1
8000b394:	32 5c       	mov	r12,37
8000b396:	17 8a       	ld.ub	r10,r11[0x0]
8000b398:	f8 0a 18 00 	cp.b	r10,r12
8000b39c:	5f 1e       	srne	lr
8000b39e:	f0 0a 18 00 	cp.b	r10,r8
8000b3a2:	5f 1c       	srne	r12
8000b3a4:	fd ec 00 0c 	and	r12,lr,r12
8000b3a8:	f0 0c 18 00 	cp.b	r12,r8
8000b3ac:	cf 31       	brne	8000b392 <get_arg+0x26>
8000b3ae:	58 0a       	cp.w	r10,0
8000b3b0:	e0 80 01 2b 	breq	8000b606 <get_arg+0x29a>
8000b3b4:	30 0c       	mov	r12,0
8000b3b6:	3f fa       	mov	r10,-1
8000b3b8:	18 90       	mov	r0,r12
8000b3ba:	50 3a       	stdsp	sp[0xc],r10
8000b3bc:	18 94       	mov	r4,r12
8000b3be:	18 92       	mov	r2,r12
8000b3c0:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000b3c4:	16 97       	mov	r7,r11
8000b3c6:	50 7c       	stdsp	sp[0x1c],r12
8000b3c8:	4c ec       	lddpc	r12,8000b500 <get_arg+0x194>
8000b3ca:	0f 3a       	ld.ub	r10,r7++
8000b3cc:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000b3d0:	40 7c       	lddsp	r12,sp[0x1c]
8000b3d2:	1c 0c       	add	r12,lr
8000b3d4:	4c ce       	lddpc	lr,8000b504 <get_arg+0x198>
8000b3d6:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000b3da:	20 1e       	sub	lr,1
8000b3dc:	50 0e       	stdsp	sp[0x0],lr
8000b3de:	4c be       	lddpc	lr,8000b508 <get_arg+0x19c>
8000b3e0:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000b3e4:	50 7c       	stdsp	sp[0x1c],r12
8000b3e6:	40 0c       	lddsp	r12,sp[0x0]
8000b3e8:	58 7c       	cp.w	r12,7
8000b3ea:	e0 8b 00 fa 	brhi	8000b5de <get_arg+0x272>
8000b3ee:	4c 8e       	lddpc	lr,8000b50c <get_arg+0x1a0>
8000b3f0:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000b3f4:	36 8b       	mov	r11,104
8000b3f6:	f6 0a 18 00 	cp.b	r10,r11
8000b3fa:	e0 80 00 f2 	breq	8000b5de <get_arg+0x272>
8000b3fe:	37 1b       	mov	r11,113
8000b400:	f6 0a 18 00 	cp.b	r10,r11
8000b404:	c0 70       	breq	8000b412 <get_arg+0xa6>
8000b406:	34 cb       	mov	r11,76
8000b408:	f6 0a 18 00 	cp.b	r10,r11
8000b40c:	c0 51       	brne	8000b416 <get_arg+0xaa>
8000b40e:	a3 b4       	sbr	r4,0x3
8000b410:	ce 78       	rjmp	8000b5de <get_arg+0x272>
8000b412:	a5 b4       	sbr	r4,0x5
8000b414:	ce 58       	rjmp	8000b5de <get_arg+0x272>
8000b416:	08 9a       	mov	r10,r4
8000b418:	0e 9b       	mov	r11,r7
8000b41a:	a5 aa       	sbr	r10,0x4
8000b41c:	17 3c       	ld.ub	r12,r11++
8000b41e:	a5 b4       	sbr	r4,0x5
8000b420:	36 ce       	mov	lr,108
8000b422:	fc 0c 18 00 	cp.b	r12,lr
8000b426:	e0 80 00 dd 	breq	8000b5e0 <get_arg+0x274>
8000b42a:	14 94       	mov	r4,r10
8000b42c:	cd 98       	rjmp	8000b5de <get_arg+0x272>
8000b42e:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000b432:	36 7c       	mov	r12,103
8000b434:	f8 0a 18 00 	cp.b	r10,r12
8000b438:	e0 8b 00 27 	brhi	8000b486 <get_arg+0x11a>
8000b43c:	36 5b       	mov	r11,101
8000b43e:	f6 0a 18 00 	cp.b	r10,r11
8000b442:	c4 82       	brcc	8000b4d2 <get_arg+0x166>
8000b444:	34 fb       	mov	r11,79
8000b446:	f6 0a 18 00 	cp.b	r10,r11
8000b44a:	c4 80       	breq	8000b4da <get_arg+0x16e>
8000b44c:	e0 8b 00 0c 	brhi	8000b464 <get_arg+0xf8>
8000b450:	34 5b       	mov	r11,69
8000b452:	f6 0a 18 00 	cp.b	r10,r11
8000b456:	c3 e0       	breq	8000b4d2 <get_arg+0x166>
8000b458:	34 7b       	mov	r11,71
8000b45a:	f6 0a 18 00 	cp.b	r10,r11
8000b45e:	c3 a0       	breq	8000b4d2 <get_arg+0x166>
8000b460:	34 4b       	mov	r11,68
8000b462:	c0 88       	rjmp	8000b472 <get_arg+0x106>
8000b464:	35 8b       	mov	r11,88
8000b466:	f6 0a 18 00 	cp.b	r10,r11
8000b46a:	c2 c0       	breq	8000b4c2 <get_arg+0x156>
8000b46c:	e0 8b 00 07 	brhi	8000b47a <get_arg+0x10e>
8000b470:	35 5b       	mov	r11,85
8000b472:	f6 0a 18 00 	cp.b	r10,r11
8000b476:	c3 51       	brne	8000b4e0 <get_arg+0x174>
8000b478:	c3 18       	rjmp	8000b4da <get_arg+0x16e>
8000b47a:	36 3b       	mov	r11,99
8000b47c:	f6 0a 18 00 	cp.b	r10,r11
8000b480:	c2 f0       	breq	8000b4de <get_arg+0x172>
8000b482:	36 4b       	mov	r11,100
8000b484:	c0 e8       	rjmp	8000b4a0 <get_arg+0x134>
8000b486:	37 0b       	mov	r11,112
8000b488:	f6 0a 18 00 	cp.b	r10,r11
8000b48c:	c2 50       	breq	8000b4d6 <get_arg+0x16a>
8000b48e:	e0 8b 00 0d 	brhi	8000b4a8 <get_arg+0x13c>
8000b492:	36 eb       	mov	r11,110
8000b494:	f6 0a 18 00 	cp.b	r10,r11
8000b498:	c1 f0       	breq	8000b4d6 <get_arg+0x16a>
8000b49a:	e0 8b 00 14 	brhi	8000b4c2 <get_arg+0x156>
8000b49e:	36 9b       	mov	r11,105
8000b4a0:	f6 0a 18 00 	cp.b	r10,r11
8000b4a4:	c1 e1       	brne	8000b4e0 <get_arg+0x174>
8000b4a6:	c0 e8       	rjmp	8000b4c2 <get_arg+0x156>
8000b4a8:	37 5b       	mov	r11,117
8000b4aa:	f6 0a 18 00 	cp.b	r10,r11
8000b4ae:	c0 a0       	breq	8000b4c2 <get_arg+0x156>
8000b4b0:	37 8b       	mov	r11,120
8000b4b2:	f6 0a 18 00 	cp.b	r10,r11
8000b4b6:	c0 60       	breq	8000b4c2 <get_arg+0x156>
8000b4b8:	37 3b       	mov	r11,115
8000b4ba:	f6 0a 18 00 	cp.b	r10,r11
8000b4be:	c1 11       	brne	8000b4e0 <get_arg+0x174>
8000b4c0:	c0 b8       	rjmp	8000b4d6 <get_arg+0x16a>
8000b4c2:	ed b4 00 04 	bld	r4,0x4
8000b4c6:	c0 a0       	breq	8000b4da <get_arg+0x16e>
8000b4c8:	ed b4 00 05 	bld	r4,0x5
8000b4cc:	c0 91       	brne	8000b4de <get_arg+0x172>
8000b4ce:	30 20       	mov	r0,2
8000b4d0:	c0 88       	rjmp	8000b4e0 <get_arg+0x174>
8000b4d2:	30 40       	mov	r0,4
8000b4d4:	c0 68       	rjmp	8000b4e0 <get_arg+0x174>
8000b4d6:	30 30       	mov	r0,3
8000b4d8:	c0 48       	rjmp	8000b4e0 <get_arg+0x174>
8000b4da:	30 10       	mov	r0,1
8000b4dc:	c0 28       	rjmp	8000b4e0 <get_arg+0x174>
8000b4de:	30 00       	mov	r0,0
8000b4e0:	40 3b       	lddsp	r11,sp[0xc]
8000b4e2:	5b fb       	cp.w	r11,-1
8000b4e4:	c0 40       	breq	8000b4ec <get_arg+0x180>
8000b4e6:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000b4ea:	c7 a8       	rjmp	8000b5de <get_arg+0x272>
8000b4ec:	58 60       	cp.w	r0,6
8000b4ee:	e0 8b 00 78 	brhi	8000b5de <get_arg+0x272>
8000b4f2:	6c 0a       	ld.w	r10,r6[0x0]
8000b4f4:	ea cc ff ff 	sub	r12,r5,-1
8000b4f8:	48 6e       	lddpc	lr,8000b510 <get_arg+0x1a4>
8000b4fa:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000b4fe:	00 00       	add	r0,r0
8000b500:	80 01       	ld.sh	r1,r0[0x0]
8000b502:	0f 28       	ld.uh	r8,r7++
8000b504:	80 01       	ld.sh	r1,r0[0x0]
8000b506:	0e 60       	and	r0,r7
8000b508:	80 01       	ld.sh	r1,r0[0x0]
8000b50a:	0d f4       	ld.ub	r4,r6[0x7]
8000b50c:	80 01       	ld.sh	r1,r0[0x0]
8000b50e:	0c 54       	eor	r4,r6
8000b510:	80 01       	ld.sh	r1,r0[0x0]
8000b512:	0c 74       	tst	r4,r6
8000b514:	f4 cb ff f8 	sub	r11,r10,-8
8000b518:	8d 0b       	st.w	r6[0x0],r11
8000b51a:	f4 ea 00 00 	ld.d	r10,r10[0]
8000b51e:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000b522:	c0 f8       	rjmp	8000b540 <get_arg+0x1d4>
8000b524:	f4 cb ff fc 	sub	r11,r10,-4
8000b528:	8d 0b       	st.w	r6[0x0],r11
8000b52a:	74 0a       	ld.w	r10,r10[0x0]
8000b52c:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000b530:	c0 88       	rjmp	8000b540 <get_arg+0x1d4>
8000b532:	f4 cb ff f8 	sub	r11,r10,-8
8000b536:	8d 0b       	st.w	r6[0x0],r11
8000b538:	f4 ea 00 00 	ld.d	r10,r10[0]
8000b53c:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000b540:	0e 9b       	mov	r11,r7
8000b542:	18 95       	mov	r5,r12
8000b544:	c4 e8       	rjmp	8000b5e0 <get_arg+0x274>
8000b546:	62 0a       	ld.w	r10,r1[0x0]
8000b548:	5b fa       	cp.w	r10,-1
8000b54a:	c0 b1       	brne	8000b560 <get_arg+0x1f4>
8000b54c:	50 19       	stdsp	sp[0x4],r9
8000b54e:	50 28       	stdsp	sp[0x8],r8
8000b550:	e0 6a 00 80 	mov	r10,128
8000b554:	30 0b       	mov	r11,0
8000b556:	02 9c       	mov	r12,r1
8000b558:	f0 1f 00 4d 	mcall	8000b68c <get_arg+0x320>
8000b55c:	40 28       	lddsp	r8,sp[0x8]
8000b55e:	40 19       	lddsp	r9,sp[0x4]
8000b560:	e4 cc 00 01 	sub	r12,r2,1
8000b564:	0e 9b       	mov	r11,r7
8000b566:	50 3c       	stdsp	sp[0xc],r12
8000b568:	f2 0c 0c 49 	max	r9,r9,r12
8000b56c:	c3 a8       	rjmp	8000b5e0 <get_arg+0x274>
8000b56e:	62 0a       	ld.w	r10,r1[0x0]
8000b570:	5b fa       	cp.w	r10,-1
8000b572:	c0 b1       	brne	8000b588 <get_arg+0x21c>
8000b574:	50 19       	stdsp	sp[0x4],r9
8000b576:	50 28       	stdsp	sp[0x8],r8
8000b578:	e0 6a 00 80 	mov	r10,128
8000b57c:	30 0b       	mov	r11,0
8000b57e:	02 9c       	mov	r12,r1
8000b580:	f0 1f 00 43 	mcall	8000b68c <get_arg+0x320>
8000b584:	40 28       	lddsp	r8,sp[0x8]
8000b586:	40 19       	lddsp	r9,sp[0x4]
8000b588:	20 12       	sub	r2,1
8000b58a:	30 0a       	mov	r10,0
8000b58c:	0e 9b       	mov	r11,r7
8000b58e:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000b592:	f2 02 0c 49 	max	r9,r9,r2
8000b596:	c2 58       	rjmp	8000b5e0 <get_arg+0x274>
8000b598:	16 97       	mov	r7,r11
8000b59a:	6c 0a       	ld.w	r10,r6[0x0]
8000b59c:	f4 cb ff fc 	sub	r11,r10,-4
8000b5a0:	8d 0b       	st.w	r6[0x0],r11
8000b5a2:	74 0a       	ld.w	r10,r10[0x0]
8000b5a4:	0e 9b       	mov	r11,r7
8000b5a6:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000b5aa:	2f f5       	sub	r5,-1
8000b5ac:	c1 a8       	rjmp	8000b5e0 <get_arg+0x274>
8000b5ae:	f4 c2 00 30 	sub	r2,r10,48
8000b5b2:	c0 68       	rjmp	8000b5be <get_arg+0x252>
8000b5b4:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000b5b8:	2f f7       	sub	r7,-1
8000b5ba:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000b5be:	0f 8a       	ld.ub	r10,r7[0x0]
8000b5c0:	58 0a       	cp.w	r10,0
8000b5c2:	c0 e0       	breq	8000b5de <get_arg+0x272>
8000b5c4:	23 0a       	sub	r10,48
8000b5c6:	58 9a       	cp.w	r10,9
8000b5c8:	fe 98 ff f6 	brls	8000b5b4 <get_arg+0x248>
8000b5cc:	c0 98       	rjmp	8000b5de <get_arg+0x272>
8000b5ce:	2f f7       	sub	r7,-1
8000b5d0:	0f 8a       	ld.ub	r10,r7[0x0]
8000b5d2:	58 0a       	cp.w	r10,0
8000b5d4:	c0 50       	breq	8000b5de <get_arg+0x272>
8000b5d6:	23 0a       	sub	r10,48
8000b5d8:	58 9a       	cp.w	r10,9
8000b5da:	fe 98 ff fa 	brls	8000b5ce <get_arg+0x262>
8000b5de:	0e 9b       	mov	r11,r7
8000b5e0:	40 7c       	lddsp	r12,sp[0x1c]
8000b5e2:	30 ba       	mov	r10,11
8000b5e4:	f4 0c 18 00 	cp.b	r12,r10
8000b5e8:	fe 91 fe ec 	brne	8000b3c0 <get_arg+0x54>
8000b5ec:	40 42       	lddsp	r2,sp[0x10]
8000b5ee:	17 8c       	ld.ub	r12,r11[0x0]
8000b5f0:	0a 32       	cp.w	r2,r5
8000b5f2:	5f 4a       	srge	r10
8000b5f4:	f0 0c 18 00 	cp.b	r12,r8
8000b5f8:	5f 1c       	srne	r12
8000b5fa:	f9 ea 00 0a 	and	r10,r12,r10
8000b5fe:	f0 0a 18 00 	cp.b	r10,r8
8000b602:	fe 91 fe c9 	brne	8000b394 <get_arg+0x28>
8000b606:	30 08       	mov	r8,0
8000b608:	40 4e       	lddsp	lr,sp[0x10]
8000b60a:	17 8a       	ld.ub	r10,r11[0x0]
8000b60c:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000b610:	f0 0a 18 00 	cp.b	r10,r8
8000b614:	fc 09 17 10 	movne	r9,lr
8000b618:	e6 05 00 38 	add	r8,r3,r5<<0x3
8000b61c:	06 9e       	mov	lr,r3
8000b61e:	c2 a8       	rjmp	8000b672 <get_arg+0x306>
8000b620:	62 0a       	ld.w	r10,r1[0x0]
8000b622:	58 3a       	cp.w	r10,3
8000b624:	c1 e0       	breq	8000b660 <get_arg+0x2f4>
8000b626:	e0 89 00 07 	brgt	8000b634 <get_arg+0x2c8>
8000b62a:	58 1a       	cp.w	r10,1
8000b62c:	c1 a0       	breq	8000b660 <get_arg+0x2f4>
8000b62e:	58 2a       	cp.w	r10,2
8000b630:	c1 81       	brne	8000b660 <get_arg+0x2f4>
8000b632:	c0 58       	rjmp	8000b63c <get_arg+0x2d0>
8000b634:	58 5a       	cp.w	r10,5
8000b636:	c0 c0       	breq	8000b64e <get_arg+0x2e2>
8000b638:	c0 b5       	brlt	8000b64e <get_arg+0x2e2>
8000b63a:	c1 38       	rjmp	8000b660 <get_arg+0x2f4>
8000b63c:	6c 0a       	ld.w	r10,r6[0x0]
8000b63e:	f4 cc ff f8 	sub	r12,r10,-8
8000b642:	8d 0c       	st.w	r6[0x0],r12
8000b644:	f4 e2 00 00 	ld.d	r2,r10[0]
8000b648:	f0 e3 00 00 	st.d	r8[0],r2
8000b64c:	c1 08       	rjmp	8000b66c <get_arg+0x300>
8000b64e:	6c 0a       	ld.w	r10,r6[0x0]
8000b650:	f4 cc ff f8 	sub	r12,r10,-8
8000b654:	8d 0c       	st.w	r6[0x0],r12
8000b656:	f4 e2 00 00 	ld.d	r2,r10[0]
8000b65a:	f0 e3 00 00 	st.d	r8[0],r2
8000b65e:	c0 78       	rjmp	8000b66c <get_arg+0x300>
8000b660:	6c 0a       	ld.w	r10,r6[0x0]
8000b662:	f4 cc ff fc 	sub	r12,r10,-4
8000b666:	8d 0c       	st.w	r6[0x0],r12
8000b668:	74 0a       	ld.w	r10,r10[0x0]
8000b66a:	91 0a       	st.w	r8[0x0],r10
8000b66c:	2f f5       	sub	r5,-1
8000b66e:	2f 88       	sub	r8,-8
8000b670:	2f c1       	sub	r1,-4
8000b672:	12 35       	cp.w	r5,r9
8000b674:	fe 9a ff d6 	brle	8000b620 <get_arg+0x2b4>
8000b678:	1c 93       	mov	r3,lr
8000b67a:	40 52       	lddsp	r2,sp[0x14]
8000b67c:	40 6e       	lddsp	lr,sp[0x18]
8000b67e:	85 05       	st.w	r2[0x0],r5
8000b680:	9d 0b       	st.w	lr[0x0],r11
8000b682:	40 4b       	lddsp	r11,sp[0x10]
8000b684:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000b688:	2f 8d       	sub	sp,-32
8000b68a:	d8 32       	popm	r0-r7,pc
8000b68c:	80 00       	ld.sh	r0,r0[0x0]
8000b68e:	b2 6e       	st.h	r9[0xc],lr

8000b690 <__sprint_r>:
8000b690:	d4 21       	pushm	r4-r7,lr
8000b692:	14 97       	mov	r7,r10
8000b694:	74 28       	ld.w	r8,r10[0x8]
8000b696:	58 08       	cp.w	r8,0
8000b698:	c0 41       	brne	8000b6a0 <__sprint_r+0x10>
8000b69a:	95 18       	st.w	r10[0x4],r8
8000b69c:	10 9c       	mov	r12,r8
8000b69e:	d8 22       	popm	r4-r7,pc
8000b6a0:	f0 1f 00 03 	mcall	8000b6ac <__sprint_r+0x1c>
8000b6a4:	30 08       	mov	r8,0
8000b6a6:	8f 18       	st.w	r7[0x4],r8
8000b6a8:	8f 28       	st.w	r7[0x8],r8
8000b6aa:	d8 22       	popm	r4-r7,pc
8000b6ac:	80 00       	ld.sh	r0,r0[0x0]
8000b6ae:	e9 bc       	*unknown*

8000b6b0 <_vfprintf_r>:
8000b6b0:	d4 31       	pushm	r0-r7,lr
8000b6b2:	fa cd 06 bc 	sub	sp,sp,1724
8000b6b6:	51 09       	stdsp	sp[0x40],r9
8000b6b8:	16 91       	mov	r1,r11
8000b6ba:	14 97       	mov	r7,r10
8000b6bc:	18 95       	mov	r5,r12
8000b6be:	f0 1f 00 56 	mcall	8000b814 <_vfprintf_r+0x164>
8000b6c2:	78 0c       	ld.w	r12,r12[0x0]
8000b6c4:	50 cc       	stdsp	sp[0x30],r12
8000b6c6:	58 05       	cp.w	r5,0
8000b6c8:	c0 70       	breq	8000b6d6 <_vfprintf_r+0x26>
8000b6ca:	6a 68       	ld.w	r8,r5[0x18]
8000b6cc:	58 08       	cp.w	r8,0
8000b6ce:	c0 41       	brne	8000b6d6 <_vfprintf_r+0x26>
8000b6d0:	0a 9c       	mov	r12,r5
8000b6d2:	f0 1f 00 52 	mcall	8000b818 <_vfprintf_r+0x168>
8000b6d6:	4d 28       	lddpc	r8,8000b81c <_vfprintf_r+0x16c>
8000b6d8:	10 31       	cp.w	r1,r8
8000b6da:	c0 31       	brne	8000b6e0 <_vfprintf_r+0x30>
8000b6dc:	6a 01       	ld.w	r1,r5[0x0]
8000b6de:	c0 a8       	rjmp	8000b6f2 <_vfprintf_r+0x42>
8000b6e0:	4d 08       	lddpc	r8,8000b820 <_vfprintf_r+0x170>
8000b6e2:	10 31       	cp.w	r1,r8
8000b6e4:	c0 31       	brne	8000b6ea <_vfprintf_r+0x3a>
8000b6e6:	6a 11       	ld.w	r1,r5[0x4]
8000b6e8:	c0 58       	rjmp	8000b6f2 <_vfprintf_r+0x42>
8000b6ea:	4c f8       	lddpc	r8,8000b824 <_vfprintf_r+0x174>
8000b6ec:	10 31       	cp.w	r1,r8
8000b6ee:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000b6f2:	82 68       	ld.sh	r8,r1[0xc]
8000b6f4:	ed b8 00 03 	bld	r8,0x3
8000b6f8:	c0 41       	brne	8000b700 <_vfprintf_r+0x50>
8000b6fa:	62 48       	ld.w	r8,r1[0x10]
8000b6fc:	58 08       	cp.w	r8,0
8000b6fe:	c0 71       	brne	8000b70c <_vfprintf_r+0x5c>
8000b700:	02 9b       	mov	r11,r1
8000b702:	0a 9c       	mov	r12,r5
8000b704:	f0 1f 00 49 	mcall	8000b828 <_vfprintf_r+0x178>
8000b708:	e0 81 0f 99 	brne	8000d63a <_vfprintf_r+0x1f8a>
8000b70c:	82 68       	ld.sh	r8,r1[0xc]
8000b70e:	10 99       	mov	r9,r8
8000b710:	e2 19 00 1a 	andl	r9,0x1a,COH
8000b714:	58 a9       	cp.w	r9,10
8000b716:	c3 d1       	brne	8000b790 <_vfprintf_r+0xe0>
8000b718:	82 79       	ld.sh	r9,r1[0xe]
8000b71a:	30 0a       	mov	r10,0
8000b71c:	f4 09 19 00 	cp.h	r9,r10
8000b720:	c3 85       	brlt	8000b790 <_vfprintf_r+0xe0>
8000b722:	a1 d8       	cbr	r8,0x1
8000b724:	fb 58 05 d0 	st.h	sp[1488],r8
8000b728:	62 88       	ld.w	r8,r1[0x20]
8000b72a:	fb 48 05 e4 	st.w	sp[1508],r8
8000b72e:	62 a8       	ld.w	r8,r1[0x28]
8000b730:	fb 48 05 ec 	st.w	sp[1516],r8
8000b734:	fa c8 ff bc 	sub	r8,sp,-68
8000b738:	fb 48 05 d4 	st.w	sp[1492],r8
8000b73c:	fb 48 05 c4 	st.w	sp[1476],r8
8000b740:	e0 68 04 00 	mov	r8,1024
8000b744:	fb 48 05 d8 	st.w	sp[1496],r8
8000b748:	fb 48 05 cc 	st.w	sp[1484],r8
8000b74c:	30 08       	mov	r8,0
8000b74e:	fb 59 05 d2 	st.h	sp[1490],r9
8000b752:	0e 9a       	mov	r10,r7
8000b754:	41 09       	lddsp	r9,sp[0x40]
8000b756:	fa c7 fa 3c 	sub	r7,sp,-1476
8000b75a:	fb 48 05 dc 	st.w	sp[1500],r8
8000b75e:	0a 9c       	mov	r12,r5
8000b760:	0e 9b       	mov	r11,r7
8000b762:	f0 1f 00 33 	mcall	8000b82c <_vfprintf_r+0x17c>
8000b766:	50 bc       	stdsp	sp[0x2c],r12
8000b768:	c0 95       	brlt	8000b77a <_vfprintf_r+0xca>
8000b76a:	0e 9b       	mov	r11,r7
8000b76c:	0a 9c       	mov	r12,r5
8000b76e:	f0 1f 00 31 	mcall	8000b830 <_vfprintf_r+0x180>
8000b772:	40 be       	lddsp	lr,sp[0x2c]
8000b774:	f9 be 01 ff 	movne	lr,-1
8000b778:	50 be       	stdsp	sp[0x2c],lr
8000b77a:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000b77e:	ed b8 00 06 	bld	r8,0x6
8000b782:	e0 81 0f 5e 	brne	8000d63e <_vfprintf_r+0x1f8e>
8000b786:	82 68       	ld.sh	r8,r1[0xc]
8000b788:	a7 a8       	sbr	r8,0x6
8000b78a:	a2 68       	st.h	r1[0xc],r8
8000b78c:	e0 8f 0f 59 	bral	8000d63e <_vfprintf_r+0x1f8e>
8000b790:	30 08       	mov	r8,0
8000b792:	fb 48 06 b4 	st.w	sp[1716],r8
8000b796:	fb 48 06 90 	st.w	sp[1680],r8
8000b79a:	fb 48 06 8c 	st.w	sp[1676],r8
8000b79e:	fb 48 06 b0 	st.w	sp[1712],r8
8000b7a2:	30 08       	mov	r8,0
8000b7a4:	30 09       	mov	r9,0
8000b7a6:	50 a7       	stdsp	sp[0x28],r7
8000b7a8:	50 78       	stdsp	sp[0x1c],r8
8000b7aa:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b7ae:	3f f8       	mov	r8,-1
8000b7b0:	50 59       	stdsp	sp[0x14],r9
8000b7b2:	fb 43 06 88 	st.w	sp[1672],r3
8000b7b6:	fb 48 05 44 	st.w	sp[1348],r8
8000b7ba:	12 9c       	mov	r12,r9
8000b7bc:	50 69       	stdsp	sp[0x18],r9
8000b7be:	50 d9       	stdsp	sp[0x34],r9
8000b7c0:	50 e9       	stdsp	sp[0x38],r9
8000b7c2:	50 b9       	stdsp	sp[0x2c],r9
8000b7c4:	12 97       	mov	r7,r9
8000b7c6:	0a 94       	mov	r4,r5
8000b7c8:	40 a2       	lddsp	r2,sp[0x28]
8000b7ca:	32 5a       	mov	r10,37
8000b7cc:	30 08       	mov	r8,0
8000b7ce:	c0 28       	rjmp	8000b7d2 <_vfprintf_r+0x122>
8000b7d0:	2f f2       	sub	r2,-1
8000b7d2:	05 89       	ld.ub	r9,r2[0x0]
8000b7d4:	f0 09 18 00 	cp.b	r9,r8
8000b7d8:	5f 1b       	srne	r11
8000b7da:	f4 09 18 00 	cp.b	r9,r10
8000b7de:	5f 19       	srne	r9
8000b7e0:	f3 eb 00 0b 	and	r11,r9,r11
8000b7e4:	f0 0b 18 00 	cp.b	r11,r8
8000b7e8:	cf 41       	brne	8000b7d0 <_vfprintf_r+0x120>
8000b7ea:	40 ab       	lddsp	r11,sp[0x28]
8000b7ec:	e4 0b 01 06 	sub	r6,r2,r11
8000b7f0:	c2 f0       	breq	8000b84e <_vfprintf_r+0x19e>
8000b7f2:	fa f8 06 90 	ld.w	r8,sp[1680]
8000b7f6:	0c 08       	add	r8,r6
8000b7f8:	87 0b       	st.w	r3[0x0],r11
8000b7fa:	fb 48 06 90 	st.w	sp[1680],r8
8000b7fe:	87 16       	st.w	r3[0x4],r6
8000b800:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000b804:	2f f8       	sub	r8,-1
8000b806:	fb 48 06 8c 	st.w	sp[1676],r8
8000b80a:	58 78       	cp.w	r8,7
8000b80c:	e0 89 00 14 	brgt	8000b834 <_vfprintf_r+0x184>
8000b810:	2f 83       	sub	r3,-8
8000b812:	c1 b8       	rjmp	8000b848 <_vfprintf_r+0x198>
8000b814:	80 00       	ld.sh	r0,r0[0x0]
8000b816:	ec d4 80 00 	satsub.w	r4,r6,-32768
8000b81a:	e6 c4 80 01 	sub	r4,r3,-32767
8000b81e:	10 38       	cp.w	r8,r8
8000b820:	80 01       	ld.sh	r1,r0[0x0]
8000b822:	10 58       	eor	r8,r8
8000b824:	80 01       	ld.sh	r1,r0[0x0]
8000b826:	10 78       	tst	r8,r8
8000b828:	80 00       	ld.sh	r0,r0[0x0]
8000b82a:	d6 4c       	*unknown*
8000b82c:	80 00       	ld.sh	r0,r0[0x0]
8000b82e:	b6 b0       	st.b	r11[0x3],r0
8000b830:	80 00       	ld.sh	r0,r0[0x0]
8000b832:	e4 e8 fa ca 	ld.d	r8,r2[-1334]
8000b836:	f9 78 02 9b 	stcond	r12[667],r8
8000b83a:	08 9c       	mov	r12,r4
8000b83c:	f0 1f 00 71 	mcall	8000ba00 <_vfprintf_r+0x350>
8000b840:	e0 81 0e f9 	brne	8000d632 <_vfprintf_r+0x1f82>
8000b844:	fa c3 f9 e0 	sub	r3,sp,-1568
8000b848:	40 ba       	lddsp	r10,sp[0x2c]
8000b84a:	0c 0a       	add	r10,r6
8000b84c:	50 ba       	stdsp	sp[0x2c],r10
8000b84e:	05 89       	ld.ub	r9,r2[0x0]
8000b850:	30 08       	mov	r8,0
8000b852:	f0 09 18 00 	cp.b	r9,r8
8000b856:	e0 80 0e dd 	breq	8000d610 <_vfprintf_r+0x1f60>
8000b85a:	30 09       	mov	r9,0
8000b85c:	fb 68 06 bb 	st.b	sp[1723],r8
8000b860:	0e 96       	mov	r6,r7
8000b862:	e4 c8 ff ff 	sub	r8,r2,-1
8000b866:	3f fe       	mov	lr,-1
8000b868:	50 93       	stdsp	sp[0x24],r3
8000b86a:	50 41       	stdsp	sp[0x10],r1
8000b86c:	0e 93       	mov	r3,r7
8000b86e:	04 91       	mov	r1,r2
8000b870:	50 89       	stdsp	sp[0x20],r9
8000b872:	50 a8       	stdsp	sp[0x28],r8
8000b874:	50 2e       	stdsp	sp[0x8],lr
8000b876:	50 39       	stdsp	sp[0xc],r9
8000b878:	12 95       	mov	r5,r9
8000b87a:	12 90       	mov	r0,r9
8000b87c:	10 97       	mov	r7,r8
8000b87e:	08 92       	mov	r2,r4
8000b880:	c0 78       	rjmp	8000b88e <_vfprintf_r+0x1de>
8000b882:	3f fc       	mov	r12,-1
8000b884:	08 97       	mov	r7,r4
8000b886:	50 2c       	stdsp	sp[0x8],r12
8000b888:	c0 38       	rjmp	8000b88e <_vfprintf_r+0x1de>
8000b88a:	30 0b       	mov	r11,0
8000b88c:	50 3b       	stdsp	sp[0xc],r11
8000b88e:	0f 38       	ld.ub	r8,r7++
8000b890:	c0 28       	rjmp	8000b894 <_vfprintf_r+0x1e4>
8000b892:	12 90       	mov	r0,r9
8000b894:	f0 c9 00 20 	sub	r9,r8,32
8000b898:	e0 49 00 58 	cp.w	r9,88
8000b89c:	e0 8b 0a 4d 	brhi	8000cd36 <_vfprintf_r+0x1686>
8000b8a0:	4d 9a       	lddpc	r10,8000ba04 <_vfprintf_r+0x354>
8000b8a2:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000b8a6:	50 a7       	stdsp	sp[0x28],r7
8000b8a8:	50 80       	stdsp	sp[0x20],r0
8000b8aa:	0c 97       	mov	r7,r6
8000b8ac:	04 94       	mov	r4,r2
8000b8ae:	06 96       	mov	r6,r3
8000b8b0:	02 92       	mov	r2,r1
8000b8b2:	4d 69       	lddpc	r9,8000ba08 <_vfprintf_r+0x358>
8000b8b4:	40 93       	lddsp	r3,sp[0x24]
8000b8b6:	10 90       	mov	r0,r8
8000b8b8:	40 41       	lddsp	r1,sp[0x10]
8000b8ba:	50 d9       	stdsp	sp[0x34],r9
8000b8bc:	e0 8f 08 aa 	bral	8000ca10 <_vfprintf_r+0x1360>
8000b8c0:	30 08       	mov	r8,0
8000b8c2:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000b8c6:	f0 09 18 00 	cp.b	r9,r8
8000b8ca:	ce 21       	brne	8000b88e <_vfprintf_r+0x1de>
8000b8cc:	32 08       	mov	r8,32
8000b8ce:	c6 e8       	rjmp	8000b9aa <_vfprintf_r+0x2fa>
8000b8d0:	a1 a5       	sbr	r5,0x0
8000b8d2:	cd eb       	rjmp	8000b88e <_vfprintf_r+0x1de>
8000b8d4:	0f 89       	ld.ub	r9,r7[0x0]
8000b8d6:	f2 c8 00 30 	sub	r8,r9,48
8000b8da:	58 98       	cp.w	r8,9
8000b8dc:	e0 8b 00 1d 	brhi	8000b916 <_vfprintf_r+0x266>
8000b8e0:	ee c8 ff ff 	sub	r8,r7,-1
8000b8e4:	30 0b       	mov	r11,0
8000b8e6:	23 09       	sub	r9,48
8000b8e8:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000b8ec:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000b8f0:	11 39       	ld.ub	r9,r8++
8000b8f2:	f2 ca 00 30 	sub	r10,r9,48
8000b8f6:	58 9a       	cp.w	r10,9
8000b8f8:	fe 98 ff f7 	brls	8000b8e6 <_vfprintf_r+0x236>
8000b8fc:	e0 49 00 24 	cp.w	r9,36
8000b900:	cc 51       	brne	8000b88a <_vfprintf_r+0x1da>
8000b902:	e0 4b 00 20 	cp.w	r11,32
8000b906:	e0 89 0e 95 	brgt	8000d630 <_vfprintf_r+0x1f80>
8000b90a:	20 1b       	sub	r11,1
8000b90c:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000b910:	12 3b       	cp.w	r11,r9
8000b912:	c0 95       	brlt	8000b924 <_vfprintf_r+0x274>
8000b914:	c1 08       	rjmp	8000b934 <_vfprintf_r+0x284>
8000b916:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000b91a:	ec ca ff ff 	sub	r10,r6,-1
8000b91e:	12 36       	cp.w	r6,r9
8000b920:	c1 f5       	brlt	8000b95e <_vfprintf_r+0x2ae>
8000b922:	c2 68       	rjmp	8000b96e <_vfprintf_r+0x2be>
8000b924:	fa ce f9 44 	sub	lr,sp,-1724
8000b928:	10 97       	mov	r7,r8
8000b92a:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
8000b92e:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000b932:	c3 58       	rjmp	8000b99c <_vfprintf_r+0x2ec>
8000b934:	10 97       	mov	r7,r8
8000b936:	fa c8 f9 50 	sub	r8,sp,-1712
8000b93a:	1a d8       	st.w	--sp,r8
8000b93c:	fa c8 fa b8 	sub	r8,sp,-1352
8000b940:	1a d8       	st.w	--sp,r8
8000b942:	fa c8 fb b4 	sub	r8,sp,-1100
8000b946:	02 9a       	mov	r10,r1
8000b948:	1a d8       	st.w	--sp,r8
8000b94a:	04 9c       	mov	r12,r2
8000b94c:	fa c8 f9 40 	sub	r8,sp,-1728
8000b950:	fa c9 ff b4 	sub	r9,sp,-76
8000b954:	f0 1f 00 2e 	mcall	8000ba0c <_vfprintf_r+0x35c>
8000b958:	2f dd       	sub	sp,-12
8000b95a:	78 00       	ld.w	r0,r12[0x0]
8000b95c:	c2 08       	rjmp	8000b99c <_vfprintf_r+0x2ec>
8000b95e:	fa cc f9 44 	sub	r12,sp,-1724
8000b962:	14 96       	mov	r6,r10
8000b964:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000b968:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000b96c:	c1 88       	rjmp	8000b99c <_vfprintf_r+0x2ec>
8000b96e:	41 08       	lddsp	r8,sp[0x40]
8000b970:	59 f9       	cp.w	r9,31
8000b972:	e0 89 00 11 	brgt	8000b994 <_vfprintf_r+0x2e4>
8000b976:	f0 cb ff fc 	sub	r11,r8,-4
8000b97a:	51 0b       	stdsp	sp[0x40],r11
8000b97c:	70 00       	ld.w	r0,r8[0x0]
8000b97e:	fa cb f9 44 	sub	r11,sp,-1724
8000b982:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000b986:	f1 40 fd 88 	st.w	r8[-632],r0
8000b98a:	2f f9       	sub	r9,-1
8000b98c:	14 96       	mov	r6,r10
8000b98e:	fb 49 06 b4 	st.w	sp[1716],r9
8000b992:	c0 58       	rjmp	8000b99c <_vfprintf_r+0x2ec>
8000b994:	70 00       	ld.w	r0,r8[0x0]
8000b996:	14 96       	mov	r6,r10
8000b998:	2f c8       	sub	r8,-4
8000b99a:	51 08       	stdsp	sp[0x40],r8
8000b99c:	58 00       	cp.w	r0,0
8000b99e:	fe 94 ff 78 	brge	8000b88e <_vfprintf_r+0x1de>
8000b9a2:	5c 30       	neg	r0
8000b9a4:	a3 a5       	sbr	r5,0x2
8000b9a6:	c7 4b       	rjmp	8000b88e <_vfprintf_r+0x1de>
8000b9a8:	32 b8       	mov	r8,43
8000b9aa:	fb 68 06 bb 	st.b	sp[1723],r8
8000b9ae:	c7 0b       	rjmp	8000b88e <_vfprintf_r+0x1de>
8000b9b0:	0f 38       	ld.ub	r8,r7++
8000b9b2:	e0 48 00 2a 	cp.w	r8,42
8000b9b6:	c0 30       	breq	8000b9bc <_vfprintf_r+0x30c>
8000b9b8:	30 09       	mov	r9,0
8000b9ba:	c8 08       	rjmp	8000baba <_vfprintf_r+0x40a>
8000b9bc:	0f 88       	ld.ub	r8,r7[0x0]
8000b9be:	f0 c9 00 30 	sub	r9,r8,48
8000b9c2:	58 99       	cp.w	r9,9
8000b9c4:	e0 8b 00 26 	brhi	8000ba10 <_vfprintf_r+0x360>
8000b9c8:	ee c4 ff ff 	sub	r4,r7,-1
8000b9cc:	30 0b       	mov	r11,0
8000b9ce:	23 08       	sub	r8,48
8000b9d0:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000b9d4:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000b9d8:	09 38       	ld.ub	r8,r4++
8000b9da:	f0 c9 00 30 	sub	r9,r8,48
8000b9de:	58 99       	cp.w	r9,9
8000b9e0:	fe 98 ff f7 	brls	8000b9ce <_vfprintf_r+0x31e>
8000b9e4:	e0 48 00 24 	cp.w	r8,36
8000b9e8:	fe 91 ff 51 	brne	8000b88a <_vfprintf_r+0x1da>
8000b9ec:	e0 4b 00 20 	cp.w	r11,32
8000b9f0:	e0 89 0e 20 	brgt	8000d630 <_vfprintf_r+0x1f80>
8000b9f4:	20 1b       	sub	r11,1
8000b9f6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000b9fa:	10 3b       	cp.w	r11,r8
8000b9fc:	c1 15       	brlt	8000ba1e <_vfprintf_r+0x36e>
8000b9fe:	c1 88       	rjmp	8000ba2e <_vfprintf_r+0x37e>
8000ba00:	80 00       	ld.sh	r0,r0[0x0]
8000ba02:	b6 90       	st.b	r11[0x1],r0
8000ba04:	80 01       	ld.sh	r1,r0[0x0]
8000ba06:	0c 90       	mov	r0,r6
8000ba08:	80 01       	ld.sh	r1,r0[0x0]
8000ba0a:	0e cc       	st.b	r7++,r12
8000ba0c:	80 00       	ld.sh	r0,r0[0x0]
8000ba0e:	b3 6c       	lsl	r12,0x12
8000ba10:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000ba14:	ec c9 ff ff 	sub	r9,r6,-1
8000ba18:	14 36       	cp.w	r6,r10
8000ba1a:	c1 f5       	brlt	8000ba58 <_vfprintf_r+0x3a8>
8000ba1c:	c2 88       	rjmp	8000ba6c <_vfprintf_r+0x3bc>
8000ba1e:	fa ca f9 44 	sub	r10,sp,-1724
8000ba22:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000ba26:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000ba2a:	50 2b       	stdsp	sp[0x8],r11
8000ba2c:	c3 c8       	rjmp	8000baa4 <_vfprintf_r+0x3f4>
8000ba2e:	fa c8 f9 50 	sub	r8,sp,-1712
8000ba32:	1a d8       	st.w	--sp,r8
8000ba34:	fa c8 fa b8 	sub	r8,sp,-1352
8000ba38:	1a d8       	st.w	--sp,r8
8000ba3a:	fa c8 fb b4 	sub	r8,sp,-1100
8000ba3e:	02 9a       	mov	r10,r1
8000ba40:	1a d8       	st.w	--sp,r8
8000ba42:	04 9c       	mov	r12,r2
8000ba44:	fa c8 f9 40 	sub	r8,sp,-1728
8000ba48:	fa c9 ff b4 	sub	r9,sp,-76
8000ba4c:	f0 1f 01 9e 	mcall	8000c0c4 <_vfprintf_r+0xa14>
8000ba50:	2f dd       	sub	sp,-12
8000ba52:	78 0c       	ld.w	r12,r12[0x0]
8000ba54:	50 2c       	stdsp	sp[0x8],r12
8000ba56:	c2 78       	rjmp	8000baa4 <_vfprintf_r+0x3f4>
8000ba58:	12 96       	mov	r6,r9
8000ba5a:	0e 94       	mov	r4,r7
8000ba5c:	fa c9 f9 44 	sub	r9,sp,-1724
8000ba60:	f2 03 00 38 	add	r8,r9,r3<<0x3
8000ba64:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000ba68:	50 28       	stdsp	sp[0x8],r8
8000ba6a:	c1 d8       	rjmp	8000baa4 <_vfprintf_r+0x3f4>
8000ba6c:	41 08       	lddsp	r8,sp[0x40]
8000ba6e:	59 fa       	cp.w	r10,31
8000ba70:	e0 89 00 14 	brgt	8000ba98 <_vfprintf_r+0x3e8>
8000ba74:	f0 cb ff fc 	sub	r11,r8,-4
8000ba78:	70 08       	ld.w	r8,r8[0x0]
8000ba7a:	51 0b       	stdsp	sp[0x40],r11
8000ba7c:	50 28       	stdsp	sp[0x8],r8
8000ba7e:	fa c6 f9 44 	sub	r6,sp,-1724
8000ba82:	40 2e       	lddsp	lr,sp[0x8]
8000ba84:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000ba88:	f1 4e fd 88 	st.w	r8[-632],lr
8000ba8c:	2f fa       	sub	r10,-1
8000ba8e:	0e 94       	mov	r4,r7
8000ba90:	fb 4a 06 b4 	st.w	sp[1716],r10
8000ba94:	12 96       	mov	r6,r9
8000ba96:	c0 78       	rjmp	8000baa4 <_vfprintf_r+0x3f4>
8000ba98:	70 0c       	ld.w	r12,r8[0x0]
8000ba9a:	0e 94       	mov	r4,r7
8000ba9c:	2f c8       	sub	r8,-4
8000ba9e:	50 2c       	stdsp	sp[0x8],r12
8000baa0:	12 96       	mov	r6,r9
8000baa2:	51 08       	stdsp	sp[0x40],r8
8000baa4:	40 2b       	lddsp	r11,sp[0x8]
8000baa6:	58 0b       	cp.w	r11,0
8000baa8:	fe 95 fe ed 	brlt	8000b882 <_vfprintf_r+0x1d2>
8000baac:	08 97       	mov	r7,r4
8000baae:	cf 0a       	rjmp	8000b88e <_vfprintf_r+0x1de>
8000bab0:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000bab4:	0f 38       	ld.ub	r8,r7++
8000bab6:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000baba:	f0 ca 00 30 	sub	r10,r8,48
8000babe:	58 9a       	cp.w	r10,9
8000bac0:	fe 98 ff f8 	brls	8000bab0 <_vfprintf_r+0x400>
8000bac4:	3f fa       	mov	r10,-1
8000bac6:	f2 0a 0c 49 	max	r9,r9,r10
8000baca:	50 29       	stdsp	sp[0x8],r9
8000bacc:	ce 4a       	rjmp	8000b894 <_vfprintf_r+0x1e4>
8000bace:	a7 b5       	sbr	r5,0x7
8000bad0:	cd fa       	rjmp	8000b88e <_vfprintf_r+0x1de>
8000bad2:	30 09       	mov	r9,0
8000bad4:	23 08       	sub	r8,48
8000bad6:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000bada:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000bade:	0f 38       	ld.ub	r8,r7++
8000bae0:	f0 ca 00 30 	sub	r10,r8,48
8000bae4:	58 9a       	cp.w	r10,9
8000bae6:	fe 98 ff f7 	brls	8000bad4 <_vfprintf_r+0x424>
8000baea:	e0 48 00 24 	cp.w	r8,36
8000baee:	fe 91 fe d2 	brne	8000b892 <_vfprintf_r+0x1e2>
8000baf2:	e0 49 00 20 	cp.w	r9,32
8000baf6:	e0 89 0d 9d 	brgt	8000d630 <_vfprintf_r+0x1f80>
8000bafa:	f2 c3 00 01 	sub	r3,r9,1
8000bafe:	30 19       	mov	r9,1
8000bb00:	50 39       	stdsp	sp[0xc],r9
8000bb02:	cc 6a       	rjmp	8000b88e <_vfprintf_r+0x1de>
8000bb04:	a3 b5       	sbr	r5,0x3
8000bb06:	cc 4a       	rjmp	8000b88e <_vfprintf_r+0x1de>
8000bb08:	a7 a5       	sbr	r5,0x6
8000bb0a:	cc 2a       	rjmp	8000b88e <_vfprintf_r+0x1de>
8000bb0c:	0a 98       	mov	r8,r5
8000bb0e:	a5 b5       	sbr	r5,0x5
8000bb10:	a5 a8       	sbr	r8,0x4
8000bb12:	0f 89       	ld.ub	r9,r7[0x0]
8000bb14:	36 ce       	mov	lr,108
8000bb16:	fc 09 18 00 	cp.b	r9,lr
8000bb1a:	f7 b7 00 ff 	subeq	r7,-1
8000bb1e:	f0 05 17 10 	movne	r5,r8
8000bb22:	cb 6a       	rjmp	8000b88e <_vfprintf_r+0x1de>
8000bb24:	a5 b5       	sbr	r5,0x5
8000bb26:	cb 4a       	rjmp	8000b88e <_vfprintf_r+0x1de>
8000bb28:	50 a7       	stdsp	sp[0x28],r7
8000bb2a:	50 80       	stdsp	sp[0x20],r0
8000bb2c:	0c 97       	mov	r7,r6
8000bb2e:	10 90       	mov	r0,r8
8000bb30:	06 96       	mov	r6,r3
8000bb32:	04 94       	mov	r4,r2
8000bb34:	40 93       	lddsp	r3,sp[0x24]
8000bb36:	02 92       	mov	r2,r1
8000bb38:	0e 99       	mov	r9,r7
8000bb3a:	40 41       	lddsp	r1,sp[0x10]
8000bb3c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bb40:	40 3c       	lddsp	r12,sp[0xc]
8000bb42:	58 0c       	cp.w	r12,0
8000bb44:	c1 d0       	breq	8000bb7e <_vfprintf_r+0x4ce>
8000bb46:	10 36       	cp.w	r6,r8
8000bb48:	c0 64       	brge	8000bb54 <_vfprintf_r+0x4a4>
8000bb4a:	fa cb f9 44 	sub	r11,sp,-1724
8000bb4e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000bb52:	c1 d8       	rjmp	8000bb8c <_vfprintf_r+0x4dc>
8000bb54:	fa c8 f9 50 	sub	r8,sp,-1712
8000bb58:	1a d8       	st.w	--sp,r8
8000bb5a:	fa c8 fa b8 	sub	r8,sp,-1352
8000bb5e:	1a d8       	st.w	--sp,r8
8000bb60:	fa c8 fb b4 	sub	r8,sp,-1100
8000bb64:	1a d8       	st.w	--sp,r8
8000bb66:	fa c8 f9 40 	sub	r8,sp,-1728
8000bb6a:	fa c9 ff b4 	sub	r9,sp,-76
8000bb6e:	04 9a       	mov	r10,r2
8000bb70:	0c 9b       	mov	r11,r6
8000bb72:	08 9c       	mov	r12,r4
8000bb74:	f0 1f 01 54 	mcall	8000c0c4 <_vfprintf_r+0xa14>
8000bb78:	2f dd       	sub	sp,-12
8000bb7a:	19 b8       	ld.ub	r8,r12[0x3]
8000bb7c:	c2 28       	rjmp	8000bbc0 <_vfprintf_r+0x510>
8000bb7e:	2f f7       	sub	r7,-1
8000bb80:	10 39       	cp.w	r9,r8
8000bb82:	c0 84       	brge	8000bb92 <_vfprintf_r+0x4e2>
8000bb84:	fa ca f9 44 	sub	r10,sp,-1724
8000bb88:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000bb8c:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000bb90:	c1 88       	rjmp	8000bbc0 <_vfprintf_r+0x510>
8000bb92:	41 09       	lddsp	r9,sp[0x40]
8000bb94:	59 f8       	cp.w	r8,31
8000bb96:	e0 89 00 12 	brgt	8000bbba <_vfprintf_r+0x50a>
8000bb9a:	f2 ca ff fc 	sub	r10,r9,-4
8000bb9e:	51 0a       	stdsp	sp[0x40],r10
8000bba0:	72 09       	ld.w	r9,r9[0x0]
8000bba2:	fa c6 f9 44 	sub	r6,sp,-1724
8000bba6:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000bbaa:	2f f8       	sub	r8,-1
8000bbac:	f5 49 fd 88 	st.w	r10[-632],r9
8000bbb0:	fb 48 06 b4 	st.w	sp[1716],r8
8000bbb4:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000bbb8:	c0 48       	rjmp	8000bbc0 <_vfprintf_r+0x510>
8000bbba:	13 b8       	ld.ub	r8,r9[0x3]
8000bbbc:	2f c9       	sub	r9,-4
8000bbbe:	51 09       	stdsp	sp[0x40],r9
8000bbc0:	fb 68 06 60 	st.b	sp[1632],r8
8000bbc4:	30 0e       	mov	lr,0
8000bbc6:	30 08       	mov	r8,0
8000bbc8:	30 12       	mov	r2,1
8000bbca:	fb 68 06 bb 	st.b	sp[1723],r8
8000bbce:	50 2e       	stdsp	sp[0x8],lr
8000bbd0:	e0 8f 08 c5 	bral	8000cd5a <_vfprintf_r+0x16aa>
8000bbd4:	50 a7       	stdsp	sp[0x28],r7
8000bbd6:	50 80       	stdsp	sp[0x20],r0
8000bbd8:	0c 97       	mov	r7,r6
8000bbda:	04 94       	mov	r4,r2
8000bbdc:	06 96       	mov	r6,r3
8000bbde:	02 92       	mov	r2,r1
8000bbe0:	40 93       	lddsp	r3,sp[0x24]
8000bbe2:	10 90       	mov	r0,r8
8000bbe4:	40 41       	lddsp	r1,sp[0x10]
8000bbe6:	a5 a5       	sbr	r5,0x4
8000bbe8:	c0 a8       	rjmp	8000bbfc <_vfprintf_r+0x54c>
8000bbea:	50 a7       	stdsp	sp[0x28],r7
8000bbec:	50 80       	stdsp	sp[0x20],r0
8000bbee:	0c 97       	mov	r7,r6
8000bbf0:	04 94       	mov	r4,r2
8000bbf2:	06 96       	mov	r6,r3
8000bbf4:	02 92       	mov	r2,r1
8000bbf6:	40 93       	lddsp	r3,sp[0x24]
8000bbf8:	10 90       	mov	r0,r8
8000bbfa:	40 41       	lddsp	r1,sp[0x10]
8000bbfc:	ed b5 00 05 	bld	r5,0x5
8000bc00:	c5 11       	brne	8000bca2 <_vfprintf_r+0x5f2>
8000bc02:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bc06:	40 3c       	lddsp	r12,sp[0xc]
8000bc08:	58 0c       	cp.w	r12,0
8000bc0a:	c1 e0       	breq	8000bc46 <_vfprintf_r+0x596>
8000bc0c:	10 36       	cp.w	r6,r8
8000bc0e:	c0 64       	brge	8000bc1a <_vfprintf_r+0x56a>
8000bc10:	fa cb f9 44 	sub	r11,sp,-1724
8000bc14:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000bc18:	c2 08       	rjmp	8000bc58 <_vfprintf_r+0x5a8>
8000bc1a:	fa c8 f9 50 	sub	r8,sp,-1712
8000bc1e:	1a d8       	st.w	--sp,r8
8000bc20:	fa c8 fa b8 	sub	r8,sp,-1352
8000bc24:	0c 9b       	mov	r11,r6
8000bc26:	1a d8       	st.w	--sp,r8
8000bc28:	fa c8 fb b4 	sub	r8,sp,-1100
8000bc2c:	1a d8       	st.w	--sp,r8
8000bc2e:	fa c9 ff b4 	sub	r9,sp,-76
8000bc32:	fa c8 f9 40 	sub	r8,sp,-1728
8000bc36:	04 9a       	mov	r10,r2
8000bc38:	08 9c       	mov	r12,r4
8000bc3a:	f0 1f 01 23 	mcall	8000c0c4 <_vfprintf_r+0xa14>
8000bc3e:	2f dd       	sub	sp,-12
8000bc40:	78 1b       	ld.w	r11,r12[0x4]
8000bc42:	78 09       	ld.w	r9,r12[0x0]
8000bc44:	c2 b8       	rjmp	8000bc9a <_vfprintf_r+0x5ea>
8000bc46:	ee ca ff ff 	sub	r10,r7,-1
8000bc4a:	10 37       	cp.w	r7,r8
8000bc4c:	c0 b4       	brge	8000bc62 <_vfprintf_r+0x5b2>
8000bc4e:	fa c9 f9 44 	sub	r9,sp,-1724
8000bc52:	14 97       	mov	r7,r10
8000bc54:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000bc58:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000bc5c:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000bc60:	c1 d8       	rjmp	8000bc9a <_vfprintf_r+0x5ea>
8000bc62:	41 09       	lddsp	r9,sp[0x40]
8000bc64:	59 f8       	cp.w	r8,31
8000bc66:	e0 89 00 14 	brgt	8000bc8e <_vfprintf_r+0x5de>
8000bc6a:	f2 cb ff f8 	sub	r11,r9,-8
8000bc6e:	51 0b       	stdsp	sp[0x40],r11
8000bc70:	fa c6 f9 44 	sub	r6,sp,-1724
8000bc74:	72 1b       	ld.w	r11,r9[0x4]
8000bc76:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000bc7a:	72 09       	ld.w	r9,r9[0x0]
8000bc7c:	f9 4b fd 8c 	st.w	r12[-628],r11
8000bc80:	f9 49 fd 88 	st.w	r12[-632],r9
8000bc84:	2f f8       	sub	r8,-1
8000bc86:	14 97       	mov	r7,r10
8000bc88:	fb 48 06 b4 	st.w	sp[1716],r8
8000bc8c:	c0 78       	rjmp	8000bc9a <_vfprintf_r+0x5ea>
8000bc8e:	f2 c8 ff f8 	sub	r8,r9,-8
8000bc92:	72 1b       	ld.w	r11,r9[0x4]
8000bc94:	14 97       	mov	r7,r10
8000bc96:	51 08       	stdsp	sp[0x40],r8
8000bc98:	72 09       	ld.w	r9,r9[0x0]
8000bc9a:	16 98       	mov	r8,r11
8000bc9c:	fa e9 00 00 	st.d	sp[0],r8
8000bca0:	ca e8       	rjmp	8000bdfc <_vfprintf_r+0x74c>
8000bca2:	ed b5 00 04 	bld	r5,0x4
8000bca6:	c1 71       	brne	8000bcd4 <_vfprintf_r+0x624>
8000bca8:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bcac:	40 3e       	lddsp	lr,sp[0xc]
8000bcae:	58 0e       	cp.w	lr,0
8000bcb0:	c0 80       	breq	8000bcc0 <_vfprintf_r+0x610>
8000bcb2:	10 36       	cp.w	r6,r8
8000bcb4:	c6 94       	brge	8000bd86 <_vfprintf_r+0x6d6>
8000bcb6:	fa cc f9 44 	sub	r12,sp,-1724
8000bcba:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000bcbe:	c8 28       	rjmp	8000bdc2 <_vfprintf_r+0x712>
8000bcc0:	ee ca ff ff 	sub	r10,r7,-1
8000bcc4:	10 37       	cp.w	r7,r8
8000bcc6:	e0 84 00 81 	brge	8000bdc8 <_vfprintf_r+0x718>
8000bcca:	fa cb f9 44 	sub	r11,sp,-1724
8000bcce:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000bcd2:	c7 78       	rjmp	8000bdc0 <_vfprintf_r+0x710>
8000bcd4:	ed b5 00 06 	bld	r5,0x6
8000bcd8:	c4 b1       	brne	8000bd6e <_vfprintf_r+0x6be>
8000bcda:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bcde:	40 3c       	lddsp	r12,sp[0xc]
8000bce0:	58 0c       	cp.w	r12,0
8000bce2:	c1 d0       	breq	8000bd1c <_vfprintf_r+0x66c>
8000bce4:	10 36       	cp.w	r6,r8
8000bce6:	c0 64       	brge	8000bcf2 <_vfprintf_r+0x642>
8000bce8:	fa cb f9 44 	sub	r11,sp,-1724
8000bcec:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000bcf0:	c1 f8       	rjmp	8000bd2e <_vfprintf_r+0x67e>
8000bcf2:	fa c8 f9 50 	sub	r8,sp,-1712
8000bcf6:	1a d8       	st.w	--sp,r8
8000bcf8:	fa c8 fa b8 	sub	r8,sp,-1352
8000bcfc:	1a d8       	st.w	--sp,r8
8000bcfe:	fa c8 fb b4 	sub	r8,sp,-1100
8000bd02:	1a d8       	st.w	--sp,r8
8000bd04:	fa c8 f9 40 	sub	r8,sp,-1728
8000bd08:	fa c9 ff b4 	sub	r9,sp,-76
8000bd0c:	04 9a       	mov	r10,r2
8000bd0e:	0c 9b       	mov	r11,r6
8000bd10:	08 9c       	mov	r12,r4
8000bd12:	f0 1f 00 ed 	mcall	8000c0c4 <_vfprintf_r+0xa14>
8000bd16:	2f dd       	sub	sp,-12
8000bd18:	98 18       	ld.sh	r8,r12[0x2]
8000bd1a:	c2 68       	rjmp	8000bd66 <_vfprintf_r+0x6b6>
8000bd1c:	ee ca ff ff 	sub	r10,r7,-1
8000bd20:	10 37       	cp.w	r7,r8
8000bd22:	c0 94       	brge	8000bd34 <_vfprintf_r+0x684>
8000bd24:	fa c9 f9 44 	sub	r9,sp,-1724
8000bd28:	14 97       	mov	r7,r10
8000bd2a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000bd2e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000bd32:	c1 a8       	rjmp	8000bd66 <_vfprintf_r+0x6b6>
8000bd34:	41 09       	lddsp	r9,sp[0x40]
8000bd36:	59 f8       	cp.w	r8,31
8000bd38:	e0 89 00 13 	brgt	8000bd5e <_vfprintf_r+0x6ae>
8000bd3c:	f2 cb ff fc 	sub	r11,r9,-4
8000bd40:	51 0b       	stdsp	sp[0x40],r11
8000bd42:	72 09       	ld.w	r9,r9[0x0]
8000bd44:	fa c6 f9 44 	sub	r6,sp,-1724
8000bd48:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000bd4c:	2f f8       	sub	r8,-1
8000bd4e:	f7 49 fd 88 	st.w	r11[-632],r9
8000bd52:	fb 48 06 b4 	st.w	sp[1716],r8
8000bd56:	14 97       	mov	r7,r10
8000bd58:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000bd5c:	c0 58       	rjmp	8000bd66 <_vfprintf_r+0x6b6>
8000bd5e:	92 18       	ld.sh	r8,r9[0x2]
8000bd60:	14 97       	mov	r7,r10
8000bd62:	2f c9       	sub	r9,-4
8000bd64:	51 09       	stdsp	sp[0x40],r9
8000bd66:	50 18       	stdsp	sp[0x4],r8
8000bd68:	bf 58       	asr	r8,0x1f
8000bd6a:	50 08       	stdsp	sp[0x0],r8
8000bd6c:	c4 88       	rjmp	8000bdfc <_vfprintf_r+0x74c>
8000bd6e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bd72:	40 3c       	lddsp	r12,sp[0xc]
8000bd74:	58 0c       	cp.w	r12,0
8000bd76:	c1 d0       	breq	8000bdb0 <_vfprintf_r+0x700>
8000bd78:	10 36       	cp.w	r6,r8
8000bd7a:	c0 64       	brge	8000bd86 <_vfprintf_r+0x6d6>
8000bd7c:	fa cb f9 44 	sub	r11,sp,-1724
8000bd80:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000bd84:	c1 f8       	rjmp	8000bdc2 <_vfprintf_r+0x712>
8000bd86:	fa c8 f9 50 	sub	r8,sp,-1712
8000bd8a:	1a d8       	st.w	--sp,r8
8000bd8c:	fa c8 fa b8 	sub	r8,sp,-1352
8000bd90:	0c 9b       	mov	r11,r6
8000bd92:	1a d8       	st.w	--sp,r8
8000bd94:	fa c8 fb b4 	sub	r8,sp,-1100
8000bd98:	04 9a       	mov	r10,r2
8000bd9a:	1a d8       	st.w	--sp,r8
8000bd9c:	08 9c       	mov	r12,r4
8000bd9e:	fa c8 f9 40 	sub	r8,sp,-1728
8000bda2:	fa c9 ff b4 	sub	r9,sp,-76
8000bda6:	f0 1f 00 c8 	mcall	8000c0c4 <_vfprintf_r+0xa14>
8000bdaa:	2f dd       	sub	sp,-12
8000bdac:	78 0b       	ld.w	r11,r12[0x0]
8000bdae:	c2 48       	rjmp	8000bdf6 <_vfprintf_r+0x746>
8000bdb0:	ee ca ff ff 	sub	r10,r7,-1
8000bdb4:	10 37       	cp.w	r7,r8
8000bdb6:	c0 94       	brge	8000bdc8 <_vfprintf_r+0x718>
8000bdb8:	fa c9 f9 44 	sub	r9,sp,-1724
8000bdbc:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000bdc0:	14 97       	mov	r7,r10
8000bdc2:	ec fb fd 88 	ld.w	r11,r6[-632]
8000bdc6:	c1 88       	rjmp	8000bdf6 <_vfprintf_r+0x746>
8000bdc8:	41 09       	lddsp	r9,sp[0x40]
8000bdca:	59 f8       	cp.w	r8,31
8000bdcc:	e0 89 00 11 	brgt	8000bdee <_vfprintf_r+0x73e>
8000bdd0:	f2 cb ff fc 	sub	r11,r9,-4
8000bdd4:	51 0b       	stdsp	sp[0x40],r11
8000bdd6:	fa c6 f9 44 	sub	r6,sp,-1724
8000bdda:	72 0b       	ld.w	r11,r9[0x0]
8000bddc:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000bde0:	f3 4b fd 88 	st.w	r9[-632],r11
8000bde4:	2f f8       	sub	r8,-1
8000bde6:	14 97       	mov	r7,r10
8000bde8:	fb 48 06 b4 	st.w	sp[1716],r8
8000bdec:	c0 58       	rjmp	8000bdf6 <_vfprintf_r+0x746>
8000bdee:	72 0b       	ld.w	r11,r9[0x0]
8000bdf0:	14 97       	mov	r7,r10
8000bdf2:	2f c9       	sub	r9,-4
8000bdf4:	51 09       	stdsp	sp[0x40],r9
8000bdf6:	50 1b       	stdsp	sp[0x4],r11
8000bdf8:	bf 5b       	asr	r11,0x1f
8000bdfa:	50 0b       	stdsp	sp[0x0],r11
8000bdfc:	fa ea 00 00 	ld.d	r10,sp[0]
8000be00:	58 0a       	cp.w	r10,0
8000be02:	5c 2b       	cpc	r11
8000be04:	c0 e4       	brge	8000be20 <_vfprintf_r+0x770>
8000be06:	30 08       	mov	r8,0
8000be08:	fa ea 00 00 	ld.d	r10,sp[0]
8000be0c:	30 09       	mov	r9,0
8000be0e:	f0 0a 01 0a 	sub	r10,r8,r10
8000be12:	f2 0b 01 4b 	sbc	r11,r9,r11
8000be16:	32 d8       	mov	r8,45
8000be18:	fa eb 00 00 	st.d	sp[0],r10
8000be1c:	fb 68 06 bb 	st.b	sp[1723],r8
8000be20:	30 18       	mov	r8,1
8000be22:	e0 8f 07 12 	bral	8000cc46 <_vfprintf_r+0x1596>
8000be26:	50 a7       	stdsp	sp[0x28],r7
8000be28:	50 80       	stdsp	sp[0x20],r0
8000be2a:	0c 97       	mov	r7,r6
8000be2c:	04 94       	mov	r4,r2
8000be2e:	06 96       	mov	r6,r3
8000be30:	02 92       	mov	r2,r1
8000be32:	40 93       	lddsp	r3,sp[0x24]
8000be34:	10 90       	mov	r0,r8
8000be36:	40 41       	lddsp	r1,sp[0x10]
8000be38:	0e 99       	mov	r9,r7
8000be3a:	ed b5 00 03 	bld	r5,0x3
8000be3e:	c4 11       	brne	8000bec0 <_vfprintf_r+0x810>
8000be40:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000be44:	40 3a       	lddsp	r10,sp[0xc]
8000be46:	58 0a       	cp.w	r10,0
8000be48:	c1 90       	breq	8000be7a <_vfprintf_r+0x7ca>
8000be4a:	10 36       	cp.w	r6,r8
8000be4c:	c6 45       	brlt	8000bf14 <_vfprintf_r+0x864>
8000be4e:	fa c8 f9 50 	sub	r8,sp,-1712
8000be52:	1a d8       	st.w	--sp,r8
8000be54:	fa c8 fa b8 	sub	r8,sp,-1352
8000be58:	1a d8       	st.w	--sp,r8
8000be5a:	fa c8 fb b4 	sub	r8,sp,-1100
8000be5e:	0c 9b       	mov	r11,r6
8000be60:	1a d8       	st.w	--sp,r8
8000be62:	04 9a       	mov	r10,r2
8000be64:	fa c8 f9 40 	sub	r8,sp,-1728
8000be68:	fa c9 ff b4 	sub	r9,sp,-76
8000be6c:	08 9c       	mov	r12,r4
8000be6e:	f0 1f 00 96 	mcall	8000c0c4 <_vfprintf_r+0xa14>
8000be72:	2f dd       	sub	sp,-12
8000be74:	78 16       	ld.w	r6,r12[0x4]
8000be76:	50 76       	stdsp	sp[0x1c],r6
8000be78:	c4 88       	rjmp	8000bf08 <_vfprintf_r+0x858>
8000be7a:	2f f7       	sub	r7,-1
8000be7c:	10 39       	cp.w	r9,r8
8000be7e:	c0 c4       	brge	8000be96 <_vfprintf_r+0x7e6>
8000be80:	fa ce f9 44 	sub	lr,sp,-1724
8000be84:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000be88:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000be8c:	50 7c       	stdsp	sp[0x1c],r12
8000be8e:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000be92:	50 56       	stdsp	sp[0x14],r6
8000be94:	c6 68       	rjmp	8000bf60 <_vfprintf_r+0x8b0>
8000be96:	41 09       	lddsp	r9,sp[0x40]
8000be98:	59 f8       	cp.w	r8,31
8000be9a:	e0 89 00 10 	brgt	8000beba <_vfprintf_r+0x80a>
8000be9e:	f2 ca ff f8 	sub	r10,r9,-8
8000bea2:	72 1b       	ld.w	r11,r9[0x4]
8000bea4:	51 0a       	stdsp	sp[0x40],r10
8000bea6:	72 09       	ld.w	r9,r9[0x0]
8000bea8:	fa ca f9 44 	sub	r10,sp,-1724
8000beac:	50 7b       	stdsp	sp[0x1c],r11
8000beae:	50 59       	stdsp	sp[0x14],r9
8000beb0:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000beb4:	40 5b       	lddsp	r11,sp[0x14]
8000beb6:	40 7a       	lddsp	r10,sp[0x1c]
8000beb8:	c4 78       	rjmp	8000bf46 <_vfprintf_r+0x896>
8000beba:	72 18       	ld.w	r8,r9[0x4]
8000bebc:	50 78       	stdsp	sp[0x1c],r8
8000bebe:	c4 c8       	rjmp	8000bf56 <_vfprintf_r+0x8a6>
8000bec0:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000bec4:	40 3e       	lddsp	lr,sp[0xc]
8000bec6:	58 0e       	cp.w	lr,0
8000bec8:	c2 30       	breq	8000bf0e <_vfprintf_r+0x85e>
8000beca:	10 36       	cp.w	r6,r8
8000becc:	c0 94       	brge	8000bede <_vfprintf_r+0x82e>
8000bece:	fa cc f9 44 	sub	r12,sp,-1724
8000bed2:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000bed6:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000beda:	50 7b       	stdsp	sp[0x1c],r11
8000bedc:	cd 9b       	rjmp	8000be8e <_vfprintf_r+0x7de>
8000bede:	fa c8 f9 50 	sub	r8,sp,-1712
8000bee2:	1a d8       	st.w	--sp,r8
8000bee4:	fa c8 fa b8 	sub	r8,sp,-1352
8000bee8:	04 9a       	mov	r10,r2
8000beea:	1a d8       	st.w	--sp,r8
8000beec:	fa c8 fb b4 	sub	r8,sp,-1100
8000bef0:	0c 9b       	mov	r11,r6
8000bef2:	1a d8       	st.w	--sp,r8
8000bef4:	08 9c       	mov	r12,r4
8000bef6:	fa c8 f9 40 	sub	r8,sp,-1728
8000befa:	fa c9 ff b4 	sub	r9,sp,-76
8000befe:	f0 1f 00 72 	mcall	8000c0c4 <_vfprintf_r+0xa14>
8000bf02:	2f dd       	sub	sp,-12
8000bf04:	78 1a       	ld.w	r10,r12[0x4]
8000bf06:	50 7a       	stdsp	sp[0x1c],r10
8000bf08:	78 0c       	ld.w	r12,r12[0x0]
8000bf0a:	50 5c       	stdsp	sp[0x14],r12
8000bf0c:	c2 a8       	rjmp	8000bf60 <_vfprintf_r+0x8b0>
8000bf0e:	2f f7       	sub	r7,-1
8000bf10:	10 39       	cp.w	r9,r8
8000bf12:	c0 94       	brge	8000bf24 <_vfprintf_r+0x874>
8000bf14:	fa c9 f9 44 	sub	r9,sp,-1724
8000bf18:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000bf1c:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000bf20:	50 78       	stdsp	sp[0x1c],r8
8000bf22:	cb 6b       	rjmp	8000be8e <_vfprintf_r+0x7de>
8000bf24:	41 09       	lddsp	r9,sp[0x40]
8000bf26:	59 f8       	cp.w	r8,31
8000bf28:	e0 89 00 15 	brgt	8000bf52 <_vfprintf_r+0x8a2>
8000bf2c:	f2 ca ff f8 	sub	r10,r9,-8
8000bf30:	72 16       	ld.w	r6,r9[0x4]
8000bf32:	72 09       	ld.w	r9,r9[0x0]
8000bf34:	51 0a       	stdsp	sp[0x40],r10
8000bf36:	50 59       	stdsp	sp[0x14],r9
8000bf38:	fa ce f9 44 	sub	lr,sp,-1724
8000bf3c:	50 76       	stdsp	sp[0x1c],r6
8000bf3e:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000bf42:	40 5b       	lddsp	r11,sp[0x14]
8000bf44:	0c 9a       	mov	r10,r6
8000bf46:	f2 eb fd 88 	st.d	r9[-632],r10
8000bf4a:	2f f8       	sub	r8,-1
8000bf4c:	fb 48 06 b4 	st.w	sp[1716],r8
8000bf50:	c0 88       	rjmp	8000bf60 <_vfprintf_r+0x8b0>
8000bf52:	72 1c       	ld.w	r12,r9[0x4]
8000bf54:	50 7c       	stdsp	sp[0x1c],r12
8000bf56:	f2 c8 ff f8 	sub	r8,r9,-8
8000bf5a:	51 08       	stdsp	sp[0x40],r8
8000bf5c:	72 09       	ld.w	r9,r9[0x0]
8000bf5e:	50 59       	stdsp	sp[0x14],r9
8000bf60:	40 5b       	lddsp	r11,sp[0x14]
8000bf62:	40 7a       	lddsp	r10,sp[0x1c]
8000bf64:	f0 1f 00 59 	mcall	8000c0c8 <_vfprintf_r+0xa18>
8000bf68:	18 96       	mov	r6,r12
8000bf6a:	c1 50       	breq	8000bf94 <_vfprintf_r+0x8e4>
8000bf6c:	30 08       	mov	r8,0
8000bf6e:	30 09       	mov	r9,0
8000bf70:	40 5b       	lddsp	r11,sp[0x14]
8000bf72:	40 7a       	lddsp	r10,sp[0x1c]
8000bf74:	f0 1f 00 56 	mcall	8000c0cc <_vfprintf_r+0xa1c>
8000bf78:	c0 40       	breq	8000bf80 <_vfprintf_r+0x8d0>
8000bf7a:	32 d8       	mov	r8,45
8000bf7c:	fb 68 06 bb 	st.b	sp[1723],r8
8000bf80:	4d 48       	lddpc	r8,8000c0d0 <_vfprintf_r+0xa20>
8000bf82:	4d 56       	lddpc	r6,8000c0d4 <_vfprintf_r+0xa24>
8000bf84:	a7 d5       	cbr	r5,0x7
8000bf86:	e0 40 00 47 	cp.w	r0,71
8000bf8a:	f0 06 17 a0 	movle	r6,r8
8000bf8e:	30 32       	mov	r2,3
8000bf90:	e0 8f 06 e8 	bral	8000cd60 <_vfprintf_r+0x16b0>
8000bf94:	40 5b       	lddsp	r11,sp[0x14]
8000bf96:	40 7a       	lddsp	r10,sp[0x1c]
8000bf98:	f0 1f 00 50 	mcall	8000c0d8 <_vfprintf_r+0xa28>
8000bf9c:	c0 c0       	breq	8000bfb4 <_vfprintf_r+0x904>
8000bf9e:	50 26       	stdsp	sp[0x8],r6
8000bfa0:	4c f8       	lddpc	r8,8000c0dc <_vfprintf_r+0xa2c>
8000bfa2:	4d 06       	lddpc	r6,8000c0e0 <_vfprintf_r+0xa30>
8000bfa4:	a7 d5       	cbr	r5,0x7
8000bfa6:	e0 40 00 47 	cp.w	r0,71
8000bfaa:	f0 06 17 a0 	movle	r6,r8
8000bfae:	30 32       	mov	r2,3
8000bfb0:	e0 8f 06 de 	bral	8000cd6c <_vfprintf_r+0x16bc>
8000bfb4:	40 2a       	lddsp	r10,sp[0x8]
8000bfb6:	5b fa       	cp.w	r10,-1
8000bfb8:	c0 41       	brne	8000bfc0 <_vfprintf_r+0x910>
8000bfba:	30 69       	mov	r9,6
8000bfbc:	50 29       	stdsp	sp[0x8],r9
8000bfbe:	c1 18       	rjmp	8000bfe0 <_vfprintf_r+0x930>
8000bfc0:	e0 40 00 47 	cp.w	r0,71
8000bfc4:	5f 09       	sreq	r9
8000bfc6:	e0 40 00 67 	cp.w	r0,103
8000bfca:	5f 08       	sreq	r8
8000bfcc:	f3 e8 10 08 	or	r8,r9,r8
8000bfd0:	f8 08 18 00 	cp.b	r8,r12
8000bfd4:	c0 60       	breq	8000bfe0 <_vfprintf_r+0x930>
8000bfd6:	40 28       	lddsp	r8,sp[0x8]
8000bfd8:	58 08       	cp.w	r8,0
8000bfda:	f9 b8 00 01 	moveq	r8,1
8000bfde:	50 28       	stdsp	sp[0x8],r8
8000bfe0:	40 78       	lddsp	r8,sp[0x1c]
8000bfe2:	40 59       	lddsp	r9,sp[0x14]
8000bfe4:	fa e9 06 94 	st.d	sp[1684],r8
8000bfe8:	a9 a5       	sbr	r5,0x8
8000bfea:	fa f8 06 94 	ld.w	r8,sp[1684]
8000bfee:	58 08       	cp.w	r8,0
8000bff0:	c0 65       	brlt	8000bffc <_vfprintf_r+0x94c>
8000bff2:	40 5e       	lddsp	lr,sp[0x14]
8000bff4:	30 0c       	mov	r12,0
8000bff6:	50 6e       	stdsp	sp[0x18],lr
8000bff8:	50 9c       	stdsp	sp[0x24],r12
8000bffa:	c0 78       	rjmp	8000c008 <_vfprintf_r+0x958>
8000bffc:	40 5b       	lddsp	r11,sp[0x14]
8000bffe:	32 da       	mov	r10,45
8000c000:	ee 1b 80 00 	eorh	r11,0x8000
8000c004:	50 9a       	stdsp	sp[0x24],r10
8000c006:	50 6b       	stdsp	sp[0x18],r11
8000c008:	e0 40 00 46 	cp.w	r0,70
8000c00c:	5f 09       	sreq	r9
8000c00e:	e0 40 00 66 	cp.w	r0,102
8000c012:	5f 08       	sreq	r8
8000c014:	f3 e8 10 08 	or	r8,r9,r8
8000c018:	50 48       	stdsp	sp[0x10],r8
8000c01a:	c0 40       	breq	8000c022 <_vfprintf_r+0x972>
8000c01c:	40 22       	lddsp	r2,sp[0x8]
8000c01e:	30 39       	mov	r9,3
8000c020:	c1 08       	rjmp	8000c040 <_vfprintf_r+0x990>
8000c022:	e0 40 00 45 	cp.w	r0,69
8000c026:	5f 09       	sreq	r9
8000c028:	e0 40 00 65 	cp.w	r0,101
8000c02c:	5f 08       	sreq	r8
8000c02e:	40 22       	lddsp	r2,sp[0x8]
8000c030:	10 49       	or	r9,r8
8000c032:	2f f2       	sub	r2,-1
8000c034:	40 46       	lddsp	r6,sp[0x10]
8000c036:	ec 09 18 00 	cp.b	r9,r6
8000c03a:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000c03e:	30 29       	mov	r9,2
8000c040:	fa c8 f9 5c 	sub	r8,sp,-1700
8000c044:	1a d8       	st.w	--sp,r8
8000c046:	fa c8 f9 54 	sub	r8,sp,-1708
8000c04a:	1a d8       	st.w	--sp,r8
8000c04c:	fa c8 f9 4c 	sub	r8,sp,-1716
8000c050:	08 9c       	mov	r12,r4
8000c052:	1a d8       	st.w	--sp,r8
8000c054:	04 98       	mov	r8,r2
8000c056:	40 9b       	lddsp	r11,sp[0x24]
8000c058:	40 aa       	lddsp	r10,sp[0x28]
8000c05a:	f0 1f 00 23 	mcall	8000c0e4 <_vfprintf_r+0xa34>
8000c05e:	e0 40 00 47 	cp.w	r0,71
8000c062:	5f 19       	srne	r9
8000c064:	e0 40 00 67 	cp.w	r0,103
8000c068:	5f 18       	srne	r8
8000c06a:	18 96       	mov	r6,r12
8000c06c:	2f dd       	sub	sp,-12
8000c06e:	f3 e8 00 08 	and	r8,r9,r8
8000c072:	c0 41       	brne	8000c07a <_vfprintf_r+0x9ca>
8000c074:	ed b5 00 00 	bld	r5,0x0
8000c078:	c4 41       	brne	8000c100 <_vfprintf_r+0xa50>
8000c07a:	ec 02 00 0e 	add	lr,r6,r2
8000c07e:	50 3e       	stdsp	sp[0xc],lr
8000c080:	40 4c       	lddsp	r12,sp[0x10]
8000c082:	58 0c       	cp.w	r12,0
8000c084:	c1 50       	breq	8000c0ae <_vfprintf_r+0x9fe>
8000c086:	0d 89       	ld.ub	r9,r6[0x0]
8000c088:	33 08       	mov	r8,48
8000c08a:	f0 09 18 00 	cp.b	r9,r8
8000c08e:	c0 b1       	brne	8000c0a4 <_vfprintf_r+0x9f4>
8000c090:	30 08       	mov	r8,0
8000c092:	30 09       	mov	r9,0
8000c094:	40 6b       	lddsp	r11,sp[0x18]
8000c096:	40 7a       	lddsp	r10,sp[0x1c]
8000c098:	f0 1f 00 14 	mcall	8000c0e8 <_vfprintf_r+0xa38>
8000c09c:	fb b2 00 01 	rsubeq	r2,1
8000c0a0:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8000c0a4:	40 3b       	lddsp	r11,sp[0xc]
8000c0a6:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000c0aa:	10 0b       	add	r11,r8
8000c0ac:	50 3b       	stdsp	sp[0xc],r11
8000c0ae:	40 6b       	lddsp	r11,sp[0x18]
8000c0b0:	30 08       	mov	r8,0
8000c0b2:	30 09       	mov	r9,0
8000c0b4:	40 7a       	lddsp	r10,sp[0x1c]
8000c0b6:	f0 1f 00 0d 	mcall	8000c0e8 <_vfprintf_r+0xa38>
8000c0ba:	c1 d0       	breq	8000c0f4 <_vfprintf_r+0xa44>
8000c0bc:	40 3a       	lddsp	r10,sp[0xc]
8000c0be:	fb 4a 06 a4 	st.w	sp[1700],r10
8000c0c2:	c1 98       	rjmp	8000c0f4 <_vfprintf_r+0xa44>
8000c0c4:	80 00       	ld.sh	r0,r0[0x0]
8000c0c6:	b3 6c       	lsl	r12,0x12
8000c0c8:	80 00       	ld.sh	r0,r0[0x0]
8000c0ca:	fb 8c       	*unknown*
8000c0cc:	80 01       	ld.sh	r1,r0[0x0]
8000c0ce:	00 94       	mov	r4,r0
8000c0d0:	80 01       	ld.sh	r1,r0[0x0]
8000c0d2:	0e e0       	st.h	--r7,r0
8000c0d4:	80 01       	ld.sh	r1,r0[0x0]
8000c0d6:	0e e4       	st.h	--r7,r4
8000c0d8:	80 00       	ld.sh	r0,r0[0x0]
8000c0da:	fb b6       	*unknown*
8000c0dc:	80 01       	ld.sh	r1,r0[0x0]
8000c0de:	0e e8       	st.h	--r7,r8
8000c0e0:	80 01       	ld.sh	r1,r0[0x0]
8000c0e2:	0e ec       	st.h	--r7,r12
8000c0e4:	80 00       	ld.sh	r0,r0[0x0]
8000c0e6:	d8 58       	*unknown*
8000c0e8:	80 01       	ld.sh	r1,r0[0x0]
8000c0ea:	00 06       	add	r6,r0
8000c0ec:	10 c9       	st.b	r8++,r9
8000c0ee:	fb 48 06 a4 	st.w	sp[1700],r8
8000c0f2:	c0 28       	rjmp	8000c0f6 <_vfprintf_r+0xa46>
8000c0f4:	33 09       	mov	r9,48
8000c0f6:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000c0fa:	40 3e       	lddsp	lr,sp[0xc]
8000c0fc:	1c 38       	cp.w	r8,lr
8000c0fe:	cf 73       	brcs	8000c0ec <_vfprintf_r+0xa3c>
8000c100:	e0 40 00 47 	cp.w	r0,71
8000c104:	5f 09       	sreq	r9
8000c106:	e0 40 00 67 	cp.w	r0,103
8000c10a:	5f 08       	sreq	r8
8000c10c:	f3 e8 10 08 	or	r8,r9,r8
8000c110:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000c114:	0c 19       	sub	r9,r6
8000c116:	50 69       	stdsp	sp[0x18],r9
8000c118:	58 08       	cp.w	r8,0
8000c11a:	c0 b0       	breq	8000c130 <_vfprintf_r+0xa80>
8000c11c:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000c120:	5b d8       	cp.w	r8,-3
8000c122:	c0 55       	brlt	8000c12c <_vfprintf_r+0xa7c>
8000c124:	40 2c       	lddsp	r12,sp[0x8]
8000c126:	18 38       	cp.w	r8,r12
8000c128:	e0 8a 00 6a 	brle	8000c1fc <_vfprintf_r+0xb4c>
8000c12c:	20 20       	sub	r0,2
8000c12e:	c0 58       	rjmp	8000c138 <_vfprintf_r+0xa88>
8000c130:	e0 40 00 65 	cp.w	r0,101
8000c134:	e0 89 00 46 	brgt	8000c1c0 <_vfprintf_r+0xb10>
8000c138:	fa fb 06 ac 	ld.w	r11,sp[1708]
8000c13c:	fb 60 06 9c 	st.b	sp[1692],r0
8000c140:	20 1b       	sub	r11,1
8000c142:	fb 4b 06 ac 	st.w	sp[1708],r11
8000c146:	c0 47       	brpl	8000c14e <_vfprintf_r+0xa9e>
8000c148:	5c 3b       	neg	r11
8000c14a:	32 d8       	mov	r8,45
8000c14c:	c0 28       	rjmp	8000c150 <_vfprintf_r+0xaa0>
8000c14e:	32 b8       	mov	r8,43
8000c150:	fb 68 06 9d 	st.b	sp[1693],r8
8000c154:	58 9b       	cp.w	r11,9
8000c156:	e0 8a 00 1d 	brle	8000c190 <_vfprintf_r+0xae0>
8000c15a:	fa c9 fa 35 	sub	r9,sp,-1483
8000c15e:	30 aa       	mov	r10,10
8000c160:	12 98       	mov	r8,r9
8000c162:	0e 9c       	mov	r12,r7
8000c164:	0c 92       	mov	r2,r6
8000c166:	f6 0a 0c 06 	divs	r6,r11,r10
8000c16a:	0e 9b       	mov	r11,r7
8000c16c:	2d 0b       	sub	r11,-48
8000c16e:	10 fb       	st.b	--r8,r11
8000c170:	0c 9b       	mov	r11,r6
8000c172:	58 96       	cp.w	r6,9
8000c174:	fe 99 ff f9 	brgt	8000c166 <_vfprintf_r+0xab6>
8000c178:	2d 0b       	sub	r11,-48
8000c17a:	18 97       	mov	r7,r12
8000c17c:	04 96       	mov	r6,r2
8000c17e:	10 fb       	st.b	--r8,r11
8000c180:	fa ca f9 62 	sub	r10,sp,-1694
8000c184:	c0 38       	rjmp	8000c18a <_vfprintf_r+0xada>
8000c186:	11 3b       	ld.ub	r11,r8++
8000c188:	14 cb       	st.b	r10++,r11
8000c18a:	12 38       	cp.w	r8,r9
8000c18c:	cf d3       	brcs	8000c186 <_vfprintf_r+0xad6>
8000c18e:	c0 98       	rjmp	8000c1a0 <_vfprintf_r+0xaf0>
8000c190:	2d 0b       	sub	r11,-48
8000c192:	33 08       	mov	r8,48
8000c194:	fb 6b 06 9f 	st.b	sp[1695],r11
8000c198:	fb 68 06 9e 	st.b	sp[1694],r8
8000c19c:	fa ca f9 60 	sub	r10,sp,-1696
8000c1a0:	fa c8 f9 64 	sub	r8,sp,-1692
8000c1a4:	f4 08 01 08 	sub	r8,r10,r8
8000c1a8:	50 e8       	stdsp	sp[0x38],r8
8000c1aa:	10 92       	mov	r2,r8
8000c1ac:	40 6b       	lddsp	r11,sp[0x18]
8000c1ae:	16 02       	add	r2,r11
8000c1b0:	58 1b       	cp.w	r11,1
8000c1b2:	e0 89 00 05 	brgt	8000c1bc <_vfprintf_r+0xb0c>
8000c1b6:	ed b5 00 00 	bld	r5,0x0
8000c1ba:	c3 51       	brne	8000c224 <_vfprintf_r+0xb74>
8000c1bc:	2f f2       	sub	r2,-1
8000c1be:	c3 38       	rjmp	8000c224 <_vfprintf_r+0xb74>
8000c1c0:	e0 40 00 66 	cp.w	r0,102
8000c1c4:	c1 c1       	brne	8000c1fc <_vfprintf_r+0xb4c>
8000c1c6:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000c1ca:	58 02       	cp.w	r2,0
8000c1cc:	e0 8a 00 0c 	brle	8000c1e4 <_vfprintf_r+0xb34>
8000c1d0:	40 2a       	lddsp	r10,sp[0x8]
8000c1d2:	58 0a       	cp.w	r10,0
8000c1d4:	c0 41       	brne	8000c1dc <_vfprintf_r+0xb2c>
8000c1d6:	ed b5 00 00 	bld	r5,0x0
8000c1da:	c2 51       	brne	8000c224 <_vfprintf_r+0xb74>
8000c1dc:	2f f2       	sub	r2,-1
8000c1de:	40 29       	lddsp	r9,sp[0x8]
8000c1e0:	12 02       	add	r2,r9
8000c1e2:	c0 b8       	rjmp	8000c1f8 <_vfprintf_r+0xb48>
8000c1e4:	40 28       	lddsp	r8,sp[0x8]
8000c1e6:	58 08       	cp.w	r8,0
8000c1e8:	c0 61       	brne	8000c1f4 <_vfprintf_r+0xb44>
8000c1ea:	ed b5 00 00 	bld	r5,0x0
8000c1ee:	c0 30       	breq	8000c1f4 <_vfprintf_r+0xb44>
8000c1f0:	30 12       	mov	r2,1
8000c1f2:	c1 98       	rjmp	8000c224 <_vfprintf_r+0xb74>
8000c1f4:	40 22       	lddsp	r2,sp[0x8]
8000c1f6:	2f e2       	sub	r2,-2
8000c1f8:	36 60       	mov	r0,102
8000c1fa:	c1 58       	rjmp	8000c224 <_vfprintf_r+0xb74>
8000c1fc:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000c200:	40 6e       	lddsp	lr,sp[0x18]
8000c202:	1c 32       	cp.w	r2,lr
8000c204:	c0 65       	brlt	8000c210 <_vfprintf_r+0xb60>
8000c206:	ed b5 00 00 	bld	r5,0x0
8000c20a:	f7 b2 00 ff 	subeq	r2,-1
8000c20e:	c0 a8       	rjmp	8000c222 <_vfprintf_r+0xb72>
8000c210:	e4 08 11 02 	rsub	r8,r2,2
8000c214:	40 6c       	lddsp	r12,sp[0x18]
8000c216:	58 02       	cp.w	r2,0
8000c218:	f0 02 17 a0 	movle	r2,r8
8000c21c:	f9 b2 09 01 	movgt	r2,1
8000c220:	18 02       	add	r2,r12
8000c222:	36 70       	mov	r0,103
8000c224:	40 9b       	lddsp	r11,sp[0x24]
8000c226:	58 0b       	cp.w	r11,0
8000c228:	e0 80 05 9c 	breq	8000cd60 <_vfprintf_r+0x16b0>
8000c22c:	32 d8       	mov	r8,45
8000c22e:	fb 68 06 bb 	st.b	sp[1723],r8
8000c232:	e0 8f 05 9b 	bral	8000cd68 <_vfprintf_r+0x16b8>
8000c236:	50 a7       	stdsp	sp[0x28],r7
8000c238:	04 94       	mov	r4,r2
8000c23a:	0c 97       	mov	r7,r6
8000c23c:	02 92       	mov	r2,r1
8000c23e:	06 96       	mov	r6,r3
8000c240:	40 41       	lddsp	r1,sp[0x10]
8000c242:	40 93       	lddsp	r3,sp[0x24]
8000c244:	0e 99       	mov	r9,r7
8000c246:	ed b5 00 05 	bld	r5,0x5
8000c24a:	c4 81       	brne	8000c2da <_vfprintf_r+0xc2a>
8000c24c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c250:	40 3e       	lddsp	lr,sp[0xc]
8000c252:	58 0e       	cp.w	lr,0
8000c254:	c1 d0       	breq	8000c28e <_vfprintf_r+0xbde>
8000c256:	10 36       	cp.w	r6,r8
8000c258:	c0 64       	brge	8000c264 <_vfprintf_r+0xbb4>
8000c25a:	fa cc f9 44 	sub	r12,sp,-1724
8000c25e:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000c262:	c1 d8       	rjmp	8000c29c <_vfprintf_r+0xbec>
8000c264:	fa c8 f9 50 	sub	r8,sp,-1712
8000c268:	1a d8       	st.w	--sp,r8
8000c26a:	fa c8 fa b8 	sub	r8,sp,-1352
8000c26e:	04 9a       	mov	r10,r2
8000c270:	1a d8       	st.w	--sp,r8
8000c272:	fa c8 fb b4 	sub	r8,sp,-1100
8000c276:	0c 9b       	mov	r11,r6
8000c278:	1a d8       	st.w	--sp,r8
8000c27a:	08 9c       	mov	r12,r4
8000c27c:	fa c8 f9 40 	sub	r8,sp,-1728
8000c280:	fa c9 ff b4 	sub	r9,sp,-76
8000c284:	f0 1f 01 5f 	mcall	8000c800 <_vfprintf_r+0x1150>
8000c288:	2f dd       	sub	sp,-12
8000c28a:	78 0a       	ld.w	r10,r12[0x0]
8000c28c:	c2 08       	rjmp	8000c2cc <_vfprintf_r+0xc1c>
8000c28e:	2f f7       	sub	r7,-1
8000c290:	10 39       	cp.w	r9,r8
8000c292:	c0 84       	brge	8000c2a2 <_vfprintf_r+0xbf2>
8000c294:	fa cb f9 44 	sub	r11,sp,-1724
8000c298:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000c29c:	ec fa fd 88 	ld.w	r10,r6[-632]
8000c2a0:	c1 68       	rjmp	8000c2cc <_vfprintf_r+0xc1c>
8000c2a2:	41 09       	lddsp	r9,sp[0x40]
8000c2a4:	59 f8       	cp.w	r8,31
8000c2a6:	e0 89 00 10 	brgt	8000c2c6 <_vfprintf_r+0xc16>
8000c2aa:	f2 ca ff fc 	sub	r10,r9,-4
8000c2ae:	51 0a       	stdsp	sp[0x40],r10
8000c2b0:	fa c6 f9 44 	sub	r6,sp,-1724
8000c2b4:	72 0a       	ld.w	r10,r9[0x0]
8000c2b6:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000c2ba:	f3 4a fd 88 	st.w	r9[-632],r10
8000c2be:	2f f8       	sub	r8,-1
8000c2c0:	fb 48 06 b4 	st.w	sp[1716],r8
8000c2c4:	c0 48       	rjmp	8000c2cc <_vfprintf_r+0xc1c>
8000c2c6:	72 0a       	ld.w	r10,r9[0x0]
8000c2c8:	2f c9       	sub	r9,-4
8000c2ca:	51 09       	stdsp	sp[0x40],r9
8000c2cc:	40 be       	lddsp	lr,sp[0x2c]
8000c2ce:	1c 98       	mov	r8,lr
8000c2d0:	95 1e       	st.w	r10[0x4],lr
8000c2d2:	bf 58       	asr	r8,0x1f
8000c2d4:	95 08       	st.w	r10[0x0],r8
8000c2d6:	fe 9f fa 79 	bral	8000b7c8 <_vfprintf_r+0x118>
8000c2da:	ed b5 00 04 	bld	r5,0x4
8000c2de:	c4 80       	breq	8000c36e <_vfprintf_r+0xcbe>
8000c2e0:	e2 15 00 40 	andl	r5,0x40,COH
8000c2e4:	c4 50       	breq	8000c36e <_vfprintf_r+0xcbe>
8000c2e6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c2ea:	40 3c       	lddsp	r12,sp[0xc]
8000c2ec:	58 0c       	cp.w	r12,0
8000c2ee:	c1 d0       	breq	8000c328 <_vfprintf_r+0xc78>
8000c2f0:	10 36       	cp.w	r6,r8
8000c2f2:	c0 64       	brge	8000c2fe <_vfprintf_r+0xc4e>
8000c2f4:	fa cb f9 44 	sub	r11,sp,-1724
8000c2f8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000c2fc:	c1 d8       	rjmp	8000c336 <_vfprintf_r+0xc86>
8000c2fe:	fa c8 f9 50 	sub	r8,sp,-1712
8000c302:	1a d8       	st.w	--sp,r8
8000c304:	fa c8 fa b8 	sub	r8,sp,-1352
8000c308:	04 9a       	mov	r10,r2
8000c30a:	1a d8       	st.w	--sp,r8
8000c30c:	fa c8 fb b4 	sub	r8,sp,-1100
8000c310:	0c 9b       	mov	r11,r6
8000c312:	1a d8       	st.w	--sp,r8
8000c314:	08 9c       	mov	r12,r4
8000c316:	fa c8 f9 40 	sub	r8,sp,-1728
8000c31a:	fa c9 ff b4 	sub	r9,sp,-76
8000c31e:	f0 1f 01 39 	mcall	8000c800 <_vfprintf_r+0x1150>
8000c322:	2f dd       	sub	sp,-12
8000c324:	78 0a       	ld.w	r10,r12[0x0]
8000c326:	c2 08       	rjmp	8000c366 <_vfprintf_r+0xcb6>
8000c328:	2f f7       	sub	r7,-1
8000c32a:	10 39       	cp.w	r9,r8
8000c32c:	c0 84       	brge	8000c33c <_vfprintf_r+0xc8c>
8000c32e:	fa ca f9 44 	sub	r10,sp,-1724
8000c332:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000c336:	ec fa fd 88 	ld.w	r10,r6[-632]
8000c33a:	c1 68       	rjmp	8000c366 <_vfprintf_r+0xcb6>
8000c33c:	41 09       	lddsp	r9,sp[0x40]
8000c33e:	59 f8       	cp.w	r8,31
8000c340:	e0 89 00 10 	brgt	8000c360 <_vfprintf_r+0xcb0>
8000c344:	f2 ca ff fc 	sub	r10,r9,-4
8000c348:	51 0a       	stdsp	sp[0x40],r10
8000c34a:	fa c6 f9 44 	sub	r6,sp,-1724
8000c34e:	72 0a       	ld.w	r10,r9[0x0]
8000c350:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000c354:	f3 4a fd 88 	st.w	r9[-632],r10
8000c358:	2f f8       	sub	r8,-1
8000c35a:	fb 48 06 b4 	st.w	sp[1716],r8
8000c35e:	c0 48       	rjmp	8000c366 <_vfprintf_r+0xcb6>
8000c360:	72 0a       	ld.w	r10,r9[0x0]
8000c362:	2f c9       	sub	r9,-4
8000c364:	51 09       	stdsp	sp[0x40],r9
8000c366:	40 be       	lddsp	lr,sp[0x2c]
8000c368:	b4 0e       	st.h	r10[0x0],lr
8000c36a:	fe 9f fa 2f 	bral	8000b7c8 <_vfprintf_r+0x118>
8000c36e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c372:	40 3c       	lddsp	r12,sp[0xc]
8000c374:	58 0c       	cp.w	r12,0
8000c376:	c1 d0       	breq	8000c3b0 <_vfprintf_r+0xd00>
8000c378:	10 36       	cp.w	r6,r8
8000c37a:	c0 64       	brge	8000c386 <_vfprintf_r+0xcd6>
8000c37c:	fa cb f9 44 	sub	r11,sp,-1724
8000c380:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000c384:	c1 d8       	rjmp	8000c3be <_vfprintf_r+0xd0e>
8000c386:	fa c8 f9 50 	sub	r8,sp,-1712
8000c38a:	1a d8       	st.w	--sp,r8
8000c38c:	fa c8 fa b8 	sub	r8,sp,-1352
8000c390:	04 9a       	mov	r10,r2
8000c392:	1a d8       	st.w	--sp,r8
8000c394:	fa c8 fb b4 	sub	r8,sp,-1100
8000c398:	0c 9b       	mov	r11,r6
8000c39a:	1a d8       	st.w	--sp,r8
8000c39c:	08 9c       	mov	r12,r4
8000c39e:	fa c8 f9 40 	sub	r8,sp,-1728
8000c3a2:	fa c9 ff b4 	sub	r9,sp,-76
8000c3a6:	f0 1f 01 17 	mcall	8000c800 <_vfprintf_r+0x1150>
8000c3aa:	2f dd       	sub	sp,-12
8000c3ac:	78 0a       	ld.w	r10,r12[0x0]
8000c3ae:	c2 08       	rjmp	8000c3ee <_vfprintf_r+0xd3e>
8000c3b0:	2f f7       	sub	r7,-1
8000c3b2:	10 39       	cp.w	r9,r8
8000c3b4:	c0 84       	brge	8000c3c4 <_vfprintf_r+0xd14>
8000c3b6:	fa ca f9 44 	sub	r10,sp,-1724
8000c3ba:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000c3be:	ec fa fd 88 	ld.w	r10,r6[-632]
8000c3c2:	c1 68       	rjmp	8000c3ee <_vfprintf_r+0xd3e>
8000c3c4:	41 09       	lddsp	r9,sp[0x40]
8000c3c6:	59 f8       	cp.w	r8,31
8000c3c8:	e0 89 00 10 	brgt	8000c3e8 <_vfprintf_r+0xd38>
8000c3cc:	f2 ca ff fc 	sub	r10,r9,-4
8000c3d0:	51 0a       	stdsp	sp[0x40],r10
8000c3d2:	fa c6 f9 44 	sub	r6,sp,-1724
8000c3d6:	72 0a       	ld.w	r10,r9[0x0]
8000c3d8:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000c3dc:	f3 4a fd 88 	st.w	r9[-632],r10
8000c3e0:	2f f8       	sub	r8,-1
8000c3e2:	fb 48 06 b4 	st.w	sp[1716],r8
8000c3e6:	c0 48       	rjmp	8000c3ee <_vfprintf_r+0xd3e>
8000c3e8:	72 0a       	ld.w	r10,r9[0x0]
8000c3ea:	2f c9       	sub	r9,-4
8000c3ec:	51 09       	stdsp	sp[0x40],r9
8000c3ee:	40 be       	lddsp	lr,sp[0x2c]
8000c3f0:	95 0e       	st.w	r10[0x0],lr
8000c3f2:	fe 9f f9 eb 	bral	8000b7c8 <_vfprintf_r+0x118>
8000c3f6:	50 a7       	stdsp	sp[0x28],r7
8000c3f8:	50 80       	stdsp	sp[0x20],r0
8000c3fa:	0c 97       	mov	r7,r6
8000c3fc:	04 94       	mov	r4,r2
8000c3fe:	06 96       	mov	r6,r3
8000c400:	02 92       	mov	r2,r1
8000c402:	40 93       	lddsp	r3,sp[0x24]
8000c404:	10 90       	mov	r0,r8
8000c406:	40 41       	lddsp	r1,sp[0x10]
8000c408:	a5 a5       	sbr	r5,0x4
8000c40a:	c0 a8       	rjmp	8000c41e <_vfprintf_r+0xd6e>
8000c40c:	50 a7       	stdsp	sp[0x28],r7
8000c40e:	50 80       	stdsp	sp[0x20],r0
8000c410:	0c 97       	mov	r7,r6
8000c412:	04 94       	mov	r4,r2
8000c414:	06 96       	mov	r6,r3
8000c416:	02 92       	mov	r2,r1
8000c418:	40 93       	lddsp	r3,sp[0x24]
8000c41a:	10 90       	mov	r0,r8
8000c41c:	40 41       	lddsp	r1,sp[0x10]
8000c41e:	ed b5 00 05 	bld	r5,0x5
8000c422:	c5 d1       	brne	8000c4dc <_vfprintf_r+0xe2c>
8000c424:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c428:	40 3c       	lddsp	r12,sp[0xc]
8000c42a:	58 0c       	cp.w	r12,0
8000c42c:	c2 60       	breq	8000c478 <_vfprintf_r+0xdc8>
8000c42e:	10 36       	cp.w	r6,r8
8000c430:	c0 a4       	brge	8000c444 <_vfprintf_r+0xd94>
8000c432:	fa cb f9 44 	sub	r11,sp,-1724
8000c436:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000c43a:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000c43e:	fa e9 00 00 	st.d	sp[0],r8
8000c442:	c1 88       	rjmp	8000c472 <_vfprintf_r+0xdc2>
8000c444:	fa c8 f9 50 	sub	r8,sp,-1712
8000c448:	1a d8       	st.w	--sp,r8
8000c44a:	fa c8 fa b8 	sub	r8,sp,-1352
8000c44e:	04 9a       	mov	r10,r2
8000c450:	1a d8       	st.w	--sp,r8
8000c452:	0c 9b       	mov	r11,r6
8000c454:	fa c8 fb b4 	sub	r8,sp,-1100
8000c458:	08 9c       	mov	r12,r4
8000c45a:	1a d8       	st.w	--sp,r8
8000c45c:	fa c8 f9 40 	sub	r8,sp,-1728
8000c460:	fa c9 ff b4 	sub	r9,sp,-76
8000c464:	f0 1f 00 e7 	mcall	8000c800 <_vfprintf_r+0x1150>
8000c468:	2f dd       	sub	sp,-12
8000c46a:	f8 ea 00 00 	ld.d	r10,r12[0]
8000c46e:	fa eb 00 00 	st.d	sp[0],r10
8000c472:	30 08       	mov	r8,0
8000c474:	e0 8f 03 e6 	bral	8000cc40 <_vfprintf_r+0x1590>
8000c478:	ee ca ff ff 	sub	r10,r7,-1
8000c47c:	10 37       	cp.w	r7,r8
8000c47e:	c0 b4       	brge	8000c494 <_vfprintf_r+0xde4>
8000c480:	fa c9 f9 44 	sub	r9,sp,-1724
8000c484:	14 97       	mov	r7,r10
8000c486:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000c48a:	ec ea fd 88 	ld.d	r10,r6[-632]
8000c48e:	fa eb 00 00 	st.d	sp[0],r10
8000c492:	c1 88       	rjmp	8000c4c2 <_vfprintf_r+0xe12>
8000c494:	41 09       	lddsp	r9,sp[0x40]
8000c496:	59 f8       	cp.w	r8,31
8000c498:	e0 89 00 18 	brgt	8000c4c8 <_vfprintf_r+0xe18>
8000c49c:	f2 e6 00 00 	ld.d	r6,r9[0]
8000c4a0:	f2 cb ff f8 	sub	r11,r9,-8
8000c4a4:	fa e7 00 00 	st.d	sp[0],r6
8000c4a8:	51 0b       	stdsp	sp[0x40],r11
8000c4aa:	fa c6 f9 44 	sub	r6,sp,-1724
8000c4ae:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000c4b2:	fa e6 00 00 	ld.d	r6,sp[0]
8000c4b6:	f2 e7 fd 88 	st.d	r9[-632],r6
8000c4ba:	2f f8       	sub	r8,-1
8000c4bc:	14 97       	mov	r7,r10
8000c4be:	fb 48 06 b4 	st.w	sp[1716],r8
8000c4c2:	40 38       	lddsp	r8,sp[0xc]
8000c4c4:	e0 8f 03 be 	bral	8000cc40 <_vfprintf_r+0x1590>
8000c4c8:	f2 e6 00 00 	ld.d	r6,r9[0]
8000c4cc:	40 38       	lddsp	r8,sp[0xc]
8000c4ce:	fa e7 00 00 	st.d	sp[0],r6
8000c4d2:	2f 89       	sub	r9,-8
8000c4d4:	14 97       	mov	r7,r10
8000c4d6:	51 09       	stdsp	sp[0x40],r9
8000c4d8:	e0 8f 03 b4 	bral	8000cc40 <_vfprintf_r+0x1590>
8000c4dc:	ed b5 00 04 	bld	r5,0x4
8000c4e0:	c1 61       	brne	8000c50c <_vfprintf_r+0xe5c>
8000c4e2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c4e6:	40 3e       	lddsp	lr,sp[0xc]
8000c4e8:	58 0e       	cp.w	lr,0
8000c4ea:	c0 80       	breq	8000c4fa <_vfprintf_r+0xe4a>
8000c4ec:	10 36       	cp.w	r6,r8
8000c4ee:	c6 74       	brge	8000c5bc <_vfprintf_r+0xf0c>
8000c4f0:	fa cc f9 44 	sub	r12,sp,-1724
8000c4f4:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000c4f8:	c8 08       	rjmp	8000c5f8 <_vfprintf_r+0xf48>
8000c4fa:	ee ca ff ff 	sub	r10,r7,-1
8000c4fe:	10 37       	cp.w	r7,r8
8000c500:	c7 f4       	brge	8000c5fe <_vfprintf_r+0xf4e>
8000c502:	fa cb f9 44 	sub	r11,sp,-1724
8000c506:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000c50a:	c7 68       	rjmp	8000c5f6 <_vfprintf_r+0xf46>
8000c50c:	ed b5 00 06 	bld	r5,0x6
8000c510:	c4 a1       	brne	8000c5a4 <_vfprintf_r+0xef4>
8000c512:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c516:	40 3c       	lddsp	r12,sp[0xc]
8000c518:	58 0c       	cp.w	r12,0
8000c51a:	c1 d0       	breq	8000c554 <_vfprintf_r+0xea4>
8000c51c:	10 36       	cp.w	r6,r8
8000c51e:	c0 64       	brge	8000c52a <_vfprintf_r+0xe7a>
8000c520:	fa cb f9 44 	sub	r11,sp,-1724
8000c524:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000c528:	c1 f8       	rjmp	8000c566 <_vfprintf_r+0xeb6>
8000c52a:	fa c8 f9 50 	sub	r8,sp,-1712
8000c52e:	1a d8       	st.w	--sp,r8
8000c530:	fa c8 fa b8 	sub	r8,sp,-1352
8000c534:	1a d8       	st.w	--sp,r8
8000c536:	fa c8 fb b4 	sub	r8,sp,-1100
8000c53a:	1a d8       	st.w	--sp,r8
8000c53c:	fa c8 f9 40 	sub	r8,sp,-1728
8000c540:	fa c9 ff b4 	sub	r9,sp,-76
8000c544:	04 9a       	mov	r10,r2
8000c546:	0c 9b       	mov	r11,r6
8000c548:	08 9c       	mov	r12,r4
8000c54a:	f0 1f 00 ae 	mcall	8000c800 <_vfprintf_r+0x1150>
8000c54e:	2f dd       	sub	sp,-12
8000c550:	98 18       	ld.sh	r8,r12[0x2]
8000c552:	c2 68       	rjmp	8000c59e <_vfprintf_r+0xeee>
8000c554:	ee ca ff ff 	sub	r10,r7,-1
8000c558:	10 37       	cp.w	r7,r8
8000c55a:	c0 94       	brge	8000c56c <_vfprintf_r+0xebc>
8000c55c:	fa c9 f9 44 	sub	r9,sp,-1724
8000c560:	14 97       	mov	r7,r10
8000c562:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000c566:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000c56a:	c1 a8       	rjmp	8000c59e <_vfprintf_r+0xeee>
8000c56c:	41 09       	lddsp	r9,sp[0x40]
8000c56e:	59 f8       	cp.w	r8,31
8000c570:	e0 89 00 13 	brgt	8000c596 <_vfprintf_r+0xee6>
8000c574:	f2 cb ff fc 	sub	r11,r9,-4
8000c578:	51 0b       	stdsp	sp[0x40],r11
8000c57a:	72 09       	ld.w	r9,r9[0x0]
8000c57c:	fa c6 f9 44 	sub	r6,sp,-1724
8000c580:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000c584:	2f f8       	sub	r8,-1
8000c586:	f7 49 fd 88 	st.w	r11[-632],r9
8000c58a:	fb 48 06 b4 	st.w	sp[1716],r8
8000c58e:	14 97       	mov	r7,r10
8000c590:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000c594:	c0 58       	rjmp	8000c59e <_vfprintf_r+0xeee>
8000c596:	92 18       	ld.sh	r8,r9[0x2]
8000c598:	14 97       	mov	r7,r10
8000c59a:	2f c9       	sub	r9,-4
8000c59c:	51 09       	stdsp	sp[0x40],r9
8000c59e:	5c 78       	castu.h	r8
8000c5a0:	50 18       	stdsp	sp[0x4],r8
8000c5a2:	c4 68       	rjmp	8000c62e <_vfprintf_r+0xf7e>
8000c5a4:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c5a8:	40 3c       	lddsp	r12,sp[0xc]
8000c5aa:	58 0c       	cp.w	r12,0
8000c5ac:	c1 d0       	breq	8000c5e6 <_vfprintf_r+0xf36>
8000c5ae:	10 36       	cp.w	r6,r8
8000c5b0:	c0 64       	brge	8000c5bc <_vfprintf_r+0xf0c>
8000c5b2:	fa cb f9 44 	sub	r11,sp,-1724
8000c5b6:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000c5ba:	c1 f8       	rjmp	8000c5f8 <_vfprintf_r+0xf48>
8000c5bc:	fa c8 f9 50 	sub	r8,sp,-1712
8000c5c0:	1a d8       	st.w	--sp,r8
8000c5c2:	fa c8 fa b8 	sub	r8,sp,-1352
8000c5c6:	0c 9b       	mov	r11,r6
8000c5c8:	1a d8       	st.w	--sp,r8
8000c5ca:	fa c8 fb b4 	sub	r8,sp,-1100
8000c5ce:	04 9a       	mov	r10,r2
8000c5d0:	1a d8       	st.w	--sp,r8
8000c5d2:	08 9c       	mov	r12,r4
8000c5d4:	fa c8 f9 40 	sub	r8,sp,-1728
8000c5d8:	fa c9 ff b4 	sub	r9,sp,-76
8000c5dc:	f0 1f 00 89 	mcall	8000c800 <_vfprintf_r+0x1150>
8000c5e0:	2f dd       	sub	sp,-12
8000c5e2:	78 0b       	ld.w	r11,r12[0x0]
8000c5e4:	c2 48       	rjmp	8000c62c <_vfprintf_r+0xf7c>
8000c5e6:	ee ca ff ff 	sub	r10,r7,-1
8000c5ea:	10 37       	cp.w	r7,r8
8000c5ec:	c0 94       	brge	8000c5fe <_vfprintf_r+0xf4e>
8000c5ee:	fa c9 f9 44 	sub	r9,sp,-1724
8000c5f2:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000c5f6:	14 97       	mov	r7,r10
8000c5f8:	ec fb fd 88 	ld.w	r11,r6[-632]
8000c5fc:	c1 88       	rjmp	8000c62c <_vfprintf_r+0xf7c>
8000c5fe:	41 09       	lddsp	r9,sp[0x40]
8000c600:	59 f8       	cp.w	r8,31
8000c602:	e0 89 00 11 	brgt	8000c624 <_vfprintf_r+0xf74>
8000c606:	f2 cb ff fc 	sub	r11,r9,-4
8000c60a:	51 0b       	stdsp	sp[0x40],r11
8000c60c:	fa c6 f9 44 	sub	r6,sp,-1724
8000c610:	72 0b       	ld.w	r11,r9[0x0]
8000c612:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000c616:	f3 4b fd 88 	st.w	r9[-632],r11
8000c61a:	2f f8       	sub	r8,-1
8000c61c:	14 97       	mov	r7,r10
8000c61e:	fb 48 06 b4 	st.w	sp[1716],r8
8000c622:	c0 58       	rjmp	8000c62c <_vfprintf_r+0xf7c>
8000c624:	72 0b       	ld.w	r11,r9[0x0]
8000c626:	14 97       	mov	r7,r10
8000c628:	2f c9       	sub	r9,-4
8000c62a:	51 09       	stdsp	sp[0x40],r9
8000c62c:	50 1b       	stdsp	sp[0x4],r11
8000c62e:	30 0e       	mov	lr,0
8000c630:	50 0e       	stdsp	sp[0x0],lr
8000c632:	1c 98       	mov	r8,lr
8000c634:	e0 8f 03 06 	bral	8000cc40 <_vfprintf_r+0x1590>
8000c638:	50 a7       	stdsp	sp[0x28],r7
8000c63a:	50 80       	stdsp	sp[0x20],r0
8000c63c:	0c 97       	mov	r7,r6
8000c63e:	04 94       	mov	r4,r2
8000c640:	06 96       	mov	r6,r3
8000c642:	02 92       	mov	r2,r1
8000c644:	40 93       	lddsp	r3,sp[0x24]
8000c646:	40 41       	lddsp	r1,sp[0x10]
8000c648:	0e 99       	mov	r9,r7
8000c64a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c64e:	40 3c       	lddsp	r12,sp[0xc]
8000c650:	58 0c       	cp.w	r12,0
8000c652:	c1 d0       	breq	8000c68c <_vfprintf_r+0xfdc>
8000c654:	10 36       	cp.w	r6,r8
8000c656:	c0 64       	brge	8000c662 <_vfprintf_r+0xfb2>
8000c658:	fa cb f9 44 	sub	r11,sp,-1724
8000c65c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000c660:	c1 d8       	rjmp	8000c69a <_vfprintf_r+0xfea>
8000c662:	fa c8 f9 50 	sub	r8,sp,-1712
8000c666:	1a d8       	st.w	--sp,r8
8000c668:	fa c8 fa b8 	sub	r8,sp,-1352
8000c66c:	1a d8       	st.w	--sp,r8
8000c66e:	fa c8 fb b4 	sub	r8,sp,-1100
8000c672:	1a d8       	st.w	--sp,r8
8000c674:	fa c9 ff b4 	sub	r9,sp,-76
8000c678:	fa c8 f9 40 	sub	r8,sp,-1728
8000c67c:	04 9a       	mov	r10,r2
8000c67e:	0c 9b       	mov	r11,r6
8000c680:	08 9c       	mov	r12,r4
8000c682:	f0 1f 00 60 	mcall	8000c800 <_vfprintf_r+0x1150>
8000c686:	2f dd       	sub	sp,-12
8000c688:	78 09       	ld.w	r9,r12[0x0]
8000c68a:	c2 18       	rjmp	8000c6cc <_vfprintf_r+0x101c>
8000c68c:	2f f7       	sub	r7,-1
8000c68e:	10 39       	cp.w	r9,r8
8000c690:	c0 84       	brge	8000c6a0 <_vfprintf_r+0xff0>
8000c692:	fa ca f9 44 	sub	r10,sp,-1724
8000c696:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000c69a:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000c69e:	c1 78       	rjmp	8000c6cc <_vfprintf_r+0x101c>
8000c6a0:	41 09       	lddsp	r9,sp[0x40]
8000c6a2:	59 f8       	cp.w	r8,31
8000c6a4:	e0 89 00 10 	brgt	8000c6c4 <_vfprintf_r+0x1014>
8000c6a8:	f2 ca ff fc 	sub	r10,r9,-4
8000c6ac:	51 0a       	stdsp	sp[0x40],r10
8000c6ae:	fa c6 f9 44 	sub	r6,sp,-1724
8000c6b2:	72 09       	ld.w	r9,r9[0x0]
8000c6b4:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000c6b8:	f5 49 fd 88 	st.w	r10[-632],r9
8000c6bc:	2f f8       	sub	r8,-1
8000c6be:	fb 48 06 b4 	st.w	sp[1716],r8
8000c6c2:	c0 58       	rjmp	8000c6cc <_vfprintf_r+0x101c>
8000c6c4:	f2 c8 ff fc 	sub	r8,r9,-4
8000c6c8:	51 08       	stdsp	sp[0x40],r8
8000c6ca:	72 09       	ld.w	r9,r9[0x0]
8000c6cc:	33 08       	mov	r8,48
8000c6ce:	fb 68 06 b8 	st.b	sp[1720],r8
8000c6d2:	37 88       	mov	r8,120
8000c6d4:	30 0e       	mov	lr,0
8000c6d6:	fb 68 06 b9 	st.b	sp[1721],r8
8000c6da:	4c bc       	lddpc	r12,8000c804 <_vfprintf_r+0x1154>
8000c6dc:	50 19       	stdsp	sp[0x4],r9
8000c6de:	a1 b5       	sbr	r5,0x1
8000c6e0:	50 0e       	stdsp	sp[0x0],lr
8000c6e2:	50 dc       	stdsp	sp[0x34],r12
8000c6e4:	30 28       	mov	r8,2
8000c6e6:	37 80       	mov	r0,120
8000c6e8:	e0 8f 02 ac 	bral	8000cc40 <_vfprintf_r+0x1590>
8000c6ec:	50 a7       	stdsp	sp[0x28],r7
8000c6ee:	50 80       	stdsp	sp[0x20],r0
8000c6f0:	10 90       	mov	r0,r8
8000c6f2:	30 08       	mov	r8,0
8000c6f4:	fb 68 06 bb 	st.b	sp[1723],r8
8000c6f8:	0c 97       	mov	r7,r6
8000c6fa:	04 94       	mov	r4,r2
8000c6fc:	06 96       	mov	r6,r3
8000c6fe:	02 92       	mov	r2,r1
8000c700:	40 93       	lddsp	r3,sp[0x24]
8000c702:	40 41       	lddsp	r1,sp[0x10]
8000c704:	0e 99       	mov	r9,r7
8000c706:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c70a:	40 3b       	lddsp	r11,sp[0xc]
8000c70c:	58 0b       	cp.w	r11,0
8000c70e:	c1 d0       	breq	8000c748 <_vfprintf_r+0x1098>
8000c710:	10 36       	cp.w	r6,r8
8000c712:	c0 64       	brge	8000c71e <_vfprintf_r+0x106e>
8000c714:	fa ca f9 44 	sub	r10,sp,-1724
8000c718:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000c71c:	c1 d8       	rjmp	8000c756 <_vfprintf_r+0x10a6>
8000c71e:	fa c8 f9 50 	sub	r8,sp,-1712
8000c722:	1a d8       	st.w	--sp,r8
8000c724:	fa c8 fa b8 	sub	r8,sp,-1352
8000c728:	1a d8       	st.w	--sp,r8
8000c72a:	fa c8 fb b4 	sub	r8,sp,-1100
8000c72e:	0c 9b       	mov	r11,r6
8000c730:	1a d8       	st.w	--sp,r8
8000c732:	04 9a       	mov	r10,r2
8000c734:	fa c8 f9 40 	sub	r8,sp,-1728
8000c738:	fa c9 ff b4 	sub	r9,sp,-76
8000c73c:	08 9c       	mov	r12,r4
8000c73e:	f0 1f 00 31 	mcall	8000c800 <_vfprintf_r+0x1150>
8000c742:	2f dd       	sub	sp,-12
8000c744:	78 06       	ld.w	r6,r12[0x0]
8000c746:	c2 08       	rjmp	8000c786 <_vfprintf_r+0x10d6>
8000c748:	2f f7       	sub	r7,-1
8000c74a:	10 39       	cp.w	r9,r8
8000c74c:	c0 84       	brge	8000c75c <_vfprintf_r+0x10ac>
8000c74e:	fa c9 f9 44 	sub	r9,sp,-1724
8000c752:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000c756:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000c75a:	c1 68       	rjmp	8000c786 <_vfprintf_r+0x10d6>
8000c75c:	41 09       	lddsp	r9,sp[0x40]
8000c75e:	59 f8       	cp.w	r8,31
8000c760:	e0 89 00 10 	brgt	8000c780 <_vfprintf_r+0x10d0>
8000c764:	f2 ca ff fc 	sub	r10,r9,-4
8000c768:	51 0a       	stdsp	sp[0x40],r10
8000c76a:	72 06       	ld.w	r6,r9[0x0]
8000c76c:	fa ce f9 44 	sub	lr,sp,-1724
8000c770:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000c774:	f3 46 fd 88 	st.w	r9[-632],r6
8000c778:	2f f8       	sub	r8,-1
8000c77a:	fb 48 06 b4 	st.w	sp[1716],r8
8000c77e:	c0 48       	rjmp	8000c786 <_vfprintf_r+0x10d6>
8000c780:	72 06       	ld.w	r6,r9[0x0]
8000c782:	2f c9       	sub	r9,-4
8000c784:	51 09       	stdsp	sp[0x40],r9
8000c786:	40 2c       	lddsp	r12,sp[0x8]
8000c788:	58 0c       	cp.w	r12,0
8000c78a:	c1 05       	brlt	8000c7aa <_vfprintf_r+0x10fa>
8000c78c:	18 9a       	mov	r10,r12
8000c78e:	30 0b       	mov	r11,0
8000c790:	0c 9c       	mov	r12,r6
8000c792:	f0 1f 00 1e 	mcall	8000c808 <_vfprintf_r+0x1158>
8000c796:	e0 80 02 e8 	breq	8000cd66 <_vfprintf_r+0x16b6>
8000c79a:	f8 06 01 02 	sub	r2,r12,r6
8000c79e:	40 2b       	lddsp	r11,sp[0x8]
8000c7a0:	16 32       	cp.w	r2,r11
8000c7a2:	e0 89 02 e2 	brgt	8000cd66 <_vfprintf_r+0x16b6>
8000c7a6:	e0 8f 02 dd 	bral	8000cd60 <_vfprintf_r+0x16b0>
8000c7aa:	30 0a       	mov	r10,0
8000c7ac:	0c 9c       	mov	r12,r6
8000c7ae:	50 2a       	stdsp	sp[0x8],r10
8000c7b0:	f0 1f 00 17 	mcall	8000c80c <_vfprintf_r+0x115c>
8000c7b4:	18 92       	mov	r2,r12
8000c7b6:	e0 8f 02 db 	bral	8000cd6c <_vfprintf_r+0x16bc>
8000c7ba:	50 a7       	stdsp	sp[0x28],r7
8000c7bc:	50 80       	stdsp	sp[0x20],r0
8000c7be:	0c 97       	mov	r7,r6
8000c7c0:	04 94       	mov	r4,r2
8000c7c2:	06 96       	mov	r6,r3
8000c7c4:	02 92       	mov	r2,r1
8000c7c6:	40 93       	lddsp	r3,sp[0x24]
8000c7c8:	10 90       	mov	r0,r8
8000c7ca:	40 41       	lddsp	r1,sp[0x10]
8000c7cc:	a5 a5       	sbr	r5,0x4
8000c7ce:	c0 a8       	rjmp	8000c7e2 <_vfprintf_r+0x1132>
8000c7d0:	50 a7       	stdsp	sp[0x28],r7
8000c7d2:	50 80       	stdsp	sp[0x20],r0
8000c7d4:	0c 97       	mov	r7,r6
8000c7d6:	04 94       	mov	r4,r2
8000c7d8:	06 96       	mov	r6,r3
8000c7da:	02 92       	mov	r2,r1
8000c7dc:	40 93       	lddsp	r3,sp[0x24]
8000c7de:	10 90       	mov	r0,r8
8000c7e0:	40 41       	lddsp	r1,sp[0x10]
8000c7e2:	ed b5 00 05 	bld	r5,0x5
8000c7e6:	c5 d1       	brne	8000c8a0 <_vfprintf_r+0x11f0>
8000c7e8:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c7ec:	40 39       	lddsp	r9,sp[0xc]
8000c7ee:	58 09       	cp.w	r9,0
8000c7f0:	c2 80       	breq	8000c840 <_vfprintf_r+0x1190>
8000c7f2:	10 36       	cp.w	r6,r8
8000c7f4:	c0 e4       	brge	8000c810 <_vfprintf_r+0x1160>
8000c7f6:	fa c8 f9 44 	sub	r8,sp,-1724
8000c7fa:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000c7fe:	c2 a8       	rjmp	8000c852 <_vfprintf_r+0x11a2>
8000c800:	80 00       	ld.sh	r0,r0[0x0]
8000c802:	b3 6c       	lsl	r12,0x12
8000c804:	80 01       	ld.sh	r1,r0[0x0]
8000c806:	0e f0       	st.b	--r7,r0
8000c808:	80 00       	ld.sh	r0,r0[0x0]
8000c80a:	f2 10 80 00 	pref	r0[-32768]
8000c80e:	b3 34       	mul	r4,r9
8000c810:	fa c8 f9 50 	sub	r8,sp,-1712
8000c814:	1a d8       	st.w	--sp,r8
8000c816:	fa c8 fa b8 	sub	r8,sp,-1352
8000c81a:	1a d8       	st.w	--sp,r8
8000c81c:	fa c8 fb b4 	sub	r8,sp,-1100
8000c820:	1a d8       	st.w	--sp,r8
8000c822:	fa c8 f9 40 	sub	r8,sp,-1728
8000c826:	fa c9 ff b4 	sub	r9,sp,-76
8000c82a:	04 9a       	mov	r10,r2
8000c82c:	0c 9b       	mov	r11,r6
8000c82e:	08 9c       	mov	r12,r4
8000c830:	f0 1f 00 c8 	mcall	8000cb50 <_vfprintf_r+0x14a0>
8000c834:	2f dd       	sub	sp,-12
8000c836:	f8 e8 00 00 	ld.d	r8,r12[0]
8000c83a:	fa e9 00 00 	st.d	sp[0],r8
8000c83e:	c2 e8       	rjmp	8000c89a <_vfprintf_r+0x11ea>
8000c840:	ee ca ff ff 	sub	r10,r7,-1
8000c844:	10 37       	cp.w	r7,r8
8000c846:	c0 b4       	brge	8000c85c <_vfprintf_r+0x11ac>
8000c848:	fa c8 f9 44 	sub	r8,sp,-1724
8000c84c:	14 97       	mov	r7,r10
8000c84e:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000c852:	ec ea fd 88 	ld.d	r10,r6[-632]
8000c856:	fa eb 00 00 	st.d	sp[0],r10
8000c85a:	c2 08       	rjmp	8000c89a <_vfprintf_r+0x11ea>
8000c85c:	41 09       	lddsp	r9,sp[0x40]
8000c85e:	59 f8       	cp.w	r8,31
8000c860:	e0 89 00 16 	brgt	8000c88c <_vfprintf_r+0x11dc>
8000c864:	f2 e6 00 00 	ld.d	r6,r9[0]
8000c868:	f2 cb ff f8 	sub	r11,r9,-8
8000c86c:	fa e7 00 00 	st.d	sp[0],r6
8000c870:	51 0b       	stdsp	sp[0x40],r11
8000c872:	fa c6 f9 44 	sub	r6,sp,-1724
8000c876:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000c87a:	fa e6 00 00 	ld.d	r6,sp[0]
8000c87e:	f2 e7 fd 88 	st.d	r9[-632],r6
8000c882:	2f f8       	sub	r8,-1
8000c884:	14 97       	mov	r7,r10
8000c886:	fb 48 06 b4 	st.w	sp[1716],r8
8000c88a:	c0 88       	rjmp	8000c89a <_vfprintf_r+0x11ea>
8000c88c:	f2 e6 00 00 	ld.d	r6,r9[0]
8000c890:	2f 89       	sub	r9,-8
8000c892:	fa e7 00 00 	st.d	sp[0],r6
8000c896:	51 09       	stdsp	sp[0x40],r9
8000c898:	14 97       	mov	r7,r10
8000c89a:	30 18       	mov	r8,1
8000c89c:	e0 8f 01 d2 	bral	8000cc40 <_vfprintf_r+0x1590>
8000c8a0:	ed b5 00 04 	bld	r5,0x4
8000c8a4:	c1 61       	brne	8000c8d0 <_vfprintf_r+0x1220>
8000c8a6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c8aa:	40 3e       	lddsp	lr,sp[0xc]
8000c8ac:	58 0e       	cp.w	lr,0
8000c8ae:	c0 80       	breq	8000c8be <_vfprintf_r+0x120e>
8000c8b0:	10 36       	cp.w	r6,r8
8000c8b2:	c6 74       	brge	8000c980 <_vfprintf_r+0x12d0>
8000c8b4:	fa cc f9 44 	sub	r12,sp,-1724
8000c8b8:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000c8bc:	c8 08       	rjmp	8000c9bc <_vfprintf_r+0x130c>
8000c8be:	ee ca ff ff 	sub	r10,r7,-1
8000c8c2:	10 37       	cp.w	r7,r8
8000c8c4:	c7 f4       	brge	8000c9c2 <_vfprintf_r+0x1312>
8000c8c6:	fa cb f9 44 	sub	r11,sp,-1724
8000c8ca:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000c8ce:	c7 68       	rjmp	8000c9ba <_vfprintf_r+0x130a>
8000c8d0:	ed b5 00 06 	bld	r5,0x6
8000c8d4:	c4 a1       	brne	8000c968 <_vfprintf_r+0x12b8>
8000c8d6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c8da:	40 3c       	lddsp	r12,sp[0xc]
8000c8dc:	58 0c       	cp.w	r12,0
8000c8de:	c1 d0       	breq	8000c918 <_vfprintf_r+0x1268>
8000c8e0:	10 36       	cp.w	r6,r8
8000c8e2:	c0 64       	brge	8000c8ee <_vfprintf_r+0x123e>
8000c8e4:	fa cb f9 44 	sub	r11,sp,-1724
8000c8e8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000c8ec:	c1 f8       	rjmp	8000c92a <_vfprintf_r+0x127a>
8000c8ee:	fa c8 f9 50 	sub	r8,sp,-1712
8000c8f2:	1a d8       	st.w	--sp,r8
8000c8f4:	fa c8 fa b8 	sub	r8,sp,-1352
8000c8f8:	1a d8       	st.w	--sp,r8
8000c8fa:	fa c8 fb b4 	sub	r8,sp,-1100
8000c8fe:	1a d8       	st.w	--sp,r8
8000c900:	fa c8 f9 40 	sub	r8,sp,-1728
8000c904:	fa c9 ff b4 	sub	r9,sp,-76
8000c908:	04 9a       	mov	r10,r2
8000c90a:	0c 9b       	mov	r11,r6
8000c90c:	08 9c       	mov	r12,r4
8000c90e:	f0 1f 00 91 	mcall	8000cb50 <_vfprintf_r+0x14a0>
8000c912:	2f dd       	sub	sp,-12
8000c914:	98 18       	ld.sh	r8,r12[0x2]
8000c916:	c2 68       	rjmp	8000c962 <_vfprintf_r+0x12b2>
8000c918:	ee ca ff ff 	sub	r10,r7,-1
8000c91c:	10 37       	cp.w	r7,r8
8000c91e:	c0 94       	brge	8000c930 <_vfprintf_r+0x1280>
8000c920:	fa c9 f9 44 	sub	r9,sp,-1724
8000c924:	14 97       	mov	r7,r10
8000c926:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000c92a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000c92e:	c1 a8       	rjmp	8000c962 <_vfprintf_r+0x12b2>
8000c930:	41 09       	lddsp	r9,sp[0x40]
8000c932:	59 f8       	cp.w	r8,31
8000c934:	e0 89 00 13 	brgt	8000c95a <_vfprintf_r+0x12aa>
8000c938:	f2 cb ff fc 	sub	r11,r9,-4
8000c93c:	51 0b       	stdsp	sp[0x40],r11
8000c93e:	72 09       	ld.w	r9,r9[0x0]
8000c940:	fa c6 f9 44 	sub	r6,sp,-1724
8000c944:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000c948:	2f f8       	sub	r8,-1
8000c94a:	f7 49 fd 88 	st.w	r11[-632],r9
8000c94e:	fb 48 06 b4 	st.w	sp[1716],r8
8000c952:	14 97       	mov	r7,r10
8000c954:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000c958:	c0 58       	rjmp	8000c962 <_vfprintf_r+0x12b2>
8000c95a:	92 18       	ld.sh	r8,r9[0x2]
8000c95c:	14 97       	mov	r7,r10
8000c95e:	2f c9       	sub	r9,-4
8000c960:	51 09       	stdsp	sp[0x40],r9
8000c962:	5c 78       	castu.h	r8
8000c964:	50 18       	stdsp	sp[0x4],r8
8000c966:	c4 68       	rjmp	8000c9f2 <_vfprintf_r+0x1342>
8000c968:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000c96c:	40 3c       	lddsp	r12,sp[0xc]
8000c96e:	58 0c       	cp.w	r12,0
8000c970:	c1 d0       	breq	8000c9aa <_vfprintf_r+0x12fa>
8000c972:	10 36       	cp.w	r6,r8
8000c974:	c0 64       	brge	8000c980 <_vfprintf_r+0x12d0>
8000c976:	fa cb f9 44 	sub	r11,sp,-1724
8000c97a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000c97e:	c1 f8       	rjmp	8000c9bc <_vfprintf_r+0x130c>
8000c980:	fa c8 f9 50 	sub	r8,sp,-1712
8000c984:	1a d8       	st.w	--sp,r8
8000c986:	fa c8 fa b8 	sub	r8,sp,-1352
8000c98a:	0c 9b       	mov	r11,r6
8000c98c:	1a d8       	st.w	--sp,r8
8000c98e:	fa c8 fb b4 	sub	r8,sp,-1100
8000c992:	04 9a       	mov	r10,r2
8000c994:	1a d8       	st.w	--sp,r8
8000c996:	08 9c       	mov	r12,r4
8000c998:	fa c8 f9 40 	sub	r8,sp,-1728
8000c99c:	fa c9 ff b4 	sub	r9,sp,-76
8000c9a0:	f0 1f 00 6c 	mcall	8000cb50 <_vfprintf_r+0x14a0>
8000c9a4:	2f dd       	sub	sp,-12
8000c9a6:	78 0b       	ld.w	r11,r12[0x0]
8000c9a8:	c2 48       	rjmp	8000c9f0 <_vfprintf_r+0x1340>
8000c9aa:	ee ca ff ff 	sub	r10,r7,-1
8000c9ae:	10 37       	cp.w	r7,r8
8000c9b0:	c0 94       	brge	8000c9c2 <_vfprintf_r+0x1312>
8000c9b2:	fa c9 f9 44 	sub	r9,sp,-1724
8000c9b6:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000c9ba:	14 97       	mov	r7,r10
8000c9bc:	ec fb fd 88 	ld.w	r11,r6[-632]
8000c9c0:	c1 88       	rjmp	8000c9f0 <_vfprintf_r+0x1340>
8000c9c2:	41 09       	lddsp	r9,sp[0x40]
8000c9c4:	59 f8       	cp.w	r8,31
8000c9c6:	e0 89 00 11 	brgt	8000c9e8 <_vfprintf_r+0x1338>
8000c9ca:	f2 cb ff fc 	sub	r11,r9,-4
8000c9ce:	51 0b       	stdsp	sp[0x40],r11
8000c9d0:	fa c6 f9 44 	sub	r6,sp,-1724
8000c9d4:	72 0b       	ld.w	r11,r9[0x0]
8000c9d6:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000c9da:	f3 4b fd 88 	st.w	r9[-632],r11
8000c9de:	2f f8       	sub	r8,-1
8000c9e0:	14 97       	mov	r7,r10
8000c9e2:	fb 48 06 b4 	st.w	sp[1716],r8
8000c9e6:	c0 58       	rjmp	8000c9f0 <_vfprintf_r+0x1340>
8000c9e8:	72 0b       	ld.w	r11,r9[0x0]
8000c9ea:	14 97       	mov	r7,r10
8000c9ec:	2f c9       	sub	r9,-4
8000c9ee:	51 09       	stdsp	sp[0x40],r9
8000c9f0:	50 1b       	stdsp	sp[0x4],r11
8000c9f2:	30 0e       	mov	lr,0
8000c9f4:	30 18       	mov	r8,1
8000c9f6:	50 0e       	stdsp	sp[0x0],lr
8000c9f8:	c2 49       	rjmp	8000cc40 <_vfprintf_r+0x1590>
8000c9fa:	50 a7       	stdsp	sp[0x28],r7
8000c9fc:	50 80       	stdsp	sp[0x20],r0
8000c9fe:	0c 97       	mov	r7,r6
8000ca00:	04 94       	mov	r4,r2
8000ca02:	06 96       	mov	r6,r3
8000ca04:	02 92       	mov	r2,r1
8000ca06:	4d 4c       	lddpc	r12,8000cb54 <_vfprintf_r+0x14a4>
8000ca08:	40 93       	lddsp	r3,sp[0x24]
8000ca0a:	10 90       	mov	r0,r8
8000ca0c:	40 41       	lddsp	r1,sp[0x10]
8000ca0e:	50 dc       	stdsp	sp[0x34],r12
8000ca10:	ed b5 00 05 	bld	r5,0x5
8000ca14:	c5 51       	brne	8000cabe <_vfprintf_r+0x140e>
8000ca16:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ca1a:	40 3b       	lddsp	r11,sp[0xc]
8000ca1c:	58 0b       	cp.w	r11,0
8000ca1e:	c2 20       	breq	8000ca62 <_vfprintf_r+0x13b2>
8000ca20:	10 36       	cp.w	r6,r8
8000ca22:	c0 a4       	brge	8000ca36 <_vfprintf_r+0x1386>
8000ca24:	fa ca f9 44 	sub	r10,sp,-1724
8000ca28:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000ca2c:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000ca30:	fa e9 00 00 	st.d	sp[0],r8
8000ca34:	cf 58       	rjmp	8000cc1e <_vfprintf_r+0x156e>
8000ca36:	fa c8 f9 50 	sub	r8,sp,-1712
8000ca3a:	1a d8       	st.w	--sp,r8
8000ca3c:	fa c8 fa b8 	sub	r8,sp,-1352
8000ca40:	04 9a       	mov	r10,r2
8000ca42:	1a d8       	st.w	--sp,r8
8000ca44:	0c 9b       	mov	r11,r6
8000ca46:	fa c8 fb b4 	sub	r8,sp,-1100
8000ca4a:	08 9c       	mov	r12,r4
8000ca4c:	1a d8       	st.w	--sp,r8
8000ca4e:	fa c8 f9 40 	sub	r8,sp,-1728
8000ca52:	fa c9 ff b4 	sub	r9,sp,-76
8000ca56:	f0 1f 00 3f 	mcall	8000cb50 <_vfprintf_r+0x14a0>
8000ca5a:	2f dd       	sub	sp,-12
8000ca5c:	f8 ea 00 00 	ld.d	r10,r12[0]
8000ca60:	c0 c8       	rjmp	8000ca78 <_vfprintf_r+0x13c8>
8000ca62:	ee ca ff ff 	sub	r10,r7,-1
8000ca66:	10 37       	cp.w	r7,r8
8000ca68:	c0 b4       	brge	8000ca7e <_vfprintf_r+0x13ce>
8000ca6a:	fa c9 f9 44 	sub	r9,sp,-1724
8000ca6e:	14 97       	mov	r7,r10
8000ca70:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ca74:	ec ea fd 88 	ld.d	r10,r6[-632]
8000ca78:	fa eb 00 00 	st.d	sp[0],r10
8000ca7c:	cd 18       	rjmp	8000cc1e <_vfprintf_r+0x156e>
8000ca7e:	41 09       	lddsp	r9,sp[0x40]
8000ca80:	59 f8       	cp.w	r8,31
8000ca82:	e0 89 00 16 	brgt	8000caae <_vfprintf_r+0x13fe>
8000ca86:	f2 e6 00 00 	ld.d	r6,r9[0]
8000ca8a:	f2 cb ff f8 	sub	r11,r9,-8
8000ca8e:	fa e7 00 00 	st.d	sp[0],r6
8000ca92:	51 0b       	stdsp	sp[0x40],r11
8000ca94:	fa c6 f9 44 	sub	r6,sp,-1724
8000ca98:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000ca9c:	fa e6 00 00 	ld.d	r6,sp[0]
8000caa0:	f2 e7 fd 88 	st.d	r9[-632],r6
8000caa4:	2f f8       	sub	r8,-1
8000caa6:	14 97       	mov	r7,r10
8000caa8:	fb 48 06 b4 	st.w	sp[1716],r8
8000caac:	cb 98       	rjmp	8000cc1e <_vfprintf_r+0x156e>
8000caae:	f2 e6 00 00 	ld.d	r6,r9[0]
8000cab2:	2f 89       	sub	r9,-8
8000cab4:	fa e7 00 00 	st.d	sp[0],r6
8000cab8:	51 09       	stdsp	sp[0x40],r9
8000caba:	14 97       	mov	r7,r10
8000cabc:	cb 18       	rjmp	8000cc1e <_vfprintf_r+0x156e>
8000cabe:	ed b5 00 04 	bld	r5,0x4
8000cac2:	c1 71       	brne	8000caf0 <_vfprintf_r+0x1440>
8000cac4:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000cac8:	40 3e       	lddsp	lr,sp[0xc]
8000caca:	58 0e       	cp.w	lr,0
8000cacc:	c0 80       	breq	8000cadc <_vfprintf_r+0x142c>
8000cace:	10 36       	cp.w	r6,r8
8000cad0:	c6 c4       	brge	8000cba8 <_vfprintf_r+0x14f8>
8000cad2:	fa cc f9 44 	sub	r12,sp,-1724
8000cad6:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000cada:	c8 58       	rjmp	8000cbe4 <_vfprintf_r+0x1534>
8000cadc:	ee ca ff ff 	sub	r10,r7,-1
8000cae0:	10 37       	cp.w	r7,r8
8000cae2:	e0 84 00 84 	brge	8000cbea <_vfprintf_r+0x153a>
8000cae6:	fa cb f9 44 	sub	r11,sp,-1724
8000caea:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000caee:	c7 a8       	rjmp	8000cbe2 <_vfprintf_r+0x1532>
8000caf0:	ed b5 00 06 	bld	r5,0x6
8000caf4:	c4 e1       	brne	8000cb90 <_vfprintf_r+0x14e0>
8000caf6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000cafa:	40 3c       	lddsp	r12,sp[0xc]
8000cafc:	58 0c       	cp.w	r12,0
8000cafe:	c1 d0       	breq	8000cb38 <_vfprintf_r+0x1488>
8000cb00:	10 36       	cp.w	r6,r8
8000cb02:	c0 64       	brge	8000cb0e <_vfprintf_r+0x145e>
8000cb04:	fa cb f9 44 	sub	r11,sp,-1724
8000cb08:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000cb0c:	c1 f8       	rjmp	8000cb4a <_vfprintf_r+0x149a>
8000cb0e:	fa c8 f9 50 	sub	r8,sp,-1712
8000cb12:	1a d8       	st.w	--sp,r8
8000cb14:	fa c8 fa b8 	sub	r8,sp,-1352
8000cb18:	1a d8       	st.w	--sp,r8
8000cb1a:	fa c8 fb b4 	sub	r8,sp,-1100
8000cb1e:	1a d8       	st.w	--sp,r8
8000cb20:	fa c8 f9 40 	sub	r8,sp,-1728
8000cb24:	fa c9 ff b4 	sub	r9,sp,-76
8000cb28:	04 9a       	mov	r10,r2
8000cb2a:	0c 9b       	mov	r11,r6
8000cb2c:	08 9c       	mov	r12,r4
8000cb2e:	f0 1f 00 09 	mcall	8000cb50 <_vfprintf_r+0x14a0>
8000cb32:	2f dd       	sub	sp,-12
8000cb34:	98 18       	ld.sh	r8,r12[0x2]
8000cb36:	c2 a8       	rjmp	8000cb8a <_vfprintf_r+0x14da>
8000cb38:	ee ca ff ff 	sub	r10,r7,-1
8000cb3c:	10 37       	cp.w	r7,r8
8000cb3e:	c0 d4       	brge	8000cb58 <_vfprintf_r+0x14a8>
8000cb40:	fa c9 f9 44 	sub	r9,sp,-1724
8000cb44:	14 97       	mov	r7,r10
8000cb46:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000cb4a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000cb4e:	c1 e8       	rjmp	8000cb8a <_vfprintf_r+0x14da>
8000cb50:	80 00       	ld.sh	r0,r0[0x0]
8000cb52:	b3 6c       	lsl	r12,0x12
8000cb54:	80 01       	ld.sh	r1,r0[0x0]
8000cb56:	0e f0       	st.b	--r7,r0
8000cb58:	41 09       	lddsp	r9,sp[0x40]
8000cb5a:	59 f8       	cp.w	r8,31
8000cb5c:	e0 89 00 13 	brgt	8000cb82 <_vfprintf_r+0x14d2>
8000cb60:	f2 cb ff fc 	sub	r11,r9,-4
8000cb64:	51 0b       	stdsp	sp[0x40],r11
8000cb66:	72 09       	ld.w	r9,r9[0x0]
8000cb68:	fa c6 f9 44 	sub	r6,sp,-1724
8000cb6c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000cb70:	2f f8       	sub	r8,-1
8000cb72:	f7 49 fd 88 	st.w	r11[-632],r9
8000cb76:	fb 48 06 b4 	st.w	sp[1716],r8
8000cb7a:	14 97       	mov	r7,r10
8000cb7c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000cb80:	c0 58       	rjmp	8000cb8a <_vfprintf_r+0x14da>
8000cb82:	92 18       	ld.sh	r8,r9[0x2]
8000cb84:	14 97       	mov	r7,r10
8000cb86:	2f c9       	sub	r9,-4
8000cb88:	51 09       	stdsp	sp[0x40],r9
8000cb8a:	5c 78       	castu.h	r8
8000cb8c:	50 18       	stdsp	sp[0x4],r8
8000cb8e:	c4 68       	rjmp	8000cc1a <_vfprintf_r+0x156a>
8000cb90:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000cb94:	40 3c       	lddsp	r12,sp[0xc]
8000cb96:	58 0c       	cp.w	r12,0
8000cb98:	c1 d0       	breq	8000cbd2 <_vfprintf_r+0x1522>
8000cb9a:	10 36       	cp.w	r6,r8
8000cb9c:	c0 64       	brge	8000cba8 <_vfprintf_r+0x14f8>
8000cb9e:	fa cb f9 44 	sub	r11,sp,-1724
8000cba2:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000cba6:	c1 f8       	rjmp	8000cbe4 <_vfprintf_r+0x1534>
8000cba8:	fa c8 f9 50 	sub	r8,sp,-1712
8000cbac:	1a d8       	st.w	--sp,r8
8000cbae:	fa c8 fa b8 	sub	r8,sp,-1352
8000cbb2:	0c 9b       	mov	r11,r6
8000cbb4:	1a d8       	st.w	--sp,r8
8000cbb6:	fa c8 fb b4 	sub	r8,sp,-1100
8000cbba:	04 9a       	mov	r10,r2
8000cbbc:	1a d8       	st.w	--sp,r8
8000cbbe:	08 9c       	mov	r12,r4
8000cbc0:	fa c8 f9 40 	sub	r8,sp,-1728
8000cbc4:	fa c9 ff b4 	sub	r9,sp,-76
8000cbc8:	f0 1f 00 cb 	mcall	8000cef4 <_vfprintf_r+0x1844>
8000cbcc:	2f dd       	sub	sp,-12
8000cbce:	78 0b       	ld.w	r11,r12[0x0]
8000cbd0:	c2 48       	rjmp	8000cc18 <_vfprintf_r+0x1568>
8000cbd2:	ee ca ff ff 	sub	r10,r7,-1
8000cbd6:	10 37       	cp.w	r7,r8
8000cbd8:	c0 94       	brge	8000cbea <_vfprintf_r+0x153a>
8000cbda:	fa c9 f9 44 	sub	r9,sp,-1724
8000cbde:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000cbe2:	14 97       	mov	r7,r10
8000cbe4:	ec fb fd 88 	ld.w	r11,r6[-632]
8000cbe8:	c1 88       	rjmp	8000cc18 <_vfprintf_r+0x1568>
8000cbea:	41 09       	lddsp	r9,sp[0x40]
8000cbec:	59 f8       	cp.w	r8,31
8000cbee:	e0 89 00 11 	brgt	8000cc10 <_vfprintf_r+0x1560>
8000cbf2:	f2 cb ff fc 	sub	r11,r9,-4
8000cbf6:	51 0b       	stdsp	sp[0x40],r11
8000cbf8:	fa c6 f9 44 	sub	r6,sp,-1724
8000cbfc:	72 0b       	ld.w	r11,r9[0x0]
8000cbfe:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000cc02:	f3 4b fd 88 	st.w	r9[-632],r11
8000cc06:	2f f8       	sub	r8,-1
8000cc08:	14 97       	mov	r7,r10
8000cc0a:	fb 48 06 b4 	st.w	sp[1716],r8
8000cc0e:	c0 58       	rjmp	8000cc18 <_vfprintf_r+0x1568>
8000cc10:	72 0b       	ld.w	r11,r9[0x0]
8000cc12:	14 97       	mov	r7,r10
8000cc14:	2f c9       	sub	r9,-4
8000cc16:	51 09       	stdsp	sp[0x40],r9
8000cc18:	50 1b       	stdsp	sp[0x4],r11
8000cc1a:	30 0e       	mov	lr,0
8000cc1c:	50 0e       	stdsp	sp[0x0],lr
8000cc1e:	40 08       	lddsp	r8,sp[0x0]
8000cc20:	40 1c       	lddsp	r12,sp[0x4]
8000cc22:	18 48       	or	r8,r12
8000cc24:	5f 19       	srne	r9
8000cc26:	0a 98       	mov	r8,r5
8000cc28:	eb e9 00 09 	and	r9,r5,r9
8000cc2c:	a1 b8       	sbr	r8,0x1
8000cc2e:	58 09       	cp.w	r9,0
8000cc30:	c0 70       	breq	8000cc3e <_vfprintf_r+0x158e>
8000cc32:	10 95       	mov	r5,r8
8000cc34:	fb 60 06 b9 	st.b	sp[1721],r0
8000cc38:	33 08       	mov	r8,48
8000cc3a:	fb 68 06 b8 	st.b	sp[1720],r8
8000cc3e:	30 28       	mov	r8,2
8000cc40:	30 09       	mov	r9,0
8000cc42:	fb 69 06 bb 	st.b	sp[1723],r9
8000cc46:	0a 99       	mov	r9,r5
8000cc48:	a7 d9       	cbr	r9,0x7
8000cc4a:	40 2b       	lddsp	r11,sp[0x8]
8000cc4c:	40 16       	lddsp	r6,sp[0x4]
8000cc4e:	58 0b       	cp.w	r11,0
8000cc50:	5f 1a       	srne	r10
8000cc52:	f2 05 17 40 	movge	r5,r9
8000cc56:	fa c2 f9 78 	sub	r2,sp,-1672
8000cc5a:	40 09       	lddsp	r9,sp[0x0]
8000cc5c:	0c 49       	or	r9,r6
8000cc5e:	5f 19       	srne	r9
8000cc60:	f5 e9 10 09 	or	r9,r10,r9
8000cc64:	c5 c0       	breq	8000cd1c <_vfprintf_r+0x166c>
8000cc66:	30 19       	mov	r9,1
8000cc68:	f2 08 18 00 	cp.b	r8,r9
8000cc6c:	c0 60       	breq	8000cc78 <_vfprintf_r+0x15c8>
8000cc6e:	30 29       	mov	r9,2
8000cc70:	f2 08 18 00 	cp.b	r8,r9
8000cc74:	c0 41       	brne	8000cc7c <_vfprintf_r+0x15cc>
8000cc76:	c3 c8       	rjmp	8000ccee <_vfprintf_r+0x163e>
8000cc78:	04 96       	mov	r6,r2
8000cc7a:	c3 08       	rjmp	8000ccda <_vfprintf_r+0x162a>
8000cc7c:	04 96       	mov	r6,r2
8000cc7e:	fa e8 00 00 	ld.d	r8,sp[0]
8000cc82:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000cc86:	2d 0a       	sub	r10,-48
8000cc88:	0c fa       	st.b	--r6,r10
8000cc8a:	f0 0b 16 03 	lsr	r11,r8,0x3
8000cc8e:	f2 0c 16 03 	lsr	r12,r9,0x3
8000cc92:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000cc96:	18 99       	mov	r9,r12
8000cc98:	16 98       	mov	r8,r11
8000cc9a:	58 08       	cp.w	r8,0
8000cc9c:	5c 29       	cpc	r9
8000cc9e:	cf 21       	brne	8000cc82 <_vfprintf_r+0x15d2>
8000cca0:	fa e9 00 00 	st.d	sp[0],r8
8000cca4:	ed b5 00 00 	bld	r5,0x0
8000cca8:	c4 51       	brne	8000cd32 <_vfprintf_r+0x1682>
8000ccaa:	33 09       	mov	r9,48
8000ccac:	f2 0a 18 00 	cp.b	r10,r9
8000ccb0:	c4 10       	breq	8000cd32 <_vfprintf_r+0x1682>
8000ccb2:	0c f9       	st.b	--r6,r9
8000ccb4:	c3 f8       	rjmp	8000cd32 <_vfprintf_r+0x1682>
8000ccb6:	fa ea 00 00 	ld.d	r10,sp[0]
8000ccba:	30 a8       	mov	r8,10
8000ccbc:	30 09       	mov	r9,0
8000ccbe:	f0 1f 00 8f 	mcall	8000cef8 <_vfprintf_r+0x1848>
8000ccc2:	30 a8       	mov	r8,10
8000ccc4:	2d 0a       	sub	r10,-48
8000ccc6:	30 09       	mov	r9,0
8000ccc8:	ac 8a       	st.b	r6[0x0],r10
8000ccca:	fa ea 00 00 	ld.d	r10,sp[0]
8000ccce:	f0 1f 00 8c 	mcall	8000cefc <_vfprintf_r+0x184c>
8000ccd2:	16 99       	mov	r9,r11
8000ccd4:	14 98       	mov	r8,r10
8000ccd6:	fa e9 00 00 	st.d	sp[0],r8
8000ccda:	20 16       	sub	r6,1
8000ccdc:	fa ea 00 00 	ld.d	r10,sp[0]
8000cce0:	58 9a       	cp.w	r10,9
8000cce2:	5c 2b       	cpc	r11
8000cce4:	fe 9b ff e9 	brhi	8000ccb6 <_vfprintf_r+0x1606>
8000cce8:	1b f8       	ld.ub	r8,sp[0x7]
8000ccea:	2d 08       	sub	r8,-48
8000ccec:	c2 08       	rjmp	8000cd2c <_vfprintf_r+0x167c>
8000ccee:	04 96       	mov	r6,r2
8000ccf0:	fa e8 00 00 	ld.d	r8,sp[0]
8000ccf4:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000ccf8:	40 de       	lddsp	lr,sp[0x34]
8000ccfa:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000ccfe:	0c fa       	st.b	--r6,r10
8000cd00:	f2 0b 16 04 	lsr	r11,r9,0x4
8000cd04:	f0 0a 16 04 	lsr	r10,r8,0x4
8000cd08:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000cd0c:	16 99       	mov	r9,r11
8000cd0e:	14 98       	mov	r8,r10
8000cd10:	58 08       	cp.w	r8,0
8000cd12:	5c 29       	cpc	r9
8000cd14:	cf 01       	brne	8000ccf4 <_vfprintf_r+0x1644>
8000cd16:	fa e9 00 00 	st.d	sp[0],r8
8000cd1a:	c0 c8       	rjmp	8000cd32 <_vfprintf_r+0x1682>
8000cd1c:	58 08       	cp.w	r8,0
8000cd1e:	c0 91       	brne	8000cd30 <_vfprintf_r+0x1680>
8000cd20:	ed b5 00 00 	bld	r5,0x0
8000cd24:	c0 61       	brne	8000cd30 <_vfprintf_r+0x1680>
8000cd26:	fa c6 f9 79 	sub	r6,sp,-1671
8000cd2a:	33 08       	mov	r8,48
8000cd2c:	ac 88       	st.b	r6[0x0],r8
8000cd2e:	c0 28       	rjmp	8000cd32 <_vfprintf_r+0x1682>
8000cd30:	04 96       	mov	r6,r2
8000cd32:	0c 12       	sub	r2,r6
8000cd34:	c1 c8       	rjmp	8000cd6c <_vfprintf_r+0x16bc>
8000cd36:	50 a7       	stdsp	sp[0x28],r7
8000cd38:	50 80       	stdsp	sp[0x20],r0
8000cd3a:	40 93       	lddsp	r3,sp[0x24]
8000cd3c:	0c 97       	mov	r7,r6
8000cd3e:	10 90       	mov	r0,r8
8000cd40:	04 94       	mov	r4,r2
8000cd42:	40 41       	lddsp	r1,sp[0x10]
8000cd44:	58 08       	cp.w	r8,0
8000cd46:	e0 80 04 65 	breq	8000d610 <_vfprintf_r+0x1f60>
8000cd4a:	fb 68 06 60 	st.b	sp[1632],r8
8000cd4e:	30 0c       	mov	r12,0
8000cd50:	30 08       	mov	r8,0
8000cd52:	30 12       	mov	r2,1
8000cd54:	fb 68 06 bb 	st.b	sp[1723],r8
8000cd58:	50 2c       	stdsp	sp[0x8],r12
8000cd5a:	fa c6 f9 a0 	sub	r6,sp,-1632
8000cd5e:	c0 78       	rjmp	8000cd6c <_vfprintf_r+0x16bc>
8000cd60:	30 0b       	mov	r11,0
8000cd62:	50 2b       	stdsp	sp[0x8],r11
8000cd64:	c0 48       	rjmp	8000cd6c <_vfprintf_r+0x16bc>
8000cd66:	40 22       	lddsp	r2,sp[0x8]
8000cd68:	30 0a       	mov	r10,0
8000cd6a:	50 2a       	stdsp	sp[0x8],r10
8000cd6c:	40 29       	lddsp	r9,sp[0x8]
8000cd6e:	e4 09 0c 49 	max	r9,r2,r9
8000cd72:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000cd76:	50 39       	stdsp	sp[0xc],r9
8000cd78:	0a 9e       	mov	lr,r5
8000cd7a:	30 09       	mov	r9,0
8000cd7c:	e2 1e 00 02 	andl	lr,0x2,COH
8000cd80:	f2 08 18 00 	cp.b	r8,r9
8000cd84:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000cd88:	f7 b8 01 ff 	subne	r8,-1
8000cd8c:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000cd90:	0a 9b       	mov	r11,r5
8000cd92:	58 0e       	cp.w	lr,0
8000cd94:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000cd98:	f7 bc 01 fe 	subne	r12,-2
8000cd9c:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000cda0:	e2 1b 00 84 	andl	r11,0x84,COH
8000cda4:	50 fe       	stdsp	sp[0x3c],lr
8000cda6:	50 9b       	stdsp	sp[0x24],r11
8000cda8:	c4 51       	brne	8000ce32 <_vfprintf_r+0x1782>
8000cdaa:	40 8a       	lddsp	r10,sp[0x20]
8000cdac:	40 39       	lddsp	r9,sp[0xc]
8000cdae:	12 1a       	sub	r10,r9
8000cdb0:	50 4a       	stdsp	sp[0x10],r10
8000cdb2:	58 0a       	cp.w	r10,0
8000cdb4:	e0 89 00 1f 	brgt	8000cdf2 <_vfprintf_r+0x1742>
8000cdb8:	c3 d8       	rjmp	8000ce32 <_vfprintf_r+0x1782>
8000cdba:	2f 09       	sub	r9,-16
8000cdbc:	2f f8       	sub	r8,-1
8000cdbe:	4d 1e       	lddpc	lr,8000cf00 <_vfprintf_r+0x1850>
8000cdc0:	31 0c       	mov	r12,16
8000cdc2:	fb 49 06 90 	st.w	sp[1680],r9
8000cdc6:	87 0e       	st.w	r3[0x0],lr
8000cdc8:	87 1c       	st.w	r3[0x4],r12
8000cdca:	fb 48 06 8c 	st.w	sp[1676],r8
8000cdce:	58 78       	cp.w	r8,7
8000cdd0:	e0 89 00 04 	brgt	8000cdd8 <_vfprintf_r+0x1728>
8000cdd4:	2f 83       	sub	r3,-8
8000cdd6:	c0 b8       	rjmp	8000cdec <_vfprintf_r+0x173c>
8000cdd8:	fa ca f9 78 	sub	r10,sp,-1672
8000cddc:	02 9b       	mov	r11,r1
8000cdde:	08 9c       	mov	r12,r4
8000cde0:	f0 1f 00 49 	mcall	8000cf04 <_vfprintf_r+0x1854>
8000cde4:	e0 81 04 27 	brne	8000d632 <_vfprintf_r+0x1f82>
8000cde8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000cdec:	40 4b       	lddsp	r11,sp[0x10]
8000cdee:	21 0b       	sub	r11,16
8000cdf0:	50 4b       	stdsp	sp[0x10],r11
8000cdf2:	fa f9 06 90 	ld.w	r9,sp[1680]
8000cdf6:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000cdfa:	4c 2a       	lddpc	r10,8000cf00 <_vfprintf_r+0x1850>
8000cdfc:	40 4e       	lddsp	lr,sp[0x10]
8000cdfe:	59 0e       	cp.w	lr,16
8000ce00:	fe 99 ff dd 	brgt	8000cdba <_vfprintf_r+0x170a>
8000ce04:	1c 09       	add	r9,lr
8000ce06:	2f f8       	sub	r8,-1
8000ce08:	87 0a       	st.w	r3[0x0],r10
8000ce0a:	fb 49 06 90 	st.w	sp[1680],r9
8000ce0e:	87 1e       	st.w	r3[0x4],lr
8000ce10:	fb 48 06 8c 	st.w	sp[1676],r8
8000ce14:	58 78       	cp.w	r8,7
8000ce16:	e0 89 00 04 	brgt	8000ce1e <_vfprintf_r+0x176e>
8000ce1a:	2f 83       	sub	r3,-8
8000ce1c:	c0 b8       	rjmp	8000ce32 <_vfprintf_r+0x1782>
8000ce1e:	fa ca f9 78 	sub	r10,sp,-1672
8000ce22:	02 9b       	mov	r11,r1
8000ce24:	08 9c       	mov	r12,r4
8000ce26:	f0 1f 00 38 	mcall	8000cf04 <_vfprintf_r+0x1854>
8000ce2a:	e0 81 04 04 	brne	8000d632 <_vfprintf_r+0x1f82>
8000ce2e:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ce32:	30 09       	mov	r9,0
8000ce34:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000ce38:	f2 08 18 00 	cp.b	r8,r9
8000ce3c:	c1 f0       	breq	8000ce7a <_vfprintf_r+0x17ca>
8000ce3e:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ce42:	fa c9 f9 45 	sub	r9,sp,-1723
8000ce46:	2f f8       	sub	r8,-1
8000ce48:	87 09       	st.w	r3[0x0],r9
8000ce4a:	fb 48 06 90 	st.w	sp[1680],r8
8000ce4e:	30 19       	mov	r9,1
8000ce50:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ce54:	87 19       	st.w	r3[0x4],r9
8000ce56:	2f f8       	sub	r8,-1
8000ce58:	fb 48 06 8c 	st.w	sp[1676],r8
8000ce5c:	58 78       	cp.w	r8,7
8000ce5e:	e0 89 00 04 	brgt	8000ce66 <_vfprintf_r+0x17b6>
8000ce62:	2f 83       	sub	r3,-8
8000ce64:	c0 b8       	rjmp	8000ce7a <_vfprintf_r+0x17ca>
8000ce66:	fa ca f9 78 	sub	r10,sp,-1672
8000ce6a:	02 9b       	mov	r11,r1
8000ce6c:	08 9c       	mov	r12,r4
8000ce6e:	f0 1f 00 26 	mcall	8000cf04 <_vfprintf_r+0x1854>
8000ce72:	e0 81 03 e0 	brne	8000d632 <_vfprintf_r+0x1f82>
8000ce76:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ce7a:	40 fc       	lddsp	r12,sp[0x3c]
8000ce7c:	58 0c       	cp.w	r12,0
8000ce7e:	c1 f0       	breq	8000cebc <_vfprintf_r+0x180c>
8000ce80:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ce84:	fa c9 f9 48 	sub	r9,sp,-1720
8000ce88:	2f e8       	sub	r8,-2
8000ce8a:	87 09       	st.w	r3[0x0],r9
8000ce8c:	fb 48 06 90 	st.w	sp[1680],r8
8000ce90:	30 29       	mov	r9,2
8000ce92:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ce96:	87 19       	st.w	r3[0x4],r9
8000ce98:	2f f8       	sub	r8,-1
8000ce9a:	fb 48 06 8c 	st.w	sp[1676],r8
8000ce9e:	58 78       	cp.w	r8,7
8000cea0:	e0 89 00 04 	brgt	8000cea8 <_vfprintf_r+0x17f8>
8000cea4:	2f 83       	sub	r3,-8
8000cea6:	c0 b8       	rjmp	8000cebc <_vfprintf_r+0x180c>
8000cea8:	fa ca f9 78 	sub	r10,sp,-1672
8000ceac:	02 9b       	mov	r11,r1
8000ceae:	08 9c       	mov	r12,r4
8000ceb0:	f0 1f 00 15 	mcall	8000cf04 <_vfprintf_r+0x1854>
8000ceb4:	e0 81 03 bf 	brne	8000d632 <_vfprintf_r+0x1f82>
8000ceb8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000cebc:	40 9b       	lddsp	r11,sp[0x24]
8000cebe:	e0 4b 00 80 	cp.w	r11,128
8000cec2:	c5 21       	brne	8000cf66 <_vfprintf_r+0x18b6>
8000cec4:	40 8a       	lddsp	r10,sp[0x20]
8000cec6:	40 39       	lddsp	r9,sp[0xc]
8000cec8:	12 1a       	sub	r10,r9
8000ceca:	50 4a       	stdsp	sp[0x10],r10
8000cecc:	58 0a       	cp.w	r10,0
8000cece:	e0 89 00 2c 	brgt	8000cf26 <_vfprintf_r+0x1876>
8000ced2:	c4 a8       	rjmp	8000cf66 <_vfprintf_r+0x18b6>
8000ced4:	2f 09       	sub	r9,-16
8000ced6:	2f f8       	sub	r8,-1
8000ced8:	48 ce       	lddpc	lr,8000cf08 <_vfprintf_r+0x1858>
8000ceda:	31 0c       	mov	r12,16
8000cedc:	fb 49 06 90 	st.w	sp[1680],r9
8000cee0:	87 0e       	st.w	r3[0x0],lr
8000cee2:	87 1c       	st.w	r3[0x4],r12
8000cee4:	fb 48 06 8c 	st.w	sp[1676],r8
8000cee8:	58 78       	cp.w	r8,7
8000ceea:	e0 89 00 11 	brgt	8000cf0c <_vfprintf_r+0x185c>
8000ceee:	2f 83       	sub	r3,-8
8000cef0:	c1 88       	rjmp	8000cf20 <_vfprintf_r+0x1870>
8000cef2:	00 00       	add	r0,r0
8000cef4:	80 00       	ld.sh	r0,r0[0x0]
8000cef6:	b3 6c       	lsl	r12,0x12
8000cef8:	80 01       	ld.sh	r1,r0[0x0]
8000cefa:	04 14       	sub	r4,r2
8000cefc:	80 00       	ld.sh	r0,r0[0x0]
8000cefe:	ae c2       	st.b	r7[0x4],r2
8000cf00:	80 01       	ld.sh	r1,r0[0x0]
8000cf02:	0f 08       	ld.w	r8,r7++
8000cf04:	80 00       	ld.sh	r0,r0[0x0]
8000cf06:	b6 90       	st.b	r11[0x1],r0
8000cf08:	80 01       	ld.sh	r1,r0[0x0]
8000cf0a:	0f 18       	ld.sh	r8,r7++
8000cf0c:	fa ca f9 78 	sub	r10,sp,-1672
8000cf10:	02 9b       	mov	r11,r1
8000cf12:	08 9c       	mov	r12,r4
8000cf14:	f0 1f 00 4c 	mcall	8000d044 <_vfprintf_r+0x1994>
8000cf18:	e0 81 03 8d 	brne	8000d632 <_vfprintf_r+0x1f82>
8000cf1c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000cf20:	40 4b       	lddsp	r11,sp[0x10]
8000cf22:	21 0b       	sub	r11,16
8000cf24:	50 4b       	stdsp	sp[0x10],r11
8000cf26:	fa f9 06 90 	ld.w	r9,sp[1680]
8000cf2a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000cf2e:	4c 7a       	lddpc	r10,8000d048 <_vfprintf_r+0x1998>
8000cf30:	40 4e       	lddsp	lr,sp[0x10]
8000cf32:	59 0e       	cp.w	lr,16
8000cf34:	fe 99 ff d0 	brgt	8000ced4 <_vfprintf_r+0x1824>
8000cf38:	1c 09       	add	r9,lr
8000cf3a:	2f f8       	sub	r8,-1
8000cf3c:	87 0a       	st.w	r3[0x0],r10
8000cf3e:	fb 49 06 90 	st.w	sp[1680],r9
8000cf42:	87 1e       	st.w	r3[0x4],lr
8000cf44:	fb 48 06 8c 	st.w	sp[1676],r8
8000cf48:	58 78       	cp.w	r8,7
8000cf4a:	e0 89 00 04 	brgt	8000cf52 <_vfprintf_r+0x18a2>
8000cf4e:	2f 83       	sub	r3,-8
8000cf50:	c0 b8       	rjmp	8000cf66 <_vfprintf_r+0x18b6>
8000cf52:	fa ca f9 78 	sub	r10,sp,-1672
8000cf56:	02 9b       	mov	r11,r1
8000cf58:	08 9c       	mov	r12,r4
8000cf5a:	f0 1f 00 3b 	mcall	8000d044 <_vfprintf_r+0x1994>
8000cf5e:	e0 81 03 6a 	brne	8000d632 <_vfprintf_r+0x1f82>
8000cf62:	fa c3 f9 e0 	sub	r3,sp,-1568
8000cf66:	40 2c       	lddsp	r12,sp[0x8]
8000cf68:	04 1c       	sub	r12,r2
8000cf6a:	50 2c       	stdsp	sp[0x8],r12
8000cf6c:	58 0c       	cp.w	r12,0
8000cf6e:	e0 89 00 1f 	brgt	8000cfac <_vfprintf_r+0x18fc>
8000cf72:	c3 d8       	rjmp	8000cfec <_vfprintf_r+0x193c>
8000cf74:	2f 09       	sub	r9,-16
8000cf76:	2f f8       	sub	r8,-1
8000cf78:	4b 4b       	lddpc	r11,8000d048 <_vfprintf_r+0x1998>
8000cf7a:	31 0a       	mov	r10,16
8000cf7c:	fb 49 06 90 	st.w	sp[1680],r9
8000cf80:	87 0b       	st.w	r3[0x0],r11
8000cf82:	87 1a       	st.w	r3[0x4],r10
8000cf84:	fb 48 06 8c 	st.w	sp[1676],r8
8000cf88:	58 78       	cp.w	r8,7
8000cf8a:	e0 89 00 04 	brgt	8000cf92 <_vfprintf_r+0x18e2>
8000cf8e:	2f 83       	sub	r3,-8
8000cf90:	c0 b8       	rjmp	8000cfa6 <_vfprintf_r+0x18f6>
8000cf92:	fa ca f9 78 	sub	r10,sp,-1672
8000cf96:	02 9b       	mov	r11,r1
8000cf98:	08 9c       	mov	r12,r4
8000cf9a:	f0 1f 00 2b 	mcall	8000d044 <_vfprintf_r+0x1994>
8000cf9e:	e0 81 03 4a 	brne	8000d632 <_vfprintf_r+0x1f82>
8000cfa2:	fa c3 f9 e0 	sub	r3,sp,-1568
8000cfa6:	40 29       	lddsp	r9,sp[0x8]
8000cfa8:	21 09       	sub	r9,16
8000cfaa:	50 29       	stdsp	sp[0x8],r9
8000cfac:	fa f9 06 90 	ld.w	r9,sp[1680]
8000cfb0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000cfb4:	4a 5a       	lddpc	r10,8000d048 <_vfprintf_r+0x1998>
8000cfb6:	40 2e       	lddsp	lr,sp[0x8]
8000cfb8:	59 0e       	cp.w	lr,16
8000cfba:	fe 99 ff dd 	brgt	8000cf74 <_vfprintf_r+0x18c4>
8000cfbe:	1c 09       	add	r9,lr
8000cfc0:	2f f8       	sub	r8,-1
8000cfc2:	87 0a       	st.w	r3[0x0],r10
8000cfc4:	fb 49 06 90 	st.w	sp[1680],r9
8000cfc8:	87 1e       	st.w	r3[0x4],lr
8000cfca:	fb 48 06 8c 	st.w	sp[1676],r8
8000cfce:	58 78       	cp.w	r8,7
8000cfd0:	e0 89 00 04 	brgt	8000cfd8 <_vfprintf_r+0x1928>
8000cfd4:	2f 83       	sub	r3,-8
8000cfd6:	c0 b8       	rjmp	8000cfec <_vfprintf_r+0x193c>
8000cfd8:	fa ca f9 78 	sub	r10,sp,-1672
8000cfdc:	02 9b       	mov	r11,r1
8000cfde:	08 9c       	mov	r12,r4
8000cfe0:	f0 1f 00 19 	mcall	8000d044 <_vfprintf_r+0x1994>
8000cfe4:	e0 81 03 27 	brne	8000d632 <_vfprintf_r+0x1f82>
8000cfe8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000cfec:	ed b5 00 08 	bld	r5,0x8
8000cff0:	c0 b0       	breq	8000d006 <_vfprintf_r+0x1956>
8000cff2:	fa f8 06 90 	ld.w	r8,sp[1680]
8000cff6:	87 12       	st.w	r3[0x4],r2
8000cff8:	87 06       	st.w	r3[0x0],r6
8000cffa:	f0 02 00 02 	add	r2,r8,r2
8000cffe:	fb 42 06 90 	st.w	sp[1680],r2
8000d002:	e0 8f 01 db 	bral	8000d3b8 <_vfprintf_r+0x1d08>
8000d006:	e0 40 00 65 	cp.w	r0,101
8000d00a:	e0 8a 01 dd 	brle	8000d3c4 <_vfprintf_r+0x1d14>
8000d00e:	30 08       	mov	r8,0
8000d010:	30 09       	mov	r9,0
8000d012:	40 5b       	lddsp	r11,sp[0x14]
8000d014:	40 7a       	lddsp	r10,sp[0x1c]
8000d016:	f0 1f 00 0e 	mcall	8000d04c <_vfprintf_r+0x199c>
8000d01a:	c7 e0       	breq	8000d116 <_vfprintf_r+0x1a66>
8000d01c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d020:	48 c9       	lddpc	r9,8000d050 <_vfprintf_r+0x19a0>
8000d022:	2f f8       	sub	r8,-1
8000d024:	87 09       	st.w	r3[0x0],r9
8000d026:	fb 48 06 90 	st.w	sp[1680],r8
8000d02a:	30 19       	mov	r9,1
8000d02c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d030:	87 19       	st.w	r3[0x4],r9
8000d032:	2f f8       	sub	r8,-1
8000d034:	fb 48 06 8c 	st.w	sp[1676],r8
8000d038:	58 78       	cp.w	r8,7
8000d03a:	e0 89 00 0d 	brgt	8000d054 <_vfprintf_r+0x19a4>
8000d03e:	2f 83       	sub	r3,-8
8000d040:	c1 48       	rjmp	8000d068 <_vfprintf_r+0x19b8>
8000d042:	00 00       	add	r0,r0
8000d044:	80 00       	ld.sh	r0,r0[0x0]
8000d046:	b6 90       	st.b	r11[0x1],r0
8000d048:	80 01       	ld.sh	r1,r0[0x0]
8000d04a:	0f 18       	ld.sh	r8,r7++
8000d04c:	80 01       	ld.sh	r1,r0[0x0]
8000d04e:	00 06       	add	r6,r0
8000d050:	80 01       	ld.sh	r1,r0[0x0]
8000d052:	0f 04       	ld.w	r4,r7++
8000d054:	fa ca f9 78 	sub	r10,sp,-1672
8000d058:	02 9b       	mov	r11,r1
8000d05a:	08 9c       	mov	r12,r4
8000d05c:	f0 1f 00 78 	mcall	8000d23c <_vfprintf_r+0x1b8c>
8000d060:	e0 81 02 e9 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d064:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d068:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000d06c:	40 6c       	lddsp	r12,sp[0x18]
8000d06e:	18 38       	cp.w	r8,r12
8000d070:	c0 55       	brlt	8000d07a <_vfprintf_r+0x19ca>
8000d072:	ed b5 00 00 	bld	r5,0x0
8000d076:	e0 81 02 6d 	brne	8000d550 <_vfprintf_r+0x1ea0>
8000d07a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d07e:	2f f8       	sub	r8,-1
8000d080:	40 cb       	lddsp	r11,sp[0x30]
8000d082:	fb 48 06 90 	st.w	sp[1680],r8
8000d086:	30 19       	mov	r9,1
8000d088:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d08c:	87 0b       	st.w	r3[0x0],r11
8000d08e:	2f f8       	sub	r8,-1
8000d090:	87 19       	st.w	r3[0x4],r9
8000d092:	fb 48 06 8c 	st.w	sp[1676],r8
8000d096:	58 78       	cp.w	r8,7
8000d098:	e0 89 00 04 	brgt	8000d0a0 <_vfprintf_r+0x19f0>
8000d09c:	2f 83       	sub	r3,-8
8000d09e:	c0 b8       	rjmp	8000d0b4 <_vfprintf_r+0x1a04>
8000d0a0:	fa ca f9 78 	sub	r10,sp,-1672
8000d0a4:	02 9b       	mov	r11,r1
8000d0a6:	08 9c       	mov	r12,r4
8000d0a8:	f0 1f 00 65 	mcall	8000d23c <_vfprintf_r+0x1b8c>
8000d0ac:	e0 81 02 c3 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d0b0:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d0b4:	40 66       	lddsp	r6,sp[0x18]
8000d0b6:	20 16       	sub	r6,1
8000d0b8:	58 06       	cp.w	r6,0
8000d0ba:	e0 89 00 1d 	brgt	8000d0f4 <_vfprintf_r+0x1a44>
8000d0be:	e0 8f 02 49 	bral	8000d550 <_vfprintf_r+0x1ea0>
8000d0c2:	2f 09       	sub	r9,-16
8000d0c4:	2f f8       	sub	r8,-1
8000d0c6:	fb 49 06 90 	st.w	sp[1680],r9
8000d0ca:	87 02       	st.w	r3[0x0],r2
8000d0cc:	87 10       	st.w	r3[0x4],r0
8000d0ce:	fb 48 06 8c 	st.w	sp[1676],r8
8000d0d2:	58 78       	cp.w	r8,7
8000d0d4:	e0 89 00 04 	brgt	8000d0dc <_vfprintf_r+0x1a2c>
8000d0d8:	2f 83       	sub	r3,-8
8000d0da:	c0 b8       	rjmp	8000d0f0 <_vfprintf_r+0x1a40>
8000d0dc:	fa ca f9 78 	sub	r10,sp,-1672
8000d0e0:	02 9b       	mov	r11,r1
8000d0e2:	08 9c       	mov	r12,r4
8000d0e4:	f0 1f 00 56 	mcall	8000d23c <_vfprintf_r+0x1b8c>
8000d0e8:	e0 81 02 a5 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d0ec:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d0f0:	21 06       	sub	r6,16
8000d0f2:	c0 38       	rjmp	8000d0f8 <_vfprintf_r+0x1a48>
8000d0f4:	4d 32       	lddpc	r2,8000d240 <_vfprintf_r+0x1b90>
8000d0f6:	31 00       	mov	r0,16
8000d0f8:	fa f9 06 90 	ld.w	r9,sp[1680]
8000d0fc:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d100:	4d 0a       	lddpc	r10,8000d240 <_vfprintf_r+0x1b90>
8000d102:	59 06       	cp.w	r6,16
8000d104:	fe 99 ff df 	brgt	8000d0c2 <_vfprintf_r+0x1a12>
8000d108:	0c 09       	add	r9,r6
8000d10a:	87 0a       	st.w	r3[0x0],r10
8000d10c:	fb 49 06 90 	st.w	sp[1680],r9
8000d110:	2f f8       	sub	r8,-1
8000d112:	87 16       	st.w	r3[0x4],r6
8000d114:	c5 59       	rjmp	8000d3be <_vfprintf_r+0x1d0e>
8000d116:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000d11a:	58 0a       	cp.w	r10,0
8000d11c:	e0 89 00 96 	brgt	8000d248 <_vfprintf_r+0x1b98>
8000d120:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d124:	4c 89       	lddpc	r9,8000d244 <_vfprintf_r+0x1b94>
8000d126:	2f f8       	sub	r8,-1
8000d128:	87 09       	st.w	r3[0x0],r9
8000d12a:	fb 48 06 90 	st.w	sp[1680],r8
8000d12e:	30 19       	mov	r9,1
8000d130:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d134:	87 19       	st.w	r3[0x4],r9
8000d136:	2f f8       	sub	r8,-1
8000d138:	fb 48 06 8c 	st.w	sp[1676],r8
8000d13c:	58 78       	cp.w	r8,7
8000d13e:	e0 89 00 04 	brgt	8000d146 <_vfprintf_r+0x1a96>
8000d142:	2f 83       	sub	r3,-8
8000d144:	c0 b8       	rjmp	8000d15a <_vfprintf_r+0x1aaa>
8000d146:	fa ca f9 78 	sub	r10,sp,-1672
8000d14a:	02 9b       	mov	r11,r1
8000d14c:	08 9c       	mov	r12,r4
8000d14e:	f0 1f 00 3c 	mcall	8000d23c <_vfprintf_r+0x1b8c>
8000d152:	e0 81 02 70 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d156:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d15a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000d15e:	58 08       	cp.w	r8,0
8000d160:	c0 81       	brne	8000d170 <_vfprintf_r+0x1ac0>
8000d162:	40 6a       	lddsp	r10,sp[0x18]
8000d164:	58 0a       	cp.w	r10,0
8000d166:	c0 51       	brne	8000d170 <_vfprintf_r+0x1ac0>
8000d168:	ed b5 00 00 	bld	r5,0x0
8000d16c:	e0 81 01 f2 	brne	8000d550 <_vfprintf_r+0x1ea0>
8000d170:	40 c9       	lddsp	r9,sp[0x30]
8000d172:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d176:	2f f8       	sub	r8,-1
8000d178:	87 09       	st.w	r3[0x0],r9
8000d17a:	fb 48 06 90 	st.w	sp[1680],r8
8000d17e:	30 19       	mov	r9,1
8000d180:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d184:	87 19       	st.w	r3[0x4],r9
8000d186:	2f f8       	sub	r8,-1
8000d188:	fb 48 06 8c 	st.w	sp[1676],r8
8000d18c:	58 78       	cp.w	r8,7
8000d18e:	e0 89 00 04 	brgt	8000d196 <_vfprintf_r+0x1ae6>
8000d192:	2f 83       	sub	r3,-8
8000d194:	c0 b8       	rjmp	8000d1aa <_vfprintf_r+0x1afa>
8000d196:	fa ca f9 78 	sub	r10,sp,-1672
8000d19a:	02 9b       	mov	r11,r1
8000d19c:	08 9c       	mov	r12,r4
8000d19e:	f0 1f 00 28 	mcall	8000d23c <_vfprintf_r+0x1b8c>
8000d1a2:	e0 81 02 48 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d1a6:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d1aa:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000d1ae:	5c 32       	neg	r2
8000d1b0:	58 02       	cp.w	r2,0
8000d1b2:	e0 89 00 1d 	brgt	8000d1ec <_vfprintf_r+0x1b3c>
8000d1b6:	c3 b8       	rjmp	8000d22c <_vfprintf_r+0x1b7c>
8000d1b8:	2f 09       	sub	r9,-16
8000d1ba:	2f f8       	sub	r8,-1
8000d1bc:	31 0e       	mov	lr,16
8000d1be:	fb 49 06 90 	st.w	sp[1680],r9
8000d1c2:	87 00       	st.w	r3[0x0],r0
8000d1c4:	87 1e       	st.w	r3[0x4],lr
8000d1c6:	fb 48 06 8c 	st.w	sp[1676],r8
8000d1ca:	58 78       	cp.w	r8,7
8000d1cc:	e0 89 00 04 	brgt	8000d1d4 <_vfprintf_r+0x1b24>
8000d1d0:	2f 83       	sub	r3,-8
8000d1d2:	c0 b8       	rjmp	8000d1e8 <_vfprintf_r+0x1b38>
8000d1d4:	fa ca f9 78 	sub	r10,sp,-1672
8000d1d8:	02 9b       	mov	r11,r1
8000d1da:	08 9c       	mov	r12,r4
8000d1dc:	f0 1f 00 18 	mcall	8000d23c <_vfprintf_r+0x1b8c>
8000d1e0:	e0 81 02 29 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d1e4:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d1e8:	21 02       	sub	r2,16
8000d1ea:	c0 28       	rjmp	8000d1ee <_vfprintf_r+0x1b3e>
8000d1ec:	49 50       	lddpc	r0,8000d240 <_vfprintf_r+0x1b90>
8000d1ee:	fa f9 06 90 	ld.w	r9,sp[1680]
8000d1f2:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d1f6:	49 3a       	lddpc	r10,8000d240 <_vfprintf_r+0x1b90>
8000d1f8:	59 02       	cp.w	r2,16
8000d1fa:	fe 99 ff df 	brgt	8000d1b8 <_vfprintf_r+0x1b08>
8000d1fe:	04 09       	add	r9,r2
8000d200:	2f f8       	sub	r8,-1
8000d202:	87 0a       	st.w	r3[0x0],r10
8000d204:	fb 49 06 90 	st.w	sp[1680],r9
8000d208:	87 12       	st.w	r3[0x4],r2
8000d20a:	fb 48 06 8c 	st.w	sp[1676],r8
8000d20e:	58 78       	cp.w	r8,7
8000d210:	e0 89 00 04 	brgt	8000d218 <_vfprintf_r+0x1b68>
8000d214:	2f 83       	sub	r3,-8
8000d216:	c0 b8       	rjmp	8000d22c <_vfprintf_r+0x1b7c>
8000d218:	fa ca f9 78 	sub	r10,sp,-1672
8000d21c:	02 9b       	mov	r11,r1
8000d21e:	08 9c       	mov	r12,r4
8000d220:	f0 1f 00 07 	mcall	8000d23c <_vfprintf_r+0x1b8c>
8000d224:	e0 81 02 07 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d228:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d22c:	40 6c       	lddsp	r12,sp[0x18]
8000d22e:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d232:	87 06       	st.w	r3[0x0],r6
8000d234:	87 1c       	st.w	r3[0x4],r12
8000d236:	18 08       	add	r8,r12
8000d238:	cb e8       	rjmp	8000d3b4 <_vfprintf_r+0x1d04>
8000d23a:	00 00       	add	r0,r0
8000d23c:	80 00       	ld.sh	r0,r0[0x0]
8000d23e:	b6 90       	st.b	r11[0x1],r0
8000d240:	80 01       	ld.sh	r1,r0[0x0]
8000d242:	0f 18       	ld.sh	r8,r7++
8000d244:	80 01       	ld.sh	r1,r0[0x0]
8000d246:	0f 04       	ld.w	r4,r7++
8000d248:	fa f9 06 90 	ld.w	r9,sp[1680]
8000d24c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d250:	40 6b       	lddsp	r11,sp[0x18]
8000d252:	16 3a       	cp.w	r10,r11
8000d254:	c6 d5       	brlt	8000d32e <_vfprintf_r+0x1c7e>
8000d256:	16 09       	add	r9,r11
8000d258:	2f f8       	sub	r8,-1
8000d25a:	87 06       	st.w	r3[0x0],r6
8000d25c:	fb 49 06 90 	st.w	sp[1680],r9
8000d260:	87 1b       	st.w	r3[0x4],r11
8000d262:	fb 48 06 8c 	st.w	sp[1676],r8
8000d266:	58 78       	cp.w	r8,7
8000d268:	e0 89 00 04 	brgt	8000d270 <_vfprintf_r+0x1bc0>
8000d26c:	2f 83       	sub	r3,-8
8000d26e:	c0 b8       	rjmp	8000d284 <_vfprintf_r+0x1bd4>
8000d270:	fa ca f9 78 	sub	r10,sp,-1672
8000d274:	02 9b       	mov	r11,r1
8000d276:	08 9c       	mov	r12,r4
8000d278:	f0 1f 00 6f 	mcall	8000d434 <_vfprintf_r+0x1d84>
8000d27c:	e0 81 01 db 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d280:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d284:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000d288:	40 6a       	lddsp	r10,sp[0x18]
8000d28a:	14 16       	sub	r6,r10
8000d28c:	58 06       	cp.w	r6,0
8000d28e:	e0 89 00 1c 	brgt	8000d2c6 <_vfprintf_r+0x1c16>
8000d292:	c3 b8       	rjmp	8000d308 <_vfprintf_r+0x1c58>
8000d294:	2f 09       	sub	r9,-16
8000d296:	2f f8       	sub	r8,-1
8000d298:	fb 49 06 90 	st.w	sp[1680],r9
8000d29c:	87 02       	st.w	r3[0x0],r2
8000d29e:	87 10       	st.w	r3[0x4],r0
8000d2a0:	fb 48 06 8c 	st.w	sp[1676],r8
8000d2a4:	58 78       	cp.w	r8,7
8000d2a6:	e0 89 00 04 	brgt	8000d2ae <_vfprintf_r+0x1bfe>
8000d2aa:	2f 83       	sub	r3,-8
8000d2ac:	c0 b8       	rjmp	8000d2c2 <_vfprintf_r+0x1c12>
8000d2ae:	fa ca f9 78 	sub	r10,sp,-1672
8000d2b2:	02 9b       	mov	r11,r1
8000d2b4:	08 9c       	mov	r12,r4
8000d2b6:	f0 1f 00 60 	mcall	8000d434 <_vfprintf_r+0x1d84>
8000d2ba:	e0 81 01 bc 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d2be:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d2c2:	21 06       	sub	r6,16
8000d2c4:	c0 38       	rjmp	8000d2ca <_vfprintf_r+0x1c1a>
8000d2c6:	4d d2       	lddpc	r2,8000d438 <_vfprintf_r+0x1d88>
8000d2c8:	31 00       	mov	r0,16
8000d2ca:	fa f9 06 90 	ld.w	r9,sp[1680]
8000d2ce:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d2d2:	4d aa       	lddpc	r10,8000d438 <_vfprintf_r+0x1d88>
8000d2d4:	59 06       	cp.w	r6,16
8000d2d6:	fe 99 ff df 	brgt	8000d294 <_vfprintf_r+0x1be4>
8000d2da:	0c 09       	add	r9,r6
8000d2dc:	2f f8       	sub	r8,-1
8000d2de:	87 0a       	st.w	r3[0x0],r10
8000d2e0:	fb 49 06 90 	st.w	sp[1680],r9
8000d2e4:	87 16       	st.w	r3[0x4],r6
8000d2e6:	fb 48 06 8c 	st.w	sp[1676],r8
8000d2ea:	58 78       	cp.w	r8,7
8000d2ec:	e0 89 00 04 	brgt	8000d2f4 <_vfprintf_r+0x1c44>
8000d2f0:	2f 83       	sub	r3,-8
8000d2f2:	c0 b8       	rjmp	8000d308 <_vfprintf_r+0x1c58>
8000d2f4:	fa ca f9 78 	sub	r10,sp,-1672
8000d2f8:	02 9b       	mov	r11,r1
8000d2fa:	08 9c       	mov	r12,r4
8000d2fc:	f0 1f 00 4e 	mcall	8000d434 <_vfprintf_r+0x1d84>
8000d300:	e0 81 01 99 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d304:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d308:	ed b5 00 00 	bld	r5,0x0
8000d30c:	e0 81 01 22 	brne	8000d550 <_vfprintf_r+0x1ea0>
8000d310:	40 c9       	lddsp	r9,sp[0x30]
8000d312:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d316:	2f f8       	sub	r8,-1
8000d318:	87 09       	st.w	r3[0x0],r9
8000d31a:	fb 48 06 90 	st.w	sp[1680],r8
8000d31e:	30 19       	mov	r9,1
8000d320:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d324:	87 19       	st.w	r3[0x4],r9
8000d326:	2f f8       	sub	r8,-1
8000d328:	fb 48 06 8c 	st.w	sp[1676],r8
8000d32c:	c0 49       	rjmp	8000d534 <_vfprintf_r+0x1e84>
8000d32e:	14 09       	add	r9,r10
8000d330:	2f f8       	sub	r8,-1
8000d332:	fb 49 06 90 	st.w	sp[1680],r9
8000d336:	87 06       	st.w	r3[0x0],r6
8000d338:	87 1a       	st.w	r3[0x4],r10
8000d33a:	fb 48 06 8c 	st.w	sp[1676],r8
8000d33e:	58 78       	cp.w	r8,7
8000d340:	e0 89 00 04 	brgt	8000d348 <_vfprintf_r+0x1c98>
8000d344:	2f 83       	sub	r3,-8
8000d346:	c0 b8       	rjmp	8000d35c <_vfprintf_r+0x1cac>
8000d348:	fa ca f9 78 	sub	r10,sp,-1672
8000d34c:	02 9b       	mov	r11,r1
8000d34e:	08 9c       	mov	r12,r4
8000d350:	f0 1f 00 39 	mcall	8000d434 <_vfprintf_r+0x1d84>
8000d354:	e0 81 01 6f 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d358:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d35c:	40 c8       	lddsp	r8,sp[0x30]
8000d35e:	87 08       	st.w	r3[0x0],r8
8000d360:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d364:	2f f8       	sub	r8,-1
8000d366:	30 19       	mov	r9,1
8000d368:	fb 48 06 90 	st.w	sp[1680],r8
8000d36c:	87 19       	st.w	r3[0x4],r9
8000d36e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d372:	2f f8       	sub	r8,-1
8000d374:	fb 48 06 8c 	st.w	sp[1676],r8
8000d378:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000d37c:	58 78       	cp.w	r8,7
8000d37e:	e0 89 00 04 	brgt	8000d386 <_vfprintf_r+0x1cd6>
8000d382:	2f 83       	sub	r3,-8
8000d384:	c0 b8       	rjmp	8000d39a <_vfprintf_r+0x1cea>
8000d386:	fa ca f9 78 	sub	r10,sp,-1672
8000d38a:	02 9b       	mov	r11,r1
8000d38c:	08 9c       	mov	r12,r4
8000d38e:	f0 1f 00 2a 	mcall	8000d434 <_vfprintf_r+0x1d84>
8000d392:	e0 81 01 50 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d396:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d39a:	04 06       	add	r6,r2
8000d39c:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000d3a0:	87 06       	st.w	r3[0x0],r6
8000d3a2:	fa f9 06 90 	ld.w	r9,sp[1680]
8000d3a6:	40 66       	lddsp	r6,sp[0x18]
8000d3a8:	40 6e       	lddsp	lr,sp[0x18]
8000d3aa:	10 16       	sub	r6,r8
8000d3ac:	f2 08 01 08 	sub	r8,r9,r8
8000d3b0:	87 16       	st.w	r3[0x4],r6
8000d3b2:	1c 08       	add	r8,lr
8000d3b4:	fb 48 06 90 	st.w	sp[1680],r8
8000d3b8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d3bc:	2f f8       	sub	r8,-1
8000d3be:	fb 48 06 8c 	st.w	sp[1676],r8
8000d3c2:	cb 98       	rjmp	8000d534 <_vfprintf_r+0x1e84>
8000d3c4:	40 6c       	lddsp	r12,sp[0x18]
8000d3c6:	58 1c       	cp.w	r12,1
8000d3c8:	e0 89 00 06 	brgt	8000d3d4 <_vfprintf_r+0x1d24>
8000d3cc:	ed b5 00 00 	bld	r5,0x0
8000d3d0:	e0 81 00 87 	brne	8000d4de <_vfprintf_r+0x1e2e>
8000d3d4:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d3d8:	2f f8       	sub	r8,-1
8000d3da:	30 19       	mov	r9,1
8000d3dc:	fb 48 06 90 	st.w	sp[1680],r8
8000d3e0:	87 06       	st.w	r3[0x0],r6
8000d3e2:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d3e6:	87 19       	st.w	r3[0x4],r9
8000d3e8:	2f f8       	sub	r8,-1
8000d3ea:	fb 48 06 8c 	st.w	sp[1676],r8
8000d3ee:	58 78       	cp.w	r8,7
8000d3f0:	e0 89 00 04 	brgt	8000d3f8 <_vfprintf_r+0x1d48>
8000d3f4:	2f 83       	sub	r3,-8
8000d3f6:	c0 b8       	rjmp	8000d40c <_vfprintf_r+0x1d5c>
8000d3f8:	fa ca f9 78 	sub	r10,sp,-1672
8000d3fc:	02 9b       	mov	r11,r1
8000d3fe:	08 9c       	mov	r12,r4
8000d400:	f0 1f 00 0d 	mcall	8000d434 <_vfprintf_r+0x1d84>
8000d404:	e0 81 01 17 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d408:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d40c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d410:	2f f8       	sub	r8,-1
8000d412:	40 cb       	lddsp	r11,sp[0x30]
8000d414:	fb 48 06 90 	st.w	sp[1680],r8
8000d418:	30 19       	mov	r9,1
8000d41a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d41e:	87 0b       	st.w	r3[0x0],r11
8000d420:	2f f8       	sub	r8,-1
8000d422:	87 19       	st.w	r3[0x4],r9
8000d424:	fb 48 06 8c 	st.w	sp[1676],r8
8000d428:	58 78       	cp.w	r8,7
8000d42a:	e0 89 00 09 	brgt	8000d43c <_vfprintf_r+0x1d8c>
8000d42e:	2f 83       	sub	r3,-8
8000d430:	c1 08       	rjmp	8000d450 <_vfprintf_r+0x1da0>
8000d432:	00 00       	add	r0,r0
8000d434:	80 00       	ld.sh	r0,r0[0x0]
8000d436:	b6 90       	st.b	r11[0x1],r0
8000d438:	80 01       	ld.sh	r1,r0[0x0]
8000d43a:	0f 18       	ld.sh	r8,r7++
8000d43c:	fa ca f9 78 	sub	r10,sp,-1672
8000d440:	02 9b       	mov	r11,r1
8000d442:	08 9c       	mov	r12,r4
8000d444:	f0 1f 00 6f 	mcall	8000d600 <_vfprintf_r+0x1f50>
8000d448:	e0 81 00 f5 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d44c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d450:	30 08       	mov	r8,0
8000d452:	30 09       	mov	r9,0
8000d454:	40 5b       	lddsp	r11,sp[0x14]
8000d456:	40 7a       	lddsp	r10,sp[0x1c]
8000d458:	f0 1f 00 6b 	mcall	8000d604 <_vfprintf_r+0x1f54>
8000d45c:	40 68       	lddsp	r8,sp[0x18]
8000d45e:	20 18       	sub	r8,1
8000d460:	58 0c       	cp.w	r12,0
8000d462:	c0 d1       	brne	8000d47c <_vfprintf_r+0x1dcc>
8000d464:	2f f6       	sub	r6,-1
8000d466:	87 18       	st.w	r3[0x4],r8
8000d468:	87 06       	st.w	r3[0x0],r6
8000d46a:	fa f6 06 90 	ld.w	r6,sp[1680]
8000d46e:	10 06       	add	r6,r8
8000d470:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d474:	fb 46 06 90 	st.w	sp[1680],r6
8000d478:	2f f8       	sub	r8,-1
8000d47a:	c2 f8       	rjmp	8000d4d8 <_vfprintf_r+0x1e28>
8000d47c:	10 96       	mov	r6,r8
8000d47e:	58 08       	cp.w	r8,0
8000d480:	e0 89 00 1c 	brgt	8000d4b8 <_vfprintf_r+0x1e08>
8000d484:	c4 98       	rjmp	8000d516 <_vfprintf_r+0x1e66>
8000d486:	2f 09       	sub	r9,-16
8000d488:	2f f8       	sub	r8,-1
8000d48a:	fb 49 06 90 	st.w	sp[1680],r9
8000d48e:	87 02       	st.w	r3[0x0],r2
8000d490:	87 10       	st.w	r3[0x4],r0
8000d492:	fb 48 06 8c 	st.w	sp[1676],r8
8000d496:	58 78       	cp.w	r8,7
8000d498:	e0 89 00 04 	brgt	8000d4a0 <_vfprintf_r+0x1df0>
8000d49c:	2f 83       	sub	r3,-8
8000d49e:	c0 b8       	rjmp	8000d4b4 <_vfprintf_r+0x1e04>
8000d4a0:	fa ca f9 78 	sub	r10,sp,-1672
8000d4a4:	02 9b       	mov	r11,r1
8000d4a6:	08 9c       	mov	r12,r4
8000d4a8:	f0 1f 00 56 	mcall	8000d600 <_vfprintf_r+0x1f50>
8000d4ac:	e0 81 00 c3 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d4b0:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d4b4:	21 06       	sub	r6,16
8000d4b6:	c0 38       	rjmp	8000d4bc <_vfprintf_r+0x1e0c>
8000d4b8:	4d 42       	lddpc	r2,8000d608 <_vfprintf_r+0x1f58>
8000d4ba:	31 00       	mov	r0,16
8000d4bc:	fa f9 06 90 	ld.w	r9,sp[1680]
8000d4c0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d4c4:	4d 1a       	lddpc	r10,8000d608 <_vfprintf_r+0x1f58>
8000d4c6:	59 06       	cp.w	r6,16
8000d4c8:	fe 99 ff df 	brgt	8000d486 <_vfprintf_r+0x1dd6>
8000d4cc:	0c 09       	add	r9,r6
8000d4ce:	87 0a       	st.w	r3[0x0],r10
8000d4d0:	fb 49 06 90 	st.w	sp[1680],r9
8000d4d4:	2f f8       	sub	r8,-1
8000d4d6:	87 16       	st.w	r3[0x4],r6
8000d4d8:	fb 48 06 8c 	st.w	sp[1676],r8
8000d4dc:	c0 e8       	rjmp	8000d4f8 <_vfprintf_r+0x1e48>
8000d4de:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d4e2:	2f f8       	sub	r8,-1
8000d4e4:	30 19       	mov	r9,1
8000d4e6:	fb 48 06 90 	st.w	sp[1680],r8
8000d4ea:	87 06       	st.w	r3[0x0],r6
8000d4ec:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d4f0:	87 19       	st.w	r3[0x4],r9
8000d4f2:	2f f8       	sub	r8,-1
8000d4f4:	fb 48 06 8c 	st.w	sp[1676],r8
8000d4f8:	58 78       	cp.w	r8,7
8000d4fa:	e0 89 00 04 	brgt	8000d502 <_vfprintf_r+0x1e52>
8000d4fe:	2f 83       	sub	r3,-8
8000d500:	c0 b8       	rjmp	8000d516 <_vfprintf_r+0x1e66>
8000d502:	fa ca f9 78 	sub	r10,sp,-1672
8000d506:	02 9b       	mov	r11,r1
8000d508:	08 9c       	mov	r12,r4
8000d50a:	f0 1f 00 3e 	mcall	8000d600 <_vfprintf_r+0x1f50>
8000d50e:	e0 81 00 92 	brne	8000d632 <_vfprintf_r+0x1f82>
8000d512:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d516:	40 ea       	lddsp	r10,sp[0x38]
8000d518:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d51c:	14 08       	add	r8,r10
8000d51e:	fa c9 f9 64 	sub	r9,sp,-1692
8000d522:	fb 48 06 90 	st.w	sp[1680],r8
8000d526:	87 1a       	st.w	r3[0x4],r10
8000d528:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d52c:	87 09       	st.w	r3[0x0],r9
8000d52e:	2f f8       	sub	r8,-1
8000d530:	fb 48 06 8c 	st.w	sp[1676],r8
8000d534:	58 78       	cp.w	r8,7
8000d536:	e0 89 00 04 	brgt	8000d53e <_vfprintf_r+0x1e8e>
8000d53a:	2f 83       	sub	r3,-8
8000d53c:	c0 a8       	rjmp	8000d550 <_vfprintf_r+0x1ea0>
8000d53e:	fa ca f9 78 	sub	r10,sp,-1672
8000d542:	02 9b       	mov	r11,r1
8000d544:	08 9c       	mov	r12,r4
8000d546:	f0 1f 00 2f 	mcall	8000d600 <_vfprintf_r+0x1f50>
8000d54a:	c7 41       	brne	8000d632 <_vfprintf_r+0x1f82>
8000d54c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d550:	e2 15 00 04 	andl	r5,0x4,COH
8000d554:	c3 d0       	breq	8000d5ce <_vfprintf_r+0x1f1e>
8000d556:	40 86       	lddsp	r6,sp[0x20]
8000d558:	40 39       	lddsp	r9,sp[0xc]
8000d55a:	12 16       	sub	r6,r9
8000d55c:	58 06       	cp.w	r6,0
8000d55e:	e0 89 00 1a 	brgt	8000d592 <_vfprintf_r+0x1ee2>
8000d562:	c3 68       	rjmp	8000d5ce <_vfprintf_r+0x1f1e>
8000d564:	2f 09       	sub	r9,-16
8000d566:	2f f8       	sub	r8,-1
8000d568:	fb 49 06 90 	st.w	sp[1680],r9
8000d56c:	87 05       	st.w	r3[0x0],r5
8000d56e:	87 12       	st.w	r3[0x4],r2
8000d570:	fb 48 06 8c 	st.w	sp[1676],r8
8000d574:	58 78       	cp.w	r8,7
8000d576:	e0 89 00 04 	brgt	8000d57e <_vfprintf_r+0x1ece>
8000d57a:	2f 83       	sub	r3,-8
8000d57c:	c0 98       	rjmp	8000d58e <_vfprintf_r+0x1ede>
8000d57e:	00 9a       	mov	r10,r0
8000d580:	02 9b       	mov	r11,r1
8000d582:	08 9c       	mov	r12,r4
8000d584:	f0 1f 00 1f 	mcall	8000d600 <_vfprintf_r+0x1f50>
8000d588:	c5 51       	brne	8000d632 <_vfprintf_r+0x1f82>
8000d58a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d58e:	21 06       	sub	r6,16
8000d590:	c0 58       	rjmp	8000d59a <_vfprintf_r+0x1eea>
8000d592:	49 f5       	lddpc	r5,8000d60c <_vfprintf_r+0x1f5c>
8000d594:	31 02       	mov	r2,16
8000d596:	fa c0 f9 78 	sub	r0,sp,-1672
8000d59a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000d59e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d5a2:	49 ba       	lddpc	r10,8000d60c <_vfprintf_r+0x1f5c>
8000d5a4:	59 06       	cp.w	r6,16
8000d5a6:	fe 99 ff df 	brgt	8000d564 <_vfprintf_r+0x1eb4>
8000d5aa:	0c 09       	add	r9,r6
8000d5ac:	2f f8       	sub	r8,-1
8000d5ae:	87 0a       	st.w	r3[0x0],r10
8000d5b0:	87 16       	st.w	r3[0x4],r6
8000d5b2:	fb 49 06 90 	st.w	sp[1680],r9
8000d5b6:	fb 48 06 8c 	st.w	sp[1676],r8
8000d5ba:	58 78       	cp.w	r8,7
8000d5bc:	e0 8a 00 09 	brle	8000d5ce <_vfprintf_r+0x1f1e>
8000d5c0:	fa ca f9 78 	sub	r10,sp,-1672
8000d5c4:	02 9b       	mov	r11,r1
8000d5c6:	08 9c       	mov	r12,r4
8000d5c8:	f0 1f 00 0e 	mcall	8000d600 <_vfprintf_r+0x1f50>
8000d5cc:	c3 31       	brne	8000d632 <_vfprintf_r+0x1f82>
8000d5ce:	40 bc       	lddsp	r12,sp[0x2c]
8000d5d0:	40 36       	lddsp	r6,sp[0xc]
8000d5d2:	40 8e       	lddsp	lr,sp[0x20]
8000d5d4:	ec 0e 0c 48 	max	r8,r6,lr
8000d5d8:	10 0c       	add	r12,r8
8000d5da:	50 bc       	stdsp	sp[0x2c],r12
8000d5dc:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d5e0:	58 08       	cp.w	r8,0
8000d5e2:	c0 80       	breq	8000d5f2 <_vfprintf_r+0x1f42>
8000d5e4:	fa ca f9 78 	sub	r10,sp,-1672
8000d5e8:	02 9b       	mov	r11,r1
8000d5ea:	08 9c       	mov	r12,r4
8000d5ec:	f0 1f 00 05 	mcall	8000d600 <_vfprintf_r+0x1f50>
8000d5f0:	c2 11       	brne	8000d632 <_vfprintf_r+0x1f82>
8000d5f2:	30 0b       	mov	r11,0
8000d5f4:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d5f8:	fb 4b 06 8c 	st.w	sp[1676],r11
8000d5fc:	fe 9f f0 e6 	bral	8000b7c8 <_vfprintf_r+0x118>
8000d600:	80 00       	ld.sh	r0,r0[0x0]
8000d602:	b6 90       	st.b	r11[0x1],r0
8000d604:	80 01       	ld.sh	r1,r0[0x0]
8000d606:	00 06       	add	r6,r0
8000d608:	80 01       	ld.sh	r1,r0[0x0]
8000d60a:	0f 18       	ld.sh	r8,r7++
8000d60c:	80 01       	ld.sh	r1,r0[0x0]
8000d60e:	0f 08       	ld.w	r8,r7++
8000d610:	08 95       	mov	r5,r4
8000d612:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d616:	58 08       	cp.w	r8,0
8000d618:	c0 80       	breq	8000d628 <_vfprintf_r+0x1f78>
8000d61a:	08 9c       	mov	r12,r4
8000d61c:	fa ca f9 78 	sub	r10,sp,-1672
8000d620:	02 9b       	mov	r11,r1
8000d622:	f0 1f 00 0a 	mcall	8000d648 <_vfprintf_r+0x1f98>
8000d626:	c0 61       	brne	8000d632 <_vfprintf_r+0x1f82>
8000d628:	30 08       	mov	r8,0
8000d62a:	fb 48 06 8c 	st.w	sp[1676],r8
8000d62e:	c0 28       	rjmp	8000d632 <_vfprintf_r+0x1f82>
8000d630:	40 41       	lddsp	r1,sp[0x10]
8000d632:	82 68       	ld.sh	r8,r1[0xc]
8000d634:	ed b8 00 06 	bld	r8,0x6
8000d638:	c0 31       	brne	8000d63e <_vfprintf_r+0x1f8e>
8000d63a:	3f fa       	mov	r10,-1
8000d63c:	50 ba       	stdsp	sp[0x2c],r10
8000d63e:	40 bc       	lddsp	r12,sp[0x2c]
8000d640:	fe 3d f9 44 	sub	sp,-1724
8000d644:	d8 32       	popm	r0-r7,pc
8000d646:	00 00       	add	r0,r0
8000d648:	80 00       	ld.sh	r0,r0[0x0]
8000d64a:	b6 90       	st.b	r11[0x1],r0

8000d64c <__swsetup_r>:
8000d64c:	d4 21       	pushm	r4-r7,lr
8000d64e:	4b 38       	lddpc	r8,8000d718 <__swsetup_r+0xcc>
8000d650:	18 96       	mov	r6,r12
8000d652:	16 97       	mov	r7,r11
8000d654:	70 0c       	ld.w	r12,r8[0x0]
8000d656:	58 0c       	cp.w	r12,0
8000d658:	c0 60       	breq	8000d664 <__swsetup_r+0x18>
8000d65a:	78 68       	ld.w	r8,r12[0x18]
8000d65c:	58 08       	cp.w	r8,0
8000d65e:	c0 31       	brne	8000d664 <__swsetup_r+0x18>
8000d660:	f0 1f 00 2f 	mcall	8000d71c <__swsetup_r+0xd0>
8000d664:	4a f8       	lddpc	r8,8000d720 <__swsetup_r+0xd4>
8000d666:	10 37       	cp.w	r7,r8
8000d668:	c0 51       	brne	8000d672 <__swsetup_r+0x26>
8000d66a:	4a c8       	lddpc	r8,8000d718 <__swsetup_r+0xcc>
8000d66c:	70 08       	ld.w	r8,r8[0x0]
8000d66e:	70 07       	ld.w	r7,r8[0x0]
8000d670:	c0 e8       	rjmp	8000d68c <__swsetup_r+0x40>
8000d672:	4a d8       	lddpc	r8,8000d724 <__swsetup_r+0xd8>
8000d674:	10 37       	cp.w	r7,r8
8000d676:	c0 51       	brne	8000d680 <__swsetup_r+0x34>
8000d678:	4a 88       	lddpc	r8,8000d718 <__swsetup_r+0xcc>
8000d67a:	70 08       	ld.w	r8,r8[0x0]
8000d67c:	70 17       	ld.w	r7,r8[0x4]
8000d67e:	c0 78       	rjmp	8000d68c <__swsetup_r+0x40>
8000d680:	4a a8       	lddpc	r8,8000d728 <__swsetup_r+0xdc>
8000d682:	10 37       	cp.w	r7,r8
8000d684:	c0 41       	brne	8000d68c <__swsetup_r+0x40>
8000d686:	4a 58       	lddpc	r8,8000d718 <__swsetup_r+0xcc>
8000d688:	70 08       	ld.w	r8,r8[0x0]
8000d68a:	70 27       	ld.w	r7,r8[0x8]
8000d68c:	8e 68       	ld.sh	r8,r7[0xc]
8000d68e:	ed b8 00 03 	bld	r8,0x3
8000d692:	c1 e0       	breq	8000d6ce <__swsetup_r+0x82>
8000d694:	ed b8 00 04 	bld	r8,0x4
8000d698:	c3 e1       	brne	8000d714 <__swsetup_r+0xc8>
8000d69a:	ed b8 00 02 	bld	r8,0x2
8000d69e:	c1 51       	brne	8000d6c8 <__swsetup_r+0x7c>
8000d6a0:	6e db       	ld.w	r11,r7[0x34]
8000d6a2:	58 0b       	cp.w	r11,0
8000d6a4:	c0 a0       	breq	8000d6b8 <__swsetup_r+0x6c>
8000d6a6:	ee c8 ff bc 	sub	r8,r7,-68
8000d6aa:	10 3b       	cp.w	r11,r8
8000d6ac:	c0 40       	breq	8000d6b4 <__swsetup_r+0x68>
8000d6ae:	0c 9c       	mov	r12,r6
8000d6b0:	f0 1f 00 1f 	mcall	8000d72c <__swsetup_r+0xe0>
8000d6b4:	30 08       	mov	r8,0
8000d6b6:	8f d8       	st.w	r7[0x34],r8
8000d6b8:	8e 68       	ld.sh	r8,r7[0xc]
8000d6ba:	e0 18 ff db 	andl	r8,0xffdb
8000d6be:	ae 68       	st.h	r7[0xc],r8
8000d6c0:	30 08       	mov	r8,0
8000d6c2:	8f 18       	st.w	r7[0x4],r8
8000d6c4:	6e 48       	ld.w	r8,r7[0x10]
8000d6c6:	8f 08       	st.w	r7[0x0],r8
8000d6c8:	8e 68       	ld.sh	r8,r7[0xc]
8000d6ca:	a3 b8       	sbr	r8,0x3
8000d6cc:	ae 68       	st.h	r7[0xc],r8
8000d6ce:	6e 48       	ld.w	r8,r7[0x10]
8000d6d0:	58 08       	cp.w	r8,0
8000d6d2:	c0 b1       	brne	8000d6e8 <__swsetup_r+0x9c>
8000d6d4:	8e 68       	ld.sh	r8,r7[0xc]
8000d6d6:	e2 18 02 80 	andl	r8,0x280,COH
8000d6da:	e0 48 02 00 	cp.w	r8,512
8000d6de:	c0 50       	breq	8000d6e8 <__swsetup_r+0x9c>
8000d6e0:	0c 9c       	mov	r12,r6
8000d6e2:	0e 9b       	mov	r11,r7
8000d6e4:	f0 1f 00 13 	mcall	8000d730 <__swsetup_r+0xe4>
8000d6e8:	8e 69       	ld.sh	r9,r7[0xc]
8000d6ea:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000d6ee:	c0 70       	breq	8000d6fc <__swsetup_r+0xb0>
8000d6f0:	30 08       	mov	r8,0
8000d6f2:	8f 28       	st.w	r7[0x8],r8
8000d6f4:	6e 58       	ld.w	r8,r7[0x14]
8000d6f6:	5c 38       	neg	r8
8000d6f8:	8f 68       	st.w	r7[0x18],r8
8000d6fa:	c0 68       	rjmp	8000d706 <__swsetup_r+0xba>
8000d6fc:	ed b9 00 01 	bld	r9,0x1
8000d700:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000d704:	8f 28       	st.w	r7[0x8],r8
8000d706:	6e 48       	ld.w	r8,r7[0x10]
8000d708:	58 08       	cp.w	r8,0
8000d70a:	c0 61       	brne	8000d716 <__swsetup_r+0xca>
8000d70c:	8e 68       	ld.sh	r8,r7[0xc]
8000d70e:	ed b8 00 07 	bld	r8,0x7
8000d712:	c0 21       	brne	8000d716 <__swsetup_r+0xca>
8000d714:	dc 2a       	popm	r4-r7,pc,r12=-1
8000d716:	d8 2a       	popm	r4-r7,pc,r12=0
8000d718:	00 00       	add	r0,r0
8000d71a:	01 a4       	ld.ub	r4,r0[0x2]
8000d71c:	80 00       	ld.sh	r0,r0[0x0]
8000d71e:	e6 c4 80 01 	sub	r4,r3,-32767
8000d722:	10 38       	cp.w	r8,r8
8000d724:	80 01       	ld.sh	r1,r0[0x0]
8000d726:	10 58       	eor	r8,r8
8000d728:	80 01       	ld.sh	r1,r0[0x0]
8000d72a:	10 78       	tst	r8,r8
8000d72c:	80 00       	ld.sh	r0,r0[0x0]
8000d72e:	e8 1c 80 00 	orl	r12,0x8000
8000d732:	ec dc d4 31 	satsub.w	r12,r6,-11215

8000d734 <quorem>:
8000d734:	d4 31       	pushm	r0-r7,lr
8000d736:	20 2d       	sub	sp,8
8000d738:	18 97       	mov	r7,r12
8000d73a:	78 48       	ld.w	r8,r12[0x10]
8000d73c:	76 46       	ld.w	r6,r11[0x10]
8000d73e:	0c 38       	cp.w	r8,r6
8000d740:	c0 34       	brge	8000d746 <quorem+0x12>
8000d742:	30 0c       	mov	r12,0
8000d744:	c8 58       	rjmp	8000d84e <quorem+0x11a>
8000d746:	ec c2 ff fc 	sub	r2,r6,-4
8000d74a:	f6 c3 ff ec 	sub	r3,r11,-20
8000d74e:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000d752:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000d756:	2f f9       	sub	r9,-1
8000d758:	20 16       	sub	r6,1
8000d75a:	f8 09 0d 08 	divu	r8,r12,r9
8000d75e:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000d762:	ee c4 ff ec 	sub	r4,r7,-20
8000d766:	10 95       	mov	r5,r8
8000d768:	58 08       	cp.w	r8,0
8000d76a:	c4 10       	breq	8000d7ec <quorem+0xb8>
8000d76c:	30 09       	mov	r9,0
8000d76e:	06 9a       	mov	r10,r3
8000d770:	08 98       	mov	r8,r4
8000d772:	12 91       	mov	r1,r9
8000d774:	50 0b       	stdsp	sp[0x0],r11
8000d776:	70 0e       	ld.w	lr,r8[0x0]
8000d778:	b1 8e       	lsr	lr,0x10
8000d77a:	50 1e       	stdsp	sp[0x4],lr
8000d77c:	15 0e       	ld.w	lr,r10++
8000d77e:	fc 00 16 10 	lsr	r0,lr,0x10
8000d782:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000d786:	ea 0e 03 41 	mac	r1,r5,lr
8000d78a:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000d78e:	b1 81       	lsr	r1,0x10
8000d790:	40 1b       	lddsp	r11,sp[0x4]
8000d792:	ea 00 02 40 	mul	r0,r5,r0
8000d796:	e2 00 00 00 	add	r0,r1,r0
8000d79a:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000d79e:	02 1b       	sub	r11,r1
8000d7a0:	50 1b       	stdsp	sp[0x4],r11
8000d7a2:	70 0b       	ld.w	r11,r8[0x0]
8000d7a4:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000d7a8:	02 09       	add	r9,r1
8000d7aa:	f2 0e 01 0e 	sub	lr,r9,lr
8000d7ae:	b0 1e       	st.h	r8[0x2],lr
8000d7b0:	fc 09 14 10 	asr	r9,lr,0x10
8000d7b4:	40 1e       	lddsp	lr,sp[0x4]
8000d7b6:	fc 09 00 09 	add	r9,lr,r9
8000d7ba:	b0 09       	st.h	r8[0x0],r9
8000d7bc:	e0 01 16 10 	lsr	r1,r0,0x10
8000d7c0:	2f c8       	sub	r8,-4
8000d7c2:	b1 49       	asr	r9,0x10
8000d7c4:	04 3a       	cp.w	r10,r2
8000d7c6:	fe 98 ff d8 	brls	8000d776 <quorem+0x42>
8000d7ca:	40 0b       	lddsp	r11,sp[0x0]
8000d7cc:	58 0c       	cp.w	r12,0
8000d7ce:	c0 f1       	brne	8000d7ec <quorem+0xb8>
8000d7d0:	ec c8 ff fb 	sub	r8,r6,-5
8000d7d4:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000d7d8:	c0 28       	rjmp	8000d7dc <quorem+0xa8>
8000d7da:	20 16       	sub	r6,1
8000d7dc:	20 48       	sub	r8,4
8000d7de:	08 38       	cp.w	r8,r4
8000d7e0:	e0 88 00 05 	brls	8000d7ea <quorem+0xb6>
8000d7e4:	70 09       	ld.w	r9,r8[0x0]
8000d7e6:	58 09       	cp.w	r9,0
8000d7e8:	cf 90       	breq	8000d7da <quorem+0xa6>
8000d7ea:	8f 46       	st.w	r7[0x10],r6
8000d7ec:	0e 9c       	mov	r12,r7
8000d7ee:	f0 1f 00 1a 	mcall	8000d854 <quorem+0x120>
8000d7f2:	c2 d5       	brlt	8000d84c <quorem+0x118>
8000d7f4:	2f f5       	sub	r5,-1
8000d7f6:	08 98       	mov	r8,r4
8000d7f8:	30 09       	mov	r9,0
8000d7fa:	07 0b       	ld.w	r11,r3++
8000d7fc:	f6 0a 16 10 	lsr	r10,r11,0x10
8000d800:	70 0c       	ld.w	r12,r8[0x0]
8000d802:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000d806:	f8 0e 16 10 	lsr	lr,r12,0x10
8000d80a:	14 1e       	sub	lr,r10
8000d80c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000d810:	16 1a       	sub	r10,r11
8000d812:	12 0a       	add	r10,r9
8000d814:	b0 1a       	st.h	r8[0x2],r10
8000d816:	b1 4a       	asr	r10,0x10
8000d818:	fc 0a 00 09 	add	r9,lr,r10
8000d81c:	b0 09       	st.h	r8[0x0],r9
8000d81e:	2f c8       	sub	r8,-4
8000d820:	b1 49       	asr	r9,0x10
8000d822:	04 33       	cp.w	r3,r2
8000d824:	fe 98 ff eb 	brls	8000d7fa <quorem+0xc6>
8000d828:	ec c8 ff fb 	sub	r8,r6,-5
8000d82c:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000d830:	58 09       	cp.w	r9,0
8000d832:	c0 d1       	brne	8000d84c <quorem+0x118>
8000d834:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000d838:	c0 28       	rjmp	8000d83c <quorem+0x108>
8000d83a:	20 16       	sub	r6,1
8000d83c:	20 48       	sub	r8,4
8000d83e:	08 38       	cp.w	r8,r4
8000d840:	e0 88 00 05 	brls	8000d84a <quorem+0x116>
8000d844:	70 09       	ld.w	r9,r8[0x0]
8000d846:	58 09       	cp.w	r9,0
8000d848:	cf 90       	breq	8000d83a <quorem+0x106>
8000d84a:	8f 46       	st.w	r7[0x10],r6
8000d84c:	0a 9c       	mov	r12,r5
8000d84e:	2f ed       	sub	sp,-8
8000d850:	d8 32       	popm	r0-r7,pc
8000d852:	00 00       	add	r0,r0
8000d854:	80 00       	ld.sh	r0,r0[0x0]
8000d856:	f3 56 d4 31 	st.h	r9[-11215],r6

8000d858 <_dtoa_r>:
8000d858:	d4 31       	pushm	r0-r7,lr
8000d85a:	21 ad       	sub	sp,104
8000d85c:	fa c4 ff 74 	sub	r4,sp,-140
8000d860:	18 97       	mov	r7,r12
8000d862:	16 95       	mov	r5,r11
8000d864:	68 2c       	ld.w	r12,r4[0x8]
8000d866:	50 c9       	stdsp	sp[0x30],r9
8000d868:	68 16       	ld.w	r6,r4[0x4]
8000d86a:	68 09       	ld.w	r9,r4[0x0]
8000d86c:	50 e8       	stdsp	sp[0x38],r8
8000d86e:	14 94       	mov	r4,r10
8000d870:	51 2c       	stdsp	sp[0x48],r12
8000d872:	fa e5 00 08 	st.d	sp[8],r4
8000d876:	51 59       	stdsp	sp[0x54],r9
8000d878:	6e 95       	ld.w	r5,r7[0x24]
8000d87a:	58 05       	cp.w	r5,0
8000d87c:	c0 91       	brne	8000d88e <_dtoa_r+0x36>
8000d87e:	31 0c       	mov	r12,16
8000d880:	f0 1f 00 47 	mcall	8000d99c <_dtoa_r+0x144>
8000d884:	99 35       	st.w	r12[0xc],r5
8000d886:	8f 9c       	st.w	r7[0x24],r12
8000d888:	99 15       	st.w	r12[0x4],r5
8000d88a:	99 25       	st.w	r12[0x8],r5
8000d88c:	99 05       	st.w	r12[0x0],r5
8000d88e:	6e 99       	ld.w	r9,r7[0x24]
8000d890:	72 08       	ld.w	r8,r9[0x0]
8000d892:	58 08       	cp.w	r8,0
8000d894:	c0 f0       	breq	8000d8b2 <_dtoa_r+0x5a>
8000d896:	72 1a       	ld.w	r10,r9[0x4]
8000d898:	91 1a       	st.w	r8[0x4],r10
8000d89a:	30 1a       	mov	r10,1
8000d89c:	72 19       	ld.w	r9,r9[0x4]
8000d89e:	f4 09 09 49 	lsl	r9,r10,r9
8000d8a2:	10 9b       	mov	r11,r8
8000d8a4:	91 29       	st.w	r8[0x8],r9
8000d8a6:	0e 9c       	mov	r12,r7
8000d8a8:	f0 1f 00 3e 	mcall	8000d9a0 <_dtoa_r+0x148>
8000d8ac:	6e 98       	ld.w	r8,r7[0x24]
8000d8ae:	30 09       	mov	r9,0
8000d8b0:	91 09       	st.w	r8[0x0],r9
8000d8b2:	40 28       	lddsp	r8,sp[0x8]
8000d8b4:	10 94       	mov	r4,r8
8000d8b6:	58 08       	cp.w	r8,0
8000d8b8:	c0 64       	brge	8000d8c4 <_dtoa_r+0x6c>
8000d8ba:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000d8be:	50 28       	stdsp	sp[0x8],r8
8000d8c0:	30 18       	mov	r8,1
8000d8c2:	c0 28       	rjmp	8000d8c6 <_dtoa_r+0x6e>
8000d8c4:	30 08       	mov	r8,0
8000d8c6:	8d 08       	st.w	r6[0x0],r8
8000d8c8:	fc 1c 7f f0 	movh	r12,0x7ff0
8000d8cc:	40 26       	lddsp	r6,sp[0x8]
8000d8ce:	0c 98       	mov	r8,r6
8000d8d0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000d8d4:	18 38       	cp.w	r8,r12
8000d8d6:	c1 e1       	brne	8000d912 <_dtoa_r+0xba>
8000d8d8:	e0 68 27 0f 	mov	r8,9999
8000d8dc:	41 5b       	lddsp	r11,sp[0x54]
8000d8de:	97 08       	st.w	r11[0x0],r8
8000d8e0:	40 3a       	lddsp	r10,sp[0xc]
8000d8e2:	58 0a       	cp.w	r10,0
8000d8e4:	c0 61       	brne	8000d8f0 <_dtoa_r+0x98>
8000d8e6:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000d8ea:	c0 31       	brne	8000d8f0 <_dtoa_r+0x98>
8000d8ec:	4a ec       	lddpc	r12,8000d9a4 <_dtoa_r+0x14c>
8000d8ee:	c0 28       	rjmp	8000d8f2 <_dtoa_r+0x9a>
8000d8f0:	4a ec       	lddpc	r12,8000d9a8 <_dtoa_r+0x150>
8000d8f2:	41 29       	lddsp	r9,sp[0x48]
8000d8f4:	58 09       	cp.w	r9,0
8000d8f6:	e0 80 05 de 	breq	8000e4b2 <_dtoa_r+0xc5a>
8000d8fa:	f8 c8 ff fd 	sub	r8,r12,-3
8000d8fe:	f8 c9 ff f8 	sub	r9,r12,-8
8000d902:	11 8b       	ld.ub	r11,r8[0x0]
8000d904:	30 0a       	mov	r10,0
8000d906:	41 25       	lddsp	r5,sp[0x48]
8000d908:	f4 0b 18 00 	cp.b	r11,r10
8000d90c:	f2 08 17 10 	movne	r8,r9
8000d910:	c1 58       	rjmp	8000d93a <_dtoa_r+0xe2>
8000d912:	fa ea 00 08 	ld.d	r10,sp[8]
8000d916:	30 08       	mov	r8,0
8000d918:	fa eb 00 3c 	st.d	sp[60],r10
8000d91c:	30 09       	mov	r9,0
8000d91e:	f0 1f 00 24 	mcall	8000d9ac <_dtoa_r+0x154>
8000d922:	c0 f0       	breq	8000d940 <_dtoa_r+0xe8>
8000d924:	30 18       	mov	r8,1
8000d926:	41 5a       	lddsp	r10,sp[0x54]
8000d928:	95 08       	st.w	r10[0x0],r8
8000d92a:	4a 2c       	lddpc	r12,8000d9b0 <_dtoa_r+0x158>
8000d92c:	41 29       	lddsp	r9,sp[0x48]
8000d92e:	f8 08 00 08 	add	r8,r12,r8
8000d932:	58 09       	cp.w	r9,0
8000d934:	e0 80 05 bf 	breq	8000e4b2 <_dtoa_r+0xc5a>
8000d938:	12 95       	mov	r5,r9
8000d93a:	8b 08       	st.w	r5[0x0],r8
8000d93c:	e0 8f 05 bb 	bral	8000e4b2 <_dtoa_r+0xc5a>
8000d940:	fa c8 ff 9c 	sub	r8,sp,-100
8000d944:	fa c9 ff a0 	sub	r9,sp,-96
8000d948:	fa ea 00 3c 	ld.d	r10,sp[60]
8000d94c:	0e 9c       	mov	r12,r7
8000d94e:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000d952:	f0 1f 00 19 	mcall	8000d9b4 <_dtoa_r+0x15c>
8000d956:	18 93       	mov	r3,r12
8000d958:	58 05       	cp.w	r5,0
8000d95a:	c0 d0       	breq	8000d974 <_dtoa_r+0x11c>
8000d95c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000d960:	30 04       	mov	r4,0
8000d962:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000d966:	ea c5 03 ff 	sub	r5,r5,1023
8000d96a:	10 9b       	mov	r11,r8
8000d96c:	51 74       	stdsp	sp[0x5c],r4
8000d96e:	ea 1b 3f f0 	orh	r11,0x3ff0
8000d972:	c3 28       	rjmp	8000d9d6 <_dtoa_r+0x17e>
8000d974:	41 88       	lddsp	r8,sp[0x60]
8000d976:	41 9c       	lddsp	r12,sp[0x64]
8000d978:	10 0c       	add	r12,r8
8000d97a:	f8 c5 fb ce 	sub	r5,r12,-1074
8000d97e:	e0 45 00 20 	cp.w	r5,32
8000d982:	e0 8a 00 1b 	brle	8000d9b8 <_dtoa_r+0x160>
8000d986:	f8 cc fb ee 	sub	r12,r12,-1042
8000d98a:	40 3b       	lddsp	r11,sp[0xc]
8000d98c:	ea 08 11 40 	rsub	r8,r5,64
8000d990:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000d994:	ec 08 09 46 	lsl	r6,r6,r8
8000d998:	0c 4c       	or	r12,r6
8000d99a:	c1 48       	rjmp	8000d9c2 <_dtoa_r+0x16a>
8000d99c:	80 00       	ld.sh	r0,r0[0x0]
8000d99e:	ed a8 80 00 	ldcm.w	cp4,r8,
8000d9a2:	f3 88       	*unknown*
8000d9a4:	80 01       	ld.sh	r1,r0[0x0]
8000d9a6:	10 28       	rsub	r8,r8
8000d9a8:	80 01       	ld.sh	r1,r0[0x0]
8000d9aa:	10 34       	cp.w	r4,r8
8000d9ac:	80 01       	ld.sh	r1,r0[0x0]
8000d9ae:	00 06       	add	r6,r0
8000d9b0:	80 01       	ld.sh	r1,r0[0x0]
8000d9b2:	0f 04       	ld.w	r4,r7++
8000d9b4:	80 00       	ld.sh	r0,r0[0x0]
8000d9b6:	f4 38 ea 0c 	sub	r8,-660980
8000d9ba:	11 20       	ld.uh	r0,r8++
8000d9bc:	40 3a       	lddsp	r10,sp[0xc]
8000d9be:	f4 0c 09 4c 	lsl	r12,r10,r12
8000d9c2:	f0 1f 00 6b 	mcall	8000db6c <_dtoa_r+0x314>
8000d9c6:	fc 18 fe 10 	movh	r8,0xfe10
8000d9ca:	30 19       	mov	r9,1
8000d9cc:	ea c5 04 33 	sub	r5,r5,1075
8000d9d0:	f0 0b 00 0b 	add	r11,r8,r11
8000d9d4:	51 79       	stdsp	sp[0x5c],r9
8000d9d6:	30 08       	mov	r8,0
8000d9d8:	fc 19 3f f8 	movh	r9,0x3ff8
8000d9dc:	f0 1f 00 65 	mcall	8000db70 <_dtoa_r+0x318>
8000d9e0:	e0 68 43 61 	mov	r8,17249
8000d9e4:	ea 18 63 6f 	orh	r8,0x636f
8000d9e8:	e0 69 87 a7 	mov	r9,34727
8000d9ec:	ea 19 3f d2 	orh	r9,0x3fd2
8000d9f0:	f0 1f 00 61 	mcall	8000db74 <_dtoa_r+0x31c>
8000d9f4:	e0 68 c8 b3 	mov	r8,51379
8000d9f8:	ea 18 8b 60 	orh	r8,0x8b60
8000d9fc:	e0 69 8a 28 	mov	r9,35368
8000da00:	ea 19 3f c6 	orh	r9,0x3fc6
8000da04:	f0 1f 00 5d 	mcall	8000db78 <_dtoa_r+0x320>
8000da08:	0a 9c       	mov	r12,r5
8000da0a:	14 90       	mov	r0,r10
8000da0c:	16 91       	mov	r1,r11
8000da0e:	f0 1f 00 5c 	mcall	8000db7c <_dtoa_r+0x324>
8000da12:	e0 68 79 fb 	mov	r8,31227
8000da16:	ea 18 50 9f 	orh	r8,0x509f
8000da1a:	e0 69 44 13 	mov	r9,17427
8000da1e:	ea 19 3f d3 	orh	r9,0x3fd3
8000da22:	f0 1f 00 55 	mcall	8000db74 <_dtoa_r+0x31c>
8000da26:	14 98       	mov	r8,r10
8000da28:	16 99       	mov	r9,r11
8000da2a:	00 9a       	mov	r10,r0
8000da2c:	02 9b       	mov	r11,r1
8000da2e:	f0 1f 00 53 	mcall	8000db78 <_dtoa_r+0x320>
8000da32:	14 90       	mov	r0,r10
8000da34:	16 91       	mov	r1,r11
8000da36:	f0 1f 00 53 	mcall	8000db80 <_dtoa_r+0x328>
8000da3a:	30 08       	mov	r8,0
8000da3c:	18 96       	mov	r6,r12
8000da3e:	30 09       	mov	r9,0
8000da40:	00 9a       	mov	r10,r0
8000da42:	02 9b       	mov	r11,r1
8000da44:	f0 1f 00 50 	mcall	8000db84 <_dtoa_r+0x32c>
8000da48:	c0 c0       	breq	8000da60 <_dtoa_r+0x208>
8000da4a:	0c 9c       	mov	r12,r6
8000da4c:	f0 1f 00 4c 	mcall	8000db7c <_dtoa_r+0x324>
8000da50:	14 98       	mov	r8,r10
8000da52:	16 99       	mov	r9,r11
8000da54:	00 9a       	mov	r10,r0
8000da56:	02 9b       	mov	r11,r1
8000da58:	f0 1f 00 4c 	mcall	8000db88 <_dtoa_r+0x330>
8000da5c:	f7 b6 00 01 	subeq	r6,1
8000da60:	59 66       	cp.w	r6,22
8000da62:	e0 88 00 05 	brls	8000da6c <_dtoa_r+0x214>
8000da66:	30 18       	mov	r8,1
8000da68:	51 48       	stdsp	sp[0x50],r8
8000da6a:	c1 28       	rjmp	8000da8e <_dtoa_r+0x236>
8000da6c:	4c 88       	lddpc	r8,8000db8c <_dtoa_r+0x334>
8000da6e:	fa ea 00 3c 	ld.d	r10,sp[60]
8000da72:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000da76:	f0 1f 00 44 	mcall	8000db84 <_dtoa_r+0x32c>
8000da7a:	f9 b4 00 00 	moveq	r4,0
8000da7e:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000da82:	f7 b6 01 01 	subne	r6,1
8000da86:	f9 bc 01 00 	movne	r12,0
8000da8a:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000da8e:	41 90       	lddsp	r0,sp[0x64]
8000da90:	20 10       	sub	r0,1
8000da92:	0a 10       	sub	r0,r5
8000da94:	c0 46       	brmi	8000da9c <_dtoa_r+0x244>
8000da96:	50 40       	stdsp	sp[0x10],r0
8000da98:	30 00       	mov	r0,0
8000da9a:	c0 48       	rjmp	8000daa2 <_dtoa_r+0x24a>
8000da9c:	30 0b       	mov	r11,0
8000da9e:	5c 30       	neg	r0
8000daa0:	50 4b       	stdsp	sp[0x10],r11
8000daa2:	ec 02 11 00 	rsub	r2,r6,0
8000daa6:	58 06       	cp.w	r6,0
8000daa8:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000daac:	f5 d6 e4 0a 	addge	r10,r10,r6
8000dab0:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000dab4:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000dab8:	f9 b2 04 00 	movge	r2,0
8000dabc:	e1 d6 e5 10 	sublt	r0,r0,r6
8000dac0:	f9 b9 05 00 	movlt	r9,0
8000dac4:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000dac8:	40 c8       	lddsp	r8,sp[0x30]
8000daca:	58 98       	cp.w	r8,9
8000dacc:	e0 8b 00 20 	brhi	8000db0c <_dtoa_r+0x2b4>
8000dad0:	58 58       	cp.w	r8,5
8000dad2:	f9 b4 0a 01 	movle	r4,1
8000dad6:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000dada:	f7 b5 09 04 	subgt	r5,4
8000dade:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000dae2:	f9 b4 09 00 	movgt	r4,0
8000dae6:	40 cc       	lddsp	r12,sp[0x30]
8000dae8:	58 3c       	cp.w	r12,3
8000daea:	c2 d0       	breq	8000db44 <_dtoa_r+0x2ec>
8000daec:	e0 89 00 05 	brgt	8000daf6 <_dtoa_r+0x29e>
8000daf0:	58 2c       	cp.w	r12,2
8000daf2:	c1 01       	brne	8000db12 <_dtoa_r+0x2ba>
8000daf4:	c1 88       	rjmp	8000db24 <_dtoa_r+0x2cc>
8000daf6:	40 cb       	lddsp	r11,sp[0x30]
8000daf8:	58 4b       	cp.w	r11,4
8000dafa:	c0 60       	breq	8000db06 <_dtoa_r+0x2ae>
8000dafc:	58 5b       	cp.w	r11,5
8000dafe:	c0 a1       	brne	8000db12 <_dtoa_r+0x2ba>
8000db00:	30 1a       	mov	r10,1
8000db02:	50 da       	stdsp	sp[0x34],r10
8000db04:	c2 28       	rjmp	8000db48 <_dtoa_r+0x2f0>
8000db06:	30 19       	mov	r9,1
8000db08:	50 d9       	stdsp	sp[0x34],r9
8000db0a:	c0 f8       	rjmp	8000db28 <_dtoa_r+0x2d0>
8000db0c:	30 08       	mov	r8,0
8000db0e:	30 14       	mov	r4,1
8000db10:	50 c8       	stdsp	sp[0x30],r8
8000db12:	3f f5       	mov	r5,-1
8000db14:	30 1c       	mov	r12,1
8000db16:	30 0b       	mov	r11,0
8000db18:	50 95       	stdsp	sp[0x24],r5
8000db1a:	50 dc       	stdsp	sp[0x34],r12
8000db1c:	0a 91       	mov	r1,r5
8000db1e:	31 28       	mov	r8,18
8000db20:	50 eb       	stdsp	sp[0x38],r11
8000db22:	c2 08       	rjmp	8000db62 <_dtoa_r+0x30a>
8000db24:	30 0a       	mov	r10,0
8000db26:	50 da       	stdsp	sp[0x34],r10
8000db28:	40 e9       	lddsp	r9,sp[0x38]
8000db2a:	58 09       	cp.w	r9,0
8000db2c:	e0 89 00 07 	brgt	8000db3a <_dtoa_r+0x2e2>
8000db30:	30 18       	mov	r8,1
8000db32:	50 98       	stdsp	sp[0x24],r8
8000db34:	10 91       	mov	r1,r8
8000db36:	50 e8       	stdsp	sp[0x38],r8
8000db38:	c1 58       	rjmp	8000db62 <_dtoa_r+0x30a>
8000db3a:	40 e5       	lddsp	r5,sp[0x38]
8000db3c:	50 95       	stdsp	sp[0x24],r5
8000db3e:	0a 91       	mov	r1,r5
8000db40:	0a 98       	mov	r8,r5
8000db42:	c1 08       	rjmp	8000db62 <_dtoa_r+0x30a>
8000db44:	30 0c       	mov	r12,0
8000db46:	50 dc       	stdsp	sp[0x34],r12
8000db48:	40 eb       	lddsp	r11,sp[0x38]
8000db4a:	ec 0b 00 0b 	add	r11,r6,r11
8000db4e:	50 9b       	stdsp	sp[0x24],r11
8000db50:	16 98       	mov	r8,r11
8000db52:	2f f8       	sub	r8,-1
8000db54:	58 08       	cp.w	r8,0
8000db56:	e0 89 00 05 	brgt	8000db60 <_dtoa_r+0x308>
8000db5a:	10 91       	mov	r1,r8
8000db5c:	30 18       	mov	r8,1
8000db5e:	c0 28       	rjmp	8000db62 <_dtoa_r+0x30a>
8000db60:	10 91       	mov	r1,r8
8000db62:	30 09       	mov	r9,0
8000db64:	6e 9a       	ld.w	r10,r7[0x24]
8000db66:	95 19       	st.w	r10[0x4],r9
8000db68:	30 49       	mov	r9,4
8000db6a:	c1 78       	rjmp	8000db98 <_dtoa_r+0x340>
8000db6c:	80 00       	ld.sh	r0,r0[0x0]
8000db6e:	ab f0       	*unknown*
8000db70:	80 00       	ld.sh	r0,r0[0x0]
8000db72:	a9 44       	asr	r4,0x8
8000db74:	80 00       	ld.sh	r0,r0[0x0]
8000db76:	a7 6c       	lsl	r12,0x6
8000db78:	80 00       	ld.sh	r0,r0[0x0]
8000db7a:	aa e0       	st.b	r5[0x6],r0
8000db7c:	80 00       	ld.sh	r0,r0[0x0]
8000db7e:	ab f8       	*unknown*
8000db80:	80 00       	ld.sh	r0,r0[0x0]
8000db82:	ff e0 80 01 	sthh.w	r1[r0],pc:b,r0:b
8000db86:	00 94       	mov	r4,r0
8000db88:	80 01       	ld.sh	r1,r0[0x0]
8000db8a:	00 06       	add	r6,r0
8000db8c:	80 01       	ld.sh	r1,r0[0x0]
8000db8e:	10 ec       	st.h	--r8,r12
8000db90:	6a 1a       	ld.w	r10,r5[0x4]
8000db92:	a1 79       	lsl	r9,0x1
8000db94:	2f fa       	sub	r10,-1
8000db96:	8b 1a       	st.w	r5[0x4],r10
8000db98:	6e 95       	ld.w	r5,r7[0x24]
8000db9a:	f2 ca ff ec 	sub	r10,r9,-20
8000db9e:	10 3a       	cp.w	r10,r8
8000dba0:	fe 98 ff f8 	brls	8000db90 <_dtoa_r+0x338>
8000dba4:	6a 1b       	ld.w	r11,r5[0x4]
8000dba6:	0e 9c       	mov	r12,r7
8000dba8:	f0 1f 00 53 	mcall	8000dcf4 <_dtoa_r+0x49c>
8000dbac:	58 e1       	cp.w	r1,14
8000dbae:	5f 88       	srls	r8
8000dbb0:	8b 0c       	st.w	r5[0x0],r12
8000dbb2:	f1 e4 00 04 	and	r4,r8,r4
8000dbb6:	6e 98       	ld.w	r8,r7[0x24]
8000dbb8:	70 08       	ld.w	r8,r8[0x0]
8000dbba:	50 88       	stdsp	sp[0x20],r8
8000dbbc:	e0 80 01 98 	breq	8000deec <_dtoa_r+0x694>
8000dbc0:	58 06       	cp.w	r6,0
8000dbc2:	e0 8a 00 40 	brle	8000dc42 <_dtoa_r+0x3ea>
8000dbc6:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000dbca:	4c c8       	lddpc	r8,8000dcf8 <_dtoa_r+0x4a0>
8000dbcc:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000dbd0:	fa e5 00 18 	st.d	sp[24],r4
8000dbd4:	ec 04 14 04 	asr	r4,r6,0x4
8000dbd8:	ed b4 00 04 	bld	r4,0x4
8000dbdc:	c0 30       	breq	8000dbe2 <_dtoa_r+0x38a>
8000dbde:	30 25       	mov	r5,2
8000dbe0:	c0 f8       	rjmp	8000dbfe <_dtoa_r+0x3a6>
8000dbe2:	4c 78       	lddpc	r8,8000dcfc <_dtoa_r+0x4a4>
8000dbe4:	f0 e8 00 20 	ld.d	r8,r8[32]
8000dbe8:	fa ea 00 3c 	ld.d	r10,sp[60]
8000dbec:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000dbf0:	f0 1f 00 44 	mcall	8000dd00 <_dtoa_r+0x4a8>
8000dbf4:	30 35       	mov	r5,3
8000dbf6:	14 98       	mov	r8,r10
8000dbf8:	16 99       	mov	r9,r11
8000dbfa:	fa e9 00 08 	st.d	sp[8],r8
8000dbfe:	4c 0c       	lddpc	r12,8000dcfc <_dtoa_r+0x4a4>
8000dc00:	50 a3       	stdsp	sp[0x28],r3
8000dc02:	0c 93       	mov	r3,r6
8000dc04:	18 96       	mov	r6,r12
8000dc06:	c0 f8       	rjmp	8000dc24 <_dtoa_r+0x3cc>
8000dc08:	fa ea 00 18 	ld.d	r10,sp[24]
8000dc0c:	ed b4 00 00 	bld	r4,0x0
8000dc10:	c0 81       	brne	8000dc20 <_dtoa_r+0x3c8>
8000dc12:	ec e8 00 00 	ld.d	r8,r6[0]
8000dc16:	2f f5       	sub	r5,-1
8000dc18:	f0 1f 00 3b 	mcall	8000dd04 <_dtoa_r+0x4ac>
8000dc1c:	fa eb 00 18 	st.d	sp[24],r10
8000dc20:	a1 54       	asr	r4,0x1
8000dc22:	2f 86       	sub	r6,-8
8000dc24:	58 04       	cp.w	r4,0
8000dc26:	cf 11       	brne	8000dc08 <_dtoa_r+0x3b0>
8000dc28:	fa e8 00 18 	ld.d	r8,sp[24]
8000dc2c:	fa ea 00 08 	ld.d	r10,sp[8]
8000dc30:	06 96       	mov	r6,r3
8000dc32:	f0 1f 00 34 	mcall	8000dd00 <_dtoa_r+0x4a8>
8000dc36:	40 a3       	lddsp	r3,sp[0x28]
8000dc38:	14 98       	mov	r8,r10
8000dc3a:	16 99       	mov	r9,r11
8000dc3c:	fa e9 00 08 	st.d	sp[8],r8
8000dc40:	c2 d8       	rjmp	8000dc9a <_dtoa_r+0x442>
8000dc42:	ec 08 11 00 	rsub	r8,r6,0
8000dc46:	c0 31       	brne	8000dc4c <_dtoa_r+0x3f4>
8000dc48:	30 25       	mov	r5,2
8000dc4a:	c2 88       	rjmp	8000dc9a <_dtoa_r+0x442>
8000dc4c:	4a cc       	lddpc	r12,8000dcfc <_dtoa_r+0x4a4>
8000dc4e:	f0 04 14 04 	asr	r4,r8,0x4
8000dc52:	50 1c       	stdsp	sp[0x4],r12
8000dc54:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000dc58:	4a 89       	lddpc	r9,8000dcf8 <_dtoa_r+0x4a0>
8000dc5a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000dc5e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000dc62:	f0 1f 00 29 	mcall	8000dd04 <_dtoa_r+0x4ac>
8000dc66:	40 1c       	lddsp	r12,sp[0x4]
8000dc68:	50 63       	stdsp	sp[0x18],r3
8000dc6a:	30 25       	mov	r5,2
8000dc6c:	0c 93       	mov	r3,r6
8000dc6e:	fa eb 00 08 	st.d	sp[8],r10
8000dc72:	18 96       	mov	r6,r12
8000dc74:	c0 f8       	rjmp	8000dc92 <_dtoa_r+0x43a>
8000dc76:	fa ea 00 08 	ld.d	r10,sp[8]
8000dc7a:	ed b4 00 00 	bld	r4,0x0
8000dc7e:	c0 81       	brne	8000dc8e <_dtoa_r+0x436>
8000dc80:	ec e8 00 00 	ld.d	r8,r6[0]
8000dc84:	2f f5       	sub	r5,-1
8000dc86:	f0 1f 00 20 	mcall	8000dd04 <_dtoa_r+0x4ac>
8000dc8a:	fa eb 00 08 	st.d	sp[8],r10
8000dc8e:	a1 54       	asr	r4,0x1
8000dc90:	2f 86       	sub	r6,-8
8000dc92:	58 04       	cp.w	r4,0
8000dc94:	cf 11       	brne	8000dc76 <_dtoa_r+0x41e>
8000dc96:	06 96       	mov	r6,r3
8000dc98:	40 63       	lddsp	r3,sp[0x18]
8000dc9a:	41 4a       	lddsp	r10,sp[0x50]
8000dc9c:	58 0a       	cp.w	r10,0
8000dc9e:	c3 70       	breq	8000dd0c <_dtoa_r+0x4b4>
8000dca0:	fa e8 00 08 	ld.d	r8,sp[8]
8000dca4:	58 01       	cp.w	r1,0
8000dca6:	5f 94       	srgt	r4
8000dca8:	fa e9 00 18 	st.d	sp[24],r8
8000dcac:	30 08       	mov	r8,0
8000dcae:	fc 19 3f f0 	movh	r9,0x3ff0
8000dcb2:	fa ea 00 18 	ld.d	r10,sp[24]
8000dcb6:	f0 1f 00 15 	mcall	8000dd08 <_dtoa_r+0x4b0>
8000dcba:	f9 bc 00 00 	moveq	r12,0
8000dcbe:	f9 bc 01 01 	movne	r12,1
8000dcc2:	e9 ec 00 0c 	and	r12,r4,r12
8000dcc6:	c2 30       	breq	8000dd0c <_dtoa_r+0x4b4>
8000dcc8:	40 98       	lddsp	r8,sp[0x24]
8000dcca:	58 08       	cp.w	r8,0
8000dccc:	e0 8a 01 0c 	brle	8000dee4 <_dtoa_r+0x68c>
8000dcd0:	30 08       	mov	r8,0
8000dcd2:	fc 19 40 24 	movh	r9,0x4024
8000dcd6:	ec c4 00 01 	sub	r4,r6,1
8000dcda:	fa ea 00 18 	ld.d	r10,sp[24]
8000dcde:	2f f5       	sub	r5,-1
8000dce0:	50 64       	stdsp	sp[0x18],r4
8000dce2:	f0 1f 00 09 	mcall	8000dd04 <_dtoa_r+0x4ac>
8000dce6:	40 94       	lddsp	r4,sp[0x24]
8000dce8:	14 98       	mov	r8,r10
8000dcea:	16 99       	mov	r9,r11
8000dcec:	fa e9 00 08 	st.d	sp[8],r8
8000dcf0:	c1 08       	rjmp	8000dd10 <_dtoa_r+0x4b8>
8000dcf2:	00 00       	add	r0,r0
8000dcf4:	80 00       	ld.sh	r0,r0[0x0]
8000dcf6:	f3 c0       	*unknown*
8000dcf8:	80 01       	ld.sh	r1,r0[0x0]
8000dcfa:	10 ec       	st.h	--r8,r12
8000dcfc:	80 01       	ld.sh	r1,r0[0x0]
8000dcfe:	11 b4       	ld.ub	r4,r8[0x3]
8000dd00:	80 01       	ld.sh	r1,r0[0x0]
8000dd02:	00 fc       	st.b	--r0,r12
8000dd04:	80 00       	ld.sh	r0,r0[0x0]
8000dd06:	a7 6c       	lsl	r12,0x6
8000dd08:	80 01       	ld.sh	r1,r0[0x0]
8000dd0a:	00 94       	mov	r4,r0
8000dd0c:	50 66       	stdsp	sp[0x18],r6
8000dd0e:	02 94       	mov	r4,r1
8000dd10:	0a 9c       	mov	r12,r5
8000dd12:	f0 1f 00 69 	mcall	8000deb4 <_dtoa_r+0x65c>
8000dd16:	fa e8 00 08 	ld.d	r8,sp[8]
8000dd1a:	f0 1f 00 68 	mcall	8000deb8 <_dtoa_r+0x660>
8000dd1e:	30 08       	mov	r8,0
8000dd20:	fc 19 40 1c 	movh	r9,0x401c
8000dd24:	f0 1f 00 66 	mcall	8000debc <_dtoa_r+0x664>
8000dd28:	14 98       	mov	r8,r10
8000dd2a:	16 99       	mov	r9,r11
8000dd2c:	fa e9 00 28 	st.d	sp[40],r8
8000dd30:	fc 18 fc c0 	movh	r8,0xfcc0
8000dd34:	40 a5       	lddsp	r5,sp[0x28]
8000dd36:	10 05       	add	r5,r8
8000dd38:	50 a5       	stdsp	sp[0x28],r5
8000dd3a:	58 04       	cp.w	r4,0
8000dd3c:	c2 11       	brne	8000dd7e <_dtoa_r+0x526>
8000dd3e:	fa ea 00 08 	ld.d	r10,sp[8]
8000dd42:	30 08       	mov	r8,0
8000dd44:	fc 19 40 14 	movh	r9,0x4014
8000dd48:	f0 1f 00 5e 	mcall	8000dec0 <_dtoa_r+0x668>
8000dd4c:	40 bc       	lddsp	r12,sp[0x2c]
8000dd4e:	fa eb 00 08 	st.d	sp[8],r10
8000dd52:	14 98       	mov	r8,r10
8000dd54:	16 99       	mov	r9,r11
8000dd56:	18 9a       	mov	r10,r12
8000dd58:	0a 9b       	mov	r11,r5
8000dd5a:	f0 1f 00 5b 	mcall	8000dec4 <_dtoa_r+0x66c>
8000dd5e:	e0 81 02 74 	brne	8000e246 <_dtoa_r+0x9ee>
8000dd62:	0a 98       	mov	r8,r5
8000dd64:	40 b9       	lddsp	r9,sp[0x2c]
8000dd66:	ee 18 80 00 	eorh	r8,0x8000
8000dd6a:	fa ea 00 08 	ld.d	r10,sp[8]
8000dd6e:	10 95       	mov	r5,r8
8000dd70:	12 98       	mov	r8,r9
8000dd72:	0a 99       	mov	r9,r5
8000dd74:	f0 1f 00 54 	mcall	8000dec4 <_dtoa_r+0x66c>
8000dd78:	e0 81 02 5e 	brne	8000e234 <_dtoa_r+0x9dc>
8000dd7c:	cb 48       	rjmp	8000dee4 <_dtoa_r+0x68c>
8000dd7e:	4d 39       	lddpc	r9,8000dec8 <_dtoa_r+0x670>
8000dd80:	e8 c8 00 01 	sub	r8,r4,1
8000dd84:	40 d5       	lddsp	r5,sp[0x34]
8000dd86:	58 05       	cp.w	r5,0
8000dd88:	c4 f0       	breq	8000de26 <_dtoa_r+0x5ce>
8000dd8a:	30 0c       	mov	r12,0
8000dd8c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000dd90:	51 3c       	stdsp	sp[0x4c],r12
8000dd92:	30 0a       	mov	r10,0
8000dd94:	fc 1b 3f e0 	movh	r11,0x3fe0
8000dd98:	f0 1f 00 4d 	mcall	8000decc <_dtoa_r+0x674>
8000dd9c:	fa e8 00 28 	ld.d	r8,sp[40]
8000dda0:	40 85       	lddsp	r5,sp[0x20]
8000dda2:	f0 1f 00 48 	mcall	8000dec0 <_dtoa_r+0x668>
8000dda6:	fa eb 00 28 	st.d	sp[40],r10
8000ddaa:	fa ea 00 08 	ld.d	r10,sp[8]
8000ddae:	f0 1f 00 49 	mcall	8000ded0 <_dtoa_r+0x678>
8000ddb2:	51 6c       	stdsp	sp[0x58],r12
8000ddb4:	f0 1f 00 40 	mcall	8000deb4 <_dtoa_r+0x65c>
8000ddb8:	14 98       	mov	r8,r10
8000ddba:	16 99       	mov	r9,r11
8000ddbc:	fa ea 00 08 	ld.d	r10,sp[8]
8000ddc0:	f0 1f 00 40 	mcall	8000dec0 <_dtoa_r+0x668>
8000ddc4:	fa eb 00 08 	st.d	sp[8],r10
8000ddc8:	41 68       	lddsp	r8,sp[0x58]
8000ddca:	2d 08       	sub	r8,-48
8000ddcc:	0a c8       	st.b	r5++,r8
8000ddce:	41 39       	lddsp	r9,sp[0x4c]
8000ddd0:	2f f9       	sub	r9,-1
8000ddd2:	51 39       	stdsp	sp[0x4c],r9
8000ddd4:	fa e8 00 28 	ld.d	r8,sp[40]
8000ddd8:	f0 1f 00 3b 	mcall	8000dec4 <_dtoa_r+0x66c>
8000dddc:	e0 81 03 5a 	brne	8000e490 <_dtoa_r+0xc38>
8000dde0:	fa e8 00 08 	ld.d	r8,sp[8]
8000dde4:	30 0a       	mov	r10,0
8000dde6:	fc 1b 3f f0 	movh	r11,0x3ff0
8000ddea:	f0 1f 00 36 	mcall	8000dec0 <_dtoa_r+0x668>
8000ddee:	fa e8 00 28 	ld.d	r8,sp[40]
8000ddf2:	f0 1f 00 35 	mcall	8000dec4 <_dtoa_r+0x66c>
8000ddf6:	fa ea 00 28 	ld.d	r10,sp[40]
8000ddfa:	30 08       	mov	r8,0
8000ddfc:	fc 19 40 24 	movh	r9,0x4024
8000de00:	e0 81 00 e8 	brne	8000dfd0 <_dtoa_r+0x778>
8000de04:	41 3c       	lddsp	r12,sp[0x4c]
8000de06:	08 3c       	cp.w	r12,r4
8000de08:	c6 e4       	brge	8000dee4 <_dtoa_r+0x68c>
8000de0a:	f0 1f 00 2c 	mcall	8000deb8 <_dtoa_r+0x660>
8000de0e:	30 08       	mov	r8,0
8000de10:	fa eb 00 28 	st.d	sp[40],r10
8000de14:	fc 19 40 24 	movh	r9,0x4024
8000de18:	fa ea 00 08 	ld.d	r10,sp[8]
8000de1c:	f0 1f 00 27 	mcall	8000deb8 <_dtoa_r+0x660>
8000de20:	fa eb 00 08 	st.d	sp[8],r10
8000de24:	cc 3b       	rjmp	8000ddaa <_dtoa_r+0x552>
8000de26:	40 85       	lddsp	r5,sp[0x20]
8000de28:	08 05       	add	r5,r4
8000de2a:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000de2e:	51 35       	stdsp	sp[0x4c],r5
8000de30:	fa e8 00 28 	ld.d	r8,sp[40]
8000de34:	40 85       	lddsp	r5,sp[0x20]
8000de36:	f0 1f 00 21 	mcall	8000deb8 <_dtoa_r+0x660>
8000de3a:	fa eb 00 28 	st.d	sp[40],r10
8000de3e:	fa ea 00 08 	ld.d	r10,sp[8]
8000de42:	f0 1f 00 24 	mcall	8000ded0 <_dtoa_r+0x678>
8000de46:	51 6c       	stdsp	sp[0x58],r12
8000de48:	f0 1f 00 1b 	mcall	8000deb4 <_dtoa_r+0x65c>
8000de4c:	14 98       	mov	r8,r10
8000de4e:	16 99       	mov	r9,r11
8000de50:	fa ea 00 08 	ld.d	r10,sp[8]
8000de54:	f0 1f 00 1b 	mcall	8000dec0 <_dtoa_r+0x668>
8000de58:	fa eb 00 08 	st.d	sp[8],r10
8000de5c:	41 68       	lddsp	r8,sp[0x58]
8000de5e:	2d 08       	sub	r8,-48
8000de60:	0a c8       	st.b	r5++,r8
8000de62:	41 3c       	lddsp	r12,sp[0x4c]
8000de64:	18 35       	cp.w	r5,r12
8000de66:	c3 71       	brne	8000ded4 <_dtoa_r+0x67c>
8000de68:	30 08       	mov	r8,0
8000de6a:	fc 19 3f e0 	movh	r9,0x3fe0
8000de6e:	fa ea 00 28 	ld.d	r10,sp[40]
8000de72:	f0 1f 00 13 	mcall	8000debc <_dtoa_r+0x664>
8000de76:	40 85       	lddsp	r5,sp[0x20]
8000de78:	fa e8 00 08 	ld.d	r8,sp[8]
8000de7c:	08 05       	add	r5,r4
8000de7e:	f0 1f 00 12 	mcall	8000dec4 <_dtoa_r+0x66c>
8000de82:	e0 81 00 a7 	brne	8000dfd0 <_dtoa_r+0x778>
8000de86:	fa e8 00 28 	ld.d	r8,sp[40]
8000de8a:	30 0a       	mov	r10,0
8000de8c:	fc 1b 3f e0 	movh	r11,0x3fe0
8000de90:	f0 1f 00 0c 	mcall	8000dec0 <_dtoa_r+0x668>
8000de94:	14 98       	mov	r8,r10
8000de96:	16 99       	mov	r9,r11
8000de98:	fa ea 00 08 	ld.d	r10,sp[8]
8000de9c:	f0 1f 00 0a 	mcall	8000dec4 <_dtoa_r+0x66c>
8000dea0:	c2 20       	breq	8000dee4 <_dtoa_r+0x68c>
8000dea2:	33 09       	mov	r9,48
8000dea4:	0a 98       	mov	r8,r5
8000dea6:	11 7a       	ld.ub	r10,--r8
8000dea8:	f2 0a 18 00 	cp.b	r10,r9
8000deac:	e0 81 02 f2 	brne	8000e490 <_dtoa_r+0xc38>
8000deb0:	10 95       	mov	r5,r8
8000deb2:	cf 9b       	rjmp	8000dea4 <_dtoa_r+0x64c>
8000deb4:	80 00       	ld.sh	r0,r0[0x0]
8000deb6:	ab f8       	*unknown*
8000deb8:	80 00       	ld.sh	r0,r0[0x0]
8000deba:	a7 6c       	lsl	r12,0x6
8000debc:	80 00       	ld.sh	r0,r0[0x0]
8000debe:	aa e0       	st.b	r5[0x6],r0
8000dec0:	80 00       	ld.sh	r0,r0[0x0]
8000dec2:	a9 44       	asr	r4,0x8
8000dec4:	80 01       	ld.sh	r1,r0[0x0]
8000dec6:	00 94       	mov	r4,r0
8000dec8:	80 01       	ld.sh	r1,r0[0x0]
8000deca:	10 ec       	st.h	--r8,r12
8000decc:	80 01       	ld.sh	r1,r0[0x0]
8000dece:	00 fc       	st.b	--r0,r12
8000ded0:	80 00       	ld.sh	r0,r0[0x0]
8000ded2:	ff e0       	*unknown*
8000ded4:	30 08       	mov	r8,0
8000ded6:	fc 19 40 24 	movh	r9,0x4024
8000deda:	f0 1f 00 56 	mcall	8000e030 <_dtoa_r+0x7d8>
8000dede:	fa eb 00 08 	st.d	sp[8],r10
8000dee2:	ca eb       	rjmp	8000de3e <_dtoa_r+0x5e6>
8000dee4:	fa ea 00 3c 	ld.d	r10,sp[60]
8000dee8:	fa eb 00 08 	st.d	sp[8],r10
8000deec:	58 e6       	cp.w	r6,14
8000deee:	5f ab       	srle	r11
8000def0:	41 8a       	lddsp	r10,sp[0x60]
8000def2:	30 08       	mov	r8,0
8000def4:	f4 09 11 ff 	rsub	r9,r10,-1
8000def8:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000defc:	f0 09 18 00 	cp.b	r9,r8
8000df00:	e0 80 00 81 	breq	8000e002 <_dtoa_r+0x7aa>
8000df04:	40 ea       	lddsp	r10,sp[0x38]
8000df06:	58 01       	cp.w	r1,0
8000df08:	5f a9       	srle	r9
8000df0a:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000df0e:	4c aa       	lddpc	r10,8000e034 <_dtoa_r+0x7dc>
8000df10:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000df14:	fa e5 00 10 	st.d	sp[16],r4
8000df18:	f0 09 18 00 	cp.b	r9,r8
8000df1c:	c1 40       	breq	8000df44 <_dtoa_r+0x6ec>
8000df1e:	58 01       	cp.w	r1,0
8000df20:	e0 81 01 8a 	brne	8000e234 <_dtoa_r+0x9dc>
8000df24:	30 08       	mov	r8,0
8000df26:	fc 19 40 14 	movh	r9,0x4014
8000df2a:	08 9a       	mov	r10,r4
8000df2c:	0a 9b       	mov	r11,r5
8000df2e:	f0 1f 00 41 	mcall	8000e030 <_dtoa_r+0x7d8>
8000df32:	fa e8 00 08 	ld.d	r8,sp[8]
8000df36:	f0 1f 00 41 	mcall	8000e038 <_dtoa_r+0x7e0>
8000df3a:	e0 81 01 7d 	brne	8000e234 <_dtoa_r+0x9dc>
8000df3e:	02 92       	mov	r2,r1
8000df40:	e0 8f 01 85 	bral	8000e24a <_dtoa_r+0x9f2>
8000df44:	40 85       	lddsp	r5,sp[0x20]
8000df46:	30 14       	mov	r4,1
8000df48:	fa e8 00 10 	ld.d	r8,sp[16]
8000df4c:	fa ea 00 08 	ld.d	r10,sp[8]
8000df50:	f0 1f 00 3b 	mcall	8000e03c <_dtoa_r+0x7e4>
8000df54:	f0 1f 00 3b 	mcall	8000e040 <_dtoa_r+0x7e8>
8000df58:	18 92       	mov	r2,r12
8000df5a:	f0 1f 00 3b 	mcall	8000e044 <_dtoa_r+0x7ec>
8000df5e:	fa e8 00 10 	ld.d	r8,sp[16]
8000df62:	f0 1f 00 34 	mcall	8000e030 <_dtoa_r+0x7d8>
8000df66:	14 98       	mov	r8,r10
8000df68:	16 99       	mov	r9,r11
8000df6a:	fa ea 00 08 	ld.d	r10,sp[8]
8000df6e:	f0 1f 00 37 	mcall	8000e048 <_dtoa_r+0x7f0>
8000df72:	fa eb 00 08 	st.d	sp[8],r10
8000df76:	e4 c8 ff d0 	sub	r8,r2,-48
8000df7a:	0a c8       	st.b	r5++,r8
8000df7c:	fc 19 40 24 	movh	r9,0x4024
8000df80:	30 08       	mov	r8,0
8000df82:	02 34       	cp.w	r4,r1
8000df84:	c3 31       	brne	8000dfea <_dtoa_r+0x792>
8000df86:	fa e8 00 08 	ld.d	r8,sp[8]
8000df8a:	f0 1f 00 31 	mcall	8000e04c <_dtoa_r+0x7f4>
8000df8e:	16 91       	mov	r1,r11
8000df90:	14 90       	mov	r0,r10
8000df92:	14 98       	mov	r8,r10
8000df94:	02 99       	mov	r9,r1
8000df96:	fa ea 00 10 	ld.d	r10,sp[16]
8000df9a:	f0 1f 00 2e 	mcall	8000e050 <_dtoa_r+0x7f8>
8000df9e:	c1 a1       	brne	8000dfd2 <_dtoa_r+0x77a>
8000dfa0:	fa e8 00 10 	ld.d	r8,sp[16]
8000dfa4:	00 9a       	mov	r10,r0
8000dfa6:	02 9b       	mov	r11,r1
8000dfa8:	f0 1f 00 2b 	mcall	8000e054 <_dtoa_r+0x7fc>
8000dfac:	e0 80 02 71 	breq	8000e48e <_dtoa_r+0xc36>
8000dfb0:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000dfb4:	c0 f1       	brne	8000dfd2 <_dtoa_r+0x77a>
8000dfb6:	e0 8f 02 6c 	bral	8000e48e <_dtoa_r+0xc36>
8000dfba:	40 8a       	lddsp	r10,sp[0x20]
8000dfbc:	14 38       	cp.w	r8,r10
8000dfbe:	c0 30       	breq	8000dfc4 <_dtoa_r+0x76c>
8000dfc0:	10 95       	mov	r5,r8
8000dfc2:	c0 98       	rjmp	8000dfd4 <_dtoa_r+0x77c>
8000dfc4:	33 08       	mov	r8,48
8000dfc6:	40 89       	lddsp	r9,sp[0x20]
8000dfc8:	2f f6       	sub	r6,-1
8000dfca:	b2 88       	st.b	r9[0x0],r8
8000dfcc:	40 88       	lddsp	r8,sp[0x20]
8000dfce:	c0 88       	rjmp	8000dfde <_dtoa_r+0x786>
8000dfd0:	40 66       	lddsp	r6,sp[0x18]
8000dfd2:	33 99       	mov	r9,57
8000dfd4:	0a 98       	mov	r8,r5
8000dfd6:	11 7a       	ld.ub	r10,--r8
8000dfd8:	f2 0a 18 00 	cp.b	r10,r9
8000dfdc:	ce f0       	breq	8000dfba <_dtoa_r+0x762>
8000dfde:	50 66       	stdsp	sp[0x18],r6
8000dfe0:	11 89       	ld.ub	r9,r8[0x0]
8000dfe2:	2f f9       	sub	r9,-1
8000dfe4:	b0 89       	st.b	r8[0x0],r9
8000dfe6:	e0 8f 02 55 	bral	8000e490 <_dtoa_r+0xc38>
8000dfea:	f0 1f 00 12 	mcall	8000e030 <_dtoa_r+0x7d8>
8000dfee:	2f f4       	sub	r4,-1
8000dff0:	fa eb 00 08 	st.d	sp[8],r10
8000dff4:	30 08       	mov	r8,0
8000dff6:	30 09       	mov	r9,0
8000dff8:	f0 1f 00 17 	mcall	8000e054 <_dtoa_r+0x7fc>
8000dffc:	ca 60       	breq	8000df48 <_dtoa_r+0x6f0>
8000dffe:	e0 8f 02 48 	bral	8000e48e <_dtoa_r+0xc36>
8000e002:	40 d8       	lddsp	r8,sp[0x34]
8000e004:	58 08       	cp.w	r8,0
8000e006:	c0 51       	brne	8000e010 <_dtoa_r+0x7b8>
8000e008:	04 98       	mov	r8,r2
8000e00a:	00 95       	mov	r5,r0
8000e00c:	40 d4       	lddsp	r4,sp[0x34]
8000e00e:	c4 a8       	rjmp	8000e0a2 <_dtoa_r+0x84a>
8000e010:	40 c5       	lddsp	r5,sp[0x30]
8000e012:	58 15       	cp.w	r5,1
8000e014:	e0 89 00 22 	brgt	8000e058 <_dtoa_r+0x800>
8000e018:	41 74       	lddsp	r4,sp[0x5c]
8000e01a:	58 04       	cp.w	r4,0
8000e01c:	c0 40       	breq	8000e024 <_dtoa_r+0x7cc>
8000e01e:	f4 c9 fb cd 	sub	r9,r10,-1075
8000e022:	c0 48       	rjmp	8000e02a <_dtoa_r+0x7d2>
8000e024:	41 99       	lddsp	r9,sp[0x64]
8000e026:	f2 09 11 36 	rsub	r9,r9,54
8000e02a:	04 98       	mov	r8,r2
8000e02c:	00 95       	mov	r5,r0
8000e02e:	c2 f8       	rjmp	8000e08c <_dtoa_r+0x834>
8000e030:	80 00       	ld.sh	r0,r0[0x0]
8000e032:	a7 6c       	lsl	r12,0x6
8000e034:	80 01       	ld.sh	r1,r0[0x0]
8000e036:	10 ec       	st.h	--r8,r12
8000e038:	80 01       	ld.sh	r1,r0[0x0]
8000e03a:	00 2c       	rsub	r12,r0
8000e03c:	80 01       	ld.sh	r1,r0[0x0]
8000e03e:	00 fc       	st.b	--r0,r12
8000e040:	80 00       	ld.sh	r0,r0[0x0]
8000e042:	ff e0 80 00 	sthh.w	r0[r0],pc:b,r0:b
8000e046:	ab f8       	*unknown*
8000e048:	80 00       	ld.sh	r0,r0[0x0]
8000e04a:	a9 44       	asr	r4,0x8
8000e04c:	80 00       	ld.sh	r0,r0[0x0]
8000e04e:	aa e0       	st.b	r5[0x6],r0
8000e050:	80 01       	ld.sh	r1,r0[0x0]
8000e052:	00 94       	mov	r4,r0
8000e054:	80 01       	ld.sh	r1,r0[0x0]
8000e056:	00 06       	add	r6,r0
8000e058:	e2 c8 00 01 	sub	r8,r1,1
8000e05c:	58 01       	cp.w	r1,0
8000e05e:	e0 05 17 40 	movge	r5,r0
8000e062:	e2 09 17 40 	movge	r9,r1
8000e066:	e1 d1 e5 15 	sublt	r5,r0,r1
8000e06a:	f9 b9 05 00 	movlt	r9,0
8000e06e:	10 32       	cp.w	r2,r8
8000e070:	e5 d8 e4 18 	subge	r8,r2,r8
8000e074:	f1 d2 e5 18 	sublt	r8,r8,r2
8000e078:	e5 d8 e5 02 	addlt	r2,r2,r8
8000e07c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000e080:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000e084:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000e088:	f9 b8 05 00 	movlt	r8,0
8000e08c:	40 4b       	lddsp	r11,sp[0x10]
8000e08e:	12 0b       	add	r11,r9
8000e090:	50 08       	stdsp	sp[0x0],r8
8000e092:	50 4b       	stdsp	sp[0x10],r11
8000e094:	12 00       	add	r0,r9
8000e096:	30 1b       	mov	r11,1
8000e098:	0e 9c       	mov	r12,r7
8000e09a:	f0 1f 01 08 	mcall	8000e4b8 <_dtoa_r+0xc60>
8000e09e:	40 08       	lddsp	r8,sp[0x0]
8000e0a0:	18 94       	mov	r4,r12
8000e0a2:	40 4a       	lddsp	r10,sp[0x10]
8000e0a4:	58 05       	cp.w	r5,0
8000e0a6:	5f 99       	srgt	r9
8000e0a8:	58 0a       	cp.w	r10,0
8000e0aa:	5f 9a       	srgt	r10
8000e0ac:	f5 e9 00 09 	and	r9,r10,r9
8000e0b0:	c0 80       	breq	8000e0c0 <_dtoa_r+0x868>
8000e0b2:	40 4c       	lddsp	r12,sp[0x10]
8000e0b4:	f8 05 0d 49 	min	r9,r12,r5
8000e0b8:	12 1c       	sub	r12,r9
8000e0ba:	12 10       	sub	r0,r9
8000e0bc:	50 4c       	stdsp	sp[0x10],r12
8000e0be:	12 15       	sub	r5,r9
8000e0c0:	58 02       	cp.w	r2,0
8000e0c2:	e0 8a 00 27 	brle	8000e110 <_dtoa_r+0x8b8>
8000e0c6:	40 db       	lddsp	r11,sp[0x34]
8000e0c8:	58 0b       	cp.w	r11,0
8000e0ca:	c1 d0       	breq	8000e104 <_dtoa_r+0x8ac>
8000e0cc:	58 08       	cp.w	r8,0
8000e0ce:	e0 8a 00 17 	brle	8000e0fc <_dtoa_r+0x8a4>
8000e0d2:	10 9a       	mov	r10,r8
8000e0d4:	50 08       	stdsp	sp[0x0],r8
8000e0d6:	08 9b       	mov	r11,r4
8000e0d8:	0e 9c       	mov	r12,r7
8000e0da:	f0 1f 00 f9 	mcall	8000e4bc <_dtoa_r+0xc64>
8000e0de:	06 9a       	mov	r10,r3
8000e0e0:	18 9b       	mov	r11,r12
8000e0e2:	18 94       	mov	r4,r12
8000e0e4:	0e 9c       	mov	r12,r7
8000e0e6:	f0 1f 00 f7 	mcall	8000e4c0 <_dtoa_r+0xc68>
8000e0ea:	18 99       	mov	r9,r12
8000e0ec:	06 9b       	mov	r11,r3
8000e0ee:	50 19       	stdsp	sp[0x4],r9
8000e0f0:	0e 9c       	mov	r12,r7
8000e0f2:	f0 1f 00 f5 	mcall	8000e4c4 <_dtoa_r+0xc6c>
8000e0f6:	40 19       	lddsp	r9,sp[0x4]
8000e0f8:	40 08       	lddsp	r8,sp[0x0]
8000e0fa:	12 93       	mov	r3,r9
8000e0fc:	e4 08 01 0a 	sub	r10,r2,r8
8000e100:	c0 80       	breq	8000e110 <_dtoa_r+0x8b8>
8000e102:	c0 28       	rjmp	8000e106 <_dtoa_r+0x8ae>
8000e104:	04 9a       	mov	r10,r2
8000e106:	06 9b       	mov	r11,r3
8000e108:	0e 9c       	mov	r12,r7
8000e10a:	f0 1f 00 ed 	mcall	8000e4bc <_dtoa_r+0xc64>
8000e10e:	18 93       	mov	r3,r12
8000e110:	30 1b       	mov	r11,1
8000e112:	0e 9c       	mov	r12,r7
8000e114:	f0 1f 00 e9 	mcall	8000e4b8 <_dtoa_r+0xc60>
8000e118:	41 1a       	lddsp	r10,sp[0x44]
8000e11a:	18 92       	mov	r2,r12
8000e11c:	58 0a       	cp.w	r10,0
8000e11e:	e0 8a 00 07 	brle	8000e12c <_dtoa_r+0x8d4>
8000e122:	18 9b       	mov	r11,r12
8000e124:	0e 9c       	mov	r12,r7
8000e126:	f0 1f 00 e6 	mcall	8000e4bc <_dtoa_r+0xc64>
8000e12a:	18 92       	mov	r2,r12
8000e12c:	40 c9       	lddsp	r9,sp[0x30]
8000e12e:	58 19       	cp.w	r9,1
8000e130:	e0 89 00 14 	brgt	8000e158 <_dtoa_r+0x900>
8000e134:	40 38       	lddsp	r8,sp[0xc]
8000e136:	58 08       	cp.w	r8,0
8000e138:	c1 01       	brne	8000e158 <_dtoa_r+0x900>
8000e13a:	40 29       	lddsp	r9,sp[0x8]
8000e13c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000e140:	c0 c1       	brne	8000e158 <_dtoa_r+0x900>
8000e142:	12 98       	mov	r8,r9
8000e144:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000e148:	c0 80       	breq	8000e158 <_dtoa_r+0x900>
8000e14a:	40 4c       	lddsp	r12,sp[0x10]
8000e14c:	30 1b       	mov	r11,1
8000e14e:	2f fc       	sub	r12,-1
8000e150:	2f f0       	sub	r0,-1
8000e152:	50 4c       	stdsp	sp[0x10],r12
8000e154:	50 6b       	stdsp	sp[0x18],r11
8000e156:	c0 38       	rjmp	8000e15c <_dtoa_r+0x904>
8000e158:	30 0a       	mov	r10,0
8000e15a:	50 6a       	stdsp	sp[0x18],r10
8000e15c:	41 19       	lddsp	r9,sp[0x44]
8000e15e:	58 09       	cp.w	r9,0
8000e160:	c0 31       	brne	8000e166 <_dtoa_r+0x90e>
8000e162:	30 1c       	mov	r12,1
8000e164:	c0 98       	rjmp	8000e176 <_dtoa_r+0x91e>
8000e166:	64 48       	ld.w	r8,r2[0x10]
8000e168:	2f c8       	sub	r8,-4
8000e16a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000e16e:	f0 1f 00 d7 	mcall	8000e4c8 <_dtoa_r+0xc70>
8000e172:	f8 0c 11 20 	rsub	r12,r12,32
8000e176:	40 4b       	lddsp	r11,sp[0x10]
8000e178:	f8 0b 00 08 	add	r8,r12,r11
8000e17c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e180:	c0 c0       	breq	8000e198 <_dtoa_r+0x940>
8000e182:	f0 08 11 20 	rsub	r8,r8,32
8000e186:	58 48       	cp.w	r8,4
8000e188:	e0 8a 00 06 	brle	8000e194 <_dtoa_r+0x93c>
8000e18c:	20 48       	sub	r8,4
8000e18e:	10 0b       	add	r11,r8
8000e190:	50 4b       	stdsp	sp[0x10],r11
8000e192:	c0 78       	rjmp	8000e1a0 <_dtoa_r+0x948>
8000e194:	58 48       	cp.w	r8,4
8000e196:	c0 70       	breq	8000e1a4 <_dtoa_r+0x94c>
8000e198:	40 4a       	lddsp	r10,sp[0x10]
8000e19a:	2e 48       	sub	r8,-28
8000e19c:	10 0a       	add	r10,r8
8000e19e:	50 4a       	stdsp	sp[0x10],r10
8000e1a0:	10 00       	add	r0,r8
8000e1a2:	10 05       	add	r5,r8
8000e1a4:	58 00       	cp.w	r0,0
8000e1a6:	e0 8a 00 08 	brle	8000e1b6 <_dtoa_r+0x95e>
8000e1aa:	06 9b       	mov	r11,r3
8000e1ac:	00 9a       	mov	r10,r0
8000e1ae:	0e 9c       	mov	r12,r7
8000e1b0:	f0 1f 00 c7 	mcall	8000e4cc <_dtoa_r+0xc74>
8000e1b4:	18 93       	mov	r3,r12
8000e1b6:	40 49       	lddsp	r9,sp[0x10]
8000e1b8:	58 09       	cp.w	r9,0
8000e1ba:	e0 8a 00 08 	brle	8000e1ca <_dtoa_r+0x972>
8000e1be:	04 9b       	mov	r11,r2
8000e1c0:	12 9a       	mov	r10,r9
8000e1c2:	0e 9c       	mov	r12,r7
8000e1c4:	f0 1f 00 c2 	mcall	8000e4cc <_dtoa_r+0xc74>
8000e1c8:	18 92       	mov	r2,r12
8000e1ca:	41 48       	lddsp	r8,sp[0x50]
8000e1cc:	58 08       	cp.w	r8,0
8000e1ce:	c1 b0       	breq	8000e204 <_dtoa_r+0x9ac>
8000e1d0:	04 9b       	mov	r11,r2
8000e1d2:	06 9c       	mov	r12,r3
8000e1d4:	f0 1f 00 bf 	mcall	8000e4d0 <_dtoa_r+0xc78>
8000e1d8:	c1 64       	brge	8000e204 <_dtoa_r+0x9ac>
8000e1da:	06 9b       	mov	r11,r3
8000e1dc:	30 09       	mov	r9,0
8000e1de:	30 aa       	mov	r10,10
8000e1e0:	0e 9c       	mov	r12,r7
8000e1e2:	f0 1f 00 bd 	mcall	8000e4d4 <_dtoa_r+0xc7c>
8000e1e6:	20 16       	sub	r6,1
8000e1e8:	18 93       	mov	r3,r12
8000e1ea:	40 dc       	lddsp	r12,sp[0x34]
8000e1ec:	58 0c       	cp.w	r12,0
8000e1ee:	c0 31       	brne	8000e1f4 <_dtoa_r+0x99c>
8000e1f0:	40 91       	lddsp	r1,sp[0x24]
8000e1f2:	c0 98       	rjmp	8000e204 <_dtoa_r+0x9ac>
8000e1f4:	08 9b       	mov	r11,r4
8000e1f6:	40 91       	lddsp	r1,sp[0x24]
8000e1f8:	30 09       	mov	r9,0
8000e1fa:	30 aa       	mov	r10,10
8000e1fc:	0e 9c       	mov	r12,r7
8000e1fe:	f0 1f 00 b6 	mcall	8000e4d4 <_dtoa_r+0xc7c>
8000e202:	18 94       	mov	r4,r12
8000e204:	58 01       	cp.w	r1,0
8000e206:	5f a9       	srle	r9
8000e208:	40 cb       	lddsp	r11,sp[0x30]
8000e20a:	58 2b       	cp.w	r11,2
8000e20c:	5f 98       	srgt	r8
8000e20e:	f3 e8 00 08 	and	r8,r9,r8
8000e212:	c2 50       	breq	8000e25c <_dtoa_r+0xa04>
8000e214:	58 01       	cp.w	r1,0
8000e216:	c1 11       	brne	8000e238 <_dtoa_r+0x9e0>
8000e218:	04 9b       	mov	r11,r2
8000e21a:	02 99       	mov	r9,r1
8000e21c:	30 5a       	mov	r10,5
8000e21e:	0e 9c       	mov	r12,r7
8000e220:	f0 1f 00 ad 	mcall	8000e4d4 <_dtoa_r+0xc7c>
8000e224:	18 92       	mov	r2,r12
8000e226:	18 9b       	mov	r11,r12
8000e228:	06 9c       	mov	r12,r3
8000e22a:	f0 1f 00 aa 	mcall	8000e4d0 <_dtoa_r+0xc78>
8000e22e:	e0 89 00 0f 	brgt	8000e24c <_dtoa_r+0x9f4>
8000e232:	c0 38       	rjmp	8000e238 <_dtoa_r+0x9e0>
8000e234:	30 02       	mov	r2,0
8000e236:	04 94       	mov	r4,r2
8000e238:	40 ea       	lddsp	r10,sp[0x38]
8000e23a:	30 09       	mov	r9,0
8000e23c:	5c da       	com	r10
8000e23e:	40 85       	lddsp	r5,sp[0x20]
8000e240:	50 6a       	stdsp	sp[0x18],r10
8000e242:	50 49       	stdsp	sp[0x10],r9
8000e244:	c0 f9       	rjmp	8000e462 <_dtoa_r+0xc0a>
8000e246:	08 92       	mov	r2,r4
8000e248:	40 66       	lddsp	r6,sp[0x18]
8000e24a:	04 94       	mov	r4,r2
8000e24c:	2f f6       	sub	r6,-1
8000e24e:	50 66       	stdsp	sp[0x18],r6
8000e250:	33 18       	mov	r8,49
8000e252:	40 85       	lddsp	r5,sp[0x20]
8000e254:	0a c8       	st.b	r5++,r8
8000e256:	30 08       	mov	r8,0
8000e258:	50 48       	stdsp	sp[0x10],r8
8000e25a:	c0 49       	rjmp	8000e462 <_dtoa_r+0xc0a>
8000e25c:	40 dc       	lddsp	r12,sp[0x34]
8000e25e:	58 0c       	cp.w	r12,0
8000e260:	e0 80 00 b5 	breq	8000e3ca <_dtoa_r+0xb72>
8000e264:	58 05       	cp.w	r5,0
8000e266:	e0 8a 00 08 	brle	8000e276 <_dtoa_r+0xa1e>
8000e26a:	08 9b       	mov	r11,r4
8000e26c:	0a 9a       	mov	r10,r5
8000e26e:	0e 9c       	mov	r12,r7
8000e270:	f0 1f 00 97 	mcall	8000e4cc <_dtoa_r+0xc74>
8000e274:	18 94       	mov	r4,r12
8000e276:	40 6b       	lddsp	r11,sp[0x18]
8000e278:	58 0b       	cp.w	r11,0
8000e27a:	c0 31       	brne	8000e280 <_dtoa_r+0xa28>
8000e27c:	08 9c       	mov	r12,r4
8000e27e:	c1 38       	rjmp	8000e2a4 <_dtoa_r+0xa4c>
8000e280:	68 1b       	ld.w	r11,r4[0x4]
8000e282:	0e 9c       	mov	r12,r7
8000e284:	f0 1f 00 95 	mcall	8000e4d8 <_dtoa_r+0xc80>
8000e288:	68 4a       	ld.w	r10,r4[0x10]
8000e28a:	18 95       	mov	r5,r12
8000e28c:	e8 cb ff f4 	sub	r11,r4,-12
8000e290:	2f ea       	sub	r10,-2
8000e292:	2f 4c       	sub	r12,-12
8000e294:	a3 6a       	lsl	r10,0x2
8000e296:	f0 1f 00 92 	mcall	8000e4dc <_dtoa_r+0xc84>
8000e29a:	0a 9b       	mov	r11,r5
8000e29c:	30 1a       	mov	r10,1
8000e29e:	0e 9c       	mov	r12,r7
8000e2a0:	f0 1f 00 8b 	mcall	8000e4cc <_dtoa_r+0xc74>
8000e2a4:	50 44       	stdsp	sp[0x10],r4
8000e2a6:	40 3a       	lddsp	r10,sp[0xc]
8000e2a8:	30 19       	mov	r9,1
8000e2aa:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000e2ae:	18 94       	mov	r4,r12
8000e2b0:	50 da       	stdsp	sp[0x34],r10
8000e2b2:	40 85       	lddsp	r5,sp[0x20]
8000e2b4:	50 99       	stdsp	sp[0x24],r9
8000e2b6:	50 26       	stdsp	sp[0x8],r6
8000e2b8:	50 e1       	stdsp	sp[0x38],r1
8000e2ba:	04 9b       	mov	r11,r2
8000e2bc:	06 9c       	mov	r12,r3
8000e2be:	f0 1f 00 89 	mcall	8000e4e0 <_dtoa_r+0xc88>
8000e2c2:	40 4b       	lddsp	r11,sp[0x10]
8000e2c4:	f8 c0 ff d0 	sub	r0,r12,-48
8000e2c8:	06 9c       	mov	r12,r3
8000e2ca:	f0 1f 00 82 	mcall	8000e4d0 <_dtoa_r+0xc78>
8000e2ce:	08 9a       	mov	r10,r4
8000e2d0:	50 6c       	stdsp	sp[0x18],r12
8000e2d2:	04 9b       	mov	r11,r2
8000e2d4:	0e 9c       	mov	r12,r7
8000e2d6:	f0 1f 00 84 	mcall	8000e4e4 <_dtoa_r+0xc8c>
8000e2da:	18 91       	mov	r1,r12
8000e2dc:	78 38       	ld.w	r8,r12[0xc]
8000e2de:	58 08       	cp.w	r8,0
8000e2e0:	c0 30       	breq	8000e2e6 <_dtoa_r+0xa8e>
8000e2e2:	30 16       	mov	r6,1
8000e2e4:	c0 68       	rjmp	8000e2f0 <_dtoa_r+0xa98>
8000e2e6:	18 9b       	mov	r11,r12
8000e2e8:	06 9c       	mov	r12,r3
8000e2ea:	f0 1f 00 7a 	mcall	8000e4d0 <_dtoa_r+0xc78>
8000e2ee:	18 96       	mov	r6,r12
8000e2f0:	0e 9c       	mov	r12,r7
8000e2f2:	02 9b       	mov	r11,r1
8000e2f4:	f0 1f 00 74 	mcall	8000e4c4 <_dtoa_r+0xc6c>
8000e2f8:	40 cc       	lddsp	r12,sp[0x30]
8000e2fa:	ed ec 10 08 	or	r8,r6,r12
8000e2fe:	c0 d1       	brne	8000e318 <_dtoa_r+0xac0>
8000e300:	40 db       	lddsp	r11,sp[0x34]
8000e302:	58 0b       	cp.w	r11,0
8000e304:	c0 a1       	brne	8000e318 <_dtoa_r+0xac0>
8000e306:	40 26       	lddsp	r6,sp[0x8]
8000e308:	e0 40 00 39 	cp.w	r0,57
8000e30c:	c3 00       	breq	8000e36c <_dtoa_r+0xb14>
8000e30e:	40 6a       	lddsp	r10,sp[0x18]
8000e310:	58 0a       	cp.w	r10,0
8000e312:	e0 89 00 24 	brgt	8000e35a <_dtoa_r+0xb02>
8000e316:	c2 f8       	rjmp	8000e374 <_dtoa_r+0xb1c>
8000e318:	40 69       	lddsp	r9,sp[0x18]
8000e31a:	58 09       	cp.w	r9,0
8000e31c:	c0 85       	brlt	8000e32c <_dtoa_r+0xad4>
8000e31e:	12 98       	mov	r8,r9
8000e320:	40 cc       	lddsp	r12,sp[0x30]
8000e322:	18 48       	or	r8,r12
8000e324:	c1 d1       	brne	8000e35e <_dtoa_r+0xb06>
8000e326:	40 db       	lddsp	r11,sp[0x34]
8000e328:	58 0b       	cp.w	r11,0
8000e32a:	c1 a1       	brne	8000e35e <_dtoa_r+0xb06>
8000e32c:	0c 99       	mov	r9,r6
8000e32e:	40 26       	lddsp	r6,sp[0x8]
8000e330:	58 09       	cp.w	r9,0
8000e332:	e0 8a 00 21 	brle	8000e374 <_dtoa_r+0xb1c>
8000e336:	06 9b       	mov	r11,r3
8000e338:	30 1a       	mov	r10,1
8000e33a:	0e 9c       	mov	r12,r7
8000e33c:	f0 1f 00 64 	mcall	8000e4cc <_dtoa_r+0xc74>
8000e340:	04 9b       	mov	r11,r2
8000e342:	18 93       	mov	r3,r12
8000e344:	f0 1f 00 63 	mcall	8000e4d0 <_dtoa_r+0xc78>
8000e348:	e0 89 00 06 	brgt	8000e354 <_dtoa_r+0xafc>
8000e34c:	c1 41       	brne	8000e374 <_dtoa_r+0xb1c>
8000e34e:	ed b0 00 00 	bld	r0,0x0
8000e352:	c1 11       	brne	8000e374 <_dtoa_r+0xb1c>
8000e354:	e0 40 00 39 	cp.w	r0,57
8000e358:	c0 a0       	breq	8000e36c <_dtoa_r+0xb14>
8000e35a:	2f f0       	sub	r0,-1
8000e35c:	c0 c8       	rjmp	8000e374 <_dtoa_r+0xb1c>
8000e35e:	58 06       	cp.w	r6,0
8000e360:	e0 8a 00 0c 	brle	8000e378 <_dtoa_r+0xb20>
8000e364:	40 26       	lddsp	r6,sp[0x8]
8000e366:	e0 40 00 39 	cp.w	r0,57
8000e36a:	c0 41       	brne	8000e372 <_dtoa_r+0xb1a>
8000e36c:	33 98       	mov	r8,57
8000e36e:	0a c8       	st.b	r5++,r8
8000e370:	c6 78       	rjmp	8000e43e <_dtoa_r+0xbe6>
8000e372:	2f f0       	sub	r0,-1
8000e374:	0a c0       	st.b	r5++,r0
8000e376:	c7 58       	rjmp	8000e460 <_dtoa_r+0xc08>
8000e378:	0a c0       	st.b	r5++,r0
8000e37a:	40 9a       	lddsp	r10,sp[0x24]
8000e37c:	40 e9       	lddsp	r9,sp[0x38]
8000e37e:	12 3a       	cp.w	r10,r9
8000e380:	c4 30       	breq	8000e406 <_dtoa_r+0xbae>
8000e382:	06 9b       	mov	r11,r3
8000e384:	30 09       	mov	r9,0
8000e386:	30 aa       	mov	r10,10
8000e388:	0e 9c       	mov	r12,r7
8000e38a:	f0 1f 00 53 	mcall	8000e4d4 <_dtoa_r+0xc7c>
8000e38e:	40 48       	lddsp	r8,sp[0x10]
8000e390:	18 93       	mov	r3,r12
8000e392:	08 38       	cp.w	r8,r4
8000e394:	c0 91       	brne	8000e3a6 <_dtoa_r+0xb4e>
8000e396:	10 9b       	mov	r11,r8
8000e398:	30 09       	mov	r9,0
8000e39a:	30 aa       	mov	r10,10
8000e39c:	0e 9c       	mov	r12,r7
8000e39e:	f0 1f 00 4e 	mcall	8000e4d4 <_dtoa_r+0xc7c>
8000e3a2:	50 4c       	stdsp	sp[0x10],r12
8000e3a4:	c0 e8       	rjmp	8000e3c0 <_dtoa_r+0xb68>
8000e3a6:	40 4b       	lddsp	r11,sp[0x10]
8000e3a8:	30 09       	mov	r9,0
8000e3aa:	30 aa       	mov	r10,10
8000e3ac:	0e 9c       	mov	r12,r7
8000e3ae:	f0 1f 00 4a 	mcall	8000e4d4 <_dtoa_r+0xc7c>
8000e3b2:	08 9b       	mov	r11,r4
8000e3b4:	50 4c       	stdsp	sp[0x10],r12
8000e3b6:	30 09       	mov	r9,0
8000e3b8:	30 aa       	mov	r10,10
8000e3ba:	0e 9c       	mov	r12,r7
8000e3bc:	f0 1f 00 46 	mcall	8000e4d4 <_dtoa_r+0xc7c>
8000e3c0:	18 94       	mov	r4,r12
8000e3c2:	40 9c       	lddsp	r12,sp[0x24]
8000e3c4:	2f fc       	sub	r12,-1
8000e3c6:	50 9c       	stdsp	sp[0x24],r12
8000e3c8:	c7 9b       	rjmp	8000e2ba <_dtoa_r+0xa62>
8000e3ca:	30 18       	mov	r8,1
8000e3cc:	06 90       	mov	r0,r3
8000e3ce:	40 85       	lddsp	r5,sp[0x20]
8000e3d0:	08 93       	mov	r3,r4
8000e3d2:	0c 94       	mov	r4,r6
8000e3d4:	10 96       	mov	r6,r8
8000e3d6:	04 9b       	mov	r11,r2
8000e3d8:	00 9c       	mov	r12,r0
8000e3da:	f0 1f 00 42 	mcall	8000e4e0 <_dtoa_r+0xc88>
8000e3de:	2d 0c       	sub	r12,-48
8000e3e0:	0a cc       	st.b	r5++,r12
8000e3e2:	02 36       	cp.w	r6,r1
8000e3e4:	c0 a4       	brge	8000e3f8 <_dtoa_r+0xba0>
8000e3e6:	00 9b       	mov	r11,r0
8000e3e8:	30 09       	mov	r9,0
8000e3ea:	30 aa       	mov	r10,10
8000e3ec:	0e 9c       	mov	r12,r7
8000e3ee:	2f f6       	sub	r6,-1
8000e3f0:	f0 1f 00 39 	mcall	8000e4d4 <_dtoa_r+0xc7c>
8000e3f4:	18 90       	mov	r0,r12
8000e3f6:	cf 0b       	rjmp	8000e3d6 <_dtoa_r+0xb7e>
8000e3f8:	08 96       	mov	r6,r4
8000e3fa:	30 0b       	mov	r11,0
8000e3fc:	06 94       	mov	r4,r3
8000e3fe:	50 4b       	stdsp	sp[0x10],r11
8000e400:	00 93       	mov	r3,r0
8000e402:	18 90       	mov	r0,r12
8000e404:	c0 28       	rjmp	8000e408 <_dtoa_r+0xbb0>
8000e406:	40 26       	lddsp	r6,sp[0x8]
8000e408:	06 9b       	mov	r11,r3
8000e40a:	30 1a       	mov	r10,1
8000e40c:	0e 9c       	mov	r12,r7
8000e40e:	f0 1f 00 30 	mcall	8000e4cc <_dtoa_r+0xc74>
8000e412:	04 9b       	mov	r11,r2
8000e414:	18 93       	mov	r3,r12
8000e416:	f0 1f 00 2f 	mcall	8000e4d0 <_dtoa_r+0xc78>
8000e41a:	e0 89 00 12 	brgt	8000e43e <_dtoa_r+0xbe6>
8000e41e:	c1 b1       	brne	8000e454 <_dtoa_r+0xbfc>
8000e420:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000e424:	c0 d1       	brne	8000e43e <_dtoa_r+0xbe6>
8000e426:	c1 78       	rjmp	8000e454 <_dtoa_r+0xbfc>
8000e428:	40 89       	lddsp	r9,sp[0x20]
8000e42a:	12 38       	cp.w	r8,r9
8000e42c:	c0 30       	breq	8000e432 <_dtoa_r+0xbda>
8000e42e:	10 95       	mov	r5,r8
8000e430:	c0 88       	rjmp	8000e440 <_dtoa_r+0xbe8>
8000e432:	2f f6       	sub	r6,-1
8000e434:	50 66       	stdsp	sp[0x18],r6
8000e436:	33 18       	mov	r8,49
8000e438:	40 8c       	lddsp	r12,sp[0x20]
8000e43a:	b8 88       	st.b	r12[0x0],r8
8000e43c:	c1 38       	rjmp	8000e462 <_dtoa_r+0xc0a>
8000e43e:	33 9a       	mov	r10,57
8000e440:	0a 98       	mov	r8,r5
8000e442:	11 79       	ld.ub	r9,--r8
8000e444:	f4 09 18 00 	cp.b	r9,r10
8000e448:	cf 00       	breq	8000e428 <_dtoa_r+0xbd0>
8000e44a:	2f f9       	sub	r9,-1
8000e44c:	b0 89       	st.b	r8[0x0],r9
8000e44e:	c0 98       	rjmp	8000e460 <_dtoa_r+0xc08>
8000e450:	10 95       	mov	r5,r8
8000e452:	c0 28       	rjmp	8000e456 <_dtoa_r+0xbfe>
8000e454:	33 09       	mov	r9,48
8000e456:	0a 98       	mov	r8,r5
8000e458:	11 7a       	ld.ub	r10,--r8
8000e45a:	f2 0a 18 00 	cp.b	r10,r9
8000e45e:	cf 90       	breq	8000e450 <_dtoa_r+0xbf8>
8000e460:	50 66       	stdsp	sp[0x18],r6
8000e462:	04 9b       	mov	r11,r2
8000e464:	0e 9c       	mov	r12,r7
8000e466:	f0 1f 00 18 	mcall	8000e4c4 <_dtoa_r+0xc6c>
8000e46a:	58 04       	cp.w	r4,0
8000e46c:	c1 20       	breq	8000e490 <_dtoa_r+0xc38>
8000e46e:	40 4b       	lddsp	r11,sp[0x10]
8000e470:	08 3b       	cp.w	r11,r4
8000e472:	5f 19       	srne	r9
8000e474:	58 0b       	cp.w	r11,0
8000e476:	5f 18       	srne	r8
8000e478:	f3 e8 00 08 	and	r8,r9,r8
8000e47c:	c0 40       	breq	8000e484 <_dtoa_r+0xc2c>
8000e47e:	0e 9c       	mov	r12,r7
8000e480:	f0 1f 00 11 	mcall	8000e4c4 <_dtoa_r+0xc6c>
8000e484:	08 9b       	mov	r11,r4
8000e486:	0e 9c       	mov	r12,r7
8000e488:	f0 1f 00 0f 	mcall	8000e4c4 <_dtoa_r+0xc6c>
8000e48c:	c0 28       	rjmp	8000e490 <_dtoa_r+0xc38>
8000e48e:	50 66       	stdsp	sp[0x18],r6
8000e490:	0e 9c       	mov	r12,r7
8000e492:	06 9b       	mov	r11,r3
8000e494:	f0 1f 00 0c 	mcall	8000e4c4 <_dtoa_r+0xc6c>
8000e498:	30 08       	mov	r8,0
8000e49a:	aa 88       	st.b	r5[0x0],r8
8000e49c:	40 68       	lddsp	r8,sp[0x18]
8000e49e:	41 5a       	lddsp	r10,sp[0x54]
8000e4a0:	2f f8       	sub	r8,-1
8000e4a2:	41 29       	lddsp	r9,sp[0x48]
8000e4a4:	95 08       	st.w	r10[0x0],r8
8000e4a6:	40 8c       	lddsp	r12,sp[0x20]
8000e4a8:	58 09       	cp.w	r9,0
8000e4aa:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000e4ae:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000e4b2:	2e 6d       	sub	sp,-104
8000e4b4:	d8 32       	popm	r0-r7,pc
8000e4b6:	00 00       	add	r0,r0
8000e4b8:	80 00       	ld.sh	r0,r0[0x0]
8000e4ba:	f7 60 80 00 	st.b	r11[-32768],r0
8000e4be:	f8 00       	*unknown*
8000e4c0:	80 00       	ld.sh	r0,r0[0x0]
8000e4c2:	f6 58 80 00 	cp.w	r8,-557056
8000e4c6:	f3 88       	*unknown*
8000e4c8:	80 00       	ld.sh	r0,r0[0x0]
8000e4ca:	f2 68 80 00 	mov	r8,-884736
8000e4ce:	f5 c4       	*unknown*
8000e4d0:	80 00       	ld.sh	r0,r0[0x0]
8000e4d2:	f3 56 80 00 	st.h	r9[-32768],r6
8000e4d6:	f7 78 80 00 	stcond	r11[-32768],r8
8000e4da:	f3 c0       	*unknown*
8000e4dc:	80 00       	ld.sh	r0,r0[0x0]
8000e4de:	b1 26       	st.d	r8++,r6
8000e4e0:	80 00       	ld.sh	r0,r0[0x0]
8000e4e2:	d7 34       	*unknown*
8000e4e4:	80 00       	ld.sh	r0,r0[0x0]
8000e4e6:	f4 ec d4 21 	ld.d	r12,r10[-11231]

8000e4e8 <_fflush_r>:
8000e4e8:	d4 21       	pushm	r4-r7,lr
8000e4ea:	16 97       	mov	r7,r11
8000e4ec:	18 96       	mov	r6,r12
8000e4ee:	76 48       	ld.w	r8,r11[0x10]
8000e4f0:	58 08       	cp.w	r8,0
8000e4f2:	c7 d0       	breq	8000e5ec <_fflush_r+0x104>
8000e4f4:	58 0c       	cp.w	r12,0
8000e4f6:	c0 60       	breq	8000e502 <_fflush_r+0x1a>
8000e4f8:	78 68       	ld.w	r8,r12[0x18]
8000e4fa:	58 08       	cp.w	r8,0
8000e4fc:	c0 31       	brne	8000e502 <_fflush_r+0x1a>
8000e4fe:	f0 1f 00 3d 	mcall	8000e5f0 <_fflush_r+0x108>
8000e502:	4b d8       	lddpc	r8,8000e5f4 <_fflush_r+0x10c>
8000e504:	10 37       	cp.w	r7,r8
8000e506:	c0 31       	brne	8000e50c <_fflush_r+0x24>
8000e508:	6c 07       	ld.w	r7,r6[0x0]
8000e50a:	c0 a8       	rjmp	8000e51e <_fflush_r+0x36>
8000e50c:	4b b8       	lddpc	r8,8000e5f8 <_fflush_r+0x110>
8000e50e:	10 37       	cp.w	r7,r8
8000e510:	c0 31       	brne	8000e516 <_fflush_r+0x2e>
8000e512:	6c 17       	ld.w	r7,r6[0x4]
8000e514:	c0 58       	rjmp	8000e51e <_fflush_r+0x36>
8000e516:	4b a8       	lddpc	r8,8000e5fc <_fflush_r+0x114>
8000e518:	10 37       	cp.w	r7,r8
8000e51a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000e51e:	8e 6a       	ld.sh	r10,r7[0xc]
8000e520:	14 98       	mov	r8,r10
8000e522:	ed ba 00 03 	bld	r10,0x3
8000e526:	c4 20       	breq	8000e5aa <_fflush_r+0xc2>
8000e528:	ab ba       	sbr	r10,0xb
8000e52a:	ae 6a       	st.h	r7[0xc],r10
8000e52c:	6e 18       	ld.w	r8,r7[0x4]
8000e52e:	58 08       	cp.w	r8,0
8000e530:	e0 89 00 06 	brgt	8000e53c <_fflush_r+0x54>
8000e534:	6f 08       	ld.w	r8,r7[0x40]
8000e536:	58 08       	cp.w	r8,0
8000e538:	e0 8a 00 5a 	brle	8000e5ec <_fflush_r+0x104>
8000e53c:	6e b8       	ld.w	r8,r7[0x2c]
8000e53e:	58 08       	cp.w	r8,0
8000e540:	c5 60       	breq	8000e5ec <_fflush_r+0x104>
8000e542:	e2 1a 10 00 	andl	r10,0x1000,COH
8000e546:	c0 30       	breq	8000e54c <_fflush_r+0x64>
8000e548:	6f 55       	ld.w	r5,r7[0x54]
8000e54a:	c0 f8       	rjmp	8000e568 <_fflush_r+0x80>
8000e54c:	30 19       	mov	r9,1
8000e54e:	6e 8b       	ld.w	r11,r7[0x20]
8000e550:	0c 9c       	mov	r12,r6
8000e552:	5d 18       	icall	r8
8000e554:	18 95       	mov	r5,r12
8000e556:	5b fc       	cp.w	r12,-1
8000e558:	c0 81       	brne	8000e568 <_fflush_r+0x80>
8000e55a:	6c 38       	ld.w	r8,r6[0xc]
8000e55c:	59 d8       	cp.w	r8,29
8000e55e:	c4 70       	breq	8000e5ec <_fflush_r+0x104>
8000e560:	8e 68       	ld.sh	r8,r7[0xc]
8000e562:	a7 a8       	sbr	r8,0x6
8000e564:	ae 68       	st.h	r7[0xc],r8
8000e566:	d8 22       	popm	r4-r7,pc
8000e568:	8e 68       	ld.sh	r8,r7[0xc]
8000e56a:	ed b8 00 02 	bld	r8,0x2
8000e56e:	c0 91       	brne	8000e580 <_fflush_r+0x98>
8000e570:	6e 18       	ld.w	r8,r7[0x4]
8000e572:	10 15       	sub	r5,r8
8000e574:	6e d8       	ld.w	r8,r7[0x34]
8000e576:	58 08       	cp.w	r8,0
8000e578:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000e57c:	eb d8 e1 15 	subne	r5,r5,r8
8000e580:	6e b8       	ld.w	r8,r7[0x2c]
8000e582:	0c 9c       	mov	r12,r6
8000e584:	30 09       	mov	r9,0
8000e586:	0a 9a       	mov	r10,r5
8000e588:	6e 8b       	ld.w	r11,r7[0x20]
8000e58a:	5d 18       	icall	r8
8000e58c:	8e 68       	ld.sh	r8,r7[0xc]
8000e58e:	0a 3c       	cp.w	r12,r5
8000e590:	c2 61       	brne	8000e5dc <_fflush_r+0xf4>
8000e592:	ab d8       	cbr	r8,0xb
8000e594:	30 0c       	mov	r12,0
8000e596:	6e 49       	ld.w	r9,r7[0x10]
8000e598:	ae 68       	st.h	r7[0xc],r8
8000e59a:	8f 1c       	st.w	r7[0x4],r12
8000e59c:	8f 09       	st.w	r7[0x0],r9
8000e59e:	ed b8 00 0c 	bld	r8,0xc
8000e5a2:	c2 51       	brne	8000e5ec <_fflush_r+0x104>
8000e5a4:	ef 45 00 54 	st.w	r7[84],r5
8000e5a8:	d8 22       	popm	r4-r7,pc
8000e5aa:	6e 45       	ld.w	r5,r7[0x10]
8000e5ac:	58 05       	cp.w	r5,0
8000e5ae:	c1 f0       	breq	8000e5ec <_fflush_r+0x104>
8000e5b0:	6e 04       	ld.w	r4,r7[0x0]
8000e5b2:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000e5b6:	8f 05       	st.w	r7[0x0],r5
8000e5b8:	f9 b8 01 00 	movne	r8,0
8000e5bc:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000e5c0:	0a 14       	sub	r4,r5
8000e5c2:	8f 28       	st.w	r7[0x8],r8
8000e5c4:	c1 18       	rjmp	8000e5e6 <_fflush_r+0xfe>
8000e5c6:	08 99       	mov	r9,r4
8000e5c8:	0a 9a       	mov	r10,r5
8000e5ca:	6e a8       	ld.w	r8,r7[0x28]
8000e5cc:	6e 8b       	ld.w	r11,r7[0x20]
8000e5ce:	0c 9c       	mov	r12,r6
8000e5d0:	5d 18       	icall	r8
8000e5d2:	18 14       	sub	r4,r12
8000e5d4:	58 0c       	cp.w	r12,0
8000e5d6:	e0 89 00 07 	brgt	8000e5e4 <_fflush_r+0xfc>
8000e5da:	8e 68       	ld.sh	r8,r7[0xc]
8000e5dc:	a7 a8       	sbr	r8,0x6
8000e5de:	3f fc       	mov	r12,-1
8000e5e0:	ae 68       	st.h	r7[0xc],r8
8000e5e2:	d8 22       	popm	r4-r7,pc
8000e5e4:	18 05       	add	r5,r12
8000e5e6:	58 04       	cp.w	r4,0
8000e5e8:	fe 99 ff ef 	brgt	8000e5c6 <_fflush_r+0xde>
8000e5ec:	d8 2a       	popm	r4-r7,pc,r12=0
8000e5ee:	00 00       	add	r0,r0
8000e5f0:	80 00       	ld.sh	r0,r0[0x0]
8000e5f2:	e6 c4 80 01 	sub	r4,r3,-32767
8000e5f6:	10 38       	cp.w	r8,r8
8000e5f8:	80 01       	ld.sh	r1,r0[0x0]
8000e5fa:	10 58       	eor	r8,r8
8000e5fc:	80 01       	ld.sh	r1,r0[0x0]
8000e5fe:	10 78       	tst	r8,r8

8000e600 <__sfp_lock_acquire>:
8000e600:	5e fc       	retal	r12

8000e602 <__sfp_lock_release>:
8000e602:	5e fc       	retal	r12

8000e604 <_cleanup_r>:
8000e604:	d4 01       	pushm	lr
8000e606:	48 3b       	lddpc	r11,8000e610 <_cleanup_r+0xc>
8000e608:	f0 1f 00 03 	mcall	8000e614 <_cleanup_r+0x10>
8000e60c:	d8 02       	popm	pc
8000e60e:	00 00       	add	r0,r0
8000e610:	80 00       	ld.sh	r0,r0[0x0]
8000e612:	ff 40 80 00 	st.w	pc[-32768],r0
8000e616:	ec 80 d4 21 	breq	801a8e58 <serialIdAndUsageFlashOne+0x129658>

8000e618 <__sfmoreglue>:
8000e618:	d4 21       	pushm	r4-r7,lr
8000e61a:	16 95       	mov	r5,r11
8000e61c:	f6 06 10 5c 	mul	r6,r11,92
8000e620:	ec cb ff f4 	sub	r11,r6,-12
8000e624:	f0 1f 00 07 	mcall	8000e640 <__sfmoreglue+0x28>
8000e628:	18 97       	mov	r7,r12
8000e62a:	c0 90       	breq	8000e63c <__sfmoreglue+0x24>
8000e62c:	99 15       	st.w	r12[0x4],r5
8000e62e:	30 0b       	mov	r11,0
8000e630:	2f 4c       	sub	r12,-12
8000e632:	0c 9a       	mov	r10,r6
8000e634:	8f 2c       	st.w	r7[0x8],r12
8000e636:	8f 0b       	st.w	r7[0x0],r11
8000e638:	f0 1f 00 03 	mcall	8000e644 <__sfmoreglue+0x2c>
8000e63c:	0e 9c       	mov	r12,r7
8000e63e:	d8 22       	popm	r4-r7,pc
8000e640:	80 00       	ld.sh	r0,r0[0x0]
8000e642:	ed c0 80 00 	stmts	r0,pc
8000e646:	b2 6e       	st.h	r9[0xc],lr

8000e648 <__sfp>:
8000e648:	d4 21       	pushm	r4-r7,lr
8000e64a:	49 c8       	lddpc	r8,8000e6b8 <__sfp+0x70>
8000e64c:	18 96       	mov	r6,r12
8000e64e:	70 07       	ld.w	r7,r8[0x0]
8000e650:	6e 68       	ld.w	r8,r7[0x18]
8000e652:	58 08       	cp.w	r8,0
8000e654:	c0 41       	brne	8000e65c <__sfp+0x14>
8000e656:	0e 9c       	mov	r12,r7
8000e658:	f0 1f 00 19 	mcall	8000e6bc <__sfp+0x74>
8000e65c:	ee c7 ff 28 	sub	r7,r7,-216
8000e660:	30 05       	mov	r5,0
8000e662:	6e 2c       	ld.w	r12,r7[0x8]
8000e664:	6e 18       	ld.w	r8,r7[0x4]
8000e666:	c0 68       	rjmp	8000e672 <__sfp+0x2a>
8000e668:	98 69       	ld.sh	r9,r12[0xc]
8000e66a:	ea 09 19 00 	cp.h	r9,r5
8000e66e:	c1 20       	breq	8000e692 <__sfp+0x4a>
8000e670:	2a 4c       	sub	r12,-92
8000e672:	20 18       	sub	r8,1
8000e674:	cf a7       	brpl	8000e668 <__sfp+0x20>
8000e676:	6e 08       	ld.w	r8,r7[0x0]
8000e678:	58 08       	cp.w	r8,0
8000e67a:	c0 71       	brne	8000e688 <__sfp+0x40>
8000e67c:	30 4b       	mov	r11,4
8000e67e:	0c 9c       	mov	r12,r6
8000e680:	f0 1f 00 10 	mcall	8000e6c0 <__sfp+0x78>
8000e684:	8f 0c       	st.w	r7[0x0],r12
8000e686:	c0 30       	breq	8000e68c <__sfp+0x44>
8000e688:	6e 07       	ld.w	r7,r7[0x0]
8000e68a:	ce cb       	rjmp	8000e662 <__sfp+0x1a>
8000e68c:	30 c8       	mov	r8,12
8000e68e:	8d 38       	st.w	r6[0xc],r8
8000e690:	d8 22       	popm	r4-r7,pc
8000e692:	30 08       	mov	r8,0
8000e694:	f9 48 00 4c 	st.w	r12[76],r8
8000e698:	99 08       	st.w	r12[0x0],r8
8000e69a:	99 28       	st.w	r12[0x8],r8
8000e69c:	99 18       	st.w	r12[0x4],r8
8000e69e:	99 48       	st.w	r12[0x10],r8
8000e6a0:	99 58       	st.w	r12[0x14],r8
8000e6a2:	99 68       	st.w	r12[0x18],r8
8000e6a4:	99 d8       	st.w	r12[0x34],r8
8000e6a6:	99 e8       	st.w	r12[0x38],r8
8000e6a8:	f9 48 00 48 	st.w	r12[72],r8
8000e6ac:	3f f8       	mov	r8,-1
8000e6ae:	b8 78       	st.h	r12[0xe],r8
8000e6b0:	30 18       	mov	r8,1
8000e6b2:	b8 68       	st.h	r12[0xc],r8
8000e6b4:	d8 22       	popm	r4-r7,pc
8000e6b6:	00 00       	add	r0,r0
8000e6b8:	80 01       	ld.sh	r1,r0[0x0]
8000e6ba:	10 9c       	mov	r12,r8
8000e6bc:	80 00       	ld.sh	r0,r0[0x0]
8000e6be:	e6 c4 80 00 	sub	r4,r3,-32768
8000e6c2:	e6 18 d4 21 	andh	r8,0xd421,COH

8000e6c4 <__sinit>:
8000e6c4:	d4 21       	pushm	r4-r7,lr
8000e6c6:	18 96       	mov	r6,r12
8000e6c8:	78 67       	ld.w	r7,r12[0x18]
8000e6ca:	58 07       	cp.w	r7,0
8000e6cc:	c4 71       	brne	8000e75a <__sinit+0x96>
8000e6ce:	4a 48       	lddpc	r8,8000e75c <__sinit+0x98>
8000e6d0:	30 15       	mov	r5,1
8000e6d2:	99 a8       	st.w	r12[0x28],r8
8000e6d4:	f9 47 00 d8 	st.w	r12[216],r7
8000e6d8:	f9 47 00 dc 	st.w	r12[220],r7
8000e6dc:	f9 47 00 e0 	st.w	r12[224],r7
8000e6e0:	99 65       	st.w	r12[0x18],r5
8000e6e2:	f0 1f 00 20 	mcall	8000e760 <__sinit+0x9c>
8000e6e6:	8d 0c       	st.w	r6[0x0],r12
8000e6e8:	0c 9c       	mov	r12,r6
8000e6ea:	f0 1f 00 1e 	mcall	8000e760 <__sinit+0x9c>
8000e6ee:	8d 1c       	st.w	r6[0x4],r12
8000e6f0:	0c 9c       	mov	r12,r6
8000e6f2:	f0 1f 00 1c 	mcall	8000e760 <__sinit+0x9c>
8000e6f6:	6c 09       	ld.w	r9,r6[0x0]
8000e6f8:	30 48       	mov	r8,4
8000e6fa:	93 07       	st.w	r9[0x0],r7
8000e6fc:	b2 68       	st.h	r9[0xc],r8
8000e6fe:	93 17       	st.w	r9[0x4],r7
8000e700:	93 27       	st.w	r9[0x8],r7
8000e702:	6c 18       	ld.w	r8,r6[0x4]
8000e704:	b2 77       	st.h	r9[0xe],r7
8000e706:	93 47       	st.w	r9[0x10],r7
8000e708:	93 57       	st.w	r9[0x14],r7
8000e70a:	93 67       	st.w	r9[0x18],r7
8000e70c:	93 89       	st.w	r9[0x20],r9
8000e70e:	91 07       	st.w	r8[0x0],r7
8000e710:	91 17       	st.w	r8[0x4],r7
8000e712:	91 27       	st.w	r8[0x8],r7
8000e714:	49 4e       	lddpc	lr,8000e764 <__sinit+0xa0>
8000e716:	49 5b       	lddpc	r11,8000e768 <__sinit+0xa4>
8000e718:	93 9e       	st.w	r9[0x24],lr
8000e71a:	93 ab       	st.w	r9[0x28],r11
8000e71c:	49 4a       	lddpc	r10,8000e76c <__sinit+0xa8>
8000e71e:	49 54       	lddpc	r4,8000e770 <__sinit+0xac>
8000e720:	93 ba       	st.w	r9[0x2c],r10
8000e722:	93 c4       	st.w	r9[0x30],r4
8000e724:	30 99       	mov	r9,9
8000e726:	b0 69       	st.h	r8[0xc],r9
8000e728:	b0 75       	st.h	r8[0xe],r5
8000e72a:	91 c4       	st.w	r8[0x30],r4
8000e72c:	91 47       	st.w	r8[0x10],r7
8000e72e:	91 57       	st.w	r8[0x14],r7
8000e730:	91 67       	st.w	r8[0x18],r7
8000e732:	91 88       	st.w	r8[0x20],r8
8000e734:	91 9e       	st.w	r8[0x24],lr
8000e736:	91 ab       	st.w	r8[0x28],r11
8000e738:	91 ba       	st.w	r8[0x2c],r10
8000e73a:	8d 2c       	st.w	r6[0x8],r12
8000e73c:	31 28       	mov	r8,18
8000e73e:	99 07       	st.w	r12[0x0],r7
8000e740:	b8 68       	st.h	r12[0xc],r8
8000e742:	99 17       	st.w	r12[0x4],r7
8000e744:	99 27       	st.w	r12[0x8],r7
8000e746:	30 28       	mov	r8,2
8000e748:	b8 78       	st.h	r12[0xe],r8
8000e74a:	99 c4       	st.w	r12[0x30],r4
8000e74c:	99 67       	st.w	r12[0x18],r7
8000e74e:	99 9e       	st.w	r12[0x24],lr
8000e750:	99 ab       	st.w	r12[0x28],r11
8000e752:	99 ba       	st.w	r12[0x2c],r10
8000e754:	99 47       	st.w	r12[0x10],r7
8000e756:	99 57       	st.w	r12[0x14],r7
8000e758:	99 8c       	st.w	r12[0x20],r12
8000e75a:	d8 22       	popm	r4-r7,pc
8000e75c:	80 00       	ld.sh	r0,r0[0x0]
8000e75e:	e6 04       	*unknown*
8000e760:	80 00       	ld.sh	r0,r0[0x0]
8000e762:	e6 48 80 00 	cp.w	r8,425984
8000e766:	fc 6c 80 00 	mov	r12,-229376
8000e76a:	fc 34 80 00 	sub	r4,-163840
8000e76e:	fc 0c       	*unknown*
8000e770:	80 00       	ld.sh	r0,r0[0x0]
8000e772:	fb fc d4 21 	ld.shvc	r12,sp[0x42]

8000e774 <_malloc_trim_r>:
8000e774:	d4 21       	pushm	r4-r7,lr
8000e776:	16 95       	mov	r5,r11
8000e778:	18 97       	mov	r7,r12
8000e77a:	f0 1f 00 23 	mcall	8000e804 <_malloc_trim_r+0x90>
8000e77e:	4a 34       	lddpc	r4,8000e808 <_malloc_trim_r+0x94>
8000e780:	68 28       	ld.w	r8,r4[0x8]
8000e782:	70 16       	ld.w	r6,r8[0x4]
8000e784:	e0 16 ff fc 	andl	r6,0xfffc
8000e788:	ec c8 ff 91 	sub	r8,r6,-111
8000e78c:	f0 05 01 05 	sub	r5,r8,r5
8000e790:	e0 15 ff 80 	andl	r5,0xff80
8000e794:	ea c5 00 80 	sub	r5,r5,128
8000e798:	e0 45 00 7f 	cp.w	r5,127
8000e79c:	e0 8a 00 23 	brle	8000e7e2 <_malloc_trim_r+0x6e>
8000e7a0:	30 0b       	mov	r11,0
8000e7a2:	0e 9c       	mov	r12,r7
8000e7a4:	f0 1f 00 1a 	mcall	8000e80c <_malloc_trim_r+0x98>
8000e7a8:	68 28       	ld.w	r8,r4[0x8]
8000e7aa:	0c 08       	add	r8,r6
8000e7ac:	10 3c       	cp.w	r12,r8
8000e7ae:	c1 a1       	brne	8000e7e2 <_malloc_trim_r+0x6e>
8000e7b0:	ea 0b 11 00 	rsub	r11,r5,0
8000e7b4:	0e 9c       	mov	r12,r7
8000e7b6:	f0 1f 00 16 	mcall	8000e80c <_malloc_trim_r+0x98>
8000e7ba:	5b fc       	cp.w	r12,-1
8000e7bc:	c1 71       	brne	8000e7ea <_malloc_trim_r+0x76>
8000e7be:	30 0b       	mov	r11,0
8000e7c0:	0e 9c       	mov	r12,r7
8000e7c2:	f0 1f 00 13 	mcall	8000e80c <_malloc_trim_r+0x98>
8000e7c6:	68 28       	ld.w	r8,r4[0x8]
8000e7c8:	f8 08 01 09 	sub	r9,r12,r8
8000e7cc:	58 f9       	cp.w	r9,15
8000e7ce:	e0 8a 00 0a 	brle	8000e7e2 <_malloc_trim_r+0x6e>
8000e7d2:	a1 a9       	sbr	r9,0x0
8000e7d4:	91 19       	st.w	r8[0x4],r9
8000e7d6:	48 f8       	lddpc	r8,8000e810 <_malloc_trim_r+0x9c>
8000e7d8:	70 09       	ld.w	r9,r8[0x0]
8000e7da:	48 f8       	lddpc	r8,8000e814 <_malloc_trim_r+0xa0>
8000e7dc:	f8 09 01 09 	sub	r9,r12,r9
8000e7e0:	91 09       	st.w	r8[0x0],r9
8000e7e2:	0e 9c       	mov	r12,r7
8000e7e4:	f0 1f 00 0d 	mcall	8000e818 <_malloc_trim_r+0xa4>
8000e7e8:	d8 2a       	popm	r4-r7,pc,r12=0
8000e7ea:	68 28       	ld.w	r8,r4[0x8]
8000e7ec:	0a 16       	sub	r6,r5
8000e7ee:	a1 a6       	sbr	r6,0x0
8000e7f0:	91 16       	st.w	r8[0x4],r6
8000e7f2:	48 98       	lddpc	r8,8000e814 <_malloc_trim_r+0xa0>
8000e7f4:	70 09       	ld.w	r9,r8[0x0]
8000e7f6:	0a 19       	sub	r9,r5
8000e7f8:	0e 9c       	mov	r12,r7
8000e7fa:	91 09       	st.w	r8[0x0],r9
8000e7fc:	f0 1f 00 07 	mcall	8000e818 <_malloc_trim_r+0xa4>
8000e800:	da 2a       	popm	r4-r7,pc,r12=1
8000e802:	00 00       	add	r0,r0
8000e804:	80 00       	ld.sh	r0,r0[0x0]
8000e806:	f2 64 00 00 	mov	r4,-917504
8000e80a:	01 a8       	ld.ub	r8,r0[0x2]
8000e80c:	80 00       	ld.sh	r0,r0[0x0]
8000e80e:	fb d4 00 00 	ldins.h	r4:b,sp[0]
8000e812:	05 b4       	ld.ub	r4,r2[0x3]
8000e814:	00 00       	add	r0,r0
8000e816:	07 c4       	ld.ub	r4,r3[0x4]
8000e818:	80 00       	ld.sh	r0,r0[0x0]
8000e81a:	f2 66 d4 21 	mov	r6,-863199

8000e81c <_free_r>:
8000e81c:	d4 21       	pushm	r4-r7,lr
8000e81e:	16 96       	mov	r6,r11
8000e820:	18 97       	mov	r7,r12
8000e822:	58 0b       	cp.w	r11,0
8000e824:	e0 80 00 c8 	breq	8000e9b4 <_free_r+0x198>
8000e828:	f0 1f 00 4c 	mcall	8000e958 <_free_r+0x13c>
8000e82c:	20 86       	sub	r6,8
8000e82e:	4c ca       	lddpc	r10,8000e95c <_free_r+0x140>
8000e830:	6c 18       	ld.w	r8,r6[0x4]
8000e832:	74 2e       	ld.w	lr,r10[0x8]
8000e834:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000e838:	a1 c8       	cbr	r8,0x0
8000e83a:	ec 08 00 09 	add	r9,r6,r8
8000e83e:	72 1b       	ld.w	r11,r9[0x4]
8000e840:	e0 1b ff fc 	andl	r11,0xfffc
8000e844:	1c 39       	cp.w	r9,lr
8000e846:	c1 d1       	brne	8000e880 <_free_r+0x64>
8000e848:	f6 08 00 08 	add	r8,r11,r8
8000e84c:	58 0c       	cp.w	r12,0
8000e84e:	c0 81       	brne	8000e85e <_free_r+0x42>
8000e850:	6c 09       	ld.w	r9,r6[0x0]
8000e852:	12 16       	sub	r6,r9
8000e854:	12 08       	add	r8,r9
8000e856:	6c 3b       	ld.w	r11,r6[0xc]
8000e858:	6c 29       	ld.w	r9,r6[0x8]
8000e85a:	97 29       	st.w	r11[0x8],r9
8000e85c:	93 3b       	st.w	r9[0xc],r11
8000e85e:	10 99       	mov	r9,r8
8000e860:	95 26       	st.w	r10[0x8],r6
8000e862:	a1 a9       	sbr	r9,0x0
8000e864:	8d 19       	st.w	r6[0x4],r9
8000e866:	4b f9       	lddpc	r9,8000e960 <_free_r+0x144>
8000e868:	72 09       	ld.w	r9,r9[0x0]
8000e86a:	12 38       	cp.w	r8,r9
8000e86c:	c0 63       	brcs	8000e878 <_free_r+0x5c>
8000e86e:	4b e8       	lddpc	r8,8000e964 <_free_r+0x148>
8000e870:	0e 9c       	mov	r12,r7
8000e872:	70 0b       	ld.w	r11,r8[0x0]
8000e874:	f0 1f 00 3d 	mcall	8000e968 <_free_r+0x14c>
8000e878:	0e 9c       	mov	r12,r7
8000e87a:	f0 1f 00 3d 	mcall	8000e96c <_free_r+0x150>
8000e87e:	d8 22       	popm	r4-r7,pc
8000e880:	93 1b       	st.w	r9[0x4],r11
8000e882:	58 0c       	cp.w	r12,0
8000e884:	c0 30       	breq	8000e88a <_free_r+0x6e>
8000e886:	30 0c       	mov	r12,0
8000e888:	c1 08       	rjmp	8000e8a8 <_free_r+0x8c>
8000e88a:	6c 0e       	ld.w	lr,r6[0x0]
8000e88c:	f4 c5 ff f8 	sub	r5,r10,-8
8000e890:	1c 16       	sub	r6,lr
8000e892:	1c 08       	add	r8,lr
8000e894:	6c 2e       	ld.w	lr,r6[0x8]
8000e896:	0a 3e       	cp.w	lr,r5
8000e898:	f9 bc 00 01 	moveq	r12,1
8000e89c:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000e8a0:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000e8a4:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000e8a8:	f2 0b 00 0e 	add	lr,r9,r11
8000e8ac:	7c 1e       	ld.w	lr,lr[0x4]
8000e8ae:	ed be 00 00 	bld	lr,0x0
8000e8b2:	c1 30       	breq	8000e8d8 <_free_r+0xbc>
8000e8b4:	16 08       	add	r8,r11
8000e8b6:	58 0c       	cp.w	r12,0
8000e8b8:	c0 c1       	brne	8000e8d0 <_free_r+0xb4>
8000e8ba:	4a 9e       	lddpc	lr,8000e95c <_free_r+0x140>
8000e8bc:	72 2b       	ld.w	r11,r9[0x8]
8000e8be:	2f 8e       	sub	lr,-8
8000e8c0:	1c 3b       	cp.w	r11,lr
8000e8c2:	c0 71       	brne	8000e8d0 <_free_r+0xb4>
8000e8c4:	97 36       	st.w	r11[0xc],r6
8000e8c6:	97 26       	st.w	r11[0x8],r6
8000e8c8:	8d 2b       	st.w	r6[0x8],r11
8000e8ca:	8d 3b       	st.w	r6[0xc],r11
8000e8cc:	30 1c       	mov	r12,1
8000e8ce:	c0 58       	rjmp	8000e8d8 <_free_r+0xbc>
8000e8d0:	72 2b       	ld.w	r11,r9[0x8]
8000e8d2:	72 39       	ld.w	r9,r9[0xc]
8000e8d4:	93 2b       	st.w	r9[0x8],r11
8000e8d6:	97 39       	st.w	r11[0xc],r9
8000e8d8:	10 99       	mov	r9,r8
8000e8da:	ec 08 09 08 	st.w	r6[r8],r8
8000e8de:	a1 a9       	sbr	r9,0x0
8000e8e0:	8d 19       	st.w	r6[0x4],r9
8000e8e2:	58 0c       	cp.w	r12,0
8000e8e4:	c6 51       	brne	8000e9ae <_free_r+0x192>
8000e8e6:	e0 48 01 ff 	cp.w	r8,511
8000e8ea:	e0 8b 00 13 	brhi	8000e910 <_free_r+0xf4>
8000e8ee:	a3 98       	lsr	r8,0x3
8000e8f0:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000e8f4:	72 2b       	ld.w	r11,r9[0x8]
8000e8f6:	8d 39       	st.w	r6[0xc],r9
8000e8f8:	8d 2b       	st.w	r6[0x8],r11
8000e8fa:	97 36       	st.w	r11[0xc],r6
8000e8fc:	93 26       	st.w	r9[0x8],r6
8000e8fe:	a3 48       	asr	r8,0x2
8000e900:	74 19       	ld.w	r9,r10[0x4]
8000e902:	30 1b       	mov	r11,1
8000e904:	f6 08 09 48 	lsl	r8,r11,r8
8000e908:	f3 e8 10 08 	or	r8,r9,r8
8000e90c:	95 18       	st.w	r10[0x4],r8
8000e90e:	c5 08       	rjmp	8000e9ae <_free_r+0x192>
8000e910:	f0 0b 16 09 	lsr	r11,r8,0x9
8000e914:	58 4b       	cp.w	r11,4
8000e916:	e0 8b 00 06 	brhi	8000e922 <_free_r+0x106>
8000e91a:	f0 0b 16 06 	lsr	r11,r8,0x6
8000e91e:	2c 8b       	sub	r11,-56
8000e920:	c2 b8       	rjmp	8000e976 <_free_r+0x15a>
8000e922:	59 4b       	cp.w	r11,20
8000e924:	e0 8b 00 04 	brhi	8000e92c <_free_r+0x110>
8000e928:	2a 5b       	sub	r11,-91
8000e92a:	c2 68       	rjmp	8000e976 <_free_r+0x15a>
8000e92c:	e0 4b 00 54 	cp.w	r11,84
8000e930:	e0 8b 00 06 	brhi	8000e93c <_free_r+0x120>
8000e934:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000e938:	29 2b       	sub	r11,-110
8000e93a:	c1 e8       	rjmp	8000e976 <_free_r+0x15a>
8000e93c:	e0 4b 01 54 	cp.w	r11,340
8000e940:	e0 8b 00 06 	brhi	8000e94c <_free_r+0x130>
8000e944:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000e948:	28 9b       	sub	r11,-119
8000e94a:	c1 68       	rjmp	8000e976 <_free_r+0x15a>
8000e94c:	e0 4b 05 54 	cp.w	r11,1364
8000e950:	e0 88 00 10 	brls	8000e970 <_free_r+0x154>
8000e954:	37 eb       	mov	r11,126
8000e956:	c1 08       	rjmp	8000e976 <_free_r+0x15a>
8000e958:	80 00       	ld.sh	r0,r0[0x0]
8000e95a:	f2 64 00 00 	mov	r4,-917504
8000e95e:	01 a8       	ld.ub	r8,r0[0x2]
8000e960:	00 00       	add	r0,r0
8000e962:	05 b0       	ld.ub	r0,r2[0x3]
8000e964:	00 00       	add	r0,r0
8000e966:	07 c0       	ld.ub	r0,r3[0x4]
8000e968:	80 00       	ld.sh	r0,r0[0x0]
8000e96a:	e7 74 80 00 	stcond	r3[-32768],r4
8000e96e:	f2 66 f0 0b 	mov	r6,-856053
8000e972:	16 12       	sub	r2,r11
8000e974:	28 4b       	sub	r11,-124
8000e976:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000e97a:	78 29       	ld.w	r9,r12[0x8]
8000e97c:	18 39       	cp.w	r9,r12
8000e97e:	c0 e1       	brne	8000e99a <_free_r+0x17e>
8000e980:	74 18       	ld.w	r8,r10[0x4]
8000e982:	a3 4b       	asr	r11,0x2
8000e984:	30 1c       	mov	r12,1
8000e986:	f8 0b 09 4b 	lsl	r11,r12,r11
8000e98a:	f1 eb 10 0b 	or	r11,r8,r11
8000e98e:	12 98       	mov	r8,r9
8000e990:	95 1b       	st.w	r10[0x4],r11
8000e992:	c0 a8       	rjmp	8000e9a6 <_free_r+0x18a>
8000e994:	72 29       	ld.w	r9,r9[0x8]
8000e996:	18 39       	cp.w	r9,r12
8000e998:	c0 60       	breq	8000e9a4 <_free_r+0x188>
8000e99a:	72 1a       	ld.w	r10,r9[0x4]
8000e99c:	e0 1a ff fc 	andl	r10,0xfffc
8000e9a0:	14 38       	cp.w	r8,r10
8000e9a2:	cf 93       	brcs	8000e994 <_free_r+0x178>
8000e9a4:	72 38       	ld.w	r8,r9[0xc]
8000e9a6:	8d 38       	st.w	r6[0xc],r8
8000e9a8:	8d 29       	st.w	r6[0x8],r9
8000e9aa:	93 36       	st.w	r9[0xc],r6
8000e9ac:	91 26       	st.w	r8[0x8],r6
8000e9ae:	0e 9c       	mov	r12,r7
8000e9b0:	f0 1f 00 02 	mcall	8000e9b8 <_free_r+0x19c>
8000e9b4:	d8 22       	popm	r4-r7,pc
8000e9b6:	00 00       	add	r0,r0
8000e9b8:	80 00       	ld.sh	r0,r0[0x0]
8000e9ba:	f2 66 d4 31 	mov	r6,-863183

8000e9bc <__sfvwrite_r>:
8000e9bc:	d4 31       	pushm	r0-r7,lr
8000e9be:	20 3d       	sub	sp,12
8000e9c0:	14 94       	mov	r4,r10
8000e9c2:	18 95       	mov	r5,r12
8000e9c4:	16 97       	mov	r7,r11
8000e9c6:	74 28       	ld.w	r8,r10[0x8]
8000e9c8:	58 08       	cp.w	r8,0
8000e9ca:	e0 80 01 47 	breq	8000ec58 <__sfvwrite_r+0x29c>
8000e9ce:	96 68       	ld.sh	r8,r11[0xc]
8000e9d0:	ed b8 00 03 	bld	r8,0x3
8000e9d4:	c0 41       	brne	8000e9dc <__sfvwrite_r+0x20>
8000e9d6:	76 48       	ld.w	r8,r11[0x10]
8000e9d8:	58 08       	cp.w	r8,0
8000e9da:	c0 c1       	brne	8000e9f2 <__sfvwrite_r+0x36>
8000e9dc:	0e 9b       	mov	r11,r7
8000e9de:	0a 9c       	mov	r12,r5
8000e9e0:	f0 1f 00 a0 	mcall	8000ec60 <__sfvwrite_r+0x2a4>
8000e9e4:	c0 70       	breq	8000e9f2 <__sfvwrite_r+0x36>
8000e9e6:	8e 68       	ld.sh	r8,r7[0xc]
8000e9e8:	a7 a8       	sbr	r8,0x6
8000e9ea:	ae 68       	st.h	r7[0xc],r8
8000e9ec:	30 98       	mov	r8,9
8000e9ee:	8b 38       	st.w	r5[0xc],r8
8000e9f0:	c3 29       	rjmp	8000ec54 <__sfvwrite_r+0x298>
8000e9f2:	8e 63       	ld.sh	r3,r7[0xc]
8000e9f4:	68 00       	ld.w	r0,r4[0x0]
8000e9f6:	06 96       	mov	r6,r3
8000e9f8:	e2 16 00 02 	andl	r6,0x2,COH
8000e9fc:	c2 10       	breq	8000ea3e <__sfvwrite_r+0x82>
8000e9fe:	30 03       	mov	r3,0
8000ea00:	e0 62 04 00 	mov	r2,1024
8000ea04:	06 96       	mov	r6,r3
8000ea06:	c0 48       	rjmp	8000ea0e <__sfvwrite_r+0x52>
8000ea08:	60 03       	ld.w	r3,r0[0x0]
8000ea0a:	60 16       	ld.w	r6,r0[0x4]
8000ea0c:	2f 80       	sub	r0,-8
8000ea0e:	58 06       	cp.w	r6,0
8000ea10:	cf c0       	breq	8000ea08 <__sfvwrite_r+0x4c>
8000ea12:	e0 46 04 00 	cp.w	r6,1024
8000ea16:	ec 09 17 80 	movls	r9,r6
8000ea1a:	e4 09 17 b0 	movhi	r9,r2
8000ea1e:	06 9a       	mov	r10,r3
8000ea20:	6e a8       	ld.w	r8,r7[0x28]
8000ea22:	6e 8b       	ld.w	r11,r7[0x20]
8000ea24:	0a 9c       	mov	r12,r5
8000ea26:	5d 18       	icall	r8
8000ea28:	18 16       	sub	r6,r12
8000ea2a:	58 0c       	cp.w	r12,0
8000ea2c:	e0 8a 01 11 	brle	8000ec4e <__sfvwrite_r+0x292>
8000ea30:	68 28       	ld.w	r8,r4[0x8]
8000ea32:	18 18       	sub	r8,r12
8000ea34:	89 28       	st.w	r4[0x8],r8
8000ea36:	e0 80 01 11 	breq	8000ec58 <__sfvwrite_r+0x29c>
8000ea3a:	18 03       	add	r3,r12
8000ea3c:	ce 9b       	rjmp	8000ea0e <__sfvwrite_r+0x52>
8000ea3e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000ea42:	c0 70       	breq	8000ea50 <__sfvwrite_r+0x94>
8000ea44:	50 06       	stdsp	sp[0x0],r6
8000ea46:	0c 93       	mov	r3,r6
8000ea48:	0c 91       	mov	r1,r6
8000ea4a:	50 15       	stdsp	sp[0x4],r5
8000ea4c:	08 92       	mov	r2,r4
8000ea4e:	ca 08       	rjmp	8000eb8e <__sfvwrite_r+0x1d2>
8000ea50:	06 96       	mov	r6,r3
8000ea52:	08 91       	mov	r1,r4
8000ea54:	c0 48       	rjmp	8000ea5c <__sfvwrite_r+0xa0>
8000ea56:	60 03       	ld.w	r3,r0[0x0]
8000ea58:	60 16       	ld.w	r6,r0[0x4]
8000ea5a:	2f 80       	sub	r0,-8
8000ea5c:	58 06       	cp.w	r6,0
8000ea5e:	cf c0       	breq	8000ea56 <__sfvwrite_r+0x9a>
8000ea60:	8e 68       	ld.sh	r8,r7[0xc]
8000ea62:	6e 24       	ld.w	r4,r7[0x8]
8000ea64:	10 99       	mov	r9,r8
8000ea66:	e2 19 02 00 	andl	r9,0x200,COH
8000ea6a:	c5 70       	breq	8000eb18 <__sfvwrite_r+0x15c>
8000ea6c:	08 36       	cp.w	r6,r4
8000ea6e:	c4 53       	brcs	8000eaf8 <__sfvwrite_r+0x13c>
8000ea70:	10 99       	mov	r9,r8
8000ea72:	e2 19 04 80 	andl	r9,0x480,COH
8000ea76:	c4 10       	breq	8000eaf8 <__sfvwrite_r+0x13c>
8000ea78:	6e 4b       	ld.w	r11,r7[0x10]
8000ea7a:	6e 09       	ld.w	r9,r7[0x0]
8000ea7c:	16 19       	sub	r9,r11
8000ea7e:	50 09       	stdsp	sp[0x0],r9
8000ea80:	6e 59       	ld.w	r9,r7[0x14]
8000ea82:	10 9c       	mov	r12,r8
8000ea84:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000ea88:	30 28       	mov	r8,2
8000ea8a:	f4 08 0c 08 	divs	r8,r10,r8
8000ea8e:	fa e9 00 04 	st.d	sp[4],r8
8000ea92:	10 94       	mov	r4,r8
8000ea94:	40 09       	lddsp	r9,sp[0x0]
8000ea96:	e2 1c 04 00 	andl	r12,0x400,COH
8000ea9a:	2f f9       	sub	r9,-1
8000ea9c:	0c 09       	add	r9,r6
8000ea9e:	12 38       	cp.w	r8,r9
8000eaa0:	f2 04 17 30 	movlo	r4,r9
8000eaa4:	58 0c       	cp.w	r12,0
8000eaa6:	c1 10       	breq	8000eac8 <__sfvwrite_r+0x10c>
8000eaa8:	08 9b       	mov	r11,r4
8000eaaa:	0a 9c       	mov	r12,r5
8000eaac:	f0 1f 00 6e 	mcall	8000ec64 <__sfvwrite_r+0x2a8>
8000eab0:	18 92       	mov	r2,r12
8000eab2:	c1 50       	breq	8000eadc <__sfvwrite_r+0x120>
8000eab4:	40 0a       	lddsp	r10,sp[0x0]
8000eab6:	6e 4b       	ld.w	r11,r7[0x10]
8000eab8:	f0 1f 00 6c 	mcall	8000ec68 <__sfvwrite_r+0x2ac>
8000eabc:	8e 68       	ld.sh	r8,r7[0xc]
8000eabe:	e0 18 fb 7f 	andl	r8,0xfb7f
8000eac2:	a7 b8       	sbr	r8,0x7
8000eac4:	ae 68       	st.h	r7[0xc],r8
8000eac6:	c0 e8       	rjmp	8000eae2 <__sfvwrite_r+0x126>
8000eac8:	08 9a       	mov	r10,r4
8000eaca:	0a 9c       	mov	r12,r5
8000eacc:	f0 1f 00 68 	mcall	8000ec6c <__sfvwrite_r+0x2b0>
8000ead0:	18 92       	mov	r2,r12
8000ead2:	c0 81       	brne	8000eae2 <__sfvwrite_r+0x126>
8000ead4:	6e 4b       	ld.w	r11,r7[0x10]
8000ead6:	0a 9c       	mov	r12,r5
8000ead8:	f0 1f 00 66 	mcall	8000ec70 <__sfvwrite_r+0x2b4>
8000eadc:	30 c8       	mov	r8,12
8000eade:	8b 38       	st.w	r5[0xc],r8
8000eae0:	cb 78       	rjmp	8000ec4e <__sfvwrite_r+0x292>
8000eae2:	40 0a       	lddsp	r10,sp[0x0]
8000eae4:	40 09       	lddsp	r9,sp[0x0]
8000eae6:	e8 0a 01 0a 	sub	r10,r4,r10
8000eaea:	e4 09 00 08 	add	r8,r2,r9
8000eaee:	8f 54       	st.w	r7[0x14],r4
8000eaf0:	8f 2a       	st.w	r7[0x8],r10
8000eaf2:	8f 08       	st.w	r7[0x0],r8
8000eaf4:	8f 42       	st.w	r7[0x10],r2
8000eaf6:	0c 94       	mov	r4,r6
8000eaf8:	08 36       	cp.w	r6,r4
8000eafa:	ec 04 17 30 	movlo	r4,r6
8000eafe:	06 9b       	mov	r11,r3
8000eb00:	08 9a       	mov	r10,r4
8000eb02:	6e 0c       	ld.w	r12,r7[0x0]
8000eb04:	f0 1f 00 5c 	mcall	8000ec74 <__sfvwrite_r+0x2b8>
8000eb08:	6e 08       	ld.w	r8,r7[0x0]
8000eb0a:	08 08       	add	r8,r4
8000eb0c:	8f 08       	st.w	r7[0x0],r8
8000eb0e:	6e 28       	ld.w	r8,r7[0x8]
8000eb10:	08 18       	sub	r8,r4
8000eb12:	0c 94       	mov	r4,r6
8000eb14:	8f 28       	st.w	r7[0x8],r8
8000eb16:	c3 08       	rjmp	8000eb76 <__sfvwrite_r+0x1ba>
8000eb18:	08 36       	cp.w	r6,r4
8000eb1a:	5f ba       	srhi	r10
8000eb1c:	6e 0c       	ld.w	r12,r7[0x0]
8000eb1e:	6e 48       	ld.w	r8,r7[0x10]
8000eb20:	10 3c       	cp.w	r12,r8
8000eb22:	5f b8       	srhi	r8
8000eb24:	f5 e8 00 08 	and	r8,r10,r8
8000eb28:	f2 08 18 00 	cp.b	r8,r9
8000eb2c:	c0 e0       	breq	8000eb48 <__sfvwrite_r+0x18c>
8000eb2e:	06 9b       	mov	r11,r3
8000eb30:	08 9a       	mov	r10,r4
8000eb32:	f0 1f 00 51 	mcall	8000ec74 <__sfvwrite_r+0x2b8>
8000eb36:	6e 08       	ld.w	r8,r7[0x0]
8000eb38:	08 08       	add	r8,r4
8000eb3a:	0e 9b       	mov	r11,r7
8000eb3c:	8f 08       	st.w	r7[0x0],r8
8000eb3e:	0a 9c       	mov	r12,r5
8000eb40:	f0 1f 00 4e 	mcall	8000ec78 <__sfvwrite_r+0x2bc>
8000eb44:	c1 90       	breq	8000eb76 <__sfvwrite_r+0x1ba>
8000eb46:	c8 48       	rjmp	8000ec4e <__sfvwrite_r+0x292>
8000eb48:	6e 59       	ld.w	r9,r7[0x14]
8000eb4a:	12 36       	cp.w	r6,r9
8000eb4c:	c0 a3       	brcs	8000eb60 <__sfvwrite_r+0x1a4>
8000eb4e:	6e a8       	ld.w	r8,r7[0x28]
8000eb50:	06 9a       	mov	r10,r3
8000eb52:	6e 8b       	ld.w	r11,r7[0x20]
8000eb54:	0a 9c       	mov	r12,r5
8000eb56:	5d 18       	icall	r8
8000eb58:	18 94       	mov	r4,r12
8000eb5a:	e0 89 00 0e 	brgt	8000eb76 <__sfvwrite_r+0x1ba>
8000eb5e:	c7 88       	rjmp	8000ec4e <__sfvwrite_r+0x292>
8000eb60:	0c 9a       	mov	r10,r6
8000eb62:	06 9b       	mov	r11,r3
8000eb64:	f0 1f 00 44 	mcall	8000ec74 <__sfvwrite_r+0x2b8>
8000eb68:	6e 08       	ld.w	r8,r7[0x0]
8000eb6a:	0c 08       	add	r8,r6
8000eb6c:	0c 94       	mov	r4,r6
8000eb6e:	8f 08       	st.w	r7[0x0],r8
8000eb70:	6e 28       	ld.w	r8,r7[0x8]
8000eb72:	0c 18       	sub	r8,r6
8000eb74:	8f 28       	st.w	r7[0x8],r8
8000eb76:	62 28       	ld.w	r8,r1[0x8]
8000eb78:	08 18       	sub	r8,r4
8000eb7a:	83 28       	st.w	r1[0x8],r8
8000eb7c:	c6 e0       	breq	8000ec58 <__sfvwrite_r+0x29c>
8000eb7e:	08 16       	sub	r6,r4
8000eb80:	08 03       	add	r3,r4
8000eb82:	c6 db       	rjmp	8000ea5c <__sfvwrite_r+0xa0>
8000eb84:	60 03       	ld.w	r3,r0[0x0]
8000eb86:	60 11       	ld.w	r1,r0[0x4]
8000eb88:	30 08       	mov	r8,0
8000eb8a:	2f 80       	sub	r0,-8
8000eb8c:	50 08       	stdsp	sp[0x0],r8
8000eb8e:	58 01       	cp.w	r1,0
8000eb90:	cf a0       	breq	8000eb84 <__sfvwrite_r+0x1c8>
8000eb92:	40 0a       	lddsp	r10,sp[0x0]
8000eb94:	58 0a       	cp.w	r10,0
8000eb96:	c1 51       	brne	8000ebc0 <__sfvwrite_r+0x204>
8000eb98:	e2 c6 ff ff 	sub	r6,r1,-1
8000eb9c:	02 9a       	mov	r10,r1
8000eb9e:	30 ab       	mov	r11,10
8000eba0:	06 9c       	mov	r12,r3
8000eba2:	f0 1f 00 37 	mcall	8000ec7c <__sfvwrite_r+0x2c0>
8000eba6:	f8 c8 ff ff 	sub	r8,r12,-1
8000ebaa:	58 0c       	cp.w	r12,0
8000ebac:	f1 d3 e1 16 	subne	r6,r8,r3
8000ebb0:	f9 b9 01 01 	movne	r9,1
8000ebb4:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000ebb8:	f9 b8 00 01 	moveq	r8,1
8000ebbc:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000ebc0:	02 36       	cp.w	r6,r1
8000ebc2:	ec 04 17 80 	movls	r4,r6
8000ebc6:	e2 04 17 b0 	movhi	r4,r1
8000ebca:	6e 59       	ld.w	r9,r7[0x14]
8000ebcc:	6e 25       	ld.w	r5,r7[0x8]
8000ebce:	f2 05 00 05 	add	r5,r9,r5
8000ebd2:	0a 34       	cp.w	r4,r5
8000ebd4:	5f 9a       	srgt	r10
8000ebd6:	6e 0c       	ld.w	r12,r7[0x0]
8000ebd8:	6e 48       	ld.w	r8,r7[0x10]
8000ebda:	10 3c       	cp.w	r12,r8
8000ebdc:	5f b8       	srhi	r8
8000ebde:	f5 e8 00 08 	and	r8,r10,r8
8000ebe2:	30 0a       	mov	r10,0
8000ebe4:	f4 08 18 00 	cp.b	r8,r10
8000ebe8:	c0 e0       	breq	8000ec04 <__sfvwrite_r+0x248>
8000ebea:	06 9b       	mov	r11,r3
8000ebec:	0a 9a       	mov	r10,r5
8000ebee:	f0 1f 00 22 	mcall	8000ec74 <__sfvwrite_r+0x2b8>
8000ebf2:	6e 08       	ld.w	r8,r7[0x0]
8000ebf4:	0a 08       	add	r8,r5
8000ebf6:	0e 9b       	mov	r11,r7
8000ebf8:	8f 08       	st.w	r7[0x0],r8
8000ebfa:	40 1c       	lddsp	r12,sp[0x4]
8000ebfc:	f0 1f 00 1f 	mcall	8000ec78 <__sfvwrite_r+0x2bc>
8000ec00:	c1 80       	breq	8000ec30 <__sfvwrite_r+0x274>
8000ec02:	c2 68       	rjmp	8000ec4e <__sfvwrite_r+0x292>
8000ec04:	12 34       	cp.w	r4,r9
8000ec06:	c0 a5       	brlt	8000ec1a <__sfvwrite_r+0x25e>
8000ec08:	6e a8       	ld.w	r8,r7[0x28]
8000ec0a:	06 9a       	mov	r10,r3
8000ec0c:	6e 8b       	ld.w	r11,r7[0x20]
8000ec0e:	40 1c       	lddsp	r12,sp[0x4]
8000ec10:	5d 18       	icall	r8
8000ec12:	18 95       	mov	r5,r12
8000ec14:	e0 89 00 0e 	brgt	8000ec30 <__sfvwrite_r+0x274>
8000ec18:	c1 b8       	rjmp	8000ec4e <__sfvwrite_r+0x292>
8000ec1a:	08 9a       	mov	r10,r4
8000ec1c:	06 9b       	mov	r11,r3
8000ec1e:	f0 1f 00 16 	mcall	8000ec74 <__sfvwrite_r+0x2b8>
8000ec22:	6e 08       	ld.w	r8,r7[0x0]
8000ec24:	08 08       	add	r8,r4
8000ec26:	08 95       	mov	r5,r4
8000ec28:	8f 08       	st.w	r7[0x0],r8
8000ec2a:	6e 28       	ld.w	r8,r7[0x8]
8000ec2c:	08 18       	sub	r8,r4
8000ec2e:	8f 28       	st.w	r7[0x8],r8
8000ec30:	0a 16       	sub	r6,r5
8000ec32:	c0 71       	brne	8000ec40 <__sfvwrite_r+0x284>
8000ec34:	0e 9b       	mov	r11,r7
8000ec36:	40 1c       	lddsp	r12,sp[0x4]
8000ec38:	f0 1f 00 10 	mcall	8000ec78 <__sfvwrite_r+0x2bc>
8000ec3c:	c0 91       	brne	8000ec4e <__sfvwrite_r+0x292>
8000ec3e:	50 06       	stdsp	sp[0x0],r6
8000ec40:	64 28       	ld.w	r8,r2[0x8]
8000ec42:	0a 18       	sub	r8,r5
8000ec44:	85 28       	st.w	r2[0x8],r8
8000ec46:	c0 90       	breq	8000ec58 <__sfvwrite_r+0x29c>
8000ec48:	0a 11       	sub	r1,r5
8000ec4a:	0a 03       	add	r3,r5
8000ec4c:	ca 1b       	rjmp	8000eb8e <__sfvwrite_r+0x1d2>
8000ec4e:	8e 68       	ld.sh	r8,r7[0xc]
8000ec50:	a7 a8       	sbr	r8,0x6
8000ec52:	ae 68       	st.h	r7[0xc],r8
8000ec54:	3f fc       	mov	r12,-1
8000ec56:	c0 28       	rjmp	8000ec5a <__sfvwrite_r+0x29e>
8000ec58:	30 0c       	mov	r12,0
8000ec5a:	2f dd       	sub	sp,-12
8000ec5c:	d8 32       	popm	r0-r7,pc
8000ec5e:	00 00       	add	r0,r0
8000ec60:	80 00       	ld.sh	r0,r0[0x0]
8000ec62:	d6 4c       	*unknown*
8000ec64:	80 00       	ld.sh	r0,r0[0x0]
8000ec66:	ed c0 80 00 	stmts	r0,pc
8000ec6a:	b1 26       	st.d	r8++,r6
8000ec6c:	80 00       	ld.sh	r0,r0[0x0]
8000ec6e:	f8 ac       	*unknown*
8000ec70:	80 00       	ld.sh	r0,r0[0x0]
8000ec72:	e8 1c 80 00 	orl	r12,0x8000
8000ec76:	f2 26 80 00 	sub	r6,-884736
8000ec7a:	e4 e8 80 00 	ld.d	r8,r2[-32768]
8000ec7e:	f2 10 d4 31 	pref	r0[-11215]

8000ec80 <_fwalk>:
8000ec80:	d4 31       	pushm	r0-r7,lr
8000ec82:	30 05       	mov	r5,0
8000ec84:	16 91       	mov	r1,r11
8000ec86:	f8 c7 ff 28 	sub	r7,r12,-216
8000ec8a:	0a 92       	mov	r2,r5
8000ec8c:	f0 1f 00 10 	mcall	8000eccc <_fwalk+0x4c>
8000ec90:	3f f3       	mov	r3,-1
8000ec92:	c1 68       	rjmp	8000ecbe <_fwalk+0x3e>
8000ec94:	6e 26       	ld.w	r6,r7[0x8]
8000ec96:	6e 14       	ld.w	r4,r7[0x4]
8000ec98:	2f 46       	sub	r6,-12
8000ec9a:	c0 c8       	rjmp	8000ecb2 <_fwalk+0x32>
8000ec9c:	8c 08       	ld.sh	r8,r6[0x0]
8000ec9e:	e4 08 19 00 	cp.h	r8,r2
8000eca2:	c0 70       	breq	8000ecb0 <_fwalk+0x30>
8000eca4:	8c 18       	ld.sh	r8,r6[0x2]
8000eca6:	e6 08 19 00 	cp.h	r8,r3
8000ecaa:	c0 30       	breq	8000ecb0 <_fwalk+0x30>
8000ecac:	5d 11       	icall	r1
8000ecae:	18 45       	or	r5,r12
8000ecb0:	2a 46       	sub	r6,-92
8000ecb2:	20 14       	sub	r4,1
8000ecb4:	ec cc 00 0c 	sub	r12,r6,12
8000ecb8:	58 04       	cp.w	r4,0
8000ecba:	cf 14       	brge	8000ec9c <_fwalk+0x1c>
8000ecbc:	6e 07       	ld.w	r7,r7[0x0]
8000ecbe:	58 07       	cp.w	r7,0
8000ecc0:	ce a1       	brne	8000ec94 <_fwalk+0x14>
8000ecc2:	f0 1f 00 04 	mcall	8000ecd0 <_fwalk+0x50>
8000ecc6:	0a 9c       	mov	r12,r5
8000ecc8:	d8 32       	popm	r0-r7,pc
8000ecca:	00 00       	add	r0,r0
8000eccc:	80 00       	ld.sh	r0,r0[0x0]
8000ecce:	e6 00       	*unknown*
8000ecd0:	80 00       	ld.sh	r0,r0[0x0]
8000ecd2:	e6 02       	*unknown*

8000ecd4 <_localeconv_r>:
8000ecd4:	48 1c       	lddpc	r12,8000ecd8 <_localeconv_r+0x4>
8000ecd6:	5e fc       	retal	r12
8000ecd8:	80 01       	ld.sh	r1,r0[0x0]
8000ecda:	10 a0       	st.w	r8++,r0

8000ecdc <__smakebuf_r>:
8000ecdc:	d4 21       	pushm	r4-r7,lr
8000ecde:	20 fd       	sub	sp,60
8000ece0:	96 68       	ld.sh	r8,r11[0xc]
8000ece2:	16 97       	mov	r7,r11
8000ece4:	18 96       	mov	r6,r12
8000ece6:	e2 18 00 02 	andl	r8,0x2,COH
8000ecea:	c3 c1       	brne	8000ed62 <__smakebuf_r+0x86>
8000ecec:	96 7b       	ld.sh	r11,r11[0xe]
8000ecee:	f0 0b 19 00 	cp.h	r11,r8
8000ecf2:	c0 55       	brlt	8000ecfc <__smakebuf_r+0x20>
8000ecf4:	1a 9a       	mov	r10,sp
8000ecf6:	f0 1f 00 28 	mcall	8000ed94 <__smakebuf_r+0xb8>
8000ecfa:	c0 f4       	brge	8000ed18 <__smakebuf_r+0x3c>
8000ecfc:	8e 65       	ld.sh	r5,r7[0xc]
8000ecfe:	0a 98       	mov	r8,r5
8000ed00:	ab b8       	sbr	r8,0xb
8000ed02:	e2 15 00 80 	andl	r5,0x80,COH
8000ed06:	ae 68       	st.h	r7[0xc],r8
8000ed08:	30 04       	mov	r4,0
8000ed0a:	e0 68 04 00 	mov	r8,1024
8000ed0e:	f9 b5 01 40 	movne	r5,64
8000ed12:	f0 05 17 00 	moveq	r5,r8
8000ed16:	c1 b8       	rjmp	8000ed4c <__smakebuf_r+0x70>
8000ed18:	40 18       	lddsp	r8,sp[0x4]
8000ed1a:	e2 18 f0 00 	andl	r8,0xf000,COH
8000ed1e:	e0 48 20 00 	cp.w	r8,8192
8000ed22:	5f 04       	sreq	r4
8000ed24:	e0 48 80 00 	cp.w	r8,32768
8000ed28:	c0 d1       	brne	8000ed42 <__smakebuf_r+0x66>
8000ed2a:	6e b9       	ld.w	r9,r7[0x2c]
8000ed2c:	49 b8       	lddpc	r8,8000ed98 <__smakebuf_r+0xbc>
8000ed2e:	10 39       	cp.w	r9,r8
8000ed30:	c0 91       	brne	8000ed42 <__smakebuf_r+0x66>
8000ed32:	8e 68       	ld.sh	r8,r7[0xc]
8000ed34:	e0 65 04 00 	mov	r5,1024
8000ed38:	ab a8       	sbr	r8,0xa
8000ed3a:	ef 45 00 50 	st.w	r7[80],r5
8000ed3e:	ae 68       	st.h	r7[0xc],r8
8000ed40:	c0 68       	rjmp	8000ed4c <__smakebuf_r+0x70>
8000ed42:	8e 68       	ld.sh	r8,r7[0xc]
8000ed44:	e0 65 04 00 	mov	r5,1024
8000ed48:	ab b8       	sbr	r8,0xb
8000ed4a:	ae 68       	st.h	r7[0xc],r8
8000ed4c:	0a 9b       	mov	r11,r5
8000ed4e:	0c 9c       	mov	r12,r6
8000ed50:	f0 1f 00 13 	mcall	8000ed9c <__smakebuf_r+0xc0>
8000ed54:	8e 68       	ld.sh	r8,r7[0xc]
8000ed56:	c0 d1       	brne	8000ed70 <__smakebuf_r+0x94>
8000ed58:	ed b8 00 09 	bld	r8,0x9
8000ed5c:	c1 a0       	breq	8000ed90 <__smakebuf_r+0xb4>
8000ed5e:	a1 b8       	sbr	r8,0x1
8000ed60:	ae 68       	st.h	r7[0xc],r8
8000ed62:	ee c8 ff b9 	sub	r8,r7,-71
8000ed66:	8f 48       	st.w	r7[0x10],r8
8000ed68:	8f 08       	st.w	r7[0x0],r8
8000ed6a:	30 18       	mov	r8,1
8000ed6c:	8f 58       	st.w	r7[0x14],r8
8000ed6e:	c1 18       	rjmp	8000ed90 <__smakebuf_r+0xb4>
8000ed70:	a7 b8       	sbr	r8,0x7
8000ed72:	8f 4c       	st.w	r7[0x10],r12
8000ed74:	ae 68       	st.h	r7[0xc],r8
8000ed76:	8f 55       	st.w	r7[0x14],r5
8000ed78:	48 a8       	lddpc	r8,8000eda0 <__smakebuf_r+0xc4>
8000ed7a:	8f 0c       	st.w	r7[0x0],r12
8000ed7c:	8d a8       	st.w	r6[0x28],r8
8000ed7e:	58 04       	cp.w	r4,0
8000ed80:	c0 80       	breq	8000ed90 <__smakebuf_r+0xb4>
8000ed82:	8e 7c       	ld.sh	r12,r7[0xe]
8000ed84:	f0 1f 00 08 	mcall	8000eda4 <__smakebuf_r+0xc8>
8000ed88:	c0 40       	breq	8000ed90 <__smakebuf_r+0xb4>
8000ed8a:	8e 68       	ld.sh	r8,r7[0xc]
8000ed8c:	a1 a8       	sbr	r8,0x0
8000ed8e:	ae 68       	st.h	r7[0xc],r8
8000ed90:	2f 1d       	sub	sp,-60
8000ed92:	d8 22       	popm	r4-r7,pc
8000ed94:	80 00       	ld.sh	r0,r0[0x0]
8000ed96:	ff 58 80 00 	st.h	pc[-32768],r8
8000ed9a:	fc 0c       	*unknown*
8000ed9c:	80 00       	ld.sh	r0,r0[0x0]
8000ed9e:	ed c0 80 00 	stmts	r0,pc
8000eda2:	e6 04       	*unknown*
8000eda4:	80 00       	ld.sh	r0,r0[0x0]
8000eda6:	fc f0 d4 01 	ld.w	r0,lr[-11263]

8000eda8 <malloc>:
8000eda8:	d4 01       	pushm	lr
8000edaa:	48 48       	lddpc	r8,8000edb8 <malloc+0x10>
8000edac:	18 9b       	mov	r11,r12
8000edae:	70 0c       	ld.w	r12,r8[0x0]
8000edb0:	f0 1f 00 03 	mcall	8000edbc <malloc+0x14>
8000edb4:	d8 02       	popm	pc
8000edb6:	00 00       	add	r0,r0
8000edb8:	00 00       	add	r0,r0
8000edba:	01 a4       	ld.ub	r4,r0[0x2]
8000edbc:	80 00       	ld.sh	r0,r0[0x0]
8000edbe:	ed c0 d4 31 	stmts	r0,r0,r4-r5,r10,r12,lr-pc

8000edc0 <_malloc_r>:
8000edc0:	d4 31       	pushm	r0-r7,lr
8000edc2:	f6 c8 ff f5 	sub	r8,r11,-11
8000edc6:	18 95       	mov	r5,r12
8000edc8:	10 97       	mov	r7,r8
8000edca:	e0 17 ff f8 	andl	r7,0xfff8
8000edce:	59 68       	cp.w	r8,22
8000edd0:	f9 b7 08 10 	movls	r7,16
8000edd4:	16 37       	cp.w	r7,r11
8000edd6:	5f 38       	srlo	r8
8000edd8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
8000eddc:	c0 50       	breq	8000ede6 <_malloc_r+0x26>
8000edde:	30 c8       	mov	r8,12
8000ede0:	99 38       	st.w	r12[0xc],r8
8000ede2:	e0 8f 01 f3 	bral	8000f1c8 <_malloc_r+0x408>
8000ede6:	f0 1f 00 50 	mcall	8000ef24 <_malloc_r+0x164>
8000edea:	e0 47 01 f7 	cp.w	r7,503
8000edee:	e0 8b 00 1c 	brhi	8000ee26 <_malloc_r+0x66>
8000edf2:	ee 03 16 03 	lsr	r3,r7,0x3
8000edf6:	4c d8       	lddpc	r8,8000ef28 <_malloc_r+0x168>
8000edf8:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000edfc:	70 36       	ld.w	r6,r8[0xc]
8000edfe:	10 36       	cp.w	r6,r8
8000ee00:	c0 61       	brne	8000ee0c <_malloc_r+0x4c>
8000ee02:	ec c8 ff f8 	sub	r8,r6,-8
8000ee06:	70 36       	ld.w	r6,r8[0xc]
8000ee08:	10 36       	cp.w	r6,r8
8000ee0a:	c0 c0       	breq	8000ee22 <_malloc_r+0x62>
8000ee0c:	6c 18       	ld.w	r8,r6[0x4]
8000ee0e:	e0 18 ff fc 	andl	r8,0xfffc
8000ee12:	6c 3a       	ld.w	r10,r6[0xc]
8000ee14:	ec 08 00 09 	add	r9,r6,r8
8000ee18:	0a 9c       	mov	r12,r5
8000ee1a:	6c 28       	ld.w	r8,r6[0x8]
8000ee1c:	95 28       	st.w	r10[0x8],r8
8000ee1e:	91 3a       	st.w	r8[0xc],r10
8000ee20:	c4 68       	rjmp	8000eeac <_malloc_r+0xec>
8000ee22:	2f e3       	sub	r3,-2
8000ee24:	c4 c8       	rjmp	8000eebc <_malloc_r+0xfc>
8000ee26:	ee 03 16 09 	lsr	r3,r7,0x9
8000ee2a:	c0 41       	brne	8000ee32 <_malloc_r+0x72>
8000ee2c:	ee 03 16 03 	lsr	r3,r7,0x3
8000ee30:	c2 68       	rjmp	8000ee7c <_malloc_r+0xbc>
8000ee32:	58 43       	cp.w	r3,4
8000ee34:	e0 8b 00 06 	brhi	8000ee40 <_malloc_r+0x80>
8000ee38:	ee 03 16 06 	lsr	r3,r7,0x6
8000ee3c:	2c 83       	sub	r3,-56
8000ee3e:	c1 f8       	rjmp	8000ee7c <_malloc_r+0xbc>
8000ee40:	59 43       	cp.w	r3,20
8000ee42:	e0 8b 00 04 	brhi	8000ee4a <_malloc_r+0x8a>
8000ee46:	2a 53       	sub	r3,-91
8000ee48:	c1 a8       	rjmp	8000ee7c <_malloc_r+0xbc>
8000ee4a:	e0 43 00 54 	cp.w	r3,84
8000ee4e:	e0 8b 00 06 	brhi	8000ee5a <_malloc_r+0x9a>
8000ee52:	ee 03 16 0c 	lsr	r3,r7,0xc
8000ee56:	29 23       	sub	r3,-110
8000ee58:	c1 28       	rjmp	8000ee7c <_malloc_r+0xbc>
8000ee5a:	e0 43 01 54 	cp.w	r3,340
8000ee5e:	e0 8b 00 06 	brhi	8000ee6a <_malloc_r+0xaa>
8000ee62:	ee 03 16 0f 	lsr	r3,r7,0xf
8000ee66:	28 93       	sub	r3,-119
8000ee68:	c0 a8       	rjmp	8000ee7c <_malloc_r+0xbc>
8000ee6a:	e0 43 05 54 	cp.w	r3,1364
8000ee6e:	e0 88 00 04 	brls	8000ee76 <_malloc_r+0xb6>
8000ee72:	37 e3       	mov	r3,126
8000ee74:	c0 48       	rjmp	8000ee7c <_malloc_r+0xbc>
8000ee76:	ee 03 16 12 	lsr	r3,r7,0x12
8000ee7a:	28 43       	sub	r3,-124
8000ee7c:	4a ba       	lddpc	r10,8000ef28 <_malloc_r+0x168>
8000ee7e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000ee82:	74 36       	ld.w	r6,r10[0xc]
8000ee84:	c1 98       	rjmp	8000eeb6 <_malloc_r+0xf6>
8000ee86:	6c 19       	ld.w	r9,r6[0x4]
8000ee88:	e0 19 ff fc 	andl	r9,0xfffc
8000ee8c:	f2 07 01 0b 	sub	r11,r9,r7
8000ee90:	58 fb       	cp.w	r11,15
8000ee92:	e0 8a 00 04 	brle	8000ee9a <_malloc_r+0xda>
8000ee96:	20 13       	sub	r3,1
8000ee98:	c1 18       	rjmp	8000eeba <_malloc_r+0xfa>
8000ee9a:	6c 38       	ld.w	r8,r6[0xc]
8000ee9c:	58 0b       	cp.w	r11,0
8000ee9e:	c0 b5       	brlt	8000eeb4 <_malloc_r+0xf4>
8000eea0:	6c 2a       	ld.w	r10,r6[0x8]
8000eea2:	ec 09 00 09 	add	r9,r6,r9
8000eea6:	0a 9c       	mov	r12,r5
8000eea8:	91 2a       	st.w	r8[0x8],r10
8000eeaa:	95 38       	st.w	r10[0xc],r8
8000eeac:	72 18       	ld.w	r8,r9[0x4]
8000eeae:	a1 a8       	sbr	r8,0x0
8000eeb0:	93 18       	st.w	r9[0x4],r8
8000eeb2:	cb c8       	rjmp	8000f02a <_malloc_r+0x26a>
8000eeb4:	10 96       	mov	r6,r8
8000eeb6:	14 36       	cp.w	r6,r10
8000eeb8:	ce 71       	brne	8000ee86 <_malloc_r+0xc6>
8000eeba:	2f f3       	sub	r3,-1
8000eebc:	49 ba       	lddpc	r10,8000ef28 <_malloc_r+0x168>
8000eebe:	f4 cc ff f8 	sub	r12,r10,-8
8000eec2:	78 26       	ld.w	r6,r12[0x8]
8000eec4:	18 36       	cp.w	r6,r12
8000eec6:	c6 e0       	breq	8000efa2 <_malloc_r+0x1e2>
8000eec8:	6c 19       	ld.w	r9,r6[0x4]
8000eeca:	e0 19 ff fc 	andl	r9,0xfffc
8000eece:	f2 07 01 08 	sub	r8,r9,r7
8000eed2:	58 f8       	cp.w	r8,15
8000eed4:	e0 89 00 90 	brgt	8000eff4 <_malloc_r+0x234>
8000eed8:	99 3c       	st.w	r12[0xc],r12
8000eeda:	99 2c       	st.w	r12[0x8],r12
8000eedc:	58 08       	cp.w	r8,0
8000eede:	c0 55       	brlt	8000eee8 <_malloc_r+0x128>
8000eee0:	ec 09 00 09 	add	r9,r6,r9
8000eee4:	0a 9c       	mov	r12,r5
8000eee6:	ce 3b       	rjmp	8000eeac <_malloc_r+0xec>
8000eee8:	e0 49 01 ff 	cp.w	r9,511
8000eeec:	e0 8b 00 13 	brhi	8000ef12 <_malloc_r+0x152>
8000eef0:	a3 99       	lsr	r9,0x3
8000eef2:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000eef6:	70 2b       	ld.w	r11,r8[0x8]
8000eef8:	8d 38       	st.w	r6[0xc],r8
8000eefa:	8d 2b       	st.w	r6[0x8],r11
8000eefc:	97 36       	st.w	r11[0xc],r6
8000eefe:	91 26       	st.w	r8[0x8],r6
8000ef00:	a3 49       	asr	r9,0x2
8000ef02:	74 18       	ld.w	r8,r10[0x4]
8000ef04:	30 1b       	mov	r11,1
8000ef06:	f6 09 09 49 	lsl	r9,r11,r9
8000ef0a:	f1 e9 10 09 	or	r9,r8,r9
8000ef0e:	95 19       	st.w	r10[0x4],r9
8000ef10:	c4 98       	rjmp	8000efa2 <_malloc_r+0x1e2>
8000ef12:	f2 0a 16 09 	lsr	r10,r9,0x9
8000ef16:	58 4a       	cp.w	r10,4
8000ef18:	e0 8b 00 0a 	brhi	8000ef2c <_malloc_r+0x16c>
8000ef1c:	f2 0a 16 06 	lsr	r10,r9,0x6
8000ef20:	2c 8a       	sub	r10,-56
8000ef22:	c2 38       	rjmp	8000ef68 <_malloc_r+0x1a8>
8000ef24:	80 00       	ld.sh	r0,r0[0x0]
8000ef26:	f2 64 00 00 	mov	r4,-917504
8000ef2a:	01 a8       	ld.ub	r8,r0[0x2]
8000ef2c:	59 4a       	cp.w	r10,20
8000ef2e:	e0 8b 00 04 	brhi	8000ef36 <_malloc_r+0x176>
8000ef32:	2a 5a       	sub	r10,-91
8000ef34:	c1 a8       	rjmp	8000ef68 <_malloc_r+0x1a8>
8000ef36:	e0 4a 00 54 	cp.w	r10,84
8000ef3a:	e0 8b 00 06 	brhi	8000ef46 <_malloc_r+0x186>
8000ef3e:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000ef42:	29 2a       	sub	r10,-110
8000ef44:	c1 28       	rjmp	8000ef68 <_malloc_r+0x1a8>
8000ef46:	e0 4a 01 54 	cp.w	r10,340
8000ef4a:	e0 8b 00 06 	brhi	8000ef56 <_malloc_r+0x196>
8000ef4e:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000ef52:	28 9a       	sub	r10,-119
8000ef54:	c0 a8       	rjmp	8000ef68 <_malloc_r+0x1a8>
8000ef56:	e0 4a 05 54 	cp.w	r10,1364
8000ef5a:	e0 88 00 04 	brls	8000ef62 <_malloc_r+0x1a2>
8000ef5e:	37 ea       	mov	r10,126
8000ef60:	c0 48       	rjmp	8000ef68 <_malloc_r+0x1a8>
8000ef62:	f2 0a 16 12 	lsr	r10,r9,0x12
8000ef66:	28 4a       	sub	r10,-124
8000ef68:	4c 8b       	lddpc	r11,8000f088 <_malloc_r+0x2c8>
8000ef6a:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000ef6e:	68 28       	ld.w	r8,r4[0x8]
8000ef70:	08 38       	cp.w	r8,r4
8000ef72:	c0 e1       	brne	8000ef8e <_malloc_r+0x1ce>
8000ef74:	76 19       	ld.w	r9,r11[0x4]
8000ef76:	a3 4a       	asr	r10,0x2
8000ef78:	30 1e       	mov	lr,1
8000ef7a:	fc 0a 09 4a 	lsl	r10,lr,r10
8000ef7e:	f3 ea 10 0a 	or	r10,r9,r10
8000ef82:	10 99       	mov	r9,r8
8000ef84:	97 1a       	st.w	r11[0x4],r10
8000ef86:	c0 a8       	rjmp	8000ef9a <_malloc_r+0x1da>
8000ef88:	70 28       	ld.w	r8,r8[0x8]
8000ef8a:	08 38       	cp.w	r8,r4
8000ef8c:	c0 60       	breq	8000ef98 <_malloc_r+0x1d8>
8000ef8e:	70 1a       	ld.w	r10,r8[0x4]
8000ef90:	e0 1a ff fc 	andl	r10,0xfffc
8000ef94:	14 39       	cp.w	r9,r10
8000ef96:	cf 93       	brcs	8000ef88 <_malloc_r+0x1c8>
8000ef98:	70 39       	ld.w	r9,r8[0xc]
8000ef9a:	8d 39       	st.w	r6[0xc],r9
8000ef9c:	8d 28       	st.w	r6[0x8],r8
8000ef9e:	91 36       	st.w	r8[0xc],r6
8000efa0:	93 26       	st.w	r9[0x8],r6
8000efa2:	e6 08 14 02 	asr	r8,r3,0x2
8000efa6:	30 1b       	mov	r11,1
8000efa8:	4b 84       	lddpc	r4,8000f088 <_malloc_r+0x2c8>
8000efaa:	f6 08 09 4b 	lsl	r11,r11,r8
8000efae:	68 18       	ld.w	r8,r4[0x4]
8000efb0:	10 3b       	cp.w	r11,r8
8000efb2:	e0 8b 00 6f 	brhi	8000f090 <_malloc_r+0x2d0>
8000efb6:	f7 e8 00 09 	and	r9,r11,r8
8000efba:	c0 b1       	brne	8000efd0 <_malloc_r+0x210>
8000efbc:	e0 13 ff fc 	andl	r3,0xfffc
8000efc0:	a1 7b       	lsl	r11,0x1
8000efc2:	2f c3       	sub	r3,-4
8000efc4:	c0 38       	rjmp	8000efca <_malloc_r+0x20a>
8000efc6:	2f c3       	sub	r3,-4
8000efc8:	a1 7b       	lsl	r11,0x1
8000efca:	f7 e8 00 09 	and	r9,r11,r8
8000efce:	cf c0       	breq	8000efc6 <_malloc_r+0x206>
8000efd0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000efd4:	06 92       	mov	r2,r3
8000efd6:	1c 91       	mov	r1,lr
8000efd8:	62 36       	ld.w	r6,r1[0xc]
8000efda:	c2 e8       	rjmp	8000f036 <_malloc_r+0x276>
8000efdc:	6c 1a       	ld.w	r10,r6[0x4]
8000efde:	e0 1a ff fc 	andl	r10,0xfffc
8000efe2:	f4 07 01 08 	sub	r8,r10,r7
8000efe6:	58 f8       	cp.w	r8,15
8000efe8:	e0 8a 00 15 	brle	8000f012 <_malloc_r+0x252>
8000efec:	6c 3a       	ld.w	r10,r6[0xc]
8000efee:	6c 29       	ld.w	r9,r6[0x8]
8000eff0:	95 29       	st.w	r10[0x8],r9
8000eff2:	93 3a       	st.w	r9[0xc],r10
8000eff4:	0e 99       	mov	r9,r7
8000eff6:	ec 07 00 07 	add	r7,r6,r7
8000effa:	a1 a9       	sbr	r9,0x0
8000effc:	99 37       	st.w	r12[0xc],r7
8000effe:	99 27       	st.w	r12[0x8],r7
8000f000:	8d 19       	st.w	r6[0x4],r9
8000f002:	ee 08 09 08 	st.w	r7[r8],r8
8000f006:	8f 2c       	st.w	r7[0x8],r12
8000f008:	8f 3c       	st.w	r7[0xc],r12
8000f00a:	a1 a8       	sbr	r8,0x0
8000f00c:	0a 9c       	mov	r12,r5
8000f00e:	8f 18       	st.w	r7[0x4],r8
8000f010:	c0 d8       	rjmp	8000f02a <_malloc_r+0x26a>
8000f012:	6c 39       	ld.w	r9,r6[0xc]
8000f014:	58 08       	cp.w	r8,0
8000f016:	c0 f5       	brlt	8000f034 <_malloc_r+0x274>
8000f018:	ec 0a 00 0a 	add	r10,r6,r10
8000f01c:	74 18       	ld.w	r8,r10[0x4]
8000f01e:	a1 a8       	sbr	r8,0x0
8000f020:	0a 9c       	mov	r12,r5
8000f022:	95 18       	st.w	r10[0x4],r8
8000f024:	6c 28       	ld.w	r8,r6[0x8]
8000f026:	93 28       	st.w	r9[0x8],r8
8000f028:	91 39       	st.w	r8[0xc],r9
8000f02a:	f0 1f 00 19 	mcall	8000f08c <_malloc_r+0x2cc>
8000f02e:	ec cc ff f8 	sub	r12,r6,-8
8000f032:	d8 32       	popm	r0-r7,pc
8000f034:	12 96       	mov	r6,r9
8000f036:	02 36       	cp.w	r6,r1
8000f038:	cd 21       	brne	8000efdc <_malloc_r+0x21c>
8000f03a:	2f f2       	sub	r2,-1
8000f03c:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000f040:	c0 30       	breq	8000f046 <_malloc_r+0x286>
8000f042:	2f 81       	sub	r1,-8
8000f044:	cc ab       	rjmp	8000efd8 <_malloc_r+0x218>
8000f046:	1c 98       	mov	r8,lr
8000f048:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000f04c:	c0 81       	brne	8000f05c <_malloc_r+0x29c>
8000f04e:	68 19       	ld.w	r9,r4[0x4]
8000f050:	f6 08 11 ff 	rsub	r8,r11,-1
8000f054:	f3 e8 00 08 	and	r8,r9,r8
8000f058:	89 18       	st.w	r4[0x4],r8
8000f05a:	c0 78       	rjmp	8000f068 <_malloc_r+0x2a8>
8000f05c:	f0 c9 00 08 	sub	r9,r8,8
8000f060:	20 13       	sub	r3,1
8000f062:	70 08       	ld.w	r8,r8[0x0]
8000f064:	12 38       	cp.w	r8,r9
8000f066:	cf 10       	breq	8000f048 <_malloc_r+0x288>
8000f068:	a1 7b       	lsl	r11,0x1
8000f06a:	68 18       	ld.w	r8,r4[0x4]
8000f06c:	10 3b       	cp.w	r11,r8
8000f06e:	e0 8b 00 11 	brhi	8000f090 <_malloc_r+0x2d0>
8000f072:	58 0b       	cp.w	r11,0
8000f074:	c0 e0       	breq	8000f090 <_malloc_r+0x2d0>
8000f076:	04 93       	mov	r3,r2
8000f078:	c0 38       	rjmp	8000f07e <_malloc_r+0x2be>
8000f07a:	2f c3       	sub	r3,-4
8000f07c:	a1 7b       	lsl	r11,0x1
8000f07e:	f7 e8 00 09 	and	r9,r11,r8
8000f082:	ca 71       	brne	8000efd0 <_malloc_r+0x210>
8000f084:	cf bb       	rjmp	8000f07a <_malloc_r+0x2ba>
8000f086:	00 00       	add	r0,r0
8000f088:	00 00       	add	r0,r0
8000f08a:	01 a8       	ld.ub	r8,r0[0x2]
8000f08c:	80 00       	ld.sh	r0,r0[0x0]
8000f08e:	f2 66 68 23 	mov	r6,-890845
8000f092:	66 12       	ld.w	r2,r3[0x4]
8000f094:	e0 12 ff fc 	andl	r2,0xfffc
8000f098:	0e 32       	cp.w	r2,r7
8000f09a:	5f 39       	srlo	r9
8000f09c:	e4 07 01 08 	sub	r8,r2,r7
8000f0a0:	58 f8       	cp.w	r8,15
8000f0a2:	5f aa       	srle	r10
8000f0a4:	f5 e9 10 09 	or	r9,r10,r9
8000f0a8:	e0 80 00 a2 	breq	8000f1ec <_malloc_r+0x42c>
8000f0ac:	4c 88       	lddpc	r8,8000f1cc <_malloc_r+0x40c>
8000f0ae:	70 01       	ld.w	r1,r8[0x0]
8000f0b0:	4c 88       	lddpc	r8,8000f1d0 <_malloc_r+0x410>
8000f0b2:	2f 01       	sub	r1,-16
8000f0b4:	70 08       	ld.w	r8,r8[0x0]
8000f0b6:	0e 01       	add	r1,r7
8000f0b8:	5b f8       	cp.w	r8,-1
8000f0ba:	c0 40       	breq	8000f0c2 <_malloc_r+0x302>
8000f0bc:	28 11       	sub	r1,-127
8000f0be:	e0 11 ff 80 	andl	r1,0xff80
8000f0c2:	02 9b       	mov	r11,r1
8000f0c4:	0a 9c       	mov	r12,r5
8000f0c6:	f0 1f 00 44 	mcall	8000f1d4 <_malloc_r+0x414>
8000f0ca:	18 96       	mov	r6,r12
8000f0cc:	5b fc       	cp.w	r12,-1
8000f0ce:	c6 e0       	breq	8000f1aa <_malloc_r+0x3ea>
8000f0d0:	e6 02 00 08 	add	r8,r3,r2
8000f0d4:	10 3c       	cp.w	r12,r8
8000f0d6:	c0 32       	brcc	8000f0dc <_malloc_r+0x31c>
8000f0d8:	08 33       	cp.w	r3,r4
8000f0da:	c6 81       	brne	8000f1aa <_malloc_r+0x3ea>
8000f0dc:	4b fa       	lddpc	r10,8000f1d8 <_malloc_r+0x418>
8000f0de:	74 09       	ld.w	r9,r10[0x0]
8000f0e0:	e2 09 00 09 	add	r9,r1,r9
8000f0e4:	95 09       	st.w	r10[0x0],r9
8000f0e6:	10 36       	cp.w	r6,r8
8000f0e8:	c0 a1       	brne	8000f0fc <_malloc_r+0x33c>
8000f0ea:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000f0ee:	c0 71       	brne	8000f0fc <_malloc_r+0x33c>
8000f0f0:	e2 02 00 02 	add	r2,r1,r2
8000f0f4:	68 28       	ld.w	r8,r4[0x8]
8000f0f6:	a1 a2       	sbr	r2,0x0
8000f0f8:	91 12       	st.w	r8[0x4],r2
8000f0fa:	c4 c8       	rjmp	8000f192 <_malloc_r+0x3d2>
8000f0fc:	4b 5a       	lddpc	r10,8000f1d0 <_malloc_r+0x410>
8000f0fe:	74 0b       	ld.w	r11,r10[0x0]
8000f100:	5b fb       	cp.w	r11,-1
8000f102:	c0 31       	brne	8000f108 <_malloc_r+0x348>
8000f104:	95 06       	st.w	r10[0x0],r6
8000f106:	c0 68       	rjmp	8000f112 <_malloc_r+0x352>
8000f108:	ec 09 00 09 	add	r9,r6,r9
8000f10c:	4b 3a       	lddpc	r10,8000f1d8 <_malloc_r+0x418>
8000f10e:	10 19       	sub	r9,r8
8000f110:	95 09       	st.w	r10[0x0],r9
8000f112:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000f116:	f0 09 11 08 	rsub	r9,r8,8
8000f11a:	58 08       	cp.w	r8,0
8000f11c:	f2 08 17 10 	movne	r8,r9
8000f120:	ed d8 e1 06 	addne	r6,r6,r8
8000f124:	28 08       	sub	r8,-128
8000f126:	ec 01 00 01 	add	r1,r6,r1
8000f12a:	0a 9c       	mov	r12,r5
8000f12c:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000f130:	f0 01 01 01 	sub	r1,r8,r1
8000f134:	02 9b       	mov	r11,r1
8000f136:	f0 1f 00 28 	mcall	8000f1d4 <_malloc_r+0x414>
8000f13a:	4a 88       	lddpc	r8,8000f1d8 <_malloc_r+0x418>
8000f13c:	5b fc       	cp.w	r12,-1
8000f13e:	ec 0c 17 00 	moveq	r12,r6
8000f142:	f9 b1 00 00 	moveq	r1,0
8000f146:	70 09       	ld.w	r9,r8[0x0]
8000f148:	0c 1c       	sub	r12,r6
8000f14a:	89 26       	st.w	r4[0x8],r6
8000f14c:	02 0c       	add	r12,r1
8000f14e:	12 01       	add	r1,r9
8000f150:	a1 ac       	sbr	r12,0x0
8000f152:	91 01       	st.w	r8[0x0],r1
8000f154:	8d 1c       	st.w	r6[0x4],r12
8000f156:	08 33       	cp.w	r3,r4
8000f158:	c1 d0       	breq	8000f192 <_malloc_r+0x3d2>
8000f15a:	58 f2       	cp.w	r2,15
8000f15c:	e0 8b 00 05 	brhi	8000f166 <_malloc_r+0x3a6>
8000f160:	30 18       	mov	r8,1
8000f162:	8d 18       	st.w	r6[0x4],r8
8000f164:	c2 38       	rjmp	8000f1aa <_malloc_r+0x3ea>
8000f166:	30 59       	mov	r9,5
8000f168:	20 c2       	sub	r2,12
8000f16a:	e0 12 ff f8 	andl	r2,0xfff8
8000f16e:	e6 02 00 08 	add	r8,r3,r2
8000f172:	91 29       	st.w	r8[0x8],r9
8000f174:	91 19       	st.w	r8[0x4],r9
8000f176:	66 18       	ld.w	r8,r3[0x4]
8000f178:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000f17c:	e5 e8 10 08 	or	r8,r2,r8
8000f180:	87 18       	st.w	r3[0x4],r8
8000f182:	58 f2       	cp.w	r2,15
8000f184:	e0 88 00 07 	brls	8000f192 <_malloc_r+0x3d2>
8000f188:	e6 cb ff f8 	sub	r11,r3,-8
8000f18c:	0a 9c       	mov	r12,r5
8000f18e:	f0 1f 00 14 	mcall	8000f1dc <_malloc_r+0x41c>
8000f192:	49 49       	lddpc	r9,8000f1e0 <_malloc_r+0x420>
8000f194:	72 0a       	ld.w	r10,r9[0x0]
8000f196:	49 18       	lddpc	r8,8000f1d8 <_malloc_r+0x418>
8000f198:	70 08       	ld.w	r8,r8[0x0]
8000f19a:	14 38       	cp.w	r8,r10
8000f19c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000f1a0:	49 19       	lddpc	r9,8000f1e4 <_malloc_r+0x424>
8000f1a2:	72 0a       	ld.w	r10,r9[0x0]
8000f1a4:	14 38       	cp.w	r8,r10
8000f1a6:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000f1aa:	68 28       	ld.w	r8,r4[0x8]
8000f1ac:	70 18       	ld.w	r8,r8[0x4]
8000f1ae:	e0 18 ff fc 	andl	r8,0xfffc
8000f1b2:	0e 38       	cp.w	r8,r7
8000f1b4:	5f 39       	srlo	r9
8000f1b6:	0e 18       	sub	r8,r7
8000f1b8:	58 f8       	cp.w	r8,15
8000f1ba:	5f aa       	srle	r10
8000f1bc:	f5 e9 10 09 	or	r9,r10,r9
8000f1c0:	c1 60       	breq	8000f1ec <_malloc_r+0x42c>
8000f1c2:	0a 9c       	mov	r12,r5
8000f1c4:	f0 1f 00 09 	mcall	8000f1e8 <_malloc_r+0x428>
8000f1c8:	d8 3a       	popm	r0-r7,pc,r12=0
8000f1ca:	00 00       	add	r0,r0
8000f1cc:	00 00       	add	r0,r0
8000f1ce:	07 c0       	ld.ub	r0,r3[0x4]
8000f1d0:	00 00       	add	r0,r0
8000f1d2:	05 b4       	ld.ub	r4,r2[0x3]
8000f1d4:	80 00       	ld.sh	r0,r0[0x0]
8000f1d6:	fb d4 00 00 	ldins.h	r4:b,sp[0]
8000f1da:	07 c4       	ld.ub	r4,r3[0x4]
8000f1dc:	80 00       	ld.sh	r0,r0[0x0]
8000f1de:	e8 1c 00 00 	orl	r12,0x0
8000f1e2:	07 bc       	ld.ub	r12,r3[0x3]
8000f1e4:	00 00       	add	r0,r0
8000f1e6:	07 b8       	ld.ub	r8,r3[0x3]
8000f1e8:	80 00       	ld.sh	r0,r0[0x0]
8000f1ea:	f2 66 68 26 	mov	r6,-890842
8000f1ee:	a1 a8       	sbr	r8,0x0
8000f1f0:	0e 99       	mov	r9,r7
8000f1f2:	a1 a9       	sbr	r9,0x0
8000f1f4:	8d 19       	st.w	r6[0x4],r9
8000f1f6:	ec 07 00 07 	add	r7,r6,r7
8000f1fa:	0a 9c       	mov	r12,r5
8000f1fc:	89 27       	st.w	r4[0x8],r7
8000f1fe:	8f 18       	st.w	r7[0x4],r8
8000f200:	f0 1f 00 03 	mcall	8000f20c <_malloc_r+0x44c>
8000f204:	ec cc ff f8 	sub	r12,r6,-8
8000f208:	d8 32       	popm	r0-r7,pc
8000f20a:	00 00       	add	r0,r0
8000f20c:	80 00       	ld.sh	r0,r0[0x0]
8000f20e:	f2 66 f7 db 	mov	r6,-854053

8000f210 <memchr>:
8000f210:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000f214:	c0 68       	rjmp	8000f220 <memchr+0x10>
8000f216:	20 1a       	sub	r10,1
8000f218:	19 88       	ld.ub	r8,r12[0x0]
8000f21a:	16 38       	cp.w	r8,r11
8000f21c:	5e 0c       	reteq	r12
8000f21e:	2f fc       	sub	r12,-1
8000f220:	58 0a       	cp.w	r10,0
8000f222:	cf a1       	brne	8000f216 <memchr+0x6>
8000f224:	5e fa       	retal	r10

8000f226 <memmove>:
8000f226:	d4 01       	pushm	lr
8000f228:	18 3b       	cp.w	r11,r12
8000f22a:	c1 92       	brcc	8000f25c <memmove+0x36>
8000f22c:	f6 0a 00 09 	add	r9,r11,r10
8000f230:	12 3c       	cp.w	r12,r9
8000f232:	c1 52       	brcc	8000f25c <memmove+0x36>
8000f234:	f8 0a 00 0b 	add	r11,r12,r10
8000f238:	30 08       	mov	r8,0
8000f23a:	c0 68       	rjmp	8000f246 <memmove+0x20>
8000f23c:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000f240:	20 1a       	sub	r10,1
8000f242:	f6 08 0b 0e 	st.b	r11[r8],lr
8000f246:	20 18       	sub	r8,1
8000f248:	58 0a       	cp.w	r10,0
8000f24a:	cf 91       	brne	8000f23c <memmove+0x16>
8000f24c:	d8 02       	popm	pc
8000f24e:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000f252:	20 1a       	sub	r10,1
8000f254:	f8 08 0b 09 	st.b	r12[r8],r9
8000f258:	2f f8       	sub	r8,-1
8000f25a:	c0 28       	rjmp	8000f25e <memmove+0x38>
8000f25c:	30 08       	mov	r8,0
8000f25e:	58 0a       	cp.w	r10,0
8000f260:	cf 71       	brne	8000f24e <memmove+0x28>
8000f262:	d8 02       	popm	pc

8000f264 <__malloc_lock>:
8000f264:	5e fc       	retal	r12

8000f266 <__malloc_unlock>:
8000f266:	5e fc       	retal	r12

8000f268 <__hi0bits>:
8000f268:	18 98       	mov	r8,r12
8000f26a:	e0 1c 00 00 	andl	r12,0x0
8000f26e:	f0 09 15 10 	lsl	r9,r8,0x10
8000f272:	58 0c       	cp.w	r12,0
8000f274:	f2 08 17 00 	moveq	r8,r9
8000f278:	f9 bc 00 10 	moveq	r12,16
8000f27c:	f9 bc 01 00 	movne	r12,0
8000f280:	10 9a       	mov	r10,r8
8000f282:	f0 09 15 08 	lsl	r9,r8,0x8
8000f286:	e6 1a ff 00 	andh	r10,0xff00,COH
8000f28a:	f7 bc 00 f8 	subeq	r12,-8
8000f28e:	f2 08 17 00 	moveq	r8,r9
8000f292:	10 9a       	mov	r10,r8
8000f294:	f0 09 15 04 	lsl	r9,r8,0x4
8000f298:	e6 1a f0 00 	andh	r10,0xf000,COH
8000f29c:	f7 bc 00 fc 	subeq	r12,-4
8000f2a0:	f2 08 17 00 	moveq	r8,r9
8000f2a4:	10 9a       	mov	r10,r8
8000f2a6:	f0 09 15 02 	lsl	r9,r8,0x2
8000f2aa:	e6 1a c0 00 	andh	r10,0xc000,COH
8000f2ae:	f7 bc 00 fe 	subeq	r12,-2
8000f2b2:	f2 08 17 00 	moveq	r8,r9
8000f2b6:	58 08       	cp.w	r8,0
8000f2b8:	5e 5c       	retlt	r12
8000f2ba:	ed b8 00 1e 	bld	r8,0x1e
8000f2be:	f9 bc 01 20 	movne	r12,32
8000f2c2:	f7 bc 00 ff 	subeq	r12,-1
8000f2c6:	5e fc       	retal	r12

8000f2c8 <__lo0bits>:
8000f2c8:	18 99       	mov	r9,r12
8000f2ca:	78 08       	ld.w	r8,r12[0x0]
8000f2cc:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000f2d0:	c1 50       	breq	8000f2fa <__lo0bits+0x32>
8000f2d2:	ed b8 00 00 	bld	r8,0x0
8000f2d6:	c0 21       	brne	8000f2da <__lo0bits+0x12>
8000f2d8:	5e fd       	retal	0
8000f2da:	10 9b       	mov	r11,r8
8000f2dc:	f0 0a 16 01 	lsr	r10,r8,0x1
8000f2e0:	e2 1b 00 02 	andl	r11,0x2,COH
8000f2e4:	a3 88       	lsr	r8,0x2
8000f2e6:	58 0b       	cp.w	r11,0
8000f2e8:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000f2ec:	f9 bc 01 01 	movne	r12,1
8000f2f0:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000f2f4:	f9 bc 00 02 	moveq	r12,2
8000f2f8:	5e fc       	retal	r12
8000f2fa:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000f2fe:	f0 0b 16 10 	lsr	r11,r8,0x10
8000f302:	58 0a       	cp.w	r10,0
8000f304:	f6 08 17 00 	moveq	r8,r11
8000f308:	f9 bc 00 10 	moveq	r12,16
8000f30c:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000f310:	f0 0a 16 08 	lsr	r10,r8,0x8
8000f314:	58 0b       	cp.w	r11,0
8000f316:	f7 bc 00 f8 	subeq	r12,-8
8000f31a:	f4 08 17 00 	moveq	r8,r10
8000f31e:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000f322:	f0 0a 16 04 	lsr	r10,r8,0x4
8000f326:	58 0b       	cp.w	r11,0
8000f328:	f7 bc 00 fc 	subeq	r12,-4
8000f32c:	f4 08 17 00 	moveq	r8,r10
8000f330:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000f334:	f0 0a 16 02 	lsr	r10,r8,0x2
8000f338:	58 0b       	cp.w	r11,0
8000f33a:	f7 bc 00 fe 	subeq	r12,-2
8000f33e:	f4 08 17 00 	moveq	r8,r10
8000f342:	ed b8 00 00 	bld	r8,0x0
8000f346:	c0 60       	breq	8000f352 <__lo0bits+0x8a>
8000f348:	a1 98       	lsr	r8,0x1
8000f34a:	c0 31       	brne	8000f350 <__lo0bits+0x88>
8000f34c:	32 0c       	mov	r12,32
8000f34e:	5e fc       	retal	r12
8000f350:	2f fc       	sub	r12,-1
8000f352:	93 08       	st.w	r9[0x0],r8
8000f354:	5e fc       	retal	r12

8000f356 <__mcmp>:
8000f356:	d4 01       	pushm	lr
8000f358:	18 98       	mov	r8,r12
8000f35a:	76 49       	ld.w	r9,r11[0x10]
8000f35c:	78 4c       	ld.w	r12,r12[0x10]
8000f35e:	12 1c       	sub	r12,r9
8000f360:	c1 31       	brne	8000f386 <__mcmp+0x30>
8000f362:	2f b9       	sub	r9,-5
8000f364:	a3 69       	lsl	r9,0x2
8000f366:	12 0b       	add	r11,r9
8000f368:	f0 09 00 09 	add	r9,r8,r9
8000f36c:	2e c8       	sub	r8,-20
8000f36e:	13 4e       	ld.w	lr,--r9
8000f370:	17 4a       	ld.w	r10,--r11
8000f372:	14 3e       	cp.w	lr,r10
8000f374:	c0 60       	breq	8000f380 <__mcmp+0x2a>
8000f376:	f9 bc 03 ff 	movlo	r12,-1
8000f37a:	f9 bc 02 01 	movhs	r12,1
8000f37e:	d8 02       	popm	pc
8000f380:	10 39       	cp.w	r9,r8
8000f382:	fe 9b ff f6 	brhi	8000f36e <__mcmp+0x18>
8000f386:	d8 02       	popm	pc

8000f388 <_Bfree>:
8000f388:	d4 21       	pushm	r4-r7,lr
8000f38a:	18 97       	mov	r7,r12
8000f38c:	16 95       	mov	r5,r11
8000f38e:	78 96       	ld.w	r6,r12[0x24]
8000f390:	58 06       	cp.w	r6,0
8000f392:	c0 91       	brne	8000f3a4 <_Bfree+0x1c>
8000f394:	31 0c       	mov	r12,16
8000f396:	f0 1f 00 0a 	mcall	8000f3bc <_Bfree+0x34>
8000f39a:	99 36       	st.w	r12[0xc],r6
8000f39c:	8f 9c       	st.w	r7[0x24],r12
8000f39e:	99 16       	st.w	r12[0x4],r6
8000f3a0:	99 26       	st.w	r12[0x8],r6
8000f3a2:	99 06       	st.w	r12[0x0],r6
8000f3a4:	58 05       	cp.w	r5,0
8000f3a6:	c0 90       	breq	8000f3b8 <_Bfree+0x30>
8000f3a8:	6a 19       	ld.w	r9,r5[0x4]
8000f3aa:	6e 98       	ld.w	r8,r7[0x24]
8000f3ac:	70 38       	ld.w	r8,r8[0xc]
8000f3ae:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000f3b2:	8b 0a       	st.w	r5[0x0],r10
8000f3b4:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000f3b8:	d8 22       	popm	r4-r7,pc
8000f3ba:	00 00       	add	r0,r0
8000f3bc:	80 00       	ld.sh	r0,r0[0x0]
8000f3be:	ed a8 d4 21 	ldcm.d	cp6,r8++,cr0-cr1,cr10-cr11

8000f3c0 <_Balloc>:
8000f3c0:	d4 21       	pushm	r4-r7,lr
8000f3c2:	18 97       	mov	r7,r12
8000f3c4:	16 96       	mov	r6,r11
8000f3c6:	78 95       	ld.w	r5,r12[0x24]
8000f3c8:	58 05       	cp.w	r5,0
8000f3ca:	c0 91       	brne	8000f3dc <_Balloc+0x1c>
8000f3cc:	31 0c       	mov	r12,16
8000f3ce:	f0 1f 00 19 	mcall	8000f430 <_Balloc+0x70>
8000f3d2:	99 35       	st.w	r12[0xc],r5
8000f3d4:	8f 9c       	st.w	r7[0x24],r12
8000f3d6:	99 15       	st.w	r12[0x4],r5
8000f3d8:	99 25       	st.w	r12[0x8],r5
8000f3da:	99 05       	st.w	r12[0x0],r5
8000f3dc:	6e 95       	ld.w	r5,r7[0x24]
8000f3de:	6a 38       	ld.w	r8,r5[0xc]
8000f3e0:	58 08       	cp.w	r8,0
8000f3e2:	c0 b1       	brne	8000f3f8 <_Balloc+0x38>
8000f3e4:	31 0a       	mov	r10,16
8000f3e6:	30 4b       	mov	r11,4
8000f3e8:	0e 9c       	mov	r12,r7
8000f3ea:	f0 1f 00 13 	mcall	8000f434 <_Balloc+0x74>
8000f3ee:	8b 3c       	st.w	r5[0xc],r12
8000f3f0:	6e 98       	ld.w	r8,r7[0x24]
8000f3f2:	70 3c       	ld.w	r12,r8[0xc]
8000f3f4:	58 0c       	cp.w	r12,0
8000f3f6:	c1 b0       	breq	8000f42c <_Balloc+0x6c>
8000f3f8:	6e 98       	ld.w	r8,r7[0x24]
8000f3fa:	70 38       	ld.w	r8,r8[0xc]
8000f3fc:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000f400:	70 0c       	ld.w	r12,r8[0x0]
8000f402:	58 0c       	cp.w	r12,0
8000f404:	c0 40       	breq	8000f40c <_Balloc+0x4c>
8000f406:	78 09       	ld.w	r9,r12[0x0]
8000f408:	91 09       	st.w	r8[0x0],r9
8000f40a:	c0 e8       	rjmp	8000f426 <_Balloc+0x66>
8000f40c:	0e 9c       	mov	r12,r7
8000f40e:	30 17       	mov	r7,1
8000f410:	0e 9b       	mov	r11,r7
8000f412:	ee 06 09 47 	lsl	r7,r7,r6
8000f416:	ee ca ff fb 	sub	r10,r7,-5
8000f41a:	a3 6a       	lsl	r10,0x2
8000f41c:	f0 1f 00 06 	mcall	8000f434 <_Balloc+0x74>
8000f420:	c0 60       	breq	8000f42c <_Balloc+0x6c>
8000f422:	99 16       	st.w	r12[0x4],r6
8000f424:	99 27       	st.w	r12[0x8],r7
8000f426:	30 08       	mov	r8,0
8000f428:	99 38       	st.w	r12[0xc],r8
8000f42a:	99 48       	st.w	r12[0x10],r8
8000f42c:	d8 22       	popm	r4-r7,pc
8000f42e:	00 00       	add	r0,r0
8000f430:	80 00       	ld.sh	r0,r0[0x0]
8000f432:	ed a8 80 00 	ldcm.w	cp4,r8,
8000f436:	fd dc       	*unknown*

8000f438 <__d2b>:
8000f438:	d4 31       	pushm	r0-r7,lr
8000f43a:	20 2d       	sub	sp,8
8000f43c:	16 93       	mov	r3,r11
8000f43e:	12 96       	mov	r6,r9
8000f440:	10 95       	mov	r5,r8
8000f442:	14 92       	mov	r2,r10
8000f444:	30 1b       	mov	r11,1
8000f446:	f0 1f 00 27 	mcall	8000f4e0 <__d2b+0xa8>
8000f44a:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000f44e:	50 09       	stdsp	sp[0x0],r9
8000f450:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000f454:	b5 a9       	sbr	r9,0x14
8000f456:	f0 01 16 14 	lsr	r1,r8,0x14
8000f45a:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000f45e:	18 94       	mov	r4,r12
8000f460:	58 02       	cp.w	r2,0
8000f462:	c1 e0       	breq	8000f49e <__d2b+0x66>
8000f464:	fa cc ff f8 	sub	r12,sp,-8
8000f468:	18 d2       	st.w	--r12,r2
8000f46a:	f0 1f 00 1f 	mcall	8000f4e4 <__d2b+0xac>
8000f46e:	40 18       	lddsp	r8,sp[0x4]
8000f470:	c0 d0       	breq	8000f48a <__d2b+0x52>
8000f472:	40 09       	lddsp	r9,sp[0x0]
8000f474:	f8 0a 11 20 	rsub	r10,r12,32
8000f478:	f2 0a 09 4a 	lsl	r10,r9,r10
8000f47c:	f5 e8 10 08 	or	r8,r10,r8
8000f480:	89 58       	st.w	r4[0x14],r8
8000f482:	f2 0c 0a 49 	lsr	r9,r9,r12
8000f486:	50 09       	stdsp	sp[0x0],r9
8000f488:	c0 28       	rjmp	8000f48c <__d2b+0x54>
8000f48a:	89 58       	st.w	r4[0x14],r8
8000f48c:	40 08       	lddsp	r8,sp[0x0]
8000f48e:	58 08       	cp.w	r8,0
8000f490:	f9 b3 01 02 	movne	r3,2
8000f494:	f9 b3 00 01 	moveq	r3,1
8000f498:	89 68       	st.w	r4[0x18],r8
8000f49a:	89 43       	st.w	r4[0x10],r3
8000f49c:	c0 98       	rjmp	8000f4ae <__d2b+0x76>
8000f49e:	1a 9c       	mov	r12,sp
8000f4a0:	f0 1f 00 11 	mcall	8000f4e4 <__d2b+0xac>
8000f4a4:	30 13       	mov	r3,1
8000f4a6:	40 08       	lddsp	r8,sp[0x0]
8000f4a8:	2e 0c       	sub	r12,-32
8000f4aa:	89 43       	st.w	r4[0x10],r3
8000f4ac:	89 58       	st.w	r4[0x14],r8
8000f4ae:	58 01       	cp.w	r1,0
8000f4b0:	c0 90       	breq	8000f4c2 <__d2b+0x8a>
8000f4b2:	e2 c1 04 33 	sub	r1,r1,1075
8000f4b6:	18 01       	add	r1,r12
8000f4b8:	8d 01       	st.w	r6[0x0],r1
8000f4ba:	f8 0c 11 35 	rsub	r12,r12,53
8000f4be:	8b 0c       	st.w	r5[0x0],r12
8000f4c0:	c0 d8       	rjmp	8000f4da <__d2b+0xa2>
8000f4c2:	e6 c8 ff fc 	sub	r8,r3,-4
8000f4c6:	f8 cc 04 32 	sub	r12,r12,1074
8000f4ca:	a5 73       	lsl	r3,0x5
8000f4cc:	8d 0c       	st.w	r6[0x0],r12
8000f4ce:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000f4d2:	f0 1f 00 06 	mcall	8000f4e8 <__d2b+0xb0>
8000f4d6:	18 13       	sub	r3,r12
8000f4d8:	8b 03       	st.w	r5[0x0],r3
8000f4da:	08 9c       	mov	r12,r4
8000f4dc:	2f ed       	sub	sp,-8
8000f4de:	d8 32       	popm	r0-r7,pc
8000f4e0:	80 00       	ld.sh	r0,r0[0x0]
8000f4e2:	f3 c0       	*unknown*
8000f4e4:	80 00       	ld.sh	r0,r0[0x0]
8000f4e6:	f2 c8 80 00 	sub	r8,r9,-32768
8000f4ea:	f2 68 d4 31 	mov	r8,-863183

8000f4ec <__mdiff>:
8000f4ec:	d4 31       	pushm	r0-r7,lr
8000f4ee:	74 48       	ld.w	r8,r10[0x10]
8000f4f0:	76 45       	ld.w	r5,r11[0x10]
8000f4f2:	16 97       	mov	r7,r11
8000f4f4:	14 96       	mov	r6,r10
8000f4f6:	10 15       	sub	r5,r8
8000f4f8:	c1 31       	brne	8000f51e <__mdiff+0x32>
8000f4fa:	2f b8       	sub	r8,-5
8000f4fc:	ee ce ff ec 	sub	lr,r7,-20
8000f500:	a3 68       	lsl	r8,0x2
8000f502:	f4 08 00 0b 	add	r11,r10,r8
8000f506:	ee 08 00 08 	add	r8,r7,r8
8000f50a:	11 4a       	ld.w	r10,--r8
8000f50c:	17 49       	ld.w	r9,--r11
8000f50e:	12 3a       	cp.w	r10,r9
8000f510:	c0 30       	breq	8000f516 <__mdiff+0x2a>
8000f512:	c0 e2       	brcc	8000f52e <__mdiff+0x42>
8000f514:	c0 78       	rjmp	8000f522 <__mdiff+0x36>
8000f516:	1c 38       	cp.w	r8,lr
8000f518:	fe 9b ff f9 	brhi	8000f50a <__mdiff+0x1e>
8000f51c:	c4 a8       	rjmp	8000f5b0 <__mdiff+0xc4>
8000f51e:	58 05       	cp.w	r5,0
8000f520:	c0 64       	brge	8000f52c <__mdiff+0x40>
8000f522:	0e 98       	mov	r8,r7
8000f524:	30 15       	mov	r5,1
8000f526:	0c 97       	mov	r7,r6
8000f528:	10 96       	mov	r6,r8
8000f52a:	c0 28       	rjmp	8000f52e <__mdiff+0x42>
8000f52c:	30 05       	mov	r5,0
8000f52e:	6e 1b       	ld.w	r11,r7[0x4]
8000f530:	f0 1f 00 24 	mcall	8000f5c0 <__mdiff+0xd4>
8000f534:	6e 49       	ld.w	r9,r7[0x10]
8000f536:	6c 44       	ld.w	r4,r6[0x10]
8000f538:	99 35       	st.w	r12[0xc],r5
8000f53a:	2f b4       	sub	r4,-5
8000f53c:	f2 c5 ff fb 	sub	r5,r9,-5
8000f540:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000f544:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000f548:	2e c6       	sub	r6,-20
8000f54a:	2e c7       	sub	r7,-20
8000f54c:	f8 c8 ff ec 	sub	r8,r12,-20
8000f550:	30 0a       	mov	r10,0
8000f552:	0f 0e       	ld.w	lr,r7++
8000f554:	0d 0b       	ld.w	r11,r6++
8000f556:	fc 02 16 10 	lsr	r2,lr,0x10
8000f55a:	f6 03 16 10 	lsr	r3,r11,0x10
8000f55e:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000f562:	e4 03 01 03 	sub	r3,r2,r3
8000f566:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000f56a:	fc 0b 01 0b 	sub	r11,lr,r11
8000f56e:	f6 0a 00 0a 	add	r10,r11,r10
8000f572:	b0 1a       	st.h	r8[0x2],r10
8000f574:	b1 4a       	asr	r10,0x10
8000f576:	e6 0a 00 0a 	add	r10,r3,r10
8000f57a:	b0 0a       	st.h	r8[0x0],r10
8000f57c:	2f c8       	sub	r8,-4
8000f57e:	b1 4a       	asr	r10,0x10
8000f580:	08 36       	cp.w	r6,r4
8000f582:	ce 83       	brcs	8000f552 <__mdiff+0x66>
8000f584:	c0 d8       	rjmp	8000f59e <__mdiff+0xb2>
8000f586:	0f 0b       	ld.w	r11,r7++
8000f588:	f6 0e 16 10 	lsr	lr,r11,0x10
8000f58c:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000f590:	16 0a       	add	r10,r11
8000f592:	b0 1a       	st.h	r8[0x2],r10
8000f594:	b1 4a       	asr	r10,0x10
8000f596:	1c 0a       	add	r10,lr
8000f598:	b0 0a       	st.h	r8[0x0],r10
8000f59a:	2f c8       	sub	r8,-4
8000f59c:	b1 4a       	asr	r10,0x10
8000f59e:	0a 37       	cp.w	r7,r5
8000f5a0:	cf 33       	brcs	8000f586 <__mdiff+0x9a>
8000f5a2:	c0 28       	rjmp	8000f5a6 <__mdiff+0xba>
8000f5a4:	20 19       	sub	r9,1
8000f5a6:	11 4a       	ld.w	r10,--r8
8000f5a8:	58 0a       	cp.w	r10,0
8000f5aa:	cf d0       	breq	8000f5a4 <__mdiff+0xb8>
8000f5ac:	99 49       	st.w	r12[0x10],r9
8000f5ae:	d8 32       	popm	r0-r7,pc
8000f5b0:	30 0b       	mov	r11,0
8000f5b2:	f0 1f 00 04 	mcall	8000f5c0 <__mdiff+0xd4>
8000f5b6:	30 18       	mov	r8,1
8000f5b8:	99 48       	st.w	r12[0x10],r8
8000f5ba:	30 08       	mov	r8,0
8000f5bc:	99 58       	st.w	r12[0x14],r8
8000f5be:	d8 32       	popm	r0-r7,pc
8000f5c0:	80 00       	ld.sh	r0,r0[0x0]
8000f5c2:	f3 c0       	*unknown*

8000f5c4 <__lshift>:
8000f5c4:	d4 31       	pushm	r0-r7,lr
8000f5c6:	16 97       	mov	r7,r11
8000f5c8:	76 46       	ld.w	r6,r11[0x10]
8000f5ca:	f4 02 14 05 	asr	r2,r10,0x5
8000f5ce:	2f f6       	sub	r6,-1
8000f5d0:	14 93       	mov	r3,r10
8000f5d2:	18 94       	mov	r4,r12
8000f5d4:	04 06       	add	r6,r2
8000f5d6:	76 1b       	ld.w	r11,r11[0x4]
8000f5d8:	6e 28       	ld.w	r8,r7[0x8]
8000f5da:	c0 38       	rjmp	8000f5e0 <__lshift+0x1c>
8000f5dc:	2f fb       	sub	r11,-1
8000f5de:	a1 78       	lsl	r8,0x1
8000f5e0:	10 36       	cp.w	r6,r8
8000f5e2:	fe 99 ff fd 	brgt	8000f5dc <__lshift+0x18>
8000f5e6:	08 9c       	mov	r12,r4
8000f5e8:	f0 1f 00 1a 	mcall	8000f650 <__lshift+0x8c>
8000f5ec:	30 09       	mov	r9,0
8000f5ee:	18 95       	mov	r5,r12
8000f5f0:	f8 c8 ff ec 	sub	r8,r12,-20
8000f5f4:	12 9a       	mov	r10,r9
8000f5f6:	c0 38       	rjmp	8000f5fc <__lshift+0x38>
8000f5f8:	10 aa       	st.w	r8++,r10
8000f5fa:	2f f9       	sub	r9,-1
8000f5fc:	04 39       	cp.w	r9,r2
8000f5fe:	cf d5       	brlt	8000f5f8 <__lshift+0x34>
8000f600:	6e 4b       	ld.w	r11,r7[0x10]
8000f602:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000f606:	2f bb       	sub	r11,-5
8000f608:	ee c9 ff ec 	sub	r9,r7,-20
8000f60c:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000f610:	58 03       	cp.w	r3,0
8000f612:	c1 30       	breq	8000f638 <__lshift+0x74>
8000f614:	e6 0c 11 20 	rsub	r12,r3,32
8000f618:	30 0a       	mov	r10,0
8000f61a:	72 02       	ld.w	r2,r9[0x0]
8000f61c:	e4 03 09 42 	lsl	r2,r2,r3
8000f620:	04 4a       	or	r10,r2
8000f622:	10 aa       	st.w	r8++,r10
8000f624:	13 0a       	ld.w	r10,r9++
8000f626:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000f62a:	16 39       	cp.w	r9,r11
8000f62c:	cf 73       	brcs	8000f61a <__lshift+0x56>
8000f62e:	91 0a       	st.w	r8[0x0],r10
8000f630:	58 0a       	cp.w	r10,0
8000f632:	c0 70       	breq	8000f640 <__lshift+0x7c>
8000f634:	2f f6       	sub	r6,-1
8000f636:	c0 58       	rjmp	8000f640 <__lshift+0x7c>
8000f638:	13 0a       	ld.w	r10,r9++
8000f63a:	10 aa       	st.w	r8++,r10
8000f63c:	16 39       	cp.w	r9,r11
8000f63e:	cf d3       	brcs	8000f638 <__lshift+0x74>
8000f640:	08 9c       	mov	r12,r4
8000f642:	20 16       	sub	r6,1
8000f644:	0e 9b       	mov	r11,r7
8000f646:	8b 46       	st.w	r5[0x10],r6
8000f648:	f0 1f 00 03 	mcall	8000f654 <__lshift+0x90>
8000f64c:	0a 9c       	mov	r12,r5
8000f64e:	d8 32       	popm	r0-r7,pc
8000f650:	80 00       	ld.sh	r0,r0[0x0]
8000f652:	f3 c0       	*unknown*
8000f654:	80 00       	ld.sh	r0,r0[0x0]
8000f656:	f3 88       	*unknown*

8000f658 <__multiply>:
8000f658:	d4 31       	pushm	r0-r7,lr
8000f65a:	20 2d       	sub	sp,8
8000f65c:	76 49       	ld.w	r9,r11[0x10]
8000f65e:	74 48       	ld.w	r8,r10[0x10]
8000f660:	16 96       	mov	r6,r11
8000f662:	14 95       	mov	r5,r10
8000f664:	10 39       	cp.w	r9,r8
8000f666:	ec 08 17 50 	movlt	r8,r6
8000f66a:	ea 06 17 50 	movlt	r6,r5
8000f66e:	f0 05 17 50 	movlt	r5,r8
8000f672:	6c 28       	ld.w	r8,r6[0x8]
8000f674:	76 43       	ld.w	r3,r11[0x10]
8000f676:	74 42       	ld.w	r2,r10[0x10]
8000f678:	76 1b       	ld.w	r11,r11[0x4]
8000f67a:	e4 03 00 07 	add	r7,r2,r3
8000f67e:	10 37       	cp.w	r7,r8
8000f680:	f7 bb 09 ff 	subgt	r11,-1
8000f684:	f0 1f 00 36 	mcall	8000f75c <__multiply+0x104>
8000f688:	ee c4 ff fb 	sub	r4,r7,-5
8000f68c:	f8 c9 ff ec 	sub	r9,r12,-20
8000f690:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000f694:	30 0a       	mov	r10,0
8000f696:	12 98       	mov	r8,r9
8000f698:	c0 28       	rjmp	8000f69c <__multiply+0x44>
8000f69a:	10 aa       	st.w	r8++,r10
8000f69c:	08 38       	cp.w	r8,r4
8000f69e:	cf e3       	brcs	8000f69a <__multiply+0x42>
8000f6a0:	2f b3       	sub	r3,-5
8000f6a2:	2f b2       	sub	r2,-5
8000f6a4:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000f6a8:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000f6ac:	ec cb ff ec 	sub	r11,r6,-20
8000f6b0:	50 12       	stdsp	sp[0x4],r2
8000f6b2:	ea ca ff ec 	sub	r10,r5,-20
8000f6b6:	c4 48       	rjmp	8000f73e <__multiply+0xe6>
8000f6b8:	94 95       	ld.uh	r5,r10[0x2]
8000f6ba:	58 05       	cp.w	r5,0
8000f6bc:	c2 00       	breq	8000f6fc <__multiply+0xa4>
8000f6be:	12 98       	mov	r8,r9
8000f6c0:	16 96       	mov	r6,r11
8000f6c2:	30 0e       	mov	lr,0
8000f6c4:	50 09       	stdsp	sp[0x0],r9
8000f6c6:	0d 02       	ld.w	r2,r6++
8000f6c8:	e4 00 16 10 	lsr	r0,r2,0x10
8000f6cc:	70 01       	ld.w	r1,r8[0x0]
8000f6ce:	70 09       	ld.w	r9,r8[0x0]
8000f6d0:	b1 81       	lsr	r1,0x10
8000f6d2:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000f6d6:	e0 05 03 41 	mac	r1,r0,r5
8000f6da:	ab 32       	mul	r2,r5
8000f6dc:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000f6e0:	00 02       	add	r2,r0
8000f6e2:	e4 0e 00 0e 	add	lr,r2,lr
8000f6e6:	b0 1e       	st.h	r8[0x2],lr
8000f6e8:	b1 8e       	lsr	lr,0x10
8000f6ea:	1c 01       	add	r1,lr
8000f6ec:	b0 01       	st.h	r8[0x0],r1
8000f6ee:	e2 0e 16 10 	lsr	lr,r1,0x10
8000f6f2:	2f c8       	sub	r8,-4
8000f6f4:	06 36       	cp.w	r6,r3
8000f6f6:	ce 83       	brcs	8000f6c6 <__multiply+0x6e>
8000f6f8:	40 09       	lddsp	r9,sp[0x0]
8000f6fa:	91 0e       	st.w	r8[0x0],lr
8000f6fc:	94 86       	ld.uh	r6,r10[0x0]
8000f6fe:	58 06       	cp.w	r6,0
8000f700:	c1 d0       	breq	8000f73a <__multiply+0xe2>
8000f702:	72 02       	ld.w	r2,r9[0x0]
8000f704:	12 98       	mov	r8,r9
8000f706:	16 9e       	mov	lr,r11
8000f708:	30 05       	mov	r5,0
8000f70a:	b0 12       	st.h	r8[0x2],r2
8000f70c:	1d 01       	ld.w	r1,lr++
8000f70e:	90 82       	ld.uh	r2,r8[0x0]
8000f710:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000f714:	ad 30       	mul	r0,r6
8000f716:	e0 02 00 02 	add	r2,r0,r2
8000f71a:	e4 05 00 05 	add	r5,r2,r5
8000f71e:	b0 05       	st.h	r8[0x0],r5
8000f720:	b1 85       	lsr	r5,0x10
8000f722:	b1 81       	lsr	r1,0x10
8000f724:	2f c8       	sub	r8,-4
8000f726:	ad 31       	mul	r1,r6
8000f728:	90 92       	ld.uh	r2,r8[0x2]
8000f72a:	e2 02 00 02 	add	r2,r1,r2
8000f72e:	0a 02       	add	r2,r5
8000f730:	e4 05 16 10 	lsr	r5,r2,0x10
8000f734:	06 3e       	cp.w	lr,r3
8000f736:	ce a3       	brcs	8000f70a <__multiply+0xb2>
8000f738:	91 02       	st.w	r8[0x0],r2
8000f73a:	2f ca       	sub	r10,-4
8000f73c:	2f c9       	sub	r9,-4
8000f73e:	40 18       	lddsp	r8,sp[0x4]
8000f740:	10 3a       	cp.w	r10,r8
8000f742:	cb b3       	brcs	8000f6b8 <__multiply+0x60>
8000f744:	c0 28       	rjmp	8000f748 <__multiply+0xf0>
8000f746:	20 17       	sub	r7,1
8000f748:	58 07       	cp.w	r7,0
8000f74a:	e0 8a 00 05 	brle	8000f754 <__multiply+0xfc>
8000f74e:	09 48       	ld.w	r8,--r4
8000f750:	58 08       	cp.w	r8,0
8000f752:	cf a0       	breq	8000f746 <__multiply+0xee>
8000f754:	99 47       	st.w	r12[0x10],r7
8000f756:	2f ed       	sub	sp,-8
8000f758:	d8 32       	popm	r0-r7,pc
8000f75a:	00 00       	add	r0,r0
8000f75c:	80 00       	ld.sh	r0,r0[0x0]
8000f75e:	f3 c0       	*unknown*

8000f760 <__i2b>:
8000f760:	d4 21       	pushm	r4-r7,lr
8000f762:	16 97       	mov	r7,r11
8000f764:	30 1b       	mov	r11,1
8000f766:	f0 1f 00 04 	mcall	8000f774 <__i2b+0x14>
8000f76a:	30 19       	mov	r9,1
8000f76c:	99 57       	st.w	r12[0x14],r7
8000f76e:	99 49       	st.w	r12[0x10],r9
8000f770:	d8 22       	popm	r4-r7,pc
8000f772:	00 00       	add	r0,r0
8000f774:	80 00       	ld.sh	r0,r0[0x0]
8000f776:	f3 c0       	*unknown*

8000f778 <__multadd>:
8000f778:	d4 31       	pushm	r0-r7,lr
8000f77a:	30 08       	mov	r8,0
8000f77c:	12 95       	mov	r5,r9
8000f77e:	16 97       	mov	r7,r11
8000f780:	18 96       	mov	r6,r12
8000f782:	76 44       	ld.w	r4,r11[0x10]
8000f784:	f6 c9 ff ec 	sub	r9,r11,-20
8000f788:	72 0b       	ld.w	r11,r9[0x0]
8000f78a:	f6 0c 16 10 	lsr	r12,r11,0x10
8000f78e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000f792:	f4 0c 02 4c 	mul	r12,r10,r12
8000f796:	f4 0b 03 45 	mac	r5,r10,r11
8000f79a:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000f79e:	b1 85       	lsr	r5,0x10
8000f7a0:	18 05       	add	r5,r12
8000f7a2:	ea 0c 15 10 	lsl	r12,r5,0x10
8000f7a6:	f8 0b 00 0b 	add	r11,r12,r11
8000f7aa:	12 ab       	st.w	r9++,r11
8000f7ac:	2f f8       	sub	r8,-1
8000f7ae:	b1 85       	lsr	r5,0x10
8000f7b0:	08 38       	cp.w	r8,r4
8000f7b2:	ce b5       	brlt	8000f788 <__multadd+0x10>
8000f7b4:	58 05       	cp.w	r5,0
8000f7b6:	c1 d0       	breq	8000f7f0 <__multadd+0x78>
8000f7b8:	6e 28       	ld.w	r8,r7[0x8]
8000f7ba:	10 34       	cp.w	r4,r8
8000f7bc:	c1 45       	brlt	8000f7e4 <__multadd+0x6c>
8000f7be:	6e 1b       	ld.w	r11,r7[0x4]
8000f7c0:	0c 9c       	mov	r12,r6
8000f7c2:	2f fb       	sub	r11,-1
8000f7c4:	f0 1f 00 0c 	mcall	8000f7f4 <__multadd+0x7c>
8000f7c8:	6e 4a       	ld.w	r10,r7[0x10]
8000f7ca:	ee cb ff f4 	sub	r11,r7,-12
8000f7ce:	18 93       	mov	r3,r12
8000f7d0:	2f ea       	sub	r10,-2
8000f7d2:	2f 4c       	sub	r12,-12
8000f7d4:	a3 6a       	lsl	r10,0x2
8000f7d6:	f0 1f 00 09 	mcall	8000f7f8 <__multadd+0x80>
8000f7da:	0e 9b       	mov	r11,r7
8000f7dc:	0c 9c       	mov	r12,r6
8000f7de:	f0 1f 00 08 	mcall	8000f7fc <__multadd+0x84>
8000f7e2:	06 97       	mov	r7,r3
8000f7e4:	e8 c8 ff ff 	sub	r8,r4,-1
8000f7e8:	2f b4       	sub	r4,-5
8000f7ea:	8f 48       	st.w	r7[0x10],r8
8000f7ec:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000f7f0:	0e 9c       	mov	r12,r7
8000f7f2:	d8 32       	popm	r0-r7,pc
8000f7f4:	80 00       	ld.sh	r0,r0[0x0]
8000f7f6:	f3 c0       	*unknown*
8000f7f8:	80 00       	ld.sh	r0,r0[0x0]
8000f7fa:	b1 26       	st.d	r8++,r6
8000f7fc:	80 00       	ld.sh	r0,r0[0x0]
8000f7fe:	f3 88       	*unknown*

8000f800 <__pow5mult>:
8000f800:	d4 31       	pushm	r0-r7,lr
8000f802:	14 96       	mov	r6,r10
8000f804:	18 97       	mov	r7,r12
8000f806:	16 94       	mov	r4,r11
8000f808:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000f80c:	c0 90       	breq	8000f81e <__pow5mult+0x1e>
8000f80e:	20 18       	sub	r8,1
8000f810:	4a 19       	lddpc	r9,8000f894 <__pow5mult+0x94>
8000f812:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000f816:	30 09       	mov	r9,0
8000f818:	f0 1f 00 20 	mcall	8000f898 <__pow5mult+0x98>
8000f81c:	18 94       	mov	r4,r12
8000f81e:	a3 46       	asr	r6,0x2
8000f820:	c3 70       	breq	8000f88e <__pow5mult+0x8e>
8000f822:	6e 95       	ld.w	r5,r7[0x24]
8000f824:	58 05       	cp.w	r5,0
8000f826:	c0 91       	brne	8000f838 <__pow5mult+0x38>
8000f828:	31 0c       	mov	r12,16
8000f82a:	f0 1f 00 1d 	mcall	8000f89c <__pow5mult+0x9c>
8000f82e:	99 35       	st.w	r12[0xc],r5
8000f830:	8f 9c       	st.w	r7[0x24],r12
8000f832:	99 15       	st.w	r12[0x4],r5
8000f834:	99 25       	st.w	r12[0x8],r5
8000f836:	99 05       	st.w	r12[0x0],r5
8000f838:	6e 93       	ld.w	r3,r7[0x24]
8000f83a:	66 25       	ld.w	r5,r3[0x8]
8000f83c:	58 05       	cp.w	r5,0
8000f83e:	c0 d1       	brne	8000f858 <__pow5mult+0x58>
8000f840:	e0 6b 02 71 	mov	r11,625
8000f844:	0e 9c       	mov	r12,r7
8000f846:	f0 1f 00 17 	mcall	8000f8a0 <__pow5mult+0xa0>
8000f84a:	87 2c       	st.w	r3[0x8],r12
8000f84c:	30 08       	mov	r8,0
8000f84e:	18 95       	mov	r5,r12
8000f850:	99 08       	st.w	r12[0x0],r8
8000f852:	c0 38       	rjmp	8000f858 <__pow5mult+0x58>
8000f854:	06 9c       	mov	r12,r3
8000f856:	18 95       	mov	r5,r12
8000f858:	ed b6 00 00 	bld	r6,0x0
8000f85c:	c0 c1       	brne	8000f874 <__pow5mult+0x74>
8000f85e:	08 9b       	mov	r11,r4
8000f860:	0a 9a       	mov	r10,r5
8000f862:	0e 9c       	mov	r12,r7
8000f864:	f0 1f 00 10 	mcall	8000f8a4 <__pow5mult+0xa4>
8000f868:	08 9b       	mov	r11,r4
8000f86a:	18 93       	mov	r3,r12
8000f86c:	0e 9c       	mov	r12,r7
8000f86e:	06 94       	mov	r4,r3
8000f870:	f0 1f 00 0e 	mcall	8000f8a8 <__pow5mult+0xa8>
8000f874:	a1 56       	asr	r6,0x1
8000f876:	c0 c0       	breq	8000f88e <__pow5mult+0x8e>
8000f878:	6a 03       	ld.w	r3,r5[0x0]
8000f87a:	58 03       	cp.w	r3,0
8000f87c:	ce c1       	brne	8000f854 <__pow5mult+0x54>
8000f87e:	0a 9a       	mov	r10,r5
8000f880:	0a 9b       	mov	r11,r5
8000f882:	0e 9c       	mov	r12,r7
8000f884:	f0 1f 00 08 	mcall	8000f8a4 <__pow5mult+0xa4>
8000f888:	8b 0c       	st.w	r5[0x0],r12
8000f88a:	99 03       	st.w	r12[0x0],r3
8000f88c:	ce 5b       	rjmp	8000f856 <__pow5mult+0x56>
8000f88e:	08 9c       	mov	r12,r4
8000f890:	d8 32       	popm	r0-r7,pc
8000f892:	00 00       	add	r0,r0
8000f894:	80 01       	ld.sh	r1,r0[0x0]
8000f896:	10 e0       	st.h	--r8,r0
8000f898:	80 00       	ld.sh	r0,r0[0x0]
8000f89a:	f7 78 80 00 	stcond	r11[-32768],r8
8000f89e:	ed a8 80 00 	ldcm.w	cp4,r8,
8000f8a2:	f7 60 80 00 	st.b	r11[-32768],r0
8000f8a6:	f6 58 80 00 	cp.w	r8,-557056
8000f8aa:	f3 88       	*unknown*

8000f8ac <_realloc_r>:
8000f8ac:	d4 31       	pushm	r0-r7,lr
8000f8ae:	20 1d       	sub	sp,4
8000f8b0:	16 94       	mov	r4,r11
8000f8b2:	18 92       	mov	r2,r12
8000f8b4:	14 9b       	mov	r11,r10
8000f8b6:	58 04       	cp.w	r4,0
8000f8b8:	c0 51       	brne	8000f8c2 <_realloc_r+0x16>
8000f8ba:	f0 1f 00 5b 	mcall	8000fa24 <_realloc_r+0x178>
8000f8be:	18 95       	mov	r5,r12
8000f8c0:	c5 b9       	rjmp	8000fb76 <_realloc_r+0x2ca>
8000f8c2:	50 0a       	stdsp	sp[0x0],r10
8000f8c4:	f0 1f 00 59 	mcall	8000fa28 <_realloc_r+0x17c>
8000f8c8:	40 0b       	lddsp	r11,sp[0x0]
8000f8ca:	f6 c8 ff f5 	sub	r8,r11,-11
8000f8ce:	e8 c1 00 08 	sub	r1,r4,8
8000f8d2:	10 96       	mov	r6,r8
8000f8d4:	62 1c       	ld.w	r12,r1[0x4]
8000f8d6:	e0 16 ff f8 	andl	r6,0xfff8
8000f8da:	59 68       	cp.w	r8,22
8000f8dc:	f9 b6 08 10 	movls	r6,16
8000f8e0:	16 36       	cp.w	r6,r11
8000f8e2:	5f 38       	srlo	r8
8000f8e4:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000f8e8:	c0 50       	breq	8000f8f2 <_realloc_r+0x46>
8000f8ea:	30 c8       	mov	r8,12
8000f8ec:	30 05       	mov	r5,0
8000f8ee:	85 38       	st.w	r2[0xc],r8
8000f8f0:	c4 39       	rjmp	8000fb76 <_realloc_r+0x2ca>
8000f8f2:	18 90       	mov	r0,r12
8000f8f4:	e0 10 ff fc 	andl	r0,0xfffc
8000f8f8:	0c 30       	cp.w	r0,r6
8000f8fa:	e0 84 01 13 	brge	8000fb20 <_realloc_r+0x274>
8000f8fe:	4c c8       	lddpc	r8,8000fa2c <_realloc_r+0x180>
8000f900:	e2 00 00 09 	add	r9,r1,r0
8000f904:	70 25       	ld.w	r5,r8[0x8]
8000f906:	0a 39       	cp.w	r9,r5
8000f908:	c0 90       	breq	8000f91a <_realloc_r+0x6e>
8000f90a:	72 1a       	ld.w	r10,r9[0x4]
8000f90c:	a1 ca       	cbr	r10,0x0
8000f90e:	f2 0a 00 0a 	add	r10,r9,r10
8000f912:	74 1a       	ld.w	r10,r10[0x4]
8000f914:	ed ba 00 00 	bld	r10,0x0
8000f918:	c2 20       	breq	8000f95c <_realloc_r+0xb0>
8000f91a:	72 1a       	ld.w	r10,r9[0x4]
8000f91c:	e0 1a ff fc 	andl	r10,0xfffc
8000f920:	f4 00 00 03 	add	r3,r10,r0
8000f924:	0a 39       	cp.w	r9,r5
8000f926:	c1 31       	brne	8000f94c <_realloc_r+0xa0>
8000f928:	ec c7 ff f0 	sub	r7,r6,-16
8000f92c:	0e 33       	cp.w	r3,r7
8000f92e:	c1 95       	brlt	8000f960 <_realloc_r+0xb4>
8000f930:	e2 06 00 09 	add	r9,r1,r6
8000f934:	0c 13       	sub	r3,r6
8000f936:	a1 a3       	sbr	r3,0x0
8000f938:	93 13       	st.w	r9[0x4],r3
8000f93a:	91 29       	st.w	r8[0x8],r9
8000f93c:	04 9c       	mov	r12,r2
8000f93e:	62 18       	ld.w	r8,r1[0x4]
8000f940:	08 95       	mov	r5,r4
8000f942:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000f946:	10 46       	or	r6,r8
8000f948:	83 16       	st.w	r1[0x4],r6
8000f94a:	c1 49       	rjmp	8000fb72 <_realloc_r+0x2c6>
8000f94c:	0c 33       	cp.w	r3,r6
8000f94e:	c0 95       	brlt	8000f960 <_realloc_r+0xb4>
8000f950:	72 28       	ld.w	r8,r9[0x8]
8000f952:	02 97       	mov	r7,r1
8000f954:	72 39       	ld.w	r9,r9[0xc]
8000f956:	93 28       	st.w	r9[0x8],r8
8000f958:	91 39       	st.w	r8[0xc],r9
8000f95a:	ce 58       	rjmp	8000fb24 <_realloc_r+0x278>
8000f95c:	30 0a       	mov	r10,0
8000f95e:	14 99       	mov	r9,r10
8000f960:	ed bc 00 00 	bld	r12,0x0
8000f964:	e0 80 00 9e 	breq	8000faa0 <_realloc_r+0x1f4>
8000f968:	62 07       	ld.w	r7,r1[0x0]
8000f96a:	e2 07 01 07 	sub	r7,r1,r7
8000f96e:	6e 1c       	ld.w	r12,r7[0x4]
8000f970:	e0 1c ff fc 	andl	r12,0xfffc
8000f974:	58 09       	cp.w	r9,0
8000f976:	c5 f0       	breq	8000fa34 <_realloc_r+0x188>
8000f978:	f8 00 00 03 	add	r3,r12,r0
8000f97c:	0a 39       	cp.w	r9,r5
8000f97e:	c4 81       	brne	8000fa0e <_realloc_r+0x162>
8000f980:	14 03       	add	r3,r10
8000f982:	ec c9 ff f0 	sub	r9,r6,-16
8000f986:	12 33       	cp.w	r3,r9
8000f988:	c5 65       	brlt	8000fa34 <_realloc_r+0x188>
8000f98a:	6e 3a       	ld.w	r10,r7[0xc]
8000f98c:	6e 29       	ld.w	r9,r7[0x8]
8000f98e:	95 29       	st.w	r10[0x8],r9
8000f990:	93 3a       	st.w	r9[0xc],r10
8000f992:	ee c5 ff f8 	sub	r5,r7,-8
8000f996:	e0 ca 00 04 	sub	r10,r0,4
8000f99a:	e0 4a 00 24 	cp.w	r10,36
8000f99e:	e0 8b 00 25 	brhi	8000f9e8 <_realloc_r+0x13c>
8000f9a2:	0a 99       	mov	r9,r5
8000f9a4:	59 3a       	cp.w	r10,19
8000f9a6:	e0 88 00 1a 	brls	8000f9da <_realloc_r+0x12e>
8000f9aa:	09 09       	ld.w	r9,r4++
8000f9ac:	8b 09       	st.w	r5[0x0],r9
8000f9ae:	09 09       	ld.w	r9,r4++
8000f9b0:	8f 39       	st.w	r7[0xc],r9
8000f9b2:	ee c9 ff f0 	sub	r9,r7,-16
8000f9b6:	59 ba       	cp.w	r10,27
8000f9b8:	e0 88 00 11 	brls	8000f9da <_realloc_r+0x12e>
8000f9bc:	09 0b       	ld.w	r11,r4++
8000f9be:	93 0b       	st.w	r9[0x0],r11
8000f9c0:	09 09       	ld.w	r9,r4++
8000f9c2:	8f 59       	st.w	r7[0x14],r9
8000f9c4:	ee c9 ff e8 	sub	r9,r7,-24
8000f9c8:	e0 4a 00 24 	cp.w	r10,36
8000f9cc:	c0 71       	brne	8000f9da <_realloc_r+0x12e>
8000f9ce:	09 0a       	ld.w	r10,r4++
8000f9d0:	93 0a       	st.w	r9[0x0],r10
8000f9d2:	ee c9 ff e0 	sub	r9,r7,-32
8000f9d6:	09 0a       	ld.w	r10,r4++
8000f9d8:	8f 7a       	st.w	r7[0x1c],r10
8000f9da:	09 0a       	ld.w	r10,r4++
8000f9dc:	12 aa       	st.w	r9++,r10
8000f9de:	68 0a       	ld.w	r10,r4[0x0]
8000f9e0:	93 0a       	st.w	r9[0x0],r10
8000f9e2:	68 1a       	ld.w	r10,r4[0x4]
8000f9e4:	93 1a       	st.w	r9[0x4],r10
8000f9e6:	c0 78       	rjmp	8000f9f4 <_realloc_r+0x148>
8000f9e8:	50 08       	stdsp	sp[0x0],r8
8000f9ea:	08 9b       	mov	r11,r4
8000f9ec:	0a 9c       	mov	r12,r5
8000f9ee:	f0 1f 00 11 	mcall	8000fa30 <_realloc_r+0x184>
8000f9f2:	40 08       	lddsp	r8,sp[0x0]
8000f9f4:	ee 06 00 09 	add	r9,r7,r6
8000f9f8:	0c 13       	sub	r3,r6
8000f9fa:	a1 a3       	sbr	r3,0x0
8000f9fc:	93 13       	st.w	r9[0x4],r3
8000f9fe:	91 29       	st.w	r8[0x8],r9
8000fa00:	04 9c       	mov	r12,r2
8000fa02:	6e 18       	ld.w	r8,r7[0x4]
8000fa04:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000fa08:	10 46       	or	r6,r8
8000fa0a:	8f 16       	st.w	r7[0x4],r6
8000fa0c:	cb 38       	rjmp	8000fb72 <_realloc_r+0x2c6>
8000fa0e:	14 03       	add	r3,r10
8000fa10:	0c 33       	cp.w	r3,r6
8000fa12:	c1 15       	brlt	8000fa34 <_realloc_r+0x188>
8000fa14:	72 28       	ld.w	r8,r9[0x8]
8000fa16:	72 39       	ld.w	r9,r9[0xc]
8000fa18:	93 28       	st.w	r9[0x8],r8
8000fa1a:	91 39       	st.w	r8[0xc],r9
8000fa1c:	6e 28       	ld.w	r8,r7[0x8]
8000fa1e:	6e 39       	ld.w	r9,r7[0xc]
8000fa20:	c1 08       	rjmp	8000fa40 <_realloc_r+0x194>
8000fa22:	00 00       	add	r0,r0
8000fa24:	80 00       	ld.sh	r0,r0[0x0]
8000fa26:	ed c0 80 00 	stmts	r0,pc
8000fa2a:	f2 64 00 00 	mov	r4,-917504
8000fa2e:	01 a8       	ld.ub	r8,r0[0x2]
8000fa30:	80 00       	ld.sh	r0,r0[0x0]
8000fa32:	f2 26 f8 00 	sub	r6,-854016
8000fa36:	00 03       	add	r3,r0
8000fa38:	0c 33       	cp.w	r3,r6
8000fa3a:	c3 35       	brlt	8000faa0 <_realloc_r+0x1f4>
8000fa3c:	6e 39       	ld.w	r9,r7[0xc]
8000fa3e:	6e 28       	ld.w	r8,r7[0x8]
8000fa40:	93 28       	st.w	r9[0x8],r8
8000fa42:	91 39       	st.w	r8[0xc],r9
8000fa44:	e0 ca 00 04 	sub	r10,r0,4
8000fa48:	ee cc ff f8 	sub	r12,r7,-8
8000fa4c:	e0 4a 00 24 	cp.w	r10,36
8000fa50:	e0 8b 00 24 	brhi	8000fa98 <_realloc_r+0x1ec>
8000fa54:	59 3a       	cp.w	r10,19
8000fa56:	e0 88 00 1a 	brls	8000fa8a <_realloc_r+0x1de>
8000fa5a:	09 08       	ld.w	r8,r4++
8000fa5c:	99 08       	st.w	r12[0x0],r8
8000fa5e:	09 08       	ld.w	r8,r4++
8000fa60:	8f 38       	st.w	r7[0xc],r8
8000fa62:	ee cc ff f0 	sub	r12,r7,-16
8000fa66:	59 ba       	cp.w	r10,27
8000fa68:	e0 88 00 11 	brls	8000fa8a <_realloc_r+0x1de>
8000fa6c:	09 08       	ld.w	r8,r4++
8000fa6e:	99 08       	st.w	r12[0x0],r8
8000fa70:	09 08       	ld.w	r8,r4++
8000fa72:	8f 58       	st.w	r7[0x14],r8
8000fa74:	ee cc ff e8 	sub	r12,r7,-24
8000fa78:	e0 4a 00 24 	cp.w	r10,36
8000fa7c:	c0 71       	brne	8000fa8a <_realloc_r+0x1de>
8000fa7e:	09 08       	ld.w	r8,r4++
8000fa80:	99 08       	st.w	r12[0x0],r8
8000fa82:	ee cc ff e0 	sub	r12,r7,-32
8000fa86:	09 08       	ld.w	r8,r4++
8000fa88:	8f 78       	st.w	r7[0x1c],r8
8000fa8a:	09 08       	ld.w	r8,r4++
8000fa8c:	18 a8       	st.w	r12++,r8
8000fa8e:	68 08       	ld.w	r8,r4[0x0]
8000fa90:	99 08       	st.w	r12[0x0],r8
8000fa92:	68 18       	ld.w	r8,r4[0x4]
8000fa94:	99 18       	st.w	r12[0x4],r8
8000fa96:	c4 78       	rjmp	8000fb24 <_realloc_r+0x278>
8000fa98:	08 9b       	mov	r11,r4
8000fa9a:	f0 1f 00 39 	mcall	8000fb7c <_realloc_r+0x2d0>
8000fa9e:	c4 38       	rjmp	8000fb24 <_realloc_r+0x278>
8000faa0:	04 9c       	mov	r12,r2
8000faa2:	f0 1f 00 38 	mcall	8000fb80 <_realloc_r+0x2d4>
8000faa6:	18 95       	mov	r5,r12
8000faa8:	c3 a0       	breq	8000fb1c <_realloc_r+0x270>
8000faaa:	62 18       	ld.w	r8,r1[0x4]
8000faac:	f8 c9 00 08 	sub	r9,r12,8
8000fab0:	a1 c8       	cbr	r8,0x0
8000fab2:	e2 08 00 08 	add	r8,r1,r8
8000fab6:	10 39       	cp.w	r9,r8
8000fab8:	c0 71       	brne	8000fac6 <_realloc_r+0x21a>
8000faba:	72 13       	ld.w	r3,r9[0x4]
8000fabc:	02 97       	mov	r7,r1
8000fabe:	e0 13 ff fc 	andl	r3,0xfffc
8000fac2:	00 03       	add	r3,r0
8000fac4:	c3 08       	rjmp	8000fb24 <_realloc_r+0x278>
8000fac6:	e0 ca 00 04 	sub	r10,r0,4
8000faca:	e0 4a 00 24 	cp.w	r10,36
8000face:	e0 8b 00 20 	brhi	8000fb0e <_realloc_r+0x262>
8000fad2:	08 99       	mov	r9,r4
8000fad4:	18 98       	mov	r8,r12
8000fad6:	59 3a       	cp.w	r10,19
8000fad8:	e0 88 00 14 	brls	8000fb00 <_realloc_r+0x254>
8000fadc:	13 0b       	ld.w	r11,r9++
8000fade:	10 ab       	st.w	r8++,r11
8000fae0:	13 0b       	ld.w	r11,r9++
8000fae2:	10 ab       	st.w	r8++,r11
8000fae4:	59 ba       	cp.w	r10,27
8000fae6:	e0 88 00 0d 	brls	8000fb00 <_realloc_r+0x254>
8000faea:	13 0b       	ld.w	r11,r9++
8000faec:	10 ab       	st.w	r8++,r11
8000faee:	13 0b       	ld.w	r11,r9++
8000faf0:	10 ab       	st.w	r8++,r11
8000faf2:	e0 4a 00 24 	cp.w	r10,36
8000faf6:	c0 51       	brne	8000fb00 <_realloc_r+0x254>
8000faf8:	13 0a       	ld.w	r10,r9++
8000fafa:	10 aa       	st.w	r8++,r10
8000fafc:	13 0a       	ld.w	r10,r9++
8000fafe:	10 aa       	st.w	r8++,r10
8000fb00:	13 0a       	ld.w	r10,r9++
8000fb02:	10 aa       	st.w	r8++,r10
8000fb04:	72 0a       	ld.w	r10,r9[0x0]
8000fb06:	91 0a       	st.w	r8[0x0],r10
8000fb08:	72 19       	ld.w	r9,r9[0x4]
8000fb0a:	91 19       	st.w	r8[0x4],r9
8000fb0c:	c0 48       	rjmp	8000fb14 <_realloc_r+0x268>
8000fb0e:	08 9b       	mov	r11,r4
8000fb10:	f0 1f 00 1b 	mcall	8000fb7c <_realloc_r+0x2d0>
8000fb14:	08 9b       	mov	r11,r4
8000fb16:	04 9c       	mov	r12,r2
8000fb18:	f0 1f 00 1b 	mcall	8000fb84 <_realloc_r+0x2d8>
8000fb1c:	04 9c       	mov	r12,r2
8000fb1e:	c2 a8       	rjmp	8000fb72 <_realloc_r+0x2c6>
8000fb20:	00 93       	mov	r3,r0
8000fb22:	02 97       	mov	r7,r1
8000fb24:	e6 06 01 09 	sub	r9,r3,r6
8000fb28:	6e 18       	ld.w	r8,r7[0x4]
8000fb2a:	58 f9       	cp.w	r9,15
8000fb2c:	e0 88 00 16 	brls	8000fb58 <_realloc_r+0x2ac>
8000fb30:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000fb34:	ed e8 10 08 	or	r8,r6,r8
8000fb38:	8f 18       	st.w	r7[0x4],r8
8000fb3a:	12 98       	mov	r8,r9
8000fb3c:	a1 a8       	sbr	r8,0x0
8000fb3e:	ee 06 00 0b 	add	r11,r7,r6
8000fb42:	f6 09 00 09 	add	r9,r11,r9
8000fb46:	97 18       	st.w	r11[0x4],r8
8000fb48:	72 18       	ld.w	r8,r9[0x4]
8000fb4a:	a1 a8       	sbr	r8,0x0
8000fb4c:	2f 8b       	sub	r11,-8
8000fb4e:	93 18       	st.w	r9[0x4],r8
8000fb50:	04 9c       	mov	r12,r2
8000fb52:	f0 1f 00 0d 	mcall	8000fb84 <_realloc_r+0x2d8>
8000fb56:	c0 b8       	rjmp	8000fb6c <_realloc_r+0x2c0>
8000fb58:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000fb5c:	e7 e8 10 08 	or	r8,r3,r8
8000fb60:	8f 18       	st.w	r7[0x4],r8
8000fb62:	ee 03 00 03 	add	r3,r7,r3
8000fb66:	66 18       	ld.w	r8,r3[0x4]
8000fb68:	a1 a8       	sbr	r8,0x0
8000fb6a:	87 18       	st.w	r3[0x4],r8
8000fb6c:	04 9c       	mov	r12,r2
8000fb6e:	ee c5 ff f8 	sub	r5,r7,-8
8000fb72:	f0 1f 00 06 	mcall	8000fb88 <_realloc_r+0x2dc>
8000fb76:	0a 9c       	mov	r12,r5
8000fb78:	2f fd       	sub	sp,-4
8000fb7a:	d8 32       	popm	r0-r7,pc
8000fb7c:	80 00       	ld.sh	r0,r0[0x0]
8000fb7e:	f2 26 80 00 	sub	r6,-884736
8000fb82:	ed c0 80 00 	stmts	r0,pc
8000fb86:	e8 1c 80 00 	orl	r12,0x8000
8000fb8a:	f2 66 14 98 	mov	r6,-912232

8000fb8c <__isinfd>:
8000fb8c:	14 98       	mov	r8,r10
8000fb8e:	fc 19 7f f0 	movh	r9,0x7ff0
8000fb92:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000fb96:	f0 0b 11 00 	rsub	r11,r8,0
8000fb9a:	f7 e8 10 08 	or	r8,r11,r8
8000fb9e:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000fba2:	f2 08 01 08 	sub	r8,r9,r8
8000fba6:	f0 0c 11 00 	rsub	r12,r8,0
8000fbaa:	f9 e8 10 08 	or	r8,r12,r8
8000fbae:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000fbb2:	2f fc       	sub	r12,-1
8000fbb4:	5e fc       	retal	r12

8000fbb6 <__isnand>:
8000fbb6:	14 98       	mov	r8,r10
8000fbb8:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000fbbc:	f0 0c 11 00 	rsub	r12,r8,0
8000fbc0:	10 4c       	or	r12,r8
8000fbc2:	fc 18 7f f0 	movh	r8,0x7ff0
8000fbc6:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000fbca:	f0 0c 01 0c 	sub	r12,r8,r12
8000fbce:	bf 9c       	lsr	r12,0x1f
8000fbd0:	5e fc       	retal	r12
8000fbd2:	d7 03       	nop

8000fbd4 <_sbrk_r>:
8000fbd4:	d4 21       	pushm	r4-r7,lr
8000fbd6:	30 08       	mov	r8,0
8000fbd8:	18 97       	mov	r7,r12
8000fbda:	48 76       	lddpc	r6,8000fbf4 <_sbrk_r+0x20>
8000fbdc:	16 9c       	mov	r12,r11
8000fbde:	8d 08       	st.w	r6[0x0],r8
8000fbe0:	f0 1f 00 06 	mcall	8000fbf8 <_sbrk_r+0x24>
8000fbe4:	5b fc       	cp.w	r12,-1
8000fbe6:	c0 51       	brne	8000fbf0 <_sbrk_r+0x1c>
8000fbe8:	6c 08       	ld.w	r8,r6[0x0]
8000fbea:	58 08       	cp.w	r8,0
8000fbec:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000fbf0:	d8 22       	popm	r4-r7,pc
8000fbf2:	00 00       	add	r0,r0
8000fbf4:	00 00       	add	r0,r0
8000fbf6:	15 d0       	ld.ub	r0,r10[0x5]
8000fbf8:	80 00       	ld.sh	r0,r0[0x0]
8000fbfa:	fd 70 d4 01 	stcond	lr[-11263],r0

8000fbfc <__sclose>:
8000fbfc:	d4 01       	pushm	lr
8000fbfe:	96 7b       	ld.sh	r11,r11[0xe]
8000fc00:	f0 1f 00 02 	mcall	8000fc08 <__sclose+0xc>
8000fc04:	d8 02       	popm	pc
8000fc06:	00 00       	add	r0,r0
8000fc08:	80 00       	ld.sh	r0,r0[0x0]
8000fc0a:	fe 3c d4 21 	sub	r12,-11231

8000fc0c <__sseek>:
8000fc0c:	d4 21       	pushm	r4-r7,lr
8000fc0e:	16 97       	mov	r7,r11
8000fc10:	96 7b       	ld.sh	r11,r11[0xe]
8000fc12:	f0 1f 00 08 	mcall	8000fc30 <__sseek+0x24>
8000fc16:	8e 68       	ld.sh	r8,r7[0xc]
8000fc18:	10 99       	mov	r9,r8
8000fc1a:	ad c8       	cbr	r8,0xc
8000fc1c:	ad a9       	sbr	r9,0xc
8000fc1e:	5b fc       	cp.w	r12,-1
8000fc20:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000fc24:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000fc28:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000fc2c:	d8 22       	popm	r4-r7,pc
8000fc2e:	00 00       	add	r0,r0
8000fc30:	80 00       	ld.sh	r0,r0[0x0]
8000fc32:	ff 84       	*unknown*

8000fc34 <__swrite>:
8000fc34:	d4 21       	pushm	r4-r7,lr
8000fc36:	96 68       	ld.sh	r8,r11[0xc]
8000fc38:	16 97       	mov	r7,r11
8000fc3a:	14 95       	mov	r5,r10
8000fc3c:	12 94       	mov	r4,r9
8000fc3e:	e2 18 01 00 	andl	r8,0x100,COH
8000fc42:	18 96       	mov	r6,r12
8000fc44:	c0 60       	breq	8000fc50 <__swrite+0x1c>
8000fc46:	30 29       	mov	r9,2
8000fc48:	30 0a       	mov	r10,0
8000fc4a:	96 7b       	ld.sh	r11,r11[0xe]
8000fc4c:	f0 1f 00 06 	mcall	8000fc64 <__swrite+0x30>
8000fc50:	8e 68       	ld.sh	r8,r7[0xc]
8000fc52:	ad c8       	cbr	r8,0xc
8000fc54:	08 99       	mov	r9,r4
8000fc56:	0a 9a       	mov	r10,r5
8000fc58:	8e 7b       	ld.sh	r11,r7[0xe]
8000fc5a:	0c 9c       	mov	r12,r6
8000fc5c:	ae 68       	st.h	r7[0xc],r8
8000fc5e:	f0 1f 00 03 	mcall	8000fc68 <__swrite+0x34>
8000fc62:	d8 22       	popm	r4-r7,pc
8000fc64:	80 00       	ld.sh	r0,r0[0x0]
8000fc66:	ff 84       	*unknown*
8000fc68:	80 00       	ld.sh	r0,r0[0x0]
8000fc6a:	fd b0       	*unknown*

8000fc6c <__sread>:
8000fc6c:	d4 21       	pushm	r4-r7,lr
8000fc6e:	16 97       	mov	r7,r11
8000fc70:	96 7b       	ld.sh	r11,r11[0xe]
8000fc72:	f0 1f 00 07 	mcall	8000fc8c <__sread+0x20>
8000fc76:	c0 65       	brlt	8000fc82 <__sread+0x16>
8000fc78:	6f 58       	ld.w	r8,r7[0x54]
8000fc7a:	18 08       	add	r8,r12
8000fc7c:	ef 48 00 54 	st.w	r7[84],r8
8000fc80:	d8 22       	popm	r4-r7,pc
8000fc82:	8e 68       	ld.sh	r8,r7[0xc]
8000fc84:	ad c8       	cbr	r8,0xc
8000fc86:	ae 68       	st.h	r7[0xc],r8
8000fc88:	d8 22       	popm	r4-r7,pc
8000fc8a:	00 00       	add	r0,r0
8000fc8c:	80 00       	ld.sh	r0,r0[0x0]
8000fc8e:	ff b0       	*unknown*

8000fc90 <_close>:
8000fc90:	30 28       	mov	r8,2
8000fc92:	d6 73       	breakpoint
8000fc94:	3f fc       	mov	r12,-1
8000fc96:	35 8b       	mov	r11,88
8000fc98:	58 0c       	cp.w	r12,0
8000fc9a:	5e 4c       	retge	r12
8000fc9c:	48 2a       	lddpc	r10,8000fca4 <_close+0x14>
8000fc9e:	95 0b       	st.w	r10[0x0],r11
8000fca0:	5e fc       	retal	r12
8000fca2:	00 00       	add	r0,r0
8000fca4:	00 00       	add	r0,r0
8000fca6:	15 d0       	ld.ub	r0,r10[0x5]

8000fca8 <_lseek>:
8000fca8:	30 58       	mov	r8,5
8000fcaa:	d6 73       	breakpoint
8000fcac:	3f fc       	mov	r12,-1
8000fcae:	35 8b       	mov	r11,88
8000fcb0:	58 0c       	cp.w	r12,0
8000fcb2:	5e 4c       	retge	r12
8000fcb4:	48 2a       	lddpc	r10,8000fcbc <_lseek+0x14>
8000fcb6:	95 0b       	st.w	r10[0x0],r11
8000fcb8:	5e fc       	retal	r12
8000fcba:	00 00       	add	r0,r0
8000fcbc:	00 00       	add	r0,r0
8000fcbe:	15 d0       	ld.ub	r0,r10[0x5]

8000fcc0 <_read>:
8000fcc0:	30 38       	mov	r8,3
8000fcc2:	d6 73       	breakpoint
8000fcc4:	3f fc       	mov	r12,-1
8000fcc6:	35 8b       	mov	r11,88
8000fcc8:	58 0c       	cp.w	r12,0
8000fcca:	5e 4c       	retge	r12
8000fccc:	48 2a       	lddpc	r10,8000fcd4 <_read+0x14>
8000fcce:	95 0b       	st.w	r10[0x0],r11
8000fcd0:	5e fc       	retal	r12
8000fcd2:	00 00       	add	r0,r0
8000fcd4:	00 00       	add	r0,r0
8000fcd6:	15 d0       	ld.ub	r0,r10[0x5]

8000fcd8 <_write>:
8000fcd8:	30 48       	mov	r8,4
8000fcda:	d6 73       	breakpoint
8000fcdc:	3f fc       	mov	r12,-1
8000fcde:	35 8b       	mov	r11,88
8000fce0:	58 0c       	cp.w	r12,0
8000fce2:	5e 4c       	retge	r12
8000fce4:	48 2a       	lddpc	r10,8000fcec <_write+0x14>
8000fce6:	95 0b       	st.w	r10[0x0],r11
8000fce8:	5e fc       	retal	r12
8000fcea:	00 00       	add	r0,r0
8000fcec:	00 00       	add	r0,r0
8000fcee:	15 d0       	ld.ub	r0,r10[0x5]

8000fcf0 <isatty>:
8000fcf0:	30 b8       	mov	r8,11
8000fcf2:	d6 73       	breakpoint
8000fcf4:	3f fc       	mov	r12,-1
8000fcf6:	35 8b       	mov	r11,88
8000fcf8:	58 0c       	cp.w	r12,0
8000fcfa:	5e 4c       	retge	r12
8000fcfc:	48 2a       	lddpc	r10,8000fd04 <isatty+0x14>
8000fcfe:	95 0b       	st.w	r10[0x0],r11
8000fd00:	5e fc       	retal	r12
8000fd02:	00 00       	add	r0,r0
8000fd04:	00 00       	add	r0,r0
8000fd06:	15 d0       	ld.ub	r0,r10[0x5]

8000fd08 <_fstat_host>:
8000fd08:	30 98       	mov	r8,9
8000fd0a:	d6 73       	breakpoint
8000fd0c:	3f fc       	mov	r12,-1
8000fd0e:	35 8b       	mov	r11,88
8000fd10:	58 0c       	cp.w	r12,0
8000fd12:	5e 4c       	retge	r12
8000fd14:	48 2a       	lddpc	r10,8000fd1c <_fstat_host+0x14>
8000fd16:	95 0b       	st.w	r10[0x0],r11
8000fd18:	5e fc       	retal	r12
8000fd1a:	00 00       	add	r0,r0
8000fd1c:	00 00       	add	r0,r0
8000fd1e:	15 d0       	ld.ub	r0,r10[0x5]

8000fd20 <_fstat>:
8000fd20:	d4 21       	pushm	r4-r7,lr
8000fd22:	21 0d       	sub	sp,64
8000fd24:	16 97       	mov	r7,r11
8000fd26:	1a 9b       	mov	r11,sp
8000fd28:	f0 1f 00 11 	mcall	8000fd6c <_fstat+0x4c>
8000fd2c:	c0 34       	brge	8000fd32 <_fstat+0x12>
8000fd2e:	3f fc       	mov	r12,-1
8000fd30:	c1 c8       	rjmp	8000fd68 <_fstat+0x48>
8000fd32:	40 08       	lddsp	r8,sp[0x0]
8000fd34:	ae 08       	st.h	r7[0x0],r8
8000fd36:	40 18       	lddsp	r8,sp[0x4]
8000fd38:	ae 18       	st.h	r7[0x2],r8
8000fd3a:	40 28       	lddsp	r8,sp[0x8]
8000fd3c:	8f 18       	st.w	r7[0x4],r8
8000fd3e:	40 38       	lddsp	r8,sp[0xc]
8000fd40:	ae 48       	st.h	r7[0x8],r8
8000fd42:	40 48       	lddsp	r8,sp[0x10]
8000fd44:	ae 58       	st.h	r7[0xa],r8
8000fd46:	40 58       	lddsp	r8,sp[0x14]
8000fd48:	ae 68       	st.h	r7[0xc],r8
8000fd4a:	40 68       	lddsp	r8,sp[0x18]
8000fd4c:	ae 78       	st.h	r7[0xe],r8
8000fd4e:	40 88       	lddsp	r8,sp[0x20]
8000fd50:	8f 48       	st.w	r7[0x10],r8
8000fd52:	40 a8       	lddsp	r8,sp[0x28]
8000fd54:	8f b8       	st.w	r7[0x2c],r8
8000fd56:	40 c8       	lddsp	r8,sp[0x30]
8000fd58:	8f c8       	st.w	r7[0x30],r8
8000fd5a:	40 d8       	lddsp	r8,sp[0x34]
8000fd5c:	8f 58       	st.w	r7[0x14],r8
8000fd5e:	40 e8       	lddsp	r8,sp[0x38]
8000fd60:	30 0c       	mov	r12,0
8000fd62:	8f 78       	st.w	r7[0x1c],r8
8000fd64:	40 f8       	lddsp	r8,sp[0x3c]
8000fd66:	8f 98       	st.w	r7[0x24],r8
8000fd68:	2f 0d       	sub	sp,-64
8000fd6a:	d8 22       	popm	r4-r7,pc
8000fd6c:	80 00       	ld.sh	r0,r0[0x0]
8000fd6e:	fd 08 d4 01 	ld.sh	r8,lr[-11263]

8000fd70 <_sbrk>:
8000fd70:	d4 01       	pushm	lr
8000fd72:	48 c8       	lddpc	r8,8000fda0 <_sbrk+0x30>
8000fd74:	70 09       	ld.w	r9,r8[0x0]
8000fd76:	58 09       	cp.w	r9,0
8000fd78:	c0 31       	brne	8000fd7e <_sbrk+0xe>
8000fd7a:	48 b9       	lddpc	r9,8000fda4 <_sbrk+0x34>
8000fd7c:	91 09       	st.w	r8[0x0],r9
8000fd7e:	48 99       	lddpc	r9,8000fda0 <_sbrk+0x30>
8000fd80:	48 aa       	lddpc	r10,8000fda8 <_sbrk+0x38>
8000fd82:	72 08       	ld.w	r8,r9[0x0]
8000fd84:	f0 0c 00 0c 	add	r12,r8,r12
8000fd88:	14 3c       	cp.w	r12,r10
8000fd8a:	e0 8b 00 04 	brhi	8000fd92 <_sbrk+0x22>
8000fd8e:	93 0c       	st.w	r9[0x0],r12
8000fd90:	c0 68       	rjmp	8000fd9c <_sbrk+0x2c>
8000fd92:	f0 1f 00 07 	mcall	8000fdac <_sbrk+0x3c>
8000fd96:	30 c8       	mov	r8,12
8000fd98:	99 08       	st.w	r12[0x0],r8
8000fd9a:	3f f8       	mov	r8,-1
8000fd9c:	10 9c       	mov	r12,r8
8000fd9e:	d8 02       	popm	pc
8000fda0:	00 00       	add	r0,r0
8000fda2:	07 ec       	ld.ub	r12,r3[0x6]
8000fda4:	00 00       	add	r0,r0
8000fda6:	15 d8       	ld.ub	r8,r10[0x5]
8000fda8:	00 00       	add	r0,r0
8000fdaa:	f0 00       	*unknown*
8000fdac:	80 00       	ld.sh	r0,r0[0x0]
8000fdae:	fe 64 d4 21 	mov	r4,-76767

8000fdb0 <_write_r>:
8000fdb0:	d4 21       	pushm	r4-r7,lr
8000fdb2:	16 98       	mov	r8,r11
8000fdb4:	18 97       	mov	r7,r12
8000fdb6:	10 9c       	mov	r12,r8
8000fdb8:	30 08       	mov	r8,0
8000fdba:	14 9b       	mov	r11,r10
8000fdbc:	48 66       	lddpc	r6,8000fdd4 <_write_r+0x24>
8000fdbe:	12 9a       	mov	r10,r9
8000fdc0:	8d 08       	st.w	r6[0x0],r8
8000fdc2:	f0 1f 00 06 	mcall	8000fdd8 <_write_r+0x28>
8000fdc6:	5b fc       	cp.w	r12,-1
8000fdc8:	c0 51       	brne	8000fdd2 <_write_r+0x22>
8000fdca:	6c 08       	ld.w	r8,r6[0x0]
8000fdcc:	58 08       	cp.w	r8,0
8000fdce:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000fdd2:	d8 22       	popm	r4-r7,pc
8000fdd4:	00 00       	add	r0,r0
8000fdd6:	15 d0       	ld.ub	r0,r10[0x5]
8000fdd8:	80 00       	ld.sh	r0,r0[0x0]
8000fdda:	fc d8 d4 21 	satsub.w	r8,lr,-11231

8000fddc <_calloc_r>:
8000fddc:	d4 21       	pushm	r4-r7,lr
8000fdde:	f4 0b 02 4b 	mul	r11,r10,r11
8000fde2:	f0 1f 00 15 	mcall	8000fe34 <_calloc_r+0x58>
8000fde6:	18 97       	mov	r7,r12
8000fde8:	c2 30       	breq	8000fe2e <_calloc_r+0x52>
8000fdea:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000fdee:	e0 1a ff fc 	andl	r10,0xfffc
8000fdf2:	20 4a       	sub	r10,4
8000fdf4:	e0 4a 00 24 	cp.w	r10,36
8000fdf8:	e0 8b 00 18 	brhi	8000fe28 <_calloc_r+0x4c>
8000fdfc:	18 98       	mov	r8,r12
8000fdfe:	59 3a       	cp.w	r10,19
8000fe00:	e0 88 00 0f 	brls	8000fe1e <_calloc_r+0x42>
8000fe04:	30 09       	mov	r9,0
8000fe06:	10 a9       	st.w	r8++,r9
8000fe08:	10 a9       	st.w	r8++,r9
8000fe0a:	59 ba       	cp.w	r10,27
8000fe0c:	e0 88 00 09 	brls	8000fe1e <_calloc_r+0x42>
8000fe10:	10 a9       	st.w	r8++,r9
8000fe12:	10 a9       	st.w	r8++,r9
8000fe14:	e0 4a 00 24 	cp.w	r10,36
8000fe18:	c0 31       	brne	8000fe1e <_calloc_r+0x42>
8000fe1a:	10 a9       	st.w	r8++,r9
8000fe1c:	10 a9       	st.w	r8++,r9
8000fe1e:	30 09       	mov	r9,0
8000fe20:	10 a9       	st.w	r8++,r9
8000fe22:	91 19       	st.w	r8[0x4],r9
8000fe24:	91 09       	st.w	r8[0x0],r9
8000fe26:	c0 48       	rjmp	8000fe2e <_calloc_r+0x52>
8000fe28:	30 0b       	mov	r11,0
8000fe2a:	f0 1f 00 04 	mcall	8000fe38 <_calloc_r+0x5c>
8000fe2e:	0e 9c       	mov	r12,r7
8000fe30:	d8 22       	popm	r4-r7,pc
8000fe32:	00 00       	add	r0,r0
8000fe34:	80 00       	ld.sh	r0,r0[0x0]
8000fe36:	ed c0 80 00 	stmts	r0,pc
8000fe3a:	b2 6e       	st.h	r9[0xc],lr

8000fe3c <_close_r>:
8000fe3c:	d4 21       	pushm	r4-r7,lr
8000fe3e:	30 08       	mov	r8,0
8000fe40:	18 97       	mov	r7,r12
8000fe42:	48 76       	lddpc	r6,8000fe5c <_close_r+0x20>
8000fe44:	16 9c       	mov	r12,r11
8000fe46:	8d 08       	st.w	r6[0x0],r8
8000fe48:	f0 1f 00 06 	mcall	8000fe60 <_close_r+0x24>
8000fe4c:	5b fc       	cp.w	r12,-1
8000fe4e:	c0 51       	brne	8000fe58 <_close_r+0x1c>
8000fe50:	6c 08       	ld.w	r8,r6[0x0]
8000fe52:	58 08       	cp.w	r8,0
8000fe54:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000fe58:	d8 22       	popm	r4-r7,pc
8000fe5a:	00 00       	add	r0,r0
8000fe5c:	00 00       	add	r0,r0
8000fe5e:	15 d0       	ld.ub	r0,r10[0x5]
8000fe60:	80 00       	ld.sh	r0,r0[0x0]
8000fe62:	fc 90 48 28 	breq	7ffb8eb2 <_estack+0x7ffa8eb2>

8000fe64 <__errno>:
8000fe64:	48 28       	lddpc	r8,8000fe6c <__errno+0x8>
8000fe66:	70 0c       	ld.w	r12,r8[0x0]
8000fe68:	2f 4c       	sub	r12,-12
8000fe6a:	5e fc       	retal	r12
8000fe6c:	00 00       	add	r0,r0
8000fe6e:	01 a4       	ld.ub	r4,r0[0x2]

8000fe70 <_fclose_r>:
8000fe70:	d4 21       	pushm	r4-r7,lr
8000fe72:	18 96       	mov	r6,r12
8000fe74:	16 97       	mov	r7,r11
8000fe76:	58 0b       	cp.w	r11,0
8000fe78:	c0 31       	brne	8000fe7e <_fclose_r+0xe>
8000fe7a:	16 95       	mov	r5,r11
8000fe7c:	c5 08       	rjmp	8000ff1c <_fclose_r+0xac>
8000fe7e:	f0 1f 00 29 	mcall	8000ff20 <_fclose_r+0xb0>
8000fe82:	58 06       	cp.w	r6,0
8000fe84:	c0 70       	breq	8000fe92 <_fclose_r+0x22>
8000fe86:	6c 68       	ld.w	r8,r6[0x18]
8000fe88:	58 08       	cp.w	r8,0
8000fe8a:	c0 41       	brne	8000fe92 <_fclose_r+0x22>
8000fe8c:	0c 9c       	mov	r12,r6
8000fe8e:	f0 1f 00 26 	mcall	8000ff24 <_fclose_r+0xb4>
8000fe92:	4a 68       	lddpc	r8,8000ff28 <_fclose_r+0xb8>
8000fe94:	10 37       	cp.w	r7,r8
8000fe96:	c0 31       	brne	8000fe9c <_fclose_r+0x2c>
8000fe98:	6c 07       	ld.w	r7,r6[0x0]
8000fe9a:	c0 a8       	rjmp	8000feae <_fclose_r+0x3e>
8000fe9c:	4a 48       	lddpc	r8,8000ff2c <_fclose_r+0xbc>
8000fe9e:	10 37       	cp.w	r7,r8
8000fea0:	c0 31       	brne	8000fea6 <_fclose_r+0x36>
8000fea2:	6c 17       	ld.w	r7,r6[0x4]
8000fea4:	c0 58       	rjmp	8000feae <_fclose_r+0x3e>
8000fea6:	4a 38       	lddpc	r8,8000ff30 <_fclose_r+0xc0>
8000fea8:	10 37       	cp.w	r7,r8
8000feaa:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000feae:	8e 69       	ld.sh	r9,r7[0xc]
8000feb0:	30 08       	mov	r8,0
8000feb2:	f0 09 19 00 	cp.h	r9,r8
8000feb6:	c0 51       	brne	8000fec0 <_fclose_r+0x50>
8000feb8:	f0 1f 00 1f 	mcall	8000ff34 <_fclose_r+0xc4>
8000febc:	30 05       	mov	r5,0
8000febe:	c2 f8       	rjmp	8000ff1c <_fclose_r+0xac>
8000fec0:	0e 9b       	mov	r11,r7
8000fec2:	0c 9c       	mov	r12,r6
8000fec4:	f0 1f 00 1d 	mcall	8000ff38 <_fclose_r+0xc8>
8000fec8:	6e c8       	ld.w	r8,r7[0x30]
8000feca:	18 95       	mov	r5,r12
8000fecc:	58 08       	cp.w	r8,0
8000fece:	c0 60       	breq	8000feda <_fclose_r+0x6a>
8000fed0:	6e 8b       	ld.w	r11,r7[0x20]
8000fed2:	0c 9c       	mov	r12,r6
8000fed4:	5d 18       	icall	r8
8000fed6:	f9 b5 05 ff 	movlt	r5,-1
8000feda:	8e 68       	ld.sh	r8,r7[0xc]
8000fedc:	ed b8 00 07 	bld	r8,0x7
8000fee0:	c0 51       	brne	8000feea <_fclose_r+0x7a>
8000fee2:	6e 4b       	ld.w	r11,r7[0x10]
8000fee4:	0c 9c       	mov	r12,r6
8000fee6:	f0 1f 00 16 	mcall	8000ff3c <_fclose_r+0xcc>
8000feea:	6e db       	ld.w	r11,r7[0x34]
8000feec:	58 0b       	cp.w	r11,0
8000feee:	c0 a0       	breq	8000ff02 <_fclose_r+0x92>
8000fef0:	ee c8 ff bc 	sub	r8,r7,-68
8000fef4:	10 3b       	cp.w	r11,r8
8000fef6:	c0 40       	breq	8000fefe <_fclose_r+0x8e>
8000fef8:	0c 9c       	mov	r12,r6
8000fefa:	f0 1f 00 11 	mcall	8000ff3c <_fclose_r+0xcc>
8000fefe:	30 08       	mov	r8,0
8000ff00:	8f d8       	st.w	r7[0x34],r8
8000ff02:	6f 2b       	ld.w	r11,r7[0x48]
8000ff04:	58 0b       	cp.w	r11,0
8000ff06:	c0 70       	breq	8000ff14 <_fclose_r+0xa4>
8000ff08:	0c 9c       	mov	r12,r6
8000ff0a:	f0 1f 00 0d 	mcall	8000ff3c <_fclose_r+0xcc>
8000ff0e:	30 08       	mov	r8,0
8000ff10:	ef 48 00 48 	st.w	r7[72],r8
8000ff14:	30 08       	mov	r8,0
8000ff16:	ae 68       	st.h	r7[0xc],r8
8000ff18:	f0 1f 00 07 	mcall	8000ff34 <_fclose_r+0xc4>
8000ff1c:	0a 9c       	mov	r12,r5
8000ff1e:	d8 22       	popm	r4-r7,pc
8000ff20:	80 00       	ld.sh	r0,r0[0x0]
8000ff22:	e6 00       	*unknown*
8000ff24:	80 00       	ld.sh	r0,r0[0x0]
8000ff26:	e6 c4 80 01 	sub	r4,r3,-32767
8000ff2a:	10 38       	cp.w	r8,r8
8000ff2c:	80 01       	ld.sh	r1,r0[0x0]
8000ff2e:	10 58       	eor	r8,r8
8000ff30:	80 01       	ld.sh	r1,r0[0x0]
8000ff32:	10 78       	tst	r8,r8
8000ff34:	80 00       	ld.sh	r0,r0[0x0]
8000ff36:	e6 02       	*unknown*
8000ff38:	80 00       	ld.sh	r0,r0[0x0]
8000ff3a:	e4 e8 80 00 	ld.d	r8,r2[-32768]
8000ff3e:	e8 1c d4 01 	orl	r12,0xd401

8000ff40 <fclose>:
8000ff40:	d4 01       	pushm	lr
8000ff42:	48 48       	lddpc	r8,8000ff50 <fclose+0x10>
8000ff44:	18 9b       	mov	r11,r12
8000ff46:	70 0c       	ld.w	r12,r8[0x0]
8000ff48:	f0 1f 00 03 	mcall	8000ff54 <fclose+0x14>
8000ff4c:	d8 02       	popm	pc
8000ff4e:	00 00       	add	r0,r0
8000ff50:	00 00       	add	r0,r0
8000ff52:	01 a4       	ld.ub	r4,r0[0x2]
8000ff54:	80 00       	ld.sh	r0,r0[0x0]
8000ff56:	fe 70 d4 21 	mov	r0,-11231

8000ff58 <_fstat_r>:
8000ff58:	d4 21       	pushm	r4-r7,lr
8000ff5a:	16 98       	mov	r8,r11
8000ff5c:	18 97       	mov	r7,r12
8000ff5e:	10 9c       	mov	r12,r8
8000ff60:	30 08       	mov	r8,0
8000ff62:	48 76       	lddpc	r6,8000ff7c <_fstat_r+0x24>
8000ff64:	14 9b       	mov	r11,r10
8000ff66:	8d 08       	st.w	r6[0x0],r8
8000ff68:	f0 1f 00 06 	mcall	8000ff80 <_fstat_r+0x28>
8000ff6c:	5b fc       	cp.w	r12,-1
8000ff6e:	c0 51       	brne	8000ff78 <_fstat_r+0x20>
8000ff70:	6c 08       	ld.w	r8,r6[0x0]
8000ff72:	58 08       	cp.w	r8,0
8000ff74:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000ff78:	d8 22       	popm	r4-r7,pc
8000ff7a:	00 00       	add	r0,r0
8000ff7c:	00 00       	add	r0,r0
8000ff7e:	15 d0       	ld.ub	r0,r10[0x5]
8000ff80:	80 00       	ld.sh	r0,r0[0x0]
8000ff82:	fd 20 d4 21 	ld.sb	r0,lr[-11231]

8000ff84 <_lseek_r>:
8000ff84:	d4 21       	pushm	r4-r7,lr
8000ff86:	16 98       	mov	r8,r11
8000ff88:	18 97       	mov	r7,r12
8000ff8a:	10 9c       	mov	r12,r8
8000ff8c:	30 08       	mov	r8,0
8000ff8e:	14 9b       	mov	r11,r10
8000ff90:	48 66       	lddpc	r6,8000ffa8 <_lseek_r+0x24>
8000ff92:	12 9a       	mov	r10,r9
8000ff94:	8d 08       	st.w	r6[0x0],r8
8000ff96:	f0 1f 00 06 	mcall	8000ffac <_lseek_r+0x28>
8000ff9a:	5b fc       	cp.w	r12,-1
8000ff9c:	c0 51       	brne	8000ffa6 <_lseek_r+0x22>
8000ff9e:	6c 08       	ld.w	r8,r6[0x0]
8000ffa0:	58 08       	cp.w	r8,0
8000ffa2:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000ffa6:	d8 22       	popm	r4-r7,pc
8000ffa8:	00 00       	add	r0,r0
8000ffaa:	15 d0       	ld.ub	r0,r10[0x5]
8000ffac:	80 00       	ld.sh	r0,r0[0x0]
8000ffae:	fc a8       	*unknown*

8000ffb0 <_read_r>:
8000ffb0:	d4 21       	pushm	r4-r7,lr
8000ffb2:	16 98       	mov	r8,r11
8000ffb4:	18 97       	mov	r7,r12
8000ffb6:	10 9c       	mov	r12,r8
8000ffb8:	30 08       	mov	r8,0
8000ffba:	14 9b       	mov	r11,r10
8000ffbc:	48 66       	lddpc	r6,8000ffd4 <_read_r+0x24>
8000ffbe:	12 9a       	mov	r10,r9
8000ffc0:	8d 08       	st.w	r6[0x0],r8
8000ffc2:	f0 1f 00 06 	mcall	8000ffd8 <_read_r+0x28>
8000ffc6:	5b fc       	cp.w	r12,-1
8000ffc8:	c0 51       	brne	8000ffd2 <_read_r+0x22>
8000ffca:	6c 08       	ld.w	r8,r6[0x0]
8000ffcc:	58 08       	cp.w	r8,0
8000ffce:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000ffd2:	d8 22       	popm	r4-r7,pc
8000ffd4:	00 00       	add	r0,r0
8000ffd6:	15 d0       	ld.ub	r0,r10[0x5]
8000ffd8:	80 00       	ld.sh	r0,r0[0x0]
8000ffda:	fc c0 58 0b 	sub	r0,lr,22539

8000ffdc <__avr32_f64_to_u32>:
8000ffdc:	58 0b       	cp.w	r11,0
8000ffde:	5e 6d       	retmi	0

8000ffe0 <__avr32_f64_to_s32>:
8000ffe0:	f6 0c 15 01 	lsl	r12,r11,0x1
8000ffe4:	b5 9c       	lsr	r12,0x15
8000ffe6:	e0 2c 03 ff 	sub	r12,1023
8000ffea:	5e 3d       	retlo	0
8000ffec:	f8 0c 11 1f 	rsub	r12,r12,31
8000fff0:	16 99       	mov	r9,r11
8000fff2:	ab 7b       	lsl	r11,0xb
8000fff4:	bf bb       	sbr	r11,0x1f
8000fff6:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000fffa:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000fffe:	a1 79       	lsl	r9,0x1
80010000:	5e 2b       	reths	r11
80010002:	5c 3b       	neg	r11
80010004:	5e fb       	retal	r11

80010006 <__avr32_f64_cmp_eq>:
80010006:	10 3a       	cp.w	r10,r8
80010008:	f2 0b 13 00 	cpc	r11,r9
8001000c:	c0 80       	breq	8001001c <__avr32_f64_cmp_eq+0x16>
8001000e:	a1 7b       	lsl	r11,0x1
80010010:	a1 79       	lsl	r9,0x1
80010012:	14 4b       	or	r11,r10
80010014:	12 4b       	or	r11,r9
80010016:	10 4b       	or	r11,r8
80010018:	5e 0f       	reteq	1
8001001a:	5e fd       	retal	0
8001001c:	a1 7b       	lsl	r11,0x1
8001001e:	fc 1c ff e0 	movh	r12,0xffe0
80010022:	58 0a       	cp.w	r10,0
80010024:	f8 0b 13 00 	cpc	r11,r12
80010028:	5e 8f       	retls	1
8001002a:	5e fd       	retal	0

8001002c <__avr32_f64_cmp_ge>:
8001002c:	1a de       	st.w	--sp,lr
8001002e:	1a d7       	st.w	--sp,r7
80010030:	a1 7b       	lsl	r11,0x1
80010032:	5f 3c       	srlo	r12
80010034:	a1 79       	lsl	r9,0x1
80010036:	5f 37       	srlo	r7
80010038:	5c fc       	rol	r12
8001003a:	fc 1e ff e0 	movh	lr,0xffe0
8001003e:	58 0a       	cp.w	r10,0
80010040:	fc 0b 13 00 	cpc	r11,lr
80010044:	e0 8b 00 1d 	brhi	8001007e <__avr32_f64_cmp_ge+0x52>
80010048:	58 08       	cp.w	r8,0
8001004a:	fc 09 13 00 	cpc	r9,lr
8001004e:	e0 8b 00 18 	brhi	8001007e <__avr32_f64_cmp_ge+0x52>
80010052:	58 0b       	cp.w	r11,0
80010054:	f5 ba 00 00 	subfeq	r10,0
80010058:	c1 50       	breq	80010082 <__avr32_f64_cmp_ge+0x56>
8001005a:	1b 07       	ld.w	r7,sp++
8001005c:	1b 0e       	ld.w	lr,sp++
8001005e:	58 3c       	cp.w	r12,3
80010060:	c0 a0       	breq	80010074 <__avr32_f64_cmp_ge+0x48>
80010062:	58 1c       	cp.w	r12,1
80010064:	c0 33       	brcs	8001006a <__avr32_f64_cmp_ge+0x3e>
80010066:	5e 0f       	reteq	1
80010068:	5e 1d       	retne	0
8001006a:	10 3a       	cp.w	r10,r8
8001006c:	f2 0b 13 00 	cpc	r11,r9
80010070:	5e 2f       	reths	1
80010072:	5e 3d       	retlo	0
80010074:	14 38       	cp.w	r8,r10
80010076:	f6 09 13 00 	cpc	r9,r11
8001007a:	5e 2f       	reths	1
8001007c:	5e 3d       	retlo	0
8001007e:	1b 07       	ld.w	r7,sp++
80010080:	d8 0a       	popm	pc,r12=0
80010082:	58 17       	cp.w	r7,1
80010084:	5f 0c       	sreq	r12
80010086:	58 09       	cp.w	r9,0
80010088:	f5 b8 00 00 	subfeq	r8,0
8001008c:	1b 07       	ld.w	r7,sp++
8001008e:	1b 0e       	ld.w	lr,sp++
80010090:	5e 0f       	reteq	1
80010092:	5e fc       	retal	r12

80010094 <__avr32_f64_cmp_lt>:
80010094:	1a de       	st.w	--sp,lr
80010096:	1a d7       	st.w	--sp,r7
80010098:	a1 7b       	lsl	r11,0x1
8001009a:	5f 3c       	srlo	r12
8001009c:	a1 79       	lsl	r9,0x1
8001009e:	5f 37       	srlo	r7
800100a0:	5c fc       	rol	r12
800100a2:	fc 1e ff e0 	movh	lr,0xffe0
800100a6:	58 0a       	cp.w	r10,0
800100a8:	fc 0b 13 00 	cpc	r11,lr
800100ac:	e0 8b 00 1d 	brhi	800100e6 <__avr32_f64_cmp_lt+0x52>
800100b0:	58 08       	cp.w	r8,0
800100b2:	fc 09 13 00 	cpc	r9,lr
800100b6:	e0 8b 00 18 	brhi	800100e6 <__avr32_f64_cmp_lt+0x52>
800100ba:	58 0b       	cp.w	r11,0
800100bc:	f5 ba 00 00 	subfeq	r10,0
800100c0:	c1 50       	breq	800100ea <__avr32_f64_cmp_lt+0x56>
800100c2:	1b 07       	ld.w	r7,sp++
800100c4:	1b 0e       	ld.w	lr,sp++
800100c6:	58 3c       	cp.w	r12,3
800100c8:	c0 a0       	breq	800100dc <__avr32_f64_cmp_lt+0x48>
800100ca:	58 1c       	cp.w	r12,1
800100cc:	c0 33       	brcs	800100d2 <__avr32_f64_cmp_lt+0x3e>
800100ce:	5e 0d       	reteq	0
800100d0:	5e 1f       	retne	1
800100d2:	10 3a       	cp.w	r10,r8
800100d4:	f2 0b 13 00 	cpc	r11,r9
800100d8:	5e 2d       	reths	0
800100da:	5e 3f       	retlo	1
800100dc:	14 38       	cp.w	r8,r10
800100de:	f6 09 13 00 	cpc	r9,r11
800100e2:	5e 2d       	reths	0
800100e4:	5e 3f       	retlo	1
800100e6:	1b 07       	ld.w	r7,sp++
800100e8:	d8 0a       	popm	pc,r12=0
800100ea:	58 17       	cp.w	r7,1
800100ec:	5f 1c       	srne	r12
800100ee:	58 09       	cp.w	r9,0
800100f0:	f5 b8 00 00 	subfeq	r8,0
800100f4:	1b 07       	ld.w	r7,sp++
800100f6:	1b 0e       	ld.w	lr,sp++
800100f8:	5e 0d       	reteq	0
800100fa:	5e fc       	retal	r12

800100fc <__avr32_f64_div>:
800100fc:	eb cd 40 ff 	pushm	r0-r7,lr
80010100:	f7 e9 20 0e 	eor	lr,r11,r9
80010104:	f6 07 16 14 	lsr	r7,r11,0x14
80010108:	a9 7b       	lsl	r11,0x9
8001010a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8001010e:	a9 7a       	lsl	r10,0x9
80010110:	bd bb       	sbr	r11,0x1d
80010112:	e4 1b 3f ff 	andh	r11,0x3fff
80010116:	ab d7       	cbr	r7,0xb
80010118:	e0 80 00 cc 	breq	800102b0 <__avr32_f64_div_round_subnormal+0x54>
8001011c:	e0 47 07 ff 	cp.w	r7,2047
80010120:	e0 84 00 b5 	brge	8001028a <__avr32_f64_div_round_subnormal+0x2e>
80010124:	f2 06 16 14 	lsr	r6,r9,0x14
80010128:	a9 79       	lsl	r9,0x9
8001012a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8001012e:	a9 78       	lsl	r8,0x9
80010130:	bd b9       	sbr	r9,0x1d
80010132:	e4 19 3f ff 	andh	r9,0x3fff
80010136:	ab d6       	cbr	r6,0xb
80010138:	e0 80 00 e2 	breq	800102fc <__avr32_f64_div_round_subnormal+0xa0>
8001013c:	e0 46 07 ff 	cp.w	r6,2047
80010140:	e0 84 00 b2 	brge	800102a4 <__avr32_f64_div_round_subnormal+0x48>
80010144:	0c 17       	sub	r7,r6
80010146:	fe 37 fc 01 	sub	r7,-1023
8001014a:	fc 1c 80 00 	movh	r12,0x8000
8001014e:	f8 03 16 01 	lsr	r3,r12,0x1
80010152:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80010156:	5c d4       	com	r4
80010158:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8001015c:	e6 09 06 44 	mulu.d	r4,r3,r9
80010160:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80010164:	e6 05 06 44 	mulu.d	r4,r3,r5
80010168:	ea 03 15 02 	lsl	r3,r5,0x2
8001016c:	e6 09 06 44 	mulu.d	r4,r3,r9
80010170:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80010174:	e6 05 06 44 	mulu.d	r4,r3,r5
80010178:	ea 03 15 02 	lsl	r3,r5,0x2
8001017c:	e6 09 06 44 	mulu.d	r4,r3,r9
80010180:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80010184:	e6 05 06 44 	mulu.d	r4,r3,r5
80010188:	ea 03 15 02 	lsl	r3,r5,0x2
8001018c:	e6 08 06 40 	mulu.d	r0,r3,r8
80010190:	e4 09 07 40 	macu.d	r0,r2,r9
80010194:	e6 09 06 44 	mulu.d	r4,r3,r9
80010198:	02 04       	add	r4,r1
8001019a:	5c 05       	acr	r5
8001019c:	a3 65       	lsl	r5,0x2
8001019e:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800101a2:	a3 64       	lsl	r4,0x2
800101a4:	5c 34       	neg	r4
800101a6:	f8 05 01 45 	sbc	r5,r12,r5
800101aa:	e6 04 06 40 	mulu.d	r0,r3,r4
800101ae:	e4 05 07 40 	macu.d	r0,r2,r5
800101b2:	e6 05 06 44 	mulu.d	r4,r3,r5
800101b6:	02 04       	add	r4,r1
800101b8:	5c 05       	acr	r5
800101ba:	ea 03 15 02 	lsl	r3,r5,0x2
800101be:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800101c2:	e8 02 15 02 	lsl	r2,r4,0x2
800101c6:	e6 08 06 40 	mulu.d	r0,r3,r8
800101ca:	e4 09 07 40 	macu.d	r0,r2,r9
800101ce:	e6 09 06 44 	mulu.d	r4,r3,r9
800101d2:	02 04       	add	r4,r1
800101d4:	5c 05       	acr	r5
800101d6:	a3 65       	lsl	r5,0x2
800101d8:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800101dc:	a3 64       	lsl	r4,0x2
800101de:	5c 34       	neg	r4
800101e0:	f8 05 01 45 	sbc	r5,r12,r5
800101e4:	e6 04 06 40 	mulu.d	r0,r3,r4
800101e8:	e4 05 07 40 	macu.d	r0,r2,r5
800101ec:	e6 05 06 44 	mulu.d	r4,r3,r5
800101f0:	02 04       	add	r4,r1
800101f2:	5c 05       	acr	r5
800101f4:	ea 03 15 02 	lsl	r3,r5,0x2
800101f8:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800101fc:	e8 02 15 02 	lsl	r2,r4,0x2
80010200:	e6 0a 06 40 	mulu.d	r0,r3,r10
80010204:	e4 0b 07 40 	macu.d	r0,r2,r11
80010208:	e6 0b 06 42 	mulu.d	r2,r3,r11
8001020c:	02 02       	add	r2,r1
8001020e:	5c 03       	acr	r3
80010210:	ed b3 00 1c 	bld	r3,0x1c
80010214:	c0 90       	breq	80010226 <__avr32_f64_div+0x12a>
80010216:	a1 72       	lsl	r2,0x1
80010218:	5c f3       	rol	r3
8001021a:	20 17       	sub	r7,1
8001021c:	a3 9a       	lsr	r10,0x3
8001021e:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80010222:	a3 9b       	lsr	r11,0x3
80010224:	c0 58       	rjmp	8001022e <__avr32_f64_div+0x132>
80010226:	a5 8a       	lsr	r10,0x4
80010228:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8001022c:	a5 8b       	lsr	r11,0x4
8001022e:	58 07       	cp.w	r7,0
80010230:	e0 8a 00 8b 	brle	80010346 <__avr32_f64_div_res_subnormal>
80010234:	e0 12 ff 00 	andl	r2,0xff00
80010238:	e8 12 00 80 	orl	r2,0x80
8001023c:	e6 08 06 40 	mulu.d	r0,r3,r8
80010240:	e4 09 07 40 	macu.d	r0,r2,r9
80010244:	e4 08 06 44 	mulu.d	r4,r2,r8
80010248:	e6 09 06 48 	mulu.d	r8,r3,r9
8001024c:	00 05       	add	r5,r0
8001024e:	f0 01 00 48 	adc	r8,r8,r1
80010252:	5c 09       	acr	r9
80010254:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80010258:	58 04       	cp.w	r4,0
8001025a:	5c 25       	cpc	r5

8001025c <__avr32_f64_div_round_subnormal>:
8001025c:	f4 08 13 00 	cpc	r8,r10
80010260:	f6 09 13 00 	cpc	r9,r11
80010264:	5f 36       	srlo	r6
80010266:	f8 06 17 00 	moveq	r6,r12
8001026a:	e4 0a 16 08 	lsr	r10,r2,0x8
8001026e:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80010272:	e6 0b 16 08 	lsr	r11,r3,0x8
80010276:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8001027a:	ed be 00 1f 	bld	lr,0x1f
8001027e:	ef bb 00 1f 	bst	r11,0x1f
80010282:	0c 0a       	add	r10,r6
80010284:	5c 0b       	acr	r11
80010286:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8001028a:	e4 1b 00 0f 	andh	r11,0xf
8001028e:	14 4b       	or	r11,r10
80010290:	e0 81 00 a7 	brne	800103de <__avr32_f64_div_res_subnormal+0x98>
80010294:	f2 06 16 14 	lsr	r6,r9,0x14
80010298:	ab d6       	cbr	r6,0xb
8001029a:	e0 46 07 ff 	cp.w	r6,2047
8001029e:	e0 81 00 a4 	brne	800103e6 <__avr32_f64_div_res_subnormal+0xa0>
800102a2:	c9 e8       	rjmp	800103de <__avr32_f64_div_res_subnormal+0x98>
800102a4:	e4 19 00 0f 	andh	r9,0xf
800102a8:	10 49       	or	r9,r8
800102aa:	e0 81 00 9a 	brne	800103de <__avr32_f64_div_res_subnormal+0x98>
800102ae:	c9 28       	rjmp	800103d2 <__avr32_f64_div_res_subnormal+0x8c>
800102b0:	a3 7b       	lsl	r11,0x3
800102b2:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800102b6:	a3 7a       	lsl	r10,0x3
800102b8:	f5 eb 10 04 	or	r4,r10,r11
800102bc:	e0 80 00 a0 	breq	800103fc <__avr32_f64_div_op1_zero>
800102c0:	f6 04 12 00 	clz	r4,r11
800102c4:	c1 70       	breq	800102f2 <__avr32_f64_div_round_subnormal+0x96>
800102c6:	c0 c3       	brcs	800102de <__avr32_f64_div_round_subnormal+0x82>
800102c8:	e8 05 11 20 	rsub	r5,r4,32
800102cc:	f6 04 09 4b 	lsl	r11,r11,r4
800102d0:	f4 05 0a 45 	lsr	r5,r10,r5
800102d4:	0a 4b       	or	r11,r5
800102d6:	f4 04 09 4a 	lsl	r10,r10,r4
800102da:	08 17       	sub	r7,r4
800102dc:	c0 b8       	rjmp	800102f2 <__avr32_f64_div_round_subnormal+0x96>
800102de:	f4 04 12 00 	clz	r4,r10
800102e2:	f9 b4 03 00 	movlo	r4,0
800102e6:	f7 b4 02 e0 	subhs	r4,-32
800102ea:	f4 04 09 4b 	lsl	r11,r10,r4
800102ee:	30 0a       	mov	r10,0
800102f0:	08 17       	sub	r7,r4
800102f2:	a3 8a       	lsr	r10,0x2
800102f4:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800102f8:	a3 8b       	lsr	r11,0x2
800102fa:	c1 1b       	rjmp	8001011c <__avr32_f64_div+0x20>
800102fc:	a3 79       	lsl	r9,0x3
800102fe:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80010302:	a3 78       	lsl	r8,0x3
80010304:	f3 e8 10 04 	or	r4,r9,r8
80010308:	c6 f0       	breq	800103e6 <__avr32_f64_div_res_subnormal+0xa0>
8001030a:	f2 04 12 00 	clz	r4,r9
8001030e:	c1 70       	breq	8001033c <__avr32_f64_div_round_subnormal+0xe0>
80010310:	c0 c3       	brcs	80010328 <__avr32_f64_div_round_subnormal+0xcc>
80010312:	e8 05 11 20 	rsub	r5,r4,32
80010316:	f2 04 09 49 	lsl	r9,r9,r4
8001031a:	f0 05 0a 45 	lsr	r5,r8,r5
8001031e:	0a 49       	or	r9,r5
80010320:	f0 04 09 48 	lsl	r8,r8,r4
80010324:	08 16       	sub	r6,r4
80010326:	c0 b8       	rjmp	8001033c <__avr32_f64_div_round_subnormal+0xe0>
80010328:	f0 04 12 00 	clz	r4,r8
8001032c:	f9 b4 03 00 	movlo	r4,0
80010330:	f7 b4 02 e0 	subhs	r4,-32
80010334:	f0 04 09 49 	lsl	r9,r8,r4
80010338:	30 08       	mov	r8,0
8001033a:	08 16       	sub	r6,r4
8001033c:	a3 88       	lsr	r8,0x2
8001033e:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80010342:	a3 89       	lsr	r9,0x2
80010344:	cf ca       	rjmp	8001013c <__avr32_f64_div+0x40>

80010346 <__avr32_f64_div_res_subnormal>:
80010346:	5c 37       	neg	r7
80010348:	2f f7       	sub	r7,-1
8001034a:	f1 b7 04 c0 	satu	r7,0x6
8001034e:	e0 47 00 20 	cp.w	r7,32
80010352:	c1 54       	brge	8001037c <__avr32_f64_div_res_subnormal+0x36>
80010354:	ee 06 11 20 	rsub	r6,r7,32
80010358:	e4 07 0a 42 	lsr	r2,r2,r7
8001035c:	e6 06 09 4c 	lsl	r12,r3,r6
80010360:	18 42       	or	r2,r12
80010362:	e6 07 0a 43 	lsr	r3,r3,r7
80010366:	f4 06 09 41 	lsl	r1,r10,r6
8001036a:	f4 07 0a 4a 	lsr	r10,r10,r7
8001036e:	f6 06 09 4c 	lsl	r12,r11,r6
80010372:	18 4a       	or	r10,r12
80010374:	f6 07 0a 4b 	lsr	r11,r11,r7
80010378:	30 00       	mov	r0,0
8001037a:	c1 58       	rjmp	800103a4 <__avr32_f64_div_res_subnormal+0x5e>
8001037c:	ee 06 11 20 	rsub	r6,r7,32
80010380:	f9 b0 00 00 	moveq	r0,0
80010384:	f9 bc 00 00 	moveq	r12,0
80010388:	c0 50       	breq	80010392 <__avr32_f64_div_res_subnormal+0x4c>
8001038a:	f4 06 09 40 	lsl	r0,r10,r6
8001038e:	f6 06 09 4c 	lsl	r12,r11,r6
80010392:	e6 07 0a 42 	lsr	r2,r3,r7
80010396:	30 03       	mov	r3,0
80010398:	f4 07 0a 41 	lsr	r1,r10,r7
8001039c:	18 41       	or	r1,r12
8001039e:	f6 07 0a 4a 	lsr	r10,r11,r7
800103a2:	30 0b       	mov	r11,0
800103a4:	e0 12 ff 00 	andl	r2,0xff00
800103a8:	e8 12 00 80 	orl	r2,0x80
800103ac:	e6 08 06 46 	mulu.d	r6,r3,r8
800103b0:	e4 09 07 46 	macu.d	r6,r2,r9
800103b4:	e4 08 06 44 	mulu.d	r4,r2,r8
800103b8:	e6 09 06 48 	mulu.d	r8,r3,r9
800103bc:	0c 05       	add	r5,r6
800103be:	f0 07 00 48 	adc	r8,r8,r7
800103c2:	5c 09       	acr	r9
800103c4:	30 07       	mov	r7,0
800103c6:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800103ca:	00 34       	cp.w	r4,r0
800103cc:	e2 05 13 00 	cpc	r5,r1
800103d0:	c4 6b       	rjmp	8001025c <__avr32_f64_div_round_subnormal>
800103d2:	1c 9b       	mov	r11,lr
800103d4:	e6 1b 80 00 	andh	r11,0x8000,COH
800103d8:	30 0a       	mov	r10,0
800103da:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800103de:	3f fb       	mov	r11,-1
800103e0:	30 0a       	mov	r10,0
800103e2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800103e6:	f5 eb 10 04 	or	r4,r10,r11
800103ea:	c0 90       	breq	800103fc <__avr32_f64_div_op1_zero>
800103ec:	1c 9b       	mov	r11,lr
800103ee:	e6 1b 80 00 	andh	r11,0x8000,COH
800103f2:	ea 1b 7f f0 	orh	r11,0x7ff0
800103f6:	30 0a       	mov	r10,0
800103f8:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800103fc <__avr32_f64_div_op1_zero>:
800103fc:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80010400:	ce f0       	breq	800103de <__avr32_f64_div_res_subnormal+0x98>
80010402:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80010406:	e0 44 07 ff 	cp.w	r4,2047
8001040a:	ce 41       	brne	800103d2 <__avr32_f64_div_res_subnormal+0x8c>
8001040c:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80010410:	ce 10       	breq	800103d2 <__avr32_f64_div_res_subnormal+0x8c>
80010412:	ce 6b       	rjmp	800103de <__avr32_f64_div_res_subnormal+0x98>

80010414 <__avr32_umod64>:
80010414:	d4 31       	pushm	r0-r7,lr
80010416:	1a 97       	mov	r7,sp
80010418:	20 3d       	sub	sp,12
8001041a:	10 9c       	mov	r12,r8
8001041c:	12 95       	mov	r5,r9
8001041e:	14 9e       	mov	lr,r10
80010420:	16 91       	mov	r1,r11
80010422:	16 96       	mov	r6,r11
80010424:	58 09       	cp.w	r9,0
80010426:	e0 81 00 81 	brne	80010528 <__avr32_umod64+0x114>
8001042a:	16 38       	cp.w	r8,r11
8001042c:	e0 88 00 12 	brls	80010450 <__avr32_umod64+0x3c>
80010430:	f0 08 12 00 	clz	r8,r8
80010434:	c4 e0       	breq	800104d0 <__avr32_umod64+0xbc>
80010436:	f6 08 09 46 	lsl	r6,r11,r8
8001043a:	f8 08 09 4c 	lsl	r12,r12,r8
8001043e:	f0 0b 11 20 	rsub	r11,r8,32
80010442:	f4 08 09 4e 	lsl	lr,r10,r8
80010446:	f4 0b 0a 4b 	lsr	r11,r10,r11
8001044a:	f7 e6 10 06 	or	r6,r11,r6
8001044e:	c4 18       	rjmp	800104d0 <__avr32_umod64+0xbc>
80010450:	58 08       	cp.w	r8,0
80010452:	c0 51       	brne	8001045c <__avr32_umod64+0x48>
80010454:	30 19       	mov	r9,1
80010456:	f2 08 0d 08 	divu	r8,r9,r8
8001045a:	10 9c       	mov	r12,r8
8001045c:	f8 08 12 00 	clz	r8,r12
80010460:	c0 31       	brne	80010466 <__avr32_umod64+0x52>
80010462:	18 16       	sub	r6,r12
80010464:	c3 68       	rjmp	800104d0 <__avr32_umod64+0xbc>
80010466:	f0 03 11 20 	rsub	r3,r8,32
8001046a:	f4 03 0a 4b 	lsr	r11,r10,r3
8001046e:	f8 08 09 4c 	lsl	r12,r12,r8
80010472:	ec 08 09 49 	lsl	r9,r6,r8
80010476:	ec 03 0a 43 	lsr	r3,r6,r3
8001047a:	f7 e9 10 09 	or	r9,r11,r9
8001047e:	f8 05 16 10 	lsr	r5,r12,0x10
80010482:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80010486:	e6 05 0d 02 	divu	r2,r3,r5
8001048a:	f2 0e 16 10 	lsr	lr,r9,0x10
8001048e:	ec 02 02 4b 	mul	r11,r6,r2
80010492:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80010496:	16 3e       	cp.w	lr,r11
80010498:	c0 72       	brcc	800104a6 <__avr32_umod64+0x92>
8001049a:	18 0e       	add	lr,r12
8001049c:	18 3e       	cp.w	lr,r12
8001049e:	c0 43       	brcs	800104a6 <__avr32_umod64+0x92>
800104a0:	16 3e       	cp.w	lr,r11
800104a2:	fd dc e3 0e 	addcs	lr,lr,r12
800104a6:	fc 0b 01 03 	sub	r3,lr,r11
800104aa:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800104ae:	e6 05 0d 02 	divu	r2,r3,r5
800104b2:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800104b6:	a5 36       	mul	r6,r2
800104b8:	0c 39       	cp.w	r9,r6
800104ba:	c0 72       	brcc	800104c8 <__avr32_umod64+0xb4>
800104bc:	18 09       	add	r9,r12
800104be:	18 39       	cp.w	r9,r12
800104c0:	c0 43       	brcs	800104c8 <__avr32_umod64+0xb4>
800104c2:	0c 39       	cp.w	r9,r6
800104c4:	f3 dc e3 09 	addcs	r9,r9,r12
800104c8:	f2 06 01 06 	sub	r6,r9,r6
800104cc:	f4 08 09 4e 	lsl	lr,r10,r8
800104d0:	f8 0a 16 10 	lsr	r10,r12,0x10
800104d4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800104d8:	ec 0a 0d 02 	divu	r2,r6,r10
800104dc:	fc 09 16 10 	lsr	r9,lr,0x10
800104e0:	ea 02 02 4b 	mul	r11,r5,r2
800104e4:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800104e8:	16 39       	cp.w	r9,r11
800104ea:	c0 72       	brcc	800104f8 <__avr32_umod64+0xe4>
800104ec:	18 09       	add	r9,r12
800104ee:	18 39       	cp.w	r9,r12
800104f0:	c0 43       	brcs	800104f8 <__avr32_umod64+0xe4>
800104f2:	16 39       	cp.w	r9,r11
800104f4:	f3 dc e3 09 	addcs	r9,r9,r12
800104f8:	f2 0b 01 0b 	sub	r11,r9,r11
800104fc:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80010500:	f6 0a 0d 0a 	divu	r10,r11,r10
80010504:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80010508:	ea 0a 02 4a 	mul	r10,r5,r10
8001050c:	14 3e       	cp.w	lr,r10
8001050e:	c0 72       	brcc	8001051c <__avr32_umod64+0x108>
80010510:	18 0e       	add	lr,r12
80010512:	18 3e       	cp.w	lr,r12
80010514:	c0 43       	brcs	8001051c <__avr32_umod64+0x108>
80010516:	14 3e       	cp.w	lr,r10
80010518:	fd dc e3 0e 	addcs	lr,lr,r12
8001051c:	fc 0a 01 0a 	sub	r10,lr,r10
80010520:	30 0b       	mov	r11,0
80010522:	f4 08 0a 4a 	lsr	r10,r10,r8
80010526:	c7 b8       	rjmp	8001061c <__avr32_umod64+0x208>
80010528:	16 39       	cp.w	r9,r11
8001052a:	e0 8b 00 79 	brhi	8001061c <__avr32_umod64+0x208>
8001052e:	f2 09 12 00 	clz	r9,r9
80010532:	c1 21       	brne	80010556 <__avr32_umod64+0x142>
80010534:	10 3a       	cp.w	r10,r8
80010536:	5f 2b       	srhs	r11
80010538:	0a 31       	cp.w	r1,r5
8001053a:	5f ba       	srhi	r10
8001053c:	f7 ea 10 0a 	or	r10,r11,r10
80010540:	f2 0a 18 00 	cp.b	r10,r9
80010544:	c0 60       	breq	80010550 <__avr32_umod64+0x13c>
80010546:	fc 08 01 0c 	sub	r12,lr,r8
8001054a:	e2 05 01 46 	sbc	r6,r1,r5
8001054e:	18 9e       	mov	lr,r12
80010550:	0c 9b       	mov	r11,r6
80010552:	1c 9a       	mov	r10,lr
80010554:	c6 48       	rjmp	8001061c <__avr32_umod64+0x208>
80010556:	ea 09 09 4c 	lsl	r12,r5,r9
8001055a:	f2 06 11 20 	rsub	r6,r9,32
8001055e:	f6 09 09 4b 	lsl	r11,r11,r9
80010562:	f0 09 09 42 	lsl	r2,r8,r9
80010566:	ef 46 ff f4 	st.w	r7[-12],r6
8001056a:	f0 06 0a 48 	lsr	r8,r8,r6
8001056e:	18 48       	or	r8,r12
80010570:	e2 06 0a 4c 	lsr	r12,r1,r6
80010574:	f4 09 09 43 	lsl	r3,r10,r9
80010578:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8001057c:	f4 06 0a 4a 	lsr	r10,r10,r6
80010580:	16 4a       	or	r10,r11
80010582:	f0 0b 16 10 	lsr	r11,r8,0x10
80010586:	f8 0b 0d 04 	divu	r4,r12,r11
8001058a:	f4 0c 16 10 	lsr	r12,r10,0x10
8001058e:	08 91       	mov	r1,r4
80010590:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80010594:	e8 0e 02 46 	mul	r6,r4,lr
80010598:	0c 3c       	cp.w	r12,r6
8001059a:	c0 a2       	brcc	800105ae <__avr32_umod64+0x19a>
8001059c:	20 11       	sub	r1,1
8001059e:	10 0c       	add	r12,r8
800105a0:	10 3c       	cp.w	r12,r8
800105a2:	c0 63       	brcs	800105ae <__avr32_umod64+0x19a>
800105a4:	0c 3c       	cp.w	r12,r6
800105a6:	f7 b1 03 01 	sublo	r1,1
800105aa:	f9 d8 e3 0c 	addcs	r12,r12,r8
800105ae:	0c 1c       	sub	r12,r6
800105b0:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
800105b4:	f8 0b 0d 04 	divu	r4,r12,r11
800105b8:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
800105bc:	08 96       	mov	r6,r4
800105be:	e8 0e 02 4e 	mul	lr,r4,lr
800105c2:	1c 3b       	cp.w	r11,lr
800105c4:	c0 a2       	brcc	800105d8 <__avr32_umod64+0x1c4>
800105c6:	20 16       	sub	r6,1
800105c8:	10 0b       	add	r11,r8
800105ca:	10 3b       	cp.w	r11,r8
800105cc:	c0 63       	brcs	800105d8 <__avr32_umod64+0x1c4>
800105ce:	1c 3b       	cp.w	r11,lr
800105d0:	f7 b6 03 01 	sublo	r6,1
800105d4:	f7 d8 e3 0b 	addcs	r11,r11,r8
800105d8:	ed e1 11 01 	or	r1,r6,r1<<0x10
800105dc:	1c 1b       	sub	r11,lr
800105de:	e2 02 06 40 	mulu.d	r0,r1,r2
800105e2:	00 9e       	mov	lr,r0
800105e4:	02 9c       	mov	r12,r1
800105e6:	16 3c       	cp.w	r12,r11
800105e8:	e0 8b 00 08 	brhi	800105f8 <__avr32_umod64+0x1e4>
800105ec:	5f 06       	sreq	r6
800105ee:	06 30       	cp.w	r0,r3
800105f0:	5f ba       	srhi	r10
800105f2:	ed ea 00 0a 	and	r10,r6,r10
800105f6:	c0 60       	breq	80010602 <__avr32_umod64+0x1ee>
800105f8:	fc 02 01 04 	sub	r4,lr,r2
800105fc:	f8 08 01 4c 	sbc	r12,r12,r8
80010600:	08 9e       	mov	lr,r4
80010602:	e6 0e 01 0a 	sub	r10,r3,lr
80010606:	f6 0c 01 4c 	sbc	r12,r11,r12
8001060a:	ee f1 ff f4 	ld.w	r1,r7[-12]
8001060e:	f8 09 0a 4b 	lsr	r11,r12,r9
80010612:	f4 09 0a 4a 	lsr	r10,r10,r9
80010616:	f8 01 09 4c 	lsl	r12,r12,r1
8001061a:	18 4a       	or	r10,r12
8001061c:	2f dd       	sub	sp,-12
8001061e:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80010800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80010800:	c0 08       	rjmp	80010800 <_evba>
	...

80010804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80010804:	c0 08       	rjmp	80010804 <_handle_TLB_Multiple_Hit>
	...

80010808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80010808:	c0 08       	rjmp	80010808 <_handle_Bus_Error_Data_Fetch>
	...

8001080c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8001080c:	c0 08       	rjmp	8001080c <_handle_Bus_Error_Instruction_Fetch>
	...

80010810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80010810:	c0 08       	rjmp	80010810 <_handle_NMI>
	...

80010814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80010814:	c0 08       	rjmp	80010814 <_handle_Instruction_Address>
	...

80010818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80010818:	c0 08       	rjmp	80010818 <_handle_ITLB_Protection>
	...

8001081c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8001081c:	c0 08       	rjmp	8001081c <_handle_Breakpoint>
	...

80010820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80010820:	c0 08       	rjmp	80010820 <_handle_Illegal_Opcode>
	...

80010824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80010824:	c0 08       	rjmp	80010824 <_handle_Unimplemented_Instruction>
	...

80010828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80010828:	c0 08       	rjmp	80010828 <_handle_Privilege_Violation>
	...

8001082c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8001082c:	c0 08       	rjmp	8001082c <_handle_Floating_Point>
	...

80010830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80010830:	c0 08       	rjmp	80010830 <_handle_Coprocessor_Absent>
	...

80010834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80010834:	c0 08       	rjmp	80010834 <_handle_Data_Address_Read>
	...

80010838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80010838:	c0 08       	rjmp	80010838 <_handle_Data_Address_Write>
	...

8001083c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8001083c:	c0 08       	rjmp	8001083c <_handle_DTLB_Protection_Read>
	...

80010840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80010840:	c0 08       	rjmp	80010840 <_handle_DTLB_Protection_Write>
	...

80010844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80010844:	c0 08       	rjmp	80010844 <_handle_DTLB_Modified>
	...

80010850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80010850:	c0 08       	rjmp	80010850 <_handle_ITLB_Miss>
	...

80010860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80010860:	c0 08       	rjmp	80010860 <_handle_DTLB_Miss_Read>
	...

80010870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80010870:	c0 08       	rjmp	80010870 <_handle_DTLB_Miss_Write>
	...

80010900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80010900:	c0 08       	rjmp	80010900 <_handle_Supervisor_Call>
	...

80010904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80010904:	30 0c       	mov	r12,0
80010906:	f0 1f 00 0e 	mcall	8001093c <_int3+0xe>
8001090a:	58 0c       	cp.w	r12,0
8001090c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80010910:	d6 03       	rete

80010912 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80010912:	30 1c       	mov	r12,1
80010914:	f0 1f 00 0a 	mcall	8001093c <_int3+0xe>
80010918:	58 0c       	cp.w	r12,0
8001091a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8001091e:	d6 03       	rete

80010920 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80010920:	30 2c       	mov	r12,2
80010922:	f0 1f 00 07 	mcall	8001093c <_int3+0xe>
80010926:	58 0c       	cp.w	r12,0
80010928:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8001092c:	d6 03       	rete

8001092e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8001092e:	30 3c       	mov	r12,3
80010930:	f0 1f 00 03 	mcall	8001093c <_int3+0xe>
80010934:	58 0c       	cp.w	r12,0
80010936:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8001093a:	d6 03       	rete
8001093c:	80 00       	ld.sh	r0,r0[0x0]
8001093e:	4b b8       	lddpc	r8,80010a28 <C.35.14269+0x8>
	...
