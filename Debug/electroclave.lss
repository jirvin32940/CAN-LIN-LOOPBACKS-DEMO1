
electroclave.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002010  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008e2c  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000b000  8000b000  0000b400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000250  8000b200  8000b200  0000b600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000000a9  00000008  8000b450  0000bc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000007  000000b1  8000b4f9  0000bcb1  2**0
                  ALLOC
  8 .bss          00000aa0  000000b8  000000b8  00000000  2**2
                  ALLOC
  9 .heap         0000e4a8  00000b58  00000b58  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000bcb1  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000a60  00000000  00000000  0000bce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001bbf  00000000  00000000  0000c748  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000195c6  00000000  00000000  0000e307  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001d64  00000000  00000000  000278cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008fbb  00000000  00000000  00029631  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001fcc  00000000  00000000  000325ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004ab6  00000000  00000000  000345b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000350d  00000000  00000000  0003906e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 01031bf5  00000000  00000000  0003c57b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .flash_nvram0 000003c0  8007f000  8000b4f9  0000c000  2**0
                  ALLOC
 22 .flash_nvram1 000003c0  8007f800  8007f3c0  0000c000  2**0
                  ALLOC
 23 .debug_ranges 00000a00  00000000  00000000  0106e170  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	59 28       	cp.w	r8,18

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	48 1f       	lddpc	pc,8000200c <program_start+0x4>
8000200a:	00 00       	add	r0,r0
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	59 28       	cp.w	r8,18

Disassembly of section .text:

80002010 <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
80002010:	eb cd 40 80 	pushm	r7,lr
80002014:	1a 97       	mov	r7,sp
80002016:	20 1d       	sub	sp,4
80002018:	18 98       	mov	r8,r12
8000201a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (idx)
8000201e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002022:	58 28       	cp.w	r8,2
80002024:	c1 10       	breq	80002046 <io_pin+0x36>
80002026:	e0 89 00 07 	brgt	80002034 <io_pin+0x24>
8000202a:	58 08       	cp.w	r8,0
8000202c:	c0 90       	breq	8000203e <io_pin+0x2e>
8000202e:	58 18       	cp.w	r8,1
80002030:	c0 90       	breq	80002042 <io_pin+0x32>
80002032:	c1 08       	rjmp	80002052 <io_pin+0x42>
80002034:	58 38       	cp.w	r8,3
80002036:	c0 a0       	breq	8000204a <io_pin+0x3a>
80002038:	58 48       	cp.w	r8,4
8000203a:	c0 a0       	breq	8000204e <io_pin+0x3e>
8000203c:	c0 b8       	rjmp	80002052 <io_pin+0x42>
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
8000203e:	33 38       	mov	r8,51
80002040:	c0 a8       	rjmp	80002054 <io_pin+0x44>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
80002042:	33 48       	mov	r8,52
80002044:	c0 88       	rjmp	80002054 <io_pin+0x44>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
80002046:	33 58       	mov	r8,53
80002048:	c0 68       	rjmp	80002054 <io_pin+0x44>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
8000204a:	33 68       	mov	r8,54
8000204c:	c0 48       	rjmp	80002054 <io_pin+0x44>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
8000204e:	33 78       	mov	r8,55
80002050:	c0 28       	rjmp	80002054 <io_pin+0x44>
			break;
		default: 
			return 0; //TODO: return a better error code here
80002052:	30 08       	mov	r8,0
			break;
	}
}
80002054:	10 9c       	mov	r12,r8
80002056:	2f fd       	sub	sp,-4
80002058:	e3 cd 80 80 	ldm	sp++,r7,pc

8000205c <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
8000205c:	eb cd 40 80 	pushm	r7,lr
80002060:	1a 97       	mov	r7,sp
80002062:	20 3d       	sub	sp,12
80002064:	18 98       	mov	r8,r12
80002066:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
8000206a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000206e:	10 9c       	mov	r12,r8
80002070:	f0 1f 00 0c 	mcall	800020a0 <drive_DQ_low+0x44>
80002074:	18 98       	mov	r8,r12
80002076:	ef 68 ff fb 	st.b	r7[-5],r8
	
	ioFlags = (GPIO_DIR_OUTPUT); //14may15 experiment
8000207a:	30 18       	mov	r8,1
8000207c:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ioPin, ioFlags); //14may15 experiment
80002080:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002084:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002088:	12 9b       	mov	r11,r9
8000208a:	10 9c       	mov	r12,r8
8000208c:	f0 1f 00 06 	mcall	800020a4 <drive_DQ_low+0x48>

	gpio_set_pin_low(ioPin);
80002090:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002094:	10 9c       	mov	r12,r8
80002096:	f0 1f 00 05 	mcall	800020a8 <drive_DQ_low+0x4c>

}
8000209a:	2f dd       	sub	sp,-12
8000209c:	e3 cd 80 80 	ldm	sp++,r7,pc
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	20 10       	sub	r0,1
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	48 28       	lddpc	r8,800020ac <release_the_bus>
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	4b 3c       	lddpc	r12,80002174 <SetSpeed>

800020ac <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
800020ac:	eb cd 40 80 	pushm	r7,lr
800020b0:	1a 97       	mov	r7,sp
800020b2:	20 3d       	sub	sp,12
800020b4:	18 98       	mov	r8,r12
800020b6:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
800020ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800020be:	10 9c       	mov	r12,r8
800020c0:	f0 1f 00 0a 	mcall	800020e8 <release_the_bus+0x3c>
800020c4:	18 98       	mov	r8,r12
800020c6:	ef 68 ff fb 	st.b	r7[-5],r8
	
//14may15 experiment	gpio_set_pin_high(ioPin);
	
	ioFlags = (GPIO_DIR_INPUT); //14may15 experiment
800020ca:	30 08       	mov	r8,0
800020cc:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ioPin, ioFlags); //14may15 experiment
800020d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020d4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800020d8:	12 9b       	mov	r11,r9
800020da:	10 9c       	mov	r12,r8
800020dc:	f0 1f 00 04 	mcall	800020ec <release_the_bus+0x40>

}
800020e0:	2f dd       	sub	sp,-12
800020e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800020e6:	00 00       	add	r0,r0
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	20 10       	sub	r0,1
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	48 28       	lddpc	r8,800020f4 <gpio_input+0x4>

800020f0 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
800020f0:	eb cd 40 80 	pushm	r7,lr
800020f4:	1a 97       	mov	r7,sp
800020f6:	20 3d       	sub	sp,12
800020f8:	18 98       	mov	r8,r12
800020fa:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 9c       	mov	r12,r8
80002104:	f0 1f 00 09 	mcall	80002128 <gpio_input+0x38>
80002108:	18 98       	mov	r8,r12
8000210a:	ef 68 ff ff 	st.b	r7[-1],r8
		
	ioFlags = (GPIO_DIR_INPUT);
8000210e:	30 08       	mov	r8,0
80002110:	ef 48 ff f8 	st.w	r7[-8],r8
	gpio_configure_pin(ioPin, ioFlags);
80002114:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002118:	ee fb ff f8 	ld.w	r11,r7[-8]
8000211c:	10 9c       	mov	r12,r8
8000211e:	f0 1f 00 04 	mcall	8000212c <gpio_input+0x3c>

}
80002122:	2f dd       	sub	sp,-12
80002124:	e3 cd 80 80 	ldm	sp++,r7,pc
80002128:	80 00       	ld.sh	r0,r0[0x0]
8000212a:	20 10       	sub	r0,1
8000212c:	80 00       	ld.sh	r0,r0[0x0]
8000212e:	48 28       	lddpc	r8,80002134 <sample_line+0x4>

80002130 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
80002130:	eb cd 40 80 	pushm	r7,lr
80002134:	1a 97       	mov	r7,sp
80002136:	20 2d       	sub	sp,8
80002138:	18 98       	mov	r8,r12
8000213a:	ef 68 ff f8 	st.b	r7[-8],r8
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
8000213e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002142:	10 9c       	mov	r12,r8
80002144:	f0 1f 00 0a 	mcall	8000216c <sample_line+0x3c>
80002148:	18 98       	mov	r8,r12
8000214a:	ef 68 ff ff 	st.b	r7[-1],r8
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = gpio_get_pin_value(ioPin);
8000214e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002152:	10 9c       	mov	r12,r8
80002154:	f0 1f 00 07 	mcall	80002170 <sample_line+0x40>
80002158:	18 98       	mov	r8,r12
8000215a:	ef 68 ff fe 	st.b	r7[-2],r8

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
8000215e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
80002162:	10 9c       	mov	r12,r8
80002164:	2f ed       	sub	sp,-8
80002166:	e3 cd 80 80 	ldm	sp++,r7,pc
8000216a:	00 00       	add	r0,r0
8000216c:	80 00       	ld.sh	r0,r0[0x0]
8000216e:	20 10       	sub	r0,1
80002170:	80 00       	ld.sh	r0,r0[0x0]
80002172:	4a c6       	lddpc	r6,80002220 <SetSpeed+0xac>

80002174 <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
80002174:	eb cd 40 80 	pushm	r7,lr
80002178:	1a 97       	mov	r7,sp
8000217a:	20 1d       	sub	sp,4
8000217c:	ef 4c ff fc 	st.w	r7[-4],r12
		J = 410;
	}
	
#endif

	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
80002180:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002184:	58 08       	cp.w	r8,0
80002186:	c2 20       	breq	800021ca <SetSpeed+0x56>
	{
		// Standard Speed
		A = 0; //6;
80002188:	4a 18       	lddpc	r8,8000220c <SetSpeed+0x98>
8000218a:	30 09       	mov	r9,0
8000218c:	91 09       	st.w	r8[0x0],r9
		B = 32; //64;
8000218e:	4a 18       	lddpc	r8,80002210 <SetSpeed+0x9c>
80002190:	32 09       	mov	r9,32
80002192:	91 09       	st.w	r8[0x0],r9
		C = 30; //60;
80002194:	4a 08       	lddpc	r8,80002214 <SetSpeed+0xa0>
80002196:	31 e9       	mov	r9,30
80002198:	91 09       	st.w	r8[0x0],r9
		D = 2; //10;
8000219a:	4a 08       	lddpc	r8,80002218 <SetSpeed+0xa4>
8000219c:	30 29       	mov	r9,2
8000219e:	91 09       	st.w	r8[0x0],r9
		E = 2; //9;
800021a0:	49 f8       	lddpc	r8,8000221c <SetSpeed+0xa8>
800021a2:	30 29       	mov	r9,2
800021a4:	91 09       	st.w	r8[0x0],r9
		F = 27; //55;
800021a6:	49 f8       	lddpc	r8,80002220 <SetSpeed+0xac>
800021a8:	31 b9       	mov	r9,27
800021aa:	91 09       	st.w	r8[0x0],r9
		G = 0; //0;
800021ac:	49 e8       	lddpc	r8,80002224 <SetSpeed+0xb0>
800021ae:	30 09       	mov	r9,0
800021b0:	91 09       	st.w	r8[0x0],r9
		H = 240; //480;
800021b2:	49 e8       	lddpc	r8,80002228 <SetSpeed+0xb4>
800021b4:	e0 69 00 f0 	mov	r9,240
800021b8:	91 09       	st.w	r8[0x0],r9
		I = 35; //70;
800021ba:	49 d8       	lddpc	r8,8000222c <SetSpeed+0xb8>
800021bc:	32 39       	mov	r9,35
800021be:	91 09       	st.w	r8[0x0],r9
		J = 205; //410;
800021c0:	49 c8       	lddpc	r8,80002230 <SetSpeed+0xbc>
800021c2:	e0 69 00 cd 	mov	r9,205
800021c6:	91 09       	st.w	r8[0x0],r9
800021c8:	c1 f8       	rjmp	80002206 <SetSpeed+0x92>


	else
	{
		// Overdrive Speed
		A = 1.5;
800021ca:	49 18       	lddpc	r8,8000220c <SetSpeed+0x98>
800021cc:	30 19       	mov	r9,1
800021ce:	91 09       	st.w	r8[0x0],r9
		B = 7.5;
800021d0:	49 08       	lddpc	r8,80002210 <SetSpeed+0x9c>
800021d2:	30 79       	mov	r9,7
800021d4:	91 09       	st.w	r8[0x0],r9
		C = 7.5;
800021d6:	49 08       	lddpc	r8,80002214 <SetSpeed+0xa0>
800021d8:	30 79       	mov	r9,7
800021da:	91 09       	st.w	r8[0x0],r9
		D = 2.5;
800021dc:	48 f8       	lddpc	r8,80002218 <SetSpeed+0xa4>
800021de:	30 29       	mov	r9,2
800021e0:	91 09       	st.w	r8[0x0],r9
		E = 0.75;
800021e2:	48 f8       	lddpc	r8,8000221c <SetSpeed+0xa8>
800021e4:	30 09       	mov	r9,0
800021e6:	91 09       	st.w	r8[0x0],r9
		F = 7;
800021e8:	48 e8       	lddpc	r8,80002220 <SetSpeed+0xac>
800021ea:	30 79       	mov	r9,7
800021ec:	91 09       	st.w	r8[0x0],r9
		G = 2.5;
800021ee:	48 e8       	lddpc	r8,80002224 <SetSpeed+0xb0>
800021f0:	30 29       	mov	r9,2
800021f2:	91 09       	st.w	r8[0x0],r9
		H = 70;
800021f4:	48 d8       	lddpc	r8,80002228 <SetSpeed+0xb4>
800021f6:	34 69       	mov	r9,70
800021f8:	91 09       	st.w	r8[0x0],r9
		I = 8.5;
800021fa:	48 d8       	lddpc	r8,8000222c <SetSpeed+0xb8>
800021fc:	30 89       	mov	r9,8
800021fe:	91 09       	st.w	r8[0x0],r9
		J = 40;
80002200:	48 c8       	lddpc	r8,80002230 <SetSpeed+0xbc>
80002202:	32 89       	mov	r9,40
80002204:	91 09       	st.w	r8[0x0],r9
	}
}
80002206:	2f fd       	sub	sp,-4
80002208:	e3 cd 80 80 	ldm	sp++,r7,pc
8000220c:	00 00       	add	r0,r0
8000220e:	02 bc       	st.h	r1++,r12
80002210:	00 00       	add	r0,r0
80002212:	02 c0       	st.b	r1++,r0
80002214:	00 00       	add	r0,r0
80002216:	02 c8       	st.b	r1++,r8
80002218:	00 00       	add	r0,r0
8000221a:	02 b8       	st.h	r1++,r8
8000221c:	00 00       	add	r0,r0
8000221e:	02 d4       	st.w	--r1,r4
80002220:	00 00       	add	r0,r0
80002222:	02 dc       	st.w	--r1,r12
80002224:	00 00       	add	r0,r0
80002226:	02 cc       	st.b	r1++,r12
80002228:	00 00       	add	r0,r0
8000222a:	02 d0       	st.w	--r1,r0
8000222c:	00 00       	add	r0,r0
8000222e:	02 d8       	st.w	--r1,r8
80002230:	00 00       	add	r0,r0
80002232:	02 c4       	st.b	r1++,r4

80002234 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
80002234:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002238:	1a 97       	mov	r7,sp
8000223a:	fa cd 00 e0 	sub	sp,sp,224
8000223e:	18 98       	mov	r8,r12
80002240:	ef 68 ff 48 	st.b	r7[-184],r8
	int result;

	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ);
80002244:	fe f8 05 9c 	ld.w	r8,pc[1436]
80002248:	70 08       	ld.w	r8,r8[0x0]
8000224a:	ef 48 ff 84 	st.w	r7[-124],r8
8000224e:	e0 68 e1 00 	mov	r8,57600
80002252:	ea 18 05 f5 	orh	r8,0x5f5
80002256:	ef 48 ff 80 	st.w	r7[-128],r8
8000225a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000225e:	ef 48 ff 8c 	st.w	r7[-116],r8
80002262:	ee f8 ff 80 	ld.w	r8,r7[-128]
80002266:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000226a:	ee f2 ff 8c 	ld.w	r2,r7[-116]
8000226e:	30 03       	mov	r3,0
80002270:	ee fa ff 88 	ld.w	r10,r7[-120]
80002274:	30 0b       	mov	r11,0
80002276:	e6 0a 02 49 	mul	r9,r3,r10
8000227a:	f6 02 02 48 	mul	r8,r11,r2
8000227e:	10 09       	add	r9,r8
80002280:	e4 0a 06 4a 	mulu.d	r10,r2,r10
80002284:	16 09       	add	r9,r11
80002286:	12 9b       	mov	r11,r9
80002288:	ee 78 42 3f 	mov	r8,999999
8000228c:	30 09       	mov	r9,0
8000228e:	10 0a       	add	r10,r8
80002290:	f6 09 00 4b 	adc	r11,r11,r9
80002294:	ee 78 42 40 	mov	r8,1000000
80002298:	30 09       	mov	r9,0
8000229a:	f0 1f 01 53 	mcall	800027e4 <OWTouchReset+0x5b0>
8000229e:	14 98       	mov	r8,r10
800022a0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800022a2:	ef 48 ff 94 	st.w	r7[-108],r8
800022a6:	ee c8 00 b4 	sub	r8,r7,180
800022aa:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022ae:	e1 b8 00 42 	mfsr	r8,0x108
800022b2:	10 99       	mov	r9,r8
800022b4:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022b8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022ba:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022be:	70 09       	ld.w	r9,r8[0x0]
800022c0:	ee f8 ff 94 	ld.w	r8,r7[-108]
800022c4:	10 09       	add	r9,r8
800022c6:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022ca:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800022cc:	ee f9 ff 90 	ld.w	r9,r7[-112]
800022d0:	30 08       	mov	r8,0
800022d2:	f3 68 00 08 	st.b	r9[8],r8
800022d6:	ee c8 00 b4 	sub	r8,r7,180
800022da:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022de:	e1 b8 00 42 	mfsr	r8,0x108
800022e2:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800022e6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022ea:	f1 39 00 08 	ld.ub	r9,r8[8]
800022ee:	30 28       	mov	r8,2
800022f0:	f0 09 18 00 	cp.b	r9,r8
800022f4:	c0 31       	brne	800022fa <OWTouchReset+0xc6>
    return false;
800022f6:	30 08       	mov	r8,0
800022f8:	c4 38       	rjmp	8000237e <OWTouchReset+0x14a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800022fa:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022fe:	f1 39 00 08 	ld.ub	r9,r8[8]
80002302:	30 18       	mov	r8,1
80002304:	f0 09 18 00 	cp.b	r9,r8
80002308:	c0 31       	brne	8000230e <OWTouchReset+0xda>
    return true;
8000230a:	30 18       	mov	r8,1
8000230c:	c3 98       	rjmp	8000237e <OWTouchReset+0x14a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000230e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002312:	70 09       	ld.w	r9,r8[0x0]
80002314:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002318:	70 18       	ld.w	r8,r8[0x4]
8000231a:	10 39       	cp.w	r9,r8
8000231c:	e0 88 00 1a 	brls	80002350 <OWTouchReset+0x11c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002320:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002324:	70 08       	ld.w	r8,r8[0x0]
80002326:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000232a:	10 39       	cp.w	r9,r8
8000232c:	c1 02       	brcc	8000234c <OWTouchReset+0x118>
8000232e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002332:	70 18       	ld.w	r8,r8[0x4]
80002334:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002338:	10 39       	cp.w	r9,r8
8000233a:	e0 88 00 09 	brls	8000234c <OWTouchReset+0x118>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000233e:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002342:	30 18       	mov	r8,1
80002344:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002348:	30 18       	mov	r8,1
8000234a:	c1 a8       	rjmp	8000237e <OWTouchReset+0x14a>
    }
    return false;
8000234c:	30 08       	mov	r8,0
8000234e:	c1 88       	rjmp	8000237e <OWTouchReset+0x14a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002350:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002354:	70 08       	ld.w	r8,r8[0x0]
80002356:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000235a:	10 39       	cp.w	r9,r8
8000235c:	c0 93       	brcs	8000236e <OWTouchReset+0x13a>
8000235e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002362:	70 18       	ld.w	r8,r8[0x4]
80002364:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002368:	10 39       	cp.w	r9,r8
8000236a:	e0 88 00 09 	brls	8000237c <OWTouchReset+0x148>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000236e:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002372:	30 18       	mov	r8,1
80002374:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002378:	30 18       	mov	r8,1
8000237a:	c0 28       	rjmp	8000237e <OWTouchReset+0x14a>
    }
    return false;
8000237c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000237e:	58 08       	cp.w	r8,0
80002380:	ca b0       	breq	800022d6 <OWTouchReset+0xa2>
	drive_DQ_low(idx);
80002382:	ef 38 ff 48 	ld.ub	r8,r7[-184]
80002386:	10 9c       	mov	r12,r8
80002388:	f0 1f 01 18 	mcall	800027e8 <OWTouchReset+0x5b4>
	cpu_delay_us(H, EC_CPU_CLOCK_100MHZ);	//tRSTL (reset low) 480-640us
8000238c:	fe f8 04 60 	ld.w	r8,pc[1120]
80002390:	70 08       	ld.w	r8,r8[0x0]
80002392:	ef 48 ff a4 	st.w	r7[-92],r8
80002396:	e0 68 e1 00 	mov	r8,57600
8000239a:	ea 18 05 f5 	orh	r8,0x5f5
8000239e:	ef 48 ff a0 	st.w	r7[-96],r8
800023a2:	ee f8 ff a4 	ld.w	r8,r7[-92]
800023a6:	ef 48 ff ac 	st.w	r7[-84],r8
800023aa:	ee f8 ff a0 	ld.w	r8,r7[-96]
800023ae:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800023b2:	ee fc ff ac 	ld.w	r12,r7[-84]
800023b6:	ef 4c ff 2c 	st.w	r7[-212],r12
800023ba:	30 0b       	mov	r11,0
800023bc:	ef 4b ff 28 	st.w	r7[-216],r11
800023c0:	ee f9 ff a8 	ld.w	r9,r7[-88]
800023c4:	ef 49 ff 24 	st.w	r7[-220],r9
800023c8:	30 08       	mov	r8,0
800023ca:	ef 48 ff 20 	st.w	r7[-224],r8
800023ce:	ee fa ff 28 	ld.w	r10,r7[-216]
800023d2:	ee fc ff 24 	ld.w	r12,r7[-220]
800023d6:	b9 3a       	mul	r10,r12
800023d8:	ee f8 ff 20 	ld.w	r8,r7[-224]
800023dc:	ee fb ff 2c 	ld.w	r11,r7[-212]
800023e0:	b7 38       	mul	r8,r11
800023e2:	10 0a       	add	r10,r8
800023e4:	ee fc ff 2c 	ld.w	r12,r7[-212]
800023e8:	ee fb ff 24 	ld.w	r11,r7[-220]
800023ec:	f8 0b 06 48 	mulu.d	r8,r12,r11
800023f0:	12 0a       	add	r10,r9
800023f2:	14 99       	mov	r9,r10
800023f4:	ee 7a 42 3f 	mov	r10,999999
800023f8:	30 0b       	mov	r11,0
800023fa:	f0 0a 00 0a 	add	r10,r8,r10
800023fe:	f2 0b 00 4b 	adc	r11,r9,r11
80002402:	ee 78 42 40 	mov	r8,1000000
80002406:	30 09       	mov	r9,0
80002408:	f0 1f 00 f7 	mcall	800027e4 <OWTouchReset+0x5b0>
8000240c:	14 98       	mov	r8,r10
8000240e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002410:	ef 48 ff b4 	st.w	r7[-76],r8
80002414:	ee c8 00 a8 	sub	r8,r7,168
80002418:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000241c:	e1 b8 00 42 	mfsr	r8,0x108
80002420:	10 99       	mov	r9,r8
80002422:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002426:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002428:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000242c:	70 09       	ld.w	r9,r8[0x0]
8000242e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002432:	10 09       	add	r9,r8
80002434:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002438:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000243a:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000243e:	30 08       	mov	r8,0
80002440:	f3 68 00 08 	st.b	r9[8],r8
80002444:	ee c8 00 a8 	sub	r8,r7,168
80002448:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000244c:	e1 b8 00 42 	mfsr	r8,0x108
80002450:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002454:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002458:	f1 39 00 08 	ld.ub	r9,r8[8]
8000245c:	30 28       	mov	r8,2
8000245e:	f0 09 18 00 	cp.b	r9,r8
80002462:	c0 31       	brne	80002468 <OWTouchReset+0x234>
    return false;
80002464:	30 08       	mov	r8,0
80002466:	c4 38       	rjmp	800024ec <OWTouchReset+0x2b8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002468:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000246c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002470:	30 18       	mov	r8,1
80002472:	f0 09 18 00 	cp.b	r9,r8
80002476:	c0 31       	brne	8000247c <OWTouchReset+0x248>
    return true;
80002478:	30 18       	mov	r8,1
8000247a:	c3 98       	rjmp	800024ec <OWTouchReset+0x2b8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000247c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002480:	70 09       	ld.w	r9,r8[0x0]
80002482:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002486:	70 18       	ld.w	r8,r8[0x4]
80002488:	10 39       	cp.w	r9,r8
8000248a:	e0 88 00 1a 	brls	800024be <OWTouchReset+0x28a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000248e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002492:	70 08       	ld.w	r8,r8[0x0]
80002494:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002498:	10 39       	cp.w	r9,r8
8000249a:	c1 02       	brcc	800024ba <OWTouchReset+0x286>
8000249c:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024a0:	70 18       	ld.w	r8,r8[0x4]
800024a2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024a6:	10 39       	cp.w	r9,r8
800024a8:	e0 88 00 09 	brls	800024ba <OWTouchReset+0x286>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024ac:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024b0:	30 18       	mov	r8,1
800024b2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024b6:	30 18       	mov	r8,1
800024b8:	c1 a8       	rjmp	800024ec <OWTouchReset+0x2b8>
    }
    return false;
800024ba:	30 08       	mov	r8,0
800024bc:	c1 88       	rjmp	800024ec <OWTouchReset+0x2b8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800024be:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024c2:	70 08       	ld.w	r8,r8[0x0]
800024c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024c8:	10 39       	cp.w	r9,r8
800024ca:	c0 93       	brcs	800024dc <OWTouchReset+0x2a8>
800024cc:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024d0:	70 18       	ld.w	r8,r8[0x4]
800024d2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024d6:	10 39       	cp.w	r9,r8
800024d8:	e0 88 00 09 	brls	800024ea <OWTouchReset+0x2b6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024dc:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024e0:	30 18       	mov	r8,1
800024e2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024e6:	30 18       	mov	r8,1
800024e8:	c0 28       	rjmp	800024ec <OWTouchReset+0x2b8>
    }
    return false;
800024ea:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800024ec:	58 08       	cp.w	r8,0
800024ee:	ca b0       	breq	80002444 <OWTouchReset+0x210>
	release_the_bus(idx);
800024f0:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024f4:	10 9c       	mov	r12,r8
800024f6:	f0 1f 00 bf 	mcall	800027f0 <OWTouchReset+0x5bc>
	
	gpio_input(idx); //14may15 experiment
800024fa:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024fe:	10 9c       	mov	r12,r8
80002500:	f0 1f 00 bd 	mcall	800027f4 <OWTouchReset+0x5c0>

	
	cpu_delay_us(I, EC_CPU_CLOCK_100MHZ);	//tMSP (presence detect sample) 60-75us
80002504:	fe f8 02 f4 	ld.w	r8,pc[756]
80002508:	70 08       	ld.w	r8,r8[0x0]
8000250a:	ef 48 ff c4 	st.w	r7[-60],r8
8000250e:	e0 68 e1 00 	mov	r8,57600
80002512:	ea 18 05 f5 	orh	r8,0x5f5
80002516:	ef 48 ff c0 	st.w	r7[-64],r8
8000251a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000251e:	ef 48 ff cc 	st.w	r7[-52],r8
80002522:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002526:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000252a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000252e:	ef 49 ff 3c 	st.w	r7[-196],r9
80002532:	30 08       	mov	r8,0
80002534:	ef 48 ff 38 	st.w	r7[-200],r8
80002538:	ee fc ff c8 	ld.w	r12,r7[-56]
8000253c:	ef 4c ff 34 	st.w	r7[-204],r12
80002540:	30 0b       	mov	r11,0
80002542:	ef 4b ff 30 	st.w	r7[-208],r11
80002546:	ee fa ff 38 	ld.w	r10,r7[-200]
8000254a:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000254e:	b3 3a       	mul	r10,r9
80002550:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002554:	ee fc ff 3c 	ld.w	r12,r7[-196]
80002558:	b9 38       	mul	r8,r12
8000255a:	10 0a       	add	r10,r8
8000255c:	ee fb ff 3c 	ld.w	r11,r7[-196]
80002560:	ee fc ff 34 	ld.w	r12,r7[-204]
80002564:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002568:	12 0a       	add	r10,r9
8000256a:	14 99       	mov	r9,r10
8000256c:	ee 7a 42 3f 	mov	r10,999999
80002570:	30 0b       	mov	r11,0
80002572:	f0 0a 00 0a 	add	r10,r8,r10
80002576:	f2 0b 00 4b 	adc	r11,r9,r11
8000257a:	ee 78 42 40 	mov	r8,1000000
8000257e:	30 09       	mov	r9,0
80002580:	f0 1f 00 99 	mcall	800027e4 <OWTouchReset+0x5b0>
80002584:	14 98       	mov	r8,r10
80002586:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002588:	ef 48 ff d4 	st.w	r7[-44],r8
8000258c:	ee c8 00 9c 	sub	r8,r7,156
80002590:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002594:	e1 b8 00 42 	mfsr	r8,0x108
80002598:	10 99       	mov	r9,r8
8000259a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000259e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025a0:	ee f8 ff d0 	ld.w	r8,r7[-48]
800025a4:	70 09       	ld.w	r9,r8[0x0]
800025a6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800025aa:	10 09       	add	r9,r8
800025ac:	ee f8 ff d0 	ld.w	r8,r7[-48]
800025b0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800025b2:	ee f9 ff d0 	ld.w	r9,r7[-48]
800025b6:	30 08       	mov	r8,0
800025b8:	f3 68 00 08 	st.b	r9[8],r8
800025bc:	ee c8 00 9c 	sub	r8,r7,156
800025c0:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025c4:	e1 b8 00 42 	mfsr	r8,0x108
800025c8:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800025cc:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025d0:	f1 39 00 08 	ld.ub	r9,r8[8]
800025d4:	30 28       	mov	r8,2
800025d6:	f0 09 18 00 	cp.b	r9,r8
800025da:	c0 31       	brne	800025e0 <OWTouchReset+0x3ac>
    return false;
800025dc:	30 08       	mov	r8,0
800025de:	c4 38       	rjmp	80002664 <OWTouchReset+0x430>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800025e0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025e4:	f1 39 00 08 	ld.ub	r9,r8[8]
800025e8:	30 18       	mov	r8,1
800025ea:	f0 09 18 00 	cp.b	r9,r8
800025ee:	c0 31       	brne	800025f4 <OWTouchReset+0x3c0>
    return true;
800025f0:	30 18       	mov	r8,1
800025f2:	c3 98       	rjmp	80002664 <OWTouchReset+0x430>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025f4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025f8:	70 09       	ld.w	r9,r8[0x0]
800025fa:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025fe:	70 18       	ld.w	r8,r8[0x4]
80002600:	10 39       	cp.w	r9,r8
80002602:	e0 88 00 1a 	brls	80002636 <OWTouchReset+0x402>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002606:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000260a:	70 08       	ld.w	r8,r8[0x0]
8000260c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002610:	10 39       	cp.w	r9,r8
80002612:	c1 02       	brcc	80002632 <OWTouchReset+0x3fe>
80002614:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002618:	70 18       	ld.w	r8,r8[0x4]
8000261a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000261e:	10 39       	cp.w	r9,r8
80002620:	e0 88 00 09 	brls	80002632 <OWTouchReset+0x3fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002624:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002628:	30 18       	mov	r8,1
8000262a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000262e:	30 18       	mov	r8,1
80002630:	c1 a8       	rjmp	80002664 <OWTouchReset+0x430>
    }
    return false;
80002632:	30 08       	mov	r8,0
80002634:	c1 88       	rjmp	80002664 <OWTouchReset+0x430>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002636:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000263a:	70 08       	ld.w	r8,r8[0x0]
8000263c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002640:	10 39       	cp.w	r9,r8
80002642:	c0 93       	brcs	80002654 <OWTouchReset+0x420>
80002644:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002648:	70 18       	ld.w	r8,r8[0x4]
8000264a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000264e:	10 39       	cp.w	r9,r8
80002650:	e0 88 00 09 	brls	80002662 <OWTouchReset+0x42e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002654:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002658:	30 18       	mov	r8,1
8000265a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000265e:	30 18       	mov	r8,1
80002660:	c0 28       	rjmp	80002664 <OWTouchReset+0x430>
    }
    return false;
80002662:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002664:	58 08       	cp.w	r8,0
80002666:	ca b0       	breq	800025bc <OWTouchReset+0x388>
	result = sample_line(idx);
80002668:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000266c:	10 9c       	mov	r12,r8
8000266e:	f0 1f 00 64 	mcall	800027fc <OWTouchReset+0x5c8>
80002672:	18 98       	mov	r8,r12
80002674:	ef 48 ff 7c 	st.w	r7[-132],r8
	
	gpio_input(idx); //14may15 experiement
80002678:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000267c:	10 9c       	mov	r12,r8
8000267e:	f0 1f 00 5e 	mcall	800027f4 <OWTouchReset+0x5c0>

	cpu_delay_us(J, EC_CPU_CLOCK_100MHZ); // Complete the reset sequence recovery 5-??us (no max?)
80002682:	4e 08       	lddpc	r8,80002800 <OWTouchReset+0x5cc>
80002684:	70 08       	ld.w	r8,r8[0x0]
80002686:	ef 48 ff e4 	st.w	r7[-28],r8
8000268a:	e0 68 e1 00 	mov	r8,57600
8000268e:	ea 18 05 f5 	orh	r8,0x5f5
80002692:	ef 48 ff e0 	st.w	r7[-32],r8
80002696:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000269a:	ef 48 ff ec 	st.w	r7[-20],r8
8000269e:	ee f8 ff e0 	ld.w	r8,r7[-32]
800026a2:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800026a6:	ee fb ff ec 	ld.w	r11,r7[-20]
800026aa:	ef 4b ff 44 	st.w	r7[-188],r11
800026ae:	30 09       	mov	r9,0
800026b0:	ef 49 ff 40 	st.w	r7[-192],r9
800026b4:	ee f0 ff e8 	ld.w	r0,r7[-24]
800026b8:	30 01       	mov	r1,0
800026ba:	ee fa ff 40 	ld.w	r10,r7[-192]
800026be:	a1 3a       	mul	r10,r0
800026c0:	ee fc ff 44 	ld.w	r12,r7[-188]
800026c4:	e2 0c 02 48 	mul	r8,r1,r12
800026c8:	10 0a       	add	r10,r8
800026ca:	ee fb ff 44 	ld.w	r11,r7[-188]
800026ce:	f6 00 06 48 	mulu.d	r8,r11,r0
800026d2:	12 0a       	add	r10,r9
800026d4:	14 99       	mov	r9,r10
800026d6:	ee 7a 42 3f 	mov	r10,999999
800026da:	30 0b       	mov	r11,0
800026dc:	f0 0a 00 0a 	add	r10,r8,r10
800026e0:	f2 0b 00 4b 	adc	r11,r9,r11
800026e4:	ee 78 42 40 	mov	r8,1000000
800026e8:	30 09       	mov	r9,0
800026ea:	f0 1f 00 3f 	mcall	800027e4 <OWTouchReset+0x5b0>
800026ee:	14 98       	mov	r8,r10
800026f0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800026f2:	ef 48 ff f4 	st.w	r7[-12],r8
800026f6:	ee c8 00 90 	sub	r8,r7,144
800026fa:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026fe:	e1 b8 00 42 	mfsr	r8,0x108
80002702:	10 99       	mov	r9,r8
80002704:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002708:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000270a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000270e:	70 09       	ld.w	r9,r8[0x0]
80002710:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002714:	10 09       	add	r9,r8
80002716:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000271a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000271c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002720:	30 08       	mov	r8,0
80002722:	f3 68 00 08 	st.b	r9[8],r8
80002726:	ee c8 00 90 	sub	r8,r7,144
8000272a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000272e:	e1 b8 00 42 	mfsr	r8,0x108
80002732:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002736:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000273a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000273e:	30 28       	mov	r8,2
80002740:	f0 09 18 00 	cp.b	r9,r8
80002744:	c0 31       	brne	8000274a <OWTouchReset+0x516>
    return false;
80002746:	30 08       	mov	r8,0
80002748:	c4 38       	rjmp	800027ce <OWTouchReset+0x59a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000274a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000274e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002752:	30 18       	mov	r8,1
80002754:	f0 09 18 00 	cp.b	r9,r8
80002758:	c0 31       	brne	8000275e <OWTouchReset+0x52a>
    return true;
8000275a:	30 18       	mov	r8,1
8000275c:	c3 98       	rjmp	800027ce <OWTouchReset+0x59a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000275e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002762:	70 09       	ld.w	r9,r8[0x0]
80002764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002768:	70 18       	ld.w	r8,r8[0x4]
8000276a:	10 39       	cp.w	r9,r8
8000276c:	e0 88 00 1a 	brls	800027a0 <OWTouchReset+0x56c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002774:	70 08       	ld.w	r8,r8[0x0]
80002776:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000277a:	10 39       	cp.w	r9,r8
8000277c:	c1 02       	brcc	8000279c <OWTouchReset+0x568>
8000277e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002782:	70 18       	ld.w	r8,r8[0x4]
80002784:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002788:	10 39       	cp.w	r9,r8
8000278a:	e0 88 00 09 	brls	8000279c <OWTouchReset+0x568>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000278e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002792:	30 18       	mov	r8,1
80002794:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002798:	30 18       	mov	r8,1
8000279a:	c1 a8       	rjmp	800027ce <OWTouchReset+0x59a>
    }
    return false;
8000279c:	30 08       	mov	r8,0
8000279e:	c1 88       	rjmp	800027ce <OWTouchReset+0x59a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800027a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027a4:	70 08       	ld.w	r8,r8[0x0]
800027a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027aa:	10 39       	cp.w	r9,r8
800027ac:	c0 93       	brcs	800027be <OWTouchReset+0x58a>
800027ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027b2:	70 18       	ld.w	r8,r8[0x4]
800027b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027b8:	10 39       	cp.w	r9,r8
800027ba:	e0 88 00 09 	brls	800027cc <OWTouchReset+0x598>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800027c2:	30 18       	mov	r8,1
800027c4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027c8:	30 18       	mov	r8,1
800027ca:	c0 28       	rjmp	800027ce <OWTouchReset+0x59a>
    }
    return false;
800027cc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800027ce:	58 08       	cp.w	r8,0
800027d0:	ca b0       	breq	80002726 <OWTouchReset+0x4f2>
	return result; // Return sample presence pulse result
800027d2:	ee f8 ff 7c 	ld.w	r8,r7[-132]
}
800027d6:	10 9c       	mov	r12,r8
800027d8:	2c 8d       	sub	sp,-224
800027da:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800027de:	00 00       	add	r0,r0
800027e0:	00 00       	add	r0,r0
800027e2:	02 bc       	st.h	r1++,r12
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	aa 62       	st.h	r5[0xc],r2
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	20 5c       	sub	r12,5
800027ec:	00 00       	add	r0,r0
800027ee:	02 d0       	st.w	--r1,r0
800027f0:	80 00       	ld.sh	r0,r0[0x0]
800027f2:	20 ac       	sub	r12,10
800027f4:	80 00       	ld.sh	r0,r0[0x0]
800027f6:	20 f0       	sub	r0,15
800027f8:	00 00       	add	r0,r0
800027fa:	02 d8       	st.w	--r1,r8
800027fc:	80 00       	ld.sh	r0,r0[0x0]
800027fe:	21 30       	sub	r0,19
80002800:	00 00       	add	r0,r0
80002802:	02 c4       	st.b	r1++,r4

80002804 <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
80002804:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002808:	1a 97       	mov	r7,sp
8000280a:	20 fd       	sub	sp,60
8000280c:	18 98       	mov	r8,r12
8000280e:	ef 68 ff c4 	st.b	r7[-60],r8
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
80002812:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80002816:	10 9c       	mov	r12,r8
80002818:	f0 1f 00 61 	mcall	8000299c <drive_DQ_low_and_release_the_bus+0x198>
8000281c:	18 98       	mov	r8,r12
8000281e:	ef 68 ff d7 	st.b	r7[-41],r8
	
	ioFlagsInput = (GPIO_DIR_INPUT);
80002822:	30 08       	mov	r8,0
80002824:	ef 48 ff dc 	st.w	r7[-36],r8
	ioFlagsOutput = (GPIO_DIR_OUTPUT); //14may15 experiment
80002828:	30 18       	mov	r8,1
8000282a:	ef 48 ff d8 	st.w	r7[-40],r8

	gpio_configure_pin(ioPin, ioFlagsOutput); //14may15 experiment
8000282e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002832:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80002836:	12 9b       	mov	r11,r9
80002838:	10 9c       	mov	r12,r8
8000283a:	f0 1f 00 5a 	mcall	800029a0 <drive_DQ_low_and_release_the_bus+0x19c>

	gpio_set_pin_low(ioPin);
8000283e:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80002842:	10 9c       	mov	r12,r8
80002844:	f0 1f 00 58 	mcall	800029a4 <drive_DQ_low_and_release_the_bus+0x1a0>
	
	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ);	//tW1L 5-15us
80002848:	4d 88       	lddpc	r8,800029a8 <drive_DQ_low_and_release_the_bus+0x1a4>
8000284a:	70 08       	ld.w	r8,r8[0x0]
8000284c:	ef 48 ff e4 	st.w	r7[-28],r8
80002850:	e0 68 e1 00 	mov	r8,57600
80002854:	ea 18 05 f5 	orh	r8,0x5f5
80002858:	ef 48 ff e0 	st.w	r7[-32],r8
8000285c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002860:	ef 48 ff ec 	st.w	r7[-20],r8
80002864:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002868:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000286c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002870:	30 01       	mov	r1,0
80002872:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002876:	30 03       	mov	r3,0
80002878:	e2 02 02 4a 	mul	r10,r1,r2
8000287c:	e6 00 02 48 	mul	r8,r3,r0
80002880:	10 0a       	add	r10,r8
80002882:	e0 02 06 48 	mulu.d	r8,r0,r2
80002886:	12 0a       	add	r10,r9
80002888:	14 99       	mov	r9,r10
8000288a:	ee 7a 42 3f 	mov	r10,999999
8000288e:	30 0b       	mov	r11,0
80002890:	f0 0a 00 0a 	add	r10,r8,r10
80002894:	f2 0b 00 4b 	adc	r11,r9,r11
80002898:	ee 78 42 40 	mov	r8,1000000
8000289c:	30 09       	mov	r9,0
8000289e:	f0 1f 00 44 	mcall	800029ac <drive_DQ_low_and_release_the_bus+0x1a8>
800028a2:	14 98       	mov	r8,r10
800028a4:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800028a6:	ef 48 ff f4 	st.w	r7[-12],r8
800028aa:	ee c8 00 38 	sub	r8,r7,56
800028ae:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800028b2:	e1 b8 00 42 	mfsr	r8,0x108
800028b6:	10 99       	mov	r9,r8
800028b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028bc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800028be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028c2:	70 09       	ld.w	r9,r8[0x0]
800028c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028c8:	10 09       	add	r9,r8
800028ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028ce:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800028d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800028d4:	30 08       	mov	r8,0
800028d6:	f3 68 00 08 	st.b	r9[8],r8
800028da:	ee c8 00 38 	sub	r8,r7,56
800028de:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800028e2:	e1 b8 00 42 	mfsr	r8,0x108
800028e6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800028ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ee:	f1 39 00 08 	ld.ub	r9,r8[8]
800028f2:	30 28       	mov	r8,2
800028f4:	f0 09 18 00 	cp.b	r9,r8
800028f8:	c0 31       	brne	800028fe <drive_DQ_low_and_release_the_bus+0xfa>
    return false;
800028fa:	30 08       	mov	r8,0
800028fc:	c4 38       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800028fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002902:	f1 39 00 08 	ld.ub	r9,r8[8]
80002906:	30 18       	mov	r8,1
80002908:	f0 09 18 00 	cp.b	r9,r8
8000290c:	c0 31       	brne	80002912 <drive_DQ_low_and_release_the_bus+0x10e>
    return true;
8000290e:	30 18       	mov	r8,1
80002910:	c3 98       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002912:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002916:	70 09       	ld.w	r9,r8[0x0]
80002918:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000291c:	70 18       	ld.w	r8,r8[0x4]
8000291e:	10 39       	cp.w	r9,r8
80002920:	e0 88 00 1a 	brls	80002954 <drive_DQ_low_and_release_the_bus+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002924:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002928:	70 08       	ld.w	r8,r8[0x0]
8000292a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000292e:	10 39       	cp.w	r9,r8
80002930:	c1 02       	brcc	80002950 <drive_DQ_low_and_release_the_bus+0x14c>
80002932:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002936:	70 18       	ld.w	r8,r8[0x4]
80002938:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000293c:	10 39       	cp.w	r9,r8
8000293e:	e0 88 00 09 	brls	80002950 <drive_DQ_low_and_release_the_bus+0x14c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002942:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002946:	30 18       	mov	r8,1
80002948:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000294c:	30 18       	mov	r8,1
8000294e:	c1 a8       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
    }
    return false;
80002950:	30 08       	mov	r8,0
80002952:	c1 88       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002954:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002958:	70 08       	ld.w	r8,r8[0x0]
8000295a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000295e:	10 39       	cp.w	r9,r8
80002960:	c0 93       	brcs	80002972 <drive_DQ_low_and_release_the_bus+0x16e>
80002962:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002966:	70 18       	ld.w	r8,r8[0x4]
80002968:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000296c:	10 39       	cp.w	r9,r8
8000296e:	e0 88 00 09 	brls	80002980 <drive_DQ_low_and_release_the_bus+0x17c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002972:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002976:	30 18       	mov	r8,1
80002978:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000297c:	30 18       	mov	r8,1
8000297e:	c0 28       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
    }
    return false;
80002980:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002982:	58 08       	cp.w	r8,0
80002984:	ca b0       	breq	800028da <drive_DQ_low_and_release_the_bus+0xd6>

	gpio_configure_pin(ioPin, ioFlagsInput); //14may15 experiment
80002986:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000298a:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000298e:	12 9b       	mov	r11,r9
80002990:	10 9c       	mov	r12,r8
80002992:	f0 1f 00 04 	mcall	800029a0 <drive_DQ_low_and_release_the_bus+0x19c>
	
}
80002996:	2f 1d       	sub	sp,-60
80002998:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000299c:	80 00       	ld.sh	r0,r0[0x0]
8000299e:	20 10       	sub	r0,1
800029a0:	80 00       	ld.sh	r0,r0[0x0]
800029a2:	48 28       	lddpc	r8,800029a8 <drive_DQ_low_and_release_the_bus+0x1a4>
800029a4:	80 00       	ld.sh	r0,r0[0x0]
800029a6:	4b 3c       	lddpc	r12,80002a70 <OWWriteBit+0xc0>
800029a8:	00 00       	add	r0,r0
800029aa:	02 bc       	st.h	r1++,r12
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	aa 62       	st.h	r5[0xc],r2

800029b0 <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
800029b0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800029b4:	1a 97       	mov	r7,sp
800029b6:	fa cd 00 ac 	sub	sp,sp,172
800029ba:	18 98       	mov	r8,r12
800029bc:	ef 4b ff 74 	st.w	r7[-140],r11
800029c0:	ef 68 ff 78 	st.b	r7[-136],r8
	if (bit)
800029c4:	ee f8 ff 74 	ld.w	r8,r7[-140]
800029c8:	58 08       	cp.w	r8,0
800029ca:	e0 80 00 ba 	breq	80002b3e <OWWriteBit+0x18e>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
800029ce:	ef 38 ff 78 	ld.ub	r8,r7[-136]
800029d2:	10 9c       	mov	r12,r8
800029d4:	f0 1f 01 0a 	mcall	80002dfc <OWWriteBit+0x44c>
#if 0
		drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough		cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tW1L 5-15us
		release_the_bus(idx);
#endif
		cpu_delay_us(B, EC_CPU_CLOCK_100MHZ);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
800029d8:	fe f8 04 28 	ld.w	r8,pc[1064]
800029dc:	70 08       	ld.w	r8,r8[0x0]
800029de:	ef 48 ff a4 	st.w	r7[-92],r8
800029e2:	e0 68 e1 00 	mov	r8,57600
800029e6:	ea 18 05 f5 	orh	r8,0x5f5
800029ea:	ef 48 ff a0 	st.w	r7[-96],r8
800029ee:	ee f8 ff a4 	ld.w	r8,r7[-92]
800029f2:	ef 48 ff ac 	st.w	r7[-84],r8
800029f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800029fa:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800029fe:	ee fc ff ac 	ld.w	r12,r7[-84]
80002a02:	ef 4c ff 60 	st.w	r7[-160],r12
80002a06:	30 0b       	mov	r11,0
80002a08:	ef 4b ff 5c 	st.w	r7[-164],r11
80002a0c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80002a10:	ef 49 ff 58 	st.w	r7[-168],r9
80002a14:	30 08       	mov	r8,0
80002a16:	ef 48 ff 54 	st.w	r7[-172],r8
80002a1a:	ee fa ff 5c 	ld.w	r10,r7[-164]
80002a1e:	ee fc ff 58 	ld.w	r12,r7[-168]
80002a22:	b9 3a       	mul	r10,r12
80002a24:	ee f8 ff 54 	ld.w	r8,r7[-172]
80002a28:	ee fb ff 60 	ld.w	r11,r7[-160]
80002a2c:	b7 38       	mul	r8,r11
80002a2e:	10 0a       	add	r10,r8
80002a30:	ee fc ff 60 	ld.w	r12,r7[-160]
80002a34:	ee fb ff 58 	ld.w	r11,r7[-168]
80002a38:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002a3c:	12 0a       	add	r10,r9
80002a3e:	14 99       	mov	r9,r10
80002a40:	ee 7a 42 3f 	mov	r10,999999
80002a44:	30 0b       	mov	r11,0
80002a46:	f0 0a 00 0a 	add	r10,r8,r10
80002a4a:	f2 0b 00 4b 	adc	r11,r9,r11
80002a4e:	ee 78 42 40 	mov	r8,1000000
80002a52:	30 09       	mov	r9,0
80002a54:	f0 1f 00 ec 	mcall	80002e04 <OWWriteBit+0x454>
80002a58:	14 98       	mov	r8,r10
80002a5a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002a5c:	ef 48 ff b4 	st.w	r7[-76],r8
80002a60:	ee c8 00 84 	sub	r8,r7,132
80002a64:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a68:	e1 b8 00 42 	mfsr	r8,0x108
80002a6c:	10 99       	mov	r9,r8
80002a6e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a72:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a74:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a78:	70 09       	ld.w	r9,r8[0x0]
80002a7a:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002a7e:	10 09       	add	r9,r8
80002a80:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a84:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002a86:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002a8a:	30 08       	mov	r8,0
80002a8c:	f3 68 00 08 	st.b	r9[8],r8
80002a90:	ee c8 00 84 	sub	r8,r7,132
80002a94:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a98:	e1 b8 00 42 	mfsr	r8,0x108
80002a9c:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002aa0:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002aa4:	f1 39 00 08 	ld.ub	r9,r8[8]
80002aa8:	30 28       	mov	r8,2
80002aaa:	f0 09 18 00 	cp.b	r9,r8
80002aae:	c0 31       	brne	80002ab4 <OWWriteBit+0x104>
    return false;
80002ab0:	30 08       	mov	r8,0
80002ab2:	c4 38       	rjmp	80002b38 <OWWriteBit+0x188>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002ab4:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ab8:	f1 39 00 08 	ld.ub	r9,r8[8]
80002abc:	30 18       	mov	r8,1
80002abe:	f0 09 18 00 	cp.b	r9,r8
80002ac2:	c0 31       	brne	80002ac8 <OWWriteBit+0x118>
    return true;
80002ac4:	30 18       	mov	r8,1
80002ac6:	c3 98       	rjmp	80002b38 <OWWriteBit+0x188>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ac8:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002acc:	70 09       	ld.w	r9,r8[0x0]
80002ace:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ad2:	70 18       	ld.w	r8,r8[0x4]
80002ad4:	10 39       	cp.w	r9,r8
80002ad6:	e0 88 00 1a 	brls	80002b0a <OWWriteBit+0x15a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ada:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ade:	70 08       	ld.w	r8,r8[0x0]
80002ae0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002ae4:	10 39       	cp.w	r9,r8
80002ae6:	c1 02       	brcc	80002b06 <OWWriteBit+0x156>
80002ae8:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002aec:	70 18       	ld.w	r8,r8[0x4]
80002aee:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002af2:	10 39       	cp.w	r9,r8
80002af4:	e0 88 00 09 	brls	80002b06 <OWWriteBit+0x156>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002af8:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002afc:	30 18       	mov	r8,1
80002afe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b02:	30 18       	mov	r8,1
80002b04:	c1 a8       	rjmp	80002b38 <OWWriteBit+0x188>
    }
    return false;
80002b06:	30 08       	mov	r8,0
80002b08:	c1 88       	rjmp	80002b38 <OWWriteBit+0x188>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002b0a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002b0e:	70 08       	ld.w	r8,r8[0x0]
80002b10:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002b14:	10 39       	cp.w	r9,r8
80002b16:	c0 93       	brcs	80002b28 <OWWriteBit+0x178>
80002b18:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002b1c:	70 18       	ld.w	r8,r8[0x4]
80002b1e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002b22:	10 39       	cp.w	r9,r8
80002b24:	e0 88 00 09 	brls	80002b36 <OWWriteBit+0x186>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002b28:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002b2c:	30 18       	mov	r8,1
80002b2e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b32:	30 18       	mov	r8,1
80002b34:	c0 28       	rjmp	80002b38 <OWWriteBit+0x188>
    }
    return false;
80002b36:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002b38:	58 08       	cp.w	r8,0
80002b3a:	ca b0       	breq	80002a90 <OWWriteBit+0xe0>
80002b3c:	c5 c9       	rjmp	80002df4 <OWWriteBit+0x444>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
80002b3e:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002b42:	10 9c       	mov	r12,r8
80002b44:	f0 1f 00 b1 	mcall	80002e08 <OWWriteBit+0x458>
		cpu_delay_us(C, EC_CPU_CLOCK_100MHZ);	//tW0L 60-120us
80002b48:	fe f8 02 c4 	ld.w	r8,pc[708]
80002b4c:	70 08       	ld.w	r8,r8[0x0]
80002b4e:	ef 48 ff c4 	st.w	r7[-60],r8
80002b52:	e0 68 e1 00 	mov	r8,57600
80002b56:	ea 18 05 f5 	orh	r8,0x5f5
80002b5a:	ef 48 ff c0 	st.w	r7[-64],r8
80002b5e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002b62:	ef 48 ff cc 	st.w	r7[-52],r8
80002b66:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002b6a:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002b6e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80002b72:	ef 49 ff 70 	st.w	r7[-144],r9
80002b76:	30 08       	mov	r8,0
80002b78:	ef 48 ff 6c 	st.w	r7[-148],r8
80002b7c:	ee fc ff c8 	ld.w	r12,r7[-56]
80002b80:	ef 4c ff 68 	st.w	r7[-152],r12
80002b84:	30 0b       	mov	r11,0
80002b86:	ef 4b ff 64 	st.w	r7[-156],r11
80002b8a:	ee fa ff 6c 	ld.w	r10,r7[-148]
80002b8e:	ee f9 ff 68 	ld.w	r9,r7[-152]
80002b92:	b3 3a       	mul	r10,r9
80002b94:	ee f8 ff 64 	ld.w	r8,r7[-156]
80002b98:	ee fc ff 70 	ld.w	r12,r7[-144]
80002b9c:	b9 38       	mul	r8,r12
80002b9e:	10 0a       	add	r10,r8
80002ba0:	ee fb ff 70 	ld.w	r11,r7[-144]
80002ba4:	ee fc ff 68 	ld.w	r12,r7[-152]
80002ba8:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002bac:	12 0a       	add	r10,r9
80002bae:	14 99       	mov	r9,r10
80002bb0:	ee 7a 42 3f 	mov	r10,999999
80002bb4:	30 0b       	mov	r11,0
80002bb6:	f0 0a 00 0a 	add	r10,r8,r10
80002bba:	f2 0b 00 4b 	adc	r11,r9,r11
80002bbe:	ee 78 42 40 	mov	r8,1000000
80002bc2:	30 09       	mov	r9,0
80002bc4:	f0 1f 00 90 	mcall	80002e04 <OWWriteBit+0x454>
80002bc8:	14 98       	mov	r8,r10
80002bca:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002bcc:	ef 48 ff d4 	st.w	r7[-44],r8
80002bd0:	ee c8 00 78 	sub	r8,r7,120
80002bd4:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002bd8:	e1 b8 00 42 	mfsr	r8,0x108
80002bdc:	10 99       	mov	r9,r8
80002bde:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002be2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002be4:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002be8:	70 09       	ld.w	r9,r8[0x0]
80002bea:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002bee:	10 09       	add	r9,r8
80002bf0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002bf4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002bf6:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002bfa:	30 08       	mov	r8,0
80002bfc:	f3 68 00 08 	st.b	r9[8],r8
80002c00:	ee c8 00 78 	sub	r8,r7,120
80002c04:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c08:	e1 b8 00 42 	mfsr	r8,0x108
80002c0c:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002c10:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c14:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c18:	30 28       	mov	r8,2
80002c1a:	f0 09 18 00 	cp.b	r9,r8
80002c1e:	c0 31       	brne	80002c24 <OWWriteBit+0x274>
    return false;
80002c20:	30 08       	mov	r8,0
80002c22:	c4 38       	rjmp	80002ca8 <OWWriteBit+0x2f8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002c24:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c28:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c2c:	30 18       	mov	r8,1
80002c2e:	f0 09 18 00 	cp.b	r9,r8
80002c32:	c0 31       	brne	80002c38 <OWWriteBit+0x288>
    return true;
80002c34:	30 18       	mov	r8,1
80002c36:	c3 98       	rjmp	80002ca8 <OWWriteBit+0x2f8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c38:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c3c:	70 09       	ld.w	r9,r8[0x0]
80002c3e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c42:	70 18       	ld.w	r8,r8[0x4]
80002c44:	10 39       	cp.w	r9,r8
80002c46:	e0 88 00 1a 	brls	80002c7a <OWWriteBit+0x2ca>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c4a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c4e:	70 08       	ld.w	r8,r8[0x0]
80002c50:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c54:	10 39       	cp.w	r9,r8
80002c56:	c1 02       	brcc	80002c76 <OWWriteBit+0x2c6>
80002c58:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c5c:	70 18       	ld.w	r8,r8[0x4]
80002c5e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c62:	10 39       	cp.w	r9,r8
80002c64:	e0 88 00 09 	brls	80002c76 <OWWriteBit+0x2c6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c68:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c6c:	30 18       	mov	r8,1
80002c6e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002c72:	30 18       	mov	r8,1
80002c74:	c1 a8       	rjmp	80002ca8 <OWWriteBit+0x2f8>
    }
    return false;
80002c76:	30 08       	mov	r8,0
80002c78:	c1 88       	rjmp	80002ca8 <OWWriteBit+0x2f8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c7a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c7e:	70 08       	ld.w	r8,r8[0x0]
80002c80:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c84:	10 39       	cp.w	r9,r8
80002c86:	c0 93       	brcs	80002c98 <OWWriteBit+0x2e8>
80002c88:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c8c:	70 18       	ld.w	r8,r8[0x4]
80002c8e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c92:	10 39       	cp.w	r9,r8
80002c94:	e0 88 00 09 	brls	80002ca6 <OWWriteBit+0x2f6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c98:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c9c:	30 18       	mov	r8,1
80002c9e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ca2:	30 18       	mov	r8,1
80002ca4:	c0 28       	rjmp	80002ca8 <OWWriteBit+0x2f8>
    }
    return false;
80002ca6:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002ca8:	58 08       	cp.w	r8,0
80002caa:	ca b0       	breq	80002c00 <OWWriteBit+0x250>
		release_the_bus(idx);
80002cac:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002cb0:	10 9c       	mov	r12,r8
80002cb2:	f0 1f 00 58 	mcall	80002e10 <OWWriteBit+0x460>
		cpu_delay_us(D, EC_CPU_CLOCK_100MHZ);	//tREC 5-??us
80002cb6:	4d 88       	lddpc	r8,80002e14 <OWWriteBit+0x464>
80002cb8:	70 08       	ld.w	r8,r8[0x0]
80002cba:	ef 48 ff e4 	st.w	r7[-28],r8
80002cbe:	e0 68 e1 00 	mov	r8,57600
80002cc2:	ea 18 05 f5 	orh	r8,0x5f5
80002cc6:	ef 48 ff e0 	st.w	r7[-32],r8
80002cca:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002cce:	ef 48 ff ec 	st.w	r7[-20],r8
80002cd2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002cd6:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002cda:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002cde:	30 01       	mov	r1,0
80002ce0:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002ce4:	30 03       	mov	r3,0
80002ce6:	e2 02 02 4a 	mul	r10,r1,r2
80002cea:	e6 00 02 48 	mul	r8,r3,r0
80002cee:	10 0a       	add	r10,r8
80002cf0:	e0 02 06 48 	mulu.d	r8,r0,r2
80002cf4:	12 0a       	add	r10,r9
80002cf6:	14 99       	mov	r9,r10
80002cf8:	ee 7a 42 3f 	mov	r10,999999
80002cfc:	30 0b       	mov	r11,0
80002cfe:	f0 0a 00 0a 	add	r10,r8,r10
80002d02:	f2 0b 00 4b 	adc	r11,r9,r11
80002d06:	ee 78 42 40 	mov	r8,1000000
80002d0a:	30 09       	mov	r9,0
80002d0c:	f0 1f 00 3e 	mcall	80002e04 <OWWriteBit+0x454>
80002d10:	14 98       	mov	r8,r10
80002d12:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002d14:	ef 48 ff f4 	st.w	r7[-12],r8
80002d18:	ee c8 00 6c 	sub	r8,r7,108
80002d1c:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d20:	e1 b8 00 42 	mfsr	r8,0x108
80002d24:	10 99       	mov	r9,r8
80002d26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d2a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d30:	70 09       	ld.w	r9,r8[0x0]
80002d32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d36:	10 09       	add	r9,r8
80002d38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d3c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002d3e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002d42:	30 08       	mov	r8,0
80002d44:	f3 68 00 08 	st.b	r9[8],r8
80002d48:	ee c8 00 6c 	sub	r8,r7,108
80002d4c:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d50:	e1 b8 00 42 	mfsr	r8,0x108
80002d54:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002d58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d5c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d60:	30 28       	mov	r8,2
80002d62:	f0 09 18 00 	cp.b	r9,r8
80002d66:	c0 31       	brne	80002d6c <OWWriteBit+0x3bc>
    return false;
80002d68:	30 08       	mov	r8,0
80002d6a:	c4 38       	rjmp	80002df0 <OWWriteBit+0x440>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d70:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d74:	30 18       	mov	r8,1
80002d76:	f0 09 18 00 	cp.b	r9,r8
80002d7a:	c0 31       	brne	80002d80 <OWWriteBit+0x3d0>
    return true;
80002d7c:	30 18       	mov	r8,1
80002d7e:	c3 98       	rjmp	80002df0 <OWWriteBit+0x440>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d84:	70 09       	ld.w	r9,r8[0x0]
80002d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d8a:	70 18       	ld.w	r8,r8[0x4]
80002d8c:	10 39       	cp.w	r9,r8
80002d8e:	e0 88 00 1a 	brls	80002dc2 <OWWriteBit+0x412>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d96:	70 08       	ld.w	r8,r8[0x0]
80002d98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d9c:	10 39       	cp.w	r9,r8
80002d9e:	c1 02       	brcc	80002dbe <OWWriteBit+0x40e>
80002da0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002da4:	70 18       	ld.w	r8,r8[0x4]
80002da6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002daa:	10 39       	cp.w	r9,r8
80002dac:	e0 88 00 09 	brls	80002dbe <OWWriteBit+0x40e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002db0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002db4:	30 18       	mov	r8,1
80002db6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dba:	30 18       	mov	r8,1
80002dbc:	c1 a8       	rjmp	80002df0 <OWWriteBit+0x440>
    }
    return false;
80002dbe:	30 08       	mov	r8,0
80002dc0:	c1 88       	rjmp	80002df0 <OWWriteBit+0x440>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dc6:	70 08       	ld.w	r8,r8[0x0]
80002dc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dcc:	10 39       	cp.w	r9,r8
80002dce:	c0 93       	brcs	80002de0 <OWWriteBit+0x430>
80002dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dd4:	70 18       	ld.w	r8,r8[0x4]
80002dd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dda:	10 39       	cp.w	r9,r8
80002ddc:	e0 88 00 09 	brls	80002dee <OWWriteBit+0x43e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002de0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002de4:	30 18       	mov	r8,1
80002de6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dea:	30 18       	mov	r8,1
80002dec:	c0 28       	rjmp	80002df0 <OWWriteBit+0x440>
    }
    return false;
80002dee:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002df0:	58 08       	cp.w	r8,0
80002df2:	ca b0       	breq	80002d48 <OWWriteBit+0x398>
	}
}
80002df4:	2d 5d       	sub	sp,-172
80002df6:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002dfa:	00 00       	add	r0,r0
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	28 04       	sub	r4,-128
80002e00:	00 00       	add	r0,r0
80002e02:	02 c0       	st.b	r1++,r0
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	aa 62       	st.h	r5[0xc],r2
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	20 5c       	sub	r12,5
80002e0c:	00 00       	add	r0,r0
80002e0e:	02 c8       	st.b	r1++,r8
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	20 ac       	sub	r12,10
80002e14:	00 00       	add	r0,r0
80002e16:	02 b8       	st.h	r1++,r8

80002e18 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
80002e18:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002e1c:	1a 97       	mov	r7,sp
80002e1e:	21 cd       	sub	sp,112
80002e20:	18 98       	mov	r8,r12
80002e22:	ef 68 ff a0 	st.b	r7[-96],r8
#if 0
	drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tRL 5-15us
	release_the_bus(idx);
#endif
	drive_DQ_low_and_release_the_bus(idx);
80002e26:	ef 38 ff a0 	ld.ub	r8,r7[-96]
80002e2a:	10 9c       	mov	r12,r8
80002e2c:	f0 1f 00 b1 	mcall	800030f0 <OWReadBit+0x2d8>
	
	cpu_delay_us(E, EC_CPU_CLOCK_100MHZ);	//tMSR 5-15us
80002e30:	fe f8 02 c4 	ld.w	r8,pc[708]
80002e34:	70 08       	ld.w	r8,r8[0x0]
80002e36:	ef 48 ff c4 	st.w	r7[-60],r8
80002e3a:	e0 68 e1 00 	mov	r8,57600
80002e3e:	ea 18 05 f5 	orh	r8,0x5f5
80002e42:	ef 48 ff c0 	st.w	r7[-64],r8
80002e46:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002e4a:	ef 48 ff cc 	st.w	r7[-52],r8
80002e4e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002e52:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002e56:	ee fc ff cc 	ld.w	r12,r7[-52]
80002e5a:	ef 4c ff 9c 	st.w	r7[-100],r12
80002e5e:	30 0b       	mov	r11,0
80002e60:	ef 4b ff 98 	st.w	r7[-104],r11
80002e64:	ee f9 ff c8 	ld.w	r9,r7[-56]
80002e68:	ef 49 ff 94 	st.w	r7[-108],r9
80002e6c:	30 08       	mov	r8,0
80002e6e:	ef 48 ff 90 	st.w	r7[-112],r8
80002e72:	ee fa ff 98 	ld.w	r10,r7[-104]
80002e76:	ee fc ff 94 	ld.w	r12,r7[-108]
80002e7a:	b9 3a       	mul	r10,r12
80002e7c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002e80:	ee fb ff 9c 	ld.w	r11,r7[-100]
80002e84:	b7 38       	mul	r8,r11
80002e86:	10 0a       	add	r10,r8
80002e88:	ee fc ff 9c 	ld.w	r12,r7[-100]
80002e8c:	ee fb ff 94 	ld.w	r11,r7[-108]
80002e90:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002e94:	12 0a       	add	r10,r9
80002e96:	14 99       	mov	r9,r10
80002e98:	ee 7a 42 3f 	mov	r10,999999
80002e9c:	30 0b       	mov	r11,0
80002e9e:	f0 0a 00 0a 	add	r10,r8,r10
80002ea2:	f2 0b 00 4b 	adc	r11,r9,r11
80002ea6:	ee 78 42 40 	mov	r8,1000000
80002eaa:	30 09       	mov	r9,0
80002eac:	f0 1f 00 93 	mcall	800030f8 <OWReadBit+0x2e0>
80002eb0:	14 98       	mov	r8,r10
80002eb2:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002eb4:	ef 48 ff d4 	st.w	r7[-44],r8
80002eb8:	ee c8 00 5c 	sub	r8,r7,92
80002ebc:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ec0:	e1 b8 00 42 	mfsr	r8,0x108
80002ec4:	10 99       	mov	r9,r8
80002ec6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002eca:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ecc:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002ed0:	70 09       	ld.w	r9,r8[0x0]
80002ed2:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ed6:	10 09       	add	r9,r8
80002ed8:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002edc:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002ede:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002ee2:	30 08       	mov	r8,0
80002ee4:	f3 68 00 08 	st.b	r9[8],r8
80002ee8:	ee c8 00 5c 	sub	r8,r7,92
80002eec:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ef0:	e1 b8 00 42 	mfsr	r8,0x108
80002ef4:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002ef8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002efc:	f1 39 00 08 	ld.ub	r9,r8[8]
80002f00:	30 28       	mov	r8,2
80002f02:	f0 09 18 00 	cp.b	r9,r8
80002f06:	c0 31       	brne	80002f0c <OWReadBit+0xf4>
    return false;
80002f08:	30 08       	mov	r8,0
80002f0a:	c4 38       	rjmp	80002f90 <OWReadBit+0x178>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002f0c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f10:	f1 39 00 08 	ld.ub	r9,r8[8]
80002f14:	30 18       	mov	r8,1
80002f16:	f0 09 18 00 	cp.b	r9,r8
80002f1a:	c0 31       	brne	80002f20 <OWReadBit+0x108>
    return true;
80002f1c:	30 18       	mov	r8,1
80002f1e:	c3 98       	rjmp	80002f90 <OWReadBit+0x178>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f20:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f24:	70 09       	ld.w	r9,r8[0x0]
80002f26:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f2a:	70 18       	ld.w	r8,r8[0x4]
80002f2c:	10 39       	cp.w	r9,r8
80002f2e:	e0 88 00 1a 	brls	80002f62 <OWReadBit+0x14a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f32:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f36:	70 08       	ld.w	r8,r8[0x0]
80002f38:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f3c:	10 39       	cp.w	r9,r8
80002f3e:	c1 02       	brcc	80002f5e <OWReadBit+0x146>
80002f40:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f44:	70 18       	ld.w	r8,r8[0x4]
80002f46:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f4a:	10 39       	cp.w	r9,r8
80002f4c:	e0 88 00 09 	brls	80002f5e <OWReadBit+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002f50:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002f54:	30 18       	mov	r8,1
80002f56:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002f5a:	30 18       	mov	r8,1
80002f5c:	c1 a8       	rjmp	80002f90 <OWReadBit+0x178>
    }
    return false;
80002f5e:	30 08       	mov	r8,0
80002f60:	c1 88       	rjmp	80002f90 <OWReadBit+0x178>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f62:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f66:	70 08       	ld.w	r8,r8[0x0]
80002f68:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f6c:	10 39       	cp.w	r9,r8
80002f6e:	c0 93       	brcs	80002f80 <OWReadBit+0x168>
80002f70:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f74:	70 18       	ld.w	r8,r8[0x4]
80002f76:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f7a:	10 39       	cp.w	r9,r8
80002f7c:	e0 88 00 09 	brls	80002f8e <OWReadBit+0x176>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002f80:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002f84:	30 18       	mov	r8,1
80002f86:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002f8a:	30 18       	mov	r8,1
80002f8c:	c0 28       	rjmp	80002f90 <OWReadBit+0x178>
    }
    return false;
80002f8e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002f90:	58 08       	cp.w	r8,0
80002f92:	ca b0       	breq	80002ee8 <OWReadBit+0xd0>
	result = sample_line(idx);
80002f94:	ef 38 ff a0 	ld.ub	r8,r7[-96]
80002f98:	10 9c       	mov	r12,r8
80002f9a:	f0 1f 00 59 	mcall	800030fc <OWReadBit+0x2e4>
80002f9e:	18 98       	mov	r8,r12
80002fa0:	ef 48 ff bc 	st.w	r7[-68],r8
	cpu_delay_us(F, EC_CPU_CLOCK_100MHZ); // Complete the time slot and 10us recovery tREC 5+us
80002fa4:	4d 78       	lddpc	r8,80003100 <OWReadBit+0x2e8>
80002fa6:	70 08       	ld.w	r8,r8[0x0]
80002fa8:	ef 48 ff e4 	st.w	r7[-28],r8
80002fac:	e0 68 e1 00 	mov	r8,57600
80002fb0:	ea 18 05 f5 	orh	r8,0x5f5
80002fb4:	ef 48 ff e0 	st.w	r7[-32],r8
80002fb8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002fbc:	ef 48 ff ec 	st.w	r7[-20],r8
80002fc0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002fc4:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002fc8:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002fcc:	30 01       	mov	r1,0
80002fce:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002fd2:	30 03       	mov	r3,0
80002fd4:	e2 02 02 4a 	mul	r10,r1,r2
80002fd8:	e6 00 02 48 	mul	r8,r3,r0
80002fdc:	10 0a       	add	r10,r8
80002fde:	e0 02 06 48 	mulu.d	r8,r0,r2
80002fe2:	12 0a       	add	r10,r9
80002fe4:	14 99       	mov	r9,r10
80002fe6:	ee 7a 42 3f 	mov	r10,999999
80002fea:	30 0b       	mov	r11,0
80002fec:	f0 0a 00 0a 	add	r10,r8,r10
80002ff0:	f2 0b 00 4b 	adc	r11,r9,r11
80002ff4:	ee 78 42 40 	mov	r8,1000000
80002ff8:	30 09       	mov	r9,0
80002ffa:	f0 1f 00 40 	mcall	800030f8 <OWReadBit+0x2e0>
80002ffe:	14 98       	mov	r8,r10
80003000:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80003002:	ef 48 ff f4 	st.w	r7[-12],r8
80003006:	ee c8 00 50 	sub	r8,r7,80
8000300a:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000300e:	e1 b8 00 42 	mfsr	r8,0x108
80003012:	10 99       	mov	r9,r8
80003014:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003018:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000301a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000301e:	70 09       	ld.w	r9,r8[0x0]
80003020:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003024:	10 09       	add	r9,r8
80003026:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000302a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000302c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003030:	30 08       	mov	r8,0
80003032:	f3 68 00 08 	st.b	r9[8],r8
80003036:	ee c8 00 50 	sub	r8,r7,80
8000303a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000303e:	e1 b8 00 42 	mfsr	r8,0x108
80003042:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000304a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000304e:	30 28       	mov	r8,2
80003050:	f0 09 18 00 	cp.b	r9,r8
80003054:	c0 31       	brne	8000305a <OWReadBit+0x242>
    return false;
80003056:	30 08       	mov	r8,0
80003058:	c4 38       	rjmp	800030de <OWReadBit+0x2c6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000305a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000305e:	f1 39 00 08 	ld.ub	r9,r8[8]
80003062:	30 18       	mov	r8,1
80003064:	f0 09 18 00 	cp.b	r9,r8
80003068:	c0 31       	brne	8000306e <OWReadBit+0x256>
    return true;
8000306a:	30 18       	mov	r8,1
8000306c:	c3 98       	rjmp	800030de <OWReadBit+0x2c6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000306e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003072:	70 09       	ld.w	r9,r8[0x0]
80003074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003078:	70 18       	ld.w	r8,r8[0x4]
8000307a:	10 39       	cp.w	r9,r8
8000307c:	e0 88 00 1a 	brls	800030b0 <OWReadBit+0x298>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003084:	70 08       	ld.w	r8,r8[0x0]
80003086:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000308a:	10 39       	cp.w	r9,r8
8000308c:	c1 02       	brcc	800030ac <OWReadBit+0x294>
8000308e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003092:	70 18       	ld.w	r8,r8[0x4]
80003094:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003098:	10 39       	cp.w	r9,r8
8000309a:	e0 88 00 09 	brls	800030ac <OWReadBit+0x294>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000309e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800030a2:	30 18       	mov	r8,1
800030a4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800030a8:	30 18       	mov	r8,1
800030aa:	c1 a8       	rjmp	800030de <OWReadBit+0x2c6>
    }
    return false;
800030ac:	30 08       	mov	r8,0
800030ae:	c1 88       	rjmp	800030de <OWReadBit+0x2c6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030b4:	70 08       	ld.w	r8,r8[0x0]
800030b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800030ba:	10 39       	cp.w	r9,r8
800030bc:	c0 93       	brcs	800030ce <OWReadBit+0x2b6>
800030be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030c2:	70 18       	ld.w	r8,r8[0x4]
800030c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800030c8:	10 39       	cp.w	r9,r8
800030ca:	e0 88 00 09 	brls	800030dc <OWReadBit+0x2c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800030ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800030d2:	30 18       	mov	r8,1
800030d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800030d8:	30 18       	mov	r8,1
800030da:	c0 28       	rjmp	800030de <OWReadBit+0x2c6>
    }
    return false;
800030dc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800030de:	58 08       	cp.w	r8,0
800030e0:	ca b0       	breq	80003036 <OWReadBit+0x21e>

	return result;
800030e2:	ee f8 ff bc 	ld.w	r8,r7[-68]
}
800030e6:	10 9c       	mov	r12,r8
800030e8:	2e 4d       	sub	sp,-112
800030ea:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800030ee:	00 00       	add	r0,r0
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	28 04       	sub	r4,-128
800030f4:	00 00       	add	r0,r0
800030f6:	02 d4       	st.w	--r1,r4
800030f8:	80 00       	ld.sh	r0,r0[0x0]
800030fa:	aa 62       	st.h	r5[0xc],r2
800030fc:	80 00       	ld.sh	r0,r0[0x0]
800030fe:	21 30       	sub	r0,19
80003100:	00 00       	add	r0,r0
80003102:	02 dc       	st.w	--r1,r12

80003104 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
80003104:	eb cd 40 80 	pushm	r7,lr
80003108:	1a 97       	mov	r7,sp
8000310a:	20 3d       	sub	sp,12
8000310c:	18 98       	mov	r8,r12
8000310e:	ef 4b ff f4 	st.w	r7[-12],r11
80003112:	ef 68 ff f8 	st.b	r7[-8],r8
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
80003116:	30 08       	mov	r8,0
80003118:	ef 48 ff fc 	st.w	r7[-4],r8
8000311c:	c1 58       	rjmp	80003146 <OWWriteByte+0x42>
	{
		OWWriteBit(idx, data & 0x01);
8000311e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003122:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80003126:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000312a:	12 9b       	mov	r11,r9
8000312c:	10 9c       	mov	r12,r8
8000312e:	f0 1f 00 0b 	mcall	80003158 <OWWriteByte+0x54>

		// shift the data byte for the next bit
		data >>= 1;
80003132:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003136:	a1 58       	asr	r8,0x1
80003138:	ef 48 ff f4 	st.w	r7[-12],r8
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
8000313c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003140:	2f f8       	sub	r8,-1
80003142:	ef 48 ff fc 	st.w	r7[-4],r8
80003146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000314a:	58 78       	cp.w	r8,7
8000314c:	fe 9a ff e9 	brle	8000311e <OWWriteByte+0x1a>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
80003150:	2f dd       	sub	sp,-12
80003152:	e3 cd 80 80 	ldm	sp++,r7,pc
80003156:	00 00       	add	r0,r0
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	29 b0       	sub	r0,-101

8000315c <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
8000315c:	eb cd 40 80 	pushm	r7,lr
80003160:	1a 97       	mov	r7,sp
80003162:	20 3d       	sub	sp,12
80003164:	18 98       	mov	r8,r12
80003166:	ef 68 ff f4 	st.b	r7[-12],r8
	int loop, result=0;
8000316a:	30 08       	mov	r8,0
8000316c:	ef 48 ff fc 	st.w	r7[-4],r8

	for (loop = 0; loop < 8; loop++)
80003170:	30 08       	mov	r8,0
80003172:	ef 48 ff f8 	st.w	r7[-8],r8
80003176:	c1 88       	rjmp	800031a6 <OWReadByte+0x4a>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
80003178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000317c:	a1 58       	asr	r8,0x1
8000317e:	ef 48 ff fc 	st.w	r7[-4],r8

		// if result is one, then set MS bit
		if (OWReadBit(idx))
80003182:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003186:	10 9c       	mov	r12,r8
80003188:	f0 1f 00 0d 	mcall	800031bc <OWReadByte+0x60>
8000318c:	18 98       	mov	r8,r12
8000318e:	58 08       	cp.w	r8,0
80003190:	c0 60       	breq	8000319c <OWReadByte+0x40>
		result |= 0x80;
80003192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003196:	a7 b8       	sbr	r8,0x7
80003198:	ef 48 ff fc 	st.w	r7[-4],r8
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
8000319c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031a0:	2f f8       	sub	r8,-1
800031a2:	ef 48 ff f8 	st.w	r7[-8],r8
800031a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031aa:	58 78       	cp.w	r8,7
800031ac:	fe 9a ff e6 	brle	80003178 <OWReadByte+0x1c>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
800031b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800031b4:	10 9c       	mov	r12,r8
800031b6:	2f dd       	sub	sp,-12
800031b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800031bc:	80 00       	ld.sh	r0,r0[0x0]
800031be:	2e 18       	sub	r8,-31

800031c0 <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
800031c0:	eb cd 40 80 	pushm	r7,lr
800031c4:	1a 97       	mov	r7,sp
800031c6:	20 3d       	sub	sp,12
800031c8:	18 99       	mov	r9,r12
800031ca:	16 98       	mov	r8,r11
800031cc:	ef 69 ff f8 	st.b	r7[-8],r9
800031d0:	ef 68 ff f4 	st.b	r7[-12],r8
   int i;
   acc ^= byte;
800031d4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800031d8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800031dc:	f3 e8 20 08 	eor	r8,r9,r8
800031e0:	ef 68 ff f8 	st.b	r7[-8],r8
   for(i = 0; i < 8; i++) 
800031e4:	30 08       	mov	r8,0
800031e6:	ef 48 ff fc 	st.w	r7[-4],r8
800031ea:	c1 c8       	rjmp	80003222 <crc8_add+0x62>
   {
		if(acc & 1) 
800031ec:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800031f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800031f4:	5c 58       	castu.b	r8
800031f6:	c0 c0       	breq	8000320e <crc8_add+0x4e>
		{
			acc = (acc >> 1) ^ 0x8c;
800031f8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800031fc:	a1 98       	lsr	r8,0x1
800031fe:	5c 58       	castu.b	r8
80003200:	ee 18 ff ff 	eorh	r8,0xffff
80003204:	ec 18 ff 8c 	eorl	r8,0xff8c
80003208:	ef 68 ff f8 	st.b	r7[-8],r8
8000320c:	c0 68       	rjmp	80003218 <crc8_add+0x58>
		} 
		else 
		{
			acc >>= 1;
8000320e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003212:	a1 98       	lsr	r8,0x1
80003214:	ef 68 ff f8 	st.b	r7[-8],r8
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
80003218:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000321c:	2f f8       	sub	r8,-1
8000321e:	ef 48 ff fc 	st.w	r7[-4],r8
80003222:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003226:	58 78       	cp.w	r8,7
80003228:	fe 9a ff e2 	brle	800031ec <crc8_add+0x2c>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
8000322c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
}
80003230:	10 9c       	mov	r12,r8
80003232:	2f dd       	sub	sp,-12
80003234:	e3 cd 80 80 	ldm	sp++,r7,pc

80003238 <init_ecdbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_ecdbg_rs232(long pba_hz)
{
80003238:	eb cd 40 80 	pushm	r7,lr
8000323c:	1a 97       	mov	r7,sp
8000323e:	20 1d       	sub	sp,4
80003240:	ef 4c ff fc 	st.w	r7[-4],r12
  init_ecdbg_rs232_ex(ECDBG_USART_BAUDRATE, pba_hz);
80003244:	ee fb ff fc 	ld.w	r11,r7[-4]
80003248:	e0 7c c2 00 	mov	r12,115200
8000324c:	f0 1f 00 03 	mcall	80003258 <init_ecdbg_rs232+0x20>
}
80003250:	2f fd       	sub	sp,-4
80003252:	e3 cd 80 80 	ldm	sp++,r7,pc
80003256:	00 00       	add	r0,r0
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	32 80       	mov	r0,40

8000325c <init_display_rs232>:

void init_display_rs232(long pba_hz)
{
8000325c:	eb cd 40 80 	pushm	r7,lr
80003260:	1a 97       	mov	r7,sp
80003262:	20 1d       	sub	sp,4
80003264:	ef 4c ff fc 	st.w	r7[-4],r12
	init_display_rs232_ex(DISPLAY_USART_BAUDRATE, pba_hz);
80003268:	ee fb ff fc 	ld.w	r11,r7[-4]
8000326c:	e0 6c 12 c0 	mov	r12,4800
80003270:	f0 1f 00 03 	mcall	8000327c <init_display_rs232+0x20>
}
80003274:	2f fd       	sub	sp,-4
80003276:	e3 cd 80 80 	ldm	sp++,r7,pc
8000327a:	00 00       	add	r0,r0
8000327c:	80 00       	ld.sh	r0,r0[0x0]
8000327e:	32 dc       	mov	r12,45

80003280 <init_ecdbg_rs232_ex>:


void init_ecdbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80003280:	eb cd 40 80 	pushm	r7,lr
80003284:	1a 97       	mov	r7,sp
80003286:	20 5d       	sub	sp,20
80003288:	ef 4c ff f0 	st.w	r7[-16],r12
8000328c:	ef 4b ff ec 	st.w	r7[-20],r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80003290:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003294:	ef 48 ff f4 	st.w	r7[-12],r8
80003298:	30 88       	mov	r8,8
8000329a:	ef 68 ff f8 	st.b	r7[-8],r8
8000329e:	30 48       	mov	r8,4
800032a0:	ef 68 ff f9 	st.b	r7[-7],r8
800032a4:	30 08       	mov	r8,0
800032a6:	ef 58 ff fa 	st.h	r7[-6],r8
800032aa:	30 08       	mov	r8,0
800032ac:	ef 68 ff fc 	st.b	r7[-4],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(ECDBG_USART_GPIO_MAP,
800032b0:	30 2b       	mov	r11,2
800032b2:	48 8c       	lddpc	r12,800032d0 <init_ecdbg_rs232_ex+0x50>
800032b4:	f0 1f 00 08 	mcall	800032d4 <init_ecdbg_rs232_ex+0x54>
                     sizeof(ECDBG_USART_GPIO_MAP) / sizeof(ECDBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(ECDBG_USART, &ecdbg_usart_options, pba_hz);
800032b8:	ee c8 00 0c 	sub	r8,r7,12
800032bc:	ee fa ff ec 	ld.w	r10,r7[-20]
800032c0:	10 9b       	mov	r11,r8
800032c2:	fe 7c 28 00 	mov	r12,-55296
800032c6:	f0 1f 00 05 	mcall	800032d8 <init_ecdbg_rs232_ex+0x58>
}
800032ca:	2f bd       	sub	sp,-20
800032cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800032d0:	80 00       	ld.sh	r0,r0[0x0]
800032d2:	b2 10       	st.h	r9[0x2],r0
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	45 3c       	lddsp	r12,sp[0x14c]
800032d8:	80 00       	ld.sh	r0,r0[0x0]
800032da:	56 e0       	stdsp	sp[0x1b8],r0

800032dc <init_display_rs232_ex>:

void init_display_rs232_ex(unsigned long baudrate, long pba_hz)
{
800032dc:	eb cd 40 80 	pushm	r7,lr
800032e0:	1a 97       	mov	r7,sp
800032e2:	20 5d       	sub	sp,20
800032e4:	ef 4c ff f0 	st.w	r7[-16],r12
800032e8:	ef 4b ff ec 	st.w	r7[-20],r11
		.baudrate = baudrate,
		.charlength = 8,
		.paritytype = USART_NO_PARITY,
		.stopbits = USART_1_STOPBIT,
		.channelmode = USART_NORMAL_CHMODE
	};
800032ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800032f0:	ef 48 ff f4 	st.w	r7[-12],r8
800032f4:	30 88       	mov	r8,8
800032f6:	ef 68 ff f8 	st.b	r7[-8],r8
800032fa:	30 48       	mov	r8,4
800032fc:	ef 68 ff f9 	st.b	r7[-7],r8
80003300:	30 08       	mov	r8,0
80003302:	ef 58 ff fa 	st.h	r7[-6],r8
80003306:	30 08       	mov	r8,0
80003308:	ef 68 ff fc 	st.b	r7[-4],r8

	// Setup GPIO for debug USART.
	gpio_enable_module(DISPLAY_USART_GPIO_MAP,
8000330c:	30 2b       	mov	r11,2
8000330e:	48 8c       	lddpc	r12,8000332c <init_display_rs232_ex+0x50>
80003310:	f0 1f 00 08 	mcall	80003330 <init_display_rs232_ex+0x54>
	sizeof(DISPLAY_USART_GPIO_MAP) / sizeof(DISPLAY_USART_GPIO_MAP[0]));

	// Initialize it in RS232 mode.
	usart_init_rs232(DISPLAY_USART, &display_usart_options, pba_hz);
80003314:	ee c8 00 0c 	sub	r8,r7,12
80003318:	ee fa ff ec 	ld.w	r10,r7[-20]
8000331c:	10 9b       	mov	r11,r8
8000331e:	fc 7c 14 00 	mov	r12,-191488
80003322:	f0 1f 00 05 	mcall	80003334 <init_display_rs232_ex+0x58>
}
80003326:	2f bd       	sub	sp,-20
80003328:	e3 cd 80 80 	ldm	sp++,r7,pc
8000332c:	80 00       	ld.sh	r0,r0[0x0]
8000332e:	b2 00       	st.h	r9[0x0],r0
80003330:	80 00       	ld.sh	r0,r0[0x0]
80003332:	45 3c       	lddsp	r12,sp[0x14c]
80003334:	80 00       	ld.sh	r0,r0[0x0]
80003336:	56 e0       	stdsp	sp[0x1b8],r0

80003338 <print_ecdbg>:


void print_ecdbg(const char *str)
{
80003338:	eb cd 40 80 	pushm	r7,lr
8000333c:	1a 97       	mov	r7,sp
8000333e:	20 1d       	sub	sp,4
80003340:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print(ECDBG_USART, str);
80003344:	ee fb ff fc 	ld.w	r11,r7[-4]
80003348:	fe 7c 28 00 	mov	r12,-55296
8000334c:	f0 1f 00 03 	mcall	80003358 <print_ecdbg+0x20>
}
80003350:	2f fd       	sub	sp,-4
80003352:	e3 cd 80 80 	ldm	sp++,r7,pc
80003356:	00 00       	add	r0,r0
80003358:	80 00       	ld.sh	r0,r0[0x0]
8000335a:	33 5c       	mov	r12,53

8000335c <print>:
	print_hex(DISPLAY_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
8000335c:	eb cd 40 80 	pushm	r7,lr
80003360:	1a 97       	mov	r7,sp
80003362:	20 2d       	sub	sp,8
80003364:	ef 4c ff fc 	st.w	r7[-4],r12
80003368:	ef 4b ff f8 	st.w	r7[-8],r11
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
8000336c:	ee fb ff f8 	ld.w	r11,r7[-8]
80003370:	ee fc ff fc 	ld.w	r12,r7[-4]
80003374:	f0 1f 00 03 	mcall	80003380 <print+0x24>
}
80003378:	2f ed       	sub	sp,-8
8000337a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000337e:	00 00       	add	r0,r0
80003380:	80 00       	ld.sh	r0,r0[0x0]
80003382:	58 e8       	cp.w	r8,14

80003384 <adcifa_get_calibration_data>:
 * \param adcifa       Base address of the ADCIFA
 * \param p_adcifa_opt Structure for the ADCIFA core configuration
 */
void adcifa_get_calibration_data(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt)
{
80003384:	eb cd 40 80 	pushm	r7,lr
80003388:	1a 97       	mov	r7,sp
8000338a:	20 6d       	sub	sp,24
8000338c:	ef 4c ff ec 	st.w	r7[-20],r12
80003390:	ef 4b ff e8 	st.w	r7[-24],r11
	/* Get Offset Calibration */
	int32_t adc_ocal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003394:	e0 68 02 04 	mov	r8,516
80003398:	ea 18 80 80 	orh	r8,0x8080
8000339c:	70 08       	ld.w	r8,r8[0x0]
8000339e:	e6 18 3f 00 	andh	r8,0x3f00,COH
			+ AVR32_FLASHC_FROW_OCAL_WORD)) &
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;
800033a2:	b9 48       	asr	r8,0x18
800033a4:	ef 48 ff f0 	st.w	r7[-16],r8
	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
800033a8:	e0 68 02 04 	mov	r8,516
800033ac:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;

	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800033b0:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
800033b2:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
800033b6:	ef 48 ff f4 	st.w	r7[-12],r8
	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
800033ba:	e0 68 02 08 	mov	r8,520
800033be:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;

	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800033c2:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
800033c4:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800033c8:	ef 48 ff f8 	st.w	r7[-8],r8

	int32_t adc_gain1
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800033cc:	e0 68 02 08 	mov	r8,520
800033d0:	ea 18 80 80 	orh	r8,0x8080
800033d4:	70 08       	ld.w	r8,r8[0x0]
800033d6:	e6 18 03 ff 	andh	r8,0x3ff,COH
			+ AVR32_FLASHC_FROW_GAIN1_WORD)) &
			AVR32_FLASHC_FROW_GAIN1_MASK) >>
			AVR32_FLASHC_FROW_GAIN1_OFFSET;
800033da:	b1 48       	asr	r8,0x10
800033dc:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Get ADC Offset Calibration */
	p_adcifa_opt->offset_calibration_value = adc_ocal;
800033e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033e4:	5c 88       	casts.h	r8
800033e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800033ea:	b2 68       	st.h	r9[0xc],r8

	/* Get ADC Gain Calibration */
	p_adcifa_opt->gain_calibration_value = adc_gcal;
800033ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033f0:	5c 88       	casts.h	r8
800033f2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800033f6:	b2 58       	st.h	r9[0xa],r8

	/* Get Sample & Hold Gain Calibration for Seq 0 */
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
800033f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033fc:	5c 88       	casts.h	r8
800033fe:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003402:	b2 78       	st.h	r9[0xe],r8

	/* Get Sample & Hold Gain Calibration for Seq 1 */
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
80003404:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003408:	5c 88       	casts.h	r8
8000340a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000340e:	f3 58 00 10 	st.h	r9[16],r8
}
80003412:	2f ad       	sub	sp,-24
80003414:	e3 cd 80 80 	ldm	sp++,r7,pc

80003418 <adcifa_configure>:
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt,
		uint32_t pb_hz)
{
80003418:	eb cd 40 80 	pushm	r7,lr
8000341c:	1a 97       	mov	r7,sp
8000341e:	20 3d       	sub	sp,12
80003420:	ef 4c ff fc 	st.w	r7[-4],r12
80003424:	ef 4b ff f8 	st.w	r7[-8],r11
80003428:	ef 4a ff f4 	st.w	r7[-12],r10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
8000342c:	fc 7a 24 00 	mov	r10,-187392
		= (p_adcifa_opt->sleep_mode_enable <<
80003430:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003434:	f1 38 00 08 	ld.ub	r8,r8[8]
80003438:	f0 09 15 02 	lsl	r9,r8,0x2
			AVR32_ADCIFA_CFG_SLEEP)
			| (p_adcifa_opt->single_sequencer_mode <<
8000343c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003440:	11 e8       	ld.ub	r8,r8[0x6]
80003442:	a3 78       	lsl	r8,0x3
			AVR32_ADCIFA_CFG_SSMQ)
			| (p_adcifa_opt->free_running_mode_enable <<
80003444:	10 49       	or	r9,r8
80003446:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000344a:	11 f8       	ld.ub	r8,r8[0x7]
8000344c:	a5 68       	lsl	r8,0x4
			AVR32_ADCIFA_CFG_FRM)
			| (p_adcifa_opt->reference_source <<
8000344e:	10 49       	or	r9,r8
80003450:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003454:	11 c8       	ld.ub	r8,r8[0x4]
80003456:	a5 78       	lsl	r8,0x5
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
80003458:	10 49       	or	r9,r8
8000345a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000345e:	11 d8       	ld.ub	r8,r8[0x5]
80003460:	a7 78       	lsl	r8,0x7
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
80003462:	10 49       	or	r9,r8
80003464:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003468:	f1 38 00 09 	ld.ub	r8,r8[9]
8000346c:	ab 68       	lsl	r8,0xa
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
8000346e:	f3 e8 10 08 	or	r8,r9,r8
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
80003472:	10 9b       	mov	r11,r8
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
80003474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003478:	70 09       	ld.w	r9,r8[0x0]
8000347a:	e0 68 4d d3 	mov	r8,19923
8000347e:	ea 18 10 62 	orh	r8,0x1062
80003482:	f2 08 06 48 	mulu.d	r8,r9,r8
80003486:	a7 89       	lsr	r9,0x6
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
80003488:	e0 68 03 e8 	mov	r8,1000
8000348c:	b1 39       	mul	r9,r8
8000348e:	e0 68 4d d3 	mov	r8,19923
80003492:	ea 18 10 62 	orh	r8,0x1062
80003496:	f2 08 06 48 	mulu.d	r8,r9,r8
8000349a:	f2 08 16 0b 	lsr	r8,r9,0xb
8000349e:	b1 68       	lsl	r8,0x10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
800034a0:	f7 e8 10 08 	or	r8,r11,r8
{
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
800034a4:	95 18       	st.w	r10[0x4],r8
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
			(2 * p_adcifa_opt->frequency)) - 1) <<
800034a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034aa:	70 08       	ld.w	r8,r8[0x0]
800034ac:	f0 09 15 01 	lsl	r9,r8,0x1
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
800034b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034b4:	f0 09 0d 08 	divu	r8,r8,r9
800034b8:	20 18       	sub	r8,1
800034ba:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
800034be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034c2:	f1 49 00 44 	st.w	r8[68],r9
			(2 * p_adcifa_opt->frequency)) - 1) <<
			AVR32_ADCIFA_CKDIV_CNT_OFFSET) &
			AVR32_ADCIFA_CKDIV_CNT_MASK;

	/* Set ADC Offset Calibration */
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
800034c6:	fc 78 24 00 	mov	r8,-187392
800034ca:	fc 79 24 00 	mov	r9,-187392
800034ce:	73 a9       	ld.w	r9,r9[0x68]
800034d0:	12 9a       	mov	r10,r9
800034d2:	e4 1a c0 ff 	andh	r10,0xc0ff
800034d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034da:	92 69       	ld.sh	r9,r9[0xc]
800034dc:	b9 69       	lsl	r9,0x18
800034de:	e6 19 3f 00 	andh	r9,0x3f00,COH
800034e2:	f5 e9 10 09 	or	r9,r10,r9
800034e6:	f1 49 00 68 	st.w	r8[104],r9

	/* Set ADC Gain Calibration */
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
800034ea:	fc 78 24 00 	mov	r8,-187392
800034ee:	fc 79 24 00 	mov	r9,-187392
800034f2:	73 a9       	ld.w	r9,r9[0x68]
800034f4:	12 9a       	mov	r10,r9
800034f6:	e0 1a 80 00 	andl	r10,0x8000
800034fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034fe:	92 59       	ld.sh	r9,r9[0xa]
80003500:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
80003504:	f5 e9 10 09 	or	r9,r10,r9
80003508:	f1 49 00 68 	st.w	r8[104],r9

	/* Set Sample & Hold Gain Calibration for seq 0 */
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
8000350c:	fc 78 24 00 	mov	r8,-187392
80003510:	fc 79 24 00 	mov	r9,-187392
80003514:	73 b9       	ld.w	r9,r9[0x6c]
80003516:	12 9a       	mov	r10,r9
80003518:	e0 1a fc 00 	andl	r10,0xfc00
8000351c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003520:	92 79       	ld.sh	r9,r9[0xe]
80003522:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
80003526:	f5 e9 10 09 	or	r9,r10,r9
8000352a:	f1 49 00 6c 	st.w	r8[108],r9

	/* Set Sample & Hold Gain Calibration for seq 1 */
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
8000352e:	fc 78 24 00 	mov	r8,-187392
80003532:	fc 79 24 00 	mov	r9,-187392
80003536:	73 b9       	ld.w	r9,r9[0x6c]
80003538:	12 9a       	mov	r10,r9
8000353a:	e4 1a fc 00 	andh	r10,0xfc00
8000353e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003542:	f3 09 00 10 	ld.sh	r9,r9[16]
80003546:	b1 69       	lsl	r9,0x10
80003548:	e6 19 03 ff 	andh	r9,0x3ff,COH
8000354c:	f5 e9 10 09 	or	r9,r10,r9
80003550:	f1 49 00 6c 	st.w	r8[108],r9

	/* Enable ADCIFA */
	ADCIFA_enable();
80003554:	fc 78 24 00 	mov	r8,-187392
80003558:	fc 79 24 00 	mov	r9,-187392
8000355c:	72 19       	ld.w	r9,r9[0x4]
8000355e:	a1 a9       	sbr	r9,0x0
80003560:	91 19       	st.w	r8[0x4],r9
80003562:	c0 28       	rjmp	80003566 <adcifa_configure+0x14e>
	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
			break;
		}
	}
80003564:	d7 03       	nop
	/* Enable ADCIFA */
	ADCIFA_enable();

	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
80003566:	fc 78 24 00 	mov	r8,-187392
8000356a:	70 28       	ld.w	r8,r8[0x8]
8000356c:	e2 18 40 00 	andl	r8,0x4000,COH
80003570:	cf a0       	breq	80003564 <adcifa_configure+0x14c>
			break;
		}
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
80003572:	30 18       	mov	r8,1
}
80003574:	10 9c       	mov	r12,r8
80003576:	2f dd       	sub	sp,-12
80003578:	e3 cd 80 80 	ldm	sp++,r7,pc

8000357c <adcifa_configure_sequencer>:
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		adcifa_sequencer_conversion_opt_t *p_adcifa_sequencer_conversion_opt)
{
8000357c:	eb cd 40 80 	pushm	r7,lr
80003580:	1a 97       	mov	r7,sp
80003582:	21 1d       	sub	sp,68
80003584:	ef 4c ff c8 	st.w	r7[-56],r12
80003588:	16 98       	mov	r8,r11
8000358a:	ef 4a ff c0 	st.w	r7[-64],r10
8000358e:	ef 49 ff bc 	st.w	r7[-68],r9
80003592:	ef 68 ff c4 	st.b	r7[-60],r8
	uint8_t g[16] = {0};
80003596:	30 08       	mov	r8,0
80003598:	30 09       	mov	r9,0
8000359a:	ee e9 ff ec 	st.d	r7[-20],r8
8000359e:	30 08       	mov	r8,0
800035a0:	30 09       	mov	r9,0
800035a2:	ee e9 ff f4 	st.d	r7[-12],r8
	uint8_t mp[16] = {0};
800035a6:	30 08       	mov	r8,0
800035a8:	30 09       	mov	r9,0
800035aa:	ee e9 ff dc 	st.d	r7[-36],r8
800035ae:	30 08       	mov	r8,0
800035b0:	30 09       	mov	r9,0
800035b2:	ee e9 ff e4 	st.d	r7[-28],r8
	uint8_t mn[16] = {0};
800035b6:	30 08       	mov	r8,0
800035b8:	30 09       	mov	r9,0
800035ba:	ee e9 ff cc 	st.d	r7[-52],r8
800035be:	30 08       	mov	r8,0
800035c0:	30 09       	mov	r9,0
800035c2:	ee e9 ff d4 	st.d	r7[-44],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch case with sequencer */
	switch (sequencer) {
800035c6:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800035ca:	58 08       	cp.w	r8,0
800035cc:	c0 60       	breq	800035d8 <adcifa_configure_sequencer+0x5c>
800035ce:	58 18       	cp.w	r8,1
800035d0:	e0 80 01 65 	breq	8000389a <adcifa_configure_sequencer+0x31e>
800035d4:	e0 8f 02 54 	bral	80003a7c <adcifa_configure_sequencer+0x500>
	/* Sequencer 0 */
	case 0:
		/* Configure Sequencer 0 */
		ADCIFA_configure_sequencer_0(
800035d8:	fc 78 24 00 	mov	r8,-187392
800035dc:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035e0:	13 89       	ld.ub	r9,r9[0x0]
800035e2:	20 19       	sub	r9,1
800035e4:	f2 0a 15 10 	lsl	r10,r9,0x10
800035e8:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035ec:	13 99       	ld.ub	r9,r9[0x1]
800035ee:	ad 69       	lsl	r9,0xc
800035f0:	12 4a       	or	r10,r9
800035f2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035f6:	13 a9       	ld.ub	r9,r9[0x2]
800035f8:	a9 69       	lsl	r9,0x8
800035fa:	12 4a       	or	r10,r9
800035fc:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003600:	13 b9       	ld.ub	r9,r9[0x3]
80003602:	a3 69       	lsl	r9,0x2
80003604:	12 4a       	or	r10,r9
80003606:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000360a:	13 c9       	ld.ub	r9,r9[0x4]
8000360c:	a3 79       	lsl	r9,0x3
8000360e:	12 4a       	or	r10,r9
80003610:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003614:	13 d9       	ld.ub	r9,r9[0x5]
80003616:	a1 79       	lsl	r9,0x1
80003618:	12 4a       	or	r10,r9
8000361a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000361e:	13 e9       	ld.ub	r9,r9[0x6]
80003620:	f5 e9 10 09 	or	r9,r10,r9
80003624:	91 59       	st.w	r8[0x14],r9
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003626:	30 08       	mov	r8,0
80003628:	ef 68 ff ff 	st.b	r7[-1],r8
8000362c:	c1 68       	rjmp	80003658 <adcifa_configure_sequencer+0xdc>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8000362e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003632:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003636:	12 98       	mov	r8,r9
80003638:	a1 78       	lsl	r8,0x1
8000363a:	12 08       	add	r8,r9
8000363c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003640:	f2 08 00 08 	add	r8,r9,r8
80003644:	11 a8       	ld.ub	r8,r8[0x2]
80003646:	ee 0a 00 09 	add	r9,r7,r10
8000364a:	f3 68 ff ec 	st.b	r9[-20],r8
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000364e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003652:	2f f8       	sub	r8,-1
80003654:	ef 68 ff ff 	st.b	r7[-1],r8
80003658:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000365c:	11 88       	ld.ub	r8,r8[0x0]
8000365e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003662:	f0 09 18 00 	cp.b	r9,r8
80003666:	ce 43       	brcs	8000362e <adcifa_configure_sequencer+0xb2>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
80003668:	fc 78 24 00 	mov	r8,-187392
8000366c:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80003670:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80003674:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80003678:	b9 69       	lsl	r9,0x18
8000367a:	12 4a       	or	r10,r9
8000367c:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80003680:	b5 69       	lsl	r9,0x14
80003682:	12 4a       	or	r10,r9
80003684:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003688:	b1 69       	lsl	r9,0x10
8000368a:	12 4a       	or	r10,r9
8000368c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003690:	ad 69       	lsl	r9,0xc
80003692:	12 4a       	or	r10,r9
80003694:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80003698:	a9 69       	lsl	r9,0x8
8000369a:	12 4a       	or	r10,r9
8000369c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800036a0:	a5 69       	lsl	r9,0x4
800036a2:	12 4a       	or	r10,r9
800036a4:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800036a8:	f5 e9 10 09 	or	r9,r10,r9
800036ac:	91 79       	st.w	r8[0x1c],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800036ae:	30 08       	mov	r8,0
800036b0:	ef 68 ff ff 	st.b	r7[-1],r8
800036b4:	c2 68       	rjmp	80003700 <adcifa_configure_sequencer+0x184>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800036b6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800036ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036be:	12 98       	mov	r8,r9
800036c0:	a1 78       	lsl	r8,0x1
800036c2:	12 08       	add	r8,r9
800036c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800036c8:	f2 08 00 08 	add	r8,r9,r8
800036cc:	11 88       	ld.ub	r8,r8[0x0]
800036ce:	ee 0a 00 09 	add	r9,r7,r10
800036d2:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800036d6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800036da:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036de:	12 98       	mov	r8,r9
800036e0:	a1 78       	lsl	r8,0x1
800036e2:	12 08       	add	r8,r9
800036e4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800036e8:	f2 08 00 08 	add	r8,r9,r8
800036ec:	11 98       	ld.ub	r8,r8[0x1]
800036ee:	ee 0a 00 09 	add	r9,r7,r10
800036f2:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800036f6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036fa:	2f f8       	sub	r8,-1
800036fc:	ef 68 ff ff 	st.b	r7[-1],r8
80003700:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003704:	11 88       	ld.ub	r8,r8[0x0]
80003706:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000370a:	f0 09 18 00 	cp.b	r9,r8
8000370e:	cd 43       	brcs	800036b6 <adcifa_configure_sequencer+0x13a>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3],
80003710:	fc 78 24 00 	mov	r8,-187392
80003714:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80003718:	f2 0a 15 18 	lsl	r10,r9,0x18
8000371c:	ef 39 ff e2 	ld.ub	r9,r7[-30]
80003720:	b1 69       	lsl	r9,0x10
80003722:	12 4a       	or	r10,r9
80003724:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80003728:	a9 69       	lsl	r9,0x8
8000372a:	12 4a       	or	r10,r9
8000372c:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80003730:	f5 e9 10 09 	or	r9,r10,r9
80003734:	91 b9       	st.w	r8[0x2c],r9
80003736:	fc 78 24 00 	mov	r8,-187392
8000373a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000373e:	f2 0a 15 18 	lsl	r10,r9,0x18
80003742:	ef 39 ff de 	ld.ub	r9,r7[-34]
80003746:	b1 69       	lsl	r9,0x10
80003748:	12 4a       	or	r10,r9
8000374a:	ef 39 ff dd 	ld.ub	r9,r7[-35]
8000374e:	a9 69       	lsl	r9,0x8
80003750:	12 4a       	or	r10,r9
80003752:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80003756:	f5 e9 10 09 	or	r9,r10,r9
8000375a:	91 99       	st.w	r8[0x24],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3],
8000375c:	fc 78 24 00 	mov	r8,-187392
80003760:	ef 39 ff d3 	ld.ub	r9,r7[-45]
80003764:	f2 0a 15 18 	lsl	r10,r9,0x18
80003768:	ef 39 ff d2 	ld.ub	r9,r7[-46]
8000376c:	b1 69       	lsl	r9,0x10
8000376e:	12 4a       	or	r10,r9
80003770:	ef 39 ff d1 	ld.ub	r9,r7[-47]
80003774:	a9 69       	lsl	r9,0x8
80003776:	12 4a       	or	r10,r9
80003778:	ef 39 ff d0 	ld.ub	r9,r7[-48]
8000377c:	f5 e9 10 09 	or	r9,r10,r9
80003780:	91 f9       	st.w	r8[0x3c],r9
80003782:	fc 78 24 00 	mov	r8,-187392
80003786:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000378a:	f2 0a 15 18 	lsl	r10,r9,0x18
8000378e:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003792:	b1 69       	lsl	r9,0x10
80003794:	12 4a       	or	r10,r9
80003796:	ef 39 ff cd 	ld.ub	r9,r7[-51]
8000379a:	a9 69       	lsl	r9,0x8
8000379c:	12 4a       	or	r10,r9
8000379e:	ef 39 ff cc 	ld.ub	r9,r7[-52]
800037a2:	f5 e9 10 09 	or	r9,r10,r9
800037a6:	91 d9       	st.w	r8[0x34],r9
		 * This adcifa_seq1_configured variable check if muxsel1p,muxsel1n 
		 * registers are already configured. This may happen if this function is
		 * called first with sequencer 1 as argument and then called with 
		 * sequencer 0 as argument in case dual mode is used.
		 */
		if(!adcifa_seq1_configured)
800037a8:	fe f8 02 e0 	ld.w	r8,pc[736]
800037ac:	11 88       	ld.ub	r8,r8[0x0]
800037ae:	ec 18 00 01 	eorl	r8,0x1
800037b2:	5c 58       	castu.b	r8
800037b4:	e0 80 01 63 	breq	80003a7a <adcifa_configure_sequencer+0x4fe>
		{
			/*
			 * Configure gain for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */ 
			ADCIFA_configure_sh1gain(g[15], g[14], g[13], g[12], g[11], g[10], 
800037b8:	fc 78 24 00 	mov	r8,-187392
800037bc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800037c0:	f2 0a 15 1c 	lsl	r10,r9,0x1c
800037c4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800037c8:	b9 69       	lsl	r9,0x18
800037ca:	12 4a       	or	r10,r9
800037cc:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800037d0:	b5 69       	lsl	r9,0x14
800037d2:	12 4a       	or	r10,r9
800037d4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800037d8:	b1 69       	lsl	r9,0x10
800037da:	12 4a       	or	r10,r9
800037dc:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800037e0:	ad 69       	lsl	r9,0xc
800037e2:	12 4a       	or	r10,r9
800037e4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800037e8:	a9 69       	lsl	r9,0x8
800037ea:	12 4a       	or	r10,r9
800037ec:	ef 39 ff f5 	ld.ub	r9,r7[-11]
800037f0:	a5 69       	lsl	r9,0x4
800037f2:	12 4a       	or	r10,r9
800037f4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800037f8:	f5 e9 10 09 	or	r9,r10,r9
800037fc:	91 89       	st.w	r8[0x20],r9

			/*
			 * Configure Mux for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */
			ADCIFA_configure_muxsel1p(mp[15], mp[14], mp[13], mp[12], mp[11], 
800037fe:	fc 78 24 00 	mov	r8,-187392
80003802:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80003806:	f2 0a 15 18 	lsl	r10,r9,0x18
8000380a:	ef 39 ff ea 	ld.ub	r9,r7[-22]
8000380e:	b1 69       	lsl	r9,0x10
80003810:	12 4a       	or	r10,r9
80003812:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80003816:	a9 69       	lsl	r9,0x8
80003818:	12 4a       	or	r10,r9
8000381a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000381e:	f5 e9 10 09 	or	r9,r10,r9
80003822:	91 c9       	st.w	r8[0x30],r9
80003824:	fc 78 24 00 	mov	r8,-187392
80003828:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8000382c:	f2 0a 15 18 	lsl	r10,r9,0x18
80003830:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80003834:	b1 69       	lsl	r9,0x10
80003836:	12 4a       	or	r10,r9
80003838:	ef 39 ff e5 	ld.ub	r9,r7[-27]
8000383c:	a9 69       	lsl	r9,0x8
8000383e:	12 4a       	or	r10,r9
80003840:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80003844:	f5 e9 10 09 	or	r9,r10,r9
80003848:	91 a9       	st.w	r8[0x28],r9
				mp[10], mp[9], mp[8]);
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
8000384a:	fc 78 24 00 	mov	r8,-187392
8000384e:	ef 39 ff db 	ld.ub	r9,r7[-37]
80003852:	f2 0a 15 18 	lsl	r10,r9,0x18
80003856:	ef 39 ff da 	ld.ub	r9,r7[-38]
8000385a:	b1 69       	lsl	r9,0x10
8000385c:	12 4a       	or	r10,r9
8000385e:	ef 39 ff d9 	ld.ub	r9,r7[-39]
80003862:	a9 69       	lsl	r9,0x8
80003864:	12 4a       	or	r10,r9
80003866:	ef 39 ff d8 	ld.ub	r9,r7[-40]
8000386a:	f5 e9 10 09 	or	r9,r10,r9
8000386e:	f1 49 00 40 	st.w	r8[64],r9
80003872:	fc 78 24 00 	mov	r8,-187392
80003876:	ef 39 ff d7 	ld.ub	r9,r7[-41]
8000387a:	f2 0a 15 18 	lsl	r10,r9,0x18
8000387e:	ef 39 ff d6 	ld.ub	r9,r7[-42]
80003882:	b1 69       	lsl	r9,0x10
80003884:	12 4a       	or	r10,r9
80003886:	ef 39 ff d5 	ld.ub	r9,r7[-43]
8000388a:	a9 69       	lsl	r9,0x8
8000388c:	12 4a       	or	r10,r9
8000388e:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80003892:	f5 e9 10 09 	or	r9,r10,r9
80003896:	91 e9       	st.w	r8[0x38],r9
				mn[10], mn[9], mn[8]);

		}

		break;
80003898:	cf 28       	rjmp	80003a7c <adcifa_configure_sequencer+0x500>

	/* Sequencer 1 */
	case 1:
		/* Configure Sequencer 1 */
		ADCIFA_configure_sequencer_1(
8000389a:	fc 78 24 00 	mov	r8,-187392
8000389e:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038a2:	13 89       	ld.ub	r9,r9[0x0]
800038a4:	20 19       	sub	r9,1
800038a6:	f2 0a 15 10 	lsl	r10,r9,0x10
800038aa:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038ae:	13 99       	ld.ub	r9,r9[0x1]
800038b0:	ad 69       	lsl	r9,0xc
800038b2:	12 4a       	or	r10,r9
800038b4:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038b8:	13 a9       	ld.ub	r9,r9[0x2]
800038ba:	a9 69       	lsl	r9,0x8
800038bc:	12 4a       	or	r10,r9
800038be:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038c2:	13 b9       	ld.ub	r9,r9[0x3]
800038c4:	a3 69       	lsl	r9,0x2
800038c6:	12 4a       	or	r10,r9
800038c8:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038cc:	13 c9       	ld.ub	r9,r9[0x4]
800038ce:	a3 79       	lsl	r9,0x3
800038d0:	12 4a       	or	r10,r9
800038d2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038d6:	13 d9       	ld.ub	r9,r9[0x5]
800038d8:	a1 79       	lsl	r9,0x1
800038da:	f5 e9 10 09 	or	r9,r10,r9
800038de:	12 9a       	mov	r10,r9
800038e0:	a5 aa       	sbr	r10,0x4
800038e2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038e6:	13 e9       	ld.ub	r9,r9[0x6]
800038e8:	f5 e9 10 09 	or	r9,r10,r9
800038ec:	91 69       	st.w	r8[0x18],r9
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800038ee:	30 08       	mov	r8,0
800038f0:	ef 68 ff ff 	st.b	r7[-1],r8
800038f4:	c1 68       	rjmp	80003920 <adcifa_configure_sequencer+0x3a4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800038f6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800038fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800038fe:	12 98       	mov	r8,r9
80003900:	a1 78       	lsl	r8,0x1
80003902:	12 08       	add	r8,r9
80003904:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003908:	f2 08 00 08 	add	r8,r9,r8
8000390c:	11 a8       	ld.ub	r8,r8[0x2]
8000390e:	ee 0a 00 09 	add	r9,r7,r10
80003912:	f3 68 ff ec 	st.b	r9[-20],r8
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003916:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000391a:	2f f8       	sub	r8,-1
8000391c:	ef 68 ff ff 	st.b	r7[-1],r8
80003920:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003924:	11 88       	ld.ub	r8,r8[0x0]
80003926:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000392a:	f0 09 18 00 	cp.b	r9,r8
8000392e:	ce 43       	brcs	800038f6 <adcifa_configure_sequencer+0x37a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
80003930:	fc 78 24 00 	mov	r8,-187392
80003934:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80003938:	f2 0a 15 1c 	lsl	r10,r9,0x1c
8000393c:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80003940:	b9 69       	lsl	r9,0x18
80003942:	12 4a       	or	r10,r9
80003944:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80003948:	b5 69       	lsl	r9,0x14
8000394a:	12 4a       	or	r10,r9
8000394c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003950:	b1 69       	lsl	r9,0x10
80003952:	12 4a       	or	r10,r9
80003954:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003958:	ad 69       	lsl	r9,0xc
8000395a:	12 4a       	or	r10,r9
8000395c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80003960:	a9 69       	lsl	r9,0x8
80003962:	12 4a       	or	r10,r9
80003964:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80003968:	a5 69       	lsl	r9,0x4
8000396a:	12 4a       	or	r10,r9
8000396c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80003970:	f5 e9 10 09 	or	r9,r10,r9
80003974:	91 89       	st.w	r8[0x20],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003976:	30 08       	mov	r8,0
80003978:	ef 68 ff ff 	st.b	r7[-1],r8
8000397c:	c2 68       	rjmp	800039c8 <adcifa_configure_sequencer+0x44c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
8000397e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003982:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003986:	12 98       	mov	r8,r9
80003988:	a1 78       	lsl	r8,0x1
8000398a:	12 08       	add	r8,r9
8000398c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003990:	f2 08 00 08 	add	r8,r9,r8
80003994:	11 88       	ld.ub	r8,r8[0x0]
80003996:	ee 0a 00 09 	add	r9,r7,r10
8000399a:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
8000399e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800039a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039a6:	12 98       	mov	r8,r9
800039a8:	a1 78       	lsl	r8,0x1
800039aa:	12 08       	add	r8,r9
800039ac:	ee f9 ff bc 	ld.w	r9,r7[-68]
800039b0:	f2 08 00 08 	add	r8,r9,r8
800039b4:	11 98       	ld.ub	r8,r8[0x1]
800039b6:	ee 0a 00 09 	add	r9,r7,r10
800039ba:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800039be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800039c2:	2f f8       	sub	r8,-1
800039c4:	ef 68 ff ff 	st.b	r7[-1],r8
800039c8:	ee f8 ff c0 	ld.w	r8,r7[-64]
800039cc:	11 88       	ld.ub	r8,r8[0x0]
800039ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039d2:	f0 09 18 00 	cp.b	r9,r8
800039d6:	cd 43       	brcs	8000397e <adcifa_configure_sequencer+0x402>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3],
800039d8:	fc 78 24 00 	mov	r8,-187392
800039dc:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800039e0:	f2 0a 15 18 	lsl	r10,r9,0x18
800039e4:	ef 39 ff e2 	ld.ub	r9,r7[-30]
800039e8:	b1 69       	lsl	r9,0x10
800039ea:	12 4a       	or	r10,r9
800039ec:	ef 39 ff e1 	ld.ub	r9,r7[-31]
800039f0:	a9 69       	lsl	r9,0x8
800039f2:	12 4a       	or	r10,r9
800039f4:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800039f8:	f5 e9 10 09 	or	r9,r10,r9
800039fc:	91 c9       	st.w	r8[0x30],r9
800039fe:	fc 78 24 00 	mov	r8,-187392
80003a02:	ef 39 ff df 	ld.ub	r9,r7[-33]
80003a06:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a0a:	ef 39 ff de 	ld.ub	r9,r7[-34]
80003a0e:	b1 69       	lsl	r9,0x10
80003a10:	12 4a       	or	r10,r9
80003a12:	ef 39 ff dd 	ld.ub	r9,r7[-35]
80003a16:	a9 69       	lsl	r9,0x8
80003a18:	12 4a       	or	r10,r9
80003a1a:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80003a1e:	f5 e9 10 09 	or	r9,r10,r9
80003a22:	91 a9       	st.w	r8[0x28],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3],
80003a24:	fc 78 24 00 	mov	r8,-187392
80003a28:	ef 39 ff d3 	ld.ub	r9,r7[-45]
80003a2c:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a30:	ef 39 ff d2 	ld.ub	r9,r7[-46]
80003a34:	b1 69       	lsl	r9,0x10
80003a36:	12 4a       	or	r10,r9
80003a38:	ef 39 ff d1 	ld.ub	r9,r7[-47]
80003a3c:	a9 69       	lsl	r9,0x8
80003a3e:	12 4a       	or	r10,r9
80003a40:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80003a44:	f5 e9 10 09 	or	r9,r10,r9
80003a48:	f1 49 00 40 	st.w	r8[64],r9
80003a4c:	fc 78 24 00 	mov	r8,-187392
80003a50:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003a54:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a58:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003a5c:	b1 69       	lsl	r9,0x10
80003a5e:	12 4a       	or	r10,r9
80003a60:	ef 39 ff cd 	ld.ub	r9,r7[-51]
80003a64:	a9 69       	lsl	r9,0x8
80003a66:	12 4a       	or	r10,r9
80003a68:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80003a6c:	f5 e9 10 09 	or	r9,r10,r9
80003a70:	91 e9       	st.w	r8[0x38],r9
				mn[2], mn[1], mn[0]);

		adcifa_seq1_configured = true;
80003a72:	48 69       	lddpc	r9,80003a88 <adcifa_configure_sequencer+0x50c>
80003a74:	30 18       	mov	r8,1
80003a76:	b2 88       	st.b	r9[0x0],r8
80003a78:	c0 28       	rjmp	80003a7c <adcifa_configure_sequencer+0x500>
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
				mn[10], mn[9], mn[8]);

		}

		break;
80003a7a:	d7 03       	nop
		break;

	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
80003a7c:	30 18       	mov	r8,1
}
80003a7e:	10 9c       	mov	r12,r8
80003a80:	2e fd       	sub	sp,-68
80003a82:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a86:	00 00       	add	r0,r0
80003a88:	00 00       	add	r0,r0
80003a8a:	00 b8       	st.h	r0++,r8

80003a8c <adcifa_start_sequencer>:
/** \brief Start analog to digital conversion for a specific sequencer
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
void adcifa_start_sequencer(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003a8c:	eb cd 40 80 	pushm	r7,lr
80003a90:	1a 97       	mov	r7,sp
80003a92:	20 2d       	sub	sp,8
80003a94:	ef 4c ff fc 	st.w	r7[-4],r12
80003a98:	16 98       	mov	r8,r11
80003a9a:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch Sequencer */
	switch (sequencer) {
80003a9e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003aa2:	58 18       	cp.w	r8,1
80003aa4:	c0 a0       	breq	80003ab8 <adcifa_start_sequencer+0x2c>
80003aa6:	58 38       	cp.w	r8,3
80003aa8:	c0 d0       	breq	80003ac2 <adcifa_start_sequencer+0x36>
80003aaa:	58 08       	cp.w	r8,0
80003aac:	c0 f1       	brne	80003aca <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
80003aae:	fc 78 24 00 	mov	r8,-187392
80003ab2:	30 19       	mov	r9,1
80003ab4:	91 09       	st.w	r8[0x0],r9
		break;
80003ab6:	c0 a8       	rjmp	80003aca <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
80003ab8:	fc 78 24 00 	mov	r8,-187392
80003abc:	30 29       	mov	r9,2
80003abe:	91 09       	st.w	r8[0x0],r9
		break;
80003ac0:	c0 58       	rjmp	80003aca <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(
80003ac2:	fc 78 24 00 	mov	r8,-187392
80003ac6:	30 39       	mov	r9,3
80003ac8:	91 09       	st.w	r8[0x0],r9
		break;

	default:
		break;
	}
}
80003aca:	2f ed       	sub	sp,-8
80003acc:	e3 cd 80 80 	ldm	sp++,r7,pc

80003ad0 <adcifa_check_eos>:
/** \brief Get End of Conversion status bit
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
bool adcifa_check_eos(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003ad0:	eb cd 40 80 	pushm	r7,lr
80003ad4:	1a 97       	mov	r7,sp
80003ad6:	20 2d       	sub	sp,8
80003ad8:	ef 4c ff fc 	st.w	r7[-4],r12
80003adc:	16 98       	mov	r8,r11
80003ade:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* get SR register : EOS bit for channel */
	switch (sequencer) {
80003ae2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003ae6:	58 08       	cp.w	r8,0
80003ae8:	c0 40       	breq	80003af0 <adcifa_check_eos+0x20>
80003aea:	58 18       	cp.w	r8,1
80003aec:	c0 90       	breq	80003afe <adcifa_check_eos+0x2e>
80003aee:	c1 08       	rjmp	80003b0e <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
80003af0:	fc 78 24 00 	mov	r8,-187392
80003af4:	70 28       	ld.w	r8,r8[0x8]
80003af6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003afa:	5c 58       	castu.b	r8
80003afc:	c0 a8       	rjmp	80003b10 <adcifa_check_eos+0x40>

	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
80003afe:	fc 78 24 00 	mov	r8,-187392
80003b02:	70 28       	ld.w	r8,r8[0x8]
80003b04:	e2 18 00 10 	andl	r8,0x10,COH
80003b08:	5f 18       	srne	r8
80003b0a:	5c 58       	castu.b	r8
80003b0c:	c0 28       	rjmp	80003b10 <adcifa_check_eos+0x40>

	default:
		break;
	}
	return false;
80003b0e:	30 08       	mov	r8,0
}
80003b10:	10 9c       	mov	r12,r8
80003b12:	2f ed       	sub	sp,-8
80003b14:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b18 <adcifa_get_values_from_sequencer>:
 */
uint8_t adcifa_get_values_from_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		int16_t *adcifa_values)
{
80003b18:	eb cd 40 80 	pushm	r7,lr
80003b1c:	1a 97       	mov	r7,sp
80003b1e:	20 5d       	sub	sp,20
80003b20:	ef 4c ff f8 	st.w	r7[-8],r12
80003b24:	16 98       	mov	r8,r11
80003b26:	ef 4a ff f0 	st.w	r7[-16],r10
80003b2a:	ef 49 ff ec 	st.w	r7[-20],r9
80003b2e:	ef 68 ff f4 	st.b	r7[-12],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* wait for end of sequence */
	if (adcifa_check_eos(adcifa, sequencer) != true) {
80003b32:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003b36:	10 9b       	mov	r11,r8
80003b38:	ee fc ff f8 	ld.w	r12,r7[-8]
80003b3c:	f0 1f 00 2c 	mcall	80003bec <adcifa_get_values_from_sequencer+0xd4>
80003b40:	18 98       	mov	r8,r12
80003b42:	ec 18 00 01 	eorl	r8,0x1
80003b46:	5c 58       	castu.b	r8
80003b48:	c0 30       	breq	80003b4e <adcifa_get_values_from_sequencer+0x36>
		return ADCIFA_STATUS_NOT_COMPLETED;
80003b4a:	30 38       	mov	r8,3
80003b4c:	c4 b8       	rjmp	80003be2 <adcifa_get_values_from_sequencer+0xca>
	}

	switch (sequencer) {
80003b4e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003b52:	58 08       	cp.w	r8,0
80003b54:	c0 40       	breq	80003b5c <adcifa_get_values_from_sequencer+0x44>
80003b56:	58 18       	cp.w	r8,1
80003b58:	c2 30       	breq	80003b9e <adcifa_get_values_from_sequencer+0x86>
80003b5a:	c4 38       	rjmp	80003be0 <adcifa_get_values_from_sequencer+0xc8>
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b5c:	30 08       	mov	r8,0
80003b5e:	ef 68 ff ff 	st.b	r7[-1],r8
80003b62:	c1 58       	rjmp	80003b8c <adcifa_get_values_from_sequencer+0x74>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
80003b64:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b68:	a1 78       	lsl	r8,0x1
80003b6a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003b6e:	10 09       	add	r9,r8
80003b70:	fc 78 24 00 	mov	r8,-187392
80003b74:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003b78:	2d fa       	sub	r10,-33
80003b7a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003b7e:	5c 88       	casts.h	r8
80003b80:	b2 08       	st.h	r9[0x0],r8
	}

	switch (sequencer) {
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b86:	2f f8       	sub	r8,-1
80003b88:	ef 68 ff ff 	st.b	r7[-1],r8
80003b8c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b90:	11 88       	ld.ub	r8,r8[0x0]
80003b92:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003b96:	f0 09 18 00 	cp.b	r9,r8
80003b9a:	ce 53       	brcs	80003b64 <adcifa_get_values_from_sequencer+0x4c>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
80003b9c:	c2 28       	rjmp	80003be0 <adcifa_get_values_from_sequencer+0xc8>

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b9e:	30 08       	mov	r8,0
80003ba0:	ef 68 ff ff 	st.b	r7[-1],r8
80003ba4:	c1 68       	rjmp	80003bd0 <adcifa_get_values_from_sequencer+0xb8>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
80003ba6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003baa:	a1 78       	lsl	r8,0x1
80003bac:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003bb0:	10 09       	add	r9,r8
80003bb2:	fc 78 24 00 	mov	r8,-187392
80003bb6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003bba:	2f 8a       	sub	r10,-8
80003bbc:	2d fa       	sub	r10,-33
80003bbe:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003bc2:	5c 88       	casts.h	r8
80003bc4:	b2 08       	st.h	r9[0x0],r8
		}
		break;

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003bc6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003bca:	2f f8       	sub	r8,-1
80003bcc:	ef 68 ff ff 	st.b	r7[-1],r8
80003bd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bd4:	11 88       	ld.ub	r8,r8[0x0]
80003bd6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003bda:	f0 09 18 00 	cp.b	r9,r8
80003bde:	ce 43       	brcs	80003ba6 <adcifa_get_values_from_sequencer+0x8e>

	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
80003be0:	30 28       	mov	r8,2
}
80003be2:	10 9c       	mov	r12,r8
80003be4:	2f bd       	sub	sp,-20
80003be6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bea:	00 00       	add	r0,r0
80003bec:	80 00       	ld.sh	r0,r0[0x0]
80003bee:	3a d0       	mov	r0,-83

80003bf0 <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
80003bf0:	eb cd 40 80 	pushm	r7,lr
80003bf4:	1a 97       	mov	r7,sp
80003bf6:	20 8d       	sub	sp,32
		384,
		512,
		768,
		1024,
		2048,
	};
80003bf8:	48 c9       	lddpc	r9,80003c28 <flashc_get_flash_size+0x38>
80003bfa:	ee c8 00 1e 	sub	r8,r7,30
80003bfe:	31 ea       	mov	r10,30
80003c00:	12 9b       	mov	r11,r9
80003c02:	10 9c       	mov	r12,r8
80003c04:	f0 1f 00 0a 	mcall	80003c2c <flashc_get_flash_size+0x3c>
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK)
80003c08:	fe 68 00 00 	mov	r8,-131072
80003c0c:	70 38       	ld.w	r8,r8[0xc]
80003c0e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003c12:	a1 78       	lsl	r8,0x1
80003c14:	ee 08 00 08 	add	r8,r7,r8
80003c18:	f1 08 ff e2 	ld.sh	r8,r8[-30]
80003c1c:	5c 78       	castu.h	r8
80003c1e:	ab 68       	lsl	r8,0xa
		1024,
	};
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
			>> AVR32_FLASHC_FSR_FSZ_OFFSET]) << 10;
#endif
}
80003c20:	10 9c       	mov	r12,r8
80003c22:	2f 8d       	sub	sp,-32
80003c24:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c28:	80 00       	ld.sh	r0,r0[0x0]
80003c2a:	b2 20       	st.h	r9[0x4],r0
80003c2c:	80 00       	ld.sh	r0,r0[0x0]
80003c2e:	ac c6       	st.b	r6[0x4],r6

80003c30 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
80003c30:	eb cd 40 80 	pushm	r7,lr
80003c34:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80003c36:	fe 68 00 00 	mov	r8,-131072
80003c3a:	70 28       	ld.w	r8,r8[0x8]
80003c3c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003c40:	5c 58       	castu.b	r8
}
80003c42:	10 9c       	mov	r12,r8
80003c44:	e3 cd 80 80 	ldm	sp++,r7,pc

80003c48 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80003c48:	eb cd 40 80 	pushm	r7,lr
80003c4c:	1a 97       	mov	r7,sp
	while (!flashc_is_ready());
80003c4e:	f0 1f 00 05 	mcall	80003c60 <flashc_default_wait_until_ready+0x18>
80003c52:	18 98       	mov	r8,r12
80003c54:	ec 18 00 01 	eorl	r8,0x1
80003c58:	5c 58       	castu.b	r8
80003c5a:	cf a1       	brne	80003c4e <flashc_default_wait_until_ready+0x6>
}
80003c5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c60:	80 00       	ld.sh	r0,r0[0x0]
80003c62:	3c 30       	mov	r0,-61

80003c64 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80003c64:	eb cd 40 80 	pushm	r7,lr
80003c68:	1a 97       	mov	r7,sp
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80003c6a:	fe 68 00 00 	mov	r8,-131072
80003c6e:	70 28       	ld.w	r8,r8[0x8]
80003c70:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHC_FSR_PROGE_MASK);
}
80003c74:	10 9c       	mov	r12,r8
80003c76:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c7a:	d7 03       	nop

80003c7c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80003c7c:	eb cd 40 80 	pushm	r7,lr
80003c80:	1a 97       	mov	r7,sp
80003c82:	20 3d       	sub	sp,12
80003c84:	ef 4c ff f8 	st.w	r7[-8],r12
80003c88:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003c8c:	49 b8       	lddpc	r8,80003cf8 <flashc_issue_command+0x7c>
80003c8e:	70 08       	ld.w	r8,r8[0x0]
80003c90:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80003c92:	fe 68 00 00 	mov	r8,-131072
80003c96:	70 18       	ld.w	r8,r8[0x4]
80003c98:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80003c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ca0:	5c 58       	castu.b	r8
80003ca2:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80003ca6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003caa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cae:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80003cb2:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80003cb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003cba:	58 08       	cp.w	r8,0
80003cbc:	c0 b5       	brlt	80003cd2 <flashc_issue_command+0x56>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80003cbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003cc2:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80003cc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cca:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80003cce:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80003cd2:	3a 58       	mov	r8,-91
80003cd4:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80003cd8:	fe 68 00 00 	mov	r8,-131072
80003cdc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003ce0:	91 19       	st.w	r8[0x4],r9
	flashc_error_status = flashc_get_error_status();
80003ce2:	f0 1f 00 07 	mcall	80003cfc <flashc_issue_command+0x80>
80003ce6:	18 99       	mov	r9,r12
80003ce8:	48 68       	lddpc	r8,80003d00 <flashc_issue_command+0x84>
80003cea:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80003cec:	48 38       	lddpc	r8,80003cf8 <flashc_issue_command+0x7c>
80003cee:	70 08       	ld.w	r8,r8[0x0]
80003cf0:	5d 18       	icall	r8
}
80003cf2:	2f dd       	sub	sp,-12
80003cf4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cf8:	00 00       	add	r0,r0
80003cfa:	00 08       	add	r8,r0
80003cfc:	80 00       	ld.sh	r0,r0[0x0]
80003cfe:	3c 64       	mov	r4,-58
80003d00:	00 00       	add	r0,r0
80003d02:	00 bc       	st.h	r0++,r12

80003d04 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80003d04:	eb cd 40 80 	pushm	r7,lr
80003d08:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80003d0a:	3f fb       	mov	r11,-1
80003d0c:	30 3c       	mov	r12,3
80003d0e:	f0 1f 00 03 	mcall	80003d18 <flashc_clear_page_buffer+0x14>
}
80003d12:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d16:	00 00       	add	r0,r0
80003d18:	80 00       	ld.sh	r0,r0[0x0]
80003d1a:	3c 7c       	mov	r12,-57

80003d1c <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
80003d1c:	eb cd 40 80 	pushm	r7,lr
80003d20:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80003d22:	fe 68 00 00 	mov	r8,-131072
80003d26:	70 28       	ld.w	r8,r8[0x8]
80003d28:	e2 18 00 20 	andl	r8,0x20,COH
80003d2c:	5f 18       	srne	r8
80003d2e:	5c 58       	castu.b	r8
}
80003d30:	10 9c       	mov	r12,r8
80003d32:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d36:	d7 03       	nop

80003d38 <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80003d38:	eb cd 40 80 	pushm	r7,lr
80003d3c:	1a 97       	mov	r7,sp
80003d3e:	20 1d       	sub	sp,4
80003d40:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80003d44:	ee fb ff fc 	ld.w	r11,r7[-4]
80003d48:	30 cc       	mov	r12,12
80003d4a:	f0 1f 00 05 	mcall	80003d5c <flashc_quick_page_read+0x24>
	return flashc_is_page_erased();
80003d4e:	f0 1f 00 05 	mcall	80003d60 <flashc_quick_page_read+0x28>
80003d52:	18 98       	mov	r8,r12
}
80003d54:	10 9c       	mov	r12,r8
80003d56:	2f fd       	sub	sp,-4
80003d58:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d5c:	80 00       	ld.sh	r0,r0[0x0]
80003d5e:	3c 7c       	mov	r12,-57
80003d60:	80 00       	ld.sh	r0,r0[0x0]
80003d62:	3d 1c       	mov	r12,-47

80003d64 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80003d64:	eb cd 40 80 	pushm	r7,lr
80003d68:	1a 97       	mov	r7,sp
80003d6a:	20 4d       	sub	sp,16
80003d6c:	ef 4c ff f4 	st.w	r7[-12],r12
80003d70:	16 98       	mov	r8,r11
80003d72:	ef 68 ff f0 	st.b	r7[-16],r8
	bool page_erased = true;
80003d76:	30 18       	mov	r8,1
80003d78:	ef 68 ff fb 	st.b	r7[-5],r8

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80003d7c:	ee fb ff f4 	ld.w	r11,r7[-12]
80003d80:	30 2c       	mov	r12,2
80003d82:	f0 1f 00 10 	mcall	80003dc0 <flashc_erase_page+0x5c>
	if (check) {
80003d86:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003d8a:	30 08       	mov	r8,0
80003d8c:	f0 09 18 00 	cp.b	r9,r8
80003d90:	c1 20       	breq	80003db4 <flashc_erase_page+0x50>
		unsigned int error_status = flashc_error_status;
80003d92:	48 d8       	lddpc	r8,80003dc4 <flashc_erase_page+0x60>
80003d94:	70 08       	ld.w	r8,r8[0x0]
80003d96:	ef 48 ff fc 	st.w	r7[-4],r8
		page_erased = flashc_quick_page_read(-1);
80003d9a:	3f fc       	mov	r12,-1
80003d9c:	f0 1f 00 0b 	mcall	80003dc8 <flashc_erase_page+0x64>
80003da0:	18 98       	mov	r8,r12
80003da2:	ef 68 ff fb 	st.b	r7[-5],r8
		flashc_error_status |= error_status;
80003da6:	48 88       	lddpc	r8,80003dc4 <flashc_erase_page+0x60>
80003da8:	70 09       	ld.w	r9,r8[0x0]
80003daa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003dae:	10 49       	or	r9,r8
80003db0:	48 58       	lddpc	r8,80003dc4 <flashc_erase_page+0x60>
80003db2:	91 09       	st.w	r8[0x0],r9
	}
	return page_erased;
80003db4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80003db8:	10 9c       	mov	r12,r8
80003dba:	2f cd       	sub	sp,-16
80003dbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003dc0:	80 00       	ld.sh	r0,r0[0x0]
80003dc2:	3c 7c       	mov	r12,-57
80003dc4:	00 00       	add	r0,r0
80003dc6:	00 bc       	st.h	r0++,r12
80003dc8:	80 00       	ld.sh	r0,r0[0x0]
80003dca:	3d 38       	mov	r8,-45

80003dcc <flashc_write_page>:
	return all_pages_erased;
}


void flashc_write_page(int page_number)
{
80003dcc:	eb cd 40 80 	pushm	r7,lr
80003dd0:	1a 97       	mov	r7,sp
80003dd2:	20 1d       	sub	sp,4
80003dd4:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80003dd8:	ee fb ff fc 	ld.w	r11,r7[-4]
80003ddc:	30 1c       	mov	r12,1
80003dde:	f0 1f 00 03 	mcall	80003de8 <flashc_write_page+0x1c>
}
80003de2:	2f fd       	sub	sp,-4
80003de4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003de8:	80 00       	ld.sh	r0,r0[0x0]
80003dea:	3c 7c       	mov	r12,-57

80003dec <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80003dec:	eb cd 40 80 	pushm	r7,lr
80003df0:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80003df2:	3f fb       	mov	r11,-1
80003df4:	30 fc       	mov	r12,15
80003df6:	f0 1f 00 05 	mcall	80003e08 <flashc_quick_user_page_read+0x1c>
	return flashc_is_page_erased();
80003dfa:	f0 1f 00 05 	mcall	80003e0c <flashc_quick_user_page_read+0x20>
80003dfe:	18 98       	mov	r8,r12
}
80003e00:	10 9c       	mov	r12,r8
80003e02:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e06:	00 00       	add	r0,r0
80003e08:	80 00       	ld.sh	r0,r0[0x0]
80003e0a:	3c 7c       	mov	r12,-57
80003e0c:	80 00       	ld.sh	r0,r0[0x0]
80003e0e:	3d 1c       	mov	r12,-47

80003e10 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80003e10:	eb cd 40 80 	pushm	r7,lr
80003e14:	1a 97       	mov	r7,sp
80003e16:	20 1d       	sub	sp,4
80003e18:	18 98       	mov	r8,r12
80003e1a:	ef 68 ff fc 	st.b	r7[-4],r8
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80003e1e:	3f fb       	mov	r11,-1
80003e20:	30 ec       	mov	r12,14
80003e22:	f0 1f 00 09 	mcall	80003e44 <flashc_erase_user_page+0x34>
	return (check) ? flashc_quick_user_page_read() : true;
80003e26:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003e2a:	30 08       	mov	r8,0
80003e2c:	f0 09 18 00 	cp.b	r9,r8
80003e30:	c0 50       	breq	80003e3a <flashc_erase_user_page+0x2a>
80003e32:	f0 1f 00 06 	mcall	80003e48 <flashc_erase_user_page+0x38>
80003e36:	18 98       	mov	r8,r12
80003e38:	c0 28       	rjmp	80003e3c <flashc_erase_user_page+0x2c>
80003e3a:	30 18       	mov	r8,1
}
80003e3c:	10 9c       	mov	r12,r8
80003e3e:	2f fd       	sub	sp,-4
80003e40:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e44:	80 00       	ld.sh	r0,r0[0x0]
80003e46:	3c 7c       	mov	r12,-57
80003e48:	80 00       	ld.sh	r0,r0[0x0]
80003e4a:	3d ec       	mov	r12,-34

80003e4c <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80003e4c:	eb cd 40 80 	pushm	r7,lr
80003e50:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80003e52:	3f fb       	mov	r11,-1
80003e54:	30 dc       	mov	r12,13
80003e56:	f0 1f 00 03 	mcall	80003e60 <flashc_write_user_page+0x14>
}
80003e5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e5e:	00 00       	add	r0,r0
80003e60:	80 00       	ld.sh	r0,r0[0x0]
80003e62:	3c 7c       	mov	r12,-57

80003e64 <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, uint8_t src, size_t nbytes, bool erase)
{
80003e64:	eb cd 40 80 	pushm	r7,lr
80003e68:	1a 97       	mov	r7,sp
80003e6a:	20 4d       	sub	sp,16
80003e6c:	ef 4c ff fc 	st.w	r7[-4],r12
80003e70:	ef 4a ff f4 	st.w	r7[-12],r10
80003e74:	12 98       	mov	r8,r9
80003e76:	16 99       	mov	r9,r11
80003e78:	ef 69 ff f8 	st.b	r7[-8],r9
80003e7c:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset16(dst, src | (uint16_t)src << 8, nbytes, erase);
80003e80:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003e84:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80003e88:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003e8c:	a9 68       	lsl	r8,0x8
80003e8e:	5c 88       	casts.h	r8
80003e90:	f5 e8 10 08 	or	r8,r10,r8
80003e94:	5c 88       	casts.h	r8
80003e96:	5c 78       	castu.h	r8
80003e98:	ee fa ff f4 	ld.w	r10,r7[-12]
80003e9c:	10 9b       	mov	r11,r8
80003e9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80003ea2:	f0 1f 00 04 	mcall	80003eb0 <flashc_memset8+0x4c>
80003ea6:	18 98       	mov	r8,r12
}
80003ea8:	10 9c       	mov	r12,r8
80003eaa:	2f cd       	sub	sp,-16
80003eac:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eb0:	80 00       	ld.sh	r0,r0[0x0]
80003eb2:	3e b4       	mov	r4,-21

80003eb4 <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, uint16_t src, size_t nbytes, bool erase)
{
80003eb4:	eb cd 40 80 	pushm	r7,lr
80003eb8:	1a 97       	mov	r7,sp
80003eba:	20 4d       	sub	sp,16
80003ebc:	ef 4c ff fc 	st.w	r7[-4],r12
80003ec0:	ef 4a ff f4 	st.w	r7[-12],r10
80003ec4:	12 98       	mov	r8,r9
80003ec6:	16 99       	mov	r9,r11
80003ec8:	ef 59 ff f8 	st.h	r7[-8],r9
80003ecc:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset32(dst, src | (uint32_t)src << 16, nbytes, erase);
80003ed0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003ed4:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80003ed8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003edc:	b1 68       	lsl	r8,0x10
80003ede:	f5 e8 10 08 	or	r8,r10,r8
80003ee2:	ee fa ff f4 	ld.w	r10,r7[-12]
80003ee6:	10 9b       	mov	r11,r8
80003ee8:	ee fc ff fc 	ld.w	r12,r7[-4]
80003eec:	f0 1f 00 04 	mcall	80003efc <flashc_memset16+0x48>
80003ef0:	18 98       	mov	r8,r12
}
80003ef2:	10 9c       	mov	r12,r8
80003ef4:	2f cd       	sub	sp,-16
80003ef6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003efa:	00 00       	add	r0,r0
80003efc:	80 00       	ld.sh	r0,r0[0x0]
80003efe:	3f 00       	mov	r0,-16

80003f00 <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, uint32_t src, size_t nbytes, bool erase)
{
80003f00:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80003f04:	1a 97       	mov	r7,sp
80003f06:	20 6d       	sub	sp,24
80003f08:	ef 4c ff fc 	st.w	r7[-4],r12
80003f0c:	ef 4b ff f8 	st.w	r7[-8],r11
80003f10:	ef 4a ff f4 	st.w	r7[-12],r10
80003f14:	12 98       	mov	r8,r9
80003f16:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
80003f1a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003f1e:	ee f0 ff f8 	ld.w	r0,r7[-8]
80003f22:	30 01       	mov	r1,0
80003f24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003f28:	ef 49 ff ec 	st.w	r7[-20],r9
80003f2c:	30 09       	mov	r9,0
80003f2e:	ef 49 ff e8 	st.w	r7[-24],r9
80003f32:	ee f3 ff ec 	ld.w	r3,r7[-20]
80003f36:	a1 63       	lsl	r3,0x0
80003f38:	30 02       	mov	r2,0
80003f3a:	e1 e2 10 0a 	or	r10,r0,r2
80003f3e:	e3 e3 10 0b 	or	r11,r1,r3
80003f42:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003f46:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f4a:	f0 1f 00 04 	mcall	80003f58 <flashc_memset32+0x58>
80003f4e:	18 98       	mov	r8,r12
}
80003f50:	10 9c       	mov	r12,r8
80003f52:	2f ad       	sub	sp,-24
80003f54:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80003f58:	80 00       	ld.sh	r0,r0[0x0]
80003f5a:	3f 5c       	mov	r12,-11

80003f5c <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80003f5c:	eb cd 40 80 	pushm	r7,lr
80003f60:	1a 97       	mov	r7,sp
80003f62:	21 bd       	sub	sp,108
80003f64:	ef 4c ff a4 	st.w	r7[-92],r12
80003f68:	ee eb ff 9c 	st.d	r7[-100],r10
80003f6c:	ef 49 ff 98 	st.w	r7[-104],r9
80003f70:	ef 68 ff 94 	st.b	r7[-108],r8
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
80003f74:	30 08       	mov	r8,0
80003f76:	30 09       	mov	r9,0
80003f78:	ee e9 ff d8 	st.d	r7[-40],r8
	StructCVPtr dest_end;
	UnionCVPtr flash_page_source_end;
	bool incomplete_flash_page_end;
	Union64 flash_dword;
	UnionVPtr tmp;
	unsigned int error_status = 0;
80003f7c:	30 08       	mov	r8,0
80003f7e:	ef 48 ff ec 	st.w	r7[-20],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80003f82:	f0 1f 00 fa 	mcall	80004368 <flashc_memset64+0x40c>
80003f86:	18 99       	mov	r9,r12
80003f88:	fc 18 80 00 	movh	r8,0x8000
80003f8c:	f2 08 00 08 	add	r8,r9,r8
80003f90:	ef 48 ff e4 	st.w	r7[-28],r8
	dest.u8ptr = dst;
80003f94:	ee f8 ff a4 	ld.w	r8,r7[-92]
80003f98:	ef 48 ff e0 	st.w	r7[-32],r8
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80003f9c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003fa0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003fa4:	20 18       	sub	r8,1
80003fa6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003faa:	ef 48 ff f0 	st.w	r7[-16],r8
80003fae:	c1 f8       	rjmp	80003fec <flashc_memset64+0x90>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
80003fb0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003fb4:	ef 38 ff a3 	ld.ub	r8,r7[-93]
80003fb8:	ee 09 00 09 	add	r9,r7,r9
80003fbc:	f3 68 ff d8 	st.b	r9[-40],r8
		src >>= 8;
80003fc0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80003fc4:	b9 68       	lsl	r8,0x18
80003fc6:	ee f9 ff a0 	ld.w	r9,r7[-96]
80003fca:	a9 89       	lsr	r9,0x8
80003fcc:	f3 e8 10 08 	or	r8,r9,r8
80003fd0:	ef 48 ff a0 	st.w	r7[-96],r8
80003fd4:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80003fd8:	a9 88       	lsr	r8,0x8
80003fda:	ef 48 ff 9c 	st.w	r7[-100],r8

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
80003fde:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003fe2:	20 18       	sub	r8,1
80003fe4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003fe8:	ef 48 ff f0 	st.w	r7[-16],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80003fec:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80003ff0:	58 08       	cp.w	r8,0
80003ff2:	5c 29       	cpc	r9
80003ff4:	cd e1       	brne	80003fb0 <flashc_memset64+0x54>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
80003ff6:	ee f9 ff e0 	ld.w	r9,r7[-32]
80003ffa:	ee f8 ff 98 	ld.w	r8,r7[-104]
80003ffe:	f2 08 00 08 	add	r8,r9,r8
80004002:	ef 48 ff d4 	st.w	r7[-44],r8

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
80004006:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000400a:	e0 69 ff ff 	mov	r9,65535
8000400e:	ea 19 7f ff 	orh	r9,0x7fff
80004012:	12 38       	cp.w	r8,r9
80004014:	e0 8b 00 07 	brhi	80004022 <flashc_memset64+0xc6>
		dest.u8ptr = AVR32_FLASH;
80004018:	fc 18 80 00 	movh	r8,0x8000
8000401c:	ef 48 ff e0 	st.w	r7[-32],r8
80004020:	c1 58       	rjmp	8000404a <flashc_memset64+0xee>
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
80004022:	ee f9 ff e4 	ld.w	r9,r7[-28]
80004026:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000402a:	10 39       	cp.w	r9,r8
8000402c:	e0 8b 00 0f 	brhi	8000404a <flashc_memset64+0xee>
80004030:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004034:	e0 69 ff ff 	mov	r9,65535
80004038:	ea 19 80 7f 	orh	r9,0x807f
8000403c:	12 38       	cp.w	r8,r9
8000403e:	e0 8b 00 06 	brhi	8000404a <flashc_memset64+0xee>
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80004042:	fc 18 80 80 	movh	r8,0x8080
80004046:	ef 48 ff e0 	st.w	r7[-32],r8
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
8000404a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000404e:	e0 69 02 00 	mov	r9,512
80004052:	ea 19 80 80 	orh	r9,0x8080
80004056:	12 38       	cp.w	r8,r9
80004058:	e0 88 00 09 	brls	8000406a <flashc_memset64+0x10e>
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
8000405c:	e0 68 02 00 	mov	r8,512
80004060:	ea 18 80 80 	orh	r8,0x8080
80004064:	ef 48 ff d4 	st.w	r7[-44],r8
80004068:	c1 38       	rjmp	8000408e <flashc_memset64+0x132>
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
8000406a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000406e:	fc 19 80 80 	movh	r9,0x8080
80004072:	12 38       	cp.w	r8,r9
80004074:	e0 8b 00 0d 	brhi	8000408e <flashc_memset64+0x132>
80004078:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000407c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004080:	10 39       	cp.w	r9,r8
80004082:	e0 88 00 06 	brls	8000408e <flashc_memset64+0x132>
		dest_end.u8ptr = flash_array_end.u8ptr;
80004086:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000408a:	ef 48 ff d4 	st.w	r7[-44],r8
	}

	// Align each end of destination pointer with its natural boundary.
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
8000408e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004092:	a1 c8       	cbr	r8,0x0
80004094:	ef 48 ff cc 	st.w	r7[-52],r8
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
80004098:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000409c:	e0 18 ff fc 	andl	r8,0xfffc
800040a0:	ef 48 ff c4 	st.w	r7[-60],r8
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));
800040a4:	ee f8 ff c4 	ld.w	r8,r7[-60]
800040a8:	e0 18 ff f8 	andl	r8,0xfff8
800040ac:	ef 48 ff bc 	st.w	r7[-68],r8

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
800040b0:	c4 b9       	rjmp	80004346 <flashc_memset64+0x3ea>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800040b2:	f0 1f 00 af 	mcall	8000436c <flashc_memset64+0x410>
		error_status |= flashc_error_status;
800040b6:	fe f8 02 ba 	ld.w	r8,pc[698]
800040ba:	70 08       	ld.w	r8,r8[0x0]
800040bc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800040c0:	f3 e8 10 08 	or	r8,r9,r8
800040c4:	ef 48 ff ec 	st.w	r7[-20],r8

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
800040c8:	ee f8 ff bc 	ld.w	r8,r7[-68]
800040cc:	ef 48 ff f8 	st.w	r7[-8],r8
800040d0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040d4:	e0 18 fe 00 	andl	r8,0xfe00
800040d8:	f0 c8 fe 00 	sub	r8,r8,-512
800040dc:	ef 48 ff fc 	st.w	r7[-4],r8
800040e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800040e8:	f0 09 0d 48 	min	r8,r8,r9
800040ec:	ef 48 ff f4 	st.w	r7[-12],r8
800040f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
800040f4:	ef 48 ff b4 	st.w	r7[-76],r8
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800040f8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040fc:	10 9a       	mov	r10,r8
800040fe:	e0 1a fe 00 	andl	r10,0xfe00
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
80004102:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004106:	10 99       	mov	r9,r8
80004108:	e0 19 fe 00 	andl	r9,0xfe00
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
8000410c:	30 18       	mov	r8,1
8000410e:	12 3a       	cp.w	r10,r9
80004110:	c0 22       	brcc	80004114 <flashc_memset64+0x1b8>
80004112:	30 08       	mov	r8,0
80004114:	ef 68 ff eb 	st.b	r7[-21],r8
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80004118:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000411c:	ee e9 ff ac 	st.d	r7[-84],r8

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80004120:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004124:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004128:	c5 b0       	breq	800041de <flashc_memset64+0x282>
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8000412a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000412e:	e0 18 fe 00 	andl	r8,0xfe00
80004132:	ef 48 ff a8 	st.w	r7[-88],r8
80004136:	c0 e8       	rjmp	80004152 <flashc_memset64+0x1f6>
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
80004138:	ee fa ff a8 	ld.w	r10,r7[-88]
8000413c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004140:	f0 e8 00 00 	ld.d	r8,r8[0]
80004144:	f4 e9 00 00 	st.d	r10[0],r8
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
80004148:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000414c:	2f 88       	sub	r8,-8
8000414e:	ef 48 ff a8 	st.w	r7[-88],r8
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80004152:	ee f9 ff a8 	ld.w	r9,r7[-88]
80004156:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000415a:	e0 18 ff f8 	andl	r8,0xfff8
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8000415e:	10 39       	cp.w	r9,r8
80004160:	ce c3       	brcs	80004138 <flashc_memset64+0x1dc>
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
80004162:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004166:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000416a:	c3 a0       	breq	800041de <flashc_memset64+0x282>
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
8000416c:	30 08       	mov	r8,0
8000416e:	ef 48 ff f0 	st.w	r7[-16],r8
80004172:	c1 38       	rjmp	80004198 <flashc_memset64+0x23c>
					flash_dword.u8[i] = *tmp.u8ptr++;
80004174:	ee fa ff f0 	ld.w	r10,r7[-16]
80004178:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000417c:	11 89       	ld.ub	r9,r8[0x0]
8000417e:	5c 59       	castu.b	r9
80004180:	ee 0a 00 0a 	add	r10,r7,r10
80004184:	f5 69 ff ac 	st.b	r10[-84],r9
80004188:	2f f8       	sub	r8,-1
8000418a:	ef 48 ff a8 	st.w	r7[-88],r8
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
8000418e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004192:	2f f8       	sub	r8,-1
80004194:	ef 48 ff f0 	st.w	r7[-16],r8
80004198:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000419c:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800041a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041a4:	10 39       	cp.w	r9,r8
800041a6:	fe 9b ff e7 	brhi	80004174 <flashc_memset64+0x218>
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
800041aa:	ee f8 ff e0 	ld.w	r8,r7[-32]
800041ae:	e0 18 ff f8 	andl	r8,0xfff8
800041b2:	ef 48 ff e0 	st.w	r7[-32],r8

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
800041b6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800041ba:	ee f8 ff bc 	ld.w	r8,r7[-68]
800041be:	10 39       	cp.w	r9,r8
800041c0:	c0 f2       	brcc	800041de <flashc_memset64+0x282>
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
800041c2:	ee fa ff e0 	ld.w	r10,r7[-32]
800041c6:	ee e8 ff ac 	ld.d	r8,r7[-84]
800041ca:	f4 e9 00 00 	st.d	r10[0],r8
800041ce:	f4 c8 ff f8 	sub	r8,r10,-8
800041d2:	ef 48 ff e0 	st.w	r7[-32],r8
					flash_dword.u64 = source.u64;
800041d6:	ee e8 ff d8 	ld.d	r8,r7[-40]
800041da:	ee e9 ff ac 	st.d	r7[-84],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
800041de:	ee f8 ff b4 	ld.w	r8,r7[-76]
800041e2:	10 99       	mov	r9,r8
800041e4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800041e8:	f2 08 01 08 	sub	r8,r9,r8
800041ec:	a3 58       	asr	r8,0x3
800041ee:	ef 48 ff f0 	st.w	r7[-16],r8
800041f2:	c1 08       	rjmp	80004212 <flashc_memset64+0x2b6>
			*dest.u64ptr++ = source.u64;
800041f4:	ee fa ff e0 	ld.w	r10,r7[-32]
800041f8:	ee e8 ff d8 	ld.d	r8,r7[-40]
800041fc:	f4 e9 00 00 	st.d	r10[0],r8
80004200:	f4 c8 ff f8 	sub	r8,r10,-8
80004204:	ef 48 ff e0 	st.w	r7[-32],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80004208:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000420c:	20 18       	sub	r8,1
8000420e:	ef 48 ff f0 	st.w	r7[-16],r8
80004212:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004216:	58 08       	cp.w	r8,0
80004218:	ce e1       	brne	800041f4 <flashc_memset64+0x298>
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
8000421a:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8000421e:	30 08       	mov	r8,0
80004220:	f0 09 18 00 	cp.b	r9,r8
80004224:	c4 70       	breq	800042b2 <flashc_memset64+0x356>
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
80004226:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000422a:	ef 48 ff a8 	st.w	r7[-88],r8

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
8000422e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004232:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004236:	c3 80       	breq	800042a6 <flashc_memset64+0x34a>
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80004238:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000423c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004240:	ef 48 ff f0 	st.w	r7[-16],r8
80004244:	c1 38       	rjmp	8000426a <flashc_memset64+0x30e>
						flash_dword.u8[i] = *tmp.u8ptr++;
80004246:	ee fa ff f0 	ld.w	r10,r7[-16]
8000424a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000424e:	11 89       	ld.ub	r9,r8[0x0]
80004250:	5c 59       	castu.b	r9
80004252:	ee 0a 00 0a 	add	r10,r7,r10
80004256:	f5 69 ff ac 	st.b	r10[-84],r9
8000425a:	2f f8       	sub	r8,-1
8000425c:	ef 48 ff a8 	st.w	r7[-88],r8
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80004260:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004264:	2f f8       	sub	r8,-1
80004266:	ef 48 ff f0 	st.w	r7[-16],r8
8000426a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000426e:	58 78       	cp.w	r8,7
80004270:	fe 98 ff eb 	brls	80004246 <flashc_memset64+0x2ea>
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
80004274:	ee fa ff e0 	ld.w	r10,r7[-32]
80004278:	ee e8 ff ac 	ld.d	r8,r7[-84]
8000427c:	f4 e9 00 00 	st.d	r10[0],r8
80004280:	f4 c8 ff f8 	sub	r8,r10,-8
80004284:	ef 48 ff e0 	st.w	r7[-32],r8
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80004288:	c1 08       	rjmp	800042a8 <flashc_memset64+0x34c>
					*tmp.u64ptr = *tmp.u64ptr;
8000428a:	ee fa ff a8 	ld.w	r10,r7[-88]
8000428e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004292:	f0 e8 00 00 	ld.d	r8,r8[0]
80004296:	f4 e9 00 00 	st.d	r10[0],r8
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
8000429a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000429e:	2f 88       	sub	r8,-8
800042a0:	ef 48 ff a8 	st.w	r7[-88],r8
800042a4:	c0 28       	rjmp	800042a8 <flashc_memset64+0x34c>
800042a6:	d7 03       	nop
800042a8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800042ac:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800042b0:	ce d1       	brne	8000428a <flashc_memset64+0x32e>
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
800042b2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800042b6:	fc 19 80 80 	movh	r9,0x8080
800042ba:	12 38       	cp.w	r8,r9
800042bc:	e0 8b 00 2a 	brhi	80004310 <flashc_memset64+0x3b4>
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
800042c0:	ef 39 ff 94 	ld.ub	r9,r7[-108]
800042c4:	30 08       	mov	r8,0
800042c6:	f0 09 18 00 	cp.b	r9,r8
800042ca:	c0 d0       	breq	800042e4 <flashc_memset64+0x388>
				flashc_erase_page(-1, false);
800042cc:	30 0b       	mov	r11,0
800042ce:	3f fc       	mov	r12,-1
800042d0:	f0 1f 00 29 	mcall	80004374 <flashc_memset64+0x418>
				error_status |= flashc_error_status;
800042d4:	4a 78       	lddpc	r8,80004370 <flashc_memset64+0x414>
800042d6:	70 08       	ld.w	r8,r8[0x0]
800042d8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800042dc:	f3 e8 10 08 	or	r8,r9,r8
800042e0:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_page(-1);
800042e4:	3f fc       	mov	r12,-1
800042e6:	f0 1f 00 25 	mcall	80004378 <flashc_memset64+0x41c>
			error_status |= flashc_error_status;
800042ea:	4a 28       	lddpc	r8,80004370 <flashc_memset64+0x414>
800042ec:	70 08       	ld.w	r8,r8[0x0]
800042ee:	ee f9 ff ec 	ld.w	r9,r7[-20]
800042f2:	f3 e8 10 08 	or	r8,r9,r8
800042f6:	ef 48 ff ec 	st.w	r7[-20],r8

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
800042fa:	ee f9 ff e0 	ld.w	r9,r7[-32]
800042fe:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004302:	10 39       	cp.w	r9,r8
80004304:	c2 13       	brcs	80004346 <flashc_memset64+0x3ea>
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80004306:	fc 18 80 80 	movh	r8,0x8080
8000430a:	ef 48 ff e0 	st.w	r7[-32],r8
8000430e:	c1 c8       	rjmp	80004346 <flashc_memset64+0x3ea>
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
80004310:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80004314:	30 08       	mov	r8,0
80004316:	f0 09 18 00 	cp.b	r9,r8
8000431a:	c0 c0       	breq	80004332 <flashc_memset64+0x3d6>
				flashc_erase_user_page(false);
8000431c:	30 0c       	mov	r12,0
8000431e:	f0 1f 00 18 	mcall	8000437c <flashc_memset64+0x420>
				error_status |= flashc_error_status;
80004322:	49 48       	lddpc	r8,80004370 <flashc_memset64+0x414>
80004324:	70 08       	ld.w	r8,r8[0x0]
80004326:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000432a:	f3 e8 10 08 	or	r8,r9,r8
8000432e:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_user_page();
80004332:	f0 1f 00 14 	mcall	80004380 <flashc_memset64+0x424>
			error_status |= flashc_error_status;
80004336:	48 f8       	lddpc	r8,80004370 <flashc_memset64+0x414>
80004338:	70 08       	ld.w	r8,r8[0x0]
8000433a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000433e:	f3 e8 10 08 	or	r8,r9,r8
80004342:	ef 48 ff ec 	st.w	r7[-20],r8
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
80004346:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000434a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000434e:	10 39       	cp.w	r9,r8
80004350:	fe 93 fe b1 	brlo	800040b2 <flashc_memset64+0x156>
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
80004354:	48 78       	lddpc	r8,80004370 <flashc_memset64+0x414>
80004356:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000435a:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memset function does.
	return dst;
8000435c:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
80004360:	10 9c       	mov	r12,r8
80004362:	2e 5d       	sub	sp,-108
80004364:	e3 cd 80 80 	ldm	sp++,r7,pc
80004368:	80 00       	ld.sh	r0,r0[0x0]
8000436a:	3b f0       	mov	r0,-65
8000436c:	80 00       	ld.sh	r0,r0[0x0]
8000436e:	3d 04       	mov	r4,-48
80004370:	00 00       	add	r0,r0
80004372:	00 bc       	st.h	r0++,r12
80004374:	80 00       	ld.sh	r0,r0[0x0]
80004376:	3d 64       	mov	r4,-42
80004378:	80 00       	ld.sh	r0,r0[0x0]
8000437a:	3d cc       	mov	r12,-36
8000437c:	80 00       	ld.sh	r0,r0[0x0]
8000437e:	3e 10       	mov	r0,-31
80004380:	80 00       	ld.sh	r0,r0[0x0]
80004382:	3e 4c       	mov	r12,-28

80004384 <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80004384:	eb cd 40 80 	pushm	r7,lr
80004388:	1a 97       	mov	r7,sp
8000438a:	20 bd       	sub	sp,44
8000438c:	ef 4c ff e0 	st.w	r7[-32],r12
80004390:	ef 4b ff dc 	st.w	r7[-36],r11
80004394:	ef 4a ff d8 	st.w	r7[-40],r10
80004398:	12 98       	mov	r8,r9
8000439a:	ef 68 ff d4 	st.b	r7[-44],r8
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
8000439e:	30 08       	mov	r8,0
800043a0:	ef 48 ff f0 	st.w	r7[-16],r8
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
800043a4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800043a8:	ef 48 ff f8 	st.w	r7[-8],r8
	const uint8_t* src_buf=(const uint8_t*)src;
800043ac:	ee f8 ff dc 	ld.w	r8,r7[-36]
800043b0:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
800043b4:	ee f9 ff e0 	ld.w	r9,r7[-32]
800043b8:	30 18       	mov	r8,1
800043ba:	e0 6a ff ff 	mov	r10,65535
800043be:	ea 1a 80 7f 	orh	r10,0x807f
800043c2:	14 39       	cp.w	r9,r10
800043c4:	e0 8b 00 03 	brhi	800043ca <flashc_memcpy+0x46>
800043c8:	30 08       	mov	r8,0
800043ca:	ef 68 ff ef 	st.b	r7[-17],r8

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
800043ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043d6:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800043da:	f2 08 01 08 	sub	r8,r9,r8
800043de:	ef 48 ff f4 	st.w	r7[-12],r8

	while (nbytes) {
800043e2:	c9 18       	rjmp	80004504 <flashc_memcpy+0x180>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800043e4:	f0 1f 00 50 	mcall	80004524 <flashc_memcpy+0x1a0>
		error_status |= flashc_error_status;
800043e8:	4d 08       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
800043ea:	70 08       	ld.w	r8,r8[0x0]
800043ec:	ee f9 ff f0 	ld.w	r9,r7[-16]
800043f0:	f3 e8 10 08 	or	r8,r9,r8
800043f4:	ef 48 ff f0 	st.w	r7[-16],r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
800043f8:	30 08       	mov	r8,0
800043fa:	ef 58 ff ec 	st.h	r7[-20],r8
800043fe:	c4 b8       	rjmp	80004494 <flashc_memcpy+0x110>
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
80004400:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004404:	f0 e8 00 00 	ld.d	r8,r8[0]
80004408:	ee e9 ff e4 	st.d	r7[-28],r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
8000440c:	30 08       	mov	r8,0
8000440e:	ef 68 ff ee 	st.b	r7[-18],r8
80004412:	c2 d8       	rjmp	8000446c <flashc_memcpy+0xe8>
				if (nbytes && (flash_add == dest_add)) {
80004414:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004418:	58 08       	cp.w	r8,0
8000441a:	c1 f0       	breq	80004458 <flashc_memcpy+0xd4>
8000441c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004424:	10 39       	cp.w	r9,r8
80004426:	c1 91       	brne	80004458 <flashc_memcpy+0xd4>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80004428:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000442c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004430:	11 88       	ld.ub	r8,r8[0x0]
80004432:	ee 09 00 09 	add	r9,r7,r9
80004436:	f3 68 ff e4 	st.b	r9[-28],r8
8000443a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000443e:	2f f8       	sub	r8,-1
80004440:	ef 48 ff fc 	st.w	r7[-4],r8
					dest_add++;
80004444:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004448:	2f f8       	sub	r8,-1
8000444a:	ef 48 ff f8 	st.w	r7[-8],r8
					nbytes--;
8000444e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004452:	20 18       	sub	r8,1
80004454:	ef 48 ff d8 	st.w	r7[-40],r8
				}
				flash_add++;
80004458:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000445c:	2f f8       	sub	r8,-1
8000445e:	ef 48 ff f4 	st.w	r7[-12],r8
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80004462:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004466:	2f f8       	sub	r8,-1
80004468:	ef 68 ff ee 	st.b	r7[-18],r8
8000446c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80004470:	30 78       	mov	r8,7
80004472:	f0 09 18 00 	cp.b	r9,r8
80004476:	fe 98 ff cf 	brls	80004414 <flashc_memcpy+0x90>
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
8000447a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000447e:	20 88       	sub	r8,8
80004480:	10 9a       	mov	r10,r8
80004482:	ee e8 ff e4 	ld.d	r8,r7[-28]
80004486:	f4 e9 00 00 	st.d	r10[0],r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
8000448a:	ef 08 ff ec 	ld.sh	r8,r7[-20]
8000448e:	2f 88       	sub	r8,-8
80004490:	ef 58 ff ec 	st.h	r7[-20],r8
80004494:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80004498:	e0 68 01 ff 	mov	r8,511
8000449c:	f0 09 19 00 	cp.h	r9,r8
800044a0:	fe 98 ff b0 	brls	80004400 <flashc_memcpy+0x7c>
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
800044a4:	ef 39 ff d4 	ld.ub	r9,r7[-44]
800044a8:	30 08       	mov	r8,0
800044aa:	f0 09 18 00 	cp.b	r9,r8
800044ae:	c1 70       	breq	800044dc <flashc_memcpy+0x158>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
800044b0:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800044b4:	30 08       	mov	r8,0
800044b6:	f0 09 18 00 	cp.b	r9,r8
800044ba:	c0 50       	breq	800044c4 <flashc_memcpy+0x140>
800044bc:	30 0c       	mov	r12,0
800044be:	f0 1f 00 1c 	mcall	8000452c <flashc_memcpy+0x1a8>
800044c2:	c0 58       	rjmp	800044cc <flashc_memcpy+0x148>
800044c4:	30 0b       	mov	r11,0
800044c6:	3f fc       	mov	r12,-1
800044c8:	f0 1f 00 1a 	mcall	80004530 <flashc_memcpy+0x1ac>
			error_status |= flashc_error_status;
800044cc:	49 78       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
800044ce:	70 08       	ld.w	r8,r8[0x0]
800044d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800044d4:	f3 e8 10 08 	or	r8,r9,r8
800044d8:	ef 48 ff f0 	st.w	r7[-16],r8
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
800044dc:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800044e0:	30 08       	mov	r8,0
800044e2:	f0 09 18 00 	cp.b	r9,r8
800044e6:	c0 40       	breq	800044ee <flashc_memcpy+0x16a>
800044e8:	f0 1f 00 13 	mcall	80004534 <flashc_memcpy+0x1b0>
800044ec:	c0 48       	rjmp	800044f4 <flashc_memcpy+0x170>
800044ee:	3f fc       	mov	r12,-1
800044f0:	f0 1f 00 12 	mcall	80004538 <flashc_memcpy+0x1b4>
		error_status |= flashc_error_status;
800044f4:	48 d8       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
800044f6:	70 08       	ld.w	r8,r8[0x0]
800044f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800044fc:	f3 e8 10 08 	or	r8,r9,r8
80004500:	ef 48 ff f0 	st.w	r7[-16],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80004504:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004508:	58 08       	cp.w	r8,0
8000450a:	fe 91 ff 6d 	brne	800043e4 <flashc_memcpy+0x60>
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
8000450e:	48 78       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
80004510:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004514:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
80004516:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
8000451a:	10 9c       	mov	r12,r8
8000451c:	2f 5d       	sub	sp,-44
8000451e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004522:	00 00       	add	r0,r0
80004524:	80 00       	ld.sh	r0,r0[0x0]
80004526:	3d 04       	mov	r4,-48
80004528:	00 00       	add	r0,r0
8000452a:	00 bc       	st.h	r0++,r12
8000452c:	80 00       	ld.sh	r0,r0[0x0]
8000452e:	3e 10       	mov	r0,-31
80004530:	80 00       	ld.sh	r0,r0[0x0]
80004532:	3d 64       	mov	r4,-42
80004534:	80 00       	ld.sh	r0,r0[0x0]
80004536:	3e 4c       	mov	r12,-28
80004538:	80 00       	ld.sh	r0,r0[0x0]
8000453a:	3d cc       	mov	r12,-36

8000453c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000453c:	eb cd 40 80 	pushm	r7,lr
80004540:	1a 97       	mov	r7,sp
80004542:	20 4d       	sub	sp,16
80004544:	ef 4c ff f4 	st.w	r7[-12],r12
80004548:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000454c:	30 08       	mov	r8,0
8000454e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
80004552:	30 08       	mov	r8,0
80004554:	ef 48 ff fc 	st.w	r7[-4],r8
80004558:	c1 c8       	rjmp	80004590 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000455a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000455e:	70 19       	ld.w	r9,r8[0x4]
80004560:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004564:	70 08       	ld.w	r8,r8[0x0]
80004566:	12 9b       	mov	r11,r9
80004568:	10 9c       	mov	r12,r8
8000456a:	f0 1f 00 10 	mcall	800045a8 <gpio_enable_module+0x6c>
8000456e:	18 98       	mov	r8,r12
80004570:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004574:	f3 e8 10 08 	or	r8,r9,r8
80004578:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
8000457c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004580:	2f 88       	sub	r8,-8
80004582:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80004586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000458a:	2f f8       	sub	r8,-1
8000458c:	ef 48 ff fc 	st.w	r7[-4],r8
80004590:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004594:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004598:	10 39       	cp.w	r9,r8
8000459a:	ce 03       	brcs	8000455a <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
8000459c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800045a0:	10 9c       	mov	r12,r8
800045a2:	2f cd       	sub	sp,-16
800045a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800045a8:	80 00       	ld.sh	r0,r0[0x0]
800045aa:	45 ac       	lddsp	r12,sp[0x168]

800045ac <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800045ac:	eb cd 40 80 	pushm	r7,lr
800045b0:	1a 97       	mov	r7,sp
800045b2:	20 3d       	sub	sp,12
800045b4:	ef 4c ff f8 	st.w	r7[-8],r12
800045b8:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800045bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045c0:	a5 98       	lsr	r8,0x5
800045c2:	a9 78       	lsl	r8,0x9
800045c4:	e0 28 e0 00 	sub	r8,57344
800045c8:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
800045cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800045d0:	58 78       	cp.w	r8,7
800045d2:	e0 8b 01 16 	brhi	800047fe <gpio_enable_module_pin+0x252>
800045d6:	fe f9 02 4e 	ld.w	r9,pc[590]
800045da:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800045de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045e6:	30 19       	mov	r9,1
800045e8:	f2 08 09 48 	lsl	r8,r9,r8
800045ec:	10 99       	mov	r9,r8
800045ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045f2:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800045f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045fc:	30 19       	mov	r9,1
800045fe:	f2 08 09 48 	lsl	r8,r9,r8
80004602:	10 99       	mov	r9,r8
80004604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004608:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000460a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000460e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004612:	30 19       	mov	r9,1
80004614:	f2 08 09 48 	lsl	r8,r9,r8
80004618:	10 99       	mov	r9,r8
8000461a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000461e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004620:	cf 18       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004626:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000462a:	30 19       	mov	r9,1
8000462c:	f2 08 09 48 	lsl	r8,r9,r8
80004630:	10 99       	mov	r9,r8
80004632:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004636:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004638:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000463c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004640:	30 19       	mov	r9,1
80004642:	f2 08 09 48 	lsl	r8,r9,r8
80004646:	10 99       	mov	r9,r8
80004648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000464c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000464e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004652:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004656:	30 19       	mov	r9,1
80004658:	f2 08 09 48 	lsl	r8,r9,r8
8000465c:	10 99       	mov	r9,r8
8000465e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004662:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004664:	cc f8       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000466a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000466e:	30 19       	mov	r9,1
80004670:	f2 08 09 48 	lsl	r8,r9,r8
80004674:	10 99       	mov	r9,r8
80004676:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000467a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000467c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004680:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004684:	30 19       	mov	r9,1
80004686:	f2 08 09 48 	lsl	r8,r9,r8
8000468a:	10 99       	mov	r9,r8
8000468c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004690:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80004692:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004696:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000469a:	30 19       	mov	r9,1
8000469c:	f2 08 09 48 	lsl	r8,r9,r8
800046a0:	10 99       	mov	r9,r8
800046a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046a6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800046a8:	ca d8       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800046aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046b2:	30 19       	mov	r9,1
800046b4:	f2 08 09 48 	lsl	r8,r9,r8
800046b8:	10 99       	mov	r9,r8
800046ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046be:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800046c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046c8:	30 19       	mov	r9,1
800046ca:	f2 08 09 48 	lsl	r8,r9,r8
800046ce:	10 99       	mov	r9,r8
800046d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046d4:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800046d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046de:	30 19       	mov	r9,1
800046e0:	f2 08 09 48 	lsl	r8,r9,r8
800046e4:	10 99       	mov	r9,r8
800046e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046ea:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800046ec:	c8 b8       	rjmp	80004802 <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800046ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046f6:	30 19       	mov	r9,1
800046f8:	f2 08 09 48 	lsl	r8,r9,r8
800046fc:	10 99       	mov	r9,r8
800046fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004702:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004708:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000470c:	30 19       	mov	r9,1
8000470e:	f2 08 09 48 	lsl	r8,r9,r8
80004712:	10 99       	mov	r9,r8
80004714:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004718:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000471a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000471e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004722:	30 19       	mov	r9,1
80004724:	f2 08 09 48 	lsl	r8,r9,r8
80004728:	10 99       	mov	r9,r8
8000472a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000472e:	91 d9       	st.w	r8[0x34],r9
		break;
80004730:	c6 98       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004736:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000473a:	30 19       	mov	r9,1
8000473c:	f2 08 09 48 	lsl	r8,r9,r8
80004740:	10 99       	mov	r9,r8
80004742:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004746:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004748:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000474c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004750:	30 19       	mov	r9,1
80004752:	f2 08 09 48 	lsl	r8,r9,r8
80004756:	10 99       	mov	r9,r8
80004758:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000475c:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000475e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004762:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004766:	30 19       	mov	r9,1
80004768:	f2 08 09 48 	lsl	r8,r9,r8
8000476c:	10 99       	mov	r9,r8
8000476e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004772:	91 d9       	st.w	r8[0x34],r9
		break;
80004774:	c4 78       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000477a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000477e:	30 19       	mov	r9,1
80004780:	f2 08 09 48 	lsl	r8,r9,r8
80004784:	10 99       	mov	r9,r8
80004786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000478a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000478c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004790:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004794:	30 19       	mov	r9,1
80004796:	f2 08 09 48 	lsl	r8,r9,r8
8000479a:	10 99       	mov	r9,r8
8000479c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047a0:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800047a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047aa:	30 19       	mov	r9,1
800047ac:	f2 08 09 48 	lsl	r8,r9,r8
800047b0:	10 99       	mov	r9,r8
800047b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047b6:	91 d9       	st.w	r8[0x34],r9
		break;
800047b8:	c2 58       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800047ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047c2:	30 19       	mov	r9,1
800047c4:	f2 08 09 48 	lsl	r8,r9,r8
800047c8:	10 99       	mov	r9,r8
800047ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047ce:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800047d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047d8:	30 19       	mov	r9,1
800047da:	f2 08 09 48 	lsl	r8,r9,r8
800047de:	10 99       	mov	r9,r8
800047e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047e4:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800047e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047ee:	30 19       	mov	r9,1
800047f0:	f2 08 09 48 	lsl	r8,r9,r8
800047f4:	10 99       	mov	r9,r8
800047f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047fa:	91 d9       	st.w	r8[0x34],r9
		break;
800047fc:	c0 38       	rjmp	80004802 <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
800047fe:	30 18       	mov	r8,1
80004800:	c0 d8       	rjmp	8000481a <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80004802:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004806:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000480a:	30 19       	mov	r9,1
8000480c:	f2 08 09 48 	lsl	r8,r9,r8
80004810:	10 99       	mov	r9,r8
80004812:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004816:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80004818:	30 08       	mov	r8,0
}
8000481a:	10 9c       	mov	r12,r8
8000481c:	2f dd       	sub	sp,-12
8000481e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004822:	00 00       	add	r0,r0
80004824:	80 00       	ld.sh	r0,r0[0x0]
80004826:	b2 40       	st.h	r9[0x8],r0

80004828 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80004828:	eb cd 40 80 	pushm	r7,lr
8000482c:	1a 97       	mov	r7,sp
8000482e:	20 3d       	sub	sp,12
80004830:	ef 4c ff f8 	st.w	r7[-8],r12
80004834:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000483c:	a5 98       	lsr	r8,0x5
8000483e:	a9 78       	lsl	r8,0x9
80004840:	e0 28 e0 00 	sub	r8,57344
80004844:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
80004848:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000484c:	e2 18 00 08 	andl	r8,0x8,COH
80004850:	c0 e0       	breq	8000486c <gpio_configure_pin+0x44>
		gpio_port->pders = 1 << (pin & 0x1F);
80004852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004856:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000485a:	30 19       	mov	r9,1
8000485c:	f2 08 09 48 	lsl	r8,r9,r8
80004860:	10 99       	mov	r9,r8
80004862:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004866:	f1 49 00 84 	st.w	r8[132],r9
8000486a:	c0 d8       	rjmp	80004884 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
8000486c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004870:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004874:	30 19       	mov	r9,1
80004876:	f2 08 09 48 	lsl	r8,r9,r8
8000487a:	10 99       	mov	r9,r8
8000487c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004880:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
80004884:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004888:	e2 18 00 04 	andl	r8,0x4,COH
8000488c:	c0 e0       	breq	800048a8 <gpio_configure_pin+0x80>
		gpio_port->puers = 1 << (pin & 0x1F);
8000488e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004892:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004896:	30 19       	mov	r9,1
80004898:	f2 08 09 48 	lsl	r8,r9,r8
8000489c:	10 99       	mov	r9,r8
8000489e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048a2:	f1 49 00 74 	st.w	r8[116],r9
800048a6:	c0 d8       	rjmp	800048c0 <gpio_configure_pin+0x98>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800048a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048b0:	30 19       	mov	r9,1
800048b2:	f2 08 09 48 	lsl	r8,r9,r8
800048b6:	10 99       	mov	r9,r8
800048b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048bc:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
800048c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048c4:	e2 18 00 40 	andl	r8,0x40,COH
800048c8:	c0 e0       	breq	800048e4 <gpio_configure_pin+0xbc>
		gpio_port->odmers = 1 << (pin & 0x1F);
800048ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048d2:	30 19       	mov	r9,1
800048d4:	f2 08 09 48 	lsl	r8,r9,r8
800048d8:	10 99       	mov	r9,r8
800048da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048de:	f1 49 00 e4 	st.w	r8[228],r9
800048e2:	c0 d8       	rjmp	800048fc <gpio_configure_pin+0xd4>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
800048e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048ec:	30 19       	mov	r9,1
800048ee:	f2 08 09 48 	lsl	r8,r9,r8
800048f2:	10 99       	mov	r9,r8
800048f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048f8:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
800048fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004900:	e2 18 00 10 	andl	r8,0x10,COH
80004904:	c0 e0       	breq	80004920 <gpio_configure_pin+0xf8>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
80004906:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000490a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000490e:	30 19       	mov	r9,1
80004910:	f2 08 09 48 	lsl	r8,r9,r8
80004914:	10 99       	mov	r9,r8
80004916:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000491a:	f1 49 01 04 	st.w	r8[260],r9
8000491e:	c0 d8       	rjmp	80004938 <gpio_configure_pin+0x110>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
80004920:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004924:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004928:	30 19       	mov	r9,1
8000492a:	f2 08 09 48 	lsl	r8,r9,r8
8000492e:	10 99       	mov	r9,r8
80004930:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004934:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
80004938:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000493c:	e2 18 00 20 	andl	r8,0x20,COH
80004940:	c0 e0       	breq	8000495c <gpio_configure_pin+0x134>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
80004942:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004946:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000494a:	30 19       	mov	r9,1
8000494c:	f2 08 09 48 	lsl	r8,r9,r8
80004950:	10 99       	mov	r9,r8
80004952:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004956:	f1 49 01 14 	st.w	r8[276],r9
8000495a:	c0 d8       	rjmp	80004974 <gpio_configure_pin+0x14c>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
8000495c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004960:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004964:	30 19       	mov	r9,1
80004966:	f2 08 09 48 	lsl	r8,r9,r8
8000496a:	10 99       	mov	r9,r8
8000496c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004970:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80004974:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004978:	e2 18 00 80 	andl	r8,0x80,COH
8000497c:	c5 a0       	breq	80004a30 <gpio_configure_pin+0x208>
		if (flags & GPIO_BOTHEDGES) {
8000497e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004982:	e2 18 01 80 	andl	r8,0x180,COH
80004986:	c1 a0       	breq	800049ba <gpio_configure_pin+0x192>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000498c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004990:	30 19       	mov	r9,1
80004992:	f2 08 09 48 	lsl	r8,r9,r8
80004996:	10 99       	mov	r9,r8
80004998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000499c:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800049a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049a8:	30 19       	mov	r9,1
800049aa:	f2 08 09 48 	lsl	r8,r9,r8
800049ae:	10 99       	mov	r9,r8
800049b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049b4:	f1 49 00 b8 	st.w	r8[184],r9
800049b8:	c3 c8       	rjmp	80004a30 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_RISING) {
800049ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049be:	e2 18 02 80 	andl	r8,0x280,COH
800049c2:	c1 a0       	breq	800049f6 <gpio_configure_pin+0x1ce>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800049c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049cc:	30 19       	mov	r9,1
800049ce:	f2 08 09 48 	lsl	r8,r9,r8
800049d2:	10 99       	mov	r9,r8
800049d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049d8:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800049dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049e4:	30 19       	mov	r9,1
800049e6:	f2 08 09 48 	lsl	r8,r9,r8
800049ea:	10 99       	mov	r9,r8
800049ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049f0:	f1 49 00 b8 	st.w	r8[184],r9
800049f4:	c1 e8       	rjmp	80004a30 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_FALLING) {
800049f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049fa:	e2 18 03 80 	andl	r8,0x380,COH
800049fe:	c1 90       	breq	80004a30 <gpio_configure_pin+0x208>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004a00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a04:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a08:	30 19       	mov	r9,1
80004a0a:	f2 08 09 48 	lsl	r8,r9,r8
80004a0e:	10 99       	mov	r9,r8
80004a10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a14:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80004a18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a1c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a20:	30 19       	mov	r9,1
80004a22:	f2 08 09 48 	lsl	r8,r9,r8
80004a26:	10 99       	mov	r9,r8
80004a28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a2c:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80004a30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a34:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004a38:	5c 58       	castu.b	r8
80004a3a:	c2 c0       	breq	80004a92 <gpio_configure_pin+0x26a>
		if (flags & GPIO_INIT_HIGH) {
80004a3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a40:	e2 18 00 02 	andl	r8,0x2,COH
80004a44:	c0 e0       	breq	80004a60 <gpio_configure_pin+0x238>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80004a46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a4e:	30 19       	mov	r9,1
80004a50:	f2 08 09 48 	lsl	r8,r9,r8
80004a54:	10 99       	mov	r9,r8
80004a56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a5a:	f1 49 00 54 	st.w	r8[84],r9
80004a5e:	c0 d8       	rjmp	80004a78 <gpio_configure_pin+0x250>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80004a60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a64:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a68:	30 19       	mov	r9,1
80004a6a:	f2 08 09 48 	lsl	r8,r9,r8
80004a6e:	10 99       	mov	r9,r8
80004a70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a74:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80004a78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a7c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a80:	30 19       	mov	r9,1
80004a82:	f2 08 09 48 	lsl	r8,r9,r8
80004a86:	10 99       	mov	r9,r8
80004a88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a8c:	f1 49 00 44 	st.w	r8[68],r9
80004a90:	c0 d8       	rjmp	80004aaa <gpio_configure_pin+0x282>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80004a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a9a:	30 19       	mov	r9,1
80004a9c:	f2 08 09 48 	lsl	r8,r9,r8
80004aa0:	10 99       	mov	r9,r8
80004aa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004aa6:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004aaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004ab2:	30 19       	mov	r9,1
80004ab4:	f2 08 09 48 	lsl	r8,r9,r8
80004ab8:	10 99       	mov	r9,r8
80004aba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004abe:	91 19       	st.w	r8[0x4],r9
}
80004ac0:	2f dd       	sub	sp,-12
80004ac2:	e3 cd 80 80 	ldm	sp++,r7,pc

80004ac6 <gpio_get_pin_value>:
 * \param pin The pin number.
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
80004ac6:	eb cd 40 80 	pushm	r7,lr
80004aca:	1a 97       	mov	r7,sp
80004acc:	20 2d       	sub	sp,8
80004ace:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004ad2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ad6:	a5 98       	lsr	r8,0x5
80004ad8:	a9 78       	lsl	r8,0x9
80004ada:	e0 28 e0 00 	sub	r8,57344
80004ade:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80004ae2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ae6:	71 89       	ld.w	r9,r8[0x60]
80004ae8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004af0:	f2 08 0a 48 	lsr	r8,r9,r8
80004af4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004af8:	5c 58       	castu.b	r8
}
80004afa:	10 9c       	mov	r12,r8
80004afc:	2f ed       	sub	sp,-8
80004afe:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b02 <gpio_set_pin_high>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
80004b02:	eb cd 40 80 	pushm	r7,lr
80004b06:	1a 97       	mov	r7,sp
80004b08:	20 2d       	sub	sp,8
80004b0a:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b12:	a5 98       	lsr	r8,0x5
80004b14:	a9 78       	lsl	r8,0x9
80004b16:	e0 28 e0 00 	sub	r8,57344
80004b1a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80004b1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b22:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b26:	30 19       	mov	r9,1
80004b28:	f2 08 09 48 	lsl	r8,r9,r8
80004b2c:	10 99       	mov	r9,r8
80004b2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b32:	f1 49 00 54 	st.w	r8[84],r9
}
80004b36:	2f ed       	sub	sp,-8
80004b38:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b3c <gpio_set_pin_low>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
80004b3c:	eb cd 40 80 	pushm	r7,lr
80004b40:	1a 97       	mov	r7,sp
80004b42:	20 2d       	sub	sp,8
80004b44:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b4c:	a5 98       	lsr	r8,0x5
80004b4e:	a9 78       	lsl	r8,0x9
80004b50:	e0 28 e0 00 	sub	r8,57344
80004b54:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b5c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b60:	30 19       	mov	r9,1
80004b62:	f2 08 09 48 	lsl	r8,r9,r8
80004b66:	10 99       	mov	r9,r8
80004b68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b6c:	f1 49 00 58 	st.w	r8[88],r9
}
80004b70:	2f ed       	sub	sp,-8
80004b72:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b76 <gpio_toggle_pin>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
80004b76:	eb cd 40 80 	pushm	r7,lr
80004b7a:	1a 97       	mov	r7,sp
80004b7c:	20 2d       	sub	sp,8
80004b7e:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b86:	a5 98       	lsr	r8,0x5
80004b88:	a9 78       	lsl	r8,0x9
80004b8a:	e0 28 e0 00 	sub	r8,57344
80004b8e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80004b92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b9a:	30 19       	mov	r9,1
80004b9c:	f2 08 09 48 	lsl	r8,r9,r8
80004ba0:	10 99       	mov	r9,r8
80004ba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ba6:	f1 49 00 5c 	st.w	r8[92],r9
}
80004baa:	2f ed       	sub	sp,-8
80004bac:	e3 cd 80 80 	ldm	sp++,r7,pc

80004bb0 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80004bb0:	eb cd 40 80 	pushm	r7,lr
80004bb4:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80004bb6:	c0 08       	rjmp	80004bb6 <_unhandled_interrupt+0x6>

80004bb8 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80004bb8:	eb cd 40 80 	pushm	r7,lr
80004bbc:	1a 97       	mov	r7,sp
80004bbe:	20 3d       	sub	sp,12
80004bc0:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80004bc4:	fe 78 00 00 	mov	r8,-65536
80004bc8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004bcc:	f2 09 11 03 	rsub	r9,r9,3
80004bd0:	28 09       	sub	r9,-128
80004bd2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004bd6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80004bda:	fe 78 00 00 	mov	r8,-65536
80004bde:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004be2:	2c 09       	sub	r9,-64
80004be4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004be8:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004bec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bf0:	58 08       	cp.w	r8,0
80004bf2:	c1 30       	breq	80004c18 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004bf4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bf8:	48 b8       	lddpc	r8,80004c24 <_get_interrupt_handler+0x6c>
80004bfa:	a1 79       	lsl	r9,0x1
80004bfc:	2f f9       	sub	r9,-1
80004bfe:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c06:	f0 08 12 00 	clz	r8,r8
80004c0a:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80004c0e:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004c10:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004c14:	70 08       	ld.w	r8,r8[0x0]
80004c16:	c0 28       	rjmp	80004c1a <_get_interrupt_handler+0x62>
80004c18:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80004c1a:	10 9c       	mov	r12,r8
80004c1c:	2f dd       	sub	sp,-12
80004c1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c22:	00 00       	add	r0,r0
80004c24:	80 00       	ld.sh	r0,r0[0x0]
80004c26:	b2 60       	st.h	r9[0xc],r0

80004c28 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80004c28:	eb cd 40 80 	pushm	r7,lr
80004c2c:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004c2e:	48 38       	lddpc	r8,80004c38 <INTC_init_evba+0x10>
80004c30:	e3 b8 00 01 	mtsr	0x4,r8
}
80004c34:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c38:	80 00       	ld.sh	r0,r0[0x0]
80004c3a:	b0 00       	st.h	r8[0x0],r0

80004c3c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80004c3c:	eb cd 40 80 	pushm	r7,lr
80004c40:	1a 97       	mov	r7,sp
80004c42:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80004c44:	f0 1f 00 20 	mcall	80004cc4 <INTC_init_interrupts+0x88>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004c48:	30 08       	mov	r8,0
80004c4a:	ef 48 ff f8 	st.w	r7[-8],r8
80004c4e:	c3 18       	rjmp	80004cb0 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004c50:	30 08       	mov	r8,0
80004c52:	ef 48 ff fc 	st.w	r7[-4],r8
80004c56:	c1 48       	rjmp	80004c7e <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80004c58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c5c:	49 b8       	lddpc	r8,80004cc8 <INTC_init_interrupts+0x8c>
80004c5e:	a1 79       	lsl	r9,0x1
80004c60:	2f f9       	sub	r9,-1
80004c62:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004c66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c6a:	a3 68       	lsl	r8,0x2
80004c6c:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004c70:	49 79       	lddpc	r9,80004ccc <INTC_init_interrupts+0x90>
80004c72:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004c74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c78:	2f f8       	sub	r8,-1
80004c7a:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80004c7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c82:	49 28       	lddpc	r8,80004cc8 <INTC_init_interrupts+0x8c>
80004c84:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004c88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c8c:	10 39       	cp.w	r9,r8
80004c8e:	fe 9b ff e5 	brhi	80004c58 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004c92:	fe 78 00 00 	mov	r8,-65536
80004c96:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c9a:	48 eb       	lddpc	r11,80004cd0 <INTC_init_interrupts+0x94>
80004c9c:	48 ea       	lddpc	r10,80004cd4 <INTC_init_interrupts+0x98>
80004c9e:	f6 0a 01 0a 	sub	r10,r11,r10
80004ca2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004ca6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004caa:	2f f8       	sub	r8,-1
80004cac:	ef 48 ff f8 	st.w	r7[-8],r8
80004cb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004cb4:	e0 48 00 2e 	cp.w	r8,46
80004cb8:	fe 98 ff cc 	brls	80004c50 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80004cbc:	2f ed       	sub	sp,-8
80004cbe:	e3 cd 80 80 	ldm	sp++,r7,pc
80004cc2:	00 00       	add	r0,r0
80004cc4:	80 00       	ld.sh	r0,r0[0x0]
80004cc6:	4c 28       	lddpc	r8,80004dcc <cpu_irq_is_enabled_flags+0x2>
80004cc8:	80 00       	ld.sh	r0,r0[0x0]
80004cca:	b2 60       	st.h	r9[0xc],r0
80004ccc:	80 00       	ld.sh	r0,r0[0x0]
80004cce:	4b b0       	lddpc	r0,80004db8 <cpu_irq_save+0xc>
80004cd0:	80 00       	ld.sh	r0,r0[0x0]
80004cd2:	b1 04       	ld.d	r4,r8
80004cd4:	80 00       	ld.sh	r0,r0[0x0]
80004cd6:	b0 00       	st.h	r8[0x0],r0

80004cd8 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80004cd8:	eb cd 40 80 	pushm	r7,lr
80004cdc:	1a 97       	mov	r7,sp
80004cde:	20 4d       	sub	sp,16
80004ce0:	ef 4c ff f8 	st.w	r7[-8],r12
80004ce4:	ef 4b ff f4 	st.w	r7[-12],r11
80004ce8:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80004cec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004cf0:	a5 98       	lsr	r8,0x5
80004cf2:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80004cf6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004cfa:	4a 78       	lddpc	r8,80004d94 <INTC_register_interrupt+0xbc>
80004cfc:	a1 79       	lsl	r9,0x1
80004cfe:	2f f9       	sub	r9,-1
80004d00:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004d04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004d08:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004d0c:	a3 68       	lsl	r8,0x2
80004d0e:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80004d12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004d16:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80004d18:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d1c:	58 08       	cp.w	r8,0
80004d1e:	c0 c1       	brne	80004d36 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004d20:	fe 78 00 00 	mov	r8,-65536
80004d24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d28:	49 cb       	lddpc	r11,80004d98 <INTC_register_interrupt+0xc0>
80004d2a:	49 da       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d2c:	f6 0a 01 0a 	sub	r10,r11,r10
80004d30:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004d34:	c2 d8       	rjmp	80004d8e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80004d36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d3a:	58 18       	cp.w	r8,1
80004d3c:	c0 d1       	brne	80004d56 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004d3e:	fe 78 00 00 	mov	r8,-65536
80004d42:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d46:	49 7b       	lddpc	r11,80004da0 <INTC_register_interrupt+0xc8>
80004d48:	49 5a       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d4a:	f6 0a 01 0a 	sub	r10,r11,r10
80004d4e:	bf aa       	sbr	r10,0x1e
80004d50:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004d54:	c1 d8       	rjmp	80004d8e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80004d56:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d5a:	58 28       	cp.w	r8,2
80004d5c:	c0 d1       	brne	80004d76 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80004d5e:	fe 78 00 00 	mov	r8,-65536
80004d62:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d66:	49 0b       	lddpc	r11,80004da4 <INTC_register_interrupt+0xcc>
80004d68:	48 da       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d6a:	f6 0a 01 0a 	sub	r10,r11,r10
80004d6e:	bf ba       	sbr	r10,0x1f
80004d70:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004d74:	c0 d8       	rjmp	80004d8e <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004d76:	fe 78 00 00 	mov	r8,-65536
80004d7a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d7e:	48 bb       	lddpc	r11,80004da8 <INTC_register_interrupt+0xd0>
80004d80:	48 7a       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d82:	f6 0a 01 0a 	sub	r10,r11,r10
80004d86:	ea 1a c0 00 	orh	r10,0xc000
80004d8a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80004d8e:	2f cd       	sub	sp,-16
80004d90:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d94:	80 00       	ld.sh	r0,r0[0x0]
80004d96:	b2 60       	st.h	r9[0xc],r0
80004d98:	80 00       	ld.sh	r0,r0[0x0]
80004d9a:	b1 04       	ld.d	r4,r8
80004d9c:	80 00       	ld.sh	r0,r0[0x0]
80004d9e:	b0 00       	st.h	r8[0x0],r0
80004da0:	80 00       	ld.sh	r0,r0[0x0]
80004da2:	b1 12       	ld.d	r2,--r8
80004da4:	80 00       	ld.sh	r0,r0[0x0]
80004da6:	b1 20       	st.d	r8++,r0
80004da8:	80 00       	ld.sh	r0,r0[0x0]
80004daa:	b1 2e       	st.d	r8++,lr

80004dac <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80004dac:	eb cd 40 80 	pushm	r7,lr
80004db0:	1a 97       	mov	r7,sp
80004db2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004db4:	e1 b8 00 00 	mfsr	r8,0x0
80004db8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80004dbc:	d3 03       	ssrf	0x10

	return flags;
80004dbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80004dc2:	10 9c       	mov	r12,r8
80004dc4:	2f fd       	sub	sp,-4
80004dc6:	e3 cd 80 80 	ldm	sp++,r7,pc

80004dca <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004dca:	eb cd 40 80 	pushm	r7,lr
80004dce:	1a 97       	mov	r7,sp
80004dd0:	20 1d       	sub	sp,4
80004dd2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004dd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dda:	e6 18 00 01 	andh	r8,0x1,COH
80004dde:	5f 08       	sreq	r8
80004de0:	5c 58       	castu.b	r8
}
80004de2:	10 9c       	mov	r12,r8
80004de4:	2f fd       	sub	sp,-4
80004de6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004dea:	d7 03       	nop

80004dec <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80004dec:	eb cd 40 80 	pushm	r7,lr
80004df0:	1a 97       	mov	r7,sp
80004df2:	20 1d       	sub	sp,4
80004df4:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004df8:	ee fc ff fc 	ld.w	r12,r7[-4]
80004dfc:	f0 1f 00 05 	mcall	80004e10 <cpu_irq_restore+0x24>
80004e00:	18 98       	mov	r8,r12
80004e02:	58 08       	cp.w	r8,0
80004e04:	c0 20       	breq	80004e08 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80004e06:	d5 03       	csrf	0x10
   }

	barrier();
}
80004e08:	2f fd       	sub	sp,-4
80004e0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e0e:	00 00       	add	r0,r0
80004e10:	80 00       	ld.sh	r0,r0[0x0]
80004e12:	4d ca       	lddpc	r10,80004f80 <twim_set_speed+0x28>

80004e14 <twim_master_interrupt_handler>:
/**
 * \internal
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80004e14:	eb cd 40 80 	pushm	r7,lr
80004e18:	1a 97       	mov	r7,sp
80004e1a:	20 1d       	sub	sp,4
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80004e1c:	4c 68       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e1e:	70 08       	ld.w	r8,r8[0x0]
80004e20:	70 79       	ld.w	r9,r8[0x1c]
80004e22:	4c 68       	lddpc	r8,80004f38 <twim_master_interrupt_handler+0x124>
80004e24:	70 08       	ld.w	r8,r8[0x0]
80004e26:	f3 e8 00 08 	and	r8,r9,r8
80004e2a:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80004e2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e32:	e2 18 07 00 	andl	r8,0x700,COH
80004e36:	c1 e0       	breq	80004e72 <twim_master_interrupt_handler+0x5e>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80004e38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e3c:	e2 18 03 00 	andl	r8,0x300,COH
80004e40:	c0 30       	breq	80004e46 <twim_master_interrupt_handler+0x32>
80004e42:	3f c8       	mov	r8,-4
80004e44:	c0 28       	rjmp	80004e48 <twim_master_interrupt_handler+0x34>
80004e46:	3f e8       	mov	r8,-2
80004e48:	4b d9       	lddpc	r9,80004f3c <twim_master_interrupt_handler+0x128>
80004e4a:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80004e4c:	4b a8       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e4e:	70 09       	ld.w	r9,r8[0x0]
80004e50:	72 38       	ld.w	r8,r9[0xc]
80004e52:	30 0a       	mov	r10,0
80004e54:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80004e58:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80004e5a:	4b 78       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e5c:	70 08       	ld.w	r8,r8[0x0]
80004e5e:	3f f9       	mov	r9,-1
80004e60:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80004e62:	4b 58       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e64:	70 08       	ld.w	r8,r8[0x0]
80004e66:	3f f9       	mov	r9,-1
80004e68:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80004e6a:	4b 69       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004e6c:	30 08       	mov	r8,0
80004e6e:	b2 88       	st.b	r9[0x0],r8
80004e70:	c5 e8       	rjmp	80004f2c <twim_master_interrupt_handler+0x118>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80004e72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e76:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004e7a:	5c 58       	castu.b	r8
80004e7c:	c2 00       	breq	80004ebc <twim_master_interrupt_handler+0xa8>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80004e7e:	4b 28       	lddpc	r8,80004f44 <twim_master_interrupt_handler+0x130>
80004e80:	70 09       	ld.w	r9,r8[0x0]
80004e82:	4a d8       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e84:	70 08       	ld.w	r8,r8[0x0]
80004e86:	70 58       	ld.w	r8,r8[0x14]
80004e88:	5c 58       	castu.b	r8
80004e8a:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80004e8c:	4a e8       	lddpc	r8,80004f44 <twim_master_interrupt_handler+0x130>
80004e8e:	70 08       	ld.w	r8,r8[0x0]
80004e90:	f0 c9 ff ff 	sub	r9,r8,-1
80004e94:	4a c8       	lddpc	r8,80004f44 <twim_master_interrupt_handler+0x130>
80004e96:	91 09       	st.w	r8[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80004e98:	4a c8       	lddpc	r8,80004f48 <twim_master_interrupt_handler+0x134>
80004e9a:	70 08       	ld.w	r8,r8[0x0]
80004e9c:	f0 c9 00 01 	sub	r9,r8,1
80004ea0:	4a a8       	lddpc	r8,80004f48 <twim_master_interrupt_handler+0x134>
80004ea2:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80004ea4:	4a 98       	lddpc	r8,80004f48 <twim_master_interrupt_handler+0x134>
80004ea6:	70 08       	ld.w	r8,r8[0x0]
80004ea8:	58 08       	cp.w	r8,0
80004eaa:	c4 11       	brne	80004f2c <twim_master_interrupt_handler+0x118>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80004eac:	4a 28       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004eae:	70 08       	ld.w	r8,r8[0x0]
80004eb0:	30 19       	mov	r9,1
80004eb2:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004eb4:	4a 39       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004eb6:	30 08       	mov	r8,0
80004eb8:	b2 88       	st.b	r9[0x0],r8
80004eba:	c3 98       	rjmp	80004f2c <twim_master_interrupt_handler+0x118>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80004ebc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ec0:	e2 18 00 02 	andl	r8,0x2,COH
80004ec4:	c3 40       	breq	80004f2c <twim_master_interrupt_handler+0x118>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80004ec6:	4a 28       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004ec8:	70 08       	ld.w	r8,r8[0x0]
80004eca:	58 08       	cp.w	r8,0
80004ecc:	c0 91       	brne	80004ede <twim_master_interrupt_handler+0xca>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80004ece:	49 a8       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004ed0:	70 08       	ld.w	r8,r8[0x0]
80004ed2:	30 29       	mov	r9,2
80004ed4:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004ed6:	49 b9       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004ed8:	30 08       	mov	r8,0
80004eda:	b2 88       	st.b	r9[0x0],r8
80004edc:	c2 88       	rjmp	80004f2c <twim_master_interrupt_handler+0x118>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80004ede:	49 68       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004ee0:	70 0a       	ld.w	r10,r8[0x0]
80004ee2:	49 c8       	lddpc	r8,80004f50 <twim_master_interrupt_handler+0x13c>
80004ee4:	70 08       	ld.w	r8,r8[0x0]
80004ee6:	11 89       	ld.ub	r9,r8[0x0]
80004ee8:	5c 59       	castu.b	r9
80004eea:	95 69       	st.w	r10[0x18],r9
80004eec:	f0 c9 ff ff 	sub	r9,r8,-1
80004ef0:	49 88       	lddpc	r8,80004f50 <twim_master_interrupt_handler+0x13c>
80004ef2:	91 09       	st.w	r8[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80004ef4:	49 68       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004ef6:	70 08       	ld.w	r8,r8[0x0]
80004ef8:	f0 c9 00 01 	sub	r9,r8,1
80004efc:	49 48       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004efe:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80004f00:	49 38       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004f02:	70 08       	ld.w	r8,r8[0x0]
80004f04:	58 08       	cp.w	r8,0
80004f06:	c1 31       	brne	80004f2c <twim_master_interrupt_handler+0x118>
				// Check for next transfer
				if(twim_next) {
80004f08:	48 e8       	lddpc	r8,80004f40 <twim_master_interrupt_handler+0x12c>
80004f0a:	11 88       	ld.ub	r8,r8[0x0]
80004f0c:	5c 58       	castu.b	r8
80004f0e:	c0 f0       	breq	80004f2c <twim_master_interrupt_handler+0x118>
					twim_next = false;
80004f10:	48 c9       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004f12:	30 08       	mov	r8,0
80004f14:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80004f16:	49 08       	lddpc	r8,80004f54 <twim_master_interrupt_handler+0x140>
80004f18:	70 08       	ld.w	r8,r8[0x0]
80004f1a:	70 39       	ld.w	r9,r8[0xc]
80004f1c:	48 c8       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004f1e:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80004f20:	48 d8       	lddpc	r8,80004f54 <twim_master_interrupt_handler+0x140>
80004f22:	70 08       	ld.w	r8,r8[0x0]
80004f24:	70 28       	ld.w	r8,r8[0x8]
80004f26:	10 99       	mov	r9,r8
80004f28:	48 a8       	lddpc	r8,80004f50 <twim_master_interrupt_handler+0x13c>
80004f2a:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80004f2c:	2f fd       	sub	sp,-4
80004f2e:	e3 cd 40 80 	ldm	sp++,r7,lr
80004f32:	d6 03       	rete
80004f34:	00 00       	add	r0,r0
80004f36:	02 88       	andn	r8,r1
80004f38:	00 00       	add	r0,r0
80004f3a:	02 a0       	st.w	r1++,r0
80004f3c:	00 00       	add	r0,r0
80004f3e:	02 94       	mov	r4,r1
80004f40:	00 00       	add	r0,r0
80004f42:	02 a8       	st.w	r1++,r8
80004f44:	00 00       	add	r0,r0
80004f46:	02 90       	mov	r0,r1
80004f48:	00 00       	add	r0,r0
80004f4a:	02 9c       	mov	r12,r1
80004f4c:	00 00       	add	r0,r0
80004f4e:	02 98       	mov	r8,r1
80004f50:	00 00       	add	r0,r0
80004f52:	02 8c       	andn	r12,r1
80004f54:	00 00       	add	r0,r0
80004f56:	02 a4       	st.w	r1++,r4

80004f58 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80004f58:	eb cd 40 80 	pushm	r7,lr
80004f5c:	1a 97       	mov	r7,sp
80004f5e:	20 5d       	sub	sp,20
80004f60:	ef 4c ff f4 	st.w	r7[-12],r12
80004f64:	ef 4b ff f0 	st.w	r7[-16],r11
80004f68:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
80004f6c:	30 08       	mov	r8,0
80004f6e:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
80004f72:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004f76:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004f7a:	f0 09 0d 08 	divu	r8,r8,r9
80004f7e:	a1 98       	lsr	r8,0x1
80004f80:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004f84:	c0 b8       	rjmp	80004f9a <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
80004f86:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004f8a:	2f f8       	sub	r8,-1
80004f8c:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
80004f90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f94:	a1 98       	lsr	r8,0x1
80004f96:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004f9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f9e:	e0 48 00 ff 	cp.w	r8,255
80004fa2:	e0 88 00 09 	brls	80004fb4 <twim_set_speed+0x5c>
80004fa6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004faa:	30 78       	mov	r8,7
80004fac:	f0 09 18 00 	cp.b	r9,r8
80004fb0:	fe 98 ff eb 	brls	80004f86 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80004fb4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004fb8:	30 78       	mov	r8,7
80004fba:	f0 09 18 00 	cp.b	r9,r8
80004fbe:	e0 88 00 04 	brls	80004fc6 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
80004fc2:	3f 88       	mov	r8,-8
80004fc4:	c1 a8       	rjmp	80004ff8 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004fc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fca:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80004fce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fd2:	a1 98       	lsr	r8,0x1
80004fd4:	ee fa ff f8 	ld.w	r10,r7[-8]
80004fd8:	f4 08 01 08 	sub	r8,r10,r8
80004fdc:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
80004fde:	10 49       	or	r9,r8
80004fe0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004fe4:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
80004fe6:	10 49       	or	r9,r8
80004fe8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fec:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004fee:	10 49       	or	r9,r8
80004ff0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ff4:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
80004ff6:	30 08       	mov	r8,0
}
80004ff8:	10 9c       	mov	r12,r8
80004ffa:	2f bd       	sub	sp,-20
80004ffc:	e3 cd 80 80 	ldm	sp++,r7,pc

80005000 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80005000:	eb cd 40 80 	pushm	r7,lr
80005004:	1a 97       	mov	r7,sp
80005006:	20 4d       	sub	sp,16
80005008:	ef 4c ff f4 	st.w	r7[-12],r12
8000500c:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80005010:	e1 b8 00 00 	mfsr	r8,0x0
80005014:	10 9c       	mov	r12,r8
80005016:	f0 1f 00 37 	mcall	800050f0 <twim_master_init+0xf0>
8000501a:	18 98       	mov	r8,r12
8000501c:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80005020:	4b 58       	lddpc	r8,800050f4 <twim_master_init+0xf4>
80005022:	30 09       	mov	r9,0
80005024:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80005026:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000502a:	30 08       	mov	r8,0
8000502c:	f0 09 18 00 	cp.b	r9,r8
80005030:	c0 20       	breq	80005034 <twim_master_init+0x34>
		cpu_irq_disable ();
80005032:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80005034:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005038:	3f f9       	mov	r9,-1
8000503a:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000503c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005040:	30 19       	mov	r9,1
80005042:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005044:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005048:	e0 69 00 80 	mov	r9,128
8000504c:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
8000504e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80005052:	30 08       	mov	r8,0
80005054:	f0 09 18 00 	cp.b	r9,r8
80005058:	c0 20       	breq	8000505c <twim_master_init+0x5c>
		cpu_irq_enable ();
8000505a:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
8000505c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005060:	3f f9       	mov	r9,-1
80005062:	91 b9       	st.w	r8[0x2c],r9

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
80005064:	f0 1f 00 25 	mcall	800050f8 <twim_master_init+0xf8>
80005068:	18 98       	mov	r8,r12
8000506a:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
8000506e:	30 1a       	mov	r10,1
80005070:	e0 6b 03 20 	mov	r11,800
80005074:	4a 2c       	lddpc	r12,800050fc <twim_master_init+0xfc>
80005076:	f0 1f 00 23 	mcall	80005100 <twim_master_init+0x100>
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
8000507a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000507e:	f0 1f 00 22 	mcall	80005104 <twim_master_init+0x104>

	if (opt->smbus) {
80005082:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005086:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000508a:	58 08       	cp.w	r8,0
8000508c:	c0 90       	breq	8000509e <twim_master_init+0x9e>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000508e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005092:	31 09       	mov	r9,16
80005094:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
80005096:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000509a:	3f f9       	mov	r9,-1
8000509c:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
8000509e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050a2:	70 09       	ld.w	r9,r8[0x0]
800050a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050a8:	70 18       	ld.w	r8,r8[0x4]
800050aa:	12 9a       	mov	r10,r9
800050ac:	10 9b       	mov	r11,r8
800050ae:	ee fc ff f4 	ld.w	r12,r7[-12]
800050b2:	f0 1f 00 16 	mcall	80005108 <twim_master_init+0x108>
800050b6:	18 98       	mov	r8,r12
800050b8:	5b 88       	cp.w	r8,-8
800050ba:	c0 31       	brne	800050c0 <twim_master_init+0xc0>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
800050bc:	3f 88       	mov	r8,-8
800050be:	c1 48       	rjmp	800050e6 <twim_master_init+0xe6>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800050c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050c4:	70 28       	ld.w	r8,r8[0x8]
800050c6:	10 9b       	mov	r11,r8
800050c8:	ee fc ff f4 	ld.w	r12,r7[-12]
800050cc:	f0 1f 00 10 	mcall	8000510c <twim_master_init+0x10c>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800050d0:	48 98       	lddpc	r8,800050f4 <twim_master_init+0xf4>
800050d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800050d4:	5b c8       	cp.w	r8,-4
800050d6:	c0 50       	breq	800050e0 <twim_master_init+0xe0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800050d8:	48 78       	lddpc	r8,800050f4 <twim_master_init+0xf4>
800050da:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800050dc:	5b e8       	cp.w	r8,-2
800050de:	c0 31       	brne	800050e4 <twim_master_init+0xe4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
800050e0:	3f f8       	mov	r8,-1
800050e2:	c0 28       	rjmp	800050e6 <twim_master_init+0xe6>
	}
	return STATUS_OK;
800050e4:	30 08       	mov	r8,0
}
800050e6:	10 9c       	mov	r12,r8
800050e8:	2f cd       	sub	sp,-16
800050ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800050ee:	00 00       	add	r0,r0
800050f0:	80 00       	ld.sh	r0,r0[0x0]
800050f2:	4d ca       	lddpc	r10,80005260 <twim_read_packet+0xd4>
800050f4:	00 00       	add	r0,r0
800050f6:	02 94       	mov	r4,r1
800050f8:	80 00       	ld.sh	r0,r0[0x0]
800050fa:	4d ac       	lddpc	r12,80005260 <twim_read_packet+0xd4>
800050fc:	80 00       	ld.sh	r0,r0[0x0]
800050fe:	4e 14       	lddpc	r4,80005280 <twim_read_packet+0xf4>
80005100:	80 00       	ld.sh	r0,r0[0x0]
80005102:	4c d8       	lddpc	r8,80005234 <twim_read_packet+0xa8>
80005104:	80 00       	ld.sh	r0,r0[0x0]
80005106:	4d ec       	lddpc	r12,8000527c <twim_read_packet+0xf0>
80005108:	80 00       	ld.sh	r0,r0[0x0]
8000510a:	4f 58       	lddpc	r8,800052dc <twim_read_packet+0x150>
8000510c:	80 00       	ld.sh	r0,r0[0x0]
8000510e:	51 54       	stdsp	sp[0x54],r4

80005110 <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
80005110:	eb cd 40 80 	pushm	r7,lr
80005114:	1a 97       	mov	r7,sp
80005116:	20 2d       	sub	sp,8
80005118:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000511c:	e1 b8 00 00 	mfsr	r8,0x0
80005120:	10 9c       	mov	r12,r8
80005122:	f0 1f 00 0c 	mcall	80005150 <twim_disable_interrupt+0x40>
80005126:	18 98       	mov	r8,r12
80005128:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
8000512c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005130:	30 08       	mov	r8,0
80005132:	f0 09 18 00 	cp.b	r9,r8
80005136:	c0 20       	breq	8000513a <twim_disable_interrupt+0x2a>
		cpu_irq_disable ();
80005138:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
8000513a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000513e:	3f f9       	mov	r9,-1
80005140:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
80005142:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005146:	3f f9       	mov	r9,-1
80005148:	91 b9       	st.w	r8[0x2c],r9
}
8000514a:	2f ed       	sub	sp,-8
8000514c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005150:	80 00       	ld.sh	r0,r0[0x0]
80005152:	4d ca       	lddpc	r10,800052c0 <twim_read_packet+0x134>

80005154 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80005154:	eb cd 40 80 	pushm	r7,lr
80005158:	1a 97       	mov	r7,sp
8000515a:	20 3d       	sub	sp,12
8000515c:	ef 4c ff f8 	st.w	r7[-8],r12
80005160:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
80005164:	30 08       	mov	r8,0
80005166:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000516a:	ee cb 00 04 	sub	r11,r7,4
8000516e:	30 08       	mov	r8,0
80005170:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005174:	30 0a       	mov	r10,0
80005176:	ee fc ff f8 	ld.w	r12,r7[-8]
8000517a:	f0 1f 00 04 	mcall	80005188 <twim_probe+0x34>
8000517e:	18 98       	mov	r8,r12
}
80005180:	10 9c       	mov	r12,r8
80005182:	2f dd       	sub	sp,-12
80005184:	e3 cd 80 80 	ldm	sp++,r7,pc
80005188:	80 00       	ld.sh	r0,r0[0x0]
8000518a:	54 44       	stdsp	sp[0x110],r4

8000518c <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8000518c:	eb cd 40 80 	pushm	r7,lr
80005190:	1a 97       	mov	r7,sp
80005192:	20 2d       	sub	sp,8
80005194:	ef 4c ff fc 	st.w	r7[-4],r12
80005198:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000519c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051a0:	30 29       	mov	r9,2
800051a2:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800051a4:	4c f8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800051aa:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800051ac:	4c d8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051ae:	70 08       	ld.w	r8,r8[0x0]
800051b0:	10 9c       	mov	r12,r8
800051b2:	f0 1f 00 4d 	mcall	800052e4 <twim_read_packet+0x158>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
800051b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051ba:	70 28       	ld.w	r8,r8[0x8]
800051bc:	10 99       	mov	r9,r8
800051be:	4c b8       	lddpc	r8,800052e8 <twim_read_packet+0x15c>
800051c0:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
800051c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051c6:	70 39       	ld.w	r9,r8[0xc]
800051c8:	4c 98       	lddpc	r8,800052ec <twim_read_packet+0x160>
800051ca:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
800051cc:	4c 99       	lddpc	r9,800052f0 <twim_read_packet+0x164>
800051ce:	30 08       	mov	r8,0
800051d0:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800051d2:	4c 98       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800051d4:	30 09       	mov	r9,0
800051d6:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
800051d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051dc:	11 f8       	ld.ub	r8,r8[0x7]
800051de:	58 08       	cp.w	r8,0
800051e0:	c3 f0       	breq	8000525e <twim_read_packet+0xd2>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800051e2:	4c 08       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051e4:	70 08       	ld.w	r8,r8[0x0]
800051e6:	30 19       	mov	r9,1
800051e8:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
800051ea:	4b e8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051ec:	70 08       	ld.w	r8,r8[0x0]
800051ee:	e0 69 00 80 	mov	r9,128
800051f2:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
800051f4:	4b b8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051f6:	70 08       	ld.w	r8,r8[0x0]
800051f8:	30 29       	mov	r9,2
800051fa:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
800051fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005200:	2f c8       	sub	r8,-4
80005202:	10 99       	mov	r9,r8
80005204:	4b d8       	lddpc	r8,800052f8 <twim_read_packet+0x16c>
80005206:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80005208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000520c:	11 f8       	ld.ub	r8,r8[0x7]
8000520e:	10 99       	mov	r9,r8
80005210:	4b b8       	lddpc	r8,800052fc <twim_read_packet+0x170>
80005212:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80005214:	4b b8       	lddpc	r8,80005300 <twim_read_packet+0x174>
80005216:	e0 69 07 03 	mov	r9,1795
8000521a:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000521c:	4b 18       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000521e:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005220:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005224:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005226:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8000522a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000522e:	13 f9       	ld.ub	r9,r9[0x7]
80005230:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005232:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005236:	e8 19 a0 00 	orl	r9,0xa000
8000523a:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000523c:	4a 98       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000523e:	70 08       	ld.w	r8,r8[0x0]
80005240:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005244:	72 09       	ld.w	r9,r9[0x0]
80005246:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000524a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000524e:	72 39       	ld.w	r9,r9[0xc]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005250:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005252:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80005256:	e8 19 e0 01 	orl	r9,0xe001
8000525a:	91 49       	st.w	r8[0x10],r9
8000525c:	c1 88       	rjmp	8000528c <twim_read_packet+0x100>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
8000525e:	4a 88       	lddpc	r8,800052fc <twim_read_packet+0x170>
80005260:	30 09       	mov	r9,0
80005262:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
80005264:	4a 78       	lddpc	r8,80005300 <twim_read_packet+0x174>
80005266:	e0 69 07 01 	mov	r9,1793
8000526a:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000526c:	49 d8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000526e:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005270:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005274:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005276:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000527a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000527e:	72 39       	ld.w	r9,r9[0xc]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005280:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005282:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005286:	e8 19 e0 01 	orl	r9,0xe001
8000528a:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8000528c:	49 58       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000528e:	70 08       	ld.w	r8,r8[0x0]
80005290:	49 c9       	lddpc	r9,80005300 <twim_read_packet+0x174>
80005292:	72 09       	ld.w	r9,r9[0x0]
80005294:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005296:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000529a:	30 19       	mov	r9,1
8000529c:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8000529e:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800052a0:	c0 38       	rjmp	800052a6 <twim_read_packet+0x11a>
		cpu_relax();
800052a2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800052a6:	49 48       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800052a8:	70 08       	ld.w	r8,r8[0x0]
800052aa:	58 08       	cp.w	r8,0
800052ac:	c0 61       	brne	800052b8 <twim_read_packet+0x12c>
800052ae:	f0 1f 00 16 	mcall	80005304 <twim_read_packet+0x178>
800052b2:	18 98       	mov	r8,r12
800052b4:	58 08       	cp.w	r8,0
800052b6:	cf 60       	breq	800052a2 <twim_read_packet+0x116>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800052b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052bc:	30 29       	mov	r9,2
800052be:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800052c0:	48 d8       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800052c2:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
800052c4:	5b c8       	cp.w	r8,-4
800052c6:	c0 50       	breq	800052d0 <twim_read_packet+0x144>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800052c8:	48 b8       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800052ca:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
800052cc:	5b e8       	cp.w	r8,-2
800052ce:	c0 31       	brne	800052d4 <twim_read_packet+0x148>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
800052d0:	3f f8       	mov	r8,-1
800052d2:	c0 28       	rjmp	800052d6 <twim_read_packet+0x14a>
	}
	return STATUS_OK;
800052d4:	30 08       	mov	r8,0
}
800052d6:	10 9c       	mov	r12,r8
800052d8:	2f ed       	sub	sp,-8
800052da:	e3 cd 80 80 	ldm	sp++,r7,pc
800052de:	00 00       	add	r0,r0
800052e0:	00 00       	add	r0,r0
800052e2:	02 88       	andn	r8,r1
800052e4:	80 00       	ld.sh	r0,r0[0x0]
800052e6:	51 10       	stdsp	sp[0x44],r0
800052e8:	00 00       	add	r0,r0
800052ea:	02 90       	mov	r0,r1
800052ec:	00 00       	add	r0,r0
800052ee:	02 9c       	mov	r12,r1
800052f0:	00 00       	add	r0,r0
800052f2:	02 a8       	st.w	r1++,r8
800052f4:	00 00       	add	r0,r0
800052f6:	02 94       	mov	r4,r1
800052f8:	00 00       	add	r0,r0
800052fa:	02 8c       	andn	r12,r1
800052fc:	00 00       	add	r0,r0
800052fe:	02 98       	mov	r8,r1
80005300:	00 00       	add	r0,r0
80005302:	02 a0       	st.w	r1++,r0
80005304:	80 00       	ld.sh	r0,r0[0x0]
80005306:	55 48       	stdsp	sp[0x150],r8

80005308 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80005308:	eb cd 40 80 	pushm	r7,lr
8000530c:	1a 97       	mov	r7,sp
8000530e:	20 2d       	sub	sp,8
80005310:	ef 4c ff fc 	st.w	r7[-4],r12
80005314:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005318:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000531c:	30 19       	mov	r9,1
8000531e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005324:	e0 69 00 80 	mov	r9,128
80005328:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000532a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000532e:	30 29       	mov	r9,2
80005330:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80005332:	4b c8       	lddpc	r8,80005420 <twim_write_packet+0x118>
80005334:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005338:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000533a:	4b a8       	lddpc	r8,80005420 <twim_write_packet+0x118>
8000533c:	70 08       	ld.w	r8,r8[0x0]
8000533e:	10 9c       	mov	r12,r8
80005340:	f0 1f 00 39 	mcall	80005424 <twim_write_packet+0x11c>
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80005344:	4b 98       	lddpc	r8,80005428 <twim_write_packet+0x120>
80005346:	30 09       	mov	r9,0
80005348:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8000534a:	4b 98       	lddpc	r8,8000542c <twim_write_packet+0x124>
8000534c:	e0 69 07 02 	mov	r9,1794
80005350:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
80005352:	4b 89       	lddpc	r9,80005430 <twim_write_packet+0x128>
80005354:	30 08       	mov	r8,0
80005356:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
80005358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000535c:	11 f8       	ld.ub	r8,r8[0x7]
8000535e:	58 08       	cp.w	r8,0
80005360:	c1 50       	breq	8000538a <twim_write_packet+0x82>
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80005362:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005366:	2f c8       	sub	r8,-4
80005368:	10 99       	mov	r9,r8
8000536a:	4b 38       	lddpc	r8,80005434 <twim_write_packet+0x12c>
8000536c:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8000536e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005372:	11 f8       	ld.ub	r8,r8[0x7]
80005374:	10 99       	mov	r9,r8
80005376:	4b 18       	lddpc	r8,80005438 <twim_write_packet+0x130>
80005378:	91 09       	st.w	r8[0x0],r9
		// set next transfer to true
		twim_next = true;
8000537a:	4a e9       	lddpc	r9,80005430 <twim_write_packet+0x128>
8000537c:	30 18       	mov	r8,1
8000537e:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
80005380:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005384:	4a e8       	lddpc	r8,8000543c <twim_write_packet+0x134>
80005386:	91 09       	st.w	r8[0x0],r9
80005388:	c0 c8       	rjmp	800053a0 <twim_write_packet+0x98>
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
8000538a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000538e:	70 28       	ld.w	r8,r8[0x8]
80005390:	10 99       	mov	r9,r8
80005392:	4a 98       	lddpc	r8,80005434 <twim_write_packet+0x12c>
80005394:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
80005396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000539a:	70 39       	ld.w	r9,r8[0xc]
8000539c:	4a 78       	lddpc	r8,80005438 <twim_write_packet+0x130>
8000539e:	91 09       	st.w	r8[0x0],r9
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| ((package->length + package->addr_length)
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
800053a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053a4:	70 08       	ld.w	r8,r8[0x0]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800053a6:	f0 09 15 01 	lsl	r9,r8,0x1
			| ((package->length + package->addr_length)
800053aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053ae:	70 3a       	ld.w	r10,r8[0xc]
800053b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053b4:	11 f8       	ld.ub	r8,r8[0x7]
800053b6:	f4 08 00 08 	add	r8,r10,r8
800053ba:	b1 68       	lsl	r8,0x10
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
800053bc:	f3 e8 10 08 	or	r8,r9,r8
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800053c0:	10 99       	mov	r9,r8
800053c2:	e8 19 e0 00 	orl	r9,0xe000
800053c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053ca:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800053cc:	49 58       	lddpc	r8,80005420 <twim_write_packet+0x118>
800053ce:	70 08       	ld.w	r8,r8[0x0]
800053d0:	49 79       	lddpc	r9,8000542c <twim_write_packet+0x124>
800053d2:	72 09       	ld.w	r9,r9[0x0]
800053d4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800053d6:	49 38       	lddpc	r8,80005420 <twim_write_packet+0x118>
800053d8:	70 08       	ld.w	r8,r8[0x0]
800053da:	30 19       	mov	r9,1
800053dc:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800053de:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800053e0:	c0 38       	rjmp	800053e6 <twim_write_packet+0xde>
		cpu_relax();
800053e2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800053e6:	49 18       	lddpc	r8,80005428 <twim_write_packet+0x120>
800053e8:	70 08       	ld.w	r8,r8[0x0]
800053ea:	58 08       	cp.w	r8,0
800053ec:	c0 61       	brne	800053f8 <twim_write_packet+0xf0>
800053ee:	f0 1f 00 15 	mcall	80005440 <twim_write_packet+0x138>
800053f2:	18 98       	mov	r8,r12
800053f4:	58 08       	cp.w	r8,0
800053f6:	cf 60       	breq	800053e2 <twim_write_packet+0xda>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800053f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053fc:	30 29       	mov	r9,2
800053fe:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005400:	48 a8       	lddpc	r8,80005428 <twim_write_packet+0x120>
80005402:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80005404:	5b c8       	cp.w	r8,-4
80005406:	c0 50       	breq	80005410 <twim_write_packet+0x108>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005408:	48 88       	lddpc	r8,80005428 <twim_write_packet+0x120>
8000540a:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8000540c:	5b e8       	cp.w	r8,-2
8000540e:	c0 31       	brne	80005414 <twim_write_packet+0x10c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005410:	3f f8       	mov	r8,-1
80005412:	c0 28       	rjmp	80005416 <twim_write_packet+0x10e>
	}
	return STATUS_OK;
80005414:	30 08       	mov	r8,0
}
80005416:	10 9c       	mov	r12,r8
80005418:	2f ed       	sub	sp,-8
8000541a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000541e:	00 00       	add	r0,r0
80005420:	00 00       	add	r0,r0
80005422:	02 88       	andn	r8,r1
80005424:	80 00       	ld.sh	r0,r0[0x0]
80005426:	51 10       	stdsp	sp[0x44],r0
80005428:	00 00       	add	r0,r0
8000542a:	02 94       	mov	r4,r1
8000542c:	00 00       	add	r0,r0
8000542e:	02 a0       	st.w	r1++,r0
80005430:	00 00       	add	r0,r0
80005432:	02 a8       	st.w	r1++,r8
80005434:	00 00       	add	r0,r0
80005436:	02 8c       	andn	r12,r1
80005438:	00 00       	add	r0,r0
8000543a:	02 98       	mov	r8,r1
8000543c:	00 00       	add	r0,r0
8000543e:	02 a4       	st.w	r1++,r4
80005440:	80 00       	ld.sh	r0,r0[0x0]
80005442:	55 48       	stdsp	sp[0x150],r8

80005444 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80005444:	eb cd 40 80 	pushm	r7,lr
80005448:	1a 97       	mov	r7,sp
8000544a:	20 5d       	sub	sp,20
8000544c:	ef 4c ff fc 	st.w	r7[-4],r12
80005450:	ef 4b ff f8 	st.w	r7[-8],r11
80005454:	ef 4a ff f4 	st.w	r7[-12],r10
80005458:	ef 49 ff f0 	st.w	r7[-16],r9
8000545c:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005460:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005464:	30 19       	mov	r9,1
80005466:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005468:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000546c:	e0 69 00 80 	mov	r9,128
80005470:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005472:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005476:	30 29       	mov	r9,2
80005478:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000547a:	4a c8       	lddpc	r8,80005528 <twim_write+0xe4>
8000547c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005480:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80005482:	4a a8       	lddpc	r8,80005528 <twim_write+0xe4>
80005484:	70 08       	ld.w	r8,r8[0x0]
80005486:	10 9c       	mov	r12,r8
80005488:	f0 1f 00 29 	mcall	8000552c <twim_write+0xe8>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000548c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005490:	4a 88       	lddpc	r8,80005530 <twim_write+0xec>
80005492:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80005494:	4a 88       	lddpc	r8,80005534 <twim_write+0xf0>
80005496:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000549a:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8000549c:	4a 79       	lddpc	r9,80005538 <twim_write+0xf4>
8000549e:	30 08       	mov	r8,0
800054a0:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800054a2:	4a 78       	lddpc	r8,8000553c <twim_write+0xf8>
800054a4:	30 09       	mov	r9,0
800054a6:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800054a8:	4a 08       	lddpc	r8,80005528 <twim_write+0xe4>
800054aa:	70 08       	ld.w	r8,r8[0x0]
800054ac:	ee f9 ff f0 	ld.w	r9,r7[-16]
800054b0:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800054b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800054b8:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
800054ba:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
800054bc:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800054c0:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800054c2:	f5 e9 10 09 	or	r9,r10,r9
800054c6:	e8 19 e0 00 	orl	r9,0xe000
800054ca:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800054cc:	49 d8       	lddpc	r8,80005540 <twim_write+0xfc>
800054ce:	e0 69 03 02 	mov	r9,770
800054d2:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800054d4:	49 58       	lddpc	r8,80005528 <twim_write+0xe4>
800054d6:	70 08       	ld.w	r8,r8[0x0]
800054d8:	49 a9       	lddpc	r9,80005540 <twim_write+0xfc>
800054da:	72 09       	ld.w	r9,r9[0x0]
800054dc:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800054de:	49 38       	lddpc	r8,80005528 <twim_write+0xe4>
800054e0:	70 08       	ld.w	r8,r8[0x0]
800054e2:	30 19       	mov	r9,1
800054e4:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800054e6:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800054e8:	c0 38       	rjmp	800054ee <twim_write+0xaa>
		cpu_relax();
800054ea:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800054ee:	49 48       	lddpc	r8,8000553c <twim_write+0xf8>
800054f0:	70 08       	ld.w	r8,r8[0x0]
800054f2:	58 08       	cp.w	r8,0
800054f4:	c0 61       	brne	80005500 <twim_write+0xbc>
800054f6:	f0 1f 00 14 	mcall	80005544 <twim_write+0x100>
800054fa:	18 98       	mov	r8,r12
800054fc:	58 08       	cp.w	r8,0
800054fe:	cf 60       	breq	800054ea <twim_write+0xa6>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005500:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005504:	30 29       	mov	r9,2
80005506:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005508:	48 d8       	lddpc	r8,8000553c <twim_write+0xf8>
8000550a:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8000550c:	5b c8       	cp.w	r8,-4
8000550e:	c0 50       	breq	80005518 <twim_write+0xd4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005510:	48 b8       	lddpc	r8,8000553c <twim_write+0xf8>
80005512:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80005514:	5b e8       	cp.w	r8,-2
80005516:	c0 31       	brne	8000551c <twim_write+0xd8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005518:	3f f8       	mov	r8,-1
8000551a:	c0 28       	rjmp	8000551e <twim_write+0xda>
	}
	return STATUS_OK;
8000551c:	30 08       	mov	r8,0
}
8000551e:	10 9c       	mov	r12,r8
80005520:	2f bd       	sub	sp,-20
80005522:	e3 cd 80 80 	ldm	sp++,r7,pc
80005526:	00 00       	add	r0,r0
80005528:	00 00       	add	r0,r0
8000552a:	02 88       	andn	r8,r1
8000552c:	80 00       	ld.sh	r0,r0[0x0]
8000552e:	51 10       	stdsp	sp[0x44],r0
80005530:	00 00       	add	r0,r0
80005532:	02 8c       	andn	r12,r1
80005534:	00 00       	add	r0,r0
80005536:	02 98       	mov	r8,r1
80005538:	00 00       	add	r0,r0
8000553a:	02 a8       	st.w	r1++,r8
8000553c:	00 00       	add	r0,r0
8000553e:	02 94       	mov	r4,r1
80005540:	00 00       	add	r0,r0
80005542:	02 a0       	st.w	r1++,r0
80005544:	80 00       	ld.sh	r0,r0[0x0]
80005546:	55 48       	stdsp	sp[0x150],r8

80005548 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
80005548:	eb cd 40 80 	pushm	r7,lr
8000554c:	1a 97       	mov	r7,sp
8000554e:	20 1d       	sub	sp,4
	uint32_t status = twim_inst->sr;
80005550:	48 98       	lddpc	r8,80005574 <twim_status+0x2c>
80005552:	70 08       	ld.w	r8,r8[0x0]
80005554:	70 78       	ld.w	r8,r8[0x1c]
80005556:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
8000555a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000555e:	e2 18 00 10 	andl	r8,0x10,COH
80005562:	c0 30       	breq	80005568 <twim_status+0x20>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif
		) {
		return 1;
80005564:	30 18       	mov	r8,1
80005566:	c0 28       	rjmp	8000556a <twim_status+0x22>
	} else {
		return 0;
80005568:	30 08       	mov	r8,0
	}
}
8000556a:	10 9c       	mov	r12,r8
8000556c:	2f fd       	sub	sp,-4
8000556e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005572:	00 00       	add	r0,r0
80005574:	00 00       	add	r0,r0
80005576:	02 88       	andn	r8,r1

80005578 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005578:	eb cd 40 80 	pushm	r7,lr
8000557c:	1a 97       	mov	r7,sp
8000557e:	20 1d       	sub	sp,4
80005580:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005584:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005588:	e6 18 00 01 	andh	r8,0x1,COH
8000558c:	5f 08       	sreq	r8
8000558e:	5c 58       	castu.b	r8
}
80005590:	10 9c       	mov	r12,r8
80005592:	2f fd       	sub	sp,-4
80005594:	e3 cd 80 80 	ldm	sp++,r7,pc

80005598 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80005598:	eb cd 40 80 	pushm	r7,lr
8000559c:	1a 97       	mov	r7,sp
8000559e:	20 7d       	sub	sp,28
800055a0:	ef 4c ff ec 	st.w	r7[-20],r12
800055a4:	ef 4b ff e8 	st.w	r7[-24],r11
800055a8:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
800055ac:	ee f8 ff e8 	ld.w	r8,r7[-24]
800055b0:	f0 09 15 04 	lsl	r9,r8,0x4
800055b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800055b8:	10 39       	cp.w	r9,r8
800055ba:	e0 8b 00 04 	brhi	800055c2 <usart_set_async_baudrate+0x2a>
800055be:	31 08       	mov	r8,16
800055c0:	c0 28       	rjmp	800055c4 <usart_set_async_baudrate+0x2c>
800055c2:	30 88       	mov	r8,8
800055c4:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
800055c8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800055cc:	f0 09 15 03 	lsl	r9,r8,0x3
800055d0:	ee fa ff f0 	ld.w	r10,r7[-16]
800055d4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800055d8:	f4 08 02 48 	mul	r8,r10,r8
800055dc:	a1 98       	lsr	r8,0x1
800055de:	f2 08 00 08 	add	r8,r9,r8
800055e2:	ee fa ff f0 	ld.w	r10,r7[-16]
800055e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800055ea:	f4 09 02 49 	mul	r9,r10,r9
800055ee:	f0 09 0d 08 	divu	r8,r8,r9
800055f2:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800055f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800055fa:	a3 98       	lsr	r8,0x3
800055fc:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80005600:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005604:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80005608:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000560c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005610:	58 08       	cp.w	r8,0
80005612:	c0 70       	breq	80005620 <usart_set_async_baudrate+0x88>
80005614:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005618:	e0 48 ff ff 	cp.w	r8,65535
8000561c:	e0 88 00 04 	brls	80005624 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80005620:	30 18       	mov	r8,1
80005622:	c2 08       	rjmp	80005662 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80005624:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005628:	70 18       	ld.w	r8,r8[0x4]
8000562a:	10 99       	mov	r9,r8
8000562c:	e4 19 ff f7 	andh	r9,0xfff7
80005630:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80005634:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005638:	59 08       	cp.w	r8,16
8000563a:	c0 40       	breq	80005642 <usart_set_async_baudrate+0xaa>
8000563c:	e8 68 00 00 	mov	r8,524288
80005640:	c0 28       	rjmp	80005644 <usart_set_async_baudrate+0xac>
80005642:	30 08       	mov	r8,0
80005644:	10 49       	or	r9,r8
80005646:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000564a:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
8000564c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005650:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80005654:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005658:	10 49       	or	r9,r8
8000565a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000565e:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80005660:	30 08       	mov	r8,0
}
80005662:	10 9c       	mov	r12,r8
80005664:	2f 9d       	sub	sp,-28
80005666:	e3 cd 80 80 	ldm	sp++,r7,pc
8000566a:	d7 03       	nop

8000566c <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
8000566c:	eb cd 40 80 	pushm	r7,lr
80005670:	1a 97       	mov	r7,sp
80005672:	20 2d       	sub	sp,8
80005674:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80005678:	e1 b8 00 00 	mfsr	r8,0x0
8000567c:	10 9c       	mov	r12,r8
8000567e:	f0 1f 00 18 	mcall	800056dc <usart_reset+0x70>
80005682:	18 98       	mov	r8,r12
80005684:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80005688:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000568c:	30 08       	mov	r8,0
8000568e:	f0 09 18 00 	cp.b	r9,r8
80005692:	c0 20       	breq	80005696 <usart_reset+0x2a>
80005694:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80005696:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000569a:	3f f9       	mov	r9,-1
8000569c:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8000569e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056a2:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800056a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800056a8:	30 08       	mov	r8,0
800056aa:	f0 09 18 00 	cp.b	r9,r8
800056ae:	c0 20       	breq	800056b2 <usart_reset+0x46>
800056b0:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800056b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056b6:	30 09       	mov	r9,0
800056b8:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
800056ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056be:	30 09       	mov	r9,0
800056c0:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
800056c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056c6:	30 09       	mov	r9,0
800056c8:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800056ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056ce:	ea 69 61 0c 	mov	r9,680204
800056d2:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
800056d4:	2f ed       	sub	sp,-8
800056d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800056da:	00 00       	add	r0,r0
800056dc:	80 00       	ld.sh	r0,r0[0x0]
800056de:	55 78       	stdsp	sp[0x15c],r8

800056e0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800056e0:	eb cd 40 80 	pushm	r7,lr
800056e4:	1a 97       	mov	r7,sp
800056e6:	20 3d       	sub	sp,12
800056e8:	ef 4c ff fc 	st.w	r7[-4],r12
800056ec:	ef 4b ff f8 	st.w	r7[-8],r11
800056f0:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800056f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800056f8:	f0 1f 00 54 	mcall	80005848 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
800056fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005700:	58 08       	cp.w	r8,0
80005702:	c3 90       	breq	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80005704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005708:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000570a:	30 48       	mov	r8,4
8000570c:	f0 09 18 00 	cp.b	r9,r8
80005710:	e0 88 00 32 	brls	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80005714:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005718:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000571a:	30 98       	mov	r8,9
8000571c:	f0 09 18 00 	cp.b	r9,r8
80005720:	e0 8b 00 2a 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80005724:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005728:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000572a:	30 78       	mov	r8,7
8000572c:	f0 09 18 00 	cp.b	r9,r8
80005730:	e0 8b 00 22 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80005734:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005738:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000573a:	e0 68 01 01 	mov	r8,257
8000573e:	f0 09 19 00 	cp.h	r9,r8
80005742:	e0 8b 00 19 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80005746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000574a:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000574e:	30 38       	mov	r8,3
80005750:	f0 09 18 00 	cp.b	r9,r8
80005754:	e0 8b 00 10 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80005758:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000575c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005760:	70 08       	ld.w	r8,r8[0x0]
80005762:	12 9a       	mov	r10,r9
80005764:	10 9b       	mov	r11,r8
80005766:	ee fc ff fc 	ld.w	r12,r7[-4]
8000576a:	f0 1f 00 39 	mcall	8000584c <usart_init_rs232+0x16c>
8000576e:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80005770:	58 18       	cp.w	r8,1
80005772:	c0 31       	brne	80005778 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80005774:	30 18       	mov	r8,1
80005776:	c6 48       	rjmp	8000583e <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80005778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000577c:	11 c9       	ld.ub	r9,r8[0x4]
8000577e:	30 98       	mov	r8,9
80005780:	f0 09 18 00 	cp.b	r9,r8
80005784:	c0 a1       	brne	80005798 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80005786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000578a:	70 18       	ld.w	r8,r8[0x4]
8000578c:	10 99       	mov	r9,r8
8000578e:	b1 b9       	sbr	r9,0x11
80005790:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005794:	91 19       	st.w	r8[0x4],r9
80005796:	c0 d8       	rjmp	800057b0 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80005798:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000579c:	70 19       	ld.w	r9,r8[0x4]
8000579e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057a2:	11 c8       	ld.ub	r8,r8[0x4]
800057a4:	20 58       	sub	r8,5
800057a6:	a7 68       	lsl	r8,0x6
800057a8:	10 49       	or	r9,r8
800057aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057ae:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800057b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057b4:	70 19       	ld.w	r9,r8[0x4]
800057b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057ba:	11 d8       	ld.ub	r8,r8[0x5]
800057bc:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
800057c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057c4:	f1 38 00 08 	ld.ub	r8,r8[8]
800057c8:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800057ca:	f5 e8 10 08 	or	r8,r10,r8
800057ce:	10 49       	or	r9,r8
800057d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057d4:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800057d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057da:	90 39       	ld.sh	r9,r8[0x6]
800057dc:	30 28       	mov	r8,2
800057de:	f0 09 19 00 	cp.h	r9,r8
800057e2:	e0 88 00 14 	brls	8000580a <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800057e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057ea:	70 18       	ld.w	r8,r8[0x4]
800057ec:	10 99       	mov	r9,r8
800057ee:	ad b9       	sbr	r9,0xd
800057f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057f4:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800057f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057fa:	90 38       	ld.sh	r8,r8[0x6]
800057fc:	5c 78       	castu.h	r8
800057fe:	20 28       	sub	r8,2
80005800:	10 99       	mov	r9,r8
80005802:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005806:	91 a9       	st.w	r8[0x28],r9
80005808:	c0 d8       	rjmp	80005822 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8000580a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000580e:	70 19       	ld.w	r9,r8[0x4]
80005810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005814:	90 38       	ld.sh	r8,r8[0x6]
80005816:	5c 78       	castu.h	r8
80005818:	ad 68       	lsl	r8,0xc
8000581a:	10 49       	or	r9,r8
8000581c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005820:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80005822:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005826:	70 18       	ld.w	r8,r8[0x4]
80005828:	10 99       	mov	r9,r8
8000582a:	e0 19 ff f0 	andl	r9,0xfff0
8000582e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005832:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80005834:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005838:	35 09       	mov	r9,80
8000583a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8000583c:	30 08       	mov	r8,0
}
8000583e:	10 9c       	mov	r12,r8
80005840:	2f dd       	sub	sp,-12
80005842:	e3 cd 80 80 	ldm	sp++,r7,pc
80005846:	00 00       	add	r0,r0
80005848:	80 00       	ld.sh	r0,r0[0x0]
8000584a:	56 6c       	stdsp	sp[0x198],r12
8000584c:	80 00       	ld.sh	r0,r0[0x0]
8000584e:	55 98       	stdsp	sp[0x164],r8

80005850 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80005850:	eb cd 40 80 	pushm	r7,lr
80005854:	1a 97       	mov	r7,sp
80005856:	20 3d       	sub	sp,12
80005858:	ef 4c ff f8 	st.w	r7[-8],r12
8000585c:	ef 4b ff f4 	st.w	r7[-12],r11
80005860:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005864:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80005868:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000586c:	70 58       	ld.w	r8,r8[0x14]
8000586e:	e2 18 00 02 	andl	r8,0x2,COH
80005872:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80005874:	58 08       	cp.w	r8,0
80005876:	c0 a0       	breq	8000588a <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80005878:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000587c:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80005880:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005884:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80005886:	30 08       	mov	r8,0
80005888:	c0 28       	rjmp	8000588c <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
8000588a:	30 28       	mov	r8,2
}
8000588c:	10 9c       	mov	r12,r8
8000588e:	2f dd       	sub	sp,-12
80005890:	e3 cd 80 80 	ldm	sp++,r7,pc

80005894 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80005894:	eb cd 40 80 	pushm	r7,lr
80005898:	1a 97       	mov	r7,sp
8000589a:	20 3d       	sub	sp,12
8000589c:	ef 4c ff f8 	st.w	r7[-8],r12
800058a0:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
800058a4:	e0 68 27 10 	mov	r8,10000
800058a8:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
800058ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058b0:	58 08       	cp.w	r8,0
800058b2:	5f 08       	sreq	r8
800058b4:	5c 58       	castu.b	r8
800058b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800058ba:	20 19       	sub	r9,1
800058bc:	ef 49 ff fc 	st.w	r7[-4],r9
800058c0:	58 08       	cp.w	r8,0
800058c2:	c0 30       	breq	800058c8 <usart_putchar+0x34>
800058c4:	3f f8       	mov	r8,-1
800058c6:	c0 b8       	rjmp	800058dc <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
800058c8:	ee fb ff f4 	ld.w	r11,r7[-12]
800058cc:	ee fc ff f8 	ld.w	r12,r7[-8]
800058d0:	f0 1f 00 05 	mcall	800058e4 <usart_putchar+0x50>
800058d4:	18 98       	mov	r8,r12
800058d6:	58 08       	cp.w	r8,0
800058d8:	ce a1       	brne	800058ac <usart_putchar+0x18>

  return USART_SUCCESS;
800058da:	30 08       	mov	r8,0
}
800058dc:	10 9c       	mov	r12,r8
800058de:	2f dd       	sub	sp,-12
800058e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800058e4:	80 00       	ld.sh	r0,r0[0x0]
800058e6:	58 50       	cp.w	r0,5

800058e8 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
800058e8:	eb cd 40 80 	pushm	r7,lr
800058ec:	1a 97       	mov	r7,sp
800058ee:	20 2d       	sub	sp,8
800058f0:	ef 4c ff fc 	st.w	r7[-4],r12
800058f4:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
800058f8:	c0 e8       	rjmp	80005914 <usart_write_line+0x2c>
    usart_putchar(usart, *string++);
800058fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058fe:	11 88       	ld.ub	r8,r8[0x0]
80005900:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005904:	2f f9       	sub	r9,-1
80005906:	ef 49 ff f8 	st.w	r7[-8],r9
8000590a:	10 9b       	mov	r11,r8
8000590c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005910:	f0 1f 00 05 	mcall	80005924 <usart_write_line+0x3c>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80005914:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005918:	11 88       	ld.ub	r8,r8[0x0]
8000591a:	58 08       	cp.w	r8,0
8000591c:	ce f1       	brne	800058fa <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
8000591e:	2f ed       	sub	sp,-8
80005920:	e3 cd 80 80 	ldm	sp++,r7,pc
80005924:	80 00       	ld.sh	r0,r0[0x0]
80005926:	58 94       	cp.w	r4,9

80005928 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80005928:	48 cd       	lddpc	sp,80005958 <udata_clear_loop_end+0x2>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
8000592a:	48 d0       	lddpc	r0,8000595c <udata_clear_loop_end+0x6>
  mtsr    AVR32_EVBA, r0
8000592c:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80005930:	d5 53       	csrf	0x15

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
80005932:	48 c0       	lddpc	r0,80005960 <udata_clear_loop_end+0xa>
  lda.w   r1, _edata
80005934:	48 c1       	lddpc	r1,80005964 <udata_clear_loop_end+0xe>
  cp      r0, r1
80005936:	02 30       	cp.w	r0,r1
  brhs    idata_load_loop_end
80005938:	c0 62       	brcc	80005944 <idata_load_loop_end>
  lda.w   r2, _data_lma
8000593a:	48 c2       	lddpc	r2,80005968 <udata_clear_loop_end+0x12>

8000593c <idata_load_loop>:
idata_load_loop:
  ld.d    r4, r2++
8000593c:	a5 05       	ld.d	r4,r2++
  st.d    r0++, r4
8000593e:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80005940:	02 30       	cp.w	r0,r1
  brlo    idata_load_loop
80005942:	cf d3       	brcs	8000593c <idata_load_loop>

80005944 <idata_load_loop_end>:
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80005944:	48 a0       	lddpc	r0,8000596c <udata_clear_loop_end+0x16>
  lda.w   r1, _end
80005946:	48 b1       	lddpc	r1,80005970 <udata_clear_loop_end+0x1a>
  cp      r0, r1
80005948:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000594a:	c0 62       	brcc	80005956 <udata_clear_loop_end>
  mov     r2, 0
8000594c:	30 02       	mov	r2,0
  mov     r3, 0
8000594e:	30 03       	mov	r3,0

80005950 <udata_clear_loop>:
udata_clear_loop:
  st.d    r0++, r2
80005950:	a1 22       	st.d	r0++,r2
  cp      r0, r1
80005952:	02 30       	cp.w	r0,r1
  brlo    udata_clear_loop
80005954:	cf e3       	brcs	80005950 <udata_clear_loop>

80005956 <udata_clear_loop_end>:
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80005956:	48 8f       	lddpc	pc,80005974 <udata_clear_loop_end+0x1e>
80005958:	00 01       	add	r1,r0
8000595a:	00 00       	add	r0,r0
8000595c:	80 00       	ld.sh	r0,r0[0x0]
8000595e:	b0 00       	st.h	r8[0x0],r0
80005960:	00 00       	add	r0,r0
80005962:	00 08       	add	r8,r0
80005964:	00 00       	add	r0,r0
80005966:	00 b8       	st.h	r0++,r8
80005968:	80 00       	ld.sh	r0,r0[0x0]
8000596a:	b4 50       	st.h	r10[0xa],r0
8000596c:	00 00       	add	r0,r0
8000596e:	00 b8       	st.h	r0++,r8
80005970:	00 00       	add	r0,r0
80005972:	0b 58       	ld.sh	r8,--r5
80005974:	80 00       	ld.sh	r0,r0[0x0]
80005976:	8d b0       	st.w	r6[0x2c],r0

80005978 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005978:	eb cd 40 80 	pushm	r7,lr
8000597c:	1a 97       	mov	r7,sp
8000597e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005980:	e1 b8 00 00 	mfsr	r8,0x0
80005984:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005988:	d3 03       	ssrf	0x10

	return flags;
8000598a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000598e:	10 9c       	mov	r12,r8
80005990:	2f fd       	sub	sp,-4
80005992:	e3 cd 80 80 	ldm	sp++,r7,pc

80005996 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005996:	eb cd 40 80 	pushm	r7,lr
8000599a:	1a 97       	mov	r7,sp
8000599c:	20 1d       	sub	sp,4
8000599e:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800059a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059a6:	e6 18 00 01 	andh	r8,0x1,COH
800059aa:	5f 08       	sreq	r8
800059ac:	5c 58       	castu.b	r8
}
800059ae:	10 9c       	mov	r12,r8
800059b0:	2f fd       	sub	sp,-4
800059b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800059b6:	d7 03       	nop

800059b8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
800059b8:	eb cd 40 80 	pushm	r7,lr
800059bc:	1a 97       	mov	r7,sp
800059be:	20 1d       	sub	sp,4
800059c0:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800059c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800059c8:	f0 1f 00 05 	mcall	800059dc <cpu_irq_restore+0x24>
800059cc:	18 98       	mov	r8,r12
800059ce:	58 08       	cp.w	r8,0
800059d0:	c0 20       	breq	800059d4 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
800059d2:	d5 03       	csrf	0x10
   }

	barrier();
}
800059d4:	2f fd       	sub	sp,-4
800059d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800059da:	00 00       	add	r0,r0
800059dc:	80 00       	ld.sh	r0,r0[0x0]
800059de:	59 96       	cp.w	r6,25

800059e0 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
800059e0:	eb cd 40 80 	pushm	r7,lr
800059e4:	1a 97       	mov	r7,sp
800059e6:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
800059e8:	f0 1f 00 0c 	mcall	80005a18 <osc_priv_enable_osc0+0x38>
800059ec:	18 98       	mov	r8,r12
800059ee:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
800059f2:	fe 78 08 00 	mov	r8,-63488
800059f6:	32 49       	mov	r9,36
800059f8:	ea 19 aa 00 	orh	r9,0xaa00
800059fc:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] =
800059fe:	fe 78 08 00 	mov	r8,-63488
80005a02:	e0 79 0c 07 	mov	r9,68615
80005a06:	91 99       	st.w	r8[0x24],r9
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
80005a08:	ee fc ff fc 	ld.w	r12,r7[-4]
80005a0c:	f0 1f 00 04 	mcall	80005a1c <osc_priv_enable_osc0+0x3c>
}
80005a10:	2f fd       	sub	sp,-4
80005a12:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a16:	00 00       	add	r0,r0
80005a18:	80 00       	ld.sh	r0,r0[0x0]
80005a1a:	59 78       	cp.w	r8,23
80005a1c:	80 00       	ld.sh	r0,r0[0x0]
80005a1e:	59 b8       	cp.w	r8,27

80005a20 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
80005a20:	eb cd 40 80 	pushm	r7,lr
80005a24:	1a 97       	mov	r7,sp
80005a26:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005a28:	f0 1f 00 0c 	mcall	80005a58 <osc_priv_enable_osc32+0x38>
80005a2c:	18 98       	mov	r8,r12
80005a2e:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
80005a32:	fe 78 08 00 	mov	r8,-63488
80005a36:	34 c9       	mov	r9,76
80005a38:	ea 19 aa 00 	orh	r9,0xaa00
80005a3c:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 =
80005a3e:	fe 78 08 00 	mov	r8,-63488
80005a42:	e2 69 01 01 	mov	r9,131329
80005a46:	f1 49 00 4c 	st.w	r8[76],r9
			(OSC32_STARTUP_VALUE << AVR32_SCIF_OSCCTRL32_STARTUP)
			| (OSC32_MODE_VALUE << AVR32_SCIF_OSCCTRL32_MODE)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
80005a4a:	ee fc ff fc 	ld.w	r12,r7[-4]
80005a4e:	f0 1f 00 04 	mcall	80005a5c <osc_priv_enable_osc32+0x3c>
}
80005a52:	2f fd       	sub	sp,-4
80005a54:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a58:	80 00       	ld.sh	r0,r0[0x0]
80005a5a:	59 78       	cp.w	r8,23
80005a5c:	80 00       	ld.sh	r0,r0[0x0]
80005a5e:	59 b8       	cp.w	r8,27

80005a60 <osc_priv_enable_rc8m>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc8m(void)
{
80005a60:	eb cd 40 80 	pushm	r7,lr
80005a64:	1a 97       	mov	r7,sp
80005a66:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint32_t   rccr8;
    uint32_t* calibration_bits = (uint32_t*)0x80800200;
80005a68:	e0 68 02 00 	mov	r8,512
80005a6c:	ea 18 80 80 	orh	r8,0x8080
80005a70:	ef 48 ff fc 	st.w	r7[-4],r8
	/* Wait for the CALIB field to be updated from fuses after reset */
	while (!(AVR32_SCIF.rccr8 & AVR32_SCIF_RCCR8_FCD_MASK)) {
80005a74:	fe 78 08 00 	mov	r8,-63488
80005a78:	71 28       	ld.w	r8,r8[0x48]
80005a7a:	e6 18 00 01 	andh	r8,0x1,COH
80005a7e:	cf b0       	breq	80005a74 <osc_priv_enable_rc8m+0x14>
		/* Do nothing */
	}

	/* Enable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
80005a80:	f0 1f 00 17 	mcall	80005adc <osc_priv_enable_rc8m+0x7c>
80005a84:	18 98       	mov	r8,r12
80005a86:	ef 48 ff f4 	st.w	r7[-12],r8
	rccr8 = AVR32_SCIF.rccr8;
80005a8a:	fe 78 08 00 	mov	r8,-63488
80005a8e:	71 28       	ld.w	r8,r8[0x48]
80005a90:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
80005a94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a98:	70 08       	ld.w	r8,r8[0x0]
80005a9a:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80005a9e:	b1 a8       	sbr	r8,0x10
80005aa0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005aa4:	f3 e8 00 08 	and	r8,r9,r8
80005aa8:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 |= 1U << AVR32_SCIF_RCOSC8_EN;
80005aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ab0:	b9 a8       	sbr	r8,0x18
80005ab2:	ef 48 ff f8 	st.w	r7[-8],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
80005ab6:	fe 78 08 00 	mov	r8,-63488
80005aba:	34 89       	mov	r9,72
80005abc:	ea 19 aa 00 	orh	r9,0xaa00
80005ac0:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
80005ac2:	fe 78 08 00 	mov	r8,-63488
80005ac6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005aca:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
80005ace:	ee fc ff f4 	ld.w	r12,r7[-12]
80005ad2:	f0 1f 00 04 	mcall	80005ae0 <osc_priv_enable_rc8m+0x80>
}
80005ad6:	2f dd       	sub	sp,-12
80005ad8:	e3 cd 80 80 	ldm	sp++,r7,pc
80005adc:	80 00       	ld.sh	r0,r0[0x0]
80005ade:	59 78       	cp.w	r8,23
80005ae0:	80 00       	ld.sh	r0,r0[0x0]
80005ae2:	59 b8       	cp.w	r8,27

80005ae4 <osc_priv_enable_rc120m>:
	AVR32_SCIF.rccr8 = rccr8;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc120m(void)
{
80005ae4:	eb cd 40 80 	pushm	r7,lr
80005ae8:	1a 97       	mov	r7,sp
80005aea:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005aec:	f0 1f 00 0c 	mcall	80005b1c <osc_priv_enable_rc120m+0x38>
80005af0:	18 98       	mov	r8,r12
80005af2:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
80005af6:	fe 78 08 00 	mov	r8,-63488
80005afa:	35 89       	mov	r9,88
80005afc:	ea 19 aa 00 	orh	r9,0xaa00
80005b00:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
80005b02:	fe 78 08 00 	mov	r8,-63488
80005b06:	30 19       	mov	r9,1
80005b08:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
80005b0c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005b10:	f0 1f 00 04 	mcall	80005b20 <osc_priv_enable_rc120m+0x3c>
}
80005b14:	2f fd       	sub	sp,-4
80005b16:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b1a:	00 00       	add	r0,r0
80005b1c:	80 00       	ld.sh	r0,r0[0x0]
80005b1e:	59 78       	cp.w	r8,23
80005b20:	80 00       	ld.sh	r0,r0[0x0]
80005b22:	59 b8       	cp.w	r8,27

80005b24 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005b24:	eb cd 40 80 	pushm	r7,lr
80005b28:	1a 97       	mov	r7,sp
80005b2a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005b2c:	e1 b8 00 00 	mfsr	r8,0x0
80005b30:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005b34:	d3 03       	ssrf	0x10

	return flags;
80005b36:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005b3a:	10 9c       	mov	r12,r8
80005b3c:	2f fd       	sub	sp,-4
80005b3e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005b42 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005b42:	eb cd 40 80 	pushm	r7,lr
80005b46:	1a 97       	mov	r7,sp
80005b48:	20 1d       	sub	sp,4
80005b4a:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005b4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005b52:	e6 18 00 01 	andh	r8,0x1,COH
80005b56:	5f 08       	sreq	r8
80005b58:	5c 58       	castu.b	r8
}
80005b5a:	10 9c       	mov	r12,r8
80005b5c:	2f fd       	sub	sp,-4
80005b5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b62:	d7 03       	nop

80005b64 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005b64:	eb cd 40 80 	pushm	r7,lr
80005b68:	1a 97       	mov	r7,sp
80005b6a:	20 1d       	sub	sp,4
80005b6c:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005b70:	ee fc ff fc 	ld.w	r12,r7[-4]
80005b74:	f0 1f 00 05 	mcall	80005b88 <cpu_irq_restore+0x24>
80005b78:	18 98       	mov	r8,r12
80005b7a:	58 08       	cp.w	r8,0
80005b7c:	c0 20       	breq	80005b80 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005b7e:	d5 03       	csrf	0x10
   }

	barrier();
}
80005b80:	2f fd       	sub	sp,-4
80005b82:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b86:	00 00       	add	r0,r0
80005b88:	80 00       	ld.sh	r0,r0[0x0]
80005b8a:	5b 42       	cp.w	r2,-12

80005b8c <pll_enable>:
	AVR32_SCIF.pll[pll_id] = cfg->ctrl;
	cpu_irq_restore(flags);
}

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
80005b8c:	eb cd 40 80 	pushm	r7,lr
80005b90:	1a 97       	mov	r7,sp
80005b92:	20 3d       	sub	sp,12
80005b94:	ef 4c ff f8 	st.w	r7[-8],r12
80005b98:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
80005b9c:	f0 1f 00 10 	mcall	80005bdc <pll_enable+0x50>
80005ba0:	18 98       	mov	r8,r12
80005ba2:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
80005ba6:	fe 78 08 00 	mov	r8,-63488
80005baa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005bae:	2f 99       	sub	r9,-7
80005bb0:	a3 69       	lsl	r9,0x2
80005bb2:	ea 19 aa 00 	orh	r9,0xaa00
80005bb6:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
80005bb8:	fe 78 08 00 	mov	r8,-63488
80005bbc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005bc0:	ee fa ff f8 	ld.w	r10,r7[-8]
80005bc4:	74 0a       	ld.w	r10,r10[0x0]
80005bc6:	a1 aa       	sbr	r10,0x0
80005bc8:	2f 99       	sub	r9,-7
80005bca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
80005bce:	ee fc ff fc 	ld.w	r12,r7[-4]
80005bd2:	f0 1f 00 04 	mcall	80005be0 <pll_enable+0x54>
}
80005bd6:	2f dd       	sub	sp,-12
80005bd8:	e3 cd 80 80 	ldm	sp++,r7,pc
80005bdc:	80 00       	ld.sh	r0,r0[0x0]
80005bde:	5b 24       	cp.w	r4,-14
80005be0:	80 00       	ld.sh	r0,r0[0x0]
80005be2:	5b 64       	cp.w	r4,-10

80005be4 <pll_disable>:

void pll_disable(unsigned int pll_id)
{
80005be4:	eb cd 40 80 	pushm	r7,lr
80005be8:	1a 97       	mov	r7,sp
80005bea:	20 2d       	sub	sp,8
80005bec:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
80005bf0:	f0 1f 00 0f 	mcall	80005c2c <pll_disable+0x48>
80005bf4:	18 98       	mov	r8,r12
80005bf6:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
80005bfa:	fe 78 08 00 	mov	r8,-63488
80005bfe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005c02:	2f 99       	sub	r9,-7
80005c04:	a3 69       	lsl	r9,0x2
80005c06:	ea 19 aa 00 	orh	r9,0xaa00
80005c0a:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = 0;
80005c0c:	fe 78 08 00 	mov	r8,-63488
80005c10:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005c14:	2f 99       	sub	r9,-7
80005c16:	30 0a       	mov	r10,0
80005c18:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
80005c1c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005c20:	f0 1f 00 04 	mcall	80005c30 <pll_disable+0x4c>
}
80005c24:	2f ed       	sub	sp,-8
80005c26:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c2a:	00 00       	add	r0,r0
80005c2c:	80 00       	ld.sh	r0,r0[0x0]
80005c2e:	5b 24       	cp.w	r4,-14
80005c30:	80 00       	ld.sh	r0,r0[0x0]
80005c32:	5b 64       	cp.w	r4,-10

80005c34 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005c34:	eb cd 40 80 	pushm	r7,lr
80005c38:	1a 97       	mov	r7,sp
80005c3a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005c3c:	e1 b8 00 00 	mfsr	r8,0x0
80005c40:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005c44:	d3 03       	ssrf	0x10

	return flags;
80005c46:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005c4a:	10 9c       	mov	r12,r8
80005c4c:	2f fd       	sub	sp,-4
80005c4e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005c52 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005c52:	eb cd 40 80 	pushm	r7,lr
80005c56:	1a 97       	mov	r7,sp
80005c58:	20 1d       	sub	sp,4
80005c5a:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005c5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c62:	e6 18 00 01 	andh	r8,0x1,COH
80005c66:	5f 08       	sreq	r8
80005c68:	5c 58       	castu.b	r8
}
80005c6a:	10 9c       	mov	r12,r8
80005c6c:	2f fd       	sub	sp,-4
80005c6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c72:	d7 03       	nop

80005c74 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005c74:	eb cd 40 80 	pushm	r7,lr
80005c78:	1a 97       	mov	r7,sp
80005c7a:	20 1d       	sub	sp,4
80005c7c:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005c80:	ee fc ff fc 	ld.w	r12,r7[-4]
80005c84:	f0 1f 00 05 	mcall	80005c98 <cpu_irq_restore+0x24>
80005c88:	18 98       	mov	r8,r12
80005c8a:	58 08       	cp.w	r8,0
80005c8c:	c0 20       	breq	80005c90 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005c8e:	d5 03       	csrf	0x10
   }

	barrier();
}
80005c90:	2f fd       	sub	sp,-4
80005c92:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c96:	00 00       	add	r0,r0
80005c98:	80 00       	ld.sh	r0,r0[0x0]
80005c9a:	5c 52       	castu.b	r2

80005c9c <sysclk_set_prescalers>:
 * \param pbc_shift The PBC clock will be divided by \f$2^{pbc\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift,
		unsigned int pbc_shift)
{
80005c9c:	eb cd 40 80 	pushm	r7,lr
80005ca0:	1a 97       	mov	r7,sp
80005ca2:	20 9d       	sub	sp,36
80005ca4:	ef 4c ff e8 	st.w	r7[-24],r12
80005ca8:	ef 4b ff e4 	st.w	r7[-28],r11
80005cac:	ef 4a ff e0 	st.w	r7[-32],r10
80005cb0:	ef 49 ff dc 	st.w	r7[-36],r9
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
80005cb4:	30 08       	mov	r8,0
80005cb6:	ef 48 ff f0 	st.w	r7[-16],r8
	uint32_t   pba_cksel = 0;
80005cba:	30 08       	mov	r8,0
80005cbc:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t   pbb_cksel = 0;
80005cc0:	30 08       	mov	r8,0
80005cc2:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t   pbc_cksel = 0;
80005cc6:	30 08       	mov	r8,0
80005cc8:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
80005ccc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005cd0:	58 08       	cp.w	r8,0
80005cd2:	c0 70       	breq	80005ce0 <sysclk_set_prescalers+0x44>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_CPUSEL)
80005cd4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005cd8:	20 18       	sub	r8,1
80005cda:	a7 b8       	sbr	r8,0x7
80005cdc:	ef 48 ff f0 	st.w	r7[-16],r8
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
80005ce0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005ce4:	58 08       	cp.w	r8,0
80005ce6:	c0 70       	breq	80005cf4 <sysclk_set_prescalers+0x58>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_PBSEL)
80005ce8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005cec:	20 18       	sub	r8,1
80005cee:	a7 b8       	sbr	r8,0x7
80005cf0:	ef 48 ff f4 	st.w	r7[-12],r8
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
80005cf4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005cf8:	58 08       	cp.w	r8,0
80005cfa:	c0 70       	breq	80005d08 <sysclk_set_prescalers+0x6c>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_PBSEL)
80005cfc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d00:	20 18       	sub	r8,1
80005d02:	a7 b8       	sbr	r8,0x7
80005d04:	ef 48 ff f8 	st.w	r7[-8],r8
				| (1U << AVR32_PM_PBBDIV);

	if (pbc_shift > 0)
80005d08:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005d0c:	58 08       	cp.w	r8,0
80005d0e:	c0 70       	breq	80005d1c <sysclk_set_prescalers+0x80>
		pbc_cksel = ((pbc_shift - 1) << AVR32_PM_PBCSEL_PBSEL)
80005d10:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005d14:	20 18       	sub	r8,1
80005d16:	a7 b8       	sbr	r8,0x7
80005d18:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_PBCDIV);

	flags = cpu_irq_save();
80005d1c:	f0 1f 00 1e 	mcall	80005d94 <sysclk_set_prescalers+0xf8>
80005d20:	18 98       	mov	r8,r12
80005d22:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
80005d26:	fe 78 04 00 	mov	r8,-64512
80005d2a:	30 49       	mov	r9,4
80005d2c:	ea 19 aa 00 	orh	r9,0xaa00
80005d30:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.cpusel = cpu_cksel;
80005d34:	fe 78 04 00 	mov	r8,-64512
80005d38:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005d3c:	91 19       	st.w	r8[0x4],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
80005d3e:	fe 78 04 00 	mov	r8,-64512
80005d42:	30 c9       	mov	r9,12
80005d44:	ea 19 aa 00 	orh	r9,0xaa00
80005d48:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbasel = pba_cksel;
80005d4c:	fe 78 04 00 	mov	r8,-64512
80005d50:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005d54:	91 39       	st.w	r8[0xc],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
80005d56:	fe 78 04 00 	mov	r8,-64512
80005d5a:	31 09       	mov	r9,16
80005d5c:	ea 19 aa 00 	orh	r9,0xaa00
80005d60:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbb_cksel;
80005d64:	fe 78 04 00 	mov	r8,-64512
80005d68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d6c:	91 49       	st.w	r8[0x10],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBCSEL;
80005d6e:	fe 78 04 00 	mov	r8,-64512
80005d72:	31 49       	mov	r9,20
80005d74:	ea 19 aa 00 	orh	r9,0xaa00
80005d78:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbcsel = pbc_cksel;
80005d7c:	fe 78 04 00 	mov	r8,-64512
80005d80:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d84:	91 59       	st.w	r8[0x14],r9
	cpu_irq_restore(flags);
80005d86:	ee fc ff ec 	ld.w	r12,r7[-20]
80005d8a:	f0 1f 00 04 	mcall	80005d98 <sysclk_set_prescalers+0xfc>
}
80005d8e:	2f 7d       	sub	sp,-36
80005d90:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d94:	80 00       	ld.sh	r0,r0[0x0]
80005d96:	5c 34       	neg	r4
80005d98:	80 00       	ld.sh	r0,r0[0x0]
80005d9a:	5c 74       	castu.h	r4

80005d9c <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80005d9c:	eb cd 40 80 	pushm	r7,lr
80005da0:	1a 97       	mov	r7,sp
80005da2:	20 2d       	sub	sp,8
80005da4:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
80005da8:	f0 1f 00 0c 	mcall	80005dd8 <sysclk_set_source+0x3c>
80005dac:	18 98       	mov	r8,r12
80005dae:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80005db2:	fe 78 04 00 	mov	r8,-64512
80005db6:	fc 19 aa 00 	movh	r9,0xaa00
80005dba:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
80005dbe:	fe 78 04 00 	mov	r8,-64512
80005dc2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005dc6:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80005dc8:	ee fc ff fc 	ld.w	r12,r7[-4]
80005dcc:	f0 1f 00 04 	mcall	80005ddc <sysclk_set_source+0x40>
}
80005dd0:	2f ed       	sub	sp,-8
80005dd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005dd6:	00 00       	add	r0,r0
80005dd8:	80 00       	ld.sh	r0,r0[0x0]
80005dda:	5c 34       	neg	r4
80005ddc:	80 00       	ld.sh	r0,r0[0x0]
80005dde:	5c 74       	castu.h	r4

80005de0 <twi_master_read>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005de0:	eb cd 40 80 	pushm	r7,lr
80005de4:	1a 97       	mov	r7,sp
80005de6:	20 2d       	sub	sp,8
80005de8:	ef 4c ff fc 	st.w	r7[-4],r12
80005dec:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_read_packet (twim, package));
80005df0:	ee fb ff f8 	ld.w	r11,r7[-8]
80005df4:	ee fc ff fc 	ld.w	r12,r7[-4]
80005df8:	f0 1f 00 04 	mcall	80005e08 <twi_master_read+0x28>
80005dfc:	18 98       	mov	r8,r12
}
80005dfe:	10 9c       	mov	r12,r8
80005e00:	2f ed       	sub	sp,-8
80005e02:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e06:	00 00       	add	r0,r0
80005e08:	80 00       	ld.sh	r0,r0[0x0]
80005e0a:	51 8c       	stdsp	sp[0x60],r12

80005e0c <twi_master_write>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   if all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005e0c:	eb cd 40 80 	pushm	r7,lr
80005e10:	1a 97       	mov	r7,sp
80005e12:	20 2d       	sub	sp,8
80005e14:	ef 4c ff fc 	st.w	r7[-4],r12
80005e18:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_write_packet (twim, package));
80005e1c:	ee fb ff f8 	ld.w	r11,r7[-8]
80005e20:	ee fc ff fc 	ld.w	r12,r7[-4]
80005e24:	f0 1f 00 04 	mcall	80005e34 <twi_master_write+0x28>
80005e28:	18 98       	mov	r8,r12
}
80005e2a:	10 9c       	mov	r12,r8
80005e2c:	2f ed       	sub	sp,-8
80005e2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e32:	00 00       	add	r0,r0
80005e34:	80 00       	ld.sh	r0,r0[0x0]
80005e36:	53 08       	stdsp	sp[0xc0],r8

80005e38 <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
80005e38:	eb cd 40 80 	pushm	r7,lr
80005e3c:	1a 97       	mov	r7,sp
80005e3e:	20 9d       	sub	sp,36
80005e40:	16 99       	mov	r9,r11
80005e42:	14 98       	mov	r8,r10
80005e44:	18 9a       	mov	r10,r12
80005e46:	ef 6a ff e4 	st.b	r7[-28],r10
80005e4a:	ef 69 ff e0 	st.b	r7[-32],r9
80005e4e:	ef 68 ff dc 	st.b	r7[-36],r8
uint8_t pack[2];
twi_package_t twi_package;

	pack[0] = reg_index;
80005e52:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80005e56:	ef 68 ff fc 	st.b	r7[-4],r8
	pack[1] = data;
80005e5a:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80005e5e:	ef 68 ff fd 	st.b	r7[-3],r8

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005e62:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80005e66:	30 08       	mov	r8,0
80005e68:	f0 09 18 00 	cp.b	r9,r8
80005e6c:	c0 51       	brne	80005e76 <PCA9952_write_reg+0x3e>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005e6e:	36 08       	mov	r8,96
80005e70:	ef 48 ff e8 	st.w	r7[-24],r8
80005e74:	c0 a8       	rjmp	80005e88 <PCA9952_write_reg+0x50>
	}
	else if (topBotn == LED_BOTTOM)
80005e76:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80005e7a:	30 18       	mov	r8,1
80005e7c:	f0 09 18 00 	cp.b	r9,r8
80005e80:	c0 41       	brne	80005e88 <PCA9952_write_reg+0x50>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005e82:	36 18       	mov	r8,97
80005e84:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	twi_package.addr_length = 0;
80005e88:	30 08       	mov	r8,0
80005e8a:	ef 68 ff ef 	st.b	r7[-17],r8
	twi_package.buffer = &pack;
80005e8e:	ee c8 00 04 	sub	r8,r7,4
80005e92:	ef 48 ff f0 	st.w	r7[-16],r8
	twi_package.length = sizeof(pack);
80005e96:	30 28       	mov	r8,2
80005e98:	ef 48 ff f4 	st.w	r7[-12],r8

	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005e9c:	ee c8 00 18 	sub	r8,r7,24
80005ea0:	10 9b       	mov	r11,r8
80005ea2:	fe 7c 38 00 	mov	r12,-51200
80005ea6:	f0 1f 00 05 	mcall	80005eb8 <PCA9952_write_reg+0x80>
80005eaa:	18 98       	mov	r8,r12
80005eac:	58 08       	cp.w	r8,0
80005eae:	cf 71       	brne	80005e9c <PCA9952_write_reg+0x64>

	return;
}
80005eb0:	2f 7d       	sub	sp,-36
80005eb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005eb6:	00 00       	add	r0,r0
80005eb8:	80 00       	ld.sh	r0,r0[0x0]
80005eba:	5e 0c       	reteq	r12

80005ebc <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
80005ebc:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005ec0:	1a 97       	mov	r7,sp
80005ec2:	21 3d       	sub	sp,76
80005ec4:	18 99       	mov	r9,r12
80005ec6:	16 98       	mov	r8,r11
80005ec8:	ef 69 ff b8 	st.b	r7[-72],r9
80005ecc:	ef 68 ff b4 	st.b	r7[-76],r8
uint8_t data;
twi_package_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005ed0:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005ed4:	30 08       	mov	r8,0
80005ed6:	f0 09 18 00 	cp.b	r9,r8
80005eda:	c0 51       	brne	80005ee4 <PCA9952_read_reg+0x28>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005edc:	36 08       	mov	r8,96
80005ede:	ef 48 ff c8 	st.w	r7[-56],r8
80005ee2:	c0 a8       	rjmp	80005ef6 <PCA9952_read_reg+0x3a>
	}
	else if (topBotn == LED_BOTTOM)
80005ee4:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005ee8:	30 18       	mov	r8,1
80005eea:	f0 09 18 00 	cp.b	r9,r8
80005eee:	c0 41       	brne	80005ef6 <PCA9952_read_reg+0x3a>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005ef0:	36 18       	mov	r8,97
80005ef2:	ef 48 ff c8 	st.w	r7[-56],r8
	}

	twi_package.addr_length = 0;
80005ef6:	30 08       	mov	r8,0
80005ef8:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &reg_index;
80005efc:	ee c8 00 4c 	sub	r8,r7,76
80005f00:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
80005f04:	30 18       	mov	r8,1
80005f06:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005f0a:	ee c8 00 38 	sub	r8,r7,56
80005f0e:	10 9b       	mov	r11,r8
80005f10:	fe 7c 38 00 	mov	r12,-51200
80005f14:	f0 1f 00 5e 	mcall	8000608c <PCA9952_read_reg+0x1d0>
80005f18:	18 98       	mov	r8,r12
80005f1a:	58 08       	cp.w	r8,0
80005f1c:	cf 71       	brne	80005f0a <PCA9952_read_reg+0x4e>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	cpu_delay_us(20, cpu_hz);
80005f1e:	4d d8       	lddpc	r8,80006090 <PCA9952_read_reg+0x1d4>
80005f20:	70 08       	ld.w	r8,r8[0x0]
80005f22:	31 49       	mov	r9,20
80005f24:	ef 49 ff e4 	st.w	r7[-28],r9
80005f28:	ef 48 ff e0 	st.w	r7[-32],r8
80005f2c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005f30:	ef 48 ff ec 	st.w	r7[-20],r8
80005f34:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005f38:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80005f3c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80005f40:	30 01       	mov	r1,0
80005f42:	ee f2 ff e8 	ld.w	r2,r7[-24]
80005f46:	30 03       	mov	r3,0
80005f48:	e2 02 02 4a 	mul	r10,r1,r2
80005f4c:	e6 00 02 48 	mul	r8,r3,r0
80005f50:	10 0a       	add	r10,r8
80005f52:	e0 02 06 48 	mulu.d	r8,r0,r2
80005f56:	12 0a       	add	r10,r9
80005f58:	14 99       	mov	r9,r10
80005f5a:	ee 7a 42 3f 	mov	r10,999999
80005f5e:	30 0b       	mov	r11,0
80005f60:	f0 0a 00 0a 	add	r10,r8,r10
80005f64:	f2 0b 00 4b 	adc	r11,r9,r11
80005f68:	ee 78 42 40 	mov	r8,1000000
80005f6c:	30 09       	mov	r9,0
80005f6e:	f0 1f 00 4a 	mcall	80006094 <PCA9952_read_reg+0x1d8>
80005f72:	14 98       	mov	r8,r10
80005f74:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80005f76:	ef 48 ff f4 	st.w	r7[-12],r8
80005f7a:	ee c8 00 44 	sub	r8,r7,68
80005f7e:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005f82:	e1 b8 00 42 	mfsr	r8,0x108
80005f86:	10 99       	mov	r9,r8
80005f88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f8c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005f8e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f92:	70 09       	ld.w	r9,r8[0x0]
80005f94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f98:	10 09       	add	r9,r8
80005f9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f9e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005fa0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005fa4:	30 08       	mov	r8,0
80005fa6:	f3 68 00 08 	st.b	r9[8],r8
80005faa:	ee c8 00 44 	sub	r8,r7,68
80005fae:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005fb2:	e1 b8 00 42 	mfsr	r8,0x108
80005fb6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005fba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fbe:	f1 39 00 08 	ld.ub	r9,r8[8]
80005fc2:	30 28       	mov	r8,2
80005fc4:	f0 09 18 00 	cp.b	r9,r8
80005fc8:	c0 31       	brne	80005fce <PCA9952_read_reg+0x112>
    return false;
80005fca:	30 08       	mov	r8,0
80005fcc:	c4 38       	rjmp	80006052 <PCA9952_read_reg+0x196>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005fce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fd2:	f1 39 00 08 	ld.ub	r9,r8[8]
80005fd6:	30 18       	mov	r8,1
80005fd8:	f0 09 18 00 	cp.b	r9,r8
80005fdc:	c0 31       	brne	80005fe2 <PCA9952_read_reg+0x126>
    return true;
80005fde:	30 18       	mov	r8,1
80005fe0:	c3 98       	rjmp	80006052 <PCA9952_read_reg+0x196>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005fe2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fe6:	70 09       	ld.w	r9,r8[0x0]
80005fe8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fec:	70 18       	ld.w	r8,r8[0x4]
80005fee:	10 39       	cp.w	r9,r8
80005ff0:	e0 88 00 1a 	brls	80006024 <PCA9952_read_reg+0x168>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005ff4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ff8:	70 08       	ld.w	r8,r8[0x0]
80005ffa:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ffe:	10 39       	cp.w	r9,r8
80006000:	c1 02       	brcc	80006020 <PCA9952_read_reg+0x164>
80006002:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006006:	70 18       	ld.w	r8,r8[0x4]
80006008:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000600c:	10 39       	cp.w	r9,r8
8000600e:	e0 88 00 09 	brls	80006020 <PCA9952_read_reg+0x164>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006012:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006016:	30 18       	mov	r8,1
80006018:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000601c:	30 18       	mov	r8,1
8000601e:	c1 a8       	rjmp	80006052 <PCA9952_read_reg+0x196>
    }
    return false;
80006020:	30 08       	mov	r8,0
80006022:	c1 88       	rjmp	80006052 <PCA9952_read_reg+0x196>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006024:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006028:	70 08       	ld.w	r8,r8[0x0]
8000602a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000602e:	10 39       	cp.w	r9,r8
80006030:	c0 93       	brcs	80006042 <PCA9952_read_reg+0x186>
80006032:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006036:	70 18       	ld.w	r8,r8[0x4]
80006038:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000603c:	10 39       	cp.w	r9,r8
8000603e:	e0 88 00 09 	brls	80006050 <PCA9952_read_reg+0x194>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006042:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006046:	30 18       	mov	r8,1
80006048:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000604c:	30 18       	mov	r8,1
8000604e:	c0 28       	rjmp	80006052 <PCA9952_read_reg+0x196>
    }
    return false;
80006050:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006052:	58 08       	cp.w	r8,0
80006054:	ca b0       	breq	80005faa <PCA9952_read_reg+0xee>

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
80006056:	30 08       	mov	r8,0
80006058:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &data;
8000605c:	ee c8 00 21 	sub	r8,r7,33
80006060:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
80006064:	30 18       	mov	r8,1
80006066:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_read(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
8000606a:	ee c8 00 38 	sub	r8,r7,56
8000606e:	10 9b       	mov	r11,r8
80006070:	fe 7c 38 00 	mov	r12,-51200
80006074:	f0 1f 00 09 	mcall	80006098 <PCA9952_read_reg+0x1dc>
80006078:	18 98       	mov	r8,r12
8000607a:	58 08       	cp.w	r8,0
8000607c:	cf 71       	brne	8000606a <PCA9952_read_reg+0x1ae>

	return data;
8000607e:	ef 38 ff df 	ld.ub	r8,r7[-33]
}
80006082:	10 9c       	mov	r12,r8
80006084:	2e dd       	sub	sp,-76
80006086:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000608a:	00 00       	add	r0,r0
8000608c:	80 00       	ld.sh	r0,r0[0x0]
8000608e:	5e 0c       	reteq	r12
80006090:	00 00       	add	r0,r0
80006092:	02 ac       	st.w	r1++,r12
80006094:	80 00       	ld.sh	r0,r0[0x0]
80006096:	aa 62       	st.h	r5[0xc],r2
80006098:	80 00       	ld.sh	r0,r0[0x0]
8000609a:	5d e0       	*unknown*

8000609c <PCA9952_init>:


void PCA9952_init(void) //7apr15
{
8000609c:	eb cd 40 80 	pushm	r7,lr
800060a0:	1a 97       	mov	r7,sp
800060a2:	20 1d       	sub	sp,4
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
800060a4:	30 0a       	mov	r10,0
800060a6:	30 0b       	mov	r11,0
800060a8:	30 0c       	mov	r12,0
800060aa:	f0 1f 00 32 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
800060ae:	30 0a       	mov	r10,0
800060b0:	30 1b       	mov	r11,1
800060b2:	30 0c       	mov	r12,0
800060b4:	f0 1f 00 2f 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
800060b8:	36 4a       	mov	r10,100
800060ba:	34 3b       	mov	r11,67
800060bc:	30 0c       	mov	r12,0
800060be:	f0 1f 00 2d 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
800060c2:	30 0a       	mov	r10,0
800060c4:	30 2b       	mov	r11,2
800060c6:	30 0c       	mov	r12,0
800060c8:	f0 1f 00 2a 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
800060cc:	30 0a       	mov	r10,0
800060ce:	30 3b       	mov	r11,3
800060d0:	30 0c       	mov	r12,0
800060d2:	f0 1f 00 28 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
800060d6:	30 0a       	mov	r10,0
800060d8:	30 4b       	mov	r11,4
800060da:	30 0c       	mov	r12,0
800060dc:	f0 1f 00 25 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
800060e0:	30 0a       	mov	r10,0
800060e2:	30 5b       	mov	r11,5
800060e4:	30 0c       	mov	r12,0
800060e6:	f0 1f 00 23 	mcall	80006170 <PCA9952_init+0xd4>

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
800060ea:	34 4b       	mov	r11,68
800060ec:	30 0c       	mov	r12,0
800060ee:	f0 1f 00 22 	mcall	80006174 <PCA9952_init+0xd8>
800060f2:	18 98       	mov	r8,r12
800060f4:	ef 68 ff ff 	st.b	r7[-1],r8
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
800060f8:	34 5b       	mov	r11,69
800060fa:	30 0c       	mov	r12,0
800060fc:	f0 1f 00 1e 	mcall	80006174 <PCA9952_init+0xd8>
80006100:	18 98       	mov	r8,r12
80006102:	ef 68 ff fe 	st.b	r7[-2],r8

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
80006106:	30 0a       	mov	r10,0
80006108:	30 0b       	mov	r11,0
8000610a:	30 1c       	mov	r12,1
8000610c:	f0 1f 00 19 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
80006110:	30 0a       	mov	r10,0
80006112:	30 1b       	mov	r11,1
80006114:	30 1c       	mov	r12,1
80006116:	f0 1f 00 17 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
8000611a:	36 4a       	mov	r10,100
8000611c:	34 3b       	mov	r11,67
8000611e:	30 1c       	mov	r12,1
80006120:	f0 1f 00 14 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
80006124:	30 0a       	mov	r10,0
80006126:	30 2b       	mov	r11,2
80006128:	30 1c       	mov	r12,1
8000612a:	f0 1f 00 12 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
8000612e:	30 0a       	mov	r10,0
80006130:	30 3b       	mov	r11,3
80006132:	30 1c       	mov	r12,1
80006134:	f0 1f 00 0f 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
80006138:	30 0a       	mov	r10,0
8000613a:	30 4b       	mov	r11,4
8000613c:	30 1c       	mov	r12,1
8000613e:	f0 1f 00 0d 	mcall	80006170 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
80006142:	30 0a       	mov	r10,0
80006144:	30 5b       	mov	r11,5
80006146:	30 1c       	mov	r12,1
80006148:	f0 1f 00 0a 	mcall	80006170 <PCA9952_init+0xd4>

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
8000614c:	34 4b       	mov	r11,68
8000614e:	30 1c       	mov	r12,1
80006150:	f0 1f 00 09 	mcall	80006174 <PCA9952_init+0xd8>
80006154:	18 98       	mov	r8,r12
80006156:	ef 68 ff fd 	st.b	r7[-3],r8
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
8000615a:	34 5b       	mov	r11,69
8000615c:	30 1c       	mov	r12,1
8000615e:	f0 1f 00 06 	mcall	80006174 <PCA9952_init+0xd8>
80006162:	18 98       	mov	r8,r12
80006164:	ef 68 ff fc 	st.b	r7[-4],r8

}
80006168:	2f fd       	sub	sp,-4
8000616a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000616e:	00 00       	add	r0,r0
80006170:	80 00       	ld.sh	r0,r0[0x0]
80006172:	5e 38       	retlo	r8
80006174:	80 00       	ld.sh	r0,r0[0x0]
80006176:	5e bc       	rethi	r12

80006178 <PCA9952_channel>:


void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn);
void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn)
{
80006178:	eb cd 40 80 	pushm	r7,lr
8000617c:	1a 97       	mov	r7,sp
8000617e:	20 5d       	sub	sp,20
80006180:	16 99       	mov	r9,r11
80006182:	14 98       	mov	r8,r10
80006184:	18 9a       	mov	r10,r12
80006186:	ef 6a ff f4 	st.b	r7[-12],r10
8000618a:	ef 69 ff f0 	st.b	r7[-16],r9
8000618e:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char regIdx, regPos, regShadow, maskVal, writeVal;
	
	regIdx = (channel / 4); //LEDOUT0 controls channels 0..3, LEDOUT1 controls channels 4..7 etc.
80006192:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80006196:	a3 88       	lsr	r8,0x2
80006198:	ef 68 ff fb 	st.b	r7[-5],r8
	regPos = (channel % 4);
8000619c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800061a0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800061a4:	ef 68 ff fc 	st.b	r7[-4],r8
	
	switch(regIdx)
800061a8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800061ac:	58 18       	cp.w	r8,1
800061ae:	c1 50       	breq	800061d8 <PCA9952_channel+0x60>
800061b0:	e0 89 00 05 	brgt	800061ba <PCA9952_channel+0x42>
800061b4:	58 08       	cp.w	r8,0
800061b6:	c0 70       	breq	800061c4 <PCA9952_channel+0x4c>
800061b8:	c2 d8       	rjmp	80006212 <PCA9952_channel+0x9a>
800061ba:	58 28       	cp.w	r8,2
800061bc:	c1 80       	breq	800061ec <PCA9952_channel+0x74>
800061be:	58 38       	cp.w	r8,3
800061c0:	c2 00       	breq	80006200 <PCA9952_channel+0x88>
800061c2:	c2 88       	rjmp	80006212 <PCA9952_channel+0x9a>
	{
		case 0:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT0);
800061c4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800061c8:	30 2b       	mov	r11,2
800061ca:	10 9c       	mov	r12,r8
800061cc:	f0 1f 00 49 	mcall	800062f0 <PCA9952_channel+0x178>
800061d0:	18 98       	mov	r8,r12
800061d2:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
800061d6:	c1 e8       	rjmp	80006212 <PCA9952_channel+0x9a>
		case 1:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT1);
800061d8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800061dc:	30 3b       	mov	r11,3
800061de:	10 9c       	mov	r12,r8
800061e0:	f0 1f 00 44 	mcall	800062f0 <PCA9952_channel+0x178>
800061e4:	18 98       	mov	r8,r12
800061e6:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
800061ea:	c1 48       	rjmp	80006212 <PCA9952_channel+0x9a>
		case 2:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT2);
800061ec:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800061f0:	30 4b       	mov	r11,4
800061f2:	10 9c       	mov	r12,r8
800061f4:	f0 1f 00 3f 	mcall	800062f0 <PCA9952_channel+0x178>
800061f8:	18 98       	mov	r8,r12
800061fa:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
800061fe:	c0 a8       	rjmp	80006212 <PCA9952_channel+0x9a>
		case 3:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT3);
80006200:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006204:	30 5b       	mov	r11,5
80006206:	10 9c       	mov	r12,r8
80006208:	f0 1f 00 3a 	mcall	800062f0 <PCA9952_channel+0x178>
8000620c:	18 98       	mov	r8,r12
8000620e:	ef 68 ff fd 	st.b	r7[-3],r8
			break;		
	}

	maskVal = 0xFF << (regPos * 2);
80006212:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006216:	a1 78       	lsl	r8,0x1
80006218:	e0 69 00 ff 	mov	r9,255
8000621c:	f2 08 09 48 	lsl	r8,r9,r8
80006220:	ef 68 ff fe 	st.b	r7[-2],r8
	maskVal = maskVal ^ 0xFF;
80006224:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006228:	5c d8       	com	r8
8000622a:	ef 68 ff fe 	st.b	r7[-2],r8
	regShadow &= maskVal;
8000622e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006232:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006236:	f3 e8 00 08 	and	r8,r9,r8
8000623a:	ef 68 ff fd 	st.b	r7[-3],r8

	if (onOffn == LED_ON)
8000623e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80006242:	30 18       	mov	r8,1
80006244:	f0 09 18 00 	cp.b	r9,r8
80006248:	c0 a1       	brne	8000625c <PCA9952_channel+0xe4>
	{
		writeVal = (0x01 << (regPos * 2));
8000624a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000624e:	a1 78       	lsl	r8,0x1
80006250:	30 19       	mov	r9,1
80006252:	f2 08 09 48 	lsl	r8,r9,r8
80006256:	ef 68 ff ff 	st.b	r7[-1],r8
8000625a:	c0 a8       	rjmp	8000626e <PCA9952_channel+0xf6>
	}
	else if (onOffn == LED_OFF)
8000625c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80006260:	30 08       	mov	r8,0
80006262:	f0 09 18 00 	cp.b	r9,r8
80006266:	c0 41       	brne	8000626e <PCA9952_channel+0xf6>
	{
		writeVal = 0;
80006268:	30 08       	mov	r8,0
8000626a:	ef 68 ff ff 	st.b	r7[-1],r8
	}
	
	regShadow |= writeVal;
8000626e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006272:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006276:	f3 e8 10 08 	or	r8,r9,r8
8000627a:	ef 68 ff fd 	st.b	r7[-3],r8
	
	switch(regIdx)
8000627e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006282:	58 18       	cp.w	r8,1
80006284:	c1 50       	breq	800062ae <PCA9952_channel+0x136>
80006286:	e0 89 00 05 	brgt	80006290 <PCA9952_channel+0x118>
8000628a:	58 08       	cp.w	r8,0
8000628c:	c0 70       	breq	8000629a <PCA9952_channel+0x122>
8000628e:	c2 d8       	rjmp	800062e8 <PCA9952_channel+0x170>
80006290:	58 28       	cp.w	r8,2
80006292:	c1 80       	breq	800062c2 <PCA9952_channel+0x14a>
80006294:	58 38       	cp.w	r8,3
80006296:	c2 00       	breq	800062d6 <PCA9952_channel+0x15e>
80006298:	c2 88       	rjmp	800062e8 <PCA9952_channel+0x170>
	{
		case 0:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT0, regShadow);
8000629a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000629e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800062a2:	12 9a       	mov	r10,r9
800062a4:	30 2b       	mov	r11,2
800062a6:	10 9c       	mov	r12,r8
800062a8:	f0 1f 00 13 	mcall	800062f4 <PCA9952_channel+0x17c>
			break;
800062ac:	c1 e8       	rjmp	800062e8 <PCA9952_channel+0x170>
		case 1:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT1, regShadow);
800062ae:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800062b2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800062b6:	12 9a       	mov	r10,r9
800062b8:	30 3b       	mov	r11,3
800062ba:	10 9c       	mov	r12,r8
800062bc:	f0 1f 00 0e 	mcall	800062f4 <PCA9952_channel+0x17c>
			break;
800062c0:	c1 48       	rjmp	800062e8 <PCA9952_channel+0x170>
		case 2:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT2, regShadow);
800062c2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800062c6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800062ca:	12 9a       	mov	r10,r9
800062cc:	30 4b       	mov	r11,4
800062ce:	10 9c       	mov	r12,r8
800062d0:	f0 1f 00 09 	mcall	800062f4 <PCA9952_channel+0x17c>
			break;
800062d4:	c0 a8       	rjmp	800062e8 <PCA9952_channel+0x170>
		case 3:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT3, regShadow);
800062d6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800062da:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800062de:	12 9a       	mov	r10,r9
800062e0:	30 5b       	mov	r11,5
800062e2:	10 9c       	mov	r12,r8
800062e4:	f0 1f 00 04 	mcall	800062f4 <PCA9952_channel+0x17c>
			break;
	}

}
800062e8:	2f bd       	sub	sp,-20
800062ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800062ee:	00 00       	add	r0,r0
800062f0:	80 00       	ld.sh	r0,r0[0x0]
800062f2:	5e bc       	rethi	r12
800062f4:	80 00       	ld.sh	r0,r0[0x0]
800062f6:	5e 38       	retlo	r8

800062f8 <led_shelf>:

void led_shelf(unsigned char shelf, unsigned char onOffn)
{
800062f8:	eb cd 40 80 	pushm	r7,lr
800062fc:	1a 97       	mov	r7,sp
800062fe:	20 2d       	sub	sp,8
80006300:	18 99       	mov	r9,r12
80006302:	16 98       	mov	r8,r11
80006304:	ef 69 ff fc 	st.b	r7[-4],r9
80006308:	ef 68 ff f8 	st.b	r7[-8],r8
	switch(shelf)
8000630c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006310:	58 18       	cp.w	r8,1
80006312:	c2 f0       	breq	80006370 <led_shelf+0x78>
80006314:	e0 89 00 05 	brgt	8000631e <led_shelf+0x26>
80006318:	58 08       	cp.w	r8,0
8000631a:	c0 70       	breq	80006328 <led_shelf+0x30>
8000631c:	c9 58       	rjmp	80006446 <led_shelf+0x14e>
8000631e:	58 28       	cp.w	r8,2
80006320:	c4 c0       	breq	800063b8 <led_shelf+0xc0>
80006322:	58 38       	cp.w	r8,3
80006324:	c6 e0       	breq	80006400 <led_shelf+0x108>
80006326:	c9 08       	rjmp	80006446 <led_shelf+0x14e>
	{
		case 0: //bottom of LED board 0 which is the upper board in the shelf, and top of LED board 1 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 0, onOffn);
80006328:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000632c:	10 9a       	mov	r10,r8
8000632e:	30 0b       	mov	r11,0
80006330:	30 1c       	mov	r12,1
80006332:	f0 1f 00 47 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 1, onOffn);
80006336:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000633a:	10 9a       	mov	r10,r8
8000633c:	30 1b       	mov	r11,1
8000633e:	30 1c       	mov	r12,1
80006340:	f0 1f 00 43 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 2, onOffn);
80006344:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006348:	10 9a       	mov	r10,r8
8000634a:	30 2b       	mov	r11,2
8000634c:	30 1c       	mov	r12,1
8000634e:	f0 1f 00 40 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 0, onOffn);
80006352:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006356:	10 9a       	mov	r10,r8
80006358:	30 0b       	mov	r11,0
8000635a:	30 0c       	mov	r12,0
8000635c:	f0 1f 00 3c 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 1, onOffn);
80006360:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006364:	10 9a       	mov	r10,r8
80006366:	30 1b       	mov	r11,1
80006368:	30 0c       	mov	r12,0
8000636a:	f0 1f 00 39 	mcall	8000644c <led_shelf+0x154>
			break;
8000636e:	c6 c8       	rjmp	80006446 <led_shelf+0x14e>

		case 1: //bottom of LED board 1 which is the upper board in the shelf, and top of LED board 2 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 3, onOffn);
80006370:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006374:	10 9a       	mov	r10,r8
80006376:	30 3b       	mov	r11,3
80006378:	30 1c       	mov	r12,1
8000637a:	f0 1f 00 35 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 4, onOffn);
8000637e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006382:	10 9a       	mov	r10,r8
80006384:	30 4b       	mov	r11,4
80006386:	30 1c       	mov	r12,1
80006388:	f0 1f 00 31 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 5, onOffn);
8000638c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006390:	10 9a       	mov	r10,r8
80006392:	30 5b       	mov	r11,5
80006394:	30 1c       	mov	r12,1
80006396:	f0 1f 00 2e 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 2, onOffn);
8000639a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000639e:	10 9a       	mov	r10,r8
800063a0:	30 2b       	mov	r11,2
800063a2:	30 0c       	mov	r12,0
800063a4:	f0 1f 00 2a 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 3, onOffn);
800063a8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063ac:	10 9a       	mov	r10,r8
800063ae:	30 3b       	mov	r11,3
800063b0:	30 0c       	mov	r12,0
800063b2:	f0 1f 00 27 	mcall	8000644c <led_shelf+0x154>
			break;
800063b6:	c4 88       	rjmp	80006446 <led_shelf+0x14e>

		case 2: //bottom of LED board 2 which is the upper board in the shelf, and top of LED board 3 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 6, onOffn);
800063b8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063bc:	10 9a       	mov	r10,r8
800063be:	30 6b       	mov	r11,6
800063c0:	30 1c       	mov	r12,1
800063c2:	f0 1f 00 23 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 7, onOffn);
800063c6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063ca:	10 9a       	mov	r10,r8
800063cc:	30 7b       	mov	r11,7
800063ce:	30 1c       	mov	r12,1
800063d0:	f0 1f 00 1f 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 8, onOffn);
800063d4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063d8:	10 9a       	mov	r10,r8
800063da:	30 8b       	mov	r11,8
800063dc:	30 1c       	mov	r12,1
800063de:	f0 1f 00 1c 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 4, onOffn);
800063e2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063e6:	10 9a       	mov	r10,r8
800063e8:	30 4b       	mov	r11,4
800063ea:	30 0c       	mov	r12,0
800063ec:	f0 1f 00 18 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 5, onOffn);
800063f0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063f4:	10 9a       	mov	r10,r8
800063f6:	30 5b       	mov	r11,5
800063f8:	30 0c       	mov	r12,0
800063fa:	f0 1f 00 15 	mcall	8000644c <led_shelf+0x154>
			break;
800063fe:	c2 48       	rjmp	80006446 <led_shelf+0x14e>

		case 3: //bottom of LED board 3 which is the upper board in the shelf, and top of LED board 4 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 9, onOffn);
80006400:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006404:	10 9a       	mov	r10,r8
80006406:	30 9b       	mov	r11,9
80006408:	30 1c       	mov	r12,1
8000640a:	f0 1f 00 11 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 10, onOffn);
8000640e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006412:	10 9a       	mov	r10,r8
80006414:	30 ab       	mov	r11,10
80006416:	30 1c       	mov	r12,1
80006418:	f0 1f 00 0d 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 11, onOffn);
8000641c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006420:	10 9a       	mov	r10,r8
80006422:	30 bb       	mov	r11,11
80006424:	30 1c       	mov	r12,1
80006426:	f0 1f 00 0a 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 6, onOffn);
8000642a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000642e:	10 9a       	mov	r10,r8
80006430:	30 6b       	mov	r11,6
80006432:	30 0c       	mov	r12,0
80006434:	f0 1f 00 06 	mcall	8000644c <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 7, onOffn);
80006438:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000643c:	10 9a       	mov	r10,r8
8000643e:	30 7b       	mov	r11,7
80006440:	30 0c       	mov	r12,0
80006442:	f0 1f 00 03 	mcall	8000644c <led_shelf+0x154>
			break;
	}	
	
}
80006446:	2f ed       	sub	sp,-8
80006448:	e3 cd 80 80 	ldm	sp++,r7,pc
8000644c:	80 00       	ld.sh	r0,r0[0x0]
8000644e:	61 78       	ld.w	r8,r0[0x5c]
80006450:	53 68       	stdsp	sp[0xd8],r8
80006452:	65 6c       	ld.w	r12,r2[0x58]
80006454:	66 20       	ld.w	r0,r3[0x8]
80006456:	30 20       	mov	r0,2
80006458:	61 63       	ld.w	r3,r0[0x58]
8000645a:	74 69       	ld.w	r9,r10[0x18]
8000645c:	76 65       	ld.w	r5,r11[0x18]
8000645e:	0d 0a       	ld.w	r10,r6++
80006460:	00 00       	add	r0,r0
80006462:	00 00       	add	r0,r0
80006464:	53 68       	stdsp	sp[0xd8],r8
80006466:	65 6c       	ld.w	r12,r2[0x58]
80006468:	66 20       	ld.w	r0,r3[0x8]
8000646a:	31 20       	mov	r0,18
8000646c:	61 63       	ld.w	r3,r0[0x58]
8000646e:	74 69       	ld.w	r9,r10[0x18]
80006470:	76 65       	ld.w	r5,r11[0x18]
80006472:	0d 0a       	ld.w	r10,r6++
80006474:	00 00       	add	r0,r0
80006476:	00 00       	add	r0,r0
80006478:	53 68       	stdsp	sp[0xd8],r8
8000647a:	65 6c       	ld.w	r12,r2[0x58]
8000647c:	66 20       	ld.w	r0,r3[0x8]
8000647e:	32 20       	mov	r0,34
80006480:	61 63       	ld.w	r3,r0[0x58]
80006482:	74 69       	ld.w	r9,r10[0x18]
80006484:	76 65       	ld.w	r5,r11[0x18]
80006486:	0d 0a       	ld.w	r10,r6++
80006488:	00 00       	add	r0,r0
8000648a:	00 00       	add	r0,r0
8000648c:	53 68       	stdsp	sp[0xd8],r8
8000648e:	65 6c       	ld.w	r12,r2[0x58]
80006490:	66 20       	ld.w	r0,r3[0x8]
80006492:	33 20       	mov	r0,50
80006494:	61 63       	ld.w	r3,r0[0x58]
80006496:	74 69       	ld.w	r9,r10[0x18]
80006498:	76 65       	ld.w	r5,r11[0x18]
8000649a:	0d 0a       	ld.w	r10,r6++
8000649c:	00 00       	add	r0,r0
8000649e:	00 00       	add	r0,r0
800064a0:	53 45       	stdsp	sp[0xd0],r5
800064a2:	41 4c       	lddsp	r12,sp[0x50]
800064a4:	20 53       	sub	r3,5
800064a6:	48 49       	lddpc	r9,800064b4 <led_shelf+0x1bc>
800064a8:	45 4c       	lddsp	r12,sp[0x150]
800064aa:	44 20       	lddsp	r0,sp[0x108]
800064ac:	44 45       	lddsp	r5,sp[0x110]
800064ae:	4d 4f       	lddpc	pc,800065fc <osc_enable+0xc>
800064b0:	20 0d       	sub	sp,0
800064b2:	0a 20       	rsub	r0,r5
800064b4:	43 6f       	lddsp	pc,sp[0xd8]
800064b6:	70 79       	ld.w	r9,r8[0x1c]
800064b8:	72 69       	ld.w	r9,r9[0x18]
800064ba:	67 68       	ld.w	r8,r3[0x58]
800064bc:	74 20       	ld.w	r0,r10[0x8]
800064be:	28 63       	sub	r3,-122
800064c0:	29 20       	sub	r0,-110
800064c2:	32 30       	mov	r0,35
800064c4:	31 35       	mov	r5,19
800064c6:	20 54       	sub	r4,5
800064c8:	65 63       	ld.w	r3,r2[0x58]
800064ca:	68 6e       	ld.w	lr,r4[0x18]
800064cc:	69 63       	ld.w	r3,r4[0x58]
800064ce:	61 6c       	ld.w	r12,r0[0x58]
800064d0:	20 53       	sub	r3,5
800064d2:	6f 6c       	ld.w	r12,r7[0x58]
800064d4:	75 74       	ld.w	r4,r10[0x5c]
800064d6:	69 6f       	ld.w	pc,r4[0x58]
800064d8:	6e 73       	ld.w	r3,r7[0x1c]
800064da:	20 47       	sub	r7,4
800064dc:	72 6f       	ld.w	pc,r9[0x18]
800064de:	75 70       	ld.w	r0,r10[0x5c]
800064e0:	2c 20       	sub	r0,-62
800064e2:	49 6e       	lddpc	lr,80006538 <led_shelf+0x240>
800064e4:	63 2e       	ld.w	lr,r1[0x48]
800064e6:	0d 0a       	ld.w	r10,r6++
800064e8:	00 00       	add	r0,r0
800064ea:	00 00       	add	r0,r0
800064ec:	44 6f       	lddsp	pc,sp[0x118]
800064ee:	6f 72       	ld.w	r2,r7[0x5c]
800064f0:	20 6c       	sub	r12,6
800064f2:	61 74       	ld.w	r4,r0[0x5c]
800064f4:	63 68       	ld.w	r8,r1[0x58]
800064f6:	20 64       	sub	r4,6
800064f8:	65 74       	ld.w	r4,r2[0x5c]
800064fa:	65 63       	ld.w	r3,r2[0x58]
800064fc:	74 65       	ld.w	r5,r10[0x18]
800064fe:	64 0d       	ld.w	sp,r2[0x0]
80006500:	0a 00       	add	r0,r5
80006502:	00 00       	add	r0,r0
80006504:	41 63       	lddsp	r3,sp[0x58]
80006506:	74 69       	ld.w	r9,r10[0x18]
80006508:	6f 6e       	ld.w	lr,r7[0x58]
8000650a:	20 70       	sub	r0,7
8000650c:	75 73       	ld.w	r3,r10[0x5c]
8000650e:	68 20       	ld.w	r0,r4[0x8]
80006510:	62 75       	ld.w	r5,r1[0x1c]
80006512:	74 74       	ld.w	r4,r10[0x1c]
80006514:	6f 6e       	ld.w	lr,r7[0x58]
80006516:	20 70       	sub	r0,7
80006518:	72 65       	ld.w	r5,r9[0x18]
8000651a:	73 73       	ld.w	r3,r9[0x5c]
8000651c:	20 64       	sub	r4,6
8000651e:	65 74       	ld.w	r4,r2[0x5c]
80006520:	65 63       	ld.w	r3,r2[0x58]
80006522:	74 65       	ld.w	r5,r10[0x18]
80006524:	64 0d       	ld.w	sp,r2[0x0]
80006526:	0a 00       	add	r0,r5
80006528:	41 63       	lddsp	r3,sp[0x58]
8000652a:	74 69       	ld.w	r9,r10[0x18]
8000652c:	6f 6e       	ld.w	lr,r7[0x58]
8000652e:	20 70       	sub	r0,7
80006530:	75 73       	ld.w	r3,r10[0x5c]
80006532:	68 20       	ld.w	r0,r4[0x8]
80006534:	62 75       	ld.w	r5,r1[0x1c]
80006536:	74 74       	ld.w	r4,r10[0x1c]
80006538:	6f 6e       	ld.w	lr,r7[0x58]
8000653a:	20 72       	sub	r2,7
8000653c:	65 6c       	ld.w	r12,r2[0x58]
8000653e:	65 61       	ld.w	r1,r2[0x58]
80006540:	73 65       	ld.w	r5,r9[0x58]
80006542:	20 64       	sub	r4,6
80006544:	65 74       	ld.w	r4,r2[0x5c]
80006546:	65 63       	ld.w	r3,r2[0x58]
80006548:	74 65       	ld.w	r5,r10[0x18]
8000654a:	64 0d       	ld.w	sp,r2[0x0]
8000654c:	0a 00       	add	r0,r5
8000654e:	00 00       	add	r0,r0
80006550:	53 74       	stdsp	sp[0xdc],r4
80006552:	61 72       	ld.w	r2,r0[0x5c]
80006554:	74 20       	ld.w	r0,r10[0x8]
80006556:	73 61       	ld.w	r1,r9[0x58]
80006558:	6e 69       	ld.w	r9,r7[0x18]
8000655a:	74 69       	ld.w	r9,r10[0x18]
8000655c:	7a 69       	ld.w	r9,sp[0x18]
8000655e:	6e 67       	ld.w	r7,r7[0x18]
80006560:	0d 0a       	ld.w	r10,r6++
80006562:	00 00       	add	r0,r0
80006564:	4e 6f       	lddpc	pc,800066fc <osc_get_rate+0x38>
80006566:	20 73       	sub	r3,7
80006568:	68 65       	ld.w	r5,r4[0x18]
8000656a:	6c 76       	ld.w	r6,r6[0x1c]
8000656c:	65 73       	ld.w	r3,r2[0x5c]
8000656e:	2c 20       	sub	r0,-62
80006570:	6e 6f       	ld.w	pc,r7[0x18]
80006572:	20 64       	sub	r4,6
80006574:	65 76       	ld.w	r6,r2[0x5c]
80006576:	69 63       	ld.w	r3,r4[0x58]
80006578:	65 73       	ld.w	r3,r2[0x5c]
8000657a:	20 6f       	sub	pc,6
8000657c:	72 20       	ld.w	r0,r9[0x8]
8000657e:	73 68       	ld.w	r8,r9[0x58]
80006580:	65 6c       	ld.w	r12,r2[0x58]
80006582:	76 65       	ld.w	r5,r11[0x18]
80006584:	73 20       	ld.w	r0,r9[0x48]
80006586:	61 72       	ld.w	r2,r0[0x5c]
80006588:	65 20       	ld.w	r0,r2[0x48]
8000658a:	70 61       	ld.w	r1,r8[0x18]
8000658c:	73 74       	ld.w	r4,r9[0x5c]
8000658e:	20 6c       	sub	r12,6
80006590:	69 66       	ld.w	r6,r4[0x58]
80006592:	65 74       	ld.w	r4,r2[0x5c]
80006594:	69 6d       	ld.w	sp,r4[0x58]
80006596:	65 2c       	ld.w	r12,r2[0x48]
80006598:	20 63       	sub	r3,6
8000659a:	68 61       	ld.w	r1,r4[0x18]
8000659c:	72 67       	ld.w	r7,r9[0x18]
8000659e:	69 6e       	ld.w	lr,r4[0x58]
800065a0:	67 20       	ld.w	r0,r3[0x48]
800065a2:	64 65       	ld.w	r5,r2[0x18]
800065a4:	76 69       	ld.w	r9,r11[0x18]
800065a6:	63 65       	ld.w	r5,r1[0x58]
800065a8:	73 0d       	ld.w	sp,r9[0x40]
800065aa:	0a 00       	add	r0,r5
800065ac:	53 68       	stdsp	sp[0xd8],r8
800065ae:	65 6c       	ld.w	r12,r2[0x58]
800065b0:	66 20       	ld.w	r0,r3[0x8]
800065b2:	63 6c       	ld.w	r12,r1[0x58]
800065b4:	65 61       	ld.w	r1,r2[0x58]
800065b6:	6e 0d       	ld.w	sp,r7[0x0]
800065b8:	0a 00       	add	r0,r5
800065ba:	00 00       	add	r0,r0
800065bc:	44 6f       	lddsp	pc,sp[0x118]
800065be:	6f 72       	ld.w	r2,r7[0x5c]
800065c0:	20 6c       	sub	r12,6
800065c2:	61 74       	ld.w	r4,r0[0x5c]
800065c4:	63 68       	ld.w	r8,r1[0x58]
800065c6:	20 6f       	sub	pc,6
800065c8:	70 65       	ld.w	r5,r8[0x18]
800065ca:	6e 65       	ld.w	r5,r7[0x18]
800065cc:	64 2c       	ld.w	r12,r2[0x8]
800065ce:	20 73       	sub	r3,7
800065d0:	68 75       	ld.w	r5,r4[0x1c]
800065d2:	74 74       	ld.w	r4,r10[0x1c]
800065d4:	69 6e       	ld.w	lr,r4[0x58]
800065d6:	67 20       	ld.w	r0,r3[0x48]
800065d8:	64 6f       	ld.w	pc,r2[0x18]
800065da:	77 6e       	ld.w	lr,r11[0x58]
800065dc:	20 61       	sub	r1,6
800065de:	6c 6c       	ld.w	r12,r6[0x18]
800065e0:	20 70       	sub	r0,7
800065e2:	72 6f       	ld.w	pc,r9[0x18]
800065e4:	63 65       	ld.w	r5,r1[0x58]
800065e6:	73 73       	ld.w	r3,r9[0x5c]
800065e8:	65 73       	ld.w	r3,r2[0x5c]
800065ea:	0d 0a       	ld.w	r10,r6++
800065ec:	00 00       	add	r0,r0
	...

800065f0 <osc_enable>:
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);
extern bool osc_priv_rc120m_is_ready(void);

static inline void osc_enable(uint8_t id)
{
800065f0:	eb cd 40 80 	pushm	r7,lr
800065f4:	1a 97       	mov	r7,sp
800065f6:	20 1d       	sub	sp,4
800065f8:	18 98       	mov	r8,r12
800065fa:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
800065fe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006602:	58 28       	cp.w	r8,2
80006604:	c1 10       	breq	80006626 <osc_enable+0x36>
80006606:	e0 89 00 05 	brgt	80006610 <osc_enable+0x20>
8000660a:	58 08       	cp.w	r8,0
8000660c:	c0 70       	breq	8000661a <osc_enable+0x2a>
8000660e:	c1 18       	rjmp	80006630 <osc_enable+0x40>
80006610:	58 38       	cp.w	r8,3
80006612:	c0 70       	breq	80006620 <osc_enable+0x30>
80006614:	58 48       	cp.w	r8,4
80006616:	c0 b0       	breq	8000662c <osc_enable+0x3c>
80006618:	c0 c8       	rjmp	80006630 <osc_enable+0x40>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
8000661a:	f0 1f 00 08 	mcall	80006638 <osc_enable+0x48>
		break;
8000661e:	c0 98       	rjmp	80006630 <osc_enable+0x40>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
80006620:	f0 1f 00 07 	mcall	8000663c <osc_enable+0x4c>
		break;
80006624:	c0 68       	rjmp	80006630 <osc_enable+0x40>
#endif

	case OSC_ID_RC8M:
		osc_priv_enable_rc8m();
80006626:	f0 1f 00 07 	mcall	80006640 <osc_enable+0x50>
		break;
8000662a:	c0 38       	rjmp	80006630 <osc_enable+0x40>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
8000662c:	f0 1f 00 06 	mcall	80006644 <osc_enable+0x54>

	default:
		/* unhandled_case(id); */
		break;
	}
}
80006630:	2f fd       	sub	sp,-4
80006632:	e3 cd 80 80 	ldm	sp++,r7,pc
80006636:	00 00       	add	r0,r0
80006638:	80 00       	ld.sh	r0,r0[0x0]
8000663a:	59 e0       	cp.w	r0,30
8000663c:	80 00       	ld.sh	r0,r0[0x0]
8000663e:	5a 20       	cp.w	r0,-30
80006640:	80 00       	ld.sh	r0,r0[0x0]
80006642:	5a 60       	cp.w	r0,-26
80006644:	80 00       	ld.sh	r0,r0[0x0]
80006646:	5a e4       	cp.w	r4,-18

80006648 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
80006648:	eb cd 40 80 	pushm	r7,lr
8000664c:	1a 97       	mov	r7,sp
8000664e:	20 1d       	sub	sp,4
80006650:	18 98       	mov	r8,r12
80006652:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80006656:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000665a:	58 38       	cp.w	r8,3
8000665c:	c1 50       	breq	80006686 <osc_is_ready+0x3e>
8000665e:	e0 89 00 07 	brgt	8000666c <osc_is_ready+0x24>
80006662:	58 08       	cp.w	r8,0
80006664:	c0 90       	breq	80006676 <osc_is_ready+0x2e>
80006666:	58 28       	cp.w	r8,2
80006668:	c1 70       	breq	80006696 <osc_is_ready+0x4e>
8000666a:	c2 88       	rjmp	800066ba <osc_is_ready+0x72>
8000666c:	58 48       	cp.w	r8,4
8000666e:	c1 c0       	breq	800066a6 <osc_is_ready+0x5e>
80006670:	58 58       	cp.w	r8,5
80006672:	c2 20       	breq	800066b6 <osc_is_ready+0x6e>
80006674:	c2 38       	rjmp	800066ba <osc_is_ready+0x72>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
80006676:	fe 78 08 00 	mov	r8,-63488
8000667a:	70 58       	ld.w	r8,r8[0x14]
8000667c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006680:	5f 18       	srne	r8
80006682:	5c 58       	castu.b	r8
80006684:	c1 c8       	rjmp	800066bc <osc_is_ready+0x74>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
80006686:	fe 78 08 00 	mov	r8,-63488
8000668a:	70 58       	ld.w	r8,r8[0x14]
8000668c:	e2 18 00 04 	andl	r8,0x4,COH
80006690:	5f 18       	srne	r8
80006692:	5c 58       	castu.b	r8
80006694:	c1 48       	rjmp	800066bc <osc_is_ready+0x74>
#endif

	case OSC_ID_RC8M:
		return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_RCOSC8MRDY));
80006696:	fe 78 08 00 	mov	r8,-63488
8000669a:	70 58       	ld.w	r8,r8[0x14]
8000669c:	e2 18 00 08 	andl	r8,0x8,COH
800066a0:	5f 18       	srne	r8
800066a2:	5c 58       	castu.b	r8
800066a4:	c0 c8       	rjmp	800066bc <osc_is_ready+0x74>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
800066a6:	fe 78 08 00 	mov	r8,-63488
800066aa:	71 68       	ld.w	r8,r8[0x58]
800066ac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800066b0:	5f 18       	srne	r8
800066b2:	5c 58       	castu.b	r8
800066b4:	c0 48       	rjmp	800066bc <osc_is_ready+0x74>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
800066b6:	30 18       	mov	r8,1
800066b8:	c0 28       	rjmp	800066bc <osc_is_ready+0x74>

	default:
		/* unhandled_case(id); */
		return false;
800066ba:	30 08       	mov	r8,0
	}
}
800066bc:	10 9c       	mov	r12,r8
800066be:	2f fd       	sub	sp,-4
800066c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800066c4 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
800066c4:	eb cd 40 80 	pushm	r7,lr
800066c8:	1a 97       	mov	r7,sp
800066ca:	20 1d       	sub	sp,4
800066cc:	18 98       	mov	r8,r12
800066ce:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
800066d2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800066d6:	58 38       	cp.w	r8,3
800066d8:	c1 20       	breq	800066fc <osc_get_rate+0x38>
800066da:	e0 89 00 07 	brgt	800066e8 <osc_get_rate+0x24>
800066de:	58 08       	cp.w	r8,0
800066e0:	c0 90       	breq	800066f2 <osc_get_rate+0x2e>
800066e2:	58 28       	cp.w	r8,2
800066e4:	c0 f0       	breq	80006702 <osc_get_rate+0x3e>
800066e6:	c1 b8       	rjmp	8000671c <osc_get_rate+0x58>
800066e8:	58 48       	cp.w	r8,4
800066ea:	c1 10       	breq	8000670c <osc_get_rate+0x48>
800066ec:	58 58       	cp.w	r8,5
800066ee:	c1 40       	breq	80006716 <osc_get_rate+0x52>
800066f0:	c1 68       	rjmp	8000671c <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
800066f2:	e0 68 24 00 	mov	r8,9216
800066f6:	ea 18 00 f4 	orh	r8,0xf4
800066fa:	c1 28       	rjmp	8000671e <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
800066fc:	e0 68 80 00 	mov	r8,32768
80006700:	c0 f8       	rjmp	8000671e <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80006702:	e0 68 12 00 	mov	r8,4608
80006706:	ea 18 00 7a 	orh	r8,0x7a
8000670a:	c0 a8       	rjmp	8000671e <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8000670c:	e0 68 0e 00 	mov	r8,3584
80006710:	ea 18 07 27 	orh	r8,0x727
80006714:	c0 58       	rjmp	8000671e <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80006716:	e0 78 c1 38 	mov	r8,115000
8000671a:	c0 28       	rjmp	8000671e <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8000671c:	30 08       	mov	r8,0
	}
}
8000671e:	10 9c       	mov	r12,r8
80006720:	2f fd       	sub	sp,-4
80006722:	e3 cd 80 80 	ldm	sp++,r7,pc
80006726:	d7 03       	nop

80006728 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
80006728:	eb cd 40 80 	pushm	r7,lr
8000672c:	1a 97       	mov	r7,sp
8000672e:	20 1d       	sub	sp,4
80006730:	18 98       	mov	r8,r12
80006732:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
80006736:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000673a:	10 9c       	mov	r12,r8
8000673c:	f0 1f 00 05 	mcall	80006750 <osc_wait_ready+0x28>
80006740:	18 98       	mov	r8,r12
80006742:	ec 18 00 01 	eorl	r8,0x1
80006746:	5c 58       	castu.b	r8
80006748:	cf 71       	brne	80006736 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
8000674a:	2f fd       	sub	sp,-4
8000674c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006750:	80 00       	ld.sh	r0,r0[0x0]
80006752:	66 48       	ld.w	r8,r3[0x10]

80006754 <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
80006754:	eb cd 40 80 	pushm	r7,lr
80006758:	1a 97       	mov	r7,sp
8000675a:	20 2d       	sub	sp,8
8000675c:	ef 4c ff fc 	st.w	r7[-4],r12
80006760:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
80006764:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006768:	70 09       	ld.w	r9,r8[0x0]
8000676a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000676e:	2f d8       	sub	r8,-3
80006770:	30 1a       	mov	r10,1
80006772:	f4 08 09 48 	lsl	r8,r10,r8
80006776:	10 49       	or	r9,r8
80006778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000677c:	91 09       	st.w	r8[0x0],r9
}
8000677e:	2f ed       	sub	sp,-8
80006780:	e3 cd 80 80 	ldm	sp++,r7,pc

80006784 <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
80006784:	eb cd 40 80 	pushm	r7,lr
80006788:	1a 97       	mov	r7,sp
8000678a:	20 5d       	sub	sp,20
8000678c:	ef 4c ff f8 	st.w	r7[-8],r12
80006790:	ef 4b ff f4 	st.w	r7[-12],r11
80006794:	ef 4a ff f0 	st.w	r7[-16],r10
80006798:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8000679c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800067a0:	5c 58       	castu.b	r8
800067a2:	10 9c       	mov	r12,r8
800067a4:	f0 1f 00 2e 	mcall	8000685c <pll_config_init+0xd8>
800067a8:	18 99       	mov	r9,r12
800067aa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800067ae:	f2 08 02 48 	mul	r8,r9,r8
800067b2:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
800067b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067ba:	ee f9 ff f0 	ld.w	r9,r7[-16]
800067be:	f0 09 0d 08 	divu	r8,r8,r9
800067c2:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
800067c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800067ca:	30 09       	mov	r9,0
800067cc:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
800067ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067d2:	e0 69 b3 ff 	mov	r9,46079
800067d6:	ea 19 04 c4 	orh	r9,0x4c4
800067da:	12 38       	cp.w	r8,r9
800067dc:	e0 8b 00 16 	brhi	80006808 <pll_config_init+0x84>
800067e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800067e4:	58 88       	cp.w	r8,8
800067e6:	e0 8b 00 11 	brhi	80006808 <pll_config_init+0x84>
		mul *= 2;
800067ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
800067ee:	a1 78       	lsl	r8,0x1
800067f0:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
800067f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067f8:	a1 78       	lsl	r8,0x1
800067fa:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
800067fe:	30 1b       	mov	r11,1
80006800:	ee fc ff f8 	ld.w	r12,r7[-8]
80006804:	f0 1f 00 17 	mcall	80006860 <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
80006808:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000680c:	e0 69 fe 7f 	mov	r9,65151
80006810:	ea 19 0a 21 	orh	r9,0xa21
80006814:	12 38       	cp.w	r8,r9
80006816:	e0 8b 00 07 	brhi	80006824 <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8000681a:	30 0b       	mov	r11,0
8000681c:	ee fc ff f8 	ld.w	r12,r7[-8]
80006820:	f0 1f 00 10 	mcall	80006860 <pll_config_init+0xdc>

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
80006824:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006828:	70 09       	ld.w	r9,r8[0x0]
8000682a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000682e:	20 18       	sub	r8,1
80006830:	f0 0a 15 10 	lsl	r10,r8,0x10
		| (div << AVR32_SCIF_PLLDIV)
80006834:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006838:	a9 68       	lsl	r8,0x8
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
8000683a:	10 4a       	or	r10,r8
		| (src << AVR32_SCIF_PLLOSC);
8000683c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006840:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
80006842:	f5 e8 10 08 	or	r8,r10,r8
80006846:	f3 e8 10 08 	or	r8,r9,r8
8000684a:	10 99       	mov	r9,r8
8000684c:	ea 19 3f 00 	orh	r9,0x3f00
80006850:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006854:	91 09       	st.w	r8[0x0],r9
		| (div << AVR32_SCIF_PLLDIV)
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
		| (src << AVR32_SCIF_PLLOSC);
}
80006856:	2f bd       	sub	sp,-20
80006858:	e3 cd 80 80 	ldm	sp++,r7,pc
8000685c:	80 00       	ld.sh	r0,r0[0x0]
8000685e:	66 c4       	ld.w	r4,r3[0x30]
80006860:	80 00       	ld.sh	r0,r0[0x0]
80006862:	67 54       	ld.w	r4,r3[0x54]

80006864 <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_enable(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_disable(unsigned int pll_id);

static inline bool pll_is_locked(unsigned int pll_id)
{
80006864:	eb cd 40 80 	pushm	r7,lr
80006868:	1a 97       	mov	r7,sp
8000686a:	20 1d       	sub	sp,4
8000686c:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
80006870:	fe 78 08 00 	mov	r8,-63488
80006874:	70 59       	ld.w	r9,r8[0x14]
80006876:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000687a:	2f c8       	sub	r8,-4
8000687c:	30 1a       	mov	r10,1
8000687e:	f4 08 09 48 	lsl	r8,r10,r8
80006882:	f3 e8 00 08 	and	r8,r9,r8
80006886:	5f 18       	srne	r8
80006888:	5c 58       	castu.b	r8
}
8000688a:	10 9c       	mov	r12,r8
8000688c:	2f fd       	sub	sp,-4
8000688e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006892:	d7 03       	nop

80006894 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
80006894:	eb cd 40 80 	pushm	r7,lr
80006898:	1a 97       	mov	r7,sp
8000689a:	20 1d       	sub	sp,4
8000689c:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
800068a0:	ee fc ff fc 	ld.w	r12,r7[-4]
800068a4:	f0 1f 00 06 	mcall	800068bc <pll_wait_for_lock+0x28>
800068a8:	18 98       	mov	r8,r12
800068aa:	ec 18 00 01 	eorl	r8,0x1
800068ae:	5c 58       	castu.b	r8
800068b0:	cf 81       	brne	800068a0 <pll_wait_for_lock+0xc>
		/* Do nothing */
	}

	return 0;
800068b2:	30 08       	mov	r8,0
}
800068b4:	10 9c       	mov	r12,r8
800068b6:	2f fd       	sub	sp,-4
800068b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800068bc:	80 00       	ld.sh	r0,r0[0x0]
800068be:	68 64       	ld.w	r4,r4[0x18]

800068c0 <display_text>:
};


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
800068c0:	eb cd 40 80 	pushm	r7,lr
800068c4:	1a 97       	mov	r7,sp
800068c6:	20 2d       	sub	sp,8
800068c8:	18 98       	mov	r8,r12
800068ca:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i = 0; i<7; i++)
800068ce:	30 08       	mov	r8,0
800068d0:	ef 48 ff fc 	st.w	r7[-4],r8
800068d4:	c1 58       	rjmp	800068fe <display_text+0x3e>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
800068d6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800068da:	48 e8       	lddpc	r8,80006910 <display_text+0x50>
800068dc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800068e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800068e4:	f2 08 00 08 	add	r8,r9,r8
800068e8:	11 88       	ld.ub	r8,r8[0x0]
800068ea:	10 9b       	mov	r11,r8
800068ec:	fc 7c 14 00 	mov	r12,-191488
800068f0:	f0 1f 00 09 	mcall	80006914 <display_text+0x54>


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
	for (int i = 0; i<7; i++)
800068f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800068f8:	2f f8       	sub	r8,-1
800068fa:	ef 48 ff fc 	st.w	r7[-4],r8
800068fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006902:	58 68       	cp.w	r8,6
80006904:	fe 9a ff e9 	brle	800068d6 <display_text+0x16>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
	}
	
}
80006908:	2f ed       	sub	sp,-8
8000690a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000690e:	00 00       	add	r0,r0
80006910:	00 00       	add	r0,r0
80006912:	00 5c       	eor	r12,r0
80006914:	80 00       	ld.sh	r0,r0[0x0]
80006916:	58 94       	cp.w	r4,9

80006918 <chassis_error>:

void chassis_error(void);
void chassis_error(void)
{
80006918:	eb cd 40 80 	pushm	r7,lr
8000691c:	1a 97       	mov	r7,sp
	display_text(IDX_ERROR);
8000691e:	30 4c       	mov	r12,4
80006920:	f0 1f 00 02 	mcall	80006928 <chassis_error+0x10>
	
	while(1); //catastrophic error, just hang TODO: allow technician interface to work here possibly
80006924:	c0 08       	rjmp	80006924 <chassis_error+0xc>
80006926:	00 00       	add	r0,r0
80006928:	80 00       	ld.sh	r0,r0[0x0]
8000692a:	68 c0       	ld.w	r0,r4[0x30]

8000692c <init_io>:
	
}

void init_io(void);
void init_io(void)
{
8000692c:	eb cd 40 80 	pushm	r7,lr
80006930:	1a 97       	mov	r7,sp
80006932:	20 1d       	sub	sp,4
	uint32_t ioFlags;
	
	
	ioFlags = (GPIO_DIR_INPUT);
80006934:	30 08       	mov	r8,0
80006936:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DOOR_LATCH, ioFlags);
8000693a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000693e:	33 ec       	mov	r12,62
80006940:	f0 1f 00 2b 	mcall	800069ec <init_io+0xc0>

	ioFlags = (GPIO_DIR_INPUT);
80006944:	30 08       	mov	r8,0
80006946:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_ACTION_PB, ioFlags);
8000694a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000694e:	33 fc       	mov	r12,63
80006950:	f0 1f 00 27 	mcall	800069ec <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006954:	30 38       	mov	r8,3
80006956:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID0, ioFlags);
8000695a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000695e:	33 3c       	mov	r12,51
80006960:	f0 1f 00 23 	mcall	800069ec <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006964:	30 38       	mov	r8,3
80006966:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID1, ioFlags);
8000696a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000696e:	33 4c       	mov	r12,52
80006970:	f0 1f 00 1f 	mcall	800069ec <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006974:	30 38       	mov	r8,3
80006976:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID2, ioFlags);
8000697a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000697e:	33 5c       	mov	r12,53
80006980:	f0 1f 00 1b 	mcall	800069ec <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006984:	30 38       	mov	r8,3
80006986:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID3, ioFlags);
8000698a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000698e:	33 6c       	mov	r12,54
80006990:	f0 1f 00 17 	mcall	800069ec <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006994:	30 38       	mov	r8,3
80006996:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID4, ioFlags);
8000699a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000699e:	33 7c       	mov	r12,55
800069a0:	f0 1f 00 13 	mcall	800069ec <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
800069a4:	30 18       	mov	r8,1
800069a6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DEBUG_LED, ioFlags);
800069aa:	ee fb ff fc 	ld.w	r11,r7[-4]
800069ae:	37 cc       	mov	r12,124
800069b0:	f0 1f 00 0f 	mcall	800069ec <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800069b4:	30 38       	mov	r8,3
800069b6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_PSUPPLY_ONn, ioFlags);
800069ba:	ee fb ff fc 	ld.w	r11,r7[-4]
800069be:	31 7c       	mov	r12,23
800069c0:	f0 1f 00 0b 	mcall	800069ec <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800069c4:	30 38       	mov	r8,3
800069c6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_LED_OEn, ioFlags);
800069ca:	ee fb ff fc 	ld.w	r11,r7[-4]
800069ce:	31 6c       	mov	r12,22
800069d0:	f0 1f 00 07 	mcall	800069ec <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW); //high=1x multiplier, low=4x multiplier 10apr15
800069d4:	30 18       	mov	r8,1
800069d6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_MFP, ioFlags);
800069da:	ee fb ff fc 	ld.w	r11,r7[-4]
800069de:	31 5c       	mov	r12,21
800069e0:	f0 1f 00 03 	mcall	800069ec <init_io+0xc0>

}
800069e4:	2f fd       	sub	sp,-4
800069e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800069ea:	00 00       	add	r0,r0
800069ec:	80 00       	ld.sh	r0,r0[0x0]
800069ee:	48 28       	lddpc	r8,800069f4 <read_led_board_serial_ids+0x4>

800069f0 <read_led_board_serial_ids>:
};

/* One serial ID chip per board */
void read_led_board_serial_ids(void);
void read_led_board_serial_ids(void)
{
800069f0:	eb cd 40 e0 	pushm	r5-r7,lr
800069f4:	1a 97       	mov	r7,sp
800069f6:	20 3d       	sub	sp,12
	/*
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
800069f8:	30 1c       	mov	r12,1
800069fa:	f0 1f 00 96 	mcall	80006c50 <read_led_board_serial_ids+0x260>
	
	ledBrd[0].present = !OWTouchReset(0);
800069fe:	30 0c       	mov	r12,0
80006a00:	f0 1f 00 95 	mcall	80006c54 <read_led_board_serial_ids+0x264>
80006a04:	18 98       	mov	r8,r12
80006a06:	58 08       	cp.w	r8,0
80006a08:	5f 08       	sreq	r8
80006a0a:	fe f9 02 4e 	ld.w	r9,pc[590]
80006a0e:	f3 68 00 08 	st.b	r9[8],r8
	ledBrd[1].present = !OWTouchReset(1);
80006a12:	30 1c       	mov	r12,1
80006a14:	f0 1f 00 90 	mcall	80006c54 <read_led_board_serial_ids+0x264>
80006a18:	18 98       	mov	r8,r12
80006a1a:	58 08       	cp.w	r8,0
80006a1c:	5f 08       	sreq	r8
80006a1e:	fe f9 02 3a 	ld.w	r9,pc[570]
80006a22:	f3 68 00 16 	st.b	r9[22],r8
	ledBrd[2].present = !OWTouchReset(2);
80006a26:	30 2c       	mov	r12,2
80006a28:	f0 1f 00 8b 	mcall	80006c54 <read_led_board_serial_ids+0x264>
80006a2c:	18 98       	mov	r8,r12
80006a2e:	58 08       	cp.w	r8,0
80006a30:	5f 08       	sreq	r8
80006a32:	fe f9 02 26 	ld.w	r9,pc[550]
80006a36:	f3 68 00 24 	st.b	r9[36],r8
	ledBrd[3].present = !OWTouchReset(3);
80006a3a:	30 3c       	mov	r12,3
80006a3c:	f0 1f 00 86 	mcall	80006c54 <read_led_board_serial_ids+0x264>
80006a40:	18 98       	mov	r8,r12
80006a42:	58 08       	cp.w	r8,0
80006a44:	5f 08       	sreq	r8
80006a46:	fe f9 02 12 	ld.w	r9,pc[530]
80006a4a:	f3 68 00 32 	st.b	r9[50],r8
	ledBrd[4].present = !OWTouchReset(4);
80006a4e:	30 4c       	mov	r12,4
80006a50:	f0 1f 00 81 	mcall	80006c54 <read_led_board_serial_ids+0x264>
80006a54:	18 98       	mov	r8,r12
80006a56:	58 08       	cp.w	r8,0
80006a58:	5f 08       	sreq	r8
80006a5a:	fe f9 01 fe 	ld.w	r9,pc[510]
80006a5e:	f3 68 00 40 	st.b	r9[64],r8
	
	if (ledBrd[0].present && ledBrd[1].present)
80006a62:	4f e8       	lddpc	r8,80006c58 <read_led_board_serial_ids+0x268>
80006a64:	f1 38 00 08 	ld.ub	r8,r8[8]
80006a68:	58 08       	cp.w	r8,0
80006a6a:	c0 90       	breq	80006a7c <read_led_board_serial_ids+0x8c>
80006a6c:	4f b8       	lddpc	r8,80006c58 <read_led_board_serial_ids+0x268>
80006a6e:	f1 38 00 16 	ld.ub	r8,r8[22]
80006a72:	58 08       	cp.w	r8,0
80006a74:	c0 40       	breq	80006a7c <read_led_board_serial_ids+0x8c>
	{
		shelf[0].present = 1;
80006a76:	4f a9       	lddpc	r9,80006c5c <read_led_board_serial_ids+0x26c>
80006a78:	30 18       	mov	r8,1
80006a7a:	b2 c8       	st.b	r9[0x4],r8
	}
	if (ledBrd[1].present && ledBrd[2].present)
80006a7c:	4f 78       	lddpc	r8,80006c58 <read_led_board_serial_ids+0x268>
80006a7e:	f1 38 00 16 	ld.ub	r8,r8[22]
80006a82:	58 08       	cp.w	r8,0
80006a84:	c0 a0       	breq	80006a98 <read_led_board_serial_ids+0xa8>
80006a86:	4f 58       	lddpc	r8,80006c58 <read_led_board_serial_ids+0x268>
80006a88:	f1 38 00 24 	ld.ub	r8,r8[36]
80006a8c:	58 08       	cp.w	r8,0
80006a8e:	c0 50       	breq	80006a98 <read_led_board_serial_ids+0xa8>
	{
		shelf[1].present = 1;
80006a90:	4f 39       	lddpc	r9,80006c5c <read_led_board_serial_ids+0x26c>
80006a92:	30 18       	mov	r8,1
80006a94:	f3 68 00 09 	st.b	r9[9],r8
	}
	if (ledBrd[2].present && ledBrd[3].present)
80006a98:	4f 08       	lddpc	r8,80006c58 <read_led_board_serial_ids+0x268>
80006a9a:	f1 38 00 24 	ld.ub	r8,r8[36]
80006a9e:	58 08       	cp.w	r8,0
80006aa0:	c0 a0       	breq	80006ab4 <read_led_board_serial_ids+0xc4>
80006aa2:	4e e8       	lddpc	r8,80006c58 <read_led_board_serial_ids+0x268>
80006aa4:	f1 38 00 32 	ld.ub	r8,r8[50]
80006aa8:	58 08       	cp.w	r8,0
80006aaa:	c0 50       	breq	80006ab4 <read_led_board_serial_ids+0xc4>
	{
		shelf[2].present = 1;
80006aac:	4e c9       	lddpc	r9,80006c5c <read_led_board_serial_ids+0x26c>
80006aae:	30 18       	mov	r8,1
80006ab0:	f3 68 00 0e 	st.b	r9[14],r8
	}
	if (ledBrd[3].present && ledBrd[4].present)
80006ab4:	4e 98       	lddpc	r8,80006c58 <read_led_board_serial_ids+0x268>
80006ab6:	f1 38 00 32 	ld.ub	r8,r8[50]
80006aba:	58 08       	cp.w	r8,0
80006abc:	c0 a0       	breq	80006ad0 <read_led_board_serial_ids+0xe0>
80006abe:	4e 78       	lddpc	r8,80006c58 <read_led_board_serial_ids+0x268>
80006ac0:	f1 38 00 40 	ld.ub	r8,r8[64]
80006ac4:	58 08       	cp.w	r8,0
80006ac6:	c0 50       	breq	80006ad0 <read_led_board_serial_ids+0xe0>
	{
		shelf[3].present = 1;
80006ac8:	4e 59       	lddpc	r9,80006c5c <read_led_board_serial_ids+0x26c>
80006aca:	30 18       	mov	r8,1
80006acc:	f3 68 00 13 	st.b	r9[19],r8
	}
	

//for (;;) //DEBUG 12may15
//{
	for (int i=0; i<NUM_LED_BOARDS; i++)
80006ad0:	30 08       	mov	r8,0
80006ad2:	ef 48 ff f4 	st.w	r7[-12],r8
80006ad6:	cb 48       	rjmp	80006c3e <read_led_board_serial_ids+0x24e>
	{
		unsigned char acc = 0;
80006ad8:	30 08       	mov	r8,0
80006ada:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[i].present)
80006ade:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006ae2:	4d ea       	lddpc	r10,80006c58 <read_led_board_serial_ids+0x268>
80006ae4:	12 98       	mov	r8,r9
80006ae6:	a3 78       	lsl	r8,0x3
80006ae8:	12 18       	sub	r8,r9
80006aea:	a1 78       	lsl	r8,0x1
80006aec:	f4 08 00 08 	add	r8,r10,r8
80006af0:	2f 88       	sub	r8,-8
80006af2:	11 88       	ld.ub	r8,r8[0x0]
80006af4:	58 08       	cp.w	r8,0
80006af6:	e0 80 00 9f 	breq	80006c34 <read_led_board_serial_ids+0x244>
		{
			OWWriteByte(i, 0x33); //Read ID command
80006afa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006afe:	5c 58       	castu.b	r8
80006b00:	33 3b       	mov	r11,51
80006b02:	10 9c       	mov	r12,r8
80006b04:	f0 1f 00 57 	mcall	80006c60 <read_led_board_serial_ids+0x270>
			
			ledBrd[i].idFamily = OWReadByte(i);
80006b08:	ee f6 ff f4 	ld.w	r6,r7[-12]
80006b0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006b10:	5c 58       	castu.b	r8
80006b12:	10 9c       	mov	r12,r8
80006b14:	f0 1f 00 54 	mcall	80006c64 <read_led_board_serial_ids+0x274>
80006b18:	18 98       	mov	r8,r12
80006b1a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006b1e:	4c fa       	lddpc	r10,80006c58 <read_led_board_serial_ids+0x268>
80006b20:	0c 98       	mov	r8,r6
80006b22:	a3 78       	lsl	r8,0x3
80006b24:	0c 18       	sub	r8,r6
80006b26:	a1 78       	lsl	r8,0x1
80006b28:	10 0a       	add	r10,r8
80006b2a:	12 98       	mov	r8,r9
80006b2c:	b4 88       	st.b	r10[0x0],r8
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
80006b2e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006b32:	4c aa       	lddpc	r10,80006c58 <read_led_board_serial_ids+0x268>
80006b34:	12 98       	mov	r8,r9
80006b36:	a3 78       	lsl	r8,0x3
80006b38:	12 18       	sub	r8,r9
80006b3a:	a1 78       	lsl	r8,0x1
80006b3c:	f4 08 00 08 	add	r8,r10,r8
80006b40:	11 88       	ld.ub	r8,r8[0x0]
80006b42:	10 9b       	mov	r11,r8
80006b44:	30 0c       	mov	r12,0
80006b46:	f0 1f 00 49 	mcall	80006c68 <read_led_board_serial_ids+0x278>
80006b4a:	18 98       	mov	r8,r12
80006b4c:	ef 68 ff fb 	st.b	r7[-5],r8
			
			for (int j=0; j<6; j++)
80006b50:	30 08       	mov	r8,0
80006b52:	ef 48 ff fc 	st.w	r7[-4],r8
80006b56:	c3 78       	rjmp	80006bc4 <read_led_board_serial_ids+0x1d4>
			{
				ledBrd[i].id[j] = OWReadByte(i);
80006b58:	ee f6 ff f4 	ld.w	r6,r7[-12]
80006b5c:	ee f5 ff fc 	ld.w	r5,r7[-4]
80006b60:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006b64:	5c 58       	castu.b	r8
80006b66:	10 9c       	mov	r12,r8
80006b68:	f0 1f 00 3f 	mcall	80006c64 <read_led_board_serial_ids+0x274>
80006b6c:	18 98       	mov	r8,r12
80006b6e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006b72:	4b aa       	lddpc	r10,80006c58 <read_led_board_serial_ids+0x268>
80006b74:	0c 98       	mov	r8,r6
80006b76:	a3 78       	lsl	r8,0x3
80006b78:	0c 18       	sub	r8,r6
80006b7a:	a1 78       	lsl	r8,0x1
80006b7c:	f4 08 00 08 	add	r8,r10,r8
80006b80:	0a 08       	add	r8,r5
80006b82:	f0 ca ff ff 	sub	r10,r8,-1
80006b86:	12 98       	mov	r8,r9
80006b88:	b4 88       	st.b	r10[0x0],r8
				acc = crc8_add(acc, ledBrd[i].id[j]);
80006b8a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006b8e:	ee fa ff fc 	ld.w	r10,r7[-4]
80006b92:	4b 2b       	lddpc	r11,80006c58 <read_led_board_serial_ids+0x268>
80006b94:	12 98       	mov	r8,r9
80006b96:	a3 78       	lsl	r8,0x3
80006b98:	12 18       	sub	r8,r9
80006b9a:	a1 78       	lsl	r8,0x1
80006b9c:	f6 08 00 08 	add	r8,r11,r8
80006ba0:	14 08       	add	r8,r10
80006ba2:	2f f8       	sub	r8,-1
80006ba4:	11 88       	ld.ub	r8,r8[0x0]
80006ba6:	10 99       	mov	r9,r8
80006ba8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006bac:	12 9b       	mov	r11,r9
80006bae:	10 9c       	mov	r12,r8
80006bb0:	f0 1f 00 2e 	mcall	80006c68 <read_led_board_serial_ids+0x278>
80006bb4:	18 98       	mov	r8,r12
80006bb6:	ef 68 ff fb 	st.b	r7[-5],r8
			
			ledBrd[i].idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
			
			for (int j=0; j<6; j++)
80006bba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006bbe:	2f f8       	sub	r8,-1
80006bc0:	ef 48 ff fc 	st.w	r7[-4],r8
80006bc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006bc8:	58 58       	cp.w	r8,5
80006bca:	fe 9a ff c7 	brle	80006b58 <read_led_board_serial_ids+0x168>
			{
				ledBrd[i].id[j] = OWReadByte(i);
				acc = crc8_add(acc, ledBrd[i].id[j]);
			}
			
			ledBrd[i].idcsum = OWReadByte(i);
80006bce:	ee f6 ff f4 	ld.w	r6,r7[-12]
80006bd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006bd6:	5c 58       	castu.b	r8
80006bd8:	10 9c       	mov	r12,r8
80006bda:	f0 1f 00 23 	mcall	80006c64 <read_led_board_serial_ids+0x274>
80006bde:	18 98       	mov	r8,r12
80006be0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006be4:	49 da       	lddpc	r10,80006c58 <read_led_board_serial_ids+0x268>
80006be6:	0c 98       	mov	r8,r6
80006be8:	a3 78       	lsl	r8,0x3
80006bea:	0c 18       	sub	r8,r6
80006bec:	a1 78       	lsl	r8,0x1
80006bee:	f4 08 00 08 	add	r8,r10,r8
80006bf2:	f0 ca ff f9 	sub	r10,r8,-7
80006bf6:	12 98       	mov	r8,r9
80006bf8:	b4 88       	st.b	r10[0x0],r8
			
			if (acc != ledBrd[i].idcsum)
80006bfa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006bfe:	49 7a       	lddpc	r10,80006c58 <read_led_board_serial_ids+0x268>
80006c00:	12 98       	mov	r8,r9
80006c02:	a3 78       	lsl	r8,0x3
80006c04:	12 18       	sub	r8,r9
80006c06:	a1 78       	lsl	r8,0x1
80006c08:	f4 08 00 08 	add	r8,r10,r8
80006c0c:	2f 98       	sub	r8,-7
80006c0e:	11 88       	ld.ub	r8,r8[0x0]
80006c10:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80006c14:	f0 09 18 00 	cp.b	r9,r8
80006c18:	c0 e0       	breq	80006c34 <read_led_board_serial_ids+0x244>
			{
				ledBrd[i].present = 0; //crc8 wasn't valid for this ID chip, don't trust the board
80006c1a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006c1e:	48 fa       	lddpc	r10,80006c58 <read_led_board_serial_ids+0x268>
80006c20:	12 98       	mov	r8,r9
80006c22:	a3 78       	lsl	r8,0x3
80006c24:	12 18       	sub	r8,r9
80006c26:	a1 78       	lsl	r8,0x1
80006c28:	f4 08 00 08 	add	r8,r10,r8
80006c2c:	f0 c9 ff f8 	sub	r9,r8,-8
80006c30:	30 08       	mov	r8,0
80006c32:	b2 88       	st.b	r9[0x0],r8
	}
	

//for (;;) //DEBUG 12may15
//{
	for (int i=0; i<NUM_LED_BOARDS; i++)
80006c34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c38:	2f f8       	sub	r8,-1
80006c3a:	ef 48 ff f4 	st.w	r7[-12],r8
80006c3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c42:	58 48       	cp.w	r8,4
80006c44:	fe 9a ff 4a 	brle	80006ad8 <read_led_board_serial_ids+0xe8>
	ledBrd[2].id[2] = 0x67;
	ledBrd[2].id[3] = 0x45;
	ledBrd[2].id[4] = 0x23;
	ledBrd[2].id[5] = 0x01;
#endif
}
80006c48:	2f dd       	sub	sp,-12
80006c4a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006c4e:	00 00       	add	r0,r0
80006c50:	80 00       	ld.sh	r0,r0[0x0]
80006c52:	21 74       	sub	r4,23
80006c54:	80 00       	ld.sh	r0,r0[0x0]
80006c56:	22 34       	sub	r4,35
80006c58:	00 00       	add	r0,r0
80006c5a:	02 f2       	st.b	--r1,r2
80006c5c:	00 00       	add	r0,r0
80006c5e:	03 38       	ld.ub	r8,r1++
80006c60:	80 00       	ld.sh	r0,r0[0x0]
80006c62:	31 04       	mov	r4,16
80006c64:	80 00       	ld.sh	r0,r0[0x0]
80006c66:	31 5c       	mov	r12,21
80006c68:	80 00       	ld.sh	r0,r0[0x0]
80006c6a:	31 c0       	mov	r0,28

80006c6c <check_led_brd_side_lifetime>:
};

/* Each side of an LED board will get different usage */
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx);
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx)
{
80006c6c:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80006c70:	1a 97       	mov	r7,sp
80006c72:	20 4d       	sub	sp,16
80006c74:	18 98       	mov	r8,r12
80006c76:	ef 68 ff f0 	st.b	r7[-16],r8
	 * Find the record for this board's serial ID number, and check the usage hours and see if we
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
80006c7a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80006c7e:	4e 1a       	lddpc	r10,80006e00 <check_led_brd_side_lifetime+0x194>
80006c80:	12 98       	mov	r8,r9
80006c82:	a3 68       	lsl	r8,0x2
80006c84:	12 08       	add	r8,r9
80006c86:	f4 08 00 08 	add	r8,r10,r8
80006c8a:	2f f8       	sub	r8,-1
80006c8c:	11 88       	ld.ub	r8,r8[0x0]
80006c8e:	ef 68 ff f7 	st.b	r7[-9],r8
	hours = (usageShdw[0].u[idx].hrs_thous * 1000) +
80006c92:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006c96:	4d ca       	lddpc	r10,80006e04 <check_led_brd_side_lifetime+0x198>
80006c98:	12 98       	mov	r8,r9
80006c9a:	a3 68       	lsl	r8,0x2
80006c9c:	12 08       	add	r8,r9
80006c9e:	a1 78       	lsl	r8,0x1
80006ca0:	f4 08 00 08 	add	r8,r10,r8
80006ca4:	2f c8       	sub	r8,-4
80006ca6:	11 b8       	ld.ub	r8,r8[0x3]
80006ca8:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80006cac:	5c 58       	castu.b	r8
80006cae:	10 99       	mov	r9,r8
80006cb0:	e0 68 03 e8 	mov	r8,1000
80006cb4:	f2 08 02 4a 	mul	r10,r9,r8
		(usageShdw[0].u[idx].hrs_huns * 100) +
80006cb8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006cbc:	4d 2b       	lddpc	r11,80006e04 <check_led_brd_side_lifetime+0x198>
80006cbe:	12 98       	mov	r8,r9
80006cc0:	a3 68       	lsl	r8,0x2
80006cc2:	12 08       	add	r8,r9
80006cc4:	a1 78       	lsl	r8,0x1
80006cc6:	f6 08 00 08 	add	r8,r11,r8
80006cca:	2f c8       	sub	r8,-4
80006ccc:	11 b8       	ld.ub	r8,r8[0x3]
80006cce:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006cd2:	5c 58       	castu.b	r8
80006cd4:	f0 08 10 64 	mul	r8,r8,100
80006cd8:	10 0a       	add	r10,r8
		(usageShdw[0].u[idx].hrs_tens * 10) +
80006cda:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006cde:	4c ab       	lddpc	r11,80006e04 <check_led_brd_side_lifetime+0x198>
80006ce0:	12 98       	mov	r8,r9
80006ce2:	a3 68       	lsl	r8,0x2
80006ce4:	12 08       	add	r8,r9
80006ce6:	a1 78       	lsl	r8,0x1
80006ce8:	f6 08 00 08 	add	r8,r11,r8
80006cec:	2f 88       	sub	r8,-8
80006cee:	11 88       	ld.ub	r8,r8[0x0]
80006cf0:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80006cf4:	5c 58       	castu.b	r8
80006cf6:	10 99       	mov	r9,r8
80006cf8:	12 98       	mov	r8,r9
80006cfa:	a3 68       	lsl	r8,0x2
80006cfc:	12 08       	add	r8,r9
80006cfe:	a1 78       	lsl	r8,0x1
80006d00:	10 0a       	add	r10,r8
		(usageShdw[0].u[idx].hrs_ones);
80006d02:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006d06:	4c 0b       	lddpc	r11,80006e04 <check_led_brd_side_lifetime+0x198>
80006d08:	12 98       	mov	r8,r9
80006d0a:	a3 68       	lsl	r8,0x2
80006d0c:	12 08       	add	r8,r9
80006d0e:	a1 78       	lsl	r8,0x1
80006d10:	f6 08 00 08 	add	r8,r11,r8
80006d14:	2f 88       	sub	r8,-8
80006d16:	11 88       	ld.ub	r8,r8[0x0]
80006d18:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006d1c:	5c 58       	castu.b	r8
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
	hours = (usageShdw[0].u[idx].hrs_thous * 1000) +
80006d1e:	f4 08 00 08 	add	r8,r10,r8
80006d22:	ef 48 ff f8 	st.w	r7[-8],r8
		

/*
 * Since we have to calculate the hours to see if the shelf is valid, finish out the calculations for the sanitizing time also. We'll need it later.
 */
	intensity = ((0.00002 * hours * hours) - (0.0699 * hours) + 92.879);
80006d26:	ee fc ff f8 	ld.w	r12,r7[-8]
80006d2a:	f0 1f 00 38 	mcall	80006e08 <check_led_brd_side_lifetime+0x19c>
80006d2e:	e0 68 68 f1 	mov	r8,26865
80006d32:	ea 18 88 e3 	orh	r8,0x88e3
80006d36:	e0 69 f8 b5 	mov	r9,63669
80006d3a:	ea 19 3e f4 	orh	r9,0x3ef4
80006d3e:	f0 1f 00 34 	mcall	80006e0c <check_led_brd_side_lifetime+0x1a0>
80006d42:	14 98       	mov	r8,r10
80006d44:	16 99       	mov	r9,r11
80006d46:	10 92       	mov	r2,r8
80006d48:	12 93       	mov	r3,r9
80006d4a:	ee fc ff f8 	ld.w	r12,r7[-8]
80006d4e:	f0 1f 00 2f 	mcall	80006e08 <check_led_brd_side_lifetime+0x19c>
80006d52:	14 98       	mov	r8,r10
80006d54:	16 99       	mov	r9,r11
80006d56:	04 9a       	mov	r10,r2
80006d58:	06 9b       	mov	r11,r3
80006d5a:	f0 1f 00 2d 	mcall	80006e0c <check_led_brd_side_lifetime+0x1a0>
80006d5e:	14 98       	mov	r8,r10
80006d60:	16 99       	mov	r9,r11
80006d62:	10 92       	mov	r2,r8
80006d64:	12 93       	mov	r3,r9
80006d66:	ee fc ff f8 	ld.w	r12,r7[-8]
80006d6a:	f0 1f 00 28 	mcall	80006e08 <check_led_brd_side_lifetime+0x19c>
80006d6e:	e0 68 8a db 	mov	r8,35547
80006d72:	ea 18 65 fd 	orh	r8,0x65fd
80006d76:	e0 69 e4 f7 	mov	r9,58615
80006d7a:	ea 19 bf b1 	orh	r9,0xbfb1
80006d7e:	f0 1f 00 24 	mcall	80006e0c <check_led_brd_side_lifetime+0x1a0>
80006d82:	14 98       	mov	r8,r10
80006d84:	16 99       	mov	r9,r11
80006d86:	04 9a       	mov	r10,r2
80006d88:	06 9b       	mov	r11,r3
80006d8a:	f0 1f 00 22 	mcall	80006e10 <check_led_brd_side_lifetime+0x1a4>
80006d8e:	14 98       	mov	r8,r10
80006d90:	16 99       	mov	r9,r11
80006d92:	10 9a       	mov	r10,r8
80006d94:	12 9b       	mov	r11,r9
80006d96:	e0 68 4b c7 	mov	r8,19399
80006d9a:	ea 18 89 37 	orh	r8,0x8937
80006d9e:	e0 69 38 41 	mov	r9,14401
80006da2:	ea 19 40 57 	orh	r9,0x4057
80006da6:	f0 1f 00 1b 	mcall	80006e10 <check_led_brd_side_lifetime+0x1a4>
80006daa:	14 98       	mov	r8,r10
80006dac:	16 99       	mov	r9,r11
80006dae:	10 9a       	mov	r10,r8
80006db0:	12 9b       	mov	r11,r9
80006db2:	f0 1f 00 19 	mcall	80006e14 <check_led_brd_side_lifetime+0x1a8>
80006db6:	18 98       	mov	r8,r12
80006db8:	ef 48 ff fc 	st.w	r7[-4],r8
		
	ledBrdSide[sideIdx].sanitizeMinutes = (20 * 100)/intensity; //Shortest sanitize time is 20 minutes. Sanitize time increases as LED intensity drops with usage. Sanitize time is around 49 minutes when usage is at 2000 hours.
80006dbc:	ef 36 ff f0 	ld.ub	r6,r7[-16]
80006dc0:	ee fb ff fc 	ld.w	r11,r7[-4]
80006dc4:	fc 1c 44 fa 	movh	r12,0x44fa
80006dc8:	f0 1f 00 14 	mcall	80006e18 <check_led_brd_side_lifetime+0x1ac>
80006dcc:	18 98       	mov	r8,r12
80006dce:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
80006dd2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006dd6:	48 ba       	lddpc	r10,80006e00 <check_led_brd_side_lifetime+0x194>
80006dd8:	0c 98       	mov	r8,r6
80006dda:	a3 68       	lsl	r8,0x2
80006ddc:	0c 08       	add	r8,r6
80006dde:	10 0a       	add	r10,r8
80006de0:	12 98       	mov	r8,r9
80006de2:	b4 88       	st.b	r10[0x0],r8
	
	if (hours < 1999)
80006de4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006de8:	e0 48 07 ce 	cp.w	r8,1998
80006dec:	e0 8b 00 04 	brhi	80006df4 <check_led_brd_side_lifetime+0x188>
	{
		return LED_BOARD_SIDE_WITHIN_LIFETIME_LIMIT;
80006df0:	30 18       	mov	r8,1
80006df2:	c0 28       	rjmp	80006df6 <check_led_brd_side_lifetime+0x18a>
	}
	else
	{
		return LED_BOARD_SIDE_PAST_LIFETIME_LIMIT;
80006df4:	30 08       	mov	r8,0
	}
}
80006df6:	10 9c       	mov	r12,r8
80006df8:	2f cd       	sub	sp,-16
80006dfa:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80006dfe:	00 00       	add	r0,r0
80006e00:	00 00       	add	r0,r0
80006e02:	0b 1c       	ld.sh	r12,r5++
80006e04:	00 00       	add	r0,r0
80006e06:	03 80       	ld.ub	r0,r1[0x0]
80006e08:	80 00       	ld.sh	r0,r0[0x0]
80006e0a:	a7 90       	lsr	r0,0x7
80006e0c:	80 00       	ld.sh	r0,r0[0x0]
80006e0e:	a3 0c       	ld.d	r12,r1
80006e10:	80 00       	ld.sh	r0,r0[0x0]
80006e12:	a6 80       	st.b	r3[0x0],r0
80006e14:	80 00       	ld.sh	r0,r0[0x0]
80006e16:	a9 d8       	cbr	r8,0x9
80006e18:	80 00       	ld.sh	r0,r0[0x0]
80006e1a:	a8 78       	st.h	r4[0xe],r8

80006e1c <check_led_brd_side_lifetimes>:

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
80006e1c:	eb cd 40 c0 	pushm	r6-r7,lr
80006e20:	1a 97       	mov	r7,sp
80006e22:	20 2d       	sub	sp,8
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80006e24:	30 08       	mov	r8,0
80006e26:	ef 48 ff fc 	st.w	r7[-4],r8
80006e2a:	c3 78       	rjmp	80006e98 <check_led_brd_side_lifetimes+0x7c>
	{
		brdIdx = ledBrdSide[i].boardIdx;
80006e2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006e30:	49 ea       	lddpc	r10,80006ea8 <check_led_brd_side_lifetimes+0x8c>
80006e32:	12 98       	mov	r8,r9
80006e34:	a3 68       	lsl	r8,0x2
80006e36:	12 08       	add	r8,r9
80006e38:	f4 08 00 08 	add	r8,r10,r8
80006e3c:	2f c8       	sub	r8,-4
80006e3e:	11 88       	ld.ub	r8,r8[0x0]
80006e40:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[brdIdx].present)
80006e44:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80006e48:	49 9a       	lddpc	r10,80006eac <check_led_brd_side_lifetimes+0x90>
80006e4a:	12 98       	mov	r8,r9
80006e4c:	a3 78       	lsl	r8,0x3
80006e4e:	12 18       	sub	r8,r9
80006e50:	a1 78       	lsl	r8,0x1
80006e52:	f4 08 00 08 	add	r8,r10,r8
80006e56:	2f 88       	sub	r8,-8
80006e58:	11 88       	ld.ub	r8,r8[0x0]
80006e5a:	58 08       	cp.w	r8,0
80006e5c:	c1 90       	breq	80006e8e <check_led_brd_side_lifetimes+0x72>
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
80006e5e:	ee f6 ff fc 	ld.w	r6,r7[-4]
80006e62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e66:	5c 58       	castu.b	r8
80006e68:	10 9c       	mov	r12,r8
80006e6a:	f0 1f 00 12 	mcall	80006eb0 <check_led_brd_side_lifetimes+0x94>
80006e6e:	18 98       	mov	r8,r12
80006e70:	10 99       	mov	r9,r8
80006e72:	30 08       	mov	r8,0
80006e74:	f0 09 18 00 	cp.b	r9,r8
80006e78:	5f 09       	sreq	r9
80006e7a:	48 ca       	lddpc	r10,80006ea8 <check_led_brd_side_lifetimes+0x8c>
80006e7c:	0c 98       	mov	r8,r6
80006e7e:	a3 68       	lsl	r8,0x2
80006e80:	0c 08       	add	r8,r6
80006e82:	f4 08 00 08 	add	r8,r10,r8
80006e86:	f0 ca ff fe 	sub	r10,r8,-2
80006e8a:	12 98       	mov	r8,r9
80006e8c:	b4 88       	st.b	r10[0x0],r8
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80006e8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e92:	2f f8       	sub	r8,-1
80006e94:	ef 48 ff fc 	st.w	r7[-4],r8
80006e98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e9c:	58 78       	cp.w	r8,7
80006e9e:	fe 9a ff c7 	brle	80006e2c <check_led_brd_side_lifetimes+0x10>
		if (ledBrd[brdIdx].present)
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
		}	
	}
}
80006ea2:	2f ed       	sub	sp,-8
80006ea4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006ea8:	00 00       	add	r0,r0
80006eaa:	0b 1c       	ld.sh	r12,r5++
80006eac:	00 00       	add	r0,r0
80006eae:	02 f2       	st.b	--r1,r2
80006eb0:	80 00       	ld.sh	r0,r0[0x0]
80006eb2:	6c 6c       	ld.w	r12,r6[0x18]

80006eb4 <adc_process_task>:

volatile avr32_adcifa_t *adcifa = &AVR32_ADCIFA; // ADCIFA IP registers address

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
80006eb4:	eb cd 40 80 	pushm	r7,lr
80006eb8:	1a 97       	mov	r7,sp
80006eba:	20 1d       	sub	sp,4
80006ebc:	18 98       	mov	r8,r12
80006ebe:	ef 68 ff fc 	st.b	r7[-4],r8
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
80006ec2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);
80006ec6:	12 98       	mov	r8,r9
80006ec8:	a1 78       	lsl	r8,0x1
80006eca:	f0 09 00 09 	add	r9,r8,r9

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
80006ece:	49 88       	lddpc	r8,80006f2c <adc_process_task+0x78>
80006ed0:	10 09       	add	r9,r8
80006ed2:	49 88       	lddpc	r8,80006f30 <adc_process_task+0x7c>
80006ed4:	70 08       	ld.w	r8,r8[0x0]
80006ed6:	49 8a       	lddpc	r10,80006f34 <adc_process_task+0x80>
80006ed8:	30 0b       	mov	r11,0
80006eda:	10 9c       	mov	r12,r8
80006edc:	f0 1f 00 17 	mcall	80006f38 <adc_process_task+0x84>
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);

	// Start ADCIFA sequencer 0
	adcifa_start_sequencer(adcifa, 0);
80006ee0:	49 48       	lddpc	r8,80006f30 <adc_process_task+0x7c>
80006ee2:	70 08       	ld.w	r8,r8[0x0]
80006ee4:	30 0b       	mov	r11,0
80006ee6:	10 9c       	mov	r12,r8
80006ee8:	f0 1f 00 15 	mcall	80006f3c <adc_process_task+0x88>
80006eec:	c0 28       	rjmp	80006ef0 <adc_process_task+0x3c>
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
			return bluesense_buf[shelfIdx];
		}
	}
80006eee:	d7 03       	nop
	// Get Values from sequencer 0
	while(1)
	{
		//TODO: need a timeout here and error handling in case the ADC gets stuck for some reason
		
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
80006ef0:	49 08       	lddpc	r8,80006f30 <adc_process_task+0x7c>
80006ef2:	70 08       	ld.w	r8,r8[0x0]
80006ef4:	49 39       	lddpc	r9,80006f40 <adc_process_task+0x8c>
80006ef6:	49 0a       	lddpc	r10,80006f34 <adc_process_task+0x80>
80006ef8:	30 0b       	mov	r11,0
80006efa:	10 9c       	mov	r12,r8
80006efc:	f0 1f 00 12 	mcall	80006f44 <adc_process_task+0x90>
80006f00:	18 98       	mov	r8,r12
80006f02:	10 99       	mov	r9,r8
80006f04:	30 28       	mov	r8,2
80006f06:	f0 09 18 00 	cp.b	r9,r8
80006f0a:	cf 21       	brne	80006eee <adc_process_task+0x3a>
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
80006f0c:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80006f10:	48 c8       	lddpc	r8,80006f40 <adc_process_task+0x8c>
80006f12:	90 08       	ld.sh	r8,r8[0x0]
80006f14:	48 d9       	lddpc	r9,80006f48 <adc_process_task+0x94>
80006f16:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
			return bluesense_buf[shelfIdx];
80006f1a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006f1e:	48 b8       	lddpc	r8,80006f48 <adc_process_task+0x94>
80006f20:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
		}
	}
}
80006f24:	10 9c       	mov	r12,r8
80006f26:	2f fd       	sub	sp,-4
80006f28:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f2c:	00 00       	add	r0,r0
80006f2e:	00 9f       	mov	pc,r0
80006f30:	00 00       	add	r0,r0
80006f32:	00 ac       	st.w	r0++,r12
80006f34:	00 00       	add	r0,r0
80006f36:	00 98       	mov	r8,r0
80006f38:	80 00       	ld.sh	r0,r0[0x0]
80006f3a:	35 7c       	mov	r12,87
80006f3c:	80 00       	ld.sh	r0,r0[0x0]
80006f3e:	3a 8c       	mov	r12,-88
80006f40:	00 00       	add	r0,r0
80006f42:	02 f0       	st.b	--r1,r0
80006f44:	80 00       	ld.sh	r0,r0[0x0]
80006f46:	3b 18       	mov	r8,-79
80006f48:	00 00       	add	r0,r0
80006f4a:	02 e8       	st.h	--r1,r8

80006f4c <check_shelf_for_devices>:
	DEVICES_PRESENT
};

unsigned char check_shelf_for_devices(unsigned char shelfPosition);
unsigned char check_shelf_for_devices(unsigned char shelfPosition)
{
80006f4c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80006f50:	1a 97       	mov	r7,sp
80006f52:	20 dd       	sub	sp,52
80006f54:	18 98       	mov	r8,r12
80006f56:	ef 68 ff cc 	st.b	r7[-52],r8
	U16 bluesense;
	
	led_shelf(shelfPosition, LED_ON); //TODO: do we finish this task fast enough to not check the door latch in here? Can't have LEDs on if the door opens
80006f5a:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80006f5e:	30 1b       	mov	r11,1
80006f60:	10 9c       	mov	r12,r8
80006f62:	f0 1f 00 61 	mcall	800070e4 <check_shelf_for_devices+0x198>
80006f66:	33 28       	mov	r8,50
80006f68:	ef 48 ff e4 	st.w	r7[-28],r8
80006f6c:	e0 68 12 00 	mov	r8,4608
80006f70:	ea 18 00 7a 	orh	r8,0x7a
80006f74:	ef 48 ff e0 	st.w	r7[-32],r8
80006f78:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006f7c:	ef 48 ff ec 	st.w	r7[-20],r8
80006f80:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006f84:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80006f88:	ee f0 ff ec 	ld.w	r0,r7[-20]
80006f8c:	30 01       	mov	r1,0
80006f8e:	ee f2 ff e8 	ld.w	r2,r7[-24]
80006f92:	30 03       	mov	r3,0
80006f94:	e2 02 02 4a 	mul	r10,r1,r2
80006f98:	e6 00 02 48 	mul	r8,r3,r0
80006f9c:	10 0a       	add	r10,r8
80006f9e:	e0 02 06 48 	mulu.d	r8,r0,r2
80006fa2:	12 0a       	add	r10,r9
80006fa4:	14 99       	mov	r9,r10
80006fa6:	e0 6a 03 e7 	mov	r10,999
80006faa:	30 0b       	mov	r11,0
80006fac:	f0 0a 00 0a 	add	r10,r8,r10
80006fb0:	f2 0b 00 4b 	adc	r11,r9,r11
80006fb4:	e0 68 03 e8 	mov	r8,1000
80006fb8:	30 09       	mov	r9,0
80006fba:	f0 1f 00 4c 	mcall	800070e8 <check_shelf_for_devices+0x19c>
80006fbe:	14 98       	mov	r8,r10
80006fc0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80006fc2:	ef 48 ff f4 	st.w	r7[-12],r8
80006fc6:	ee c8 00 30 	sub	r8,r7,48
80006fca:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006fce:	e1 b8 00 42 	mfsr	r8,0x108
80006fd2:	10 99       	mov	r9,r8
80006fd4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006fd8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006fda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006fde:	70 09       	ld.w	r9,r8[0x0]
80006fe0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006fe4:	10 09       	add	r9,r8
80006fe6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006fea:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006fec:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006ff0:	30 08       	mov	r8,0
80006ff2:	f3 68 00 08 	st.b	r9[8],r8
80006ff6:	ee c8 00 30 	sub	r8,r7,48
80006ffa:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006ffe:	e1 b8 00 42 	mfsr	r8,0x108
80007002:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80007006:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000700a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000700e:	30 28       	mov	r8,2
80007010:	f0 09 18 00 	cp.b	r9,r8
80007014:	c0 31       	brne	8000701a <check_shelf_for_devices+0xce>
    return false;
80007016:	30 08       	mov	r8,0
80007018:	c4 38       	rjmp	8000709e <check_shelf_for_devices+0x152>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000701a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000701e:	f1 39 00 08 	ld.ub	r9,r8[8]
80007022:	30 18       	mov	r8,1
80007024:	f0 09 18 00 	cp.b	r9,r8
80007028:	c0 31       	brne	8000702e <check_shelf_for_devices+0xe2>
    return true;
8000702a:	30 18       	mov	r8,1
8000702c:	c3 98       	rjmp	8000709e <check_shelf_for_devices+0x152>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000702e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007032:	70 09       	ld.w	r9,r8[0x0]
80007034:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007038:	70 18       	ld.w	r8,r8[0x4]
8000703a:	10 39       	cp.w	r9,r8
8000703c:	e0 88 00 1a 	brls	80007070 <check_shelf_for_devices+0x124>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007040:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007044:	70 08       	ld.w	r8,r8[0x0]
80007046:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000704a:	10 39       	cp.w	r9,r8
8000704c:	c1 02       	brcc	8000706c <check_shelf_for_devices+0x120>
8000704e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007052:	70 18       	ld.w	r8,r8[0x4]
80007054:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007058:	10 39       	cp.w	r9,r8
8000705a:	e0 88 00 09 	brls	8000706c <check_shelf_for_devices+0x120>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000705e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007062:	30 18       	mov	r8,1
80007064:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80007068:	30 18       	mov	r8,1
8000706a:	c1 a8       	rjmp	8000709e <check_shelf_for_devices+0x152>
    }
    return false;
8000706c:	30 08       	mov	r8,0
8000706e:	c1 88       	rjmp	8000709e <check_shelf_for_devices+0x152>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007070:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007074:	70 08       	ld.w	r8,r8[0x0]
80007076:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000707a:	10 39       	cp.w	r9,r8
8000707c:	c0 93       	brcs	8000708e <check_shelf_for_devices+0x142>
8000707e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007082:	70 18       	ld.w	r8,r8[0x4]
80007084:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007088:	10 39       	cp.w	r9,r8
8000708a:	e0 88 00 09 	brls	8000709c <check_shelf_for_devices+0x150>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000708e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007092:	30 18       	mov	r8,1
80007094:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80007098:	30 18       	mov	r8,1
8000709a:	c0 28       	rjmp	8000709e <check_shelf_for_devices+0x152>
    }
    return false;
8000709c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000709e:	58 08       	cp.w	r8,0
800070a0:	ca b0       	breq	80006ff6 <check_shelf_for_devices+0xaa>
	
	cpu_delay_ms(50, EC_CPU_CLOCK_FREQ);
		
	//Read bluesense for this shelf
	bluesense = 0;
800070a2:	30 08       	mov	r8,0
800070a4:	ef 58 ff de 	st.h	r7[-34],r8
	bluesense = adc_process_task(shelfPosition);
800070a8:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800070ac:	10 9c       	mov	r12,r8
800070ae:	f0 1f 00 10 	mcall	800070ec <check_shelf_for_devices+0x1a0>
800070b2:	18 98       	mov	r8,r12
800070b4:	ef 58 ff de 	st.h	r7[-34],r8

	led_shelf(shelfPosition, LED_OFF);
800070b8:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800070bc:	30 0b       	mov	r11,0
800070be:	10 9c       	mov	r12,r8
800070c0:	f0 1f 00 09 	mcall	800070e4 <check_shelf_for_devices+0x198>
	

	if (bluesense > 0x800)
800070c4:	ef 09 ff de 	ld.sh	r9,r7[-34]
800070c8:	e0 68 08 00 	mov	r8,2048
800070cc:	f0 09 19 00 	cp.h	r9,r8
800070d0:	e0 88 00 04 	brls	800070d8 <check_shelf_for_devices+0x18c>
	{
		return DEVICES_PRESENT;
800070d4:	30 18       	mov	r8,1
800070d6:	c0 28       	rjmp	800070da <check_shelf_for_devices+0x18e>
	}
	else
	{
		return NO_DEVICES_PRESENT;
800070d8:	30 08       	mov	r8,0
	}
}
800070da:	10 9c       	mov	r12,r8
800070dc:	2f 3d       	sub	sp,-52
800070de:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800070e2:	00 00       	add	r0,r0
800070e4:	80 00       	ld.sh	r0,r0[0x0]
800070e6:	62 f8       	ld.w	r8,r1[0x3c]
800070e8:	80 00       	ld.sh	r0,r0[0x0]
800070ea:	aa 62       	st.h	r5[0xc],r2
800070ec:	80 00       	ld.sh	r0,r0[0x0]
800070ee:	6e b4       	ld.w	r4,r7[0x2c]

800070f0 <check_shelves_for_devices>:

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
800070f0:	eb cd 40 c0 	pushm	r6-r7,lr
800070f4:	1a 97       	mov	r7,sp
800070f6:	20 1d       	sub	sp,4
	for (int i=0; i<NUM_SHELVES; i++)
800070f8:	30 08       	mov	r8,0
800070fa:	ef 48 ff fc 	st.w	r7[-4],r8
800070fe:	c2 68       	rjmp	8000714a <check_shelves_for_devices+0x5a>
	{
		if (shelf[i].present)
80007100:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007104:	49 6a       	lddpc	r10,8000715c <check_shelves_for_devices+0x6c>
80007106:	12 98       	mov	r8,r9
80007108:	a3 68       	lsl	r8,0x2
8000710a:	12 08       	add	r8,r9
8000710c:	f4 08 00 08 	add	r8,r10,r8
80007110:	2f c8       	sub	r8,-4
80007112:	11 88       	ld.ub	r8,r8[0x0]
80007114:	58 08       	cp.w	r8,0
80007116:	c1 50       	breq	80007140 <check_shelves_for_devices+0x50>
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);	
80007118:	ee f6 ff fc 	ld.w	r6,r7[-4]
8000711c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007120:	5c 58       	castu.b	r8
80007122:	10 9c       	mov	r12,r8
80007124:	f0 1f 00 0f 	mcall	80007160 <check_shelves_for_devices+0x70>
80007128:	18 98       	mov	r8,r12
8000712a:	10 99       	mov	r9,r8
8000712c:	48 ca       	lddpc	r10,8000715c <check_shelves_for_devices+0x6c>
8000712e:	0c 98       	mov	r8,r6
80007130:	a3 68       	lsl	r8,0x2
80007132:	0c 08       	add	r8,r6
80007134:	f4 08 00 08 	add	r8,r10,r8
80007138:	f0 ca ff fd 	sub	r10,r8,-3
8000713c:	12 98       	mov	r8,r9
8000713e:	b4 88       	st.b	r10[0x0],r8
}

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
	for (int i=0; i<NUM_SHELVES; i++)
80007140:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007144:	2f f8       	sub	r8,-1
80007146:	ef 48 ff fc 	st.w	r7[-4],r8
8000714a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000714e:	58 38       	cp.w	r8,3
80007150:	fe 9a ff d8 	brle	80007100 <check_shelves_for_devices+0x10>
		if (shelf[i].present)
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);	
		}
	}
}
80007154:	2f fd       	sub	sp,-4
80007156:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000715a:	00 00       	add	r0,r0
8000715c:	00 00       	add	r0,r0
8000715e:	03 38       	ld.ub	r8,r1++
80007160:	80 00       	ld.sh	r0,r0[0x0]
80007162:	6f 4c       	ld.w	r12,r7[0x50]

80007164 <set_shelves_active_inactive>:

unsigned char topEflag0 = 0, topEflag1 = 0, botEflag0 = 0, botEflag1 = 0;

void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
80007164:	eb cd 40 80 	pushm	r7,lr
80007168:	1a 97       	mov	r7,sp
8000716a:	20 5d       	sub	sp,20
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
8000716c:	30 08       	mov	r8,0
8000716e:	ef 68 ff ef 	st.b	r7[-17],r8
	
	for (int i=0; i<NUM_SHELVES; i++)
80007172:	30 08       	mov	r8,0
80007174:	ef 48 ff f0 	st.w	r7[-16],r8
80007178:	c1 88       	rjmp	800071a8 <set_shelves_active_inactive+0x44>
	{
		if (shelf[i].present)
8000717a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000717e:	fe fa 02 96 	ld.w	r10,pc[662]
80007182:	12 98       	mov	r8,r9
80007184:	a3 68       	lsl	r8,0x2
80007186:	12 08       	add	r8,r9
80007188:	f4 08 00 08 	add	r8,r10,r8
8000718c:	2f c8       	sub	r8,-4
8000718e:	11 88       	ld.ub	r8,r8[0x0]
80007190:	58 08       	cp.w	r8,0
80007192:	c0 60       	breq	8000719e <set_shelves_active_inactive+0x3a>
		{	
			numShelvesPresent++;
80007194:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80007198:	2f f8       	sub	r8,-1
8000719a:	ef 68 ff ef 	st.b	r7[-17],r8
void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
	
	for (int i=0; i<NUM_SHELVES; i++)
8000719e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800071a2:	2f f8       	sub	r8,-1
800071a4:	ef 48 ff f0 	st.w	r7[-16],r8
800071a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800071ac:	58 38       	cp.w	r8,3
800071ae:	fe 9a ff e6 	brle	8000717a <set_shelves_active_inactive+0x16>
		{	
			numShelvesPresent++;
		}
	}
	
	if (numShelvesPresent !=0)
800071b2:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800071b6:	30 08       	mov	r8,0
800071b8:	f0 09 18 00 	cp.b	r9,r8
800071bc:	e0 80 00 90 	breq	800072dc <set_shelves_active_inactive+0x178>
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
800071c0:	30 ca       	mov	r10,12
800071c2:	34 3b       	mov	r11,67
800071c4:	30 0c       	mov	r12,0
800071c6:	f0 1f 00 95 	mcall	80007418 <set_shelves_active_inactive+0x2b4>
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
800071ca:	30 ca       	mov	r10,12
800071cc:	34 3b       	mov	r11,67
800071ce:	30 1c       	mov	r12,1
800071d0:	f0 1f 00 92 	mcall	80007418 <set_shelves_active_inactive+0x2b4>

		for (int i=0; i<NUM_SHELVES; i++)
800071d4:	30 08       	mov	r8,0
800071d6:	ef 48 ff f4 	st.w	r7[-12],r8
800071da:	c1 a8       	rjmp	8000720e <set_shelves_active_inactive+0xaa>
		{
			if (shelf[i].present)
800071dc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800071e0:	fe fa 02 34 	ld.w	r10,pc[564]
800071e4:	12 98       	mov	r8,r9
800071e6:	a3 68       	lsl	r8,0x2
800071e8:	12 08       	add	r8,r9
800071ea:	f4 08 00 08 	add	r8,r10,r8
800071ee:	2f c8       	sub	r8,-4
800071f0:	11 88       	ld.ub	r8,r8[0x0]
800071f2:	58 08       	cp.w	r8,0
800071f4:	c0 80       	breq	80007204 <set_shelves_active_inactive+0xa0>
			{
				led_shelf(i, LED_ON);	
800071f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800071fa:	5c 58       	castu.b	r8
800071fc:	30 1b       	mov	r11,1
800071fe:	10 9c       	mov	r12,r8
80007200:	f0 1f 00 87 	mcall	8000741c <set_shelves_active_inactive+0x2b8>
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);

		for (int i=0; i<NUM_SHELVES; i++)
80007204:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007208:	2f f8       	sub	r8,-1
8000720a:	ef 48 ff f4 	st.w	r7[-12],r8
8000720e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007212:	58 38       	cp.w	r8,3
80007214:	fe 9a ff e4 	brle	800071dc <set_shelves_active_inactive+0x78>
			{
				led_shelf(i, LED_ON);	
			}
		}

		PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0x40); //starts fault test
80007218:	34 0a       	mov	r10,64
8000721a:	30 1b       	mov	r11,1
8000721c:	30 0c       	mov	r12,0
8000721e:	f0 1f 00 7f 	mcall	80007418 <set_shelves_active_inactive+0x2b4>
		PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0x40); //starts fault test
80007222:	34 0a       	mov	r10,64
80007224:	30 1b       	mov	r11,1
80007226:	30 1c       	mov	r12,1
80007228:	f0 1f 00 7c 	mcall	80007418 <set_shelves_active_inactive+0x2b4>
8000722c:	c0 28       	rjmp	80007230 <set_shelves_active_inactive+0xcc>
				topEflag1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
			
				break; //fault test for LED_TOP strings is complete
			}
		
		}
8000722e:	d7 03       	nop
		PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0x40); //starts fault test
		PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0x40); //starts fault test
	
		while (1)
		{
			tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_MODE2);
80007230:	30 1b       	mov	r11,1
80007232:	30 0c       	mov	r12,0
80007234:	f0 1f 00 7b 	mcall	80007420 <set_shelves_active_inactive+0x2bc>
80007238:	18 98       	mov	r8,r12
8000723a:	ef 68 ff ed 	st.b	r7[-19],r8
		
			if ((tmp1 & 0x40) == 0)
8000723e:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80007242:	e2 18 00 40 	andl	r8,0x40,COH
80007246:	cf 41       	brne	8000722e <set_shelves_active_inactive+0xca>
			{
				topEflag0 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);
80007248:	34 4b       	mov	r11,68
8000724a:	30 0c       	mov	r12,0
8000724c:	f0 1f 00 75 	mcall	80007420 <set_shelves_active_inactive+0x2bc>
80007250:	18 98       	mov	r8,r12
80007252:	4f 59       	lddpc	r9,80007424 <set_shelves_active_inactive+0x2c0>
80007254:	b2 88       	st.b	r9[0x0],r8
				topEflag1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
80007256:	34 5b       	mov	r11,69
80007258:	30 0c       	mov	r12,0
8000725a:	f0 1f 00 72 	mcall	80007420 <set_shelves_active_inactive+0x2bc>
8000725e:	18 98       	mov	r8,r12
80007260:	4f 29       	lddpc	r9,80007428 <set_shelves_active_inactive+0x2c4>
80007262:	b2 88       	st.b	r9[0x0],r8
			
				break; //fault test for LED_TOP strings is complete
80007264:	d7 03       	nop
80007266:	c0 28       	rjmp	8000726a <set_shelves_active_inactive+0x106>
				botEflag1 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
			
				break; //fault test for LED_BOTTOM strings is complete
			}
		
		}
80007268:	d7 03       	nop
		
		}
	
		while (1)
		{
			tmp2 = PCA9952_read_reg(LED_BOTTOM, PCA9952_MODE2);
8000726a:	30 1b       	mov	r11,1
8000726c:	30 1c       	mov	r12,1
8000726e:	f0 1f 00 6d 	mcall	80007420 <set_shelves_active_inactive+0x2bc>
80007272:	18 98       	mov	r8,r12
80007274:	ef 68 ff ee 	st.b	r7[-18],r8
		
			if ((tmp2 & 0x40) == 0)
80007278:	ef 38 ff ee 	ld.ub	r8,r7[-18]
8000727c:	e2 18 00 40 	andl	r8,0x40,COH
80007280:	cf 41       	brne	80007268 <set_shelves_active_inactive+0x104>
			{
				botEflag0 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);
80007282:	34 4b       	mov	r11,68
80007284:	30 1c       	mov	r12,1
80007286:	f0 1f 00 67 	mcall	80007420 <set_shelves_active_inactive+0x2bc>
8000728a:	18 98       	mov	r8,r12
8000728c:	4e 89       	lddpc	r9,8000742c <set_shelves_active_inactive+0x2c8>
8000728e:	b2 88       	st.b	r9[0x0],r8
				botEflag1 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
80007290:	34 5b       	mov	r11,69
80007292:	30 1c       	mov	r12,1
80007294:	f0 1f 00 63 	mcall	80007420 <set_shelves_active_inactive+0x2bc>
80007298:	18 98       	mov	r8,r12
8000729a:	4e 69       	lddpc	r9,80007430 <set_shelves_active_inactive+0x2cc>
8000729c:	b2 88       	st.b	r9[0x0],r8
		
		}
		
		//TODO: Deal with the errors from the above tests, topEflag0, topEflag1, botEflag0, botEflag1. Report on the technician interface.
	
		for (int i=0; i<NUM_SHELVES; i++)
8000729e:	30 08       	mov	r8,0
800072a0:	ef 48 ff f8 	st.w	r7[-8],r8
800072a4:	c0 d8       	rjmp	800072be <set_shelves_active_inactive+0x15a>
		{
			led_shelf(i, LED_OFF);
800072a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800072aa:	5c 58       	castu.b	r8
800072ac:	30 0b       	mov	r11,0
800072ae:	10 9c       	mov	r12,r8
800072b0:	f0 1f 00 5b 	mcall	8000741c <set_shelves_active_inactive+0x2b8>
		
		}
		
		//TODO: Deal with the errors from the above tests, topEflag0, topEflag1, botEflag0, botEflag1. Report on the technician interface.
	
		for (int i=0; i<NUM_SHELVES; i++)
800072b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800072b8:	2f f8       	sub	r8,-1
800072ba:	ef 48 ff f8 	st.w	r7[-8],r8
800072be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800072c2:	58 38       	cp.w	r8,3
800072c4:	fe 9a ff f1 	brle	800072a6 <set_shelves_active_inactive+0x142>
		{
			led_shelf(i, LED_OFF);
		}
		
		//Put driver current back to full power
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT);
800072c8:	36 4a       	mov	r10,100
800072ca:	34 3b       	mov	r11,67
800072cc:	30 0c       	mov	r12,0
800072ce:	f0 1f 00 53 	mcall	80007418 <set_shelves_active_inactive+0x2b4>
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT);
800072d2:	36 4a       	mov	r10,100
800072d4:	34 3b       	mov	r11,67
800072d6:	30 1c       	mov	r12,1
800072d8:	f0 1f 00 50 	mcall	80007418 <set_shelves_active_inactive+0x2b4>

	/*
	 * Continuing the evaluation
	 */
	
	numActiveShelves = 0;
800072dc:	4d 69       	lddpc	r9,80007434 <set_shelves_active_inactive+0x2d0>
800072de:	30 08       	mov	r8,0
800072e0:	b2 88       	st.b	r9[0x0],r8
	
	for (int i=0; i<NUM_SHELVES; i++)
800072e2:	30 08       	mov	r8,0
800072e4:	ef 48 ff fc 	st.w	r7[-4],r8
800072e8:	c1 08       	rjmp	80007308 <set_shelves_active_inactive+0x1a4>
	{
		shelf[i].active = SHELF_INACTIVE;
800072ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
800072ee:	4c aa       	lddpc	r10,80007414 <set_shelves_active_inactive+0x2b0>
800072f0:	12 98       	mov	r8,r9
800072f2:	a3 68       	lsl	r8,0x2
800072f4:	12 08       	add	r8,r9
800072f6:	f4 08 00 09 	add	r9,r10,r8
800072fa:	30 08       	mov	r8,0
800072fc:	b2 88       	st.b	r9[0x0],r8
	 * Continuing the evaluation
	 */
	
	numActiveShelves = 0;
	
	for (int i=0; i<NUM_SHELVES; i++)
800072fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007302:	2f f8       	sub	r8,-1
80007304:	ef 48 ff fc 	st.w	r7[-4],r8
80007308:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000730c:	58 38       	cp.w	r8,3
8000730e:	fe 9a ff ee 	brle	800072ea <set_shelves_active_inactive+0x186>
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80007312:	4c 18       	lddpc	r8,80007414 <set_shelves_active_inactive+0x2b0>
80007314:	11 c8       	ld.ub	r8,r8[0x4]
80007316:	58 08       	cp.w	r8,0
80007318:	c1 90       	breq	8000734a <set_shelves_active_inactive+0x1e6>
		shelf[0].devicesPresent && 
8000731a:	4b f8       	lddpc	r8,80007414 <set_shelves_active_inactive+0x2b0>
8000731c:	11 b8       	ld.ub	r8,r8[0x3]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
8000731e:	58 08       	cp.w	r8,0
80007320:	c1 50       	breq	8000734a <set_shelves_active_inactive+0x1e6>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
80007322:	4c 68       	lddpc	r8,80007438 <set_shelves_active_inactive+0x2d4>
80007324:	11 a8       	ld.ub	r8,r8[0x2]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80007326:	58 08       	cp.w	r8,0
80007328:	c1 11       	brne	8000734a <set_shelves_active_inactive+0x1e6>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
8000732a:	4c 48       	lddpc	r8,80007438 <set_shelves_active_inactive+0x2d4>
8000732c:	11 f8       	ld.ub	r8,r8[0x7]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
8000732e:	58 08       	cp.w	r8,0
80007330:	c0 d1       	brne	8000734a <set_shelves_active_inactive+0x1e6>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
	{
		shelf[0].active = SHELF_ACTIVE;
80007332:	4b 99       	lddpc	r9,80007414 <set_shelves_active_inactive+0x2b0>
80007334:	30 18       	mov	r8,1
80007336:	b2 88       	st.b	r9[0x0],r8
		numActiveShelves++;
80007338:	4b f8       	lddpc	r8,80007434 <set_shelves_active_inactive+0x2d0>
8000733a:	11 88       	ld.ub	r8,r8[0x0]
8000733c:	2f f8       	sub	r8,-1
8000733e:	5c 58       	castu.b	r8
80007340:	4b d9       	lddpc	r9,80007434 <set_shelves_active_inactive+0x2d0>
80007342:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 0 active\r\n");
80007344:	4b ec       	lddpc	r12,8000743c <set_shelves_active_inactive+0x2d8>
80007346:	f0 1f 00 3f 	mcall	80007440 <set_shelves_active_inactive+0x2dc>
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
8000734a:	4b 38       	lddpc	r8,80007414 <set_shelves_active_inactive+0x2b0>
8000734c:	f1 38 00 09 	ld.ub	r8,r8[9]
80007350:	58 08       	cp.w	r8,0
80007352:	c1 c0       	breq	8000738a <set_shelves_active_inactive+0x226>
	shelf[1].devicesPresent &&
80007354:	4b 08       	lddpc	r8,80007414 <set_shelves_active_inactive+0x2b0>
80007356:	f1 38 00 08 	ld.ub	r8,r8[8]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
8000735a:	58 08       	cp.w	r8,0
8000735c:	c1 70       	breq	8000738a <set_shelves_active_inactive+0x226>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
8000735e:	4b 78       	lddpc	r8,80007438 <set_shelves_active_inactive+0x2d4>
80007360:	f1 38 00 0c 	ld.ub	r8,r8[12]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80007364:	58 08       	cp.w	r8,0
80007366:	c1 21       	brne	8000738a <set_shelves_active_inactive+0x226>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
80007368:	4b 48       	lddpc	r8,80007438 <set_shelves_active_inactive+0x2d4>
8000736a:	f1 38 00 11 	ld.ub	r8,r8[17]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
8000736e:	58 08       	cp.w	r8,0
80007370:	c0 d1       	brne	8000738a <set_shelves_active_inactive+0x226>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
	{
		shelf[1].active = SHELF_ACTIVE;
80007372:	4a 99       	lddpc	r9,80007414 <set_shelves_active_inactive+0x2b0>
80007374:	30 18       	mov	r8,1
80007376:	b2 d8       	st.b	r9[0x5],r8
		numActiveShelves++;
80007378:	4a f8       	lddpc	r8,80007434 <set_shelves_active_inactive+0x2d0>
8000737a:	11 88       	ld.ub	r8,r8[0x0]
8000737c:	2f f8       	sub	r8,-1
8000737e:	5c 58       	castu.b	r8
80007380:	4a d9       	lddpc	r9,80007434 <set_shelves_active_inactive+0x2d0>
80007382:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 1 active\r\n");
80007384:	4b 0c       	lddpc	r12,80007444 <set_shelves_active_inactive+0x2e0>
80007386:	f0 1f 00 2f 	mcall	80007440 <set_shelves_active_inactive+0x2dc>
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
8000738a:	4a 38       	lddpc	r8,80007414 <set_shelves_active_inactive+0x2b0>
8000738c:	f1 38 00 0e 	ld.ub	r8,r8[14]
80007390:	58 08       	cp.w	r8,0
80007392:	c1 d0       	breq	800073cc <set_shelves_active_inactive+0x268>
	shelf[2].devicesPresent &&
80007394:	4a 08       	lddpc	r8,80007414 <set_shelves_active_inactive+0x2b0>
80007396:	f1 38 00 0d 	ld.ub	r8,r8[13]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
8000739a:	58 08       	cp.w	r8,0
8000739c:	c1 80       	breq	800073cc <set_shelves_active_inactive+0x268>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
8000739e:	4a 78       	lddpc	r8,80007438 <set_shelves_active_inactive+0x2d4>
800073a0:	f1 38 00 16 	ld.ub	r8,r8[22]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
800073a4:	58 08       	cp.w	r8,0
800073a6:	c1 31       	brne	800073cc <set_shelves_active_inactive+0x268>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
800073a8:	4a 48       	lddpc	r8,80007438 <set_shelves_active_inactive+0x2d4>
800073aa:	f1 38 00 1b 	ld.ub	r8,r8[27]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
800073ae:	58 08       	cp.w	r8,0
800073b0:	c0 e1       	brne	800073cc <set_shelves_active_inactive+0x268>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
	{
		shelf[2].active = SHELF_ACTIVE;
800073b2:	49 99       	lddpc	r9,80007414 <set_shelves_active_inactive+0x2b0>
800073b4:	30 18       	mov	r8,1
800073b6:	f3 68 00 0a 	st.b	r9[10],r8
		numActiveShelves++;
800073ba:	49 f8       	lddpc	r8,80007434 <set_shelves_active_inactive+0x2d0>
800073bc:	11 88       	ld.ub	r8,r8[0x0]
800073be:	2f f8       	sub	r8,-1
800073c0:	5c 58       	castu.b	r8
800073c2:	49 d9       	lddpc	r9,80007434 <set_shelves_active_inactive+0x2d0>
800073c4:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 2 active\r\n");
800073c6:	4a 1c       	lddpc	r12,80007448 <set_shelves_active_inactive+0x2e4>
800073c8:	f0 1f 00 1e 	mcall	80007440 <set_shelves_active_inactive+0x2dc>
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
800073cc:	49 28       	lddpc	r8,80007414 <set_shelves_active_inactive+0x2b0>
800073ce:	f1 38 00 13 	ld.ub	r8,r8[19]
800073d2:	58 08       	cp.w	r8,0
800073d4:	c1 d0       	breq	8000740e <set_shelves_active_inactive+0x2aa>
	shelf[3].devicesPresent &&
800073d6:	49 08       	lddpc	r8,80007414 <set_shelves_active_inactive+0x2b0>
800073d8:	f1 38 00 12 	ld.ub	r8,r8[18]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
800073dc:	58 08       	cp.w	r8,0
800073de:	c1 80       	breq	8000740e <set_shelves_active_inactive+0x2aa>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
800073e0:	49 68       	lddpc	r8,80007438 <set_shelves_active_inactive+0x2d4>
800073e2:	f1 38 00 20 	ld.ub	r8,r8[32]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
800073e6:	58 08       	cp.w	r8,0
800073e8:	c1 31       	brne	8000740e <set_shelves_active_inactive+0x2aa>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
800073ea:	49 48       	lddpc	r8,80007438 <set_shelves_active_inactive+0x2d4>
800073ec:	f1 38 00 25 	ld.ub	r8,r8[37]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
800073f0:	58 08       	cp.w	r8,0
800073f2:	c0 e1       	brne	8000740e <set_shelves_active_inactive+0x2aa>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
	{
		shelf[3].active = SHELF_ACTIVE;
800073f4:	48 89       	lddpc	r9,80007414 <set_shelves_active_inactive+0x2b0>
800073f6:	30 18       	mov	r8,1
800073f8:	f3 68 00 0f 	st.b	r9[15],r8
		numActiveShelves++;
800073fc:	48 e8       	lddpc	r8,80007434 <set_shelves_active_inactive+0x2d0>
800073fe:	11 88       	ld.ub	r8,r8[0x0]
80007400:	2f f8       	sub	r8,-1
80007402:	5c 58       	castu.b	r8
80007404:	48 c9       	lddpc	r9,80007434 <set_shelves_active_inactive+0x2d0>
80007406:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 3 active\r\n");
80007408:	49 1c       	lddpc	r12,8000744c <set_shelves_active_inactive+0x2e8>
8000740a:	f0 1f 00 0e 	mcall	80007440 <set_shelves_active_inactive+0x2dc>
	}
}
8000740e:	2f bd       	sub	sp,-20
80007410:	e3 cd 80 80 	ldm	sp++,r7,pc
80007414:	00 00       	add	r0,r0
80007416:	03 38       	ld.ub	r8,r1++
80007418:	80 00       	ld.sh	r0,r0[0x0]
8000741a:	5e 38       	retlo	r8
8000741c:	80 00       	ld.sh	r0,r0[0x0]
8000741e:	62 f8       	ld.w	r8,r1[0x3c]
80007420:	80 00       	ld.sh	r0,r0[0x0]
80007422:	5e bc       	rethi	r12
80007424:	00 00       	add	r0,r0
80007426:	02 b0       	st.h	r1++,r0
80007428:	00 00       	add	r0,r0
8000742a:	02 b1       	st.h	r1++,r1
8000742c:	00 00       	add	r0,r0
8000742e:	02 b2       	st.h	r1++,r2
80007430:	00 00       	add	r0,r0
80007432:	02 b3       	st.h	r1++,r3
80007434:	00 00       	add	r0,r0
80007436:	0b 46       	ld.w	r6,--r5
80007438:	00 00       	add	r0,r0
8000743a:	0b 1c       	ld.sh	r12,r5++
8000743c:	80 00       	ld.sh	r0,r0[0x0]
8000743e:	64 50       	ld.w	r0,r2[0x14]
80007440:	80 00       	ld.sh	r0,r0[0x0]
80007442:	33 38       	mov	r8,51
80007444:	80 00       	ld.sh	r0,r0[0x0]
80007446:	64 64       	ld.w	r4,r2[0x18]
80007448:	80 00       	ld.sh	r0,r0[0x0]
8000744a:	64 78       	ld.w	r8,r2[0x1c]
8000744c:	80 00       	ld.sh	r0,r0[0x0]
8000744e:	64 8c       	ld.w	r12,r2[0x20]

80007450 <num_active_shelves>:

unsigned char num_active_shelves(void);
unsigned char num_active_shelves(void)
{
80007450:	eb cd 40 80 	pushm	r7,lr
80007454:	1a 97       	mov	r7,sp
	return numActiveShelves;
80007456:	48 38       	lddpc	r8,80007460 <num_active_shelves+0x10>
80007458:	11 88       	ld.ub	r8,r8[0x0]
}
8000745a:	10 9c       	mov	r12,r8
8000745c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007460:	00 00       	add	r0,r0
80007462:	0b 46       	ld.w	r6,--r5

80007464 <init_sys_clocks>:
/*
 * Using RC8M (internal 8MHz)
 */
void init_sys_clocks(void);
void init_sys_clocks(void)
{
80007464:	eb cd 40 80 	pushm	r7,lr
80007468:	1a 97       	mov	r7,sp
8000746a:	20 1d       	sub	sp,4

//this kinda works for 100MHz, problems with TWIM, but maybe we can work around that 17may15
/*
 * From CLOCK_EXAMPLE31 which changes clock sources on the fly. Trying to get a faster clock so that we can work with the serial ID chip (DS2411) which needs control to 6us. 16may15
 */
	osc_enable(OSC_ID_RC8M);
8000746c:	30 2c       	mov	r12,2
8000746e:	f0 1f 00 10 	mcall	800074ac <init_sys_clocks+0x48>
	pll_config_init(&pcfg, PLL_SRC_RC8M, 1, EC_CPU_CLOCK_100MHZ/OSC_RC8M_NOMINAL_HZ);
80007472:	ee c8 00 04 	sub	r8,r7,4
80007476:	30 c9       	mov	r9,12
80007478:	30 1a       	mov	r10,1
8000747a:	30 2b       	mov	r11,2
8000747c:	10 9c       	mov	r12,r8
8000747e:	f0 1f 00 0d 	mcall	800074b0 <init_sys_clocks+0x4c>
	pll_enable(&pcfg, 0);
80007482:	ee c8 00 04 	sub	r8,r7,4
80007486:	30 0b       	mov	r11,0
80007488:	10 9c       	mov	r12,r8
8000748a:	f0 1f 00 0b 	mcall	800074b4 <init_sys_clocks+0x50>
	sysclk_set_prescalers(1,1,1,1);
8000748e:	30 19       	mov	r9,1
80007490:	30 1a       	mov	r10,1
80007492:	30 1b       	mov	r11,1
80007494:	30 1c       	mov	r12,1
80007496:	f0 1f 00 09 	mcall	800074b8 <init_sys_clocks+0x54>
	pll_wait_for_lock(0);
8000749a:	30 0c       	mov	r12,0
8000749c:	f0 1f 00 08 	mcall	800074bc <init_sys_clocks+0x58>
	sysclk_set_source(SYSCLK_SRC_PLL0);	
800074a0:	30 3c       	mov	r12,3
800074a2:	f0 1f 00 08 	mcall	800074c0 <init_sys_clocks+0x5c>
	/* put the clock out on PC19 so we can check to make sure we set it up correctly */
	//Note this code comes from ASF example AVR32 SCIF example 3
//16may15 seems to cause problems, leave out for now	scif_start_gclk(AVR32_SCIF_GCLK_GCLK0PIN, &gclkOpt);
//16may15 seems to cause problems, leave out for now	gpio_enable_module_pin(AVR32_SCIF_GCLK_0_1_PIN, AVR32_SCIF_GCLK_0_1_FUNCTION);

}
800074a6:	2f fd       	sub	sp,-4
800074a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800074ac:	80 00       	ld.sh	r0,r0[0x0]
800074ae:	65 f0       	ld.w	r0,r2[0x7c]
800074b0:	80 00       	ld.sh	r0,r0[0x0]
800074b2:	67 84       	ld.w	r4,r3[0x60]
800074b4:	80 00       	ld.sh	r0,r0[0x0]
800074b6:	5b 8c       	cp.w	r12,-8
800074b8:	80 00       	ld.sh	r0,r0[0x0]
800074ba:	5c 9c       	brev	r12
800074bc:	80 00       	ld.sh	r0,r0[0x0]
800074be:	68 94       	ld.w	r4,r4[0x24]
800074c0:	80 00       	ld.sh	r0,r0[0x0]
800074c2:	5d 9c       	*unknown*

800074c4 <adc_process_init>:
 *
 *
 */
void adc_process_init(void);
void adc_process_init(void)
{
800074c4:	eb cd 40 80 	pushm	r7,lr
800074c8:	1a 97       	mov	r7,sp
		{INPUT3_ADC_PIN, INPUT3_ADC_FUNCTION},
		{INPUT4_ADC_PIN, INPUT4_ADC_FUNCTION}
	};

	// Assign and enable GPIO pins to the ADC function.
	gpio_enable_module(ADCIFA_GPIO_MAP,
800074ca:	30 6b       	mov	r11,6
800074cc:	48 bc       	lddpc	r12,800074f8 <adc_process_init+0x34>
800074ce:	f0 1f 00 0c 	mcall	800074fc <adc_process_init+0x38>
			sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));

	// Get ADCIFA Factory Configuration
	adcifa_get_calibration_data(adcifa, &adc_config_t);
800074d2:	48 c8       	lddpc	r8,80007500 <adc_process_init+0x3c>
800074d4:	70 08       	ld.w	r8,r8[0x0]
800074d6:	48 cb       	lddpc	r11,80007504 <adc_process_init+0x40>
800074d8:	10 9c       	mov	r12,r8
800074da:	f0 1f 00 0c 	mcall	80007508 <adc_process_init+0x44>

	// Configure ADCIFA core
	adcifa_configure(adcifa, &adc_config_t, EC_CPU_CLOCK_FREQ);
800074de:	48 98       	lddpc	r8,80007500 <adc_process_init+0x3c>
800074e0:	70 08       	ld.w	r8,r8[0x0]
800074e2:	e0 6a 12 00 	mov	r10,4608
800074e6:	ea 1a 00 7a 	orh	r10,0x7a
800074ea:	48 7b       	lddpc	r11,80007504 <adc_process_init+0x40>
800074ec:	10 9c       	mov	r12,r8
800074ee:	f0 1f 00 08 	mcall	8000750c <adc_process_init+0x48>

}
800074f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800074f6:	00 00       	add	r0,r0
800074f8:	80 00       	ld.sh	r0,r0[0x0]
800074fa:	b4 20       	st.h	r10[0x4],r0
800074fc:	80 00       	ld.sh	r0,r0[0x0]
800074fe:	45 3c       	lddsp	r12,sp[0x14c]
80007500:	00 00       	add	r0,r0
80007502:	00 ac       	st.w	r0++,r12
80007504:	00 00       	add	r0,r0
80007506:	00 84       	andn	r4,r0
80007508:	80 00       	ld.sh	r0,r0[0x0]
8000750a:	33 84       	mov	r4,56
8000750c:	80 00       	ld.sh	r0,r0[0x0]
8000750e:	34 18       	mov	r8,65

80007510 <twi_init>:
 *
 *
 */
static void twi_init(void);
static void twi_init(void)
{
80007510:	eb cd 40 80 	pushm	r7,lr
80007514:	1a 97       	mov	r7,sp
80007516:	20 8d       	sub	sp,32
	const gpio_map_t PCA9952_TWI_GPIO_MAP = {
		{PCA9952_TWI_SCL_PIN, PCA9952_TWI_SCL_FUNCTION},
		{PCA9952_TWI_SDA_PIN, PCA9952_TWI_SDA_FUNCTION}
	};
80007518:	49 a9       	lddpc	r9,80007580 <twi_init+0x70>
8000751a:	ee c8 00 10 	sub	r8,r7,16
8000751e:	20 08       	sub	r8,0
80007520:	20 09       	sub	r9,0
80007522:	72 0a       	ld.w	r10,r9[0x0]
80007524:	91 0a       	st.w	r8[0x0],r10
80007526:	72 1a       	ld.w	r10,r9[0x4]
80007528:	91 1a       	st.w	r8[0x4],r10
8000752a:	72 2a       	ld.w	r10,r9[0x8]
8000752c:	91 2a       	st.w	r8[0x8],r10
8000752e:	72 39       	ld.w	r9,r9[0xc]
80007530:	91 39       	st.w	r8[0xc],r9
	twi_options_t PCA9952_TWI_OPTIONS = { //7apr15 make this *not* a const so we can change it and rerun twi_master_init() if necessary
		.pba_hz = FPBA_HZ,
		.speed = PCA9952_TWI_MASTER_SPEED,
		.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS, //7apr15
		.smbus        = false,
	};
80007532:	49 59       	lddpc	r9,80007584 <twi_init+0x74>
80007534:	ee c8 00 20 	sub	r8,r7,32
80007538:	20 08       	sub	r8,0
8000753a:	20 09       	sub	r9,0
8000753c:	72 0a       	ld.w	r10,r9[0x0]
8000753e:	91 0a       	st.w	r8[0x0],r10
80007540:	72 1a       	ld.w	r10,r9[0x4]
80007542:	91 1a       	st.w	r8[0x4],r10
80007544:	72 2a       	ld.w	r10,r9[0x8]
80007546:	91 2a       	st.w	r8[0x8],r10
80007548:	72 39       	ld.w	r9,r9[0xc]
8000754a:	91 39       	st.w	r8[0xc],r9

	// Assign I/Os to TWI.
	gpio_enable_module(PCA9952_TWI_GPIO_MAP,
8000754c:	ee c8 00 10 	sub	r8,r7,16
80007550:	30 2b       	mov	r11,2
80007552:	10 9c       	mov	r12,r8
80007554:	f0 1f 00 0d 	mcall	80007588 <twi_init+0x78>
	sizeof(PCA9952_TWI_GPIO_MAP) / sizeof(PCA9952_TWI_GPIO_MAP[0]));
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
80007558:	ee c8 00 20 	sub	r8,r7,32
8000755c:	10 9b       	mov	r11,r8
8000755e:	fe 7c 38 00 	mov	r12,-51200
80007562:	f0 1f 00 0b 	mcall	8000758c <twi_init+0x7c>
	
	
	PCA9952_TWI_OPTIONS.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80007566:	36 18       	mov	r8,97
80007568:	ef 48 ff e8 	st.w	r7[-24],r8
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
8000756c:	ee c8 00 20 	sub	r8,r7,32
80007570:	10 9b       	mov	r11,r8
80007572:	fe 7c 38 00 	mov	r12,-51200
80007576:	f0 1f 00 06 	mcall	8000758c <twi_init+0x7c>
	
	
}
8000757a:	2f 8d       	sub	sp,-32
8000757c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007580:	80 00       	ld.sh	r0,r0[0x0]
80007582:	b4 00       	st.h	r10[0x0],r0
80007584:	80 00       	ld.sh	r0,r0[0x0]
80007586:	b4 10       	st.h	r10[0x2],r0
80007588:	80 00       	ld.sh	r0,r0[0x0]
8000758a:	45 3c       	lddsp	r12,sp[0x14c]
8000758c:	80 00       	ld.sh	r0,r0[0x0]
8000758e:	50 00       	stdsp	sp[0x0],r0

80007590 <calc_sanitize_time>:
	STATE_SHUTDOWN_PROCESSES
};

unsigned char calc_sanitize_time(unsigned char shelfIdx);
unsigned char calc_sanitize_time(unsigned char shelfIdx)
{
80007590:	eb cd 40 80 	pushm	r7,lr
80007594:	1a 97       	mov	r7,sp
80007596:	20 3d       	sub	sp,12
80007598:	18 98       	mov	r8,r12
8000759a:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char uSideMinutes, lSideMinutes, minutes, boardIdx, sideIdx;
	
	boardIdx = shelf[shelfIdx].tLedIdx;							//top board in the shelf
8000759e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800075a2:	4a da       	lddpc	r10,80007654 <calc_sanitize_time+0xc4>
800075a4:	12 98       	mov	r8,r9
800075a6:	a3 68       	lsl	r8,0x2
800075a8:	12 08       	add	r8,r9
800075aa:	f4 08 00 08 	add	r8,r10,r8
800075ae:	2f f8       	sub	r8,-1
800075b0:	11 88       	ld.ub	r8,r8[0x0]
800075b2:	ef 68 ff fe 	st.b	r7[-2],r8
	sideIdx = ledBrd[boardIdx].lSideIdx;						//lower side of the top board
800075b6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800075ba:	4a 8a       	lddpc	r10,80007658 <calc_sanitize_time+0xc8>
800075bc:	12 98       	mov	r8,r9
800075be:	a3 78       	lsl	r8,0x3
800075c0:	12 18       	sub	r8,r9
800075c2:	a1 78       	lsl	r8,0x1
800075c4:	f4 08 00 08 	add	r8,r10,r8
800075c8:	2f 58       	sub	r8,-11
800075ca:	11 88       	ld.ub	r8,r8[0x0]
800075cc:	ef 68 ff ff 	st.b	r7[-1],r8
	lSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
800075d0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800075d4:	4a 2a       	lddpc	r10,8000765c <calc_sanitize_time+0xcc>
800075d6:	12 98       	mov	r8,r9
800075d8:	a3 68       	lsl	r8,0x2
800075da:	12 08       	add	r8,r9
800075dc:	f4 08 00 08 	add	r8,r10,r8
800075e0:	11 88       	ld.ub	r8,r8[0x0]
800075e2:	ef 68 ff fc 	st.b	r7[-4],r8
	

	boardIdx = shelf[shelfIdx].bLedIdx;							//bottom board in the shelf					
800075e6:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800075ea:	49 ba       	lddpc	r10,80007654 <calc_sanitize_time+0xc4>
800075ec:	12 98       	mov	r8,r9
800075ee:	a3 68       	lsl	r8,0x2
800075f0:	12 08       	add	r8,r9
800075f2:	f4 08 00 08 	add	r8,r10,r8
800075f6:	2f e8       	sub	r8,-2
800075f8:	11 88       	ld.ub	r8,r8[0x0]
800075fa:	ef 68 ff fe 	st.b	r7[-2],r8
	sideIdx = ledBrd[boardIdx].uSideIdx;						//upper side of the bottom board
800075fe:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007602:	49 6a       	lddpc	r10,80007658 <calc_sanitize_time+0xc8>
80007604:	12 98       	mov	r8,r9
80007606:	a3 78       	lsl	r8,0x3
80007608:	12 18       	sub	r8,r9
8000760a:	a1 78       	lsl	r8,0x1
8000760c:	f4 08 00 08 	add	r8,r10,r8
80007610:	2f 68       	sub	r8,-10
80007612:	11 88       	ld.ub	r8,r8[0x0]
80007614:	ef 68 ff ff 	st.b	r7[-1],r8
	uSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
80007618:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000761c:	49 0a       	lddpc	r10,8000765c <calc_sanitize_time+0xcc>
8000761e:	12 98       	mov	r8,r9
80007620:	a3 68       	lsl	r8,0x2
80007622:	12 08       	add	r8,r9
80007624:	f4 08 00 08 	add	r8,r10,r8
80007628:	11 88       	ld.ub	r8,r8[0x0]
8000762a:	ef 68 ff fb 	st.b	r7[-5],r8

	minutes = (uSideMinutes >= lSideMinutes) ? uSideMinutes : lSideMinutes; //choose the sanitize time for the more worn-out leds
8000762e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007632:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007636:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8000763a:	f0 0a 18 00 	cp.b	r10,r8
8000763e:	f2 08 17 20 	movhs	r8,r9
80007642:	ef 68 ff fd 	st.b	r7[-3],r8
	
	return (minutes);
80007646:	ef 38 ff fd 	ld.ub	r8,r7[-3]
	
}
8000764a:	10 9c       	mov	r12,r8
8000764c:	2f dd       	sub	sp,-12
8000764e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007652:	00 00       	add	r0,r0
80007654:	00 00       	add	r0,r0
80007656:	03 38       	ld.ub	r8,r1++
80007658:	00 00       	add	r0,r0
8000765a:	02 f2       	st.b	--r1,r2
8000765c:	00 00       	add	r0,r0
8000765e:	0b 1c       	ld.sh	r12,r5++

80007660 <door_latch_open_kill_all_shelves>:


void door_latch_open_kill_all_shelves(void);
void door_latch_open_kill_all_shelves(void)
{
80007660:	eb cd 40 80 	pushm	r7,lr
80007664:	1a 97       	mov	r7,sp
	led_shelf(0, LED_OFF);
80007666:	30 0b       	mov	r11,0
80007668:	30 0c       	mov	r12,0
8000766a:	f0 1f 00 09 	mcall	8000768c <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(1, LED_OFF);
8000766e:	30 0b       	mov	r11,0
80007670:	30 1c       	mov	r12,1
80007672:	f0 1f 00 07 	mcall	8000768c <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(2, LED_OFF);
80007676:	30 0b       	mov	r11,0
80007678:	30 2c       	mov	r12,2
8000767a:	f0 1f 00 05 	mcall	8000768c <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(3, LED_OFF);
8000767e:	30 0b       	mov	r11,0
80007680:	30 3c       	mov	r12,3
80007682:	f0 1f 00 03 	mcall	8000768c <door_latch_open_kill_all_shelves+0x2c>
}
80007686:	e3 cd 80 80 	ldm	sp++,r7,pc
8000768a:	00 00       	add	r0,r0
8000768c:	80 00       	ld.sh	r0,r0[0x0]
8000768e:	62 f8       	ld.w	r8,r1[0x3c]

80007690 <usage_idx>:

#define STRINGS_MATCH 0

unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn);
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn)
{
80007690:	eb cd 40 80 	pushm	r7,lr
80007694:	1a 97       	mov	r7,sp
80007696:	20 5d       	sub	sp,20
80007698:	18 99       	mov	r9,r12
8000769a:	ef 4b ff f0 	st.w	r7[-16],r11
8000769e:	14 98       	mov	r8,r10
800076a0:	ef 69 ff f4 	st.b	r7[-12],r9
800076a4:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char tmpBoardId[6];
	
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800076a8:	30 08       	mov	r8,0
800076aa:	ef 68 ff ff 	st.b	r7[-1],r8
800076ae:	cf b8       	rjmp	800078a4 <usage_idx+0x214>
		if ((strncmp((char*)idPtr, (char*)(&usageShdw[sel].u[i].id[0]),6)) && (usageShdw[sel].u[i].top_botn == top_botn) == STRINGS_MATCH)
		{
			return (i); //Found a match!
		}
#endif
		if (usageShdw[sel].u[i].slotFilled)
800076b0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800076b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800076b8:	fe fb 02 08 	ld.w	r11,pc[520]
800076bc:	12 98       	mov	r8,r9
800076be:	a3 68       	lsl	r8,0x2
800076c0:	12 08       	add	r8,r9
800076c2:	a1 78       	lsl	r8,0x1
800076c4:	14 99       	mov	r9,r10
800076c6:	a5 79       	lsl	r9,0x5
800076c8:	14 19       	sub	r9,r10
800076ca:	f2 0a 15 05 	lsl	r10,r9,0x5
800076ce:	12 1a       	sub	r10,r9
800076d0:	14 08       	add	r8,r10
800076d2:	f6 08 00 08 	add	r8,r11,r8
800076d6:	2f c8       	sub	r8,-4
800076d8:	11 a8       	ld.ub	r8,r8[0x2]
800076da:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800076de:	5c 58       	castu.b	r8
800076e0:	e0 80 00 dd 	breq	8000789a <usage_idx+0x20a>
		{
			tmpBoardId[0] = *(idPtr+0);
800076e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800076e8:	11 88       	ld.ub	r8,r8[0x0]
800076ea:	ef 68 ff f8 	st.b	r7[-8],r8
			tmpBoardId[1] = *(idPtr+1);
800076ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800076f2:	2f f8       	sub	r8,-1
800076f4:	11 88       	ld.ub	r8,r8[0x0]
800076f6:	ef 68 ff f9 	st.b	r7[-7],r8
			tmpBoardId[2] = *(idPtr+2);
800076fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800076fe:	2f e8       	sub	r8,-2
80007700:	11 88       	ld.ub	r8,r8[0x0]
80007702:	ef 68 ff fa 	st.b	r7[-6],r8
			tmpBoardId[3] = *(idPtr+3);
80007706:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000770a:	2f d8       	sub	r8,-3
8000770c:	11 88       	ld.ub	r8,r8[0x0]
8000770e:	ef 68 ff fb 	st.b	r7[-5],r8
			tmpBoardId[4] = *(idPtr+4);
80007712:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007716:	2f c8       	sub	r8,-4
80007718:	11 88       	ld.ub	r8,r8[0x0]
8000771a:	ef 68 ff fc 	st.b	r7[-4],r8
			tmpBoardId[5] = *(idPtr+5);
8000771e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007722:	2f b8       	sub	r8,-5
80007724:	11 88       	ld.ub	r8,r8[0x0]
80007726:	ef 68 ff fd 	st.b	r7[-3],r8
			
		
			if (tmpBoardId[0] == usageShdw[sel].u[i].id[0]) {
8000772a:	ef 3b ff f8 	ld.ub	r11,r7[-8]
8000772e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007732:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007736:	4e 3c       	lddpc	r12,800078c0 <usage_idx+0x230>
80007738:	12 98       	mov	r8,r9
8000773a:	a3 68       	lsl	r8,0x2
8000773c:	12 08       	add	r8,r9
8000773e:	a1 78       	lsl	r8,0x1
80007740:	14 99       	mov	r9,r10
80007742:	a5 79       	lsl	r9,0x5
80007744:	14 19       	sub	r9,r10
80007746:	f2 0a 15 05 	lsl	r10,r9,0x5
8000774a:	12 1a       	sub	r10,r9
8000774c:	14 08       	add	r8,r10
8000774e:	f8 08 00 08 	add	r8,r12,r8
80007752:	11 88       	ld.ub	r8,r8[0x0]
80007754:	f0 0b 18 00 	cp.b	r11,r8
80007758:	e0 81 00 a1 	brne	8000789a <usage_idx+0x20a>
				if (tmpBoardId[1] == usageShdw[sel].u[i].id[1]) {
8000775c:	ef 3b ff f9 	ld.ub	r11,r7[-7]
80007760:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007764:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007768:	4d 6c       	lddpc	r12,800078c0 <usage_idx+0x230>
8000776a:	12 98       	mov	r8,r9
8000776c:	a3 68       	lsl	r8,0x2
8000776e:	12 08       	add	r8,r9
80007770:	a1 78       	lsl	r8,0x1
80007772:	14 99       	mov	r9,r10
80007774:	a5 79       	lsl	r9,0x5
80007776:	14 19       	sub	r9,r10
80007778:	f2 0a 15 05 	lsl	r10,r9,0x5
8000777c:	12 1a       	sub	r10,r9
8000777e:	14 08       	add	r8,r10
80007780:	f8 08 00 08 	add	r8,r12,r8
80007784:	2f f8       	sub	r8,-1
80007786:	11 88       	ld.ub	r8,r8[0x0]
80007788:	f0 0b 18 00 	cp.b	r11,r8
8000778c:	e0 81 00 87 	brne	8000789a <usage_idx+0x20a>
					if (tmpBoardId[2] == usageShdw[sel].u[i].id[2]) {
80007790:	ef 3b ff fa 	ld.ub	r11,r7[-6]
80007794:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80007798:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000779c:	4c 9c       	lddpc	r12,800078c0 <usage_idx+0x230>
8000779e:	14 98       	mov	r8,r10
800077a0:	a3 68       	lsl	r8,0x2
800077a2:	14 08       	add	r8,r10
800077a4:	2f f8       	sub	r8,-1
800077a6:	f0 0a 15 01 	lsl	r10,r8,0x1
800077aa:	12 98       	mov	r8,r9
800077ac:	a5 78       	lsl	r8,0x5
800077ae:	12 18       	sub	r8,r9
800077b0:	f0 09 15 05 	lsl	r9,r8,0x5
800077b4:	10 19       	sub	r9,r8
800077b6:	f4 09 00 08 	add	r8,r10,r9
800077ba:	f8 08 00 08 	add	r8,r12,r8
800077be:	11 88       	ld.ub	r8,r8[0x0]
800077c0:	f0 0b 18 00 	cp.b	r11,r8
800077c4:	c6 b1       	brne	8000789a <usage_idx+0x20a>
						if (tmpBoardId[3] == usageShdw[sel].u[i].id[3]) {
800077c6:	ef 3b ff fb 	ld.ub	r11,r7[-5]
800077ca:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800077ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800077d2:	4b cc       	lddpc	r12,800078c0 <usage_idx+0x230>
800077d4:	12 98       	mov	r8,r9
800077d6:	a3 68       	lsl	r8,0x2
800077d8:	12 08       	add	r8,r9
800077da:	a1 78       	lsl	r8,0x1
800077dc:	14 99       	mov	r9,r10
800077de:	a5 79       	lsl	r9,0x5
800077e0:	14 19       	sub	r9,r10
800077e2:	f2 0a 15 05 	lsl	r10,r9,0x5
800077e6:	12 1a       	sub	r10,r9
800077e8:	14 08       	add	r8,r10
800077ea:	f8 08 00 08 	add	r8,r12,r8
800077ee:	2f d8       	sub	r8,-3
800077f0:	11 88       	ld.ub	r8,r8[0x0]
800077f2:	f0 0b 18 00 	cp.b	r11,r8
800077f6:	c5 21       	brne	8000789a <usage_idx+0x20a>
							if (tmpBoardId[4] == usageShdw[sel].u[i].id[4]) {
800077f8:	ef 3b ff fc 	ld.ub	r11,r7[-4]
800077fc:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007800:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007804:	4a fc       	lddpc	r12,800078c0 <usage_idx+0x230>
80007806:	12 98       	mov	r8,r9
80007808:	a3 68       	lsl	r8,0x2
8000780a:	12 08       	add	r8,r9
8000780c:	a1 78       	lsl	r8,0x1
8000780e:	14 99       	mov	r9,r10
80007810:	a5 79       	lsl	r9,0x5
80007812:	14 19       	sub	r9,r10
80007814:	f2 0a 15 05 	lsl	r10,r9,0x5
80007818:	12 1a       	sub	r10,r9
8000781a:	14 08       	add	r8,r10
8000781c:	f8 08 00 08 	add	r8,r12,r8
80007820:	2f c8       	sub	r8,-4
80007822:	11 88       	ld.ub	r8,r8[0x0]
80007824:	f0 0b 18 00 	cp.b	r11,r8
80007828:	c3 91       	brne	8000789a <usage_idx+0x20a>
								if (tmpBoardId[5] == usageShdw[sel].u[i].id[5]) {
8000782a:	ef 3b ff fd 	ld.ub	r11,r7[-3]
8000782e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007832:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007836:	4a 3c       	lddpc	r12,800078c0 <usage_idx+0x230>
80007838:	12 98       	mov	r8,r9
8000783a:	a3 68       	lsl	r8,0x2
8000783c:	12 08       	add	r8,r9
8000783e:	a1 78       	lsl	r8,0x1
80007840:	14 99       	mov	r9,r10
80007842:	a5 79       	lsl	r9,0x5
80007844:	14 19       	sub	r9,r10
80007846:	f2 0a 15 05 	lsl	r10,r9,0x5
8000784a:	12 1a       	sub	r10,r9
8000784c:	14 08       	add	r8,r10
8000784e:	f8 08 00 08 	add	r8,r12,r8
80007852:	2f b8       	sub	r8,-5
80007854:	11 88       	ld.ub	r8,r8[0x0]
80007856:	f0 0b 18 00 	cp.b	r11,r8
8000785a:	c2 01       	brne	8000789a <usage_idx+0x20a>
									if (top_botn == usageShdw[sel].u[i].top_botn)
8000785c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007860:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007864:	49 7b       	lddpc	r11,800078c0 <usage_idx+0x230>
80007866:	12 98       	mov	r8,r9
80007868:	a3 68       	lsl	r8,0x2
8000786a:	12 08       	add	r8,r9
8000786c:	a1 78       	lsl	r8,0x1
8000786e:	14 99       	mov	r9,r10
80007870:	a5 79       	lsl	r9,0x5
80007872:	14 19       	sub	r9,r10
80007874:	f2 0a 15 05 	lsl	r10,r9,0x5
80007878:	12 1a       	sub	r10,r9
8000787a:	14 08       	add	r8,r10
8000787c:	f6 08 00 08 	add	r8,r11,r8
80007880:	2f c8       	sub	r8,-4
80007882:	11 a8       	ld.ub	r8,r8[0x2]
80007884:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80007888:	5c 58       	castu.b	r8
8000788a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000788e:	f0 09 18 00 	cp.b	r9,r8
80007892:	c0 41       	brne	8000789a <usage_idx+0x20a>
									{
										return (i); //found a match!
80007894:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007898:	c0 f8       	rjmp	800078b6 <usage_idx+0x226>
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn);
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn)
{
	unsigned char tmpBoardId[6];
	
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
8000789a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000789e:	2f f8       	sub	r8,-1
800078a0:	ef 68 ff ff 	st.b	r7[-1],r8
800078a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800078a8:	35 f8       	mov	r8,95
800078aa:	f0 09 18 00 	cp.b	r9,r8
800078ae:	fe 98 ff 01 	brls	800076b0 <usage_idx+0x20>
				} //tmpBoardId[1]
			} //tmpBoardId[0]
		} //if slotFilled (don't check against slots that haven't been assigned
	} //for each slot in usageShdw[sel]
	
	return NO_LED_BOARD_PRESENT; //no match found
800078b2:	e0 68 00 ff 	mov	r8,255
}
800078b6:	10 9c       	mov	r12,r8
800078b8:	2f bd       	sub	sp,-20
800078ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800078be:	00 00       	add	r0,r0
800078c0:	00 00       	add	r0,r0
800078c2:	03 80       	ld.ub	r0,r1[0x0]

800078c4 <load_usage_indeces>:

void load_usage_indeces(unsigned char sel)
{
800078c4:	eb cd 40 e0 	pushm	r5-r7,lr
800078c8:	1a 97       	mov	r7,sp
800078ca:	20 3d       	sub	sp,12
800078cc:	18 98       	mov	r8,r12
800078ce:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char top_botn, brdIdx;
		
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
800078d2:	30 08       	mov	r8,0
800078d4:	ef 48 ff fc 	st.w	r7[-4],r8
800078d8:	c5 58       	rjmp	80007982 <load_usage_indeces+0xbe>
	{
		brdIdx = ledBrdSide[i].boardIdx;
800078da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800078de:	4a ea       	lddpc	r10,80007994 <load_usage_indeces+0xd0>
800078e0:	12 98       	mov	r8,r9
800078e2:	a3 68       	lsl	r8,0x2
800078e4:	12 08       	add	r8,r9
800078e6:	f4 08 00 08 	add	r8,r10,r8
800078ea:	2f c8       	sub	r8,-4
800078ec:	11 88       	ld.ub	r8,r8[0x0]
800078ee:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[brdIdx].present)
800078f2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800078f6:	4a 9a       	lddpc	r10,80007998 <load_usage_indeces+0xd4>
800078f8:	12 98       	mov	r8,r9
800078fa:	a3 78       	lsl	r8,0x3
800078fc:	12 18       	sub	r8,r9
800078fe:	a1 78       	lsl	r8,0x1
80007900:	f4 08 00 08 	add	r8,r10,r8
80007904:	2f 88       	sub	r8,-8
80007906:	11 88       	ld.ub	r8,r8[0x0]
80007908:	58 08       	cp.w	r8,0
8000790a:	c2 c0       	breq	80007962 <load_usage_indeces+0x9e>
		{
			top_botn = i%2;
8000790c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007910:	f2 08 14 1f 	asr	r8,r9,0x1f
80007914:	bf 98       	lsr	r8,0x1f
80007916:	10 09       	add	r9,r8
80007918:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000791c:	f2 08 01 08 	sub	r8,r9,r8
80007920:	ef 68 ff fa 	st.b	r7[-6],r8
			
			usageIdx[sel][i] = usage_idx(sel, &ledBrd[brdIdx].id[0], top_botn); //TODO: should change this nomenclature to upper/lower, we are talking about board sides here, not which board in the shelf, be consistent
80007924:	ef 35 ff f4 	ld.ub	r5,r7[-12]
80007928:	ee f6 ff fc 	ld.w	r6,r7[-4]
8000792c:	ef 3a ff fa 	ld.ub	r10,r7[-6]
80007930:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007934:	12 98       	mov	r8,r9
80007936:	a3 78       	lsl	r8,0x3
80007938:	12 18       	sub	r8,r9
8000793a:	a1 78       	lsl	r8,0x1
8000793c:	49 79       	lddpc	r9,80007998 <load_usage_indeces+0xd4>
8000793e:	12 08       	add	r8,r9
80007940:	f0 c9 ff ff 	sub	r9,r8,-1
80007944:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007948:	12 9b       	mov	r11,r9
8000794a:	10 9c       	mov	r12,r8
8000794c:	f0 1f 00 14 	mcall	8000799c <load_usage_indeces+0xd8>
80007950:	18 98       	mov	r8,r12
80007952:	49 4a       	lddpc	r10,800079a0 <load_usage_indeces+0xdc>
80007954:	ea 09 15 03 	lsl	r9,r5,0x3
80007958:	0c 09       	add	r9,r6
8000795a:	f4 09 00 09 	add	r9,r10,r9
8000795e:	b2 88       	st.b	r9[0x0],r8
80007960:	c0 c8       	rjmp	80007978 <load_usage_indeces+0xb4>
		}
		else
		{
			usageIdx[sel][i] = NO_LED_BOARD_PRESENT;
80007962:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007966:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000796a:	48 e9       	lddpc	r9,800079a0 <load_usage_indeces+0xdc>
8000796c:	a3 7a       	lsl	r10,0x3
8000796e:	f4 08 00 08 	add	r8,r10,r8
80007972:	10 09       	add	r9,r8
80007974:	3f f8       	mov	r8,-1
80007976:	b2 88       	st.b	r9[0x0],r8

void load_usage_indeces(unsigned char sel)
{
	unsigned char top_botn, brdIdx;
		
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80007978:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000797c:	2f f8       	sub	r8,-1
8000797e:	ef 48 ff fc 	st.w	r7[-4],r8
80007982:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007986:	58 78       	cp.w	r8,7
80007988:	fe 9a ff a9 	brle	800078da <load_usage_indeces+0x16>
		else
		{
			usageIdx[sel][i] = NO_LED_BOARD_PRESENT;
		}
	}
}
8000798c:	2f dd       	sub	sp,-12
8000798e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007992:	00 00       	add	r0,r0
80007994:	00 00       	add	r0,r0
80007996:	0b 1c       	ld.sh	r12,r5++
80007998:	00 00       	add	r0,r0
8000799a:	02 f2       	st.b	--r1,r2
8000799c:	80 00       	ld.sh	r0,r0[0x0]
8000799e:	76 90       	ld.w	r0,r11[0x24]
800079a0:	00 00       	add	r0,r0
800079a2:	03 64       	ld.uh	r4,--r1

800079a4 <read_usage_struct>:

enum{CHECKSUM_INVALID, CHECKSUM_VALID};

unsigned char read_usage_struct(unsigned char sel)
{
800079a4:	eb cd 40 80 	pushm	r7,lr
800079a8:	1a 97       	mov	r7,sp
800079aa:	20 2d       	sub	sp,8
800079ac:	18 98       	mov	r8,r12
800079ae:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char tmpCsum;
	
	if (sel == 0)
800079b2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800079b6:	30 08       	mov	r8,0
800079b8:	f0 09 18 00 	cp.b	r9,r8
800079bc:	c0 81       	brne	800079cc <read_usage_struct+0x28>
	{
		memcpy(&usageShdw[0],serialIdAndUsageFlashZero, sizeof(usageShdw[0]));
800079be:	e0 6a 03 c1 	mov	r10,961
800079c2:	49 9b       	lddpc	r11,80007a24 <read_usage_struct+0x80>
800079c4:	49 9c       	lddpc	r12,80007a28 <read_usage_struct+0x84>
800079c6:	f0 1f 00 1a 	mcall	80007a2c <read_usage_struct+0x88>
800079ca:	c0 a8       	rjmp	800079de <read_usage_struct+0x3a>
	}
	else
	{
		memcpy(&usageShdw[1],serialIdAndUsageFlashOne, sizeof(usageShdw[1]));
800079cc:	49 78       	lddpc	r8,80007a28 <read_usage_struct+0x84>
800079ce:	f0 c8 fc 3f 	sub	r8,r8,-961
800079d2:	e0 6a 03 c1 	mov	r10,961
800079d6:	49 7b       	lddpc	r11,80007a30 <read_usage_struct+0x8c>
800079d8:	10 9c       	mov	r12,r8
800079da:	f0 1f 00 15 	mcall	80007a2c <read_usage_struct+0x88>
	}
	
	tmpCsum = calc_usage_csum(sel);
800079de:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800079e2:	10 9c       	mov	r12,r8
800079e4:	f0 1f 00 14 	mcall	80007a34 <read_usage_struct+0x90>
800079e8:	18 98       	mov	r8,r12
800079ea:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (tmpCsum == usageShdw[sel].csum)
800079ee:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800079f2:	48 ea       	lddpc	r10,80007a28 <read_usage_struct+0x84>
800079f4:	12 98       	mov	r8,r9
800079f6:	a5 78       	lsl	r8,0x5
800079f8:	12 18       	sub	r8,r9
800079fa:	f0 09 15 05 	lsl	r9,r8,0x5
800079fe:	10 19       	sub	r9,r8
80007a00:	f4 09 00 08 	add	r8,r10,r9
80007a04:	f0 c8 fc 40 	sub	r8,r8,-960
80007a08:	11 88       	ld.ub	r8,r8[0x0]
80007a0a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a0e:	f0 09 18 00 	cp.b	r9,r8
80007a12:	c0 31       	brne	80007a18 <read_usage_struct+0x74>
	{
		return CHECKSUM_VALID;
80007a14:	30 18       	mov	r8,1
80007a16:	c0 28       	rjmp	80007a1a <read_usage_struct+0x76>
	}
	else
	{
		return CHECKSUM_INVALID;
80007a18:	30 08       	mov	r8,0
	}
}
80007a1a:	10 9c       	mov	r12,r8
80007a1c:	2f ed       	sub	sp,-8
80007a1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007a22:	00 00       	add	r0,r0
80007a24:	80 07       	ld.sh	r7,r0[0x0]
80007a26:	f0 00 00 00 	add	r0,r8,r0
80007a2a:	03 80       	ld.ub	r0,r1[0x0]
80007a2c:	80 00       	ld.sh	r0,r0[0x0]
80007a2e:	ac c6       	st.b	r6[0x4],r6
80007a30:	80 07       	ld.sh	r7,r0[0x0]
80007a32:	f8 00       	*unknown*
80007a34:	80 00       	ld.sh	r0,r0[0x0]
80007a36:	7d 24       	ld.w	r4,lr[0x48]

80007a38 <test_flash>:

enum {SUCCESS, ERROR};

unsigned char test_flash(unsigned char sel)
{
80007a38:	eb cd 40 80 	pushm	r7,lr
80007a3c:	1a 97       	mov	r7,sp
80007a3e:	20 8d       	sub	sp,32
80007a40:	18 98       	mov	r8,r12
80007a42:	ef 68 ff e0 	st.b	r7[-32],r8
	volatile void* memPtr;
	unsigned char pattern[4] = {0xFF, 0x00, 0xAA, 0x55}, ubyte;
80007a46:	4b 28       	lddpc	r8,80007b0c <test_flash+0xd4>
80007a48:	70 08       	ld.w	r8,r8[0x0]
80007a4a:	ef 48 ff e4 	st.w	r7[-28],r8
	unsigned char *ubPtr;
	unsigned long memSize;
	
	memSize = sizeof(usageShdw[sel]);
80007a4e:	e0 68 03 c1 	mov	r8,961
80007a52:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (sel == 0)
80007a56:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80007a5a:	30 08       	mov	r8,0
80007a5c:	f0 09 18 00 	cp.b	r9,r8
80007a60:	c0 51       	brne	80007a6a <test_flash+0x32>
	{
		memPtr = &serialIdAndUsageFlashZero;
80007a62:	4a c8       	lddpc	r8,80007b10 <test_flash+0xd8>
80007a64:	ef 48 ff e8 	st.w	r7[-24],r8
80007a68:	c0 48       	rjmp	80007a70 <test_flash+0x38>
	}
	else
	{
		memPtr = &serialIdAndUsageFlashOne;
80007a6a:	4a b8       	lddpc	r8,80007b14 <test_flash+0xdc>
80007a6c:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
80007a70:	30 08       	mov	r8,0
80007a72:	ef 68 ff fb 	st.b	r7[-5],r8
80007a76:	c3 e8       	rjmp	80007af2 <test_flash+0xba>
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
80007a78:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007a7c:	ee 08 00 08 	add	r8,r7,r8
80007a80:	f1 38 ff e4 	ld.ub	r8,r8[-28]
80007a84:	30 19       	mov	r9,1
80007a86:	ee fa ff f4 	ld.w	r10,r7[-12]
80007a8a:	10 9b       	mov	r11,r8
80007a8c:	ee fc ff e8 	ld.w	r12,r7[-24]
80007a90:	f0 1f 00 22 	mcall	80007b18 <test_flash+0xe0>
	
		ubPtr = (unsigned char*) memPtr;
80007a94:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007a98:	ef 48 ff f0 	st.w	r7[-16],r8
		for (unsigned long j=0; j<memSize; j++)
80007a9c:	30 08       	mov	r8,0
80007a9e:	ef 48 ff fc 	st.w	r7[-4],r8
80007aa2:	c1 d8       	rjmp	80007adc <test_flash+0xa4>
		{
			ubyte = (*ubPtr);
80007aa4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007aa8:	11 88       	ld.ub	r8,r8[0x0]
80007aaa:	ef 68 ff ef 	st.b	r7[-17],r8
			if (ubyte != pattern[i])
80007aae:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007ab2:	ee 08 00 08 	add	r8,r7,r8
80007ab6:	f1 38 ff e4 	ld.ub	r8,r8[-28]
80007aba:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007abe:	f0 09 18 00 	cp.b	r9,r8
80007ac2:	c0 30       	breq	80007ac8 <test_flash+0x90>
			{
				return ERROR;
80007ac4:	30 18       	mov	r8,1
80007ac6:	c1 e8       	rjmp	80007b02 <test_flash+0xca>
			}
			ubPtr++;
80007ac8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007acc:	2f f8       	sub	r8,-1
80007ace:	ef 48 ff f0 	st.w	r7[-16],r8
	for (unsigned char i=0; i<4; i++) //4 patterns to test
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
	
		ubPtr = (unsigned char*) memPtr;
		for (unsigned long j=0; j<memSize; j++)
80007ad2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007ad6:	2f f8       	sub	r8,-1
80007ad8:	ef 48 ff fc 	st.w	r7[-4],r8
80007adc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007ae0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007ae4:	10 39       	cp.w	r9,r8
80007ae6:	cd f3       	brcs	80007aa4 <test_flash+0x6c>
	else
	{
		memPtr = &serialIdAndUsageFlashOne;
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
80007ae8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007aec:	2f f8       	sub	r8,-1
80007aee:	ef 68 ff fb 	st.b	r7[-5],r8
80007af2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007af6:	30 38       	mov	r8,3
80007af8:	f0 09 18 00 	cp.b	r9,r8
80007afc:	fe 98 ff be 	brls	80007a78 <test_flash+0x40>
			}
			ubPtr++;
		}
	}
	
	return SUCCESS;
80007b00:	30 08       	mov	r8,0
}
80007b02:	10 9c       	mov	r12,r8
80007b04:	2f 8d       	sub	sp,-32
80007b06:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b0a:	00 00       	add	r0,r0
80007b0c:	80 00       	ld.sh	r0,r0[0x0]
80007b0e:	b3 fc       	*unknown*
80007b10:	80 07       	ld.sh	r7,r0[0x0]
80007b12:	f0 00       	*unknown*
80007b14:	80 07       	ld.sh	r7,r0[0x0]
80007b16:	f8 00       	*unknown*
80007b18:	80 00       	ld.sh	r0,r0[0x0]
80007b1a:	3e 64       	mov	r4,-26

80007b1c <find_first_open_usage_slot>:

#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(unsigned char sel);
unsigned char find_first_open_usage_slot(unsigned char sel)
{
80007b1c:	eb cd 40 80 	pushm	r7,lr
80007b20:	1a 97       	mov	r7,sp
80007b22:	20 2d       	sub	sp,8
80007b24:	18 98       	mov	r8,r12
80007b26:	ef 68 ff f8 	st.b	r7[-8],r8
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007b2a:	30 08       	mov	r8,0
80007b2c:	ef 48 ff fc 	st.w	r7[-4],r8
80007b30:	c2 28       	rjmp	80007b74 <find_first_open_usage_slot+0x58>
	{
		if (!usageShdw[sel].u[i].slotFilled)
80007b32:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007b36:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007b3a:	49 5b       	lddpc	r11,80007b8c <find_first_open_usage_slot+0x70>
80007b3c:	12 98       	mov	r8,r9
80007b3e:	a3 68       	lsl	r8,0x2
80007b40:	12 08       	add	r8,r9
80007b42:	a1 78       	lsl	r8,0x1
80007b44:	14 99       	mov	r9,r10
80007b46:	a5 79       	lsl	r9,0x5
80007b48:	14 19       	sub	r9,r10
80007b4a:	f2 0a 15 05 	lsl	r10,r9,0x5
80007b4e:	12 1a       	sub	r10,r9
80007b50:	14 08       	add	r8,r10
80007b52:	f6 08 00 08 	add	r8,r11,r8
80007b56:	2f c8       	sub	r8,-4
80007b58:	11 a8       	ld.ub	r8,r8[0x2]
80007b5a:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80007b5e:	5c 58       	castu.b	r8
80007b60:	c0 51       	brne	80007b6a <find_first_open_usage_slot+0x4e>
		{
			return i;
80007b62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007b66:	5c 58       	castu.b	r8
80007b68:	c0 e8       	rjmp	80007b84 <find_first_open_usage_slot+0x68>
#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(unsigned char sel);
unsigned char find_first_open_usage_slot(unsigned char sel)
{
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007b6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007b6e:	2f f8       	sub	r8,-1
80007b70:	ef 48 ff fc 	st.w	r7[-4],r8
80007b74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007b78:	e0 48 00 5f 	cp.w	r8,95
80007b7c:	fe 98 ff db 	brls	80007b32 <find_first_open_usage_slot+0x16>
		{
			return i;
		}
	}
	
	return USAGE_FULL; //Error, no open slots
80007b80:	e0 68 00 ff 	mov	r8,255
}
80007b84:	10 9c       	mov	r12,r8
80007b86:	2f ed       	sub	sp,-8
80007b88:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b8c:	00 00       	add	r0,r0
80007b8e:	03 80       	ld.ub	r0,r1[0x0]

80007b90 <add_new_led_board_sides_to_usage>:

void add_new_led_board_sides_to_usage(unsigned char sel)
{
80007b90:	eb cd 40 80 	pushm	r7,lr
80007b94:	1a 97       	mov	r7,sp
80007b96:	20 3d       	sub	sp,12
80007b98:	18 98       	mov	r8,r12
80007b9a:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char firstOpenSlot, slotAssignment, brdIdx, top_botn;
	
	//NOTE that load_usage_indeces() must have been run already for this function to work. 
	// i.e., usageIdx[][] must be populated.
	
	firstOpenSlot = find_first_open_usage_slot(sel);
80007b9e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007ba2:	10 9c       	mov	r12,r8
80007ba4:	f0 1f 00 5a 	mcall	80007d0c <add_new_led_board_sides_to_usage+0x17c>
80007ba8:	18 98       	mov	r8,r12
80007baa:	ef 68 ff fb 	st.b	r7[-5],r8
	
	slotAssignment = firstOpenSlot;
80007bae:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007bb2:	ef 68 ff fc 	st.b	r7[-4],r8
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
80007bb6:	30 08       	mov	r8,0
80007bb8:	ef 68 ff ff 	st.b	r7[-1],r8
80007bbc:	c9 d8       	rjmp	80007cf6 <add_new_led_board_sides_to_usage+0x166>
	{
		brdIdx = ledBrdSide[i].boardIdx;
80007bbe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007bc2:	4d 4a       	lddpc	r10,80007d10 <add_new_led_board_sides_to_usage+0x180>
80007bc4:	12 98       	mov	r8,r9
80007bc6:	a3 68       	lsl	r8,0x2
80007bc8:	12 08       	add	r8,r9
80007bca:	f4 08 00 08 	add	r8,r10,r8
80007bce:	2f c8       	sub	r8,-4
80007bd0:	11 88       	ld.ub	r8,r8[0x0]
80007bd2:	ef 68 ff fd 	st.b	r7[-3],r8
		
		top_botn = (i%2) ? TOP : BOTTOM; //odd sides are top, even sides are bottom
80007bd6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007bda:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007bde:	ef 68 ff fe 	st.b	r7[-2],r8
		
		if ((ledBrd[brdIdx].present) && (usageIdx[sel][i] == NO_LED_BOARD_PRESENT)) //TODO: do I need the NO_LED_BOARD_PRESENT check? this should always be open at this point
80007be2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80007be6:	4c ca       	lddpc	r10,80007d14 <add_new_led_board_sides_to_usage+0x184>
80007be8:	12 98       	mov	r8,r9
80007bea:	a3 78       	lsl	r8,0x3
80007bec:	12 18       	sub	r8,r9
80007bee:	a1 78       	lsl	r8,0x1
80007bf0:	f4 08 00 08 	add	r8,r10,r8
80007bf4:	2f 88       	sub	r8,-8
80007bf6:	11 88       	ld.ub	r8,r8[0x0]
80007bf8:	58 08       	cp.w	r8,0
80007bfa:	c7 90       	breq	80007cec <add_new_led_board_sides_to_usage+0x15c>
80007bfc:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007c00:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007c04:	4c 59       	lddpc	r9,80007d18 <add_new_led_board_sides_to_usage+0x188>
80007c06:	a3 7a       	lsl	r10,0x3
80007c08:	f4 08 00 08 	add	r8,r10,r8
80007c0c:	f2 08 00 08 	add	r8,r9,r8
80007c10:	11 89       	ld.ub	r9,r8[0x0]
80007c12:	3f f8       	mov	r8,-1
80007c14:	f0 09 18 00 	cp.b	r9,r8
80007c18:	c6 a1       	brne	80007cec <add_new_led_board_sides_to_usage+0x15c>
		{
			strncpy((char*)&usageShdw[sel].u[slotAssignment].id[0], (char*)&ledBrd[brdIdx].id[0],6);
80007c1a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80007c1e:	12 98       	mov	r8,r9
80007c20:	a3 78       	lsl	r8,0x3
80007c22:	12 18       	sub	r8,r9
80007c24:	a1 78       	lsl	r8,0x1
80007c26:	4b c9       	lddpc	r9,80007d14 <add_new_led_board_sides_to_usage+0x184>
80007c28:	12 08       	add	r8,r9
80007c2a:	f0 cb ff ff 	sub	r11,r8,-1
80007c2e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007c32:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c36:	12 98       	mov	r8,r9
80007c38:	a3 68       	lsl	r8,0x2
80007c3a:	12 08       	add	r8,r9
80007c3c:	a1 78       	lsl	r8,0x1
80007c3e:	14 99       	mov	r9,r10
80007c40:	a5 79       	lsl	r9,0x5
80007c42:	14 19       	sub	r9,r10
80007c44:	f2 0a 15 05 	lsl	r10,r9,0x5
80007c48:	12 1a       	sub	r10,r9
80007c4a:	f0 0a 00 09 	add	r9,r8,r10
80007c4e:	4b 48       	lddpc	r8,80007d1c <add_new_led_board_sides_to_usage+0x18c>
80007c50:	f2 08 00 08 	add	r8,r9,r8
80007c54:	30 6a       	mov	r10,6
80007c56:	10 9c       	mov	r12,r8
80007c58:	f0 1f 00 32 	mcall	80007d20 <add_new_led_board_sides_to_usage+0x190>
			
			usageShdw[sel].u[slotAssignment].top_botn = top_botn;
80007c5c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007c60:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c64:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007c68:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007c6c:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007c70:	4a bc       	lddpc	r12,80007d1c <add_new_led_board_sides_to_usage+0x18c>
80007c72:	12 98       	mov	r8,r9
80007c74:	a3 68       	lsl	r8,0x2
80007c76:	12 08       	add	r8,r9
80007c78:	a1 78       	lsl	r8,0x1
80007c7a:	14 99       	mov	r9,r10
80007c7c:	a5 79       	lsl	r9,0x5
80007c7e:	14 19       	sub	r9,r10
80007c80:	f2 0a 15 05 	lsl	r10,r9,0x5
80007c84:	12 1a       	sub	r10,r9
80007c86:	14 08       	add	r8,r10
80007c88:	f8 08 00 08 	add	r8,r12,r8
80007c8c:	f0 c9 ff fc 	sub	r9,r8,-4
80007c90:	13 a8       	ld.ub	r8,r9[0x2]
80007c92:	f1 db d0 c1 	bfins	r8,r11,0x6,0x1
80007c96:	b2 a8       	st.b	r9[0x2],r8
			
			usageShdw[sel].u[slotAssignment].slotFilled = 1;
80007c98:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007c9c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007ca0:	49 fb       	lddpc	r11,80007d1c <add_new_led_board_sides_to_usage+0x18c>
80007ca2:	12 98       	mov	r8,r9
80007ca4:	a3 68       	lsl	r8,0x2
80007ca6:	12 08       	add	r8,r9
80007ca8:	a1 78       	lsl	r8,0x1
80007caa:	14 99       	mov	r9,r10
80007cac:	a5 79       	lsl	r9,0x5
80007cae:	14 19       	sub	r9,r10
80007cb0:	f2 0a 15 05 	lsl	r10,r9,0x5
80007cb4:	12 1a       	sub	r10,r9
80007cb6:	14 08       	add	r8,r10
80007cb8:	f6 08 00 08 	add	r8,r11,r8
80007cbc:	f0 c9 ff fc 	sub	r9,r8,-4
80007cc0:	13 a8       	ld.ub	r8,r9[0x2]
80007cc2:	30 1a       	mov	r10,1
80007cc4:	f1 da d0 a1 	bfins	r8,r10,0x5,0x1
80007cc8:	b2 a8       	st.b	r9[0x2],r8

			usageIdx[sel][i] = slotAssignment++;
80007cca:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007cce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007cd2:	49 29       	lddpc	r9,80007d18 <add_new_led_board_sides_to_usage+0x188>
80007cd4:	a3 7a       	lsl	r10,0x3
80007cd6:	f4 08 00 08 	add	r8,r10,r8
80007cda:	10 09       	add	r9,r8
80007cdc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007ce0:	b2 88       	st.b	r9[0x0],r8
80007ce2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007ce6:	2f f8       	sub	r8,-1
80007ce8:	ef 68 ff fc 	st.b	r7[-4],r8
	
	firstOpenSlot = find_first_open_usage_slot(sel);
	
	slotAssignment = firstOpenSlot;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
80007cec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007cf0:	2f f8       	sub	r8,-1
80007cf2:	ef 68 ff ff 	st.b	r7[-1],r8
80007cf6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007cfa:	30 78       	mov	r8,7
80007cfc:	f0 09 18 00 	cp.b	r9,r8
80007d00:	fe 98 ff 5f 	brls	80007bbe <add_new_led_board_sides_to_usage+0x2e>
			usageShdw[sel].u[slotAssignment].slotFilled = 1;

			usageIdx[sel][i] = slotAssignment++;
		}
	}
}
80007d04:	2f dd       	sub	sp,-12
80007d06:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d0a:	00 00       	add	r0,r0
80007d0c:	80 00       	ld.sh	r0,r0[0x0]
80007d0e:	7b 1c       	ld.w	r12,sp[0x44]
80007d10:	00 00       	add	r0,r0
80007d12:	0b 1c       	ld.sh	r12,r5++
80007d14:	00 00       	add	r0,r0
80007d16:	02 f2       	st.b	--r1,r2
80007d18:	00 00       	add	r0,r0
80007d1a:	03 64       	ld.uh	r4,--r1
80007d1c:	00 00       	add	r0,r0
80007d1e:	03 80       	ld.ub	r0,r1[0x0]
80007d20:	80 00       	ld.sh	r0,r0[0x0]
80007d22:	ae 1c       	st.h	r7[0x2],r12

80007d24 <calc_usage_csum>:

unsigned char calc_usage_csum(unsigned char sel)
{
80007d24:	eb cd 40 80 	pushm	r7,lr
80007d28:	1a 97       	mov	r7,sp
80007d2a:	20 2d       	sub	sp,8
80007d2c:	18 98       	mov	r8,r12
80007d2e:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char csum = 0;
80007d32:	30 08       	mov	r8,0
80007d34:	ef 68 ff fe 	st.b	r7[-2],r8
	
/*
 * Lots of ways to checksum this struct, don't over-think it
 */

	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007d38:	30 08       	mov	r8,0
80007d3a:	ef 68 ff ff 	st.b	r7[-1],r8
80007d3e:	ca f9       	rjmp	8000809c <calc_usage_csum+0x378>
	{
		csum += usageShdw[sel].u[i].hrs_thous;
80007d40:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007d44:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007d48:	fe fb 03 70 	ld.w	r11,pc[880]
80007d4c:	12 98       	mov	r8,r9
80007d4e:	a3 68       	lsl	r8,0x2
80007d50:	12 08       	add	r8,r9
80007d52:	a1 78       	lsl	r8,0x1
80007d54:	14 99       	mov	r9,r10
80007d56:	a5 79       	lsl	r9,0x5
80007d58:	14 19       	sub	r9,r10
80007d5a:	f2 0a 15 05 	lsl	r10,r9,0x5
80007d5e:	12 1a       	sub	r10,r9
80007d60:	14 08       	add	r8,r10
80007d62:	f6 08 00 08 	add	r8,r11,r8
80007d66:	2f c8       	sub	r8,-4
80007d68:	11 b8       	ld.ub	r8,r8[0x3]
80007d6a:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007d6e:	5c 58       	castu.b	r8
80007d70:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007d74:	f2 08 00 08 	add	r8,r9,r8
80007d78:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_huns;
80007d7c:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007d80:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007d84:	fe fb 03 34 	ld.w	r11,pc[820]
80007d88:	12 98       	mov	r8,r9
80007d8a:	a3 68       	lsl	r8,0x2
80007d8c:	12 08       	add	r8,r9
80007d8e:	a1 78       	lsl	r8,0x1
80007d90:	14 99       	mov	r9,r10
80007d92:	a5 79       	lsl	r9,0x5
80007d94:	14 19       	sub	r9,r10
80007d96:	f2 0a 15 05 	lsl	r10,r9,0x5
80007d9a:	12 1a       	sub	r10,r9
80007d9c:	14 08       	add	r8,r10
80007d9e:	f6 08 00 08 	add	r8,r11,r8
80007da2:	2f c8       	sub	r8,-4
80007da4:	11 b8       	ld.ub	r8,r8[0x3]
80007da6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007daa:	5c 58       	castu.b	r8
80007dac:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007db0:	f2 08 00 08 	add	r8,r9,r8
80007db4:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_tens;
80007db8:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007dbc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007dc0:	fe fb 02 f8 	ld.w	r11,pc[760]
80007dc4:	12 98       	mov	r8,r9
80007dc6:	a3 68       	lsl	r8,0x2
80007dc8:	12 08       	add	r8,r9
80007dca:	a1 78       	lsl	r8,0x1
80007dcc:	14 99       	mov	r9,r10
80007dce:	a5 79       	lsl	r9,0x5
80007dd0:	14 19       	sub	r9,r10
80007dd2:	f2 0a 15 05 	lsl	r10,r9,0x5
80007dd6:	12 1a       	sub	r10,r9
80007dd8:	14 08       	add	r8,r10
80007dda:	f6 08 00 08 	add	r8,r11,r8
80007dde:	2f 88       	sub	r8,-8
80007de0:	11 88       	ld.ub	r8,r8[0x0]
80007de2:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007de6:	5c 58       	castu.b	r8
80007de8:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007dec:	f2 08 00 08 	add	r8,r9,r8
80007df0:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_ones;
80007df4:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007df8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007dfc:	fe fb 02 bc 	ld.w	r11,pc[700]
80007e00:	12 98       	mov	r8,r9
80007e02:	a3 68       	lsl	r8,0x2
80007e04:	12 08       	add	r8,r9
80007e06:	a1 78       	lsl	r8,0x1
80007e08:	14 99       	mov	r9,r10
80007e0a:	a5 79       	lsl	r9,0x5
80007e0c:	14 19       	sub	r9,r10
80007e0e:	f2 0a 15 05 	lsl	r10,r9,0x5
80007e12:	12 1a       	sub	r10,r9
80007e14:	14 08       	add	r8,r10
80007e16:	f6 08 00 08 	add	r8,r11,r8
80007e1a:	2f 88       	sub	r8,-8
80007e1c:	11 88       	ld.ub	r8,r8[0x0]
80007e1e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007e22:	5c 58       	castu.b	r8
80007e24:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007e28:	f2 08 00 08 	add	r8,r9,r8
80007e2c:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].min_tens;
80007e30:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007e34:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007e38:	fe fb 02 80 	ld.w	r11,pc[640]
80007e3c:	12 98       	mov	r8,r9
80007e3e:	a3 68       	lsl	r8,0x2
80007e40:	12 08       	add	r8,r9
80007e42:	a1 78       	lsl	r8,0x1
80007e44:	14 99       	mov	r9,r10
80007e46:	a5 79       	lsl	r9,0x5
80007e48:	14 19       	sub	r9,r10
80007e4a:	f2 0a 15 05 	lsl	r10,r9,0x5
80007e4e:	12 1a       	sub	r10,r9
80007e50:	14 08       	add	r8,r10
80007e52:	f6 08 00 08 	add	r8,r11,r8
80007e56:	2f 88       	sub	r8,-8
80007e58:	11 98       	ld.ub	r8,r8[0x1]
80007e5a:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007e5e:	5c 58       	castu.b	r8
80007e60:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007e64:	f2 08 00 08 	add	r8,r9,r8
80007e68:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].min_ones;
80007e6c:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007e70:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007e74:	fe fb 02 44 	ld.w	r11,pc[580]
80007e78:	12 98       	mov	r8,r9
80007e7a:	a3 68       	lsl	r8,0x2
80007e7c:	12 08       	add	r8,r9
80007e7e:	a1 78       	lsl	r8,0x1
80007e80:	14 99       	mov	r9,r10
80007e82:	a5 79       	lsl	r9,0x5
80007e84:	14 19       	sub	r9,r10
80007e86:	f2 0a 15 05 	lsl	r10,r9,0x5
80007e8a:	12 1a       	sub	r10,r9
80007e8c:	14 08       	add	r8,r10
80007e8e:	f6 08 00 08 	add	r8,r11,r8
80007e92:	2f 88       	sub	r8,-8
80007e94:	11 98       	ld.ub	r8,r8[0x1]
80007e96:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007e9a:	5c 58       	castu.b	r8
80007e9c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007ea0:	f2 08 00 08 	add	r8,r9,r8
80007ea4:	ef 68 ff fe 	st.b	r7[-2],r8
		
		csum += usageShdw[sel].u[i].id[0];
80007ea8:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007eac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007eb0:	fe fb 02 08 	ld.w	r11,pc[520]
80007eb4:	12 98       	mov	r8,r9
80007eb6:	a3 68       	lsl	r8,0x2
80007eb8:	12 08       	add	r8,r9
80007eba:	a1 78       	lsl	r8,0x1
80007ebc:	14 99       	mov	r9,r10
80007ebe:	a5 79       	lsl	r9,0x5
80007ec0:	14 19       	sub	r9,r10
80007ec2:	f2 0a 15 05 	lsl	r10,r9,0x5
80007ec6:	12 1a       	sub	r10,r9
80007ec8:	14 08       	add	r8,r10
80007eca:	f6 08 00 08 	add	r8,r11,r8
80007ece:	11 88       	ld.ub	r8,r8[0x0]
80007ed0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007ed4:	f2 08 00 08 	add	r8,r9,r8
80007ed8:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[1];
80007edc:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007ee0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007ee4:	4f 5b       	lddpc	r11,800080b8 <calc_usage_csum+0x394>
80007ee6:	12 98       	mov	r8,r9
80007ee8:	a3 68       	lsl	r8,0x2
80007eea:	12 08       	add	r8,r9
80007eec:	a1 78       	lsl	r8,0x1
80007eee:	14 99       	mov	r9,r10
80007ef0:	a5 79       	lsl	r9,0x5
80007ef2:	14 19       	sub	r9,r10
80007ef4:	f2 0a 15 05 	lsl	r10,r9,0x5
80007ef8:	12 1a       	sub	r10,r9
80007efa:	14 08       	add	r8,r10
80007efc:	f6 08 00 08 	add	r8,r11,r8
80007f00:	2f f8       	sub	r8,-1
80007f02:	11 88       	ld.ub	r8,r8[0x0]
80007f04:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007f08:	f2 08 00 08 	add	r8,r9,r8
80007f0c:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[2];
80007f10:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007f14:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80007f18:	4e 8b       	lddpc	r11,800080b8 <calc_usage_csum+0x394>
80007f1a:	14 98       	mov	r8,r10
80007f1c:	a3 68       	lsl	r8,0x2
80007f1e:	14 08       	add	r8,r10
80007f20:	2f f8       	sub	r8,-1
80007f22:	f0 0a 15 01 	lsl	r10,r8,0x1
80007f26:	12 98       	mov	r8,r9
80007f28:	a5 78       	lsl	r8,0x5
80007f2a:	12 18       	sub	r8,r9
80007f2c:	f0 09 15 05 	lsl	r9,r8,0x5
80007f30:	10 19       	sub	r9,r8
80007f32:	f4 09 00 08 	add	r8,r10,r9
80007f36:	f6 08 00 08 	add	r8,r11,r8
80007f3a:	11 88       	ld.ub	r8,r8[0x0]
80007f3c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007f40:	f2 08 00 08 	add	r8,r9,r8
80007f44:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[3];
80007f48:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007f4c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007f50:	4d ab       	lddpc	r11,800080b8 <calc_usage_csum+0x394>
80007f52:	12 98       	mov	r8,r9
80007f54:	a3 68       	lsl	r8,0x2
80007f56:	12 08       	add	r8,r9
80007f58:	a1 78       	lsl	r8,0x1
80007f5a:	14 99       	mov	r9,r10
80007f5c:	a5 79       	lsl	r9,0x5
80007f5e:	14 19       	sub	r9,r10
80007f60:	f2 0a 15 05 	lsl	r10,r9,0x5
80007f64:	12 1a       	sub	r10,r9
80007f66:	14 08       	add	r8,r10
80007f68:	f6 08 00 08 	add	r8,r11,r8
80007f6c:	2f d8       	sub	r8,-3
80007f6e:	11 88       	ld.ub	r8,r8[0x0]
80007f70:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007f74:	f2 08 00 08 	add	r8,r9,r8
80007f78:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[4];
80007f7c:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007f80:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007f84:	4c db       	lddpc	r11,800080b8 <calc_usage_csum+0x394>
80007f86:	12 98       	mov	r8,r9
80007f88:	a3 68       	lsl	r8,0x2
80007f8a:	12 08       	add	r8,r9
80007f8c:	a1 78       	lsl	r8,0x1
80007f8e:	14 99       	mov	r9,r10
80007f90:	a5 79       	lsl	r9,0x5
80007f92:	14 19       	sub	r9,r10
80007f94:	f2 0a 15 05 	lsl	r10,r9,0x5
80007f98:	12 1a       	sub	r10,r9
80007f9a:	14 08       	add	r8,r10
80007f9c:	f6 08 00 08 	add	r8,r11,r8
80007fa0:	2f c8       	sub	r8,-4
80007fa2:	11 88       	ld.ub	r8,r8[0x0]
80007fa4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007fa8:	f2 08 00 08 	add	r8,r9,r8
80007fac:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[5];
80007fb0:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007fb4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007fb8:	4c 0b       	lddpc	r11,800080b8 <calc_usage_csum+0x394>
80007fba:	12 98       	mov	r8,r9
80007fbc:	a3 68       	lsl	r8,0x2
80007fbe:	12 08       	add	r8,r9
80007fc0:	a1 78       	lsl	r8,0x1
80007fc2:	14 99       	mov	r9,r10
80007fc4:	a5 79       	lsl	r9,0x5
80007fc6:	14 19       	sub	r9,r10
80007fc8:	f2 0a 15 05 	lsl	r10,r9,0x5
80007fcc:	12 1a       	sub	r10,r9
80007fce:	14 08       	add	r8,r10
80007fd0:	f6 08 00 08 	add	r8,r11,r8
80007fd4:	2f b8       	sub	r8,-5
80007fd6:	11 88       	ld.ub	r8,r8[0x0]
80007fd8:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007fdc:	f2 08 00 08 	add	r8,r9,r8
80007fe0:	ef 68 ff fe 	st.b	r7[-2],r8
		
		csum += usageShdw[sel].u[i].maxUsageReached;
80007fe4:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007fe8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007fec:	4b 3b       	lddpc	r11,800080b8 <calc_usage_csum+0x394>
80007fee:	12 98       	mov	r8,r9
80007ff0:	a3 68       	lsl	r8,0x2
80007ff2:	12 08       	add	r8,r9
80007ff4:	a1 78       	lsl	r8,0x1
80007ff6:	14 99       	mov	r9,r10
80007ff8:	a5 79       	lsl	r9,0x5
80007ffa:	14 19       	sub	r9,r10
80007ffc:	f2 0a 15 05 	lsl	r10,r9,0x5
80008000:	12 1a       	sub	r10,r9
80008002:	14 08       	add	r8,r10
80008004:	f6 08 00 08 	add	r8,r11,r8
80008008:	2f c8       	sub	r8,-4
8000800a:	11 a8       	ld.ub	r8,r8[0x2]
8000800c:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80008010:	5c 58       	castu.b	r8
80008012:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80008016:	f2 08 00 08 	add	r8,r9,r8
8000801a:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].top_botn;
8000801e:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80008022:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008026:	4a 5b       	lddpc	r11,800080b8 <calc_usage_csum+0x394>
80008028:	12 98       	mov	r8,r9
8000802a:	a3 68       	lsl	r8,0x2
8000802c:	12 08       	add	r8,r9
8000802e:	a1 78       	lsl	r8,0x1
80008030:	14 99       	mov	r9,r10
80008032:	a5 79       	lsl	r9,0x5
80008034:	14 19       	sub	r9,r10
80008036:	f2 0a 15 05 	lsl	r10,r9,0x5
8000803a:	12 1a       	sub	r10,r9
8000803c:	14 08       	add	r8,r10
8000803e:	f6 08 00 08 	add	r8,r11,r8
80008042:	2f c8       	sub	r8,-4
80008044:	11 a8       	ld.ub	r8,r8[0x2]
80008046:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
8000804a:	5c 58       	castu.b	r8
8000804c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80008050:	f2 08 00 08 	add	r8,r9,r8
80008054:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].slotFilled;
80008058:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8000805c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008060:	49 6b       	lddpc	r11,800080b8 <calc_usage_csum+0x394>
80008062:	12 98       	mov	r8,r9
80008064:	a3 68       	lsl	r8,0x2
80008066:	12 08       	add	r8,r9
80008068:	a1 78       	lsl	r8,0x1
8000806a:	14 99       	mov	r9,r10
8000806c:	a5 79       	lsl	r9,0x5
8000806e:	14 19       	sub	r9,r10
80008070:	f2 0a 15 05 	lsl	r10,r9,0x5
80008074:	12 1a       	sub	r10,r9
80008076:	14 08       	add	r8,r10
80008078:	f6 08 00 08 	add	r8,r11,r8
8000807c:	2f c8       	sub	r8,-4
8000807e:	11 a8       	ld.ub	r8,r8[0x2]
80008080:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80008084:	5c 58       	castu.b	r8
80008086:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000808a:	f2 08 00 08 	add	r8,r9,r8
8000808e:	ef 68 ff fe 	st.b	r7[-2],r8
	
/*
 * Lots of ways to checksum this struct, don't over-think it
 */

	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008092:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008096:	2f f8       	sub	r8,-1
80008098:	ef 68 ff ff 	st.b	r7[-1],r8
8000809c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800080a0:	35 f8       	mov	r8,95
800080a2:	f0 09 18 00 	cp.b	r9,r8
800080a6:	fe 98 fe 4d 	brls	80007d40 <calc_usage_csum+0x1c>
		csum += usageShdw[sel].u[i].maxUsageReached;
		csum += usageShdw[sel].u[i].top_botn;
		csum += usageShdw[sel].u[i].slotFilled;
	}
	
	return csum;
800080aa:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
800080ae:	10 9c       	mov	r12,r8
800080b0:	2f ed       	sub	sp,-8
800080b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800080b6:	00 00       	add	r0,r0
800080b8:	00 00       	add	r0,r0
800080ba:	03 80       	ld.ub	r0,r1[0x0]

800080bc <copy_usage_to_usage>:

void copy_usage_to_usage(unsigned char dst, unsigned char src)
{
800080bc:	eb cd 40 80 	pushm	r7,lr
800080c0:	1a 97       	mov	r7,sp
800080c2:	20 2d       	sub	sp,8
800080c4:	18 99       	mov	r9,r12
800080c6:	16 98       	mov	r8,r11
800080c8:	ef 69 ff fc 	st.b	r7[-4],r9
800080cc:	ef 68 ff f8 	st.b	r7[-8],r8
	memcpy(&usageShdw[dst], &usageShdw[src], sizeof(usageShdw[src]));
800080d0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800080d4:	12 98       	mov	r8,r9
800080d6:	a5 78       	lsl	r8,0x5
800080d8:	12 18       	sub	r8,r9
800080da:	f0 09 15 05 	lsl	r9,r8,0x5
800080de:	10 19       	sub	r9,r8
800080e0:	48 b8       	lddpc	r8,8000810c <copy_usage_to_usage+0x50>
800080e2:	f2 08 00 0b 	add	r11,r9,r8
800080e6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800080ea:	12 98       	mov	r8,r9
800080ec:	a5 78       	lsl	r8,0x5
800080ee:	12 18       	sub	r8,r9
800080f0:	f0 09 15 05 	lsl	r9,r8,0x5
800080f4:	10 19       	sub	r9,r8
800080f6:	48 68       	lddpc	r8,8000810c <copy_usage_to_usage+0x50>
800080f8:	f2 08 00 08 	add	r8,r9,r8
800080fc:	e0 6a 03 c1 	mov	r10,961
80008100:	10 9c       	mov	r12,r8
80008102:	f0 1f 00 04 	mcall	80008110 <copy_usage_to_usage+0x54>
}
80008106:	2f ed       	sub	sp,-8
80008108:	e3 cd 80 80 	ldm	sp++,r7,pc
8000810c:	00 00       	add	r0,r0
8000810e:	03 80       	ld.ub	r0,r1[0x0]
80008110:	80 00       	ld.sh	r0,r0[0x0]
80008112:	ac c6       	st.b	r6[0x4],r6

80008114 <write_usage_to_flash>:

void write_usage_to_flash(unsigned char sel)
{
80008114:	eb cd 40 80 	pushm	r7,lr
80008118:	1a 97       	mov	r7,sp
8000811a:	20 1d       	sub	sp,4
8000811c:	18 98       	mov	r8,r12
8000811e:	ef 68 ff fc 	st.b	r7[-4],r8
	if (sel == 0)
80008122:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80008126:	30 08       	mov	r8,0
80008128:	f0 09 18 00 	cp.b	r9,r8
8000812c:	c0 91       	brne	8000813e <write_usage_to_flash+0x2a>
	{
		flashc_memcpy(serialIdAndUsageFlashZero, &usageShdw[0], sizeof(usageShdw[0]),true);
8000812e:	30 19       	mov	r9,1
80008130:	e0 6a 03 c1 	mov	r10,961
80008134:	48 9b       	lddpc	r11,80008158 <write_usage_to_flash+0x44>
80008136:	48 ac       	lddpc	r12,8000815c <write_usage_to_flash+0x48>
80008138:	f0 1f 00 0a 	mcall	80008160 <write_usage_to_flash+0x4c>
8000813c:	c0 b8       	rjmp	80008152 <write_usage_to_flash+0x3e>
	}
	else
	{
		flashc_memcpy(serialIdAndUsageFlashOne, &usageShdw[1], sizeof(usageShdw[1]),true);
8000813e:	48 78       	lddpc	r8,80008158 <write_usage_to_flash+0x44>
80008140:	f0 c8 fc 3f 	sub	r8,r8,-961
80008144:	30 19       	mov	r9,1
80008146:	e0 6a 03 c1 	mov	r10,961
8000814a:	10 9b       	mov	r11,r8
8000814c:	48 6c       	lddpc	r12,80008164 <write_usage_to_flash+0x50>
8000814e:	f0 1f 00 05 	mcall	80008160 <write_usage_to_flash+0x4c>
	}
}
80008152:	2f fd       	sub	sp,-4
80008154:	e3 cd 80 80 	ldm	sp++,r7,pc
80008158:	00 00       	add	r0,r0
8000815a:	03 80       	ld.ub	r0,r1[0x0]
8000815c:	80 07       	ld.sh	r7,r0[0x0]
8000815e:	f0 00       	*unknown*
80008160:	80 00       	ld.sh	r0,r0[0x0]
80008162:	43 84       	lddsp	r4,sp[0xe0]
80008164:	80 07       	ld.sh	r7,r0[0x0]
80008166:	f8 00       	*unknown*

80008168 <calc_usage_current_led_boards>:

unsigned long calc_usage_current_led_boards(unsigned char sel);
unsigned long calc_usage_current_led_boards(unsigned char sel)
{
80008168:	eb cd 40 80 	pushm	r7,lr
8000816c:	1a 97       	mov	r7,sp
8000816e:	20 ad       	sub	sp,40
80008170:	18 98       	mov	r8,r12
80008172:	ef 68 ff d8 	st.b	r7[-40],r8
	unsigned long hrs_thous = 0, 
80008176:	30 08       	mov	r8,0
80008178:	ef 48 ff dc 	st.w	r7[-36],r8
		hrs_huns = 0, 
8000817c:	30 08       	mov	r8,0
8000817e:	ef 48 ff e0 	st.w	r7[-32],r8
		hrs_tens = 0, 
80008182:	30 08       	mov	r8,0
80008184:	ef 48 ff e4 	st.w	r7[-28],r8
		hrs_ones = 0, 
80008188:	30 08       	mov	r8,0
8000818a:	ef 48 ff e8 	st.w	r7[-24],r8
		min_tens = 0, 
8000818e:	30 08       	mov	r8,0
80008190:	ef 48 ff ec 	st.w	r7[-20],r8
		min_ones = 0;
80008194:	30 08       	mov	r8,0
80008196:	ef 48 ff f0 	st.w	r7[-16],r8
		
	unsigned char idx;
	unsigned long retMinutes;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
8000819a:	30 08       	mov	r8,0
8000819c:	ef 68 ff ff 	st.b	r7[-1],r8
800081a0:	cd 28       	rjmp	80008344 <calc_usage_current_led_boards+0x1dc>
	{
		if (usageIdx[sel][i] != NO_LED_BOARD_PRESENT)
800081a2:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800081a6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800081aa:	fe f9 02 1a 	ld.w	r9,pc[538]
800081ae:	a3 7a       	lsl	r10,0x3
800081b0:	f4 08 00 08 	add	r8,r10,r8
800081b4:	f2 08 00 08 	add	r8,r9,r8
800081b8:	11 89       	ld.ub	r9,r8[0x0]
800081ba:	3f f8       	mov	r8,-1
800081bc:	f0 09 18 00 	cp.b	r9,r8
800081c0:	e0 80 00 bd 	breq	8000833a <calc_usage_current_led_boards+0x1d2>
		{
			idx = usageIdx[sel][i];
800081c4:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800081c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800081cc:	4f e9       	lddpc	r9,800083c4 <calc_usage_current_led_boards+0x25c>
800081ce:	a3 7a       	lsl	r10,0x3
800081d0:	f4 08 00 08 	add	r8,r10,r8
800081d4:	f2 08 00 08 	add	r8,r9,r8
800081d8:	11 88       	ld.ub	r8,r8[0x0]
800081da:	ef 68 ff f7 	st.b	r7[-9],r8
					
			hrs_thous += usageShdw[sel].u[idx].hrs_thous;
800081de:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800081e2:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800081e6:	4f 9b       	lddpc	r11,800083c8 <calc_usage_current_led_boards+0x260>
800081e8:	12 98       	mov	r8,r9
800081ea:	a3 68       	lsl	r8,0x2
800081ec:	12 08       	add	r8,r9
800081ee:	a1 78       	lsl	r8,0x1
800081f0:	14 99       	mov	r9,r10
800081f2:	a5 79       	lsl	r9,0x5
800081f4:	14 19       	sub	r9,r10
800081f6:	f2 0a 15 05 	lsl	r10,r9,0x5
800081fa:	12 1a       	sub	r10,r9
800081fc:	14 08       	add	r8,r10
800081fe:	f6 08 00 08 	add	r8,r11,r8
80008202:	2f c8       	sub	r8,-4
80008204:	11 b8       	ld.ub	r8,r8[0x3]
80008206:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000820a:	5c 58       	castu.b	r8
8000820c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008210:	f2 08 00 08 	add	r8,r9,r8
80008214:	ef 48 ff dc 	st.w	r7[-36],r8
			hrs_huns += usageShdw[sel].u[idx].hrs_huns;
80008218:	ef 3a ff d8 	ld.ub	r10,r7[-40]
8000821c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80008220:	4e ab       	lddpc	r11,800083c8 <calc_usage_current_led_boards+0x260>
80008222:	12 98       	mov	r8,r9
80008224:	a3 68       	lsl	r8,0x2
80008226:	12 08       	add	r8,r9
80008228:	a1 78       	lsl	r8,0x1
8000822a:	14 99       	mov	r9,r10
8000822c:	a5 79       	lsl	r9,0x5
8000822e:	14 19       	sub	r9,r10
80008230:	f2 0a 15 05 	lsl	r10,r9,0x5
80008234:	12 1a       	sub	r10,r9
80008236:	14 08       	add	r8,r10
80008238:	f6 08 00 08 	add	r8,r11,r8
8000823c:	2f c8       	sub	r8,-4
8000823e:	11 b8       	ld.ub	r8,r8[0x3]
80008240:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008244:	5c 58       	castu.b	r8
80008246:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000824a:	f2 08 00 08 	add	r8,r9,r8
8000824e:	ef 48 ff e0 	st.w	r7[-32],r8
			hrs_tens += usageShdw[sel].u[idx].hrs_tens;
80008252:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80008256:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000825a:	4d cb       	lddpc	r11,800083c8 <calc_usage_current_led_boards+0x260>
8000825c:	12 98       	mov	r8,r9
8000825e:	a3 68       	lsl	r8,0x2
80008260:	12 08       	add	r8,r9
80008262:	a1 78       	lsl	r8,0x1
80008264:	14 99       	mov	r9,r10
80008266:	a5 79       	lsl	r9,0x5
80008268:	14 19       	sub	r9,r10
8000826a:	f2 0a 15 05 	lsl	r10,r9,0x5
8000826e:	12 1a       	sub	r10,r9
80008270:	14 08       	add	r8,r10
80008272:	f6 08 00 08 	add	r8,r11,r8
80008276:	2f 88       	sub	r8,-8
80008278:	11 88       	ld.ub	r8,r8[0x0]
8000827a:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000827e:	5c 58       	castu.b	r8
80008280:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008284:	f2 08 00 08 	add	r8,r9,r8
80008288:	ef 48 ff e4 	st.w	r7[-28],r8
			hrs_ones += usageShdw[sel].u[idx].hrs_ones;
8000828c:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80008290:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80008294:	4c db       	lddpc	r11,800083c8 <calc_usage_current_led_boards+0x260>
80008296:	12 98       	mov	r8,r9
80008298:	a3 68       	lsl	r8,0x2
8000829a:	12 08       	add	r8,r9
8000829c:	a1 78       	lsl	r8,0x1
8000829e:	14 99       	mov	r9,r10
800082a0:	a5 79       	lsl	r9,0x5
800082a2:	14 19       	sub	r9,r10
800082a4:	f2 0a 15 05 	lsl	r10,r9,0x5
800082a8:	12 1a       	sub	r10,r9
800082aa:	14 08       	add	r8,r10
800082ac:	f6 08 00 08 	add	r8,r11,r8
800082b0:	2f 88       	sub	r8,-8
800082b2:	11 88       	ld.ub	r8,r8[0x0]
800082b4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800082b8:	5c 58       	castu.b	r8
800082ba:	ee f9 ff e8 	ld.w	r9,r7[-24]
800082be:	f2 08 00 08 	add	r8,r9,r8
800082c2:	ef 48 ff e8 	st.w	r7[-24],r8
			min_tens += usageShdw[sel].u[idx].min_tens;
800082c6:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800082ca:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800082ce:	4b fb       	lddpc	r11,800083c8 <calc_usage_current_led_boards+0x260>
800082d0:	12 98       	mov	r8,r9
800082d2:	a3 68       	lsl	r8,0x2
800082d4:	12 08       	add	r8,r9
800082d6:	a1 78       	lsl	r8,0x1
800082d8:	14 99       	mov	r9,r10
800082da:	a5 79       	lsl	r9,0x5
800082dc:	14 19       	sub	r9,r10
800082de:	f2 0a 15 05 	lsl	r10,r9,0x5
800082e2:	12 1a       	sub	r10,r9
800082e4:	14 08       	add	r8,r10
800082e6:	f6 08 00 08 	add	r8,r11,r8
800082ea:	2f 88       	sub	r8,-8
800082ec:	11 98       	ld.ub	r8,r8[0x1]
800082ee:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800082f2:	5c 58       	castu.b	r8
800082f4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800082f8:	f2 08 00 08 	add	r8,r9,r8
800082fc:	ef 48 ff ec 	st.w	r7[-20],r8
			min_ones += usageShdw[sel].u[idx].min_ones;
80008300:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80008304:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80008308:	4b 0b       	lddpc	r11,800083c8 <calc_usage_current_led_boards+0x260>
8000830a:	12 98       	mov	r8,r9
8000830c:	a3 68       	lsl	r8,0x2
8000830e:	12 08       	add	r8,r9
80008310:	a1 78       	lsl	r8,0x1
80008312:	14 99       	mov	r9,r10
80008314:	a5 79       	lsl	r9,0x5
80008316:	14 19       	sub	r9,r10
80008318:	f2 0a 15 05 	lsl	r10,r9,0x5
8000831c:	12 1a       	sub	r10,r9
8000831e:	14 08       	add	r8,r10
80008320:	f6 08 00 08 	add	r8,r11,r8
80008324:	2f 88       	sub	r8,-8
80008326:	11 98       	ld.ub	r8,r8[0x1]
80008328:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000832c:	5c 58       	castu.b	r8
8000832e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008332:	f2 08 00 08 	add	r8,r9,r8
80008336:	ef 48 ff f0 	st.w	r7[-16],r8
		min_ones = 0;
		
	unsigned char idx;
	unsigned long retMinutes;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
8000833a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000833e:	2f f8       	sub	r8,-1
80008340:	ef 68 ff ff 	st.b	r7[-1],r8
80008344:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008348:	30 78       	mov	r8,7
8000834a:	f0 09 18 00 	cp.b	r9,r8
8000834e:	fe 98 ff 2a 	brls	800081a2 <calc_usage_current_led_boards+0x3a>
			min_tens += usageShdw[sel].u[idx].min_tens;
			min_ones += usageShdw[sel].u[idx].min_ones;
		}
	}
	
	retMinutes = (hrs_thous * 1000) + (hrs_huns * 100) + (hrs_tens * 10) + (hrs_ones);
80008352:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008356:	e0 68 03 e8 	mov	r8,1000
8000835a:	b1 39       	mul	r9,r8
8000835c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008360:	f0 08 10 64 	mul	r8,r8,100
80008364:	f2 08 00 0a 	add	r10,r9,r8
80008368:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000836c:	12 98       	mov	r8,r9
8000836e:	a3 68       	lsl	r8,0x2
80008370:	12 08       	add	r8,r9
80008372:	a1 78       	lsl	r8,0x1
80008374:	f4 08 00 09 	add	r9,r10,r8
80008378:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000837c:	f2 08 00 08 	add	r8,r9,r8
80008380:	ef 48 ff f8 	st.w	r7[-8],r8
	retMinutes *= 60;
80008384:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008388:	12 98       	mov	r8,r9
8000838a:	a5 68       	lsl	r8,0x4
8000838c:	12 18       	sub	r8,r9
8000838e:	a3 68       	lsl	r8,0x2
80008390:	ef 48 ff f8 	st.w	r7[-8],r8
	retMinutes += ((min_tens * 10) + (min_ones));
80008394:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008398:	12 98       	mov	r8,r9
8000839a:	a3 68       	lsl	r8,0x2
8000839c:	12 08       	add	r8,r9
8000839e:	a1 78       	lsl	r8,0x1
800083a0:	10 99       	mov	r9,r8
800083a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800083a6:	f2 08 00 08 	add	r8,r9,r8
800083aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800083ae:	f2 08 00 08 	add	r8,r9,r8
800083b2:	ef 48 ff f8 	st.w	r7[-8],r8
	
	return retMinutes;
800083b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800083ba:	10 9c       	mov	r12,r8
800083bc:	2f 6d       	sub	sp,-40
800083be:	e3 cd 80 80 	ldm	sp++,r7,pc
800083c2:	00 00       	add	r0,r0
800083c4:	00 00       	add	r0,r0
800083c6:	03 64       	ld.uh	r4,--r1
800083c8:	00 00       	add	r0,r0
800083ca:	03 80       	ld.ub	r0,r1[0x0]

800083cc <increment_ledBoard_usage_min>:

void increment_ledBoard_usage_min(void);
void increment_ledBoard_usage_min(void)
{
800083cc:	eb cd 40 c0 	pushm	r6-r7,lr
800083d0:	1a 97       	mov	r7,sp
800083d2:	20 3d       	sub	sp,12
	unsigned char topLEDboardLowerSideIdx;
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	
	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
800083d4:	30 08       	mov	r8,0
800083d6:	ef 68 ff fd 	st.b	r7[-3],r8
800083da:	c9 19       	rjmp	800086fc <increment_ledBoard_usage_min+0x330>
	{
		if (shelf[i].active == SHELF_ACTIVE)
800083dc:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800083e0:	fe fa 03 80 	ld.w	r10,pc[896]
800083e4:	12 98       	mov	r8,r9
800083e6:	a3 68       	lsl	r8,0x2
800083e8:	12 08       	add	r8,r9
800083ea:	f4 08 00 08 	add	r8,r10,r8
800083ee:	11 89       	ld.ub	r9,r8[0x0]
800083f0:	30 18       	mov	r8,1
800083f2:	f0 09 18 00 	cp.b	r9,r8
800083f6:	e0 81 01 7e 	brne	800086f2 <increment_ledBoard_usage_min+0x326>
		{
			topLEDboardLowerSideIdx = ledBrd[shelf[i].tLedIdx].lSideIdx;
800083fa:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800083fe:	fe fa 03 62 	ld.w	r10,pc[866]
80008402:	12 98       	mov	r8,r9
80008404:	a3 68       	lsl	r8,0x2
80008406:	12 08       	add	r8,r9
80008408:	f4 08 00 08 	add	r8,r10,r8
8000840c:	2f f8       	sub	r8,-1
8000840e:	11 88       	ld.ub	r8,r8[0x0]
80008410:	10 99       	mov	r9,r8
80008412:	fe fa 03 52 	ld.w	r10,pc[850]
80008416:	12 98       	mov	r8,r9
80008418:	a3 78       	lsl	r8,0x3
8000841a:	12 18       	sub	r8,r9
8000841c:	a1 78       	lsl	r8,0x1
8000841e:	f4 08 00 08 	add	r8,r10,r8
80008422:	2f 58       	sub	r8,-11
80008424:	11 88       	ld.ub	r8,r8[0x0]
80008426:	ef 68 ff f9 	st.b	r7[-7],r8
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
8000842a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000842e:	fe fa 03 32 	ld.w	r10,pc[818]
80008432:	12 98       	mov	r8,r9
80008434:	a3 68       	lsl	r8,0x2
80008436:	12 08       	add	r8,r9
80008438:	f4 08 00 08 	add	r8,r10,r8
8000843c:	2f e8       	sub	r8,-2
8000843e:	11 88       	ld.ub	r8,r8[0x0]
80008440:	10 99       	mov	r9,r8
80008442:	fe fa 03 22 	ld.w	r10,pc[802]
80008446:	12 98       	mov	r8,r9
80008448:	a3 78       	lsl	r8,0x3
8000844a:	12 18       	sub	r8,r9
8000844c:	a1 78       	lsl	r8,0x1
8000844e:	f4 08 00 08 	add	r8,r10,r8
80008452:	2f 68       	sub	r8,-10
80008454:	11 88       	ld.ub	r8,r8[0x0]
80008456:	ef 68 ff fa 	st.b	r7[-6],r8
		
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
8000845a:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000845e:	fe fa 03 0a 	ld.w	r10,pc[778]
80008462:	12 98       	mov	r8,r9
80008464:	a3 68       	lsl	r8,0x2
80008466:	12 08       	add	r8,r9
80008468:	f4 08 00 08 	add	r8,r10,r8
8000846c:	2f f8       	sub	r8,-1
8000846e:	11 88       	ld.ub	r8,r8[0x0]
80008470:	ef 68 ff fb 	st.b	r7[-5],r8
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
80008474:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80008478:	fe fa 02 f0 	ld.w	r10,pc[752]
8000847c:	12 98       	mov	r8,r9
8000847e:	a3 68       	lsl	r8,0x2
80008480:	12 08       	add	r8,r9
80008482:	f4 08 00 08 	add	r8,r10,r8
80008486:	2f f8       	sub	r8,-1
80008488:	11 88       	ld.ub	r8,r8[0x0]
8000848a:	ef 68 ff fc 	st.b	r7[-4],r8
		
			for (unsigned char j=0; j<2; j++) //for each copy of usageShdw[] (update both copies every time)
8000848e:	30 08       	mov	r8,0
80008490:	ef 68 ff fe 	st.b	r7[-2],r8
80008494:	c2 89       	rjmp	800086e4 <increment_ledBoard_usage_min+0x318>
			{
				for (unsigned char k=0; k<2; k++) //for each board side in the shelf
80008496:	30 08       	mov	r8,0
80008498:	ef 68 ff ff 	st.b	r7[-1],r8
8000849c:	c1 89       	rjmp	800086cc <increment_ledBoard_usage_min+0x300>
				{
					switch (k)
8000849e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800084a2:	58 08       	cp.w	r8,0
800084a4:	c0 40       	breq	800084ac <increment_ledBoard_usage_min+0xe0>
800084a6:	58 18       	cp.w	r8,1
800084a8:	c1 90       	breq	800084da <increment_ledBoard_usage_min+0x10e>
800084aa:	c2 e8       	rjmp	80008506 <increment_ledBoard_usage_min+0x13a>
					{
						case 0:
							tmp = &usageShdw[j].u[topUIdx];
800084ac:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800084b0:	12 98       	mov	r8,r9
800084b2:	a5 78       	lsl	r8,0x5
800084b4:	12 18       	sub	r8,r9
800084b6:	f0 09 15 05 	lsl	r9,r8,0x5
800084ba:	10 19       	sub	r9,r8
800084bc:	fe f8 02 b0 	ld.w	r8,pc[688]
800084c0:	f2 08 00 0a 	add	r10,r9,r8
800084c4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800084c8:	12 98       	mov	r8,r9
800084ca:	a3 68       	lsl	r8,0x2
800084cc:	12 08       	add	r8,r9
800084ce:	a1 78       	lsl	r8,0x1
800084d0:	f4 08 00 08 	add	r8,r10,r8
800084d4:	ef 48 ff f4 	st.w	r7[-12],r8
							break;
800084d8:	c1 78       	rjmp	80008506 <increment_ledBoard_usage_min+0x13a>
						case 1:
							tmp = &usageShdw[j].u[bottomUIdx];
800084da:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800084de:	12 98       	mov	r8,r9
800084e0:	a5 78       	lsl	r8,0x5
800084e2:	12 18       	sub	r8,r9
800084e4:	f0 09 15 05 	lsl	r9,r8,0x5
800084e8:	10 19       	sub	r9,r8
800084ea:	fe f8 02 82 	ld.w	r8,pc[642]
800084ee:	f2 08 00 0a 	add	r10,r9,r8
800084f2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800084f6:	12 98       	mov	r8,r9
800084f8:	a3 68       	lsl	r8,0x2
800084fa:	12 08       	add	r8,r9
800084fc:	a1 78       	lsl	r8,0x1
800084fe:	f4 08 00 08 	add	r8,r10,r8
80008502:	ef 48 ff f4 	st.w	r7[-12],r8
							break;
					}

					if (++(tmp->min_ones) > 9)
80008506:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000850a:	f1 38 00 09 	ld.ub	r8,r8[9]
8000850e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008512:	5c 58       	castu.b	r8
80008514:	2f f8       	sub	r8,-1
80008516:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000851a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8000851e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008522:	f3 38 00 09 	ld.ub	r8,r9[9]
80008526:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
8000852a:	f3 68 00 09 	st.b	r9[9],r8
8000852e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008532:	f1 38 00 09 	ld.ub	r8,r8[9]
80008536:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000853a:	5c 58       	castu.b	r8
8000853c:	58 98       	cp.w	r8,9
8000853e:	e0 8a 00 c2 	brle	800086c2 <increment_ledBoard_usage_min+0x2f6>
					{
						tmp->min_ones = 0;
80008542:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008546:	f3 38 00 09 	ld.ub	r8,r9[9]
8000854a:	30 0a       	mov	r10,0
8000854c:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80008550:	f3 68 00 09 	st.b	r9[9],r8
				
						if (++(tmp->min_tens) > 5)
80008554:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008558:	f1 38 00 09 	ld.ub	r8,r8[9]
8000855c:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80008560:	5c 58       	castu.b	r8
80008562:	2f f8       	sub	r8,-1
80008564:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008568:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8000856c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008570:	f3 38 00 09 	ld.ub	r8,r9[9]
80008574:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80008578:	f3 68 00 09 	st.b	r9[9],r8
8000857c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008580:	f1 38 00 09 	ld.ub	r8,r8[9]
80008584:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80008588:	5c 58       	castu.b	r8
8000858a:	58 58       	cp.w	r8,5
8000858c:	e0 8a 00 9b 	brle	800086c2 <increment_ledBoard_usage_min+0x2f6>
						{
							tmp->min_tens = 0;
80008590:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008594:	f3 38 00 09 	ld.ub	r8,r9[9]
80008598:	30 0a       	mov	r10,0
8000859a:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8000859e:	f3 68 00 09 	st.b	r9[9],r8
					
							if (++(tmp->hrs_ones) > 9)
800085a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085a6:	f1 38 00 08 	ld.ub	r8,r8[8]
800085aa:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800085ae:	5c 58       	castu.b	r8
800085b0:	2f f8       	sub	r8,-1
800085b2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800085b6:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800085ba:	ee f9 ff f4 	ld.w	r9,r7[-12]
800085be:	f3 38 00 08 	ld.ub	r8,r9[8]
800085c2:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
800085c6:	f3 68 00 08 	st.b	r9[8],r8
800085ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085ce:	f1 38 00 08 	ld.ub	r8,r8[8]
800085d2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800085d6:	5c 58       	castu.b	r8
800085d8:	58 98       	cp.w	r8,9
800085da:	e0 8a 00 74 	brle	800086c2 <increment_ledBoard_usage_min+0x2f6>
							{
								tmp->hrs_ones = 0;
800085de:	ee f9 ff f4 	ld.w	r9,r7[-12]
800085e2:	f3 38 00 08 	ld.ub	r8,r9[8]
800085e6:	30 0a       	mov	r10,0
800085e8:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
800085ec:	f3 68 00 08 	st.b	r9[8],r8
						
								if (++(tmp->hrs_tens) > 9)
800085f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085f4:	f1 38 00 08 	ld.ub	r8,r8[8]
800085f8:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800085fc:	5c 58       	castu.b	r8
800085fe:	2f f8       	sub	r8,-1
80008600:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008604:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80008608:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000860c:	f3 38 00 08 	ld.ub	r8,r9[8]
80008610:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80008614:	f3 68 00 08 	st.b	r9[8],r8
80008618:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000861c:	f1 38 00 08 	ld.ub	r8,r8[8]
80008620:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80008624:	5c 58       	castu.b	r8
80008626:	58 98       	cp.w	r8,9
80008628:	e0 8a 00 4d 	brle	800086c2 <increment_ledBoard_usage_min+0x2f6>
								{
									tmp->hrs_tens = 0;
8000862c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008630:	f3 38 00 08 	ld.ub	r8,r9[8]
80008634:	30 0a       	mov	r10,0
80008636:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8000863a:	f3 68 00 08 	st.b	r9[8],r8
							
									if (++(tmp->hrs_huns) > 9)
8000863e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008642:	11 f8       	ld.ub	r8,r8[0x7]
80008644:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008648:	5c 58       	castu.b	r8
8000864a:	2f f8       	sub	r8,-1
8000864c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008650:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80008654:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008658:	13 f8       	ld.ub	r8,r9[0x7]
8000865a:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
8000865e:	b2 f8       	st.b	r9[0x7],r8
80008660:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008664:	11 f8       	ld.ub	r8,r8[0x7]
80008666:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000866a:	5c 58       	castu.b	r8
8000866c:	58 98       	cp.w	r8,9
8000866e:	e0 8a 00 2a 	brle	800086c2 <increment_ledBoard_usage_min+0x2f6>
									{
										tmp->hrs_huns = 0;
80008672:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008676:	13 f8       	ld.ub	r8,r9[0x7]
80008678:	30 0a       	mov	r10,0
8000867a:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
8000867e:	b2 f8       	st.b	r9[0x7],r8
								
										if (++(tmp->hrs_thous) > 1)
80008680:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008684:	11 f8       	ld.ub	r8,r8[0x7]
80008686:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000868a:	5c 58       	castu.b	r8
8000868c:	2f f8       	sub	r8,-1
8000868e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008692:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80008696:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000869a:	13 f8       	ld.ub	r8,r9[0x7]
8000869c:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
800086a0:	b2 f8       	st.b	r9[0x7],r8
800086a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800086a6:	11 f8       	ld.ub	r8,r8[0x7]
800086a8:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800086ac:	5c 58       	castu.b	r8
800086ae:	58 18       	cp.w	r8,1
800086b0:	e0 8a 00 09 	brle	800086c2 <increment_ledBoard_usage_min+0x2f6>
										{
											tmp->maxUsageReached = 1; //And...we're done. Reached 2000 hours.
800086b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800086b8:	13 e8       	ld.ub	r8,r9[0x6]
800086ba:	30 1a       	mov	r10,1
800086bc:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
800086c0:	b2 e8       	st.b	r9[0x6],r8
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
		
			for (unsigned char j=0; j<2; j++) //for each copy of usageShdw[] (update both copies every time)
			{
				for (unsigned char k=0; k<2; k++) //for each board side in the shelf
800086c2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800086c6:	2f f8       	sub	r8,-1
800086c8:	ef 68 ff ff 	st.b	r7[-1],r8
800086cc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800086d0:	30 18       	mov	r8,1
800086d2:	f0 09 18 00 	cp.b	r9,r8
800086d6:	fe 98 fe e4 	brls	8000849e <increment_ledBoard_usage_min+0xd2>
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
		
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
		
			for (unsigned char j=0; j<2; j++) //for each copy of usageShdw[] (update both copies every time)
800086da:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800086de:	2f f8       	sub	r8,-1
800086e0:	ef 68 ff fe 	st.b	r7[-2],r8
800086e4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800086e8:	30 18       	mov	r8,1
800086ea:	f0 09 18 00 	cp.b	r9,r8
800086ee:	fe 98 fe d4 	brls	80008496 <increment_ledBoard_usage_min+0xca>
	unsigned char topLEDboardLowerSideIdx;
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	
	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
800086f2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800086f6:	2f f8       	sub	r8,-1
800086f8:	ef 68 ff fd 	st.b	r7[-3],r8
800086fc:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80008700:	30 38       	mov	r8,3
80008702:	f0 09 18 00 	cp.b	r9,r8
80008706:	fe 98 fe 6b 	brls	800083dc <increment_ledBoard_usage_min+0x10>
				} //for each board side in the shelf (k)
			} //for each copy of usageShdw
		} //if (shelf[i].active)
	} //for (i=0; i<NUM_SHELVES; i++)
	
	usageShdw[pingPong].csum = calc_usage_csum(pingPong);
8000870a:	49 a8       	lddpc	r8,80008770 <increment_ledBoard_usage_min+0x3a4>
8000870c:	11 88       	ld.ub	r8,r8[0x0]
8000870e:	10 96       	mov	r6,r8
80008710:	49 88       	lddpc	r8,80008770 <increment_ledBoard_usage_min+0x3a4>
80008712:	11 88       	ld.ub	r8,r8[0x0]
80008714:	10 9c       	mov	r12,r8
80008716:	f0 1f 00 18 	mcall	80008774 <increment_ledBoard_usage_min+0x3a8>
8000871a:	18 98       	mov	r8,r12
8000871c:	10 9a       	mov	r10,r8
8000871e:	49 4b       	lddpc	r11,8000876c <increment_ledBoard_usage_min+0x3a0>
80008720:	0c 98       	mov	r8,r6
80008722:	a5 78       	lsl	r8,0x5
80008724:	0c 18       	sub	r8,r6
80008726:	f0 09 15 05 	lsl	r9,r8,0x5
8000872a:	10 19       	sub	r9,r8
8000872c:	f6 09 00 08 	add	r8,r11,r9
80008730:	f0 c9 fc 40 	sub	r9,r8,-960
80008734:	14 98       	mov	r8,r10
80008736:	b2 88       	st.b	r9[0x0],r8
			
	write_usage_to_flash(pingPong);
80008738:	48 e8       	lddpc	r8,80008770 <increment_ledBoard_usage_min+0x3a4>
8000873a:	11 88       	ld.ub	r8,r8[0x0]
8000873c:	10 9c       	mov	r12,r8
8000873e:	f0 1f 00 0f 	mcall	80008778 <increment_ledBoard_usage_min+0x3ac>
	
	pingPong++;
80008742:	48 c8       	lddpc	r8,80008770 <increment_ledBoard_usage_min+0x3a4>
80008744:	11 88       	ld.ub	r8,r8[0x0]
80008746:	2f f8       	sub	r8,-1
80008748:	5c 58       	castu.b	r8
8000874a:	48 a9       	lddpc	r9,80008770 <increment_ledBoard_usage_min+0x3a4>
8000874c:	b2 88       	st.b	r9[0x0],r8
	pingPong &= 1; //toggle between 0 (EVEN) and 1 (ODD)
8000874e:	48 98       	lddpc	r8,80008770 <increment_ledBoard_usage_min+0x3a4>
80008750:	11 88       	ld.ub	r8,r8[0x0]
80008752:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008756:	48 79       	lddpc	r9,80008770 <increment_ledBoard_usage_min+0x3a4>
80008758:	b2 88       	st.b	r9[0x0],r8
}
8000875a:	2f dd       	sub	sp,-12
8000875c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008760:	00 00       	add	r0,r0
80008762:	03 38       	ld.ub	r8,r1++
80008764:	00 00       	add	r0,r0
80008766:	02 f2       	st.b	--r1,r2
80008768:	00 00       	add	r0,r0
8000876a:	0b 1c       	ld.sh	r12,r5++
8000876c:	00 00       	add	r0,r0
8000876e:	03 80       	ld.ub	r0,r1[0x0]
80008770:	00 00       	add	r0,r0
80008772:	0b 45       	ld.w	r5,--r5
80008774:	80 00       	ld.sh	r0,r0[0x0]
80008776:	7d 24       	ld.w	r4,lr[0x48]
80008778:	80 00       	ld.sh	r0,r0[0x0]
8000877a:	81 14       	st.w	r0[0x4],r4

8000877c <init_shelf_n_ledBrd_structs>:


void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
8000877c:	eb cd 40 80 	pushm	r7,lr
80008780:	1a 97       	mov	r7,sp
80008782:	20 5d       	sub	sp,20
	
	for (int i=0; i<NUM_SHELVES; i++)
80008784:	30 08       	mov	r8,0
80008786:	ef 48 ff ec 	st.w	r7[-20],r8
8000878a:	c2 b8       	rjmp	800087e0 <init_shelf_n_ledBrd_structs+0x64>
	{
		shelf[i].active = 0;
8000878c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008790:	fe fa 02 ac 	ld.w	r10,pc[684]
80008794:	12 98       	mov	r8,r9
80008796:	a3 68       	lsl	r8,0x2
80008798:	12 08       	add	r8,r9
8000879a:	f4 08 00 09 	add	r9,r10,r8
8000879e:	30 08       	mov	r8,0
800087a0:	b2 88       	st.b	r9[0x0],r8
		shelf[i].devicesPresent = 0;
800087a2:	ee f9 ff ec 	ld.w	r9,r7[-20]
800087a6:	fe fa 02 96 	ld.w	r10,pc[662]
800087aa:	12 98       	mov	r8,r9
800087ac:	a3 68       	lsl	r8,0x2
800087ae:	12 08       	add	r8,r9
800087b0:	f4 08 00 08 	add	r8,r10,r8
800087b4:	f0 c9 ff fd 	sub	r9,r8,-3
800087b8:	30 08       	mov	r8,0
800087ba:	b2 88       	st.b	r9[0x0],r8
		shelf[i].present = 0;
800087bc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800087c0:	fe fa 02 7c 	ld.w	r10,pc[636]
800087c4:	12 98       	mov	r8,r9
800087c6:	a3 68       	lsl	r8,0x2
800087c8:	12 08       	add	r8,r9
800087ca:	f4 08 00 08 	add	r8,r10,r8
800087ce:	f0 c9 ff fc 	sub	r9,r8,-4
800087d2:	30 08       	mov	r8,0
800087d4:	b2 88       	st.b	r9[0x0],r8

void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
	
	for (int i=0; i<NUM_SHELVES; i++)
800087d6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800087da:	2f f8       	sub	r8,-1
800087dc:	ef 48 ff ec 	st.w	r7[-20],r8
800087e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800087e4:	58 38       	cp.w	r8,3
800087e6:	fe 9a ff d3 	brle	8000878c <init_shelf_n_ledBrd_structs+0x10>
		shelf[i].active = 0;
		shelf[i].devicesPresent = 0;
		shelf[i].present = 0;
	}
	
	shelf[0].tLedIdx = 0;
800087ea:	fe f9 02 52 	ld.w	r9,pc[594]
800087ee:	30 08       	mov	r8,0
800087f0:	b2 98       	st.b	r9[0x1],r8
	shelf[0].bLedIdx = 1;
800087f2:	fe f9 02 4a 	ld.w	r9,pc[586]
800087f6:	30 18       	mov	r8,1
800087f8:	b2 a8       	st.b	r9[0x2],r8
	shelf[1].tLedIdx = 1;
800087fa:	fe f9 02 42 	ld.w	r9,pc[578]
800087fe:	30 18       	mov	r8,1
80008800:	b2 e8       	st.b	r9[0x6],r8
	shelf[1].bLedIdx = 2;
80008802:	fe f9 02 3a 	ld.w	r9,pc[570]
80008806:	30 28       	mov	r8,2
80008808:	b2 f8       	st.b	r9[0x7],r8
	shelf[2].tLedIdx = 2;
8000880a:	fe f9 02 32 	ld.w	r9,pc[562]
8000880e:	30 28       	mov	r8,2
80008810:	f3 68 00 0b 	st.b	r9[11],r8
	shelf[2].bLedIdx = 3;
80008814:	fe f9 02 28 	ld.w	r9,pc[552]
80008818:	30 38       	mov	r8,3
8000881a:	f3 68 00 0c 	st.b	r9[12],r8
	shelf[3].tLedIdx = 3;
8000881e:	fe f9 02 1e 	ld.w	r9,pc[542]
80008822:	30 38       	mov	r8,3
80008824:	f3 68 00 10 	st.b	r9[16],r8
	shelf[3].bLedIdx = 4;
80008828:	fe f9 02 14 	ld.w	r9,pc[532]
8000882c:	30 48       	mov	r8,4
8000882e:	f3 68 00 11 	st.b	r9[17],r8
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80008832:	30 08       	mov	r8,0
80008834:	ef 48 ff f0 	st.w	r7[-16],r8
80008838:	c1 48       	rjmp	80008860 <init_shelf_n_ledBrd_structs+0xe4>
	{
		ledBrd[i].present = 0;
8000883a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000883e:	fe fa 02 02 	ld.w	r10,pc[514]
80008842:	12 98       	mov	r8,r9
80008844:	a3 78       	lsl	r8,0x3
80008846:	12 18       	sub	r8,r9
80008848:	a1 78       	lsl	r8,0x1
8000884a:	f4 08 00 08 	add	r8,r10,r8
8000884e:	f0 c9 ff f8 	sub	r9,r8,-8
80008852:	30 08       	mov	r8,0
80008854:	b2 88       	st.b	r9[0x0],r8
	shelf[2].tLedIdx = 2;
	shelf[2].bLedIdx = 3;
	shelf[3].tLedIdx = 3;
	shelf[3].bLedIdx = 4;
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80008856:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000885a:	2f f8       	sub	r8,-1
8000885c:	ef 48 ff f0 	st.w	r7[-16],r8
80008860:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008864:	58 48       	cp.w	r8,4
80008866:	fe 9a ff ea 	brle	8000883a <init_shelf_n_ledBrd_structs+0xbe>
	{
		ledBrd[i].present = 0;
	}
	
	ledBrd[0].uSideIdx = 0xFF;
8000886a:	4f 69       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
8000886c:	3f f8       	mov	r8,-1
8000886e:	f3 68 00 0a 	st.b	r9[10],r8
	ledBrd[0].lSideIdx = 0;
80008872:	4f 49       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
80008874:	30 08       	mov	r8,0
80008876:	f3 68 00 0b 	st.b	r9[11],r8
	ledBrd[1].uSideIdx = 1;
8000887a:	4f 29       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
8000887c:	30 18       	mov	r8,1
8000887e:	f3 68 00 18 	st.b	r9[24],r8
	ledBrd[1].lSideIdx = 2;
80008882:	4f 09       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
80008884:	30 28       	mov	r8,2
80008886:	f3 68 00 19 	st.b	r9[25],r8
	ledBrd[2].uSideIdx = 3;
8000888a:	4e e9       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
8000888c:	30 38       	mov	r8,3
8000888e:	f3 68 00 26 	st.b	r9[38],r8
	ledBrd[2].lSideIdx = 4;
80008892:	4e c9       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
80008894:	30 48       	mov	r8,4
80008896:	f3 68 00 27 	st.b	r9[39],r8
	ledBrd[3].uSideIdx = 5;
8000889a:	4e a9       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
8000889c:	30 58       	mov	r8,5
8000889e:	f3 68 00 34 	st.b	r9[52],r8
	ledBrd[3].lSideIdx = 6;
800088a2:	4e 89       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
800088a4:	30 68       	mov	r8,6
800088a6:	f3 68 00 35 	st.b	r9[53],r8
	ledBrd[4].uSideIdx = 7;
800088aa:	4e 69       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
800088ac:	30 78       	mov	r8,7
800088ae:	f3 68 00 42 	st.b	r9[66],r8
	ledBrd[4].lSideIdx = 0xFF;
800088b2:	4e 49       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
800088b4:	3f f8       	mov	r8,-1
800088b6:	f3 68 00 43 	st.b	r9[67],r8

	ledBrd[0].uSideShelfIdx = 0xFF;
800088ba:	4e 29       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
800088bc:	3f f8       	mov	r8,-1
800088be:	f3 68 00 0c 	st.b	r9[12],r8
	ledBrd[1].uSideShelfIdx = 0;
800088c2:	4e 09       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
800088c4:	30 08       	mov	r8,0
800088c6:	f3 68 00 1a 	st.b	r9[26],r8
	ledBrd[2].uSideShelfIdx = 1;
800088ca:	4d e9       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
800088cc:	30 18       	mov	r8,1
800088ce:	f3 68 00 28 	st.b	r9[40],r8
	ledBrd[3].uSideShelfIdx = 2;
800088d2:	4d c9       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
800088d4:	30 28       	mov	r8,2
800088d6:	f3 68 00 36 	st.b	r9[54],r8
	ledBrd[4].uSideShelfIdx = 3;
800088da:	4d a9       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
800088dc:	30 38       	mov	r8,3
800088de:	f3 68 00 44 	st.b	r9[68],r8
 
	ledBrd[0].lSideShelfIdx = 0;
800088e2:	4d 89       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
800088e4:	30 08       	mov	r8,0
800088e6:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrd[1].lSideShelfIdx = 1;
800088ea:	4d 69       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
800088ec:	30 18       	mov	r8,1
800088ee:	f3 68 00 1b 	st.b	r9[27],r8
	ledBrd[2].lSideShelfIdx = 2;
800088f2:	4d 49       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
800088f4:	30 28       	mov	r8,2
800088f6:	f3 68 00 29 	st.b	r9[41],r8
	ledBrd[3].lSideShelfIdx = 3;
800088fa:	4d 29       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
800088fc:	30 38       	mov	r8,3
800088fe:	f3 68 00 37 	st.b	r9[55],r8
	ledBrd[4].lSideShelfIdx = 0xFF;
80008902:	4d 09       	lddpc	r9,80008a40 <init_shelf_n_ledBrd_structs+0x2c4>
80008904:	3f f8       	mov	r8,-1
80008906:	f3 68 00 45 	st.b	r9[69],r8
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
8000890a:	30 08       	mov	r8,0
8000890c:	ef 48 ff f4 	st.w	r7[-12],r8
80008910:	c2 88       	rjmp	80008960 <init_shelf_n_ledBrd_structs+0x1e4>
	{
		ledBrdSide[i].maxUsageReached = 0;
80008912:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008916:	4c ca       	lddpc	r10,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
80008918:	12 98       	mov	r8,r9
8000891a:	a3 68       	lsl	r8,0x2
8000891c:	12 08       	add	r8,r9
8000891e:	f4 08 00 08 	add	r8,r10,r8
80008922:	f0 c9 ff fe 	sub	r9,r8,-2
80008926:	30 08       	mov	r8,0
80008928:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].sanitizeMinutes = 0;
8000892a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000892e:	4c 6a       	lddpc	r10,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
80008930:	12 98       	mov	r8,r9
80008932:	a3 68       	lsl	r8,0x2
80008934:	12 08       	add	r8,r9
80008936:	f4 08 00 09 	add	r9,r10,r8
8000893a:	30 08       	mov	r8,0
8000893c:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].ushdwIdx = 0xFF;
8000893e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008942:	4c 1a       	lddpc	r10,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
80008944:	12 98       	mov	r8,r9
80008946:	a3 68       	lsl	r8,0x2
80008948:	12 08       	add	r8,r9
8000894a:	f4 08 00 08 	add	r8,r10,r8
8000894e:	f0 c9 ff ff 	sub	r9,r8,-1
80008952:	3f f8       	mov	r8,-1
80008954:	b2 88       	st.b	r9[0x0],r8
	ledBrd[2].lSideShelfIdx = 2;
	ledBrd[3].lSideShelfIdx = 3;
	ledBrd[4].lSideShelfIdx = 0xFF;
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80008956:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000895a:	2f f8       	sub	r8,-1
8000895c:	ef 48 ff f4 	st.w	r7[-12],r8
80008960:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008964:	58 78       	cp.w	r8,7
80008966:	fe 9a ff d6 	brle	80008912 <init_shelf_n_ledBrd_structs+0x196>
		ledBrdSide[i].maxUsageReached = 0;
		ledBrdSide[i].sanitizeMinutes = 0;
		ledBrdSide[i].ushdwIdx = 0xFF;
	}
	
	ledBrdSide[0].boardIdx = 0;
8000896a:	4b 79       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
8000896c:	30 08       	mov	r8,0
8000896e:	b2 c8       	st.b	r9[0x4],r8
	ledBrdSide[1].boardIdx = 1;
80008970:	4b 59       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
80008972:	30 18       	mov	r8,1
80008974:	f3 68 00 09 	st.b	r9[9],r8
	ledBrdSide[2].boardIdx = 1;
80008978:	4b 39       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
8000897a:	30 18       	mov	r8,1
8000897c:	f3 68 00 0e 	st.b	r9[14],r8
	ledBrdSide[3].boardIdx = 2;
80008980:	4b 19       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
80008982:	30 28       	mov	r8,2
80008984:	f3 68 00 13 	st.b	r9[19],r8
	ledBrdSide[4].boardIdx = 2;
80008988:	4a f9       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
8000898a:	30 28       	mov	r8,2
8000898c:	f3 68 00 18 	st.b	r9[24],r8
	ledBrdSide[5].boardIdx = 3;
80008990:	4a d9       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
80008992:	30 38       	mov	r8,3
80008994:	f3 68 00 1d 	st.b	r9[29],r8
	ledBrdSide[6].boardIdx = 3;
80008998:	4a b9       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
8000899a:	30 38       	mov	r8,3
8000899c:	f3 68 00 22 	st.b	r9[34],r8
	ledBrdSide[7].boardIdx = 4;
800089a0:	4a 99       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
800089a2:	30 48       	mov	r8,4
800089a4:	f3 68 00 27 	st.b	r9[39],r8
	

	ledBrdSide[0].shelfIdx = 0;
800089a8:	4a 79       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
800089aa:	30 08       	mov	r8,0
800089ac:	b2 b8       	st.b	r9[0x3],r8
	ledBrdSide[1].shelfIdx = 0;
800089ae:	4a 69       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
800089b0:	30 08       	mov	r8,0
800089b2:	f3 68 00 08 	st.b	r9[8],r8
	ledBrdSide[2].shelfIdx = 1;
800089b6:	4a 49       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
800089b8:	30 18       	mov	r8,1
800089ba:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrdSide[3].shelfIdx = 1;
800089be:	4a 29       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
800089c0:	30 18       	mov	r8,1
800089c2:	f3 68 00 12 	st.b	r9[18],r8
	ledBrdSide[4].shelfIdx = 2;
800089c6:	4a 09       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
800089c8:	30 28       	mov	r8,2
800089ca:	f3 68 00 17 	st.b	r9[23],r8
	ledBrdSide[5].shelfIdx = 2;
800089ce:	49 e9       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
800089d0:	30 28       	mov	r8,2
800089d2:	f3 68 00 1c 	st.b	r9[28],r8
	ledBrdSide[6].shelfIdx = 3;
800089d6:	49 c9       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
800089d8:	30 38       	mov	r8,3
800089da:	f3 68 00 21 	st.b	r9[33],r8
	ledBrdSide[7].shelfIdx = 3;
800089de:	49 a9       	lddpc	r9,80008a44 <init_shelf_n_ledBrd_structs+0x2c8>
800089e0:	30 38       	mov	r8,3
800089e2:	f3 68 00 26 	st.b	r9[38],r8
	
	for (int i=0; i<2; i++)
800089e6:	30 08       	mov	r8,0
800089e8:	ef 48 ff f8 	st.w	r7[-8],r8
800089ec:	c1 f8       	rjmp	80008a2a <init_shelf_n_ledBrd_structs+0x2ae>
	{
		for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
800089ee:	30 08       	mov	r8,0
800089f0:	ef 48 ff fc 	st.w	r7[-4],r8
800089f4:	c1 18       	rjmp	80008a16 <init_shelf_n_ledBrd_structs+0x29a>
		{
			usageIdx[i][j] = NO_LED_BOARD_PRESENT;
800089f6:	ee fa ff f8 	ld.w	r10,r7[-8]
800089fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089fe:	49 39       	lddpc	r9,80008a48 <init_shelf_n_ledBrd_structs+0x2cc>
80008a00:	a3 7a       	lsl	r10,0x3
80008a02:	f4 08 00 08 	add	r8,r10,r8
80008a06:	10 09       	add	r9,r8
80008a08:	3f f8       	mov	r8,-1
80008a0a:	b2 88       	st.b	r9[0x0],r8
	ledBrdSide[6].shelfIdx = 3;
	ledBrdSide[7].shelfIdx = 3;
	
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
80008a0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a10:	2f f8       	sub	r8,-1
80008a12:	ef 48 ff fc 	st.w	r7[-4],r8
80008a16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a1a:	58 78       	cp.w	r8,7
80008a1c:	fe 9a ff ed 	brle	800089f6 <init_shelf_n_ledBrd_structs+0x27a>
	ledBrdSide[4].shelfIdx = 2;
	ledBrdSide[5].shelfIdx = 2;
	ledBrdSide[6].shelfIdx = 3;
	ledBrdSide[7].shelfIdx = 3;
	
	for (int i=0; i<2; i++)
80008a20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a24:	2f f8       	sub	r8,-1
80008a26:	ef 48 ff f8 	st.w	r7[-8],r8
80008a2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a2e:	58 18       	cp.w	r8,1
80008a30:	fe 9a ff df 	brle	800089ee <init_shelf_n_ledBrd_structs+0x272>
		{
			usageIdx[i][j] = NO_LED_BOARD_PRESENT;
		}
	}

}
80008a34:	2f bd       	sub	sp,-20
80008a36:	e3 cd 80 80 	ldm	sp++,r7,pc
80008a3a:	00 00       	add	r0,r0
80008a3c:	00 00       	add	r0,r0
80008a3e:	03 38       	ld.ub	r8,r1++
80008a40:	00 00       	add	r0,r0
80008a42:	02 f2       	st.b	--r1,r2
80008a44:	00 00       	add	r0,r0
80008a46:	0b 1c       	ld.sh	r12,r5++
80008a48:	00 00       	add	r0,r0
80008a4a:	03 64       	ld.uh	r4,--r1

80008a4c <load_usageIdx_to_ledBrdSide>:

void load_usageIdx_to_ledBrdSide(unsigned char sel);
void load_usageIdx_to_ledBrdSide(unsigned char sel)
{
80008a4c:	eb cd 40 80 	pushm	r7,lr
80008a50:	1a 97       	mov	r7,sp
80008a52:	20 2d       	sub	sp,8
80008a54:	18 98       	mov	r8,r12
80008a56:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80008a5a:	30 08       	mov	r8,0
80008a5c:	ef 48 ff fc 	st.w	r7[-4],r8
80008a60:	c1 d8       	rjmp	80008a9a <load_usageIdx_to_ledBrdSide+0x4e>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[sel][i];
80008a62:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008a66:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80008a6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a6e:	49 0a       	lddpc	r10,80008aac <load_usageIdx_to_ledBrdSide+0x60>
80008a70:	a3 7b       	lsl	r11,0x3
80008a72:	f6 08 00 08 	add	r8,r11,r8
80008a76:	f4 08 00 08 	add	r8,r10,r8
80008a7a:	11 8a       	ld.ub	r10,r8[0x0]
80008a7c:	48 db       	lddpc	r11,80008ab0 <load_usageIdx_to_ledBrdSide+0x64>
80008a7e:	12 98       	mov	r8,r9
80008a80:	a3 68       	lsl	r8,0x2
80008a82:	12 08       	add	r8,r9
80008a84:	f6 08 00 08 	add	r8,r11,r8
80008a88:	f0 c9 ff ff 	sub	r9,r8,-1
80008a8c:	14 98       	mov	r8,r10
80008a8e:	b2 88       	st.b	r9[0x0],r8
}

void load_usageIdx_to_ledBrdSide(unsigned char sel);
void load_usageIdx_to_ledBrdSide(unsigned char sel)
{
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80008a90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a94:	2f f8       	sub	r8,-1
80008a96:	ef 48 ff fc 	st.w	r7[-4],r8
80008a9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a9e:	58 78       	cp.w	r8,7
80008aa0:	fe 9a ff e1 	brle	80008a62 <load_usageIdx_to_ledBrdSide+0x16>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[sel][i];
	}
}
80008aa4:	2f ed       	sub	sp,-8
80008aa6:	e3 cd 80 80 	ldm	sp++,r7,pc
80008aaa:	00 00       	add	r0,r0
80008aac:	00 00       	add	r0,r0
80008aae:	03 64       	ld.uh	r4,--r1
80008ab0:	00 00       	add	r0,r0
80008ab2:	0b 1c       	ld.sh	r12,r5++

80008ab4 <init_led_board_info>:


void init_led_board_info(void);
void init_led_board_info(void)
{
80008ab4:	eb cd 40 c0 	pushm	r6-r7,lr
80008ab8:	1a 97       	mov	r7,sp
80008aba:	20 5d       	sub	sp,20
	unsigned char usage0good, usage1good;
	unsigned int usage0cnt, usage1cnt;
	unsigned char newer, older, previouslyOlder;
	unsigned char good, bad, previouslyBad;
	
	init_shelf_n_ledBrd_structs();
80008abc:	f0 1f 00 ae 	mcall	80008d74 <init_led_board_info+0x2c0>
	
	read_led_board_serial_ids();
80008ac0:	f0 1f 00 ae 	mcall	80008d78 <init_led_board_info+0x2c4>
	usage0good = read_usage_struct(0);
80008ac4:	30 0c       	mov	r12,0
80008ac6:	f0 1f 00 ae 	mcall	80008d7c <init_led_board_info+0x2c8>
80008aca:	18 98       	mov	r8,r12
80008acc:	ef 68 ff ee 	st.b	r7[-18],r8
	usage1good = read_usage_struct(1);
80008ad0:	30 1c       	mov	r12,1
80008ad2:	f0 1f 00 ab 	mcall	80008d7c <init_led_board_info+0x2c8>
80008ad6:	18 98       	mov	r8,r12
80008ad8:	ef 68 ff ef 	st.b	r7[-17],r8
	
	if (usage0good)
80008adc:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008ae0:	30 08       	mov	r8,0
80008ae2:	f0 09 18 00 	cp.b	r9,r8
80008ae6:	c0 50       	breq	80008af0 <init_led_board_info+0x3c>
	{
		load_usage_indeces(0);
80008ae8:	30 0c       	mov	r12,0
80008aea:	f0 1f 00 a6 	mcall	80008d80 <init_led_board_info+0x2cc>
80008aee:	c0 88       	rjmp	80008afe <init_led_board_info+0x4a>
	}
	else
	{
		memset(&usageShdw[0], 0x00, sizeof(usageShdw[0]));
80008af0:	e0 6a 03 c1 	mov	r10,961
80008af4:	30 0b       	mov	r11,0
80008af6:	fe fc 02 8e 	ld.w	r12,pc[654]
80008afa:	f0 1f 00 a4 	mcall	80008d88 <init_led_board_info+0x2d4>
	}
	
	if (usage1good)
80008afe:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008b02:	30 08       	mov	r8,0
80008b04:	f0 09 18 00 	cp.b	r9,r8
80008b08:	c0 50       	breq	80008b12 <init_led_board_info+0x5e>
	{
		load_usage_indeces(1);
80008b0a:	30 1c       	mov	r12,1
80008b0c:	f0 1f 00 9d 	mcall	80008d80 <init_led_board_info+0x2cc>
80008b10:	c0 b8       	rjmp	80008b26 <init_led_board_info+0x72>
	}
	else
	{
		memset(&usageShdw[1], 0x00, sizeof(usageShdw[1]));
80008b12:	fe f8 02 72 	ld.w	r8,pc[626]
80008b16:	f0 c8 fc 3f 	sub	r8,r8,-961
80008b1a:	e0 6a 03 c1 	mov	r10,961
80008b1e:	30 0b       	mov	r11,0
80008b20:	10 9c       	mov	r12,r8
80008b22:	f0 1f 00 9a 	mcall	80008d88 <init_led_board_info+0x2d4>
	}
	
	if ((!usage0good) && (!usage1good)) //Chassis is probably powering up for the first time
80008b26:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008b2a:	30 08       	mov	r8,0
80008b2c:	f0 09 18 00 	cp.b	r9,r8
80008b30:	c3 a1       	brne	80008ba4 <init_led_board_info+0xf0>
80008b32:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008b36:	30 08       	mov	r8,0
80008b38:	f0 09 18 00 	cp.b	r9,r8
80008b3c:	c3 41       	brne	80008ba4 <init_led_board_info+0xf0>
	{
		if (test_flash(0) == ERROR)
80008b3e:	30 0c       	mov	r12,0
80008b40:	f0 1f 00 93 	mcall	80008d8c <init_led_board_info+0x2d8>
80008b44:	18 98       	mov	r8,r12
80008b46:	10 99       	mov	r9,r8
80008b48:	30 18       	mov	r8,1
80008b4a:	f0 09 18 00 	cp.b	r9,r8
80008b4e:	c0 31       	brne	80008b54 <init_led_board_info+0xa0>
		{
			chassis_error();
80008b50:	f0 1f 00 90 	mcall	80008d90 <init_led_board_info+0x2dc>
		}
		if (test_flash(1) == ERROR)
80008b54:	30 1c       	mov	r12,1
80008b56:	f0 1f 00 8e 	mcall	80008d8c <init_led_board_info+0x2d8>
80008b5a:	18 98       	mov	r8,r12
80008b5c:	10 99       	mov	r9,r8
80008b5e:	30 18       	mov	r8,1
80008b60:	f0 09 18 00 	cp.b	r9,r8
80008b64:	c0 31       	brne	80008b6a <init_led_board_info+0xb6>
		{
			chassis_error();
80008b66:	f0 1f 00 8b 	mcall	80008d90 <init_led_board_info+0x2dc>
		}
		add_new_led_board_sides_to_usage(0);
80008b6a:	30 0c       	mov	r12,0
80008b6c:	f0 1f 00 8a 	mcall	80008d94 <init_led_board_info+0x2e0>
		load_usageIdx_to_ledBrdSide(0);
80008b70:	30 0c       	mov	r12,0
80008b72:	f0 1f 00 8a 	mcall	80008d98 <init_led_board_info+0x2e4>
		usageShdw[0].csum = calc_usage_csum(0);
80008b76:	30 0c       	mov	r12,0
80008b78:	f0 1f 00 89 	mcall	80008d9c <init_led_board_info+0x2e8>
80008b7c:	18 98       	mov	r8,r12
80008b7e:	fe f9 02 06 	ld.w	r9,pc[518]
80008b82:	f3 68 03 c0 	st.b	r9[960],r8
		copy_usage_to_usage(1,0);
80008b86:	30 0b       	mov	r11,0
80008b88:	30 1c       	mov	r12,1
80008b8a:	f0 1f 00 86 	mcall	80008da0 <init_led_board_info+0x2ec>
		write_usage_to_flash(0);
80008b8e:	30 0c       	mov	r12,0
80008b90:	f0 1f 00 85 	mcall	80008da4 <init_led_board_info+0x2f0>
		write_usage_to_flash(1);
80008b94:	30 1c       	mov	r12,1
80008b96:	f0 1f 00 84 	mcall	80008da4 <init_led_board_info+0x2f0>
		pingPong = 0;
80008b9a:	fe f9 02 0e 	ld.w	r9,pc[526]
80008b9e:	30 08       	mov	r8,0
80008ba0:	b2 88       	st.b	r9[0x0],r8
	else
	{
		memset(&usageShdw[1], 0x00, sizeof(usageShdw[1]));
	}
	
	if ((!usage0good) && (!usage1good)) //Chassis is probably powering up for the first time
80008ba2:	ce 68       	rjmp	80008d6e <init_led_board_info+0x2ba>
		write_usage_to_flash(0);
		write_usage_to_flash(1);
		pingPong = 0;
		
	}
	else if (usage0good && usage1good) //Both usage structs are good, find the newer one
80008ba4:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008ba8:	30 08       	mov	r8,0
80008baa:	f0 09 18 00 	cp.b	r9,r8
80008bae:	c7 a0       	breq	80008ca2 <init_led_board_info+0x1ee>
80008bb0:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008bb4:	30 08       	mov	r8,0
80008bb6:	f0 09 18 00 	cp.b	r9,r8
80008bba:	c7 40       	breq	80008ca2 <init_led_board_info+0x1ee>
	{
		usage0cnt = calc_usage_current_led_boards(0);
80008bbc:	30 0c       	mov	r12,0
80008bbe:	f0 1f 00 7c 	mcall	80008dac <init_led_board_info+0x2f8>
80008bc2:	18 98       	mov	r8,r12
80008bc4:	ef 48 ff f0 	st.w	r7[-16],r8
		usage1cnt = calc_usage_current_led_boards(1);
80008bc8:	30 1c       	mov	r12,1
80008bca:	f0 1f 00 79 	mcall	80008dac <init_led_board_info+0x2f8>
80008bce:	18 98       	mov	r8,r12
80008bd0:	ef 48 ff f4 	st.w	r7[-12],r8
		
		if (usage0cnt >= usage1cnt)
80008bd4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008bd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008bdc:	10 39       	cp.w	r9,r8
80008bde:	c0 53       	brcs	80008be8 <init_led_board_info+0x134>
		{
			newer = 0;
80008be0:	30 08       	mov	r8,0
80008be2:	ef 68 ff fa 	st.b	r7[-6],r8
80008be6:	c0 48       	rjmp	80008bee <init_led_board_info+0x13a>
		}
		else
		{
			newer = 1;
80008be8:	30 18       	mov	r8,1
80008bea:	ef 68 ff fa 	st.b	r7[-6],r8
		}
		older = newer ^ 1; //older is the opposite of newer
80008bee:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008bf2:	ec 18 00 01 	eorl	r8,0x1
80008bf6:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (test_flash(older) == ERROR)
80008bfa:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008bfe:	10 9c       	mov	r12,r8
80008c00:	f0 1f 00 63 	mcall	80008d8c <init_led_board_info+0x2d8>
80008c04:	18 98       	mov	r8,r12
80008c06:	10 99       	mov	r9,r8
80008c08:	30 18       	mov	r8,1
80008c0a:	f0 09 18 00 	cp.b	r9,r8
80008c0e:	c0 31       	brne	80008c14 <init_led_board_info+0x160>
		{
			chassis_error();
80008c10:	f0 1f 00 60 	mcall	80008d90 <init_led_board_info+0x2dc>
		}

		add_new_led_board_sides_to_usage(newer);
80008c14:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008c18:	10 9c       	mov	r12,r8
80008c1a:	f0 1f 00 5f 	mcall	80008d94 <init_led_board_info+0x2e0>
		load_usageIdx_to_ledBrdSide(newer);
80008c1e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008c22:	10 9c       	mov	r12,r8
80008c24:	f0 1f 00 5d 	mcall	80008d98 <init_led_board_info+0x2e4>
		usageShdw[newer].csum = calc_usage_csum(newer);
80008c28:	ef 36 ff fa 	ld.ub	r6,r7[-6]
80008c2c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008c30:	10 9c       	mov	r12,r8
80008c32:	f0 1f 00 5b 	mcall	80008d9c <init_led_board_info+0x2e8>
80008c36:	18 98       	mov	r8,r12
80008c38:	10 9a       	mov	r10,r8
80008c3a:	4d 3b       	lddpc	r11,80008d84 <init_led_board_info+0x2d0>
80008c3c:	0c 98       	mov	r8,r6
80008c3e:	a5 78       	lsl	r8,0x5
80008c40:	0c 18       	sub	r8,r6
80008c42:	f0 09 15 05 	lsl	r9,r8,0x5
80008c46:	10 19       	sub	r9,r8
80008c48:	f6 09 00 08 	add	r8,r11,r9
80008c4c:	f0 c9 fc 40 	sub	r9,r8,-960
80008c50:	14 98       	mov	r8,r10
80008c52:	b2 88       	st.b	r9[0x0],r8
		copy_usage_to_usage(older, newer);
80008c54:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80008c58:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008c5c:	12 9b       	mov	r11,r9
80008c5e:	10 9c       	mov	r12,r8
80008c60:	f0 1f 00 50 	mcall	80008da0 <init_led_board_info+0x2ec>
		previouslyOlder = older;
80008c64:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008c68:	ef 68 ff fc 	st.b	r7[-4],r8
		write_usage_to_flash(previouslyOlder);
80008c6c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008c70:	10 9c       	mov	r12,r8
80008c72:	f0 1f 00 4d 	mcall	80008da4 <init_led_board_info+0x2f0>
		if (test_flash(newer) == ERROR)
80008c76:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008c7a:	10 9c       	mov	r12,r8
80008c7c:	f0 1f 00 44 	mcall	80008d8c <init_led_board_info+0x2d8>
80008c80:	18 98       	mov	r8,r12
80008c82:	10 99       	mov	r9,r8
80008c84:	30 18       	mov	r8,1
80008c86:	f0 09 18 00 	cp.b	r9,r8
80008c8a:	c0 31       	brne	80008c90 <init_led_board_info+0x1dc>
		{
			chassis_error();
80008c8c:	f0 1f 00 41 	mcall	80008d90 <init_led_board_info+0x2dc>
		}

		write_usage_to_flash(newer);
80008c90:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008c94:	10 9c       	mov	r12,r8
80008c96:	f0 1f 00 44 	mcall	80008da4 <init_led_board_info+0x2f0>
		pingPong = 0;
80008c9a:	4c 49       	lddpc	r9,80008da8 <init_led_board_info+0x2f4>
80008c9c:	30 08       	mov	r8,0
80008c9e:	b2 88       	st.b	r9[0x0],r8
		write_usage_to_flash(0);
		write_usage_to_flash(1);
		pingPong = 0;
		
	}
	else if (usage0good && usage1good) //Both usage structs are good, find the newer one
80008ca0:	c6 78       	rjmp	80008d6e <init_led_board_info+0x2ba>
		pingPong = 0;
		
	}
	else //Only one usage struct is good, the other was probably corrupted during a power-down while sanitizing
	{
		if (usage0good)
80008ca2:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008ca6:	30 08       	mov	r8,0
80008ca8:	f0 09 18 00 	cp.b	r9,r8
80008cac:	c0 50       	breq	80008cb6 <init_led_board_info+0x202>
		{
			good = 0;
80008cae:	30 08       	mov	r8,0
80008cb0:	ef 68 ff fd 	st.b	r7[-3],r8
80008cb4:	c0 48       	rjmp	80008cbc <init_led_board_info+0x208>
		}
		else
		{
			good = 1;
80008cb6:	30 18       	mov	r8,1
80008cb8:	ef 68 ff fd 	st.b	r7[-3],r8
		}
		bad = good ^ 1; //bad is the opposite of good
80008cbc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008cc0:	ec 18 00 01 	eorl	r8,0x1
80008cc4:	ef 68 ff fe 	st.b	r7[-2],r8
		
		if (test_flash(bad) == ERROR)
80008cc8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80008ccc:	10 9c       	mov	r12,r8
80008cce:	f0 1f 00 30 	mcall	80008d8c <init_led_board_info+0x2d8>
80008cd2:	18 98       	mov	r8,r12
80008cd4:	10 99       	mov	r9,r8
80008cd6:	30 18       	mov	r8,1
80008cd8:	f0 09 18 00 	cp.b	r9,r8
80008cdc:	c0 31       	brne	80008ce2 <init_led_board_info+0x22e>
		{
			chassis_error();
80008cde:	f0 1f 00 2d 	mcall	80008d90 <init_led_board_info+0x2dc>
		}
		
		add_new_led_board_sides_to_usage(good);
80008ce2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008ce6:	10 9c       	mov	r12,r8
80008ce8:	f0 1f 00 2b 	mcall	80008d94 <init_led_board_info+0x2e0>
		load_usageIdx_to_ledBrdSide(good);
80008cec:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008cf0:	10 9c       	mov	r12,r8
80008cf2:	f0 1f 00 2a 	mcall	80008d98 <init_led_board_info+0x2e4>
		usageShdw[good].csum = calc_usage_csum(good);
80008cf6:	ef 36 ff fd 	ld.ub	r6,r7[-3]
80008cfa:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008cfe:	10 9c       	mov	r12,r8
80008d00:	f0 1f 00 27 	mcall	80008d9c <init_led_board_info+0x2e8>
80008d04:	18 98       	mov	r8,r12
80008d06:	10 9a       	mov	r10,r8
80008d08:	49 fb       	lddpc	r11,80008d84 <init_led_board_info+0x2d0>
80008d0a:	0c 98       	mov	r8,r6
80008d0c:	a5 78       	lsl	r8,0x5
80008d0e:	0c 18       	sub	r8,r6
80008d10:	f0 09 15 05 	lsl	r9,r8,0x5
80008d14:	10 19       	sub	r9,r8
80008d16:	f6 09 00 08 	add	r8,r11,r9
80008d1a:	f0 c9 fc 40 	sub	r9,r8,-960
80008d1e:	14 98       	mov	r8,r10
80008d20:	b2 88       	st.b	r9[0x0],r8
		copy_usage_to_usage(bad, good);
80008d22:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80008d26:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80008d2a:	12 9b       	mov	r11,r9
80008d2c:	10 9c       	mov	r12,r8
80008d2e:	f0 1f 00 1d 	mcall	80008da0 <init_led_board_info+0x2ec>
		previouslyBad = bad;
80008d32:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80008d36:	ef 68 ff ff 	st.b	r7[-1],r8
		write_usage_to_flash(previouslyBad);
80008d3a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008d3e:	10 9c       	mov	r12,r8
80008d40:	f0 1f 00 19 	mcall	80008da4 <init_led_board_info+0x2f0>
		if (test_flash(good) == ERROR)
80008d44:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008d48:	10 9c       	mov	r12,r8
80008d4a:	f0 1f 00 11 	mcall	80008d8c <init_led_board_info+0x2d8>
80008d4e:	18 98       	mov	r8,r12
80008d50:	10 99       	mov	r9,r8
80008d52:	30 18       	mov	r8,1
80008d54:	f0 09 18 00 	cp.b	r9,r8
80008d58:	c0 31       	brne	80008d5e <init_led_board_info+0x2aa>
		{
			chassis_error();
80008d5a:	f0 1f 00 0e 	mcall	80008d90 <init_led_board_info+0x2dc>
		}
		
		write_usage_to_flash(good);
80008d5e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008d62:	10 9c       	mov	r12,r8
80008d64:	f0 1f 00 10 	mcall	80008da4 <init_led_board_info+0x2f0>
		pingPong = 0;
80008d68:	49 09       	lddpc	r9,80008da8 <init_led_board_info+0x2f4>
80008d6a:	30 08       	mov	r8,0
80008d6c:	b2 88       	st.b	r9[0x0],r8
	}
	
}
80008d6e:	2f bd       	sub	sp,-20
80008d70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008d74:	80 00       	ld.sh	r0,r0[0x0]
80008d76:	87 7c       	st.w	r3[0x1c],r12
80008d78:	80 00       	ld.sh	r0,r0[0x0]
80008d7a:	69 f0       	ld.w	r0,r4[0x7c]
80008d7c:	80 00       	ld.sh	r0,r0[0x0]
80008d7e:	79 a4       	ld.w	r4,r12[0x68]
80008d80:	80 00       	ld.sh	r0,r0[0x0]
80008d82:	78 c4       	ld.w	r4,r12[0x30]
80008d84:	00 00       	add	r0,r0
80008d86:	03 80       	ld.ub	r0,r1[0x0]
80008d88:	80 00       	ld.sh	r0,r0[0x0]
80008d8a:	ae 0e       	st.h	r7[0x0],lr
80008d8c:	80 00       	ld.sh	r0,r0[0x0]
80008d8e:	7a 38       	ld.w	r8,sp[0xc]
80008d90:	80 00       	ld.sh	r0,r0[0x0]
80008d92:	69 18       	ld.w	r8,r4[0x44]
80008d94:	80 00       	ld.sh	r0,r0[0x0]
80008d96:	7b 90       	ld.w	r0,sp[0x64]
80008d98:	80 00       	ld.sh	r0,r0[0x0]
80008d9a:	8a 4c       	ld.sh	r12,r5[0x8]
80008d9c:	80 00       	ld.sh	r0,r0[0x0]
80008d9e:	7d 24       	ld.w	r4,lr[0x48]
80008da0:	80 00       	ld.sh	r0,r0[0x0]
80008da2:	80 bc       	ld.uh	r12,r0[0x6]
80008da4:	80 00       	ld.sh	r0,r0[0x0]
80008da6:	81 14       	st.w	r0[0x4],r4
80008da8:	00 00       	add	r0,r0
80008daa:	0b 45       	ld.w	r5,--r5
80008dac:	80 00       	ld.sh	r0,r0[0x0]
80008dae:	81 68       	st.w	r0[0x18],r8

80008db0 <main>:

/*! \brief Main File Section:
 *          - Initialization (CPU, TWI, Usart,...)
 */
int main(void)
{
80008db0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80008db4:	1a 97       	mov	r7,sp
80008db6:	fa cd 02 90 	sub	sp,sp,656
	static unsigned char displayIdx = 0;
	unsigned long usec = 1000, stayInLoop = 0;
80008dba:	e0 68 03 e8 	mov	r8,1000
80008dbe:	ef 48 fe 78 	st.w	r7[-392],r8
80008dc2:	30 08       	mov	r8,0
80008dc4:	ef 48 fe 7c 	st.w	r7[-388],r8
	
	// Initialize System Clock
	init_sys_clocks();
80008dc8:	f0 1f 05 1f 	mcall	8000a244 <main+0x1494>

	init_io();
80008dcc:	f0 1f 05 1f 	mcall	8000a248 <main+0x1498>
	

	init_led_board_info();
80008dd0:	f0 1f 05 1f 	mcall	8000a24c <main+0x149c>
	
	while (stayInLoop)
80008dd4:	ca 28       	rjmp	80008f18 <main+0x168>
	{
		gpio_toggle_pin(ECLAVE_DEBUG_LED);
80008dd6:	37 cc       	mov	r12,124
80008dd8:	f0 1f 05 1e 	mcall	8000a250 <main+0x14a0>
80008ddc:	ee f8 fe 78 	ld.w	r8,r7[-392]
80008de0:	ef 48 fe 90 	st.w	r7[-368],r8
80008de4:	e0 68 e1 00 	mov	r8,57600
80008de8:	ea 18 05 f5 	orh	r8,0x5f5
80008dec:	ef 48 fe 8c 	st.w	r7[-372],r8
80008df0:	ee f8 fe 90 	ld.w	r8,r7[-368]
80008df4:	ef 48 fe 98 	st.w	r7[-360],r8
80008df8:	ee f8 fe 8c 	ld.w	r8,r7[-372]
80008dfc:	ef 48 fe 94 	st.w	r7[-364],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80008e00:	ee f2 fe 98 	ld.w	r2,r7[-360]
80008e04:	30 03       	mov	r3,0
80008e06:	ee f0 fe 94 	ld.w	r0,r7[-364]
80008e0a:	30 01       	mov	r1,0
80008e0c:	e6 00 02 49 	mul	r9,r3,r0
80008e10:	e2 02 02 48 	mul	r8,r1,r2
80008e14:	10 09       	add	r9,r8
80008e16:	e4 00 06 4a 	mulu.d	r10,r2,r0
80008e1a:	16 09       	add	r9,r11
80008e1c:	12 9b       	mov	r11,r9
80008e1e:	ee 78 42 3f 	mov	r8,999999
80008e22:	30 09       	mov	r9,0
80008e24:	10 0a       	add	r10,r8
80008e26:	f6 09 00 4b 	adc	r11,r11,r9
80008e2a:	ee 78 42 40 	mov	r8,1000000
80008e2e:	30 09       	mov	r9,0
80008e30:	f0 1f 05 09 	mcall	8000a254 <main+0x14a4>
80008e34:	14 98       	mov	r8,r10
80008e36:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80008e38:	ef 48 fe a0 	st.w	r7[-352],r8
80008e3c:	ee c8 01 d0 	sub	r8,r7,464
80008e40:	ef 48 fe 9c 	st.w	r7[-356],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008e44:	e1 b8 00 42 	mfsr	r8,0x108
80008e48:	10 99       	mov	r9,r8
80008e4a:	ee f8 fe 9c 	ld.w	r8,r7[-356]
80008e4e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008e50:	ee f8 fe 9c 	ld.w	r8,r7[-356]
80008e54:	70 09       	ld.w	r9,r8[0x0]
80008e56:	ee f8 fe a0 	ld.w	r8,r7[-352]
80008e5a:	10 09       	add	r9,r8
80008e5c:	ee f8 fe 9c 	ld.w	r8,r7[-356]
80008e60:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008e62:	ee f9 fe 9c 	ld.w	r9,r7[-356]
80008e66:	30 08       	mov	r8,0
80008e68:	f3 68 00 08 	st.b	r9[8],r8
80008e6c:	ee c8 01 d0 	sub	r8,r7,464
80008e70:	ef 48 fe a4 	st.w	r7[-348],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008e74:	e1 b8 00 42 	mfsr	r8,0x108
80008e78:	ef 48 fe a8 	st.w	r7[-344],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008e7c:	ee f8 fe a4 	ld.w	r8,r7[-348]
80008e80:	f1 39 00 08 	ld.ub	r9,r8[8]
80008e84:	30 28       	mov	r8,2
80008e86:	f0 09 18 00 	cp.b	r9,r8
80008e8a:	c0 31       	brne	80008e90 <main+0xe0>
    return false;
80008e8c:	30 08       	mov	r8,0
80008e8e:	c4 38       	rjmp	80008f14 <main+0x164>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008e90:	ee f8 fe a4 	ld.w	r8,r7[-348]
80008e94:	f1 39 00 08 	ld.ub	r9,r8[8]
80008e98:	30 18       	mov	r8,1
80008e9a:	f0 09 18 00 	cp.b	r9,r8
80008e9e:	c0 31       	brne	80008ea4 <main+0xf4>
    return true;
80008ea0:	30 18       	mov	r8,1
80008ea2:	c3 98       	rjmp	80008f14 <main+0x164>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008ea4:	ee f8 fe a4 	ld.w	r8,r7[-348]
80008ea8:	70 09       	ld.w	r9,r8[0x0]
80008eaa:	ee f8 fe a4 	ld.w	r8,r7[-348]
80008eae:	70 18       	ld.w	r8,r8[0x4]
80008eb0:	10 39       	cp.w	r9,r8
80008eb2:	e0 88 00 1a 	brls	80008ee6 <main+0x136>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008eb6:	ee f8 fe a4 	ld.w	r8,r7[-348]
80008eba:	70 09       	ld.w	r9,r8[0x0]
80008ebc:	ee f8 fe a8 	ld.w	r8,r7[-344]
80008ec0:	12 38       	cp.w	r8,r9
80008ec2:	c1 02       	brcc	80008ee2 <main+0x132>
80008ec4:	ee f8 fe a4 	ld.w	r8,r7[-348]
80008ec8:	70 19       	ld.w	r9,r8[0x4]
80008eca:	ee f8 fe a8 	ld.w	r8,r7[-344]
80008ece:	12 38       	cp.w	r8,r9
80008ed0:	e0 88 00 09 	brls	80008ee2 <main+0x132>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008ed4:	ee f9 fe a4 	ld.w	r9,r7[-348]
80008ed8:	30 18       	mov	r8,1
80008eda:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008ede:	30 18       	mov	r8,1
80008ee0:	c1 a8       	rjmp	80008f14 <main+0x164>
    }
    return false;
80008ee2:	30 08       	mov	r8,0
80008ee4:	c1 88       	rjmp	80008f14 <main+0x164>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008ee6:	ee f8 fe a4 	ld.w	r8,r7[-348]
80008eea:	70 09       	ld.w	r9,r8[0x0]
80008eec:	ee f8 fe a8 	ld.w	r8,r7[-344]
80008ef0:	12 38       	cp.w	r8,r9
80008ef2:	c0 93       	brcs	80008f04 <main+0x154>
80008ef4:	ee f8 fe a4 	ld.w	r8,r7[-348]
80008ef8:	70 19       	ld.w	r9,r8[0x4]
80008efa:	ee f8 fe a8 	ld.w	r8,r7[-344]
80008efe:	12 38       	cp.w	r8,r9
80008f00:	e0 88 00 09 	brls	80008f12 <main+0x162>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008f04:	ee f9 fe a4 	ld.w	r9,r7[-348]
80008f08:	30 18       	mov	r8,1
80008f0a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008f0e:	30 18       	mov	r8,1
80008f10:	c0 28       	rjmp	80008f14 <main+0x164>
    }
    return false;
80008f12:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80008f14:	58 08       	cp.w	r8,0
80008f16:	ca b0       	breq	80008e6c <main+0xbc>
	init_io();
	

	init_led_board_info();
	
	while (stayInLoop)
80008f18:	ee f8 fe 7c 	ld.w	r8,r7[-388]
80008f1c:	58 08       	cp.w	r8,0
80008f1e:	fe 91 ff 5c 	brne	80008dd6 <main+0x26>
		cpu_delay_us(usec, EC_CPU_CLOCK_100MHZ);
	}

	//Set clock to 8MHz. We start at 100MHz to get through the DS2411 LED board serial ID detection. But we don't need to run that fast for remaining operations.
	
	osc_enable(OSC_ID_RC8M);
80008f22:	30 2c       	mov	r12,2
80008f24:	f0 1f 04 cd 	mcall	8000a258 <main+0x14a8>
	osc_wait_ready(OSC_ID_RC8M);
80008f28:	30 2c       	mov	r12,2
80008f2a:	f0 1f 04 cd 	mcall	8000a25c <main+0x14ac>
	sysclk_set_source(SYSCLK_SRC_RC8M);
80008f2e:	30 5c       	mov	r12,5
80008f30:	f0 1f 04 cc 	mcall	8000a260 <main+0x14b0>
	sysclk_set_prescalers(0,0,0,0);
80008f34:	30 09       	mov	r9,0
80008f36:	30 0a       	mov	r10,0
80008f38:	30 0b       	mov	r11,0
80008f3a:	30 0c       	mov	r12,0
80008f3c:	f0 1f 04 ca 	mcall	8000a264 <main+0x14b4>
	pll_disable(0);
80008f40:	30 0c       	mov	r12,0
80008f42:	f0 1f 04 ca 	mcall	8000a268 <main+0x14b8>

	while (stayInLoop)
80008f46:	cb 48       	rjmp	800090ae <main+0x2fe>
	{
		gpio_toggle_pin(ECLAVE_DEBUG_LED);
80008f48:	37 cc       	mov	r12,124
80008f4a:	f0 1f 04 c2 	mcall	8000a250 <main+0x14a0>
80008f4e:	ee f8 fe 78 	ld.w	r8,r7[-392]
80008f52:	ef 48 fe b0 	st.w	r7[-336],r8
80008f56:	e0 68 12 00 	mov	r8,4608
80008f5a:	ea 18 00 7a 	orh	r8,0x7a
80008f5e:	ef 48 fe ac 	st.w	r7[-340],r8
80008f62:	ee f8 fe b0 	ld.w	r8,r7[-336]
80008f66:	ef 48 fe b8 	st.w	r7[-328],r8
80008f6a:	ee f8 fe ac 	ld.w	r8,r7[-340]
80008f6e:	ef 48 fe b4 	st.w	r7[-332],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80008f72:	ee fc fe b8 	ld.w	r12,r7[-328]
80008f76:	ef 4c fd 7c 	st.w	r7[-644],r12
80008f7a:	30 0a       	mov	r10,0
80008f7c:	ef 4a fd 78 	st.w	r7[-648],r10
80008f80:	ee f8 fe b4 	ld.w	r8,r7[-332]
80008f84:	ef 48 fd 74 	st.w	r7[-652],r8
80008f88:	30 0c       	mov	r12,0
80008f8a:	ef 4c fd 70 	st.w	r7[-656],r12
80008f8e:	ee f9 fd 78 	ld.w	r9,r7[-648]
80008f92:	ee fa fd 74 	ld.w	r10,r7[-652]
80008f96:	b5 39       	mul	r9,r10
80008f98:	ee f8 fd 70 	ld.w	r8,r7[-656]
80008f9c:	ee fc fd 7c 	ld.w	r12,r7[-644]
80008fa0:	b9 38       	mul	r8,r12
80008fa2:	10 09       	add	r9,r8
80008fa4:	ee f8 fd 7c 	ld.w	r8,r7[-644]
80008fa8:	ee fc fd 74 	ld.w	r12,r7[-652]
80008fac:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008fb0:	16 09       	add	r9,r11
80008fb2:	12 9b       	mov	r11,r9
80008fb4:	ee 78 42 3f 	mov	r8,999999
80008fb8:	30 09       	mov	r9,0
80008fba:	10 0a       	add	r10,r8
80008fbc:	f6 09 00 4b 	adc	r11,r11,r9
80008fc0:	ee 78 42 40 	mov	r8,1000000
80008fc4:	30 09       	mov	r9,0
80008fc6:	f0 1f 04 a4 	mcall	8000a254 <main+0x14a4>
80008fca:	14 98       	mov	r8,r10
80008fcc:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80008fce:	ef 48 fe c0 	st.w	r7[-320],r8
80008fd2:	ee c8 01 c4 	sub	r8,r7,452
80008fd6:	ef 48 fe bc 	st.w	r7[-324],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008fda:	e1 b8 00 42 	mfsr	r8,0x108
80008fde:	10 99       	mov	r9,r8
80008fe0:	ee f8 fe bc 	ld.w	r8,r7[-324]
80008fe4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008fe6:	ee f8 fe bc 	ld.w	r8,r7[-324]
80008fea:	70 09       	ld.w	r9,r8[0x0]
80008fec:	ee f8 fe c0 	ld.w	r8,r7[-320]
80008ff0:	10 09       	add	r9,r8
80008ff2:	ee f8 fe bc 	ld.w	r8,r7[-324]
80008ff6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008ff8:	ee f9 fe bc 	ld.w	r9,r7[-324]
80008ffc:	30 08       	mov	r8,0
80008ffe:	f3 68 00 08 	st.b	r9[8],r8
80009002:	ee c8 01 c4 	sub	r8,r7,452
80009006:	ef 48 fe c4 	st.w	r7[-316],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000900a:	e1 b8 00 42 	mfsr	r8,0x108
8000900e:	ef 48 fe c8 	st.w	r7[-312],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009012:	ee f8 fe c4 	ld.w	r8,r7[-316]
80009016:	f1 39 00 08 	ld.ub	r9,r8[8]
8000901a:	30 28       	mov	r8,2
8000901c:	f0 09 18 00 	cp.b	r9,r8
80009020:	c0 31       	brne	80009026 <main+0x276>
    return false;
80009022:	30 08       	mov	r8,0
80009024:	c4 38       	rjmp	800090aa <main+0x2fa>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009026:	ee f8 fe c4 	ld.w	r8,r7[-316]
8000902a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000902e:	30 18       	mov	r8,1
80009030:	f0 09 18 00 	cp.b	r9,r8
80009034:	c0 31       	brne	8000903a <main+0x28a>
    return true;
80009036:	30 18       	mov	r8,1
80009038:	c3 98       	rjmp	800090aa <main+0x2fa>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000903a:	ee f8 fe c4 	ld.w	r8,r7[-316]
8000903e:	70 09       	ld.w	r9,r8[0x0]
80009040:	ee f8 fe c4 	ld.w	r8,r7[-316]
80009044:	70 18       	ld.w	r8,r8[0x4]
80009046:	10 39       	cp.w	r9,r8
80009048:	e0 88 00 1a 	brls	8000907c <main+0x2cc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000904c:	ee f8 fe c4 	ld.w	r8,r7[-316]
80009050:	70 09       	ld.w	r9,r8[0x0]
80009052:	ee f8 fe c8 	ld.w	r8,r7[-312]
80009056:	12 38       	cp.w	r8,r9
80009058:	c1 02       	brcc	80009078 <main+0x2c8>
8000905a:	ee f8 fe c4 	ld.w	r8,r7[-316]
8000905e:	70 19       	ld.w	r9,r8[0x4]
80009060:	ee f8 fe c8 	ld.w	r8,r7[-312]
80009064:	12 38       	cp.w	r8,r9
80009066:	e0 88 00 09 	brls	80009078 <main+0x2c8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000906a:	ee f9 fe c4 	ld.w	r9,r7[-316]
8000906e:	30 18       	mov	r8,1
80009070:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009074:	30 18       	mov	r8,1
80009076:	c1 a8       	rjmp	800090aa <main+0x2fa>
    }
    return false;
80009078:	30 08       	mov	r8,0
8000907a:	c1 88       	rjmp	800090aa <main+0x2fa>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000907c:	ee f8 fe c4 	ld.w	r8,r7[-316]
80009080:	70 09       	ld.w	r9,r8[0x0]
80009082:	ee f8 fe c8 	ld.w	r8,r7[-312]
80009086:	12 38       	cp.w	r8,r9
80009088:	c0 93       	brcs	8000909a <main+0x2ea>
8000908a:	ee f8 fe c4 	ld.w	r8,r7[-316]
8000908e:	70 19       	ld.w	r9,r8[0x4]
80009090:	ee f8 fe c8 	ld.w	r8,r7[-312]
80009094:	12 38       	cp.w	r8,r9
80009096:	e0 88 00 09 	brls	800090a8 <main+0x2f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000909a:	ee f9 fe c4 	ld.w	r9,r7[-316]
8000909e:	30 18       	mov	r8,1
800090a0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800090a4:	30 18       	mov	r8,1
800090a6:	c0 28       	rjmp	800090aa <main+0x2fa>
    }
    return false;
800090a8:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800090aa:	58 08       	cp.w	r8,0
800090ac:	ca b0       	breq	80009002 <main+0x252>
	osc_wait_ready(OSC_ID_RC8M);
	sysclk_set_source(SYSCLK_SRC_RC8M);
	sysclk_set_prescalers(0,0,0,0);
	pll_disable(0);

	while (stayInLoop)
800090ae:	ee f8 fe 7c 	ld.w	r8,r7[-388]
800090b2:	58 08       	cp.w	r8,0
800090b4:	fe 91 ff 4a 	brne	80008f48 <main+0x198>
	}



	// Initialize USART
	init_ecdbg_rs232(FPBA_HZ);
800090b8:	e0 6c 12 00 	mov	r12,4608
800090bc:	ea 1c 00 7a 	orh	r12,0x7a
800090c0:	f0 1f 04 6b 	mcall	8000a26c <main+0x14bc>
	init_display_rs232(FPBA_HZ);
800090c4:	e0 6c 12 00 	mov	r12,4608
800090c8:	ea 1c 00 7a 	orh	r12,0x7a
800090cc:	f0 1f 04 69 	mcall	8000a270 <main+0x14c0>

	// Print Startup Message
	print_ecdbg("SEAL SHIELD DEMO \r\n Copyright (c) 2015 Technical Solutions Group, Inc.\r\n");
800090d0:	fe fc 11 a4 	ld.w	r12,pc[4516]
800090d4:	f0 1f 04 69 	mcall	8000a278 <main+0x14c8>
	display_text(IDX_READY);
800090d8:	30 0c       	mov	r12,0
800090da:	f0 1f 04 69 	mcall	8000a27c <main+0x14cc>
	
	// Initialize ADC for bluesense channels which are used to see if there are any devices (phones, tablets, etc.) on the shelves
	adc_process_init();
800090de:	f0 1f 04 69 	mcall	8000a280 <main+0x14d0>

	
	// Initialize Interrupts
	irq_initialize_vectors(); //TODO: probably remove 5apr15
800090e2:	f0 1f 04 69 	mcall	8000a284 <main+0x14d4>

	cpu_irq_enable();
800090e6:	d5 03       	csrf	0x10


	
	// Initialize TWI Interface
	twi_init();
800090e8:	f0 1f 04 68 	mcall	8000a288 <main+0x14d8>

	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level
800090ec:	31 6c       	mov	r12,22
800090ee:	f0 1f 04 68 	mcall	8000a28c <main+0x14dc>
	PCA9952_init();
800090f2:	f0 1f 04 68 	mcall	8000a290 <main+0x14e0>
	
	electroclaveState = STATE_EC_IDLE;
800090f6:	fe f9 11 9e 	ld.w	r9,pc[4510]
800090fa:	30 08       	mov	r8,0
800090fc:	b2 88       	st.b	r9[0x0],r8
	
	gpio_set_pin_low(ECLAVE_LED_OEn); //...and we are live!
800090fe:	31 6c       	mov	r12,22
80009100:	f0 1f 04 66 	mcall	8000a298 <main+0x14e8>
	gpio_set_pin_low(ECLAVE_PSUPPLY_ONn); //turn the leds on first and then the power supply
80009104:	31 7c       	mov	r12,23
80009106:	f0 1f 04 65 	mcall	8000a298 <main+0x14e8>
8000910a:	e0 68 03 e8 	mov	r8,1000
8000910e:	ef 48 fe d0 	st.w	r7[-304],r8
80009112:	e0 68 12 00 	mov	r8,4608
80009116:	ea 18 00 7a 	orh	r8,0x7a
8000911a:	ef 48 fe cc 	st.w	r7[-308],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000911e:	ee fa fe d0 	ld.w	r10,r7[-304]
80009122:	ef 4a fd 8c 	st.w	r7[-628],r10
80009126:	30 08       	mov	r8,0
80009128:	ef 48 fd 88 	st.w	r7[-632],r8
8000912c:	ee fc fe cc 	ld.w	r12,r7[-308]
80009130:	ef 4c fd 84 	st.w	r7[-636],r12
80009134:	30 0a       	mov	r10,0
80009136:	ef 4a fd 80 	st.w	r7[-640],r10
8000913a:	ee f9 fd 88 	ld.w	r9,r7[-632]
8000913e:	ee f8 fd 84 	ld.w	r8,r7[-636]
80009142:	b1 39       	mul	r9,r8
80009144:	ee f8 fd 80 	ld.w	r8,r7[-640]
80009148:	ee fc fd 8c 	ld.w	r12,r7[-628]
8000914c:	b9 38       	mul	r8,r12
8000914e:	10 09       	add	r9,r8
80009150:	ee f8 fd 8c 	ld.w	r8,r7[-628]
80009154:	ee fc fd 84 	ld.w	r12,r7[-636]
80009158:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000915c:	16 09       	add	r9,r11
8000915e:	12 9b       	mov	r11,r9
80009160:	e0 68 03 e7 	mov	r8,999
80009164:	30 09       	mov	r9,0
80009166:	10 0a       	add	r10,r8
80009168:	f6 09 00 4b 	adc	r11,r11,r9
8000916c:	e0 68 03 e8 	mov	r8,1000
80009170:	30 09       	mov	r9,0
80009172:	f0 1f 04 39 	mcall	8000a254 <main+0x14a4>
80009176:	14 98       	mov	r8,r10
80009178:	16 99       	mov	r9,r11
	
	cpu_set_timeout(EC_ONE_SECOND/2, &debugTimer);
8000917a:	a1 98       	lsr	r8,0x1
8000917c:	ef 48 fe d8 	st.w	r7[-296],r8
80009180:	fe f8 11 1c 	ld.w	r8,pc[4380]
80009184:	ef 48 fe d4 	st.w	r7[-300],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009188:	e1 b8 00 42 	mfsr	r8,0x108
8000918c:	10 99       	mov	r9,r8
8000918e:	ee f8 fe d4 	ld.w	r8,r7[-300]
80009192:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009194:	ee f8 fe d4 	ld.w	r8,r7[-300]
80009198:	70 09       	ld.w	r9,r8[0x0]
8000919a:	ee f8 fe d8 	ld.w	r8,r7[-296]
8000919e:	10 09       	add	r9,r8
800091a0:	ee f8 fe d4 	ld.w	r8,r7[-300]
800091a4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800091a6:	ee f9 fe d4 	ld.w	r9,r7[-300]
800091aa:	30 08       	mov	r8,0
800091ac:	f3 68 00 08 	st.b	r9[8],r8
800091b0:	c0 28       	rjmp	800091b4 <main+0x404>
		{
			cpu_stop_timeout(&debugTimer);
			cpu_set_timeout((EC_ONE_SECOND/2), &debugTimer);
			gpio_toggle_pin(ECLAVE_DEBUG_LED);
		}
	} //while(true)
800091b2:	d7 03       	nop


	// Main loop
	while (true) {

		switch(electroclaveState)
800091b4:	fe f8 10 e0 	ld.w	r8,pc[4320]
800091b8:	11 88       	ld.ub	r8,r8[0x0]
800091ba:	10 99       	mov	r9,r8
800091bc:	58 89       	cp.w	r9,8
800091be:	e0 8b 06 b7 	brhi	80009f2c <main+0x117c>
800091c2:	fe f8 10 de 	ld.w	r8,pc[4318]
800091c6:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
		{
			case STATE_EC_IDLE:
				if (EC_DOOR_LATCHED) {
800091ca:	33 ec       	mov	r12,62
800091cc:	f0 1f 04 36 	mcall	8000a2a4 <main+0x14f4>
800091d0:	18 98       	mov	r8,r12
800091d2:	ec 18 00 01 	eorl	r8,0x1
800091d6:	5c 58       	castu.b	r8
800091d8:	e0 80 06 a1 	breq	80009f1a <main+0x116a>
					gpio_set_pin_low(ECLAVE_DEBUG_LED);
800091dc:	37 cc       	mov	r12,124
800091de:	f0 1f 04 2f 	mcall	8000a298 <main+0x14e8>
					print_ecdbg("Door latch detected\r\n");
800091e2:	fe fc 10 c6 	ld.w	r12,pc[4294]
800091e6:	f0 1f 04 25 	mcall	8000a278 <main+0x14c8>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
800091ea:	30 0c       	mov	r12,0
800091ec:	f0 1f 04 24 	mcall	8000a27c <main+0x14cc>
					electroclaveState = STATE_DOOR_LATCHED;
800091f0:	fe f9 10 a4 	ld.w	r9,pc[4260]
800091f4:	30 18       	mov	r8,1
800091f6:	b2 88       	st.b	r9[0x0],r8
					firstTimeThrough = 1;
800091f8:	fe f9 10 b4 	ld.w	r9,pc[4276]
800091fc:	30 18       	mov	r8,1
800091fe:	b2 88       	st.b	r9[0x0],r8
				}
				break;
80009200:	e0 8f 06 96 	bral	80009f2c <main+0x117c>
				
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
80009204:	33 fc       	mov	r12,63
80009206:	f0 1f 04 28 	mcall	8000a2a4 <main+0x14f4>
8000920a:	18 98       	mov	r8,r12
8000920c:	58 08       	cp.w	r8,0
8000920e:	e0 80 06 88 	breq	80009f1e <main+0x116e>
					print_ecdbg("Action push button press detected\r\n");
80009212:	fe fc 10 9e 	ld.w	r12,pc[4254]
80009216:	f0 1f 04 19 	mcall	8000a278 <main+0x14c8>
					electroclaveState = STATE_ACTION_PB_PRESSED;
8000921a:	fe f9 10 7a 	ld.w	r9,pc[4218]
8000921e:	30 28       	mov	r8,2
80009220:	b2 88       	st.b	r9[0x0],r8
				}
				break;
80009222:	e0 8f 06 85 	bral	80009f2c <main+0x117c>
				
			case STATE_ACTION_PB_PRESSED:
				if (EC_ACTION_PB)
80009226:	33 fc       	mov	r12,63
80009228:	f0 1f 04 1f 	mcall	8000a2a4 <main+0x14f4>
8000922c:	18 98       	mov	r8,r12
8000922e:	ec 18 00 01 	eorl	r8,0x1
80009232:	5c 58       	castu.b	r8
80009234:	e0 80 06 77 	breq	80009f22 <main+0x1172>
				{
					print_ecdbg("Action push button release detected\r\n");
80009238:	fe fc 10 7c 	ld.w	r12,pc[4220]
8000923c:	f0 1f 04 0f 	mcall	8000a278 <main+0x14c8>
					electroclaveState = STATE_ACTION_PB_RELEASED;	
80009240:	fe f9 10 54 	ld.w	r9,pc[4180]
80009244:	30 38       	mov	r8,3
80009246:	b2 88       	st.b	r9[0x0],r8
				}
				break;
80009248:	e0 8f 06 72 	bral	80009f2c <main+0x117c>
				
			case STATE_ACTION_PB_RELEASED:
				check_led_brd_side_lifetimes();
8000924c:	f0 1f 04 1b 	mcall	8000a2b8 <main+0x1508>
				check_shelves_for_devices();
80009250:	f0 1f 04 1b 	mcall	8000a2bc <main+0x150c>
				set_shelves_active_inactive();
80009254:	f0 1f 04 1b 	mcall	8000a2c0 <main+0x1510>
				
				if (num_active_shelves() != 0) {
80009258:	f0 1f 04 1b 	mcall	8000a2c4 <main+0x1514>
8000925c:	18 98       	mov	r8,r12
8000925e:	58 08       	cp.w	r8,0
80009260:	e0 80 01 72 	breq	80009544 <main+0x794>
					electroclaveState = STATE_START_SANITIZE;	
80009264:	fe f9 10 30 	ld.w	r9,pc[4144]
80009268:	30 48       	mov	r8,4
8000926a:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("Start sanitizing\r\n");
8000926c:	fe fc 10 5c 	ld.w	r12,pc[4188]
80009270:	f0 1f 04 02 	mcall	8000a278 <main+0x14c8>
					display_text(IDX_CLEAR);
80009274:	30 9c       	mov	r12,9
80009276:	f0 1f 04 02 	mcall	8000a27c <main+0x14cc>
8000927a:	e0 68 01 f4 	mov	r8,500
8000927e:	ef 48 fe e0 	st.w	r7[-288],r8
80009282:	e0 68 12 00 	mov	r8,4608
80009286:	ea 18 00 7a 	orh	r8,0x7a
8000928a:	ef 48 fe dc 	st.w	r7[-292],r8
8000928e:	ee f8 fe e0 	ld.w	r8,r7[-288]
80009292:	ef 48 fe e8 	st.w	r7[-280],r8
80009296:	ee f8 fe dc 	ld.w	r8,r7[-292]
8000929a:	ef 48 fe e4 	st.w	r7[-284],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000929e:	ee fa fe e8 	ld.w	r10,r7[-280]
800092a2:	ef 4a fd 9c 	st.w	r7[-612],r10
800092a6:	30 08       	mov	r8,0
800092a8:	ef 48 fd 98 	st.w	r7[-616],r8
800092ac:	ee fc fe e4 	ld.w	r12,r7[-284]
800092b0:	ef 4c fd 94 	st.w	r7[-620],r12
800092b4:	30 0a       	mov	r10,0
800092b6:	ef 4a fd 90 	st.w	r7[-624],r10
800092ba:	ee f9 fd 98 	ld.w	r9,r7[-616]
800092be:	ee f8 fd 94 	ld.w	r8,r7[-620]
800092c2:	b1 39       	mul	r9,r8
800092c4:	ee f8 fd 90 	ld.w	r8,r7[-624]
800092c8:	ee fc fd 9c 	ld.w	r12,r7[-612]
800092cc:	b9 38       	mul	r8,r12
800092ce:	10 09       	add	r9,r8
800092d0:	ee f8 fd 9c 	ld.w	r8,r7[-612]
800092d4:	ee fc fd 94 	ld.w	r12,r7[-620]
800092d8:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800092dc:	16 09       	add	r9,r11
800092de:	12 9b       	mov	r11,r9
800092e0:	e0 68 03 e7 	mov	r8,999
800092e4:	30 09       	mov	r9,0
800092e6:	10 0a       	add	r10,r8
800092e8:	f6 09 00 4b 	adc	r11,r11,r9
800092ec:	e0 68 03 e8 	mov	r8,1000
800092f0:	30 09       	mov	r9,0
800092f2:	f0 1f 03 d9 	mcall	8000a254 <main+0x14a4>
800092f6:	14 98       	mov	r8,r10
800092f8:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800092fa:	ef 48 fe f0 	st.w	r7[-272],r8
800092fe:	ee c8 01 b8 	sub	r8,r7,440
80009302:	ef 48 fe ec 	st.w	r7[-276],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009306:	e1 b8 00 42 	mfsr	r8,0x108
8000930a:	10 99       	mov	r9,r8
8000930c:	ee f8 fe ec 	ld.w	r8,r7[-276]
80009310:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009312:	ee f8 fe ec 	ld.w	r8,r7[-276]
80009316:	70 09       	ld.w	r9,r8[0x0]
80009318:	ee f8 fe f0 	ld.w	r8,r7[-272]
8000931c:	10 09       	add	r9,r8
8000931e:	ee f8 fe ec 	ld.w	r8,r7[-276]
80009322:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009324:	ee f9 fe ec 	ld.w	r9,r7[-276]
80009328:	30 08       	mov	r8,0
8000932a:	f3 68 00 08 	st.b	r9[8],r8
8000932e:	ee c8 01 b8 	sub	r8,r7,440
80009332:	ef 48 fe f4 	st.w	r7[-268],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009336:	e1 b8 00 42 	mfsr	r8,0x108
8000933a:	ef 48 fe f8 	st.w	r7[-264],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000933e:	ee f8 fe f4 	ld.w	r8,r7[-268]
80009342:	f1 39 00 08 	ld.ub	r9,r8[8]
80009346:	30 28       	mov	r8,2
80009348:	f0 09 18 00 	cp.b	r9,r8
8000934c:	c0 31       	brne	80009352 <main+0x5a2>
    return false;
8000934e:	30 08       	mov	r8,0
80009350:	c4 38       	rjmp	800093d6 <main+0x626>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009352:	ee f8 fe f4 	ld.w	r8,r7[-268]
80009356:	f1 39 00 08 	ld.ub	r9,r8[8]
8000935a:	30 18       	mov	r8,1
8000935c:	f0 09 18 00 	cp.b	r9,r8
80009360:	c0 31       	brne	80009366 <main+0x5b6>
    return true;
80009362:	30 18       	mov	r8,1
80009364:	c3 98       	rjmp	800093d6 <main+0x626>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009366:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000936a:	70 09       	ld.w	r9,r8[0x0]
8000936c:	ee f8 fe f4 	ld.w	r8,r7[-268]
80009370:	70 18       	ld.w	r8,r8[0x4]
80009372:	10 39       	cp.w	r9,r8
80009374:	e0 88 00 1a 	brls	800093a8 <main+0x5f8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009378:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000937c:	70 09       	ld.w	r9,r8[0x0]
8000937e:	ee f8 fe f8 	ld.w	r8,r7[-264]
80009382:	12 38       	cp.w	r8,r9
80009384:	c1 02       	brcc	800093a4 <main+0x5f4>
80009386:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000938a:	70 19       	ld.w	r9,r8[0x4]
8000938c:	ee f8 fe f8 	ld.w	r8,r7[-264]
80009390:	12 38       	cp.w	r8,r9
80009392:	e0 88 00 09 	brls	800093a4 <main+0x5f4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009396:	ee f9 fe f4 	ld.w	r9,r7[-268]
8000939a:	30 18       	mov	r8,1
8000939c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800093a0:	30 18       	mov	r8,1
800093a2:	c1 a8       	rjmp	800093d6 <main+0x626>
    }
    return false;
800093a4:	30 08       	mov	r8,0
800093a6:	c1 88       	rjmp	800093d6 <main+0x626>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800093a8:	ee f8 fe f4 	ld.w	r8,r7[-268]
800093ac:	70 09       	ld.w	r9,r8[0x0]
800093ae:	ee f8 fe f8 	ld.w	r8,r7[-264]
800093b2:	12 38       	cp.w	r8,r9
800093b4:	c0 93       	brcs	800093c6 <main+0x616>
800093b6:	ee f8 fe f4 	ld.w	r8,r7[-268]
800093ba:	70 19       	ld.w	r9,r8[0x4]
800093bc:	ee f8 fe f8 	ld.w	r8,r7[-264]
800093c0:	12 38       	cp.w	r8,r9
800093c2:	e0 88 00 09 	brls	800093d4 <main+0x624>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800093c6:	ee f9 fe f4 	ld.w	r9,r7[-268]
800093ca:	30 18       	mov	r8,1
800093cc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800093d0:	30 18       	mov	r8,1
800093d2:	c0 28       	rjmp	800093d6 <main+0x626>
    }
    return false;
800093d4:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800093d6:	58 08       	cp.w	r8,0
800093d8:	ca b0       	breq	8000932e <main+0x57e>
					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
800093da:	30 2c       	mov	r12,2
800093dc:	f0 1f 03 a8 	mcall	8000a27c <main+0x14cc>
800093e0:	e0 68 0b b8 	mov	r8,3000
800093e4:	ef 48 ff 00 	st.w	r7[-256],r8
800093e8:	e0 68 12 00 	mov	r8,4608
800093ec:	ea 18 00 7a 	orh	r8,0x7a
800093f0:	ef 48 fe fc 	st.w	r7[-260],r8
800093f4:	ee f8 ff 00 	ld.w	r8,r7[-256]
800093f8:	ef 48 ff 08 	st.w	r7[-248],r8
800093fc:	ee f8 fe fc 	ld.w	r8,r7[-260]
80009400:	ef 48 ff 04 	st.w	r7[-252],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009404:	ee fa ff 08 	ld.w	r10,r7[-248]
80009408:	ef 4a fd ac 	st.w	r7[-596],r10
8000940c:	30 08       	mov	r8,0
8000940e:	ef 48 fd a8 	st.w	r7[-600],r8
80009412:	ee fc ff 04 	ld.w	r12,r7[-252]
80009416:	ef 4c fd a4 	st.w	r7[-604],r12
8000941a:	30 0a       	mov	r10,0
8000941c:	ef 4a fd a0 	st.w	r7[-608],r10
80009420:	ee f9 fd a8 	ld.w	r9,r7[-600]
80009424:	ee f8 fd a4 	ld.w	r8,r7[-604]
80009428:	b1 39       	mul	r9,r8
8000942a:	ee f8 fd a0 	ld.w	r8,r7[-608]
8000942e:	ee fc fd ac 	ld.w	r12,r7[-596]
80009432:	b9 38       	mul	r8,r12
80009434:	10 09       	add	r9,r8
80009436:	ee f8 fd ac 	ld.w	r8,r7[-596]
8000943a:	ee fc fd a4 	ld.w	r12,r7[-604]
8000943e:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009442:	16 09       	add	r9,r11
80009444:	12 9b       	mov	r11,r9
80009446:	e0 68 03 e7 	mov	r8,999
8000944a:	30 09       	mov	r9,0
8000944c:	10 0a       	add	r10,r8
8000944e:	f6 09 00 4b 	adc	r11,r11,r9
80009452:	e0 68 03 e8 	mov	r8,1000
80009456:	30 09       	mov	r9,0
80009458:	f0 1f 03 7f 	mcall	8000a254 <main+0x14a4>
8000945c:	14 98       	mov	r8,r10
8000945e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80009460:	ef 48 ff 10 	st.w	r7[-240],r8
80009464:	ee c8 01 ac 	sub	r8,r7,428
80009468:	ef 48 ff 0c 	st.w	r7[-244],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000946c:	e1 b8 00 42 	mfsr	r8,0x108
80009470:	10 99       	mov	r9,r8
80009472:	ee f8 ff 0c 	ld.w	r8,r7[-244]
80009476:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009478:	ee f8 ff 0c 	ld.w	r8,r7[-244]
8000947c:	70 09       	ld.w	r9,r8[0x0]
8000947e:	ee f8 ff 10 	ld.w	r8,r7[-240]
80009482:	10 09       	add	r9,r8
80009484:	ee f8 ff 0c 	ld.w	r8,r7[-244]
80009488:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000948a:	ee f9 ff 0c 	ld.w	r9,r7[-244]
8000948e:	30 08       	mov	r8,0
80009490:	f3 68 00 08 	st.b	r9[8],r8
80009494:	ee c8 01 ac 	sub	r8,r7,428
80009498:	ef 48 ff 14 	st.w	r7[-236],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000949c:	e1 b8 00 42 	mfsr	r8,0x108
800094a0:	ef 48 ff 18 	st.w	r7[-232],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800094a4:	ee f8 ff 14 	ld.w	r8,r7[-236]
800094a8:	f1 39 00 08 	ld.ub	r9,r8[8]
800094ac:	30 28       	mov	r8,2
800094ae:	f0 09 18 00 	cp.b	r9,r8
800094b2:	c0 31       	brne	800094b8 <main+0x708>
    return false;
800094b4:	30 08       	mov	r8,0
800094b6:	c4 38       	rjmp	8000953c <main+0x78c>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800094b8:	ee f8 ff 14 	ld.w	r8,r7[-236]
800094bc:	f1 39 00 08 	ld.ub	r9,r8[8]
800094c0:	30 18       	mov	r8,1
800094c2:	f0 09 18 00 	cp.b	r9,r8
800094c6:	c0 31       	brne	800094cc <main+0x71c>
    return true;
800094c8:	30 18       	mov	r8,1
800094ca:	c3 98       	rjmp	8000953c <main+0x78c>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800094cc:	ee f8 ff 14 	ld.w	r8,r7[-236]
800094d0:	70 09       	ld.w	r9,r8[0x0]
800094d2:	ee f8 ff 14 	ld.w	r8,r7[-236]
800094d6:	70 18       	ld.w	r8,r8[0x4]
800094d8:	10 39       	cp.w	r9,r8
800094da:	e0 88 00 1a 	brls	8000950e <main+0x75e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800094de:	ee f8 ff 14 	ld.w	r8,r7[-236]
800094e2:	70 09       	ld.w	r9,r8[0x0]
800094e4:	ee f8 ff 18 	ld.w	r8,r7[-232]
800094e8:	12 38       	cp.w	r8,r9
800094ea:	c1 02       	brcc	8000950a <main+0x75a>
800094ec:	ee f8 ff 14 	ld.w	r8,r7[-236]
800094f0:	70 19       	ld.w	r9,r8[0x4]
800094f2:	ee f8 ff 18 	ld.w	r8,r7[-232]
800094f6:	12 38       	cp.w	r8,r9
800094f8:	e0 88 00 09 	brls	8000950a <main+0x75a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800094fc:	ee f9 ff 14 	ld.w	r9,r7[-236]
80009500:	30 18       	mov	r8,1
80009502:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009506:	30 18       	mov	r8,1
80009508:	c1 a8       	rjmp	8000953c <main+0x78c>
    }
    return false;
8000950a:	30 08       	mov	r8,0
8000950c:	c1 88       	rjmp	8000953c <main+0x78c>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000950e:	ee f8 ff 14 	ld.w	r8,r7[-236]
80009512:	70 09       	ld.w	r9,r8[0x0]
80009514:	ee f8 ff 18 	ld.w	r8,r7[-232]
80009518:	12 38       	cp.w	r8,r9
8000951a:	c0 93       	brcs	8000952c <main+0x77c>
8000951c:	ee f8 ff 14 	ld.w	r8,r7[-236]
80009520:	70 19       	ld.w	r9,r8[0x4]
80009522:	ee f8 ff 18 	ld.w	r8,r7[-232]
80009526:	12 38       	cp.w	r8,r9
80009528:	e0 88 00 09 	brls	8000953a <main+0x78a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000952c:	ee f9 ff 14 	ld.w	r9,r7[-236]
80009530:	30 18       	mov	r8,1
80009532:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009536:	30 18       	mov	r8,1
80009538:	c0 28       	rjmp	8000953c <main+0x78c>
    }
    return false;
8000953a:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000953c:	58 08       	cp.w	r8,0
8000953e:	ca b0       	breq	80009494 <main+0x6e4>
					electroclaveState = STATE_START_CLEAN;
					print_ecdbg("No shelves, no devices or shelves are past lifetime, charging devices\r\n");
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
				}
				break;
80009540:	e0 8f 04 f6 	bral	80009f2c <main+0x117c>
					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
					cpu_delay_ms(3000, EC_CPU_CLOCK_FREQ); //give display time to update, scroll all the way across
				}
				else {
					electroclaveState = STATE_START_CLEAN;
80009544:	fe f9 0d 50 	ld.w	r9,pc[3408]
80009548:	30 68       	mov	r8,6
8000954a:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("No shelves, no devices or shelves are past lifetime, charging devices\r\n");
8000954c:	fe fc 0d 80 	ld.w	r12,pc[3456]
80009550:	f0 1f 03 4a 	mcall	8000a278 <main+0x14c8>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
80009554:	30 0c       	mov	r12,0
80009556:	f0 1f 03 4a 	mcall	8000a27c <main+0x14cc>
				}
				break;
8000955a:	e0 8f 04 e9 	bral	80009f2c <main+0x117c>
				
			case STATE_START_SANITIZE:
				display_text(IDX_CLEAR);
8000955e:	30 9c       	mov	r12,9
80009560:	f0 1f 03 47 	mcall	8000a27c <main+0x14cc>
80009564:	e0 68 01 f4 	mov	r8,500
80009568:	ef 48 ff 20 	st.w	r7[-224],r8
8000956c:	e0 68 12 00 	mov	r8,4608
80009570:	ea 18 00 7a 	orh	r8,0x7a
80009574:	ef 48 ff 1c 	st.w	r7[-228],r8
80009578:	ee f8 ff 20 	ld.w	r8,r7[-224]
8000957c:	ef 48 ff 28 	st.w	r7[-216],r8
80009580:	ee f8 ff 1c 	ld.w	r8,r7[-228]
80009584:	ef 48 ff 24 	st.w	r7[-220],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009588:	ee fa ff 28 	ld.w	r10,r7[-216]
8000958c:	ef 4a fd bc 	st.w	r7[-580],r10
80009590:	30 08       	mov	r8,0
80009592:	ef 48 fd b8 	st.w	r7[-584],r8
80009596:	ee fc ff 24 	ld.w	r12,r7[-220]
8000959a:	ef 4c fd b4 	st.w	r7[-588],r12
8000959e:	30 0a       	mov	r10,0
800095a0:	ef 4a fd b0 	st.w	r7[-592],r10
800095a4:	ee f9 fd b8 	ld.w	r9,r7[-584]
800095a8:	ee f8 fd b4 	ld.w	r8,r7[-588]
800095ac:	b1 39       	mul	r9,r8
800095ae:	ee f8 fd b0 	ld.w	r8,r7[-592]
800095b2:	ee fc fd bc 	ld.w	r12,r7[-580]
800095b6:	b9 38       	mul	r8,r12
800095b8:	10 09       	add	r9,r8
800095ba:	ee f8 fd bc 	ld.w	r8,r7[-580]
800095be:	ee fc fd b4 	ld.w	r12,r7[-588]
800095c2:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800095c6:	16 09       	add	r9,r11
800095c8:	12 9b       	mov	r11,r9
800095ca:	e0 68 03 e7 	mov	r8,999
800095ce:	30 09       	mov	r9,0
800095d0:	10 0a       	add	r10,r8
800095d2:	f6 09 00 4b 	adc	r11,r11,r9
800095d6:	e0 68 03 e8 	mov	r8,1000
800095da:	30 09       	mov	r9,0
800095dc:	f0 1f 03 1e 	mcall	8000a254 <main+0x14a4>
800095e0:	14 98       	mov	r8,r10
800095e2:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800095e4:	ef 48 ff 30 	st.w	r7[-208],r8
800095e8:	ee c8 01 a0 	sub	r8,r7,416
800095ec:	ef 48 ff 2c 	st.w	r7[-212],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800095f0:	e1 b8 00 42 	mfsr	r8,0x108
800095f4:	10 99       	mov	r9,r8
800095f6:	ee f8 ff 2c 	ld.w	r8,r7[-212]
800095fa:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800095fc:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80009600:	70 09       	ld.w	r9,r8[0x0]
80009602:	ee f8 ff 30 	ld.w	r8,r7[-208]
80009606:	10 09       	add	r9,r8
80009608:	ee f8 ff 2c 	ld.w	r8,r7[-212]
8000960c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000960e:	ee f9 ff 2c 	ld.w	r9,r7[-212]
80009612:	30 08       	mov	r8,0
80009614:	f3 68 00 08 	st.b	r9[8],r8
80009618:	ee c8 01 a0 	sub	r8,r7,416
8000961c:	ef 48 ff 34 	st.w	r7[-204],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009620:	e1 b8 00 42 	mfsr	r8,0x108
80009624:	ef 48 ff 38 	st.w	r7[-200],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009628:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000962c:	f1 39 00 08 	ld.ub	r9,r8[8]
80009630:	30 28       	mov	r8,2
80009632:	f0 09 18 00 	cp.b	r9,r8
80009636:	c0 31       	brne	8000963c <main+0x88c>
    return false;
80009638:	30 08       	mov	r8,0
8000963a:	c4 38       	rjmp	800096c0 <main+0x910>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000963c:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009640:	f1 39 00 08 	ld.ub	r9,r8[8]
80009644:	30 18       	mov	r8,1
80009646:	f0 09 18 00 	cp.b	r9,r8
8000964a:	c0 31       	brne	80009650 <main+0x8a0>
    return true;
8000964c:	30 18       	mov	r8,1
8000964e:	c3 98       	rjmp	800096c0 <main+0x910>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009650:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009654:	70 09       	ld.w	r9,r8[0x0]
80009656:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000965a:	70 18       	ld.w	r8,r8[0x4]
8000965c:	10 39       	cp.w	r9,r8
8000965e:	e0 88 00 1a 	brls	80009692 <main+0x8e2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009662:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009666:	70 09       	ld.w	r9,r8[0x0]
80009668:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000966c:	12 38       	cp.w	r8,r9
8000966e:	c1 02       	brcc	8000968e <main+0x8de>
80009670:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009674:	70 19       	ld.w	r9,r8[0x4]
80009676:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000967a:	12 38       	cp.w	r8,r9
8000967c:	e0 88 00 09 	brls	8000968e <main+0x8de>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009680:	ee f9 ff 34 	ld.w	r9,r7[-204]
80009684:	30 18       	mov	r8,1
80009686:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000968a:	30 18       	mov	r8,1
8000968c:	c1 a8       	rjmp	800096c0 <main+0x910>
    }
    return false;
8000968e:	30 08       	mov	r8,0
80009690:	c1 88       	rjmp	800096c0 <main+0x910>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009692:	ee f8 ff 34 	ld.w	r8,r7[-204]
80009696:	70 09       	ld.w	r9,r8[0x0]
80009698:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000969c:	12 38       	cp.w	r8,r9
8000969e:	c0 93       	brcs	800096b0 <main+0x900>
800096a0:	ee f8 ff 34 	ld.w	r8,r7[-204]
800096a4:	70 19       	ld.w	r9,r8[0x4]
800096a6:	ee f8 ff 38 	ld.w	r8,r7[-200]
800096aa:	12 38       	cp.w	r8,r9
800096ac:	e0 88 00 09 	brls	800096be <main+0x90e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800096b0:	ee f9 ff 34 	ld.w	r9,r7[-204]
800096b4:	30 18       	mov	r8,1
800096b6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800096ba:	30 18       	mov	r8,1
800096bc:	c0 28       	rjmp	800096c0 <main+0x910>
    }
    return false;
800096be:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800096c0:	58 08       	cp.w	r8,0
800096c2:	ca b0       	breq	80009618 <main+0x868>
				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
800096c4:	fe f9 0c 0c 	ld.w	r9,pc[3084]
800096c8:	3f f8       	mov	r8,-1
800096ca:	b2 88       	st.b	r9[0x0],r8
				sanitizeMinutes = 0;
800096cc:	fe f9 0c 08 	ld.w	r9,pc[3080]
800096d0:	30 08       	mov	r8,0
800096d2:	93 08       	st.w	r9[0x0],r8
				for (int i = 0; i<NUM_SHELVES; i++) {
800096d4:	30 08       	mov	r8,0
800096d6:	ef 48 fe 80 	st.w	r7[-384],r8
800096da:	c4 28       	rjmp	8000975e <main+0x9ae>
					if (shelf[i].active == SHELF_ACTIVE) {
800096dc:	ee f9 fe 80 	ld.w	r9,r7[-384]
800096e0:	fe fa 0b f8 	ld.w	r10,pc[3064]
800096e4:	12 98       	mov	r8,r9
800096e6:	a3 68       	lsl	r8,0x2
800096e8:	12 08       	add	r8,r9
800096ea:	f4 08 00 08 	add	r8,r10,r8
800096ee:	11 89       	ld.ub	r9,r8[0x0]
800096f0:	30 18       	mov	r8,1
800096f2:	f0 09 18 00 	cp.b	r9,r8
800096f6:	c2 f1       	brne	80009754 <main+0x9a4>
						tmpSanitizeMinutes = calc_sanitize_time(i);
800096f8:	ee f8 fe 80 	ld.w	r8,r7[-384]
800096fc:	5c 58       	castu.b	r8
800096fe:	10 9c       	mov	r12,r8
80009700:	f0 1f 02 f7 	mcall	8000a2dc <main+0x152c>
80009704:	18 98       	mov	r8,r12
80009706:	10 99       	mov	r9,r8
80009708:	fe f8 0b d8 	ld.w	r8,pc[3032]
8000970c:	91 09       	st.w	r8[0x0],r9
						
						if (tmpSanitizeMinutes > sanitizeMinutes)
8000970e:	fe f8 0b d2 	ld.w	r8,pc[3026]
80009712:	70 09       	ld.w	r9,r8[0x0]
80009714:	fe f8 0b c0 	ld.w	r8,pc[3008]
80009718:	70 08       	ld.w	r8,r8[0x0]
8000971a:	10 39       	cp.w	r9,r8
8000971c:	e0 88 00 08 	brls	8000972c <main+0x97c>
						{
							sanitizeMinutes = tmpSanitizeMinutes;
80009720:	fe f8 0b c0 	ld.w	r8,pc[3008]
80009724:	70 09       	ld.w	r9,r8[0x0]
80009726:	fe f8 0b ae 	ld.w	r8,pc[2990]
8000972a:	91 09       	st.w	r8[0x0],r9
						}
						
						led_shelf(i, LED_ON);
8000972c:	ee f8 fe 80 	ld.w	r8,r7[-384]
80009730:	5c 58       	castu.b	r8
80009732:	30 1b       	mov	r11,1
80009734:	10 9c       	mov	r12,r8
80009736:	f0 1f 02 ec 	mcall	8000a2e4 <main+0x1534>
						
						if (displayIdx == 0xFF)
8000973a:	fe f8 0b 96 	ld.w	r8,pc[2966]
8000973e:	11 89       	ld.ub	r9,r8[0x0]
80009740:	3f f8       	mov	r8,-1
80009742:	f0 09 18 00 	cp.b	r9,r8
80009746:	c0 71       	brne	80009754 <main+0x9a4>
						{
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
80009748:	ee f8 fe 80 	ld.w	r8,r7[-384]
8000974c:	5c 58       	castu.b	r8
8000974e:	fe f9 0b 82 	ld.w	r9,pc[2946]
80009752:	b2 88       	st.b	r9[0x0],r8
				display_text(IDX_CLEAR);
				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
				sanitizeMinutes = 0;
				for (int i = 0; i<NUM_SHELVES; i++) {
80009754:	ee f8 fe 80 	ld.w	r8,r7[-384]
80009758:	2f f8       	sub	r8,-1
8000975a:	ef 48 fe 80 	st.w	r7[-384],r8
8000975e:	ee f8 fe 80 	ld.w	r8,r7[-384]
80009762:	58 38       	cp.w	r8,3
80009764:	fe 9a ff bc 	brle	800096dc <main+0x92c>
80009768:	e0 68 1f 40 	mov	r8,8000
8000976c:	ef 48 ff 40 	st.w	r7[-192],r8
80009770:	e0 68 12 00 	mov	r8,4608
80009774:	ea 18 00 7a 	orh	r8,0x7a
80009778:	ef 48 ff 3c 	st.w	r7[-196],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000977c:	ee fa ff 40 	ld.w	r10,r7[-192]
80009780:	ef 4a fd cc 	st.w	r7[-564],r10
80009784:	30 08       	mov	r8,0
80009786:	ef 48 fd c8 	st.w	r7[-568],r8
8000978a:	ee fc ff 3c 	ld.w	r12,r7[-196]
8000978e:	ef 4c fd c4 	st.w	r7[-572],r12
80009792:	30 0a       	mov	r10,0
80009794:	ef 4a fd c0 	st.w	r7[-576],r10
80009798:	ee f9 fd c8 	ld.w	r9,r7[-568]
8000979c:	ee f8 fd c4 	ld.w	r8,r7[-572]
800097a0:	b1 39       	mul	r9,r8
800097a2:	ee f8 fd c0 	ld.w	r8,r7[-576]
800097a6:	ee fc fd cc 	ld.w	r12,r7[-564]
800097aa:	b9 38       	mul	r8,r12
800097ac:	10 09       	add	r9,r8
800097ae:	ee f8 fd cc 	ld.w	r8,r7[-564]
800097b2:	ee fc fd c4 	ld.w	r12,r7[-572]
800097b6:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800097ba:	16 09       	add	r9,r11
800097bc:	12 9b       	mov	r11,r9
800097be:	e0 68 03 e7 	mov	r8,999
800097c2:	30 09       	mov	r9,0
800097c4:	10 0a       	add	r10,r8
800097c6:	f6 09 00 4b 	adc	r11,r11,r9
800097ca:	e0 68 03 e8 	mov	r8,1000
800097ce:	30 09       	mov	r9,0
800097d0:	f0 1f 02 a1 	mcall	8000a254 <main+0x14a4>
800097d4:	14 98       	mov	r8,r10
800097d6:	16 99       	mov	r9,r11
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
						}
					}
				}
				
				displayTimerSeconds = cpu_ms_2_cy(8000, EC_CPU_CLOCK_FREQ); //8 seconds per "shelf" display is enough time for the text to scroll twice
800097d8:	10 99       	mov	r9,r8
800097da:	fe f8 0b 0e 	ld.w	r8,pc[2830]
800097de:	91 09       	st.w	r8[0x0],r9
				cpu_set_timeout(displayTimerSeconds, &displayTimer);
800097e0:	fe f8 0b 08 	ld.w	r8,pc[2824]
800097e4:	70 08       	ld.w	r8,r8[0x0]
800097e6:	ef 48 ff 48 	st.w	r7[-184],r8
800097ea:	fe f8 0b 02 	ld.w	r8,pc[2818]
800097ee:	ef 48 ff 44 	st.w	r7[-188],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800097f2:	e1 b8 00 42 	mfsr	r8,0x108
800097f6:	10 99       	mov	r9,r8
800097f8:	ee f8 ff 44 	ld.w	r8,r7[-188]
800097fc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800097fe:	ee f8 ff 44 	ld.w	r8,r7[-188]
80009802:	70 09       	ld.w	r9,r8[0x0]
80009804:	ee f8 ff 48 	ld.w	r8,r7[-184]
80009808:	10 09       	add	r9,r8
8000980a:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000980e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009810:	ee f9 ff 44 	ld.w	r9,r7[-188]
80009814:	30 08       	mov	r8,0
80009816:	f3 68 00 08 	st.b	r9[8],r8
8000981a:	e0 68 03 e8 	mov	r8,1000
8000981e:	ef 48 ff 50 	st.w	r7[-176],r8
80009822:	e0 68 12 00 	mov	r8,4608
80009826:	ea 18 00 7a 	orh	r8,0x7a
8000982a:	ef 48 ff 4c 	st.w	r7[-180],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000982e:	ee fa ff 50 	ld.w	r10,r7[-176]
80009832:	ef 4a fd dc 	st.w	r7[-548],r10
80009836:	30 08       	mov	r8,0
80009838:	ef 48 fd d8 	st.w	r7[-552],r8
8000983c:	ee fc ff 4c 	ld.w	r12,r7[-180]
80009840:	ef 4c fd d4 	st.w	r7[-556],r12
80009844:	30 0a       	mov	r10,0
80009846:	ef 4a fd d0 	st.w	r7[-560],r10
8000984a:	ee f9 fd d8 	ld.w	r9,r7[-552]
8000984e:	ee f8 fd d4 	ld.w	r8,r7[-556]
80009852:	b1 39       	mul	r9,r8
80009854:	ee f8 fd d0 	ld.w	r8,r7[-560]
80009858:	ee fc fd dc 	ld.w	r12,r7[-548]
8000985c:	b9 38       	mul	r8,r12
8000985e:	10 09       	add	r9,r8
80009860:	ee f8 fd dc 	ld.w	r8,r7[-548]
80009864:	ee fc fd d4 	ld.w	r12,r7[-556]
80009868:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000986c:	16 09       	add	r9,r11
8000986e:	12 9b       	mov	r11,r9
80009870:	e0 68 03 e7 	mov	r8,999
80009874:	30 09       	mov	r9,0
80009876:	10 0a       	add	r10,r8
80009878:	f6 09 00 4b 	adc	r11,r11,r9
8000987c:	e0 68 03 e8 	mov	r8,1000
80009880:	30 09       	mov	r9,0
80009882:	f0 1f 02 75 	mcall	8000a254 <main+0x14a4>
80009886:	14 98       	mov	r8,r10
80009888:	16 99       	mov	r9,r11
				
#if 0 //DEBUG: set this to seconds not minutes so we can debug this logic faster 11may15				
				cpu_set_timeout((sanitizeMinutes * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer);
#endif
				cpu_set_timeout((sanitizeMinutes * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer); //DEBUG take this out when done debugging logic, put it back to minutes 11may15
8000988a:	10 99       	mov	r9,r8
8000988c:	fe f8 0a 48 	ld.w	r8,pc[2632]
80009890:	70 08       	ld.w	r8,r8[0x0]
80009892:	f2 08 02 48 	mul	r8,r9,r8
80009896:	ef 48 ff 58 	st.w	r7[-168],r8
8000989a:	fe f8 0a 56 	ld.w	r8,pc[2646]
8000989e:	ef 48 ff 54 	st.w	r7[-172],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800098a2:	e1 b8 00 42 	mfsr	r8,0x108
800098a6:	10 99       	mov	r9,r8
800098a8:	ee f8 ff 54 	ld.w	r8,r7[-172]
800098ac:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800098ae:	ee f8 ff 54 	ld.w	r8,r7[-172]
800098b2:	70 09       	ld.w	r9,r8[0x0]
800098b4:	ee f8 ff 58 	ld.w	r8,r7[-168]
800098b8:	10 09       	add	r9,r8
800098ba:	ee f8 ff 54 	ld.w	r8,r7[-172]
800098be:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800098c0:	ee f9 ff 54 	ld.w	r9,r7[-172]
800098c4:	30 08       	mov	r8,0
800098c6:	f3 68 00 08 	st.b	r9[8],r8
800098ca:	e0 68 03 e8 	mov	r8,1000
800098ce:	ef 48 ff 60 	st.w	r7[-160],r8
800098d2:	e0 68 12 00 	mov	r8,4608
800098d6:	ea 18 00 7a 	orh	r8,0x7a
800098da:	ef 48 ff 5c 	st.w	r7[-164],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800098de:	ee fa ff 60 	ld.w	r10,r7[-160]
800098e2:	ef 4a fd ec 	st.w	r7[-532],r10
800098e6:	30 08       	mov	r8,0
800098e8:	ef 48 fd e8 	st.w	r7[-536],r8
800098ec:	ee fc ff 5c 	ld.w	r12,r7[-164]
800098f0:	ef 4c fd e4 	st.w	r7[-540],r12
800098f4:	30 0a       	mov	r10,0
800098f6:	ef 4a fd e0 	st.w	r7[-544],r10
800098fa:	ee f9 fd e8 	ld.w	r9,r7[-536]
800098fe:	ee f8 fd e4 	ld.w	r8,r7[-540]
80009902:	b1 39       	mul	r9,r8
80009904:	ee f8 fd e0 	ld.w	r8,r7[-544]
80009908:	ee fc fd ec 	ld.w	r12,r7[-532]
8000990c:	b9 38       	mul	r8,r12
8000990e:	10 09       	add	r9,r8
80009910:	ee f8 fd ec 	ld.w	r8,r7[-532]
80009914:	ee fc fd e4 	ld.w	r12,r7[-540]
80009918:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000991c:	16 09       	add	r9,r11
8000991e:	12 9b       	mov	r11,r9
80009920:	e0 68 03 e7 	mov	r8,999
80009924:	30 09       	mov	r9,0
80009926:	10 0a       	add	r10,r8
80009928:	f6 09 00 4b 	adc	r11,r11,r9
8000992c:	e0 68 03 e8 	mov	r8,1000
80009930:	30 09       	mov	r9,0
80009932:	f0 1f 02 49 	mcall	8000a254 <main+0x14a4>
80009936:	14 98       	mov	r8,r10
80009938:	16 99       	mov	r9,r11

				
//DEBUG 11may15 do this once per second for debug				cpu_set_timeout((60 * cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics
				cpu_set_timeout((cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics DEBUG 11may15
8000993a:	ef 48 ff 68 	st.w	r7[-152],r8
8000993e:	fe f8 09 b6 	ld.w	r8,pc[2486]
80009942:	ef 48 ff 64 	st.w	r7[-156],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009946:	e1 b8 00 42 	mfsr	r8,0x108
8000994a:	10 99       	mov	r9,r8
8000994c:	ee f8 ff 64 	ld.w	r8,r7[-156]
80009950:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009952:	ee f8 ff 64 	ld.w	r8,r7[-156]
80009956:	70 09       	ld.w	r9,r8[0x0]
80009958:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000995c:	10 09       	add	r9,r8
8000995e:	ee f8 ff 64 	ld.w	r8,r7[-156]
80009962:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009964:	ee f9 ff 64 	ld.w	r9,r7[-156]
80009968:	30 08       	mov	r8,0
8000996a:	f3 68 00 08 	st.b	r9[8],r8

				electroclaveState = STATE_SANITIZE;
8000996e:	fe f9 09 26 	ld.w	r9,pc[2342]
80009972:	30 58       	mov	r8,5
80009974:	b2 88       	st.b	r9[0x0],r8
				
				break;
80009976:	e0 8f 02 db 	bral	80009f2c <main+0x117c>
8000997a:	fe f8 09 72 	ld.w	r8,pc[2418]
8000997e:	ef 48 ff 6c 	st.w	r7[-148],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009982:	e1 b8 00 42 	mfsr	r8,0x108
80009986:	ef 48 ff 70 	st.w	r7[-144],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000998a:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000998e:	f1 39 00 08 	ld.ub	r9,r8[8]
80009992:	30 28       	mov	r8,2
80009994:	f0 09 18 00 	cp.b	r9,r8
80009998:	c0 31       	brne	8000999e <main+0xbee>
    return false;
8000999a:	30 08       	mov	r8,0
8000999c:	c4 38       	rjmp	80009a22 <main+0xc72>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000999e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800099a2:	f1 39 00 08 	ld.ub	r9,r8[8]
800099a6:	30 18       	mov	r8,1
800099a8:	f0 09 18 00 	cp.b	r9,r8
800099ac:	c0 31       	brne	800099b2 <main+0xc02>
    return true;
800099ae:	30 18       	mov	r8,1
800099b0:	c3 98       	rjmp	80009a22 <main+0xc72>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800099b2:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800099b6:	70 09       	ld.w	r9,r8[0x0]
800099b8:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800099bc:	70 18       	ld.w	r8,r8[0x4]
800099be:	10 39       	cp.w	r9,r8
800099c0:	e0 88 00 1a 	brls	800099f4 <main+0xc44>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800099c4:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800099c8:	70 09       	ld.w	r9,r8[0x0]
800099ca:	ee f8 ff 70 	ld.w	r8,r7[-144]
800099ce:	12 38       	cp.w	r8,r9
800099d0:	c1 02       	brcc	800099f0 <main+0xc40>
800099d2:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800099d6:	70 19       	ld.w	r9,r8[0x4]
800099d8:	ee f8 ff 70 	ld.w	r8,r7[-144]
800099dc:	12 38       	cp.w	r8,r9
800099de:	e0 88 00 09 	brls	800099f0 <main+0xc40>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800099e2:	ee f9 ff 6c 	ld.w	r9,r7[-148]
800099e6:	30 18       	mov	r8,1
800099e8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800099ec:	30 18       	mov	r8,1
800099ee:	c1 a8       	rjmp	80009a22 <main+0xc72>
    }
    return false;
800099f0:	30 08       	mov	r8,0
800099f2:	c1 88       	rjmp	80009a22 <main+0xc72>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800099f4:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800099f8:	70 09       	ld.w	r9,r8[0x0]
800099fa:	ee f8 ff 70 	ld.w	r8,r7[-144]
800099fe:	12 38       	cp.w	r8,r9
80009a00:	c0 93       	brcs	80009a12 <main+0xc62>
80009a02:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80009a06:	70 19       	ld.w	r9,r8[0x4]
80009a08:	ee f8 ff 70 	ld.w	r8,r7[-144]
80009a0c:	12 38       	cp.w	r8,r9
80009a0e:	e0 88 00 09 	brls	80009a20 <main+0xc70>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009a12:	ee f9 ff 6c 	ld.w	r9,r7[-148]
80009a16:	30 18       	mov	r8,1
80009a18:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009a1c:	30 18       	mov	r8,1
80009a1e:	c0 28       	rjmp	80009a22 <main+0xc72>
    }
    return false;
80009a20:	30 08       	mov	r8,0
				
			case STATE_SANITIZE:
				/*
    			 * Manage the display
				 */
				if (cpu_is_timeout(&displayTimer))
80009a22:	58 08       	cp.w	r8,0
80009a24:	c6 90       	breq	80009af6 <main+0xd46>
80009a26:	fe f8 08 c6 	ld.w	r8,pc[2246]
80009a2a:	ef 48 ff 74 	st.w	r7[-140],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80009a2e:	ee f9 ff 74 	ld.w	r9,r7[-140]
80009a32:	30 28       	mov	r8,2
80009a34:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout(&displayTimer);
					switch (displayIdx)
80009a38:	fe f8 08 98 	ld.w	r8,pc[2200]
80009a3c:	11 88       	ld.ub	r8,r8[0x0]
80009a3e:	58 18       	cp.w	r8,1
80009a40:	c0 f0       	breq	80009a5e <main+0xcae>
80009a42:	e0 89 00 05 	brgt	80009a4c <main+0xc9c>
80009a46:	58 08       	cp.w	r8,0
80009a48:	c0 70       	breq	80009a56 <main+0xca6>
80009a4a:	c1 78       	rjmp	80009a78 <main+0xcc8>
80009a4c:	58 28       	cp.w	r8,2
80009a4e:	c0 c0       	breq	80009a66 <main+0xcb6>
80009a50:	58 38       	cp.w	r8,3
80009a52:	c0 e0       	breq	80009a6e <main+0xcbe>
80009a54:	c1 28       	rjmp	80009a78 <main+0xcc8>
					{
						case 0:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF1);
80009a56:	30 5c       	mov	r12,5
80009a58:	f0 1f 02 09 	mcall	8000a27c <main+0x14cc>
							break;
80009a5c:	c0 e8       	rjmp	80009a78 <main+0xcc8>
						case 1:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF2);
80009a5e:	30 6c       	mov	r12,6
80009a60:	f0 1f 02 07 	mcall	8000a27c <main+0x14cc>
							break;
80009a64:	c0 a8       	rjmp	80009a78 <main+0xcc8>
						case 2:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF3);
80009a66:	30 7c       	mov	r12,7
80009a68:	f0 1f 02 05 	mcall	8000a27c <main+0x14cc>
							break;
80009a6c:	c0 68       	rjmp	80009a78 <main+0xcc8>
						case 3:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF4);
80009a6e:	30 8c       	mov	r12,8
80009a70:	f0 1f 02 03 	mcall	8000a27c <main+0x14cc>
80009a74:	c0 28       	rjmp	80009a78 <main+0xcc8>
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
80009a76:	d7 03       	nop
							break;
					}
					
					while (1)
					{
						if (++displayIdx >= NUM_SHELVES)
80009a78:	fe f8 08 58 	ld.w	r8,pc[2136]
80009a7c:	11 88       	ld.ub	r8,r8[0x0]
80009a7e:	2f f8       	sub	r8,-1
80009a80:	5c 58       	castu.b	r8
80009a82:	fe f9 08 4e 	ld.w	r9,pc[2126]
80009a86:	b2 88       	st.b	r9[0x0],r8
80009a88:	fe f8 08 48 	ld.w	r8,pc[2120]
80009a8c:	11 89       	ld.ub	r9,r8[0x0]
80009a8e:	30 38       	mov	r8,3
80009a90:	f0 09 18 00 	cp.b	r9,r8
80009a94:	e0 88 00 06 	brls	80009aa0 <main+0xcf0>
						{
							displayIdx = 0; //12apr15 wrap around
80009a98:	fe f9 08 38 	ld.w	r9,pc[2104]
80009a9c:	30 08       	mov	r8,0
80009a9e:	b2 88       	st.b	r9[0x0],r8
						}
						
						if (shelf[displayIdx].active)
80009aa0:	fe f8 08 30 	ld.w	r8,pc[2096]
80009aa4:	11 88       	ld.ub	r8,r8[0x0]
80009aa6:	10 99       	mov	r9,r8
80009aa8:	fe fa 08 30 	ld.w	r10,pc[2096]
80009aac:	12 98       	mov	r8,r9
80009aae:	a3 68       	lsl	r8,0x2
80009ab0:	12 08       	add	r8,r9
80009ab2:	f4 08 00 08 	add	r8,r10,r8
80009ab6:	11 88       	ld.ub	r8,r8[0x0]
80009ab8:	58 08       	cp.w	r8,0
80009aba:	cd e0       	breq	80009a76 <main+0xcc6>
							break; //this shelf is active, we don't need to look for another one
						}
						
					}

					cpu_set_timeout(displayTimerSeconds, &displayTimer); //8 seconds per shelf
80009abc:	fe f8 08 2c 	ld.w	r8,pc[2092]
80009ac0:	70 08       	ld.w	r8,r8[0x0]
80009ac2:	ef 48 ff 7c 	st.w	r7[-132],r8
80009ac6:	fe f8 08 26 	ld.w	r8,pc[2086]
80009aca:	ef 48 ff 78 	st.w	r7[-136],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009ace:	e1 b8 00 42 	mfsr	r8,0x108
80009ad2:	10 99       	mov	r9,r8
80009ad4:	ee f8 ff 78 	ld.w	r8,r7[-136]
80009ad8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009ada:	ee f8 ff 78 	ld.w	r8,r7[-136]
80009ade:	70 09       	ld.w	r9,r8[0x0]
80009ae0:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80009ae4:	10 09       	add	r9,r8
80009ae6:	ee f8 ff 78 	ld.w	r8,r7[-136]
80009aea:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009aec:	ee f9 ff 78 	ld.w	r9,r7[-136]
80009af0:	30 08       	mov	r8,0
80009af2:	f3 68 00 08 	st.b	r9[8],r8
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
80009af6:	fe f8 07 fe 	ld.w	r8,pc[2046]
80009afa:	ef 48 ff 80 	st.w	r7[-128],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009afe:	e1 b8 00 42 	mfsr	r8,0x108
80009b02:	ef 48 ff 84 	st.w	r7[-124],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009b06:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009b0a:	f1 39 00 08 	ld.ub	r9,r8[8]
80009b0e:	30 28       	mov	r8,2
80009b10:	f0 09 18 00 	cp.b	r9,r8
80009b14:	c0 31       	brne	80009b1a <main+0xd6a>
    return false;
80009b16:	30 08       	mov	r8,0
80009b18:	c4 38       	rjmp	80009b9e <main+0xdee>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009b1a:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009b1e:	f1 39 00 08 	ld.ub	r9,r8[8]
80009b22:	30 18       	mov	r8,1
80009b24:	f0 09 18 00 	cp.b	r9,r8
80009b28:	c0 31       	brne	80009b2e <main+0xd7e>
    return true;
80009b2a:	30 18       	mov	r8,1
80009b2c:	c3 98       	rjmp	80009b9e <main+0xdee>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009b2e:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009b32:	70 09       	ld.w	r9,r8[0x0]
80009b34:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009b38:	70 18       	ld.w	r8,r8[0x4]
80009b3a:	10 39       	cp.w	r9,r8
80009b3c:	e0 88 00 1a 	brls	80009b70 <main+0xdc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009b40:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009b44:	70 09       	ld.w	r9,r8[0x0]
80009b46:	ee f8 ff 84 	ld.w	r8,r7[-124]
80009b4a:	12 38       	cp.w	r8,r9
80009b4c:	c1 02       	brcc	80009b6c <main+0xdbc>
80009b4e:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009b52:	70 19       	ld.w	r9,r8[0x4]
80009b54:	ee f8 ff 84 	ld.w	r8,r7[-124]
80009b58:	12 38       	cp.w	r8,r9
80009b5a:	e0 88 00 09 	brls	80009b6c <main+0xdbc>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009b5e:	ee f9 ff 80 	ld.w	r9,r7[-128]
80009b62:	30 18       	mov	r8,1
80009b64:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009b68:	30 18       	mov	r8,1
80009b6a:	c1 a8       	rjmp	80009b9e <main+0xdee>
    }
    return false;
80009b6c:	30 08       	mov	r8,0
80009b6e:	c1 88       	rjmp	80009b9e <main+0xdee>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009b70:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009b74:	70 09       	ld.w	r9,r8[0x0]
80009b76:	ee f8 ff 84 	ld.w	r8,r7[-124]
80009b7a:	12 38       	cp.w	r8,r9
80009b7c:	c0 93       	brcs	80009b8e <main+0xdde>
80009b7e:	ee f8 ff 80 	ld.w	r8,r7[-128]
80009b82:	70 19       	ld.w	r9,r8[0x4]
80009b84:	ee f8 ff 84 	ld.w	r8,r7[-124]
80009b88:	12 38       	cp.w	r8,r9
80009b8a:	e0 88 00 09 	brls	80009b9c <main+0xdec>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009b8e:	ee f9 ff 80 	ld.w	r9,r7[-128]
80009b92:	30 18       	mov	r8,1
80009b94:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009b98:	30 18       	mov	r8,1
80009b9a:	c0 28       	rjmp	80009b9e <main+0xdee>
    }
    return false;
80009b9c:	30 08       	mov	r8,0
				}

				/*
    			 * Manage storing usage statistics to flash
				 */
				if (cpu_is_timeout (&oneMinuteTimer))
80009b9e:	58 08       	cp.w	r8,0
80009ba0:	c5 e0       	breq	80009c5c <main+0xeac>
80009ba2:	fe f8 07 52 	ld.w	r8,pc[1874]
80009ba6:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80009baa:	ee f9 ff 88 	ld.w	r9,r7[-120]
80009bae:	30 28       	mov	r8,2
80009bb0:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout (&oneMinuteTimer);
					
					increment_ledBoard_usage_min(); //increments usage minutes for active shelves only
80009bb4:	f0 1f 01 d1 	mcall	8000a2f8 <main+0x1548>
80009bb8:	e0 68 03 e8 	mov	r8,1000
80009bbc:	ef 48 ff 90 	st.w	r7[-112],r8
80009bc0:	e0 68 12 00 	mov	r8,4608
80009bc4:	ea 18 00 7a 	orh	r8,0x7a
80009bc8:	ef 48 ff 8c 	st.w	r7[-116],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009bcc:	ee fa ff 90 	ld.w	r10,r7[-112]
80009bd0:	ef 4a fd fc 	st.w	r7[-516],r10
80009bd4:	30 08       	mov	r8,0
80009bd6:	ef 48 fd f8 	st.w	r7[-520],r8
80009bda:	ee fc ff 8c 	ld.w	r12,r7[-116]
80009bde:	ef 4c fd f4 	st.w	r7[-524],r12
80009be2:	30 0a       	mov	r10,0
80009be4:	ef 4a fd f0 	st.w	r7[-528],r10
80009be8:	ee f9 fd f8 	ld.w	r9,r7[-520]
80009bec:	ee f8 fd f4 	ld.w	r8,r7[-524]
80009bf0:	b1 39       	mul	r9,r8
80009bf2:	ee f8 fd f0 	ld.w	r8,r7[-528]
80009bf6:	ee fc fd fc 	ld.w	r12,r7[-516]
80009bfa:	b9 38       	mul	r8,r12
80009bfc:	10 09       	add	r9,r8
80009bfe:	ee f8 fd fc 	ld.w	r8,r7[-516]
80009c02:	ee fc fd f4 	ld.w	r12,r7[-524]
80009c06:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009c0a:	16 09       	add	r9,r11
80009c0c:	12 9b       	mov	r11,r9
80009c0e:	e0 68 03 e7 	mov	r8,999
80009c12:	30 09       	mov	r9,0
80009c14:	10 0a       	add	r10,r8
80009c16:	f6 09 00 4b 	adc	r11,r11,r9
80009c1a:	e0 68 03 e8 	mov	r8,1000
80009c1e:	30 09       	mov	r9,0
80009c20:	f0 1f 01 8d 	mcall	8000a254 <main+0x14a4>
80009c24:	14 98       	mov	r8,r10
80009c26:	16 99       	mov	r9,r11
					
//DEBUG 11may15 set to one second for debug					cpu_set_timeout(cpu_ms_2_cy(60000, EC_CPU_CLOCK_FREQ), &oneMinuteTimer); //one minute for the usage statistics
					cpu_set_timeout((cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics DEBUG 11may15 one second instead of one minute
80009c28:	ef 48 ff 98 	st.w	r7[-104],r8
80009c2c:	fe f8 06 c8 	ld.w	r8,pc[1736]
80009c30:	ef 48 ff 94 	st.w	r7[-108],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009c34:	e1 b8 00 42 	mfsr	r8,0x108
80009c38:	10 99       	mov	r9,r8
80009c3a:	ee f8 ff 94 	ld.w	r8,r7[-108]
80009c3e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009c40:	ee f8 ff 94 	ld.w	r8,r7[-108]
80009c44:	70 09       	ld.w	r9,r8[0x0]
80009c46:	ee f8 ff 98 	ld.w	r8,r7[-104]
80009c4a:	10 09       	add	r9,r8
80009c4c:	ee f8 ff 94 	ld.w	r8,r7[-108]
80009c50:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009c52:	ee f9 ff 94 	ld.w	r9,r7[-108]
80009c56:	30 08       	mov	r8,0
80009c58:	f3 68 00 08 	st.b	r9[8],r8
80009c5c:	fe f8 06 94 	ld.w	r8,pc[1684]
80009c60:	ef 48 ff 9c 	st.w	r7[-100],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009c64:	e1 b8 00 42 	mfsr	r8,0x108
80009c68:	ef 48 ff a0 	st.w	r7[-96],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009c6c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009c70:	f1 39 00 08 	ld.ub	r9,r8[8]
80009c74:	30 28       	mov	r8,2
80009c76:	f0 09 18 00 	cp.b	r9,r8
80009c7a:	c0 31       	brne	80009c80 <main+0xed0>
    return false;
80009c7c:	30 08       	mov	r8,0
80009c7e:	c4 38       	rjmp	80009d04 <main+0xf54>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009c80:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009c84:	f1 39 00 08 	ld.ub	r9,r8[8]
80009c88:	30 18       	mov	r8,1
80009c8a:	f0 09 18 00 	cp.b	r9,r8
80009c8e:	c0 31       	brne	80009c94 <main+0xee4>
    return true;
80009c90:	30 18       	mov	r8,1
80009c92:	c3 98       	rjmp	80009d04 <main+0xf54>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009c94:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009c98:	70 09       	ld.w	r9,r8[0x0]
80009c9a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009c9e:	70 18       	ld.w	r8,r8[0x4]
80009ca0:	10 39       	cp.w	r9,r8
80009ca2:	e0 88 00 1a 	brls	80009cd6 <main+0xf26>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009ca6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009caa:	70 09       	ld.w	r9,r8[0x0]
80009cac:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009cb0:	12 38       	cp.w	r8,r9
80009cb2:	c1 02       	brcc	80009cd2 <main+0xf22>
80009cb4:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009cb8:	70 19       	ld.w	r9,r8[0x4]
80009cba:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009cbe:	12 38       	cp.w	r8,r9
80009cc0:	e0 88 00 09 	brls	80009cd2 <main+0xf22>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009cc4:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80009cc8:	30 18       	mov	r8,1
80009cca:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009cce:	30 18       	mov	r8,1
80009cd0:	c1 a8       	rjmp	80009d04 <main+0xf54>
    }
    return false;
80009cd2:	30 08       	mov	r8,0
80009cd4:	c1 88       	rjmp	80009d04 <main+0xf54>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009cd6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009cda:	70 09       	ld.w	r9,r8[0x0]
80009cdc:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009ce0:	12 38       	cp.w	r8,r9
80009ce2:	c0 93       	brcs	80009cf4 <main+0xf44>
80009ce4:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009ce8:	70 19       	ld.w	r9,r8[0x4]
80009cea:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009cee:	12 38       	cp.w	r8,r9
80009cf0:	e0 88 00 09 	brls	80009d02 <main+0xf52>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009cf4:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80009cf8:	30 18       	mov	r8,1
80009cfa:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009cfe:	30 18       	mov	r8,1
80009d00:	c0 28       	rjmp	80009d04 <main+0xf54>
    }
    return false;
80009d02:	30 08       	mov	r8,0
				}
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
80009d04:	58 08       	cp.w	r8,0
80009d06:	e0 80 01 10 	breq	80009f26 <main+0x1176>
					
					for (int i=0; i< NUM_SHELVES; i++)
80009d0a:	30 08       	mov	r8,0
80009d0c:	ef 48 fe 84 	st.w	r7[-380],r8
80009d10:	c0 d8       	rjmp	80009d2a <main+0xf7a>
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
80009d12:	ee f8 fe 84 	ld.w	r8,r7[-380]
80009d16:	5c 58       	castu.b	r8
80009d18:	30 0b       	mov	r11,0
80009d1a:	10 9c       	mov	r12,r8
80009d1c:	f0 1f 01 72 	mcall	8000a2e4 <main+0x1534>
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
					
					for (int i=0; i< NUM_SHELVES; i++)
80009d20:	ee f8 fe 84 	ld.w	r8,r7[-380]
80009d24:	2f f8       	sub	r8,-1
80009d26:	ef 48 fe 84 	st.w	r7[-380],r8
80009d2a:	ee f8 fe 84 	ld.w	r8,r7[-380]
80009d2e:	58 38       	cp.w	r8,3
80009d30:	fe 9a ff f1 	brle	80009d12 <main+0xf62>
80009d34:	fe f8 05 bc 	ld.w	r8,pc[1468]
80009d38:	ef 48 ff a4 	st.w	r7[-92],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80009d3c:	ee f9 ff a4 	ld.w	r9,r7[-92]
80009d40:	30 28       	mov	r8,2
80009d42:	f3 68 00 08 	st.b	r9[8],r8
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
80009d46:	fe fc 05 b6 	ld.w	r12,pc[1462]
80009d4a:	f0 1f 01 4c 	mcall	8000a278 <main+0x14c8>
					electroclaveState = STATE_START_CLEAN;
80009d4e:	fe f9 05 46 	ld.w	r9,pc[1350]
80009d52:	30 68       	mov	r8,6
80009d54:	b2 88       	st.b	r9[0x0],r8
				}
				break;
80009d56:	ce b8       	rjmp	80009f2c <main+0x117c>
				
			case STATE_START_CLEAN:
				display_text(IDX_CLEAN);
80009d58:	30 1c       	mov	r12,1
80009d5a:	f0 1f 01 49 	mcall	8000a27c <main+0x14cc>
				electroclaveState = STATE_CLEAN;
80009d5e:	fe f9 05 36 	ld.w	r9,pc[1334]
80009d62:	30 78       	mov	r8,7
80009d64:	b2 88       	st.b	r9[0x0],r8
80009d66:	e0 68 03 e8 	mov	r8,1000
80009d6a:	ef 48 ff ac 	st.w	r7[-84],r8
80009d6e:	e0 68 12 00 	mov	r8,4608
80009d72:	ea 18 00 7a 	orh	r8,0x7a
80009d76:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009d7a:	ee fa ff ac 	ld.w	r10,r7[-84]
80009d7e:	ef 4a fe 0c 	st.w	r7[-500],r10
80009d82:	30 08       	mov	r8,0
80009d84:	ef 48 fe 08 	st.w	r7[-504],r8
80009d88:	ee fc ff a8 	ld.w	r12,r7[-88]
80009d8c:	ef 4c fe 04 	st.w	r7[-508],r12
80009d90:	30 0a       	mov	r10,0
80009d92:	ef 4a fe 00 	st.w	r7[-512],r10
80009d96:	ee f9 fe 08 	ld.w	r9,r7[-504]
80009d9a:	ee f8 fe 04 	ld.w	r8,r7[-508]
80009d9e:	b1 39       	mul	r9,r8
80009da0:	ee f8 fe 00 	ld.w	r8,r7[-512]
80009da4:	ee fc fe 0c 	ld.w	r12,r7[-500]
80009da8:	b9 38       	mul	r8,r12
80009daa:	10 09       	add	r9,r8
80009dac:	ee f8 fe 0c 	ld.w	r8,r7[-500]
80009db0:	ee fc fe 04 	ld.w	r12,r7[-508]
80009db4:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009db8:	16 09       	add	r9,r11
80009dba:	12 9b       	mov	r11,r9
80009dbc:	e0 68 03 e7 	mov	r8,999
80009dc0:	30 09       	mov	r9,0
80009dc2:	10 0a       	add	r10,r8
80009dc4:	f6 09 00 4b 	adc	r11,r11,r9
80009dc8:	e0 68 03 e8 	mov	r8,1000
80009dcc:	30 09       	mov	r9,0
80009dce:	f0 1f 01 22 	mcall	8000a254 <main+0x14a4>
80009dd2:	14 98       	mov	r8,r10
80009dd4:	16 99       	mov	r9,r11
#if 0 //DEBUG do this in seconds to debug logic 11may15				
				cpu_set_timeout((20 * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //TODO: this time period will be parameterized from the technician UART interface
#endif
				cpu_set_timeout((20 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //DEBUG 11may15 
80009dd6:	10 99       	mov	r9,r8
80009dd8:	12 98       	mov	r8,r9
80009dda:	a3 68       	lsl	r8,0x2
80009ddc:	12 08       	add	r8,r9
80009dde:	a3 68       	lsl	r8,0x2
80009de0:	ef 48 ff b4 	st.w	r7[-76],r8
80009de4:	fe f8 05 1c 	ld.w	r8,pc[1308]
80009de8:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009dec:	e1 b8 00 42 	mfsr	r8,0x108
80009df0:	10 99       	mov	r9,r8
80009df2:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009df6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009df8:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009dfc:	70 09       	ld.w	r9,r8[0x0]
80009dfe:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009e02:	10 09       	add	r9,r8
80009e04:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009e08:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009e0a:	ee f9 ff b0 	ld.w	r9,r7[-80]
80009e0e:	30 08       	mov	r8,0
80009e10:	f3 68 00 08 	st.b	r9[8],r8

				break;	
80009e14:	c8 c8       	rjmp	80009f2c <main+0x117c>
80009e16:	fe f8 04 ea 	ld.w	r8,pc[1258]
80009e1a:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009e1e:	e1 b8 00 42 	mfsr	r8,0x108
80009e22:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009e26:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009e2a:	f1 39 00 08 	ld.ub	r9,r8[8]
80009e2e:	30 28       	mov	r8,2
80009e30:	f0 09 18 00 	cp.b	r9,r8
80009e34:	c0 31       	brne	80009e3a <main+0x108a>
    return false;
80009e36:	30 08       	mov	r8,0
80009e38:	c4 38       	rjmp	80009ebe <main+0x110e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009e3a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009e3e:	f1 39 00 08 	ld.ub	r9,r8[8]
80009e42:	30 18       	mov	r8,1
80009e44:	f0 09 18 00 	cp.b	r9,r8
80009e48:	c0 31       	brne	80009e4e <main+0x109e>
    return true;
80009e4a:	30 18       	mov	r8,1
80009e4c:	c3 98       	rjmp	80009ebe <main+0x110e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009e4e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009e52:	70 09       	ld.w	r9,r8[0x0]
80009e54:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009e58:	70 18       	ld.w	r8,r8[0x4]
80009e5a:	10 39       	cp.w	r9,r8
80009e5c:	e0 88 00 1a 	brls	80009e90 <main+0x10e0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009e60:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009e64:	70 09       	ld.w	r9,r8[0x0]
80009e66:	ee f8 ff bc 	ld.w	r8,r7[-68]
80009e6a:	12 38       	cp.w	r8,r9
80009e6c:	c1 02       	brcc	80009e8c <main+0x10dc>
80009e6e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009e72:	70 19       	ld.w	r9,r8[0x4]
80009e74:	ee f8 ff bc 	ld.w	r8,r7[-68]
80009e78:	12 38       	cp.w	r8,r9
80009e7a:	e0 88 00 09 	brls	80009e8c <main+0x10dc>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009e7e:	ee f9 ff b8 	ld.w	r9,r7[-72]
80009e82:	30 18       	mov	r8,1
80009e84:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009e88:	30 18       	mov	r8,1
80009e8a:	c1 a8       	rjmp	80009ebe <main+0x110e>
    }
    return false;
80009e8c:	30 08       	mov	r8,0
80009e8e:	c1 88       	rjmp	80009ebe <main+0x110e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009e90:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009e94:	70 09       	ld.w	r9,r8[0x0]
80009e96:	ee f8 ff bc 	ld.w	r8,r7[-68]
80009e9a:	12 38       	cp.w	r8,r9
80009e9c:	c0 93       	brcs	80009eae <main+0x10fe>
80009e9e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009ea2:	70 19       	ld.w	r9,r8[0x4]
80009ea4:	ee f8 ff bc 	ld.w	r8,r7[-68]
80009ea8:	12 38       	cp.w	r8,r9
80009eaa:	e0 88 00 09 	brls	80009ebc <main+0x110c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009eae:	ee f9 ff b8 	ld.w	r9,r7[-72]
80009eb2:	30 18       	mov	r8,1
80009eb4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009eb8:	30 18       	mov	r8,1
80009eba:	c0 28       	rjmp	80009ebe <main+0x110e>
    }
    return false;
80009ebc:	30 08       	mov	r8,0
				
			case STATE_CLEAN:
				if (cpu_is_timeout(&cleanTimer)) {
80009ebe:	58 08       	cp.w	r8,0
80009ec0:	c3 50       	breq	80009f2a <main+0x117a>
80009ec2:	fe f8 04 3e 	ld.w	r8,pc[1086]
80009ec6:	ef 48 ff c0 	st.w	r7[-64],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80009eca:	ee f9 ff c0 	ld.w	r9,r7[-64]
80009ece:	30 28       	mov	r8,2
80009ed0:	f3 68 00 08 	st.b	r9[8],r8
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
80009ed4:	fe f9 03 c0 	ld.w	r9,pc[960]
80009ed8:	30 38       	mov	r8,3
80009eda:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("Start sanitizing\r\n");
80009edc:	fe fc 03 ec 	ld.w	r12,pc[1004]
80009ee0:	f0 1f 00 e6 	mcall	8000a278 <main+0x14c8>

				}
				break;
80009ee4:	c2 48       	rjmp	80009f2c <main+0x117c>
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
80009ee6:	30 08       	mov	r8,0
80009ee8:	ef 48 fe 88 	st.w	r7[-376],r8
80009eec:	c0 d8       	rjmp	80009f06 <main+0x1156>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
80009eee:	ee f8 fe 88 	ld.w	r8,r7[-376]
80009ef2:	5c 58       	castu.b	r8
80009ef4:	30 0b       	mov	r11,0
80009ef6:	10 9c       	mov	r12,r8
80009ef8:	f0 1f 00 fb 	mcall	8000a2e4 <main+0x1534>
				}
				break;
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
80009efc:	ee f8 fe 88 	ld.w	r8,r7[-376]
80009f00:	2f f8       	sub	r8,-1
80009f02:	ef 48 fe 88 	st.w	r7[-376],r8
80009f06:	ee f8 fe 88 	ld.w	r8,r7[-376]
80009f0a:	58 38       	cp.w	r8,3
80009f0c:	fe 9a ff f1 	brle	80009eee <main+0x113e>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				electroclaveState = STATE_EC_IDLE;
80009f10:	fe f9 03 84 	ld.w	r9,pc[900]
80009f14:	30 08       	mov	r8,0
80009f16:	b2 88       	st.b	r9[0x0],r8
80009f18:	c0 a8       	rjmp	80009f2c <main+0x117c>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
					electroclaveState = STATE_DOOR_LATCHED;
					firstTimeThrough = 1;
				}
				break;
80009f1a:	d7 03       	nop
80009f1c:	c0 88       	rjmp	80009f2c <main+0x117c>
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
					print_ecdbg("Action push button press detected\r\n");
					electroclaveState = STATE_ACTION_PB_PRESSED;
				}
				break;
80009f1e:	d7 03       	nop
80009f20:	c0 68       	rjmp	80009f2c <main+0x117c>
				if (EC_ACTION_PB)
				{
					print_ecdbg("Action push button release detected\r\n");
					electroclaveState = STATE_ACTION_PB_RELEASED;	
				}
				break;
80009f22:	d7 03       	nop
80009f24:	c0 48       	rjmp	80009f2c <main+0x117c>
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
					electroclaveState = STATE_START_CLEAN;
				}
				break;
80009f26:	d7 03       	nop
80009f28:	c0 28       	rjmp	80009f2c <main+0x117c>
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
					print_ecdbg("Start sanitizing\r\n");

				}
				break;
80009f2a:	d7 03       	nop
		
		/*
		 * This check overrides everything going on in the state machine, if the user opens the door,
		 * shut down all processes for safety
		 */
		if (!EC_DOOR_LATCHED) {
80009f2c:	33 ec       	mov	r12,62
80009f2e:	f0 1f 00 de 	mcall	8000a2a4 <main+0x14f4>
80009f32:	18 98       	mov	r8,r12
80009f34:	58 08       	cp.w	r8,0
80009f36:	e0 80 00 d2 	breq	8000a0da <main+0x132a>
		
			if (firstTimeThrough)
80009f3a:	fe f8 03 72 	ld.w	r8,pc[882]
80009f3e:	11 88       	ld.ub	r8,r8[0x0]
80009f40:	58 08       	cp.w	r8,0
80009f42:	e0 80 00 cc 	breq	8000a0da <main+0x132a>
			{
				door_latch_open_kill_all_shelves();
80009f46:	f0 1f 00 f0 	mcall	8000a304 <main+0x1554>

				display_text(IDX_CLEAR);
80009f4a:	30 9c       	mov	r12,9
80009f4c:	f0 1f 00 cc 	mcall	8000a27c <main+0x14cc>
80009f50:	e0 68 01 f4 	mov	r8,500
80009f54:	ef 48 ff c8 	st.w	r7[-56],r8
80009f58:	e0 68 12 00 	mov	r8,4608
80009f5c:	ea 18 00 7a 	orh	r8,0x7a
80009f60:	ef 48 ff c4 	st.w	r7[-60],r8
80009f64:	ee f8 ff c8 	ld.w	r8,r7[-56]
80009f68:	ef 48 ff d0 	st.w	r7[-48],r8
80009f6c:	ee f8 ff c4 	ld.w	r8,r7[-60]
80009f70:	ef 48 ff cc 	st.w	r7[-52],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009f74:	ee fa ff d0 	ld.w	r10,r7[-48]
80009f78:	ef 4a fe 1c 	st.w	r7[-484],r10
80009f7c:	30 08       	mov	r8,0
80009f7e:	ef 48 fe 18 	st.w	r7[-488],r8
80009f82:	ee fc ff cc 	ld.w	r12,r7[-52]
80009f86:	ef 4c fe 14 	st.w	r7[-492],r12
80009f8a:	30 0a       	mov	r10,0
80009f8c:	ef 4a fe 10 	st.w	r7[-496],r10
80009f90:	ee f9 fe 18 	ld.w	r9,r7[-488]
80009f94:	ee f8 fe 14 	ld.w	r8,r7[-492]
80009f98:	b1 39       	mul	r9,r8
80009f9a:	ee f8 fe 10 	ld.w	r8,r7[-496]
80009f9e:	ee fc fe 1c 	ld.w	r12,r7[-484]
80009fa2:	b9 38       	mul	r8,r12
80009fa4:	10 09       	add	r9,r8
80009fa6:	ee f8 fe 1c 	ld.w	r8,r7[-484]
80009faa:	ee fc fe 14 	ld.w	r12,r7[-492]
80009fae:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009fb2:	16 09       	add	r9,r11
80009fb4:	12 9b       	mov	r11,r9
80009fb6:	e0 68 03 e7 	mov	r8,999
80009fba:	30 09       	mov	r9,0
80009fbc:	10 0a       	add	r10,r8
80009fbe:	f6 09 00 4b 	adc	r11,r11,r9
80009fc2:	e0 68 03 e8 	mov	r8,1000
80009fc6:	30 09       	mov	r9,0
80009fc8:	f0 1f 00 a3 	mcall	8000a254 <main+0x14a4>
80009fcc:	14 98       	mov	r8,r10
80009fce:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80009fd0:	ef 48 ff d8 	st.w	r7[-40],r8
80009fd4:	ee c8 01 94 	sub	r8,r7,404
80009fd8:	ef 48 ff d4 	st.w	r7[-44],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009fdc:	e1 b8 00 42 	mfsr	r8,0x108
80009fe0:	10 99       	mov	r9,r8
80009fe2:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009fe6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009fe8:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009fec:	70 09       	ld.w	r9,r8[0x0]
80009fee:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009ff2:	10 09       	add	r9,r8
80009ff4:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009ff8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009ffa:	ee f9 ff d4 	ld.w	r9,r7[-44]
80009ffe:	30 08       	mov	r8,0
8000a000:	f3 68 00 08 	st.b	r9[8],r8
8000a004:	ee c8 01 94 	sub	r8,r7,404
8000a008:	ef 48 ff dc 	st.w	r7[-36],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a00c:	e1 b8 00 42 	mfsr	r8,0x108
8000a010:	ef 48 ff e0 	st.w	r7[-32],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000a014:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a018:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a01c:	30 28       	mov	r8,2
8000a01e:	f0 09 18 00 	cp.b	r9,r8
8000a022:	c0 31       	brne	8000a028 <main+0x1278>
    return false;
8000a024:	30 08       	mov	r8,0
8000a026:	c4 38       	rjmp	8000a0ac <main+0x12fc>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000a028:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a02c:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a030:	30 18       	mov	r8,1
8000a032:	f0 09 18 00 	cp.b	r9,r8
8000a036:	c0 31       	brne	8000a03c <main+0x128c>
    return true;
8000a038:	30 18       	mov	r8,1
8000a03a:	c3 98       	rjmp	8000a0ac <main+0x12fc>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a03c:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a040:	70 09       	ld.w	r9,r8[0x0]
8000a042:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a046:	70 18       	ld.w	r8,r8[0x4]
8000a048:	10 39       	cp.w	r9,r8
8000a04a:	e0 88 00 1a 	brls	8000a07e <main+0x12ce>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a04e:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a052:	70 09       	ld.w	r9,r8[0x0]
8000a054:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a058:	12 38       	cp.w	r8,r9
8000a05a:	c1 02       	brcc	8000a07a <main+0x12ca>
8000a05c:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a060:	70 19       	ld.w	r9,r8[0x4]
8000a062:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a066:	12 38       	cp.w	r8,r9
8000a068:	e0 88 00 09 	brls	8000a07a <main+0x12ca>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000a06c:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000a070:	30 18       	mov	r8,1
8000a072:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000a076:	30 18       	mov	r8,1
8000a078:	c1 a8       	rjmp	8000a0ac <main+0x12fc>
    }
    return false;
8000a07a:	30 08       	mov	r8,0
8000a07c:	c1 88       	rjmp	8000a0ac <main+0x12fc>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a07e:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a082:	70 09       	ld.w	r9,r8[0x0]
8000a084:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a088:	12 38       	cp.w	r8,r9
8000a08a:	c0 93       	brcs	8000a09c <main+0x12ec>
8000a08c:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a090:	70 19       	ld.w	r9,r8[0x4]
8000a092:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a096:	12 38       	cp.w	r8,r9
8000a098:	e0 88 00 09 	brls	8000a0aa <main+0x12fa>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000a09c:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000a0a0:	30 18       	mov	r8,1
8000a0a2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000a0a6:	30 18       	mov	r8,1
8000a0a8:	c0 28       	rjmp	8000a0ac <main+0x12fc>
    }
    return false;
8000a0aa:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000a0ac:	58 08       	cp.w	r8,0
8000a0ae:	ca b0       	breq	8000a004 <main+0x1254>
				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
				switch (electroclaveState)
8000a0b0:	4f 98       	lddpc	r8,8000a294 <main+0x14e4>
8000a0b2:	11 88       	ld.ub	r8,r8[0x0]
8000a0b4:	58 58       	cp.w	r8,5
8000a0b6:	c0 51       	brne	8000a0c0 <main+0x1310>
				{
					case STATE_SANITIZE:
						display_text(IDX_DIRTY);
8000a0b8:	30 3c       	mov	r12,3
8000a0ba:	f0 1f 00 71 	mcall	8000a27c <main+0x14cc>
						break;
8000a0be:	c0 48       	rjmp	8000a0c6 <main+0x1316>
					
					default:
						display_text(IDX_CLEAN);
8000a0c0:	30 1c       	mov	r12,1
8000a0c2:	f0 1f 00 6f 	mcall	8000a27c <main+0x14cc>
						break;
				}

				electroclaveState = STATE_SHUTDOWN_PROCESSES;
8000a0c6:	4f 49       	lddpc	r9,8000a294 <main+0x14e4>
8000a0c8:	30 88       	mov	r8,8
8000a0ca:	b2 88       	st.b	r9[0x0],r8
				print_ecdbg("Door latch opened, shutting down all processes\r\n");
8000a0cc:	fe fc 02 3c 	ld.w	r12,pc[572]
8000a0d0:	f0 1f 00 6a 	mcall	8000a278 <main+0x14c8>
				firstTimeThrough = 0;
8000a0d4:	4f 69       	lddpc	r9,8000a2ac <main+0x14fc>
8000a0d6:	30 08       	mov	r8,0
8000a0d8:	b2 88       	st.b	r9[0x0],r8
8000a0da:	4f 18       	lddpc	r8,8000a29c <main+0x14ec>
8000a0dc:	ef 48 ff e4 	st.w	r7[-28],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000a0e0:	e1 b8 00 42 	mfsr	r8,0x108
8000a0e4:	ef 48 ff e8 	st.w	r7[-24],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000a0e8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a0ec:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a0f0:	30 28       	mov	r8,2
8000a0f2:	f0 09 18 00 	cp.b	r9,r8
8000a0f6:	c0 31       	brne	8000a0fc <main+0x134c>
    return false;
8000a0f8:	30 08       	mov	r8,0
8000a0fa:	c4 38       	rjmp	8000a180 <main+0x13d0>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000a0fc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a100:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a104:	30 18       	mov	r8,1
8000a106:	f0 09 18 00 	cp.b	r9,r8
8000a10a:	c0 31       	brne	8000a110 <main+0x1360>
    return true;
8000a10c:	30 18       	mov	r8,1
8000a10e:	c3 98       	rjmp	8000a180 <main+0x13d0>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000a110:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a114:	70 09       	ld.w	r9,r8[0x0]
8000a116:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a11a:	70 18       	ld.w	r8,r8[0x4]
8000a11c:	10 39       	cp.w	r9,r8
8000a11e:	e0 88 00 1a 	brls	8000a152 <main+0x13a2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000a122:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a126:	70 09       	ld.w	r9,r8[0x0]
8000a128:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000a12c:	12 38       	cp.w	r8,r9
8000a12e:	c1 02       	brcc	8000a14e <main+0x139e>
8000a130:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a134:	70 19       	ld.w	r9,r8[0x4]
8000a136:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000a13a:	12 38       	cp.w	r8,r9
8000a13c:	e0 88 00 09 	brls	8000a14e <main+0x139e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000a140:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a144:	30 18       	mov	r8,1
8000a146:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000a14a:	30 18       	mov	r8,1
8000a14c:	c1 a8       	rjmp	8000a180 <main+0x13d0>
    }
    return false;
8000a14e:	30 08       	mov	r8,0
8000a150:	c1 88       	rjmp	8000a180 <main+0x13d0>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000a152:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a156:	70 09       	ld.w	r9,r8[0x0]
8000a158:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000a15c:	12 38       	cp.w	r8,r9
8000a15e:	c0 93       	brcs	8000a170 <main+0x13c0>
8000a160:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a164:	70 19       	ld.w	r9,r8[0x4]
8000a166:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000a16a:	12 38       	cp.w	r8,r9
8000a16c:	e0 88 00 09 	brls	8000a17e <main+0x13ce>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000a170:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a174:	30 18       	mov	r8,1
8000a176:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000a17a:	30 18       	mov	r8,1
8000a17c:	c0 28       	rjmp	8000a180 <main+0x13d0>
    }
    return false;
8000a17e:	30 08       	mov	r8,0
				
			}
		} //if (!EC_DOOR_LATCHED)
		
		if (cpu_is_timeout(&debugTimer))
8000a180:	58 08       	cp.w	r8,0
8000a182:	fe 90 f8 18 	breq	800091b2 <main+0x402>
8000a186:	4c 68       	lddpc	r8,8000a29c <main+0x14ec>
8000a188:	ef 48 ff ec 	st.w	r7[-20],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000a18c:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a190:	30 28       	mov	r8,2
8000a192:	f3 68 00 08 	st.b	r9[8],r8
8000a196:	e0 68 03 e8 	mov	r8,1000
8000a19a:	ef 48 ff f4 	st.w	r7[-12],r8
8000a19e:	e0 68 12 00 	mov	r8,4608
8000a1a2:	ea 18 00 7a 	orh	r8,0x7a
8000a1a6:	ef 48 ff f0 	st.w	r7[-16],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000a1aa:	ee fa ff f4 	ld.w	r10,r7[-12]
8000a1ae:	ef 4a fe 2c 	st.w	r7[-468],r10
8000a1b2:	30 08       	mov	r8,0
8000a1b4:	ef 48 fe 28 	st.w	r7[-472],r8
8000a1b8:	ee fc ff f0 	ld.w	r12,r7[-16]
8000a1bc:	ef 4c fe 24 	st.w	r7[-476],r12
8000a1c0:	30 0a       	mov	r10,0
8000a1c2:	ef 4a fe 20 	st.w	r7[-480],r10
8000a1c6:	ee f9 fe 28 	ld.w	r9,r7[-472]
8000a1ca:	ee f8 fe 24 	ld.w	r8,r7[-476]
8000a1ce:	b1 39       	mul	r9,r8
8000a1d0:	ee f8 fe 20 	ld.w	r8,r7[-480]
8000a1d4:	ee fc fe 2c 	ld.w	r12,r7[-468]
8000a1d8:	b9 38       	mul	r8,r12
8000a1da:	10 09       	add	r9,r8
8000a1dc:	ee f8 fe 2c 	ld.w	r8,r7[-468]
8000a1e0:	ee fc fe 24 	ld.w	r12,r7[-476]
8000a1e4:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000a1e8:	16 09       	add	r9,r11
8000a1ea:	12 9b       	mov	r11,r9
8000a1ec:	e0 68 03 e7 	mov	r8,999
8000a1f0:	30 09       	mov	r9,0
8000a1f2:	10 0a       	add	r10,r8
8000a1f4:	f6 09 00 4b 	adc	r11,r11,r9
8000a1f8:	e0 68 03 e8 	mov	r8,1000
8000a1fc:	30 09       	mov	r9,0
8000a1fe:	f0 1f 00 16 	mcall	8000a254 <main+0x14a4>
8000a202:	14 98       	mov	r8,r10
8000a204:	16 99       	mov	r9,r11
		{
			cpu_stop_timeout(&debugTimer);
			cpu_set_timeout((EC_ONE_SECOND/2), &debugTimer);
8000a206:	a1 98       	lsr	r8,0x1
8000a208:	ef 48 ff fc 	st.w	r7[-4],r8
8000a20c:	4a 48       	lddpc	r8,8000a29c <main+0x14ec>
8000a20e:	ef 48 ff f8 	st.w	r7[-8],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000a212:	e1 b8 00 42 	mfsr	r8,0x108
8000a216:	10 99       	mov	r9,r8
8000a218:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a21c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000a21e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a222:	70 09       	ld.w	r9,r8[0x0]
8000a224:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a228:	10 09       	add	r9,r8
8000a22a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a22e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000a230:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a234:	30 08       	mov	r8,0
8000a236:	f3 68 00 08 	st.b	r9[8],r8
			gpio_toggle_pin(ECLAVE_DEBUG_LED);
8000a23a:	37 cc       	mov	r12,124
8000a23c:	f0 1f 00 05 	mcall	8000a250 <main+0x14a0>
		}
	} //while(true)
8000a240:	fe 9f f7 ba 	bral	800091b4 <main+0x404>
8000a244:	80 00       	ld.sh	r0,r0[0x0]
8000a246:	74 64       	ld.w	r4,r10[0x18]
8000a248:	80 00       	ld.sh	r0,r0[0x0]
8000a24a:	69 2c       	ld.w	r12,r4[0x48]
8000a24c:	80 00       	ld.sh	r0,r0[0x0]
8000a24e:	8a b4       	ld.uh	r4,r5[0x6]
8000a250:	80 00       	ld.sh	r0,r0[0x0]
8000a252:	4b 76       	lddpc	r6,8000a32c <__avr32_f64_mul+0x20>
8000a254:	80 00       	ld.sh	r0,r0[0x0]
8000a256:	aa 62       	st.h	r5[0xc],r2
8000a258:	80 00       	ld.sh	r0,r0[0x0]
8000a25a:	65 f0       	ld.w	r0,r2[0x7c]
8000a25c:	80 00       	ld.sh	r0,r0[0x0]
8000a25e:	67 28       	ld.w	r8,r3[0x48]
8000a260:	80 00       	ld.sh	r0,r0[0x0]
8000a262:	5d 9c       	*unknown*
8000a264:	80 00       	ld.sh	r0,r0[0x0]
8000a266:	5c 9c       	brev	r12
8000a268:	80 00       	ld.sh	r0,r0[0x0]
8000a26a:	5b e4       	cp.w	r4,-2
8000a26c:	80 00       	ld.sh	r0,r0[0x0]
8000a26e:	32 38       	mov	r8,35
8000a270:	80 00       	ld.sh	r0,r0[0x0]
8000a272:	32 5c       	mov	r12,37
8000a274:	80 00       	ld.sh	r0,r0[0x0]
8000a276:	64 a0       	ld.w	r0,r2[0x28]
8000a278:	80 00       	ld.sh	r0,r0[0x0]
8000a27a:	33 38       	mov	r8,51
8000a27c:	80 00       	ld.sh	r0,r0[0x0]
8000a27e:	68 c0       	ld.w	r0,r4[0x30]
8000a280:	80 00       	ld.sh	r0,r0[0x0]
8000a282:	74 c4       	ld.w	r4,r10[0x30]
8000a284:	80 00       	ld.sh	r0,r0[0x0]
8000a286:	4c 3c       	lddpc	r12,8000a390 <__avr32_f64_mul+0x84>
8000a288:	80 00       	ld.sh	r0,r0[0x0]
8000a28a:	75 10       	ld.w	r0,r10[0x44]
8000a28c:	80 00       	ld.sh	r0,r0[0x0]
8000a28e:	4b 02       	lddpc	r2,8000a34c <__avr32_f64_mul+0x40>
8000a290:	80 00       	ld.sh	r0,r0[0x0]
8000a292:	60 9c       	ld.w	r12,r0[0x24]
8000a294:	00 00       	add	r0,r0
8000a296:	0b 44       	ld.w	r4,--r5
8000a298:	80 00       	ld.sh	r0,r0[0x0]
8000a29a:	4b 3c       	lddpc	r12,8000a364 <__avr32_f64_mul+0x58>
8000a29c:	00 00       	add	r0,r0
8000a29e:	03 74       	ld.ub	r4,--r1
8000a2a0:	80 00       	ld.sh	r0,r0[0x0]
8000a2a2:	b3 d8       	cbr	r8,0x13
8000a2a4:	80 00       	ld.sh	r0,r0[0x0]
8000a2a6:	4a c6       	lddpc	r6,8000a354 <__avr32_f64_mul+0x48>
8000a2a8:	80 00       	ld.sh	r0,r0[0x0]
8000a2aa:	64 ec       	ld.w	r12,r2[0x38]
8000a2ac:	00 00       	add	r0,r0
8000a2ae:	00 b0       	st.h	r0++,r0
8000a2b0:	80 00       	ld.sh	r0,r0[0x0]
8000a2b2:	65 04       	ld.w	r4,r2[0x40]
8000a2b4:	80 00       	ld.sh	r0,r0[0x0]
8000a2b6:	65 28       	ld.w	r8,r2[0x48]
8000a2b8:	80 00       	ld.sh	r0,r0[0x0]
8000a2ba:	6e 1c       	ld.w	r12,r7[0x4]
8000a2bc:	80 00       	ld.sh	r0,r0[0x0]
8000a2be:	70 f0       	ld.w	r0,r8[0x3c]
8000a2c0:	80 00       	ld.sh	r0,r0[0x0]
8000a2c2:	71 64       	ld.w	r4,r8[0x58]
8000a2c4:	80 00       	ld.sh	r0,r0[0x0]
8000a2c6:	74 50       	ld.w	r0,r10[0x14]
8000a2c8:	80 00       	ld.sh	r0,r0[0x0]
8000a2ca:	65 50       	ld.w	r0,r2[0x54]
8000a2cc:	80 00       	ld.sh	r0,r0[0x0]
8000a2ce:	65 64       	ld.w	r4,r2[0x58]
8000a2d0:	00 00       	add	r0,r0
8000a2d2:	02 b4       	st.h	r1++,r4
8000a2d4:	00 00       	add	r0,r0
8000a2d6:	03 58       	ld.sh	r8,--r1
8000a2d8:	00 00       	add	r0,r0
8000a2da:	03 38       	ld.ub	r8,r1++
8000a2dc:	80 00       	ld.sh	r0,r0[0x0]
8000a2de:	75 90       	ld.w	r0,r10[0x64]
8000a2e0:	00 00       	add	r0,r0
8000a2e2:	03 60       	ld.uh	r0,--r1
8000a2e4:	80 00       	ld.sh	r0,r0[0x0]
8000a2e6:	62 f8       	ld.w	r8,r1[0x3c]
8000a2e8:	00 00       	add	r0,r0
8000a2ea:	02 e0       	st.h	--r1,r0
8000a2ec:	00 00       	add	r0,r0
8000a2ee:	0b 04       	ld.w	r4,r5++
8000a2f0:	00 00       	add	r0,r0
8000a2f2:	03 4c       	ld.w	r12,--r1
8000a2f4:	00 00       	add	r0,r0
8000a2f6:	0b 48       	ld.w	r8,--r5
8000a2f8:	80 00       	ld.sh	r0,r0[0x0]
8000a2fa:	83 cc       	st.w	r1[0x30],r12
8000a2fc:	80 00       	ld.sh	r0,r0[0x0]
8000a2fe:	65 ac       	ld.w	r12,r2[0x68]
8000a300:	00 00       	add	r0,r0
8000a302:	0b 10       	ld.sh	r0,r5++
8000a304:	80 00       	ld.sh	r0,r0[0x0]
8000a306:	76 60       	ld.w	r0,r11[0x18]
8000a308:	80 00       	ld.sh	r0,r0[0x0]
8000a30a:	65 bc       	ld.w	r12,r2[0x6c]

8000a30c <__avr32_f64_mul>:
8000a30c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000a310:	e0 80 00 dc 	breq	8000a4c8 <__avr32_f64_mul_op1_zero>
8000a314:	d4 21       	pushm	r4-r7,lr
8000a316:	f7 e9 20 0e 	eor	lr,r11,r9
8000a31a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000a31e:	30 15       	mov	r5,1
8000a320:	c4 30       	breq	8000a3a6 <__avr32_f64_mul_op1_subnormal>
8000a322:	ab 6b       	lsl	r11,0xa
8000a324:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000a328:	ab 6a       	lsl	r10,0xa
8000a32a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000a32e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000a332:	c5 c0       	breq	8000a3ea <__avr32_f64_mul_op2_subnormal>
8000a334:	a1 78       	lsl	r8,0x1
8000a336:	5c f9       	rol	r9
8000a338:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000a33c:	e0 47 07 ff 	cp.w	r7,2047
8000a340:	c7 70       	breq	8000a42e <__avr32_f64_mul_op_nan_or_inf>
8000a342:	e0 46 07 ff 	cp.w	r6,2047
8000a346:	c7 40       	breq	8000a42e <__avr32_f64_mul_op_nan_or_inf>
8000a348:	ee 06 00 0c 	add	r12,r7,r6
8000a34c:	e0 2c 03 fe 	sub	r12,1022
8000a350:	f6 08 06 44 	mulu.d	r4,r11,r8
8000a354:	f4 09 07 44 	macu.d	r4,r10,r9
8000a358:	f4 08 06 46 	mulu.d	r6,r10,r8
8000a35c:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000a360:	08 07       	add	r7,r4
8000a362:	f4 05 00 4a 	adc	r10,r10,r5
8000a366:	5c 0b       	acr	r11
8000a368:	ed bb 00 14 	bld	r11,0x14
8000a36c:	c0 50       	breq	8000a376 <__avr32_f64_mul+0x6a>
8000a36e:	a1 77       	lsl	r7,0x1
8000a370:	5c fa       	rol	r10
8000a372:	5c fb       	rol	r11
8000a374:	20 1c       	sub	r12,1
8000a376:	58 0c       	cp.w	r12,0
8000a378:	e0 8a 00 6f 	brle	8000a456 <__avr32_f64_mul_res_subnormal>
8000a37c:	e0 4c 07 ff 	cp.w	r12,2047
8000a380:	e0 84 00 9c 	brge	8000a4b8 <__avr32_f64_mul_res_inf>
8000a384:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000a388:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000a38c:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000a390:	ee 17 80 00 	eorh	r7,0x8000
8000a394:	f1 b7 04 20 	satu	r7,0x1
8000a398:	0e 0a       	add	r10,r7
8000a39a:	5c 0b       	acr	r11
8000a39c:	ed be 00 1f 	bld	lr,0x1f
8000a3a0:	ef bb 00 1f 	bst	r11,0x1f
8000a3a4:	d8 22       	popm	r4-r7,pc

8000a3a6 <__avr32_f64_mul_op1_subnormal>:
8000a3a6:	e4 1b 00 0f 	andh	r11,0xf
8000a3aa:	f4 0c 12 00 	clz	r12,r10
8000a3ae:	f6 06 12 00 	clz	r6,r11
8000a3b2:	f7 bc 03 e1 	sublo	r12,-31
8000a3b6:	f8 06 17 30 	movlo	r6,r12
8000a3ba:	f7 b6 02 01 	subhs	r6,1
8000a3be:	e0 46 00 20 	cp.w	r6,32
8000a3c2:	c0 d4       	brge	8000a3dc <__avr32_f64_mul_op1_subnormal+0x36>
8000a3c4:	ec 0c 11 20 	rsub	r12,r6,32
8000a3c8:	f6 06 09 4b 	lsl	r11,r11,r6
8000a3cc:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000a3d0:	18 4b       	or	r11,r12
8000a3d2:	f4 06 09 4a 	lsl	r10,r10,r6
8000a3d6:	20 b6       	sub	r6,11
8000a3d8:	0c 17       	sub	r7,r6
8000a3da:	ca ab       	rjmp	8000a32e <__avr32_f64_mul+0x22>
8000a3dc:	f4 06 09 4b 	lsl	r11,r10,r6
8000a3e0:	c6 40       	breq	8000a4a8 <__avr32_f64_mul_res_zero>
8000a3e2:	30 0a       	mov	r10,0
8000a3e4:	20 b6       	sub	r6,11
8000a3e6:	0c 17       	sub	r7,r6
8000a3e8:	ca 3b       	rjmp	8000a32e <__avr32_f64_mul+0x22>

8000a3ea <__avr32_f64_mul_op2_subnormal>:
8000a3ea:	e4 19 00 0f 	andh	r9,0xf
8000a3ee:	f0 0c 12 00 	clz	r12,r8
8000a3f2:	f2 05 12 00 	clz	r5,r9
8000a3f6:	f7 bc 03 ea 	sublo	r12,-22
8000a3fa:	f8 05 17 30 	movlo	r5,r12
8000a3fe:	f7 b5 02 0a 	subhs	r5,10
8000a402:	e0 45 00 20 	cp.w	r5,32
8000a406:	c0 d4       	brge	8000a420 <__avr32_f64_mul_op2_subnormal+0x36>
8000a408:	ea 0c 11 20 	rsub	r12,r5,32
8000a40c:	f2 05 09 49 	lsl	r9,r9,r5
8000a410:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000a414:	18 49       	or	r9,r12
8000a416:	f0 05 09 48 	lsl	r8,r8,r5
8000a41a:	20 25       	sub	r5,2
8000a41c:	0a 16       	sub	r6,r5
8000a41e:	c8 fb       	rjmp	8000a33c <__avr32_f64_mul+0x30>
8000a420:	f0 05 09 49 	lsl	r9,r8,r5
8000a424:	c4 20       	breq	8000a4a8 <__avr32_f64_mul_res_zero>
8000a426:	30 08       	mov	r8,0
8000a428:	20 25       	sub	r5,2
8000a42a:	0a 16       	sub	r6,r5
8000a42c:	c8 8b       	rjmp	8000a33c <__avr32_f64_mul+0x30>

8000a42e <__avr32_f64_mul_op_nan_or_inf>:
8000a42e:	e4 19 00 0f 	andh	r9,0xf
8000a432:	e4 1b 00 0f 	andh	r11,0xf
8000a436:	14 4b       	or	r11,r10
8000a438:	10 49       	or	r9,r8
8000a43a:	e0 47 07 ff 	cp.w	r7,2047
8000a43e:	c0 91       	brne	8000a450 <__avr32_f64_mul_op1_not_naninf>
8000a440:	58 0b       	cp.w	r11,0
8000a442:	c3 81       	brne	8000a4b2 <__avr32_f64_mul_res_nan>
8000a444:	e0 46 07 ff 	cp.w	r6,2047
8000a448:	c3 81       	brne	8000a4b8 <__avr32_f64_mul_res_inf>
8000a44a:	58 09       	cp.w	r9,0
8000a44c:	c3 60       	breq	8000a4b8 <__avr32_f64_mul_res_inf>
8000a44e:	c3 28       	rjmp	8000a4b2 <__avr32_f64_mul_res_nan>

8000a450 <__avr32_f64_mul_op1_not_naninf>:
8000a450:	58 09       	cp.w	r9,0
8000a452:	c3 30       	breq	8000a4b8 <__avr32_f64_mul_res_inf>
8000a454:	c2 f8       	rjmp	8000a4b2 <__avr32_f64_mul_res_nan>

8000a456 <__avr32_f64_mul_res_subnormal>:
8000a456:	5c 3c       	neg	r12
8000a458:	2f fc       	sub	r12,-1
8000a45a:	f1 bc 04 c0 	satu	r12,0x6
8000a45e:	e0 4c 00 20 	cp.w	r12,32
8000a462:	c1 14       	brge	8000a484 <__avr32_f64_mul_res_subnormal+0x2e>
8000a464:	f8 08 11 20 	rsub	r8,r12,32
8000a468:	0e 46       	or	r6,r7
8000a46a:	ee 0c 0a 47 	lsr	r7,r7,r12
8000a46e:	f4 08 09 49 	lsl	r9,r10,r8
8000a472:	12 47       	or	r7,r9
8000a474:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a478:	f6 08 09 49 	lsl	r9,r11,r8
8000a47c:	12 4a       	or	r10,r9
8000a47e:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000a482:	c8 3b       	rjmp	8000a388 <__avr32_f64_mul+0x7c>
8000a484:	f8 08 11 20 	rsub	r8,r12,32
8000a488:	f9 b9 00 00 	moveq	r9,0
8000a48c:	c0 30       	breq	8000a492 <__avr32_f64_mul_res_subnormal+0x3c>
8000a48e:	f6 08 09 49 	lsl	r9,r11,r8
8000a492:	0e 46       	or	r6,r7
8000a494:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000a498:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a49c:	f3 ea 10 07 	or	r7,r9,r10
8000a4a0:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000a4a4:	30 0b       	mov	r11,0
8000a4a6:	c7 1b       	rjmp	8000a388 <__avr32_f64_mul+0x7c>

8000a4a8 <__avr32_f64_mul_res_zero>:
8000a4a8:	1c 9b       	mov	r11,lr
8000a4aa:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a4ae:	30 0a       	mov	r10,0
8000a4b0:	d8 22       	popm	r4-r7,pc

8000a4b2 <__avr32_f64_mul_res_nan>:
8000a4b2:	3f fb       	mov	r11,-1
8000a4b4:	3f fa       	mov	r10,-1
8000a4b6:	d8 22       	popm	r4-r7,pc

8000a4b8 <__avr32_f64_mul_res_inf>:
8000a4b8:	f0 6b 00 00 	mov	r11,-1048576
8000a4bc:	ed be 00 1f 	bld	lr,0x1f
8000a4c0:	ef bb 00 1f 	bst	r11,0x1f
8000a4c4:	30 0a       	mov	r10,0
8000a4c6:	d8 22       	popm	r4-r7,pc

8000a4c8 <__avr32_f64_mul_op1_zero>:
8000a4c8:	f7 e9 20 0b 	eor	r11,r11,r9
8000a4cc:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a4d0:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000a4d4:	e0 4c 07 ff 	cp.w	r12,2047
8000a4d8:	5e 1c       	retne	r12
8000a4da:	3f fa       	mov	r10,-1
8000a4dc:	3f fb       	mov	r11,-1
8000a4de:	5e fc       	retal	r12

8000a4e0 <__avr32_f64_sub_from_add>:
8000a4e0:	ee 19 80 00 	eorh	r9,0x8000

8000a4e4 <__avr32_f64_sub>:
8000a4e4:	f7 e9 20 0c 	eor	r12,r11,r9
8000a4e8:	e0 86 00 ca 	brmi	8000a67c <__avr32_f64_add_from_sub>
8000a4ec:	eb cd 40 e0 	pushm	r5-r7,lr
8000a4f0:	16 9c       	mov	r12,r11
8000a4f2:	e6 1c 80 00 	andh	r12,0x8000,COH
8000a4f6:	bf db       	cbr	r11,0x1f
8000a4f8:	bf d9       	cbr	r9,0x1f
8000a4fa:	10 3a       	cp.w	r10,r8
8000a4fc:	f2 0b 13 00 	cpc	r11,r9
8000a500:	c0 92       	brcc	8000a512 <__avr32_f64_sub+0x2e>
8000a502:	16 97       	mov	r7,r11
8000a504:	12 9b       	mov	r11,r9
8000a506:	0e 99       	mov	r9,r7
8000a508:	14 97       	mov	r7,r10
8000a50a:	10 9a       	mov	r10,r8
8000a50c:	0e 98       	mov	r8,r7
8000a50e:	ee 1c 80 00 	eorh	r12,0x8000
8000a512:	f6 07 16 14 	lsr	r7,r11,0x14
8000a516:	ab 7b       	lsl	r11,0xb
8000a518:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000a51c:	ab 7a       	lsl	r10,0xb
8000a51e:	bf bb       	sbr	r11,0x1f
8000a520:	f2 06 16 14 	lsr	r6,r9,0x14
8000a524:	c4 40       	breq	8000a5ac <__avr32_f64_sub_opL_subnormal>
8000a526:	ab 79       	lsl	r9,0xb
8000a528:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000a52c:	ab 78       	lsl	r8,0xb
8000a52e:	bf b9       	sbr	r9,0x1f

8000a530 <__avr32_f64_sub_opL_subnormal_done>:
8000a530:	e0 47 07 ff 	cp.w	r7,2047
8000a534:	c4 f0       	breq	8000a5d2 <__avr32_f64_sub_opH_nan_or_inf>
8000a536:	0e 26       	rsub	r6,r7
8000a538:	c1 20       	breq	8000a55c <__avr32_f64_sub_shift_done>
8000a53a:	ec 05 11 20 	rsub	r5,r6,32
8000a53e:	e0 46 00 20 	cp.w	r6,32
8000a542:	c7 c2       	brcc	8000a63a <__avr32_f64_sub_longshift>
8000a544:	f0 05 09 4e 	lsl	lr,r8,r5
8000a548:	f2 05 09 45 	lsl	r5,r9,r5
8000a54c:	f0 06 0a 48 	lsr	r8,r8,r6
8000a550:	f2 06 0a 49 	lsr	r9,r9,r6
8000a554:	0a 48       	or	r8,r5
8000a556:	58 0e       	cp.w	lr,0
8000a558:	5f 1e       	srne	lr
8000a55a:	1c 48       	or	r8,lr

8000a55c <__avr32_f64_sub_shift_done>:
8000a55c:	10 1a       	sub	r10,r8
8000a55e:	f6 09 01 4b 	sbc	r11,r11,r9
8000a562:	f6 06 12 00 	clz	r6,r11
8000a566:	c0 e0       	breq	8000a582 <__avr32_f64_sub_longnormalize_done>
8000a568:	c7 83       	brcs	8000a658 <__avr32_f64_sub_longnormalize>
8000a56a:	ec 0e 11 20 	rsub	lr,r6,32
8000a56e:	f6 06 09 4b 	lsl	r11,r11,r6
8000a572:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a576:	1c 4b       	or	r11,lr
8000a578:	f4 06 09 4a 	lsl	r10,r10,r6
8000a57c:	0c 17       	sub	r7,r6
8000a57e:	e0 8a 00 39 	brle	8000a5f0 <__avr32_f64_sub_subnormal_result>

8000a582 <__avr32_f64_sub_longnormalize_done>:
8000a582:	f4 09 15 15 	lsl	r9,r10,0x15
8000a586:	ab 9a       	lsr	r10,0xb
8000a588:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a58c:	ab 9b       	lsr	r11,0xb
8000a58e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a592:	18 4b       	or	r11,r12

8000a594 <__avr32_f64_sub_round>:
8000a594:	fc 17 80 00 	movh	r7,0x8000
8000a598:	ed ba 00 00 	bld	r10,0x0
8000a59c:	f7 b7 01 ff 	subne	r7,-1
8000a5a0:	0e 39       	cp.w	r9,r7
8000a5a2:	5f 29       	srhs	r9
8000a5a4:	12 0a       	add	r10,r9
8000a5a6:	5c 0b       	acr	r11
8000a5a8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a5ac <__avr32_f64_sub_opL_subnormal>:
8000a5ac:	ab 79       	lsl	r9,0xb
8000a5ae:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000a5b2:	ab 78       	lsl	r8,0xb
8000a5b4:	f3 e8 10 0e 	or	lr,r9,r8
8000a5b8:	f9 b6 01 01 	movne	r6,1
8000a5bc:	ee 0e 11 00 	rsub	lr,r7,0
8000a5c0:	f9 b7 00 01 	moveq	r7,1
8000a5c4:	ef bb 00 1f 	bst	r11,0x1f
8000a5c8:	f7 ea 10 0e 	or	lr,r11,r10
8000a5cc:	f9 b7 00 00 	moveq	r7,0
8000a5d0:	cb 0b       	rjmp	8000a530 <__avr32_f64_sub_opL_subnormal_done>

8000a5d2 <__avr32_f64_sub_opH_nan_or_inf>:
8000a5d2:	bf db       	cbr	r11,0x1f
8000a5d4:	f7 ea 10 0e 	or	lr,r11,r10
8000a5d8:	c0 81       	brne	8000a5e8 <__avr32_f64_sub_return_nan>
8000a5da:	e0 46 07 ff 	cp.w	r6,2047
8000a5de:	c0 50       	breq	8000a5e8 <__avr32_f64_sub_return_nan>
8000a5e0:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000a5e4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a5e8 <__avr32_f64_sub_return_nan>:
8000a5e8:	3f fa       	mov	r10,-1
8000a5ea:	3f fb       	mov	r11,-1
8000a5ec:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a5f0 <__avr32_f64_sub_subnormal_result>:
8000a5f0:	5c 37       	neg	r7
8000a5f2:	2f f7       	sub	r7,-1
8000a5f4:	f1 b7 04 c0 	satu	r7,0x6
8000a5f8:	e0 47 00 20 	cp.w	r7,32
8000a5fc:	c1 14       	brge	8000a61e <__avr32_f64_sub_subnormal_result+0x2e>
8000a5fe:	ee 08 11 20 	rsub	r8,r7,32
8000a602:	f4 08 09 49 	lsl	r9,r10,r8
8000a606:	5f 16       	srne	r6
8000a608:	f4 07 0a 4a 	lsr	r10,r10,r7
8000a60c:	0c 4a       	or	r10,r6
8000a60e:	f6 08 09 49 	lsl	r9,r11,r8
8000a612:	f5 e9 10 0a 	or	r10,r10,r9
8000a616:	f4 07 0a 4b 	lsr	r11,r10,r7
8000a61a:	30 07       	mov	r7,0
8000a61c:	cb 3b       	rjmp	8000a582 <__avr32_f64_sub_longnormalize_done>
8000a61e:	ee 08 11 40 	rsub	r8,r7,64
8000a622:	f6 08 09 49 	lsl	r9,r11,r8
8000a626:	14 49       	or	r9,r10
8000a628:	5f 16       	srne	r6
8000a62a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000a62e:	0c 4a       	or	r10,r6
8000a630:	30 0b       	mov	r11,0
8000a632:	30 07       	mov	r7,0
8000a634:	ca 7b       	rjmp	8000a582 <__avr32_f64_sub_longnormalize_done>
8000a636:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a63a <__avr32_f64_sub_longshift>:
8000a63a:	f1 b6 04 c0 	satu	r6,0x6
8000a63e:	f0 0e 17 00 	moveq	lr,r8
8000a642:	c0 40       	breq	8000a64a <__avr32_f64_sub_longshift+0x10>
8000a644:	f2 05 09 4e 	lsl	lr,r9,r5
8000a648:	10 4e       	or	lr,r8
8000a64a:	f2 06 0a 48 	lsr	r8,r9,r6
8000a64e:	30 09       	mov	r9,0
8000a650:	58 0e       	cp.w	lr,0
8000a652:	5f 1e       	srne	lr
8000a654:	1c 48       	or	r8,lr
8000a656:	c8 3b       	rjmp	8000a55c <__avr32_f64_sub_shift_done>

8000a658 <__avr32_f64_sub_longnormalize>:
8000a658:	f4 06 12 00 	clz	r6,r10
8000a65c:	f9 b7 03 00 	movlo	r7,0
8000a660:	f9 b6 03 00 	movlo	r6,0
8000a664:	f9 bc 03 00 	movlo	r12,0
8000a668:	f7 b6 02 e0 	subhs	r6,-32
8000a66c:	f4 06 09 4b 	lsl	r11,r10,r6
8000a670:	30 0a       	mov	r10,0
8000a672:	0c 17       	sub	r7,r6
8000a674:	fe 9a ff be 	brle	8000a5f0 <__avr32_f64_sub_subnormal_result>
8000a678:	c8 5b       	rjmp	8000a582 <__avr32_f64_sub_longnormalize_done>
	...

8000a67c <__avr32_f64_add_from_sub>:
8000a67c:	ee 19 80 00 	eorh	r9,0x8000

8000a680 <__avr32_f64_add>:
8000a680:	f7 e9 20 0c 	eor	r12,r11,r9
8000a684:	fe 96 ff 2e 	brmi	8000a4e0 <__avr32_f64_sub_from_add>
8000a688:	eb cd 40 e0 	pushm	r5-r7,lr
8000a68c:	16 9c       	mov	r12,r11
8000a68e:	e6 1c 80 00 	andh	r12,0x8000,COH
8000a692:	bf db       	cbr	r11,0x1f
8000a694:	bf d9       	cbr	r9,0x1f
8000a696:	12 3b       	cp.w	r11,r9
8000a698:	c0 72       	brcc	8000a6a6 <__avr32_f64_add+0x26>
8000a69a:	16 97       	mov	r7,r11
8000a69c:	12 9b       	mov	r11,r9
8000a69e:	0e 99       	mov	r9,r7
8000a6a0:	14 97       	mov	r7,r10
8000a6a2:	10 9a       	mov	r10,r8
8000a6a4:	0e 98       	mov	r8,r7
8000a6a6:	30 0e       	mov	lr,0
8000a6a8:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000a6ac:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000a6b0:	b5 ab       	sbr	r11,0x14
8000a6b2:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000a6b6:	c6 20       	breq	8000a77a <__avr32_f64_add_op2_subnormal>
8000a6b8:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000a6bc:	b5 a9       	sbr	r9,0x14
8000a6be:	e0 47 07 ff 	cp.w	r7,2047
8000a6c2:	c2 80       	breq	8000a712 <__avr32_f64_add_opH_nan_or_inf>
8000a6c4:	0e 26       	rsub	r6,r7
8000a6c6:	c1 20       	breq	8000a6ea <__avr32_f64_add_shift_done>
8000a6c8:	e0 46 00 36 	cp.w	r6,54
8000a6cc:	c1 52       	brcc	8000a6f6 <__avr32_f64_add_res_of_done>
8000a6ce:	ec 05 11 20 	rsub	r5,r6,32
8000a6d2:	e0 46 00 20 	cp.w	r6,32
8000a6d6:	c3 52       	brcc	8000a740 <__avr32_f64_add_longshift>
8000a6d8:	f0 05 09 4e 	lsl	lr,r8,r5
8000a6dc:	f2 05 09 45 	lsl	r5,r9,r5
8000a6e0:	f0 06 0a 48 	lsr	r8,r8,r6
8000a6e4:	f2 06 0a 49 	lsr	r9,r9,r6
8000a6e8:	0a 48       	or	r8,r5

8000a6ea <__avr32_f64_add_shift_done>:
8000a6ea:	10 0a       	add	r10,r8
8000a6ec:	f6 09 00 4b 	adc	r11,r11,r9
8000a6f0:	ed bb 00 15 	bld	r11,0x15
8000a6f4:	c3 40       	breq	8000a75c <__avr32_f64_add_res_of>

8000a6f6 <__avr32_f64_add_res_of_done>:
8000a6f6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a6fa:	18 4b       	or	r11,r12

8000a6fc <__avr32_f64_add_round>:
8000a6fc:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000a700:	18 4e       	or	lr,r12
8000a702:	ee 1e 80 00 	eorh	lr,0x8000
8000a706:	f1 be 04 20 	satu	lr,0x1
8000a70a:	1c 0a       	add	r10,lr
8000a70c:	5c 0b       	acr	r11
8000a70e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a712 <__avr32_f64_add_opH_nan_or_inf>:
8000a712:	b5 cb       	cbr	r11,0x14
8000a714:	f7 ea 10 0e 	or	lr,r11,r10
8000a718:	c1 01       	brne	8000a738 <__avr32_f64_add_return_nan>
8000a71a:	e0 46 07 ff 	cp.w	r6,2047
8000a71e:	c0 30       	breq	8000a724 <__avr32_f64_add_opL_nan_or_inf>
8000a720:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a724 <__avr32_f64_add_opL_nan_or_inf>:
8000a724:	b5 c9       	cbr	r9,0x14
8000a726:	f3 e8 10 0e 	or	lr,r9,r8
8000a72a:	c0 71       	brne	8000a738 <__avr32_f64_add_return_nan>
8000a72c:	30 0a       	mov	r10,0
8000a72e:	fc 1b 7f f0 	movh	r11,0x7ff0
8000a732:	18 4b       	or	r11,r12
8000a734:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a738 <__avr32_f64_add_return_nan>:
8000a738:	3f fa       	mov	r10,-1
8000a73a:	3f fb       	mov	r11,-1
8000a73c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a740 <__avr32_f64_add_longshift>:
8000a740:	f1 b6 04 c0 	satu	r6,0x6
8000a744:	f0 0e 17 00 	moveq	lr,r8
8000a748:	c0 60       	breq	8000a754 <__avr32_f64_add_longshift+0x14>
8000a74a:	f2 05 09 4e 	lsl	lr,r9,r5
8000a74e:	58 08       	cp.w	r8,0
8000a750:	5f 18       	srne	r8
8000a752:	10 4e       	or	lr,r8
8000a754:	f2 06 0a 48 	lsr	r8,r9,r6
8000a758:	30 09       	mov	r9,0
8000a75a:	cc 8b       	rjmp	8000a6ea <__avr32_f64_add_shift_done>

8000a75c <__avr32_f64_add_res_of>:
8000a75c:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000a760:	a1 9b       	lsr	r11,0x1
8000a762:	5d 0a       	ror	r10
8000a764:	5d 0e       	ror	lr
8000a766:	2f f7       	sub	r7,-1
8000a768:	e0 47 07 ff 	cp.w	r7,2047
8000a76c:	f9 ba 00 00 	moveq	r10,0
8000a770:	f9 bb 00 00 	moveq	r11,0
8000a774:	f9 be 00 00 	moveq	lr,0
8000a778:	cb fb       	rjmp	8000a6f6 <__avr32_f64_add_res_of_done>

8000a77a <__avr32_f64_add_op2_subnormal>:
8000a77a:	30 16       	mov	r6,1
8000a77c:	58 07       	cp.w	r7,0
8000a77e:	ca 01       	brne	8000a6be <__avr32_f64_add+0x3e>
8000a780:	b5 cb       	cbr	r11,0x14
8000a782:	10 0a       	add	r10,r8
8000a784:	f6 09 00 4b 	adc	r11,r11,r9
8000a788:	18 4b       	or	r11,r12
8000a78a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	...

8000a790 <__avr32_u32_to_f64>:
8000a790:	f8 cb 00 00 	sub	r11,r12,0
8000a794:	30 0c       	mov	r12,0
8000a796:	c0 38       	rjmp	8000a79c <__avr32_s32_to_f64+0x4>

8000a798 <__avr32_s32_to_f64>:
8000a798:	18 9b       	mov	r11,r12
8000a79a:	5c 4b       	abs	r11
8000a79c:	30 0a       	mov	r10,0
8000a79e:	5e 0b       	reteq	r11
8000a7a0:	d4 01       	pushm	lr
8000a7a2:	e0 69 04 1e 	mov	r9,1054
8000a7a6:	f6 08 12 00 	clz	r8,r11
8000a7aa:	c1 70       	breq	8000a7d8 <__avr32_s32_to_f64+0x40>
8000a7ac:	c0 c3       	brcs	8000a7c4 <__avr32_s32_to_f64+0x2c>
8000a7ae:	f0 0e 11 20 	rsub	lr,r8,32
8000a7b2:	f6 08 09 4b 	lsl	r11,r11,r8
8000a7b6:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a7ba:	1c 4b       	or	r11,lr
8000a7bc:	f4 08 09 4a 	lsl	r10,r10,r8
8000a7c0:	10 19       	sub	r9,r8
8000a7c2:	c0 b8       	rjmp	8000a7d8 <__avr32_s32_to_f64+0x40>
8000a7c4:	f4 08 12 00 	clz	r8,r10
8000a7c8:	f9 b8 03 00 	movlo	r8,0
8000a7cc:	f7 b8 02 e0 	subhs	r8,-32
8000a7d0:	f4 08 09 4b 	lsl	r11,r10,r8
8000a7d4:	30 0a       	mov	r10,0
8000a7d6:	10 19       	sub	r9,r8
8000a7d8:	58 09       	cp.w	r9,0
8000a7da:	e0 89 00 30 	brgt	8000a83a <__avr32_s32_to_f64+0xa2>
8000a7de:	5c 39       	neg	r9
8000a7e0:	2f f9       	sub	r9,-1
8000a7e2:	e0 49 00 36 	cp.w	r9,54
8000a7e6:	c0 43       	brcs	8000a7ee <__avr32_s32_to_f64+0x56>
8000a7e8:	30 0b       	mov	r11,0
8000a7ea:	30 0a       	mov	r10,0
8000a7ec:	c2 68       	rjmp	8000a838 <__avr32_s32_to_f64+0xa0>
8000a7ee:	2f 69       	sub	r9,-10
8000a7f0:	f2 08 11 20 	rsub	r8,r9,32
8000a7f4:	e0 49 00 20 	cp.w	r9,32
8000a7f8:	c0 b2       	brcc	8000a80e <__avr32_s32_to_f64+0x76>
8000a7fa:	f4 08 09 4e 	lsl	lr,r10,r8
8000a7fe:	f6 08 09 48 	lsl	r8,r11,r8
8000a802:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a806:	f6 09 0a 4b 	lsr	r11,r11,r9
8000a80a:	10 4b       	or	r11,r8
8000a80c:	c0 88       	rjmp	8000a81c <__avr32_s32_to_f64+0x84>
8000a80e:	f6 08 09 4e 	lsl	lr,r11,r8
8000a812:	14 4e       	or	lr,r10
8000a814:	16 9a       	mov	r10,r11
8000a816:	30 0b       	mov	r11,0
8000a818:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a81c:	ed ba 00 00 	bld	r10,0x0
8000a820:	c0 92       	brcc	8000a832 <__avr32_s32_to_f64+0x9a>
8000a822:	1c 7e       	tst	lr,lr
8000a824:	c0 41       	brne	8000a82c <__avr32_s32_to_f64+0x94>
8000a826:	ed ba 00 01 	bld	r10,0x1
8000a82a:	c0 42       	brcc	8000a832 <__avr32_s32_to_f64+0x9a>
8000a82c:	2f fa       	sub	r10,-1
8000a82e:	f7 bb 02 ff 	subhs	r11,-1
8000a832:	5c fc       	rol	r12
8000a834:	5d 0b       	ror	r11
8000a836:	5d 0a       	ror	r10
8000a838:	d8 02       	popm	pc
8000a83a:	e0 68 03 ff 	mov	r8,1023
8000a83e:	ed ba 00 0b 	bld	r10,0xb
8000a842:	f7 b8 00 ff 	subeq	r8,-1
8000a846:	10 0a       	add	r10,r8
8000a848:	5c 0b       	acr	r11
8000a84a:	f7 b9 03 fe 	sublo	r9,-2
8000a84e:	e0 49 07 ff 	cp.w	r9,2047
8000a852:	c0 55       	brlt	8000a85c <__avr32_s32_to_f64+0xc4>
8000a854:	30 0a       	mov	r10,0
8000a856:	fc 1b ff e0 	movh	r11,0xffe0
8000a85a:	c0 c8       	rjmp	8000a872 <__floatsidf_return_op1>
8000a85c:	ed bb 00 1f 	bld	r11,0x1f
8000a860:	f7 b9 01 01 	subne	r9,1
8000a864:	ab 9a       	lsr	r10,0xb
8000a866:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a86a:	a1 7b       	lsl	r11,0x1
8000a86c:	ab 9b       	lsr	r11,0xb
8000a86e:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000a872 <__floatsidf_return_op1>:
8000a872:	a1 7c       	lsl	r12,0x1
8000a874:	5d 0b       	ror	r11
8000a876:	d8 02       	popm	pc

8000a878 <__avr32_f32_div>:
8000a878:	f7 ec 20 08 	eor	r8,r11,r12
8000a87c:	a1 7c       	lsl	r12,0x1
8000a87e:	a1 7b       	lsl	r11,0x1
8000a880:	c7 a0       	breq	8000a974 <__divsf_return_op1+0x16>
8000a882:	18 7c       	tst	r12,r12
8000a884:	f9 b9 00 00 	moveq	r9,0
8000a888:	c0 90       	breq	8000a89a <__avr32_f32_div+0x22>
8000a88a:	f8 09 16 18 	lsr	r9,r12,0x18
8000a88e:	c7 e0       	breq	8000a98a <__divsf_return_op1+0x2c>
8000a890:	e0 49 00 ff 	cp.w	r9,255
8000a894:	c6 82       	brcc	8000a964 <__divsf_return_op1+0x6>
8000a896:	a7 7c       	lsl	r12,0x7
8000a898:	bf bc       	sbr	r12,0x1f
8000a89a:	f6 0a 16 18 	lsr	r10,r11,0x18
8000a89e:	c7 e0       	breq	8000a99a <__divsf_return_op1+0x3c>
8000a8a0:	e0 4a 00 ff 	cp.w	r10,255
8000a8a4:	c6 62       	brcc	8000a970 <__divsf_return_op1+0x12>
8000a8a6:	a7 7b       	lsl	r11,0x7
8000a8a8:	bf bb       	sbr	r11,0x1f
8000a8aa:	58 09       	cp.w	r9,0
8000a8ac:	f5 bc 00 00 	subfeq	r12,0
8000a8b0:	5e 0d       	reteq	0
8000a8b2:	1a d5       	st.w	--sp,r5
8000a8b4:	bb 27       	st.d	--sp,r6
8000a8b6:	14 19       	sub	r9,r10
8000a8b8:	28 19       	sub	r9,-127
8000a8ba:	fc 1a 80 00 	movh	r10,0x8000
8000a8be:	a3 8c       	lsr	r12,0x2
8000a8c0:	f6 05 16 02 	lsr	r5,r11,0x2
8000a8c4:	f4 0b 16 01 	lsr	r11,r10,0x1
8000a8c8:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8000a8cc:	5c d6       	com	r6
8000a8ce:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
8000a8d2:	f6 05 06 46 	mulu.d	r6,r11,r5
8000a8d6:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000a8da:	f6 07 06 46 	mulu.d	r6,r11,r7
8000a8de:	ee 0b 15 02 	lsl	r11,r7,0x2
8000a8e2:	f6 05 06 46 	mulu.d	r6,r11,r5
8000a8e6:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000a8ea:	f6 07 06 46 	mulu.d	r6,r11,r7
8000a8ee:	ee 0b 15 02 	lsl	r11,r7,0x2
8000a8f2:	f6 05 06 46 	mulu.d	r6,r11,r5
8000a8f6:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000a8fa:	f6 07 06 46 	mulu.d	r6,r11,r7
8000a8fe:	ee 0b 15 02 	lsl	r11,r7,0x2
8000a902:	f6 05 06 46 	mulu.d	r6,r11,r5
8000a906:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000a90a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000a90e:	ee 0b 15 02 	lsl	r11,r7,0x2
8000a912:	f6 0c 06 46 	mulu.d	r6,r11,r12
8000a916:	a5 8c       	lsr	r12,0x4
8000a918:	ed b7 00 1c 	bld	r7,0x1c
8000a91c:	c0 40       	breq	8000a924 <__avr32_f32_div+0xac>
8000a91e:	a1 77       	lsl	r7,0x1
8000a920:	20 19       	sub	r9,1
8000a922:	a1 7c       	lsl	r12,0x1
8000a924:	58 09       	cp.w	r9,0
8000a926:	e0 8a 00 42 	brle	8000a9aa <__avr32_f32_div_res_subnormal>
8000a92a:	e0 17 ff e0 	andl	r7,0xffe0
8000a92e:	e8 17 00 10 	orl	r7,0x10
8000a932:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000a936:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000a93a:	58 0a       	cp.w	r10,0

8000a93c <__avr32_f32_div_round_subnormal>:
8000a93c:	f8 0b 13 00 	cpc	r11,r12
8000a940:	5f 3b       	srlo	r11
8000a942:	ea 0b 17 00 	moveq	r11,r5
8000a946:	ee 0c 16 05 	lsr	r12,r7,0x5
8000a94a:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8000a94e:	bb 07       	ld.d	r6,sp++
8000a950:	1b 05       	ld.w	r5,sp++
8000a952:	ed b8 00 1f 	bld	r8,0x1f
8000a956:	ef bc 00 1f 	bst	r12,0x1f
8000a95a:	16 0c       	add	r12,r11
8000a95c:	5e fc       	retal	r12

8000a95e <__divsf_return_op1>:
8000a95e:	a1 78       	lsl	r8,0x1
8000a960:	5d 0c       	ror	r12
8000a962:	5e fc       	retal	r12
8000a964:	5e 1e       	retne	-1
8000a966:	fc 19 ff 00 	movh	r9,0xff00
8000a96a:	12 3b       	cp.w	r11,r9
8000a96c:	cf 93       	brcs	8000a95e <__divsf_return_op1>
8000a96e:	5e fe       	retal	-1
8000a970:	5e 0d       	reteq	0
8000a972:	5e fe       	retal	-1
8000a974:	18 7c       	tst	r12,r12
8000a976:	5e 0e       	reteq	-1
8000a978:	f8 09 16 18 	lsr	r9,r12,0x18
8000a97c:	c0 70       	breq	8000a98a <__divsf_return_op1+0x2c>
8000a97e:	e0 49 00 ff 	cp.w	r9,255
8000a982:	cf 12       	brcc	8000a964 <__divsf_return_op1+0x6>
8000a984:	fc 1c ff 00 	movh	r12,0xff00
8000a988:	ce bb       	rjmp	8000a95e <__divsf_return_op1>
8000a98a:	a7 7c       	lsl	r12,0x7
8000a98c:	f8 09 12 00 	clz	r9,r12
8000a990:	f8 09 09 4c 	lsl	r12,r12,r9
8000a994:	f2 09 11 01 	rsub	r9,r9,1
8000a998:	c8 1b       	rjmp	8000a89a <__avr32_f32_div+0x22>
8000a99a:	a7 7b       	lsl	r11,0x7
8000a99c:	f6 0a 12 00 	clz	r10,r11
8000a9a0:	f6 0a 09 4b 	lsl	r11,r11,r10
8000a9a4:	f4 0a 11 01 	rsub	r10,r10,1
8000a9a8:	c8 5b       	rjmp	8000a8b2 <__avr32_f32_div+0x3a>

8000a9aa <__avr32_f32_div_res_subnormal>:
8000a9aa:	5c 39       	neg	r9
8000a9ac:	2f f9       	sub	r9,-1
8000a9ae:	f1 b9 04 a0 	satu	r9,0x5
8000a9b2:	f2 0a 11 20 	rsub	r10,r9,32
8000a9b6:	ee 09 0a 47 	lsr	r7,r7,r9
8000a9ba:	f8 0a 09 46 	lsl	r6,r12,r10
8000a9be:	f8 09 0a 4c 	lsr	r12,r12,r9
8000a9c2:	e0 17 ff e0 	andl	r7,0xffe0
8000a9c6:	e8 17 00 10 	orl	r7,0x10
8000a9ca:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000a9ce:	30 09       	mov	r9,0
8000a9d0:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000a9d4:	0c 3a       	cp.w	r10,r6
8000a9d6:	cb 3b       	rjmp	8000a93c <__avr32_f32_div_round_subnormal>

8000a9d8 <__avr32_f64_to_f32>:
8000a9d8:	f6 09 15 01 	lsl	r9,r11,0x1
8000a9dc:	b5 99       	lsr	r9,0x15
8000a9de:	5e 0d       	reteq	0
8000a9e0:	f6 08 15 0a 	lsl	r8,r11,0xa
8000a9e4:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
8000a9e8:	ab 6a       	lsl	r10,0xa
8000a9ea:	5c 3a       	neg	r10
8000a9ec:	5c fc       	rol	r12
8000a9ee:	e0 49 07 ff 	cp.w	r9,2047
8000a9f2:	c1 a0       	breq	8000aa26 <__truncdfsf_return_op1+0x6>
8000a9f4:	e0 29 03 80 	sub	r9,896
8000a9f8:	bf bc       	sbr	r12,0x1f
8000a9fa:	58 09       	cp.w	r9,0
8000a9fc:	e0 8a 00 1a 	brle	8000aa30 <__truncdfsf_return_op1+0x10>
8000aa00:	37 fa       	mov	r10,127
8000aa02:	ed bc 00 08 	bld	r12,0x8
8000aa06:	f7 ba 00 ff 	subeq	r10,-1
8000aa0a:	14 0c       	add	r12,r10
8000aa0c:	f7 b9 03 fe 	sublo	r9,-2
8000aa10:	ed bc 00 1f 	bld	r12,0x1f
8000aa14:	f7 b9 01 01 	subne	r9,1
8000aa18:	f8 0c 16 07 	lsr	r12,r12,0x7
8000aa1c:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

8000aa20 <__truncdfsf_return_op1>:
8000aa20:	a1 7b       	lsl	r11,0x1
8000aa22:	5d 0c       	ror	r12
8000aa24:	5e fc       	retal	r12
8000aa26:	bf dc       	cbr	r12,0x1f
8000aa28:	5e 1e       	retne	-1
8000aa2a:	fc 1c 7f 80 	movh	r12,0x7f80
8000aa2e:	5e fc       	retal	r12
8000aa30:	f2 09 11 01 	rsub	r9,r9,1
8000aa34:	59 99       	cp.w	r9,25
8000aa36:	f9 bc 02 00 	movhs	r12,0
8000aa3a:	c1 32       	brcc	8000aa60 <__truncdfsf_return_op1+0x40>
8000aa3c:	f2 0a 11 20 	rsub	r10,r9,32
8000aa40:	f8 0a 09 4a 	lsl	r10,r12,r10
8000aa44:	5f 1a       	srne	r10
8000aa46:	f8 09 0a 4c 	lsr	r12,r12,r9
8000aa4a:	14 4c       	or	r12,r10
8000aa4c:	37 fa       	mov	r10,127
8000aa4e:	ed bc 00 08 	bld	r12,0x8
8000aa52:	f7 ba 00 ff 	subeq	r10,-1
8000aa56:	14 0c       	add	r12,r10
8000aa58:	f8 0c 16 07 	lsr	r12,r12,0x7
8000aa5c:	a1 7b       	lsl	r11,0x1
8000aa5e:	5d 0c       	ror	r12
8000aa60:	5e fc       	retal	r12

8000aa62 <__avr32_udiv64>:
8000aa62:	d4 31       	pushm	r0-r7,lr
8000aa64:	1a 97       	mov	r7,sp
8000aa66:	20 3d       	sub	sp,12
8000aa68:	10 9c       	mov	r12,r8
8000aa6a:	12 9e       	mov	lr,r9
8000aa6c:	14 93       	mov	r3,r10
8000aa6e:	58 09       	cp.w	r9,0
8000aa70:	e0 81 00 bd 	brne	8000abea <__avr32_udiv64+0x188>
8000aa74:	16 38       	cp.w	r8,r11
8000aa76:	e0 88 00 40 	brls	8000aaf6 <__avr32_udiv64+0x94>
8000aa7a:	f0 08 12 00 	clz	r8,r8
8000aa7e:	c0 d0       	breq	8000aa98 <__avr32_udiv64+0x36>
8000aa80:	f6 08 09 4b 	lsl	r11,r11,r8
8000aa84:	f0 09 11 20 	rsub	r9,r8,32
8000aa88:	f8 08 09 4c 	lsl	r12,r12,r8
8000aa8c:	f4 09 0a 49 	lsr	r9,r10,r9
8000aa90:	f4 08 09 43 	lsl	r3,r10,r8
8000aa94:	f3 eb 10 0b 	or	r11,r9,r11
8000aa98:	f8 0e 16 10 	lsr	lr,r12,0x10
8000aa9c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000aaa0:	f6 0e 0d 00 	divu	r0,r11,lr
8000aaa4:	e6 0b 16 10 	lsr	r11,r3,0x10
8000aaa8:	00 99       	mov	r9,r0
8000aaaa:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000aaae:	e0 0a 02 48 	mul	r8,r0,r10
8000aab2:	10 3b       	cp.w	r11,r8
8000aab4:	c0 a2       	brcc	8000aac8 <__avr32_udiv64+0x66>
8000aab6:	20 19       	sub	r9,1
8000aab8:	18 0b       	add	r11,r12
8000aaba:	18 3b       	cp.w	r11,r12
8000aabc:	c0 63       	brcs	8000aac8 <__avr32_udiv64+0x66>
8000aabe:	10 3b       	cp.w	r11,r8
8000aac0:	f7 b9 03 01 	sublo	r9,1
8000aac4:	f7 dc e3 0b 	addcs	r11,r11,r12
8000aac8:	f6 08 01 01 	sub	r1,r11,r8
8000aacc:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000aad0:	e2 0e 0d 00 	divu	r0,r1,lr
8000aad4:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000aad8:	00 98       	mov	r8,r0
8000aada:	e0 0a 02 4a 	mul	r10,r0,r10
8000aade:	14 33       	cp.w	r3,r10
8000aae0:	c0 82       	brcc	8000aaf0 <__avr32_udiv64+0x8e>
8000aae2:	20 18       	sub	r8,1
8000aae4:	18 03       	add	r3,r12
8000aae6:	18 33       	cp.w	r3,r12
8000aae8:	c0 43       	brcs	8000aaf0 <__avr32_udiv64+0x8e>
8000aaea:	14 33       	cp.w	r3,r10
8000aaec:	f7 b8 03 01 	sublo	r8,1
8000aaf0:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000aaf4:	cd f8       	rjmp	8000acb2 <__avr32_udiv64+0x250>
8000aaf6:	58 08       	cp.w	r8,0
8000aaf8:	c0 51       	brne	8000ab02 <__avr32_udiv64+0xa0>
8000aafa:	30 19       	mov	r9,1
8000aafc:	f2 08 0d 08 	divu	r8,r9,r8
8000ab00:	10 9c       	mov	r12,r8
8000ab02:	f8 06 12 00 	clz	r6,r12
8000ab06:	c0 41       	brne	8000ab0e <__avr32_udiv64+0xac>
8000ab08:	18 1b       	sub	r11,r12
8000ab0a:	30 19       	mov	r9,1
8000ab0c:	c4 08       	rjmp	8000ab8c <__avr32_udiv64+0x12a>
8000ab0e:	ec 01 11 20 	rsub	r1,r6,32
8000ab12:	f4 01 0a 49 	lsr	r9,r10,r1
8000ab16:	f8 06 09 4c 	lsl	r12,r12,r6
8000ab1a:	f6 06 09 48 	lsl	r8,r11,r6
8000ab1e:	f6 01 0a 41 	lsr	r1,r11,r1
8000ab22:	f3 e8 10 08 	or	r8,r9,r8
8000ab26:	f8 03 16 10 	lsr	r3,r12,0x10
8000ab2a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000ab2e:	e2 03 0d 00 	divu	r0,r1,r3
8000ab32:	f0 0b 16 10 	lsr	r11,r8,0x10
8000ab36:	00 9e       	mov	lr,r0
8000ab38:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000ab3c:	e0 05 02 49 	mul	r9,r0,r5
8000ab40:	12 3b       	cp.w	r11,r9
8000ab42:	c0 a2       	brcc	8000ab56 <__avr32_udiv64+0xf4>
8000ab44:	20 1e       	sub	lr,1
8000ab46:	18 0b       	add	r11,r12
8000ab48:	18 3b       	cp.w	r11,r12
8000ab4a:	c0 63       	brcs	8000ab56 <__avr32_udiv64+0xf4>
8000ab4c:	12 3b       	cp.w	r11,r9
8000ab4e:	f7 be 03 01 	sublo	lr,1
8000ab52:	f7 dc e3 0b 	addcs	r11,r11,r12
8000ab56:	12 1b       	sub	r11,r9
8000ab58:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000ab5c:	f6 03 0d 02 	divu	r2,r11,r3
8000ab60:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000ab64:	04 99       	mov	r9,r2
8000ab66:	e4 05 02 4b 	mul	r11,r2,r5
8000ab6a:	16 38       	cp.w	r8,r11
8000ab6c:	c0 a2       	brcc	8000ab80 <__avr32_udiv64+0x11e>
8000ab6e:	20 19       	sub	r9,1
8000ab70:	18 08       	add	r8,r12
8000ab72:	18 38       	cp.w	r8,r12
8000ab74:	c0 63       	brcs	8000ab80 <__avr32_udiv64+0x11e>
8000ab76:	16 38       	cp.w	r8,r11
8000ab78:	f7 b9 03 01 	sublo	r9,1
8000ab7c:	f1 dc e3 08 	addcs	r8,r8,r12
8000ab80:	f4 06 09 43 	lsl	r3,r10,r6
8000ab84:	f0 0b 01 0b 	sub	r11,r8,r11
8000ab88:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000ab8c:	f8 06 16 10 	lsr	r6,r12,0x10
8000ab90:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000ab94:	f6 06 0d 00 	divu	r0,r11,r6
8000ab98:	e6 0b 16 10 	lsr	r11,r3,0x10
8000ab9c:	00 9a       	mov	r10,r0
8000ab9e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000aba2:	e0 0e 02 48 	mul	r8,r0,lr
8000aba6:	10 3b       	cp.w	r11,r8
8000aba8:	c0 a2       	brcc	8000abbc <__avr32_udiv64+0x15a>
8000abaa:	20 1a       	sub	r10,1
8000abac:	18 0b       	add	r11,r12
8000abae:	18 3b       	cp.w	r11,r12
8000abb0:	c0 63       	brcs	8000abbc <__avr32_udiv64+0x15a>
8000abb2:	10 3b       	cp.w	r11,r8
8000abb4:	f7 ba 03 01 	sublo	r10,1
8000abb8:	f7 dc e3 0b 	addcs	r11,r11,r12
8000abbc:	f6 08 01 01 	sub	r1,r11,r8
8000abc0:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000abc4:	e2 06 0d 00 	divu	r0,r1,r6
8000abc8:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000abcc:	00 98       	mov	r8,r0
8000abce:	e0 0e 02 4b 	mul	r11,r0,lr
8000abd2:	16 33       	cp.w	r3,r11
8000abd4:	c0 82       	brcc	8000abe4 <__avr32_udiv64+0x182>
8000abd6:	20 18       	sub	r8,1
8000abd8:	18 03       	add	r3,r12
8000abda:	18 33       	cp.w	r3,r12
8000abdc:	c0 43       	brcs	8000abe4 <__avr32_udiv64+0x182>
8000abde:	16 33       	cp.w	r3,r11
8000abe0:	f7 b8 03 01 	sublo	r8,1
8000abe4:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000abe8:	c6 98       	rjmp	8000acba <__avr32_udiv64+0x258>
8000abea:	16 39       	cp.w	r9,r11
8000abec:	e0 8b 00 65 	brhi	8000acb6 <__avr32_udiv64+0x254>
8000abf0:	f2 09 12 00 	clz	r9,r9
8000abf4:	c0 b1       	brne	8000ac0a <__avr32_udiv64+0x1a8>
8000abf6:	10 3a       	cp.w	r10,r8
8000abf8:	5f 2a       	srhs	r10
8000abfa:	1c 3b       	cp.w	r11,lr
8000abfc:	5f b8       	srhi	r8
8000abfe:	10 4a       	or	r10,r8
8000ac00:	f2 0a 18 00 	cp.b	r10,r9
8000ac04:	c5 90       	breq	8000acb6 <__avr32_udiv64+0x254>
8000ac06:	30 18       	mov	r8,1
8000ac08:	c5 98       	rjmp	8000acba <__avr32_udiv64+0x258>
8000ac0a:	f0 09 09 46 	lsl	r6,r8,r9
8000ac0e:	f2 03 11 20 	rsub	r3,r9,32
8000ac12:	fc 09 09 4e 	lsl	lr,lr,r9
8000ac16:	f0 03 0a 48 	lsr	r8,r8,r3
8000ac1a:	f6 09 09 4c 	lsl	r12,r11,r9
8000ac1e:	f4 03 0a 42 	lsr	r2,r10,r3
8000ac22:	ef 46 ff f4 	st.w	r7[-12],r6
8000ac26:	f6 03 0a 43 	lsr	r3,r11,r3
8000ac2a:	18 42       	or	r2,r12
8000ac2c:	f1 ee 10 0c 	or	r12,r8,lr
8000ac30:	f8 01 16 10 	lsr	r1,r12,0x10
8000ac34:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000ac38:	e6 01 0d 04 	divu	r4,r3,r1
8000ac3c:	e4 03 16 10 	lsr	r3,r2,0x10
8000ac40:	08 9e       	mov	lr,r4
8000ac42:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000ac46:	e8 06 02 48 	mul	r8,r4,r6
8000ac4a:	10 33       	cp.w	r3,r8
8000ac4c:	c0 a2       	brcc	8000ac60 <__avr32_udiv64+0x1fe>
8000ac4e:	20 1e       	sub	lr,1
8000ac50:	18 03       	add	r3,r12
8000ac52:	18 33       	cp.w	r3,r12
8000ac54:	c0 63       	brcs	8000ac60 <__avr32_udiv64+0x1fe>
8000ac56:	10 33       	cp.w	r3,r8
8000ac58:	f7 be 03 01 	sublo	lr,1
8000ac5c:	e7 dc e3 03 	addcs	r3,r3,r12
8000ac60:	10 13       	sub	r3,r8
8000ac62:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000ac66:	e6 01 0d 00 	divu	r0,r3,r1
8000ac6a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000ac6e:	00 98       	mov	r8,r0
8000ac70:	e0 06 02 46 	mul	r6,r0,r6
8000ac74:	0c 3b       	cp.w	r11,r6
8000ac76:	c0 a2       	brcc	8000ac8a <__avr32_udiv64+0x228>
8000ac78:	20 18       	sub	r8,1
8000ac7a:	18 0b       	add	r11,r12
8000ac7c:	18 3b       	cp.w	r11,r12
8000ac7e:	c0 63       	brcs	8000ac8a <__avr32_udiv64+0x228>
8000ac80:	0c 3b       	cp.w	r11,r6
8000ac82:	f7 dc e3 0b 	addcs	r11,r11,r12
8000ac86:	f7 b8 03 01 	sublo	r8,1
8000ac8a:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000ac8e:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000ac92:	0c 1b       	sub	r11,r6
8000ac94:	f0 04 06 42 	mulu.d	r2,r8,r4
8000ac98:	06 95       	mov	r5,r3
8000ac9a:	16 35       	cp.w	r5,r11
8000ac9c:	e0 8b 00 0a 	brhi	8000acb0 <__avr32_udiv64+0x24e>
8000aca0:	5f 0b       	sreq	r11
8000aca2:	f4 09 09 49 	lsl	r9,r10,r9
8000aca6:	12 32       	cp.w	r2,r9
8000aca8:	5f b9       	srhi	r9
8000acaa:	f7 e9 00 09 	and	r9,r11,r9
8000acae:	c0 60       	breq	8000acba <__avr32_udiv64+0x258>
8000acb0:	20 18       	sub	r8,1
8000acb2:	30 09       	mov	r9,0
8000acb4:	c0 38       	rjmp	8000acba <__avr32_udiv64+0x258>
8000acb6:	30 09       	mov	r9,0
8000acb8:	12 98       	mov	r8,r9
8000acba:	10 9a       	mov	r10,r8
8000acbc:	12 93       	mov	r3,r9
8000acbe:	10 92       	mov	r2,r8
8000acc0:	12 9b       	mov	r11,r9
8000acc2:	2f dd       	sub	sp,-12
8000acc4:	d8 32       	popm	r0-r7,pc

8000acc6 <memcpy>:
8000acc6:	58 8a       	cp.w	r10,8
8000acc8:	c2 f5       	brlt	8000ad26 <memcpy+0x60>
8000acca:	f9 eb 10 09 	or	r9,r12,r11
8000acce:	e2 19 00 03 	andl	r9,0x3,COH
8000acd2:	e0 81 00 97 	brne	8000ae00 <memcpy+0x13a>
8000acd6:	e0 4a 00 20 	cp.w	r10,32
8000acda:	c3 b4       	brge	8000ad50 <memcpy+0x8a>
8000acdc:	f4 08 14 02 	asr	r8,r10,0x2
8000ace0:	f0 09 11 08 	rsub	r9,r8,8
8000ace4:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000ace8:	76 69       	ld.w	r9,r11[0x18]
8000acea:	99 69       	st.w	r12[0x18],r9
8000acec:	76 59       	ld.w	r9,r11[0x14]
8000acee:	99 59       	st.w	r12[0x14],r9
8000acf0:	76 49       	ld.w	r9,r11[0x10]
8000acf2:	99 49       	st.w	r12[0x10],r9
8000acf4:	76 39       	ld.w	r9,r11[0xc]
8000acf6:	99 39       	st.w	r12[0xc],r9
8000acf8:	76 29       	ld.w	r9,r11[0x8]
8000acfa:	99 29       	st.w	r12[0x8],r9
8000acfc:	76 19       	ld.w	r9,r11[0x4]
8000acfe:	99 19       	st.w	r12[0x4],r9
8000ad00:	76 09       	ld.w	r9,r11[0x0]
8000ad02:	99 09       	st.w	r12[0x0],r9
8000ad04:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000ad08:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000ad0c:	e0 1a 00 03 	andl	r10,0x3
8000ad10:	f4 0a 11 04 	rsub	r10,r10,4
8000ad14:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000ad18:	17 a9       	ld.ub	r9,r11[0x2]
8000ad1a:	b0 a9       	st.b	r8[0x2],r9
8000ad1c:	17 99       	ld.ub	r9,r11[0x1]
8000ad1e:	b0 99       	st.b	r8[0x1],r9
8000ad20:	17 89       	ld.ub	r9,r11[0x0]
8000ad22:	b0 89       	st.b	r8[0x0],r9
8000ad24:	5e fc       	retal	r12
8000ad26:	f4 0a 11 09 	rsub	r10,r10,9
8000ad2a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000ad2e:	17 f9       	ld.ub	r9,r11[0x7]
8000ad30:	b8 f9       	st.b	r12[0x7],r9
8000ad32:	17 e9       	ld.ub	r9,r11[0x6]
8000ad34:	b8 e9       	st.b	r12[0x6],r9
8000ad36:	17 d9       	ld.ub	r9,r11[0x5]
8000ad38:	b8 d9       	st.b	r12[0x5],r9
8000ad3a:	17 c9       	ld.ub	r9,r11[0x4]
8000ad3c:	b8 c9       	st.b	r12[0x4],r9
8000ad3e:	17 b9       	ld.ub	r9,r11[0x3]
8000ad40:	b8 b9       	st.b	r12[0x3],r9
8000ad42:	17 a9       	ld.ub	r9,r11[0x2]
8000ad44:	b8 a9       	st.b	r12[0x2],r9
8000ad46:	17 99       	ld.ub	r9,r11[0x1]
8000ad48:	b8 99       	st.b	r12[0x1],r9
8000ad4a:	17 89       	ld.ub	r9,r11[0x0]
8000ad4c:	b8 89       	st.b	r12[0x0],r9
8000ad4e:	5e fc       	retal	r12
8000ad50:	eb cd 40 c0 	pushm	r6-r7,lr
8000ad54:	18 99       	mov	r9,r12
8000ad56:	22 0a       	sub	r10,32
8000ad58:	b7 07       	ld.d	r6,r11++
8000ad5a:	b3 26       	st.d	r9++,r6
8000ad5c:	b7 07       	ld.d	r6,r11++
8000ad5e:	b3 26       	st.d	r9++,r6
8000ad60:	b7 07       	ld.d	r6,r11++
8000ad62:	b3 26       	st.d	r9++,r6
8000ad64:	b7 07       	ld.d	r6,r11++
8000ad66:	b3 26       	st.d	r9++,r6
8000ad68:	22 0a       	sub	r10,32
8000ad6a:	cf 74       	brge	8000ad58 <memcpy+0x92>
8000ad6c:	2f 0a       	sub	r10,-16
8000ad6e:	c0 65       	brlt	8000ad7a <memcpy+0xb4>
8000ad70:	b7 07       	ld.d	r6,r11++
8000ad72:	b3 26       	st.d	r9++,r6
8000ad74:	b7 07       	ld.d	r6,r11++
8000ad76:	b3 26       	st.d	r9++,r6
8000ad78:	21 0a       	sub	r10,16
8000ad7a:	5c 3a       	neg	r10
8000ad7c:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000ad80:	d7 03       	nop
8000ad82:	d7 03       	nop
8000ad84:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000ad88:	f3 66 00 0e 	st.b	r9[14],r6
8000ad8c:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000ad90:	f3 66 00 0d 	st.b	r9[13],r6
8000ad94:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000ad98:	f3 66 00 0c 	st.b	r9[12],r6
8000ad9c:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000ada0:	f3 66 00 0b 	st.b	r9[11],r6
8000ada4:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000ada8:	f3 66 00 0a 	st.b	r9[10],r6
8000adac:	f7 36 00 09 	ld.ub	r6,r11[9]
8000adb0:	f3 66 00 09 	st.b	r9[9],r6
8000adb4:	f7 36 00 08 	ld.ub	r6,r11[8]
8000adb8:	f3 66 00 08 	st.b	r9[8],r6
8000adbc:	f7 36 00 07 	ld.ub	r6,r11[7]
8000adc0:	f3 66 00 07 	st.b	r9[7],r6
8000adc4:	f7 36 00 06 	ld.ub	r6,r11[6]
8000adc8:	f3 66 00 06 	st.b	r9[6],r6
8000adcc:	f7 36 00 05 	ld.ub	r6,r11[5]
8000add0:	f3 66 00 05 	st.b	r9[5],r6
8000add4:	f7 36 00 04 	ld.ub	r6,r11[4]
8000add8:	f3 66 00 04 	st.b	r9[4],r6
8000addc:	f7 36 00 03 	ld.ub	r6,r11[3]
8000ade0:	f3 66 00 03 	st.b	r9[3],r6
8000ade4:	f7 36 00 02 	ld.ub	r6,r11[2]
8000ade8:	f3 66 00 02 	st.b	r9[2],r6
8000adec:	f7 36 00 01 	ld.ub	r6,r11[1]
8000adf0:	f3 66 00 01 	st.b	r9[1],r6
8000adf4:	f7 36 00 00 	ld.ub	r6,r11[0]
8000adf8:	f3 66 00 00 	st.b	r9[0],r6
8000adfc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ae00:	20 1a       	sub	r10,1
8000ae02:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000ae06:	f8 0a 0b 09 	st.b	r12[r10],r9
8000ae0a:	cf b1       	brne	8000ae00 <memcpy+0x13a>
8000ae0c:	5e fc       	retal	r12

8000ae0e <memset>:
8000ae0e:	18 98       	mov	r8,r12
8000ae10:	c0 38       	rjmp	8000ae16 <memset+0x8>
8000ae12:	10 cb       	st.b	r8++,r11
8000ae14:	20 1a       	sub	r10,1
8000ae16:	58 0a       	cp.w	r10,0
8000ae18:	cf d1       	brne	8000ae12 <memset+0x4>
8000ae1a:	5e fc       	retal	r12

8000ae1c <strncpy>:
8000ae1c:	30 08       	mov	r8,0
8000ae1e:	10 3a       	cp.w	r10,r8
8000ae20:	5e 0c       	reteq	r12
8000ae22:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000ae26:	f8 08 0b 09 	st.b	r12[r8],r9
8000ae2a:	2f f8       	sub	r8,-1
8000ae2c:	58 09       	cp.w	r9,0
8000ae2e:	cf 81       	brne	8000ae1e <strncpy+0x2>
8000ae30:	10 3a       	cp.w	r10,r8
8000ae32:	5e 0c       	reteq	r12
8000ae34:	f8 08 0b 09 	st.b	r12[r8],r9
8000ae38:	2f f8       	sub	r8,-1
8000ae3a:	cf bb       	rjmp	8000ae30 <strncpy+0x14>

Disassembly of section .exception:

8000b000 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000b000:	c0 08       	rjmp	8000b000 <_evba>
	...

8000b004 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000b004:	c0 08       	rjmp	8000b004 <_handle_TLB_Multiple_Hit>
	...

8000b008 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000b008:	c0 08       	rjmp	8000b008 <_handle_Bus_Error_Data_Fetch>
	...

8000b00c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000b00c:	c0 08       	rjmp	8000b00c <_handle_Bus_Error_Instruction_Fetch>
	...

8000b010 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000b010:	c0 08       	rjmp	8000b010 <_handle_NMI>
	...

8000b014 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000b014:	c0 08       	rjmp	8000b014 <_handle_Instruction_Address>
	...

8000b018 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000b018:	c0 08       	rjmp	8000b018 <_handle_ITLB_Protection>
	...

8000b01c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000b01c:	c0 08       	rjmp	8000b01c <_handle_Breakpoint>
	...

8000b020 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000b020:	c0 08       	rjmp	8000b020 <_handle_Illegal_Opcode>
	...

8000b024 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000b024:	c0 08       	rjmp	8000b024 <_handle_Unimplemented_Instruction>
	...

8000b028 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000b028:	c0 08       	rjmp	8000b028 <_handle_Privilege_Violation>
	...

8000b02c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000b02c:	c0 08       	rjmp	8000b02c <_handle_Floating_Point>
	...

8000b030 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000b030:	c0 08       	rjmp	8000b030 <_handle_Coprocessor_Absent>
	...

8000b034 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000b034:	c0 08       	rjmp	8000b034 <_handle_Data_Address_Read>
	...

8000b038 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000b038:	c0 08       	rjmp	8000b038 <_handle_Data_Address_Write>
	...

8000b03c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000b03c:	c0 08       	rjmp	8000b03c <_handle_DTLB_Protection_Read>
	...

8000b040 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000b040:	c0 08       	rjmp	8000b040 <_handle_DTLB_Protection_Write>
	...

8000b044 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000b044:	c0 08       	rjmp	8000b044 <_handle_DTLB_Modified>
	...

8000b050 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000b050:	c0 08       	rjmp	8000b050 <_handle_ITLB_Miss>
	...

8000b060 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000b060:	c0 08       	rjmp	8000b060 <_handle_DTLB_Miss_Read>
	...

8000b070 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000b070:	c0 08       	rjmp	8000b070 <_handle_DTLB_Miss_Write>
	...

8000b100 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000b100:	c0 08       	rjmp	8000b100 <_handle_Supervisor_Call>
	...

8000b104 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b104:	30 0c       	mov	r12,0
8000b106:	f0 1f 00 0e 	mcall	8000b13c <_int3+0xe>
8000b10a:	58 0c       	cp.w	r12,0
8000b10c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b110:	d6 03       	rete

8000b112 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b112:	30 1c       	mov	r12,1
8000b114:	f0 1f 00 0a 	mcall	8000b13c <_int3+0xe>
8000b118:	58 0c       	cp.w	r12,0
8000b11a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b11e:	d6 03       	rete

8000b120 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b120:	30 2c       	mov	r12,2
8000b122:	f0 1f 00 07 	mcall	8000b13c <_int3+0xe>
8000b126:	58 0c       	cp.w	r12,0
8000b128:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b12c:	d6 03       	rete

8000b12e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b12e:	30 3c       	mov	r12,3
8000b130:	f0 1f 00 03 	mcall	8000b13c <_int3+0xe>
8000b134:	58 0c       	cp.w	r12,0
8000b136:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b13a:	d6 03       	rete
8000b13c:	80 00       	ld.sh	r0,r0[0x0]
8000b13e:	4b b8       	lddpc	r8,8000b228 <C.35.14269+0x8>
	...
