
electroclave.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002010  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ff68  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80012000  80012000  00012400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000008e0  80012200  80012200  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000005b4  00000008  80012ae0  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  000005bc  80013094  000135bc  2**0
                  ALLOC
  8 .bss          000007d8  000005c0  000005c0  00000000  2**2
                  ALLOC
  9 .heap         0000e268  00000d98  00000d98  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  000135bc  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000011a8  00000000  00000000  000135f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 000028c3  00000000  00000000  00014798  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0002e205  00000000  00000000  0001705b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005679  00000000  00000000  00045260  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00011306  00000000  00000000  0004a8d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003268  00000000  00000000  0005bbe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006dbf  00000000  00000000  0005ee48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000ad8e  00000000  00000000  00065c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 01032cd4  00000000  00000000  00070995  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .flash_nvram0 00000600  8007fa00  80013094  00013600  2**2
                  ALLOC
 22 .flash_nvram1 00000300  8007f700  80080000  00013700  2**2
                  ALLOC
 23 .flash_nvram2 00000200  8007f500  8007fa00  00013900  2**2
                  ALLOC
 24 .flash_nvram3 00003a00  8007bb00  8007f700  00013700  2**2
                  ALLOC
 25 .flash_nvram4 00000100  8007ba00  8007f500  00013600  2**2
                  ALLOC
 26 .debug_ranges 00001228  00000000  00000000  010a3670  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	59 7c       	cp.w	r12,23

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	48 1f       	lddpc	pc,8000200c <program_start+0x4>
8000200a:	00 00       	add	r0,r0
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	59 7c       	cp.w	r12,23

Disassembly of section .text:

80002010 <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
80002010:	eb cd 40 80 	pushm	r7,lr
80002014:	1a 97       	mov	r7,sp
80002016:	20 1d       	sub	sp,4
80002018:	18 98       	mov	r8,r12
8000201a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (idx)
8000201e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002022:	58 28       	cp.w	r8,2
80002024:	c1 10       	breq	80002046 <io_pin+0x36>
80002026:	e0 89 00 07 	brgt	80002034 <io_pin+0x24>
8000202a:	58 08       	cp.w	r8,0
8000202c:	c0 90       	breq	8000203e <io_pin+0x2e>
8000202e:	58 18       	cp.w	r8,1
80002030:	c0 90       	breq	80002042 <io_pin+0x32>
80002032:	c1 08       	rjmp	80002052 <io_pin+0x42>
80002034:	58 38       	cp.w	r8,3
80002036:	c0 a0       	breq	8000204a <io_pin+0x3a>
80002038:	58 48       	cp.w	r8,4
8000203a:	c0 a0       	breq	8000204e <io_pin+0x3e>
8000203c:	c0 b8       	rjmp	80002052 <io_pin+0x42>
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
8000203e:	33 38       	mov	r8,51
80002040:	c0 a8       	rjmp	80002054 <io_pin+0x44>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
80002042:	33 48       	mov	r8,52
80002044:	c0 88       	rjmp	80002054 <io_pin+0x44>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
80002046:	33 58       	mov	r8,53
80002048:	c0 68       	rjmp	80002054 <io_pin+0x44>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
8000204a:	33 68       	mov	r8,54
8000204c:	c0 48       	rjmp	80002054 <io_pin+0x44>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
8000204e:	33 78       	mov	r8,55
80002050:	c0 28       	rjmp	80002054 <io_pin+0x44>
			break;
		default: 
			return 0; //TODO: return a better error code here
80002052:	30 08       	mov	r8,0
			break;
	}
}
80002054:	10 9c       	mov	r12,r8
80002056:	2f fd       	sub	sp,-4
80002058:	e3 cd 80 80 	ldm	sp++,r7,pc

8000205c <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
8000205c:	eb cd 40 80 	pushm	r7,lr
80002060:	1a 97       	mov	r7,sp
80002062:	20 3d       	sub	sp,12
80002064:	18 98       	mov	r8,r12
80002066:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
8000206a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000206e:	10 9c       	mov	r12,r8
80002070:	f0 1f 00 0c 	mcall	800020a0 <drive_DQ_low+0x44>
80002074:	18 98       	mov	r8,r12
80002076:	ef 68 ff fb 	st.b	r7[-5],r8
	
	ioFlags = (GPIO_DIR_OUTPUT); //14may15 experiment
8000207a:	30 18       	mov	r8,1
8000207c:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ioPin, ioFlags); //14may15 experiment
80002080:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002084:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002088:	12 9b       	mov	r11,r9
8000208a:	10 9c       	mov	r12,r8
8000208c:	f0 1f 00 06 	mcall	800020a4 <drive_DQ_low+0x48>

	gpio_set_pin_low(ioPin);
80002090:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002094:	10 9c       	mov	r12,r8
80002096:	f0 1f 00 05 	mcall	800020a8 <drive_DQ_low+0x4c>

}
8000209a:	2f dd       	sub	sp,-12
8000209c:	e3 cd 80 80 	ldm	sp++,r7,pc
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	20 10       	sub	r0,1
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	48 28       	lddpc	r8,800020ac <release_the_bus>
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	4b 3c       	lddpc	r12,80002174 <SetSpeed>

800020ac <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
800020ac:	eb cd 40 80 	pushm	r7,lr
800020b0:	1a 97       	mov	r7,sp
800020b2:	20 3d       	sub	sp,12
800020b4:	18 98       	mov	r8,r12
800020b6:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
800020ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800020be:	10 9c       	mov	r12,r8
800020c0:	f0 1f 00 0a 	mcall	800020e8 <release_the_bus+0x3c>
800020c4:	18 98       	mov	r8,r12
800020c6:	ef 68 ff fb 	st.b	r7[-5],r8
	
//14may15 experiment	gpio_set_pin_high(ioPin);
	
	ioFlags = (GPIO_DIR_INPUT); //14may15 experiment
800020ca:	30 08       	mov	r8,0
800020cc:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ioPin, ioFlags); //14may15 experiment
800020d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020d4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800020d8:	12 9b       	mov	r11,r9
800020da:	10 9c       	mov	r12,r8
800020dc:	f0 1f 00 04 	mcall	800020ec <release_the_bus+0x40>

}
800020e0:	2f dd       	sub	sp,-12
800020e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800020e6:	00 00       	add	r0,r0
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	20 10       	sub	r0,1
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	48 28       	lddpc	r8,800020f4 <gpio_input+0x4>

800020f0 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
800020f0:	eb cd 40 80 	pushm	r7,lr
800020f4:	1a 97       	mov	r7,sp
800020f6:	20 3d       	sub	sp,12
800020f8:	18 98       	mov	r8,r12
800020fa:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 9c       	mov	r12,r8
80002104:	f0 1f 00 09 	mcall	80002128 <gpio_input+0x38>
80002108:	18 98       	mov	r8,r12
8000210a:	ef 68 ff ff 	st.b	r7[-1],r8
		
	ioFlags = (GPIO_DIR_INPUT);
8000210e:	30 08       	mov	r8,0
80002110:	ef 48 ff f8 	st.w	r7[-8],r8
	gpio_configure_pin(ioPin, ioFlags);
80002114:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002118:	ee fb ff f8 	ld.w	r11,r7[-8]
8000211c:	10 9c       	mov	r12,r8
8000211e:	f0 1f 00 04 	mcall	8000212c <gpio_input+0x3c>

}
80002122:	2f dd       	sub	sp,-12
80002124:	e3 cd 80 80 	ldm	sp++,r7,pc
80002128:	80 00       	ld.sh	r0,r0[0x0]
8000212a:	20 10       	sub	r0,1
8000212c:	80 00       	ld.sh	r0,r0[0x0]
8000212e:	48 28       	lddpc	r8,80002134 <sample_line+0x4>

80002130 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
80002130:	eb cd 40 80 	pushm	r7,lr
80002134:	1a 97       	mov	r7,sp
80002136:	20 2d       	sub	sp,8
80002138:	18 98       	mov	r8,r12
8000213a:	ef 68 ff f8 	st.b	r7[-8],r8
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
8000213e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002142:	10 9c       	mov	r12,r8
80002144:	f0 1f 00 0a 	mcall	8000216c <sample_line+0x3c>
80002148:	18 98       	mov	r8,r12
8000214a:	ef 68 ff ff 	st.b	r7[-1],r8
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = gpio_get_pin_value(ioPin);
8000214e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002152:	10 9c       	mov	r12,r8
80002154:	f0 1f 00 07 	mcall	80002170 <sample_line+0x40>
80002158:	18 98       	mov	r8,r12
8000215a:	ef 68 ff fe 	st.b	r7[-2],r8

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
8000215e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
80002162:	10 9c       	mov	r12,r8
80002164:	2f ed       	sub	sp,-8
80002166:	e3 cd 80 80 	ldm	sp++,r7,pc
8000216a:	00 00       	add	r0,r0
8000216c:	80 00       	ld.sh	r0,r0[0x0]
8000216e:	20 10       	sub	r0,1
80002170:	80 00       	ld.sh	r0,r0[0x0]
80002172:	4a c6       	lddpc	r6,80002220 <SetSpeed+0xac>

80002174 <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
80002174:	eb cd 40 80 	pushm	r7,lr
80002178:	1a 97       	mov	r7,sp
8000217a:	20 1d       	sub	sp,4
8000217c:	ef 4c ff fc 	st.w	r7[-4],r12
		J = 410;
	}
	
#endif

	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
80002180:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002184:	58 08       	cp.w	r8,0
80002186:	c2 20       	breq	800021ca <SetSpeed+0x56>
	{
		// Standard Speed
		A = 0; //6;
80002188:	4a 18       	lddpc	r8,8000220c <SetSpeed+0x98>
8000218a:	30 09       	mov	r9,0
8000218c:	91 09       	st.w	r8[0x0],r9
		B = 32; //64;
8000218e:	4a 18       	lddpc	r8,80002210 <SetSpeed+0x9c>
80002190:	32 09       	mov	r9,32
80002192:	91 09       	st.w	r8[0x0],r9
		C = 30; //60;
80002194:	4a 08       	lddpc	r8,80002214 <SetSpeed+0xa0>
80002196:	31 e9       	mov	r9,30
80002198:	91 09       	st.w	r8[0x0],r9
		D = 2; //10;
8000219a:	4a 08       	lddpc	r8,80002218 <SetSpeed+0xa4>
8000219c:	30 29       	mov	r9,2
8000219e:	91 09       	st.w	r8[0x0],r9
		E = 2; //9;
800021a0:	49 f8       	lddpc	r8,8000221c <SetSpeed+0xa8>
800021a2:	30 29       	mov	r9,2
800021a4:	91 09       	st.w	r8[0x0],r9
		F = 27; //55;
800021a6:	49 f8       	lddpc	r8,80002220 <SetSpeed+0xac>
800021a8:	31 b9       	mov	r9,27
800021aa:	91 09       	st.w	r8[0x0],r9
		G = 0; //0;
800021ac:	49 e8       	lddpc	r8,80002224 <SetSpeed+0xb0>
800021ae:	30 09       	mov	r9,0
800021b0:	91 09       	st.w	r8[0x0],r9
		H = 240; //480;
800021b2:	49 e8       	lddpc	r8,80002228 <SetSpeed+0xb4>
800021b4:	e0 69 00 f0 	mov	r9,240
800021b8:	91 09       	st.w	r8[0x0],r9
		I = 35; //70;
800021ba:	49 d8       	lddpc	r8,8000222c <SetSpeed+0xb8>
800021bc:	32 39       	mov	r9,35
800021be:	91 09       	st.w	r8[0x0],r9
		J = 205; //410;
800021c0:	49 c8       	lddpc	r8,80002230 <SetSpeed+0xbc>
800021c2:	e0 69 00 cd 	mov	r9,205
800021c6:	91 09       	st.w	r8[0x0],r9
800021c8:	c1 f8       	rjmp	80002206 <SetSpeed+0x92>


	else
	{
		// Overdrive Speed
		A = 1.5;
800021ca:	49 18       	lddpc	r8,8000220c <SetSpeed+0x98>
800021cc:	30 19       	mov	r9,1
800021ce:	91 09       	st.w	r8[0x0],r9
		B = 7.5;
800021d0:	49 08       	lddpc	r8,80002210 <SetSpeed+0x9c>
800021d2:	30 79       	mov	r9,7
800021d4:	91 09       	st.w	r8[0x0],r9
		C = 7.5;
800021d6:	49 08       	lddpc	r8,80002214 <SetSpeed+0xa0>
800021d8:	30 79       	mov	r9,7
800021da:	91 09       	st.w	r8[0x0],r9
		D = 2.5;
800021dc:	48 f8       	lddpc	r8,80002218 <SetSpeed+0xa4>
800021de:	30 29       	mov	r9,2
800021e0:	91 09       	st.w	r8[0x0],r9
		E = 0.75;
800021e2:	48 f8       	lddpc	r8,8000221c <SetSpeed+0xa8>
800021e4:	30 09       	mov	r9,0
800021e6:	91 09       	st.w	r8[0x0],r9
		F = 7;
800021e8:	48 e8       	lddpc	r8,80002220 <SetSpeed+0xac>
800021ea:	30 79       	mov	r9,7
800021ec:	91 09       	st.w	r8[0x0],r9
		G = 2.5;
800021ee:	48 e8       	lddpc	r8,80002224 <SetSpeed+0xb0>
800021f0:	30 29       	mov	r9,2
800021f2:	91 09       	st.w	r8[0x0],r9
		H = 70;
800021f4:	48 d8       	lddpc	r8,80002228 <SetSpeed+0xb4>
800021f6:	34 69       	mov	r9,70
800021f8:	91 09       	st.w	r8[0x0],r9
		I = 8.5;
800021fa:	48 d8       	lddpc	r8,8000222c <SetSpeed+0xb8>
800021fc:	30 89       	mov	r9,8
800021fe:	91 09       	st.w	r8[0x0],r9
		J = 40;
80002200:	48 c8       	lddpc	r8,80002230 <SetSpeed+0xbc>
80002202:	32 89       	mov	r9,40
80002204:	91 09       	st.w	r8[0x0],r9
	}
}
80002206:	2f fd       	sub	sp,-4
80002208:	e3 cd 80 80 	ldm	sp++,r7,pc
8000220c:	00 00       	add	r0,r0
8000220e:	08 14       	sub	r4,r4
80002210:	00 00       	add	r0,r0
80002212:	08 18       	sub	r8,r4
80002214:	00 00       	add	r0,r0
80002216:	08 20       	rsub	r0,r4
80002218:	00 00       	add	r0,r0
8000221a:	08 10       	sub	r0,r4
8000221c:	00 00       	add	r0,r0
8000221e:	08 2c       	rsub	r12,r4
80002220:	00 00       	add	r0,r0
80002222:	08 34       	cp.w	r4,r4
80002224:	00 00       	add	r0,r0
80002226:	08 24       	rsub	r4,r4
80002228:	00 00       	add	r0,r0
8000222a:	08 28       	rsub	r8,r4
8000222c:	00 00       	add	r0,r0
8000222e:	08 30       	cp.w	r0,r4
80002230:	00 00       	add	r0,r0
80002232:	08 1c       	sub	r12,r4

80002234 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
80002234:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002238:	1a 97       	mov	r7,sp
8000223a:	fa cd 00 e0 	sub	sp,sp,224
8000223e:	18 98       	mov	r8,r12
80002240:	ef 68 ff 48 	st.b	r7[-184],r8
	int result;

	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ);
80002244:	fe f8 05 9c 	ld.w	r8,pc[1436]
80002248:	70 08       	ld.w	r8,r8[0x0]
8000224a:	ef 48 ff 84 	st.w	r7[-124],r8
8000224e:	e0 68 e1 00 	mov	r8,57600
80002252:	ea 18 05 f5 	orh	r8,0x5f5
80002256:	ef 48 ff 80 	st.w	r7[-128],r8
8000225a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000225e:	ef 48 ff 8c 	st.w	r7[-116],r8
80002262:	ee f8 ff 80 	ld.w	r8,r7[-128]
80002266:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000226a:	ee f2 ff 8c 	ld.w	r2,r7[-116]
8000226e:	30 03       	mov	r3,0
80002270:	ee fa ff 88 	ld.w	r10,r7[-120]
80002274:	30 0b       	mov	r11,0
80002276:	e6 0a 02 49 	mul	r9,r3,r10
8000227a:	f6 02 02 48 	mul	r8,r11,r2
8000227e:	10 09       	add	r9,r8
80002280:	e4 0a 06 4a 	mulu.d	r10,r2,r10
80002284:	16 09       	add	r9,r11
80002286:	12 9b       	mov	r11,r9
80002288:	ee 78 42 3f 	mov	r8,999999
8000228c:	30 09       	mov	r9,0
8000228e:	10 0a       	add	r10,r8
80002290:	f6 09 00 4b 	adc	r11,r11,r9
80002294:	ee 78 42 40 	mov	r8,1000000
80002298:	30 09       	mov	r9,0
8000229a:	f0 1f 01 53 	mcall	800027e4 <OWTouchReset+0x5b0>
8000229e:	14 98       	mov	r8,r10
800022a0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800022a2:	ef 48 ff 94 	st.w	r7[-108],r8
800022a6:	ee c8 00 b4 	sub	r8,r7,180
800022aa:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022ae:	e1 b8 00 42 	mfsr	r8,0x108
800022b2:	10 99       	mov	r9,r8
800022b4:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022b8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022ba:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022be:	70 09       	ld.w	r9,r8[0x0]
800022c0:	ee f8 ff 94 	ld.w	r8,r7[-108]
800022c4:	10 09       	add	r9,r8
800022c6:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022ca:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800022cc:	ee f9 ff 90 	ld.w	r9,r7[-112]
800022d0:	30 08       	mov	r8,0
800022d2:	f3 68 00 08 	st.b	r9[8],r8
800022d6:	ee c8 00 b4 	sub	r8,r7,180
800022da:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022de:	e1 b8 00 42 	mfsr	r8,0x108
800022e2:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800022e6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022ea:	f1 39 00 08 	ld.ub	r9,r8[8]
800022ee:	30 28       	mov	r8,2
800022f0:	f0 09 18 00 	cp.b	r9,r8
800022f4:	c0 31       	brne	800022fa <OWTouchReset+0xc6>
    return false;
800022f6:	30 08       	mov	r8,0
800022f8:	c4 38       	rjmp	8000237e <OWTouchReset+0x14a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800022fa:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022fe:	f1 39 00 08 	ld.ub	r9,r8[8]
80002302:	30 18       	mov	r8,1
80002304:	f0 09 18 00 	cp.b	r9,r8
80002308:	c0 31       	brne	8000230e <OWTouchReset+0xda>
    return true;
8000230a:	30 18       	mov	r8,1
8000230c:	c3 98       	rjmp	8000237e <OWTouchReset+0x14a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000230e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002312:	70 09       	ld.w	r9,r8[0x0]
80002314:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002318:	70 18       	ld.w	r8,r8[0x4]
8000231a:	10 39       	cp.w	r9,r8
8000231c:	e0 88 00 1a 	brls	80002350 <OWTouchReset+0x11c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002320:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002324:	70 08       	ld.w	r8,r8[0x0]
80002326:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000232a:	10 39       	cp.w	r9,r8
8000232c:	c1 02       	brcc	8000234c <OWTouchReset+0x118>
8000232e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002332:	70 18       	ld.w	r8,r8[0x4]
80002334:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002338:	10 39       	cp.w	r9,r8
8000233a:	e0 88 00 09 	brls	8000234c <OWTouchReset+0x118>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000233e:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002342:	30 18       	mov	r8,1
80002344:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002348:	30 18       	mov	r8,1
8000234a:	c1 a8       	rjmp	8000237e <OWTouchReset+0x14a>
    }
    return false;
8000234c:	30 08       	mov	r8,0
8000234e:	c1 88       	rjmp	8000237e <OWTouchReset+0x14a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002350:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002354:	70 08       	ld.w	r8,r8[0x0]
80002356:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000235a:	10 39       	cp.w	r9,r8
8000235c:	c0 93       	brcs	8000236e <OWTouchReset+0x13a>
8000235e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002362:	70 18       	ld.w	r8,r8[0x4]
80002364:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002368:	10 39       	cp.w	r9,r8
8000236a:	e0 88 00 09 	brls	8000237c <OWTouchReset+0x148>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000236e:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002372:	30 18       	mov	r8,1
80002374:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002378:	30 18       	mov	r8,1
8000237a:	c0 28       	rjmp	8000237e <OWTouchReset+0x14a>
    }
    return false;
8000237c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000237e:	58 08       	cp.w	r8,0
80002380:	ca b0       	breq	800022d6 <OWTouchReset+0xa2>
	drive_DQ_low(idx);
80002382:	ef 38 ff 48 	ld.ub	r8,r7[-184]
80002386:	10 9c       	mov	r12,r8
80002388:	f0 1f 01 18 	mcall	800027e8 <OWTouchReset+0x5b4>
	cpu_delay_us(H, EC_CPU_CLOCK_100MHZ);	//tRSTL (reset low) 480-640us
8000238c:	fe f8 04 60 	ld.w	r8,pc[1120]
80002390:	70 08       	ld.w	r8,r8[0x0]
80002392:	ef 48 ff a4 	st.w	r7[-92],r8
80002396:	e0 68 e1 00 	mov	r8,57600
8000239a:	ea 18 05 f5 	orh	r8,0x5f5
8000239e:	ef 48 ff a0 	st.w	r7[-96],r8
800023a2:	ee f8 ff a4 	ld.w	r8,r7[-92]
800023a6:	ef 48 ff ac 	st.w	r7[-84],r8
800023aa:	ee f8 ff a0 	ld.w	r8,r7[-96]
800023ae:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800023b2:	ee fc ff ac 	ld.w	r12,r7[-84]
800023b6:	ef 4c ff 2c 	st.w	r7[-212],r12
800023ba:	30 0b       	mov	r11,0
800023bc:	ef 4b ff 28 	st.w	r7[-216],r11
800023c0:	ee f9 ff a8 	ld.w	r9,r7[-88]
800023c4:	ef 49 ff 24 	st.w	r7[-220],r9
800023c8:	30 08       	mov	r8,0
800023ca:	ef 48 ff 20 	st.w	r7[-224],r8
800023ce:	ee fa ff 28 	ld.w	r10,r7[-216]
800023d2:	ee fc ff 24 	ld.w	r12,r7[-220]
800023d6:	b9 3a       	mul	r10,r12
800023d8:	ee f8 ff 20 	ld.w	r8,r7[-224]
800023dc:	ee fb ff 2c 	ld.w	r11,r7[-212]
800023e0:	b7 38       	mul	r8,r11
800023e2:	10 0a       	add	r10,r8
800023e4:	ee fc ff 2c 	ld.w	r12,r7[-212]
800023e8:	ee fb ff 24 	ld.w	r11,r7[-220]
800023ec:	f8 0b 06 48 	mulu.d	r8,r12,r11
800023f0:	12 0a       	add	r10,r9
800023f2:	14 99       	mov	r9,r10
800023f4:	ee 7a 42 3f 	mov	r10,999999
800023f8:	30 0b       	mov	r11,0
800023fa:	f0 0a 00 0a 	add	r10,r8,r10
800023fe:	f2 0b 00 4b 	adc	r11,r9,r11
80002402:	ee 78 42 40 	mov	r8,1000000
80002406:	30 09       	mov	r9,0
80002408:	f0 1f 00 f7 	mcall	800027e4 <OWTouchReset+0x5b0>
8000240c:	14 98       	mov	r8,r10
8000240e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002410:	ef 48 ff b4 	st.w	r7[-76],r8
80002414:	ee c8 00 a8 	sub	r8,r7,168
80002418:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000241c:	e1 b8 00 42 	mfsr	r8,0x108
80002420:	10 99       	mov	r9,r8
80002422:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002426:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002428:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000242c:	70 09       	ld.w	r9,r8[0x0]
8000242e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002432:	10 09       	add	r9,r8
80002434:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002438:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000243a:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000243e:	30 08       	mov	r8,0
80002440:	f3 68 00 08 	st.b	r9[8],r8
80002444:	ee c8 00 a8 	sub	r8,r7,168
80002448:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000244c:	e1 b8 00 42 	mfsr	r8,0x108
80002450:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002454:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002458:	f1 39 00 08 	ld.ub	r9,r8[8]
8000245c:	30 28       	mov	r8,2
8000245e:	f0 09 18 00 	cp.b	r9,r8
80002462:	c0 31       	brne	80002468 <OWTouchReset+0x234>
    return false;
80002464:	30 08       	mov	r8,0
80002466:	c4 38       	rjmp	800024ec <OWTouchReset+0x2b8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002468:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000246c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002470:	30 18       	mov	r8,1
80002472:	f0 09 18 00 	cp.b	r9,r8
80002476:	c0 31       	brne	8000247c <OWTouchReset+0x248>
    return true;
80002478:	30 18       	mov	r8,1
8000247a:	c3 98       	rjmp	800024ec <OWTouchReset+0x2b8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000247c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002480:	70 09       	ld.w	r9,r8[0x0]
80002482:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002486:	70 18       	ld.w	r8,r8[0x4]
80002488:	10 39       	cp.w	r9,r8
8000248a:	e0 88 00 1a 	brls	800024be <OWTouchReset+0x28a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000248e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002492:	70 08       	ld.w	r8,r8[0x0]
80002494:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002498:	10 39       	cp.w	r9,r8
8000249a:	c1 02       	brcc	800024ba <OWTouchReset+0x286>
8000249c:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024a0:	70 18       	ld.w	r8,r8[0x4]
800024a2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024a6:	10 39       	cp.w	r9,r8
800024a8:	e0 88 00 09 	brls	800024ba <OWTouchReset+0x286>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024ac:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024b0:	30 18       	mov	r8,1
800024b2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024b6:	30 18       	mov	r8,1
800024b8:	c1 a8       	rjmp	800024ec <OWTouchReset+0x2b8>
    }
    return false;
800024ba:	30 08       	mov	r8,0
800024bc:	c1 88       	rjmp	800024ec <OWTouchReset+0x2b8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800024be:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024c2:	70 08       	ld.w	r8,r8[0x0]
800024c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024c8:	10 39       	cp.w	r9,r8
800024ca:	c0 93       	brcs	800024dc <OWTouchReset+0x2a8>
800024cc:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024d0:	70 18       	ld.w	r8,r8[0x4]
800024d2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024d6:	10 39       	cp.w	r9,r8
800024d8:	e0 88 00 09 	brls	800024ea <OWTouchReset+0x2b6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024dc:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024e0:	30 18       	mov	r8,1
800024e2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024e6:	30 18       	mov	r8,1
800024e8:	c0 28       	rjmp	800024ec <OWTouchReset+0x2b8>
    }
    return false;
800024ea:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800024ec:	58 08       	cp.w	r8,0
800024ee:	ca b0       	breq	80002444 <OWTouchReset+0x210>
	release_the_bus(idx);
800024f0:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024f4:	10 9c       	mov	r12,r8
800024f6:	f0 1f 00 bf 	mcall	800027f0 <OWTouchReset+0x5bc>
	
	gpio_input(idx); //14may15 experiment
800024fa:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024fe:	10 9c       	mov	r12,r8
80002500:	f0 1f 00 bd 	mcall	800027f4 <OWTouchReset+0x5c0>

	
	cpu_delay_us(I, EC_CPU_CLOCK_100MHZ);	//tMSP (presence detect sample) 60-75us
80002504:	fe f8 02 f4 	ld.w	r8,pc[756]
80002508:	70 08       	ld.w	r8,r8[0x0]
8000250a:	ef 48 ff c4 	st.w	r7[-60],r8
8000250e:	e0 68 e1 00 	mov	r8,57600
80002512:	ea 18 05 f5 	orh	r8,0x5f5
80002516:	ef 48 ff c0 	st.w	r7[-64],r8
8000251a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000251e:	ef 48 ff cc 	st.w	r7[-52],r8
80002522:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002526:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000252a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000252e:	ef 49 ff 3c 	st.w	r7[-196],r9
80002532:	30 08       	mov	r8,0
80002534:	ef 48 ff 38 	st.w	r7[-200],r8
80002538:	ee fc ff c8 	ld.w	r12,r7[-56]
8000253c:	ef 4c ff 34 	st.w	r7[-204],r12
80002540:	30 0b       	mov	r11,0
80002542:	ef 4b ff 30 	st.w	r7[-208],r11
80002546:	ee fa ff 38 	ld.w	r10,r7[-200]
8000254a:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000254e:	b3 3a       	mul	r10,r9
80002550:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002554:	ee fc ff 3c 	ld.w	r12,r7[-196]
80002558:	b9 38       	mul	r8,r12
8000255a:	10 0a       	add	r10,r8
8000255c:	ee fb ff 3c 	ld.w	r11,r7[-196]
80002560:	ee fc ff 34 	ld.w	r12,r7[-204]
80002564:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002568:	12 0a       	add	r10,r9
8000256a:	14 99       	mov	r9,r10
8000256c:	ee 7a 42 3f 	mov	r10,999999
80002570:	30 0b       	mov	r11,0
80002572:	f0 0a 00 0a 	add	r10,r8,r10
80002576:	f2 0b 00 4b 	adc	r11,r9,r11
8000257a:	ee 78 42 40 	mov	r8,1000000
8000257e:	30 09       	mov	r9,0
80002580:	f0 1f 00 99 	mcall	800027e4 <OWTouchReset+0x5b0>
80002584:	14 98       	mov	r8,r10
80002586:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002588:	ef 48 ff d4 	st.w	r7[-44],r8
8000258c:	ee c8 00 9c 	sub	r8,r7,156
80002590:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002594:	e1 b8 00 42 	mfsr	r8,0x108
80002598:	10 99       	mov	r9,r8
8000259a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000259e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025a0:	ee f8 ff d0 	ld.w	r8,r7[-48]
800025a4:	70 09       	ld.w	r9,r8[0x0]
800025a6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800025aa:	10 09       	add	r9,r8
800025ac:	ee f8 ff d0 	ld.w	r8,r7[-48]
800025b0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800025b2:	ee f9 ff d0 	ld.w	r9,r7[-48]
800025b6:	30 08       	mov	r8,0
800025b8:	f3 68 00 08 	st.b	r9[8],r8
800025bc:	ee c8 00 9c 	sub	r8,r7,156
800025c0:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025c4:	e1 b8 00 42 	mfsr	r8,0x108
800025c8:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800025cc:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025d0:	f1 39 00 08 	ld.ub	r9,r8[8]
800025d4:	30 28       	mov	r8,2
800025d6:	f0 09 18 00 	cp.b	r9,r8
800025da:	c0 31       	brne	800025e0 <OWTouchReset+0x3ac>
    return false;
800025dc:	30 08       	mov	r8,0
800025de:	c4 38       	rjmp	80002664 <OWTouchReset+0x430>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800025e0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025e4:	f1 39 00 08 	ld.ub	r9,r8[8]
800025e8:	30 18       	mov	r8,1
800025ea:	f0 09 18 00 	cp.b	r9,r8
800025ee:	c0 31       	brne	800025f4 <OWTouchReset+0x3c0>
    return true;
800025f0:	30 18       	mov	r8,1
800025f2:	c3 98       	rjmp	80002664 <OWTouchReset+0x430>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025f4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025f8:	70 09       	ld.w	r9,r8[0x0]
800025fa:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025fe:	70 18       	ld.w	r8,r8[0x4]
80002600:	10 39       	cp.w	r9,r8
80002602:	e0 88 00 1a 	brls	80002636 <OWTouchReset+0x402>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002606:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000260a:	70 08       	ld.w	r8,r8[0x0]
8000260c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002610:	10 39       	cp.w	r9,r8
80002612:	c1 02       	brcc	80002632 <OWTouchReset+0x3fe>
80002614:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002618:	70 18       	ld.w	r8,r8[0x4]
8000261a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000261e:	10 39       	cp.w	r9,r8
80002620:	e0 88 00 09 	brls	80002632 <OWTouchReset+0x3fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002624:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002628:	30 18       	mov	r8,1
8000262a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000262e:	30 18       	mov	r8,1
80002630:	c1 a8       	rjmp	80002664 <OWTouchReset+0x430>
    }
    return false;
80002632:	30 08       	mov	r8,0
80002634:	c1 88       	rjmp	80002664 <OWTouchReset+0x430>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002636:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000263a:	70 08       	ld.w	r8,r8[0x0]
8000263c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002640:	10 39       	cp.w	r9,r8
80002642:	c0 93       	brcs	80002654 <OWTouchReset+0x420>
80002644:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002648:	70 18       	ld.w	r8,r8[0x4]
8000264a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000264e:	10 39       	cp.w	r9,r8
80002650:	e0 88 00 09 	brls	80002662 <OWTouchReset+0x42e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002654:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002658:	30 18       	mov	r8,1
8000265a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000265e:	30 18       	mov	r8,1
80002660:	c0 28       	rjmp	80002664 <OWTouchReset+0x430>
    }
    return false;
80002662:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002664:	58 08       	cp.w	r8,0
80002666:	ca b0       	breq	800025bc <OWTouchReset+0x388>
	result = sample_line(idx);
80002668:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000266c:	10 9c       	mov	r12,r8
8000266e:	f0 1f 00 64 	mcall	800027fc <OWTouchReset+0x5c8>
80002672:	18 98       	mov	r8,r12
80002674:	ef 48 ff 7c 	st.w	r7[-132],r8
	
	gpio_input(idx); //14may15 experiement
80002678:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000267c:	10 9c       	mov	r12,r8
8000267e:	f0 1f 00 5e 	mcall	800027f4 <OWTouchReset+0x5c0>

	cpu_delay_us(J, EC_CPU_CLOCK_100MHZ); // Complete the reset sequence recovery 5-??us (no max?)
80002682:	4e 08       	lddpc	r8,80002800 <OWTouchReset+0x5cc>
80002684:	70 08       	ld.w	r8,r8[0x0]
80002686:	ef 48 ff e4 	st.w	r7[-28],r8
8000268a:	e0 68 e1 00 	mov	r8,57600
8000268e:	ea 18 05 f5 	orh	r8,0x5f5
80002692:	ef 48 ff e0 	st.w	r7[-32],r8
80002696:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000269a:	ef 48 ff ec 	st.w	r7[-20],r8
8000269e:	ee f8 ff e0 	ld.w	r8,r7[-32]
800026a2:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800026a6:	ee fb ff ec 	ld.w	r11,r7[-20]
800026aa:	ef 4b ff 44 	st.w	r7[-188],r11
800026ae:	30 09       	mov	r9,0
800026b0:	ef 49 ff 40 	st.w	r7[-192],r9
800026b4:	ee f0 ff e8 	ld.w	r0,r7[-24]
800026b8:	30 01       	mov	r1,0
800026ba:	ee fa ff 40 	ld.w	r10,r7[-192]
800026be:	a1 3a       	mul	r10,r0
800026c0:	ee fc ff 44 	ld.w	r12,r7[-188]
800026c4:	e2 0c 02 48 	mul	r8,r1,r12
800026c8:	10 0a       	add	r10,r8
800026ca:	ee fb ff 44 	ld.w	r11,r7[-188]
800026ce:	f6 00 06 48 	mulu.d	r8,r11,r0
800026d2:	12 0a       	add	r10,r9
800026d4:	14 99       	mov	r9,r10
800026d6:	ee 7a 42 3f 	mov	r10,999999
800026da:	30 0b       	mov	r11,0
800026dc:	f0 0a 00 0a 	add	r10,r8,r10
800026e0:	f2 0b 00 4b 	adc	r11,r9,r11
800026e4:	ee 78 42 40 	mov	r8,1000000
800026e8:	30 09       	mov	r9,0
800026ea:	f0 1f 00 3f 	mcall	800027e4 <OWTouchReset+0x5b0>
800026ee:	14 98       	mov	r8,r10
800026f0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800026f2:	ef 48 ff f4 	st.w	r7[-12],r8
800026f6:	ee c8 00 90 	sub	r8,r7,144
800026fa:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026fe:	e1 b8 00 42 	mfsr	r8,0x108
80002702:	10 99       	mov	r9,r8
80002704:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002708:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000270a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000270e:	70 09       	ld.w	r9,r8[0x0]
80002710:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002714:	10 09       	add	r9,r8
80002716:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000271a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000271c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002720:	30 08       	mov	r8,0
80002722:	f3 68 00 08 	st.b	r9[8],r8
80002726:	ee c8 00 90 	sub	r8,r7,144
8000272a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000272e:	e1 b8 00 42 	mfsr	r8,0x108
80002732:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002736:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000273a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000273e:	30 28       	mov	r8,2
80002740:	f0 09 18 00 	cp.b	r9,r8
80002744:	c0 31       	brne	8000274a <OWTouchReset+0x516>
    return false;
80002746:	30 08       	mov	r8,0
80002748:	c4 38       	rjmp	800027ce <OWTouchReset+0x59a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000274a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000274e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002752:	30 18       	mov	r8,1
80002754:	f0 09 18 00 	cp.b	r9,r8
80002758:	c0 31       	brne	8000275e <OWTouchReset+0x52a>
    return true;
8000275a:	30 18       	mov	r8,1
8000275c:	c3 98       	rjmp	800027ce <OWTouchReset+0x59a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000275e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002762:	70 09       	ld.w	r9,r8[0x0]
80002764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002768:	70 18       	ld.w	r8,r8[0x4]
8000276a:	10 39       	cp.w	r9,r8
8000276c:	e0 88 00 1a 	brls	800027a0 <OWTouchReset+0x56c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002774:	70 08       	ld.w	r8,r8[0x0]
80002776:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000277a:	10 39       	cp.w	r9,r8
8000277c:	c1 02       	brcc	8000279c <OWTouchReset+0x568>
8000277e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002782:	70 18       	ld.w	r8,r8[0x4]
80002784:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002788:	10 39       	cp.w	r9,r8
8000278a:	e0 88 00 09 	brls	8000279c <OWTouchReset+0x568>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000278e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002792:	30 18       	mov	r8,1
80002794:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002798:	30 18       	mov	r8,1
8000279a:	c1 a8       	rjmp	800027ce <OWTouchReset+0x59a>
    }
    return false;
8000279c:	30 08       	mov	r8,0
8000279e:	c1 88       	rjmp	800027ce <OWTouchReset+0x59a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800027a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027a4:	70 08       	ld.w	r8,r8[0x0]
800027a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027aa:	10 39       	cp.w	r9,r8
800027ac:	c0 93       	brcs	800027be <OWTouchReset+0x58a>
800027ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027b2:	70 18       	ld.w	r8,r8[0x4]
800027b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027b8:	10 39       	cp.w	r9,r8
800027ba:	e0 88 00 09 	brls	800027cc <OWTouchReset+0x598>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800027c2:	30 18       	mov	r8,1
800027c4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027c8:	30 18       	mov	r8,1
800027ca:	c0 28       	rjmp	800027ce <OWTouchReset+0x59a>
    }
    return false;
800027cc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800027ce:	58 08       	cp.w	r8,0
800027d0:	ca b0       	breq	80002726 <OWTouchReset+0x4f2>
	return result; // Return sample presence pulse result
800027d2:	ee f8 ff 7c 	ld.w	r8,r7[-132]
}
800027d6:	10 9c       	mov	r12,r8
800027d8:	2c 8d       	sub	sp,-224
800027da:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800027de:	00 00       	add	r0,r0
800027e0:	00 00       	add	r0,r0
800027e2:	08 14       	sub	r4,r4
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	c8 92       	brcc	800026f8 <OWTouchReset+0x4c4>
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	20 5c       	sub	r12,5
800027ec:	00 00       	add	r0,r0
800027ee:	08 28       	rsub	r8,r4
800027f0:	80 00       	ld.sh	r0,r0[0x0]
800027f2:	20 ac       	sub	r12,10
800027f4:	80 00       	ld.sh	r0,r0[0x0]
800027f6:	20 f0       	sub	r0,15
800027f8:	00 00       	add	r0,r0
800027fa:	08 30       	cp.w	r0,r4
800027fc:	80 00       	ld.sh	r0,r0[0x0]
800027fe:	21 30       	sub	r0,19
80002800:	00 00       	add	r0,r0
80002802:	08 1c       	sub	r12,r4

80002804 <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
80002804:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002808:	1a 97       	mov	r7,sp
8000280a:	20 fd       	sub	sp,60
8000280c:	18 98       	mov	r8,r12
8000280e:	ef 68 ff c4 	st.b	r7[-60],r8
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
80002812:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80002816:	10 9c       	mov	r12,r8
80002818:	f0 1f 00 61 	mcall	8000299c <drive_DQ_low_and_release_the_bus+0x198>
8000281c:	18 98       	mov	r8,r12
8000281e:	ef 68 ff d7 	st.b	r7[-41],r8
	
	ioFlagsInput = (GPIO_DIR_INPUT);
80002822:	30 08       	mov	r8,0
80002824:	ef 48 ff dc 	st.w	r7[-36],r8
	ioFlagsOutput = (GPIO_DIR_OUTPUT); //14may15 experiment
80002828:	30 18       	mov	r8,1
8000282a:	ef 48 ff d8 	st.w	r7[-40],r8

	gpio_configure_pin(ioPin, ioFlagsOutput); //14may15 experiment
8000282e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002832:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80002836:	12 9b       	mov	r11,r9
80002838:	10 9c       	mov	r12,r8
8000283a:	f0 1f 00 5a 	mcall	800029a0 <drive_DQ_low_and_release_the_bus+0x19c>

	gpio_set_pin_low(ioPin);
8000283e:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80002842:	10 9c       	mov	r12,r8
80002844:	f0 1f 00 58 	mcall	800029a4 <drive_DQ_low_and_release_the_bus+0x1a0>
	
	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ);	//tW1L 5-15us
80002848:	4d 88       	lddpc	r8,800029a8 <drive_DQ_low_and_release_the_bus+0x1a4>
8000284a:	70 08       	ld.w	r8,r8[0x0]
8000284c:	ef 48 ff e4 	st.w	r7[-28],r8
80002850:	e0 68 e1 00 	mov	r8,57600
80002854:	ea 18 05 f5 	orh	r8,0x5f5
80002858:	ef 48 ff e0 	st.w	r7[-32],r8
8000285c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002860:	ef 48 ff ec 	st.w	r7[-20],r8
80002864:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002868:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000286c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002870:	30 01       	mov	r1,0
80002872:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002876:	30 03       	mov	r3,0
80002878:	e2 02 02 4a 	mul	r10,r1,r2
8000287c:	e6 00 02 48 	mul	r8,r3,r0
80002880:	10 0a       	add	r10,r8
80002882:	e0 02 06 48 	mulu.d	r8,r0,r2
80002886:	12 0a       	add	r10,r9
80002888:	14 99       	mov	r9,r10
8000288a:	ee 7a 42 3f 	mov	r10,999999
8000288e:	30 0b       	mov	r11,0
80002890:	f0 0a 00 0a 	add	r10,r8,r10
80002894:	f2 0b 00 4b 	adc	r11,r9,r11
80002898:	ee 78 42 40 	mov	r8,1000000
8000289c:	30 09       	mov	r9,0
8000289e:	f0 1f 00 44 	mcall	800029ac <drive_DQ_low_and_release_the_bus+0x1a8>
800028a2:	14 98       	mov	r8,r10
800028a4:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800028a6:	ef 48 ff f4 	st.w	r7[-12],r8
800028aa:	ee c8 00 38 	sub	r8,r7,56
800028ae:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800028b2:	e1 b8 00 42 	mfsr	r8,0x108
800028b6:	10 99       	mov	r9,r8
800028b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028bc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800028be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028c2:	70 09       	ld.w	r9,r8[0x0]
800028c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028c8:	10 09       	add	r9,r8
800028ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028ce:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800028d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800028d4:	30 08       	mov	r8,0
800028d6:	f3 68 00 08 	st.b	r9[8],r8
800028da:	ee c8 00 38 	sub	r8,r7,56
800028de:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800028e2:	e1 b8 00 42 	mfsr	r8,0x108
800028e6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800028ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ee:	f1 39 00 08 	ld.ub	r9,r8[8]
800028f2:	30 28       	mov	r8,2
800028f4:	f0 09 18 00 	cp.b	r9,r8
800028f8:	c0 31       	brne	800028fe <drive_DQ_low_and_release_the_bus+0xfa>
    return false;
800028fa:	30 08       	mov	r8,0
800028fc:	c4 38       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800028fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002902:	f1 39 00 08 	ld.ub	r9,r8[8]
80002906:	30 18       	mov	r8,1
80002908:	f0 09 18 00 	cp.b	r9,r8
8000290c:	c0 31       	brne	80002912 <drive_DQ_low_and_release_the_bus+0x10e>
    return true;
8000290e:	30 18       	mov	r8,1
80002910:	c3 98       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002912:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002916:	70 09       	ld.w	r9,r8[0x0]
80002918:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000291c:	70 18       	ld.w	r8,r8[0x4]
8000291e:	10 39       	cp.w	r9,r8
80002920:	e0 88 00 1a 	brls	80002954 <drive_DQ_low_and_release_the_bus+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002924:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002928:	70 08       	ld.w	r8,r8[0x0]
8000292a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000292e:	10 39       	cp.w	r9,r8
80002930:	c1 02       	brcc	80002950 <drive_DQ_low_and_release_the_bus+0x14c>
80002932:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002936:	70 18       	ld.w	r8,r8[0x4]
80002938:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000293c:	10 39       	cp.w	r9,r8
8000293e:	e0 88 00 09 	brls	80002950 <drive_DQ_low_and_release_the_bus+0x14c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002942:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002946:	30 18       	mov	r8,1
80002948:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000294c:	30 18       	mov	r8,1
8000294e:	c1 a8       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
    }
    return false;
80002950:	30 08       	mov	r8,0
80002952:	c1 88       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002954:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002958:	70 08       	ld.w	r8,r8[0x0]
8000295a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000295e:	10 39       	cp.w	r9,r8
80002960:	c0 93       	brcs	80002972 <drive_DQ_low_and_release_the_bus+0x16e>
80002962:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002966:	70 18       	ld.w	r8,r8[0x4]
80002968:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000296c:	10 39       	cp.w	r9,r8
8000296e:	e0 88 00 09 	brls	80002980 <drive_DQ_low_and_release_the_bus+0x17c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002972:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002976:	30 18       	mov	r8,1
80002978:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000297c:	30 18       	mov	r8,1
8000297e:	c0 28       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
    }
    return false;
80002980:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002982:	58 08       	cp.w	r8,0
80002984:	ca b0       	breq	800028da <drive_DQ_low_and_release_the_bus+0xd6>

	gpio_configure_pin(ioPin, ioFlagsInput); //14may15 experiment
80002986:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000298a:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000298e:	12 9b       	mov	r11,r9
80002990:	10 9c       	mov	r12,r8
80002992:	f0 1f 00 04 	mcall	800029a0 <drive_DQ_low_and_release_the_bus+0x19c>
	
}
80002996:	2f 1d       	sub	sp,-60
80002998:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000299c:	80 00       	ld.sh	r0,r0[0x0]
8000299e:	20 10       	sub	r0,1
800029a0:	80 00       	ld.sh	r0,r0[0x0]
800029a2:	48 28       	lddpc	r8,800029a8 <drive_DQ_low_and_release_the_bus+0x1a4>
800029a4:	80 00       	ld.sh	r0,r0[0x0]
800029a6:	4b 3c       	lddpc	r12,80002a70 <OWWriteBit+0xc0>
800029a8:	00 00       	add	r0,r0
800029aa:	08 14       	sub	r4,r4
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	c8 92       	brcc	800028c0 <drive_DQ_low_and_release_the_bus+0xbc>

800029b0 <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
800029b0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800029b4:	1a 97       	mov	r7,sp
800029b6:	fa cd 00 ac 	sub	sp,sp,172
800029ba:	18 98       	mov	r8,r12
800029bc:	ef 4b ff 74 	st.w	r7[-140],r11
800029c0:	ef 68 ff 78 	st.b	r7[-136],r8
	if (bit)
800029c4:	ee f8 ff 74 	ld.w	r8,r7[-140]
800029c8:	58 08       	cp.w	r8,0
800029ca:	e0 80 00 ba 	breq	80002b3e <OWWriteBit+0x18e>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
800029ce:	ef 38 ff 78 	ld.ub	r8,r7[-136]
800029d2:	10 9c       	mov	r12,r8
800029d4:	f0 1f 01 0a 	mcall	80002dfc <OWWriteBit+0x44c>
#if 0
		drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough		cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tW1L 5-15us
		release_the_bus(idx);
#endif
		cpu_delay_us(B, EC_CPU_CLOCK_100MHZ);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
800029d8:	fe f8 04 28 	ld.w	r8,pc[1064]
800029dc:	70 08       	ld.w	r8,r8[0x0]
800029de:	ef 48 ff a4 	st.w	r7[-92],r8
800029e2:	e0 68 e1 00 	mov	r8,57600
800029e6:	ea 18 05 f5 	orh	r8,0x5f5
800029ea:	ef 48 ff a0 	st.w	r7[-96],r8
800029ee:	ee f8 ff a4 	ld.w	r8,r7[-92]
800029f2:	ef 48 ff ac 	st.w	r7[-84],r8
800029f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800029fa:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800029fe:	ee fc ff ac 	ld.w	r12,r7[-84]
80002a02:	ef 4c ff 60 	st.w	r7[-160],r12
80002a06:	30 0b       	mov	r11,0
80002a08:	ef 4b ff 5c 	st.w	r7[-164],r11
80002a0c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80002a10:	ef 49 ff 58 	st.w	r7[-168],r9
80002a14:	30 08       	mov	r8,0
80002a16:	ef 48 ff 54 	st.w	r7[-172],r8
80002a1a:	ee fa ff 5c 	ld.w	r10,r7[-164]
80002a1e:	ee fc ff 58 	ld.w	r12,r7[-168]
80002a22:	b9 3a       	mul	r10,r12
80002a24:	ee f8 ff 54 	ld.w	r8,r7[-172]
80002a28:	ee fb ff 60 	ld.w	r11,r7[-160]
80002a2c:	b7 38       	mul	r8,r11
80002a2e:	10 0a       	add	r10,r8
80002a30:	ee fc ff 60 	ld.w	r12,r7[-160]
80002a34:	ee fb ff 58 	ld.w	r11,r7[-168]
80002a38:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002a3c:	12 0a       	add	r10,r9
80002a3e:	14 99       	mov	r9,r10
80002a40:	ee 7a 42 3f 	mov	r10,999999
80002a44:	30 0b       	mov	r11,0
80002a46:	f0 0a 00 0a 	add	r10,r8,r10
80002a4a:	f2 0b 00 4b 	adc	r11,r9,r11
80002a4e:	ee 78 42 40 	mov	r8,1000000
80002a52:	30 09       	mov	r9,0
80002a54:	f0 1f 00 ec 	mcall	80002e04 <OWWriteBit+0x454>
80002a58:	14 98       	mov	r8,r10
80002a5a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002a5c:	ef 48 ff b4 	st.w	r7[-76],r8
80002a60:	ee c8 00 84 	sub	r8,r7,132
80002a64:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a68:	e1 b8 00 42 	mfsr	r8,0x108
80002a6c:	10 99       	mov	r9,r8
80002a6e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a72:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a74:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a78:	70 09       	ld.w	r9,r8[0x0]
80002a7a:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002a7e:	10 09       	add	r9,r8
80002a80:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a84:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002a86:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002a8a:	30 08       	mov	r8,0
80002a8c:	f3 68 00 08 	st.b	r9[8],r8
80002a90:	ee c8 00 84 	sub	r8,r7,132
80002a94:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a98:	e1 b8 00 42 	mfsr	r8,0x108
80002a9c:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002aa0:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002aa4:	f1 39 00 08 	ld.ub	r9,r8[8]
80002aa8:	30 28       	mov	r8,2
80002aaa:	f0 09 18 00 	cp.b	r9,r8
80002aae:	c0 31       	brne	80002ab4 <OWWriteBit+0x104>
    return false;
80002ab0:	30 08       	mov	r8,0
80002ab2:	c4 38       	rjmp	80002b38 <OWWriteBit+0x188>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002ab4:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ab8:	f1 39 00 08 	ld.ub	r9,r8[8]
80002abc:	30 18       	mov	r8,1
80002abe:	f0 09 18 00 	cp.b	r9,r8
80002ac2:	c0 31       	brne	80002ac8 <OWWriteBit+0x118>
    return true;
80002ac4:	30 18       	mov	r8,1
80002ac6:	c3 98       	rjmp	80002b38 <OWWriteBit+0x188>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ac8:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002acc:	70 09       	ld.w	r9,r8[0x0]
80002ace:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ad2:	70 18       	ld.w	r8,r8[0x4]
80002ad4:	10 39       	cp.w	r9,r8
80002ad6:	e0 88 00 1a 	brls	80002b0a <OWWriteBit+0x15a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ada:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ade:	70 08       	ld.w	r8,r8[0x0]
80002ae0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002ae4:	10 39       	cp.w	r9,r8
80002ae6:	c1 02       	brcc	80002b06 <OWWriteBit+0x156>
80002ae8:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002aec:	70 18       	ld.w	r8,r8[0x4]
80002aee:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002af2:	10 39       	cp.w	r9,r8
80002af4:	e0 88 00 09 	brls	80002b06 <OWWriteBit+0x156>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002af8:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002afc:	30 18       	mov	r8,1
80002afe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b02:	30 18       	mov	r8,1
80002b04:	c1 a8       	rjmp	80002b38 <OWWriteBit+0x188>
    }
    return false;
80002b06:	30 08       	mov	r8,0
80002b08:	c1 88       	rjmp	80002b38 <OWWriteBit+0x188>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002b0a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002b0e:	70 08       	ld.w	r8,r8[0x0]
80002b10:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002b14:	10 39       	cp.w	r9,r8
80002b16:	c0 93       	brcs	80002b28 <OWWriteBit+0x178>
80002b18:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002b1c:	70 18       	ld.w	r8,r8[0x4]
80002b1e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002b22:	10 39       	cp.w	r9,r8
80002b24:	e0 88 00 09 	brls	80002b36 <OWWriteBit+0x186>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002b28:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002b2c:	30 18       	mov	r8,1
80002b2e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b32:	30 18       	mov	r8,1
80002b34:	c0 28       	rjmp	80002b38 <OWWriteBit+0x188>
    }
    return false;
80002b36:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002b38:	58 08       	cp.w	r8,0
80002b3a:	ca b0       	breq	80002a90 <OWWriteBit+0xe0>
80002b3c:	c5 c9       	rjmp	80002df4 <OWWriteBit+0x444>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
80002b3e:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002b42:	10 9c       	mov	r12,r8
80002b44:	f0 1f 00 b1 	mcall	80002e08 <OWWriteBit+0x458>
		cpu_delay_us(C, EC_CPU_CLOCK_100MHZ);	//tW0L 60-120us
80002b48:	fe f8 02 c4 	ld.w	r8,pc[708]
80002b4c:	70 08       	ld.w	r8,r8[0x0]
80002b4e:	ef 48 ff c4 	st.w	r7[-60],r8
80002b52:	e0 68 e1 00 	mov	r8,57600
80002b56:	ea 18 05 f5 	orh	r8,0x5f5
80002b5a:	ef 48 ff c0 	st.w	r7[-64],r8
80002b5e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002b62:	ef 48 ff cc 	st.w	r7[-52],r8
80002b66:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002b6a:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002b6e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80002b72:	ef 49 ff 70 	st.w	r7[-144],r9
80002b76:	30 08       	mov	r8,0
80002b78:	ef 48 ff 6c 	st.w	r7[-148],r8
80002b7c:	ee fc ff c8 	ld.w	r12,r7[-56]
80002b80:	ef 4c ff 68 	st.w	r7[-152],r12
80002b84:	30 0b       	mov	r11,0
80002b86:	ef 4b ff 64 	st.w	r7[-156],r11
80002b8a:	ee fa ff 6c 	ld.w	r10,r7[-148]
80002b8e:	ee f9 ff 68 	ld.w	r9,r7[-152]
80002b92:	b3 3a       	mul	r10,r9
80002b94:	ee f8 ff 64 	ld.w	r8,r7[-156]
80002b98:	ee fc ff 70 	ld.w	r12,r7[-144]
80002b9c:	b9 38       	mul	r8,r12
80002b9e:	10 0a       	add	r10,r8
80002ba0:	ee fb ff 70 	ld.w	r11,r7[-144]
80002ba4:	ee fc ff 68 	ld.w	r12,r7[-152]
80002ba8:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002bac:	12 0a       	add	r10,r9
80002bae:	14 99       	mov	r9,r10
80002bb0:	ee 7a 42 3f 	mov	r10,999999
80002bb4:	30 0b       	mov	r11,0
80002bb6:	f0 0a 00 0a 	add	r10,r8,r10
80002bba:	f2 0b 00 4b 	adc	r11,r9,r11
80002bbe:	ee 78 42 40 	mov	r8,1000000
80002bc2:	30 09       	mov	r9,0
80002bc4:	f0 1f 00 90 	mcall	80002e04 <OWWriteBit+0x454>
80002bc8:	14 98       	mov	r8,r10
80002bca:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002bcc:	ef 48 ff d4 	st.w	r7[-44],r8
80002bd0:	ee c8 00 78 	sub	r8,r7,120
80002bd4:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002bd8:	e1 b8 00 42 	mfsr	r8,0x108
80002bdc:	10 99       	mov	r9,r8
80002bde:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002be2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002be4:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002be8:	70 09       	ld.w	r9,r8[0x0]
80002bea:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002bee:	10 09       	add	r9,r8
80002bf0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002bf4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002bf6:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002bfa:	30 08       	mov	r8,0
80002bfc:	f3 68 00 08 	st.b	r9[8],r8
80002c00:	ee c8 00 78 	sub	r8,r7,120
80002c04:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c08:	e1 b8 00 42 	mfsr	r8,0x108
80002c0c:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002c10:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c14:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c18:	30 28       	mov	r8,2
80002c1a:	f0 09 18 00 	cp.b	r9,r8
80002c1e:	c0 31       	brne	80002c24 <OWWriteBit+0x274>
    return false;
80002c20:	30 08       	mov	r8,0
80002c22:	c4 38       	rjmp	80002ca8 <OWWriteBit+0x2f8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002c24:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c28:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c2c:	30 18       	mov	r8,1
80002c2e:	f0 09 18 00 	cp.b	r9,r8
80002c32:	c0 31       	brne	80002c38 <OWWriteBit+0x288>
    return true;
80002c34:	30 18       	mov	r8,1
80002c36:	c3 98       	rjmp	80002ca8 <OWWriteBit+0x2f8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c38:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c3c:	70 09       	ld.w	r9,r8[0x0]
80002c3e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c42:	70 18       	ld.w	r8,r8[0x4]
80002c44:	10 39       	cp.w	r9,r8
80002c46:	e0 88 00 1a 	brls	80002c7a <OWWriteBit+0x2ca>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c4a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c4e:	70 08       	ld.w	r8,r8[0x0]
80002c50:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c54:	10 39       	cp.w	r9,r8
80002c56:	c1 02       	brcc	80002c76 <OWWriteBit+0x2c6>
80002c58:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c5c:	70 18       	ld.w	r8,r8[0x4]
80002c5e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c62:	10 39       	cp.w	r9,r8
80002c64:	e0 88 00 09 	brls	80002c76 <OWWriteBit+0x2c6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c68:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c6c:	30 18       	mov	r8,1
80002c6e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002c72:	30 18       	mov	r8,1
80002c74:	c1 a8       	rjmp	80002ca8 <OWWriteBit+0x2f8>
    }
    return false;
80002c76:	30 08       	mov	r8,0
80002c78:	c1 88       	rjmp	80002ca8 <OWWriteBit+0x2f8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c7a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c7e:	70 08       	ld.w	r8,r8[0x0]
80002c80:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c84:	10 39       	cp.w	r9,r8
80002c86:	c0 93       	brcs	80002c98 <OWWriteBit+0x2e8>
80002c88:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c8c:	70 18       	ld.w	r8,r8[0x4]
80002c8e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c92:	10 39       	cp.w	r9,r8
80002c94:	e0 88 00 09 	brls	80002ca6 <OWWriteBit+0x2f6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c98:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c9c:	30 18       	mov	r8,1
80002c9e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ca2:	30 18       	mov	r8,1
80002ca4:	c0 28       	rjmp	80002ca8 <OWWriteBit+0x2f8>
    }
    return false;
80002ca6:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002ca8:	58 08       	cp.w	r8,0
80002caa:	ca b0       	breq	80002c00 <OWWriteBit+0x250>
		release_the_bus(idx);
80002cac:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002cb0:	10 9c       	mov	r12,r8
80002cb2:	f0 1f 00 58 	mcall	80002e10 <OWWriteBit+0x460>
		cpu_delay_us(D, EC_CPU_CLOCK_100MHZ);	//tREC 5-??us
80002cb6:	4d 88       	lddpc	r8,80002e14 <OWWriteBit+0x464>
80002cb8:	70 08       	ld.w	r8,r8[0x0]
80002cba:	ef 48 ff e4 	st.w	r7[-28],r8
80002cbe:	e0 68 e1 00 	mov	r8,57600
80002cc2:	ea 18 05 f5 	orh	r8,0x5f5
80002cc6:	ef 48 ff e0 	st.w	r7[-32],r8
80002cca:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002cce:	ef 48 ff ec 	st.w	r7[-20],r8
80002cd2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002cd6:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002cda:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002cde:	30 01       	mov	r1,0
80002ce0:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002ce4:	30 03       	mov	r3,0
80002ce6:	e2 02 02 4a 	mul	r10,r1,r2
80002cea:	e6 00 02 48 	mul	r8,r3,r0
80002cee:	10 0a       	add	r10,r8
80002cf0:	e0 02 06 48 	mulu.d	r8,r0,r2
80002cf4:	12 0a       	add	r10,r9
80002cf6:	14 99       	mov	r9,r10
80002cf8:	ee 7a 42 3f 	mov	r10,999999
80002cfc:	30 0b       	mov	r11,0
80002cfe:	f0 0a 00 0a 	add	r10,r8,r10
80002d02:	f2 0b 00 4b 	adc	r11,r9,r11
80002d06:	ee 78 42 40 	mov	r8,1000000
80002d0a:	30 09       	mov	r9,0
80002d0c:	f0 1f 00 3e 	mcall	80002e04 <OWWriteBit+0x454>
80002d10:	14 98       	mov	r8,r10
80002d12:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002d14:	ef 48 ff f4 	st.w	r7[-12],r8
80002d18:	ee c8 00 6c 	sub	r8,r7,108
80002d1c:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d20:	e1 b8 00 42 	mfsr	r8,0x108
80002d24:	10 99       	mov	r9,r8
80002d26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d2a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d30:	70 09       	ld.w	r9,r8[0x0]
80002d32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d36:	10 09       	add	r9,r8
80002d38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d3c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002d3e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002d42:	30 08       	mov	r8,0
80002d44:	f3 68 00 08 	st.b	r9[8],r8
80002d48:	ee c8 00 6c 	sub	r8,r7,108
80002d4c:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d50:	e1 b8 00 42 	mfsr	r8,0x108
80002d54:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002d58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d5c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d60:	30 28       	mov	r8,2
80002d62:	f0 09 18 00 	cp.b	r9,r8
80002d66:	c0 31       	brne	80002d6c <OWWriteBit+0x3bc>
    return false;
80002d68:	30 08       	mov	r8,0
80002d6a:	c4 38       	rjmp	80002df0 <OWWriteBit+0x440>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d70:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d74:	30 18       	mov	r8,1
80002d76:	f0 09 18 00 	cp.b	r9,r8
80002d7a:	c0 31       	brne	80002d80 <OWWriteBit+0x3d0>
    return true;
80002d7c:	30 18       	mov	r8,1
80002d7e:	c3 98       	rjmp	80002df0 <OWWriteBit+0x440>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d84:	70 09       	ld.w	r9,r8[0x0]
80002d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d8a:	70 18       	ld.w	r8,r8[0x4]
80002d8c:	10 39       	cp.w	r9,r8
80002d8e:	e0 88 00 1a 	brls	80002dc2 <OWWriteBit+0x412>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d96:	70 08       	ld.w	r8,r8[0x0]
80002d98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d9c:	10 39       	cp.w	r9,r8
80002d9e:	c1 02       	brcc	80002dbe <OWWriteBit+0x40e>
80002da0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002da4:	70 18       	ld.w	r8,r8[0x4]
80002da6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002daa:	10 39       	cp.w	r9,r8
80002dac:	e0 88 00 09 	brls	80002dbe <OWWriteBit+0x40e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002db0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002db4:	30 18       	mov	r8,1
80002db6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dba:	30 18       	mov	r8,1
80002dbc:	c1 a8       	rjmp	80002df0 <OWWriteBit+0x440>
    }
    return false;
80002dbe:	30 08       	mov	r8,0
80002dc0:	c1 88       	rjmp	80002df0 <OWWriteBit+0x440>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dc6:	70 08       	ld.w	r8,r8[0x0]
80002dc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dcc:	10 39       	cp.w	r9,r8
80002dce:	c0 93       	brcs	80002de0 <OWWriteBit+0x430>
80002dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dd4:	70 18       	ld.w	r8,r8[0x4]
80002dd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dda:	10 39       	cp.w	r9,r8
80002ddc:	e0 88 00 09 	brls	80002dee <OWWriteBit+0x43e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002de0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002de4:	30 18       	mov	r8,1
80002de6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dea:	30 18       	mov	r8,1
80002dec:	c0 28       	rjmp	80002df0 <OWWriteBit+0x440>
    }
    return false;
80002dee:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002df0:	58 08       	cp.w	r8,0
80002df2:	ca b0       	breq	80002d48 <OWWriteBit+0x398>
	}
}
80002df4:	2d 5d       	sub	sp,-172
80002df6:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002dfa:	00 00       	add	r0,r0
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	28 04       	sub	r4,-128
80002e00:	00 00       	add	r0,r0
80002e02:	08 18       	sub	r8,r4
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	c8 92       	brcc	80002d18 <OWWriteBit+0x368>
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	20 5c       	sub	r12,5
80002e0c:	00 00       	add	r0,r0
80002e0e:	08 20       	rsub	r0,r4
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	20 ac       	sub	r12,10
80002e14:	00 00       	add	r0,r0
80002e16:	08 10       	sub	r0,r4

80002e18 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
80002e18:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002e1c:	1a 97       	mov	r7,sp
80002e1e:	21 cd       	sub	sp,112
80002e20:	18 98       	mov	r8,r12
80002e22:	ef 68 ff a0 	st.b	r7[-96],r8
#if 0
	drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tRL 5-15us
	release_the_bus(idx);
#endif
	drive_DQ_low_and_release_the_bus(idx);
80002e26:	ef 38 ff a0 	ld.ub	r8,r7[-96]
80002e2a:	10 9c       	mov	r12,r8
80002e2c:	f0 1f 00 b1 	mcall	800030f0 <OWReadBit+0x2d8>
	
	cpu_delay_us(E, EC_CPU_CLOCK_100MHZ);	//tMSR 5-15us
80002e30:	fe f8 02 c4 	ld.w	r8,pc[708]
80002e34:	70 08       	ld.w	r8,r8[0x0]
80002e36:	ef 48 ff c4 	st.w	r7[-60],r8
80002e3a:	e0 68 e1 00 	mov	r8,57600
80002e3e:	ea 18 05 f5 	orh	r8,0x5f5
80002e42:	ef 48 ff c0 	st.w	r7[-64],r8
80002e46:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002e4a:	ef 48 ff cc 	st.w	r7[-52],r8
80002e4e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002e52:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002e56:	ee fc ff cc 	ld.w	r12,r7[-52]
80002e5a:	ef 4c ff 9c 	st.w	r7[-100],r12
80002e5e:	30 0b       	mov	r11,0
80002e60:	ef 4b ff 98 	st.w	r7[-104],r11
80002e64:	ee f9 ff c8 	ld.w	r9,r7[-56]
80002e68:	ef 49 ff 94 	st.w	r7[-108],r9
80002e6c:	30 08       	mov	r8,0
80002e6e:	ef 48 ff 90 	st.w	r7[-112],r8
80002e72:	ee fa ff 98 	ld.w	r10,r7[-104]
80002e76:	ee fc ff 94 	ld.w	r12,r7[-108]
80002e7a:	b9 3a       	mul	r10,r12
80002e7c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002e80:	ee fb ff 9c 	ld.w	r11,r7[-100]
80002e84:	b7 38       	mul	r8,r11
80002e86:	10 0a       	add	r10,r8
80002e88:	ee fc ff 9c 	ld.w	r12,r7[-100]
80002e8c:	ee fb ff 94 	ld.w	r11,r7[-108]
80002e90:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002e94:	12 0a       	add	r10,r9
80002e96:	14 99       	mov	r9,r10
80002e98:	ee 7a 42 3f 	mov	r10,999999
80002e9c:	30 0b       	mov	r11,0
80002e9e:	f0 0a 00 0a 	add	r10,r8,r10
80002ea2:	f2 0b 00 4b 	adc	r11,r9,r11
80002ea6:	ee 78 42 40 	mov	r8,1000000
80002eaa:	30 09       	mov	r9,0
80002eac:	f0 1f 00 93 	mcall	800030f8 <OWReadBit+0x2e0>
80002eb0:	14 98       	mov	r8,r10
80002eb2:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002eb4:	ef 48 ff d4 	st.w	r7[-44],r8
80002eb8:	ee c8 00 5c 	sub	r8,r7,92
80002ebc:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ec0:	e1 b8 00 42 	mfsr	r8,0x108
80002ec4:	10 99       	mov	r9,r8
80002ec6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002eca:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ecc:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002ed0:	70 09       	ld.w	r9,r8[0x0]
80002ed2:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ed6:	10 09       	add	r9,r8
80002ed8:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002edc:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002ede:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002ee2:	30 08       	mov	r8,0
80002ee4:	f3 68 00 08 	st.b	r9[8],r8
80002ee8:	ee c8 00 5c 	sub	r8,r7,92
80002eec:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ef0:	e1 b8 00 42 	mfsr	r8,0x108
80002ef4:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002ef8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002efc:	f1 39 00 08 	ld.ub	r9,r8[8]
80002f00:	30 28       	mov	r8,2
80002f02:	f0 09 18 00 	cp.b	r9,r8
80002f06:	c0 31       	brne	80002f0c <OWReadBit+0xf4>
    return false;
80002f08:	30 08       	mov	r8,0
80002f0a:	c4 38       	rjmp	80002f90 <OWReadBit+0x178>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002f0c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f10:	f1 39 00 08 	ld.ub	r9,r8[8]
80002f14:	30 18       	mov	r8,1
80002f16:	f0 09 18 00 	cp.b	r9,r8
80002f1a:	c0 31       	brne	80002f20 <OWReadBit+0x108>
    return true;
80002f1c:	30 18       	mov	r8,1
80002f1e:	c3 98       	rjmp	80002f90 <OWReadBit+0x178>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f20:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f24:	70 09       	ld.w	r9,r8[0x0]
80002f26:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f2a:	70 18       	ld.w	r8,r8[0x4]
80002f2c:	10 39       	cp.w	r9,r8
80002f2e:	e0 88 00 1a 	brls	80002f62 <OWReadBit+0x14a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f32:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f36:	70 08       	ld.w	r8,r8[0x0]
80002f38:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f3c:	10 39       	cp.w	r9,r8
80002f3e:	c1 02       	brcc	80002f5e <OWReadBit+0x146>
80002f40:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f44:	70 18       	ld.w	r8,r8[0x4]
80002f46:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f4a:	10 39       	cp.w	r9,r8
80002f4c:	e0 88 00 09 	brls	80002f5e <OWReadBit+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002f50:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002f54:	30 18       	mov	r8,1
80002f56:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002f5a:	30 18       	mov	r8,1
80002f5c:	c1 a8       	rjmp	80002f90 <OWReadBit+0x178>
    }
    return false;
80002f5e:	30 08       	mov	r8,0
80002f60:	c1 88       	rjmp	80002f90 <OWReadBit+0x178>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f62:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f66:	70 08       	ld.w	r8,r8[0x0]
80002f68:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f6c:	10 39       	cp.w	r9,r8
80002f6e:	c0 93       	brcs	80002f80 <OWReadBit+0x168>
80002f70:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f74:	70 18       	ld.w	r8,r8[0x4]
80002f76:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f7a:	10 39       	cp.w	r9,r8
80002f7c:	e0 88 00 09 	brls	80002f8e <OWReadBit+0x176>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002f80:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002f84:	30 18       	mov	r8,1
80002f86:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002f8a:	30 18       	mov	r8,1
80002f8c:	c0 28       	rjmp	80002f90 <OWReadBit+0x178>
    }
    return false;
80002f8e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002f90:	58 08       	cp.w	r8,0
80002f92:	ca b0       	breq	80002ee8 <OWReadBit+0xd0>
	result = sample_line(idx);
80002f94:	ef 38 ff a0 	ld.ub	r8,r7[-96]
80002f98:	10 9c       	mov	r12,r8
80002f9a:	f0 1f 00 59 	mcall	800030fc <OWReadBit+0x2e4>
80002f9e:	18 98       	mov	r8,r12
80002fa0:	ef 48 ff bc 	st.w	r7[-68],r8
	cpu_delay_us(F, EC_CPU_CLOCK_100MHZ); // Complete the time slot and 10us recovery tREC 5+us
80002fa4:	4d 78       	lddpc	r8,80003100 <OWReadBit+0x2e8>
80002fa6:	70 08       	ld.w	r8,r8[0x0]
80002fa8:	ef 48 ff e4 	st.w	r7[-28],r8
80002fac:	e0 68 e1 00 	mov	r8,57600
80002fb0:	ea 18 05 f5 	orh	r8,0x5f5
80002fb4:	ef 48 ff e0 	st.w	r7[-32],r8
80002fb8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002fbc:	ef 48 ff ec 	st.w	r7[-20],r8
80002fc0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002fc4:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002fc8:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002fcc:	30 01       	mov	r1,0
80002fce:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002fd2:	30 03       	mov	r3,0
80002fd4:	e2 02 02 4a 	mul	r10,r1,r2
80002fd8:	e6 00 02 48 	mul	r8,r3,r0
80002fdc:	10 0a       	add	r10,r8
80002fde:	e0 02 06 48 	mulu.d	r8,r0,r2
80002fe2:	12 0a       	add	r10,r9
80002fe4:	14 99       	mov	r9,r10
80002fe6:	ee 7a 42 3f 	mov	r10,999999
80002fea:	30 0b       	mov	r11,0
80002fec:	f0 0a 00 0a 	add	r10,r8,r10
80002ff0:	f2 0b 00 4b 	adc	r11,r9,r11
80002ff4:	ee 78 42 40 	mov	r8,1000000
80002ff8:	30 09       	mov	r9,0
80002ffa:	f0 1f 00 40 	mcall	800030f8 <OWReadBit+0x2e0>
80002ffe:	14 98       	mov	r8,r10
80003000:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80003002:	ef 48 ff f4 	st.w	r7[-12],r8
80003006:	ee c8 00 50 	sub	r8,r7,80
8000300a:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000300e:	e1 b8 00 42 	mfsr	r8,0x108
80003012:	10 99       	mov	r9,r8
80003014:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003018:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000301a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000301e:	70 09       	ld.w	r9,r8[0x0]
80003020:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003024:	10 09       	add	r9,r8
80003026:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000302a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000302c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003030:	30 08       	mov	r8,0
80003032:	f3 68 00 08 	st.b	r9[8],r8
80003036:	ee c8 00 50 	sub	r8,r7,80
8000303a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000303e:	e1 b8 00 42 	mfsr	r8,0x108
80003042:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000304a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000304e:	30 28       	mov	r8,2
80003050:	f0 09 18 00 	cp.b	r9,r8
80003054:	c0 31       	brne	8000305a <OWReadBit+0x242>
    return false;
80003056:	30 08       	mov	r8,0
80003058:	c4 38       	rjmp	800030de <OWReadBit+0x2c6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000305a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000305e:	f1 39 00 08 	ld.ub	r9,r8[8]
80003062:	30 18       	mov	r8,1
80003064:	f0 09 18 00 	cp.b	r9,r8
80003068:	c0 31       	brne	8000306e <OWReadBit+0x256>
    return true;
8000306a:	30 18       	mov	r8,1
8000306c:	c3 98       	rjmp	800030de <OWReadBit+0x2c6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000306e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003072:	70 09       	ld.w	r9,r8[0x0]
80003074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003078:	70 18       	ld.w	r8,r8[0x4]
8000307a:	10 39       	cp.w	r9,r8
8000307c:	e0 88 00 1a 	brls	800030b0 <OWReadBit+0x298>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003084:	70 08       	ld.w	r8,r8[0x0]
80003086:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000308a:	10 39       	cp.w	r9,r8
8000308c:	c1 02       	brcc	800030ac <OWReadBit+0x294>
8000308e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003092:	70 18       	ld.w	r8,r8[0x4]
80003094:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003098:	10 39       	cp.w	r9,r8
8000309a:	e0 88 00 09 	brls	800030ac <OWReadBit+0x294>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000309e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800030a2:	30 18       	mov	r8,1
800030a4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800030a8:	30 18       	mov	r8,1
800030aa:	c1 a8       	rjmp	800030de <OWReadBit+0x2c6>
    }
    return false;
800030ac:	30 08       	mov	r8,0
800030ae:	c1 88       	rjmp	800030de <OWReadBit+0x2c6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030b4:	70 08       	ld.w	r8,r8[0x0]
800030b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800030ba:	10 39       	cp.w	r9,r8
800030bc:	c0 93       	brcs	800030ce <OWReadBit+0x2b6>
800030be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030c2:	70 18       	ld.w	r8,r8[0x4]
800030c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800030c8:	10 39       	cp.w	r9,r8
800030ca:	e0 88 00 09 	brls	800030dc <OWReadBit+0x2c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800030ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800030d2:	30 18       	mov	r8,1
800030d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800030d8:	30 18       	mov	r8,1
800030da:	c0 28       	rjmp	800030de <OWReadBit+0x2c6>
    }
    return false;
800030dc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800030de:	58 08       	cp.w	r8,0
800030e0:	ca b0       	breq	80003036 <OWReadBit+0x21e>

	return result;
800030e2:	ee f8 ff bc 	ld.w	r8,r7[-68]
}
800030e6:	10 9c       	mov	r12,r8
800030e8:	2e 4d       	sub	sp,-112
800030ea:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800030ee:	00 00       	add	r0,r0
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	28 04       	sub	r4,-128
800030f4:	00 00       	add	r0,r0
800030f6:	08 2c       	rsub	r12,r4
800030f8:	80 00       	ld.sh	r0,r0[0x0]
800030fa:	c8 92       	brcc	8000300c <OWReadBit+0x1f4>
800030fc:	80 00       	ld.sh	r0,r0[0x0]
800030fe:	21 30       	sub	r0,19
80003100:	00 00       	add	r0,r0
80003102:	08 34       	cp.w	r4,r4

80003104 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
80003104:	eb cd 40 80 	pushm	r7,lr
80003108:	1a 97       	mov	r7,sp
8000310a:	20 3d       	sub	sp,12
8000310c:	18 98       	mov	r8,r12
8000310e:	ef 4b ff f4 	st.w	r7[-12],r11
80003112:	ef 68 ff f8 	st.b	r7[-8],r8
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
80003116:	30 08       	mov	r8,0
80003118:	ef 48 ff fc 	st.w	r7[-4],r8
8000311c:	c1 58       	rjmp	80003146 <OWWriteByte+0x42>
	{
		OWWriteBit(idx, data & 0x01);
8000311e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003122:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80003126:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000312a:	12 9b       	mov	r11,r9
8000312c:	10 9c       	mov	r12,r8
8000312e:	f0 1f 00 0b 	mcall	80003158 <OWWriteByte+0x54>

		// shift the data byte for the next bit
		data >>= 1;
80003132:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003136:	a1 58       	asr	r8,0x1
80003138:	ef 48 ff f4 	st.w	r7[-12],r8
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
8000313c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003140:	2f f8       	sub	r8,-1
80003142:	ef 48 ff fc 	st.w	r7[-4],r8
80003146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000314a:	58 78       	cp.w	r8,7
8000314c:	fe 9a ff e9 	brle	8000311e <OWWriteByte+0x1a>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
80003150:	2f dd       	sub	sp,-12
80003152:	e3 cd 80 80 	ldm	sp++,r7,pc
80003156:	00 00       	add	r0,r0
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	29 b0       	sub	r0,-101

8000315c <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
8000315c:	eb cd 40 80 	pushm	r7,lr
80003160:	1a 97       	mov	r7,sp
80003162:	20 3d       	sub	sp,12
80003164:	18 98       	mov	r8,r12
80003166:	ef 68 ff f4 	st.b	r7[-12],r8
	int loop, result=0;
8000316a:	30 08       	mov	r8,0
8000316c:	ef 48 ff fc 	st.w	r7[-4],r8

	for (loop = 0; loop < 8; loop++)
80003170:	30 08       	mov	r8,0
80003172:	ef 48 ff f8 	st.w	r7[-8],r8
80003176:	c1 88       	rjmp	800031a6 <OWReadByte+0x4a>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
80003178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000317c:	a1 58       	asr	r8,0x1
8000317e:	ef 48 ff fc 	st.w	r7[-4],r8

		// if result is one, then set MS bit
		if (OWReadBit(idx))
80003182:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003186:	10 9c       	mov	r12,r8
80003188:	f0 1f 00 0d 	mcall	800031bc <OWReadByte+0x60>
8000318c:	18 98       	mov	r8,r12
8000318e:	58 08       	cp.w	r8,0
80003190:	c0 60       	breq	8000319c <OWReadByte+0x40>
		result |= 0x80;
80003192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003196:	a7 b8       	sbr	r8,0x7
80003198:	ef 48 ff fc 	st.w	r7[-4],r8
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
8000319c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031a0:	2f f8       	sub	r8,-1
800031a2:	ef 48 ff f8 	st.w	r7[-8],r8
800031a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031aa:	58 78       	cp.w	r8,7
800031ac:	fe 9a ff e6 	brle	80003178 <OWReadByte+0x1c>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
800031b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800031b4:	10 9c       	mov	r12,r8
800031b6:	2f dd       	sub	sp,-12
800031b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800031bc:	80 00       	ld.sh	r0,r0[0x0]
800031be:	2e 18       	sub	r8,-31

800031c0 <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
800031c0:	eb cd 40 80 	pushm	r7,lr
800031c4:	1a 97       	mov	r7,sp
800031c6:	20 3d       	sub	sp,12
800031c8:	18 99       	mov	r9,r12
800031ca:	16 98       	mov	r8,r11
800031cc:	ef 69 ff f8 	st.b	r7[-8],r9
800031d0:	ef 68 ff f4 	st.b	r7[-12],r8
   int i;
   acc ^= byte;
800031d4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800031d8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800031dc:	f3 e8 20 08 	eor	r8,r9,r8
800031e0:	ef 68 ff f8 	st.b	r7[-8],r8
   for(i = 0; i < 8; i++) 
800031e4:	30 08       	mov	r8,0
800031e6:	ef 48 ff fc 	st.w	r7[-4],r8
800031ea:	c1 c8       	rjmp	80003222 <crc8_add+0x62>
   {
		if(acc & 1) 
800031ec:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800031f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800031f4:	5c 58       	castu.b	r8
800031f6:	c0 c0       	breq	8000320e <crc8_add+0x4e>
		{
			acc = (acc >> 1) ^ 0x8c;
800031f8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800031fc:	a1 98       	lsr	r8,0x1
800031fe:	5c 58       	castu.b	r8
80003200:	ee 18 ff ff 	eorh	r8,0xffff
80003204:	ec 18 ff 8c 	eorl	r8,0xff8c
80003208:	ef 68 ff f8 	st.b	r7[-8],r8
8000320c:	c0 68       	rjmp	80003218 <crc8_add+0x58>
		} 
		else 
		{
			acc >>= 1;
8000320e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003212:	a1 98       	lsr	r8,0x1
80003214:	ef 68 ff f8 	st.b	r7[-8],r8
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
80003218:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000321c:	2f f8       	sub	r8,-1
8000321e:	ef 48 ff fc 	st.w	r7[-4],r8
80003222:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003226:	58 78       	cp.w	r8,7
80003228:	fe 9a ff e2 	brle	800031ec <crc8_add+0x2c>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
8000322c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
}
80003230:	10 9c       	mov	r12,r8
80003232:	2f dd       	sub	sp,-12
80003234:	e3 cd 80 80 	ldm	sp++,r7,pc

80003238 <init_ecdbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_ecdbg_rs232(long pba_hz)
{
80003238:	eb cd 40 80 	pushm	r7,lr
8000323c:	1a 97       	mov	r7,sp
8000323e:	20 1d       	sub	sp,4
80003240:	ef 4c ff fc 	st.w	r7[-4],r12
  init_ecdbg_rs232_ex(ECDBG_USART_BAUDRATE, pba_hz);
80003244:	ee fb ff fc 	ld.w	r11,r7[-4]
80003248:	e0 7c c2 00 	mov	r12,115200
8000324c:	f0 1f 00 03 	mcall	80003258 <init_ecdbg_rs232+0x20>
}
80003250:	2f fd       	sub	sp,-4
80003252:	e3 cd 80 80 	ldm	sp++,r7,pc
80003256:	00 00       	add	r0,r0
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	32 80       	mov	r0,40

8000325c <init_display_rs232>:

void init_display_rs232(long pba_hz)
{
8000325c:	eb cd 40 80 	pushm	r7,lr
80003260:	1a 97       	mov	r7,sp
80003262:	20 1d       	sub	sp,4
80003264:	ef 4c ff fc 	st.w	r7[-4],r12
	init_display_rs232_ex(DISPLAY_USART_BAUDRATE, pba_hz);
80003268:	ee fb ff fc 	ld.w	r11,r7[-4]
8000326c:	e0 6c 12 c0 	mov	r12,4800
80003270:	f0 1f 00 03 	mcall	8000327c <init_display_rs232+0x20>
}
80003274:	2f fd       	sub	sp,-4
80003276:	e3 cd 80 80 	ldm	sp++,r7,pc
8000327a:	00 00       	add	r0,r0
8000327c:	80 00       	ld.sh	r0,r0[0x0]
8000327e:	32 dc       	mov	r12,45

80003280 <init_ecdbg_rs232_ex>:


void init_ecdbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80003280:	eb cd 40 80 	pushm	r7,lr
80003284:	1a 97       	mov	r7,sp
80003286:	20 5d       	sub	sp,20
80003288:	ef 4c ff f0 	st.w	r7[-16],r12
8000328c:	ef 4b ff ec 	st.w	r7[-20],r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80003290:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003294:	ef 48 ff f4 	st.w	r7[-12],r8
80003298:	30 88       	mov	r8,8
8000329a:	ef 68 ff f8 	st.b	r7[-8],r8
8000329e:	30 48       	mov	r8,4
800032a0:	ef 68 ff f9 	st.b	r7[-7],r8
800032a4:	30 08       	mov	r8,0
800032a6:	ef 58 ff fa 	st.h	r7[-6],r8
800032aa:	30 08       	mov	r8,0
800032ac:	ef 68 ff fc 	st.b	r7[-4],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(ECDBG_USART_GPIO_MAP,
800032b0:	30 2b       	mov	r11,2
800032b2:	48 8c       	lddpc	r12,800032d0 <init_ecdbg_rs232_ex+0x50>
800032b4:	f0 1f 00 08 	mcall	800032d4 <init_ecdbg_rs232_ex+0x54>
                     sizeof(ECDBG_USART_GPIO_MAP) / sizeof(ECDBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(ECDBG_USART, &ecdbg_usart_options, pba_hz);
800032b8:	ee c8 00 0c 	sub	r8,r7,12
800032bc:	ee fa ff ec 	ld.w	r10,r7[-20]
800032c0:	10 9b       	mov	r11,r8
800032c2:	fe 7c 28 00 	mov	r12,-55296
800032c6:	f0 1f 00 05 	mcall	800032d8 <init_ecdbg_rs232_ex+0x58>
}
800032ca:	2f bd       	sub	sp,-20
800032cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800032d0:	80 01       	ld.sh	r1,r0[0x0]
800032d2:	22 10       	sub	r0,33
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	45 3c       	lddsp	r12,sp[0x14c]
800032d8:	80 00       	ld.sh	r0,r0[0x0]
800032da:	56 e0       	stdsp	sp[0x1b8],r0

800032dc <init_display_rs232_ex>:

void init_display_rs232_ex(unsigned long baudrate, long pba_hz)
{
800032dc:	eb cd 40 80 	pushm	r7,lr
800032e0:	1a 97       	mov	r7,sp
800032e2:	20 5d       	sub	sp,20
800032e4:	ef 4c ff f0 	st.w	r7[-16],r12
800032e8:	ef 4b ff ec 	st.w	r7[-20],r11
		.baudrate = baudrate,
		.charlength = 8,
		.paritytype = USART_NO_PARITY,
		.stopbits = USART_1_STOPBIT,
		.channelmode = USART_NORMAL_CHMODE
	};
800032ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800032f0:	ef 48 ff f4 	st.w	r7[-12],r8
800032f4:	30 88       	mov	r8,8
800032f6:	ef 68 ff f8 	st.b	r7[-8],r8
800032fa:	30 48       	mov	r8,4
800032fc:	ef 68 ff f9 	st.b	r7[-7],r8
80003300:	30 08       	mov	r8,0
80003302:	ef 58 ff fa 	st.h	r7[-6],r8
80003306:	30 08       	mov	r8,0
80003308:	ef 68 ff fc 	st.b	r7[-4],r8

	// Setup GPIO for debug USART.
	gpio_enable_module(DISPLAY_USART_GPIO_MAP,
8000330c:	30 2b       	mov	r11,2
8000330e:	48 8c       	lddpc	r12,8000332c <init_display_rs232_ex+0x50>
80003310:	f0 1f 00 08 	mcall	80003330 <init_display_rs232_ex+0x54>
	sizeof(DISPLAY_USART_GPIO_MAP) / sizeof(DISPLAY_USART_GPIO_MAP[0]));

	// Initialize it in RS232 mode.
	usart_init_rs232(DISPLAY_USART, &display_usart_options, pba_hz);
80003314:	ee c8 00 0c 	sub	r8,r7,12
80003318:	ee fa ff ec 	ld.w	r10,r7[-20]
8000331c:	10 9b       	mov	r11,r8
8000331e:	fc 7c 14 00 	mov	r12,-191488
80003322:	f0 1f 00 05 	mcall	80003334 <init_display_rs232_ex+0x58>
}
80003326:	2f bd       	sub	sp,-20
80003328:	e3 cd 80 80 	ldm	sp++,r7,pc
8000332c:	80 01       	ld.sh	r1,r0[0x0]
8000332e:	22 00       	sub	r0,32
80003330:	80 00       	ld.sh	r0,r0[0x0]
80003332:	45 3c       	lddsp	r12,sp[0x14c]
80003334:	80 00       	ld.sh	r0,r0[0x0]
80003336:	56 e0       	stdsp	sp[0x1b8],r0

80003338 <print_ecdbg>:


void print_ecdbg(const char *str)
{
80003338:	eb cd 40 80 	pushm	r7,lr
8000333c:	1a 97       	mov	r7,sp
8000333e:	20 1d       	sub	sp,4
80003340:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print(ECDBG_USART, str);
80003344:	ee fb ff fc 	ld.w	r11,r7[-4]
80003348:	fe 7c 28 00 	mov	r12,-55296
8000334c:	f0 1f 00 03 	mcall	80003358 <print_ecdbg+0x20>
}
80003350:	2f fd       	sub	sp,-4
80003352:	e3 cd 80 80 	ldm	sp++,r7,pc
80003356:	00 00       	add	r0,r0
80003358:	80 00       	ld.sh	r0,r0[0x0]
8000335a:	33 5c       	mov	r12,53

8000335c <print>:
	print_hex(DISPLAY_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
8000335c:	eb cd 40 80 	pushm	r7,lr
80003360:	1a 97       	mov	r7,sp
80003362:	20 2d       	sub	sp,8
80003364:	ef 4c ff fc 	st.w	r7[-4],r12
80003368:	ef 4b ff f8 	st.w	r7[-8],r11
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
8000336c:	ee fb ff f8 	ld.w	r11,r7[-8]
80003370:	ee fc ff fc 	ld.w	r12,r7[-4]
80003374:	f0 1f 00 03 	mcall	80003380 <print+0x24>
}
80003378:	2f ed       	sub	sp,-8
8000337a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000337e:	00 00       	add	r0,r0
80003380:	80 00       	ld.sh	r0,r0[0x0]
80003382:	59 3c       	cp.w	r12,19

80003384 <adcifa_get_calibration_data>:
 * \param adcifa       Base address of the ADCIFA
 * \param p_adcifa_opt Structure for the ADCIFA core configuration
 */
void adcifa_get_calibration_data(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt)
{
80003384:	eb cd 40 80 	pushm	r7,lr
80003388:	1a 97       	mov	r7,sp
8000338a:	20 6d       	sub	sp,24
8000338c:	ef 4c ff ec 	st.w	r7[-20],r12
80003390:	ef 4b ff e8 	st.w	r7[-24],r11
	/* Get Offset Calibration */
	int32_t adc_ocal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003394:	e0 68 02 04 	mov	r8,516
80003398:	ea 18 80 80 	orh	r8,0x8080
8000339c:	70 08       	ld.w	r8,r8[0x0]
8000339e:	e6 18 3f 00 	andh	r8,0x3f00,COH
			+ AVR32_FLASHC_FROW_OCAL_WORD)) &
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;
800033a2:	b9 48       	asr	r8,0x18
800033a4:	ef 48 ff f0 	st.w	r7[-16],r8
	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
800033a8:	e0 68 02 04 	mov	r8,516
800033ac:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;

	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800033b0:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
800033b2:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
800033b6:	ef 48 ff f4 	st.w	r7[-12],r8
	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
800033ba:	e0 68 02 08 	mov	r8,520
800033be:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;

	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800033c2:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
800033c4:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800033c8:	ef 48 ff f8 	st.w	r7[-8],r8

	int32_t adc_gain1
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800033cc:	e0 68 02 08 	mov	r8,520
800033d0:	ea 18 80 80 	orh	r8,0x8080
800033d4:	70 08       	ld.w	r8,r8[0x0]
800033d6:	e6 18 03 ff 	andh	r8,0x3ff,COH
			+ AVR32_FLASHC_FROW_GAIN1_WORD)) &
			AVR32_FLASHC_FROW_GAIN1_MASK) >>
			AVR32_FLASHC_FROW_GAIN1_OFFSET;
800033da:	b1 48       	asr	r8,0x10
800033dc:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Get ADC Offset Calibration */
	p_adcifa_opt->offset_calibration_value = adc_ocal;
800033e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033e4:	5c 88       	casts.h	r8
800033e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800033ea:	b2 68       	st.h	r9[0xc],r8

	/* Get ADC Gain Calibration */
	p_adcifa_opt->gain_calibration_value = adc_gcal;
800033ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033f0:	5c 88       	casts.h	r8
800033f2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800033f6:	b2 58       	st.h	r9[0xa],r8

	/* Get Sample & Hold Gain Calibration for Seq 0 */
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
800033f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033fc:	5c 88       	casts.h	r8
800033fe:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003402:	b2 78       	st.h	r9[0xe],r8

	/* Get Sample & Hold Gain Calibration for Seq 1 */
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
80003404:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003408:	5c 88       	casts.h	r8
8000340a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000340e:	f3 58 00 10 	st.h	r9[16],r8
}
80003412:	2f ad       	sub	sp,-24
80003414:	e3 cd 80 80 	ldm	sp++,r7,pc

80003418 <adcifa_configure>:
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt,
		uint32_t pb_hz)
{
80003418:	eb cd 40 80 	pushm	r7,lr
8000341c:	1a 97       	mov	r7,sp
8000341e:	20 3d       	sub	sp,12
80003420:	ef 4c ff fc 	st.w	r7[-4],r12
80003424:	ef 4b ff f8 	st.w	r7[-8],r11
80003428:	ef 4a ff f4 	st.w	r7[-12],r10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
8000342c:	fc 7a 24 00 	mov	r10,-187392
		= (p_adcifa_opt->sleep_mode_enable <<
80003430:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003434:	f1 38 00 08 	ld.ub	r8,r8[8]
80003438:	f0 09 15 02 	lsl	r9,r8,0x2
			AVR32_ADCIFA_CFG_SLEEP)
			| (p_adcifa_opt->single_sequencer_mode <<
8000343c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003440:	11 e8       	ld.ub	r8,r8[0x6]
80003442:	a3 78       	lsl	r8,0x3
			AVR32_ADCIFA_CFG_SSMQ)
			| (p_adcifa_opt->free_running_mode_enable <<
80003444:	10 49       	or	r9,r8
80003446:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000344a:	11 f8       	ld.ub	r8,r8[0x7]
8000344c:	a5 68       	lsl	r8,0x4
			AVR32_ADCIFA_CFG_FRM)
			| (p_adcifa_opt->reference_source <<
8000344e:	10 49       	or	r9,r8
80003450:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003454:	11 c8       	ld.ub	r8,r8[0x4]
80003456:	a5 78       	lsl	r8,0x5
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
80003458:	10 49       	or	r9,r8
8000345a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000345e:	11 d8       	ld.ub	r8,r8[0x5]
80003460:	a7 78       	lsl	r8,0x7
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
80003462:	10 49       	or	r9,r8
80003464:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003468:	f1 38 00 09 	ld.ub	r8,r8[9]
8000346c:	ab 68       	lsl	r8,0xa
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
8000346e:	f3 e8 10 08 	or	r8,r9,r8
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
80003472:	10 9b       	mov	r11,r8
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
80003474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003478:	70 09       	ld.w	r9,r8[0x0]
8000347a:	e0 68 4d d3 	mov	r8,19923
8000347e:	ea 18 10 62 	orh	r8,0x1062
80003482:	f2 08 06 48 	mulu.d	r8,r9,r8
80003486:	a7 89       	lsr	r9,0x6
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
80003488:	e0 68 03 e8 	mov	r8,1000
8000348c:	b1 39       	mul	r9,r8
8000348e:	e0 68 4d d3 	mov	r8,19923
80003492:	ea 18 10 62 	orh	r8,0x1062
80003496:	f2 08 06 48 	mulu.d	r8,r9,r8
8000349a:	f2 08 16 0b 	lsr	r8,r9,0xb
8000349e:	b1 68       	lsl	r8,0x10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
800034a0:	f7 e8 10 08 	or	r8,r11,r8
{
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
800034a4:	95 18       	st.w	r10[0x4],r8
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
			(2 * p_adcifa_opt->frequency)) - 1) <<
800034a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034aa:	70 08       	ld.w	r8,r8[0x0]
800034ac:	f0 09 15 01 	lsl	r9,r8,0x1
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
800034b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034b4:	f0 09 0d 08 	divu	r8,r8,r9
800034b8:	20 18       	sub	r8,1
800034ba:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
800034be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034c2:	f1 49 00 44 	st.w	r8[68],r9
			(2 * p_adcifa_opt->frequency)) - 1) <<
			AVR32_ADCIFA_CKDIV_CNT_OFFSET) &
			AVR32_ADCIFA_CKDIV_CNT_MASK;

	/* Set ADC Offset Calibration */
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
800034c6:	fc 78 24 00 	mov	r8,-187392
800034ca:	fc 79 24 00 	mov	r9,-187392
800034ce:	73 a9       	ld.w	r9,r9[0x68]
800034d0:	12 9a       	mov	r10,r9
800034d2:	e4 1a c0 ff 	andh	r10,0xc0ff
800034d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034da:	92 69       	ld.sh	r9,r9[0xc]
800034dc:	b9 69       	lsl	r9,0x18
800034de:	e6 19 3f 00 	andh	r9,0x3f00,COH
800034e2:	f5 e9 10 09 	or	r9,r10,r9
800034e6:	f1 49 00 68 	st.w	r8[104],r9

	/* Set ADC Gain Calibration */
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
800034ea:	fc 78 24 00 	mov	r8,-187392
800034ee:	fc 79 24 00 	mov	r9,-187392
800034f2:	73 a9       	ld.w	r9,r9[0x68]
800034f4:	12 9a       	mov	r10,r9
800034f6:	e0 1a 80 00 	andl	r10,0x8000
800034fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034fe:	92 59       	ld.sh	r9,r9[0xa]
80003500:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
80003504:	f5 e9 10 09 	or	r9,r10,r9
80003508:	f1 49 00 68 	st.w	r8[104],r9

	/* Set Sample & Hold Gain Calibration for seq 0 */
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
8000350c:	fc 78 24 00 	mov	r8,-187392
80003510:	fc 79 24 00 	mov	r9,-187392
80003514:	73 b9       	ld.w	r9,r9[0x6c]
80003516:	12 9a       	mov	r10,r9
80003518:	e0 1a fc 00 	andl	r10,0xfc00
8000351c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003520:	92 79       	ld.sh	r9,r9[0xe]
80003522:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
80003526:	f5 e9 10 09 	or	r9,r10,r9
8000352a:	f1 49 00 6c 	st.w	r8[108],r9

	/* Set Sample & Hold Gain Calibration for seq 1 */
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
8000352e:	fc 78 24 00 	mov	r8,-187392
80003532:	fc 79 24 00 	mov	r9,-187392
80003536:	73 b9       	ld.w	r9,r9[0x6c]
80003538:	12 9a       	mov	r10,r9
8000353a:	e4 1a fc 00 	andh	r10,0xfc00
8000353e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003542:	f3 09 00 10 	ld.sh	r9,r9[16]
80003546:	b1 69       	lsl	r9,0x10
80003548:	e6 19 03 ff 	andh	r9,0x3ff,COH
8000354c:	f5 e9 10 09 	or	r9,r10,r9
80003550:	f1 49 00 6c 	st.w	r8[108],r9

	/* Enable ADCIFA */
	ADCIFA_enable();
80003554:	fc 78 24 00 	mov	r8,-187392
80003558:	fc 79 24 00 	mov	r9,-187392
8000355c:	72 19       	ld.w	r9,r9[0x4]
8000355e:	a1 a9       	sbr	r9,0x0
80003560:	91 19       	st.w	r8[0x4],r9
80003562:	c0 28       	rjmp	80003566 <adcifa_configure+0x14e>
	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
			break;
		}
	}
80003564:	d7 03       	nop
	/* Enable ADCIFA */
	ADCIFA_enable();

	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
80003566:	fc 78 24 00 	mov	r8,-187392
8000356a:	70 28       	ld.w	r8,r8[0x8]
8000356c:	e2 18 40 00 	andl	r8,0x4000,COH
80003570:	cf a0       	breq	80003564 <adcifa_configure+0x14c>
			break;
		}
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
80003572:	30 18       	mov	r8,1
}
80003574:	10 9c       	mov	r12,r8
80003576:	2f dd       	sub	sp,-12
80003578:	e3 cd 80 80 	ldm	sp++,r7,pc

8000357c <adcifa_configure_sequencer>:
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		adcifa_sequencer_conversion_opt_t *p_adcifa_sequencer_conversion_opt)
{
8000357c:	eb cd 40 80 	pushm	r7,lr
80003580:	1a 97       	mov	r7,sp
80003582:	21 1d       	sub	sp,68
80003584:	ef 4c ff c8 	st.w	r7[-56],r12
80003588:	16 98       	mov	r8,r11
8000358a:	ef 4a ff c0 	st.w	r7[-64],r10
8000358e:	ef 49 ff bc 	st.w	r7[-68],r9
80003592:	ef 68 ff c4 	st.b	r7[-60],r8
	uint8_t g[16] = {0};
80003596:	30 08       	mov	r8,0
80003598:	30 09       	mov	r9,0
8000359a:	ee e9 ff ec 	st.d	r7[-20],r8
8000359e:	30 08       	mov	r8,0
800035a0:	30 09       	mov	r9,0
800035a2:	ee e9 ff f4 	st.d	r7[-12],r8
	uint8_t mp[16] = {0};
800035a6:	30 08       	mov	r8,0
800035a8:	30 09       	mov	r9,0
800035aa:	ee e9 ff dc 	st.d	r7[-36],r8
800035ae:	30 08       	mov	r8,0
800035b0:	30 09       	mov	r9,0
800035b2:	ee e9 ff e4 	st.d	r7[-28],r8
	uint8_t mn[16] = {0};
800035b6:	30 08       	mov	r8,0
800035b8:	30 09       	mov	r9,0
800035ba:	ee e9 ff cc 	st.d	r7[-52],r8
800035be:	30 08       	mov	r8,0
800035c0:	30 09       	mov	r9,0
800035c2:	ee e9 ff d4 	st.d	r7[-44],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch case with sequencer */
	switch (sequencer) {
800035c6:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800035ca:	58 08       	cp.w	r8,0
800035cc:	c0 60       	breq	800035d8 <adcifa_configure_sequencer+0x5c>
800035ce:	58 18       	cp.w	r8,1
800035d0:	e0 80 01 65 	breq	8000389a <adcifa_configure_sequencer+0x31e>
800035d4:	e0 8f 02 54 	bral	80003a7c <adcifa_configure_sequencer+0x500>
	/* Sequencer 0 */
	case 0:
		/* Configure Sequencer 0 */
		ADCIFA_configure_sequencer_0(
800035d8:	fc 78 24 00 	mov	r8,-187392
800035dc:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035e0:	13 89       	ld.ub	r9,r9[0x0]
800035e2:	20 19       	sub	r9,1
800035e4:	f2 0a 15 10 	lsl	r10,r9,0x10
800035e8:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035ec:	13 99       	ld.ub	r9,r9[0x1]
800035ee:	ad 69       	lsl	r9,0xc
800035f0:	12 4a       	or	r10,r9
800035f2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035f6:	13 a9       	ld.ub	r9,r9[0x2]
800035f8:	a9 69       	lsl	r9,0x8
800035fa:	12 4a       	or	r10,r9
800035fc:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003600:	13 b9       	ld.ub	r9,r9[0x3]
80003602:	a3 69       	lsl	r9,0x2
80003604:	12 4a       	or	r10,r9
80003606:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000360a:	13 c9       	ld.ub	r9,r9[0x4]
8000360c:	a3 79       	lsl	r9,0x3
8000360e:	12 4a       	or	r10,r9
80003610:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003614:	13 d9       	ld.ub	r9,r9[0x5]
80003616:	a1 79       	lsl	r9,0x1
80003618:	12 4a       	or	r10,r9
8000361a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000361e:	13 e9       	ld.ub	r9,r9[0x6]
80003620:	f5 e9 10 09 	or	r9,r10,r9
80003624:	91 59       	st.w	r8[0x14],r9
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003626:	30 08       	mov	r8,0
80003628:	ef 68 ff ff 	st.b	r7[-1],r8
8000362c:	c1 68       	rjmp	80003658 <adcifa_configure_sequencer+0xdc>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8000362e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003632:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003636:	12 98       	mov	r8,r9
80003638:	a1 78       	lsl	r8,0x1
8000363a:	12 08       	add	r8,r9
8000363c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003640:	f2 08 00 08 	add	r8,r9,r8
80003644:	11 a8       	ld.ub	r8,r8[0x2]
80003646:	ee 0a 00 09 	add	r9,r7,r10
8000364a:	f3 68 ff ec 	st.b	r9[-20],r8
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000364e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003652:	2f f8       	sub	r8,-1
80003654:	ef 68 ff ff 	st.b	r7[-1],r8
80003658:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000365c:	11 88       	ld.ub	r8,r8[0x0]
8000365e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003662:	f0 09 18 00 	cp.b	r9,r8
80003666:	ce 43       	brcs	8000362e <adcifa_configure_sequencer+0xb2>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
80003668:	fc 78 24 00 	mov	r8,-187392
8000366c:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80003670:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80003674:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80003678:	b9 69       	lsl	r9,0x18
8000367a:	12 4a       	or	r10,r9
8000367c:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80003680:	b5 69       	lsl	r9,0x14
80003682:	12 4a       	or	r10,r9
80003684:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003688:	b1 69       	lsl	r9,0x10
8000368a:	12 4a       	or	r10,r9
8000368c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003690:	ad 69       	lsl	r9,0xc
80003692:	12 4a       	or	r10,r9
80003694:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80003698:	a9 69       	lsl	r9,0x8
8000369a:	12 4a       	or	r10,r9
8000369c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800036a0:	a5 69       	lsl	r9,0x4
800036a2:	12 4a       	or	r10,r9
800036a4:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800036a8:	f5 e9 10 09 	or	r9,r10,r9
800036ac:	91 79       	st.w	r8[0x1c],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800036ae:	30 08       	mov	r8,0
800036b0:	ef 68 ff ff 	st.b	r7[-1],r8
800036b4:	c2 68       	rjmp	80003700 <adcifa_configure_sequencer+0x184>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800036b6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800036ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036be:	12 98       	mov	r8,r9
800036c0:	a1 78       	lsl	r8,0x1
800036c2:	12 08       	add	r8,r9
800036c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800036c8:	f2 08 00 08 	add	r8,r9,r8
800036cc:	11 88       	ld.ub	r8,r8[0x0]
800036ce:	ee 0a 00 09 	add	r9,r7,r10
800036d2:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800036d6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800036da:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036de:	12 98       	mov	r8,r9
800036e0:	a1 78       	lsl	r8,0x1
800036e2:	12 08       	add	r8,r9
800036e4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800036e8:	f2 08 00 08 	add	r8,r9,r8
800036ec:	11 98       	ld.ub	r8,r8[0x1]
800036ee:	ee 0a 00 09 	add	r9,r7,r10
800036f2:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800036f6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036fa:	2f f8       	sub	r8,-1
800036fc:	ef 68 ff ff 	st.b	r7[-1],r8
80003700:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003704:	11 88       	ld.ub	r8,r8[0x0]
80003706:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000370a:	f0 09 18 00 	cp.b	r9,r8
8000370e:	cd 43       	brcs	800036b6 <adcifa_configure_sequencer+0x13a>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3],
80003710:	fc 78 24 00 	mov	r8,-187392
80003714:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80003718:	f2 0a 15 18 	lsl	r10,r9,0x18
8000371c:	ef 39 ff e2 	ld.ub	r9,r7[-30]
80003720:	b1 69       	lsl	r9,0x10
80003722:	12 4a       	or	r10,r9
80003724:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80003728:	a9 69       	lsl	r9,0x8
8000372a:	12 4a       	or	r10,r9
8000372c:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80003730:	f5 e9 10 09 	or	r9,r10,r9
80003734:	91 b9       	st.w	r8[0x2c],r9
80003736:	fc 78 24 00 	mov	r8,-187392
8000373a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000373e:	f2 0a 15 18 	lsl	r10,r9,0x18
80003742:	ef 39 ff de 	ld.ub	r9,r7[-34]
80003746:	b1 69       	lsl	r9,0x10
80003748:	12 4a       	or	r10,r9
8000374a:	ef 39 ff dd 	ld.ub	r9,r7[-35]
8000374e:	a9 69       	lsl	r9,0x8
80003750:	12 4a       	or	r10,r9
80003752:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80003756:	f5 e9 10 09 	or	r9,r10,r9
8000375a:	91 99       	st.w	r8[0x24],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3],
8000375c:	fc 78 24 00 	mov	r8,-187392
80003760:	ef 39 ff d3 	ld.ub	r9,r7[-45]
80003764:	f2 0a 15 18 	lsl	r10,r9,0x18
80003768:	ef 39 ff d2 	ld.ub	r9,r7[-46]
8000376c:	b1 69       	lsl	r9,0x10
8000376e:	12 4a       	or	r10,r9
80003770:	ef 39 ff d1 	ld.ub	r9,r7[-47]
80003774:	a9 69       	lsl	r9,0x8
80003776:	12 4a       	or	r10,r9
80003778:	ef 39 ff d0 	ld.ub	r9,r7[-48]
8000377c:	f5 e9 10 09 	or	r9,r10,r9
80003780:	91 f9       	st.w	r8[0x3c],r9
80003782:	fc 78 24 00 	mov	r8,-187392
80003786:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000378a:	f2 0a 15 18 	lsl	r10,r9,0x18
8000378e:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003792:	b1 69       	lsl	r9,0x10
80003794:	12 4a       	or	r10,r9
80003796:	ef 39 ff cd 	ld.ub	r9,r7[-51]
8000379a:	a9 69       	lsl	r9,0x8
8000379c:	12 4a       	or	r10,r9
8000379e:	ef 39 ff cc 	ld.ub	r9,r7[-52]
800037a2:	f5 e9 10 09 	or	r9,r10,r9
800037a6:	91 d9       	st.w	r8[0x34],r9
		 * This adcifa_seq1_configured variable check if muxsel1p,muxsel1n 
		 * registers are already configured. This may happen if this function is
		 * called first with sequencer 1 as argument and then called with 
		 * sequencer 0 as argument in case dual mode is used.
		 */
		if(!adcifa_seq1_configured)
800037a8:	fe f8 02 e0 	ld.w	r8,pc[736]
800037ac:	11 88       	ld.ub	r8,r8[0x0]
800037ae:	ec 18 00 01 	eorl	r8,0x1
800037b2:	5c 58       	castu.b	r8
800037b4:	e0 80 01 63 	breq	80003a7a <adcifa_configure_sequencer+0x4fe>
		{
			/*
			 * Configure gain for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */ 
			ADCIFA_configure_sh1gain(g[15], g[14], g[13], g[12], g[11], g[10], 
800037b8:	fc 78 24 00 	mov	r8,-187392
800037bc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800037c0:	f2 0a 15 1c 	lsl	r10,r9,0x1c
800037c4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800037c8:	b9 69       	lsl	r9,0x18
800037ca:	12 4a       	or	r10,r9
800037cc:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800037d0:	b5 69       	lsl	r9,0x14
800037d2:	12 4a       	or	r10,r9
800037d4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800037d8:	b1 69       	lsl	r9,0x10
800037da:	12 4a       	or	r10,r9
800037dc:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800037e0:	ad 69       	lsl	r9,0xc
800037e2:	12 4a       	or	r10,r9
800037e4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800037e8:	a9 69       	lsl	r9,0x8
800037ea:	12 4a       	or	r10,r9
800037ec:	ef 39 ff f5 	ld.ub	r9,r7[-11]
800037f0:	a5 69       	lsl	r9,0x4
800037f2:	12 4a       	or	r10,r9
800037f4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800037f8:	f5 e9 10 09 	or	r9,r10,r9
800037fc:	91 89       	st.w	r8[0x20],r9

			/*
			 * Configure Mux for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */
			ADCIFA_configure_muxsel1p(mp[15], mp[14], mp[13], mp[12], mp[11], 
800037fe:	fc 78 24 00 	mov	r8,-187392
80003802:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80003806:	f2 0a 15 18 	lsl	r10,r9,0x18
8000380a:	ef 39 ff ea 	ld.ub	r9,r7[-22]
8000380e:	b1 69       	lsl	r9,0x10
80003810:	12 4a       	or	r10,r9
80003812:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80003816:	a9 69       	lsl	r9,0x8
80003818:	12 4a       	or	r10,r9
8000381a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000381e:	f5 e9 10 09 	or	r9,r10,r9
80003822:	91 c9       	st.w	r8[0x30],r9
80003824:	fc 78 24 00 	mov	r8,-187392
80003828:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8000382c:	f2 0a 15 18 	lsl	r10,r9,0x18
80003830:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80003834:	b1 69       	lsl	r9,0x10
80003836:	12 4a       	or	r10,r9
80003838:	ef 39 ff e5 	ld.ub	r9,r7[-27]
8000383c:	a9 69       	lsl	r9,0x8
8000383e:	12 4a       	or	r10,r9
80003840:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80003844:	f5 e9 10 09 	or	r9,r10,r9
80003848:	91 a9       	st.w	r8[0x28],r9
				mp[10], mp[9], mp[8]);
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
8000384a:	fc 78 24 00 	mov	r8,-187392
8000384e:	ef 39 ff db 	ld.ub	r9,r7[-37]
80003852:	f2 0a 15 18 	lsl	r10,r9,0x18
80003856:	ef 39 ff da 	ld.ub	r9,r7[-38]
8000385a:	b1 69       	lsl	r9,0x10
8000385c:	12 4a       	or	r10,r9
8000385e:	ef 39 ff d9 	ld.ub	r9,r7[-39]
80003862:	a9 69       	lsl	r9,0x8
80003864:	12 4a       	or	r10,r9
80003866:	ef 39 ff d8 	ld.ub	r9,r7[-40]
8000386a:	f5 e9 10 09 	or	r9,r10,r9
8000386e:	f1 49 00 40 	st.w	r8[64],r9
80003872:	fc 78 24 00 	mov	r8,-187392
80003876:	ef 39 ff d7 	ld.ub	r9,r7[-41]
8000387a:	f2 0a 15 18 	lsl	r10,r9,0x18
8000387e:	ef 39 ff d6 	ld.ub	r9,r7[-42]
80003882:	b1 69       	lsl	r9,0x10
80003884:	12 4a       	or	r10,r9
80003886:	ef 39 ff d5 	ld.ub	r9,r7[-43]
8000388a:	a9 69       	lsl	r9,0x8
8000388c:	12 4a       	or	r10,r9
8000388e:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80003892:	f5 e9 10 09 	or	r9,r10,r9
80003896:	91 e9       	st.w	r8[0x38],r9
				mn[10], mn[9], mn[8]);

		}

		break;
80003898:	cf 28       	rjmp	80003a7c <adcifa_configure_sequencer+0x500>

	/* Sequencer 1 */
	case 1:
		/* Configure Sequencer 1 */
		ADCIFA_configure_sequencer_1(
8000389a:	fc 78 24 00 	mov	r8,-187392
8000389e:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038a2:	13 89       	ld.ub	r9,r9[0x0]
800038a4:	20 19       	sub	r9,1
800038a6:	f2 0a 15 10 	lsl	r10,r9,0x10
800038aa:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038ae:	13 99       	ld.ub	r9,r9[0x1]
800038b0:	ad 69       	lsl	r9,0xc
800038b2:	12 4a       	or	r10,r9
800038b4:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038b8:	13 a9       	ld.ub	r9,r9[0x2]
800038ba:	a9 69       	lsl	r9,0x8
800038bc:	12 4a       	or	r10,r9
800038be:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038c2:	13 b9       	ld.ub	r9,r9[0x3]
800038c4:	a3 69       	lsl	r9,0x2
800038c6:	12 4a       	or	r10,r9
800038c8:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038cc:	13 c9       	ld.ub	r9,r9[0x4]
800038ce:	a3 79       	lsl	r9,0x3
800038d0:	12 4a       	or	r10,r9
800038d2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038d6:	13 d9       	ld.ub	r9,r9[0x5]
800038d8:	a1 79       	lsl	r9,0x1
800038da:	f5 e9 10 09 	or	r9,r10,r9
800038de:	12 9a       	mov	r10,r9
800038e0:	a5 aa       	sbr	r10,0x4
800038e2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038e6:	13 e9       	ld.ub	r9,r9[0x6]
800038e8:	f5 e9 10 09 	or	r9,r10,r9
800038ec:	91 69       	st.w	r8[0x18],r9
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800038ee:	30 08       	mov	r8,0
800038f0:	ef 68 ff ff 	st.b	r7[-1],r8
800038f4:	c1 68       	rjmp	80003920 <adcifa_configure_sequencer+0x3a4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800038f6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800038fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800038fe:	12 98       	mov	r8,r9
80003900:	a1 78       	lsl	r8,0x1
80003902:	12 08       	add	r8,r9
80003904:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003908:	f2 08 00 08 	add	r8,r9,r8
8000390c:	11 a8       	ld.ub	r8,r8[0x2]
8000390e:	ee 0a 00 09 	add	r9,r7,r10
80003912:	f3 68 ff ec 	st.b	r9[-20],r8
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003916:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000391a:	2f f8       	sub	r8,-1
8000391c:	ef 68 ff ff 	st.b	r7[-1],r8
80003920:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003924:	11 88       	ld.ub	r8,r8[0x0]
80003926:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000392a:	f0 09 18 00 	cp.b	r9,r8
8000392e:	ce 43       	brcs	800038f6 <adcifa_configure_sequencer+0x37a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
80003930:	fc 78 24 00 	mov	r8,-187392
80003934:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80003938:	f2 0a 15 1c 	lsl	r10,r9,0x1c
8000393c:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80003940:	b9 69       	lsl	r9,0x18
80003942:	12 4a       	or	r10,r9
80003944:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80003948:	b5 69       	lsl	r9,0x14
8000394a:	12 4a       	or	r10,r9
8000394c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003950:	b1 69       	lsl	r9,0x10
80003952:	12 4a       	or	r10,r9
80003954:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003958:	ad 69       	lsl	r9,0xc
8000395a:	12 4a       	or	r10,r9
8000395c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80003960:	a9 69       	lsl	r9,0x8
80003962:	12 4a       	or	r10,r9
80003964:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80003968:	a5 69       	lsl	r9,0x4
8000396a:	12 4a       	or	r10,r9
8000396c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80003970:	f5 e9 10 09 	or	r9,r10,r9
80003974:	91 89       	st.w	r8[0x20],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003976:	30 08       	mov	r8,0
80003978:	ef 68 ff ff 	st.b	r7[-1],r8
8000397c:	c2 68       	rjmp	800039c8 <adcifa_configure_sequencer+0x44c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
8000397e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003982:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003986:	12 98       	mov	r8,r9
80003988:	a1 78       	lsl	r8,0x1
8000398a:	12 08       	add	r8,r9
8000398c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003990:	f2 08 00 08 	add	r8,r9,r8
80003994:	11 88       	ld.ub	r8,r8[0x0]
80003996:	ee 0a 00 09 	add	r9,r7,r10
8000399a:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
8000399e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800039a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039a6:	12 98       	mov	r8,r9
800039a8:	a1 78       	lsl	r8,0x1
800039aa:	12 08       	add	r8,r9
800039ac:	ee f9 ff bc 	ld.w	r9,r7[-68]
800039b0:	f2 08 00 08 	add	r8,r9,r8
800039b4:	11 98       	ld.ub	r8,r8[0x1]
800039b6:	ee 0a 00 09 	add	r9,r7,r10
800039ba:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800039be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800039c2:	2f f8       	sub	r8,-1
800039c4:	ef 68 ff ff 	st.b	r7[-1],r8
800039c8:	ee f8 ff c0 	ld.w	r8,r7[-64]
800039cc:	11 88       	ld.ub	r8,r8[0x0]
800039ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039d2:	f0 09 18 00 	cp.b	r9,r8
800039d6:	cd 43       	brcs	8000397e <adcifa_configure_sequencer+0x402>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3],
800039d8:	fc 78 24 00 	mov	r8,-187392
800039dc:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800039e0:	f2 0a 15 18 	lsl	r10,r9,0x18
800039e4:	ef 39 ff e2 	ld.ub	r9,r7[-30]
800039e8:	b1 69       	lsl	r9,0x10
800039ea:	12 4a       	or	r10,r9
800039ec:	ef 39 ff e1 	ld.ub	r9,r7[-31]
800039f0:	a9 69       	lsl	r9,0x8
800039f2:	12 4a       	or	r10,r9
800039f4:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800039f8:	f5 e9 10 09 	or	r9,r10,r9
800039fc:	91 c9       	st.w	r8[0x30],r9
800039fe:	fc 78 24 00 	mov	r8,-187392
80003a02:	ef 39 ff df 	ld.ub	r9,r7[-33]
80003a06:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a0a:	ef 39 ff de 	ld.ub	r9,r7[-34]
80003a0e:	b1 69       	lsl	r9,0x10
80003a10:	12 4a       	or	r10,r9
80003a12:	ef 39 ff dd 	ld.ub	r9,r7[-35]
80003a16:	a9 69       	lsl	r9,0x8
80003a18:	12 4a       	or	r10,r9
80003a1a:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80003a1e:	f5 e9 10 09 	or	r9,r10,r9
80003a22:	91 a9       	st.w	r8[0x28],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3],
80003a24:	fc 78 24 00 	mov	r8,-187392
80003a28:	ef 39 ff d3 	ld.ub	r9,r7[-45]
80003a2c:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a30:	ef 39 ff d2 	ld.ub	r9,r7[-46]
80003a34:	b1 69       	lsl	r9,0x10
80003a36:	12 4a       	or	r10,r9
80003a38:	ef 39 ff d1 	ld.ub	r9,r7[-47]
80003a3c:	a9 69       	lsl	r9,0x8
80003a3e:	12 4a       	or	r10,r9
80003a40:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80003a44:	f5 e9 10 09 	or	r9,r10,r9
80003a48:	f1 49 00 40 	st.w	r8[64],r9
80003a4c:	fc 78 24 00 	mov	r8,-187392
80003a50:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003a54:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a58:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003a5c:	b1 69       	lsl	r9,0x10
80003a5e:	12 4a       	or	r10,r9
80003a60:	ef 39 ff cd 	ld.ub	r9,r7[-51]
80003a64:	a9 69       	lsl	r9,0x8
80003a66:	12 4a       	or	r10,r9
80003a68:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80003a6c:	f5 e9 10 09 	or	r9,r10,r9
80003a70:	91 e9       	st.w	r8[0x38],r9
				mn[2], mn[1], mn[0]);

		adcifa_seq1_configured = true;
80003a72:	48 69       	lddpc	r9,80003a88 <adcifa_configure_sequencer+0x50c>
80003a74:	30 18       	mov	r8,1
80003a76:	b2 88       	st.b	r9[0x0],r8
80003a78:	c0 28       	rjmp	80003a7c <adcifa_configure_sequencer+0x500>
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
				mn[10], mn[9], mn[8]);

		}

		break;
80003a7a:	d7 03       	nop
		break;

	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
80003a7c:	30 18       	mov	r8,1
}
80003a7e:	10 9c       	mov	r12,r8
80003a80:	2e fd       	sub	sp,-68
80003a82:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a86:	00 00       	add	r0,r0
80003a88:	00 00       	add	r0,r0
80003a8a:	05 c0       	ld.ub	r0,r2[0x4]

80003a8c <adcifa_start_sequencer>:
/** \brief Start analog to digital conversion for a specific sequencer
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
void adcifa_start_sequencer(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003a8c:	eb cd 40 80 	pushm	r7,lr
80003a90:	1a 97       	mov	r7,sp
80003a92:	20 2d       	sub	sp,8
80003a94:	ef 4c ff fc 	st.w	r7[-4],r12
80003a98:	16 98       	mov	r8,r11
80003a9a:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch Sequencer */
	switch (sequencer) {
80003a9e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003aa2:	58 18       	cp.w	r8,1
80003aa4:	c0 a0       	breq	80003ab8 <adcifa_start_sequencer+0x2c>
80003aa6:	58 38       	cp.w	r8,3
80003aa8:	c0 d0       	breq	80003ac2 <adcifa_start_sequencer+0x36>
80003aaa:	58 08       	cp.w	r8,0
80003aac:	c0 f1       	brne	80003aca <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
80003aae:	fc 78 24 00 	mov	r8,-187392
80003ab2:	30 19       	mov	r9,1
80003ab4:	91 09       	st.w	r8[0x0],r9
		break;
80003ab6:	c0 a8       	rjmp	80003aca <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
80003ab8:	fc 78 24 00 	mov	r8,-187392
80003abc:	30 29       	mov	r9,2
80003abe:	91 09       	st.w	r8[0x0],r9
		break;
80003ac0:	c0 58       	rjmp	80003aca <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(
80003ac2:	fc 78 24 00 	mov	r8,-187392
80003ac6:	30 39       	mov	r9,3
80003ac8:	91 09       	st.w	r8[0x0],r9
		break;

	default:
		break;
	}
}
80003aca:	2f ed       	sub	sp,-8
80003acc:	e3 cd 80 80 	ldm	sp++,r7,pc

80003ad0 <adcifa_check_eos>:
/** \brief Get End of Conversion status bit
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
bool adcifa_check_eos(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003ad0:	eb cd 40 80 	pushm	r7,lr
80003ad4:	1a 97       	mov	r7,sp
80003ad6:	20 2d       	sub	sp,8
80003ad8:	ef 4c ff fc 	st.w	r7[-4],r12
80003adc:	16 98       	mov	r8,r11
80003ade:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* get SR register : EOS bit for channel */
	switch (sequencer) {
80003ae2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003ae6:	58 08       	cp.w	r8,0
80003ae8:	c0 40       	breq	80003af0 <adcifa_check_eos+0x20>
80003aea:	58 18       	cp.w	r8,1
80003aec:	c0 90       	breq	80003afe <adcifa_check_eos+0x2e>
80003aee:	c1 08       	rjmp	80003b0e <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
80003af0:	fc 78 24 00 	mov	r8,-187392
80003af4:	70 28       	ld.w	r8,r8[0x8]
80003af6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003afa:	5c 58       	castu.b	r8
80003afc:	c0 a8       	rjmp	80003b10 <adcifa_check_eos+0x40>

	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
80003afe:	fc 78 24 00 	mov	r8,-187392
80003b02:	70 28       	ld.w	r8,r8[0x8]
80003b04:	e2 18 00 10 	andl	r8,0x10,COH
80003b08:	5f 18       	srne	r8
80003b0a:	5c 58       	castu.b	r8
80003b0c:	c0 28       	rjmp	80003b10 <adcifa_check_eos+0x40>

	default:
		break;
	}
	return false;
80003b0e:	30 08       	mov	r8,0
}
80003b10:	10 9c       	mov	r12,r8
80003b12:	2f ed       	sub	sp,-8
80003b14:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b18 <adcifa_get_values_from_sequencer>:
 */
uint8_t adcifa_get_values_from_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		int16_t *adcifa_values)
{
80003b18:	eb cd 40 80 	pushm	r7,lr
80003b1c:	1a 97       	mov	r7,sp
80003b1e:	20 5d       	sub	sp,20
80003b20:	ef 4c ff f8 	st.w	r7[-8],r12
80003b24:	16 98       	mov	r8,r11
80003b26:	ef 4a ff f0 	st.w	r7[-16],r10
80003b2a:	ef 49 ff ec 	st.w	r7[-20],r9
80003b2e:	ef 68 ff f4 	st.b	r7[-12],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* wait for end of sequence */
	if (adcifa_check_eos(adcifa, sequencer) != true) {
80003b32:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003b36:	10 9b       	mov	r11,r8
80003b38:	ee fc ff f8 	ld.w	r12,r7[-8]
80003b3c:	f0 1f 00 2c 	mcall	80003bec <adcifa_get_values_from_sequencer+0xd4>
80003b40:	18 98       	mov	r8,r12
80003b42:	ec 18 00 01 	eorl	r8,0x1
80003b46:	5c 58       	castu.b	r8
80003b48:	c0 30       	breq	80003b4e <adcifa_get_values_from_sequencer+0x36>
		return ADCIFA_STATUS_NOT_COMPLETED;
80003b4a:	30 38       	mov	r8,3
80003b4c:	c4 b8       	rjmp	80003be2 <adcifa_get_values_from_sequencer+0xca>
	}

	switch (sequencer) {
80003b4e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003b52:	58 08       	cp.w	r8,0
80003b54:	c0 40       	breq	80003b5c <adcifa_get_values_from_sequencer+0x44>
80003b56:	58 18       	cp.w	r8,1
80003b58:	c2 30       	breq	80003b9e <adcifa_get_values_from_sequencer+0x86>
80003b5a:	c4 38       	rjmp	80003be0 <adcifa_get_values_from_sequencer+0xc8>
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b5c:	30 08       	mov	r8,0
80003b5e:	ef 68 ff ff 	st.b	r7[-1],r8
80003b62:	c1 58       	rjmp	80003b8c <adcifa_get_values_from_sequencer+0x74>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
80003b64:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b68:	a1 78       	lsl	r8,0x1
80003b6a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003b6e:	10 09       	add	r9,r8
80003b70:	fc 78 24 00 	mov	r8,-187392
80003b74:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003b78:	2d fa       	sub	r10,-33
80003b7a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003b7e:	5c 88       	casts.h	r8
80003b80:	b2 08       	st.h	r9[0x0],r8
	}

	switch (sequencer) {
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b86:	2f f8       	sub	r8,-1
80003b88:	ef 68 ff ff 	st.b	r7[-1],r8
80003b8c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b90:	11 88       	ld.ub	r8,r8[0x0]
80003b92:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003b96:	f0 09 18 00 	cp.b	r9,r8
80003b9a:	ce 53       	brcs	80003b64 <adcifa_get_values_from_sequencer+0x4c>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
80003b9c:	c2 28       	rjmp	80003be0 <adcifa_get_values_from_sequencer+0xc8>

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b9e:	30 08       	mov	r8,0
80003ba0:	ef 68 ff ff 	st.b	r7[-1],r8
80003ba4:	c1 68       	rjmp	80003bd0 <adcifa_get_values_from_sequencer+0xb8>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
80003ba6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003baa:	a1 78       	lsl	r8,0x1
80003bac:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003bb0:	10 09       	add	r9,r8
80003bb2:	fc 78 24 00 	mov	r8,-187392
80003bb6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003bba:	2f 8a       	sub	r10,-8
80003bbc:	2d fa       	sub	r10,-33
80003bbe:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003bc2:	5c 88       	casts.h	r8
80003bc4:	b2 08       	st.h	r9[0x0],r8
		}
		break;

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003bc6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003bca:	2f f8       	sub	r8,-1
80003bcc:	ef 68 ff ff 	st.b	r7[-1],r8
80003bd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bd4:	11 88       	ld.ub	r8,r8[0x0]
80003bd6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003bda:	f0 09 18 00 	cp.b	r9,r8
80003bde:	ce 43       	brcs	80003ba6 <adcifa_get_values_from_sequencer+0x8e>

	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
80003be0:	30 28       	mov	r8,2
}
80003be2:	10 9c       	mov	r12,r8
80003be4:	2f bd       	sub	sp,-20
80003be6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bea:	00 00       	add	r0,r0
80003bec:	80 00       	ld.sh	r0,r0[0x0]
80003bee:	3a d0       	mov	r0,-83

80003bf0 <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
80003bf0:	eb cd 40 80 	pushm	r7,lr
80003bf4:	1a 97       	mov	r7,sp
80003bf6:	20 8d       	sub	sp,32
		384,
		512,
		768,
		1024,
		2048,
	};
80003bf8:	48 c9       	lddpc	r9,80003c28 <flashc_get_flash_size+0x38>
80003bfa:	ee c8 00 1e 	sub	r8,r7,30
80003bfe:	31 ea       	mov	r10,30
80003c00:	12 9b       	mov	r11,r9
80003c02:	10 9c       	mov	r12,r8
80003c04:	f0 1f 00 0a 	mcall	80003c2c <flashc_get_flash_size+0x3c>
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK)
80003c08:	fe 68 00 00 	mov	r8,-131072
80003c0c:	70 38       	ld.w	r8,r8[0xc]
80003c0e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003c12:	a1 78       	lsl	r8,0x1
80003c14:	ee 08 00 08 	add	r8,r7,r8
80003c18:	f1 08 ff e2 	ld.sh	r8,r8[-30]
80003c1c:	5c 78       	castu.h	r8
80003c1e:	ab 68       	lsl	r8,0xa
		1024,
	};
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
			>> AVR32_FLASHC_FSR_FSZ_OFFSET]) << 10;
#endif
}
80003c20:	10 9c       	mov	r12,r8
80003c22:	2f 8d       	sub	sp,-32
80003c24:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c28:	80 01       	ld.sh	r1,r0[0x0]
80003c2a:	22 20       	sub	r0,34
80003c2c:	80 00       	ld.sh	r0,r0[0x0]
80003c2e:	ca f6       	brmi	80003b8c <adcifa_get_values_from_sequencer+0x74>

80003c30 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
80003c30:	eb cd 40 80 	pushm	r7,lr
80003c34:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80003c36:	fe 68 00 00 	mov	r8,-131072
80003c3a:	70 28       	ld.w	r8,r8[0x8]
80003c3c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003c40:	5c 58       	castu.b	r8
}
80003c42:	10 9c       	mov	r12,r8
80003c44:	e3 cd 80 80 	ldm	sp++,r7,pc

80003c48 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80003c48:	eb cd 40 80 	pushm	r7,lr
80003c4c:	1a 97       	mov	r7,sp
	while (!flashc_is_ready());
80003c4e:	f0 1f 00 05 	mcall	80003c60 <flashc_default_wait_until_ready+0x18>
80003c52:	18 98       	mov	r8,r12
80003c54:	ec 18 00 01 	eorl	r8,0x1
80003c58:	5c 58       	castu.b	r8
80003c5a:	cf a1       	brne	80003c4e <flashc_default_wait_until_ready+0x6>
}
80003c5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c60:	80 00       	ld.sh	r0,r0[0x0]
80003c62:	3c 30       	mov	r0,-61

80003c64 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80003c64:	eb cd 40 80 	pushm	r7,lr
80003c68:	1a 97       	mov	r7,sp
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80003c6a:	fe 68 00 00 	mov	r8,-131072
80003c6e:	70 28       	ld.w	r8,r8[0x8]
80003c70:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHC_FSR_PROGE_MASK);
}
80003c74:	10 9c       	mov	r12,r8
80003c76:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c7a:	d7 03       	nop

80003c7c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80003c7c:	eb cd 40 80 	pushm	r7,lr
80003c80:	1a 97       	mov	r7,sp
80003c82:	20 3d       	sub	sp,12
80003c84:	ef 4c ff f8 	st.w	r7[-8],r12
80003c88:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003c8c:	49 b8       	lddpc	r8,80003cf8 <flashc_issue_command+0x7c>
80003c8e:	70 08       	ld.w	r8,r8[0x0]
80003c90:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80003c92:	fe 68 00 00 	mov	r8,-131072
80003c96:	70 18       	ld.w	r8,r8[0x4]
80003c98:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80003c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ca0:	5c 58       	castu.b	r8
80003ca2:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80003ca6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003caa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cae:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80003cb2:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80003cb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003cba:	58 08       	cp.w	r8,0
80003cbc:	c0 b5       	brlt	80003cd2 <flashc_issue_command+0x56>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80003cbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003cc2:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80003cc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cca:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80003cce:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80003cd2:	3a 58       	mov	r8,-91
80003cd4:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80003cd8:	fe 68 00 00 	mov	r8,-131072
80003cdc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003ce0:	91 19       	st.w	r8[0x4],r9
	flashc_error_status = flashc_get_error_status();
80003ce2:	f0 1f 00 07 	mcall	80003cfc <flashc_issue_command+0x80>
80003ce6:	18 99       	mov	r9,r12
80003ce8:	48 68       	lddpc	r8,80003d00 <flashc_issue_command+0x84>
80003cea:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80003cec:	48 38       	lddpc	r8,80003cf8 <flashc_issue_command+0x7c>
80003cee:	70 08       	ld.w	r8,r8[0x0]
80003cf0:	5d 18       	icall	r8
}
80003cf2:	2f dd       	sub	sp,-12
80003cf4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cf8:	00 00       	add	r0,r0
80003cfa:	00 08       	add	r8,r0
80003cfc:	80 00       	ld.sh	r0,r0[0x0]
80003cfe:	3c 64       	mov	r4,-58
80003d00:	00 00       	add	r0,r0
80003d02:	05 c4       	ld.ub	r4,r2[0x4]

80003d04 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80003d04:	eb cd 40 80 	pushm	r7,lr
80003d08:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80003d0a:	3f fb       	mov	r11,-1
80003d0c:	30 3c       	mov	r12,3
80003d0e:	f0 1f 00 03 	mcall	80003d18 <flashc_clear_page_buffer+0x14>
}
80003d12:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d16:	00 00       	add	r0,r0
80003d18:	80 00       	ld.sh	r0,r0[0x0]
80003d1a:	3c 7c       	mov	r12,-57

80003d1c <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
80003d1c:	eb cd 40 80 	pushm	r7,lr
80003d20:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80003d22:	fe 68 00 00 	mov	r8,-131072
80003d26:	70 28       	ld.w	r8,r8[0x8]
80003d28:	e2 18 00 20 	andl	r8,0x20,COH
80003d2c:	5f 18       	srne	r8
80003d2e:	5c 58       	castu.b	r8
}
80003d30:	10 9c       	mov	r12,r8
80003d32:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d36:	d7 03       	nop

80003d38 <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80003d38:	eb cd 40 80 	pushm	r7,lr
80003d3c:	1a 97       	mov	r7,sp
80003d3e:	20 1d       	sub	sp,4
80003d40:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80003d44:	ee fb ff fc 	ld.w	r11,r7[-4]
80003d48:	30 cc       	mov	r12,12
80003d4a:	f0 1f 00 05 	mcall	80003d5c <flashc_quick_page_read+0x24>
	return flashc_is_page_erased();
80003d4e:	f0 1f 00 05 	mcall	80003d60 <flashc_quick_page_read+0x28>
80003d52:	18 98       	mov	r8,r12
}
80003d54:	10 9c       	mov	r12,r8
80003d56:	2f fd       	sub	sp,-4
80003d58:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d5c:	80 00       	ld.sh	r0,r0[0x0]
80003d5e:	3c 7c       	mov	r12,-57
80003d60:	80 00       	ld.sh	r0,r0[0x0]
80003d62:	3d 1c       	mov	r12,-47

80003d64 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80003d64:	eb cd 40 80 	pushm	r7,lr
80003d68:	1a 97       	mov	r7,sp
80003d6a:	20 4d       	sub	sp,16
80003d6c:	ef 4c ff f4 	st.w	r7[-12],r12
80003d70:	16 98       	mov	r8,r11
80003d72:	ef 68 ff f0 	st.b	r7[-16],r8
	bool page_erased = true;
80003d76:	30 18       	mov	r8,1
80003d78:	ef 68 ff fb 	st.b	r7[-5],r8

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80003d7c:	ee fb ff f4 	ld.w	r11,r7[-12]
80003d80:	30 2c       	mov	r12,2
80003d82:	f0 1f 00 10 	mcall	80003dc0 <flashc_erase_page+0x5c>
	if (check) {
80003d86:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003d8a:	30 08       	mov	r8,0
80003d8c:	f0 09 18 00 	cp.b	r9,r8
80003d90:	c1 20       	breq	80003db4 <flashc_erase_page+0x50>
		unsigned int error_status = flashc_error_status;
80003d92:	48 d8       	lddpc	r8,80003dc4 <flashc_erase_page+0x60>
80003d94:	70 08       	ld.w	r8,r8[0x0]
80003d96:	ef 48 ff fc 	st.w	r7[-4],r8
		page_erased = flashc_quick_page_read(-1);
80003d9a:	3f fc       	mov	r12,-1
80003d9c:	f0 1f 00 0b 	mcall	80003dc8 <flashc_erase_page+0x64>
80003da0:	18 98       	mov	r8,r12
80003da2:	ef 68 ff fb 	st.b	r7[-5],r8
		flashc_error_status |= error_status;
80003da6:	48 88       	lddpc	r8,80003dc4 <flashc_erase_page+0x60>
80003da8:	70 09       	ld.w	r9,r8[0x0]
80003daa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003dae:	10 49       	or	r9,r8
80003db0:	48 58       	lddpc	r8,80003dc4 <flashc_erase_page+0x60>
80003db2:	91 09       	st.w	r8[0x0],r9
	}
	return page_erased;
80003db4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80003db8:	10 9c       	mov	r12,r8
80003dba:	2f cd       	sub	sp,-16
80003dbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003dc0:	80 00       	ld.sh	r0,r0[0x0]
80003dc2:	3c 7c       	mov	r12,-57
80003dc4:	00 00       	add	r0,r0
80003dc6:	05 c4       	ld.ub	r4,r2[0x4]
80003dc8:	80 00       	ld.sh	r0,r0[0x0]
80003dca:	3d 38       	mov	r8,-45

80003dcc <flashc_write_page>:
	return all_pages_erased;
}


void flashc_write_page(int page_number)
{
80003dcc:	eb cd 40 80 	pushm	r7,lr
80003dd0:	1a 97       	mov	r7,sp
80003dd2:	20 1d       	sub	sp,4
80003dd4:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80003dd8:	ee fb ff fc 	ld.w	r11,r7[-4]
80003ddc:	30 1c       	mov	r12,1
80003dde:	f0 1f 00 03 	mcall	80003de8 <flashc_write_page+0x1c>
}
80003de2:	2f fd       	sub	sp,-4
80003de4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003de8:	80 00       	ld.sh	r0,r0[0x0]
80003dea:	3c 7c       	mov	r12,-57

80003dec <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80003dec:	eb cd 40 80 	pushm	r7,lr
80003df0:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80003df2:	3f fb       	mov	r11,-1
80003df4:	30 fc       	mov	r12,15
80003df6:	f0 1f 00 05 	mcall	80003e08 <flashc_quick_user_page_read+0x1c>
	return flashc_is_page_erased();
80003dfa:	f0 1f 00 05 	mcall	80003e0c <flashc_quick_user_page_read+0x20>
80003dfe:	18 98       	mov	r8,r12
}
80003e00:	10 9c       	mov	r12,r8
80003e02:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e06:	00 00       	add	r0,r0
80003e08:	80 00       	ld.sh	r0,r0[0x0]
80003e0a:	3c 7c       	mov	r12,-57
80003e0c:	80 00       	ld.sh	r0,r0[0x0]
80003e0e:	3d 1c       	mov	r12,-47

80003e10 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80003e10:	eb cd 40 80 	pushm	r7,lr
80003e14:	1a 97       	mov	r7,sp
80003e16:	20 1d       	sub	sp,4
80003e18:	18 98       	mov	r8,r12
80003e1a:	ef 68 ff fc 	st.b	r7[-4],r8
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80003e1e:	3f fb       	mov	r11,-1
80003e20:	30 ec       	mov	r12,14
80003e22:	f0 1f 00 09 	mcall	80003e44 <flashc_erase_user_page+0x34>
	return (check) ? flashc_quick_user_page_read() : true;
80003e26:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003e2a:	30 08       	mov	r8,0
80003e2c:	f0 09 18 00 	cp.b	r9,r8
80003e30:	c0 50       	breq	80003e3a <flashc_erase_user_page+0x2a>
80003e32:	f0 1f 00 06 	mcall	80003e48 <flashc_erase_user_page+0x38>
80003e36:	18 98       	mov	r8,r12
80003e38:	c0 28       	rjmp	80003e3c <flashc_erase_user_page+0x2c>
80003e3a:	30 18       	mov	r8,1
}
80003e3c:	10 9c       	mov	r12,r8
80003e3e:	2f fd       	sub	sp,-4
80003e40:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e44:	80 00       	ld.sh	r0,r0[0x0]
80003e46:	3c 7c       	mov	r12,-57
80003e48:	80 00       	ld.sh	r0,r0[0x0]
80003e4a:	3d ec       	mov	r12,-34

80003e4c <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80003e4c:	eb cd 40 80 	pushm	r7,lr
80003e50:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80003e52:	3f fb       	mov	r11,-1
80003e54:	30 dc       	mov	r12,13
80003e56:	f0 1f 00 03 	mcall	80003e60 <flashc_write_user_page+0x14>
}
80003e5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e5e:	00 00       	add	r0,r0
80003e60:	80 00       	ld.sh	r0,r0[0x0]
80003e62:	3c 7c       	mov	r12,-57

80003e64 <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, uint8_t src, size_t nbytes, bool erase)
{
80003e64:	eb cd 40 80 	pushm	r7,lr
80003e68:	1a 97       	mov	r7,sp
80003e6a:	20 4d       	sub	sp,16
80003e6c:	ef 4c ff fc 	st.w	r7[-4],r12
80003e70:	ef 4a ff f4 	st.w	r7[-12],r10
80003e74:	12 98       	mov	r8,r9
80003e76:	16 99       	mov	r9,r11
80003e78:	ef 69 ff f8 	st.b	r7[-8],r9
80003e7c:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset16(dst, src | (uint16_t)src << 8, nbytes, erase);
80003e80:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003e84:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80003e88:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003e8c:	a9 68       	lsl	r8,0x8
80003e8e:	5c 88       	casts.h	r8
80003e90:	f5 e8 10 08 	or	r8,r10,r8
80003e94:	5c 88       	casts.h	r8
80003e96:	5c 78       	castu.h	r8
80003e98:	ee fa ff f4 	ld.w	r10,r7[-12]
80003e9c:	10 9b       	mov	r11,r8
80003e9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80003ea2:	f0 1f 00 04 	mcall	80003eb0 <flashc_memset8+0x4c>
80003ea6:	18 98       	mov	r8,r12
}
80003ea8:	10 9c       	mov	r12,r8
80003eaa:	2f cd       	sub	sp,-16
80003eac:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eb0:	80 00       	ld.sh	r0,r0[0x0]
80003eb2:	3e b4       	mov	r4,-21

80003eb4 <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, uint16_t src, size_t nbytes, bool erase)
{
80003eb4:	eb cd 40 80 	pushm	r7,lr
80003eb8:	1a 97       	mov	r7,sp
80003eba:	20 4d       	sub	sp,16
80003ebc:	ef 4c ff fc 	st.w	r7[-4],r12
80003ec0:	ef 4a ff f4 	st.w	r7[-12],r10
80003ec4:	12 98       	mov	r8,r9
80003ec6:	16 99       	mov	r9,r11
80003ec8:	ef 59 ff f8 	st.h	r7[-8],r9
80003ecc:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset32(dst, src | (uint32_t)src << 16, nbytes, erase);
80003ed0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003ed4:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80003ed8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003edc:	b1 68       	lsl	r8,0x10
80003ede:	f5 e8 10 08 	or	r8,r10,r8
80003ee2:	ee fa ff f4 	ld.w	r10,r7[-12]
80003ee6:	10 9b       	mov	r11,r8
80003ee8:	ee fc ff fc 	ld.w	r12,r7[-4]
80003eec:	f0 1f 00 04 	mcall	80003efc <flashc_memset16+0x48>
80003ef0:	18 98       	mov	r8,r12
}
80003ef2:	10 9c       	mov	r12,r8
80003ef4:	2f cd       	sub	sp,-16
80003ef6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003efa:	00 00       	add	r0,r0
80003efc:	80 00       	ld.sh	r0,r0[0x0]
80003efe:	3f 00       	mov	r0,-16

80003f00 <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, uint32_t src, size_t nbytes, bool erase)
{
80003f00:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80003f04:	1a 97       	mov	r7,sp
80003f06:	20 6d       	sub	sp,24
80003f08:	ef 4c ff fc 	st.w	r7[-4],r12
80003f0c:	ef 4b ff f8 	st.w	r7[-8],r11
80003f10:	ef 4a ff f4 	st.w	r7[-12],r10
80003f14:	12 98       	mov	r8,r9
80003f16:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
80003f1a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003f1e:	ee f0 ff f8 	ld.w	r0,r7[-8]
80003f22:	30 01       	mov	r1,0
80003f24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003f28:	ef 49 ff ec 	st.w	r7[-20],r9
80003f2c:	30 09       	mov	r9,0
80003f2e:	ef 49 ff e8 	st.w	r7[-24],r9
80003f32:	ee f3 ff ec 	ld.w	r3,r7[-20]
80003f36:	a1 63       	lsl	r3,0x0
80003f38:	30 02       	mov	r2,0
80003f3a:	e1 e2 10 0a 	or	r10,r0,r2
80003f3e:	e3 e3 10 0b 	or	r11,r1,r3
80003f42:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003f46:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f4a:	f0 1f 00 04 	mcall	80003f58 <flashc_memset32+0x58>
80003f4e:	18 98       	mov	r8,r12
}
80003f50:	10 9c       	mov	r12,r8
80003f52:	2f ad       	sub	sp,-24
80003f54:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80003f58:	80 00       	ld.sh	r0,r0[0x0]
80003f5a:	3f 5c       	mov	r12,-11

80003f5c <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80003f5c:	eb cd 40 80 	pushm	r7,lr
80003f60:	1a 97       	mov	r7,sp
80003f62:	21 bd       	sub	sp,108
80003f64:	ef 4c ff a4 	st.w	r7[-92],r12
80003f68:	ee eb ff 9c 	st.d	r7[-100],r10
80003f6c:	ef 49 ff 98 	st.w	r7[-104],r9
80003f70:	ef 68 ff 94 	st.b	r7[-108],r8
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
80003f74:	30 08       	mov	r8,0
80003f76:	30 09       	mov	r9,0
80003f78:	ee e9 ff d8 	st.d	r7[-40],r8
	StructCVPtr dest_end;
	UnionCVPtr flash_page_source_end;
	bool incomplete_flash_page_end;
	Union64 flash_dword;
	UnionVPtr tmp;
	unsigned int error_status = 0;
80003f7c:	30 08       	mov	r8,0
80003f7e:	ef 48 ff ec 	st.w	r7[-20],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80003f82:	f0 1f 00 fa 	mcall	80004368 <flashc_memset64+0x40c>
80003f86:	18 99       	mov	r9,r12
80003f88:	fc 18 80 00 	movh	r8,0x8000
80003f8c:	f2 08 00 08 	add	r8,r9,r8
80003f90:	ef 48 ff e4 	st.w	r7[-28],r8
	dest.u8ptr = dst;
80003f94:	ee f8 ff a4 	ld.w	r8,r7[-92]
80003f98:	ef 48 ff e0 	st.w	r7[-32],r8
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80003f9c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003fa0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003fa4:	20 18       	sub	r8,1
80003fa6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003faa:	ef 48 ff f0 	st.w	r7[-16],r8
80003fae:	c1 f8       	rjmp	80003fec <flashc_memset64+0x90>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
80003fb0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003fb4:	ef 38 ff a3 	ld.ub	r8,r7[-93]
80003fb8:	ee 09 00 09 	add	r9,r7,r9
80003fbc:	f3 68 ff d8 	st.b	r9[-40],r8
		src >>= 8;
80003fc0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80003fc4:	b9 68       	lsl	r8,0x18
80003fc6:	ee f9 ff a0 	ld.w	r9,r7[-96]
80003fca:	a9 89       	lsr	r9,0x8
80003fcc:	f3 e8 10 08 	or	r8,r9,r8
80003fd0:	ef 48 ff a0 	st.w	r7[-96],r8
80003fd4:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80003fd8:	a9 88       	lsr	r8,0x8
80003fda:	ef 48 ff 9c 	st.w	r7[-100],r8

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
80003fde:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003fe2:	20 18       	sub	r8,1
80003fe4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003fe8:	ef 48 ff f0 	st.w	r7[-16],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80003fec:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80003ff0:	58 08       	cp.w	r8,0
80003ff2:	5c 29       	cpc	r9
80003ff4:	cd e1       	brne	80003fb0 <flashc_memset64+0x54>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
80003ff6:	ee f9 ff e0 	ld.w	r9,r7[-32]
80003ffa:	ee f8 ff 98 	ld.w	r8,r7[-104]
80003ffe:	f2 08 00 08 	add	r8,r9,r8
80004002:	ef 48 ff d4 	st.w	r7[-44],r8

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
80004006:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000400a:	e0 69 ff ff 	mov	r9,65535
8000400e:	ea 19 7f ff 	orh	r9,0x7fff
80004012:	12 38       	cp.w	r8,r9
80004014:	e0 8b 00 07 	brhi	80004022 <flashc_memset64+0xc6>
		dest.u8ptr = AVR32_FLASH;
80004018:	fc 18 80 00 	movh	r8,0x8000
8000401c:	ef 48 ff e0 	st.w	r7[-32],r8
80004020:	c1 58       	rjmp	8000404a <flashc_memset64+0xee>
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
80004022:	ee f9 ff e4 	ld.w	r9,r7[-28]
80004026:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000402a:	10 39       	cp.w	r9,r8
8000402c:	e0 8b 00 0f 	brhi	8000404a <flashc_memset64+0xee>
80004030:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004034:	e0 69 ff ff 	mov	r9,65535
80004038:	ea 19 80 7f 	orh	r9,0x807f
8000403c:	12 38       	cp.w	r8,r9
8000403e:	e0 8b 00 06 	brhi	8000404a <flashc_memset64+0xee>
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80004042:	fc 18 80 80 	movh	r8,0x8080
80004046:	ef 48 ff e0 	st.w	r7[-32],r8
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
8000404a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000404e:	e0 69 02 00 	mov	r9,512
80004052:	ea 19 80 80 	orh	r9,0x8080
80004056:	12 38       	cp.w	r8,r9
80004058:	e0 88 00 09 	brls	8000406a <flashc_memset64+0x10e>
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
8000405c:	e0 68 02 00 	mov	r8,512
80004060:	ea 18 80 80 	orh	r8,0x8080
80004064:	ef 48 ff d4 	st.w	r7[-44],r8
80004068:	c1 38       	rjmp	8000408e <flashc_memset64+0x132>
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
8000406a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000406e:	fc 19 80 80 	movh	r9,0x8080
80004072:	12 38       	cp.w	r8,r9
80004074:	e0 8b 00 0d 	brhi	8000408e <flashc_memset64+0x132>
80004078:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000407c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004080:	10 39       	cp.w	r9,r8
80004082:	e0 88 00 06 	brls	8000408e <flashc_memset64+0x132>
		dest_end.u8ptr = flash_array_end.u8ptr;
80004086:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000408a:	ef 48 ff d4 	st.w	r7[-44],r8
	}

	// Align each end of destination pointer with its natural boundary.
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
8000408e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004092:	a1 c8       	cbr	r8,0x0
80004094:	ef 48 ff cc 	st.w	r7[-52],r8
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
80004098:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000409c:	e0 18 ff fc 	andl	r8,0xfffc
800040a0:	ef 48 ff c4 	st.w	r7[-60],r8
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));
800040a4:	ee f8 ff c4 	ld.w	r8,r7[-60]
800040a8:	e0 18 ff f8 	andl	r8,0xfff8
800040ac:	ef 48 ff bc 	st.w	r7[-68],r8

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
800040b0:	c4 b9       	rjmp	80004346 <flashc_memset64+0x3ea>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800040b2:	f0 1f 00 af 	mcall	8000436c <flashc_memset64+0x410>
		error_status |= flashc_error_status;
800040b6:	fe f8 02 ba 	ld.w	r8,pc[698]
800040ba:	70 08       	ld.w	r8,r8[0x0]
800040bc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800040c0:	f3 e8 10 08 	or	r8,r9,r8
800040c4:	ef 48 ff ec 	st.w	r7[-20],r8

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
800040c8:	ee f8 ff bc 	ld.w	r8,r7[-68]
800040cc:	ef 48 ff f8 	st.w	r7[-8],r8
800040d0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040d4:	e0 18 fe 00 	andl	r8,0xfe00
800040d8:	f0 c8 fe 00 	sub	r8,r8,-512
800040dc:	ef 48 ff fc 	st.w	r7[-4],r8
800040e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800040e8:	f0 09 0d 48 	min	r8,r8,r9
800040ec:	ef 48 ff f4 	st.w	r7[-12],r8
800040f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
800040f4:	ef 48 ff b4 	st.w	r7[-76],r8
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800040f8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040fc:	10 9a       	mov	r10,r8
800040fe:	e0 1a fe 00 	andl	r10,0xfe00
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
80004102:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004106:	10 99       	mov	r9,r8
80004108:	e0 19 fe 00 	andl	r9,0xfe00
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
8000410c:	30 18       	mov	r8,1
8000410e:	12 3a       	cp.w	r10,r9
80004110:	c0 22       	brcc	80004114 <flashc_memset64+0x1b8>
80004112:	30 08       	mov	r8,0
80004114:	ef 68 ff eb 	st.b	r7[-21],r8
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80004118:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000411c:	ee e9 ff ac 	st.d	r7[-84],r8

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80004120:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004124:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004128:	c5 b0       	breq	800041de <flashc_memset64+0x282>
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8000412a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000412e:	e0 18 fe 00 	andl	r8,0xfe00
80004132:	ef 48 ff a8 	st.w	r7[-88],r8
80004136:	c0 e8       	rjmp	80004152 <flashc_memset64+0x1f6>
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
80004138:	ee fa ff a8 	ld.w	r10,r7[-88]
8000413c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004140:	f0 e8 00 00 	ld.d	r8,r8[0]
80004144:	f4 e9 00 00 	st.d	r10[0],r8
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
80004148:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000414c:	2f 88       	sub	r8,-8
8000414e:	ef 48 ff a8 	st.w	r7[-88],r8
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80004152:	ee f9 ff a8 	ld.w	r9,r7[-88]
80004156:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000415a:	e0 18 ff f8 	andl	r8,0xfff8
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8000415e:	10 39       	cp.w	r9,r8
80004160:	ce c3       	brcs	80004138 <flashc_memset64+0x1dc>
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
80004162:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004166:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000416a:	c3 a0       	breq	800041de <flashc_memset64+0x282>
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
8000416c:	30 08       	mov	r8,0
8000416e:	ef 48 ff f0 	st.w	r7[-16],r8
80004172:	c1 38       	rjmp	80004198 <flashc_memset64+0x23c>
					flash_dword.u8[i] = *tmp.u8ptr++;
80004174:	ee fa ff f0 	ld.w	r10,r7[-16]
80004178:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000417c:	11 89       	ld.ub	r9,r8[0x0]
8000417e:	5c 59       	castu.b	r9
80004180:	ee 0a 00 0a 	add	r10,r7,r10
80004184:	f5 69 ff ac 	st.b	r10[-84],r9
80004188:	2f f8       	sub	r8,-1
8000418a:	ef 48 ff a8 	st.w	r7[-88],r8
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
8000418e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004192:	2f f8       	sub	r8,-1
80004194:	ef 48 ff f0 	st.w	r7[-16],r8
80004198:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000419c:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800041a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041a4:	10 39       	cp.w	r9,r8
800041a6:	fe 9b ff e7 	brhi	80004174 <flashc_memset64+0x218>
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
800041aa:	ee f8 ff e0 	ld.w	r8,r7[-32]
800041ae:	e0 18 ff f8 	andl	r8,0xfff8
800041b2:	ef 48 ff e0 	st.w	r7[-32],r8

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
800041b6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800041ba:	ee f8 ff bc 	ld.w	r8,r7[-68]
800041be:	10 39       	cp.w	r9,r8
800041c0:	c0 f2       	brcc	800041de <flashc_memset64+0x282>
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
800041c2:	ee fa ff e0 	ld.w	r10,r7[-32]
800041c6:	ee e8 ff ac 	ld.d	r8,r7[-84]
800041ca:	f4 e9 00 00 	st.d	r10[0],r8
800041ce:	f4 c8 ff f8 	sub	r8,r10,-8
800041d2:	ef 48 ff e0 	st.w	r7[-32],r8
					flash_dword.u64 = source.u64;
800041d6:	ee e8 ff d8 	ld.d	r8,r7[-40]
800041da:	ee e9 ff ac 	st.d	r7[-84],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
800041de:	ee f8 ff b4 	ld.w	r8,r7[-76]
800041e2:	10 99       	mov	r9,r8
800041e4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800041e8:	f2 08 01 08 	sub	r8,r9,r8
800041ec:	a3 58       	asr	r8,0x3
800041ee:	ef 48 ff f0 	st.w	r7[-16],r8
800041f2:	c1 08       	rjmp	80004212 <flashc_memset64+0x2b6>
			*dest.u64ptr++ = source.u64;
800041f4:	ee fa ff e0 	ld.w	r10,r7[-32]
800041f8:	ee e8 ff d8 	ld.d	r8,r7[-40]
800041fc:	f4 e9 00 00 	st.d	r10[0],r8
80004200:	f4 c8 ff f8 	sub	r8,r10,-8
80004204:	ef 48 ff e0 	st.w	r7[-32],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80004208:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000420c:	20 18       	sub	r8,1
8000420e:	ef 48 ff f0 	st.w	r7[-16],r8
80004212:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004216:	58 08       	cp.w	r8,0
80004218:	ce e1       	brne	800041f4 <flashc_memset64+0x298>
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
8000421a:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8000421e:	30 08       	mov	r8,0
80004220:	f0 09 18 00 	cp.b	r9,r8
80004224:	c4 70       	breq	800042b2 <flashc_memset64+0x356>
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
80004226:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000422a:	ef 48 ff a8 	st.w	r7[-88],r8

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
8000422e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004232:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004236:	c3 80       	breq	800042a6 <flashc_memset64+0x34a>
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80004238:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000423c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004240:	ef 48 ff f0 	st.w	r7[-16],r8
80004244:	c1 38       	rjmp	8000426a <flashc_memset64+0x30e>
						flash_dword.u8[i] = *tmp.u8ptr++;
80004246:	ee fa ff f0 	ld.w	r10,r7[-16]
8000424a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000424e:	11 89       	ld.ub	r9,r8[0x0]
80004250:	5c 59       	castu.b	r9
80004252:	ee 0a 00 0a 	add	r10,r7,r10
80004256:	f5 69 ff ac 	st.b	r10[-84],r9
8000425a:	2f f8       	sub	r8,-1
8000425c:	ef 48 ff a8 	st.w	r7[-88],r8
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80004260:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004264:	2f f8       	sub	r8,-1
80004266:	ef 48 ff f0 	st.w	r7[-16],r8
8000426a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000426e:	58 78       	cp.w	r8,7
80004270:	fe 98 ff eb 	brls	80004246 <flashc_memset64+0x2ea>
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
80004274:	ee fa ff e0 	ld.w	r10,r7[-32]
80004278:	ee e8 ff ac 	ld.d	r8,r7[-84]
8000427c:	f4 e9 00 00 	st.d	r10[0],r8
80004280:	f4 c8 ff f8 	sub	r8,r10,-8
80004284:	ef 48 ff e0 	st.w	r7[-32],r8
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80004288:	c1 08       	rjmp	800042a8 <flashc_memset64+0x34c>
					*tmp.u64ptr = *tmp.u64ptr;
8000428a:	ee fa ff a8 	ld.w	r10,r7[-88]
8000428e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004292:	f0 e8 00 00 	ld.d	r8,r8[0]
80004296:	f4 e9 00 00 	st.d	r10[0],r8
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
8000429a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000429e:	2f 88       	sub	r8,-8
800042a0:	ef 48 ff a8 	st.w	r7[-88],r8
800042a4:	c0 28       	rjmp	800042a8 <flashc_memset64+0x34c>
800042a6:	d7 03       	nop
800042a8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800042ac:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800042b0:	ce d1       	brne	8000428a <flashc_memset64+0x32e>
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
800042b2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800042b6:	fc 19 80 80 	movh	r9,0x8080
800042ba:	12 38       	cp.w	r8,r9
800042bc:	e0 8b 00 2a 	brhi	80004310 <flashc_memset64+0x3b4>
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
800042c0:	ef 39 ff 94 	ld.ub	r9,r7[-108]
800042c4:	30 08       	mov	r8,0
800042c6:	f0 09 18 00 	cp.b	r9,r8
800042ca:	c0 d0       	breq	800042e4 <flashc_memset64+0x388>
				flashc_erase_page(-1, false);
800042cc:	30 0b       	mov	r11,0
800042ce:	3f fc       	mov	r12,-1
800042d0:	f0 1f 00 29 	mcall	80004374 <flashc_memset64+0x418>
				error_status |= flashc_error_status;
800042d4:	4a 78       	lddpc	r8,80004370 <flashc_memset64+0x414>
800042d6:	70 08       	ld.w	r8,r8[0x0]
800042d8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800042dc:	f3 e8 10 08 	or	r8,r9,r8
800042e0:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_page(-1);
800042e4:	3f fc       	mov	r12,-1
800042e6:	f0 1f 00 25 	mcall	80004378 <flashc_memset64+0x41c>
			error_status |= flashc_error_status;
800042ea:	4a 28       	lddpc	r8,80004370 <flashc_memset64+0x414>
800042ec:	70 08       	ld.w	r8,r8[0x0]
800042ee:	ee f9 ff ec 	ld.w	r9,r7[-20]
800042f2:	f3 e8 10 08 	or	r8,r9,r8
800042f6:	ef 48 ff ec 	st.w	r7[-20],r8

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
800042fa:	ee f9 ff e0 	ld.w	r9,r7[-32]
800042fe:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004302:	10 39       	cp.w	r9,r8
80004304:	c2 13       	brcs	80004346 <flashc_memset64+0x3ea>
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80004306:	fc 18 80 80 	movh	r8,0x8080
8000430a:	ef 48 ff e0 	st.w	r7[-32],r8
8000430e:	c1 c8       	rjmp	80004346 <flashc_memset64+0x3ea>
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
80004310:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80004314:	30 08       	mov	r8,0
80004316:	f0 09 18 00 	cp.b	r9,r8
8000431a:	c0 c0       	breq	80004332 <flashc_memset64+0x3d6>
				flashc_erase_user_page(false);
8000431c:	30 0c       	mov	r12,0
8000431e:	f0 1f 00 18 	mcall	8000437c <flashc_memset64+0x420>
				error_status |= flashc_error_status;
80004322:	49 48       	lddpc	r8,80004370 <flashc_memset64+0x414>
80004324:	70 08       	ld.w	r8,r8[0x0]
80004326:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000432a:	f3 e8 10 08 	or	r8,r9,r8
8000432e:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_user_page();
80004332:	f0 1f 00 14 	mcall	80004380 <flashc_memset64+0x424>
			error_status |= flashc_error_status;
80004336:	48 f8       	lddpc	r8,80004370 <flashc_memset64+0x414>
80004338:	70 08       	ld.w	r8,r8[0x0]
8000433a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000433e:	f3 e8 10 08 	or	r8,r9,r8
80004342:	ef 48 ff ec 	st.w	r7[-20],r8
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
80004346:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000434a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000434e:	10 39       	cp.w	r9,r8
80004350:	fe 93 fe b1 	brlo	800040b2 <flashc_memset64+0x156>
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
80004354:	48 78       	lddpc	r8,80004370 <flashc_memset64+0x414>
80004356:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000435a:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memset function does.
	return dst;
8000435c:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
80004360:	10 9c       	mov	r12,r8
80004362:	2e 5d       	sub	sp,-108
80004364:	e3 cd 80 80 	ldm	sp++,r7,pc
80004368:	80 00       	ld.sh	r0,r0[0x0]
8000436a:	3b f0       	mov	r0,-65
8000436c:	80 00       	ld.sh	r0,r0[0x0]
8000436e:	3d 04       	mov	r4,-48
80004370:	00 00       	add	r0,r0
80004372:	05 c4       	ld.ub	r4,r2[0x4]
80004374:	80 00       	ld.sh	r0,r0[0x0]
80004376:	3d 64       	mov	r4,-42
80004378:	80 00       	ld.sh	r0,r0[0x0]
8000437a:	3d cc       	mov	r12,-36
8000437c:	80 00       	ld.sh	r0,r0[0x0]
8000437e:	3e 10       	mov	r0,-31
80004380:	80 00       	ld.sh	r0,r0[0x0]
80004382:	3e 4c       	mov	r12,-28

80004384 <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80004384:	eb cd 40 80 	pushm	r7,lr
80004388:	1a 97       	mov	r7,sp
8000438a:	20 bd       	sub	sp,44
8000438c:	ef 4c ff e0 	st.w	r7[-32],r12
80004390:	ef 4b ff dc 	st.w	r7[-36],r11
80004394:	ef 4a ff d8 	st.w	r7[-40],r10
80004398:	12 98       	mov	r8,r9
8000439a:	ef 68 ff d4 	st.b	r7[-44],r8
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
8000439e:	30 08       	mov	r8,0
800043a0:	ef 48 ff f0 	st.w	r7[-16],r8
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
800043a4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800043a8:	ef 48 ff f8 	st.w	r7[-8],r8
	const uint8_t* src_buf=(const uint8_t*)src;
800043ac:	ee f8 ff dc 	ld.w	r8,r7[-36]
800043b0:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
800043b4:	ee f9 ff e0 	ld.w	r9,r7[-32]
800043b8:	30 18       	mov	r8,1
800043ba:	e0 6a ff ff 	mov	r10,65535
800043be:	ea 1a 80 7f 	orh	r10,0x807f
800043c2:	14 39       	cp.w	r9,r10
800043c4:	e0 8b 00 03 	brhi	800043ca <flashc_memcpy+0x46>
800043c8:	30 08       	mov	r8,0
800043ca:	ef 68 ff ef 	st.b	r7[-17],r8

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
800043ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043d6:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800043da:	f2 08 01 08 	sub	r8,r9,r8
800043de:	ef 48 ff f4 	st.w	r7[-12],r8

	while (nbytes) {
800043e2:	c9 18       	rjmp	80004504 <flashc_memcpy+0x180>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800043e4:	f0 1f 00 50 	mcall	80004524 <flashc_memcpy+0x1a0>
		error_status |= flashc_error_status;
800043e8:	4d 08       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
800043ea:	70 08       	ld.w	r8,r8[0x0]
800043ec:	ee f9 ff f0 	ld.w	r9,r7[-16]
800043f0:	f3 e8 10 08 	or	r8,r9,r8
800043f4:	ef 48 ff f0 	st.w	r7[-16],r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
800043f8:	30 08       	mov	r8,0
800043fa:	ef 58 ff ec 	st.h	r7[-20],r8
800043fe:	c4 b8       	rjmp	80004494 <flashc_memcpy+0x110>
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
80004400:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004404:	f0 e8 00 00 	ld.d	r8,r8[0]
80004408:	ee e9 ff e4 	st.d	r7[-28],r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
8000440c:	30 08       	mov	r8,0
8000440e:	ef 68 ff ee 	st.b	r7[-18],r8
80004412:	c2 d8       	rjmp	8000446c <flashc_memcpy+0xe8>
				if (nbytes && (flash_add == dest_add)) {
80004414:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004418:	58 08       	cp.w	r8,0
8000441a:	c1 f0       	breq	80004458 <flashc_memcpy+0xd4>
8000441c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004424:	10 39       	cp.w	r9,r8
80004426:	c1 91       	brne	80004458 <flashc_memcpy+0xd4>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80004428:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000442c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004430:	11 88       	ld.ub	r8,r8[0x0]
80004432:	ee 09 00 09 	add	r9,r7,r9
80004436:	f3 68 ff e4 	st.b	r9[-28],r8
8000443a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000443e:	2f f8       	sub	r8,-1
80004440:	ef 48 ff fc 	st.w	r7[-4],r8
					dest_add++;
80004444:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004448:	2f f8       	sub	r8,-1
8000444a:	ef 48 ff f8 	st.w	r7[-8],r8
					nbytes--;
8000444e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004452:	20 18       	sub	r8,1
80004454:	ef 48 ff d8 	st.w	r7[-40],r8
				}
				flash_add++;
80004458:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000445c:	2f f8       	sub	r8,-1
8000445e:	ef 48 ff f4 	st.w	r7[-12],r8
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80004462:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004466:	2f f8       	sub	r8,-1
80004468:	ef 68 ff ee 	st.b	r7[-18],r8
8000446c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80004470:	30 78       	mov	r8,7
80004472:	f0 09 18 00 	cp.b	r9,r8
80004476:	fe 98 ff cf 	brls	80004414 <flashc_memcpy+0x90>
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
8000447a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000447e:	20 88       	sub	r8,8
80004480:	10 9a       	mov	r10,r8
80004482:	ee e8 ff e4 	ld.d	r8,r7[-28]
80004486:	f4 e9 00 00 	st.d	r10[0],r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
8000448a:	ef 08 ff ec 	ld.sh	r8,r7[-20]
8000448e:	2f 88       	sub	r8,-8
80004490:	ef 58 ff ec 	st.h	r7[-20],r8
80004494:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80004498:	e0 68 01 ff 	mov	r8,511
8000449c:	f0 09 19 00 	cp.h	r9,r8
800044a0:	fe 98 ff b0 	brls	80004400 <flashc_memcpy+0x7c>
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
800044a4:	ef 39 ff d4 	ld.ub	r9,r7[-44]
800044a8:	30 08       	mov	r8,0
800044aa:	f0 09 18 00 	cp.b	r9,r8
800044ae:	c1 70       	breq	800044dc <flashc_memcpy+0x158>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
800044b0:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800044b4:	30 08       	mov	r8,0
800044b6:	f0 09 18 00 	cp.b	r9,r8
800044ba:	c0 50       	breq	800044c4 <flashc_memcpy+0x140>
800044bc:	30 0c       	mov	r12,0
800044be:	f0 1f 00 1c 	mcall	8000452c <flashc_memcpy+0x1a8>
800044c2:	c0 58       	rjmp	800044cc <flashc_memcpy+0x148>
800044c4:	30 0b       	mov	r11,0
800044c6:	3f fc       	mov	r12,-1
800044c8:	f0 1f 00 1a 	mcall	80004530 <flashc_memcpy+0x1ac>
			error_status |= flashc_error_status;
800044cc:	49 78       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
800044ce:	70 08       	ld.w	r8,r8[0x0]
800044d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800044d4:	f3 e8 10 08 	or	r8,r9,r8
800044d8:	ef 48 ff f0 	st.w	r7[-16],r8
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
800044dc:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800044e0:	30 08       	mov	r8,0
800044e2:	f0 09 18 00 	cp.b	r9,r8
800044e6:	c0 40       	breq	800044ee <flashc_memcpy+0x16a>
800044e8:	f0 1f 00 13 	mcall	80004534 <flashc_memcpy+0x1b0>
800044ec:	c0 48       	rjmp	800044f4 <flashc_memcpy+0x170>
800044ee:	3f fc       	mov	r12,-1
800044f0:	f0 1f 00 12 	mcall	80004538 <flashc_memcpy+0x1b4>
		error_status |= flashc_error_status;
800044f4:	48 d8       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
800044f6:	70 08       	ld.w	r8,r8[0x0]
800044f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800044fc:	f3 e8 10 08 	or	r8,r9,r8
80004500:	ef 48 ff f0 	st.w	r7[-16],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80004504:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004508:	58 08       	cp.w	r8,0
8000450a:	fe 91 ff 6d 	brne	800043e4 <flashc_memcpy+0x60>
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
8000450e:	48 78       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
80004510:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004514:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
80004516:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
8000451a:	10 9c       	mov	r12,r8
8000451c:	2f 5d       	sub	sp,-44
8000451e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004522:	00 00       	add	r0,r0
80004524:	80 00       	ld.sh	r0,r0[0x0]
80004526:	3d 04       	mov	r4,-48
80004528:	00 00       	add	r0,r0
8000452a:	05 c4       	ld.ub	r4,r2[0x4]
8000452c:	80 00       	ld.sh	r0,r0[0x0]
8000452e:	3e 10       	mov	r0,-31
80004530:	80 00       	ld.sh	r0,r0[0x0]
80004532:	3d 64       	mov	r4,-42
80004534:	80 00       	ld.sh	r0,r0[0x0]
80004536:	3e 4c       	mov	r12,-28
80004538:	80 00       	ld.sh	r0,r0[0x0]
8000453a:	3d cc       	mov	r12,-36

8000453c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000453c:	eb cd 40 80 	pushm	r7,lr
80004540:	1a 97       	mov	r7,sp
80004542:	20 4d       	sub	sp,16
80004544:	ef 4c ff f4 	st.w	r7[-12],r12
80004548:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000454c:	30 08       	mov	r8,0
8000454e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
80004552:	30 08       	mov	r8,0
80004554:	ef 48 ff fc 	st.w	r7[-4],r8
80004558:	c1 c8       	rjmp	80004590 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000455a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000455e:	70 19       	ld.w	r9,r8[0x4]
80004560:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004564:	70 08       	ld.w	r8,r8[0x0]
80004566:	12 9b       	mov	r11,r9
80004568:	10 9c       	mov	r12,r8
8000456a:	f0 1f 00 10 	mcall	800045a8 <gpio_enable_module+0x6c>
8000456e:	18 98       	mov	r8,r12
80004570:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004574:	f3 e8 10 08 	or	r8,r9,r8
80004578:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
8000457c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004580:	2f 88       	sub	r8,-8
80004582:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80004586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000458a:	2f f8       	sub	r8,-1
8000458c:	ef 48 ff fc 	st.w	r7[-4],r8
80004590:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004594:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004598:	10 39       	cp.w	r9,r8
8000459a:	ce 03       	brcs	8000455a <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
8000459c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800045a0:	10 9c       	mov	r12,r8
800045a2:	2f cd       	sub	sp,-16
800045a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800045a8:	80 00       	ld.sh	r0,r0[0x0]
800045aa:	45 ac       	lddsp	r12,sp[0x168]

800045ac <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800045ac:	eb cd 40 80 	pushm	r7,lr
800045b0:	1a 97       	mov	r7,sp
800045b2:	20 3d       	sub	sp,12
800045b4:	ef 4c ff f8 	st.w	r7[-8],r12
800045b8:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800045bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045c0:	a5 98       	lsr	r8,0x5
800045c2:	a9 78       	lsl	r8,0x9
800045c4:	e0 28 e0 00 	sub	r8,57344
800045c8:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
800045cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800045d0:	58 78       	cp.w	r8,7
800045d2:	e0 8b 01 16 	brhi	800047fe <gpio_enable_module_pin+0x252>
800045d6:	fe f9 02 4e 	ld.w	r9,pc[590]
800045da:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800045de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045e6:	30 19       	mov	r9,1
800045e8:	f2 08 09 48 	lsl	r8,r9,r8
800045ec:	10 99       	mov	r9,r8
800045ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045f2:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800045f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045fc:	30 19       	mov	r9,1
800045fe:	f2 08 09 48 	lsl	r8,r9,r8
80004602:	10 99       	mov	r9,r8
80004604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004608:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000460a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000460e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004612:	30 19       	mov	r9,1
80004614:	f2 08 09 48 	lsl	r8,r9,r8
80004618:	10 99       	mov	r9,r8
8000461a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000461e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004620:	cf 18       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004626:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000462a:	30 19       	mov	r9,1
8000462c:	f2 08 09 48 	lsl	r8,r9,r8
80004630:	10 99       	mov	r9,r8
80004632:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004636:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004638:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000463c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004640:	30 19       	mov	r9,1
80004642:	f2 08 09 48 	lsl	r8,r9,r8
80004646:	10 99       	mov	r9,r8
80004648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000464c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000464e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004652:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004656:	30 19       	mov	r9,1
80004658:	f2 08 09 48 	lsl	r8,r9,r8
8000465c:	10 99       	mov	r9,r8
8000465e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004662:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004664:	cc f8       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000466a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000466e:	30 19       	mov	r9,1
80004670:	f2 08 09 48 	lsl	r8,r9,r8
80004674:	10 99       	mov	r9,r8
80004676:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000467a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000467c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004680:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004684:	30 19       	mov	r9,1
80004686:	f2 08 09 48 	lsl	r8,r9,r8
8000468a:	10 99       	mov	r9,r8
8000468c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004690:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80004692:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004696:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000469a:	30 19       	mov	r9,1
8000469c:	f2 08 09 48 	lsl	r8,r9,r8
800046a0:	10 99       	mov	r9,r8
800046a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046a6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800046a8:	ca d8       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800046aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046b2:	30 19       	mov	r9,1
800046b4:	f2 08 09 48 	lsl	r8,r9,r8
800046b8:	10 99       	mov	r9,r8
800046ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046be:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800046c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046c8:	30 19       	mov	r9,1
800046ca:	f2 08 09 48 	lsl	r8,r9,r8
800046ce:	10 99       	mov	r9,r8
800046d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046d4:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800046d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046de:	30 19       	mov	r9,1
800046e0:	f2 08 09 48 	lsl	r8,r9,r8
800046e4:	10 99       	mov	r9,r8
800046e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046ea:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800046ec:	c8 b8       	rjmp	80004802 <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800046ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046f6:	30 19       	mov	r9,1
800046f8:	f2 08 09 48 	lsl	r8,r9,r8
800046fc:	10 99       	mov	r9,r8
800046fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004702:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004708:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000470c:	30 19       	mov	r9,1
8000470e:	f2 08 09 48 	lsl	r8,r9,r8
80004712:	10 99       	mov	r9,r8
80004714:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004718:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000471a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000471e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004722:	30 19       	mov	r9,1
80004724:	f2 08 09 48 	lsl	r8,r9,r8
80004728:	10 99       	mov	r9,r8
8000472a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000472e:	91 d9       	st.w	r8[0x34],r9
		break;
80004730:	c6 98       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004736:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000473a:	30 19       	mov	r9,1
8000473c:	f2 08 09 48 	lsl	r8,r9,r8
80004740:	10 99       	mov	r9,r8
80004742:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004746:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004748:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000474c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004750:	30 19       	mov	r9,1
80004752:	f2 08 09 48 	lsl	r8,r9,r8
80004756:	10 99       	mov	r9,r8
80004758:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000475c:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000475e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004762:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004766:	30 19       	mov	r9,1
80004768:	f2 08 09 48 	lsl	r8,r9,r8
8000476c:	10 99       	mov	r9,r8
8000476e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004772:	91 d9       	st.w	r8[0x34],r9
		break;
80004774:	c4 78       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000477a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000477e:	30 19       	mov	r9,1
80004780:	f2 08 09 48 	lsl	r8,r9,r8
80004784:	10 99       	mov	r9,r8
80004786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000478a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000478c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004790:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004794:	30 19       	mov	r9,1
80004796:	f2 08 09 48 	lsl	r8,r9,r8
8000479a:	10 99       	mov	r9,r8
8000479c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047a0:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800047a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047aa:	30 19       	mov	r9,1
800047ac:	f2 08 09 48 	lsl	r8,r9,r8
800047b0:	10 99       	mov	r9,r8
800047b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047b6:	91 d9       	st.w	r8[0x34],r9
		break;
800047b8:	c2 58       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800047ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047c2:	30 19       	mov	r9,1
800047c4:	f2 08 09 48 	lsl	r8,r9,r8
800047c8:	10 99       	mov	r9,r8
800047ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047ce:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800047d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047d8:	30 19       	mov	r9,1
800047da:	f2 08 09 48 	lsl	r8,r9,r8
800047de:	10 99       	mov	r9,r8
800047e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047e4:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800047e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047ee:	30 19       	mov	r9,1
800047f0:	f2 08 09 48 	lsl	r8,r9,r8
800047f4:	10 99       	mov	r9,r8
800047f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047fa:	91 d9       	st.w	r8[0x34],r9
		break;
800047fc:	c0 38       	rjmp	80004802 <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
800047fe:	30 18       	mov	r8,1
80004800:	c0 d8       	rjmp	8000481a <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80004802:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004806:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000480a:	30 19       	mov	r9,1
8000480c:	f2 08 09 48 	lsl	r8,r9,r8
80004810:	10 99       	mov	r9,r8
80004812:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004816:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80004818:	30 08       	mov	r8,0
}
8000481a:	10 9c       	mov	r12,r8
8000481c:	2f dd       	sub	sp,-12
8000481e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004822:	00 00       	add	r0,r0
80004824:	80 01       	ld.sh	r1,r0[0x0]
80004826:	22 40       	sub	r0,36

80004828 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80004828:	eb cd 40 80 	pushm	r7,lr
8000482c:	1a 97       	mov	r7,sp
8000482e:	20 3d       	sub	sp,12
80004830:	ef 4c ff f8 	st.w	r7[-8],r12
80004834:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000483c:	a5 98       	lsr	r8,0x5
8000483e:	a9 78       	lsl	r8,0x9
80004840:	e0 28 e0 00 	sub	r8,57344
80004844:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
80004848:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000484c:	e2 18 00 08 	andl	r8,0x8,COH
80004850:	c0 e0       	breq	8000486c <gpio_configure_pin+0x44>
		gpio_port->pders = 1 << (pin & 0x1F);
80004852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004856:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000485a:	30 19       	mov	r9,1
8000485c:	f2 08 09 48 	lsl	r8,r9,r8
80004860:	10 99       	mov	r9,r8
80004862:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004866:	f1 49 00 84 	st.w	r8[132],r9
8000486a:	c0 d8       	rjmp	80004884 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
8000486c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004870:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004874:	30 19       	mov	r9,1
80004876:	f2 08 09 48 	lsl	r8,r9,r8
8000487a:	10 99       	mov	r9,r8
8000487c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004880:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
80004884:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004888:	e2 18 00 04 	andl	r8,0x4,COH
8000488c:	c0 e0       	breq	800048a8 <gpio_configure_pin+0x80>
		gpio_port->puers = 1 << (pin & 0x1F);
8000488e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004892:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004896:	30 19       	mov	r9,1
80004898:	f2 08 09 48 	lsl	r8,r9,r8
8000489c:	10 99       	mov	r9,r8
8000489e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048a2:	f1 49 00 74 	st.w	r8[116],r9
800048a6:	c0 d8       	rjmp	800048c0 <gpio_configure_pin+0x98>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800048a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048b0:	30 19       	mov	r9,1
800048b2:	f2 08 09 48 	lsl	r8,r9,r8
800048b6:	10 99       	mov	r9,r8
800048b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048bc:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
800048c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048c4:	e2 18 00 40 	andl	r8,0x40,COH
800048c8:	c0 e0       	breq	800048e4 <gpio_configure_pin+0xbc>
		gpio_port->odmers = 1 << (pin & 0x1F);
800048ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048d2:	30 19       	mov	r9,1
800048d4:	f2 08 09 48 	lsl	r8,r9,r8
800048d8:	10 99       	mov	r9,r8
800048da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048de:	f1 49 00 e4 	st.w	r8[228],r9
800048e2:	c0 d8       	rjmp	800048fc <gpio_configure_pin+0xd4>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
800048e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048ec:	30 19       	mov	r9,1
800048ee:	f2 08 09 48 	lsl	r8,r9,r8
800048f2:	10 99       	mov	r9,r8
800048f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048f8:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
800048fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004900:	e2 18 00 10 	andl	r8,0x10,COH
80004904:	c0 e0       	breq	80004920 <gpio_configure_pin+0xf8>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
80004906:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000490a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000490e:	30 19       	mov	r9,1
80004910:	f2 08 09 48 	lsl	r8,r9,r8
80004914:	10 99       	mov	r9,r8
80004916:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000491a:	f1 49 01 04 	st.w	r8[260],r9
8000491e:	c0 d8       	rjmp	80004938 <gpio_configure_pin+0x110>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
80004920:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004924:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004928:	30 19       	mov	r9,1
8000492a:	f2 08 09 48 	lsl	r8,r9,r8
8000492e:	10 99       	mov	r9,r8
80004930:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004934:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
80004938:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000493c:	e2 18 00 20 	andl	r8,0x20,COH
80004940:	c0 e0       	breq	8000495c <gpio_configure_pin+0x134>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
80004942:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004946:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000494a:	30 19       	mov	r9,1
8000494c:	f2 08 09 48 	lsl	r8,r9,r8
80004950:	10 99       	mov	r9,r8
80004952:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004956:	f1 49 01 14 	st.w	r8[276],r9
8000495a:	c0 d8       	rjmp	80004974 <gpio_configure_pin+0x14c>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
8000495c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004960:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004964:	30 19       	mov	r9,1
80004966:	f2 08 09 48 	lsl	r8,r9,r8
8000496a:	10 99       	mov	r9,r8
8000496c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004970:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80004974:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004978:	e2 18 00 80 	andl	r8,0x80,COH
8000497c:	c5 a0       	breq	80004a30 <gpio_configure_pin+0x208>
		if (flags & GPIO_BOTHEDGES) {
8000497e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004982:	e2 18 01 80 	andl	r8,0x180,COH
80004986:	c1 a0       	breq	800049ba <gpio_configure_pin+0x192>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000498c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004990:	30 19       	mov	r9,1
80004992:	f2 08 09 48 	lsl	r8,r9,r8
80004996:	10 99       	mov	r9,r8
80004998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000499c:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800049a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049a8:	30 19       	mov	r9,1
800049aa:	f2 08 09 48 	lsl	r8,r9,r8
800049ae:	10 99       	mov	r9,r8
800049b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049b4:	f1 49 00 b8 	st.w	r8[184],r9
800049b8:	c3 c8       	rjmp	80004a30 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_RISING) {
800049ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049be:	e2 18 02 80 	andl	r8,0x280,COH
800049c2:	c1 a0       	breq	800049f6 <gpio_configure_pin+0x1ce>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800049c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049cc:	30 19       	mov	r9,1
800049ce:	f2 08 09 48 	lsl	r8,r9,r8
800049d2:	10 99       	mov	r9,r8
800049d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049d8:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800049dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049e4:	30 19       	mov	r9,1
800049e6:	f2 08 09 48 	lsl	r8,r9,r8
800049ea:	10 99       	mov	r9,r8
800049ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049f0:	f1 49 00 b8 	st.w	r8[184],r9
800049f4:	c1 e8       	rjmp	80004a30 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_FALLING) {
800049f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049fa:	e2 18 03 80 	andl	r8,0x380,COH
800049fe:	c1 90       	breq	80004a30 <gpio_configure_pin+0x208>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004a00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a04:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a08:	30 19       	mov	r9,1
80004a0a:	f2 08 09 48 	lsl	r8,r9,r8
80004a0e:	10 99       	mov	r9,r8
80004a10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a14:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80004a18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a1c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a20:	30 19       	mov	r9,1
80004a22:	f2 08 09 48 	lsl	r8,r9,r8
80004a26:	10 99       	mov	r9,r8
80004a28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a2c:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80004a30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a34:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004a38:	5c 58       	castu.b	r8
80004a3a:	c2 c0       	breq	80004a92 <gpio_configure_pin+0x26a>
		if (flags & GPIO_INIT_HIGH) {
80004a3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a40:	e2 18 00 02 	andl	r8,0x2,COH
80004a44:	c0 e0       	breq	80004a60 <gpio_configure_pin+0x238>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80004a46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a4e:	30 19       	mov	r9,1
80004a50:	f2 08 09 48 	lsl	r8,r9,r8
80004a54:	10 99       	mov	r9,r8
80004a56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a5a:	f1 49 00 54 	st.w	r8[84],r9
80004a5e:	c0 d8       	rjmp	80004a78 <gpio_configure_pin+0x250>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80004a60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a64:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a68:	30 19       	mov	r9,1
80004a6a:	f2 08 09 48 	lsl	r8,r9,r8
80004a6e:	10 99       	mov	r9,r8
80004a70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a74:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80004a78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a7c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a80:	30 19       	mov	r9,1
80004a82:	f2 08 09 48 	lsl	r8,r9,r8
80004a86:	10 99       	mov	r9,r8
80004a88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a8c:	f1 49 00 44 	st.w	r8[68],r9
80004a90:	c0 d8       	rjmp	80004aaa <gpio_configure_pin+0x282>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80004a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a9a:	30 19       	mov	r9,1
80004a9c:	f2 08 09 48 	lsl	r8,r9,r8
80004aa0:	10 99       	mov	r9,r8
80004aa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004aa6:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004aaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004ab2:	30 19       	mov	r9,1
80004ab4:	f2 08 09 48 	lsl	r8,r9,r8
80004ab8:	10 99       	mov	r9,r8
80004aba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004abe:	91 19       	st.w	r8[0x4],r9
}
80004ac0:	2f dd       	sub	sp,-12
80004ac2:	e3 cd 80 80 	ldm	sp++,r7,pc

80004ac6 <gpio_get_pin_value>:
 * \param pin The pin number.
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
80004ac6:	eb cd 40 80 	pushm	r7,lr
80004aca:	1a 97       	mov	r7,sp
80004acc:	20 2d       	sub	sp,8
80004ace:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004ad2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ad6:	a5 98       	lsr	r8,0x5
80004ad8:	a9 78       	lsl	r8,0x9
80004ada:	e0 28 e0 00 	sub	r8,57344
80004ade:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80004ae2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ae6:	71 89       	ld.w	r9,r8[0x60]
80004ae8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004af0:	f2 08 0a 48 	lsr	r8,r9,r8
80004af4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004af8:	5c 58       	castu.b	r8
}
80004afa:	10 9c       	mov	r12,r8
80004afc:	2f ed       	sub	sp,-8
80004afe:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b02 <gpio_set_pin_high>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
80004b02:	eb cd 40 80 	pushm	r7,lr
80004b06:	1a 97       	mov	r7,sp
80004b08:	20 2d       	sub	sp,8
80004b0a:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b12:	a5 98       	lsr	r8,0x5
80004b14:	a9 78       	lsl	r8,0x9
80004b16:	e0 28 e0 00 	sub	r8,57344
80004b1a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80004b1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b22:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b26:	30 19       	mov	r9,1
80004b28:	f2 08 09 48 	lsl	r8,r9,r8
80004b2c:	10 99       	mov	r9,r8
80004b2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b32:	f1 49 00 54 	st.w	r8[84],r9
}
80004b36:	2f ed       	sub	sp,-8
80004b38:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b3c <gpio_set_pin_low>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
80004b3c:	eb cd 40 80 	pushm	r7,lr
80004b40:	1a 97       	mov	r7,sp
80004b42:	20 2d       	sub	sp,8
80004b44:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b4c:	a5 98       	lsr	r8,0x5
80004b4e:	a9 78       	lsl	r8,0x9
80004b50:	e0 28 e0 00 	sub	r8,57344
80004b54:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b5c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b60:	30 19       	mov	r9,1
80004b62:	f2 08 09 48 	lsl	r8,r9,r8
80004b66:	10 99       	mov	r9,r8
80004b68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b6c:	f1 49 00 58 	st.w	r8[88],r9
}
80004b70:	2f ed       	sub	sp,-8
80004b72:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b76 <gpio_toggle_pin>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
80004b76:	eb cd 40 80 	pushm	r7,lr
80004b7a:	1a 97       	mov	r7,sp
80004b7c:	20 2d       	sub	sp,8
80004b7e:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b86:	a5 98       	lsr	r8,0x5
80004b88:	a9 78       	lsl	r8,0x9
80004b8a:	e0 28 e0 00 	sub	r8,57344
80004b8e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80004b92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b9a:	30 19       	mov	r9,1
80004b9c:	f2 08 09 48 	lsl	r8,r9,r8
80004ba0:	10 99       	mov	r9,r8
80004ba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ba6:	f1 49 00 5c 	st.w	r8[92],r9
}
80004baa:	2f ed       	sub	sp,-8
80004bac:	e3 cd 80 80 	ldm	sp++,r7,pc

80004bb0 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80004bb0:	eb cd 40 80 	pushm	r7,lr
80004bb4:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80004bb6:	c0 08       	rjmp	80004bb6 <_unhandled_interrupt+0x6>

80004bb8 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80004bb8:	eb cd 40 80 	pushm	r7,lr
80004bbc:	1a 97       	mov	r7,sp
80004bbe:	20 3d       	sub	sp,12
80004bc0:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80004bc4:	fe 78 00 00 	mov	r8,-65536
80004bc8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004bcc:	f2 09 11 03 	rsub	r9,r9,3
80004bd0:	28 09       	sub	r9,-128
80004bd2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004bd6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80004bda:	fe 78 00 00 	mov	r8,-65536
80004bde:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004be2:	2c 09       	sub	r9,-64
80004be4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004be8:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004bec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bf0:	58 08       	cp.w	r8,0
80004bf2:	c1 30       	breq	80004c18 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004bf4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bf8:	48 b8       	lddpc	r8,80004c24 <_get_interrupt_handler+0x6c>
80004bfa:	a1 79       	lsl	r9,0x1
80004bfc:	2f f9       	sub	r9,-1
80004bfe:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c06:	f0 08 12 00 	clz	r8,r8
80004c0a:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80004c0e:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004c10:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004c14:	70 08       	ld.w	r8,r8[0x0]
80004c16:	c0 28       	rjmp	80004c1a <_get_interrupt_handler+0x62>
80004c18:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80004c1a:	10 9c       	mov	r12,r8
80004c1c:	2f dd       	sub	sp,-12
80004c1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c22:	00 00       	add	r0,r0
80004c24:	80 01       	ld.sh	r1,r0[0x0]
80004c26:	22 60       	sub	r0,38

80004c28 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80004c28:	eb cd 40 80 	pushm	r7,lr
80004c2c:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004c2e:	48 38       	lddpc	r8,80004c38 <INTC_init_evba+0x10>
80004c30:	e3 b8 00 01 	mtsr	0x4,r8
}
80004c34:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c38:	80 01       	ld.sh	r1,r0[0x0]
80004c3a:	20 00       	sub	r0,0

80004c3c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80004c3c:	eb cd 40 80 	pushm	r7,lr
80004c40:	1a 97       	mov	r7,sp
80004c42:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80004c44:	f0 1f 00 20 	mcall	80004cc4 <INTC_init_interrupts+0x88>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004c48:	30 08       	mov	r8,0
80004c4a:	ef 48 ff f8 	st.w	r7[-8],r8
80004c4e:	c3 18       	rjmp	80004cb0 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004c50:	30 08       	mov	r8,0
80004c52:	ef 48 ff fc 	st.w	r7[-4],r8
80004c56:	c1 48       	rjmp	80004c7e <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80004c58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c5c:	49 b8       	lddpc	r8,80004cc8 <INTC_init_interrupts+0x8c>
80004c5e:	a1 79       	lsl	r9,0x1
80004c60:	2f f9       	sub	r9,-1
80004c62:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004c66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c6a:	a3 68       	lsl	r8,0x2
80004c6c:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004c70:	49 79       	lddpc	r9,80004ccc <INTC_init_interrupts+0x90>
80004c72:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004c74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c78:	2f f8       	sub	r8,-1
80004c7a:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80004c7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c82:	49 28       	lddpc	r8,80004cc8 <INTC_init_interrupts+0x8c>
80004c84:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004c88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c8c:	10 39       	cp.w	r9,r8
80004c8e:	fe 9b ff e5 	brhi	80004c58 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004c92:	fe 78 00 00 	mov	r8,-65536
80004c96:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c9a:	48 eb       	lddpc	r11,80004cd0 <INTC_init_interrupts+0x94>
80004c9c:	48 ea       	lddpc	r10,80004cd4 <INTC_init_interrupts+0x98>
80004c9e:	f6 0a 01 0a 	sub	r10,r11,r10
80004ca2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004ca6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004caa:	2f f8       	sub	r8,-1
80004cac:	ef 48 ff f8 	st.w	r7[-8],r8
80004cb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004cb4:	e0 48 00 2e 	cp.w	r8,46
80004cb8:	fe 98 ff cc 	brls	80004c50 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80004cbc:	2f ed       	sub	sp,-8
80004cbe:	e3 cd 80 80 	ldm	sp++,r7,pc
80004cc2:	00 00       	add	r0,r0
80004cc4:	80 00       	ld.sh	r0,r0[0x0]
80004cc6:	4c 28       	lddpc	r8,80004dcc <cpu_irq_is_enabled_flags+0x2>
80004cc8:	80 01       	ld.sh	r1,r0[0x0]
80004cca:	22 60       	sub	r0,38
80004ccc:	80 00       	ld.sh	r0,r0[0x0]
80004cce:	4b b0       	lddpc	r0,80004db8 <cpu_irq_save+0xc>
80004cd0:	80 01       	ld.sh	r1,r0[0x0]
80004cd2:	21 04       	sub	r4,16
80004cd4:	80 01       	ld.sh	r1,r0[0x0]
80004cd6:	20 00       	sub	r0,0

80004cd8 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80004cd8:	eb cd 40 80 	pushm	r7,lr
80004cdc:	1a 97       	mov	r7,sp
80004cde:	20 4d       	sub	sp,16
80004ce0:	ef 4c ff f8 	st.w	r7[-8],r12
80004ce4:	ef 4b ff f4 	st.w	r7[-12],r11
80004ce8:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80004cec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004cf0:	a5 98       	lsr	r8,0x5
80004cf2:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80004cf6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004cfa:	4a 78       	lddpc	r8,80004d94 <INTC_register_interrupt+0xbc>
80004cfc:	a1 79       	lsl	r9,0x1
80004cfe:	2f f9       	sub	r9,-1
80004d00:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004d04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004d08:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004d0c:	a3 68       	lsl	r8,0x2
80004d0e:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80004d12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004d16:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80004d18:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d1c:	58 08       	cp.w	r8,0
80004d1e:	c0 c1       	brne	80004d36 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004d20:	fe 78 00 00 	mov	r8,-65536
80004d24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d28:	49 cb       	lddpc	r11,80004d98 <INTC_register_interrupt+0xc0>
80004d2a:	49 da       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d2c:	f6 0a 01 0a 	sub	r10,r11,r10
80004d30:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004d34:	c2 d8       	rjmp	80004d8e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80004d36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d3a:	58 18       	cp.w	r8,1
80004d3c:	c0 d1       	brne	80004d56 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004d3e:	fe 78 00 00 	mov	r8,-65536
80004d42:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d46:	49 7b       	lddpc	r11,80004da0 <INTC_register_interrupt+0xc8>
80004d48:	49 5a       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d4a:	f6 0a 01 0a 	sub	r10,r11,r10
80004d4e:	bf aa       	sbr	r10,0x1e
80004d50:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004d54:	c1 d8       	rjmp	80004d8e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80004d56:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d5a:	58 28       	cp.w	r8,2
80004d5c:	c0 d1       	brne	80004d76 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80004d5e:	fe 78 00 00 	mov	r8,-65536
80004d62:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d66:	49 0b       	lddpc	r11,80004da4 <INTC_register_interrupt+0xcc>
80004d68:	48 da       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d6a:	f6 0a 01 0a 	sub	r10,r11,r10
80004d6e:	bf ba       	sbr	r10,0x1f
80004d70:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004d74:	c0 d8       	rjmp	80004d8e <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004d76:	fe 78 00 00 	mov	r8,-65536
80004d7a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d7e:	48 bb       	lddpc	r11,80004da8 <INTC_register_interrupt+0xd0>
80004d80:	48 7a       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d82:	f6 0a 01 0a 	sub	r10,r11,r10
80004d86:	ea 1a c0 00 	orh	r10,0xc000
80004d8a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80004d8e:	2f cd       	sub	sp,-16
80004d90:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d94:	80 01       	ld.sh	r1,r0[0x0]
80004d96:	22 60       	sub	r0,38
80004d98:	80 01       	ld.sh	r1,r0[0x0]
80004d9a:	21 04       	sub	r4,16
80004d9c:	80 01       	ld.sh	r1,r0[0x0]
80004d9e:	20 00       	sub	r0,0
80004da0:	80 01       	ld.sh	r1,r0[0x0]
80004da2:	21 12       	sub	r2,17
80004da4:	80 01       	ld.sh	r1,r0[0x0]
80004da6:	21 20       	sub	r0,18
80004da8:	80 01       	ld.sh	r1,r0[0x0]
80004daa:	21 2e       	sub	lr,18

80004dac <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80004dac:	eb cd 40 80 	pushm	r7,lr
80004db0:	1a 97       	mov	r7,sp
80004db2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004db4:	e1 b8 00 00 	mfsr	r8,0x0
80004db8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80004dbc:	d3 03       	ssrf	0x10

	return flags;
80004dbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80004dc2:	10 9c       	mov	r12,r8
80004dc4:	2f fd       	sub	sp,-4
80004dc6:	e3 cd 80 80 	ldm	sp++,r7,pc

80004dca <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004dca:	eb cd 40 80 	pushm	r7,lr
80004dce:	1a 97       	mov	r7,sp
80004dd0:	20 1d       	sub	sp,4
80004dd2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004dd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dda:	e6 18 00 01 	andh	r8,0x1,COH
80004dde:	5f 08       	sreq	r8
80004de0:	5c 58       	castu.b	r8
}
80004de2:	10 9c       	mov	r12,r8
80004de4:	2f fd       	sub	sp,-4
80004de6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004dea:	d7 03       	nop

80004dec <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80004dec:	eb cd 40 80 	pushm	r7,lr
80004df0:	1a 97       	mov	r7,sp
80004df2:	20 1d       	sub	sp,4
80004df4:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004df8:	ee fc ff fc 	ld.w	r12,r7[-4]
80004dfc:	f0 1f 00 05 	mcall	80004e10 <cpu_irq_restore+0x24>
80004e00:	18 98       	mov	r8,r12
80004e02:	58 08       	cp.w	r8,0
80004e04:	c0 20       	breq	80004e08 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80004e06:	d5 03       	csrf	0x10
   }

	barrier();
}
80004e08:	2f fd       	sub	sp,-4
80004e0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e0e:	00 00       	add	r0,r0
80004e10:	80 00       	ld.sh	r0,r0[0x0]
80004e12:	4d ca       	lddpc	r10,80004f80 <twim_set_speed+0x28>

80004e14 <twim_master_interrupt_handler>:
/**
 * \internal
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80004e14:	eb cd 40 80 	pushm	r7,lr
80004e18:	1a 97       	mov	r7,sp
80004e1a:	20 1d       	sub	sp,4
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80004e1c:	4c 68       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e1e:	70 08       	ld.w	r8,r8[0x0]
80004e20:	70 79       	ld.w	r9,r8[0x1c]
80004e22:	4c 68       	lddpc	r8,80004f38 <twim_master_interrupt_handler+0x124>
80004e24:	70 08       	ld.w	r8,r8[0x0]
80004e26:	f3 e8 00 08 	and	r8,r9,r8
80004e2a:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80004e2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e32:	e2 18 07 00 	andl	r8,0x700,COH
80004e36:	c1 e0       	breq	80004e72 <twim_master_interrupt_handler+0x5e>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80004e38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e3c:	e2 18 03 00 	andl	r8,0x300,COH
80004e40:	c0 30       	breq	80004e46 <twim_master_interrupt_handler+0x32>
80004e42:	3f c8       	mov	r8,-4
80004e44:	c0 28       	rjmp	80004e48 <twim_master_interrupt_handler+0x34>
80004e46:	3f e8       	mov	r8,-2
80004e48:	4b d9       	lddpc	r9,80004f3c <twim_master_interrupt_handler+0x128>
80004e4a:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80004e4c:	4b a8       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e4e:	70 09       	ld.w	r9,r8[0x0]
80004e50:	72 38       	ld.w	r8,r9[0xc]
80004e52:	30 0a       	mov	r10,0
80004e54:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80004e58:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80004e5a:	4b 78       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e5c:	70 08       	ld.w	r8,r8[0x0]
80004e5e:	3f f9       	mov	r9,-1
80004e60:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80004e62:	4b 58       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e64:	70 08       	ld.w	r8,r8[0x0]
80004e66:	3f f9       	mov	r9,-1
80004e68:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80004e6a:	4b 69       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004e6c:	30 08       	mov	r8,0
80004e6e:	b2 88       	st.b	r9[0x0],r8
80004e70:	c5 e8       	rjmp	80004f2c <twim_master_interrupt_handler+0x118>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80004e72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e76:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004e7a:	5c 58       	castu.b	r8
80004e7c:	c2 00       	breq	80004ebc <twim_master_interrupt_handler+0xa8>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80004e7e:	4b 28       	lddpc	r8,80004f44 <twim_master_interrupt_handler+0x130>
80004e80:	70 09       	ld.w	r9,r8[0x0]
80004e82:	4a d8       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e84:	70 08       	ld.w	r8,r8[0x0]
80004e86:	70 58       	ld.w	r8,r8[0x14]
80004e88:	5c 58       	castu.b	r8
80004e8a:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80004e8c:	4a e8       	lddpc	r8,80004f44 <twim_master_interrupt_handler+0x130>
80004e8e:	70 08       	ld.w	r8,r8[0x0]
80004e90:	f0 c9 ff ff 	sub	r9,r8,-1
80004e94:	4a c8       	lddpc	r8,80004f44 <twim_master_interrupt_handler+0x130>
80004e96:	91 09       	st.w	r8[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80004e98:	4a c8       	lddpc	r8,80004f48 <twim_master_interrupt_handler+0x134>
80004e9a:	70 08       	ld.w	r8,r8[0x0]
80004e9c:	f0 c9 00 01 	sub	r9,r8,1
80004ea0:	4a a8       	lddpc	r8,80004f48 <twim_master_interrupt_handler+0x134>
80004ea2:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80004ea4:	4a 98       	lddpc	r8,80004f48 <twim_master_interrupt_handler+0x134>
80004ea6:	70 08       	ld.w	r8,r8[0x0]
80004ea8:	58 08       	cp.w	r8,0
80004eaa:	c4 11       	brne	80004f2c <twim_master_interrupt_handler+0x118>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80004eac:	4a 28       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004eae:	70 08       	ld.w	r8,r8[0x0]
80004eb0:	30 19       	mov	r9,1
80004eb2:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004eb4:	4a 39       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004eb6:	30 08       	mov	r8,0
80004eb8:	b2 88       	st.b	r9[0x0],r8
80004eba:	c3 98       	rjmp	80004f2c <twim_master_interrupt_handler+0x118>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80004ebc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ec0:	e2 18 00 02 	andl	r8,0x2,COH
80004ec4:	c3 40       	breq	80004f2c <twim_master_interrupt_handler+0x118>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80004ec6:	4a 28       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004ec8:	70 08       	ld.w	r8,r8[0x0]
80004eca:	58 08       	cp.w	r8,0
80004ecc:	c0 91       	brne	80004ede <twim_master_interrupt_handler+0xca>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80004ece:	49 a8       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004ed0:	70 08       	ld.w	r8,r8[0x0]
80004ed2:	30 29       	mov	r9,2
80004ed4:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004ed6:	49 b9       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004ed8:	30 08       	mov	r8,0
80004eda:	b2 88       	st.b	r9[0x0],r8
80004edc:	c2 88       	rjmp	80004f2c <twim_master_interrupt_handler+0x118>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80004ede:	49 68       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004ee0:	70 0a       	ld.w	r10,r8[0x0]
80004ee2:	49 c8       	lddpc	r8,80004f50 <twim_master_interrupt_handler+0x13c>
80004ee4:	70 08       	ld.w	r8,r8[0x0]
80004ee6:	11 89       	ld.ub	r9,r8[0x0]
80004ee8:	5c 59       	castu.b	r9
80004eea:	95 69       	st.w	r10[0x18],r9
80004eec:	f0 c9 ff ff 	sub	r9,r8,-1
80004ef0:	49 88       	lddpc	r8,80004f50 <twim_master_interrupt_handler+0x13c>
80004ef2:	91 09       	st.w	r8[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80004ef4:	49 68       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004ef6:	70 08       	ld.w	r8,r8[0x0]
80004ef8:	f0 c9 00 01 	sub	r9,r8,1
80004efc:	49 48       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004efe:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80004f00:	49 38       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004f02:	70 08       	ld.w	r8,r8[0x0]
80004f04:	58 08       	cp.w	r8,0
80004f06:	c1 31       	brne	80004f2c <twim_master_interrupt_handler+0x118>
				// Check for next transfer
				if(twim_next) {
80004f08:	48 e8       	lddpc	r8,80004f40 <twim_master_interrupt_handler+0x12c>
80004f0a:	11 88       	ld.ub	r8,r8[0x0]
80004f0c:	5c 58       	castu.b	r8
80004f0e:	c0 f0       	breq	80004f2c <twim_master_interrupt_handler+0x118>
					twim_next = false;
80004f10:	48 c9       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004f12:	30 08       	mov	r8,0
80004f14:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80004f16:	49 08       	lddpc	r8,80004f54 <twim_master_interrupt_handler+0x140>
80004f18:	70 08       	ld.w	r8,r8[0x0]
80004f1a:	70 39       	ld.w	r9,r8[0xc]
80004f1c:	48 c8       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004f1e:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80004f20:	48 d8       	lddpc	r8,80004f54 <twim_master_interrupt_handler+0x140>
80004f22:	70 08       	ld.w	r8,r8[0x0]
80004f24:	70 28       	ld.w	r8,r8[0x8]
80004f26:	10 99       	mov	r9,r8
80004f28:	48 a8       	lddpc	r8,80004f50 <twim_master_interrupt_handler+0x13c>
80004f2a:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80004f2c:	2f fd       	sub	sp,-4
80004f2e:	e3 cd 40 80 	ldm	sp++,r7,lr
80004f32:	d6 03       	rete
80004f34:	00 00       	add	r0,r0
80004f36:	07 90       	ld.ub	r0,r3[0x1]
80004f38:	00 00       	add	r0,r0
80004f3a:	07 a8       	ld.ub	r8,r3[0x2]
80004f3c:	00 00       	add	r0,r0
80004f3e:	07 9c       	ld.ub	r12,r3[0x1]
80004f40:	00 00       	add	r0,r0
80004f42:	07 b0       	ld.ub	r0,r3[0x3]
80004f44:	00 00       	add	r0,r0
80004f46:	07 98       	ld.ub	r8,r3[0x1]
80004f48:	00 00       	add	r0,r0
80004f4a:	07 a4       	ld.ub	r4,r3[0x2]
80004f4c:	00 00       	add	r0,r0
80004f4e:	07 a0       	ld.ub	r0,r3[0x2]
80004f50:	00 00       	add	r0,r0
80004f52:	07 94       	ld.ub	r4,r3[0x1]
80004f54:	00 00       	add	r0,r0
80004f56:	07 ac       	ld.ub	r12,r3[0x2]

80004f58 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80004f58:	eb cd 40 80 	pushm	r7,lr
80004f5c:	1a 97       	mov	r7,sp
80004f5e:	20 5d       	sub	sp,20
80004f60:	ef 4c ff f4 	st.w	r7[-12],r12
80004f64:	ef 4b ff f0 	st.w	r7[-16],r11
80004f68:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
80004f6c:	30 08       	mov	r8,0
80004f6e:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
80004f72:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004f76:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004f7a:	f0 09 0d 08 	divu	r8,r8,r9
80004f7e:	a1 98       	lsr	r8,0x1
80004f80:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004f84:	c0 b8       	rjmp	80004f9a <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
80004f86:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004f8a:	2f f8       	sub	r8,-1
80004f8c:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
80004f90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f94:	a1 98       	lsr	r8,0x1
80004f96:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004f9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f9e:	e0 48 00 ff 	cp.w	r8,255
80004fa2:	e0 88 00 09 	brls	80004fb4 <twim_set_speed+0x5c>
80004fa6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004faa:	30 78       	mov	r8,7
80004fac:	f0 09 18 00 	cp.b	r9,r8
80004fb0:	fe 98 ff eb 	brls	80004f86 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80004fb4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004fb8:	30 78       	mov	r8,7
80004fba:	f0 09 18 00 	cp.b	r9,r8
80004fbe:	e0 88 00 04 	brls	80004fc6 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
80004fc2:	3f 88       	mov	r8,-8
80004fc4:	c1 a8       	rjmp	80004ff8 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004fc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fca:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80004fce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fd2:	a1 98       	lsr	r8,0x1
80004fd4:	ee fa ff f8 	ld.w	r10,r7[-8]
80004fd8:	f4 08 01 08 	sub	r8,r10,r8
80004fdc:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
80004fde:	10 49       	or	r9,r8
80004fe0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004fe4:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
80004fe6:	10 49       	or	r9,r8
80004fe8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fec:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004fee:	10 49       	or	r9,r8
80004ff0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ff4:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
80004ff6:	30 08       	mov	r8,0
}
80004ff8:	10 9c       	mov	r12,r8
80004ffa:	2f bd       	sub	sp,-20
80004ffc:	e3 cd 80 80 	ldm	sp++,r7,pc

80005000 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80005000:	eb cd 40 80 	pushm	r7,lr
80005004:	1a 97       	mov	r7,sp
80005006:	20 4d       	sub	sp,16
80005008:	ef 4c ff f4 	st.w	r7[-12],r12
8000500c:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80005010:	e1 b8 00 00 	mfsr	r8,0x0
80005014:	10 9c       	mov	r12,r8
80005016:	f0 1f 00 37 	mcall	800050f0 <twim_master_init+0xf0>
8000501a:	18 98       	mov	r8,r12
8000501c:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80005020:	4b 58       	lddpc	r8,800050f4 <twim_master_init+0xf4>
80005022:	30 09       	mov	r9,0
80005024:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80005026:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000502a:	30 08       	mov	r8,0
8000502c:	f0 09 18 00 	cp.b	r9,r8
80005030:	c0 20       	breq	80005034 <twim_master_init+0x34>
		cpu_irq_disable ();
80005032:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80005034:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005038:	3f f9       	mov	r9,-1
8000503a:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000503c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005040:	30 19       	mov	r9,1
80005042:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005044:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005048:	e0 69 00 80 	mov	r9,128
8000504c:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
8000504e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80005052:	30 08       	mov	r8,0
80005054:	f0 09 18 00 	cp.b	r9,r8
80005058:	c0 20       	breq	8000505c <twim_master_init+0x5c>
		cpu_irq_enable ();
8000505a:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
8000505c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005060:	3f f9       	mov	r9,-1
80005062:	91 b9       	st.w	r8[0x2c],r9

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
80005064:	f0 1f 00 25 	mcall	800050f8 <twim_master_init+0xf8>
80005068:	18 98       	mov	r8,r12
8000506a:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
8000506e:	30 1a       	mov	r10,1
80005070:	e0 6b 03 20 	mov	r11,800
80005074:	4a 2c       	lddpc	r12,800050fc <twim_master_init+0xfc>
80005076:	f0 1f 00 23 	mcall	80005100 <twim_master_init+0x100>
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
8000507a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000507e:	f0 1f 00 22 	mcall	80005104 <twim_master_init+0x104>

	if (opt->smbus) {
80005082:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005086:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000508a:	58 08       	cp.w	r8,0
8000508c:	c0 90       	breq	8000509e <twim_master_init+0x9e>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000508e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005092:	31 09       	mov	r9,16
80005094:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
80005096:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000509a:	3f f9       	mov	r9,-1
8000509c:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
8000509e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050a2:	70 09       	ld.w	r9,r8[0x0]
800050a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050a8:	70 18       	ld.w	r8,r8[0x4]
800050aa:	12 9a       	mov	r10,r9
800050ac:	10 9b       	mov	r11,r8
800050ae:	ee fc ff f4 	ld.w	r12,r7[-12]
800050b2:	f0 1f 00 16 	mcall	80005108 <twim_master_init+0x108>
800050b6:	18 98       	mov	r8,r12
800050b8:	5b 88       	cp.w	r8,-8
800050ba:	c0 31       	brne	800050c0 <twim_master_init+0xc0>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
800050bc:	3f 88       	mov	r8,-8
800050be:	c1 48       	rjmp	800050e6 <twim_master_init+0xe6>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800050c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050c4:	70 28       	ld.w	r8,r8[0x8]
800050c6:	10 9b       	mov	r11,r8
800050c8:	ee fc ff f4 	ld.w	r12,r7[-12]
800050cc:	f0 1f 00 10 	mcall	8000510c <twim_master_init+0x10c>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800050d0:	48 98       	lddpc	r8,800050f4 <twim_master_init+0xf4>
800050d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800050d4:	5b c8       	cp.w	r8,-4
800050d6:	c0 50       	breq	800050e0 <twim_master_init+0xe0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800050d8:	48 78       	lddpc	r8,800050f4 <twim_master_init+0xf4>
800050da:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800050dc:	5b e8       	cp.w	r8,-2
800050de:	c0 31       	brne	800050e4 <twim_master_init+0xe4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
800050e0:	3f f8       	mov	r8,-1
800050e2:	c0 28       	rjmp	800050e6 <twim_master_init+0xe6>
	}
	return STATUS_OK;
800050e4:	30 08       	mov	r8,0
}
800050e6:	10 9c       	mov	r12,r8
800050e8:	2f cd       	sub	sp,-16
800050ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800050ee:	00 00       	add	r0,r0
800050f0:	80 00       	ld.sh	r0,r0[0x0]
800050f2:	4d ca       	lddpc	r10,80005260 <twim_read_packet+0xd4>
800050f4:	00 00       	add	r0,r0
800050f6:	07 9c       	ld.ub	r12,r3[0x1]
800050f8:	80 00       	ld.sh	r0,r0[0x0]
800050fa:	4d ac       	lddpc	r12,80005260 <twim_read_packet+0xd4>
800050fc:	80 00       	ld.sh	r0,r0[0x0]
800050fe:	4e 14       	lddpc	r4,80005280 <twim_read_packet+0xf4>
80005100:	80 00       	ld.sh	r0,r0[0x0]
80005102:	4c d8       	lddpc	r8,80005234 <twim_read_packet+0xa8>
80005104:	80 00       	ld.sh	r0,r0[0x0]
80005106:	4d ec       	lddpc	r12,8000527c <twim_read_packet+0xf0>
80005108:	80 00       	ld.sh	r0,r0[0x0]
8000510a:	4f 58       	lddpc	r8,800052dc <twim_read_packet+0x150>
8000510c:	80 00       	ld.sh	r0,r0[0x0]
8000510e:	51 54       	stdsp	sp[0x54],r4

80005110 <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
80005110:	eb cd 40 80 	pushm	r7,lr
80005114:	1a 97       	mov	r7,sp
80005116:	20 2d       	sub	sp,8
80005118:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000511c:	e1 b8 00 00 	mfsr	r8,0x0
80005120:	10 9c       	mov	r12,r8
80005122:	f0 1f 00 0c 	mcall	80005150 <twim_disable_interrupt+0x40>
80005126:	18 98       	mov	r8,r12
80005128:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
8000512c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005130:	30 08       	mov	r8,0
80005132:	f0 09 18 00 	cp.b	r9,r8
80005136:	c0 20       	breq	8000513a <twim_disable_interrupt+0x2a>
		cpu_irq_disable ();
80005138:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
8000513a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000513e:	3f f9       	mov	r9,-1
80005140:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
80005142:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005146:	3f f9       	mov	r9,-1
80005148:	91 b9       	st.w	r8[0x2c],r9
}
8000514a:	2f ed       	sub	sp,-8
8000514c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005150:	80 00       	ld.sh	r0,r0[0x0]
80005152:	4d ca       	lddpc	r10,800052c0 <twim_read_packet+0x134>

80005154 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80005154:	eb cd 40 80 	pushm	r7,lr
80005158:	1a 97       	mov	r7,sp
8000515a:	20 3d       	sub	sp,12
8000515c:	ef 4c ff f8 	st.w	r7[-8],r12
80005160:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
80005164:	30 08       	mov	r8,0
80005166:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000516a:	ee cb 00 04 	sub	r11,r7,4
8000516e:	30 08       	mov	r8,0
80005170:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005174:	30 0a       	mov	r10,0
80005176:	ee fc ff f8 	ld.w	r12,r7[-8]
8000517a:	f0 1f 00 04 	mcall	80005188 <twim_probe+0x34>
8000517e:	18 98       	mov	r8,r12
}
80005180:	10 9c       	mov	r12,r8
80005182:	2f dd       	sub	sp,-12
80005184:	e3 cd 80 80 	ldm	sp++,r7,pc
80005188:	80 00       	ld.sh	r0,r0[0x0]
8000518a:	54 44       	stdsp	sp[0x110],r4

8000518c <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8000518c:	eb cd 40 80 	pushm	r7,lr
80005190:	1a 97       	mov	r7,sp
80005192:	20 2d       	sub	sp,8
80005194:	ef 4c ff fc 	st.w	r7[-4],r12
80005198:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000519c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051a0:	30 29       	mov	r9,2
800051a2:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800051a4:	4c f8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800051aa:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800051ac:	4c d8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051ae:	70 08       	ld.w	r8,r8[0x0]
800051b0:	10 9c       	mov	r12,r8
800051b2:	f0 1f 00 4d 	mcall	800052e4 <twim_read_packet+0x158>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
800051b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051ba:	70 28       	ld.w	r8,r8[0x8]
800051bc:	10 99       	mov	r9,r8
800051be:	4c b8       	lddpc	r8,800052e8 <twim_read_packet+0x15c>
800051c0:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
800051c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051c6:	70 39       	ld.w	r9,r8[0xc]
800051c8:	4c 98       	lddpc	r8,800052ec <twim_read_packet+0x160>
800051ca:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
800051cc:	4c 99       	lddpc	r9,800052f0 <twim_read_packet+0x164>
800051ce:	30 08       	mov	r8,0
800051d0:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800051d2:	4c 98       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800051d4:	30 09       	mov	r9,0
800051d6:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
800051d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051dc:	11 f8       	ld.ub	r8,r8[0x7]
800051de:	58 08       	cp.w	r8,0
800051e0:	c3 f0       	breq	8000525e <twim_read_packet+0xd2>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800051e2:	4c 08       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051e4:	70 08       	ld.w	r8,r8[0x0]
800051e6:	30 19       	mov	r9,1
800051e8:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
800051ea:	4b e8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051ec:	70 08       	ld.w	r8,r8[0x0]
800051ee:	e0 69 00 80 	mov	r9,128
800051f2:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
800051f4:	4b b8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051f6:	70 08       	ld.w	r8,r8[0x0]
800051f8:	30 29       	mov	r9,2
800051fa:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
800051fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005200:	2f c8       	sub	r8,-4
80005202:	10 99       	mov	r9,r8
80005204:	4b d8       	lddpc	r8,800052f8 <twim_read_packet+0x16c>
80005206:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80005208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000520c:	11 f8       	ld.ub	r8,r8[0x7]
8000520e:	10 99       	mov	r9,r8
80005210:	4b b8       	lddpc	r8,800052fc <twim_read_packet+0x170>
80005212:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80005214:	4b b8       	lddpc	r8,80005300 <twim_read_packet+0x174>
80005216:	e0 69 07 03 	mov	r9,1795
8000521a:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000521c:	4b 18       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000521e:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005220:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005224:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005226:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8000522a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000522e:	13 f9       	ld.ub	r9,r9[0x7]
80005230:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005232:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005236:	e8 19 a0 00 	orl	r9,0xa000
8000523a:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000523c:	4a 98       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000523e:	70 08       	ld.w	r8,r8[0x0]
80005240:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005244:	72 09       	ld.w	r9,r9[0x0]
80005246:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000524a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000524e:	72 39       	ld.w	r9,r9[0xc]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005250:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005252:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80005256:	e8 19 e0 01 	orl	r9,0xe001
8000525a:	91 49       	st.w	r8[0x10],r9
8000525c:	c1 88       	rjmp	8000528c <twim_read_packet+0x100>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
8000525e:	4a 88       	lddpc	r8,800052fc <twim_read_packet+0x170>
80005260:	30 09       	mov	r9,0
80005262:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
80005264:	4a 78       	lddpc	r8,80005300 <twim_read_packet+0x174>
80005266:	e0 69 07 01 	mov	r9,1793
8000526a:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000526c:	49 d8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000526e:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005270:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005274:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005276:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000527a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000527e:	72 39       	ld.w	r9,r9[0xc]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005280:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005282:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005286:	e8 19 e0 01 	orl	r9,0xe001
8000528a:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8000528c:	49 58       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000528e:	70 08       	ld.w	r8,r8[0x0]
80005290:	49 c9       	lddpc	r9,80005300 <twim_read_packet+0x174>
80005292:	72 09       	ld.w	r9,r9[0x0]
80005294:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005296:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000529a:	30 19       	mov	r9,1
8000529c:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8000529e:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800052a0:	c0 38       	rjmp	800052a6 <twim_read_packet+0x11a>
		cpu_relax();
800052a2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800052a6:	49 48       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800052a8:	70 08       	ld.w	r8,r8[0x0]
800052aa:	58 08       	cp.w	r8,0
800052ac:	c0 61       	brne	800052b8 <twim_read_packet+0x12c>
800052ae:	f0 1f 00 16 	mcall	80005304 <twim_read_packet+0x178>
800052b2:	18 98       	mov	r8,r12
800052b4:	58 08       	cp.w	r8,0
800052b6:	cf 60       	breq	800052a2 <twim_read_packet+0x116>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800052b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052bc:	30 29       	mov	r9,2
800052be:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800052c0:	48 d8       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800052c2:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
800052c4:	5b c8       	cp.w	r8,-4
800052c6:	c0 50       	breq	800052d0 <twim_read_packet+0x144>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800052c8:	48 b8       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800052ca:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
800052cc:	5b e8       	cp.w	r8,-2
800052ce:	c0 31       	brne	800052d4 <twim_read_packet+0x148>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
800052d0:	3f f8       	mov	r8,-1
800052d2:	c0 28       	rjmp	800052d6 <twim_read_packet+0x14a>
	}
	return STATUS_OK;
800052d4:	30 08       	mov	r8,0
}
800052d6:	10 9c       	mov	r12,r8
800052d8:	2f ed       	sub	sp,-8
800052da:	e3 cd 80 80 	ldm	sp++,r7,pc
800052de:	00 00       	add	r0,r0
800052e0:	00 00       	add	r0,r0
800052e2:	07 90       	ld.ub	r0,r3[0x1]
800052e4:	80 00       	ld.sh	r0,r0[0x0]
800052e6:	51 10       	stdsp	sp[0x44],r0
800052e8:	00 00       	add	r0,r0
800052ea:	07 98       	ld.ub	r8,r3[0x1]
800052ec:	00 00       	add	r0,r0
800052ee:	07 a4       	ld.ub	r4,r3[0x2]
800052f0:	00 00       	add	r0,r0
800052f2:	07 b0       	ld.ub	r0,r3[0x3]
800052f4:	00 00       	add	r0,r0
800052f6:	07 9c       	ld.ub	r12,r3[0x1]
800052f8:	00 00       	add	r0,r0
800052fa:	07 94       	ld.ub	r4,r3[0x1]
800052fc:	00 00       	add	r0,r0
800052fe:	07 a0       	ld.ub	r0,r3[0x2]
80005300:	00 00       	add	r0,r0
80005302:	07 a8       	ld.ub	r8,r3[0x2]
80005304:	80 00       	ld.sh	r0,r0[0x0]
80005306:	55 48       	stdsp	sp[0x150],r8

80005308 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80005308:	eb cd 40 80 	pushm	r7,lr
8000530c:	1a 97       	mov	r7,sp
8000530e:	20 2d       	sub	sp,8
80005310:	ef 4c ff fc 	st.w	r7[-4],r12
80005314:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005318:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000531c:	30 19       	mov	r9,1
8000531e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005324:	e0 69 00 80 	mov	r9,128
80005328:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000532a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000532e:	30 29       	mov	r9,2
80005330:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80005332:	4b c8       	lddpc	r8,80005420 <twim_write_packet+0x118>
80005334:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005338:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000533a:	4b a8       	lddpc	r8,80005420 <twim_write_packet+0x118>
8000533c:	70 08       	ld.w	r8,r8[0x0]
8000533e:	10 9c       	mov	r12,r8
80005340:	f0 1f 00 39 	mcall	80005424 <twim_write_packet+0x11c>
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80005344:	4b 98       	lddpc	r8,80005428 <twim_write_packet+0x120>
80005346:	30 09       	mov	r9,0
80005348:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8000534a:	4b 98       	lddpc	r8,8000542c <twim_write_packet+0x124>
8000534c:	e0 69 07 02 	mov	r9,1794
80005350:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
80005352:	4b 89       	lddpc	r9,80005430 <twim_write_packet+0x128>
80005354:	30 08       	mov	r8,0
80005356:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
80005358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000535c:	11 f8       	ld.ub	r8,r8[0x7]
8000535e:	58 08       	cp.w	r8,0
80005360:	c1 50       	breq	8000538a <twim_write_packet+0x82>
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80005362:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005366:	2f c8       	sub	r8,-4
80005368:	10 99       	mov	r9,r8
8000536a:	4b 38       	lddpc	r8,80005434 <twim_write_packet+0x12c>
8000536c:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8000536e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005372:	11 f8       	ld.ub	r8,r8[0x7]
80005374:	10 99       	mov	r9,r8
80005376:	4b 18       	lddpc	r8,80005438 <twim_write_packet+0x130>
80005378:	91 09       	st.w	r8[0x0],r9
		// set next transfer to true
		twim_next = true;
8000537a:	4a e9       	lddpc	r9,80005430 <twim_write_packet+0x128>
8000537c:	30 18       	mov	r8,1
8000537e:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
80005380:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005384:	4a e8       	lddpc	r8,8000543c <twim_write_packet+0x134>
80005386:	91 09       	st.w	r8[0x0],r9
80005388:	c0 c8       	rjmp	800053a0 <twim_write_packet+0x98>
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
8000538a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000538e:	70 28       	ld.w	r8,r8[0x8]
80005390:	10 99       	mov	r9,r8
80005392:	4a 98       	lddpc	r8,80005434 <twim_write_packet+0x12c>
80005394:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
80005396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000539a:	70 39       	ld.w	r9,r8[0xc]
8000539c:	4a 78       	lddpc	r8,80005438 <twim_write_packet+0x130>
8000539e:	91 09       	st.w	r8[0x0],r9
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| ((package->length + package->addr_length)
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
800053a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053a4:	70 08       	ld.w	r8,r8[0x0]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800053a6:	f0 09 15 01 	lsl	r9,r8,0x1
			| ((package->length + package->addr_length)
800053aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053ae:	70 3a       	ld.w	r10,r8[0xc]
800053b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053b4:	11 f8       	ld.ub	r8,r8[0x7]
800053b6:	f4 08 00 08 	add	r8,r10,r8
800053ba:	b1 68       	lsl	r8,0x10
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
800053bc:	f3 e8 10 08 	or	r8,r9,r8
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800053c0:	10 99       	mov	r9,r8
800053c2:	e8 19 e0 00 	orl	r9,0xe000
800053c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053ca:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800053cc:	49 58       	lddpc	r8,80005420 <twim_write_packet+0x118>
800053ce:	70 08       	ld.w	r8,r8[0x0]
800053d0:	49 79       	lddpc	r9,8000542c <twim_write_packet+0x124>
800053d2:	72 09       	ld.w	r9,r9[0x0]
800053d4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800053d6:	49 38       	lddpc	r8,80005420 <twim_write_packet+0x118>
800053d8:	70 08       	ld.w	r8,r8[0x0]
800053da:	30 19       	mov	r9,1
800053dc:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800053de:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800053e0:	c0 38       	rjmp	800053e6 <twim_write_packet+0xde>
		cpu_relax();
800053e2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800053e6:	49 18       	lddpc	r8,80005428 <twim_write_packet+0x120>
800053e8:	70 08       	ld.w	r8,r8[0x0]
800053ea:	58 08       	cp.w	r8,0
800053ec:	c0 61       	brne	800053f8 <twim_write_packet+0xf0>
800053ee:	f0 1f 00 15 	mcall	80005440 <twim_write_packet+0x138>
800053f2:	18 98       	mov	r8,r12
800053f4:	58 08       	cp.w	r8,0
800053f6:	cf 60       	breq	800053e2 <twim_write_packet+0xda>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800053f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053fc:	30 29       	mov	r9,2
800053fe:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005400:	48 a8       	lddpc	r8,80005428 <twim_write_packet+0x120>
80005402:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80005404:	5b c8       	cp.w	r8,-4
80005406:	c0 50       	breq	80005410 <twim_write_packet+0x108>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005408:	48 88       	lddpc	r8,80005428 <twim_write_packet+0x120>
8000540a:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8000540c:	5b e8       	cp.w	r8,-2
8000540e:	c0 31       	brne	80005414 <twim_write_packet+0x10c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005410:	3f f8       	mov	r8,-1
80005412:	c0 28       	rjmp	80005416 <twim_write_packet+0x10e>
	}
	return STATUS_OK;
80005414:	30 08       	mov	r8,0
}
80005416:	10 9c       	mov	r12,r8
80005418:	2f ed       	sub	sp,-8
8000541a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000541e:	00 00       	add	r0,r0
80005420:	00 00       	add	r0,r0
80005422:	07 90       	ld.ub	r0,r3[0x1]
80005424:	80 00       	ld.sh	r0,r0[0x0]
80005426:	51 10       	stdsp	sp[0x44],r0
80005428:	00 00       	add	r0,r0
8000542a:	07 9c       	ld.ub	r12,r3[0x1]
8000542c:	00 00       	add	r0,r0
8000542e:	07 a8       	ld.ub	r8,r3[0x2]
80005430:	00 00       	add	r0,r0
80005432:	07 b0       	ld.ub	r0,r3[0x3]
80005434:	00 00       	add	r0,r0
80005436:	07 94       	ld.ub	r4,r3[0x1]
80005438:	00 00       	add	r0,r0
8000543a:	07 a0       	ld.ub	r0,r3[0x2]
8000543c:	00 00       	add	r0,r0
8000543e:	07 ac       	ld.ub	r12,r3[0x2]
80005440:	80 00       	ld.sh	r0,r0[0x0]
80005442:	55 48       	stdsp	sp[0x150],r8

80005444 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80005444:	eb cd 40 80 	pushm	r7,lr
80005448:	1a 97       	mov	r7,sp
8000544a:	20 5d       	sub	sp,20
8000544c:	ef 4c ff fc 	st.w	r7[-4],r12
80005450:	ef 4b ff f8 	st.w	r7[-8],r11
80005454:	ef 4a ff f4 	st.w	r7[-12],r10
80005458:	ef 49 ff f0 	st.w	r7[-16],r9
8000545c:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005460:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005464:	30 19       	mov	r9,1
80005466:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005468:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000546c:	e0 69 00 80 	mov	r9,128
80005470:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005472:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005476:	30 29       	mov	r9,2
80005478:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000547a:	4a c8       	lddpc	r8,80005528 <twim_write+0xe4>
8000547c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005480:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80005482:	4a a8       	lddpc	r8,80005528 <twim_write+0xe4>
80005484:	70 08       	ld.w	r8,r8[0x0]
80005486:	10 9c       	mov	r12,r8
80005488:	f0 1f 00 29 	mcall	8000552c <twim_write+0xe8>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000548c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005490:	4a 88       	lddpc	r8,80005530 <twim_write+0xec>
80005492:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80005494:	4a 88       	lddpc	r8,80005534 <twim_write+0xf0>
80005496:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000549a:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8000549c:	4a 79       	lddpc	r9,80005538 <twim_write+0xf4>
8000549e:	30 08       	mov	r8,0
800054a0:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800054a2:	4a 78       	lddpc	r8,8000553c <twim_write+0xf8>
800054a4:	30 09       	mov	r9,0
800054a6:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800054a8:	4a 08       	lddpc	r8,80005528 <twim_write+0xe4>
800054aa:	70 08       	ld.w	r8,r8[0x0]
800054ac:	ee f9 ff f0 	ld.w	r9,r7[-16]
800054b0:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800054b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800054b8:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
800054ba:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
800054bc:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800054c0:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800054c2:	f5 e9 10 09 	or	r9,r10,r9
800054c6:	e8 19 e0 00 	orl	r9,0xe000
800054ca:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800054cc:	49 d8       	lddpc	r8,80005540 <twim_write+0xfc>
800054ce:	e0 69 03 02 	mov	r9,770
800054d2:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800054d4:	49 58       	lddpc	r8,80005528 <twim_write+0xe4>
800054d6:	70 08       	ld.w	r8,r8[0x0]
800054d8:	49 a9       	lddpc	r9,80005540 <twim_write+0xfc>
800054da:	72 09       	ld.w	r9,r9[0x0]
800054dc:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800054de:	49 38       	lddpc	r8,80005528 <twim_write+0xe4>
800054e0:	70 08       	ld.w	r8,r8[0x0]
800054e2:	30 19       	mov	r9,1
800054e4:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800054e6:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800054e8:	c0 38       	rjmp	800054ee <twim_write+0xaa>
		cpu_relax();
800054ea:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800054ee:	49 48       	lddpc	r8,8000553c <twim_write+0xf8>
800054f0:	70 08       	ld.w	r8,r8[0x0]
800054f2:	58 08       	cp.w	r8,0
800054f4:	c0 61       	brne	80005500 <twim_write+0xbc>
800054f6:	f0 1f 00 14 	mcall	80005544 <twim_write+0x100>
800054fa:	18 98       	mov	r8,r12
800054fc:	58 08       	cp.w	r8,0
800054fe:	cf 60       	breq	800054ea <twim_write+0xa6>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005500:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005504:	30 29       	mov	r9,2
80005506:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005508:	48 d8       	lddpc	r8,8000553c <twim_write+0xf8>
8000550a:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8000550c:	5b c8       	cp.w	r8,-4
8000550e:	c0 50       	breq	80005518 <twim_write+0xd4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005510:	48 b8       	lddpc	r8,8000553c <twim_write+0xf8>
80005512:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80005514:	5b e8       	cp.w	r8,-2
80005516:	c0 31       	brne	8000551c <twim_write+0xd8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005518:	3f f8       	mov	r8,-1
8000551a:	c0 28       	rjmp	8000551e <twim_write+0xda>
	}
	return STATUS_OK;
8000551c:	30 08       	mov	r8,0
}
8000551e:	10 9c       	mov	r12,r8
80005520:	2f bd       	sub	sp,-20
80005522:	e3 cd 80 80 	ldm	sp++,r7,pc
80005526:	00 00       	add	r0,r0
80005528:	00 00       	add	r0,r0
8000552a:	07 90       	ld.ub	r0,r3[0x1]
8000552c:	80 00       	ld.sh	r0,r0[0x0]
8000552e:	51 10       	stdsp	sp[0x44],r0
80005530:	00 00       	add	r0,r0
80005532:	07 94       	ld.ub	r4,r3[0x1]
80005534:	00 00       	add	r0,r0
80005536:	07 a0       	ld.ub	r0,r3[0x2]
80005538:	00 00       	add	r0,r0
8000553a:	07 b0       	ld.ub	r0,r3[0x3]
8000553c:	00 00       	add	r0,r0
8000553e:	07 9c       	ld.ub	r12,r3[0x1]
80005540:	00 00       	add	r0,r0
80005542:	07 a8       	ld.ub	r8,r3[0x2]
80005544:	80 00       	ld.sh	r0,r0[0x0]
80005546:	55 48       	stdsp	sp[0x150],r8

80005548 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
80005548:	eb cd 40 80 	pushm	r7,lr
8000554c:	1a 97       	mov	r7,sp
8000554e:	20 1d       	sub	sp,4
	uint32_t status = twim_inst->sr;
80005550:	48 98       	lddpc	r8,80005574 <twim_status+0x2c>
80005552:	70 08       	ld.w	r8,r8[0x0]
80005554:	70 78       	ld.w	r8,r8[0x1c]
80005556:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
8000555a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000555e:	e2 18 00 10 	andl	r8,0x10,COH
80005562:	c0 30       	breq	80005568 <twim_status+0x20>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif
		) {
		return 1;
80005564:	30 18       	mov	r8,1
80005566:	c0 28       	rjmp	8000556a <twim_status+0x22>
	} else {
		return 0;
80005568:	30 08       	mov	r8,0
	}
}
8000556a:	10 9c       	mov	r12,r8
8000556c:	2f fd       	sub	sp,-4
8000556e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005572:	00 00       	add	r0,r0
80005574:	00 00       	add	r0,r0
80005576:	07 90       	ld.ub	r0,r3[0x1]

80005578 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005578:	eb cd 40 80 	pushm	r7,lr
8000557c:	1a 97       	mov	r7,sp
8000557e:	20 1d       	sub	sp,4
80005580:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005584:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005588:	e6 18 00 01 	andh	r8,0x1,COH
8000558c:	5f 08       	sreq	r8
8000558e:	5c 58       	castu.b	r8
}
80005590:	10 9c       	mov	r12,r8
80005592:	2f fd       	sub	sp,-4
80005594:	e3 cd 80 80 	ldm	sp++,r7,pc

80005598 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80005598:	eb cd 40 80 	pushm	r7,lr
8000559c:	1a 97       	mov	r7,sp
8000559e:	20 7d       	sub	sp,28
800055a0:	ef 4c ff ec 	st.w	r7[-20],r12
800055a4:	ef 4b ff e8 	st.w	r7[-24],r11
800055a8:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
800055ac:	ee f8 ff e8 	ld.w	r8,r7[-24]
800055b0:	f0 09 15 04 	lsl	r9,r8,0x4
800055b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800055b8:	10 39       	cp.w	r9,r8
800055ba:	e0 8b 00 04 	brhi	800055c2 <usart_set_async_baudrate+0x2a>
800055be:	31 08       	mov	r8,16
800055c0:	c0 28       	rjmp	800055c4 <usart_set_async_baudrate+0x2c>
800055c2:	30 88       	mov	r8,8
800055c4:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
800055c8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800055cc:	f0 09 15 03 	lsl	r9,r8,0x3
800055d0:	ee fa ff f0 	ld.w	r10,r7[-16]
800055d4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800055d8:	f4 08 02 48 	mul	r8,r10,r8
800055dc:	a1 98       	lsr	r8,0x1
800055de:	f2 08 00 08 	add	r8,r9,r8
800055e2:	ee fa ff f0 	ld.w	r10,r7[-16]
800055e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800055ea:	f4 09 02 49 	mul	r9,r10,r9
800055ee:	f0 09 0d 08 	divu	r8,r8,r9
800055f2:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800055f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800055fa:	a3 98       	lsr	r8,0x3
800055fc:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80005600:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005604:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80005608:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000560c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005610:	58 08       	cp.w	r8,0
80005612:	c0 70       	breq	80005620 <usart_set_async_baudrate+0x88>
80005614:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005618:	e0 48 ff ff 	cp.w	r8,65535
8000561c:	e0 88 00 04 	brls	80005624 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80005620:	30 18       	mov	r8,1
80005622:	c2 08       	rjmp	80005662 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80005624:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005628:	70 18       	ld.w	r8,r8[0x4]
8000562a:	10 99       	mov	r9,r8
8000562c:	e4 19 ff f7 	andh	r9,0xfff7
80005630:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80005634:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005638:	59 08       	cp.w	r8,16
8000563a:	c0 40       	breq	80005642 <usart_set_async_baudrate+0xaa>
8000563c:	e8 68 00 00 	mov	r8,524288
80005640:	c0 28       	rjmp	80005644 <usart_set_async_baudrate+0xac>
80005642:	30 08       	mov	r8,0
80005644:	10 49       	or	r9,r8
80005646:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000564a:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
8000564c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005650:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80005654:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005658:	10 49       	or	r9,r8
8000565a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000565e:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80005660:	30 08       	mov	r8,0
}
80005662:	10 9c       	mov	r12,r8
80005664:	2f 9d       	sub	sp,-28
80005666:	e3 cd 80 80 	ldm	sp++,r7,pc
8000566a:	d7 03       	nop

8000566c <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
8000566c:	eb cd 40 80 	pushm	r7,lr
80005670:	1a 97       	mov	r7,sp
80005672:	20 2d       	sub	sp,8
80005674:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80005678:	e1 b8 00 00 	mfsr	r8,0x0
8000567c:	10 9c       	mov	r12,r8
8000567e:	f0 1f 00 18 	mcall	800056dc <usart_reset+0x70>
80005682:	18 98       	mov	r8,r12
80005684:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80005688:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000568c:	30 08       	mov	r8,0
8000568e:	f0 09 18 00 	cp.b	r9,r8
80005692:	c0 20       	breq	80005696 <usart_reset+0x2a>
80005694:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80005696:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000569a:	3f f9       	mov	r9,-1
8000569c:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8000569e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056a2:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800056a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800056a8:	30 08       	mov	r8,0
800056aa:	f0 09 18 00 	cp.b	r9,r8
800056ae:	c0 20       	breq	800056b2 <usart_reset+0x46>
800056b0:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800056b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056b6:	30 09       	mov	r9,0
800056b8:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
800056ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056be:	30 09       	mov	r9,0
800056c0:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
800056c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056c6:	30 09       	mov	r9,0
800056c8:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800056ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056ce:	ea 69 61 0c 	mov	r9,680204
800056d2:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
800056d4:	2f ed       	sub	sp,-8
800056d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800056da:	00 00       	add	r0,r0
800056dc:	80 00       	ld.sh	r0,r0[0x0]
800056de:	55 78       	stdsp	sp[0x15c],r8

800056e0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800056e0:	eb cd 40 80 	pushm	r7,lr
800056e4:	1a 97       	mov	r7,sp
800056e6:	20 3d       	sub	sp,12
800056e8:	ef 4c ff fc 	st.w	r7[-4],r12
800056ec:	ef 4b ff f8 	st.w	r7[-8],r11
800056f0:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800056f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800056f8:	f0 1f 00 54 	mcall	80005848 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
800056fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005700:	58 08       	cp.w	r8,0
80005702:	c3 90       	breq	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80005704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005708:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000570a:	30 48       	mov	r8,4
8000570c:	f0 09 18 00 	cp.b	r9,r8
80005710:	e0 88 00 32 	brls	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80005714:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005718:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000571a:	30 98       	mov	r8,9
8000571c:	f0 09 18 00 	cp.b	r9,r8
80005720:	e0 8b 00 2a 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80005724:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005728:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000572a:	30 78       	mov	r8,7
8000572c:	f0 09 18 00 	cp.b	r9,r8
80005730:	e0 8b 00 22 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80005734:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005738:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000573a:	e0 68 01 01 	mov	r8,257
8000573e:	f0 09 19 00 	cp.h	r9,r8
80005742:	e0 8b 00 19 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80005746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000574a:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000574e:	30 38       	mov	r8,3
80005750:	f0 09 18 00 	cp.b	r9,r8
80005754:	e0 8b 00 10 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80005758:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000575c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005760:	70 08       	ld.w	r8,r8[0x0]
80005762:	12 9a       	mov	r10,r9
80005764:	10 9b       	mov	r11,r8
80005766:	ee fc ff fc 	ld.w	r12,r7[-4]
8000576a:	f0 1f 00 39 	mcall	8000584c <usart_init_rs232+0x16c>
8000576e:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80005770:	58 18       	cp.w	r8,1
80005772:	c0 31       	brne	80005778 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80005774:	30 18       	mov	r8,1
80005776:	c6 48       	rjmp	8000583e <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80005778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000577c:	11 c9       	ld.ub	r9,r8[0x4]
8000577e:	30 98       	mov	r8,9
80005780:	f0 09 18 00 	cp.b	r9,r8
80005784:	c0 a1       	brne	80005798 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80005786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000578a:	70 18       	ld.w	r8,r8[0x4]
8000578c:	10 99       	mov	r9,r8
8000578e:	b1 b9       	sbr	r9,0x11
80005790:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005794:	91 19       	st.w	r8[0x4],r9
80005796:	c0 d8       	rjmp	800057b0 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80005798:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000579c:	70 19       	ld.w	r9,r8[0x4]
8000579e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057a2:	11 c8       	ld.ub	r8,r8[0x4]
800057a4:	20 58       	sub	r8,5
800057a6:	a7 68       	lsl	r8,0x6
800057a8:	10 49       	or	r9,r8
800057aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057ae:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800057b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057b4:	70 19       	ld.w	r9,r8[0x4]
800057b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057ba:	11 d8       	ld.ub	r8,r8[0x5]
800057bc:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
800057c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057c4:	f1 38 00 08 	ld.ub	r8,r8[8]
800057c8:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800057ca:	f5 e8 10 08 	or	r8,r10,r8
800057ce:	10 49       	or	r9,r8
800057d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057d4:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800057d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057da:	90 39       	ld.sh	r9,r8[0x6]
800057dc:	30 28       	mov	r8,2
800057de:	f0 09 19 00 	cp.h	r9,r8
800057e2:	e0 88 00 14 	brls	8000580a <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800057e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057ea:	70 18       	ld.w	r8,r8[0x4]
800057ec:	10 99       	mov	r9,r8
800057ee:	ad b9       	sbr	r9,0xd
800057f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057f4:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800057f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057fa:	90 38       	ld.sh	r8,r8[0x6]
800057fc:	5c 78       	castu.h	r8
800057fe:	20 28       	sub	r8,2
80005800:	10 99       	mov	r9,r8
80005802:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005806:	91 a9       	st.w	r8[0x28],r9
80005808:	c0 d8       	rjmp	80005822 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8000580a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000580e:	70 19       	ld.w	r9,r8[0x4]
80005810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005814:	90 38       	ld.sh	r8,r8[0x6]
80005816:	5c 78       	castu.h	r8
80005818:	ad 68       	lsl	r8,0xc
8000581a:	10 49       	or	r9,r8
8000581c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005820:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80005822:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005826:	70 18       	ld.w	r8,r8[0x4]
80005828:	10 99       	mov	r9,r8
8000582a:	e0 19 ff f0 	andl	r9,0xfff0
8000582e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005832:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80005834:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005838:	35 09       	mov	r9,80
8000583a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8000583c:	30 08       	mov	r8,0
}
8000583e:	10 9c       	mov	r12,r8
80005840:	2f dd       	sub	sp,-12
80005842:	e3 cd 80 80 	ldm	sp++,r7,pc
80005846:	00 00       	add	r0,r0
80005848:	80 00       	ld.sh	r0,r0[0x0]
8000584a:	56 6c       	stdsp	sp[0x198],r12
8000584c:	80 00       	ld.sh	r0,r0[0x0]
8000584e:	55 98       	stdsp	sp[0x164],r8

80005850 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80005850:	eb cd 40 80 	pushm	r7,lr
80005854:	1a 97       	mov	r7,sp
80005856:	20 3d       	sub	sp,12
80005858:	ef 4c ff f8 	st.w	r7[-8],r12
8000585c:	ef 4b ff f4 	st.w	r7[-12],r11
80005860:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005864:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80005868:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000586c:	70 58       	ld.w	r8,r8[0x14]
8000586e:	e2 18 00 02 	andl	r8,0x2,COH
80005872:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80005874:	58 08       	cp.w	r8,0
80005876:	c0 a0       	breq	8000588a <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80005878:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000587c:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80005880:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005884:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80005886:	30 08       	mov	r8,0
80005888:	c0 28       	rjmp	8000588c <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
8000588a:	30 28       	mov	r8,2
}
8000588c:	10 9c       	mov	r12,r8
8000588e:	2f dd       	sub	sp,-12
80005890:	e3 cd 80 80 	ldm	sp++,r7,pc

80005894 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80005894:	eb cd 40 80 	pushm	r7,lr
80005898:	1a 97       	mov	r7,sp
8000589a:	20 3d       	sub	sp,12
8000589c:	ef 4c ff f8 	st.w	r7[-8],r12
800058a0:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
800058a4:	e0 68 27 10 	mov	r8,10000
800058a8:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
800058ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058b0:	58 08       	cp.w	r8,0
800058b2:	5f 08       	sreq	r8
800058b4:	5c 58       	castu.b	r8
800058b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800058ba:	20 19       	sub	r9,1
800058bc:	ef 49 ff fc 	st.w	r7[-4],r9
800058c0:	58 08       	cp.w	r8,0
800058c2:	c0 30       	breq	800058c8 <usart_putchar+0x34>
800058c4:	3f f8       	mov	r8,-1
800058c6:	c0 b8       	rjmp	800058dc <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
800058c8:	ee fb ff f4 	ld.w	r11,r7[-12]
800058cc:	ee fc ff f8 	ld.w	r12,r7[-8]
800058d0:	f0 1f 00 05 	mcall	800058e4 <usart_putchar+0x50>
800058d4:	18 98       	mov	r8,r12
800058d6:	58 08       	cp.w	r8,0
800058d8:	ce a1       	brne	800058ac <usart_putchar+0x18>

  return USART_SUCCESS;
800058da:	30 08       	mov	r8,0
}
800058dc:	10 9c       	mov	r12,r8
800058de:	2f dd       	sub	sp,-12
800058e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800058e4:	80 00       	ld.sh	r0,r0[0x0]
800058e6:	58 50       	cp.w	r0,5

800058e8 <usart_read_char>:


int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
800058e8:	eb cd 40 80 	pushm	r7,lr
800058ec:	1a 97       	mov	r7,sp
800058ee:	20 3d       	sub	sp,12
800058f0:	ef 4c ff f8 	st.w	r7[-8],r12
800058f4:	ef 4b ff f4 	st.w	r7[-12],r11
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
800058f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058fc:	70 58       	ld.w	r8,r8[0x14]
800058fe:	e2 18 00 e0 	andl	r8,0xe0,COH
80005902:	c0 30       	breq	80005908 <usart_read_char+0x20>
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;
80005904:	30 48       	mov	r8,4
80005906:	c1 68       	rjmp	80005932 <usart_read_char+0x4a>
80005908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000590c:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80005910:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005914:	70 58       	ld.w	r8,r8[0x14]
80005916:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
8000591a:	c0 b0       	breq	80005930 <usart_read_char+0x48>
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
8000591c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005920:	70 68       	ld.w	r8,r8[0x18]
80005922:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80005926:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000592a:	91 09       	st.w	r8[0x0],r9
    return USART_SUCCESS;
8000592c:	30 08       	mov	r8,0
8000592e:	c0 28       	rjmp	80005932 <usart_read_char+0x4a>
  }
  else
    return USART_RX_EMPTY;
80005930:	30 38       	mov	r8,3
}
80005932:	10 9c       	mov	r12,r8
80005934:	2f dd       	sub	sp,-12
80005936:	e3 cd 80 80 	ldm	sp++,r7,pc
8000593a:	d7 03       	nop

8000593c <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
8000593c:	eb cd 40 80 	pushm	r7,lr
80005940:	1a 97       	mov	r7,sp
80005942:	20 2d       	sub	sp,8
80005944:	ef 4c ff fc 	st.w	r7[-4],r12
80005948:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
8000594c:	c0 e8       	rjmp	80005968 <usart_write_line+0x2c>
    usart_putchar(usart, *string++);
8000594e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005952:	11 88       	ld.ub	r8,r8[0x0]
80005954:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005958:	2f f9       	sub	r9,-1
8000595a:	ef 49 ff f8 	st.w	r7[-8],r9
8000595e:	10 9b       	mov	r11,r8
80005960:	ee fc ff fc 	ld.w	r12,r7[-4]
80005964:	f0 1f 00 05 	mcall	80005978 <usart_write_line+0x3c>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80005968:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000596c:	11 88       	ld.ub	r8,r8[0x0]
8000596e:	58 08       	cp.w	r8,0
80005970:	ce f1       	brne	8000594e <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
80005972:	2f ed       	sub	sp,-8
80005974:	e3 cd 80 80 	ldm	sp++,r7,pc
80005978:	80 00       	ld.sh	r0,r0[0x0]
8000597a:	58 94       	cp.w	r4,9

8000597c <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000597c:	48 cd       	lddpc	sp,800059ac <udata_clear_loop_end+0x2>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
8000597e:	48 d0       	lddpc	r0,800059b0 <udata_clear_loop_end+0x6>
  mtsr    AVR32_EVBA, r0
80005980:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80005984:	d5 53       	csrf	0x15

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
80005986:	48 c0       	lddpc	r0,800059b4 <udata_clear_loop_end+0xa>
  lda.w   r1, _edata
80005988:	48 c1       	lddpc	r1,800059b8 <udata_clear_loop_end+0xe>
  cp      r0, r1
8000598a:	02 30       	cp.w	r0,r1
  brhs    idata_load_loop_end
8000598c:	c0 62       	brcc	80005998 <idata_load_loop_end>
  lda.w   r2, _data_lma
8000598e:	48 c2       	lddpc	r2,800059bc <udata_clear_loop_end+0x12>

80005990 <idata_load_loop>:
idata_load_loop:
  ld.d    r4, r2++
80005990:	a5 05       	ld.d	r4,r2++
  st.d    r0++, r4
80005992:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80005994:	02 30       	cp.w	r0,r1
  brlo    idata_load_loop
80005996:	cf d3       	brcs	80005990 <idata_load_loop>

80005998 <idata_load_loop_end>:
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80005998:	48 a0       	lddpc	r0,800059c0 <udata_clear_loop_end+0x16>
  lda.w   r1, _end
8000599a:	48 b1       	lddpc	r1,800059c4 <udata_clear_loop_end+0x1a>
  cp      r0, r1
8000599c:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000599e:	c0 62       	brcc	800059aa <udata_clear_loop_end>
  mov     r2, 0
800059a0:	30 02       	mov	r2,0
  mov     r3, 0
800059a2:	30 03       	mov	r3,0

800059a4 <udata_clear_loop>:
udata_clear_loop:
  st.d    r0++, r2
800059a4:	a1 22       	st.d	r0++,r2
  cp      r0, r1
800059a6:	02 30       	cp.w	r0,r1
  brlo    udata_clear_loop
800059a8:	cf e3       	brcs	800059a4 <udata_clear_loop>

800059aa <udata_clear_loop_end>:
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800059aa:	48 8f       	lddpc	pc,800059c8 <udata_clear_loop_end+0x1e>
800059ac:	00 01       	add	r1,r0
800059ae:	00 00       	add	r0,r0
800059b0:	80 01       	ld.sh	r1,r0[0x0]
800059b2:	20 00       	sub	r0,0
800059b4:	00 00       	add	r0,r0
800059b6:	00 08       	add	r8,r0
800059b8:	00 00       	add	r0,r0
800059ba:	05 c0       	ld.ub	r0,r2[0x4]
800059bc:	80 01       	ld.sh	r1,r0[0x0]
800059be:	2a e0       	sub	r0,-82
800059c0:	00 00       	add	r0,r0
800059c2:	05 c0       	ld.ub	r0,r2[0x4]
800059c4:	00 00       	add	r0,r0
800059c6:	0d 98       	ld.ub	r8,r6[0x1]
800059c8:	80 00       	ld.sh	r0,r0[0x0]
800059ca:	ac ac       	st.b	r6[0x2],r12

800059cc <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
800059cc:	eb cd 40 80 	pushm	r7,lr
800059d0:	1a 97       	mov	r7,sp
800059d2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800059d4:	e1 b8 00 00 	mfsr	r8,0x0
800059d8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800059dc:	d3 03       	ssrf	0x10

	return flags;
800059de:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800059e2:	10 9c       	mov	r12,r8
800059e4:	2f fd       	sub	sp,-4
800059e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800059ea <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800059ea:	eb cd 40 80 	pushm	r7,lr
800059ee:	1a 97       	mov	r7,sp
800059f0:	20 1d       	sub	sp,4
800059f2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800059f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059fa:	e6 18 00 01 	andh	r8,0x1,COH
800059fe:	5f 08       	sreq	r8
80005a00:	5c 58       	castu.b	r8
}
80005a02:	10 9c       	mov	r12,r8
80005a04:	2f fd       	sub	sp,-4
80005a06:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a0a:	d7 03       	nop

80005a0c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005a0c:	eb cd 40 80 	pushm	r7,lr
80005a10:	1a 97       	mov	r7,sp
80005a12:	20 1d       	sub	sp,4
80005a14:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005a18:	ee fc ff fc 	ld.w	r12,r7[-4]
80005a1c:	f0 1f 00 05 	mcall	80005a30 <cpu_irq_restore+0x24>
80005a20:	18 98       	mov	r8,r12
80005a22:	58 08       	cp.w	r8,0
80005a24:	c0 20       	breq	80005a28 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005a26:	d5 03       	csrf	0x10
   }

	barrier();
}
80005a28:	2f fd       	sub	sp,-4
80005a2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a2e:	00 00       	add	r0,r0
80005a30:	80 00       	ld.sh	r0,r0[0x0]
80005a32:	59 ea       	cp.w	r10,30

80005a34 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
80005a34:	eb cd 40 80 	pushm	r7,lr
80005a38:	1a 97       	mov	r7,sp
80005a3a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005a3c:	f0 1f 00 0c 	mcall	80005a6c <osc_priv_enable_osc0+0x38>
80005a40:	18 98       	mov	r8,r12
80005a42:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
80005a46:	fe 78 08 00 	mov	r8,-63488
80005a4a:	32 49       	mov	r9,36
80005a4c:	ea 19 aa 00 	orh	r9,0xaa00
80005a50:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] =
80005a52:	fe 78 08 00 	mov	r8,-63488
80005a56:	e0 79 0c 07 	mov	r9,68615
80005a5a:	91 99       	st.w	r8[0x24],r9
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
80005a5c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005a60:	f0 1f 00 04 	mcall	80005a70 <osc_priv_enable_osc0+0x3c>
}
80005a64:	2f fd       	sub	sp,-4
80005a66:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a6a:	00 00       	add	r0,r0
80005a6c:	80 00       	ld.sh	r0,r0[0x0]
80005a6e:	59 cc       	cp.w	r12,28
80005a70:	80 00       	ld.sh	r0,r0[0x0]
80005a72:	5a 0c       	cp.w	r12,-32

80005a74 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
80005a74:	eb cd 40 80 	pushm	r7,lr
80005a78:	1a 97       	mov	r7,sp
80005a7a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005a7c:	f0 1f 00 0c 	mcall	80005aac <osc_priv_enable_osc32+0x38>
80005a80:	18 98       	mov	r8,r12
80005a82:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
80005a86:	fe 78 08 00 	mov	r8,-63488
80005a8a:	34 c9       	mov	r9,76
80005a8c:	ea 19 aa 00 	orh	r9,0xaa00
80005a90:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 =
80005a92:	fe 78 08 00 	mov	r8,-63488
80005a96:	e2 69 01 01 	mov	r9,131329
80005a9a:	f1 49 00 4c 	st.w	r8[76],r9
			(OSC32_STARTUP_VALUE << AVR32_SCIF_OSCCTRL32_STARTUP)
			| (OSC32_MODE_VALUE << AVR32_SCIF_OSCCTRL32_MODE)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
80005a9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80005aa2:	f0 1f 00 04 	mcall	80005ab0 <osc_priv_enable_osc32+0x3c>
}
80005aa6:	2f fd       	sub	sp,-4
80005aa8:	e3 cd 80 80 	ldm	sp++,r7,pc
80005aac:	80 00       	ld.sh	r0,r0[0x0]
80005aae:	59 cc       	cp.w	r12,28
80005ab0:	80 00       	ld.sh	r0,r0[0x0]
80005ab2:	5a 0c       	cp.w	r12,-32

80005ab4 <osc_priv_enable_rc8m>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc8m(void)
{
80005ab4:	eb cd 40 80 	pushm	r7,lr
80005ab8:	1a 97       	mov	r7,sp
80005aba:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint32_t   rccr8;
    uint32_t* calibration_bits = (uint32_t*)0x80800200;
80005abc:	e0 68 02 00 	mov	r8,512
80005ac0:	ea 18 80 80 	orh	r8,0x8080
80005ac4:	ef 48 ff fc 	st.w	r7[-4],r8
	/* Wait for the CALIB field to be updated from fuses after reset */
	while (!(AVR32_SCIF.rccr8 & AVR32_SCIF_RCCR8_FCD_MASK)) {
80005ac8:	fe 78 08 00 	mov	r8,-63488
80005acc:	71 28       	ld.w	r8,r8[0x48]
80005ace:	e6 18 00 01 	andh	r8,0x1,COH
80005ad2:	cf b0       	breq	80005ac8 <osc_priv_enable_rc8m+0x14>
		/* Do nothing */
	}

	/* Enable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
80005ad4:	f0 1f 00 17 	mcall	80005b30 <osc_priv_enable_rc8m+0x7c>
80005ad8:	18 98       	mov	r8,r12
80005ada:	ef 48 ff f4 	st.w	r7[-12],r8
	rccr8 = AVR32_SCIF.rccr8;
80005ade:	fe 78 08 00 	mov	r8,-63488
80005ae2:	71 28       	ld.w	r8,r8[0x48]
80005ae4:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
80005ae8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005aec:	70 08       	ld.w	r8,r8[0x0]
80005aee:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80005af2:	b1 a8       	sbr	r8,0x10
80005af4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005af8:	f3 e8 00 08 	and	r8,r9,r8
80005afc:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 |= 1U << AVR32_SCIF_RCOSC8_EN;
80005b00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b04:	b9 a8       	sbr	r8,0x18
80005b06:	ef 48 ff f8 	st.w	r7[-8],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
80005b0a:	fe 78 08 00 	mov	r8,-63488
80005b0e:	34 89       	mov	r9,72
80005b10:	ea 19 aa 00 	orh	r9,0xaa00
80005b14:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
80005b16:	fe 78 08 00 	mov	r8,-63488
80005b1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b1e:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
80005b22:	ee fc ff f4 	ld.w	r12,r7[-12]
80005b26:	f0 1f 00 04 	mcall	80005b34 <osc_priv_enable_rc8m+0x80>
}
80005b2a:	2f dd       	sub	sp,-12
80005b2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b30:	80 00       	ld.sh	r0,r0[0x0]
80005b32:	59 cc       	cp.w	r12,28
80005b34:	80 00       	ld.sh	r0,r0[0x0]
80005b36:	5a 0c       	cp.w	r12,-32

80005b38 <osc_priv_enable_rc120m>:
	AVR32_SCIF.rccr8 = rccr8;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc120m(void)
{
80005b38:	eb cd 40 80 	pushm	r7,lr
80005b3c:	1a 97       	mov	r7,sp
80005b3e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005b40:	f0 1f 00 0c 	mcall	80005b70 <osc_priv_enable_rc120m+0x38>
80005b44:	18 98       	mov	r8,r12
80005b46:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
80005b4a:	fe 78 08 00 	mov	r8,-63488
80005b4e:	35 89       	mov	r9,88
80005b50:	ea 19 aa 00 	orh	r9,0xaa00
80005b54:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
80005b56:	fe 78 08 00 	mov	r8,-63488
80005b5a:	30 19       	mov	r9,1
80005b5c:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
80005b60:	ee fc ff fc 	ld.w	r12,r7[-4]
80005b64:	f0 1f 00 04 	mcall	80005b74 <osc_priv_enable_rc120m+0x3c>
}
80005b68:	2f fd       	sub	sp,-4
80005b6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b6e:	00 00       	add	r0,r0
80005b70:	80 00       	ld.sh	r0,r0[0x0]
80005b72:	59 cc       	cp.w	r12,28
80005b74:	80 00       	ld.sh	r0,r0[0x0]
80005b76:	5a 0c       	cp.w	r12,-32

80005b78 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005b78:	eb cd 40 80 	pushm	r7,lr
80005b7c:	1a 97       	mov	r7,sp
80005b7e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005b80:	e1 b8 00 00 	mfsr	r8,0x0
80005b84:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005b88:	d3 03       	ssrf	0x10

	return flags;
80005b8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005b8e:	10 9c       	mov	r12,r8
80005b90:	2f fd       	sub	sp,-4
80005b92:	e3 cd 80 80 	ldm	sp++,r7,pc

80005b96 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005b96:	eb cd 40 80 	pushm	r7,lr
80005b9a:	1a 97       	mov	r7,sp
80005b9c:	20 1d       	sub	sp,4
80005b9e:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005ba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ba6:	e6 18 00 01 	andh	r8,0x1,COH
80005baa:	5f 08       	sreq	r8
80005bac:	5c 58       	castu.b	r8
}
80005bae:	10 9c       	mov	r12,r8
80005bb0:	2f fd       	sub	sp,-4
80005bb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005bb6:	d7 03       	nop

80005bb8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005bb8:	eb cd 40 80 	pushm	r7,lr
80005bbc:	1a 97       	mov	r7,sp
80005bbe:	20 1d       	sub	sp,4
80005bc0:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005bc4:	ee fc ff fc 	ld.w	r12,r7[-4]
80005bc8:	f0 1f 00 05 	mcall	80005bdc <cpu_irq_restore+0x24>
80005bcc:	18 98       	mov	r8,r12
80005bce:	58 08       	cp.w	r8,0
80005bd0:	c0 20       	breq	80005bd4 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005bd2:	d5 03       	csrf	0x10
   }

	barrier();
}
80005bd4:	2f fd       	sub	sp,-4
80005bd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005bda:	00 00       	add	r0,r0
80005bdc:	80 00       	ld.sh	r0,r0[0x0]
80005bde:	5b 96       	cp.w	r6,-7

80005be0 <pll_enable>:
	AVR32_SCIF.pll[pll_id] = cfg->ctrl;
	cpu_irq_restore(flags);
}

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
80005be0:	eb cd 40 80 	pushm	r7,lr
80005be4:	1a 97       	mov	r7,sp
80005be6:	20 3d       	sub	sp,12
80005be8:	ef 4c ff f8 	st.w	r7[-8],r12
80005bec:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
80005bf0:	f0 1f 00 10 	mcall	80005c30 <pll_enable+0x50>
80005bf4:	18 98       	mov	r8,r12
80005bf6:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
80005bfa:	fe 78 08 00 	mov	r8,-63488
80005bfe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005c02:	2f 99       	sub	r9,-7
80005c04:	a3 69       	lsl	r9,0x2
80005c06:	ea 19 aa 00 	orh	r9,0xaa00
80005c0a:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
80005c0c:	fe 78 08 00 	mov	r8,-63488
80005c10:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005c14:	ee fa ff f8 	ld.w	r10,r7[-8]
80005c18:	74 0a       	ld.w	r10,r10[0x0]
80005c1a:	a1 aa       	sbr	r10,0x0
80005c1c:	2f 99       	sub	r9,-7
80005c1e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
80005c22:	ee fc ff fc 	ld.w	r12,r7[-4]
80005c26:	f0 1f 00 04 	mcall	80005c34 <pll_enable+0x54>
}
80005c2a:	2f dd       	sub	sp,-12
80005c2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c30:	80 00       	ld.sh	r0,r0[0x0]
80005c32:	5b 78       	cp.w	r8,-9
80005c34:	80 00       	ld.sh	r0,r0[0x0]
80005c36:	5b b8       	cp.w	r8,-5

80005c38 <pll_disable>:

void pll_disable(unsigned int pll_id)
{
80005c38:	eb cd 40 80 	pushm	r7,lr
80005c3c:	1a 97       	mov	r7,sp
80005c3e:	20 2d       	sub	sp,8
80005c40:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
80005c44:	f0 1f 00 0f 	mcall	80005c80 <pll_disable+0x48>
80005c48:	18 98       	mov	r8,r12
80005c4a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
80005c4e:	fe 78 08 00 	mov	r8,-63488
80005c52:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005c56:	2f 99       	sub	r9,-7
80005c58:	a3 69       	lsl	r9,0x2
80005c5a:	ea 19 aa 00 	orh	r9,0xaa00
80005c5e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = 0;
80005c60:	fe 78 08 00 	mov	r8,-63488
80005c64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005c68:	2f 99       	sub	r9,-7
80005c6a:	30 0a       	mov	r10,0
80005c6c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
80005c70:	ee fc ff fc 	ld.w	r12,r7[-4]
80005c74:	f0 1f 00 04 	mcall	80005c84 <pll_disable+0x4c>
}
80005c78:	2f ed       	sub	sp,-8
80005c7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c7e:	00 00       	add	r0,r0
80005c80:	80 00       	ld.sh	r0,r0[0x0]
80005c82:	5b 78       	cp.w	r8,-9
80005c84:	80 00       	ld.sh	r0,r0[0x0]
80005c86:	5b b8       	cp.w	r8,-5

80005c88 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005c88:	eb cd 40 80 	pushm	r7,lr
80005c8c:	1a 97       	mov	r7,sp
80005c8e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005c90:	e1 b8 00 00 	mfsr	r8,0x0
80005c94:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005c98:	d3 03       	ssrf	0x10

	return flags;
80005c9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005c9e:	10 9c       	mov	r12,r8
80005ca0:	2f fd       	sub	sp,-4
80005ca2:	e3 cd 80 80 	ldm	sp++,r7,pc

80005ca6 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005ca6:	eb cd 40 80 	pushm	r7,lr
80005caa:	1a 97       	mov	r7,sp
80005cac:	20 1d       	sub	sp,4
80005cae:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005cb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005cb6:	e6 18 00 01 	andh	r8,0x1,COH
80005cba:	5f 08       	sreq	r8
80005cbc:	5c 58       	castu.b	r8
}
80005cbe:	10 9c       	mov	r12,r8
80005cc0:	2f fd       	sub	sp,-4
80005cc2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005cc6:	d7 03       	nop

80005cc8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005cc8:	eb cd 40 80 	pushm	r7,lr
80005ccc:	1a 97       	mov	r7,sp
80005cce:	20 1d       	sub	sp,4
80005cd0:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005cd4:	ee fc ff fc 	ld.w	r12,r7[-4]
80005cd8:	f0 1f 00 05 	mcall	80005cec <cpu_irq_restore+0x24>
80005cdc:	18 98       	mov	r8,r12
80005cde:	58 08       	cp.w	r8,0
80005ce0:	c0 20       	breq	80005ce4 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005ce2:	d5 03       	csrf	0x10
   }

	barrier();
}
80005ce4:	2f fd       	sub	sp,-4
80005ce6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005cea:	00 00       	add	r0,r0
80005cec:	80 00       	ld.sh	r0,r0[0x0]
80005cee:	5c a6       	swap.h	r6

80005cf0 <sysclk_set_prescalers>:
 * \param pbc_shift The PBC clock will be divided by \f$2^{pbc\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift,
		unsigned int pbc_shift)
{
80005cf0:	eb cd 40 80 	pushm	r7,lr
80005cf4:	1a 97       	mov	r7,sp
80005cf6:	20 9d       	sub	sp,36
80005cf8:	ef 4c ff e8 	st.w	r7[-24],r12
80005cfc:	ef 4b ff e4 	st.w	r7[-28],r11
80005d00:	ef 4a ff e0 	st.w	r7[-32],r10
80005d04:	ef 49 ff dc 	st.w	r7[-36],r9
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
80005d08:	30 08       	mov	r8,0
80005d0a:	ef 48 ff f0 	st.w	r7[-16],r8
	uint32_t   pba_cksel = 0;
80005d0e:	30 08       	mov	r8,0
80005d10:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t   pbb_cksel = 0;
80005d14:	30 08       	mov	r8,0
80005d16:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t   pbc_cksel = 0;
80005d1a:	30 08       	mov	r8,0
80005d1c:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
80005d20:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d24:	58 08       	cp.w	r8,0
80005d26:	c0 70       	breq	80005d34 <sysclk_set_prescalers+0x44>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_CPUSEL)
80005d28:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d2c:	20 18       	sub	r8,1
80005d2e:	a7 b8       	sbr	r8,0x7
80005d30:	ef 48 ff f0 	st.w	r7[-16],r8
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
80005d34:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005d38:	58 08       	cp.w	r8,0
80005d3a:	c0 70       	breq	80005d48 <sysclk_set_prescalers+0x58>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_PBSEL)
80005d3c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005d40:	20 18       	sub	r8,1
80005d42:	a7 b8       	sbr	r8,0x7
80005d44:	ef 48 ff f4 	st.w	r7[-12],r8
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
80005d48:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d4c:	58 08       	cp.w	r8,0
80005d4e:	c0 70       	breq	80005d5c <sysclk_set_prescalers+0x6c>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_PBSEL)
80005d50:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d54:	20 18       	sub	r8,1
80005d56:	a7 b8       	sbr	r8,0x7
80005d58:	ef 48 ff f8 	st.w	r7[-8],r8
				| (1U << AVR32_PM_PBBDIV);

	if (pbc_shift > 0)
80005d5c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005d60:	58 08       	cp.w	r8,0
80005d62:	c0 70       	breq	80005d70 <sysclk_set_prescalers+0x80>
		pbc_cksel = ((pbc_shift - 1) << AVR32_PM_PBCSEL_PBSEL)
80005d64:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005d68:	20 18       	sub	r8,1
80005d6a:	a7 b8       	sbr	r8,0x7
80005d6c:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_PBCDIV);

	flags = cpu_irq_save();
80005d70:	f0 1f 00 1e 	mcall	80005de8 <sysclk_set_prescalers+0xf8>
80005d74:	18 98       	mov	r8,r12
80005d76:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
80005d7a:	fe 78 04 00 	mov	r8,-64512
80005d7e:	30 49       	mov	r9,4
80005d80:	ea 19 aa 00 	orh	r9,0xaa00
80005d84:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.cpusel = cpu_cksel;
80005d88:	fe 78 04 00 	mov	r8,-64512
80005d8c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005d90:	91 19       	st.w	r8[0x4],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
80005d92:	fe 78 04 00 	mov	r8,-64512
80005d96:	30 c9       	mov	r9,12
80005d98:	ea 19 aa 00 	orh	r9,0xaa00
80005d9c:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbasel = pba_cksel;
80005da0:	fe 78 04 00 	mov	r8,-64512
80005da4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005da8:	91 39       	st.w	r8[0xc],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
80005daa:	fe 78 04 00 	mov	r8,-64512
80005dae:	31 09       	mov	r9,16
80005db0:	ea 19 aa 00 	orh	r9,0xaa00
80005db4:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbb_cksel;
80005db8:	fe 78 04 00 	mov	r8,-64512
80005dbc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005dc0:	91 49       	st.w	r8[0x10],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBCSEL;
80005dc2:	fe 78 04 00 	mov	r8,-64512
80005dc6:	31 49       	mov	r9,20
80005dc8:	ea 19 aa 00 	orh	r9,0xaa00
80005dcc:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbcsel = pbc_cksel;
80005dd0:	fe 78 04 00 	mov	r8,-64512
80005dd4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005dd8:	91 59       	st.w	r8[0x14],r9
	cpu_irq_restore(flags);
80005dda:	ee fc ff ec 	ld.w	r12,r7[-20]
80005dde:	f0 1f 00 04 	mcall	80005dec <sysclk_set_prescalers+0xfc>
}
80005de2:	2f 7d       	sub	sp,-36
80005de4:	e3 cd 80 80 	ldm	sp++,r7,pc
80005de8:	80 00       	ld.sh	r0,r0[0x0]
80005dea:	5c 88       	casts.h	r8
80005dec:	80 00       	ld.sh	r0,r0[0x0]
80005dee:	5c c8       	swap.bh	r8

80005df0 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80005df0:	eb cd 40 80 	pushm	r7,lr
80005df4:	1a 97       	mov	r7,sp
80005df6:	20 2d       	sub	sp,8
80005df8:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
80005dfc:	f0 1f 00 0c 	mcall	80005e2c <sysclk_set_source+0x3c>
80005e00:	18 98       	mov	r8,r12
80005e02:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80005e06:	fe 78 04 00 	mov	r8,-64512
80005e0a:	fc 19 aa 00 	movh	r9,0xaa00
80005e0e:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
80005e12:	fe 78 04 00 	mov	r8,-64512
80005e16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e1a:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80005e1c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005e20:	f0 1f 00 04 	mcall	80005e30 <sysclk_set_source+0x40>
}
80005e24:	2f ed       	sub	sp,-8
80005e26:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e2a:	00 00       	add	r0,r0
80005e2c:	80 00       	ld.sh	r0,r0[0x0]
80005e2e:	5c 88       	casts.h	r8
80005e30:	80 00       	ld.sh	r0,r0[0x0]
80005e32:	5c c8       	swap.bh	r8

80005e34 <twi_master_read>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005e34:	eb cd 40 80 	pushm	r7,lr
80005e38:	1a 97       	mov	r7,sp
80005e3a:	20 2d       	sub	sp,8
80005e3c:	ef 4c ff fc 	st.w	r7[-4],r12
80005e40:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_read_packet (twim, package));
80005e44:	ee fb ff f8 	ld.w	r11,r7[-8]
80005e48:	ee fc ff fc 	ld.w	r12,r7[-4]
80005e4c:	f0 1f 00 04 	mcall	80005e5c <twi_master_read+0x28>
80005e50:	18 98       	mov	r8,r12
}
80005e52:	10 9c       	mov	r12,r8
80005e54:	2f ed       	sub	sp,-8
80005e56:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e5a:	00 00       	add	r0,r0
80005e5c:	80 00       	ld.sh	r0,r0[0x0]
80005e5e:	51 8c       	stdsp	sp[0x60],r12

80005e60 <twi_master_write>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   if all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005e60:	eb cd 40 80 	pushm	r7,lr
80005e64:	1a 97       	mov	r7,sp
80005e66:	20 2d       	sub	sp,8
80005e68:	ef 4c ff fc 	st.w	r7[-4],r12
80005e6c:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_write_packet (twim, package));
80005e70:	ee fb ff f8 	ld.w	r11,r7[-8]
80005e74:	ee fc ff fc 	ld.w	r12,r7[-4]
80005e78:	f0 1f 00 04 	mcall	80005e88 <twi_master_write+0x28>
80005e7c:	18 98       	mov	r8,r12
}
80005e7e:	10 9c       	mov	r12,r8
80005e80:	2f ed       	sub	sp,-8
80005e82:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e86:	00 00       	add	r0,r0
80005e88:	80 00       	ld.sh	r0,r0[0x0]
80005e8a:	53 08       	stdsp	sp[0xc0],r8

80005e8c <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
80005e8c:	eb cd 40 80 	pushm	r7,lr
80005e90:	1a 97       	mov	r7,sp
80005e92:	20 9d       	sub	sp,36
80005e94:	16 99       	mov	r9,r11
80005e96:	14 98       	mov	r8,r10
80005e98:	18 9a       	mov	r10,r12
80005e9a:	ef 6a ff e4 	st.b	r7[-28],r10
80005e9e:	ef 69 ff e0 	st.b	r7[-32],r9
80005ea2:	ef 68 ff dc 	st.b	r7[-36],r8
uint8_t pack[2];
twi_package_t twi_package;

	pack[0] = reg_index;
80005ea6:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80005eaa:	ef 68 ff fc 	st.b	r7[-4],r8
	pack[1] = data;
80005eae:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80005eb2:	ef 68 ff fd 	st.b	r7[-3],r8

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005eb6:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80005eba:	30 08       	mov	r8,0
80005ebc:	f0 09 18 00 	cp.b	r9,r8
80005ec0:	c0 51       	brne	80005eca <PCA9952_write_reg+0x3e>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005ec2:	36 08       	mov	r8,96
80005ec4:	ef 48 ff e8 	st.w	r7[-24],r8
80005ec8:	c0 a8       	rjmp	80005edc <PCA9952_write_reg+0x50>
	}
	else if (topBotn == LED_BOTTOM)
80005eca:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80005ece:	30 18       	mov	r8,1
80005ed0:	f0 09 18 00 	cp.b	r9,r8
80005ed4:	c0 41       	brne	80005edc <PCA9952_write_reg+0x50>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005ed6:	36 18       	mov	r8,97
80005ed8:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	twi_package.addr_length = 0;
80005edc:	30 08       	mov	r8,0
80005ede:	ef 68 ff ef 	st.b	r7[-17],r8
	twi_package.buffer = &pack;
80005ee2:	ee c8 00 04 	sub	r8,r7,4
80005ee6:	ef 48 ff f0 	st.w	r7[-16],r8
	twi_package.length = sizeof(pack);
80005eea:	30 28       	mov	r8,2
80005eec:	ef 48 ff f4 	st.w	r7[-12],r8

	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005ef0:	ee c8 00 18 	sub	r8,r7,24
80005ef4:	10 9b       	mov	r11,r8
80005ef6:	fe 7c 38 00 	mov	r12,-51200
80005efa:	f0 1f 00 05 	mcall	80005f0c <PCA9952_write_reg+0x80>
80005efe:	18 98       	mov	r8,r12
80005f00:	58 08       	cp.w	r8,0
80005f02:	cf 71       	brne	80005ef0 <PCA9952_write_reg+0x64>

	return;
}
80005f04:	2f 7d       	sub	sp,-36
80005f06:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f0a:	00 00       	add	r0,r0
80005f0c:	80 00       	ld.sh	r0,r0[0x0]
80005f0e:	5e 60       	retmi	r0

80005f10 <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
80005f10:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005f14:	1a 97       	mov	r7,sp
80005f16:	21 3d       	sub	sp,76
80005f18:	18 99       	mov	r9,r12
80005f1a:	16 98       	mov	r8,r11
80005f1c:	ef 69 ff b8 	st.b	r7[-72],r9
80005f20:	ef 68 ff b4 	st.b	r7[-76],r8
uint8_t data;
twi_package_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005f24:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005f28:	30 08       	mov	r8,0
80005f2a:	f0 09 18 00 	cp.b	r9,r8
80005f2e:	c0 51       	brne	80005f38 <PCA9952_read_reg+0x28>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005f30:	36 08       	mov	r8,96
80005f32:	ef 48 ff c8 	st.w	r7[-56],r8
80005f36:	c0 a8       	rjmp	80005f4a <PCA9952_read_reg+0x3a>
	}
	else if (topBotn == LED_BOTTOM)
80005f38:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005f3c:	30 18       	mov	r8,1
80005f3e:	f0 09 18 00 	cp.b	r9,r8
80005f42:	c0 41       	brne	80005f4a <PCA9952_read_reg+0x3a>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005f44:	36 18       	mov	r8,97
80005f46:	ef 48 ff c8 	st.w	r7[-56],r8
	}

	twi_package.addr_length = 0;
80005f4a:	30 08       	mov	r8,0
80005f4c:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &reg_index;
80005f50:	ee c8 00 4c 	sub	r8,r7,76
80005f54:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
80005f58:	30 18       	mov	r8,1
80005f5a:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005f5e:	ee c8 00 38 	sub	r8,r7,56
80005f62:	10 9b       	mov	r11,r8
80005f64:	fe 7c 38 00 	mov	r12,-51200
80005f68:	f0 1f 00 5e 	mcall	800060e0 <PCA9952_read_reg+0x1d0>
80005f6c:	18 98       	mov	r8,r12
80005f6e:	58 08       	cp.w	r8,0
80005f70:	cf 71       	brne	80005f5e <PCA9952_read_reg+0x4e>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	cpu_delay_us(20, cpu_hz);
80005f72:	4d d8       	lddpc	r8,800060e4 <PCA9952_read_reg+0x1d4>
80005f74:	70 08       	ld.w	r8,r8[0x0]
80005f76:	31 49       	mov	r9,20
80005f78:	ef 49 ff e4 	st.w	r7[-28],r9
80005f7c:	ef 48 ff e0 	st.w	r7[-32],r8
80005f80:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005f84:	ef 48 ff ec 	st.w	r7[-20],r8
80005f88:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005f8c:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80005f90:	ee f0 ff ec 	ld.w	r0,r7[-20]
80005f94:	30 01       	mov	r1,0
80005f96:	ee f2 ff e8 	ld.w	r2,r7[-24]
80005f9a:	30 03       	mov	r3,0
80005f9c:	e2 02 02 4a 	mul	r10,r1,r2
80005fa0:	e6 00 02 48 	mul	r8,r3,r0
80005fa4:	10 0a       	add	r10,r8
80005fa6:	e0 02 06 48 	mulu.d	r8,r0,r2
80005faa:	12 0a       	add	r10,r9
80005fac:	14 99       	mov	r9,r10
80005fae:	ee 7a 42 3f 	mov	r10,999999
80005fb2:	30 0b       	mov	r11,0
80005fb4:	f0 0a 00 0a 	add	r10,r8,r10
80005fb8:	f2 0b 00 4b 	adc	r11,r9,r11
80005fbc:	ee 78 42 40 	mov	r8,1000000
80005fc0:	30 09       	mov	r9,0
80005fc2:	f0 1f 00 4a 	mcall	800060e8 <PCA9952_read_reg+0x1d8>
80005fc6:	14 98       	mov	r8,r10
80005fc8:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80005fca:	ef 48 ff f4 	st.w	r7[-12],r8
80005fce:	ee c8 00 44 	sub	r8,r7,68
80005fd2:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005fd6:	e1 b8 00 42 	mfsr	r8,0x108
80005fda:	10 99       	mov	r9,r8
80005fdc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005fe0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005fe2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005fe6:	70 09       	ld.w	r9,r8[0x0]
80005fe8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fec:	10 09       	add	r9,r8
80005fee:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005ff2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005ff4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005ff8:	30 08       	mov	r8,0
80005ffa:	f3 68 00 08 	st.b	r9[8],r8
80005ffe:	ee c8 00 44 	sub	r8,r7,68
80006002:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006006:	e1 b8 00 42 	mfsr	r8,0x108
8000600a:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000600e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006012:	f1 39 00 08 	ld.ub	r9,r8[8]
80006016:	30 28       	mov	r8,2
80006018:	f0 09 18 00 	cp.b	r9,r8
8000601c:	c0 31       	brne	80006022 <PCA9952_read_reg+0x112>
    return false;
8000601e:	30 08       	mov	r8,0
80006020:	c4 38       	rjmp	800060a6 <PCA9952_read_reg+0x196>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006022:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006026:	f1 39 00 08 	ld.ub	r9,r8[8]
8000602a:	30 18       	mov	r8,1
8000602c:	f0 09 18 00 	cp.b	r9,r8
80006030:	c0 31       	brne	80006036 <PCA9952_read_reg+0x126>
    return true;
80006032:	30 18       	mov	r8,1
80006034:	c3 98       	rjmp	800060a6 <PCA9952_read_reg+0x196>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000603a:	70 09       	ld.w	r9,r8[0x0]
8000603c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006040:	70 18       	ld.w	r8,r8[0x4]
80006042:	10 39       	cp.w	r9,r8
80006044:	e0 88 00 1a 	brls	80006078 <PCA9952_read_reg+0x168>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006048:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000604c:	70 08       	ld.w	r8,r8[0x0]
8000604e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006052:	10 39       	cp.w	r9,r8
80006054:	c1 02       	brcc	80006074 <PCA9952_read_reg+0x164>
80006056:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000605a:	70 18       	ld.w	r8,r8[0x4]
8000605c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006060:	10 39       	cp.w	r9,r8
80006062:	e0 88 00 09 	brls	80006074 <PCA9952_read_reg+0x164>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006066:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000606a:	30 18       	mov	r8,1
8000606c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006070:	30 18       	mov	r8,1
80006072:	c1 a8       	rjmp	800060a6 <PCA9952_read_reg+0x196>
    }
    return false;
80006074:	30 08       	mov	r8,0
80006076:	c1 88       	rjmp	800060a6 <PCA9952_read_reg+0x196>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006078:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000607c:	70 08       	ld.w	r8,r8[0x0]
8000607e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006082:	10 39       	cp.w	r9,r8
80006084:	c0 93       	brcs	80006096 <PCA9952_read_reg+0x186>
80006086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000608a:	70 18       	ld.w	r8,r8[0x4]
8000608c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006090:	10 39       	cp.w	r9,r8
80006092:	e0 88 00 09 	brls	800060a4 <PCA9952_read_reg+0x194>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006096:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000609a:	30 18       	mov	r8,1
8000609c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800060a0:	30 18       	mov	r8,1
800060a2:	c0 28       	rjmp	800060a6 <PCA9952_read_reg+0x196>
    }
    return false;
800060a4:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800060a6:	58 08       	cp.w	r8,0
800060a8:	ca b0       	breq	80005ffe <PCA9952_read_reg+0xee>

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
800060aa:	30 08       	mov	r8,0
800060ac:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &data;
800060b0:	ee c8 00 21 	sub	r8,r7,33
800060b4:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
800060b8:	30 18       	mov	r8,1
800060ba:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_read(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
800060be:	ee c8 00 38 	sub	r8,r7,56
800060c2:	10 9b       	mov	r11,r8
800060c4:	fe 7c 38 00 	mov	r12,-51200
800060c8:	f0 1f 00 09 	mcall	800060ec <PCA9952_read_reg+0x1dc>
800060cc:	18 98       	mov	r8,r12
800060ce:	58 08       	cp.w	r8,0
800060d0:	cf 71       	brne	800060be <PCA9952_read_reg+0x1ae>

	return data;
800060d2:	ef 38 ff df 	ld.ub	r8,r7[-33]
}
800060d6:	10 9c       	mov	r12,r8
800060d8:	2e dd       	sub	sp,-76
800060da:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800060de:	00 00       	add	r0,r0
800060e0:	80 00       	ld.sh	r0,r0[0x0]
800060e2:	5e 60       	retmi	r0
800060e4:	00 00       	add	r0,r0
800060e6:	07 b4       	ld.ub	r4,r3[0x3]
800060e8:	80 00       	ld.sh	r0,r0[0x0]
800060ea:	c8 92       	brcc	80005ffc <PCA9952_read_reg+0xec>
800060ec:	80 00       	ld.sh	r0,r0[0x0]
800060ee:	5e 34       	retlo	r4

800060f0 <PCA9952_init>:


void PCA9952_init(void) //7apr15
{
800060f0:	eb cd 40 80 	pushm	r7,lr
800060f4:	1a 97       	mov	r7,sp
800060f6:	20 1d       	sub	sp,4
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
800060f8:	30 0a       	mov	r10,0
800060fa:	30 0b       	mov	r11,0
800060fc:	30 0c       	mov	r12,0
800060fe:	f0 1f 00 33 	mcall	800061c8 <PCA9952_init+0xd8>
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
80006102:	30 0a       	mov	r10,0
80006104:	30 1b       	mov	r11,1
80006106:	30 0c       	mov	r12,0
80006108:	f0 1f 00 30 	mcall	800061c8 <PCA9952_init+0xd8>
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
8000610c:	e0 6a 00 c8 	mov	r10,200
80006110:	34 3b       	mov	r11,67
80006112:	30 0c       	mov	r12,0
80006114:	f0 1f 00 2d 	mcall	800061c8 <PCA9952_init+0xd8>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
80006118:	30 0a       	mov	r10,0
8000611a:	30 2b       	mov	r11,2
8000611c:	30 0c       	mov	r12,0
8000611e:	f0 1f 00 2b 	mcall	800061c8 <PCA9952_init+0xd8>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
80006122:	30 0a       	mov	r10,0
80006124:	30 3b       	mov	r11,3
80006126:	30 0c       	mov	r12,0
80006128:	f0 1f 00 28 	mcall	800061c8 <PCA9952_init+0xd8>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
8000612c:	30 0a       	mov	r10,0
8000612e:	30 4b       	mov	r11,4
80006130:	30 0c       	mov	r12,0
80006132:	f0 1f 00 26 	mcall	800061c8 <PCA9952_init+0xd8>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
80006136:	30 0a       	mov	r10,0
80006138:	30 5b       	mov	r11,5
8000613a:	30 0c       	mov	r12,0
8000613c:	f0 1f 00 23 	mcall	800061c8 <PCA9952_init+0xd8>

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
80006140:	34 4b       	mov	r11,68
80006142:	30 0c       	mov	r12,0
80006144:	f0 1f 00 22 	mcall	800061cc <PCA9952_init+0xdc>
80006148:	18 98       	mov	r8,r12
8000614a:	ef 68 ff ff 	st.b	r7[-1],r8
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
8000614e:	34 5b       	mov	r11,69
80006150:	30 0c       	mov	r12,0
80006152:	f0 1f 00 1f 	mcall	800061cc <PCA9952_init+0xdc>
80006156:	18 98       	mov	r8,r12
80006158:	ef 68 ff fe 	st.b	r7[-2],r8

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
8000615c:	30 0a       	mov	r10,0
8000615e:	30 0b       	mov	r11,0
80006160:	30 1c       	mov	r12,1
80006162:	f0 1f 00 1a 	mcall	800061c8 <PCA9952_init+0xd8>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
80006166:	30 0a       	mov	r10,0
80006168:	30 1b       	mov	r11,1
8000616a:	30 1c       	mov	r12,1
8000616c:	f0 1f 00 17 	mcall	800061c8 <PCA9952_init+0xd8>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
80006170:	e0 6a 00 c8 	mov	r10,200
80006174:	34 3b       	mov	r11,67
80006176:	30 1c       	mov	r12,1
80006178:	f0 1f 00 14 	mcall	800061c8 <PCA9952_init+0xd8>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
8000617c:	30 0a       	mov	r10,0
8000617e:	30 2b       	mov	r11,2
80006180:	30 1c       	mov	r12,1
80006182:	f0 1f 00 12 	mcall	800061c8 <PCA9952_init+0xd8>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
80006186:	30 0a       	mov	r10,0
80006188:	30 3b       	mov	r11,3
8000618a:	30 1c       	mov	r12,1
8000618c:	f0 1f 00 0f 	mcall	800061c8 <PCA9952_init+0xd8>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
80006190:	30 0a       	mov	r10,0
80006192:	30 4b       	mov	r11,4
80006194:	30 1c       	mov	r12,1
80006196:	f0 1f 00 0d 	mcall	800061c8 <PCA9952_init+0xd8>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
8000619a:	30 0a       	mov	r10,0
8000619c:	30 5b       	mov	r11,5
8000619e:	30 1c       	mov	r12,1
800061a0:	f0 1f 00 0a 	mcall	800061c8 <PCA9952_init+0xd8>

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
800061a4:	34 4b       	mov	r11,68
800061a6:	30 1c       	mov	r12,1
800061a8:	f0 1f 00 09 	mcall	800061cc <PCA9952_init+0xdc>
800061ac:	18 98       	mov	r8,r12
800061ae:	ef 68 ff fd 	st.b	r7[-3],r8
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
800061b2:	34 5b       	mov	r11,69
800061b4:	30 1c       	mov	r12,1
800061b6:	f0 1f 00 06 	mcall	800061cc <PCA9952_init+0xdc>
800061ba:	18 98       	mov	r8,r12
800061bc:	ef 68 ff fc 	st.b	r7[-4],r8

}
800061c0:	2f fd       	sub	sp,-4
800061c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800061c6:	00 00       	add	r0,r0
800061c8:	80 00       	ld.sh	r0,r0[0x0]
800061ca:	5e 8c       	retls	r12
800061cc:	80 00       	ld.sh	r0,r0[0x0]
800061ce:	5f 10       	srne	r0

800061d0 <PCA9952_channel>:


void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn);
void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn)
{
800061d0:	eb cd 40 80 	pushm	r7,lr
800061d4:	1a 97       	mov	r7,sp
800061d6:	20 5d       	sub	sp,20
800061d8:	16 99       	mov	r9,r11
800061da:	14 98       	mov	r8,r10
800061dc:	18 9a       	mov	r10,r12
800061de:	ef 6a ff f4 	st.b	r7[-12],r10
800061e2:	ef 69 ff f0 	st.b	r7[-16],r9
800061e6:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char regIdx, regPos, regShadow, maskVal, writeVal;
	
	regIdx = (channel / 4); //LEDOUT0 controls channels 0..3, LEDOUT1 controls channels 4..7 etc.
800061ea:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800061ee:	a3 88       	lsr	r8,0x2
800061f0:	ef 68 ff fb 	st.b	r7[-5],r8
	regPos = (channel % 4);
800061f4:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800061f8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800061fc:	ef 68 ff fc 	st.b	r7[-4],r8
	
	switch(regIdx)
80006200:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006204:	58 18       	cp.w	r8,1
80006206:	c1 50       	breq	80006230 <PCA9952_channel+0x60>
80006208:	e0 89 00 05 	brgt	80006212 <PCA9952_channel+0x42>
8000620c:	58 08       	cp.w	r8,0
8000620e:	c0 70       	breq	8000621c <PCA9952_channel+0x4c>
80006210:	c2 d8       	rjmp	8000626a <PCA9952_channel+0x9a>
80006212:	58 28       	cp.w	r8,2
80006214:	c1 80       	breq	80006244 <PCA9952_channel+0x74>
80006216:	58 38       	cp.w	r8,3
80006218:	c2 00       	breq	80006258 <PCA9952_channel+0x88>
8000621a:	c2 88       	rjmp	8000626a <PCA9952_channel+0x9a>
	{
		case 0:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT0);
8000621c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006220:	30 2b       	mov	r11,2
80006222:	10 9c       	mov	r12,r8
80006224:	f0 1f 00 49 	mcall	80006348 <PCA9952_channel+0x178>
80006228:	18 98       	mov	r8,r12
8000622a:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
8000622e:	c1 e8       	rjmp	8000626a <PCA9952_channel+0x9a>
		case 1:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT1);
80006230:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006234:	30 3b       	mov	r11,3
80006236:	10 9c       	mov	r12,r8
80006238:	f0 1f 00 44 	mcall	80006348 <PCA9952_channel+0x178>
8000623c:	18 98       	mov	r8,r12
8000623e:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80006242:	c1 48       	rjmp	8000626a <PCA9952_channel+0x9a>
		case 2:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT2);
80006244:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006248:	30 4b       	mov	r11,4
8000624a:	10 9c       	mov	r12,r8
8000624c:	f0 1f 00 3f 	mcall	80006348 <PCA9952_channel+0x178>
80006250:	18 98       	mov	r8,r12
80006252:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80006256:	c0 a8       	rjmp	8000626a <PCA9952_channel+0x9a>
		case 3:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT3);
80006258:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000625c:	30 5b       	mov	r11,5
8000625e:	10 9c       	mov	r12,r8
80006260:	f0 1f 00 3a 	mcall	80006348 <PCA9952_channel+0x178>
80006264:	18 98       	mov	r8,r12
80006266:	ef 68 ff fd 	st.b	r7[-3],r8
			break;		
	}

	maskVal = 0xFF << (regPos * 2);
8000626a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000626e:	a1 78       	lsl	r8,0x1
80006270:	e0 69 00 ff 	mov	r9,255
80006274:	f2 08 09 48 	lsl	r8,r9,r8
80006278:	ef 68 ff fe 	st.b	r7[-2],r8
	maskVal = maskVal ^ 0xFF;
8000627c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006280:	5c d8       	com	r8
80006282:	ef 68 ff fe 	st.b	r7[-2],r8
	regShadow &= maskVal;
80006286:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000628a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000628e:	f3 e8 00 08 	and	r8,r9,r8
80006292:	ef 68 ff fd 	st.b	r7[-3],r8

	if (onOffn == LED_ON)
80006296:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000629a:	30 18       	mov	r8,1
8000629c:	f0 09 18 00 	cp.b	r9,r8
800062a0:	c0 a1       	brne	800062b4 <PCA9952_channel+0xe4>
	{
		writeVal = (0x01 << (regPos * 2));
800062a2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800062a6:	a1 78       	lsl	r8,0x1
800062a8:	30 19       	mov	r9,1
800062aa:	f2 08 09 48 	lsl	r8,r9,r8
800062ae:	ef 68 ff ff 	st.b	r7[-1],r8
800062b2:	c0 a8       	rjmp	800062c6 <PCA9952_channel+0xf6>
	}
	else if (onOffn == LED_OFF)
800062b4:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800062b8:	30 08       	mov	r8,0
800062ba:	f0 09 18 00 	cp.b	r9,r8
800062be:	c0 41       	brne	800062c6 <PCA9952_channel+0xf6>
	{
		writeVal = 0;
800062c0:	30 08       	mov	r8,0
800062c2:	ef 68 ff ff 	st.b	r7[-1],r8
	}
	
	regShadow |= writeVal;
800062c6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800062ca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800062ce:	f3 e8 10 08 	or	r8,r9,r8
800062d2:	ef 68 ff fd 	st.b	r7[-3],r8
	
	switch(regIdx)
800062d6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800062da:	58 18       	cp.w	r8,1
800062dc:	c1 50       	breq	80006306 <PCA9952_channel+0x136>
800062de:	e0 89 00 05 	brgt	800062e8 <PCA9952_channel+0x118>
800062e2:	58 08       	cp.w	r8,0
800062e4:	c0 70       	breq	800062f2 <PCA9952_channel+0x122>
800062e6:	c2 d8       	rjmp	80006340 <PCA9952_channel+0x170>
800062e8:	58 28       	cp.w	r8,2
800062ea:	c1 80       	breq	8000631a <PCA9952_channel+0x14a>
800062ec:	58 38       	cp.w	r8,3
800062ee:	c2 00       	breq	8000632e <PCA9952_channel+0x15e>
800062f0:	c2 88       	rjmp	80006340 <PCA9952_channel+0x170>
	{
		case 0:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT0, regShadow);
800062f2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800062f6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800062fa:	12 9a       	mov	r10,r9
800062fc:	30 2b       	mov	r11,2
800062fe:	10 9c       	mov	r12,r8
80006300:	f0 1f 00 13 	mcall	8000634c <PCA9952_channel+0x17c>
			break;
80006304:	c1 e8       	rjmp	80006340 <PCA9952_channel+0x170>
		case 1:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT1, regShadow);
80006306:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000630a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000630e:	12 9a       	mov	r10,r9
80006310:	30 3b       	mov	r11,3
80006312:	10 9c       	mov	r12,r8
80006314:	f0 1f 00 0e 	mcall	8000634c <PCA9952_channel+0x17c>
			break;
80006318:	c1 48       	rjmp	80006340 <PCA9952_channel+0x170>
		case 2:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT2, regShadow);
8000631a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000631e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006322:	12 9a       	mov	r10,r9
80006324:	30 4b       	mov	r11,4
80006326:	10 9c       	mov	r12,r8
80006328:	f0 1f 00 09 	mcall	8000634c <PCA9952_channel+0x17c>
			break;
8000632c:	c0 a8       	rjmp	80006340 <PCA9952_channel+0x170>
		case 3:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT3, regShadow);
8000632e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006332:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006336:	12 9a       	mov	r10,r9
80006338:	30 5b       	mov	r11,5
8000633a:	10 9c       	mov	r12,r8
8000633c:	f0 1f 00 04 	mcall	8000634c <PCA9952_channel+0x17c>
			break;
	}

}
80006340:	2f bd       	sub	sp,-20
80006342:	e3 cd 80 80 	ldm	sp++,r7,pc
80006346:	00 00       	add	r0,r0
80006348:	80 00       	ld.sh	r0,r0[0x0]
8000634a:	5f 10       	srne	r0
8000634c:	80 00       	ld.sh	r0,r0[0x0]
8000634e:	5e 8c       	retls	r12

80006350 <led_shelf>:

void led_shelf(unsigned char shelf, unsigned char onOffn)
{
80006350:	eb cd 40 80 	pushm	r7,lr
80006354:	1a 97       	mov	r7,sp
80006356:	20 2d       	sub	sp,8
80006358:	18 99       	mov	r9,r12
8000635a:	16 98       	mov	r8,r11
8000635c:	ef 69 ff fc 	st.b	r7[-4],r9
80006360:	ef 68 ff f8 	st.b	r7[-8],r8
	switch(shelf)
80006364:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006368:	58 18       	cp.w	r8,1
8000636a:	c2 f0       	breq	800063c8 <led_shelf+0x78>
8000636c:	e0 89 00 05 	brgt	80006376 <led_shelf+0x26>
80006370:	58 08       	cp.w	r8,0
80006372:	c0 70       	breq	80006380 <led_shelf+0x30>
80006374:	c9 58       	rjmp	8000649e <led_shelf+0x14e>
80006376:	58 28       	cp.w	r8,2
80006378:	c4 c0       	breq	80006410 <led_shelf+0xc0>
8000637a:	58 38       	cp.w	r8,3
8000637c:	c6 e0       	breq	80006458 <led_shelf+0x108>
8000637e:	c9 08       	rjmp	8000649e <led_shelf+0x14e>
	{
		case 0: //bottom of LED board 0 which is the upper board in the shelf, and top of LED board 1 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 0, onOffn);
80006380:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006384:	10 9a       	mov	r10,r8
80006386:	30 0b       	mov	r11,0
80006388:	30 1c       	mov	r12,1
8000638a:	f0 1f 00 47 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 1, onOffn);
8000638e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006392:	10 9a       	mov	r10,r8
80006394:	30 1b       	mov	r11,1
80006396:	30 1c       	mov	r12,1
80006398:	f0 1f 00 43 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 2, onOffn);
8000639c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063a0:	10 9a       	mov	r10,r8
800063a2:	30 2b       	mov	r11,2
800063a4:	30 1c       	mov	r12,1
800063a6:	f0 1f 00 40 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 0, onOffn);
800063aa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063ae:	10 9a       	mov	r10,r8
800063b0:	30 0b       	mov	r11,0
800063b2:	30 0c       	mov	r12,0
800063b4:	f0 1f 00 3c 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 1, onOffn);
800063b8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063bc:	10 9a       	mov	r10,r8
800063be:	30 1b       	mov	r11,1
800063c0:	30 0c       	mov	r12,0
800063c2:	f0 1f 00 39 	mcall	800064a4 <led_shelf+0x154>
			break;
800063c6:	c6 c8       	rjmp	8000649e <led_shelf+0x14e>

		case 1: //bottom of LED board 1 which is the upper board in the shelf, and top of LED board 2 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 3, onOffn);
800063c8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063cc:	10 9a       	mov	r10,r8
800063ce:	30 3b       	mov	r11,3
800063d0:	30 1c       	mov	r12,1
800063d2:	f0 1f 00 35 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 4, onOffn);
800063d6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063da:	10 9a       	mov	r10,r8
800063dc:	30 4b       	mov	r11,4
800063de:	30 1c       	mov	r12,1
800063e0:	f0 1f 00 31 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 5, onOffn);
800063e4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063e8:	10 9a       	mov	r10,r8
800063ea:	30 5b       	mov	r11,5
800063ec:	30 1c       	mov	r12,1
800063ee:	f0 1f 00 2e 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 2, onOffn);
800063f2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063f6:	10 9a       	mov	r10,r8
800063f8:	30 2b       	mov	r11,2
800063fa:	30 0c       	mov	r12,0
800063fc:	f0 1f 00 2a 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 3, onOffn);
80006400:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006404:	10 9a       	mov	r10,r8
80006406:	30 3b       	mov	r11,3
80006408:	30 0c       	mov	r12,0
8000640a:	f0 1f 00 27 	mcall	800064a4 <led_shelf+0x154>
			break;
8000640e:	c4 88       	rjmp	8000649e <led_shelf+0x14e>

		case 2: //bottom of LED board 2 which is the upper board in the shelf, and top of LED board 3 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 6, onOffn);
80006410:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006414:	10 9a       	mov	r10,r8
80006416:	30 6b       	mov	r11,6
80006418:	30 1c       	mov	r12,1
8000641a:	f0 1f 00 23 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 7, onOffn);
8000641e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006422:	10 9a       	mov	r10,r8
80006424:	30 7b       	mov	r11,7
80006426:	30 1c       	mov	r12,1
80006428:	f0 1f 00 1f 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 8, onOffn);
8000642c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006430:	10 9a       	mov	r10,r8
80006432:	30 8b       	mov	r11,8
80006434:	30 1c       	mov	r12,1
80006436:	f0 1f 00 1c 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 4, onOffn);
8000643a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000643e:	10 9a       	mov	r10,r8
80006440:	30 4b       	mov	r11,4
80006442:	30 0c       	mov	r12,0
80006444:	f0 1f 00 18 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 5, onOffn);
80006448:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000644c:	10 9a       	mov	r10,r8
8000644e:	30 5b       	mov	r11,5
80006450:	30 0c       	mov	r12,0
80006452:	f0 1f 00 15 	mcall	800064a4 <led_shelf+0x154>
			break;
80006456:	c2 48       	rjmp	8000649e <led_shelf+0x14e>

		case 3: //bottom of LED board 3 which is the upper board in the shelf, and top of LED board 4 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 9, onOffn);
80006458:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000645c:	10 9a       	mov	r10,r8
8000645e:	30 9b       	mov	r11,9
80006460:	30 1c       	mov	r12,1
80006462:	f0 1f 00 11 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 10, onOffn);
80006466:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000646a:	10 9a       	mov	r10,r8
8000646c:	30 ab       	mov	r11,10
8000646e:	30 1c       	mov	r12,1
80006470:	f0 1f 00 0d 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 11, onOffn);
80006474:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006478:	10 9a       	mov	r10,r8
8000647a:	30 bb       	mov	r11,11
8000647c:	30 1c       	mov	r12,1
8000647e:	f0 1f 00 0a 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 6, onOffn);
80006482:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006486:	10 9a       	mov	r10,r8
80006488:	30 6b       	mov	r11,6
8000648a:	30 0c       	mov	r12,0
8000648c:	f0 1f 00 06 	mcall	800064a4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 7, onOffn);
80006490:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006494:	10 9a       	mov	r10,r8
80006496:	30 7b       	mov	r11,7
80006498:	30 0c       	mov	r12,0
8000649a:	f0 1f 00 03 	mcall	800064a4 <led_shelf+0x154>
			break;
	}	
	
}
8000649e:	2f ed       	sub	sp,-8
800064a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800064a4:	80 00       	ld.sh	r0,r0[0x0]
800064a6:	61 d0       	ld.w	r0,r0[0x74]
800064a8:	43 68       	lddsp	r8,sp[0xd8]
800064aa:	61 73       	ld.w	r3,r0[0x5c]
800064ac:	73 69       	ld.w	r9,r9[0x58]
800064ae:	73 20       	ld.w	r0,r9[0x48]
800064b0:	65 72       	ld.w	r2,r2[0x5c]
800064b2:	72 6f       	ld.w	pc,r9[0x18]
800064b4:	72 2e       	ld.w	lr,r9[0x8]
800064b6:	2e 2e       	sub	lr,-30
800064b8:	73 68       	ld.w	r8,r9[0x58]
800064ba:	75 74       	ld.w	r4,r10[0x5c]
800064bc:	74 69       	ld.w	r9,r10[0x18]
800064be:	6e 67       	ld.w	r7,r7[0x18]
800064c0:	20 64       	sub	r4,6
800064c2:	6f 77       	ld.w	r7,r7[0x5c]
800064c4:	6e 2e       	ld.w	lr,r7[0x8]
800064c6:	0d 0a       	ld.w	r10,r6++
800064c8:	00 00       	add	r0,r0
800064ca:	00 00       	add	r0,r0
800064cc:	25 64       	sub	r4,86
800064ce:	00 00       	add	r0,r0
800064d0:	4c 45       	lddpc	r5,800065e0 <led_shelf+0x290>
800064d2:	44 20       	lddsp	r0,sp[0x108]
800064d4:	62 6f       	ld.w	pc,r1[0x18]
800064d6:	61 72       	ld.w	r2,r0[0x5c]
800064d8:	64 20       	ld.w	r0,r2[0x8]
800064da:	64 65       	ld.w	r5,r2[0x18]
800064dc:	74 65       	ld.w	r5,r10[0x18]
800064de:	63 74       	ld.w	r4,r1[0x5c]
800064e0:	65 64       	ld.w	r4,r2[0x58]
800064e2:	20 69       	sub	r9,6
800064e4:	6e 20       	ld.w	r0,r7[0x8]
800064e6:	73 6c       	ld.w	r12,r9[0x58]
800064e8:	6f 74       	ld.w	r4,r7[0x5c]
800064ea:	20 00       	sub	r0,0
800064ec:	0d 0a       	ld.w	r10,r6++
800064ee:	00 00       	add	r0,r0
800064f0:	53 68       	stdsp	sp[0xd8],r8
800064f2:	65 6c       	ld.w	r12,r2[0x58]
800064f4:	66 20       	ld.w	r0,r3[0x8]
800064f6:	30 20       	mov	r0,2
800064f8:	70 72       	ld.w	r2,r8[0x1c]
800064fa:	65 73       	ld.w	r3,r2[0x5c]
800064fc:	65 6e       	ld.w	lr,r2[0x58]
800064fe:	74 0d       	ld.w	sp,r10[0x0]
80006500:	0a 00       	add	r0,r5
80006502:	00 00       	add	r0,r0
80006504:	53 68       	stdsp	sp[0xd8],r8
80006506:	65 6c       	ld.w	r12,r2[0x58]
80006508:	66 20       	ld.w	r0,r3[0x8]
8000650a:	31 20       	mov	r0,18
8000650c:	70 72       	ld.w	r2,r8[0x1c]
8000650e:	65 73       	ld.w	r3,r2[0x5c]
80006510:	65 6e       	ld.w	lr,r2[0x58]
80006512:	74 0d       	ld.w	sp,r10[0x0]
80006514:	0a 00       	add	r0,r5
80006516:	00 00       	add	r0,r0
80006518:	53 68       	stdsp	sp[0xd8],r8
8000651a:	65 6c       	ld.w	r12,r2[0x58]
8000651c:	66 20       	ld.w	r0,r3[0x8]
8000651e:	32 20       	mov	r0,34
80006520:	70 72       	ld.w	r2,r8[0x1c]
80006522:	65 73       	ld.w	r3,r2[0x5c]
80006524:	65 6e       	ld.w	lr,r2[0x58]
80006526:	74 0d       	ld.w	sp,r10[0x0]
80006528:	0a 00       	add	r0,r5
8000652a:	00 00       	add	r0,r0
8000652c:	53 68       	stdsp	sp[0xd8],r8
8000652e:	65 6c       	ld.w	r12,r2[0x58]
80006530:	66 20       	ld.w	r0,r3[0x8]
80006532:	33 20       	mov	r0,50
80006534:	70 72       	ld.w	r2,r8[0x1c]
80006536:	65 73       	ld.w	r3,r2[0x5c]
80006538:	65 6e       	ld.w	lr,r2[0x58]
8000653a:	74 0d       	ld.w	sp,r10[0x0]
8000653c:	0a 00       	add	r0,r5
8000653e:	00 00       	add	r0,r0
80006540:	49 6e       	lddpc	lr,80006598 <led_shelf+0x248>
80006542:	76 61       	ld.w	r1,r11[0x18]
80006544:	6c 69       	ld.w	r9,r6[0x18]
80006546:	64 20       	ld.w	r0,r2[0x8]
80006548:	73 65       	ld.w	r5,r9[0x58]
8000654a:	72 69       	ld.w	r9,r9[0x18]
8000654c:	61 6c       	ld.w	r12,r0[0x58]
8000654e:	20 49       	sub	r9,4
80006550:	44 20       	lddsp	r0,sp[0x108]
80006552:	63 68       	ld.w	r8,r1[0x58]
80006554:	65 63       	ld.w	r3,r2[0x58]
80006556:	6b 73       	ld.w	r3,r5[0x5c]
80006558:	75 6d       	ld.w	sp,r10[0x58]
8000655a:	2e 0d       	sub	sp,-128
8000655c:	0a 00       	add	r0,r5
8000655e:	00 00       	add	r0,r0
80006560:	73 68       	ld.w	r8,r9[0x58]
80006562:	65 6c       	ld.w	r12,r2[0x58]
80006564:	66 20       	ld.w	r0,r3[0x8]
80006566:	25 64       	sub	r4,86
80006568:	3a 20       	mov	r0,-94
8000656a:	62 6c       	ld.w	r12,r1[0x18]
8000656c:	75 65       	ld.w	r5,r10[0x58]
8000656e:	73 65       	ld.w	r5,r9[0x58]
80006570:	6e 73       	ld.w	r3,r7[0x1c]
80006572:	65 5b       	ld.w	r11,r2[0x54]
80006574:	25 64       	sub	r4,86
80006576:	5d 3d       	musfr	sp
80006578:	30 78       	mov	r8,7
8000657a:	25 58       	sub	r8,85
8000657c:	0d 0a       	ld.w	r10,r6++
8000657e:	00 00       	add	r0,r0
80006580:	44 65       	lddsp	r5,sp[0x118]
80006582:	76 69       	ld.w	r9,r11[0x18]
80006584:	63 65       	ld.w	r5,r1[0x58]
80006586:	73 20       	ld.w	r0,r9[0x48]
80006588:	64 65       	ld.w	r5,r2[0x18]
8000658a:	74 65       	ld.w	r5,r10[0x18]
8000658c:	63 74       	ld.w	r4,r1[0x5c]
8000658e:	65 64       	ld.w	r4,r2[0x58]
80006590:	20 6f       	sub	pc,6
80006592:	6e 20       	ld.w	r0,r7[0x8]
80006594:	73 68       	ld.w	r8,r9[0x58]
80006596:	65 6c       	ld.w	r12,r2[0x58]
80006598:	66 20       	ld.w	r0,r3[0x8]
8000659a:	00 00       	add	r0,r0
8000659c:	50 43       	stdsp	sp[0x10],r3
8000659e:	41 39       	lddsp	r9,sp[0x4c]
800065a0:	39 35       	mov	r5,-109
800065a2:	32 20       	mov	r0,34
800065a4:	45 72       	lddsp	r2,sp[0x15c]
800065a6:	72 6f       	ld.w	pc,r9[0x18]
800065a8:	72 28       	ld.w	r8,r9[0x8]
800065aa:	73 29       	ld.w	r9,r9[0x48]
800065ac:	20 6f       	sub	pc,6
800065ae:	6e 20       	ld.w	r0,r7[0x8]
800065b0:	54 4f       	stdsp	sp[0x110],pc
800065b2:	50 44       	stdsp	sp[0x10],r4
800065b4:	52 49       	stdsp	sp[0x90],r9
800065b6:	56 45       	stdsp	sp[0x190],r5
800065b8:	20 00       	sub	r0,0
800065ba:	00 00       	add	r0,r0
800065bc:	20 00       	sub	r0,0
800065be:	00 00       	add	r0,r0
800065c0:	45 52       	lddsp	r2,sp[0x154]
800065c2:	52 4f       	stdsp	sp[0x90],pc
800065c4:	52 20       	stdsp	sp[0x88],r0
800065c6:	6f 6e       	ld.w	lr,r7[0x58]
800065c8:	20 75       	sub	r5,7
800065ca:	6e 75       	ld.w	r5,r7[0x1c]
800065cc:	73 65       	ld.w	r5,r9[0x58]
800065ce:	64 20       	ld.w	r0,r2[0x8]
800065d0:	63 68       	ld.w	r8,r1[0x58]
800065d2:	61 6e       	ld.w	lr,r0[0x58]
800065d4:	6e 65       	ld.w	r5,r7[0x18]
800065d6:	6c 73       	ld.w	r3,r6[0x1c]
800065d8:	3a 20       	mov	r0,-94
800065da:	50 43       	stdsp	sp[0x10],r3
800065dc:	41 39       	lddsp	r9,sp[0x4c]
800065de:	39 35       	mov	r5,-109
800065e0:	32 20       	mov	r0,34
800065e2:	2d 20       	sub	r0,-46
800065e4:	43 6f       	lddsp	pc,sp[0xd8]
800065e6:	6e 74       	ld.w	r4,r7[0x1c]
800065e8:	72 6f       	ld.w	pc,r9[0x18]
800065ea:	6c 6c       	ld.w	r12,r6[0x18]
800065ec:	65 72       	ld.w	r2,r2[0x5c]
800065ee:	20 62       	sub	r2,6
800065f0:	6f 61       	ld.w	r1,r7[0x58]
800065f2:	72 64       	ld.w	r4,r9[0x18]
800065f4:	20 55       	sub	r5,5
800065f6:	37 0d       	mov	sp,112
800065f8:	0a 00       	add	r0,r5
800065fa:	00 00       	add	r0,r0
800065fc:	50 43       	stdsp	sp[0x10],r3
800065fe:	41 39       	lddsp	r9,sp[0x4c]
80006600:	39 35       	mov	r5,-109
80006602:	32 20       	mov	r0,34
80006604:	45 72       	lddsp	r2,sp[0x15c]
80006606:	72 6f       	ld.w	pc,r9[0x18]
80006608:	72 28       	ld.w	r8,r9[0x8]
8000660a:	73 29       	ld.w	r9,r9[0x48]
8000660c:	20 6f       	sub	pc,6
8000660e:	6e 20       	ld.w	r0,r7[0x8]
80006610:	42 4f       	lddsp	pc,sp[0x90]
80006612:	54 44       	stdsp	sp[0x110],r4
80006614:	52 49       	stdsp	sp[0x90],r9
80006616:	56 45       	stdsp	sp[0x190],r5
80006618:	20 00       	sub	r0,0
8000661a:	00 00       	add	r0,r0
8000661c:	45 52       	lddsp	r2,sp[0x154]
8000661e:	52 4f       	stdsp	sp[0x90],pc
80006620:	52 20       	stdsp	sp[0x88],r0
80006622:	6f 6e       	ld.w	lr,r7[0x58]
80006624:	20 75       	sub	r5,7
80006626:	6e 75       	ld.w	r5,r7[0x1c]
80006628:	73 65       	ld.w	r5,r9[0x58]
8000662a:	64 20       	ld.w	r0,r2[0x8]
8000662c:	63 68       	ld.w	r8,r1[0x58]
8000662e:	61 6e       	ld.w	lr,r0[0x58]
80006630:	6e 65       	ld.w	r5,r7[0x18]
80006632:	6c 73       	ld.w	r3,r6[0x1c]
80006634:	3a 20       	mov	r0,-94
80006636:	50 43       	stdsp	sp[0x10],r3
80006638:	41 39       	lddsp	r9,sp[0x4c]
8000663a:	39 35       	mov	r5,-109
8000663c:	32 20       	mov	r0,34
8000663e:	2d 20       	sub	r0,-46
80006640:	43 6f       	lddsp	pc,sp[0xd8]
80006642:	6e 74       	ld.w	r4,r7[0x1c]
80006644:	72 6f       	ld.w	pc,r9[0x18]
80006646:	6c 6c       	ld.w	r12,r6[0x18]
80006648:	65 72       	ld.w	r2,r2[0x5c]
8000664a:	20 62       	sub	r2,6
8000664c:	6f 61       	ld.w	r1,r7[0x58]
8000664e:	72 64       	ld.w	r4,r9[0x18]
80006650:	20 55       	sub	r5,5
80006652:	38 0d       	mov	sp,-128
80006654:	0a 00       	add	r0,r5
80006656:	00 00       	add	r0,r0
80006658:	53 68       	stdsp	sp[0xd8],r8
8000665a:	65 6c       	ld.w	r12,r2[0x58]
8000665c:	66 20       	ld.w	r0,r3[0x8]
8000665e:	30 20       	mov	r0,2
80006660:	61 63       	ld.w	r3,r0[0x58]
80006662:	74 69       	ld.w	r9,r10[0x18]
80006664:	76 65       	ld.w	r5,r11[0x18]
80006666:	0d 0a       	ld.w	r10,r6++
80006668:	00 00       	add	r0,r0
8000666a:	00 00       	add	r0,r0
8000666c:	53 68       	stdsp	sp[0xd8],r8
8000666e:	65 6c       	ld.w	r12,r2[0x58]
80006670:	66 20       	ld.w	r0,r3[0x8]
80006672:	31 20       	mov	r0,18
80006674:	61 63       	ld.w	r3,r0[0x58]
80006676:	74 69       	ld.w	r9,r10[0x18]
80006678:	76 65       	ld.w	r5,r11[0x18]
8000667a:	0d 0a       	ld.w	r10,r6++
8000667c:	00 00       	add	r0,r0
8000667e:	00 00       	add	r0,r0
80006680:	53 68       	stdsp	sp[0xd8],r8
80006682:	65 6c       	ld.w	r12,r2[0x58]
80006684:	66 20       	ld.w	r0,r3[0x8]
80006686:	32 20       	mov	r0,34
80006688:	61 63       	ld.w	r3,r0[0x58]
8000668a:	74 69       	ld.w	r9,r10[0x18]
8000668c:	76 65       	ld.w	r5,r11[0x18]
8000668e:	0d 0a       	ld.w	r10,r6++
80006690:	00 00       	add	r0,r0
80006692:	00 00       	add	r0,r0
80006694:	53 68       	stdsp	sp[0xd8],r8
80006696:	65 6c       	ld.w	r12,r2[0x58]
80006698:	66 20       	ld.w	r0,r3[0x8]
8000669a:	33 20       	mov	r0,50
8000669c:	61 63       	ld.w	r3,r0[0x58]
8000669e:	74 69       	ld.w	r9,r10[0x18]
800066a0:	76 65       	ld.w	r5,r11[0x18]
800066a2:	0d 0a       	ld.w	r10,r6++
800066a4:	00 00       	add	r0,r0
800066a6:	00 00       	add	r0,r0
800066a8:	44 6f       	lddsp	pc,sp[0x118]
800066aa:	6f 72       	ld.w	r2,r7[0x5c]
800066ac:	20 6c       	sub	r12,6
800066ae:	61 74       	ld.w	r4,r0[0x5c]
800066b0:	63 68       	ld.w	r8,r1[0x58]
800066b2:	20 6f       	sub	pc,6
800066b4:	70 65       	ld.w	r5,r8[0x18]
800066b6:	6e 65       	ld.w	r5,r7[0x18]
800066b8:	64 2c       	ld.w	r12,r2[0x8]
800066ba:	20 6b       	sub	r11,6
800066bc:	69 6c       	ld.w	r12,r4[0x58]
800066be:	6c 20       	ld.w	r0,r6[0x8]
800066c0:	61 6c       	ld.w	r12,r0[0x58]
800066c2:	6c 20       	ld.w	r0,r6[0x8]
800066c4:	73 68       	ld.w	r8,r9[0x58]
800066c6:	65 6c       	ld.w	r12,r2[0x58]
800066c8:	76 65       	ld.w	r5,r11[0x18]
800066ca:	73 20       	ld.w	r0,r9[0x48]
800066cc:	66 6f       	ld.w	pc,r3[0x18]
800066ce:	72 20       	ld.w	r0,r9[0x8]
800066d0:	73 61       	ld.w	r1,r9[0x58]
800066d2:	66 65       	ld.w	r5,r3[0x18]
800066d4:	74 79       	ld.w	r9,r10[0x1c]
800066d6:	2e 0d       	sub	sp,-128
800066d8:	0a 00       	add	r0,r5
800066da:	00 00       	add	r0,r0
800066dc:	65 76       	ld.w	r6,r2[0x5c]
800066de:	61 6c       	ld.w	r12,r0[0x58]
800066e0:	5f 72       	srpl	r2
800066e2:	65 67       	ld.w	r7,r2[0x58]
800066e4:	69 6f       	ld.w	pc,r4[0x58]
800066e6:	6e 28       	ld.w	r8,r7[0x8]
800066e8:	29 20       	sub	r0,-110
800066ea:	00 00       	add	r0,r0
800066ec:	72 65       	ld.w	r5,r9[0x18]
800066ee:	67 69       	ld.w	r9,r3[0x58]
800066f0:	6f 6e       	ld.w	lr,r7[0x58]
800066f2:	20 30       	sub	r0,3
800066f4:	20 2d       	sub	sp,8
800066f6:	20 73       	sub	r3,7
800066f8:	65 72       	ld.w	r2,r2[0x5c]
800066fa:	69 61       	ld.w	r1,r4[0x58]
800066fc:	6c 20       	ld.w	r0,r6[0x8]
800066fe:	49 44       	lddpc	r4,8000674c <led_shelf+0x3fc>
80006700:	20 61       	sub	r1,6
80006702:	6e 64       	ld.w	r4,r7[0x18]
80006704:	20 66       	sub	r6,6
80006706:	6c 61       	ld.w	r1,r6[0x18]
80006708:	67 73       	ld.w	r3,r3[0x5c]
8000670a:	0d 0a       	ld.w	r10,r6++
8000670c:	00 00       	add	r0,r0
8000670e:	00 00       	add	r0,r0
80006710:	67 6f       	ld.w	pc,r3[0x58]
80006712:	6f 64       	ld.w	r4,r7[0x58]
80006714:	20 63       	sub	r3,6
80006716:	73 75       	ld.w	r5,r9[0x5c]
80006718:	6d 0d       	ld.w	sp,r6[0x40]
8000671a:	0a 00       	add	r0,r5
8000671c:	73 66       	ld.w	r6,r9[0x58]
8000671e:	46 6c       	lddsp	r12,sp[0x198]
80006720:	61 73       	ld.w	r3,r0[0x5c]
80006722:	68 49       	ld.w	r9,r4[0x10]
80006724:	64 78       	ld.w	r8,r2[0x1c]
80006726:	20 00       	sub	r0,0
80006728:	72 65       	ld.w	r5,r9[0x18]
8000672a:	67 69       	ld.w	r9,r3[0x58]
8000672c:	6f 6e       	ld.w	lr,r7[0x58]
8000672e:	20 31       	sub	r1,3
80006730:	20 2d       	sub	sp,8
80006732:	20 73       	sub	r3,7
80006734:	61 6e       	ld.w	lr,r0[0x58]
80006736:	69 74       	ld.w	r4,r4[0x5c]
80006738:	61 74       	ld.w	r4,r0[0x5c]
8000673a:	69 6f       	ld.w	pc,r4[0x58]
8000673c:	6e 20       	ld.w	r0,r7[0x8]
8000673e:	63 79       	ld.w	r9,r1[0x5c]
80006740:	63 6c       	ld.w	r12,r1[0x58]
80006742:	65 73       	ld.w	r3,r2[0x5c]
80006744:	0d 0a       	ld.w	r10,r6++
80006746:	00 00       	add	r0,r0
80006748:	73 61       	ld.w	r1,r9[0x58]
8000674a:	6e 43       	ld.w	r3,r7[0x10]
8000674c:	79 63       	ld.w	r3,r12[0x58]
8000674e:	6c 65       	ld.w	r5,r6[0x18]
80006750:	46 6c       	lddsp	r12,sp[0x198]
80006752:	61 73       	ld.w	r3,r0[0x5c]
80006754:	68 49       	ld.w	r9,r4[0x10]
80006756:	64 78       	ld.w	r8,r2[0x1c]
80006758:	20 00       	sub	r0,0
8000675a:	00 00       	add	r0,r0
8000675c:	72 65       	ld.w	r5,r9[0x18]
8000675e:	67 69       	ld.w	r9,r3[0x58]
80006760:	6f 6e       	ld.w	lr,r7[0x58]
80006762:	20 32       	sub	r2,3
80006764:	20 2d       	sub	sp,8
80006766:	20 75       	sub	r5,7
80006768:	73 61       	ld.w	r1,r9[0x58]
8000676a:	67 65       	ld.w	r5,r3[0x58]
8000676c:	20 68       	sub	r8,6
8000676e:	6f 75       	ld.w	r5,r7[0x5c]
80006770:	72 73       	ld.w	r3,r9[0x1c]
80006772:	0d 0a       	ld.w	r10,r6++
80006774:	00 00       	add	r0,r0
80006776:	00 00       	add	r0,r0
80006778:	68 46       	ld.w	r6,r4[0x10]
8000677a:	6c 61       	ld.w	r1,r6[0x18]
8000677c:	73 68       	ld.w	r8,r9[0x58]
8000677e:	49 64       	lddpc	r4,800067d4 <led_shelf+0x484>
80006780:	78 20       	ld.w	r0,r12[0x8]
80006782:	00 00       	add	r0,r0
80006784:	72 65       	ld.w	r5,r9[0x18]
80006786:	67 69       	ld.w	r9,r3[0x58]
80006788:	6f 6e       	ld.w	lr,r7[0x58]
8000678a:	20 33       	sub	r3,3
8000678c:	20 2d       	sub	sp,8
8000678e:	20 75       	sub	r5,7
80006790:	73 61       	ld.w	r1,r9[0x58]
80006792:	67 65       	ld.w	r5,r3[0x58]
80006794:	20 6d       	sub	sp,24
80006796:	69 6e       	ld.w	lr,r4[0x58]
80006798:	75 74       	ld.w	r4,r10[0x5c]
8000679a:	65 73       	ld.w	r3,r2[0x5c]
8000679c:	0d 0a       	ld.w	r10,r6++
8000679e:	00 00       	add	r0,r0
800067a0:	6d 46       	ld.w	r6,r6[0x50]
800067a2:	6c 61       	ld.w	r1,r6[0x18]
800067a4:	73 68       	ld.w	r8,r9[0x58]
800067a6:	49 64       	lddpc	r4,800067fc <led_shelf+0x4ac>
800067a8:	78 20       	ld.w	r0,r12[0x8]
800067aa:	00 00       	add	r0,r0
800067ac:	72 65       	ld.w	r5,r9[0x18]
800067ae:	67 69       	ld.w	r9,r3[0x58]
800067b0:	6f 6e       	ld.w	lr,r7[0x58]
800067b2:	20 34       	sub	r4,3
800067b4:	20 2d       	sub	sp,8
800067b6:	20 63       	sub	r3,6
800067b8:	6f 6e       	ld.w	lr,r7[0x58]
800067ba:	66 69       	ld.w	r9,r3[0x18]
800067bc:	67 75       	ld.w	r5,r3[0x5c]
800067be:	72 61       	ld.w	r1,r9[0x18]
800067c0:	74 69       	ld.w	r9,r10[0x18]
800067c2:	6f 6e       	ld.w	lr,r7[0x58]
800067c4:	0d 0a       	ld.w	r10,r6++
800067c6:	00 00       	add	r0,r0
800067c8:	63 6f       	ld.w	pc,r1[0x58]
800067ca:	6e 66       	ld.w	r6,r7[0x18]
800067cc:	69 67       	ld.w	r7,r4[0x58]
800067ce:	46 6c       	lddsp	r12,sp[0x198]
800067d0:	61 73       	ld.w	r3,r0[0x5c]
800067d2:	68 49       	ld.w	r9,r4[0x10]
800067d4:	64 78       	ld.w	r8,r2[0x1c]
800067d6:	20 00       	sub	r0,0
800067d8:	4e 6f       	lddpc	pc,80006970 <led_shelf+0x620>
800067da:	20 6d       	sub	sp,24
800067dc:	6f 72       	ld.w	r2,r7[0x5c]
800067de:	65 20       	ld.w	r0,r2[0x48]
800067e0:	72 6f       	ld.w	pc,r9[0x18]
800067e2:	6f 6d       	ld.w	sp,r7[0x58]
800067e4:	20 66       	sub	r6,6
800067e6:	6f 72       	ld.w	r2,r7[0x5c]
800067e8:	20 4c       	sub	r12,4
800067ea:	45 44       	lddsp	r4,sp[0x150]
800067ec:	20 62       	sub	r2,6
800067ee:	6f 61       	ld.w	r1,r7[0x58]
800067f0:	72 64       	ld.w	r4,r9[0x18]
800067f2:	20 69       	sub	r9,6
800067f4:	6e 66       	ld.w	r6,r7[0x18]
800067f6:	6f 2e       	ld.w	lr,r7[0x48]
800067f8:	20 43       	sub	r3,4
800067fa:	61 6e       	ld.w	lr,r0[0x58]
800067fc:	6e 6f       	ld.w	pc,r7[0x18]
800067fe:	74 20       	ld.w	r0,r10[0x8]
80006800:	74 72       	ld.w	r2,r10[0x1c]
80006802:	61 63       	ld.w	r3,r0[0x58]
80006804:	6b 20       	ld.w	r0,r5[0x48]
80006806:	6d 69       	ld.w	r9,r6[0x58]
80006808:	6e 75       	ld.w	r5,r7[0x1c]
8000680a:	74 65       	ld.w	r5,r10[0x18]
8000680c:	20 75       	sub	r5,7
8000680e:	73 61       	ld.w	r1,r9[0x58]
80006810:	67 65       	ld.w	r5,r3[0x58]
80006812:	20 66       	sub	r6,6
80006814:	6f 72       	ld.w	r2,r7[0x5c]
80006816:	20 61       	sub	r1,6
80006818:	64 64       	ld.w	r4,r2[0x18]
8000681a:	69 74       	ld.w	r4,r4[0x5c]
8000681c:	69 6f       	ld.w	pc,r4[0x58]
8000681e:	6e 61       	ld.w	r1,r7[0x18]
80006820:	6c 20       	ld.w	r0,r6[0x8]
80006822:	62 6f       	ld.w	pc,r1[0x18]
80006824:	61 72       	ld.w	r2,r0[0x5c]
80006826:	64 73       	ld.w	r3,r2[0x1c]
80006828:	2e 0d       	sub	sp,-128
8000682a:	0a 00       	add	r0,r5
8000682c:	41 6c       	lddsp	r12,sp[0x58]
8000682e:	6c 20       	ld.w	r0,r6[0x8]
80006830:	35 20       	mov	r0,82
80006832:	66 6c       	ld.w	r12,r3[0x18]
80006834:	61 73       	ld.w	r3,r0[0x5c]
80006836:	68 20       	ld.w	r0,r4[0x8]
80006838:	72 65       	ld.w	r5,r9[0x18]
8000683a:	67 69       	ld.w	r9,r3[0x58]
8000683c:	6f 6e       	ld.w	lr,r7[0x58]
8000683e:	73 20       	ld.w	r0,r9[0x48]
80006840:	68 61       	ld.w	r1,r4[0x18]
80006842:	76 65       	ld.w	r5,r11[0x18]
80006844:	20 67       	sub	r7,6
80006846:	6f 6f       	ld.w	pc,r7[0x58]
80006848:	64 20       	ld.w	r0,r2[0x8]
8000684a:	64 61       	ld.w	r1,r2[0x18]
8000684c:	74 61       	ld.w	r1,r10[0x18]
8000684e:	20 73       	sub	r3,7
80006850:	65 74       	ld.w	r4,r2[0x5c]
80006852:	73 2e       	ld.w	lr,r9[0x48]
80006854:	0d 0a       	ld.w	r10,r6++
80006856:	00 00       	add	r0,r0
80006858:	46 6c       	lddsp	r12,sp[0x198]
8000685a:	61 73       	ld.w	r3,r0[0x5c]
8000685c:	68 20       	ld.w	r0,r4[0x8]
8000685e:	61 72       	ld.w	r2,r0[0x5c]
80006860:	65 61       	ld.w	r1,r2[0x58]
80006862:	20 45       	sub	r5,4
80006864:	52 52       	stdsp	sp[0x94],r2
80006866:	4f 52       	lddpc	r2,80006a38 <led_shelf+0x6e8>
80006868:	3a 20       	mov	r0,-94
8000686a:	72 65       	ld.w	r5,r9[0x18]
8000686c:	67 69       	ld.w	r9,r3[0x58]
8000686e:	6f 6e       	ld.w	lr,r7[0x58]
80006870:	20 00       	sub	r0,0
80006872:	00 00       	add	r0,r0
80006874:	0d 0a       	ld.w	r10,r6++
80006876:	2a 2d       	sub	sp,-376
80006878:	2d 2d       	sub	sp,-184
8000687a:	2d 2d       	sub	sp,-184
8000687c:	2d 2d       	sub	sp,-184
8000687e:	2d 2d       	sub	sp,-184
80006880:	2d 2d       	sub	sp,-184
80006882:	2d 2d       	sub	sp,-184
80006884:	2d 2d       	sub	sp,-184
80006886:	2d 2d       	sub	sp,-184
80006888:	2d 2d       	sub	sp,-184
8000688a:	2d 2d       	sub	sp,-184
8000688c:	2d 2d       	sub	sp,-184
8000688e:	2d 2d       	sub	sp,-184
80006890:	2d 2d       	sub	sp,-184
80006892:	2d 2d       	sub	sp,-184
80006894:	2d 2d       	sub	sp,-184
80006896:	2d 2d       	sub	sp,-184
80006898:	2d 2d       	sub	sp,-184
8000689a:	2d 2d       	sub	sp,-184
8000689c:	2d 2d       	sub	sp,-184
8000689e:	2d 2d       	sub	sp,-184
800068a0:	2d 2d       	sub	sp,-184
800068a2:	2d 2d       	sub	sp,-184
800068a4:	2d 2d       	sub	sp,-184
800068a6:	2d 2d       	sub	sp,-184
800068a8:	2d 2d       	sub	sp,-184
800068aa:	2a 0d       	sub	sp,-384
800068ac:	0a 00       	add	r0,r5
800068ae:	00 00       	add	r0,r0
800068b0:	45 4c       	lddsp	r12,sp[0x150]
800068b2:	45 43       	lddsp	r3,sp[0x150]
800068b4:	54 52       	stdsp	sp[0x114],r2
800068b6:	4f 43       	lddpc	r3,80006a84 <led_shelf+0x734>
800068b8:	4c 41       	lddpc	r1,800069c8 <led_shelf+0x678>
800068ba:	56 45       	stdsp	sp[0x190],r5
800068bc:	0d 0a       	ld.w	r10,r6++
800068be:	43 6f       	lddsp	pc,sp[0xd8]
800068c0:	70 79       	ld.w	r9,r8[0x1c]
800068c2:	72 69       	ld.w	r9,r9[0x18]
800068c4:	67 68       	ld.w	r8,r3[0x58]
800068c6:	74 20       	ld.w	r0,r10[0x8]
800068c8:	28 63       	sub	r3,-122
800068ca:	29 20       	sub	r0,-110
800068cc:	32 30       	mov	r0,35
800068ce:	31 35       	mov	r5,19
800068d0:	20 53       	sub	r3,5
800068d2:	65 61       	ld.w	r1,r2[0x58]
800068d4:	6c 20       	ld.w	r0,r6[0x8]
800068d6:	53 68       	stdsp	sp[0xd8],r8
800068d8:	69 65       	ld.w	r5,r4[0x58]
800068da:	6c 64       	ld.w	r4,r6[0x18]
800068dc:	2c 20       	sub	r0,-62
800068de:	49 6e       	lddpc	lr,80006934 <led_shelf+0x5e4>
800068e0:	63 2e       	ld.w	lr,r1[0x48]
800068e2:	20 0d       	sub	sp,0
800068e4:	0a 00       	add	r0,r5
800068e6:	00 00       	add	r0,r0
800068e8:	48 61       	lddpc	r1,80006900 <led_shelf+0x5b0>
800068ea:	72 64       	ld.w	r4,r9[0x18]
800068ec:	77 61       	ld.w	r1,r11[0x58]
800068ee:	72 65       	ld.w	r5,r9[0x18]
800068f0:	20 56       	sub	r6,5
800068f2:	65 72       	ld.w	r2,r2[0x5c]
800068f4:	73 69       	ld.w	r9,r9[0x58]
800068f6:	6f 6e       	ld.w	lr,r7[0x58]
800068f8:	3a 20       	mov	r0,-94
800068fa:	43 6c       	lddsp	r12,sp[0xd8]
800068fc:	61 73       	ld.w	r3,r0[0x5c]
800068fe:	73 69       	ld.w	r9,r9[0x58]
80006900:	63 20       	ld.w	r0,r1[0x48]
80006902:	2b 2b       	sub	r11,-78
80006904:	2b 20       	sub	r0,-78
80006906:	53 6f       	stdsp	sp[0xd8],pc
80006908:	66 74       	ld.w	r4,r3[0x1c]
8000690a:	77 61       	ld.w	r1,r11[0x58]
8000690c:	72 65       	ld.w	r5,r9[0x18]
8000690e:	20 56       	sub	r6,5
80006910:	65 72       	ld.w	r2,r2[0x5c]
80006912:	73 69       	ld.w	r9,r9[0x58]
80006914:	6f 6e       	ld.w	lr,r7[0x58]
80006916:	3a 20       	mov	r0,-94
80006918:	30 2e       	mov	lr,2
8000691a:	30 36       	mov	r6,3
8000691c:	32 0d       	mov	sp,32
8000691e:	0a 00       	add	r0,r5
80006920:	0d 0a       	ld.w	r10,r6++
80006922:	2a 2a       	sub	r10,-94
80006924:	2a 49       	sub	r9,-92
80006926:	4e 53       	lddpc	r3,80006ab8 <led_shelf+0x768>
80006928:	54 41       	stdsp	sp[0x110],r1
8000692a:	4c 4c       	lddpc	r12,80006a38 <led_shelf+0x6e8>
8000692c:	45 44       	lddsp	r4,sp[0x150]
8000692e:	20 4c       	sub	r12,4
80006930:	45 44       	lddsp	r4,sp[0x150]
80006932:	20 42       	sub	r2,4
80006934:	4f 41       	lddpc	r1,80006b04 <led_shelf+0x7b4>
80006936:	52 44       	stdsp	sp[0x90],r4
80006938:	53 2a       	stdsp	sp[0xc8],r10
8000693a:	2a 2a       	sub	r10,-94
8000693c:	0d 0a       	ld.w	r10,r6++
8000693e:	0d 0a       	ld.w	r10,r6++
80006940:	00 00       	add	r0,r0
80006942:	00 00       	add	r0,r0
80006944:	20 4c       	sub	r12,4
80006946:	45 44       	lddsp	r4,sp[0x150]
80006948:	20 7c       	sub	r12,7
8000694a:	20 4c       	sub	r12,4
8000694c:	45 44       	lddsp	r4,sp[0x150]
8000694e:	20 42       	sub	r2,4
80006950:	4f 41       	lddpc	r1,80006b20 <led_shelf+0x7d0>
80006952:	52 44       	stdsp	sp[0x90],r4
80006954:	20 20       	sub	r0,2
80006956:	20 20       	sub	r0,2
80006958:	7c 20       	ld.w	r0,lr[0x8]
8000695a:	20 20       	sub	r0,2
8000695c:	55 50       	stdsp	sp[0x154],r0
8000695e:	50 45       	stdsp	sp[0x10],r5
80006960:	52 20       	stdsp	sp[0x88],r0
80006962:	53 49       	stdsp	sp[0xd0],r9
80006964:	44 45       	lddsp	r5,sp[0x110]
80006966:	20 20       	sub	r0,2
80006968:	20 20       	sub	r0,2
8000696a:	20 7c       	sub	r12,7
8000696c:	20 20       	sub	r0,2
8000696e:	20 4c       	sub	r12,4
80006970:	4f 57       	lddpc	r7,80006b44 <led_shelf+0x7f4>
80006972:	45 52       	lddsp	r2,sp[0x154]
80006974:	20 53       	sub	r3,5
80006976:	49 44       	lddpc	r4,800069c4 <led_shelf+0x674>
80006978:	45 20       	lddsp	r0,sp[0x148]
8000697a:	20 20       	sub	r0,2
8000697c:	20 0d       	sub	sp,0
8000697e:	0a 00       	add	r0,r5
80006980:	53 4c       	stdsp	sp[0xd0],r12
80006982:	4f 54       	lddpc	r4,80006b54 <led_shelf+0x804>
80006984:	20 7c       	sub	r12,7
80006986:	20 20       	sub	r0,2
80006988:	20 20       	sub	r0,2
8000698a:	49 44       	lddpc	r4,800069d8 <led_shelf+0x688>
8000698c:	20 20       	sub	r0,2
8000698e:	20 20       	sub	r0,2
80006990:	20 20       	sub	r0,2
80006992:	20 20       	sub	r0,2
80006994:	7c 20       	ld.w	r0,lr[0x8]
80006996:	48 52       	lddpc	r2,800069a8 <led_shelf+0x658>
80006998:	53 3a       	stdsp	sp[0xcc],r10
8000699a:	4d 49       	lddpc	r9,80006ae8 <led_shelf+0x798>
8000699c:	4e 20       	lddpc	r0,80006b24 <led_shelf+0x7d4>
8000699e:	20 20       	sub	r0,2
800069a0:	20 44       	sub	r4,4
800069a2:	54 45       	stdsp	sp[0x110],r5
800069a4:	20 20       	sub	r0,2
800069a6:	20 7c       	sub	r12,7
800069a8:	20 48       	sub	r8,4
800069aa:	52 53       	stdsp	sp[0x94],r3
800069ac:	3a 4d       	mov	sp,-92
800069ae:	49 4e       	lddpc	lr,800069fc <led_shelf+0x6ac>
800069b0:	20 20       	sub	r0,2
800069b2:	20 20       	sub	r0,2
800069b4:	44 54       	lddsp	r4,sp[0x114]
800069b6:	45 20       	lddsp	r0,sp[0x148]
800069b8:	20 20       	sub	r0,2
800069ba:	0d 0a       	ld.w	r10,r6++
800069bc:	00 00       	add	r0,r0
800069be:	00 00       	add	r0,r0
800069c0:	2d 2d       	sub	sp,-184
800069c2:	2d 2d       	sub	sp,-184
800069c4:	2d 2d       	sub	sp,-184
800069c6:	2d 2d       	sub	sp,-184
800069c8:	2d 2d       	sub	sp,-184
800069ca:	2d 2d       	sub	sp,-184
800069cc:	2d 2d       	sub	sp,-184
800069ce:	2d 2d       	sub	sp,-184
800069d0:	2d 2d       	sub	sp,-184
800069d2:	2d 2d       	sub	sp,-184
800069d4:	2d 2d       	sub	sp,-184
800069d6:	2d 2d       	sub	sp,-184
800069d8:	2d 2d       	sub	sp,-184
800069da:	2d 2d       	sub	sp,-184
800069dc:	2d 2d       	sub	sp,-184
800069de:	2d 2d       	sub	sp,-184
800069e0:	2d 2d       	sub	sp,-184
800069e2:	2d 2d       	sub	sp,-184
800069e4:	2d 2d       	sub	sp,-184
800069e6:	2d 2d       	sub	sp,-184
800069e8:	2d 2d       	sub	sp,-184
800069ea:	2d 2d       	sub	sp,-184
800069ec:	2d 2d       	sub	sp,-184
800069ee:	2d 2d       	sub	sp,-184
800069f0:	2d 2d       	sub	sp,-184
800069f2:	2d 2d       	sub	sp,-184
800069f4:	2d 2d       	sub	sp,-184
800069f6:	2d 2d       	sub	sp,-184
800069f8:	2d 2d       	sub	sp,-184
800069fa:	0d 0a       	ld.w	r10,r6++
800069fc:	00 00       	add	r0,r0
800069fe:	00 00       	add	r0,r0
80006a00:	25 32       	sub	r2,83
80006a02:	64 20       	ld.w	r0,r2[0x8]
80006a04:	20 20       	sub	r0,2
80006a06:	20 20       	sub	r0,2
80006a08:	25 30       	sub	r0,83
80006a0a:	32 58       	mov	r8,37
80006a0c:	25 30       	sub	r0,83
80006a0e:	32 58       	mov	r8,37
80006a10:	25 30       	sub	r0,83
80006a12:	32 58       	mov	r8,37
80006a14:	25 30       	sub	r0,83
80006a16:	32 58       	mov	r8,37
80006a18:	25 30       	sub	r0,83
80006a1a:	32 58       	mov	r8,37
80006a1c:	25 30       	sub	r0,83
80006a1e:	32 58       	mov	r8,37
80006a20:	20 20       	sub	r0,2
80006a22:	25 30       	sub	r0,83
80006a24:	34 64       	mov	r4,70
80006a26:	3a 25       	mov	r5,-94
80006a28:	30 32       	mov	r2,3
80006a2a:	64 20       	ld.w	r0,r2[0x8]
80006a2c:	20 20       	sub	r0,2
80006a2e:	20 20       	sub	r0,2
80006a30:	25 30       	sub	r0,83
80006a32:	32 64       	mov	r4,38
80006a34:	20 20       	sub	r0,2
80006a36:	20 20       	sub	r0,2
80006a38:	20 25       	sub	r5,2
80006a3a:	30 34       	mov	r4,3
80006a3c:	64 3a       	ld.w	r10,r2[0xc]
80006a3e:	25 30       	sub	r0,83
80006a40:	32 64       	mov	r4,38
80006a42:	20 20       	sub	r0,2
80006a44:	20 20       	sub	r0,2
80006a46:	20 25       	sub	r5,2
80006a48:	30 32       	mov	r2,3
80006a4a:	64 0d       	ld.w	sp,r2[0x0]
80006a4c:	0a 00       	add	r0,r5
80006a4e:	00 00       	add	r0,r0
80006a50:	4d 41       	lddpc	r1,80006ba0 <led_shelf+0x850>
80006a52:	58 20       	cp.w	r0,2
80006a54:	44 54       	lddsp	r4,sp[0x114]
80006a56:	45 3a       	lddsp	r10,sp[0x14c]
80006a58:	20 00       	sub	r0,0
80006a5a:	00 00       	add	r0,r0
80006a5c:	20 4d       	sub	sp,16
80006a5e:	49 4e       	lddpc	lr,80006aac <led_shelf+0x75c>
80006a60:	20 44       	sub	r4,4
80006a62:	54 45       	stdsp	sp[0x110],r5
80006a64:	3a 20       	mov	r0,-94
80006a66:	00 00       	add	r0,r0
80006a68:	54 4f       	stdsp	sp[0x110],pc
80006a6a:	54 41       	stdsp	sp[0x110],r1
80006a6c:	4c 20       	lddpc	r0,80006b74 <led_shelf+0x824>
80006a6e:	53 41       	stdsp	sp[0xd0],r1
80006a70:	4e 49       	lddpc	r9,80006c00 <led_shelf+0x8b0>
80006a72:	54 49       	stdsp	sp[0x110],r9
80006a74:	5a 45       	cp.w	r5,-28
80006a76:	20 54       	sub	r4,5
80006a78:	49 4d       	lddpc	sp,80006ac8 <led_shelf+0x778>
80006a7a:	45 3a       	lddsp	r10,sp[0x14c]
80006a7c:	20 00       	sub	r0,0
80006a7e:	00 00       	add	r0,r0
80006a80:	30 00       	mov	r0,0
80006a82:	00 00       	add	r0,r0
80006a84:	3a 00       	mov	r0,-96
80006a86:	00 00       	add	r0,r0
80006a88:	20 20       	sub	r0,2
80006a8a:	54 4f       	stdsp	sp[0x110],pc
80006a8c:	54 41       	stdsp	sp[0x110],r1
80006a8e:	4c 20       	lddpc	r0,80006b94 <led_shelf+0x844>
80006a90:	53 41       	stdsp	sp[0xd0],r1
80006a92:	4e 49       	lddpc	r9,80006c20 <led_shelf+0x8d0>
80006a94:	54 49       	stdsp	sp[0x110],r9
80006a96:	5a 45       	cp.w	r5,-28
80006a98:	20 43       	sub	r3,4
80006a9a:	59 43       	cp.w	r3,20
80006a9c:	4c 45       	lddpc	r5,80006bac <led_shelf+0x85c>
80006a9e:	53 3a       	stdsp	sp[0xcc],r10
80006aa0:	20 00       	sub	r0,0
80006aa2:	00 00       	add	r0,r0
80006aa4:	0d 0a       	ld.w	r10,r6++
80006aa6:	2a 2a       	sub	r10,-94
80006aa8:	2a 53       	sub	r3,-91
80006aaa:	59 53       	cp.w	r3,21
80006aac:	54 45       	stdsp	sp[0x110],r5
80006aae:	4d 20       	lddpc	r0,80006bf4 <led_shelf+0x8a4>
80006ab0:	54 45       	stdsp	sp[0x110],r5
80006ab2:	53 54       	stdsp	sp[0xd4],r4
80006ab4:	53 2a       	stdsp	sp[0xc8],r10
80006ab6:	2a 2a       	sub	r10,-94
80006ab8:	0d 0a       	ld.w	r10,r6++
80006aba:	0d 0a       	ld.w	r10,r6++
80006abc:	00 00       	add	r0,r0
80006abe:	00 00       	add	r0,r0
80006ac0:	4c 45       	lddpc	r5,80006bd0 <led_shelf+0x880>
80006ac2:	44 20       	lddsp	r0,sp[0x108]
80006ac4:	44 72       	lddsp	r2,sp[0x11c]
80006ac6:	69 76       	ld.w	r6,r4[0x5c]
80006ac8:	65 72       	ld.w	r2,r2[0x5c]
80006aca:	3a 20       	mov	r0,-94
80006acc:	54 4f       	stdsp	sp[0x110],pc
80006ace:	50 20       	stdsp	sp[0x8],r0
80006ad0:	28 30       	sub	r0,-125
80006ad2:	2e 2e       	sub	lr,-30
80006ad4:	37 29       	mov	r9,114
80006ad6:	20 20       	sub	r0,2
80006ad8:	20 20       	sub	r0,2
80006ada:	20 20       	sub	r0,2
80006adc:	20 20       	sub	r0,2
80006ade:	20 20       	sub	r0,2
80006ae0:	20 20       	sub	r0,2
80006ae2:	20 20       	sub	r0,2
80006ae4:	20 20       	sub	r0,2
80006ae6:	20 00       	sub	r0,0
80006ae8:	46 20       	lddsp	r0,sp[0x188]
80006aea:	00 00       	add	r0,r0
80006aec:	50 20       	stdsp	sp[0x8],r0
80006aee:	00 00       	add	r0,r0
80006af0:	4c 45       	lddpc	r5,80006c00 <led_shelf+0x8b0>
80006af2:	44 20       	lddsp	r0,sp[0x108]
80006af4:	44 72       	lddsp	r2,sp[0x11c]
80006af6:	69 76       	ld.w	r6,r4[0x5c]
80006af8:	65 72       	ld.w	r2,r2[0x5c]
80006afa:	3a 20       	mov	r0,-94
80006afc:	42 4f       	lddsp	pc,sp[0x90]
80006afe:	54 54       	stdsp	sp[0x114],r4
80006b00:	4f 4d       	lddpc	sp,80006cd0 <led_shelf+0x980>
80006b02:	20 28       	sub	r8,2
80006b04:	30 2e       	mov	lr,2
80006b06:	2e 31       	sub	r1,-29
80006b08:	31 29       	mov	r9,18
80006b0a:	20 20       	sub	r0,2
80006b0c:	20 20       	sub	r0,2
80006b0e:	20 20       	sub	r0,2
80006b10:	20 20       	sub	r0,2
80006b12:	20 20       	sub	r0,2
80006b14:	20 20       	sub	r0,2
80006b16:	20 00       	sub	r0,0
80006b18:	46 6c       	lddsp	r12,sp[0x198]
80006b1a:	61 73       	ld.w	r3,r0[0x5c]
80006b1c:	68 20       	ld.w	r0,r4[0x8]
80006b1e:	28 30       	sub	r0,-125
80006b20:	2e 2e       	sub	lr,-30
80006b22:	34 29       	mov	r9,66
80006b24:	20 20       	sub	r0,2
80006b26:	20 20       	sub	r0,2
80006b28:	20 20       	sub	r0,2
80006b2a:	20 20       	sub	r0,2
80006b2c:	20 20       	sub	r0,2
80006b2e:	20 20       	sub	r0,2
80006b30:	20 20       	sub	r0,2
80006b32:	20 20       	sub	r0,2
80006b34:	20 20       	sub	r0,2
80006b36:	20 20       	sub	r0,2
80006b38:	20 20       	sub	r0,2
80006b3a:	20 20       	sub	r0,2
80006b3c:	20 20       	sub	r0,2
80006b3e:	20 00       	sub	r0,0
80006b40:	4c 45       	lddpc	r5,80006c50 <led_shelf+0x900>
80006b42:	44 20       	lddsp	r0,sp[0x108]
80006b44:	42 6f       	lddsp	pc,sp[0x98]
80006b46:	61 72       	ld.w	r2,r0[0x5c]
80006b48:	64 20       	ld.w	r0,r2[0x8]
80006b4a:	53 65       	stdsp	sp[0xd8],r5
80006b4c:	72 69       	ld.w	r9,r9[0x18]
80006b4e:	61 6c       	ld.w	r12,r0[0x58]
80006b50:	20 49       	sub	r9,4
80006b52:	44 20       	lddsp	r0,sp[0x108]
80006b54:	43 68       	lddsp	r8,sp[0xd8]
80006b56:	65 63       	ld.w	r3,r2[0x58]
80006b58:	6b 73       	ld.w	r3,r5[0x5c]
80006b5a:	75 6d       	ld.w	sp,r10[0x58]
80006b5c:	73 20       	ld.w	r0,r9[0x48]
80006b5e:	28 30       	sub	r0,-125
80006b60:	2e 2e       	sub	lr,-30
80006b62:	34 29       	mov	r9,66
80006b64:	20 20       	sub	r0,2
80006b66:	20 00       	sub	r0,0
80006b68:	4c 45       	lddpc	r5,80006c78 <led_shelf+0x928>
80006b6a:	44 20       	lddsp	r0,sp[0x108]
80006b6c:	42 6f       	lddsp	pc,sp[0x98]
80006b6e:	61 72       	ld.w	r2,r0[0x5c]
80006b70:	64 20       	ld.w	r0,r2[0x8]
80006b72:	53 69       	stdsp	sp[0xd8],r9
80006b74:	64 65       	ld.w	r5,r2[0x18]
80006b76:	20 4d       	sub	sp,16
80006b78:	61 78       	ld.w	r8,r0[0x5c]
80006b7a:	20 55       	sub	r5,5
80006b7c:	73 61       	ld.w	r1,r9[0x58]
80006b7e:	67 65       	ld.w	r5,r3[0x58]
80006b80:	20 28       	sub	r8,2
80006b82:	30 2e       	mov	lr,2
80006b84:	2e 37       	sub	r7,-29
80006b86:	29 20       	sub	r0,-110
80006b88:	20 20       	sub	r0,2
80006b8a:	20 20       	sub	r0,2
80006b8c:	20 20       	sub	r0,2
80006b8e:	20 00       	sub	r0,0
80006b90:	55 73       	stdsp	sp[0x15c],r3
80006b92:	61 67       	ld.w	r7,r0[0x58]
80006b94:	65 20       	ld.w	r0,r2[0x48]
80006b96:	53 74       	stdsp	sp[0xdc],r4
80006b98:	72 75       	ld.w	r5,r9[0x1c]
80006b9a:	63 74       	ld.w	r4,r1[0x5c]
80006b9c:	20 4f       	sub	pc,4
80006b9e:	70 65       	ld.w	r5,r8[0x18]
80006ba0:	6e 20       	ld.w	r0,r7[0x8]
80006ba2:	53 6c       	stdsp	sp[0xd8],r12
80006ba4:	6f 74       	ld.w	r4,r7[0x5c]
80006ba6:	73 20       	ld.w	r0,r9[0x48]
80006ba8:	20 20       	sub	r0,2
80006baa:	20 20       	sub	r0,2
80006bac:	20 20       	sub	r0,2
80006bae:	20 20       	sub	r0,2
80006bb0:	20 20       	sub	r0,2
80006bb2:	20 20       	sub	r0,2
80006bb4:	20 20       	sub	r0,2
80006bb6:	20 00       	sub	r0,0
80006bb8:	46 20       	lddsp	r0,sp[0x188]
80006bba:	0d 0a       	ld.w	r10,r6++
80006bbc:	00 00       	add	r0,r0
80006bbe:	00 00       	add	r0,r0
80006bc0:	50 20       	stdsp	sp[0x8],r0
80006bc2:	0d 0a       	ld.w	r10,r6++
80006bc4:	00 00       	add	r0,r0
80006bc6:	00 00       	add	r0,r0
80006bc8:	0d 0a       	ld.w	r10,r6++
80006bca:	2a 2a       	sub	r10,-94
80006bcc:	2a 4c       	sub	r12,-92
80006bce:	45 44       	lddsp	r4,sp[0x150]
80006bd0:	20 42       	sub	r2,4
80006bd2:	4f 41       	lddpc	r1,80006da0 <led_shelf+0xa50>
80006bd4:	52 44       	stdsp	sp[0x90],r4
80006bd6:	53 20       	stdsp	sp[0xc8],r0
80006bd8:	4d 41       	lddpc	r1,80006d28 <led_shelf+0x9d8>
80006bda:	53 54       	stdsp	sp[0xd4],r4
80006bdc:	45 52       	lddsp	r2,sp[0x154]
80006bde:	20 4c       	sub	r12,4
80006be0:	49 53       	lddpc	r3,80006c34 <led_shelf+0x8e4>
80006be2:	54 2a       	stdsp	sp[0x108],r10
80006be4:	2a 2a       	sub	r10,-94
80006be6:	0d 0a       	ld.w	r10,r6++
80006be8:	0d 0a       	ld.w	r10,r6++
80006bea:	00 00       	add	r0,r0
80006bec:	25 32       	sub	r2,83
80006bee:	64 29       	ld.w	r9,r2[0x8]
80006bf0:	20 25       	sub	r5,2
80006bf2:	30 32       	mov	r2,3
80006bf4:	58 25       	cp.w	r5,2
80006bf6:	30 32       	mov	r2,3
80006bf8:	58 25       	cp.w	r5,2
80006bfa:	30 32       	mov	r2,3
80006bfc:	58 25       	cp.w	r5,2
80006bfe:	30 32       	mov	r2,3
80006c00:	58 25       	cp.w	r5,2
80006c02:	30 32       	mov	r2,3
80006c04:	58 25       	cp.w	r5,2
80006c06:	30 32       	mov	r2,3
80006c08:	58 20       	cp.w	r0,2
80006c0a:	00 00       	add	r0,r0
80006c0c:	20 54       	sub	r4,5
80006c0e:	4f 50       	lddpc	r0,80006de0 <led_shelf+0xa90>
80006c10:	0d 0a       	ld.w	r10,r6++
80006c12:	00 00       	add	r0,r0
80006c14:	20 42       	sub	r2,4
80006c16:	4f 54       	lddpc	r4,80006de8 <led_shelf+0xa98>
80006c18:	0d 0a       	ld.w	r10,r6++
80006c1a:	00 00       	add	r0,r0
80006c1c:	0d 0a       	ld.w	r10,r6++
80006c1e:	0d 0a       	ld.w	r10,r6++
80006c20:	00 00       	add	r0,r0
80006c22:	00 00       	add	r0,r0
80006c24:	54 79       	stdsp	sp[0x11c],r9
80006c26:	70 65       	ld.w	r5,r8[0x18]
80006c28:	20 27       	sub	r7,2
80006c2a:	48 27       	lddpc	r7,80006c30 <led_shelf+0x8e0>
80006c2c:	20 66       	sub	r6,6
80006c2e:	6f 72       	ld.w	r2,r7[0x5c]
80006c30:	20 68       	sub	r8,6
80006c32:	65 6c       	ld.w	r12,r2[0x58]
80006c34:	70 2e       	ld.w	lr,r8[0x8]
80006c36:	0d 0a       	ld.w	r10,r6++
80006c38:	0d 0a       	ld.w	r10,r6++
80006c3a:	00 00       	add	r0,r0
80006c3c:	0d 0a       	ld.w	r10,r6++
80006c3e:	2a 2a       	sub	r10,-94
80006c40:	2d 2d       	sub	sp,-184
80006c42:	2d 2d       	sub	sp,-184
80006c44:	2d 2d       	sub	sp,-184
80006c46:	2d 2d       	sub	sp,-184
80006c48:	2d 2d       	sub	sp,-184
80006c4a:	2d 2d       	sub	sp,-184
80006c4c:	2d 2d       	sub	sp,-184
80006c4e:	2d 2d       	sub	sp,-184
80006c50:	2d 2a       	sub	r10,-46
80006c52:	2a 0d       	sub	sp,-384
80006c54:	0a 00       	add	r0,r5
80006c56:	00 00       	add	r0,r0
80006c58:	20 20       	sub	r0,2
80006c5a:	45 6c       	lddsp	r12,sp[0x158]
80006c5c:	65 63       	ld.w	r3,r2[0x58]
80006c5e:	74 72       	ld.w	r2,r10[0x1c]
80006c60:	6f 63       	ld.w	r3,r7[0x58]
80006c62:	6c 61       	ld.w	r1,r6[0x18]
80006c64:	76 65       	ld.w	r5,r11[0x18]
80006c66:	20 48       	sub	r8,4
80006c68:	45 4c       	lddsp	r12,sp[0x150]
80006c6a:	50 0d       	stdsp	sp[0x0],sp
80006c6c:	0a 00       	add	r0,r5
80006c6e:	00 00       	add	r0,r0
80006c70:	2a 2a       	sub	r10,-94
80006c72:	2d 2d       	sub	sp,-184
80006c74:	2d 2d       	sub	sp,-184
80006c76:	2d 2d       	sub	sp,-184
80006c78:	2d 2d       	sub	sp,-184
80006c7a:	2d 2d       	sub	sp,-184
80006c7c:	2d 2d       	sub	sp,-184
80006c7e:	2d 2d       	sub	sp,-184
80006c80:	2d 2d       	sub	sp,-184
80006c82:	2d 2a       	sub	r10,-46
80006c84:	2a 0d       	sub	sp,-384
80006c86:	0a 00       	add	r0,r5
80006c88:	20 20       	sub	r0,2
80006c8a:	20 20       	sub	r0,2
80006c8c:	48 20       	lddpc	r0,80006c94 <led_shelf+0x944>
80006c8e:	20 20       	sub	r0,2
80006c90:	20 20       	sub	r0,2
80006c92:	20 20       	sub	r0,2
80006c94:	20 2d       	sub	sp,8
80006c96:	20 54       	sub	r4,5
80006c98:	68 69       	ld.w	r9,r4[0x18]
80006c9a:	73 20       	ld.w	r0,r9[0x48]
80006c9c:	68 65       	ld.w	r5,r4[0x18]
80006c9e:	6c 70       	ld.w	r0,r6[0x1c]
80006ca0:	20 6d       	sub	sp,24
80006ca2:	65 6e       	ld.w	lr,r2[0x58]
80006ca4:	75 0d       	ld.w	sp,r10[0x40]
80006ca6:	0a 00       	add	r0,r5
80006ca8:	20 20       	sub	r0,2
80006caa:	20 20       	sub	r0,2
80006cac:	44 20       	lddsp	r0,sp[0x108]
80006cae:	20 20       	sub	r0,2
80006cb0:	20 20       	sub	r0,2
80006cb2:	20 20       	sub	r0,2
80006cb4:	20 2d       	sub	sp,8
80006cb6:	20 53       	sub	r3,5
80006cb8:	68 6f       	ld.w	pc,r4[0x18]
80006cba:	77 20       	ld.w	r0,r11[0x48]
80006cbc:	63 75       	ld.w	r5,r1[0x5c]
80006cbe:	72 72       	ld.w	r2,r9[0x1c]
80006cc0:	65 6e       	ld.w	lr,r2[0x58]
80006cc2:	74 20       	ld.w	r0,r10[0x8]
80006cc4:	44 54       	lddsp	r4,sp[0x114]
80006cc6:	45 20       	lddsp	r0,sp[0x148]
80006cc8:	73 65       	ld.w	r5,r9[0x58]
80006cca:	74 74       	ld.w	r4,r10[0x1c]
80006ccc:	69 6e       	ld.w	lr,r4[0x58]
80006cce:	67 0d       	ld.w	sp,r3[0x40]
80006cd0:	0a 00       	add	r0,r5
80006cd2:	00 00       	add	r0,r0
80006cd4:	20 20       	sub	r0,2
80006cd6:	20 20       	sub	r0,2
80006cd8:	44 20       	lddsp	r0,sp[0x108]
80006cda:	20 78       	sub	r8,7
80006cdc:	78 20       	ld.w	r0,r12[0x8]
80006cde:	20 20       	sub	r0,2
80006ce0:	20 2d       	sub	sp,8
80006ce2:	20 43       	sub	r3,4
80006ce4:	68 61       	ld.w	r1,r4[0x18]
80006ce6:	6e 67       	ld.w	r7,r7[0x18]
80006ce8:	65 20       	ld.w	r0,r2[0x48]
80006cea:	69 6e       	ld.w	lr,r4[0x58]
80006cec:	69 74       	ld.w	r4,r4[0x5c]
80006cee:	69 61       	ld.w	r1,r4[0x58]
80006cf0:	6c 20       	ld.w	r0,r6[0x8]
80006cf2:	44 54       	lddsp	r4,sp[0x114]
80006cf4:	45 20       	lddsp	r0,sp[0x148]
80006cf6:	74 6f       	ld.w	pc,r10[0x18]
80006cf8:	20 78       	sub	r8,7
80006cfa:	78 20       	ld.w	r0,r12[0x8]
80006cfc:	6d 69       	ld.w	r9,r6[0x58]
80006cfe:	6e 75       	ld.w	r5,r7[0x1c]
80006d00:	74 65       	ld.w	r5,r10[0x18]
80006d02:	73 20       	ld.w	r0,r9[0x48]
80006d04:	77 68       	ld.w	r8,r11[0x58]
80006d06:	65 72       	ld.w	r2,r2[0x5c]
80006d08:	65 20       	ld.w	r0,r2[0x48]
80006d0a:	32 20       	mov	r0,34
80006d0c:	3e 3d       	mov	sp,-29
80006d0e:	20 78       	sub	r8,7
80006d10:	78 20       	ld.w	r0,r12[0x8]
80006d12:	3e 3d       	mov	sp,-29
80006d14:	20 35       	sub	r5,3
80006d16:	39 2e       	mov	lr,-110
80006d18:	0d 0a       	ld.w	r10,r6++
80006d1a:	00 00       	add	r0,r0
80006d1c:	20 20       	sub	r0,2
80006d1e:	20 20       	sub	r0,2
80006d20:	53 20       	stdsp	sp[0xc8],r0
80006d22:	20 20       	sub	r0,2
80006d24:	20 20       	sub	r0,2
80006d26:	20 20       	sub	r0,2
80006d28:	20 2d       	sub	sp,8
80006d2a:	20 53       	sub	r3,5
80006d2c:	79 73       	ld.w	r3,r12[0x5c]
80006d2e:	74 65       	ld.w	r5,r10[0x18]
80006d30:	6d 20       	ld.w	r0,r6[0x48]
80006d32:	73 74       	ld.w	r4,r9[0x5c]
80006d34:	61 74       	ld.w	r4,r0[0x5c]
80006d36:	75 73       	ld.w	r3,r10[0x5c]
80006d38:	0d 0a       	ld.w	r10,r6++
80006d3a:	00 00       	add	r0,r0
80006d3c:	3e 00       	mov	r0,-32
80006d3e:	00 00       	add	r0,r0
80006d40:	49 6e       	lddpc	lr,80006d98 <led_shelf+0xa48>
80006d42:	69 74       	ld.w	r4,r4[0x5c]
80006d44:	69 61       	ld.w	r1,r4[0x58]
80006d46:	6c 20       	ld.w	r0,r6[0x8]
80006d48:	44 54       	lddsp	r4,sp[0x114]
80006d4a:	45 20       	lddsp	r0,sp[0x148]
80006d4c:	73 65       	ld.w	r5,r9[0x58]
80006d4e:	74 20       	ld.w	r0,r10[0x8]
80006d50:	74 6f       	ld.w	pc,r10[0x18]
80006d52:	3a 20       	mov	r0,-94
80006d54:	00 00       	add	r0,r0
80006d56:	00 00       	add	r0,r0
80006d58:	20 6d       	sub	sp,24
80006d5a:	69 6e       	ld.w	lr,r4[0x58]
80006d5c:	75 74       	ld.w	r4,r10[0x5c]
80006d5e:	65 73       	ld.w	r3,r2[0x5c]
80006d60:	2e 0d       	sub	sp,-128
80006d62:	0a 3e       	cp.w	lr,r5
80006d64:	00 00       	add	r0,r0
80006d66:	00 00       	add	r0,r0
80006d68:	49 6e       	lddpc	lr,80006dc0 <led_shelf+0xa70>
80006d6a:	69 74       	ld.w	r4,r4[0x5c]
80006d6c:	69 61       	ld.w	r1,r4[0x58]
80006d6e:	6c 20       	ld.w	r0,r6[0x8]
80006d70:	44 54       	lddsp	r4,sp[0x114]
80006d72:	45 20       	lddsp	r0,sp[0x148]
80006d74:	6e 6f       	ld.w	pc,r7[0x18]
80006d76:	77 20       	ld.w	r0,r11[0x48]
80006d78:	73 65       	ld.w	r5,r9[0x58]
80006d7a:	74 20       	ld.w	r0,r10[0x8]
80006d7c:	74 6f       	ld.w	pc,r10[0x18]
80006d7e:	3a 20       	mov	r0,-94
80006d80:	00 00       	add	r0,r0
80006d82:	00 00       	add	r0,r0
80006d84:	0d 0a       	ld.w	r10,r6++
80006d86:	3e 00       	mov	r0,-32
80006d88:	45 72       	lddsp	r2,sp[0x15c]
80006d8a:	72 6f       	ld.w	pc,r9[0x18]
80006d8c:	72 2e       	ld.w	lr,r9[0x8]
80006d8e:	20 49       	sub	r9,4
80006d90:	6e 69       	ld.w	r9,r7[0x18]
80006d92:	74 69       	ld.w	r9,r10[0x18]
80006d94:	61 6c       	ld.w	r12,r0[0x58]
80006d96:	20 44       	sub	r4,4
80006d98:	54 45       	stdsp	sp[0x110],r5
80006d9a:	20 6e       	sub	lr,6
80006d9c:	6f 74       	ld.w	r4,r7[0x5c]
80006d9e:	20 6d       	sub	sp,24
80006da0:	6f 64       	ld.w	r4,r7[0x58]
80006da2:	69 66       	ld.w	r6,r4[0x58]
80006da4:	69 65       	ld.w	r5,r4[0x58]
80006da6:	64 2e       	ld.w	lr,r2[0x8]
80006da8:	20 0d       	sub	sp,0
80006daa:	0a 00       	add	r0,r5
80006dac:	4d 75       	lddpc	r5,80006f08 <osc_enable+0x10>
80006dae:	73 74       	ld.w	r4,r9[0x5c]
80006db0:	20 62       	sub	r2,6
80006db2:	65 20       	ld.w	r0,r2[0x48]
80006db4:	61 20       	ld.w	r0,r0[0x48]
80006db6:	76 61       	ld.w	r1,r11[0x18]
80006db8:	6c 75       	ld.w	r5,r6[0x1c]
80006dba:	65 20       	ld.w	r0,r2[0x48]
80006dbc:	62 65       	ld.w	r5,r1[0x18]
80006dbe:	74 77       	ld.w	r7,r10[0x1c]
80006dc0:	65 65       	ld.w	r5,r2[0x58]
80006dc2:	6e 20       	ld.w	r0,r7[0x8]
80006dc4:	32 20       	mov	r0,34
80006dc6:	61 6e       	ld.w	lr,r0[0x58]
80006dc8:	64 20       	ld.w	r0,r2[0x8]
80006dca:	35 39       	mov	r9,83
80006dcc:	2e 0d       	sub	sp,-128
80006dce:	0a 3e       	cp.w	lr,r5
80006dd0:	00 00       	add	r0,r0
80006dd2:	00 00       	add	r0,r0
80006dd4:	44 6f       	lddsp	pc,sp[0x118]
80006dd6:	6f 72       	ld.w	r2,r7[0x5c]
80006dd8:	20 6c       	sub	r12,6
80006dda:	61 74       	ld.w	r4,r0[0x5c]
80006ddc:	63 68       	ld.w	r8,r1[0x58]
80006dde:	20 64       	sub	r4,6
80006de0:	65 74       	ld.w	r4,r2[0x5c]
80006de2:	65 63       	ld.w	r3,r2[0x58]
80006de4:	74 65       	ld.w	r5,r10[0x18]
80006de6:	64 0d       	ld.w	sp,r2[0x0]
80006de8:	0a 00       	add	r0,r5
80006dea:	00 00       	add	r0,r0
80006dec:	41 63       	lddsp	r3,sp[0x58]
80006dee:	74 69       	ld.w	r9,r10[0x18]
80006df0:	6f 6e       	ld.w	lr,r7[0x58]
80006df2:	20 70       	sub	r0,7
80006df4:	75 73       	ld.w	r3,r10[0x5c]
80006df6:	68 20       	ld.w	r0,r4[0x8]
80006df8:	62 75       	ld.w	r5,r1[0x1c]
80006dfa:	74 74       	ld.w	r4,r10[0x1c]
80006dfc:	6f 6e       	ld.w	lr,r7[0x58]
80006dfe:	20 70       	sub	r0,7
80006e00:	72 65       	ld.w	r5,r9[0x18]
80006e02:	73 73       	ld.w	r3,r9[0x5c]
80006e04:	20 64       	sub	r4,6
80006e06:	65 74       	ld.w	r4,r2[0x5c]
80006e08:	65 63       	ld.w	r3,r2[0x58]
80006e0a:	74 65       	ld.w	r5,r10[0x18]
80006e0c:	64 0d       	ld.w	sp,r2[0x0]
80006e0e:	0a 00       	add	r0,r5
80006e10:	41 63       	lddsp	r3,sp[0x58]
80006e12:	74 69       	ld.w	r9,r10[0x18]
80006e14:	6f 6e       	ld.w	lr,r7[0x58]
80006e16:	20 70       	sub	r0,7
80006e18:	75 73       	ld.w	r3,r10[0x5c]
80006e1a:	68 20       	ld.w	r0,r4[0x8]
80006e1c:	62 75       	ld.w	r5,r1[0x1c]
80006e1e:	74 74       	ld.w	r4,r10[0x1c]
80006e20:	6f 6e       	ld.w	lr,r7[0x58]
80006e22:	20 72       	sub	r2,7
80006e24:	65 6c       	ld.w	r12,r2[0x58]
80006e26:	65 61       	ld.w	r1,r2[0x58]
80006e28:	73 65       	ld.w	r5,r9[0x58]
80006e2a:	20 64       	sub	r4,6
80006e2c:	65 74       	ld.w	r4,r2[0x5c]
80006e2e:	65 63       	ld.w	r3,r2[0x58]
80006e30:	74 65       	ld.w	r5,r10[0x18]
80006e32:	64 0d       	ld.w	sp,r2[0x0]
80006e34:	0a 00       	add	r0,r5
80006e36:	00 00       	add	r0,r0
80006e38:	53 61       	stdsp	sp[0xd8],r1
80006e3a:	6e 69       	ld.w	r9,r7[0x18]
80006e3c:	74 69       	ld.w	r9,r10[0x18]
80006e3e:	7a 69       	ld.w	r9,sp[0x18]
80006e40:	6e 67       	ld.w	r7,r7[0x18]
80006e42:	0d 0a       	ld.w	r10,r6++
80006e44:	00 00       	add	r0,r0
80006e46:	00 00       	add	r0,r0
80006e48:	41 74       	lddsp	r4,sp[0x5c]
80006e4a:	20 6c       	sub	r12,6
80006e4c:	65 61       	ld.w	r1,r2[0x58]
80006e4e:	73 74       	ld.w	r4,r9[0x5c]
80006e50:	20 6f       	sub	pc,6
80006e52:	6e 65       	ld.w	r5,r7[0x18]
80006e54:	20 73       	sub	r3,7
80006e56:	68 65       	ld.w	r5,r4[0x18]
80006e58:	6c 66       	ld.w	r6,r6[0x18]
80006e5a:	20 69       	sub	r9,6
80006e5c:	73 20       	ld.w	r0,r9[0x48]
80006e5e:	70 72       	ld.w	r2,r8[0x1c]
80006e60:	65 73       	ld.w	r3,r2[0x5c]
80006e62:	65 6e       	ld.w	lr,r2[0x58]
80006e64:	74 2c       	ld.w	r12,r10[0x8]
80006e66:	20 62       	sub	r2,6
80006e68:	75 74       	ld.w	r4,r10[0x5c]
80006e6a:	20 6e       	sub	lr,6
80006e6c:	6f 20       	ld.w	r0,r7[0x48]
80006e6e:	64 65       	ld.w	r5,r2[0x18]
80006e70:	76 69       	ld.w	r9,r11[0x18]
80006e72:	63 65       	ld.w	r5,r1[0x58]
80006e74:	73 20       	ld.w	r0,r9[0x48]
80006e76:	74 6f       	ld.w	pc,r10[0x18]
80006e78:	20 62       	sub	r2,6
80006e7a:	65 20       	ld.w	r0,r2[0x48]
80006e7c:	63 6c       	ld.w	r12,r1[0x58]
80006e7e:	65 61       	ld.w	r1,r2[0x58]
80006e80:	6e 65       	ld.w	r5,r7[0x18]
80006e82:	64 2e       	ld.w	lr,r2[0x8]
80006e84:	0d 0a       	ld.w	r10,r6++
80006e86:	00 00       	add	r0,r0
80006e88:	4e 6f       	lddpc	pc,80007020 <osc_get_rate+0x54>
80006e8a:	20 73       	sub	r3,7
80006e8c:	68 65       	ld.w	r5,r4[0x18]
80006e8e:	6c 76       	ld.w	r6,r6[0x1c]
80006e90:	65 73       	ld.w	r3,r2[0x5c]
80006e92:	2c 20       	sub	r0,-62
80006e94:	6f 72       	ld.w	r2,r7[0x5c]
80006e96:	20 73       	sub	r3,7
80006e98:	68 65       	ld.w	r5,r4[0x18]
80006e9a:	6c 76       	ld.w	r6,r6[0x1c]
80006e9c:	65 73       	ld.w	r3,r2[0x5c]
80006e9e:	20 61       	sub	r1,6
80006ea0:	72 65       	ld.w	r5,r9[0x18]
80006ea2:	20 70       	sub	r0,7
80006ea4:	61 73       	ld.w	r3,r0[0x5c]
80006ea6:	74 20       	ld.w	r0,r10[0x8]
80006ea8:	6c 69       	ld.w	r9,r6[0x18]
80006eaa:	66 65       	ld.w	r5,r3[0x18]
80006eac:	74 69       	ld.w	r9,r10[0x18]
80006eae:	6d 65       	ld.w	r5,r6[0x58]
80006eb0:	0d 0a       	ld.w	r10,r6++
80006eb2:	00 00       	add	r0,r0
80006eb4:	53 68       	stdsp	sp[0xd8],r8
80006eb6:	65 6c       	ld.w	r12,r2[0x58]
80006eb8:	66 20       	ld.w	r0,r3[0x8]
80006eba:	63 6c       	ld.w	r12,r1[0x58]
80006ebc:	65 61       	ld.w	r1,r2[0x58]
80006ebe:	6e 0d       	ld.w	sp,r7[0x0]
80006ec0:	0a 00       	add	r0,r5
80006ec2:	00 00       	add	r0,r0
80006ec4:	44 6f       	lddsp	pc,sp[0x118]
80006ec6:	6f 72       	ld.w	r2,r7[0x5c]
80006ec8:	20 6c       	sub	r12,6
80006eca:	61 74       	ld.w	r4,r0[0x5c]
80006ecc:	63 68       	ld.w	r8,r1[0x58]
80006ece:	20 6f       	sub	pc,6
80006ed0:	70 65       	ld.w	r5,r8[0x18]
80006ed2:	6e 65       	ld.w	r5,r7[0x18]
80006ed4:	64 2c       	ld.w	r12,r2[0x8]
80006ed6:	20 73       	sub	r3,7
80006ed8:	68 75       	ld.w	r5,r4[0x1c]
80006eda:	74 74       	ld.w	r4,r10[0x1c]
80006edc:	69 6e       	ld.w	lr,r4[0x58]
80006ede:	67 20       	ld.w	r0,r3[0x48]
80006ee0:	64 6f       	ld.w	pc,r2[0x18]
80006ee2:	77 6e       	ld.w	lr,r11[0x58]
80006ee4:	20 61       	sub	r1,6
80006ee6:	6c 6c       	ld.w	r12,r6[0x18]
80006ee8:	20 70       	sub	r0,7
80006eea:	72 6f       	ld.w	pc,r9[0x18]
80006eec:	63 65       	ld.w	r5,r1[0x58]
80006eee:	73 73       	ld.w	r3,r9[0x5c]
80006ef0:	65 73       	ld.w	r3,r2[0x5c]
80006ef2:	0d 0a       	ld.w	r10,r6++
80006ef4:	00 00       	add	r0,r0
	...

80006ef8 <osc_enable>:
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);
extern bool osc_priv_rc120m_is_ready(void);

static inline void osc_enable(uint8_t id)
{
80006ef8:	eb cd 40 80 	pushm	r7,lr
80006efc:	1a 97       	mov	r7,sp
80006efe:	20 1d       	sub	sp,4
80006f00:	18 98       	mov	r8,r12
80006f02:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80006f06:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006f0a:	58 28       	cp.w	r8,2
80006f0c:	c1 10       	breq	80006f2e <osc_enable+0x36>
80006f0e:	e0 89 00 05 	brgt	80006f18 <osc_enable+0x20>
80006f12:	58 08       	cp.w	r8,0
80006f14:	c0 70       	breq	80006f22 <osc_enable+0x2a>
80006f16:	c1 18       	rjmp	80006f38 <osc_enable+0x40>
80006f18:	58 38       	cp.w	r8,3
80006f1a:	c0 70       	breq	80006f28 <osc_enable+0x30>
80006f1c:	58 48       	cp.w	r8,4
80006f1e:	c0 b0       	breq	80006f34 <osc_enable+0x3c>
80006f20:	c0 c8       	rjmp	80006f38 <osc_enable+0x40>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
80006f22:	f0 1f 00 08 	mcall	80006f40 <osc_enable+0x48>
		break;
80006f26:	c0 98       	rjmp	80006f38 <osc_enable+0x40>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
80006f28:	f0 1f 00 07 	mcall	80006f44 <osc_enable+0x4c>
		break;
80006f2c:	c0 68       	rjmp	80006f38 <osc_enable+0x40>
#endif

	case OSC_ID_RC8M:
		osc_priv_enable_rc8m();
80006f2e:	f0 1f 00 07 	mcall	80006f48 <osc_enable+0x50>
		break;
80006f32:	c0 38       	rjmp	80006f38 <osc_enable+0x40>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
80006f34:	f0 1f 00 06 	mcall	80006f4c <osc_enable+0x54>

	default:
		/* unhandled_case(id); */
		break;
	}
}
80006f38:	2f fd       	sub	sp,-4
80006f3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f3e:	00 00       	add	r0,r0
80006f40:	80 00       	ld.sh	r0,r0[0x0]
80006f42:	5a 34       	cp.w	r4,-29
80006f44:	80 00       	ld.sh	r0,r0[0x0]
80006f46:	5a 74       	cp.w	r4,-25
80006f48:	80 00       	ld.sh	r0,r0[0x0]
80006f4a:	5a b4       	cp.w	r4,-21
80006f4c:	80 00       	ld.sh	r0,r0[0x0]
80006f4e:	5b 38       	cp.w	r8,-13

80006f50 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
80006f50:	eb cd 40 80 	pushm	r7,lr
80006f54:	1a 97       	mov	r7,sp
80006f56:	20 1d       	sub	sp,4
80006f58:	18 98       	mov	r8,r12
80006f5a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80006f5e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006f62:	58 38       	cp.w	r8,3
80006f64:	c1 50       	breq	80006f8e <osc_is_ready+0x3e>
80006f66:	e0 89 00 07 	brgt	80006f74 <osc_is_ready+0x24>
80006f6a:	58 08       	cp.w	r8,0
80006f6c:	c0 90       	breq	80006f7e <osc_is_ready+0x2e>
80006f6e:	58 28       	cp.w	r8,2
80006f70:	c1 70       	breq	80006f9e <osc_is_ready+0x4e>
80006f72:	c2 88       	rjmp	80006fc2 <osc_is_ready+0x72>
80006f74:	58 48       	cp.w	r8,4
80006f76:	c1 c0       	breq	80006fae <osc_is_ready+0x5e>
80006f78:	58 58       	cp.w	r8,5
80006f7a:	c2 20       	breq	80006fbe <osc_is_ready+0x6e>
80006f7c:	c2 38       	rjmp	80006fc2 <osc_is_ready+0x72>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
80006f7e:	fe 78 08 00 	mov	r8,-63488
80006f82:	70 58       	ld.w	r8,r8[0x14]
80006f84:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006f88:	5f 18       	srne	r8
80006f8a:	5c 58       	castu.b	r8
80006f8c:	c1 c8       	rjmp	80006fc4 <osc_is_ready+0x74>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
80006f8e:	fe 78 08 00 	mov	r8,-63488
80006f92:	70 58       	ld.w	r8,r8[0x14]
80006f94:	e2 18 00 04 	andl	r8,0x4,COH
80006f98:	5f 18       	srne	r8
80006f9a:	5c 58       	castu.b	r8
80006f9c:	c1 48       	rjmp	80006fc4 <osc_is_ready+0x74>
#endif

	case OSC_ID_RC8M:
		return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_RCOSC8MRDY));
80006f9e:	fe 78 08 00 	mov	r8,-63488
80006fa2:	70 58       	ld.w	r8,r8[0x14]
80006fa4:	e2 18 00 08 	andl	r8,0x8,COH
80006fa8:	5f 18       	srne	r8
80006faa:	5c 58       	castu.b	r8
80006fac:	c0 c8       	rjmp	80006fc4 <osc_is_ready+0x74>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
80006fae:	fe 78 08 00 	mov	r8,-63488
80006fb2:	71 68       	ld.w	r8,r8[0x58]
80006fb4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006fb8:	5f 18       	srne	r8
80006fba:	5c 58       	castu.b	r8
80006fbc:	c0 48       	rjmp	80006fc4 <osc_is_ready+0x74>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
80006fbe:	30 18       	mov	r8,1
80006fc0:	c0 28       	rjmp	80006fc4 <osc_is_ready+0x74>

	default:
		/* unhandled_case(id); */
		return false;
80006fc2:	30 08       	mov	r8,0
	}
}
80006fc4:	10 9c       	mov	r12,r8
80006fc6:	2f fd       	sub	sp,-4
80006fc8:	e3 cd 80 80 	ldm	sp++,r7,pc

80006fcc <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80006fcc:	eb cd 40 80 	pushm	r7,lr
80006fd0:	1a 97       	mov	r7,sp
80006fd2:	20 1d       	sub	sp,4
80006fd4:	18 98       	mov	r8,r12
80006fd6:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80006fda:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006fde:	58 38       	cp.w	r8,3
80006fe0:	c1 20       	breq	80007004 <osc_get_rate+0x38>
80006fe2:	e0 89 00 07 	brgt	80006ff0 <osc_get_rate+0x24>
80006fe6:	58 08       	cp.w	r8,0
80006fe8:	c0 90       	breq	80006ffa <osc_get_rate+0x2e>
80006fea:	58 28       	cp.w	r8,2
80006fec:	c0 f0       	breq	8000700a <osc_get_rate+0x3e>
80006fee:	c1 b8       	rjmp	80007024 <osc_get_rate+0x58>
80006ff0:	58 48       	cp.w	r8,4
80006ff2:	c1 10       	breq	80007014 <osc_get_rate+0x48>
80006ff4:	58 58       	cp.w	r8,5
80006ff6:	c1 40       	breq	8000701e <osc_get_rate+0x52>
80006ff8:	c1 68       	rjmp	80007024 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80006ffa:	e0 68 24 00 	mov	r8,9216
80006ffe:	ea 18 00 f4 	orh	r8,0xf4
80007002:	c1 28       	rjmp	80007026 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80007004:	e0 68 80 00 	mov	r8,32768
80007008:	c0 f8       	rjmp	80007026 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8000700a:	e0 68 12 00 	mov	r8,4608
8000700e:	ea 18 00 7a 	orh	r8,0x7a
80007012:	c0 a8       	rjmp	80007026 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80007014:	e0 68 0e 00 	mov	r8,3584
80007018:	ea 18 07 27 	orh	r8,0x727
8000701c:	c0 58       	rjmp	80007026 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8000701e:	e0 78 c1 38 	mov	r8,115000
80007022:	c0 28       	rjmp	80007026 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80007024:	30 08       	mov	r8,0
	}
}
80007026:	10 9c       	mov	r12,r8
80007028:	2f fd       	sub	sp,-4
8000702a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000702e:	d7 03       	nop

80007030 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
80007030:	eb cd 40 80 	pushm	r7,lr
80007034:	1a 97       	mov	r7,sp
80007036:	20 1d       	sub	sp,4
80007038:	18 98       	mov	r8,r12
8000703a:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8000703e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007042:	10 9c       	mov	r12,r8
80007044:	f0 1f 00 05 	mcall	80007058 <osc_wait_ready+0x28>
80007048:	18 98       	mov	r8,r12
8000704a:	ec 18 00 01 	eorl	r8,0x1
8000704e:	5c 58       	castu.b	r8
80007050:	cf 71       	brne	8000703e <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
80007052:	2f fd       	sub	sp,-4
80007054:	e3 cd 80 80 	ldm	sp++,r7,pc
80007058:	80 00       	ld.sh	r0,r0[0x0]
8000705a:	6f 50       	ld.w	r0,r7[0x54]

8000705c <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8000705c:	eb cd 40 80 	pushm	r7,lr
80007060:	1a 97       	mov	r7,sp
80007062:	20 2d       	sub	sp,8
80007064:	ef 4c ff fc 	st.w	r7[-4],r12
80007068:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
8000706c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007070:	70 09       	ld.w	r9,r8[0x0]
80007072:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007076:	2f d8       	sub	r8,-3
80007078:	30 1a       	mov	r10,1
8000707a:	f4 08 09 48 	lsl	r8,r10,r8
8000707e:	10 49       	or	r9,r8
80007080:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007084:	91 09       	st.w	r8[0x0],r9
}
80007086:	2f ed       	sub	sp,-8
80007088:	e3 cd 80 80 	ldm	sp++,r7,pc

8000708c <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8000708c:	eb cd 40 80 	pushm	r7,lr
80007090:	1a 97       	mov	r7,sp
80007092:	20 5d       	sub	sp,20
80007094:	ef 4c ff f8 	st.w	r7[-8],r12
80007098:	ef 4b ff f4 	st.w	r7[-12],r11
8000709c:	ef 4a ff f0 	st.w	r7[-16],r10
800070a0:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
800070a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800070a8:	5c 58       	castu.b	r8
800070aa:	10 9c       	mov	r12,r8
800070ac:	f0 1f 00 2e 	mcall	80007164 <pll_config_init+0xd8>
800070b0:	18 99       	mov	r9,r12
800070b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800070b6:	f2 08 02 48 	mul	r8,r9,r8
800070ba:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
800070be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800070c2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800070c6:	f0 09 0d 08 	divu	r8,r8,r9
800070ca:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
800070ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070d2:	30 09       	mov	r9,0
800070d4:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
800070d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800070da:	e0 69 b3 ff 	mov	r9,46079
800070de:	ea 19 04 c4 	orh	r9,0x4c4
800070e2:	12 38       	cp.w	r8,r9
800070e4:	e0 8b 00 16 	brhi	80007110 <pll_config_init+0x84>
800070e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800070ec:	58 88       	cp.w	r8,8
800070ee:	e0 8b 00 11 	brhi	80007110 <pll_config_init+0x84>
		mul *= 2;
800070f2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800070f6:	a1 78       	lsl	r8,0x1
800070f8:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
800070fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007100:	a1 78       	lsl	r8,0x1
80007102:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
80007106:	30 1b       	mov	r11,1
80007108:	ee fc ff f8 	ld.w	r12,r7[-8]
8000710c:	f0 1f 00 17 	mcall	80007168 <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
80007110:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007114:	e0 69 fe 7f 	mov	r9,65151
80007118:	ea 19 0a 21 	orh	r9,0xa21
8000711c:	12 38       	cp.w	r8,r9
8000711e:	e0 8b 00 07 	brhi	8000712c <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
80007122:	30 0b       	mov	r11,0
80007124:	ee fc ff f8 	ld.w	r12,r7[-8]
80007128:	f0 1f 00 10 	mcall	80007168 <pll_config_init+0xdc>

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8000712c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007130:	70 09       	ld.w	r9,r8[0x0]
80007132:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007136:	20 18       	sub	r8,1
80007138:	f0 0a 15 10 	lsl	r10,r8,0x10
		| (div << AVR32_SCIF_PLLDIV)
8000713c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007140:	a9 68       	lsl	r8,0x8
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
80007142:	10 4a       	or	r10,r8
		| (src << AVR32_SCIF_PLLOSC);
80007144:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007148:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8000714a:	f5 e8 10 08 	or	r8,r10,r8
8000714e:	f3 e8 10 08 	or	r8,r9,r8
80007152:	10 99       	mov	r9,r8
80007154:	ea 19 3f 00 	orh	r9,0x3f00
80007158:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000715c:	91 09       	st.w	r8[0x0],r9
		| (div << AVR32_SCIF_PLLDIV)
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
		| (src << AVR32_SCIF_PLLOSC);
}
8000715e:	2f bd       	sub	sp,-20
80007160:	e3 cd 80 80 	ldm	sp++,r7,pc
80007164:	80 00       	ld.sh	r0,r0[0x0]
80007166:	6f cc       	ld.w	r12,r7[0x70]
80007168:	80 00       	ld.sh	r0,r0[0x0]
8000716a:	70 5c       	ld.w	r12,r8[0x14]

8000716c <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_enable(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_disable(unsigned int pll_id);

static inline bool pll_is_locked(unsigned int pll_id)
{
8000716c:	eb cd 40 80 	pushm	r7,lr
80007170:	1a 97       	mov	r7,sp
80007172:	20 1d       	sub	sp,4
80007174:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
80007178:	fe 78 08 00 	mov	r8,-63488
8000717c:	70 59       	ld.w	r9,r8[0x14]
8000717e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007182:	2f c8       	sub	r8,-4
80007184:	30 1a       	mov	r10,1
80007186:	f4 08 09 48 	lsl	r8,r10,r8
8000718a:	f3 e8 00 08 	and	r8,r9,r8
8000718e:	5f 18       	srne	r8
80007190:	5c 58       	castu.b	r8
}
80007192:	10 9c       	mov	r12,r8
80007194:	2f fd       	sub	sp,-4
80007196:	e3 cd 80 80 	ldm	sp++,r7,pc
8000719a:	d7 03       	nop

8000719c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
8000719c:	eb cd 40 80 	pushm	r7,lr
800071a0:	1a 97       	mov	r7,sp
800071a2:	20 1d       	sub	sp,4
800071a4:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
800071a8:	ee fc ff fc 	ld.w	r12,r7[-4]
800071ac:	f0 1f 00 06 	mcall	800071c4 <pll_wait_for_lock+0x28>
800071b0:	18 98       	mov	r8,r12
800071b2:	ec 18 00 01 	eorl	r8,0x1
800071b6:	5c 58       	castu.b	r8
800071b8:	cf 81       	brne	800071a8 <pll_wait_for_lock+0xc>
		/* Do nothing */
	}

	return 0;
800071ba:	30 08       	mov	r8,0
}
800071bc:	10 9c       	mov	r12,r8
800071be:	2f fd       	sub	sp,-4
800071c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800071c4:	80 00       	ld.sh	r0,r0[0x0]
800071c6:	71 6c       	ld.w	r12,r8[0x58]

800071c8 <init_sysErr>:

#define BIT(x) (1<<(x))

void init_sysErr(void);
void init_sysErr(void)
{
800071c8:	eb cd 40 80 	pushm	r7,lr
800071cc:	1a 97       	mov	r7,sp
	memset(&sysErr, 0x00, sizeof(sysErr)); //Init everything to "PASS"
800071ce:	31 0a       	mov	r10,16
800071d0:	30 0b       	mov	r11,0
800071d2:	48 3c       	lddpc	r12,800071dc <init_sysErr+0x14>
800071d4:	f0 1f 00 03 	mcall	800071e0 <init_sysErr+0x18>
}
800071d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800071dc:	00 00       	add	r0,r0
800071de:	0b d4       	ld.ub	r4,r5[0x5]
800071e0:	80 00       	ld.sh	r0,r0[0x0]
800071e2:	cc 3e       	rcall	80006f68 <osc_is_ready+0x18>

800071e4 <display_text>:
};


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
800071e4:	eb cd 40 80 	pushm	r7,lr
800071e8:	1a 97       	mov	r7,sp
800071ea:	20 2d       	sub	sp,8
800071ec:	18 98       	mov	r8,r12
800071ee:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i = 0; i<7; i++)
800071f2:	30 08       	mov	r8,0
800071f4:	ef 48 ff fc 	st.w	r7[-4],r8
800071f8:	c1 58       	rjmp	80007222 <display_text+0x3e>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
800071fa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800071fe:	48 e8       	lddpc	r8,80007234 <display_text+0x50>
80007200:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80007204:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007208:	f2 08 00 08 	add	r8,r9,r8
8000720c:	11 88       	ld.ub	r8,r8[0x0]
8000720e:	10 9b       	mov	r11,r8
80007210:	fc 7c 14 00 	mov	r12,-191488
80007214:	f0 1f 00 09 	mcall	80007238 <display_text+0x54>


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
	for (int i = 0; i<7; i++)
80007218:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000721c:	2f f8       	sub	r8,-1
8000721e:	ef 48 ff fc 	st.w	r7[-4],r8
80007222:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007226:	58 68       	cp.w	r8,6
80007228:	fe 9a ff e9 	brle	800071fa <display_text+0x16>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
	}
	
}
8000722c:	2f ed       	sub	sp,-8
8000722e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007232:	00 00       	add	r0,r0
80007234:	00 00       	add	r0,r0
80007236:	00 60       	and	r0,r0
80007238:	80 00       	ld.sh	r0,r0[0x0]
8000723a:	58 94       	cp.w	r4,9

8000723c <chassis_error>:

void chassis_error(void);
void chassis_error(void)
{
8000723c:	eb cd 40 80 	pushm	r7,lr
80007240:	1a 97       	mov	r7,sp
	display_text(IDX_ERROR);
80007242:	30 4c       	mov	r12,4
80007244:	f0 1f 00 03 	mcall	80007250 <chassis_error+0x14>
	print_ecdbg("Chassis error...shutting down.\r\n");
80007248:	48 3c       	lddpc	r12,80007254 <chassis_error+0x18>
8000724a:	f0 1f 00 04 	mcall	80007258 <chassis_error+0x1c>
	
	while(1); //catastrophic error, just hang TODO: allow technician interface to work here possibly
8000724e:	c0 08       	rjmp	8000724e <chassis_error+0x12>
80007250:	80 00       	ld.sh	r0,r0[0x0]
80007252:	71 e4       	ld.w	r4,r8[0x78]
80007254:	80 00       	ld.sh	r0,r0[0x0]
80007256:	64 a8       	ld.w	r8,r2[0x28]
80007258:	80 00       	ld.sh	r0,r0[0x0]
8000725a:	33 38       	mov	r8,51

8000725c <init_io>:
	
}

void init_io(void);
void init_io(void)
{
8000725c:	eb cd 40 80 	pushm	r7,lr
80007260:	1a 97       	mov	r7,sp
80007262:	20 1d       	sub	sp,4
	uint32_t ioFlags;
	
	
	ioFlags = (GPIO_DIR_INPUT);
80007264:	30 08       	mov	r8,0
80007266:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DOOR_LATCH, ioFlags);
8000726a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000726e:	33 ec       	mov	r12,62
80007270:	f0 1f 00 2b 	mcall	8000731c <init_io+0xc0>

	ioFlags = (GPIO_DIR_INPUT);
80007274:	30 08       	mov	r8,0
80007276:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_ACTION_PB, ioFlags);
8000727a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000727e:	33 fc       	mov	r12,63
80007280:	f0 1f 00 27 	mcall	8000731c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007284:	30 38       	mov	r8,3
80007286:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID0, ioFlags);
8000728a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000728e:	33 3c       	mov	r12,51
80007290:	f0 1f 00 23 	mcall	8000731c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007294:	30 38       	mov	r8,3
80007296:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID1, ioFlags);
8000729a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000729e:	33 4c       	mov	r12,52
800072a0:	f0 1f 00 1f 	mcall	8000731c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800072a4:	30 38       	mov	r8,3
800072a6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID2, ioFlags);
800072aa:	ee fb ff fc 	ld.w	r11,r7[-4]
800072ae:	33 5c       	mov	r12,53
800072b0:	f0 1f 00 1b 	mcall	8000731c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800072b4:	30 38       	mov	r8,3
800072b6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID3, ioFlags);
800072ba:	ee fb ff fc 	ld.w	r11,r7[-4]
800072be:	33 6c       	mov	r12,54
800072c0:	f0 1f 00 17 	mcall	8000731c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800072c4:	30 38       	mov	r8,3
800072c6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID4, ioFlags);
800072ca:	ee fb ff fc 	ld.w	r11,r7[-4]
800072ce:	33 7c       	mov	r12,55
800072d0:	f0 1f 00 13 	mcall	8000731c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
800072d4:	30 18       	mov	r8,1
800072d6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DEBUG_LED, ioFlags);
800072da:	ee fb ff fc 	ld.w	r11,r7[-4]
800072de:	37 cc       	mov	r12,124
800072e0:	f0 1f 00 0f 	mcall	8000731c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800072e4:	30 38       	mov	r8,3
800072e6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_PSUPPLY_ONn, ioFlags);
800072ea:	ee fb ff fc 	ld.w	r11,r7[-4]
800072ee:	31 7c       	mov	r12,23
800072f0:	f0 1f 00 0b 	mcall	8000731c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800072f4:	30 38       	mov	r8,3
800072f6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_LED_OEn, ioFlags);
800072fa:	ee fb ff fc 	ld.w	r11,r7[-4]
800072fe:	31 6c       	mov	r12,22
80007300:	f0 1f 00 07 	mcall	8000731c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW); //high=1x multiplier, low=4x multiplier 10apr15;
80007304:	30 18       	mov	r8,1
80007306:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_MFP, ioFlags);
8000730a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000730e:	31 5c       	mov	r12,21
80007310:	f0 1f 00 03 	mcall	8000731c <init_io+0xc0>

}
80007314:	2f fd       	sub	sp,-4
80007316:	e3 cd 80 80 	ldm	sp++,r7,pc
8000731a:	00 00       	add	r0,r0
8000731c:	80 00       	ld.sh	r0,r0[0x0]
8000731e:	48 28       	lddpc	r8,80007324 <print_ecdbg_num+0x4>

80007320 <print_ecdbg_num>:
};


void print_ecdbg_num(unsigned int num);
void print_ecdbg_num(unsigned int num)
{
80007320:	eb cd 40 80 	pushm	r7,lr
80007324:	1a 97       	mov	r7,sp
80007326:	20 3d       	sub	sp,12
80007328:	ef 4c ff f4 	st.w	r7[-12],r12
	char str[6];
	
	sprintf(str, "%d", num);	
8000732c:	ee c8 00 08 	sub	r8,r7,8
80007330:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007334:	1a d9       	st.w	--sp,r9
80007336:	48 7b       	lddpc	r11,80007350 <print_ecdbg_num+0x30>
80007338:	10 9c       	mov	r12,r8
8000733a:	f0 1f 00 07 	mcall	80007354 <print_ecdbg_num+0x34>
8000733e:	2f fd       	sub	sp,-4
	
	print_ecdbg(str);
80007340:	ee c8 00 08 	sub	r8,r7,8
80007344:	10 9c       	mov	r12,r8
80007346:	f0 1f 00 05 	mcall	80007358 <print_ecdbg_num+0x38>
}
8000734a:	2f dd       	sub	sp,-12
8000734c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007350:	80 00       	ld.sh	r0,r0[0x0]
80007352:	64 cc       	ld.w	r12,r2[0x30]
80007354:	80 00       	ld.sh	r0,r0[0x0]
80007356:	cc 4c       	rcall	800074de <read_led_board_serial_ids+0x182>
80007358:	80 00       	ld.sh	r0,r0[0x0]
8000735a:	33 38       	mov	r8,51

8000735c <read_led_board_serial_ids>:

/* One serial ID chip per board */
void read_led_board_serial_ids(void);
void read_led_board_serial_ids(void)
{
8000735c:	eb cd 40 e0 	pushm	r5-r7,lr
80007360:	1a 97       	mov	r7,sp
80007362:	20 4d       	sub	sp,16
	/*
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
80007364:	30 1c       	mov	r12,1
80007366:	f0 1f 00 b4 	mcall	80007634 <read_led_board_serial_ids+0x2d8>
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
8000736a:	30 08       	mov	r8,0
8000736c:	ef 48 ff f0 	st.w	r7[-16],r8
80007370:	c3 88       	rjmp	800073e0 <read_led_board_serial_ids+0x84>
	{
		ledBrd[i].present = !OWTouchReset(i);
80007372:	ee f6 ff f0 	ld.w	r6,r7[-16]
80007376:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000737a:	5c 58       	castu.b	r8
8000737c:	10 9c       	mov	r12,r8
8000737e:	f0 1f 00 af 	mcall	80007638 <read_led_board_serial_ids+0x2dc>
80007382:	18 98       	mov	r8,r12
80007384:	58 08       	cp.w	r8,0
80007386:	5f 09       	sreq	r9
80007388:	fe fa 02 b4 	ld.w	r10,pc[692]
8000738c:	0c 98       	mov	r8,r6
8000738e:	a3 78       	lsl	r8,0x3
80007390:	0c 18       	sub	r8,r6
80007392:	a1 78       	lsl	r8,0x1
80007394:	f4 08 00 08 	add	r8,r10,r8
80007398:	f0 ca ff f8 	sub	r10,r8,-8
8000739c:	12 98       	mov	r8,r9
8000739e:	b4 88       	st.b	r10[0x0],r8
		if (ledBrd[i].present)
800073a0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800073a4:	fe fa 02 98 	ld.w	r10,pc[664]
800073a8:	12 98       	mov	r8,r9
800073aa:	a3 78       	lsl	r8,0x3
800073ac:	12 18       	sub	r8,r9
800073ae:	a1 78       	lsl	r8,0x1
800073b0:	f4 08 00 08 	add	r8,r10,r8
800073b4:	2f 88       	sub	r8,-8
800073b6:	11 88       	ld.ub	r8,r8[0x0]
800073b8:	58 08       	cp.w	r8,0
800073ba:	c0 e0       	breq	800073d6 <read_led_board_serial_ids+0x7a>
		{
			print_ecdbg("LED board detected in slot ");
800073bc:	fe fc 02 84 	ld.w	r12,pc[644]
800073c0:	f0 1f 00 a1 	mcall	80007644 <read_led_board_serial_ids+0x2e8>
			print_ecdbg_num(i);
800073c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800073c8:	10 9c       	mov	r12,r8
800073ca:	f0 1f 00 a0 	mcall	80007648 <read_led_board_serial_ids+0x2ec>
			print_ecdbg("\r\n");
800073ce:	fe fc 02 7e 	ld.w	r12,pc[638]
800073d2:	f0 1f 00 9d 	mcall	80007644 <read_led_board_serial_ids+0x2e8>
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
800073d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800073da:	2f f8       	sub	r8,-1
800073dc:	ef 48 ff f0 	st.w	r7[-16],r8
800073e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800073e4:	58 48       	cp.w	r8,4
800073e6:	fe 9a ff c6 	brle	80007372 <read_led_board_serial_ids+0x16>
			print_ecdbg_num(i);
			print_ecdbg("\r\n");
		}
	}
	
	if (ledBrd[0].present && ledBrd[1].present)
800073ea:	fe f8 02 52 	ld.w	r8,pc[594]
800073ee:	f1 38 00 08 	ld.ub	r8,r8[8]
800073f2:	58 08       	cp.w	r8,0
800073f4:	c0 f0       	breq	80007412 <read_led_board_serial_ids+0xb6>
800073f6:	fe f8 02 46 	ld.w	r8,pc[582]
800073fa:	f1 38 00 16 	ld.ub	r8,r8[22]
800073fe:	58 08       	cp.w	r8,0
80007400:	c0 90       	breq	80007412 <read_led_board_serial_ids+0xb6>
	{
		shelf[0].present = 1;
80007402:	fe f9 02 4e 	ld.w	r9,pc[590]
80007406:	30 18       	mov	r8,1
80007408:	b2 c8       	st.b	r9[0x4],r8
		
		print_ecdbg("Shelf 0 present\r\n");
8000740a:	fe fc 02 4a 	ld.w	r12,pc[586]
8000740e:	f0 1f 00 8e 	mcall	80007644 <read_led_board_serial_ids+0x2e8>
	}
	if (ledBrd[1].present && ledBrd[2].present)
80007412:	fe f8 02 2a 	ld.w	r8,pc[554]
80007416:	f1 38 00 16 	ld.ub	r8,r8[22]
8000741a:	58 08       	cp.w	r8,0
8000741c:	c1 00       	breq	8000743c <read_led_board_serial_ids+0xe0>
8000741e:	fe f8 02 1e 	ld.w	r8,pc[542]
80007422:	f1 38 00 24 	ld.ub	r8,r8[36]
80007426:	58 08       	cp.w	r8,0
80007428:	c0 a0       	breq	8000743c <read_led_board_serial_ids+0xe0>
	{
		shelf[1].present = 1;
8000742a:	fe f9 02 26 	ld.w	r9,pc[550]
8000742e:	30 18       	mov	r8,1
80007430:	f3 68 00 09 	st.b	r9[9],r8
		print_ecdbg("Shelf 1 present\r\n");
80007434:	fe fc 02 24 	ld.w	r12,pc[548]
80007438:	f0 1f 00 83 	mcall	80007644 <read_led_board_serial_ids+0x2e8>
	}
	if (ledBrd[2].present && ledBrd[3].present)
8000743c:	fe f8 02 00 	ld.w	r8,pc[512]
80007440:	f1 38 00 24 	ld.ub	r8,r8[36]
80007444:	58 08       	cp.w	r8,0
80007446:	c0 f0       	breq	80007464 <read_led_board_serial_ids+0x108>
80007448:	4f d8       	lddpc	r8,8000763c <read_led_board_serial_ids+0x2e0>
8000744a:	f1 38 00 32 	ld.ub	r8,r8[50]
8000744e:	58 08       	cp.w	r8,0
80007450:	c0 a0       	breq	80007464 <read_led_board_serial_ids+0x108>
	{
		shelf[2].present = 1;
80007452:	fe f9 01 fe 	ld.w	r9,pc[510]
80007456:	30 18       	mov	r8,1
80007458:	f3 68 00 0e 	st.b	r9[14],r8
		print_ecdbg("Shelf 2 present\r\n");
8000745c:	fe fc 02 00 	ld.w	r12,pc[512]
80007460:	f0 1f 00 79 	mcall	80007644 <read_led_board_serial_ids+0x2e8>
	}
	if (ledBrd[3].present && ledBrd[4].present)
80007464:	4f 68       	lddpc	r8,8000763c <read_led_board_serial_ids+0x2e0>
80007466:	f1 38 00 32 	ld.ub	r8,r8[50]
8000746a:	58 08       	cp.w	r8,0
8000746c:	c0 d0       	breq	80007486 <read_led_board_serial_ids+0x12a>
8000746e:	4f 48       	lddpc	r8,8000763c <read_led_board_serial_ids+0x2e0>
80007470:	f1 38 00 40 	ld.ub	r8,r8[64]
80007474:	58 08       	cp.w	r8,0
80007476:	c0 80       	breq	80007486 <read_led_board_serial_ids+0x12a>
	{
		shelf[3].present = 1;
80007478:	4f 69       	lddpc	r9,80007650 <read_led_board_serial_ids+0x2f4>
8000747a:	30 18       	mov	r8,1
8000747c:	f3 68 00 13 	st.b	r9[19],r8
		print_ecdbg("Shelf 3 present\r\n");
80007480:	4f 8c       	lddpc	r12,80007660 <read_led_board_serial_ids+0x304>
80007482:	f0 1f 00 71 	mcall	80007644 <read_led_board_serial_ids+0x2e8>
	}
	

	for (int i=0; i<NUM_LED_BOARDS; i++)
80007486:	30 08       	mov	r8,0
80007488:	ef 48 ff f4 	st.w	r7[-12],r8
8000748c:	cc b8       	rjmp	80007622 <read_led_board_serial_ids+0x2c6>
	{
		unsigned char acc = 0;
8000748e:	30 08       	mov	r8,0
80007490:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[i].present)
80007494:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007498:	4e 9a       	lddpc	r10,8000763c <read_led_board_serial_ids+0x2e0>
8000749a:	12 98       	mov	r8,r9
8000749c:	a3 78       	lsl	r8,0x3
8000749e:	12 18       	sub	r8,r9
800074a0:	a1 78       	lsl	r8,0x1
800074a2:	f4 08 00 08 	add	r8,r10,r8
800074a6:	2f 88       	sub	r8,-8
800074a8:	11 88       	ld.ub	r8,r8[0x0]
800074aa:	58 08       	cp.w	r8,0
800074ac:	e0 80 00 b6 	breq	80007618 <read_led_board_serial_ids+0x2bc>
		{
			OWWriteByte(i, 0x33); //Read ID command
800074b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800074b4:	5c 58       	castu.b	r8
800074b6:	33 3b       	mov	r11,51
800074b8:	10 9c       	mov	r12,r8
800074ba:	f0 1f 00 6b 	mcall	80007664 <read_led_board_serial_ids+0x308>
			
			ledBrd[i].idFamily = OWReadByte(i);
800074be:	ee f6 ff f4 	ld.w	r6,r7[-12]
800074c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800074c6:	5c 58       	castu.b	r8
800074c8:	10 9c       	mov	r12,r8
800074ca:	f0 1f 00 68 	mcall	80007668 <read_led_board_serial_ids+0x30c>
800074ce:	18 98       	mov	r8,r12
800074d0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800074d4:	4d aa       	lddpc	r10,8000763c <read_led_board_serial_ids+0x2e0>
800074d6:	0c 98       	mov	r8,r6
800074d8:	a3 78       	lsl	r8,0x3
800074da:	0c 18       	sub	r8,r6
800074dc:	a1 78       	lsl	r8,0x1
800074de:	10 0a       	add	r10,r8
800074e0:	12 98       	mov	r8,r9
800074e2:	b4 88       	st.b	r10[0x0],r8
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
800074e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800074e8:	4d 5a       	lddpc	r10,8000763c <read_led_board_serial_ids+0x2e0>
800074ea:	12 98       	mov	r8,r9
800074ec:	a3 78       	lsl	r8,0x3
800074ee:	12 18       	sub	r8,r9
800074f0:	a1 78       	lsl	r8,0x1
800074f2:	f4 08 00 08 	add	r8,r10,r8
800074f6:	11 88       	ld.ub	r8,r8[0x0]
800074f8:	10 9b       	mov	r11,r8
800074fa:	30 0c       	mov	r12,0
800074fc:	f0 1f 00 5c 	mcall	8000766c <read_led_board_serial_ids+0x310>
80007500:	18 98       	mov	r8,r12
80007502:	ef 68 ff fb 	st.b	r7[-5],r8
			
			for (int j=0; j<6; j++)
80007506:	30 08       	mov	r8,0
80007508:	ef 48 ff fc 	st.w	r7[-4],r8
8000750c:	c3 78       	rjmp	8000757a <read_led_board_serial_ids+0x21e>
			{
				ledBrd[i].id[j] = OWReadByte(i);
8000750e:	ee f6 ff f4 	ld.w	r6,r7[-12]
80007512:	ee f5 ff fc 	ld.w	r5,r7[-4]
80007516:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000751a:	5c 58       	castu.b	r8
8000751c:	10 9c       	mov	r12,r8
8000751e:	f0 1f 00 53 	mcall	80007668 <read_led_board_serial_ids+0x30c>
80007522:	18 98       	mov	r8,r12
80007524:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007528:	4c 5a       	lddpc	r10,8000763c <read_led_board_serial_ids+0x2e0>
8000752a:	0c 98       	mov	r8,r6
8000752c:	a3 78       	lsl	r8,0x3
8000752e:	0c 18       	sub	r8,r6
80007530:	a1 78       	lsl	r8,0x1
80007532:	f4 08 00 08 	add	r8,r10,r8
80007536:	0a 08       	add	r8,r5
80007538:	f0 ca ff ff 	sub	r10,r8,-1
8000753c:	12 98       	mov	r8,r9
8000753e:	b4 88       	st.b	r10[0x0],r8
				acc = crc8_add(acc, ledBrd[i].id[j]);
80007540:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007544:	ee fa ff fc 	ld.w	r10,r7[-4]
80007548:	4b db       	lddpc	r11,8000763c <read_led_board_serial_ids+0x2e0>
8000754a:	12 98       	mov	r8,r9
8000754c:	a3 78       	lsl	r8,0x3
8000754e:	12 18       	sub	r8,r9
80007550:	a1 78       	lsl	r8,0x1
80007552:	f6 08 00 08 	add	r8,r11,r8
80007556:	14 08       	add	r8,r10
80007558:	2f f8       	sub	r8,-1
8000755a:	11 88       	ld.ub	r8,r8[0x0]
8000755c:	10 99       	mov	r9,r8
8000755e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007562:	12 9b       	mov	r11,r9
80007564:	10 9c       	mov	r12,r8
80007566:	f0 1f 00 42 	mcall	8000766c <read_led_board_serial_ids+0x310>
8000756a:	18 98       	mov	r8,r12
8000756c:	ef 68 ff fb 	st.b	r7[-5],r8
			
			ledBrd[i].idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
			
			for (int j=0; j<6; j++)
80007570:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007574:	2f f8       	sub	r8,-1
80007576:	ef 48 ff fc 	st.w	r7[-4],r8
8000757a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000757e:	58 58       	cp.w	r8,5
80007580:	fe 9a ff c7 	brle	8000750e <read_led_board_serial_ids+0x1b2>
			{
				ledBrd[i].id[j] = OWReadByte(i);
				acc = crc8_add(acc, ledBrd[i].id[j]);
			}
			
			ledBrd[i].idcsum = OWReadByte(i);
80007584:	ee f6 ff f4 	ld.w	r6,r7[-12]
80007588:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000758c:	5c 58       	castu.b	r8
8000758e:	10 9c       	mov	r12,r8
80007590:	f0 1f 00 36 	mcall	80007668 <read_led_board_serial_ids+0x30c>
80007594:	18 98       	mov	r8,r12
80007596:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000759a:	4a 9a       	lddpc	r10,8000763c <read_led_board_serial_ids+0x2e0>
8000759c:	0c 98       	mov	r8,r6
8000759e:	a3 78       	lsl	r8,0x3
800075a0:	0c 18       	sub	r8,r6
800075a2:	a1 78       	lsl	r8,0x1
800075a4:	f4 08 00 08 	add	r8,r10,r8
800075a8:	f0 ca ff f9 	sub	r10,r8,-7
800075ac:	12 98       	mov	r8,r9
800075ae:	b4 88       	st.b	r10[0x0],r8
			
			if (acc != ledBrd[i].idcsum)
800075b0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800075b4:	4a 2a       	lddpc	r10,8000763c <read_led_board_serial_ids+0x2e0>
800075b6:	12 98       	mov	r8,r9
800075b8:	a3 78       	lsl	r8,0x3
800075ba:	12 18       	sub	r8,r9
800075bc:	a1 78       	lsl	r8,0x1
800075be:	f4 08 00 08 	add	r8,r10,r8
800075c2:	2f 98       	sub	r8,-7
800075c4:	11 88       	ld.ub	r8,r8[0x0]
800075c6:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800075ca:	f0 09 18 00 	cp.b	r9,r8
800075ce:	c2 50       	breq	80007618 <read_led_board_serial_ids+0x2bc>
			{
				sysErr.ledBrdSerialIdCsum |= BIT(i); //SE_FAIL;
800075d0:	4a 88       	lddpc	r8,80007670 <read_led_board_serial_ids+0x314>
800075d2:	f1 38 00 0c 	ld.ub	r8,r8[12]
800075d6:	10 99       	mov	r9,r8
800075d8:	30 1a       	mov	r10,1
800075da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800075de:	f4 08 09 48 	lsl	r8,r10,r8
800075e2:	5c 58       	castu.b	r8
800075e4:	f3 e8 10 08 	or	r8,r9,r8
800075e8:	5c 58       	castu.b	r8
800075ea:	5c 58       	castu.b	r8
800075ec:	4a 19       	lddpc	r9,80007670 <read_led_board_serial_ids+0x314>
800075ee:	f3 68 00 0c 	st.b	r9[12],r8
				ledBrd[i].present = 0; //crc8 wasn't valid for this ID chip, don't trust the board
800075f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800075f6:	49 2a       	lddpc	r10,8000763c <read_led_board_serial_ids+0x2e0>
800075f8:	12 98       	mov	r8,r9
800075fa:	a3 78       	lsl	r8,0x3
800075fc:	12 18       	sub	r8,r9
800075fe:	a1 78       	lsl	r8,0x1
80007600:	f4 08 00 08 	add	r8,r10,r8
80007604:	f0 c9 ff f8 	sub	r9,r8,-8
80007608:	30 08       	mov	r8,0
8000760a:	b2 88       	st.b	r9[0x0],r8
				print_ecdbg("Invalid serial ID checksum.\r\n");
8000760c:	49 ac       	lddpc	r12,80007674 <read_led_board_serial_ids+0x318>
8000760e:	f0 1f 00 0e 	mcall	80007644 <read_led_board_serial_ids+0x2e8>
				
				electroclaveState = STATE_CHASSIS_ERROR;
80007612:	49 a9       	lddpc	r9,80007678 <read_led_board_serial_ids+0x31c>
80007614:	30 88       	mov	r8,8
80007616:	b2 88       	st.b	r9[0x0],r8
		shelf[3].present = 1;
		print_ecdbg("Shelf 3 present\r\n");
	}
	

	for (int i=0; i<NUM_LED_BOARDS; i++)
80007618:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000761c:	2f f8       	sub	r8,-1
8000761e:	ef 48 ff f4 	st.w	r7[-12],r8
80007622:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007626:	58 48       	cp.w	r8,4
80007628:	fe 9a ff 33 	brle	8000748e <read_led_board_serial_ids+0x132>
				
				electroclaveState = STATE_CHASSIS_ERROR;
			}
		}
	}
}
8000762c:	2f cd       	sub	sp,-16
8000762e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007632:	00 00       	add	r0,r0
80007634:	80 00       	ld.sh	r0,r0[0x0]
80007636:	21 74       	sub	r4,23
80007638:	80 00       	ld.sh	r0,r0[0x0]
8000763a:	22 34       	sub	r4,35
8000763c:	00 00       	add	r0,r0
8000763e:	0b 4a       	ld.w	r10,--r5
80007640:	80 00       	ld.sh	r0,r0[0x0]
80007642:	64 d0       	ld.w	r0,r2[0x34]
80007644:	80 00       	ld.sh	r0,r0[0x0]
80007646:	33 38       	mov	r8,51
80007648:	80 00       	ld.sh	r0,r0[0x0]
8000764a:	73 20       	ld.w	r0,r9[0x48]
8000764c:	80 00       	ld.sh	r0,r0[0x0]
8000764e:	64 ec       	ld.w	r12,r2[0x38]
80007650:	00 00       	add	r0,r0
80007652:	0b 91       	ld.ub	r1,r5[0x1]
80007654:	80 00       	ld.sh	r0,r0[0x0]
80007656:	64 f0       	ld.w	r0,r2[0x3c]
80007658:	80 00       	ld.sh	r0,r0[0x0]
8000765a:	65 04       	ld.w	r4,r2[0x40]
8000765c:	80 00       	ld.sh	r0,r0[0x0]
8000765e:	65 18       	ld.w	r8,r2[0x44]
80007660:	80 00       	ld.sh	r0,r0[0x0]
80007662:	65 2c       	ld.w	r12,r2[0x48]
80007664:	80 00       	ld.sh	r0,r0[0x0]
80007666:	31 04       	mov	r4,16
80007668:	80 00       	ld.sh	r0,r0[0x0]
8000766a:	31 5c       	mov	r12,21
8000766c:	80 00       	ld.sh	r0,r0[0x0]
8000766e:	31 c0       	mov	r0,28
80007670:	00 00       	add	r0,r0
80007672:	0b d4       	ld.ub	r4,r5[0x5]
80007674:	80 00       	ld.sh	r0,r0[0x0]
80007676:	65 40       	ld.w	r0,r2[0x50]
80007678:	00 00       	add	r0,r0
8000767a:	07 b8       	ld.ub	r8,r3[0x3]

8000767c <check_led_brd_side_lifetime>:
};

/* Each side of an LED board will get different usage */
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx);
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx)
{
8000767c:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80007680:	1a 97       	mov	r7,sp
80007682:	20 4d       	sub	sp,16
80007684:	18 98       	mov	r8,r12
80007686:	ef 68 ff f0 	st.b	r7[-16],r8
	 * Find the record for this board's serial ID number, and check the usage hours and see if we
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
8000768a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000768e:	4c 2a       	lddpc	r10,80007794 <check_led_brd_side_lifetime+0x118>
80007690:	12 98       	mov	r8,r9
80007692:	a3 68       	lsl	r8,0x2
80007694:	12 08       	add	r8,r9
80007696:	f4 08 00 08 	add	r8,r10,r8
8000769a:	2f f8       	sub	r8,-1
8000769c:	11 88       	ld.ub	r8,r8[0x0]
8000769e:	ef 68 ff f7 	st.b	r7[-9],r8
		hours++;
	}
	
#else
	
	hours = h.hrs[idx];
800076a2:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800076a6:	4b d8       	lddpc	r8,80007798 <check_led_brd_side_lifetime+0x11c>
800076a8:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800076ac:	5c 78       	castu.h	r8
800076ae:	ef 48 ff f8 	st.w	r7[-8],r8
		

/*
 * Since we have to calculate the hours to see if the shelf is valid, finish out the calculations for the sanitizing time also. We'll need it later.
 */
	intensity = ((0.00002 * hours * hours) - (0.0699 * hours) + 91.879);
800076b2:	ee fc ff f8 	ld.w	r12,r7[-8]
800076b6:	f0 1f 00 3a 	mcall	8000779c <check_led_brd_side_lifetime+0x120>
800076ba:	e0 68 68 f1 	mov	r8,26865
800076be:	ea 18 88 e3 	orh	r8,0x88e3
800076c2:	e0 69 f8 b5 	mov	r9,63669
800076c6:	ea 19 3e f4 	orh	r9,0x3ef4
800076ca:	f0 1f 00 36 	mcall	800077a0 <check_led_brd_side_lifetime+0x124>
800076ce:	14 98       	mov	r8,r10
800076d0:	16 99       	mov	r9,r11
800076d2:	10 92       	mov	r2,r8
800076d4:	12 93       	mov	r3,r9
800076d6:	ee fc ff f8 	ld.w	r12,r7[-8]
800076da:	f0 1f 00 31 	mcall	8000779c <check_led_brd_side_lifetime+0x120>
800076de:	14 98       	mov	r8,r10
800076e0:	16 99       	mov	r9,r11
800076e2:	04 9a       	mov	r10,r2
800076e4:	06 9b       	mov	r11,r3
800076e6:	f0 1f 00 2f 	mcall	800077a0 <check_led_brd_side_lifetime+0x124>
800076ea:	14 98       	mov	r8,r10
800076ec:	16 99       	mov	r9,r11
800076ee:	10 92       	mov	r2,r8
800076f0:	12 93       	mov	r3,r9
800076f2:	ee fc ff f8 	ld.w	r12,r7[-8]
800076f6:	f0 1f 00 2a 	mcall	8000779c <check_led_brd_side_lifetime+0x120>
800076fa:	e0 68 8a db 	mov	r8,35547
800076fe:	ea 18 65 fd 	orh	r8,0x65fd
80007702:	e0 69 e4 f7 	mov	r9,58615
80007706:	ea 19 bf b1 	orh	r9,0xbfb1
8000770a:	f0 1f 00 26 	mcall	800077a0 <check_led_brd_side_lifetime+0x124>
8000770e:	14 98       	mov	r8,r10
80007710:	16 99       	mov	r9,r11
80007712:	04 9a       	mov	r10,r2
80007714:	06 9b       	mov	r11,r3
80007716:	f0 1f 00 24 	mcall	800077a4 <check_led_brd_side_lifetime+0x128>
8000771a:	14 98       	mov	r8,r10
8000771c:	16 99       	mov	r9,r11
8000771e:	10 9a       	mov	r10,r8
80007720:	12 9b       	mov	r11,r9
80007722:	e0 68 4b c7 	mov	r8,19399
80007726:	ea 18 89 37 	orh	r8,0x8937
8000772a:	e0 69 f8 41 	mov	r9,63553
8000772e:	ea 19 40 56 	orh	r9,0x4056
80007732:	f0 1f 00 1d 	mcall	800077a4 <check_led_brd_side_lifetime+0x128>
80007736:	14 98       	mov	r8,r10
80007738:	16 99       	mov	r9,r11
8000773a:	10 9a       	mov	r10,r8
8000773c:	12 9b       	mov	r11,r9
8000773e:	f0 1f 00 1b 	mcall	800077a8 <check_led_brd_side_lifetime+0x12c>
80007742:	18 98       	mov	r8,r12
80007744:	ef 48 ff fc 	st.w	r7[-4],r8
		
	ledBrdSide[sideIdx].sanitizeMinutes = (c.initialDTE * 100)/intensity; //Shortest sanitize time is 20 minutes. Sanitize time increases as LED intensity drops with usage. Sanitize time is around 49 minutes when usage is at 2000 hours.
80007748:	ef 36 ff f0 	ld.ub	r6,r7[-16]
8000774c:	49 88       	lddpc	r8,800077ac <check_led_brd_side_lifetime+0x130>
8000774e:	11 88       	ld.ub	r8,r8[0x0]
80007750:	f0 08 10 64 	mul	r8,r8,100
80007754:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80007758:	ee fb ff fc 	ld.w	r11,r7[-4]
8000775c:	10 9c       	mov	r12,r8
8000775e:	f0 1f 00 15 	mcall	800077b0 <check_led_brd_side_lifetime+0x134>
80007762:	18 98       	mov	r8,r12
80007764:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
80007768:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000776c:	48 aa       	lddpc	r10,80007794 <check_led_brd_side_lifetime+0x118>
8000776e:	0c 98       	mov	r8,r6
80007770:	a3 68       	lsl	r8,0x2
80007772:	0c 08       	add	r8,r6
80007774:	10 0a       	add	r10,r8
80007776:	12 98       	mov	r8,r9
80007778:	b4 88       	st.b	r10[0x0],r8
	
	if (hours < 2001)
8000777a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000777e:	e0 48 07 d0 	cp.w	r8,2000
80007782:	e0 8b 00 04 	brhi	8000778a <check_led_brd_side_lifetime+0x10e>
	{
		return LED_BOARD_SIDE_WITHIN_LIFETIME_LIMIT;
80007786:	30 18       	mov	r8,1
80007788:	c0 28       	rjmp	8000778c <check_led_brd_side_lifetime+0x110>
	}
	else
	{
		return LED_BOARD_SIDE_PAST_LIFETIME_LIMIT;
8000778a:	30 08       	mov	r8,0
		electroclaveState = STATE_CHASSIS_ERROR;
	}
}
8000778c:	10 9c       	mov	r12,r8
8000778e:	2f cd       	sub	sp,-16
80007790:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80007794:	00 00       	add	r0,r0
80007796:	0b fe       	ld.ub	lr,r5[0x7]
80007798:	00 00       	add	r0,r0
8000779a:	0c 2c       	rsub	r12,r6
8000779c:	80 00       	ld.sh	r0,r0[0x0]
8000779e:	c5 c0       	breq	80007856 <adc_process_task+0xa>
800077a0:	80 00       	ld.sh	r0,r0[0x0]
800077a2:	c1 3c       	rcall	800077c8 <check_led_brd_side_lifetimes+0x14>
800077a4:	80 00       	ld.sh	r0,r0[0x0]
800077a6:	c4 b0       	breq	8000783c <check_led_brd_side_lifetimes+0x88>
800077a8:	80 00       	ld.sh	r0,r0[0x0]
800077aa:	c8 08       	rjmp	800078aa <adc_process_task+0x5e>
800077ac:	00 00       	add	r0,r0
800077ae:	0b fc       	ld.ub	r12,r5[0x7]
800077b0:	80 00       	ld.sh	r0,r0[0x0]
800077b2:	c6 a8       	rjmp	80007886 <adc_process_task+0x3a>

800077b4 <check_led_brd_side_lifetimes>:

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
800077b4:	eb cd 40 c0 	pushm	r6-r7,lr
800077b8:	1a 97       	mov	r7,sp
800077ba:	20 2d       	sub	sp,8
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
800077bc:	30 08       	mov	r8,0
800077be:	ef 48 ff fc 	st.w	r7[-4],r8
800077c2:	c3 78       	rjmp	80007830 <check_led_brd_side_lifetimes+0x7c>
	{
		brdIdx = ledBrdSide[i].boardIdx;
800077c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800077c8:	49 ea       	lddpc	r10,80007840 <check_led_brd_side_lifetimes+0x8c>
800077ca:	12 98       	mov	r8,r9
800077cc:	a3 68       	lsl	r8,0x2
800077ce:	12 08       	add	r8,r9
800077d0:	f4 08 00 08 	add	r8,r10,r8
800077d4:	2f c8       	sub	r8,-4
800077d6:	11 88       	ld.ub	r8,r8[0x0]
800077d8:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[brdIdx].present)
800077dc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800077e0:	49 9a       	lddpc	r10,80007844 <check_led_brd_side_lifetimes+0x90>
800077e2:	12 98       	mov	r8,r9
800077e4:	a3 78       	lsl	r8,0x3
800077e6:	12 18       	sub	r8,r9
800077e8:	a1 78       	lsl	r8,0x1
800077ea:	f4 08 00 08 	add	r8,r10,r8
800077ee:	2f 88       	sub	r8,-8
800077f0:	11 88       	ld.ub	r8,r8[0x0]
800077f2:	58 08       	cp.w	r8,0
800077f4:	c1 90       	breq	80007826 <check_led_brd_side_lifetimes+0x72>
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
800077f6:	ee f6 ff fc 	ld.w	r6,r7[-4]
800077fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800077fe:	5c 58       	castu.b	r8
80007800:	10 9c       	mov	r12,r8
80007802:	f0 1f 00 12 	mcall	80007848 <check_led_brd_side_lifetimes+0x94>
80007806:	18 98       	mov	r8,r12
80007808:	10 99       	mov	r9,r8
8000780a:	30 08       	mov	r8,0
8000780c:	f0 09 18 00 	cp.b	r9,r8
80007810:	5f 09       	sreq	r9
80007812:	48 ca       	lddpc	r10,80007840 <check_led_brd_side_lifetimes+0x8c>
80007814:	0c 98       	mov	r8,r6
80007816:	a3 68       	lsl	r8,0x2
80007818:	0c 08       	add	r8,r6
8000781a:	f4 08 00 08 	add	r8,r10,r8
8000781e:	f0 ca ff fe 	sub	r10,r8,-2
80007822:	12 98       	mov	r8,r9
80007824:	b4 88       	st.b	r10[0x0],r8
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80007826:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000782a:	2f f8       	sub	r8,-1
8000782c:	ef 48 ff fc 	st.w	r7[-4],r8
80007830:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007834:	58 78       	cp.w	r8,7
80007836:	fe 9a ff c7 	brle	800077c4 <check_led_brd_side_lifetimes+0x10>
		if (ledBrd[brdIdx].present)
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
		}	
	}
}
8000783a:	2f ed       	sub	sp,-8
8000783c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007840:	00 00       	add	r0,r0
80007842:	0b fe       	ld.ub	lr,r5[0x7]
80007844:	00 00       	add	r0,r0
80007846:	0b 4a       	ld.w	r10,--r5
80007848:	80 00       	ld.sh	r0,r0[0x0]
8000784a:	76 7c       	ld.w	r12,r11[0x1c]

8000784c <adc_process_task>:

volatile avr32_adcifa_t *adcifa = &AVR32_ADCIFA; // ADCIFA IP registers address

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
8000784c:	eb cd 40 80 	pushm	r7,lr
80007850:	1a 97       	mov	r7,sp
80007852:	20 1d       	sub	sp,4
80007854:	18 98       	mov	r8,r12
80007856:	ef 68 ff fc 	st.b	r7[-4],r8
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
8000785a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);
8000785e:	12 98       	mov	r8,r9
80007860:	a1 78       	lsl	r8,0x1
80007862:	f0 09 00 09 	add	r9,r8,r9

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
80007866:	49 88       	lddpc	r8,800078c4 <adc_process_task+0x78>
80007868:	10 09       	add	r9,r8
8000786a:	49 88       	lddpc	r8,800078c8 <adc_process_task+0x7c>
8000786c:	70 08       	ld.w	r8,r8[0x0]
8000786e:	49 8a       	lddpc	r10,800078cc <adc_process_task+0x80>
80007870:	30 0b       	mov	r11,0
80007872:	10 9c       	mov	r12,r8
80007874:	f0 1f 00 17 	mcall	800078d0 <adc_process_task+0x84>
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);

	// Start ADCIFA sequencer 0
	adcifa_start_sequencer(adcifa, 0);
80007878:	49 48       	lddpc	r8,800078c8 <adc_process_task+0x7c>
8000787a:	70 08       	ld.w	r8,r8[0x0]
8000787c:	30 0b       	mov	r11,0
8000787e:	10 9c       	mov	r12,r8
80007880:	f0 1f 00 15 	mcall	800078d4 <adc_process_task+0x88>
80007884:	c0 28       	rjmp	80007888 <adc_process_task+0x3c>
//30may15			{
//30may15				bluesense_buf[shelfIdx] = 0;
//30may15			}
			return bluesense_buf[shelfIdx];
		}
	}
80007886:	d7 03       	nop
	// Get Values from sequencer 0
	while(1)
	{
		//TODO: need a timeout here and error handling in case the ADC gets stuck for some reason
		
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
80007888:	49 08       	lddpc	r8,800078c8 <adc_process_task+0x7c>
8000788a:	70 08       	ld.w	r8,r8[0x0]
8000788c:	49 39       	lddpc	r9,800078d8 <adc_process_task+0x8c>
8000788e:	49 0a       	lddpc	r10,800078cc <adc_process_task+0x80>
80007890:	30 0b       	mov	r11,0
80007892:	10 9c       	mov	r12,r8
80007894:	f0 1f 00 12 	mcall	800078dc <adc_process_task+0x90>
80007898:	18 98       	mov	r8,r12
8000789a:	10 99       	mov	r9,r8
8000789c:	30 28       	mov	r8,2
8000789e:	f0 09 18 00 	cp.b	r9,r8
800078a2:	cf 21       	brne	80007886 <adc_process_task+0x3a>
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
800078a4:	ef 3a ff fc 	ld.ub	r10,r7[-4]
800078a8:	48 c8       	lddpc	r8,800078d8 <adc_process_task+0x8c>
800078aa:	90 08       	ld.sh	r8,r8[0x0]
800078ac:	48 d9       	lddpc	r9,800078e0 <adc_process_task+0x94>
800078ae:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
//30may15			if (bluesense_buf[shelfIdx] & 0x8000) //30may15 this number is 2's complement, we should just set negative numbers to 0
//30may15			{
//30may15				bluesense_buf[shelfIdx] = 0;
//30may15			}
			return bluesense_buf[shelfIdx];
800078b2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800078b6:	48 b8       	lddpc	r8,800078e0 <adc_process_task+0x94>
800078b8:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
		}
	}
}
800078bc:	10 9c       	mov	r12,r8
800078be:	2f fd       	sub	sp,-4
800078c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800078c4:	00 00       	add	r0,r0
800078c6:	00 a3       	st.w	r0++,r3
800078c8:	00 00       	add	r0,r0
800078ca:	00 b0       	st.h	r0++,r0
800078cc:	00 00       	add	r0,r0
800078ce:	00 9c       	mov	r12,r0
800078d0:	80 00       	ld.sh	r0,r0[0x0]
800078d2:	35 7c       	mov	r12,87
800078d4:	80 00       	ld.sh	r0,r0[0x0]
800078d6:	3a 8c       	mov	r12,-88
800078d8:	00 00       	add	r0,r0
800078da:	0b 48       	ld.w	r8,--r5
800078dc:	80 00       	ld.sh	r0,r0[0x0]
800078de:	3b 18       	mov	r8,-79
800078e0:	00 00       	add	r0,r0
800078e2:	08 40       	or	r0,r4

800078e4 <check_shelf_for_devices>:
	DEVICES_PRESENT
};

unsigned char check_shelf_for_devices(unsigned char shelfPosition);
unsigned char check_shelf_for_devices(unsigned char shelfPosition)
{
800078e4:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
800078e8:	1a 97       	mov	r7,sp
800078ea:	fa cd 00 a0 	sub	sp,sp,160
800078ee:	18 98       	mov	r8,r12
800078f0:	ef 68 ff 60 	st.b	r7[-160],r8
	U16 bluesense[8] = {0,0,0,0,0,0,0,0};
800078f4:	30 08       	mov	r8,0
800078f6:	ef 58 ff c0 	st.h	r7[-64],r8
800078fa:	30 08       	mov	r8,0
800078fc:	ef 58 ff c2 	st.h	r7[-62],r8
80007900:	30 08       	mov	r8,0
80007902:	ef 58 ff c4 	st.h	r7[-60],r8
80007906:	30 08       	mov	r8,0
80007908:	ef 58 ff c6 	st.h	r7[-58],r8
8000790c:	30 08       	mov	r8,0
8000790e:	ef 58 ff c8 	st.h	r7[-56],r8
80007912:	30 08       	mov	r8,0
80007914:	ef 58 ff ca 	st.h	r7[-54],r8
80007918:	30 08       	mov	r8,0
8000791a:	ef 58 ff cc 	st.h	r7[-52],r8
8000791e:	30 08       	mov	r8,0
80007920:	ef 58 ff ce 	st.h	r7[-50],r8
	unsigned long bluesenseAccumulated = 0;
80007924:	30 08       	mov	r8,0
80007926:	ef 48 ff d0 	st.w	r7[-48],r8
	unsigned int bluesenseAvg = 0;
8000792a:	30 08       	mov	r8,0
8000792c:	ef 48 ff d4 	st.w	r7[-44],r8
	
	char str[80];
	
	led_shelf(shelfPosition, LED_ON); //TODO: do we finish this task fast enough to not check the door latch in here? Can't have LEDs on if the door opens
80007930:	ef 38 ff 60 	ld.ub	r8,r7[-160]
80007934:	30 1b       	mov	r11,1
80007936:	10 9c       	mov	r12,r8
80007938:	f0 1f 00 93 	mcall	80007b84 <check_shelf_for_devices+0x2a0>
8000793c:	36 48       	mov	r8,100
8000793e:	ef 48 ff e4 	st.w	r7[-28],r8
80007942:	e0 68 12 00 	mov	r8,4608
80007946:	ea 18 00 7a 	orh	r8,0x7a
8000794a:	ef 48 ff e0 	st.w	r7[-32],r8
8000794e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007952:	ef 48 ff ec 	st.w	r7[-20],r8
80007956:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000795a:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000795e:	ee f0 ff ec 	ld.w	r0,r7[-20]
80007962:	30 01       	mov	r1,0
80007964:	ee f2 ff e8 	ld.w	r2,r7[-24]
80007968:	30 03       	mov	r3,0
8000796a:	e2 02 02 4a 	mul	r10,r1,r2
8000796e:	e6 00 02 48 	mul	r8,r3,r0
80007972:	10 0a       	add	r10,r8
80007974:	e0 02 06 48 	mulu.d	r8,r0,r2
80007978:	12 0a       	add	r10,r9
8000797a:	14 99       	mov	r9,r10
8000797c:	e0 6a 03 e7 	mov	r10,999
80007980:	30 0b       	mov	r11,0
80007982:	f0 0a 00 0a 	add	r10,r8,r10
80007986:	f2 0b 00 4b 	adc	r11,r9,r11
8000798a:	e0 68 03 e8 	mov	r8,1000
8000798e:	30 09       	mov	r9,0
80007990:	f0 1f 00 7e 	mcall	80007b88 <check_shelf_for_devices+0x2a4>
80007994:	14 98       	mov	r8,r10
80007996:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80007998:	ef 48 ff f4 	st.w	r7[-12],r8
8000799c:	ee c8 00 9c 	sub	r8,r7,156
800079a0:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800079a4:	e1 b8 00 42 	mfsr	r8,0x108
800079a8:	10 99       	mov	r9,r8
800079aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800079ae:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800079b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800079b4:	70 09       	ld.w	r9,r8[0x0]
800079b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800079ba:	10 09       	add	r9,r8
800079bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800079c0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800079c2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800079c6:	30 08       	mov	r8,0
800079c8:	f3 68 00 08 	st.b	r9[8],r8
800079cc:	ee c8 00 9c 	sub	r8,r7,156
800079d0:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800079d4:	e1 b8 00 42 	mfsr	r8,0x108
800079d8:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800079dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800079e0:	f1 39 00 08 	ld.ub	r9,r8[8]
800079e4:	30 28       	mov	r8,2
800079e6:	f0 09 18 00 	cp.b	r9,r8
800079ea:	c0 31       	brne	800079f0 <check_shelf_for_devices+0x10c>
    return false;
800079ec:	30 08       	mov	r8,0
800079ee:	c4 38       	rjmp	80007a74 <check_shelf_for_devices+0x190>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800079f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800079f4:	f1 39 00 08 	ld.ub	r9,r8[8]
800079f8:	30 18       	mov	r8,1
800079fa:	f0 09 18 00 	cp.b	r9,r8
800079fe:	c0 31       	brne	80007a04 <check_shelf_for_devices+0x120>
    return true;
80007a00:	30 18       	mov	r8,1
80007a02:	c3 98       	rjmp	80007a74 <check_shelf_for_devices+0x190>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007a04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a08:	70 09       	ld.w	r9,r8[0x0]
80007a0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a0e:	70 18       	ld.w	r8,r8[0x4]
80007a10:	10 39       	cp.w	r9,r8
80007a12:	e0 88 00 1a 	brls	80007a46 <check_shelf_for_devices+0x162>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007a16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a1a:	70 08       	ld.w	r8,r8[0x0]
80007a1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007a20:	10 39       	cp.w	r9,r8
80007a22:	c1 02       	brcc	80007a42 <check_shelf_for_devices+0x15e>
80007a24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a28:	70 18       	ld.w	r8,r8[0x4]
80007a2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007a2e:	10 39       	cp.w	r9,r8
80007a30:	e0 88 00 09 	brls	80007a42 <check_shelf_for_devices+0x15e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80007a34:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007a38:	30 18       	mov	r8,1
80007a3a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80007a3e:	30 18       	mov	r8,1
80007a40:	c1 a8       	rjmp	80007a74 <check_shelf_for_devices+0x190>
    }
    return false;
80007a42:	30 08       	mov	r8,0
80007a44:	c1 88       	rjmp	80007a74 <check_shelf_for_devices+0x190>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007a46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a4a:	70 08       	ld.w	r8,r8[0x0]
80007a4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007a50:	10 39       	cp.w	r9,r8
80007a52:	c0 93       	brcs	80007a64 <check_shelf_for_devices+0x180>
80007a54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a58:	70 18       	ld.w	r8,r8[0x4]
80007a5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007a5e:	10 39       	cp.w	r9,r8
80007a60:	e0 88 00 09 	brls	80007a72 <check_shelf_for_devices+0x18e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80007a64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007a68:	30 18       	mov	r8,1
80007a6a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80007a6e:	30 18       	mov	r8,1
80007a70:	c0 28       	rjmp	80007a74 <check_shelf_for_devices+0x190>
    }
    return false;
80007a72:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80007a74:	58 08       	cp.w	r8,0
80007a76:	ca b0       	breq	800079cc <check_shelf_for_devices+0xe8>
	
	cpu_delay_ms(100, EC_CPU_CLOCK_FREQ); //30may15 was 50ms, trying 100 to see if we can get more consistent
		
	//Read bluesense for this shelf

	for (int i=0; i<8; i++)
80007a78:	30 08       	mov	r8,0
80007a7a:	ef 48 ff d8 	st.w	r7[-40],r8
80007a7e:	c3 08       	rjmp	80007ade <check_shelf_for_devices+0x1fa>
	{
		bluesense[i] = adc_process_task(shelfPosition);
80007a80:	ee f6 ff d8 	ld.w	r6,r7[-40]
80007a84:	ef 38 ff 60 	ld.ub	r8,r7[-160]
80007a88:	10 9c       	mov	r12,r8
80007a8a:	f0 1f 00 41 	mcall	80007b8c <check_shelf_for_devices+0x2a8>
80007a8e:	18 98       	mov	r8,r12
80007a90:	10 99       	mov	r9,r8
80007a92:	ec 08 15 01 	lsl	r8,r6,0x1
80007a96:	ee 08 00 08 	add	r8,r7,r8
80007a9a:	f1 59 ff c0 	st.h	r8[-64],r9
		
		if (bluesense[i] & 0x8000) //don't try to average negative numbers
80007a9e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80007aa2:	a1 78       	lsl	r8,0x1
80007aa4:	ee 08 00 08 	add	r8,r7,r8
80007aa8:	f1 08 ff c0 	ld.sh	r8,r8[-64]
80007aac:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80007ab0:	30 08       	mov	r8,0
80007ab2:	f0 09 19 00 	cp.h	r9,r8
80007ab6:	c0 f5       	brlt	80007ad4 <check_shelf_for_devices+0x1f0>
		{
			bluesenseAccumulated += 0;
		}
		else
		{
			bluesenseAccumulated += bluesense[i];
80007ab8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80007abc:	a1 78       	lsl	r8,0x1
80007abe:	ee 08 00 08 	add	r8,r7,r8
80007ac2:	f1 08 ff c0 	ld.sh	r8,r8[-64]
80007ac6:	5c 78       	castu.h	r8
80007ac8:	ee f9 ff d0 	ld.w	r9,r7[-48]
80007acc:	f2 08 00 08 	add	r8,r9,r8
80007ad0:	ef 48 ff d0 	st.w	r7[-48],r8
	
	cpu_delay_ms(100, EC_CPU_CLOCK_FREQ); //30may15 was 50ms, trying 100 to see if we can get more consistent
		
	//Read bluesense for this shelf

	for (int i=0; i<8; i++)
80007ad4:	ee f8 ff d8 	ld.w	r8,r7[-40]
80007ad8:	2f f8       	sub	r8,-1
80007ada:	ef 48 ff d8 	st.w	r7[-40],r8
80007ade:	ee f8 ff d8 	ld.w	r8,r7[-40]
80007ae2:	58 78       	cp.w	r8,7
80007ae4:	fe 9a ff ce 	brle	80007a80 <check_shelf_for_devices+0x19c>
		{
			bluesenseAccumulated += bluesense[i];
		}
	}
	
	bluesenseAvg = bluesenseAccumulated/8;
80007ae8:	ee f8 ff d0 	ld.w	r8,r7[-48]
80007aec:	a3 98       	lsr	r8,0x3
80007aee:	ef 48 ff d4 	st.w	r7[-44],r8
	
	led_shelf(shelfPosition, LED_OFF);
80007af2:	ef 38 ff 60 	ld.ub	r8,r7[-160]
80007af6:	30 0b       	mov	r11,0
80007af8:	10 9c       	mov	r12,r8
80007afa:	f0 1f 00 23 	mcall	80007b84 <check_shelf_for_devices+0x2a0>
	
	memset(str,0x00, 80);
80007afe:	ee c8 00 90 	sub	r8,r7,144
80007b02:	35 0a       	mov	r10,80
80007b04:	30 0b       	mov	r11,0
80007b06:	10 9c       	mov	r12,r8
80007b08:	f0 1f 00 22 	mcall	80007b90 <check_shelf_for_devices+0x2ac>

	for (int i=0; i<8; i++)
80007b0c:	30 08       	mov	r8,0
80007b0e:	ef 48 ff dc 	st.w	r7[-36],r8
80007b12:	c2 28       	rjmp	80007b56 <check_shelf_for_devices+0x272>
	{
		sprintf(str, "shelf %d: bluesense[%d]=0x%X\r\n", shelfPosition, i, bluesense[i]);
80007b14:	ee f8 ff dc 	ld.w	r8,r7[-36]
80007b18:	a1 78       	lsl	r8,0x1
80007b1a:	ee 08 00 08 	add	r8,r7,r8
80007b1e:	f1 08 ff c0 	ld.sh	r8,r8[-64]
80007b22:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007b26:	ef 39 ff 60 	ld.ub	r9,r7[-160]
80007b2a:	ee c8 00 90 	sub	r8,r7,144
80007b2e:	1a da       	st.w	--sp,r10
80007b30:	ee fa ff dc 	ld.w	r10,r7[-36]
80007b34:	1a da       	st.w	--sp,r10
80007b36:	1a d9       	st.w	--sp,r9
80007b38:	49 7b       	lddpc	r11,80007b94 <check_shelf_for_devices+0x2b0>
80007b3a:	10 9c       	mov	r12,r8
80007b3c:	f0 1f 00 17 	mcall	80007b98 <check_shelf_for_devices+0x2b4>
80007b40:	2f dd       	sub	sp,-12
		print_ecdbg(str);
80007b42:	ee c8 00 90 	sub	r8,r7,144
80007b46:	10 9c       	mov	r12,r8
80007b48:	f0 1f 00 15 	mcall	80007b9c <check_shelf_for_devices+0x2b8>
	
	led_shelf(shelfPosition, LED_OFF);
	
	memset(str,0x00, 80);

	for (int i=0; i<8; i++)
80007b4c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80007b50:	2f f8       	sub	r8,-1
80007b52:	ef 48 ff dc 	st.w	r7[-36],r8
80007b56:	ee f8 ff dc 	ld.w	r8,r7[-36]
80007b5a:	58 78       	cp.w	r8,7
80007b5c:	fe 9a ff dc 	brle	80007b14 <check_shelf_for_devices+0x230>
	{
		sprintf(str, "shelf %d: bluesense[%d]=0x%X\r\n", shelfPosition, i, bluesense[i]);
		print_ecdbg(str);
	}

	if ((bluesenseAvg < 0x300) ||  (bluesenseAvg & 0x8000))//full range for 12 bit number is 0xFFF, but this number is 2's complement meaning it can (and it does) go negative
80007b60:	ee f8 ff d4 	ld.w	r8,r7[-44]
80007b64:	e0 48 02 ff 	cp.w	r8,767
80007b68:	e0 88 00 07 	brls	80007b76 <check_shelf_for_devices+0x292>
80007b6c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80007b70:	e2 18 80 00 	andl	r8,0x8000,COH
80007b74:	c0 30       	breq	80007b7a <check_shelf_for_devices+0x296>
	{
		return DEVICES_PRESENT;
80007b76:	30 18       	mov	r8,1
80007b78:	c0 28       	rjmp	80007b7c <check_shelf_for_devices+0x298>
	}
	else
	{
		return NO_DEVICES_PRESENT;
80007b7a:	30 08       	mov	r8,0
	}
}
80007b7c:	10 9c       	mov	r12,r8
80007b7e:	2d 8d       	sub	sp,-160
80007b80:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80007b84:	80 00       	ld.sh	r0,r0[0x0]
80007b86:	63 50       	ld.w	r0,r1[0x54]
80007b88:	80 00       	ld.sh	r0,r0[0x0]
80007b8a:	c8 92       	brcc	80007a9c <check_shelf_for_devices+0x1b8>
80007b8c:	80 00       	ld.sh	r0,r0[0x0]
80007b8e:	78 4c       	ld.w	r12,r12[0x10]
80007b90:	80 00       	ld.sh	r0,r0[0x0]
80007b92:	cc 3e       	rcall	80007918 <check_shelf_for_devices+0x34>
80007b94:	80 00       	ld.sh	r0,r0[0x0]
80007b96:	65 60       	ld.w	r0,r2[0x58]
80007b98:	80 00       	ld.sh	r0,r0[0x0]
80007b9a:	cc 4c       	rcall	80007d22 <print_pca9952_errors+0xd2>
80007b9c:	80 00       	ld.sh	r0,r0[0x0]
80007b9e:	33 38       	mov	r8,51

80007ba0 <check_shelves_for_devices>:

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
80007ba0:	eb cd 40 c0 	pushm	r6-r7,lr
80007ba4:	1a 97       	mov	r7,sp
80007ba6:	20 1d       	sub	sp,4
	for (int i=0; i<NUM_SHELVES; i++)
80007ba8:	30 08       	mov	r8,0
80007baa:	ef 48 ff fc 	st.w	r7[-4],r8
80007bae:	c3 d8       	rjmp	80007c28 <check_shelves_for_devices+0x88>
	{
		if (shelf[i].present)
80007bb0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007bb4:	4a 1a       	lddpc	r10,80007c38 <check_shelves_for_devices+0x98>
80007bb6:	12 98       	mov	r8,r9
80007bb8:	a3 68       	lsl	r8,0x2
80007bba:	12 08       	add	r8,r9
80007bbc:	f4 08 00 08 	add	r8,r10,r8
80007bc0:	2f c8       	sub	r8,-4
80007bc2:	11 88       	ld.ub	r8,r8[0x0]
80007bc4:	58 08       	cp.w	r8,0
80007bc6:	c2 c0       	breq	80007c1e <check_shelves_for_devices+0x7e>
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);
80007bc8:	ee f6 ff fc 	ld.w	r6,r7[-4]
80007bcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bd0:	5c 58       	castu.b	r8
80007bd2:	10 9c       	mov	r12,r8
80007bd4:	f0 1f 00 1a 	mcall	80007c3c <check_shelves_for_devices+0x9c>
80007bd8:	18 98       	mov	r8,r12
80007bda:	10 99       	mov	r9,r8
80007bdc:	49 7a       	lddpc	r10,80007c38 <check_shelves_for_devices+0x98>
80007bde:	0c 98       	mov	r8,r6
80007be0:	a3 68       	lsl	r8,0x2
80007be2:	0c 08       	add	r8,r6
80007be4:	f4 08 00 08 	add	r8,r10,r8
80007be8:	f0 ca ff fd 	sub	r10,r8,-3
80007bec:	12 98       	mov	r8,r9
80007bee:	b4 88       	st.b	r10[0x0],r8
			
			if (shelf[i].devicesPresent)
80007bf0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007bf4:	49 1a       	lddpc	r10,80007c38 <check_shelves_for_devices+0x98>
80007bf6:	12 98       	mov	r8,r9
80007bf8:	a3 68       	lsl	r8,0x2
80007bfa:	12 08       	add	r8,r9
80007bfc:	f4 08 00 08 	add	r8,r10,r8
80007c00:	2f d8       	sub	r8,-3
80007c02:	11 88       	ld.ub	r8,r8[0x0]
80007c04:	58 08       	cp.w	r8,0
80007c06:	c0 c0       	breq	80007c1e <check_shelves_for_devices+0x7e>
			{
				print_ecdbg("Devices detected on shelf ");
80007c08:	48 ec       	lddpc	r12,80007c40 <check_shelves_for_devices+0xa0>
80007c0a:	f0 1f 00 0f 	mcall	80007c44 <check_shelves_for_devices+0xa4>
				print_ecdbg_num(i);
80007c0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c12:	10 9c       	mov	r12,r8
80007c14:	f0 1f 00 0d 	mcall	80007c48 <check_shelves_for_devices+0xa8>
				print_ecdbg("\r\n");
80007c18:	48 dc       	lddpc	r12,80007c4c <check_shelves_for_devices+0xac>
80007c1a:	f0 1f 00 0b 	mcall	80007c44 <check_shelves_for_devices+0xa4>
}

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
	for (int i=0; i<NUM_SHELVES; i++)
80007c1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c22:	2f f8       	sub	r8,-1
80007c24:	ef 48 ff fc 	st.w	r7[-4],r8
80007c28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c2c:	58 38       	cp.w	r8,3
80007c2e:	fe 9a ff c1 	brle	80007bb0 <check_shelves_for_devices+0x10>
				print_ecdbg_num(i);
				print_ecdbg("\r\n");
			}
		}
	}
}
80007c32:	2f fd       	sub	sp,-4
80007c34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007c38:	00 00       	add	r0,r0
80007c3a:	0b 91       	ld.ub	r1,r5[0x1]
80007c3c:	80 00       	ld.sh	r0,r0[0x0]
80007c3e:	78 e4       	ld.w	r4,r12[0x38]
80007c40:	80 00       	ld.sh	r0,r0[0x0]
80007c42:	65 80       	ld.w	r0,r2[0x60]
80007c44:	80 00       	ld.sh	r0,r0[0x0]
80007c46:	33 38       	mov	r8,51
80007c48:	80 00       	ld.sh	r0,r0[0x0]
80007c4a:	73 20       	ld.w	r0,r9[0x48]
80007c4c:	80 00       	ld.sh	r0,r0[0x0]
80007c4e:	64 ec       	ld.w	r12,r2[0x38]

80007c50 <print_pca9952_errors>:


void print_pca9952_errors(unsigned char sideSel, unsigned char eflag0, unsigned char eflag1);
void print_pca9952_errors(unsigned char sideSel, unsigned char eflag0, unsigned char eflag1)
{
80007c50:	eb cd 40 80 	pushm	r7,lr
80007c54:	1a 97       	mov	r7,sp
80007c56:	20 7d       	sub	sp,28
80007c58:	16 99       	mov	r9,r11
80007c5a:	14 98       	mov	r8,r10
80007c5c:	18 9a       	mov	r10,r12
80007c5e:	ef 6a ff ec 	st.b	r7[-20],r10
80007c62:	ef 69 ff e8 	st.b	r7[-24],r9
80007c66:	ef 68 ff e4 	st.b	r7[-28],r8
	unsigned char bit;
	
	switch (sideSel)
80007c6a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80007c6e:	58 08       	cp.w	r8,0
80007c70:	c4 f0       	breq	80007d0e <print_pca9952_errors+0xbe>
80007c72:	58 18       	cp.w	r8,1
80007c74:	e0 81 00 c6 	brne	80007e00 <print_pca9952_errors+0x1b0>
	{
		case TOP:
			print_ecdbg("PCA9952 Error(s) on TOPDRIVE ");
80007c78:	4e 4c       	lddpc	r12,80007e08 <print_pca9952_errors+0x1b8>
80007c7a:	f0 1f 00 65 	mcall	80007e0c <print_pca9952_errors+0x1bc>
			
			for (int i=0; i<8; i++)
80007c7e:	30 08       	mov	r8,0
80007c80:	ef 48 ff f4 	st.w	r7[-12],r8
80007c84:	c2 f8       	rjmp	80007ce2 <print_pca9952_errors+0x92>
			{
				bit = (1 << i);
80007c86:	30 19       	mov	r9,1
80007c88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007c8c:	f2 08 09 48 	lsl	r8,r9,r8
80007c90:	ef 68 ff f3 	st.b	r7[-13],r8
				if (bit & eflag0)
80007c94:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80007c98:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80007c9c:	f3 e8 00 08 	and	r8,r9,r8
80007ca0:	5c 58       	castu.b	r8
80007ca2:	c1 b0       	breq	80007cd8 <print_pca9952_errors+0x88>
				{
					print_ecdbg_num(i);
80007ca4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007ca8:	10 9c       	mov	r12,r8
80007caa:	f0 1f 00 5a 	mcall	80007e10 <print_pca9952_errors+0x1c0>
					print_ecdbg(" ");
80007cae:	4d ac       	lddpc	r12,80007e14 <print_pca9952_errors+0x1c4>
80007cb0:	f0 1f 00 57 	mcall	80007e0c <print_pca9952_errors+0x1bc>
					sysErr.topdrive |= BIT(i); //SE_FAIL
80007cb4:	4d 98       	lddpc	r8,80007e18 <print_pca9952_errors+0x1c8>
80007cb6:	11 88       	ld.ub	r8,r8[0x0]
80007cb8:	10 99       	mov	r9,r8
80007cba:	30 1a       	mov	r10,1
80007cbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007cc0:	f4 08 09 48 	lsl	r8,r10,r8
80007cc4:	5c 58       	castu.b	r8
80007cc6:	f3 e8 10 08 	or	r8,r9,r8
80007cca:	5c 58       	castu.b	r8
80007ccc:	5c 58       	castu.b	r8
80007cce:	4d 39       	lddpc	r9,80007e18 <print_pca9952_errors+0x1c8>
80007cd0:	b2 88       	st.b	r9[0x0],r8
					electroclaveState = STATE_CHASSIS_ERROR;
80007cd2:	4d 39       	lddpc	r9,80007e1c <print_pca9952_errors+0x1cc>
80007cd4:	30 88       	mov	r8,8
80007cd6:	b2 88       	st.b	r9[0x0],r8
	switch (sideSel)
	{
		case TOP:
			print_ecdbg("PCA9952 Error(s) on TOPDRIVE ");
			
			for (int i=0; i<8; i++)
80007cd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007cdc:	2f f8       	sub	r8,-1
80007cde:	ef 48 ff f4 	st.w	r7[-12],r8
80007ce2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007ce6:	58 78       	cp.w	r8,7
80007ce8:	fe 9a ff cf 	brle	80007c86 <print_pca9952_errors+0x36>
					sysErr.topdrive |= BIT(i); //SE_FAIL
					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			print_ecdbg("\r\n");
80007cec:	4c dc       	lddpc	r12,80007e20 <print_pca9952_errors+0x1d0>
80007cee:	f0 1f 00 48 	mcall	80007e0c <print_pca9952_errors+0x1bc>
			
			if (eflag1 != 0)
80007cf2:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80007cf6:	30 08       	mov	r8,0
80007cf8:	f0 09 18 00 	cp.b	r9,r8
80007cfc:	e0 80 00 81 	breq	80007dfe <print_pca9952_errors+0x1ae>
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U7\r\n");
80007d00:	4c 9c       	lddpc	r12,80007e24 <print_pca9952_errors+0x1d4>
80007d02:	f0 1f 00 43 	mcall	80007e0c <print_pca9952_errors+0x1bc>
				electroclaveState = STATE_CHASSIS_ERROR;
80007d06:	4c 69       	lddpc	r9,80007e1c <print_pca9952_errors+0x1cc>
80007d08:	30 88       	mov	r8,8
80007d0a:	b2 88       	st.b	r9[0x0],r8
			}
			
			break;
80007d0c:	c7 a8       	rjmp	80007e00 <print_pca9952_errors+0x1b0>

		case BOTTOM:
			print_ecdbg("PCA9952 Error(s) on BOTDRIVE ");
80007d0e:	4c 7c       	lddpc	r12,80007e28 <print_pca9952_errors+0x1d8>
80007d10:	f0 1f 00 3f 	mcall	80007e0c <print_pca9952_errors+0x1bc>
			
			for (int i=0; i<8; i++)
80007d14:	30 08       	mov	r8,0
80007d16:	ef 48 ff f8 	st.w	r7[-8],r8
80007d1a:	c2 a8       	rjmp	80007d6e <print_pca9952_errors+0x11e>
			{
				bit = (1 << i);
80007d1c:	30 19       	mov	r9,1
80007d1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007d22:	f2 08 09 48 	lsl	r8,r9,r8
80007d26:	ef 68 ff f3 	st.b	r7[-13],r8
				if (bit & eflag0)
80007d2a:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80007d2e:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80007d32:	f3 e8 00 08 	and	r8,r9,r8
80007d36:	5c 58       	castu.b	r8
80007d38:	c1 60       	breq	80007d64 <print_pca9952_errors+0x114>
				{
					print_ecdbg_num(i);
80007d3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007d3e:	10 9c       	mov	r12,r8
80007d40:	f0 1f 00 34 	mcall	80007e10 <print_pca9952_errors+0x1c0>
					print_ecdbg(" ");
80007d44:	4b 4c       	lddpc	r12,80007e14 <print_pca9952_errors+0x1c4>
80007d46:	f0 1f 00 32 	mcall	80007e0c <print_pca9952_errors+0x1bc>
					sysErr.botdrive |= BIT(i); //SE_FAIL;
80007d4a:	4b 48       	lddpc	r8,80007e18 <print_pca9952_errors+0x1c8>
80007d4c:	70 19       	ld.w	r9,r8[0x4]
80007d4e:	30 1a       	mov	r10,1
80007d50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007d54:	f4 08 09 48 	lsl	r8,r10,r8
80007d58:	10 49       	or	r9,r8
80007d5a:	4b 08       	lddpc	r8,80007e18 <print_pca9952_errors+0x1c8>
80007d5c:	91 19       	st.w	r8[0x4],r9
					electroclaveState = STATE_CHASSIS_ERROR;
80007d5e:	4b 09       	lddpc	r9,80007e1c <print_pca9952_errors+0x1cc>
80007d60:	30 88       	mov	r8,8
80007d62:	b2 88       	st.b	r9[0x0],r8
			break;

		case BOTTOM:
			print_ecdbg("PCA9952 Error(s) on BOTDRIVE ");
			
			for (int i=0; i<8; i++)
80007d64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007d68:	2f f8       	sub	r8,-1
80007d6a:	ef 48 ff f8 	st.w	r7[-8],r8
80007d6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007d72:	58 78       	cp.w	r8,7
80007d74:	fe 9a ff d4 	brle	80007d1c <print_pca9952_errors+0xcc>
					sysErr.botdrive |= BIT(i); //SE_FAIL;
					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			for (int i=0; i<4; i++)
80007d78:	30 08       	mov	r8,0
80007d7a:	ef 48 ff fc 	st.w	r7[-4],r8
80007d7e:	c2 c8       	rjmp	80007dd6 <print_pca9952_errors+0x186>
			{
				bit = (1 << i);
80007d80:	30 19       	mov	r9,1
80007d82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007d86:	f2 08 09 48 	lsl	r8,r9,r8
80007d8a:	ef 68 ff f3 	st.b	r7[-13],r8
				if (bit & eflag1)
80007d8e:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80007d92:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80007d96:	f3 e8 00 08 	and	r8,r9,r8
80007d9a:	5c 58       	castu.b	r8
80007d9c:	c1 80       	breq	80007dcc <print_pca9952_errors+0x17c>
				{
					print_ecdbg_num((i+8));
80007d9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007da2:	2f 88       	sub	r8,-8
80007da4:	10 9c       	mov	r12,r8
80007da6:	f0 1f 00 1b 	mcall	80007e10 <print_pca9952_errors+0x1c0>
					print_ecdbg(" ");
80007daa:	49 bc       	lddpc	r12,80007e14 <print_pca9952_errors+0x1c4>
80007dac:	f0 1f 00 18 	mcall	80007e0c <print_pca9952_errors+0x1bc>
					sysErr.botdrive |= BIT(i+8); //SE_FAIL;
80007db0:	49 a8       	lddpc	r8,80007e18 <print_pca9952_errors+0x1c8>
80007db2:	70 19       	ld.w	r9,r8[0x4]
80007db4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007db8:	2f 88       	sub	r8,-8
80007dba:	30 1a       	mov	r10,1
80007dbc:	f4 08 09 48 	lsl	r8,r10,r8
80007dc0:	10 49       	or	r9,r8
80007dc2:	49 68       	lddpc	r8,80007e18 <print_pca9952_errors+0x1c8>
80007dc4:	91 19       	st.w	r8[0x4],r9
					electroclaveState = STATE_CHASSIS_ERROR;
80007dc6:	49 69       	lddpc	r9,80007e1c <print_pca9952_errors+0x1cc>
80007dc8:	30 88       	mov	r8,8
80007dca:	b2 88       	st.b	r9[0x0],r8
					sysErr.botdrive |= BIT(i); //SE_FAIL;
					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			for (int i=0; i<4; i++)
80007dcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007dd0:	2f f8       	sub	r8,-1
80007dd2:	ef 48 ff fc 	st.w	r7[-4],r8
80007dd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007dda:	58 38       	cp.w	r8,3
80007ddc:	fe 9a ff d2 	brle	80007d80 <print_pca9952_errors+0x130>
					sysErr.botdrive |= BIT(i+8); //SE_FAIL;
					electroclaveState = STATE_CHASSIS_ERROR;
				}
			}
			
			print_ecdbg("\r\n");
80007de0:	49 0c       	lddpc	r12,80007e20 <print_pca9952_errors+0x1d0>
80007de2:	f0 1f 00 0b 	mcall	80007e0c <print_pca9952_errors+0x1bc>
			
			if ((eflag1 & 0xF0) != 0)
80007de6:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80007dea:	e2 18 00 f0 	andl	r8,0xf0,COH
80007dee:	c0 90       	breq	80007e00 <print_pca9952_errors+0x1b0>
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U8\r\n");
80007df0:	48 fc       	lddpc	r12,80007e2c <print_pca9952_errors+0x1dc>
80007df2:	f0 1f 00 07 	mcall	80007e0c <print_pca9952_errors+0x1bc>
				electroclaveState = STATE_CHASSIS_ERROR;
80007df6:	48 a9       	lddpc	r9,80007e1c <print_pca9952_errors+0x1cc>
80007df8:	30 88       	mov	r8,8
80007dfa:	b2 88       	st.b	r9[0x0],r8
80007dfc:	c0 28       	rjmp	80007e00 <print_pca9952_errors+0x1b0>
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U7\r\n");
				electroclaveState = STATE_CHASSIS_ERROR;
			}
			
			break;
80007dfe:	d7 03       	nop
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U8\r\n");
				electroclaveState = STATE_CHASSIS_ERROR;
			}
			break;
	}
}
80007e00:	2f 9d       	sub	sp,-28
80007e02:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e06:	00 00       	add	r0,r0
80007e08:	80 00       	ld.sh	r0,r0[0x0]
80007e0a:	65 9c       	ld.w	r12,r2[0x64]
80007e0c:	80 00       	ld.sh	r0,r0[0x0]
80007e0e:	33 38       	mov	r8,51
80007e10:	80 00       	ld.sh	r0,r0[0x0]
80007e12:	73 20       	ld.w	r0,r9[0x48]
80007e14:	80 00       	ld.sh	r0,r0[0x0]
80007e16:	65 bc       	ld.w	r12,r2[0x6c]
80007e18:	00 00       	add	r0,r0
80007e1a:	0b d4       	ld.ub	r4,r5[0x5]
80007e1c:	00 00       	add	r0,r0
80007e1e:	07 b8       	ld.ub	r8,r3[0x3]
80007e20:	80 00       	ld.sh	r0,r0[0x0]
80007e22:	64 ec       	ld.w	r12,r2[0x38]
80007e24:	80 00       	ld.sh	r0,r0[0x0]
80007e26:	65 c0       	ld.w	r0,r2[0x70]
80007e28:	80 00       	ld.sh	r0,r0[0x0]
80007e2a:	65 fc       	ld.w	r12,r2[0x7c]
80007e2c:	80 00       	ld.sh	r0,r0[0x0]
80007e2e:	66 1c       	ld.w	r12,r3[0x4]

80007e30 <test_led_driver_channels>:

unsigned char topEflag0 = 0, topEflag1 = 0, botEflag0 = 0, botEflag1 = 0;

void test_led_driver_channels(void);
void test_led_driver_channels(void)
{
80007e30:	eb cd 40 80 	pushm	r7,lr
80007e34:	1a 97       	mov	r7,sp
80007e36:	20 4d       	sub	sp,16
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
80007e38:	30 08       	mov	r8,0
80007e3a:	ef 68 ff f3 	st.b	r7[-13],r8
	
	
	for (int i=0; i<NUM_SHELVES; i++)
80007e3e:	30 08       	mov	r8,0
80007e40:	ef 48 ff f4 	st.w	r7[-12],r8
80007e44:	c1 78       	rjmp	80007e72 <test_led_driver_channels+0x42>
	{
		if (shelf[i].present)
80007e46:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007e4a:	4f ba       	lddpc	r10,80008034 <test_led_driver_channels+0x204>
80007e4c:	12 98       	mov	r8,r9
80007e4e:	a3 68       	lsl	r8,0x2
80007e50:	12 08       	add	r8,r9
80007e52:	f4 08 00 08 	add	r8,r10,r8
80007e56:	2f c8       	sub	r8,-4
80007e58:	11 88       	ld.ub	r8,r8[0x0]
80007e5a:	58 08       	cp.w	r8,0
80007e5c:	c0 60       	breq	80007e68 <test_led_driver_channels+0x38>
		{
			numShelvesPresent++;
80007e5e:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80007e62:	2f f8       	sub	r8,-1
80007e64:	ef 68 ff f3 	st.b	r7[-13],r8
void test_led_driver_channels(void)
{
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
	
	
	for (int i=0; i<NUM_SHELVES; i++)
80007e68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007e6c:	2f f8       	sub	r8,-1
80007e6e:	ef 48 ff f4 	st.w	r7[-12],r8
80007e72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007e76:	58 38       	cp.w	r8,3
80007e78:	fe 9a ff e7 	brle	80007e46 <test_led_driver_channels+0x16>
		{
			numShelvesPresent++;
		}
	}
	
	if (numShelvesPresent !=0)
80007e7c:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80007e80:	30 08       	mov	r8,0
80007e82:	f0 09 18 00 	cp.b	r9,r8
80007e86:	e0 80 00 c2 	breq	8000800a <test_led_driver_channels+0x1da>
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
80007e8a:	e0 6a 00 c8 	mov	r10,200
80007e8e:	34 3b       	mov	r11,67
80007e90:	30 0c       	mov	r12,0
80007e92:	f0 1f 00 6a 	mcall	80008038 <test_led_driver_channels+0x208>
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
80007e96:	e0 6a 00 c8 	mov	r10,200
80007e9a:	34 3b       	mov	r11,67
80007e9c:	30 1c       	mov	r12,1
80007e9e:	f0 1f 00 67 	mcall	80008038 <test_led_driver_channels+0x208>

		for (int i=0; i<NUM_SHELVES; i++)
80007ea2:	30 08       	mov	r8,0
80007ea4:	ef 48 ff f8 	st.w	r7[-8],r8
80007ea8:	c1 98       	rjmp	80007eda <test_led_driver_channels+0xaa>
		{
			if (shelf[i].present)
80007eaa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007eae:	4e 2a       	lddpc	r10,80008034 <test_led_driver_channels+0x204>
80007eb0:	12 98       	mov	r8,r9
80007eb2:	a3 68       	lsl	r8,0x2
80007eb4:	12 08       	add	r8,r9
80007eb6:	f4 08 00 08 	add	r8,r10,r8
80007eba:	2f c8       	sub	r8,-4
80007ebc:	11 88       	ld.ub	r8,r8[0x0]
80007ebe:	58 08       	cp.w	r8,0
80007ec0:	c0 80       	breq	80007ed0 <test_led_driver_channels+0xa0>
			{
				led_shelf(i, LED_ON);
80007ec2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ec6:	5c 58       	castu.b	r8
80007ec8:	30 1b       	mov	r11,1
80007eca:	10 9c       	mov	r12,r8
80007ecc:	f0 1f 00 5c 	mcall	8000803c <test_led_driver_channels+0x20c>
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);

		for (int i=0; i<NUM_SHELVES; i++)
80007ed0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ed4:	2f f8       	sub	r8,-1
80007ed6:	ef 48 ff f8 	st.w	r7[-8],r8
80007eda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ede:	58 38       	cp.w	r8,3
80007ee0:	fe 9a ff e5 	brle	80007eaa <test_led_driver_channels+0x7a>
			{
				led_shelf(i, LED_ON);
			}
		}

		PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0x40); //starts fault test
80007ee4:	34 0a       	mov	r10,64
80007ee6:	30 1b       	mov	r11,1
80007ee8:	30 0c       	mov	r12,0
80007eea:	f0 1f 00 54 	mcall	80008038 <test_led_driver_channels+0x208>
		PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0x40); //starts fault test
80007eee:	34 0a       	mov	r10,64
80007ef0:	30 1b       	mov	r11,1
80007ef2:	30 1c       	mov	r12,1
80007ef4:	f0 1f 00 51 	mcall	80008038 <test_led_driver_channels+0x208>
80007ef8:	c0 28       	rjmp	80007efc <test_led_driver_channels+0xcc>
				}
				
				break; //fault test for LED_TOP strings is complete
			}
			
		}
80007efa:	d7 03       	nop
		PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0x40); //starts fault test
		PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0x40); //starts fault test
		
		while (1)
		{
			tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_MODE2);
80007efc:	30 1b       	mov	r11,1
80007efe:	30 0c       	mov	r12,0
80007f00:	f0 1f 00 50 	mcall	80008040 <test_led_driver_channels+0x210>
80007f04:	18 98       	mov	r8,r12
80007f06:	ef 68 ff f1 	st.b	r7[-15],r8
			
			if ((tmp1 & 0x40) == 0)
80007f0a:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80007f0e:	e2 18 00 40 	andl	r8,0x40,COH
80007f12:	cf 41       	brne	80007efa <test_led_driver_channels+0xca>
			{
				topEflag0 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);
80007f14:	34 4b       	mov	r11,68
80007f16:	30 0c       	mov	r12,0
80007f18:	f0 1f 00 4a 	mcall	80008040 <test_led_driver_channels+0x210>
80007f1c:	18 98       	mov	r8,r12
80007f1e:	4c a9       	lddpc	r9,80008044 <test_led_driver_channels+0x214>
80007f20:	b2 88       	st.b	r9[0x0],r8
				topEflag1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
80007f22:	34 5b       	mov	r11,69
80007f24:	30 0c       	mov	r12,0
80007f26:	f0 1f 00 47 	mcall	80008040 <test_led_driver_channels+0x210>
80007f2a:	18 98       	mov	r8,r12
80007f2c:	4c 79       	lddpc	r9,80008048 <test_led_driver_channels+0x218>
80007f2e:	b2 88       	st.b	r9[0x0],r8
				
				if ((topEflag0 != 0) || (topEflag1 != 0))
80007f30:	4c 58       	lddpc	r8,80008044 <test_led_driver_channels+0x214>
80007f32:	11 88       	ld.ub	r8,r8[0x0]
80007f34:	58 08       	cp.w	r8,0
80007f36:	c0 51       	brne	80007f40 <test_led_driver_channels+0x110>
80007f38:	4c 48       	lddpc	r8,80008048 <test_led_driver_channels+0x218>
80007f3a:	11 88       	ld.ub	r8,r8[0x0]
80007f3c:	58 08       	cp.w	r8,0
80007f3e:	c1 00       	breq	80007f5e <test_led_driver_channels+0x12e>
				{
					if (!firstTimeThroughPCA9952)
80007f40:	4c 38       	lddpc	r8,8000804c <test_led_driver_channels+0x21c>
80007f42:	11 88       	ld.ub	r8,r8[0x0]
80007f44:	58 08       	cp.w	r8,0
80007f46:	c0 e1       	brne	80007f62 <test_led_driver_channels+0x132>
					{
						print_pca9952_errors(TOP, topEflag0, topEflag1);
80007f48:	4c 08       	lddpc	r8,80008048 <test_led_driver_channels+0x218>
80007f4a:	11 88       	ld.ub	r8,r8[0x0]
80007f4c:	10 99       	mov	r9,r8
80007f4e:	4b e8       	lddpc	r8,80008044 <test_led_driver_channels+0x214>
80007f50:	11 88       	ld.ub	r8,r8[0x0]
80007f52:	12 9a       	mov	r10,r9
80007f54:	10 9b       	mov	r11,r8
80007f56:	30 1c       	mov	r12,1
80007f58:	f0 1f 00 3e 	mcall	80008050 <test_led_driver_channels+0x220>
					}
				}
				
				break; //fault test for LED_TOP strings is complete
80007f5c:	c0 68       	rjmp	80007f68 <test_led_driver_channels+0x138>
80007f5e:	d7 03       	nop
80007f60:	c0 48       	rjmp	80007f68 <test_led_driver_channels+0x138>
80007f62:	d7 03       	nop
80007f64:	c0 28       	rjmp	80007f68 <test_led_driver_channels+0x138>
				}
				
				break; //fault test for LED_BOTTOM strings is complete
			}
			
		}
80007f66:	d7 03       	nop
			
		}
		
		while (1)
		{
			tmp2 = PCA9952_read_reg(LED_BOTTOM, PCA9952_MODE2);
80007f68:	30 1b       	mov	r11,1
80007f6a:	30 1c       	mov	r12,1
80007f6c:	f0 1f 00 35 	mcall	80008040 <test_led_driver_channels+0x210>
80007f70:	18 98       	mov	r8,r12
80007f72:	ef 68 ff f2 	st.b	r7[-14],r8
			
			if ((tmp2 & 0x40) == 0)
80007f76:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80007f7a:	e2 18 00 40 	andl	r8,0x40,COH
80007f7e:	cf 41       	brne	80007f66 <test_led_driver_channels+0x136>
			{
				botEflag0 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);
80007f80:	34 4b       	mov	r11,68
80007f82:	30 1c       	mov	r12,1
80007f84:	f0 1f 00 2f 	mcall	80008040 <test_led_driver_channels+0x210>
80007f88:	18 98       	mov	r8,r12
80007f8a:	4b 39       	lddpc	r9,80008054 <test_led_driver_channels+0x224>
80007f8c:	b2 88       	st.b	r9[0x0],r8
				botEflag1 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
80007f8e:	34 5b       	mov	r11,69
80007f90:	30 1c       	mov	r12,1
80007f92:	f0 1f 00 2c 	mcall	80008040 <test_led_driver_channels+0x210>
80007f96:	18 98       	mov	r8,r12
80007f98:	4b 09       	lddpc	r9,80008058 <test_led_driver_channels+0x228>
80007f9a:	b2 88       	st.b	r9[0x0],r8
				
				if ((botEflag0 != 0) || (botEflag1 != 0))
80007f9c:	4a e8       	lddpc	r8,80008054 <test_led_driver_channels+0x224>
80007f9e:	11 88       	ld.ub	r8,r8[0x0]
80007fa0:	58 08       	cp.w	r8,0
80007fa2:	c0 51       	brne	80007fac <test_led_driver_channels+0x17c>
80007fa4:	4a d8       	lddpc	r8,80008058 <test_led_driver_channels+0x228>
80007fa6:	11 88       	ld.ub	r8,r8[0x0]
80007fa8:	58 08       	cp.w	r8,0
80007faa:	c0 f0       	breq	80007fc8 <test_led_driver_channels+0x198>
				{
					if (!firstTimeThroughPCA9952)
80007fac:	4a 88       	lddpc	r8,8000804c <test_led_driver_channels+0x21c>
80007fae:	11 88       	ld.ub	r8,r8[0x0]
80007fb0:	58 08       	cp.w	r8,0
80007fb2:	c0 b1       	brne	80007fc8 <test_led_driver_channels+0x198>
					{
						print_pca9952_errors(BOTTOM, botEflag0, botEflag1);
80007fb4:	4a 98       	lddpc	r8,80008058 <test_led_driver_channels+0x228>
80007fb6:	11 88       	ld.ub	r8,r8[0x0]
80007fb8:	10 99       	mov	r9,r8
80007fba:	4a 78       	lddpc	r8,80008054 <test_led_driver_channels+0x224>
80007fbc:	11 88       	ld.ub	r8,r8[0x0]
80007fbe:	12 9a       	mov	r10,r9
80007fc0:	10 9b       	mov	r11,r8
80007fc2:	30 0c       	mov	r12,0
80007fc4:	f0 1f 00 23 	mcall	80008050 <test_led_driver_channels+0x220>
				break; //fault test for LED_BOTTOM strings is complete
			}
			
		}
		
		for (int i=0; i<NUM_SHELVES; i++)
80007fc8:	30 08       	mov	r8,0
80007fca:	ef 48 ff fc 	st.w	r7[-4],r8
80007fce:	c0 d8       	rjmp	80007fe8 <test_led_driver_channels+0x1b8>
		{
			led_shelf(i, LED_OFF);
80007fd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007fd4:	5c 58       	castu.b	r8
80007fd6:	30 0b       	mov	r11,0
80007fd8:	10 9c       	mov	r12,r8
80007fda:	f0 1f 00 19 	mcall	8000803c <test_led_driver_channels+0x20c>
				break; //fault test for LED_BOTTOM strings is complete
			}
			
		}
		
		for (int i=0; i<NUM_SHELVES; i++)
80007fde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007fe2:	2f f8       	sub	r8,-1
80007fe4:	ef 48 ff fc 	st.w	r7[-4],r8
80007fe8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007fec:	58 38       	cp.w	r8,3
80007fee:	fe 9a ff f1 	brle	80007fd0 <test_led_driver_channels+0x1a0>
		{
			led_shelf(i, LED_OFF);
		}
		
		//Put driver current back to full power
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT);
80007ff2:	e0 6a 00 c8 	mov	r10,200
80007ff6:	34 3b       	mov	r11,67
80007ff8:	30 0c       	mov	r12,0
80007ffa:	f0 1f 00 10 	mcall	80008038 <test_led_driver_channels+0x208>
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT);
80007ffe:	e0 6a 00 c8 	mov	r10,200
80008002:	34 3b       	mov	r11,67
80008004:	30 1c       	mov	r12,1
80008006:	f0 1f 00 0d 	mcall	80008038 <test_led_driver_channels+0x208>
	}
	
	sysErr.topdrive = topEflag0;
8000800a:	48 f8       	lddpc	r8,80008044 <test_led_driver_channels+0x214>
8000800c:	11 88       	ld.ub	r8,r8[0x0]
8000800e:	49 49       	lddpc	r9,8000805c <test_led_driver_channels+0x22c>
80008010:	b2 88       	st.b	r9[0x0],r8
	sysErr.botdrive = (botEflag1 << 8) | botEflag0;
80008012:	49 28       	lddpc	r8,80008058 <test_led_driver_channels+0x228>
80008014:	11 88       	ld.ub	r8,r8[0x0]
80008016:	f0 09 15 08 	lsl	r9,r8,0x8
8000801a:	48 f8       	lddpc	r8,80008054 <test_led_driver_channels+0x224>
8000801c:	11 88       	ld.ub	r8,r8[0x0]
8000801e:	f3 e8 10 08 	or	r8,r9,r8
80008022:	10 99       	mov	r9,r8
80008024:	48 e8       	lddpc	r8,8000805c <test_led_driver_channels+0x22c>
80008026:	91 19       	st.w	r8[0x4],r9
	firstTimeThroughPCA9952 = 0;
80008028:	48 99       	lddpc	r9,8000804c <test_led_driver_channels+0x21c>
8000802a:	30 08       	mov	r8,0
8000802c:	b2 88       	st.b	r9[0x0],r8
}
8000802e:	2f cd       	sub	sp,-16
80008030:	e3 cd 80 80 	ldm	sp++,r7,pc
80008034:	00 00       	add	r0,r0
80008036:	0b 91       	ld.ub	r1,r5[0x1]
80008038:	80 00       	ld.sh	r0,r0[0x0]
8000803a:	5e 8c       	retls	r12
8000803c:	80 00       	ld.sh	r0,r0[0x0]
8000803e:	63 50       	ld.w	r0,r1[0x54]
80008040:	80 00       	ld.sh	r0,r0[0x0]
80008042:	5f 10       	srne	r0
80008044:	00 00       	add	r0,r0
80008046:	07 d0       	ld.ub	r0,r3[0x5]
80008048:	00 00       	add	r0,r0
8000804a:	07 d1       	ld.ub	r1,r3[0x5]
8000804c:	00 00       	add	r0,r0
8000804e:	00 0d       	add	sp,r0
80008050:	80 00       	ld.sh	r0,r0[0x0]
80008052:	7c 50       	ld.w	r0,lr[0x14]
80008054:	00 00       	add	r0,r0
80008056:	07 d2       	ld.ub	r2,r3[0x5]
80008058:	00 00       	add	r0,r0
8000805a:	07 d3       	ld.ub	r3,r3[0x5]
8000805c:	00 00       	add	r0,r0
8000805e:	0b d4       	ld.ub	r4,r5[0x5]

80008060 <set_shelves_active_inactive>:

void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
80008060:	eb cd 40 80 	pushm	r7,lr
80008064:	1a 97       	mov	r7,sp
80008066:	20 1d       	sub	sp,4

	test_led_driver_channels();
80008068:	f0 1f 00 5d 	mcall	800081dc <set_shelves_active_inactive+0x17c>
	
	numActiveShelves = 0;
8000806c:	4d d9       	lddpc	r9,800081e0 <set_shelves_active_inactive+0x180>
8000806e:	30 08       	mov	r8,0
80008070:	b2 88       	st.b	r9[0x0],r8
	numPresentShelves = 0;
80008072:	4d d9       	lddpc	r9,800081e4 <set_shelves_active_inactive+0x184>
80008074:	30 08       	mov	r8,0
80008076:	b2 88       	st.b	r9[0x0],r8
	
	for (int i=0; i<NUM_SHELVES; i++)
80008078:	30 08       	mov	r8,0
8000807a:	ef 48 ff fc 	st.w	r7[-4],r8
8000807e:	c1 08       	rjmp	8000809e <set_shelves_active_inactive+0x3e>
	{
		shelf[i].active = SHELF_INACTIVE;
80008080:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008084:	4d 9a       	lddpc	r10,800081e8 <set_shelves_active_inactive+0x188>
80008086:	12 98       	mov	r8,r9
80008088:	a3 68       	lsl	r8,0x2
8000808a:	12 08       	add	r8,r9
8000808c:	f4 08 00 09 	add	r9,r10,r8
80008090:	30 08       	mov	r8,0
80008092:	b2 88       	st.b	r9[0x0],r8
	test_led_driver_channels();
	
	numActiveShelves = 0;
	numPresentShelves = 0;
	
	for (int i=0; i<NUM_SHELVES; i++)
80008094:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008098:	2f f8       	sub	r8,-1
8000809a:	ef 48 ff fc 	st.w	r7[-4],r8
8000809e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800080a2:	58 38       	cp.w	r8,3
800080a4:	fe 9a ff ee 	brle	80008080 <set_shelves_active_inactive+0x20>
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
800080a8:	4d 08       	lddpc	r8,800081e8 <set_shelves_active_inactive+0x188>
800080aa:	11 c8       	ld.ub	r8,r8[0x4]
800080ac:	58 08       	cp.w	r8,0
800080ae:	c1 f0       	breq	800080ec <set_shelves_active_inactive+0x8c>
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
800080b0:	4c f8       	lddpc	r8,800081ec <set_shelves_active_inactive+0x18c>
800080b2:	11 a8       	ld.ub	r8,r8[0x2]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
800080b4:	58 08       	cp.w	r8,0
800080b6:	c1 b1       	brne	800080ec <set_shelves_active_inactive+0x8c>
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
800080b8:	4c d8       	lddpc	r8,800081ec <set_shelves_active_inactive+0x18c>
800080ba:	11 f8       	ld.ub	r8,r8[0x7]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
800080bc:	58 08       	cp.w	r8,0
800080be:	c1 71       	brne	800080ec <set_shelves_active_inactive+0x8c>
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
	{
		numPresentShelves++;
800080c0:	4c 98       	lddpc	r8,800081e4 <set_shelves_active_inactive+0x184>
800080c2:	11 88       	ld.ub	r8,r8[0x0]
800080c4:	2f f8       	sub	r8,-1
800080c6:	5c 58       	castu.b	r8
800080c8:	4c 79       	lddpc	r9,800081e4 <set_shelves_active_inactive+0x184>
800080ca:	b2 88       	st.b	r9[0x0],r8
		
		if (shelf[0].devicesPresent)
800080cc:	4c 78       	lddpc	r8,800081e8 <set_shelves_active_inactive+0x188>
800080ce:	11 b8       	ld.ub	r8,r8[0x3]
800080d0:	58 08       	cp.w	r8,0
800080d2:	c0 d0       	breq	800080ec <set_shelves_active_inactive+0x8c>
		{
			shelf[0].active = SHELF_ACTIVE;
800080d4:	4c 59       	lddpc	r9,800081e8 <set_shelves_active_inactive+0x188>
800080d6:	30 18       	mov	r8,1
800080d8:	b2 88       	st.b	r9[0x0],r8
			numActiveShelves++;
800080da:	4c 28       	lddpc	r8,800081e0 <set_shelves_active_inactive+0x180>
800080dc:	11 88       	ld.ub	r8,r8[0x0]
800080de:	2f f8       	sub	r8,-1
800080e0:	5c 58       	castu.b	r8
800080e2:	4c 09       	lddpc	r9,800081e0 <set_shelves_active_inactive+0x180>
800080e4:	b2 88       	st.b	r9[0x0],r8
			print_ecdbg("Shelf 0 active\r\n");
800080e6:	4c 3c       	lddpc	r12,800081f0 <set_shelves_active_inactive+0x190>
800080e8:	f0 1f 00 43 	mcall	800081f4 <set_shelves_active_inactive+0x194>
		}
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
800080ec:	4b f8       	lddpc	r8,800081e8 <set_shelves_active_inactive+0x188>
800080ee:	f1 38 00 09 	ld.ub	r8,r8[9]
800080f2:	58 08       	cp.w	r8,0
800080f4:	c2 20       	breq	80008138 <set_shelves_active_inactive+0xd8>
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
800080f6:	4b e8       	lddpc	r8,800081ec <set_shelves_active_inactive+0x18c>
800080f8:	f1 38 00 0c 	ld.ub	r8,r8[12]
		}
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
800080fc:	58 08       	cp.w	r8,0
800080fe:	c1 d1       	brne	80008138 <set_shelves_active_inactive+0xd8>
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
80008100:	4b b8       	lddpc	r8,800081ec <set_shelves_active_inactive+0x18c>
80008102:	f1 38 00 11 	ld.ub	r8,r8[17]
		}
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80008106:	58 08       	cp.w	r8,0
80008108:	c1 81       	brne	80008138 <set_shelves_active_inactive+0xd8>
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
	{
		numPresentShelves++;
8000810a:	4b 78       	lddpc	r8,800081e4 <set_shelves_active_inactive+0x184>
8000810c:	11 88       	ld.ub	r8,r8[0x0]
8000810e:	2f f8       	sub	r8,-1
80008110:	5c 58       	castu.b	r8
80008112:	4b 59       	lddpc	r9,800081e4 <set_shelves_active_inactive+0x184>
80008114:	b2 88       	st.b	r9[0x0],r8
		
		if (shelf[1].devicesPresent)
80008116:	4b 58       	lddpc	r8,800081e8 <set_shelves_active_inactive+0x188>
80008118:	f1 38 00 08 	ld.ub	r8,r8[8]
8000811c:	58 08       	cp.w	r8,0
8000811e:	c0 d0       	breq	80008138 <set_shelves_active_inactive+0xd8>
		{
			shelf[1].active = SHELF_ACTIVE;
80008120:	4b 29       	lddpc	r9,800081e8 <set_shelves_active_inactive+0x188>
80008122:	30 18       	mov	r8,1
80008124:	b2 d8       	st.b	r9[0x5],r8
			numActiveShelves++;
80008126:	4a f8       	lddpc	r8,800081e0 <set_shelves_active_inactive+0x180>
80008128:	11 88       	ld.ub	r8,r8[0x0]
8000812a:	2f f8       	sub	r8,-1
8000812c:	5c 58       	castu.b	r8
8000812e:	4a d9       	lddpc	r9,800081e0 <set_shelves_active_inactive+0x180>
80008130:	b2 88       	st.b	r9[0x0],r8
			print_ecdbg("Shelf 1 active\r\n");
80008132:	4b 2c       	lddpc	r12,800081f8 <set_shelves_active_inactive+0x198>
80008134:	f0 1f 00 30 	mcall	800081f4 <set_shelves_active_inactive+0x194>
		}
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80008138:	4a c8       	lddpc	r8,800081e8 <set_shelves_active_inactive+0x188>
8000813a:	f1 38 00 0e 	ld.ub	r8,r8[14]
8000813e:	58 08       	cp.w	r8,0
80008140:	c2 30       	breq	80008186 <set_shelves_active_inactive+0x126>
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
80008142:	4a b8       	lddpc	r8,800081ec <set_shelves_active_inactive+0x18c>
80008144:	f1 38 00 16 	ld.ub	r8,r8[22]
		}
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80008148:	58 08       	cp.w	r8,0
8000814a:	c1 e1       	brne	80008186 <set_shelves_active_inactive+0x126>
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
8000814c:	4a 88       	lddpc	r8,800081ec <set_shelves_active_inactive+0x18c>
8000814e:	f1 38 00 1b 	ld.ub	r8,r8[27]
		}
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80008152:	58 08       	cp.w	r8,0
80008154:	c1 91       	brne	80008186 <set_shelves_active_inactive+0x126>
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
	{
		numPresentShelves++;
80008156:	4a 48       	lddpc	r8,800081e4 <set_shelves_active_inactive+0x184>
80008158:	11 88       	ld.ub	r8,r8[0x0]
8000815a:	2f f8       	sub	r8,-1
8000815c:	5c 58       	castu.b	r8
8000815e:	4a 29       	lddpc	r9,800081e4 <set_shelves_active_inactive+0x184>
80008160:	b2 88       	st.b	r9[0x0],r8
		
		if (shelf[2].devicesPresent)
80008162:	4a 28       	lddpc	r8,800081e8 <set_shelves_active_inactive+0x188>
80008164:	f1 38 00 0d 	ld.ub	r8,r8[13]
80008168:	58 08       	cp.w	r8,0
8000816a:	c0 e0       	breq	80008186 <set_shelves_active_inactive+0x126>
		{
			shelf[2].active = SHELF_ACTIVE;
8000816c:	49 f9       	lddpc	r9,800081e8 <set_shelves_active_inactive+0x188>
8000816e:	30 18       	mov	r8,1
80008170:	f3 68 00 0a 	st.b	r9[10],r8
			numActiveShelves++;
80008174:	49 b8       	lddpc	r8,800081e0 <set_shelves_active_inactive+0x180>
80008176:	11 88       	ld.ub	r8,r8[0x0]
80008178:	2f f8       	sub	r8,-1
8000817a:	5c 58       	castu.b	r8
8000817c:	49 99       	lddpc	r9,800081e0 <set_shelves_active_inactive+0x180>
8000817e:	b2 88       	st.b	r9[0x0],r8
			print_ecdbg("Shelf 2 active\r\n");
80008180:	49 fc       	lddpc	r12,800081fc <set_shelves_active_inactive+0x19c>
80008182:	f0 1f 00 1d 	mcall	800081f4 <set_shelves_active_inactive+0x194>
		}
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
80008186:	49 98       	lddpc	r8,800081e8 <set_shelves_active_inactive+0x188>
80008188:	f1 38 00 13 	ld.ub	r8,r8[19]
8000818c:	58 08       	cp.w	r8,0
8000818e:	c2 30       	breq	800081d4 <set_shelves_active_inactive+0x174>
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
80008190:	49 78       	lddpc	r8,800081ec <set_shelves_active_inactive+0x18c>
80008192:	f1 38 00 20 	ld.ub	r8,r8[32]
		}
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
80008196:	58 08       	cp.w	r8,0
80008198:	c1 e1       	brne	800081d4 <set_shelves_active_inactive+0x174>
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
8000819a:	49 58       	lddpc	r8,800081ec <set_shelves_active_inactive+0x18c>
8000819c:	f1 38 00 25 	ld.ub	r8,r8[37]
		}
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
800081a0:	58 08       	cp.w	r8,0
800081a2:	c1 91       	brne	800081d4 <set_shelves_active_inactive+0x174>
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
	{
		numPresentShelves++;
800081a4:	49 08       	lddpc	r8,800081e4 <set_shelves_active_inactive+0x184>
800081a6:	11 88       	ld.ub	r8,r8[0x0]
800081a8:	2f f8       	sub	r8,-1
800081aa:	5c 58       	castu.b	r8
800081ac:	48 e9       	lddpc	r9,800081e4 <set_shelves_active_inactive+0x184>
800081ae:	b2 88       	st.b	r9[0x0],r8
		
		if (shelf[3].devicesPresent)
800081b0:	48 e8       	lddpc	r8,800081e8 <set_shelves_active_inactive+0x188>
800081b2:	f1 38 00 12 	ld.ub	r8,r8[18]
800081b6:	58 08       	cp.w	r8,0
800081b8:	c0 e0       	breq	800081d4 <set_shelves_active_inactive+0x174>
		{
			shelf[3].active = SHELF_ACTIVE;
800081ba:	48 c9       	lddpc	r9,800081e8 <set_shelves_active_inactive+0x188>
800081bc:	30 18       	mov	r8,1
800081be:	f3 68 00 0f 	st.b	r9[15],r8
			numActiveShelves++;
800081c2:	48 88       	lddpc	r8,800081e0 <set_shelves_active_inactive+0x180>
800081c4:	11 88       	ld.ub	r8,r8[0x0]
800081c6:	2f f8       	sub	r8,-1
800081c8:	5c 58       	castu.b	r8
800081ca:	48 69       	lddpc	r9,800081e0 <set_shelves_active_inactive+0x180>
800081cc:	b2 88       	st.b	r9[0x0],r8
			print_ecdbg("Shelf 3 active\r\n");
800081ce:	48 dc       	lddpc	r12,80008200 <set_shelves_active_inactive+0x1a0>
800081d0:	f0 1f 00 09 	mcall	800081f4 <set_shelves_active_inactive+0x194>
		}
	}
}
800081d4:	2f fd       	sub	sp,-4
800081d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800081da:	00 00       	add	r0,r0
800081dc:	80 00       	ld.sh	r0,r0[0x0]
800081de:	7e 30       	ld.w	r0,pc[0xc]
800081e0:	00 00       	add	r0,r0
800081e2:	0c ee       	st.h	--r6,lr
800081e4:	00 00       	add	r0,r0
800081e6:	0b 90       	ld.ub	r0,r5[0x1]
800081e8:	00 00       	add	r0,r0
800081ea:	0b 91       	ld.ub	r1,r5[0x1]
800081ec:	00 00       	add	r0,r0
800081ee:	0b fe       	ld.ub	lr,r5[0x7]
800081f0:	80 00       	ld.sh	r0,r0[0x0]
800081f2:	66 58       	ld.w	r8,r3[0x14]
800081f4:	80 00       	ld.sh	r0,r0[0x0]
800081f6:	33 38       	mov	r8,51
800081f8:	80 00       	ld.sh	r0,r0[0x0]
800081fa:	66 6c       	ld.w	r12,r3[0x18]
800081fc:	80 00       	ld.sh	r0,r0[0x0]
800081fe:	66 80       	ld.w	r0,r3[0x20]
80008200:	80 00       	ld.sh	r0,r0[0x0]
80008202:	66 94       	ld.w	r4,r3[0x24]

80008204 <num_active_shelves>:

unsigned char num_active_shelves(void);
unsigned char num_active_shelves(void)
{
80008204:	eb cd 40 80 	pushm	r7,lr
80008208:	1a 97       	mov	r7,sp
	return numActiveShelves;
8000820a:	48 38       	lddpc	r8,80008214 <num_active_shelves+0x10>
8000820c:	11 88       	ld.ub	r8,r8[0x0]
}
8000820e:	10 9c       	mov	r12,r8
80008210:	e3 cd 80 80 	ldm	sp++,r7,pc
80008214:	00 00       	add	r0,r0
80008216:	0c ee       	st.h	--r6,lr

80008218 <num_present_shelves>:

unsigned char num_present_shelves(void);
unsigned char num_present_shelves(void)
{
80008218:	eb cd 40 80 	pushm	r7,lr
8000821c:	1a 97       	mov	r7,sp
	return numPresentShelves;
8000821e:	48 38       	lddpc	r8,80008228 <num_present_shelves+0x10>
80008220:	11 88       	ld.ub	r8,r8[0x0]
}
80008222:	10 9c       	mov	r12,r8
80008224:	e3 cd 80 80 	ldm	sp++,r7,pc
80008228:	00 00       	add	r0,r0
8000822a:	0b 90       	ld.ub	r0,r5[0x1]

8000822c <init_sys_clocks>:
/*
 * Using RC8M (internal 8MHz)
 */
void init_sys_clocks(void);
void init_sys_clocks(void)
{
8000822c:	eb cd 40 80 	pushm	r7,lr
80008230:	1a 97       	mov	r7,sp
80008232:	20 1d       	sub	sp,4

//this kinda works for 100MHz, problems with TWIM, but maybe we can work around that 17may15
/*
 * From CLOCK_EXAMPLE31 which changes clock sources on the fly. Trying to get a faster clock so that we can work with the serial ID chip (DS2411) which needs control to 6us. 16may15
 */
	osc_enable(OSC_ID_RC8M);
80008234:	30 2c       	mov	r12,2
80008236:	f0 1f 00 10 	mcall	80008274 <init_sys_clocks+0x48>
	pll_config_init(&pcfg, PLL_SRC_RC8M, 1, EC_CPU_CLOCK_100MHZ/OSC_RC8M_NOMINAL_HZ);
8000823a:	ee c8 00 04 	sub	r8,r7,4
8000823e:	30 c9       	mov	r9,12
80008240:	30 1a       	mov	r10,1
80008242:	30 2b       	mov	r11,2
80008244:	10 9c       	mov	r12,r8
80008246:	f0 1f 00 0d 	mcall	80008278 <init_sys_clocks+0x4c>
	pll_enable(&pcfg, 0);
8000824a:	ee c8 00 04 	sub	r8,r7,4
8000824e:	30 0b       	mov	r11,0
80008250:	10 9c       	mov	r12,r8
80008252:	f0 1f 00 0b 	mcall	8000827c <init_sys_clocks+0x50>
	sysclk_set_prescalers(1,1,1,1);
80008256:	30 19       	mov	r9,1
80008258:	30 1a       	mov	r10,1
8000825a:	30 1b       	mov	r11,1
8000825c:	30 1c       	mov	r12,1
8000825e:	f0 1f 00 09 	mcall	80008280 <init_sys_clocks+0x54>
	pll_wait_for_lock(0);
80008262:	30 0c       	mov	r12,0
80008264:	f0 1f 00 08 	mcall	80008284 <init_sys_clocks+0x58>
	sysclk_set_source(SYSCLK_SRC_PLL0);	
80008268:	30 3c       	mov	r12,3
8000826a:	f0 1f 00 08 	mcall	80008288 <init_sys_clocks+0x5c>
	/* put the clock out on PC19 so we can check to make sure we set it up correctly */
	//Note this code comes from ASF example AVR32 SCIF example 3
//16may15 seems to cause problems, leave out for now	scif_start_gclk(AVR32_SCIF_GCLK_GCLK0PIN, &gclkOpt);
//16may15 seems to cause problems, leave out for now	gpio_enable_module_pin(AVR32_SCIF_GCLK_0_1_PIN, AVR32_SCIF_GCLK_0_1_FUNCTION);

}
8000826e:	2f fd       	sub	sp,-4
80008270:	e3 cd 80 80 	ldm	sp++,r7,pc
80008274:	80 00       	ld.sh	r0,r0[0x0]
80008276:	6e f8       	ld.w	r8,r7[0x3c]
80008278:	80 00       	ld.sh	r0,r0[0x0]
8000827a:	70 8c       	ld.w	r12,r8[0x20]
8000827c:	80 00       	ld.sh	r0,r0[0x0]
8000827e:	5b e0       	cp.w	r0,-2
80008280:	80 00       	ld.sh	r0,r0[0x0]
80008282:	5c f0       	rol	r0
80008284:	80 00       	ld.sh	r0,r0[0x0]
80008286:	71 9c       	ld.w	r12,r8[0x64]
80008288:	80 00       	ld.sh	r0,r0[0x0]
8000828a:	5d f0       	*unknown*

8000828c <adc_process_init>:
 *
 */

void adc_process_init(void);
void adc_process_init(void)
{
8000828c:	eb cd 40 80 	pushm	r7,lr
80008290:	1a 97       	mov	r7,sp
		{INPUT4_ADC_PIN, INPUT4_ADC_FUNCTION}
	};


	// Assign and enable GPIO pins to the ADC function.
	gpio_enable_module(ADCIFA_GPIO_MAP,
80008292:	30 6b       	mov	r11,6
80008294:	48 bc       	lddpc	r12,800082c0 <adc_process_init+0x34>
80008296:	f0 1f 00 0c 	mcall	800082c4 <adc_process_init+0x38>
			sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));

	// Get ADCIFA Factory Configuration
	adcifa_get_calibration_data(adcifa, &adc_config_t);
8000829a:	48 c8       	lddpc	r8,800082c8 <adc_process_init+0x3c>
8000829c:	70 08       	ld.w	r8,r8[0x0]
8000829e:	48 cb       	lddpc	r11,800082cc <adc_process_init+0x40>
800082a0:	10 9c       	mov	r12,r8
800082a2:	f0 1f 00 0c 	mcall	800082d0 <adc_process_init+0x44>

	// Configure ADCIFA core
	adcifa_configure(adcifa, &adc_config_t, EC_CPU_CLOCK_FREQ);
800082a6:	48 98       	lddpc	r8,800082c8 <adc_process_init+0x3c>
800082a8:	70 08       	ld.w	r8,r8[0x0]
800082aa:	e0 6a 12 00 	mov	r10,4608
800082ae:	ea 1a 00 7a 	orh	r10,0x7a
800082b2:	48 7b       	lddpc	r11,800082cc <adc_process_init+0x40>
800082b4:	10 9c       	mov	r12,r8
800082b6:	f0 1f 00 08 	mcall	800082d4 <adc_process_init+0x48>

}
800082ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800082be:	00 00       	add	r0,r0
800082c0:	80 01       	ld.sh	r1,r0[0x0]
800082c2:	24 24       	sub	r4,66
800082c4:	80 00       	ld.sh	r0,r0[0x0]
800082c6:	45 3c       	lddsp	r12,sp[0x14c]
800082c8:	00 00       	add	r0,r0
800082ca:	00 b0       	st.h	r0++,r0
800082cc:	00 00       	add	r0,r0
800082ce:	00 88       	andn	r8,r0
800082d0:	80 00       	ld.sh	r0,r0[0x0]
800082d2:	33 84       	mov	r4,56
800082d4:	80 00       	ld.sh	r0,r0[0x0]
800082d6:	34 18       	mov	r8,65

800082d8 <twi_init>:
 *
 *
 */
static void twi_init(void);
static void twi_init(void)
{
800082d8:	eb cd 40 80 	pushm	r7,lr
800082dc:	1a 97       	mov	r7,sp
800082de:	20 8d       	sub	sp,32
	const gpio_map_t PCA9952_TWI_GPIO_MAP = {
		{PCA9952_TWI_SCL_PIN, PCA9952_TWI_SCL_FUNCTION},
		{PCA9952_TWI_SDA_PIN, PCA9952_TWI_SDA_FUNCTION}
	};
800082e0:	49 a9       	lddpc	r9,80008348 <twi_init+0x70>
800082e2:	ee c8 00 10 	sub	r8,r7,16
800082e6:	20 08       	sub	r8,0
800082e8:	20 09       	sub	r9,0
800082ea:	72 0a       	ld.w	r10,r9[0x0]
800082ec:	91 0a       	st.w	r8[0x0],r10
800082ee:	72 1a       	ld.w	r10,r9[0x4]
800082f0:	91 1a       	st.w	r8[0x4],r10
800082f2:	72 2a       	ld.w	r10,r9[0x8]
800082f4:	91 2a       	st.w	r8[0x8],r10
800082f6:	72 39       	ld.w	r9,r9[0xc]
800082f8:	91 39       	st.w	r8[0xc],r9
	twi_options_t PCA9952_TWI_OPTIONS = { //7apr15 make this *not* a const so we can change it and rerun twi_master_init() if necessary
		.pba_hz = FPBA_HZ,
		.speed = PCA9952_TWI_MASTER_SPEED,
		.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS, //7apr15
		.smbus        = false,
	};
800082fa:	49 59       	lddpc	r9,8000834c <twi_init+0x74>
800082fc:	ee c8 00 20 	sub	r8,r7,32
80008300:	20 08       	sub	r8,0
80008302:	20 09       	sub	r9,0
80008304:	72 0a       	ld.w	r10,r9[0x0]
80008306:	91 0a       	st.w	r8[0x0],r10
80008308:	72 1a       	ld.w	r10,r9[0x4]
8000830a:	91 1a       	st.w	r8[0x4],r10
8000830c:	72 2a       	ld.w	r10,r9[0x8]
8000830e:	91 2a       	st.w	r8[0x8],r10
80008310:	72 39       	ld.w	r9,r9[0xc]
80008312:	91 39       	st.w	r8[0xc],r9

	// Assign I/Os to TWI.
	gpio_enable_module(PCA9952_TWI_GPIO_MAP,
80008314:	ee c8 00 10 	sub	r8,r7,16
80008318:	30 2b       	mov	r11,2
8000831a:	10 9c       	mov	r12,r8
8000831c:	f0 1f 00 0d 	mcall	80008350 <twi_init+0x78>
	sizeof(PCA9952_TWI_GPIO_MAP) / sizeof(PCA9952_TWI_GPIO_MAP[0]));
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
80008320:	ee c8 00 20 	sub	r8,r7,32
80008324:	10 9b       	mov	r11,r8
80008326:	fe 7c 38 00 	mov	r12,-51200
8000832a:	f0 1f 00 0b 	mcall	80008354 <twi_init+0x7c>
	
	
	PCA9952_TWI_OPTIONS.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
8000832e:	36 18       	mov	r8,97
80008330:	ef 48 ff e8 	st.w	r7[-24],r8
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
80008334:	ee c8 00 20 	sub	r8,r7,32
80008338:	10 9b       	mov	r11,r8
8000833a:	fe 7c 38 00 	mov	r12,-51200
8000833e:	f0 1f 00 06 	mcall	80008354 <twi_init+0x7c>
	
	
}
80008342:	2f 8d       	sub	sp,-32
80008344:	e3 cd 80 80 	ldm	sp++,r7,pc
80008348:	80 01       	ld.sh	r1,r0[0x0]
8000834a:	24 04       	sub	r4,64
8000834c:	80 01       	ld.sh	r1,r0[0x0]
8000834e:	24 14       	sub	r4,65
80008350:	80 00       	ld.sh	r0,r0[0x0]
80008352:	45 3c       	lddsp	r12,sp[0x14c]
80008354:	80 00       	ld.sh	r0,r0[0x0]
80008356:	50 00       	stdsp	sp[0x0],r0

80008358 <calc_sanitize_time>:



unsigned char calc_sanitize_time(unsigned char shelfIdx);
unsigned char calc_sanitize_time(unsigned char shelfIdx)
{
80008358:	eb cd 40 80 	pushm	r7,lr
8000835c:	1a 97       	mov	r7,sp
8000835e:	20 3d       	sub	sp,12
80008360:	18 98       	mov	r8,r12
80008362:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char uSideMinutes, lSideMinutes, minutes, boardIdx, sideIdx;
	
	boardIdx = shelf[shelfIdx].tLedIdx;							//top board in the shelf
80008366:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000836a:	4a da       	lddpc	r10,8000841c <calc_sanitize_time+0xc4>
8000836c:	12 98       	mov	r8,r9
8000836e:	a3 68       	lsl	r8,0x2
80008370:	12 08       	add	r8,r9
80008372:	f4 08 00 08 	add	r8,r10,r8
80008376:	2f f8       	sub	r8,-1
80008378:	11 88       	ld.ub	r8,r8[0x0]
8000837a:	ef 68 ff fe 	st.b	r7[-2],r8
	sideIdx = ledBrd[boardIdx].lSideIdx;						//lower side of the top board
8000837e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80008382:	4a 8a       	lddpc	r10,80008420 <calc_sanitize_time+0xc8>
80008384:	12 98       	mov	r8,r9
80008386:	a3 78       	lsl	r8,0x3
80008388:	12 18       	sub	r8,r9
8000838a:	a1 78       	lsl	r8,0x1
8000838c:	f4 08 00 08 	add	r8,r10,r8
80008390:	2f 58       	sub	r8,-11
80008392:	11 88       	ld.ub	r8,r8[0x0]
80008394:	ef 68 ff ff 	st.b	r7[-1],r8
	lSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
80008398:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000839c:	4a 2a       	lddpc	r10,80008424 <calc_sanitize_time+0xcc>
8000839e:	12 98       	mov	r8,r9
800083a0:	a3 68       	lsl	r8,0x2
800083a2:	12 08       	add	r8,r9
800083a4:	f4 08 00 08 	add	r8,r10,r8
800083a8:	11 88       	ld.ub	r8,r8[0x0]
800083aa:	ef 68 ff fc 	st.b	r7[-4],r8
	

	boardIdx = shelf[shelfIdx].bLedIdx;							//bottom board in the shelf					
800083ae:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800083b2:	49 ba       	lddpc	r10,8000841c <calc_sanitize_time+0xc4>
800083b4:	12 98       	mov	r8,r9
800083b6:	a3 68       	lsl	r8,0x2
800083b8:	12 08       	add	r8,r9
800083ba:	f4 08 00 08 	add	r8,r10,r8
800083be:	2f e8       	sub	r8,-2
800083c0:	11 88       	ld.ub	r8,r8[0x0]
800083c2:	ef 68 ff fe 	st.b	r7[-2],r8
	sideIdx = ledBrd[boardIdx].uSideIdx;						//upper side of the bottom board
800083c6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800083ca:	49 6a       	lddpc	r10,80008420 <calc_sanitize_time+0xc8>
800083cc:	12 98       	mov	r8,r9
800083ce:	a3 78       	lsl	r8,0x3
800083d0:	12 18       	sub	r8,r9
800083d2:	a1 78       	lsl	r8,0x1
800083d4:	f4 08 00 08 	add	r8,r10,r8
800083d8:	2f 68       	sub	r8,-10
800083da:	11 88       	ld.ub	r8,r8[0x0]
800083dc:	ef 68 ff ff 	st.b	r7[-1],r8
	uSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
800083e0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800083e4:	49 0a       	lddpc	r10,80008424 <calc_sanitize_time+0xcc>
800083e6:	12 98       	mov	r8,r9
800083e8:	a3 68       	lsl	r8,0x2
800083ea:	12 08       	add	r8,r9
800083ec:	f4 08 00 08 	add	r8,r10,r8
800083f0:	11 88       	ld.ub	r8,r8[0x0]
800083f2:	ef 68 ff fb 	st.b	r7[-5],r8

	minutes = (uSideMinutes >= lSideMinutes) ? uSideMinutes : lSideMinutes; //choose the sanitize time for the more worn-out leds
800083f6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800083fa:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800083fe:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80008402:	f0 0a 18 00 	cp.b	r10,r8
80008406:	f2 08 17 20 	movhs	r8,r9
8000840a:	ef 68 ff fd 	st.b	r7[-3],r8
	
	return (minutes);
8000840e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
	
}
80008412:	10 9c       	mov	r12,r8
80008414:	2f dd       	sub	sp,-12
80008416:	e3 cd 80 80 	ldm	sp++,r7,pc
8000841a:	00 00       	add	r0,r0
8000841c:	00 00       	add	r0,r0
8000841e:	0b 91       	ld.ub	r1,r5[0x1]
80008420:	00 00       	add	r0,r0
80008422:	0b 4a       	ld.w	r10,--r5
80008424:	00 00       	add	r0,r0
80008426:	0b fe       	ld.ub	lr,r5[0x7]

80008428 <door_latch_open_kill_all_shelves>:


void door_latch_open_kill_all_shelves(void);
void door_latch_open_kill_all_shelves(void)
{
80008428:	eb cd 40 80 	pushm	r7,lr
8000842c:	1a 97       	mov	r7,sp
	led_shelf(0, LED_OFF);
8000842e:	30 0b       	mov	r11,0
80008430:	30 0c       	mov	r12,0
80008432:	f0 1f 00 0a 	mcall	80008458 <door_latch_open_kill_all_shelves+0x30>
	led_shelf(1, LED_OFF);
80008436:	30 0b       	mov	r11,0
80008438:	30 1c       	mov	r12,1
8000843a:	f0 1f 00 08 	mcall	80008458 <door_latch_open_kill_all_shelves+0x30>
	led_shelf(2, LED_OFF);
8000843e:	30 0b       	mov	r11,0
80008440:	30 2c       	mov	r12,2
80008442:	f0 1f 00 06 	mcall	80008458 <door_latch_open_kill_all_shelves+0x30>
	led_shelf(3, LED_OFF);
80008446:	30 0b       	mov	r11,0
80008448:	30 3c       	mov	r12,3
8000844a:	f0 1f 00 04 	mcall	80008458 <door_latch_open_kill_all_shelves+0x30>
	
	print_ecdbg("Door latch opened, kill all shelves for safety.\r\n");
8000844e:	48 4c       	lddpc	r12,8000845c <door_latch_open_kill_all_shelves+0x34>
80008450:	f0 1f 00 04 	mcall	80008460 <door_latch_open_kill_all_shelves+0x38>
}
80008454:	e3 cd 80 80 	ldm	sp++,r7,pc
80008458:	80 00       	ld.sh	r0,r0[0x0]
8000845a:	63 50       	ld.w	r0,r1[0x54]
8000845c:	80 00       	ld.sh	r0,r0[0x0]
8000845e:	66 a8       	ld.w	r8,r3[0x28]
80008460:	80 00       	ld.sh	r0,r0[0x0]
80008462:	33 38       	mov	r8,51

80008464 <usage_idx>:

unsigned char usage_idx(unsigned char * idPtr, unsigned char top_botn);
unsigned char usage_idx(unsigned char * idPtr, unsigned char top_botn)

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED
{
80008464:	eb cd 40 80 	pushm	r7,lr
80008468:	1a 97       	mov	r7,sp
8000846a:	20 4d       	sub	sp,16
8000846c:	ef 4c ff f4 	st.w	r7[-12],r12
80008470:	16 98       	mov	r8,r11
80008472:	ef 68 ff f0 	st.b	r7[-16],r8
	unsigned char tmpBoardId[6];
	
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008476:	30 08       	mov	r8,0
80008478:	ef 68 ff ff 	st.b	r7[-1],r8
8000847c:	c8 c8       	rjmp	80008594 <usage_idx+0x130>
		} //if slotFilled (don't check against slots that haven't been assigned
	} //for each slot in usageShdw[sel]
	
#else

		if (sf[i].slotFilled)
8000847e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008482:	4c c8       	lddpc	r8,800085b0 <usage_idx+0x14c>
80008484:	a1 79       	lsl	r9,0x1
80008486:	2f f9       	sub	r9,-1
80008488:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000848c:	f1 d8 c1 a1 	bfextu	r8,r8,0xd,0x1
80008490:	5c 58       	castu.b	r8
80008492:	c7 c0       	breq	8000858a <usage_idx+0x126>
		{
			tmpBoardId[0] = *(idPtr+0);
80008494:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008498:	11 88       	ld.ub	r8,r8[0x0]
8000849a:	ef 68 ff f8 	st.b	r7[-8],r8
			tmpBoardId[1] = *(idPtr+1);
8000849e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084a2:	2f f8       	sub	r8,-1
800084a4:	11 88       	ld.ub	r8,r8[0x0]
800084a6:	ef 68 ff f9 	st.b	r7[-7],r8
			tmpBoardId[2] = *(idPtr+2);
800084aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084ae:	2f e8       	sub	r8,-2
800084b0:	11 88       	ld.ub	r8,r8[0x0]
800084b2:	ef 68 ff fa 	st.b	r7[-6],r8
			tmpBoardId[3] = *(idPtr+3);
800084b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084ba:	2f d8       	sub	r8,-3
800084bc:	11 88       	ld.ub	r8,r8[0x0]
800084be:	ef 68 ff fb 	st.b	r7[-5],r8
			tmpBoardId[4] = *(idPtr+4);
800084c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084c6:	2f c8       	sub	r8,-4
800084c8:	11 88       	ld.ub	r8,r8[0x0]
800084ca:	ef 68 ff fc 	st.b	r7[-4],r8
			tmpBoardId[5] = *(idPtr+5);
800084ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084d2:	2f b8       	sub	r8,-5
800084d4:	11 88       	ld.ub	r8,r8[0x0]
800084d6:	ef 68 ff fd 	st.b	r7[-3],r8
			
			
			if (tmpBoardId[0] == sf[i].id[0]) {
800084da:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800084de:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800084e2:	4b 48       	lddpc	r8,800085b0 <usage_idx+0x14c>
800084e4:	f0 0a 07 38 	ld.ub	r8,r8[r10<<0x3]
800084e8:	f0 09 18 00 	cp.b	r9,r8
800084ec:	c4 f1       	brne	8000858a <usage_idx+0x126>
				if (tmpBoardId[1] == sf[i].id[1]) {
800084ee:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800084f2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800084f6:	4a fa       	lddpc	r10,800085b0 <usage_idx+0x14c>
800084f8:	a3 78       	lsl	r8,0x3
800084fa:	f4 08 00 08 	add	r8,r10,r8
800084fe:	11 98       	ld.ub	r8,r8[0x1]
80008500:	f0 09 18 00 	cp.b	r9,r8
80008504:	c4 31       	brne	8000858a <usage_idx+0x126>
					if (tmpBoardId[2] == sf[i].id[2]) {
80008506:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000850a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000850e:	4a 98       	lddpc	r8,800085b0 <usage_idx+0x14c>
80008510:	a3 6a       	lsl	r10,0x2
80008512:	2f fa       	sub	r10,-1
80008514:	f0 0a 07 18 	ld.ub	r8,r8[r10<<0x1]
80008518:	f0 09 18 00 	cp.b	r9,r8
8000851c:	c3 71       	brne	8000858a <usage_idx+0x126>
						if (tmpBoardId[3] == sf[i].id[3]) {
8000851e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80008522:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008526:	4a 3a       	lddpc	r10,800085b0 <usage_idx+0x14c>
80008528:	a3 78       	lsl	r8,0x3
8000852a:	f4 08 00 08 	add	r8,r10,r8
8000852e:	11 b8       	ld.ub	r8,r8[0x3]
80008530:	f0 09 18 00 	cp.b	r9,r8
80008534:	c2 b1       	brne	8000858a <usage_idx+0x126>
							if (tmpBoardId[4] == sf[i].id[4]) {
80008536:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000853a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000853e:	49 d8       	lddpc	r8,800085b0 <usage_idx+0x14c>
80008540:	a1 7a       	lsl	r10,0x1
80008542:	2f fa       	sub	r10,-1
80008544:	f0 0a 07 28 	ld.ub	r8,r8[r10<<0x2]
80008548:	f0 09 18 00 	cp.b	r9,r8
8000854c:	c1 f1       	brne	8000858a <usage_idx+0x126>
								if (tmpBoardId[5] == sf[i].id[5]) {
8000854e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80008552:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008556:	49 7a       	lddpc	r10,800085b0 <usage_idx+0x14c>
80008558:	a3 78       	lsl	r8,0x3
8000855a:	f4 08 00 08 	add	r8,r10,r8
8000855e:	11 d8       	ld.ub	r8,r8[0x5]
80008560:	f0 09 18 00 	cp.b	r9,r8
80008564:	c1 31       	brne	8000858a <usage_idx+0x126>
									if (top_botn == sf[i].top_botn)
80008566:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000856a:	49 28       	lddpc	r8,800085b0 <usage_idx+0x14c>
8000856c:	a1 79       	lsl	r9,0x1
8000856e:	2f f9       	sub	r9,-1
80008570:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008574:	f1 d8 c1 e1 	bfextu	r8,r8,0xf,0x1
80008578:	5c 58       	castu.b	r8
8000857a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000857e:	f0 09 18 00 	cp.b	r9,r8
80008582:	c0 41       	brne	8000858a <usage_idx+0x126>
									{
										return (i); //found a match!
80008584:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008588:	c0 f8       	rjmp	800085a6 <usage_idx+0x142>

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED
{
	unsigned char tmpBoardId[6];
	
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
8000858a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000858e:	2f f8       	sub	r8,-1
80008590:	ef 68 ff ff 	st.b	r7[-1],r8
80008594:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008598:	35 f8       	mov	r8,95
8000859a:	f0 09 18 00 	cp.b	r9,r8
8000859e:	fe 98 ff 70 	brls	8000847e <usage_idx+0x1a>
		} //if slotFilled (don't check against slots that haven't been assigned
	} //for each slot in ush
	
#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED
	
	return NO_LED_BOARD_PRESENT; //no match found
800085a2:	e0 68 00 ff 	mov	r8,255
}
800085a6:	10 9c       	mov	r12,r8
800085a8:	2f cd       	sub	sp,-16
800085aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800085ae:	00 00       	add	r0,r0
800085b0:	00 00       	add	r0,r0
800085b2:	08 48       	or	r8,r4

800085b4 <load_usage_indeces>:
	}
}
#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED

void load_usage_indeces(void)
{
800085b4:	eb cd 40 c0 	pushm	r6-r7,lr
800085b8:	1a 97       	mov	r7,sp
800085ba:	20 2d       	sub	sp,8
	unsigned char top_botn, brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
800085bc:	30 08       	mov	r8,0
800085be:	ef 48 ff fc 	st.w	r7[-4],r8
800085c2:	c4 78       	rjmp	80008650 <load_usage_indeces+0x9c>
	{
		brdIdx = ledBrdSide[i].boardIdx;
800085c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800085c8:	4a 6a       	lddpc	r10,80008660 <load_usage_indeces+0xac>
800085ca:	12 98       	mov	r8,r9
800085cc:	a3 68       	lsl	r8,0x2
800085ce:	12 08       	add	r8,r9
800085d0:	f4 08 00 08 	add	r8,r10,r8
800085d4:	2f c8       	sub	r8,-4
800085d6:	11 88       	ld.ub	r8,r8[0x0]
800085d8:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[brdIdx].present)
800085dc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800085e0:	4a 1a       	lddpc	r10,80008664 <load_usage_indeces+0xb0>
800085e2:	12 98       	mov	r8,r9
800085e4:	a3 78       	lsl	r8,0x3
800085e6:	12 18       	sub	r8,r9
800085e8:	a1 78       	lsl	r8,0x1
800085ea:	f4 08 00 08 	add	r8,r10,r8
800085ee:	2f 88       	sub	r8,-8
800085f0:	11 88       	ld.ub	r8,r8[0x0]
800085f2:	58 08       	cp.w	r8,0
800085f4:	c2 30       	breq	8000863a <load_usage_indeces+0x86>
		{
			top_botn = i%2;
800085f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800085fa:	f2 08 14 1f 	asr	r8,r9,0x1f
800085fe:	bf 98       	lsr	r8,0x1f
80008600:	10 09       	add	r9,r8
80008602:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80008606:	f2 08 01 08 	sub	r8,r9,r8
8000860a:	ef 68 ff fa 	st.b	r7[-6],r8
			
			usageIdx[i] = usage_idx(&ledBrd[brdIdx].id[0], top_botn); //TODO: should change this nomenclature to upper/lower, we are talking about board sides here, not which board in the shelf, be consistent
8000860e:	ee f6 ff fc 	ld.w	r6,r7[-4]
80008612:	ef 3a ff fa 	ld.ub	r10,r7[-6]
80008616:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000861a:	12 98       	mov	r8,r9
8000861c:	a3 78       	lsl	r8,0x3
8000861e:	12 18       	sub	r8,r9
80008620:	a1 78       	lsl	r8,0x1
80008622:	49 19       	lddpc	r9,80008664 <load_usage_indeces+0xb0>
80008624:	12 08       	add	r8,r9
80008626:	2f f8       	sub	r8,-1
80008628:	14 9b       	mov	r11,r10
8000862a:	10 9c       	mov	r12,r8
8000862c:	f0 1f 00 0f 	mcall	80008668 <load_usage_indeces+0xb4>
80008630:	18 98       	mov	r8,r12
80008632:	48 f9       	lddpc	r9,8000866c <load_usage_indeces+0xb8>
80008634:	f2 06 0b 08 	st.b	r9[r6],r8
80008638:	c0 78       	rjmp	80008646 <load_usage_indeces+0x92>
		}
		else
		{
			usageIdx[i] = NO_LED_BOARD_PRESENT;
8000863a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000863e:	48 ca       	lddpc	r10,8000866c <load_usage_indeces+0xb8>
80008640:	3f f8       	mov	r8,-1
80008642:	f4 09 0b 08 	st.b	r10[r9],r8

void load_usage_indeces(void)
{
	unsigned char top_botn, brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80008646:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000864a:	2f f8       	sub	r8,-1
8000864c:	ef 48 ff fc 	st.w	r7[-4],r8
80008650:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008654:	58 78       	cp.w	r8,7
80008656:	fe 9a ff b7 	brle	800085c4 <load_usage_indeces+0x10>
		else
		{
			usageIdx[i] = NO_LED_BOARD_PRESENT;
		}
	}
}
8000865a:	2f ed       	sub	sp,-8
8000865c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008660:	00 00       	add	r0,r0
80008662:	0b fe       	ld.ub	lr,r5[0x7]
80008664:	00 00       	add	r0,r0
80008666:	0b 4a       	ld.w	r10,--r5
80008668:	80 00       	ld.sh	r0,r0[0x0]
8000866a:	84 64       	ld.sh	r4,r2[0xc]
8000866c:	00 00       	add	r0,r0
8000866e:	0b c0       	ld.ub	r0,r5[0x4]

80008670 <test_flash>:
	return SUCCESS;
}

#else
unsigned char test_flash(unsigned char sel)
{
80008670:	eb cd 40 80 	pushm	r7,lr
80008674:	1a 97       	mov	r7,sp
80008676:	20 8d       	sub	sp,32
80008678:	18 98       	mov	r8,r12
8000867a:	ef 68 ff e0 	st.b	r7[-32],r8
	volatile void* memPtr;
	unsigned char pattern[4] = {0x00, 0xAA, 0x55, 0xFF}, ubyte; //NOTE test 0xFF pattern last to essentially erase the flash
8000867e:	4c 08       	lddpc	r8,8000877c <test_flash+0x10c>
80008680:	70 08       	ld.w	r8,r8[0x0]
80008682:	ef 48 ff e4 	st.w	r7[-28],r8
	unsigned char *ubPtr;
	unsigned long memSize;
	
	switch(sel)
80008686:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000868a:	58 18       	cp.w	r8,1
8000868c:	c1 30       	breq	800086b2 <test_flash+0x42>
8000868e:	e0 89 00 05 	brgt	80008698 <test_flash+0x28>
80008692:	58 08       	cp.w	r8,0
80008694:	c0 70       	breq	800086a2 <test_flash+0x32>
80008696:	c2 58       	rjmp	800086e0 <test_flash+0x70>
80008698:	58 28       	cp.w	r8,2
8000869a:	c1 40       	breq	800086c2 <test_flash+0x52>
8000869c:	58 38       	cp.w	r8,3
8000869e:	c1 a0       	breq	800086d2 <test_flash+0x62>
800086a0:	c2 08       	rjmp	800086e0 <test_flash+0x70>
	{
		case 0:
			memPtr = &serialIdAndFlagsFlash;
800086a2:	4b 88       	lddpc	r8,80008780 <test_flash+0x110>
800086a4:	ef 48 ff e8 	st.w	r7[-24],r8
			memSize = NUM_SERIAL_ID_BUFS_SECTORS * 128;
800086a8:	e0 68 06 00 	mov	r8,1536
800086ac:	ef 48 ff f4 	st.w	r7[-12],r8
			break;
800086b0:	c1 88       	rjmp	800086e0 <test_flash+0x70>
		case 1:
			memPtr = &sanitationCyclesFlash;
800086b2:	4b 58       	lddpc	r8,80008784 <test_flash+0x114>
800086b4:	ef 48 ff e8 	st.w	r7[-24],r8
			memSize = NUM_SAN_CYCLE_BUFS_SECTORS * 128;
800086b8:	e0 68 03 00 	mov	r8,768
800086bc:	ef 48 ff f4 	st.w	r7[-12],r8
			break;
800086c0:	c1 08       	rjmp	800086e0 <test_flash+0x70>
		case 2:
			memPtr = &usageHoursFlash;
800086c2:	4b 28       	lddpc	r8,80008788 <test_flash+0x118>
800086c4:	ef 48 ff e8 	st.w	r7[-24],r8
			memSize = NUM_USAGE_HOURS_BUFS_SECTORS * 128;
800086c8:	e0 68 02 00 	mov	r8,512
800086cc:	ef 48 ff f4 	st.w	r7[-12],r8
			break;
800086d0:	c0 88       	rjmp	800086e0 <test_flash+0x70>
		case 3:
			memPtr = &usageMinutesFlash;
800086d2:	4a f8       	lddpc	r8,8000878c <test_flash+0x11c>
800086d4:	ef 48 ff e8 	st.w	r7[-24],r8
			memSize = NUM_USAGE_MINS_BUFS_SECTORS * 128;
800086d8:	e0 68 3a 00 	mov	r8,14848
800086dc:	ef 48 ff f4 	st.w	r7[-12],r8
			break;
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
800086e0:	30 08       	mov	r8,0
800086e2:	ef 68 ff fb 	st.b	r7[-5],r8
800086e6:	c3 e8       	rjmp	80008762 <test_flash+0xf2>
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
800086e8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800086ec:	ee 08 00 08 	add	r8,r7,r8
800086f0:	f1 38 ff e4 	ld.ub	r8,r8[-28]
800086f4:	30 19       	mov	r9,1
800086f6:	ee fa ff f4 	ld.w	r10,r7[-12]
800086fa:	10 9b       	mov	r11,r8
800086fc:	ee fc ff e8 	ld.w	r12,r7[-24]
80008700:	f0 1f 00 24 	mcall	80008790 <test_flash+0x120>
		
		ubPtr = (unsigned char*) memPtr;
80008704:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008708:	ef 48 ff f0 	st.w	r7[-16],r8
		for (unsigned long j=0; j<memSize; j++)
8000870c:	30 08       	mov	r8,0
8000870e:	ef 48 ff fc 	st.w	r7[-4],r8
80008712:	c1 d8       	rjmp	8000874c <test_flash+0xdc>
		{
			ubyte = (*ubPtr);
80008714:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008718:	11 88       	ld.ub	r8,r8[0x0]
8000871a:	ef 68 ff ef 	st.b	r7[-17],r8
			if (ubyte != pattern[i])
8000871e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008722:	ee 08 00 08 	add	r8,r7,r8
80008726:	f1 38 ff e4 	ld.ub	r8,r8[-28]
8000872a:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000872e:	f0 09 18 00 	cp.b	r9,r8
80008732:	c0 30       	breq	80008738 <test_flash+0xc8>
			{
				return ERROR;
80008734:	30 18       	mov	r8,1
80008736:	c1 e8       	rjmp	80008772 <test_flash+0x102>
			}
			ubPtr++;
80008738:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000873c:	2f f8       	sub	r8,-1
8000873e:	ef 48 ff f0 	st.w	r7[-16],r8
	for (unsigned char i=0; i<4; i++) //4 patterns to test
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
		
		ubPtr = (unsigned char*) memPtr;
		for (unsigned long j=0; j<memSize; j++)
80008742:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008746:	2f f8       	sub	r8,-1
80008748:	ef 48 ff fc 	st.w	r7[-4],r8
8000874c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008750:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008754:	10 39       	cp.w	r9,r8
80008756:	cd f3       	brcs	80008714 <test_flash+0xa4>
			memPtr = &usageMinutesFlash;
			memSize = NUM_USAGE_MINS_BUFS_SECTORS * 128;
			break;
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
80008758:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000875c:	2f f8       	sub	r8,-1
8000875e:	ef 68 ff fb 	st.b	r7[-5],r8
80008762:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80008766:	30 38       	mov	r8,3
80008768:	f0 09 18 00 	cp.b	r9,r8
8000876c:	fe 98 ff be 	brls	800086e8 <test_flash+0x78>
			}
			ubPtr++;
		}
	}
	
	return SUCCESS;
80008770:	30 08       	mov	r8,0
}
80008772:	10 9c       	mov	r12,r8
80008774:	2f 8d       	sub	sp,-32
80008776:	e3 cd 80 80 	ldm	sp++,r7,pc
8000877a:	00 00       	add	r0,r0
8000877c:	80 01       	ld.sh	r1,r0[0x0]
8000877e:	24 00       	sub	r0,64
80008780:	80 07       	ld.sh	r7,r0[0x0]
80008782:	fa 00       	*unknown*
80008784:	80 07       	ld.sh	r7,r0[0x0]
80008786:	f7 00 80 07 	ld.sh	r0,r11[-32761]
8000878a:	f5 00 80 07 	ld.sh	r0,r10[-32761]
8000878e:	bb 00       	ld.d	r0,sp
80008790:	80 00       	ld.sh	r0,r0[0x0]
80008792:	3e 64       	mov	r4,-26

80008794 <calc_region_checksum>:

#ifndef SERIAL_ID_AND_ALL_USAGE_COMBINED

unsigned char calc_region_checksum(unsigned char sel);
unsigned char calc_region_checksum(unsigned char sel)
{
80008794:	eb cd 40 80 	pushm	r7,lr
80008798:	1a 97       	mov	r7,sp
8000879a:	20 5d       	sub	sp,20
8000879c:	18 98       	mov	r8,r12
8000879e:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char csum = 0;
800087a2:	30 08       	mov	r8,0
800087a4:	ef 68 ff f3 	st.b	r7[-13],r8

	switch(sel)
800087a8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800087ac:	58 28       	cp.w	r8,2
800087ae:	e0 80 00 ae 	breq	8000890a <calc_region_checksum+0x176>
800087b2:	e0 89 00 08 	brgt	800087c2 <calc_region_checksum+0x2e>
800087b6:	58 08       	cp.w	r8,0
800087b8:	c0 c0       	breq	800087d0 <calc_region_checksum+0x3c>
800087ba:	58 18       	cp.w	r8,1
800087bc:	e0 80 00 9e 	breq	800088f8 <calc_region_checksum+0x164>
800087c0:	c0 59       	rjmp	800089ca <calc_region_checksum+0x236>
800087c2:	58 38       	cp.w	r8,3
800087c4:	e0 80 00 c7 	breq	80008952 <calc_region_checksum+0x1be>
800087c8:	58 48       	cp.w	r8,4
800087ca:	e0 80 00 f0 	breq	800089aa <calc_region_checksum+0x216>
800087ce:	cf e8       	rjmp	800089ca <calc_region_checksum+0x236>
	{
		case 0: //serial ID and flags
			csum = 0;
800087d0:	30 08       	mov	r8,0
800087d2:	ef 68 ff f3 	st.b	r7[-13],r8
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800087d6:	30 08       	mov	r8,0
800087d8:	ef 48 ff f4 	st.w	r7[-12],r8
800087dc:	c8 28       	rjmp	800088e0 <calc_region_checksum+0x14c>
			{
				csum += sf[i].id[0];
800087de:	ee f9 ff f4 	ld.w	r9,r7[-12]
800087e2:	4f e8       	lddpc	r8,800089d8 <calc_region_checksum+0x244>
800087e4:	f0 09 07 38 	ld.ub	r8,r8[r9<<0x3]
800087e8:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800087ec:	f2 08 00 08 	add	r8,r9,r8
800087f0:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].id[1];
800087f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800087f8:	4f 89       	lddpc	r9,800089d8 <calc_region_checksum+0x244>
800087fa:	a3 78       	lsl	r8,0x3
800087fc:	f2 08 00 08 	add	r8,r9,r8
80008800:	11 98       	ld.ub	r8,r8[0x1]
80008802:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80008806:	f2 08 00 08 	add	r8,r9,r8
8000880a:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].id[2];
8000880e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008812:	4f 28       	lddpc	r8,800089d8 <calc_region_checksum+0x244>
80008814:	a3 69       	lsl	r9,0x2
80008816:	2f f9       	sub	r9,-1
80008818:	f0 09 07 18 	ld.ub	r8,r8[r9<<0x1]
8000881c:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80008820:	f2 08 00 08 	add	r8,r9,r8
80008824:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].id[3];
80008828:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000882c:	4e b9       	lddpc	r9,800089d8 <calc_region_checksum+0x244>
8000882e:	a3 78       	lsl	r8,0x3
80008830:	f2 08 00 08 	add	r8,r9,r8
80008834:	11 b8       	ld.ub	r8,r8[0x3]
80008836:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8000883a:	f2 08 00 08 	add	r8,r9,r8
8000883e:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].id[4];
80008842:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008846:	4e 58       	lddpc	r8,800089d8 <calc_region_checksum+0x244>
80008848:	a1 79       	lsl	r9,0x1
8000884a:	2f f9       	sub	r9,-1
8000884c:	f0 09 07 28 	ld.ub	r8,r8[r9<<0x2]
80008850:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80008854:	f2 08 00 08 	add	r8,r9,r8
80008858:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].id[5];
8000885c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008860:	4d e9       	lddpc	r9,800089d8 <calc_region_checksum+0x244>
80008862:	a3 78       	lsl	r8,0x3
80008864:	f2 08 00 08 	add	r8,r9,r8
80008868:	11 d8       	ld.ub	r8,r8[0x5]
8000886a:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8000886e:	f2 08 00 08 	add	r8,r9,r8
80008872:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].maxUsageReached;
80008876:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000887a:	4d 88       	lddpc	r8,800089d8 <calc_region_checksum+0x244>
8000887c:	a1 79       	lsl	r9,0x1
8000887e:	2f f9       	sub	r9,-1
80008880:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008884:	f1 d8 c1 c1 	bfextu	r8,r8,0xe,0x1
80008888:	5c 58       	castu.b	r8
8000888a:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8000888e:	f2 08 00 08 	add	r8,r9,r8
80008892:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].slotFilled;
80008896:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000889a:	4d 08       	lddpc	r8,800089d8 <calc_region_checksum+0x244>
8000889c:	a1 79       	lsl	r9,0x1
8000889e:	2f f9       	sub	r9,-1
800088a0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800088a4:	f1 d8 c1 a1 	bfextu	r8,r8,0xd,0x1
800088a8:	5c 58       	castu.b	r8
800088aa:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800088ae:	f2 08 00 08 	add	r8,r9,r8
800088b2:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].top_botn;
800088b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800088ba:	4c 88       	lddpc	r8,800089d8 <calc_region_checksum+0x244>
800088bc:	a1 79       	lsl	r9,0x1
800088be:	2f f9       	sub	r9,-1
800088c0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800088c4:	f1 d8 c1 e1 	bfextu	r8,r8,0xf,0x1
800088c8:	5c 58       	castu.b	r8
800088ca:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800088ce:	f2 08 00 08 	add	r8,r9,r8
800088d2:	ef 68 ff f3 	st.b	r7[-13],r8

	switch(sel)
	{
		case 0: //serial ID and flags
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800088d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800088da:	2f f8       	sub	r8,-1
800088dc:	ef 48 ff f4 	st.w	r7[-12],r8
800088e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800088e4:	e0 48 00 5f 	cp.w	r8,95
800088e8:	fe 9a ff 7b 	brle	800087de <calc_region_checksum+0x4a>
				csum += sf[i].id[5];
				csum += sf[i].maxUsageReached;
				csum += sf[i].slotFilled;
				csum += sf[i].top_botn;
			}
			csum = ((csum ^ 0xFF) & 0xFF);
800088ec:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800088f0:	5c d8       	com	r8
800088f2:	ef 68 ff f3 	st.b	r7[-13],r8
			break;
800088f6:	c6 a8       	rjmp	800089ca <calc_region_checksum+0x236>

		case 1: //san cycles
			csum = ((sanc.cycles ^ 0xFF) & 0xFF);
800088f8:	4b 98       	lddpc	r8,800089dc <calc_region_checksum+0x248>
800088fa:	70 08       	ld.w	r8,r8[0x0]
800088fc:	f1 d8 c1 94 	bfextu	r8,r8,0xc,0x14
80008900:	5c 58       	castu.b	r8
80008902:	5c d8       	com	r8
80008904:	ef 68 ff f3 	st.b	r7[-13],r8
			break;
80008908:	c6 18       	rjmp	800089ca <calc_region_checksum+0x236>

		case 2: //usage hours
			csum = 0;
8000890a:	30 08       	mov	r8,0
8000890c:	ef 68 ff f3 	st.b	r7[-13],r8
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008910:	30 08       	mov	r8,0
80008912:	ef 48 ff f8 	st.w	r7[-8],r8
80008916:	c1 28       	rjmp	8000893a <calc_region_checksum+0x1a6>
			{
				csum += h.hrs[i];
80008918:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000891c:	4b 18       	lddpc	r8,800089e0 <calc_region_checksum+0x24c>
8000891e:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80008922:	5c 58       	castu.b	r8
80008924:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80008928:	f2 08 00 08 	add	r8,r9,r8
8000892c:	ef 68 ff f3 	st.b	r7[-13],r8
			csum = ((sanc.cycles ^ 0xFF) & 0xFF);
			break;

		case 2: //usage hours
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008930:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008934:	2f f8       	sub	r8,-1
80008936:	ef 48 ff f8 	st.w	r7[-8],r8
8000893a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000893e:	e0 48 00 5f 	cp.w	r8,95
80008942:	fe 9a ff eb 	brle	80008918 <calc_region_checksum+0x184>
			{
				csum += h.hrs[i];
			}
			csum = ((csum ^ 0xFF) & 0xFF);
80008946:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000894a:	5c d8       	com	r8
8000894c:	ef 68 ff f3 	st.b	r7[-13],r8
			break;
80008950:	c3 d8       	rjmp	800089ca <calc_region_checksum+0x236>

		case 3: //usage mins
			csum = 0;
80008952:	30 08       	mov	r8,0
80008954:	ef 68 ff f3 	st.b	r7[-13],r8
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008958:	30 08       	mov	r8,0
8000895a:	ef 48 ff fc 	st.w	r7[-4],r8
8000895e:	c1 18       	rjmp	80008980 <calc_region_checksum+0x1ec>
			{
				csum += m.mins[i];
80008960:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008964:	4a 09       	lddpc	r9,800089e4 <calc_region_checksum+0x250>
80008966:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000896a:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8000896e:	f2 08 00 08 	add	r8,r9,r8
80008972:	ef 68 ff f3 	st.b	r7[-13],r8
			csum = ((csum ^ 0xFF) & 0xFF);
			break;

		case 3: //usage mins
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008976:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000897a:	2f f8       	sub	r8,-1
8000897c:	ef 48 ff fc 	st.w	r7[-4],r8
80008980:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008984:	e0 48 00 5f 	cp.w	r8,95
80008988:	fe 9a ff ec 	brle	80008960 <calc_region_checksum+0x1cc>
			{
				csum += m.mins[i];
			}
			csum += m.sanMins;
8000898c:	49 68       	lddpc	r8,800089e4 <calc_region_checksum+0x250>
8000898e:	71 88       	ld.w	r8,r8[0x60]
80008990:	5c 58       	castu.b	r8
80008992:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80008996:	f2 08 00 08 	add	r8,r9,r8
8000899a:	ef 68 ff f3 	st.b	r7[-13],r8
			csum = ((csum ^ 0xFF) & 0xFF);
8000899e:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800089a2:	5c d8       	com	r8
800089a4:	ef 68 ff f3 	st.b	r7[-13],r8
			break;
800089a8:	c1 18       	rjmp	800089ca <calc_region_checksum+0x236>
		case 4: //configuration
			csum = 0;
800089aa:	30 08       	mov	r8,0
800089ac:	ef 68 ff f3 	st.b	r7[-13],r8
			csum += c.initialDTE;
800089b0:	48 e8       	lddpc	r8,800089e8 <calc_region_checksum+0x254>
800089b2:	11 88       	ld.ub	r8,r8[0x0]
800089b4:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800089b8:	f2 08 00 08 	add	r8,r9,r8
800089bc:	ef 68 ff f3 	st.b	r7[-13],r8
			csum = ((csum ^ 0xFF) & 0xFF);
800089c0:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800089c4:	5c d8       	com	r8
800089c6:	ef 68 ff f3 	st.b	r7[-13],r8
			break;
	}
	
	return csum;	
800089ca:	ef 38 ff f3 	ld.ub	r8,r7[-13]
}
800089ce:	10 9c       	mov	r12,r8
800089d0:	2f bd       	sub	sp,-20
800089d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800089d6:	00 00       	add	r0,r0
800089d8:	00 00       	add	r0,r0
800089da:	08 48       	or	r8,r4
800089dc:	00 00       	add	r0,r0
800089de:	0c 28       	rsub	r8,r6
800089e0:	00 00       	add	r0,r0
800089e2:	0c 2c       	rsub	r12,r6
800089e4:	00 00       	add	r0,r0
800089e6:	0d 08       	ld.w	r8,r6++
800089e8:	00 00       	add	r0,r0
800089ea:	0b fc       	ld.ub	r12,r5[0x7]

800089ec <eval_region>:

unsigned char eval_region(unsigned char sel);
unsigned char eval_region(unsigned char sel)
{
800089ec:	eb cd 40 80 	pushm	r7,lr
800089f0:	1a 97       	mov	r7,sp
800089f2:	fa cd 04 80 	sub	sp,sp,1152
800089f6:	18 98       	mov	r8,r12
800089f8:	ef 68 fb 80 	st.b	r7[-1152],r8
	CONFIGURATION					tmpC;
	
	unsigned char					csum;
	long							flashOffset;
	long							tmpFlashOffset;
	unsigned char					retVal = 0; //NOT GOOD
800089fc:	30 08       	mov	r8,0
800089fe:	ef 68 ff c7 	st.b	r7[-57],r8
	

	unsigned long tmpHours, uHours, tmpMinutes, uMinutes, tmpSlotsFilled, uSlotsFilled;
	
	print_ecdbg("eval_region() ");
80008a02:	fe fc 06 06 	ld.w	r12,pc[1542]
80008a06:	f0 1f 01 82 	mcall	8000900c <eval_region+0x620>
	
	switch (sel)
80008a0a:	ef 38 fb 80 	ld.ub	r8,r7[-1152]
80008a0e:	58 28       	cp.w	r8,2
80008a10:	e0 80 01 47 	breq	80008c9e <eval_region+0x2b2>
80008a14:	e0 89 00 09 	brgt	80008a26 <eval_region+0x3a>
80008a18:	58 08       	cp.w	r8,0
80008a1a:	c0 e0       	breq	80008a36 <eval_region+0x4a>
80008a1c:	58 18       	cp.w	r8,1
80008a1e:	e0 80 00 c1 	breq	80008ba0 <eval_region+0x1b4>
80008a22:	e0 8f 02 ec 	bral	80008ffa <eval_region+0x60e>
80008a26:	58 38       	cp.w	r8,3
80008a28:	e0 80 01 e5 	breq	80008df2 <eval_region+0x406>
80008a2c:	58 48       	cp.w	r8,4
80008a2e:	e0 80 02 7d 	breq	80008f28 <eval_region+0x53c>
80008a32:	e0 8f 02 e4 	bral	80008ffa <eval_region+0x60e>
	{
		case 0: //serial ID and flags
			
			print_ecdbg("region 0 - serial ID and flags\r\n");
80008a36:	fe fc 05 da 	ld.w	r12,pc[1498]
80008a3a:	f0 1f 01 75 	mcall	8000900c <eval_region+0x620>
			
			memset(&tmpSf, 0x00, sizeof(sf));
80008a3e:	ee c8 03 48 	sub	r8,r7,840
80008a42:	e0 6a 03 00 	mov	r10,768
80008a46:	30 0b       	mov	r11,0
80008a48:	10 9c       	mov	r12,r8
80008a4a:	f0 1f 01 73 	mcall	80009014 <eval_region+0x628>
			
			for (unsigned int i=0; i<(NUM_SERIAL_ID_BUFS_SECTORS / NUM_SERIAL_ID_SECTORS_PER_BUF); i++)
80008a4e:	30 08       	mov	r8,0
80008a50:	ef 48 ff e0 	st.w	r7[-32],r8
80008a54:	c8 f8       	rjmp	80008b72 <eval_region+0x186>
			{
				flashOffset =  (i* 128 * NUM_SERIAL_ID_SECTORS_PER_BUF);
80008a56:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008a5a:	12 98       	mov	r8,r9
80008a5c:	a1 78       	lsl	r8,0x1
80008a5e:	12 08       	add	r8,r9
80008a60:	a9 68       	lsl	r8,0x8
80008a62:	ef 48 ff bc 	st.w	r7[-68],r8
				tmpFlashOffset = flashOffset + (unsigned long)serialIdAndFlagsFlash;
80008a66:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008a6a:	fe f8 05 ae 	ld.w	r8,pc[1454]
80008a6e:	f2 08 00 08 	add	r8,r9,r8
80008a72:	ef 48 ff c0 	st.w	r7[-64],r8
				memcpy(&sf, (const void*) tmpFlashOffset, sizeof(sf));
80008a76:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008a7a:	e0 6a 03 00 	mov	r10,768
80008a7e:	10 9b       	mov	r11,r8
80008a80:	fe fc 05 9c 	ld.w	r12,pc[1436]
80008a84:	f0 1f 01 67 	mcall	80009020 <eval_region+0x634>
				
				csum = calc_region_checksum(0);
80008a88:	30 0c       	mov	r12,0
80008a8a:	f0 1f 01 67 	mcall	80009024 <eval_region+0x638>
80008a8e:	18 98       	mov	r8,r12
80008a90:	ef 68 ff bb 	st.b	r7[-69],r8

				if (csum == sf[0].csum) //checksum is good
80008a94:	fe f8 05 88 	ld.w	r8,pc[1416]
80008a98:	11 f8       	ld.ub	r8,r8[0x7]
80008a9a:	ef 39 ff bb 	ld.ub	r9,r7[-69]
80008a9e:	f0 09 18 00 	cp.b	r9,r8
80008aa2:	c6 31       	brne	80008b68 <eval_region+0x17c>
				{
					print_ecdbg("good csum\r\n");
80008aa4:	fe fc 05 84 	ld.w	r12,pc[1412]
80008aa8:	f0 1f 01 59 	mcall	8000900c <eval_region+0x620>
					
					retVal = 1; //we have at least one good copy
80008aac:	30 18       	mov	r8,1
80008aae:	ef 68 ff c7 	st.b	r7[-57],r8

					tmpSlotsFilled = 0;
80008ab2:	30 08       	mov	r8,0
80008ab4:	ef 48 ff d8 	st.w	r7[-40],r8
					uSlotsFilled = 0;
80008ab8:	30 08       	mov	r8,0
80008aba:	ef 48 ff dc 	st.w	r7[-36],r8
				
					for (int j=0; j<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); j++)
80008abe:	30 08       	mov	r8,0
80008ac0:	ef 48 ff e4 	st.w	r7[-28],r8
80008ac4:	c2 98       	rjmp	80008b16 <eval_region+0x12a>
					{
						tmpSlotsFilled += tmpSf[j].slotFilled;
80008ac6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008aca:	a1 78       	lsl	r8,0x1
80008acc:	2f f8       	sub	r8,-1
80008ace:	a3 68       	lsl	r8,0x2
80008ad0:	ee 08 00 08 	add	r8,r7,r8
80008ad4:	f0 f8 fc b8 	ld.w	r8,r8[-840]
80008ad8:	f1 d8 c1 a1 	bfextu	r8,r8,0xd,0x1
80008adc:	5c 58       	castu.b	r8
80008ade:	ee f9 ff d8 	ld.w	r9,r7[-40]
80008ae2:	f2 08 00 08 	add	r8,r9,r8
80008ae6:	ef 48 ff d8 	st.w	r7[-40],r8
						uSlotsFilled += sf[j].slotFilled;
80008aea:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008aee:	fe f8 05 2e 	ld.w	r8,pc[1326]
80008af2:	a1 79       	lsl	r9,0x1
80008af4:	2f f9       	sub	r9,-1
80008af6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008afa:	f1 d8 c1 a1 	bfextu	r8,r8,0xd,0x1
80008afe:	5c 58       	castu.b	r8
80008b00:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008b04:	f2 08 00 08 	add	r8,r9,r8
80008b08:	ef 48 ff dc 	st.w	r7[-36],r8
					retVal = 1; //we have at least one good copy

					tmpSlotsFilled = 0;
					uSlotsFilled = 0;
				
					for (int j=0; j<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); j++)
80008b0c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008b10:	2f f8       	sub	r8,-1
80008b12:	ef 48 ff e4 	st.w	r7[-28],r8
80008b16:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008b1a:	e0 48 00 5f 	cp.w	r8,95
80008b1e:	fe 9a ff d4 	brle	80008ac6 <eval_region+0xda>
					{
						tmpSlotsFilled += tmpSf[j].slotFilled;
						uSlotsFilled += sf[j].slotFilled;
					}
				
					if (uSlotsFilled > tmpSlotsFilled)
80008b22:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008b26:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008b2a:	10 39       	cp.w	r9,r8
80008b2c:	e0 88 00 1e 	brls	80008b68 <eval_region+0x17c>
					{
						memcpy(&tmpSf, &sf, sizeof(sf));
80008b30:	ee c8 03 48 	sub	r8,r7,840
80008b34:	e0 6a 03 00 	mov	r10,768
80008b38:	fe fb 04 e4 	ld.w	r11,pc[1252]
80008b3c:	10 9c       	mov	r12,r8
80008b3e:	f0 1f 01 39 	mcall	80009020 <eval_region+0x634>
						sfFlashIdx = i; //this is the new best copy
80008b42:	fe f8 04 ea 	ld.w	r8,pc[1258]
80008b46:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008b4a:	91 09       	st.w	r8[0x0],r9
						
						print_ecdbg("sfFlashIdx ");
80008b4c:	fe fc 04 e4 	ld.w	r12,pc[1252]
80008b50:	f0 1f 01 2f 	mcall	8000900c <eval_region+0x620>
						print_ecdbg_num(sfFlashIdx);
80008b54:	fe f8 04 d8 	ld.w	r8,pc[1240]
80008b58:	70 08       	ld.w	r8,r8[0x0]
80008b5a:	10 9c       	mov	r12,r8
80008b5c:	f0 1f 01 36 	mcall	80009034 <eval_region+0x648>
						print_ecdbg("\r\n");
80008b60:	fe fc 04 d8 	ld.w	r12,pc[1240]
80008b64:	f0 1f 01 2a 	mcall	8000900c <eval_region+0x620>
			
			print_ecdbg("region 0 - serial ID and flags\r\n");
			
			memset(&tmpSf, 0x00, sizeof(sf));
			
			for (unsigned int i=0; i<(NUM_SERIAL_ID_BUFS_SECTORS / NUM_SERIAL_ID_SECTORS_PER_BUF); i++)
80008b68:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008b6c:	2f f8       	sub	r8,-1
80008b6e:	ef 48 ff e0 	st.w	r7[-32],r8
80008b72:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008b76:	58 18       	cp.w	r8,1
80008b78:	fe 98 ff 6f 	brls	80008a56 <eval_region+0x6a>
					}

				}
			}
			
			if (retVal == 1)
80008b7c:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80008b80:	30 18       	mov	r8,1
80008b82:	f0 09 18 00 	cp.b	r9,r8
80008b86:	e0 81 02 33 	brne	80008fec <eval_region+0x600>
			{
				memcpy(&sf, &tmpSf, sizeof(sf));
80008b8a:	ee c8 03 48 	sub	r8,r7,840
80008b8e:	e0 6a 03 00 	mov	r10,768
80008b92:	10 9b       	mov	r11,r8
80008b94:	fe fc 04 88 	ld.w	r12,pc[1160]
80008b98:	f0 1f 01 22 	mcall	80009020 <eval_region+0x634>
			}
			break;
80008b9c:	e0 8f 02 2f 	bral	80008ffa <eval_region+0x60e>

		case 1: //san cycles
			memset(&tmpSanc, 0x00, sizeof(sanc));
80008ba0:	ee c8 03 4c 	sub	r8,r7,844
80008ba4:	30 4a       	mov	r10,4
80008ba6:	30 0b       	mov	r11,0
80008ba8:	10 9c       	mov	r12,r8
80008baa:	f0 1f 01 1b 	mcall	80009014 <eval_region+0x628>

			print_ecdbg("region 1 - sanitation cycles\r\n");
80008bae:	fe fc 04 8e 	ld.w	r12,pc[1166]
80008bb2:	f0 1f 01 17 	mcall	8000900c <eval_region+0x620>

			for (unsigned int i=0; i<(NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS); i++)
80008bb6:	30 08       	mov	r8,0
80008bb8:	ef 48 ff e8 	st.w	r7[-24],r8
80008bbc:	c5 b8       	rjmp	80008c72 <eval_region+0x286>
			{
				flashOffset = (i * 128 * NUM_SAN_CYCLE_BUFS_PER_SECTOR);
80008bbe:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008bc2:	a7 78       	lsl	r8,0x7
80008bc4:	ef 48 ff bc 	st.w	r7[-68],r8
				
				tmpFlashOffset = flashOffset + (unsigned long) sanitationCyclesFlash;
80008bc8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008bcc:	fe f8 04 74 	ld.w	r8,pc[1140]
80008bd0:	f2 08 00 08 	add	r8,r9,r8
80008bd4:	ef 48 ff c0 	st.w	r7[-64],r8
				memcpy(&sanc, (const void*) tmpFlashOffset, sizeof(sanc));
80008bd8:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008bdc:	30 4a       	mov	r10,4
80008bde:	10 9b       	mov	r11,r8
80008be0:	fe fc 04 64 	ld.w	r12,pc[1124]
80008be4:	f0 1f 01 0f 	mcall	80009020 <eval_region+0x634>
				
				csum = calc_region_checksum(1);
80008be8:	30 1c       	mov	r12,1
80008bea:	f0 1f 01 0f 	mcall	80009024 <eval_region+0x638>
80008bee:	18 98       	mov	r8,r12
80008bf0:	ef 68 ff bb 	st.b	r7[-69],r8
				
				if (csum == sanc.csum) //checksum is good
80008bf4:	fe f8 04 50 	ld.w	r8,pc[1104]
80008bf8:	70 08       	ld.w	r8,r8[0x0]
80008bfa:	f1 d8 c0 88 	bfextu	r8,r8,0x4,0x8
80008bfe:	5c 58       	castu.b	r8
80008c00:	ef 39 ff bb 	ld.ub	r9,r7[-69]
80008c04:	f0 09 18 00 	cp.b	r9,r8
80008c08:	c3 01       	brne	80008c68 <eval_region+0x27c>
				{
					print_ecdbg("good csum\r\n");
80008c0a:	fe fc 04 1e 	ld.w	r12,pc[1054]
80008c0e:	f0 1f 01 00 	mcall	8000900c <eval_region+0x620>

					retVal = 1; //we have at least one good copy
80008c12:	30 18       	mov	r8,1
80008c14:	ef 68 ff c7 	st.b	r7[-57],r8
					
					if (sanc.cycles > tmpSanc.cycles)
80008c18:	fe f8 04 2c 	ld.w	r8,pc[1068]
80008c1c:	70 08       	ld.w	r8,r8[0x0]
80008c1e:	f1 d8 c1 94 	bfextu	r8,r8,0xc,0x14
80008c22:	10 99       	mov	r9,r8
80008c24:	ee f8 fc b4 	ld.w	r8,r7[-844]
80008c28:	f1 d8 c1 94 	bfextu	r8,r8,0xc,0x14
80008c2c:	10 39       	cp.w	r9,r8
80008c2e:	e0 8a 00 1d 	brle	80008c68 <eval_region+0x27c>
					{
						memcpy(&tmpSanc, &sanc, sizeof(sanc));
80008c32:	ee c8 03 4c 	sub	r8,r7,844
80008c36:	30 4a       	mov	r10,4
80008c38:	fe fb 04 0c 	ld.w	r11,pc[1036]
80008c3c:	10 9c       	mov	r12,r8
80008c3e:	f0 1f 00 f9 	mcall	80009020 <eval_region+0x634>
						sanCycleFlashIdx = i; //this is the new best copy
80008c42:	fe f8 04 06 	ld.w	r8,pc[1030]
80008c46:	ee f9 ff e8 	ld.w	r9,r7[-24]
80008c4a:	91 09       	st.w	r8[0x0],r9

						print_ecdbg("sanCycleFlashIdx ");
80008c4c:	fe fc 04 00 	ld.w	r12,pc[1024]
80008c50:	f0 1f 00 ef 	mcall	8000900c <eval_region+0x620>
						print_ecdbg_num(sanCycleFlashIdx);
80008c54:	fe f8 03 f4 	ld.w	r8,pc[1012]
80008c58:	70 08       	ld.w	r8,r8[0x0]
80008c5a:	10 9c       	mov	r12,r8
80008c5c:	f0 1f 00 f6 	mcall	80009034 <eval_region+0x648>
						print_ecdbg("\r\n");
80008c60:	fe fc 03 d8 	ld.w	r12,pc[984]
80008c64:	f0 1f 00 ea 	mcall	8000900c <eval_region+0x620>
		case 1: //san cycles
			memset(&tmpSanc, 0x00, sizeof(sanc));

			print_ecdbg("region 1 - sanitation cycles\r\n");

			for (unsigned int i=0; i<(NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS); i++)
80008c68:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008c6c:	2f f8       	sub	r8,-1
80008c6e:	ef 48 ff e8 	st.w	r7[-24],r8
80008c72:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008c76:	58 58       	cp.w	r8,5
80008c78:	fe 98 ff a3 	brls	80008bbe <eval_region+0x1d2>
						print_ecdbg_num(sanCycleFlashIdx);
						print_ecdbg("\r\n");
					}
				}
			}
			if (retVal == 1)
80008c7c:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80008c80:	30 18       	mov	r8,1
80008c82:	f0 09 18 00 	cp.b	r9,r8
80008c86:	e0 81 01 b5 	brne	80008ff0 <eval_region+0x604>
			{
				memcpy(&sanc, &tmpSanc, sizeof(sanc));
80008c8a:	ee c8 03 4c 	sub	r8,r7,844
80008c8e:	30 4a       	mov	r10,4
80008c90:	10 9b       	mov	r11,r8
80008c92:	fe fc 03 b2 	ld.w	r12,pc[946]
80008c96:	f0 1f 00 e3 	mcall	80009020 <eval_region+0x634>
			}
			break;
80008c9a:	e0 8f 01 b0 	bral	80008ffa <eval_region+0x60e>
			
		case 2: //usage hours
			memset(&tmpH, 0x00, sizeof(h));
80008c9e:	ee c8 04 0e 	sub	r8,r7,1038
80008ca2:	e0 6a 00 c2 	mov	r10,194
80008ca6:	30 0b       	mov	r11,0
80008ca8:	10 9c       	mov	r12,r8
80008caa:	f0 1f 00 db 	mcall	80009014 <eval_region+0x628>

			print_ecdbg("region 2 - usage hours\r\n");
80008cae:	fe fc 03 a2 	ld.w	r12,pc[930]
80008cb2:	f0 1f 00 d7 	mcall	8000900c <eval_region+0x620>

			for (unsigned int i=0; i<(NUM_USAGE_HOURS_BUFS_SECTORS / NUM_USAGE_HOURS_SECTORS_PER_BUF); i++)
80008cb6:	30 08       	mov	r8,0
80008cb8:	ef 48 ff ec 	st.w	r7[-20],r8
80008cbc:	c8 58       	rjmp	80008dc6 <eval_region+0x3da>
			{
				flashOffset = (i * 128 * NUM_USAGE_HOURS_SECTORS_PER_BUF);
80008cbe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008cc2:	a9 68       	lsl	r8,0x8
80008cc4:	ef 48 ff bc 	st.w	r7[-68],r8
				
				tmpFlashOffset = flashOffset + (unsigned long) usageHoursFlash;
80008cc8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008ccc:	fe f8 03 88 	ld.w	r8,pc[904]
80008cd0:	f2 08 00 08 	add	r8,r9,r8
80008cd4:	ef 48 ff c0 	st.w	r7[-64],r8
				
				memcpy(&h, (const void*) tmpFlashOffset, sizeof(h));
80008cd8:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008cdc:	e0 6a 00 c2 	mov	r10,194
80008ce0:	10 9b       	mov	r11,r8
80008ce2:	fe fc 03 76 	ld.w	r12,pc[886]
80008ce6:	f0 1f 00 cf 	mcall	80009020 <eval_region+0x634>
				
				csum = calc_region_checksum(2);
80008cea:	30 2c       	mov	r12,2
80008cec:	f0 1f 00 ce 	mcall	80009024 <eval_region+0x638>
80008cf0:	18 98       	mov	r8,r12
80008cf2:	ef 68 ff bb 	st.b	r7[-69],r8
				
				if (csum == h.csum) //checksum is good
80008cf6:	fe f8 03 62 	ld.w	r8,pc[866]
80008cfa:	f1 38 00 c0 	ld.ub	r8,r8[192]
80008cfe:	ef 39 ff bb 	ld.ub	r9,r7[-69]
80008d02:	f0 09 18 00 	cp.b	r9,r8
80008d06:	c5 b1       	brne	80008dbc <eval_region+0x3d0>
				{
					print_ecdbg("good csum\r\n");
80008d08:	fe fc 03 20 	ld.w	r12,pc[800]
80008d0c:	f0 1f 00 c0 	mcall	8000900c <eval_region+0x620>

					retVal = 1; //we have at least one good copy
80008d10:	30 18       	mov	r8,1
80008d12:	ef 68 ff c7 	st.b	r7[-57],r8
					
					tmpHours = 0;
80008d16:	30 08       	mov	r8,0
80008d18:	ef 48 ff c8 	st.w	r7[-56],r8
					uHours = 0;
80008d1c:	30 08       	mov	r8,0
80008d1e:	ef 48 ff cc 	st.w	r7[-52],r8
					
					for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008d22:	30 08       	mov	r8,0
80008d24:	ef 48 ff f0 	st.w	r7[-16],r8
80008d28:	c2 18       	rjmp	80008d6a <eval_region+0x37e>
					{
						tmpHours += tmpH.hrs[i];
80008d2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008d2e:	a1 78       	lsl	r8,0x1
80008d30:	ee 08 00 08 	add	r8,r7,r8
80008d34:	f1 08 fb f2 	ld.sh	r8,r8[-1038]
80008d38:	5c 78       	castu.h	r8
80008d3a:	ee f9 ff c8 	ld.w	r9,r7[-56]
80008d3e:	f2 08 00 08 	add	r8,r9,r8
80008d42:	ef 48 ff c8 	st.w	r7[-56],r8
						uHours += h.hrs[i];
80008d46:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008d4a:	fe f8 03 0e 	ld.w	r8,pc[782]
80008d4e:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80008d52:	5c 78       	castu.h	r8
80008d54:	ee f9 ff cc 	ld.w	r9,r7[-52]
80008d58:	f2 08 00 08 	add	r8,r9,r8
80008d5c:	ef 48 ff cc 	st.w	r7[-52],r8
					retVal = 1; //we have at least one good copy
					
					tmpHours = 0;
					uHours = 0;
					
					for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008d60:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008d64:	2f f8       	sub	r8,-1
80008d66:	ef 48 ff f0 	st.w	r7[-16],r8
80008d6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008d6e:	e0 48 00 5f 	cp.w	r8,95
80008d72:	fe 9a ff dc 	brle	80008d2a <eval_region+0x33e>
					{
						tmpHours += tmpH.hrs[i];
						uHours += h.hrs[i];
					}
					
					if (uHours > tmpHours)
80008d76:	ee f9 ff cc 	ld.w	r9,r7[-52]
80008d7a:	ee f8 ff c8 	ld.w	r8,r7[-56]
80008d7e:	10 39       	cp.w	r9,r8
80008d80:	e0 88 00 1e 	brls	80008dbc <eval_region+0x3d0>
					{
						memcpy(&tmpH, &h, sizeof(h));
80008d84:	ee c8 04 0e 	sub	r8,r7,1038
80008d88:	e0 6a 00 c2 	mov	r10,194
80008d8c:	fe fb 02 cc 	ld.w	r11,pc[716]
80008d90:	10 9c       	mov	r12,r8
80008d92:	f0 1f 00 a4 	mcall	80009020 <eval_region+0x634>
						hFlashIdx = i; //this is the new best copy
80008d96:	fe f8 02 c6 	ld.w	r8,pc[710]
80008d9a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008d9e:	91 09       	st.w	r8[0x0],r9
						
						print_ecdbg("hFlashIdx ");
80008da0:	fe fc 02 c0 	ld.w	r12,pc[704]
80008da4:	f0 1f 00 9a 	mcall	8000900c <eval_region+0x620>
						print_ecdbg_num(hFlashIdx);
80008da8:	fe f8 02 b4 	ld.w	r8,pc[692]
80008dac:	70 08       	ld.w	r8,r8[0x0]
80008dae:	10 9c       	mov	r12,r8
80008db0:	f0 1f 00 a1 	mcall	80009034 <eval_region+0x648>
						print_ecdbg("\r\n");
80008db4:	fe fc 02 84 	ld.w	r12,pc[644]
80008db8:	f0 1f 00 95 	mcall	8000900c <eval_region+0x620>
		case 2: //usage hours
			memset(&tmpH, 0x00, sizeof(h));

			print_ecdbg("region 2 - usage hours\r\n");

			for (unsigned int i=0; i<(NUM_USAGE_HOURS_BUFS_SECTORS / NUM_USAGE_HOURS_SECTORS_PER_BUF); i++)
80008dbc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008dc0:	2f f8       	sub	r8,-1
80008dc2:	ef 48 ff ec 	st.w	r7[-20],r8
80008dc6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008dca:	58 18       	cp.w	r8,1
80008dcc:	fe 98 ff 79 	brls	80008cbe <eval_region+0x2d2>
						print_ecdbg("\r\n");

					}
				}
			}
			if (retVal == 1)
80008dd0:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80008dd4:	30 18       	mov	r8,1
80008dd6:	f0 09 18 00 	cp.b	r9,r8
80008dda:	e0 81 01 0d 	brne	80008ff4 <eval_region+0x608>
			{
				memcpy(&h, &tmpH, sizeof(h));
80008dde:	ee c8 04 0e 	sub	r8,r7,1038
80008de2:	e0 6a 00 c2 	mov	r10,194
80008de6:	10 9b       	mov	r11,r8
80008de8:	fe fc 02 70 	ld.w	r12,pc[624]
80008dec:	f0 1f 00 8d 	mcall	80009020 <eval_region+0x634>
			}
			break;
80008df0:	c0 59       	rjmp	80008ffa <eval_region+0x60e>

		case 3: //usage minutes
			memset(&tmpM, 0x00, sizeof(m));
80008df2:	ee c8 04 78 	sub	r8,r7,1144
80008df6:	36 8a       	mov	r10,104
80008df8:	30 0b       	mov	r11,0
80008dfa:	10 9c       	mov	r12,r8
80008dfc:	f0 1f 00 86 	mcall	80009014 <eval_region+0x628>
			
			print_ecdbg("region 3 - usage minutes\r\n");
80008e00:	fe fc 02 64 	ld.w	r12,pc[612]
80008e04:	f0 1f 00 82 	mcall	8000900c <eval_region+0x620>
			
			for (unsigned int i=0; i<(NUM_USAGE_MINS_BUFS_PER_SECTOR * NUM_USAGE_MINS_BUFS_SECTORS); i++)
80008e08:	30 08       	mov	r8,0
80008e0a:	ef 48 ff f4 	st.w	r7[-12],r8
80008e0e:	c7 98       	rjmp	80008f00 <eval_region+0x514>
			{
				flashOffset = (i * 128 * NUM_USAGE_MINS_BUFS_PER_SECTOR);
80008e10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008e14:	a7 78       	lsl	r8,0x7
80008e16:	ef 48 ff bc 	st.w	r7[-68],r8
				
				tmpFlashOffset = flashOffset + (unsigned long) usageMinutesFlash;
80008e1a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008e1e:	fe f8 02 4a 	ld.w	r8,pc[586]
80008e22:	f2 08 00 08 	add	r8,r9,r8
80008e26:	ef 48 ff c0 	st.w	r7[-64],r8
				
				memcpy(&m, (const void*) tmpFlashOffset, sizeof(m));
80008e2a:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008e2e:	36 8a       	mov	r10,104
80008e30:	10 9b       	mov	r11,r8
80008e32:	fe fc 02 3a 	ld.w	r12,pc[570]
80008e36:	f0 1f 00 7b 	mcall	80009020 <eval_region+0x634>
				
				csum = calc_region_checksum(3);
80008e3a:	30 3c       	mov	r12,3
80008e3c:	f0 1f 00 7a 	mcall	80009024 <eval_region+0x638>
80008e40:	18 98       	mov	r8,r12
80008e42:	ef 68 ff bb 	st.b	r7[-69],r8
				
				if (csum == m.csum) //checksum is good
80008e46:	fe f8 02 26 	ld.w	r8,pc[550]
80008e4a:	f1 38 00 64 	ld.ub	r8,r8[100]
80008e4e:	ef 39 ff bb 	ld.ub	r9,r7[-69]
80008e52:	f0 09 18 00 	cp.b	r9,r8
80008e56:	c5 01       	brne	80008ef6 <eval_region+0x50a>
				{
					print_ecdbg("good csum\r\n");
80008e58:	4f 4c       	lddpc	r12,80009028 <eval_region+0x63c>
80008e5a:	f0 1f 00 6d 	mcall	8000900c <eval_region+0x620>

					retVal = 1; //we have at least one good copy
80008e5e:	30 18       	mov	r8,1
80008e60:	ef 68 ff c7 	st.b	r7[-57],r8
					
					tmpMinutes = 0;
80008e64:	30 08       	mov	r8,0
80008e66:	ef 48 ff d0 	st.w	r7[-48],r8
					uMinutes = 0;
80008e6a:	30 08       	mov	r8,0
80008e6c:	ef 48 ff d4 	st.w	r7[-44],r8
					
					for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008e70:	30 08       	mov	r8,0
80008e72:	ef 48 ff f8 	st.w	r7[-8],r8
80008e76:	c1 d8       	rjmp	80008eb0 <eval_region+0x4c4>
					{
						//TODO: I should be checking the serial ID and flags struct to see if the slot is filled, but i don't have a good way of syncing sf and m right now. In the meantime, just make sure that m.mins[i] is 0 if not used.
						tmpMinutes += tmpM.mins[i];
80008e78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e7c:	ee 08 00 08 	add	r8,r7,r8
80008e80:	f1 38 fb 88 	ld.ub	r8,r8[-1144]
80008e84:	ee f9 ff d0 	ld.w	r9,r7[-48]
80008e88:	f2 08 00 08 	add	r8,r9,r8
80008e8c:	ef 48 ff d0 	st.w	r7[-48],r8
						uMinutes += m.mins[i];
80008e90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e94:	4f 69       	lddpc	r9,8000906c <eval_region+0x680>
80008e96:	f2 08 07 08 	ld.ub	r8,r9[r8]
80008e9a:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008e9e:	f2 08 00 08 	add	r8,r9,r8
80008ea2:	ef 48 ff d4 	st.w	r7[-44],r8
					retVal = 1; //we have at least one good copy
					
					tmpMinutes = 0;
					uMinutes = 0;
					
					for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008ea6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008eaa:	2f f8       	sub	r8,-1
80008eac:	ef 48 ff f8 	st.w	r7[-8],r8
80008eb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008eb4:	e0 48 00 5f 	cp.w	r8,95
80008eb8:	fe 9a ff e0 	brle	80008e78 <eval_region+0x48c>
						//TODO: I should be checking the serial ID and flags struct to see if the slot is filled, but i don't have a good way of syncing sf and m right now. In the meantime, just make sure that m.mins[i] is 0 if not used.
						tmpMinutes += tmpM.mins[i];
						uMinutes += m.mins[i];
					}
					
					if (uMinutes > tmpMinutes)
80008ebc:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008ec0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80008ec4:	10 39       	cp.w	r9,r8
80008ec6:	e0 88 00 18 	brls	80008ef6 <eval_region+0x50a>
					{
						memcpy(&tmpM, &m, sizeof(m));
80008eca:	ee c8 04 78 	sub	r8,r7,1144
80008ece:	36 8a       	mov	r10,104
80008ed0:	4e 7b       	lddpc	r11,8000906c <eval_region+0x680>
80008ed2:	10 9c       	mov	r12,r8
80008ed4:	f0 1f 00 53 	mcall	80009020 <eval_region+0x634>
						mFlashIdx = i; //this is the new best copy
80008ed8:	4e 68       	lddpc	r8,80009070 <eval_region+0x684>
80008eda:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008ede:	91 09       	st.w	r8[0x0],r9

						print_ecdbg("mFlashIdx ");
80008ee0:	4e 5c       	lddpc	r12,80009074 <eval_region+0x688>
80008ee2:	f0 1f 00 4b 	mcall	8000900c <eval_region+0x620>
						print_ecdbg_num(mFlashIdx);
80008ee6:	4e 38       	lddpc	r8,80009070 <eval_region+0x684>
80008ee8:	70 08       	ld.w	r8,r8[0x0]
80008eea:	10 9c       	mov	r12,r8
80008eec:	f0 1f 00 52 	mcall	80009034 <eval_region+0x648>
						print_ecdbg("\r\n");
80008ef0:	4d 2c       	lddpc	r12,80009038 <eval_region+0x64c>
80008ef2:	f0 1f 00 47 	mcall	8000900c <eval_region+0x620>
		case 3: //usage minutes
			memset(&tmpM, 0x00, sizeof(m));
			
			print_ecdbg("region 3 - usage minutes\r\n");
			
			for (unsigned int i=0; i<(NUM_USAGE_MINS_BUFS_PER_SECTOR * NUM_USAGE_MINS_BUFS_SECTORS); i++)
80008ef6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008efa:	2f f8       	sub	r8,-1
80008efc:	ef 48 ff f4 	st.w	r7[-12],r8
80008f00:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f04:	e0 48 00 73 	cp.w	r8,115
80008f08:	fe 98 ff 84 	brls	80008e10 <eval_region+0x424>
						print_ecdbg_num(mFlashIdx);
						print_ecdbg("\r\n");
					}
				}
			}
			if (retVal == 1)
80008f0c:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80008f10:	30 18       	mov	r8,1
80008f12:	f0 09 18 00 	cp.b	r9,r8
80008f16:	c7 11       	brne	80008ff8 <eval_region+0x60c>
			{
				memcpy(&m, &tmpM, sizeof(m));
80008f18:	ee c8 04 78 	sub	r8,r7,1144
80008f1c:	36 8a       	mov	r10,104
80008f1e:	10 9b       	mov	r11,r8
80008f20:	4d 3c       	lddpc	r12,8000906c <eval_region+0x680>
80008f22:	f0 1f 00 40 	mcall	80009020 <eval_region+0x634>
			}
			break;
80008f26:	c6 a8       	rjmp	80008ffa <eval_region+0x60e>
		case 4: //configuration
			memset(&tmpC, 0x00, sizeof(c));
80008f28:	ee c8 04 7a 	sub	r8,r7,1146
80008f2c:	30 2a       	mov	r10,2
80008f2e:	30 0b       	mov	r11,0
80008f30:	10 9c       	mov	r12,r8
80008f32:	f0 1f 00 39 	mcall	80009014 <eval_region+0x628>

			print_ecdbg("region 4 - configuration\r\n");
80008f36:	4d 1c       	lddpc	r12,80009078 <eval_region+0x68c>
80008f38:	f0 1f 00 35 	mcall	8000900c <eval_region+0x620>

			for (unsigned int i=0; i<(NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS); i++)
80008f3c:	30 08       	mov	r8,0
80008f3e:	ef 48 ff fc 	st.w	r7[-4],r8
80008f42:	c4 28       	rjmp	80008fc6 <eval_region+0x5da>
			{
				flashOffset = (i * 128 * NUM_CONFIG_BUFS_PER_SECTOR);
80008f44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f48:	a7 78       	lsl	r8,0x7
80008f4a:	ef 48 ff bc 	st.w	r7[-68],r8
			
				tmpFlashOffset = flashOffset + (unsigned long) configFlash;
80008f4e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008f52:	4c b8       	lddpc	r8,8000907c <eval_region+0x690>
80008f54:	f2 08 00 08 	add	r8,r9,r8
80008f58:	ef 48 ff c0 	st.w	r7[-64],r8
				memcpy(&c, (const void*) tmpFlashOffset, sizeof(c));
80008f5c:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008f60:	30 2a       	mov	r10,2
80008f62:	10 9b       	mov	r11,r8
80008f64:	4c 7c       	lddpc	r12,80009080 <eval_region+0x694>
80008f66:	f0 1f 00 2f 	mcall	80009020 <eval_region+0x634>
			
				csum = calc_region_checksum(4);
80008f6a:	30 4c       	mov	r12,4
80008f6c:	f0 1f 00 2e 	mcall	80009024 <eval_region+0x638>
80008f70:	18 98       	mov	r8,r12
80008f72:	ef 68 ff bb 	st.b	r7[-69],r8
			
				if (csum == c.csum) //checksum is good
80008f76:	4c 38       	lddpc	r8,80009080 <eval_region+0x694>
80008f78:	11 98       	ld.ub	r8,r8[0x1]
80008f7a:	ef 39 ff bb 	ld.ub	r9,r7[-69]
80008f7e:	f0 09 18 00 	cp.b	r9,r8
80008f82:	c1 d1       	brne	80008fbc <eval_region+0x5d0>
				{
					print_ecdbg("good csum\r\n");
80008f84:	4a 9c       	lddpc	r12,80009028 <eval_region+0x63c>
80008f86:	f0 1f 00 22 	mcall	8000900c <eval_region+0x620>

					retVal = 1; //we have at least one good copy
80008f8a:	30 18       	mov	r8,1
80008f8c:	ef 68 ff c7 	st.b	r7[-57],r8
				
					memcpy(&tmpC, &c, sizeof(c));
80008f90:	ee c8 04 7a 	sub	r8,r7,1146
80008f94:	30 2a       	mov	r10,2
80008f96:	4b bb       	lddpc	r11,80009080 <eval_region+0x694>
80008f98:	10 9c       	mov	r12,r8
80008f9a:	f0 1f 00 22 	mcall	80009020 <eval_region+0x634>
					configFlashIdx = i; //no good eval criteria for initialDTE: user could increase or decrease it. Therefore, always store 2 copies so both copies will be the same.
80008f9e:	4b a8       	lddpc	r8,80009084 <eval_region+0x698>
80008fa0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008fa4:	91 09       	st.w	r8[0x0],r9

					print_ecdbg("configFlashIdx ");
80008fa6:	4b 9c       	lddpc	r12,80009088 <eval_region+0x69c>
80008fa8:	f0 1f 00 19 	mcall	8000900c <eval_region+0x620>
					print_ecdbg_num(configFlashIdx);
80008fac:	4b 68       	lddpc	r8,80009084 <eval_region+0x698>
80008fae:	70 08       	ld.w	r8,r8[0x0]
80008fb0:	10 9c       	mov	r12,r8
80008fb2:	f0 1f 00 21 	mcall	80009034 <eval_region+0x648>
					print_ecdbg("\r\n");
80008fb6:	4a 1c       	lddpc	r12,80009038 <eval_region+0x64c>
80008fb8:	f0 1f 00 15 	mcall	8000900c <eval_region+0x620>
		case 4: //configuration
			memset(&tmpC, 0x00, sizeof(c));

			print_ecdbg("region 4 - configuration\r\n");

			for (unsigned int i=0; i<(NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS); i++)
80008fbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fc0:	2f f8       	sub	r8,-1
80008fc2:	ef 48 ff fc 	st.w	r7[-4],r8
80008fc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fca:	58 18       	cp.w	r8,1
80008fcc:	fe 98 ff bc 	brls	80008f44 <eval_region+0x558>
					print_ecdbg("configFlashIdx ");
					print_ecdbg_num(configFlashIdx);
					print_ecdbg("\r\n");
				}
			}
			if (retVal == 1)
80008fd0:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80008fd4:	30 18       	mov	r8,1
80008fd6:	f0 09 18 00 	cp.b	r9,r8
80008fda:	c1 01       	brne	80008ffa <eval_region+0x60e>
			{
				memcpy(&c, &tmpC, sizeof(c));
80008fdc:	ee c8 04 7a 	sub	r8,r7,1146
80008fe0:	30 2a       	mov	r10,2
80008fe2:	10 9b       	mov	r11,r8
80008fe4:	4a 7c       	lddpc	r12,80009080 <eval_region+0x694>
80008fe6:	f0 1f 00 0f 	mcall	80009020 <eval_region+0x634>
80008fea:	c0 88       	rjmp	80008ffa <eval_region+0x60e>
			
			if (retVal == 1)
			{
				memcpy(&sf, &tmpSf, sizeof(sf));
			}
			break;
80008fec:	d7 03       	nop
80008fee:	c0 68       	rjmp	80008ffa <eval_region+0x60e>
			}
			if (retVal == 1)
			{
				memcpy(&sanc, &tmpSanc, sizeof(sanc));
			}
			break;
80008ff0:	d7 03       	nop
80008ff2:	c0 48       	rjmp	80008ffa <eval_region+0x60e>
			}
			if (retVal == 1)
			{
				memcpy(&h, &tmpH, sizeof(h));
			}
			break;
80008ff4:	d7 03       	nop
80008ff6:	c0 28       	rjmp	80008ffa <eval_region+0x60e>
			}
			if (retVal == 1)
			{
				memcpy(&m, &tmpM, sizeof(m));
			}
			break;
80008ff8:	d7 03       	nop
			}
			break;
		
	}
	
	return retVal;
80008ffa:	ef 38 ff c7 	ld.ub	r8,r7[-57]
}
80008ffe:	10 9c       	mov	r12,r8
80009000:	fe 3d fb 80 	sub	sp,-1152
80009004:	e3 cd 80 80 	ldm	sp++,r7,pc
80009008:	80 00       	ld.sh	r0,r0[0x0]
8000900a:	66 dc       	ld.w	r12,r3[0x34]
8000900c:	80 00       	ld.sh	r0,r0[0x0]
8000900e:	33 38       	mov	r8,51
80009010:	80 00       	ld.sh	r0,r0[0x0]
80009012:	66 ec       	ld.w	r12,r3[0x38]
80009014:	80 00       	ld.sh	r0,r0[0x0]
80009016:	cc 3e       	rcall	80008d9c <eval_region+0x3b0>
80009018:	80 07       	ld.sh	r7,r0[0x0]
8000901a:	fa 00 00 00 	add	r0,sp,r0
8000901e:	08 48       	or	r8,r4
80009020:	80 00       	ld.sh	r0,r0[0x0]
80009022:	ca f6       	brmi	80008f80 <eval_region+0x594>
80009024:	80 00       	ld.sh	r0,r0[0x0]
80009026:	87 94       	st.w	r3[0x24],r4
80009028:	80 00       	ld.sh	r0,r0[0x0]
8000902a:	67 10       	ld.w	r0,r3[0x44]
8000902c:	00 00       	add	r0,r0
8000902e:	07 bc       	ld.ub	r12,r3[0x3]
80009030:	80 00       	ld.sh	r0,r0[0x0]
80009032:	67 1c       	ld.w	r12,r3[0x44]
80009034:	80 00       	ld.sh	r0,r0[0x0]
80009036:	73 20       	ld.w	r0,r9[0x48]
80009038:	80 00       	ld.sh	r0,r0[0x0]
8000903a:	64 ec       	ld.w	r12,r2[0x38]
8000903c:	80 00       	ld.sh	r0,r0[0x0]
8000903e:	67 28       	ld.w	r8,r3[0x48]
80009040:	80 07       	ld.sh	r7,r0[0x0]
80009042:	f7 00 00 00 	ld.sh	r0,r11[0]
80009046:	0c 28       	rsub	r8,r6
80009048:	00 00       	add	r0,r0
8000904a:	07 c0       	ld.ub	r0,r3[0x4]
8000904c:	80 00       	ld.sh	r0,r0[0x0]
8000904e:	67 48       	ld.w	r8,r3[0x50]
80009050:	80 00       	ld.sh	r0,r0[0x0]
80009052:	67 5c       	ld.w	r12,r3[0x54]
80009054:	80 07       	ld.sh	r7,r0[0x0]
80009056:	f5 00 00 00 	ld.sh	r0,r10[0]
8000905a:	0c 2c       	rsub	r12,r6
8000905c:	00 00       	add	r0,r0
8000905e:	07 c4       	ld.ub	r4,r3[0x4]
80009060:	80 00       	ld.sh	r0,r0[0x0]
80009062:	67 78       	ld.w	r8,r3[0x5c]
80009064:	80 00       	ld.sh	r0,r0[0x0]
80009066:	67 84       	ld.w	r4,r3[0x60]
80009068:	80 07       	ld.sh	r7,r0[0x0]
8000906a:	bb 00       	ld.d	r0,sp
8000906c:	00 00       	add	r0,r0
8000906e:	0d 08       	ld.w	r8,r6++
80009070:	00 00       	add	r0,r0
80009072:	07 c8       	ld.ub	r8,r3[0x4]
80009074:	80 00       	ld.sh	r0,r0[0x0]
80009076:	67 a0       	ld.w	r0,r3[0x68]
80009078:	80 00       	ld.sh	r0,r0[0x0]
8000907a:	67 ac       	ld.w	r12,r3[0x68]
8000907c:	80 07       	ld.sh	r7,r0[0x0]
8000907e:	ba 00       	st.h	sp[0x0],r0
80009080:	00 00       	add	r0,r0
80009082:	0b fc       	ld.ub	r12,r5[0x7]
80009084:	00 00       	add	r0,r0
80009086:	07 cc       	ld.ub	r12,r3[0x4]
80009088:	80 00       	ld.sh	r0,r0[0x0]
8000908a:	67 c8       	ld.w	r8,r3[0x70]

8000908c <write_region_to_flash>:

unsigned char write_region_to_flash(unsigned char sel, unsigned char idx, unsigned char csum);
unsigned char write_region_to_flash(unsigned char sel, unsigned char idx, unsigned char csum)
{
8000908c:	eb cd 40 80 	pushm	r7,lr
80009090:	1a 97       	mov	r7,sp
80009092:	20 6d       	sub	sp,24
80009094:	16 99       	mov	r9,r11
80009096:	14 98       	mov	r8,r10
80009098:	18 9a       	mov	r10,r12
8000909a:	ef 6a ff f0 	st.b	r7[-16],r10
8000909e:	ef 69 ff ec 	st.b	r7[-20],r9
800090a2:	ef 68 ff e8 	st.b	r7[-24],r8
	unsigned long tmpFlashOffset, flashOffset;
	unsigned char tmpIdx;
	
	if (idx == 0xFF) //use the default system index
800090a6:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800090aa:	3f f8       	mov	r8,-1
800090ac:	f0 09 18 00 	cp.b	r9,r8
800090b0:	c2 b1       	brne	80009106 <write_region_to_flash+0x7a>
	{
		switch(sel)
800090b2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800090b6:	58 28       	cp.w	r8,2
800090b8:	c1 70       	breq	800090e6 <write_region_to_flash+0x5a>
800090ba:	e0 89 00 07 	brgt	800090c8 <write_region_to_flash+0x3c>
800090be:	58 08       	cp.w	r8,0
800090c0:	c0 90       	breq	800090d2 <write_region_to_flash+0x46>
800090c2:	58 18       	cp.w	r8,1
800090c4:	c0 c0       	breq	800090dc <write_region_to_flash+0x50>
				break;
			case 3: //usage minutes
				tmpIdx = mFlashIdx;
				break;
			case 4: //configuration
				tmpIdx = configFlashIdx;
800090c6:	c2 48       	rjmp	8000910e <write_region_to_flash+0x82>
	unsigned long tmpFlashOffset, flashOffset;
	unsigned char tmpIdx;
	
	if (idx == 0xFF) //use the default system index
	{
		switch(sel)
800090c8:	58 38       	cp.w	r8,3
800090ca:	c1 30       	breq	800090f0 <write_region_to_flash+0x64>
800090cc:	58 48       	cp.w	r8,4
800090ce:	c1 70       	breq	800090fc <write_region_to_flash+0x70>
				break;
			case 3: //usage minutes
				tmpIdx = mFlashIdx;
				break;
			case 4: //configuration
				tmpIdx = configFlashIdx;
800090d0:	c1 f8       	rjmp	8000910e <write_region_to_flash+0x82>
	if (idx == 0xFF) //use the default system index
	{
		switch(sel)
		{
			case 0: //serial ID and flags
				tmpIdx = sfFlashIdx;
800090d2:	4d d8       	lddpc	r8,80009244 <write_region_to_flash+0x1b8>
800090d4:	70 08       	ld.w	r8,r8[0x0]
800090d6:	ef 68 ff ff 	st.b	r7[-1],r8
				break;
800090da:	c1 a8       	rjmp	8000910e <write_region_to_flash+0x82>
			case 1: //sanitation cycles
				tmpIdx = sanCycleFlashIdx;
800090dc:	4d b8       	lddpc	r8,80009248 <write_region_to_flash+0x1bc>
800090de:	70 08       	ld.w	r8,r8[0x0]
800090e0:	ef 68 ff ff 	st.b	r7[-1],r8
				break;
800090e4:	c1 58       	rjmp	8000910e <write_region_to_flash+0x82>
			case 2: //usage hours
				tmpIdx = hFlashIdx;
800090e6:	4d a8       	lddpc	r8,8000924c <write_region_to_flash+0x1c0>
800090e8:	70 08       	ld.w	r8,r8[0x0]
800090ea:	ef 68 ff ff 	st.b	r7[-1],r8
				break;
800090ee:	c1 08       	rjmp	8000910e <write_region_to_flash+0x82>
			case 3: //usage minutes
				tmpIdx = mFlashIdx;
800090f0:	4d 88       	lddpc	r8,80009250 <write_region_to_flash+0x1c4>
800090f2:	70 08       	ld.w	r8,r8[0x0]
800090f4:	ef 68 ff ff 	st.b	r7[-1],r8
				break;
800090f8:	d7 03       	nop
800090fa:	c0 a8       	rjmp	8000910e <write_region_to_flash+0x82>
			case 4: //configuration
				tmpIdx = configFlashIdx;
800090fc:	4d 68       	lddpc	r8,80009254 <write_region_to_flash+0x1c8>
800090fe:	70 08       	ld.w	r8,r8[0x0]
80009100:	ef 68 ff ff 	st.b	r7[-1],r8
80009104:	c0 58       	rjmp	8000910e <write_region_to_flash+0x82>
				break;
		}
	}
	else //use the specific index passed to this function
	{
		tmpIdx = idx;
80009106:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000910a:	ef 68 ff ff 	st.b	r7[-1],r8
	}
	
	switch (sel)
8000910e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80009112:	58 28       	cp.w	r8,2
80009114:	c4 60       	breq	800091a0 <write_region_to_flash+0x114>
80009116:	e0 89 00 07 	brgt	80009124 <write_region_to_flash+0x98>
8000911a:	58 08       	cp.w	r8,0
8000911c:	c0 90       	breq	8000912e <write_region_to_flash+0xa2>
8000911e:	58 18       	cp.w	r8,1
80009120:	c2 40       	breq	80009168 <write_region_to_flash+0xdc>
80009122:	c8 c8       	rjmp	8000923a <write_region_to_flash+0x1ae>
80009124:	58 38       	cp.w	r8,3
80009126:	c5 80       	breq	800091d6 <write_region_to_flash+0x14a>
80009128:	58 48       	cp.w	r8,4
8000912a:	c7 00       	breq	8000920a <write_region_to_flash+0x17e>
8000912c:	c8 78       	rjmp	8000923a <write_region_to_flash+0x1ae>
	{
		case 0: //serial ID and flags
			//NOTE: this is not as parameterized as it should be, only good for 2 sectors, but good enough for now. 
			
			sf[0].csum = csum;
8000912e:	4c b9       	lddpc	r9,80009258 <write_region_to_flash+0x1cc>
80009130:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80009134:	b2 f8       	st.b	r9[0x7],r8
			flashOffset = tmpIdx * 128 * NUM_SERIAL_ID_SECTORS_PER_BUF;
80009136:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000913a:	12 98       	mov	r8,r9
8000913c:	a1 78       	lsl	r8,0x1
8000913e:	12 08       	add	r8,r9
80009140:	a9 68       	lsl	r8,0x8
80009142:	ef 48 ff f8 	st.w	r7[-8],r8
			tmpFlashOffset = flashOffset + (unsigned long) serialIdAndFlagsFlash;
80009146:	4c 68       	lddpc	r8,8000925c <write_region_to_flash+0x1d0>
80009148:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000914c:	f2 08 00 08 	add	r8,r9,r8
80009150:	ef 48 ff f4 	st.w	r7[-12],r8
			flashc_memcpy((volatile void*)tmpFlashOffset, &sf, sizeof(sf), true);
80009154:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009158:	30 19       	mov	r9,1
8000915a:	e0 6a 03 00 	mov	r10,768
8000915e:	4b fb       	lddpc	r11,80009258 <write_region_to_flash+0x1cc>
80009160:	10 9c       	mov	r12,r8
80009162:	f0 1f 00 40 	mcall	80009260 <write_region_to_flash+0x1d4>
			break;
80009166:	c6 a8       	rjmp	8000923a <write_region_to_flash+0x1ae>

		case 1: //san cycles
			//NOTE: this is not as parameterized as it should be, only good for 2 sectors, but good enough for now.
			
			sanc.csum = csum;
80009168:	4b f9       	lddpc	r9,80009264 <write_region_to_flash+0x1d8>
8000916a:	72 08       	ld.w	r8,r9[0x0]
8000916c:	ef 3a ff e8 	ld.ub	r10,r7[-24]
80009170:	f1 da d0 88 	bfins	r8,r10,0x4,0x8
80009174:	93 08       	st.w	r9[0x0],r8
			flashOffset = tmpIdx * 128 * NUM_SAN_CYCLE_BUFS_PER_SECTOR; //one sector per buf
80009176:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000917a:	a7 78       	lsl	r8,0x7
8000917c:	ef 48 ff f8 	st.w	r7[-8],r8
			tmpFlashOffset = flashOffset + (unsigned long) sanitationCyclesFlash;
80009180:	4b a8       	lddpc	r8,80009268 <write_region_to_flash+0x1dc>
80009182:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009186:	f2 08 00 08 	add	r8,r9,r8
8000918a:	ef 48 ff f4 	st.w	r7[-12],r8
			flashc_memcpy((volatile void*)tmpFlashOffset, &sanc, sizeof(sanc), true);
8000918e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009192:	30 19       	mov	r9,1
80009194:	30 4a       	mov	r10,4
80009196:	4b 4b       	lddpc	r11,80009264 <write_region_to_flash+0x1d8>
80009198:	10 9c       	mov	r12,r8
8000919a:	f0 1f 00 32 	mcall	80009260 <write_region_to_flash+0x1d4>
			break;
8000919e:	c4 e8       	rjmp	8000923a <write_region_to_flash+0x1ae>

		case 2: //usage hours
			h.csum = csum;
800091a0:	4b 39       	lddpc	r9,8000926c <write_region_to_flash+0x1e0>
800091a2:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800091a6:	f3 68 00 c0 	st.b	r9[192],r8
			flashOffset = tmpIdx * 128 * NUM_USAGE_HOURS_SECTORS_PER_BUF;
800091aa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800091ae:	a9 68       	lsl	r8,0x8
800091b0:	ef 48 ff f8 	st.w	r7[-8],r8
			tmpFlashOffset = flashOffset + (unsigned long) usageHoursFlash;
800091b4:	4a f8       	lddpc	r8,80009270 <write_region_to_flash+0x1e4>
800091b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800091ba:	f2 08 00 08 	add	r8,r9,r8
800091be:	ef 48 ff f4 	st.w	r7[-12],r8
			flashc_memcpy((volatile void*)tmpFlashOffset, &h, sizeof(h), true);
800091c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800091c6:	30 19       	mov	r9,1
800091c8:	e0 6a 00 c2 	mov	r10,194
800091cc:	4a 8b       	lddpc	r11,8000926c <write_region_to_flash+0x1e0>
800091ce:	10 9c       	mov	r12,r8
800091d0:	f0 1f 00 24 	mcall	80009260 <write_region_to_flash+0x1d4>
			break;
800091d4:	c3 38       	rjmp	8000923a <write_region_to_flash+0x1ae>
			
		case 3: //usage minutes
			//NOTE: this is not as parameterized as it should be, but good enough for now.
			m.csum = csum;
800091d6:	4a 89       	lddpc	r9,80009274 <write_region_to_flash+0x1e8>
800091d8:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800091dc:	f3 68 00 64 	st.b	r9[100],r8
			flashOffset = tmpIdx * 128 * NUM_USAGE_MINS_BUFS_PER_SECTOR;
800091e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800091e4:	a7 78       	lsl	r8,0x7
800091e6:	ef 48 ff f8 	st.w	r7[-8],r8
			tmpFlashOffset = flashOffset + (unsigned long) usageMinutesFlash;
800091ea:	4a 48       	lddpc	r8,80009278 <write_region_to_flash+0x1ec>
800091ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800091f0:	f2 08 00 08 	add	r8,r9,r8
800091f4:	ef 48 ff f4 	st.w	r7[-12],r8
			flashc_memcpy((volatile void*)tmpFlashOffset, &m, sizeof(m), true);
800091f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800091fc:	30 19       	mov	r9,1
800091fe:	36 8a       	mov	r10,104
80009200:	49 db       	lddpc	r11,80009274 <write_region_to_flash+0x1e8>
80009202:	10 9c       	mov	r12,r8
80009204:	f0 1f 00 17 	mcall	80009260 <write_region_to_flash+0x1d4>
			break;
80009208:	c1 98       	rjmp	8000923a <write_region_to_flash+0x1ae>

		case 4: //configuration
			c.csum = csum;
8000920a:	49 d9       	lddpc	r9,8000927c <write_region_to_flash+0x1f0>
8000920c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80009210:	b2 98       	st.b	r9[0x1],r8
			flashOffset = tmpIdx * 128 * NUM_CONFIG_BUFS_PER_SECTOR; //one sector per buf
80009212:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009216:	a7 78       	lsl	r8,0x7
80009218:	ef 48 ff f8 	st.w	r7[-8],r8
			tmpFlashOffset = flashOffset + (unsigned long) configFlash;
8000921c:	49 98       	lddpc	r8,80009280 <write_region_to_flash+0x1f4>
8000921e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009222:	f2 08 00 08 	add	r8,r9,r8
80009226:	ef 48 ff f4 	st.w	r7[-12],r8
			flashc_memcpy((volatile void*)tmpFlashOffset, &c, sizeof(c), true);
8000922a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000922e:	30 19       	mov	r9,1
80009230:	30 2a       	mov	r10,2
80009232:	49 3b       	lddpc	r11,8000927c <write_region_to_flash+0x1f0>
80009234:	10 9c       	mov	r12,r8
80009236:	f0 1f 00 0b 	mcall	80009260 <write_region_to_flash+0x1d4>
			break;
	}
	
	return SUCCESS;	
8000923a:	30 08       	mov	r8,0
}
8000923c:	10 9c       	mov	r12,r8
8000923e:	2f ad       	sub	sp,-24
80009240:	e3 cd 80 80 	ldm	sp++,r7,pc
80009244:	00 00       	add	r0,r0
80009246:	07 bc       	ld.ub	r12,r3[0x3]
80009248:	00 00       	add	r0,r0
8000924a:	07 c0       	ld.ub	r0,r3[0x4]
8000924c:	00 00       	add	r0,r0
8000924e:	07 c4       	ld.ub	r4,r3[0x4]
80009250:	00 00       	add	r0,r0
80009252:	07 c8       	ld.ub	r8,r3[0x4]
80009254:	00 00       	add	r0,r0
80009256:	07 cc       	ld.ub	r12,r3[0x4]
80009258:	00 00       	add	r0,r0
8000925a:	08 48       	or	r8,r4
8000925c:	80 07       	ld.sh	r7,r0[0x0]
8000925e:	fa 00       	*unknown*
80009260:	80 00       	ld.sh	r0,r0[0x0]
80009262:	43 84       	lddsp	r4,sp[0xe0]
80009264:	00 00       	add	r0,r0
80009266:	0c 28       	rsub	r8,r6
80009268:	80 07       	ld.sh	r7,r0[0x0]
8000926a:	f7 00 00 00 	ld.sh	r0,r11[0]
8000926e:	0c 2c       	rsub	r12,r6
80009270:	80 07       	ld.sh	r7,r0[0x0]
80009272:	f5 00 00 00 	ld.sh	r0,r10[0]
80009276:	0d 08       	ld.w	r8,r6++
80009278:	80 07       	ld.sh	r7,r0[0x0]
8000927a:	bb 00       	ld.d	r0,sp
8000927c:	00 00       	add	r0,r0
8000927e:	0b fc       	ld.ub	r12,r5[0x7]
80009280:	80 07       	ld.sh	r7,r0[0x0]
80009282:	ba 00       	st.h	sp[0x0],r0

80009284 <write_bad_region_to_flash>:

void write_bad_region_to_flash(unsigned char sel, unsigned char idx);
void write_bad_region_to_flash(unsigned char sel, unsigned char idx)
{
80009284:	eb cd 40 80 	pushm	r7,lr
80009288:	1a 97       	mov	r7,sp
8000928a:	21 fd       	sub	sp,124
8000928c:	18 99       	mov	r9,r12
8000928e:	16 98       	mov	r8,r11
80009290:	ef 69 ff 88 	st.b	r7[-120],r9
80009294:	ef 68 ff 84 	st.b	r7[-124],r8
	unsigned long tmpFlashOffset, flashOffset;
	unsigned char tmpIdx;

	USAGE_MINS_SET tmpM;
	
	memset(&tmpM, 0x00, sizeof(m)); //just zero it out and don't give it a good checksum
80009298:	ee c8 00 74 	sub	r8,r7,116
8000929c:	36 8a       	mov	r10,104
8000929e:	30 0b       	mov	r11,0
800092a0:	10 9c       	mov	r12,r8
800092a2:	f0 1f 00 1d 	mcall	80009314 <write_bad_region_to_flash+0x90>
	
	if (sel != 3)
800092a6:	ef 39 ff 88 	ld.ub	r9,r7[-120]
800092aa:	30 38       	mov	r8,3
800092ac:	f0 09 18 00 	cp.b	r9,r8
800092b0:	c2 e1       	brne	8000930c <write_bad_region_to_flash+0x88>
	{
		return; //we only do this for the minutes region
	}
	
	if (idx == 0xFF) //use the default system index
800092b2:	ef 39 ff 84 	ld.ub	r9,r7[-124]
800092b6:	3f f8       	mov	r8,-1
800092b8:	f0 09 18 00 	cp.b	r9,r8
800092bc:	c0 a1       	brne	800092d0 <write_bad_region_to_flash+0x4c>
	{
		switch(sel)
800092be:	ef 38 ff 88 	ld.ub	r8,r7[-120]
800092c2:	58 38       	cp.w	r8,3
800092c4:	c0 a1       	brne	800092d8 <write_bad_region_to_flash+0x54>
		{
			case 3: //usage minutes
				tmpIdx = mFlashIdx;
800092c6:	49 58       	lddpc	r8,80009318 <write_bad_region_to_flash+0x94>
800092c8:	70 08       	ld.w	r8,r8[0x0]
800092ca:	ef 68 ff ff 	st.b	r7[-1],r8
800092ce:	c0 58       	rjmp	800092d8 <write_bad_region_to_flash+0x54>
				break;
		}
	}
	else //use the specific index passed to this function
	{
		tmpIdx = idx;
800092d0:	ef 38 ff 84 	ld.ub	r8,r7[-124]
800092d4:	ef 68 ff ff 	st.b	r7[-1],r8
	}
	
	switch (sel)
800092d8:	ef 38 ff 88 	ld.ub	r8,r7[-120]
800092dc:	58 38       	cp.w	r8,3
800092de:	c1 81       	brne	8000930e <write_bad_region_to_flash+0x8a>
	{
		case 3: //usage minutes
			flashOffset = tmpIdx * 128 * NUM_USAGE_MINS_BUFS_PER_SECTOR;
800092e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800092e4:	a7 78       	lsl	r8,0x7
800092e6:	ef 48 ff f8 	st.w	r7[-8],r8
			tmpFlashOffset = flashOffset + (unsigned long) usageMinutesFlash;
800092ea:	48 d8       	lddpc	r8,8000931c <write_bad_region_to_flash+0x98>
800092ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800092f0:	f2 08 00 08 	add	r8,r9,r8
800092f4:	ef 48 ff f4 	st.w	r7[-12],r8
			flashc_memcpy((volatile void*)tmpFlashOffset, &tmpM, sizeof(m), false); //don't erase, it would just cause the flash to wear out twice as fast
800092f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800092fc:	ee cb 00 74 	sub	r11,r7,116
80009300:	30 09       	mov	r9,0
80009302:	36 8a       	mov	r10,104
80009304:	10 9c       	mov	r12,r8
80009306:	f0 1f 00 07 	mcall	80009320 <write_bad_region_to_flash+0x9c>
8000930a:	c0 28       	rjmp	8000930e <write_bad_region_to_flash+0x8a>
	
	memset(&tmpM, 0x00, sizeof(m)); //just zero it out and don't give it a good checksum
	
	if (sel != 3)
	{
		return; //we only do this for the minutes region
8000930c:	d7 03       	nop
			tmpFlashOffset = flashOffset + (unsigned long) usageMinutesFlash;
			flashc_memcpy((volatile void*)tmpFlashOffset, &tmpM, sizeof(m), false); //don't erase, it would just cause the flash to wear out twice as fast
			break;
	}
	
}
8000930e:	2e 1d       	sub	sp,-124
80009310:	e3 cd 80 80 	ldm	sp++,r7,pc
80009314:	80 00       	ld.sh	r0,r0[0x0]
80009316:	cc 3e       	rcall	8000909c <write_region_to_flash+0x10>
80009318:	00 00       	add	r0,r0
8000931a:	07 c8       	ld.ub	r8,r3[0x4]
8000931c:	80 07       	ld.sh	r7,r0[0x0]
8000931e:	bb 00       	ld.d	r0,sp
80009320:	80 00       	ld.sh	r0,r0[0x0]
80009322:	43 84       	lddsp	r4,sp[0xe0]

80009324 <copy_region_to_another_sector>:


void copy_region_to_another_sector(unsigned char sel);
void copy_region_to_another_sector(unsigned char sel)
{
80009324:	eb cd 40 80 	pushm	r7,lr
80009328:	1a 97       	mov	r7,sp
8000932a:	20 2d       	sub	sp,8
8000932c:	18 98       	mov	r8,r12
8000932e:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char tmpIdx, csum;
	
	switch (sel)
80009332:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009336:	58 28       	cp.w	r8,2
80009338:	c5 10       	breq	800093da <copy_region_to_another_sector+0xb6>
8000933a:	e0 89 00 07 	brgt	80009348 <copy_region_to_another_sector+0x24>
8000933e:	58 08       	cp.w	r8,0
80009340:	c0 a0       	breq	80009354 <copy_region_to_another_sector+0x30>
80009342:	58 18       	cp.w	r8,1
80009344:	c2 90       	breq	80009396 <copy_region_to_another_sector+0x72>
80009346:	cb 38       	rjmp	800094ac <copy_region_to_another_sector+0x188>
80009348:	58 38       	cp.w	r8,3
8000934a:	c6 90       	breq	8000941c <copy_region_to_another_sector+0xf8>
8000934c:	58 48       	cp.w	r8,4
8000934e:	e0 80 00 8f 	breq	8000946c <copy_region_to_another_sector+0x148>
80009352:	ca d8       	rjmp	800094ac <copy_region_to_another_sector+0x188>
	{
		case 0: //serial ID and flags
			if (sfFlashIdx < ((NUM_SERIAL_ID_BUFS_SECTORS/NUM_SERIAL_ID_SECTORS_PER_BUF)/2))
80009354:	4d 88       	lddpc	r8,800094b4 <copy_region_to_another_sector+0x190>
80009356:	70 08       	ld.w	r8,r8[0x0]
80009358:	58 08       	cp.w	r8,0
8000935a:	c0 81       	brne	8000936a <copy_region_to_another_sector+0x46>
			{
				tmpIdx = sfFlashIdx + ((NUM_SERIAL_ID_BUFS_SECTORS/NUM_SERIAL_ID_SECTORS_PER_BUF)/2);
8000935c:	4d 68       	lddpc	r8,800094b4 <copy_region_to_another_sector+0x190>
8000935e:	70 08       	ld.w	r8,r8[0x0]
80009360:	5c 58       	castu.b	r8
80009362:	2f f8       	sub	r8,-1
80009364:	ef 68 ff fe 	st.b	r7[-2],r8
80009368:	c0 78       	rjmp	80009376 <copy_region_to_another_sector+0x52>
			}
			else
			{
				tmpIdx = sfFlashIdx - ((NUM_SERIAL_ID_BUFS_SECTORS/NUM_SERIAL_ID_SECTORS_PER_BUF)/2);
8000936a:	4d 38       	lddpc	r8,800094b4 <copy_region_to_another_sector+0x190>
8000936c:	70 08       	ld.w	r8,r8[0x0]
8000936e:	5c 58       	castu.b	r8
80009370:	20 18       	sub	r8,1
80009372:	ef 68 ff fe 	st.b	r7[-2],r8
			}
			
			csum = calc_region_checksum(0);
80009376:	30 0c       	mov	r12,0
80009378:	f0 1f 00 50 	mcall	800094b8 <copy_region_to_another_sector+0x194>
8000937c:	18 98       	mov	r8,r12
8000937e:	ef 68 ff ff 	st.b	r7[-1],r8
			write_region_to_flash(0, tmpIdx, csum);
80009382:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009386:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000938a:	12 9a       	mov	r10,r9
8000938c:	10 9b       	mov	r11,r8
8000938e:	30 0c       	mov	r12,0
80009390:	f0 1f 00 4b 	mcall	800094bc <copy_region_to_another_sector+0x198>
			break;
80009394:	c8 c8       	rjmp	800094ac <copy_region_to_another_sector+0x188>

		case 1: //san cycles
			if (sanCycleFlashIdx < ((NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS)/2))
80009396:	4c b8       	lddpc	r8,800094c0 <copy_region_to_another_sector+0x19c>
80009398:	70 08       	ld.w	r8,r8[0x0]
8000939a:	58 28       	cp.w	r8,2
8000939c:	e0 8b 00 09 	brhi	800093ae <copy_region_to_another_sector+0x8a>
			{
				tmpIdx = sanCycleFlashIdx + ((NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS)/2);
800093a0:	4c 88       	lddpc	r8,800094c0 <copy_region_to_another_sector+0x19c>
800093a2:	70 08       	ld.w	r8,r8[0x0]
800093a4:	5c 58       	castu.b	r8
800093a6:	2f d8       	sub	r8,-3
800093a8:	ef 68 ff fe 	st.b	r7[-2],r8
800093ac:	c0 78       	rjmp	800093ba <copy_region_to_another_sector+0x96>
			}
			else
			{
				tmpIdx = sanCycleFlashIdx - ((NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS)/2);
800093ae:	4c 58       	lddpc	r8,800094c0 <copy_region_to_another_sector+0x19c>
800093b0:	70 08       	ld.w	r8,r8[0x0]
800093b2:	5c 58       	castu.b	r8
800093b4:	20 38       	sub	r8,3
800093b6:	ef 68 ff fe 	st.b	r7[-2],r8
			}
			csum = calc_region_checksum(1);
800093ba:	30 1c       	mov	r12,1
800093bc:	f0 1f 00 3f 	mcall	800094b8 <copy_region_to_another_sector+0x194>
800093c0:	18 98       	mov	r8,r12
800093c2:	ef 68 ff ff 	st.b	r7[-1],r8
			write_region_to_flash(1, tmpIdx, csum);
800093c6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800093ca:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800093ce:	12 9a       	mov	r10,r9
800093d0:	10 9b       	mov	r11,r8
800093d2:	30 1c       	mov	r12,1
800093d4:	f0 1f 00 3a 	mcall	800094bc <copy_region_to_another_sector+0x198>
			break;
800093d8:	c6 a8       	rjmp	800094ac <copy_region_to_another_sector+0x188>

		case 2: //usage hours
			if (hFlashIdx < ((NUM_USAGE_HOURS_BUFS_SECTORS/NUM_USAGE_HOURS_SECTORS_PER_BUF)/2))
800093da:	4b b8       	lddpc	r8,800094c4 <copy_region_to_another_sector+0x1a0>
800093dc:	70 08       	ld.w	r8,r8[0x0]
800093de:	58 08       	cp.w	r8,0
800093e0:	c0 81       	brne	800093f0 <copy_region_to_another_sector+0xcc>
			{
				tmpIdx = hFlashIdx + ((NUM_USAGE_HOURS_BUFS_SECTORS/NUM_USAGE_HOURS_SECTORS_PER_BUF)/2);
800093e2:	4b 98       	lddpc	r8,800094c4 <copy_region_to_another_sector+0x1a0>
800093e4:	70 08       	ld.w	r8,r8[0x0]
800093e6:	5c 58       	castu.b	r8
800093e8:	2f f8       	sub	r8,-1
800093ea:	ef 68 ff fe 	st.b	r7[-2],r8
800093ee:	c0 78       	rjmp	800093fc <copy_region_to_another_sector+0xd8>
			}
			else
			{
				tmpIdx = hFlashIdx - ((NUM_USAGE_HOURS_BUFS_SECTORS/NUM_USAGE_HOURS_SECTORS_PER_BUF)/2);
800093f0:	4b 58       	lddpc	r8,800094c4 <copy_region_to_another_sector+0x1a0>
800093f2:	70 08       	ld.w	r8,r8[0x0]
800093f4:	5c 58       	castu.b	r8
800093f6:	20 18       	sub	r8,1
800093f8:	ef 68 ff fe 	st.b	r7[-2],r8
			}
			csum = calc_region_checksum(2);
800093fc:	30 2c       	mov	r12,2
800093fe:	f0 1f 00 2f 	mcall	800094b8 <copy_region_to_another_sector+0x194>
80009402:	18 98       	mov	r8,r12
80009404:	ef 68 ff ff 	st.b	r7[-1],r8
			write_region_to_flash(2, tmpIdx, csum);
80009408:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000940c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80009410:	12 9a       	mov	r10,r9
80009412:	10 9b       	mov	r11,r8
80009414:	30 2c       	mov	r12,2
80009416:	f0 1f 00 2a 	mcall	800094bc <copy_region_to_another_sector+0x198>
			break;
8000941a:	c4 98       	rjmp	800094ac <copy_region_to_another_sector+0x188>

		case 3: //usage minutes
			tmpIdx = mFlashIdx + (NUM_USAGE_MINS_BUFS_SECTORS/2);
8000941c:	4a b8       	lddpc	r8,800094c8 <copy_region_to_another_sector+0x1a4>
8000941e:	70 08       	ld.w	r8,r8[0x0]
80009420:	5c 58       	castu.b	r8
80009422:	2c 68       	sub	r8,-58
80009424:	ef 68 ff fe 	st.b	r7[-2],r8
			if (tmpIdx < (NUM_USAGE_MINS_BUFS_SECTORS/2))
80009428:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000942c:	33 98       	mov	r8,57
8000942e:	f0 09 18 00 	cp.b	r9,r8
80009432:	e0 8b 00 08 	brhi	80009442 <copy_region_to_another_sector+0x11e>
			{
				tmpIdx += (NUM_USAGE_MINS_BUFS_SECTORS/2); //wrap if necessary
80009436:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000943a:	2c 68       	sub	r8,-58
8000943c:	ef 68 ff fe 	st.b	r7[-2],r8
80009440:	c0 68       	rjmp	8000944c <copy_region_to_another_sector+0x128>
			}
			else
			{
				tmpIdx -= (NUM_USAGE_MINS_BUFS_SECTORS/2); //wrap if necessary
80009442:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80009446:	23 a8       	sub	r8,58
80009448:	ef 68 ff fe 	st.b	r7[-2],r8
			}
			csum = calc_region_checksum(3);
8000944c:	30 3c       	mov	r12,3
8000944e:	f0 1f 00 1b 	mcall	800094b8 <copy_region_to_another_sector+0x194>
80009452:	18 98       	mov	r8,r12
80009454:	ef 68 ff ff 	st.b	r7[-1],r8
			write_region_to_flash(3, tmpIdx, csum);
80009458:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000945c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80009460:	12 9a       	mov	r10,r9
80009462:	10 9b       	mov	r11,r8
80009464:	30 3c       	mov	r12,3
80009466:	f0 1f 00 16 	mcall	800094bc <copy_region_to_another_sector+0x198>
			break;
8000946a:	c2 18       	rjmp	800094ac <copy_region_to_another_sector+0x188>

		case 4: //configuration
			if (configFlashIdx < ((NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS)/2))
8000946c:	49 88       	lddpc	r8,800094cc <copy_region_to_another_sector+0x1a8>
8000946e:	70 08       	ld.w	r8,r8[0x0]
80009470:	58 08       	cp.w	r8,0
80009472:	c0 81       	brne	80009482 <copy_region_to_another_sector+0x15e>
			{
				tmpIdx = configFlashIdx + ((NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS)/2);
80009474:	49 68       	lddpc	r8,800094cc <copy_region_to_another_sector+0x1a8>
80009476:	70 08       	ld.w	r8,r8[0x0]
80009478:	5c 58       	castu.b	r8
8000947a:	2f f8       	sub	r8,-1
8000947c:	ef 68 ff fe 	st.b	r7[-2],r8
80009480:	c0 78       	rjmp	8000948e <copy_region_to_another_sector+0x16a>
			}
			else
			{
				tmpIdx = configFlashIdx - ((NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS)/2);
80009482:	49 38       	lddpc	r8,800094cc <copy_region_to_another_sector+0x1a8>
80009484:	70 08       	ld.w	r8,r8[0x0]
80009486:	5c 58       	castu.b	r8
80009488:	20 18       	sub	r8,1
8000948a:	ef 68 ff fe 	st.b	r7[-2],r8
			}
			csum = calc_region_checksum(4);
8000948e:	30 4c       	mov	r12,4
80009490:	f0 1f 00 0a 	mcall	800094b8 <copy_region_to_another_sector+0x194>
80009494:	18 98       	mov	r8,r12
80009496:	ef 68 ff ff 	st.b	r7[-1],r8
			write_region_to_flash(4, tmpIdx, csum);
8000949a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000949e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800094a2:	12 9a       	mov	r10,r9
800094a4:	10 9b       	mov	r11,r8
800094a6:	30 4c       	mov	r12,4
800094a8:	f0 1f 00 05 	mcall	800094bc <copy_region_to_another_sector+0x198>
			break;
	}
	
}
800094ac:	2f ed       	sub	sp,-8
800094ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800094b2:	00 00       	add	r0,r0
800094b4:	00 00       	add	r0,r0
800094b6:	07 bc       	ld.ub	r12,r3[0x3]
800094b8:	80 00       	ld.sh	r0,r0[0x0]
800094ba:	87 94       	st.w	r3[0x24],r4
800094bc:	80 00       	ld.sh	r0,r0[0x0]
800094be:	90 8c       	ld.uh	r12,r8[0x0]
800094c0:	00 00       	add	r0,r0
800094c2:	07 c0       	ld.ub	r0,r3[0x4]
800094c4:	00 00       	add	r0,r0
800094c6:	07 c4       	ld.ub	r4,r3[0x4]
800094c8:	00 00       	add	r0,r0
800094ca:	07 c8       	ld.ub	r8,r3[0x4]
800094cc:	00 00       	add	r0,r0
800094ce:	07 cc       	ld.ub	r12,r3[0x4]

800094d0 <disrupt_prior_m_sector>:
 * determining the optimum minutes sector (picking the highest value) so we have to do something to disrupt prior
 * entries which is intentionally write a bad checksum to flash. 
 */
void disrupt_prior_m_sector(void);
void disrupt_prior_m_sector(void)
{
800094d0:	eb cd 40 80 	pushm	r7,lr
800094d4:	1a 97       	mov	r7,sp
800094d6:	20 1d       	sub	sp,4
	unsigned char tmpIdx;

	if (mFlashIdx > 0)
800094d8:	48 c8       	lddpc	r8,80009508 <disrupt_prior_m_sector+0x38>
800094da:	70 08       	ld.w	r8,r8[0x0]
800094dc:	58 08       	cp.w	r8,0
800094de:	c0 80       	breq	800094ee <disrupt_prior_m_sector+0x1e>
	{
		tmpIdx = mFlashIdx - 1;
800094e0:	48 a8       	lddpc	r8,80009508 <disrupt_prior_m_sector+0x38>
800094e2:	70 08       	ld.w	r8,r8[0x0]
800094e4:	5c 58       	castu.b	r8
800094e6:	20 18       	sub	r8,1
800094e8:	ef 68 ff ff 	st.b	r7[-1],r8
800094ec:	c0 48       	rjmp	800094f4 <disrupt_prior_m_sector+0x24>
	}
	else
	{
		tmpIdx = NUM_USAGE_MINS_BUFS_SECTORS - 1; //backwards wrap if necessary
800094ee:	37 38       	mov	r8,115
800094f0:	ef 68 ff ff 	st.b	r7[-1],r8
	}

	write_bad_region_to_flash(3, tmpIdx);
800094f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800094f8:	10 9b       	mov	r11,r8
800094fa:	30 3c       	mov	r12,3
800094fc:	f0 1f 00 04 	mcall	8000950c <disrupt_prior_m_sector+0x3c>
	
}
80009500:	2f fd       	sub	sp,-4
80009502:	e3 cd 80 80 	ldm	sp++,r7,pc
80009506:	00 00       	add	r0,r0
80009508:	00 00       	add	r0,r0
8000950a:	07 c8       	ld.ub	r8,r3[0x4]
8000950c:	80 00       	ld.sh	r0,r0[0x0]
8000950e:	92 84       	ld.uh	r4,r9[0x0]

80009510 <find_first_open_usage_slot>:
unsigned char find_first_open_usage_slot(unsigned char sel)
#else
unsigned char find_first_open_usage_slot(void);
unsigned char find_first_open_usage_slot(void)
#endif
{
80009510:	eb cd 40 80 	pushm	r7,lr
80009514:	1a 97       	mov	r7,sp
80009516:	20 1d       	sub	sp,4
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80009518:	30 08       	mov	r8,0
8000951a:	ef 48 ff fc 	st.w	r7[-4],r8
8000951e:	c1 58       	rjmp	80009548 <find_first_open_usage_slot+0x38>
	{
		
#ifdef SERIAL_ID_AND_ALL_USAGE_COMBINED		
		if (!usageShdw[sel].u[i].slotFilled)
#else
		if (!sf[i].slotFilled)
80009520:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009524:	49 48       	lddpc	r8,80009574 <find_first_open_usage_slot+0x64>
80009526:	a1 79       	lsl	r9,0x1
80009528:	2f f9       	sub	r9,-1
8000952a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000952e:	f1 d8 c1 a1 	bfextu	r8,r8,0xd,0x1
80009532:	5c 58       	castu.b	r8
80009534:	c0 51       	brne	8000953e <find_first_open_usage_slot+0x2e>
#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED
		{
			return i;
80009536:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000953a:	5c 58       	castu.b	r8
8000953c:	c1 88       	rjmp	8000956c <find_first_open_usage_slot+0x5c>
#else
unsigned char find_first_open_usage_slot(void);
unsigned char find_first_open_usage_slot(void)
#endif
{
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
8000953e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009542:	2f f8       	sub	r8,-1
80009544:	ef 48 ff fc 	st.w	r7[-4],r8
80009548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000954c:	e0 48 00 5f 	cp.w	r8,95
80009550:	fe 98 ff e8 	brls	80009520 <find_first_open_usage_slot+0x10>
		{
			return i;
		}
	}
	
	print_ecdbg("No more room for LED board info. Cannot track minute usage for additional boards.\r\n");
80009554:	48 9c       	lddpc	r12,80009578 <find_first_open_usage_slot+0x68>
80009556:	f0 1f 00 0a 	mcall	8000957c <find_first_open_usage_slot+0x6c>
	
	sysErr.usageStructsFull = FAIL;
8000955a:	48 a9       	lddpc	r9,80009580 <find_first_open_usage_slot+0x70>
8000955c:	30 18       	mov	r8,1
8000955e:	f3 68 00 0e 	st.b	r9[14],r8
	electroclaveState = STATE_CHASSIS_ERROR;
80009562:	48 99       	lddpc	r9,80009584 <find_first_open_usage_slot+0x74>
80009564:	30 88       	mov	r8,8
80009566:	b2 88       	st.b	r9[0x0],r8

	
	return USAGE_FULL; //Error, no open slots
80009568:	e0 68 00 ff 	mov	r8,255
}
8000956c:	10 9c       	mov	r12,r8
8000956e:	2f fd       	sub	sp,-4
80009570:	e3 cd 80 80 	ldm	sp++,r7,pc
80009574:	00 00       	add	r0,r0
80009576:	08 48       	or	r8,r4
80009578:	80 00       	ld.sh	r0,r0[0x0]
8000957a:	67 d8       	ld.w	r8,r3[0x74]
8000957c:	80 00       	ld.sh	r0,r0[0x0]
8000957e:	33 38       	mov	r8,51
80009580:	00 00       	add	r0,r0
80009582:	0b d4       	ld.ub	r4,r5[0x5]
80009584:	00 00       	add	r0,r0
80009586:	07 b8       	ld.ub	r8,r3[0x3]

80009588 <add_new_led_board_sides_to_usage>:
#if 0 //SERIAL_ID_AND_ALL_USAGE_COMBINED
void add_new_led_board_sides_to_usage(unsigned char sel)
#endif
void add_new_led_board_sides_to_usage(void)

{
80009588:	eb cd 40 80 	pushm	r7,lr
8000958c:	1a 97       	mov	r7,sp
8000958e:	20 2d       	sub	sp,8
			usageShdw[sel].u[slotAssignment].slotFilled = 1;

			usageIdx[sel][i] = slotAssignment++;
#else

	firstOpenSlot = find_first_open_usage_slot();
80009590:	f0 1f 00 43 	mcall	8000969c <add_new_led_board_sides_to_usage+0x114>
80009594:	18 98       	mov	r8,r12
80009596:	ef 68 ff fb 	st.b	r7[-5],r8
	
	slotAssignment = firstOpenSlot;
8000959a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000959e:	ef 68 ff fc 	st.b	r7[-4],r8
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
800095a2:	30 08       	mov	r8,0
800095a4:	ef 68 ff ff 	st.b	r7[-1],r8
800095a8:	c7 08       	rjmp	80009688 <add_new_led_board_sides_to_usage+0x100>
	{
		brdIdx = ledBrdSide[i].boardIdx;
800095aa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800095ae:	4b da       	lddpc	r10,800096a0 <add_new_led_board_sides_to_usage+0x118>
800095b0:	12 98       	mov	r8,r9
800095b2:	a3 68       	lsl	r8,0x2
800095b4:	12 08       	add	r8,r9
800095b6:	f4 08 00 08 	add	r8,r10,r8
800095ba:	2f c8       	sub	r8,-4
800095bc:	11 88       	ld.ub	r8,r8[0x0]
800095be:	ef 68 ff fd 	st.b	r7[-3],r8
		
		top_botn = (i%2) ? TOP : BOTTOM; //odd sides are top, even sides are bottom
800095c2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800095c6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800095ca:	ef 68 ff fe 	st.b	r7[-2],r8
		
		if ((ledBrd[brdIdx].present) && (usageIdx[i] == NO_LED_BOARD_PRESENT)) //TODO: do I need the NO_LED_BOARD_PRESENT check? this should always be open at this point
800095ce:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800095d2:	4b 5a       	lddpc	r10,800096a4 <add_new_led_board_sides_to_usage+0x11c>
800095d4:	12 98       	mov	r8,r9
800095d6:	a3 78       	lsl	r8,0x3
800095d8:	12 18       	sub	r8,r9
800095da:	a1 78       	lsl	r8,0x1
800095dc:	f4 08 00 08 	add	r8,r10,r8
800095e0:	2f 88       	sub	r8,-8
800095e2:	11 88       	ld.ub	r8,r8[0x0]
800095e4:	58 08       	cp.w	r8,0
800095e6:	c4 c0       	breq	8000967e <add_new_led_board_sides_to_usage+0xf6>
800095e8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800095ec:	4a f9       	lddpc	r9,800096a8 <add_new_led_board_sides_to_usage+0x120>
800095ee:	f2 08 07 09 	ld.ub	r9,r9[r8]
800095f2:	3f f8       	mov	r8,-1
800095f4:	f0 09 18 00 	cp.b	r9,r8
800095f8:	c4 31       	brne	8000967e <add_new_led_board_sides_to_usage+0xf6>
		{
			strncpy((char*)&sf[slotAssignment].id[0], (char*)&ledBrd[brdIdx].id[0],6);
800095fa:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800095fe:	12 98       	mov	r8,r9
80009600:	a3 78       	lsl	r8,0x3
80009602:	12 18       	sub	r8,r9
80009604:	a1 78       	lsl	r8,0x1
80009606:	4a 89       	lddpc	r9,800096a4 <add_new_led_board_sides_to_usage+0x11c>
80009608:	12 08       	add	r8,r9
8000960a:	f0 c9 ff ff 	sub	r9,r8,-1
8000960e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009612:	f0 0a 15 03 	lsl	r10,r8,0x3
80009616:	4a 68       	lddpc	r8,800096ac <add_new_led_board_sides_to_usage+0x124>
80009618:	f4 08 00 08 	add	r8,r10,r8
8000961c:	30 6a       	mov	r10,6
8000961e:	12 9b       	mov	r11,r9
80009620:	10 9c       	mov	r12,r8
80009622:	f0 1f 00 24 	mcall	800096b0 <add_new_led_board_sides_to_usage+0x128>
			
			sf[slotAssignment].top_botn = top_botn;
80009626:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000962a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000962e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009632:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80009636:	49 e9       	lddpc	r9,800096ac <add_new_led_board_sides_to_usage+0x124>
80009638:	f4 08 15 01 	lsl	r8,r10,0x1
8000963c:	f0 ca ff ff 	sub	r10,r8,-1
80009640:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80009644:	f1 db d1 e1 	bfins	r8,r11,0xf,0x1
80009648:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
			
			sf[slotAssignment].slotFilled = 1;
8000964c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009650:	49 79       	lddpc	r9,800096ac <add_new_led_board_sides_to_usage+0x124>
80009652:	a1 78       	lsl	r8,0x1
80009654:	f0 ca ff ff 	sub	r10,r8,-1
80009658:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
8000965c:	30 1b       	mov	r11,1
8000965e:	f1 db d1 a1 	bfins	r8,r11,0xd,0x1
80009662:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8

			usageIdx[i] = slotAssignment++;
80009666:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000966a:	49 0a       	lddpc	r10,800096a8 <add_new_led_board_sides_to_usage+0x120>
8000966c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009670:	f4 09 0b 08 	st.b	r10[r9],r8
80009674:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009678:	2f f8       	sub	r8,-1
8000967a:	ef 68 ff fc 	st.b	r7[-4],r8

	firstOpenSlot = find_first_open_usage_slot();
	
	slotAssignment = firstOpenSlot;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
8000967e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009682:	2f f8       	sub	r8,-1
80009684:	ef 68 ff ff 	st.b	r7[-1],r8
80009688:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000968c:	30 78       	mov	r8,7
8000968e:	f0 09 18 00 	cp.b	r9,r8
80009692:	fe 98 ff 8c 	brls	800095aa <add_new_led_board_sides_to_usage+0x22>
			usageIdx[i] = slotAssignment++;

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED			
		}
	}
}
80009696:	2f ed       	sub	sp,-8
80009698:	e3 cd 80 80 	ldm	sp++,r7,pc
8000969c:	80 00       	ld.sh	r0,r0[0x0]
8000969e:	95 10       	st.w	r10[0x4],r0
800096a0:	00 00       	add	r0,r0
800096a2:	0b fe       	ld.ub	lr,r5[0x7]
800096a4:	00 00       	add	r0,r0
800096a6:	0b 4a       	ld.w	r10,--r5
800096a8:	00 00       	add	r0,r0
800096aa:	0b c0       	ld.ub	r0,r5[0x4]
800096ac:	00 00       	add	r0,r0
800096ae:	08 48       	or	r8,r4
800096b0:	80 00       	ld.sh	r0,r0[0x0]
800096b2:	cc a4       	brge	80009646 <add_new_led_board_sides_to_usage+0xbe>

800096b4 <inc_sanMins>:

#else

void inc_sanMins(void);
void inc_sanMins(void)
{
800096b4:	eb cd 40 80 	pushm	r7,lr
800096b8:	1a 97       	mov	r7,sp
	m.sanMins++;
800096ba:	48 58       	lddpc	r8,800096cc <inc_sanMins+0x18>
800096bc:	71 88       	ld.w	r8,r8[0x60]
800096be:	f0 c9 ff ff 	sub	r9,r8,-1
800096c2:	48 38       	lddpc	r8,800096cc <inc_sanMins+0x18>
800096c4:	f1 49 00 60 	st.w	r8[96],r9
	
	//the rest of the update of the struct, calc'ing the csum, writing to flash etc will happen when the usage minutes get updated
}
800096c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800096cc:	00 00       	add	r0,r0
800096ce:	0d 08       	ld.w	r8,r6++

800096d0 <inc_sanCycles>:

void inc_sanCycles(void);
void inc_sanCycles(void)
{
800096d0:	eb cd 40 80 	pushm	r7,lr
800096d4:	1a 97       	mov	r7,sp
	sanc.cycles++;
800096d6:	49 a8       	lddpc	r8,8000973c <inc_sanCycles+0x6c>
800096d8:	70 08       	ld.w	r8,r8[0x0]
800096da:	f1 d8 c1 94 	bfextu	r8,r8,0xc,0x14
800096de:	f0 c9 ff ff 	sub	r9,r8,-1
800096e2:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800096e6:	49 6a       	lddpc	r10,8000973c <inc_sanCycles+0x6c>
800096e8:	74 08       	ld.w	r8,r10[0x0]
800096ea:	f1 d9 d1 94 	bfins	r8,r9,0xc,0x14
800096ee:	95 08       	st.w	r10[0x0],r8
	sanCycleFlashIdx++;
800096f0:	49 48       	lddpc	r8,80009740 <inc_sanCycles+0x70>
800096f2:	70 08       	ld.w	r8,r8[0x0]
800096f4:	f0 c9 ff ff 	sub	r9,r8,-1
800096f8:	49 28       	lddpc	r8,80009740 <inc_sanCycles+0x70>
800096fa:	91 09       	st.w	r8[0x0],r9
	if (sanCycleFlashIdx >= (NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS))
800096fc:	49 18       	lddpc	r8,80009740 <inc_sanCycles+0x70>
800096fe:	70 08       	ld.w	r8,r8[0x0]
80009700:	58 58       	cp.w	r8,5
80009702:	e0 88 00 05 	brls	8000970c <inc_sanCycles+0x3c>
	{
		sanCycleFlashIdx = 0;
80009706:	48 f8       	lddpc	r8,80009740 <inc_sanCycles+0x70>
80009708:	30 09       	mov	r9,0
8000970a:	91 09       	st.w	r8[0x0],r9
	}
	sanc.csum = calc_region_checksum(1);
8000970c:	30 1c       	mov	r12,1
8000970e:	f0 1f 00 0e 	mcall	80009744 <inc_sanCycles+0x74>
80009712:	18 98       	mov	r8,r12
80009714:	10 9a       	mov	r10,r8
80009716:	48 a9       	lddpc	r9,8000973c <inc_sanCycles+0x6c>
80009718:	72 08       	ld.w	r8,r9[0x0]
8000971a:	f1 da d0 88 	bfins	r8,r10,0x4,0x8
8000971e:	93 08       	st.w	r9[0x0],r8
	write_region_to_flash(1, 0xFF, sanc.csum);
80009720:	48 78       	lddpc	r8,8000973c <inc_sanCycles+0x6c>
80009722:	70 08       	ld.w	r8,r8[0x0]
80009724:	f1 d8 c0 88 	bfextu	r8,r8,0x4,0x8
80009728:	5c 58       	castu.b	r8
8000972a:	10 9a       	mov	r10,r8
8000972c:	e0 6b 00 ff 	mov	r11,255
80009730:	30 1c       	mov	r12,1
80009732:	f0 1f 00 06 	mcall	80009748 <inc_sanCycles+0x78>
}
80009736:	e3 cd 80 80 	ldm	sp++,r7,pc
8000973a:	00 00       	add	r0,r0
8000973c:	00 00       	add	r0,r0
8000973e:	0c 28       	rsub	r8,r6
80009740:	00 00       	add	r0,r0
80009742:	07 c0       	ld.ub	r0,r3[0x4]
80009744:	80 00       	ld.sh	r0,r0[0x0]
80009746:	87 94       	st.w	r3[0x24],r4
80009748:	80 00       	ld.sh	r0,r0[0x0]
8000974a:	90 8c       	ld.uh	r12,r8[0x0]

8000974c <store_config>:

void store_config(void);
void store_config(void)
{
8000974c:	eb cd 40 80 	pushm	r7,lr
80009750:	1a 97       	mov	r7,sp
	/* initialDTE set in the serial user interface */
	configFlashIdx++;
80009752:	49 08       	lddpc	r8,80009790 <store_config+0x44>
80009754:	70 08       	ld.w	r8,r8[0x0]
80009756:	f0 c9 ff ff 	sub	r9,r8,-1
8000975a:	48 e8       	lddpc	r8,80009790 <store_config+0x44>
8000975c:	91 09       	st.w	r8[0x0],r9
	if (configFlashIdx >= (NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS))
8000975e:	48 d8       	lddpc	r8,80009790 <store_config+0x44>
80009760:	70 08       	ld.w	r8,r8[0x0]
80009762:	58 18       	cp.w	r8,1
80009764:	e0 88 00 05 	brls	8000976e <store_config+0x22>
	{
		configFlashIdx = 0;
80009768:	48 a8       	lddpc	r8,80009790 <store_config+0x44>
8000976a:	30 09       	mov	r9,0
8000976c:	91 09       	st.w	r8[0x0],r9
	}
	c.csum = calc_region_checksum(4);
8000976e:	30 4c       	mov	r12,4
80009770:	f0 1f 00 09 	mcall	80009794 <store_config+0x48>
80009774:	18 98       	mov	r8,r12
80009776:	48 99       	lddpc	r9,80009798 <store_config+0x4c>
80009778:	b2 98       	st.b	r9[0x1],r8
	write_region_to_flash(4, 0xFF, c.csum);
8000977a:	48 88       	lddpc	r8,80009798 <store_config+0x4c>
8000977c:	11 98       	ld.ub	r8,r8[0x1]
8000977e:	10 9a       	mov	r10,r8
80009780:	e0 6b 00 ff 	mov	r11,255
80009784:	30 4c       	mov	r12,4
80009786:	f0 1f 00 06 	mcall	8000979c <store_config+0x50>
}
8000978a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000978e:	00 00       	add	r0,r0
80009790:	00 00       	add	r0,r0
80009792:	07 cc       	ld.ub	r12,r3[0x4]
80009794:	80 00       	ld.sh	r0,r0[0x0]
80009796:	87 94       	st.w	r3[0x24],r4
80009798:	00 00       	add	r0,r0
8000979a:	0b fc       	ld.ub	r12,r5[0x7]
8000979c:	80 00       	ld.sh	r0,r0[0x0]
8000979e:	90 8c       	ld.uh	r12,r8[0x0]

800097a0 <increment_ledBoard_usage_min>:

void increment_ledBoard_usage_min(void)
{
800097a0:	eb cd 40 80 	pushm	r7,lr
800097a4:	1a 97       	mov	r7,sp
800097a6:	20 2d       	sub	sp,8
	unsigned char idx;
	unsigned char topLEDboardLowerSideIdx;
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	unsigned char hourRollover = 0;
800097a8:	30 08       	mov	r8,0
800097aa:	ef 68 ff fd 	st.b	r7[-3],r8
	
	inc_sanMins();
800097ae:	f0 1f 00 8d 	mcall	800099e0 <increment_ledBoard_usage_min+0x240>

	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
800097b2:	30 08       	mov	r8,0
800097b4:	ef 68 ff fe 	st.b	r7[-2],r8
800097b8:	cb f8       	rjmp	80009936 <increment_ledBoard_usage_min+0x196>
	{
		if (shelf[i].active == SHELF_ACTIVE)
800097ba:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800097be:	fe fa 02 26 	ld.w	r10,pc[550]
800097c2:	12 98       	mov	r8,r9
800097c4:	a3 68       	lsl	r8,0x2
800097c6:	12 08       	add	r8,r9
800097c8:	f4 08 00 08 	add	r8,r10,r8
800097cc:	11 89       	ld.ub	r9,r8[0x0]
800097ce:	30 18       	mov	r8,1
800097d0:	f0 09 18 00 	cp.b	r9,r8
800097d4:	e0 81 00 ac 	brne	8000992c <increment_ledBoard_usage_min+0x18c>
		{
			topLEDboardLowerSideIdx = ledBrd[shelf[i].tLedIdx].lSideIdx;
800097d8:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800097dc:	fe fa 02 08 	ld.w	r10,pc[520]
800097e0:	12 98       	mov	r8,r9
800097e2:	a3 68       	lsl	r8,0x2
800097e4:	12 08       	add	r8,r9
800097e6:	f4 08 00 08 	add	r8,r10,r8
800097ea:	2f f8       	sub	r8,-1
800097ec:	11 88       	ld.ub	r8,r8[0x0]
800097ee:	10 99       	mov	r9,r8
800097f0:	4f ea       	lddpc	r10,800099e8 <increment_ledBoard_usage_min+0x248>
800097f2:	12 98       	mov	r8,r9
800097f4:	a3 78       	lsl	r8,0x3
800097f6:	12 18       	sub	r8,r9
800097f8:	a1 78       	lsl	r8,0x1
800097fa:	f4 08 00 08 	add	r8,r10,r8
800097fe:	2f 58       	sub	r8,-11
80009800:	11 88       	ld.ub	r8,r8[0x0]
80009802:	ef 68 ff f9 	st.b	r7[-7],r8
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
80009806:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000980a:	4f 7a       	lddpc	r10,800099e4 <increment_ledBoard_usage_min+0x244>
8000980c:	12 98       	mov	r8,r9
8000980e:	a3 68       	lsl	r8,0x2
80009810:	12 08       	add	r8,r9
80009812:	f4 08 00 08 	add	r8,r10,r8
80009816:	2f e8       	sub	r8,-2
80009818:	11 88       	ld.ub	r8,r8[0x0]
8000981a:	10 99       	mov	r9,r8
8000981c:	4f 3a       	lddpc	r10,800099e8 <increment_ledBoard_usage_min+0x248>
8000981e:	12 98       	mov	r8,r9
80009820:	a3 78       	lsl	r8,0x3
80009822:	12 18       	sub	r8,r9
80009824:	a1 78       	lsl	r8,0x1
80009826:	f4 08 00 08 	add	r8,r10,r8
8000982a:	2f 68       	sub	r8,-10
8000982c:	11 88       	ld.ub	r8,r8[0x0]
8000982e:	ef 68 ff fa 	st.b	r7[-6],r8
			
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
80009832:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80009836:	4e ea       	lddpc	r10,800099ec <increment_ledBoard_usage_min+0x24c>
80009838:	12 98       	mov	r8,r9
8000983a:	a3 68       	lsl	r8,0x2
8000983c:	12 08       	add	r8,r9
8000983e:	f4 08 00 08 	add	r8,r10,r8
80009842:	2f f8       	sub	r8,-1
80009844:	11 88       	ld.ub	r8,r8[0x0]
80009846:	ef 68 ff fb 	st.b	r7[-5],r8
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
8000984a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000984e:	4e 8a       	lddpc	r10,800099ec <increment_ledBoard_usage_min+0x24c>
80009850:	12 98       	mov	r8,r9
80009852:	a3 68       	lsl	r8,0x2
80009854:	12 08       	add	r8,r9
80009856:	f4 08 00 08 	add	r8,r10,r8
8000985a:	2f f8       	sub	r8,-1
8000985c:	11 88       	ld.ub	r8,r8[0x0]
8000985e:	ef 68 ff fc 	st.b	r7[-4],r8
			
			for (unsigned char k=0; k<2; k++) //for each board side in the shelf
80009862:	30 08       	mov	r8,0
80009864:	ef 68 ff ff 	st.b	r7[-1],r8
80009868:	c5 b8       	rjmp	8000991e <increment_ledBoard_usage_min+0x17e>
			{
				switch (k)
8000986a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000986e:	58 08       	cp.w	r8,0
80009870:	c0 40       	breq	80009878 <increment_ledBoard_usage_min+0xd8>
80009872:	58 18       	cp.w	r8,1
80009874:	c0 70       	breq	80009882 <increment_ledBoard_usage_min+0xe2>
80009876:	c0 a8       	rjmp	8000988a <increment_ledBoard_usage_min+0xea>
				{
					case 0:
						idx = topUIdx;
80009878:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000987c:	ef 68 ff f8 	st.b	r7[-8],r8
						break;
80009880:	c0 58       	rjmp	8000988a <increment_ledBoard_usage_min+0xea>
					case 1:
						idx = bottomUIdx;
80009882:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009886:	ef 68 ff f8 	st.b	r7[-8],r8
						break;

				}

				m.mins[idx] = m.mins[idx] + 1;
8000988a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000988e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009892:	4d 8a       	lddpc	r10,800099f0 <increment_ledBoard_usage_min+0x250>
80009894:	f4 08 07 08 	ld.ub	r8,r10[r8]
80009898:	2f f8       	sub	r8,-1
8000989a:	5c 58       	castu.b	r8
8000989c:	4d 5a       	lddpc	r10,800099f0 <increment_ledBoard_usage_min+0x250>
8000989e:	f4 09 0b 08 	st.b	r10[r9],r8
				if (m.mins[idx] > 59)
800098a2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800098a6:	4d 39       	lddpc	r9,800099f0 <increment_ledBoard_usage_min+0x250>
800098a8:	f2 08 07 09 	ld.ub	r9,r9[r8]
800098ac:	33 b8       	mov	r8,59
800098ae:	f0 09 18 00 	cp.b	r9,r8
800098b2:	e0 88 00 31 	brls	80009914 <increment_ledBoard_usage_min+0x174>
				{
					m.mins[idx] = 0;
800098b6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800098ba:	4c ea       	lddpc	r10,800099f0 <increment_ledBoard_usage_min+0x250>
800098bc:	30 08       	mov	r8,0
800098be:	f4 09 0b 08 	st.b	r10[r9],r8
					hourRollover++; //count number of board sides that had hours rollover this pass for the current hourPingPong selection
800098c2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800098c6:	2f f8       	sub	r8,-1
800098c8:	ef 68 ff fd 	st.b	r7[-3],r8
					h.hrs[idx] = h.hrs[idx] + 1;
800098cc:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800098d0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800098d4:	4c 88       	lddpc	r8,800099f4 <increment_ledBoard_usage_min+0x254>
800098d6:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800098da:	2f f8       	sub	r8,-1
800098dc:	5c 88       	casts.h	r8
800098de:	4c 69       	lddpc	r9,800099f4 <increment_ledBoard_usage_min+0x254>
800098e0:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
						
					if ((h.hrs[idx]) >= 2000) //2000 hours * 60 minutes per hour
800098e4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800098e8:	4c 38       	lddpc	r8,800099f4 <increment_ledBoard_usage_min+0x254>
800098ea:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800098ee:	e0 68 07 cf 	mov	r8,1999
800098f2:	f0 09 19 00 	cp.h	r9,r8
800098f6:	e0 88 00 0f 	brls	80009914 <increment_ledBoard_usage_min+0x174>
					{
						sf[idx].maxUsageReached = 1; //And...we're done. Reached 2000 hours.
800098fa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800098fe:	4b f9       	lddpc	r9,800099f8 <increment_ledBoard_usage_min+0x258>
80009900:	a1 78       	lsl	r8,0x1
80009902:	f0 ca ff ff 	sub	r10,r8,-1
80009906:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
8000990a:	30 1b       	mov	r11,1
8000990c:	f1 db d1 c1 	bfins	r8,r11,0xe,0x1
80009910:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
			
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
			
			for (unsigned char k=0; k<2; k++) //for each board side in the shelf
80009914:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009918:	2f f8       	sub	r8,-1
8000991a:	ef 68 ff ff 	st.b	r7[-1],r8
8000991e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009922:	30 18       	mov	r8,1
80009924:	f0 09 18 00 	cp.b	r9,r8
80009928:	fe 98 ff a1 	brls	8000986a <increment_ledBoard_usage_min+0xca>
	unsigned char bottomUIdx;
	unsigned char hourRollover = 0;
	
	inc_sanMins();

	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
8000992c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80009930:	2f f8       	sub	r8,-1
80009932:	ef 68 ff fe 	st.b	r7[-2],r8
80009936:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000993a:	30 38       	mov	r8,3
8000993c:	f0 09 18 00 	cp.b	r9,r8
80009940:	fe 98 ff 3d 	brls	800097ba <increment_ledBoard_usage_min+0x1a>
				}//if ((minutes %60) == 0)
			} //for each board side in the shelf (k)
		} //if (shelf[i].active)
	} //for (i=0; i<NUM_SHELVES; i++)
	
	mFlashIdx++;
80009944:	4a e8       	lddpc	r8,800099fc <increment_ledBoard_usage_min+0x25c>
80009946:	70 08       	ld.w	r8,r8[0x0]
80009948:	f0 c9 ff ff 	sub	r9,r8,-1
8000994c:	4a c8       	lddpc	r8,800099fc <increment_ledBoard_usage_min+0x25c>
8000994e:	91 09       	st.w	r8[0x0],r9
	if (mFlashIdx >= NUM_USAGE_MINS_BUFS_SECTORS)
80009950:	4a b8       	lddpc	r8,800099fc <increment_ledBoard_usage_min+0x25c>
80009952:	70 08       	ld.w	r8,r8[0x0]
80009954:	e0 48 00 73 	cp.w	r8,115
80009958:	e0 88 00 05 	brls	80009962 <increment_ledBoard_usage_min+0x1c2>
	{
		mFlashIdx = 0;
8000995c:	4a 88       	lddpc	r8,800099fc <increment_ledBoard_usage_min+0x25c>
8000995e:	30 09       	mov	r9,0
80009960:	91 09       	st.w	r8[0x0],r9
	}
	m.csum = calc_region_checksum(3);
80009962:	30 3c       	mov	r12,3
80009964:	f0 1f 00 27 	mcall	80009a00 <increment_ledBoard_usage_min+0x260>
80009968:	18 98       	mov	r8,r12
8000996a:	4a 29       	lddpc	r9,800099f0 <increment_ledBoard_usage_min+0x250>
8000996c:	f3 68 00 64 	st.b	r9[100],r8
	write_region_to_flash(3, 0xFF, m.csum);
80009970:	4a 08       	lddpc	r8,800099f0 <increment_ledBoard_usage_min+0x250>
80009972:	f1 38 00 64 	ld.ub	r8,r8[100]
80009976:	10 9a       	mov	r10,r8
80009978:	e0 6b 00 ff 	mov	r11,255
8000997c:	30 3c       	mov	r12,3
8000997e:	f0 1f 00 22 	mcall	80009a04 <increment_ledBoard_usage_min+0x264>
	copy_region_to_another_sector(3);
80009982:	30 3c       	mov	r12,3
80009984:	f0 1f 00 21 	mcall	80009a08 <increment_ledBoard_usage_min+0x268>
	disrupt_prior_m_sector();
80009988:	f0 1f 00 21 	mcall	80009a0c <increment_ledBoard_usage_min+0x26c>

	if (hourRollover)
8000998c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009990:	30 08       	mov	r8,0
80009992:	f0 09 18 00 	cp.b	r9,r8
80009996:	c2 20       	breq	800099da <increment_ledBoard_usage_min+0x23a>
	{
		hFlashIdx++;
80009998:	49 e8       	lddpc	r8,80009a10 <increment_ledBoard_usage_min+0x270>
8000999a:	70 08       	ld.w	r8,r8[0x0]
8000999c:	f0 c9 ff ff 	sub	r9,r8,-1
800099a0:	49 c8       	lddpc	r8,80009a10 <increment_ledBoard_usage_min+0x270>
800099a2:	91 09       	st.w	r8[0x0],r9
		if (hFlashIdx >= (NUM_USAGE_HOURS_BUFS_SECTORS/NUM_USAGE_HOURS_SECTORS_PER_BUF))
800099a4:	49 b8       	lddpc	r8,80009a10 <increment_ledBoard_usage_min+0x270>
800099a6:	70 08       	ld.w	r8,r8[0x0]
800099a8:	58 18       	cp.w	r8,1
800099aa:	e0 88 00 05 	brls	800099b4 <increment_ledBoard_usage_min+0x214>
		{
			hFlashIdx = 0;
800099ae:	49 98       	lddpc	r8,80009a10 <increment_ledBoard_usage_min+0x270>
800099b0:	30 09       	mov	r9,0
800099b2:	91 09       	st.w	r8[0x0],r9
		}
		h.csum = calc_region_checksum(2);
800099b4:	30 2c       	mov	r12,2
800099b6:	f0 1f 00 13 	mcall	80009a00 <increment_ledBoard_usage_min+0x260>
800099ba:	18 98       	mov	r8,r12
800099bc:	48 e9       	lddpc	r9,800099f4 <increment_ledBoard_usage_min+0x254>
800099be:	f3 68 00 c0 	st.b	r9[192],r8
		write_region_to_flash(2, 0xFF, h.csum);
800099c2:	48 d8       	lddpc	r8,800099f4 <increment_ledBoard_usage_min+0x254>
800099c4:	f1 38 00 c0 	ld.ub	r8,r8[192]
800099c8:	10 9a       	mov	r10,r8
800099ca:	e0 6b 00 ff 	mov	r11,255
800099ce:	30 2c       	mov	r12,2
800099d0:	f0 1f 00 0d 	mcall	80009a04 <increment_ledBoard_usage_min+0x264>

		hourRollover = 0; //reset for next pass
800099d4:	30 08       	mov	r8,0
800099d6:	ef 68 ff fd 	st.b	r7[-3],r8
	}
}
800099da:	2f ed       	sub	sp,-8
800099dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800099e0:	80 00       	ld.sh	r0,r0[0x0]
800099e2:	96 b4       	ld.uh	r4,r11[0x6]
800099e4:	00 00       	add	r0,r0
800099e6:	0b 91       	ld.ub	r1,r5[0x1]
800099e8:	00 00       	add	r0,r0
800099ea:	0b 4a       	ld.w	r10,--r5
800099ec:	00 00       	add	r0,r0
800099ee:	0b fe       	ld.ub	lr,r5[0x7]
800099f0:	00 00       	add	r0,r0
800099f2:	0d 08       	ld.w	r8,r6++
800099f4:	00 00       	add	r0,r0
800099f6:	0c 2c       	rsub	r12,r6
800099f8:	00 00       	add	r0,r0
800099fa:	08 48       	or	r8,r4
800099fc:	00 00       	add	r0,r0
800099fe:	07 c8       	ld.ub	r8,r3[0x4]
80009a00:	80 00       	ld.sh	r0,r0[0x0]
80009a02:	87 94       	st.w	r3[0x24],r4
80009a04:	80 00       	ld.sh	r0,r0[0x0]
80009a06:	90 8c       	ld.uh	r12,r8[0x0]
80009a08:	80 00       	ld.sh	r0,r0[0x0]
80009a0a:	93 24       	st.w	r9[0x8],r4
80009a0c:	80 00       	ld.sh	r0,r0[0x0]
80009a0e:	94 d0       	ld.uh	r0,r10[0xa]
80009a10:	00 00       	add	r0,r0
80009a12:	07 c4       	ld.ub	r4,r3[0x4]

80009a14 <init_shelf_n_ledBrd_structs>:
#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED


void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
80009a14:	eb cd 40 80 	pushm	r7,lr
80009a18:	1a 97       	mov	r7,sp
80009a1a:	20 4d       	sub	sp,16
	
	for (int i=0; i<NUM_SHELVES; i++)
80009a1c:	30 08       	mov	r8,0
80009a1e:	ef 48 ff f0 	st.w	r7[-16],r8
80009a22:	c2 b8       	rjmp	80009a78 <init_shelf_n_ledBrd_structs+0x64>
	{
		shelf[i].present = 0;
80009a24:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009a28:	fe fa 02 7c 	ld.w	r10,pc[636]
80009a2c:	12 98       	mov	r8,r9
80009a2e:	a3 68       	lsl	r8,0x2
80009a30:	12 08       	add	r8,r9
80009a32:	f4 08 00 08 	add	r8,r10,r8
80009a36:	f0 c9 ff fc 	sub	r9,r8,-4
80009a3a:	30 08       	mov	r8,0
80009a3c:	b2 88       	st.b	r9[0x0],r8
		shelf[i].devicesPresent = 0;
80009a3e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009a42:	fe fa 02 62 	ld.w	r10,pc[610]
80009a46:	12 98       	mov	r8,r9
80009a48:	a3 68       	lsl	r8,0x2
80009a4a:	12 08       	add	r8,r9
80009a4c:	f4 08 00 08 	add	r8,r10,r8
80009a50:	f0 c9 ff fd 	sub	r9,r8,-3
80009a54:	30 08       	mov	r8,0
80009a56:	b2 88       	st.b	r9[0x0],r8
		shelf[i].active = 0;
80009a58:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009a5c:	fe fa 02 48 	ld.w	r10,pc[584]
80009a60:	12 98       	mov	r8,r9
80009a62:	a3 68       	lsl	r8,0x2
80009a64:	12 08       	add	r8,r9
80009a66:	f4 08 00 09 	add	r9,r10,r8
80009a6a:	30 08       	mov	r8,0
80009a6c:	b2 88       	st.b	r9[0x0],r8

void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
	
	for (int i=0; i<NUM_SHELVES; i++)
80009a6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009a72:	2f f8       	sub	r8,-1
80009a74:	ef 48 ff f0 	st.w	r7[-16],r8
80009a78:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009a7c:	58 38       	cp.w	r8,3
80009a7e:	fe 9a ff d3 	brle	80009a24 <init_shelf_n_ledBrd_structs+0x10>
		shelf[i].present = 0;
		shelf[i].devicesPresent = 0;
		shelf[i].active = 0;
	}
	
	shelf[0].tLedIdx = 0;
80009a82:	fe f9 02 22 	ld.w	r9,pc[546]
80009a86:	30 08       	mov	r8,0
80009a88:	b2 98       	st.b	r9[0x1],r8
	shelf[0].bLedIdx = 1;
80009a8a:	fe f9 02 1a 	ld.w	r9,pc[538]
80009a8e:	30 18       	mov	r8,1
80009a90:	b2 a8       	st.b	r9[0x2],r8
	shelf[1].tLedIdx = 1;
80009a92:	fe f9 02 12 	ld.w	r9,pc[530]
80009a96:	30 18       	mov	r8,1
80009a98:	b2 e8       	st.b	r9[0x6],r8
	shelf[1].bLedIdx = 2;
80009a9a:	fe f9 02 0a 	ld.w	r9,pc[522]
80009a9e:	30 28       	mov	r8,2
80009aa0:	b2 f8       	st.b	r9[0x7],r8
	shelf[2].tLedIdx = 2;
80009aa2:	fe f9 02 02 	ld.w	r9,pc[514]
80009aa6:	30 28       	mov	r8,2
80009aa8:	f3 68 00 0b 	st.b	r9[11],r8
	shelf[2].bLedIdx = 3;
80009aac:	4f e9       	lddpc	r9,80009ca4 <init_shelf_n_ledBrd_structs+0x290>
80009aae:	30 38       	mov	r8,3
80009ab0:	f3 68 00 0c 	st.b	r9[12],r8
	shelf[3].tLedIdx = 3;
80009ab4:	4f c9       	lddpc	r9,80009ca4 <init_shelf_n_ledBrd_structs+0x290>
80009ab6:	30 38       	mov	r8,3
80009ab8:	f3 68 00 10 	st.b	r9[16],r8
	shelf[3].bLedIdx = 4;
80009abc:	4f a9       	lddpc	r9,80009ca4 <init_shelf_n_ledBrd_structs+0x290>
80009abe:	30 48       	mov	r8,4
80009ac0:	f3 68 00 11 	st.b	r9[17],r8
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80009ac4:	30 08       	mov	r8,0
80009ac6:	ef 48 ff f4 	st.w	r7[-12],r8
80009aca:	c1 38       	rjmp	80009af0 <init_shelf_n_ledBrd_structs+0xdc>
	{
		ledBrd[i].present = 0;
80009acc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009ad0:	4f 6a       	lddpc	r10,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009ad2:	12 98       	mov	r8,r9
80009ad4:	a3 78       	lsl	r8,0x3
80009ad6:	12 18       	sub	r8,r9
80009ad8:	a1 78       	lsl	r8,0x1
80009ada:	f4 08 00 08 	add	r8,r10,r8
80009ade:	f0 c9 ff f8 	sub	r9,r8,-8
80009ae2:	30 08       	mov	r8,0
80009ae4:	b2 88       	st.b	r9[0x0],r8
	shelf[2].tLedIdx = 2;
	shelf[2].bLedIdx = 3;
	shelf[3].tLedIdx = 3;
	shelf[3].bLedIdx = 4;
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80009ae6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009aea:	2f f8       	sub	r8,-1
80009aec:	ef 48 ff f4 	st.w	r7[-12],r8
80009af0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009af4:	58 48       	cp.w	r8,4
80009af6:	fe 9a ff eb 	brle	80009acc <init_shelf_n_ledBrd_structs+0xb8>
	{
		ledBrd[i].present = 0;
	}
	
	ledBrd[0].uSideIdx = 0xFF;
80009afa:	4e c9       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009afc:	3f f8       	mov	r8,-1
80009afe:	f3 68 00 0a 	st.b	r9[10],r8
	ledBrd[0].lSideIdx = 0;
80009b02:	4e a9       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b04:	30 08       	mov	r8,0
80009b06:	f3 68 00 0b 	st.b	r9[11],r8
	ledBrd[1].uSideIdx = 1;
80009b0a:	4e 89       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b0c:	30 18       	mov	r8,1
80009b0e:	f3 68 00 18 	st.b	r9[24],r8
	ledBrd[1].lSideIdx = 2;
80009b12:	4e 69       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b14:	30 28       	mov	r8,2
80009b16:	f3 68 00 19 	st.b	r9[25],r8
	ledBrd[2].uSideIdx = 3;
80009b1a:	4e 49       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b1c:	30 38       	mov	r8,3
80009b1e:	f3 68 00 26 	st.b	r9[38],r8
	ledBrd[2].lSideIdx = 4;
80009b22:	4e 29       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b24:	30 48       	mov	r8,4
80009b26:	f3 68 00 27 	st.b	r9[39],r8
	ledBrd[3].uSideIdx = 5;
80009b2a:	4e 09       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b2c:	30 58       	mov	r8,5
80009b2e:	f3 68 00 34 	st.b	r9[52],r8
	ledBrd[3].lSideIdx = 6;
80009b32:	4d e9       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b34:	30 68       	mov	r8,6
80009b36:	f3 68 00 35 	st.b	r9[53],r8
	ledBrd[4].uSideIdx = 7;
80009b3a:	4d c9       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b3c:	30 78       	mov	r8,7
80009b3e:	f3 68 00 42 	st.b	r9[66],r8
	ledBrd[4].lSideIdx = 0xFF;
80009b42:	4d a9       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b44:	3f f8       	mov	r8,-1
80009b46:	f3 68 00 43 	st.b	r9[67],r8

	ledBrd[0].uSideShelfIdx = 0xFF;
80009b4a:	4d 89       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b4c:	3f f8       	mov	r8,-1
80009b4e:	f3 68 00 0c 	st.b	r9[12],r8
	ledBrd[1].uSideShelfIdx = 0;
80009b52:	4d 69       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b54:	30 08       	mov	r8,0
80009b56:	f3 68 00 1a 	st.b	r9[26],r8
	ledBrd[2].uSideShelfIdx = 1;
80009b5a:	4d 49       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b5c:	30 18       	mov	r8,1
80009b5e:	f3 68 00 28 	st.b	r9[40],r8
	ledBrd[3].uSideShelfIdx = 2;
80009b62:	4d 29       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b64:	30 28       	mov	r8,2
80009b66:	f3 68 00 36 	st.b	r9[54],r8
	ledBrd[4].uSideShelfIdx = 3;
80009b6a:	4d 09       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b6c:	30 38       	mov	r8,3
80009b6e:	f3 68 00 44 	st.b	r9[68],r8
 
	ledBrd[0].lSideShelfIdx = 0;
80009b72:	4c e9       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b74:	30 08       	mov	r8,0
80009b76:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrd[1].lSideShelfIdx = 1;
80009b7a:	4c c9       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b7c:	30 18       	mov	r8,1
80009b7e:	f3 68 00 1b 	st.b	r9[27],r8
	ledBrd[2].lSideShelfIdx = 2;
80009b82:	4c a9       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b84:	30 28       	mov	r8,2
80009b86:	f3 68 00 29 	st.b	r9[41],r8
	ledBrd[3].lSideShelfIdx = 3;
80009b8a:	4c 89       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b8c:	30 38       	mov	r8,3
80009b8e:	f3 68 00 37 	st.b	r9[55],r8
	ledBrd[4].lSideShelfIdx = 0xFF;
80009b92:	4c 69       	lddpc	r9,80009ca8 <init_shelf_n_ledBrd_structs+0x294>
80009b94:	3f f8       	mov	r8,-1
80009b96:	f3 68 00 45 	st.b	r9[69],r8
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80009b9a:	30 08       	mov	r8,0
80009b9c:	ef 48 ff f8 	st.w	r7[-8],r8
80009ba0:	c2 88       	rjmp	80009bf0 <init_shelf_n_ledBrd_structs+0x1dc>
	{
		ledBrdSide[i].maxUsageReached = 0;
80009ba2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009ba6:	4c 2a       	lddpc	r10,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009ba8:	12 98       	mov	r8,r9
80009baa:	a3 68       	lsl	r8,0x2
80009bac:	12 08       	add	r8,r9
80009bae:	f4 08 00 08 	add	r8,r10,r8
80009bb2:	f0 c9 ff fe 	sub	r9,r8,-2
80009bb6:	30 08       	mov	r8,0
80009bb8:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].sanitizeMinutes = 0;
80009bba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009bbe:	4b ca       	lddpc	r10,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009bc0:	12 98       	mov	r8,r9
80009bc2:	a3 68       	lsl	r8,0x2
80009bc4:	12 08       	add	r8,r9
80009bc6:	f4 08 00 09 	add	r9,r10,r8
80009bca:	30 08       	mov	r8,0
80009bcc:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].ushdwIdx = 0xFF;
80009bce:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009bd2:	4b 7a       	lddpc	r10,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009bd4:	12 98       	mov	r8,r9
80009bd6:	a3 68       	lsl	r8,0x2
80009bd8:	12 08       	add	r8,r9
80009bda:	f4 08 00 08 	add	r8,r10,r8
80009bde:	f0 c9 ff ff 	sub	r9,r8,-1
80009be2:	3f f8       	mov	r8,-1
80009be4:	b2 88       	st.b	r9[0x0],r8
	ledBrd[2].lSideShelfIdx = 2;
	ledBrd[3].lSideShelfIdx = 3;
	ledBrd[4].lSideShelfIdx = 0xFF;
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80009be6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009bea:	2f f8       	sub	r8,-1
80009bec:	ef 48 ff f8 	st.w	r7[-8],r8
80009bf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009bf4:	58 78       	cp.w	r8,7
80009bf6:	fe 9a ff d6 	brle	80009ba2 <init_shelf_n_ledBrd_structs+0x18e>
		ledBrdSide[i].maxUsageReached = 0;
		ledBrdSide[i].sanitizeMinutes = 0;
		ledBrdSide[i].ushdwIdx = 0xFF;
	}
	
	ledBrdSide[0].boardIdx = 0;
80009bfa:	4a d9       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009bfc:	30 08       	mov	r8,0
80009bfe:	b2 c8       	st.b	r9[0x4],r8
	ledBrdSide[1].boardIdx = 1;
80009c00:	4a b9       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c02:	30 18       	mov	r8,1
80009c04:	f3 68 00 09 	st.b	r9[9],r8
	ledBrdSide[2].boardIdx = 1;
80009c08:	4a 99       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c0a:	30 18       	mov	r8,1
80009c0c:	f3 68 00 0e 	st.b	r9[14],r8
	ledBrdSide[3].boardIdx = 2;
80009c10:	4a 79       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c12:	30 28       	mov	r8,2
80009c14:	f3 68 00 13 	st.b	r9[19],r8
	ledBrdSide[4].boardIdx = 2;
80009c18:	4a 59       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c1a:	30 28       	mov	r8,2
80009c1c:	f3 68 00 18 	st.b	r9[24],r8
	ledBrdSide[5].boardIdx = 3;
80009c20:	4a 39       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c22:	30 38       	mov	r8,3
80009c24:	f3 68 00 1d 	st.b	r9[29],r8
	ledBrdSide[6].boardIdx = 3;
80009c28:	4a 19       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c2a:	30 38       	mov	r8,3
80009c2c:	f3 68 00 22 	st.b	r9[34],r8
	ledBrdSide[7].boardIdx = 4;
80009c30:	49 f9       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c32:	30 48       	mov	r8,4
80009c34:	f3 68 00 27 	st.b	r9[39],r8
	

	ledBrdSide[0].shelfIdx = 0;
80009c38:	49 d9       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c3a:	30 08       	mov	r8,0
80009c3c:	b2 b8       	st.b	r9[0x3],r8
	ledBrdSide[1].shelfIdx = 0;
80009c3e:	49 c9       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c40:	30 08       	mov	r8,0
80009c42:	f3 68 00 08 	st.b	r9[8],r8
	ledBrdSide[2].shelfIdx = 1;
80009c46:	49 a9       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c48:	30 18       	mov	r8,1
80009c4a:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrdSide[3].shelfIdx = 1;
80009c4e:	49 89       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c50:	30 18       	mov	r8,1
80009c52:	f3 68 00 12 	st.b	r9[18],r8
	ledBrdSide[4].shelfIdx = 2;
80009c56:	49 69       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c58:	30 28       	mov	r8,2
80009c5a:	f3 68 00 17 	st.b	r9[23],r8
	ledBrdSide[5].shelfIdx = 2;
80009c5e:	49 49       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c60:	30 28       	mov	r8,2
80009c62:	f3 68 00 1c 	st.b	r9[28],r8
	ledBrdSide[6].shelfIdx = 3;
80009c66:	49 29       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c68:	30 38       	mov	r8,3
80009c6a:	f3 68 00 21 	st.b	r9[33],r8
	ledBrdSide[7].shelfIdx = 3;
80009c6e:	49 09       	lddpc	r9,80009cac <init_shelf_n_ledBrd_structs+0x298>
80009c70:	30 38       	mov	r8,3
80009c72:	f3 68 00 26 	st.b	r9[38],r8
		{
			usageIdx[i][j] = NO_LED_BOARD_PRESENT;
		}
	}
#else
	for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
80009c76:	30 08       	mov	r8,0
80009c78:	ef 48 ff fc 	st.w	r7[-4],r8
80009c7c:	c0 c8       	rjmp	80009c94 <init_shelf_n_ledBrd_structs+0x280>
	{
		usageIdx[j] = NO_LED_BOARD_PRESENT;
80009c7e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009c82:	48 ca       	lddpc	r10,80009cb0 <init_shelf_n_ledBrd_structs+0x29c>
80009c84:	3f f8       	mov	r8,-1
80009c86:	f4 09 0b 08 	st.b	r10[r9],r8
		{
			usageIdx[i][j] = NO_LED_BOARD_PRESENT;
		}
	}
#else
	for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
80009c8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009c8e:	2f f8       	sub	r8,-1
80009c90:	ef 48 ff fc 	st.w	r7[-4],r8
80009c94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009c98:	58 78       	cp.w	r8,7
80009c9a:	fe 9a ff f2 	brle	80009c7e <init_shelf_n_ledBrd_structs+0x26a>
	{
		usageIdx[j] = NO_LED_BOARD_PRESENT;
	}
#endif

}
80009c9e:	2f cd       	sub	sp,-16
80009ca0:	e3 cd 80 80 	ldm	sp++,r7,pc
80009ca4:	00 00       	add	r0,r0
80009ca6:	0b 91       	ld.ub	r1,r5[0x1]
80009ca8:	00 00       	add	r0,r0
80009caa:	0b 4a       	ld.w	r10,--r5
80009cac:	00 00       	add	r0,r0
80009cae:	0b fe       	ld.ub	lr,r5[0x7]
80009cb0:	00 00       	add	r0,r0
80009cb2:	0b c0       	ld.ub	r0,r5[0x4]

80009cb4 <load_usageIdx_to_ledBrdSide>:

#else

void load_usageIdx_to_ledBrdSide(void);
void load_usageIdx_to_ledBrdSide(void)
{
80009cb4:	eb cd 40 80 	pushm	r7,lr
80009cb8:	1a 97       	mov	r7,sp
80009cba:	20 1d       	sub	sp,4
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80009cbc:	30 08       	mov	r8,0
80009cbe:	ef 48 ff fc 	st.w	r7[-4],r8
80009cc2:	c1 78       	rjmp	80009cf0 <load_usageIdx_to_ledBrdSide+0x3c>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[i];
80009cc4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009cc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009ccc:	48 da       	lddpc	r10,80009d00 <load_usageIdx_to_ledBrdSide+0x4c>
80009cce:	f4 08 07 0a 	ld.ub	r10,r10[r8]
80009cd2:	48 db       	lddpc	r11,80009d04 <load_usageIdx_to_ledBrdSide+0x50>
80009cd4:	12 98       	mov	r8,r9
80009cd6:	a3 68       	lsl	r8,0x2
80009cd8:	12 08       	add	r8,r9
80009cda:	f6 08 00 08 	add	r8,r11,r8
80009cde:	f0 c9 ff ff 	sub	r9,r8,-1
80009ce2:	14 98       	mov	r8,r10
80009ce4:	b2 88       	st.b	r9[0x0],r8
#else

void load_usageIdx_to_ledBrdSide(void);
void load_usageIdx_to_ledBrdSide(void)
{
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80009ce6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009cea:	2f f8       	sub	r8,-1
80009cec:	ef 48 ff fc 	st.w	r7[-4],r8
80009cf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009cf4:	58 78       	cp.w	r8,7
80009cf6:	fe 9a ff e7 	brle	80009cc4 <load_usageIdx_to_ledBrdSide+0x10>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[i];
	}
}
80009cfa:	2f fd       	sub	sp,-4
80009cfc:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d00:	00 00       	add	r0,r0
80009d02:	0b c0       	ld.ub	r0,r5[0x4]
80009d04:	00 00       	add	r0,r0
80009d06:	0b fe       	ld.ub	lr,r5[0x7]

80009d08 <init_led_board_info>:

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED

void init_led_board_info(void);
void init_led_board_info(void)
{
80009d08:	eb cd 40 c0 	pushm	r6-r7,lr
80009d0c:	1a 97       	mov	r7,sp
80009d0e:	20 6d       	sub	sp,24
	unsigned char regionGood[5];
	unsigned char csum;
	
	for (int i=0; i<5; i++)
80009d10:	30 08       	mov	r8,0
80009d12:	ef 48 ff f0 	st.w	r7[-16],r8
80009d16:	c1 38       	rjmp	80009d3c <init_led_board_info+0x34>
	{
		regionGood[i] = eval_region(i);
80009d18:	ee f6 ff f0 	ld.w	r6,r7[-16]
80009d1c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009d20:	5c 58       	castu.b	r8
80009d22:	10 9c       	mov	r12,r8
80009d24:	f0 1f 00 81 	mcall	80009f28 <init_led_board_info+0x220>
80009d28:	18 98       	mov	r8,r12
80009d2a:	ee 06 00 09 	add	r9,r7,r6
80009d2e:	f3 68 ff e8 	st.b	r9[-24],r8
void init_led_board_info(void)
{
	unsigned char regionGood[5];
	unsigned char csum;
	
	for (int i=0; i<5; i++)
80009d32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009d36:	2f f8       	sub	r8,-1
80009d38:	ef 48 ff f0 	st.w	r7[-16],r8
80009d3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009d40:	58 48       	cp.w	r8,4
80009d42:	fe 9a ff eb 	brle	80009d18 <init_led_board_info+0x10>
	{
		regionGood[i] = eval_region(i);
	}
	
	if (regionGood[0] && regionGood[1] && regionGood[2] && regionGood[3] && regionGood[4])
80009d46:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80009d4a:	58 08       	cp.w	r8,0
80009d4c:	c7 00       	breq	80009e2c <init_led_board_info+0x124>
80009d4e:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80009d52:	58 08       	cp.w	r8,0
80009d54:	c6 c0       	breq	80009e2c <init_led_board_info+0x124>
80009d56:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80009d5a:	58 08       	cp.w	r8,0
80009d5c:	c6 80       	breq	80009e2c <init_led_board_info+0x124>
80009d5e:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80009d62:	58 08       	cp.w	r8,0
80009d64:	c6 40       	breq	80009e2c <init_led_board_info+0x124>
80009d66:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009d6a:	58 08       	cp.w	r8,0
80009d6c:	c6 00       	breq	80009e2c <init_led_board_info+0x124>
	{
		print_ecdbg("All 5 flash regions have good data sets.\r\n");
80009d6e:	4f 0c       	lddpc	r12,80009f2c <init_led_board_info+0x224>
80009d70:	f0 1f 00 70 	mcall	80009f30 <init_led_board_info+0x228>

		load_usage_indeces();
80009d74:	f0 1f 00 70 	mcall	80009f34 <init_led_board_info+0x22c>
		
		add_new_led_board_sides_to_usage();
80009d78:	f0 1f 00 70 	mcall	80009f38 <init_led_board_info+0x230>
		load_usageIdx_to_ledBrdSide();
80009d7c:	f0 1f 00 70 	mcall	80009f3c <init_led_board_info+0x234>

		//serial ID and flags
		csum = calc_region_checksum(0);
80009d80:	30 0c       	mov	r12,0
80009d82:	f0 1f 00 70 	mcall	80009f40 <init_led_board_info+0x238>
80009d86:	18 98       	mov	r8,r12
80009d88:	ef 68 ff ef 	st.b	r7[-17],r8
		write_region_to_flash(0, 0xFF, csum);
80009d8c:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80009d90:	10 9a       	mov	r10,r8
80009d92:	e0 6b 00 ff 	mov	r11,255
80009d96:	30 0c       	mov	r12,0
80009d98:	f0 1f 00 6b 	mcall	80009f44 <init_led_board_info+0x23c>
		copy_region_to_another_sector(0);
80009d9c:	30 0c       	mov	r12,0
80009d9e:	f0 1f 00 6b 	mcall	80009f48 <init_led_board_info+0x240>

		//san cycles
		csum = calc_region_checksum(1);
80009da2:	30 1c       	mov	r12,1
80009da4:	f0 1f 00 67 	mcall	80009f40 <init_led_board_info+0x238>
80009da8:	18 98       	mov	r8,r12
80009daa:	ef 68 ff ef 	st.b	r7[-17],r8
		write_region_to_flash(1,  0xFF, csum);
80009dae:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80009db2:	10 9a       	mov	r10,r8
80009db4:	e0 6b 00 ff 	mov	r11,255
80009db8:	30 1c       	mov	r12,1
80009dba:	f0 1f 00 63 	mcall	80009f44 <init_led_board_info+0x23c>
		copy_region_to_another_sector(1);
80009dbe:	30 1c       	mov	r12,1
80009dc0:	f0 1f 00 62 	mcall	80009f48 <init_led_board_info+0x240>

		//usage hours
		csum = calc_region_checksum(2);
80009dc4:	30 2c       	mov	r12,2
80009dc6:	f0 1f 00 5f 	mcall	80009f40 <init_led_board_info+0x238>
80009dca:	18 98       	mov	r8,r12
80009dcc:	ef 68 ff ef 	st.b	r7[-17],r8
		write_region_to_flash(2,  0xFF, csum);
80009dd0:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80009dd4:	10 9a       	mov	r10,r8
80009dd6:	e0 6b 00 ff 	mov	r11,255
80009dda:	30 2c       	mov	r12,2
80009ddc:	f0 1f 00 5a 	mcall	80009f44 <init_led_board_info+0x23c>
		copy_region_to_another_sector(2);
80009de0:	30 2c       	mov	r12,2
80009de2:	f0 1f 00 5a 	mcall	80009f48 <init_led_board_info+0x240>

		//usage minutes
		csum = calc_region_checksum(3);
80009de6:	30 3c       	mov	r12,3
80009de8:	f0 1f 00 56 	mcall	80009f40 <init_led_board_info+0x238>
80009dec:	18 98       	mov	r8,r12
80009dee:	ef 68 ff ef 	st.b	r7[-17],r8
		write_region_to_flash(3,  0xFF, csum);
80009df2:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80009df6:	10 9a       	mov	r10,r8
80009df8:	e0 6b 00 ff 	mov	r11,255
80009dfc:	30 3c       	mov	r12,3
80009dfe:	f0 1f 00 52 	mcall	80009f44 <init_led_board_info+0x23c>
		copy_region_to_another_sector(3);
80009e02:	30 3c       	mov	r12,3
80009e04:	f0 1f 00 51 	mcall	80009f48 <init_led_board_info+0x240>

		//configuration
		csum = calc_region_checksum(4);
80009e08:	30 4c       	mov	r12,4
80009e0a:	f0 1f 00 4e 	mcall	80009f40 <init_led_board_info+0x238>
80009e0e:	18 98       	mov	r8,r12
80009e10:	ef 68 ff ef 	st.b	r7[-17],r8
		write_region_to_flash(4,  0xFF, csum);
80009e14:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80009e18:	10 9a       	mov	r10,r8
80009e1a:	e0 6b 00 ff 	mov	r11,255
80009e1e:	30 4c       	mov	r12,4
80009e20:	f0 1f 00 49 	mcall	80009f44 <init_led_board_info+0x23c>
		copy_region_to_another_sector(4);
80009e24:	30 4c       	mov	r12,4
80009e26:	f0 1f 00 49 	mcall	80009f48 <init_led_board_info+0x240>
	for (int i=0; i<5; i++)
	{
		regionGood[i] = eval_region(i);
	}
	
	if (regionGood[0] && regionGood[1] && regionGood[2] && regionGood[3] && regionGood[4])
80009e2a:	c7 c8       	rjmp	80009f22 <init_led_board_info+0x21a>
		copy_region_to_another_sector(4);

	}
	else
	{
		memset(&sf, 0x00, sizeof(sf));		//serial id's and flags
80009e2c:	e0 6a 03 00 	mov	r10,768
80009e30:	30 0b       	mov	r11,0
80009e32:	4c 7c       	lddpc	r12,80009f4c <init_led_board_info+0x244>
80009e34:	f0 1f 00 47 	mcall	80009f50 <init_led_board_info+0x248>
		memset(&sanc, 0x00, sizeof(sanc));	//total chassis sanitation cycles
80009e38:	30 4a       	mov	r10,4
80009e3a:	30 0b       	mov	r11,0
80009e3c:	4c 6c       	lddpc	r12,80009f54 <init_led_board_info+0x24c>
80009e3e:	f0 1f 00 45 	mcall	80009f50 <init_led_board_info+0x248>
		memset(&h, 0x00, sizeof(h));		//usage hours
80009e42:	e0 6a 00 c2 	mov	r10,194
80009e46:	30 0b       	mov	r11,0
80009e48:	4c 4c       	lddpc	r12,80009f58 <init_led_board_info+0x250>
80009e4a:	f0 1f 00 42 	mcall	80009f50 <init_led_board_info+0x248>
		memset(&m, 0x00, sizeof(m));		//usage minutes
80009e4e:	36 8a       	mov	r10,104
80009e50:	30 0b       	mov	r11,0
80009e52:	4c 3c       	lddpc	r12,80009f5c <init_led_board_info+0x254>
80009e54:	f0 1f 00 3f 	mcall	80009f50 <init_led_board_info+0x248>
		memset(&c, 0x00, sizeof(c));		//configuration
80009e58:	30 2a       	mov	r10,2
80009e5a:	30 0b       	mov	r11,0
80009e5c:	4c 1c       	lddpc	r12,80009f60 <init_led_board_info+0x258>
80009e5e:	f0 1f 00 3d 	mcall	80009f50 <init_led_board_info+0x248>
		c.initialDTE = 20; //gotta start somewhere
80009e62:	4c 09       	lddpc	r9,80009f60 <init_led_board_info+0x258>
80009e64:	31 48       	mov	r8,20
80009e66:	b2 88       	st.b	r9[0x0],r8

		for (int i=0; i<5; i++)
80009e68:	30 08       	mov	r8,0
80009e6a:	ef 48 ff f4 	st.w	r7[-12],r8
80009e6e:	c2 98       	rjmp	80009ec0 <init_led_board_info+0x1b8>
		{
			if (test_flash(i) == ERROR)
80009e70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009e74:	5c 58       	castu.b	r8
80009e76:	10 9c       	mov	r12,r8
80009e78:	f0 1f 00 3b 	mcall	80009f64 <init_led_board_info+0x25c>
80009e7c:	18 98       	mov	r8,r12
80009e7e:	10 99       	mov	r9,r8
80009e80:	30 18       	mov	r8,1
80009e82:	f0 09 18 00 	cp.b	r9,r8
80009e86:	c1 81       	brne	80009eb6 <init_led_board_info+0x1ae>
			{
				print_ecdbg("Flash area ERROR: region ");
80009e88:	4b 8c       	lddpc	r12,80009f68 <init_led_board_info+0x260>
80009e8a:	f0 1f 00 2a 	mcall	80009f30 <init_led_board_info+0x228>
				print_ecdbg_num(i);
80009e8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009e92:	10 9c       	mov	r12,r8
80009e94:	f0 1f 00 36 	mcall	80009f6c <init_led_board_info+0x264>
				print_ecdbg("\r\n");
80009e98:	4b 6c       	lddpc	r12,80009f70 <init_led_board_info+0x268>
80009e9a:	f0 1f 00 26 	mcall	80009f30 <init_led_board_info+0x228>
				sysErr.flashArea |= BIT(i); //SE_FAIL;
80009e9e:	4b 68       	lddpc	r8,80009f74 <init_led_board_info+0x26c>
80009ea0:	70 29       	ld.w	r9,r8[0x8]
80009ea2:	30 1a       	mov	r10,1
80009ea4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009ea8:	f4 08 09 48 	lsl	r8,r10,r8
80009eac:	10 49       	or	r9,r8
80009eae:	4b 28       	lddpc	r8,80009f74 <init_led_board_info+0x26c>
80009eb0:	91 29       	st.w	r8[0x8],r9
				chassis_error();
80009eb2:	f0 1f 00 32 	mcall	80009f78 <init_led_board_info+0x270>
		memset(&h, 0x00, sizeof(h));		//usage hours
		memset(&m, 0x00, sizeof(m));		//usage minutes
		memset(&c, 0x00, sizeof(c));		//configuration
		c.initialDTE = 20; //gotta start somewhere

		for (int i=0; i<5; i++)
80009eb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009eba:	2f f8       	sub	r8,-1
80009ebc:	ef 48 ff f4 	st.w	r7[-12],r8
80009ec0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009ec4:	58 48       	cp.w	r8,4
80009ec6:	fe 9a ff d5 	brle	80009e70 <init_led_board_info+0x168>
				sysErr.flashArea |= BIT(i); //SE_FAIL;
				chassis_error();
			}

		}
		add_new_led_board_sides_to_usage();
80009eca:	f0 1f 00 1c 	mcall	80009f38 <init_led_board_info+0x230>
		load_usageIdx_to_ledBrdSide();
80009ece:	f0 1f 00 1c 	mcall	80009f3c <init_led_board_info+0x234>

		for (int i=0; i<5; i++)
80009ed2:	30 08       	mov	r8,0
80009ed4:	ef 48 ff f8 	st.w	r7[-8],r8
80009ed8:	c2 08       	rjmp	80009f18 <init_led_board_info+0x210>
		{
			unsigned char csum;
			csum = calc_region_checksum(i);
80009eda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009ede:	5c 58       	castu.b	r8
80009ee0:	10 9c       	mov	r12,r8
80009ee2:	f0 1f 00 18 	mcall	80009f40 <init_led_board_info+0x238>
80009ee6:	18 98       	mov	r8,r12
80009ee8:	ef 68 ff ff 	st.b	r7[-1],r8
			write_region_to_flash(i,  0xFF, csum);
80009eec:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009ef0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009ef4:	5c 58       	castu.b	r8
80009ef6:	12 9a       	mov	r10,r9
80009ef8:	e0 6b 00 ff 	mov	r11,255
80009efc:	10 9c       	mov	r12,r8
80009efe:	f0 1f 00 12 	mcall	80009f44 <init_led_board_info+0x23c>
			copy_region_to_another_sector(i);
80009f02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009f06:	5c 58       	castu.b	r8
80009f08:	10 9c       	mov	r12,r8
80009f0a:	f0 1f 00 10 	mcall	80009f48 <init_led_board_info+0x240>

		}
		add_new_led_board_sides_to_usage();
		load_usageIdx_to_ledBrdSide();

		for (int i=0; i<5; i++)
80009f0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009f12:	2f f8       	sub	r8,-1
80009f14:	ef 48 ff f8 	st.w	r7[-8],r8
80009f18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009f1c:	58 48       	cp.w	r8,4
80009f1e:	fe 9a ff de 	brle	80009eda <init_led_board_info+0x1d2>
			csum = calc_region_checksum(i);
			write_region_to_flash(i,  0xFF, csum);
			copy_region_to_another_sector(i);
		}
	}
}
80009f22:	2f ad       	sub	sp,-24
80009f24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009f28:	80 00       	ld.sh	r0,r0[0x0]
80009f2a:	89 ec       	st.w	r4[0x38],r12
80009f2c:	80 00       	ld.sh	r0,r0[0x0]
80009f2e:	68 2c       	ld.w	r12,r4[0x8]
80009f30:	80 00       	ld.sh	r0,r0[0x0]
80009f32:	33 38       	mov	r8,51
80009f34:	80 00       	ld.sh	r0,r0[0x0]
80009f36:	85 b4       	st.w	r2[0x2c],r4
80009f38:	80 00       	ld.sh	r0,r0[0x0]
80009f3a:	95 88       	st.w	r10[0x20],r8
80009f3c:	80 00       	ld.sh	r0,r0[0x0]
80009f3e:	9c b4       	ld.uh	r4,lr[0x6]
80009f40:	80 00       	ld.sh	r0,r0[0x0]
80009f42:	87 94       	st.w	r3[0x24],r4
80009f44:	80 00       	ld.sh	r0,r0[0x0]
80009f46:	90 8c       	ld.uh	r12,r8[0x0]
80009f48:	80 00       	ld.sh	r0,r0[0x0]
80009f4a:	93 24       	st.w	r9[0x8],r4
80009f4c:	00 00       	add	r0,r0
80009f4e:	08 48       	or	r8,r4
80009f50:	80 00       	ld.sh	r0,r0[0x0]
80009f52:	cc 3e       	rcall	80009cd8 <load_usageIdx_to_ledBrdSide+0x24>
80009f54:	00 00       	add	r0,r0
80009f56:	0c 28       	rsub	r8,r6
80009f58:	00 00       	add	r0,r0
80009f5a:	0c 2c       	rsub	r12,r6
80009f5c:	00 00       	add	r0,r0
80009f5e:	0d 08       	ld.w	r8,r6++
80009f60:	00 00       	add	r0,r0
80009f62:	0b fc       	ld.ub	r12,r5[0x7]
80009f64:	80 00       	ld.sh	r0,r0[0x0]
80009f66:	86 70       	ld.sh	r0,r3[0xe]
80009f68:	80 00       	ld.sh	r0,r0[0x0]
80009f6a:	68 58       	ld.w	r8,r4[0x14]
80009f6c:	80 00       	ld.sh	r0,r0[0x0]
80009f6e:	73 20       	ld.w	r0,r9[0x48]
80009f70:	80 00       	ld.sh	r0,r0[0x0]
80009f72:	64 ec       	ld.w	r12,r2[0x38]
80009f74:	00 00       	add	r0,r0
80009f76:	0b d4       	ld.ub	r4,r5[0x5]
80009f78:	80 00       	ld.sh	r0,r0[0x0]
80009f7a:	72 3c       	ld.w	r12,r9[0xc]

80009f7c <show_sw_version>:


void show_sw_version(void);
void show_sw_version(void)
{
80009f7c:	eb cd 40 80 	pushm	r7,lr
80009f80:	1a 97       	mov	r7,sp
	print_ecdbg("\r\n*---------------------------------------------------*\r\n");
80009f82:	48 6c       	lddpc	r12,80009f98 <show_sw_version+0x1c>
80009f84:	f0 1f 00 06 	mcall	80009f9c <show_sw_version+0x20>
	print_ecdbg(    "ELECTROCLAVE\r\nCopyright (c) 2015 Seal Shield, Inc. \r\n");
80009f88:	48 6c       	lddpc	r12,80009fa0 <show_sw_version+0x24>
80009f8a:	f0 1f 00 05 	mcall	80009f9c <show_sw_version+0x20>
	print_ecdbg(    "Hardware Version: Classic +++ Software Version: 0.062\r\n");
80009f8e:	48 6c       	lddpc	r12,80009fa4 <show_sw_version+0x28>
80009f90:	f0 1f 00 03 	mcall	80009f9c <show_sw_version+0x20>

}
80009f94:	e3 cd 80 80 	ldm	sp++,r7,pc
80009f98:	80 00       	ld.sh	r0,r0[0x0]
80009f9a:	68 74       	ld.w	r4,r4[0x1c]
80009f9c:	80 00       	ld.sh	r0,r0[0x0]
80009f9e:	33 38       	mov	r8,51
80009fa0:	80 00       	ld.sh	r0,r0[0x0]
80009fa2:	68 b0       	ld.w	r0,r4[0x2c]
80009fa4:	80 00       	ld.sh	r0,r0[0x0]
80009fa6:	68 e8       	ld.w	r8,r4[0x38]

80009fa8 <show_chassis_status_info>:

void show_chassis_status_info(void);
void show_chassis_status_info(void)
{
80009fa8:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80009fac:	1a 97       	mov	r7,sp
80009fae:	21 ad       	sub	sp,104
	char pStr[80];
	unsigned char uSideIdx, lSideIdx, uSideUsageIdx, lSideUsageIdx;
	unsigned char sanMinutesMax = 0, sanMinutesMin = 0xFF, sanMinutesUpper, sanMinutesLower, uMins, lMins;
80009fb0:	30 08       	mov	r8,0
80009fb2:	ef 68 ff ee 	st.b	r7[-18],r8
80009fb6:	3f f8       	mov	r8,-1
80009fb8:	ef 68 ff ef 	st.b	r7[-17],r8
	unsigned int uHrs, lHrs;
	
	print_ecdbg("\r\n***INSTALLED LED BOARDS***\r\n\r\n");
80009fbc:	fe fc 04 18 	ld.w	r12,pc[1048]
80009fc0:	f0 1f 01 06 	mcall	8000a3d8 <show_chassis_status_info+0x430>
	
	print_ecdbg(" LED | LED BOARD    |   UPPER SIDE     |   LOWER SIDE    \r\n");
80009fc4:	fe fc 04 18 	ld.w	r12,pc[1048]
80009fc8:	f0 1f 01 04 	mcall	8000a3d8 <show_chassis_status_info+0x430>
	print_ecdbg("SLOT |    ID        | HRS:MIN    DTE   | HRS:MIN    DTE   \r\n");
80009fcc:	fe fc 04 14 	ld.w	r12,pc[1044]
80009fd0:	f0 1f 01 02 	mcall	8000a3d8 <show_chassis_status_info+0x430>
	print_ecdbg("----------------------------------------------------------\r\n");
80009fd4:	fe fc 04 10 	ld.w	r12,pc[1040]
80009fd8:	f0 1f 01 00 	mcall	8000a3d8 <show_chassis_status_info+0x430>
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80009fdc:	30 08       	mov	r8,0
80009fde:	ef 48 ff fc 	st.w	r7[-4],r8
80009fe2:	c8 e9       	rjmp	8000a2fe <show_chassis_status_info+0x356>
	{
		if (ledBrd[i].present)
80009fe4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009fe8:	fe fa 04 00 	ld.w	r10,pc[1024]
80009fec:	12 98       	mov	r8,r9
80009fee:	a3 78       	lsl	r8,0x3
80009ff0:	12 18       	sub	r8,r9
80009ff2:	a1 78       	lsl	r8,0x1
80009ff4:	f4 08 00 08 	add	r8,r10,r8
80009ff8:	2f 88       	sub	r8,-8
80009ffa:	11 88       	ld.ub	r8,r8[0x0]
80009ffc:	58 08       	cp.w	r8,0
80009ffe:	e0 80 01 7b 	breq	8000a2f4 <show_chassis_status_info+0x34c>
		{
			uSideIdx = ledBrd[i].uSideIdx;
8000a002:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a006:	fe fa 03 e2 	ld.w	r10,pc[994]
8000a00a:	12 98       	mov	r8,r9
8000a00c:	a3 78       	lsl	r8,0x3
8000a00e:	12 18       	sub	r8,r9
8000a010:	a1 78       	lsl	r8,0x1
8000a012:	f4 08 00 08 	add	r8,r10,r8
8000a016:	2f 68       	sub	r8,-10
8000a018:	11 88       	ld.ub	r8,r8[0x0]
8000a01a:	ef 68 ff ea 	st.b	r7[-22],r8
			lSideIdx = ledBrd[i].lSideIdx;
8000a01e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a022:	fe fa 03 c6 	ld.w	r10,pc[966]
8000a026:	12 98       	mov	r8,r9
8000a028:	a3 78       	lsl	r8,0x3
8000a02a:	12 18       	sub	r8,r9
8000a02c:	a1 78       	lsl	r8,0x1
8000a02e:	f4 08 00 08 	add	r8,r10,r8
8000a032:	2f 58       	sub	r8,-11
8000a034:	11 88       	ld.ub	r8,r8[0x0]
8000a036:	ef 68 ff eb 	st.b	r7[-21],r8
			
			if (uSideIdx != NO_LED_BOARD_PRESENT)
8000a03a:	ef 39 ff ea 	ld.ub	r9,r7[-22]
8000a03e:	3f f8       	mov	r8,-1
8000a040:	f0 09 18 00 	cp.b	r9,r8
8000a044:	c4 40       	breq	8000a0cc <show_chassis_status_info+0x124>
			{
				uSideUsageIdx = ledBrdSide[uSideIdx].ushdwIdx;	
8000a046:	ef 39 ff ea 	ld.ub	r9,r7[-22]
8000a04a:	fe fa 03 a2 	ld.w	r10,pc[930]
8000a04e:	12 98       	mov	r8,r9
8000a050:	a3 68       	lsl	r8,0x2
8000a052:	12 08       	add	r8,r9
8000a054:	f4 08 00 08 	add	r8,r10,r8
8000a058:	2f f8       	sub	r8,-1
8000a05a:	11 88       	ld.ub	r8,r8[0x0]
8000a05c:	ef 68 ff ec 	st.b	r7[-20],r8
				ledBrdSide[uSideIdx].maxUsageReached = !check_led_brd_side_lifetime(uSideIdx);
8000a060:	ef 36 ff ea 	ld.ub	r6,r7[-22]
8000a064:	ef 38 ff ea 	ld.ub	r8,r7[-22]
8000a068:	10 9c       	mov	r12,r8
8000a06a:	f0 1f 00 e2 	mcall	8000a3f0 <show_chassis_status_info+0x448>
8000a06e:	18 98       	mov	r8,r12
8000a070:	10 99       	mov	r9,r8
8000a072:	30 08       	mov	r8,0
8000a074:	f0 09 18 00 	cp.b	r9,r8
8000a078:	5f 09       	sreq	r9
8000a07a:	fe fa 03 72 	ld.w	r10,pc[882]
8000a07e:	0c 98       	mov	r8,r6
8000a080:	a3 68       	lsl	r8,0x2
8000a082:	0c 08       	add	r8,r6
8000a084:	f4 08 00 08 	add	r8,r10,r8
8000a088:	f0 ca ff fe 	sub	r10,r8,-2
8000a08c:	12 98       	mov	r8,r9
8000a08e:	b4 88       	st.b	r10[0x0],r8
				sanMinutesUpper = ledBrdSide[uSideIdx].sanitizeMinutes;
8000a090:	ef 39 ff ea 	ld.ub	r9,r7[-22]
8000a094:	fe fa 03 58 	ld.w	r10,pc[856]
8000a098:	12 98       	mov	r8,r9
8000a09a:	a3 68       	lsl	r8,0x2
8000a09c:	12 08       	add	r8,r9
8000a09e:	f4 08 00 08 	add	r8,r10,r8
8000a0a2:	11 88       	ld.ub	r8,r8[0x0]
8000a0a4:	ef 68 ff f0 	st.b	r7[-16],r8
#ifdef SERIAL_ID_AND_ALL_USAGE_COMBINED
				uHrs = usageShdw[0].u[uSideUsageIdx].minutes/60;
				uMins = usageShdw[0].u[uSideUsageIdx].minutes%60;
#else
				uHrs = h.hrs[uSideUsageIdx];
8000a0a8:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000a0ac:	fe f8 03 48 	ld.w	r8,pc[840]
8000a0b0:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000a0b4:	5c 78       	castu.h	r8
8000a0b6:	ef 48 ff f4 	st.w	r7[-12],r8
				uMins = m.mins[uSideUsageIdx];
8000a0ba:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000a0be:	fe f9 03 3a 	ld.w	r9,pc[826]
8000a0c2:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000a0c6:	ef 68 ff f2 	st.b	r7[-14],r8
8000a0ca:	c0 a8       	rjmp	8000a0de <show_chassis_status_info+0x136>
#endif				
			}
			else
			{
				uHrs = 0;
8000a0cc:	30 08       	mov	r8,0
8000a0ce:	ef 48 ff f4 	st.w	r7[-12],r8
				uMins = 0;
8000a0d2:	30 08       	mov	r8,0
8000a0d4:	ef 68 ff f2 	st.b	r7[-14],r8
				sanMinutesUpper = 0;
8000a0d8:	30 08       	mov	r8,0
8000a0da:	ef 68 ff f0 	st.b	r7[-16],r8
			}
			
			if (lSideIdx != NO_LED_BOARD_PRESENT)
8000a0de:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8000a0e2:	3f f8       	mov	r8,-1
8000a0e4:	f0 09 18 00 	cp.b	r9,r8
8000a0e8:	c4 40       	breq	8000a170 <show_chassis_status_info+0x1c8>
			{
				lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;	
8000a0ea:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8000a0ee:	fe fa 02 fe 	ld.w	r10,pc[766]
8000a0f2:	12 98       	mov	r8,r9
8000a0f4:	a3 68       	lsl	r8,0x2
8000a0f6:	12 08       	add	r8,r9
8000a0f8:	f4 08 00 08 	add	r8,r10,r8
8000a0fc:	2f f8       	sub	r8,-1
8000a0fe:	11 88       	ld.ub	r8,r8[0x0]
8000a100:	ef 68 ff ed 	st.b	r7[-19],r8
				ledBrdSide[lSideIdx].maxUsageReached = !check_led_brd_side_lifetime(lSideIdx);
8000a104:	ef 36 ff eb 	ld.ub	r6,r7[-21]
8000a108:	ef 38 ff eb 	ld.ub	r8,r7[-21]
8000a10c:	10 9c       	mov	r12,r8
8000a10e:	f0 1f 00 b9 	mcall	8000a3f0 <show_chassis_status_info+0x448>
8000a112:	18 98       	mov	r8,r12
8000a114:	10 99       	mov	r9,r8
8000a116:	30 08       	mov	r8,0
8000a118:	f0 09 18 00 	cp.b	r9,r8
8000a11c:	5f 09       	sreq	r9
8000a11e:	fe fa 02 ce 	ld.w	r10,pc[718]
8000a122:	0c 98       	mov	r8,r6
8000a124:	a3 68       	lsl	r8,0x2
8000a126:	0c 08       	add	r8,r6
8000a128:	f4 08 00 08 	add	r8,r10,r8
8000a12c:	f0 ca ff fe 	sub	r10,r8,-2
8000a130:	12 98       	mov	r8,r9
8000a132:	b4 88       	st.b	r10[0x0],r8
				sanMinutesLower = ledBrdSide[lSideIdx].sanitizeMinutes;
8000a134:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8000a138:	fe fa 02 b4 	ld.w	r10,pc[692]
8000a13c:	12 98       	mov	r8,r9
8000a13e:	a3 68       	lsl	r8,0x2
8000a140:	12 08       	add	r8,r9
8000a142:	f4 08 00 08 	add	r8,r10,r8
8000a146:	11 88       	ld.ub	r8,r8[0x0]
8000a148:	ef 68 ff f1 	st.b	r7[-15],r8
#ifdef SERIAL_ID_AND_ALL_USAGE_COMBINED
				lHrs = usageShdw[0].u[lSideUsageIdx].minutes/60;
				lMins = usageShdw[0].u[lSideUsageIdx].minutes%60;
#else
				lHrs = h.hrs[lSideUsageIdx];
8000a14c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
8000a150:	fe f8 02 a4 	ld.w	r8,pc[676]
8000a154:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000a158:	5c 78       	castu.h	r8
8000a15a:	ef 48 ff f8 	st.w	r7[-8],r8
				lMins = m.mins[lSideUsageIdx];
8000a15e:	ef 38 ff ed 	ld.ub	r8,r7[-19]
8000a162:	fe f9 02 96 	ld.w	r9,pc[662]
8000a166:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000a16a:	ef 68 ff f3 	st.b	r7[-13],r8
8000a16e:	c0 a8       	rjmp	8000a182 <show_chassis_status_info+0x1da>
#endif
			}
			else
			{
				lHrs = 0;
8000a170:	30 08       	mov	r8,0
8000a172:	ef 48 ff f8 	st.w	r7[-8],r8
				lMins = 0;
8000a176:	30 08       	mov	r8,0
8000a178:	ef 68 ff f3 	st.b	r7[-13],r8
				sanMinutesLower = 0;
8000a17c:	30 08       	mov	r8,0
8000a17e:	ef 68 ff f1 	st.b	r7[-15],r8
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
8000a182:	ef 31 ff f1 	ld.ub	r1,r7[-15]
8000a186:	ef 32 ff f3 	ld.ub	r2,r7[-13]
8000a18a:	ef 33 ff f0 	ld.ub	r3,r7[-16]
8000a18e:	ef 35 ff f2 	ld.ub	r5,r7[-14]
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
8000a192:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a196:	fe fa 02 52 	ld.w	r10,pc[594]
8000a19a:	12 98       	mov	r8,r9
8000a19c:	a3 78       	lsl	r8,0x3
8000a19e:	12 18       	sub	r8,r9
8000a1a0:	a1 78       	lsl	r8,0x1
8000a1a2:	f4 08 00 08 	add	r8,r10,r8
8000a1a6:	2f a8       	sub	r8,-6
8000a1a8:	11 88       	ld.ub	r8,r8[0x0]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
8000a1aa:	10 96       	mov	r6,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
8000a1ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a1b0:	fe fa 02 38 	ld.w	r10,pc[568]
8000a1b4:	12 98       	mov	r8,r9
8000a1b6:	a3 78       	lsl	r8,0x3
8000a1b8:	12 18       	sub	r8,r9
8000a1ba:	a1 78       	lsl	r8,0x1
8000a1bc:	f4 08 00 08 	add	r8,r10,r8
8000a1c0:	2f b8       	sub	r8,-5
8000a1c2:	11 88       	ld.ub	r8,r8[0x0]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
8000a1c4:	10 9e       	mov	lr,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
8000a1c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a1ca:	fe fa 02 1e 	ld.w	r10,pc[542]
8000a1ce:	12 98       	mov	r8,r9
8000a1d0:	a3 78       	lsl	r8,0x3
8000a1d2:	12 18       	sub	r8,r9
8000a1d4:	a1 78       	lsl	r8,0x1
8000a1d6:	f4 08 00 08 	add	r8,r10,r8
8000a1da:	2f c8       	sub	r8,-4
8000a1dc:	11 88       	ld.ub	r8,r8[0x0]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
8000a1de:	10 9c       	mov	r12,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
8000a1e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a1e4:	fe fa 02 04 	ld.w	r10,pc[516]
8000a1e8:	12 98       	mov	r8,r9
8000a1ea:	a3 78       	lsl	r8,0x3
8000a1ec:	12 18       	sub	r8,r9
8000a1ee:	2f f8       	sub	r8,-1
8000a1f0:	a1 78       	lsl	r8,0x1
8000a1f2:	f4 08 00 08 	add	r8,r10,r8
8000a1f6:	11 98       	ld.ub	r8,r8[0x1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
8000a1f8:	10 9b       	mov	r11,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
8000a1fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a1fe:	4f ba       	lddpc	r10,8000a3e8 <show_chassis_status_info+0x440>
8000a200:	12 98       	mov	r8,r9
8000a202:	a3 78       	lsl	r8,0x3
8000a204:	12 18       	sub	r8,r9
8000a206:	a1 78       	lsl	r8,0x1
8000a208:	f4 08 00 08 	add	r8,r10,r8
8000a20c:	2f e8       	sub	r8,-2
8000a20e:	11 88       	ld.ub	r8,r8[0x0]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
8000a210:	10 9a       	mov	r10,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
8000a212:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a216:	4f 50       	lddpc	r0,8000a3e8 <show_chassis_status_info+0x440>
8000a218:	12 98       	mov	r8,r9
8000a21a:	a3 78       	lsl	r8,0x3
8000a21c:	12 18       	sub	r8,r9
8000a21e:	a1 78       	lsl	r8,0x1
8000a220:	e0 08 00 08 	add	r8,r0,r8
8000a224:	2f f8       	sub	r8,-1
8000a226:	11 88       	ld.ub	r8,r8[0x0]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
8000a228:	10 99       	mov	r9,r8
8000a22a:	ee c8 00 68 	sub	r8,r7,104
8000a22e:	1a d1       	st.w	--sp,r1
8000a230:	1a d2       	st.w	--sp,r2
8000a232:	ee f2 ff f8 	ld.w	r2,r7[-8]
8000a236:	1a d2       	st.w	--sp,r2
8000a238:	1a d3       	st.w	--sp,r3
8000a23a:	1a d5       	st.w	--sp,r5
8000a23c:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000a240:	1a d5       	st.w	--sp,r5
8000a242:	1a d6       	st.w	--sp,r6
8000a244:	1a de       	st.w	--sp,lr
8000a246:	1a dc       	st.w	--sp,r12
8000a248:	1a db       	st.w	--sp,r11
8000a24a:	1a da       	st.w	--sp,r10
8000a24c:	1a d9       	st.w	--sp,r9
8000a24e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a252:	1a d9       	st.w	--sp,r9
8000a254:	4e ab       	lddpc	r11,8000a3fc <show_chassis_status_info+0x454>
8000a256:	10 9c       	mov	r12,r8
8000a258:	f0 1f 00 6a 	mcall	8000a400 <show_chassis_status_info+0x458>
8000a25c:	2f 3d       	sub	sp,-52
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				uHrs, uMins,
				sanMinutesUpper,
				lHrs, lMins,
				sanMinutesLower);
			print_ecdbg(pStr);
8000a25e:	ee c8 00 68 	sub	r8,r7,104
8000a262:	10 9c       	mov	r12,r8
8000a264:	f0 1f 00 5d 	mcall	8000a3d8 <show_chassis_status_info+0x430>
			

			/* 
			 * Determine the min and max sanitize times for the LED boards that are currently installed
			 */
			if ((sanMinutesMax < sanMinutesUpper) && (sanMinutesUpper != 0))
8000a268:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000a26c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000a270:	f0 09 18 00 	cp.b	r9,r8
8000a274:	c0 b2       	brcc	8000a28a <show_chassis_status_info+0x2e2>
8000a276:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000a27a:	30 08       	mov	r8,0
8000a27c:	f0 09 18 00 	cp.b	r9,r8
8000a280:	c0 50       	breq	8000a28a <show_chassis_status_info+0x2e2>
			{
				sanMinutesMax = sanMinutesUpper;
8000a282:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000a286:	ef 68 ff ee 	st.b	r7[-18],r8
			}
			if ((sanMinutesMax < sanMinutesLower) && (sanMinutesLower != 0))
8000a28a:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000a28e:	ef 38 ff f1 	ld.ub	r8,r7[-15]
8000a292:	f0 09 18 00 	cp.b	r9,r8
8000a296:	c0 b2       	brcc	8000a2ac <show_chassis_status_info+0x304>
8000a298:	ef 39 ff f1 	ld.ub	r9,r7[-15]
8000a29c:	30 08       	mov	r8,0
8000a29e:	f0 09 18 00 	cp.b	r9,r8
8000a2a2:	c0 50       	breq	8000a2ac <show_chassis_status_info+0x304>
			{
				sanMinutesMax = sanMinutesLower;
8000a2a4:	ef 38 ff f1 	ld.ub	r8,r7[-15]
8000a2a8:	ef 68 ff ee 	st.b	r7[-18],r8
			}
			if ((sanMinutesMin > sanMinutesUpper) && (sanMinutesUpper != 0))
8000a2ac:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000a2b0:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000a2b4:	f0 09 18 00 	cp.b	r9,r8
8000a2b8:	e0 88 00 0c 	brls	8000a2d0 <show_chassis_status_info+0x328>
8000a2bc:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000a2c0:	30 08       	mov	r8,0
8000a2c2:	f0 09 18 00 	cp.b	r9,r8
8000a2c6:	c0 50       	breq	8000a2d0 <show_chassis_status_info+0x328>
			{
				sanMinutesMin = sanMinutesUpper;
8000a2c8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000a2cc:	ef 68 ff ef 	st.b	r7[-17],r8
			}
			if ((sanMinutesMin > sanMinutesLower) && (sanMinutesLower != 0))
8000a2d0:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000a2d4:	ef 38 ff f1 	ld.ub	r8,r7[-15]
8000a2d8:	f0 09 18 00 	cp.b	r9,r8
8000a2dc:	e0 88 00 0c 	brls	8000a2f4 <show_chassis_status_info+0x34c>
8000a2e0:	ef 39 ff f1 	ld.ub	r9,r7[-15]
8000a2e4:	30 08       	mov	r8,0
8000a2e6:	f0 09 18 00 	cp.b	r9,r8
8000a2ea:	c0 50       	breq	8000a2f4 <show_chassis_status_info+0x34c>
			{
				sanMinutesMin = sanMinutesLower;
8000a2ec:	ef 38 ff f1 	ld.ub	r8,r7[-15]
8000a2f0:	ef 68 ff ef 	st.b	r7[-17],r8
	
	print_ecdbg(" LED | LED BOARD    |   UPPER SIDE     |   LOWER SIDE    \r\n");
	print_ecdbg("SLOT |    ID        | HRS:MIN    DTE   | HRS:MIN    DTE   \r\n");
	print_ecdbg("----------------------------------------------------------\r\n");
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
8000a2f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a2f8:	2f f8       	sub	r8,-1
8000a2fa:	ef 48 ff fc 	st.w	r7[-4],r8
8000a2fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a302:	58 48       	cp.w	r8,4
8000a304:	fe 9a fe 70 	brle	80009fe4 <show_chassis_status_info+0x3c>
				sanMinutesMin = sanMinutesLower;
			}
		}
	}
	
	print_ecdbg("MAX DTE: ");
8000a308:	4b fc       	lddpc	r12,8000a404 <show_chassis_status_info+0x45c>
8000a30a:	f0 1f 00 34 	mcall	8000a3d8 <show_chassis_status_info+0x430>
	print_ecdbg_num(sanMinutesMax);
8000a30e:	ef 38 ff ee 	ld.ub	r8,r7[-18]
8000a312:	10 9c       	mov	r12,r8
8000a314:	f0 1f 00 3d 	mcall	8000a408 <show_chassis_status_info+0x460>
	print_ecdbg(" MIN DTE: ");
8000a318:	4b dc       	lddpc	r12,8000a40c <show_chassis_status_info+0x464>
8000a31a:	f0 1f 00 30 	mcall	8000a3d8 <show_chassis_status_info+0x430>
	print_ecdbg_num(sanMinutesMin);
8000a31e:	ef 38 ff ef 	ld.ub	r8,r7[-17]
8000a322:	10 9c       	mov	r12,r8
8000a324:	f0 1f 00 39 	mcall	8000a408 <show_chassis_status_info+0x460>
	print_ecdbg("\r\n");
8000a328:	4b ac       	lddpc	r12,8000a410 <show_chassis_status_info+0x468>
8000a32a:	f0 1f 00 2c 	mcall	8000a3d8 <show_chassis_status_info+0x430>
	
	print_ecdbg("TOTAL SANITIZE TIME: ");
8000a32e:	4b ac       	lddpc	r12,8000a414 <show_chassis_status_info+0x46c>
8000a330:	f0 1f 00 2a 	mcall	8000a3d8 <show_chassis_status_info+0x430>
		print_ecdbg_num(usageShdw[0].totalSanitationMinutes/60);
	}
	print_ecdbg(" TOTAL SANITIZE CYCLES: ");
	print_ecdbg_num(usageShdw[0].totalSanitationCycles);
#else
	if ((m.sanMins/60) < 10)
8000a334:	4b 18       	lddpc	r8,8000a3f8 <show_chassis_status_info+0x450>
8000a336:	71 88       	ld.w	r8,r8[0x60]
8000a338:	e0 48 02 57 	cp.w	r8,599
8000a33c:	e0 8b 00 05 	brhi	8000a346 <show_chassis_status_info+0x39e>
	{
		print_ecdbg("0"); //print leading 0 if we need it
8000a340:	4b 6c       	lddpc	r12,8000a418 <show_chassis_status_info+0x470>
8000a342:	f0 1f 00 26 	mcall	8000a3d8 <show_chassis_status_info+0x430>
	}
	print_ecdbg_num((m.sanMins/60));
8000a346:	4a d8       	lddpc	r8,8000a3f8 <show_chassis_status_info+0x450>
8000a348:	71 89       	ld.w	r9,r8[0x60]
8000a34a:	e0 68 88 89 	mov	r8,34953
8000a34e:	ea 18 88 88 	orh	r8,0x8888
8000a352:	f2 08 06 48 	mulu.d	r8,r9,r8
8000a356:	f2 08 16 05 	lsr	r8,r9,0x5
8000a35a:	10 9c       	mov	r12,r8
8000a35c:	f0 1f 00 2b 	mcall	8000a408 <show_chassis_status_info+0x460>
	print_ecdbg(":");
8000a360:	4a fc       	lddpc	r12,8000a41c <show_chassis_status_info+0x474>
8000a362:	f0 1f 00 1e 	mcall	8000a3d8 <show_chassis_status_info+0x430>

	if ((m.sanMins%60) < 10)
8000a366:	4a 58       	lddpc	r8,8000a3f8 <show_chassis_status_info+0x450>
8000a368:	71 8a       	ld.w	r10,r8[0x60]
8000a36a:	e0 68 88 89 	mov	r8,34953
8000a36e:	ea 18 88 88 	orh	r8,0x8888
8000a372:	f4 08 06 48 	mulu.d	r8,r10,r8
8000a376:	a5 99       	lsr	r9,0x5
8000a378:	12 98       	mov	r8,r9
8000a37a:	a5 68       	lsl	r8,0x4
8000a37c:	12 18       	sub	r8,r9
8000a37e:	a3 68       	lsl	r8,0x2
8000a380:	f4 08 01 09 	sub	r9,r10,r8
8000a384:	58 99       	cp.w	r9,9
8000a386:	e0 8b 00 05 	brhi	8000a390 <show_chassis_status_info+0x3e8>
	{
		print_ecdbg("0"); //print leading 0 if we need it
8000a38a:	4a 4c       	lddpc	r12,8000a418 <show_chassis_status_info+0x470>
8000a38c:	f0 1f 00 13 	mcall	8000a3d8 <show_chassis_status_info+0x430>
	}
	print_ecdbg_num((m.sanMins%60));
8000a390:	49 a8       	lddpc	r8,8000a3f8 <show_chassis_status_info+0x450>
8000a392:	71 8a       	ld.w	r10,r8[0x60]
8000a394:	e0 68 88 89 	mov	r8,34953
8000a398:	ea 18 88 88 	orh	r8,0x8888
8000a39c:	f4 08 06 48 	mulu.d	r8,r10,r8
8000a3a0:	a5 99       	lsr	r9,0x5
8000a3a2:	12 98       	mov	r8,r9
8000a3a4:	a5 68       	lsl	r8,0x4
8000a3a6:	12 18       	sub	r8,r9
8000a3a8:	a3 68       	lsl	r8,0x2
8000a3aa:	f4 08 01 09 	sub	r9,r10,r8
8000a3ae:	12 9c       	mov	r12,r9
8000a3b0:	f0 1f 00 16 	mcall	8000a408 <show_chassis_status_info+0x460>

	print_ecdbg("  TOTAL SANITIZE CYCLES: ");
8000a3b4:	49 bc       	lddpc	r12,8000a420 <show_chassis_status_info+0x478>
8000a3b6:	f0 1f 00 09 	mcall	8000a3d8 <show_chassis_status_info+0x430>
	print_ecdbg_num(sanc.cycles);
8000a3ba:	49 b8       	lddpc	r8,8000a424 <show_chassis_status_info+0x47c>
8000a3bc:	70 08       	ld.w	r8,r8[0x0]
8000a3be:	f1 d8 c1 94 	bfextu	r8,r8,0xc,0x14
8000a3c2:	10 9c       	mov	r12,r8
8000a3c4:	f0 1f 00 11 	mcall	8000a408 <show_chassis_status_info+0x460>

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED	
	print_ecdbg("\r\n");
8000a3c8:	49 2c       	lddpc	r12,8000a410 <show_chassis_status_info+0x468>
8000a3ca:	f0 1f 00 04 	mcall	8000a3d8 <show_chassis_status_info+0x430>
	
}
8000a3ce:	2e 6d       	sub	sp,-104
8000a3d0:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000a3d4:	80 00       	ld.sh	r0,r0[0x0]
8000a3d6:	69 20       	ld.w	r0,r4[0x48]
8000a3d8:	80 00       	ld.sh	r0,r0[0x0]
8000a3da:	33 38       	mov	r8,51
8000a3dc:	80 00       	ld.sh	r0,r0[0x0]
8000a3de:	69 44       	ld.w	r4,r4[0x50]
8000a3e0:	80 00       	ld.sh	r0,r0[0x0]
8000a3e2:	69 80       	ld.w	r0,r4[0x60]
8000a3e4:	80 00       	ld.sh	r0,r0[0x0]
8000a3e6:	69 c0       	ld.w	r0,r4[0x70]
8000a3e8:	00 00       	add	r0,r0
8000a3ea:	0b 4a       	ld.w	r10,--r5
8000a3ec:	00 00       	add	r0,r0
8000a3ee:	0b fe       	ld.ub	lr,r5[0x7]
8000a3f0:	80 00       	ld.sh	r0,r0[0x0]
8000a3f2:	76 7c       	ld.w	r12,r11[0x1c]
8000a3f4:	00 00       	add	r0,r0
8000a3f6:	0c 2c       	rsub	r12,r6
8000a3f8:	00 00       	add	r0,r0
8000a3fa:	0d 08       	ld.w	r8,r6++
8000a3fc:	80 00       	ld.sh	r0,r0[0x0]
8000a3fe:	6a 00       	ld.w	r0,r5[0x0]
8000a400:	80 00       	ld.sh	r0,r0[0x0]
8000a402:	cc 4c       	rcall	8000a58a <show_chassis_sysErr+0x162>
8000a404:	80 00       	ld.sh	r0,r0[0x0]
8000a406:	6a 50       	ld.w	r0,r5[0x14]
8000a408:	80 00       	ld.sh	r0,r0[0x0]
8000a40a:	73 20       	ld.w	r0,r9[0x48]
8000a40c:	80 00       	ld.sh	r0,r0[0x0]
8000a40e:	6a 5c       	ld.w	r12,r5[0x14]
8000a410:	80 00       	ld.sh	r0,r0[0x0]
8000a412:	64 ec       	ld.w	r12,r2[0x38]
8000a414:	80 00       	ld.sh	r0,r0[0x0]
8000a416:	6a 68       	ld.w	r8,r5[0x18]
8000a418:	80 00       	ld.sh	r0,r0[0x0]
8000a41a:	6a 80       	ld.w	r0,r5[0x20]
8000a41c:	80 00       	ld.sh	r0,r0[0x0]
8000a41e:	6a 84       	ld.w	r4,r5[0x20]
8000a420:	80 00       	ld.sh	r0,r0[0x0]
8000a422:	6a 88       	ld.w	r8,r5[0x20]
8000a424:	00 00       	add	r0,r0
8000a426:	0c 28       	rsub	r8,r6

8000a428 <show_chassis_sysErr>:


void show_chassis_sysErr(void);
void show_chassis_sysErr(void)
{
8000a428:	eb cd 40 c0 	pushm	r6-r7,lr
8000a42c:	1a 97       	mov	r7,sp
8000a42e:	21 9d       	sub	sp,100
	char str[80];
	

	print_ecdbg("\r\n***SYSTEM TESTS***\r\n\r\n");
8000a430:	fe fc 03 88 	ld.w	r12,pc[904]
8000a434:	f0 1f 00 e2 	mcall	8000a7bc <show_chassis_sysErr+0x394>


/*
 *	LED Driver: Top
 */
	sprintf(str, "LED Driver: TOP (0..7)                 ");
8000a438:	ee c8 00 64 	sub	r8,r7,100
8000a43c:	32 8a       	mov	r10,40
8000a43e:	fe fb 03 82 	ld.w	r11,pc[898]
8000a442:	10 9c       	mov	r12,r8
8000a444:	f0 1f 00 e0 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
	
	for (int i=0; i<7; i++)
8000a448:	30 08       	mov	r8,0
8000a44a:	ef 48 ff ec 	st.w	r7[-20],r8
8000a44e:	c3 78       	rjmp	8000a4bc <show_chassis_sysErr+0x94>
	{
		if ((sysErr.topdrive & BIT(i)))
8000a450:	fe f8 03 78 	ld.w	r8,pc[888]
8000a454:	11 88       	ld.ub	r8,r8[0x0]
8000a456:	10 99       	mov	r9,r8
8000a458:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a45c:	f2 08 08 48 	asr	r8,r9,r8
8000a460:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a464:	5c 58       	castu.b	r8
8000a466:	c1 60       	breq	8000a492 <show_chassis_sysErr+0x6a>
		{
			strcat(str,"F ");			
8000a468:	ee c6 00 64 	sub	r6,r7,100
8000a46c:	ee c8 00 64 	sub	r8,r7,100
8000a470:	10 9c       	mov	r12,r8
8000a472:	f0 1f 00 d7 	mcall	8000a7cc <show_chassis_sysErr+0x3a4>
8000a476:	18 98       	mov	r8,r12
8000a478:	ec 08 00 08 	add	r8,r6,r8
8000a47c:	30 3a       	mov	r10,3
8000a47e:	fe fb 03 52 	ld.w	r11,pc[850]
8000a482:	10 9c       	mov	r12,r8
8000a484:	f0 1f 00 d0 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
			electroclaveState = STATE_CHASSIS_ERROR;
8000a488:	fe f9 03 4c 	ld.w	r9,pc[844]
8000a48c:	30 88       	mov	r8,8
8000a48e:	b2 88       	st.b	r9[0x0],r8
8000a490:	c1 18       	rjmp	8000a4b2 <show_chassis_sysErr+0x8a>
		}
		else
		{
			strcat(str,"P ");
8000a492:	ee c6 00 64 	sub	r6,r7,100
8000a496:	ee c8 00 64 	sub	r8,r7,100
8000a49a:	10 9c       	mov	r12,r8
8000a49c:	f0 1f 00 cc 	mcall	8000a7cc <show_chassis_sysErr+0x3a4>
8000a4a0:	18 98       	mov	r8,r12
8000a4a2:	ec 08 00 08 	add	r8,r6,r8
8000a4a6:	30 3a       	mov	r10,3
8000a4a8:	fe fb 03 30 	ld.w	r11,pc[816]
8000a4ac:	10 9c       	mov	r12,r8
8000a4ae:	f0 1f 00 c6 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
/*
 *	LED Driver: Top
 */
	sprintf(str, "LED Driver: TOP (0..7)                 ");
	
	for (int i=0; i<7; i++)
8000a4b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a4b6:	2f f8       	sub	r8,-1
8000a4b8:	ef 48 ff ec 	st.w	r7[-20],r8
8000a4bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a4c0:	58 68       	cp.w	r8,6
8000a4c2:	fe 9a ff c7 	brle	8000a450 <show_chassis_sysErr+0x28>
		{
			strcat(str,"P ");
		}
	}
	
	print_ecdbg(str);
8000a4c6:	ee c8 00 64 	sub	r8,r7,100
8000a4ca:	10 9c       	mov	r12,r8
8000a4cc:	f0 1f 00 bc 	mcall	8000a7bc <show_chassis_sysErr+0x394>
	print_ecdbg("\r\n");
8000a4d0:	fe fc 03 0c 	ld.w	r12,pc[780]
8000a4d4:	f0 1f 00 ba 	mcall	8000a7bc <show_chassis_sysErr+0x394>
	
/*
 *	LED Driver: Bottom
 */
	sprintf(str, "LED Driver: BOTTOM (0..11)             ");
8000a4d8:	ee c8 00 64 	sub	r8,r7,100
8000a4dc:	32 8a       	mov	r10,40
8000a4de:	fe fb 03 02 	ld.w	r11,pc[770]
8000a4e2:	10 9c       	mov	r12,r8
8000a4e4:	f0 1f 00 b8 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
	
	for (int i=0; i<12; i++)
8000a4e8:	30 08       	mov	r8,0
8000a4ea:	ef 48 ff f0 	st.w	r7[-16],r8
8000a4ee:	c3 68       	rjmp	8000a55a <show_chassis_sysErr+0x132>
	{
		if ((sysErr.botdrive & BIT(i)))
8000a4f0:	fe f8 02 d8 	ld.w	r8,pc[728]
8000a4f4:	70 19       	ld.w	r9,r8[0x4]
8000a4f6:	30 1a       	mov	r10,1
8000a4f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a4fc:	f4 08 09 48 	lsl	r8,r10,r8
8000a500:	f3 e8 00 08 	and	r8,r9,r8
8000a504:	c1 60       	breq	8000a530 <show_chassis_sysErr+0x108>
		{
			strcat(str,"F ");			
8000a506:	ee c6 00 64 	sub	r6,r7,100
8000a50a:	ee c8 00 64 	sub	r8,r7,100
8000a50e:	10 9c       	mov	r12,r8
8000a510:	f0 1f 00 af 	mcall	8000a7cc <show_chassis_sysErr+0x3a4>
8000a514:	18 98       	mov	r8,r12
8000a516:	ec 08 00 08 	add	r8,r6,r8
8000a51a:	30 3a       	mov	r10,3
8000a51c:	fe fb 02 b4 	ld.w	r11,pc[692]
8000a520:	10 9c       	mov	r12,r8
8000a522:	f0 1f 00 a9 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
			electroclaveState = STATE_CHASSIS_ERROR;
8000a526:	fe f9 02 ae 	ld.w	r9,pc[686]
8000a52a:	30 88       	mov	r8,8
8000a52c:	b2 88       	st.b	r9[0x0],r8
8000a52e:	c1 18       	rjmp	8000a550 <show_chassis_sysErr+0x128>
		}
		else
		{
			strcat(str,"P ");
8000a530:	ee c6 00 64 	sub	r6,r7,100
8000a534:	ee c8 00 64 	sub	r8,r7,100
8000a538:	10 9c       	mov	r12,r8
8000a53a:	f0 1f 00 a5 	mcall	8000a7cc <show_chassis_sysErr+0x3a4>
8000a53e:	18 98       	mov	r8,r12
8000a540:	ec 08 00 08 	add	r8,r6,r8
8000a544:	30 3a       	mov	r10,3
8000a546:	fe fb 02 92 	ld.w	r11,pc[658]
8000a54a:	10 9c       	mov	r12,r8
8000a54c:	f0 1f 00 9e 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
/*
 *	LED Driver: Bottom
 */
	sprintf(str, "LED Driver: BOTTOM (0..11)             ");
	
	for (int i=0; i<12; i++)
8000a550:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a554:	2f f8       	sub	r8,-1
8000a556:	ef 48 ff f0 	st.w	r7[-16],r8
8000a55a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a55e:	58 b8       	cp.w	r8,11
8000a560:	fe 9a ff c8 	brle	8000a4f0 <show_chassis_sysErr+0xc8>
		{
			strcat(str,"P ");
		}
	}
	
	print_ecdbg(str);
8000a564:	ee c8 00 64 	sub	r8,r7,100
8000a568:	10 9c       	mov	r12,r8
8000a56a:	f0 1f 00 95 	mcall	8000a7bc <show_chassis_sysErr+0x394>
	print_ecdbg("\r\n");
8000a56e:	fe fc 02 6e 	ld.w	r12,pc[622]
8000a572:	f0 1f 00 93 	mcall	8000a7bc <show_chassis_sysErr+0x394>
	
/*
 *	Flash
 */

	sprintf(str, "Flash (0..4)                           ");
8000a576:	ee c8 00 64 	sub	r8,r7,100
8000a57a:	32 8a       	mov	r10,40
8000a57c:	fe fb 02 68 	ld.w	r11,pc[616]
8000a580:	10 9c       	mov	r12,r8
8000a582:	f0 1f 00 91 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
	
	for (int i=0; i<5; i++)
8000a586:	30 08       	mov	r8,0
8000a588:	ef 48 ff f4 	st.w	r7[-12],r8
8000a58c:	c3 68       	rjmp	8000a5f8 <show_chassis_sysErr+0x1d0>
	{
		if ((sysErr.flashArea & BIT(i)) == SE_FAIL)
8000a58e:	fe f8 02 3a 	ld.w	r8,pc[570]
8000a592:	70 29       	ld.w	r9,r8[0x8]
8000a594:	30 1a       	mov	r10,1
8000a596:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a59a:	f4 08 09 48 	lsl	r8,r10,r8
8000a59e:	f3 e8 00 08 	and	r8,r9,r8
8000a5a2:	58 18       	cp.w	r8,1
8000a5a4:	c1 61       	brne	8000a5d0 <show_chassis_sysErr+0x1a8>
		{
			strcat(str, "F ");
8000a5a6:	ee c6 00 64 	sub	r6,r7,100
8000a5aa:	ee c8 00 64 	sub	r8,r7,100
8000a5ae:	10 9c       	mov	r12,r8
8000a5b0:	f0 1f 00 87 	mcall	8000a7cc <show_chassis_sysErr+0x3a4>
8000a5b4:	18 98       	mov	r8,r12
8000a5b6:	ec 08 00 08 	add	r8,r6,r8
8000a5ba:	30 3a       	mov	r10,3
8000a5bc:	fe fb 02 14 	ld.w	r11,pc[532]
8000a5c0:	10 9c       	mov	r12,r8
8000a5c2:	f0 1f 00 81 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
			electroclaveState = STATE_CHASSIS_ERROR;
8000a5c6:	fe f9 02 0e 	ld.w	r9,pc[526]
8000a5ca:	30 88       	mov	r8,8
8000a5cc:	b2 88       	st.b	r9[0x0],r8
8000a5ce:	c1 08       	rjmp	8000a5ee <show_chassis_sysErr+0x1c6>
		}
		else
		{
			strcat(str, "P ");
8000a5d0:	ee c6 00 64 	sub	r6,r7,100
8000a5d4:	ee c8 00 64 	sub	r8,r7,100
8000a5d8:	10 9c       	mov	r12,r8
8000a5da:	f0 1f 00 7d 	mcall	8000a7cc <show_chassis_sysErr+0x3a4>
8000a5de:	18 98       	mov	r8,r12
8000a5e0:	ec 08 00 08 	add	r8,r6,r8
8000a5e4:	30 3a       	mov	r10,3
8000a5e6:	4f db       	lddpc	r11,8000a7d8 <show_chassis_sysErr+0x3b0>
8000a5e8:	10 9c       	mov	r12,r8
8000a5ea:	f0 1f 00 77 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
 *	Flash
 */

	sprintf(str, "Flash (0..4)                           ");
	
	for (int i=0; i<5; i++)
8000a5ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a5f2:	2f f8       	sub	r8,-1
8000a5f4:	ef 48 ff f4 	st.w	r7[-12],r8
8000a5f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a5fc:	58 48       	cp.w	r8,4
8000a5fe:	fe 9a ff c8 	brle	8000a58e <show_chassis_sysErr+0x166>
		{
			strcat(str, "P ");
		}
	}
	
	print_ecdbg(str);
8000a602:	ee c8 00 64 	sub	r8,r7,100
8000a606:	10 9c       	mov	r12,r8
8000a608:	f0 1f 00 6d 	mcall	8000a7bc <show_chassis_sysErr+0x394>
	print_ecdbg("\r\n");
8000a60c:	4f 4c       	lddpc	r12,8000a7dc <show_chassis_sysErr+0x3b4>
8000a60e:	f0 1f 00 6c 	mcall	8000a7bc <show_chassis_sysErr+0x394>
	
/*
 * LED board serial ID checksums
 */	
	sprintf(str, "LED Board Serial ID Checksums (0..4)   ");
8000a612:	ee c8 00 64 	sub	r8,r7,100
8000a616:	32 8a       	mov	r10,40
8000a618:	4f 4b       	lddpc	r11,8000a7e8 <show_chassis_sysErr+0x3c0>
8000a61a:	10 9c       	mov	r12,r8
8000a61c:	f0 1f 00 6a 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
8000a620:	30 08       	mov	r8,0
8000a622:	ef 48 ff f8 	st.w	r7[-8],r8
8000a626:	c3 58       	rjmp	8000a690 <show_chassis_sysErr+0x268>
	{
		if ((sysErr.ledBrdSerialIdCsum & BIT(i)) == SE_FAIL)
8000a628:	4e 88       	lddpc	r8,8000a7c8 <show_chassis_sysErr+0x3a0>
8000a62a:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000a62e:	10 99       	mov	r9,r8
8000a630:	30 1a       	mov	r10,1
8000a632:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a636:	f4 08 09 48 	lsl	r8,r10,r8
8000a63a:	f3 e8 00 08 	and	r8,r9,r8
8000a63e:	58 18       	cp.w	r8,1
8000a640:	c1 41       	brne	8000a668 <show_chassis_sysErr+0x240>
		{
			strcat(str, "F ");
8000a642:	ee c6 00 64 	sub	r6,r7,100
8000a646:	ee c8 00 64 	sub	r8,r7,100
8000a64a:	10 9c       	mov	r12,r8
8000a64c:	f0 1f 00 60 	mcall	8000a7cc <show_chassis_sysErr+0x3a4>
8000a650:	18 98       	mov	r8,r12
8000a652:	ec 08 00 08 	add	r8,r6,r8
8000a656:	30 3a       	mov	r10,3
8000a658:	4d eb       	lddpc	r11,8000a7d0 <show_chassis_sysErr+0x3a8>
8000a65a:	10 9c       	mov	r12,r8
8000a65c:	f0 1f 00 5a 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
			electroclaveState = STATE_CHASSIS_ERROR;
8000a660:	4d d9       	lddpc	r9,8000a7d4 <show_chassis_sysErr+0x3ac>
8000a662:	30 88       	mov	r8,8
8000a664:	b2 88       	st.b	r9[0x0],r8
8000a666:	c1 08       	rjmp	8000a686 <show_chassis_sysErr+0x25e>
		}
		else
		{
			strcat(str, "P ");
8000a668:	ee c6 00 64 	sub	r6,r7,100
8000a66c:	ee c8 00 64 	sub	r8,r7,100
8000a670:	10 9c       	mov	r12,r8
8000a672:	f0 1f 00 57 	mcall	8000a7cc <show_chassis_sysErr+0x3a4>
8000a676:	18 98       	mov	r8,r12
8000a678:	ec 08 00 08 	add	r8,r6,r8
8000a67c:	30 3a       	mov	r10,3
8000a67e:	4d 7b       	lddpc	r11,8000a7d8 <show_chassis_sysErr+0x3b0>
8000a680:	10 9c       	mov	r12,r8
8000a682:	f0 1f 00 51 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
/*
 * LED board serial ID checksums
 */	
	sprintf(str, "LED Board Serial ID Checksums (0..4)   ");
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
8000a686:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a68a:	2f f8       	sub	r8,-1
8000a68c:	ef 48 ff f8 	st.w	r7[-8],r8
8000a690:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a694:	58 48       	cp.w	r8,4
8000a696:	fe 9a ff c9 	brle	8000a628 <show_chassis_sysErr+0x200>
		{
			strcat(str, "P ");
		}
	}

	print_ecdbg(str);
8000a69a:	ee c8 00 64 	sub	r8,r7,100
8000a69e:	10 9c       	mov	r12,r8
8000a6a0:	f0 1f 00 47 	mcall	8000a7bc <show_chassis_sysErr+0x394>
	print_ecdbg("\r\n");
8000a6a4:	4c ec       	lddpc	r12,8000a7dc <show_chassis_sysErr+0x3b4>
8000a6a6:	f0 1f 00 46 	mcall	8000a7bc <show_chassis_sysErr+0x394>
	

/*
 * LED Board Side Max Usage Reached
 */
	sprintf(str, "LED Board Side Max Usage (0..7)        ");
8000a6aa:	ee c8 00 64 	sub	r8,r7,100
8000a6ae:	32 8a       	mov	r10,40
8000a6b0:	4c fb       	lddpc	r11,8000a7ec <show_chassis_sysErr+0x3c4>
8000a6b2:	10 9c       	mov	r12,r8
8000a6b4:	f0 1f 00 44 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
8000a6b8:	30 08       	mov	r8,0
8000a6ba:	ef 48 ff fc 	st.w	r7[-4],r8
8000a6be:	c3 48       	rjmp	8000a726 <show_chassis_sysErr+0x2fe>
	{
		if (ledBrdSide[i].maxUsageReached)
8000a6c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a6c4:	4c ba       	lddpc	r10,8000a7f0 <show_chassis_sysErr+0x3c8>
8000a6c6:	12 98       	mov	r8,r9
8000a6c8:	a3 68       	lsl	r8,0x2
8000a6ca:	12 08       	add	r8,r9
8000a6cc:	f4 08 00 08 	add	r8,r10,r8
8000a6d0:	2f e8       	sub	r8,-2
8000a6d2:	11 88       	ld.ub	r8,r8[0x0]
8000a6d4:	58 08       	cp.w	r8,0
8000a6d6:	c1 40       	breq	8000a6fe <show_chassis_sysErr+0x2d6>
		{
			strcat(str, "F ");
8000a6d8:	ee c6 00 64 	sub	r6,r7,100
8000a6dc:	ee c8 00 64 	sub	r8,r7,100
8000a6e0:	10 9c       	mov	r12,r8
8000a6e2:	f0 1f 00 3b 	mcall	8000a7cc <show_chassis_sysErr+0x3a4>
8000a6e6:	18 98       	mov	r8,r12
8000a6e8:	ec 08 00 08 	add	r8,r6,r8
8000a6ec:	30 3a       	mov	r10,3
8000a6ee:	4b 9b       	lddpc	r11,8000a7d0 <show_chassis_sysErr+0x3a8>
8000a6f0:	10 9c       	mov	r12,r8
8000a6f2:	f0 1f 00 35 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
			electroclaveState = STATE_CHASSIS_ERROR;
8000a6f6:	4b 89       	lddpc	r9,8000a7d4 <show_chassis_sysErr+0x3ac>
8000a6f8:	30 88       	mov	r8,8
8000a6fa:	b2 88       	st.b	r9[0x0],r8
8000a6fc:	c1 08       	rjmp	8000a71c <show_chassis_sysErr+0x2f4>
		}
		else
		{
			strcat(str, "P ");
8000a6fe:	ee c6 00 64 	sub	r6,r7,100
8000a702:	ee c8 00 64 	sub	r8,r7,100
8000a706:	10 9c       	mov	r12,r8
8000a708:	f0 1f 00 31 	mcall	8000a7cc <show_chassis_sysErr+0x3a4>
8000a70c:	18 98       	mov	r8,r12
8000a70e:	ec 08 00 08 	add	r8,r6,r8
8000a712:	30 3a       	mov	r10,3
8000a714:	4b 1b       	lddpc	r11,8000a7d8 <show_chassis_sysErr+0x3b0>
8000a716:	10 9c       	mov	r12,r8
8000a718:	f0 1f 00 2b 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
/*
 * LED Board Side Max Usage Reached
 */
	sprintf(str, "LED Board Side Max Usage (0..7)        ");
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
8000a71c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a720:	2f f8       	sub	r8,-1
8000a722:	ef 48 ff fc 	st.w	r7[-4],r8
8000a726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a72a:	58 78       	cp.w	r8,7
8000a72c:	fe 9a ff ca 	brle	8000a6c0 <show_chassis_sysErr+0x298>
		{
			strcat(str, "P ");
		}
	}

	print_ecdbg(str);
8000a730:	ee c8 00 64 	sub	r8,r7,100
8000a734:	10 9c       	mov	r12,r8
8000a736:	f0 1f 00 22 	mcall	8000a7bc <show_chassis_sysErr+0x394>
	print_ecdbg("\r\n");
8000a73a:	4a 9c       	lddpc	r12,8000a7dc <show_chassis_sysErr+0x3b4>
8000a73c:	f0 1f 00 20 	mcall	8000a7bc <show_chassis_sysErr+0x394>

/*
 * Usage Struct Full
 */

	sprintf(str, "Usage Struct Open Slots                ");
8000a740:	ee c8 00 64 	sub	r8,r7,100
8000a744:	32 8a       	mov	r10,40
8000a746:	4a cb       	lddpc	r11,8000a7f4 <show_chassis_sysErr+0x3cc>
8000a748:	10 9c       	mov	r12,r8
8000a74a:	f0 1f 00 1f 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
	if (sysErr.usageStructsFull == SE_FAIL)
8000a74e:	49 f8       	lddpc	r8,8000a7c8 <show_chassis_sysErr+0x3a0>
8000a750:	f1 39 00 0e 	ld.ub	r9,r8[14]
8000a754:	30 18       	mov	r8,1
8000a756:	f0 09 18 00 	cp.b	r9,r8
8000a75a:	c1 41       	brne	8000a782 <show_chassis_sysErr+0x35a>
	{
		strcat(str, "F \r\n");
8000a75c:	ee c6 00 64 	sub	r6,r7,100
8000a760:	ee c8 00 64 	sub	r8,r7,100
8000a764:	10 9c       	mov	r12,r8
8000a766:	f0 1f 00 1a 	mcall	8000a7cc <show_chassis_sysErr+0x3a4>
8000a76a:	18 98       	mov	r8,r12
8000a76c:	ec 08 00 08 	add	r8,r6,r8
8000a770:	30 5a       	mov	r10,5
8000a772:	4a 2b       	lddpc	r11,8000a7f8 <show_chassis_sysErr+0x3d0>
8000a774:	10 9c       	mov	r12,r8
8000a776:	f0 1f 00 14 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
		electroclaveState = STATE_CHASSIS_ERROR;
8000a77a:	49 79       	lddpc	r9,8000a7d4 <show_chassis_sysErr+0x3ac>
8000a77c:	30 88       	mov	r8,8
8000a77e:	b2 88       	st.b	r9[0x0],r8
8000a780:	c1 08       	rjmp	8000a7a0 <show_chassis_sysErr+0x378>
	}
	else
	{
		strcat(str, "P \r\n");
8000a782:	ee c6 00 64 	sub	r6,r7,100
8000a786:	ee c8 00 64 	sub	r8,r7,100
8000a78a:	10 9c       	mov	r12,r8
8000a78c:	f0 1f 00 10 	mcall	8000a7cc <show_chassis_sysErr+0x3a4>
8000a790:	18 98       	mov	r8,r12
8000a792:	ec 08 00 08 	add	r8,r6,r8
8000a796:	30 5a       	mov	r10,5
8000a798:	49 9b       	lddpc	r11,8000a7fc <show_chassis_sysErr+0x3d4>
8000a79a:	10 9c       	mov	r12,r8
8000a79c:	f0 1f 00 0a 	mcall	8000a7c4 <show_chassis_sysErr+0x39c>
	}
	
	print_ecdbg(str);
8000a7a0:	ee c8 00 64 	sub	r8,r7,100
8000a7a4:	10 9c       	mov	r12,r8
8000a7a6:	f0 1f 00 06 	mcall	8000a7bc <show_chassis_sysErr+0x394>
	print_ecdbg("\r\n");
8000a7aa:	48 dc       	lddpc	r12,8000a7dc <show_chassis_sysErr+0x3b4>
8000a7ac:	f0 1f 00 04 	mcall	8000a7bc <show_chassis_sysErr+0x394>

}
8000a7b0:	2e 7d       	sub	sp,-100
8000a7b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a7b6:	00 00       	add	r0,r0
8000a7b8:	80 00       	ld.sh	r0,r0[0x0]
8000a7ba:	6a a4       	ld.w	r4,r5[0x28]
8000a7bc:	80 00       	ld.sh	r0,r0[0x0]
8000a7be:	33 38       	mov	r8,51
8000a7c0:	80 00       	ld.sh	r0,r0[0x0]
8000a7c2:	6a c0       	ld.w	r0,r5[0x30]
8000a7c4:	80 00       	ld.sh	r0,r0[0x0]
8000a7c6:	ca f6       	brmi	8000a724 <show_chassis_sysErr+0x2fc>
8000a7c8:	00 00       	add	r0,r0
8000a7ca:	0b d4       	ld.ub	r4,r5[0x5]
8000a7cc:	80 00       	ld.sh	r0,r0[0x0]
8000a7ce:	cc 8c       	rcall	8000a95e <service_ecdbg_input+0x2>
8000a7d0:	80 00       	ld.sh	r0,r0[0x0]
8000a7d2:	6a e8       	ld.w	r8,r5[0x38]
8000a7d4:	00 00       	add	r0,r0
8000a7d6:	07 b8       	ld.ub	r8,r3[0x3]
8000a7d8:	80 00       	ld.sh	r0,r0[0x0]
8000a7da:	6a ec       	ld.w	r12,r5[0x38]
8000a7dc:	80 00       	ld.sh	r0,r0[0x0]
8000a7de:	64 ec       	ld.w	r12,r2[0x38]
8000a7e0:	80 00       	ld.sh	r0,r0[0x0]
8000a7e2:	6a f0       	ld.w	r0,r5[0x3c]
8000a7e4:	80 00       	ld.sh	r0,r0[0x0]
8000a7e6:	6b 18       	ld.w	r8,r5[0x44]
8000a7e8:	80 00       	ld.sh	r0,r0[0x0]
8000a7ea:	6b 40       	ld.w	r0,r5[0x50]
8000a7ec:	80 00       	ld.sh	r0,r0[0x0]
8000a7ee:	6b 68       	ld.w	r8,r5[0x58]
8000a7f0:	00 00       	add	r0,r0
8000a7f2:	0b fe       	ld.ub	lr,r5[0x7]
8000a7f4:	80 00       	ld.sh	r0,r0[0x0]
8000a7f6:	6b 90       	ld.w	r0,r5[0x64]
8000a7f8:	80 00       	ld.sh	r0,r0[0x0]
8000a7fa:	6b b8       	ld.w	r8,r5[0x6c]
8000a7fc:	80 00       	ld.sh	r0,r0[0x0]
8000a7fe:	6b c0       	ld.w	r0,r5[0x70]

8000a800 <show_chassis_all_LED_boards>:

void show_chassis_all_LED_boards(void);
void show_chassis_all_LED_boards(void)
{
8000a800:	eb cd 40 c0 	pushm	r6-r7,lr
8000a804:	1a 97       	mov	r7,sp
8000a806:	21 5d       	sub	sp,84
	char str[80];
	int i = 0;
8000a808:	30 08       	mov	r8,0
8000a80a:	ef 48 ff fc 	st.w	r7[-4],r8

	print_ecdbg("\r\n***LED BOARDS MASTER LIST***\r\n\r\n");
8000a80e:	4c 4c       	lddpc	r12,8000a91c <show_chassis_all_LED_boards+0x11c>
8000a810:	f0 1f 00 44 	mcall	8000a920 <show_chassis_all_LED_boards+0x120>
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
				usageShdw[0].u[i].id[0],usageShdw[0].u[i].id[1],usageShdw[0].u[i].id[2],usageShdw[0].u[i].id[3],usageShdw[0].u[i].id[4],usageShdw[0].u[i].id[5]);
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
8000a814:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a818:	4c 38       	lddpc	r8,8000a924 <show_chassis_all_LED_boards+0x124>
8000a81a:	a1 79       	lsl	r9,0x1
8000a81c:	2f f9       	sub	r9,-1
8000a81e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000a822:	f1 d8 c1 a1 	bfextu	r8,r8,0xd,0x1
8000a826:	5c 58       	castu.b	r8
8000a828:	c7 40       	breq	8000a910 <show_chassis_all_LED_boards+0x110>
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
8000a82a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a82e:	4b e9       	lddpc	r9,8000a924 <show_chassis_all_LED_boards+0x124>
8000a830:	a3 78       	lsl	r8,0x3
8000a832:	f2 08 00 08 	add	r8,r9,r8
8000a836:	11 d8       	ld.ub	r8,r8[0x5]
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
8000a838:	10 96       	mov	r6,r8
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
8000a83a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a83e:	4b a8       	lddpc	r8,8000a924 <show_chassis_all_LED_boards+0x124>
8000a840:	a1 79       	lsl	r9,0x1
8000a842:	2f f9       	sub	r9,-1
8000a844:	f0 09 07 28 	ld.ub	r8,r8[r9<<0x2]
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
8000a848:	10 9e       	mov	lr,r8
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
8000a84a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a84e:	4b 69       	lddpc	r9,8000a924 <show_chassis_all_LED_boards+0x124>
8000a850:	a3 78       	lsl	r8,0x3
8000a852:	f2 08 00 08 	add	r8,r9,r8
8000a856:	11 b8       	ld.ub	r8,r8[0x3]
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
8000a858:	10 9c       	mov	r12,r8
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
8000a85a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a85e:	4b 28       	lddpc	r8,8000a924 <show_chassis_all_LED_boards+0x124>
8000a860:	a3 69       	lsl	r9,0x2
8000a862:	2f f9       	sub	r9,-1
8000a864:	f0 09 07 18 	ld.ub	r8,r8[r9<<0x1]
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
8000a868:	10 9b       	mov	r11,r8
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
8000a86a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a86e:	4a e9       	lddpc	r9,8000a924 <show_chassis_all_LED_boards+0x124>
8000a870:	a3 78       	lsl	r8,0x3
8000a872:	f2 08 00 08 	add	r8,r9,r8
8000a876:	11 98       	ld.ub	r8,r8[0x1]
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
8000a878:	10 9a       	mov	r10,r8
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
8000a87a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a87e:	4a a8       	lddpc	r8,8000a924 <show_chassis_all_LED_boards+0x124>
8000a880:	f0 09 07 38 	ld.ub	r8,r8[r9<<0x3]
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
8000a884:	10 99       	mov	r9,r8
8000a886:	ee c8 00 54 	sub	r8,r7,84
8000a88a:	1a d6       	st.w	--sp,r6
8000a88c:	1a de       	st.w	--sp,lr
8000a88e:	1a dc       	st.w	--sp,r12
8000a890:	1a db       	st.w	--sp,r11
8000a892:	1a da       	st.w	--sp,r10
8000a894:	1a d9       	st.w	--sp,r9
8000a896:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a89a:	1a d9       	st.w	--sp,r9
8000a89c:	4a 3b       	lddpc	r11,8000a928 <show_chassis_all_LED_boards+0x128>
8000a89e:	10 9c       	mov	r12,r8
8000a8a0:	f0 1f 00 23 	mcall	8000a92c <show_chassis_all_LED_boards+0x12c>
8000a8a4:	2f 9d       	sub	sp,-28
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
			
			if (sf[i].top_botn)
8000a8a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a8aa:	49 f8       	lddpc	r8,8000a924 <show_chassis_all_LED_boards+0x124>
8000a8ac:	a1 79       	lsl	r9,0x1
8000a8ae:	2f f9       	sub	r9,-1
8000a8b0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000a8b4:	f1 d8 c1 e1 	bfextu	r8,r8,0xf,0x1
8000a8b8:	5c 58       	castu.b	r8
8000a8ba:	c1 10       	breq	8000a8dc <show_chassis_all_LED_boards+0xdc>

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED			
			{
				strcat(str, " TOP\r\n");
8000a8bc:	ee c6 00 54 	sub	r6,r7,84
8000a8c0:	ee c8 00 54 	sub	r8,r7,84
8000a8c4:	10 9c       	mov	r12,r8
8000a8c6:	f0 1f 00 1b 	mcall	8000a930 <show_chassis_all_LED_boards+0x130>
8000a8ca:	18 98       	mov	r8,r12
8000a8cc:	ec 08 00 08 	add	r8,r6,r8
8000a8d0:	30 7a       	mov	r10,7
8000a8d2:	49 9b       	lddpc	r11,8000a934 <show_chassis_all_LED_boards+0x134>
8000a8d4:	10 9c       	mov	r12,r8
8000a8d6:	f0 1f 00 19 	mcall	8000a938 <show_chassis_all_LED_boards+0x138>
8000a8da:	c1 08       	rjmp	8000a8fa <show_chassis_all_LED_boards+0xfa>
			}
			else
			{
				strcat(str, " BOT\r\n");
8000a8dc:	ee c6 00 54 	sub	r6,r7,84
8000a8e0:	ee c8 00 54 	sub	r8,r7,84
8000a8e4:	10 9c       	mov	r12,r8
8000a8e6:	f0 1f 00 13 	mcall	8000a930 <show_chassis_all_LED_boards+0x130>
8000a8ea:	18 98       	mov	r8,r12
8000a8ec:	ec 08 00 08 	add	r8,r6,r8
8000a8f0:	30 7a       	mov	r10,7
8000a8f2:	49 3b       	lddpc	r11,8000a93c <show_chassis_all_LED_boards+0x13c>
8000a8f4:	10 9c       	mov	r12,r8
8000a8f6:	f0 1f 00 11 	mcall	8000a938 <show_chassis_all_LED_boards+0x138>
			}
			
			print_ecdbg(str);
8000a8fa:	ee c8 00 54 	sub	r8,r7,84
8000a8fe:	10 9c       	mov	r12,r8
8000a900:	f0 1f 00 08 	mcall	8000a920 <show_chassis_all_LED_boards+0x120>
		}
		else
		{
			break; //LED boards are stored contiguously, so if we hit a blank spot we are done with the entries in the list
		}
		i++;
8000a904:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a908:	2f f8       	sub	r8,-1
8000a90a:	ef 48 ff fc 	st.w	r7[-4],r8
		
	}
8000a90e:	c8 3b       	rjmp	8000a814 <show_chassis_all_LED_boards+0x14>
	
	print_ecdbg("\r\n\r\n");
8000a910:	48 cc       	lddpc	r12,8000a940 <show_chassis_all_LED_boards+0x140>
8000a912:	f0 1f 00 04 	mcall	8000a920 <show_chassis_all_LED_boards+0x120>

}
8000a916:	2e bd       	sub	sp,-84
8000a918:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a91c:	80 00       	ld.sh	r0,r0[0x0]
8000a91e:	6b c8       	ld.w	r8,r5[0x70]
8000a920:	80 00       	ld.sh	r0,r0[0x0]
8000a922:	33 38       	mov	r8,51
8000a924:	00 00       	add	r0,r0
8000a926:	08 48       	or	r8,r4
8000a928:	80 00       	ld.sh	r0,r0[0x0]
8000a92a:	6b ec       	ld.w	r12,r5[0x78]
8000a92c:	80 00       	ld.sh	r0,r0[0x0]
8000a92e:	cc 4c       	rcall	8000aab6 <service_ecdbg_input+0x15a>
8000a930:	80 00       	ld.sh	r0,r0[0x0]
8000a932:	cc 8c       	rcall	8000aac2 <service_ecdbg_input+0x166>
8000a934:	80 00       	ld.sh	r0,r0[0x0]
8000a936:	6c 0c       	ld.w	r12,r6[0x0]
8000a938:	80 00       	ld.sh	r0,r0[0x0]
8000a93a:	ca f6       	brmi	8000a898 <show_chassis_all_LED_boards+0x98>
8000a93c:	80 00       	ld.sh	r0,r0[0x0]
8000a93e:	6c 14       	ld.w	r4,r6[0x4]
8000a940:	80 00       	ld.sh	r0,r0[0x0]
8000a942:	6c 1c       	ld.w	r12,r6[0x4]

8000a944 <show_help_and_prompt>:

void show_help_and_prompt(void);
void show_help_and_prompt(void)
{
8000a944:	eb cd 40 80 	pushm	r7,lr
8000a948:	1a 97       	mov	r7,sp
	print_ecdbg("Type 'H' for help.\r\n\r\n");
8000a94a:	48 3c       	lddpc	r12,8000a954 <show_help_and_prompt+0x10>
8000a94c:	f0 1f 00 03 	mcall	8000a958 <show_help_and_prompt+0x14>
}
8000a950:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a954:	80 00       	ld.sh	r0,r0[0x0]
8000a956:	6c 24       	ld.w	r4,r6[0x8]
8000a958:	80 00       	ld.sh	r0,r0[0x0]
8000a95a:	33 38       	mov	r8,51

8000a95c <service_ecdbg_input>:
char cmd[20];
unsigned char cmdIdx = 0;

void service_ecdbg_input(void);
void service_ecdbg_input(void)
{
8000a95c:	eb cd 40 80 	pushm	r7,lr
8000a960:	1a 97       	mov	r7,sp
8000a962:	20 3d       	sub	sp,12
	int rx_char;
	unsigned int tmpNewDte;
	unsigned char tryToChangeDte = 0;
8000a964:	30 08       	mov	r8,0
8000a966:	ef 68 ff ff 	st.b	r7[-1],r8

	if (usart_read_char(ECDBG_USART, &rx_char) != USART_SUCCESS)
8000a96a:	ee c8 00 0c 	sub	r8,r7,12
8000a96e:	10 9b       	mov	r11,r8
8000a970:	fe 7c 28 00 	mov	r12,-55296
8000a974:	f0 1f 00 b2 	mcall	8000ac3c <service_ecdbg_input+0x2e0>
8000a978:	18 98       	mov	r8,r12
8000a97a:	58 08       	cp.w	r8,0
8000a97c:	e0 81 01 4d 	brne	8000ac16 <service_ecdbg_input+0x2ba>
	{
		return;
	}

	if (rx_char == USART_FAILURE)
8000a980:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a984:	5b f8       	cp.w	r8,-1
8000a986:	e0 80 01 4a 	breq	8000ac1a <service_ecdbg_input+0x2be>
	{
//26may15 why are we getting this? ignore for now		usart_write_line(ECDBG_USART, "UART error\r\n");
		return;
	}
	if (rx_char == '\x03')
8000a98a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a98e:	58 38       	cp.w	r8,3
8000a990:	e0 80 01 47 	breq	8000ac1e <service_ecdbg_input+0x2c2>
	{
		return;
	}
	
	if ((rx_char < 0x0a) || (rx_char > 0x7a))
8000a994:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a998:	58 98       	cp.w	r8,9
8000a99a:	e0 8a 01 44 	brle	8000ac22 <service_ecdbg_input+0x2c6>
8000a99e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a9a2:	e0 48 00 7a 	cp.w	r8,122
8000a9a6:	e0 89 01 40 	brgt	8000ac26 <service_ecdbg_input+0x2ca>
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a9aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a9ae:	58 d8       	cp.w	r8,13
8000a9b0:	c2 e0       	breq	8000aa0c <service_ecdbg_input+0xb0>
		(rx_char == 0x0a) ||							//line feed
8000a9b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a9b6:	58 a8       	cp.w	r8,10
8000a9b8:	c2 a0       	breq	8000aa0c <service_ecdbg_input+0xb0>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
8000a9ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a9be:	e0 48 00 20 	cp.w	r8,32
8000a9c2:	c2 50       	breq	8000aa0c <service_ecdbg_input+0xb0>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
8000a9c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a9c8:	e0 48 00 2f 	cp.w	r8,47
8000a9cc:	e0 8a 00 08 	brle	8000a9dc <service_ecdbg_input+0x80>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
8000a9d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a9d4:	e0 48 00 39 	cp.w	r8,57
8000a9d8:	e0 8a 00 1a 	brle	8000aa0c <service_ecdbg_input+0xb0>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
8000a9dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a9e0:	e0 48 00 40 	cp.w	r8,64
8000a9e4:	e0 8a 00 08 	brle	8000a9f4 <service_ecdbg_input+0x98>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
8000a9e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a9ec:	e0 48 00 5a 	cp.w	r8,90
8000a9f0:	e0 8a 00 0e 	brle	8000aa0c <service_ecdbg_input+0xb0>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
8000a9f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a9f8:	e0 48 00 60 	cp.w	r8,96
8000a9fc:	e0 8a 01 17 	brle	8000ac2a <service_ecdbg_input+0x2ce>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
8000aa00:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000aa04:	e0 48 00 7a 	cp.w	r8,122
8000aa08:	e0 89 01 13 	brgt	8000ac2e <service_ecdbg_input+0x2d2>
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
	{
		if (rx_char == 0x50)
8000aa0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa10:	e0 48 00 50 	cp.w	r8,80
8000aa14:	e0 80 01 0f 	breq	8000ac32 <service_ecdbg_input+0x2d6>
	{
		return;
	}


	cmd[cmdIdx++] = rx_char;
8000aa18:	fe f8 02 28 	ld.w	r8,pc[552]
8000aa1c:	11 88       	ld.ub	r8,r8[0x0]
8000aa1e:	10 9a       	mov	r10,r8
8000aa20:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000aa24:	5c 59       	castu.b	r9
8000aa26:	fe fb 02 1e 	ld.w	r11,pc[542]
8000aa2a:	f6 0a 0b 09 	st.b	r11[r10],r9
8000aa2e:	2f f8       	sub	r8,-1
8000aa30:	5c 58       	castu.b	r8
8000aa32:	fe f9 02 0e 	ld.w	r9,pc[526]
8000aa36:	b2 88       	st.b	r9[0x0],r8
	
	usart_putchar(ECDBG_USART, rx_char);
8000aa38:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa3c:	10 9b       	mov	r11,r8
8000aa3e:	fe 7c 28 00 	mov	r12,-55296
8000aa42:	f0 1f 00 82 	mcall	8000ac48 <service_ecdbg_input+0x2ec>
	if (rx_char == '\r')
8000aa46:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa4a:	58 d8       	cp.w	r8,13
8000aa4c:	e0 81 00 f4 	brne	8000ac34 <service_ecdbg_input+0x2d8>
	{ 
		if (cmdIdx == 2)
8000aa50:	4f c8       	lddpc	r8,8000ac40 <service_ecdbg_input+0x2e4>
8000aa52:	11 89       	ld.ub	r9,r8[0x0]
8000aa54:	30 28       	mov	r8,2
8000aa56:	f0 09 18 00 	cp.b	r9,r8
8000aa5a:	c4 d1       	brne	8000aaf4 <service_ecdbg_input+0x198>
		{
			switch(cmd[0])
8000aa5c:	4f a8       	lddpc	r8,8000ac44 <service_ecdbg_input+0x2e8>
8000aa5e:	11 88       	ld.ub	r8,r8[0x0]
8000aa60:	e0 48 00 53 	cp.w	r8,83
8000aa64:	c3 d0       	breq	8000aade <service_ecdbg_input+0x182>
8000aa66:	e0 89 00 09 	brgt	8000aa78 <service_ecdbg_input+0x11c>
8000aa6a:	e0 48 00 44 	cp.w	r8,68
8000aa6e:	c2 b0       	breq	8000aac4 <service_ecdbg_input+0x168>
8000aa70:	e0 48 00 48 	cp.w	r8,72
8000aa74:	c0 c0       	breq	8000aa8c <service_ecdbg_input+0x130>
				case 's':
					show_sw_version();
					show_chassis_status_info();
					show_chassis_sysErr();
					show_chassis_all_LED_boards();
					show_help_and_prompt();
8000aa76:	cc 88       	rjmp	8000ac06 <service_ecdbg_input+0x2aa>
	usart_putchar(ECDBG_USART, rx_char);
	if (rx_char == '\r')
	{ 
		if (cmdIdx == 2)
		{
			switch(cmd[0])
8000aa78:	e0 48 00 68 	cp.w	r8,104
8000aa7c:	c0 80       	breq	8000aa8c <service_ecdbg_input+0x130>
8000aa7e:	e0 48 00 73 	cp.w	r8,115
8000aa82:	c2 e0       	breq	8000aade <service_ecdbg_input+0x182>
8000aa84:	e0 48 00 64 	cp.w	r8,100
8000aa88:	c1 e0       	breq	8000aac4 <service_ecdbg_input+0x168>
				case 's':
					show_sw_version();
					show_chassis_status_info();
					show_chassis_sysErr();
					show_chassis_all_LED_boards();
					show_help_and_prompt();
8000aa8a:	cb e8       	rjmp	8000ac06 <service_ecdbg_input+0x2aa>
		{
			switch(cmd[0])
			{
				case 'H':
				case 'h':
					print_ecdbg("\r\n**-----------------**\r\n");
8000aa8c:	4f 0c       	lddpc	r12,8000ac4c <service_ecdbg_input+0x2f0>
8000aa8e:	f0 1f 00 71 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
					print_ecdbg("  Electroclave HELP\r\n");
8000aa92:	4f 1c       	lddpc	r12,8000ac54 <service_ecdbg_input+0x2f8>
8000aa94:	f0 1f 00 6f 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
					print_ecdbg("**-----------------**\r\n");
8000aa98:	4f 0c       	lddpc	r12,8000ac58 <service_ecdbg_input+0x2fc>
8000aa9a:	f0 1f 00 6e 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
					print_ecdbg("    H        - This help menu\r\n");
8000aa9e:	4f 0c       	lddpc	r12,8000ac5c <service_ecdbg_input+0x300>
8000aaa0:	f0 1f 00 6c 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
					print_ecdbg("    D        - Show current DTE setting\r\n");
8000aaa4:	4e fc       	lddpc	r12,8000ac60 <service_ecdbg_input+0x304>
8000aaa6:	f0 1f 00 6b 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
					print_ecdbg("    D  xx    - Change initial DTE to xx minutes where 2 >= xx >= 59.\r\n");
8000aaaa:	4e fc       	lddpc	r12,8000ac64 <service_ecdbg_input+0x308>
8000aaac:	f0 1f 00 69 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
					print_ecdbg("    S        - System status\r\n");
8000aab0:	4e ec       	lddpc	r12,8000ac68 <service_ecdbg_input+0x30c>
8000aab2:	f0 1f 00 68 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
					print_ecdbg("**-----------------**\r\n");
8000aab6:	4e 9c       	lddpc	r12,8000ac58 <service_ecdbg_input+0x2fc>
8000aab8:	f0 1f 00 66 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
					print_ecdbg(">");
8000aabc:	4e cc       	lddpc	r12,8000ac6c <service_ecdbg_input+0x310>
8000aabe:	f0 1f 00 65 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
					break;
8000aac2:	ca 28       	rjmp	8000ac06 <service_ecdbg_input+0x2aa>
				case 'D':
				case 'd':
					print_ecdbg("Initial DTE set to: ");
8000aac4:	4e bc       	lddpc	r12,8000ac70 <service_ecdbg_input+0x314>
8000aac6:	f0 1f 00 63 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
					print_ecdbg_num(c.initialDTE);
8000aaca:	4e b8       	lddpc	r8,8000ac74 <service_ecdbg_input+0x318>
8000aacc:	11 88       	ld.ub	r8,r8[0x0]
8000aace:	10 9c       	mov	r12,r8
8000aad0:	f0 1f 00 6a 	mcall	8000ac78 <service_ecdbg_input+0x31c>
					print_ecdbg(" minutes.\r\n>");
8000aad4:	4e ac       	lddpc	r12,8000ac7c <service_ecdbg_input+0x320>
8000aad6:	f0 1f 00 5f 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
					break;
8000aada:	d7 03       	nop
8000aadc:	c9 58       	rjmp	8000ac06 <service_ecdbg_input+0x2aa>
				case 'S':
				case 's':
					show_sw_version();
8000aade:	f0 1f 00 69 	mcall	8000ac80 <service_ecdbg_input+0x324>
					show_chassis_status_info();
8000aae2:	f0 1f 00 69 	mcall	8000ac84 <service_ecdbg_input+0x328>
					show_chassis_sysErr();
8000aae6:	f0 1f 00 69 	mcall	8000ac88 <service_ecdbg_input+0x32c>
					show_chassis_all_LED_boards();
8000aaea:	f0 1f 00 69 	mcall	8000ac8c <service_ecdbg_input+0x330>
					show_help_and_prompt();
8000aaee:	f0 1f 00 69 	mcall	8000ac90 <service_ecdbg_input+0x334>
8000aaf2:	c8 a8       	rjmp	8000ac06 <service_ecdbg_input+0x2aa>
					break;
			}
		}
		else if (cmd[1] == ' ')
8000aaf4:	4d 48       	lddpc	r8,8000ac44 <service_ecdbg_input+0x2e8>
8000aaf6:	11 99       	ld.ub	r9,r8[0x1]
8000aaf8:	32 08       	mov	r8,32
8000aafa:	f0 09 18 00 	cp.b	r9,r8
8000aafe:	e0 81 00 84 	brne	8000ac06 <service_ecdbg_input+0x2aa>
		{
			if ((cmd[0] == 'D') || (cmd[0] == 'd'))
8000ab02:	4d 18       	lddpc	r8,8000ac44 <service_ecdbg_input+0x2e8>
8000ab04:	11 89       	ld.ub	r9,r8[0x0]
8000ab06:	34 48       	mov	r8,68
8000ab08:	f0 09 18 00 	cp.b	r9,r8
8000ab0c:	c0 70       	breq	8000ab1a <service_ecdbg_input+0x1be>
8000ab0e:	4c e8       	lddpc	r8,8000ac44 <service_ecdbg_input+0x2e8>
8000ab10:	11 89       	ld.ub	r9,r8[0x0]
8000ab12:	36 48       	mov	r8,100
8000ab14:	f0 09 18 00 	cp.b	r9,r8
8000ab18:	c7 71       	brne	8000ac06 <service_ecdbg_input+0x2aa>
			{
				if (cmdIdx == 4)
8000ab1a:	4c a8       	lddpc	r8,8000ac40 <service_ecdbg_input+0x2e4>
8000ab1c:	11 89       	ld.ub	r9,r8[0x0]
8000ab1e:	30 48       	mov	r8,4
8000ab20:	f0 09 18 00 	cp.b	r9,r8
8000ab24:	c1 41       	brne	8000ab4c <service_ecdbg_input+0x1f0>
				{
					if (isdigit(cmd[2]))
8000ab26:	4d c8       	lddpc	r8,8000ac94 <service_ecdbg_input+0x338>
8000ab28:	70 09       	ld.w	r9,r8[0x0]
8000ab2a:	4c 78       	lddpc	r8,8000ac44 <service_ecdbg_input+0x2e8>
8000ab2c:	11 a8       	ld.ub	r8,r8[0x2]
8000ab2e:	f2 08 00 08 	add	r8,r9,r8
8000ab32:	11 88       	ld.ub	r8,r8[0x0]
8000ab34:	e2 18 00 04 	andl	r8,0x4,COH
8000ab38:	c3 c0       	breq	8000abb0 <service_ecdbg_input+0x254>
					{
						tmpNewDte = cmd[2] - 0x30;
8000ab3a:	4c 38       	lddpc	r8,8000ac44 <service_ecdbg_input+0x2e8>
8000ab3c:	11 a8       	ld.ub	r8,r8[0x2]
8000ab3e:	23 08       	sub	r8,48
8000ab40:	ef 48 ff f8 	st.w	r7[-8],r8
						tryToChangeDte = 1;
8000ab44:	30 18       	mov	r8,1
8000ab46:	ef 68 ff ff 	st.b	r7[-1],r8
8000ab4a:	c3 38       	rjmp	8000abb0 <service_ecdbg_input+0x254>
					}					
				}
				else if (cmdIdx == 5)
8000ab4c:	4b d8       	lddpc	r8,8000ac40 <service_ecdbg_input+0x2e4>
8000ab4e:	11 89       	ld.ub	r9,r8[0x0]
8000ab50:	30 58       	mov	r8,5
8000ab52:	f0 09 18 00 	cp.b	r9,r8
8000ab56:	c2 d1       	brne	8000abb0 <service_ecdbg_input+0x254>
				{
					if (isdigit(cmd[2]) && (isdigit(cmd[3])))
8000ab58:	4c f8       	lddpc	r8,8000ac94 <service_ecdbg_input+0x338>
8000ab5a:	70 09       	ld.w	r9,r8[0x0]
8000ab5c:	4b a8       	lddpc	r8,8000ac44 <service_ecdbg_input+0x2e8>
8000ab5e:	11 a8       	ld.ub	r8,r8[0x2]
8000ab60:	f2 08 00 08 	add	r8,r9,r8
8000ab64:	11 88       	ld.ub	r8,r8[0x0]
8000ab66:	e2 18 00 04 	andl	r8,0x4,COH
8000ab6a:	c2 30       	breq	8000abb0 <service_ecdbg_input+0x254>
8000ab6c:	4c a8       	lddpc	r8,8000ac94 <service_ecdbg_input+0x338>
8000ab6e:	70 09       	ld.w	r9,r8[0x0]
8000ab70:	4b 58       	lddpc	r8,8000ac44 <service_ecdbg_input+0x2e8>
8000ab72:	11 b8       	ld.ub	r8,r8[0x3]
8000ab74:	f2 08 00 08 	add	r8,r9,r8
8000ab78:	11 88       	ld.ub	r8,r8[0x0]
8000ab7a:	e2 18 00 04 	andl	r8,0x4,COH
8000ab7e:	c1 90       	breq	8000abb0 <service_ecdbg_input+0x254>
					{
						tmpNewDte = (cmd[2]-0x30) * 10;
8000ab80:	4b 18       	lddpc	r8,8000ac44 <service_ecdbg_input+0x2e8>
8000ab82:	11 a8       	ld.ub	r8,r8[0x2]
8000ab84:	10 99       	mov	r9,r8
8000ab86:	12 98       	mov	r8,r9
8000ab88:	a3 68       	lsl	r8,0x2
8000ab8a:	12 08       	add	r8,r9
8000ab8c:	a1 78       	lsl	r8,0x1
8000ab8e:	f0 c8 01 e0 	sub	r8,r8,480
8000ab92:	ef 48 ff f8 	st.w	r7[-8],r8
						tmpNewDte += (cmd[3] - 0x30);
8000ab96:	4a c8       	lddpc	r8,8000ac44 <service_ecdbg_input+0x2e8>
8000ab98:	11 b8       	ld.ub	r8,r8[0x3]
8000ab9a:	10 99       	mov	r9,r8
8000ab9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aba0:	f2 08 00 08 	add	r8,r9,r8
8000aba4:	23 08       	sub	r8,48
8000aba6:	ef 48 ff f8 	st.w	r7[-8],r8
						tryToChangeDte = 1;
8000abaa:	30 18       	mov	r8,1
8000abac:	ef 68 ff ff 	st.b	r7[-1],r8
					}
				}
				if (tryToChangeDte)
8000abb0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000abb4:	30 08       	mov	r8,0
8000abb6:	f0 09 18 00 	cp.b	r9,r8
8000abba:	c2 60       	breq	8000ac06 <service_ecdbg_input+0x2aa>
				{
					if ((tmpNewDte < 60) && (tmpNewDte > 1))
8000abbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000abc0:	e0 48 00 3b 	cp.w	r8,59
8000abc4:	e0 8b 00 1b 	brhi	8000abfa <service_ecdbg_input+0x29e>
8000abc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000abcc:	58 18       	cp.w	r8,1
8000abce:	e0 88 00 16 	brls	8000abfa <service_ecdbg_input+0x29e>
					{
						print_ecdbg("Initial DTE now set to: ");
8000abd2:	4b 2c       	lddpc	r12,8000ac98 <service_ecdbg_input+0x33c>
8000abd4:	f0 1f 00 1f 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
						print_ecdbg_num(tmpNewDte);
8000abd8:	ee fc ff f8 	ld.w	r12,r7[-8]
8000abdc:	f0 1f 00 27 	mcall	8000ac78 <service_ecdbg_input+0x31c>
						print_ecdbg("\r\n>");
8000abe0:	4a fc       	lddpc	r12,8000ac9c <service_ecdbg_input+0x340>
8000abe2:	f0 1f 00 1c 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
						
						c.initialDTE = tmpNewDte;
8000abe6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000abea:	5c 58       	castu.b	r8
8000abec:	4a 29       	lddpc	r9,8000ac74 <service_ecdbg_input+0x318>
8000abee:	b2 88       	st.b	r9[0x0],r8
						
						store_config();
8000abf0:	f0 1f 00 2c 	mcall	8000aca0 <service_ecdbg_input+0x344>
						store_config(); //do this twice to store it in both buffers to make extra sure we got it
8000abf4:	f0 1f 00 2b 	mcall	8000aca0 <service_ecdbg_input+0x344>
						tryToChangeDte = 1;
					}
				}
				if (tryToChangeDte)
				{
					if ((tmpNewDte < 60) && (tmpNewDte > 1))
8000abf8:	c0 78       	rjmp	8000ac06 <service_ecdbg_input+0x2aa>
						store_config(); //do this twice to store it in both buffers to make extra sure we got it
						
					}
					else
					{
						print_ecdbg("Error. Initial DTE not modified. \r\n");
8000abfa:	4a bc       	lddpc	r12,8000aca4 <service_ecdbg_input+0x348>
8000abfc:	f0 1f 00 15 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
						print_ecdbg("Must be a value between 2 and 59.\r\n>");
8000ac00:	4a ac       	lddpc	r12,8000aca8 <service_ecdbg_input+0x34c>
8000ac02:	f0 1f 00 14 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
				}
			}
		}
		
		// Add a LF and consider this as the end of the line.
		print_ecdbg("\r\n>");
8000ac06:	4a 6c       	lddpc	r12,8000ac9c <service_ecdbg_input+0x340>
8000ac08:	f0 1f 00 12 	mcall	8000ac50 <service_ecdbg_input+0x2f4>
		cmdIdx = 0;
8000ac0c:	48 d9       	lddpc	r9,8000ac40 <service_ecdbg_input+0x2e4>
8000ac0e:	30 08       	mov	r8,0
8000ac10:	b2 88       	st.b	r9[0x0],r8
		return;
8000ac12:	d7 03       	nop
8000ac14:	c1 08       	rjmp	8000ac34 <service_ecdbg_input+0x2d8>
	unsigned int tmpNewDte;
	unsigned char tryToChangeDte = 0;

	if (usart_read_char(ECDBG_USART, &rx_char) != USART_SUCCESS)
	{
		return;
8000ac16:	d7 03       	nop
8000ac18:	c0 e8       	rjmp	8000ac34 <service_ecdbg_input+0x2d8>
	}

	if (rx_char == USART_FAILURE)
	{
//26may15 why are we getting this? ignore for now		usart_write_line(ECDBG_USART, "UART error\r\n");
		return;
8000ac1a:	d7 03       	nop
8000ac1c:	c0 c8       	rjmp	8000ac34 <service_ecdbg_input+0x2d8>
	}
	if (rx_char == '\x03')
	{
		return;
8000ac1e:	d7 03       	nop
8000ac20:	c0 a8       	rjmp	8000ac34 <service_ecdbg_input+0x2d8>
	}
	
	if ((rx_char < 0x0a) || (rx_char > 0x7a))
	{
		return; //completely out of range, ignore
8000ac22:	d7 03       	nop
8000ac24:	c0 88       	rjmp	8000ac34 <service_ecdbg_input+0x2d8>
8000ac26:	d7 03       	nop
8000ac28:	c0 68       	rjmp	8000ac34 <service_ecdbg_input+0x2d8>
			return; //TODO: this is kludgey...whenever we print to the debug port we rx a 'P' (0x50), just ignore them for now.
		}
	}
	else
	{
		return;
8000ac2a:	d7 03       	nop
8000ac2c:	c0 48       	rjmp	8000ac34 <service_ecdbg_input+0x2d8>
8000ac2e:	d7 03       	nop
8000ac30:	c0 28       	rjmp	8000ac34 <service_ecdbg_input+0x2d8>
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
	{
		if (rx_char == 0x50)
		{
			return; //TODO: this is kludgey...whenever we print to the debug port we rx a 'P' (0x50), just ignore them for now.
8000ac32:	d7 03       	nop
		// Add a LF and consider this as the end of the line.
		print_ecdbg("\r\n>");
		cmdIdx = 0;
		return;
	}
}
8000ac34:	2f dd       	sub	sp,-12
8000ac36:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac3a:	00 00       	add	r0,r0
8000ac3c:	80 00       	ld.sh	r0,r0[0x0]
8000ac3e:	58 e8       	cp.w	r8,14
8000ac40:	00 00       	add	r0,r0
8000ac42:	07 d4       	ld.ub	r4,r3[0x5]
8000ac44:	00 00       	add	r0,r0
8000ac46:	0d 80       	ld.ub	r0,r6[0x0]
8000ac48:	80 00       	ld.sh	r0,r0[0x0]
8000ac4a:	58 94       	cp.w	r4,9
8000ac4c:	80 00       	ld.sh	r0,r0[0x0]
8000ac4e:	6c 3c       	ld.w	r12,r6[0xc]
8000ac50:	80 00       	ld.sh	r0,r0[0x0]
8000ac52:	33 38       	mov	r8,51
8000ac54:	80 00       	ld.sh	r0,r0[0x0]
8000ac56:	6c 58       	ld.w	r8,r6[0x14]
8000ac58:	80 00       	ld.sh	r0,r0[0x0]
8000ac5a:	6c 70       	ld.w	r0,r6[0x1c]
8000ac5c:	80 00       	ld.sh	r0,r0[0x0]
8000ac5e:	6c 88       	ld.w	r8,r6[0x20]
8000ac60:	80 00       	ld.sh	r0,r0[0x0]
8000ac62:	6c a8       	ld.w	r8,r6[0x28]
8000ac64:	80 00       	ld.sh	r0,r0[0x0]
8000ac66:	6c d4       	ld.w	r4,r6[0x34]
8000ac68:	80 00       	ld.sh	r0,r0[0x0]
8000ac6a:	6d 1c       	ld.w	r12,r6[0x44]
8000ac6c:	80 00       	ld.sh	r0,r0[0x0]
8000ac6e:	6d 3c       	ld.w	r12,r6[0x4c]
8000ac70:	80 00       	ld.sh	r0,r0[0x0]
8000ac72:	6d 40       	ld.w	r0,r6[0x50]
8000ac74:	00 00       	add	r0,r0
8000ac76:	0b fc       	ld.ub	r12,r5[0x7]
8000ac78:	80 00       	ld.sh	r0,r0[0x0]
8000ac7a:	73 20       	ld.w	r0,r9[0x48]
8000ac7c:	80 00       	ld.sh	r0,r0[0x0]
8000ac7e:	6d 58       	ld.w	r8,r6[0x54]
8000ac80:	80 00       	ld.sh	r0,r0[0x0]
8000ac82:	9f 7c       	st.w	pc[0x1c],r12
8000ac84:	80 00       	ld.sh	r0,r0[0x0]
8000ac86:	9f a8       	st.w	pc[0x28],r8
8000ac88:	80 00       	ld.sh	r0,r0[0x0]
8000ac8a:	a4 28       	st.h	r2[0x4],r8
8000ac8c:	80 00       	ld.sh	r0,r0[0x0]
8000ac8e:	a8 00       	st.h	r4[0x0],r0
8000ac90:	80 00       	ld.sh	r0,r0[0x0]
8000ac92:	a9 44       	asr	r4,0x8
8000ac94:	00 00       	add	r0,r0
8000ac96:	00 b4       	st.h	r0++,r4
8000ac98:	80 00       	ld.sh	r0,r0[0x0]
8000ac9a:	6d 68       	ld.w	r8,r6[0x58]
8000ac9c:	80 00       	ld.sh	r0,r0[0x0]
8000ac9e:	6d 84       	ld.w	r4,r6[0x60]
8000aca0:	80 00       	ld.sh	r0,r0[0x0]
8000aca2:	97 4c       	st.w	r11[0x10],r12
8000aca4:	80 00       	ld.sh	r0,r0[0x0]
8000aca6:	6d 88       	ld.w	r8,r6[0x60]
8000aca8:	80 00       	ld.sh	r0,r0[0x0]
8000acaa:	6d ac       	ld.w	r12,r6[0x68]

8000acac <main>:

/*! \brief Main File Section:
 *          - Initialization (CPU, TWI, Usart,...)
 */
int main(void)
{
8000acac:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000acb0:	1a 97       	mov	r7,sp
8000acb2:	fa cd 01 f0 	sub	sp,sp,496
	static unsigned char displayIdx = 0;
	
	// Initialize System Clock
	init_sys_clocks();
8000acb6:	f0 1f 04 de 	mcall	8000c02c <main+0x1380>

	init_io();
8000acba:	f0 1f 04 de 	mcall	8000c030 <main+0x1384>
	
	init_sysErr();
8000acbe:	f0 1f 04 de 	mcall	8000c034 <main+0x1388>
	
	init_shelf_n_ledBrd_structs();
8000acc2:	f0 1f 04 de 	mcall	8000c038 <main+0x138c>
	read_led_board_serial_ids();
8000acc6:	f0 1f 04 de 	mcall	8000c03c <main+0x1390>
		


	//Set clock to 8MHz. We start at 100MHz to get through the DS2411 LED board serial ID detection. But we don't need to run that fast for remaining operations.
	osc_enable(OSC_ID_RC8M);
8000acca:	30 2c       	mov	r12,2
8000accc:	f0 1f 04 dd 	mcall	8000c040 <main+0x1394>
	osc_wait_ready(OSC_ID_RC8M);
8000acd0:	30 2c       	mov	r12,2
8000acd2:	f0 1f 04 dd 	mcall	8000c044 <main+0x1398>
	sysclk_set_source(SYSCLK_SRC_RC8M);
8000acd6:	30 5c       	mov	r12,5
8000acd8:	f0 1f 04 dc 	mcall	8000c048 <main+0x139c>
	sysclk_set_prescalers(0,0,0,0);
8000acdc:	30 09       	mov	r9,0
8000acde:	30 0a       	mov	r10,0
8000ace0:	30 0b       	mov	r11,0
8000ace2:	30 0c       	mov	r12,0
8000ace4:	f0 1f 04 da 	mcall	8000c04c <main+0x13a0>
	pll_disable(0);
8000ace8:	30 0c       	mov	r12,0
8000acea:	f0 1f 04 da 	mcall	8000c050 <main+0x13a4>



	// Initialize USART again after changing the system clock
	init_ecdbg_rs232(FPBA_HZ);
8000acee:	e0 6c 12 00 	mov	r12,4608
8000acf2:	ea 1c 00 7a 	orh	r12,0x7a
8000acf6:	f0 1f 04 d8 	mcall	8000c054 <main+0x13a8>
//30may15	init_display_rs232(FPBA_HZ);
	init_display_rs232(FOSC0);//experiment to see if this fixes the display, haven't tested the code with the display in a month and it doesn't work now 30may15
8000acfa:	e0 6c 24 00 	mov	r12,9216
8000acfe:	ea 1c 00 f4 	orh	r12,0xf4
8000ad02:	f0 1f 04 d6 	mcall	8000c058 <main+0x13ac>
	
	show_sw_version();
8000ad06:	f0 1f 04 d6 	mcall	8000c05c <main+0x13b0>

	// Print Startup Message
	display_text(IDX_READY);
8000ad0a:	30 0c       	mov	r12,0
8000ad0c:	f0 1f 04 d5 	mcall	8000c060 <main+0x13b4>
	
	// Initialize ADC for bluesense channels which are used to see if there are any devices (phones, tablets, etc.) on the shelves
	adc_process_init();
8000ad10:	f0 1f 04 d5 	mcall	8000c064 <main+0x13b8>

	
	// Initialize Interrupts
	irq_initialize_vectors(); //TODO: probably remove 5apr15
8000ad14:	f0 1f 04 d5 	mcall	8000c068 <main+0x13bc>

	cpu_irq_enable();
8000ad18:	d5 03       	csrf	0x10


	
	// Initialize TWI Interface
	twi_init();
8000ad1a:	f0 1f 04 d5 	mcall	8000c06c <main+0x13c0>

	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level
8000ad1e:	31 6c       	mov	r12,22
8000ad20:	f0 1f 04 d4 	mcall	8000c070 <main+0x13c4>

	PCA9952_init();
8000ad24:	f0 1f 04 d4 	mcall	8000c074 <main+0x13c8>
	test_led_driver_channels();
8000ad28:	f0 1f 04 d4 	mcall	8000c078 <main+0x13cc>
	
	
	init_led_board_info();
8000ad2c:	f0 1f 04 d4 	mcall	8000c07c <main+0x13d0>

	show_chassis_status_info();
8000ad30:	f0 1f 04 d4 	mcall	8000c080 <main+0x13d4>
	show_chassis_sysErr();
8000ad34:	f0 1f 04 d4 	mcall	8000c084 <main+0x13d8>
	show_chassis_all_LED_boards();
8000ad38:	f0 1f 04 d4 	mcall	8000c088 <main+0x13dc>
	show_help_and_prompt();
8000ad3c:	f0 1f 04 d4 	mcall	8000c08c <main+0x13e0>
	
	gpio_set_pin_low(ECLAVE_LED_OEn); //...and we are live!
8000ad40:	31 6c       	mov	r12,22
8000ad42:	f0 1f 04 d4 	mcall	8000c090 <main+0x13e4>
	gpio_set_pin_low(ECLAVE_PSUPPLY_ONn); //turn the leds on first and then the power supply
8000ad46:	31 7c       	mov	r12,23
8000ad48:	f0 1f 04 d2 	mcall	8000c090 <main+0x13e4>
8000ad4c:	e0 68 03 e8 	mov	r8,1000
8000ad50:	ef 48 fe e4 	st.w	r7[-284],r8
8000ad54:	e0 68 12 00 	mov	r8,4608
8000ad58:	ea 18 00 7a 	orh	r8,0x7a
8000ad5c:	ef 48 fe e0 	st.w	r7[-288],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000ad60:	ee f0 fe e4 	ld.w	r0,r7[-284]
8000ad64:	30 01       	mov	r1,0
8000ad66:	ee f2 fe e0 	ld.w	r2,r7[-288]
8000ad6a:	30 03       	mov	r3,0
8000ad6c:	e2 02 02 49 	mul	r9,r1,r2
8000ad70:	e6 00 02 48 	mul	r8,r3,r0
8000ad74:	10 09       	add	r9,r8
8000ad76:	e0 02 06 4a 	mulu.d	r10,r0,r2
8000ad7a:	16 09       	add	r9,r11
8000ad7c:	12 9b       	mov	r11,r9
8000ad7e:	e0 68 03 e7 	mov	r8,999
8000ad82:	30 09       	mov	r9,0
8000ad84:	10 0a       	add	r10,r8
8000ad86:	f6 09 00 4b 	adc	r11,r11,r9
8000ad8a:	e0 68 03 e8 	mov	r8,1000
8000ad8e:	30 09       	mov	r9,0
8000ad90:	f0 1f 04 c1 	mcall	8000c094 <main+0x13e8>
8000ad94:	14 98       	mov	r8,r10
8000ad96:	16 99       	mov	r9,r11
	
	cpu_set_timeout(EC_ONE_SECOND/2, &debugTimer);
8000ad98:	a1 98       	lsr	r8,0x1
8000ad9a:	ef 48 fe ec 	st.w	r7[-276],r8
8000ad9e:	fe f8 12 fa 	ld.w	r8,pc[4858]
8000ada2:	ef 48 fe e8 	st.w	r7[-280],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000ada6:	e1 b8 00 42 	mfsr	r8,0x108
8000adaa:	10 99       	mov	r9,r8
8000adac:	ee f8 fe e8 	ld.w	r8,r7[-280]
8000adb0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000adb2:	ee f8 fe e8 	ld.w	r8,r7[-280]
8000adb6:	70 09       	ld.w	r9,r8[0x0]
8000adb8:	ee f8 fe ec 	ld.w	r8,r7[-276]
8000adbc:	10 09       	add	r9,r8
8000adbe:	ee f8 fe e8 	ld.w	r8,r7[-280]
8000adc2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000adc4:	ee f9 fe e8 	ld.w	r9,r7[-280]
8000adc8:	30 08       	mov	r8,0
8000adca:	f3 68 00 08 	st.b	r9[8],r8
8000adce:	e0 68 03 e8 	mov	r8,1000
8000add2:	ef 48 fe f4 	st.w	r7[-268],r8
8000add6:	e0 68 12 00 	mov	r8,4608
8000adda:	ea 18 00 7a 	orh	r8,0x7a
8000adde:	ef 48 fe f0 	st.w	r7[-272],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000ade2:	ee fc fe f4 	ld.w	r12,r7[-268]
8000ade6:	ef 4c fe 1c 	st.w	r7[-484],r12
8000adea:	30 0a       	mov	r10,0
8000adec:	ef 4a fe 18 	st.w	r7[-488],r10
8000adf0:	ee f8 fe f0 	ld.w	r8,r7[-272]
8000adf4:	ef 48 fe 14 	st.w	r7[-492],r8
8000adf8:	30 0c       	mov	r12,0
8000adfa:	ef 4c fe 10 	st.w	r7[-496],r12
8000adfe:	ee f9 fe 18 	ld.w	r9,r7[-488]
8000ae02:	ee fa fe 14 	ld.w	r10,r7[-492]
8000ae06:	b5 39       	mul	r9,r10
8000ae08:	ee f8 fe 10 	ld.w	r8,r7[-496]
8000ae0c:	ee fc fe 1c 	ld.w	r12,r7[-484]
8000ae10:	b9 38       	mul	r8,r12
8000ae12:	10 09       	add	r9,r8
8000ae14:	ee f8 fe 1c 	ld.w	r8,r7[-484]
8000ae18:	ee fc fe 14 	ld.w	r12,r7[-492]
8000ae1c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000ae20:	16 09       	add	r9,r11
8000ae22:	12 9b       	mov	r11,r9
8000ae24:	e0 68 03 e7 	mov	r8,999
8000ae28:	30 09       	mov	r9,0
8000ae2a:	10 0a       	add	r10,r8
8000ae2c:	f6 09 00 4b 	adc	r11,r11,r9
8000ae30:	e0 68 03 e8 	mov	r8,1000
8000ae34:	30 09       	mov	r9,0
8000ae36:	f0 1f 04 98 	mcall	8000c094 <main+0x13e8>
8000ae3a:	14 98       	mov	r8,r10
8000ae3c:	16 99       	mov	r9,r11
	cpu_set_timeout((5 * EC_ONE_SECOND), &mfpExperimentTimer); //experiment 31may15
8000ae3e:	10 99       	mov	r9,r8
8000ae40:	12 98       	mov	r8,r9
8000ae42:	a3 68       	lsl	r8,0x2
8000ae44:	12 08       	add	r8,r9
8000ae46:	ef 48 fe fc 	st.w	r7[-260],r8
8000ae4a:	fe f8 12 52 	ld.w	r8,pc[4690]
8000ae4e:	ef 48 fe f8 	st.w	r7[-264],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000ae52:	e1 b8 00 42 	mfsr	r8,0x108
8000ae56:	10 99       	mov	r9,r8
8000ae58:	ee f8 fe f8 	ld.w	r8,r7[-264]
8000ae5c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000ae5e:	ee f8 fe f8 	ld.w	r8,r7[-264]
8000ae62:	70 09       	ld.w	r9,r8[0x0]
8000ae64:	ee f8 fe fc 	ld.w	r8,r7[-260]
8000ae68:	10 09       	add	r9,r8
8000ae6a:	ee f8 fe f8 	ld.w	r8,r7[-264]
8000ae6e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000ae70:	ee f9 fe f8 	ld.w	r9,r7[-264]
8000ae74:	30 08       	mov	r8,0
8000ae76:	f3 68 00 08 	st.b	r9[8],r8
			}
			cpu_set_timeout((5 * EC_ONE_SECOND), &mfpExperimentTimer);			
		}
#endif

		switch(electroclaveState)
8000ae7a:	fe f8 12 26 	ld.w	r8,pc[4646]
8000ae7e:	11 88       	ld.ub	r8,r8[0x0]
8000ae80:	10 99       	mov	r9,r8
8000ae82:	58 99       	cp.w	r9,9
8000ae84:	e0 8b 07 da 	brhi	8000be38 <main+0x118c>
8000ae88:	fe f8 12 1c 	ld.w	r8,pc[4636]
8000ae8c:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
		{
			case STATE_EC_IDLE:
				if (EC_DOOR_LATCHED) {
8000ae90:	33 ec       	mov	r12,62
8000ae92:	f0 1f 04 86 	mcall	8000c0a8 <main+0x13fc>
8000ae96:	18 98       	mov	r8,r12
8000ae98:	ec 18 00 01 	eorl	r8,0x1
8000ae9c:	5c 58       	castu.b	r8
8000ae9e:	e0 80 07 c2 	breq	8000be22 <main+0x1176>
					gpio_set_pin_low(ECLAVE_DEBUG_LED);
8000aea2:	37 cc       	mov	r12,124
8000aea4:	f0 1f 04 7b 	mcall	8000c090 <main+0x13e4>
					print_ecdbg("Door latch detected\r\n");
8000aea8:	fe fc 12 04 	ld.w	r12,pc[4612]
8000aeac:	f0 1f 04 81 	mcall	8000c0b0 <main+0x1404>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
8000aeb0:	30 0c       	mov	r12,0
8000aeb2:	f0 1f 04 6c 	mcall	8000c060 <main+0x13b4>
					electroclaveState = STATE_DOOR_LATCHED;
8000aeb6:	fe f9 11 ea 	ld.w	r9,pc[4586]
8000aeba:	30 18       	mov	r8,1
8000aebc:	b2 88       	st.b	r9[0x0],r8
					firstDoorOpenSinceIdle = 1;
8000aebe:	fe f9 11 f6 	ld.w	r9,pc[4598]
8000aec2:	30 18       	mov	r8,1
8000aec4:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000aec6:	e0 8f 07 b9 	bral	8000be38 <main+0x118c>
				
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
8000aeca:	33 fc       	mov	r12,63
8000aecc:	f0 1f 04 77 	mcall	8000c0a8 <main+0x13fc>
8000aed0:	18 98       	mov	r8,r12
8000aed2:	58 08       	cp.w	r8,0
8000aed4:	e0 80 07 a9 	breq	8000be26 <main+0x117a>
					print_ecdbg("Action push button press detected\r\n");
8000aed8:	fe fc 11 e0 	ld.w	r12,pc[4576]
8000aedc:	f0 1f 04 75 	mcall	8000c0b0 <main+0x1404>
					electroclaveState = STATE_ACTION_PB_PRESSED;
8000aee0:	fe f9 11 c0 	ld.w	r9,pc[4544]
8000aee4:	30 28       	mov	r8,2
8000aee6:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000aee8:	e0 8f 07 a8 	bral	8000be38 <main+0x118c>
				
			case STATE_ACTION_PB_PRESSED:
				if (EC_ACTION_PB)
8000aeec:	33 fc       	mov	r12,63
8000aeee:	f0 1f 04 6f 	mcall	8000c0a8 <main+0x13fc>
8000aef2:	18 98       	mov	r8,r12
8000aef4:	ec 18 00 01 	eorl	r8,0x1
8000aef8:	5c 58       	castu.b	r8
8000aefa:	e0 80 07 98 	breq	8000be2a <main+0x117e>
				{
					print_ecdbg("Action push button release detected\r\n");
8000aefe:	fe fc 11 be 	ld.w	r12,pc[4542]
8000af02:	f0 1f 04 6c 	mcall	8000c0b0 <main+0x1404>
					electroclaveState = STATE_ACTION_PB_RELEASED;	
8000af06:	fe f9 11 9a 	ld.w	r9,pc[4506]
8000af0a:	30 38       	mov	r8,3
8000af0c:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000af0e:	e0 8f 07 95 	bral	8000be38 <main+0x118c>
				
			case STATE_ACTION_PB_RELEASED:
				check_led_brd_side_lifetimes();
8000af12:	f0 1f 04 6c 	mcall	8000c0c0 <main+0x1414>
				check_shelves_for_devices();
8000af16:	f0 1f 04 6c 	mcall	8000c0c4 <main+0x1418>
				set_shelves_active_inactive();
8000af1a:	f0 1f 04 6c 	mcall	8000c0c8 <main+0x141c>
				
				if (num_active_shelves() != 0) {
8000af1e:	f0 1f 04 6c 	mcall	8000c0cc <main+0x1420>
8000af22:	18 98       	mov	r8,r12
8000af24:	58 08       	cp.w	r8,0
8000af26:	c6 70       	breq	8000aff4 <main+0x348>
					electroclaveState = STATE_START_SANITIZE;
8000af28:	fe f9 11 78 	ld.w	r9,pc[4472]
8000af2c:	30 48       	mov	r8,4
8000af2e:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("Sanitizing\r\n");
8000af30:	fe fc 11 a0 	ld.w	r12,pc[4512]
8000af34:	f0 1f 04 5f 	mcall	8000c0b0 <main+0x1404>
//13jun15					display_text(IDX_CLEAR);
//13jun15					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
8000af38:	30 2c       	mov	r12,2
8000af3a:	f0 1f 04 4a 	mcall	8000c060 <main+0x13b4>
8000af3e:	e0 68 1f 40 	mov	r8,8000
8000af42:	ef 48 ff 04 	st.w	r7[-252],r8
8000af46:	e0 68 12 00 	mov	r8,4608
8000af4a:	ea 18 00 7a 	orh	r8,0x7a
8000af4e:	ef 48 ff 00 	st.w	r7[-256],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000af52:	ee fa ff 04 	ld.w	r10,r7[-252]
8000af56:	ef 4a fe 2c 	st.w	r7[-468],r10
8000af5a:	30 08       	mov	r8,0
8000af5c:	ef 48 fe 28 	st.w	r7[-472],r8
8000af60:	ee fc ff 00 	ld.w	r12,r7[-256]
8000af64:	ef 4c fe 24 	st.w	r7[-476],r12
8000af68:	30 0a       	mov	r10,0
8000af6a:	ef 4a fe 20 	st.w	r7[-480],r10
8000af6e:	ee f9 fe 28 	ld.w	r9,r7[-472]
8000af72:	ee f8 fe 24 	ld.w	r8,r7[-476]
8000af76:	b1 39       	mul	r9,r8
8000af78:	ee f8 fe 20 	ld.w	r8,r7[-480]
8000af7c:	ee fc fe 2c 	ld.w	r12,r7[-468]
8000af80:	b9 38       	mul	r8,r12
8000af82:	10 09       	add	r9,r8
8000af84:	ee f8 fe 2c 	ld.w	r8,r7[-468]
8000af88:	ee fc fe 24 	ld.w	r12,r7[-476]
8000af8c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000af90:	16 09       	add	r9,r11
8000af92:	12 9b       	mov	r11,r9
8000af94:	e0 68 03 e7 	mov	r8,999
8000af98:	30 09       	mov	r9,0
8000af9a:	10 0a       	add	r10,r8
8000af9c:	f6 09 00 4b 	adc	r11,r11,r9
8000afa0:	e0 68 03 e8 	mov	r8,1000
8000afa4:	30 09       	mov	r9,0
8000afa6:	f0 1f 04 3c 	mcall	8000c094 <main+0x13e8>
8000afaa:	14 98       	mov	r8,r10
8000afac:	16 99       	mov	r9,r11
					displayTimerSeconds = cpu_ms_2_cy(8000, EC_CPU_CLOCK_FREQ); //8 seconds per "shelf" display is enough time for the text to scroll twice
8000afae:	10 99       	mov	r9,r8
8000afb0:	fe f8 11 24 	ld.w	r8,pc[4388]
8000afb4:	91 09       	st.w	r8[0x0],r9
					cpu_set_timeout(displayTimerSeconds, &displayTimer);
8000afb6:	fe f8 11 1e 	ld.w	r8,pc[4382]
8000afba:	70 08       	ld.w	r8,r8[0x0]
8000afbc:	ef 48 ff 0c 	st.w	r7[-244],r8
8000afc0:	fe f8 11 18 	ld.w	r8,pc[4376]
8000afc4:	ef 48 ff 08 	st.w	r7[-248],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000afc8:	e1 b8 00 42 	mfsr	r8,0x108
8000afcc:	10 99       	mov	r9,r8
8000afce:	ee f8 ff 08 	ld.w	r8,r7[-248]
8000afd2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000afd4:	ee f8 ff 08 	ld.w	r8,r7[-248]
8000afd8:	70 09       	ld.w	r9,r8[0x0]
8000afda:	ee f8 ff 0c 	ld.w	r8,r7[-244]
8000afde:	10 09       	add	r9,r8
8000afe0:	ee f8 ff 08 	ld.w	r8,r7[-248]
8000afe4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000afe6:	ee f9 ff 08 	ld.w	r9,r7[-248]
8000afea:	30 08       	mov	r8,0
8000afec:	f3 68 00 08 	st.b	r9[8],r8
				{
					electroclaveState = STATE_CHASSIS_ERROR;
					print_ecdbg("No shelves, or shelves are past lifetime\r\n");
					display_text(IDX_ERROR);
				}
				break;
8000aff0:	e0 8f 07 24 	bral	8000be38 <main+0x118c>
//13jun15					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
					displayTimerSeconds = cpu_ms_2_cy(8000, EC_CPU_CLOCK_FREQ); //8 seconds per "shelf" display is enough time for the text to scroll twice
					cpu_set_timeout(displayTimerSeconds, &displayTimer);
				}
				else if (num_present_shelves() != 0){
8000aff4:	f0 1f 04 3a 	mcall	8000c0dc <main+0x1430>
8000aff8:	18 98       	mov	r8,r12
8000affa:	58 08       	cp.w	r8,0
8000affc:	c0 e0       	breq	8000b018 <main+0x36c>
					electroclaveState = STATE_EC_IDLE;
8000affe:	fe f9 10 a2 	ld.w	r9,pc[4258]
8000b002:	30 08       	mov	r8,0
8000b004:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("At least one shelf is present, but no devices to be cleaned.\r\n");
8000b006:	fe fc 10 da 	ld.w	r12,pc[4314]
8000b00a:	f0 1f 04 2a 	mcall	8000c0b0 <main+0x1404>
					display_text(IDX_READY);
8000b00e:	30 0c       	mov	r12,0
8000b010:	f0 1f 04 14 	mcall	8000c060 <main+0x13b4>
				{
					electroclaveState = STATE_CHASSIS_ERROR;
					print_ecdbg("No shelves, or shelves are past lifetime\r\n");
					display_text(IDX_ERROR);
				}
				break;
8000b014:	e0 8f 07 12 	bral	8000be38 <main+0x118c>
					print_ecdbg("At least one shelf is present, but no devices to be cleaned.\r\n");
					display_text(IDX_READY);
				}
				else
				{
					electroclaveState = STATE_CHASSIS_ERROR;
8000b018:	fe f9 10 88 	ld.w	r9,pc[4232]
8000b01c:	30 88       	mov	r8,8
8000b01e:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("No shelves, or shelves are past lifetime\r\n");
8000b020:	fe fc 10 c4 	ld.w	r12,pc[4292]
8000b024:	f0 1f 04 23 	mcall	8000c0b0 <main+0x1404>
					display_text(IDX_ERROR);
8000b028:	30 4c       	mov	r12,4
8000b02a:	f0 1f 04 0e 	mcall	8000c060 <main+0x13b4>
				}
				break;
8000b02e:	e0 8f 07 05 	bral	8000be38 <main+0x118c>
				
			case STATE_START_SANITIZE:
//13jun15				display_text(IDX_CLEAR);
//13jun15				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
8000b032:	fe f9 10 b6 	ld.w	r9,pc[4278]
8000b036:	3f f8       	mov	r8,-1
8000b038:	b2 88       	st.b	r9[0x0],r8
				sanitizeMinutes = 0;
8000b03a:	fe f9 10 b2 	ld.w	r9,pc[4274]
8000b03e:	30 08       	mov	r8,0
8000b040:	93 08       	st.w	r9[0x0],r8
				for (int i = 0; i<NUM_SHELVES; i++) {
8000b042:	30 08       	mov	r8,0
8000b044:	ef 48 fe d0 	st.w	r7[-304],r8
8000b048:	c4 28       	rjmp	8000b0cc <main+0x420>
					if (shelf[i].active == SHELF_ACTIVE) {
8000b04a:	ee f9 fe d0 	ld.w	r9,r7[-304]
8000b04e:	fe fa 10 a2 	ld.w	r10,pc[4258]
8000b052:	12 98       	mov	r8,r9
8000b054:	a3 68       	lsl	r8,0x2
8000b056:	12 08       	add	r8,r9
8000b058:	f4 08 00 08 	add	r8,r10,r8
8000b05c:	11 89       	ld.ub	r9,r8[0x0]
8000b05e:	30 18       	mov	r8,1
8000b060:	f0 09 18 00 	cp.b	r9,r8
8000b064:	c2 f1       	brne	8000b0c2 <main+0x416>
						tmpSanitizeMinutes = calc_sanitize_time(i);
8000b066:	ee f8 fe d0 	ld.w	r8,r7[-304]
8000b06a:	5c 58       	castu.b	r8
8000b06c:	10 9c       	mov	r12,r8
8000b06e:	f0 1f 04 22 	mcall	8000c0f4 <main+0x1448>
8000b072:	18 98       	mov	r8,r12
8000b074:	10 99       	mov	r9,r8
8000b076:	fe f8 10 82 	ld.w	r8,pc[4226]
8000b07a:	91 09       	st.w	r8[0x0],r9
						
						if (tmpSanitizeMinutes > sanitizeMinutes)
8000b07c:	fe f8 10 7c 	ld.w	r8,pc[4220]
8000b080:	70 09       	ld.w	r9,r8[0x0]
8000b082:	fe f8 10 6a 	ld.w	r8,pc[4202]
8000b086:	70 08       	ld.w	r8,r8[0x0]
8000b088:	10 39       	cp.w	r9,r8
8000b08a:	e0 88 00 08 	brls	8000b09a <main+0x3ee>
						{
							sanitizeMinutes = tmpSanitizeMinutes;
8000b08e:	fe f8 10 6a 	ld.w	r8,pc[4202]
8000b092:	70 09       	ld.w	r9,r8[0x0]
8000b094:	fe f8 10 58 	ld.w	r8,pc[4184]
8000b098:	91 09       	st.w	r8[0x0],r9
						}
						
						led_shelf(i, LED_ON);
8000b09a:	ee f8 fe d0 	ld.w	r8,r7[-304]
8000b09e:	5c 58       	castu.b	r8
8000b0a0:	30 1b       	mov	r11,1
8000b0a2:	10 9c       	mov	r12,r8
8000b0a4:	f0 1f 04 16 	mcall	8000c0fc <main+0x1450>
						
						if (displayIdx == 0xFF)
8000b0a8:	fe f8 10 40 	ld.w	r8,pc[4160]
8000b0ac:	11 89       	ld.ub	r9,r8[0x0]
8000b0ae:	3f f8       	mov	r8,-1
8000b0b0:	f0 09 18 00 	cp.b	r9,r8
8000b0b4:	c0 71       	brne	8000b0c2 <main+0x416>
						{
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
8000b0b6:	ee f8 fe d0 	ld.w	r8,r7[-304]
8000b0ba:	5c 58       	castu.b	r8
8000b0bc:	fe f9 10 2c 	ld.w	r9,pc[4140]
8000b0c0:	b2 88       	st.b	r9[0x0],r8
//13jun15				display_text(IDX_CLEAR);
//13jun15				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
				sanitizeMinutes = 0;
				for (int i = 0; i<NUM_SHELVES; i++) {
8000b0c2:	ee f8 fe d0 	ld.w	r8,r7[-304]
8000b0c6:	2f f8       	sub	r8,-1
8000b0c8:	ef 48 fe d0 	st.w	r7[-304],r8
8000b0cc:	ee f8 fe d0 	ld.w	r8,r7[-304]
8000b0d0:	58 38       	cp.w	r8,3
8000b0d2:	fe 9a ff bc 	brle	8000b04a <main+0x39e>
8000b0d6:	e0 68 03 e8 	mov	r8,1000
8000b0da:	ef 48 ff 14 	st.w	r7[-236],r8
8000b0de:	e0 68 12 00 	mov	r8,4608
8000b0e2:	ea 18 00 7a 	orh	r8,0x7a
8000b0e6:	ef 48 ff 10 	st.w	r7[-240],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000b0ea:	ee fa ff 14 	ld.w	r10,r7[-236]
8000b0ee:	ef 4a fe 3c 	st.w	r7[-452],r10
8000b0f2:	30 08       	mov	r8,0
8000b0f4:	ef 48 fe 38 	st.w	r7[-456],r8
8000b0f8:	ee fc ff 10 	ld.w	r12,r7[-240]
8000b0fc:	ef 4c fe 34 	st.w	r7[-460],r12
8000b100:	30 0a       	mov	r10,0
8000b102:	ef 4a fe 30 	st.w	r7[-464],r10
8000b106:	ee f9 fe 38 	ld.w	r9,r7[-456]
8000b10a:	ee f8 fe 34 	ld.w	r8,r7[-460]
8000b10e:	b1 39       	mul	r9,r8
8000b110:	ee f8 fe 30 	ld.w	r8,r7[-464]
8000b114:	ee fc fe 3c 	ld.w	r12,r7[-452]
8000b118:	b9 38       	mul	r8,r12
8000b11a:	10 09       	add	r9,r8
8000b11c:	ee f8 fe 3c 	ld.w	r8,r7[-452]
8000b120:	ee fc fe 34 	ld.w	r12,r7[-460]
8000b124:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000b128:	16 09       	add	r9,r11
8000b12a:	12 9b       	mov	r11,r9
8000b12c:	e0 68 03 e7 	mov	r8,999
8000b130:	30 09       	mov	r9,0
8000b132:	10 0a       	add	r10,r8
8000b134:	f6 09 00 4b 	adc	r11,r11,r9
8000b138:	e0 68 03 e8 	mov	r8,1000
8000b13c:	30 09       	mov	r9,0
8000b13e:	f0 1f 03 d6 	mcall	8000c094 <main+0x13e8>
8000b142:	14 98       	mov	r8,r10
8000b144:	16 99       	mov	r9,r11
				
				
#if 0 //DEBUG: set this to seconds not minutes so we can debug this logic faster 11may15				
				cpu_set_timeout((sanitizeMinutes * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer);
#endif
				cpu_set_timeout((sanitizeMinutes * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer); //DEBUG take this out when done debugging logic, put it back to minutes 11may15
8000b146:	10 99       	mov	r9,r8
8000b148:	fe f8 0f a4 	ld.w	r8,pc[4004]
8000b14c:	70 08       	ld.w	r8,r8[0x0]
8000b14e:	f2 08 02 48 	mul	r8,r9,r8
8000b152:	ef 48 ff 1c 	st.w	r7[-228],r8
8000b156:	fe f8 0f aa 	ld.w	r8,pc[4010]
8000b15a:	ef 48 ff 18 	st.w	r7[-232],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b15e:	e1 b8 00 42 	mfsr	r8,0x108
8000b162:	10 99       	mov	r9,r8
8000b164:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b168:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b16a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b16e:	70 09       	ld.w	r9,r8[0x0]
8000b170:	ee f8 ff 1c 	ld.w	r8,r7[-228]
8000b174:	10 09       	add	r9,r8
8000b176:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b17a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b17c:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000b180:	30 08       	mov	r8,0
8000b182:	f3 68 00 08 	st.b	r9[8],r8
#ifdef SERIAL_ID_AND_ALL_USAGE_COMBINED
				usageShdw[0].totalSanitationCycles++;
				usageShdw[1].totalSanitationCycles++;
#else

				inc_sanCycles();
8000b186:	f0 1f 03 e0 	mcall	8000c104 <main+0x1458>
8000b18a:	e0 68 03 e8 	mov	r8,1000
8000b18e:	ef 48 ff 24 	st.w	r7[-220],r8
8000b192:	e0 68 12 00 	mov	r8,4608
8000b196:	ea 18 00 7a 	orh	r8,0x7a
8000b19a:	ef 48 ff 20 	st.w	r7[-224],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000b19e:	ee fa ff 24 	ld.w	r10,r7[-220]
8000b1a2:	ef 4a fe 4c 	st.w	r7[-436],r10
8000b1a6:	30 08       	mov	r8,0
8000b1a8:	ef 48 fe 48 	st.w	r7[-440],r8
8000b1ac:	ee fc ff 20 	ld.w	r12,r7[-224]
8000b1b0:	ef 4c fe 44 	st.w	r7[-444],r12
8000b1b4:	30 0a       	mov	r10,0
8000b1b6:	ef 4a fe 40 	st.w	r7[-448],r10
8000b1ba:	ee f9 fe 48 	ld.w	r9,r7[-440]
8000b1be:	ee f8 fe 44 	ld.w	r8,r7[-444]
8000b1c2:	b1 39       	mul	r9,r8
8000b1c4:	ee f8 fe 40 	ld.w	r8,r7[-448]
8000b1c8:	ee fc fe 4c 	ld.w	r12,r7[-436]
8000b1cc:	b9 38       	mul	r8,r12
8000b1ce:	10 09       	add	r9,r8
8000b1d0:	ee f8 fe 4c 	ld.w	r8,r7[-436]
8000b1d4:	ee fc fe 44 	ld.w	r12,r7[-444]
8000b1d8:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000b1dc:	16 09       	add	r9,r11
8000b1de:	12 9b       	mov	r11,r9
8000b1e0:	e0 68 03 e7 	mov	r8,999
8000b1e4:	30 09       	mov	r9,0
8000b1e6:	10 0a       	add	r10,r8
8000b1e8:	f6 09 00 4b 	adc	r11,r11,r9
8000b1ec:	e0 68 03 e8 	mov	r8,1000
8000b1f0:	30 09       	mov	r9,0
8000b1f2:	f0 1f 03 a9 	mcall	8000c094 <main+0x13e8>
8000b1f6:	14 98       	mov	r8,r10
8000b1f8:	16 99       	mov	r9,r11

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED
				
//DEBUG 11may15 do this once per second for debug				cpu_set_timeout((60 * cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics
				cpu_set_timeout((cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics DEBUG 11may15
8000b1fa:	ef 48 ff 2c 	st.w	r7[-212],r8
8000b1fe:	fe f8 0f 0a 	ld.w	r8,pc[3850]
8000b202:	ef 48 ff 28 	st.w	r7[-216],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b206:	e1 b8 00 42 	mfsr	r8,0x108
8000b20a:	10 99       	mov	r9,r8
8000b20c:	ee f8 ff 28 	ld.w	r8,r7[-216]
8000b210:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b212:	ee f8 ff 28 	ld.w	r8,r7[-216]
8000b216:	70 09       	ld.w	r9,r8[0x0]
8000b218:	ee f8 ff 2c 	ld.w	r8,r7[-212]
8000b21c:	10 09       	add	r9,r8
8000b21e:	ee f8 ff 28 	ld.w	r8,r7[-216]
8000b222:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b224:	ee f9 ff 28 	ld.w	r9,r7[-216]
8000b228:	30 08       	mov	r8,0
8000b22a:	f3 68 00 08 	st.b	r9[8],r8

				electroclaveState = STATE_SANITIZE;
8000b22e:	fe f9 0e 72 	ld.w	r9,pc[3698]
8000b232:	30 58       	mov	r8,5
8000b234:	b2 88       	st.b	r9[0x0],r8
				
				break;
8000b236:	e0 8f 06 01 	bral	8000be38 <main+0x118c>
8000b23a:	fe f8 0e 9e 	ld.w	r8,pc[3742]
8000b23e:	ef 48 ff 30 	st.w	r7[-208],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000b242:	e1 b8 00 42 	mfsr	r8,0x108
8000b246:	ef 48 ff 34 	st.w	r7[-204],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000b24a:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000b24e:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b252:	30 28       	mov	r8,2
8000b254:	f0 09 18 00 	cp.b	r9,r8
8000b258:	c0 31       	brne	8000b25e <main+0x5b2>
    return false;
8000b25a:	30 08       	mov	r8,0
8000b25c:	c4 38       	rjmp	8000b2e2 <main+0x636>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000b25e:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000b262:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b266:	30 18       	mov	r8,1
8000b268:	f0 09 18 00 	cp.b	r9,r8
8000b26c:	c0 31       	brne	8000b272 <main+0x5c6>
    return true;
8000b26e:	30 18       	mov	r8,1
8000b270:	c3 98       	rjmp	8000b2e2 <main+0x636>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b272:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000b276:	70 09       	ld.w	r9,r8[0x0]
8000b278:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000b27c:	70 18       	ld.w	r8,r8[0x4]
8000b27e:	10 39       	cp.w	r9,r8
8000b280:	e0 88 00 1a 	brls	8000b2b4 <main+0x608>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b284:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000b288:	70 09       	ld.w	r9,r8[0x0]
8000b28a:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000b28e:	12 38       	cp.w	r8,r9
8000b290:	c1 02       	brcc	8000b2b0 <main+0x604>
8000b292:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000b296:	70 19       	ld.w	r9,r8[0x4]
8000b298:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000b29c:	12 38       	cp.w	r8,r9
8000b29e:	e0 88 00 09 	brls	8000b2b0 <main+0x604>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b2a2:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000b2a6:	30 18       	mov	r8,1
8000b2a8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b2ac:	30 18       	mov	r8,1
8000b2ae:	c1 a8       	rjmp	8000b2e2 <main+0x636>
    }
    return false;
8000b2b0:	30 08       	mov	r8,0
8000b2b2:	c1 88       	rjmp	8000b2e2 <main+0x636>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000b2b4:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000b2b8:	70 09       	ld.w	r9,r8[0x0]
8000b2ba:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000b2be:	12 38       	cp.w	r8,r9
8000b2c0:	c0 93       	brcs	8000b2d2 <main+0x626>
8000b2c2:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000b2c6:	70 19       	ld.w	r9,r8[0x4]
8000b2c8:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000b2cc:	12 38       	cp.w	r8,r9
8000b2ce:	e0 88 00 09 	brls	8000b2e0 <main+0x634>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b2d2:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000b2d6:	30 18       	mov	r8,1
8000b2d8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b2dc:	30 18       	mov	r8,1
8000b2de:	c0 28       	rjmp	8000b2e2 <main+0x636>
    }
    return false;
8000b2e0:	30 08       	mov	r8,0
				
			case STATE_SANITIZE:
				/*
    			 * Manage the display
				 */
				if (cpu_is_timeout(&displayTimer))
8000b2e2:	58 08       	cp.w	r8,0
8000b2e4:	c6 90       	breq	8000b3b6 <main+0x70a>
8000b2e6:	fe f8 0d f2 	ld.w	r8,pc[3570]
8000b2ea:	ef 48 ff 38 	st.w	r7[-200],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000b2ee:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000b2f2:	30 28       	mov	r8,2
8000b2f4:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout(&displayTimer);
					switch (displayIdx)
8000b2f8:	fe f8 0d f0 	ld.w	r8,pc[3568]
8000b2fc:	11 88       	ld.ub	r8,r8[0x0]
8000b2fe:	58 18       	cp.w	r8,1
8000b300:	c0 f0       	breq	8000b31e <main+0x672>
8000b302:	e0 89 00 05 	brgt	8000b30c <main+0x660>
8000b306:	58 08       	cp.w	r8,0
8000b308:	c0 70       	breq	8000b316 <main+0x66a>
8000b30a:	c1 78       	rjmp	8000b338 <main+0x68c>
8000b30c:	58 28       	cp.w	r8,2
8000b30e:	c0 c0       	breq	8000b326 <main+0x67a>
8000b310:	58 38       	cp.w	r8,3
8000b312:	c0 e0       	breq	8000b32e <main+0x682>
8000b314:	c1 28       	rjmp	8000b338 <main+0x68c>
					{
						case 0:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF1);
8000b316:	30 5c       	mov	r12,5
8000b318:	f0 1f 03 52 	mcall	8000c060 <main+0x13b4>
							break;
8000b31c:	c0 e8       	rjmp	8000b338 <main+0x68c>
						case 1:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF2);
8000b31e:	30 6c       	mov	r12,6
8000b320:	f0 1f 03 50 	mcall	8000c060 <main+0x13b4>
							break;
8000b324:	c0 a8       	rjmp	8000b338 <main+0x68c>
						case 2:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF3);
8000b326:	30 7c       	mov	r12,7
8000b328:	f0 1f 03 4e 	mcall	8000c060 <main+0x13b4>
							break;
8000b32c:	c0 68       	rjmp	8000b338 <main+0x68c>
						case 3:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF4);
8000b32e:	30 8c       	mov	r12,8
8000b330:	f0 1f 03 4c 	mcall	8000c060 <main+0x13b4>
8000b334:	c0 28       	rjmp	8000b338 <main+0x68c>
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
8000b336:	d7 03       	nop
							break;
					}
					
					while (1)
					{
						if (++displayIdx >= NUM_SHELVES)
8000b338:	fe f8 0d b0 	ld.w	r8,pc[3504]
8000b33c:	11 88       	ld.ub	r8,r8[0x0]
8000b33e:	2f f8       	sub	r8,-1
8000b340:	5c 58       	castu.b	r8
8000b342:	fe f9 0d a6 	ld.w	r9,pc[3494]
8000b346:	b2 88       	st.b	r9[0x0],r8
8000b348:	fe f8 0d a0 	ld.w	r8,pc[3488]
8000b34c:	11 89       	ld.ub	r9,r8[0x0]
8000b34e:	30 38       	mov	r8,3
8000b350:	f0 09 18 00 	cp.b	r9,r8
8000b354:	e0 88 00 06 	brls	8000b360 <main+0x6b4>
						{
							displayIdx = 0; //12apr15 wrap around
8000b358:	fe f9 0d 90 	ld.w	r9,pc[3472]
8000b35c:	30 08       	mov	r8,0
8000b35e:	b2 88       	st.b	r9[0x0],r8
						}
						
						if (shelf[displayIdx].active)
8000b360:	fe f8 0d 88 	ld.w	r8,pc[3464]
8000b364:	11 88       	ld.ub	r8,r8[0x0]
8000b366:	10 99       	mov	r9,r8
8000b368:	fe fa 0d 88 	ld.w	r10,pc[3464]
8000b36c:	12 98       	mov	r8,r9
8000b36e:	a3 68       	lsl	r8,0x2
8000b370:	12 08       	add	r8,r9
8000b372:	f4 08 00 08 	add	r8,r10,r8
8000b376:	11 88       	ld.ub	r8,r8[0x0]
8000b378:	58 08       	cp.w	r8,0
8000b37a:	cd e0       	breq	8000b336 <main+0x68a>
							break; //this shelf is active, we don't need to look for another one
						}
						
					}

					cpu_set_timeout(displayTimerSeconds, &displayTimer); //8 seconds per shelf
8000b37c:	fe f8 0d 58 	ld.w	r8,pc[3416]
8000b380:	70 08       	ld.w	r8,r8[0x0]
8000b382:	ef 48 ff 40 	st.w	r7[-192],r8
8000b386:	fe f8 0d 52 	ld.w	r8,pc[3410]
8000b38a:	ef 48 ff 3c 	st.w	r7[-196],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b38e:	e1 b8 00 42 	mfsr	r8,0x108
8000b392:	10 99       	mov	r9,r8
8000b394:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000b398:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b39a:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000b39e:	70 09       	ld.w	r9,r8[0x0]
8000b3a0:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000b3a4:	10 09       	add	r9,r8
8000b3a6:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000b3aa:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b3ac:	ee f9 ff 3c 	ld.w	r9,r7[-196]
8000b3b0:	30 08       	mov	r8,0
8000b3b2:	f3 68 00 08 	st.b	r9[8],r8
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
8000b3b6:	fe f8 0d 52 	ld.w	r8,pc[3410]
8000b3ba:	ef 48 ff 44 	st.w	r7[-188],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000b3be:	e1 b8 00 42 	mfsr	r8,0x108
8000b3c2:	ef 48 ff 48 	st.w	r7[-184],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000b3c6:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b3ca:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b3ce:	30 28       	mov	r8,2
8000b3d0:	f0 09 18 00 	cp.b	r9,r8
8000b3d4:	c0 31       	brne	8000b3da <main+0x72e>
    return false;
8000b3d6:	30 08       	mov	r8,0
8000b3d8:	c4 38       	rjmp	8000b45e <main+0x7b2>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000b3da:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b3de:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b3e2:	30 18       	mov	r8,1
8000b3e4:	f0 09 18 00 	cp.b	r9,r8
8000b3e8:	c0 31       	brne	8000b3ee <main+0x742>
    return true;
8000b3ea:	30 18       	mov	r8,1
8000b3ec:	c3 98       	rjmp	8000b45e <main+0x7b2>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b3ee:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b3f2:	70 09       	ld.w	r9,r8[0x0]
8000b3f4:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b3f8:	70 18       	ld.w	r8,r8[0x4]
8000b3fa:	10 39       	cp.w	r9,r8
8000b3fc:	e0 88 00 1a 	brls	8000b430 <main+0x784>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b400:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b404:	70 09       	ld.w	r9,r8[0x0]
8000b406:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000b40a:	12 38       	cp.w	r8,r9
8000b40c:	c1 02       	brcc	8000b42c <main+0x780>
8000b40e:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b412:	70 19       	ld.w	r9,r8[0x4]
8000b414:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000b418:	12 38       	cp.w	r8,r9
8000b41a:	e0 88 00 09 	brls	8000b42c <main+0x780>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b41e:	ee f9 ff 44 	ld.w	r9,r7[-188]
8000b422:	30 18       	mov	r8,1
8000b424:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b428:	30 18       	mov	r8,1
8000b42a:	c1 a8       	rjmp	8000b45e <main+0x7b2>
    }
    return false;
8000b42c:	30 08       	mov	r8,0
8000b42e:	c1 88       	rjmp	8000b45e <main+0x7b2>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000b430:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b434:	70 09       	ld.w	r9,r8[0x0]
8000b436:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000b43a:	12 38       	cp.w	r8,r9
8000b43c:	c0 93       	brcs	8000b44e <main+0x7a2>
8000b43e:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b442:	70 19       	ld.w	r9,r8[0x4]
8000b444:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000b448:	12 38       	cp.w	r8,r9
8000b44a:	e0 88 00 09 	brls	8000b45c <main+0x7b0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b44e:	ee f9 ff 44 	ld.w	r9,r7[-188]
8000b452:	30 18       	mov	r8,1
8000b454:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b458:	30 18       	mov	r8,1
8000b45a:	c0 28       	rjmp	8000b45e <main+0x7b2>
    }
    return false;
8000b45c:	30 08       	mov	r8,0
				}

				/*
    			 * Manage storing usage statistics to flash
				 */
				if (cpu_is_timeout (&oneMinuteTimer))
8000b45e:	58 08       	cp.w	r8,0
8000b460:	c5 e0       	breq	8000b51c <main+0x870>
8000b462:	fe f8 0c a6 	ld.w	r8,pc[3238]
8000b466:	ef 48 ff 4c 	st.w	r7[-180],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000b46a:	ee f9 ff 4c 	ld.w	r9,r7[-180]
8000b46e:	30 28       	mov	r8,2
8000b470:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout (&oneMinuteTimer);
					
					increment_ledBoard_usage_min(); //increments usage minutes for active shelves only
8000b474:	f0 1f 03 26 	mcall	8000c10c <main+0x1460>
8000b478:	e0 68 03 e8 	mov	r8,1000
8000b47c:	ef 48 ff 54 	st.w	r7[-172],r8
8000b480:	e0 68 12 00 	mov	r8,4608
8000b484:	ea 18 00 7a 	orh	r8,0x7a
8000b488:	ef 48 ff 50 	st.w	r7[-176],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000b48c:	ee fa ff 54 	ld.w	r10,r7[-172]
8000b490:	ef 4a fe 5c 	st.w	r7[-420],r10
8000b494:	30 08       	mov	r8,0
8000b496:	ef 48 fe 58 	st.w	r7[-424],r8
8000b49a:	ee fc ff 50 	ld.w	r12,r7[-176]
8000b49e:	ef 4c fe 54 	st.w	r7[-428],r12
8000b4a2:	30 0a       	mov	r10,0
8000b4a4:	ef 4a fe 50 	st.w	r7[-432],r10
8000b4a8:	ee f9 fe 58 	ld.w	r9,r7[-424]
8000b4ac:	ee f8 fe 54 	ld.w	r8,r7[-428]
8000b4b0:	b1 39       	mul	r9,r8
8000b4b2:	ee f8 fe 50 	ld.w	r8,r7[-432]
8000b4b6:	ee fc fe 5c 	ld.w	r12,r7[-420]
8000b4ba:	b9 38       	mul	r8,r12
8000b4bc:	10 09       	add	r9,r8
8000b4be:	ee f8 fe 5c 	ld.w	r8,r7[-420]
8000b4c2:	ee fc fe 54 	ld.w	r12,r7[-428]
8000b4c6:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000b4ca:	16 09       	add	r9,r11
8000b4cc:	12 9b       	mov	r11,r9
8000b4ce:	e0 68 03 e7 	mov	r8,999
8000b4d2:	30 09       	mov	r9,0
8000b4d4:	10 0a       	add	r10,r8
8000b4d6:	f6 09 00 4b 	adc	r11,r11,r9
8000b4da:	e0 68 03 e8 	mov	r8,1000
8000b4de:	30 09       	mov	r9,0
8000b4e0:	f0 1f 02 ed 	mcall	8000c094 <main+0x13e8>
8000b4e4:	14 98       	mov	r8,r10
8000b4e6:	16 99       	mov	r9,r11
					
//DEBUG 11may15 set to one second for debug					cpu_set_timeout(cpu_ms_2_cy(60000, EC_CPU_CLOCK_FREQ), &oneMinuteTimer); //one minute for the usage statistics
					cpu_set_timeout((cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics DEBUG 11may15 one second instead of one minute
8000b4e8:	ef 48 ff 5c 	st.w	r7[-164],r8
8000b4ec:	fe f8 0c 1c 	ld.w	r8,pc[3100]
8000b4f0:	ef 48 ff 58 	st.w	r7[-168],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b4f4:	e1 b8 00 42 	mfsr	r8,0x108
8000b4f8:	10 99       	mov	r9,r8
8000b4fa:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b4fe:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b500:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b504:	70 09       	ld.w	r9,r8[0x0]
8000b506:	ee f8 ff 5c 	ld.w	r8,r7[-164]
8000b50a:	10 09       	add	r9,r8
8000b50c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b510:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b512:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b516:	30 08       	mov	r8,0
8000b518:	f3 68 00 08 	st.b	r9[8],r8
8000b51c:	fe f8 0b e4 	ld.w	r8,pc[3044]
8000b520:	ef 48 ff 60 	st.w	r7[-160],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000b524:	e1 b8 00 42 	mfsr	r8,0x108
8000b528:	ef 48 ff 64 	st.w	r7[-156],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000b52c:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000b530:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b534:	30 28       	mov	r8,2
8000b536:	f0 09 18 00 	cp.b	r9,r8
8000b53a:	c0 31       	brne	8000b540 <main+0x894>
    return false;
8000b53c:	30 08       	mov	r8,0
8000b53e:	c4 38       	rjmp	8000b5c4 <main+0x918>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000b540:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000b544:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b548:	30 18       	mov	r8,1
8000b54a:	f0 09 18 00 	cp.b	r9,r8
8000b54e:	c0 31       	brne	8000b554 <main+0x8a8>
    return true;
8000b550:	30 18       	mov	r8,1
8000b552:	c3 98       	rjmp	8000b5c4 <main+0x918>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b554:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000b558:	70 09       	ld.w	r9,r8[0x0]
8000b55a:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000b55e:	70 18       	ld.w	r8,r8[0x4]
8000b560:	10 39       	cp.w	r9,r8
8000b562:	e0 88 00 1a 	brls	8000b596 <main+0x8ea>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b566:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000b56a:	70 09       	ld.w	r9,r8[0x0]
8000b56c:	ee f8 ff 64 	ld.w	r8,r7[-156]
8000b570:	12 38       	cp.w	r8,r9
8000b572:	c1 02       	brcc	8000b592 <main+0x8e6>
8000b574:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000b578:	70 19       	ld.w	r9,r8[0x4]
8000b57a:	ee f8 ff 64 	ld.w	r8,r7[-156]
8000b57e:	12 38       	cp.w	r8,r9
8000b580:	e0 88 00 09 	brls	8000b592 <main+0x8e6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b584:	ee f9 ff 60 	ld.w	r9,r7[-160]
8000b588:	30 18       	mov	r8,1
8000b58a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b58e:	30 18       	mov	r8,1
8000b590:	c1 a8       	rjmp	8000b5c4 <main+0x918>
    }
    return false;
8000b592:	30 08       	mov	r8,0
8000b594:	c1 88       	rjmp	8000b5c4 <main+0x918>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000b596:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000b59a:	70 09       	ld.w	r9,r8[0x0]
8000b59c:	ee f8 ff 64 	ld.w	r8,r7[-156]
8000b5a0:	12 38       	cp.w	r8,r9
8000b5a2:	c0 93       	brcs	8000b5b4 <main+0x908>
8000b5a4:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000b5a8:	70 19       	ld.w	r9,r8[0x4]
8000b5aa:	ee f8 ff 64 	ld.w	r8,r7[-156]
8000b5ae:	12 38       	cp.w	r8,r9
8000b5b0:	e0 88 00 09 	brls	8000b5c2 <main+0x916>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b5b4:	ee f9 ff 60 	ld.w	r9,r7[-160]
8000b5b8:	30 18       	mov	r8,1
8000b5ba:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b5be:	30 18       	mov	r8,1
8000b5c0:	c0 28       	rjmp	8000b5c4 <main+0x918>
    }
    return false;
8000b5c2:	30 08       	mov	r8,0
				}
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
8000b5c4:	58 08       	cp.w	r8,0
8000b5c6:	e0 80 04 34 	breq	8000be2e <main+0x1182>
					
					for (int i=0; i< NUM_SHELVES; i++)
8000b5ca:	30 08       	mov	r8,0
8000b5cc:	ef 48 fe d4 	st.w	r7[-300],r8
8000b5d0:	c0 d8       	rjmp	8000b5ea <main+0x93e>
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
8000b5d2:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000b5d6:	5c 58       	castu.b	r8
8000b5d8:	30 0b       	mov	r11,0
8000b5da:	10 9c       	mov	r12,r8
8000b5dc:	f0 1f 02 c8 	mcall	8000c0fc <main+0x1450>
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
					
					for (int i=0; i< NUM_SHELVES; i++)
8000b5e0:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000b5e4:	2f f8       	sub	r8,-1
8000b5e6:	ef 48 fe d4 	st.w	r7[-300],r8
8000b5ea:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000b5ee:	58 38       	cp.w	r8,3
8000b5f0:	fe 9a ff f1 	brle	8000b5d2 <main+0x926>
8000b5f4:	fe f8 0b 0c 	ld.w	r8,pc[2828]
8000b5f8:	ef 48 ff 68 	st.w	r7[-152],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000b5fc:	ee f9 ff 68 	ld.w	r9,r7[-152]
8000b600:	30 28       	mov	r8,2
8000b602:	f3 68 00 08 	st.b	r9[8],r8
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
8000b606:	fe fc 0b 0a 	ld.w	r12,pc[2826]
8000b60a:	f0 1f 02 aa 	mcall	8000c0b0 <main+0x1404>
					electroclaveState = STATE_START_CLEAN;
8000b60e:	fe f9 0a 92 	ld.w	r9,pc[2706]
8000b612:	30 68       	mov	r8,6
8000b614:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000b616:	e0 8f 04 11 	bral	8000be38 <main+0x118c>
				
			case STATE_START_CLEAN:
				display_text(IDX_CLEAN);
8000b61a:	30 1c       	mov	r12,1
8000b61c:	f0 1f 02 91 	mcall	8000c060 <main+0x13b4>
				electroclaveState = STATE_CLEAN;
8000b620:	fe f9 0a 80 	ld.w	r9,pc[2688]
8000b624:	30 78       	mov	r8,7
8000b626:	b2 88       	st.b	r9[0x0],r8
8000b628:	e0 68 03 e8 	mov	r8,1000
8000b62c:	ef 48 ff 70 	st.w	r7[-144],r8
8000b630:	e0 68 12 00 	mov	r8,4608
8000b634:	ea 18 00 7a 	orh	r8,0x7a
8000b638:	ef 48 ff 6c 	st.w	r7[-148],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000b63c:	ee fa ff 70 	ld.w	r10,r7[-144]
8000b640:	ef 4a fe 6c 	st.w	r7[-404],r10
8000b644:	30 08       	mov	r8,0
8000b646:	ef 48 fe 68 	st.w	r7[-408],r8
8000b64a:	ee fc ff 6c 	ld.w	r12,r7[-148]
8000b64e:	ef 4c fe 64 	st.w	r7[-412],r12
8000b652:	30 0a       	mov	r10,0
8000b654:	ef 4a fe 60 	st.w	r7[-416],r10
8000b658:	ee f9 fe 68 	ld.w	r9,r7[-408]
8000b65c:	ee f8 fe 64 	ld.w	r8,r7[-412]
8000b660:	b1 39       	mul	r9,r8
8000b662:	ee f8 fe 60 	ld.w	r8,r7[-416]
8000b666:	ee fc fe 6c 	ld.w	r12,r7[-404]
8000b66a:	b9 38       	mul	r8,r12
8000b66c:	10 09       	add	r9,r8
8000b66e:	ee f8 fe 6c 	ld.w	r8,r7[-404]
8000b672:	ee fc fe 64 	ld.w	r12,r7[-412]
8000b676:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000b67a:	16 09       	add	r9,r11
8000b67c:	12 9b       	mov	r11,r9
8000b67e:	e0 68 03 e7 	mov	r8,999
8000b682:	30 09       	mov	r9,0
8000b684:	10 0a       	add	r10,r8
8000b686:	f6 09 00 4b 	adc	r11,r11,r9
8000b68a:	e0 68 03 e8 	mov	r8,1000
8000b68e:	30 09       	mov	r9,0
8000b690:	f0 1f 02 81 	mcall	8000c094 <main+0x13e8>
8000b694:	14 98       	mov	r8,r10
8000b696:	16 99       	mov	r9,r11
#if 0 //DEBUG do this in seconds to debug logic 11may15				
				cpu_set_timeout((20 * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer);
#endif
				cpu_set_timeout((20 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //DEBUG 11may15 
8000b698:	10 99       	mov	r9,r8
8000b69a:	12 98       	mov	r8,r9
8000b69c:	a3 68       	lsl	r8,0x2
8000b69e:	12 08       	add	r8,r9
8000b6a0:	a3 68       	lsl	r8,0x2
8000b6a2:	ef 48 ff 78 	st.w	r7[-136],r8
8000b6a6:	fe f8 0a 6e 	ld.w	r8,pc[2670]
8000b6aa:	ef 48 ff 74 	st.w	r7[-140],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b6ae:	e1 b8 00 42 	mfsr	r8,0x108
8000b6b2:	10 99       	mov	r9,r8
8000b6b4:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000b6b8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b6ba:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000b6be:	70 09       	ld.w	r9,r8[0x0]
8000b6c0:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000b6c4:	10 09       	add	r9,r8
8000b6c6:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000b6ca:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b6cc:	ee f9 ff 74 	ld.w	r9,r7[-140]
8000b6d0:	30 08       	mov	r8,0
8000b6d2:	f3 68 00 08 	st.b	r9[8],r8

				break;	
8000b6d6:	e0 8f 03 b1 	bral	8000be38 <main+0x118c>
8000b6da:	fe f8 0a 3a 	ld.w	r8,pc[2618]
8000b6de:	ef 48 ff 7c 	st.w	r7[-132],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000b6e2:	e1 b8 00 42 	mfsr	r8,0x108
8000b6e6:	ef 48 ff 80 	st.w	r7[-128],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000b6ea:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000b6ee:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b6f2:	30 28       	mov	r8,2
8000b6f4:	f0 09 18 00 	cp.b	r9,r8
8000b6f8:	c0 31       	brne	8000b6fe <main+0xa52>
    return false;
8000b6fa:	30 08       	mov	r8,0
8000b6fc:	c4 38       	rjmp	8000b782 <main+0xad6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000b6fe:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000b702:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b706:	30 18       	mov	r8,1
8000b708:	f0 09 18 00 	cp.b	r9,r8
8000b70c:	c0 31       	brne	8000b712 <main+0xa66>
    return true;
8000b70e:	30 18       	mov	r8,1
8000b710:	c3 98       	rjmp	8000b782 <main+0xad6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b712:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000b716:	70 09       	ld.w	r9,r8[0x0]
8000b718:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000b71c:	70 18       	ld.w	r8,r8[0x4]
8000b71e:	10 39       	cp.w	r9,r8
8000b720:	e0 88 00 1a 	brls	8000b754 <main+0xaa8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b724:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000b728:	70 09       	ld.w	r9,r8[0x0]
8000b72a:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000b72e:	12 38       	cp.w	r8,r9
8000b730:	c1 02       	brcc	8000b750 <main+0xaa4>
8000b732:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000b736:	70 19       	ld.w	r9,r8[0x4]
8000b738:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000b73c:	12 38       	cp.w	r8,r9
8000b73e:	e0 88 00 09 	brls	8000b750 <main+0xaa4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b742:	ee f9 ff 7c 	ld.w	r9,r7[-132]
8000b746:	30 18       	mov	r8,1
8000b748:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b74c:	30 18       	mov	r8,1
8000b74e:	c1 a8       	rjmp	8000b782 <main+0xad6>
    }
    return false;
8000b750:	30 08       	mov	r8,0
8000b752:	c1 88       	rjmp	8000b782 <main+0xad6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000b754:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000b758:	70 09       	ld.w	r9,r8[0x0]
8000b75a:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000b75e:	12 38       	cp.w	r8,r9
8000b760:	c0 93       	brcs	8000b772 <main+0xac6>
8000b762:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000b766:	70 19       	ld.w	r9,r8[0x4]
8000b768:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000b76c:	12 38       	cp.w	r8,r9
8000b76e:	e0 88 00 09 	brls	8000b780 <main+0xad4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b772:	ee f9 ff 7c 	ld.w	r9,r7[-132]
8000b776:	30 18       	mov	r8,1
8000b778:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b77c:	30 18       	mov	r8,1
8000b77e:	c0 28       	rjmp	8000b782 <main+0xad6>
    }
    return false;
8000b780:	30 08       	mov	r8,0
				
			case STATE_CLEAN:
				if (cpu_is_timeout(&cleanTimer)) {
8000b782:	58 08       	cp.w	r8,0
8000b784:	e0 80 03 57 	breq	8000be32 <main+0x1186>
8000b788:	fe f8 09 8c 	ld.w	r8,pc[2444]
8000b78c:	ef 48 ff 84 	st.w	r7[-124],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000b790:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000b794:	30 28       	mov	r8,2
8000b796:	f3 68 00 08 	st.b	r9[8],r8
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
8000b79a:	fe f9 09 06 	ld.w	r9,pc[2310]
8000b79e:	30 38       	mov	r8,3
8000b7a0:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000b7a2:	e0 8f 03 4b 	bral	8000be38 <main+0x118c>
				
			
			case STATE_CHASSIS_ERROR:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
8000b7a6:	30 08       	mov	r8,0
8000b7a8:	ef 48 fe d8 	st.w	r7[-296],r8
8000b7ac:	c0 d8       	rjmp	8000b7c6 <main+0xb1a>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
8000b7ae:	ee f8 fe d8 	ld.w	r8,r7[-296]
8000b7b2:	5c 58       	castu.b	r8
8000b7b4:	30 0b       	mov	r11,0
8000b7b6:	10 9c       	mov	r12,r8
8000b7b8:	f0 1f 02 51 	mcall	8000c0fc <main+0x1450>
				break;
				
			
			case STATE_CHASSIS_ERROR:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
8000b7bc:	ee f8 fe d8 	ld.w	r8,r7[-296]
8000b7c0:	2f f8       	sub	r8,-1
8000b7c2:	ef 48 fe d8 	st.w	r7[-296],r8
8000b7c6:	ee f8 fe d8 	ld.w	r8,r7[-296]
8000b7ca:	58 38       	cp.w	r8,3
8000b7cc:	fe 9a ff f1 	brle	8000b7ae <main+0xb02>
8000b7d0:	fe f8 09 48 	ld.w	r8,pc[2376]
8000b7d4:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000b7d8:	e1 b8 00 42 	mfsr	r8,0x108
8000b7dc:	ef 48 ff 8c 	st.w	r7[-116],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000b7e0:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000b7e4:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b7e8:	30 28       	mov	r8,2
8000b7ea:	f0 09 18 00 	cp.b	r9,r8
8000b7ee:	c0 31       	brne	8000b7f4 <main+0xb48>
    return false;
8000b7f0:	30 08       	mov	r8,0
8000b7f2:	c4 38       	rjmp	8000b878 <main+0xbcc>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000b7f4:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000b7f8:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b7fc:	30 18       	mov	r8,1
8000b7fe:	f0 09 18 00 	cp.b	r9,r8
8000b802:	c0 31       	brne	8000b808 <main+0xb5c>
    return true;
8000b804:	30 18       	mov	r8,1
8000b806:	c3 98       	rjmp	8000b878 <main+0xbcc>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b808:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000b80c:	70 09       	ld.w	r9,r8[0x0]
8000b80e:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000b812:	70 18       	ld.w	r8,r8[0x4]
8000b814:	10 39       	cp.w	r9,r8
8000b816:	e0 88 00 1a 	brls	8000b84a <main+0xb9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b81a:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000b81e:	70 09       	ld.w	r9,r8[0x0]
8000b820:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000b824:	12 38       	cp.w	r8,r9
8000b826:	c1 02       	brcc	8000b846 <main+0xb9a>
8000b828:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000b82c:	70 19       	ld.w	r9,r8[0x4]
8000b82e:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000b832:	12 38       	cp.w	r8,r9
8000b834:	e0 88 00 09 	brls	8000b846 <main+0xb9a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b838:	ee f9 ff 88 	ld.w	r9,r7[-120]
8000b83c:	30 18       	mov	r8,1
8000b83e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b842:	30 18       	mov	r8,1
8000b844:	c1 a8       	rjmp	8000b878 <main+0xbcc>
    }
    return false;
8000b846:	30 08       	mov	r8,0
8000b848:	c1 88       	rjmp	8000b878 <main+0xbcc>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000b84a:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000b84e:	70 09       	ld.w	r9,r8[0x0]
8000b850:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000b854:	12 38       	cp.w	r8,r9
8000b856:	c0 93       	brcs	8000b868 <main+0xbbc>
8000b858:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000b85c:	70 19       	ld.w	r9,r8[0x4]
8000b85e:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000b862:	12 38       	cp.w	r8,r9
8000b864:	e0 88 00 09 	brls	8000b876 <main+0xbca>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b868:	ee f9 ff 88 	ld.w	r9,r7[-120]
8000b86c:	30 18       	mov	r8,1
8000b86e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b872:	30 18       	mov	r8,1
8000b874:	c0 28       	rjmp	8000b878 <main+0xbcc>
    }
    return false;
8000b876:	30 08       	mov	r8,0
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				
				
				if (cpu_is_timeout(&errorDisplayTimer))
8000b878:	58 08       	cp.w	r8,0
8000b87a:	e0 80 02 de 	breq	8000be36 <main+0x118a>
8000b87e:	fe f8 08 9a 	ld.w	r8,pc[2202]
8000b882:	ef 48 ff 90 	st.w	r7[-112],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000b886:	ee f9 ff 90 	ld.w	r9,r7[-112]
8000b88a:	30 28       	mov	r8,2
8000b88c:	f3 68 00 08 	st.b	r9[8],r8
8000b890:	c0 28       	rjmp	8000b894 <main+0xbe8>
						{
							displayChanged = 0;
							break; //get out of while loop and wait until we need to update the display again
						}
						
					} //while(1)
8000b892:	d7 03       	nop
				{
					cpu_stop_timeout(&errorDisplayTimer);

					while(1)
					{
						switch(errorDisplayState)
8000b894:	fe f8 08 88 	ld.w	r8,pc[2184]
8000b898:	11 88       	ld.ub	r8,r8[0x0]
8000b89a:	58 28       	cp.w	r8,2
8000b89c:	e0 80 00 fc 	breq	8000ba94 <main+0xde8>
8000b8a0:	e0 89 00 08 	brgt	8000b8b0 <main+0xc04>
8000b8a4:	58 08       	cp.w	r8,0
8000b8a6:	c0 d0       	breq	8000b8c0 <main+0xc14>
8000b8a8:	58 18       	cp.w	r8,1
8000b8aa:	c6 b0       	breq	8000b980 <main+0xcd4>
8000b8ac:	e0 8f 02 91 	bral	8000bdce <main+0x1122>
8000b8b0:	58 38       	cp.w	r8,3
8000b8b2:	e0 80 01 7a 	breq	8000bba6 <main+0xefa>
8000b8b6:	58 48       	cp.w	r8,4
8000b8b8:	e0 80 02 00 	breq	8000bcb8 <main+0x100c>
8000b8bc:	e0 8f 02 89 	bral	8000bdce <main+0x1122>
						{
							case 0:
								display_text(IDX_ERROR);
8000b8c0:	30 4c       	mov	r12,4
8000b8c2:	f0 1f 01 e8 	mcall	8000c060 <main+0x13b4>
								displayChanged = 1;
8000b8c6:	fe f9 08 5a 	ld.w	r9,pc[2138]
8000b8ca:	30 18       	mov	r8,1
8000b8cc:	b2 88       	st.b	r9[0x0],r8
8000b8ce:	e0 68 03 e8 	mov	r8,1000
8000b8d2:	ef 48 ff 98 	st.w	r7[-104],r8
8000b8d6:	e0 68 12 00 	mov	r8,4608
8000b8da:	ea 18 00 7a 	orh	r8,0x7a
8000b8de:	ef 48 ff 94 	st.w	r7[-108],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000b8e2:	ee fa ff 98 	ld.w	r10,r7[-104]
8000b8e6:	ef 4a fe 7c 	st.w	r7[-388],r10
8000b8ea:	30 08       	mov	r8,0
8000b8ec:	ef 48 fe 78 	st.w	r7[-392],r8
8000b8f0:	ee fc ff 94 	ld.w	r12,r7[-108]
8000b8f4:	ef 4c fe 74 	st.w	r7[-396],r12
8000b8f8:	30 0a       	mov	r10,0
8000b8fa:	ef 4a fe 70 	st.w	r7[-400],r10
8000b8fe:	ee f9 fe 78 	ld.w	r9,r7[-392]
8000b902:	ee f8 fe 74 	ld.w	r8,r7[-396]
8000b906:	b1 39       	mul	r9,r8
8000b908:	ee f8 fe 70 	ld.w	r8,r7[-400]
8000b90c:	ee fc fe 7c 	ld.w	r12,r7[-388]
8000b910:	b9 38       	mul	r8,r12
8000b912:	10 09       	add	r9,r8
8000b914:	ee f8 fe 7c 	ld.w	r8,r7[-388]
8000b918:	ee fc fe 74 	ld.w	r12,r7[-396]
8000b91c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000b920:	16 09       	add	r9,r11
8000b922:	12 9b       	mov	r11,r9
8000b924:	e0 68 03 e7 	mov	r8,999
8000b928:	30 09       	mov	r9,0
8000b92a:	10 0a       	add	r10,r8
8000b92c:	f6 09 00 4b 	adc	r11,r11,r9
8000b930:	e0 68 03 e8 	mov	r8,1000
8000b934:	30 09       	mov	r9,0
8000b936:	f0 1f 01 d8 	mcall	8000c094 <main+0x13e8>
8000b93a:	14 98       	mov	r8,r10
8000b93c:	16 99       	mov	r9,r11
								cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
8000b93e:	a3 78       	lsl	r8,0x3
8000b940:	ef 48 ff a0 	st.w	r7[-96],r8
8000b944:	fe f8 07 d4 	ld.w	r8,pc[2004]
8000b948:	ef 48 ff 9c 	st.w	r7[-100],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b94c:	e1 b8 00 42 	mfsr	r8,0x108
8000b950:	10 99       	mov	r9,r8
8000b952:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b956:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b958:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b95c:	70 09       	ld.w	r9,r8[0x0]
8000b95e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000b962:	10 09       	add	r9,r8
8000b964:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b968:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b96a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000b96e:	30 08       	mov	r8,0
8000b970:	f3 68 00 08 	st.b	r9[8],r8
								errorDisplayState = 1;
8000b974:	fe f9 07 a8 	ld.w	r9,pc[1960]
8000b978:	30 18       	mov	r8,1
8000b97a:	b2 88       	st.b	r9[0x0],r8
								break;
8000b97c:	e0 8f 02 2d 	bral	8000bdd6 <main+0x112a>
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
8000b980:	fe f8 07 a4 	ld.w	r8,pc[1956]
8000b984:	11 a8       	ld.ub	r8,r8[0x2]
8000b986:	58 08       	cp.w	r8,0
8000b988:	c2 61       	brne	8000b9d4 <main+0xd28>
8000b98a:	fe f8 07 9a 	ld.w	r8,pc[1946]
8000b98e:	11 f8       	ld.ub	r8,r8[0x7]
8000b990:	58 08       	cp.w	r8,0
8000b992:	c2 11       	brne	8000b9d4 <main+0xd28>
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
8000b994:	fe f8 07 94 	ld.w	r8,pc[1940]
8000b998:	11 88       	ld.ub	r8,r8[0x0]
8000b99a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
								displayChanged = 1;
								cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								errorDisplayState = 1;
								break;
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
8000b99e:	5c 58       	castu.b	r8
8000b9a0:	c1 a1       	brne	8000b9d4 <main+0xd28>
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
8000b9a2:	fe f8 07 86 	ld.w	r8,pc[1926]
8000b9a6:	11 88       	ld.ub	r8,r8[0x0]
8000b9a8:	e2 18 00 02 	andl	r8,0x2,COH
								displayChanged = 1;
								cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								errorDisplayState = 1;
								break;
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
8000b9ac:	c1 41       	brne	8000b9d4 <main+0xd28>
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
									(sysErr.botdrive & BIT(0)) || (sysErr.botdrive & BIT(1)) || (sysErr.botdrive & BIT(2)))
8000b9ae:	fe f8 07 7a 	ld.w	r8,pc[1914]
8000b9b2:	70 18       	ld.w	r8,r8[0x4]
8000b9b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
								displayChanged = 1;
								cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								errorDisplayState = 1;
								break;
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
8000b9b8:	5c 58       	castu.b	r8
8000b9ba:	c0 d1       	brne	8000b9d4 <main+0xd28>
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
									(sysErr.botdrive & BIT(0)) || (sysErr.botdrive & BIT(1)) || (sysErr.botdrive & BIT(2)))
8000b9bc:	fe f8 07 6c 	ld.w	r8,pc[1900]
8000b9c0:	70 18       	ld.w	r8,r8[0x4]
8000b9c2:	e2 18 00 02 	andl	r8,0x2,COH
								displayChanged = 1;
								cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								errorDisplayState = 1;
								break;
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
8000b9c6:	c0 71       	brne	8000b9d4 <main+0xd28>
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
									(sysErr.botdrive & BIT(0)) || (sysErr.botdrive & BIT(1)) || (sysErr.botdrive & BIT(2)))
8000b9c8:	fe f8 07 60 	ld.w	r8,pc[1888]
8000b9cc:	70 18       	ld.w	r8,r8[0x4]
8000b9ce:	e2 18 00 04 	andl	r8,0x4,COH
								displayChanged = 1;
								cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								errorDisplayState = 1;
								break;
							case 1:
								if ((ledBrdSide[LED_BRD_0_BOT].maxUsageReached || ledBrdSide[LED_BRD_1_TOP].maxUsageReached) ||
8000b9d2:	c5 b0       	breq	8000ba88 <main+0xddc>
									(sysErr.topdrive & BIT(0)) || (sysErr.topdrive & BIT(1)) ||
									(sysErr.botdrive & BIT(0)) || (sysErr.botdrive & BIT(1)) || (sysErr.botdrive & BIT(2)))
								{
									display_text(IDX_SHELF1);
8000b9d4:	30 5c       	mov	r12,5
8000b9d6:	f0 1f 01 a3 	mcall	8000c060 <main+0x13b4>
									displayChanged = 1;
8000b9da:	fe f9 07 46 	ld.w	r9,pc[1862]
8000b9de:	30 18       	mov	r8,1
8000b9e0:	b2 88       	st.b	r9[0x0],r8
8000b9e2:	e0 68 03 e8 	mov	r8,1000
8000b9e6:	ef 48 ff a8 	st.w	r7[-88],r8
8000b9ea:	e0 68 12 00 	mov	r8,4608
8000b9ee:	ea 18 00 7a 	orh	r8,0x7a
8000b9f2:	ef 48 ff a4 	st.w	r7[-92],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000b9f6:	ee fa ff a8 	ld.w	r10,r7[-88]
8000b9fa:	ef 4a fe 8c 	st.w	r7[-372],r10
8000b9fe:	30 08       	mov	r8,0
8000ba00:	ef 48 fe 88 	st.w	r7[-376],r8
8000ba04:	ee fc ff a4 	ld.w	r12,r7[-92]
8000ba08:	ef 4c fe 84 	st.w	r7[-380],r12
8000ba0c:	30 0a       	mov	r10,0
8000ba0e:	ef 4a fe 80 	st.w	r7[-384],r10
8000ba12:	ee f9 fe 88 	ld.w	r9,r7[-376]
8000ba16:	ee f8 fe 84 	ld.w	r8,r7[-380]
8000ba1a:	b1 39       	mul	r9,r8
8000ba1c:	ee f8 fe 80 	ld.w	r8,r7[-384]
8000ba20:	ee fc fe 8c 	ld.w	r12,r7[-372]
8000ba24:	b9 38       	mul	r8,r12
8000ba26:	10 09       	add	r9,r8
8000ba28:	ee f8 fe 8c 	ld.w	r8,r7[-372]
8000ba2c:	ee fc fe 84 	ld.w	r12,r7[-380]
8000ba30:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000ba34:	16 09       	add	r9,r11
8000ba36:	12 9b       	mov	r11,r9
8000ba38:	e0 68 03 e7 	mov	r8,999
8000ba3c:	30 09       	mov	r9,0
8000ba3e:	10 0a       	add	r10,r8
8000ba40:	f6 09 00 4b 	adc	r11,r11,r9
8000ba44:	e0 68 03 e8 	mov	r8,1000
8000ba48:	30 09       	mov	r9,0
8000ba4a:	f0 1f 01 93 	mcall	8000c094 <main+0x13e8>
8000ba4e:	14 98       	mov	r8,r10
8000ba50:	16 99       	mov	r9,r11
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
8000ba52:	a3 78       	lsl	r8,0x3
8000ba54:	ef 48 ff b0 	st.w	r7[-80],r8
8000ba58:	fe f8 06 c0 	ld.w	r8,pc[1728]
8000ba5c:	ef 48 ff ac 	st.w	r7[-84],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000ba60:	e1 b8 00 42 	mfsr	r8,0x108
8000ba64:	10 99       	mov	r9,r8
8000ba66:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000ba6a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000ba6c:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000ba70:	70 09       	ld.w	r9,r8[0x0]
8000ba72:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000ba76:	10 09       	add	r9,r8
8000ba78:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000ba7c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000ba7e:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000ba82:	30 08       	mov	r8,0
8000ba84:	f3 68 00 08 	st.b	r9[8],r8
								}
								errorDisplayState = 2;
8000ba88:	fe f9 06 94 	ld.w	r9,pc[1684]
8000ba8c:	30 28       	mov	r8,2
8000ba8e:	b2 88       	st.b	r9[0x0],r8
								break;
8000ba90:	e0 8f 01 a3 	bral	8000bdd6 <main+0x112a>
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
8000ba94:	fe f8 06 90 	ld.w	r8,pc[1680]
8000ba98:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000ba9c:	58 08       	cp.w	r8,0
8000ba9e:	c2 51       	brne	8000bae8 <main+0xe3c>
8000baa0:	fe f8 06 84 	ld.w	r8,pc[1668]
8000baa4:	f1 38 00 11 	ld.ub	r8,r8[17]
8000baa8:	58 08       	cp.w	r8,0
8000baaa:	c1 f1       	brne	8000bae8 <main+0xe3c>
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
8000baac:	fe f8 06 7c 	ld.w	r8,pc[1660]
8000bab0:	11 88       	ld.ub	r8,r8[0x0]
8000bab2:	e2 18 00 04 	andl	r8,0x4,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 2;
								break;
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
8000bab6:	c1 91       	brne	8000bae8 <main+0xe3c>
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
8000bab8:	fe f8 06 70 	ld.w	r8,pc[1648]
8000babc:	11 88       	ld.ub	r8,r8[0x0]
8000babe:	e2 18 00 08 	andl	r8,0x8,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 2;
								break;
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
8000bac2:	c1 31       	brne	8000bae8 <main+0xe3c>
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
									(sysErr.botdrive & BIT(3)) || (sysErr.botdrive & BIT(4)) || (sysErr.botdrive & BIT(5)))
8000bac4:	fe f8 06 64 	ld.w	r8,pc[1636]
8000bac8:	70 18       	ld.w	r8,r8[0x4]
8000baca:	e2 18 00 08 	andl	r8,0x8,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 2;
								break;
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
8000bace:	c0 d1       	brne	8000bae8 <main+0xe3c>
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
									(sysErr.botdrive & BIT(3)) || (sysErr.botdrive & BIT(4)) || (sysErr.botdrive & BIT(5)))
8000bad0:	fe f8 06 58 	ld.w	r8,pc[1624]
8000bad4:	70 18       	ld.w	r8,r8[0x4]
8000bad6:	e2 18 00 10 	andl	r8,0x10,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 2;
								break;
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
8000bada:	c0 71       	brne	8000bae8 <main+0xe3c>
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
									(sysErr.botdrive & BIT(3)) || (sysErr.botdrive & BIT(4)) || (sysErr.botdrive & BIT(5)))
8000badc:	fe f8 06 4c 	ld.w	r8,pc[1612]
8000bae0:	70 18       	ld.w	r8,r8[0x4]
8000bae2:	e2 18 00 20 	andl	r8,0x20,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 2;
								break;
							case 2:
								if ((ledBrdSide[LED_BRD_1_BOT].maxUsageReached || ledBrdSide[LED_BRD_2_TOP].maxUsageReached) ||
8000bae6:	c5 b0       	breq	8000bb9c <main+0xef0>
									(sysErr.topdrive & BIT(2)) || (sysErr.topdrive & BIT(3)) ||
									(sysErr.botdrive & BIT(3)) || (sysErr.botdrive & BIT(4)) || (sysErr.botdrive & BIT(5)))
								{
									display_text(IDX_SHELF2);
8000bae8:	30 6c       	mov	r12,6
8000baea:	f0 1f 01 5e 	mcall	8000c060 <main+0x13b4>
									displayChanged = 1;
8000baee:	fe f9 06 32 	ld.w	r9,pc[1586]
8000baf2:	30 18       	mov	r8,1
8000baf4:	b2 88       	st.b	r9[0x0],r8
8000baf6:	e0 68 03 e8 	mov	r8,1000
8000bafa:	ef 48 ff b8 	st.w	r7[-72],r8
8000bafe:	e0 68 12 00 	mov	r8,4608
8000bb02:	ea 18 00 7a 	orh	r8,0x7a
8000bb06:	ef 48 ff b4 	st.w	r7[-76],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000bb0a:	ee fa ff b8 	ld.w	r10,r7[-72]
8000bb0e:	ef 4a fe 9c 	st.w	r7[-356],r10
8000bb12:	30 08       	mov	r8,0
8000bb14:	ef 48 fe 98 	st.w	r7[-360],r8
8000bb18:	ee fc ff b4 	ld.w	r12,r7[-76]
8000bb1c:	ef 4c fe 94 	st.w	r7[-364],r12
8000bb20:	30 0a       	mov	r10,0
8000bb22:	ef 4a fe 90 	st.w	r7[-368],r10
8000bb26:	ee f9 fe 98 	ld.w	r9,r7[-360]
8000bb2a:	ee f8 fe 94 	ld.w	r8,r7[-364]
8000bb2e:	b1 39       	mul	r9,r8
8000bb30:	ee f8 fe 90 	ld.w	r8,r7[-368]
8000bb34:	ee fc fe 9c 	ld.w	r12,r7[-356]
8000bb38:	b9 38       	mul	r8,r12
8000bb3a:	10 09       	add	r9,r8
8000bb3c:	ee f8 fe 9c 	ld.w	r8,r7[-356]
8000bb40:	ee fc fe 94 	ld.w	r12,r7[-364]
8000bb44:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000bb48:	16 09       	add	r9,r11
8000bb4a:	12 9b       	mov	r11,r9
8000bb4c:	e0 68 03 e7 	mov	r8,999
8000bb50:	30 09       	mov	r9,0
8000bb52:	10 0a       	add	r10,r8
8000bb54:	f6 09 00 4b 	adc	r11,r11,r9
8000bb58:	e0 68 03 e8 	mov	r8,1000
8000bb5c:	30 09       	mov	r9,0
8000bb5e:	f0 1f 01 4e 	mcall	8000c094 <main+0x13e8>
8000bb62:	14 98       	mov	r8,r10
8000bb64:	16 99       	mov	r9,r11
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
8000bb66:	a3 78       	lsl	r8,0x3
8000bb68:	ef 48 ff c0 	st.w	r7[-64],r8
8000bb6c:	fe f8 05 ac 	ld.w	r8,pc[1452]
8000bb70:	ef 48 ff bc 	st.w	r7[-68],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000bb74:	e1 b8 00 42 	mfsr	r8,0x108
8000bb78:	10 99       	mov	r9,r8
8000bb7a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000bb7e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000bb80:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000bb84:	70 09       	ld.w	r9,r8[0x0]
8000bb86:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000bb8a:	10 09       	add	r9,r8
8000bb8c:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000bb90:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000bb92:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000bb96:	30 08       	mov	r8,0
8000bb98:	f3 68 00 08 	st.b	r9[8],r8
								}
								errorDisplayState = 3;
8000bb9c:	fe f9 05 80 	ld.w	r9,pc[1408]
8000bba0:	30 38       	mov	r8,3
8000bba2:	b2 88       	st.b	r9[0x0],r8
								break;
8000bba4:	c1 99       	rjmp	8000bdd6 <main+0x112a>
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
8000bba6:	fe f8 05 7e 	ld.w	r8,pc[1406]
8000bbaa:	f1 38 00 16 	ld.ub	r8,r8[22]
8000bbae:	58 08       	cp.w	r8,0
8000bbb0:	c2 51       	brne	8000bbfa <main+0xf4e>
8000bbb2:	fe f8 05 72 	ld.w	r8,pc[1394]
8000bbb6:	f1 38 00 1b 	ld.ub	r8,r8[27]
8000bbba:	58 08       	cp.w	r8,0
8000bbbc:	c1 f1       	brne	8000bbfa <main+0xf4e>
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
8000bbbe:	fe f8 05 6a 	ld.w	r8,pc[1386]
8000bbc2:	11 88       	ld.ub	r8,r8[0x0]
8000bbc4:	e2 18 00 10 	andl	r8,0x10,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 3;
								break;
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
8000bbc8:	c1 91       	brne	8000bbfa <main+0xf4e>
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
8000bbca:	fe f8 05 5e 	ld.w	r8,pc[1374]
8000bbce:	11 88       	ld.ub	r8,r8[0x0]
8000bbd0:	e2 18 00 20 	andl	r8,0x20,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 3;
								break;
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
8000bbd4:	c1 31       	brne	8000bbfa <main+0xf4e>
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
									(sysErr.botdrive & BIT(6)) || (sysErr.botdrive & BIT(7)) || (sysErr.botdrive & BIT(8)))
8000bbd6:	fe f8 05 52 	ld.w	r8,pc[1362]
8000bbda:	70 18       	ld.w	r8,r8[0x4]
8000bbdc:	e2 18 00 40 	andl	r8,0x40,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 3;
								break;
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
8000bbe0:	c0 d1       	brne	8000bbfa <main+0xf4e>
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
									(sysErr.botdrive & BIT(6)) || (sysErr.botdrive & BIT(7)) || (sysErr.botdrive & BIT(8)))
8000bbe2:	fe f8 05 46 	ld.w	r8,pc[1350]
8000bbe6:	70 18       	ld.w	r8,r8[0x4]
8000bbe8:	e2 18 00 80 	andl	r8,0x80,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 3;
								break;
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
8000bbec:	c0 71       	brne	8000bbfa <main+0xf4e>
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
									(sysErr.botdrive & BIT(6)) || (sysErr.botdrive & BIT(7)) || (sysErr.botdrive & BIT(8)))
8000bbee:	fe f8 05 3a 	ld.w	r8,pc[1338]
8000bbf2:	70 18       	ld.w	r8,r8[0x4]
8000bbf4:	e2 18 01 00 	andl	r8,0x100,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 3;
								break;
							case 3:
								if ((ledBrdSide[LED_BRD_2_BOT].maxUsageReached || ledBrdSide[LED_BRD_3_TOP].maxUsageReached) ||
8000bbf8:	c5 b0       	breq	8000bcae <main+0x1002>
									(sysErr.topdrive & BIT(4)) || (sysErr.topdrive & BIT(5)) ||
									(sysErr.botdrive & BIT(6)) || (sysErr.botdrive & BIT(7)) || (sysErr.botdrive & BIT(8)))
								{
									display_text(IDX_SHELF3);
8000bbfa:	30 7c       	mov	r12,7
8000bbfc:	f0 1f 01 19 	mcall	8000c060 <main+0x13b4>
									displayChanged = 1;
8000bc00:	fe f9 05 20 	ld.w	r9,pc[1312]
8000bc04:	30 18       	mov	r8,1
8000bc06:	b2 88       	st.b	r9[0x0],r8
8000bc08:	e0 68 03 e8 	mov	r8,1000
8000bc0c:	ef 48 ff c8 	st.w	r7[-56],r8
8000bc10:	e0 68 12 00 	mov	r8,4608
8000bc14:	ea 18 00 7a 	orh	r8,0x7a
8000bc18:	ef 48 ff c4 	st.w	r7[-60],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000bc1c:	ee fa ff c8 	ld.w	r10,r7[-56]
8000bc20:	ef 4a fe ac 	st.w	r7[-340],r10
8000bc24:	30 08       	mov	r8,0
8000bc26:	ef 48 fe a8 	st.w	r7[-344],r8
8000bc2a:	ee fc ff c4 	ld.w	r12,r7[-60]
8000bc2e:	ef 4c fe a4 	st.w	r7[-348],r12
8000bc32:	30 0a       	mov	r10,0
8000bc34:	ef 4a fe a0 	st.w	r7[-352],r10
8000bc38:	ee f9 fe a8 	ld.w	r9,r7[-344]
8000bc3c:	ee f8 fe a4 	ld.w	r8,r7[-348]
8000bc40:	b1 39       	mul	r9,r8
8000bc42:	ee f8 fe a0 	ld.w	r8,r7[-352]
8000bc46:	ee fc fe ac 	ld.w	r12,r7[-340]
8000bc4a:	b9 38       	mul	r8,r12
8000bc4c:	10 09       	add	r9,r8
8000bc4e:	ee f8 fe ac 	ld.w	r8,r7[-340]
8000bc52:	ee fc fe a4 	ld.w	r12,r7[-348]
8000bc56:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000bc5a:	16 09       	add	r9,r11
8000bc5c:	12 9b       	mov	r11,r9
8000bc5e:	e0 68 03 e7 	mov	r8,999
8000bc62:	30 09       	mov	r9,0
8000bc64:	10 0a       	add	r10,r8
8000bc66:	f6 09 00 4b 	adc	r11,r11,r9
8000bc6a:	e0 68 03 e8 	mov	r8,1000
8000bc6e:	30 09       	mov	r9,0
8000bc70:	f0 1f 01 09 	mcall	8000c094 <main+0x13e8>
8000bc74:	14 98       	mov	r8,r10
8000bc76:	16 99       	mov	r9,r11
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
8000bc78:	a3 78       	lsl	r8,0x3
8000bc7a:	ef 48 ff d0 	st.w	r7[-48],r8
8000bc7e:	fe f8 04 9a 	ld.w	r8,pc[1178]
8000bc82:	ef 48 ff cc 	st.w	r7[-52],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000bc86:	e1 b8 00 42 	mfsr	r8,0x108
8000bc8a:	10 99       	mov	r9,r8
8000bc8c:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000bc90:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000bc92:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000bc96:	70 09       	ld.w	r9,r8[0x0]
8000bc98:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000bc9c:	10 09       	add	r9,r8
8000bc9e:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000bca2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000bca4:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000bca8:	30 08       	mov	r8,0
8000bcaa:	f3 68 00 08 	st.b	r9[8],r8
								}
								errorDisplayState = 4;
8000bcae:	fe f9 04 6e 	ld.w	r9,pc[1134]
8000bcb2:	30 48       	mov	r8,4
8000bcb4:	b2 88       	st.b	r9[0x0],r8
								break;
8000bcb6:	c9 08       	rjmp	8000bdd6 <main+0x112a>
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
8000bcb8:	fe f8 04 6c 	ld.w	r8,pc[1132]
8000bcbc:	f1 38 00 20 	ld.ub	r8,r8[32]
8000bcc0:	58 08       	cp.w	r8,0
8000bcc2:	c2 71       	brne	8000bd10 <main+0x1064>
8000bcc4:	fe f8 04 60 	ld.w	r8,pc[1120]
8000bcc8:	f1 38 00 25 	ld.ub	r8,r8[37]
8000bccc:	58 08       	cp.w	r8,0
8000bcce:	c2 11       	brne	8000bd10 <main+0x1064>
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
8000bcd0:	fe f8 04 58 	ld.w	r8,pc[1112]
8000bcd4:	11 88       	ld.ub	r8,r8[0x0]
8000bcd6:	e2 18 00 40 	andl	r8,0x40,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 4;
								break;
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
8000bcda:	c1 b1       	brne	8000bd10 <main+0x1064>
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
8000bcdc:	fe f8 04 4c 	ld.w	r8,pc[1100]
8000bce0:	11 88       	ld.ub	r8,r8[0x0]
8000bce2:	10 99       	mov	r9,r8
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 4;
								break;
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
8000bce4:	30 08       	mov	r8,0
8000bce6:	f0 09 18 00 	cp.b	r9,r8
8000bcea:	c1 35       	brlt	8000bd10 <main+0x1064>
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
									(sysErr.botdrive & BIT(9)) || (sysErr.botdrive & BIT(10)) || (sysErr.botdrive & BIT(11)))
8000bcec:	fe f8 04 3c 	ld.w	r8,pc[1084]
8000bcf0:	70 18       	ld.w	r8,r8[0x4]
8000bcf2:	e2 18 02 00 	andl	r8,0x200,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 4;
								break;
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
8000bcf6:	c0 d1       	brne	8000bd10 <main+0x1064>
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
									(sysErr.botdrive & BIT(9)) || (sysErr.botdrive & BIT(10)) || (sysErr.botdrive & BIT(11)))
8000bcf8:	fe f8 04 30 	ld.w	r8,pc[1072]
8000bcfc:	70 18       	ld.w	r8,r8[0x4]
8000bcfe:	e2 18 04 00 	andl	r8,0x400,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 4;
								break;
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
8000bd02:	c0 71       	brne	8000bd10 <main+0x1064>
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
									(sysErr.botdrive & BIT(9)) || (sysErr.botdrive & BIT(10)) || (sysErr.botdrive & BIT(11)))
8000bd04:	fe f8 04 24 	ld.w	r8,pc[1060]
8000bd08:	70 18       	ld.w	r8,r8[0x4]
8000bd0a:	e2 18 08 00 	andl	r8,0x800,COH
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
								}
								errorDisplayState = 4;
								break;
							case 4:
								if ((ledBrdSide[LED_BRD_3_BOT].maxUsageReached || ledBrdSide[LED_BRD_4_TOP].maxUsageReached) ||
8000bd0e:	c5 b0       	breq	8000bdc4 <main+0x1118>
									(sysErr.topdrive & BIT(6)) || (sysErr.topdrive & BIT(7)) ||
									(sysErr.botdrive & BIT(9)) || (sysErr.botdrive & BIT(10)) || (sysErr.botdrive & BIT(11)))
								{
									display_text(IDX_SHELF4);
8000bd10:	30 8c       	mov	r12,8
8000bd12:	f0 1f 00 d4 	mcall	8000c060 <main+0x13b4>
									displayChanged = 1;
8000bd16:	fe f9 04 0a 	ld.w	r9,pc[1034]
8000bd1a:	30 18       	mov	r8,1
8000bd1c:	b2 88       	st.b	r9[0x0],r8
8000bd1e:	e0 68 03 e8 	mov	r8,1000
8000bd22:	ef 48 ff d8 	st.w	r7[-40],r8
8000bd26:	e0 68 12 00 	mov	r8,4608
8000bd2a:	ea 18 00 7a 	orh	r8,0x7a
8000bd2e:	ef 48 ff d4 	st.w	r7[-44],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000bd32:	ee fa ff d8 	ld.w	r10,r7[-40]
8000bd36:	ef 4a fe bc 	st.w	r7[-324],r10
8000bd3a:	30 08       	mov	r8,0
8000bd3c:	ef 48 fe b8 	st.w	r7[-328],r8
8000bd40:	ee fc ff d4 	ld.w	r12,r7[-44]
8000bd44:	ef 4c fe b4 	st.w	r7[-332],r12
8000bd48:	30 0a       	mov	r10,0
8000bd4a:	ef 4a fe b0 	st.w	r7[-336],r10
8000bd4e:	ee f9 fe b8 	ld.w	r9,r7[-328]
8000bd52:	ee f8 fe b4 	ld.w	r8,r7[-332]
8000bd56:	b1 39       	mul	r9,r8
8000bd58:	ee f8 fe b0 	ld.w	r8,r7[-336]
8000bd5c:	ee fc fe bc 	ld.w	r12,r7[-324]
8000bd60:	b9 38       	mul	r8,r12
8000bd62:	10 09       	add	r9,r8
8000bd64:	ee f8 fe bc 	ld.w	r8,r7[-324]
8000bd68:	ee fc fe b4 	ld.w	r12,r7[-332]
8000bd6c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000bd70:	16 09       	add	r9,r11
8000bd72:	12 9b       	mov	r11,r9
8000bd74:	e0 68 03 e7 	mov	r8,999
8000bd78:	30 09       	mov	r9,0
8000bd7a:	10 0a       	add	r10,r8
8000bd7c:	f6 09 00 4b 	adc	r11,r11,r9
8000bd80:	e0 68 03 e8 	mov	r8,1000
8000bd84:	30 09       	mov	r9,0
8000bd86:	f0 1f 00 c4 	mcall	8000c094 <main+0x13e8>
8000bd8a:	14 98       	mov	r8,r10
8000bd8c:	16 99       	mov	r9,r11
									cpu_set_timeout(8*EC_ONE_SECOND, &errorDisplayTimer);
8000bd8e:	a3 78       	lsl	r8,0x3
8000bd90:	ef 48 ff e0 	st.w	r7[-32],r8
8000bd94:	fe f8 03 84 	ld.w	r8,pc[900]
8000bd98:	ef 48 ff dc 	st.w	r7[-36],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000bd9c:	e1 b8 00 42 	mfsr	r8,0x108
8000bda0:	10 99       	mov	r9,r8
8000bda2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000bda6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000bda8:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000bdac:	70 09       	ld.w	r9,r8[0x0]
8000bdae:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000bdb2:	10 09       	add	r9,r8
8000bdb4:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000bdb8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000bdba:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000bdbe:	30 08       	mov	r8,0
8000bdc0:	f3 68 00 08 	st.b	r9[8],r8
								}
								errorDisplayState = 0;
8000bdc4:	fe f9 03 58 	ld.w	r9,pc[856]
8000bdc8:	30 08       	mov	r8,0
8000bdca:	b2 88       	st.b	r9[0x0],r8
								break;
8000bdcc:	c0 58       	rjmp	8000bdd6 <main+0x112a>
							default:
								errorDisplayState = 0;
8000bdce:	fe f9 03 4e 	ld.w	r9,pc[846]
8000bdd2:	30 08       	mov	r8,0
8000bdd4:	b2 88       	st.b	r9[0x0],r8
								break;
						} //switch(errorDisplayState)
						
						if (displayChanged)
8000bdd6:	fe f8 03 4a 	ld.w	r8,pc[842]
8000bdda:	11 88       	ld.ub	r8,r8[0x0]
8000bddc:	58 08       	cp.w	r8,0
8000bdde:	fe 90 fd 5a 	breq	8000b892 <main+0xbe6>
						{
							displayChanged = 0;
8000bde2:	fe f9 03 3e 	ld.w	r9,pc[830]
8000bde6:	30 08       	mov	r8,0
8000bde8:	b2 88       	st.b	r9[0x0],r8
							break; //get out of while loop and wait until we need to update the display again
8000bdea:	d7 03       	nop
						}
						
					} //while(1)

				} //if (cpu_is_timeout(&errorDisplayTimer))
				break;
8000bdec:	c2 68       	rjmp	8000be38 <main+0x118c>
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
8000bdee:	30 08       	mov	r8,0
8000bdf0:	ef 48 fe dc 	st.w	r7[-292],r8
8000bdf4:	c0 d8       	rjmp	8000be0e <main+0x1162>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
8000bdf6:	ee f8 fe dc 	ld.w	r8,r7[-292]
8000bdfa:	5c 58       	castu.b	r8
8000bdfc:	30 0b       	mov	r11,0
8000bdfe:	10 9c       	mov	r12,r8
8000be00:	f0 1f 00 bf 	mcall	8000c0fc <main+0x1450>
				} //if (cpu_is_timeout(&errorDisplayTimer))
				break;
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
8000be04:	ee f8 fe dc 	ld.w	r8,r7[-292]
8000be08:	2f f8       	sub	r8,-1
8000be0a:	ef 48 fe dc 	st.w	r7[-292],r8
8000be0e:	ee f8 fe dc 	ld.w	r8,r7[-292]
8000be12:	58 38       	cp.w	r8,3
8000be14:	fe 9a ff f1 	brle	8000bdf6 <main+0x114a>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				electroclaveState = STATE_EC_IDLE;
8000be18:	fe f9 02 88 	ld.w	r9,pc[648]
8000be1c:	30 08       	mov	r8,0
8000be1e:	b2 88       	st.b	r9[0x0],r8
8000be20:	c0 c8       	rjmp	8000be38 <main+0x118c>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
					electroclaveState = STATE_DOOR_LATCHED;
					firstDoorOpenSinceIdle = 1;
				}
				break;
8000be22:	d7 03       	nop
8000be24:	c0 a8       	rjmp	8000be38 <main+0x118c>
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
					print_ecdbg("Action push button press detected\r\n");
					electroclaveState = STATE_ACTION_PB_PRESSED;
				}
				break;
8000be26:	d7 03       	nop
8000be28:	c0 88       	rjmp	8000be38 <main+0x118c>
				if (EC_ACTION_PB)
				{
					print_ecdbg("Action push button release detected\r\n");
					electroclaveState = STATE_ACTION_PB_RELEASED;	
				}
				break;
8000be2a:	d7 03       	nop
8000be2c:	c0 68       	rjmp	8000be38 <main+0x118c>
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
					electroclaveState = STATE_START_CLEAN;
				}
				break;
8000be2e:	d7 03       	nop
8000be30:	c0 48       	rjmp	8000be38 <main+0x118c>
			case STATE_CLEAN:
				if (cpu_is_timeout(&cleanTimer)) {
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
				}
				break;
8000be32:	d7 03       	nop
8000be34:	c0 28       	rjmp	8000be38 <main+0x118c>
						}
						
					} //while(1)

				} //if (cpu_is_timeout(&errorDisplayTimer))
				break;
8000be36:	d7 03       	nop
		
		/*
		 * This check overrides everything going on in the state machine, if the user opens the door,
		 * shut down all processes for safety
		 */
		if (!EC_DOOR_LATCHED) {
8000be38:	33 ec       	mov	r12,62
8000be3a:	f0 1f 00 9c 	mcall	8000c0a8 <main+0x13fc>
8000be3e:	18 98       	mov	r8,r12
8000be40:	58 08       	cp.w	r8,0
8000be42:	c3 f0       	breq	8000bec0 <main+0x1214>
		
			if (firstDoorOpenSinceIdle)
8000be44:	fe f8 02 70 	ld.w	r8,pc[624]
8000be48:	11 88       	ld.ub	r8,r8[0x0]
8000be4a:	58 08       	cp.w	r8,0
8000be4c:	c3 a0       	breq	8000bec0 <main+0x1214>
			{
				door_latch_open_kill_all_shelves();
8000be4e:	f0 1f 00 b8 	mcall	8000c12c <main+0x1480>

//13jun15				display_text(IDX_CLEAR);
//13jun15				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
				switch (electroclaveState)
8000be52:	fe f8 02 4e 	ld.w	r8,pc[590]
8000be56:	11 88       	ld.ub	r8,r8[0x0]
8000be58:	58 78       	cp.w	r8,7
8000be5a:	e0 89 00 07 	brgt	8000be68 <main+0x11bc>
8000be5e:	58 68       	cp.w	r8,6
8000be60:	c1 34       	brge	8000be86 <main+0x11da>
8000be62:	58 48       	cp.w	r8,4
8000be64:	c2 15       	brlt	8000bea6 <main+0x11fa>
8000be66:	c0 48       	rjmp	8000be6e <main+0x11c2>
8000be68:	58 88       	cp.w	r8,8
8000be6a:	c1 a0       	breq	8000be9e <main+0x11f2>
8000be6c:	c1 d8       	rjmp	8000bea6 <main+0x11fa>
				{
					case STATE_START_SANITIZE:
					case STATE_SANITIZE:
						display_text(IDX_DIRTY);
8000be6e:	30 3c       	mov	r12,3
8000be70:	f0 1f 00 7c 	mcall	8000c060 <main+0x13b4>
						electroclaveState = STATE_SHUTDOWN_PROCESSES;
8000be74:	fe f9 02 2c 	ld.w	r9,pc[556]
8000be78:	30 98       	mov	r8,9
8000be7a:	b2 88       	st.b	r9[0x0],r8
						print_ecdbg("Door latch opened, shutting down all processes\r\n");
8000be7c:	fe fc 02 b4 	ld.w	r12,pc[692]
8000be80:	f0 1f 00 8c 	mcall	8000c0b0 <main+0x1404>
						break;
8000be84:	c1 b8       	rjmp	8000beba <main+0x120e>
						
					case STATE_START_CLEAN:
					case STATE_CLEAN:
						display_text(IDX_CLEAN);
8000be86:	30 1c       	mov	r12,1
8000be88:	f0 1f 00 76 	mcall	8000c060 <main+0x13b4>
						electroclaveState = STATE_SHUTDOWN_PROCESSES;
8000be8c:	fe f9 02 14 	ld.w	r9,pc[532]
8000be90:	30 98       	mov	r8,9
8000be92:	b2 88       	st.b	r9[0x0],r8
						print_ecdbg("Door latch opened, shutting down all processes\r\n");
8000be94:	fe fc 02 9c 	ld.w	r12,pc[668]
8000be98:	f0 1f 00 86 	mcall	8000c0b0 <main+0x1404>
						break;
8000be9c:	c0 f8       	rjmp	8000beba <main+0x120e>
						
					case STATE_CHASSIS_ERROR:
						display_text(IDX_ERROR);
8000be9e:	30 4c       	mov	r12,4
8000bea0:	f0 1f 00 70 	mcall	8000c060 <main+0x13b4>
						break;
8000bea4:	c0 b8       	rjmp	8000beba <main+0x120e>
					
					default:
						display_text(IDX_READY);
8000bea6:	30 0c       	mov	r12,0
8000bea8:	f0 1f 00 6e 	mcall	8000c060 <main+0x13b4>
						electroclaveState = STATE_SHUTDOWN_PROCESSES;
8000beac:	4f d9       	lddpc	r9,8000c0a0 <main+0x13f4>
8000beae:	30 98       	mov	r8,9
8000beb0:	b2 88       	st.b	r9[0x0],r8
						print_ecdbg("Door latch opened, shutting down all processes\r\n");
8000beb2:	fe fc 02 7e 	ld.w	r12,pc[638]
8000beb6:	f0 1f 00 7f 	mcall	8000c0b0 <main+0x1404>
						break;
				}

				firstDoorOpenSinceIdle = 0;
8000beba:	4f f9       	lddpc	r9,8000c0b4 <main+0x1408>
8000bebc:	30 08       	mov	r8,0
8000bebe:	b2 88       	st.b	r9[0x0],r8
8000bec0:	4f 68       	lddpc	r8,8000c098 <main+0x13ec>
8000bec2:	ef 48 ff e4 	st.w	r7[-28],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000bec6:	e1 b8 00 42 	mfsr	r8,0x108
8000beca:	ef 48 ff e8 	st.w	r7[-24],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000bece:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bed2:	f1 39 00 08 	ld.ub	r9,r8[8]
8000bed6:	30 28       	mov	r8,2
8000bed8:	f0 09 18 00 	cp.b	r9,r8
8000bedc:	c0 31       	brne	8000bee2 <main+0x1236>
    return false;
8000bede:	30 08       	mov	r8,0
8000bee0:	c4 38       	rjmp	8000bf66 <main+0x12ba>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000bee2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bee6:	f1 39 00 08 	ld.ub	r9,r8[8]
8000beea:	30 18       	mov	r8,1
8000beec:	f0 09 18 00 	cp.b	r9,r8
8000bef0:	c0 31       	brne	8000bef6 <main+0x124a>
    return true;
8000bef2:	30 18       	mov	r8,1
8000bef4:	c3 98       	rjmp	8000bf66 <main+0x12ba>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000bef6:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000befa:	70 09       	ld.w	r9,r8[0x0]
8000befc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bf00:	70 18       	ld.w	r8,r8[0x4]
8000bf02:	10 39       	cp.w	r9,r8
8000bf04:	e0 88 00 1a 	brls	8000bf38 <main+0x128c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000bf08:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bf0c:	70 09       	ld.w	r9,r8[0x0]
8000bf0e:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bf12:	12 38       	cp.w	r8,r9
8000bf14:	c1 02       	brcc	8000bf34 <main+0x1288>
8000bf16:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bf1a:	70 19       	ld.w	r9,r8[0x4]
8000bf1c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bf20:	12 38       	cp.w	r8,r9
8000bf22:	e0 88 00 09 	brls	8000bf34 <main+0x1288>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000bf26:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000bf2a:	30 18       	mov	r8,1
8000bf2c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000bf30:	30 18       	mov	r8,1
8000bf32:	c1 a8       	rjmp	8000bf66 <main+0x12ba>
    }
    return false;
8000bf34:	30 08       	mov	r8,0
8000bf36:	c1 88       	rjmp	8000bf66 <main+0x12ba>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000bf38:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bf3c:	70 09       	ld.w	r9,r8[0x0]
8000bf3e:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bf42:	12 38       	cp.w	r8,r9
8000bf44:	c0 93       	brcs	8000bf56 <main+0x12aa>
8000bf46:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bf4a:	70 19       	ld.w	r9,r8[0x4]
8000bf4c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bf50:	12 38       	cp.w	r8,r9
8000bf52:	e0 88 00 09 	brls	8000bf64 <main+0x12b8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000bf56:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000bf5a:	30 18       	mov	r8,1
8000bf5c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000bf60:	30 18       	mov	r8,1
8000bf62:	c0 28       	rjmp	8000bf66 <main+0x12ba>
    }
    return false;
8000bf64:	30 08       	mov	r8,0
				
			}
		} //if (!EC_DOOR_LATCHED)
		
		if (cpu_is_timeout(&debugTimer))
8000bf66:	58 08       	cp.w	r8,0
8000bf68:	c5 e0       	breq	8000c024 <main+0x1378>
8000bf6a:	4c c8       	lddpc	r8,8000c098 <main+0x13ec>
8000bf6c:	ef 48 ff ec 	st.w	r7[-20],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000bf70:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000bf74:	30 28       	mov	r8,2
8000bf76:	f3 68 00 08 	st.b	r9[8],r8
8000bf7a:	e0 68 03 e8 	mov	r8,1000
8000bf7e:	ef 48 ff f4 	st.w	r7[-12],r8
8000bf82:	e0 68 12 00 	mov	r8,4608
8000bf86:	ea 18 00 7a 	orh	r8,0x7a
8000bf8a:	ef 48 ff f0 	st.w	r7[-16],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000bf8e:	ee fa ff f4 	ld.w	r10,r7[-12]
8000bf92:	ef 4a fe cc 	st.w	r7[-308],r10
8000bf96:	30 08       	mov	r8,0
8000bf98:	ef 48 fe c8 	st.w	r7[-312],r8
8000bf9c:	ee fc ff f0 	ld.w	r12,r7[-16]
8000bfa0:	ef 4c fe c4 	st.w	r7[-316],r12
8000bfa4:	30 0a       	mov	r10,0
8000bfa6:	ef 4a fe c0 	st.w	r7[-320],r10
8000bfaa:	ee f9 fe c8 	ld.w	r9,r7[-312]
8000bfae:	ee f8 fe c4 	ld.w	r8,r7[-316]
8000bfb2:	b1 39       	mul	r9,r8
8000bfb4:	ee f8 fe c0 	ld.w	r8,r7[-320]
8000bfb8:	ee fc fe cc 	ld.w	r12,r7[-308]
8000bfbc:	b9 38       	mul	r8,r12
8000bfbe:	10 09       	add	r9,r8
8000bfc0:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000bfc4:	ee fc fe c4 	ld.w	r12,r7[-316]
8000bfc8:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000bfcc:	16 09       	add	r9,r11
8000bfce:	12 9b       	mov	r11,r9
8000bfd0:	e0 68 03 e7 	mov	r8,999
8000bfd4:	30 09       	mov	r9,0
8000bfd6:	10 0a       	add	r10,r8
8000bfd8:	f6 09 00 4b 	adc	r11,r11,r9
8000bfdc:	e0 68 03 e8 	mov	r8,1000
8000bfe0:	30 09       	mov	r9,0
8000bfe2:	f0 1f 00 2d 	mcall	8000c094 <main+0x13e8>
8000bfe6:	14 98       	mov	r8,r10
8000bfe8:	16 99       	mov	r9,r11
		{
			cpu_stop_timeout(&debugTimer);
			cpu_set_timeout((EC_ONE_SECOND/2), &debugTimer);
8000bfea:	a1 98       	lsr	r8,0x1
8000bfec:	ef 48 ff fc 	st.w	r7[-4],r8
8000bff0:	4a a8       	lddpc	r8,8000c098 <main+0x13ec>
8000bff2:	ef 48 ff f8 	st.w	r7[-8],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000bff6:	e1 b8 00 42 	mfsr	r8,0x108
8000bffa:	10 99       	mov	r9,r8
8000bffc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c000:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000c002:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c006:	70 09       	ld.w	r9,r8[0x0]
8000c008:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c00c:	10 09       	add	r9,r8
8000c00e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c012:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000c014:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000c018:	30 08       	mov	r8,0
8000c01a:	f3 68 00 08 	st.b	r9[8],r8
			gpio_toggle_pin(ECLAVE_DEBUG_LED);
8000c01e:	37 cc       	mov	r12,124
8000c020:	f0 1f 00 45 	mcall	8000c134 <main+0x1488>
		}
		
		service_ecdbg_input();
8000c024:	f0 1f 00 45 	mcall	8000c138 <main+0x148c>

	} //while(true)
8000c028:	fe 9f f7 29 	bral	8000ae7a <main+0x1ce>
8000c02c:	80 00       	ld.sh	r0,r0[0x0]
8000c02e:	82 2c       	ld.sh	r12,r1[0x4]
8000c030:	80 00       	ld.sh	r0,r0[0x0]
8000c032:	72 5c       	ld.w	r12,r9[0x14]
8000c034:	80 00       	ld.sh	r0,r0[0x0]
8000c036:	71 c8       	ld.w	r8,r8[0x70]
8000c038:	80 00       	ld.sh	r0,r0[0x0]
8000c03a:	9a 14       	ld.sh	r4,sp[0x2]
8000c03c:	80 00       	ld.sh	r0,r0[0x0]
8000c03e:	73 5c       	ld.w	r12,r9[0x54]
8000c040:	80 00       	ld.sh	r0,r0[0x0]
8000c042:	6e f8       	ld.w	r8,r7[0x3c]
8000c044:	80 00       	ld.sh	r0,r0[0x0]
8000c046:	70 30       	ld.w	r0,r8[0xc]
8000c048:	80 00       	ld.sh	r0,r0[0x0]
8000c04a:	5d f0       	*unknown*
8000c04c:	80 00       	ld.sh	r0,r0[0x0]
8000c04e:	5c f0       	rol	r0
8000c050:	80 00       	ld.sh	r0,r0[0x0]
8000c052:	5c 38       	neg	r8
8000c054:	80 00       	ld.sh	r0,r0[0x0]
8000c056:	32 38       	mov	r8,35
8000c058:	80 00       	ld.sh	r0,r0[0x0]
8000c05a:	32 5c       	mov	r12,37
8000c05c:	80 00       	ld.sh	r0,r0[0x0]
8000c05e:	9f 7c       	st.w	pc[0x1c],r12
8000c060:	80 00       	ld.sh	r0,r0[0x0]
8000c062:	71 e4       	ld.w	r4,r8[0x78]
8000c064:	80 00       	ld.sh	r0,r0[0x0]
8000c066:	82 8c       	ld.uh	r12,r1[0x0]
8000c068:	80 00       	ld.sh	r0,r0[0x0]
8000c06a:	4c 3c       	lddpc	r12,8000c174 <__avr32_f64_mul+0x38>
8000c06c:	80 00       	ld.sh	r0,r0[0x0]
8000c06e:	82 d8       	ld.uh	r8,r1[0xa]
8000c070:	80 00       	ld.sh	r0,r0[0x0]
8000c072:	4b 02       	lddpc	r2,8000c130 <main+0x1484>
8000c074:	80 00       	ld.sh	r0,r0[0x0]
8000c076:	60 f0       	ld.w	r0,r0[0x3c]
8000c078:	80 00       	ld.sh	r0,r0[0x0]
8000c07a:	7e 30       	ld.w	r0,pc[0xc]
8000c07c:	80 00       	ld.sh	r0,r0[0x0]
8000c07e:	9d 08       	st.w	lr[0x0],r8
8000c080:	80 00       	ld.sh	r0,r0[0x0]
8000c082:	9f a8       	st.w	pc[0x28],r8
8000c084:	80 00       	ld.sh	r0,r0[0x0]
8000c086:	a4 28       	st.h	r2[0x4],r8
8000c088:	80 00       	ld.sh	r0,r0[0x0]
8000c08a:	a8 00       	st.h	r4[0x0],r0
8000c08c:	80 00       	ld.sh	r0,r0[0x0]
8000c08e:	a9 44       	asr	r4,0x8
8000c090:	80 00       	ld.sh	r0,r0[0x0]
8000c092:	4b 3c       	lddpc	r12,8000c15c <__avr32_f64_mul+0x20>
8000c094:	80 00       	ld.sh	r0,r0[0x0]
8000c096:	c8 92       	brcc	8000bfa8 <main+0x12fc>
8000c098:	00 00       	add	r0,r0
8000c09a:	0b c8       	ld.ub	r8,r5[0x4]
8000c09c:	00 00       	add	r0,r0
8000c09e:	0d 74       	ld.ub	r4,--r6
8000c0a0:	00 00       	add	r0,r0
8000c0a2:	07 b8       	ld.ub	r8,r3[0x3]
8000c0a4:	80 01       	ld.sh	r1,r0[0x0]
8000c0a6:	23 d8       	sub	r8,61
8000c0a8:	80 00       	ld.sh	r0,r0[0x0]
8000c0aa:	4a c6       	lddpc	r6,8000c158 <__avr32_f64_mul+0x1c>
8000c0ac:	80 00       	ld.sh	r0,r0[0x0]
8000c0ae:	6d d4       	ld.w	r4,r6[0x74]
8000c0b0:	80 00       	ld.sh	r0,r0[0x0]
8000c0b2:	33 38       	mov	r8,51
8000c0b4:	00 00       	add	r0,r0
8000c0b6:	00 0c       	add	r12,r0
8000c0b8:	80 00       	ld.sh	r0,r0[0x0]
8000c0ba:	6d ec       	ld.w	r12,r6[0x78]
8000c0bc:	80 00       	ld.sh	r0,r0[0x0]
8000c0be:	6e 10       	ld.w	r0,r7[0x4]
8000c0c0:	80 00       	ld.sh	r0,r0[0x0]
8000c0c2:	77 b4       	ld.w	r4,r11[0x6c]
8000c0c4:	80 00       	ld.sh	r0,r0[0x0]
8000c0c6:	7b a0       	ld.w	r0,sp[0x68]
8000c0c8:	80 00       	ld.sh	r0,r0[0x0]
8000c0ca:	80 60       	ld.sh	r0,r0[0xc]
8000c0cc:	80 00       	ld.sh	r0,r0[0x0]
8000c0ce:	82 04       	ld.sh	r4,r1[0x0]
8000c0d0:	80 00       	ld.sh	r0,r0[0x0]
8000c0d2:	6e 38       	ld.w	r8,r7[0xc]
8000c0d4:	00 00       	add	r0,r0
8000c0d6:	08 38       	cp.w	r8,r4
8000c0d8:	00 00       	add	r0,r0
8000c0da:	0b e4       	ld.ub	r4,r5[0x6]
8000c0dc:	80 00       	ld.sh	r0,r0[0x0]
8000c0de:	82 18       	ld.sh	r8,r1[0x2]
8000c0e0:	80 00       	ld.sh	r0,r0[0x0]
8000c0e2:	6e 48       	ld.w	r8,r7[0x10]
8000c0e4:	80 00       	ld.sh	r0,r0[0x0]
8000c0e6:	6e 88       	ld.w	r8,r7[0x20]
8000c0e8:	00 00       	add	r0,r0
8000c0ea:	07 d5       	ld.ub	r5,r3[0x5]
8000c0ec:	00 00       	add	r0,r0
8000c0ee:	0b b4       	ld.ub	r4,r5[0x3]
8000c0f0:	00 00       	add	r0,r0
8000c0f2:	0b 91       	ld.ub	r1,r5[0x1]
8000c0f4:	80 00       	ld.sh	r0,r0[0x0]
8000c0f6:	83 58       	st.w	r1[0x14],r8
8000c0f8:	00 00       	add	r0,r0
8000c0fa:	0b bc       	ld.ub	r12,r5[0x3]
8000c0fc:	80 00       	ld.sh	r0,r0[0x0]
8000c0fe:	63 50       	ld.w	r0,r1[0x54]
8000c100:	00 00       	add	r0,r0
8000c102:	0b a8       	ld.ub	r8,r5[0x2]
8000c104:	80 00       	ld.sh	r0,r0[0x0]
8000c106:	96 d0       	ld.uh	r0,r11[0xa]
8000c108:	00 00       	add	r0,r0
8000c10a:	0c f0       	st.b	--r6,r0
8000c10c:	80 00       	ld.sh	r0,r0[0x0]
8000c10e:	97 a0       	st.w	r11[0x28],r0
8000c110:	80 00       	ld.sh	r0,r0[0x0]
8000c112:	6e b4       	ld.w	r4,r7[0x2c]
8000c114:	00 00       	add	r0,r0
8000c116:	0b f0       	ld.ub	r0,r5[0x7]
8000c118:	00 00       	add	r0,r0
8000c11a:	0c fc       	st.b	--r6,r12
8000c11c:	00 00       	add	r0,r0
8000c11e:	07 b9       	ld.ub	r9,r3[0x3]
8000c120:	00 00       	add	r0,r0
8000c122:	07 ba       	ld.ub	r10,r3[0x3]
8000c124:	00 00       	add	r0,r0
8000c126:	0b fe       	ld.ub	lr,r5[0x7]
8000c128:	00 00       	add	r0,r0
8000c12a:	0b d4       	ld.ub	r4,r5[0x5]
8000c12c:	80 00       	ld.sh	r0,r0[0x0]
8000c12e:	84 28       	ld.sh	r8,r2[0x4]
8000c130:	80 00       	ld.sh	r0,r0[0x0]
8000c132:	6e c4       	ld.w	r4,r7[0x30]
8000c134:	80 00       	ld.sh	r0,r0[0x0]
8000c136:	4b 76       	lddpc	r6,8000c210 <__avr32_f64_mul_op1_subnormal+0x3a>
8000c138:	80 00       	ld.sh	r0,r0[0x0]
8000c13a:	a9 5c       	asr	r12,0x9

8000c13c <__avr32_f64_mul>:
8000c13c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000c140:	e0 80 00 dc 	breq	8000c2f8 <__avr32_f64_mul_op1_zero>
8000c144:	d4 21       	pushm	r4-r7,lr
8000c146:	f7 e9 20 0e 	eor	lr,r11,r9
8000c14a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000c14e:	30 15       	mov	r5,1
8000c150:	c4 30       	breq	8000c1d6 <__avr32_f64_mul_op1_subnormal>
8000c152:	ab 6b       	lsl	r11,0xa
8000c154:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000c158:	ab 6a       	lsl	r10,0xa
8000c15a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000c15e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000c162:	c5 c0       	breq	8000c21a <__avr32_f64_mul_op2_subnormal>
8000c164:	a1 78       	lsl	r8,0x1
8000c166:	5c f9       	rol	r9
8000c168:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000c16c:	e0 47 07 ff 	cp.w	r7,2047
8000c170:	c7 70       	breq	8000c25e <__avr32_f64_mul_op_nan_or_inf>
8000c172:	e0 46 07 ff 	cp.w	r6,2047
8000c176:	c7 40       	breq	8000c25e <__avr32_f64_mul_op_nan_or_inf>
8000c178:	ee 06 00 0c 	add	r12,r7,r6
8000c17c:	e0 2c 03 fe 	sub	r12,1022
8000c180:	f6 08 06 44 	mulu.d	r4,r11,r8
8000c184:	f4 09 07 44 	macu.d	r4,r10,r9
8000c188:	f4 08 06 46 	mulu.d	r6,r10,r8
8000c18c:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000c190:	08 07       	add	r7,r4
8000c192:	f4 05 00 4a 	adc	r10,r10,r5
8000c196:	5c 0b       	acr	r11
8000c198:	ed bb 00 14 	bld	r11,0x14
8000c19c:	c0 50       	breq	8000c1a6 <__avr32_f64_mul+0x6a>
8000c19e:	a1 77       	lsl	r7,0x1
8000c1a0:	5c fa       	rol	r10
8000c1a2:	5c fb       	rol	r11
8000c1a4:	20 1c       	sub	r12,1
8000c1a6:	58 0c       	cp.w	r12,0
8000c1a8:	e0 8a 00 6f 	brle	8000c286 <__avr32_f64_mul_res_subnormal>
8000c1ac:	e0 4c 07 ff 	cp.w	r12,2047
8000c1b0:	e0 84 00 9c 	brge	8000c2e8 <__avr32_f64_mul_res_inf>
8000c1b4:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000c1b8:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000c1bc:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000c1c0:	ee 17 80 00 	eorh	r7,0x8000
8000c1c4:	f1 b7 04 20 	satu	r7,0x1
8000c1c8:	0e 0a       	add	r10,r7
8000c1ca:	5c 0b       	acr	r11
8000c1cc:	ed be 00 1f 	bld	lr,0x1f
8000c1d0:	ef bb 00 1f 	bst	r11,0x1f
8000c1d4:	d8 22       	popm	r4-r7,pc

8000c1d6 <__avr32_f64_mul_op1_subnormal>:
8000c1d6:	e4 1b 00 0f 	andh	r11,0xf
8000c1da:	f4 0c 12 00 	clz	r12,r10
8000c1de:	f6 06 12 00 	clz	r6,r11
8000c1e2:	f7 bc 03 e1 	sublo	r12,-31
8000c1e6:	f8 06 17 30 	movlo	r6,r12
8000c1ea:	f7 b6 02 01 	subhs	r6,1
8000c1ee:	e0 46 00 20 	cp.w	r6,32
8000c1f2:	c0 d4       	brge	8000c20c <__avr32_f64_mul_op1_subnormal+0x36>
8000c1f4:	ec 0c 11 20 	rsub	r12,r6,32
8000c1f8:	f6 06 09 4b 	lsl	r11,r11,r6
8000c1fc:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000c200:	18 4b       	or	r11,r12
8000c202:	f4 06 09 4a 	lsl	r10,r10,r6
8000c206:	20 b6       	sub	r6,11
8000c208:	0c 17       	sub	r7,r6
8000c20a:	ca ab       	rjmp	8000c15e <__avr32_f64_mul+0x22>
8000c20c:	f4 06 09 4b 	lsl	r11,r10,r6
8000c210:	c6 40       	breq	8000c2d8 <__avr32_f64_mul_res_zero>
8000c212:	30 0a       	mov	r10,0
8000c214:	20 b6       	sub	r6,11
8000c216:	0c 17       	sub	r7,r6
8000c218:	ca 3b       	rjmp	8000c15e <__avr32_f64_mul+0x22>

8000c21a <__avr32_f64_mul_op2_subnormal>:
8000c21a:	e4 19 00 0f 	andh	r9,0xf
8000c21e:	f0 0c 12 00 	clz	r12,r8
8000c222:	f2 05 12 00 	clz	r5,r9
8000c226:	f7 bc 03 ea 	sublo	r12,-22
8000c22a:	f8 05 17 30 	movlo	r5,r12
8000c22e:	f7 b5 02 0a 	subhs	r5,10
8000c232:	e0 45 00 20 	cp.w	r5,32
8000c236:	c0 d4       	brge	8000c250 <__avr32_f64_mul_op2_subnormal+0x36>
8000c238:	ea 0c 11 20 	rsub	r12,r5,32
8000c23c:	f2 05 09 49 	lsl	r9,r9,r5
8000c240:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000c244:	18 49       	or	r9,r12
8000c246:	f0 05 09 48 	lsl	r8,r8,r5
8000c24a:	20 25       	sub	r5,2
8000c24c:	0a 16       	sub	r6,r5
8000c24e:	c8 fb       	rjmp	8000c16c <__avr32_f64_mul+0x30>
8000c250:	f0 05 09 49 	lsl	r9,r8,r5
8000c254:	c4 20       	breq	8000c2d8 <__avr32_f64_mul_res_zero>
8000c256:	30 08       	mov	r8,0
8000c258:	20 25       	sub	r5,2
8000c25a:	0a 16       	sub	r6,r5
8000c25c:	c8 8b       	rjmp	8000c16c <__avr32_f64_mul+0x30>

8000c25e <__avr32_f64_mul_op_nan_or_inf>:
8000c25e:	e4 19 00 0f 	andh	r9,0xf
8000c262:	e4 1b 00 0f 	andh	r11,0xf
8000c266:	14 4b       	or	r11,r10
8000c268:	10 49       	or	r9,r8
8000c26a:	e0 47 07 ff 	cp.w	r7,2047
8000c26e:	c0 91       	brne	8000c280 <__avr32_f64_mul_op1_not_naninf>
8000c270:	58 0b       	cp.w	r11,0
8000c272:	c3 81       	brne	8000c2e2 <__avr32_f64_mul_res_nan>
8000c274:	e0 46 07 ff 	cp.w	r6,2047
8000c278:	c3 81       	brne	8000c2e8 <__avr32_f64_mul_res_inf>
8000c27a:	58 09       	cp.w	r9,0
8000c27c:	c3 60       	breq	8000c2e8 <__avr32_f64_mul_res_inf>
8000c27e:	c3 28       	rjmp	8000c2e2 <__avr32_f64_mul_res_nan>

8000c280 <__avr32_f64_mul_op1_not_naninf>:
8000c280:	58 09       	cp.w	r9,0
8000c282:	c3 30       	breq	8000c2e8 <__avr32_f64_mul_res_inf>
8000c284:	c2 f8       	rjmp	8000c2e2 <__avr32_f64_mul_res_nan>

8000c286 <__avr32_f64_mul_res_subnormal>:
8000c286:	5c 3c       	neg	r12
8000c288:	2f fc       	sub	r12,-1
8000c28a:	f1 bc 04 c0 	satu	r12,0x6
8000c28e:	e0 4c 00 20 	cp.w	r12,32
8000c292:	c1 14       	brge	8000c2b4 <__avr32_f64_mul_res_subnormal+0x2e>
8000c294:	f8 08 11 20 	rsub	r8,r12,32
8000c298:	0e 46       	or	r6,r7
8000c29a:	ee 0c 0a 47 	lsr	r7,r7,r12
8000c29e:	f4 08 09 49 	lsl	r9,r10,r8
8000c2a2:	12 47       	or	r7,r9
8000c2a4:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000c2a8:	f6 08 09 49 	lsl	r9,r11,r8
8000c2ac:	12 4a       	or	r10,r9
8000c2ae:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000c2b2:	c8 3b       	rjmp	8000c1b8 <__avr32_f64_mul+0x7c>
8000c2b4:	f8 08 11 20 	rsub	r8,r12,32
8000c2b8:	f9 b9 00 00 	moveq	r9,0
8000c2bc:	c0 30       	breq	8000c2c2 <__avr32_f64_mul_res_subnormal+0x3c>
8000c2be:	f6 08 09 49 	lsl	r9,r11,r8
8000c2c2:	0e 46       	or	r6,r7
8000c2c4:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000c2c8:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000c2cc:	f3 ea 10 07 	or	r7,r9,r10
8000c2d0:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000c2d4:	30 0b       	mov	r11,0
8000c2d6:	c7 1b       	rjmp	8000c1b8 <__avr32_f64_mul+0x7c>

8000c2d8 <__avr32_f64_mul_res_zero>:
8000c2d8:	1c 9b       	mov	r11,lr
8000c2da:	e6 1b 80 00 	andh	r11,0x8000,COH
8000c2de:	30 0a       	mov	r10,0
8000c2e0:	d8 22       	popm	r4-r7,pc

8000c2e2 <__avr32_f64_mul_res_nan>:
8000c2e2:	3f fb       	mov	r11,-1
8000c2e4:	3f fa       	mov	r10,-1
8000c2e6:	d8 22       	popm	r4-r7,pc

8000c2e8 <__avr32_f64_mul_res_inf>:
8000c2e8:	f0 6b 00 00 	mov	r11,-1048576
8000c2ec:	ed be 00 1f 	bld	lr,0x1f
8000c2f0:	ef bb 00 1f 	bst	r11,0x1f
8000c2f4:	30 0a       	mov	r10,0
8000c2f6:	d8 22       	popm	r4-r7,pc

8000c2f8 <__avr32_f64_mul_op1_zero>:
8000c2f8:	f7 e9 20 0b 	eor	r11,r11,r9
8000c2fc:	e6 1b 80 00 	andh	r11,0x8000,COH
8000c300:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000c304:	e0 4c 07 ff 	cp.w	r12,2047
8000c308:	5e 1c       	retne	r12
8000c30a:	3f fa       	mov	r10,-1
8000c30c:	3f fb       	mov	r11,-1
8000c30e:	5e fc       	retal	r12

8000c310 <__avr32_f64_sub_from_add>:
8000c310:	ee 19 80 00 	eorh	r9,0x8000

8000c314 <__avr32_f64_sub>:
8000c314:	f7 e9 20 0c 	eor	r12,r11,r9
8000c318:	e0 86 00 ca 	brmi	8000c4ac <__avr32_f64_add_from_sub>
8000c31c:	eb cd 40 e0 	pushm	r5-r7,lr
8000c320:	16 9c       	mov	r12,r11
8000c322:	e6 1c 80 00 	andh	r12,0x8000,COH
8000c326:	bf db       	cbr	r11,0x1f
8000c328:	bf d9       	cbr	r9,0x1f
8000c32a:	10 3a       	cp.w	r10,r8
8000c32c:	f2 0b 13 00 	cpc	r11,r9
8000c330:	c0 92       	brcc	8000c342 <__avr32_f64_sub+0x2e>
8000c332:	16 97       	mov	r7,r11
8000c334:	12 9b       	mov	r11,r9
8000c336:	0e 99       	mov	r9,r7
8000c338:	14 97       	mov	r7,r10
8000c33a:	10 9a       	mov	r10,r8
8000c33c:	0e 98       	mov	r8,r7
8000c33e:	ee 1c 80 00 	eorh	r12,0x8000
8000c342:	f6 07 16 14 	lsr	r7,r11,0x14
8000c346:	ab 7b       	lsl	r11,0xb
8000c348:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000c34c:	ab 7a       	lsl	r10,0xb
8000c34e:	bf bb       	sbr	r11,0x1f
8000c350:	f2 06 16 14 	lsr	r6,r9,0x14
8000c354:	c4 40       	breq	8000c3dc <__avr32_f64_sub_opL_subnormal>
8000c356:	ab 79       	lsl	r9,0xb
8000c358:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000c35c:	ab 78       	lsl	r8,0xb
8000c35e:	bf b9       	sbr	r9,0x1f

8000c360 <__avr32_f64_sub_opL_subnormal_done>:
8000c360:	e0 47 07 ff 	cp.w	r7,2047
8000c364:	c4 f0       	breq	8000c402 <__avr32_f64_sub_opH_nan_or_inf>
8000c366:	0e 26       	rsub	r6,r7
8000c368:	c1 20       	breq	8000c38c <__avr32_f64_sub_shift_done>
8000c36a:	ec 05 11 20 	rsub	r5,r6,32
8000c36e:	e0 46 00 20 	cp.w	r6,32
8000c372:	c7 c2       	brcc	8000c46a <__avr32_f64_sub_longshift>
8000c374:	f0 05 09 4e 	lsl	lr,r8,r5
8000c378:	f2 05 09 45 	lsl	r5,r9,r5
8000c37c:	f0 06 0a 48 	lsr	r8,r8,r6
8000c380:	f2 06 0a 49 	lsr	r9,r9,r6
8000c384:	0a 48       	or	r8,r5
8000c386:	58 0e       	cp.w	lr,0
8000c388:	5f 1e       	srne	lr
8000c38a:	1c 48       	or	r8,lr

8000c38c <__avr32_f64_sub_shift_done>:
8000c38c:	10 1a       	sub	r10,r8
8000c38e:	f6 09 01 4b 	sbc	r11,r11,r9
8000c392:	f6 06 12 00 	clz	r6,r11
8000c396:	c0 e0       	breq	8000c3b2 <__avr32_f64_sub_longnormalize_done>
8000c398:	c7 83       	brcs	8000c488 <__avr32_f64_sub_longnormalize>
8000c39a:	ec 0e 11 20 	rsub	lr,r6,32
8000c39e:	f6 06 09 4b 	lsl	r11,r11,r6
8000c3a2:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000c3a6:	1c 4b       	or	r11,lr
8000c3a8:	f4 06 09 4a 	lsl	r10,r10,r6
8000c3ac:	0c 17       	sub	r7,r6
8000c3ae:	e0 8a 00 39 	brle	8000c420 <__avr32_f64_sub_subnormal_result>

8000c3b2 <__avr32_f64_sub_longnormalize_done>:
8000c3b2:	f4 09 15 15 	lsl	r9,r10,0x15
8000c3b6:	ab 9a       	lsr	r10,0xb
8000c3b8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000c3bc:	ab 9b       	lsr	r11,0xb
8000c3be:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000c3c2:	18 4b       	or	r11,r12

8000c3c4 <__avr32_f64_sub_round>:
8000c3c4:	fc 17 80 00 	movh	r7,0x8000
8000c3c8:	ed ba 00 00 	bld	r10,0x0
8000c3cc:	f7 b7 01 ff 	subne	r7,-1
8000c3d0:	0e 39       	cp.w	r9,r7
8000c3d2:	5f 29       	srhs	r9
8000c3d4:	12 0a       	add	r10,r9
8000c3d6:	5c 0b       	acr	r11
8000c3d8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c3dc <__avr32_f64_sub_opL_subnormal>:
8000c3dc:	ab 79       	lsl	r9,0xb
8000c3de:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000c3e2:	ab 78       	lsl	r8,0xb
8000c3e4:	f3 e8 10 0e 	or	lr,r9,r8
8000c3e8:	f9 b6 01 01 	movne	r6,1
8000c3ec:	ee 0e 11 00 	rsub	lr,r7,0
8000c3f0:	f9 b7 00 01 	moveq	r7,1
8000c3f4:	ef bb 00 1f 	bst	r11,0x1f
8000c3f8:	f7 ea 10 0e 	or	lr,r11,r10
8000c3fc:	f9 b7 00 00 	moveq	r7,0
8000c400:	cb 0b       	rjmp	8000c360 <__avr32_f64_sub_opL_subnormal_done>

8000c402 <__avr32_f64_sub_opH_nan_or_inf>:
8000c402:	bf db       	cbr	r11,0x1f
8000c404:	f7 ea 10 0e 	or	lr,r11,r10
8000c408:	c0 81       	brne	8000c418 <__avr32_f64_sub_return_nan>
8000c40a:	e0 46 07 ff 	cp.w	r6,2047
8000c40e:	c0 50       	breq	8000c418 <__avr32_f64_sub_return_nan>
8000c410:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000c414:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c418 <__avr32_f64_sub_return_nan>:
8000c418:	3f fa       	mov	r10,-1
8000c41a:	3f fb       	mov	r11,-1
8000c41c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c420 <__avr32_f64_sub_subnormal_result>:
8000c420:	5c 37       	neg	r7
8000c422:	2f f7       	sub	r7,-1
8000c424:	f1 b7 04 c0 	satu	r7,0x6
8000c428:	e0 47 00 20 	cp.w	r7,32
8000c42c:	c1 14       	brge	8000c44e <__avr32_f64_sub_subnormal_result+0x2e>
8000c42e:	ee 08 11 20 	rsub	r8,r7,32
8000c432:	f4 08 09 49 	lsl	r9,r10,r8
8000c436:	5f 16       	srne	r6
8000c438:	f4 07 0a 4a 	lsr	r10,r10,r7
8000c43c:	0c 4a       	or	r10,r6
8000c43e:	f6 08 09 49 	lsl	r9,r11,r8
8000c442:	f5 e9 10 0a 	or	r10,r10,r9
8000c446:	f4 07 0a 4b 	lsr	r11,r10,r7
8000c44a:	30 07       	mov	r7,0
8000c44c:	cb 3b       	rjmp	8000c3b2 <__avr32_f64_sub_longnormalize_done>
8000c44e:	ee 08 11 40 	rsub	r8,r7,64
8000c452:	f6 08 09 49 	lsl	r9,r11,r8
8000c456:	14 49       	or	r9,r10
8000c458:	5f 16       	srne	r6
8000c45a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000c45e:	0c 4a       	or	r10,r6
8000c460:	30 0b       	mov	r11,0
8000c462:	30 07       	mov	r7,0
8000c464:	ca 7b       	rjmp	8000c3b2 <__avr32_f64_sub_longnormalize_done>
8000c466:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c46a <__avr32_f64_sub_longshift>:
8000c46a:	f1 b6 04 c0 	satu	r6,0x6
8000c46e:	f0 0e 17 00 	moveq	lr,r8
8000c472:	c0 40       	breq	8000c47a <__avr32_f64_sub_longshift+0x10>
8000c474:	f2 05 09 4e 	lsl	lr,r9,r5
8000c478:	10 4e       	or	lr,r8
8000c47a:	f2 06 0a 48 	lsr	r8,r9,r6
8000c47e:	30 09       	mov	r9,0
8000c480:	58 0e       	cp.w	lr,0
8000c482:	5f 1e       	srne	lr
8000c484:	1c 48       	or	r8,lr
8000c486:	c8 3b       	rjmp	8000c38c <__avr32_f64_sub_shift_done>

8000c488 <__avr32_f64_sub_longnormalize>:
8000c488:	f4 06 12 00 	clz	r6,r10
8000c48c:	f9 b7 03 00 	movlo	r7,0
8000c490:	f9 b6 03 00 	movlo	r6,0
8000c494:	f9 bc 03 00 	movlo	r12,0
8000c498:	f7 b6 02 e0 	subhs	r6,-32
8000c49c:	f4 06 09 4b 	lsl	r11,r10,r6
8000c4a0:	30 0a       	mov	r10,0
8000c4a2:	0c 17       	sub	r7,r6
8000c4a4:	fe 9a ff be 	brle	8000c420 <__avr32_f64_sub_subnormal_result>
8000c4a8:	c8 5b       	rjmp	8000c3b2 <__avr32_f64_sub_longnormalize_done>
	...

8000c4ac <__avr32_f64_add_from_sub>:
8000c4ac:	ee 19 80 00 	eorh	r9,0x8000

8000c4b0 <__avr32_f64_add>:
8000c4b0:	f7 e9 20 0c 	eor	r12,r11,r9
8000c4b4:	fe 96 ff 2e 	brmi	8000c310 <__avr32_f64_sub_from_add>
8000c4b8:	eb cd 40 e0 	pushm	r5-r7,lr
8000c4bc:	16 9c       	mov	r12,r11
8000c4be:	e6 1c 80 00 	andh	r12,0x8000,COH
8000c4c2:	bf db       	cbr	r11,0x1f
8000c4c4:	bf d9       	cbr	r9,0x1f
8000c4c6:	12 3b       	cp.w	r11,r9
8000c4c8:	c0 72       	brcc	8000c4d6 <__avr32_f64_add+0x26>
8000c4ca:	16 97       	mov	r7,r11
8000c4cc:	12 9b       	mov	r11,r9
8000c4ce:	0e 99       	mov	r9,r7
8000c4d0:	14 97       	mov	r7,r10
8000c4d2:	10 9a       	mov	r10,r8
8000c4d4:	0e 98       	mov	r8,r7
8000c4d6:	30 0e       	mov	lr,0
8000c4d8:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000c4dc:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000c4e0:	b5 ab       	sbr	r11,0x14
8000c4e2:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000c4e6:	c6 20       	breq	8000c5aa <__avr32_f64_add_op2_subnormal>
8000c4e8:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000c4ec:	b5 a9       	sbr	r9,0x14
8000c4ee:	e0 47 07 ff 	cp.w	r7,2047
8000c4f2:	c2 80       	breq	8000c542 <__avr32_f64_add_opH_nan_or_inf>
8000c4f4:	0e 26       	rsub	r6,r7
8000c4f6:	c1 20       	breq	8000c51a <__avr32_f64_add_shift_done>
8000c4f8:	e0 46 00 36 	cp.w	r6,54
8000c4fc:	c1 52       	brcc	8000c526 <__avr32_f64_add_res_of_done>
8000c4fe:	ec 05 11 20 	rsub	r5,r6,32
8000c502:	e0 46 00 20 	cp.w	r6,32
8000c506:	c3 52       	brcc	8000c570 <__avr32_f64_add_longshift>
8000c508:	f0 05 09 4e 	lsl	lr,r8,r5
8000c50c:	f2 05 09 45 	lsl	r5,r9,r5
8000c510:	f0 06 0a 48 	lsr	r8,r8,r6
8000c514:	f2 06 0a 49 	lsr	r9,r9,r6
8000c518:	0a 48       	or	r8,r5

8000c51a <__avr32_f64_add_shift_done>:
8000c51a:	10 0a       	add	r10,r8
8000c51c:	f6 09 00 4b 	adc	r11,r11,r9
8000c520:	ed bb 00 15 	bld	r11,0x15
8000c524:	c3 40       	breq	8000c58c <__avr32_f64_add_res_of>

8000c526 <__avr32_f64_add_res_of_done>:
8000c526:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000c52a:	18 4b       	or	r11,r12

8000c52c <__avr32_f64_add_round>:
8000c52c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000c530:	18 4e       	or	lr,r12
8000c532:	ee 1e 80 00 	eorh	lr,0x8000
8000c536:	f1 be 04 20 	satu	lr,0x1
8000c53a:	1c 0a       	add	r10,lr
8000c53c:	5c 0b       	acr	r11
8000c53e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c542 <__avr32_f64_add_opH_nan_or_inf>:
8000c542:	b5 cb       	cbr	r11,0x14
8000c544:	f7 ea 10 0e 	or	lr,r11,r10
8000c548:	c1 01       	brne	8000c568 <__avr32_f64_add_return_nan>
8000c54a:	e0 46 07 ff 	cp.w	r6,2047
8000c54e:	c0 30       	breq	8000c554 <__avr32_f64_add_opL_nan_or_inf>
8000c550:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c554 <__avr32_f64_add_opL_nan_or_inf>:
8000c554:	b5 c9       	cbr	r9,0x14
8000c556:	f3 e8 10 0e 	or	lr,r9,r8
8000c55a:	c0 71       	brne	8000c568 <__avr32_f64_add_return_nan>
8000c55c:	30 0a       	mov	r10,0
8000c55e:	fc 1b 7f f0 	movh	r11,0x7ff0
8000c562:	18 4b       	or	r11,r12
8000c564:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c568 <__avr32_f64_add_return_nan>:
8000c568:	3f fa       	mov	r10,-1
8000c56a:	3f fb       	mov	r11,-1
8000c56c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c570 <__avr32_f64_add_longshift>:
8000c570:	f1 b6 04 c0 	satu	r6,0x6
8000c574:	f0 0e 17 00 	moveq	lr,r8
8000c578:	c0 60       	breq	8000c584 <__avr32_f64_add_longshift+0x14>
8000c57a:	f2 05 09 4e 	lsl	lr,r9,r5
8000c57e:	58 08       	cp.w	r8,0
8000c580:	5f 18       	srne	r8
8000c582:	10 4e       	or	lr,r8
8000c584:	f2 06 0a 48 	lsr	r8,r9,r6
8000c588:	30 09       	mov	r9,0
8000c58a:	cc 8b       	rjmp	8000c51a <__avr32_f64_add_shift_done>

8000c58c <__avr32_f64_add_res_of>:
8000c58c:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000c590:	a1 9b       	lsr	r11,0x1
8000c592:	5d 0a       	ror	r10
8000c594:	5d 0e       	ror	lr
8000c596:	2f f7       	sub	r7,-1
8000c598:	e0 47 07 ff 	cp.w	r7,2047
8000c59c:	f9 ba 00 00 	moveq	r10,0
8000c5a0:	f9 bb 00 00 	moveq	r11,0
8000c5a4:	f9 be 00 00 	moveq	lr,0
8000c5a8:	cb fb       	rjmp	8000c526 <__avr32_f64_add_res_of_done>

8000c5aa <__avr32_f64_add_op2_subnormal>:
8000c5aa:	30 16       	mov	r6,1
8000c5ac:	58 07       	cp.w	r7,0
8000c5ae:	ca 01       	brne	8000c4ee <__avr32_f64_add+0x3e>
8000c5b0:	b5 cb       	cbr	r11,0x14
8000c5b2:	10 0a       	add	r10,r8
8000c5b4:	f6 09 00 4b 	adc	r11,r11,r9
8000c5b8:	18 4b       	or	r11,r12
8000c5ba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	...

8000c5c0 <__avr32_u32_to_f64>:
8000c5c0:	f8 cb 00 00 	sub	r11,r12,0
8000c5c4:	30 0c       	mov	r12,0
8000c5c6:	c0 38       	rjmp	8000c5cc <__avr32_s32_to_f64+0x4>

8000c5c8 <__avr32_s32_to_f64>:
8000c5c8:	18 9b       	mov	r11,r12
8000c5ca:	5c 4b       	abs	r11
8000c5cc:	30 0a       	mov	r10,0
8000c5ce:	5e 0b       	reteq	r11
8000c5d0:	d4 01       	pushm	lr
8000c5d2:	e0 69 04 1e 	mov	r9,1054
8000c5d6:	f6 08 12 00 	clz	r8,r11
8000c5da:	c1 70       	breq	8000c608 <__avr32_s32_to_f64+0x40>
8000c5dc:	c0 c3       	brcs	8000c5f4 <__avr32_s32_to_f64+0x2c>
8000c5de:	f0 0e 11 20 	rsub	lr,r8,32
8000c5e2:	f6 08 09 4b 	lsl	r11,r11,r8
8000c5e6:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000c5ea:	1c 4b       	or	r11,lr
8000c5ec:	f4 08 09 4a 	lsl	r10,r10,r8
8000c5f0:	10 19       	sub	r9,r8
8000c5f2:	c0 b8       	rjmp	8000c608 <__avr32_s32_to_f64+0x40>
8000c5f4:	f4 08 12 00 	clz	r8,r10
8000c5f8:	f9 b8 03 00 	movlo	r8,0
8000c5fc:	f7 b8 02 e0 	subhs	r8,-32
8000c600:	f4 08 09 4b 	lsl	r11,r10,r8
8000c604:	30 0a       	mov	r10,0
8000c606:	10 19       	sub	r9,r8
8000c608:	58 09       	cp.w	r9,0
8000c60a:	e0 89 00 30 	brgt	8000c66a <__avr32_s32_to_f64+0xa2>
8000c60e:	5c 39       	neg	r9
8000c610:	2f f9       	sub	r9,-1
8000c612:	e0 49 00 36 	cp.w	r9,54
8000c616:	c0 43       	brcs	8000c61e <__avr32_s32_to_f64+0x56>
8000c618:	30 0b       	mov	r11,0
8000c61a:	30 0a       	mov	r10,0
8000c61c:	c2 68       	rjmp	8000c668 <__avr32_s32_to_f64+0xa0>
8000c61e:	2f 69       	sub	r9,-10
8000c620:	f2 08 11 20 	rsub	r8,r9,32
8000c624:	e0 49 00 20 	cp.w	r9,32
8000c628:	c0 b2       	brcc	8000c63e <__avr32_s32_to_f64+0x76>
8000c62a:	f4 08 09 4e 	lsl	lr,r10,r8
8000c62e:	f6 08 09 48 	lsl	r8,r11,r8
8000c632:	f4 09 0a 4a 	lsr	r10,r10,r9
8000c636:	f6 09 0a 4b 	lsr	r11,r11,r9
8000c63a:	10 4b       	or	r11,r8
8000c63c:	c0 88       	rjmp	8000c64c <__avr32_s32_to_f64+0x84>
8000c63e:	f6 08 09 4e 	lsl	lr,r11,r8
8000c642:	14 4e       	or	lr,r10
8000c644:	16 9a       	mov	r10,r11
8000c646:	30 0b       	mov	r11,0
8000c648:	f4 09 0a 4a 	lsr	r10,r10,r9
8000c64c:	ed ba 00 00 	bld	r10,0x0
8000c650:	c0 92       	brcc	8000c662 <__avr32_s32_to_f64+0x9a>
8000c652:	1c 7e       	tst	lr,lr
8000c654:	c0 41       	brne	8000c65c <__avr32_s32_to_f64+0x94>
8000c656:	ed ba 00 01 	bld	r10,0x1
8000c65a:	c0 42       	brcc	8000c662 <__avr32_s32_to_f64+0x9a>
8000c65c:	2f fa       	sub	r10,-1
8000c65e:	f7 bb 02 ff 	subhs	r11,-1
8000c662:	5c fc       	rol	r12
8000c664:	5d 0b       	ror	r11
8000c666:	5d 0a       	ror	r10
8000c668:	d8 02       	popm	pc
8000c66a:	e0 68 03 ff 	mov	r8,1023
8000c66e:	ed ba 00 0b 	bld	r10,0xb
8000c672:	f7 b8 00 ff 	subeq	r8,-1
8000c676:	10 0a       	add	r10,r8
8000c678:	5c 0b       	acr	r11
8000c67a:	f7 b9 03 fe 	sublo	r9,-2
8000c67e:	e0 49 07 ff 	cp.w	r9,2047
8000c682:	c0 55       	brlt	8000c68c <__avr32_s32_to_f64+0xc4>
8000c684:	30 0a       	mov	r10,0
8000c686:	fc 1b ff e0 	movh	r11,0xffe0
8000c68a:	c0 c8       	rjmp	8000c6a2 <__floatsidf_return_op1>
8000c68c:	ed bb 00 1f 	bld	r11,0x1f
8000c690:	f7 b9 01 01 	subne	r9,1
8000c694:	ab 9a       	lsr	r10,0xb
8000c696:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000c69a:	a1 7b       	lsl	r11,0x1
8000c69c:	ab 9b       	lsr	r11,0xb
8000c69e:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000c6a2 <__floatsidf_return_op1>:
8000c6a2:	a1 7c       	lsl	r12,0x1
8000c6a4:	5d 0b       	ror	r11
8000c6a6:	d8 02       	popm	pc

8000c6a8 <__avr32_f32_div>:
8000c6a8:	f7 ec 20 08 	eor	r8,r11,r12
8000c6ac:	a1 7c       	lsl	r12,0x1
8000c6ae:	a1 7b       	lsl	r11,0x1
8000c6b0:	c7 a0       	breq	8000c7a4 <__divsf_return_op1+0x16>
8000c6b2:	18 7c       	tst	r12,r12
8000c6b4:	f9 b9 00 00 	moveq	r9,0
8000c6b8:	c0 90       	breq	8000c6ca <__avr32_f32_div+0x22>
8000c6ba:	f8 09 16 18 	lsr	r9,r12,0x18
8000c6be:	c7 e0       	breq	8000c7ba <__divsf_return_op1+0x2c>
8000c6c0:	e0 49 00 ff 	cp.w	r9,255
8000c6c4:	c6 82       	brcc	8000c794 <__divsf_return_op1+0x6>
8000c6c6:	a7 7c       	lsl	r12,0x7
8000c6c8:	bf bc       	sbr	r12,0x1f
8000c6ca:	f6 0a 16 18 	lsr	r10,r11,0x18
8000c6ce:	c7 e0       	breq	8000c7ca <__divsf_return_op1+0x3c>
8000c6d0:	e0 4a 00 ff 	cp.w	r10,255
8000c6d4:	c6 62       	brcc	8000c7a0 <__divsf_return_op1+0x12>
8000c6d6:	a7 7b       	lsl	r11,0x7
8000c6d8:	bf bb       	sbr	r11,0x1f
8000c6da:	58 09       	cp.w	r9,0
8000c6dc:	f5 bc 00 00 	subfeq	r12,0
8000c6e0:	5e 0d       	reteq	0
8000c6e2:	1a d5       	st.w	--sp,r5
8000c6e4:	bb 27       	st.d	--sp,r6
8000c6e6:	14 19       	sub	r9,r10
8000c6e8:	28 19       	sub	r9,-127
8000c6ea:	fc 1a 80 00 	movh	r10,0x8000
8000c6ee:	a3 8c       	lsr	r12,0x2
8000c6f0:	f6 05 16 02 	lsr	r5,r11,0x2
8000c6f4:	f4 0b 16 01 	lsr	r11,r10,0x1
8000c6f8:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8000c6fc:	5c d6       	com	r6
8000c6fe:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
8000c702:	f6 05 06 46 	mulu.d	r6,r11,r5
8000c706:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000c70a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000c70e:	ee 0b 15 02 	lsl	r11,r7,0x2
8000c712:	f6 05 06 46 	mulu.d	r6,r11,r5
8000c716:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000c71a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000c71e:	ee 0b 15 02 	lsl	r11,r7,0x2
8000c722:	f6 05 06 46 	mulu.d	r6,r11,r5
8000c726:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000c72a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000c72e:	ee 0b 15 02 	lsl	r11,r7,0x2
8000c732:	f6 05 06 46 	mulu.d	r6,r11,r5
8000c736:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000c73a:	f6 07 06 46 	mulu.d	r6,r11,r7
8000c73e:	ee 0b 15 02 	lsl	r11,r7,0x2
8000c742:	f6 0c 06 46 	mulu.d	r6,r11,r12
8000c746:	a5 8c       	lsr	r12,0x4
8000c748:	ed b7 00 1c 	bld	r7,0x1c
8000c74c:	c0 40       	breq	8000c754 <__avr32_f32_div+0xac>
8000c74e:	a1 77       	lsl	r7,0x1
8000c750:	20 19       	sub	r9,1
8000c752:	a1 7c       	lsl	r12,0x1
8000c754:	58 09       	cp.w	r9,0
8000c756:	e0 8a 00 42 	brle	8000c7da <__avr32_f32_div_res_subnormal>
8000c75a:	e0 17 ff e0 	andl	r7,0xffe0
8000c75e:	e8 17 00 10 	orl	r7,0x10
8000c762:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000c766:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000c76a:	58 0a       	cp.w	r10,0

8000c76c <__avr32_f32_div_round_subnormal>:
8000c76c:	f8 0b 13 00 	cpc	r11,r12
8000c770:	5f 3b       	srlo	r11
8000c772:	ea 0b 17 00 	moveq	r11,r5
8000c776:	ee 0c 16 05 	lsr	r12,r7,0x5
8000c77a:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8000c77e:	bb 07       	ld.d	r6,sp++
8000c780:	1b 05       	ld.w	r5,sp++
8000c782:	ed b8 00 1f 	bld	r8,0x1f
8000c786:	ef bc 00 1f 	bst	r12,0x1f
8000c78a:	16 0c       	add	r12,r11
8000c78c:	5e fc       	retal	r12

8000c78e <__divsf_return_op1>:
8000c78e:	a1 78       	lsl	r8,0x1
8000c790:	5d 0c       	ror	r12
8000c792:	5e fc       	retal	r12
8000c794:	5e 1e       	retne	-1
8000c796:	fc 19 ff 00 	movh	r9,0xff00
8000c79a:	12 3b       	cp.w	r11,r9
8000c79c:	cf 93       	brcs	8000c78e <__divsf_return_op1>
8000c79e:	5e fe       	retal	-1
8000c7a0:	5e 0d       	reteq	0
8000c7a2:	5e fe       	retal	-1
8000c7a4:	18 7c       	tst	r12,r12
8000c7a6:	5e 0e       	reteq	-1
8000c7a8:	f8 09 16 18 	lsr	r9,r12,0x18
8000c7ac:	c0 70       	breq	8000c7ba <__divsf_return_op1+0x2c>
8000c7ae:	e0 49 00 ff 	cp.w	r9,255
8000c7b2:	cf 12       	brcc	8000c794 <__divsf_return_op1+0x6>
8000c7b4:	fc 1c ff 00 	movh	r12,0xff00
8000c7b8:	ce bb       	rjmp	8000c78e <__divsf_return_op1>
8000c7ba:	a7 7c       	lsl	r12,0x7
8000c7bc:	f8 09 12 00 	clz	r9,r12
8000c7c0:	f8 09 09 4c 	lsl	r12,r12,r9
8000c7c4:	f2 09 11 01 	rsub	r9,r9,1
8000c7c8:	c8 1b       	rjmp	8000c6ca <__avr32_f32_div+0x22>
8000c7ca:	a7 7b       	lsl	r11,0x7
8000c7cc:	f6 0a 12 00 	clz	r10,r11
8000c7d0:	f6 0a 09 4b 	lsl	r11,r11,r10
8000c7d4:	f4 0a 11 01 	rsub	r10,r10,1
8000c7d8:	c8 5b       	rjmp	8000c6e2 <__avr32_f32_div+0x3a>

8000c7da <__avr32_f32_div_res_subnormal>:
8000c7da:	5c 39       	neg	r9
8000c7dc:	2f f9       	sub	r9,-1
8000c7de:	f1 b9 04 a0 	satu	r9,0x5
8000c7e2:	f2 0a 11 20 	rsub	r10,r9,32
8000c7e6:	ee 09 0a 47 	lsr	r7,r7,r9
8000c7ea:	f8 0a 09 46 	lsl	r6,r12,r10
8000c7ee:	f8 09 0a 4c 	lsr	r12,r12,r9
8000c7f2:	e0 17 ff e0 	andl	r7,0xffe0
8000c7f6:	e8 17 00 10 	orl	r7,0x10
8000c7fa:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000c7fe:	30 09       	mov	r9,0
8000c800:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000c804:	0c 3a       	cp.w	r10,r6
8000c806:	cb 3b       	rjmp	8000c76c <__avr32_f32_div_round_subnormal>

8000c808 <__avr32_f64_to_f32>:
8000c808:	f6 09 15 01 	lsl	r9,r11,0x1
8000c80c:	b5 99       	lsr	r9,0x15
8000c80e:	5e 0d       	reteq	0
8000c810:	f6 08 15 0a 	lsl	r8,r11,0xa
8000c814:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
8000c818:	ab 6a       	lsl	r10,0xa
8000c81a:	5c 3a       	neg	r10
8000c81c:	5c fc       	rol	r12
8000c81e:	e0 49 07 ff 	cp.w	r9,2047
8000c822:	c1 a0       	breq	8000c856 <__truncdfsf_return_op1+0x6>
8000c824:	e0 29 03 80 	sub	r9,896
8000c828:	bf bc       	sbr	r12,0x1f
8000c82a:	58 09       	cp.w	r9,0
8000c82c:	e0 8a 00 1a 	brle	8000c860 <__truncdfsf_return_op1+0x10>
8000c830:	37 fa       	mov	r10,127
8000c832:	ed bc 00 08 	bld	r12,0x8
8000c836:	f7 ba 00 ff 	subeq	r10,-1
8000c83a:	14 0c       	add	r12,r10
8000c83c:	f7 b9 03 fe 	sublo	r9,-2
8000c840:	ed bc 00 1f 	bld	r12,0x1f
8000c844:	f7 b9 01 01 	subne	r9,1
8000c848:	f8 0c 16 07 	lsr	r12,r12,0x7
8000c84c:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

8000c850 <__truncdfsf_return_op1>:
8000c850:	a1 7b       	lsl	r11,0x1
8000c852:	5d 0c       	ror	r12
8000c854:	5e fc       	retal	r12
8000c856:	bf dc       	cbr	r12,0x1f
8000c858:	5e 1e       	retne	-1
8000c85a:	fc 1c 7f 80 	movh	r12,0x7f80
8000c85e:	5e fc       	retal	r12
8000c860:	f2 09 11 01 	rsub	r9,r9,1
8000c864:	59 99       	cp.w	r9,25
8000c866:	f9 bc 02 00 	movhs	r12,0
8000c86a:	c1 32       	brcc	8000c890 <__truncdfsf_return_op1+0x40>
8000c86c:	f2 0a 11 20 	rsub	r10,r9,32
8000c870:	f8 0a 09 4a 	lsl	r10,r12,r10
8000c874:	5f 1a       	srne	r10
8000c876:	f8 09 0a 4c 	lsr	r12,r12,r9
8000c87a:	14 4c       	or	r12,r10
8000c87c:	37 fa       	mov	r10,127
8000c87e:	ed bc 00 08 	bld	r12,0x8
8000c882:	f7 ba 00 ff 	subeq	r10,-1
8000c886:	14 0c       	add	r12,r10
8000c888:	f8 0c 16 07 	lsr	r12,r12,0x7
8000c88c:	a1 7b       	lsl	r11,0x1
8000c88e:	5d 0c       	ror	r12
8000c890:	5e fc       	retal	r12

8000c892 <__avr32_udiv64>:
8000c892:	d4 31       	pushm	r0-r7,lr
8000c894:	1a 97       	mov	r7,sp
8000c896:	20 3d       	sub	sp,12
8000c898:	10 9c       	mov	r12,r8
8000c89a:	12 9e       	mov	lr,r9
8000c89c:	14 93       	mov	r3,r10
8000c89e:	58 09       	cp.w	r9,0
8000c8a0:	e0 81 00 bd 	brne	8000ca1a <__avr32_udiv64+0x188>
8000c8a4:	16 38       	cp.w	r8,r11
8000c8a6:	e0 88 00 40 	brls	8000c926 <__avr32_udiv64+0x94>
8000c8aa:	f0 08 12 00 	clz	r8,r8
8000c8ae:	c0 d0       	breq	8000c8c8 <__avr32_udiv64+0x36>
8000c8b0:	f6 08 09 4b 	lsl	r11,r11,r8
8000c8b4:	f0 09 11 20 	rsub	r9,r8,32
8000c8b8:	f8 08 09 4c 	lsl	r12,r12,r8
8000c8bc:	f4 09 0a 49 	lsr	r9,r10,r9
8000c8c0:	f4 08 09 43 	lsl	r3,r10,r8
8000c8c4:	f3 eb 10 0b 	or	r11,r9,r11
8000c8c8:	f8 0e 16 10 	lsr	lr,r12,0x10
8000c8cc:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000c8d0:	f6 0e 0d 00 	divu	r0,r11,lr
8000c8d4:	e6 0b 16 10 	lsr	r11,r3,0x10
8000c8d8:	00 99       	mov	r9,r0
8000c8da:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000c8de:	e0 0a 02 48 	mul	r8,r0,r10
8000c8e2:	10 3b       	cp.w	r11,r8
8000c8e4:	c0 a2       	brcc	8000c8f8 <__avr32_udiv64+0x66>
8000c8e6:	20 19       	sub	r9,1
8000c8e8:	18 0b       	add	r11,r12
8000c8ea:	18 3b       	cp.w	r11,r12
8000c8ec:	c0 63       	brcs	8000c8f8 <__avr32_udiv64+0x66>
8000c8ee:	10 3b       	cp.w	r11,r8
8000c8f0:	f7 b9 03 01 	sublo	r9,1
8000c8f4:	f7 dc e3 0b 	addcs	r11,r11,r12
8000c8f8:	f6 08 01 01 	sub	r1,r11,r8
8000c8fc:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000c900:	e2 0e 0d 00 	divu	r0,r1,lr
8000c904:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000c908:	00 98       	mov	r8,r0
8000c90a:	e0 0a 02 4a 	mul	r10,r0,r10
8000c90e:	14 33       	cp.w	r3,r10
8000c910:	c0 82       	brcc	8000c920 <__avr32_udiv64+0x8e>
8000c912:	20 18       	sub	r8,1
8000c914:	18 03       	add	r3,r12
8000c916:	18 33       	cp.w	r3,r12
8000c918:	c0 43       	brcs	8000c920 <__avr32_udiv64+0x8e>
8000c91a:	14 33       	cp.w	r3,r10
8000c91c:	f7 b8 03 01 	sublo	r8,1
8000c920:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000c924:	cd f8       	rjmp	8000cae2 <__avr32_udiv64+0x250>
8000c926:	58 08       	cp.w	r8,0
8000c928:	c0 51       	brne	8000c932 <__avr32_udiv64+0xa0>
8000c92a:	30 19       	mov	r9,1
8000c92c:	f2 08 0d 08 	divu	r8,r9,r8
8000c930:	10 9c       	mov	r12,r8
8000c932:	f8 06 12 00 	clz	r6,r12
8000c936:	c0 41       	brne	8000c93e <__avr32_udiv64+0xac>
8000c938:	18 1b       	sub	r11,r12
8000c93a:	30 19       	mov	r9,1
8000c93c:	c4 08       	rjmp	8000c9bc <__avr32_udiv64+0x12a>
8000c93e:	ec 01 11 20 	rsub	r1,r6,32
8000c942:	f4 01 0a 49 	lsr	r9,r10,r1
8000c946:	f8 06 09 4c 	lsl	r12,r12,r6
8000c94a:	f6 06 09 48 	lsl	r8,r11,r6
8000c94e:	f6 01 0a 41 	lsr	r1,r11,r1
8000c952:	f3 e8 10 08 	or	r8,r9,r8
8000c956:	f8 03 16 10 	lsr	r3,r12,0x10
8000c95a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000c95e:	e2 03 0d 00 	divu	r0,r1,r3
8000c962:	f0 0b 16 10 	lsr	r11,r8,0x10
8000c966:	00 9e       	mov	lr,r0
8000c968:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000c96c:	e0 05 02 49 	mul	r9,r0,r5
8000c970:	12 3b       	cp.w	r11,r9
8000c972:	c0 a2       	brcc	8000c986 <__avr32_udiv64+0xf4>
8000c974:	20 1e       	sub	lr,1
8000c976:	18 0b       	add	r11,r12
8000c978:	18 3b       	cp.w	r11,r12
8000c97a:	c0 63       	brcs	8000c986 <__avr32_udiv64+0xf4>
8000c97c:	12 3b       	cp.w	r11,r9
8000c97e:	f7 be 03 01 	sublo	lr,1
8000c982:	f7 dc e3 0b 	addcs	r11,r11,r12
8000c986:	12 1b       	sub	r11,r9
8000c988:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000c98c:	f6 03 0d 02 	divu	r2,r11,r3
8000c990:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000c994:	04 99       	mov	r9,r2
8000c996:	e4 05 02 4b 	mul	r11,r2,r5
8000c99a:	16 38       	cp.w	r8,r11
8000c99c:	c0 a2       	brcc	8000c9b0 <__avr32_udiv64+0x11e>
8000c99e:	20 19       	sub	r9,1
8000c9a0:	18 08       	add	r8,r12
8000c9a2:	18 38       	cp.w	r8,r12
8000c9a4:	c0 63       	brcs	8000c9b0 <__avr32_udiv64+0x11e>
8000c9a6:	16 38       	cp.w	r8,r11
8000c9a8:	f7 b9 03 01 	sublo	r9,1
8000c9ac:	f1 dc e3 08 	addcs	r8,r8,r12
8000c9b0:	f4 06 09 43 	lsl	r3,r10,r6
8000c9b4:	f0 0b 01 0b 	sub	r11,r8,r11
8000c9b8:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000c9bc:	f8 06 16 10 	lsr	r6,r12,0x10
8000c9c0:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000c9c4:	f6 06 0d 00 	divu	r0,r11,r6
8000c9c8:	e6 0b 16 10 	lsr	r11,r3,0x10
8000c9cc:	00 9a       	mov	r10,r0
8000c9ce:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000c9d2:	e0 0e 02 48 	mul	r8,r0,lr
8000c9d6:	10 3b       	cp.w	r11,r8
8000c9d8:	c0 a2       	brcc	8000c9ec <__avr32_udiv64+0x15a>
8000c9da:	20 1a       	sub	r10,1
8000c9dc:	18 0b       	add	r11,r12
8000c9de:	18 3b       	cp.w	r11,r12
8000c9e0:	c0 63       	brcs	8000c9ec <__avr32_udiv64+0x15a>
8000c9e2:	10 3b       	cp.w	r11,r8
8000c9e4:	f7 ba 03 01 	sublo	r10,1
8000c9e8:	f7 dc e3 0b 	addcs	r11,r11,r12
8000c9ec:	f6 08 01 01 	sub	r1,r11,r8
8000c9f0:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000c9f4:	e2 06 0d 00 	divu	r0,r1,r6
8000c9f8:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000c9fc:	00 98       	mov	r8,r0
8000c9fe:	e0 0e 02 4b 	mul	r11,r0,lr
8000ca02:	16 33       	cp.w	r3,r11
8000ca04:	c0 82       	brcc	8000ca14 <__avr32_udiv64+0x182>
8000ca06:	20 18       	sub	r8,1
8000ca08:	18 03       	add	r3,r12
8000ca0a:	18 33       	cp.w	r3,r12
8000ca0c:	c0 43       	brcs	8000ca14 <__avr32_udiv64+0x182>
8000ca0e:	16 33       	cp.w	r3,r11
8000ca10:	f7 b8 03 01 	sublo	r8,1
8000ca14:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000ca18:	c6 98       	rjmp	8000caea <__avr32_udiv64+0x258>
8000ca1a:	16 39       	cp.w	r9,r11
8000ca1c:	e0 8b 00 65 	brhi	8000cae6 <__avr32_udiv64+0x254>
8000ca20:	f2 09 12 00 	clz	r9,r9
8000ca24:	c0 b1       	brne	8000ca3a <__avr32_udiv64+0x1a8>
8000ca26:	10 3a       	cp.w	r10,r8
8000ca28:	5f 2a       	srhs	r10
8000ca2a:	1c 3b       	cp.w	r11,lr
8000ca2c:	5f b8       	srhi	r8
8000ca2e:	10 4a       	or	r10,r8
8000ca30:	f2 0a 18 00 	cp.b	r10,r9
8000ca34:	c5 90       	breq	8000cae6 <__avr32_udiv64+0x254>
8000ca36:	30 18       	mov	r8,1
8000ca38:	c5 98       	rjmp	8000caea <__avr32_udiv64+0x258>
8000ca3a:	f0 09 09 46 	lsl	r6,r8,r9
8000ca3e:	f2 03 11 20 	rsub	r3,r9,32
8000ca42:	fc 09 09 4e 	lsl	lr,lr,r9
8000ca46:	f0 03 0a 48 	lsr	r8,r8,r3
8000ca4a:	f6 09 09 4c 	lsl	r12,r11,r9
8000ca4e:	f4 03 0a 42 	lsr	r2,r10,r3
8000ca52:	ef 46 ff f4 	st.w	r7[-12],r6
8000ca56:	f6 03 0a 43 	lsr	r3,r11,r3
8000ca5a:	18 42       	or	r2,r12
8000ca5c:	f1 ee 10 0c 	or	r12,r8,lr
8000ca60:	f8 01 16 10 	lsr	r1,r12,0x10
8000ca64:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000ca68:	e6 01 0d 04 	divu	r4,r3,r1
8000ca6c:	e4 03 16 10 	lsr	r3,r2,0x10
8000ca70:	08 9e       	mov	lr,r4
8000ca72:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000ca76:	e8 06 02 48 	mul	r8,r4,r6
8000ca7a:	10 33       	cp.w	r3,r8
8000ca7c:	c0 a2       	brcc	8000ca90 <__avr32_udiv64+0x1fe>
8000ca7e:	20 1e       	sub	lr,1
8000ca80:	18 03       	add	r3,r12
8000ca82:	18 33       	cp.w	r3,r12
8000ca84:	c0 63       	brcs	8000ca90 <__avr32_udiv64+0x1fe>
8000ca86:	10 33       	cp.w	r3,r8
8000ca88:	f7 be 03 01 	sublo	lr,1
8000ca8c:	e7 dc e3 03 	addcs	r3,r3,r12
8000ca90:	10 13       	sub	r3,r8
8000ca92:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000ca96:	e6 01 0d 00 	divu	r0,r3,r1
8000ca9a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000ca9e:	00 98       	mov	r8,r0
8000caa0:	e0 06 02 46 	mul	r6,r0,r6
8000caa4:	0c 3b       	cp.w	r11,r6
8000caa6:	c0 a2       	brcc	8000caba <__avr32_udiv64+0x228>
8000caa8:	20 18       	sub	r8,1
8000caaa:	18 0b       	add	r11,r12
8000caac:	18 3b       	cp.w	r11,r12
8000caae:	c0 63       	brcs	8000caba <__avr32_udiv64+0x228>
8000cab0:	0c 3b       	cp.w	r11,r6
8000cab2:	f7 dc e3 0b 	addcs	r11,r11,r12
8000cab6:	f7 b8 03 01 	sublo	r8,1
8000caba:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000cabe:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000cac2:	0c 1b       	sub	r11,r6
8000cac4:	f0 04 06 42 	mulu.d	r2,r8,r4
8000cac8:	06 95       	mov	r5,r3
8000caca:	16 35       	cp.w	r5,r11
8000cacc:	e0 8b 00 0a 	brhi	8000cae0 <__avr32_udiv64+0x24e>
8000cad0:	5f 0b       	sreq	r11
8000cad2:	f4 09 09 49 	lsl	r9,r10,r9
8000cad6:	12 32       	cp.w	r2,r9
8000cad8:	5f b9       	srhi	r9
8000cada:	f7 e9 00 09 	and	r9,r11,r9
8000cade:	c0 60       	breq	8000caea <__avr32_udiv64+0x258>
8000cae0:	20 18       	sub	r8,1
8000cae2:	30 09       	mov	r9,0
8000cae4:	c0 38       	rjmp	8000caea <__avr32_udiv64+0x258>
8000cae6:	30 09       	mov	r9,0
8000cae8:	12 98       	mov	r8,r9
8000caea:	10 9a       	mov	r10,r8
8000caec:	12 93       	mov	r3,r9
8000caee:	10 92       	mov	r2,r8
8000caf0:	12 9b       	mov	r11,r9
8000caf2:	2f dd       	sub	sp,-12
8000caf4:	d8 32       	popm	r0-r7,pc

8000caf6 <memcpy>:
8000caf6:	58 8a       	cp.w	r10,8
8000caf8:	c2 f5       	brlt	8000cb56 <memcpy+0x60>
8000cafa:	f9 eb 10 09 	or	r9,r12,r11
8000cafe:	e2 19 00 03 	andl	r9,0x3,COH
8000cb02:	e0 81 00 97 	brne	8000cc30 <memcpy+0x13a>
8000cb06:	e0 4a 00 20 	cp.w	r10,32
8000cb0a:	c3 b4       	brge	8000cb80 <memcpy+0x8a>
8000cb0c:	f4 08 14 02 	asr	r8,r10,0x2
8000cb10:	f0 09 11 08 	rsub	r9,r8,8
8000cb14:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000cb18:	76 69       	ld.w	r9,r11[0x18]
8000cb1a:	99 69       	st.w	r12[0x18],r9
8000cb1c:	76 59       	ld.w	r9,r11[0x14]
8000cb1e:	99 59       	st.w	r12[0x14],r9
8000cb20:	76 49       	ld.w	r9,r11[0x10]
8000cb22:	99 49       	st.w	r12[0x10],r9
8000cb24:	76 39       	ld.w	r9,r11[0xc]
8000cb26:	99 39       	st.w	r12[0xc],r9
8000cb28:	76 29       	ld.w	r9,r11[0x8]
8000cb2a:	99 29       	st.w	r12[0x8],r9
8000cb2c:	76 19       	ld.w	r9,r11[0x4]
8000cb2e:	99 19       	st.w	r12[0x4],r9
8000cb30:	76 09       	ld.w	r9,r11[0x0]
8000cb32:	99 09       	st.w	r12[0x0],r9
8000cb34:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000cb38:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000cb3c:	e0 1a 00 03 	andl	r10,0x3
8000cb40:	f4 0a 11 04 	rsub	r10,r10,4
8000cb44:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000cb48:	17 a9       	ld.ub	r9,r11[0x2]
8000cb4a:	b0 a9       	st.b	r8[0x2],r9
8000cb4c:	17 99       	ld.ub	r9,r11[0x1]
8000cb4e:	b0 99       	st.b	r8[0x1],r9
8000cb50:	17 89       	ld.ub	r9,r11[0x0]
8000cb52:	b0 89       	st.b	r8[0x0],r9
8000cb54:	5e fc       	retal	r12
8000cb56:	f4 0a 11 09 	rsub	r10,r10,9
8000cb5a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000cb5e:	17 f9       	ld.ub	r9,r11[0x7]
8000cb60:	b8 f9       	st.b	r12[0x7],r9
8000cb62:	17 e9       	ld.ub	r9,r11[0x6]
8000cb64:	b8 e9       	st.b	r12[0x6],r9
8000cb66:	17 d9       	ld.ub	r9,r11[0x5]
8000cb68:	b8 d9       	st.b	r12[0x5],r9
8000cb6a:	17 c9       	ld.ub	r9,r11[0x4]
8000cb6c:	b8 c9       	st.b	r12[0x4],r9
8000cb6e:	17 b9       	ld.ub	r9,r11[0x3]
8000cb70:	b8 b9       	st.b	r12[0x3],r9
8000cb72:	17 a9       	ld.ub	r9,r11[0x2]
8000cb74:	b8 a9       	st.b	r12[0x2],r9
8000cb76:	17 99       	ld.ub	r9,r11[0x1]
8000cb78:	b8 99       	st.b	r12[0x1],r9
8000cb7a:	17 89       	ld.ub	r9,r11[0x0]
8000cb7c:	b8 89       	st.b	r12[0x0],r9
8000cb7e:	5e fc       	retal	r12
8000cb80:	eb cd 40 c0 	pushm	r6-r7,lr
8000cb84:	18 99       	mov	r9,r12
8000cb86:	22 0a       	sub	r10,32
8000cb88:	b7 07       	ld.d	r6,r11++
8000cb8a:	b3 26       	st.d	r9++,r6
8000cb8c:	b7 07       	ld.d	r6,r11++
8000cb8e:	b3 26       	st.d	r9++,r6
8000cb90:	b7 07       	ld.d	r6,r11++
8000cb92:	b3 26       	st.d	r9++,r6
8000cb94:	b7 07       	ld.d	r6,r11++
8000cb96:	b3 26       	st.d	r9++,r6
8000cb98:	22 0a       	sub	r10,32
8000cb9a:	cf 74       	brge	8000cb88 <memcpy+0x92>
8000cb9c:	2f 0a       	sub	r10,-16
8000cb9e:	c0 65       	brlt	8000cbaa <memcpy+0xb4>
8000cba0:	b7 07       	ld.d	r6,r11++
8000cba2:	b3 26       	st.d	r9++,r6
8000cba4:	b7 07       	ld.d	r6,r11++
8000cba6:	b3 26       	st.d	r9++,r6
8000cba8:	21 0a       	sub	r10,16
8000cbaa:	5c 3a       	neg	r10
8000cbac:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000cbb0:	d7 03       	nop
8000cbb2:	d7 03       	nop
8000cbb4:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000cbb8:	f3 66 00 0e 	st.b	r9[14],r6
8000cbbc:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000cbc0:	f3 66 00 0d 	st.b	r9[13],r6
8000cbc4:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000cbc8:	f3 66 00 0c 	st.b	r9[12],r6
8000cbcc:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000cbd0:	f3 66 00 0b 	st.b	r9[11],r6
8000cbd4:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000cbd8:	f3 66 00 0a 	st.b	r9[10],r6
8000cbdc:	f7 36 00 09 	ld.ub	r6,r11[9]
8000cbe0:	f3 66 00 09 	st.b	r9[9],r6
8000cbe4:	f7 36 00 08 	ld.ub	r6,r11[8]
8000cbe8:	f3 66 00 08 	st.b	r9[8],r6
8000cbec:	f7 36 00 07 	ld.ub	r6,r11[7]
8000cbf0:	f3 66 00 07 	st.b	r9[7],r6
8000cbf4:	f7 36 00 06 	ld.ub	r6,r11[6]
8000cbf8:	f3 66 00 06 	st.b	r9[6],r6
8000cbfc:	f7 36 00 05 	ld.ub	r6,r11[5]
8000cc00:	f3 66 00 05 	st.b	r9[5],r6
8000cc04:	f7 36 00 04 	ld.ub	r6,r11[4]
8000cc08:	f3 66 00 04 	st.b	r9[4],r6
8000cc0c:	f7 36 00 03 	ld.ub	r6,r11[3]
8000cc10:	f3 66 00 03 	st.b	r9[3],r6
8000cc14:	f7 36 00 02 	ld.ub	r6,r11[2]
8000cc18:	f3 66 00 02 	st.b	r9[2],r6
8000cc1c:	f7 36 00 01 	ld.ub	r6,r11[1]
8000cc20:	f3 66 00 01 	st.b	r9[1],r6
8000cc24:	f7 36 00 00 	ld.ub	r6,r11[0]
8000cc28:	f3 66 00 00 	st.b	r9[0],r6
8000cc2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cc30:	20 1a       	sub	r10,1
8000cc32:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000cc36:	f8 0a 0b 09 	st.b	r12[r10],r9
8000cc3a:	cf b1       	brne	8000cc30 <memcpy+0x13a>
8000cc3c:	5e fc       	retal	r12

8000cc3e <memset>:
8000cc3e:	18 98       	mov	r8,r12
8000cc40:	c0 38       	rjmp	8000cc46 <memset+0x8>
8000cc42:	10 cb       	st.b	r8++,r11
8000cc44:	20 1a       	sub	r10,1
8000cc46:	58 0a       	cp.w	r10,0
8000cc48:	cf d1       	brne	8000cc42 <memset+0x4>
8000cc4a:	5e fc       	retal	r12

8000cc4c <sprintf>:
8000cc4c:	d4 01       	pushm	lr
8000cc4e:	21 7d       	sub	sp,92
8000cc50:	e0 68 ff ff 	mov	r8,65535
8000cc54:	ea 18 7f ff 	orh	r8,0x7fff
8000cc58:	50 58       	stdsp	sp[0x14],r8
8000cc5a:	50 28       	stdsp	sp[0x8],r8
8000cc5c:	e0 68 02 08 	mov	r8,520
8000cc60:	ba 68       	st.h	sp[0xc],r8
8000cc62:	3f f8       	mov	r8,-1
8000cc64:	ba 78       	st.h	sp[0xe],r8
8000cc66:	48 88       	lddpc	r8,8000cc84 <sprintf+0x38>
8000cc68:	50 4c       	stdsp	sp[0x10],r12
8000cc6a:	16 9a       	mov	r10,r11
8000cc6c:	50 0c       	stdsp	sp[0x0],r12
8000cc6e:	fa c9 ff a0 	sub	r9,sp,-96
8000cc72:	70 0c       	ld.w	r12,r8[0x0]
8000cc74:	1a 9b       	mov	r11,sp
8000cc76:	f0 1f 00 05 	mcall	8000cc88 <sprintf+0x3c>
8000cc7a:	30 09       	mov	r9,0
8000cc7c:	40 08       	lddsp	r8,sp[0x0]
8000cc7e:	b0 89       	st.b	r8[0x0],r9
8000cc80:	2e 9d       	sub	sp,-92
8000cc82:	d8 02       	popm	pc
8000cc84:	00 00       	add	r0,r0
8000cc86:	01 a8       	ld.ub	r8,r0[0x2]
8000cc88:	80 00       	ld.sh	r0,r0[0x0]
8000cc8a:	d0 08       	*unknown*

8000cc8c <strlen>:
8000cc8c:	30 09       	mov	r9,0
8000cc8e:	18 98       	mov	r8,r12
8000cc90:	c0 28       	rjmp	8000cc94 <strlen+0x8>
8000cc92:	2f f8       	sub	r8,-1
8000cc94:	11 8a       	ld.ub	r10,r8[0x0]
8000cc96:	f2 0a 18 00 	cp.b	r10,r9
8000cc9a:	cf c1       	brne	8000cc92 <strlen+0x6>
8000cc9c:	f0 0c 01 0c 	sub	r12,r8,r12
8000cca0:	5e fc       	retal	r12
8000cca2:	d7 03       	nop

8000cca4 <strncpy>:
8000cca4:	30 08       	mov	r8,0
8000cca6:	10 3a       	cp.w	r10,r8
8000cca8:	5e 0c       	reteq	r12
8000ccaa:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000ccae:	f8 08 0b 09 	st.b	r12[r8],r9
8000ccb2:	2f f8       	sub	r8,-1
8000ccb4:	58 09       	cp.w	r9,0
8000ccb6:	cf 81       	brne	8000cca6 <strncpy+0x2>
8000ccb8:	10 3a       	cp.w	r10,r8
8000ccba:	5e 0c       	reteq	r12
8000ccbc:	f8 08 0b 09 	st.b	r12[r8],r9
8000ccc0:	2f f8       	sub	r8,-1
8000ccc2:	cf bb       	rjmp	8000ccb8 <strncpy+0x14>

8000ccc4 <get_arg>:
8000ccc4:	d4 31       	pushm	r0-r7,lr
8000ccc6:	20 8d       	sub	sp,32
8000ccc8:	fa c4 ff bc 	sub	r4,sp,-68
8000cccc:	50 4b       	stdsp	sp[0x10],r11
8000ccce:	68 2e       	ld.w	lr,r4[0x8]
8000ccd0:	50 58       	stdsp	sp[0x14],r8
8000ccd2:	12 96       	mov	r6,r9
8000ccd4:	7c 0b       	ld.w	r11,lr[0x0]
8000ccd6:	70 05       	ld.w	r5,r8[0x0]
8000ccd8:	50 6e       	stdsp	sp[0x18],lr
8000ccda:	58 0b       	cp.w	r11,0
8000ccdc:	f4 0b 17 00 	moveq	r11,r10
8000cce0:	68 03       	ld.w	r3,r4[0x0]
8000cce2:	68 11       	ld.w	r1,r4[0x4]
8000cce4:	40 49       	lddsp	r9,sp[0x10]
8000cce6:	30 08       	mov	r8,0
8000cce8:	c2 e9       	rjmp	8000cf44 <get_arg+0x280>
8000ccea:	2f fb       	sub	r11,-1
8000ccec:	32 5c       	mov	r12,37
8000ccee:	17 8a       	ld.ub	r10,r11[0x0]
8000ccf0:	f8 0a 18 00 	cp.b	r10,r12
8000ccf4:	5f 1e       	srne	lr
8000ccf6:	f0 0a 18 00 	cp.b	r10,r8
8000ccfa:	5f 1c       	srne	r12
8000ccfc:	fd ec 00 0c 	and	r12,lr,r12
8000cd00:	f0 0c 18 00 	cp.b	r12,r8
8000cd04:	cf 31       	brne	8000ccea <get_arg+0x26>
8000cd06:	58 0a       	cp.w	r10,0
8000cd08:	e0 80 01 2b 	breq	8000cf5e <get_arg+0x29a>
8000cd0c:	30 0c       	mov	r12,0
8000cd0e:	3f fa       	mov	r10,-1
8000cd10:	18 90       	mov	r0,r12
8000cd12:	50 3a       	stdsp	sp[0xc],r10
8000cd14:	18 94       	mov	r4,r12
8000cd16:	18 92       	mov	r2,r12
8000cd18:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000cd1c:	16 97       	mov	r7,r11
8000cd1e:	50 7c       	stdsp	sp[0x1c],r12
8000cd20:	4c ec       	lddpc	r12,8000ce58 <get_arg+0x194>
8000cd22:	0f 3a       	ld.ub	r10,r7++
8000cd24:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000cd28:	40 7c       	lddsp	r12,sp[0x1c]
8000cd2a:	1c 0c       	add	r12,lr
8000cd2c:	4c ce       	lddpc	lr,8000ce5c <get_arg+0x198>
8000cd2e:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000cd32:	20 1e       	sub	lr,1
8000cd34:	50 0e       	stdsp	sp[0x0],lr
8000cd36:	4c be       	lddpc	lr,8000ce60 <get_arg+0x19c>
8000cd38:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000cd3c:	50 7c       	stdsp	sp[0x1c],r12
8000cd3e:	40 0c       	lddsp	r12,sp[0x0]
8000cd40:	58 7c       	cp.w	r12,7
8000cd42:	e0 8b 00 fa 	brhi	8000cf36 <get_arg+0x272>
8000cd46:	4c 8e       	lddpc	lr,8000ce64 <get_arg+0x1a0>
8000cd48:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000cd4c:	36 8b       	mov	r11,104
8000cd4e:	f6 0a 18 00 	cp.b	r10,r11
8000cd52:	e0 80 00 f2 	breq	8000cf36 <get_arg+0x272>
8000cd56:	37 1b       	mov	r11,113
8000cd58:	f6 0a 18 00 	cp.b	r10,r11
8000cd5c:	c0 70       	breq	8000cd6a <get_arg+0xa6>
8000cd5e:	34 cb       	mov	r11,76
8000cd60:	f6 0a 18 00 	cp.b	r10,r11
8000cd64:	c0 51       	brne	8000cd6e <get_arg+0xaa>
8000cd66:	a3 b4       	sbr	r4,0x3
8000cd68:	ce 78       	rjmp	8000cf36 <get_arg+0x272>
8000cd6a:	a5 b4       	sbr	r4,0x5
8000cd6c:	ce 58       	rjmp	8000cf36 <get_arg+0x272>
8000cd6e:	08 9a       	mov	r10,r4
8000cd70:	0e 9b       	mov	r11,r7
8000cd72:	a5 aa       	sbr	r10,0x4
8000cd74:	17 3c       	ld.ub	r12,r11++
8000cd76:	a5 b4       	sbr	r4,0x5
8000cd78:	36 ce       	mov	lr,108
8000cd7a:	fc 0c 18 00 	cp.b	r12,lr
8000cd7e:	e0 80 00 dd 	breq	8000cf38 <get_arg+0x274>
8000cd82:	14 94       	mov	r4,r10
8000cd84:	cd 98       	rjmp	8000cf36 <get_arg+0x272>
8000cd86:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000cd8a:	36 7c       	mov	r12,103
8000cd8c:	f8 0a 18 00 	cp.b	r10,r12
8000cd90:	e0 8b 00 27 	brhi	8000cdde <get_arg+0x11a>
8000cd94:	36 5b       	mov	r11,101
8000cd96:	f6 0a 18 00 	cp.b	r10,r11
8000cd9a:	c4 82       	brcc	8000ce2a <get_arg+0x166>
8000cd9c:	34 fb       	mov	r11,79
8000cd9e:	f6 0a 18 00 	cp.b	r10,r11
8000cda2:	c4 80       	breq	8000ce32 <get_arg+0x16e>
8000cda4:	e0 8b 00 0c 	brhi	8000cdbc <get_arg+0xf8>
8000cda8:	34 5b       	mov	r11,69
8000cdaa:	f6 0a 18 00 	cp.b	r10,r11
8000cdae:	c3 e0       	breq	8000ce2a <get_arg+0x166>
8000cdb0:	34 7b       	mov	r11,71
8000cdb2:	f6 0a 18 00 	cp.b	r10,r11
8000cdb6:	c3 a0       	breq	8000ce2a <get_arg+0x166>
8000cdb8:	34 4b       	mov	r11,68
8000cdba:	c0 88       	rjmp	8000cdca <get_arg+0x106>
8000cdbc:	35 8b       	mov	r11,88
8000cdbe:	f6 0a 18 00 	cp.b	r10,r11
8000cdc2:	c2 c0       	breq	8000ce1a <get_arg+0x156>
8000cdc4:	e0 8b 00 07 	brhi	8000cdd2 <get_arg+0x10e>
8000cdc8:	35 5b       	mov	r11,85
8000cdca:	f6 0a 18 00 	cp.b	r10,r11
8000cdce:	c3 51       	brne	8000ce38 <get_arg+0x174>
8000cdd0:	c3 18       	rjmp	8000ce32 <get_arg+0x16e>
8000cdd2:	36 3b       	mov	r11,99
8000cdd4:	f6 0a 18 00 	cp.b	r10,r11
8000cdd8:	c2 f0       	breq	8000ce36 <get_arg+0x172>
8000cdda:	36 4b       	mov	r11,100
8000cddc:	c0 e8       	rjmp	8000cdf8 <get_arg+0x134>
8000cdde:	37 0b       	mov	r11,112
8000cde0:	f6 0a 18 00 	cp.b	r10,r11
8000cde4:	c2 50       	breq	8000ce2e <get_arg+0x16a>
8000cde6:	e0 8b 00 0d 	brhi	8000ce00 <get_arg+0x13c>
8000cdea:	36 eb       	mov	r11,110
8000cdec:	f6 0a 18 00 	cp.b	r10,r11
8000cdf0:	c1 f0       	breq	8000ce2e <get_arg+0x16a>
8000cdf2:	e0 8b 00 14 	brhi	8000ce1a <get_arg+0x156>
8000cdf6:	36 9b       	mov	r11,105
8000cdf8:	f6 0a 18 00 	cp.b	r10,r11
8000cdfc:	c1 e1       	brne	8000ce38 <get_arg+0x174>
8000cdfe:	c0 e8       	rjmp	8000ce1a <get_arg+0x156>
8000ce00:	37 5b       	mov	r11,117
8000ce02:	f6 0a 18 00 	cp.b	r10,r11
8000ce06:	c0 a0       	breq	8000ce1a <get_arg+0x156>
8000ce08:	37 8b       	mov	r11,120
8000ce0a:	f6 0a 18 00 	cp.b	r10,r11
8000ce0e:	c0 60       	breq	8000ce1a <get_arg+0x156>
8000ce10:	37 3b       	mov	r11,115
8000ce12:	f6 0a 18 00 	cp.b	r10,r11
8000ce16:	c1 11       	brne	8000ce38 <get_arg+0x174>
8000ce18:	c0 b8       	rjmp	8000ce2e <get_arg+0x16a>
8000ce1a:	ed b4 00 04 	bld	r4,0x4
8000ce1e:	c0 a0       	breq	8000ce32 <get_arg+0x16e>
8000ce20:	ed b4 00 05 	bld	r4,0x5
8000ce24:	c0 91       	brne	8000ce36 <get_arg+0x172>
8000ce26:	30 20       	mov	r0,2
8000ce28:	c0 88       	rjmp	8000ce38 <get_arg+0x174>
8000ce2a:	30 40       	mov	r0,4
8000ce2c:	c0 68       	rjmp	8000ce38 <get_arg+0x174>
8000ce2e:	30 30       	mov	r0,3
8000ce30:	c0 48       	rjmp	8000ce38 <get_arg+0x174>
8000ce32:	30 10       	mov	r0,1
8000ce34:	c0 28       	rjmp	8000ce38 <get_arg+0x174>
8000ce36:	30 00       	mov	r0,0
8000ce38:	40 3b       	lddsp	r11,sp[0xc]
8000ce3a:	5b fb       	cp.w	r11,-1
8000ce3c:	c0 40       	breq	8000ce44 <get_arg+0x180>
8000ce3e:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000ce42:	c7 a8       	rjmp	8000cf36 <get_arg+0x272>
8000ce44:	58 60       	cp.w	r0,6
8000ce46:	e0 8b 00 78 	brhi	8000cf36 <get_arg+0x272>
8000ce4a:	6c 0a       	ld.w	r10,r6[0x0]
8000ce4c:	ea cc ff ff 	sub	r12,r5,-1
8000ce50:	48 6e       	lddpc	lr,8000ce68 <get_arg+0x1a4>
8000ce52:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000ce56:	00 00       	add	r0,r0
8000ce58:	80 01       	ld.sh	r1,r0[0x0]
8000ce5a:	28 2c       	sub	r12,-126
8000ce5c:	80 01       	ld.sh	r1,r0[0x0]
8000ce5e:	27 64       	sub	r4,118
8000ce60:	80 01       	ld.sh	r1,r0[0x0]
8000ce62:	26 f8       	sub	r8,111
8000ce64:	80 01       	ld.sh	r1,r0[0x0]
8000ce66:	25 58       	sub	r8,85
8000ce68:	80 01       	ld.sh	r1,r0[0x0]
8000ce6a:	25 78       	sub	r8,87
8000ce6c:	f4 cb ff f8 	sub	r11,r10,-8
8000ce70:	8d 0b       	st.w	r6[0x0],r11
8000ce72:	f4 ea 00 00 	ld.d	r10,r10[0]
8000ce76:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000ce7a:	c0 f8       	rjmp	8000ce98 <get_arg+0x1d4>
8000ce7c:	f4 cb ff fc 	sub	r11,r10,-4
8000ce80:	8d 0b       	st.w	r6[0x0],r11
8000ce82:	74 0a       	ld.w	r10,r10[0x0]
8000ce84:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000ce88:	c0 88       	rjmp	8000ce98 <get_arg+0x1d4>
8000ce8a:	f4 cb ff f8 	sub	r11,r10,-8
8000ce8e:	8d 0b       	st.w	r6[0x0],r11
8000ce90:	f4 ea 00 00 	ld.d	r10,r10[0]
8000ce94:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000ce98:	0e 9b       	mov	r11,r7
8000ce9a:	18 95       	mov	r5,r12
8000ce9c:	c4 e8       	rjmp	8000cf38 <get_arg+0x274>
8000ce9e:	62 0a       	ld.w	r10,r1[0x0]
8000cea0:	5b fa       	cp.w	r10,-1
8000cea2:	c0 b1       	brne	8000ceb8 <get_arg+0x1f4>
8000cea4:	50 19       	stdsp	sp[0x4],r9
8000cea6:	50 28       	stdsp	sp[0x8],r8
8000cea8:	e0 6a 00 80 	mov	r10,128
8000ceac:	30 0b       	mov	r11,0
8000ceae:	02 9c       	mov	r12,r1
8000ceb0:	f0 1f 00 4d 	mcall	8000cfe4 <get_arg+0x320>
8000ceb4:	40 28       	lddsp	r8,sp[0x8]
8000ceb6:	40 19       	lddsp	r9,sp[0x4]
8000ceb8:	e4 cc 00 01 	sub	r12,r2,1
8000cebc:	0e 9b       	mov	r11,r7
8000cebe:	50 3c       	stdsp	sp[0xc],r12
8000cec0:	f2 0c 0c 49 	max	r9,r9,r12
8000cec4:	c3 a8       	rjmp	8000cf38 <get_arg+0x274>
8000cec6:	62 0a       	ld.w	r10,r1[0x0]
8000cec8:	5b fa       	cp.w	r10,-1
8000ceca:	c0 b1       	brne	8000cee0 <get_arg+0x21c>
8000cecc:	50 19       	stdsp	sp[0x4],r9
8000cece:	50 28       	stdsp	sp[0x8],r8
8000ced0:	e0 6a 00 80 	mov	r10,128
8000ced4:	30 0b       	mov	r11,0
8000ced6:	02 9c       	mov	r12,r1
8000ced8:	f0 1f 00 43 	mcall	8000cfe4 <get_arg+0x320>
8000cedc:	40 28       	lddsp	r8,sp[0x8]
8000cede:	40 19       	lddsp	r9,sp[0x4]
8000cee0:	20 12       	sub	r2,1
8000cee2:	30 0a       	mov	r10,0
8000cee4:	0e 9b       	mov	r11,r7
8000cee6:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000ceea:	f2 02 0c 49 	max	r9,r9,r2
8000ceee:	c2 58       	rjmp	8000cf38 <get_arg+0x274>
8000cef0:	16 97       	mov	r7,r11
8000cef2:	6c 0a       	ld.w	r10,r6[0x0]
8000cef4:	f4 cb ff fc 	sub	r11,r10,-4
8000cef8:	8d 0b       	st.w	r6[0x0],r11
8000cefa:	74 0a       	ld.w	r10,r10[0x0]
8000cefc:	0e 9b       	mov	r11,r7
8000cefe:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000cf02:	2f f5       	sub	r5,-1
8000cf04:	c1 a8       	rjmp	8000cf38 <get_arg+0x274>
8000cf06:	f4 c2 00 30 	sub	r2,r10,48
8000cf0a:	c0 68       	rjmp	8000cf16 <get_arg+0x252>
8000cf0c:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000cf10:	2f f7       	sub	r7,-1
8000cf12:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000cf16:	0f 8a       	ld.ub	r10,r7[0x0]
8000cf18:	58 0a       	cp.w	r10,0
8000cf1a:	c0 e0       	breq	8000cf36 <get_arg+0x272>
8000cf1c:	23 0a       	sub	r10,48
8000cf1e:	58 9a       	cp.w	r10,9
8000cf20:	fe 98 ff f6 	brls	8000cf0c <get_arg+0x248>
8000cf24:	c0 98       	rjmp	8000cf36 <get_arg+0x272>
8000cf26:	2f f7       	sub	r7,-1
8000cf28:	0f 8a       	ld.ub	r10,r7[0x0]
8000cf2a:	58 0a       	cp.w	r10,0
8000cf2c:	c0 50       	breq	8000cf36 <get_arg+0x272>
8000cf2e:	23 0a       	sub	r10,48
8000cf30:	58 9a       	cp.w	r10,9
8000cf32:	fe 98 ff fa 	brls	8000cf26 <get_arg+0x262>
8000cf36:	0e 9b       	mov	r11,r7
8000cf38:	40 7c       	lddsp	r12,sp[0x1c]
8000cf3a:	30 ba       	mov	r10,11
8000cf3c:	f4 0c 18 00 	cp.b	r12,r10
8000cf40:	fe 91 fe ec 	brne	8000cd18 <get_arg+0x54>
8000cf44:	40 42       	lddsp	r2,sp[0x10]
8000cf46:	17 8c       	ld.ub	r12,r11[0x0]
8000cf48:	0a 32       	cp.w	r2,r5
8000cf4a:	5f 4a       	srge	r10
8000cf4c:	f0 0c 18 00 	cp.b	r12,r8
8000cf50:	5f 1c       	srne	r12
8000cf52:	f9 ea 00 0a 	and	r10,r12,r10
8000cf56:	f0 0a 18 00 	cp.b	r10,r8
8000cf5a:	fe 91 fe c9 	brne	8000ccec <get_arg+0x28>
8000cf5e:	30 08       	mov	r8,0
8000cf60:	40 4e       	lddsp	lr,sp[0x10]
8000cf62:	17 8a       	ld.ub	r10,r11[0x0]
8000cf64:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000cf68:	f0 0a 18 00 	cp.b	r10,r8
8000cf6c:	fc 09 17 10 	movne	r9,lr
8000cf70:	e6 05 00 38 	add	r8,r3,r5<<0x3
8000cf74:	06 9e       	mov	lr,r3
8000cf76:	c2 a8       	rjmp	8000cfca <get_arg+0x306>
8000cf78:	62 0a       	ld.w	r10,r1[0x0]
8000cf7a:	58 3a       	cp.w	r10,3
8000cf7c:	c1 e0       	breq	8000cfb8 <get_arg+0x2f4>
8000cf7e:	e0 89 00 07 	brgt	8000cf8c <get_arg+0x2c8>
8000cf82:	58 1a       	cp.w	r10,1
8000cf84:	c1 a0       	breq	8000cfb8 <get_arg+0x2f4>
8000cf86:	58 2a       	cp.w	r10,2
8000cf88:	c1 81       	brne	8000cfb8 <get_arg+0x2f4>
8000cf8a:	c0 58       	rjmp	8000cf94 <get_arg+0x2d0>
8000cf8c:	58 5a       	cp.w	r10,5
8000cf8e:	c0 c0       	breq	8000cfa6 <get_arg+0x2e2>
8000cf90:	c0 b5       	brlt	8000cfa6 <get_arg+0x2e2>
8000cf92:	c1 38       	rjmp	8000cfb8 <get_arg+0x2f4>
8000cf94:	6c 0a       	ld.w	r10,r6[0x0]
8000cf96:	f4 cc ff f8 	sub	r12,r10,-8
8000cf9a:	8d 0c       	st.w	r6[0x0],r12
8000cf9c:	f4 e2 00 00 	ld.d	r2,r10[0]
8000cfa0:	f0 e3 00 00 	st.d	r8[0],r2
8000cfa4:	c1 08       	rjmp	8000cfc4 <get_arg+0x300>
8000cfa6:	6c 0a       	ld.w	r10,r6[0x0]
8000cfa8:	f4 cc ff f8 	sub	r12,r10,-8
8000cfac:	8d 0c       	st.w	r6[0x0],r12
8000cfae:	f4 e2 00 00 	ld.d	r2,r10[0]
8000cfb2:	f0 e3 00 00 	st.d	r8[0],r2
8000cfb6:	c0 78       	rjmp	8000cfc4 <get_arg+0x300>
8000cfb8:	6c 0a       	ld.w	r10,r6[0x0]
8000cfba:	f4 cc ff fc 	sub	r12,r10,-4
8000cfbe:	8d 0c       	st.w	r6[0x0],r12
8000cfc0:	74 0a       	ld.w	r10,r10[0x0]
8000cfc2:	91 0a       	st.w	r8[0x0],r10
8000cfc4:	2f f5       	sub	r5,-1
8000cfc6:	2f 88       	sub	r8,-8
8000cfc8:	2f c1       	sub	r1,-4
8000cfca:	12 35       	cp.w	r5,r9
8000cfcc:	fe 9a ff d6 	brle	8000cf78 <get_arg+0x2b4>
8000cfd0:	1c 93       	mov	r3,lr
8000cfd2:	40 52       	lddsp	r2,sp[0x14]
8000cfd4:	40 6e       	lddsp	lr,sp[0x18]
8000cfd6:	85 05       	st.w	r2[0x0],r5
8000cfd8:	9d 0b       	st.w	lr[0x0],r11
8000cfda:	40 4b       	lddsp	r11,sp[0x10]
8000cfdc:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000cfe0:	2f 8d       	sub	sp,-32
8000cfe2:	d8 32       	popm	r0-r7,pc
8000cfe4:	80 00       	ld.sh	r0,r0[0x0]
8000cfe6:	cc 3e       	rcall	8000cd6c <get_arg+0xa8>

8000cfe8 <__sprint_r>:
8000cfe8:	d4 21       	pushm	r4-r7,lr
8000cfea:	14 97       	mov	r7,r10
8000cfec:	74 28       	ld.w	r8,r10[0x8]
8000cfee:	58 08       	cp.w	r8,0
8000cff0:	c0 41       	brne	8000cff8 <__sprint_r+0x10>
8000cff2:	95 18       	st.w	r10[0x4],r8
8000cff4:	10 9c       	mov	r12,r8
8000cff6:	d8 22       	popm	r4-r7,pc
8000cff8:	f0 1f 00 03 	mcall	8000d004 <__sprint_r+0x1c>
8000cffc:	30 08       	mov	r8,0
8000cffe:	8f 18       	st.w	r7[0x4],r8
8000d000:	8f 28       	st.w	r7[0x8],r8
8000d002:	d8 22       	popm	r4-r7,pc
8000d004:	80 01       	ld.sh	r1,r0[0x0]
8000d006:	03 14       	ld.sh	r4,r1++

8000d008 <_vfprintf_r>:
8000d008:	d4 31       	pushm	r0-r7,lr
8000d00a:	fa cd 06 bc 	sub	sp,sp,1724
8000d00e:	51 09       	stdsp	sp[0x40],r9
8000d010:	16 91       	mov	r1,r11
8000d012:	14 97       	mov	r7,r10
8000d014:	18 95       	mov	r5,r12
8000d016:	f0 1f 00 56 	mcall	8000d16c <_vfprintf_r+0x164>
8000d01a:	78 0c       	ld.w	r12,r12[0x0]
8000d01c:	50 cc       	stdsp	sp[0x30],r12
8000d01e:	58 05       	cp.w	r5,0
8000d020:	c0 70       	breq	8000d02e <_vfprintf_r+0x26>
8000d022:	6a 68       	ld.w	r8,r5[0x18]
8000d024:	58 08       	cp.w	r8,0
8000d026:	c0 41       	brne	8000d02e <_vfprintf_r+0x26>
8000d028:	0a 9c       	mov	r12,r5
8000d02a:	f0 1f 00 52 	mcall	8000d170 <_vfprintf_r+0x168>
8000d02e:	4d 28       	lddpc	r8,8000d174 <_vfprintf_r+0x16c>
8000d030:	10 31       	cp.w	r1,r8
8000d032:	c0 31       	brne	8000d038 <_vfprintf_r+0x30>
8000d034:	6a 01       	ld.w	r1,r5[0x0]
8000d036:	c0 a8       	rjmp	8000d04a <_vfprintf_r+0x42>
8000d038:	4d 08       	lddpc	r8,8000d178 <_vfprintf_r+0x170>
8000d03a:	10 31       	cp.w	r1,r8
8000d03c:	c0 31       	brne	8000d042 <_vfprintf_r+0x3a>
8000d03e:	6a 11       	ld.w	r1,r5[0x4]
8000d040:	c0 58       	rjmp	8000d04a <_vfprintf_r+0x42>
8000d042:	4c f8       	lddpc	r8,8000d17c <_vfprintf_r+0x174>
8000d044:	10 31       	cp.w	r1,r8
8000d046:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000d04a:	82 68       	ld.sh	r8,r1[0xc]
8000d04c:	ed b8 00 03 	bld	r8,0x3
8000d050:	c0 41       	brne	8000d058 <_vfprintf_r+0x50>
8000d052:	62 48       	ld.w	r8,r1[0x10]
8000d054:	58 08       	cp.w	r8,0
8000d056:	c0 71       	brne	8000d064 <_vfprintf_r+0x5c>
8000d058:	02 9b       	mov	r11,r1
8000d05a:	0a 9c       	mov	r12,r5
8000d05c:	f0 1f 00 49 	mcall	8000d180 <_vfprintf_r+0x178>
8000d060:	e0 81 0f 99 	brne	8000ef92 <_vfprintf_r+0x1f8a>
8000d064:	82 68       	ld.sh	r8,r1[0xc]
8000d066:	10 99       	mov	r9,r8
8000d068:	e2 19 00 1a 	andl	r9,0x1a,COH
8000d06c:	58 a9       	cp.w	r9,10
8000d06e:	c3 d1       	brne	8000d0e8 <_vfprintf_r+0xe0>
8000d070:	82 79       	ld.sh	r9,r1[0xe]
8000d072:	30 0a       	mov	r10,0
8000d074:	f4 09 19 00 	cp.h	r9,r10
8000d078:	c3 85       	brlt	8000d0e8 <_vfprintf_r+0xe0>
8000d07a:	a1 d8       	cbr	r8,0x1
8000d07c:	fb 58 05 d0 	st.h	sp[1488],r8
8000d080:	62 88       	ld.w	r8,r1[0x20]
8000d082:	fb 48 05 e4 	st.w	sp[1508],r8
8000d086:	62 a8       	ld.w	r8,r1[0x28]
8000d088:	fb 48 05 ec 	st.w	sp[1516],r8
8000d08c:	fa c8 ff bc 	sub	r8,sp,-68
8000d090:	fb 48 05 d4 	st.w	sp[1492],r8
8000d094:	fb 48 05 c4 	st.w	sp[1476],r8
8000d098:	e0 68 04 00 	mov	r8,1024
8000d09c:	fb 48 05 d8 	st.w	sp[1496],r8
8000d0a0:	fb 48 05 cc 	st.w	sp[1484],r8
8000d0a4:	30 08       	mov	r8,0
8000d0a6:	fb 59 05 d2 	st.h	sp[1490],r9
8000d0aa:	0e 9a       	mov	r10,r7
8000d0ac:	41 09       	lddsp	r9,sp[0x40]
8000d0ae:	fa c7 fa 3c 	sub	r7,sp,-1476
8000d0b2:	fb 48 05 dc 	st.w	sp[1500],r8
8000d0b6:	0a 9c       	mov	r12,r5
8000d0b8:	0e 9b       	mov	r11,r7
8000d0ba:	f0 1f 00 33 	mcall	8000d184 <_vfprintf_r+0x17c>
8000d0be:	50 bc       	stdsp	sp[0x2c],r12
8000d0c0:	c0 95       	brlt	8000d0d2 <_vfprintf_r+0xca>
8000d0c2:	0e 9b       	mov	r11,r7
8000d0c4:	0a 9c       	mov	r12,r5
8000d0c6:	f0 1f 00 31 	mcall	8000d188 <_vfprintf_r+0x180>
8000d0ca:	40 be       	lddsp	lr,sp[0x2c]
8000d0cc:	f9 be 01 ff 	movne	lr,-1
8000d0d0:	50 be       	stdsp	sp[0x2c],lr
8000d0d2:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000d0d6:	ed b8 00 06 	bld	r8,0x6
8000d0da:	e0 81 0f 5e 	brne	8000ef96 <_vfprintf_r+0x1f8e>
8000d0de:	82 68       	ld.sh	r8,r1[0xc]
8000d0e0:	a7 a8       	sbr	r8,0x6
8000d0e2:	a2 68       	st.h	r1[0xc],r8
8000d0e4:	e0 8f 0f 59 	bral	8000ef96 <_vfprintf_r+0x1f8e>
8000d0e8:	30 08       	mov	r8,0
8000d0ea:	fb 48 06 b4 	st.w	sp[1716],r8
8000d0ee:	fb 48 06 90 	st.w	sp[1680],r8
8000d0f2:	fb 48 06 8c 	st.w	sp[1676],r8
8000d0f6:	fb 48 06 b0 	st.w	sp[1712],r8
8000d0fa:	30 08       	mov	r8,0
8000d0fc:	30 09       	mov	r9,0
8000d0fe:	50 a7       	stdsp	sp[0x28],r7
8000d100:	50 78       	stdsp	sp[0x1c],r8
8000d102:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d106:	3f f8       	mov	r8,-1
8000d108:	50 59       	stdsp	sp[0x14],r9
8000d10a:	fb 43 06 88 	st.w	sp[1672],r3
8000d10e:	fb 48 05 44 	st.w	sp[1348],r8
8000d112:	12 9c       	mov	r12,r9
8000d114:	50 69       	stdsp	sp[0x18],r9
8000d116:	50 d9       	stdsp	sp[0x34],r9
8000d118:	50 e9       	stdsp	sp[0x38],r9
8000d11a:	50 b9       	stdsp	sp[0x2c],r9
8000d11c:	12 97       	mov	r7,r9
8000d11e:	0a 94       	mov	r4,r5
8000d120:	40 a2       	lddsp	r2,sp[0x28]
8000d122:	32 5a       	mov	r10,37
8000d124:	30 08       	mov	r8,0
8000d126:	c0 28       	rjmp	8000d12a <_vfprintf_r+0x122>
8000d128:	2f f2       	sub	r2,-1
8000d12a:	05 89       	ld.ub	r9,r2[0x0]
8000d12c:	f0 09 18 00 	cp.b	r9,r8
8000d130:	5f 1b       	srne	r11
8000d132:	f4 09 18 00 	cp.b	r9,r10
8000d136:	5f 19       	srne	r9
8000d138:	f3 eb 00 0b 	and	r11,r9,r11
8000d13c:	f0 0b 18 00 	cp.b	r11,r8
8000d140:	cf 41       	brne	8000d128 <_vfprintf_r+0x120>
8000d142:	40 ab       	lddsp	r11,sp[0x28]
8000d144:	e4 0b 01 06 	sub	r6,r2,r11
8000d148:	c2 f0       	breq	8000d1a6 <_vfprintf_r+0x19e>
8000d14a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000d14e:	0c 08       	add	r8,r6
8000d150:	87 0b       	st.w	r3[0x0],r11
8000d152:	fb 48 06 90 	st.w	sp[1680],r8
8000d156:	87 16       	st.w	r3[0x4],r6
8000d158:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000d15c:	2f f8       	sub	r8,-1
8000d15e:	fb 48 06 8c 	st.w	sp[1676],r8
8000d162:	58 78       	cp.w	r8,7
8000d164:	e0 89 00 14 	brgt	8000d18c <_vfprintf_r+0x184>
8000d168:	2f 83       	sub	r3,-8
8000d16a:	c1 b8       	rjmp	8000d1a0 <_vfprintf_r+0x198>
8000d16c:	80 01       	ld.sh	r1,r0[0x0]
8000d16e:	06 2c       	rsub	r12,r3
8000d170:	80 01       	ld.sh	r1,r0[0x0]
8000d172:	00 1c       	sub	r12,r0
8000d174:	80 01       	ld.sh	r1,r0[0x0]
8000d176:	29 3c       	sub	r12,-109
8000d178:	80 01       	ld.sh	r1,r0[0x0]
8000d17a:	29 5c       	sub	r12,-107
8000d17c:	80 01       	ld.sh	r1,r0[0x0]
8000d17e:	29 7c       	sub	r12,-105
8000d180:	80 00       	ld.sh	r0,r0[0x0]
8000d182:	ef a4 80 00 	mvcr.w	cp4,r4,cr0
8000d186:	d0 08       	*unknown*
8000d188:	80 00       	ld.sh	r0,r0[0x0]
8000d18a:	fe 40 fa ca 	cp.w	r0,-66870
8000d18e:	f9 78 02 9b 	stcond	r12[667],r8
8000d192:	08 9c       	mov	r12,r4
8000d194:	f0 1f 00 71 	mcall	8000d358 <_vfprintf_r+0x350>
8000d198:	e0 81 0e f9 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000d19c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000d1a0:	40 ba       	lddsp	r10,sp[0x2c]
8000d1a2:	0c 0a       	add	r10,r6
8000d1a4:	50 ba       	stdsp	sp[0x2c],r10
8000d1a6:	05 89       	ld.ub	r9,r2[0x0]
8000d1a8:	30 08       	mov	r8,0
8000d1aa:	f0 09 18 00 	cp.b	r9,r8
8000d1ae:	e0 80 0e dd 	breq	8000ef68 <_vfprintf_r+0x1f60>
8000d1b2:	30 09       	mov	r9,0
8000d1b4:	fb 68 06 bb 	st.b	sp[1723],r8
8000d1b8:	0e 96       	mov	r6,r7
8000d1ba:	e4 c8 ff ff 	sub	r8,r2,-1
8000d1be:	3f fe       	mov	lr,-1
8000d1c0:	50 93       	stdsp	sp[0x24],r3
8000d1c2:	50 41       	stdsp	sp[0x10],r1
8000d1c4:	0e 93       	mov	r3,r7
8000d1c6:	04 91       	mov	r1,r2
8000d1c8:	50 89       	stdsp	sp[0x20],r9
8000d1ca:	50 a8       	stdsp	sp[0x28],r8
8000d1cc:	50 2e       	stdsp	sp[0x8],lr
8000d1ce:	50 39       	stdsp	sp[0xc],r9
8000d1d0:	12 95       	mov	r5,r9
8000d1d2:	12 90       	mov	r0,r9
8000d1d4:	10 97       	mov	r7,r8
8000d1d6:	08 92       	mov	r2,r4
8000d1d8:	c0 78       	rjmp	8000d1e6 <_vfprintf_r+0x1de>
8000d1da:	3f fc       	mov	r12,-1
8000d1dc:	08 97       	mov	r7,r4
8000d1de:	50 2c       	stdsp	sp[0x8],r12
8000d1e0:	c0 38       	rjmp	8000d1e6 <_vfprintf_r+0x1de>
8000d1e2:	30 0b       	mov	r11,0
8000d1e4:	50 3b       	stdsp	sp[0xc],r11
8000d1e6:	0f 38       	ld.ub	r8,r7++
8000d1e8:	c0 28       	rjmp	8000d1ec <_vfprintf_r+0x1e4>
8000d1ea:	12 90       	mov	r0,r9
8000d1ec:	f0 c9 00 20 	sub	r9,r8,32
8000d1f0:	e0 49 00 58 	cp.w	r9,88
8000d1f4:	e0 8b 0a 4d 	brhi	8000e68e <_vfprintf_r+0x1686>
8000d1f8:	4d 9a       	lddpc	r10,8000d35c <_vfprintf_r+0x354>
8000d1fa:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000d1fe:	50 a7       	stdsp	sp[0x28],r7
8000d200:	50 80       	stdsp	sp[0x20],r0
8000d202:	0c 97       	mov	r7,r6
8000d204:	04 94       	mov	r4,r2
8000d206:	06 96       	mov	r6,r3
8000d208:	02 92       	mov	r2,r1
8000d20a:	4d 69       	lddpc	r9,8000d360 <_vfprintf_r+0x358>
8000d20c:	40 93       	lddsp	r3,sp[0x24]
8000d20e:	10 90       	mov	r0,r8
8000d210:	40 41       	lddsp	r1,sp[0x10]
8000d212:	50 d9       	stdsp	sp[0x34],r9
8000d214:	e0 8f 08 aa 	bral	8000e368 <_vfprintf_r+0x1360>
8000d218:	30 08       	mov	r8,0
8000d21a:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000d21e:	f0 09 18 00 	cp.b	r9,r8
8000d222:	ce 21       	brne	8000d1e6 <_vfprintf_r+0x1de>
8000d224:	32 08       	mov	r8,32
8000d226:	c6 e8       	rjmp	8000d302 <_vfprintf_r+0x2fa>
8000d228:	a1 a5       	sbr	r5,0x0
8000d22a:	cd eb       	rjmp	8000d1e6 <_vfprintf_r+0x1de>
8000d22c:	0f 89       	ld.ub	r9,r7[0x0]
8000d22e:	f2 c8 00 30 	sub	r8,r9,48
8000d232:	58 98       	cp.w	r8,9
8000d234:	e0 8b 00 1d 	brhi	8000d26e <_vfprintf_r+0x266>
8000d238:	ee c8 ff ff 	sub	r8,r7,-1
8000d23c:	30 0b       	mov	r11,0
8000d23e:	23 09       	sub	r9,48
8000d240:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000d244:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000d248:	11 39       	ld.ub	r9,r8++
8000d24a:	f2 ca 00 30 	sub	r10,r9,48
8000d24e:	58 9a       	cp.w	r10,9
8000d250:	fe 98 ff f7 	brls	8000d23e <_vfprintf_r+0x236>
8000d254:	e0 49 00 24 	cp.w	r9,36
8000d258:	cc 51       	brne	8000d1e2 <_vfprintf_r+0x1da>
8000d25a:	e0 4b 00 20 	cp.w	r11,32
8000d25e:	e0 89 0e 95 	brgt	8000ef88 <_vfprintf_r+0x1f80>
8000d262:	20 1b       	sub	r11,1
8000d264:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000d268:	12 3b       	cp.w	r11,r9
8000d26a:	c0 95       	brlt	8000d27c <_vfprintf_r+0x274>
8000d26c:	c1 08       	rjmp	8000d28c <_vfprintf_r+0x284>
8000d26e:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000d272:	ec ca ff ff 	sub	r10,r6,-1
8000d276:	12 36       	cp.w	r6,r9
8000d278:	c1 f5       	brlt	8000d2b6 <_vfprintf_r+0x2ae>
8000d27a:	c2 68       	rjmp	8000d2c6 <_vfprintf_r+0x2be>
8000d27c:	fa ce f9 44 	sub	lr,sp,-1724
8000d280:	10 97       	mov	r7,r8
8000d282:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
8000d286:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000d28a:	c3 58       	rjmp	8000d2f4 <_vfprintf_r+0x2ec>
8000d28c:	10 97       	mov	r7,r8
8000d28e:	fa c8 f9 50 	sub	r8,sp,-1712
8000d292:	1a d8       	st.w	--sp,r8
8000d294:	fa c8 fa b8 	sub	r8,sp,-1352
8000d298:	1a d8       	st.w	--sp,r8
8000d29a:	fa c8 fb b4 	sub	r8,sp,-1100
8000d29e:	02 9a       	mov	r10,r1
8000d2a0:	1a d8       	st.w	--sp,r8
8000d2a2:	04 9c       	mov	r12,r2
8000d2a4:	fa c8 f9 40 	sub	r8,sp,-1728
8000d2a8:	fa c9 ff b4 	sub	r9,sp,-76
8000d2ac:	f0 1f 00 2e 	mcall	8000d364 <_vfprintf_r+0x35c>
8000d2b0:	2f dd       	sub	sp,-12
8000d2b2:	78 00       	ld.w	r0,r12[0x0]
8000d2b4:	c2 08       	rjmp	8000d2f4 <_vfprintf_r+0x2ec>
8000d2b6:	fa cc f9 44 	sub	r12,sp,-1724
8000d2ba:	14 96       	mov	r6,r10
8000d2bc:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000d2c0:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000d2c4:	c1 88       	rjmp	8000d2f4 <_vfprintf_r+0x2ec>
8000d2c6:	41 08       	lddsp	r8,sp[0x40]
8000d2c8:	59 f9       	cp.w	r9,31
8000d2ca:	e0 89 00 11 	brgt	8000d2ec <_vfprintf_r+0x2e4>
8000d2ce:	f0 cb ff fc 	sub	r11,r8,-4
8000d2d2:	51 0b       	stdsp	sp[0x40],r11
8000d2d4:	70 00       	ld.w	r0,r8[0x0]
8000d2d6:	fa cb f9 44 	sub	r11,sp,-1724
8000d2da:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000d2de:	f1 40 fd 88 	st.w	r8[-632],r0
8000d2e2:	2f f9       	sub	r9,-1
8000d2e4:	14 96       	mov	r6,r10
8000d2e6:	fb 49 06 b4 	st.w	sp[1716],r9
8000d2ea:	c0 58       	rjmp	8000d2f4 <_vfprintf_r+0x2ec>
8000d2ec:	70 00       	ld.w	r0,r8[0x0]
8000d2ee:	14 96       	mov	r6,r10
8000d2f0:	2f c8       	sub	r8,-4
8000d2f2:	51 08       	stdsp	sp[0x40],r8
8000d2f4:	58 00       	cp.w	r0,0
8000d2f6:	fe 94 ff 78 	brge	8000d1e6 <_vfprintf_r+0x1de>
8000d2fa:	5c 30       	neg	r0
8000d2fc:	a3 a5       	sbr	r5,0x2
8000d2fe:	c7 4b       	rjmp	8000d1e6 <_vfprintf_r+0x1de>
8000d300:	32 b8       	mov	r8,43
8000d302:	fb 68 06 bb 	st.b	sp[1723],r8
8000d306:	c7 0b       	rjmp	8000d1e6 <_vfprintf_r+0x1de>
8000d308:	0f 38       	ld.ub	r8,r7++
8000d30a:	e0 48 00 2a 	cp.w	r8,42
8000d30e:	c0 30       	breq	8000d314 <_vfprintf_r+0x30c>
8000d310:	30 09       	mov	r9,0
8000d312:	c8 08       	rjmp	8000d412 <_vfprintf_r+0x40a>
8000d314:	0f 88       	ld.ub	r8,r7[0x0]
8000d316:	f0 c9 00 30 	sub	r9,r8,48
8000d31a:	58 99       	cp.w	r9,9
8000d31c:	e0 8b 00 26 	brhi	8000d368 <_vfprintf_r+0x360>
8000d320:	ee c4 ff ff 	sub	r4,r7,-1
8000d324:	30 0b       	mov	r11,0
8000d326:	23 08       	sub	r8,48
8000d328:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000d32c:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000d330:	09 38       	ld.ub	r8,r4++
8000d332:	f0 c9 00 30 	sub	r9,r8,48
8000d336:	58 99       	cp.w	r9,9
8000d338:	fe 98 ff f7 	brls	8000d326 <_vfprintf_r+0x31e>
8000d33c:	e0 48 00 24 	cp.w	r8,36
8000d340:	fe 91 ff 51 	brne	8000d1e2 <_vfprintf_r+0x1da>
8000d344:	e0 4b 00 20 	cp.w	r11,32
8000d348:	e0 89 0e 20 	brgt	8000ef88 <_vfprintf_r+0x1f80>
8000d34c:	20 1b       	sub	r11,1
8000d34e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d352:	10 3b       	cp.w	r11,r8
8000d354:	c1 15       	brlt	8000d376 <_vfprintf_r+0x36e>
8000d356:	c1 88       	rjmp	8000d386 <_vfprintf_r+0x37e>
8000d358:	80 00       	ld.sh	r0,r0[0x0]
8000d35a:	cf e8       	rjmp	8000d556 <_vfprintf_r+0x54e>
8000d35c:	80 01       	ld.sh	r1,r0[0x0]
8000d35e:	25 94       	sub	r4,89
8000d360:	80 01       	ld.sh	r1,r0[0x0]
8000d362:	27 d0       	sub	r0,125
8000d364:	80 00       	ld.sh	r0,r0[0x0]
8000d366:	cc c4       	brge	8000d2fe <_vfprintf_r+0x2f6>
8000d368:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000d36c:	ec c9 ff ff 	sub	r9,r6,-1
8000d370:	14 36       	cp.w	r6,r10
8000d372:	c1 f5       	brlt	8000d3b0 <_vfprintf_r+0x3a8>
8000d374:	c2 88       	rjmp	8000d3c4 <_vfprintf_r+0x3bc>
8000d376:	fa ca f9 44 	sub	r10,sp,-1724
8000d37a:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000d37e:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000d382:	50 2b       	stdsp	sp[0x8],r11
8000d384:	c3 c8       	rjmp	8000d3fc <_vfprintf_r+0x3f4>
8000d386:	fa c8 f9 50 	sub	r8,sp,-1712
8000d38a:	1a d8       	st.w	--sp,r8
8000d38c:	fa c8 fa b8 	sub	r8,sp,-1352
8000d390:	1a d8       	st.w	--sp,r8
8000d392:	fa c8 fb b4 	sub	r8,sp,-1100
8000d396:	02 9a       	mov	r10,r1
8000d398:	1a d8       	st.w	--sp,r8
8000d39a:	04 9c       	mov	r12,r2
8000d39c:	fa c8 f9 40 	sub	r8,sp,-1728
8000d3a0:	fa c9 ff b4 	sub	r9,sp,-76
8000d3a4:	f0 1f 01 9e 	mcall	8000da1c <_vfprintf_r+0xa14>
8000d3a8:	2f dd       	sub	sp,-12
8000d3aa:	78 0c       	ld.w	r12,r12[0x0]
8000d3ac:	50 2c       	stdsp	sp[0x8],r12
8000d3ae:	c2 78       	rjmp	8000d3fc <_vfprintf_r+0x3f4>
8000d3b0:	12 96       	mov	r6,r9
8000d3b2:	0e 94       	mov	r4,r7
8000d3b4:	fa c9 f9 44 	sub	r9,sp,-1724
8000d3b8:	f2 03 00 38 	add	r8,r9,r3<<0x3
8000d3bc:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000d3c0:	50 28       	stdsp	sp[0x8],r8
8000d3c2:	c1 d8       	rjmp	8000d3fc <_vfprintf_r+0x3f4>
8000d3c4:	41 08       	lddsp	r8,sp[0x40]
8000d3c6:	59 fa       	cp.w	r10,31
8000d3c8:	e0 89 00 14 	brgt	8000d3f0 <_vfprintf_r+0x3e8>
8000d3cc:	f0 cb ff fc 	sub	r11,r8,-4
8000d3d0:	70 08       	ld.w	r8,r8[0x0]
8000d3d2:	51 0b       	stdsp	sp[0x40],r11
8000d3d4:	50 28       	stdsp	sp[0x8],r8
8000d3d6:	fa c6 f9 44 	sub	r6,sp,-1724
8000d3da:	40 2e       	lddsp	lr,sp[0x8]
8000d3dc:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000d3e0:	f1 4e fd 88 	st.w	r8[-632],lr
8000d3e4:	2f fa       	sub	r10,-1
8000d3e6:	0e 94       	mov	r4,r7
8000d3e8:	fb 4a 06 b4 	st.w	sp[1716],r10
8000d3ec:	12 96       	mov	r6,r9
8000d3ee:	c0 78       	rjmp	8000d3fc <_vfprintf_r+0x3f4>
8000d3f0:	70 0c       	ld.w	r12,r8[0x0]
8000d3f2:	0e 94       	mov	r4,r7
8000d3f4:	2f c8       	sub	r8,-4
8000d3f6:	50 2c       	stdsp	sp[0x8],r12
8000d3f8:	12 96       	mov	r6,r9
8000d3fa:	51 08       	stdsp	sp[0x40],r8
8000d3fc:	40 2b       	lddsp	r11,sp[0x8]
8000d3fe:	58 0b       	cp.w	r11,0
8000d400:	fe 95 fe ed 	brlt	8000d1da <_vfprintf_r+0x1d2>
8000d404:	08 97       	mov	r7,r4
8000d406:	cf 0a       	rjmp	8000d1e6 <_vfprintf_r+0x1de>
8000d408:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000d40c:	0f 38       	ld.ub	r8,r7++
8000d40e:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000d412:	f0 ca 00 30 	sub	r10,r8,48
8000d416:	58 9a       	cp.w	r10,9
8000d418:	fe 98 ff f8 	brls	8000d408 <_vfprintf_r+0x400>
8000d41c:	3f fa       	mov	r10,-1
8000d41e:	f2 0a 0c 49 	max	r9,r9,r10
8000d422:	50 29       	stdsp	sp[0x8],r9
8000d424:	ce 4a       	rjmp	8000d1ec <_vfprintf_r+0x1e4>
8000d426:	a7 b5       	sbr	r5,0x7
8000d428:	cd fa       	rjmp	8000d1e6 <_vfprintf_r+0x1de>
8000d42a:	30 09       	mov	r9,0
8000d42c:	23 08       	sub	r8,48
8000d42e:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000d432:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000d436:	0f 38       	ld.ub	r8,r7++
8000d438:	f0 ca 00 30 	sub	r10,r8,48
8000d43c:	58 9a       	cp.w	r10,9
8000d43e:	fe 98 ff f7 	brls	8000d42c <_vfprintf_r+0x424>
8000d442:	e0 48 00 24 	cp.w	r8,36
8000d446:	fe 91 fe d2 	brne	8000d1ea <_vfprintf_r+0x1e2>
8000d44a:	e0 49 00 20 	cp.w	r9,32
8000d44e:	e0 89 0d 9d 	brgt	8000ef88 <_vfprintf_r+0x1f80>
8000d452:	f2 c3 00 01 	sub	r3,r9,1
8000d456:	30 19       	mov	r9,1
8000d458:	50 39       	stdsp	sp[0xc],r9
8000d45a:	cc 6a       	rjmp	8000d1e6 <_vfprintf_r+0x1de>
8000d45c:	a3 b5       	sbr	r5,0x3
8000d45e:	cc 4a       	rjmp	8000d1e6 <_vfprintf_r+0x1de>
8000d460:	a7 a5       	sbr	r5,0x6
8000d462:	cc 2a       	rjmp	8000d1e6 <_vfprintf_r+0x1de>
8000d464:	0a 98       	mov	r8,r5
8000d466:	a5 b5       	sbr	r5,0x5
8000d468:	a5 a8       	sbr	r8,0x4
8000d46a:	0f 89       	ld.ub	r9,r7[0x0]
8000d46c:	36 ce       	mov	lr,108
8000d46e:	fc 09 18 00 	cp.b	r9,lr
8000d472:	f7 b7 00 ff 	subeq	r7,-1
8000d476:	f0 05 17 10 	movne	r5,r8
8000d47a:	cb 6a       	rjmp	8000d1e6 <_vfprintf_r+0x1de>
8000d47c:	a5 b5       	sbr	r5,0x5
8000d47e:	cb 4a       	rjmp	8000d1e6 <_vfprintf_r+0x1de>
8000d480:	50 a7       	stdsp	sp[0x28],r7
8000d482:	50 80       	stdsp	sp[0x20],r0
8000d484:	0c 97       	mov	r7,r6
8000d486:	10 90       	mov	r0,r8
8000d488:	06 96       	mov	r6,r3
8000d48a:	04 94       	mov	r4,r2
8000d48c:	40 93       	lddsp	r3,sp[0x24]
8000d48e:	02 92       	mov	r2,r1
8000d490:	0e 99       	mov	r9,r7
8000d492:	40 41       	lddsp	r1,sp[0x10]
8000d494:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d498:	40 3c       	lddsp	r12,sp[0xc]
8000d49a:	58 0c       	cp.w	r12,0
8000d49c:	c1 d0       	breq	8000d4d6 <_vfprintf_r+0x4ce>
8000d49e:	10 36       	cp.w	r6,r8
8000d4a0:	c0 64       	brge	8000d4ac <_vfprintf_r+0x4a4>
8000d4a2:	fa cb f9 44 	sub	r11,sp,-1724
8000d4a6:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d4aa:	c1 d8       	rjmp	8000d4e4 <_vfprintf_r+0x4dc>
8000d4ac:	fa c8 f9 50 	sub	r8,sp,-1712
8000d4b0:	1a d8       	st.w	--sp,r8
8000d4b2:	fa c8 fa b8 	sub	r8,sp,-1352
8000d4b6:	1a d8       	st.w	--sp,r8
8000d4b8:	fa c8 fb b4 	sub	r8,sp,-1100
8000d4bc:	1a d8       	st.w	--sp,r8
8000d4be:	fa c8 f9 40 	sub	r8,sp,-1728
8000d4c2:	fa c9 ff b4 	sub	r9,sp,-76
8000d4c6:	04 9a       	mov	r10,r2
8000d4c8:	0c 9b       	mov	r11,r6
8000d4ca:	08 9c       	mov	r12,r4
8000d4cc:	f0 1f 01 54 	mcall	8000da1c <_vfprintf_r+0xa14>
8000d4d0:	2f dd       	sub	sp,-12
8000d4d2:	19 b8       	ld.ub	r8,r12[0x3]
8000d4d4:	c2 28       	rjmp	8000d518 <_vfprintf_r+0x510>
8000d4d6:	2f f7       	sub	r7,-1
8000d4d8:	10 39       	cp.w	r9,r8
8000d4da:	c0 84       	brge	8000d4ea <_vfprintf_r+0x4e2>
8000d4dc:	fa ca f9 44 	sub	r10,sp,-1724
8000d4e0:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000d4e4:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000d4e8:	c1 88       	rjmp	8000d518 <_vfprintf_r+0x510>
8000d4ea:	41 09       	lddsp	r9,sp[0x40]
8000d4ec:	59 f8       	cp.w	r8,31
8000d4ee:	e0 89 00 12 	brgt	8000d512 <_vfprintf_r+0x50a>
8000d4f2:	f2 ca ff fc 	sub	r10,r9,-4
8000d4f6:	51 0a       	stdsp	sp[0x40],r10
8000d4f8:	72 09       	ld.w	r9,r9[0x0]
8000d4fa:	fa c6 f9 44 	sub	r6,sp,-1724
8000d4fe:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000d502:	2f f8       	sub	r8,-1
8000d504:	f5 49 fd 88 	st.w	r10[-632],r9
8000d508:	fb 48 06 b4 	st.w	sp[1716],r8
8000d50c:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000d510:	c0 48       	rjmp	8000d518 <_vfprintf_r+0x510>
8000d512:	13 b8       	ld.ub	r8,r9[0x3]
8000d514:	2f c9       	sub	r9,-4
8000d516:	51 09       	stdsp	sp[0x40],r9
8000d518:	fb 68 06 60 	st.b	sp[1632],r8
8000d51c:	30 0e       	mov	lr,0
8000d51e:	30 08       	mov	r8,0
8000d520:	30 12       	mov	r2,1
8000d522:	fb 68 06 bb 	st.b	sp[1723],r8
8000d526:	50 2e       	stdsp	sp[0x8],lr
8000d528:	e0 8f 08 c5 	bral	8000e6b2 <_vfprintf_r+0x16aa>
8000d52c:	50 a7       	stdsp	sp[0x28],r7
8000d52e:	50 80       	stdsp	sp[0x20],r0
8000d530:	0c 97       	mov	r7,r6
8000d532:	04 94       	mov	r4,r2
8000d534:	06 96       	mov	r6,r3
8000d536:	02 92       	mov	r2,r1
8000d538:	40 93       	lddsp	r3,sp[0x24]
8000d53a:	10 90       	mov	r0,r8
8000d53c:	40 41       	lddsp	r1,sp[0x10]
8000d53e:	a5 a5       	sbr	r5,0x4
8000d540:	c0 a8       	rjmp	8000d554 <_vfprintf_r+0x54c>
8000d542:	50 a7       	stdsp	sp[0x28],r7
8000d544:	50 80       	stdsp	sp[0x20],r0
8000d546:	0c 97       	mov	r7,r6
8000d548:	04 94       	mov	r4,r2
8000d54a:	06 96       	mov	r6,r3
8000d54c:	02 92       	mov	r2,r1
8000d54e:	40 93       	lddsp	r3,sp[0x24]
8000d550:	10 90       	mov	r0,r8
8000d552:	40 41       	lddsp	r1,sp[0x10]
8000d554:	ed b5 00 05 	bld	r5,0x5
8000d558:	c5 11       	brne	8000d5fa <_vfprintf_r+0x5f2>
8000d55a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d55e:	40 3c       	lddsp	r12,sp[0xc]
8000d560:	58 0c       	cp.w	r12,0
8000d562:	c1 e0       	breq	8000d59e <_vfprintf_r+0x596>
8000d564:	10 36       	cp.w	r6,r8
8000d566:	c0 64       	brge	8000d572 <_vfprintf_r+0x56a>
8000d568:	fa cb f9 44 	sub	r11,sp,-1724
8000d56c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d570:	c2 08       	rjmp	8000d5b0 <_vfprintf_r+0x5a8>
8000d572:	fa c8 f9 50 	sub	r8,sp,-1712
8000d576:	1a d8       	st.w	--sp,r8
8000d578:	fa c8 fa b8 	sub	r8,sp,-1352
8000d57c:	0c 9b       	mov	r11,r6
8000d57e:	1a d8       	st.w	--sp,r8
8000d580:	fa c8 fb b4 	sub	r8,sp,-1100
8000d584:	1a d8       	st.w	--sp,r8
8000d586:	fa c9 ff b4 	sub	r9,sp,-76
8000d58a:	fa c8 f9 40 	sub	r8,sp,-1728
8000d58e:	04 9a       	mov	r10,r2
8000d590:	08 9c       	mov	r12,r4
8000d592:	f0 1f 01 23 	mcall	8000da1c <_vfprintf_r+0xa14>
8000d596:	2f dd       	sub	sp,-12
8000d598:	78 1b       	ld.w	r11,r12[0x4]
8000d59a:	78 09       	ld.w	r9,r12[0x0]
8000d59c:	c2 b8       	rjmp	8000d5f2 <_vfprintf_r+0x5ea>
8000d59e:	ee ca ff ff 	sub	r10,r7,-1
8000d5a2:	10 37       	cp.w	r7,r8
8000d5a4:	c0 b4       	brge	8000d5ba <_vfprintf_r+0x5b2>
8000d5a6:	fa c9 f9 44 	sub	r9,sp,-1724
8000d5aa:	14 97       	mov	r7,r10
8000d5ac:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d5b0:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000d5b4:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000d5b8:	c1 d8       	rjmp	8000d5f2 <_vfprintf_r+0x5ea>
8000d5ba:	41 09       	lddsp	r9,sp[0x40]
8000d5bc:	59 f8       	cp.w	r8,31
8000d5be:	e0 89 00 14 	brgt	8000d5e6 <_vfprintf_r+0x5de>
8000d5c2:	f2 cb ff f8 	sub	r11,r9,-8
8000d5c6:	51 0b       	stdsp	sp[0x40],r11
8000d5c8:	fa c6 f9 44 	sub	r6,sp,-1724
8000d5cc:	72 1b       	ld.w	r11,r9[0x4]
8000d5ce:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000d5d2:	72 09       	ld.w	r9,r9[0x0]
8000d5d4:	f9 4b fd 8c 	st.w	r12[-628],r11
8000d5d8:	f9 49 fd 88 	st.w	r12[-632],r9
8000d5dc:	2f f8       	sub	r8,-1
8000d5de:	14 97       	mov	r7,r10
8000d5e0:	fb 48 06 b4 	st.w	sp[1716],r8
8000d5e4:	c0 78       	rjmp	8000d5f2 <_vfprintf_r+0x5ea>
8000d5e6:	f2 c8 ff f8 	sub	r8,r9,-8
8000d5ea:	72 1b       	ld.w	r11,r9[0x4]
8000d5ec:	14 97       	mov	r7,r10
8000d5ee:	51 08       	stdsp	sp[0x40],r8
8000d5f0:	72 09       	ld.w	r9,r9[0x0]
8000d5f2:	16 98       	mov	r8,r11
8000d5f4:	fa e9 00 00 	st.d	sp[0],r8
8000d5f8:	ca e8       	rjmp	8000d754 <_vfprintf_r+0x74c>
8000d5fa:	ed b5 00 04 	bld	r5,0x4
8000d5fe:	c1 71       	brne	8000d62c <_vfprintf_r+0x624>
8000d600:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d604:	40 3e       	lddsp	lr,sp[0xc]
8000d606:	58 0e       	cp.w	lr,0
8000d608:	c0 80       	breq	8000d618 <_vfprintf_r+0x610>
8000d60a:	10 36       	cp.w	r6,r8
8000d60c:	c6 94       	brge	8000d6de <_vfprintf_r+0x6d6>
8000d60e:	fa cc f9 44 	sub	r12,sp,-1724
8000d612:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000d616:	c8 28       	rjmp	8000d71a <_vfprintf_r+0x712>
8000d618:	ee ca ff ff 	sub	r10,r7,-1
8000d61c:	10 37       	cp.w	r7,r8
8000d61e:	e0 84 00 81 	brge	8000d720 <_vfprintf_r+0x718>
8000d622:	fa cb f9 44 	sub	r11,sp,-1724
8000d626:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d62a:	c7 78       	rjmp	8000d718 <_vfprintf_r+0x710>
8000d62c:	ed b5 00 06 	bld	r5,0x6
8000d630:	c4 b1       	brne	8000d6c6 <_vfprintf_r+0x6be>
8000d632:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d636:	40 3c       	lddsp	r12,sp[0xc]
8000d638:	58 0c       	cp.w	r12,0
8000d63a:	c1 d0       	breq	8000d674 <_vfprintf_r+0x66c>
8000d63c:	10 36       	cp.w	r6,r8
8000d63e:	c0 64       	brge	8000d64a <_vfprintf_r+0x642>
8000d640:	fa cb f9 44 	sub	r11,sp,-1724
8000d644:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d648:	c1 f8       	rjmp	8000d686 <_vfprintf_r+0x67e>
8000d64a:	fa c8 f9 50 	sub	r8,sp,-1712
8000d64e:	1a d8       	st.w	--sp,r8
8000d650:	fa c8 fa b8 	sub	r8,sp,-1352
8000d654:	1a d8       	st.w	--sp,r8
8000d656:	fa c8 fb b4 	sub	r8,sp,-1100
8000d65a:	1a d8       	st.w	--sp,r8
8000d65c:	fa c8 f9 40 	sub	r8,sp,-1728
8000d660:	fa c9 ff b4 	sub	r9,sp,-76
8000d664:	04 9a       	mov	r10,r2
8000d666:	0c 9b       	mov	r11,r6
8000d668:	08 9c       	mov	r12,r4
8000d66a:	f0 1f 00 ed 	mcall	8000da1c <_vfprintf_r+0xa14>
8000d66e:	2f dd       	sub	sp,-12
8000d670:	98 18       	ld.sh	r8,r12[0x2]
8000d672:	c2 68       	rjmp	8000d6be <_vfprintf_r+0x6b6>
8000d674:	ee ca ff ff 	sub	r10,r7,-1
8000d678:	10 37       	cp.w	r7,r8
8000d67a:	c0 94       	brge	8000d68c <_vfprintf_r+0x684>
8000d67c:	fa c9 f9 44 	sub	r9,sp,-1724
8000d680:	14 97       	mov	r7,r10
8000d682:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d686:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000d68a:	c1 a8       	rjmp	8000d6be <_vfprintf_r+0x6b6>
8000d68c:	41 09       	lddsp	r9,sp[0x40]
8000d68e:	59 f8       	cp.w	r8,31
8000d690:	e0 89 00 13 	brgt	8000d6b6 <_vfprintf_r+0x6ae>
8000d694:	f2 cb ff fc 	sub	r11,r9,-4
8000d698:	51 0b       	stdsp	sp[0x40],r11
8000d69a:	72 09       	ld.w	r9,r9[0x0]
8000d69c:	fa c6 f9 44 	sub	r6,sp,-1724
8000d6a0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000d6a4:	2f f8       	sub	r8,-1
8000d6a6:	f7 49 fd 88 	st.w	r11[-632],r9
8000d6aa:	fb 48 06 b4 	st.w	sp[1716],r8
8000d6ae:	14 97       	mov	r7,r10
8000d6b0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000d6b4:	c0 58       	rjmp	8000d6be <_vfprintf_r+0x6b6>
8000d6b6:	92 18       	ld.sh	r8,r9[0x2]
8000d6b8:	14 97       	mov	r7,r10
8000d6ba:	2f c9       	sub	r9,-4
8000d6bc:	51 09       	stdsp	sp[0x40],r9
8000d6be:	50 18       	stdsp	sp[0x4],r8
8000d6c0:	bf 58       	asr	r8,0x1f
8000d6c2:	50 08       	stdsp	sp[0x0],r8
8000d6c4:	c4 88       	rjmp	8000d754 <_vfprintf_r+0x74c>
8000d6c6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d6ca:	40 3c       	lddsp	r12,sp[0xc]
8000d6cc:	58 0c       	cp.w	r12,0
8000d6ce:	c1 d0       	breq	8000d708 <_vfprintf_r+0x700>
8000d6d0:	10 36       	cp.w	r6,r8
8000d6d2:	c0 64       	brge	8000d6de <_vfprintf_r+0x6d6>
8000d6d4:	fa cb f9 44 	sub	r11,sp,-1724
8000d6d8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d6dc:	c1 f8       	rjmp	8000d71a <_vfprintf_r+0x712>
8000d6de:	fa c8 f9 50 	sub	r8,sp,-1712
8000d6e2:	1a d8       	st.w	--sp,r8
8000d6e4:	fa c8 fa b8 	sub	r8,sp,-1352
8000d6e8:	0c 9b       	mov	r11,r6
8000d6ea:	1a d8       	st.w	--sp,r8
8000d6ec:	fa c8 fb b4 	sub	r8,sp,-1100
8000d6f0:	04 9a       	mov	r10,r2
8000d6f2:	1a d8       	st.w	--sp,r8
8000d6f4:	08 9c       	mov	r12,r4
8000d6f6:	fa c8 f9 40 	sub	r8,sp,-1728
8000d6fa:	fa c9 ff b4 	sub	r9,sp,-76
8000d6fe:	f0 1f 00 c8 	mcall	8000da1c <_vfprintf_r+0xa14>
8000d702:	2f dd       	sub	sp,-12
8000d704:	78 0b       	ld.w	r11,r12[0x0]
8000d706:	c2 48       	rjmp	8000d74e <_vfprintf_r+0x746>
8000d708:	ee ca ff ff 	sub	r10,r7,-1
8000d70c:	10 37       	cp.w	r7,r8
8000d70e:	c0 94       	brge	8000d720 <_vfprintf_r+0x718>
8000d710:	fa c9 f9 44 	sub	r9,sp,-1724
8000d714:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d718:	14 97       	mov	r7,r10
8000d71a:	ec fb fd 88 	ld.w	r11,r6[-632]
8000d71e:	c1 88       	rjmp	8000d74e <_vfprintf_r+0x746>
8000d720:	41 09       	lddsp	r9,sp[0x40]
8000d722:	59 f8       	cp.w	r8,31
8000d724:	e0 89 00 11 	brgt	8000d746 <_vfprintf_r+0x73e>
8000d728:	f2 cb ff fc 	sub	r11,r9,-4
8000d72c:	51 0b       	stdsp	sp[0x40],r11
8000d72e:	fa c6 f9 44 	sub	r6,sp,-1724
8000d732:	72 0b       	ld.w	r11,r9[0x0]
8000d734:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d738:	f3 4b fd 88 	st.w	r9[-632],r11
8000d73c:	2f f8       	sub	r8,-1
8000d73e:	14 97       	mov	r7,r10
8000d740:	fb 48 06 b4 	st.w	sp[1716],r8
8000d744:	c0 58       	rjmp	8000d74e <_vfprintf_r+0x746>
8000d746:	72 0b       	ld.w	r11,r9[0x0]
8000d748:	14 97       	mov	r7,r10
8000d74a:	2f c9       	sub	r9,-4
8000d74c:	51 09       	stdsp	sp[0x40],r9
8000d74e:	50 1b       	stdsp	sp[0x4],r11
8000d750:	bf 5b       	asr	r11,0x1f
8000d752:	50 0b       	stdsp	sp[0x0],r11
8000d754:	fa ea 00 00 	ld.d	r10,sp[0]
8000d758:	58 0a       	cp.w	r10,0
8000d75a:	5c 2b       	cpc	r11
8000d75c:	c0 e4       	brge	8000d778 <_vfprintf_r+0x770>
8000d75e:	30 08       	mov	r8,0
8000d760:	fa ea 00 00 	ld.d	r10,sp[0]
8000d764:	30 09       	mov	r9,0
8000d766:	f0 0a 01 0a 	sub	r10,r8,r10
8000d76a:	f2 0b 01 4b 	sbc	r11,r9,r11
8000d76e:	32 d8       	mov	r8,45
8000d770:	fa eb 00 00 	st.d	sp[0],r10
8000d774:	fb 68 06 bb 	st.b	sp[1723],r8
8000d778:	30 18       	mov	r8,1
8000d77a:	e0 8f 07 12 	bral	8000e59e <_vfprintf_r+0x1596>
8000d77e:	50 a7       	stdsp	sp[0x28],r7
8000d780:	50 80       	stdsp	sp[0x20],r0
8000d782:	0c 97       	mov	r7,r6
8000d784:	04 94       	mov	r4,r2
8000d786:	06 96       	mov	r6,r3
8000d788:	02 92       	mov	r2,r1
8000d78a:	40 93       	lddsp	r3,sp[0x24]
8000d78c:	10 90       	mov	r0,r8
8000d78e:	40 41       	lddsp	r1,sp[0x10]
8000d790:	0e 99       	mov	r9,r7
8000d792:	ed b5 00 03 	bld	r5,0x3
8000d796:	c4 11       	brne	8000d818 <_vfprintf_r+0x810>
8000d798:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d79c:	40 3a       	lddsp	r10,sp[0xc]
8000d79e:	58 0a       	cp.w	r10,0
8000d7a0:	c1 90       	breq	8000d7d2 <_vfprintf_r+0x7ca>
8000d7a2:	10 36       	cp.w	r6,r8
8000d7a4:	c6 45       	brlt	8000d86c <_vfprintf_r+0x864>
8000d7a6:	fa c8 f9 50 	sub	r8,sp,-1712
8000d7aa:	1a d8       	st.w	--sp,r8
8000d7ac:	fa c8 fa b8 	sub	r8,sp,-1352
8000d7b0:	1a d8       	st.w	--sp,r8
8000d7b2:	fa c8 fb b4 	sub	r8,sp,-1100
8000d7b6:	0c 9b       	mov	r11,r6
8000d7b8:	1a d8       	st.w	--sp,r8
8000d7ba:	04 9a       	mov	r10,r2
8000d7bc:	fa c8 f9 40 	sub	r8,sp,-1728
8000d7c0:	fa c9 ff b4 	sub	r9,sp,-76
8000d7c4:	08 9c       	mov	r12,r4
8000d7c6:	f0 1f 00 96 	mcall	8000da1c <_vfprintf_r+0xa14>
8000d7ca:	2f dd       	sub	sp,-12
8000d7cc:	78 16       	ld.w	r6,r12[0x4]
8000d7ce:	50 76       	stdsp	sp[0x1c],r6
8000d7d0:	c4 88       	rjmp	8000d860 <_vfprintf_r+0x858>
8000d7d2:	2f f7       	sub	r7,-1
8000d7d4:	10 39       	cp.w	r9,r8
8000d7d6:	c0 c4       	brge	8000d7ee <_vfprintf_r+0x7e6>
8000d7d8:	fa ce f9 44 	sub	lr,sp,-1724
8000d7dc:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000d7e0:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000d7e4:	50 7c       	stdsp	sp[0x1c],r12
8000d7e6:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000d7ea:	50 56       	stdsp	sp[0x14],r6
8000d7ec:	c6 68       	rjmp	8000d8b8 <_vfprintf_r+0x8b0>
8000d7ee:	41 09       	lddsp	r9,sp[0x40]
8000d7f0:	59 f8       	cp.w	r8,31
8000d7f2:	e0 89 00 10 	brgt	8000d812 <_vfprintf_r+0x80a>
8000d7f6:	f2 ca ff f8 	sub	r10,r9,-8
8000d7fa:	72 1b       	ld.w	r11,r9[0x4]
8000d7fc:	51 0a       	stdsp	sp[0x40],r10
8000d7fe:	72 09       	ld.w	r9,r9[0x0]
8000d800:	fa ca f9 44 	sub	r10,sp,-1724
8000d804:	50 7b       	stdsp	sp[0x1c],r11
8000d806:	50 59       	stdsp	sp[0x14],r9
8000d808:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000d80c:	40 5b       	lddsp	r11,sp[0x14]
8000d80e:	40 7a       	lddsp	r10,sp[0x1c]
8000d810:	c4 78       	rjmp	8000d89e <_vfprintf_r+0x896>
8000d812:	72 18       	ld.w	r8,r9[0x4]
8000d814:	50 78       	stdsp	sp[0x1c],r8
8000d816:	c4 c8       	rjmp	8000d8ae <_vfprintf_r+0x8a6>
8000d818:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d81c:	40 3e       	lddsp	lr,sp[0xc]
8000d81e:	58 0e       	cp.w	lr,0
8000d820:	c2 30       	breq	8000d866 <_vfprintf_r+0x85e>
8000d822:	10 36       	cp.w	r6,r8
8000d824:	c0 94       	brge	8000d836 <_vfprintf_r+0x82e>
8000d826:	fa cc f9 44 	sub	r12,sp,-1724
8000d82a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000d82e:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000d832:	50 7b       	stdsp	sp[0x1c],r11
8000d834:	cd 9b       	rjmp	8000d7e6 <_vfprintf_r+0x7de>
8000d836:	fa c8 f9 50 	sub	r8,sp,-1712
8000d83a:	1a d8       	st.w	--sp,r8
8000d83c:	fa c8 fa b8 	sub	r8,sp,-1352
8000d840:	04 9a       	mov	r10,r2
8000d842:	1a d8       	st.w	--sp,r8
8000d844:	fa c8 fb b4 	sub	r8,sp,-1100
8000d848:	0c 9b       	mov	r11,r6
8000d84a:	1a d8       	st.w	--sp,r8
8000d84c:	08 9c       	mov	r12,r4
8000d84e:	fa c8 f9 40 	sub	r8,sp,-1728
8000d852:	fa c9 ff b4 	sub	r9,sp,-76
8000d856:	f0 1f 00 72 	mcall	8000da1c <_vfprintf_r+0xa14>
8000d85a:	2f dd       	sub	sp,-12
8000d85c:	78 1a       	ld.w	r10,r12[0x4]
8000d85e:	50 7a       	stdsp	sp[0x1c],r10
8000d860:	78 0c       	ld.w	r12,r12[0x0]
8000d862:	50 5c       	stdsp	sp[0x14],r12
8000d864:	c2 a8       	rjmp	8000d8b8 <_vfprintf_r+0x8b0>
8000d866:	2f f7       	sub	r7,-1
8000d868:	10 39       	cp.w	r9,r8
8000d86a:	c0 94       	brge	8000d87c <_vfprintf_r+0x874>
8000d86c:	fa c9 f9 44 	sub	r9,sp,-1724
8000d870:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d874:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000d878:	50 78       	stdsp	sp[0x1c],r8
8000d87a:	cb 6b       	rjmp	8000d7e6 <_vfprintf_r+0x7de>
8000d87c:	41 09       	lddsp	r9,sp[0x40]
8000d87e:	59 f8       	cp.w	r8,31
8000d880:	e0 89 00 15 	brgt	8000d8aa <_vfprintf_r+0x8a2>
8000d884:	f2 ca ff f8 	sub	r10,r9,-8
8000d888:	72 16       	ld.w	r6,r9[0x4]
8000d88a:	72 09       	ld.w	r9,r9[0x0]
8000d88c:	51 0a       	stdsp	sp[0x40],r10
8000d88e:	50 59       	stdsp	sp[0x14],r9
8000d890:	fa ce f9 44 	sub	lr,sp,-1724
8000d894:	50 76       	stdsp	sp[0x1c],r6
8000d896:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000d89a:	40 5b       	lddsp	r11,sp[0x14]
8000d89c:	0c 9a       	mov	r10,r6
8000d89e:	f2 eb fd 88 	st.d	r9[-632],r10
8000d8a2:	2f f8       	sub	r8,-1
8000d8a4:	fb 48 06 b4 	st.w	sp[1716],r8
8000d8a8:	c0 88       	rjmp	8000d8b8 <_vfprintf_r+0x8b0>
8000d8aa:	72 1c       	ld.w	r12,r9[0x4]
8000d8ac:	50 7c       	stdsp	sp[0x1c],r12
8000d8ae:	f2 c8 ff f8 	sub	r8,r9,-8
8000d8b2:	51 08       	stdsp	sp[0x40],r8
8000d8b4:	72 09       	ld.w	r9,r9[0x0]
8000d8b6:	50 59       	stdsp	sp[0x14],r9
8000d8b8:	40 5b       	lddsp	r11,sp[0x14]
8000d8ba:	40 7a       	lddsp	r10,sp[0x1c]
8000d8bc:	f0 1f 00 59 	mcall	8000da20 <_vfprintf_r+0xa18>
8000d8c0:	18 96       	mov	r6,r12
8000d8c2:	c1 50       	breq	8000d8ec <_vfprintf_r+0x8e4>
8000d8c4:	30 08       	mov	r8,0
8000d8c6:	30 09       	mov	r9,0
8000d8c8:	40 5b       	lddsp	r11,sp[0x14]
8000d8ca:	40 7a       	lddsp	r10,sp[0x1c]
8000d8cc:	f0 1f 00 56 	mcall	8000da24 <_vfprintf_r+0xa1c>
8000d8d0:	c0 40       	breq	8000d8d8 <_vfprintf_r+0x8d0>
8000d8d2:	32 d8       	mov	r8,45
8000d8d4:	fb 68 06 bb 	st.b	sp[1723],r8
8000d8d8:	4d 48       	lddpc	r8,8000da28 <_vfprintf_r+0xa20>
8000d8da:	4d 56       	lddpc	r6,8000da2c <_vfprintf_r+0xa24>
8000d8dc:	a7 d5       	cbr	r5,0x7
8000d8de:	e0 40 00 47 	cp.w	r0,71
8000d8e2:	f0 06 17 a0 	movle	r6,r8
8000d8e6:	30 32       	mov	r2,3
8000d8e8:	e0 8f 06 e8 	bral	8000e6b8 <_vfprintf_r+0x16b0>
8000d8ec:	40 5b       	lddsp	r11,sp[0x14]
8000d8ee:	40 7a       	lddsp	r10,sp[0x1c]
8000d8f0:	f0 1f 00 50 	mcall	8000da30 <_vfprintf_r+0xa28>
8000d8f4:	c0 c0       	breq	8000d90c <_vfprintf_r+0x904>
8000d8f6:	50 26       	stdsp	sp[0x8],r6
8000d8f8:	4c f8       	lddpc	r8,8000da34 <_vfprintf_r+0xa2c>
8000d8fa:	4d 06       	lddpc	r6,8000da38 <_vfprintf_r+0xa30>
8000d8fc:	a7 d5       	cbr	r5,0x7
8000d8fe:	e0 40 00 47 	cp.w	r0,71
8000d902:	f0 06 17 a0 	movle	r6,r8
8000d906:	30 32       	mov	r2,3
8000d908:	e0 8f 06 de 	bral	8000e6c4 <_vfprintf_r+0x16bc>
8000d90c:	40 2a       	lddsp	r10,sp[0x8]
8000d90e:	5b fa       	cp.w	r10,-1
8000d910:	c0 41       	brne	8000d918 <_vfprintf_r+0x910>
8000d912:	30 69       	mov	r9,6
8000d914:	50 29       	stdsp	sp[0x8],r9
8000d916:	c1 18       	rjmp	8000d938 <_vfprintf_r+0x930>
8000d918:	e0 40 00 47 	cp.w	r0,71
8000d91c:	5f 09       	sreq	r9
8000d91e:	e0 40 00 67 	cp.w	r0,103
8000d922:	5f 08       	sreq	r8
8000d924:	f3 e8 10 08 	or	r8,r9,r8
8000d928:	f8 08 18 00 	cp.b	r8,r12
8000d92c:	c0 60       	breq	8000d938 <_vfprintf_r+0x930>
8000d92e:	40 28       	lddsp	r8,sp[0x8]
8000d930:	58 08       	cp.w	r8,0
8000d932:	f9 b8 00 01 	moveq	r8,1
8000d936:	50 28       	stdsp	sp[0x8],r8
8000d938:	40 78       	lddsp	r8,sp[0x1c]
8000d93a:	40 59       	lddsp	r9,sp[0x14]
8000d93c:	fa e9 06 94 	st.d	sp[1684],r8
8000d940:	a9 a5       	sbr	r5,0x8
8000d942:	fa f8 06 94 	ld.w	r8,sp[1684]
8000d946:	58 08       	cp.w	r8,0
8000d948:	c0 65       	brlt	8000d954 <_vfprintf_r+0x94c>
8000d94a:	40 5e       	lddsp	lr,sp[0x14]
8000d94c:	30 0c       	mov	r12,0
8000d94e:	50 6e       	stdsp	sp[0x18],lr
8000d950:	50 9c       	stdsp	sp[0x24],r12
8000d952:	c0 78       	rjmp	8000d960 <_vfprintf_r+0x958>
8000d954:	40 5b       	lddsp	r11,sp[0x14]
8000d956:	32 da       	mov	r10,45
8000d958:	ee 1b 80 00 	eorh	r11,0x8000
8000d95c:	50 9a       	stdsp	sp[0x24],r10
8000d95e:	50 6b       	stdsp	sp[0x18],r11
8000d960:	e0 40 00 46 	cp.w	r0,70
8000d964:	5f 09       	sreq	r9
8000d966:	e0 40 00 66 	cp.w	r0,102
8000d96a:	5f 08       	sreq	r8
8000d96c:	f3 e8 10 08 	or	r8,r9,r8
8000d970:	50 48       	stdsp	sp[0x10],r8
8000d972:	c0 40       	breq	8000d97a <_vfprintf_r+0x972>
8000d974:	40 22       	lddsp	r2,sp[0x8]
8000d976:	30 39       	mov	r9,3
8000d978:	c1 08       	rjmp	8000d998 <_vfprintf_r+0x990>
8000d97a:	e0 40 00 45 	cp.w	r0,69
8000d97e:	5f 09       	sreq	r9
8000d980:	e0 40 00 65 	cp.w	r0,101
8000d984:	5f 08       	sreq	r8
8000d986:	40 22       	lddsp	r2,sp[0x8]
8000d988:	10 49       	or	r9,r8
8000d98a:	2f f2       	sub	r2,-1
8000d98c:	40 46       	lddsp	r6,sp[0x10]
8000d98e:	ec 09 18 00 	cp.b	r9,r6
8000d992:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000d996:	30 29       	mov	r9,2
8000d998:	fa c8 f9 5c 	sub	r8,sp,-1700
8000d99c:	1a d8       	st.w	--sp,r8
8000d99e:	fa c8 f9 54 	sub	r8,sp,-1708
8000d9a2:	1a d8       	st.w	--sp,r8
8000d9a4:	fa c8 f9 4c 	sub	r8,sp,-1716
8000d9a8:	08 9c       	mov	r12,r4
8000d9aa:	1a d8       	st.w	--sp,r8
8000d9ac:	04 98       	mov	r8,r2
8000d9ae:	40 9b       	lddsp	r11,sp[0x24]
8000d9b0:	40 aa       	lddsp	r10,sp[0x28]
8000d9b2:	f0 1f 00 23 	mcall	8000da3c <_vfprintf_r+0xa34>
8000d9b6:	e0 40 00 47 	cp.w	r0,71
8000d9ba:	5f 19       	srne	r9
8000d9bc:	e0 40 00 67 	cp.w	r0,103
8000d9c0:	5f 18       	srne	r8
8000d9c2:	18 96       	mov	r6,r12
8000d9c4:	2f dd       	sub	sp,-12
8000d9c6:	f3 e8 00 08 	and	r8,r9,r8
8000d9ca:	c0 41       	brne	8000d9d2 <_vfprintf_r+0x9ca>
8000d9cc:	ed b5 00 00 	bld	r5,0x0
8000d9d0:	c4 41       	brne	8000da58 <_vfprintf_r+0xa50>
8000d9d2:	ec 02 00 0e 	add	lr,r6,r2
8000d9d6:	50 3e       	stdsp	sp[0xc],lr
8000d9d8:	40 4c       	lddsp	r12,sp[0x10]
8000d9da:	58 0c       	cp.w	r12,0
8000d9dc:	c1 50       	breq	8000da06 <_vfprintf_r+0x9fe>
8000d9de:	0d 89       	ld.ub	r9,r6[0x0]
8000d9e0:	33 08       	mov	r8,48
8000d9e2:	f0 09 18 00 	cp.b	r9,r8
8000d9e6:	c0 b1       	brne	8000d9fc <_vfprintf_r+0x9f4>
8000d9e8:	30 08       	mov	r8,0
8000d9ea:	30 09       	mov	r9,0
8000d9ec:	40 6b       	lddsp	r11,sp[0x18]
8000d9ee:	40 7a       	lddsp	r10,sp[0x1c]
8000d9f0:	f0 1f 00 14 	mcall	8000da40 <_vfprintf_r+0xa38>
8000d9f4:	fb b2 00 01 	rsubeq	r2,1
8000d9f8:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8000d9fc:	40 3b       	lddsp	r11,sp[0xc]
8000d9fe:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000da02:	10 0b       	add	r11,r8
8000da04:	50 3b       	stdsp	sp[0xc],r11
8000da06:	40 6b       	lddsp	r11,sp[0x18]
8000da08:	30 08       	mov	r8,0
8000da0a:	30 09       	mov	r9,0
8000da0c:	40 7a       	lddsp	r10,sp[0x1c]
8000da0e:	f0 1f 00 0d 	mcall	8000da40 <_vfprintf_r+0xa38>
8000da12:	c1 d0       	breq	8000da4c <_vfprintf_r+0xa44>
8000da14:	40 3a       	lddsp	r10,sp[0xc]
8000da16:	fb 4a 06 a4 	st.w	sp[1700],r10
8000da1a:	c1 98       	rjmp	8000da4c <_vfprintf_r+0xa44>
8000da1c:	80 00       	ld.sh	r0,r0[0x0]
8000da1e:	cc c4       	brge	8000d9b6 <_vfprintf_r+0x9ae>
8000da20:	80 01       	ld.sh	r1,r0[0x0]
8000da22:	14 e4       	st.h	--r10,r4
8000da24:	80 01       	ld.sh	r1,r0[0x0]
8000da26:	19 ec       	ld.ub	r12,r12[0x6]
8000da28:	80 01       	ld.sh	r1,r0[0x0]
8000da2a:	27 e4       	sub	r4,126
8000da2c:	80 01       	ld.sh	r1,r0[0x0]
8000da2e:	27 e8       	sub	r8,126
8000da30:	80 01       	ld.sh	r1,r0[0x0]
8000da32:	15 0e       	ld.w	lr,r10++
8000da34:	80 01       	ld.sh	r1,r0[0x0]
8000da36:	27 ec       	sub	r12,126
8000da38:	80 01       	ld.sh	r1,r0[0x0]
8000da3a:	27 f0       	sub	r0,127
8000da3c:	80 00       	ld.sh	r0,r0[0x0]
8000da3e:	f1 b0       	*unknown*
8000da40:	80 01       	ld.sh	r1,r0[0x0]
8000da42:	19 5e       	ld.sh	lr,--r12
8000da44:	10 c9       	st.b	r8++,r9
8000da46:	fb 48 06 a4 	st.w	sp[1700],r8
8000da4a:	c0 28       	rjmp	8000da4e <_vfprintf_r+0xa46>
8000da4c:	33 09       	mov	r9,48
8000da4e:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000da52:	40 3e       	lddsp	lr,sp[0xc]
8000da54:	1c 38       	cp.w	r8,lr
8000da56:	cf 73       	brcs	8000da44 <_vfprintf_r+0xa3c>
8000da58:	e0 40 00 47 	cp.w	r0,71
8000da5c:	5f 09       	sreq	r9
8000da5e:	e0 40 00 67 	cp.w	r0,103
8000da62:	5f 08       	sreq	r8
8000da64:	f3 e8 10 08 	or	r8,r9,r8
8000da68:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000da6c:	0c 19       	sub	r9,r6
8000da6e:	50 69       	stdsp	sp[0x18],r9
8000da70:	58 08       	cp.w	r8,0
8000da72:	c0 b0       	breq	8000da88 <_vfprintf_r+0xa80>
8000da74:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000da78:	5b d8       	cp.w	r8,-3
8000da7a:	c0 55       	brlt	8000da84 <_vfprintf_r+0xa7c>
8000da7c:	40 2c       	lddsp	r12,sp[0x8]
8000da7e:	18 38       	cp.w	r8,r12
8000da80:	e0 8a 00 6a 	brle	8000db54 <_vfprintf_r+0xb4c>
8000da84:	20 20       	sub	r0,2
8000da86:	c0 58       	rjmp	8000da90 <_vfprintf_r+0xa88>
8000da88:	e0 40 00 65 	cp.w	r0,101
8000da8c:	e0 89 00 46 	brgt	8000db18 <_vfprintf_r+0xb10>
8000da90:	fa fb 06 ac 	ld.w	r11,sp[1708]
8000da94:	fb 60 06 9c 	st.b	sp[1692],r0
8000da98:	20 1b       	sub	r11,1
8000da9a:	fb 4b 06 ac 	st.w	sp[1708],r11
8000da9e:	c0 47       	brpl	8000daa6 <_vfprintf_r+0xa9e>
8000daa0:	5c 3b       	neg	r11
8000daa2:	32 d8       	mov	r8,45
8000daa4:	c0 28       	rjmp	8000daa8 <_vfprintf_r+0xaa0>
8000daa6:	32 b8       	mov	r8,43
8000daa8:	fb 68 06 9d 	st.b	sp[1693],r8
8000daac:	58 9b       	cp.w	r11,9
8000daae:	e0 8a 00 1d 	brle	8000dae8 <_vfprintf_r+0xae0>
8000dab2:	fa c9 fa 35 	sub	r9,sp,-1483
8000dab6:	30 aa       	mov	r10,10
8000dab8:	12 98       	mov	r8,r9
8000daba:	0e 9c       	mov	r12,r7
8000dabc:	0c 92       	mov	r2,r6
8000dabe:	f6 0a 0c 06 	divs	r6,r11,r10
8000dac2:	0e 9b       	mov	r11,r7
8000dac4:	2d 0b       	sub	r11,-48
8000dac6:	10 fb       	st.b	--r8,r11
8000dac8:	0c 9b       	mov	r11,r6
8000daca:	58 96       	cp.w	r6,9
8000dacc:	fe 99 ff f9 	brgt	8000dabe <_vfprintf_r+0xab6>
8000dad0:	2d 0b       	sub	r11,-48
8000dad2:	18 97       	mov	r7,r12
8000dad4:	04 96       	mov	r6,r2
8000dad6:	10 fb       	st.b	--r8,r11
8000dad8:	fa ca f9 62 	sub	r10,sp,-1694
8000dadc:	c0 38       	rjmp	8000dae2 <_vfprintf_r+0xada>
8000dade:	11 3b       	ld.ub	r11,r8++
8000dae0:	14 cb       	st.b	r10++,r11
8000dae2:	12 38       	cp.w	r8,r9
8000dae4:	cf d3       	brcs	8000dade <_vfprintf_r+0xad6>
8000dae6:	c0 98       	rjmp	8000daf8 <_vfprintf_r+0xaf0>
8000dae8:	2d 0b       	sub	r11,-48
8000daea:	33 08       	mov	r8,48
8000daec:	fb 6b 06 9f 	st.b	sp[1695],r11
8000daf0:	fb 68 06 9e 	st.b	sp[1694],r8
8000daf4:	fa ca f9 60 	sub	r10,sp,-1696
8000daf8:	fa c8 f9 64 	sub	r8,sp,-1692
8000dafc:	f4 08 01 08 	sub	r8,r10,r8
8000db00:	50 e8       	stdsp	sp[0x38],r8
8000db02:	10 92       	mov	r2,r8
8000db04:	40 6b       	lddsp	r11,sp[0x18]
8000db06:	16 02       	add	r2,r11
8000db08:	58 1b       	cp.w	r11,1
8000db0a:	e0 89 00 05 	brgt	8000db14 <_vfprintf_r+0xb0c>
8000db0e:	ed b5 00 00 	bld	r5,0x0
8000db12:	c3 51       	brne	8000db7c <_vfprintf_r+0xb74>
8000db14:	2f f2       	sub	r2,-1
8000db16:	c3 38       	rjmp	8000db7c <_vfprintf_r+0xb74>
8000db18:	e0 40 00 66 	cp.w	r0,102
8000db1c:	c1 c1       	brne	8000db54 <_vfprintf_r+0xb4c>
8000db1e:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000db22:	58 02       	cp.w	r2,0
8000db24:	e0 8a 00 0c 	brle	8000db3c <_vfprintf_r+0xb34>
8000db28:	40 2a       	lddsp	r10,sp[0x8]
8000db2a:	58 0a       	cp.w	r10,0
8000db2c:	c0 41       	brne	8000db34 <_vfprintf_r+0xb2c>
8000db2e:	ed b5 00 00 	bld	r5,0x0
8000db32:	c2 51       	brne	8000db7c <_vfprintf_r+0xb74>
8000db34:	2f f2       	sub	r2,-1
8000db36:	40 29       	lddsp	r9,sp[0x8]
8000db38:	12 02       	add	r2,r9
8000db3a:	c0 b8       	rjmp	8000db50 <_vfprintf_r+0xb48>
8000db3c:	40 28       	lddsp	r8,sp[0x8]
8000db3e:	58 08       	cp.w	r8,0
8000db40:	c0 61       	brne	8000db4c <_vfprintf_r+0xb44>
8000db42:	ed b5 00 00 	bld	r5,0x0
8000db46:	c0 30       	breq	8000db4c <_vfprintf_r+0xb44>
8000db48:	30 12       	mov	r2,1
8000db4a:	c1 98       	rjmp	8000db7c <_vfprintf_r+0xb74>
8000db4c:	40 22       	lddsp	r2,sp[0x8]
8000db4e:	2f e2       	sub	r2,-2
8000db50:	36 60       	mov	r0,102
8000db52:	c1 58       	rjmp	8000db7c <_vfprintf_r+0xb74>
8000db54:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000db58:	40 6e       	lddsp	lr,sp[0x18]
8000db5a:	1c 32       	cp.w	r2,lr
8000db5c:	c0 65       	brlt	8000db68 <_vfprintf_r+0xb60>
8000db5e:	ed b5 00 00 	bld	r5,0x0
8000db62:	f7 b2 00 ff 	subeq	r2,-1
8000db66:	c0 a8       	rjmp	8000db7a <_vfprintf_r+0xb72>
8000db68:	e4 08 11 02 	rsub	r8,r2,2
8000db6c:	40 6c       	lddsp	r12,sp[0x18]
8000db6e:	58 02       	cp.w	r2,0
8000db70:	f0 02 17 a0 	movle	r2,r8
8000db74:	f9 b2 09 01 	movgt	r2,1
8000db78:	18 02       	add	r2,r12
8000db7a:	36 70       	mov	r0,103
8000db7c:	40 9b       	lddsp	r11,sp[0x24]
8000db7e:	58 0b       	cp.w	r11,0
8000db80:	e0 80 05 9c 	breq	8000e6b8 <_vfprintf_r+0x16b0>
8000db84:	32 d8       	mov	r8,45
8000db86:	fb 68 06 bb 	st.b	sp[1723],r8
8000db8a:	e0 8f 05 9b 	bral	8000e6c0 <_vfprintf_r+0x16b8>
8000db8e:	50 a7       	stdsp	sp[0x28],r7
8000db90:	04 94       	mov	r4,r2
8000db92:	0c 97       	mov	r7,r6
8000db94:	02 92       	mov	r2,r1
8000db96:	06 96       	mov	r6,r3
8000db98:	40 41       	lddsp	r1,sp[0x10]
8000db9a:	40 93       	lddsp	r3,sp[0x24]
8000db9c:	0e 99       	mov	r9,r7
8000db9e:	ed b5 00 05 	bld	r5,0x5
8000dba2:	c4 81       	brne	8000dc32 <_vfprintf_r+0xc2a>
8000dba4:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dba8:	40 3e       	lddsp	lr,sp[0xc]
8000dbaa:	58 0e       	cp.w	lr,0
8000dbac:	c1 d0       	breq	8000dbe6 <_vfprintf_r+0xbde>
8000dbae:	10 36       	cp.w	r6,r8
8000dbb0:	c0 64       	brge	8000dbbc <_vfprintf_r+0xbb4>
8000dbb2:	fa cc f9 44 	sub	r12,sp,-1724
8000dbb6:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000dbba:	c1 d8       	rjmp	8000dbf4 <_vfprintf_r+0xbec>
8000dbbc:	fa c8 f9 50 	sub	r8,sp,-1712
8000dbc0:	1a d8       	st.w	--sp,r8
8000dbc2:	fa c8 fa b8 	sub	r8,sp,-1352
8000dbc6:	04 9a       	mov	r10,r2
8000dbc8:	1a d8       	st.w	--sp,r8
8000dbca:	fa c8 fb b4 	sub	r8,sp,-1100
8000dbce:	0c 9b       	mov	r11,r6
8000dbd0:	1a d8       	st.w	--sp,r8
8000dbd2:	08 9c       	mov	r12,r4
8000dbd4:	fa c8 f9 40 	sub	r8,sp,-1728
8000dbd8:	fa c9 ff b4 	sub	r9,sp,-76
8000dbdc:	f0 1f 01 5f 	mcall	8000e158 <_vfprintf_r+0x1150>
8000dbe0:	2f dd       	sub	sp,-12
8000dbe2:	78 0a       	ld.w	r10,r12[0x0]
8000dbe4:	c2 08       	rjmp	8000dc24 <_vfprintf_r+0xc1c>
8000dbe6:	2f f7       	sub	r7,-1
8000dbe8:	10 39       	cp.w	r9,r8
8000dbea:	c0 84       	brge	8000dbfa <_vfprintf_r+0xbf2>
8000dbec:	fa cb f9 44 	sub	r11,sp,-1724
8000dbf0:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dbf4:	ec fa fd 88 	ld.w	r10,r6[-632]
8000dbf8:	c1 68       	rjmp	8000dc24 <_vfprintf_r+0xc1c>
8000dbfa:	41 09       	lddsp	r9,sp[0x40]
8000dbfc:	59 f8       	cp.w	r8,31
8000dbfe:	e0 89 00 10 	brgt	8000dc1e <_vfprintf_r+0xc16>
8000dc02:	f2 ca ff fc 	sub	r10,r9,-4
8000dc06:	51 0a       	stdsp	sp[0x40],r10
8000dc08:	fa c6 f9 44 	sub	r6,sp,-1724
8000dc0c:	72 0a       	ld.w	r10,r9[0x0]
8000dc0e:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000dc12:	f3 4a fd 88 	st.w	r9[-632],r10
8000dc16:	2f f8       	sub	r8,-1
8000dc18:	fb 48 06 b4 	st.w	sp[1716],r8
8000dc1c:	c0 48       	rjmp	8000dc24 <_vfprintf_r+0xc1c>
8000dc1e:	72 0a       	ld.w	r10,r9[0x0]
8000dc20:	2f c9       	sub	r9,-4
8000dc22:	51 09       	stdsp	sp[0x40],r9
8000dc24:	40 be       	lddsp	lr,sp[0x2c]
8000dc26:	1c 98       	mov	r8,lr
8000dc28:	95 1e       	st.w	r10[0x4],lr
8000dc2a:	bf 58       	asr	r8,0x1f
8000dc2c:	95 08       	st.w	r10[0x0],r8
8000dc2e:	fe 9f fa 79 	bral	8000d120 <_vfprintf_r+0x118>
8000dc32:	ed b5 00 04 	bld	r5,0x4
8000dc36:	c4 80       	breq	8000dcc6 <_vfprintf_r+0xcbe>
8000dc38:	e2 15 00 40 	andl	r5,0x40,COH
8000dc3c:	c4 50       	breq	8000dcc6 <_vfprintf_r+0xcbe>
8000dc3e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dc42:	40 3c       	lddsp	r12,sp[0xc]
8000dc44:	58 0c       	cp.w	r12,0
8000dc46:	c1 d0       	breq	8000dc80 <_vfprintf_r+0xc78>
8000dc48:	10 36       	cp.w	r6,r8
8000dc4a:	c0 64       	brge	8000dc56 <_vfprintf_r+0xc4e>
8000dc4c:	fa cb f9 44 	sub	r11,sp,-1724
8000dc50:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dc54:	c1 d8       	rjmp	8000dc8e <_vfprintf_r+0xc86>
8000dc56:	fa c8 f9 50 	sub	r8,sp,-1712
8000dc5a:	1a d8       	st.w	--sp,r8
8000dc5c:	fa c8 fa b8 	sub	r8,sp,-1352
8000dc60:	04 9a       	mov	r10,r2
8000dc62:	1a d8       	st.w	--sp,r8
8000dc64:	fa c8 fb b4 	sub	r8,sp,-1100
8000dc68:	0c 9b       	mov	r11,r6
8000dc6a:	1a d8       	st.w	--sp,r8
8000dc6c:	08 9c       	mov	r12,r4
8000dc6e:	fa c8 f9 40 	sub	r8,sp,-1728
8000dc72:	fa c9 ff b4 	sub	r9,sp,-76
8000dc76:	f0 1f 01 39 	mcall	8000e158 <_vfprintf_r+0x1150>
8000dc7a:	2f dd       	sub	sp,-12
8000dc7c:	78 0a       	ld.w	r10,r12[0x0]
8000dc7e:	c2 08       	rjmp	8000dcbe <_vfprintf_r+0xcb6>
8000dc80:	2f f7       	sub	r7,-1
8000dc82:	10 39       	cp.w	r9,r8
8000dc84:	c0 84       	brge	8000dc94 <_vfprintf_r+0xc8c>
8000dc86:	fa ca f9 44 	sub	r10,sp,-1724
8000dc8a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000dc8e:	ec fa fd 88 	ld.w	r10,r6[-632]
8000dc92:	c1 68       	rjmp	8000dcbe <_vfprintf_r+0xcb6>
8000dc94:	41 09       	lddsp	r9,sp[0x40]
8000dc96:	59 f8       	cp.w	r8,31
8000dc98:	e0 89 00 10 	brgt	8000dcb8 <_vfprintf_r+0xcb0>
8000dc9c:	f2 ca ff fc 	sub	r10,r9,-4
8000dca0:	51 0a       	stdsp	sp[0x40],r10
8000dca2:	fa c6 f9 44 	sub	r6,sp,-1724
8000dca6:	72 0a       	ld.w	r10,r9[0x0]
8000dca8:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000dcac:	f3 4a fd 88 	st.w	r9[-632],r10
8000dcb0:	2f f8       	sub	r8,-1
8000dcb2:	fb 48 06 b4 	st.w	sp[1716],r8
8000dcb6:	c0 48       	rjmp	8000dcbe <_vfprintf_r+0xcb6>
8000dcb8:	72 0a       	ld.w	r10,r9[0x0]
8000dcba:	2f c9       	sub	r9,-4
8000dcbc:	51 09       	stdsp	sp[0x40],r9
8000dcbe:	40 be       	lddsp	lr,sp[0x2c]
8000dcc0:	b4 0e       	st.h	r10[0x0],lr
8000dcc2:	fe 9f fa 2f 	bral	8000d120 <_vfprintf_r+0x118>
8000dcc6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dcca:	40 3c       	lddsp	r12,sp[0xc]
8000dccc:	58 0c       	cp.w	r12,0
8000dcce:	c1 d0       	breq	8000dd08 <_vfprintf_r+0xd00>
8000dcd0:	10 36       	cp.w	r6,r8
8000dcd2:	c0 64       	brge	8000dcde <_vfprintf_r+0xcd6>
8000dcd4:	fa cb f9 44 	sub	r11,sp,-1724
8000dcd8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dcdc:	c1 d8       	rjmp	8000dd16 <_vfprintf_r+0xd0e>
8000dcde:	fa c8 f9 50 	sub	r8,sp,-1712
8000dce2:	1a d8       	st.w	--sp,r8
8000dce4:	fa c8 fa b8 	sub	r8,sp,-1352
8000dce8:	04 9a       	mov	r10,r2
8000dcea:	1a d8       	st.w	--sp,r8
8000dcec:	fa c8 fb b4 	sub	r8,sp,-1100
8000dcf0:	0c 9b       	mov	r11,r6
8000dcf2:	1a d8       	st.w	--sp,r8
8000dcf4:	08 9c       	mov	r12,r4
8000dcf6:	fa c8 f9 40 	sub	r8,sp,-1728
8000dcfa:	fa c9 ff b4 	sub	r9,sp,-76
8000dcfe:	f0 1f 01 17 	mcall	8000e158 <_vfprintf_r+0x1150>
8000dd02:	2f dd       	sub	sp,-12
8000dd04:	78 0a       	ld.w	r10,r12[0x0]
8000dd06:	c2 08       	rjmp	8000dd46 <_vfprintf_r+0xd3e>
8000dd08:	2f f7       	sub	r7,-1
8000dd0a:	10 39       	cp.w	r9,r8
8000dd0c:	c0 84       	brge	8000dd1c <_vfprintf_r+0xd14>
8000dd0e:	fa ca f9 44 	sub	r10,sp,-1724
8000dd12:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000dd16:	ec fa fd 88 	ld.w	r10,r6[-632]
8000dd1a:	c1 68       	rjmp	8000dd46 <_vfprintf_r+0xd3e>
8000dd1c:	41 09       	lddsp	r9,sp[0x40]
8000dd1e:	59 f8       	cp.w	r8,31
8000dd20:	e0 89 00 10 	brgt	8000dd40 <_vfprintf_r+0xd38>
8000dd24:	f2 ca ff fc 	sub	r10,r9,-4
8000dd28:	51 0a       	stdsp	sp[0x40],r10
8000dd2a:	fa c6 f9 44 	sub	r6,sp,-1724
8000dd2e:	72 0a       	ld.w	r10,r9[0x0]
8000dd30:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000dd34:	f3 4a fd 88 	st.w	r9[-632],r10
8000dd38:	2f f8       	sub	r8,-1
8000dd3a:	fb 48 06 b4 	st.w	sp[1716],r8
8000dd3e:	c0 48       	rjmp	8000dd46 <_vfprintf_r+0xd3e>
8000dd40:	72 0a       	ld.w	r10,r9[0x0]
8000dd42:	2f c9       	sub	r9,-4
8000dd44:	51 09       	stdsp	sp[0x40],r9
8000dd46:	40 be       	lddsp	lr,sp[0x2c]
8000dd48:	95 0e       	st.w	r10[0x0],lr
8000dd4a:	fe 9f f9 eb 	bral	8000d120 <_vfprintf_r+0x118>
8000dd4e:	50 a7       	stdsp	sp[0x28],r7
8000dd50:	50 80       	stdsp	sp[0x20],r0
8000dd52:	0c 97       	mov	r7,r6
8000dd54:	04 94       	mov	r4,r2
8000dd56:	06 96       	mov	r6,r3
8000dd58:	02 92       	mov	r2,r1
8000dd5a:	40 93       	lddsp	r3,sp[0x24]
8000dd5c:	10 90       	mov	r0,r8
8000dd5e:	40 41       	lddsp	r1,sp[0x10]
8000dd60:	a5 a5       	sbr	r5,0x4
8000dd62:	c0 a8       	rjmp	8000dd76 <_vfprintf_r+0xd6e>
8000dd64:	50 a7       	stdsp	sp[0x28],r7
8000dd66:	50 80       	stdsp	sp[0x20],r0
8000dd68:	0c 97       	mov	r7,r6
8000dd6a:	04 94       	mov	r4,r2
8000dd6c:	06 96       	mov	r6,r3
8000dd6e:	02 92       	mov	r2,r1
8000dd70:	40 93       	lddsp	r3,sp[0x24]
8000dd72:	10 90       	mov	r0,r8
8000dd74:	40 41       	lddsp	r1,sp[0x10]
8000dd76:	ed b5 00 05 	bld	r5,0x5
8000dd7a:	c5 d1       	brne	8000de34 <_vfprintf_r+0xe2c>
8000dd7c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dd80:	40 3c       	lddsp	r12,sp[0xc]
8000dd82:	58 0c       	cp.w	r12,0
8000dd84:	c2 60       	breq	8000ddd0 <_vfprintf_r+0xdc8>
8000dd86:	10 36       	cp.w	r6,r8
8000dd88:	c0 a4       	brge	8000dd9c <_vfprintf_r+0xd94>
8000dd8a:	fa cb f9 44 	sub	r11,sp,-1724
8000dd8e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dd92:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000dd96:	fa e9 00 00 	st.d	sp[0],r8
8000dd9a:	c1 88       	rjmp	8000ddca <_vfprintf_r+0xdc2>
8000dd9c:	fa c8 f9 50 	sub	r8,sp,-1712
8000dda0:	1a d8       	st.w	--sp,r8
8000dda2:	fa c8 fa b8 	sub	r8,sp,-1352
8000dda6:	04 9a       	mov	r10,r2
8000dda8:	1a d8       	st.w	--sp,r8
8000ddaa:	0c 9b       	mov	r11,r6
8000ddac:	fa c8 fb b4 	sub	r8,sp,-1100
8000ddb0:	08 9c       	mov	r12,r4
8000ddb2:	1a d8       	st.w	--sp,r8
8000ddb4:	fa c8 f9 40 	sub	r8,sp,-1728
8000ddb8:	fa c9 ff b4 	sub	r9,sp,-76
8000ddbc:	f0 1f 00 e7 	mcall	8000e158 <_vfprintf_r+0x1150>
8000ddc0:	2f dd       	sub	sp,-12
8000ddc2:	f8 ea 00 00 	ld.d	r10,r12[0]
8000ddc6:	fa eb 00 00 	st.d	sp[0],r10
8000ddca:	30 08       	mov	r8,0
8000ddcc:	e0 8f 03 e6 	bral	8000e598 <_vfprintf_r+0x1590>
8000ddd0:	ee ca ff ff 	sub	r10,r7,-1
8000ddd4:	10 37       	cp.w	r7,r8
8000ddd6:	c0 b4       	brge	8000ddec <_vfprintf_r+0xde4>
8000ddd8:	fa c9 f9 44 	sub	r9,sp,-1724
8000dddc:	14 97       	mov	r7,r10
8000ddde:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000dde2:	ec ea fd 88 	ld.d	r10,r6[-632]
8000dde6:	fa eb 00 00 	st.d	sp[0],r10
8000ddea:	c1 88       	rjmp	8000de1a <_vfprintf_r+0xe12>
8000ddec:	41 09       	lddsp	r9,sp[0x40]
8000ddee:	59 f8       	cp.w	r8,31
8000ddf0:	e0 89 00 18 	brgt	8000de20 <_vfprintf_r+0xe18>
8000ddf4:	f2 e6 00 00 	ld.d	r6,r9[0]
8000ddf8:	f2 cb ff f8 	sub	r11,r9,-8
8000ddfc:	fa e7 00 00 	st.d	sp[0],r6
8000de00:	51 0b       	stdsp	sp[0x40],r11
8000de02:	fa c6 f9 44 	sub	r6,sp,-1724
8000de06:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000de0a:	fa e6 00 00 	ld.d	r6,sp[0]
8000de0e:	f2 e7 fd 88 	st.d	r9[-632],r6
8000de12:	2f f8       	sub	r8,-1
8000de14:	14 97       	mov	r7,r10
8000de16:	fb 48 06 b4 	st.w	sp[1716],r8
8000de1a:	40 38       	lddsp	r8,sp[0xc]
8000de1c:	e0 8f 03 be 	bral	8000e598 <_vfprintf_r+0x1590>
8000de20:	f2 e6 00 00 	ld.d	r6,r9[0]
8000de24:	40 38       	lddsp	r8,sp[0xc]
8000de26:	fa e7 00 00 	st.d	sp[0],r6
8000de2a:	2f 89       	sub	r9,-8
8000de2c:	14 97       	mov	r7,r10
8000de2e:	51 09       	stdsp	sp[0x40],r9
8000de30:	e0 8f 03 b4 	bral	8000e598 <_vfprintf_r+0x1590>
8000de34:	ed b5 00 04 	bld	r5,0x4
8000de38:	c1 61       	brne	8000de64 <_vfprintf_r+0xe5c>
8000de3a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000de3e:	40 3e       	lddsp	lr,sp[0xc]
8000de40:	58 0e       	cp.w	lr,0
8000de42:	c0 80       	breq	8000de52 <_vfprintf_r+0xe4a>
8000de44:	10 36       	cp.w	r6,r8
8000de46:	c6 74       	brge	8000df14 <_vfprintf_r+0xf0c>
8000de48:	fa cc f9 44 	sub	r12,sp,-1724
8000de4c:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000de50:	c8 08       	rjmp	8000df50 <_vfprintf_r+0xf48>
8000de52:	ee ca ff ff 	sub	r10,r7,-1
8000de56:	10 37       	cp.w	r7,r8
8000de58:	c7 f4       	brge	8000df56 <_vfprintf_r+0xf4e>
8000de5a:	fa cb f9 44 	sub	r11,sp,-1724
8000de5e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000de62:	c7 68       	rjmp	8000df4e <_vfprintf_r+0xf46>
8000de64:	ed b5 00 06 	bld	r5,0x6
8000de68:	c4 a1       	brne	8000defc <_vfprintf_r+0xef4>
8000de6a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000de6e:	40 3c       	lddsp	r12,sp[0xc]
8000de70:	58 0c       	cp.w	r12,0
8000de72:	c1 d0       	breq	8000deac <_vfprintf_r+0xea4>
8000de74:	10 36       	cp.w	r6,r8
8000de76:	c0 64       	brge	8000de82 <_vfprintf_r+0xe7a>
8000de78:	fa cb f9 44 	sub	r11,sp,-1724
8000de7c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000de80:	c1 f8       	rjmp	8000debe <_vfprintf_r+0xeb6>
8000de82:	fa c8 f9 50 	sub	r8,sp,-1712
8000de86:	1a d8       	st.w	--sp,r8
8000de88:	fa c8 fa b8 	sub	r8,sp,-1352
8000de8c:	1a d8       	st.w	--sp,r8
8000de8e:	fa c8 fb b4 	sub	r8,sp,-1100
8000de92:	1a d8       	st.w	--sp,r8
8000de94:	fa c8 f9 40 	sub	r8,sp,-1728
8000de98:	fa c9 ff b4 	sub	r9,sp,-76
8000de9c:	04 9a       	mov	r10,r2
8000de9e:	0c 9b       	mov	r11,r6
8000dea0:	08 9c       	mov	r12,r4
8000dea2:	f0 1f 00 ae 	mcall	8000e158 <_vfprintf_r+0x1150>
8000dea6:	2f dd       	sub	sp,-12
8000dea8:	98 18       	ld.sh	r8,r12[0x2]
8000deaa:	c2 68       	rjmp	8000def6 <_vfprintf_r+0xeee>
8000deac:	ee ca ff ff 	sub	r10,r7,-1
8000deb0:	10 37       	cp.w	r7,r8
8000deb2:	c0 94       	brge	8000dec4 <_vfprintf_r+0xebc>
8000deb4:	fa c9 f9 44 	sub	r9,sp,-1724
8000deb8:	14 97       	mov	r7,r10
8000deba:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000debe:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000dec2:	c1 a8       	rjmp	8000def6 <_vfprintf_r+0xeee>
8000dec4:	41 09       	lddsp	r9,sp[0x40]
8000dec6:	59 f8       	cp.w	r8,31
8000dec8:	e0 89 00 13 	brgt	8000deee <_vfprintf_r+0xee6>
8000decc:	f2 cb ff fc 	sub	r11,r9,-4
8000ded0:	51 0b       	stdsp	sp[0x40],r11
8000ded2:	72 09       	ld.w	r9,r9[0x0]
8000ded4:	fa c6 f9 44 	sub	r6,sp,-1724
8000ded8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000dedc:	2f f8       	sub	r8,-1
8000dede:	f7 49 fd 88 	st.w	r11[-632],r9
8000dee2:	fb 48 06 b4 	st.w	sp[1716],r8
8000dee6:	14 97       	mov	r7,r10
8000dee8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000deec:	c0 58       	rjmp	8000def6 <_vfprintf_r+0xeee>
8000deee:	92 18       	ld.sh	r8,r9[0x2]
8000def0:	14 97       	mov	r7,r10
8000def2:	2f c9       	sub	r9,-4
8000def4:	51 09       	stdsp	sp[0x40],r9
8000def6:	5c 78       	castu.h	r8
8000def8:	50 18       	stdsp	sp[0x4],r8
8000defa:	c4 68       	rjmp	8000df86 <_vfprintf_r+0xf7e>
8000defc:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000df00:	40 3c       	lddsp	r12,sp[0xc]
8000df02:	58 0c       	cp.w	r12,0
8000df04:	c1 d0       	breq	8000df3e <_vfprintf_r+0xf36>
8000df06:	10 36       	cp.w	r6,r8
8000df08:	c0 64       	brge	8000df14 <_vfprintf_r+0xf0c>
8000df0a:	fa cb f9 44 	sub	r11,sp,-1724
8000df0e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000df12:	c1 f8       	rjmp	8000df50 <_vfprintf_r+0xf48>
8000df14:	fa c8 f9 50 	sub	r8,sp,-1712
8000df18:	1a d8       	st.w	--sp,r8
8000df1a:	fa c8 fa b8 	sub	r8,sp,-1352
8000df1e:	0c 9b       	mov	r11,r6
8000df20:	1a d8       	st.w	--sp,r8
8000df22:	fa c8 fb b4 	sub	r8,sp,-1100
8000df26:	04 9a       	mov	r10,r2
8000df28:	1a d8       	st.w	--sp,r8
8000df2a:	08 9c       	mov	r12,r4
8000df2c:	fa c8 f9 40 	sub	r8,sp,-1728
8000df30:	fa c9 ff b4 	sub	r9,sp,-76
8000df34:	f0 1f 00 89 	mcall	8000e158 <_vfprintf_r+0x1150>
8000df38:	2f dd       	sub	sp,-12
8000df3a:	78 0b       	ld.w	r11,r12[0x0]
8000df3c:	c2 48       	rjmp	8000df84 <_vfprintf_r+0xf7c>
8000df3e:	ee ca ff ff 	sub	r10,r7,-1
8000df42:	10 37       	cp.w	r7,r8
8000df44:	c0 94       	brge	8000df56 <_vfprintf_r+0xf4e>
8000df46:	fa c9 f9 44 	sub	r9,sp,-1724
8000df4a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000df4e:	14 97       	mov	r7,r10
8000df50:	ec fb fd 88 	ld.w	r11,r6[-632]
8000df54:	c1 88       	rjmp	8000df84 <_vfprintf_r+0xf7c>
8000df56:	41 09       	lddsp	r9,sp[0x40]
8000df58:	59 f8       	cp.w	r8,31
8000df5a:	e0 89 00 11 	brgt	8000df7c <_vfprintf_r+0xf74>
8000df5e:	f2 cb ff fc 	sub	r11,r9,-4
8000df62:	51 0b       	stdsp	sp[0x40],r11
8000df64:	fa c6 f9 44 	sub	r6,sp,-1724
8000df68:	72 0b       	ld.w	r11,r9[0x0]
8000df6a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000df6e:	f3 4b fd 88 	st.w	r9[-632],r11
8000df72:	2f f8       	sub	r8,-1
8000df74:	14 97       	mov	r7,r10
8000df76:	fb 48 06 b4 	st.w	sp[1716],r8
8000df7a:	c0 58       	rjmp	8000df84 <_vfprintf_r+0xf7c>
8000df7c:	72 0b       	ld.w	r11,r9[0x0]
8000df7e:	14 97       	mov	r7,r10
8000df80:	2f c9       	sub	r9,-4
8000df82:	51 09       	stdsp	sp[0x40],r9
8000df84:	50 1b       	stdsp	sp[0x4],r11
8000df86:	30 0e       	mov	lr,0
8000df88:	50 0e       	stdsp	sp[0x0],lr
8000df8a:	1c 98       	mov	r8,lr
8000df8c:	e0 8f 03 06 	bral	8000e598 <_vfprintf_r+0x1590>
8000df90:	50 a7       	stdsp	sp[0x28],r7
8000df92:	50 80       	stdsp	sp[0x20],r0
8000df94:	0c 97       	mov	r7,r6
8000df96:	04 94       	mov	r4,r2
8000df98:	06 96       	mov	r6,r3
8000df9a:	02 92       	mov	r2,r1
8000df9c:	40 93       	lddsp	r3,sp[0x24]
8000df9e:	40 41       	lddsp	r1,sp[0x10]
8000dfa0:	0e 99       	mov	r9,r7
8000dfa2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dfa6:	40 3c       	lddsp	r12,sp[0xc]
8000dfa8:	58 0c       	cp.w	r12,0
8000dfaa:	c1 d0       	breq	8000dfe4 <_vfprintf_r+0xfdc>
8000dfac:	10 36       	cp.w	r6,r8
8000dfae:	c0 64       	brge	8000dfba <_vfprintf_r+0xfb2>
8000dfb0:	fa cb f9 44 	sub	r11,sp,-1724
8000dfb4:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dfb8:	c1 d8       	rjmp	8000dff2 <_vfprintf_r+0xfea>
8000dfba:	fa c8 f9 50 	sub	r8,sp,-1712
8000dfbe:	1a d8       	st.w	--sp,r8
8000dfc0:	fa c8 fa b8 	sub	r8,sp,-1352
8000dfc4:	1a d8       	st.w	--sp,r8
8000dfc6:	fa c8 fb b4 	sub	r8,sp,-1100
8000dfca:	1a d8       	st.w	--sp,r8
8000dfcc:	fa c9 ff b4 	sub	r9,sp,-76
8000dfd0:	fa c8 f9 40 	sub	r8,sp,-1728
8000dfd4:	04 9a       	mov	r10,r2
8000dfd6:	0c 9b       	mov	r11,r6
8000dfd8:	08 9c       	mov	r12,r4
8000dfda:	f0 1f 00 60 	mcall	8000e158 <_vfprintf_r+0x1150>
8000dfde:	2f dd       	sub	sp,-12
8000dfe0:	78 09       	ld.w	r9,r12[0x0]
8000dfe2:	c2 18       	rjmp	8000e024 <_vfprintf_r+0x101c>
8000dfe4:	2f f7       	sub	r7,-1
8000dfe6:	10 39       	cp.w	r9,r8
8000dfe8:	c0 84       	brge	8000dff8 <_vfprintf_r+0xff0>
8000dfea:	fa ca f9 44 	sub	r10,sp,-1724
8000dfee:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000dff2:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000dff6:	c1 78       	rjmp	8000e024 <_vfprintf_r+0x101c>
8000dff8:	41 09       	lddsp	r9,sp[0x40]
8000dffa:	59 f8       	cp.w	r8,31
8000dffc:	e0 89 00 10 	brgt	8000e01c <_vfprintf_r+0x1014>
8000e000:	f2 ca ff fc 	sub	r10,r9,-4
8000e004:	51 0a       	stdsp	sp[0x40],r10
8000e006:	fa c6 f9 44 	sub	r6,sp,-1724
8000e00a:	72 09       	ld.w	r9,r9[0x0]
8000e00c:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000e010:	f5 49 fd 88 	st.w	r10[-632],r9
8000e014:	2f f8       	sub	r8,-1
8000e016:	fb 48 06 b4 	st.w	sp[1716],r8
8000e01a:	c0 58       	rjmp	8000e024 <_vfprintf_r+0x101c>
8000e01c:	f2 c8 ff fc 	sub	r8,r9,-4
8000e020:	51 08       	stdsp	sp[0x40],r8
8000e022:	72 09       	ld.w	r9,r9[0x0]
8000e024:	33 08       	mov	r8,48
8000e026:	fb 68 06 b8 	st.b	sp[1720],r8
8000e02a:	37 88       	mov	r8,120
8000e02c:	30 0e       	mov	lr,0
8000e02e:	fb 68 06 b9 	st.b	sp[1721],r8
8000e032:	4c bc       	lddpc	r12,8000e15c <_vfprintf_r+0x1154>
8000e034:	50 19       	stdsp	sp[0x4],r9
8000e036:	a1 b5       	sbr	r5,0x1
8000e038:	50 0e       	stdsp	sp[0x0],lr
8000e03a:	50 dc       	stdsp	sp[0x34],r12
8000e03c:	30 28       	mov	r8,2
8000e03e:	37 80       	mov	r0,120
8000e040:	e0 8f 02 ac 	bral	8000e598 <_vfprintf_r+0x1590>
8000e044:	50 a7       	stdsp	sp[0x28],r7
8000e046:	50 80       	stdsp	sp[0x20],r0
8000e048:	10 90       	mov	r0,r8
8000e04a:	30 08       	mov	r8,0
8000e04c:	fb 68 06 bb 	st.b	sp[1723],r8
8000e050:	0c 97       	mov	r7,r6
8000e052:	04 94       	mov	r4,r2
8000e054:	06 96       	mov	r6,r3
8000e056:	02 92       	mov	r2,r1
8000e058:	40 93       	lddsp	r3,sp[0x24]
8000e05a:	40 41       	lddsp	r1,sp[0x10]
8000e05c:	0e 99       	mov	r9,r7
8000e05e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e062:	40 3b       	lddsp	r11,sp[0xc]
8000e064:	58 0b       	cp.w	r11,0
8000e066:	c1 d0       	breq	8000e0a0 <_vfprintf_r+0x1098>
8000e068:	10 36       	cp.w	r6,r8
8000e06a:	c0 64       	brge	8000e076 <_vfprintf_r+0x106e>
8000e06c:	fa ca f9 44 	sub	r10,sp,-1724
8000e070:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000e074:	c1 d8       	rjmp	8000e0ae <_vfprintf_r+0x10a6>
8000e076:	fa c8 f9 50 	sub	r8,sp,-1712
8000e07a:	1a d8       	st.w	--sp,r8
8000e07c:	fa c8 fa b8 	sub	r8,sp,-1352
8000e080:	1a d8       	st.w	--sp,r8
8000e082:	fa c8 fb b4 	sub	r8,sp,-1100
8000e086:	0c 9b       	mov	r11,r6
8000e088:	1a d8       	st.w	--sp,r8
8000e08a:	04 9a       	mov	r10,r2
8000e08c:	fa c8 f9 40 	sub	r8,sp,-1728
8000e090:	fa c9 ff b4 	sub	r9,sp,-76
8000e094:	08 9c       	mov	r12,r4
8000e096:	f0 1f 00 31 	mcall	8000e158 <_vfprintf_r+0x1150>
8000e09a:	2f dd       	sub	sp,-12
8000e09c:	78 06       	ld.w	r6,r12[0x0]
8000e09e:	c2 08       	rjmp	8000e0de <_vfprintf_r+0x10d6>
8000e0a0:	2f f7       	sub	r7,-1
8000e0a2:	10 39       	cp.w	r9,r8
8000e0a4:	c0 84       	brge	8000e0b4 <_vfprintf_r+0x10ac>
8000e0a6:	fa c9 f9 44 	sub	r9,sp,-1724
8000e0aa:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e0ae:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000e0b2:	c1 68       	rjmp	8000e0de <_vfprintf_r+0x10d6>
8000e0b4:	41 09       	lddsp	r9,sp[0x40]
8000e0b6:	59 f8       	cp.w	r8,31
8000e0b8:	e0 89 00 10 	brgt	8000e0d8 <_vfprintf_r+0x10d0>
8000e0bc:	f2 ca ff fc 	sub	r10,r9,-4
8000e0c0:	51 0a       	stdsp	sp[0x40],r10
8000e0c2:	72 06       	ld.w	r6,r9[0x0]
8000e0c4:	fa ce f9 44 	sub	lr,sp,-1724
8000e0c8:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000e0cc:	f3 46 fd 88 	st.w	r9[-632],r6
8000e0d0:	2f f8       	sub	r8,-1
8000e0d2:	fb 48 06 b4 	st.w	sp[1716],r8
8000e0d6:	c0 48       	rjmp	8000e0de <_vfprintf_r+0x10d6>
8000e0d8:	72 06       	ld.w	r6,r9[0x0]
8000e0da:	2f c9       	sub	r9,-4
8000e0dc:	51 09       	stdsp	sp[0x40],r9
8000e0de:	40 2c       	lddsp	r12,sp[0x8]
8000e0e0:	58 0c       	cp.w	r12,0
8000e0e2:	c1 05       	brlt	8000e102 <_vfprintf_r+0x10fa>
8000e0e4:	18 9a       	mov	r10,r12
8000e0e6:	30 0b       	mov	r11,0
8000e0e8:	0c 9c       	mov	r12,r6
8000e0ea:	f0 1f 00 1e 	mcall	8000e160 <_vfprintf_r+0x1158>
8000e0ee:	e0 80 02 e8 	breq	8000e6be <_vfprintf_r+0x16b6>
8000e0f2:	f8 06 01 02 	sub	r2,r12,r6
8000e0f6:	40 2b       	lddsp	r11,sp[0x8]
8000e0f8:	16 32       	cp.w	r2,r11
8000e0fa:	e0 89 02 e2 	brgt	8000e6be <_vfprintf_r+0x16b6>
8000e0fe:	e0 8f 02 dd 	bral	8000e6b8 <_vfprintf_r+0x16b0>
8000e102:	30 0a       	mov	r10,0
8000e104:	0c 9c       	mov	r12,r6
8000e106:	50 2a       	stdsp	sp[0x8],r10
8000e108:	f0 1f 00 17 	mcall	8000e164 <_vfprintf_r+0x115c>
8000e10c:	18 92       	mov	r2,r12
8000e10e:	e0 8f 02 db 	bral	8000e6c4 <_vfprintf_r+0x16bc>
8000e112:	50 a7       	stdsp	sp[0x28],r7
8000e114:	50 80       	stdsp	sp[0x20],r0
8000e116:	0c 97       	mov	r7,r6
8000e118:	04 94       	mov	r4,r2
8000e11a:	06 96       	mov	r6,r3
8000e11c:	02 92       	mov	r2,r1
8000e11e:	40 93       	lddsp	r3,sp[0x24]
8000e120:	10 90       	mov	r0,r8
8000e122:	40 41       	lddsp	r1,sp[0x10]
8000e124:	a5 a5       	sbr	r5,0x4
8000e126:	c0 a8       	rjmp	8000e13a <_vfprintf_r+0x1132>
8000e128:	50 a7       	stdsp	sp[0x28],r7
8000e12a:	50 80       	stdsp	sp[0x20],r0
8000e12c:	0c 97       	mov	r7,r6
8000e12e:	04 94       	mov	r4,r2
8000e130:	06 96       	mov	r6,r3
8000e132:	02 92       	mov	r2,r1
8000e134:	40 93       	lddsp	r3,sp[0x24]
8000e136:	10 90       	mov	r0,r8
8000e138:	40 41       	lddsp	r1,sp[0x10]
8000e13a:	ed b5 00 05 	bld	r5,0x5
8000e13e:	c5 d1       	brne	8000e1f8 <_vfprintf_r+0x11f0>
8000e140:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e144:	40 39       	lddsp	r9,sp[0xc]
8000e146:	58 09       	cp.w	r9,0
8000e148:	c2 80       	breq	8000e198 <_vfprintf_r+0x1190>
8000e14a:	10 36       	cp.w	r6,r8
8000e14c:	c0 e4       	brge	8000e168 <_vfprintf_r+0x1160>
8000e14e:	fa c8 f9 44 	sub	r8,sp,-1724
8000e152:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000e156:	c2 a8       	rjmp	8000e1aa <_vfprintf_r+0x11a2>
8000e158:	80 00       	ld.sh	r0,r0[0x0]
8000e15a:	cc c4       	brge	8000e0f2 <_vfprintf_r+0x10ea>
8000e15c:	80 01       	ld.sh	r1,r0[0x0]
8000e15e:	27 f4       	sub	r4,127
8000e160:	80 01       	ld.sh	r1,r0[0x0]
8000e162:	0b 68       	ld.uh	r8,--r5
8000e164:	80 00       	ld.sh	r0,r0[0x0]
8000e166:	cc 8c       	rcall	8000e2f6 <_vfprintf_r+0x12ee>
8000e168:	fa c8 f9 50 	sub	r8,sp,-1712
8000e16c:	1a d8       	st.w	--sp,r8
8000e16e:	fa c8 fa b8 	sub	r8,sp,-1352
8000e172:	1a d8       	st.w	--sp,r8
8000e174:	fa c8 fb b4 	sub	r8,sp,-1100
8000e178:	1a d8       	st.w	--sp,r8
8000e17a:	fa c8 f9 40 	sub	r8,sp,-1728
8000e17e:	fa c9 ff b4 	sub	r9,sp,-76
8000e182:	04 9a       	mov	r10,r2
8000e184:	0c 9b       	mov	r11,r6
8000e186:	08 9c       	mov	r12,r4
8000e188:	f0 1f 00 c8 	mcall	8000e4a8 <_vfprintf_r+0x14a0>
8000e18c:	2f dd       	sub	sp,-12
8000e18e:	f8 e8 00 00 	ld.d	r8,r12[0]
8000e192:	fa e9 00 00 	st.d	sp[0],r8
8000e196:	c2 e8       	rjmp	8000e1f2 <_vfprintf_r+0x11ea>
8000e198:	ee ca ff ff 	sub	r10,r7,-1
8000e19c:	10 37       	cp.w	r7,r8
8000e19e:	c0 b4       	brge	8000e1b4 <_vfprintf_r+0x11ac>
8000e1a0:	fa c8 f9 44 	sub	r8,sp,-1724
8000e1a4:	14 97       	mov	r7,r10
8000e1a6:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000e1aa:	ec ea fd 88 	ld.d	r10,r6[-632]
8000e1ae:	fa eb 00 00 	st.d	sp[0],r10
8000e1b2:	c2 08       	rjmp	8000e1f2 <_vfprintf_r+0x11ea>
8000e1b4:	41 09       	lddsp	r9,sp[0x40]
8000e1b6:	59 f8       	cp.w	r8,31
8000e1b8:	e0 89 00 16 	brgt	8000e1e4 <_vfprintf_r+0x11dc>
8000e1bc:	f2 e6 00 00 	ld.d	r6,r9[0]
8000e1c0:	f2 cb ff f8 	sub	r11,r9,-8
8000e1c4:	fa e7 00 00 	st.d	sp[0],r6
8000e1c8:	51 0b       	stdsp	sp[0x40],r11
8000e1ca:	fa c6 f9 44 	sub	r6,sp,-1724
8000e1ce:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000e1d2:	fa e6 00 00 	ld.d	r6,sp[0]
8000e1d6:	f2 e7 fd 88 	st.d	r9[-632],r6
8000e1da:	2f f8       	sub	r8,-1
8000e1dc:	14 97       	mov	r7,r10
8000e1de:	fb 48 06 b4 	st.w	sp[1716],r8
8000e1e2:	c0 88       	rjmp	8000e1f2 <_vfprintf_r+0x11ea>
8000e1e4:	f2 e6 00 00 	ld.d	r6,r9[0]
8000e1e8:	2f 89       	sub	r9,-8
8000e1ea:	fa e7 00 00 	st.d	sp[0],r6
8000e1ee:	51 09       	stdsp	sp[0x40],r9
8000e1f0:	14 97       	mov	r7,r10
8000e1f2:	30 18       	mov	r8,1
8000e1f4:	e0 8f 01 d2 	bral	8000e598 <_vfprintf_r+0x1590>
8000e1f8:	ed b5 00 04 	bld	r5,0x4
8000e1fc:	c1 61       	brne	8000e228 <_vfprintf_r+0x1220>
8000e1fe:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e202:	40 3e       	lddsp	lr,sp[0xc]
8000e204:	58 0e       	cp.w	lr,0
8000e206:	c0 80       	breq	8000e216 <_vfprintf_r+0x120e>
8000e208:	10 36       	cp.w	r6,r8
8000e20a:	c6 74       	brge	8000e2d8 <_vfprintf_r+0x12d0>
8000e20c:	fa cc f9 44 	sub	r12,sp,-1724
8000e210:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000e214:	c8 08       	rjmp	8000e314 <_vfprintf_r+0x130c>
8000e216:	ee ca ff ff 	sub	r10,r7,-1
8000e21a:	10 37       	cp.w	r7,r8
8000e21c:	c7 f4       	brge	8000e31a <_vfprintf_r+0x1312>
8000e21e:	fa cb f9 44 	sub	r11,sp,-1724
8000e222:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e226:	c7 68       	rjmp	8000e312 <_vfprintf_r+0x130a>
8000e228:	ed b5 00 06 	bld	r5,0x6
8000e22c:	c4 a1       	brne	8000e2c0 <_vfprintf_r+0x12b8>
8000e22e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e232:	40 3c       	lddsp	r12,sp[0xc]
8000e234:	58 0c       	cp.w	r12,0
8000e236:	c1 d0       	breq	8000e270 <_vfprintf_r+0x1268>
8000e238:	10 36       	cp.w	r6,r8
8000e23a:	c0 64       	brge	8000e246 <_vfprintf_r+0x123e>
8000e23c:	fa cb f9 44 	sub	r11,sp,-1724
8000e240:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e244:	c1 f8       	rjmp	8000e282 <_vfprintf_r+0x127a>
8000e246:	fa c8 f9 50 	sub	r8,sp,-1712
8000e24a:	1a d8       	st.w	--sp,r8
8000e24c:	fa c8 fa b8 	sub	r8,sp,-1352
8000e250:	1a d8       	st.w	--sp,r8
8000e252:	fa c8 fb b4 	sub	r8,sp,-1100
8000e256:	1a d8       	st.w	--sp,r8
8000e258:	fa c8 f9 40 	sub	r8,sp,-1728
8000e25c:	fa c9 ff b4 	sub	r9,sp,-76
8000e260:	04 9a       	mov	r10,r2
8000e262:	0c 9b       	mov	r11,r6
8000e264:	08 9c       	mov	r12,r4
8000e266:	f0 1f 00 91 	mcall	8000e4a8 <_vfprintf_r+0x14a0>
8000e26a:	2f dd       	sub	sp,-12
8000e26c:	98 18       	ld.sh	r8,r12[0x2]
8000e26e:	c2 68       	rjmp	8000e2ba <_vfprintf_r+0x12b2>
8000e270:	ee ca ff ff 	sub	r10,r7,-1
8000e274:	10 37       	cp.w	r7,r8
8000e276:	c0 94       	brge	8000e288 <_vfprintf_r+0x1280>
8000e278:	fa c9 f9 44 	sub	r9,sp,-1724
8000e27c:	14 97       	mov	r7,r10
8000e27e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e282:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000e286:	c1 a8       	rjmp	8000e2ba <_vfprintf_r+0x12b2>
8000e288:	41 09       	lddsp	r9,sp[0x40]
8000e28a:	59 f8       	cp.w	r8,31
8000e28c:	e0 89 00 13 	brgt	8000e2b2 <_vfprintf_r+0x12aa>
8000e290:	f2 cb ff fc 	sub	r11,r9,-4
8000e294:	51 0b       	stdsp	sp[0x40],r11
8000e296:	72 09       	ld.w	r9,r9[0x0]
8000e298:	fa c6 f9 44 	sub	r6,sp,-1724
8000e29c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000e2a0:	2f f8       	sub	r8,-1
8000e2a2:	f7 49 fd 88 	st.w	r11[-632],r9
8000e2a6:	fb 48 06 b4 	st.w	sp[1716],r8
8000e2aa:	14 97       	mov	r7,r10
8000e2ac:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000e2b0:	c0 58       	rjmp	8000e2ba <_vfprintf_r+0x12b2>
8000e2b2:	92 18       	ld.sh	r8,r9[0x2]
8000e2b4:	14 97       	mov	r7,r10
8000e2b6:	2f c9       	sub	r9,-4
8000e2b8:	51 09       	stdsp	sp[0x40],r9
8000e2ba:	5c 78       	castu.h	r8
8000e2bc:	50 18       	stdsp	sp[0x4],r8
8000e2be:	c4 68       	rjmp	8000e34a <_vfprintf_r+0x1342>
8000e2c0:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e2c4:	40 3c       	lddsp	r12,sp[0xc]
8000e2c6:	58 0c       	cp.w	r12,0
8000e2c8:	c1 d0       	breq	8000e302 <_vfprintf_r+0x12fa>
8000e2ca:	10 36       	cp.w	r6,r8
8000e2cc:	c0 64       	brge	8000e2d8 <_vfprintf_r+0x12d0>
8000e2ce:	fa cb f9 44 	sub	r11,sp,-1724
8000e2d2:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e2d6:	c1 f8       	rjmp	8000e314 <_vfprintf_r+0x130c>
8000e2d8:	fa c8 f9 50 	sub	r8,sp,-1712
8000e2dc:	1a d8       	st.w	--sp,r8
8000e2de:	fa c8 fa b8 	sub	r8,sp,-1352
8000e2e2:	0c 9b       	mov	r11,r6
8000e2e4:	1a d8       	st.w	--sp,r8
8000e2e6:	fa c8 fb b4 	sub	r8,sp,-1100
8000e2ea:	04 9a       	mov	r10,r2
8000e2ec:	1a d8       	st.w	--sp,r8
8000e2ee:	08 9c       	mov	r12,r4
8000e2f0:	fa c8 f9 40 	sub	r8,sp,-1728
8000e2f4:	fa c9 ff b4 	sub	r9,sp,-76
8000e2f8:	f0 1f 00 6c 	mcall	8000e4a8 <_vfprintf_r+0x14a0>
8000e2fc:	2f dd       	sub	sp,-12
8000e2fe:	78 0b       	ld.w	r11,r12[0x0]
8000e300:	c2 48       	rjmp	8000e348 <_vfprintf_r+0x1340>
8000e302:	ee ca ff ff 	sub	r10,r7,-1
8000e306:	10 37       	cp.w	r7,r8
8000e308:	c0 94       	brge	8000e31a <_vfprintf_r+0x1312>
8000e30a:	fa c9 f9 44 	sub	r9,sp,-1724
8000e30e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e312:	14 97       	mov	r7,r10
8000e314:	ec fb fd 88 	ld.w	r11,r6[-632]
8000e318:	c1 88       	rjmp	8000e348 <_vfprintf_r+0x1340>
8000e31a:	41 09       	lddsp	r9,sp[0x40]
8000e31c:	59 f8       	cp.w	r8,31
8000e31e:	e0 89 00 11 	brgt	8000e340 <_vfprintf_r+0x1338>
8000e322:	f2 cb ff fc 	sub	r11,r9,-4
8000e326:	51 0b       	stdsp	sp[0x40],r11
8000e328:	fa c6 f9 44 	sub	r6,sp,-1724
8000e32c:	72 0b       	ld.w	r11,r9[0x0]
8000e32e:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000e332:	f3 4b fd 88 	st.w	r9[-632],r11
8000e336:	2f f8       	sub	r8,-1
8000e338:	14 97       	mov	r7,r10
8000e33a:	fb 48 06 b4 	st.w	sp[1716],r8
8000e33e:	c0 58       	rjmp	8000e348 <_vfprintf_r+0x1340>
8000e340:	72 0b       	ld.w	r11,r9[0x0]
8000e342:	14 97       	mov	r7,r10
8000e344:	2f c9       	sub	r9,-4
8000e346:	51 09       	stdsp	sp[0x40],r9
8000e348:	50 1b       	stdsp	sp[0x4],r11
8000e34a:	30 0e       	mov	lr,0
8000e34c:	30 18       	mov	r8,1
8000e34e:	50 0e       	stdsp	sp[0x0],lr
8000e350:	c2 49       	rjmp	8000e598 <_vfprintf_r+0x1590>
8000e352:	50 a7       	stdsp	sp[0x28],r7
8000e354:	50 80       	stdsp	sp[0x20],r0
8000e356:	0c 97       	mov	r7,r6
8000e358:	04 94       	mov	r4,r2
8000e35a:	06 96       	mov	r6,r3
8000e35c:	02 92       	mov	r2,r1
8000e35e:	4d 4c       	lddpc	r12,8000e4ac <_vfprintf_r+0x14a4>
8000e360:	40 93       	lddsp	r3,sp[0x24]
8000e362:	10 90       	mov	r0,r8
8000e364:	40 41       	lddsp	r1,sp[0x10]
8000e366:	50 dc       	stdsp	sp[0x34],r12
8000e368:	ed b5 00 05 	bld	r5,0x5
8000e36c:	c5 51       	brne	8000e416 <_vfprintf_r+0x140e>
8000e36e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e372:	40 3b       	lddsp	r11,sp[0xc]
8000e374:	58 0b       	cp.w	r11,0
8000e376:	c2 20       	breq	8000e3ba <_vfprintf_r+0x13b2>
8000e378:	10 36       	cp.w	r6,r8
8000e37a:	c0 a4       	brge	8000e38e <_vfprintf_r+0x1386>
8000e37c:	fa ca f9 44 	sub	r10,sp,-1724
8000e380:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000e384:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000e388:	fa e9 00 00 	st.d	sp[0],r8
8000e38c:	cf 58       	rjmp	8000e576 <_vfprintf_r+0x156e>
8000e38e:	fa c8 f9 50 	sub	r8,sp,-1712
8000e392:	1a d8       	st.w	--sp,r8
8000e394:	fa c8 fa b8 	sub	r8,sp,-1352
8000e398:	04 9a       	mov	r10,r2
8000e39a:	1a d8       	st.w	--sp,r8
8000e39c:	0c 9b       	mov	r11,r6
8000e39e:	fa c8 fb b4 	sub	r8,sp,-1100
8000e3a2:	08 9c       	mov	r12,r4
8000e3a4:	1a d8       	st.w	--sp,r8
8000e3a6:	fa c8 f9 40 	sub	r8,sp,-1728
8000e3aa:	fa c9 ff b4 	sub	r9,sp,-76
8000e3ae:	f0 1f 00 3f 	mcall	8000e4a8 <_vfprintf_r+0x14a0>
8000e3b2:	2f dd       	sub	sp,-12
8000e3b4:	f8 ea 00 00 	ld.d	r10,r12[0]
8000e3b8:	c0 c8       	rjmp	8000e3d0 <_vfprintf_r+0x13c8>
8000e3ba:	ee ca ff ff 	sub	r10,r7,-1
8000e3be:	10 37       	cp.w	r7,r8
8000e3c0:	c0 b4       	brge	8000e3d6 <_vfprintf_r+0x13ce>
8000e3c2:	fa c9 f9 44 	sub	r9,sp,-1724
8000e3c6:	14 97       	mov	r7,r10
8000e3c8:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e3cc:	ec ea fd 88 	ld.d	r10,r6[-632]
8000e3d0:	fa eb 00 00 	st.d	sp[0],r10
8000e3d4:	cd 18       	rjmp	8000e576 <_vfprintf_r+0x156e>
8000e3d6:	41 09       	lddsp	r9,sp[0x40]
8000e3d8:	59 f8       	cp.w	r8,31
8000e3da:	e0 89 00 16 	brgt	8000e406 <_vfprintf_r+0x13fe>
8000e3de:	f2 e6 00 00 	ld.d	r6,r9[0]
8000e3e2:	f2 cb ff f8 	sub	r11,r9,-8
8000e3e6:	fa e7 00 00 	st.d	sp[0],r6
8000e3ea:	51 0b       	stdsp	sp[0x40],r11
8000e3ec:	fa c6 f9 44 	sub	r6,sp,-1724
8000e3f0:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000e3f4:	fa e6 00 00 	ld.d	r6,sp[0]
8000e3f8:	f2 e7 fd 88 	st.d	r9[-632],r6
8000e3fc:	2f f8       	sub	r8,-1
8000e3fe:	14 97       	mov	r7,r10
8000e400:	fb 48 06 b4 	st.w	sp[1716],r8
8000e404:	cb 98       	rjmp	8000e576 <_vfprintf_r+0x156e>
8000e406:	f2 e6 00 00 	ld.d	r6,r9[0]
8000e40a:	2f 89       	sub	r9,-8
8000e40c:	fa e7 00 00 	st.d	sp[0],r6
8000e410:	51 09       	stdsp	sp[0x40],r9
8000e412:	14 97       	mov	r7,r10
8000e414:	cb 18       	rjmp	8000e576 <_vfprintf_r+0x156e>
8000e416:	ed b5 00 04 	bld	r5,0x4
8000e41a:	c1 71       	brne	8000e448 <_vfprintf_r+0x1440>
8000e41c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e420:	40 3e       	lddsp	lr,sp[0xc]
8000e422:	58 0e       	cp.w	lr,0
8000e424:	c0 80       	breq	8000e434 <_vfprintf_r+0x142c>
8000e426:	10 36       	cp.w	r6,r8
8000e428:	c6 c4       	brge	8000e500 <_vfprintf_r+0x14f8>
8000e42a:	fa cc f9 44 	sub	r12,sp,-1724
8000e42e:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000e432:	c8 58       	rjmp	8000e53c <_vfprintf_r+0x1534>
8000e434:	ee ca ff ff 	sub	r10,r7,-1
8000e438:	10 37       	cp.w	r7,r8
8000e43a:	e0 84 00 84 	brge	8000e542 <_vfprintf_r+0x153a>
8000e43e:	fa cb f9 44 	sub	r11,sp,-1724
8000e442:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e446:	c7 a8       	rjmp	8000e53a <_vfprintf_r+0x1532>
8000e448:	ed b5 00 06 	bld	r5,0x6
8000e44c:	c4 e1       	brne	8000e4e8 <_vfprintf_r+0x14e0>
8000e44e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e452:	40 3c       	lddsp	r12,sp[0xc]
8000e454:	58 0c       	cp.w	r12,0
8000e456:	c1 d0       	breq	8000e490 <_vfprintf_r+0x1488>
8000e458:	10 36       	cp.w	r6,r8
8000e45a:	c0 64       	brge	8000e466 <_vfprintf_r+0x145e>
8000e45c:	fa cb f9 44 	sub	r11,sp,-1724
8000e460:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e464:	c1 f8       	rjmp	8000e4a2 <_vfprintf_r+0x149a>
8000e466:	fa c8 f9 50 	sub	r8,sp,-1712
8000e46a:	1a d8       	st.w	--sp,r8
8000e46c:	fa c8 fa b8 	sub	r8,sp,-1352
8000e470:	1a d8       	st.w	--sp,r8
8000e472:	fa c8 fb b4 	sub	r8,sp,-1100
8000e476:	1a d8       	st.w	--sp,r8
8000e478:	fa c8 f9 40 	sub	r8,sp,-1728
8000e47c:	fa c9 ff b4 	sub	r9,sp,-76
8000e480:	04 9a       	mov	r10,r2
8000e482:	0c 9b       	mov	r11,r6
8000e484:	08 9c       	mov	r12,r4
8000e486:	f0 1f 00 09 	mcall	8000e4a8 <_vfprintf_r+0x14a0>
8000e48a:	2f dd       	sub	sp,-12
8000e48c:	98 18       	ld.sh	r8,r12[0x2]
8000e48e:	c2 a8       	rjmp	8000e4e2 <_vfprintf_r+0x14da>
8000e490:	ee ca ff ff 	sub	r10,r7,-1
8000e494:	10 37       	cp.w	r7,r8
8000e496:	c0 d4       	brge	8000e4b0 <_vfprintf_r+0x14a8>
8000e498:	fa c9 f9 44 	sub	r9,sp,-1724
8000e49c:	14 97       	mov	r7,r10
8000e49e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e4a2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000e4a6:	c1 e8       	rjmp	8000e4e2 <_vfprintf_r+0x14da>
8000e4a8:	80 00       	ld.sh	r0,r0[0x0]
8000e4aa:	cc c4       	brge	8000e442 <_vfprintf_r+0x143a>
8000e4ac:	80 01       	ld.sh	r1,r0[0x0]
8000e4ae:	27 f4       	sub	r4,127
8000e4b0:	41 09       	lddsp	r9,sp[0x40]
8000e4b2:	59 f8       	cp.w	r8,31
8000e4b4:	e0 89 00 13 	brgt	8000e4da <_vfprintf_r+0x14d2>
8000e4b8:	f2 cb ff fc 	sub	r11,r9,-4
8000e4bc:	51 0b       	stdsp	sp[0x40],r11
8000e4be:	72 09       	ld.w	r9,r9[0x0]
8000e4c0:	fa c6 f9 44 	sub	r6,sp,-1724
8000e4c4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000e4c8:	2f f8       	sub	r8,-1
8000e4ca:	f7 49 fd 88 	st.w	r11[-632],r9
8000e4ce:	fb 48 06 b4 	st.w	sp[1716],r8
8000e4d2:	14 97       	mov	r7,r10
8000e4d4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000e4d8:	c0 58       	rjmp	8000e4e2 <_vfprintf_r+0x14da>
8000e4da:	92 18       	ld.sh	r8,r9[0x2]
8000e4dc:	14 97       	mov	r7,r10
8000e4de:	2f c9       	sub	r9,-4
8000e4e0:	51 09       	stdsp	sp[0x40],r9
8000e4e2:	5c 78       	castu.h	r8
8000e4e4:	50 18       	stdsp	sp[0x4],r8
8000e4e6:	c4 68       	rjmp	8000e572 <_vfprintf_r+0x156a>
8000e4e8:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e4ec:	40 3c       	lddsp	r12,sp[0xc]
8000e4ee:	58 0c       	cp.w	r12,0
8000e4f0:	c1 d0       	breq	8000e52a <_vfprintf_r+0x1522>
8000e4f2:	10 36       	cp.w	r6,r8
8000e4f4:	c0 64       	brge	8000e500 <_vfprintf_r+0x14f8>
8000e4f6:	fa cb f9 44 	sub	r11,sp,-1724
8000e4fa:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e4fe:	c1 f8       	rjmp	8000e53c <_vfprintf_r+0x1534>
8000e500:	fa c8 f9 50 	sub	r8,sp,-1712
8000e504:	1a d8       	st.w	--sp,r8
8000e506:	fa c8 fa b8 	sub	r8,sp,-1352
8000e50a:	0c 9b       	mov	r11,r6
8000e50c:	1a d8       	st.w	--sp,r8
8000e50e:	fa c8 fb b4 	sub	r8,sp,-1100
8000e512:	04 9a       	mov	r10,r2
8000e514:	1a d8       	st.w	--sp,r8
8000e516:	08 9c       	mov	r12,r4
8000e518:	fa c8 f9 40 	sub	r8,sp,-1728
8000e51c:	fa c9 ff b4 	sub	r9,sp,-76
8000e520:	f0 1f 00 cb 	mcall	8000e84c <_vfprintf_r+0x1844>
8000e524:	2f dd       	sub	sp,-12
8000e526:	78 0b       	ld.w	r11,r12[0x0]
8000e528:	c2 48       	rjmp	8000e570 <_vfprintf_r+0x1568>
8000e52a:	ee ca ff ff 	sub	r10,r7,-1
8000e52e:	10 37       	cp.w	r7,r8
8000e530:	c0 94       	brge	8000e542 <_vfprintf_r+0x153a>
8000e532:	fa c9 f9 44 	sub	r9,sp,-1724
8000e536:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e53a:	14 97       	mov	r7,r10
8000e53c:	ec fb fd 88 	ld.w	r11,r6[-632]
8000e540:	c1 88       	rjmp	8000e570 <_vfprintf_r+0x1568>
8000e542:	41 09       	lddsp	r9,sp[0x40]
8000e544:	59 f8       	cp.w	r8,31
8000e546:	e0 89 00 11 	brgt	8000e568 <_vfprintf_r+0x1560>
8000e54a:	f2 cb ff fc 	sub	r11,r9,-4
8000e54e:	51 0b       	stdsp	sp[0x40],r11
8000e550:	fa c6 f9 44 	sub	r6,sp,-1724
8000e554:	72 0b       	ld.w	r11,r9[0x0]
8000e556:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000e55a:	f3 4b fd 88 	st.w	r9[-632],r11
8000e55e:	2f f8       	sub	r8,-1
8000e560:	14 97       	mov	r7,r10
8000e562:	fb 48 06 b4 	st.w	sp[1716],r8
8000e566:	c0 58       	rjmp	8000e570 <_vfprintf_r+0x1568>
8000e568:	72 0b       	ld.w	r11,r9[0x0]
8000e56a:	14 97       	mov	r7,r10
8000e56c:	2f c9       	sub	r9,-4
8000e56e:	51 09       	stdsp	sp[0x40],r9
8000e570:	50 1b       	stdsp	sp[0x4],r11
8000e572:	30 0e       	mov	lr,0
8000e574:	50 0e       	stdsp	sp[0x0],lr
8000e576:	40 08       	lddsp	r8,sp[0x0]
8000e578:	40 1c       	lddsp	r12,sp[0x4]
8000e57a:	18 48       	or	r8,r12
8000e57c:	5f 19       	srne	r9
8000e57e:	0a 98       	mov	r8,r5
8000e580:	eb e9 00 09 	and	r9,r5,r9
8000e584:	a1 b8       	sbr	r8,0x1
8000e586:	58 09       	cp.w	r9,0
8000e588:	c0 70       	breq	8000e596 <_vfprintf_r+0x158e>
8000e58a:	10 95       	mov	r5,r8
8000e58c:	fb 60 06 b9 	st.b	sp[1721],r0
8000e590:	33 08       	mov	r8,48
8000e592:	fb 68 06 b8 	st.b	sp[1720],r8
8000e596:	30 28       	mov	r8,2
8000e598:	30 09       	mov	r9,0
8000e59a:	fb 69 06 bb 	st.b	sp[1723],r9
8000e59e:	0a 99       	mov	r9,r5
8000e5a0:	a7 d9       	cbr	r9,0x7
8000e5a2:	40 2b       	lddsp	r11,sp[0x8]
8000e5a4:	40 16       	lddsp	r6,sp[0x4]
8000e5a6:	58 0b       	cp.w	r11,0
8000e5a8:	5f 1a       	srne	r10
8000e5aa:	f2 05 17 40 	movge	r5,r9
8000e5ae:	fa c2 f9 78 	sub	r2,sp,-1672
8000e5b2:	40 09       	lddsp	r9,sp[0x0]
8000e5b4:	0c 49       	or	r9,r6
8000e5b6:	5f 19       	srne	r9
8000e5b8:	f5 e9 10 09 	or	r9,r10,r9
8000e5bc:	c5 c0       	breq	8000e674 <_vfprintf_r+0x166c>
8000e5be:	30 19       	mov	r9,1
8000e5c0:	f2 08 18 00 	cp.b	r8,r9
8000e5c4:	c0 60       	breq	8000e5d0 <_vfprintf_r+0x15c8>
8000e5c6:	30 29       	mov	r9,2
8000e5c8:	f2 08 18 00 	cp.b	r8,r9
8000e5cc:	c0 41       	brne	8000e5d4 <_vfprintf_r+0x15cc>
8000e5ce:	c3 c8       	rjmp	8000e646 <_vfprintf_r+0x163e>
8000e5d0:	04 96       	mov	r6,r2
8000e5d2:	c3 08       	rjmp	8000e632 <_vfprintf_r+0x162a>
8000e5d4:	04 96       	mov	r6,r2
8000e5d6:	fa e8 00 00 	ld.d	r8,sp[0]
8000e5da:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000e5de:	2d 0a       	sub	r10,-48
8000e5e0:	0c fa       	st.b	--r6,r10
8000e5e2:	f0 0b 16 03 	lsr	r11,r8,0x3
8000e5e6:	f2 0c 16 03 	lsr	r12,r9,0x3
8000e5ea:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000e5ee:	18 99       	mov	r9,r12
8000e5f0:	16 98       	mov	r8,r11
8000e5f2:	58 08       	cp.w	r8,0
8000e5f4:	5c 29       	cpc	r9
8000e5f6:	cf 21       	brne	8000e5da <_vfprintf_r+0x15d2>
8000e5f8:	fa e9 00 00 	st.d	sp[0],r8
8000e5fc:	ed b5 00 00 	bld	r5,0x0
8000e600:	c4 51       	brne	8000e68a <_vfprintf_r+0x1682>
8000e602:	33 09       	mov	r9,48
8000e604:	f2 0a 18 00 	cp.b	r10,r9
8000e608:	c4 10       	breq	8000e68a <_vfprintf_r+0x1682>
8000e60a:	0c f9       	st.b	--r6,r9
8000e60c:	c3 f8       	rjmp	8000e68a <_vfprintf_r+0x1682>
8000e60e:	fa ea 00 00 	ld.d	r10,sp[0]
8000e612:	30 a8       	mov	r8,10
8000e614:	30 09       	mov	r9,0
8000e616:	f0 1f 00 8f 	mcall	8000e850 <_vfprintf_r+0x1848>
8000e61a:	30 a8       	mov	r8,10
8000e61c:	2d 0a       	sub	r10,-48
8000e61e:	30 09       	mov	r9,0
8000e620:	ac 8a       	st.b	r6[0x0],r10
8000e622:	fa ea 00 00 	ld.d	r10,sp[0]
8000e626:	f0 1f 00 8c 	mcall	8000e854 <_vfprintf_r+0x184c>
8000e62a:	16 99       	mov	r9,r11
8000e62c:	14 98       	mov	r8,r10
8000e62e:	fa e9 00 00 	st.d	sp[0],r8
8000e632:	20 16       	sub	r6,1
8000e634:	fa ea 00 00 	ld.d	r10,sp[0]
8000e638:	58 9a       	cp.w	r10,9
8000e63a:	5c 2b       	cpc	r11
8000e63c:	fe 9b ff e9 	brhi	8000e60e <_vfprintf_r+0x1606>
8000e640:	1b f8       	ld.ub	r8,sp[0x7]
8000e642:	2d 08       	sub	r8,-48
8000e644:	c2 08       	rjmp	8000e684 <_vfprintf_r+0x167c>
8000e646:	04 96       	mov	r6,r2
8000e648:	fa e8 00 00 	ld.d	r8,sp[0]
8000e64c:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000e650:	40 de       	lddsp	lr,sp[0x34]
8000e652:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000e656:	0c fa       	st.b	--r6,r10
8000e658:	f2 0b 16 04 	lsr	r11,r9,0x4
8000e65c:	f0 0a 16 04 	lsr	r10,r8,0x4
8000e660:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000e664:	16 99       	mov	r9,r11
8000e666:	14 98       	mov	r8,r10
8000e668:	58 08       	cp.w	r8,0
8000e66a:	5c 29       	cpc	r9
8000e66c:	cf 01       	brne	8000e64c <_vfprintf_r+0x1644>
8000e66e:	fa e9 00 00 	st.d	sp[0],r8
8000e672:	c0 c8       	rjmp	8000e68a <_vfprintf_r+0x1682>
8000e674:	58 08       	cp.w	r8,0
8000e676:	c0 91       	brne	8000e688 <_vfprintf_r+0x1680>
8000e678:	ed b5 00 00 	bld	r5,0x0
8000e67c:	c0 61       	brne	8000e688 <_vfprintf_r+0x1680>
8000e67e:	fa c6 f9 79 	sub	r6,sp,-1671
8000e682:	33 08       	mov	r8,48
8000e684:	ac 88       	st.b	r6[0x0],r8
8000e686:	c0 28       	rjmp	8000e68a <_vfprintf_r+0x1682>
8000e688:	04 96       	mov	r6,r2
8000e68a:	0c 12       	sub	r2,r6
8000e68c:	c1 c8       	rjmp	8000e6c4 <_vfprintf_r+0x16bc>
8000e68e:	50 a7       	stdsp	sp[0x28],r7
8000e690:	50 80       	stdsp	sp[0x20],r0
8000e692:	40 93       	lddsp	r3,sp[0x24]
8000e694:	0c 97       	mov	r7,r6
8000e696:	10 90       	mov	r0,r8
8000e698:	04 94       	mov	r4,r2
8000e69a:	40 41       	lddsp	r1,sp[0x10]
8000e69c:	58 08       	cp.w	r8,0
8000e69e:	e0 80 04 65 	breq	8000ef68 <_vfprintf_r+0x1f60>
8000e6a2:	fb 68 06 60 	st.b	sp[1632],r8
8000e6a6:	30 0c       	mov	r12,0
8000e6a8:	30 08       	mov	r8,0
8000e6aa:	30 12       	mov	r2,1
8000e6ac:	fb 68 06 bb 	st.b	sp[1723],r8
8000e6b0:	50 2c       	stdsp	sp[0x8],r12
8000e6b2:	fa c6 f9 a0 	sub	r6,sp,-1632
8000e6b6:	c0 78       	rjmp	8000e6c4 <_vfprintf_r+0x16bc>
8000e6b8:	30 0b       	mov	r11,0
8000e6ba:	50 2b       	stdsp	sp[0x8],r11
8000e6bc:	c0 48       	rjmp	8000e6c4 <_vfprintf_r+0x16bc>
8000e6be:	40 22       	lddsp	r2,sp[0x8]
8000e6c0:	30 0a       	mov	r10,0
8000e6c2:	50 2a       	stdsp	sp[0x8],r10
8000e6c4:	40 29       	lddsp	r9,sp[0x8]
8000e6c6:	e4 09 0c 49 	max	r9,r2,r9
8000e6ca:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000e6ce:	50 39       	stdsp	sp[0xc],r9
8000e6d0:	0a 9e       	mov	lr,r5
8000e6d2:	30 09       	mov	r9,0
8000e6d4:	e2 1e 00 02 	andl	lr,0x2,COH
8000e6d8:	f2 08 18 00 	cp.b	r8,r9
8000e6dc:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000e6e0:	f7 b8 01 ff 	subne	r8,-1
8000e6e4:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000e6e8:	0a 9b       	mov	r11,r5
8000e6ea:	58 0e       	cp.w	lr,0
8000e6ec:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000e6f0:	f7 bc 01 fe 	subne	r12,-2
8000e6f4:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000e6f8:	e2 1b 00 84 	andl	r11,0x84,COH
8000e6fc:	50 fe       	stdsp	sp[0x3c],lr
8000e6fe:	50 9b       	stdsp	sp[0x24],r11
8000e700:	c4 51       	brne	8000e78a <_vfprintf_r+0x1782>
8000e702:	40 8a       	lddsp	r10,sp[0x20]
8000e704:	40 39       	lddsp	r9,sp[0xc]
8000e706:	12 1a       	sub	r10,r9
8000e708:	50 4a       	stdsp	sp[0x10],r10
8000e70a:	58 0a       	cp.w	r10,0
8000e70c:	e0 89 00 1f 	brgt	8000e74a <_vfprintf_r+0x1742>
8000e710:	c3 d8       	rjmp	8000e78a <_vfprintf_r+0x1782>
8000e712:	2f 09       	sub	r9,-16
8000e714:	2f f8       	sub	r8,-1
8000e716:	4d 1e       	lddpc	lr,8000e858 <_vfprintf_r+0x1850>
8000e718:	31 0c       	mov	r12,16
8000e71a:	fb 49 06 90 	st.w	sp[1680],r9
8000e71e:	87 0e       	st.w	r3[0x0],lr
8000e720:	87 1c       	st.w	r3[0x4],r12
8000e722:	fb 48 06 8c 	st.w	sp[1676],r8
8000e726:	58 78       	cp.w	r8,7
8000e728:	e0 89 00 04 	brgt	8000e730 <_vfprintf_r+0x1728>
8000e72c:	2f 83       	sub	r3,-8
8000e72e:	c0 b8       	rjmp	8000e744 <_vfprintf_r+0x173c>
8000e730:	fa ca f9 78 	sub	r10,sp,-1672
8000e734:	02 9b       	mov	r11,r1
8000e736:	08 9c       	mov	r12,r4
8000e738:	f0 1f 00 49 	mcall	8000e85c <_vfprintf_r+0x1854>
8000e73c:	e0 81 04 27 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000e740:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e744:	40 4b       	lddsp	r11,sp[0x10]
8000e746:	21 0b       	sub	r11,16
8000e748:	50 4b       	stdsp	sp[0x10],r11
8000e74a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e74e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e752:	4c 2a       	lddpc	r10,8000e858 <_vfprintf_r+0x1850>
8000e754:	40 4e       	lddsp	lr,sp[0x10]
8000e756:	59 0e       	cp.w	lr,16
8000e758:	fe 99 ff dd 	brgt	8000e712 <_vfprintf_r+0x170a>
8000e75c:	1c 09       	add	r9,lr
8000e75e:	2f f8       	sub	r8,-1
8000e760:	87 0a       	st.w	r3[0x0],r10
8000e762:	fb 49 06 90 	st.w	sp[1680],r9
8000e766:	87 1e       	st.w	r3[0x4],lr
8000e768:	fb 48 06 8c 	st.w	sp[1676],r8
8000e76c:	58 78       	cp.w	r8,7
8000e76e:	e0 89 00 04 	brgt	8000e776 <_vfprintf_r+0x176e>
8000e772:	2f 83       	sub	r3,-8
8000e774:	c0 b8       	rjmp	8000e78a <_vfprintf_r+0x1782>
8000e776:	fa ca f9 78 	sub	r10,sp,-1672
8000e77a:	02 9b       	mov	r11,r1
8000e77c:	08 9c       	mov	r12,r4
8000e77e:	f0 1f 00 38 	mcall	8000e85c <_vfprintf_r+0x1854>
8000e782:	e0 81 04 04 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000e786:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e78a:	30 09       	mov	r9,0
8000e78c:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000e790:	f2 08 18 00 	cp.b	r8,r9
8000e794:	c1 f0       	breq	8000e7d2 <_vfprintf_r+0x17ca>
8000e796:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e79a:	fa c9 f9 45 	sub	r9,sp,-1723
8000e79e:	2f f8       	sub	r8,-1
8000e7a0:	87 09       	st.w	r3[0x0],r9
8000e7a2:	fb 48 06 90 	st.w	sp[1680],r8
8000e7a6:	30 19       	mov	r9,1
8000e7a8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e7ac:	87 19       	st.w	r3[0x4],r9
8000e7ae:	2f f8       	sub	r8,-1
8000e7b0:	fb 48 06 8c 	st.w	sp[1676],r8
8000e7b4:	58 78       	cp.w	r8,7
8000e7b6:	e0 89 00 04 	brgt	8000e7be <_vfprintf_r+0x17b6>
8000e7ba:	2f 83       	sub	r3,-8
8000e7bc:	c0 b8       	rjmp	8000e7d2 <_vfprintf_r+0x17ca>
8000e7be:	fa ca f9 78 	sub	r10,sp,-1672
8000e7c2:	02 9b       	mov	r11,r1
8000e7c4:	08 9c       	mov	r12,r4
8000e7c6:	f0 1f 00 26 	mcall	8000e85c <_vfprintf_r+0x1854>
8000e7ca:	e0 81 03 e0 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000e7ce:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e7d2:	40 fc       	lddsp	r12,sp[0x3c]
8000e7d4:	58 0c       	cp.w	r12,0
8000e7d6:	c1 f0       	breq	8000e814 <_vfprintf_r+0x180c>
8000e7d8:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e7dc:	fa c9 f9 48 	sub	r9,sp,-1720
8000e7e0:	2f e8       	sub	r8,-2
8000e7e2:	87 09       	st.w	r3[0x0],r9
8000e7e4:	fb 48 06 90 	st.w	sp[1680],r8
8000e7e8:	30 29       	mov	r9,2
8000e7ea:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e7ee:	87 19       	st.w	r3[0x4],r9
8000e7f0:	2f f8       	sub	r8,-1
8000e7f2:	fb 48 06 8c 	st.w	sp[1676],r8
8000e7f6:	58 78       	cp.w	r8,7
8000e7f8:	e0 89 00 04 	brgt	8000e800 <_vfprintf_r+0x17f8>
8000e7fc:	2f 83       	sub	r3,-8
8000e7fe:	c0 b8       	rjmp	8000e814 <_vfprintf_r+0x180c>
8000e800:	fa ca f9 78 	sub	r10,sp,-1672
8000e804:	02 9b       	mov	r11,r1
8000e806:	08 9c       	mov	r12,r4
8000e808:	f0 1f 00 15 	mcall	8000e85c <_vfprintf_r+0x1854>
8000e80c:	e0 81 03 bf 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000e810:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e814:	40 9b       	lddsp	r11,sp[0x24]
8000e816:	e0 4b 00 80 	cp.w	r11,128
8000e81a:	c5 21       	brne	8000e8be <_vfprintf_r+0x18b6>
8000e81c:	40 8a       	lddsp	r10,sp[0x20]
8000e81e:	40 39       	lddsp	r9,sp[0xc]
8000e820:	12 1a       	sub	r10,r9
8000e822:	50 4a       	stdsp	sp[0x10],r10
8000e824:	58 0a       	cp.w	r10,0
8000e826:	e0 89 00 2c 	brgt	8000e87e <_vfprintf_r+0x1876>
8000e82a:	c4 a8       	rjmp	8000e8be <_vfprintf_r+0x18b6>
8000e82c:	2f 09       	sub	r9,-16
8000e82e:	2f f8       	sub	r8,-1
8000e830:	48 ce       	lddpc	lr,8000e860 <_vfprintf_r+0x1858>
8000e832:	31 0c       	mov	r12,16
8000e834:	fb 49 06 90 	st.w	sp[1680],r9
8000e838:	87 0e       	st.w	r3[0x0],lr
8000e83a:	87 1c       	st.w	r3[0x4],r12
8000e83c:	fb 48 06 8c 	st.w	sp[1676],r8
8000e840:	58 78       	cp.w	r8,7
8000e842:	e0 89 00 11 	brgt	8000e864 <_vfprintf_r+0x185c>
8000e846:	2f 83       	sub	r3,-8
8000e848:	c1 88       	rjmp	8000e878 <_vfprintf_r+0x1870>
8000e84a:	00 00       	add	r0,r0
8000e84c:	80 00       	ld.sh	r0,r0[0x0]
8000e84e:	cc c4       	brge	8000e7e6 <_vfprintf_r+0x17de>
8000e850:	80 01       	ld.sh	r1,r0[0x0]
8000e852:	1d 6c       	ld.uh	r12,--lr
8000e854:	80 00       	ld.sh	r0,r0[0x0]
8000e856:	c8 92       	brcc	8000e768 <_vfprintf_r+0x1760>
8000e858:	80 01       	ld.sh	r1,r0[0x0]
8000e85a:	28 0c       	sub	r12,-128
8000e85c:	80 00       	ld.sh	r0,r0[0x0]
8000e85e:	cf e8       	rjmp	8000ea5a <_vfprintf_r+0x1a52>
8000e860:	80 01       	ld.sh	r1,r0[0x0]
8000e862:	28 1c       	sub	r12,-127
8000e864:	fa ca f9 78 	sub	r10,sp,-1672
8000e868:	02 9b       	mov	r11,r1
8000e86a:	08 9c       	mov	r12,r4
8000e86c:	f0 1f 00 4c 	mcall	8000e99c <_vfprintf_r+0x1994>
8000e870:	e0 81 03 8d 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000e874:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e878:	40 4b       	lddsp	r11,sp[0x10]
8000e87a:	21 0b       	sub	r11,16
8000e87c:	50 4b       	stdsp	sp[0x10],r11
8000e87e:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e882:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e886:	4c 7a       	lddpc	r10,8000e9a0 <_vfprintf_r+0x1998>
8000e888:	40 4e       	lddsp	lr,sp[0x10]
8000e88a:	59 0e       	cp.w	lr,16
8000e88c:	fe 99 ff d0 	brgt	8000e82c <_vfprintf_r+0x1824>
8000e890:	1c 09       	add	r9,lr
8000e892:	2f f8       	sub	r8,-1
8000e894:	87 0a       	st.w	r3[0x0],r10
8000e896:	fb 49 06 90 	st.w	sp[1680],r9
8000e89a:	87 1e       	st.w	r3[0x4],lr
8000e89c:	fb 48 06 8c 	st.w	sp[1676],r8
8000e8a0:	58 78       	cp.w	r8,7
8000e8a2:	e0 89 00 04 	brgt	8000e8aa <_vfprintf_r+0x18a2>
8000e8a6:	2f 83       	sub	r3,-8
8000e8a8:	c0 b8       	rjmp	8000e8be <_vfprintf_r+0x18b6>
8000e8aa:	fa ca f9 78 	sub	r10,sp,-1672
8000e8ae:	02 9b       	mov	r11,r1
8000e8b0:	08 9c       	mov	r12,r4
8000e8b2:	f0 1f 00 3b 	mcall	8000e99c <_vfprintf_r+0x1994>
8000e8b6:	e0 81 03 6a 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000e8ba:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e8be:	40 2c       	lddsp	r12,sp[0x8]
8000e8c0:	04 1c       	sub	r12,r2
8000e8c2:	50 2c       	stdsp	sp[0x8],r12
8000e8c4:	58 0c       	cp.w	r12,0
8000e8c6:	e0 89 00 1f 	brgt	8000e904 <_vfprintf_r+0x18fc>
8000e8ca:	c3 d8       	rjmp	8000e944 <_vfprintf_r+0x193c>
8000e8cc:	2f 09       	sub	r9,-16
8000e8ce:	2f f8       	sub	r8,-1
8000e8d0:	4b 4b       	lddpc	r11,8000e9a0 <_vfprintf_r+0x1998>
8000e8d2:	31 0a       	mov	r10,16
8000e8d4:	fb 49 06 90 	st.w	sp[1680],r9
8000e8d8:	87 0b       	st.w	r3[0x0],r11
8000e8da:	87 1a       	st.w	r3[0x4],r10
8000e8dc:	fb 48 06 8c 	st.w	sp[1676],r8
8000e8e0:	58 78       	cp.w	r8,7
8000e8e2:	e0 89 00 04 	brgt	8000e8ea <_vfprintf_r+0x18e2>
8000e8e6:	2f 83       	sub	r3,-8
8000e8e8:	c0 b8       	rjmp	8000e8fe <_vfprintf_r+0x18f6>
8000e8ea:	fa ca f9 78 	sub	r10,sp,-1672
8000e8ee:	02 9b       	mov	r11,r1
8000e8f0:	08 9c       	mov	r12,r4
8000e8f2:	f0 1f 00 2b 	mcall	8000e99c <_vfprintf_r+0x1994>
8000e8f6:	e0 81 03 4a 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000e8fa:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e8fe:	40 29       	lddsp	r9,sp[0x8]
8000e900:	21 09       	sub	r9,16
8000e902:	50 29       	stdsp	sp[0x8],r9
8000e904:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e908:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e90c:	4a 5a       	lddpc	r10,8000e9a0 <_vfprintf_r+0x1998>
8000e90e:	40 2e       	lddsp	lr,sp[0x8]
8000e910:	59 0e       	cp.w	lr,16
8000e912:	fe 99 ff dd 	brgt	8000e8cc <_vfprintf_r+0x18c4>
8000e916:	1c 09       	add	r9,lr
8000e918:	2f f8       	sub	r8,-1
8000e91a:	87 0a       	st.w	r3[0x0],r10
8000e91c:	fb 49 06 90 	st.w	sp[1680],r9
8000e920:	87 1e       	st.w	r3[0x4],lr
8000e922:	fb 48 06 8c 	st.w	sp[1676],r8
8000e926:	58 78       	cp.w	r8,7
8000e928:	e0 89 00 04 	brgt	8000e930 <_vfprintf_r+0x1928>
8000e92c:	2f 83       	sub	r3,-8
8000e92e:	c0 b8       	rjmp	8000e944 <_vfprintf_r+0x193c>
8000e930:	fa ca f9 78 	sub	r10,sp,-1672
8000e934:	02 9b       	mov	r11,r1
8000e936:	08 9c       	mov	r12,r4
8000e938:	f0 1f 00 19 	mcall	8000e99c <_vfprintf_r+0x1994>
8000e93c:	e0 81 03 27 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000e940:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e944:	ed b5 00 08 	bld	r5,0x8
8000e948:	c0 b0       	breq	8000e95e <_vfprintf_r+0x1956>
8000e94a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e94e:	87 12       	st.w	r3[0x4],r2
8000e950:	87 06       	st.w	r3[0x0],r6
8000e952:	f0 02 00 02 	add	r2,r8,r2
8000e956:	fb 42 06 90 	st.w	sp[1680],r2
8000e95a:	e0 8f 01 db 	bral	8000ed10 <_vfprintf_r+0x1d08>
8000e95e:	e0 40 00 65 	cp.w	r0,101
8000e962:	e0 8a 01 dd 	brle	8000ed1c <_vfprintf_r+0x1d14>
8000e966:	30 08       	mov	r8,0
8000e968:	30 09       	mov	r9,0
8000e96a:	40 5b       	lddsp	r11,sp[0x14]
8000e96c:	40 7a       	lddsp	r10,sp[0x1c]
8000e96e:	f0 1f 00 0e 	mcall	8000e9a4 <_vfprintf_r+0x199c>
8000e972:	c7 e0       	breq	8000ea6e <_vfprintf_r+0x1a66>
8000e974:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e978:	48 c9       	lddpc	r9,8000e9a8 <_vfprintf_r+0x19a0>
8000e97a:	2f f8       	sub	r8,-1
8000e97c:	87 09       	st.w	r3[0x0],r9
8000e97e:	fb 48 06 90 	st.w	sp[1680],r8
8000e982:	30 19       	mov	r9,1
8000e984:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e988:	87 19       	st.w	r3[0x4],r9
8000e98a:	2f f8       	sub	r8,-1
8000e98c:	fb 48 06 8c 	st.w	sp[1676],r8
8000e990:	58 78       	cp.w	r8,7
8000e992:	e0 89 00 0d 	brgt	8000e9ac <_vfprintf_r+0x19a4>
8000e996:	2f 83       	sub	r3,-8
8000e998:	c1 48       	rjmp	8000e9c0 <_vfprintf_r+0x19b8>
8000e99a:	00 00       	add	r0,r0
8000e99c:	80 00       	ld.sh	r0,r0[0x0]
8000e99e:	cf e8       	rjmp	8000eb9a <_vfprintf_r+0x1b92>
8000e9a0:	80 01       	ld.sh	r1,r0[0x0]
8000e9a2:	28 1c       	sub	r12,-127
8000e9a4:	80 01       	ld.sh	r1,r0[0x0]
8000e9a6:	19 5e       	ld.sh	lr,--r12
8000e9a8:	80 01       	ld.sh	r1,r0[0x0]
8000e9aa:	28 08       	sub	r8,-128
8000e9ac:	fa ca f9 78 	sub	r10,sp,-1672
8000e9b0:	02 9b       	mov	r11,r1
8000e9b2:	08 9c       	mov	r12,r4
8000e9b4:	f0 1f 00 78 	mcall	8000eb94 <_vfprintf_r+0x1b8c>
8000e9b8:	e0 81 02 e9 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000e9bc:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e9c0:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000e9c4:	40 6c       	lddsp	r12,sp[0x18]
8000e9c6:	18 38       	cp.w	r8,r12
8000e9c8:	c0 55       	brlt	8000e9d2 <_vfprintf_r+0x19ca>
8000e9ca:	ed b5 00 00 	bld	r5,0x0
8000e9ce:	e0 81 02 6d 	brne	8000eea8 <_vfprintf_r+0x1ea0>
8000e9d2:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e9d6:	2f f8       	sub	r8,-1
8000e9d8:	40 cb       	lddsp	r11,sp[0x30]
8000e9da:	fb 48 06 90 	st.w	sp[1680],r8
8000e9de:	30 19       	mov	r9,1
8000e9e0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e9e4:	87 0b       	st.w	r3[0x0],r11
8000e9e6:	2f f8       	sub	r8,-1
8000e9e8:	87 19       	st.w	r3[0x4],r9
8000e9ea:	fb 48 06 8c 	st.w	sp[1676],r8
8000e9ee:	58 78       	cp.w	r8,7
8000e9f0:	e0 89 00 04 	brgt	8000e9f8 <_vfprintf_r+0x19f0>
8000e9f4:	2f 83       	sub	r3,-8
8000e9f6:	c0 b8       	rjmp	8000ea0c <_vfprintf_r+0x1a04>
8000e9f8:	fa ca f9 78 	sub	r10,sp,-1672
8000e9fc:	02 9b       	mov	r11,r1
8000e9fe:	08 9c       	mov	r12,r4
8000ea00:	f0 1f 00 65 	mcall	8000eb94 <_vfprintf_r+0x1b8c>
8000ea04:	e0 81 02 c3 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ea08:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ea0c:	40 66       	lddsp	r6,sp[0x18]
8000ea0e:	20 16       	sub	r6,1
8000ea10:	58 06       	cp.w	r6,0
8000ea12:	e0 89 00 1d 	brgt	8000ea4c <_vfprintf_r+0x1a44>
8000ea16:	e0 8f 02 49 	bral	8000eea8 <_vfprintf_r+0x1ea0>
8000ea1a:	2f 09       	sub	r9,-16
8000ea1c:	2f f8       	sub	r8,-1
8000ea1e:	fb 49 06 90 	st.w	sp[1680],r9
8000ea22:	87 02       	st.w	r3[0x0],r2
8000ea24:	87 10       	st.w	r3[0x4],r0
8000ea26:	fb 48 06 8c 	st.w	sp[1676],r8
8000ea2a:	58 78       	cp.w	r8,7
8000ea2c:	e0 89 00 04 	brgt	8000ea34 <_vfprintf_r+0x1a2c>
8000ea30:	2f 83       	sub	r3,-8
8000ea32:	c0 b8       	rjmp	8000ea48 <_vfprintf_r+0x1a40>
8000ea34:	fa ca f9 78 	sub	r10,sp,-1672
8000ea38:	02 9b       	mov	r11,r1
8000ea3a:	08 9c       	mov	r12,r4
8000ea3c:	f0 1f 00 56 	mcall	8000eb94 <_vfprintf_r+0x1b8c>
8000ea40:	e0 81 02 a5 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ea44:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ea48:	21 06       	sub	r6,16
8000ea4a:	c0 38       	rjmp	8000ea50 <_vfprintf_r+0x1a48>
8000ea4c:	4d 32       	lddpc	r2,8000eb98 <_vfprintf_r+0x1b90>
8000ea4e:	31 00       	mov	r0,16
8000ea50:	fa f9 06 90 	ld.w	r9,sp[1680]
8000ea54:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ea58:	4d 0a       	lddpc	r10,8000eb98 <_vfprintf_r+0x1b90>
8000ea5a:	59 06       	cp.w	r6,16
8000ea5c:	fe 99 ff df 	brgt	8000ea1a <_vfprintf_r+0x1a12>
8000ea60:	0c 09       	add	r9,r6
8000ea62:	87 0a       	st.w	r3[0x0],r10
8000ea64:	fb 49 06 90 	st.w	sp[1680],r9
8000ea68:	2f f8       	sub	r8,-1
8000ea6a:	87 16       	st.w	r3[0x4],r6
8000ea6c:	c5 59       	rjmp	8000ed16 <_vfprintf_r+0x1d0e>
8000ea6e:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000ea72:	58 0a       	cp.w	r10,0
8000ea74:	e0 89 00 96 	brgt	8000eba0 <_vfprintf_r+0x1b98>
8000ea78:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ea7c:	4c 89       	lddpc	r9,8000eb9c <_vfprintf_r+0x1b94>
8000ea7e:	2f f8       	sub	r8,-1
8000ea80:	87 09       	st.w	r3[0x0],r9
8000ea82:	fb 48 06 90 	st.w	sp[1680],r8
8000ea86:	30 19       	mov	r9,1
8000ea88:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ea8c:	87 19       	st.w	r3[0x4],r9
8000ea8e:	2f f8       	sub	r8,-1
8000ea90:	fb 48 06 8c 	st.w	sp[1676],r8
8000ea94:	58 78       	cp.w	r8,7
8000ea96:	e0 89 00 04 	brgt	8000ea9e <_vfprintf_r+0x1a96>
8000ea9a:	2f 83       	sub	r3,-8
8000ea9c:	c0 b8       	rjmp	8000eab2 <_vfprintf_r+0x1aaa>
8000ea9e:	fa ca f9 78 	sub	r10,sp,-1672
8000eaa2:	02 9b       	mov	r11,r1
8000eaa4:	08 9c       	mov	r12,r4
8000eaa6:	f0 1f 00 3c 	mcall	8000eb94 <_vfprintf_r+0x1b8c>
8000eaaa:	e0 81 02 70 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000eaae:	fa c3 f9 e0 	sub	r3,sp,-1568
8000eab2:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000eab6:	58 08       	cp.w	r8,0
8000eab8:	c0 81       	brne	8000eac8 <_vfprintf_r+0x1ac0>
8000eaba:	40 6a       	lddsp	r10,sp[0x18]
8000eabc:	58 0a       	cp.w	r10,0
8000eabe:	c0 51       	brne	8000eac8 <_vfprintf_r+0x1ac0>
8000eac0:	ed b5 00 00 	bld	r5,0x0
8000eac4:	e0 81 01 f2 	brne	8000eea8 <_vfprintf_r+0x1ea0>
8000eac8:	40 c9       	lddsp	r9,sp[0x30]
8000eaca:	fa f8 06 90 	ld.w	r8,sp[1680]
8000eace:	2f f8       	sub	r8,-1
8000ead0:	87 09       	st.w	r3[0x0],r9
8000ead2:	fb 48 06 90 	st.w	sp[1680],r8
8000ead6:	30 19       	mov	r9,1
8000ead8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000eadc:	87 19       	st.w	r3[0x4],r9
8000eade:	2f f8       	sub	r8,-1
8000eae0:	fb 48 06 8c 	st.w	sp[1676],r8
8000eae4:	58 78       	cp.w	r8,7
8000eae6:	e0 89 00 04 	brgt	8000eaee <_vfprintf_r+0x1ae6>
8000eaea:	2f 83       	sub	r3,-8
8000eaec:	c0 b8       	rjmp	8000eb02 <_vfprintf_r+0x1afa>
8000eaee:	fa ca f9 78 	sub	r10,sp,-1672
8000eaf2:	02 9b       	mov	r11,r1
8000eaf4:	08 9c       	mov	r12,r4
8000eaf6:	f0 1f 00 28 	mcall	8000eb94 <_vfprintf_r+0x1b8c>
8000eafa:	e0 81 02 48 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000eafe:	fa c3 f9 e0 	sub	r3,sp,-1568
8000eb02:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000eb06:	5c 32       	neg	r2
8000eb08:	58 02       	cp.w	r2,0
8000eb0a:	e0 89 00 1d 	brgt	8000eb44 <_vfprintf_r+0x1b3c>
8000eb0e:	c3 b8       	rjmp	8000eb84 <_vfprintf_r+0x1b7c>
8000eb10:	2f 09       	sub	r9,-16
8000eb12:	2f f8       	sub	r8,-1
8000eb14:	31 0e       	mov	lr,16
8000eb16:	fb 49 06 90 	st.w	sp[1680],r9
8000eb1a:	87 00       	st.w	r3[0x0],r0
8000eb1c:	87 1e       	st.w	r3[0x4],lr
8000eb1e:	fb 48 06 8c 	st.w	sp[1676],r8
8000eb22:	58 78       	cp.w	r8,7
8000eb24:	e0 89 00 04 	brgt	8000eb2c <_vfprintf_r+0x1b24>
8000eb28:	2f 83       	sub	r3,-8
8000eb2a:	c0 b8       	rjmp	8000eb40 <_vfprintf_r+0x1b38>
8000eb2c:	fa ca f9 78 	sub	r10,sp,-1672
8000eb30:	02 9b       	mov	r11,r1
8000eb32:	08 9c       	mov	r12,r4
8000eb34:	f0 1f 00 18 	mcall	8000eb94 <_vfprintf_r+0x1b8c>
8000eb38:	e0 81 02 29 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000eb3c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000eb40:	21 02       	sub	r2,16
8000eb42:	c0 28       	rjmp	8000eb46 <_vfprintf_r+0x1b3e>
8000eb44:	49 50       	lddpc	r0,8000eb98 <_vfprintf_r+0x1b90>
8000eb46:	fa f9 06 90 	ld.w	r9,sp[1680]
8000eb4a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000eb4e:	49 3a       	lddpc	r10,8000eb98 <_vfprintf_r+0x1b90>
8000eb50:	59 02       	cp.w	r2,16
8000eb52:	fe 99 ff df 	brgt	8000eb10 <_vfprintf_r+0x1b08>
8000eb56:	04 09       	add	r9,r2
8000eb58:	2f f8       	sub	r8,-1
8000eb5a:	87 0a       	st.w	r3[0x0],r10
8000eb5c:	fb 49 06 90 	st.w	sp[1680],r9
8000eb60:	87 12       	st.w	r3[0x4],r2
8000eb62:	fb 48 06 8c 	st.w	sp[1676],r8
8000eb66:	58 78       	cp.w	r8,7
8000eb68:	e0 89 00 04 	brgt	8000eb70 <_vfprintf_r+0x1b68>
8000eb6c:	2f 83       	sub	r3,-8
8000eb6e:	c0 b8       	rjmp	8000eb84 <_vfprintf_r+0x1b7c>
8000eb70:	fa ca f9 78 	sub	r10,sp,-1672
8000eb74:	02 9b       	mov	r11,r1
8000eb76:	08 9c       	mov	r12,r4
8000eb78:	f0 1f 00 07 	mcall	8000eb94 <_vfprintf_r+0x1b8c>
8000eb7c:	e0 81 02 07 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000eb80:	fa c3 f9 e0 	sub	r3,sp,-1568
8000eb84:	40 6c       	lddsp	r12,sp[0x18]
8000eb86:	fa f8 06 90 	ld.w	r8,sp[1680]
8000eb8a:	87 06       	st.w	r3[0x0],r6
8000eb8c:	87 1c       	st.w	r3[0x4],r12
8000eb8e:	18 08       	add	r8,r12
8000eb90:	cb e8       	rjmp	8000ed0c <_vfprintf_r+0x1d04>
8000eb92:	00 00       	add	r0,r0
8000eb94:	80 00       	ld.sh	r0,r0[0x0]
8000eb96:	cf e8       	rjmp	8000ed92 <_vfprintf_r+0x1d8a>
8000eb98:	80 01       	ld.sh	r1,r0[0x0]
8000eb9a:	28 1c       	sub	r12,-127
8000eb9c:	80 01       	ld.sh	r1,r0[0x0]
8000eb9e:	28 08       	sub	r8,-128
8000eba0:	fa f9 06 90 	ld.w	r9,sp[1680]
8000eba4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000eba8:	40 6b       	lddsp	r11,sp[0x18]
8000ebaa:	16 3a       	cp.w	r10,r11
8000ebac:	c6 d5       	brlt	8000ec86 <_vfprintf_r+0x1c7e>
8000ebae:	16 09       	add	r9,r11
8000ebb0:	2f f8       	sub	r8,-1
8000ebb2:	87 06       	st.w	r3[0x0],r6
8000ebb4:	fb 49 06 90 	st.w	sp[1680],r9
8000ebb8:	87 1b       	st.w	r3[0x4],r11
8000ebba:	fb 48 06 8c 	st.w	sp[1676],r8
8000ebbe:	58 78       	cp.w	r8,7
8000ebc0:	e0 89 00 04 	brgt	8000ebc8 <_vfprintf_r+0x1bc0>
8000ebc4:	2f 83       	sub	r3,-8
8000ebc6:	c0 b8       	rjmp	8000ebdc <_vfprintf_r+0x1bd4>
8000ebc8:	fa ca f9 78 	sub	r10,sp,-1672
8000ebcc:	02 9b       	mov	r11,r1
8000ebce:	08 9c       	mov	r12,r4
8000ebd0:	f0 1f 00 6f 	mcall	8000ed8c <_vfprintf_r+0x1d84>
8000ebd4:	e0 81 01 db 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ebd8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ebdc:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000ebe0:	40 6a       	lddsp	r10,sp[0x18]
8000ebe2:	14 16       	sub	r6,r10
8000ebe4:	58 06       	cp.w	r6,0
8000ebe6:	e0 89 00 1c 	brgt	8000ec1e <_vfprintf_r+0x1c16>
8000ebea:	c3 b8       	rjmp	8000ec60 <_vfprintf_r+0x1c58>
8000ebec:	2f 09       	sub	r9,-16
8000ebee:	2f f8       	sub	r8,-1
8000ebf0:	fb 49 06 90 	st.w	sp[1680],r9
8000ebf4:	87 02       	st.w	r3[0x0],r2
8000ebf6:	87 10       	st.w	r3[0x4],r0
8000ebf8:	fb 48 06 8c 	st.w	sp[1676],r8
8000ebfc:	58 78       	cp.w	r8,7
8000ebfe:	e0 89 00 04 	brgt	8000ec06 <_vfprintf_r+0x1bfe>
8000ec02:	2f 83       	sub	r3,-8
8000ec04:	c0 b8       	rjmp	8000ec1a <_vfprintf_r+0x1c12>
8000ec06:	fa ca f9 78 	sub	r10,sp,-1672
8000ec0a:	02 9b       	mov	r11,r1
8000ec0c:	08 9c       	mov	r12,r4
8000ec0e:	f0 1f 00 60 	mcall	8000ed8c <_vfprintf_r+0x1d84>
8000ec12:	e0 81 01 bc 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ec16:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ec1a:	21 06       	sub	r6,16
8000ec1c:	c0 38       	rjmp	8000ec22 <_vfprintf_r+0x1c1a>
8000ec1e:	4d d2       	lddpc	r2,8000ed90 <_vfprintf_r+0x1d88>
8000ec20:	31 00       	mov	r0,16
8000ec22:	fa f9 06 90 	ld.w	r9,sp[1680]
8000ec26:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ec2a:	4d aa       	lddpc	r10,8000ed90 <_vfprintf_r+0x1d88>
8000ec2c:	59 06       	cp.w	r6,16
8000ec2e:	fe 99 ff df 	brgt	8000ebec <_vfprintf_r+0x1be4>
8000ec32:	0c 09       	add	r9,r6
8000ec34:	2f f8       	sub	r8,-1
8000ec36:	87 0a       	st.w	r3[0x0],r10
8000ec38:	fb 49 06 90 	st.w	sp[1680],r9
8000ec3c:	87 16       	st.w	r3[0x4],r6
8000ec3e:	fb 48 06 8c 	st.w	sp[1676],r8
8000ec42:	58 78       	cp.w	r8,7
8000ec44:	e0 89 00 04 	brgt	8000ec4c <_vfprintf_r+0x1c44>
8000ec48:	2f 83       	sub	r3,-8
8000ec4a:	c0 b8       	rjmp	8000ec60 <_vfprintf_r+0x1c58>
8000ec4c:	fa ca f9 78 	sub	r10,sp,-1672
8000ec50:	02 9b       	mov	r11,r1
8000ec52:	08 9c       	mov	r12,r4
8000ec54:	f0 1f 00 4e 	mcall	8000ed8c <_vfprintf_r+0x1d84>
8000ec58:	e0 81 01 99 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ec5c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ec60:	ed b5 00 00 	bld	r5,0x0
8000ec64:	e0 81 01 22 	brne	8000eea8 <_vfprintf_r+0x1ea0>
8000ec68:	40 c9       	lddsp	r9,sp[0x30]
8000ec6a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ec6e:	2f f8       	sub	r8,-1
8000ec70:	87 09       	st.w	r3[0x0],r9
8000ec72:	fb 48 06 90 	st.w	sp[1680],r8
8000ec76:	30 19       	mov	r9,1
8000ec78:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ec7c:	87 19       	st.w	r3[0x4],r9
8000ec7e:	2f f8       	sub	r8,-1
8000ec80:	fb 48 06 8c 	st.w	sp[1676],r8
8000ec84:	c0 49       	rjmp	8000ee8c <_vfprintf_r+0x1e84>
8000ec86:	14 09       	add	r9,r10
8000ec88:	2f f8       	sub	r8,-1
8000ec8a:	fb 49 06 90 	st.w	sp[1680],r9
8000ec8e:	87 06       	st.w	r3[0x0],r6
8000ec90:	87 1a       	st.w	r3[0x4],r10
8000ec92:	fb 48 06 8c 	st.w	sp[1676],r8
8000ec96:	58 78       	cp.w	r8,7
8000ec98:	e0 89 00 04 	brgt	8000eca0 <_vfprintf_r+0x1c98>
8000ec9c:	2f 83       	sub	r3,-8
8000ec9e:	c0 b8       	rjmp	8000ecb4 <_vfprintf_r+0x1cac>
8000eca0:	fa ca f9 78 	sub	r10,sp,-1672
8000eca4:	02 9b       	mov	r11,r1
8000eca6:	08 9c       	mov	r12,r4
8000eca8:	f0 1f 00 39 	mcall	8000ed8c <_vfprintf_r+0x1d84>
8000ecac:	e0 81 01 6f 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ecb0:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ecb4:	40 c8       	lddsp	r8,sp[0x30]
8000ecb6:	87 08       	st.w	r3[0x0],r8
8000ecb8:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ecbc:	2f f8       	sub	r8,-1
8000ecbe:	30 19       	mov	r9,1
8000ecc0:	fb 48 06 90 	st.w	sp[1680],r8
8000ecc4:	87 19       	st.w	r3[0x4],r9
8000ecc6:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ecca:	2f f8       	sub	r8,-1
8000eccc:	fb 48 06 8c 	st.w	sp[1676],r8
8000ecd0:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000ecd4:	58 78       	cp.w	r8,7
8000ecd6:	e0 89 00 04 	brgt	8000ecde <_vfprintf_r+0x1cd6>
8000ecda:	2f 83       	sub	r3,-8
8000ecdc:	c0 b8       	rjmp	8000ecf2 <_vfprintf_r+0x1cea>
8000ecde:	fa ca f9 78 	sub	r10,sp,-1672
8000ece2:	02 9b       	mov	r11,r1
8000ece4:	08 9c       	mov	r12,r4
8000ece6:	f0 1f 00 2a 	mcall	8000ed8c <_vfprintf_r+0x1d84>
8000ecea:	e0 81 01 50 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ecee:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ecf2:	04 06       	add	r6,r2
8000ecf4:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000ecf8:	87 06       	st.w	r3[0x0],r6
8000ecfa:	fa f9 06 90 	ld.w	r9,sp[1680]
8000ecfe:	40 66       	lddsp	r6,sp[0x18]
8000ed00:	40 6e       	lddsp	lr,sp[0x18]
8000ed02:	10 16       	sub	r6,r8
8000ed04:	f2 08 01 08 	sub	r8,r9,r8
8000ed08:	87 16       	st.w	r3[0x4],r6
8000ed0a:	1c 08       	add	r8,lr
8000ed0c:	fb 48 06 90 	st.w	sp[1680],r8
8000ed10:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ed14:	2f f8       	sub	r8,-1
8000ed16:	fb 48 06 8c 	st.w	sp[1676],r8
8000ed1a:	cb 98       	rjmp	8000ee8c <_vfprintf_r+0x1e84>
8000ed1c:	40 6c       	lddsp	r12,sp[0x18]
8000ed1e:	58 1c       	cp.w	r12,1
8000ed20:	e0 89 00 06 	brgt	8000ed2c <_vfprintf_r+0x1d24>
8000ed24:	ed b5 00 00 	bld	r5,0x0
8000ed28:	e0 81 00 87 	brne	8000ee36 <_vfprintf_r+0x1e2e>
8000ed2c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ed30:	2f f8       	sub	r8,-1
8000ed32:	30 19       	mov	r9,1
8000ed34:	fb 48 06 90 	st.w	sp[1680],r8
8000ed38:	87 06       	st.w	r3[0x0],r6
8000ed3a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ed3e:	87 19       	st.w	r3[0x4],r9
8000ed40:	2f f8       	sub	r8,-1
8000ed42:	fb 48 06 8c 	st.w	sp[1676],r8
8000ed46:	58 78       	cp.w	r8,7
8000ed48:	e0 89 00 04 	brgt	8000ed50 <_vfprintf_r+0x1d48>
8000ed4c:	2f 83       	sub	r3,-8
8000ed4e:	c0 b8       	rjmp	8000ed64 <_vfprintf_r+0x1d5c>
8000ed50:	fa ca f9 78 	sub	r10,sp,-1672
8000ed54:	02 9b       	mov	r11,r1
8000ed56:	08 9c       	mov	r12,r4
8000ed58:	f0 1f 00 0d 	mcall	8000ed8c <_vfprintf_r+0x1d84>
8000ed5c:	e0 81 01 17 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ed60:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ed64:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ed68:	2f f8       	sub	r8,-1
8000ed6a:	40 cb       	lddsp	r11,sp[0x30]
8000ed6c:	fb 48 06 90 	st.w	sp[1680],r8
8000ed70:	30 19       	mov	r9,1
8000ed72:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ed76:	87 0b       	st.w	r3[0x0],r11
8000ed78:	2f f8       	sub	r8,-1
8000ed7a:	87 19       	st.w	r3[0x4],r9
8000ed7c:	fb 48 06 8c 	st.w	sp[1676],r8
8000ed80:	58 78       	cp.w	r8,7
8000ed82:	e0 89 00 09 	brgt	8000ed94 <_vfprintf_r+0x1d8c>
8000ed86:	2f 83       	sub	r3,-8
8000ed88:	c1 08       	rjmp	8000eda8 <_vfprintf_r+0x1da0>
8000ed8a:	00 00       	add	r0,r0
8000ed8c:	80 00       	ld.sh	r0,r0[0x0]
8000ed8e:	cf e8       	rjmp	8000ef8a <_vfprintf_r+0x1f82>
8000ed90:	80 01       	ld.sh	r1,r0[0x0]
8000ed92:	28 1c       	sub	r12,-127
8000ed94:	fa ca f9 78 	sub	r10,sp,-1672
8000ed98:	02 9b       	mov	r11,r1
8000ed9a:	08 9c       	mov	r12,r4
8000ed9c:	f0 1f 00 6f 	mcall	8000ef58 <_vfprintf_r+0x1f50>
8000eda0:	e0 81 00 f5 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000eda4:	fa c3 f9 e0 	sub	r3,sp,-1568
8000eda8:	30 08       	mov	r8,0
8000edaa:	30 09       	mov	r9,0
8000edac:	40 5b       	lddsp	r11,sp[0x14]
8000edae:	40 7a       	lddsp	r10,sp[0x1c]
8000edb0:	f0 1f 00 6b 	mcall	8000ef5c <_vfprintf_r+0x1f54>
8000edb4:	40 68       	lddsp	r8,sp[0x18]
8000edb6:	20 18       	sub	r8,1
8000edb8:	58 0c       	cp.w	r12,0
8000edba:	c0 d1       	brne	8000edd4 <_vfprintf_r+0x1dcc>
8000edbc:	2f f6       	sub	r6,-1
8000edbe:	87 18       	st.w	r3[0x4],r8
8000edc0:	87 06       	st.w	r3[0x0],r6
8000edc2:	fa f6 06 90 	ld.w	r6,sp[1680]
8000edc6:	10 06       	add	r6,r8
8000edc8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000edcc:	fb 46 06 90 	st.w	sp[1680],r6
8000edd0:	2f f8       	sub	r8,-1
8000edd2:	c2 f8       	rjmp	8000ee30 <_vfprintf_r+0x1e28>
8000edd4:	10 96       	mov	r6,r8
8000edd6:	58 08       	cp.w	r8,0
8000edd8:	e0 89 00 1c 	brgt	8000ee10 <_vfprintf_r+0x1e08>
8000eddc:	c4 98       	rjmp	8000ee6e <_vfprintf_r+0x1e66>
8000edde:	2f 09       	sub	r9,-16
8000ede0:	2f f8       	sub	r8,-1
8000ede2:	fb 49 06 90 	st.w	sp[1680],r9
8000ede6:	87 02       	st.w	r3[0x0],r2
8000ede8:	87 10       	st.w	r3[0x4],r0
8000edea:	fb 48 06 8c 	st.w	sp[1676],r8
8000edee:	58 78       	cp.w	r8,7
8000edf0:	e0 89 00 04 	brgt	8000edf8 <_vfprintf_r+0x1df0>
8000edf4:	2f 83       	sub	r3,-8
8000edf6:	c0 b8       	rjmp	8000ee0c <_vfprintf_r+0x1e04>
8000edf8:	fa ca f9 78 	sub	r10,sp,-1672
8000edfc:	02 9b       	mov	r11,r1
8000edfe:	08 9c       	mov	r12,r4
8000ee00:	f0 1f 00 56 	mcall	8000ef58 <_vfprintf_r+0x1f50>
8000ee04:	e0 81 00 c3 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ee08:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ee0c:	21 06       	sub	r6,16
8000ee0e:	c0 38       	rjmp	8000ee14 <_vfprintf_r+0x1e0c>
8000ee10:	4d 42       	lddpc	r2,8000ef60 <_vfprintf_r+0x1f58>
8000ee12:	31 00       	mov	r0,16
8000ee14:	fa f9 06 90 	ld.w	r9,sp[1680]
8000ee18:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ee1c:	4d 1a       	lddpc	r10,8000ef60 <_vfprintf_r+0x1f58>
8000ee1e:	59 06       	cp.w	r6,16
8000ee20:	fe 99 ff df 	brgt	8000edde <_vfprintf_r+0x1dd6>
8000ee24:	0c 09       	add	r9,r6
8000ee26:	87 0a       	st.w	r3[0x0],r10
8000ee28:	fb 49 06 90 	st.w	sp[1680],r9
8000ee2c:	2f f8       	sub	r8,-1
8000ee2e:	87 16       	st.w	r3[0x4],r6
8000ee30:	fb 48 06 8c 	st.w	sp[1676],r8
8000ee34:	c0 e8       	rjmp	8000ee50 <_vfprintf_r+0x1e48>
8000ee36:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ee3a:	2f f8       	sub	r8,-1
8000ee3c:	30 19       	mov	r9,1
8000ee3e:	fb 48 06 90 	st.w	sp[1680],r8
8000ee42:	87 06       	st.w	r3[0x0],r6
8000ee44:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ee48:	87 19       	st.w	r3[0x4],r9
8000ee4a:	2f f8       	sub	r8,-1
8000ee4c:	fb 48 06 8c 	st.w	sp[1676],r8
8000ee50:	58 78       	cp.w	r8,7
8000ee52:	e0 89 00 04 	brgt	8000ee5a <_vfprintf_r+0x1e52>
8000ee56:	2f 83       	sub	r3,-8
8000ee58:	c0 b8       	rjmp	8000ee6e <_vfprintf_r+0x1e66>
8000ee5a:	fa ca f9 78 	sub	r10,sp,-1672
8000ee5e:	02 9b       	mov	r11,r1
8000ee60:	08 9c       	mov	r12,r4
8000ee62:	f0 1f 00 3e 	mcall	8000ef58 <_vfprintf_r+0x1f50>
8000ee66:	e0 81 00 92 	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ee6a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ee6e:	40 ea       	lddsp	r10,sp[0x38]
8000ee70:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ee74:	14 08       	add	r8,r10
8000ee76:	fa c9 f9 64 	sub	r9,sp,-1692
8000ee7a:	fb 48 06 90 	st.w	sp[1680],r8
8000ee7e:	87 1a       	st.w	r3[0x4],r10
8000ee80:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ee84:	87 09       	st.w	r3[0x0],r9
8000ee86:	2f f8       	sub	r8,-1
8000ee88:	fb 48 06 8c 	st.w	sp[1676],r8
8000ee8c:	58 78       	cp.w	r8,7
8000ee8e:	e0 89 00 04 	brgt	8000ee96 <_vfprintf_r+0x1e8e>
8000ee92:	2f 83       	sub	r3,-8
8000ee94:	c0 a8       	rjmp	8000eea8 <_vfprintf_r+0x1ea0>
8000ee96:	fa ca f9 78 	sub	r10,sp,-1672
8000ee9a:	02 9b       	mov	r11,r1
8000ee9c:	08 9c       	mov	r12,r4
8000ee9e:	f0 1f 00 2f 	mcall	8000ef58 <_vfprintf_r+0x1f50>
8000eea2:	c7 41       	brne	8000ef8a <_vfprintf_r+0x1f82>
8000eea4:	fa c3 f9 e0 	sub	r3,sp,-1568
8000eea8:	e2 15 00 04 	andl	r5,0x4,COH
8000eeac:	c3 d0       	breq	8000ef26 <_vfprintf_r+0x1f1e>
8000eeae:	40 86       	lddsp	r6,sp[0x20]
8000eeb0:	40 39       	lddsp	r9,sp[0xc]
8000eeb2:	12 16       	sub	r6,r9
8000eeb4:	58 06       	cp.w	r6,0
8000eeb6:	e0 89 00 1a 	brgt	8000eeea <_vfprintf_r+0x1ee2>
8000eeba:	c3 68       	rjmp	8000ef26 <_vfprintf_r+0x1f1e>
8000eebc:	2f 09       	sub	r9,-16
8000eebe:	2f f8       	sub	r8,-1
8000eec0:	fb 49 06 90 	st.w	sp[1680],r9
8000eec4:	87 05       	st.w	r3[0x0],r5
8000eec6:	87 12       	st.w	r3[0x4],r2
8000eec8:	fb 48 06 8c 	st.w	sp[1676],r8
8000eecc:	58 78       	cp.w	r8,7
8000eece:	e0 89 00 04 	brgt	8000eed6 <_vfprintf_r+0x1ece>
8000eed2:	2f 83       	sub	r3,-8
8000eed4:	c0 98       	rjmp	8000eee6 <_vfprintf_r+0x1ede>
8000eed6:	00 9a       	mov	r10,r0
8000eed8:	02 9b       	mov	r11,r1
8000eeda:	08 9c       	mov	r12,r4
8000eedc:	f0 1f 00 1f 	mcall	8000ef58 <_vfprintf_r+0x1f50>
8000eee0:	c5 51       	brne	8000ef8a <_vfprintf_r+0x1f82>
8000eee2:	fa c3 f9 e0 	sub	r3,sp,-1568
8000eee6:	21 06       	sub	r6,16
8000eee8:	c0 58       	rjmp	8000eef2 <_vfprintf_r+0x1eea>
8000eeea:	49 f5       	lddpc	r5,8000ef64 <_vfprintf_r+0x1f5c>
8000eeec:	31 02       	mov	r2,16
8000eeee:	fa c0 f9 78 	sub	r0,sp,-1672
8000eef2:	fa f9 06 90 	ld.w	r9,sp[1680]
8000eef6:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000eefa:	49 ba       	lddpc	r10,8000ef64 <_vfprintf_r+0x1f5c>
8000eefc:	59 06       	cp.w	r6,16
8000eefe:	fe 99 ff df 	brgt	8000eebc <_vfprintf_r+0x1eb4>
8000ef02:	0c 09       	add	r9,r6
8000ef04:	2f f8       	sub	r8,-1
8000ef06:	87 0a       	st.w	r3[0x0],r10
8000ef08:	87 16       	st.w	r3[0x4],r6
8000ef0a:	fb 49 06 90 	st.w	sp[1680],r9
8000ef0e:	fb 48 06 8c 	st.w	sp[1676],r8
8000ef12:	58 78       	cp.w	r8,7
8000ef14:	e0 8a 00 09 	brle	8000ef26 <_vfprintf_r+0x1f1e>
8000ef18:	fa ca f9 78 	sub	r10,sp,-1672
8000ef1c:	02 9b       	mov	r11,r1
8000ef1e:	08 9c       	mov	r12,r4
8000ef20:	f0 1f 00 0e 	mcall	8000ef58 <_vfprintf_r+0x1f50>
8000ef24:	c3 31       	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ef26:	40 bc       	lddsp	r12,sp[0x2c]
8000ef28:	40 36       	lddsp	r6,sp[0xc]
8000ef2a:	40 8e       	lddsp	lr,sp[0x20]
8000ef2c:	ec 0e 0c 48 	max	r8,r6,lr
8000ef30:	10 0c       	add	r12,r8
8000ef32:	50 bc       	stdsp	sp[0x2c],r12
8000ef34:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ef38:	58 08       	cp.w	r8,0
8000ef3a:	c0 80       	breq	8000ef4a <_vfprintf_r+0x1f42>
8000ef3c:	fa ca f9 78 	sub	r10,sp,-1672
8000ef40:	02 9b       	mov	r11,r1
8000ef42:	08 9c       	mov	r12,r4
8000ef44:	f0 1f 00 05 	mcall	8000ef58 <_vfprintf_r+0x1f50>
8000ef48:	c2 11       	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ef4a:	30 0b       	mov	r11,0
8000ef4c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ef50:	fb 4b 06 8c 	st.w	sp[1676],r11
8000ef54:	fe 9f f0 e6 	bral	8000d120 <_vfprintf_r+0x118>
8000ef58:	80 00       	ld.sh	r0,r0[0x0]
8000ef5a:	cf e8       	rjmp	8000f156 <quorem+0xca>
8000ef5c:	80 01       	ld.sh	r1,r0[0x0]
8000ef5e:	19 5e       	ld.sh	lr,--r12
8000ef60:	80 01       	ld.sh	r1,r0[0x0]
8000ef62:	28 1c       	sub	r12,-127
8000ef64:	80 01       	ld.sh	r1,r0[0x0]
8000ef66:	28 0c       	sub	r12,-128
8000ef68:	08 95       	mov	r5,r4
8000ef6a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ef6e:	58 08       	cp.w	r8,0
8000ef70:	c0 80       	breq	8000ef80 <_vfprintf_r+0x1f78>
8000ef72:	08 9c       	mov	r12,r4
8000ef74:	fa ca f9 78 	sub	r10,sp,-1672
8000ef78:	02 9b       	mov	r11,r1
8000ef7a:	f0 1f 00 0a 	mcall	8000efa0 <_vfprintf_r+0x1f98>
8000ef7e:	c0 61       	brne	8000ef8a <_vfprintf_r+0x1f82>
8000ef80:	30 08       	mov	r8,0
8000ef82:	fb 48 06 8c 	st.w	sp[1676],r8
8000ef86:	c0 28       	rjmp	8000ef8a <_vfprintf_r+0x1f82>
8000ef88:	40 41       	lddsp	r1,sp[0x10]
8000ef8a:	82 68       	ld.sh	r8,r1[0xc]
8000ef8c:	ed b8 00 06 	bld	r8,0x6
8000ef90:	c0 31       	brne	8000ef96 <_vfprintf_r+0x1f8e>
8000ef92:	3f fa       	mov	r10,-1
8000ef94:	50 ba       	stdsp	sp[0x2c],r10
8000ef96:	40 bc       	lddsp	r12,sp[0x2c]
8000ef98:	fe 3d f9 44 	sub	sp,-1724
8000ef9c:	d8 32       	popm	r0-r7,pc
8000ef9e:	00 00       	add	r0,r0
8000efa0:	80 00       	ld.sh	r0,r0[0x0]
8000efa2:	cf e8       	rjmp	8000f19e <quorem+0x112>

8000efa4 <__swsetup_r>:
8000efa4:	d4 21       	pushm	r4-r7,lr
8000efa6:	4b 38       	lddpc	r8,8000f070 <__swsetup_r+0xcc>
8000efa8:	18 96       	mov	r6,r12
8000efaa:	16 97       	mov	r7,r11
8000efac:	70 0c       	ld.w	r12,r8[0x0]
8000efae:	58 0c       	cp.w	r12,0
8000efb0:	c0 60       	breq	8000efbc <__swsetup_r+0x18>
8000efb2:	78 68       	ld.w	r8,r12[0x18]
8000efb4:	58 08       	cp.w	r8,0
8000efb6:	c0 31       	brne	8000efbc <__swsetup_r+0x18>
8000efb8:	f0 1f 00 2f 	mcall	8000f074 <__swsetup_r+0xd0>
8000efbc:	4a f8       	lddpc	r8,8000f078 <__swsetup_r+0xd4>
8000efbe:	10 37       	cp.w	r7,r8
8000efc0:	c0 51       	brne	8000efca <__swsetup_r+0x26>
8000efc2:	4a c8       	lddpc	r8,8000f070 <__swsetup_r+0xcc>
8000efc4:	70 08       	ld.w	r8,r8[0x0]
8000efc6:	70 07       	ld.w	r7,r8[0x0]
8000efc8:	c0 e8       	rjmp	8000efe4 <__swsetup_r+0x40>
8000efca:	4a d8       	lddpc	r8,8000f07c <__swsetup_r+0xd8>
8000efcc:	10 37       	cp.w	r7,r8
8000efce:	c0 51       	brne	8000efd8 <__swsetup_r+0x34>
8000efd0:	4a 88       	lddpc	r8,8000f070 <__swsetup_r+0xcc>
8000efd2:	70 08       	ld.w	r8,r8[0x0]
8000efd4:	70 17       	ld.w	r7,r8[0x4]
8000efd6:	c0 78       	rjmp	8000efe4 <__swsetup_r+0x40>
8000efd8:	4a a8       	lddpc	r8,8000f080 <__swsetup_r+0xdc>
8000efda:	10 37       	cp.w	r7,r8
8000efdc:	c0 41       	brne	8000efe4 <__swsetup_r+0x40>
8000efde:	4a 58       	lddpc	r8,8000f070 <__swsetup_r+0xcc>
8000efe0:	70 08       	ld.w	r8,r8[0x0]
8000efe2:	70 27       	ld.w	r7,r8[0x8]
8000efe4:	8e 68       	ld.sh	r8,r7[0xc]
8000efe6:	ed b8 00 03 	bld	r8,0x3
8000efea:	c1 e0       	breq	8000f026 <__swsetup_r+0x82>
8000efec:	ed b8 00 04 	bld	r8,0x4
8000eff0:	c3 e1       	brne	8000f06c <__swsetup_r+0xc8>
8000eff2:	ed b8 00 02 	bld	r8,0x2
8000eff6:	c1 51       	brne	8000f020 <__swsetup_r+0x7c>
8000eff8:	6e db       	ld.w	r11,r7[0x34]
8000effa:	58 0b       	cp.w	r11,0
8000effc:	c0 a0       	breq	8000f010 <__swsetup_r+0x6c>
8000effe:	ee c8 ff bc 	sub	r8,r7,-68
8000f002:	10 3b       	cp.w	r11,r8
8000f004:	c0 40       	breq	8000f00c <__swsetup_r+0x68>
8000f006:	0c 9c       	mov	r12,r6
8000f008:	f0 1f 00 1f 	mcall	8000f084 <__swsetup_r+0xe0>
8000f00c:	30 08       	mov	r8,0
8000f00e:	8f d8       	st.w	r7[0x34],r8
8000f010:	8e 68       	ld.sh	r8,r7[0xc]
8000f012:	e0 18 ff db 	andl	r8,0xffdb
8000f016:	ae 68       	st.h	r7[0xc],r8
8000f018:	30 08       	mov	r8,0
8000f01a:	8f 18       	st.w	r7[0x4],r8
8000f01c:	6e 48       	ld.w	r8,r7[0x10]
8000f01e:	8f 08       	st.w	r7[0x0],r8
8000f020:	8e 68       	ld.sh	r8,r7[0xc]
8000f022:	a3 b8       	sbr	r8,0x3
8000f024:	ae 68       	st.h	r7[0xc],r8
8000f026:	6e 48       	ld.w	r8,r7[0x10]
8000f028:	58 08       	cp.w	r8,0
8000f02a:	c0 b1       	brne	8000f040 <__swsetup_r+0x9c>
8000f02c:	8e 68       	ld.sh	r8,r7[0xc]
8000f02e:	e2 18 02 80 	andl	r8,0x280,COH
8000f032:	e0 48 02 00 	cp.w	r8,512
8000f036:	c0 50       	breq	8000f040 <__swsetup_r+0x9c>
8000f038:	0c 9c       	mov	r12,r6
8000f03a:	0e 9b       	mov	r11,r7
8000f03c:	f0 1f 00 13 	mcall	8000f088 <__swsetup_r+0xe4>
8000f040:	8e 69       	ld.sh	r9,r7[0xc]
8000f042:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000f046:	c0 70       	breq	8000f054 <__swsetup_r+0xb0>
8000f048:	30 08       	mov	r8,0
8000f04a:	8f 28       	st.w	r7[0x8],r8
8000f04c:	6e 58       	ld.w	r8,r7[0x14]
8000f04e:	5c 38       	neg	r8
8000f050:	8f 68       	st.w	r7[0x18],r8
8000f052:	c0 68       	rjmp	8000f05e <__swsetup_r+0xba>
8000f054:	ed b9 00 01 	bld	r9,0x1
8000f058:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000f05c:	8f 28       	st.w	r7[0x8],r8
8000f05e:	6e 48       	ld.w	r8,r7[0x10]
8000f060:	58 08       	cp.w	r8,0
8000f062:	c0 61       	brne	8000f06e <__swsetup_r+0xca>
8000f064:	8e 68       	ld.sh	r8,r7[0xc]
8000f066:	ed b8 00 07 	bld	r8,0x7
8000f06a:	c0 21       	brne	8000f06e <__swsetup_r+0xca>
8000f06c:	dc 2a       	popm	r4-r7,pc,r12=-1
8000f06e:	d8 2a       	popm	r4-r7,pc,r12=0
8000f070:	00 00       	add	r0,r0
8000f072:	01 a8       	ld.ub	r8,r0[0x2]
8000f074:	80 01       	ld.sh	r1,r0[0x0]
8000f076:	00 1c       	sub	r12,r0
8000f078:	80 01       	ld.sh	r1,r0[0x0]
8000f07a:	29 3c       	sub	r12,-109
8000f07c:	80 01       	ld.sh	r1,r0[0x0]
8000f07e:	29 5c       	sub	r12,-107
8000f080:	80 01       	ld.sh	r1,r0[0x0]
8000f082:	29 7c       	sub	r12,-105
8000f084:	80 01       	ld.sh	r1,r0[0x0]
8000f086:	01 74       	ld.ub	r4,--r0
8000f088:	80 01       	ld.sh	r1,r0[0x0]
8000f08a:	06 34       	cp.w	r4,r3

8000f08c <quorem>:
8000f08c:	d4 31       	pushm	r0-r7,lr
8000f08e:	20 2d       	sub	sp,8
8000f090:	18 97       	mov	r7,r12
8000f092:	78 48       	ld.w	r8,r12[0x10]
8000f094:	76 46       	ld.w	r6,r11[0x10]
8000f096:	0c 38       	cp.w	r8,r6
8000f098:	c0 34       	brge	8000f09e <quorem+0x12>
8000f09a:	30 0c       	mov	r12,0
8000f09c:	c8 58       	rjmp	8000f1a6 <quorem+0x11a>
8000f09e:	ec c2 ff fc 	sub	r2,r6,-4
8000f0a2:	f6 c3 ff ec 	sub	r3,r11,-20
8000f0a6:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000f0aa:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000f0ae:	2f f9       	sub	r9,-1
8000f0b0:	20 16       	sub	r6,1
8000f0b2:	f8 09 0d 08 	divu	r8,r12,r9
8000f0b6:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000f0ba:	ee c4 ff ec 	sub	r4,r7,-20
8000f0be:	10 95       	mov	r5,r8
8000f0c0:	58 08       	cp.w	r8,0
8000f0c2:	c4 10       	breq	8000f144 <quorem+0xb8>
8000f0c4:	30 09       	mov	r9,0
8000f0c6:	06 9a       	mov	r10,r3
8000f0c8:	08 98       	mov	r8,r4
8000f0ca:	12 91       	mov	r1,r9
8000f0cc:	50 0b       	stdsp	sp[0x0],r11
8000f0ce:	70 0e       	ld.w	lr,r8[0x0]
8000f0d0:	b1 8e       	lsr	lr,0x10
8000f0d2:	50 1e       	stdsp	sp[0x4],lr
8000f0d4:	15 0e       	ld.w	lr,r10++
8000f0d6:	fc 00 16 10 	lsr	r0,lr,0x10
8000f0da:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000f0de:	ea 0e 03 41 	mac	r1,r5,lr
8000f0e2:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000f0e6:	b1 81       	lsr	r1,0x10
8000f0e8:	40 1b       	lddsp	r11,sp[0x4]
8000f0ea:	ea 00 02 40 	mul	r0,r5,r0
8000f0ee:	e2 00 00 00 	add	r0,r1,r0
8000f0f2:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000f0f6:	02 1b       	sub	r11,r1
8000f0f8:	50 1b       	stdsp	sp[0x4],r11
8000f0fa:	70 0b       	ld.w	r11,r8[0x0]
8000f0fc:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000f100:	02 09       	add	r9,r1
8000f102:	f2 0e 01 0e 	sub	lr,r9,lr
8000f106:	b0 1e       	st.h	r8[0x2],lr
8000f108:	fc 09 14 10 	asr	r9,lr,0x10
8000f10c:	40 1e       	lddsp	lr,sp[0x4]
8000f10e:	fc 09 00 09 	add	r9,lr,r9
8000f112:	b0 09       	st.h	r8[0x0],r9
8000f114:	e0 01 16 10 	lsr	r1,r0,0x10
8000f118:	2f c8       	sub	r8,-4
8000f11a:	b1 49       	asr	r9,0x10
8000f11c:	04 3a       	cp.w	r10,r2
8000f11e:	fe 98 ff d8 	brls	8000f0ce <quorem+0x42>
8000f122:	40 0b       	lddsp	r11,sp[0x0]
8000f124:	58 0c       	cp.w	r12,0
8000f126:	c0 f1       	brne	8000f144 <quorem+0xb8>
8000f128:	ec c8 ff fb 	sub	r8,r6,-5
8000f12c:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000f130:	c0 28       	rjmp	8000f134 <quorem+0xa8>
8000f132:	20 16       	sub	r6,1
8000f134:	20 48       	sub	r8,4
8000f136:	08 38       	cp.w	r8,r4
8000f138:	e0 88 00 05 	brls	8000f142 <quorem+0xb6>
8000f13c:	70 09       	ld.w	r9,r8[0x0]
8000f13e:	58 09       	cp.w	r9,0
8000f140:	cf 90       	breq	8000f132 <quorem+0xa6>
8000f142:	8f 46       	st.w	r7[0x10],r6
8000f144:	0e 9c       	mov	r12,r7
8000f146:	f0 1f 00 1a 	mcall	8000f1ac <quorem+0x120>
8000f14a:	c2 d5       	brlt	8000f1a4 <quorem+0x118>
8000f14c:	2f f5       	sub	r5,-1
8000f14e:	08 98       	mov	r8,r4
8000f150:	30 09       	mov	r9,0
8000f152:	07 0b       	ld.w	r11,r3++
8000f154:	f6 0a 16 10 	lsr	r10,r11,0x10
8000f158:	70 0c       	ld.w	r12,r8[0x0]
8000f15a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000f15e:	f8 0e 16 10 	lsr	lr,r12,0x10
8000f162:	14 1e       	sub	lr,r10
8000f164:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000f168:	16 1a       	sub	r10,r11
8000f16a:	12 0a       	add	r10,r9
8000f16c:	b0 1a       	st.h	r8[0x2],r10
8000f16e:	b1 4a       	asr	r10,0x10
8000f170:	fc 0a 00 09 	add	r9,lr,r10
8000f174:	b0 09       	st.h	r8[0x0],r9
8000f176:	2f c8       	sub	r8,-4
8000f178:	b1 49       	asr	r9,0x10
8000f17a:	04 33       	cp.w	r3,r2
8000f17c:	fe 98 ff eb 	brls	8000f152 <quorem+0xc6>
8000f180:	ec c8 ff fb 	sub	r8,r6,-5
8000f184:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000f188:	58 09       	cp.w	r9,0
8000f18a:	c0 d1       	brne	8000f1a4 <quorem+0x118>
8000f18c:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000f190:	c0 28       	rjmp	8000f194 <quorem+0x108>
8000f192:	20 16       	sub	r6,1
8000f194:	20 48       	sub	r8,4
8000f196:	08 38       	cp.w	r8,r4
8000f198:	e0 88 00 05 	brls	8000f1a2 <quorem+0x116>
8000f19c:	70 09       	ld.w	r9,r8[0x0]
8000f19e:	58 09       	cp.w	r9,0
8000f1a0:	cf 90       	breq	8000f192 <quorem+0x106>
8000f1a2:	8f 46       	st.w	r7[0x10],r6
8000f1a4:	0a 9c       	mov	r12,r5
8000f1a6:	2f ed       	sub	sp,-8
8000f1a8:	d8 32       	popm	r0-r7,pc
8000f1aa:	00 00       	add	r0,r0
8000f1ac:	80 01       	ld.sh	r1,r0[0x0]
8000f1ae:	0c ae       	st.w	r6++,lr

8000f1b0 <_dtoa_r>:
8000f1b0:	d4 31       	pushm	r0-r7,lr
8000f1b2:	21 ad       	sub	sp,104
8000f1b4:	fa c4 ff 74 	sub	r4,sp,-140
8000f1b8:	18 97       	mov	r7,r12
8000f1ba:	16 95       	mov	r5,r11
8000f1bc:	68 2c       	ld.w	r12,r4[0x8]
8000f1be:	50 c9       	stdsp	sp[0x30],r9
8000f1c0:	68 16       	ld.w	r6,r4[0x4]
8000f1c2:	68 09       	ld.w	r9,r4[0x0]
8000f1c4:	50 e8       	stdsp	sp[0x38],r8
8000f1c6:	14 94       	mov	r4,r10
8000f1c8:	51 2c       	stdsp	sp[0x48],r12
8000f1ca:	fa e5 00 08 	st.d	sp[8],r4
8000f1ce:	51 59       	stdsp	sp[0x54],r9
8000f1d0:	6e 95       	ld.w	r5,r7[0x24]
8000f1d2:	58 05       	cp.w	r5,0
8000f1d4:	c0 91       	brne	8000f1e6 <_dtoa_r+0x36>
8000f1d6:	31 0c       	mov	r12,16
8000f1d8:	f0 1f 00 47 	mcall	8000f2f4 <_dtoa_r+0x144>
8000f1dc:	99 35       	st.w	r12[0xc],r5
8000f1de:	8f 9c       	st.w	r7[0x24],r12
8000f1e0:	99 15       	st.w	r12[0x4],r5
8000f1e2:	99 25       	st.w	r12[0x8],r5
8000f1e4:	99 05       	st.w	r12[0x0],r5
8000f1e6:	6e 99       	ld.w	r9,r7[0x24]
8000f1e8:	72 08       	ld.w	r8,r9[0x0]
8000f1ea:	58 08       	cp.w	r8,0
8000f1ec:	c0 f0       	breq	8000f20a <_dtoa_r+0x5a>
8000f1ee:	72 1a       	ld.w	r10,r9[0x4]
8000f1f0:	91 1a       	st.w	r8[0x4],r10
8000f1f2:	30 1a       	mov	r10,1
8000f1f4:	72 19       	ld.w	r9,r9[0x4]
8000f1f6:	f4 09 09 49 	lsl	r9,r10,r9
8000f1fa:	10 9b       	mov	r11,r8
8000f1fc:	91 29       	st.w	r8[0x8],r9
8000f1fe:	0e 9c       	mov	r12,r7
8000f200:	f0 1f 00 3e 	mcall	8000f2f8 <_dtoa_r+0x148>
8000f204:	6e 98       	ld.w	r8,r7[0x24]
8000f206:	30 09       	mov	r9,0
8000f208:	91 09       	st.w	r8[0x0],r9
8000f20a:	40 28       	lddsp	r8,sp[0x8]
8000f20c:	10 94       	mov	r4,r8
8000f20e:	58 08       	cp.w	r8,0
8000f210:	c0 64       	brge	8000f21c <_dtoa_r+0x6c>
8000f212:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000f216:	50 28       	stdsp	sp[0x8],r8
8000f218:	30 18       	mov	r8,1
8000f21a:	c0 28       	rjmp	8000f21e <_dtoa_r+0x6e>
8000f21c:	30 08       	mov	r8,0
8000f21e:	8d 08       	st.w	r6[0x0],r8
8000f220:	fc 1c 7f f0 	movh	r12,0x7ff0
8000f224:	40 26       	lddsp	r6,sp[0x8]
8000f226:	0c 98       	mov	r8,r6
8000f228:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000f22c:	18 38       	cp.w	r8,r12
8000f22e:	c1 e1       	brne	8000f26a <_dtoa_r+0xba>
8000f230:	e0 68 27 0f 	mov	r8,9999
8000f234:	41 5b       	lddsp	r11,sp[0x54]
8000f236:	97 08       	st.w	r11[0x0],r8
8000f238:	40 3a       	lddsp	r10,sp[0xc]
8000f23a:	58 0a       	cp.w	r10,0
8000f23c:	c0 61       	brne	8000f248 <_dtoa_r+0x98>
8000f23e:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000f242:	c0 31       	brne	8000f248 <_dtoa_r+0x98>
8000f244:	4a ec       	lddpc	r12,8000f2fc <_dtoa_r+0x14c>
8000f246:	c0 28       	rjmp	8000f24a <_dtoa_r+0x9a>
8000f248:	4a ec       	lddpc	r12,8000f300 <_dtoa_r+0x150>
8000f24a:	41 29       	lddsp	r9,sp[0x48]
8000f24c:	58 09       	cp.w	r9,0
8000f24e:	e0 80 05 de 	breq	8000fe0a <_dtoa_r+0xc5a>
8000f252:	f8 c8 ff fd 	sub	r8,r12,-3
8000f256:	f8 c9 ff f8 	sub	r9,r12,-8
8000f25a:	11 8b       	ld.ub	r11,r8[0x0]
8000f25c:	30 0a       	mov	r10,0
8000f25e:	41 25       	lddsp	r5,sp[0x48]
8000f260:	f4 0b 18 00 	cp.b	r11,r10
8000f264:	f2 08 17 10 	movne	r8,r9
8000f268:	c1 58       	rjmp	8000f292 <_dtoa_r+0xe2>
8000f26a:	fa ea 00 08 	ld.d	r10,sp[8]
8000f26e:	30 08       	mov	r8,0
8000f270:	fa eb 00 3c 	st.d	sp[60],r10
8000f274:	30 09       	mov	r9,0
8000f276:	f0 1f 00 24 	mcall	8000f304 <_dtoa_r+0x154>
8000f27a:	c0 f0       	breq	8000f298 <_dtoa_r+0xe8>
8000f27c:	30 18       	mov	r8,1
8000f27e:	41 5a       	lddsp	r10,sp[0x54]
8000f280:	95 08       	st.w	r10[0x0],r8
8000f282:	4a 2c       	lddpc	r12,8000f308 <_dtoa_r+0x158>
8000f284:	41 29       	lddsp	r9,sp[0x48]
8000f286:	f8 08 00 08 	add	r8,r12,r8
8000f28a:	58 09       	cp.w	r9,0
8000f28c:	e0 80 05 bf 	breq	8000fe0a <_dtoa_r+0xc5a>
8000f290:	12 95       	mov	r5,r9
8000f292:	8b 08       	st.w	r5[0x0],r8
8000f294:	e0 8f 05 bb 	bral	8000fe0a <_dtoa_r+0xc5a>
8000f298:	fa c8 ff 9c 	sub	r8,sp,-100
8000f29c:	fa c9 ff a0 	sub	r9,sp,-96
8000f2a0:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f2a4:	0e 9c       	mov	r12,r7
8000f2a6:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000f2aa:	f0 1f 00 19 	mcall	8000f30c <_dtoa_r+0x15c>
8000f2ae:	18 93       	mov	r3,r12
8000f2b0:	58 05       	cp.w	r5,0
8000f2b2:	c0 d0       	breq	8000f2cc <_dtoa_r+0x11c>
8000f2b4:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f2b8:	30 04       	mov	r4,0
8000f2ba:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000f2be:	ea c5 03 ff 	sub	r5,r5,1023
8000f2c2:	10 9b       	mov	r11,r8
8000f2c4:	51 74       	stdsp	sp[0x5c],r4
8000f2c6:	ea 1b 3f f0 	orh	r11,0x3ff0
8000f2ca:	c3 28       	rjmp	8000f32e <_dtoa_r+0x17e>
8000f2cc:	41 88       	lddsp	r8,sp[0x60]
8000f2ce:	41 9c       	lddsp	r12,sp[0x64]
8000f2d0:	10 0c       	add	r12,r8
8000f2d2:	f8 c5 fb ce 	sub	r5,r12,-1074
8000f2d6:	e0 45 00 20 	cp.w	r5,32
8000f2da:	e0 8a 00 1b 	brle	8000f310 <_dtoa_r+0x160>
8000f2de:	f8 cc fb ee 	sub	r12,r12,-1042
8000f2e2:	40 3b       	lddsp	r11,sp[0xc]
8000f2e4:	ea 08 11 40 	rsub	r8,r5,64
8000f2e8:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000f2ec:	ec 08 09 46 	lsl	r6,r6,r8
8000f2f0:	0c 4c       	or	r12,r6
8000f2f2:	c1 48       	rjmp	8000f31a <_dtoa_r+0x16a>
8000f2f4:	80 01       	ld.sh	r1,r0[0x0]
8000f2f6:	07 00       	ld.w	r0,r3++
8000f2f8:	80 01       	ld.sh	r1,r0[0x0]
8000f2fa:	0c e0       	st.h	--r6,r0
8000f2fc:	80 01       	ld.sh	r1,r0[0x0]
8000f2fe:	29 2c       	sub	r12,-110
8000f300:	80 01       	ld.sh	r1,r0[0x0]
8000f302:	29 38       	sub	r8,-109
8000f304:	80 01       	ld.sh	r1,r0[0x0]
8000f306:	19 5e       	ld.sh	lr,--r12
8000f308:	80 01       	ld.sh	r1,r0[0x0]
8000f30a:	28 08       	sub	r8,-128
8000f30c:	80 01       	ld.sh	r1,r0[0x0]
8000f30e:	0d 90       	ld.ub	r0,r6[0x1]
8000f310:	ea 0c 11 20 	rsub	r12,r5,32
8000f314:	40 3a       	lddsp	r10,sp[0xc]
8000f316:	f4 0c 09 4c 	lsl	r12,r10,r12
8000f31a:	f0 1f 00 6b 	mcall	8000f4c4 <_dtoa_r+0x314>
8000f31e:	fc 18 fe 10 	movh	r8,0xfe10
8000f322:	30 19       	mov	r9,1
8000f324:	ea c5 04 33 	sub	r5,r5,1075
8000f328:	f0 0b 00 0b 	add	r11,r8,r11
8000f32c:	51 79       	stdsp	sp[0x5c],r9
8000f32e:	30 08       	mov	r8,0
8000f330:	fc 19 3f f8 	movh	r9,0x3ff8
8000f334:	f0 1f 00 65 	mcall	8000f4c8 <_dtoa_r+0x318>
8000f338:	e0 68 43 61 	mov	r8,17249
8000f33c:	ea 18 63 6f 	orh	r8,0x636f
8000f340:	e0 69 87 a7 	mov	r9,34727
8000f344:	ea 19 3f d2 	orh	r9,0x3fd2
8000f348:	f0 1f 00 61 	mcall	8000f4cc <_dtoa_r+0x31c>
8000f34c:	e0 68 c8 b3 	mov	r8,51379
8000f350:	ea 18 8b 60 	orh	r8,0x8b60
8000f354:	e0 69 8a 28 	mov	r9,35368
8000f358:	ea 19 3f c6 	orh	r9,0x3fc6
8000f35c:	f0 1f 00 5d 	mcall	8000f4d0 <_dtoa_r+0x320>
8000f360:	0a 9c       	mov	r12,r5
8000f362:	14 90       	mov	r0,r10
8000f364:	16 91       	mov	r1,r11
8000f366:	f0 1f 00 5c 	mcall	8000f4d4 <_dtoa_r+0x324>
8000f36a:	e0 68 79 fb 	mov	r8,31227
8000f36e:	ea 18 50 9f 	orh	r8,0x509f
8000f372:	e0 69 44 13 	mov	r9,17427
8000f376:	ea 19 3f d3 	orh	r9,0x3fd3
8000f37a:	f0 1f 00 55 	mcall	8000f4cc <_dtoa_r+0x31c>
8000f37e:	14 98       	mov	r8,r10
8000f380:	16 99       	mov	r9,r11
8000f382:	00 9a       	mov	r10,r0
8000f384:	02 9b       	mov	r11,r1
8000f386:	f0 1f 00 53 	mcall	8000f4d0 <_dtoa_r+0x320>
8000f38a:	14 90       	mov	r0,r10
8000f38c:	16 91       	mov	r1,r11
8000f38e:	f0 1f 00 53 	mcall	8000f4d8 <_dtoa_r+0x328>
8000f392:	30 08       	mov	r8,0
8000f394:	18 96       	mov	r6,r12
8000f396:	30 09       	mov	r9,0
8000f398:	00 9a       	mov	r10,r0
8000f39a:	02 9b       	mov	r11,r1
8000f39c:	f0 1f 00 50 	mcall	8000f4dc <_dtoa_r+0x32c>
8000f3a0:	c0 c0       	breq	8000f3b8 <_dtoa_r+0x208>
8000f3a2:	0c 9c       	mov	r12,r6
8000f3a4:	f0 1f 00 4c 	mcall	8000f4d4 <_dtoa_r+0x324>
8000f3a8:	14 98       	mov	r8,r10
8000f3aa:	16 99       	mov	r9,r11
8000f3ac:	00 9a       	mov	r10,r0
8000f3ae:	02 9b       	mov	r11,r1
8000f3b0:	f0 1f 00 4c 	mcall	8000f4e0 <_dtoa_r+0x330>
8000f3b4:	f7 b6 00 01 	subeq	r6,1
8000f3b8:	59 66       	cp.w	r6,22
8000f3ba:	e0 88 00 05 	brls	8000f3c4 <_dtoa_r+0x214>
8000f3be:	30 18       	mov	r8,1
8000f3c0:	51 48       	stdsp	sp[0x50],r8
8000f3c2:	c1 28       	rjmp	8000f3e6 <_dtoa_r+0x236>
8000f3c4:	4c 88       	lddpc	r8,8000f4e4 <_dtoa_r+0x334>
8000f3c6:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f3ca:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000f3ce:	f0 1f 00 44 	mcall	8000f4dc <_dtoa_r+0x32c>
8000f3d2:	f9 b4 00 00 	moveq	r4,0
8000f3d6:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000f3da:	f7 b6 01 01 	subne	r6,1
8000f3de:	f9 bc 01 00 	movne	r12,0
8000f3e2:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000f3e6:	41 90       	lddsp	r0,sp[0x64]
8000f3e8:	20 10       	sub	r0,1
8000f3ea:	0a 10       	sub	r0,r5
8000f3ec:	c0 46       	brmi	8000f3f4 <_dtoa_r+0x244>
8000f3ee:	50 40       	stdsp	sp[0x10],r0
8000f3f0:	30 00       	mov	r0,0
8000f3f2:	c0 48       	rjmp	8000f3fa <_dtoa_r+0x24a>
8000f3f4:	30 0b       	mov	r11,0
8000f3f6:	5c 30       	neg	r0
8000f3f8:	50 4b       	stdsp	sp[0x10],r11
8000f3fa:	ec 02 11 00 	rsub	r2,r6,0
8000f3fe:	58 06       	cp.w	r6,0
8000f400:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000f404:	f5 d6 e4 0a 	addge	r10,r10,r6
8000f408:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000f40c:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000f410:	f9 b2 04 00 	movge	r2,0
8000f414:	e1 d6 e5 10 	sublt	r0,r0,r6
8000f418:	f9 b9 05 00 	movlt	r9,0
8000f41c:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000f420:	40 c8       	lddsp	r8,sp[0x30]
8000f422:	58 98       	cp.w	r8,9
8000f424:	e0 8b 00 20 	brhi	8000f464 <_dtoa_r+0x2b4>
8000f428:	58 58       	cp.w	r8,5
8000f42a:	f9 b4 0a 01 	movle	r4,1
8000f42e:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000f432:	f7 b5 09 04 	subgt	r5,4
8000f436:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000f43a:	f9 b4 09 00 	movgt	r4,0
8000f43e:	40 cc       	lddsp	r12,sp[0x30]
8000f440:	58 3c       	cp.w	r12,3
8000f442:	c2 d0       	breq	8000f49c <_dtoa_r+0x2ec>
8000f444:	e0 89 00 05 	brgt	8000f44e <_dtoa_r+0x29e>
8000f448:	58 2c       	cp.w	r12,2
8000f44a:	c1 01       	brne	8000f46a <_dtoa_r+0x2ba>
8000f44c:	c1 88       	rjmp	8000f47c <_dtoa_r+0x2cc>
8000f44e:	40 cb       	lddsp	r11,sp[0x30]
8000f450:	58 4b       	cp.w	r11,4
8000f452:	c0 60       	breq	8000f45e <_dtoa_r+0x2ae>
8000f454:	58 5b       	cp.w	r11,5
8000f456:	c0 a1       	brne	8000f46a <_dtoa_r+0x2ba>
8000f458:	30 1a       	mov	r10,1
8000f45a:	50 da       	stdsp	sp[0x34],r10
8000f45c:	c2 28       	rjmp	8000f4a0 <_dtoa_r+0x2f0>
8000f45e:	30 19       	mov	r9,1
8000f460:	50 d9       	stdsp	sp[0x34],r9
8000f462:	c0 f8       	rjmp	8000f480 <_dtoa_r+0x2d0>
8000f464:	30 08       	mov	r8,0
8000f466:	30 14       	mov	r4,1
8000f468:	50 c8       	stdsp	sp[0x30],r8
8000f46a:	3f f5       	mov	r5,-1
8000f46c:	30 1c       	mov	r12,1
8000f46e:	30 0b       	mov	r11,0
8000f470:	50 95       	stdsp	sp[0x24],r5
8000f472:	50 dc       	stdsp	sp[0x34],r12
8000f474:	0a 91       	mov	r1,r5
8000f476:	31 28       	mov	r8,18
8000f478:	50 eb       	stdsp	sp[0x38],r11
8000f47a:	c2 08       	rjmp	8000f4ba <_dtoa_r+0x30a>
8000f47c:	30 0a       	mov	r10,0
8000f47e:	50 da       	stdsp	sp[0x34],r10
8000f480:	40 e9       	lddsp	r9,sp[0x38]
8000f482:	58 09       	cp.w	r9,0
8000f484:	e0 89 00 07 	brgt	8000f492 <_dtoa_r+0x2e2>
8000f488:	30 18       	mov	r8,1
8000f48a:	50 98       	stdsp	sp[0x24],r8
8000f48c:	10 91       	mov	r1,r8
8000f48e:	50 e8       	stdsp	sp[0x38],r8
8000f490:	c1 58       	rjmp	8000f4ba <_dtoa_r+0x30a>
8000f492:	40 e5       	lddsp	r5,sp[0x38]
8000f494:	50 95       	stdsp	sp[0x24],r5
8000f496:	0a 91       	mov	r1,r5
8000f498:	0a 98       	mov	r8,r5
8000f49a:	c1 08       	rjmp	8000f4ba <_dtoa_r+0x30a>
8000f49c:	30 0c       	mov	r12,0
8000f49e:	50 dc       	stdsp	sp[0x34],r12
8000f4a0:	40 eb       	lddsp	r11,sp[0x38]
8000f4a2:	ec 0b 00 0b 	add	r11,r6,r11
8000f4a6:	50 9b       	stdsp	sp[0x24],r11
8000f4a8:	16 98       	mov	r8,r11
8000f4aa:	2f f8       	sub	r8,-1
8000f4ac:	58 08       	cp.w	r8,0
8000f4ae:	e0 89 00 05 	brgt	8000f4b8 <_dtoa_r+0x308>
8000f4b2:	10 91       	mov	r1,r8
8000f4b4:	30 18       	mov	r8,1
8000f4b6:	c0 28       	rjmp	8000f4ba <_dtoa_r+0x30a>
8000f4b8:	10 91       	mov	r1,r8
8000f4ba:	30 09       	mov	r9,0
8000f4bc:	6e 9a       	ld.w	r10,r7[0x24]
8000f4be:	95 19       	st.w	r10[0x4],r9
8000f4c0:	30 49       	mov	r9,4
8000f4c2:	c1 78       	rjmp	8000f4f0 <_dtoa_r+0x340>
8000f4c4:	80 00       	ld.sh	r0,r0[0x0]
8000f4c6:	c5 c0       	breq	8000f57e <_dtoa_r+0x3ce>
8000f4c8:	80 00       	ld.sh	r0,r0[0x0]
8000f4ca:	c3 14       	brge	8000f52c <_dtoa_r+0x37c>
8000f4cc:	80 00       	ld.sh	r0,r0[0x0]
8000f4ce:	c1 3c       	rcall	8000f4f4 <_dtoa_r+0x344>
8000f4d0:	80 00       	ld.sh	r0,r0[0x0]
8000f4d2:	c4 b0       	breq	8000f568 <_dtoa_r+0x3b8>
8000f4d4:	80 00       	ld.sh	r0,r0[0x0]
8000f4d6:	c5 c8       	rjmp	8000f58e <_dtoa_r+0x3de>
8000f4d8:	80 01       	ld.sh	r1,r0[0x0]
8000f4da:	19 38       	ld.ub	r8,r12++
8000f4dc:	80 01       	ld.sh	r1,r0[0x0]
8000f4de:	19 ec       	ld.ub	r12,r12[0x6]
8000f4e0:	80 01       	ld.sh	r1,r0[0x0]
8000f4e2:	19 5e       	ld.sh	lr,--r12
8000f4e4:	80 01       	ld.sh	r1,r0[0x0]
8000f4e6:	29 f0       	sub	r0,-97
8000f4e8:	6a 1a       	ld.w	r10,r5[0x4]
8000f4ea:	a1 79       	lsl	r9,0x1
8000f4ec:	2f fa       	sub	r10,-1
8000f4ee:	8b 1a       	st.w	r5[0x4],r10
8000f4f0:	6e 95       	ld.w	r5,r7[0x24]
8000f4f2:	f2 ca ff ec 	sub	r10,r9,-20
8000f4f6:	10 3a       	cp.w	r10,r8
8000f4f8:	fe 98 ff f8 	brls	8000f4e8 <_dtoa_r+0x338>
8000f4fc:	6a 1b       	ld.w	r11,r5[0x4]
8000f4fe:	0e 9c       	mov	r12,r7
8000f500:	f0 1f 00 53 	mcall	8000f64c <_dtoa_r+0x49c>
8000f504:	58 e1       	cp.w	r1,14
8000f506:	5f 88       	srls	r8
8000f508:	8b 0c       	st.w	r5[0x0],r12
8000f50a:	f1 e4 00 04 	and	r4,r8,r4
8000f50e:	6e 98       	ld.w	r8,r7[0x24]
8000f510:	70 08       	ld.w	r8,r8[0x0]
8000f512:	50 88       	stdsp	sp[0x20],r8
8000f514:	e0 80 01 98 	breq	8000f844 <_dtoa_r+0x694>
8000f518:	58 06       	cp.w	r6,0
8000f51a:	e0 8a 00 40 	brle	8000f59a <_dtoa_r+0x3ea>
8000f51e:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000f522:	4c c8       	lddpc	r8,8000f650 <_dtoa_r+0x4a0>
8000f524:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000f528:	fa e5 00 18 	st.d	sp[24],r4
8000f52c:	ec 04 14 04 	asr	r4,r6,0x4
8000f530:	ed b4 00 04 	bld	r4,0x4
8000f534:	c0 30       	breq	8000f53a <_dtoa_r+0x38a>
8000f536:	30 25       	mov	r5,2
8000f538:	c0 f8       	rjmp	8000f556 <_dtoa_r+0x3a6>
8000f53a:	4c 78       	lddpc	r8,8000f654 <_dtoa_r+0x4a4>
8000f53c:	f0 e8 00 20 	ld.d	r8,r8[32]
8000f540:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f544:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000f548:	f0 1f 00 44 	mcall	8000f658 <_dtoa_r+0x4a8>
8000f54c:	30 35       	mov	r5,3
8000f54e:	14 98       	mov	r8,r10
8000f550:	16 99       	mov	r9,r11
8000f552:	fa e9 00 08 	st.d	sp[8],r8
8000f556:	4c 0c       	lddpc	r12,8000f654 <_dtoa_r+0x4a4>
8000f558:	50 a3       	stdsp	sp[0x28],r3
8000f55a:	0c 93       	mov	r3,r6
8000f55c:	18 96       	mov	r6,r12
8000f55e:	c0 f8       	rjmp	8000f57c <_dtoa_r+0x3cc>
8000f560:	fa ea 00 18 	ld.d	r10,sp[24]
8000f564:	ed b4 00 00 	bld	r4,0x0
8000f568:	c0 81       	brne	8000f578 <_dtoa_r+0x3c8>
8000f56a:	ec e8 00 00 	ld.d	r8,r6[0]
8000f56e:	2f f5       	sub	r5,-1
8000f570:	f0 1f 00 3b 	mcall	8000f65c <_dtoa_r+0x4ac>
8000f574:	fa eb 00 18 	st.d	sp[24],r10
8000f578:	a1 54       	asr	r4,0x1
8000f57a:	2f 86       	sub	r6,-8
8000f57c:	58 04       	cp.w	r4,0
8000f57e:	cf 11       	brne	8000f560 <_dtoa_r+0x3b0>
8000f580:	fa e8 00 18 	ld.d	r8,sp[24]
8000f584:	fa ea 00 08 	ld.d	r10,sp[8]
8000f588:	06 96       	mov	r6,r3
8000f58a:	f0 1f 00 34 	mcall	8000f658 <_dtoa_r+0x4a8>
8000f58e:	40 a3       	lddsp	r3,sp[0x28]
8000f590:	14 98       	mov	r8,r10
8000f592:	16 99       	mov	r9,r11
8000f594:	fa e9 00 08 	st.d	sp[8],r8
8000f598:	c2 d8       	rjmp	8000f5f2 <_dtoa_r+0x442>
8000f59a:	ec 08 11 00 	rsub	r8,r6,0
8000f59e:	c0 31       	brne	8000f5a4 <_dtoa_r+0x3f4>
8000f5a0:	30 25       	mov	r5,2
8000f5a2:	c2 88       	rjmp	8000f5f2 <_dtoa_r+0x442>
8000f5a4:	4a cc       	lddpc	r12,8000f654 <_dtoa_r+0x4a4>
8000f5a6:	f0 04 14 04 	asr	r4,r8,0x4
8000f5aa:	50 1c       	stdsp	sp[0x4],r12
8000f5ac:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000f5b0:	4a 89       	lddpc	r9,8000f650 <_dtoa_r+0x4a0>
8000f5b2:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f5b6:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000f5ba:	f0 1f 00 29 	mcall	8000f65c <_dtoa_r+0x4ac>
8000f5be:	40 1c       	lddsp	r12,sp[0x4]
8000f5c0:	50 63       	stdsp	sp[0x18],r3
8000f5c2:	30 25       	mov	r5,2
8000f5c4:	0c 93       	mov	r3,r6
8000f5c6:	fa eb 00 08 	st.d	sp[8],r10
8000f5ca:	18 96       	mov	r6,r12
8000f5cc:	c0 f8       	rjmp	8000f5ea <_dtoa_r+0x43a>
8000f5ce:	fa ea 00 08 	ld.d	r10,sp[8]
8000f5d2:	ed b4 00 00 	bld	r4,0x0
8000f5d6:	c0 81       	brne	8000f5e6 <_dtoa_r+0x436>
8000f5d8:	ec e8 00 00 	ld.d	r8,r6[0]
8000f5dc:	2f f5       	sub	r5,-1
8000f5de:	f0 1f 00 20 	mcall	8000f65c <_dtoa_r+0x4ac>
8000f5e2:	fa eb 00 08 	st.d	sp[8],r10
8000f5e6:	a1 54       	asr	r4,0x1
8000f5e8:	2f 86       	sub	r6,-8
8000f5ea:	58 04       	cp.w	r4,0
8000f5ec:	cf 11       	brne	8000f5ce <_dtoa_r+0x41e>
8000f5ee:	06 96       	mov	r6,r3
8000f5f0:	40 63       	lddsp	r3,sp[0x18]
8000f5f2:	41 4a       	lddsp	r10,sp[0x50]
8000f5f4:	58 0a       	cp.w	r10,0
8000f5f6:	c3 70       	breq	8000f664 <_dtoa_r+0x4b4>
8000f5f8:	fa e8 00 08 	ld.d	r8,sp[8]
8000f5fc:	58 01       	cp.w	r1,0
8000f5fe:	5f 94       	srgt	r4
8000f600:	fa e9 00 18 	st.d	sp[24],r8
8000f604:	30 08       	mov	r8,0
8000f606:	fc 19 3f f0 	movh	r9,0x3ff0
8000f60a:	fa ea 00 18 	ld.d	r10,sp[24]
8000f60e:	f0 1f 00 15 	mcall	8000f660 <_dtoa_r+0x4b0>
8000f612:	f9 bc 00 00 	moveq	r12,0
8000f616:	f9 bc 01 01 	movne	r12,1
8000f61a:	e9 ec 00 0c 	and	r12,r4,r12
8000f61e:	c2 30       	breq	8000f664 <_dtoa_r+0x4b4>
8000f620:	40 98       	lddsp	r8,sp[0x24]
8000f622:	58 08       	cp.w	r8,0
8000f624:	e0 8a 01 0c 	brle	8000f83c <_dtoa_r+0x68c>
8000f628:	30 08       	mov	r8,0
8000f62a:	fc 19 40 24 	movh	r9,0x4024
8000f62e:	ec c4 00 01 	sub	r4,r6,1
8000f632:	fa ea 00 18 	ld.d	r10,sp[24]
8000f636:	2f f5       	sub	r5,-1
8000f638:	50 64       	stdsp	sp[0x18],r4
8000f63a:	f0 1f 00 09 	mcall	8000f65c <_dtoa_r+0x4ac>
8000f63e:	40 94       	lddsp	r4,sp[0x24]
8000f640:	14 98       	mov	r8,r10
8000f642:	16 99       	mov	r9,r11
8000f644:	fa e9 00 08 	st.d	sp[8],r8
8000f648:	c1 08       	rjmp	8000f668 <_dtoa_r+0x4b8>
8000f64a:	00 00       	add	r0,r0
8000f64c:	80 01       	ld.sh	r1,r0[0x0]
8000f64e:	0d 18       	ld.sh	r8,r6++
8000f650:	80 01       	ld.sh	r1,r0[0x0]
8000f652:	29 f0       	sub	r0,-97
8000f654:	80 01       	ld.sh	r1,r0[0x0]
8000f656:	2a b8       	sub	r8,-85
8000f658:	80 01       	ld.sh	r1,r0[0x0]
8000f65a:	1a 54       	eor	r4,sp
8000f65c:	80 00       	ld.sh	r0,r0[0x0]
8000f65e:	c1 3c       	rcall	8000f684 <_dtoa_r+0x4d4>
8000f660:	80 01       	ld.sh	r1,r0[0x0]
8000f662:	19 ec       	ld.ub	r12,r12[0x6]
8000f664:	50 66       	stdsp	sp[0x18],r6
8000f666:	02 94       	mov	r4,r1
8000f668:	0a 9c       	mov	r12,r5
8000f66a:	f0 1f 00 69 	mcall	8000f80c <_dtoa_r+0x65c>
8000f66e:	fa e8 00 08 	ld.d	r8,sp[8]
8000f672:	f0 1f 00 68 	mcall	8000f810 <_dtoa_r+0x660>
8000f676:	30 08       	mov	r8,0
8000f678:	fc 19 40 1c 	movh	r9,0x401c
8000f67c:	f0 1f 00 66 	mcall	8000f814 <_dtoa_r+0x664>
8000f680:	14 98       	mov	r8,r10
8000f682:	16 99       	mov	r9,r11
8000f684:	fa e9 00 28 	st.d	sp[40],r8
8000f688:	fc 18 fc c0 	movh	r8,0xfcc0
8000f68c:	40 a5       	lddsp	r5,sp[0x28]
8000f68e:	10 05       	add	r5,r8
8000f690:	50 a5       	stdsp	sp[0x28],r5
8000f692:	58 04       	cp.w	r4,0
8000f694:	c2 11       	brne	8000f6d6 <_dtoa_r+0x526>
8000f696:	fa ea 00 08 	ld.d	r10,sp[8]
8000f69a:	30 08       	mov	r8,0
8000f69c:	fc 19 40 14 	movh	r9,0x4014
8000f6a0:	f0 1f 00 5e 	mcall	8000f818 <_dtoa_r+0x668>
8000f6a4:	40 bc       	lddsp	r12,sp[0x2c]
8000f6a6:	fa eb 00 08 	st.d	sp[8],r10
8000f6aa:	14 98       	mov	r8,r10
8000f6ac:	16 99       	mov	r9,r11
8000f6ae:	18 9a       	mov	r10,r12
8000f6b0:	0a 9b       	mov	r11,r5
8000f6b2:	f0 1f 00 5b 	mcall	8000f81c <_dtoa_r+0x66c>
8000f6b6:	e0 81 02 74 	brne	8000fb9e <_dtoa_r+0x9ee>
8000f6ba:	0a 98       	mov	r8,r5
8000f6bc:	40 b9       	lddsp	r9,sp[0x2c]
8000f6be:	ee 18 80 00 	eorh	r8,0x8000
8000f6c2:	fa ea 00 08 	ld.d	r10,sp[8]
8000f6c6:	10 95       	mov	r5,r8
8000f6c8:	12 98       	mov	r8,r9
8000f6ca:	0a 99       	mov	r9,r5
8000f6cc:	f0 1f 00 54 	mcall	8000f81c <_dtoa_r+0x66c>
8000f6d0:	e0 81 02 5e 	brne	8000fb8c <_dtoa_r+0x9dc>
8000f6d4:	cb 48       	rjmp	8000f83c <_dtoa_r+0x68c>
8000f6d6:	4d 39       	lddpc	r9,8000f820 <_dtoa_r+0x670>
8000f6d8:	e8 c8 00 01 	sub	r8,r4,1
8000f6dc:	40 d5       	lddsp	r5,sp[0x34]
8000f6de:	58 05       	cp.w	r5,0
8000f6e0:	c4 f0       	breq	8000f77e <_dtoa_r+0x5ce>
8000f6e2:	30 0c       	mov	r12,0
8000f6e4:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000f6e8:	51 3c       	stdsp	sp[0x4c],r12
8000f6ea:	30 0a       	mov	r10,0
8000f6ec:	fc 1b 3f e0 	movh	r11,0x3fe0
8000f6f0:	f0 1f 00 4d 	mcall	8000f824 <_dtoa_r+0x674>
8000f6f4:	fa e8 00 28 	ld.d	r8,sp[40]
8000f6f8:	40 85       	lddsp	r5,sp[0x20]
8000f6fa:	f0 1f 00 48 	mcall	8000f818 <_dtoa_r+0x668>
8000f6fe:	fa eb 00 28 	st.d	sp[40],r10
8000f702:	fa ea 00 08 	ld.d	r10,sp[8]
8000f706:	f0 1f 00 49 	mcall	8000f828 <_dtoa_r+0x678>
8000f70a:	51 6c       	stdsp	sp[0x58],r12
8000f70c:	f0 1f 00 40 	mcall	8000f80c <_dtoa_r+0x65c>
8000f710:	14 98       	mov	r8,r10
8000f712:	16 99       	mov	r9,r11
8000f714:	fa ea 00 08 	ld.d	r10,sp[8]
8000f718:	f0 1f 00 40 	mcall	8000f818 <_dtoa_r+0x668>
8000f71c:	fa eb 00 08 	st.d	sp[8],r10
8000f720:	41 68       	lddsp	r8,sp[0x58]
8000f722:	2d 08       	sub	r8,-48
8000f724:	0a c8       	st.b	r5++,r8
8000f726:	41 39       	lddsp	r9,sp[0x4c]
8000f728:	2f f9       	sub	r9,-1
8000f72a:	51 39       	stdsp	sp[0x4c],r9
8000f72c:	fa e8 00 28 	ld.d	r8,sp[40]
8000f730:	f0 1f 00 3b 	mcall	8000f81c <_dtoa_r+0x66c>
8000f734:	e0 81 03 5a 	brne	8000fde8 <_dtoa_r+0xc38>
8000f738:	fa e8 00 08 	ld.d	r8,sp[8]
8000f73c:	30 0a       	mov	r10,0
8000f73e:	fc 1b 3f f0 	movh	r11,0x3ff0
8000f742:	f0 1f 00 36 	mcall	8000f818 <_dtoa_r+0x668>
8000f746:	fa e8 00 28 	ld.d	r8,sp[40]
8000f74a:	f0 1f 00 35 	mcall	8000f81c <_dtoa_r+0x66c>
8000f74e:	fa ea 00 28 	ld.d	r10,sp[40]
8000f752:	30 08       	mov	r8,0
8000f754:	fc 19 40 24 	movh	r9,0x4024
8000f758:	e0 81 00 e8 	brne	8000f928 <_dtoa_r+0x778>
8000f75c:	41 3c       	lddsp	r12,sp[0x4c]
8000f75e:	08 3c       	cp.w	r12,r4
8000f760:	c6 e4       	brge	8000f83c <_dtoa_r+0x68c>
8000f762:	f0 1f 00 2c 	mcall	8000f810 <_dtoa_r+0x660>
8000f766:	30 08       	mov	r8,0
8000f768:	fa eb 00 28 	st.d	sp[40],r10
8000f76c:	fc 19 40 24 	movh	r9,0x4024
8000f770:	fa ea 00 08 	ld.d	r10,sp[8]
8000f774:	f0 1f 00 27 	mcall	8000f810 <_dtoa_r+0x660>
8000f778:	fa eb 00 08 	st.d	sp[8],r10
8000f77c:	cc 3b       	rjmp	8000f702 <_dtoa_r+0x552>
8000f77e:	40 85       	lddsp	r5,sp[0x20]
8000f780:	08 05       	add	r5,r4
8000f782:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000f786:	51 35       	stdsp	sp[0x4c],r5
8000f788:	fa e8 00 28 	ld.d	r8,sp[40]
8000f78c:	40 85       	lddsp	r5,sp[0x20]
8000f78e:	f0 1f 00 21 	mcall	8000f810 <_dtoa_r+0x660>
8000f792:	fa eb 00 28 	st.d	sp[40],r10
8000f796:	fa ea 00 08 	ld.d	r10,sp[8]
8000f79a:	f0 1f 00 24 	mcall	8000f828 <_dtoa_r+0x678>
8000f79e:	51 6c       	stdsp	sp[0x58],r12
8000f7a0:	f0 1f 00 1b 	mcall	8000f80c <_dtoa_r+0x65c>
8000f7a4:	14 98       	mov	r8,r10
8000f7a6:	16 99       	mov	r9,r11
8000f7a8:	fa ea 00 08 	ld.d	r10,sp[8]
8000f7ac:	f0 1f 00 1b 	mcall	8000f818 <_dtoa_r+0x668>
8000f7b0:	fa eb 00 08 	st.d	sp[8],r10
8000f7b4:	41 68       	lddsp	r8,sp[0x58]
8000f7b6:	2d 08       	sub	r8,-48
8000f7b8:	0a c8       	st.b	r5++,r8
8000f7ba:	41 3c       	lddsp	r12,sp[0x4c]
8000f7bc:	18 35       	cp.w	r5,r12
8000f7be:	c3 71       	brne	8000f82c <_dtoa_r+0x67c>
8000f7c0:	30 08       	mov	r8,0
8000f7c2:	fc 19 3f e0 	movh	r9,0x3fe0
8000f7c6:	fa ea 00 28 	ld.d	r10,sp[40]
8000f7ca:	f0 1f 00 13 	mcall	8000f814 <_dtoa_r+0x664>
8000f7ce:	40 85       	lddsp	r5,sp[0x20]
8000f7d0:	fa e8 00 08 	ld.d	r8,sp[8]
8000f7d4:	08 05       	add	r5,r4
8000f7d6:	f0 1f 00 12 	mcall	8000f81c <_dtoa_r+0x66c>
8000f7da:	e0 81 00 a7 	brne	8000f928 <_dtoa_r+0x778>
8000f7de:	fa e8 00 28 	ld.d	r8,sp[40]
8000f7e2:	30 0a       	mov	r10,0
8000f7e4:	fc 1b 3f e0 	movh	r11,0x3fe0
8000f7e8:	f0 1f 00 0c 	mcall	8000f818 <_dtoa_r+0x668>
8000f7ec:	14 98       	mov	r8,r10
8000f7ee:	16 99       	mov	r9,r11
8000f7f0:	fa ea 00 08 	ld.d	r10,sp[8]
8000f7f4:	f0 1f 00 0a 	mcall	8000f81c <_dtoa_r+0x66c>
8000f7f8:	c2 20       	breq	8000f83c <_dtoa_r+0x68c>
8000f7fa:	33 09       	mov	r9,48
8000f7fc:	0a 98       	mov	r8,r5
8000f7fe:	11 7a       	ld.ub	r10,--r8
8000f800:	f2 0a 18 00 	cp.b	r10,r9
8000f804:	e0 81 02 f2 	brne	8000fde8 <_dtoa_r+0xc38>
8000f808:	10 95       	mov	r5,r8
8000f80a:	cf 9b       	rjmp	8000f7fc <_dtoa_r+0x64c>
8000f80c:	80 00       	ld.sh	r0,r0[0x0]
8000f80e:	c5 c8       	rjmp	8000f8c6 <_dtoa_r+0x716>
8000f810:	80 00       	ld.sh	r0,r0[0x0]
8000f812:	c1 3c       	rcall	8000f838 <_dtoa_r+0x688>
8000f814:	80 00       	ld.sh	r0,r0[0x0]
8000f816:	c4 b0       	breq	8000f8ac <_dtoa_r+0x6fc>
8000f818:	80 00       	ld.sh	r0,r0[0x0]
8000f81a:	c3 14       	brge	8000f87c <_dtoa_r+0x6cc>
8000f81c:	80 01       	ld.sh	r1,r0[0x0]
8000f81e:	19 ec       	ld.ub	r12,r12[0x6]
8000f820:	80 01       	ld.sh	r1,r0[0x0]
8000f822:	29 f0       	sub	r0,-97
8000f824:	80 01       	ld.sh	r1,r0[0x0]
8000f826:	1a 54       	eor	r4,sp
8000f828:	80 01       	ld.sh	r1,r0[0x0]
8000f82a:	19 38       	ld.ub	r8,r12++
8000f82c:	30 08       	mov	r8,0
8000f82e:	fc 19 40 24 	movh	r9,0x4024
8000f832:	f0 1f 00 56 	mcall	8000f988 <_dtoa_r+0x7d8>
8000f836:	fa eb 00 08 	st.d	sp[8],r10
8000f83a:	ca eb       	rjmp	8000f796 <_dtoa_r+0x5e6>
8000f83c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f840:	fa eb 00 08 	st.d	sp[8],r10
8000f844:	58 e6       	cp.w	r6,14
8000f846:	5f ab       	srle	r11
8000f848:	41 8a       	lddsp	r10,sp[0x60]
8000f84a:	30 08       	mov	r8,0
8000f84c:	f4 09 11 ff 	rsub	r9,r10,-1
8000f850:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000f854:	f0 09 18 00 	cp.b	r9,r8
8000f858:	e0 80 00 81 	breq	8000f95a <_dtoa_r+0x7aa>
8000f85c:	40 ea       	lddsp	r10,sp[0x38]
8000f85e:	58 01       	cp.w	r1,0
8000f860:	5f a9       	srle	r9
8000f862:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000f866:	4c aa       	lddpc	r10,8000f98c <_dtoa_r+0x7dc>
8000f868:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000f86c:	fa e5 00 10 	st.d	sp[16],r4
8000f870:	f0 09 18 00 	cp.b	r9,r8
8000f874:	c1 40       	breq	8000f89c <_dtoa_r+0x6ec>
8000f876:	58 01       	cp.w	r1,0
8000f878:	e0 81 01 8a 	brne	8000fb8c <_dtoa_r+0x9dc>
8000f87c:	30 08       	mov	r8,0
8000f87e:	fc 19 40 14 	movh	r9,0x4014
8000f882:	08 9a       	mov	r10,r4
8000f884:	0a 9b       	mov	r11,r5
8000f886:	f0 1f 00 41 	mcall	8000f988 <_dtoa_r+0x7d8>
8000f88a:	fa e8 00 08 	ld.d	r8,sp[8]
8000f88e:	f0 1f 00 41 	mcall	8000f990 <_dtoa_r+0x7e0>
8000f892:	e0 81 01 7d 	brne	8000fb8c <_dtoa_r+0x9dc>
8000f896:	02 92       	mov	r2,r1
8000f898:	e0 8f 01 85 	bral	8000fba2 <_dtoa_r+0x9f2>
8000f89c:	40 85       	lddsp	r5,sp[0x20]
8000f89e:	30 14       	mov	r4,1
8000f8a0:	fa e8 00 10 	ld.d	r8,sp[16]
8000f8a4:	fa ea 00 08 	ld.d	r10,sp[8]
8000f8a8:	f0 1f 00 3b 	mcall	8000f994 <_dtoa_r+0x7e4>
8000f8ac:	f0 1f 00 3b 	mcall	8000f998 <_dtoa_r+0x7e8>
8000f8b0:	18 92       	mov	r2,r12
8000f8b2:	f0 1f 00 3b 	mcall	8000f99c <_dtoa_r+0x7ec>
8000f8b6:	fa e8 00 10 	ld.d	r8,sp[16]
8000f8ba:	f0 1f 00 34 	mcall	8000f988 <_dtoa_r+0x7d8>
8000f8be:	14 98       	mov	r8,r10
8000f8c0:	16 99       	mov	r9,r11
8000f8c2:	fa ea 00 08 	ld.d	r10,sp[8]
8000f8c6:	f0 1f 00 37 	mcall	8000f9a0 <_dtoa_r+0x7f0>
8000f8ca:	fa eb 00 08 	st.d	sp[8],r10
8000f8ce:	e4 c8 ff d0 	sub	r8,r2,-48
8000f8d2:	0a c8       	st.b	r5++,r8
8000f8d4:	fc 19 40 24 	movh	r9,0x4024
8000f8d8:	30 08       	mov	r8,0
8000f8da:	02 34       	cp.w	r4,r1
8000f8dc:	c3 31       	brne	8000f942 <_dtoa_r+0x792>
8000f8de:	fa e8 00 08 	ld.d	r8,sp[8]
8000f8e2:	f0 1f 00 31 	mcall	8000f9a4 <_dtoa_r+0x7f4>
8000f8e6:	16 91       	mov	r1,r11
8000f8e8:	14 90       	mov	r0,r10
8000f8ea:	14 98       	mov	r8,r10
8000f8ec:	02 99       	mov	r9,r1
8000f8ee:	fa ea 00 10 	ld.d	r10,sp[16]
8000f8f2:	f0 1f 00 2e 	mcall	8000f9a8 <_dtoa_r+0x7f8>
8000f8f6:	c1 a1       	brne	8000f92a <_dtoa_r+0x77a>
8000f8f8:	fa e8 00 10 	ld.d	r8,sp[16]
8000f8fc:	00 9a       	mov	r10,r0
8000f8fe:	02 9b       	mov	r11,r1
8000f900:	f0 1f 00 2b 	mcall	8000f9ac <_dtoa_r+0x7fc>
8000f904:	e0 80 02 71 	breq	8000fde6 <_dtoa_r+0xc36>
8000f908:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000f90c:	c0 f1       	brne	8000f92a <_dtoa_r+0x77a>
8000f90e:	e0 8f 02 6c 	bral	8000fde6 <_dtoa_r+0xc36>
8000f912:	40 8a       	lddsp	r10,sp[0x20]
8000f914:	14 38       	cp.w	r8,r10
8000f916:	c0 30       	breq	8000f91c <_dtoa_r+0x76c>
8000f918:	10 95       	mov	r5,r8
8000f91a:	c0 98       	rjmp	8000f92c <_dtoa_r+0x77c>
8000f91c:	33 08       	mov	r8,48
8000f91e:	40 89       	lddsp	r9,sp[0x20]
8000f920:	2f f6       	sub	r6,-1
8000f922:	b2 88       	st.b	r9[0x0],r8
8000f924:	40 88       	lddsp	r8,sp[0x20]
8000f926:	c0 88       	rjmp	8000f936 <_dtoa_r+0x786>
8000f928:	40 66       	lddsp	r6,sp[0x18]
8000f92a:	33 99       	mov	r9,57
8000f92c:	0a 98       	mov	r8,r5
8000f92e:	11 7a       	ld.ub	r10,--r8
8000f930:	f2 0a 18 00 	cp.b	r10,r9
8000f934:	ce f0       	breq	8000f912 <_dtoa_r+0x762>
8000f936:	50 66       	stdsp	sp[0x18],r6
8000f938:	11 89       	ld.ub	r9,r8[0x0]
8000f93a:	2f f9       	sub	r9,-1
8000f93c:	b0 89       	st.b	r8[0x0],r9
8000f93e:	e0 8f 02 55 	bral	8000fde8 <_dtoa_r+0xc38>
8000f942:	f0 1f 00 12 	mcall	8000f988 <_dtoa_r+0x7d8>
8000f946:	2f f4       	sub	r4,-1
8000f948:	fa eb 00 08 	st.d	sp[8],r10
8000f94c:	30 08       	mov	r8,0
8000f94e:	30 09       	mov	r9,0
8000f950:	f0 1f 00 17 	mcall	8000f9ac <_dtoa_r+0x7fc>
8000f954:	ca 60       	breq	8000f8a0 <_dtoa_r+0x6f0>
8000f956:	e0 8f 02 48 	bral	8000fde6 <_dtoa_r+0xc36>
8000f95a:	40 d8       	lddsp	r8,sp[0x34]
8000f95c:	58 08       	cp.w	r8,0
8000f95e:	c0 51       	brne	8000f968 <_dtoa_r+0x7b8>
8000f960:	04 98       	mov	r8,r2
8000f962:	00 95       	mov	r5,r0
8000f964:	40 d4       	lddsp	r4,sp[0x34]
8000f966:	c4 a8       	rjmp	8000f9fa <_dtoa_r+0x84a>
8000f968:	40 c5       	lddsp	r5,sp[0x30]
8000f96a:	58 15       	cp.w	r5,1
8000f96c:	e0 89 00 22 	brgt	8000f9b0 <_dtoa_r+0x800>
8000f970:	41 74       	lddsp	r4,sp[0x5c]
8000f972:	58 04       	cp.w	r4,0
8000f974:	c0 40       	breq	8000f97c <_dtoa_r+0x7cc>
8000f976:	f4 c9 fb cd 	sub	r9,r10,-1075
8000f97a:	c0 48       	rjmp	8000f982 <_dtoa_r+0x7d2>
8000f97c:	41 99       	lddsp	r9,sp[0x64]
8000f97e:	f2 09 11 36 	rsub	r9,r9,54
8000f982:	04 98       	mov	r8,r2
8000f984:	00 95       	mov	r5,r0
8000f986:	c2 f8       	rjmp	8000f9e4 <_dtoa_r+0x834>
8000f988:	80 00       	ld.sh	r0,r0[0x0]
8000f98a:	c1 3c       	rcall	8000f9b0 <_dtoa_r+0x800>
8000f98c:	80 01       	ld.sh	r1,r0[0x0]
8000f98e:	29 f0       	sub	r0,-97
8000f990:	80 01       	ld.sh	r1,r0[0x0]
8000f992:	19 84       	ld.ub	r4,r12[0x0]
8000f994:	80 01       	ld.sh	r1,r0[0x0]
8000f996:	1a 54       	eor	r4,sp
8000f998:	80 01       	ld.sh	r1,r0[0x0]
8000f99a:	19 38       	ld.ub	r8,r12++
8000f99c:	80 00       	ld.sh	r0,r0[0x0]
8000f99e:	c5 c8       	rjmp	8000fa56 <_dtoa_r+0x8a6>
8000f9a0:	80 00       	ld.sh	r0,r0[0x0]
8000f9a2:	c3 14       	brge	8000fa04 <_dtoa_r+0x854>
8000f9a4:	80 00       	ld.sh	r0,r0[0x0]
8000f9a6:	c4 b0       	breq	8000fa3c <_dtoa_r+0x88c>
8000f9a8:	80 01       	ld.sh	r1,r0[0x0]
8000f9aa:	19 ec       	ld.ub	r12,r12[0x6]
8000f9ac:	80 01       	ld.sh	r1,r0[0x0]
8000f9ae:	19 5e       	ld.sh	lr,--r12
8000f9b0:	e2 c8 00 01 	sub	r8,r1,1
8000f9b4:	58 01       	cp.w	r1,0
8000f9b6:	e0 05 17 40 	movge	r5,r0
8000f9ba:	e2 09 17 40 	movge	r9,r1
8000f9be:	e1 d1 e5 15 	sublt	r5,r0,r1
8000f9c2:	f9 b9 05 00 	movlt	r9,0
8000f9c6:	10 32       	cp.w	r2,r8
8000f9c8:	e5 d8 e4 18 	subge	r8,r2,r8
8000f9cc:	f1 d2 e5 18 	sublt	r8,r8,r2
8000f9d0:	e5 d8 e5 02 	addlt	r2,r2,r8
8000f9d4:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000f9d8:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000f9dc:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000f9e0:	f9 b8 05 00 	movlt	r8,0
8000f9e4:	40 4b       	lddsp	r11,sp[0x10]
8000f9e6:	12 0b       	add	r11,r9
8000f9e8:	50 08       	stdsp	sp[0x0],r8
8000f9ea:	50 4b       	stdsp	sp[0x10],r11
8000f9ec:	12 00       	add	r0,r9
8000f9ee:	30 1b       	mov	r11,1
8000f9f0:	0e 9c       	mov	r12,r7
8000f9f2:	f0 1f 01 08 	mcall	8000fe10 <_dtoa_r+0xc60>
8000f9f6:	40 08       	lddsp	r8,sp[0x0]
8000f9f8:	18 94       	mov	r4,r12
8000f9fa:	40 4a       	lddsp	r10,sp[0x10]
8000f9fc:	58 05       	cp.w	r5,0
8000f9fe:	5f 99       	srgt	r9
8000fa00:	58 0a       	cp.w	r10,0
8000fa02:	5f 9a       	srgt	r10
8000fa04:	f5 e9 00 09 	and	r9,r10,r9
8000fa08:	c0 80       	breq	8000fa18 <_dtoa_r+0x868>
8000fa0a:	40 4c       	lddsp	r12,sp[0x10]
8000fa0c:	f8 05 0d 49 	min	r9,r12,r5
8000fa10:	12 1c       	sub	r12,r9
8000fa12:	12 10       	sub	r0,r9
8000fa14:	50 4c       	stdsp	sp[0x10],r12
8000fa16:	12 15       	sub	r5,r9
8000fa18:	58 02       	cp.w	r2,0
8000fa1a:	e0 8a 00 27 	brle	8000fa68 <_dtoa_r+0x8b8>
8000fa1e:	40 db       	lddsp	r11,sp[0x34]
8000fa20:	58 0b       	cp.w	r11,0
8000fa22:	c1 d0       	breq	8000fa5c <_dtoa_r+0x8ac>
8000fa24:	58 08       	cp.w	r8,0
8000fa26:	e0 8a 00 17 	brle	8000fa54 <_dtoa_r+0x8a4>
8000fa2a:	10 9a       	mov	r10,r8
8000fa2c:	50 08       	stdsp	sp[0x0],r8
8000fa2e:	08 9b       	mov	r11,r4
8000fa30:	0e 9c       	mov	r12,r7
8000fa32:	f0 1f 00 f9 	mcall	8000fe14 <_dtoa_r+0xc64>
8000fa36:	06 9a       	mov	r10,r3
8000fa38:	18 9b       	mov	r11,r12
8000fa3a:	18 94       	mov	r4,r12
8000fa3c:	0e 9c       	mov	r12,r7
8000fa3e:	f0 1f 00 f7 	mcall	8000fe18 <_dtoa_r+0xc68>
8000fa42:	18 99       	mov	r9,r12
8000fa44:	06 9b       	mov	r11,r3
8000fa46:	50 19       	stdsp	sp[0x4],r9
8000fa48:	0e 9c       	mov	r12,r7
8000fa4a:	f0 1f 00 f5 	mcall	8000fe1c <_dtoa_r+0xc6c>
8000fa4e:	40 19       	lddsp	r9,sp[0x4]
8000fa50:	40 08       	lddsp	r8,sp[0x0]
8000fa52:	12 93       	mov	r3,r9
8000fa54:	e4 08 01 0a 	sub	r10,r2,r8
8000fa58:	c0 80       	breq	8000fa68 <_dtoa_r+0x8b8>
8000fa5a:	c0 28       	rjmp	8000fa5e <_dtoa_r+0x8ae>
8000fa5c:	04 9a       	mov	r10,r2
8000fa5e:	06 9b       	mov	r11,r3
8000fa60:	0e 9c       	mov	r12,r7
8000fa62:	f0 1f 00 ed 	mcall	8000fe14 <_dtoa_r+0xc64>
8000fa66:	18 93       	mov	r3,r12
8000fa68:	30 1b       	mov	r11,1
8000fa6a:	0e 9c       	mov	r12,r7
8000fa6c:	f0 1f 00 e9 	mcall	8000fe10 <_dtoa_r+0xc60>
8000fa70:	41 1a       	lddsp	r10,sp[0x44]
8000fa72:	18 92       	mov	r2,r12
8000fa74:	58 0a       	cp.w	r10,0
8000fa76:	e0 8a 00 07 	brle	8000fa84 <_dtoa_r+0x8d4>
8000fa7a:	18 9b       	mov	r11,r12
8000fa7c:	0e 9c       	mov	r12,r7
8000fa7e:	f0 1f 00 e6 	mcall	8000fe14 <_dtoa_r+0xc64>
8000fa82:	18 92       	mov	r2,r12
8000fa84:	40 c9       	lddsp	r9,sp[0x30]
8000fa86:	58 19       	cp.w	r9,1
8000fa88:	e0 89 00 14 	brgt	8000fab0 <_dtoa_r+0x900>
8000fa8c:	40 38       	lddsp	r8,sp[0xc]
8000fa8e:	58 08       	cp.w	r8,0
8000fa90:	c1 01       	brne	8000fab0 <_dtoa_r+0x900>
8000fa92:	40 29       	lddsp	r9,sp[0x8]
8000fa94:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000fa98:	c0 c1       	brne	8000fab0 <_dtoa_r+0x900>
8000fa9a:	12 98       	mov	r8,r9
8000fa9c:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000faa0:	c0 80       	breq	8000fab0 <_dtoa_r+0x900>
8000faa2:	40 4c       	lddsp	r12,sp[0x10]
8000faa4:	30 1b       	mov	r11,1
8000faa6:	2f fc       	sub	r12,-1
8000faa8:	2f f0       	sub	r0,-1
8000faaa:	50 4c       	stdsp	sp[0x10],r12
8000faac:	50 6b       	stdsp	sp[0x18],r11
8000faae:	c0 38       	rjmp	8000fab4 <_dtoa_r+0x904>
8000fab0:	30 0a       	mov	r10,0
8000fab2:	50 6a       	stdsp	sp[0x18],r10
8000fab4:	41 19       	lddsp	r9,sp[0x44]
8000fab6:	58 09       	cp.w	r9,0
8000fab8:	c0 31       	brne	8000fabe <_dtoa_r+0x90e>
8000faba:	30 1c       	mov	r12,1
8000fabc:	c0 98       	rjmp	8000face <_dtoa_r+0x91e>
8000fabe:	64 48       	ld.w	r8,r2[0x10]
8000fac0:	2f c8       	sub	r8,-4
8000fac2:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000fac6:	f0 1f 00 d7 	mcall	8000fe20 <_dtoa_r+0xc70>
8000faca:	f8 0c 11 20 	rsub	r12,r12,32
8000face:	40 4b       	lddsp	r11,sp[0x10]
8000fad0:	f8 0b 00 08 	add	r8,r12,r11
8000fad4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000fad8:	c0 c0       	breq	8000faf0 <_dtoa_r+0x940>
8000fada:	f0 08 11 20 	rsub	r8,r8,32
8000fade:	58 48       	cp.w	r8,4
8000fae0:	e0 8a 00 06 	brle	8000faec <_dtoa_r+0x93c>
8000fae4:	20 48       	sub	r8,4
8000fae6:	10 0b       	add	r11,r8
8000fae8:	50 4b       	stdsp	sp[0x10],r11
8000faea:	c0 78       	rjmp	8000faf8 <_dtoa_r+0x948>
8000faec:	58 48       	cp.w	r8,4
8000faee:	c0 70       	breq	8000fafc <_dtoa_r+0x94c>
8000faf0:	40 4a       	lddsp	r10,sp[0x10]
8000faf2:	2e 48       	sub	r8,-28
8000faf4:	10 0a       	add	r10,r8
8000faf6:	50 4a       	stdsp	sp[0x10],r10
8000faf8:	10 00       	add	r0,r8
8000fafa:	10 05       	add	r5,r8
8000fafc:	58 00       	cp.w	r0,0
8000fafe:	e0 8a 00 08 	brle	8000fb0e <_dtoa_r+0x95e>
8000fb02:	06 9b       	mov	r11,r3
8000fb04:	00 9a       	mov	r10,r0
8000fb06:	0e 9c       	mov	r12,r7
8000fb08:	f0 1f 00 c7 	mcall	8000fe24 <_dtoa_r+0xc74>
8000fb0c:	18 93       	mov	r3,r12
8000fb0e:	40 49       	lddsp	r9,sp[0x10]
8000fb10:	58 09       	cp.w	r9,0
8000fb12:	e0 8a 00 08 	brle	8000fb22 <_dtoa_r+0x972>
8000fb16:	04 9b       	mov	r11,r2
8000fb18:	12 9a       	mov	r10,r9
8000fb1a:	0e 9c       	mov	r12,r7
8000fb1c:	f0 1f 00 c2 	mcall	8000fe24 <_dtoa_r+0xc74>
8000fb20:	18 92       	mov	r2,r12
8000fb22:	41 48       	lddsp	r8,sp[0x50]
8000fb24:	58 08       	cp.w	r8,0
8000fb26:	c1 b0       	breq	8000fb5c <_dtoa_r+0x9ac>
8000fb28:	04 9b       	mov	r11,r2
8000fb2a:	06 9c       	mov	r12,r3
8000fb2c:	f0 1f 00 bf 	mcall	8000fe28 <_dtoa_r+0xc78>
8000fb30:	c1 64       	brge	8000fb5c <_dtoa_r+0x9ac>
8000fb32:	06 9b       	mov	r11,r3
8000fb34:	30 09       	mov	r9,0
8000fb36:	30 aa       	mov	r10,10
8000fb38:	0e 9c       	mov	r12,r7
8000fb3a:	f0 1f 00 bd 	mcall	8000fe2c <_dtoa_r+0xc7c>
8000fb3e:	20 16       	sub	r6,1
8000fb40:	18 93       	mov	r3,r12
8000fb42:	40 dc       	lddsp	r12,sp[0x34]
8000fb44:	58 0c       	cp.w	r12,0
8000fb46:	c0 31       	brne	8000fb4c <_dtoa_r+0x99c>
8000fb48:	40 91       	lddsp	r1,sp[0x24]
8000fb4a:	c0 98       	rjmp	8000fb5c <_dtoa_r+0x9ac>
8000fb4c:	08 9b       	mov	r11,r4
8000fb4e:	40 91       	lddsp	r1,sp[0x24]
8000fb50:	30 09       	mov	r9,0
8000fb52:	30 aa       	mov	r10,10
8000fb54:	0e 9c       	mov	r12,r7
8000fb56:	f0 1f 00 b6 	mcall	8000fe2c <_dtoa_r+0xc7c>
8000fb5a:	18 94       	mov	r4,r12
8000fb5c:	58 01       	cp.w	r1,0
8000fb5e:	5f a9       	srle	r9
8000fb60:	40 cb       	lddsp	r11,sp[0x30]
8000fb62:	58 2b       	cp.w	r11,2
8000fb64:	5f 98       	srgt	r8
8000fb66:	f3 e8 00 08 	and	r8,r9,r8
8000fb6a:	c2 50       	breq	8000fbb4 <_dtoa_r+0xa04>
8000fb6c:	58 01       	cp.w	r1,0
8000fb6e:	c1 11       	brne	8000fb90 <_dtoa_r+0x9e0>
8000fb70:	04 9b       	mov	r11,r2
8000fb72:	02 99       	mov	r9,r1
8000fb74:	30 5a       	mov	r10,5
8000fb76:	0e 9c       	mov	r12,r7
8000fb78:	f0 1f 00 ad 	mcall	8000fe2c <_dtoa_r+0xc7c>
8000fb7c:	18 92       	mov	r2,r12
8000fb7e:	18 9b       	mov	r11,r12
8000fb80:	06 9c       	mov	r12,r3
8000fb82:	f0 1f 00 aa 	mcall	8000fe28 <_dtoa_r+0xc78>
8000fb86:	e0 89 00 0f 	brgt	8000fba4 <_dtoa_r+0x9f4>
8000fb8a:	c0 38       	rjmp	8000fb90 <_dtoa_r+0x9e0>
8000fb8c:	30 02       	mov	r2,0
8000fb8e:	04 94       	mov	r4,r2
8000fb90:	40 ea       	lddsp	r10,sp[0x38]
8000fb92:	30 09       	mov	r9,0
8000fb94:	5c da       	com	r10
8000fb96:	40 85       	lddsp	r5,sp[0x20]
8000fb98:	50 6a       	stdsp	sp[0x18],r10
8000fb9a:	50 49       	stdsp	sp[0x10],r9
8000fb9c:	c0 f9       	rjmp	8000fdba <_dtoa_r+0xc0a>
8000fb9e:	08 92       	mov	r2,r4
8000fba0:	40 66       	lddsp	r6,sp[0x18]
8000fba2:	04 94       	mov	r4,r2
8000fba4:	2f f6       	sub	r6,-1
8000fba6:	50 66       	stdsp	sp[0x18],r6
8000fba8:	33 18       	mov	r8,49
8000fbaa:	40 85       	lddsp	r5,sp[0x20]
8000fbac:	0a c8       	st.b	r5++,r8
8000fbae:	30 08       	mov	r8,0
8000fbb0:	50 48       	stdsp	sp[0x10],r8
8000fbb2:	c0 49       	rjmp	8000fdba <_dtoa_r+0xc0a>
8000fbb4:	40 dc       	lddsp	r12,sp[0x34]
8000fbb6:	58 0c       	cp.w	r12,0
8000fbb8:	e0 80 00 b5 	breq	8000fd22 <_dtoa_r+0xb72>
8000fbbc:	58 05       	cp.w	r5,0
8000fbbe:	e0 8a 00 08 	brle	8000fbce <_dtoa_r+0xa1e>
8000fbc2:	08 9b       	mov	r11,r4
8000fbc4:	0a 9a       	mov	r10,r5
8000fbc6:	0e 9c       	mov	r12,r7
8000fbc8:	f0 1f 00 97 	mcall	8000fe24 <_dtoa_r+0xc74>
8000fbcc:	18 94       	mov	r4,r12
8000fbce:	40 6b       	lddsp	r11,sp[0x18]
8000fbd0:	58 0b       	cp.w	r11,0
8000fbd2:	c0 31       	brne	8000fbd8 <_dtoa_r+0xa28>
8000fbd4:	08 9c       	mov	r12,r4
8000fbd6:	c1 38       	rjmp	8000fbfc <_dtoa_r+0xa4c>
8000fbd8:	68 1b       	ld.w	r11,r4[0x4]
8000fbda:	0e 9c       	mov	r12,r7
8000fbdc:	f0 1f 00 95 	mcall	8000fe30 <_dtoa_r+0xc80>
8000fbe0:	68 4a       	ld.w	r10,r4[0x10]
8000fbe2:	18 95       	mov	r5,r12
8000fbe4:	e8 cb ff f4 	sub	r11,r4,-12
8000fbe8:	2f ea       	sub	r10,-2
8000fbea:	2f 4c       	sub	r12,-12
8000fbec:	a3 6a       	lsl	r10,0x2
8000fbee:	f0 1f 00 92 	mcall	8000fe34 <_dtoa_r+0xc84>
8000fbf2:	0a 9b       	mov	r11,r5
8000fbf4:	30 1a       	mov	r10,1
8000fbf6:	0e 9c       	mov	r12,r7
8000fbf8:	f0 1f 00 8b 	mcall	8000fe24 <_dtoa_r+0xc74>
8000fbfc:	50 44       	stdsp	sp[0x10],r4
8000fbfe:	40 3a       	lddsp	r10,sp[0xc]
8000fc00:	30 19       	mov	r9,1
8000fc02:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000fc06:	18 94       	mov	r4,r12
8000fc08:	50 da       	stdsp	sp[0x34],r10
8000fc0a:	40 85       	lddsp	r5,sp[0x20]
8000fc0c:	50 99       	stdsp	sp[0x24],r9
8000fc0e:	50 26       	stdsp	sp[0x8],r6
8000fc10:	50 e1       	stdsp	sp[0x38],r1
8000fc12:	04 9b       	mov	r11,r2
8000fc14:	06 9c       	mov	r12,r3
8000fc16:	f0 1f 00 89 	mcall	8000fe38 <_dtoa_r+0xc88>
8000fc1a:	40 4b       	lddsp	r11,sp[0x10]
8000fc1c:	f8 c0 ff d0 	sub	r0,r12,-48
8000fc20:	06 9c       	mov	r12,r3
8000fc22:	f0 1f 00 82 	mcall	8000fe28 <_dtoa_r+0xc78>
8000fc26:	08 9a       	mov	r10,r4
8000fc28:	50 6c       	stdsp	sp[0x18],r12
8000fc2a:	04 9b       	mov	r11,r2
8000fc2c:	0e 9c       	mov	r12,r7
8000fc2e:	f0 1f 00 84 	mcall	8000fe3c <_dtoa_r+0xc8c>
8000fc32:	18 91       	mov	r1,r12
8000fc34:	78 38       	ld.w	r8,r12[0xc]
8000fc36:	58 08       	cp.w	r8,0
8000fc38:	c0 30       	breq	8000fc3e <_dtoa_r+0xa8e>
8000fc3a:	30 16       	mov	r6,1
8000fc3c:	c0 68       	rjmp	8000fc48 <_dtoa_r+0xa98>
8000fc3e:	18 9b       	mov	r11,r12
8000fc40:	06 9c       	mov	r12,r3
8000fc42:	f0 1f 00 7a 	mcall	8000fe28 <_dtoa_r+0xc78>
8000fc46:	18 96       	mov	r6,r12
8000fc48:	0e 9c       	mov	r12,r7
8000fc4a:	02 9b       	mov	r11,r1
8000fc4c:	f0 1f 00 74 	mcall	8000fe1c <_dtoa_r+0xc6c>
8000fc50:	40 cc       	lddsp	r12,sp[0x30]
8000fc52:	ed ec 10 08 	or	r8,r6,r12
8000fc56:	c0 d1       	brne	8000fc70 <_dtoa_r+0xac0>
8000fc58:	40 db       	lddsp	r11,sp[0x34]
8000fc5a:	58 0b       	cp.w	r11,0
8000fc5c:	c0 a1       	brne	8000fc70 <_dtoa_r+0xac0>
8000fc5e:	40 26       	lddsp	r6,sp[0x8]
8000fc60:	e0 40 00 39 	cp.w	r0,57
8000fc64:	c3 00       	breq	8000fcc4 <_dtoa_r+0xb14>
8000fc66:	40 6a       	lddsp	r10,sp[0x18]
8000fc68:	58 0a       	cp.w	r10,0
8000fc6a:	e0 89 00 24 	brgt	8000fcb2 <_dtoa_r+0xb02>
8000fc6e:	c2 f8       	rjmp	8000fccc <_dtoa_r+0xb1c>
8000fc70:	40 69       	lddsp	r9,sp[0x18]
8000fc72:	58 09       	cp.w	r9,0
8000fc74:	c0 85       	brlt	8000fc84 <_dtoa_r+0xad4>
8000fc76:	12 98       	mov	r8,r9
8000fc78:	40 cc       	lddsp	r12,sp[0x30]
8000fc7a:	18 48       	or	r8,r12
8000fc7c:	c1 d1       	brne	8000fcb6 <_dtoa_r+0xb06>
8000fc7e:	40 db       	lddsp	r11,sp[0x34]
8000fc80:	58 0b       	cp.w	r11,0
8000fc82:	c1 a1       	brne	8000fcb6 <_dtoa_r+0xb06>
8000fc84:	0c 99       	mov	r9,r6
8000fc86:	40 26       	lddsp	r6,sp[0x8]
8000fc88:	58 09       	cp.w	r9,0
8000fc8a:	e0 8a 00 21 	brle	8000fccc <_dtoa_r+0xb1c>
8000fc8e:	06 9b       	mov	r11,r3
8000fc90:	30 1a       	mov	r10,1
8000fc92:	0e 9c       	mov	r12,r7
8000fc94:	f0 1f 00 64 	mcall	8000fe24 <_dtoa_r+0xc74>
8000fc98:	04 9b       	mov	r11,r2
8000fc9a:	18 93       	mov	r3,r12
8000fc9c:	f0 1f 00 63 	mcall	8000fe28 <_dtoa_r+0xc78>
8000fca0:	e0 89 00 06 	brgt	8000fcac <_dtoa_r+0xafc>
8000fca4:	c1 41       	brne	8000fccc <_dtoa_r+0xb1c>
8000fca6:	ed b0 00 00 	bld	r0,0x0
8000fcaa:	c1 11       	brne	8000fccc <_dtoa_r+0xb1c>
8000fcac:	e0 40 00 39 	cp.w	r0,57
8000fcb0:	c0 a0       	breq	8000fcc4 <_dtoa_r+0xb14>
8000fcb2:	2f f0       	sub	r0,-1
8000fcb4:	c0 c8       	rjmp	8000fccc <_dtoa_r+0xb1c>
8000fcb6:	58 06       	cp.w	r6,0
8000fcb8:	e0 8a 00 0c 	brle	8000fcd0 <_dtoa_r+0xb20>
8000fcbc:	40 26       	lddsp	r6,sp[0x8]
8000fcbe:	e0 40 00 39 	cp.w	r0,57
8000fcc2:	c0 41       	brne	8000fcca <_dtoa_r+0xb1a>
8000fcc4:	33 98       	mov	r8,57
8000fcc6:	0a c8       	st.b	r5++,r8
8000fcc8:	c6 78       	rjmp	8000fd96 <_dtoa_r+0xbe6>
8000fcca:	2f f0       	sub	r0,-1
8000fccc:	0a c0       	st.b	r5++,r0
8000fcce:	c7 58       	rjmp	8000fdb8 <_dtoa_r+0xc08>
8000fcd0:	0a c0       	st.b	r5++,r0
8000fcd2:	40 9a       	lddsp	r10,sp[0x24]
8000fcd4:	40 e9       	lddsp	r9,sp[0x38]
8000fcd6:	12 3a       	cp.w	r10,r9
8000fcd8:	c4 30       	breq	8000fd5e <_dtoa_r+0xbae>
8000fcda:	06 9b       	mov	r11,r3
8000fcdc:	30 09       	mov	r9,0
8000fcde:	30 aa       	mov	r10,10
8000fce0:	0e 9c       	mov	r12,r7
8000fce2:	f0 1f 00 53 	mcall	8000fe2c <_dtoa_r+0xc7c>
8000fce6:	40 48       	lddsp	r8,sp[0x10]
8000fce8:	18 93       	mov	r3,r12
8000fcea:	08 38       	cp.w	r8,r4
8000fcec:	c0 91       	brne	8000fcfe <_dtoa_r+0xb4e>
8000fcee:	10 9b       	mov	r11,r8
8000fcf0:	30 09       	mov	r9,0
8000fcf2:	30 aa       	mov	r10,10
8000fcf4:	0e 9c       	mov	r12,r7
8000fcf6:	f0 1f 00 4e 	mcall	8000fe2c <_dtoa_r+0xc7c>
8000fcfa:	50 4c       	stdsp	sp[0x10],r12
8000fcfc:	c0 e8       	rjmp	8000fd18 <_dtoa_r+0xb68>
8000fcfe:	40 4b       	lddsp	r11,sp[0x10]
8000fd00:	30 09       	mov	r9,0
8000fd02:	30 aa       	mov	r10,10
8000fd04:	0e 9c       	mov	r12,r7
8000fd06:	f0 1f 00 4a 	mcall	8000fe2c <_dtoa_r+0xc7c>
8000fd0a:	08 9b       	mov	r11,r4
8000fd0c:	50 4c       	stdsp	sp[0x10],r12
8000fd0e:	30 09       	mov	r9,0
8000fd10:	30 aa       	mov	r10,10
8000fd12:	0e 9c       	mov	r12,r7
8000fd14:	f0 1f 00 46 	mcall	8000fe2c <_dtoa_r+0xc7c>
8000fd18:	18 94       	mov	r4,r12
8000fd1a:	40 9c       	lddsp	r12,sp[0x24]
8000fd1c:	2f fc       	sub	r12,-1
8000fd1e:	50 9c       	stdsp	sp[0x24],r12
8000fd20:	c7 9b       	rjmp	8000fc12 <_dtoa_r+0xa62>
8000fd22:	30 18       	mov	r8,1
8000fd24:	06 90       	mov	r0,r3
8000fd26:	40 85       	lddsp	r5,sp[0x20]
8000fd28:	08 93       	mov	r3,r4
8000fd2a:	0c 94       	mov	r4,r6
8000fd2c:	10 96       	mov	r6,r8
8000fd2e:	04 9b       	mov	r11,r2
8000fd30:	00 9c       	mov	r12,r0
8000fd32:	f0 1f 00 42 	mcall	8000fe38 <_dtoa_r+0xc88>
8000fd36:	2d 0c       	sub	r12,-48
8000fd38:	0a cc       	st.b	r5++,r12
8000fd3a:	02 36       	cp.w	r6,r1
8000fd3c:	c0 a4       	brge	8000fd50 <_dtoa_r+0xba0>
8000fd3e:	00 9b       	mov	r11,r0
8000fd40:	30 09       	mov	r9,0
8000fd42:	30 aa       	mov	r10,10
8000fd44:	0e 9c       	mov	r12,r7
8000fd46:	2f f6       	sub	r6,-1
8000fd48:	f0 1f 00 39 	mcall	8000fe2c <_dtoa_r+0xc7c>
8000fd4c:	18 90       	mov	r0,r12
8000fd4e:	cf 0b       	rjmp	8000fd2e <_dtoa_r+0xb7e>
8000fd50:	08 96       	mov	r6,r4
8000fd52:	30 0b       	mov	r11,0
8000fd54:	06 94       	mov	r4,r3
8000fd56:	50 4b       	stdsp	sp[0x10],r11
8000fd58:	00 93       	mov	r3,r0
8000fd5a:	18 90       	mov	r0,r12
8000fd5c:	c0 28       	rjmp	8000fd60 <_dtoa_r+0xbb0>
8000fd5e:	40 26       	lddsp	r6,sp[0x8]
8000fd60:	06 9b       	mov	r11,r3
8000fd62:	30 1a       	mov	r10,1
8000fd64:	0e 9c       	mov	r12,r7
8000fd66:	f0 1f 00 30 	mcall	8000fe24 <_dtoa_r+0xc74>
8000fd6a:	04 9b       	mov	r11,r2
8000fd6c:	18 93       	mov	r3,r12
8000fd6e:	f0 1f 00 2f 	mcall	8000fe28 <_dtoa_r+0xc78>
8000fd72:	e0 89 00 12 	brgt	8000fd96 <_dtoa_r+0xbe6>
8000fd76:	c1 b1       	brne	8000fdac <_dtoa_r+0xbfc>
8000fd78:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000fd7c:	c0 d1       	brne	8000fd96 <_dtoa_r+0xbe6>
8000fd7e:	c1 78       	rjmp	8000fdac <_dtoa_r+0xbfc>
8000fd80:	40 89       	lddsp	r9,sp[0x20]
8000fd82:	12 38       	cp.w	r8,r9
8000fd84:	c0 30       	breq	8000fd8a <_dtoa_r+0xbda>
8000fd86:	10 95       	mov	r5,r8
8000fd88:	c0 88       	rjmp	8000fd98 <_dtoa_r+0xbe8>
8000fd8a:	2f f6       	sub	r6,-1
8000fd8c:	50 66       	stdsp	sp[0x18],r6
8000fd8e:	33 18       	mov	r8,49
8000fd90:	40 8c       	lddsp	r12,sp[0x20]
8000fd92:	b8 88       	st.b	r12[0x0],r8
8000fd94:	c1 38       	rjmp	8000fdba <_dtoa_r+0xc0a>
8000fd96:	33 9a       	mov	r10,57
8000fd98:	0a 98       	mov	r8,r5
8000fd9a:	11 79       	ld.ub	r9,--r8
8000fd9c:	f4 09 18 00 	cp.b	r9,r10
8000fda0:	cf 00       	breq	8000fd80 <_dtoa_r+0xbd0>
8000fda2:	2f f9       	sub	r9,-1
8000fda4:	b0 89       	st.b	r8[0x0],r9
8000fda6:	c0 98       	rjmp	8000fdb8 <_dtoa_r+0xc08>
8000fda8:	10 95       	mov	r5,r8
8000fdaa:	c0 28       	rjmp	8000fdae <_dtoa_r+0xbfe>
8000fdac:	33 09       	mov	r9,48
8000fdae:	0a 98       	mov	r8,r5
8000fdb0:	11 7a       	ld.ub	r10,--r8
8000fdb2:	f2 0a 18 00 	cp.b	r10,r9
8000fdb6:	cf 90       	breq	8000fda8 <_dtoa_r+0xbf8>
8000fdb8:	50 66       	stdsp	sp[0x18],r6
8000fdba:	04 9b       	mov	r11,r2
8000fdbc:	0e 9c       	mov	r12,r7
8000fdbe:	f0 1f 00 18 	mcall	8000fe1c <_dtoa_r+0xc6c>
8000fdc2:	58 04       	cp.w	r4,0
8000fdc4:	c1 20       	breq	8000fde8 <_dtoa_r+0xc38>
8000fdc6:	40 4b       	lddsp	r11,sp[0x10]
8000fdc8:	08 3b       	cp.w	r11,r4
8000fdca:	5f 19       	srne	r9
8000fdcc:	58 0b       	cp.w	r11,0
8000fdce:	5f 18       	srne	r8
8000fdd0:	f3 e8 00 08 	and	r8,r9,r8
8000fdd4:	c0 40       	breq	8000fddc <_dtoa_r+0xc2c>
8000fdd6:	0e 9c       	mov	r12,r7
8000fdd8:	f0 1f 00 11 	mcall	8000fe1c <_dtoa_r+0xc6c>
8000fddc:	08 9b       	mov	r11,r4
8000fdde:	0e 9c       	mov	r12,r7
8000fde0:	f0 1f 00 0f 	mcall	8000fe1c <_dtoa_r+0xc6c>
8000fde4:	c0 28       	rjmp	8000fde8 <_dtoa_r+0xc38>
8000fde6:	50 66       	stdsp	sp[0x18],r6
8000fde8:	0e 9c       	mov	r12,r7
8000fdea:	06 9b       	mov	r11,r3
8000fdec:	f0 1f 00 0c 	mcall	8000fe1c <_dtoa_r+0xc6c>
8000fdf0:	30 08       	mov	r8,0
8000fdf2:	aa 88       	st.b	r5[0x0],r8
8000fdf4:	40 68       	lddsp	r8,sp[0x18]
8000fdf6:	41 5a       	lddsp	r10,sp[0x54]
8000fdf8:	2f f8       	sub	r8,-1
8000fdfa:	41 29       	lddsp	r9,sp[0x48]
8000fdfc:	95 08       	st.w	r10[0x0],r8
8000fdfe:	40 8c       	lddsp	r12,sp[0x20]
8000fe00:	58 09       	cp.w	r9,0
8000fe02:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000fe06:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000fe0a:	2e 6d       	sub	sp,-104
8000fe0c:	d8 32       	popm	r0-r7,pc
8000fe0e:	00 00       	add	r0,r0
8000fe10:	80 01       	ld.sh	r1,r0[0x0]
8000fe12:	10 b8       	st.h	r8++,r8
8000fe14:	80 01       	ld.sh	r1,r0[0x0]
8000fe16:	11 58       	ld.sh	r8,--r8
8000fe18:	80 01       	ld.sh	r1,r0[0x0]
8000fe1a:	0f b0       	ld.ub	r0,r7[0x3]
8000fe1c:	80 01       	ld.sh	r1,r0[0x0]
8000fe1e:	0c e0       	st.h	--r6,r0
8000fe20:	80 01       	ld.sh	r1,r0[0x0]
8000fe22:	0b c0       	ld.ub	r0,r5[0x4]
8000fe24:	80 01       	ld.sh	r1,r0[0x0]
8000fe26:	0f 1c       	ld.sh	r12,r7++
8000fe28:	80 01       	ld.sh	r1,r0[0x0]
8000fe2a:	0c ae       	st.w	r6++,lr
8000fe2c:	80 01       	ld.sh	r1,r0[0x0]
8000fe2e:	10 d0       	st.w	--r8,r0
8000fe30:	80 01       	ld.sh	r1,r0[0x0]
8000fe32:	0d 18       	ld.sh	r8,r6++
8000fe34:	80 00       	ld.sh	r0,r0[0x0]
8000fe36:	ca f6       	brmi	8000fd94 <_dtoa_r+0xbe4>
8000fe38:	80 00       	ld.sh	r0,r0[0x0]
8000fe3a:	f0 8c 80 01 	brvs	7fe1fe3c <_estack+0x7fe0fe3c>
8000fe3e:	0e 44       	or	r4,r7

8000fe40 <_fflush_r>:
8000fe40:	d4 21       	pushm	r4-r7,lr
8000fe42:	16 97       	mov	r7,r11
8000fe44:	18 96       	mov	r6,r12
8000fe46:	76 48       	ld.w	r8,r11[0x10]
8000fe48:	58 08       	cp.w	r8,0
8000fe4a:	c7 d0       	breq	8000ff44 <_fflush_r+0x104>
8000fe4c:	58 0c       	cp.w	r12,0
8000fe4e:	c0 60       	breq	8000fe5a <_fflush_r+0x1a>
8000fe50:	78 68       	ld.w	r8,r12[0x18]
8000fe52:	58 08       	cp.w	r8,0
8000fe54:	c0 31       	brne	8000fe5a <_fflush_r+0x1a>
8000fe56:	f0 1f 00 3d 	mcall	8000ff48 <_fflush_r+0x108>
8000fe5a:	4b d8       	lddpc	r8,8000ff4c <_fflush_r+0x10c>
8000fe5c:	10 37       	cp.w	r7,r8
8000fe5e:	c0 31       	brne	8000fe64 <_fflush_r+0x24>
8000fe60:	6c 07       	ld.w	r7,r6[0x0]
8000fe62:	c0 a8       	rjmp	8000fe76 <_fflush_r+0x36>
8000fe64:	4b b8       	lddpc	r8,8000ff50 <_fflush_r+0x110>
8000fe66:	10 37       	cp.w	r7,r8
8000fe68:	c0 31       	brne	8000fe6e <_fflush_r+0x2e>
8000fe6a:	6c 17       	ld.w	r7,r6[0x4]
8000fe6c:	c0 58       	rjmp	8000fe76 <_fflush_r+0x36>
8000fe6e:	4b a8       	lddpc	r8,8000ff54 <_fflush_r+0x114>
8000fe70:	10 37       	cp.w	r7,r8
8000fe72:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000fe76:	8e 6a       	ld.sh	r10,r7[0xc]
8000fe78:	14 98       	mov	r8,r10
8000fe7a:	ed ba 00 03 	bld	r10,0x3
8000fe7e:	c4 20       	breq	8000ff02 <_fflush_r+0xc2>
8000fe80:	ab ba       	sbr	r10,0xb
8000fe82:	ae 6a       	st.h	r7[0xc],r10
8000fe84:	6e 18       	ld.w	r8,r7[0x4]
8000fe86:	58 08       	cp.w	r8,0
8000fe88:	e0 89 00 06 	brgt	8000fe94 <_fflush_r+0x54>
8000fe8c:	6f 08       	ld.w	r8,r7[0x40]
8000fe8e:	58 08       	cp.w	r8,0
8000fe90:	e0 8a 00 5a 	brle	8000ff44 <_fflush_r+0x104>
8000fe94:	6e b8       	ld.w	r8,r7[0x2c]
8000fe96:	58 08       	cp.w	r8,0
8000fe98:	c5 60       	breq	8000ff44 <_fflush_r+0x104>
8000fe9a:	e2 1a 10 00 	andl	r10,0x1000,COH
8000fe9e:	c0 30       	breq	8000fea4 <_fflush_r+0x64>
8000fea0:	6f 55       	ld.w	r5,r7[0x54]
8000fea2:	c0 f8       	rjmp	8000fec0 <_fflush_r+0x80>
8000fea4:	30 19       	mov	r9,1
8000fea6:	6e 8b       	ld.w	r11,r7[0x20]
8000fea8:	0c 9c       	mov	r12,r6
8000feaa:	5d 18       	icall	r8
8000feac:	18 95       	mov	r5,r12
8000feae:	5b fc       	cp.w	r12,-1
8000feb0:	c0 81       	brne	8000fec0 <_fflush_r+0x80>
8000feb2:	6c 38       	ld.w	r8,r6[0xc]
8000feb4:	59 d8       	cp.w	r8,29
8000feb6:	c4 70       	breq	8000ff44 <_fflush_r+0x104>
8000feb8:	8e 68       	ld.sh	r8,r7[0xc]
8000feba:	a7 a8       	sbr	r8,0x6
8000febc:	ae 68       	st.h	r7[0xc],r8
8000febe:	d8 22       	popm	r4-r7,pc
8000fec0:	8e 68       	ld.sh	r8,r7[0xc]
8000fec2:	ed b8 00 02 	bld	r8,0x2
8000fec6:	c0 91       	brne	8000fed8 <_fflush_r+0x98>
8000fec8:	6e 18       	ld.w	r8,r7[0x4]
8000feca:	10 15       	sub	r5,r8
8000fecc:	6e d8       	ld.w	r8,r7[0x34]
8000fece:	58 08       	cp.w	r8,0
8000fed0:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000fed4:	eb d8 e1 15 	subne	r5,r5,r8
8000fed8:	6e b8       	ld.w	r8,r7[0x2c]
8000feda:	0c 9c       	mov	r12,r6
8000fedc:	30 09       	mov	r9,0
8000fede:	0a 9a       	mov	r10,r5
8000fee0:	6e 8b       	ld.w	r11,r7[0x20]
8000fee2:	5d 18       	icall	r8
8000fee4:	8e 68       	ld.sh	r8,r7[0xc]
8000fee6:	0a 3c       	cp.w	r12,r5
8000fee8:	c2 61       	brne	8000ff34 <_fflush_r+0xf4>
8000feea:	ab d8       	cbr	r8,0xb
8000feec:	30 0c       	mov	r12,0
8000feee:	6e 49       	ld.w	r9,r7[0x10]
8000fef0:	ae 68       	st.h	r7[0xc],r8
8000fef2:	8f 1c       	st.w	r7[0x4],r12
8000fef4:	8f 09       	st.w	r7[0x0],r9
8000fef6:	ed b8 00 0c 	bld	r8,0xc
8000fefa:	c2 51       	brne	8000ff44 <_fflush_r+0x104>
8000fefc:	ef 45 00 54 	st.w	r7[84],r5
8000ff00:	d8 22       	popm	r4-r7,pc
8000ff02:	6e 45       	ld.w	r5,r7[0x10]
8000ff04:	58 05       	cp.w	r5,0
8000ff06:	c1 f0       	breq	8000ff44 <_fflush_r+0x104>
8000ff08:	6e 04       	ld.w	r4,r7[0x0]
8000ff0a:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000ff0e:	8f 05       	st.w	r7[0x0],r5
8000ff10:	f9 b8 01 00 	movne	r8,0
8000ff14:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000ff18:	0a 14       	sub	r4,r5
8000ff1a:	8f 28       	st.w	r7[0x8],r8
8000ff1c:	c1 18       	rjmp	8000ff3e <_fflush_r+0xfe>
8000ff1e:	08 99       	mov	r9,r4
8000ff20:	0a 9a       	mov	r10,r5
8000ff22:	6e a8       	ld.w	r8,r7[0x28]
8000ff24:	6e 8b       	ld.w	r11,r7[0x20]
8000ff26:	0c 9c       	mov	r12,r6
8000ff28:	5d 18       	icall	r8
8000ff2a:	18 14       	sub	r4,r12
8000ff2c:	58 0c       	cp.w	r12,0
8000ff2e:	e0 89 00 07 	brgt	8000ff3c <_fflush_r+0xfc>
8000ff32:	8e 68       	ld.sh	r8,r7[0xc]
8000ff34:	a7 a8       	sbr	r8,0x6
8000ff36:	3f fc       	mov	r12,-1
8000ff38:	ae 68       	st.h	r7[0xc],r8
8000ff3a:	d8 22       	popm	r4-r7,pc
8000ff3c:	18 05       	add	r5,r12
8000ff3e:	58 04       	cp.w	r4,0
8000ff40:	fe 99 ff ef 	brgt	8000ff1e <_fflush_r+0xde>
8000ff44:	d8 2a       	popm	r4-r7,pc,r12=0
8000ff46:	00 00       	add	r0,r0
8000ff48:	80 01       	ld.sh	r1,r0[0x0]
8000ff4a:	00 1c       	sub	r12,r0
8000ff4c:	80 01       	ld.sh	r1,r0[0x0]
8000ff4e:	29 3c       	sub	r12,-109
8000ff50:	80 01       	ld.sh	r1,r0[0x0]
8000ff52:	29 5c       	sub	r12,-107
8000ff54:	80 01       	ld.sh	r1,r0[0x0]
8000ff56:	29 7c       	sub	r12,-105

8000ff58 <__sfp_lock_acquire>:
8000ff58:	5e fc       	retal	r12

8000ff5a <__sfp_lock_release>:
8000ff5a:	5e fc       	retal	r12

8000ff5c <_cleanup_r>:
8000ff5c:	d4 01       	pushm	lr
8000ff5e:	48 3b       	lddpc	r11,8000ff68 <_cleanup_r+0xc>
8000ff60:	f0 1f 00 03 	mcall	8000ff6c <_cleanup_r+0x10>
8000ff64:	d8 02       	popm	pc
8000ff66:	00 00       	add	r0,r0
8000ff68:	80 01       	ld.sh	r1,r0[0x0]
8000ff6a:	18 98       	mov	r8,r12
8000ff6c:	80 01       	ld.sh	r1,r0[0x0]
8000ff6e:	05 d8       	ld.ub	r8,r2[0x5]

8000ff70 <__sfmoreglue>:
8000ff70:	d4 21       	pushm	r4-r7,lr
8000ff72:	16 95       	mov	r5,r11
8000ff74:	f6 06 10 5c 	mul	r6,r11,92
8000ff78:	ec cb ff f4 	sub	r11,r6,-12
8000ff7c:	f0 1f 00 07 	mcall	8000ff98 <__sfmoreglue+0x28>
8000ff80:	18 97       	mov	r7,r12
8000ff82:	c0 90       	breq	8000ff94 <__sfmoreglue+0x24>
8000ff84:	99 15       	st.w	r12[0x4],r5
8000ff86:	30 0b       	mov	r11,0
8000ff88:	2f 4c       	sub	r12,-12
8000ff8a:	0c 9a       	mov	r10,r6
8000ff8c:	8f 2c       	st.w	r7[0x8],r12
8000ff8e:	8f 0b       	st.w	r7[0x0],r11
8000ff90:	f0 1f 00 03 	mcall	8000ff9c <__sfmoreglue+0x2c>
8000ff94:	0e 9c       	mov	r12,r7
8000ff96:	d8 22       	popm	r4-r7,pc
8000ff98:	80 01       	ld.sh	r1,r0[0x0]
8000ff9a:	07 18       	ld.sh	r8,r3++
8000ff9c:	80 00       	ld.sh	r0,r0[0x0]
8000ff9e:	cc 3e       	rcall	8000fd24 <_dtoa_r+0xb74>

8000ffa0 <__sfp>:
8000ffa0:	d4 21       	pushm	r4-r7,lr
8000ffa2:	49 c8       	lddpc	r8,80010010 <__sfp+0x70>
8000ffa4:	18 96       	mov	r6,r12
8000ffa6:	70 07       	ld.w	r7,r8[0x0]
8000ffa8:	6e 68       	ld.w	r8,r7[0x18]
8000ffaa:	58 08       	cp.w	r8,0
8000ffac:	c0 41       	brne	8000ffb4 <__sfp+0x14>
8000ffae:	0e 9c       	mov	r12,r7
8000ffb0:	f0 1f 00 19 	mcall	80010014 <__sfp+0x74>
8000ffb4:	ee c7 ff 28 	sub	r7,r7,-216
8000ffb8:	30 05       	mov	r5,0
8000ffba:	6e 2c       	ld.w	r12,r7[0x8]
8000ffbc:	6e 18       	ld.w	r8,r7[0x4]
8000ffbe:	c0 68       	rjmp	8000ffca <__sfp+0x2a>
8000ffc0:	98 69       	ld.sh	r9,r12[0xc]
8000ffc2:	ea 09 19 00 	cp.h	r9,r5
8000ffc6:	c1 20       	breq	8000ffea <__sfp+0x4a>
8000ffc8:	2a 4c       	sub	r12,-92
8000ffca:	20 18       	sub	r8,1
8000ffcc:	cf a7       	brpl	8000ffc0 <__sfp+0x20>
8000ffce:	6e 08       	ld.w	r8,r7[0x0]
8000ffd0:	58 08       	cp.w	r8,0
8000ffd2:	c0 71       	brne	8000ffe0 <__sfp+0x40>
8000ffd4:	30 4b       	mov	r11,4
8000ffd6:	0c 9c       	mov	r12,r6
8000ffd8:	f0 1f 00 10 	mcall	80010018 <__sfp+0x78>
8000ffdc:	8f 0c       	st.w	r7[0x0],r12
8000ffde:	c0 30       	breq	8000ffe4 <__sfp+0x44>
8000ffe0:	6e 07       	ld.w	r7,r7[0x0]
8000ffe2:	ce cb       	rjmp	8000ffba <__sfp+0x1a>
8000ffe4:	30 c8       	mov	r8,12
8000ffe6:	8d 38       	st.w	r6[0xc],r8
8000ffe8:	d8 22       	popm	r4-r7,pc
8000ffea:	30 08       	mov	r8,0
8000ffec:	f9 48 00 4c 	st.w	r12[76],r8
8000fff0:	99 08       	st.w	r12[0x0],r8
8000fff2:	99 28       	st.w	r12[0x8],r8
8000fff4:	99 18       	st.w	r12[0x4],r8
8000fff6:	99 48       	st.w	r12[0x10],r8
8000fff8:	99 58       	st.w	r12[0x14],r8
8000fffa:	99 68       	st.w	r12[0x18],r8
8000fffc:	99 d8       	st.w	r12[0x34],r8
8000fffe:	99 e8       	st.w	r12[0x38],r8
80010000:	f9 48 00 48 	st.w	r12[72],r8
80010004:	3f f8       	mov	r8,-1
80010006:	b8 78       	st.h	r12[0xe],r8
80010008:	30 18       	mov	r8,1
8001000a:	b8 68       	st.h	r12[0xc],r8
8001000c:	d8 22       	popm	r4-r7,pc
8001000e:	00 00       	add	r0,r0
80010010:	80 01       	ld.sh	r1,r0[0x0]
80010012:	29 a0       	sub	r0,-102
80010014:	80 01       	ld.sh	r1,r0[0x0]
80010016:	00 1c       	sub	r12,r0
80010018:	80 00       	ld.sh	r0,r0[0x0]
8001001a:	ff 70 d4 21 	stcond	pc[-11231],r0

8001001c <__sinit>:
8001001c:	d4 21       	pushm	r4-r7,lr
8001001e:	18 96       	mov	r6,r12
80010020:	78 67       	ld.w	r7,r12[0x18]
80010022:	58 07       	cp.w	r7,0
80010024:	c4 71       	brne	800100b2 <__sinit+0x96>
80010026:	4a 48       	lddpc	r8,800100b4 <__sinit+0x98>
80010028:	30 15       	mov	r5,1
8001002a:	99 a8       	st.w	r12[0x28],r8
8001002c:	f9 47 00 d8 	st.w	r12[216],r7
80010030:	f9 47 00 dc 	st.w	r12[220],r7
80010034:	f9 47 00 e0 	st.w	r12[224],r7
80010038:	99 65       	st.w	r12[0x18],r5
8001003a:	f0 1f 00 20 	mcall	800100b8 <__sinit+0x9c>
8001003e:	8d 0c       	st.w	r6[0x0],r12
80010040:	0c 9c       	mov	r12,r6
80010042:	f0 1f 00 1e 	mcall	800100b8 <__sinit+0x9c>
80010046:	8d 1c       	st.w	r6[0x4],r12
80010048:	0c 9c       	mov	r12,r6
8001004a:	f0 1f 00 1c 	mcall	800100b8 <__sinit+0x9c>
8001004e:	6c 09       	ld.w	r9,r6[0x0]
80010050:	30 48       	mov	r8,4
80010052:	93 07       	st.w	r9[0x0],r7
80010054:	b2 68       	st.h	r9[0xc],r8
80010056:	93 17       	st.w	r9[0x4],r7
80010058:	93 27       	st.w	r9[0x8],r7
8001005a:	6c 18       	ld.w	r8,r6[0x4]
8001005c:	b2 77       	st.h	r9[0xe],r7
8001005e:	93 47       	st.w	r9[0x10],r7
80010060:	93 57       	st.w	r9[0x14],r7
80010062:	93 67       	st.w	r9[0x18],r7
80010064:	93 89       	st.w	r9[0x20],r9
80010066:	91 07       	st.w	r8[0x0],r7
80010068:	91 17       	st.w	r8[0x4],r7
8001006a:	91 27       	st.w	r8[0x8],r7
8001006c:	49 4e       	lddpc	lr,800100bc <__sinit+0xa0>
8001006e:	49 5b       	lddpc	r11,800100c0 <__sinit+0xa4>
80010070:	93 9e       	st.w	r9[0x24],lr
80010072:	93 ab       	st.w	r9[0x28],r11
80010074:	49 4a       	lddpc	r10,800100c4 <__sinit+0xa8>
80010076:	49 54       	lddpc	r4,800100c8 <__sinit+0xac>
80010078:	93 ba       	st.w	r9[0x2c],r10
8001007a:	93 c4       	st.w	r9[0x30],r4
8001007c:	30 99       	mov	r9,9
8001007e:	b0 69       	st.h	r8[0xc],r9
80010080:	b0 75       	st.h	r8[0xe],r5
80010082:	91 c4       	st.w	r8[0x30],r4
80010084:	91 47       	st.w	r8[0x10],r7
80010086:	91 57       	st.w	r8[0x14],r7
80010088:	91 67       	st.w	r8[0x18],r7
8001008a:	91 88       	st.w	r8[0x20],r8
8001008c:	91 9e       	st.w	r8[0x24],lr
8001008e:	91 ab       	st.w	r8[0x28],r11
80010090:	91 ba       	st.w	r8[0x2c],r10
80010092:	8d 2c       	st.w	r6[0x8],r12
80010094:	31 28       	mov	r8,18
80010096:	99 07       	st.w	r12[0x0],r7
80010098:	b8 68       	st.h	r12[0xc],r8
8001009a:	99 17       	st.w	r12[0x4],r7
8001009c:	99 27       	st.w	r12[0x8],r7
8001009e:	30 28       	mov	r8,2
800100a0:	b8 78       	st.h	r12[0xe],r8
800100a2:	99 c4       	st.w	r12[0x30],r4
800100a4:	99 67       	st.w	r12[0x18],r7
800100a6:	99 9e       	st.w	r12[0x24],lr
800100a8:	99 ab       	st.w	r12[0x28],r11
800100aa:	99 ba       	st.w	r12[0x2c],r10
800100ac:	99 47       	st.w	r12[0x10],r7
800100ae:	99 57       	st.w	r12[0x14],r7
800100b0:	99 8c       	st.w	r12[0x20],r12
800100b2:	d8 22       	popm	r4-r7,pc
800100b4:	80 00       	ld.sh	r0,r0[0x0]
800100b6:	ff 5c 80 00 	st.h	pc[-32768],r12
800100ba:	ff a0       	*unknown*
800100bc:	80 01       	ld.sh	r1,r0[0x0]
800100be:	15 c4       	ld.ub	r4,r10[0x4]
800100c0:	80 01       	ld.sh	r1,r0[0x0]
800100c2:	15 8c       	ld.ub	r12,r10[0x0]
800100c4:	80 01       	ld.sh	r1,r0[0x0]
800100c6:	15 64       	ld.uh	r4,--r10
800100c8:	80 01       	ld.sh	r1,r0[0x0]
800100ca:	15 54       	ld.sh	r4,--r10

800100cc <_malloc_trim_r>:
800100cc:	d4 21       	pushm	r4-r7,lr
800100ce:	16 95       	mov	r5,r11
800100d0:	18 97       	mov	r7,r12
800100d2:	f0 1f 00 23 	mcall	8001015c <_malloc_trim_r+0x90>
800100d6:	4a 34       	lddpc	r4,80010160 <_malloc_trim_r+0x94>
800100d8:	68 28       	ld.w	r8,r4[0x8]
800100da:	70 16       	ld.w	r6,r8[0x4]
800100dc:	e0 16 ff fc 	andl	r6,0xfffc
800100e0:	ec c8 ff 91 	sub	r8,r6,-111
800100e4:	f0 05 01 05 	sub	r5,r8,r5
800100e8:	e0 15 ff 80 	andl	r5,0xff80
800100ec:	ea c5 00 80 	sub	r5,r5,128
800100f0:	e0 45 00 7f 	cp.w	r5,127
800100f4:	e0 8a 00 23 	brle	8001013a <_malloc_trim_r+0x6e>
800100f8:	30 0b       	mov	r11,0
800100fa:	0e 9c       	mov	r12,r7
800100fc:	f0 1f 00 1a 	mcall	80010164 <_malloc_trim_r+0x98>
80010100:	68 28       	ld.w	r8,r4[0x8]
80010102:	0c 08       	add	r8,r6
80010104:	10 3c       	cp.w	r12,r8
80010106:	c1 a1       	brne	8001013a <_malloc_trim_r+0x6e>
80010108:	ea 0b 11 00 	rsub	r11,r5,0
8001010c:	0e 9c       	mov	r12,r7
8001010e:	f0 1f 00 16 	mcall	80010164 <_malloc_trim_r+0x98>
80010112:	5b fc       	cp.w	r12,-1
80010114:	c1 71       	brne	80010142 <_malloc_trim_r+0x76>
80010116:	30 0b       	mov	r11,0
80010118:	0e 9c       	mov	r12,r7
8001011a:	f0 1f 00 13 	mcall	80010164 <_malloc_trim_r+0x98>
8001011e:	68 28       	ld.w	r8,r4[0x8]
80010120:	f8 08 01 09 	sub	r9,r12,r8
80010124:	58 f9       	cp.w	r9,15
80010126:	e0 8a 00 0a 	brle	8001013a <_malloc_trim_r+0x6e>
8001012a:	a1 a9       	sbr	r9,0x0
8001012c:	91 19       	st.w	r8[0x4],r9
8001012e:	48 f8       	lddpc	r8,80010168 <_malloc_trim_r+0x9c>
80010130:	70 09       	ld.w	r9,r8[0x0]
80010132:	48 f8       	lddpc	r8,8001016c <_malloc_trim_r+0xa0>
80010134:	f8 09 01 09 	sub	r9,r12,r9
80010138:	91 09       	st.w	r8[0x0],r9
8001013a:	0e 9c       	mov	r12,r7
8001013c:	f0 1f 00 0d 	mcall	80010170 <_malloc_trim_r+0xa4>
80010140:	d8 2a       	popm	r4-r7,pc,r12=0
80010142:	68 28       	ld.w	r8,r4[0x8]
80010144:	0a 16       	sub	r6,r5
80010146:	a1 a6       	sbr	r6,0x0
80010148:	91 16       	st.w	r8[0x4],r6
8001014a:	48 98       	lddpc	r8,8001016c <_malloc_trim_r+0xa0>
8001014c:	70 09       	ld.w	r9,r8[0x0]
8001014e:	0a 19       	sub	r9,r5
80010150:	0e 9c       	mov	r12,r7
80010152:	91 09       	st.w	r8[0x0],r9
80010154:	f0 1f 00 07 	mcall	80010170 <_malloc_trim_r+0xa4>
80010158:	da 2a       	popm	r4-r7,pc,r12=1
8001015a:	00 00       	add	r0,r0
8001015c:	80 01       	ld.sh	r1,r0[0x0]
8001015e:	0b bc       	ld.ub	r12,r5[0x3]
80010160:	00 00       	add	r0,r0
80010162:	01 ac       	ld.ub	r12,r0[0x2]
80010164:	80 01       	ld.sh	r1,r0[0x0]
80010166:	15 2c       	ld.uh	r12,r10++
80010168:	00 00       	add	r0,r0
8001016a:	05 b8       	ld.ub	r8,r2[0x3]
8001016c:	00 00       	add	r0,r0
8001016e:	07 e4       	ld.ub	r4,r3[0x6]
80010170:	80 01       	ld.sh	r1,r0[0x0]
80010172:	0b be       	ld.ub	lr,r5[0x3]

80010174 <_free_r>:
80010174:	d4 21       	pushm	r4-r7,lr
80010176:	16 96       	mov	r6,r11
80010178:	18 97       	mov	r7,r12
8001017a:	58 0b       	cp.w	r11,0
8001017c:	e0 80 00 c8 	breq	8001030c <_free_r+0x198>
80010180:	f0 1f 00 4c 	mcall	800102b0 <_free_r+0x13c>
80010184:	20 86       	sub	r6,8
80010186:	4c ca       	lddpc	r10,800102b4 <_free_r+0x140>
80010188:	6c 18       	ld.w	r8,r6[0x4]
8001018a:	74 2e       	ld.w	lr,r10[0x8]
8001018c:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80010190:	a1 c8       	cbr	r8,0x0
80010192:	ec 08 00 09 	add	r9,r6,r8
80010196:	72 1b       	ld.w	r11,r9[0x4]
80010198:	e0 1b ff fc 	andl	r11,0xfffc
8001019c:	1c 39       	cp.w	r9,lr
8001019e:	c1 d1       	brne	800101d8 <_free_r+0x64>
800101a0:	f6 08 00 08 	add	r8,r11,r8
800101a4:	58 0c       	cp.w	r12,0
800101a6:	c0 81       	brne	800101b6 <_free_r+0x42>
800101a8:	6c 09       	ld.w	r9,r6[0x0]
800101aa:	12 16       	sub	r6,r9
800101ac:	12 08       	add	r8,r9
800101ae:	6c 3b       	ld.w	r11,r6[0xc]
800101b0:	6c 29       	ld.w	r9,r6[0x8]
800101b2:	97 29       	st.w	r11[0x8],r9
800101b4:	93 3b       	st.w	r9[0xc],r11
800101b6:	10 99       	mov	r9,r8
800101b8:	95 26       	st.w	r10[0x8],r6
800101ba:	a1 a9       	sbr	r9,0x0
800101bc:	8d 19       	st.w	r6[0x4],r9
800101be:	4b f9       	lddpc	r9,800102b8 <_free_r+0x144>
800101c0:	72 09       	ld.w	r9,r9[0x0]
800101c2:	12 38       	cp.w	r8,r9
800101c4:	c0 63       	brcs	800101d0 <_free_r+0x5c>
800101c6:	4b e8       	lddpc	r8,800102bc <_free_r+0x148>
800101c8:	0e 9c       	mov	r12,r7
800101ca:	70 0b       	ld.w	r11,r8[0x0]
800101cc:	f0 1f 00 3d 	mcall	800102c0 <_free_r+0x14c>
800101d0:	0e 9c       	mov	r12,r7
800101d2:	f0 1f 00 3d 	mcall	800102c4 <_free_r+0x150>
800101d6:	d8 22       	popm	r4-r7,pc
800101d8:	93 1b       	st.w	r9[0x4],r11
800101da:	58 0c       	cp.w	r12,0
800101dc:	c0 30       	breq	800101e2 <_free_r+0x6e>
800101de:	30 0c       	mov	r12,0
800101e0:	c1 08       	rjmp	80010200 <_free_r+0x8c>
800101e2:	6c 0e       	ld.w	lr,r6[0x0]
800101e4:	f4 c5 ff f8 	sub	r5,r10,-8
800101e8:	1c 16       	sub	r6,lr
800101ea:	1c 08       	add	r8,lr
800101ec:	6c 2e       	ld.w	lr,r6[0x8]
800101ee:	0a 3e       	cp.w	lr,r5
800101f0:	f9 bc 00 01 	moveq	r12,1
800101f4:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800101f8:	eb fe 1a 02 	st.wne	r5[0x8],lr
800101fc:	fd f5 1a 03 	st.wne	lr[0xc],r5
80010200:	f2 0b 00 0e 	add	lr,r9,r11
80010204:	7c 1e       	ld.w	lr,lr[0x4]
80010206:	ed be 00 00 	bld	lr,0x0
8001020a:	c1 30       	breq	80010230 <_free_r+0xbc>
8001020c:	16 08       	add	r8,r11
8001020e:	58 0c       	cp.w	r12,0
80010210:	c0 c1       	brne	80010228 <_free_r+0xb4>
80010212:	4a 9e       	lddpc	lr,800102b4 <_free_r+0x140>
80010214:	72 2b       	ld.w	r11,r9[0x8]
80010216:	2f 8e       	sub	lr,-8
80010218:	1c 3b       	cp.w	r11,lr
8001021a:	c0 71       	brne	80010228 <_free_r+0xb4>
8001021c:	97 36       	st.w	r11[0xc],r6
8001021e:	97 26       	st.w	r11[0x8],r6
80010220:	8d 2b       	st.w	r6[0x8],r11
80010222:	8d 3b       	st.w	r6[0xc],r11
80010224:	30 1c       	mov	r12,1
80010226:	c0 58       	rjmp	80010230 <_free_r+0xbc>
80010228:	72 2b       	ld.w	r11,r9[0x8]
8001022a:	72 39       	ld.w	r9,r9[0xc]
8001022c:	93 2b       	st.w	r9[0x8],r11
8001022e:	97 39       	st.w	r11[0xc],r9
80010230:	10 99       	mov	r9,r8
80010232:	ec 08 09 08 	st.w	r6[r8],r8
80010236:	a1 a9       	sbr	r9,0x0
80010238:	8d 19       	st.w	r6[0x4],r9
8001023a:	58 0c       	cp.w	r12,0
8001023c:	c6 51       	brne	80010306 <_free_r+0x192>
8001023e:	e0 48 01 ff 	cp.w	r8,511
80010242:	e0 8b 00 13 	brhi	80010268 <_free_r+0xf4>
80010246:	a3 98       	lsr	r8,0x3
80010248:	f4 08 00 39 	add	r9,r10,r8<<0x3
8001024c:	72 2b       	ld.w	r11,r9[0x8]
8001024e:	8d 39       	st.w	r6[0xc],r9
80010250:	8d 2b       	st.w	r6[0x8],r11
80010252:	97 36       	st.w	r11[0xc],r6
80010254:	93 26       	st.w	r9[0x8],r6
80010256:	a3 48       	asr	r8,0x2
80010258:	74 19       	ld.w	r9,r10[0x4]
8001025a:	30 1b       	mov	r11,1
8001025c:	f6 08 09 48 	lsl	r8,r11,r8
80010260:	f3 e8 10 08 	or	r8,r9,r8
80010264:	95 18       	st.w	r10[0x4],r8
80010266:	c5 08       	rjmp	80010306 <_free_r+0x192>
80010268:	f0 0b 16 09 	lsr	r11,r8,0x9
8001026c:	58 4b       	cp.w	r11,4
8001026e:	e0 8b 00 06 	brhi	8001027a <_free_r+0x106>
80010272:	f0 0b 16 06 	lsr	r11,r8,0x6
80010276:	2c 8b       	sub	r11,-56
80010278:	c2 b8       	rjmp	800102ce <_free_r+0x15a>
8001027a:	59 4b       	cp.w	r11,20
8001027c:	e0 8b 00 04 	brhi	80010284 <_free_r+0x110>
80010280:	2a 5b       	sub	r11,-91
80010282:	c2 68       	rjmp	800102ce <_free_r+0x15a>
80010284:	e0 4b 00 54 	cp.w	r11,84
80010288:	e0 8b 00 06 	brhi	80010294 <_free_r+0x120>
8001028c:	f0 0b 16 0c 	lsr	r11,r8,0xc
80010290:	29 2b       	sub	r11,-110
80010292:	c1 e8       	rjmp	800102ce <_free_r+0x15a>
80010294:	e0 4b 01 54 	cp.w	r11,340
80010298:	e0 8b 00 06 	brhi	800102a4 <_free_r+0x130>
8001029c:	f0 0b 16 0f 	lsr	r11,r8,0xf
800102a0:	28 9b       	sub	r11,-119
800102a2:	c1 68       	rjmp	800102ce <_free_r+0x15a>
800102a4:	e0 4b 05 54 	cp.w	r11,1364
800102a8:	e0 88 00 10 	brls	800102c8 <_free_r+0x154>
800102ac:	37 eb       	mov	r11,126
800102ae:	c1 08       	rjmp	800102ce <_free_r+0x15a>
800102b0:	80 01       	ld.sh	r1,r0[0x0]
800102b2:	0b bc       	ld.ub	r12,r5[0x3]
800102b4:	00 00       	add	r0,r0
800102b6:	01 ac       	ld.ub	r12,r0[0x2]
800102b8:	00 00       	add	r0,r0
800102ba:	05 b4       	ld.ub	r4,r2[0x3]
800102bc:	00 00       	add	r0,r0
800102be:	07 e0       	ld.ub	r0,r3[0x6]
800102c0:	80 01       	ld.sh	r1,r0[0x0]
800102c2:	00 cc       	st.b	r0++,r12
800102c4:	80 01       	ld.sh	r1,r0[0x0]
800102c6:	0b be       	ld.ub	lr,r5[0x3]
800102c8:	f0 0b 16 12 	lsr	r11,r8,0x12
800102cc:	28 4b       	sub	r11,-124
800102ce:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800102d2:	78 29       	ld.w	r9,r12[0x8]
800102d4:	18 39       	cp.w	r9,r12
800102d6:	c0 e1       	brne	800102f2 <_free_r+0x17e>
800102d8:	74 18       	ld.w	r8,r10[0x4]
800102da:	a3 4b       	asr	r11,0x2
800102dc:	30 1c       	mov	r12,1
800102de:	f8 0b 09 4b 	lsl	r11,r12,r11
800102e2:	f1 eb 10 0b 	or	r11,r8,r11
800102e6:	12 98       	mov	r8,r9
800102e8:	95 1b       	st.w	r10[0x4],r11
800102ea:	c0 a8       	rjmp	800102fe <_free_r+0x18a>
800102ec:	72 29       	ld.w	r9,r9[0x8]
800102ee:	18 39       	cp.w	r9,r12
800102f0:	c0 60       	breq	800102fc <_free_r+0x188>
800102f2:	72 1a       	ld.w	r10,r9[0x4]
800102f4:	e0 1a ff fc 	andl	r10,0xfffc
800102f8:	14 38       	cp.w	r8,r10
800102fa:	cf 93       	brcs	800102ec <_free_r+0x178>
800102fc:	72 38       	ld.w	r8,r9[0xc]
800102fe:	8d 38       	st.w	r6[0xc],r8
80010300:	8d 29       	st.w	r6[0x8],r9
80010302:	93 36       	st.w	r9[0xc],r6
80010304:	91 26       	st.w	r8[0x8],r6
80010306:	0e 9c       	mov	r12,r7
80010308:	f0 1f 00 02 	mcall	80010310 <_free_r+0x19c>
8001030c:	d8 22       	popm	r4-r7,pc
8001030e:	00 00       	add	r0,r0
80010310:	80 01       	ld.sh	r1,r0[0x0]
80010312:	0b be       	ld.ub	lr,r5[0x3]

80010314 <__sfvwrite_r>:
80010314:	d4 31       	pushm	r0-r7,lr
80010316:	20 3d       	sub	sp,12
80010318:	14 94       	mov	r4,r10
8001031a:	18 95       	mov	r5,r12
8001031c:	16 97       	mov	r7,r11
8001031e:	74 28       	ld.w	r8,r10[0x8]
80010320:	58 08       	cp.w	r8,0
80010322:	e0 80 01 47 	breq	800105b0 <__sfvwrite_r+0x29c>
80010326:	96 68       	ld.sh	r8,r11[0xc]
80010328:	ed b8 00 03 	bld	r8,0x3
8001032c:	c0 41       	brne	80010334 <__sfvwrite_r+0x20>
8001032e:	76 48       	ld.w	r8,r11[0x10]
80010330:	58 08       	cp.w	r8,0
80010332:	c0 c1       	brne	8001034a <__sfvwrite_r+0x36>
80010334:	0e 9b       	mov	r11,r7
80010336:	0a 9c       	mov	r12,r5
80010338:	f0 1f 00 a0 	mcall	800105b8 <__sfvwrite_r+0x2a4>
8001033c:	c0 70       	breq	8001034a <__sfvwrite_r+0x36>
8001033e:	8e 68       	ld.sh	r8,r7[0xc]
80010340:	a7 a8       	sbr	r8,0x6
80010342:	ae 68       	st.h	r7[0xc],r8
80010344:	30 98       	mov	r8,9
80010346:	8b 38       	st.w	r5[0xc],r8
80010348:	c3 29       	rjmp	800105ac <__sfvwrite_r+0x298>
8001034a:	8e 63       	ld.sh	r3,r7[0xc]
8001034c:	68 00       	ld.w	r0,r4[0x0]
8001034e:	06 96       	mov	r6,r3
80010350:	e2 16 00 02 	andl	r6,0x2,COH
80010354:	c2 10       	breq	80010396 <__sfvwrite_r+0x82>
80010356:	30 03       	mov	r3,0
80010358:	e0 62 04 00 	mov	r2,1024
8001035c:	06 96       	mov	r6,r3
8001035e:	c0 48       	rjmp	80010366 <__sfvwrite_r+0x52>
80010360:	60 03       	ld.w	r3,r0[0x0]
80010362:	60 16       	ld.w	r6,r0[0x4]
80010364:	2f 80       	sub	r0,-8
80010366:	58 06       	cp.w	r6,0
80010368:	cf c0       	breq	80010360 <__sfvwrite_r+0x4c>
8001036a:	e0 46 04 00 	cp.w	r6,1024
8001036e:	ec 09 17 80 	movls	r9,r6
80010372:	e4 09 17 b0 	movhi	r9,r2
80010376:	06 9a       	mov	r10,r3
80010378:	6e a8       	ld.w	r8,r7[0x28]
8001037a:	6e 8b       	ld.w	r11,r7[0x20]
8001037c:	0a 9c       	mov	r12,r5
8001037e:	5d 18       	icall	r8
80010380:	18 16       	sub	r6,r12
80010382:	58 0c       	cp.w	r12,0
80010384:	e0 8a 01 11 	brle	800105a6 <__sfvwrite_r+0x292>
80010388:	68 28       	ld.w	r8,r4[0x8]
8001038a:	18 18       	sub	r8,r12
8001038c:	89 28       	st.w	r4[0x8],r8
8001038e:	e0 80 01 11 	breq	800105b0 <__sfvwrite_r+0x29c>
80010392:	18 03       	add	r3,r12
80010394:	ce 9b       	rjmp	80010366 <__sfvwrite_r+0x52>
80010396:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8001039a:	c0 70       	breq	800103a8 <__sfvwrite_r+0x94>
8001039c:	50 06       	stdsp	sp[0x0],r6
8001039e:	0c 93       	mov	r3,r6
800103a0:	0c 91       	mov	r1,r6
800103a2:	50 15       	stdsp	sp[0x4],r5
800103a4:	08 92       	mov	r2,r4
800103a6:	ca 08       	rjmp	800104e6 <__sfvwrite_r+0x1d2>
800103a8:	06 96       	mov	r6,r3
800103aa:	08 91       	mov	r1,r4
800103ac:	c0 48       	rjmp	800103b4 <__sfvwrite_r+0xa0>
800103ae:	60 03       	ld.w	r3,r0[0x0]
800103b0:	60 16       	ld.w	r6,r0[0x4]
800103b2:	2f 80       	sub	r0,-8
800103b4:	58 06       	cp.w	r6,0
800103b6:	cf c0       	breq	800103ae <__sfvwrite_r+0x9a>
800103b8:	8e 68       	ld.sh	r8,r7[0xc]
800103ba:	6e 24       	ld.w	r4,r7[0x8]
800103bc:	10 99       	mov	r9,r8
800103be:	e2 19 02 00 	andl	r9,0x200,COH
800103c2:	c5 70       	breq	80010470 <__sfvwrite_r+0x15c>
800103c4:	08 36       	cp.w	r6,r4
800103c6:	c4 53       	brcs	80010450 <__sfvwrite_r+0x13c>
800103c8:	10 99       	mov	r9,r8
800103ca:	e2 19 04 80 	andl	r9,0x480,COH
800103ce:	c4 10       	breq	80010450 <__sfvwrite_r+0x13c>
800103d0:	6e 4b       	ld.w	r11,r7[0x10]
800103d2:	6e 09       	ld.w	r9,r7[0x0]
800103d4:	16 19       	sub	r9,r11
800103d6:	50 09       	stdsp	sp[0x0],r9
800103d8:	6e 59       	ld.w	r9,r7[0x14]
800103da:	10 9c       	mov	r12,r8
800103dc:	f2 09 00 1a 	add	r10,r9,r9<<0x1
800103e0:	30 28       	mov	r8,2
800103e2:	f4 08 0c 08 	divs	r8,r10,r8
800103e6:	fa e9 00 04 	st.d	sp[4],r8
800103ea:	10 94       	mov	r4,r8
800103ec:	40 09       	lddsp	r9,sp[0x0]
800103ee:	e2 1c 04 00 	andl	r12,0x400,COH
800103f2:	2f f9       	sub	r9,-1
800103f4:	0c 09       	add	r9,r6
800103f6:	12 38       	cp.w	r8,r9
800103f8:	f2 04 17 30 	movlo	r4,r9
800103fc:	58 0c       	cp.w	r12,0
800103fe:	c1 10       	breq	80010420 <__sfvwrite_r+0x10c>
80010400:	08 9b       	mov	r11,r4
80010402:	0a 9c       	mov	r12,r5
80010404:	f0 1f 00 6e 	mcall	800105bc <__sfvwrite_r+0x2a8>
80010408:	18 92       	mov	r2,r12
8001040a:	c1 50       	breq	80010434 <__sfvwrite_r+0x120>
8001040c:	40 0a       	lddsp	r10,sp[0x0]
8001040e:	6e 4b       	ld.w	r11,r7[0x10]
80010410:	f0 1f 00 6c 	mcall	800105c0 <__sfvwrite_r+0x2ac>
80010414:	8e 68       	ld.sh	r8,r7[0xc]
80010416:	e0 18 fb 7f 	andl	r8,0xfb7f
8001041a:	a7 b8       	sbr	r8,0x7
8001041c:	ae 68       	st.h	r7[0xc],r8
8001041e:	c0 e8       	rjmp	8001043a <__sfvwrite_r+0x126>
80010420:	08 9a       	mov	r10,r4
80010422:	0a 9c       	mov	r12,r5
80010424:	f0 1f 00 68 	mcall	800105c4 <__sfvwrite_r+0x2b0>
80010428:	18 92       	mov	r2,r12
8001042a:	c0 81       	brne	8001043a <__sfvwrite_r+0x126>
8001042c:	6e 4b       	ld.w	r11,r7[0x10]
8001042e:	0a 9c       	mov	r12,r5
80010430:	f0 1f 00 66 	mcall	800105c8 <__sfvwrite_r+0x2b4>
80010434:	30 c8       	mov	r8,12
80010436:	8b 38       	st.w	r5[0xc],r8
80010438:	cb 78       	rjmp	800105a6 <__sfvwrite_r+0x292>
8001043a:	40 0a       	lddsp	r10,sp[0x0]
8001043c:	40 09       	lddsp	r9,sp[0x0]
8001043e:	e8 0a 01 0a 	sub	r10,r4,r10
80010442:	e4 09 00 08 	add	r8,r2,r9
80010446:	8f 54       	st.w	r7[0x14],r4
80010448:	8f 2a       	st.w	r7[0x8],r10
8001044a:	8f 08       	st.w	r7[0x0],r8
8001044c:	8f 42       	st.w	r7[0x10],r2
8001044e:	0c 94       	mov	r4,r6
80010450:	08 36       	cp.w	r6,r4
80010452:	ec 04 17 30 	movlo	r4,r6
80010456:	06 9b       	mov	r11,r3
80010458:	08 9a       	mov	r10,r4
8001045a:	6e 0c       	ld.w	r12,r7[0x0]
8001045c:	f0 1f 00 5c 	mcall	800105cc <__sfvwrite_r+0x2b8>
80010460:	6e 08       	ld.w	r8,r7[0x0]
80010462:	08 08       	add	r8,r4
80010464:	8f 08       	st.w	r7[0x0],r8
80010466:	6e 28       	ld.w	r8,r7[0x8]
80010468:	08 18       	sub	r8,r4
8001046a:	0c 94       	mov	r4,r6
8001046c:	8f 28       	st.w	r7[0x8],r8
8001046e:	c3 08       	rjmp	800104ce <__sfvwrite_r+0x1ba>
80010470:	08 36       	cp.w	r6,r4
80010472:	5f ba       	srhi	r10
80010474:	6e 0c       	ld.w	r12,r7[0x0]
80010476:	6e 48       	ld.w	r8,r7[0x10]
80010478:	10 3c       	cp.w	r12,r8
8001047a:	5f b8       	srhi	r8
8001047c:	f5 e8 00 08 	and	r8,r10,r8
80010480:	f2 08 18 00 	cp.b	r8,r9
80010484:	c0 e0       	breq	800104a0 <__sfvwrite_r+0x18c>
80010486:	06 9b       	mov	r11,r3
80010488:	08 9a       	mov	r10,r4
8001048a:	f0 1f 00 51 	mcall	800105cc <__sfvwrite_r+0x2b8>
8001048e:	6e 08       	ld.w	r8,r7[0x0]
80010490:	08 08       	add	r8,r4
80010492:	0e 9b       	mov	r11,r7
80010494:	8f 08       	st.w	r7[0x0],r8
80010496:	0a 9c       	mov	r12,r5
80010498:	f0 1f 00 4e 	mcall	800105d0 <__sfvwrite_r+0x2bc>
8001049c:	c1 90       	breq	800104ce <__sfvwrite_r+0x1ba>
8001049e:	c8 48       	rjmp	800105a6 <__sfvwrite_r+0x292>
800104a0:	6e 59       	ld.w	r9,r7[0x14]
800104a2:	12 36       	cp.w	r6,r9
800104a4:	c0 a3       	brcs	800104b8 <__sfvwrite_r+0x1a4>
800104a6:	6e a8       	ld.w	r8,r7[0x28]
800104a8:	06 9a       	mov	r10,r3
800104aa:	6e 8b       	ld.w	r11,r7[0x20]
800104ac:	0a 9c       	mov	r12,r5
800104ae:	5d 18       	icall	r8
800104b0:	18 94       	mov	r4,r12
800104b2:	e0 89 00 0e 	brgt	800104ce <__sfvwrite_r+0x1ba>
800104b6:	c7 88       	rjmp	800105a6 <__sfvwrite_r+0x292>
800104b8:	0c 9a       	mov	r10,r6
800104ba:	06 9b       	mov	r11,r3
800104bc:	f0 1f 00 44 	mcall	800105cc <__sfvwrite_r+0x2b8>
800104c0:	6e 08       	ld.w	r8,r7[0x0]
800104c2:	0c 08       	add	r8,r6
800104c4:	0c 94       	mov	r4,r6
800104c6:	8f 08       	st.w	r7[0x0],r8
800104c8:	6e 28       	ld.w	r8,r7[0x8]
800104ca:	0c 18       	sub	r8,r6
800104cc:	8f 28       	st.w	r7[0x8],r8
800104ce:	62 28       	ld.w	r8,r1[0x8]
800104d0:	08 18       	sub	r8,r4
800104d2:	83 28       	st.w	r1[0x8],r8
800104d4:	c6 e0       	breq	800105b0 <__sfvwrite_r+0x29c>
800104d6:	08 16       	sub	r6,r4
800104d8:	08 03       	add	r3,r4
800104da:	c6 db       	rjmp	800103b4 <__sfvwrite_r+0xa0>
800104dc:	60 03       	ld.w	r3,r0[0x0]
800104de:	60 11       	ld.w	r1,r0[0x4]
800104e0:	30 08       	mov	r8,0
800104e2:	2f 80       	sub	r0,-8
800104e4:	50 08       	stdsp	sp[0x0],r8
800104e6:	58 01       	cp.w	r1,0
800104e8:	cf a0       	breq	800104dc <__sfvwrite_r+0x1c8>
800104ea:	40 0a       	lddsp	r10,sp[0x0]
800104ec:	58 0a       	cp.w	r10,0
800104ee:	c1 51       	brne	80010518 <__sfvwrite_r+0x204>
800104f0:	e2 c6 ff ff 	sub	r6,r1,-1
800104f4:	02 9a       	mov	r10,r1
800104f6:	30 ab       	mov	r11,10
800104f8:	06 9c       	mov	r12,r3
800104fa:	f0 1f 00 37 	mcall	800105d4 <__sfvwrite_r+0x2c0>
800104fe:	f8 c8 ff ff 	sub	r8,r12,-1
80010502:	58 0c       	cp.w	r12,0
80010504:	f1 d3 e1 16 	subne	r6,r8,r3
80010508:	f9 b9 01 01 	movne	r9,1
8001050c:	fb f9 1a 00 	st.wne	sp[0x0],r9
80010510:	f9 b8 00 01 	moveq	r8,1
80010514:	fb f8 0a 00 	st.weq	sp[0x0],r8
80010518:	02 36       	cp.w	r6,r1
8001051a:	ec 04 17 80 	movls	r4,r6
8001051e:	e2 04 17 b0 	movhi	r4,r1
80010522:	6e 59       	ld.w	r9,r7[0x14]
80010524:	6e 25       	ld.w	r5,r7[0x8]
80010526:	f2 05 00 05 	add	r5,r9,r5
8001052a:	0a 34       	cp.w	r4,r5
8001052c:	5f 9a       	srgt	r10
8001052e:	6e 0c       	ld.w	r12,r7[0x0]
80010530:	6e 48       	ld.w	r8,r7[0x10]
80010532:	10 3c       	cp.w	r12,r8
80010534:	5f b8       	srhi	r8
80010536:	f5 e8 00 08 	and	r8,r10,r8
8001053a:	30 0a       	mov	r10,0
8001053c:	f4 08 18 00 	cp.b	r8,r10
80010540:	c0 e0       	breq	8001055c <__sfvwrite_r+0x248>
80010542:	06 9b       	mov	r11,r3
80010544:	0a 9a       	mov	r10,r5
80010546:	f0 1f 00 22 	mcall	800105cc <__sfvwrite_r+0x2b8>
8001054a:	6e 08       	ld.w	r8,r7[0x0]
8001054c:	0a 08       	add	r8,r5
8001054e:	0e 9b       	mov	r11,r7
80010550:	8f 08       	st.w	r7[0x0],r8
80010552:	40 1c       	lddsp	r12,sp[0x4]
80010554:	f0 1f 00 1f 	mcall	800105d0 <__sfvwrite_r+0x2bc>
80010558:	c1 80       	breq	80010588 <__sfvwrite_r+0x274>
8001055a:	c2 68       	rjmp	800105a6 <__sfvwrite_r+0x292>
8001055c:	12 34       	cp.w	r4,r9
8001055e:	c0 a5       	brlt	80010572 <__sfvwrite_r+0x25e>
80010560:	6e a8       	ld.w	r8,r7[0x28]
80010562:	06 9a       	mov	r10,r3
80010564:	6e 8b       	ld.w	r11,r7[0x20]
80010566:	40 1c       	lddsp	r12,sp[0x4]
80010568:	5d 18       	icall	r8
8001056a:	18 95       	mov	r5,r12
8001056c:	e0 89 00 0e 	brgt	80010588 <__sfvwrite_r+0x274>
80010570:	c1 b8       	rjmp	800105a6 <__sfvwrite_r+0x292>
80010572:	08 9a       	mov	r10,r4
80010574:	06 9b       	mov	r11,r3
80010576:	f0 1f 00 16 	mcall	800105cc <__sfvwrite_r+0x2b8>
8001057a:	6e 08       	ld.w	r8,r7[0x0]
8001057c:	08 08       	add	r8,r4
8001057e:	08 95       	mov	r5,r4
80010580:	8f 08       	st.w	r7[0x0],r8
80010582:	6e 28       	ld.w	r8,r7[0x8]
80010584:	08 18       	sub	r8,r4
80010586:	8f 28       	st.w	r7[0x8],r8
80010588:	0a 16       	sub	r6,r5
8001058a:	c0 71       	brne	80010598 <__sfvwrite_r+0x284>
8001058c:	0e 9b       	mov	r11,r7
8001058e:	40 1c       	lddsp	r12,sp[0x4]
80010590:	f0 1f 00 10 	mcall	800105d0 <__sfvwrite_r+0x2bc>
80010594:	c0 91       	brne	800105a6 <__sfvwrite_r+0x292>
80010596:	50 06       	stdsp	sp[0x0],r6
80010598:	64 28       	ld.w	r8,r2[0x8]
8001059a:	0a 18       	sub	r8,r5
8001059c:	85 28       	st.w	r2[0x8],r8
8001059e:	c0 90       	breq	800105b0 <__sfvwrite_r+0x29c>
800105a0:	0a 11       	sub	r1,r5
800105a2:	0a 03       	add	r3,r5
800105a4:	ca 1b       	rjmp	800104e6 <__sfvwrite_r+0x1d2>
800105a6:	8e 68       	ld.sh	r8,r7[0xc]
800105a8:	a7 a8       	sbr	r8,0x6
800105aa:	ae 68       	st.h	r7[0xc],r8
800105ac:	3f fc       	mov	r12,-1
800105ae:	c0 28       	rjmp	800105b2 <__sfvwrite_r+0x29e>
800105b0:	30 0c       	mov	r12,0
800105b2:	2f dd       	sub	sp,-12
800105b4:	d8 32       	popm	r0-r7,pc
800105b6:	00 00       	add	r0,r0
800105b8:	80 00       	ld.sh	r0,r0[0x0]
800105ba:	ef a4       	*unknown*
800105bc:	80 01       	ld.sh	r1,r0[0x0]
800105be:	07 18       	ld.sh	r8,r3++
800105c0:	80 00       	ld.sh	r0,r0[0x0]
800105c2:	ca f6       	brmi	80010520 <__sfvwrite_r+0x20c>
800105c4:	80 01       	ld.sh	r1,r0[0x0]
800105c6:	12 04       	add	r4,r9
800105c8:	80 01       	ld.sh	r1,r0[0x0]
800105ca:	01 74       	ld.ub	r4,--r0
800105cc:	80 01       	ld.sh	r1,r0[0x0]
800105ce:	0b 7e       	ld.ub	lr,--r5
800105d0:	80 00       	ld.sh	r0,r0[0x0]
800105d2:	fe 40 80 01 	cp.w	r0,-98303
800105d6:	0b 68       	ld.uh	r8,--r5

800105d8 <_fwalk>:
800105d8:	d4 31       	pushm	r0-r7,lr
800105da:	30 05       	mov	r5,0
800105dc:	16 91       	mov	r1,r11
800105de:	f8 c7 ff 28 	sub	r7,r12,-216
800105e2:	0a 92       	mov	r2,r5
800105e4:	f0 1f 00 10 	mcall	80010624 <_fwalk+0x4c>
800105e8:	3f f3       	mov	r3,-1
800105ea:	c1 68       	rjmp	80010616 <_fwalk+0x3e>
800105ec:	6e 26       	ld.w	r6,r7[0x8]
800105ee:	6e 14       	ld.w	r4,r7[0x4]
800105f0:	2f 46       	sub	r6,-12
800105f2:	c0 c8       	rjmp	8001060a <_fwalk+0x32>
800105f4:	8c 08       	ld.sh	r8,r6[0x0]
800105f6:	e4 08 19 00 	cp.h	r8,r2
800105fa:	c0 70       	breq	80010608 <_fwalk+0x30>
800105fc:	8c 18       	ld.sh	r8,r6[0x2]
800105fe:	e6 08 19 00 	cp.h	r8,r3
80010602:	c0 30       	breq	80010608 <_fwalk+0x30>
80010604:	5d 11       	icall	r1
80010606:	18 45       	or	r5,r12
80010608:	2a 46       	sub	r6,-92
8001060a:	20 14       	sub	r4,1
8001060c:	ec cc 00 0c 	sub	r12,r6,12
80010610:	58 04       	cp.w	r4,0
80010612:	cf 14       	brge	800105f4 <_fwalk+0x1c>
80010614:	6e 07       	ld.w	r7,r7[0x0]
80010616:	58 07       	cp.w	r7,0
80010618:	ce a1       	brne	800105ec <_fwalk+0x14>
8001061a:	f0 1f 00 04 	mcall	80010628 <_fwalk+0x50>
8001061e:	0a 9c       	mov	r12,r5
80010620:	d8 32       	popm	r0-r7,pc
80010622:	00 00       	add	r0,r0
80010624:	80 00       	ld.sh	r0,r0[0x0]
80010626:	ff 58 80 00 	st.h	pc[-32768],r8
8001062a:	ff 5a 48 1c 	st.h	pc[18460],r10

8001062c <_localeconv_r>:
8001062c:	48 1c       	lddpc	r12,80010630 <_localeconv_r+0x4>
8001062e:	5e fc       	retal	r12
80010630:	80 01       	ld.sh	r1,r0[0x0]
80010632:	29 a4       	sub	r4,-102

80010634 <__smakebuf_r>:
80010634:	d4 21       	pushm	r4-r7,lr
80010636:	20 fd       	sub	sp,60
80010638:	96 68       	ld.sh	r8,r11[0xc]
8001063a:	16 97       	mov	r7,r11
8001063c:	18 96       	mov	r6,r12
8001063e:	e2 18 00 02 	andl	r8,0x2,COH
80010642:	c3 c1       	brne	800106ba <__smakebuf_r+0x86>
80010644:	96 7b       	ld.sh	r11,r11[0xe]
80010646:	f0 0b 19 00 	cp.h	r11,r8
8001064a:	c0 55       	brlt	80010654 <__smakebuf_r+0x20>
8001064c:	1a 9a       	mov	r10,sp
8001064e:	f0 1f 00 28 	mcall	800106ec <__smakebuf_r+0xb8>
80010652:	c0 f4       	brge	80010670 <__smakebuf_r+0x3c>
80010654:	8e 65       	ld.sh	r5,r7[0xc]
80010656:	0a 98       	mov	r8,r5
80010658:	ab b8       	sbr	r8,0xb
8001065a:	e2 15 00 80 	andl	r5,0x80,COH
8001065e:	ae 68       	st.h	r7[0xc],r8
80010660:	30 04       	mov	r4,0
80010662:	e0 68 04 00 	mov	r8,1024
80010666:	f9 b5 01 40 	movne	r5,64
8001066a:	f0 05 17 00 	moveq	r5,r8
8001066e:	c1 b8       	rjmp	800106a4 <__smakebuf_r+0x70>
80010670:	40 18       	lddsp	r8,sp[0x4]
80010672:	e2 18 f0 00 	andl	r8,0xf000,COH
80010676:	e0 48 20 00 	cp.w	r8,8192
8001067a:	5f 04       	sreq	r4
8001067c:	e0 48 80 00 	cp.w	r8,32768
80010680:	c0 d1       	brne	8001069a <__smakebuf_r+0x66>
80010682:	6e b9       	ld.w	r9,r7[0x2c]
80010684:	49 b8       	lddpc	r8,800106f0 <__smakebuf_r+0xbc>
80010686:	10 39       	cp.w	r9,r8
80010688:	c0 91       	brne	8001069a <__smakebuf_r+0x66>
8001068a:	8e 68       	ld.sh	r8,r7[0xc]
8001068c:	e0 65 04 00 	mov	r5,1024
80010690:	ab a8       	sbr	r8,0xa
80010692:	ef 45 00 50 	st.w	r7[80],r5
80010696:	ae 68       	st.h	r7[0xc],r8
80010698:	c0 68       	rjmp	800106a4 <__smakebuf_r+0x70>
8001069a:	8e 68       	ld.sh	r8,r7[0xc]
8001069c:	e0 65 04 00 	mov	r5,1024
800106a0:	ab b8       	sbr	r8,0xb
800106a2:	ae 68       	st.h	r7[0xc],r8
800106a4:	0a 9b       	mov	r11,r5
800106a6:	0c 9c       	mov	r12,r6
800106a8:	f0 1f 00 13 	mcall	800106f4 <__smakebuf_r+0xc0>
800106ac:	8e 68       	ld.sh	r8,r7[0xc]
800106ae:	c0 d1       	brne	800106c8 <__smakebuf_r+0x94>
800106b0:	ed b8 00 09 	bld	r8,0x9
800106b4:	c1 a0       	breq	800106e8 <__smakebuf_r+0xb4>
800106b6:	a1 b8       	sbr	r8,0x1
800106b8:	ae 68       	st.h	r7[0xc],r8
800106ba:	ee c8 ff b9 	sub	r8,r7,-71
800106be:	8f 48       	st.w	r7[0x10],r8
800106c0:	8f 08       	st.w	r7[0x0],r8
800106c2:	30 18       	mov	r8,1
800106c4:	8f 58       	st.w	r7[0x14],r8
800106c6:	c1 18       	rjmp	800106e8 <__smakebuf_r+0xb4>
800106c8:	a7 b8       	sbr	r8,0x7
800106ca:	8f 4c       	st.w	r7[0x10],r12
800106cc:	ae 68       	st.h	r7[0xc],r8
800106ce:	8f 55       	st.w	r7[0x14],r5
800106d0:	48 a8       	lddpc	r8,800106f8 <__smakebuf_r+0xc4>
800106d2:	8f 0c       	st.w	r7[0x0],r12
800106d4:	8d a8       	st.w	r6[0x28],r8
800106d6:	58 04       	cp.w	r4,0
800106d8:	c0 80       	breq	800106e8 <__smakebuf_r+0xb4>
800106da:	8e 7c       	ld.sh	r12,r7[0xe]
800106dc:	f0 1f 00 08 	mcall	800106fc <__smakebuf_r+0xc8>
800106e0:	c0 40       	breq	800106e8 <__smakebuf_r+0xb4>
800106e2:	8e 68       	ld.sh	r8,r7[0xc]
800106e4:	a1 a8       	sbr	r8,0x0
800106e6:	ae 68       	st.h	r7[0xc],r8
800106e8:	2f 1d       	sub	sp,-60
800106ea:	d8 22       	popm	r4-r7,pc
800106ec:	80 01       	ld.sh	r1,r0[0x0]
800106ee:	18 b0       	st.h	r12++,r0
800106f0:	80 01       	ld.sh	r1,r0[0x0]
800106f2:	15 64       	ld.uh	r4,--r10
800106f4:	80 01       	ld.sh	r1,r0[0x0]
800106f6:	07 18       	ld.sh	r8,r3++
800106f8:	80 00       	ld.sh	r0,r0[0x0]
800106fa:	ff 5c 80 01 	st.h	pc[-32767],r12
800106fe:	16 48       	or	r8,r11

80010700 <malloc>:
80010700:	d4 01       	pushm	lr
80010702:	48 48       	lddpc	r8,80010710 <malloc+0x10>
80010704:	18 9b       	mov	r11,r12
80010706:	70 0c       	ld.w	r12,r8[0x0]
80010708:	f0 1f 00 03 	mcall	80010714 <malloc+0x14>
8001070c:	d8 02       	popm	pc
8001070e:	00 00       	add	r0,r0
80010710:	00 00       	add	r0,r0
80010712:	01 a8       	ld.ub	r8,r0[0x2]
80010714:	80 01       	ld.sh	r1,r0[0x0]
80010716:	07 18       	ld.sh	r8,r3++

80010718 <_malloc_r>:
80010718:	d4 31       	pushm	r0-r7,lr
8001071a:	f6 c8 ff f5 	sub	r8,r11,-11
8001071e:	18 95       	mov	r5,r12
80010720:	10 97       	mov	r7,r8
80010722:	e0 17 ff f8 	andl	r7,0xfff8
80010726:	59 68       	cp.w	r8,22
80010728:	f9 b7 08 10 	movls	r7,16
8001072c:	16 37       	cp.w	r7,r11
8001072e:	5f 38       	srlo	r8
80010730:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80010734:	c0 50       	breq	8001073e <_malloc_r+0x26>
80010736:	30 c8       	mov	r8,12
80010738:	99 38       	st.w	r12[0xc],r8
8001073a:	e0 8f 01 f3 	bral	80010b20 <_malloc_r+0x408>
8001073e:	f0 1f 00 50 	mcall	8001087c <_malloc_r+0x164>
80010742:	e0 47 01 f7 	cp.w	r7,503
80010746:	e0 8b 00 1c 	brhi	8001077e <_malloc_r+0x66>
8001074a:	ee 03 16 03 	lsr	r3,r7,0x3
8001074e:	4c d8       	lddpc	r8,80010880 <_malloc_r+0x168>
80010750:	f0 03 00 38 	add	r8,r8,r3<<0x3
80010754:	70 36       	ld.w	r6,r8[0xc]
80010756:	10 36       	cp.w	r6,r8
80010758:	c0 61       	brne	80010764 <_malloc_r+0x4c>
8001075a:	ec c8 ff f8 	sub	r8,r6,-8
8001075e:	70 36       	ld.w	r6,r8[0xc]
80010760:	10 36       	cp.w	r6,r8
80010762:	c0 c0       	breq	8001077a <_malloc_r+0x62>
80010764:	6c 18       	ld.w	r8,r6[0x4]
80010766:	e0 18 ff fc 	andl	r8,0xfffc
8001076a:	6c 3a       	ld.w	r10,r6[0xc]
8001076c:	ec 08 00 09 	add	r9,r6,r8
80010770:	0a 9c       	mov	r12,r5
80010772:	6c 28       	ld.w	r8,r6[0x8]
80010774:	95 28       	st.w	r10[0x8],r8
80010776:	91 3a       	st.w	r8[0xc],r10
80010778:	c4 68       	rjmp	80010804 <_malloc_r+0xec>
8001077a:	2f e3       	sub	r3,-2
8001077c:	c4 c8       	rjmp	80010814 <_malloc_r+0xfc>
8001077e:	ee 03 16 09 	lsr	r3,r7,0x9
80010782:	c0 41       	brne	8001078a <_malloc_r+0x72>
80010784:	ee 03 16 03 	lsr	r3,r7,0x3
80010788:	c2 68       	rjmp	800107d4 <_malloc_r+0xbc>
8001078a:	58 43       	cp.w	r3,4
8001078c:	e0 8b 00 06 	brhi	80010798 <_malloc_r+0x80>
80010790:	ee 03 16 06 	lsr	r3,r7,0x6
80010794:	2c 83       	sub	r3,-56
80010796:	c1 f8       	rjmp	800107d4 <_malloc_r+0xbc>
80010798:	59 43       	cp.w	r3,20
8001079a:	e0 8b 00 04 	brhi	800107a2 <_malloc_r+0x8a>
8001079e:	2a 53       	sub	r3,-91
800107a0:	c1 a8       	rjmp	800107d4 <_malloc_r+0xbc>
800107a2:	e0 43 00 54 	cp.w	r3,84
800107a6:	e0 8b 00 06 	brhi	800107b2 <_malloc_r+0x9a>
800107aa:	ee 03 16 0c 	lsr	r3,r7,0xc
800107ae:	29 23       	sub	r3,-110
800107b0:	c1 28       	rjmp	800107d4 <_malloc_r+0xbc>
800107b2:	e0 43 01 54 	cp.w	r3,340
800107b6:	e0 8b 00 06 	brhi	800107c2 <_malloc_r+0xaa>
800107ba:	ee 03 16 0f 	lsr	r3,r7,0xf
800107be:	28 93       	sub	r3,-119
800107c0:	c0 a8       	rjmp	800107d4 <_malloc_r+0xbc>
800107c2:	e0 43 05 54 	cp.w	r3,1364
800107c6:	e0 88 00 04 	brls	800107ce <_malloc_r+0xb6>
800107ca:	37 e3       	mov	r3,126
800107cc:	c0 48       	rjmp	800107d4 <_malloc_r+0xbc>
800107ce:	ee 03 16 12 	lsr	r3,r7,0x12
800107d2:	28 43       	sub	r3,-124
800107d4:	4a ba       	lddpc	r10,80010880 <_malloc_r+0x168>
800107d6:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800107da:	74 36       	ld.w	r6,r10[0xc]
800107dc:	c1 98       	rjmp	8001080e <_malloc_r+0xf6>
800107de:	6c 19       	ld.w	r9,r6[0x4]
800107e0:	e0 19 ff fc 	andl	r9,0xfffc
800107e4:	f2 07 01 0b 	sub	r11,r9,r7
800107e8:	58 fb       	cp.w	r11,15
800107ea:	e0 8a 00 04 	brle	800107f2 <_malloc_r+0xda>
800107ee:	20 13       	sub	r3,1
800107f0:	c1 18       	rjmp	80010812 <_malloc_r+0xfa>
800107f2:	6c 38       	ld.w	r8,r6[0xc]
800107f4:	58 0b       	cp.w	r11,0
800107f6:	c0 b5       	brlt	8001080c <_malloc_r+0xf4>
800107f8:	6c 2a       	ld.w	r10,r6[0x8]
800107fa:	ec 09 00 09 	add	r9,r6,r9
800107fe:	0a 9c       	mov	r12,r5
80010800:	91 2a       	st.w	r8[0x8],r10
80010802:	95 38       	st.w	r10[0xc],r8
80010804:	72 18       	ld.w	r8,r9[0x4]
80010806:	a1 a8       	sbr	r8,0x0
80010808:	93 18       	st.w	r9[0x4],r8
8001080a:	cb c8       	rjmp	80010982 <_malloc_r+0x26a>
8001080c:	10 96       	mov	r6,r8
8001080e:	14 36       	cp.w	r6,r10
80010810:	ce 71       	brne	800107de <_malloc_r+0xc6>
80010812:	2f f3       	sub	r3,-1
80010814:	49 ba       	lddpc	r10,80010880 <_malloc_r+0x168>
80010816:	f4 cc ff f8 	sub	r12,r10,-8
8001081a:	78 26       	ld.w	r6,r12[0x8]
8001081c:	18 36       	cp.w	r6,r12
8001081e:	c6 e0       	breq	800108fa <_malloc_r+0x1e2>
80010820:	6c 19       	ld.w	r9,r6[0x4]
80010822:	e0 19 ff fc 	andl	r9,0xfffc
80010826:	f2 07 01 08 	sub	r8,r9,r7
8001082a:	58 f8       	cp.w	r8,15
8001082c:	e0 89 00 90 	brgt	8001094c <_malloc_r+0x234>
80010830:	99 3c       	st.w	r12[0xc],r12
80010832:	99 2c       	st.w	r12[0x8],r12
80010834:	58 08       	cp.w	r8,0
80010836:	c0 55       	brlt	80010840 <_malloc_r+0x128>
80010838:	ec 09 00 09 	add	r9,r6,r9
8001083c:	0a 9c       	mov	r12,r5
8001083e:	ce 3b       	rjmp	80010804 <_malloc_r+0xec>
80010840:	e0 49 01 ff 	cp.w	r9,511
80010844:	e0 8b 00 13 	brhi	8001086a <_malloc_r+0x152>
80010848:	a3 99       	lsr	r9,0x3
8001084a:	f4 09 00 38 	add	r8,r10,r9<<0x3
8001084e:	70 2b       	ld.w	r11,r8[0x8]
80010850:	8d 38       	st.w	r6[0xc],r8
80010852:	8d 2b       	st.w	r6[0x8],r11
80010854:	97 36       	st.w	r11[0xc],r6
80010856:	91 26       	st.w	r8[0x8],r6
80010858:	a3 49       	asr	r9,0x2
8001085a:	74 18       	ld.w	r8,r10[0x4]
8001085c:	30 1b       	mov	r11,1
8001085e:	f6 09 09 49 	lsl	r9,r11,r9
80010862:	f1 e9 10 09 	or	r9,r8,r9
80010866:	95 19       	st.w	r10[0x4],r9
80010868:	c4 98       	rjmp	800108fa <_malloc_r+0x1e2>
8001086a:	f2 0a 16 09 	lsr	r10,r9,0x9
8001086e:	58 4a       	cp.w	r10,4
80010870:	e0 8b 00 0a 	brhi	80010884 <_malloc_r+0x16c>
80010874:	f2 0a 16 06 	lsr	r10,r9,0x6
80010878:	2c 8a       	sub	r10,-56
8001087a:	c2 38       	rjmp	800108c0 <_malloc_r+0x1a8>
8001087c:	80 01       	ld.sh	r1,r0[0x0]
8001087e:	0b bc       	ld.ub	r12,r5[0x3]
80010880:	00 00       	add	r0,r0
80010882:	01 ac       	ld.ub	r12,r0[0x2]
80010884:	59 4a       	cp.w	r10,20
80010886:	e0 8b 00 04 	brhi	8001088e <_malloc_r+0x176>
8001088a:	2a 5a       	sub	r10,-91
8001088c:	c1 a8       	rjmp	800108c0 <_malloc_r+0x1a8>
8001088e:	e0 4a 00 54 	cp.w	r10,84
80010892:	e0 8b 00 06 	brhi	8001089e <_malloc_r+0x186>
80010896:	f2 0a 16 0c 	lsr	r10,r9,0xc
8001089a:	29 2a       	sub	r10,-110
8001089c:	c1 28       	rjmp	800108c0 <_malloc_r+0x1a8>
8001089e:	e0 4a 01 54 	cp.w	r10,340
800108a2:	e0 8b 00 06 	brhi	800108ae <_malloc_r+0x196>
800108a6:	f2 0a 16 0f 	lsr	r10,r9,0xf
800108aa:	28 9a       	sub	r10,-119
800108ac:	c0 a8       	rjmp	800108c0 <_malloc_r+0x1a8>
800108ae:	e0 4a 05 54 	cp.w	r10,1364
800108b2:	e0 88 00 04 	brls	800108ba <_malloc_r+0x1a2>
800108b6:	37 ea       	mov	r10,126
800108b8:	c0 48       	rjmp	800108c0 <_malloc_r+0x1a8>
800108ba:	f2 0a 16 12 	lsr	r10,r9,0x12
800108be:	28 4a       	sub	r10,-124
800108c0:	4c 8b       	lddpc	r11,800109e0 <_malloc_r+0x2c8>
800108c2:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800108c6:	68 28       	ld.w	r8,r4[0x8]
800108c8:	08 38       	cp.w	r8,r4
800108ca:	c0 e1       	brne	800108e6 <_malloc_r+0x1ce>
800108cc:	76 19       	ld.w	r9,r11[0x4]
800108ce:	a3 4a       	asr	r10,0x2
800108d0:	30 1e       	mov	lr,1
800108d2:	fc 0a 09 4a 	lsl	r10,lr,r10
800108d6:	f3 ea 10 0a 	or	r10,r9,r10
800108da:	10 99       	mov	r9,r8
800108dc:	97 1a       	st.w	r11[0x4],r10
800108de:	c0 a8       	rjmp	800108f2 <_malloc_r+0x1da>
800108e0:	70 28       	ld.w	r8,r8[0x8]
800108e2:	08 38       	cp.w	r8,r4
800108e4:	c0 60       	breq	800108f0 <_malloc_r+0x1d8>
800108e6:	70 1a       	ld.w	r10,r8[0x4]
800108e8:	e0 1a ff fc 	andl	r10,0xfffc
800108ec:	14 39       	cp.w	r9,r10
800108ee:	cf 93       	brcs	800108e0 <_malloc_r+0x1c8>
800108f0:	70 39       	ld.w	r9,r8[0xc]
800108f2:	8d 39       	st.w	r6[0xc],r9
800108f4:	8d 28       	st.w	r6[0x8],r8
800108f6:	91 36       	st.w	r8[0xc],r6
800108f8:	93 26       	st.w	r9[0x8],r6
800108fa:	e6 08 14 02 	asr	r8,r3,0x2
800108fe:	30 1b       	mov	r11,1
80010900:	4b 84       	lddpc	r4,800109e0 <_malloc_r+0x2c8>
80010902:	f6 08 09 4b 	lsl	r11,r11,r8
80010906:	68 18       	ld.w	r8,r4[0x4]
80010908:	10 3b       	cp.w	r11,r8
8001090a:	e0 8b 00 6f 	brhi	800109e8 <_malloc_r+0x2d0>
8001090e:	f7 e8 00 09 	and	r9,r11,r8
80010912:	c0 b1       	brne	80010928 <_malloc_r+0x210>
80010914:	e0 13 ff fc 	andl	r3,0xfffc
80010918:	a1 7b       	lsl	r11,0x1
8001091a:	2f c3       	sub	r3,-4
8001091c:	c0 38       	rjmp	80010922 <_malloc_r+0x20a>
8001091e:	2f c3       	sub	r3,-4
80010920:	a1 7b       	lsl	r11,0x1
80010922:	f7 e8 00 09 	and	r9,r11,r8
80010926:	cf c0       	breq	8001091e <_malloc_r+0x206>
80010928:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8001092c:	06 92       	mov	r2,r3
8001092e:	1c 91       	mov	r1,lr
80010930:	62 36       	ld.w	r6,r1[0xc]
80010932:	c2 e8       	rjmp	8001098e <_malloc_r+0x276>
80010934:	6c 1a       	ld.w	r10,r6[0x4]
80010936:	e0 1a ff fc 	andl	r10,0xfffc
8001093a:	f4 07 01 08 	sub	r8,r10,r7
8001093e:	58 f8       	cp.w	r8,15
80010940:	e0 8a 00 15 	brle	8001096a <_malloc_r+0x252>
80010944:	6c 3a       	ld.w	r10,r6[0xc]
80010946:	6c 29       	ld.w	r9,r6[0x8]
80010948:	95 29       	st.w	r10[0x8],r9
8001094a:	93 3a       	st.w	r9[0xc],r10
8001094c:	0e 99       	mov	r9,r7
8001094e:	ec 07 00 07 	add	r7,r6,r7
80010952:	a1 a9       	sbr	r9,0x0
80010954:	99 37       	st.w	r12[0xc],r7
80010956:	99 27       	st.w	r12[0x8],r7
80010958:	8d 19       	st.w	r6[0x4],r9
8001095a:	ee 08 09 08 	st.w	r7[r8],r8
8001095e:	8f 2c       	st.w	r7[0x8],r12
80010960:	8f 3c       	st.w	r7[0xc],r12
80010962:	a1 a8       	sbr	r8,0x0
80010964:	0a 9c       	mov	r12,r5
80010966:	8f 18       	st.w	r7[0x4],r8
80010968:	c0 d8       	rjmp	80010982 <_malloc_r+0x26a>
8001096a:	6c 39       	ld.w	r9,r6[0xc]
8001096c:	58 08       	cp.w	r8,0
8001096e:	c0 f5       	brlt	8001098c <_malloc_r+0x274>
80010970:	ec 0a 00 0a 	add	r10,r6,r10
80010974:	74 18       	ld.w	r8,r10[0x4]
80010976:	a1 a8       	sbr	r8,0x0
80010978:	0a 9c       	mov	r12,r5
8001097a:	95 18       	st.w	r10[0x4],r8
8001097c:	6c 28       	ld.w	r8,r6[0x8]
8001097e:	93 28       	st.w	r9[0x8],r8
80010980:	91 39       	st.w	r8[0xc],r9
80010982:	f0 1f 00 19 	mcall	800109e4 <_malloc_r+0x2cc>
80010986:	ec cc ff f8 	sub	r12,r6,-8
8001098a:	d8 32       	popm	r0-r7,pc
8001098c:	12 96       	mov	r6,r9
8001098e:	02 36       	cp.w	r6,r1
80010990:	cd 21       	brne	80010934 <_malloc_r+0x21c>
80010992:	2f f2       	sub	r2,-1
80010994:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80010998:	c0 30       	breq	8001099e <_malloc_r+0x286>
8001099a:	2f 81       	sub	r1,-8
8001099c:	cc ab       	rjmp	80010930 <_malloc_r+0x218>
8001099e:	1c 98       	mov	r8,lr
800109a0:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800109a4:	c0 81       	brne	800109b4 <_malloc_r+0x29c>
800109a6:	68 19       	ld.w	r9,r4[0x4]
800109a8:	f6 08 11 ff 	rsub	r8,r11,-1
800109ac:	f3 e8 00 08 	and	r8,r9,r8
800109b0:	89 18       	st.w	r4[0x4],r8
800109b2:	c0 78       	rjmp	800109c0 <_malloc_r+0x2a8>
800109b4:	f0 c9 00 08 	sub	r9,r8,8
800109b8:	20 13       	sub	r3,1
800109ba:	70 08       	ld.w	r8,r8[0x0]
800109bc:	12 38       	cp.w	r8,r9
800109be:	cf 10       	breq	800109a0 <_malloc_r+0x288>
800109c0:	a1 7b       	lsl	r11,0x1
800109c2:	68 18       	ld.w	r8,r4[0x4]
800109c4:	10 3b       	cp.w	r11,r8
800109c6:	e0 8b 00 11 	brhi	800109e8 <_malloc_r+0x2d0>
800109ca:	58 0b       	cp.w	r11,0
800109cc:	c0 e0       	breq	800109e8 <_malloc_r+0x2d0>
800109ce:	04 93       	mov	r3,r2
800109d0:	c0 38       	rjmp	800109d6 <_malloc_r+0x2be>
800109d2:	2f c3       	sub	r3,-4
800109d4:	a1 7b       	lsl	r11,0x1
800109d6:	f7 e8 00 09 	and	r9,r11,r8
800109da:	ca 71       	brne	80010928 <_malloc_r+0x210>
800109dc:	cf bb       	rjmp	800109d2 <_malloc_r+0x2ba>
800109de:	00 00       	add	r0,r0
800109e0:	00 00       	add	r0,r0
800109e2:	01 ac       	ld.ub	r12,r0[0x2]
800109e4:	80 01       	ld.sh	r1,r0[0x0]
800109e6:	0b be       	ld.ub	lr,r5[0x3]
800109e8:	68 23       	ld.w	r3,r4[0x8]
800109ea:	66 12       	ld.w	r2,r3[0x4]
800109ec:	e0 12 ff fc 	andl	r2,0xfffc
800109f0:	0e 32       	cp.w	r2,r7
800109f2:	5f 39       	srlo	r9
800109f4:	e4 07 01 08 	sub	r8,r2,r7
800109f8:	58 f8       	cp.w	r8,15
800109fa:	5f aa       	srle	r10
800109fc:	f5 e9 10 09 	or	r9,r10,r9
80010a00:	e0 80 00 a2 	breq	80010b44 <_malloc_r+0x42c>
80010a04:	4c 88       	lddpc	r8,80010b24 <_malloc_r+0x40c>
80010a06:	70 01       	ld.w	r1,r8[0x0]
80010a08:	4c 88       	lddpc	r8,80010b28 <_malloc_r+0x410>
80010a0a:	2f 01       	sub	r1,-16
80010a0c:	70 08       	ld.w	r8,r8[0x0]
80010a0e:	0e 01       	add	r1,r7
80010a10:	5b f8       	cp.w	r8,-1
80010a12:	c0 40       	breq	80010a1a <_malloc_r+0x302>
80010a14:	28 11       	sub	r1,-127
80010a16:	e0 11 ff 80 	andl	r1,0xff80
80010a1a:	02 9b       	mov	r11,r1
80010a1c:	0a 9c       	mov	r12,r5
80010a1e:	f0 1f 00 44 	mcall	80010b2c <_malloc_r+0x414>
80010a22:	18 96       	mov	r6,r12
80010a24:	5b fc       	cp.w	r12,-1
80010a26:	c6 e0       	breq	80010b02 <_malloc_r+0x3ea>
80010a28:	e6 02 00 08 	add	r8,r3,r2
80010a2c:	10 3c       	cp.w	r12,r8
80010a2e:	c0 32       	brcc	80010a34 <_malloc_r+0x31c>
80010a30:	08 33       	cp.w	r3,r4
80010a32:	c6 81       	brne	80010b02 <_malloc_r+0x3ea>
80010a34:	4b fa       	lddpc	r10,80010b30 <_malloc_r+0x418>
80010a36:	74 09       	ld.w	r9,r10[0x0]
80010a38:	e2 09 00 09 	add	r9,r1,r9
80010a3c:	95 09       	st.w	r10[0x0],r9
80010a3e:	10 36       	cp.w	r6,r8
80010a40:	c0 a1       	brne	80010a54 <_malloc_r+0x33c>
80010a42:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80010a46:	c0 71       	brne	80010a54 <_malloc_r+0x33c>
80010a48:	e2 02 00 02 	add	r2,r1,r2
80010a4c:	68 28       	ld.w	r8,r4[0x8]
80010a4e:	a1 a2       	sbr	r2,0x0
80010a50:	91 12       	st.w	r8[0x4],r2
80010a52:	c4 c8       	rjmp	80010aea <_malloc_r+0x3d2>
80010a54:	4b 5a       	lddpc	r10,80010b28 <_malloc_r+0x410>
80010a56:	74 0b       	ld.w	r11,r10[0x0]
80010a58:	5b fb       	cp.w	r11,-1
80010a5a:	c0 31       	brne	80010a60 <_malloc_r+0x348>
80010a5c:	95 06       	st.w	r10[0x0],r6
80010a5e:	c0 68       	rjmp	80010a6a <_malloc_r+0x352>
80010a60:	ec 09 00 09 	add	r9,r6,r9
80010a64:	4b 3a       	lddpc	r10,80010b30 <_malloc_r+0x418>
80010a66:	10 19       	sub	r9,r8
80010a68:	95 09       	st.w	r10[0x0],r9
80010a6a:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80010a6e:	f0 09 11 08 	rsub	r9,r8,8
80010a72:	58 08       	cp.w	r8,0
80010a74:	f2 08 17 10 	movne	r8,r9
80010a78:	ed d8 e1 06 	addne	r6,r6,r8
80010a7c:	28 08       	sub	r8,-128
80010a7e:	ec 01 00 01 	add	r1,r6,r1
80010a82:	0a 9c       	mov	r12,r5
80010a84:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80010a88:	f0 01 01 01 	sub	r1,r8,r1
80010a8c:	02 9b       	mov	r11,r1
80010a8e:	f0 1f 00 28 	mcall	80010b2c <_malloc_r+0x414>
80010a92:	4a 88       	lddpc	r8,80010b30 <_malloc_r+0x418>
80010a94:	5b fc       	cp.w	r12,-1
80010a96:	ec 0c 17 00 	moveq	r12,r6
80010a9a:	f9 b1 00 00 	moveq	r1,0
80010a9e:	70 09       	ld.w	r9,r8[0x0]
80010aa0:	0c 1c       	sub	r12,r6
80010aa2:	89 26       	st.w	r4[0x8],r6
80010aa4:	02 0c       	add	r12,r1
80010aa6:	12 01       	add	r1,r9
80010aa8:	a1 ac       	sbr	r12,0x0
80010aaa:	91 01       	st.w	r8[0x0],r1
80010aac:	8d 1c       	st.w	r6[0x4],r12
80010aae:	08 33       	cp.w	r3,r4
80010ab0:	c1 d0       	breq	80010aea <_malloc_r+0x3d2>
80010ab2:	58 f2       	cp.w	r2,15
80010ab4:	e0 8b 00 05 	brhi	80010abe <_malloc_r+0x3a6>
80010ab8:	30 18       	mov	r8,1
80010aba:	8d 18       	st.w	r6[0x4],r8
80010abc:	c2 38       	rjmp	80010b02 <_malloc_r+0x3ea>
80010abe:	30 59       	mov	r9,5
80010ac0:	20 c2       	sub	r2,12
80010ac2:	e0 12 ff f8 	andl	r2,0xfff8
80010ac6:	e6 02 00 08 	add	r8,r3,r2
80010aca:	91 29       	st.w	r8[0x8],r9
80010acc:	91 19       	st.w	r8[0x4],r9
80010ace:	66 18       	ld.w	r8,r3[0x4]
80010ad0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80010ad4:	e5 e8 10 08 	or	r8,r2,r8
80010ad8:	87 18       	st.w	r3[0x4],r8
80010ada:	58 f2       	cp.w	r2,15
80010adc:	e0 88 00 07 	brls	80010aea <_malloc_r+0x3d2>
80010ae0:	e6 cb ff f8 	sub	r11,r3,-8
80010ae4:	0a 9c       	mov	r12,r5
80010ae6:	f0 1f 00 14 	mcall	80010b34 <_malloc_r+0x41c>
80010aea:	49 49       	lddpc	r9,80010b38 <_malloc_r+0x420>
80010aec:	72 0a       	ld.w	r10,r9[0x0]
80010aee:	49 18       	lddpc	r8,80010b30 <_malloc_r+0x418>
80010af0:	70 08       	ld.w	r8,r8[0x0]
80010af2:	14 38       	cp.w	r8,r10
80010af4:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80010af8:	49 19       	lddpc	r9,80010b3c <_malloc_r+0x424>
80010afa:	72 0a       	ld.w	r10,r9[0x0]
80010afc:	14 38       	cp.w	r8,r10
80010afe:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80010b02:	68 28       	ld.w	r8,r4[0x8]
80010b04:	70 18       	ld.w	r8,r8[0x4]
80010b06:	e0 18 ff fc 	andl	r8,0xfffc
80010b0a:	0e 38       	cp.w	r8,r7
80010b0c:	5f 39       	srlo	r9
80010b0e:	0e 18       	sub	r8,r7
80010b10:	58 f8       	cp.w	r8,15
80010b12:	5f aa       	srle	r10
80010b14:	f5 e9 10 09 	or	r9,r10,r9
80010b18:	c1 60       	breq	80010b44 <_malloc_r+0x42c>
80010b1a:	0a 9c       	mov	r12,r5
80010b1c:	f0 1f 00 09 	mcall	80010b40 <_malloc_r+0x428>
80010b20:	d8 3a       	popm	r0-r7,pc,r12=0
80010b22:	00 00       	add	r0,r0
80010b24:	00 00       	add	r0,r0
80010b26:	07 e0       	ld.ub	r0,r3[0x6]
80010b28:	00 00       	add	r0,r0
80010b2a:	05 b8       	ld.ub	r8,r2[0x3]
80010b2c:	80 01       	ld.sh	r1,r0[0x0]
80010b2e:	15 2c       	ld.uh	r12,r10++
80010b30:	00 00       	add	r0,r0
80010b32:	07 e4       	ld.ub	r4,r3[0x6]
80010b34:	80 01       	ld.sh	r1,r0[0x0]
80010b36:	01 74       	ld.ub	r4,--r0
80010b38:	00 00       	add	r0,r0
80010b3a:	07 dc       	ld.ub	r12,r3[0x5]
80010b3c:	00 00       	add	r0,r0
80010b3e:	07 d8       	ld.ub	r8,r3[0x5]
80010b40:	80 01       	ld.sh	r1,r0[0x0]
80010b42:	0b be       	ld.ub	lr,r5[0x3]
80010b44:	68 26       	ld.w	r6,r4[0x8]
80010b46:	a1 a8       	sbr	r8,0x0
80010b48:	0e 99       	mov	r9,r7
80010b4a:	a1 a9       	sbr	r9,0x0
80010b4c:	8d 19       	st.w	r6[0x4],r9
80010b4e:	ec 07 00 07 	add	r7,r6,r7
80010b52:	0a 9c       	mov	r12,r5
80010b54:	89 27       	st.w	r4[0x8],r7
80010b56:	8f 18       	st.w	r7[0x4],r8
80010b58:	f0 1f 00 03 	mcall	80010b64 <_malloc_r+0x44c>
80010b5c:	ec cc ff f8 	sub	r12,r6,-8
80010b60:	d8 32       	popm	r0-r7,pc
80010b62:	00 00       	add	r0,r0
80010b64:	80 01       	ld.sh	r1,r0[0x0]
80010b66:	0b be       	ld.ub	lr,r5[0x3]

80010b68 <memchr>:
80010b68:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80010b6c:	c0 68       	rjmp	80010b78 <memchr+0x10>
80010b6e:	20 1a       	sub	r10,1
80010b70:	19 88       	ld.ub	r8,r12[0x0]
80010b72:	16 38       	cp.w	r8,r11
80010b74:	5e 0c       	reteq	r12
80010b76:	2f fc       	sub	r12,-1
80010b78:	58 0a       	cp.w	r10,0
80010b7a:	cf a1       	brne	80010b6e <memchr+0x6>
80010b7c:	5e fa       	retal	r10

80010b7e <memmove>:
80010b7e:	d4 01       	pushm	lr
80010b80:	18 3b       	cp.w	r11,r12
80010b82:	c1 92       	brcc	80010bb4 <memmove+0x36>
80010b84:	f6 0a 00 09 	add	r9,r11,r10
80010b88:	12 3c       	cp.w	r12,r9
80010b8a:	c1 52       	brcc	80010bb4 <memmove+0x36>
80010b8c:	f8 0a 00 0b 	add	r11,r12,r10
80010b90:	30 08       	mov	r8,0
80010b92:	c0 68       	rjmp	80010b9e <memmove+0x20>
80010b94:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80010b98:	20 1a       	sub	r10,1
80010b9a:	f6 08 0b 0e 	st.b	r11[r8],lr
80010b9e:	20 18       	sub	r8,1
80010ba0:	58 0a       	cp.w	r10,0
80010ba2:	cf 91       	brne	80010b94 <memmove+0x16>
80010ba4:	d8 02       	popm	pc
80010ba6:	f6 08 07 09 	ld.ub	r9,r11[r8]
80010baa:	20 1a       	sub	r10,1
80010bac:	f8 08 0b 09 	st.b	r12[r8],r9
80010bb0:	2f f8       	sub	r8,-1
80010bb2:	c0 28       	rjmp	80010bb6 <memmove+0x38>
80010bb4:	30 08       	mov	r8,0
80010bb6:	58 0a       	cp.w	r10,0
80010bb8:	cf 71       	brne	80010ba6 <memmove+0x28>
80010bba:	d8 02       	popm	pc

80010bbc <__malloc_lock>:
80010bbc:	5e fc       	retal	r12

80010bbe <__malloc_unlock>:
80010bbe:	5e fc       	retal	r12

80010bc0 <__hi0bits>:
80010bc0:	18 98       	mov	r8,r12
80010bc2:	e0 1c 00 00 	andl	r12,0x0
80010bc6:	f0 09 15 10 	lsl	r9,r8,0x10
80010bca:	58 0c       	cp.w	r12,0
80010bcc:	f2 08 17 00 	moveq	r8,r9
80010bd0:	f9 bc 00 10 	moveq	r12,16
80010bd4:	f9 bc 01 00 	movne	r12,0
80010bd8:	10 9a       	mov	r10,r8
80010bda:	f0 09 15 08 	lsl	r9,r8,0x8
80010bde:	e6 1a ff 00 	andh	r10,0xff00,COH
80010be2:	f7 bc 00 f8 	subeq	r12,-8
80010be6:	f2 08 17 00 	moveq	r8,r9
80010bea:	10 9a       	mov	r10,r8
80010bec:	f0 09 15 04 	lsl	r9,r8,0x4
80010bf0:	e6 1a f0 00 	andh	r10,0xf000,COH
80010bf4:	f7 bc 00 fc 	subeq	r12,-4
80010bf8:	f2 08 17 00 	moveq	r8,r9
80010bfc:	10 9a       	mov	r10,r8
80010bfe:	f0 09 15 02 	lsl	r9,r8,0x2
80010c02:	e6 1a c0 00 	andh	r10,0xc000,COH
80010c06:	f7 bc 00 fe 	subeq	r12,-2
80010c0a:	f2 08 17 00 	moveq	r8,r9
80010c0e:	58 08       	cp.w	r8,0
80010c10:	5e 5c       	retlt	r12
80010c12:	ed b8 00 1e 	bld	r8,0x1e
80010c16:	f9 bc 01 20 	movne	r12,32
80010c1a:	f7 bc 00 ff 	subeq	r12,-1
80010c1e:	5e fc       	retal	r12

80010c20 <__lo0bits>:
80010c20:	18 99       	mov	r9,r12
80010c22:	78 08       	ld.w	r8,r12[0x0]
80010c24:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80010c28:	c1 50       	breq	80010c52 <__lo0bits+0x32>
80010c2a:	ed b8 00 00 	bld	r8,0x0
80010c2e:	c0 21       	brne	80010c32 <__lo0bits+0x12>
80010c30:	5e fd       	retal	0
80010c32:	10 9b       	mov	r11,r8
80010c34:	f0 0a 16 01 	lsr	r10,r8,0x1
80010c38:	e2 1b 00 02 	andl	r11,0x2,COH
80010c3c:	a3 88       	lsr	r8,0x2
80010c3e:	58 0b       	cp.w	r11,0
80010c40:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80010c44:	f9 bc 01 01 	movne	r12,1
80010c48:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80010c4c:	f9 bc 00 02 	moveq	r12,2
80010c50:	5e fc       	retal	r12
80010c52:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80010c56:	f0 0b 16 10 	lsr	r11,r8,0x10
80010c5a:	58 0a       	cp.w	r10,0
80010c5c:	f6 08 17 00 	moveq	r8,r11
80010c60:	f9 bc 00 10 	moveq	r12,16
80010c64:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80010c68:	f0 0a 16 08 	lsr	r10,r8,0x8
80010c6c:	58 0b       	cp.w	r11,0
80010c6e:	f7 bc 00 f8 	subeq	r12,-8
80010c72:	f4 08 17 00 	moveq	r8,r10
80010c76:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80010c7a:	f0 0a 16 04 	lsr	r10,r8,0x4
80010c7e:	58 0b       	cp.w	r11,0
80010c80:	f7 bc 00 fc 	subeq	r12,-4
80010c84:	f4 08 17 00 	moveq	r8,r10
80010c88:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80010c8c:	f0 0a 16 02 	lsr	r10,r8,0x2
80010c90:	58 0b       	cp.w	r11,0
80010c92:	f7 bc 00 fe 	subeq	r12,-2
80010c96:	f4 08 17 00 	moveq	r8,r10
80010c9a:	ed b8 00 00 	bld	r8,0x0
80010c9e:	c0 60       	breq	80010caa <__lo0bits+0x8a>
80010ca0:	a1 98       	lsr	r8,0x1
80010ca2:	c0 31       	brne	80010ca8 <__lo0bits+0x88>
80010ca4:	32 0c       	mov	r12,32
80010ca6:	5e fc       	retal	r12
80010ca8:	2f fc       	sub	r12,-1
80010caa:	93 08       	st.w	r9[0x0],r8
80010cac:	5e fc       	retal	r12

80010cae <__mcmp>:
80010cae:	d4 01       	pushm	lr
80010cb0:	18 98       	mov	r8,r12
80010cb2:	76 49       	ld.w	r9,r11[0x10]
80010cb4:	78 4c       	ld.w	r12,r12[0x10]
80010cb6:	12 1c       	sub	r12,r9
80010cb8:	c1 31       	brne	80010cde <__mcmp+0x30>
80010cba:	2f b9       	sub	r9,-5
80010cbc:	a3 69       	lsl	r9,0x2
80010cbe:	12 0b       	add	r11,r9
80010cc0:	f0 09 00 09 	add	r9,r8,r9
80010cc4:	2e c8       	sub	r8,-20
80010cc6:	13 4e       	ld.w	lr,--r9
80010cc8:	17 4a       	ld.w	r10,--r11
80010cca:	14 3e       	cp.w	lr,r10
80010ccc:	c0 60       	breq	80010cd8 <__mcmp+0x2a>
80010cce:	f9 bc 03 ff 	movlo	r12,-1
80010cd2:	f9 bc 02 01 	movhs	r12,1
80010cd6:	d8 02       	popm	pc
80010cd8:	10 39       	cp.w	r9,r8
80010cda:	fe 9b ff f6 	brhi	80010cc6 <__mcmp+0x18>
80010cde:	d8 02       	popm	pc

80010ce0 <_Bfree>:
80010ce0:	d4 21       	pushm	r4-r7,lr
80010ce2:	18 97       	mov	r7,r12
80010ce4:	16 95       	mov	r5,r11
80010ce6:	78 96       	ld.w	r6,r12[0x24]
80010ce8:	58 06       	cp.w	r6,0
80010cea:	c0 91       	brne	80010cfc <_Bfree+0x1c>
80010cec:	31 0c       	mov	r12,16
80010cee:	f0 1f 00 0a 	mcall	80010d14 <_Bfree+0x34>
80010cf2:	99 36       	st.w	r12[0xc],r6
80010cf4:	8f 9c       	st.w	r7[0x24],r12
80010cf6:	99 16       	st.w	r12[0x4],r6
80010cf8:	99 26       	st.w	r12[0x8],r6
80010cfa:	99 06       	st.w	r12[0x0],r6
80010cfc:	58 05       	cp.w	r5,0
80010cfe:	c0 90       	breq	80010d10 <_Bfree+0x30>
80010d00:	6a 19       	ld.w	r9,r5[0x4]
80010d02:	6e 98       	ld.w	r8,r7[0x24]
80010d04:	70 38       	ld.w	r8,r8[0xc]
80010d06:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80010d0a:	8b 0a       	st.w	r5[0x0],r10
80010d0c:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80010d10:	d8 22       	popm	r4-r7,pc
80010d12:	00 00       	add	r0,r0
80010d14:	80 01       	ld.sh	r1,r0[0x0]
80010d16:	07 00       	ld.w	r0,r3++

80010d18 <_Balloc>:
80010d18:	d4 21       	pushm	r4-r7,lr
80010d1a:	18 97       	mov	r7,r12
80010d1c:	16 96       	mov	r6,r11
80010d1e:	78 95       	ld.w	r5,r12[0x24]
80010d20:	58 05       	cp.w	r5,0
80010d22:	c0 91       	brne	80010d34 <_Balloc+0x1c>
80010d24:	31 0c       	mov	r12,16
80010d26:	f0 1f 00 19 	mcall	80010d88 <_Balloc+0x70>
80010d2a:	99 35       	st.w	r12[0xc],r5
80010d2c:	8f 9c       	st.w	r7[0x24],r12
80010d2e:	99 15       	st.w	r12[0x4],r5
80010d30:	99 25       	st.w	r12[0x8],r5
80010d32:	99 05       	st.w	r12[0x0],r5
80010d34:	6e 95       	ld.w	r5,r7[0x24]
80010d36:	6a 38       	ld.w	r8,r5[0xc]
80010d38:	58 08       	cp.w	r8,0
80010d3a:	c0 b1       	brne	80010d50 <_Balloc+0x38>
80010d3c:	31 0a       	mov	r10,16
80010d3e:	30 4b       	mov	r11,4
80010d40:	0e 9c       	mov	r12,r7
80010d42:	f0 1f 00 13 	mcall	80010d8c <_Balloc+0x74>
80010d46:	8b 3c       	st.w	r5[0xc],r12
80010d48:	6e 98       	ld.w	r8,r7[0x24]
80010d4a:	70 3c       	ld.w	r12,r8[0xc]
80010d4c:	58 0c       	cp.w	r12,0
80010d4e:	c1 b0       	breq	80010d84 <_Balloc+0x6c>
80010d50:	6e 98       	ld.w	r8,r7[0x24]
80010d52:	70 38       	ld.w	r8,r8[0xc]
80010d54:	f0 06 00 28 	add	r8,r8,r6<<0x2
80010d58:	70 0c       	ld.w	r12,r8[0x0]
80010d5a:	58 0c       	cp.w	r12,0
80010d5c:	c0 40       	breq	80010d64 <_Balloc+0x4c>
80010d5e:	78 09       	ld.w	r9,r12[0x0]
80010d60:	91 09       	st.w	r8[0x0],r9
80010d62:	c0 e8       	rjmp	80010d7e <_Balloc+0x66>
80010d64:	0e 9c       	mov	r12,r7
80010d66:	30 17       	mov	r7,1
80010d68:	0e 9b       	mov	r11,r7
80010d6a:	ee 06 09 47 	lsl	r7,r7,r6
80010d6e:	ee ca ff fb 	sub	r10,r7,-5
80010d72:	a3 6a       	lsl	r10,0x2
80010d74:	f0 1f 00 06 	mcall	80010d8c <_Balloc+0x74>
80010d78:	c0 60       	breq	80010d84 <_Balloc+0x6c>
80010d7a:	99 16       	st.w	r12[0x4],r6
80010d7c:	99 27       	st.w	r12[0x8],r7
80010d7e:	30 08       	mov	r8,0
80010d80:	99 38       	st.w	r12[0xc],r8
80010d82:	99 48       	st.w	r12[0x10],r8
80010d84:	d8 22       	popm	r4-r7,pc
80010d86:	00 00       	add	r0,r0
80010d88:	80 01       	ld.sh	r1,r0[0x0]
80010d8a:	07 00       	ld.w	r0,r3++
80010d8c:	80 01       	ld.sh	r1,r0[0x0]
80010d8e:	17 34       	ld.ub	r4,r11++

80010d90 <__d2b>:
80010d90:	d4 31       	pushm	r0-r7,lr
80010d92:	20 2d       	sub	sp,8
80010d94:	16 93       	mov	r3,r11
80010d96:	12 96       	mov	r6,r9
80010d98:	10 95       	mov	r5,r8
80010d9a:	14 92       	mov	r2,r10
80010d9c:	30 1b       	mov	r11,1
80010d9e:	f0 1f 00 27 	mcall	80010e38 <__d2b+0xa8>
80010da2:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80010da6:	50 09       	stdsp	sp[0x0],r9
80010da8:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80010dac:	b5 a9       	sbr	r9,0x14
80010dae:	f0 01 16 14 	lsr	r1,r8,0x14
80010db2:	fb f9 1a 00 	st.wne	sp[0x0],r9
80010db6:	18 94       	mov	r4,r12
80010db8:	58 02       	cp.w	r2,0
80010dba:	c1 e0       	breq	80010df6 <__d2b+0x66>
80010dbc:	fa cc ff f8 	sub	r12,sp,-8
80010dc0:	18 d2       	st.w	--r12,r2
80010dc2:	f0 1f 00 1f 	mcall	80010e3c <__d2b+0xac>
80010dc6:	40 18       	lddsp	r8,sp[0x4]
80010dc8:	c0 d0       	breq	80010de2 <__d2b+0x52>
80010dca:	40 09       	lddsp	r9,sp[0x0]
80010dcc:	f8 0a 11 20 	rsub	r10,r12,32
80010dd0:	f2 0a 09 4a 	lsl	r10,r9,r10
80010dd4:	f5 e8 10 08 	or	r8,r10,r8
80010dd8:	89 58       	st.w	r4[0x14],r8
80010dda:	f2 0c 0a 49 	lsr	r9,r9,r12
80010dde:	50 09       	stdsp	sp[0x0],r9
80010de0:	c0 28       	rjmp	80010de4 <__d2b+0x54>
80010de2:	89 58       	st.w	r4[0x14],r8
80010de4:	40 08       	lddsp	r8,sp[0x0]
80010de6:	58 08       	cp.w	r8,0
80010de8:	f9 b3 01 02 	movne	r3,2
80010dec:	f9 b3 00 01 	moveq	r3,1
80010df0:	89 68       	st.w	r4[0x18],r8
80010df2:	89 43       	st.w	r4[0x10],r3
80010df4:	c0 98       	rjmp	80010e06 <__d2b+0x76>
80010df6:	1a 9c       	mov	r12,sp
80010df8:	f0 1f 00 11 	mcall	80010e3c <__d2b+0xac>
80010dfc:	30 13       	mov	r3,1
80010dfe:	40 08       	lddsp	r8,sp[0x0]
80010e00:	2e 0c       	sub	r12,-32
80010e02:	89 43       	st.w	r4[0x10],r3
80010e04:	89 58       	st.w	r4[0x14],r8
80010e06:	58 01       	cp.w	r1,0
80010e08:	c0 90       	breq	80010e1a <__d2b+0x8a>
80010e0a:	e2 c1 04 33 	sub	r1,r1,1075
80010e0e:	18 01       	add	r1,r12
80010e10:	8d 01       	st.w	r6[0x0],r1
80010e12:	f8 0c 11 35 	rsub	r12,r12,53
80010e16:	8b 0c       	st.w	r5[0x0],r12
80010e18:	c0 d8       	rjmp	80010e32 <__d2b+0xa2>
80010e1a:	e6 c8 ff fc 	sub	r8,r3,-4
80010e1e:	f8 cc 04 32 	sub	r12,r12,1074
80010e22:	a5 73       	lsl	r3,0x5
80010e24:	8d 0c       	st.w	r6[0x0],r12
80010e26:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80010e2a:	f0 1f 00 06 	mcall	80010e40 <__d2b+0xb0>
80010e2e:	18 13       	sub	r3,r12
80010e30:	8b 03       	st.w	r5[0x0],r3
80010e32:	08 9c       	mov	r12,r4
80010e34:	2f ed       	sub	sp,-8
80010e36:	d8 32       	popm	r0-r7,pc
80010e38:	80 01       	ld.sh	r1,r0[0x0]
80010e3a:	0d 18       	ld.sh	r8,r6++
80010e3c:	80 01       	ld.sh	r1,r0[0x0]
80010e3e:	0c 20       	rsub	r0,r6
80010e40:	80 01       	ld.sh	r1,r0[0x0]
80010e42:	0b c0       	ld.ub	r0,r5[0x4]

80010e44 <__mdiff>:
80010e44:	d4 31       	pushm	r0-r7,lr
80010e46:	74 48       	ld.w	r8,r10[0x10]
80010e48:	76 45       	ld.w	r5,r11[0x10]
80010e4a:	16 97       	mov	r7,r11
80010e4c:	14 96       	mov	r6,r10
80010e4e:	10 15       	sub	r5,r8
80010e50:	c1 31       	brne	80010e76 <__mdiff+0x32>
80010e52:	2f b8       	sub	r8,-5
80010e54:	ee ce ff ec 	sub	lr,r7,-20
80010e58:	a3 68       	lsl	r8,0x2
80010e5a:	f4 08 00 0b 	add	r11,r10,r8
80010e5e:	ee 08 00 08 	add	r8,r7,r8
80010e62:	11 4a       	ld.w	r10,--r8
80010e64:	17 49       	ld.w	r9,--r11
80010e66:	12 3a       	cp.w	r10,r9
80010e68:	c0 30       	breq	80010e6e <__mdiff+0x2a>
80010e6a:	c0 e2       	brcc	80010e86 <__mdiff+0x42>
80010e6c:	c0 78       	rjmp	80010e7a <__mdiff+0x36>
80010e6e:	1c 38       	cp.w	r8,lr
80010e70:	fe 9b ff f9 	brhi	80010e62 <__mdiff+0x1e>
80010e74:	c4 a8       	rjmp	80010f08 <__mdiff+0xc4>
80010e76:	58 05       	cp.w	r5,0
80010e78:	c0 64       	brge	80010e84 <__mdiff+0x40>
80010e7a:	0e 98       	mov	r8,r7
80010e7c:	30 15       	mov	r5,1
80010e7e:	0c 97       	mov	r7,r6
80010e80:	10 96       	mov	r6,r8
80010e82:	c0 28       	rjmp	80010e86 <__mdiff+0x42>
80010e84:	30 05       	mov	r5,0
80010e86:	6e 1b       	ld.w	r11,r7[0x4]
80010e88:	f0 1f 00 24 	mcall	80010f18 <__mdiff+0xd4>
80010e8c:	6e 49       	ld.w	r9,r7[0x10]
80010e8e:	6c 44       	ld.w	r4,r6[0x10]
80010e90:	99 35       	st.w	r12[0xc],r5
80010e92:	2f b4       	sub	r4,-5
80010e94:	f2 c5 ff fb 	sub	r5,r9,-5
80010e98:	ec 04 00 24 	add	r4,r6,r4<<0x2
80010e9c:	ee 05 00 25 	add	r5,r7,r5<<0x2
80010ea0:	2e c6       	sub	r6,-20
80010ea2:	2e c7       	sub	r7,-20
80010ea4:	f8 c8 ff ec 	sub	r8,r12,-20
80010ea8:	30 0a       	mov	r10,0
80010eaa:	0f 0e       	ld.w	lr,r7++
80010eac:	0d 0b       	ld.w	r11,r6++
80010eae:	fc 02 16 10 	lsr	r2,lr,0x10
80010eb2:	f6 03 16 10 	lsr	r3,r11,0x10
80010eb6:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80010eba:	e4 03 01 03 	sub	r3,r2,r3
80010ebe:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80010ec2:	fc 0b 01 0b 	sub	r11,lr,r11
80010ec6:	f6 0a 00 0a 	add	r10,r11,r10
80010eca:	b0 1a       	st.h	r8[0x2],r10
80010ecc:	b1 4a       	asr	r10,0x10
80010ece:	e6 0a 00 0a 	add	r10,r3,r10
80010ed2:	b0 0a       	st.h	r8[0x0],r10
80010ed4:	2f c8       	sub	r8,-4
80010ed6:	b1 4a       	asr	r10,0x10
80010ed8:	08 36       	cp.w	r6,r4
80010eda:	ce 83       	brcs	80010eaa <__mdiff+0x66>
80010edc:	c0 d8       	rjmp	80010ef6 <__mdiff+0xb2>
80010ede:	0f 0b       	ld.w	r11,r7++
80010ee0:	f6 0e 16 10 	lsr	lr,r11,0x10
80010ee4:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80010ee8:	16 0a       	add	r10,r11
80010eea:	b0 1a       	st.h	r8[0x2],r10
80010eec:	b1 4a       	asr	r10,0x10
80010eee:	1c 0a       	add	r10,lr
80010ef0:	b0 0a       	st.h	r8[0x0],r10
80010ef2:	2f c8       	sub	r8,-4
80010ef4:	b1 4a       	asr	r10,0x10
80010ef6:	0a 37       	cp.w	r7,r5
80010ef8:	cf 33       	brcs	80010ede <__mdiff+0x9a>
80010efa:	c0 28       	rjmp	80010efe <__mdiff+0xba>
80010efc:	20 19       	sub	r9,1
80010efe:	11 4a       	ld.w	r10,--r8
80010f00:	58 0a       	cp.w	r10,0
80010f02:	cf d0       	breq	80010efc <__mdiff+0xb8>
80010f04:	99 49       	st.w	r12[0x10],r9
80010f06:	d8 32       	popm	r0-r7,pc
80010f08:	30 0b       	mov	r11,0
80010f0a:	f0 1f 00 04 	mcall	80010f18 <__mdiff+0xd4>
80010f0e:	30 18       	mov	r8,1
80010f10:	99 48       	st.w	r12[0x10],r8
80010f12:	30 08       	mov	r8,0
80010f14:	99 58       	st.w	r12[0x14],r8
80010f16:	d8 32       	popm	r0-r7,pc
80010f18:	80 01       	ld.sh	r1,r0[0x0]
80010f1a:	0d 18       	ld.sh	r8,r6++

80010f1c <__lshift>:
80010f1c:	d4 31       	pushm	r0-r7,lr
80010f1e:	16 97       	mov	r7,r11
80010f20:	76 46       	ld.w	r6,r11[0x10]
80010f22:	f4 02 14 05 	asr	r2,r10,0x5
80010f26:	2f f6       	sub	r6,-1
80010f28:	14 93       	mov	r3,r10
80010f2a:	18 94       	mov	r4,r12
80010f2c:	04 06       	add	r6,r2
80010f2e:	76 1b       	ld.w	r11,r11[0x4]
80010f30:	6e 28       	ld.w	r8,r7[0x8]
80010f32:	c0 38       	rjmp	80010f38 <__lshift+0x1c>
80010f34:	2f fb       	sub	r11,-1
80010f36:	a1 78       	lsl	r8,0x1
80010f38:	10 36       	cp.w	r6,r8
80010f3a:	fe 99 ff fd 	brgt	80010f34 <__lshift+0x18>
80010f3e:	08 9c       	mov	r12,r4
80010f40:	f0 1f 00 1a 	mcall	80010fa8 <__lshift+0x8c>
80010f44:	30 09       	mov	r9,0
80010f46:	18 95       	mov	r5,r12
80010f48:	f8 c8 ff ec 	sub	r8,r12,-20
80010f4c:	12 9a       	mov	r10,r9
80010f4e:	c0 38       	rjmp	80010f54 <__lshift+0x38>
80010f50:	10 aa       	st.w	r8++,r10
80010f52:	2f f9       	sub	r9,-1
80010f54:	04 39       	cp.w	r9,r2
80010f56:	cf d5       	brlt	80010f50 <__lshift+0x34>
80010f58:	6e 4b       	ld.w	r11,r7[0x10]
80010f5a:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80010f5e:	2f bb       	sub	r11,-5
80010f60:	ee c9 ff ec 	sub	r9,r7,-20
80010f64:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80010f68:	58 03       	cp.w	r3,0
80010f6a:	c1 30       	breq	80010f90 <__lshift+0x74>
80010f6c:	e6 0c 11 20 	rsub	r12,r3,32
80010f70:	30 0a       	mov	r10,0
80010f72:	72 02       	ld.w	r2,r9[0x0]
80010f74:	e4 03 09 42 	lsl	r2,r2,r3
80010f78:	04 4a       	or	r10,r2
80010f7a:	10 aa       	st.w	r8++,r10
80010f7c:	13 0a       	ld.w	r10,r9++
80010f7e:	f4 0c 0a 4a 	lsr	r10,r10,r12
80010f82:	16 39       	cp.w	r9,r11
80010f84:	cf 73       	brcs	80010f72 <__lshift+0x56>
80010f86:	91 0a       	st.w	r8[0x0],r10
80010f88:	58 0a       	cp.w	r10,0
80010f8a:	c0 70       	breq	80010f98 <__lshift+0x7c>
80010f8c:	2f f6       	sub	r6,-1
80010f8e:	c0 58       	rjmp	80010f98 <__lshift+0x7c>
80010f90:	13 0a       	ld.w	r10,r9++
80010f92:	10 aa       	st.w	r8++,r10
80010f94:	16 39       	cp.w	r9,r11
80010f96:	cf d3       	brcs	80010f90 <__lshift+0x74>
80010f98:	08 9c       	mov	r12,r4
80010f9a:	20 16       	sub	r6,1
80010f9c:	0e 9b       	mov	r11,r7
80010f9e:	8b 46       	st.w	r5[0x10],r6
80010fa0:	f0 1f 00 03 	mcall	80010fac <__lshift+0x90>
80010fa4:	0a 9c       	mov	r12,r5
80010fa6:	d8 32       	popm	r0-r7,pc
80010fa8:	80 01       	ld.sh	r1,r0[0x0]
80010faa:	0d 18       	ld.sh	r8,r6++
80010fac:	80 01       	ld.sh	r1,r0[0x0]
80010fae:	0c e0       	st.h	--r6,r0

80010fb0 <__multiply>:
80010fb0:	d4 31       	pushm	r0-r7,lr
80010fb2:	20 2d       	sub	sp,8
80010fb4:	76 49       	ld.w	r9,r11[0x10]
80010fb6:	74 48       	ld.w	r8,r10[0x10]
80010fb8:	16 96       	mov	r6,r11
80010fba:	14 95       	mov	r5,r10
80010fbc:	10 39       	cp.w	r9,r8
80010fbe:	ec 08 17 50 	movlt	r8,r6
80010fc2:	ea 06 17 50 	movlt	r6,r5
80010fc6:	f0 05 17 50 	movlt	r5,r8
80010fca:	6c 28       	ld.w	r8,r6[0x8]
80010fcc:	76 43       	ld.w	r3,r11[0x10]
80010fce:	74 42       	ld.w	r2,r10[0x10]
80010fd0:	76 1b       	ld.w	r11,r11[0x4]
80010fd2:	e4 03 00 07 	add	r7,r2,r3
80010fd6:	10 37       	cp.w	r7,r8
80010fd8:	f7 bb 09 ff 	subgt	r11,-1
80010fdc:	f0 1f 00 36 	mcall	800110b4 <__multiply+0x104>
80010fe0:	ee c4 ff fb 	sub	r4,r7,-5
80010fe4:	f8 c9 ff ec 	sub	r9,r12,-20
80010fe8:	f8 04 00 24 	add	r4,r12,r4<<0x2
80010fec:	30 0a       	mov	r10,0
80010fee:	12 98       	mov	r8,r9
80010ff0:	c0 28       	rjmp	80010ff4 <__multiply+0x44>
80010ff2:	10 aa       	st.w	r8++,r10
80010ff4:	08 38       	cp.w	r8,r4
80010ff6:	cf e3       	brcs	80010ff2 <__multiply+0x42>
80010ff8:	2f b3       	sub	r3,-5
80010ffa:	2f b2       	sub	r2,-5
80010ffc:	ec 03 00 23 	add	r3,r6,r3<<0x2
80011000:	ea 02 00 22 	add	r2,r5,r2<<0x2
80011004:	ec cb ff ec 	sub	r11,r6,-20
80011008:	50 12       	stdsp	sp[0x4],r2
8001100a:	ea ca ff ec 	sub	r10,r5,-20
8001100e:	c4 48       	rjmp	80011096 <__multiply+0xe6>
80011010:	94 95       	ld.uh	r5,r10[0x2]
80011012:	58 05       	cp.w	r5,0
80011014:	c2 00       	breq	80011054 <__multiply+0xa4>
80011016:	12 98       	mov	r8,r9
80011018:	16 96       	mov	r6,r11
8001101a:	30 0e       	mov	lr,0
8001101c:	50 09       	stdsp	sp[0x0],r9
8001101e:	0d 02       	ld.w	r2,r6++
80011020:	e4 00 16 10 	lsr	r0,r2,0x10
80011024:	70 01       	ld.w	r1,r8[0x0]
80011026:	70 09       	ld.w	r9,r8[0x0]
80011028:	b1 81       	lsr	r1,0x10
8001102a:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8001102e:	e0 05 03 41 	mac	r1,r0,r5
80011032:	ab 32       	mul	r2,r5
80011034:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80011038:	00 02       	add	r2,r0
8001103a:	e4 0e 00 0e 	add	lr,r2,lr
8001103e:	b0 1e       	st.h	r8[0x2],lr
80011040:	b1 8e       	lsr	lr,0x10
80011042:	1c 01       	add	r1,lr
80011044:	b0 01       	st.h	r8[0x0],r1
80011046:	e2 0e 16 10 	lsr	lr,r1,0x10
8001104a:	2f c8       	sub	r8,-4
8001104c:	06 36       	cp.w	r6,r3
8001104e:	ce 83       	brcs	8001101e <__multiply+0x6e>
80011050:	40 09       	lddsp	r9,sp[0x0]
80011052:	91 0e       	st.w	r8[0x0],lr
80011054:	94 86       	ld.uh	r6,r10[0x0]
80011056:	58 06       	cp.w	r6,0
80011058:	c1 d0       	breq	80011092 <__multiply+0xe2>
8001105a:	72 02       	ld.w	r2,r9[0x0]
8001105c:	12 98       	mov	r8,r9
8001105e:	16 9e       	mov	lr,r11
80011060:	30 05       	mov	r5,0
80011062:	b0 12       	st.h	r8[0x2],r2
80011064:	1d 01       	ld.w	r1,lr++
80011066:	90 82       	ld.uh	r2,r8[0x0]
80011068:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8001106c:	ad 30       	mul	r0,r6
8001106e:	e0 02 00 02 	add	r2,r0,r2
80011072:	e4 05 00 05 	add	r5,r2,r5
80011076:	b0 05       	st.h	r8[0x0],r5
80011078:	b1 85       	lsr	r5,0x10
8001107a:	b1 81       	lsr	r1,0x10
8001107c:	2f c8       	sub	r8,-4
8001107e:	ad 31       	mul	r1,r6
80011080:	90 92       	ld.uh	r2,r8[0x2]
80011082:	e2 02 00 02 	add	r2,r1,r2
80011086:	0a 02       	add	r2,r5
80011088:	e4 05 16 10 	lsr	r5,r2,0x10
8001108c:	06 3e       	cp.w	lr,r3
8001108e:	ce a3       	brcs	80011062 <__multiply+0xb2>
80011090:	91 02       	st.w	r8[0x0],r2
80011092:	2f ca       	sub	r10,-4
80011094:	2f c9       	sub	r9,-4
80011096:	40 18       	lddsp	r8,sp[0x4]
80011098:	10 3a       	cp.w	r10,r8
8001109a:	cb b3       	brcs	80011010 <__multiply+0x60>
8001109c:	c0 28       	rjmp	800110a0 <__multiply+0xf0>
8001109e:	20 17       	sub	r7,1
800110a0:	58 07       	cp.w	r7,0
800110a2:	e0 8a 00 05 	brle	800110ac <__multiply+0xfc>
800110a6:	09 48       	ld.w	r8,--r4
800110a8:	58 08       	cp.w	r8,0
800110aa:	cf a0       	breq	8001109e <__multiply+0xee>
800110ac:	99 47       	st.w	r12[0x10],r7
800110ae:	2f ed       	sub	sp,-8
800110b0:	d8 32       	popm	r0-r7,pc
800110b2:	00 00       	add	r0,r0
800110b4:	80 01       	ld.sh	r1,r0[0x0]
800110b6:	0d 18       	ld.sh	r8,r6++

800110b8 <__i2b>:
800110b8:	d4 21       	pushm	r4-r7,lr
800110ba:	16 97       	mov	r7,r11
800110bc:	30 1b       	mov	r11,1
800110be:	f0 1f 00 04 	mcall	800110cc <__i2b+0x14>
800110c2:	30 19       	mov	r9,1
800110c4:	99 57       	st.w	r12[0x14],r7
800110c6:	99 49       	st.w	r12[0x10],r9
800110c8:	d8 22       	popm	r4-r7,pc
800110ca:	00 00       	add	r0,r0
800110cc:	80 01       	ld.sh	r1,r0[0x0]
800110ce:	0d 18       	ld.sh	r8,r6++

800110d0 <__multadd>:
800110d0:	d4 31       	pushm	r0-r7,lr
800110d2:	30 08       	mov	r8,0
800110d4:	12 95       	mov	r5,r9
800110d6:	16 97       	mov	r7,r11
800110d8:	18 96       	mov	r6,r12
800110da:	76 44       	ld.w	r4,r11[0x10]
800110dc:	f6 c9 ff ec 	sub	r9,r11,-20
800110e0:	72 0b       	ld.w	r11,r9[0x0]
800110e2:	f6 0c 16 10 	lsr	r12,r11,0x10
800110e6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800110ea:	f4 0c 02 4c 	mul	r12,r10,r12
800110ee:	f4 0b 03 45 	mac	r5,r10,r11
800110f2:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
800110f6:	b1 85       	lsr	r5,0x10
800110f8:	18 05       	add	r5,r12
800110fa:	ea 0c 15 10 	lsl	r12,r5,0x10
800110fe:	f8 0b 00 0b 	add	r11,r12,r11
80011102:	12 ab       	st.w	r9++,r11
80011104:	2f f8       	sub	r8,-1
80011106:	b1 85       	lsr	r5,0x10
80011108:	08 38       	cp.w	r8,r4
8001110a:	ce b5       	brlt	800110e0 <__multadd+0x10>
8001110c:	58 05       	cp.w	r5,0
8001110e:	c1 d0       	breq	80011148 <__multadd+0x78>
80011110:	6e 28       	ld.w	r8,r7[0x8]
80011112:	10 34       	cp.w	r4,r8
80011114:	c1 45       	brlt	8001113c <__multadd+0x6c>
80011116:	6e 1b       	ld.w	r11,r7[0x4]
80011118:	0c 9c       	mov	r12,r6
8001111a:	2f fb       	sub	r11,-1
8001111c:	f0 1f 00 0c 	mcall	8001114c <__multadd+0x7c>
80011120:	6e 4a       	ld.w	r10,r7[0x10]
80011122:	ee cb ff f4 	sub	r11,r7,-12
80011126:	18 93       	mov	r3,r12
80011128:	2f ea       	sub	r10,-2
8001112a:	2f 4c       	sub	r12,-12
8001112c:	a3 6a       	lsl	r10,0x2
8001112e:	f0 1f 00 09 	mcall	80011150 <__multadd+0x80>
80011132:	0e 9b       	mov	r11,r7
80011134:	0c 9c       	mov	r12,r6
80011136:	f0 1f 00 08 	mcall	80011154 <__multadd+0x84>
8001113a:	06 97       	mov	r7,r3
8001113c:	e8 c8 ff ff 	sub	r8,r4,-1
80011140:	2f b4       	sub	r4,-5
80011142:	8f 48       	st.w	r7[0x10],r8
80011144:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80011148:	0e 9c       	mov	r12,r7
8001114a:	d8 32       	popm	r0-r7,pc
8001114c:	80 01       	ld.sh	r1,r0[0x0]
8001114e:	0d 18       	ld.sh	r8,r6++
80011150:	80 00       	ld.sh	r0,r0[0x0]
80011152:	ca f6       	brmi	800110b0 <__multiply+0x100>
80011154:	80 01       	ld.sh	r1,r0[0x0]
80011156:	0c e0       	st.h	--r6,r0

80011158 <__pow5mult>:
80011158:	d4 31       	pushm	r0-r7,lr
8001115a:	14 96       	mov	r6,r10
8001115c:	18 97       	mov	r7,r12
8001115e:	16 94       	mov	r4,r11
80011160:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80011164:	c0 90       	breq	80011176 <__pow5mult+0x1e>
80011166:	20 18       	sub	r8,1
80011168:	4a 19       	lddpc	r9,800111ec <__pow5mult+0x94>
8001116a:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8001116e:	30 09       	mov	r9,0
80011170:	f0 1f 00 20 	mcall	800111f0 <__pow5mult+0x98>
80011174:	18 94       	mov	r4,r12
80011176:	a3 46       	asr	r6,0x2
80011178:	c3 70       	breq	800111e6 <__pow5mult+0x8e>
8001117a:	6e 95       	ld.w	r5,r7[0x24]
8001117c:	58 05       	cp.w	r5,0
8001117e:	c0 91       	brne	80011190 <__pow5mult+0x38>
80011180:	31 0c       	mov	r12,16
80011182:	f0 1f 00 1d 	mcall	800111f4 <__pow5mult+0x9c>
80011186:	99 35       	st.w	r12[0xc],r5
80011188:	8f 9c       	st.w	r7[0x24],r12
8001118a:	99 15       	st.w	r12[0x4],r5
8001118c:	99 25       	st.w	r12[0x8],r5
8001118e:	99 05       	st.w	r12[0x0],r5
80011190:	6e 93       	ld.w	r3,r7[0x24]
80011192:	66 25       	ld.w	r5,r3[0x8]
80011194:	58 05       	cp.w	r5,0
80011196:	c0 d1       	brne	800111b0 <__pow5mult+0x58>
80011198:	e0 6b 02 71 	mov	r11,625
8001119c:	0e 9c       	mov	r12,r7
8001119e:	f0 1f 00 17 	mcall	800111f8 <__pow5mult+0xa0>
800111a2:	87 2c       	st.w	r3[0x8],r12
800111a4:	30 08       	mov	r8,0
800111a6:	18 95       	mov	r5,r12
800111a8:	99 08       	st.w	r12[0x0],r8
800111aa:	c0 38       	rjmp	800111b0 <__pow5mult+0x58>
800111ac:	06 9c       	mov	r12,r3
800111ae:	18 95       	mov	r5,r12
800111b0:	ed b6 00 00 	bld	r6,0x0
800111b4:	c0 c1       	brne	800111cc <__pow5mult+0x74>
800111b6:	08 9b       	mov	r11,r4
800111b8:	0a 9a       	mov	r10,r5
800111ba:	0e 9c       	mov	r12,r7
800111bc:	f0 1f 00 10 	mcall	800111fc <__pow5mult+0xa4>
800111c0:	08 9b       	mov	r11,r4
800111c2:	18 93       	mov	r3,r12
800111c4:	0e 9c       	mov	r12,r7
800111c6:	06 94       	mov	r4,r3
800111c8:	f0 1f 00 0e 	mcall	80011200 <__pow5mult+0xa8>
800111cc:	a1 56       	asr	r6,0x1
800111ce:	c0 c0       	breq	800111e6 <__pow5mult+0x8e>
800111d0:	6a 03       	ld.w	r3,r5[0x0]
800111d2:	58 03       	cp.w	r3,0
800111d4:	ce c1       	brne	800111ac <__pow5mult+0x54>
800111d6:	0a 9a       	mov	r10,r5
800111d8:	0a 9b       	mov	r11,r5
800111da:	0e 9c       	mov	r12,r7
800111dc:	f0 1f 00 08 	mcall	800111fc <__pow5mult+0xa4>
800111e0:	8b 0c       	st.w	r5[0x0],r12
800111e2:	99 03       	st.w	r12[0x0],r3
800111e4:	ce 5b       	rjmp	800111ae <__pow5mult+0x56>
800111e6:	08 9c       	mov	r12,r4
800111e8:	d8 32       	popm	r0-r7,pc
800111ea:	00 00       	add	r0,r0
800111ec:	80 01       	ld.sh	r1,r0[0x0]
800111ee:	29 e4       	sub	r4,-98
800111f0:	80 01       	ld.sh	r1,r0[0x0]
800111f2:	10 d0       	st.w	--r8,r0
800111f4:	80 01       	ld.sh	r1,r0[0x0]
800111f6:	07 00       	ld.w	r0,r3++
800111f8:	80 01       	ld.sh	r1,r0[0x0]
800111fa:	10 b8       	st.h	r8++,r8
800111fc:	80 01       	ld.sh	r1,r0[0x0]
800111fe:	0f b0       	ld.ub	r0,r7[0x3]
80011200:	80 01       	ld.sh	r1,r0[0x0]
80011202:	0c e0       	st.h	--r6,r0

80011204 <_realloc_r>:
80011204:	d4 31       	pushm	r0-r7,lr
80011206:	20 1d       	sub	sp,4
80011208:	16 94       	mov	r4,r11
8001120a:	18 92       	mov	r2,r12
8001120c:	14 9b       	mov	r11,r10
8001120e:	58 04       	cp.w	r4,0
80011210:	c0 51       	brne	8001121a <_realloc_r+0x16>
80011212:	f0 1f 00 5b 	mcall	8001137c <_realloc_r+0x178>
80011216:	18 95       	mov	r5,r12
80011218:	c5 b9       	rjmp	800114ce <_realloc_r+0x2ca>
8001121a:	50 0a       	stdsp	sp[0x0],r10
8001121c:	f0 1f 00 59 	mcall	80011380 <_realloc_r+0x17c>
80011220:	40 0b       	lddsp	r11,sp[0x0]
80011222:	f6 c8 ff f5 	sub	r8,r11,-11
80011226:	e8 c1 00 08 	sub	r1,r4,8
8001122a:	10 96       	mov	r6,r8
8001122c:	62 1c       	ld.w	r12,r1[0x4]
8001122e:	e0 16 ff f8 	andl	r6,0xfff8
80011232:	59 68       	cp.w	r8,22
80011234:	f9 b6 08 10 	movls	r6,16
80011238:	16 36       	cp.w	r6,r11
8001123a:	5f 38       	srlo	r8
8001123c:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80011240:	c0 50       	breq	8001124a <_realloc_r+0x46>
80011242:	30 c8       	mov	r8,12
80011244:	30 05       	mov	r5,0
80011246:	85 38       	st.w	r2[0xc],r8
80011248:	c4 39       	rjmp	800114ce <_realloc_r+0x2ca>
8001124a:	18 90       	mov	r0,r12
8001124c:	e0 10 ff fc 	andl	r0,0xfffc
80011250:	0c 30       	cp.w	r0,r6
80011252:	e0 84 01 13 	brge	80011478 <_realloc_r+0x274>
80011256:	4c c8       	lddpc	r8,80011384 <_realloc_r+0x180>
80011258:	e2 00 00 09 	add	r9,r1,r0
8001125c:	70 25       	ld.w	r5,r8[0x8]
8001125e:	0a 39       	cp.w	r9,r5
80011260:	c0 90       	breq	80011272 <_realloc_r+0x6e>
80011262:	72 1a       	ld.w	r10,r9[0x4]
80011264:	a1 ca       	cbr	r10,0x0
80011266:	f2 0a 00 0a 	add	r10,r9,r10
8001126a:	74 1a       	ld.w	r10,r10[0x4]
8001126c:	ed ba 00 00 	bld	r10,0x0
80011270:	c2 20       	breq	800112b4 <_realloc_r+0xb0>
80011272:	72 1a       	ld.w	r10,r9[0x4]
80011274:	e0 1a ff fc 	andl	r10,0xfffc
80011278:	f4 00 00 03 	add	r3,r10,r0
8001127c:	0a 39       	cp.w	r9,r5
8001127e:	c1 31       	brne	800112a4 <_realloc_r+0xa0>
80011280:	ec c7 ff f0 	sub	r7,r6,-16
80011284:	0e 33       	cp.w	r3,r7
80011286:	c1 95       	brlt	800112b8 <_realloc_r+0xb4>
80011288:	e2 06 00 09 	add	r9,r1,r6
8001128c:	0c 13       	sub	r3,r6
8001128e:	a1 a3       	sbr	r3,0x0
80011290:	93 13       	st.w	r9[0x4],r3
80011292:	91 29       	st.w	r8[0x8],r9
80011294:	04 9c       	mov	r12,r2
80011296:	62 18       	ld.w	r8,r1[0x4]
80011298:	08 95       	mov	r5,r4
8001129a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001129e:	10 46       	or	r6,r8
800112a0:	83 16       	st.w	r1[0x4],r6
800112a2:	c1 49       	rjmp	800114ca <_realloc_r+0x2c6>
800112a4:	0c 33       	cp.w	r3,r6
800112a6:	c0 95       	brlt	800112b8 <_realloc_r+0xb4>
800112a8:	72 28       	ld.w	r8,r9[0x8]
800112aa:	02 97       	mov	r7,r1
800112ac:	72 39       	ld.w	r9,r9[0xc]
800112ae:	93 28       	st.w	r9[0x8],r8
800112b0:	91 39       	st.w	r8[0xc],r9
800112b2:	ce 58       	rjmp	8001147c <_realloc_r+0x278>
800112b4:	30 0a       	mov	r10,0
800112b6:	14 99       	mov	r9,r10
800112b8:	ed bc 00 00 	bld	r12,0x0
800112bc:	e0 80 00 9e 	breq	800113f8 <_realloc_r+0x1f4>
800112c0:	62 07       	ld.w	r7,r1[0x0]
800112c2:	e2 07 01 07 	sub	r7,r1,r7
800112c6:	6e 1c       	ld.w	r12,r7[0x4]
800112c8:	e0 1c ff fc 	andl	r12,0xfffc
800112cc:	58 09       	cp.w	r9,0
800112ce:	c5 f0       	breq	8001138c <_realloc_r+0x188>
800112d0:	f8 00 00 03 	add	r3,r12,r0
800112d4:	0a 39       	cp.w	r9,r5
800112d6:	c4 81       	brne	80011366 <_realloc_r+0x162>
800112d8:	14 03       	add	r3,r10
800112da:	ec c9 ff f0 	sub	r9,r6,-16
800112de:	12 33       	cp.w	r3,r9
800112e0:	c5 65       	brlt	8001138c <_realloc_r+0x188>
800112e2:	6e 3a       	ld.w	r10,r7[0xc]
800112e4:	6e 29       	ld.w	r9,r7[0x8]
800112e6:	95 29       	st.w	r10[0x8],r9
800112e8:	93 3a       	st.w	r9[0xc],r10
800112ea:	ee c5 ff f8 	sub	r5,r7,-8
800112ee:	e0 ca 00 04 	sub	r10,r0,4
800112f2:	e0 4a 00 24 	cp.w	r10,36
800112f6:	e0 8b 00 25 	brhi	80011340 <_realloc_r+0x13c>
800112fa:	0a 99       	mov	r9,r5
800112fc:	59 3a       	cp.w	r10,19
800112fe:	e0 88 00 1a 	brls	80011332 <_realloc_r+0x12e>
80011302:	09 09       	ld.w	r9,r4++
80011304:	8b 09       	st.w	r5[0x0],r9
80011306:	09 09       	ld.w	r9,r4++
80011308:	8f 39       	st.w	r7[0xc],r9
8001130a:	ee c9 ff f0 	sub	r9,r7,-16
8001130e:	59 ba       	cp.w	r10,27
80011310:	e0 88 00 11 	brls	80011332 <_realloc_r+0x12e>
80011314:	09 0b       	ld.w	r11,r4++
80011316:	93 0b       	st.w	r9[0x0],r11
80011318:	09 09       	ld.w	r9,r4++
8001131a:	8f 59       	st.w	r7[0x14],r9
8001131c:	ee c9 ff e8 	sub	r9,r7,-24
80011320:	e0 4a 00 24 	cp.w	r10,36
80011324:	c0 71       	brne	80011332 <_realloc_r+0x12e>
80011326:	09 0a       	ld.w	r10,r4++
80011328:	93 0a       	st.w	r9[0x0],r10
8001132a:	ee c9 ff e0 	sub	r9,r7,-32
8001132e:	09 0a       	ld.w	r10,r4++
80011330:	8f 7a       	st.w	r7[0x1c],r10
80011332:	09 0a       	ld.w	r10,r4++
80011334:	12 aa       	st.w	r9++,r10
80011336:	68 0a       	ld.w	r10,r4[0x0]
80011338:	93 0a       	st.w	r9[0x0],r10
8001133a:	68 1a       	ld.w	r10,r4[0x4]
8001133c:	93 1a       	st.w	r9[0x4],r10
8001133e:	c0 78       	rjmp	8001134c <_realloc_r+0x148>
80011340:	50 08       	stdsp	sp[0x0],r8
80011342:	08 9b       	mov	r11,r4
80011344:	0a 9c       	mov	r12,r5
80011346:	f0 1f 00 11 	mcall	80011388 <_realloc_r+0x184>
8001134a:	40 08       	lddsp	r8,sp[0x0]
8001134c:	ee 06 00 09 	add	r9,r7,r6
80011350:	0c 13       	sub	r3,r6
80011352:	a1 a3       	sbr	r3,0x0
80011354:	93 13       	st.w	r9[0x4],r3
80011356:	91 29       	st.w	r8[0x8],r9
80011358:	04 9c       	mov	r12,r2
8001135a:	6e 18       	ld.w	r8,r7[0x4]
8001135c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80011360:	10 46       	or	r6,r8
80011362:	8f 16       	st.w	r7[0x4],r6
80011364:	cb 38       	rjmp	800114ca <_realloc_r+0x2c6>
80011366:	14 03       	add	r3,r10
80011368:	0c 33       	cp.w	r3,r6
8001136a:	c1 15       	brlt	8001138c <_realloc_r+0x188>
8001136c:	72 28       	ld.w	r8,r9[0x8]
8001136e:	72 39       	ld.w	r9,r9[0xc]
80011370:	93 28       	st.w	r9[0x8],r8
80011372:	91 39       	st.w	r8[0xc],r9
80011374:	6e 28       	ld.w	r8,r7[0x8]
80011376:	6e 39       	ld.w	r9,r7[0xc]
80011378:	c1 08       	rjmp	80011398 <_realloc_r+0x194>
8001137a:	00 00       	add	r0,r0
8001137c:	80 01       	ld.sh	r1,r0[0x0]
8001137e:	07 18       	ld.sh	r8,r3++
80011380:	80 01       	ld.sh	r1,r0[0x0]
80011382:	0b bc       	ld.ub	r12,r5[0x3]
80011384:	00 00       	add	r0,r0
80011386:	01 ac       	ld.ub	r12,r0[0x2]
80011388:	80 01       	ld.sh	r1,r0[0x0]
8001138a:	0b 7e       	ld.ub	lr,--r5
8001138c:	f8 00 00 03 	add	r3,r12,r0
80011390:	0c 33       	cp.w	r3,r6
80011392:	c3 35       	brlt	800113f8 <_realloc_r+0x1f4>
80011394:	6e 39       	ld.w	r9,r7[0xc]
80011396:	6e 28       	ld.w	r8,r7[0x8]
80011398:	93 28       	st.w	r9[0x8],r8
8001139a:	91 39       	st.w	r8[0xc],r9
8001139c:	e0 ca 00 04 	sub	r10,r0,4
800113a0:	ee cc ff f8 	sub	r12,r7,-8
800113a4:	e0 4a 00 24 	cp.w	r10,36
800113a8:	e0 8b 00 24 	brhi	800113f0 <_realloc_r+0x1ec>
800113ac:	59 3a       	cp.w	r10,19
800113ae:	e0 88 00 1a 	brls	800113e2 <_realloc_r+0x1de>
800113b2:	09 08       	ld.w	r8,r4++
800113b4:	99 08       	st.w	r12[0x0],r8
800113b6:	09 08       	ld.w	r8,r4++
800113b8:	8f 38       	st.w	r7[0xc],r8
800113ba:	ee cc ff f0 	sub	r12,r7,-16
800113be:	59 ba       	cp.w	r10,27
800113c0:	e0 88 00 11 	brls	800113e2 <_realloc_r+0x1de>
800113c4:	09 08       	ld.w	r8,r4++
800113c6:	99 08       	st.w	r12[0x0],r8
800113c8:	09 08       	ld.w	r8,r4++
800113ca:	8f 58       	st.w	r7[0x14],r8
800113cc:	ee cc ff e8 	sub	r12,r7,-24
800113d0:	e0 4a 00 24 	cp.w	r10,36
800113d4:	c0 71       	brne	800113e2 <_realloc_r+0x1de>
800113d6:	09 08       	ld.w	r8,r4++
800113d8:	99 08       	st.w	r12[0x0],r8
800113da:	ee cc ff e0 	sub	r12,r7,-32
800113de:	09 08       	ld.w	r8,r4++
800113e0:	8f 78       	st.w	r7[0x1c],r8
800113e2:	09 08       	ld.w	r8,r4++
800113e4:	18 a8       	st.w	r12++,r8
800113e6:	68 08       	ld.w	r8,r4[0x0]
800113e8:	99 08       	st.w	r12[0x0],r8
800113ea:	68 18       	ld.w	r8,r4[0x4]
800113ec:	99 18       	st.w	r12[0x4],r8
800113ee:	c4 78       	rjmp	8001147c <_realloc_r+0x278>
800113f0:	08 9b       	mov	r11,r4
800113f2:	f0 1f 00 39 	mcall	800114d4 <_realloc_r+0x2d0>
800113f6:	c4 38       	rjmp	8001147c <_realloc_r+0x278>
800113f8:	04 9c       	mov	r12,r2
800113fa:	f0 1f 00 38 	mcall	800114d8 <_realloc_r+0x2d4>
800113fe:	18 95       	mov	r5,r12
80011400:	c3 a0       	breq	80011474 <_realloc_r+0x270>
80011402:	62 18       	ld.w	r8,r1[0x4]
80011404:	f8 c9 00 08 	sub	r9,r12,8
80011408:	a1 c8       	cbr	r8,0x0
8001140a:	e2 08 00 08 	add	r8,r1,r8
8001140e:	10 39       	cp.w	r9,r8
80011410:	c0 71       	brne	8001141e <_realloc_r+0x21a>
80011412:	72 13       	ld.w	r3,r9[0x4]
80011414:	02 97       	mov	r7,r1
80011416:	e0 13 ff fc 	andl	r3,0xfffc
8001141a:	00 03       	add	r3,r0
8001141c:	c3 08       	rjmp	8001147c <_realloc_r+0x278>
8001141e:	e0 ca 00 04 	sub	r10,r0,4
80011422:	e0 4a 00 24 	cp.w	r10,36
80011426:	e0 8b 00 20 	brhi	80011466 <_realloc_r+0x262>
8001142a:	08 99       	mov	r9,r4
8001142c:	18 98       	mov	r8,r12
8001142e:	59 3a       	cp.w	r10,19
80011430:	e0 88 00 14 	brls	80011458 <_realloc_r+0x254>
80011434:	13 0b       	ld.w	r11,r9++
80011436:	10 ab       	st.w	r8++,r11
80011438:	13 0b       	ld.w	r11,r9++
8001143a:	10 ab       	st.w	r8++,r11
8001143c:	59 ba       	cp.w	r10,27
8001143e:	e0 88 00 0d 	brls	80011458 <_realloc_r+0x254>
80011442:	13 0b       	ld.w	r11,r9++
80011444:	10 ab       	st.w	r8++,r11
80011446:	13 0b       	ld.w	r11,r9++
80011448:	10 ab       	st.w	r8++,r11
8001144a:	e0 4a 00 24 	cp.w	r10,36
8001144e:	c0 51       	brne	80011458 <_realloc_r+0x254>
80011450:	13 0a       	ld.w	r10,r9++
80011452:	10 aa       	st.w	r8++,r10
80011454:	13 0a       	ld.w	r10,r9++
80011456:	10 aa       	st.w	r8++,r10
80011458:	13 0a       	ld.w	r10,r9++
8001145a:	10 aa       	st.w	r8++,r10
8001145c:	72 0a       	ld.w	r10,r9[0x0]
8001145e:	91 0a       	st.w	r8[0x0],r10
80011460:	72 19       	ld.w	r9,r9[0x4]
80011462:	91 19       	st.w	r8[0x4],r9
80011464:	c0 48       	rjmp	8001146c <_realloc_r+0x268>
80011466:	08 9b       	mov	r11,r4
80011468:	f0 1f 00 1b 	mcall	800114d4 <_realloc_r+0x2d0>
8001146c:	08 9b       	mov	r11,r4
8001146e:	04 9c       	mov	r12,r2
80011470:	f0 1f 00 1b 	mcall	800114dc <_realloc_r+0x2d8>
80011474:	04 9c       	mov	r12,r2
80011476:	c2 a8       	rjmp	800114ca <_realloc_r+0x2c6>
80011478:	00 93       	mov	r3,r0
8001147a:	02 97       	mov	r7,r1
8001147c:	e6 06 01 09 	sub	r9,r3,r6
80011480:	6e 18       	ld.w	r8,r7[0x4]
80011482:	58 f9       	cp.w	r9,15
80011484:	e0 88 00 16 	brls	800114b0 <_realloc_r+0x2ac>
80011488:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001148c:	ed e8 10 08 	or	r8,r6,r8
80011490:	8f 18       	st.w	r7[0x4],r8
80011492:	12 98       	mov	r8,r9
80011494:	a1 a8       	sbr	r8,0x0
80011496:	ee 06 00 0b 	add	r11,r7,r6
8001149a:	f6 09 00 09 	add	r9,r11,r9
8001149e:	97 18       	st.w	r11[0x4],r8
800114a0:	72 18       	ld.w	r8,r9[0x4]
800114a2:	a1 a8       	sbr	r8,0x0
800114a4:	2f 8b       	sub	r11,-8
800114a6:	93 18       	st.w	r9[0x4],r8
800114a8:	04 9c       	mov	r12,r2
800114aa:	f0 1f 00 0d 	mcall	800114dc <_realloc_r+0x2d8>
800114ae:	c0 b8       	rjmp	800114c4 <_realloc_r+0x2c0>
800114b0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800114b4:	e7 e8 10 08 	or	r8,r3,r8
800114b8:	8f 18       	st.w	r7[0x4],r8
800114ba:	ee 03 00 03 	add	r3,r7,r3
800114be:	66 18       	ld.w	r8,r3[0x4]
800114c0:	a1 a8       	sbr	r8,0x0
800114c2:	87 18       	st.w	r3[0x4],r8
800114c4:	04 9c       	mov	r12,r2
800114c6:	ee c5 ff f8 	sub	r5,r7,-8
800114ca:	f0 1f 00 06 	mcall	800114e0 <_realloc_r+0x2dc>
800114ce:	0a 9c       	mov	r12,r5
800114d0:	2f fd       	sub	sp,-4
800114d2:	d8 32       	popm	r0-r7,pc
800114d4:	80 01       	ld.sh	r1,r0[0x0]
800114d6:	0b 7e       	ld.ub	lr,--r5
800114d8:	80 01       	ld.sh	r1,r0[0x0]
800114da:	07 18       	ld.sh	r8,r3++
800114dc:	80 01       	ld.sh	r1,r0[0x0]
800114de:	01 74       	ld.ub	r4,--r0
800114e0:	80 01       	ld.sh	r1,r0[0x0]
800114e2:	0b be       	ld.ub	lr,r5[0x3]

800114e4 <__isinfd>:
800114e4:	14 98       	mov	r8,r10
800114e6:	fc 19 7f f0 	movh	r9,0x7ff0
800114ea:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800114ee:	f0 0b 11 00 	rsub	r11,r8,0
800114f2:	f7 e8 10 08 	or	r8,r11,r8
800114f6:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800114fa:	f2 08 01 08 	sub	r8,r9,r8
800114fe:	f0 0c 11 00 	rsub	r12,r8,0
80011502:	f9 e8 10 08 	or	r8,r12,r8
80011506:	f0 0c 14 1f 	asr	r12,r8,0x1f
8001150a:	2f fc       	sub	r12,-1
8001150c:	5e fc       	retal	r12

8001150e <__isnand>:
8001150e:	14 98       	mov	r8,r10
80011510:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80011514:	f0 0c 11 00 	rsub	r12,r8,0
80011518:	10 4c       	or	r12,r8
8001151a:	fc 18 7f f0 	movh	r8,0x7ff0
8001151e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80011522:	f0 0c 01 0c 	sub	r12,r8,r12
80011526:	bf 9c       	lsr	r12,0x1f
80011528:	5e fc       	retal	r12
8001152a:	d7 03       	nop

8001152c <_sbrk_r>:
8001152c:	d4 21       	pushm	r4-r7,lr
8001152e:	30 08       	mov	r8,0
80011530:	18 97       	mov	r7,r12
80011532:	48 76       	lddpc	r6,8001154c <_sbrk_r+0x20>
80011534:	16 9c       	mov	r12,r11
80011536:	8d 08       	st.w	r6[0x0],r8
80011538:	f0 1f 00 06 	mcall	80011550 <_sbrk_r+0x24>
8001153c:	5b fc       	cp.w	r12,-1
8001153e:	c0 51       	brne	80011548 <_sbrk_r+0x1c>
80011540:	6c 08       	ld.w	r8,r6[0x0]
80011542:	58 08       	cp.w	r8,0
80011544:	ef f8 1a 03 	st.wne	r7[0xc],r8
80011548:	d8 22       	popm	r4-r7,pc
8001154a:	00 00       	add	r0,r0
8001154c:	00 00       	add	r0,r0
8001154e:	0d 94       	ld.ub	r4,r6[0x1]
80011550:	80 01       	ld.sh	r1,r0[0x0]
80011552:	16 c8       	st.b	r11++,r8

80011554 <__sclose>:
80011554:	d4 01       	pushm	lr
80011556:	96 7b       	ld.sh	r11,r11[0xe]
80011558:	f0 1f 00 02 	mcall	80011560 <__sclose+0xc>
8001155c:	d8 02       	popm	pc
8001155e:	00 00       	add	r0,r0
80011560:	80 01       	ld.sh	r1,r0[0x0]
80011562:	17 94       	ld.ub	r4,r11[0x1]

80011564 <__sseek>:
80011564:	d4 21       	pushm	r4-r7,lr
80011566:	16 97       	mov	r7,r11
80011568:	96 7b       	ld.sh	r11,r11[0xe]
8001156a:	f0 1f 00 08 	mcall	80011588 <__sseek+0x24>
8001156e:	8e 68       	ld.sh	r8,r7[0xc]
80011570:	10 99       	mov	r9,r8
80011572:	ad c8       	cbr	r8,0xc
80011574:	ad a9       	sbr	r9,0xc
80011576:	5b fc       	cp.w	r12,-1
80011578:	ef f8 0c 06 	st.heq	r7[0xc],r8
8001157c:	ef f9 1c 06 	st.hne	r7[0xc],r9
80011580:	ef fc 1a 15 	st.wne	r7[0x54],r12
80011584:	d8 22       	popm	r4-r7,pc
80011586:	00 00       	add	r0,r0
80011588:	80 01       	ld.sh	r1,r0[0x0]
8001158a:	18 dc       	st.w	--r12,r12

8001158c <__swrite>:
8001158c:	d4 21       	pushm	r4-r7,lr
8001158e:	96 68       	ld.sh	r8,r11[0xc]
80011590:	16 97       	mov	r7,r11
80011592:	14 95       	mov	r5,r10
80011594:	12 94       	mov	r4,r9
80011596:	e2 18 01 00 	andl	r8,0x100,COH
8001159a:	18 96       	mov	r6,r12
8001159c:	c0 60       	breq	800115a8 <__swrite+0x1c>
8001159e:	30 29       	mov	r9,2
800115a0:	30 0a       	mov	r10,0
800115a2:	96 7b       	ld.sh	r11,r11[0xe]
800115a4:	f0 1f 00 06 	mcall	800115bc <__swrite+0x30>
800115a8:	8e 68       	ld.sh	r8,r7[0xc]
800115aa:	ad c8       	cbr	r8,0xc
800115ac:	08 99       	mov	r9,r4
800115ae:	0a 9a       	mov	r10,r5
800115b0:	8e 7b       	ld.sh	r11,r7[0xe]
800115b2:	0c 9c       	mov	r12,r6
800115b4:	ae 68       	st.h	r7[0xc],r8
800115b6:	f0 1f 00 03 	mcall	800115c0 <__swrite+0x34>
800115ba:	d8 22       	popm	r4-r7,pc
800115bc:	80 01       	ld.sh	r1,r0[0x0]
800115be:	18 dc       	st.w	--r12,r12
800115c0:	80 01       	ld.sh	r1,r0[0x0]
800115c2:	17 08       	ld.w	r8,r11++

800115c4 <__sread>:
800115c4:	d4 21       	pushm	r4-r7,lr
800115c6:	16 97       	mov	r7,r11
800115c8:	96 7b       	ld.sh	r11,r11[0xe]
800115ca:	f0 1f 00 07 	mcall	800115e4 <__sread+0x20>
800115ce:	c0 65       	brlt	800115da <__sread+0x16>
800115d0:	6f 58       	ld.w	r8,r7[0x54]
800115d2:	18 08       	add	r8,r12
800115d4:	ef 48 00 54 	st.w	r7[84],r8
800115d8:	d8 22       	popm	r4-r7,pc
800115da:	8e 68       	ld.sh	r8,r7[0xc]
800115dc:	ad c8       	cbr	r8,0xc
800115de:	ae 68       	st.h	r7[0xc],r8
800115e0:	d8 22       	popm	r4-r7,pc
800115e2:	00 00       	add	r0,r0
800115e4:	80 01       	ld.sh	r1,r0[0x0]
800115e6:	19 08       	ld.w	r8,r12++

800115e8 <_close>:
800115e8:	30 28       	mov	r8,2
800115ea:	d6 73       	breakpoint
800115ec:	3f fc       	mov	r12,-1
800115ee:	35 8b       	mov	r11,88
800115f0:	58 0c       	cp.w	r12,0
800115f2:	5e 4c       	retge	r12
800115f4:	48 2a       	lddpc	r10,800115fc <_close+0x14>
800115f6:	95 0b       	st.w	r10[0x0],r11
800115f8:	5e fc       	retal	r12
800115fa:	00 00       	add	r0,r0
800115fc:	00 00       	add	r0,r0
800115fe:	0d 94       	ld.ub	r4,r6[0x1]

80011600 <_lseek>:
80011600:	30 58       	mov	r8,5
80011602:	d6 73       	breakpoint
80011604:	3f fc       	mov	r12,-1
80011606:	35 8b       	mov	r11,88
80011608:	58 0c       	cp.w	r12,0
8001160a:	5e 4c       	retge	r12
8001160c:	48 2a       	lddpc	r10,80011614 <_lseek+0x14>
8001160e:	95 0b       	st.w	r10[0x0],r11
80011610:	5e fc       	retal	r12
80011612:	00 00       	add	r0,r0
80011614:	00 00       	add	r0,r0
80011616:	0d 94       	ld.ub	r4,r6[0x1]

80011618 <_read>:
80011618:	30 38       	mov	r8,3
8001161a:	d6 73       	breakpoint
8001161c:	3f fc       	mov	r12,-1
8001161e:	35 8b       	mov	r11,88
80011620:	58 0c       	cp.w	r12,0
80011622:	5e 4c       	retge	r12
80011624:	48 2a       	lddpc	r10,8001162c <_read+0x14>
80011626:	95 0b       	st.w	r10[0x0],r11
80011628:	5e fc       	retal	r12
8001162a:	00 00       	add	r0,r0
8001162c:	00 00       	add	r0,r0
8001162e:	0d 94       	ld.ub	r4,r6[0x1]

80011630 <_write>:
80011630:	30 48       	mov	r8,4
80011632:	d6 73       	breakpoint
80011634:	3f fc       	mov	r12,-1
80011636:	35 8b       	mov	r11,88
80011638:	58 0c       	cp.w	r12,0
8001163a:	5e 4c       	retge	r12
8001163c:	48 2a       	lddpc	r10,80011644 <_write+0x14>
8001163e:	95 0b       	st.w	r10[0x0],r11
80011640:	5e fc       	retal	r12
80011642:	00 00       	add	r0,r0
80011644:	00 00       	add	r0,r0
80011646:	0d 94       	ld.ub	r4,r6[0x1]

80011648 <isatty>:
80011648:	30 b8       	mov	r8,11
8001164a:	d6 73       	breakpoint
8001164c:	3f fc       	mov	r12,-1
8001164e:	35 8b       	mov	r11,88
80011650:	58 0c       	cp.w	r12,0
80011652:	5e 4c       	retge	r12
80011654:	48 2a       	lddpc	r10,8001165c <isatty+0x14>
80011656:	95 0b       	st.w	r10[0x0],r11
80011658:	5e fc       	retal	r12
8001165a:	00 00       	add	r0,r0
8001165c:	00 00       	add	r0,r0
8001165e:	0d 94       	ld.ub	r4,r6[0x1]

80011660 <_fstat_host>:
80011660:	30 98       	mov	r8,9
80011662:	d6 73       	breakpoint
80011664:	3f fc       	mov	r12,-1
80011666:	35 8b       	mov	r11,88
80011668:	58 0c       	cp.w	r12,0
8001166a:	5e 4c       	retge	r12
8001166c:	48 2a       	lddpc	r10,80011674 <_fstat_host+0x14>
8001166e:	95 0b       	st.w	r10[0x0],r11
80011670:	5e fc       	retal	r12
80011672:	00 00       	add	r0,r0
80011674:	00 00       	add	r0,r0
80011676:	0d 94       	ld.ub	r4,r6[0x1]

80011678 <_fstat>:
80011678:	d4 21       	pushm	r4-r7,lr
8001167a:	21 0d       	sub	sp,64
8001167c:	16 97       	mov	r7,r11
8001167e:	1a 9b       	mov	r11,sp
80011680:	f0 1f 00 11 	mcall	800116c4 <_fstat+0x4c>
80011684:	c0 34       	brge	8001168a <_fstat+0x12>
80011686:	3f fc       	mov	r12,-1
80011688:	c1 c8       	rjmp	800116c0 <_fstat+0x48>
8001168a:	40 08       	lddsp	r8,sp[0x0]
8001168c:	ae 08       	st.h	r7[0x0],r8
8001168e:	40 18       	lddsp	r8,sp[0x4]
80011690:	ae 18       	st.h	r7[0x2],r8
80011692:	40 28       	lddsp	r8,sp[0x8]
80011694:	8f 18       	st.w	r7[0x4],r8
80011696:	40 38       	lddsp	r8,sp[0xc]
80011698:	ae 48       	st.h	r7[0x8],r8
8001169a:	40 48       	lddsp	r8,sp[0x10]
8001169c:	ae 58       	st.h	r7[0xa],r8
8001169e:	40 58       	lddsp	r8,sp[0x14]
800116a0:	ae 68       	st.h	r7[0xc],r8
800116a2:	40 68       	lddsp	r8,sp[0x18]
800116a4:	ae 78       	st.h	r7[0xe],r8
800116a6:	40 88       	lddsp	r8,sp[0x20]
800116a8:	8f 48       	st.w	r7[0x10],r8
800116aa:	40 a8       	lddsp	r8,sp[0x28]
800116ac:	8f b8       	st.w	r7[0x2c],r8
800116ae:	40 c8       	lddsp	r8,sp[0x30]
800116b0:	8f c8       	st.w	r7[0x30],r8
800116b2:	40 d8       	lddsp	r8,sp[0x34]
800116b4:	8f 58       	st.w	r7[0x14],r8
800116b6:	40 e8       	lddsp	r8,sp[0x38]
800116b8:	30 0c       	mov	r12,0
800116ba:	8f 78       	st.w	r7[0x1c],r8
800116bc:	40 f8       	lddsp	r8,sp[0x3c]
800116be:	8f 98       	st.w	r7[0x24],r8
800116c0:	2f 0d       	sub	sp,-64
800116c2:	d8 22       	popm	r4-r7,pc
800116c4:	80 01       	ld.sh	r1,r0[0x0]
800116c6:	16 60       	and	r0,r11

800116c8 <_sbrk>:
800116c8:	d4 01       	pushm	lr
800116ca:	48 c8       	lddpc	r8,800116f8 <_sbrk+0x30>
800116cc:	70 09       	ld.w	r9,r8[0x0]
800116ce:	58 09       	cp.w	r9,0
800116d0:	c0 31       	brne	800116d6 <_sbrk+0xe>
800116d2:	48 b9       	lddpc	r9,800116fc <_sbrk+0x34>
800116d4:	91 09       	st.w	r8[0x0],r9
800116d6:	48 99       	lddpc	r9,800116f8 <_sbrk+0x30>
800116d8:	48 aa       	lddpc	r10,80011700 <_sbrk+0x38>
800116da:	72 08       	ld.w	r8,r9[0x0]
800116dc:	f0 0c 00 0c 	add	r12,r8,r12
800116e0:	14 3c       	cp.w	r12,r10
800116e2:	e0 8b 00 04 	brhi	800116ea <_sbrk+0x22>
800116e6:	93 0c       	st.w	r9[0x0],r12
800116e8:	c0 68       	rjmp	800116f4 <_sbrk+0x2c>
800116ea:	f0 1f 00 07 	mcall	80011704 <_sbrk+0x3c>
800116ee:	30 c8       	mov	r8,12
800116f0:	99 08       	st.w	r12[0x0],r8
800116f2:	3f f8       	mov	r8,-1
800116f4:	10 9c       	mov	r12,r8
800116f6:	d8 02       	popm	pc
800116f8:	00 00       	add	r0,r0
800116fa:	08 0c       	add	r12,r4
800116fc:	00 00       	add	r0,r0
800116fe:	0d 98       	ld.ub	r8,r6[0x1]
80011700:	00 00       	add	r0,r0
80011702:	f0 00       	*unknown*
80011704:	80 01       	ld.sh	r1,r0[0x0]
80011706:	17 bc       	ld.ub	r12,r11[0x3]

80011708 <_write_r>:
80011708:	d4 21       	pushm	r4-r7,lr
8001170a:	16 98       	mov	r8,r11
8001170c:	18 97       	mov	r7,r12
8001170e:	10 9c       	mov	r12,r8
80011710:	30 08       	mov	r8,0
80011712:	14 9b       	mov	r11,r10
80011714:	48 66       	lddpc	r6,8001172c <_write_r+0x24>
80011716:	12 9a       	mov	r10,r9
80011718:	8d 08       	st.w	r6[0x0],r8
8001171a:	f0 1f 00 06 	mcall	80011730 <_write_r+0x28>
8001171e:	5b fc       	cp.w	r12,-1
80011720:	c0 51       	brne	8001172a <_write_r+0x22>
80011722:	6c 08       	ld.w	r8,r6[0x0]
80011724:	58 08       	cp.w	r8,0
80011726:	ef f8 1a 03 	st.wne	r7[0xc],r8
8001172a:	d8 22       	popm	r4-r7,pc
8001172c:	00 00       	add	r0,r0
8001172e:	0d 94       	ld.ub	r4,r6[0x1]
80011730:	80 01       	ld.sh	r1,r0[0x0]
80011732:	16 30       	cp.w	r0,r11

80011734 <_calloc_r>:
80011734:	d4 21       	pushm	r4-r7,lr
80011736:	f4 0b 02 4b 	mul	r11,r10,r11
8001173a:	f0 1f 00 15 	mcall	8001178c <_calloc_r+0x58>
8001173e:	18 97       	mov	r7,r12
80011740:	c2 30       	breq	80011786 <_calloc_r+0x52>
80011742:	f8 fa ff fc 	ld.w	r10,r12[-4]
80011746:	e0 1a ff fc 	andl	r10,0xfffc
8001174a:	20 4a       	sub	r10,4
8001174c:	e0 4a 00 24 	cp.w	r10,36
80011750:	e0 8b 00 18 	brhi	80011780 <_calloc_r+0x4c>
80011754:	18 98       	mov	r8,r12
80011756:	59 3a       	cp.w	r10,19
80011758:	e0 88 00 0f 	brls	80011776 <_calloc_r+0x42>
8001175c:	30 09       	mov	r9,0
8001175e:	10 a9       	st.w	r8++,r9
80011760:	10 a9       	st.w	r8++,r9
80011762:	59 ba       	cp.w	r10,27
80011764:	e0 88 00 09 	brls	80011776 <_calloc_r+0x42>
80011768:	10 a9       	st.w	r8++,r9
8001176a:	10 a9       	st.w	r8++,r9
8001176c:	e0 4a 00 24 	cp.w	r10,36
80011770:	c0 31       	brne	80011776 <_calloc_r+0x42>
80011772:	10 a9       	st.w	r8++,r9
80011774:	10 a9       	st.w	r8++,r9
80011776:	30 09       	mov	r9,0
80011778:	10 a9       	st.w	r8++,r9
8001177a:	91 19       	st.w	r8[0x4],r9
8001177c:	91 09       	st.w	r8[0x0],r9
8001177e:	c0 48       	rjmp	80011786 <_calloc_r+0x52>
80011780:	30 0b       	mov	r11,0
80011782:	f0 1f 00 04 	mcall	80011790 <_calloc_r+0x5c>
80011786:	0e 9c       	mov	r12,r7
80011788:	d8 22       	popm	r4-r7,pc
8001178a:	00 00       	add	r0,r0
8001178c:	80 01       	ld.sh	r1,r0[0x0]
8001178e:	07 18       	ld.sh	r8,r3++
80011790:	80 00       	ld.sh	r0,r0[0x0]
80011792:	cc 3e       	rcall	80011518 <__isnand+0xa>

80011794 <_close_r>:
80011794:	d4 21       	pushm	r4-r7,lr
80011796:	30 08       	mov	r8,0
80011798:	18 97       	mov	r7,r12
8001179a:	48 76       	lddpc	r6,800117b4 <_close_r+0x20>
8001179c:	16 9c       	mov	r12,r11
8001179e:	8d 08       	st.w	r6[0x0],r8
800117a0:	f0 1f 00 06 	mcall	800117b8 <_close_r+0x24>
800117a4:	5b fc       	cp.w	r12,-1
800117a6:	c0 51       	brne	800117b0 <_close_r+0x1c>
800117a8:	6c 08       	ld.w	r8,r6[0x0]
800117aa:	58 08       	cp.w	r8,0
800117ac:	ef f8 1a 03 	st.wne	r7[0xc],r8
800117b0:	d8 22       	popm	r4-r7,pc
800117b2:	00 00       	add	r0,r0
800117b4:	00 00       	add	r0,r0
800117b6:	0d 94       	ld.ub	r4,r6[0x1]
800117b8:	80 01       	ld.sh	r1,r0[0x0]
800117ba:	15 e8       	ld.ub	r8,r10[0x6]

800117bc <__errno>:
800117bc:	48 28       	lddpc	r8,800117c4 <__errno+0x8>
800117be:	70 0c       	ld.w	r12,r8[0x0]
800117c0:	2f 4c       	sub	r12,-12
800117c2:	5e fc       	retal	r12
800117c4:	00 00       	add	r0,r0
800117c6:	01 a8       	ld.ub	r8,r0[0x2]

800117c8 <_fclose_r>:
800117c8:	d4 21       	pushm	r4-r7,lr
800117ca:	18 96       	mov	r6,r12
800117cc:	16 97       	mov	r7,r11
800117ce:	58 0b       	cp.w	r11,0
800117d0:	c0 31       	brne	800117d6 <_fclose_r+0xe>
800117d2:	16 95       	mov	r5,r11
800117d4:	c5 08       	rjmp	80011874 <_fclose_r+0xac>
800117d6:	f0 1f 00 29 	mcall	80011878 <_fclose_r+0xb0>
800117da:	58 06       	cp.w	r6,0
800117dc:	c0 70       	breq	800117ea <_fclose_r+0x22>
800117de:	6c 68       	ld.w	r8,r6[0x18]
800117e0:	58 08       	cp.w	r8,0
800117e2:	c0 41       	brne	800117ea <_fclose_r+0x22>
800117e4:	0c 9c       	mov	r12,r6
800117e6:	f0 1f 00 26 	mcall	8001187c <_fclose_r+0xb4>
800117ea:	4a 68       	lddpc	r8,80011880 <_fclose_r+0xb8>
800117ec:	10 37       	cp.w	r7,r8
800117ee:	c0 31       	brne	800117f4 <_fclose_r+0x2c>
800117f0:	6c 07       	ld.w	r7,r6[0x0]
800117f2:	c0 a8       	rjmp	80011806 <_fclose_r+0x3e>
800117f4:	4a 48       	lddpc	r8,80011884 <_fclose_r+0xbc>
800117f6:	10 37       	cp.w	r7,r8
800117f8:	c0 31       	brne	800117fe <_fclose_r+0x36>
800117fa:	6c 17       	ld.w	r7,r6[0x4]
800117fc:	c0 58       	rjmp	80011806 <_fclose_r+0x3e>
800117fe:	4a 38       	lddpc	r8,80011888 <_fclose_r+0xc0>
80011800:	10 37       	cp.w	r7,r8
80011802:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80011806:	8e 69       	ld.sh	r9,r7[0xc]
80011808:	30 08       	mov	r8,0
8001180a:	f0 09 19 00 	cp.h	r9,r8
8001180e:	c0 51       	brne	80011818 <_fclose_r+0x50>
80011810:	f0 1f 00 1f 	mcall	8001188c <_fclose_r+0xc4>
80011814:	30 05       	mov	r5,0
80011816:	c2 f8       	rjmp	80011874 <_fclose_r+0xac>
80011818:	0e 9b       	mov	r11,r7
8001181a:	0c 9c       	mov	r12,r6
8001181c:	f0 1f 00 1d 	mcall	80011890 <_fclose_r+0xc8>
80011820:	6e c8       	ld.w	r8,r7[0x30]
80011822:	18 95       	mov	r5,r12
80011824:	58 08       	cp.w	r8,0
80011826:	c0 60       	breq	80011832 <_fclose_r+0x6a>
80011828:	6e 8b       	ld.w	r11,r7[0x20]
8001182a:	0c 9c       	mov	r12,r6
8001182c:	5d 18       	icall	r8
8001182e:	f9 b5 05 ff 	movlt	r5,-1
80011832:	8e 68       	ld.sh	r8,r7[0xc]
80011834:	ed b8 00 07 	bld	r8,0x7
80011838:	c0 51       	brne	80011842 <_fclose_r+0x7a>
8001183a:	6e 4b       	ld.w	r11,r7[0x10]
8001183c:	0c 9c       	mov	r12,r6
8001183e:	f0 1f 00 16 	mcall	80011894 <_fclose_r+0xcc>
80011842:	6e db       	ld.w	r11,r7[0x34]
80011844:	58 0b       	cp.w	r11,0
80011846:	c0 a0       	breq	8001185a <_fclose_r+0x92>
80011848:	ee c8 ff bc 	sub	r8,r7,-68
8001184c:	10 3b       	cp.w	r11,r8
8001184e:	c0 40       	breq	80011856 <_fclose_r+0x8e>
80011850:	0c 9c       	mov	r12,r6
80011852:	f0 1f 00 11 	mcall	80011894 <_fclose_r+0xcc>
80011856:	30 08       	mov	r8,0
80011858:	8f d8       	st.w	r7[0x34],r8
8001185a:	6f 2b       	ld.w	r11,r7[0x48]
8001185c:	58 0b       	cp.w	r11,0
8001185e:	c0 70       	breq	8001186c <_fclose_r+0xa4>
80011860:	0c 9c       	mov	r12,r6
80011862:	f0 1f 00 0d 	mcall	80011894 <_fclose_r+0xcc>
80011866:	30 08       	mov	r8,0
80011868:	ef 48 00 48 	st.w	r7[72],r8
8001186c:	30 08       	mov	r8,0
8001186e:	ae 68       	st.h	r7[0xc],r8
80011870:	f0 1f 00 07 	mcall	8001188c <_fclose_r+0xc4>
80011874:	0a 9c       	mov	r12,r5
80011876:	d8 22       	popm	r4-r7,pc
80011878:	80 00       	ld.sh	r0,r0[0x0]
8001187a:	ff 58 80 01 	st.h	pc[-32767],r8
8001187e:	00 1c       	sub	r12,r0
80011880:	80 01       	ld.sh	r1,r0[0x0]
80011882:	29 3c       	sub	r12,-109
80011884:	80 01       	ld.sh	r1,r0[0x0]
80011886:	29 5c       	sub	r12,-107
80011888:	80 01       	ld.sh	r1,r0[0x0]
8001188a:	29 7c       	sub	r12,-105
8001188c:	80 00       	ld.sh	r0,r0[0x0]
8001188e:	ff 5a 80 00 	st.h	pc[-32768],r10
80011892:	fe 40 80 01 	cp.w	r0,-98303
80011896:	01 74       	ld.ub	r4,--r0

80011898 <fclose>:
80011898:	d4 01       	pushm	lr
8001189a:	48 48       	lddpc	r8,800118a8 <fclose+0x10>
8001189c:	18 9b       	mov	r11,r12
8001189e:	70 0c       	ld.w	r12,r8[0x0]
800118a0:	f0 1f 00 03 	mcall	800118ac <fclose+0x14>
800118a4:	d8 02       	popm	pc
800118a6:	00 00       	add	r0,r0
800118a8:	00 00       	add	r0,r0
800118aa:	01 a8       	ld.ub	r8,r0[0x2]
800118ac:	80 01       	ld.sh	r1,r0[0x0]
800118ae:	17 c8       	ld.ub	r8,r11[0x4]

800118b0 <_fstat_r>:
800118b0:	d4 21       	pushm	r4-r7,lr
800118b2:	16 98       	mov	r8,r11
800118b4:	18 97       	mov	r7,r12
800118b6:	10 9c       	mov	r12,r8
800118b8:	30 08       	mov	r8,0
800118ba:	48 76       	lddpc	r6,800118d4 <_fstat_r+0x24>
800118bc:	14 9b       	mov	r11,r10
800118be:	8d 08       	st.w	r6[0x0],r8
800118c0:	f0 1f 00 06 	mcall	800118d8 <_fstat_r+0x28>
800118c4:	5b fc       	cp.w	r12,-1
800118c6:	c0 51       	brne	800118d0 <_fstat_r+0x20>
800118c8:	6c 08       	ld.w	r8,r6[0x0]
800118ca:	58 08       	cp.w	r8,0
800118cc:	ef f8 1a 03 	st.wne	r7[0xc],r8
800118d0:	d8 22       	popm	r4-r7,pc
800118d2:	00 00       	add	r0,r0
800118d4:	00 00       	add	r0,r0
800118d6:	0d 94       	ld.ub	r4,r6[0x1]
800118d8:	80 01       	ld.sh	r1,r0[0x0]
800118da:	16 78       	tst	r8,r11

800118dc <_lseek_r>:
800118dc:	d4 21       	pushm	r4-r7,lr
800118de:	16 98       	mov	r8,r11
800118e0:	18 97       	mov	r7,r12
800118e2:	10 9c       	mov	r12,r8
800118e4:	30 08       	mov	r8,0
800118e6:	14 9b       	mov	r11,r10
800118e8:	48 66       	lddpc	r6,80011900 <_lseek_r+0x24>
800118ea:	12 9a       	mov	r10,r9
800118ec:	8d 08       	st.w	r6[0x0],r8
800118ee:	f0 1f 00 06 	mcall	80011904 <_lseek_r+0x28>
800118f2:	5b fc       	cp.w	r12,-1
800118f4:	c0 51       	brne	800118fe <_lseek_r+0x22>
800118f6:	6c 08       	ld.w	r8,r6[0x0]
800118f8:	58 08       	cp.w	r8,0
800118fa:	ef f8 1a 03 	st.wne	r7[0xc],r8
800118fe:	d8 22       	popm	r4-r7,pc
80011900:	00 00       	add	r0,r0
80011902:	0d 94       	ld.ub	r4,r6[0x1]
80011904:	80 01       	ld.sh	r1,r0[0x0]
80011906:	16 00       	add	r0,r11

80011908 <_read_r>:
80011908:	d4 21       	pushm	r4-r7,lr
8001190a:	16 98       	mov	r8,r11
8001190c:	18 97       	mov	r7,r12
8001190e:	10 9c       	mov	r12,r8
80011910:	30 08       	mov	r8,0
80011912:	14 9b       	mov	r11,r10
80011914:	48 66       	lddpc	r6,8001192c <_read_r+0x24>
80011916:	12 9a       	mov	r10,r9
80011918:	8d 08       	st.w	r6[0x0],r8
8001191a:	f0 1f 00 06 	mcall	80011930 <_read_r+0x28>
8001191e:	5b fc       	cp.w	r12,-1
80011920:	c0 51       	brne	8001192a <_read_r+0x22>
80011922:	6c 08       	ld.w	r8,r6[0x0]
80011924:	58 08       	cp.w	r8,0
80011926:	ef f8 1a 03 	st.wne	r7[0xc],r8
8001192a:	d8 22       	popm	r4-r7,pc
8001192c:	00 00       	add	r0,r0
8001192e:	0d 94       	ld.ub	r4,r6[0x1]
80011930:	80 01       	ld.sh	r1,r0[0x0]
80011932:	16 18       	sub	r8,r11

80011934 <__avr32_f64_to_u32>:
80011934:	58 0b       	cp.w	r11,0
80011936:	5e 6d       	retmi	0

80011938 <__avr32_f64_to_s32>:
80011938:	f6 0c 15 01 	lsl	r12,r11,0x1
8001193c:	b5 9c       	lsr	r12,0x15
8001193e:	e0 2c 03 ff 	sub	r12,1023
80011942:	5e 3d       	retlo	0
80011944:	f8 0c 11 1f 	rsub	r12,r12,31
80011948:	16 99       	mov	r9,r11
8001194a:	ab 7b       	lsl	r11,0xb
8001194c:	bf bb       	sbr	r11,0x1f
8001194e:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80011952:	f6 0c 0a 4b 	lsr	r11,r11,r12
80011956:	a1 79       	lsl	r9,0x1
80011958:	5e 2b       	reths	r11
8001195a:	5c 3b       	neg	r11
8001195c:	5e fb       	retal	r11

8001195e <__avr32_f64_cmp_eq>:
8001195e:	10 3a       	cp.w	r10,r8
80011960:	f2 0b 13 00 	cpc	r11,r9
80011964:	c0 80       	breq	80011974 <__avr32_f64_cmp_eq+0x16>
80011966:	a1 7b       	lsl	r11,0x1
80011968:	a1 79       	lsl	r9,0x1
8001196a:	14 4b       	or	r11,r10
8001196c:	12 4b       	or	r11,r9
8001196e:	10 4b       	or	r11,r8
80011970:	5e 0f       	reteq	1
80011972:	5e fd       	retal	0
80011974:	a1 7b       	lsl	r11,0x1
80011976:	fc 1c ff e0 	movh	r12,0xffe0
8001197a:	58 0a       	cp.w	r10,0
8001197c:	f8 0b 13 00 	cpc	r11,r12
80011980:	5e 8f       	retls	1
80011982:	5e fd       	retal	0

80011984 <__avr32_f64_cmp_ge>:
80011984:	1a de       	st.w	--sp,lr
80011986:	1a d7       	st.w	--sp,r7
80011988:	a1 7b       	lsl	r11,0x1
8001198a:	5f 3c       	srlo	r12
8001198c:	a1 79       	lsl	r9,0x1
8001198e:	5f 37       	srlo	r7
80011990:	5c fc       	rol	r12
80011992:	fc 1e ff e0 	movh	lr,0xffe0
80011996:	58 0a       	cp.w	r10,0
80011998:	fc 0b 13 00 	cpc	r11,lr
8001199c:	e0 8b 00 1d 	brhi	800119d6 <__avr32_f64_cmp_ge+0x52>
800119a0:	58 08       	cp.w	r8,0
800119a2:	fc 09 13 00 	cpc	r9,lr
800119a6:	e0 8b 00 18 	brhi	800119d6 <__avr32_f64_cmp_ge+0x52>
800119aa:	58 0b       	cp.w	r11,0
800119ac:	f5 ba 00 00 	subfeq	r10,0
800119b0:	c1 50       	breq	800119da <__avr32_f64_cmp_ge+0x56>
800119b2:	1b 07       	ld.w	r7,sp++
800119b4:	1b 0e       	ld.w	lr,sp++
800119b6:	58 3c       	cp.w	r12,3
800119b8:	c0 a0       	breq	800119cc <__avr32_f64_cmp_ge+0x48>
800119ba:	58 1c       	cp.w	r12,1
800119bc:	c0 33       	brcs	800119c2 <__avr32_f64_cmp_ge+0x3e>
800119be:	5e 0f       	reteq	1
800119c0:	5e 1d       	retne	0
800119c2:	10 3a       	cp.w	r10,r8
800119c4:	f2 0b 13 00 	cpc	r11,r9
800119c8:	5e 2f       	reths	1
800119ca:	5e 3d       	retlo	0
800119cc:	14 38       	cp.w	r8,r10
800119ce:	f6 09 13 00 	cpc	r9,r11
800119d2:	5e 2f       	reths	1
800119d4:	5e 3d       	retlo	0
800119d6:	1b 07       	ld.w	r7,sp++
800119d8:	d8 0a       	popm	pc,r12=0
800119da:	58 17       	cp.w	r7,1
800119dc:	5f 0c       	sreq	r12
800119de:	58 09       	cp.w	r9,0
800119e0:	f5 b8 00 00 	subfeq	r8,0
800119e4:	1b 07       	ld.w	r7,sp++
800119e6:	1b 0e       	ld.w	lr,sp++
800119e8:	5e 0f       	reteq	1
800119ea:	5e fc       	retal	r12

800119ec <__avr32_f64_cmp_lt>:
800119ec:	1a de       	st.w	--sp,lr
800119ee:	1a d7       	st.w	--sp,r7
800119f0:	a1 7b       	lsl	r11,0x1
800119f2:	5f 3c       	srlo	r12
800119f4:	a1 79       	lsl	r9,0x1
800119f6:	5f 37       	srlo	r7
800119f8:	5c fc       	rol	r12
800119fa:	fc 1e ff e0 	movh	lr,0xffe0
800119fe:	58 0a       	cp.w	r10,0
80011a00:	fc 0b 13 00 	cpc	r11,lr
80011a04:	e0 8b 00 1d 	brhi	80011a3e <__avr32_f64_cmp_lt+0x52>
80011a08:	58 08       	cp.w	r8,0
80011a0a:	fc 09 13 00 	cpc	r9,lr
80011a0e:	e0 8b 00 18 	brhi	80011a3e <__avr32_f64_cmp_lt+0x52>
80011a12:	58 0b       	cp.w	r11,0
80011a14:	f5 ba 00 00 	subfeq	r10,0
80011a18:	c1 50       	breq	80011a42 <__avr32_f64_cmp_lt+0x56>
80011a1a:	1b 07       	ld.w	r7,sp++
80011a1c:	1b 0e       	ld.w	lr,sp++
80011a1e:	58 3c       	cp.w	r12,3
80011a20:	c0 a0       	breq	80011a34 <__avr32_f64_cmp_lt+0x48>
80011a22:	58 1c       	cp.w	r12,1
80011a24:	c0 33       	brcs	80011a2a <__avr32_f64_cmp_lt+0x3e>
80011a26:	5e 0d       	reteq	0
80011a28:	5e 1f       	retne	1
80011a2a:	10 3a       	cp.w	r10,r8
80011a2c:	f2 0b 13 00 	cpc	r11,r9
80011a30:	5e 2d       	reths	0
80011a32:	5e 3f       	retlo	1
80011a34:	14 38       	cp.w	r8,r10
80011a36:	f6 09 13 00 	cpc	r9,r11
80011a3a:	5e 2d       	reths	0
80011a3c:	5e 3f       	retlo	1
80011a3e:	1b 07       	ld.w	r7,sp++
80011a40:	d8 0a       	popm	pc,r12=0
80011a42:	58 17       	cp.w	r7,1
80011a44:	5f 1c       	srne	r12
80011a46:	58 09       	cp.w	r9,0
80011a48:	f5 b8 00 00 	subfeq	r8,0
80011a4c:	1b 07       	ld.w	r7,sp++
80011a4e:	1b 0e       	ld.w	lr,sp++
80011a50:	5e 0d       	reteq	0
80011a52:	5e fc       	retal	r12

80011a54 <__avr32_f64_div>:
80011a54:	eb cd 40 ff 	pushm	r0-r7,lr
80011a58:	f7 e9 20 0e 	eor	lr,r11,r9
80011a5c:	f6 07 16 14 	lsr	r7,r11,0x14
80011a60:	a9 7b       	lsl	r11,0x9
80011a62:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80011a66:	a9 7a       	lsl	r10,0x9
80011a68:	bd bb       	sbr	r11,0x1d
80011a6a:	e4 1b 3f ff 	andh	r11,0x3fff
80011a6e:	ab d7       	cbr	r7,0xb
80011a70:	e0 80 00 cc 	breq	80011c08 <__avr32_f64_div_round_subnormal+0x54>
80011a74:	e0 47 07 ff 	cp.w	r7,2047
80011a78:	e0 84 00 b5 	brge	80011be2 <__avr32_f64_div_round_subnormal+0x2e>
80011a7c:	f2 06 16 14 	lsr	r6,r9,0x14
80011a80:	a9 79       	lsl	r9,0x9
80011a82:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80011a86:	a9 78       	lsl	r8,0x9
80011a88:	bd b9       	sbr	r9,0x1d
80011a8a:	e4 19 3f ff 	andh	r9,0x3fff
80011a8e:	ab d6       	cbr	r6,0xb
80011a90:	e0 80 00 e2 	breq	80011c54 <__avr32_f64_div_round_subnormal+0xa0>
80011a94:	e0 46 07 ff 	cp.w	r6,2047
80011a98:	e0 84 00 b2 	brge	80011bfc <__avr32_f64_div_round_subnormal+0x48>
80011a9c:	0c 17       	sub	r7,r6
80011a9e:	fe 37 fc 01 	sub	r7,-1023
80011aa2:	fc 1c 80 00 	movh	r12,0x8000
80011aa6:	f8 03 16 01 	lsr	r3,r12,0x1
80011aaa:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80011aae:	5c d4       	com	r4
80011ab0:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80011ab4:	e6 09 06 44 	mulu.d	r4,r3,r9
80011ab8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80011abc:	e6 05 06 44 	mulu.d	r4,r3,r5
80011ac0:	ea 03 15 02 	lsl	r3,r5,0x2
80011ac4:	e6 09 06 44 	mulu.d	r4,r3,r9
80011ac8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80011acc:	e6 05 06 44 	mulu.d	r4,r3,r5
80011ad0:	ea 03 15 02 	lsl	r3,r5,0x2
80011ad4:	e6 09 06 44 	mulu.d	r4,r3,r9
80011ad8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80011adc:	e6 05 06 44 	mulu.d	r4,r3,r5
80011ae0:	ea 03 15 02 	lsl	r3,r5,0x2
80011ae4:	e6 08 06 40 	mulu.d	r0,r3,r8
80011ae8:	e4 09 07 40 	macu.d	r0,r2,r9
80011aec:	e6 09 06 44 	mulu.d	r4,r3,r9
80011af0:	02 04       	add	r4,r1
80011af2:	5c 05       	acr	r5
80011af4:	a3 65       	lsl	r5,0x2
80011af6:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80011afa:	a3 64       	lsl	r4,0x2
80011afc:	5c 34       	neg	r4
80011afe:	f8 05 01 45 	sbc	r5,r12,r5
80011b02:	e6 04 06 40 	mulu.d	r0,r3,r4
80011b06:	e4 05 07 40 	macu.d	r0,r2,r5
80011b0a:	e6 05 06 44 	mulu.d	r4,r3,r5
80011b0e:	02 04       	add	r4,r1
80011b10:	5c 05       	acr	r5
80011b12:	ea 03 15 02 	lsl	r3,r5,0x2
80011b16:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80011b1a:	e8 02 15 02 	lsl	r2,r4,0x2
80011b1e:	e6 08 06 40 	mulu.d	r0,r3,r8
80011b22:	e4 09 07 40 	macu.d	r0,r2,r9
80011b26:	e6 09 06 44 	mulu.d	r4,r3,r9
80011b2a:	02 04       	add	r4,r1
80011b2c:	5c 05       	acr	r5
80011b2e:	a3 65       	lsl	r5,0x2
80011b30:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80011b34:	a3 64       	lsl	r4,0x2
80011b36:	5c 34       	neg	r4
80011b38:	f8 05 01 45 	sbc	r5,r12,r5
80011b3c:	e6 04 06 40 	mulu.d	r0,r3,r4
80011b40:	e4 05 07 40 	macu.d	r0,r2,r5
80011b44:	e6 05 06 44 	mulu.d	r4,r3,r5
80011b48:	02 04       	add	r4,r1
80011b4a:	5c 05       	acr	r5
80011b4c:	ea 03 15 02 	lsl	r3,r5,0x2
80011b50:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80011b54:	e8 02 15 02 	lsl	r2,r4,0x2
80011b58:	e6 0a 06 40 	mulu.d	r0,r3,r10
80011b5c:	e4 0b 07 40 	macu.d	r0,r2,r11
80011b60:	e6 0b 06 42 	mulu.d	r2,r3,r11
80011b64:	02 02       	add	r2,r1
80011b66:	5c 03       	acr	r3
80011b68:	ed b3 00 1c 	bld	r3,0x1c
80011b6c:	c0 90       	breq	80011b7e <__avr32_f64_div+0x12a>
80011b6e:	a1 72       	lsl	r2,0x1
80011b70:	5c f3       	rol	r3
80011b72:	20 17       	sub	r7,1
80011b74:	a3 9a       	lsr	r10,0x3
80011b76:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80011b7a:	a3 9b       	lsr	r11,0x3
80011b7c:	c0 58       	rjmp	80011b86 <__avr32_f64_div+0x132>
80011b7e:	a5 8a       	lsr	r10,0x4
80011b80:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80011b84:	a5 8b       	lsr	r11,0x4
80011b86:	58 07       	cp.w	r7,0
80011b88:	e0 8a 00 8b 	brle	80011c9e <__avr32_f64_div_res_subnormal>
80011b8c:	e0 12 ff 00 	andl	r2,0xff00
80011b90:	e8 12 00 80 	orl	r2,0x80
80011b94:	e6 08 06 40 	mulu.d	r0,r3,r8
80011b98:	e4 09 07 40 	macu.d	r0,r2,r9
80011b9c:	e4 08 06 44 	mulu.d	r4,r2,r8
80011ba0:	e6 09 06 48 	mulu.d	r8,r3,r9
80011ba4:	00 05       	add	r5,r0
80011ba6:	f0 01 00 48 	adc	r8,r8,r1
80011baa:	5c 09       	acr	r9
80011bac:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80011bb0:	58 04       	cp.w	r4,0
80011bb2:	5c 25       	cpc	r5

80011bb4 <__avr32_f64_div_round_subnormal>:
80011bb4:	f4 08 13 00 	cpc	r8,r10
80011bb8:	f6 09 13 00 	cpc	r9,r11
80011bbc:	5f 36       	srlo	r6
80011bbe:	f8 06 17 00 	moveq	r6,r12
80011bc2:	e4 0a 16 08 	lsr	r10,r2,0x8
80011bc6:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80011bca:	e6 0b 16 08 	lsr	r11,r3,0x8
80011bce:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80011bd2:	ed be 00 1f 	bld	lr,0x1f
80011bd6:	ef bb 00 1f 	bst	r11,0x1f
80011bda:	0c 0a       	add	r10,r6
80011bdc:	5c 0b       	acr	r11
80011bde:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80011be2:	e4 1b 00 0f 	andh	r11,0xf
80011be6:	14 4b       	or	r11,r10
80011be8:	e0 81 00 a7 	brne	80011d36 <__avr32_f64_div_res_subnormal+0x98>
80011bec:	f2 06 16 14 	lsr	r6,r9,0x14
80011bf0:	ab d6       	cbr	r6,0xb
80011bf2:	e0 46 07 ff 	cp.w	r6,2047
80011bf6:	e0 81 00 a4 	brne	80011d3e <__avr32_f64_div_res_subnormal+0xa0>
80011bfa:	c9 e8       	rjmp	80011d36 <__avr32_f64_div_res_subnormal+0x98>
80011bfc:	e4 19 00 0f 	andh	r9,0xf
80011c00:	10 49       	or	r9,r8
80011c02:	e0 81 00 9a 	brne	80011d36 <__avr32_f64_div_res_subnormal+0x98>
80011c06:	c9 28       	rjmp	80011d2a <__avr32_f64_div_res_subnormal+0x8c>
80011c08:	a3 7b       	lsl	r11,0x3
80011c0a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80011c0e:	a3 7a       	lsl	r10,0x3
80011c10:	f5 eb 10 04 	or	r4,r10,r11
80011c14:	e0 80 00 a0 	breq	80011d54 <__avr32_f64_div_op1_zero>
80011c18:	f6 04 12 00 	clz	r4,r11
80011c1c:	c1 70       	breq	80011c4a <__avr32_f64_div_round_subnormal+0x96>
80011c1e:	c0 c3       	brcs	80011c36 <__avr32_f64_div_round_subnormal+0x82>
80011c20:	e8 05 11 20 	rsub	r5,r4,32
80011c24:	f6 04 09 4b 	lsl	r11,r11,r4
80011c28:	f4 05 0a 45 	lsr	r5,r10,r5
80011c2c:	0a 4b       	or	r11,r5
80011c2e:	f4 04 09 4a 	lsl	r10,r10,r4
80011c32:	08 17       	sub	r7,r4
80011c34:	c0 b8       	rjmp	80011c4a <__avr32_f64_div_round_subnormal+0x96>
80011c36:	f4 04 12 00 	clz	r4,r10
80011c3a:	f9 b4 03 00 	movlo	r4,0
80011c3e:	f7 b4 02 e0 	subhs	r4,-32
80011c42:	f4 04 09 4b 	lsl	r11,r10,r4
80011c46:	30 0a       	mov	r10,0
80011c48:	08 17       	sub	r7,r4
80011c4a:	a3 8a       	lsr	r10,0x2
80011c4c:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80011c50:	a3 8b       	lsr	r11,0x2
80011c52:	c1 1b       	rjmp	80011a74 <__avr32_f64_div+0x20>
80011c54:	a3 79       	lsl	r9,0x3
80011c56:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80011c5a:	a3 78       	lsl	r8,0x3
80011c5c:	f3 e8 10 04 	or	r4,r9,r8
80011c60:	c6 f0       	breq	80011d3e <__avr32_f64_div_res_subnormal+0xa0>
80011c62:	f2 04 12 00 	clz	r4,r9
80011c66:	c1 70       	breq	80011c94 <__avr32_f64_div_round_subnormal+0xe0>
80011c68:	c0 c3       	brcs	80011c80 <__avr32_f64_div_round_subnormal+0xcc>
80011c6a:	e8 05 11 20 	rsub	r5,r4,32
80011c6e:	f2 04 09 49 	lsl	r9,r9,r4
80011c72:	f0 05 0a 45 	lsr	r5,r8,r5
80011c76:	0a 49       	or	r9,r5
80011c78:	f0 04 09 48 	lsl	r8,r8,r4
80011c7c:	08 16       	sub	r6,r4
80011c7e:	c0 b8       	rjmp	80011c94 <__avr32_f64_div_round_subnormal+0xe0>
80011c80:	f0 04 12 00 	clz	r4,r8
80011c84:	f9 b4 03 00 	movlo	r4,0
80011c88:	f7 b4 02 e0 	subhs	r4,-32
80011c8c:	f0 04 09 49 	lsl	r9,r8,r4
80011c90:	30 08       	mov	r8,0
80011c92:	08 16       	sub	r6,r4
80011c94:	a3 88       	lsr	r8,0x2
80011c96:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80011c9a:	a3 89       	lsr	r9,0x2
80011c9c:	cf ca       	rjmp	80011a94 <__avr32_f64_div+0x40>

80011c9e <__avr32_f64_div_res_subnormal>:
80011c9e:	5c 37       	neg	r7
80011ca0:	2f f7       	sub	r7,-1
80011ca2:	f1 b7 04 c0 	satu	r7,0x6
80011ca6:	e0 47 00 20 	cp.w	r7,32
80011caa:	c1 54       	brge	80011cd4 <__avr32_f64_div_res_subnormal+0x36>
80011cac:	ee 06 11 20 	rsub	r6,r7,32
80011cb0:	e4 07 0a 42 	lsr	r2,r2,r7
80011cb4:	e6 06 09 4c 	lsl	r12,r3,r6
80011cb8:	18 42       	or	r2,r12
80011cba:	e6 07 0a 43 	lsr	r3,r3,r7
80011cbe:	f4 06 09 41 	lsl	r1,r10,r6
80011cc2:	f4 07 0a 4a 	lsr	r10,r10,r7
80011cc6:	f6 06 09 4c 	lsl	r12,r11,r6
80011cca:	18 4a       	or	r10,r12
80011ccc:	f6 07 0a 4b 	lsr	r11,r11,r7
80011cd0:	30 00       	mov	r0,0
80011cd2:	c1 58       	rjmp	80011cfc <__avr32_f64_div_res_subnormal+0x5e>
80011cd4:	ee 06 11 20 	rsub	r6,r7,32
80011cd8:	f9 b0 00 00 	moveq	r0,0
80011cdc:	f9 bc 00 00 	moveq	r12,0
80011ce0:	c0 50       	breq	80011cea <__avr32_f64_div_res_subnormal+0x4c>
80011ce2:	f4 06 09 40 	lsl	r0,r10,r6
80011ce6:	f6 06 09 4c 	lsl	r12,r11,r6
80011cea:	e6 07 0a 42 	lsr	r2,r3,r7
80011cee:	30 03       	mov	r3,0
80011cf0:	f4 07 0a 41 	lsr	r1,r10,r7
80011cf4:	18 41       	or	r1,r12
80011cf6:	f6 07 0a 4a 	lsr	r10,r11,r7
80011cfa:	30 0b       	mov	r11,0
80011cfc:	e0 12 ff 00 	andl	r2,0xff00
80011d00:	e8 12 00 80 	orl	r2,0x80
80011d04:	e6 08 06 46 	mulu.d	r6,r3,r8
80011d08:	e4 09 07 46 	macu.d	r6,r2,r9
80011d0c:	e4 08 06 44 	mulu.d	r4,r2,r8
80011d10:	e6 09 06 48 	mulu.d	r8,r3,r9
80011d14:	0c 05       	add	r5,r6
80011d16:	f0 07 00 48 	adc	r8,r8,r7
80011d1a:	5c 09       	acr	r9
80011d1c:	30 07       	mov	r7,0
80011d1e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80011d22:	00 34       	cp.w	r4,r0
80011d24:	e2 05 13 00 	cpc	r5,r1
80011d28:	c4 6b       	rjmp	80011bb4 <__avr32_f64_div_round_subnormal>
80011d2a:	1c 9b       	mov	r11,lr
80011d2c:	e6 1b 80 00 	andh	r11,0x8000,COH
80011d30:	30 0a       	mov	r10,0
80011d32:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80011d36:	3f fb       	mov	r11,-1
80011d38:	30 0a       	mov	r10,0
80011d3a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80011d3e:	f5 eb 10 04 	or	r4,r10,r11
80011d42:	c0 90       	breq	80011d54 <__avr32_f64_div_op1_zero>
80011d44:	1c 9b       	mov	r11,lr
80011d46:	e6 1b 80 00 	andh	r11,0x8000,COH
80011d4a:	ea 1b 7f f0 	orh	r11,0x7ff0
80011d4e:	30 0a       	mov	r10,0
80011d50:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80011d54 <__avr32_f64_div_op1_zero>:
80011d54:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80011d58:	ce f0       	breq	80011d36 <__avr32_f64_div_res_subnormal+0x98>
80011d5a:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80011d5e:	e0 44 07 ff 	cp.w	r4,2047
80011d62:	ce 41       	brne	80011d2a <__avr32_f64_div_res_subnormal+0x8c>
80011d64:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80011d68:	ce 10       	breq	80011d2a <__avr32_f64_div_res_subnormal+0x8c>
80011d6a:	ce 6b       	rjmp	80011d36 <__avr32_f64_div_res_subnormal+0x98>

80011d6c <__avr32_umod64>:
80011d6c:	d4 31       	pushm	r0-r7,lr
80011d6e:	1a 97       	mov	r7,sp
80011d70:	20 3d       	sub	sp,12
80011d72:	10 9c       	mov	r12,r8
80011d74:	12 95       	mov	r5,r9
80011d76:	14 9e       	mov	lr,r10
80011d78:	16 91       	mov	r1,r11
80011d7a:	16 96       	mov	r6,r11
80011d7c:	58 09       	cp.w	r9,0
80011d7e:	e0 81 00 81 	brne	80011e80 <__avr32_umod64+0x114>
80011d82:	16 38       	cp.w	r8,r11
80011d84:	e0 88 00 12 	brls	80011da8 <__avr32_umod64+0x3c>
80011d88:	f0 08 12 00 	clz	r8,r8
80011d8c:	c4 e0       	breq	80011e28 <__avr32_umod64+0xbc>
80011d8e:	f6 08 09 46 	lsl	r6,r11,r8
80011d92:	f8 08 09 4c 	lsl	r12,r12,r8
80011d96:	f0 0b 11 20 	rsub	r11,r8,32
80011d9a:	f4 08 09 4e 	lsl	lr,r10,r8
80011d9e:	f4 0b 0a 4b 	lsr	r11,r10,r11
80011da2:	f7 e6 10 06 	or	r6,r11,r6
80011da6:	c4 18       	rjmp	80011e28 <__avr32_umod64+0xbc>
80011da8:	58 08       	cp.w	r8,0
80011daa:	c0 51       	brne	80011db4 <__avr32_umod64+0x48>
80011dac:	30 19       	mov	r9,1
80011dae:	f2 08 0d 08 	divu	r8,r9,r8
80011db2:	10 9c       	mov	r12,r8
80011db4:	f8 08 12 00 	clz	r8,r12
80011db8:	c0 31       	brne	80011dbe <__avr32_umod64+0x52>
80011dba:	18 16       	sub	r6,r12
80011dbc:	c3 68       	rjmp	80011e28 <__avr32_umod64+0xbc>
80011dbe:	f0 03 11 20 	rsub	r3,r8,32
80011dc2:	f4 03 0a 4b 	lsr	r11,r10,r3
80011dc6:	f8 08 09 4c 	lsl	r12,r12,r8
80011dca:	ec 08 09 49 	lsl	r9,r6,r8
80011dce:	ec 03 0a 43 	lsr	r3,r6,r3
80011dd2:	f7 e9 10 09 	or	r9,r11,r9
80011dd6:	f8 05 16 10 	lsr	r5,r12,0x10
80011dda:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80011dde:	e6 05 0d 02 	divu	r2,r3,r5
80011de2:	f2 0e 16 10 	lsr	lr,r9,0x10
80011de6:	ec 02 02 4b 	mul	r11,r6,r2
80011dea:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80011dee:	16 3e       	cp.w	lr,r11
80011df0:	c0 72       	brcc	80011dfe <__avr32_umod64+0x92>
80011df2:	18 0e       	add	lr,r12
80011df4:	18 3e       	cp.w	lr,r12
80011df6:	c0 43       	brcs	80011dfe <__avr32_umod64+0x92>
80011df8:	16 3e       	cp.w	lr,r11
80011dfa:	fd dc e3 0e 	addcs	lr,lr,r12
80011dfe:	fc 0b 01 03 	sub	r3,lr,r11
80011e02:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80011e06:	e6 05 0d 02 	divu	r2,r3,r5
80011e0a:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80011e0e:	a5 36       	mul	r6,r2
80011e10:	0c 39       	cp.w	r9,r6
80011e12:	c0 72       	brcc	80011e20 <__avr32_umod64+0xb4>
80011e14:	18 09       	add	r9,r12
80011e16:	18 39       	cp.w	r9,r12
80011e18:	c0 43       	brcs	80011e20 <__avr32_umod64+0xb4>
80011e1a:	0c 39       	cp.w	r9,r6
80011e1c:	f3 dc e3 09 	addcs	r9,r9,r12
80011e20:	f2 06 01 06 	sub	r6,r9,r6
80011e24:	f4 08 09 4e 	lsl	lr,r10,r8
80011e28:	f8 0a 16 10 	lsr	r10,r12,0x10
80011e2c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80011e30:	ec 0a 0d 02 	divu	r2,r6,r10
80011e34:	fc 09 16 10 	lsr	r9,lr,0x10
80011e38:	ea 02 02 4b 	mul	r11,r5,r2
80011e3c:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80011e40:	16 39       	cp.w	r9,r11
80011e42:	c0 72       	brcc	80011e50 <__avr32_umod64+0xe4>
80011e44:	18 09       	add	r9,r12
80011e46:	18 39       	cp.w	r9,r12
80011e48:	c0 43       	brcs	80011e50 <__avr32_umod64+0xe4>
80011e4a:	16 39       	cp.w	r9,r11
80011e4c:	f3 dc e3 09 	addcs	r9,r9,r12
80011e50:	f2 0b 01 0b 	sub	r11,r9,r11
80011e54:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80011e58:	f6 0a 0d 0a 	divu	r10,r11,r10
80011e5c:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80011e60:	ea 0a 02 4a 	mul	r10,r5,r10
80011e64:	14 3e       	cp.w	lr,r10
80011e66:	c0 72       	brcc	80011e74 <__avr32_umod64+0x108>
80011e68:	18 0e       	add	lr,r12
80011e6a:	18 3e       	cp.w	lr,r12
80011e6c:	c0 43       	brcs	80011e74 <__avr32_umod64+0x108>
80011e6e:	14 3e       	cp.w	lr,r10
80011e70:	fd dc e3 0e 	addcs	lr,lr,r12
80011e74:	fc 0a 01 0a 	sub	r10,lr,r10
80011e78:	30 0b       	mov	r11,0
80011e7a:	f4 08 0a 4a 	lsr	r10,r10,r8
80011e7e:	c7 b8       	rjmp	80011f74 <__avr32_umod64+0x208>
80011e80:	16 39       	cp.w	r9,r11
80011e82:	e0 8b 00 79 	brhi	80011f74 <__avr32_umod64+0x208>
80011e86:	f2 09 12 00 	clz	r9,r9
80011e8a:	c1 21       	brne	80011eae <__avr32_umod64+0x142>
80011e8c:	10 3a       	cp.w	r10,r8
80011e8e:	5f 2b       	srhs	r11
80011e90:	0a 31       	cp.w	r1,r5
80011e92:	5f ba       	srhi	r10
80011e94:	f7 ea 10 0a 	or	r10,r11,r10
80011e98:	f2 0a 18 00 	cp.b	r10,r9
80011e9c:	c0 60       	breq	80011ea8 <__avr32_umod64+0x13c>
80011e9e:	fc 08 01 0c 	sub	r12,lr,r8
80011ea2:	e2 05 01 46 	sbc	r6,r1,r5
80011ea6:	18 9e       	mov	lr,r12
80011ea8:	0c 9b       	mov	r11,r6
80011eaa:	1c 9a       	mov	r10,lr
80011eac:	c6 48       	rjmp	80011f74 <__avr32_umod64+0x208>
80011eae:	ea 09 09 4c 	lsl	r12,r5,r9
80011eb2:	f2 06 11 20 	rsub	r6,r9,32
80011eb6:	f6 09 09 4b 	lsl	r11,r11,r9
80011eba:	f0 09 09 42 	lsl	r2,r8,r9
80011ebe:	ef 46 ff f4 	st.w	r7[-12],r6
80011ec2:	f0 06 0a 48 	lsr	r8,r8,r6
80011ec6:	18 48       	or	r8,r12
80011ec8:	e2 06 0a 4c 	lsr	r12,r1,r6
80011ecc:	f4 09 09 43 	lsl	r3,r10,r9
80011ed0:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80011ed4:	f4 06 0a 4a 	lsr	r10,r10,r6
80011ed8:	16 4a       	or	r10,r11
80011eda:	f0 0b 16 10 	lsr	r11,r8,0x10
80011ede:	f8 0b 0d 04 	divu	r4,r12,r11
80011ee2:	f4 0c 16 10 	lsr	r12,r10,0x10
80011ee6:	08 91       	mov	r1,r4
80011ee8:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80011eec:	e8 0e 02 46 	mul	r6,r4,lr
80011ef0:	0c 3c       	cp.w	r12,r6
80011ef2:	c0 a2       	brcc	80011f06 <__avr32_umod64+0x19a>
80011ef4:	20 11       	sub	r1,1
80011ef6:	10 0c       	add	r12,r8
80011ef8:	10 3c       	cp.w	r12,r8
80011efa:	c0 63       	brcs	80011f06 <__avr32_umod64+0x19a>
80011efc:	0c 3c       	cp.w	r12,r6
80011efe:	f7 b1 03 01 	sublo	r1,1
80011f02:	f9 d8 e3 0c 	addcs	r12,r12,r8
80011f06:	0c 1c       	sub	r12,r6
80011f08:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80011f0c:	f8 0b 0d 04 	divu	r4,r12,r11
80011f10:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80011f14:	08 96       	mov	r6,r4
80011f16:	e8 0e 02 4e 	mul	lr,r4,lr
80011f1a:	1c 3b       	cp.w	r11,lr
80011f1c:	c0 a2       	brcc	80011f30 <__avr32_umod64+0x1c4>
80011f1e:	20 16       	sub	r6,1
80011f20:	10 0b       	add	r11,r8
80011f22:	10 3b       	cp.w	r11,r8
80011f24:	c0 63       	brcs	80011f30 <__avr32_umod64+0x1c4>
80011f26:	1c 3b       	cp.w	r11,lr
80011f28:	f7 b6 03 01 	sublo	r6,1
80011f2c:	f7 d8 e3 0b 	addcs	r11,r11,r8
80011f30:	ed e1 11 01 	or	r1,r6,r1<<0x10
80011f34:	1c 1b       	sub	r11,lr
80011f36:	e2 02 06 40 	mulu.d	r0,r1,r2
80011f3a:	00 9e       	mov	lr,r0
80011f3c:	02 9c       	mov	r12,r1
80011f3e:	16 3c       	cp.w	r12,r11
80011f40:	e0 8b 00 08 	brhi	80011f50 <__avr32_umod64+0x1e4>
80011f44:	5f 06       	sreq	r6
80011f46:	06 30       	cp.w	r0,r3
80011f48:	5f ba       	srhi	r10
80011f4a:	ed ea 00 0a 	and	r10,r6,r10
80011f4e:	c0 60       	breq	80011f5a <__avr32_umod64+0x1ee>
80011f50:	fc 02 01 04 	sub	r4,lr,r2
80011f54:	f8 08 01 4c 	sbc	r12,r12,r8
80011f58:	08 9e       	mov	lr,r4
80011f5a:	e6 0e 01 0a 	sub	r10,r3,lr
80011f5e:	f6 0c 01 4c 	sbc	r12,r11,r12
80011f62:	ee f1 ff f4 	ld.w	r1,r7[-12]
80011f66:	f8 09 0a 4b 	lsr	r11,r12,r9
80011f6a:	f4 09 0a 4a 	lsr	r10,r10,r9
80011f6e:	f8 01 09 4c 	lsl	r12,r12,r1
80011f72:	18 4a       	or	r10,r12
80011f74:	2f dd       	sub	sp,-12
80011f76:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80012000 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80012000:	c0 08       	rjmp	80012000 <_evba>
	...

80012004 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80012004:	c0 08       	rjmp	80012004 <_handle_TLB_Multiple_Hit>
	...

80012008 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80012008:	c0 08       	rjmp	80012008 <_handle_Bus_Error_Data_Fetch>
	...

8001200c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8001200c:	c0 08       	rjmp	8001200c <_handle_Bus_Error_Instruction_Fetch>
	...

80012010 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80012010:	c0 08       	rjmp	80012010 <_handle_NMI>
	...

80012014 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80012014:	c0 08       	rjmp	80012014 <_handle_Instruction_Address>
	...

80012018 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80012018:	c0 08       	rjmp	80012018 <_handle_ITLB_Protection>
	...

8001201c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8001201c:	c0 08       	rjmp	8001201c <_handle_Breakpoint>
	...

80012020 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80012020:	c0 08       	rjmp	80012020 <_handle_Illegal_Opcode>
	...

80012024 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80012024:	c0 08       	rjmp	80012024 <_handle_Unimplemented_Instruction>
	...

80012028 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80012028:	c0 08       	rjmp	80012028 <_handle_Privilege_Violation>
	...

8001202c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8001202c:	c0 08       	rjmp	8001202c <_handle_Floating_Point>
	...

80012030 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80012030:	c0 08       	rjmp	80012030 <_handle_Coprocessor_Absent>
	...

80012034 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80012034:	c0 08       	rjmp	80012034 <_handle_Data_Address_Read>
	...

80012038 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80012038:	c0 08       	rjmp	80012038 <_handle_Data_Address_Write>
	...

8001203c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8001203c:	c0 08       	rjmp	8001203c <_handle_DTLB_Protection_Read>
	...

80012040 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80012040:	c0 08       	rjmp	80012040 <_handle_DTLB_Protection_Write>
	...

80012044 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80012044:	c0 08       	rjmp	80012044 <_handle_DTLB_Modified>
	...

80012050 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80012050:	c0 08       	rjmp	80012050 <_handle_ITLB_Miss>
	...

80012060 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80012060:	c0 08       	rjmp	80012060 <_handle_DTLB_Miss_Read>
	...

80012070 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80012070:	c0 08       	rjmp	80012070 <_handle_DTLB_Miss_Write>
	...

80012100 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80012100:	c0 08       	rjmp	80012100 <_handle_Supervisor_Call>
	...

80012104 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80012104:	30 0c       	mov	r12,0
80012106:	f0 1f 00 0e 	mcall	8001213c <_int3+0xe>
8001210a:	58 0c       	cp.w	r12,0
8001210c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80012110:	d6 03       	rete

80012112 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80012112:	30 1c       	mov	r12,1
80012114:	f0 1f 00 0a 	mcall	8001213c <_int3+0xe>
80012118:	58 0c       	cp.w	r12,0
8001211a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8001211e:	d6 03       	rete

80012120 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80012120:	30 2c       	mov	r12,2
80012122:	f0 1f 00 07 	mcall	8001213c <_int3+0xe>
80012126:	58 0c       	cp.w	r12,0
80012128:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8001212c:	d6 03       	rete

8001212e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8001212e:	30 3c       	mov	r12,3
80012130:	f0 1f 00 03 	mcall	8001213c <_int3+0xe>
80012134:	58 0c       	cp.w	r12,0
80012136:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8001213a:	d6 03       	rete
8001213c:	80 00       	ld.sh	r0,r0[0x0]
8001213e:	4b b8       	lddpc	r8,80012228 <C.35.14269+0x8>
	...
