
electroclave.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002010  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000fb10  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80011c00  80011c00  00012000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000008dc  80011e00  80011e00  00012200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  800126dc  800126dc  00012adc  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         000005b4  00000008  800126e0  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  000005bc  80012c94  000131bc  2**0
                  ALLOC
  9 .bss          000007b8  000005c0  000005c0  00000000  2**2
                  ALLOC
 10 .heap         0000e288  00000d78  00000d78  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  000131bc  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000011a0  00000000  00000000  000131f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00002842  00000000  00000000  00014390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0002e19e  00000000  00000000  00016bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00005679  00000000  00000000  00044d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00011256  00000000  00000000  0004a3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003240  00000000  00000000  0005b640  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006d20  00000000  00000000  0005e880  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000ad63  00000000  00000000  000655a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 01032cdc  00000000  00000000  00070303  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .flash_nvram0 00000600  8007fa00  80012c94  00013200  2**2
                  ALLOC
 23 .flash_nvram1 00000300  8007f700  80080000  00013300  2**2
                  ALLOC
 24 .flash_nvram2 00000200  8007f500  8007fa00  00013500  2**2
                  ALLOC
 25 .flash_nvram3 00003a00  8007bb00  8007f700  00013300  2**2
                  ALLOC
 26 .flash_nvram4 00000100  8007ba00  8007f500  00013200  2**2
                  ALLOC
 27 .debug_ranges 00001220  00000000  00000000  010a2fe0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	59 7c       	cp.w	r12,23

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	48 1f       	lddpc	pc,8000200c <program_start+0x4>
8000200a:	00 00       	add	r0,r0
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	59 7c       	cp.w	r12,23

Disassembly of section .text:

80002010 <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
80002010:	eb cd 40 80 	pushm	r7,lr
80002014:	1a 97       	mov	r7,sp
80002016:	20 1d       	sub	sp,4
80002018:	18 98       	mov	r8,r12
8000201a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (idx)
8000201e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002022:	58 28       	cp.w	r8,2
80002024:	c1 10       	breq	80002046 <io_pin+0x36>
80002026:	e0 89 00 07 	brgt	80002034 <io_pin+0x24>
8000202a:	58 08       	cp.w	r8,0
8000202c:	c0 90       	breq	8000203e <io_pin+0x2e>
8000202e:	58 18       	cp.w	r8,1
80002030:	c0 90       	breq	80002042 <io_pin+0x32>
80002032:	c1 08       	rjmp	80002052 <io_pin+0x42>
80002034:	58 38       	cp.w	r8,3
80002036:	c0 a0       	breq	8000204a <io_pin+0x3a>
80002038:	58 48       	cp.w	r8,4
8000203a:	c0 a0       	breq	8000204e <io_pin+0x3e>
8000203c:	c0 b8       	rjmp	80002052 <io_pin+0x42>
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
8000203e:	33 38       	mov	r8,51
80002040:	c0 a8       	rjmp	80002054 <io_pin+0x44>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
80002042:	33 48       	mov	r8,52
80002044:	c0 88       	rjmp	80002054 <io_pin+0x44>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
80002046:	33 58       	mov	r8,53
80002048:	c0 68       	rjmp	80002054 <io_pin+0x44>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
8000204a:	33 68       	mov	r8,54
8000204c:	c0 48       	rjmp	80002054 <io_pin+0x44>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
8000204e:	33 78       	mov	r8,55
80002050:	c0 28       	rjmp	80002054 <io_pin+0x44>
			break;
		default: 
			return 0; //TODO: return a better error code here
80002052:	30 08       	mov	r8,0
			break;
	}
}
80002054:	10 9c       	mov	r12,r8
80002056:	2f fd       	sub	sp,-4
80002058:	e3 cd 80 80 	ldm	sp++,r7,pc

8000205c <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
8000205c:	eb cd 40 80 	pushm	r7,lr
80002060:	1a 97       	mov	r7,sp
80002062:	20 3d       	sub	sp,12
80002064:	18 98       	mov	r8,r12
80002066:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
8000206a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000206e:	10 9c       	mov	r12,r8
80002070:	f0 1f 00 0c 	mcall	800020a0 <drive_DQ_low+0x44>
80002074:	18 98       	mov	r8,r12
80002076:	ef 68 ff fb 	st.b	r7[-5],r8
	
	ioFlags = (GPIO_DIR_OUTPUT); //14may15 experiment
8000207a:	30 18       	mov	r8,1
8000207c:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ioPin, ioFlags); //14may15 experiment
80002080:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002084:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002088:	12 9b       	mov	r11,r9
8000208a:	10 9c       	mov	r12,r8
8000208c:	f0 1f 00 06 	mcall	800020a4 <drive_DQ_low+0x48>

	gpio_set_pin_low(ioPin);
80002090:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002094:	10 9c       	mov	r12,r8
80002096:	f0 1f 00 05 	mcall	800020a8 <drive_DQ_low+0x4c>

}
8000209a:	2f dd       	sub	sp,-12
8000209c:	e3 cd 80 80 	ldm	sp++,r7,pc
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	20 10       	sub	r0,1
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	48 28       	lddpc	r8,800020ac <release_the_bus>
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	4b 3c       	lddpc	r12,80002174 <SetSpeed>

800020ac <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
800020ac:	eb cd 40 80 	pushm	r7,lr
800020b0:	1a 97       	mov	r7,sp
800020b2:	20 3d       	sub	sp,12
800020b4:	18 98       	mov	r8,r12
800020b6:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
800020ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800020be:	10 9c       	mov	r12,r8
800020c0:	f0 1f 00 0a 	mcall	800020e8 <release_the_bus+0x3c>
800020c4:	18 98       	mov	r8,r12
800020c6:	ef 68 ff fb 	st.b	r7[-5],r8
	
//14may15 experiment	gpio_set_pin_high(ioPin);
	
	ioFlags = (GPIO_DIR_INPUT); //14may15 experiment
800020ca:	30 08       	mov	r8,0
800020cc:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ioPin, ioFlags); //14may15 experiment
800020d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020d4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800020d8:	12 9b       	mov	r11,r9
800020da:	10 9c       	mov	r12,r8
800020dc:	f0 1f 00 04 	mcall	800020ec <release_the_bus+0x40>

}
800020e0:	2f dd       	sub	sp,-12
800020e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800020e6:	00 00       	add	r0,r0
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	20 10       	sub	r0,1
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	48 28       	lddpc	r8,800020f4 <gpio_input+0x4>

800020f0 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
800020f0:	eb cd 40 80 	pushm	r7,lr
800020f4:	1a 97       	mov	r7,sp
800020f6:	20 3d       	sub	sp,12
800020f8:	18 98       	mov	r8,r12
800020fa:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 9c       	mov	r12,r8
80002104:	f0 1f 00 09 	mcall	80002128 <gpio_input+0x38>
80002108:	18 98       	mov	r8,r12
8000210a:	ef 68 ff ff 	st.b	r7[-1],r8
		
	ioFlags = (GPIO_DIR_INPUT);
8000210e:	30 08       	mov	r8,0
80002110:	ef 48 ff f8 	st.w	r7[-8],r8
	gpio_configure_pin(ioPin, ioFlags);
80002114:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002118:	ee fb ff f8 	ld.w	r11,r7[-8]
8000211c:	10 9c       	mov	r12,r8
8000211e:	f0 1f 00 04 	mcall	8000212c <gpio_input+0x3c>

}
80002122:	2f dd       	sub	sp,-12
80002124:	e3 cd 80 80 	ldm	sp++,r7,pc
80002128:	80 00       	ld.sh	r0,r0[0x0]
8000212a:	20 10       	sub	r0,1
8000212c:	80 00       	ld.sh	r0,r0[0x0]
8000212e:	48 28       	lddpc	r8,80002134 <sample_line+0x4>

80002130 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
80002130:	eb cd 40 80 	pushm	r7,lr
80002134:	1a 97       	mov	r7,sp
80002136:	20 2d       	sub	sp,8
80002138:	18 98       	mov	r8,r12
8000213a:	ef 68 ff f8 	st.b	r7[-8],r8
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
8000213e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002142:	10 9c       	mov	r12,r8
80002144:	f0 1f 00 0a 	mcall	8000216c <sample_line+0x3c>
80002148:	18 98       	mov	r8,r12
8000214a:	ef 68 ff ff 	st.b	r7[-1],r8
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = gpio_get_pin_value(ioPin);
8000214e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002152:	10 9c       	mov	r12,r8
80002154:	f0 1f 00 07 	mcall	80002170 <sample_line+0x40>
80002158:	18 98       	mov	r8,r12
8000215a:	ef 68 ff fe 	st.b	r7[-2],r8

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
8000215e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
80002162:	10 9c       	mov	r12,r8
80002164:	2f ed       	sub	sp,-8
80002166:	e3 cd 80 80 	ldm	sp++,r7,pc
8000216a:	00 00       	add	r0,r0
8000216c:	80 00       	ld.sh	r0,r0[0x0]
8000216e:	20 10       	sub	r0,1
80002170:	80 00       	ld.sh	r0,r0[0x0]
80002172:	4a c6       	lddpc	r6,80002220 <SetSpeed+0xac>

80002174 <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
80002174:	eb cd 40 80 	pushm	r7,lr
80002178:	1a 97       	mov	r7,sp
8000217a:	20 1d       	sub	sp,4
8000217c:	ef 4c ff fc 	st.w	r7[-4],r12
		J = 410;
	}
	
#endif

	if (standard) //experiment 16may15 cut everything in half, some issue with using the PLL? and fudge the tight numbers at the low end
80002180:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002184:	58 08       	cp.w	r8,0
80002186:	c2 20       	breq	800021ca <SetSpeed+0x56>
	{
		// Standard Speed
		A = 0; //6;
80002188:	4a 18       	lddpc	r8,8000220c <SetSpeed+0x98>
8000218a:	30 09       	mov	r9,0
8000218c:	91 09       	st.w	r8[0x0],r9
		B = 32; //64;
8000218e:	4a 18       	lddpc	r8,80002210 <SetSpeed+0x9c>
80002190:	32 09       	mov	r9,32
80002192:	91 09       	st.w	r8[0x0],r9
		C = 30; //60;
80002194:	4a 08       	lddpc	r8,80002214 <SetSpeed+0xa0>
80002196:	31 e9       	mov	r9,30
80002198:	91 09       	st.w	r8[0x0],r9
		D = 2; //10;
8000219a:	4a 08       	lddpc	r8,80002218 <SetSpeed+0xa4>
8000219c:	30 29       	mov	r9,2
8000219e:	91 09       	st.w	r8[0x0],r9
		E = 2; //9;
800021a0:	49 f8       	lddpc	r8,8000221c <SetSpeed+0xa8>
800021a2:	30 29       	mov	r9,2
800021a4:	91 09       	st.w	r8[0x0],r9
		F = 27; //55;
800021a6:	49 f8       	lddpc	r8,80002220 <SetSpeed+0xac>
800021a8:	31 b9       	mov	r9,27
800021aa:	91 09       	st.w	r8[0x0],r9
		G = 0; //0;
800021ac:	49 e8       	lddpc	r8,80002224 <SetSpeed+0xb0>
800021ae:	30 09       	mov	r9,0
800021b0:	91 09       	st.w	r8[0x0],r9
		H = 240; //480;
800021b2:	49 e8       	lddpc	r8,80002228 <SetSpeed+0xb4>
800021b4:	e0 69 00 f0 	mov	r9,240
800021b8:	91 09       	st.w	r8[0x0],r9
		I = 35; //70;
800021ba:	49 d8       	lddpc	r8,8000222c <SetSpeed+0xb8>
800021bc:	32 39       	mov	r9,35
800021be:	91 09       	st.w	r8[0x0],r9
		J = 205; //410;
800021c0:	49 c8       	lddpc	r8,80002230 <SetSpeed+0xbc>
800021c2:	e0 69 00 cd 	mov	r9,205
800021c6:	91 09       	st.w	r8[0x0],r9
800021c8:	c1 f8       	rjmp	80002206 <SetSpeed+0x92>


	else
	{
		// Overdrive Speed
		A = 1.5;
800021ca:	49 18       	lddpc	r8,8000220c <SetSpeed+0x98>
800021cc:	30 19       	mov	r9,1
800021ce:	91 09       	st.w	r8[0x0],r9
		B = 7.5;
800021d0:	49 08       	lddpc	r8,80002210 <SetSpeed+0x9c>
800021d2:	30 79       	mov	r9,7
800021d4:	91 09       	st.w	r8[0x0],r9
		C = 7.5;
800021d6:	49 08       	lddpc	r8,80002214 <SetSpeed+0xa0>
800021d8:	30 79       	mov	r9,7
800021da:	91 09       	st.w	r8[0x0],r9
		D = 2.5;
800021dc:	48 f8       	lddpc	r8,80002218 <SetSpeed+0xa4>
800021de:	30 29       	mov	r9,2
800021e0:	91 09       	st.w	r8[0x0],r9
		E = 0.75;
800021e2:	48 f8       	lddpc	r8,8000221c <SetSpeed+0xa8>
800021e4:	30 09       	mov	r9,0
800021e6:	91 09       	st.w	r8[0x0],r9
		F = 7;
800021e8:	48 e8       	lddpc	r8,80002220 <SetSpeed+0xac>
800021ea:	30 79       	mov	r9,7
800021ec:	91 09       	st.w	r8[0x0],r9
		G = 2.5;
800021ee:	48 e8       	lddpc	r8,80002224 <SetSpeed+0xb0>
800021f0:	30 29       	mov	r9,2
800021f2:	91 09       	st.w	r8[0x0],r9
		H = 70;
800021f4:	48 d8       	lddpc	r8,80002228 <SetSpeed+0xb4>
800021f6:	34 69       	mov	r9,70
800021f8:	91 09       	st.w	r8[0x0],r9
		I = 8.5;
800021fa:	48 d8       	lddpc	r8,8000222c <SetSpeed+0xb8>
800021fc:	30 89       	mov	r9,8
800021fe:	91 09       	st.w	r8[0x0],r9
		J = 40;
80002200:	48 c8       	lddpc	r8,80002230 <SetSpeed+0xbc>
80002202:	32 89       	mov	r9,40
80002204:	91 09       	st.w	r8[0x0],r9
	}
}
80002206:	2f fd       	sub	sp,-4
80002208:	e3 cd 80 80 	ldm	sp++,r7,pc
8000220c:	00 00       	add	r0,r0
8000220e:	08 10       	sub	r0,r4
80002210:	00 00       	add	r0,r0
80002212:	08 14       	sub	r4,r4
80002214:	00 00       	add	r0,r0
80002216:	08 1c       	sub	r12,r4
80002218:	00 00       	add	r0,r0
8000221a:	08 0c       	add	r12,r4
8000221c:	00 00       	add	r0,r0
8000221e:	08 28       	rsub	r8,r4
80002220:	00 00       	add	r0,r0
80002222:	08 30       	cp.w	r0,r4
80002224:	00 00       	add	r0,r0
80002226:	08 20       	rsub	r0,r4
80002228:	00 00       	add	r0,r0
8000222a:	08 24       	rsub	r4,r4
8000222c:	00 00       	add	r0,r0
8000222e:	08 2c       	rsub	r12,r4
80002230:	00 00       	add	r0,r0
80002232:	08 18       	sub	r8,r4

80002234 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
80002234:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002238:	1a 97       	mov	r7,sp
8000223a:	fa cd 00 e0 	sub	sp,sp,224
8000223e:	18 98       	mov	r8,r12
80002240:	ef 68 ff 48 	st.b	r7[-184],r8
	int result;

	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ);
80002244:	fe f8 05 9c 	ld.w	r8,pc[1436]
80002248:	70 08       	ld.w	r8,r8[0x0]
8000224a:	ef 48 ff 84 	st.w	r7[-124],r8
8000224e:	e0 68 e1 00 	mov	r8,57600
80002252:	ea 18 05 f5 	orh	r8,0x5f5
80002256:	ef 48 ff 80 	st.w	r7[-128],r8
8000225a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000225e:	ef 48 ff 8c 	st.w	r7[-116],r8
80002262:	ee f8 ff 80 	ld.w	r8,r7[-128]
80002266:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000226a:	ee f2 ff 8c 	ld.w	r2,r7[-116]
8000226e:	30 03       	mov	r3,0
80002270:	ee fa ff 88 	ld.w	r10,r7[-120]
80002274:	30 0b       	mov	r11,0
80002276:	e6 0a 02 49 	mul	r9,r3,r10
8000227a:	f6 02 02 48 	mul	r8,r11,r2
8000227e:	10 09       	add	r9,r8
80002280:	e4 0a 06 4a 	mulu.d	r10,r2,r10
80002284:	16 09       	add	r9,r11
80002286:	12 9b       	mov	r11,r9
80002288:	ee 78 42 3f 	mov	r8,999999
8000228c:	30 09       	mov	r9,0
8000228e:	10 0a       	add	r10,r8
80002290:	f6 09 00 4b 	adc	r11,r11,r9
80002294:	ee 78 42 40 	mov	r8,1000000
80002298:	30 09       	mov	r9,0
8000229a:	f0 1f 01 53 	mcall	800027e4 <OWTouchReset+0x5b0>
8000229e:	14 98       	mov	r8,r10
800022a0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800022a2:	ef 48 ff 94 	st.w	r7[-108],r8
800022a6:	ee c8 00 b4 	sub	r8,r7,180
800022aa:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022ae:	e1 b8 00 42 	mfsr	r8,0x108
800022b2:	10 99       	mov	r9,r8
800022b4:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022b8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022ba:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022be:	70 09       	ld.w	r9,r8[0x0]
800022c0:	ee f8 ff 94 	ld.w	r8,r7[-108]
800022c4:	10 09       	add	r9,r8
800022c6:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022ca:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800022cc:	ee f9 ff 90 	ld.w	r9,r7[-112]
800022d0:	30 08       	mov	r8,0
800022d2:	f3 68 00 08 	st.b	r9[8],r8
800022d6:	ee c8 00 b4 	sub	r8,r7,180
800022da:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022de:	e1 b8 00 42 	mfsr	r8,0x108
800022e2:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800022e6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022ea:	f1 39 00 08 	ld.ub	r9,r8[8]
800022ee:	30 28       	mov	r8,2
800022f0:	f0 09 18 00 	cp.b	r9,r8
800022f4:	c0 31       	brne	800022fa <OWTouchReset+0xc6>
    return false;
800022f6:	30 08       	mov	r8,0
800022f8:	c4 38       	rjmp	8000237e <OWTouchReset+0x14a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800022fa:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022fe:	f1 39 00 08 	ld.ub	r9,r8[8]
80002302:	30 18       	mov	r8,1
80002304:	f0 09 18 00 	cp.b	r9,r8
80002308:	c0 31       	brne	8000230e <OWTouchReset+0xda>
    return true;
8000230a:	30 18       	mov	r8,1
8000230c:	c3 98       	rjmp	8000237e <OWTouchReset+0x14a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000230e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002312:	70 09       	ld.w	r9,r8[0x0]
80002314:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002318:	70 18       	ld.w	r8,r8[0x4]
8000231a:	10 39       	cp.w	r9,r8
8000231c:	e0 88 00 1a 	brls	80002350 <OWTouchReset+0x11c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002320:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002324:	70 08       	ld.w	r8,r8[0x0]
80002326:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000232a:	10 39       	cp.w	r9,r8
8000232c:	c1 02       	brcc	8000234c <OWTouchReset+0x118>
8000232e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002332:	70 18       	ld.w	r8,r8[0x4]
80002334:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002338:	10 39       	cp.w	r9,r8
8000233a:	e0 88 00 09 	brls	8000234c <OWTouchReset+0x118>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000233e:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002342:	30 18       	mov	r8,1
80002344:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002348:	30 18       	mov	r8,1
8000234a:	c1 a8       	rjmp	8000237e <OWTouchReset+0x14a>
    }
    return false;
8000234c:	30 08       	mov	r8,0
8000234e:	c1 88       	rjmp	8000237e <OWTouchReset+0x14a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002350:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002354:	70 08       	ld.w	r8,r8[0x0]
80002356:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000235a:	10 39       	cp.w	r9,r8
8000235c:	c0 93       	brcs	8000236e <OWTouchReset+0x13a>
8000235e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002362:	70 18       	ld.w	r8,r8[0x4]
80002364:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002368:	10 39       	cp.w	r9,r8
8000236a:	e0 88 00 09 	brls	8000237c <OWTouchReset+0x148>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000236e:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002372:	30 18       	mov	r8,1
80002374:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002378:	30 18       	mov	r8,1
8000237a:	c0 28       	rjmp	8000237e <OWTouchReset+0x14a>
    }
    return false;
8000237c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000237e:	58 08       	cp.w	r8,0
80002380:	ca b0       	breq	800022d6 <OWTouchReset+0xa2>
	drive_DQ_low(idx);
80002382:	ef 38 ff 48 	ld.ub	r8,r7[-184]
80002386:	10 9c       	mov	r12,r8
80002388:	f0 1f 01 18 	mcall	800027e8 <OWTouchReset+0x5b4>
	cpu_delay_us(H, EC_CPU_CLOCK_100MHZ);	//tRSTL (reset low) 480-640us
8000238c:	fe f8 04 60 	ld.w	r8,pc[1120]
80002390:	70 08       	ld.w	r8,r8[0x0]
80002392:	ef 48 ff a4 	st.w	r7[-92],r8
80002396:	e0 68 e1 00 	mov	r8,57600
8000239a:	ea 18 05 f5 	orh	r8,0x5f5
8000239e:	ef 48 ff a0 	st.w	r7[-96],r8
800023a2:	ee f8 ff a4 	ld.w	r8,r7[-92]
800023a6:	ef 48 ff ac 	st.w	r7[-84],r8
800023aa:	ee f8 ff a0 	ld.w	r8,r7[-96]
800023ae:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800023b2:	ee fc ff ac 	ld.w	r12,r7[-84]
800023b6:	ef 4c ff 2c 	st.w	r7[-212],r12
800023ba:	30 0b       	mov	r11,0
800023bc:	ef 4b ff 28 	st.w	r7[-216],r11
800023c0:	ee f9 ff a8 	ld.w	r9,r7[-88]
800023c4:	ef 49 ff 24 	st.w	r7[-220],r9
800023c8:	30 08       	mov	r8,0
800023ca:	ef 48 ff 20 	st.w	r7[-224],r8
800023ce:	ee fa ff 28 	ld.w	r10,r7[-216]
800023d2:	ee fc ff 24 	ld.w	r12,r7[-220]
800023d6:	b9 3a       	mul	r10,r12
800023d8:	ee f8 ff 20 	ld.w	r8,r7[-224]
800023dc:	ee fb ff 2c 	ld.w	r11,r7[-212]
800023e0:	b7 38       	mul	r8,r11
800023e2:	10 0a       	add	r10,r8
800023e4:	ee fc ff 2c 	ld.w	r12,r7[-212]
800023e8:	ee fb ff 24 	ld.w	r11,r7[-220]
800023ec:	f8 0b 06 48 	mulu.d	r8,r12,r11
800023f0:	12 0a       	add	r10,r9
800023f2:	14 99       	mov	r9,r10
800023f4:	ee 7a 42 3f 	mov	r10,999999
800023f8:	30 0b       	mov	r11,0
800023fa:	f0 0a 00 0a 	add	r10,r8,r10
800023fe:	f2 0b 00 4b 	adc	r11,r9,r11
80002402:	ee 78 42 40 	mov	r8,1000000
80002406:	30 09       	mov	r9,0
80002408:	f0 1f 00 f7 	mcall	800027e4 <OWTouchReset+0x5b0>
8000240c:	14 98       	mov	r8,r10
8000240e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002410:	ef 48 ff b4 	st.w	r7[-76],r8
80002414:	ee c8 00 a8 	sub	r8,r7,168
80002418:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000241c:	e1 b8 00 42 	mfsr	r8,0x108
80002420:	10 99       	mov	r9,r8
80002422:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002426:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002428:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000242c:	70 09       	ld.w	r9,r8[0x0]
8000242e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002432:	10 09       	add	r9,r8
80002434:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002438:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000243a:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000243e:	30 08       	mov	r8,0
80002440:	f3 68 00 08 	st.b	r9[8],r8
80002444:	ee c8 00 a8 	sub	r8,r7,168
80002448:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000244c:	e1 b8 00 42 	mfsr	r8,0x108
80002450:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002454:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002458:	f1 39 00 08 	ld.ub	r9,r8[8]
8000245c:	30 28       	mov	r8,2
8000245e:	f0 09 18 00 	cp.b	r9,r8
80002462:	c0 31       	brne	80002468 <OWTouchReset+0x234>
    return false;
80002464:	30 08       	mov	r8,0
80002466:	c4 38       	rjmp	800024ec <OWTouchReset+0x2b8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002468:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000246c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002470:	30 18       	mov	r8,1
80002472:	f0 09 18 00 	cp.b	r9,r8
80002476:	c0 31       	brne	8000247c <OWTouchReset+0x248>
    return true;
80002478:	30 18       	mov	r8,1
8000247a:	c3 98       	rjmp	800024ec <OWTouchReset+0x2b8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000247c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002480:	70 09       	ld.w	r9,r8[0x0]
80002482:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002486:	70 18       	ld.w	r8,r8[0x4]
80002488:	10 39       	cp.w	r9,r8
8000248a:	e0 88 00 1a 	brls	800024be <OWTouchReset+0x28a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000248e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002492:	70 08       	ld.w	r8,r8[0x0]
80002494:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002498:	10 39       	cp.w	r9,r8
8000249a:	c1 02       	brcc	800024ba <OWTouchReset+0x286>
8000249c:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024a0:	70 18       	ld.w	r8,r8[0x4]
800024a2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024a6:	10 39       	cp.w	r9,r8
800024a8:	e0 88 00 09 	brls	800024ba <OWTouchReset+0x286>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024ac:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024b0:	30 18       	mov	r8,1
800024b2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024b6:	30 18       	mov	r8,1
800024b8:	c1 a8       	rjmp	800024ec <OWTouchReset+0x2b8>
    }
    return false;
800024ba:	30 08       	mov	r8,0
800024bc:	c1 88       	rjmp	800024ec <OWTouchReset+0x2b8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800024be:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024c2:	70 08       	ld.w	r8,r8[0x0]
800024c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024c8:	10 39       	cp.w	r9,r8
800024ca:	c0 93       	brcs	800024dc <OWTouchReset+0x2a8>
800024cc:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024d0:	70 18       	ld.w	r8,r8[0x4]
800024d2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024d6:	10 39       	cp.w	r9,r8
800024d8:	e0 88 00 09 	brls	800024ea <OWTouchReset+0x2b6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024dc:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024e0:	30 18       	mov	r8,1
800024e2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024e6:	30 18       	mov	r8,1
800024e8:	c0 28       	rjmp	800024ec <OWTouchReset+0x2b8>
    }
    return false;
800024ea:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800024ec:	58 08       	cp.w	r8,0
800024ee:	ca b0       	breq	80002444 <OWTouchReset+0x210>
	release_the_bus(idx);
800024f0:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024f4:	10 9c       	mov	r12,r8
800024f6:	f0 1f 00 bf 	mcall	800027f0 <OWTouchReset+0x5bc>
	
	gpio_input(idx); //14may15 experiment
800024fa:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024fe:	10 9c       	mov	r12,r8
80002500:	f0 1f 00 bd 	mcall	800027f4 <OWTouchReset+0x5c0>

	
	cpu_delay_us(I, EC_CPU_CLOCK_100MHZ);	//tMSP (presence detect sample) 60-75us
80002504:	fe f8 02 f4 	ld.w	r8,pc[756]
80002508:	70 08       	ld.w	r8,r8[0x0]
8000250a:	ef 48 ff c4 	st.w	r7[-60],r8
8000250e:	e0 68 e1 00 	mov	r8,57600
80002512:	ea 18 05 f5 	orh	r8,0x5f5
80002516:	ef 48 ff c0 	st.w	r7[-64],r8
8000251a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000251e:	ef 48 ff cc 	st.w	r7[-52],r8
80002522:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002526:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000252a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000252e:	ef 49 ff 3c 	st.w	r7[-196],r9
80002532:	30 08       	mov	r8,0
80002534:	ef 48 ff 38 	st.w	r7[-200],r8
80002538:	ee fc ff c8 	ld.w	r12,r7[-56]
8000253c:	ef 4c ff 34 	st.w	r7[-204],r12
80002540:	30 0b       	mov	r11,0
80002542:	ef 4b ff 30 	st.w	r7[-208],r11
80002546:	ee fa ff 38 	ld.w	r10,r7[-200]
8000254a:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000254e:	b3 3a       	mul	r10,r9
80002550:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002554:	ee fc ff 3c 	ld.w	r12,r7[-196]
80002558:	b9 38       	mul	r8,r12
8000255a:	10 0a       	add	r10,r8
8000255c:	ee fb ff 3c 	ld.w	r11,r7[-196]
80002560:	ee fc ff 34 	ld.w	r12,r7[-204]
80002564:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002568:	12 0a       	add	r10,r9
8000256a:	14 99       	mov	r9,r10
8000256c:	ee 7a 42 3f 	mov	r10,999999
80002570:	30 0b       	mov	r11,0
80002572:	f0 0a 00 0a 	add	r10,r8,r10
80002576:	f2 0b 00 4b 	adc	r11,r9,r11
8000257a:	ee 78 42 40 	mov	r8,1000000
8000257e:	30 09       	mov	r9,0
80002580:	f0 1f 00 99 	mcall	800027e4 <OWTouchReset+0x5b0>
80002584:	14 98       	mov	r8,r10
80002586:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002588:	ef 48 ff d4 	st.w	r7[-44],r8
8000258c:	ee c8 00 9c 	sub	r8,r7,156
80002590:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002594:	e1 b8 00 42 	mfsr	r8,0x108
80002598:	10 99       	mov	r9,r8
8000259a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000259e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025a0:	ee f8 ff d0 	ld.w	r8,r7[-48]
800025a4:	70 09       	ld.w	r9,r8[0x0]
800025a6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800025aa:	10 09       	add	r9,r8
800025ac:	ee f8 ff d0 	ld.w	r8,r7[-48]
800025b0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800025b2:	ee f9 ff d0 	ld.w	r9,r7[-48]
800025b6:	30 08       	mov	r8,0
800025b8:	f3 68 00 08 	st.b	r9[8],r8
800025bc:	ee c8 00 9c 	sub	r8,r7,156
800025c0:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025c4:	e1 b8 00 42 	mfsr	r8,0x108
800025c8:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800025cc:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025d0:	f1 39 00 08 	ld.ub	r9,r8[8]
800025d4:	30 28       	mov	r8,2
800025d6:	f0 09 18 00 	cp.b	r9,r8
800025da:	c0 31       	brne	800025e0 <OWTouchReset+0x3ac>
    return false;
800025dc:	30 08       	mov	r8,0
800025de:	c4 38       	rjmp	80002664 <OWTouchReset+0x430>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800025e0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025e4:	f1 39 00 08 	ld.ub	r9,r8[8]
800025e8:	30 18       	mov	r8,1
800025ea:	f0 09 18 00 	cp.b	r9,r8
800025ee:	c0 31       	brne	800025f4 <OWTouchReset+0x3c0>
    return true;
800025f0:	30 18       	mov	r8,1
800025f2:	c3 98       	rjmp	80002664 <OWTouchReset+0x430>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025f4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025f8:	70 09       	ld.w	r9,r8[0x0]
800025fa:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025fe:	70 18       	ld.w	r8,r8[0x4]
80002600:	10 39       	cp.w	r9,r8
80002602:	e0 88 00 1a 	brls	80002636 <OWTouchReset+0x402>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002606:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000260a:	70 08       	ld.w	r8,r8[0x0]
8000260c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002610:	10 39       	cp.w	r9,r8
80002612:	c1 02       	brcc	80002632 <OWTouchReset+0x3fe>
80002614:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002618:	70 18       	ld.w	r8,r8[0x4]
8000261a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000261e:	10 39       	cp.w	r9,r8
80002620:	e0 88 00 09 	brls	80002632 <OWTouchReset+0x3fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002624:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002628:	30 18       	mov	r8,1
8000262a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000262e:	30 18       	mov	r8,1
80002630:	c1 a8       	rjmp	80002664 <OWTouchReset+0x430>
    }
    return false;
80002632:	30 08       	mov	r8,0
80002634:	c1 88       	rjmp	80002664 <OWTouchReset+0x430>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002636:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000263a:	70 08       	ld.w	r8,r8[0x0]
8000263c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002640:	10 39       	cp.w	r9,r8
80002642:	c0 93       	brcs	80002654 <OWTouchReset+0x420>
80002644:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002648:	70 18       	ld.w	r8,r8[0x4]
8000264a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000264e:	10 39       	cp.w	r9,r8
80002650:	e0 88 00 09 	brls	80002662 <OWTouchReset+0x42e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002654:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002658:	30 18       	mov	r8,1
8000265a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000265e:	30 18       	mov	r8,1
80002660:	c0 28       	rjmp	80002664 <OWTouchReset+0x430>
    }
    return false;
80002662:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002664:	58 08       	cp.w	r8,0
80002666:	ca b0       	breq	800025bc <OWTouchReset+0x388>
	result = sample_line(idx);
80002668:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000266c:	10 9c       	mov	r12,r8
8000266e:	f0 1f 00 64 	mcall	800027fc <OWTouchReset+0x5c8>
80002672:	18 98       	mov	r8,r12
80002674:	ef 48 ff 7c 	st.w	r7[-132],r8
	
	gpio_input(idx); //14may15 experiement
80002678:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000267c:	10 9c       	mov	r12,r8
8000267e:	f0 1f 00 5e 	mcall	800027f4 <OWTouchReset+0x5c0>

	cpu_delay_us(J, EC_CPU_CLOCK_100MHZ); // Complete the reset sequence recovery 5-??us (no max?)
80002682:	4e 08       	lddpc	r8,80002800 <OWTouchReset+0x5cc>
80002684:	70 08       	ld.w	r8,r8[0x0]
80002686:	ef 48 ff e4 	st.w	r7[-28],r8
8000268a:	e0 68 e1 00 	mov	r8,57600
8000268e:	ea 18 05 f5 	orh	r8,0x5f5
80002692:	ef 48 ff e0 	st.w	r7[-32],r8
80002696:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000269a:	ef 48 ff ec 	st.w	r7[-20],r8
8000269e:	ee f8 ff e0 	ld.w	r8,r7[-32]
800026a2:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800026a6:	ee fb ff ec 	ld.w	r11,r7[-20]
800026aa:	ef 4b ff 44 	st.w	r7[-188],r11
800026ae:	30 09       	mov	r9,0
800026b0:	ef 49 ff 40 	st.w	r7[-192],r9
800026b4:	ee f0 ff e8 	ld.w	r0,r7[-24]
800026b8:	30 01       	mov	r1,0
800026ba:	ee fa ff 40 	ld.w	r10,r7[-192]
800026be:	a1 3a       	mul	r10,r0
800026c0:	ee fc ff 44 	ld.w	r12,r7[-188]
800026c4:	e2 0c 02 48 	mul	r8,r1,r12
800026c8:	10 0a       	add	r10,r8
800026ca:	ee fb ff 44 	ld.w	r11,r7[-188]
800026ce:	f6 00 06 48 	mulu.d	r8,r11,r0
800026d2:	12 0a       	add	r10,r9
800026d4:	14 99       	mov	r9,r10
800026d6:	ee 7a 42 3f 	mov	r10,999999
800026da:	30 0b       	mov	r11,0
800026dc:	f0 0a 00 0a 	add	r10,r8,r10
800026e0:	f2 0b 00 4b 	adc	r11,r9,r11
800026e4:	ee 78 42 40 	mov	r8,1000000
800026e8:	30 09       	mov	r9,0
800026ea:	f0 1f 00 3f 	mcall	800027e4 <OWTouchReset+0x5b0>
800026ee:	14 98       	mov	r8,r10
800026f0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800026f2:	ef 48 ff f4 	st.w	r7[-12],r8
800026f6:	ee c8 00 90 	sub	r8,r7,144
800026fa:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026fe:	e1 b8 00 42 	mfsr	r8,0x108
80002702:	10 99       	mov	r9,r8
80002704:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002708:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000270a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000270e:	70 09       	ld.w	r9,r8[0x0]
80002710:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002714:	10 09       	add	r9,r8
80002716:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000271a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000271c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002720:	30 08       	mov	r8,0
80002722:	f3 68 00 08 	st.b	r9[8],r8
80002726:	ee c8 00 90 	sub	r8,r7,144
8000272a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000272e:	e1 b8 00 42 	mfsr	r8,0x108
80002732:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002736:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000273a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000273e:	30 28       	mov	r8,2
80002740:	f0 09 18 00 	cp.b	r9,r8
80002744:	c0 31       	brne	8000274a <OWTouchReset+0x516>
    return false;
80002746:	30 08       	mov	r8,0
80002748:	c4 38       	rjmp	800027ce <OWTouchReset+0x59a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000274a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000274e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002752:	30 18       	mov	r8,1
80002754:	f0 09 18 00 	cp.b	r9,r8
80002758:	c0 31       	brne	8000275e <OWTouchReset+0x52a>
    return true;
8000275a:	30 18       	mov	r8,1
8000275c:	c3 98       	rjmp	800027ce <OWTouchReset+0x59a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000275e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002762:	70 09       	ld.w	r9,r8[0x0]
80002764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002768:	70 18       	ld.w	r8,r8[0x4]
8000276a:	10 39       	cp.w	r9,r8
8000276c:	e0 88 00 1a 	brls	800027a0 <OWTouchReset+0x56c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002774:	70 08       	ld.w	r8,r8[0x0]
80002776:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000277a:	10 39       	cp.w	r9,r8
8000277c:	c1 02       	brcc	8000279c <OWTouchReset+0x568>
8000277e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002782:	70 18       	ld.w	r8,r8[0x4]
80002784:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002788:	10 39       	cp.w	r9,r8
8000278a:	e0 88 00 09 	brls	8000279c <OWTouchReset+0x568>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000278e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002792:	30 18       	mov	r8,1
80002794:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002798:	30 18       	mov	r8,1
8000279a:	c1 a8       	rjmp	800027ce <OWTouchReset+0x59a>
    }
    return false;
8000279c:	30 08       	mov	r8,0
8000279e:	c1 88       	rjmp	800027ce <OWTouchReset+0x59a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800027a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027a4:	70 08       	ld.w	r8,r8[0x0]
800027a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027aa:	10 39       	cp.w	r9,r8
800027ac:	c0 93       	brcs	800027be <OWTouchReset+0x58a>
800027ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027b2:	70 18       	ld.w	r8,r8[0x4]
800027b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027b8:	10 39       	cp.w	r9,r8
800027ba:	e0 88 00 09 	brls	800027cc <OWTouchReset+0x598>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800027c2:	30 18       	mov	r8,1
800027c4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027c8:	30 18       	mov	r8,1
800027ca:	c0 28       	rjmp	800027ce <OWTouchReset+0x59a>
    }
    return false;
800027cc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800027ce:	58 08       	cp.w	r8,0
800027d0:	ca b0       	breq	80002726 <OWTouchReset+0x4f2>
	return result; // Return sample presence pulse result
800027d2:	ee f8 ff 7c 	ld.w	r8,r7[-132]
}
800027d6:	10 9c       	mov	r12,r8
800027d8:	2c 8d       	sub	sp,-224
800027da:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800027de:	00 00       	add	r0,r0
800027e0:	00 00       	add	r0,r0
800027e2:	08 10       	sub	r0,r4
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	c4 3a       	rjmp	8000246c <OWTouchReset+0x238>
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	20 5c       	sub	r12,5
800027ec:	00 00       	add	r0,r0
800027ee:	08 24       	rsub	r4,r4
800027f0:	80 00       	ld.sh	r0,r0[0x0]
800027f2:	20 ac       	sub	r12,10
800027f4:	80 00       	ld.sh	r0,r0[0x0]
800027f6:	20 f0       	sub	r0,15
800027f8:	00 00       	add	r0,r0
800027fa:	08 2c       	rsub	r12,r4
800027fc:	80 00       	ld.sh	r0,r0[0x0]
800027fe:	21 30       	sub	r0,19
80002800:	00 00       	add	r0,r0
80002802:	08 18       	sub	r8,r4

80002804 <drive_DQ_low_and_release_the_bus>:

void drive_DQ_low_and_release_the_bus(unsigned char idx);
void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
80002804:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002808:	1a 97       	mov	r7,sp
8000280a:	20 fd       	sub	sp,60
8000280c:	18 98       	mov	r8,r12
8000280e:	ef 68 ff c4 	st.b	r7[-60],r8
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
80002812:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80002816:	10 9c       	mov	r12,r8
80002818:	f0 1f 00 61 	mcall	8000299c <drive_DQ_low_and_release_the_bus+0x198>
8000281c:	18 98       	mov	r8,r12
8000281e:	ef 68 ff d7 	st.b	r7[-41],r8
	
	ioFlagsInput = (GPIO_DIR_INPUT);
80002822:	30 08       	mov	r8,0
80002824:	ef 48 ff dc 	st.w	r7[-36],r8
	ioFlagsOutput = (GPIO_DIR_OUTPUT); //14may15 experiment
80002828:	30 18       	mov	r8,1
8000282a:	ef 48 ff d8 	st.w	r7[-40],r8

	gpio_configure_pin(ioPin, ioFlagsOutput); //14may15 experiment
8000282e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002832:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80002836:	12 9b       	mov	r11,r9
80002838:	10 9c       	mov	r12,r8
8000283a:	f0 1f 00 5a 	mcall	800029a0 <drive_DQ_low_and_release_the_bus+0x19c>

	gpio_set_pin_low(ioPin);
8000283e:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80002842:	10 9c       	mov	r12,r8
80002844:	f0 1f 00 58 	mcall	800029a4 <drive_DQ_low_and_release_the_bus+0x1a0>
	
	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ);	//tW1L 5-15us
80002848:	4d 88       	lddpc	r8,800029a8 <drive_DQ_low_and_release_the_bus+0x1a4>
8000284a:	70 08       	ld.w	r8,r8[0x0]
8000284c:	ef 48 ff e4 	st.w	r7[-28],r8
80002850:	e0 68 e1 00 	mov	r8,57600
80002854:	ea 18 05 f5 	orh	r8,0x5f5
80002858:	ef 48 ff e0 	st.w	r7[-32],r8
8000285c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002860:	ef 48 ff ec 	st.w	r7[-20],r8
80002864:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002868:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000286c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002870:	30 01       	mov	r1,0
80002872:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002876:	30 03       	mov	r3,0
80002878:	e2 02 02 4a 	mul	r10,r1,r2
8000287c:	e6 00 02 48 	mul	r8,r3,r0
80002880:	10 0a       	add	r10,r8
80002882:	e0 02 06 48 	mulu.d	r8,r0,r2
80002886:	12 0a       	add	r10,r9
80002888:	14 99       	mov	r9,r10
8000288a:	ee 7a 42 3f 	mov	r10,999999
8000288e:	30 0b       	mov	r11,0
80002890:	f0 0a 00 0a 	add	r10,r8,r10
80002894:	f2 0b 00 4b 	adc	r11,r9,r11
80002898:	ee 78 42 40 	mov	r8,1000000
8000289c:	30 09       	mov	r9,0
8000289e:	f0 1f 00 44 	mcall	800029ac <drive_DQ_low_and_release_the_bus+0x1a8>
800028a2:	14 98       	mov	r8,r10
800028a4:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800028a6:	ef 48 ff f4 	st.w	r7[-12],r8
800028aa:	ee c8 00 38 	sub	r8,r7,56
800028ae:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800028b2:	e1 b8 00 42 	mfsr	r8,0x108
800028b6:	10 99       	mov	r9,r8
800028b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028bc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800028be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028c2:	70 09       	ld.w	r9,r8[0x0]
800028c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028c8:	10 09       	add	r9,r8
800028ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028ce:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800028d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800028d4:	30 08       	mov	r8,0
800028d6:	f3 68 00 08 	st.b	r9[8],r8
800028da:	ee c8 00 38 	sub	r8,r7,56
800028de:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800028e2:	e1 b8 00 42 	mfsr	r8,0x108
800028e6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800028ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ee:	f1 39 00 08 	ld.ub	r9,r8[8]
800028f2:	30 28       	mov	r8,2
800028f4:	f0 09 18 00 	cp.b	r9,r8
800028f8:	c0 31       	brne	800028fe <drive_DQ_low_and_release_the_bus+0xfa>
    return false;
800028fa:	30 08       	mov	r8,0
800028fc:	c4 38       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800028fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002902:	f1 39 00 08 	ld.ub	r9,r8[8]
80002906:	30 18       	mov	r8,1
80002908:	f0 09 18 00 	cp.b	r9,r8
8000290c:	c0 31       	brne	80002912 <drive_DQ_low_and_release_the_bus+0x10e>
    return true;
8000290e:	30 18       	mov	r8,1
80002910:	c3 98       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002912:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002916:	70 09       	ld.w	r9,r8[0x0]
80002918:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000291c:	70 18       	ld.w	r8,r8[0x4]
8000291e:	10 39       	cp.w	r9,r8
80002920:	e0 88 00 1a 	brls	80002954 <drive_DQ_low_and_release_the_bus+0x150>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002924:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002928:	70 08       	ld.w	r8,r8[0x0]
8000292a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000292e:	10 39       	cp.w	r9,r8
80002930:	c1 02       	brcc	80002950 <drive_DQ_low_and_release_the_bus+0x14c>
80002932:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002936:	70 18       	ld.w	r8,r8[0x4]
80002938:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000293c:	10 39       	cp.w	r9,r8
8000293e:	e0 88 00 09 	brls	80002950 <drive_DQ_low_and_release_the_bus+0x14c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002942:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002946:	30 18       	mov	r8,1
80002948:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000294c:	30 18       	mov	r8,1
8000294e:	c1 a8       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
    }
    return false;
80002950:	30 08       	mov	r8,0
80002952:	c1 88       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002954:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002958:	70 08       	ld.w	r8,r8[0x0]
8000295a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000295e:	10 39       	cp.w	r9,r8
80002960:	c0 93       	brcs	80002972 <drive_DQ_low_and_release_the_bus+0x16e>
80002962:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002966:	70 18       	ld.w	r8,r8[0x4]
80002968:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000296c:	10 39       	cp.w	r9,r8
8000296e:	e0 88 00 09 	brls	80002980 <drive_DQ_low_and_release_the_bus+0x17c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002972:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002976:	30 18       	mov	r8,1
80002978:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000297c:	30 18       	mov	r8,1
8000297e:	c0 28       	rjmp	80002982 <drive_DQ_low_and_release_the_bus+0x17e>
    }
    return false;
80002980:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002982:	58 08       	cp.w	r8,0
80002984:	ca b0       	breq	800028da <drive_DQ_low_and_release_the_bus+0xd6>

	gpio_configure_pin(ioPin, ioFlagsInput); //14may15 experiment
80002986:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000298a:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000298e:	12 9b       	mov	r11,r9
80002990:	10 9c       	mov	r12,r8
80002992:	f0 1f 00 04 	mcall	800029a0 <drive_DQ_low_and_release_the_bus+0x19c>
	
}
80002996:	2f 1d       	sub	sp,-60
80002998:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000299c:	80 00       	ld.sh	r0,r0[0x0]
8000299e:	20 10       	sub	r0,1
800029a0:	80 00       	ld.sh	r0,r0[0x0]
800029a2:	48 28       	lddpc	r8,800029a8 <drive_DQ_low_and_release_the_bus+0x1a4>
800029a4:	80 00       	ld.sh	r0,r0[0x0]
800029a6:	4b 3c       	lddpc	r12,80002a70 <OWWriteBit+0xc0>
800029a8:	00 00       	add	r0,r0
800029aa:	08 10       	sub	r0,r4
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	c4 3a       	rjmp	80002634 <OWTouchReset+0x400>

800029b0 <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
800029b0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800029b4:	1a 97       	mov	r7,sp
800029b6:	fa cd 00 ac 	sub	sp,sp,172
800029ba:	18 98       	mov	r8,r12
800029bc:	ef 4b ff 74 	st.w	r7[-140],r11
800029c0:	ef 68 ff 78 	st.b	r7[-136],r8
	if (bit)
800029c4:	ee f8 ff 74 	ld.w	r8,r7[-140]
800029c8:	58 08       	cp.w	r8,0
800029ca:	e0 80 00 ba 	breq	80002b3e <OWWriteBit+0x18e>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
800029ce:	ef 38 ff 78 	ld.ub	r8,r7[-136]
800029d2:	10 9c       	mov	r12,r8
800029d4:	f0 1f 01 0a 	mcall	80002dfc <OWWriteBit+0x44c>
#if 0
		drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough		cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tW1L 5-15us
		release_the_bus(idx);
#endif
		cpu_delay_us(B, EC_CPU_CLOCK_100MHZ);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
800029d8:	fe f8 04 28 	ld.w	r8,pc[1064]
800029dc:	70 08       	ld.w	r8,r8[0x0]
800029de:	ef 48 ff a4 	st.w	r7[-92],r8
800029e2:	e0 68 e1 00 	mov	r8,57600
800029e6:	ea 18 05 f5 	orh	r8,0x5f5
800029ea:	ef 48 ff a0 	st.w	r7[-96],r8
800029ee:	ee f8 ff a4 	ld.w	r8,r7[-92]
800029f2:	ef 48 ff ac 	st.w	r7[-84],r8
800029f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800029fa:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800029fe:	ee fc ff ac 	ld.w	r12,r7[-84]
80002a02:	ef 4c ff 60 	st.w	r7[-160],r12
80002a06:	30 0b       	mov	r11,0
80002a08:	ef 4b ff 5c 	st.w	r7[-164],r11
80002a0c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80002a10:	ef 49 ff 58 	st.w	r7[-168],r9
80002a14:	30 08       	mov	r8,0
80002a16:	ef 48 ff 54 	st.w	r7[-172],r8
80002a1a:	ee fa ff 5c 	ld.w	r10,r7[-164]
80002a1e:	ee fc ff 58 	ld.w	r12,r7[-168]
80002a22:	b9 3a       	mul	r10,r12
80002a24:	ee f8 ff 54 	ld.w	r8,r7[-172]
80002a28:	ee fb ff 60 	ld.w	r11,r7[-160]
80002a2c:	b7 38       	mul	r8,r11
80002a2e:	10 0a       	add	r10,r8
80002a30:	ee fc ff 60 	ld.w	r12,r7[-160]
80002a34:	ee fb ff 58 	ld.w	r11,r7[-168]
80002a38:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002a3c:	12 0a       	add	r10,r9
80002a3e:	14 99       	mov	r9,r10
80002a40:	ee 7a 42 3f 	mov	r10,999999
80002a44:	30 0b       	mov	r11,0
80002a46:	f0 0a 00 0a 	add	r10,r8,r10
80002a4a:	f2 0b 00 4b 	adc	r11,r9,r11
80002a4e:	ee 78 42 40 	mov	r8,1000000
80002a52:	30 09       	mov	r9,0
80002a54:	f0 1f 00 ec 	mcall	80002e04 <OWWriteBit+0x454>
80002a58:	14 98       	mov	r8,r10
80002a5a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002a5c:	ef 48 ff b4 	st.w	r7[-76],r8
80002a60:	ee c8 00 84 	sub	r8,r7,132
80002a64:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a68:	e1 b8 00 42 	mfsr	r8,0x108
80002a6c:	10 99       	mov	r9,r8
80002a6e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a72:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a74:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a78:	70 09       	ld.w	r9,r8[0x0]
80002a7a:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002a7e:	10 09       	add	r9,r8
80002a80:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a84:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002a86:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002a8a:	30 08       	mov	r8,0
80002a8c:	f3 68 00 08 	st.b	r9[8],r8
80002a90:	ee c8 00 84 	sub	r8,r7,132
80002a94:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a98:	e1 b8 00 42 	mfsr	r8,0x108
80002a9c:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002aa0:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002aa4:	f1 39 00 08 	ld.ub	r9,r8[8]
80002aa8:	30 28       	mov	r8,2
80002aaa:	f0 09 18 00 	cp.b	r9,r8
80002aae:	c0 31       	brne	80002ab4 <OWWriteBit+0x104>
    return false;
80002ab0:	30 08       	mov	r8,0
80002ab2:	c4 38       	rjmp	80002b38 <OWWriteBit+0x188>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002ab4:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ab8:	f1 39 00 08 	ld.ub	r9,r8[8]
80002abc:	30 18       	mov	r8,1
80002abe:	f0 09 18 00 	cp.b	r9,r8
80002ac2:	c0 31       	brne	80002ac8 <OWWriteBit+0x118>
    return true;
80002ac4:	30 18       	mov	r8,1
80002ac6:	c3 98       	rjmp	80002b38 <OWWriteBit+0x188>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ac8:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002acc:	70 09       	ld.w	r9,r8[0x0]
80002ace:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ad2:	70 18       	ld.w	r8,r8[0x4]
80002ad4:	10 39       	cp.w	r9,r8
80002ad6:	e0 88 00 1a 	brls	80002b0a <OWWriteBit+0x15a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ada:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ade:	70 08       	ld.w	r8,r8[0x0]
80002ae0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002ae4:	10 39       	cp.w	r9,r8
80002ae6:	c1 02       	brcc	80002b06 <OWWriteBit+0x156>
80002ae8:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002aec:	70 18       	ld.w	r8,r8[0x4]
80002aee:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002af2:	10 39       	cp.w	r9,r8
80002af4:	e0 88 00 09 	brls	80002b06 <OWWriteBit+0x156>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002af8:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002afc:	30 18       	mov	r8,1
80002afe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b02:	30 18       	mov	r8,1
80002b04:	c1 a8       	rjmp	80002b38 <OWWriteBit+0x188>
    }
    return false;
80002b06:	30 08       	mov	r8,0
80002b08:	c1 88       	rjmp	80002b38 <OWWriteBit+0x188>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002b0a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002b0e:	70 08       	ld.w	r8,r8[0x0]
80002b10:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002b14:	10 39       	cp.w	r9,r8
80002b16:	c0 93       	brcs	80002b28 <OWWriteBit+0x178>
80002b18:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002b1c:	70 18       	ld.w	r8,r8[0x4]
80002b1e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002b22:	10 39       	cp.w	r9,r8
80002b24:	e0 88 00 09 	brls	80002b36 <OWWriteBit+0x186>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002b28:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002b2c:	30 18       	mov	r8,1
80002b2e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b32:	30 18       	mov	r8,1
80002b34:	c0 28       	rjmp	80002b38 <OWWriteBit+0x188>
    }
    return false;
80002b36:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002b38:	58 08       	cp.w	r8,0
80002b3a:	ca b0       	breq	80002a90 <OWWriteBit+0xe0>
80002b3c:	c5 c9       	rjmp	80002df4 <OWWriteBit+0x444>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
80002b3e:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002b42:	10 9c       	mov	r12,r8
80002b44:	f0 1f 00 b1 	mcall	80002e08 <OWWriteBit+0x458>
		cpu_delay_us(C, EC_CPU_CLOCK_100MHZ);	//tW0L 60-120us
80002b48:	fe f8 02 c4 	ld.w	r8,pc[708]
80002b4c:	70 08       	ld.w	r8,r8[0x0]
80002b4e:	ef 48 ff c4 	st.w	r7[-60],r8
80002b52:	e0 68 e1 00 	mov	r8,57600
80002b56:	ea 18 05 f5 	orh	r8,0x5f5
80002b5a:	ef 48 ff c0 	st.w	r7[-64],r8
80002b5e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002b62:	ef 48 ff cc 	st.w	r7[-52],r8
80002b66:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002b6a:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002b6e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80002b72:	ef 49 ff 70 	st.w	r7[-144],r9
80002b76:	30 08       	mov	r8,0
80002b78:	ef 48 ff 6c 	st.w	r7[-148],r8
80002b7c:	ee fc ff c8 	ld.w	r12,r7[-56]
80002b80:	ef 4c ff 68 	st.w	r7[-152],r12
80002b84:	30 0b       	mov	r11,0
80002b86:	ef 4b ff 64 	st.w	r7[-156],r11
80002b8a:	ee fa ff 6c 	ld.w	r10,r7[-148]
80002b8e:	ee f9 ff 68 	ld.w	r9,r7[-152]
80002b92:	b3 3a       	mul	r10,r9
80002b94:	ee f8 ff 64 	ld.w	r8,r7[-156]
80002b98:	ee fc ff 70 	ld.w	r12,r7[-144]
80002b9c:	b9 38       	mul	r8,r12
80002b9e:	10 0a       	add	r10,r8
80002ba0:	ee fb ff 70 	ld.w	r11,r7[-144]
80002ba4:	ee fc ff 68 	ld.w	r12,r7[-152]
80002ba8:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002bac:	12 0a       	add	r10,r9
80002bae:	14 99       	mov	r9,r10
80002bb0:	ee 7a 42 3f 	mov	r10,999999
80002bb4:	30 0b       	mov	r11,0
80002bb6:	f0 0a 00 0a 	add	r10,r8,r10
80002bba:	f2 0b 00 4b 	adc	r11,r9,r11
80002bbe:	ee 78 42 40 	mov	r8,1000000
80002bc2:	30 09       	mov	r9,0
80002bc4:	f0 1f 00 90 	mcall	80002e04 <OWWriteBit+0x454>
80002bc8:	14 98       	mov	r8,r10
80002bca:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002bcc:	ef 48 ff d4 	st.w	r7[-44],r8
80002bd0:	ee c8 00 78 	sub	r8,r7,120
80002bd4:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002bd8:	e1 b8 00 42 	mfsr	r8,0x108
80002bdc:	10 99       	mov	r9,r8
80002bde:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002be2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002be4:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002be8:	70 09       	ld.w	r9,r8[0x0]
80002bea:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002bee:	10 09       	add	r9,r8
80002bf0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002bf4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002bf6:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002bfa:	30 08       	mov	r8,0
80002bfc:	f3 68 00 08 	st.b	r9[8],r8
80002c00:	ee c8 00 78 	sub	r8,r7,120
80002c04:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c08:	e1 b8 00 42 	mfsr	r8,0x108
80002c0c:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002c10:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c14:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c18:	30 28       	mov	r8,2
80002c1a:	f0 09 18 00 	cp.b	r9,r8
80002c1e:	c0 31       	brne	80002c24 <OWWriteBit+0x274>
    return false;
80002c20:	30 08       	mov	r8,0
80002c22:	c4 38       	rjmp	80002ca8 <OWWriteBit+0x2f8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002c24:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c28:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c2c:	30 18       	mov	r8,1
80002c2e:	f0 09 18 00 	cp.b	r9,r8
80002c32:	c0 31       	brne	80002c38 <OWWriteBit+0x288>
    return true;
80002c34:	30 18       	mov	r8,1
80002c36:	c3 98       	rjmp	80002ca8 <OWWriteBit+0x2f8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c38:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c3c:	70 09       	ld.w	r9,r8[0x0]
80002c3e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c42:	70 18       	ld.w	r8,r8[0x4]
80002c44:	10 39       	cp.w	r9,r8
80002c46:	e0 88 00 1a 	brls	80002c7a <OWWriteBit+0x2ca>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c4a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c4e:	70 08       	ld.w	r8,r8[0x0]
80002c50:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c54:	10 39       	cp.w	r9,r8
80002c56:	c1 02       	brcc	80002c76 <OWWriteBit+0x2c6>
80002c58:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c5c:	70 18       	ld.w	r8,r8[0x4]
80002c5e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c62:	10 39       	cp.w	r9,r8
80002c64:	e0 88 00 09 	brls	80002c76 <OWWriteBit+0x2c6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c68:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c6c:	30 18       	mov	r8,1
80002c6e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002c72:	30 18       	mov	r8,1
80002c74:	c1 a8       	rjmp	80002ca8 <OWWriteBit+0x2f8>
    }
    return false;
80002c76:	30 08       	mov	r8,0
80002c78:	c1 88       	rjmp	80002ca8 <OWWriteBit+0x2f8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c7a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c7e:	70 08       	ld.w	r8,r8[0x0]
80002c80:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c84:	10 39       	cp.w	r9,r8
80002c86:	c0 93       	brcs	80002c98 <OWWriteBit+0x2e8>
80002c88:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c8c:	70 18       	ld.w	r8,r8[0x4]
80002c8e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c92:	10 39       	cp.w	r9,r8
80002c94:	e0 88 00 09 	brls	80002ca6 <OWWriteBit+0x2f6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c98:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c9c:	30 18       	mov	r8,1
80002c9e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ca2:	30 18       	mov	r8,1
80002ca4:	c0 28       	rjmp	80002ca8 <OWWriteBit+0x2f8>
    }
    return false;
80002ca6:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002ca8:	58 08       	cp.w	r8,0
80002caa:	ca b0       	breq	80002c00 <OWWriteBit+0x250>
		release_the_bus(idx);
80002cac:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002cb0:	10 9c       	mov	r12,r8
80002cb2:	f0 1f 00 58 	mcall	80002e10 <OWWriteBit+0x460>
		cpu_delay_us(D, EC_CPU_CLOCK_100MHZ);	//tREC 5-??us
80002cb6:	4d 88       	lddpc	r8,80002e14 <OWWriteBit+0x464>
80002cb8:	70 08       	ld.w	r8,r8[0x0]
80002cba:	ef 48 ff e4 	st.w	r7[-28],r8
80002cbe:	e0 68 e1 00 	mov	r8,57600
80002cc2:	ea 18 05 f5 	orh	r8,0x5f5
80002cc6:	ef 48 ff e0 	st.w	r7[-32],r8
80002cca:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002cce:	ef 48 ff ec 	st.w	r7[-20],r8
80002cd2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002cd6:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002cda:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002cde:	30 01       	mov	r1,0
80002ce0:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002ce4:	30 03       	mov	r3,0
80002ce6:	e2 02 02 4a 	mul	r10,r1,r2
80002cea:	e6 00 02 48 	mul	r8,r3,r0
80002cee:	10 0a       	add	r10,r8
80002cf0:	e0 02 06 48 	mulu.d	r8,r0,r2
80002cf4:	12 0a       	add	r10,r9
80002cf6:	14 99       	mov	r9,r10
80002cf8:	ee 7a 42 3f 	mov	r10,999999
80002cfc:	30 0b       	mov	r11,0
80002cfe:	f0 0a 00 0a 	add	r10,r8,r10
80002d02:	f2 0b 00 4b 	adc	r11,r9,r11
80002d06:	ee 78 42 40 	mov	r8,1000000
80002d0a:	30 09       	mov	r9,0
80002d0c:	f0 1f 00 3e 	mcall	80002e04 <OWWriteBit+0x454>
80002d10:	14 98       	mov	r8,r10
80002d12:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002d14:	ef 48 ff f4 	st.w	r7[-12],r8
80002d18:	ee c8 00 6c 	sub	r8,r7,108
80002d1c:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d20:	e1 b8 00 42 	mfsr	r8,0x108
80002d24:	10 99       	mov	r9,r8
80002d26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d2a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d30:	70 09       	ld.w	r9,r8[0x0]
80002d32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d36:	10 09       	add	r9,r8
80002d38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d3c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002d3e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002d42:	30 08       	mov	r8,0
80002d44:	f3 68 00 08 	st.b	r9[8],r8
80002d48:	ee c8 00 6c 	sub	r8,r7,108
80002d4c:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d50:	e1 b8 00 42 	mfsr	r8,0x108
80002d54:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002d58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d5c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d60:	30 28       	mov	r8,2
80002d62:	f0 09 18 00 	cp.b	r9,r8
80002d66:	c0 31       	brne	80002d6c <OWWriteBit+0x3bc>
    return false;
80002d68:	30 08       	mov	r8,0
80002d6a:	c4 38       	rjmp	80002df0 <OWWriteBit+0x440>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d70:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d74:	30 18       	mov	r8,1
80002d76:	f0 09 18 00 	cp.b	r9,r8
80002d7a:	c0 31       	brne	80002d80 <OWWriteBit+0x3d0>
    return true;
80002d7c:	30 18       	mov	r8,1
80002d7e:	c3 98       	rjmp	80002df0 <OWWriteBit+0x440>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d84:	70 09       	ld.w	r9,r8[0x0]
80002d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d8a:	70 18       	ld.w	r8,r8[0x4]
80002d8c:	10 39       	cp.w	r9,r8
80002d8e:	e0 88 00 1a 	brls	80002dc2 <OWWriteBit+0x412>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d96:	70 08       	ld.w	r8,r8[0x0]
80002d98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d9c:	10 39       	cp.w	r9,r8
80002d9e:	c1 02       	brcc	80002dbe <OWWriteBit+0x40e>
80002da0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002da4:	70 18       	ld.w	r8,r8[0x4]
80002da6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002daa:	10 39       	cp.w	r9,r8
80002dac:	e0 88 00 09 	brls	80002dbe <OWWriteBit+0x40e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002db0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002db4:	30 18       	mov	r8,1
80002db6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dba:	30 18       	mov	r8,1
80002dbc:	c1 a8       	rjmp	80002df0 <OWWriteBit+0x440>
    }
    return false;
80002dbe:	30 08       	mov	r8,0
80002dc0:	c1 88       	rjmp	80002df0 <OWWriteBit+0x440>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dc6:	70 08       	ld.w	r8,r8[0x0]
80002dc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dcc:	10 39       	cp.w	r9,r8
80002dce:	c0 93       	brcs	80002de0 <OWWriteBit+0x430>
80002dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dd4:	70 18       	ld.w	r8,r8[0x4]
80002dd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dda:	10 39       	cp.w	r9,r8
80002ddc:	e0 88 00 09 	brls	80002dee <OWWriteBit+0x43e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002de0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002de4:	30 18       	mov	r8,1
80002de6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dea:	30 18       	mov	r8,1
80002dec:	c0 28       	rjmp	80002df0 <OWWriteBit+0x440>
    }
    return false;
80002dee:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002df0:	58 08       	cp.w	r8,0
80002df2:	ca b0       	breq	80002d48 <OWWriteBit+0x398>
	}
}
80002df4:	2d 5d       	sub	sp,-172
80002df6:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002dfa:	00 00       	add	r0,r0
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	28 04       	sub	r4,-128
80002e00:	00 00       	add	r0,r0
80002e02:	08 14       	sub	r4,r4
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	c4 3a       	rjmp	80002a8c <OWWriteBit+0xdc>
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	20 5c       	sub	r12,5
80002e0c:	00 00       	add	r0,r0
80002e0e:	08 1c       	sub	r12,r4
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	20 ac       	sub	r12,10
80002e14:	00 00       	add	r0,r0
80002e16:	08 0c       	add	r12,r4

80002e18 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
80002e18:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002e1c:	1a 97       	mov	r7,sp
80002e1e:	21 cd       	sub	sp,112
80002e20:	18 98       	mov	r8,r12
80002e22:	ef 68 ff a0 	st.b	r7[-96],r8
#if 0
	drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough	cpu_delay_us(A, EC_CPU_CLOCK_100MHZ	//tRL 5-15us
	release_the_bus(idx);
#endif
	drive_DQ_low_and_release_the_bus(idx);
80002e26:	ef 38 ff a0 	ld.ub	r8,r7[-96]
80002e2a:	10 9c       	mov	r12,r8
80002e2c:	f0 1f 00 b1 	mcall	800030f0 <OWReadBit+0x2d8>
	
	cpu_delay_us(E, EC_CPU_CLOCK_100MHZ);	//tMSR 5-15us
80002e30:	fe f8 02 c4 	ld.w	r8,pc[708]
80002e34:	70 08       	ld.w	r8,r8[0x0]
80002e36:	ef 48 ff c4 	st.w	r7[-60],r8
80002e3a:	e0 68 e1 00 	mov	r8,57600
80002e3e:	ea 18 05 f5 	orh	r8,0x5f5
80002e42:	ef 48 ff c0 	st.w	r7[-64],r8
80002e46:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002e4a:	ef 48 ff cc 	st.w	r7[-52],r8
80002e4e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002e52:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002e56:	ee fc ff cc 	ld.w	r12,r7[-52]
80002e5a:	ef 4c ff 9c 	st.w	r7[-100],r12
80002e5e:	30 0b       	mov	r11,0
80002e60:	ef 4b ff 98 	st.w	r7[-104],r11
80002e64:	ee f9 ff c8 	ld.w	r9,r7[-56]
80002e68:	ef 49 ff 94 	st.w	r7[-108],r9
80002e6c:	30 08       	mov	r8,0
80002e6e:	ef 48 ff 90 	st.w	r7[-112],r8
80002e72:	ee fa ff 98 	ld.w	r10,r7[-104]
80002e76:	ee fc ff 94 	ld.w	r12,r7[-108]
80002e7a:	b9 3a       	mul	r10,r12
80002e7c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002e80:	ee fb ff 9c 	ld.w	r11,r7[-100]
80002e84:	b7 38       	mul	r8,r11
80002e86:	10 0a       	add	r10,r8
80002e88:	ee fc ff 9c 	ld.w	r12,r7[-100]
80002e8c:	ee fb ff 94 	ld.w	r11,r7[-108]
80002e90:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002e94:	12 0a       	add	r10,r9
80002e96:	14 99       	mov	r9,r10
80002e98:	ee 7a 42 3f 	mov	r10,999999
80002e9c:	30 0b       	mov	r11,0
80002e9e:	f0 0a 00 0a 	add	r10,r8,r10
80002ea2:	f2 0b 00 4b 	adc	r11,r9,r11
80002ea6:	ee 78 42 40 	mov	r8,1000000
80002eaa:	30 09       	mov	r9,0
80002eac:	f0 1f 00 93 	mcall	800030f8 <OWReadBit+0x2e0>
80002eb0:	14 98       	mov	r8,r10
80002eb2:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002eb4:	ef 48 ff d4 	st.w	r7[-44],r8
80002eb8:	ee c8 00 5c 	sub	r8,r7,92
80002ebc:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ec0:	e1 b8 00 42 	mfsr	r8,0x108
80002ec4:	10 99       	mov	r9,r8
80002ec6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002eca:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ecc:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002ed0:	70 09       	ld.w	r9,r8[0x0]
80002ed2:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ed6:	10 09       	add	r9,r8
80002ed8:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002edc:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002ede:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002ee2:	30 08       	mov	r8,0
80002ee4:	f3 68 00 08 	st.b	r9[8],r8
80002ee8:	ee c8 00 5c 	sub	r8,r7,92
80002eec:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ef0:	e1 b8 00 42 	mfsr	r8,0x108
80002ef4:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002ef8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002efc:	f1 39 00 08 	ld.ub	r9,r8[8]
80002f00:	30 28       	mov	r8,2
80002f02:	f0 09 18 00 	cp.b	r9,r8
80002f06:	c0 31       	brne	80002f0c <OWReadBit+0xf4>
    return false;
80002f08:	30 08       	mov	r8,0
80002f0a:	c4 38       	rjmp	80002f90 <OWReadBit+0x178>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002f0c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f10:	f1 39 00 08 	ld.ub	r9,r8[8]
80002f14:	30 18       	mov	r8,1
80002f16:	f0 09 18 00 	cp.b	r9,r8
80002f1a:	c0 31       	brne	80002f20 <OWReadBit+0x108>
    return true;
80002f1c:	30 18       	mov	r8,1
80002f1e:	c3 98       	rjmp	80002f90 <OWReadBit+0x178>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f20:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f24:	70 09       	ld.w	r9,r8[0x0]
80002f26:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f2a:	70 18       	ld.w	r8,r8[0x4]
80002f2c:	10 39       	cp.w	r9,r8
80002f2e:	e0 88 00 1a 	brls	80002f62 <OWReadBit+0x14a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f32:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f36:	70 08       	ld.w	r8,r8[0x0]
80002f38:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f3c:	10 39       	cp.w	r9,r8
80002f3e:	c1 02       	brcc	80002f5e <OWReadBit+0x146>
80002f40:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f44:	70 18       	ld.w	r8,r8[0x4]
80002f46:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f4a:	10 39       	cp.w	r9,r8
80002f4c:	e0 88 00 09 	brls	80002f5e <OWReadBit+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002f50:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002f54:	30 18       	mov	r8,1
80002f56:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002f5a:	30 18       	mov	r8,1
80002f5c:	c1 a8       	rjmp	80002f90 <OWReadBit+0x178>
    }
    return false;
80002f5e:	30 08       	mov	r8,0
80002f60:	c1 88       	rjmp	80002f90 <OWReadBit+0x178>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f62:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f66:	70 08       	ld.w	r8,r8[0x0]
80002f68:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f6c:	10 39       	cp.w	r9,r8
80002f6e:	c0 93       	brcs	80002f80 <OWReadBit+0x168>
80002f70:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002f74:	70 18       	ld.w	r8,r8[0x4]
80002f76:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002f7a:	10 39       	cp.w	r9,r8
80002f7c:	e0 88 00 09 	brls	80002f8e <OWReadBit+0x176>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002f80:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002f84:	30 18       	mov	r8,1
80002f86:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002f8a:	30 18       	mov	r8,1
80002f8c:	c0 28       	rjmp	80002f90 <OWReadBit+0x178>
    }
    return false;
80002f8e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002f90:	58 08       	cp.w	r8,0
80002f92:	ca b0       	breq	80002ee8 <OWReadBit+0xd0>
	result = sample_line(idx);
80002f94:	ef 38 ff a0 	ld.ub	r8,r7[-96]
80002f98:	10 9c       	mov	r12,r8
80002f9a:	f0 1f 00 59 	mcall	800030fc <OWReadBit+0x2e4>
80002f9e:	18 98       	mov	r8,r12
80002fa0:	ef 48 ff bc 	st.w	r7[-68],r8
	cpu_delay_us(F, EC_CPU_CLOCK_100MHZ); // Complete the time slot and 10us recovery tREC 5+us
80002fa4:	4d 78       	lddpc	r8,80003100 <OWReadBit+0x2e8>
80002fa6:	70 08       	ld.w	r8,r8[0x0]
80002fa8:	ef 48 ff e4 	st.w	r7[-28],r8
80002fac:	e0 68 e1 00 	mov	r8,57600
80002fb0:	ea 18 05 f5 	orh	r8,0x5f5
80002fb4:	ef 48 ff e0 	st.w	r7[-32],r8
80002fb8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002fbc:	ef 48 ff ec 	st.w	r7[-20],r8
80002fc0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002fc4:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002fc8:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002fcc:	30 01       	mov	r1,0
80002fce:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002fd2:	30 03       	mov	r3,0
80002fd4:	e2 02 02 4a 	mul	r10,r1,r2
80002fd8:	e6 00 02 48 	mul	r8,r3,r0
80002fdc:	10 0a       	add	r10,r8
80002fde:	e0 02 06 48 	mulu.d	r8,r0,r2
80002fe2:	12 0a       	add	r10,r9
80002fe4:	14 99       	mov	r9,r10
80002fe6:	ee 7a 42 3f 	mov	r10,999999
80002fea:	30 0b       	mov	r11,0
80002fec:	f0 0a 00 0a 	add	r10,r8,r10
80002ff0:	f2 0b 00 4b 	adc	r11,r9,r11
80002ff4:	ee 78 42 40 	mov	r8,1000000
80002ff8:	30 09       	mov	r9,0
80002ffa:	f0 1f 00 40 	mcall	800030f8 <OWReadBit+0x2e0>
80002ffe:	14 98       	mov	r8,r10
80003000:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80003002:	ef 48 ff f4 	st.w	r7[-12],r8
80003006:	ee c8 00 50 	sub	r8,r7,80
8000300a:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000300e:	e1 b8 00 42 	mfsr	r8,0x108
80003012:	10 99       	mov	r9,r8
80003014:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003018:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000301a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000301e:	70 09       	ld.w	r9,r8[0x0]
80003020:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003024:	10 09       	add	r9,r8
80003026:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000302a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000302c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003030:	30 08       	mov	r8,0
80003032:	f3 68 00 08 	st.b	r9[8],r8
80003036:	ee c8 00 50 	sub	r8,r7,80
8000303a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000303e:	e1 b8 00 42 	mfsr	r8,0x108
80003042:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000304a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000304e:	30 28       	mov	r8,2
80003050:	f0 09 18 00 	cp.b	r9,r8
80003054:	c0 31       	brne	8000305a <OWReadBit+0x242>
    return false;
80003056:	30 08       	mov	r8,0
80003058:	c4 38       	rjmp	800030de <OWReadBit+0x2c6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000305a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000305e:	f1 39 00 08 	ld.ub	r9,r8[8]
80003062:	30 18       	mov	r8,1
80003064:	f0 09 18 00 	cp.b	r9,r8
80003068:	c0 31       	brne	8000306e <OWReadBit+0x256>
    return true;
8000306a:	30 18       	mov	r8,1
8000306c:	c3 98       	rjmp	800030de <OWReadBit+0x2c6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000306e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003072:	70 09       	ld.w	r9,r8[0x0]
80003074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003078:	70 18       	ld.w	r8,r8[0x4]
8000307a:	10 39       	cp.w	r9,r8
8000307c:	e0 88 00 1a 	brls	800030b0 <OWReadBit+0x298>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003084:	70 08       	ld.w	r8,r8[0x0]
80003086:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000308a:	10 39       	cp.w	r9,r8
8000308c:	c1 02       	brcc	800030ac <OWReadBit+0x294>
8000308e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003092:	70 18       	ld.w	r8,r8[0x4]
80003094:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003098:	10 39       	cp.w	r9,r8
8000309a:	e0 88 00 09 	brls	800030ac <OWReadBit+0x294>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000309e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800030a2:	30 18       	mov	r8,1
800030a4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800030a8:	30 18       	mov	r8,1
800030aa:	c1 a8       	rjmp	800030de <OWReadBit+0x2c6>
    }
    return false;
800030ac:	30 08       	mov	r8,0
800030ae:	c1 88       	rjmp	800030de <OWReadBit+0x2c6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030b4:	70 08       	ld.w	r8,r8[0x0]
800030b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800030ba:	10 39       	cp.w	r9,r8
800030bc:	c0 93       	brcs	800030ce <OWReadBit+0x2b6>
800030be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030c2:	70 18       	ld.w	r8,r8[0x4]
800030c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800030c8:	10 39       	cp.w	r9,r8
800030ca:	e0 88 00 09 	brls	800030dc <OWReadBit+0x2c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800030ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800030d2:	30 18       	mov	r8,1
800030d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800030d8:	30 18       	mov	r8,1
800030da:	c0 28       	rjmp	800030de <OWReadBit+0x2c6>
    }
    return false;
800030dc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800030de:	58 08       	cp.w	r8,0
800030e0:	ca b0       	breq	80003036 <OWReadBit+0x21e>

	return result;
800030e2:	ee f8 ff bc 	ld.w	r8,r7[-68]
}
800030e6:	10 9c       	mov	r12,r8
800030e8:	2e 4d       	sub	sp,-112
800030ea:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800030ee:	00 00       	add	r0,r0
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	28 04       	sub	r4,-128
800030f4:	00 00       	add	r0,r0
800030f6:	08 28       	rsub	r8,r4
800030f8:	80 00       	ld.sh	r0,r0[0x0]
800030fa:	c4 3a       	rjmp	80002d80 <OWWriteBit+0x3d0>
800030fc:	80 00       	ld.sh	r0,r0[0x0]
800030fe:	21 30       	sub	r0,19
80003100:	00 00       	add	r0,r0
80003102:	08 30       	cp.w	r0,r4

80003104 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
80003104:	eb cd 40 80 	pushm	r7,lr
80003108:	1a 97       	mov	r7,sp
8000310a:	20 3d       	sub	sp,12
8000310c:	18 98       	mov	r8,r12
8000310e:	ef 4b ff f4 	st.w	r7[-12],r11
80003112:	ef 68 ff f8 	st.b	r7[-8],r8
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
80003116:	30 08       	mov	r8,0
80003118:	ef 48 ff fc 	st.w	r7[-4],r8
8000311c:	c1 58       	rjmp	80003146 <OWWriteByte+0x42>
	{
		OWWriteBit(idx, data & 0x01);
8000311e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003122:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80003126:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000312a:	12 9b       	mov	r11,r9
8000312c:	10 9c       	mov	r12,r8
8000312e:	f0 1f 00 0b 	mcall	80003158 <OWWriteByte+0x54>

		// shift the data byte for the next bit
		data >>= 1;
80003132:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003136:	a1 58       	asr	r8,0x1
80003138:	ef 48 ff f4 	st.w	r7[-12],r8
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
8000313c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003140:	2f f8       	sub	r8,-1
80003142:	ef 48 ff fc 	st.w	r7[-4],r8
80003146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000314a:	58 78       	cp.w	r8,7
8000314c:	fe 9a ff e9 	brle	8000311e <OWWriteByte+0x1a>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
80003150:	2f dd       	sub	sp,-12
80003152:	e3 cd 80 80 	ldm	sp++,r7,pc
80003156:	00 00       	add	r0,r0
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	29 b0       	sub	r0,-101

8000315c <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
8000315c:	eb cd 40 80 	pushm	r7,lr
80003160:	1a 97       	mov	r7,sp
80003162:	20 3d       	sub	sp,12
80003164:	18 98       	mov	r8,r12
80003166:	ef 68 ff f4 	st.b	r7[-12],r8
	int loop, result=0;
8000316a:	30 08       	mov	r8,0
8000316c:	ef 48 ff fc 	st.w	r7[-4],r8

	for (loop = 0; loop < 8; loop++)
80003170:	30 08       	mov	r8,0
80003172:	ef 48 ff f8 	st.w	r7[-8],r8
80003176:	c1 88       	rjmp	800031a6 <OWReadByte+0x4a>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
80003178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000317c:	a1 58       	asr	r8,0x1
8000317e:	ef 48 ff fc 	st.w	r7[-4],r8

		// if result is one, then set MS bit
		if (OWReadBit(idx))
80003182:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003186:	10 9c       	mov	r12,r8
80003188:	f0 1f 00 0d 	mcall	800031bc <OWReadByte+0x60>
8000318c:	18 98       	mov	r8,r12
8000318e:	58 08       	cp.w	r8,0
80003190:	c0 60       	breq	8000319c <OWReadByte+0x40>
		result |= 0x80;
80003192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003196:	a7 b8       	sbr	r8,0x7
80003198:	ef 48 ff fc 	st.w	r7[-4],r8
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
8000319c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031a0:	2f f8       	sub	r8,-1
800031a2:	ef 48 ff f8 	st.w	r7[-8],r8
800031a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031aa:	58 78       	cp.w	r8,7
800031ac:	fe 9a ff e6 	brle	80003178 <OWReadByte+0x1c>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
800031b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800031b4:	10 9c       	mov	r12,r8
800031b6:	2f dd       	sub	sp,-12
800031b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800031bc:	80 00       	ld.sh	r0,r0[0x0]
800031be:	2e 18       	sub	r8,-31

800031c0 <crc8_add>:
	return OWTouchReset(idx);
}

/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
800031c0:	eb cd 40 80 	pushm	r7,lr
800031c4:	1a 97       	mov	r7,sp
800031c6:	20 3d       	sub	sp,12
800031c8:	18 99       	mov	r9,r12
800031ca:	16 98       	mov	r8,r11
800031cc:	ef 69 ff f8 	st.b	r7[-8],r9
800031d0:	ef 68 ff f4 	st.b	r7[-12],r8
   int i;
   acc ^= byte;
800031d4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800031d8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800031dc:	f3 e8 20 08 	eor	r8,r9,r8
800031e0:	ef 68 ff f8 	st.b	r7[-8],r8
   for(i = 0; i < 8; i++) 
800031e4:	30 08       	mov	r8,0
800031e6:	ef 48 ff fc 	st.w	r7[-4],r8
800031ea:	c1 c8       	rjmp	80003222 <crc8_add+0x62>
   {
		if(acc & 1) 
800031ec:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800031f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800031f4:	5c 58       	castu.b	r8
800031f6:	c0 c0       	breq	8000320e <crc8_add+0x4e>
		{
			acc = (acc >> 1) ^ 0x8c;
800031f8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800031fc:	a1 98       	lsr	r8,0x1
800031fe:	5c 58       	castu.b	r8
80003200:	ee 18 ff ff 	eorh	r8,0xffff
80003204:	ec 18 ff 8c 	eorl	r8,0xff8c
80003208:	ef 68 ff f8 	st.b	r7[-8],r8
8000320c:	c0 68       	rjmp	80003218 <crc8_add+0x58>
		} 
		else 
		{
			acc >>= 1;
8000320e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003212:	a1 98       	lsr	r8,0x1
80003214:	ef 68 ff f8 	st.b	r7[-8],r8
/* Polynomial ^8 + ^5 + ^4 + 1 */
unsigned char crc8_add(unsigned char acc, unsigned char byte)
{
   int i;
   acc ^= byte;
   for(i = 0; i < 8; i++) 
80003218:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000321c:	2f f8       	sub	r8,-1
8000321e:	ef 48 ff fc 	st.w	r7[-4],r8
80003222:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003226:	58 78       	cp.w	r8,7
80003228:	fe 9a ff e2 	brle	800031ec <crc8_add+0x2c>
		else 
		{
			acc >>= 1;
	    }
   }
   return acc;
8000322c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
}
80003230:	10 9c       	mov	r12,r8
80003232:	2f dd       	sub	sp,-12
80003234:	e3 cd 80 80 	ldm	sp++,r7,pc

80003238 <init_ecdbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_ecdbg_rs232(long pba_hz)
{
80003238:	eb cd 40 80 	pushm	r7,lr
8000323c:	1a 97       	mov	r7,sp
8000323e:	20 1d       	sub	sp,4
80003240:	ef 4c ff fc 	st.w	r7[-4],r12
  init_ecdbg_rs232_ex(ECDBG_USART_BAUDRATE, pba_hz);
80003244:	ee fb ff fc 	ld.w	r11,r7[-4]
80003248:	e0 7c c2 00 	mov	r12,115200
8000324c:	f0 1f 00 03 	mcall	80003258 <init_ecdbg_rs232+0x20>
}
80003250:	2f fd       	sub	sp,-4
80003252:	e3 cd 80 80 	ldm	sp++,r7,pc
80003256:	00 00       	add	r0,r0
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	32 80       	mov	r0,40

8000325c <init_display_rs232>:

void init_display_rs232(long pba_hz)
{
8000325c:	eb cd 40 80 	pushm	r7,lr
80003260:	1a 97       	mov	r7,sp
80003262:	20 1d       	sub	sp,4
80003264:	ef 4c ff fc 	st.w	r7[-4],r12
	init_display_rs232_ex(DISPLAY_USART_BAUDRATE, pba_hz);
80003268:	ee fb ff fc 	ld.w	r11,r7[-4]
8000326c:	e0 6c 12 c0 	mov	r12,4800
80003270:	f0 1f 00 03 	mcall	8000327c <init_display_rs232+0x20>
}
80003274:	2f fd       	sub	sp,-4
80003276:	e3 cd 80 80 	ldm	sp++,r7,pc
8000327a:	00 00       	add	r0,r0
8000327c:	80 00       	ld.sh	r0,r0[0x0]
8000327e:	32 dc       	mov	r12,45

80003280 <init_ecdbg_rs232_ex>:


void init_ecdbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80003280:	eb cd 40 80 	pushm	r7,lr
80003284:	1a 97       	mov	r7,sp
80003286:	20 5d       	sub	sp,20
80003288:	ef 4c ff f0 	st.w	r7[-16],r12
8000328c:	ef 4b ff ec 	st.w	r7[-20],r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80003290:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003294:	ef 48 ff f4 	st.w	r7[-12],r8
80003298:	30 88       	mov	r8,8
8000329a:	ef 68 ff f8 	st.b	r7[-8],r8
8000329e:	30 48       	mov	r8,4
800032a0:	ef 68 ff f9 	st.b	r7[-7],r8
800032a4:	30 08       	mov	r8,0
800032a6:	ef 58 ff fa 	st.h	r7[-6],r8
800032aa:	30 08       	mov	r8,0
800032ac:	ef 68 ff fc 	st.b	r7[-4],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(ECDBG_USART_GPIO_MAP,
800032b0:	30 2b       	mov	r11,2
800032b2:	48 8c       	lddpc	r12,800032d0 <init_ecdbg_rs232_ex+0x50>
800032b4:	f0 1f 00 08 	mcall	800032d4 <init_ecdbg_rs232_ex+0x54>
                     sizeof(ECDBG_USART_GPIO_MAP) / sizeof(ECDBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(ECDBG_USART, &ecdbg_usart_options, pba_hz);
800032b8:	ee c8 00 0c 	sub	r8,r7,12
800032bc:	ee fa ff ec 	ld.w	r10,r7[-20]
800032c0:	10 9b       	mov	r11,r8
800032c2:	fe 7c 28 00 	mov	r12,-55296
800032c6:	f0 1f 00 05 	mcall	800032d8 <init_ecdbg_rs232_ex+0x58>
}
800032ca:	2f bd       	sub	sp,-20
800032cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800032d0:	80 01       	ld.sh	r1,r0[0x0]
800032d2:	1e 10       	sub	r0,pc
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	45 3c       	lddsp	r12,sp[0x14c]
800032d8:	80 00       	ld.sh	r0,r0[0x0]
800032da:	56 e0       	stdsp	sp[0x1b8],r0

800032dc <init_display_rs232_ex>:

void init_display_rs232_ex(unsigned long baudrate, long pba_hz)
{
800032dc:	eb cd 40 80 	pushm	r7,lr
800032e0:	1a 97       	mov	r7,sp
800032e2:	20 5d       	sub	sp,20
800032e4:	ef 4c ff f0 	st.w	r7[-16],r12
800032e8:	ef 4b ff ec 	st.w	r7[-20],r11
		.baudrate = baudrate,
		.charlength = 8,
		.paritytype = USART_NO_PARITY,
		.stopbits = USART_1_STOPBIT,
		.channelmode = USART_NORMAL_CHMODE
	};
800032ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800032f0:	ef 48 ff f4 	st.w	r7[-12],r8
800032f4:	30 88       	mov	r8,8
800032f6:	ef 68 ff f8 	st.b	r7[-8],r8
800032fa:	30 48       	mov	r8,4
800032fc:	ef 68 ff f9 	st.b	r7[-7],r8
80003300:	30 08       	mov	r8,0
80003302:	ef 58 ff fa 	st.h	r7[-6],r8
80003306:	30 08       	mov	r8,0
80003308:	ef 68 ff fc 	st.b	r7[-4],r8

	// Setup GPIO for debug USART.
	gpio_enable_module(DISPLAY_USART_GPIO_MAP,
8000330c:	30 2b       	mov	r11,2
8000330e:	48 8c       	lddpc	r12,8000332c <init_display_rs232_ex+0x50>
80003310:	f0 1f 00 08 	mcall	80003330 <init_display_rs232_ex+0x54>
	sizeof(DISPLAY_USART_GPIO_MAP) / sizeof(DISPLAY_USART_GPIO_MAP[0]));

	// Initialize it in RS232 mode.
	usart_init_rs232(DISPLAY_USART, &display_usart_options, pba_hz);
80003314:	ee c8 00 0c 	sub	r8,r7,12
80003318:	ee fa ff ec 	ld.w	r10,r7[-20]
8000331c:	10 9b       	mov	r11,r8
8000331e:	fc 7c 14 00 	mov	r12,-191488
80003322:	f0 1f 00 05 	mcall	80003334 <init_display_rs232_ex+0x58>
}
80003326:	2f bd       	sub	sp,-20
80003328:	e3 cd 80 80 	ldm	sp++,r7,pc
8000332c:	80 01       	ld.sh	r1,r0[0x0]
8000332e:	1e 00       	add	r0,pc
80003330:	80 00       	ld.sh	r0,r0[0x0]
80003332:	45 3c       	lddsp	r12,sp[0x14c]
80003334:	80 00       	ld.sh	r0,r0[0x0]
80003336:	56 e0       	stdsp	sp[0x1b8],r0

80003338 <print_ecdbg>:


void print_ecdbg(const char *str)
{
80003338:	eb cd 40 80 	pushm	r7,lr
8000333c:	1a 97       	mov	r7,sp
8000333e:	20 1d       	sub	sp,4
80003340:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print(ECDBG_USART, str);
80003344:	ee fb ff fc 	ld.w	r11,r7[-4]
80003348:	fe 7c 28 00 	mov	r12,-55296
8000334c:	f0 1f 00 03 	mcall	80003358 <print_ecdbg+0x20>
}
80003350:	2f fd       	sub	sp,-4
80003352:	e3 cd 80 80 	ldm	sp++,r7,pc
80003356:	00 00       	add	r0,r0
80003358:	80 00       	ld.sh	r0,r0[0x0]
8000335a:	33 5c       	mov	r12,53

8000335c <print>:
	print_hex(DISPLAY_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
8000335c:	eb cd 40 80 	pushm	r7,lr
80003360:	1a 97       	mov	r7,sp
80003362:	20 2d       	sub	sp,8
80003364:	ef 4c ff fc 	st.w	r7[-4],r12
80003368:	ef 4b ff f8 	st.w	r7[-8],r11
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
8000336c:	ee fb ff f8 	ld.w	r11,r7[-8]
80003370:	ee fc ff fc 	ld.w	r12,r7[-4]
80003374:	f0 1f 00 03 	mcall	80003380 <print+0x24>
}
80003378:	2f ed       	sub	sp,-8
8000337a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000337e:	00 00       	add	r0,r0
80003380:	80 00       	ld.sh	r0,r0[0x0]
80003382:	59 3c       	cp.w	r12,19

80003384 <adcifa_get_calibration_data>:
 * \param adcifa       Base address of the ADCIFA
 * \param p_adcifa_opt Structure for the ADCIFA core configuration
 */
void adcifa_get_calibration_data(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt)
{
80003384:	eb cd 40 80 	pushm	r7,lr
80003388:	1a 97       	mov	r7,sp
8000338a:	20 6d       	sub	sp,24
8000338c:	ef 4c ff ec 	st.w	r7[-20],r12
80003390:	ef 4b ff e8 	st.w	r7[-24],r11
	/* Get Offset Calibration */
	int32_t adc_ocal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003394:	e0 68 02 04 	mov	r8,516
80003398:	ea 18 80 80 	orh	r8,0x8080
8000339c:	70 08       	ld.w	r8,r8[0x0]
8000339e:	e6 18 3f 00 	andh	r8,0x3f00,COH
			+ AVR32_FLASHC_FROW_OCAL_WORD)) &
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;
800033a2:	b9 48       	asr	r8,0x18
800033a4:	ef 48 ff f0 	st.w	r7[-16],r8
	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
800033a8:	e0 68 02 04 	mov	r8,516
800033ac:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;

	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800033b0:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
800033b2:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
800033b6:	ef 48 ff f4 	st.w	r7[-12],r8
	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
800033ba:	e0 68 02 08 	mov	r8,520
800033be:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;

	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800033c2:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
800033c4:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800033c8:	ef 48 ff f8 	st.w	r7[-8],r8

	int32_t adc_gain1
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800033cc:	e0 68 02 08 	mov	r8,520
800033d0:	ea 18 80 80 	orh	r8,0x8080
800033d4:	70 08       	ld.w	r8,r8[0x0]
800033d6:	e6 18 03 ff 	andh	r8,0x3ff,COH
			+ AVR32_FLASHC_FROW_GAIN1_WORD)) &
			AVR32_FLASHC_FROW_GAIN1_MASK) >>
			AVR32_FLASHC_FROW_GAIN1_OFFSET;
800033da:	b1 48       	asr	r8,0x10
800033dc:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Get ADC Offset Calibration */
	p_adcifa_opt->offset_calibration_value = adc_ocal;
800033e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033e4:	5c 88       	casts.h	r8
800033e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800033ea:	b2 68       	st.h	r9[0xc],r8

	/* Get ADC Gain Calibration */
	p_adcifa_opt->gain_calibration_value = adc_gcal;
800033ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033f0:	5c 88       	casts.h	r8
800033f2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800033f6:	b2 58       	st.h	r9[0xa],r8

	/* Get Sample & Hold Gain Calibration for Seq 0 */
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
800033f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033fc:	5c 88       	casts.h	r8
800033fe:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003402:	b2 78       	st.h	r9[0xe],r8

	/* Get Sample & Hold Gain Calibration for Seq 1 */
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
80003404:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003408:	5c 88       	casts.h	r8
8000340a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000340e:	f3 58 00 10 	st.h	r9[16],r8
}
80003412:	2f ad       	sub	sp,-24
80003414:	e3 cd 80 80 	ldm	sp++,r7,pc

80003418 <adcifa_configure>:
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt,
		uint32_t pb_hz)
{
80003418:	eb cd 40 80 	pushm	r7,lr
8000341c:	1a 97       	mov	r7,sp
8000341e:	20 3d       	sub	sp,12
80003420:	ef 4c ff fc 	st.w	r7[-4],r12
80003424:	ef 4b ff f8 	st.w	r7[-8],r11
80003428:	ef 4a ff f4 	st.w	r7[-12],r10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
8000342c:	fc 7a 24 00 	mov	r10,-187392
		= (p_adcifa_opt->sleep_mode_enable <<
80003430:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003434:	f1 38 00 08 	ld.ub	r8,r8[8]
80003438:	f0 09 15 02 	lsl	r9,r8,0x2
			AVR32_ADCIFA_CFG_SLEEP)
			| (p_adcifa_opt->single_sequencer_mode <<
8000343c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003440:	11 e8       	ld.ub	r8,r8[0x6]
80003442:	a3 78       	lsl	r8,0x3
			AVR32_ADCIFA_CFG_SSMQ)
			| (p_adcifa_opt->free_running_mode_enable <<
80003444:	10 49       	or	r9,r8
80003446:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000344a:	11 f8       	ld.ub	r8,r8[0x7]
8000344c:	a5 68       	lsl	r8,0x4
			AVR32_ADCIFA_CFG_FRM)
			| (p_adcifa_opt->reference_source <<
8000344e:	10 49       	or	r9,r8
80003450:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003454:	11 c8       	ld.ub	r8,r8[0x4]
80003456:	a5 78       	lsl	r8,0x5
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
80003458:	10 49       	or	r9,r8
8000345a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000345e:	11 d8       	ld.ub	r8,r8[0x5]
80003460:	a7 78       	lsl	r8,0x7
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
80003462:	10 49       	or	r9,r8
80003464:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003468:	f1 38 00 09 	ld.ub	r8,r8[9]
8000346c:	ab 68       	lsl	r8,0xa
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
8000346e:	f3 e8 10 08 	or	r8,r9,r8
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
80003472:	10 9b       	mov	r11,r8
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
80003474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003478:	70 09       	ld.w	r9,r8[0x0]
8000347a:	e0 68 4d d3 	mov	r8,19923
8000347e:	ea 18 10 62 	orh	r8,0x1062
80003482:	f2 08 06 48 	mulu.d	r8,r9,r8
80003486:	a7 89       	lsr	r9,0x6
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
80003488:	e0 68 03 e8 	mov	r8,1000
8000348c:	b1 39       	mul	r9,r8
8000348e:	e0 68 4d d3 	mov	r8,19923
80003492:	ea 18 10 62 	orh	r8,0x1062
80003496:	f2 08 06 48 	mulu.d	r8,r9,r8
8000349a:	f2 08 16 0b 	lsr	r8,r9,0xb
8000349e:	b1 68       	lsl	r8,0x10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
800034a0:	f7 e8 10 08 	or	r8,r11,r8
{
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
800034a4:	95 18       	st.w	r10[0x4],r8
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
			(2 * p_adcifa_opt->frequency)) - 1) <<
800034a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034aa:	70 08       	ld.w	r8,r8[0x0]
800034ac:	f0 09 15 01 	lsl	r9,r8,0x1
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
800034b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034b4:	f0 09 0d 08 	divu	r8,r8,r9
800034b8:	20 18       	sub	r8,1
800034ba:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
800034be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034c2:	f1 49 00 44 	st.w	r8[68],r9
			(2 * p_adcifa_opt->frequency)) - 1) <<
			AVR32_ADCIFA_CKDIV_CNT_OFFSET) &
			AVR32_ADCIFA_CKDIV_CNT_MASK;

	/* Set ADC Offset Calibration */
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
800034c6:	fc 78 24 00 	mov	r8,-187392
800034ca:	fc 79 24 00 	mov	r9,-187392
800034ce:	73 a9       	ld.w	r9,r9[0x68]
800034d0:	12 9a       	mov	r10,r9
800034d2:	e4 1a c0 ff 	andh	r10,0xc0ff
800034d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034da:	92 69       	ld.sh	r9,r9[0xc]
800034dc:	b9 69       	lsl	r9,0x18
800034de:	e6 19 3f 00 	andh	r9,0x3f00,COH
800034e2:	f5 e9 10 09 	or	r9,r10,r9
800034e6:	f1 49 00 68 	st.w	r8[104],r9

	/* Set ADC Gain Calibration */
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
800034ea:	fc 78 24 00 	mov	r8,-187392
800034ee:	fc 79 24 00 	mov	r9,-187392
800034f2:	73 a9       	ld.w	r9,r9[0x68]
800034f4:	12 9a       	mov	r10,r9
800034f6:	e0 1a 80 00 	andl	r10,0x8000
800034fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034fe:	92 59       	ld.sh	r9,r9[0xa]
80003500:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
80003504:	f5 e9 10 09 	or	r9,r10,r9
80003508:	f1 49 00 68 	st.w	r8[104],r9

	/* Set Sample & Hold Gain Calibration for seq 0 */
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
8000350c:	fc 78 24 00 	mov	r8,-187392
80003510:	fc 79 24 00 	mov	r9,-187392
80003514:	73 b9       	ld.w	r9,r9[0x6c]
80003516:	12 9a       	mov	r10,r9
80003518:	e0 1a fc 00 	andl	r10,0xfc00
8000351c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003520:	92 79       	ld.sh	r9,r9[0xe]
80003522:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
80003526:	f5 e9 10 09 	or	r9,r10,r9
8000352a:	f1 49 00 6c 	st.w	r8[108],r9

	/* Set Sample & Hold Gain Calibration for seq 1 */
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
8000352e:	fc 78 24 00 	mov	r8,-187392
80003532:	fc 79 24 00 	mov	r9,-187392
80003536:	73 b9       	ld.w	r9,r9[0x6c]
80003538:	12 9a       	mov	r10,r9
8000353a:	e4 1a fc 00 	andh	r10,0xfc00
8000353e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003542:	f3 09 00 10 	ld.sh	r9,r9[16]
80003546:	b1 69       	lsl	r9,0x10
80003548:	e6 19 03 ff 	andh	r9,0x3ff,COH
8000354c:	f5 e9 10 09 	or	r9,r10,r9
80003550:	f1 49 00 6c 	st.w	r8[108],r9

	/* Enable ADCIFA */
	ADCIFA_enable();
80003554:	fc 78 24 00 	mov	r8,-187392
80003558:	fc 79 24 00 	mov	r9,-187392
8000355c:	72 19       	ld.w	r9,r9[0x4]
8000355e:	a1 a9       	sbr	r9,0x0
80003560:	91 19       	st.w	r8[0x4],r9
80003562:	c0 28       	rjmp	80003566 <adcifa_configure+0x14e>
	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
			break;
		}
	}
80003564:	d7 03       	nop
	/* Enable ADCIFA */
	ADCIFA_enable();

	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
80003566:	fc 78 24 00 	mov	r8,-187392
8000356a:	70 28       	ld.w	r8,r8[0x8]
8000356c:	e2 18 40 00 	andl	r8,0x4000,COH
80003570:	cf a0       	breq	80003564 <adcifa_configure+0x14c>
			break;
		}
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
80003572:	30 18       	mov	r8,1
}
80003574:	10 9c       	mov	r12,r8
80003576:	2f dd       	sub	sp,-12
80003578:	e3 cd 80 80 	ldm	sp++,r7,pc

8000357c <adcifa_configure_sequencer>:
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		adcifa_sequencer_conversion_opt_t *p_adcifa_sequencer_conversion_opt)
{
8000357c:	eb cd 40 80 	pushm	r7,lr
80003580:	1a 97       	mov	r7,sp
80003582:	21 1d       	sub	sp,68
80003584:	ef 4c ff c8 	st.w	r7[-56],r12
80003588:	16 98       	mov	r8,r11
8000358a:	ef 4a ff c0 	st.w	r7[-64],r10
8000358e:	ef 49 ff bc 	st.w	r7[-68],r9
80003592:	ef 68 ff c4 	st.b	r7[-60],r8
	uint8_t g[16] = {0};
80003596:	30 08       	mov	r8,0
80003598:	30 09       	mov	r9,0
8000359a:	ee e9 ff ec 	st.d	r7[-20],r8
8000359e:	30 08       	mov	r8,0
800035a0:	30 09       	mov	r9,0
800035a2:	ee e9 ff f4 	st.d	r7[-12],r8
	uint8_t mp[16] = {0};
800035a6:	30 08       	mov	r8,0
800035a8:	30 09       	mov	r9,0
800035aa:	ee e9 ff dc 	st.d	r7[-36],r8
800035ae:	30 08       	mov	r8,0
800035b0:	30 09       	mov	r9,0
800035b2:	ee e9 ff e4 	st.d	r7[-28],r8
	uint8_t mn[16] = {0};
800035b6:	30 08       	mov	r8,0
800035b8:	30 09       	mov	r9,0
800035ba:	ee e9 ff cc 	st.d	r7[-52],r8
800035be:	30 08       	mov	r8,0
800035c0:	30 09       	mov	r9,0
800035c2:	ee e9 ff d4 	st.d	r7[-44],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch case with sequencer */
	switch (sequencer) {
800035c6:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800035ca:	58 08       	cp.w	r8,0
800035cc:	c0 60       	breq	800035d8 <adcifa_configure_sequencer+0x5c>
800035ce:	58 18       	cp.w	r8,1
800035d0:	e0 80 01 65 	breq	8000389a <adcifa_configure_sequencer+0x31e>
800035d4:	e0 8f 02 54 	bral	80003a7c <adcifa_configure_sequencer+0x500>
	/* Sequencer 0 */
	case 0:
		/* Configure Sequencer 0 */
		ADCIFA_configure_sequencer_0(
800035d8:	fc 78 24 00 	mov	r8,-187392
800035dc:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035e0:	13 89       	ld.ub	r9,r9[0x0]
800035e2:	20 19       	sub	r9,1
800035e4:	f2 0a 15 10 	lsl	r10,r9,0x10
800035e8:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035ec:	13 99       	ld.ub	r9,r9[0x1]
800035ee:	ad 69       	lsl	r9,0xc
800035f0:	12 4a       	or	r10,r9
800035f2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035f6:	13 a9       	ld.ub	r9,r9[0x2]
800035f8:	a9 69       	lsl	r9,0x8
800035fa:	12 4a       	or	r10,r9
800035fc:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003600:	13 b9       	ld.ub	r9,r9[0x3]
80003602:	a3 69       	lsl	r9,0x2
80003604:	12 4a       	or	r10,r9
80003606:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000360a:	13 c9       	ld.ub	r9,r9[0x4]
8000360c:	a3 79       	lsl	r9,0x3
8000360e:	12 4a       	or	r10,r9
80003610:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003614:	13 d9       	ld.ub	r9,r9[0x5]
80003616:	a1 79       	lsl	r9,0x1
80003618:	12 4a       	or	r10,r9
8000361a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000361e:	13 e9       	ld.ub	r9,r9[0x6]
80003620:	f5 e9 10 09 	or	r9,r10,r9
80003624:	91 59       	st.w	r8[0x14],r9
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003626:	30 08       	mov	r8,0
80003628:	ef 68 ff ff 	st.b	r7[-1],r8
8000362c:	c1 68       	rjmp	80003658 <adcifa_configure_sequencer+0xdc>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8000362e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003632:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003636:	12 98       	mov	r8,r9
80003638:	a1 78       	lsl	r8,0x1
8000363a:	12 08       	add	r8,r9
8000363c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003640:	f2 08 00 08 	add	r8,r9,r8
80003644:	11 a8       	ld.ub	r8,r8[0x2]
80003646:	ee 0a 00 09 	add	r9,r7,r10
8000364a:	f3 68 ff ec 	st.b	r9[-20],r8
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000364e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003652:	2f f8       	sub	r8,-1
80003654:	ef 68 ff ff 	st.b	r7[-1],r8
80003658:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000365c:	11 88       	ld.ub	r8,r8[0x0]
8000365e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003662:	f0 09 18 00 	cp.b	r9,r8
80003666:	ce 43       	brcs	8000362e <adcifa_configure_sequencer+0xb2>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
80003668:	fc 78 24 00 	mov	r8,-187392
8000366c:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80003670:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80003674:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80003678:	b9 69       	lsl	r9,0x18
8000367a:	12 4a       	or	r10,r9
8000367c:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80003680:	b5 69       	lsl	r9,0x14
80003682:	12 4a       	or	r10,r9
80003684:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003688:	b1 69       	lsl	r9,0x10
8000368a:	12 4a       	or	r10,r9
8000368c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003690:	ad 69       	lsl	r9,0xc
80003692:	12 4a       	or	r10,r9
80003694:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80003698:	a9 69       	lsl	r9,0x8
8000369a:	12 4a       	or	r10,r9
8000369c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800036a0:	a5 69       	lsl	r9,0x4
800036a2:	12 4a       	or	r10,r9
800036a4:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800036a8:	f5 e9 10 09 	or	r9,r10,r9
800036ac:	91 79       	st.w	r8[0x1c],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800036ae:	30 08       	mov	r8,0
800036b0:	ef 68 ff ff 	st.b	r7[-1],r8
800036b4:	c2 68       	rjmp	80003700 <adcifa_configure_sequencer+0x184>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800036b6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800036ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036be:	12 98       	mov	r8,r9
800036c0:	a1 78       	lsl	r8,0x1
800036c2:	12 08       	add	r8,r9
800036c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800036c8:	f2 08 00 08 	add	r8,r9,r8
800036cc:	11 88       	ld.ub	r8,r8[0x0]
800036ce:	ee 0a 00 09 	add	r9,r7,r10
800036d2:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800036d6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800036da:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036de:	12 98       	mov	r8,r9
800036e0:	a1 78       	lsl	r8,0x1
800036e2:	12 08       	add	r8,r9
800036e4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800036e8:	f2 08 00 08 	add	r8,r9,r8
800036ec:	11 98       	ld.ub	r8,r8[0x1]
800036ee:	ee 0a 00 09 	add	r9,r7,r10
800036f2:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800036f6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036fa:	2f f8       	sub	r8,-1
800036fc:	ef 68 ff ff 	st.b	r7[-1],r8
80003700:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003704:	11 88       	ld.ub	r8,r8[0x0]
80003706:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000370a:	f0 09 18 00 	cp.b	r9,r8
8000370e:	cd 43       	brcs	800036b6 <adcifa_configure_sequencer+0x13a>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3],
80003710:	fc 78 24 00 	mov	r8,-187392
80003714:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80003718:	f2 0a 15 18 	lsl	r10,r9,0x18
8000371c:	ef 39 ff e2 	ld.ub	r9,r7[-30]
80003720:	b1 69       	lsl	r9,0x10
80003722:	12 4a       	or	r10,r9
80003724:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80003728:	a9 69       	lsl	r9,0x8
8000372a:	12 4a       	or	r10,r9
8000372c:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80003730:	f5 e9 10 09 	or	r9,r10,r9
80003734:	91 b9       	st.w	r8[0x2c],r9
80003736:	fc 78 24 00 	mov	r8,-187392
8000373a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000373e:	f2 0a 15 18 	lsl	r10,r9,0x18
80003742:	ef 39 ff de 	ld.ub	r9,r7[-34]
80003746:	b1 69       	lsl	r9,0x10
80003748:	12 4a       	or	r10,r9
8000374a:	ef 39 ff dd 	ld.ub	r9,r7[-35]
8000374e:	a9 69       	lsl	r9,0x8
80003750:	12 4a       	or	r10,r9
80003752:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80003756:	f5 e9 10 09 	or	r9,r10,r9
8000375a:	91 99       	st.w	r8[0x24],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3],
8000375c:	fc 78 24 00 	mov	r8,-187392
80003760:	ef 39 ff d3 	ld.ub	r9,r7[-45]
80003764:	f2 0a 15 18 	lsl	r10,r9,0x18
80003768:	ef 39 ff d2 	ld.ub	r9,r7[-46]
8000376c:	b1 69       	lsl	r9,0x10
8000376e:	12 4a       	or	r10,r9
80003770:	ef 39 ff d1 	ld.ub	r9,r7[-47]
80003774:	a9 69       	lsl	r9,0x8
80003776:	12 4a       	or	r10,r9
80003778:	ef 39 ff d0 	ld.ub	r9,r7[-48]
8000377c:	f5 e9 10 09 	or	r9,r10,r9
80003780:	91 f9       	st.w	r8[0x3c],r9
80003782:	fc 78 24 00 	mov	r8,-187392
80003786:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000378a:	f2 0a 15 18 	lsl	r10,r9,0x18
8000378e:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003792:	b1 69       	lsl	r9,0x10
80003794:	12 4a       	or	r10,r9
80003796:	ef 39 ff cd 	ld.ub	r9,r7[-51]
8000379a:	a9 69       	lsl	r9,0x8
8000379c:	12 4a       	or	r10,r9
8000379e:	ef 39 ff cc 	ld.ub	r9,r7[-52]
800037a2:	f5 e9 10 09 	or	r9,r10,r9
800037a6:	91 d9       	st.w	r8[0x34],r9
		 * This adcifa_seq1_configured variable check if muxsel1p,muxsel1n 
		 * registers are already configured. This may happen if this function is
		 * called first with sequencer 1 as argument and then called with 
		 * sequencer 0 as argument in case dual mode is used.
		 */
		if(!adcifa_seq1_configured)
800037a8:	fe f8 02 e0 	ld.w	r8,pc[736]
800037ac:	11 88       	ld.ub	r8,r8[0x0]
800037ae:	ec 18 00 01 	eorl	r8,0x1
800037b2:	5c 58       	castu.b	r8
800037b4:	e0 80 01 63 	breq	80003a7a <adcifa_configure_sequencer+0x4fe>
		{
			/*
			 * Configure gain for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */ 
			ADCIFA_configure_sh1gain(g[15], g[14], g[13], g[12], g[11], g[10], 
800037b8:	fc 78 24 00 	mov	r8,-187392
800037bc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800037c0:	f2 0a 15 1c 	lsl	r10,r9,0x1c
800037c4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800037c8:	b9 69       	lsl	r9,0x18
800037ca:	12 4a       	or	r10,r9
800037cc:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800037d0:	b5 69       	lsl	r9,0x14
800037d2:	12 4a       	or	r10,r9
800037d4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800037d8:	b1 69       	lsl	r9,0x10
800037da:	12 4a       	or	r10,r9
800037dc:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800037e0:	ad 69       	lsl	r9,0xc
800037e2:	12 4a       	or	r10,r9
800037e4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800037e8:	a9 69       	lsl	r9,0x8
800037ea:	12 4a       	or	r10,r9
800037ec:	ef 39 ff f5 	ld.ub	r9,r7[-11]
800037f0:	a5 69       	lsl	r9,0x4
800037f2:	12 4a       	or	r10,r9
800037f4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800037f8:	f5 e9 10 09 	or	r9,r10,r9
800037fc:	91 89       	st.w	r8[0x20],r9

			/*
			 * Configure Mux for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */
			ADCIFA_configure_muxsel1p(mp[15], mp[14], mp[13], mp[12], mp[11], 
800037fe:	fc 78 24 00 	mov	r8,-187392
80003802:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80003806:	f2 0a 15 18 	lsl	r10,r9,0x18
8000380a:	ef 39 ff ea 	ld.ub	r9,r7[-22]
8000380e:	b1 69       	lsl	r9,0x10
80003810:	12 4a       	or	r10,r9
80003812:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80003816:	a9 69       	lsl	r9,0x8
80003818:	12 4a       	or	r10,r9
8000381a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000381e:	f5 e9 10 09 	or	r9,r10,r9
80003822:	91 c9       	st.w	r8[0x30],r9
80003824:	fc 78 24 00 	mov	r8,-187392
80003828:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8000382c:	f2 0a 15 18 	lsl	r10,r9,0x18
80003830:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80003834:	b1 69       	lsl	r9,0x10
80003836:	12 4a       	or	r10,r9
80003838:	ef 39 ff e5 	ld.ub	r9,r7[-27]
8000383c:	a9 69       	lsl	r9,0x8
8000383e:	12 4a       	or	r10,r9
80003840:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80003844:	f5 e9 10 09 	or	r9,r10,r9
80003848:	91 a9       	st.w	r8[0x28],r9
				mp[10], mp[9], mp[8]);
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
8000384a:	fc 78 24 00 	mov	r8,-187392
8000384e:	ef 39 ff db 	ld.ub	r9,r7[-37]
80003852:	f2 0a 15 18 	lsl	r10,r9,0x18
80003856:	ef 39 ff da 	ld.ub	r9,r7[-38]
8000385a:	b1 69       	lsl	r9,0x10
8000385c:	12 4a       	or	r10,r9
8000385e:	ef 39 ff d9 	ld.ub	r9,r7[-39]
80003862:	a9 69       	lsl	r9,0x8
80003864:	12 4a       	or	r10,r9
80003866:	ef 39 ff d8 	ld.ub	r9,r7[-40]
8000386a:	f5 e9 10 09 	or	r9,r10,r9
8000386e:	f1 49 00 40 	st.w	r8[64],r9
80003872:	fc 78 24 00 	mov	r8,-187392
80003876:	ef 39 ff d7 	ld.ub	r9,r7[-41]
8000387a:	f2 0a 15 18 	lsl	r10,r9,0x18
8000387e:	ef 39 ff d6 	ld.ub	r9,r7[-42]
80003882:	b1 69       	lsl	r9,0x10
80003884:	12 4a       	or	r10,r9
80003886:	ef 39 ff d5 	ld.ub	r9,r7[-43]
8000388a:	a9 69       	lsl	r9,0x8
8000388c:	12 4a       	or	r10,r9
8000388e:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80003892:	f5 e9 10 09 	or	r9,r10,r9
80003896:	91 e9       	st.w	r8[0x38],r9
				mn[10], mn[9], mn[8]);

		}

		break;
80003898:	cf 28       	rjmp	80003a7c <adcifa_configure_sequencer+0x500>

	/* Sequencer 1 */
	case 1:
		/* Configure Sequencer 1 */
		ADCIFA_configure_sequencer_1(
8000389a:	fc 78 24 00 	mov	r8,-187392
8000389e:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038a2:	13 89       	ld.ub	r9,r9[0x0]
800038a4:	20 19       	sub	r9,1
800038a6:	f2 0a 15 10 	lsl	r10,r9,0x10
800038aa:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038ae:	13 99       	ld.ub	r9,r9[0x1]
800038b0:	ad 69       	lsl	r9,0xc
800038b2:	12 4a       	or	r10,r9
800038b4:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038b8:	13 a9       	ld.ub	r9,r9[0x2]
800038ba:	a9 69       	lsl	r9,0x8
800038bc:	12 4a       	or	r10,r9
800038be:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038c2:	13 b9       	ld.ub	r9,r9[0x3]
800038c4:	a3 69       	lsl	r9,0x2
800038c6:	12 4a       	or	r10,r9
800038c8:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038cc:	13 c9       	ld.ub	r9,r9[0x4]
800038ce:	a3 79       	lsl	r9,0x3
800038d0:	12 4a       	or	r10,r9
800038d2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038d6:	13 d9       	ld.ub	r9,r9[0x5]
800038d8:	a1 79       	lsl	r9,0x1
800038da:	f5 e9 10 09 	or	r9,r10,r9
800038de:	12 9a       	mov	r10,r9
800038e0:	a5 aa       	sbr	r10,0x4
800038e2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800038e6:	13 e9       	ld.ub	r9,r9[0x6]
800038e8:	f5 e9 10 09 	or	r9,r10,r9
800038ec:	91 69       	st.w	r8[0x18],r9
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800038ee:	30 08       	mov	r8,0
800038f0:	ef 68 ff ff 	st.b	r7[-1],r8
800038f4:	c1 68       	rjmp	80003920 <adcifa_configure_sequencer+0x3a4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800038f6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800038fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800038fe:	12 98       	mov	r8,r9
80003900:	a1 78       	lsl	r8,0x1
80003902:	12 08       	add	r8,r9
80003904:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003908:	f2 08 00 08 	add	r8,r9,r8
8000390c:	11 a8       	ld.ub	r8,r8[0x2]
8000390e:	ee 0a 00 09 	add	r9,r7,r10
80003912:	f3 68 ff ec 	st.b	r9[-20],r8
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003916:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000391a:	2f f8       	sub	r8,-1
8000391c:	ef 68 ff ff 	st.b	r7[-1],r8
80003920:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003924:	11 88       	ld.ub	r8,r8[0x0]
80003926:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000392a:	f0 09 18 00 	cp.b	r9,r8
8000392e:	ce 43       	brcs	800038f6 <adcifa_configure_sequencer+0x37a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
80003930:	fc 78 24 00 	mov	r8,-187392
80003934:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80003938:	f2 0a 15 1c 	lsl	r10,r9,0x1c
8000393c:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80003940:	b9 69       	lsl	r9,0x18
80003942:	12 4a       	or	r10,r9
80003944:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80003948:	b5 69       	lsl	r9,0x14
8000394a:	12 4a       	or	r10,r9
8000394c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003950:	b1 69       	lsl	r9,0x10
80003952:	12 4a       	or	r10,r9
80003954:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003958:	ad 69       	lsl	r9,0xc
8000395a:	12 4a       	or	r10,r9
8000395c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80003960:	a9 69       	lsl	r9,0x8
80003962:	12 4a       	or	r10,r9
80003964:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80003968:	a5 69       	lsl	r9,0x4
8000396a:	12 4a       	or	r10,r9
8000396c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80003970:	f5 e9 10 09 	or	r9,r10,r9
80003974:	91 89       	st.w	r8[0x20],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003976:	30 08       	mov	r8,0
80003978:	ef 68 ff ff 	st.b	r7[-1],r8
8000397c:	c2 68       	rjmp	800039c8 <adcifa_configure_sequencer+0x44c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
8000397e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003982:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003986:	12 98       	mov	r8,r9
80003988:	a1 78       	lsl	r8,0x1
8000398a:	12 08       	add	r8,r9
8000398c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003990:	f2 08 00 08 	add	r8,r9,r8
80003994:	11 88       	ld.ub	r8,r8[0x0]
80003996:	ee 0a 00 09 	add	r9,r7,r10
8000399a:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
8000399e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800039a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039a6:	12 98       	mov	r8,r9
800039a8:	a1 78       	lsl	r8,0x1
800039aa:	12 08       	add	r8,r9
800039ac:	ee f9 ff bc 	ld.w	r9,r7[-68]
800039b0:	f2 08 00 08 	add	r8,r9,r8
800039b4:	11 98       	ld.ub	r8,r8[0x1]
800039b6:	ee 0a 00 09 	add	r9,r7,r10
800039ba:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800039be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800039c2:	2f f8       	sub	r8,-1
800039c4:	ef 68 ff ff 	st.b	r7[-1],r8
800039c8:	ee f8 ff c0 	ld.w	r8,r7[-64]
800039cc:	11 88       	ld.ub	r8,r8[0x0]
800039ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039d2:	f0 09 18 00 	cp.b	r9,r8
800039d6:	cd 43       	brcs	8000397e <adcifa_configure_sequencer+0x402>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3],
800039d8:	fc 78 24 00 	mov	r8,-187392
800039dc:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800039e0:	f2 0a 15 18 	lsl	r10,r9,0x18
800039e4:	ef 39 ff e2 	ld.ub	r9,r7[-30]
800039e8:	b1 69       	lsl	r9,0x10
800039ea:	12 4a       	or	r10,r9
800039ec:	ef 39 ff e1 	ld.ub	r9,r7[-31]
800039f0:	a9 69       	lsl	r9,0x8
800039f2:	12 4a       	or	r10,r9
800039f4:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800039f8:	f5 e9 10 09 	or	r9,r10,r9
800039fc:	91 c9       	st.w	r8[0x30],r9
800039fe:	fc 78 24 00 	mov	r8,-187392
80003a02:	ef 39 ff df 	ld.ub	r9,r7[-33]
80003a06:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a0a:	ef 39 ff de 	ld.ub	r9,r7[-34]
80003a0e:	b1 69       	lsl	r9,0x10
80003a10:	12 4a       	or	r10,r9
80003a12:	ef 39 ff dd 	ld.ub	r9,r7[-35]
80003a16:	a9 69       	lsl	r9,0x8
80003a18:	12 4a       	or	r10,r9
80003a1a:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80003a1e:	f5 e9 10 09 	or	r9,r10,r9
80003a22:	91 a9       	st.w	r8[0x28],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3],
80003a24:	fc 78 24 00 	mov	r8,-187392
80003a28:	ef 39 ff d3 	ld.ub	r9,r7[-45]
80003a2c:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a30:	ef 39 ff d2 	ld.ub	r9,r7[-46]
80003a34:	b1 69       	lsl	r9,0x10
80003a36:	12 4a       	or	r10,r9
80003a38:	ef 39 ff d1 	ld.ub	r9,r7[-47]
80003a3c:	a9 69       	lsl	r9,0x8
80003a3e:	12 4a       	or	r10,r9
80003a40:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80003a44:	f5 e9 10 09 	or	r9,r10,r9
80003a48:	f1 49 00 40 	st.w	r8[64],r9
80003a4c:	fc 78 24 00 	mov	r8,-187392
80003a50:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003a54:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a58:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003a5c:	b1 69       	lsl	r9,0x10
80003a5e:	12 4a       	or	r10,r9
80003a60:	ef 39 ff cd 	ld.ub	r9,r7[-51]
80003a64:	a9 69       	lsl	r9,0x8
80003a66:	12 4a       	or	r10,r9
80003a68:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80003a6c:	f5 e9 10 09 	or	r9,r10,r9
80003a70:	91 e9       	st.w	r8[0x38],r9
				mn[2], mn[1], mn[0]);

		adcifa_seq1_configured = true;
80003a72:	48 69       	lddpc	r9,80003a88 <adcifa_configure_sequencer+0x50c>
80003a74:	30 18       	mov	r8,1
80003a76:	b2 88       	st.b	r9[0x0],r8
80003a78:	c0 28       	rjmp	80003a7c <adcifa_configure_sequencer+0x500>
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
				mn[10], mn[9], mn[8]);

		}

		break;
80003a7a:	d7 03       	nop
		break;

	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
80003a7c:	30 18       	mov	r8,1
}
80003a7e:	10 9c       	mov	r12,r8
80003a80:	2e fd       	sub	sp,-68
80003a82:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a86:	00 00       	add	r0,r0
80003a88:	00 00       	add	r0,r0
80003a8a:	05 c0       	ld.ub	r0,r2[0x4]

80003a8c <adcifa_start_sequencer>:
/** \brief Start analog to digital conversion for a specific sequencer
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
void adcifa_start_sequencer(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003a8c:	eb cd 40 80 	pushm	r7,lr
80003a90:	1a 97       	mov	r7,sp
80003a92:	20 2d       	sub	sp,8
80003a94:	ef 4c ff fc 	st.w	r7[-4],r12
80003a98:	16 98       	mov	r8,r11
80003a9a:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch Sequencer */
	switch (sequencer) {
80003a9e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003aa2:	58 18       	cp.w	r8,1
80003aa4:	c0 a0       	breq	80003ab8 <adcifa_start_sequencer+0x2c>
80003aa6:	58 38       	cp.w	r8,3
80003aa8:	c0 d0       	breq	80003ac2 <adcifa_start_sequencer+0x36>
80003aaa:	58 08       	cp.w	r8,0
80003aac:	c0 f1       	brne	80003aca <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
80003aae:	fc 78 24 00 	mov	r8,-187392
80003ab2:	30 19       	mov	r9,1
80003ab4:	91 09       	st.w	r8[0x0],r9
		break;
80003ab6:	c0 a8       	rjmp	80003aca <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
80003ab8:	fc 78 24 00 	mov	r8,-187392
80003abc:	30 29       	mov	r9,2
80003abe:	91 09       	st.w	r8[0x0],r9
		break;
80003ac0:	c0 58       	rjmp	80003aca <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(
80003ac2:	fc 78 24 00 	mov	r8,-187392
80003ac6:	30 39       	mov	r9,3
80003ac8:	91 09       	st.w	r8[0x0],r9
		break;

	default:
		break;
	}
}
80003aca:	2f ed       	sub	sp,-8
80003acc:	e3 cd 80 80 	ldm	sp++,r7,pc

80003ad0 <adcifa_check_eos>:
/** \brief Get End of Conversion status bit
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
bool adcifa_check_eos(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003ad0:	eb cd 40 80 	pushm	r7,lr
80003ad4:	1a 97       	mov	r7,sp
80003ad6:	20 2d       	sub	sp,8
80003ad8:	ef 4c ff fc 	st.w	r7[-4],r12
80003adc:	16 98       	mov	r8,r11
80003ade:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* get SR register : EOS bit for channel */
	switch (sequencer) {
80003ae2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003ae6:	58 08       	cp.w	r8,0
80003ae8:	c0 40       	breq	80003af0 <adcifa_check_eos+0x20>
80003aea:	58 18       	cp.w	r8,1
80003aec:	c0 90       	breq	80003afe <adcifa_check_eos+0x2e>
80003aee:	c1 08       	rjmp	80003b0e <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
80003af0:	fc 78 24 00 	mov	r8,-187392
80003af4:	70 28       	ld.w	r8,r8[0x8]
80003af6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003afa:	5c 58       	castu.b	r8
80003afc:	c0 a8       	rjmp	80003b10 <adcifa_check_eos+0x40>

	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
80003afe:	fc 78 24 00 	mov	r8,-187392
80003b02:	70 28       	ld.w	r8,r8[0x8]
80003b04:	e2 18 00 10 	andl	r8,0x10,COH
80003b08:	5f 18       	srne	r8
80003b0a:	5c 58       	castu.b	r8
80003b0c:	c0 28       	rjmp	80003b10 <adcifa_check_eos+0x40>

	default:
		break;
	}
	return false;
80003b0e:	30 08       	mov	r8,0
}
80003b10:	10 9c       	mov	r12,r8
80003b12:	2f ed       	sub	sp,-8
80003b14:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b18 <adcifa_get_values_from_sequencer>:
 */
uint8_t adcifa_get_values_from_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		int16_t *adcifa_values)
{
80003b18:	eb cd 40 80 	pushm	r7,lr
80003b1c:	1a 97       	mov	r7,sp
80003b1e:	20 5d       	sub	sp,20
80003b20:	ef 4c ff f8 	st.w	r7[-8],r12
80003b24:	16 98       	mov	r8,r11
80003b26:	ef 4a ff f0 	st.w	r7[-16],r10
80003b2a:	ef 49 ff ec 	st.w	r7[-20],r9
80003b2e:	ef 68 ff f4 	st.b	r7[-12],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* wait for end of sequence */
	if (adcifa_check_eos(adcifa, sequencer) != true) {
80003b32:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003b36:	10 9b       	mov	r11,r8
80003b38:	ee fc ff f8 	ld.w	r12,r7[-8]
80003b3c:	f0 1f 00 2c 	mcall	80003bec <adcifa_get_values_from_sequencer+0xd4>
80003b40:	18 98       	mov	r8,r12
80003b42:	ec 18 00 01 	eorl	r8,0x1
80003b46:	5c 58       	castu.b	r8
80003b48:	c0 30       	breq	80003b4e <adcifa_get_values_from_sequencer+0x36>
		return ADCIFA_STATUS_NOT_COMPLETED;
80003b4a:	30 38       	mov	r8,3
80003b4c:	c4 b8       	rjmp	80003be2 <adcifa_get_values_from_sequencer+0xca>
	}

	switch (sequencer) {
80003b4e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003b52:	58 08       	cp.w	r8,0
80003b54:	c0 40       	breq	80003b5c <adcifa_get_values_from_sequencer+0x44>
80003b56:	58 18       	cp.w	r8,1
80003b58:	c2 30       	breq	80003b9e <adcifa_get_values_from_sequencer+0x86>
80003b5a:	c4 38       	rjmp	80003be0 <adcifa_get_values_from_sequencer+0xc8>
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b5c:	30 08       	mov	r8,0
80003b5e:	ef 68 ff ff 	st.b	r7[-1],r8
80003b62:	c1 58       	rjmp	80003b8c <adcifa_get_values_from_sequencer+0x74>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
80003b64:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b68:	a1 78       	lsl	r8,0x1
80003b6a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003b6e:	10 09       	add	r9,r8
80003b70:	fc 78 24 00 	mov	r8,-187392
80003b74:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003b78:	2d fa       	sub	r10,-33
80003b7a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003b7e:	5c 88       	casts.h	r8
80003b80:	b2 08       	st.h	r9[0x0],r8
	}

	switch (sequencer) {
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b86:	2f f8       	sub	r8,-1
80003b88:	ef 68 ff ff 	st.b	r7[-1],r8
80003b8c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b90:	11 88       	ld.ub	r8,r8[0x0]
80003b92:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003b96:	f0 09 18 00 	cp.b	r9,r8
80003b9a:	ce 53       	brcs	80003b64 <adcifa_get_values_from_sequencer+0x4c>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
80003b9c:	c2 28       	rjmp	80003be0 <adcifa_get_values_from_sequencer+0xc8>

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003b9e:	30 08       	mov	r8,0
80003ba0:	ef 68 ff ff 	st.b	r7[-1],r8
80003ba4:	c1 68       	rjmp	80003bd0 <adcifa_get_values_from_sequencer+0xb8>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
80003ba6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003baa:	a1 78       	lsl	r8,0x1
80003bac:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003bb0:	10 09       	add	r9,r8
80003bb2:	fc 78 24 00 	mov	r8,-187392
80003bb6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003bba:	2f 8a       	sub	r10,-8
80003bbc:	2d fa       	sub	r10,-33
80003bbe:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003bc2:	5c 88       	casts.h	r8
80003bc4:	b2 08       	st.h	r9[0x0],r8
		}
		break;

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003bc6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003bca:	2f f8       	sub	r8,-1
80003bcc:	ef 68 ff ff 	st.b	r7[-1],r8
80003bd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bd4:	11 88       	ld.ub	r8,r8[0x0]
80003bd6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003bda:	f0 09 18 00 	cp.b	r9,r8
80003bde:	ce 43       	brcs	80003ba6 <adcifa_get_values_from_sequencer+0x8e>

	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
80003be0:	30 28       	mov	r8,2
}
80003be2:	10 9c       	mov	r12,r8
80003be4:	2f bd       	sub	sp,-20
80003be6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bea:	00 00       	add	r0,r0
80003bec:	80 00       	ld.sh	r0,r0[0x0]
80003bee:	3a d0       	mov	r0,-83

80003bf0 <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
80003bf0:	eb cd 40 80 	pushm	r7,lr
80003bf4:	1a 97       	mov	r7,sp
80003bf6:	20 8d       	sub	sp,32
		384,
		512,
		768,
		1024,
		2048,
	};
80003bf8:	48 c9       	lddpc	r9,80003c28 <flashc_get_flash_size+0x38>
80003bfa:	ee c8 00 1e 	sub	r8,r7,30
80003bfe:	31 ea       	mov	r10,30
80003c00:	12 9b       	mov	r11,r9
80003c02:	10 9c       	mov	r12,r8
80003c04:	f0 1f 00 0a 	mcall	80003c2c <flashc_get_flash_size+0x3c>
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK)
80003c08:	fe 68 00 00 	mov	r8,-131072
80003c0c:	70 38       	ld.w	r8,r8[0xc]
80003c0e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003c12:	a1 78       	lsl	r8,0x1
80003c14:	ee 08 00 08 	add	r8,r7,r8
80003c18:	f1 08 ff e2 	ld.sh	r8,r8[-30]
80003c1c:	5c 78       	castu.h	r8
80003c1e:	ab 68       	lsl	r8,0xa
		1024,
	};
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
			>> AVR32_FLASHC_FSR_FSZ_OFFSET]) << 10;
#endif
}
80003c20:	10 9c       	mov	r12,r8
80003c22:	2f 8d       	sub	sp,-32
80003c24:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c28:	80 01       	ld.sh	r1,r0[0x0]
80003c2a:	1e 20       	rsub	r0,pc
80003c2c:	80 00       	ld.sh	r0,r0[0x0]
80003c2e:	c6 9e       	rcall	80003900 <adcifa_configure_sequencer+0x384>

80003c30 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
80003c30:	eb cd 40 80 	pushm	r7,lr
80003c34:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80003c36:	fe 68 00 00 	mov	r8,-131072
80003c3a:	70 28       	ld.w	r8,r8[0x8]
80003c3c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003c40:	5c 58       	castu.b	r8
}
80003c42:	10 9c       	mov	r12,r8
80003c44:	e3 cd 80 80 	ldm	sp++,r7,pc

80003c48 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80003c48:	eb cd 40 80 	pushm	r7,lr
80003c4c:	1a 97       	mov	r7,sp
	while (!flashc_is_ready());
80003c4e:	f0 1f 00 05 	mcall	80003c60 <flashc_default_wait_until_ready+0x18>
80003c52:	18 98       	mov	r8,r12
80003c54:	ec 18 00 01 	eorl	r8,0x1
80003c58:	5c 58       	castu.b	r8
80003c5a:	cf a1       	brne	80003c4e <flashc_default_wait_until_ready+0x6>
}
80003c5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c60:	80 00       	ld.sh	r0,r0[0x0]
80003c62:	3c 30       	mov	r0,-61

80003c64 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80003c64:	eb cd 40 80 	pushm	r7,lr
80003c68:	1a 97       	mov	r7,sp
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80003c6a:	fe 68 00 00 	mov	r8,-131072
80003c6e:	70 28       	ld.w	r8,r8[0x8]
80003c70:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHC_FSR_PROGE_MASK);
}
80003c74:	10 9c       	mov	r12,r8
80003c76:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c7a:	d7 03       	nop

80003c7c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80003c7c:	eb cd 40 80 	pushm	r7,lr
80003c80:	1a 97       	mov	r7,sp
80003c82:	20 3d       	sub	sp,12
80003c84:	ef 4c ff f8 	st.w	r7[-8],r12
80003c88:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003c8c:	49 b8       	lddpc	r8,80003cf8 <flashc_issue_command+0x7c>
80003c8e:	70 08       	ld.w	r8,r8[0x0]
80003c90:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80003c92:	fe 68 00 00 	mov	r8,-131072
80003c96:	70 18       	ld.w	r8,r8[0x4]
80003c98:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80003c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ca0:	5c 58       	castu.b	r8
80003ca2:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80003ca6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003caa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cae:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80003cb2:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80003cb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003cba:	58 08       	cp.w	r8,0
80003cbc:	c0 b5       	brlt	80003cd2 <flashc_issue_command+0x56>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80003cbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003cc2:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80003cc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cca:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80003cce:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80003cd2:	3a 58       	mov	r8,-91
80003cd4:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80003cd8:	fe 68 00 00 	mov	r8,-131072
80003cdc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003ce0:	91 19       	st.w	r8[0x4],r9
	flashc_error_status = flashc_get_error_status();
80003ce2:	f0 1f 00 07 	mcall	80003cfc <flashc_issue_command+0x80>
80003ce6:	18 99       	mov	r9,r12
80003ce8:	48 68       	lddpc	r8,80003d00 <flashc_issue_command+0x84>
80003cea:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80003cec:	48 38       	lddpc	r8,80003cf8 <flashc_issue_command+0x7c>
80003cee:	70 08       	ld.w	r8,r8[0x0]
80003cf0:	5d 18       	icall	r8
}
80003cf2:	2f dd       	sub	sp,-12
80003cf4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cf8:	00 00       	add	r0,r0
80003cfa:	00 08       	add	r8,r0
80003cfc:	80 00       	ld.sh	r0,r0[0x0]
80003cfe:	3c 64       	mov	r4,-58
80003d00:	00 00       	add	r0,r0
80003d02:	05 c4       	ld.ub	r4,r2[0x4]

80003d04 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80003d04:	eb cd 40 80 	pushm	r7,lr
80003d08:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80003d0a:	3f fb       	mov	r11,-1
80003d0c:	30 3c       	mov	r12,3
80003d0e:	f0 1f 00 03 	mcall	80003d18 <flashc_clear_page_buffer+0x14>
}
80003d12:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d16:	00 00       	add	r0,r0
80003d18:	80 00       	ld.sh	r0,r0[0x0]
80003d1a:	3c 7c       	mov	r12,-57

80003d1c <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
80003d1c:	eb cd 40 80 	pushm	r7,lr
80003d20:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80003d22:	fe 68 00 00 	mov	r8,-131072
80003d26:	70 28       	ld.w	r8,r8[0x8]
80003d28:	e2 18 00 20 	andl	r8,0x20,COH
80003d2c:	5f 18       	srne	r8
80003d2e:	5c 58       	castu.b	r8
}
80003d30:	10 9c       	mov	r12,r8
80003d32:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d36:	d7 03       	nop

80003d38 <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80003d38:	eb cd 40 80 	pushm	r7,lr
80003d3c:	1a 97       	mov	r7,sp
80003d3e:	20 1d       	sub	sp,4
80003d40:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80003d44:	ee fb ff fc 	ld.w	r11,r7[-4]
80003d48:	30 cc       	mov	r12,12
80003d4a:	f0 1f 00 05 	mcall	80003d5c <flashc_quick_page_read+0x24>
	return flashc_is_page_erased();
80003d4e:	f0 1f 00 05 	mcall	80003d60 <flashc_quick_page_read+0x28>
80003d52:	18 98       	mov	r8,r12
}
80003d54:	10 9c       	mov	r12,r8
80003d56:	2f fd       	sub	sp,-4
80003d58:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d5c:	80 00       	ld.sh	r0,r0[0x0]
80003d5e:	3c 7c       	mov	r12,-57
80003d60:	80 00       	ld.sh	r0,r0[0x0]
80003d62:	3d 1c       	mov	r12,-47

80003d64 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80003d64:	eb cd 40 80 	pushm	r7,lr
80003d68:	1a 97       	mov	r7,sp
80003d6a:	20 4d       	sub	sp,16
80003d6c:	ef 4c ff f4 	st.w	r7[-12],r12
80003d70:	16 98       	mov	r8,r11
80003d72:	ef 68 ff f0 	st.b	r7[-16],r8
	bool page_erased = true;
80003d76:	30 18       	mov	r8,1
80003d78:	ef 68 ff fb 	st.b	r7[-5],r8

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80003d7c:	ee fb ff f4 	ld.w	r11,r7[-12]
80003d80:	30 2c       	mov	r12,2
80003d82:	f0 1f 00 10 	mcall	80003dc0 <flashc_erase_page+0x5c>
	if (check) {
80003d86:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003d8a:	30 08       	mov	r8,0
80003d8c:	f0 09 18 00 	cp.b	r9,r8
80003d90:	c1 20       	breq	80003db4 <flashc_erase_page+0x50>
		unsigned int error_status = flashc_error_status;
80003d92:	48 d8       	lddpc	r8,80003dc4 <flashc_erase_page+0x60>
80003d94:	70 08       	ld.w	r8,r8[0x0]
80003d96:	ef 48 ff fc 	st.w	r7[-4],r8
		page_erased = flashc_quick_page_read(-1);
80003d9a:	3f fc       	mov	r12,-1
80003d9c:	f0 1f 00 0b 	mcall	80003dc8 <flashc_erase_page+0x64>
80003da0:	18 98       	mov	r8,r12
80003da2:	ef 68 ff fb 	st.b	r7[-5],r8
		flashc_error_status |= error_status;
80003da6:	48 88       	lddpc	r8,80003dc4 <flashc_erase_page+0x60>
80003da8:	70 09       	ld.w	r9,r8[0x0]
80003daa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003dae:	10 49       	or	r9,r8
80003db0:	48 58       	lddpc	r8,80003dc4 <flashc_erase_page+0x60>
80003db2:	91 09       	st.w	r8[0x0],r9
	}
	return page_erased;
80003db4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80003db8:	10 9c       	mov	r12,r8
80003dba:	2f cd       	sub	sp,-16
80003dbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003dc0:	80 00       	ld.sh	r0,r0[0x0]
80003dc2:	3c 7c       	mov	r12,-57
80003dc4:	00 00       	add	r0,r0
80003dc6:	05 c4       	ld.ub	r4,r2[0x4]
80003dc8:	80 00       	ld.sh	r0,r0[0x0]
80003dca:	3d 38       	mov	r8,-45

80003dcc <flashc_write_page>:
	return all_pages_erased;
}


void flashc_write_page(int page_number)
{
80003dcc:	eb cd 40 80 	pushm	r7,lr
80003dd0:	1a 97       	mov	r7,sp
80003dd2:	20 1d       	sub	sp,4
80003dd4:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80003dd8:	ee fb ff fc 	ld.w	r11,r7[-4]
80003ddc:	30 1c       	mov	r12,1
80003dde:	f0 1f 00 03 	mcall	80003de8 <flashc_write_page+0x1c>
}
80003de2:	2f fd       	sub	sp,-4
80003de4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003de8:	80 00       	ld.sh	r0,r0[0x0]
80003dea:	3c 7c       	mov	r12,-57

80003dec <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80003dec:	eb cd 40 80 	pushm	r7,lr
80003df0:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80003df2:	3f fb       	mov	r11,-1
80003df4:	30 fc       	mov	r12,15
80003df6:	f0 1f 00 05 	mcall	80003e08 <flashc_quick_user_page_read+0x1c>
	return flashc_is_page_erased();
80003dfa:	f0 1f 00 05 	mcall	80003e0c <flashc_quick_user_page_read+0x20>
80003dfe:	18 98       	mov	r8,r12
}
80003e00:	10 9c       	mov	r12,r8
80003e02:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e06:	00 00       	add	r0,r0
80003e08:	80 00       	ld.sh	r0,r0[0x0]
80003e0a:	3c 7c       	mov	r12,-57
80003e0c:	80 00       	ld.sh	r0,r0[0x0]
80003e0e:	3d 1c       	mov	r12,-47

80003e10 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80003e10:	eb cd 40 80 	pushm	r7,lr
80003e14:	1a 97       	mov	r7,sp
80003e16:	20 1d       	sub	sp,4
80003e18:	18 98       	mov	r8,r12
80003e1a:	ef 68 ff fc 	st.b	r7[-4],r8
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80003e1e:	3f fb       	mov	r11,-1
80003e20:	30 ec       	mov	r12,14
80003e22:	f0 1f 00 09 	mcall	80003e44 <flashc_erase_user_page+0x34>
	return (check) ? flashc_quick_user_page_read() : true;
80003e26:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003e2a:	30 08       	mov	r8,0
80003e2c:	f0 09 18 00 	cp.b	r9,r8
80003e30:	c0 50       	breq	80003e3a <flashc_erase_user_page+0x2a>
80003e32:	f0 1f 00 06 	mcall	80003e48 <flashc_erase_user_page+0x38>
80003e36:	18 98       	mov	r8,r12
80003e38:	c0 28       	rjmp	80003e3c <flashc_erase_user_page+0x2c>
80003e3a:	30 18       	mov	r8,1
}
80003e3c:	10 9c       	mov	r12,r8
80003e3e:	2f fd       	sub	sp,-4
80003e40:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e44:	80 00       	ld.sh	r0,r0[0x0]
80003e46:	3c 7c       	mov	r12,-57
80003e48:	80 00       	ld.sh	r0,r0[0x0]
80003e4a:	3d ec       	mov	r12,-34

80003e4c <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80003e4c:	eb cd 40 80 	pushm	r7,lr
80003e50:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80003e52:	3f fb       	mov	r11,-1
80003e54:	30 dc       	mov	r12,13
80003e56:	f0 1f 00 03 	mcall	80003e60 <flashc_write_user_page+0x14>
}
80003e5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e5e:	00 00       	add	r0,r0
80003e60:	80 00       	ld.sh	r0,r0[0x0]
80003e62:	3c 7c       	mov	r12,-57

80003e64 <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, uint8_t src, size_t nbytes, bool erase)
{
80003e64:	eb cd 40 80 	pushm	r7,lr
80003e68:	1a 97       	mov	r7,sp
80003e6a:	20 4d       	sub	sp,16
80003e6c:	ef 4c ff fc 	st.w	r7[-4],r12
80003e70:	ef 4a ff f4 	st.w	r7[-12],r10
80003e74:	12 98       	mov	r8,r9
80003e76:	16 99       	mov	r9,r11
80003e78:	ef 69 ff f8 	st.b	r7[-8],r9
80003e7c:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset16(dst, src | (uint16_t)src << 8, nbytes, erase);
80003e80:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003e84:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80003e88:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003e8c:	a9 68       	lsl	r8,0x8
80003e8e:	5c 88       	casts.h	r8
80003e90:	f5 e8 10 08 	or	r8,r10,r8
80003e94:	5c 88       	casts.h	r8
80003e96:	5c 78       	castu.h	r8
80003e98:	ee fa ff f4 	ld.w	r10,r7[-12]
80003e9c:	10 9b       	mov	r11,r8
80003e9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80003ea2:	f0 1f 00 04 	mcall	80003eb0 <flashc_memset8+0x4c>
80003ea6:	18 98       	mov	r8,r12
}
80003ea8:	10 9c       	mov	r12,r8
80003eaa:	2f cd       	sub	sp,-16
80003eac:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eb0:	80 00       	ld.sh	r0,r0[0x0]
80003eb2:	3e b4       	mov	r4,-21

80003eb4 <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, uint16_t src, size_t nbytes, bool erase)
{
80003eb4:	eb cd 40 80 	pushm	r7,lr
80003eb8:	1a 97       	mov	r7,sp
80003eba:	20 4d       	sub	sp,16
80003ebc:	ef 4c ff fc 	st.w	r7[-4],r12
80003ec0:	ef 4a ff f4 	st.w	r7[-12],r10
80003ec4:	12 98       	mov	r8,r9
80003ec6:	16 99       	mov	r9,r11
80003ec8:	ef 59 ff f8 	st.h	r7[-8],r9
80003ecc:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset32(dst, src | (uint32_t)src << 16, nbytes, erase);
80003ed0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003ed4:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80003ed8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003edc:	b1 68       	lsl	r8,0x10
80003ede:	f5 e8 10 08 	or	r8,r10,r8
80003ee2:	ee fa ff f4 	ld.w	r10,r7[-12]
80003ee6:	10 9b       	mov	r11,r8
80003ee8:	ee fc ff fc 	ld.w	r12,r7[-4]
80003eec:	f0 1f 00 04 	mcall	80003efc <flashc_memset16+0x48>
80003ef0:	18 98       	mov	r8,r12
}
80003ef2:	10 9c       	mov	r12,r8
80003ef4:	2f cd       	sub	sp,-16
80003ef6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003efa:	00 00       	add	r0,r0
80003efc:	80 00       	ld.sh	r0,r0[0x0]
80003efe:	3f 00       	mov	r0,-16

80003f00 <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, uint32_t src, size_t nbytes, bool erase)
{
80003f00:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80003f04:	1a 97       	mov	r7,sp
80003f06:	20 6d       	sub	sp,24
80003f08:	ef 4c ff fc 	st.w	r7[-4],r12
80003f0c:	ef 4b ff f8 	st.w	r7[-8],r11
80003f10:	ef 4a ff f4 	st.w	r7[-12],r10
80003f14:	12 98       	mov	r8,r9
80003f16:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
80003f1a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003f1e:	ee f0 ff f8 	ld.w	r0,r7[-8]
80003f22:	30 01       	mov	r1,0
80003f24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003f28:	ef 49 ff ec 	st.w	r7[-20],r9
80003f2c:	30 09       	mov	r9,0
80003f2e:	ef 49 ff e8 	st.w	r7[-24],r9
80003f32:	ee f3 ff ec 	ld.w	r3,r7[-20]
80003f36:	a1 63       	lsl	r3,0x0
80003f38:	30 02       	mov	r2,0
80003f3a:	e1 e2 10 0a 	or	r10,r0,r2
80003f3e:	e3 e3 10 0b 	or	r11,r1,r3
80003f42:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003f46:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f4a:	f0 1f 00 04 	mcall	80003f58 <flashc_memset32+0x58>
80003f4e:	18 98       	mov	r8,r12
}
80003f50:	10 9c       	mov	r12,r8
80003f52:	2f ad       	sub	sp,-24
80003f54:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80003f58:	80 00       	ld.sh	r0,r0[0x0]
80003f5a:	3f 5c       	mov	r12,-11

80003f5c <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80003f5c:	eb cd 40 80 	pushm	r7,lr
80003f60:	1a 97       	mov	r7,sp
80003f62:	21 bd       	sub	sp,108
80003f64:	ef 4c ff a4 	st.w	r7[-92],r12
80003f68:	ee eb ff 9c 	st.d	r7[-100],r10
80003f6c:	ef 49 ff 98 	st.w	r7[-104],r9
80003f70:	ef 68 ff 94 	st.b	r7[-108],r8
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
80003f74:	30 08       	mov	r8,0
80003f76:	30 09       	mov	r9,0
80003f78:	ee e9 ff d8 	st.d	r7[-40],r8
	StructCVPtr dest_end;
	UnionCVPtr flash_page_source_end;
	bool incomplete_flash_page_end;
	Union64 flash_dword;
	UnionVPtr tmp;
	unsigned int error_status = 0;
80003f7c:	30 08       	mov	r8,0
80003f7e:	ef 48 ff ec 	st.w	r7[-20],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80003f82:	f0 1f 00 fa 	mcall	80004368 <flashc_memset64+0x40c>
80003f86:	18 99       	mov	r9,r12
80003f88:	fc 18 80 00 	movh	r8,0x8000
80003f8c:	f2 08 00 08 	add	r8,r9,r8
80003f90:	ef 48 ff e4 	st.w	r7[-28],r8
	dest.u8ptr = dst;
80003f94:	ee f8 ff a4 	ld.w	r8,r7[-92]
80003f98:	ef 48 ff e0 	st.w	r7[-32],r8
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80003f9c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003fa0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003fa4:	20 18       	sub	r8,1
80003fa6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003faa:	ef 48 ff f0 	st.w	r7[-16],r8
80003fae:	c1 f8       	rjmp	80003fec <flashc_memset64+0x90>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
80003fb0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003fb4:	ef 38 ff a3 	ld.ub	r8,r7[-93]
80003fb8:	ee 09 00 09 	add	r9,r7,r9
80003fbc:	f3 68 ff d8 	st.b	r9[-40],r8
		src >>= 8;
80003fc0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80003fc4:	b9 68       	lsl	r8,0x18
80003fc6:	ee f9 ff a0 	ld.w	r9,r7[-96]
80003fca:	a9 89       	lsr	r9,0x8
80003fcc:	f3 e8 10 08 	or	r8,r9,r8
80003fd0:	ef 48 ff a0 	st.w	r7[-96],r8
80003fd4:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80003fd8:	a9 88       	lsr	r8,0x8
80003fda:	ef 48 ff 9c 	st.w	r7[-100],r8

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
80003fde:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003fe2:	20 18       	sub	r8,1
80003fe4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003fe8:	ef 48 ff f0 	st.w	r7[-16],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80003fec:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80003ff0:	58 08       	cp.w	r8,0
80003ff2:	5c 29       	cpc	r9
80003ff4:	cd e1       	brne	80003fb0 <flashc_memset64+0x54>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
80003ff6:	ee f9 ff e0 	ld.w	r9,r7[-32]
80003ffa:	ee f8 ff 98 	ld.w	r8,r7[-104]
80003ffe:	f2 08 00 08 	add	r8,r9,r8
80004002:	ef 48 ff d4 	st.w	r7[-44],r8

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
80004006:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000400a:	e0 69 ff ff 	mov	r9,65535
8000400e:	ea 19 7f ff 	orh	r9,0x7fff
80004012:	12 38       	cp.w	r8,r9
80004014:	e0 8b 00 07 	brhi	80004022 <flashc_memset64+0xc6>
		dest.u8ptr = AVR32_FLASH;
80004018:	fc 18 80 00 	movh	r8,0x8000
8000401c:	ef 48 ff e0 	st.w	r7[-32],r8
80004020:	c1 58       	rjmp	8000404a <flashc_memset64+0xee>
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
80004022:	ee f9 ff e4 	ld.w	r9,r7[-28]
80004026:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000402a:	10 39       	cp.w	r9,r8
8000402c:	e0 8b 00 0f 	brhi	8000404a <flashc_memset64+0xee>
80004030:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004034:	e0 69 ff ff 	mov	r9,65535
80004038:	ea 19 80 7f 	orh	r9,0x807f
8000403c:	12 38       	cp.w	r8,r9
8000403e:	e0 8b 00 06 	brhi	8000404a <flashc_memset64+0xee>
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80004042:	fc 18 80 80 	movh	r8,0x8080
80004046:	ef 48 ff e0 	st.w	r7[-32],r8
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
8000404a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000404e:	e0 69 02 00 	mov	r9,512
80004052:	ea 19 80 80 	orh	r9,0x8080
80004056:	12 38       	cp.w	r8,r9
80004058:	e0 88 00 09 	brls	8000406a <flashc_memset64+0x10e>
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
8000405c:	e0 68 02 00 	mov	r8,512
80004060:	ea 18 80 80 	orh	r8,0x8080
80004064:	ef 48 ff d4 	st.w	r7[-44],r8
80004068:	c1 38       	rjmp	8000408e <flashc_memset64+0x132>
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
8000406a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000406e:	fc 19 80 80 	movh	r9,0x8080
80004072:	12 38       	cp.w	r8,r9
80004074:	e0 8b 00 0d 	brhi	8000408e <flashc_memset64+0x132>
80004078:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000407c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004080:	10 39       	cp.w	r9,r8
80004082:	e0 88 00 06 	brls	8000408e <flashc_memset64+0x132>
		dest_end.u8ptr = flash_array_end.u8ptr;
80004086:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000408a:	ef 48 ff d4 	st.w	r7[-44],r8
	}

	// Align each end of destination pointer with its natural boundary.
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
8000408e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004092:	a1 c8       	cbr	r8,0x0
80004094:	ef 48 ff cc 	st.w	r7[-52],r8
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
80004098:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000409c:	e0 18 ff fc 	andl	r8,0xfffc
800040a0:	ef 48 ff c4 	st.w	r7[-60],r8
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));
800040a4:	ee f8 ff c4 	ld.w	r8,r7[-60]
800040a8:	e0 18 ff f8 	andl	r8,0xfff8
800040ac:	ef 48 ff bc 	st.w	r7[-68],r8

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
800040b0:	c4 b9       	rjmp	80004346 <flashc_memset64+0x3ea>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800040b2:	f0 1f 00 af 	mcall	8000436c <flashc_memset64+0x410>
		error_status |= flashc_error_status;
800040b6:	fe f8 02 ba 	ld.w	r8,pc[698]
800040ba:	70 08       	ld.w	r8,r8[0x0]
800040bc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800040c0:	f3 e8 10 08 	or	r8,r9,r8
800040c4:	ef 48 ff ec 	st.w	r7[-20],r8

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
800040c8:	ee f8 ff bc 	ld.w	r8,r7[-68]
800040cc:	ef 48 ff f8 	st.w	r7[-8],r8
800040d0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040d4:	e0 18 fe 00 	andl	r8,0xfe00
800040d8:	f0 c8 fe 00 	sub	r8,r8,-512
800040dc:	ef 48 ff fc 	st.w	r7[-4],r8
800040e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800040e8:	f0 09 0d 48 	min	r8,r8,r9
800040ec:	ef 48 ff f4 	st.w	r7[-12],r8
800040f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
800040f4:	ef 48 ff b4 	st.w	r7[-76],r8
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800040f8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040fc:	10 9a       	mov	r10,r8
800040fe:	e0 1a fe 00 	andl	r10,0xfe00
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
80004102:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004106:	10 99       	mov	r9,r8
80004108:	e0 19 fe 00 	andl	r9,0xfe00
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
8000410c:	30 18       	mov	r8,1
8000410e:	12 3a       	cp.w	r10,r9
80004110:	c0 22       	brcc	80004114 <flashc_memset64+0x1b8>
80004112:	30 08       	mov	r8,0
80004114:	ef 68 ff eb 	st.b	r7[-21],r8
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80004118:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000411c:	ee e9 ff ac 	st.d	r7[-84],r8

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80004120:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004124:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004128:	c5 b0       	breq	800041de <flashc_memset64+0x282>
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8000412a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000412e:	e0 18 fe 00 	andl	r8,0xfe00
80004132:	ef 48 ff a8 	st.w	r7[-88],r8
80004136:	c0 e8       	rjmp	80004152 <flashc_memset64+0x1f6>
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
80004138:	ee fa ff a8 	ld.w	r10,r7[-88]
8000413c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004140:	f0 e8 00 00 	ld.d	r8,r8[0]
80004144:	f4 e9 00 00 	st.d	r10[0],r8
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
80004148:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000414c:	2f 88       	sub	r8,-8
8000414e:	ef 48 ff a8 	st.w	r7[-88],r8
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80004152:	ee f9 ff a8 	ld.w	r9,r7[-88]
80004156:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000415a:	e0 18 ff f8 	andl	r8,0xfff8
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8000415e:	10 39       	cp.w	r9,r8
80004160:	ce c3       	brcs	80004138 <flashc_memset64+0x1dc>
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
80004162:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004166:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000416a:	c3 a0       	breq	800041de <flashc_memset64+0x282>
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
8000416c:	30 08       	mov	r8,0
8000416e:	ef 48 ff f0 	st.w	r7[-16],r8
80004172:	c1 38       	rjmp	80004198 <flashc_memset64+0x23c>
					flash_dword.u8[i] = *tmp.u8ptr++;
80004174:	ee fa ff f0 	ld.w	r10,r7[-16]
80004178:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000417c:	11 89       	ld.ub	r9,r8[0x0]
8000417e:	5c 59       	castu.b	r9
80004180:	ee 0a 00 0a 	add	r10,r7,r10
80004184:	f5 69 ff ac 	st.b	r10[-84],r9
80004188:	2f f8       	sub	r8,-1
8000418a:	ef 48 ff a8 	st.w	r7[-88],r8
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
8000418e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004192:	2f f8       	sub	r8,-1
80004194:	ef 48 ff f0 	st.w	r7[-16],r8
80004198:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000419c:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800041a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041a4:	10 39       	cp.w	r9,r8
800041a6:	fe 9b ff e7 	brhi	80004174 <flashc_memset64+0x218>
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
800041aa:	ee f8 ff e0 	ld.w	r8,r7[-32]
800041ae:	e0 18 ff f8 	andl	r8,0xfff8
800041b2:	ef 48 ff e0 	st.w	r7[-32],r8

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
800041b6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800041ba:	ee f8 ff bc 	ld.w	r8,r7[-68]
800041be:	10 39       	cp.w	r9,r8
800041c0:	c0 f2       	brcc	800041de <flashc_memset64+0x282>
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
800041c2:	ee fa ff e0 	ld.w	r10,r7[-32]
800041c6:	ee e8 ff ac 	ld.d	r8,r7[-84]
800041ca:	f4 e9 00 00 	st.d	r10[0],r8
800041ce:	f4 c8 ff f8 	sub	r8,r10,-8
800041d2:	ef 48 ff e0 	st.w	r7[-32],r8
					flash_dword.u64 = source.u64;
800041d6:	ee e8 ff d8 	ld.d	r8,r7[-40]
800041da:	ee e9 ff ac 	st.d	r7[-84],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
800041de:	ee f8 ff b4 	ld.w	r8,r7[-76]
800041e2:	10 99       	mov	r9,r8
800041e4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800041e8:	f2 08 01 08 	sub	r8,r9,r8
800041ec:	a3 58       	asr	r8,0x3
800041ee:	ef 48 ff f0 	st.w	r7[-16],r8
800041f2:	c1 08       	rjmp	80004212 <flashc_memset64+0x2b6>
			*dest.u64ptr++ = source.u64;
800041f4:	ee fa ff e0 	ld.w	r10,r7[-32]
800041f8:	ee e8 ff d8 	ld.d	r8,r7[-40]
800041fc:	f4 e9 00 00 	st.d	r10[0],r8
80004200:	f4 c8 ff f8 	sub	r8,r10,-8
80004204:	ef 48 ff e0 	st.w	r7[-32],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80004208:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000420c:	20 18       	sub	r8,1
8000420e:	ef 48 ff f0 	st.w	r7[-16],r8
80004212:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004216:	58 08       	cp.w	r8,0
80004218:	ce e1       	brne	800041f4 <flashc_memset64+0x298>
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
8000421a:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8000421e:	30 08       	mov	r8,0
80004220:	f0 09 18 00 	cp.b	r9,r8
80004224:	c4 70       	breq	800042b2 <flashc_memset64+0x356>
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
80004226:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000422a:	ef 48 ff a8 	st.w	r7[-88],r8

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
8000422e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004232:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004236:	c3 80       	breq	800042a6 <flashc_memset64+0x34a>
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80004238:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000423c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004240:	ef 48 ff f0 	st.w	r7[-16],r8
80004244:	c1 38       	rjmp	8000426a <flashc_memset64+0x30e>
						flash_dword.u8[i] = *tmp.u8ptr++;
80004246:	ee fa ff f0 	ld.w	r10,r7[-16]
8000424a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000424e:	11 89       	ld.ub	r9,r8[0x0]
80004250:	5c 59       	castu.b	r9
80004252:	ee 0a 00 0a 	add	r10,r7,r10
80004256:	f5 69 ff ac 	st.b	r10[-84],r9
8000425a:	2f f8       	sub	r8,-1
8000425c:	ef 48 ff a8 	st.w	r7[-88],r8
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80004260:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004264:	2f f8       	sub	r8,-1
80004266:	ef 48 ff f0 	st.w	r7[-16],r8
8000426a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000426e:	58 78       	cp.w	r8,7
80004270:	fe 98 ff eb 	brls	80004246 <flashc_memset64+0x2ea>
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
80004274:	ee fa ff e0 	ld.w	r10,r7[-32]
80004278:	ee e8 ff ac 	ld.d	r8,r7[-84]
8000427c:	f4 e9 00 00 	st.d	r10[0],r8
80004280:	f4 c8 ff f8 	sub	r8,r10,-8
80004284:	ef 48 ff e0 	st.w	r7[-32],r8
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80004288:	c1 08       	rjmp	800042a8 <flashc_memset64+0x34c>
					*tmp.u64ptr = *tmp.u64ptr;
8000428a:	ee fa ff a8 	ld.w	r10,r7[-88]
8000428e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004292:	f0 e8 00 00 	ld.d	r8,r8[0]
80004296:	f4 e9 00 00 	st.d	r10[0],r8
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
8000429a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000429e:	2f 88       	sub	r8,-8
800042a0:	ef 48 ff a8 	st.w	r7[-88],r8
800042a4:	c0 28       	rjmp	800042a8 <flashc_memset64+0x34c>
800042a6:	d7 03       	nop
800042a8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800042ac:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800042b0:	ce d1       	brne	8000428a <flashc_memset64+0x32e>
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
800042b2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800042b6:	fc 19 80 80 	movh	r9,0x8080
800042ba:	12 38       	cp.w	r8,r9
800042bc:	e0 8b 00 2a 	brhi	80004310 <flashc_memset64+0x3b4>
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
800042c0:	ef 39 ff 94 	ld.ub	r9,r7[-108]
800042c4:	30 08       	mov	r8,0
800042c6:	f0 09 18 00 	cp.b	r9,r8
800042ca:	c0 d0       	breq	800042e4 <flashc_memset64+0x388>
				flashc_erase_page(-1, false);
800042cc:	30 0b       	mov	r11,0
800042ce:	3f fc       	mov	r12,-1
800042d0:	f0 1f 00 29 	mcall	80004374 <flashc_memset64+0x418>
				error_status |= flashc_error_status;
800042d4:	4a 78       	lddpc	r8,80004370 <flashc_memset64+0x414>
800042d6:	70 08       	ld.w	r8,r8[0x0]
800042d8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800042dc:	f3 e8 10 08 	or	r8,r9,r8
800042e0:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_page(-1);
800042e4:	3f fc       	mov	r12,-1
800042e6:	f0 1f 00 25 	mcall	80004378 <flashc_memset64+0x41c>
			error_status |= flashc_error_status;
800042ea:	4a 28       	lddpc	r8,80004370 <flashc_memset64+0x414>
800042ec:	70 08       	ld.w	r8,r8[0x0]
800042ee:	ee f9 ff ec 	ld.w	r9,r7[-20]
800042f2:	f3 e8 10 08 	or	r8,r9,r8
800042f6:	ef 48 ff ec 	st.w	r7[-20],r8

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
800042fa:	ee f9 ff e0 	ld.w	r9,r7[-32]
800042fe:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004302:	10 39       	cp.w	r9,r8
80004304:	c2 13       	brcs	80004346 <flashc_memset64+0x3ea>
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80004306:	fc 18 80 80 	movh	r8,0x8080
8000430a:	ef 48 ff e0 	st.w	r7[-32],r8
8000430e:	c1 c8       	rjmp	80004346 <flashc_memset64+0x3ea>
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
80004310:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80004314:	30 08       	mov	r8,0
80004316:	f0 09 18 00 	cp.b	r9,r8
8000431a:	c0 c0       	breq	80004332 <flashc_memset64+0x3d6>
				flashc_erase_user_page(false);
8000431c:	30 0c       	mov	r12,0
8000431e:	f0 1f 00 18 	mcall	8000437c <flashc_memset64+0x420>
				error_status |= flashc_error_status;
80004322:	49 48       	lddpc	r8,80004370 <flashc_memset64+0x414>
80004324:	70 08       	ld.w	r8,r8[0x0]
80004326:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000432a:	f3 e8 10 08 	or	r8,r9,r8
8000432e:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_user_page();
80004332:	f0 1f 00 14 	mcall	80004380 <flashc_memset64+0x424>
			error_status |= flashc_error_status;
80004336:	48 f8       	lddpc	r8,80004370 <flashc_memset64+0x414>
80004338:	70 08       	ld.w	r8,r8[0x0]
8000433a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000433e:	f3 e8 10 08 	or	r8,r9,r8
80004342:	ef 48 ff ec 	st.w	r7[-20],r8
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
80004346:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000434a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000434e:	10 39       	cp.w	r9,r8
80004350:	fe 93 fe b1 	brlo	800040b2 <flashc_memset64+0x156>
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
80004354:	48 78       	lddpc	r8,80004370 <flashc_memset64+0x414>
80004356:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000435a:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memset function does.
	return dst;
8000435c:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
80004360:	10 9c       	mov	r12,r8
80004362:	2e 5d       	sub	sp,-108
80004364:	e3 cd 80 80 	ldm	sp++,r7,pc
80004368:	80 00       	ld.sh	r0,r0[0x0]
8000436a:	3b f0       	mov	r0,-65
8000436c:	80 00       	ld.sh	r0,r0[0x0]
8000436e:	3d 04       	mov	r4,-48
80004370:	00 00       	add	r0,r0
80004372:	05 c4       	ld.ub	r4,r2[0x4]
80004374:	80 00       	ld.sh	r0,r0[0x0]
80004376:	3d 64       	mov	r4,-42
80004378:	80 00       	ld.sh	r0,r0[0x0]
8000437a:	3d cc       	mov	r12,-36
8000437c:	80 00       	ld.sh	r0,r0[0x0]
8000437e:	3e 10       	mov	r0,-31
80004380:	80 00       	ld.sh	r0,r0[0x0]
80004382:	3e 4c       	mov	r12,-28

80004384 <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80004384:	eb cd 40 80 	pushm	r7,lr
80004388:	1a 97       	mov	r7,sp
8000438a:	20 bd       	sub	sp,44
8000438c:	ef 4c ff e0 	st.w	r7[-32],r12
80004390:	ef 4b ff dc 	st.w	r7[-36],r11
80004394:	ef 4a ff d8 	st.w	r7[-40],r10
80004398:	12 98       	mov	r8,r9
8000439a:	ef 68 ff d4 	st.b	r7[-44],r8
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
8000439e:	30 08       	mov	r8,0
800043a0:	ef 48 ff f0 	st.w	r7[-16],r8
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
800043a4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800043a8:	ef 48 ff f8 	st.w	r7[-8],r8
	const uint8_t* src_buf=(const uint8_t*)src;
800043ac:	ee f8 ff dc 	ld.w	r8,r7[-36]
800043b0:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
800043b4:	ee f9 ff e0 	ld.w	r9,r7[-32]
800043b8:	30 18       	mov	r8,1
800043ba:	e0 6a ff ff 	mov	r10,65535
800043be:	ea 1a 80 7f 	orh	r10,0x807f
800043c2:	14 39       	cp.w	r9,r10
800043c4:	e0 8b 00 03 	brhi	800043ca <flashc_memcpy+0x46>
800043c8:	30 08       	mov	r8,0
800043ca:	ef 68 ff ef 	st.b	r7[-17],r8

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
800043ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043d6:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800043da:	f2 08 01 08 	sub	r8,r9,r8
800043de:	ef 48 ff f4 	st.w	r7[-12],r8

	while (nbytes) {
800043e2:	c9 18       	rjmp	80004504 <flashc_memcpy+0x180>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800043e4:	f0 1f 00 50 	mcall	80004524 <flashc_memcpy+0x1a0>
		error_status |= flashc_error_status;
800043e8:	4d 08       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
800043ea:	70 08       	ld.w	r8,r8[0x0]
800043ec:	ee f9 ff f0 	ld.w	r9,r7[-16]
800043f0:	f3 e8 10 08 	or	r8,r9,r8
800043f4:	ef 48 ff f0 	st.w	r7[-16],r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
800043f8:	30 08       	mov	r8,0
800043fa:	ef 58 ff ec 	st.h	r7[-20],r8
800043fe:	c4 b8       	rjmp	80004494 <flashc_memcpy+0x110>
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
80004400:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004404:	f0 e8 00 00 	ld.d	r8,r8[0]
80004408:	ee e9 ff e4 	st.d	r7[-28],r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
8000440c:	30 08       	mov	r8,0
8000440e:	ef 68 ff ee 	st.b	r7[-18],r8
80004412:	c2 d8       	rjmp	8000446c <flashc_memcpy+0xe8>
				if (nbytes && (flash_add == dest_add)) {
80004414:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004418:	58 08       	cp.w	r8,0
8000441a:	c1 f0       	breq	80004458 <flashc_memcpy+0xd4>
8000441c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004424:	10 39       	cp.w	r9,r8
80004426:	c1 91       	brne	80004458 <flashc_memcpy+0xd4>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80004428:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000442c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004430:	11 88       	ld.ub	r8,r8[0x0]
80004432:	ee 09 00 09 	add	r9,r7,r9
80004436:	f3 68 ff e4 	st.b	r9[-28],r8
8000443a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000443e:	2f f8       	sub	r8,-1
80004440:	ef 48 ff fc 	st.w	r7[-4],r8
					dest_add++;
80004444:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004448:	2f f8       	sub	r8,-1
8000444a:	ef 48 ff f8 	st.w	r7[-8],r8
					nbytes--;
8000444e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004452:	20 18       	sub	r8,1
80004454:	ef 48 ff d8 	st.w	r7[-40],r8
				}
				flash_add++;
80004458:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000445c:	2f f8       	sub	r8,-1
8000445e:	ef 48 ff f4 	st.w	r7[-12],r8
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80004462:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004466:	2f f8       	sub	r8,-1
80004468:	ef 68 ff ee 	st.b	r7[-18],r8
8000446c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80004470:	30 78       	mov	r8,7
80004472:	f0 09 18 00 	cp.b	r9,r8
80004476:	fe 98 ff cf 	brls	80004414 <flashc_memcpy+0x90>
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
8000447a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000447e:	20 88       	sub	r8,8
80004480:	10 9a       	mov	r10,r8
80004482:	ee e8 ff e4 	ld.d	r8,r7[-28]
80004486:	f4 e9 00 00 	st.d	r10[0],r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
8000448a:	ef 08 ff ec 	ld.sh	r8,r7[-20]
8000448e:	2f 88       	sub	r8,-8
80004490:	ef 58 ff ec 	st.h	r7[-20],r8
80004494:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80004498:	e0 68 01 ff 	mov	r8,511
8000449c:	f0 09 19 00 	cp.h	r9,r8
800044a0:	fe 98 ff b0 	brls	80004400 <flashc_memcpy+0x7c>
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
800044a4:	ef 39 ff d4 	ld.ub	r9,r7[-44]
800044a8:	30 08       	mov	r8,0
800044aa:	f0 09 18 00 	cp.b	r9,r8
800044ae:	c1 70       	breq	800044dc <flashc_memcpy+0x158>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
800044b0:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800044b4:	30 08       	mov	r8,0
800044b6:	f0 09 18 00 	cp.b	r9,r8
800044ba:	c0 50       	breq	800044c4 <flashc_memcpy+0x140>
800044bc:	30 0c       	mov	r12,0
800044be:	f0 1f 00 1c 	mcall	8000452c <flashc_memcpy+0x1a8>
800044c2:	c0 58       	rjmp	800044cc <flashc_memcpy+0x148>
800044c4:	30 0b       	mov	r11,0
800044c6:	3f fc       	mov	r12,-1
800044c8:	f0 1f 00 1a 	mcall	80004530 <flashc_memcpy+0x1ac>
			error_status |= flashc_error_status;
800044cc:	49 78       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
800044ce:	70 08       	ld.w	r8,r8[0x0]
800044d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800044d4:	f3 e8 10 08 	or	r8,r9,r8
800044d8:	ef 48 ff f0 	st.w	r7[-16],r8
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
800044dc:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800044e0:	30 08       	mov	r8,0
800044e2:	f0 09 18 00 	cp.b	r9,r8
800044e6:	c0 40       	breq	800044ee <flashc_memcpy+0x16a>
800044e8:	f0 1f 00 13 	mcall	80004534 <flashc_memcpy+0x1b0>
800044ec:	c0 48       	rjmp	800044f4 <flashc_memcpy+0x170>
800044ee:	3f fc       	mov	r12,-1
800044f0:	f0 1f 00 12 	mcall	80004538 <flashc_memcpy+0x1b4>
		error_status |= flashc_error_status;
800044f4:	48 d8       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
800044f6:	70 08       	ld.w	r8,r8[0x0]
800044f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800044fc:	f3 e8 10 08 	or	r8,r9,r8
80004500:	ef 48 ff f0 	st.w	r7[-16],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80004504:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004508:	58 08       	cp.w	r8,0
8000450a:	fe 91 ff 6d 	brne	800043e4 <flashc_memcpy+0x60>
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
8000450e:	48 78       	lddpc	r8,80004528 <flashc_memcpy+0x1a4>
80004510:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004514:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
80004516:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
8000451a:	10 9c       	mov	r12,r8
8000451c:	2f 5d       	sub	sp,-44
8000451e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004522:	00 00       	add	r0,r0
80004524:	80 00       	ld.sh	r0,r0[0x0]
80004526:	3d 04       	mov	r4,-48
80004528:	00 00       	add	r0,r0
8000452a:	05 c4       	ld.ub	r4,r2[0x4]
8000452c:	80 00       	ld.sh	r0,r0[0x0]
8000452e:	3e 10       	mov	r0,-31
80004530:	80 00       	ld.sh	r0,r0[0x0]
80004532:	3d 64       	mov	r4,-42
80004534:	80 00       	ld.sh	r0,r0[0x0]
80004536:	3e 4c       	mov	r12,-28
80004538:	80 00       	ld.sh	r0,r0[0x0]
8000453a:	3d cc       	mov	r12,-36

8000453c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000453c:	eb cd 40 80 	pushm	r7,lr
80004540:	1a 97       	mov	r7,sp
80004542:	20 4d       	sub	sp,16
80004544:	ef 4c ff f4 	st.w	r7[-12],r12
80004548:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000454c:	30 08       	mov	r8,0
8000454e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
80004552:	30 08       	mov	r8,0
80004554:	ef 48 ff fc 	st.w	r7[-4],r8
80004558:	c1 c8       	rjmp	80004590 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000455a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000455e:	70 19       	ld.w	r9,r8[0x4]
80004560:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004564:	70 08       	ld.w	r8,r8[0x0]
80004566:	12 9b       	mov	r11,r9
80004568:	10 9c       	mov	r12,r8
8000456a:	f0 1f 00 10 	mcall	800045a8 <gpio_enable_module+0x6c>
8000456e:	18 98       	mov	r8,r12
80004570:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004574:	f3 e8 10 08 	or	r8,r9,r8
80004578:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
8000457c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004580:	2f 88       	sub	r8,-8
80004582:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80004586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000458a:	2f f8       	sub	r8,-1
8000458c:	ef 48 ff fc 	st.w	r7[-4],r8
80004590:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004594:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004598:	10 39       	cp.w	r9,r8
8000459a:	ce 03       	brcs	8000455a <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
8000459c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800045a0:	10 9c       	mov	r12,r8
800045a2:	2f cd       	sub	sp,-16
800045a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800045a8:	80 00       	ld.sh	r0,r0[0x0]
800045aa:	45 ac       	lddsp	r12,sp[0x168]

800045ac <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800045ac:	eb cd 40 80 	pushm	r7,lr
800045b0:	1a 97       	mov	r7,sp
800045b2:	20 3d       	sub	sp,12
800045b4:	ef 4c ff f8 	st.w	r7[-8],r12
800045b8:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800045bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045c0:	a5 98       	lsr	r8,0x5
800045c2:	a9 78       	lsl	r8,0x9
800045c4:	e0 28 e0 00 	sub	r8,57344
800045c8:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
800045cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800045d0:	58 78       	cp.w	r8,7
800045d2:	e0 8b 01 16 	brhi	800047fe <gpio_enable_module_pin+0x252>
800045d6:	fe f9 02 4e 	ld.w	r9,pc[590]
800045da:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800045de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045e6:	30 19       	mov	r9,1
800045e8:	f2 08 09 48 	lsl	r8,r9,r8
800045ec:	10 99       	mov	r9,r8
800045ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045f2:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800045f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045fc:	30 19       	mov	r9,1
800045fe:	f2 08 09 48 	lsl	r8,r9,r8
80004602:	10 99       	mov	r9,r8
80004604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004608:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000460a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000460e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004612:	30 19       	mov	r9,1
80004614:	f2 08 09 48 	lsl	r8,r9,r8
80004618:	10 99       	mov	r9,r8
8000461a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000461e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004620:	cf 18       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004626:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000462a:	30 19       	mov	r9,1
8000462c:	f2 08 09 48 	lsl	r8,r9,r8
80004630:	10 99       	mov	r9,r8
80004632:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004636:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004638:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000463c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004640:	30 19       	mov	r9,1
80004642:	f2 08 09 48 	lsl	r8,r9,r8
80004646:	10 99       	mov	r9,r8
80004648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000464c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000464e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004652:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004656:	30 19       	mov	r9,1
80004658:	f2 08 09 48 	lsl	r8,r9,r8
8000465c:	10 99       	mov	r9,r8
8000465e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004662:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004664:	cc f8       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000466a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000466e:	30 19       	mov	r9,1
80004670:	f2 08 09 48 	lsl	r8,r9,r8
80004674:	10 99       	mov	r9,r8
80004676:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000467a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000467c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004680:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004684:	30 19       	mov	r9,1
80004686:	f2 08 09 48 	lsl	r8,r9,r8
8000468a:	10 99       	mov	r9,r8
8000468c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004690:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80004692:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004696:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000469a:	30 19       	mov	r9,1
8000469c:	f2 08 09 48 	lsl	r8,r9,r8
800046a0:	10 99       	mov	r9,r8
800046a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046a6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800046a8:	ca d8       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800046aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046b2:	30 19       	mov	r9,1
800046b4:	f2 08 09 48 	lsl	r8,r9,r8
800046b8:	10 99       	mov	r9,r8
800046ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046be:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800046c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046c8:	30 19       	mov	r9,1
800046ca:	f2 08 09 48 	lsl	r8,r9,r8
800046ce:	10 99       	mov	r9,r8
800046d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046d4:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800046d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046de:	30 19       	mov	r9,1
800046e0:	f2 08 09 48 	lsl	r8,r9,r8
800046e4:	10 99       	mov	r9,r8
800046e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046ea:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800046ec:	c8 b8       	rjmp	80004802 <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800046ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046f6:	30 19       	mov	r9,1
800046f8:	f2 08 09 48 	lsl	r8,r9,r8
800046fc:	10 99       	mov	r9,r8
800046fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004702:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004708:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000470c:	30 19       	mov	r9,1
8000470e:	f2 08 09 48 	lsl	r8,r9,r8
80004712:	10 99       	mov	r9,r8
80004714:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004718:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000471a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000471e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004722:	30 19       	mov	r9,1
80004724:	f2 08 09 48 	lsl	r8,r9,r8
80004728:	10 99       	mov	r9,r8
8000472a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000472e:	91 d9       	st.w	r8[0x34],r9
		break;
80004730:	c6 98       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004736:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000473a:	30 19       	mov	r9,1
8000473c:	f2 08 09 48 	lsl	r8,r9,r8
80004740:	10 99       	mov	r9,r8
80004742:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004746:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004748:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000474c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004750:	30 19       	mov	r9,1
80004752:	f2 08 09 48 	lsl	r8,r9,r8
80004756:	10 99       	mov	r9,r8
80004758:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000475c:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000475e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004762:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004766:	30 19       	mov	r9,1
80004768:	f2 08 09 48 	lsl	r8,r9,r8
8000476c:	10 99       	mov	r9,r8
8000476e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004772:	91 d9       	st.w	r8[0x34],r9
		break;
80004774:	c4 78       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000477a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000477e:	30 19       	mov	r9,1
80004780:	f2 08 09 48 	lsl	r8,r9,r8
80004784:	10 99       	mov	r9,r8
80004786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000478a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000478c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004790:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004794:	30 19       	mov	r9,1
80004796:	f2 08 09 48 	lsl	r8,r9,r8
8000479a:	10 99       	mov	r9,r8
8000479c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047a0:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800047a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047aa:	30 19       	mov	r9,1
800047ac:	f2 08 09 48 	lsl	r8,r9,r8
800047b0:	10 99       	mov	r9,r8
800047b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047b6:	91 d9       	st.w	r8[0x34],r9
		break;
800047b8:	c2 58       	rjmp	80004802 <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800047ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047c2:	30 19       	mov	r9,1
800047c4:	f2 08 09 48 	lsl	r8,r9,r8
800047c8:	10 99       	mov	r9,r8
800047ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047ce:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800047d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047d8:	30 19       	mov	r9,1
800047da:	f2 08 09 48 	lsl	r8,r9,r8
800047de:	10 99       	mov	r9,r8
800047e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047e4:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800047e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047ee:	30 19       	mov	r9,1
800047f0:	f2 08 09 48 	lsl	r8,r9,r8
800047f4:	10 99       	mov	r9,r8
800047f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047fa:	91 d9       	st.w	r8[0x34],r9
		break;
800047fc:	c0 38       	rjmp	80004802 <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
800047fe:	30 18       	mov	r8,1
80004800:	c0 d8       	rjmp	8000481a <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80004802:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004806:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000480a:	30 19       	mov	r9,1
8000480c:	f2 08 09 48 	lsl	r8,r9,r8
80004810:	10 99       	mov	r9,r8
80004812:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004816:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80004818:	30 08       	mov	r8,0
}
8000481a:	10 9c       	mov	r12,r8
8000481c:	2f dd       	sub	sp,-12
8000481e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004822:	00 00       	add	r0,r0
80004824:	80 01       	ld.sh	r1,r0[0x0]
80004826:	1e 40       	or	r0,pc

80004828 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80004828:	eb cd 40 80 	pushm	r7,lr
8000482c:	1a 97       	mov	r7,sp
8000482e:	20 3d       	sub	sp,12
80004830:	ef 4c ff f8 	st.w	r7[-8],r12
80004834:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000483c:	a5 98       	lsr	r8,0x5
8000483e:	a9 78       	lsl	r8,0x9
80004840:	e0 28 e0 00 	sub	r8,57344
80004844:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
80004848:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000484c:	e2 18 00 08 	andl	r8,0x8,COH
80004850:	c0 e0       	breq	8000486c <gpio_configure_pin+0x44>
		gpio_port->pders = 1 << (pin & 0x1F);
80004852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004856:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000485a:	30 19       	mov	r9,1
8000485c:	f2 08 09 48 	lsl	r8,r9,r8
80004860:	10 99       	mov	r9,r8
80004862:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004866:	f1 49 00 84 	st.w	r8[132],r9
8000486a:	c0 d8       	rjmp	80004884 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
8000486c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004870:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004874:	30 19       	mov	r9,1
80004876:	f2 08 09 48 	lsl	r8,r9,r8
8000487a:	10 99       	mov	r9,r8
8000487c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004880:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
80004884:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004888:	e2 18 00 04 	andl	r8,0x4,COH
8000488c:	c0 e0       	breq	800048a8 <gpio_configure_pin+0x80>
		gpio_port->puers = 1 << (pin & 0x1F);
8000488e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004892:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004896:	30 19       	mov	r9,1
80004898:	f2 08 09 48 	lsl	r8,r9,r8
8000489c:	10 99       	mov	r9,r8
8000489e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048a2:	f1 49 00 74 	st.w	r8[116],r9
800048a6:	c0 d8       	rjmp	800048c0 <gpio_configure_pin+0x98>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800048a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048b0:	30 19       	mov	r9,1
800048b2:	f2 08 09 48 	lsl	r8,r9,r8
800048b6:	10 99       	mov	r9,r8
800048b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048bc:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
800048c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048c4:	e2 18 00 40 	andl	r8,0x40,COH
800048c8:	c0 e0       	breq	800048e4 <gpio_configure_pin+0xbc>
		gpio_port->odmers = 1 << (pin & 0x1F);
800048ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048d2:	30 19       	mov	r9,1
800048d4:	f2 08 09 48 	lsl	r8,r9,r8
800048d8:	10 99       	mov	r9,r8
800048da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048de:	f1 49 00 e4 	st.w	r8[228],r9
800048e2:	c0 d8       	rjmp	800048fc <gpio_configure_pin+0xd4>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
800048e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048ec:	30 19       	mov	r9,1
800048ee:	f2 08 09 48 	lsl	r8,r9,r8
800048f2:	10 99       	mov	r9,r8
800048f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048f8:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
800048fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004900:	e2 18 00 10 	andl	r8,0x10,COH
80004904:	c0 e0       	breq	80004920 <gpio_configure_pin+0xf8>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
80004906:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000490a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000490e:	30 19       	mov	r9,1
80004910:	f2 08 09 48 	lsl	r8,r9,r8
80004914:	10 99       	mov	r9,r8
80004916:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000491a:	f1 49 01 04 	st.w	r8[260],r9
8000491e:	c0 d8       	rjmp	80004938 <gpio_configure_pin+0x110>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
80004920:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004924:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004928:	30 19       	mov	r9,1
8000492a:	f2 08 09 48 	lsl	r8,r9,r8
8000492e:	10 99       	mov	r9,r8
80004930:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004934:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
80004938:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000493c:	e2 18 00 20 	andl	r8,0x20,COH
80004940:	c0 e0       	breq	8000495c <gpio_configure_pin+0x134>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
80004942:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004946:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000494a:	30 19       	mov	r9,1
8000494c:	f2 08 09 48 	lsl	r8,r9,r8
80004950:	10 99       	mov	r9,r8
80004952:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004956:	f1 49 01 14 	st.w	r8[276],r9
8000495a:	c0 d8       	rjmp	80004974 <gpio_configure_pin+0x14c>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
8000495c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004960:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004964:	30 19       	mov	r9,1
80004966:	f2 08 09 48 	lsl	r8,r9,r8
8000496a:	10 99       	mov	r9,r8
8000496c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004970:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80004974:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004978:	e2 18 00 80 	andl	r8,0x80,COH
8000497c:	c5 a0       	breq	80004a30 <gpio_configure_pin+0x208>
		if (flags & GPIO_BOTHEDGES) {
8000497e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004982:	e2 18 01 80 	andl	r8,0x180,COH
80004986:	c1 a0       	breq	800049ba <gpio_configure_pin+0x192>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000498c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004990:	30 19       	mov	r9,1
80004992:	f2 08 09 48 	lsl	r8,r9,r8
80004996:	10 99       	mov	r9,r8
80004998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000499c:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800049a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049a8:	30 19       	mov	r9,1
800049aa:	f2 08 09 48 	lsl	r8,r9,r8
800049ae:	10 99       	mov	r9,r8
800049b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049b4:	f1 49 00 b8 	st.w	r8[184],r9
800049b8:	c3 c8       	rjmp	80004a30 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_RISING) {
800049ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049be:	e2 18 02 80 	andl	r8,0x280,COH
800049c2:	c1 a0       	breq	800049f6 <gpio_configure_pin+0x1ce>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800049c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049cc:	30 19       	mov	r9,1
800049ce:	f2 08 09 48 	lsl	r8,r9,r8
800049d2:	10 99       	mov	r9,r8
800049d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049d8:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800049dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049e4:	30 19       	mov	r9,1
800049e6:	f2 08 09 48 	lsl	r8,r9,r8
800049ea:	10 99       	mov	r9,r8
800049ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049f0:	f1 49 00 b8 	st.w	r8[184],r9
800049f4:	c1 e8       	rjmp	80004a30 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_FALLING) {
800049f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049fa:	e2 18 03 80 	andl	r8,0x380,COH
800049fe:	c1 90       	breq	80004a30 <gpio_configure_pin+0x208>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004a00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a04:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a08:	30 19       	mov	r9,1
80004a0a:	f2 08 09 48 	lsl	r8,r9,r8
80004a0e:	10 99       	mov	r9,r8
80004a10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a14:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80004a18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a1c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a20:	30 19       	mov	r9,1
80004a22:	f2 08 09 48 	lsl	r8,r9,r8
80004a26:	10 99       	mov	r9,r8
80004a28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a2c:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80004a30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a34:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004a38:	5c 58       	castu.b	r8
80004a3a:	c2 c0       	breq	80004a92 <gpio_configure_pin+0x26a>
		if (flags & GPIO_INIT_HIGH) {
80004a3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a40:	e2 18 00 02 	andl	r8,0x2,COH
80004a44:	c0 e0       	breq	80004a60 <gpio_configure_pin+0x238>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80004a46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a4e:	30 19       	mov	r9,1
80004a50:	f2 08 09 48 	lsl	r8,r9,r8
80004a54:	10 99       	mov	r9,r8
80004a56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a5a:	f1 49 00 54 	st.w	r8[84],r9
80004a5e:	c0 d8       	rjmp	80004a78 <gpio_configure_pin+0x250>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80004a60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a64:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a68:	30 19       	mov	r9,1
80004a6a:	f2 08 09 48 	lsl	r8,r9,r8
80004a6e:	10 99       	mov	r9,r8
80004a70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a74:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80004a78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a7c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a80:	30 19       	mov	r9,1
80004a82:	f2 08 09 48 	lsl	r8,r9,r8
80004a86:	10 99       	mov	r9,r8
80004a88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a8c:	f1 49 00 44 	st.w	r8[68],r9
80004a90:	c0 d8       	rjmp	80004aaa <gpio_configure_pin+0x282>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80004a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a9a:	30 19       	mov	r9,1
80004a9c:	f2 08 09 48 	lsl	r8,r9,r8
80004aa0:	10 99       	mov	r9,r8
80004aa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004aa6:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004aaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004ab2:	30 19       	mov	r9,1
80004ab4:	f2 08 09 48 	lsl	r8,r9,r8
80004ab8:	10 99       	mov	r9,r8
80004aba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004abe:	91 19       	st.w	r8[0x4],r9
}
80004ac0:	2f dd       	sub	sp,-12
80004ac2:	e3 cd 80 80 	ldm	sp++,r7,pc

80004ac6 <gpio_get_pin_value>:
 * \param pin The pin number.
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
80004ac6:	eb cd 40 80 	pushm	r7,lr
80004aca:	1a 97       	mov	r7,sp
80004acc:	20 2d       	sub	sp,8
80004ace:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004ad2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ad6:	a5 98       	lsr	r8,0x5
80004ad8:	a9 78       	lsl	r8,0x9
80004ada:	e0 28 e0 00 	sub	r8,57344
80004ade:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80004ae2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ae6:	71 89       	ld.w	r9,r8[0x60]
80004ae8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004af0:	f2 08 0a 48 	lsr	r8,r9,r8
80004af4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004af8:	5c 58       	castu.b	r8
}
80004afa:	10 9c       	mov	r12,r8
80004afc:	2f ed       	sub	sp,-8
80004afe:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b02 <gpio_set_pin_high>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
80004b02:	eb cd 40 80 	pushm	r7,lr
80004b06:	1a 97       	mov	r7,sp
80004b08:	20 2d       	sub	sp,8
80004b0a:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b12:	a5 98       	lsr	r8,0x5
80004b14:	a9 78       	lsl	r8,0x9
80004b16:	e0 28 e0 00 	sub	r8,57344
80004b1a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80004b1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b22:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b26:	30 19       	mov	r9,1
80004b28:	f2 08 09 48 	lsl	r8,r9,r8
80004b2c:	10 99       	mov	r9,r8
80004b2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b32:	f1 49 00 54 	st.w	r8[84],r9
}
80004b36:	2f ed       	sub	sp,-8
80004b38:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b3c <gpio_set_pin_low>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
80004b3c:	eb cd 40 80 	pushm	r7,lr
80004b40:	1a 97       	mov	r7,sp
80004b42:	20 2d       	sub	sp,8
80004b44:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b4c:	a5 98       	lsr	r8,0x5
80004b4e:	a9 78       	lsl	r8,0x9
80004b50:	e0 28 e0 00 	sub	r8,57344
80004b54:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b5c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b60:	30 19       	mov	r9,1
80004b62:	f2 08 09 48 	lsl	r8,r9,r8
80004b66:	10 99       	mov	r9,r8
80004b68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b6c:	f1 49 00 58 	st.w	r8[88],r9
}
80004b70:	2f ed       	sub	sp,-8
80004b72:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b76 <gpio_toggle_pin>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
80004b76:	eb cd 40 80 	pushm	r7,lr
80004b7a:	1a 97       	mov	r7,sp
80004b7c:	20 2d       	sub	sp,8
80004b7e:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b86:	a5 98       	lsr	r8,0x5
80004b88:	a9 78       	lsl	r8,0x9
80004b8a:	e0 28 e0 00 	sub	r8,57344
80004b8e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80004b92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b9a:	30 19       	mov	r9,1
80004b9c:	f2 08 09 48 	lsl	r8,r9,r8
80004ba0:	10 99       	mov	r9,r8
80004ba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ba6:	f1 49 00 5c 	st.w	r8[92],r9
}
80004baa:	2f ed       	sub	sp,-8
80004bac:	e3 cd 80 80 	ldm	sp++,r7,pc

80004bb0 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80004bb0:	eb cd 40 80 	pushm	r7,lr
80004bb4:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80004bb6:	c0 08       	rjmp	80004bb6 <_unhandled_interrupt+0x6>

80004bb8 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80004bb8:	eb cd 40 80 	pushm	r7,lr
80004bbc:	1a 97       	mov	r7,sp
80004bbe:	20 3d       	sub	sp,12
80004bc0:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80004bc4:	fe 78 00 00 	mov	r8,-65536
80004bc8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004bcc:	f2 09 11 03 	rsub	r9,r9,3
80004bd0:	28 09       	sub	r9,-128
80004bd2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004bd6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80004bda:	fe 78 00 00 	mov	r8,-65536
80004bde:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004be2:	2c 09       	sub	r9,-64
80004be4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004be8:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004bec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bf0:	58 08       	cp.w	r8,0
80004bf2:	c1 30       	breq	80004c18 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004bf4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bf8:	48 b8       	lddpc	r8,80004c24 <_get_interrupt_handler+0x6c>
80004bfa:	a1 79       	lsl	r9,0x1
80004bfc:	2f f9       	sub	r9,-1
80004bfe:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c06:	f0 08 12 00 	clz	r8,r8
80004c0a:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80004c0e:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004c10:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004c14:	70 08       	ld.w	r8,r8[0x0]
80004c16:	c0 28       	rjmp	80004c1a <_get_interrupt_handler+0x62>
80004c18:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80004c1a:	10 9c       	mov	r12,r8
80004c1c:	2f dd       	sub	sp,-12
80004c1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c22:	00 00       	add	r0,r0
80004c24:	80 01       	ld.sh	r1,r0[0x0]
80004c26:	1e 60       	and	r0,pc

80004c28 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80004c28:	eb cd 40 80 	pushm	r7,lr
80004c2c:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004c2e:	48 38       	lddpc	r8,80004c38 <INTC_init_evba+0x10>
80004c30:	e3 b8 00 01 	mtsr	0x4,r8
}
80004c34:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c38:	80 01       	ld.sh	r1,r0[0x0]
80004c3a:	1c 00       	add	r0,lr

80004c3c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80004c3c:	eb cd 40 80 	pushm	r7,lr
80004c40:	1a 97       	mov	r7,sp
80004c42:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80004c44:	f0 1f 00 20 	mcall	80004cc4 <INTC_init_interrupts+0x88>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004c48:	30 08       	mov	r8,0
80004c4a:	ef 48 ff f8 	st.w	r7[-8],r8
80004c4e:	c3 18       	rjmp	80004cb0 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004c50:	30 08       	mov	r8,0
80004c52:	ef 48 ff fc 	st.w	r7[-4],r8
80004c56:	c1 48       	rjmp	80004c7e <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80004c58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c5c:	49 b8       	lddpc	r8,80004cc8 <INTC_init_interrupts+0x8c>
80004c5e:	a1 79       	lsl	r9,0x1
80004c60:	2f f9       	sub	r9,-1
80004c62:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004c66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c6a:	a3 68       	lsl	r8,0x2
80004c6c:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004c70:	49 79       	lddpc	r9,80004ccc <INTC_init_interrupts+0x90>
80004c72:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004c74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c78:	2f f8       	sub	r8,-1
80004c7a:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80004c7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c82:	49 28       	lddpc	r8,80004cc8 <INTC_init_interrupts+0x8c>
80004c84:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004c88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c8c:	10 39       	cp.w	r9,r8
80004c8e:	fe 9b ff e5 	brhi	80004c58 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004c92:	fe 78 00 00 	mov	r8,-65536
80004c96:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c9a:	48 eb       	lddpc	r11,80004cd0 <INTC_init_interrupts+0x94>
80004c9c:	48 ea       	lddpc	r10,80004cd4 <INTC_init_interrupts+0x98>
80004c9e:	f6 0a 01 0a 	sub	r10,r11,r10
80004ca2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004ca6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004caa:	2f f8       	sub	r8,-1
80004cac:	ef 48 ff f8 	st.w	r7[-8],r8
80004cb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004cb4:	e0 48 00 2e 	cp.w	r8,46
80004cb8:	fe 98 ff cc 	brls	80004c50 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80004cbc:	2f ed       	sub	sp,-8
80004cbe:	e3 cd 80 80 	ldm	sp++,r7,pc
80004cc2:	00 00       	add	r0,r0
80004cc4:	80 00       	ld.sh	r0,r0[0x0]
80004cc6:	4c 28       	lddpc	r8,80004dcc <cpu_irq_is_enabled_flags+0x2>
80004cc8:	80 01       	ld.sh	r1,r0[0x0]
80004cca:	1e 60       	and	r0,pc
80004ccc:	80 00       	ld.sh	r0,r0[0x0]
80004cce:	4b b0       	lddpc	r0,80004db8 <cpu_irq_save+0xc>
80004cd0:	80 01       	ld.sh	r1,r0[0x0]
80004cd2:	1d 04       	ld.w	r4,lr++
80004cd4:	80 01       	ld.sh	r1,r0[0x0]
80004cd6:	1c 00       	add	r0,lr

80004cd8 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80004cd8:	eb cd 40 80 	pushm	r7,lr
80004cdc:	1a 97       	mov	r7,sp
80004cde:	20 4d       	sub	sp,16
80004ce0:	ef 4c ff f8 	st.w	r7[-8],r12
80004ce4:	ef 4b ff f4 	st.w	r7[-12],r11
80004ce8:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80004cec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004cf0:	a5 98       	lsr	r8,0x5
80004cf2:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80004cf6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004cfa:	4a 78       	lddpc	r8,80004d94 <INTC_register_interrupt+0xbc>
80004cfc:	a1 79       	lsl	r9,0x1
80004cfe:	2f f9       	sub	r9,-1
80004d00:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004d04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004d08:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004d0c:	a3 68       	lsl	r8,0x2
80004d0e:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80004d12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004d16:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80004d18:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d1c:	58 08       	cp.w	r8,0
80004d1e:	c0 c1       	brne	80004d36 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004d20:	fe 78 00 00 	mov	r8,-65536
80004d24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d28:	49 cb       	lddpc	r11,80004d98 <INTC_register_interrupt+0xc0>
80004d2a:	49 da       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d2c:	f6 0a 01 0a 	sub	r10,r11,r10
80004d30:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004d34:	c2 d8       	rjmp	80004d8e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80004d36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d3a:	58 18       	cp.w	r8,1
80004d3c:	c0 d1       	brne	80004d56 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004d3e:	fe 78 00 00 	mov	r8,-65536
80004d42:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d46:	49 7b       	lddpc	r11,80004da0 <INTC_register_interrupt+0xc8>
80004d48:	49 5a       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d4a:	f6 0a 01 0a 	sub	r10,r11,r10
80004d4e:	bf aa       	sbr	r10,0x1e
80004d50:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004d54:	c1 d8       	rjmp	80004d8e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80004d56:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d5a:	58 28       	cp.w	r8,2
80004d5c:	c0 d1       	brne	80004d76 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80004d5e:	fe 78 00 00 	mov	r8,-65536
80004d62:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d66:	49 0b       	lddpc	r11,80004da4 <INTC_register_interrupt+0xcc>
80004d68:	48 da       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d6a:	f6 0a 01 0a 	sub	r10,r11,r10
80004d6e:	bf ba       	sbr	r10,0x1f
80004d70:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004d74:	c0 d8       	rjmp	80004d8e <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004d76:	fe 78 00 00 	mov	r8,-65536
80004d7a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d7e:	48 bb       	lddpc	r11,80004da8 <INTC_register_interrupt+0xd0>
80004d80:	48 7a       	lddpc	r10,80004d9c <INTC_register_interrupt+0xc4>
80004d82:	f6 0a 01 0a 	sub	r10,r11,r10
80004d86:	ea 1a c0 00 	orh	r10,0xc000
80004d8a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80004d8e:	2f cd       	sub	sp,-16
80004d90:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d94:	80 01       	ld.sh	r1,r0[0x0]
80004d96:	1e 60       	and	r0,pc
80004d98:	80 01       	ld.sh	r1,r0[0x0]
80004d9a:	1d 04       	ld.w	r4,lr++
80004d9c:	80 01       	ld.sh	r1,r0[0x0]
80004d9e:	1c 00       	add	r0,lr
80004da0:	80 01       	ld.sh	r1,r0[0x0]
80004da2:	1d 12       	ld.sh	r2,lr++
80004da4:	80 01       	ld.sh	r1,r0[0x0]
80004da6:	1d 20       	ld.uh	r0,lr++
80004da8:	80 01       	ld.sh	r1,r0[0x0]
80004daa:	1d 2e       	ld.uh	lr,lr++

80004dac <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80004dac:	eb cd 40 80 	pushm	r7,lr
80004db0:	1a 97       	mov	r7,sp
80004db2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004db4:	e1 b8 00 00 	mfsr	r8,0x0
80004db8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80004dbc:	d3 03       	ssrf	0x10

	return flags;
80004dbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80004dc2:	10 9c       	mov	r12,r8
80004dc4:	2f fd       	sub	sp,-4
80004dc6:	e3 cd 80 80 	ldm	sp++,r7,pc

80004dca <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004dca:	eb cd 40 80 	pushm	r7,lr
80004dce:	1a 97       	mov	r7,sp
80004dd0:	20 1d       	sub	sp,4
80004dd2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004dd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dda:	e6 18 00 01 	andh	r8,0x1,COH
80004dde:	5f 08       	sreq	r8
80004de0:	5c 58       	castu.b	r8
}
80004de2:	10 9c       	mov	r12,r8
80004de4:	2f fd       	sub	sp,-4
80004de6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004dea:	d7 03       	nop

80004dec <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80004dec:	eb cd 40 80 	pushm	r7,lr
80004df0:	1a 97       	mov	r7,sp
80004df2:	20 1d       	sub	sp,4
80004df4:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004df8:	ee fc ff fc 	ld.w	r12,r7[-4]
80004dfc:	f0 1f 00 05 	mcall	80004e10 <cpu_irq_restore+0x24>
80004e00:	18 98       	mov	r8,r12
80004e02:	58 08       	cp.w	r8,0
80004e04:	c0 20       	breq	80004e08 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80004e06:	d5 03       	csrf	0x10
   }

	barrier();
}
80004e08:	2f fd       	sub	sp,-4
80004e0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e0e:	00 00       	add	r0,r0
80004e10:	80 00       	ld.sh	r0,r0[0x0]
80004e12:	4d ca       	lddpc	r10,80004f80 <twim_set_speed+0x28>

80004e14 <twim_master_interrupt_handler>:
/**
 * \internal
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80004e14:	eb cd 40 80 	pushm	r7,lr
80004e18:	1a 97       	mov	r7,sp
80004e1a:	20 1d       	sub	sp,4
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80004e1c:	4c 68       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e1e:	70 08       	ld.w	r8,r8[0x0]
80004e20:	70 79       	ld.w	r9,r8[0x1c]
80004e22:	4c 68       	lddpc	r8,80004f38 <twim_master_interrupt_handler+0x124>
80004e24:	70 08       	ld.w	r8,r8[0x0]
80004e26:	f3 e8 00 08 	and	r8,r9,r8
80004e2a:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80004e2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e32:	e2 18 07 00 	andl	r8,0x700,COH
80004e36:	c1 e0       	breq	80004e72 <twim_master_interrupt_handler+0x5e>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80004e38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e3c:	e2 18 03 00 	andl	r8,0x300,COH
80004e40:	c0 30       	breq	80004e46 <twim_master_interrupt_handler+0x32>
80004e42:	3f c8       	mov	r8,-4
80004e44:	c0 28       	rjmp	80004e48 <twim_master_interrupt_handler+0x34>
80004e46:	3f e8       	mov	r8,-2
80004e48:	4b d9       	lddpc	r9,80004f3c <twim_master_interrupt_handler+0x128>
80004e4a:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80004e4c:	4b a8       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e4e:	70 09       	ld.w	r9,r8[0x0]
80004e50:	72 38       	ld.w	r8,r9[0xc]
80004e52:	30 0a       	mov	r10,0
80004e54:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80004e58:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80004e5a:	4b 78       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e5c:	70 08       	ld.w	r8,r8[0x0]
80004e5e:	3f f9       	mov	r9,-1
80004e60:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80004e62:	4b 58       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e64:	70 08       	ld.w	r8,r8[0x0]
80004e66:	3f f9       	mov	r9,-1
80004e68:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80004e6a:	4b 69       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004e6c:	30 08       	mov	r8,0
80004e6e:	b2 88       	st.b	r9[0x0],r8
80004e70:	c5 e8       	rjmp	80004f2c <twim_master_interrupt_handler+0x118>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80004e72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e76:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004e7a:	5c 58       	castu.b	r8
80004e7c:	c2 00       	breq	80004ebc <twim_master_interrupt_handler+0xa8>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80004e7e:	4b 28       	lddpc	r8,80004f44 <twim_master_interrupt_handler+0x130>
80004e80:	70 09       	ld.w	r9,r8[0x0]
80004e82:	4a d8       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004e84:	70 08       	ld.w	r8,r8[0x0]
80004e86:	70 58       	ld.w	r8,r8[0x14]
80004e88:	5c 58       	castu.b	r8
80004e8a:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80004e8c:	4a e8       	lddpc	r8,80004f44 <twim_master_interrupt_handler+0x130>
80004e8e:	70 08       	ld.w	r8,r8[0x0]
80004e90:	f0 c9 ff ff 	sub	r9,r8,-1
80004e94:	4a c8       	lddpc	r8,80004f44 <twim_master_interrupt_handler+0x130>
80004e96:	91 09       	st.w	r8[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80004e98:	4a c8       	lddpc	r8,80004f48 <twim_master_interrupt_handler+0x134>
80004e9a:	70 08       	ld.w	r8,r8[0x0]
80004e9c:	f0 c9 00 01 	sub	r9,r8,1
80004ea0:	4a a8       	lddpc	r8,80004f48 <twim_master_interrupt_handler+0x134>
80004ea2:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80004ea4:	4a 98       	lddpc	r8,80004f48 <twim_master_interrupt_handler+0x134>
80004ea6:	70 08       	ld.w	r8,r8[0x0]
80004ea8:	58 08       	cp.w	r8,0
80004eaa:	c4 11       	brne	80004f2c <twim_master_interrupt_handler+0x118>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80004eac:	4a 28       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004eae:	70 08       	ld.w	r8,r8[0x0]
80004eb0:	30 19       	mov	r9,1
80004eb2:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004eb4:	4a 39       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004eb6:	30 08       	mov	r8,0
80004eb8:	b2 88       	st.b	r9[0x0],r8
80004eba:	c3 98       	rjmp	80004f2c <twim_master_interrupt_handler+0x118>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80004ebc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ec0:	e2 18 00 02 	andl	r8,0x2,COH
80004ec4:	c3 40       	breq	80004f2c <twim_master_interrupt_handler+0x118>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80004ec6:	4a 28       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004ec8:	70 08       	ld.w	r8,r8[0x0]
80004eca:	58 08       	cp.w	r8,0
80004ecc:	c0 91       	brne	80004ede <twim_master_interrupt_handler+0xca>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80004ece:	49 a8       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004ed0:	70 08       	ld.w	r8,r8[0x0]
80004ed2:	30 29       	mov	r9,2
80004ed4:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004ed6:	49 b9       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004ed8:	30 08       	mov	r8,0
80004eda:	b2 88       	st.b	r9[0x0],r8
80004edc:	c2 88       	rjmp	80004f2c <twim_master_interrupt_handler+0x118>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80004ede:	49 68       	lddpc	r8,80004f34 <twim_master_interrupt_handler+0x120>
80004ee0:	70 0a       	ld.w	r10,r8[0x0]
80004ee2:	49 c8       	lddpc	r8,80004f50 <twim_master_interrupt_handler+0x13c>
80004ee4:	70 08       	ld.w	r8,r8[0x0]
80004ee6:	11 89       	ld.ub	r9,r8[0x0]
80004ee8:	5c 59       	castu.b	r9
80004eea:	95 69       	st.w	r10[0x18],r9
80004eec:	f0 c9 ff ff 	sub	r9,r8,-1
80004ef0:	49 88       	lddpc	r8,80004f50 <twim_master_interrupt_handler+0x13c>
80004ef2:	91 09       	st.w	r8[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80004ef4:	49 68       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004ef6:	70 08       	ld.w	r8,r8[0x0]
80004ef8:	f0 c9 00 01 	sub	r9,r8,1
80004efc:	49 48       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004efe:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80004f00:	49 38       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004f02:	70 08       	ld.w	r8,r8[0x0]
80004f04:	58 08       	cp.w	r8,0
80004f06:	c1 31       	brne	80004f2c <twim_master_interrupt_handler+0x118>
				// Check for next transfer
				if(twim_next) {
80004f08:	48 e8       	lddpc	r8,80004f40 <twim_master_interrupt_handler+0x12c>
80004f0a:	11 88       	ld.ub	r8,r8[0x0]
80004f0c:	5c 58       	castu.b	r8
80004f0e:	c0 f0       	breq	80004f2c <twim_master_interrupt_handler+0x118>
					twim_next = false;
80004f10:	48 c9       	lddpc	r9,80004f40 <twim_master_interrupt_handler+0x12c>
80004f12:	30 08       	mov	r8,0
80004f14:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80004f16:	49 08       	lddpc	r8,80004f54 <twim_master_interrupt_handler+0x140>
80004f18:	70 08       	ld.w	r8,r8[0x0]
80004f1a:	70 39       	ld.w	r9,r8[0xc]
80004f1c:	48 c8       	lddpc	r8,80004f4c <twim_master_interrupt_handler+0x138>
80004f1e:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80004f20:	48 d8       	lddpc	r8,80004f54 <twim_master_interrupt_handler+0x140>
80004f22:	70 08       	ld.w	r8,r8[0x0]
80004f24:	70 28       	ld.w	r8,r8[0x8]
80004f26:	10 99       	mov	r9,r8
80004f28:	48 a8       	lddpc	r8,80004f50 <twim_master_interrupt_handler+0x13c>
80004f2a:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80004f2c:	2f fd       	sub	sp,-4
80004f2e:	e3 cd 40 80 	ldm	sp++,r7,lr
80004f32:	d6 03       	rete
80004f34:	00 00       	add	r0,r0
80004f36:	07 90       	ld.ub	r0,r3[0x1]
80004f38:	00 00       	add	r0,r0
80004f3a:	07 a8       	ld.ub	r8,r3[0x2]
80004f3c:	00 00       	add	r0,r0
80004f3e:	07 9c       	ld.ub	r12,r3[0x1]
80004f40:	00 00       	add	r0,r0
80004f42:	07 b0       	ld.ub	r0,r3[0x3]
80004f44:	00 00       	add	r0,r0
80004f46:	07 98       	ld.ub	r8,r3[0x1]
80004f48:	00 00       	add	r0,r0
80004f4a:	07 a4       	ld.ub	r4,r3[0x2]
80004f4c:	00 00       	add	r0,r0
80004f4e:	07 a0       	ld.ub	r0,r3[0x2]
80004f50:	00 00       	add	r0,r0
80004f52:	07 94       	ld.ub	r4,r3[0x1]
80004f54:	00 00       	add	r0,r0
80004f56:	07 ac       	ld.ub	r12,r3[0x2]

80004f58 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80004f58:	eb cd 40 80 	pushm	r7,lr
80004f5c:	1a 97       	mov	r7,sp
80004f5e:	20 5d       	sub	sp,20
80004f60:	ef 4c ff f4 	st.w	r7[-12],r12
80004f64:	ef 4b ff f0 	st.w	r7[-16],r11
80004f68:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
80004f6c:	30 08       	mov	r8,0
80004f6e:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
80004f72:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004f76:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004f7a:	f0 09 0d 08 	divu	r8,r8,r9
80004f7e:	a1 98       	lsr	r8,0x1
80004f80:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004f84:	c0 b8       	rjmp	80004f9a <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
80004f86:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004f8a:	2f f8       	sub	r8,-1
80004f8c:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
80004f90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f94:	a1 98       	lsr	r8,0x1
80004f96:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004f9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f9e:	e0 48 00 ff 	cp.w	r8,255
80004fa2:	e0 88 00 09 	brls	80004fb4 <twim_set_speed+0x5c>
80004fa6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004faa:	30 78       	mov	r8,7
80004fac:	f0 09 18 00 	cp.b	r9,r8
80004fb0:	fe 98 ff eb 	brls	80004f86 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80004fb4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004fb8:	30 78       	mov	r8,7
80004fba:	f0 09 18 00 	cp.b	r9,r8
80004fbe:	e0 88 00 04 	brls	80004fc6 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
80004fc2:	3f 88       	mov	r8,-8
80004fc4:	c1 a8       	rjmp	80004ff8 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004fc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fca:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80004fce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fd2:	a1 98       	lsr	r8,0x1
80004fd4:	ee fa ff f8 	ld.w	r10,r7[-8]
80004fd8:	f4 08 01 08 	sub	r8,r10,r8
80004fdc:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
80004fde:	10 49       	or	r9,r8
80004fe0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004fe4:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
80004fe6:	10 49       	or	r9,r8
80004fe8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fec:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004fee:	10 49       	or	r9,r8
80004ff0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ff4:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
80004ff6:	30 08       	mov	r8,0
}
80004ff8:	10 9c       	mov	r12,r8
80004ffa:	2f bd       	sub	sp,-20
80004ffc:	e3 cd 80 80 	ldm	sp++,r7,pc

80005000 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80005000:	eb cd 40 80 	pushm	r7,lr
80005004:	1a 97       	mov	r7,sp
80005006:	20 4d       	sub	sp,16
80005008:	ef 4c ff f4 	st.w	r7[-12],r12
8000500c:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80005010:	e1 b8 00 00 	mfsr	r8,0x0
80005014:	10 9c       	mov	r12,r8
80005016:	f0 1f 00 37 	mcall	800050f0 <twim_master_init+0xf0>
8000501a:	18 98       	mov	r8,r12
8000501c:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80005020:	4b 58       	lddpc	r8,800050f4 <twim_master_init+0xf4>
80005022:	30 09       	mov	r9,0
80005024:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80005026:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000502a:	30 08       	mov	r8,0
8000502c:	f0 09 18 00 	cp.b	r9,r8
80005030:	c0 20       	breq	80005034 <twim_master_init+0x34>
		cpu_irq_disable ();
80005032:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80005034:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005038:	3f f9       	mov	r9,-1
8000503a:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000503c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005040:	30 19       	mov	r9,1
80005042:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005044:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005048:	e0 69 00 80 	mov	r9,128
8000504c:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
8000504e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80005052:	30 08       	mov	r8,0
80005054:	f0 09 18 00 	cp.b	r9,r8
80005058:	c0 20       	breq	8000505c <twim_master_init+0x5c>
		cpu_irq_enable ();
8000505a:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
8000505c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005060:	3f f9       	mov	r9,-1
80005062:	91 b9       	st.w	r8[0x2c],r9

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
80005064:	f0 1f 00 25 	mcall	800050f8 <twim_master_init+0xf8>
80005068:	18 98       	mov	r8,r12
8000506a:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
8000506e:	30 1a       	mov	r10,1
80005070:	e0 6b 03 20 	mov	r11,800
80005074:	4a 2c       	lddpc	r12,800050fc <twim_master_init+0xfc>
80005076:	f0 1f 00 23 	mcall	80005100 <twim_master_init+0x100>
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
8000507a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000507e:	f0 1f 00 22 	mcall	80005104 <twim_master_init+0x104>

	if (opt->smbus) {
80005082:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005086:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000508a:	58 08       	cp.w	r8,0
8000508c:	c0 90       	breq	8000509e <twim_master_init+0x9e>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000508e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005092:	31 09       	mov	r9,16
80005094:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
80005096:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000509a:	3f f9       	mov	r9,-1
8000509c:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
8000509e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050a2:	70 09       	ld.w	r9,r8[0x0]
800050a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050a8:	70 18       	ld.w	r8,r8[0x4]
800050aa:	12 9a       	mov	r10,r9
800050ac:	10 9b       	mov	r11,r8
800050ae:	ee fc ff f4 	ld.w	r12,r7[-12]
800050b2:	f0 1f 00 16 	mcall	80005108 <twim_master_init+0x108>
800050b6:	18 98       	mov	r8,r12
800050b8:	5b 88       	cp.w	r8,-8
800050ba:	c0 31       	brne	800050c0 <twim_master_init+0xc0>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
800050bc:	3f 88       	mov	r8,-8
800050be:	c1 48       	rjmp	800050e6 <twim_master_init+0xe6>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800050c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050c4:	70 28       	ld.w	r8,r8[0x8]
800050c6:	10 9b       	mov	r11,r8
800050c8:	ee fc ff f4 	ld.w	r12,r7[-12]
800050cc:	f0 1f 00 10 	mcall	8000510c <twim_master_init+0x10c>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800050d0:	48 98       	lddpc	r8,800050f4 <twim_master_init+0xf4>
800050d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800050d4:	5b c8       	cp.w	r8,-4
800050d6:	c0 50       	breq	800050e0 <twim_master_init+0xe0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800050d8:	48 78       	lddpc	r8,800050f4 <twim_master_init+0xf4>
800050da:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800050dc:	5b e8       	cp.w	r8,-2
800050de:	c0 31       	brne	800050e4 <twim_master_init+0xe4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
800050e0:	3f f8       	mov	r8,-1
800050e2:	c0 28       	rjmp	800050e6 <twim_master_init+0xe6>
	}
	return STATUS_OK;
800050e4:	30 08       	mov	r8,0
}
800050e6:	10 9c       	mov	r12,r8
800050e8:	2f cd       	sub	sp,-16
800050ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800050ee:	00 00       	add	r0,r0
800050f0:	80 00       	ld.sh	r0,r0[0x0]
800050f2:	4d ca       	lddpc	r10,80005260 <twim_read_packet+0xd4>
800050f4:	00 00       	add	r0,r0
800050f6:	07 9c       	ld.ub	r12,r3[0x1]
800050f8:	80 00       	ld.sh	r0,r0[0x0]
800050fa:	4d ac       	lddpc	r12,80005260 <twim_read_packet+0xd4>
800050fc:	80 00       	ld.sh	r0,r0[0x0]
800050fe:	4e 14       	lddpc	r4,80005280 <twim_read_packet+0xf4>
80005100:	80 00       	ld.sh	r0,r0[0x0]
80005102:	4c d8       	lddpc	r8,80005234 <twim_read_packet+0xa8>
80005104:	80 00       	ld.sh	r0,r0[0x0]
80005106:	4d ec       	lddpc	r12,8000527c <twim_read_packet+0xf0>
80005108:	80 00       	ld.sh	r0,r0[0x0]
8000510a:	4f 58       	lddpc	r8,800052dc <twim_read_packet+0x150>
8000510c:	80 00       	ld.sh	r0,r0[0x0]
8000510e:	51 54       	stdsp	sp[0x54],r4

80005110 <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
80005110:	eb cd 40 80 	pushm	r7,lr
80005114:	1a 97       	mov	r7,sp
80005116:	20 2d       	sub	sp,8
80005118:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000511c:	e1 b8 00 00 	mfsr	r8,0x0
80005120:	10 9c       	mov	r12,r8
80005122:	f0 1f 00 0c 	mcall	80005150 <twim_disable_interrupt+0x40>
80005126:	18 98       	mov	r8,r12
80005128:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
8000512c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005130:	30 08       	mov	r8,0
80005132:	f0 09 18 00 	cp.b	r9,r8
80005136:	c0 20       	breq	8000513a <twim_disable_interrupt+0x2a>
		cpu_irq_disable ();
80005138:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
8000513a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000513e:	3f f9       	mov	r9,-1
80005140:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
80005142:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005146:	3f f9       	mov	r9,-1
80005148:	91 b9       	st.w	r8[0x2c],r9
}
8000514a:	2f ed       	sub	sp,-8
8000514c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005150:	80 00       	ld.sh	r0,r0[0x0]
80005152:	4d ca       	lddpc	r10,800052c0 <twim_read_packet+0x134>

80005154 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80005154:	eb cd 40 80 	pushm	r7,lr
80005158:	1a 97       	mov	r7,sp
8000515a:	20 3d       	sub	sp,12
8000515c:	ef 4c ff f8 	st.w	r7[-8],r12
80005160:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
80005164:	30 08       	mov	r8,0
80005166:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000516a:	ee cb 00 04 	sub	r11,r7,4
8000516e:	30 08       	mov	r8,0
80005170:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005174:	30 0a       	mov	r10,0
80005176:	ee fc ff f8 	ld.w	r12,r7[-8]
8000517a:	f0 1f 00 04 	mcall	80005188 <twim_probe+0x34>
8000517e:	18 98       	mov	r8,r12
}
80005180:	10 9c       	mov	r12,r8
80005182:	2f dd       	sub	sp,-12
80005184:	e3 cd 80 80 	ldm	sp++,r7,pc
80005188:	80 00       	ld.sh	r0,r0[0x0]
8000518a:	54 44       	stdsp	sp[0x110],r4

8000518c <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8000518c:	eb cd 40 80 	pushm	r7,lr
80005190:	1a 97       	mov	r7,sp
80005192:	20 2d       	sub	sp,8
80005194:	ef 4c ff fc 	st.w	r7[-4],r12
80005198:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000519c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051a0:	30 29       	mov	r9,2
800051a2:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800051a4:	4c f8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800051aa:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800051ac:	4c d8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051ae:	70 08       	ld.w	r8,r8[0x0]
800051b0:	10 9c       	mov	r12,r8
800051b2:	f0 1f 00 4d 	mcall	800052e4 <twim_read_packet+0x158>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
800051b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051ba:	70 28       	ld.w	r8,r8[0x8]
800051bc:	10 99       	mov	r9,r8
800051be:	4c b8       	lddpc	r8,800052e8 <twim_read_packet+0x15c>
800051c0:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
800051c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051c6:	70 39       	ld.w	r9,r8[0xc]
800051c8:	4c 98       	lddpc	r8,800052ec <twim_read_packet+0x160>
800051ca:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
800051cc:	4c 99       	lddpc	r9,800052f0 <twim_read_packet+0x164>
800051ce:	30 08       	mov	r8,0
800051d0:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800051d2:	4c 98       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800051d4:	30 09       	mov	r9,0
800051d6:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
800051d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051dc:	11 f8       	ld.ub	r8,r8[0x7]
800051de:	58 08       	cp.w	r8,0
800051e0:	c3 f0       	breq	8000525e <twim_read_packet+0xd2>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800051e2:	4c 08       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051e4:	70 08       	ld.w	r8,r8[0x0]
800051e6:	30 19       	mov	r9,1
800051e8:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
800051ea:	4b e8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051ec:	70 08       	ld.w	r8,r8[0x0]
800051ee:	e0 69 00 80 	mov	r9,128
800051f2:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
800051f4:	4b b8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
800051f6:	70 08       	ld.w	r8,r8[0x0]
800051f8:	30 29       	mov	r9,2
800051fa:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
800051fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005200:	2f c8       	sub	r8,-4
80005202:	10 99       	mov	r9,r8
80005204:	4b d8       	lddpc	r8,800052f8 <twim_read_packet+0x16c>
80005206:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80005208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000520c:	11 f8       	ld.ub	r8,r8[0x7]
8000520e:	10 99       	mov	r9,r8
80005210:	4b b8       	lddpc	r8,800052fc <twim_read_packet+0x170>
80005212:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80005214:	4b b8       	lddpc	r8,80005300 <twim_read_packet+0x174>
80005216:	e0 69 07 03 	mov	r9,1795
8000521a:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000521c:	4b 18       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000521e:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005220:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005224:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005226:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8000522a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000522e:	13 f9       	ld.ub	r9,r9[0x7]
80005230:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005232:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005236:	e8 19 a0 00 	orl	r9,0xa000
8000523a:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000523c:	4a 98       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000523e:	70 08       	ld.w	r8,r8[0x0]
80005240:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005244:	72 09       	ld.w	r9,r9[0x0]
80005246:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000524a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000524e:	72 39       	ld.w	r9,r9[0xc]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005250:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005252:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80005256:	e8 19 e0 01 	orl	r9,0xe001
8000525a:	91 49       	st.w	r8[0x10],r9
8000525c:	c1 88       	rjmp	8000528c <twim_read_packet+0x100>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
8000525e:	4a 88       	lddpc	r8,800052fc <twim_read_packet+0x170>
80005260:	30 09       	mov	r9,0
80005262:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
80005264:	4a 78       	lddpc	r8,80005300 <twim_read_packet+0x174>
80005266:	e0 69 07 01 	mov	r9,1793
8000526a:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000526c:	49 d8       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000526e:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005270:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005274:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005276:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000527a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000527e:	72 39       	ld.w	r9,r9[0xc]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005280:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005282:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005286:	e8 19 e0 01 	orl	r9,0xe001
8000528a:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8000528c:	49 58       	lddpc	r8,800052e0 <twim_read_packet+0x154>
8000528e:	70 08       	ld.w	r8,r8[0x0]
80005290:	49 c9       	lddpc	r9,80005300 <twim_read_packet+0x174>
80005292:	72 09       	ld.w	r9,r9[0x0]
80005294:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005296:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000529a:	30 19       	mov	r9,1
8000529c:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8000529e:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800052a0:	c0 38       	rjmp	800052a6 <twim_read_packet+0x11a>
		cpu_relax();
800052a2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800052a6:	49 48       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800052a8:	70 08       	ld.w	r8,r8[0x0]
800052aa:	58 08       	cp.w	r8,0
800052ac:	c0 61       	brne	800052b8 <twim_read_packet+0x12c>
800052ae:	f0 1f 00 16 	mcall	80005304 <twim_read_packet+0x178>
800052b2:	18 98       	mov	r8,r12
800052b4:	58 08       	cp.w	r8,0
800052b6:	cf 60       	breq	800052a2 <twim_read_packet+0x116>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800052b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052bc:	30 29       	mov	r9,2
800052be:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800052c0:	48 d8       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800052c2:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
800052c4:	5b c8       	cp.w	r8,-4
800052c6:	c0 50       	breq	800052d0 <twim_read_packet+0x144>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800052c8:	48 b8       	lddpc	r8,800052f4 <twim_read_packet+0x168>
800052ca:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
800052cc:	5b e8       	cp.w	r8,-2
800052ce:	c0 31       	brne	800052d4 <twim_read_packet+0x148>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
800052d0:	3f f8       	mov	r8,-1
800052d2:	c0 28       	rjmp	800052d6 <twim_read_packet+0x14a>
	}
	return STATUS_OK;
800052d4:	30 08       	mov	r8,0
}
800052d6:	10 9c       	mov	r12,r8
800052d8:	2f ed       	sub	sp,-8
800052da:	e3 cd 80 80 	ldm	sp++,r7,pc
800052de:	00 00       	add	r0,r0
800052e0:	00 00       	add	r0,r0
800052e2:	07 90       	ld.ub	r0,r3[0x1]
800052e4:	80 00       	ld.sh	r0,r0[0x0]
800052e6:	51 10       	stdsp	sp[0x44],r0
800052e8:	00 00       	add	r0,r0
800052ea:	07 98       	ld.ub	r8,r3[0x1]
800052ec:	00 00       	add	r0,r0
800052ee:	07 a4       	ld.ub	r4,r3[0x2]
800052f0:	00 00       	add	r0,r0
800052f2:	07 b0       	ld.ub	r0,r3[0x3]
800052f4:	00 00       	add	r0,r0
800052f6:	07 9c       	ld.ub	r12,r3[0x1]
800052f8:	00 00       	add	r0,r0
800052fa:	07 94       	ld.ub	r4,r3[0x1]
800052fc:	00 00       	add	r0,r0
800052fe:	07 a0       	ld.ub	r0,r3[0x2]
80005300:	00 00       	add	r0,r0
80005302:	07 a8       	ld.ub	r8,r3[0x2]
80005304:	80 00       	ld.sh	r0,r0[0x0]
80005306:	55 48       	stdsp	sp[0x150],r8

80005308 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80005308:	eb cd 40 80 	pushm	r7,lr
8000530c:	1a 97       	mov	r7,sp
8000530e:	20 2d       	sub	sp,8
80005310:	ef 4c ff fc 	st.w	r7[-4],r12
80005314:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005318:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000531c:	30 19       	mov	r9,1
8000531e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005324:	e0 69 00 80 	mov	r9,128
80005328:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000532a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000532e:	30 29       	mov	r9,2
80005330:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80005332:	4b c8       	lddpc	r8,80005420 <twim_write_packet+0x118>
80005334:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005338:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000533a:	4b a8       	lddpc	r8,80005420 <twim_write_packet+0x118>
8000533c:	70 08       	ld.w	r8,r8[0x0]
8000533e:	10 9c       	mov	r12,r8
80005340:	f0 1f 00 39 	mcall	80005424 <twim_write_packet+0x11c>
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80005344:	4b 98       	lddpc	r8,80005428 <twim_write_packet+0x120>
80005346:	30 09       	mov	r9,0
80005348:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8000534a:	4b 98       	lddpc	r8,8000542c <twim_write_packet+0x124>
8000534c:	e0 69 07 02 	mov	r9,1794
80005350:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
80005352:	4b 89       	lddpc	r9,80005430 <twim_write_packet+0x128>
80005354:	30 08       	mov	r8,0
80005356:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
80005358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000535c:	11 f8       	ld.ub	r8,r8[0x7]
8000535e:	58 08       	cp.w	r8,0
80005360:	c1 50       	breq	8000538a <twim_write_packet+0x82>
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80005362:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005366:	2f c8       	sub	r8,-4
80005368:	10 99       	mov	r9,r8
8000536a:	4b 38       	lddpc	r8,80005434 <twim_write_packet+0x12c>
8000536c:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8000536e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005372:	11 f8       	ld.ub	r8,r8[0x7]
80005374:	10 99       	mov	r9,r8
80005376:	4b 18       	lddpc	r8,80005438 <twim_write_packet+0x130>
80005378:	91 09       	st.w	r8[0x0],r9
		// set next transfer to true
		twim_next = true;
8000537a:	4a e9       	lddpc	r9,80005430 <twim_write_packet+0x128>
8000537c:	30 18       	mov	r8,1
8000537e:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
80005380:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005384:	4a e8       	lddpc	r8,8000543c <twim_write_packet+0x134>
80005386:	91 09       	st.w	r8[0x0],r9
80005388:	c0 c8       	rjmp	800053a0 <twim_write_packet+0x98>
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
8000538a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000538e:	70 28       	ld.w	r8,r8[0x8]
80005390:	10 99       	mov	r9,r8
80005392:	4a 98       	lddpc	r8,80005434 <twim_write_packet+0x12c>
80005394:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
80005396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000539a:	70 39       	ld.w	r9,r8[0xc]
8000539c:	4a 78       	lddpc	r8,80005438 <twim_write_packet+0x130>
8000539e:	91 09       	st.w	r8[0x0],r9
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| ((package->length + package->addr_length)
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
800053a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053a4:	70 08       	ld.w	r8,r8[0x0]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800053a6:	f0 09 15 01 	lsl	r9,r8,0x1
			| ((package->length + package->addr_length)
800053aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053ae:	70 3a       	ld.w	r10,r8[0xc]
800053b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053b4:	11 f8       	ld.ub	r8,r8[0x7]
800053b6:	f4 08 00 08 	add	r8,r10,r8
800053ba:	b1 68       	lsl	r8,0x10
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
800053bc:	f3 e8 10 08 	or	r8,r9,r8
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800053c0:	10 99       	mov	r9,r8
800053c2:	e8 19 e0 00 	orl	r9,0xe000
800053c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053ca:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800053cc:	49 58       	lddpc	r8,80005420 <twim_write_packet+0x118>
800053ce:	70 08       	ld.w	r8,r8[0x0]
800053d0:	49 79       	lddpc	r9,8000542c <twim_write_packet+0x124>
800053d2:	72 09       	ld.w	r9,r9[0x0]
800053d4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800053d6:	49 38       	lddpc	r8,80005420 <twim_write_packet+0x118>
800053d8:	70 08       	ld.w	r8,r8[0x0]
800053da:	30 19       	mov	r9,1
800053dc:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800053de:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800053e0:	c0 38       	rjmp	800053e6 <twim_write_packet+0xde>
		cpu_relax();
800053e2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800053e6:	49 18       	lddpc	r8,80005428 <twim_write_packet+0x120>
800053e8:	70 08       	ld.w	r8,r8[0x0]
800053ea:	58 08       	cp.w	r8,0
800053ec:	c0 61       	brne	800053f8 <twim_write_packet+0xf0>
800053ee:	f0 1f 00 15 	mcall	80005440 <twim_write_packet+0x138>
800053f2:	18 98       	mov	r8,r12
800053f4:	58 08       	cp.w	r8,0
800053f6:	cf 60       	breq	800053e2 <twim_write_packet+0xda>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800053f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053fc:	30 29       	mov	r9,2
800053fe:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005400:	48 a8       	lddpc	r8,80005428 <twim_write_packet+0x120>
80005402:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80005404:	5b c8       	cp.w	r8,-4
80005406:	c0 50       	breq	80005410 <twim_write_packet+0x108>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005408:	48 88       	lddpc	r8,80005428 <twim_write_packet+0x120>
8000540a:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8000540c:	5b e8       	cp.w	r8,-2
8000540e:	c0 31       	brne	80005414 <twim_write_packet+0x10c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005410:	3f f8       	mov	r8,-1
80005412:	c0 28       	rjmp	80005416 <twim_write_packet+0x10e>
	}
	return STATUS_OK;
80005414:	30 08       	mov	r8,0
}
80005416:	10 9c       	mov	r12,r8
80005418:	2f ed       	sub	sp,-8
8000541a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000541e:	00 00       	add	r0,r0
80005420:	00 00       	add	r0,r0
80005422:	07 90       	ld.ub	r0,r3[0x1]
80005424:	80 00       	ld.sh	r0,r0[0x0]
80005426:	51 10       	stdsp	sp[0x44],r0
80005428:	00 00       	add	r0,r0
8000542a:	07 9c       	ld.ub	r12,r3[0x1]
8000542c:	00 00       	add	r0,r0
8000542e:	07 a8       	ld.ub	r8,r3[0x2]
80005430:	00 00       	add	r0,r0
80005432:	07 b0       	ld.ub	r0,r3[0x3]
80005434:	00 00       	add	r0,r0
80005436:	07 94       	ld.ub	r4,r3[0x1]
80005438:	00 00       	add	r0,r0
8000543a:	07 a0       	ld.ub	r0,r3[0x2]
8000543c:	00 00       	add	r0,r0
8000543e:	07 ac       	ld.ub	r12,r3[0x2]
80005440:	80 00       	ld.sh	r0,r0[0x0]
80005442:	55 48       	stdsp	sp[0x150],r8

80005444 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80005444:	eb cd 40 80 	pushm	r7,lr
80005448:	1a 97       	mov	r7,sp
8000544a:	20 5d       	sub	sp,20
8000544c:	ef 4c ff fc 	st.w	r7[-4],r12
80005450:	ef 4b ff f8 	st.w	r7[-8],r11
80005454:	ef 4a ff f4 	st.w	r7[-12],r10
80005458:	ef 49 ff f0 	st.w	r7[-16],r9
8000545c:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005460:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005464:	30 19       	mov	r9,1
80005466:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005468:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000546c:	e0 69 00 80 	mov	r9,128
80005470:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005472:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005476:	30 29       	mov	r9,2
80005478:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000547a:	4a c8       	lddpc	r8,80005528 <twim_write+0xe4>
8000547c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005480:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80005482:	4a a8       	lddpc	r8,80005528 <twim_write+0xe4>
80005484:	70 08       	ld.w	r8,r8[0x0]
80005486:	10 9c       	mov	r12,r8
80005488:	f0 1f 00 29 	mcall	8000552c <twim_write+0xe8>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000548c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005490:	4a 88       	lddpc	r8,80005530 <twim_write+0xec>
80005492:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80005494:	4a 88       	lddpc	r8,80005534 <twim_write+0xf0>
80005496:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000549a:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8000549c:	4a 79       	lddpc	r9,80005538 <twim_write+0xf4>
8000549e:	30 08       	mov	r8,0
800054a0:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800054a2:	4a 78       	lddpc	r8,8000553c <twim_write+0xf8>
800054a4:	30 09       	mov	r9,0
800054a6:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800054a8:	4a 08       	lddpc	r8,80005528 <twim_write+0xe4>
800054aa:	70 08       	ld.w	r8,r8[0x0]
800054ac:	ee f9 ff f0 	ld.w	r9,r7[-16]
800054b0:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800054b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800054b8:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
800054ba:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
800054bc:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800054c0:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800054c2:	f5 e9 10 09 	or	r9,r10,r9
800054c6:	e8 19 e0 00 	orl	r9,0xe000
800054ca:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800054cc:	49 d8       	lddpc	r8,80005540 <twim_write+0xfc>
800054ce:	e0 69 03 02 	mov	r9,770
800054d2:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800054d4:	49 58       	lddpc	r8,80005528 <twim_write+0xe4>
800054d6:	70 08       	ld.w	r8,r8[0x0]
800054d8:	49 a9       	lddpc	r9,80005540 <twim_write+0xfc>
800054da:	72 09       	ld.w	r9,r9[0x0]
800054dc:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800054de:	49 38       	lddpc	r8,80005528 <twim_write+0xe4>
800054e0:	70 08       	ld.w	r8,r8[0x0]
800054e2:	30 19       	mov	r9,1
800054e4:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800054e6:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800054e8:	c0 38       	rjmp	800054ee <twim_write+0xaa>
		cpu_relax();
800054ea:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800054ee:	49 48       	lddpc	r8,8000553c <twim_write+0xf8>
800054f0:	70 08       	ld.w	r8,r8[0x0]
800054f2:	58 08       	cp.w	r8,0
800054f4:	c0 61       	brne	80005500 <twim_write+0xbc>
800054f6:	f0 1f 00 14 	mcall	80005544 <twim_write+0x100>
800054fa:	18 98       	mov	r8,r12
800054fc:	58 08       	cp.w	r8,0
800054fe:	cf 60       	breq	800054ea <twim_write+0xa6>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005500:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005504:	30 29       	mov	r9,2
80005506:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005508:	48 d8       	lddpc	r8,8000553c <twim_write+0xf8>
8000550a:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8000550c:	5b c8       	cp.w	r8,-4
8000550e:	c0 50       	breq	80005518 <twim_write+0xd4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005510:	48 b8       	lddpc	r8,8000553c <twim_write+0xf8>
80005512:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80005514:	5b e8       	cp.w	r8,-2
80005516:	c0 31       	brne	8000551c <twim_write+0xd8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005518:	3f f8       	mov	r8,-1
8000551a:	c0 28       	rjmp	8000551e <twim_write+0xda>
	}
	return STATUS_OK;
8000551c:	30 08       	mov	r8,0
}
8000551e:	10 9c       	mov	r12,r8
80005520:	2f bd       	sub	sp,-20
80005522:	e3 cd 80 80 	ldm	sp++,r7,pc
80005526:	00 00       	add	r0,r0
80005528:	00 00       	add	r0,r0
8000552a:	07 90       	ld.ub	r0,r3[0x1]
8000552c:	80 00       	ld.sh	r0,r0[0x0]
8000552e:	51 10       	stdsp	sp[0x44],r0
80005530:	00 00       	add	r0,r0
80005532:	07 94       	ld.ub	r4,r3[0x1]
80005534:	00 00       	add	r0,r0
80005536:	07 a0       	ld.ub	r0,r3[0x2]
80005538:	00 00       	add	r0,r0
8000553a:	07 b0       	ld.ub	r0,r3[0x3]
8000553c:	00 00       	add	r0,r0
8000553e:	07 9c       	ld.ub	r12,r3[0x1]
80005540:	00 00       	add	r0,r0
80005542:	07 a8       	ld.ub	r8,r3[0x2]
80005544:	80 00       	ld.sh	r0,r0[0x0]
80005546:	55 48       	stdsp	sp[0x150],r8

80005548 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
80005548:	eb cd 40 80 	pushm	r7,lr
8000554c:	1a 97       	mov	r7,sp
8000554e:	20 1d       	sub	sp,4
	uint32_t status = twim_inst->sr;
80005550:	48 98       	lddpc	r8,80005574 <twim_status+0x2c>
80005552:	70 08       	ld.w	r8,r8[0x0]
80005554:	70 78       	ld.w	r8,r8[0x1c]
80005556:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
8000555a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000555e:	e2 18 00 10 	andl	r8,0x10,COH
80005562:	c0 30       	breq	80005568 <twim_status+0x20>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif
		) {
		return 1;
80005564:	30 18       	mov	r8,1
80005566:	c0 28       	rjmp	8000556a <twim_status+0x22>
	} else {
		return 0;
80005568:	30 08       	mov	r8,0
	}
}
8000556a:	10 9c       	mov	r12,r8
8000556c:	2f fd       	sub	sp,-4
8000556e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005572:	00 00       	add	r0,r0
80005574:	00 00       	add	r0,r0
80005576:	07 90       	ld.ub	r0,r3[0x1]

80005578 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005578:	eb cd 40 80 	pushm	r7,lr
8000557c:	1a 97       	mov	r7,sp
8000557e:	20 1d       	sub	sp,4
80005580:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005584:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005588:	e6 18 00 01 	andh	r8,0x1,COH
8000558c:	5f 08       	sreq	r8
8000558e:	5c 58       	castu.b	r8
}
80005590:	10 9c       	mov	r12,r8
80005592:	2f fd       	sub	sp,-4
80005594:	e3 cd 80 80 	ldm	sp++,r7,pc

80005598 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80005598:	eb cd 40 80 	pushm	r7,lr
8000559c:	1a 97       	mov	r7,sp
8000559e:	20 7d       	sub	sp,28
800055a0:	ef 4c ff ec 	st.w	r7[-20],r12
800055a4:	ef 4b ff e8 	st.w	r7[-24],r11
800055a8:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
800055ac:	ee f8 ff e8 	ld.w	r8,r7[-24]
800055b0:	f0 09 15 04 	lsl	r9,r8,0x4
800055b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800055b8:	10 39       	cp.w	r9,r8
800055ba:	e0 8b 00 04 	brhi	800055c2 <usart_set_async_baudrate+0x2a>
800055be:	31 08       	mov	r8,16
800055c0:	c0 28       	rjmp	800055c4 <usart_set_async_baudrate+0x2c>
800055c2:	30 88       	mov	r8,8
800055c4:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
800055c8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800055cc:	f0 09 15 03 	lsl	r9,r8,0x3
800055d0:	ee fa ff f0 	ld.w	r10,r7[-16]
800055d4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800055d8:	f4 08 02 48 	mul	r8,r10,r8
800055dc:	a1 98       	lsr	r8,0x1
800055de:	f2 08 00 08 	add	r8,r9,r8
800055e2:	ee fa ff f0 	ld.w	r10,r7[-16]
800055e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800055ea:	f4 09 02 49 	mul	r9,r10,r9
800055ee:	f0 09 0d 08 	divu	r8,r8,r9
800055f2:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800055f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800055fa:	a3 98       	lsr	r8,0x3
800055fc:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80005600:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005604:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80005608:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000560c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005610:	58 08       	cp.w	r8,0
80005612:	c0 70       	breq	80005620 <usart_set_async_baudrate+0x88>
80005614:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005618:	e0 48 ff ff 	cp.w	r8,65535
8000561c:	e0 88 00 04 	brls	80005624 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80005620:	30 18       	mov	r8,1
80005622:	c2 08       	rjmp	80005662 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80005624:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005628:	70 18       	ld.w	r8,r8[0x4]
8000562a:	10 99       	mov	r9,r8
8000562c:	e4 19 ff f7 	andh	r9,0xfff7
80005630:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80005634:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005638:	59 08       	cp.w	r8,16
8000563a:	c0 40       	breq	80005642 <usart_set_async_baudrate+0xaa>
8000563c:	e8 68 00 00 	mov	r8,524288
80005640:	c0 28       	rjmp	80005644 <usart_set_async_baudrate+0xac>
80005642:	30 08       	mov	r8,0
80005644:	10 49       	or	r9,r8
80005646:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000564a:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
8000564c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005650:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80005654:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005658:	10 49       	or	r9,r8
8000565a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000565e:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80005660:	30 08       	mov	r8,0
}
80005662:	10 9c       	mov	r12,r8
80005664:	2f 9d       	sub	sp,-28
80005666:	e3 cd 80 80 	ldm	sp++,r7,pc
8000566a:	d7 03       	nop

8000566c <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
8000566c:	eb cd 40 80 	pushm	r7,lr
80005670:	1a 97       	mov	r7,sp
80005672:	20 2d       	sub	sp,8
80005674:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80005678:	e1 b8 00 00 	mfsr	r8,0x0
8000567c:	10 9c       	mov	r12,r8
8000567e:	f0 1f 00 18 	mcall	800056dc <usart_reset+0x70>
80005682:	18 98       	mov	r8,r12
80005684:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80005688:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000568c:	30 08       	mov	r8,0
8000568e:	f0 09 18 00 	cp.b	r9,r8
80005692:	c0 20       	breq	80005696 <usart_reset+0x2a>
80005694:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80005696:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000569a:	3f f9       	mov	r9,-1
8000569c:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8000569e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056a2:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800056a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800056a8:	30 08       	mov	r8,0
800056aa:	f0 09 18 00 	cp.b	r9,r8
800056ae:	c0 20       	breq	800056b2 <usart_reset+0x46>
800056b0:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800056b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056b6:	30 09       	mov	r9,0
800056b8:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
800056ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056be:	30 09       	mov	r9,0
800056c0:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
800056c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056c6:	30 09       	mov	r9,0
800056c8:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800056ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056ce:	ea 69 61 0c 	mov	r9,680204
800056d2:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
800056d4:	2f ed       	sub	sp,-8
800056d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800056da:	00 00       	add	r0,r0
800056dc:	80 00       	ld.sh	r0,r0[0x0]
800056de:	55 78       	stdsp	sp[0x15c],r8

800056e0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800056e0:	eb cd 40 80 	pushm	r7,lr
800056e4:	1a 97       	mov	r7,sp
800056e6:	20 3d       	sub	sp,12
800056e8:	ef 4c ff fc 	st.w	r7[-4],r12
800056ec:	ef 4b ff f8 	st.w	r7[-8],r11
800056f0:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800056f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800056f8:	f0 1f 00 54 	mcall	80005848 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
800056fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005700:	58 08       	cp.w	r8,0
80005702:	c3 90       	breq	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80005704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005708:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000570a:	30 48       	mov	r8,4
8000570c:	f0 09 18 00 	cp.b	r9,r8
80005710:	e0 88 00 32 	brls	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80005714:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005718:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000571a:	30 98       	mov	r8,9
8000571c:	f0 09 18 00 	cp.b	r9,r8
80005720:	e0 8b 00 2a 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80005724:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005728:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000572a:	30 78       	mov	r8,7
8000572c:	f0 09 18 00 	cp.b	r9,r8
80005730:	e0 8b 00 22 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80005734:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005738:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000573a:	e0 68 01 01 	mov	r8,257
8000573e:	f0 09 19 00 	cp.h	r9,r8
80005742:	e0 8b 00 19 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80005746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000574a:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000574e:	30 38       	mov	r8,3
80005750:	f0 09 18 00 	cp.b	r9,r8
80005754:	e0 8b 00 10 	brhi	80005774 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80005758:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000575c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005760:	70 08       	ld.w	r8,r8[0x0]
80005762:	12 9a       	mov	r10,r9
80005764:	10 9b       	mov	r11,r8
80005766:	ee fc ff fc 	ld.w	r12,r7[-4]
8000576a:	f0 1f 00 39 	mcall	8000584c <usart_init_rs232+0x16c>
8000576e:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80005770:	58 18       	cp.w	r8,1
80005772:	c0 31       	brne	80005778 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80005774:	30 18       	mov	r8,1
80005776:	c6 48       	rjmp	8000583e <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80005778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000577c:	11 c9       	ld.ub	r9,r8[0x4]
8000577e:	30 98       	mov	r8,9
80005780:	f0 09 18 00 	cp.b	r9,r8
80005784:	c0 a1       	brne	80005798 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80005786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000578a:	70 18       	ld.w	r8,r8[0x4]
8000578c:	10 99       	mov	r9,r8
8000578e:	b1 b9       	sbr	r9,0x11
80005790:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005794:	91 19       	st.w	r8[0x4],r9
80005796:	c0 d8       	rjmp	800057b0 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80005798:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000579c:	70 19       	ld.w	r9,r8[0x4]
8000579e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057a2:	11 c8       	ld.ub	r8,r8[0x4]
800057a4:	20 58       	sub	r8,5
800057a6:	a7 68       	lsl	r8,0x6
800057a8:	10 49       	or	r9,r8
800057aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057ae:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800057b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057b4:	70 19       	ld.w	r9,r8[0x4]
800057b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057ba:	11 d8       	ld.ub	r8,r8[0x5]
800057bc:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
800057c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057c4:	f1 38 00 08 	ld.ub	r8,r8[8]
800057c8:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800057ca:	f5 e8 10 08 	or	r8,r10,r8
800057ce:	10 49       	or	r9,r8
800057d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057d4:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800057d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057da:	90 39       	ld.sh	r9,r8[0x6]
800057dc:	30 28       	mov	r8,2
800057de:	f0 09 19 00 	cp.h	r9,r8
800057e2:	e0 88 00 14 	brls	8000580a <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800057e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057ea:	70 18       	ld.w	r8,r8[0x4]
800057ec:	10 99       	mov	r9,r8
800057ee:	ad b9       	sbr	r9,0xd
800057f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057f4:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800057f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057fa:	90 38       	ld.sh	r8,r8[0x6]
800057fc:	5c 78       	castu.h	r8
800057fe:	20 28       	sub	r8,2
80005800:	10 99       	mov	r9,r8
80005802:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005806:	91 a9       	st.w	r8[0x28],r9
80005808:	c0 d8       	rjmp	80005822 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8000580a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000580e:	70 19       	ld.w	r9,r8[0x4]
80005810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005814:	90 38       	ld.sh	r8,r8[0x6]
80005816:	5c 78       	castu.h	r8
80005818:	ad 68       	lsl	r8,0xc
8000581a:	10 49       	or	r9,r8
8000581c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005820:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80005822:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005826:	70 18       	ld.w	r8,r8[0x4]
80005828:	10 99       	mov	r9,r8
8000582a:	e0 19 ff f0 	andl	r9,0xfff0
8000582e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005832:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80005834:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005838:	35 09       	mov	r9,80
8000583a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8000583c:	30 08       	mov	r8,0
}
8000583e:	10 9c       	mov	r12,r8
80005840:	2f dd       	sub	sp,-12
80005842:	e3 cd 80 80 	ldm	sp++,r7,pc
80005846:	00 00       	add	r0,r0
80005848:	80 00       	ld.sh	r0,r0[0x0]
8000584a:	56 6c       	stdsp	sp[0x198],r12
8000584c:	80 00       	ld.sh	r0,r0[0x0]
8000584e:	55 98       	stdsp	sp[0x164],r8

80005850 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80005850:	eb cd 40 80 	pushm	r7,lr
80005854:	1a 97       	mov	r7,sp
80005856:	20 3d       	sub	sp,12
80005858:	ef 4c ff f8 	st.w	r7[-8],r12
8000585c:	ef 4b ff f4 	st.w	r7[-12],r11
80005860:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005864:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80005868:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000586c:	70 58       	ld.w	r8,r8[0x14]
8000586e:	e2 18 00 02 	andl	r8,0x2,COH
80005872:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80005874:	58 08       	cp.w	r8,0
80005876:	c0 a0       	breq	8000588a <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80005878:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000587c:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80005880:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005884:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80005886:	30 08       	mov	r8,0
80005888:	c0 28       	rjmp	8000588c <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
8000588a:	30 28       	mov	r8,2
}
8000588c:	10 9c       	mov	r12,r8
8000588e:	2f dd       	sub	sp,-12
80005890:	e3 cd 80 80 	ldm	sp++,r7,pc

80005894 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80005894:	eb cd 40 80 	pushm	r7,lr
80005898:	1a 97       	mov	r7,sp
8000589a:	20 3d       	sub	sp,12
8000589c:	ef 4c ff f8 	st.w	r7[-8],r12
800058a0:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
800058a4:	e0 68 27 10 	mov	r8,10000
800058a8:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
800058ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058b0:	58 08       	cp.w	r8,0
800058b2:	5f 08       	sreq	r8
800058b4:	5c 58       	castu.b	r8
800058b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800058ba:	20 19       	sub	r9,1
800058bc:	ef 49 ff fc 	st.w	r7[-4],r9
800058c0:	58 08       	cp.w	r8,0
800058c2:	c0 30       	breq	800058c8 <usart_putchar+0x34>
800058c4:	3f f8       	mov	r8,-1
800058c6:	c0 b8       	rjmp	800058dc <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
800058c8:	ee fb ff f4 	ld.w	r11,r7[-12]
800058cc:	ee fc ff f8 	ld.w	r12,r7[-8]
800058d0:	f0 1f 00 05 	mcall	800058e4 <usart_putchar+0x50>
800058d4:	18 98       	mov	r8,r12
800058d6:	58 08       	cp.w	r8,0
800058d8:	ce a1       	brne	800058ac <usart_putchar+0x18>

  return USART_SUCCESS;
800058da:	30 08       	mov	r8,0
}
800058dc:	10 9c       	mov	r12,r8
800058de:	2f dd       	sub	sp,-12
800058e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800058e4:	80 00       	ld.sh	r0,r0[0x0]
800058e6:	58 50       	cp.w	r0,5

800058e8 <usart_read_char>:


int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
800058e8:	eb cd 40 80 	pushm	r7,lr
800058ec:	1a 97       	mov	r7,sp
800058ee:	20 3d       	sub	sp,12
800058f0:	ef 4c ff f8 	st.w	r7[-8],r12
800058f4:	ef 4b ff f4 	st.w	r7[-12],r11
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
800058f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058fc:	70 58       	ld.w	r8,r8[0x14]
800058fe:	e2 18 00 e0 	andl	r8,0xe0,COH
80005902:	c0 30       	breq	80005908 <usart_read_char+0x20>
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;
80005904:	30 48       	mov	r8,4
80005906:	c1 68       	rjmp	80005932 <usart_read_char+0x4a>
80005908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000590c:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80005910:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005914:	70 58       	ld.w	r8,r8[0x14]
80005916:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
8000591a:	c0 b0       	breq	80005930 <usart_read_char+0x48>
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
8000591c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005920:	70 68       	ld.w	r8,r8[0x18]
80005922:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80005926:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000592a:	91 09       	st.w	r8[0x0],r9
    return USART_SUCCESS;
8000592c:	30 08       	mov	r8,0
8000592e:	c0 28       	rjmp	80005932 <usart_read_char+0x4a>
  }
  else
    return USART_RX_EMPTY;
80005930:	30 38       	mov	r8,3
}
80005932:	10 9c       	mov	r12,r8
80005934:	2f dd       	sub	sp,-12
80005936:	e3 cd 80 80 	ldm	sp++,r7,pc
8000593a:	d7 03       	nop

8000593c <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
8000593c:	eb cd 40 80 	pushm	r7,lr
80005940:	1a 97       	mov	r7,sp
80005942:	20 2d       	sub	sp,8
80005944:	ef 4c ff fc 	st.w	r7[-4],r12
80005948:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
8000594c:	c0 e8       	rjmp	80005968 <usart_write_line+0x2c>
    usart_putchar(usart, *string++);
8000594e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005952:	11 88       	ld.ub	r8,r8[0x0]
80005954:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005958:	2f f9       	sub	r9,-1
8000595a:	ef 49 ff f8 	st.w	r7[-8],r9
8000595e:	10 9b       	mov	r11,r8
80005960:	ee fc ff fc 	ld.w	r12,r7[-4]
80005964:	f0 1f 00 05 	mcall	80005978 <usart_write_line+0x3c>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80005968:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000596c:	11 88       	ld.ub	r8,r8[0x0]
8000596e:	58 08       	cp.w	r8,0
80005970:	ce f1       	brne	8000594e <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
80005972:	2f ed       	sub	sp,-8
80005974:	e3 cd 80 80 	ldm	sp++,r7,pc
80005978:	80 00       	ld.sh	r0,r0[0x0]
8000597a:	58 94       	cp.w	r4,9

8000597c <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000597c:	48 cd       	lddpc	sp,800059ac <udata_clear_loop_end+0x2>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
8000597e:	48 d0       	lddpc	r0,800059b0 <udata_clear_loop_end+0x6>
  mtsr    AVR32_EVBA, r0
80005980:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80005984:	d5 53       	csrf	0x15

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
80005986:	48 c0       	lddpc	r0,800059b4 <udata_clear_loop_end+0xa>
  lda.w   r1, _edata
80005988:	48 c1       	lddpc	r1,800059b8 <udata_clear_loop_end+0xe>
  cp      r0, r1
8000598a:	02 30       	cp.w	r0,r1
  brhs    idata_load_loop_end
8000598c:	c0 62       	brcc	80005998 <idata_load_loop_end>
  lda.w   r2, _data_lma
8000598e:	48 c2       	lddpc	r2,800059bc <udata_clear_loop_end+0x12>

80005990 <idata_load_loop>:
idata_load_loop:
  ld.d    r4, r2++
80005990:	a5 05       	ld.d	r4,r2++
  st.d    r0++, r4
80005992:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80005994:	02 30       	cp.w	r0,r1
  brlo    idata_load_loop
80005996:	cf d3       	brcs	80005990 <idata_load_loop>

80005998 <idata_load_loop_end>:
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80005998:	48 a0       	lddpc	r0,800059c0 <udata_clear_loop_end+0x16>
  lda.w   r1, _end
8000599a:	48 b1       	lddpc	r1,800059c4 <udata_clear_loop_end+0x1a>
  cp      r0, r1
8000599c:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000599e:	c0 62       	brcc	800059aa <udata_clear_loop_end>
  mov     r2, 0
800059a0:	30 02       	mov	r2,0
  mov     r3, 0
800059a2:	30 03       	mov	r3,0

800059a4 <udata_clear_loop>:
udata_clear_loop:
  st.d    r0++, r2
800059a4:	a1 22       	st.d	r0++,r2
  cp      r0, r1
800059a6:	02 30       	cp.w	r0,r1
  brlo    udata_clear_loop
800059a8:	cf e3       	brcs	800059a4 <udata_clear_loop>

800059aa <udata_clear_loop_end>:
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800059aa:	48 8f       	lddpc	pc,800059c8 <udata_clear_loop_end+0x1e>
800059ac:	00 01       	add	r1,r0
800059ae:	00 00       	add	r0,r0
800059b0:	80 01       	ld.sh	r1,r0[0x0]
800059b2:	1c 00       	add	r0,lr
800059b4:	00 00       	add	r0,r0
800059b6:	00 08       	add	r8,r0
800059b8:	00 00       	add	r0,r0
800059ba:	05 c0       	ld.ub	r0,r2[0x4]
800059bc:	80 01       	ld.sh	r1,r0[0x0]
800059be:	26 e0       	sub	r0,110
800059c0:	00 00       	add	r0,r0
800059c2:	05 c0       	ld.ub	r0,r2[0x4]
800059c4:	00 00       	add	r0,r0
800059c6:	0d 78       	ld.ub	r8,--r6
800059c8:	80 00       	ld.sh	r0,r0[0x0]
800059ca:	aa 3c       	st.h	r5[0x6],r12

800059cc <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
800059cc:	eb cd 40 80 	pushm	r7,lr
800059d0:	1a 97       	mov	r7,sp
800059d2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800059d4:	e1 b8 00 00 	mfsr	r8,0x0
800059d8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800059dc:	d3 03       	ssrf	0x10

	return flags;
800059de:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800059e2:	10 9c       	mov	r12,r8
800059e4:	2f fd       	sub	sp,-4
800059e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800059ea <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800059ea:	eb cd 40 80 	pushm	r7,lr
800059ee:	1a 97       	mov	r7,sp
800059f0:	20 1d       	sub	sp,4
800059f2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800059f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059fa:	e6 18 00 01 	andh	r8,0x1,COH
800059fe:	5f 08       	sreq	r8
80005a00:	5c 58       	castu.b	r8
}
80005a02:	10 9c       	mov	r12,r8
80005a04:	2f fd       	sub	sp,-4
80005a06:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a0a:	d7 03       	nop

80005a0c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005a0c:	eb cd 40 80 	pushm	r7,lr
80005a10:	1a 97       	mov	r7,sp
80005a12:	20 1d       	sub	sp,4
80005a14:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005a18:	ee fc ff fc 	ld.w	r12,r7[-4]
80005a1c:	f0 1f 00 05 	mcall	80005a30 <cpu_irq_restore+0x24>
80005a20:	18 98       	mov	r8,r12
80005a22:	58 08       	cp.w	r8,0
80005a24:	c0 20       	breq	80005a28 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005a26:	d5 03       	csrf	0x10
   }

	barrier();
}
80005a28:	2f fd       	sub	sp,-4
80005a2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a2e:	00 00       	add	r0,r0
80005a30:	80 00       	ld.sh	r0,r0[0x0]
80005a32:	59 ea       	cp.w	r10,30

80005a34 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
80005a34:	eb cd 40 80 	pushm	r7,lr
80005a38:	1a 97       	mov	r7,sp
80005a3a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005a3c:	f0 1f 00 0c 	mcall	80005a6c <osc_priv_enable_osc0+0x38>
80005a40:	18 98       	mov	r8,r12
80005a42:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
80005a46:	fe 78 08 00 	mov	r8,-63488
80005a4a:	32 49       	mov	r9,36
80005a4c:	ea 19 aa 00 	orh	r9,0xaa00
80005a50:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] =
80005a52:	fe 78 08 00 	mov	r8,-63488
80005a56:	e0 79 0c 07 	mov	r9,68615
80005a5a:	91 99       	st.w	r8[0x24],r9
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
80005a5c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005a60:	f0 1f 00 04 	mcall	80005a70 <osc_priv_enable_osc0+0x3c>
}
80005a64:	2f fd       	sub	sp,-4
80005a66:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a6a:	00 00       	add	r0,r0
80005a6c:	80 00       	ld.sh	r0,r0[0x0]
80005a6e:	59 cc       	cp.w	r12,28
80005a70:	80 00       	ld.sh	r0,r0[0x0]
80005a72:	5a 0c       	cp.w	r12,-32

80005a74 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
80005a74:	eb cd 40 80 	pushm	r7,lr
80005a78:	1a 97       	mov	r7,sp
80005a7a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005a7c:	f0 1f 00 0c 	mcall	80005aac <osc_priv_enable_osc32+0x38>
80005a80:	18 98       	mov	r8,r12
80005a82:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
80005a86:	fe 78 08 00 	mov	r8,-63488
80005a8a:	34 c9       	mov	r9,76
80005a8c:	ea 19 aa 00 	orh	r9,0xaa00
80005a90:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 =
80005a92:	fe 78 08 00 	mov	r8,-63488
80005a96:	e2 69 01 01 	mov	r9,131329
80005a9a:	f1 49 00 4c 	st.w	r8[76],r9
			(OSC32_STARTUP_VALUE << AVR32_SCIF_OSCCTRL32_STARTUP)
			| (OSC32_MODE_VALUE << AVR32_SCIF_OSCCTRL32_MODE)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
80005a9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80005aa2:	f0 1f 00 04 	mcall	80005ab0 <osc_priv_enable_osc32+0x3c>
}
80005aa6:	2f fd       	sub	sp,-4
80005aa8:	e3 cd 80 80 	ldm	sp++,r7,pc
80005aac:	80 00       	ld.sh	r0,r0[0x0]
80005aae:	59 cc       	cp.w	r12,28
80005ab0:	80 00       	ld.sh	r0,r0[0x0]
80005ab2:	5a 0c       	cp.w	r12,-32

80005ab4 <osc_priv_enable_rc8m>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc8m(void)
{
80005ab4:	eb cd 40 80 	pushm	r7,lr
80005ab8:	1a 97       	mov	r7,sp
80005aba:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint32_t   rccr8;
    uint32_t* calibration_bits = (uint32_t*)0x80800200;
80005abc:	e0 68 02 00 	mov	r8,512
80005ac0:	ea 18 80 80 	orh	r8,0x8080
80005ac4:	ef 48 ff fc 	st.w	r7[-4],r8
	/* Wait for the CALIB field to be updated from fuses after reset */
	while (!(AVR32_SCIF.rccr8 & AVR32_SCIF_RCCR8_FCD_MASK)) {
80005ac8:	fe 78 08 00 	mov	r8,-63488
80005acc:	71 28       	ld.w	r8,r8[0x48]
80005ace:	e6 18 00 01 	andh	r8,0x1,COH
80005ad2:	cf b0       	breq	80005ac8 <osc_priv_enable_rc8m+0x14>
		/* Do nothing */
	}

	/* Enable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
80005ad4:	f0 1f 00 17 	mcall	80005b30 <osc_priv_enable_rc8m+0x7c>
80005ad8:	18 98       	mov	r8,r12
80005ada:	ef 48 ff f4 	st.w	r7[-12],r8
	rccr8 = AVR32_SCIF.rccr8;
80005ade:	fe 78 08 00 	mov	r8,-63488
80005ae2:	71 28       	ld.w	r8,r8[0x48]
80005ae4:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
80005ae8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005aec:	70 08       	ld.w	r8,r8[0x0]
80005aee:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80005af2:	b1 a8       	sbr	r8,0x10
80005af4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005af8:	f3 e8 00 08 	and	r8,r9,r8
80005afc:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 |= 1U << AVR32_SCIF_RCOSC8_EN;
80005b00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b04:	b9 a8       	sbr	r8,0x18
80005b06:	ef 48 ff f8 	st.w	r7[-8],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
80005b0a:	fe 78 08 00 	mov	r8,-63488
80005b0e:	34 89       	mov	r9,72
80005b10:	ea 19 aa 00 	orh	r9,0xaa00
80005b14:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
80005b16:	fe 78 08 00 	mov	r8,-63488
80005b1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b1e:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
80005b22:	ee fc ff f4 	ld.w	r12,r7[-12]
80005b26:	f0 1f 00 04 	mcall	80005b34 <osc_priv_enable_rc8m+0x80>
}
80005b2a:	2f dd       	sub	sp,-12
80005b2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b30:	80 00       	ld.sh	r0,r0[0x0]
80005b32:	59 cc       	cp.w	r12,28
80005b34:	80 00       	ld.sh	r0,r0[0x0]
80005b36:	5a 0c       	cp.w	r12,-32

80005b38 <osc_priv_enable_rc120m>:
	AVR32_SCIF.rccr8 = rccr8;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc120m(void)
{
80005b38:	eb cd 40 80 	pushm	r7,lr
80005b3c:	1a 97       	mov	r7,sp
80005b3e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80005b40:	f0 1f 00 0c 	mcall	80005b70 <osc_priv_enable_rc120m+0x38>
80005b44:	18 98       	mov	r8,r12
80005b46:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
80005b4a:	fe 78 08 00 	mov	r8,-63488
80005b4e:	35 89       	mov	r9,88
80005b50:	ea 19 aa 00 	orh	r9,0xaa00
80005b54:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
80005b56:	fe 78 08 00 	mov	r8,-63488
80005b5a:	30 19       	mov	r9,1
80005b5c:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
80005b60:	ee fc ff fc 	ld.w	r12,r7[-4]
80005b64:	f0 1f 00 04 	mcall	80005b74 <osc_priv_enable_rc120m+0x3c>
}
80005b68:	2f fd       	sub	sp,-4
80005b6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b6e:	00 00       	add	r0,r0
80005b70:	80 00       	ld.sh	r0,r0[0x0]
80005b72:	59 cc       	cp.w	r12,28
80005b74:	80 00       	ld.sh	r0,r0[0x0]
80005b76:	5a 0c       	cp.w	r12,-32

80005b78 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005b78:	eb cd 40 80 	pushm	r7,lr
80005b7c:	1a 97       	mov	r7,sp
80005b7e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005b80:	e1 b8 00 00 	mfsr	r8,0x0
80005b84:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005b88:	d3 03       	ssrf	0x10

	return flags;
80005b8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005b8e:	10 9c       	mov	r12,r8
80005b90:	2f fd       	sub	sp,-4
80005b92:	e3 cd 80 80 	ldm	sp++,r7,pc

80005b96 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005b96:	eb cd 40 80 	pushm	r7,lr
80005b9a:	1a 97       	mov	r7,sp
80005b9c:	20 1d       	sub	sp,4
80005b9e:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005ba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ba6:	e6 18 00 01 	andh	r8,0x1,COH
80005baa:	5f 08       	sreq	r8
80005bac:	5c 58       	castu.b	r8
}
80005bae:	10 9c       	mov	r12,r8
80005bb0:	2f fd       	sub	sp,-4
80005bb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005bb6:	d7 03       	nop

80005bb8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005bb8:	eb cd 40 80 	pushm	r7,lr
80005bbc:	1a 97       	mov	r7,sp
80005bbe:	20 1d       	sub	sp,4
80005bc0:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005bc4:	ee fc ff fc 	ld.w	r12,r7[-4]
80005bc8:	f0 1f 00 05 	mcall	80005bdc <cpu_irq_restore+0x24>
80005bcc:	18 98       	mov	r8,r12
80005bce:	58 08       	cp.w	r8,0
80005bd0:	c0 20       	breq	80005bd4 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005bd2:	d5 03       	csrf	0x10
   }

	barrier();
}
80005bd4:	2f fd       	sub	sp,-4
80005bd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005bda:	00 00       	add	r0,r0
80005bdc:	80 00       	ld.sh	r0,r0[0x0]
80005bde:	5b 96       	cp.w	r6,-7

80005be0 <pll_enable>:
	AVR32_SCIF.pll[pll_id] = cfg->ctrl;
	cpu_irq_restore(flags);
}

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
80005be0:	eb cd 40 80 	pushm	r7,lr
80005be4:	1a 97       	mov	r7,sp
80005be6:	20 3d       	sub	sp,12
80005be8:	ef 4c ff f8 	st.w	r7[-8],r12
80005bec:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
80005bf0:	f0 1f 00 10 	mcall	80005c30 <pll_enable+0x50>
80005bf4:	18 98       	mov	r8,r12
80005bf6:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
80005bfa:	fe 78 08 00 	mov	r8,-63488
80005bfe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005c02:	2f 99       	sub	r9,-7
80005c04:	a3 69       	lsl	r9,0x2
80005c06:	ea 19 aa 00 	orh	r9,0xaa00
80005c0a:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
80005c0c:	fe 78 08 00 	mov	r8,-63488
80005c10:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005c14:	ee fa ff f8 	ld.w	r10,r7[-8]
80005c18:	74 0a       	ld.w	r10,r10[0x0]
80005c1a:	a1 aa       	sbr	r10,0x0
80005c1c:	2f 99       	sub	r9,-7
80005c1e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
80005c22:	ee fc ff fc 	ld.w	r12,r7[-4]
80005c26:	f0 1f 00 04 	mcall	80005c34 <pll_enable+0x54>
}
80005c2a:	2f dd       	sub	sp,-12
80005c2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c30:	80 00       	ld.sh	r0,r0[0x0]
80005c32:	5b 78       	cp.w	r8,-9
80005c34:	80 00       	ld.sh	r0,r0[0x0]
80005c36:	5b b8       	cp.w	r8,-5

80005c38 <pll_disable>:

void pll_disable(unsigned int pll_id)
{
80005c38:	eb cd 40 80 	pushm	r7,lr
80005c3c:	1a 97       	mov	r7,sp
80005c3e:	20 2d       	sub	sp,8
80005c40:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
80005c44:	f0 1f 00 0f 	mcall	80005c80 <pll_disable+0x48>
80005c48:	18 98       	mov	r8,r12
80005c4a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
80005c4e:	fe 78 08 00 	mov	r8,-63488
80005c52:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005c56:	2f 99       	sub	r9,-7
80005c58:	a3 69       	lsl	r9,0x2
80005c5a:	ea 19 aa 00 	orh	r9,0xaa00
80005c5e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = 0;
80005c60:	fe 78 08 00 	mov	r8,-63488
80005c64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005c68:	2f 99       	sub	r9,-7
80005c6a:	30 0a       	mov	r10,0
80005c6c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
80005c70:	ee fc ff fc 	ld.w	r12,r7[-4]
80005c74:	f0 1f 00 04 	mcall	80005c84 <pll_disable+0x4c>
}
80005c78:	2f ed       	sub	sp,-8
80005c7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c7e:	00 00       	add	r0,r0
80005c80:	80 00       	ld.sh	r0,r0[0x0]
80005c82:	5b 78       	cp.w	r8,-9
80005c84:	80 00       	ld.sh	r0,r0[0x0]
80005c86:	5b b8       	cp.w	r8,-5

80005c88 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005c88:	eb cd 40 80 	pushm	r7,lr
80005c8c:	1a 97       	mov	r7,sp
80005c8e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005c90:	e1 b8 00 00 	mfsr	r8,0x0
80005c94:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005c98:	d3 03       	ssrf	0x10

	return flags;
80005c9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005c9e:	10 9c       	mov	r12,r8
80005ca0:	2f fd       	sub	sp,-4
80005ca2:	e3 cd 80 80 	ldm	sp++,r7,pc

80005ca6 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005ca6:	eb cd 40 80 	pushm	r7,lr
80005caa:	1a 97       	mov	r7,sp
80005cac:	20 1d       	sub	sp,4
80005cae:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005cb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005cb6:	e6 18 00 01 	andh	r8,0x1,COH
80005cba:	5f 08       	sreq	r8
80005cbc:	5c 58       	castu.b	r8
}
80005cbe:	10 9c       	mov	r12,r8
80005cc0:	2f fd       	sub	sp,-4
80005cc2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005cc6:	d7 03       	nop

80005cc8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005cc8:	eb cd 40 80 	pushm	r7,lr
80005ccc:	1a 97       	mov	r7,sp
80005cce:	20 1d       	sub	sp,4
80005cd0:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005cd4:	ee fc ff fc 	ld.w	r12,r7[-4]
80005cd8:	f0 1f 00 05 	mcall	80005cec <cpu_irq_restore+0x24>
80005cdc:	18 98       	mov	r8,r12
80005cde:	58 08       	cp.w	r8,0
80005ce0:	c0 20       	breq	80005ce4 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005ce2:	d5 03       	csrf	0x10
   }

	barrier();
}
80005ce4:	2f fd       	sub	sp,-4
80005ce6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005cea:	00 00       	add	r0,r0
80005cec:	80 00       	ld.sh	r0,r0[0x0]
80005cee:	5c a6       	swap.h	r6

80005cf0 <sysclk_set_prescalers>:
 * \param pbc_shift The PBC clock will be divided by \f$2^{pbc\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift,
		unsigned int pbc_shift)
{
80005cf0:	eb cd 40 80 	pushm	r7,lr
80005cf4:	1a 97       	mov	r7,sp
80005cf6:	20 9d       	sub	sp,36
80005cf8:	ef 4c ff e8 	st.w	r7[-24],r12
80005cfc:	ef 4b ff e4 	st.w	r7[-28],r11
80005d00:	ef 4a ff e0 	st.w	r7[-32],r10
80005d04:	ef 49 ff dc 	st.w	r7[-36],r9
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
80005d08:	30 08       	mov	r8,0
80005d0a:	ef 48 ff f0 	st.w	r7[-16],r8
	uint32_t   pba_cksel = 0;
80005d0e:	30 08       	mov	r8,0
80005d10:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t   pbb_cksel = 0;
80005d14:	30 08       	mov	r8,0
80005d16:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t   pbc_cksel = 0;
80005d1a:	30 08       	mov	r8,0
80005d1c:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
80005d20:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d24:	58 08       	cp.w	r8,0
80005d26:	c0 70       	breq	80005d34 <sysclk_set_prescalers+0x44>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL_CPUSEL)
80005d28:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d2c:	20 18       	sub	r8,1
80005d2e:	a7 b8       	sbr	r8,0x7
80005d30:	ef 48 ff f0 	st.w	r7[-16],r8
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
80005d34:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005d38:	58 08       	cp.w	r8,0
80005d3a:	c0 70       	breq	80005d48 <sysclk_set_prescalers+0x58>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL_PBSEL)
80005d3c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005d40:	20 18       	sub	r8,1
80005d42:	a7 b8       	sbr	r8,0x7
80005d44:	ef 48 ff f4 	st.w	r7[-12],r8
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
80005d48:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d4c:	58 08       	cp.w	r8,0
80005d4e:	c0 70       	breq	80005d5c <sysclk_set_prescalers+0x6c>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL_PBSEL)
80005d50:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d54:	20 18       	sub	r8,1
80005d56:	a7 b8       	sbr	r8,0x7
80005d58:	ef 48 ff f8 	st.w	r7[-8],r8
				| (1U << AVR32_PM_PBBDIV);

	if (pbc_shift > 0)
80005d5c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005d60:	58 08       	cp.w	r8,0
80005d62:	c0 70       	breq	80005d70 <sysclk_set_prescalers+0x80>
		pbc_cksel = ((pbc_shift - 1) << AVR32_PM_PBCSEL_PBSEL)
80005d64:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005d68:	20 18       	sub	r8,1
80005d6a:	a7 b8       	sbr	r8,0x7
80005d6c:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_PBCDIV);

	flags = cpu_irq_save();
80005d70:	f0 1f 00 1e 	mcall	80005de8 <sysclk_set_prescalers+0xf8>
80005d74:	18 98       	mov	r8,r12
80005d76:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
80005d7a:	fe 78 04 00 	mov	r8,-64512
80005d7e:	30 49       	mov	r9,4
80005d80:	ea 19 aa 00 	orh	r9,0xaa00
80005d84:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.cpusel = cpu_cksel;
80005d88:	fe 78 04 00 	mov	r8,-64512
80005d8c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005d90:	91 19       	st.w	r8[0x4],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
80005d92:	fe 78 04 00 	mov	r8,-64512
80005d96:	30 c9       	mov	r9,12
80005d98:	ea 19 aa 00 	orh	r9,0xaa00
80005d9c:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbasel = pba_cksel;
80005da0:	fe 78 04 00 	mov	r8,-64512
80005da4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005da8:	91 39       	st.w	r8[0xc],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
80005daa:	fe 78 04 00 	mov	r8,-64512
80005dae:	31 09       	mov	r9,16
80005db0:	ea 19 aa 00 	orh	r9,0xaa00
80005db4:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbb_cksel;
80005db8:	fe 78 04 00 	mov	r8,-64512
80005dbc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005dc0:	91 49       	st.w	r8[0x10],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBCSEL;
80005dc2:	fe 78 04 00 	mov	r8,-64512
80005dc6:	31 49       	mov	r9,20
80005dc8:	ea 19 aa 00 	orh	r9,0xaa00
80005dcc:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbcsel = pbc_cksel;
80005dd0:	fe 78 04 00 	mov	r8,-64512
80005dd4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005dd8:	91 59       	st.w	r8[0x14],r9
	cpu_irq_restore(flags);
80005dda:	ee fc ff ec 	ld.w	r12,r7[-20]
80005dde:	f0 1f 00 04 	mcall	80005dec <sysclk_set_prescalers+0xfc>
}
80005de2:	2f 7d       	sub	sp,-36
80005de4:	e3 cd 80 80 	ldm	sp++,r7,pc
80005de8:	80 00       	ld.sh	r0,r0[0x0]
80005dea:	5c 88       	casts.h	r8
80005dec:	80 00       	ld.sh	r0,r0[0x0]
80005dee:	5c c8       	swap.bh	r8

80005df0 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
80005df0:	eb cd 40 80 	pushm	r7,lr
80005df4:	1a 97       	mov	r7,sp
80005df6:	20 2d       	sub	sp,8
80005df8:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
80005dfc:	f0 1f 00 0c 	mcall	80005e2c <sysclk_set_source+0x3c>
80005e00:	18 98       	mov	r8,r12
80005e02:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
80005e06:	fe 78 04 00 	mov	r8,-64512
80005e0a:	fc 19 aa 00 	movh	r9,0xaa00
80005e0e:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
80005e12:	fe 78 04 00 	mov	r8,-64512
80005e16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e1a:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80005e1c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005e20:	f0 1f 00 04 	mcall	80005e30 <sysclk_set_source+0x40>
}
80005e24:	2f ed       	sub	sp,-8
80005e26:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e2a:	00 00       	add	r0,r0
80005e2c:	80 00       	ld.sh	r0,r0[0x0]
80005e2e:	5c 88       	casts.h	r8
80005e30:	80 00       	ld.sh	r0,r0[0x0]
80005e32:	5c c8       	swap.bh	r8

80005e34 <twi_master_read>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005e34:	eb cd 40 80 	pushm	r7,lr
80005e38:	1a 97       	mov	r7,sp
80005e3a:	20 2d       	sub	sp,8
80005e3c:	ef 4c ff fc 	st.w	r7[-4],r12
80005e40:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_read_packet (twim, package));
80005e44:	ee fb ff f8 	ld.w	r11,r7[-8]
80005e48:	ee fc ff fc 	ld.w	r12,r7[-4]
80005e4c:	f0 1f 00 04 	mcall	80005e5c <twi_master_read+0x28>
80005e50:	18 98       	mov	r8,r12
}
80005e52:	10 9c       	mov	r12,r8
80005e54:	2f ed       	sub	sp,-8
80005e56:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e5a:	00 00       	add	r0,r0
80005e5c:	80 00       	ld.sh	r0,r0[0x0]
80005e5e:	51 8c       	stdsp	sp[0x60],r12

80005e60 <twi_master_write>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   if all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005e60:	eb cd 40 80 	pushm	r7,lr
80005e64:	1a 97       	mov	r7,sp
80005e66:	20 2d       	sub	sp,8
80005e68:	ef 4c ff fc 	st.w	r7[-4],r12
80005e6c:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_write_packet (twim, package));
80005e70:	ee fb ff f8 	ld.w	r11,r7[-8]
80005e74:	ee fc ff fc 	ld.w	r12,r7[-4]
80005e78:	f0 1f 00 04 	mcall	80005e88 <twi_master_write+0x28>
80005e7c:	18 98       	mov	r8,r12
}
80005e7e:	10 9c       	mov	r12,r8
80005e80:	2f ed       	sub	sp,-8
80005e82:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e86:	00 00       	add	r0,r0
80005e88:	80 00       	ld.sh	r0,r0[0x0]
80005e8a:	53 08       	stdsp	sp[0xc0],r8

80005e8c <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
80005e8c:	eb cd 40 80 	pushm	r7,lr
80005e90:	1a 97       	mov	r7,sp
80005e92:	20 9d       	sub	sp,36
80005e94:	16 99       	mov	r9,r11
80005e96:	14 98       	mov	r8,r10
80005e98:	18 9a       	mov	r10,r12
80005e9a:	ef 6a ff e4 	st.b	r7[-28],r10
80005e9e:	ef 69 ff e0 	st.b	r7[-32],r9
80005ea2:	ef 68 ff dc 	st.b	r7[-36],r8
uint8_t pack[2];
twi_package_t twi_package;

	pack[0] = reg_index;
80005ea6:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80005eaa:	ef 68 ff fc 	st.b	r7[-4],r8
	pack[1] = data;
80005eae:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80005eb2:	ef 68 ff fd 	st.b	r7[-3],r8

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005eb6:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80005eba:	30 08       	mov	r8,0
80005ebc:	f0 09 18 00 	cp.b	r9,r8
80005ec0:	c0 51       	brne	80005eca <PCA9952_write_reg+0x3e>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005ec2:	36 08       	mov	r8,96
80005ec4:	ef 48 ff e8 	st.w	r7[-24],r8
80005ec8:	c0 a8       	rjmp	80005edc <PCA9952_write_reg+0x50>
	}
	else if (topBotn == LED_BOTTOM)
80005eca:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80005ece:	30 18       	mov	r8,1
80005ed0:	f0 09 18 00 	cp.b	r9,r8
80005ed4:	c0 41       	brne	80005edc <PCA9952_write_reg+0x50>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005ed6:	36 18       	mov	r8,97
80005ed8:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	twi_package.addr_length = 0;
80005edc:	30 08       	mov	r8,0
80005ede:	ef 68 ff ef 	st.b	r7[-17],r8
	twi_package.buffer = &pack;
80005ee2:	ee c8 00 04 	sub	r8,r7,4
80005ee6:	ef 48 ff f0 	st.w	r7[-16],r8
	twi_package.length = sizeof(pack);
80005eea:	30 28       	mov	r8,2
80005eec:	ef 48 ff f4 	st.w	r7[-12],r8

	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005ef0:	ee c8 00 18 	sub	r8,r7,24
80005ef4:	10 9b       	mov	r11,r8
80005ef6:	fe 7c 38 00 	mov	r12,-51200
80005efa:	f0 1f 00 05 	mcall	80005f0c <PCA9952_write_reg+0x80>
80005efe:	18 98       	mov	r8,r12
80005f00:	58 08       	cp.w	r8,0
80005f02:	cf 71       	brne	80005ef0 <PCA9952_write_reg+0x64>

	return;
}
80005f04:	2f 7d       	sub	sp,-36
80005f06:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f0a:	00 00       	add	r0,r0
80005f0c:	80 00       	ld.sh	r0,r0[0x0]
80005f0e:	5e 60       	retmi	r0

80005f10 <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
80005f10:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005f14:	1a 97       	mov	r7,sp
80005f16:	21 3d       	sub	sp,76
80005f18:	18 99       	mov	r9,r12
80005f1a:	16 98       	mov	r8,r11
80005f1c:	ef 69 ff b8 	st.b	r7[-72],r9
80005f20:	ef 68 ff b4 	st.b	r7[-76],r8
uint8_t data;
twi_package_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005f24:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005f28:	30 08       	mov	r8,0
80005f2a:	f0 09 18 00 	cp.b	r9,r8
80005f2e:	c0 51       	brne	80005f38 <PCA9952_read_reg+0x28>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005f30:	36 08       	mov	r8,96
80005f32:	ef 48 ff c8 	st.w	r7[-56],r8
80005f36:	c0 a8       	rjmp	80005f4a <PCA9952_read_reg+0x3a>
	}
	else if (topBotn == LED_BOTTOM)
80005f38:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005f3c:	30 18       	mov	r8,1
80005f3e:	f0 09 18 00 	cp.b	r9,r8
80005f42:	c0 41       	brne	80005f4a <PCA9952_read_reg+0x3a>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005f44:	36 18       	mov	r8,97
80005f46:	ef 48 ff c8 	st.w	r7[-56],r8
	}

	twi_package.addr_length = 0;
80005f4a:	30 08       	mov	r8,0
80005f4c:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &reg_index;
80005f50:	ee c8 00 4c 	sub	r8,r7,76
80005f54:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
80005f58:	30 18       	mov	r8,1
80005f5a:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005f5e:	ee c8 00 38 	sub	r8,r7,56
80005f62:	10 9b       	mov	r11,r8
80005f64:	fe 7c 38 00 	mov	r12,-51200
80005f68:	f0 1f 00 5e 	mcall	800060e0 <PCA9952_read_reg+0x1d0>
80005f6c:	18 98       	mov	r8,r12
80005f6e:	58 08       	cp.w	r8,0
80005f70:	cf 71       	brne	80005f5e <PCA9952_read_reg+0x4e>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	cpu_delay_us(20, cpu_hz);
80005f72:	4d d8       	lddpc	r8,800060e4 <PCA9952_read_reg+0x1d4>
80005f74:	70 08       	ld.w	r8,r8[0x0]
80005f76:	31 49       	mov	r9,20
80005f78:	ef 49 ff e4 	st.w	r7[-28],r9
80005f7c:	ef 48 ff e0 	st.w	r7[-32],r8
80005f80:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005f84:	ef 48 ff ec 	st.w	r7[-20],r8
80005f88:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005f8c:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80005f90:	ee f0 ff ec 	ld.w	r0,r7[-20]
80005f94:	30 01       	mov	r1,0
80005f96:	ee f2 ff e8 	ld.w	r2,r7[-24]
80005f9a:	30 03       	mov	r3,0
80005f9c:	e2 02 02 4a 	mul	r10,r1,r2
80005fa0:	e6 00 02 48 	mul	r8,r3,r0
80005fa4:	10 0a       	add	r10,r8
80005fa6:	e0 02 06 48 	mulu.d	r8,r0,r2
80005faa:	12 0a       	add	r10,r9
80005fac:	14 99       	mov	r9,r10
80005fae:	ee 7a 42 3f 	mov	r10,999999
80005fb2:	30 0b       	mov	r11,0
80005fb4:	f0 0a 00 0a 	add	r10,r8,r10
80005fb8:	f2 0b 00 4b 	adc	r11,r9,r11
80005fbc:	ee 78 42 40 	mov	r8,1000000
80005fc0:	30 09       	mov	r9,0
80005fc2:	f0 1f 00 4a 	mcall	800060e8 <PCA9952_read_reg+0x1d8>
80005fc6:	14 98       	mov	r8,r10
80005fc8:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80005fca:	ef 48 ff f4 	st.w	r7[-12],r8
80005fce:	ee c8 00 44 	sub	r8,r7,68
80005fd2:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005fd6:	e1 b8 00 42 	mfsr	r8,0x108
80005fda:	10 99       	mov	r9,r8
80005fdc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005fe0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005fe2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005fe6:	70 09       	ld.w	r9,r8[0x0]
80005fe8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fec:	10 09       	add	r9,r8
80005fee:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005ff2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005ff4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005ff8:	30 08       	mov	r8,0
80005ffa:	f3 68 00 08 	st.b	r9[8],r8
80005ffe:	ee c8 00 44 	sub	r8,r7,68
80006002:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006006:	e1 b8 00 42 	mfsr	r8,0x108
8000600a:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000600e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006012:	f1 39 00 08 	ld.ub	r9,r8[8]
80006016:	30 28       	mov	r8,2
80006018:	f0 09 18 00 	cp.b	r9,r8
8000601c:	c0 31       	brne	80006022 <PCA9952_read_reg+0x112>
    return false;
8000601e:	30 08       	mov	r8,0
80006020:	c4 38       	rjmp	800060a6 <PCA9952_read_reg+0x196>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006022:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006026:	f1 39 00 08 	ld.ub	r9,r8[8]
8000602a:	30 18       	mov	r8,1
8000602c:	f0 09 18 00 	cp.b	r9,r8
80006030:	c0 31       	brne	80006036 <PCA9952_read_reg+0x126>
    return true;
80006032:	30 18       	mov	r8,1
80006034:	c3 98       	rjmp	800060a6 <PCA9952_read_reg+0x196>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000603a:	70 09       	ld.w	r9,r8[0x0]
8000603c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006040:	70 18       	ld.w	r8,r8[0x4]
80006042:	10 39       	cp.w	r9,r8
80006044:	e0 88 00 1a 	brls	80006078 <PCA9952_read_reg+0x168>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006048:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000604c:	70 08       	ld.w	r8,r8[0x0]
8000604e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006052:	10 39       	cp.w	r9,r8
80006054:	c1 02       	brcc	80006074 <PCA9952_read_reg+0x164>
80006056:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000605a:	70 18       	ld.w	r8,r8[0x4]
8000605c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006060:	10 39       	cp.w	r9,r8
80006062:	e0 88 00 09 	brls	80006074 <PCA9952_read_reg+0x164>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006066:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000606a:	30 18       	mov	r8,1
8000606c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006070:	30 18       	mov	r8,1
80006072:	c1 a8       	rjmp	800060a6 <PCA9952_read_reg+0x196>
    }
    return false;
80006074:	30 08       	mov	r8,0
80006076:	c1 88       	rjmp	800060a6 <PCA9952_read_reg+0x196>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006078:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000607c:	70 08       	ld.w	r8,r8[0x0]
8000607e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006082:	10 39       	cp.w	r9,r8
80006084:	c0 93       	brcs	80006096 <PCA9952_read_reg+0x186>
80006086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000608a:	70 18       	ld.w	r8,r8[0x4]
8000608c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006090:	10 39       	cp.w	r9,r8
80006092:	e0 88 00 09 	brls	800060a4 <PCA9952_read_reg+0x194>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006096:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000609a:	30 18       	mov	r8,1
8000609c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800060a0:	30 18       	mov	r8,1
800060a2:	c0 28       	rjmp	800060a6 <PCA9952_read_reg+0x196>
    }
    return false;
800060a4:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800060a6:	58 08       	cp.w	r8,0
800060a8:	ca b0       	breq	80005ffe <PCA9952_read_reg+0xee>

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
800060aa:	30 08       	mov	r8,0
800060ac:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &data;
800060b0:	ee c8 00 21 	sub	r8,r7,33
800060b4:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
800060b8:	30 18       	mov	r8,1
800060ba:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_read(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
800060be:	ee c8 00 38 	sub	r8,r7,56
800060c2:	10 9b       	mov	r11,r8
800060c4:	fe 7c 38 00 	mov	r12,-51200
800060c8:	f0 1f 00 09 	mcall	800060ec <PCA9952_read_reg+0x1dc>
800060cc:	18 98       	mov	r8,r12
800060ce:	58 08       	cp.w	r8,0
800060d0:	cf 71       	brne	800060be <PCA9952_read_reg+0x1ae>

	return data;
800060d2:	ef 38 ff df 	ld.ub	r8,r7[-33]
}
800060d6:	10 9c       	mov	r12,r8
800060d8:	2e dd       	sub	sp,-76
800060da:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800060de:	00 00       	add	r0,r0
800060e0:	80 00       	ld.sh	r0,r0[0x0]
800060e2:	5e 60       	retmi	r0
800060e4:	00 00       	add	r0,r0
800060e6:	07 b4       	ld.ub	r4,r3[0x3]
800060e8:	80 00       	ld.sh	r0,r0[0x0]
800060ea:	c4 3a       	rjmp	80005d70 <sysclk_set_prescalers+0x80>
800060ec:	80 00       	ld.sh	r0,r0[0x0]
800060ee:	5e 34       	retlo	r4

800060f0 <PCA9952_init>:


void PCA9952_init(void) //7apr15
{
800060f0:	eb cd 40 80 	pushm	r7,lr
800060f4:	1a 97       	mov	r7,sp
800060f6:	20 1d       	sub	sp,4
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
800060f8:	30 0a       	mov	r10,0
800060fa:	30 0b       	mov	r11,0
800060fc:	30 0c       	mov	r12,0
800060fe:	f0 1f 00 32 	mcall	800061c4 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
80006102:	30 0a       	mov	r10,0
80006104:	30 1b       	mov	r11,1
80006106:	30 0c       	mov	r12,0
80006108:	f0 1f 00 2f 	mcall	800061c4 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
8000610c:	36 4a       	mov	r10,100
8000610e:	34 3b       	mov	r11,67
80006110:	30 0c       	mov	r12,0
80006112:	f0 1f 00 2d 	mcall	800061c4 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
80006116:	30 0a       	mov	r10,0
80006118:	30 2b       	mov	r11,2
8000611a:	30 0c       	mov	r12,0
8000611c:	f0 1f 00 2a 	mcall	800061c4 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
80006120:	30 0a       	mov	r10,0
80006122:	30 3b       	mov	r11,3
80006124:	30 0c       	mov	r12,0
80006126:	f0 1f 00 28 	mcall	800061c4 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
8000612a:	30 0a       	mov	r10,0
8000612c:	30 4b       	mov	r11,4
8000612e:	30 0c       	mov	r12,0
80006130:	f0 1f 00 25 	mcall	800061c4 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
80006134:	30 0a       	mov	r10,0
80006136:	30 5b       	mov	r11,5
80006138:	30 0c       	mov	r12,0
8000613a:	f0 1f 00 23 	mcall	800061c4 <PCA9952_init+0xd4>

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
8000613e:	34 4b       	mov	r11,68
80006140:	30 0c       	mov	r12,0
80006142:	f0 1f 00 22 	mcall	800061c8 <PCA9952_init+0xd8>
80006146:	18 98       	mov	r8,r12
80006148:	ef 68 ff ff 	st.b	r7[-1],r8
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
8000614c:	34 5b       	mov	r11,69
8000614e:	30 0c       	mov	r12,0
80006150:	f0 1f 00 1e 	mcall	800061c8 <PCA9952_init+0xd8>
80006154:	18 98       	mov	r8,r12
80006156:	ef 68 ff fe 	st.b	r7[-2],r8

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
8000615a:	30 0a       	mov	r10,0
8000615c:	30 0b       	mov	r11,0
8000615e:	30 1c       	mov	r12,1
80006160:	f0 1f 00 19 	mcall	800061c4 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
80006164:	30 0a       	mov	r10,0
80006166:	30 1b       	mov	r11,1
80006168:	30 1c       	mov	r12,1
8000616a:	f0 1f 00 17 	mcall	800061c4 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
8000616e:	36 4a       	mov	r10,100
80006170:	34 3b       	mov	r11,67
80006172:	30 1c       	mov	r12,1
80006174:	f0 1f 00 14 	mcall	800061c4 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
80006178:	30 0a       	mov	r10,0
8000617a:	30 2b       	mov	r11,2
8000617c:	30 1c       	mov	r12,1
8000617e:	f0 1f 00 12 	mcall	800061c4 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
80006182:	30 0a       	mov	r10,0
80006184:	30 3b       	mov	r11,3
80006186:	30 1c       	mov	r12,1
80006188:	f0 1f 00 0f 	mcall	800061c4 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
8000618c:	30 0a       	mov	r10,0
8000618e:	30 4b       	mov	r11,4
80006190:	30 1c       	mov	r12,1
80006192:	f0 1f 00 0d 	mcall	800061c4 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
80006196:	30 0a       	mov	r10,0
80006198:	30 5b       	mov	r11,5
8000619a:	30 1c       	mov	r12,1
8000619c:	f0 1f 00 0a 	mcall	800061c4 <PCA9952_init+0xd4>

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
800061a0:	34 4b       	mov	r11,68
800061a2:	30 1c       	mov	r12,1
800061a4:	f0 1f 00 09 	mcall	800061c8 <PCA9952_init+0xd8>
800061a8:	18 98       	mov	r8,r12
800061aa:	ef 68 ff fd 	st.b	r7[-3],r8
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
800061ae:	34 5b       	mov	r11,69
800061b0:	30 1c       	mov	r12,1
800061b2:	f0 1f 00 06 	mcall	800061c8 <PCA9952_init+0xd8>
800061b6:	18 98       	mov	r8,r12
800061b8:	ef 68 ff fc 	st.b	r7[-4],r8

}
800061bc:	2f fd       	sub	sp,-4
800061be:	e3 cd 80 80 	ldm	sp++,r7,pc
800061c2:	00 00       	add	r0,r0
800061c4:	80 00       	ld.sh	r0,r0[0x0]
800061c6:	5e 8c       	retls	r12
800061c8:	80 00       	ld.sh	r0,r0[0x0]
800061ca:	5f 10       	srne	r0

800061cc <PCA9952_channel>:


void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn);
void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn)
{
800061cc:	eb cd 40 80 	pushm	r7,lr
800061d0:	1a 97       	mov	r7,sp
800061d2:	20 5d       	sub	sp,20
800061d4:	16 99       	mov	r9,r11
800061d6:	14 98       	mov	r8,r10
800061d8:	18 9a       	mov	r10,r12
800061da:	ef 6a ff f4 	st.b	r7[-12],r10
800061de:	ef 69 ff f0 	st.b	r7[-16],r9
800061e2:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char regIdx, regPos, regShadow, maskVal, writeVal;
	
	regIdx = (channel / 4); //LEDOUT0 controls channels 0..3, LEDOUT1 controls channels 4..7 etc.
800061e6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800061ea:	a3 88       	lsr	r8,0x2
800061ec:	ef 68 ff fb 	st.b	r7[-5],r8
	regPos = (channel % 4);
800061f0:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800061f4:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800061f8:	ef 68 ff fc 	st.b	r7[-4],r8
	
	switch(regIdx)
800061fc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006200:	58 18       	cp.w	r8,1
80006202:	c1 50       	breq	8000622c <PCA9952_channel+0x60>
80006204:	e0 89 00 05 	brgt	8000620e <PCA9952_channel+0x42>
80006208:	58 08       	cp.w	r8,0
8000620a:	c0 70       	breq	80006218 <PCA9952_channel+0x4c>
8000620c:	c2 d8       	rjmp	80006266 <PCA9952_channel+0x9a>
8000620e:	58 28       	cp.w	r8,2
80006210:	c1 80       	breq	80006240 <PCA9952_channel+0x74>
80006212:	58 38       	cp.w	r8,3
80006214:	c2 00       	breq	80006254 <PCA9952_channel+0x88>
80006216:	c2 88       	rjmp	80006266 <PCA9952_channel+0x9a>
	{
		case 0:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT0);
80006218:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000621c:	30 2b       	mov	r11,2
8000621e:	10 9c       	mov	r12,r8
80006220:	f0 1f 00 49 	mcall	80006344 <PCA9952_channel+0x178>
80006224:	18 98       	mov	r8,r12
80006226:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
8000622a:	c1 e8       	rjmp	80006266 <PCA9952_channel+0x9a>
		case 1:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT1);
8000622c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006230:	30 3b       	mov	r11,3
80006232:	10 9c       	mov	r12,r8
80006234:	f0 1f 00 44 	mcall	80006344 <PCA9952_channel+0x178>
80006238:	18 98       	mov	r8,r12
8000623a:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
8000623e:	c1 48       	rjmp	80006266 <PCA9952_channel+0x9a>
		case 2:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT2);
80006240:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006244:	30 4b       	mov	r11,4
80006246:	10 9c       	mov	r12,r8
80006248:	f0 1f 00 3f 	mcall	80006344 <PCA9952_channel+0x178>
8000624c:	18 98       	mov	r8,r12
8000624e:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80006252:	c0 a8       	rjmp	80006266 <PCA9952_channel+0x9a>
		case 3:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT3);
80006254:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006258:	30 5b       	mov	r11,5
8000625a:	10 9c       	mov	r12,r8
8000625c:	f0 1f 00 3a 	mcall	80006344 <PCA9952_channel+0x178>
80006260:	18 98       	mov	r8,r12
80006262:	ef 68 ff fd 	st.b	r7[-3],r8
			break;		
	}

	maskVal = 0xFF << (regPos * 2);
80006266:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000626a:	a1 78       	lsl	r8,0x1
8000626c:	e0 69 00 ff 	mov	r9,255
80006270:	f2 08 09 48 	lsl	r8,r9,r8
80006274:	ef 68 ff fe 	st.b	r7[-2],r8
	maskVal = maskVal ^ 0xFF;
80006278:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000627c:	5c d8       	com	r8
8000627e:	ef 68 ff fe 	st.b	r7[-2],r8
	regShadow &= maskVal;
80006282:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006286:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000628a:	f3 e8 00 08 	and	r8,r9,r8
8000628e:	ef 68 ff fd 	st.b	r7[-3],r8

	if (onOffn == LED_ON)
80006292:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80006296:	30 18       	mov	r8,1
80006298:	f0 09 18 00 	cp.b	r9,r8
8000629c:	c0 a1       	brne	800062b0 <PCA9952_channel+0xe4>
	{
		writeVal = (0x01 << (regPos * 2));
8000629e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800062a2:	a1 78       	lsl	r8,0x1
800062a4:	30 19       	mov	r9,1
800062a6:	f2 08 09 48 	lsl	r8,r9,r8
800062aa:	ef 68 ff ff 	st.b	r7[-1],r8
800062ae:	c0 a8       	rjmp	800062c2 <PCA9952_channel+0xf6>
	}
	else if (onOffn == LED_OFF)
800062b0:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800062b4:	30 08       	mov	r8,0
800062b6:	f0 09 18 00 	cp.b	r9,r8
800062ba:	c0 41       	brne	800062c2 <PCA9952_channel+0xf6>
	{
		writeVal = 0;
800062bc:	30 08       	mov	r8,0
800062be:	ef 68 ff ff 	st.b	r7[-1],r8
	}
	
	regShadow |= writeVal;
800062c2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800062c6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800062ca:	f3 e8 10 08 	or	r8,r9,r8
800062ce:	ef 68 ff fd 	st.b	r7[-3],r8
	
	switch(regIdx)
800062d2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800062d6:	58 18       	cp.w	r8,1
800062d8:	c1 50       	breq	80006302 <PCA9952_channel+0x136>
800062da:	e0 89 00 05 	brgt	800062e4 <PCA9952_channel+0x118>
800062de:	58 08       	cp.w	r8,0
800062e0:	c0 70       	breq	800062ee <PCA9952_channel+0x122>
800062e2:	c2 d8       	rjmp	8000633c <PCA9952_channel+0x170>
800062e4:	58 28       	cp.w	r8,2
800062e6:	c1 80       	breq	80006316 <PCA9952_channel+0x14a>
800062e8:	58 38       	cp.w	r8,3
800062ea:	c2 00       	breq	8000632a <PCA9952_channel+0x15e>
800062ec:	c2 88       	rjmp	8000633c <PCA9952_channel+0x170>
	{
		case 0:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT0, regShadow);
800062ee:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800062f2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800062f6:	12 9a       	mov	r10,r9
800062f8:	30 2b       	mov	r11,2
800062fa:	10 9c       	mov	r12,r8
800062fc:	f0 1f 00 13 	mcall	80006348 <PCA9952_channel+0x17c>
			break;
80006300:	c1 e8       	rjmp	8000633c <PCA9952_channel+0x170>
		case 1:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT1, regShadow);
80006302:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006306:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000630a:	12 9a       	mov	r10,r9
8000630c:	30 3b       	mov	r11,3
8000630e:	10 9c       	mov	r12,r8
80006310:	f0 1f 00 0e 	mcall	80006348 <PCA9952_channel+0x17c>
			break;
80006314:	c1 48       	rjmp	8000633c <PCA9952_channel+0x170>
		case 2:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT2, regShadow);
80006316:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000631a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000631e:	12 9a       	mov	r10,r9
80006320:	30 4b       	mov	r11,4
80006322:	10 9c       	mov	r12,r8
80006324:	f0 1f 00 09 	mcall	80006348 <PCA9952_channel+0x17c>
			break;
80006328:	c0 a8       	rjmp	8000633c <PCA9952_channel+0x170>
		case 3:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT3, regShadow);
8000632a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000632e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006332:	12 9a       	mov	r10,r9
80006334:	30 5b       	mov	r11,5
80006336:	10 9c       	mov	r12,r8
80006338:	f0 1f 00 04 	mcall	80006348 <PCA9952_channel+0x17c>
			break;
	}

}
8000633c:	2f bd       	sub	sp,-20
8000633e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006342:	00 00       	add	r0,r0
80006344:	80 00       	ld.sh	r0,r0[0x0]
80006346:	5f 10       	srne	r0
80006348:	80 00       	ld.sh	r0,r0[0x0]
8000634a:	5e 8c       	retls	r12

8000634c <led_shelf>:

void led_shelf(unsigned char shelf, unsigned char onOffn)
{
8000634c:	eb cd 40 80 	pushm	r7,lr
80006350:	1a 97       	mov	r7,sp
80006352:	20 2d       	sub	sp,8
80006354:	18 99       	mov	r9,r12
80006356:	16 98       	mov	r8,r11
80006358:	ef 69 ff fc 	st.b	r7[-4],r9
8000635c:	ef 68 ff f8 	st.b	r7[-8],r8
	switch(shelf)
80006360:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006364:	58 18       	cp.w	r8,1
80006366:	c2 f0       	breq	800063c4 <led_shelf+0x78>
80006368:	e0 89 00 05 	brgt	80006372 <led_shelf+0x26>
8000636c:	58 08       	cp.w	r8,0
8000636e:	c0 70       	breq	8000637c <led_shelf+0x30>
80006370:	c9 58       	rjmp	8000649a <led_shelf+0x14e>
80006372:	58 28       	cp.w	r8,2
80006374:	c4 c0       	breq	8000640c <led_shelf+0xc0>
80006376:	58 38       	cp.w	r8,3
80006378:	c6 e0       	breq	80006454 <led_shelf+0x108>
8000637a:	c9 08       	rjmp	8000649a <led_shelf+0x14e>
	{
		case 0: //bottom of LED board 0 which is the upper board in the shelf, and top of LED board 1 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 0, onOffn);
8000637c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006380:	10 9a       	mov	r10,r8
80006382:	30 0b       	mov	r11,0
80006384:	30 1c       	mov	r12,1
80006386:	f0 1f 00 47 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 1, onOffn);
8000638a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000638e:	10 9a       	mov	r10,r8
80006390:	30 1b       	mov	r11,1
80006392:	30 1c       	mov	r12,1
80006394:	f0 1f 00 43 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 2, onOffn);
80006398:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000639c:	10 9a       	mov	r10,r8
8000639e:	30 2b       	mov	r11,2
800063a0:	30 1c       	mov	r12,1
800063a2:	f0 1f 00 40 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 0, onOffn);
800063a6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063aa:	10 9a       	mov	r10,r8
800063ac:	30 0b       	mov	r11,0
800063ae:	30 0c       	mov	r12,0
800063b0:	f0 1f 00 3c 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 1, onOffn);
800063b4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063b8:	10 9a       	mov	r10,r8
800063ba:	30 1b       	mov	r11,1
800063bc:	30 0c       	mov	r12,0
800063be:	f0 1f 00 39 	mcall	800064a0 <led_shelf+0x154>
			break;
800063c2:	c6 c8       	rjmp	8000649a <led_shelf+0x14e>

		case 1: //bottom of LED board 1 which is the upper board in the shelf, and top of LED board 2 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 3, onOffn);
800063c4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063c8:	10 9a       	mov	r10,r8
800063ca:	30 3b       	mov	r11,3
800063cc:	30 1c       	mov	r12,1
800063ce:	f0 1f 00 35 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 4, onOffn);
800063d2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063d6:	10 9a       	mov	r10,r8
800063d8:	30 4b       	mov	r11,4
800063da:	30 1c       	mov	r12,1
800063dc:	f0 1f 00 31 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 5, onOffn);
800063e0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063e4:	10 9a       	mov	r10,r8
800063e6:	30 5b       	mov	r11,5
800063e8:	30 1c       	mov	r12,1
800063ea:	f0 1f 00 2e 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 2, onOffn);
800063ee:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800063f2:	10 9a       	mov	r10,r8
800063f4:	30 2b       	mov	r11,2
800063f6:	30 0c       	mov	r12,0
800063f8:	f0 1f 00 2a 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 3, onOffn);
800063fc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006400:	10 9a       	mov	r10,r8
80006402:	30 3b       	mov	r11,3
80006404:	30 0c       	mov	r12,0
80006406:	f0 1f 00 27 	mcall	800064a0 <led_shelf+0x154>
			break;
8000640a:	c4 88       	rjmp	8000649a <led_shelf+0x14e>

		case 2: //bottom of LED board 2 which is the upper board in the shelf, and top of LED board 3 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 6, onOffn);
8000640c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006410:	10 9a       	mov	r10,r8
80006412:	30 6b       	mov	r11,6
80006414:	30 1c       	mov	r12,1
80006416:	f0 1f 00 23 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 7, onOffn);
8000641a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000641e:	10 9a       	mov	r10,r8
80006420:	30 7b       	mov	r11,7
80006422:	30 1c       	mov	r12,1
80006424:	f0 1f 00 1f 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 8, onOffn);
80006428:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000642c:	10 9a       	mov	r10,r8
8000642e:	30 8b       	mov	r11,8
80006430:	30 1c       	mov	r12,1
80006432:	f0 1f 00 1c 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 4, onOffn);
80006436:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000643a:	10 9a       	mov	r10,r8
8000643c:	30 4b       	mov	r11,4
8000643e:	30 0c       	mov	r12,0
80006440:	f0 1f 00 18 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 5, onOffn);
80006444:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006448:	10 9a       	mov	r10,r8
8000644a:	30 5b       	mov	r11,5
8000644c:	30 0c       	mov	r12,0
8000644e:	f0 1f 00 15 	mcall	800064a0 <led_shelf+0x154>
			break;
80006452:	c2 48       	rjmp	8000649a <led_shelf+0x14e>

		case 3: //bottom of LED board 3 which is the upper board in the shelf, and top of LED board 4 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 9, onOffn);
80006454:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006458:	10 9a       	mov	r10,r8
8000645a:	30 9b       	mov	r11,9
8000645c:	30 1c       	mov	r12,1
8000645e:	f0 1f 00 11 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 10, onOffn);
80006462:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006466:	10 9a       	mov	r10,r8
80006468:	30 ab       	mov	r11,10
8000646a:	30 1c       	mov	r12,1
8000646c:	f0 1f 00 0d 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 11, onOffn);
80006470:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006474:	10 9a       	mov	r10,r8
80006476:	30 bb       	mov	r11,11
80006478:	30 1c       	mov	r12,1
8000647a:	f0 1f 00 0a 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 6, onOffn);
8000647e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006482:	10 9a       	mov	r10,r8
80006484:	30 6b       	mov	r11,6
80006486:	30 0c       	mov	r12,0
80006488:	f0 1f 00 06 	mcall	800064a0 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 7, onOffn);
8000648c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006490:	10 9a       	mov	r10,r8
80006492:	30 7b       	mov	r11,7
80006494:	30 0c       	mov	r12,0
80006496:	f0 1f 00 03 	mcall	800064a0 <led_shelf+0x154>
			break;
	}	
	
}
8000649a:	2f ed       	sub	sp,-8
8000649c:	e3 cd 80 80 	ldm	sp++,r7,pc
800064a0:	80 00       	ld.sh	r0,r0[0x0]
800064a2:	61 cc       	ld.w	r12,r0[0x70]
800064a4:	43 68       	lddsp	r8,sp[0xd8]
800064a6:	61 73       	ld.w	r3,r0[0x5c]
800064a8:	73 69       	ld.w	r9,r9[0x58]
800064aa:	73 20       	ld.w	r0,r9[0x48]
800064ac:	65 72       	ld.w	r2,r2[0x5c]
800064ae:	72 6f       	ld.w	pc,r9[0x18]
800064b0:	72 2e       	ld.w	lr,r9[0x8]
800064b2:	2e 2e       	sub	lr,-30
800064b4:	73 68       	ld.w	r8,r9[0x58]
800064b6:	75 74       	ld.w	r4,r10[0x5c]
800064b8:	74 69       	ld.w	r9,r10[0x18]
800064ba:	6e 67       	ld.w	r7,r7[0x18]
800064bc:	20 64       	sub	r4,6
800064be:	6f 77       	ld.w	r7,r7[0x5c]
800064c0:	6e 2e       	ld.w	lr,r7[0x8]
800064c2:	0d 0a       	ld.w	r10,r6++
800064c4:	00 00       	add	r0,r0
800064c6:	00 00       	add	r0,r0
800064c8:	25 64       	sub	r4,86
800064ca:	00 00       	add	r0,r0
800064cc:	4c 45       	lddpc	r5,800065dc <led_shelf+0x290>
800064ce:	44 20       	lddsp	r0,sp[0x108]
800064d0:	62 6f       	ld.w	pc,r1[0x18]
800064d2:	61 72       	ld.w	r2,r0[0x5c]
800064d4:	64 20       	ld.w	r0,r2[0x8]
800064d6:	64 65       	ld.w	r5,r2[0x18]
800064d8:	74 65       	ld.w	r5,r10[0x18]
800064da:	63 74       	ld.w	r4,r1[0x5c]
800064dc:	65 64       	ld.w	r4,r2[0x58]
800064de:	20 69       	sub	r9,6
800064e0:	6e 20       	ld.w	r0,r7[0x8]
800064e2:	73 6c       	ld.w	r12,r9[0x58]
800064e4:	6f 74       	ld.w	r4,r7[0x5c]
800064e6:	20 00       	sub	r0,0
800064e8:	0d 0a       	ld.w	r10,r6++
800064ea:	00 00       	add	r0,r0
800064ec:	53 68       	stdsp	sp[0xd8],r8
800064ee:	65 6c       	ld.w	r12,r2[0x58]
800064f0:	66 20       	ld.w	r0,r3[0x8]
800064f2:	30 20       	mov	r0,2
800064f4:	70 72       	ld.w	r2,r8[0x1c]
800064f6:	65 73       	ld.w	r3,r2[0x5c]
800064f8:	65 6e       	ld.w	lr,r2[0x58]
800064fa:	74 0d       	ld.w	sp,r10[0x0]
800064fc:	0a 00       	add	r0,r5
800064fe:	00 00       	add	r0,r0
80006500:	53 68       	stdsp	sp[0xd8],r8
80006502:	65 6c       	ld.w	r12,r2[0x58]
80006504:	66 20       	ld.w	r0,r3[0x8]
80006506:	31 20       	mov	r0,18
80006508:	70 72       	ld.w	r2,r8[0x1c]
8000650a:	65 73       	ld.w	r3,r2[0x5c]
8000650c:	65 6e       	ld.w	lr,r2[0x58]
8000650e:	74 0d       	ld.w	sp,r10[0x0]
80006510:	0a 00       	add	r0,r5
80006512:	00 00       	add	r0,r0
80006514:	53 68       	stdsp	sp[0xd8],r8
80006516:	65 6c       	ld.w	r12,r2[0x58]
80006518:	66 20       	ld.w	r0,r3[0x8]
8000651a:	32 20       	mov	r0,34
8000651c:	70 72       	ld.w	r2,r8[0x1c]
8000651e:	65 73       	ld.w	r3,r2[0x5c]
80006520:	65 6e       	ld.w	lr,r2[0x58]
80006522:	74 0d       	ld.w	sp,r10[0x0]
80006524:	0a 00       	add	r0,r5
80006526:	00 00       	add	r0,r0
80006528:	53 68       	stdsp	sp[0xd8],r8
8000652a:	65 6c       	ld.w	r12,r2[0x58]
8000652c:	66 20       	ld.w	r0,r3[0x8]
8000652e:	33 20       	mov	r0,50
80006530:	70 72       	ld.w	r2,r8[0x1c]
80006532:	65 73       	ld.w	r3,r2[0x5c]
80006534:	65 6e       	ld.w	lr,r2[0x58]
80006536:	74 0d       	ld.w	sp,r10[0x0]
80006538:	0a 00       	add	r0,r5
8000653a:	00 00       	add	r0,r0
8000653c:	49 6e       	lddpc	lr,80006594 <led_shelf+0x248>
8000653e:	76 61       	ld.w	r1,r11[0x18]
80006540:	6c 69       	ld.w	r9,r6[0x18]
80006542:	64 20       	ld.w	r0,r2[0x8]
80006544:	73 65       	ld.w	r5,r9[0x58]
80006546:	72 69       	ld.w	r9,r9[0x18]
80006548:	61 6c       	ld.w	r12,r0[0x58]
8000654a:	20 49       	sub	r9,4
8000654c:	44 20       	lddsp	r0,sp[0x108]
8000654e:	63 68       	ld.w	r8,r1[0x58]
80006550:	65 63       	ld.w	r3,r2[0x58]
80006552:	6b 73       	ld.w	r3,r5[0x5c]
80006554:	75 6d       	ld.w	sp,r10[0x58]
80006556:	2e 0d       	sub	sp,-128
80006558:	0a 00       	add	r0,r5
8000655a:	00 00       	add	r0,r0
8000655c:	44 65       	lddsp	r5,sp[0x118]
8000655e:	76 69       	ld.w	r9,r11[0x18]
80006560:	63 65       	ld.w	r5,r1[0x58]
80006562:	73 20       	ld.w	r0,r9[0x48]
80006564:	64 65       	ld.w	r5,r2[0x18]
80006566:	74 65       	ld.w	r5,r10[0x18]
80006568:	63 74       	ld.w	r4,r1[0x5c]
8000656a:	65 64       	ld.w	r4,r2[0x58]
8000656c:	20 6f       	sub	pc,6
8000656e:	6e 20       	ld.w	r0,r7[0x8]
80006570:	73 68       	ld.w	r8,r9[0x58]
80006572:	65 6c       	ld.w	r12,r2[0x58]
80006574:	66 20       	ld.w	r0,r3[0x8]
80006576:	00 00       	add	r0,r0
80006578:	50 43       	stdsp	sp[0x10],r3
8000657a:	41 39       	lddsp	r9,sp[0x4c]
8000657c:	39 35       	mov	r5,-109
8000657e:	32 20       	mov	r0,34
80006580:	45 72       	lddsp	r2,sp[0x15c]
80006582:	72 6f       	ld.w	pc,r9[0x18]
80006584:	72 28       	ld.w	r8,r9[0x8]
80006586:	73 29       	ld.w	r9,r9[0x48]
80006588:	20 6f       	sub	pc,6
8000658a:	6e 20       	ld.w	r0,r7[0x8]
8000658c:	54 4f       	stdsp	sp[0x110],pc
8000658e:	50 44       	stdsp	sp[0x10],r4
80006590:	52 49       	stdsp	sp[0x90],r9
80006592:	56 45       	stdsp	sp[0x190],r5
80006594:	20 00       	sub	r0,0
80006596:	00 00       	add	r0,r0
80006598:	20 00       	sub	r0,0
8000659a:	00 00       	add	r0,r0
8000659c:	45 52       	lddsp	r2,sp[0x154]
8000659e:	52 4f       	stdsp	sp[0x90],pc
800065a0:	52 20       	stdsp	sp[0x88],r0
800065a2:	6f 6e       	ld.w	lr,r7[0x58]
800065a4:	20 75       	sub	r5,7
800065a6:	6e 75       	ld.w	r5,r7[0x1c]
800065a8:	73 65       	ld.w	r5,r9[0x58]
800065aa:	64 20       	ld.w	r0,r2[0x8]
800065ac:	63 68       	ld.w	r8,r1[0x58]
800065ae:	61 6e       	ld.w	lr,r0[0x58]
800065b0:	6e 65       	ld.w	r5,r7[0x18]
800065b2:	6c 73       	ld.w	r3,r6[0x1c]
800065b4:	3a 20       	mov	r0,-94
800065b6:	50 43       	stdsp	sp[0x10],r3
800065b8:	41 39       	lddsp	r9,sp[0x4c]
800065ba:	39 35       	mov	r5,-109
800065bc:	32 20       	mov	r0,34
800065be:	2d 20       	sub	r0,-46
800065c0:	43 6f       	lddsp	pc,sp[0xd8]
800065c2:	6e 74       	ld.w	r4,r7[0x1c]
800065c4:	72 6f       	ld.w	pc,r9[0x18]
800065c6:	6c 6c       	ld.w	r12,r6[0x18]
800065c8:	65 72       	ld.w	r2,r2[0x5c]
800065ca:	20 62       	sub	r2,6
800065cc:	6f 61       	ld.w	r1,r7[0x58]
800065ce:	72 64       	ld.w	r4,r9[0x18]
800065d0:	20 55       	sub	r5,5
800065d2:	37 0d       	mov	sp,112
800065d4:	0a 00       	add	r0,r5
800065d6:	00 00       	add	r0,r0
800065d8:	50 43       	stdsp	sp[0x10],r3
800065da:	41 39       	lddsp	r9,sp[0x4c]
800065dc:	39 35       	mov	r5,-109
800065de:	32 20       	mov	r0,34
800065e0:	45 72       	lddsp	r2,sp[0x15c]
800065e2:	72 6f       	ld.w	pc,r9[0x18]
800065e4:	72 28       	ld.w	r8,r9[0x8]
800065e6:	73 29       	ld.w	r9,r9[0x48]
800065e8:	20 6f       	sub	pc,6
800065ea:	6e 20       	ld.w	r0,r7[0x8]
800065ec:	42 4f       	lddsp	pc,sp[0x90]
800065ee:	54 44       	stdsp	sp[0x110],r4
800065f0:	52 49       	stdsp	sp[0x90],r9
800065f2:	56 45       	stdsp	sp[0x190],r5
800065f4:	20 00       	sub	r0,0
800065f6:	00 00       	add	r0,r0
800065f8:	45 52       	lddsp	r2,sp[0x154]
800065fa:	52 4f       	stdsp	sp[0x90],pc
800065fc:	52 20       	stdsp	sp[0x88],r0
800065fe:	6f 6e       	ld.w	lr,r7[0x58]
80006600:	20 75       	sub	r5,7
80006602:	6e 75       	ld.w	r5,r7[0x1c]
80006604:	73 65       	ld.w	r5,r9[0x58]
80006606:	64 20       	ld.w	r0,r2[0x8]
80006608:	63 68       	ld.w	r8,r1[0x58]
8000660a:	61 6e       	ld.w	lr,r0[0x58]
8000660c:	6e 65       	ld.w	r5,r7[0x18]
8000660e:	6c 73       	ld.w	r3,r6[0x1c]
80006610:	3a 20       	mov	r0,-94
80006612:	50 43       	stdsp	sp[0x10],r3
80006614:	41 39       	lddsp	r9,sp[0x4c]
80006616:	39 35       	mov	r5,-109
80006618:	32 20       	mov	r0,34
8000661a:	2d 20       	sub	r0,-46
8000661c:	43 6f       	lddsp	pc,sp[0xd8]
8000661e:	6e 74       	ld.w	r4,r7[0x1c]
80006620:	72 6f       	ld.w	pc,r9[0x18]
80006622:	6c 6c       	ld.w	r12,r6[0x18]
80006624:	65 72       	ld.w	r2,r2[0x5c]
80006626:	20 62       	sub	r2,6
80006628:	6f 61       	ld.w	r1,r7[0x58]
8000662a:	72 64       	ld.w	r4,r9[0x18]
8000662c:	20 55       	sub	r5,5
8000662e:	38 0d       	mov	sp,-128
80006630:	0a 00       	add	r0,r5
80006632:	00 00       	add	r0,r0
80006634:	53 68       	stdsp	sp[0xd8],r8
80006636:	65 6c       	ld.w	r12,r2[0x58]
80006638:	66 20       	ld.w	r0,r3[0x8]
8000663a:	30 20       	mov	r0,2
8000663c:	61 63       	ld.w	r3,r0[0x58]
8000663e:	74 69       	ld.w	r9,r10[0x18]
80006640:	76 65       	ld.w	r5,r11[0x18]
80006642:	0d 0a       	ld.w	r10,r6++
80006644:	00 00       	add	r0,r0
80006646:	00 00       	add	r0,r0
80006648:	53 68       	stdsp	sp[0xd8],r8
8000664a:	65 6c       	ld.w	r12,r2[0x58]
8000664c:	66 20       	ld.w	r0,r3[0x8]
8000664e:	31 20       	mov	r0,18
80006650:	61 63       	ld.w	r3,r0[0x58]
80006652:	74 69       	ld.w	r9,r10[0x18]
80006654:	76 65       	ld.w	r5,r11[0x18]
80006656:	0d 0a       	ld.w	r10,r6++
80006658:	00 00       	add	r0,r0
8000665a:	00 00       	add	r0,r0
8000665c:	53 68       	stdsp	sp[0xd8],r8
8000665e:	65 6c       	ld.w	r12,r2[0x58]
80006660:	66 20       	ld.w	r0,r3[0x8]
80006662:	32 20       	mov	r0,34
80006664:	61 63       	ld.w	r3,r0[0x58]
80006666:	74 69       	ld.w	r9,r10[0x18]
80006668:	76 65       	ld.w	r5,r11[0x18]
8000666a:	0d 0a       	ld.w	r10,r6++
8000666c:	00 00       	add	r0,r0
8000666e:	00 00       	add	r0,r0
80006670:	53 68       	stdsp	sp[0xd8],r8
80006672:	65 6c       	ld.w	r12,r2[0x58]
80006674:	66 20       	ld.w	r0,r3[0x8]
80006676:	33 20       	mov	r0,50
80006678:	61 63       	ld.w	r3,r0[0x58]
8000667a:	74 69       	ld.w	r9,r10[0x18]
8000667c:	76 65       	ld.w	r5,r11[0x18]
8000667e:	0d 0a       	ld.w	r10,r6++
80006680:	00 00       	add	r0,r0
80006682:	00 00       	add	r0,r0
80006684:	44 6f       	lddsp	pc,sp[0x118]
80006686:	6f 72       	ld.w	r2,r7[0x5c]
80006688:	20 6c       	sub	r12,6
8000668a:	61 74       	ld.w	r4,r0[0x5c]
8000668c:	63 68       	ld.w	r8,r1[0x58]
8000668e:	20 6f       	sub	pc,6
80006690:	70 65       	ld.w	r5,r8[0x18]
80006692:	6e 65       	ld.w	r5,r7[0x18]
80006694:	64 2c       	ld.w	r12,r2[0x8]
80006696:	20 6b       	sub	r11,6
80006698:	69 6c       	ld.w	r12,r4[0x58]
8000669a:	6c 20       	ld.w	r0,r6[0x8]
8000669c:	61 6c       	ld.w	r12,r0[0x58]
8000669e:	6c 20       	ld.w	r0,r6[0x8]
800066a0:	73 68       	ld.w	r8,r9[0x58]
800066a2:	65 6c       	ld.w	r12,r2[0x58]
800066a4:	76 65       	ld.w	r5,r11[0x18]
800066a6:	73 20       	ld.w	r0,r9[0x48]
800066a8:	66 6f       	ld.w	pc,r3[0x18]
800066aa:	72 20       	ld.w	r0,r9[0x8]
800066ac:	73 61       	ld.w	r1,r9[0x58]
800066ae:	66 65       	ld.w	r5,r3[0x18]
800066b0:	74 79       	ld.w	r9,r10[0x1c]
800066b2:	2e 0d       	sub	sp,-128
800066b4:	0a 00       	add	r0,r5
800066b6:	00 00       	add	r0,r0
800066b8:	65 76       	ld.w	r6,r2[0x5c]
800066ba:	61 6c       	ld.w	r12,r0[0x58]
800066bc:	5f 72       	srpl	r2
800066be:	65 67       	ld.w	r7,r2[0x58]
800066c0:	69 6f       	ld.w	pc,r4[0x58]
800066c2:	6e 28       	ld.w	r8,r7[0x8]
800066c4:	29 20       	sub	r0,-110
800066c6:	00 00       	add	r0,r0
800066c8:	72 65       	ld.w	r5,r9[0x18]
800066ca:	67 69       	ld.w	r9,r3[0x58]
800066cc:	6f 6e       	ld.w	lr,r7[0x58]
800066ce:	20 30       	sub	r0,3
800066d0:	20 2d       	sub	sp,8
800066d2:	20 73       	sub	r3,7
800066d4:	65 72       	ld.w	r2,r2[0x5c]
800066d6:	69 61       	ld.w	r1,r4[0x58]
800066d8:	6c 20       	ld.w	r0,r6[0x8]
800066da:	49 44       	lddpc	r4,80006728 <led_shelf+0x3dc>
800066dc:	20 61       	sub	r1,6
800066de:	6e 64       	ld.w	r4,r7[0x18]
800066e0:	20 66       	sub	r6,6
800066e2:	6c 61       	ld.w	r1,r6[0x18]
800066e4:	67 73       	ld.w	r3,r3[0x5c]
800066e6:	0d 0a       	ld.w	r10,r6++
800066e8:	00 00       	add	r0,r0
800066ea:	00 00       	add	r0,r0
800066ec:	67 6f       	ld.w	pc,r3[0x58]
800066ee:	6f 64       	ld.w	r4,r7[0x58]
800066f0:	20 63       	sub	r3,6
800066f2:	73 75       	ld.w	r5,r9[0x5c]
800066f4:	6d 0d       	ld.w	sp,r6[0x40]
800066f6:	0a 00       	add	r0,r5
800066f8:	73 66       	ld.w	r6,r9[0x58]
800066fa:	46 6c       	lddsp	r12,sp[0x198]
800066fc:	61 73       	ld.w	r3,r0[0x5c]
800066fe:	68 49       	ld.w	r9,r4[0x10]
80006700:	64 78       	ld.w	r8,r2[0x1c]
80006702:	20 00       	sub	r0,0
80006704:	72 65       	ld.w	r5,r9[0x18]
80006706:	67 69       	ld.w	r9,r3[0x58]
80006708:	6f 6e       	ld.w	lr,r7[0x58]
8000670a:	20 31       	sub	r1,3
8000670c:	20 2d       	sub	sp,8
8000670e:	20 73       	sub	r3,7
80006710:	61 6e       	ld.w	lr,r0[0x58]
80006712:	69 74       	ld.w	r4,r4[0x5c]
80006714:	61 74       	ld.w	r4,r0[0x5c]
80006716:	69 6f       	ld.w	pc,r4[0x58]
80006718:	6e 20       	ld.w	r0,r7[0x8]
8000671a:	63 79       	ld.w	r9,r1[0x5c]
8000671c:	63 6c       	ld.w	r12,r1[0x58]
8000671e:	65 73       	ld.w	r3,r2[0x5c]
80006720:	0d 0a       	ld.w	r10,r6++
80006722:	00 00       	add	r0,r0
80006724:	73 61       	ld.w	r1,r9[0x58]
80006726:	6e 43       	ld.w	r3,r7[0x10]
80006728:	79 63       	ld.w	r3,r12[0x58]
8000672a:	6c 65       	ld.w	r5,r6[0x18]
8000672c:	46 6c       	lddsp	r12,sp[0x198]
8000672e:	61 73       	ld.w	r3,r0[0x5c]
80006730:	68 49       	ld.w	r9,r4[0x10]
80006732:	64 78       	ld.w	r8,r2[0x1c]
80006734:	20 00       	sub	r0,0
80006736:	00 00       	add	r0,r0
80006738:	72 65       	ld.w	r5,r9[0x18]
8000673a:	67 69       	ld.w	r9,r3[0x58]
8000673c:	6f 6e       	ld.w	lr,r7[0x58]
8000673e:	20 32       	sub	r2,3
80006740:	20 2d       	sub	sp,8
80006742:	20 75       	sub	r5,7
80006744:	73 61       	ld.w	r1,r9[0x58]
80006746:	67 65       	ld.w	r5,r3[0x58]
80006748:	20 68       	sub	r8,6
8000674a:	6f 75       	ld.w	r5,r7[0x5c]
8000674c:	72 73       	ld.w	r3,r9[0x1c]
8000674e:	0d 0a       	ld.w	r10,r6++
80006750:	00 00       	add	r0,r0
80006752:	00 00       	add	r0,r0
80006754:	68 46       	ld.w	r6,r4[0x10]
80006756:	6c 61       	ld.w	r1,r6[0x18]
80006758:	73 68       	ld.w	r8,r9[0x58]
8000675a:	49 64       	lddpc	r4,800067b0 <led_shelf+0x464>
8000675c:	78 20       	ld.w	r0,r12[0x8]
8000675e:	00 00       	add	r0,r0
80006760:	72 65       	ld.w	r5,r9[0x18]
80006762:	67 69       	ld.w	r9,r3[0x58]
80006764:	6f 6e       	ld.w	lr,r7[0x58]
80006766:	20 33       	sub	r3,3
80006768:	20 2d       	sub	sp,8
8000676a:	20 75       	sub	r5,7
8000676c:	73 61       	ld.w	r1,r9[0x58]
8000676e:	67 65       	ld.w	r5,r3[0x58]
80006770:	20 6d       	sub	sp,24
80006772:	69 6e       	ld.w	lr,r4[0x58]
80006774:	75 74       	ld.w	r4,r10[0x5c]
80006776:	65 73       	ld.w	r3,r2[0x5c]
80006778:	0d 0a       	ld.w	r10,r6++
8000677a:	00 00       	add	r0,r0
8000677c:	6d 46       	ld.w	r6,r6[0x50]
8000677e:	6c 61       	ld.w	r1,r6[0x18]
80006780:	73 68       	ld.w	r8,r9[0x58]
80006782:	49 64       	lddpc	r4,800067d8 <led_shelf+0x48c>
80006784:	78 20       	ld.w	r0,r12[0x8]
80006786:	00 00       	add	r0,r0
80006788:	72 65       	ld.w	r5,r9[0x18]
8000678a:	67 69       	ld.w	r9,r3[0x58]
8000678c:	6f 6e       	ld.w	lr,r7[0x58]
8000678e:	20 34       	sub	r4,3
80006790:	20 2d       	sub	sp,8
80006792:	20 63       	sub	r3,6
80006794:	6f 6e       	ld.w	lr,r7[0x58]
80006796:	66 69       	ld.w	r9,r3[0x18]
80006798:	67 75       	ld.w	r5,r3[0x5c]
8000679a:	72 61       	ld.w	r1,r9[0x18]
8000679c:	74 69       	ld.w	r9,r10[0x18]
8000679e:	6f 6e       	ld.w	lr,r7[0x58]
800067a0:	0d 0a       	ld.w	r10,r6++
800067a2:	00 00       	add	r0,r0
800067a4:	63 6f       	ld.w	pc,r1[0x58]
800067a6:	6e 66       	ld.w	r6,r7[0x18]
800067a8:	69 67       	ld.w	r7,r4[0x58]
800067aa:	46 6c       	lddsp	r12,sp[0x198]
800067ac:	61 73       	ld.w	r3,r0[0x5c]
800067ae:	68 49       	ld.w	r9,r4[0x10]
800067b0:	64 78       	ld.w	r8,r2[0x1c]
800067b2:	20 00       	sub	r0,0
800067b4:	4e 6f       	lddpc	pc,8000694c <led_shelf+0x600>
800067b6:	20 6d       	sub	sp,24
800067b8:	6f 72       	ld.w	r2,r7[0x5c]
800067ba:	65 20       	ld.w	r0,r2[0x48]
800067bc:	72 6f       	ld.w	pc,r9[0x18]
800067be:	6f 6d       	ld.w	sp,r7[0x58]
800067c0:	20 66       	sub	r6,6
800067c2:	6f 72       	ld.w	r2,r7[0x5c]
800067c4:	20 4c       	sub	r12,4
800067c6:	45 44       	lddsp	r4,sp[0x150]
800067c8:	20 62       	sub	r2,6
800067ca:	6f 61       	ld.w	r1,r7[0x58]
800067cc:	72 64       	ld.w	r4,r9[0x18]
800067ce:	20 69       	sub	r9,6
800067d0:	6e 66       	ld.w	r6,r7[0x18]
800067d2:	6f 2e       	ld.w	lr,r7[0x48]
800067d4:	20 43       	sub	r3,4
800067d6:	61 6e       	ld.w	lr,r0[0x58]
800067d8:	6e 6f       	ld.w	pc,r7[0x18]
800067da:	74 20       	ld.w	r0,r10[0x8]
800067dc:	74 72       	ld.w	r2,r10[0x1c]
800067de:	61 63       	ld.w	r3,r0[0x58]
800067e0:	6b 20       	ld.w	r0,r5[0x48]
800067e2:	6d 69       	ld.w	r9,r6[0x58]
800067e4:	6e 75       	ld.w	r5,r7[0x1c]
800067e6:	74 65       	ld.w	r5,r10[0x18]
800067e8:	20 75       	sub	r5,7
800067ea:	73 61       	ld.w	r1,r9[0x58]
800067ec:	67 65       	ld.w	r5,r3[0x58]
800067ee:	20 66       	sub	r6,6
800067f0:	6f 72       	ld.w	r2,r7[0x5c]
800067f2:	20 61       	sub	r1,6
800067f4:	64 64       	ld.w	r4,r2[0x18]
800067f6:	69 74       	ld.w	r4,r4[0x5c]
800067f8:	69 6f       	ld.w	pc,r4[0x58]
800067fa:	6e 61       	ld.w	r1,r7[0x18]
800067fc:	6c 20       	ld.w	r0,r6[0x8]
800067fe:	62 6f       	ld.w	pc,r1[0x18]
80006800:	61 72       	ld.w	r2,r0[0x5c]
80006802:	64 73       	ld.w	r3,r2[0x1c]
80006804:	2e 0d       	sub	sp,-128
80006806:	0a 00       	add	r0,r5
80006808:	41 6c       	lddsp	r12,sp[0x58]
8000680a:	6c 20       	ld.w	r0,r6[0x8]
8000680c:	35 20       	mov	r0,82
8000680e:	66 6c       	ld.w	r12,r3[0x18]
80006810:	61 73       	ld.w	r3,r0[0x5c]
80006812:	68 20       	ld.w	r0,r4[0x8]
80006814:	72 65       	ld.w	r5,r9[0x18]
80006816:	67 69       	ld.w	r9,r3[0x58]
80006818:	6f 6e       	ld.w	lr,r7[0x58]
8000681a:	73 20       	ld.w	r0,r9[0x48]
8000681c:	68 61       	ld.w	r1,r4[0x18]
8000681e:	76 65       	ld.w	r5,r11[0x18]
80006820:	20 67       	sub	r7,6
80006822:	6f 6f       	ld.w	pc,r7[0x58]
80006824:	64 20       	ld.w	r0,r2[0x8]
80006826:	64 61       	ld.w	r1,r2[0x18]
80006828:	74 61       	ld.w	r1,r10[0x18]
8000682a:	20 73       	sub	r3,7
8000682c:	65 74       	ld.w	r4,r2[0x5c]
8000682e:	73 2e       	ld.w	lr,r9[0x48]
80006830:	0d 0a       	ld.w	r10,r6++
80006832:	00 00       	add	r0,r0
80006834:	46 6c       	lddsp	r12,sp[0x198]
80006836:	61 73       	ld.w	r3,r0[0x5c]
80006838:	68 20       	ld.w	r0,r4[0x8]
8000683a:	61 72       	ld.w	r2,r0[0x5c]
8000683c:	65 61       	ld.w	r1,r2[0x58]
8000683e:	20 45       	sub	r5,4
80006840:	52 52       	stdsp	sp[0x94],r2
80006842:	4f 52       	lddpc	r2,80006a14 <led_shelf+0x6c8>
80006844:	3a 20       	mov	r0,-94
80006846:	72 65       	ld.w	r5,r9[0x18]
80006848:	67 69       	ld.w	r9,r3[0x58]
8000684a:	6f 6e       	ld.w	lr,r7[0x58]
8000684c:	20 00       	sub	r0,0
8000684e:	00 00       	add	r0,r0
80006850:	0d 0a       	ld.w	r10,r6++
80006852:	45 4c       	lddsp	r12,sp[0x150]
80006854:	45 43       	lddsp	r3,sp[0x150]
80006856:	54 52       	stdsp	sp[0x114],r2
80006858:	4f 43       	lddpc	r3,80006a28 <led_shelf+0x6dc>
8000685a:	4c 41       	lddpc	r1,80006968 <led_shelf+0x61c>
8000685c:	56 45       	stdsp	sp[0x190],r5
8000685e:	0d 0a       	ld.w	r10,r6++
80006860:	43 6f       	lddsp	pc,sp[0xd8]
80006862:	70 79       	ld.w	r9,r8[0x1c]
80006864:	72 69       	ld.w	r9,r9[0x18]
80006866:	67 68       	ld.w	r8,r3[0x58]
80006868:	74 20       	ld.w	r0,r10[0x8]
8000686a:	28 63       	sub	r3,-122
8000686c:	29 20       	sub	r0,-110
8000686e:	32 30       	mov	r0,35
80006870:	31 35       	mov	r5,19
80006872:	20 53       	sub	r3,5
80006874:	65 61       	ld.w	r1,r2[0x58]
80006876:	6c 20       	ld.w	r0,r6[0x8]
80006878:	53 68       	stdsp	sp[0xd8],r8
8000687a:	69 65       	ld.w	r5,r4[0x58]
8000687c:	6c 64       	ld.w	r4,r6[0x18]
8000687e:	2c 20       	sub	r0,-62
80006880:	49 6e       	lddpc	lr,800068d8 <led_shelf+0x58c>
80006882:	63 2e       	ld.w	lr,r1[0x48]
80006884:	0d 0a       	ld.w	r10,r6++
80006886:	00 00       	add	r0,r0
80006888:	48 61       	lddpc	r1,800068a0 <led_shelf+0x554>
8000688a:	72 64       	ld.w	r4,r9[0x18]
8000688c:	77 61       	ld.w	r1,r11[0x58]
8000688e:	72 65       	ld.w	r5,r9[0x18]
80006890:	20 56       	sub	r6,5
80006892:	65 72       	ld.w	r2,r2[0x5c]
80006894:	73 69       	ld.w	r9,r9[0x58]
80006896:	6f 6e       	ld.w	lr,r7[0x58]
80006898:	3a 20       	mov	r0,-94
8000689a:	43 6c       	lddsp	r12,sp[0xd8]
8000689c:	61 73       	ld.w	r3,r0[0x5c]
8000689e:	73 69       	ld.w	r9,r9[0x58]
800068a0:	63 20       	ld.w	r0,r1[0x48]
800068a2:	2b 2b       	sub	r11,-78
800068a4:	2b 20       	sub	r0,-78
800068a6:	53 6f       	stdsp	sp[0xd8],pc
800068a8:	66 74       	ld.w	r4,r3[0x1c]
800068aa:	77 61       	ld.w	r1,r11[0x58]
800068ac:	72 65       	ld.w	r5,r9[0x18]
800068ae:	20 56       	sub	r6,5
800068b0:	65 72       	ld.w	r2,r2[0x5c]
800068b2:	73 69       	ld.w	r9,r9[0x58]
800068b4:	6f 6e       	ld.w	lr,r7[0x58]
800068b6:	3a 20       	mov	r0,-94
800068b8:	30 2e       	mov	lr,2
800068ba:	30 33       	mov	r3,3
800068bc:	38 0d       	mov	sp,-128
800068be:	0a 00       	add	r0,r5
800068c0:	0d 0a       	ld.w	r10,r6++
800068c2:	2a 2a       	sub	r10,-94
800068c4:	2a 49       	sub	r9,-92
800068c6:	4e 53       	lddpc	r3,80006a58 <led_shelf+0x70c>
800068c8:	54 41       	stdsp	sp[0x110],r1
800068ca:	4c 4c       	lddpc	r12,800069d8 <led_shelf+0x68c>
800068cc:	45 44       	lddsp	r4,sp[0x150]
800068ce:	20 4c       	sub	r12,4
800068d0:	45 44       	lddsp	r4,sp[0x150]
800068d2:	20 42       	sub	r2,4
800068d4:	4f 41       	lddpc	r1,80006aa4 <led_shelf+0x758>
800068d6:	52 44       	stdsp	sp[0x90],r4
800068d8:	53 2a       	stdsp	sp[0xc8],r10
800068da:	2a 2a       	sub	r10,-94
800068dc:	0d 0a       	ld.w	r10,r6++
800068de:	0d 0a       	ld.w	r10,r6++
800068e0:	00 00       	add	r0,r0
800068e2:	00 00       	add	r0,r0
800068e4:	20 4c       	sub	r12,4
800068e6:	45 44       	lddsp	r4,sp[0x150]
800068e8:	20 7c       	sub	r12,7
800068ea:	20 4c       	sub	r12,4
800068ec:	45 44       	lddsp	r4,sp[0x150]
800068ee:	20 42       	sub	r2,4
800068f0:	4f 41       	lddpc	r1,80006ac0 <led_shelf+0x774>
800068f2:	52 44       	stdsp	sp[0x90],r4
800068f4:	20 20       	sub	r0,2
800068f6:	20 20       	sub	r0,2
800068f8:	7c 20       	ld.w	r0,lr[0x8]
800068fa:	20 20       	sub	r0,2
800068fc:	55 50       	stdsp	sp[0x154],r0
800068fe:	50 45       	stdsp	sp[0x10],r5
80006900:	52 20       	stdsp	sp[0x88],r0
80006902:	53 49       	stdsp	sp[0xd0],r9
80006904:	44 45       	lddsp	r5,sp[0x110]
80006906:	20 20       	sub	r0,2
80006908:	20 20       	sub	r0,2
8000690a:	20 7c       	sub	r12,7
8000690c:	20 20       	sub	r0,2
8000690e:	20 4c       	sub	r12,4
80006910:	4f 57       	lddpc	r7,80006ae4 <led_shelf+0x798>
80006912:	45 52       	lddsp	r2,sp[0x154]
80006914:	20 53       	sub	r3,5
80006916:	49 44       	lddpc	r4,80006964 <led_shelf+0x618>
80006918:	45 20       	lddsp	r0,sp[0x148]
8000691a:	20 20       	sub	r0,2
8000691c:	20 0d       	sub	sp,0
8000691e:	0a 00       	add	r0,r5
80006920:	53 4c       	stdsp	sp[0xd0],r12
80006922:	4f 54       	lddpc	r4,80006af4 <led_shelf+0x7a8>
80006924:	20 7c       	sub	r12,7
80006926:	20 20       	sub	r0,2
80006928:	20 20       	sub	r0,2
8000692a:	49 44       	lddpc	r4,80006978 <led_shelf+0x62c>
8000692c:	20 20       	sub	r0,2
8000692e:	20 20       	sub	r0,2
80006930:	20 20       	sub	r0,2
80006932:	20 20       	sub	r0,2
80006934:	7c 20       	ld.w	r0,lr[0x8]
80006936:	48 52       	lddpc	r2,80006948 <led_shelf+0x5fc>
80006938:	53 3a       	stdsp	sp[0xcc],r10
8000693a:	4d 49       	lddpc	r9,80006a88 <led_shelf+0x73c>
8000693c:	4e 20       	lddpc	r0,80006ac4 <led_shelf+0x778>
8000693e:	20 20       	sub	r0,2
80006940:	20 44       	sub	r4,4
80006942:	54 45       	stdsp	sp[0x110],r5
80006944:	20 20       	sub	r0,2
80006946:	20 7c       	sub	r12,7
80006948:	20 48       	sub	r8,4
8000694a:	52 53       	stdsp	sp[0x94],r3
8000694c:	3a 4d       	mov	sp,-92
8000694e:	49 4e       	lddpc	lr,8000699c <led_shelf+0x650>
80006950:	20 20       	sub	r0,2
80006952:	20 20       	sub	r0,2
80006954:	44 54       	lddsp	r4,sp[0x114]
80006956:	45 20       	lddsp	r0,sp[0x148]
80006958:	20 20       	sub	r0,2
8000695a:	0d 0a       	ld.w	r10,r6++
8000695c:	00 00       	add	r0,r0
8000695e:	00 00       	add	r0,r0
80006960:	2d 2d       	sub	sp,-184
80006962:	2d 2d       	sub	sp,-184
80006964:	2d 2d       	sub	sp,-184
80006966:	2d 2d       	sub	sp,-184
80006968:	2d 2d       	sub	sp,-184
8000696a:	2d 2d       	sub	sp,-184
8000696c:	2d 2d       	sub	sp,-184
8000696e:	2d 2d       	sub	sp,-184
80006970:	2d 2d       	sub	sp,-184
80006972:	2d 2d       	sub	sp,-184
80006974:	2d 2d       	sub	sp,-184
80006976:	2d 2d       	sub	sp,-184
80006978:	2d 2d       	sub	sp,-184
8000697a:	2d 2d       	sub	sp,-184
8000697c:	2d 2d       	sub	sp,-184
8000697e:	2d 2d       	sub	sp,-184
80006980:	2d 2d       	sub	sp,-184
80006982:	2d 2d       	sub	sp,-184
80006984:	2d 2d       	sub	sp,-184
80006986:	2d 2d       	sub	sp,-184
80006988:	2d 2d       	sub	sp,-184
8000698a:	2d 2d       	sub	sp,-184
8000698c:	2d 2d       	sub	sp,-184
8000698e:	2d 2d       	sub	sp,-184
80006990:	2d 2d       	sub	sp,-184
80006992:	2d 2d       	sub	sp,-184
80006994:	2d 2d       	sub	sp,-184
80006996:	2d 2d       	sub	sp,-184
80006998:	2d 2d       	sub	sp,-184
8000699a:	0d 0a       	ld.w	r10,r6++
8000699c:	00 00       	add	r0,r0
8000699e:	00 00       	add	r0,r0
800069a0:	25 32       	sub	r2,83
800069a2:	64 20       	ld.w	r0,r2[0x8]
800069a4:	20 20       	sub	r0,2
800069a6:	20 20       	sub	r0,2
800069a8:	25 30       	sub	r0,83
800069aa:	32 58       	mov	r8,37
800069ac:	25 30       	sub	r0,83
800069ae:	32 58       	mov	r8,37
800069b0:	25 30       	sub	r0,83
800069b2:	32 58       	mov	r8,37
800069b4:	25 30       	sub	r0,83
800069b6:	32 58       	mov	r8,37
800069b8:	25 30       	sub	r0,83
800069ba:	32 58       	mov	r8,37
800069bc:	25 30       	sub	r0,83
800069be:	32 58       	mov	r8,37
800069c0:	20 20       	sub	r0,2
800069c2:	25 30       	sub	r0,83
800069c4:	34 64       	mov	r4,70
800069c6:	3a 25       	mov	r5,-94
800069c8:	30 32       	mov	r2,3
800069ca:	64 20       	ld.w	r0,r2[0x8]
800069cc:	20 20       	sub	r0,2
800069ce:	20 20       	sub	r0,2
800069d0:	25 30       	sub	r0,83
800069d2:	32 64       	mov	r4,38
800069d4:	20 20       	sub	r0,2
800069d6:	20 20       	sub	r0,2
800069d8:	20 25       	sub	r5,2
800069da:	30 34       	mov	r4,3
800069dc:	64 3a       	ld.w	r10,r2[0xc]
800069de:	25 30       	sub	r0,83
800069e0:	32 64       	mov	r4,38
800069e2:	20 20       	sub	r0,2
800069e4:	20 20       	sub	r0,2
800069e6:	20 25       	sub	r5,2
800069e8:	30 32       	mov	r2,3
800069ea:	64 0d       	ld.w	sp,r2[0x0]
800069ec:	0a 00       	add	r0,r5
800069ee:	00 00       	add	r0,r0
800069f0:	4d 41       	lddpc	r1,80006b40 <led_shelf+0x7f4>
800069f2:	58 20       	cp.w	r0,2
800069f4:	44 54       	lddsp	r4,sp[0x114]
800069f6:	45 3a       	lddsp	r10,sp[0x14c]
800069f8:	20 00       	sub	r0,0
800069fa:	00 00       	add	r0,r0
800069fc:	20 4d       	sub	sp,16
800069fe:	49 4e       	lddpc	lr,80006a4c <led_shelf+0x700>
80006a00:	20 44       	sub	r4,4
80006a02:	54 45       	stdsp	sp[0x110],r5
80006a04:	3a 20       	mov	r0,-94
80006a06:	00 00       	add	r0,r0
80006a08:	54 4f       	stdsp	sp[0x110],pc
80006a0a:	54 41       	stdsp	sp[0x110],r1
80006a0c:	4c 20       	lddpc	r0,80006b14 <led_shelf+0x7c8>
80006a0e:	53 41       	stdsp	sp[0xd0],r1
80006a10:	4e 49       	lddpc	r9,80006ba0 <led_shelf+0x854>
80006a12:	54 49       	stdsp	sp[0x110],r9
80006a14:	5a 45       	cp.w	r5,-28
80006a16:	20 54       	sub	r4,5
80006a18:	49 4d       	lddpc	sp,80006a68 <led_shelf+0x71c>
80006a1a:	45 3a       	lddsp	r10,sp[0x14c]
80006a1c:	20 00       	sub	r0,0
80006a1e:	00 00       	add	r0,r0
80006a20:	30 00       	mov	r0,0
80006a22:	00 00       	add	r0,r0
80006a24:	3a 00       	mov	r0,-96
80006a26:	00 00       	add	r0,r0
80006a28:	20 20       	sub	r0,2
80006a2a:	54 4f       	stdsp	sp[0x110],pc
80006a2c:	54 41       	stdsp	sp[0x110],r1
80006a2e:	4c 20       	lddpc	r0,80006b34 <led_shelf+0x7e8>
80006a30:	53 41       	stdsp	sp[0xd0],r1
80006a32:	4e 49       	lddpc	r9,80006bc0 <led_shelf+0x874>
80006a34:	54 49       	stdsp	sp[0x110],r9
80006a36:	5a 45       	cp.w	r5,-28
80006a38:	20 43       	sub	r3,4
80006a3a:	59 43       	cp.w	r3,20
80006a3c:	4c 45       	lddpc	r5,80006b4c <led_shelf+0x800>
80006a3e:	53 3a       	stdsp	sp[0xcc],r10
80006a40:	20 00       	sub	r0,0
80006a42:	00 00       	add	r0,r0
80006a44:	0d 0a       	ld.w	r10,r6++
80006a46:	2a 2a       	sub	r10,-94
80006a48:	2a 53       	sub	r3,-91
80006a4a:	59 53       	cp.w	r3,21
80006a4c:	54 45       	stdsp	sp[0x110],r5
80006a4e:	4d 20       	lddpc	r0,80006b94 <led_shelf+0x848>
80006a50:	54 45       	stdsp	sp[0x110],r5
80006a52:	53 54       	stdsp	sp[0xd4],r4
80006a54:	53 2a       	stdsp	sp[0xc8],r10
80006a56:	2a 2a       	sub	r10,-94
80006a58:	0d 0a       	ld.w	r10,r6++
80006a5a:	0d 0a       	ld.w	r10,r6++
80006a5c:	00 00       	add	r0,r0
80006a5e:	00 00       	add	r0,r0
80006a60:	4c 45       	lddpc	r5,80006b70 <led_shelf+0x824>
80006a62:	44 20       	lddsp	r0,sp[0x108]
80006a64:	44 72       	lddsp	r2,sp[0x11c]
80006a66:	69 76       	ld.w	r6,r4[0x5c]
80006a68:	65 72       	ld.w	r2,r2[0x5c]
80006a6a:	3a 20       	mov	r0,-94
80006a6c:	54 4f       	stdsp	sp[0x110],pc
80006a6e:	50 20       	stdsp	sp[0x8],r0
80006a70:	28 37       	sub	r7,-125
80006a72:	2e 2e       	sub	lr,-30
80006a74:	30 29       	mov	r9,2
80006a76:	20 20       	sub	r0,2
80006a78:	20 20       	sub	r0,2
80006a7a:	20 20       	sub	r0,2
80006a7c:	20 20       	sub	r0,2
80006a7e:	20 20       	sub	r0,2
80006a80:	20 20       	sub	r0,2
80006a82:	20 20       	sub	r0,2
80006a84:	20 20       	sub	r0,2
80006a86:	20 00       	sub	r0,0
80006a88:	46 20       	lddsp	r0,sp[0x188]
80006a8a:	00 00       	add	r0,r0
80006a8c:	50 20       	stdsp	sp[0x8],r0
80006a8e:	00 00       	add	r0,r0
80006a90:	4c 45       	lddpc	r5,80006ba0 <led_shelf+0x854>
80006a92:	44 20       	lddsp	r0,sp[0x108]
80006a94:	44 72       	lddsp	r2,sp[0x11c]
80006a96:	69 76       	ld.w	r6,r4[0x5c]
80006a98:	65 72       	ld.w	r2,r2[0x5c]
80006a9a:	3a 20       	mov	r0,-94
80006a9c:	42 4f       	lddsp	pc,sp[0x90]
80006a9e:	54 54       	stdsp	sp[0x114],r4
80006aa0:	4f 4d       	lddpc	sp,80006c70 <led_shelf+0x924>
80006aa2:	20 28       	sub	r8,2
80006aa4:	31 31       	mov	r1,19
80006aa6:	2e 2e       	sub	lr,-30
80006aa8:	30 29       	mov	r9,2
80006aaa:	20 20       	sub	r0,2
80006aac:	20 20       	sub	r0,2
80006aae:	20 20       	sub	r0,2
80006ab0:	20 20       	sub	r0,2
80006ab2:	20 20       	sub	r0,2
80006ab4:	20 20       	sub	r0,2
80006ab6:	20 00       	sub	r0,0
80006ab8:	46 6c       	lddsp	r12,sp[0x198]
80006aba:	61 73       	ld.w	r3,r0[0x5c]
80006abc:	68 20       	ld.w	r0,r4[0x8]
80006abe:	28 30       	sub	r0,-125
80006ac0:	2e 2e       	sub	lr,-30
80006ac2:	34 29       	mov	r9,66
80006ac4:	20 20       	sub	r0,2
80006ac6:	20 20       	sub	r0,2
80006ac8:	20 20       	sub	r0,2
80006aca:	20 20       	sub	r0,2
80006acc:	20 20       	sub	r0,2
80006ace:	20 20       	sub	r0,2
80006ad0:	20 20       	sub	r0,2
80006ad2:	20 20       	sub	r0,2
80006ad4:	20 20       	sub	r0,2
80006ad6:	20 20       	sub	r0,2
80006ad8:	20 20       	sub	r0,2
80006ada:	20 20       	sub	r0,2
80006adc:	20 20       	sub	r0,2
80006ade:	20 00       	sub	r0,0
80006ae0:	4c 45       	lddpc	r5,80006bf0 <led_shelf+0x8a4>
80006ae2:	44 20       	lddsp	r0,sp[0x108]
80006ae4:	42 6f       	lddsp	pc,sp[0x98]
80006ae6:	61 72       	ld.w	r2,r0[0x5c]
80006ae8:	64 20       	ld.w	r0,r2[0x8]
80006aea:	53 65       	stdsp	sp[0xd8],r5
80006aec:	72 69       	ld.w	r9,r9[0x18]
80006aee:	61 6c       	ld.w	r12,r0[0x58]
80006af0:	20 49       	sub	r9,4
80006af2:	44 20       	lddsp	r0,sp[0x108]
80006af4:	43 68       	lddsp	r8,sp[0xd8]
80006af6:	65 63       	ld.w	r3,r2[0x58]
80006af8:	6b 73       	ld.w	r3,r5[0x5c]
80006afa:	75 6d       	ld.w	sp,r10[0x58]
80006afc:	73 20       	ld.w	r0,r9[0x48]
80006afe:	28 30       	sub	r0,-125
80006b00:	2e 2e       	sub	lr,-30
80006b02:	34 29       	mov	r9,66
80006b04:	20 20       	sub	r0,2
80006b06:	20 00       	sub	r0,0
80006b08:	4c 45       	lddpc	r5,80006c18 <led_shelf+0x8cc>
80006b0a:	44 20       	lddsp	r0,sp[0x108]
80006b0c:	42 6f       	lddsp	pc,sp[0x98]
80006b0e:	61 72       	ld.w	r2,r0[0x5c]
80006b10:	64 20       	ld.w	r0,r2[0x8]
80006b12:	53 69       	stdsp	sp[0xd8],r9
80006b14:	64 65       	ld.w	r5,r2[0x18]
80006b16:	20 4d       	sub	sp,16
80006b18:	61 78       	ld.w	r8,r0[0x5c]
80006b1a:	20 55       	sub	r5,5
80006b1c:	73 61       	ld.w	r1,r9[0x58]
80006b1e:	67 65       	ld.w	r5,r3[0x58]
80006b20:	20 28       	sub	r8,2
80006b22:	30 2e       	mov	lr,2
80006b24:	2e 37       	sub	r7,-29
80006b26:	29 20       	sub	r0,-110
80006b28:	20 20       	sub	r0,2
80006b2a:	20 20       	sub	r0,2
80006b2c:	20 20       	sub	r0,2
80006b2e:	20 00       	sub	r0,0
80006b30:	55 73       	stdsp	sp[0x15c],r3
80006b32:	61 67       	ld.w	r7,r0[0x58]
80006b34:	65 20       	ld.w	r0,r2[0x48]
80006b36:	53 74       	stdsp	sp[0xdc],r4
80006b38:	72 75       	ld.w	r5,r9[0x1c]
80006b3a:	63 74       	ld.w	r4,r1[0x5c]
80006b3c:	20 4f       	sub	pc,4
80006b3e:	70 65       	ld.w	r5,r8[0x18]
80006b40:	6e 20       	ld.w	r0,r7[0x8]
80006b42:	53 6c       	stdsp	sp[0xd8],r12
80006b44:	6f 74       	ld.w	r4,r7[0x5c]
80006b46:	73 20       	ld.w	r0,r9[0x48]
80006b48:	20 20       	sub	r0,2
80006b4a:	20 20       	sub	r0,2
80006b4c:	20 20       	sub	r0,2
80006b4e:	20 20       	sub	r0,2
80006b50:	20 20       	sub	r0,2
80006b52:	20 20       	sub	r0,2
80006b54:	20 20       	sub	r0,2
80006b56:	20 00       	sub	r0,0
80006b58:	46 20       	lddsp	r0,sp[0x188]
80006b5a:	0d 0a       	ld.w	r10,r6++
80006b5c:	00 00       	add	r0,r0
80006b5e:	00 00       	add	r0,r0
80006b60:	50 20       	stdsp	sp[0x8],r0
80006b62:	0d 0a       	ld.w	r10,r6++
80006b64:	00 00       	add	r0,r0
80006b66:	00 00       	add	r0,r0
80006b68:	0d 0a       	ld.w	r10,r6++
80006b6a:	2a 2a       	sub	r10,-94
80006b6c:	2a 4c       	sub	r12,-92
80006b6e:	45 44       	lddsp	r4,sp[0x150]
80006b70:	20 42       	sub	r2,4
80006b72:	4f 41       	lddpc	r1,80006d40 <led_shelf+0x9f4>
80006b74:	52 44       	stdsp	sp[0x90],r4
80006b76:	53 20       	stdsp	sp[0xc8],r0
80006b78:	4d 41       	lddpc	r1,80006cc8 <led_shelf+0x97c>
80006b7a:	53 54       	stdsp	sp[0xd4],r4
80006b7c:	45 52       	lddsp	r2,sp[0x154]
80006b7e:	20 4c       	sub	r12,4
80006b80:	49 53       	lddpc	r3,80006bd4 <led_shelf+0x888>
80006b82:	54 2a       	stdsp	sp[0x108],r10
80006b84:	2a 2a       	sub	r10,-94
80006b86:	0d 0a       	ld.w	r10,r6++
80006b88:	0d 0a       	ld.w	r10,r6++
80006b8a:	00 00       	add	r0,r0
80006b8c:	25 32       	sub	r2,83
80006b8e:	64 29       	ld.w	r9,r2[0x8]
80006b90:	20 25       	sub	r5,2
80006b92:	30 32       	mov	r2,3
80006b94:	58 25       	cp.w	r5,2
80006b96:	30 32       	mov	r2,3
80006b98:	58 25       	cp.w	r5,2
80006b9a:	30 32       	mov	r2,3
80006b9c:	58 25       	cp.w	r5,2
80006b9e:	30 32       	mov	r2,3
80006ba0:	58 25       	cp.w	r5,2
80006ba2:	30 32       	mov	r2,3
80006ba4:	58 25       	cp.w	r5,2
80006ba6:	30 32       	mov	r2,3
80006ba8:	58 20       	cp.w	r0,2
80006baa:	00 00       	add	r0,r0
80006bac:	20 54       	sub	r4,5
80006bae:	4f 50       	lddpc	r0,80006d80 <led_shelf+0xa34>
80006bb0:	0d 0a       	ld.w	r10,r6++
80006bb2:	00 00       	add	r0,r0
80006bb4:	20 42       	sub	r2,4
80006bb6:	4f 54       	lddpc	r4,80006d88 <led_shelf+0xa3c>
80006bb8:	0d 0a       	ld.w	r10,r6++
80006bba:	00 00       	add	r0,r0
80006bbc:	0d 0a       	ld.w	r10,r6++
80006bbe:	0d 0a       	ld.w	r10,r6++
80006bc0:	00 00       	add	r0,r0
80006bc2:	00 00       	add	r0,r0
80006bc4:	54 79       	stdsp	sp[0x11c],r9
80006bc6:	70 65       	ld.w	r5,r8[0x18]
80006bc8:	20 27       	sub	r7,2
80006bca:	48 27       	lddpc	r7,80006bd0 <led_shelf+0x884>
80006bcc:	20 66       	sub	r6,6
80006bce:	6f 72       	ld.w	r2,r7[0x5c]
80006bd0:	20 68       	sub	r8,6
80006bd2:	65 6c       	ld.w	r12,r2[0x58]
80006bd4:	70 2e       	ld.w	lr,r8[0x8]
80006bd6:	0d 0a       	ld.w	r10,r6++
80006bd8:	0d 0a       	ld.w	r10,r6++
80006bda:	00 00       	add	r0,r0
80006bdc:	0d 0a       	ld.w	r10,r6++
80006bde:	2a 2a       	sub	r10,-94
80006be0:	2d 2d       	sub	sp,-184
80006be2:	2d 2d       	sub	sp,-184
80006be4:	2d 2d       	sub	sp,-184
80006be6:	2d 2d       	sub	sp,-184
80006be8:	2d 2d       	sub	sp,-184
80006bea:	2d 2d       	sub	sp,-184
80006bec:	2d 2d       	sub	sp,-184
80006bee:	2d 2d       	sub	sp,-184
80006bf0:	2d 2a       	sub	r10,-46
80006bf2:	2a 0d       	sub	sp,-384
80006bf4:	0a 00       	add	r0,r5
80006bf6:	00 00       	add	r0,r0
80006bf8:	20 20       	sub	r0,2
80006bfa:	45 6c       	lddsp	r12,sp[0x158]
80006bfc:	65 63       	ld.w	r3,r2[0x58]
80006bfe:	74 72       	ld.w	r2,r10[0x1c]
80006c00:	6f 63       	ld.w	r3,r7[0x58]
80006c02:	6c 61       	ld.w	r1,r6[0x18]
80006c04:	76 65       	ld.w	r5,r11[0x18]
80006c06:	20 48       	sub	r8,4
80006c08:	45 4c       	lddsp	r12,sp[0x150]
80006c0a:	50 0d       	stdsp	sp[0x0],sp
80006c0c:	0a 00       	add	r0,r5
80006c0e:	00 00       	add	r0,r0
80006c10:	2a 2a       	sub	r10,-94
80006c12:	2d 2d       	sub	sp,-184
80006c14:	2d 2d       	sub	sp,-184
80006c16:	2d 2d       	sub	sp,-184
80006c18:	2d 2d       	sub	sp,-184
80006c1a:	2d 2d       	sub	sp,-184
80006c1c:	2d 2d       	sub	sp,-184
80006c1e:	2d 2d       	sub	sp,-184
80006c20:	2d 2d       	sub	sp,-184
80006c22:	2d 2a       	sub	r10,-46
80006c24:	2a 0d       	sub	sp,-384
80006c26:	0a 00       	add	r0,r5
80006c28:	20 20       	sub	r0,2
80006c2a:	20 20       	sub	r0,2
80006c2c:	48 20       	lddpc	r0,80006c34 <led_shelf+0x8e8>
80006c2e:	20 20       	sub	r0,2
80006c30:	20 20       	sub	r0,2
80006c32:	20 20       	sub	r0,2
80006c34:	20 2d       	sub	sp,8
80006c36:	20 54       	sub	r4,5
80006c38:	68 69       	ld.w	r9,r4[0x18]
80006c3a:	73 20       	ld.w	r0,r9[0x48]
80006c3c:	68 65       	ld.w	r5,r4[0x18]
80006c3e:	6c 70       	ld.w	r0,r6[0x1c]
80006c40:	20 6d       	sub	sp,24
80006c42:	65 6e       	ld.w	lr,r2[0x58]
80006c44:	75 0d       	ld.w	sp,r10[0x40]
80006c46:	0a 00       	add	r0,r5
80006c48:	20 20       	sub	r0,2
80006c4a:	20 20       	sub	r0,2
80006c4c:	44 20       	lddsp	r0,sp[0x108]
80006c4e:	20 20       	sub	r0,2
80006c50:	20 20       	sub	r0,2
80006c52:	20 20       	sub	r0,2
80006c54:	20 2d       	sub	sp,8
80006c56:	20 53       	sub	r3,5
80006c58:	68 6f       	ld.w	pc,r4[0x18]
80006c5a:	77 20       	ld.w	r0,r11[0x48]
80006c5c:	63 75       	ld.w	r5,r1[0x5c]
80006c5e:	72 72       	ld.w	r2,r9[0x1c]
80006c60:	65 6e       	ld.w	lr,r2[0x58]
80006c62:	74 20       	ld.w	r0,r10[0x8]
80006c64:	44 54       	lddsp	r4,sp[0x114]
80006c66:	45 20       	lddsp	r0,sp[0x148]
80006c68:	73 65       	ld.w	r5,r9[0x58]
80006c6a:	74 74       	ld.w	r4,r10[0x1c]
80006c6c:	69 6e       	ld.w	lr,r4[0x58]
80006c6e:	67 0d       	ld.w	sp,r3[0x40]
80006c70:	0a 00       	add	r0,r5
80006c72:	00 00       	add	r0,r0
80006c74:	20 20       	sub	r0,2
80006c76:	20 20       	sub	r0,2
80006c78:	44 20       	lddsp	r0,sp[0x108]
80006c7a:	20 78       	sub	r8,7
80006c7c:	78 20       	ld.w	r0,r12[0x8]
80006c7e:	20 20       	sub	r0,2
80006c80:	20 2d       	sub	sp,8
80006c82:	20 43       	sub	r3,4
80006c84:	68 61       	ld.w	r1,r4[0x18]
80006c86:	6e 67       	ld.w	r7,r7[0x18]
80006c88:	65 20       	ld.w	r0,r2[0x48]
80006c8a:	69 6e       	ld.w	lr,r4[0x58]
80006c8c:	69 74       	ld.w	r4,r4[0x5c]
80006c8e:	69 61       	ld.w	r1,r4[0x58]
80006c90:	6c 20       	ld.w	r0,r6[0x8]
80006c92:	44 54       	lddsp	r4,sp[0x114]
80006c94:	45 20       	lddsp	r0,sp[0x148]
80006c96:	74 6f       	ld.w	pc,r10[0x18]
80006c98:	20 78       	sub	r8,7
80006c9a:	78 20       	ld.w	r0,r12[0x8]
80006c9c:	6d 69       	ld.w	r9,r6[0x58]
80006c9e:	6e 75       	ld.w	r5,r7[0x1c]
80006ca0:	74 65       	ld.w	r5,r10[0x18]
80006ca2:	73 20       	ld.w	r0,r9[0x48]
80006ca4:	77 68       	ld.w	r8,r11[0x58]
80006ca6:	65 72       	ld.w	r2,r2[0x5c]
80006ca8:	65 20       	ld.w	r0,r2[0x48]
80006caa:	32 20       	mov	r0,34
80006cac:	3e 3d       	mov	sp,-29
80006cae:	20 78       	sub	r8,7
80006cb0:	78 20       	ld.w	r0,r12[0x8]
80006cb2:	3e 3d       	mov	sp,-29
80006cb4:	20 35       	sub	r5,3
80006cb6:	39 2e       	mov	lr,-110
80006cb8:	0d 0a       	ld.w	r10,r6++
80006cba:	00 00       	add	r0,r0
80006cbc:	20 20       	sub	r0,2
80006cbe:	20 20       	sub	r0,2
80006cc0:	53 20       	stdsp	sp[0xc8],r0
80006cc2:	20 20       	sub	r0,2
80006cc4:	20 20       	sub	r0,2
80006cc6:	20 20       	sub	r0,2
80006cc8:	20 2d       	sub	sp,8
80006cca:	20 53       	sub	r3,5
80006ccc:	79 73       	ld.w	r3,r12[0x5c]
80006cce:	74 65       	ld.w	r5,r10[0x18]
80006cd0:	6d 20       	ld.w	r0,r6[0x48]
80006cd2:	73 74       	ld.w	r4,r9[0x5c]
80006cd4:	61 74       	ld.w	r4,r0[0x5c]
80006cd6:	75 73       	ld.w	r3,r10[0x5c]
80006cd8:	0d 0a       	ld.w	r10,r6++
80006cda:	00 00       	add	r0,r0
80006cdc:	3e 00       	mov	r0,-32
80006cde:	00 00       	add	r0,r0
80006ce0:	49 6e       	lddpc	lr,80006d38 <led_shelf+0x9ec>
80006ce2:	69 74       	ld.w	r4,r4[0x5c]
80006ce4:	69 61       	ld.w	r1,r4[0x58]
80006ce6:	6c 20       	ld.w	r0,r6[0x8]
80006ce8:	44 54       	lddsp	r4,sp[0x114]
80006cea:	45 20       	lddsp	r0,sp[0x148]
80006cec:	73 65       	ld.w	r5,r9[0x58]
80006cee:	74 20       	ld.w	r0,r10[0x8]
80006cf0:	74 6f       	ld.w	pc,r10[0x18]
80006cf2:	3a 20       	mov	r0,-94
80006cf4:	00 00       	add	r0,r0
80006cf6:	00 00       	add	r0,r0
80006cf8:	20 6d       	sub	sp,24
80006cfa:	69 6e       	ld.w	lr,r4[0x58]
80006cfc:	75 74       	ld.w	r4,r10[0x5c]
80006cfe:	65 73       	ld.w	r3,r2[0x5c]
80006d00:	2e 0d       	sub	sp,-128
80006d02:	0a 3e       	cp.w	lr,r5
80006d04:	00 00       	add	r0,r0
80006d06:	00 00       	add	r0,r0
80006d08:	49 6e       	lddpc	lr,80006d60 <led_shelf+0xa14>
80006d0a:	69 74       	ld.w	r4,r4[0x5c]
80006d0c:	69 61       	ld.w	r1,r4[0x58]
80006d0e:	6c 20       	ld.w	r0,r6[0x8]
80006d10:	44 54       	lddsp	r4,sp[0x114]
80006d12:	45 20       	lddsp	r0,sp[0x148]
80006d14:	6e 6f       	ld.w	pc,r7[0x18]
80006d16:	77 20       	ld.w	r0,r11[0x48]
80006d18:	73 65       	ld.w	r5,r9[0x58]
80006d1a:	74 20       	ld.w	r0,r10[0x8]
80006d1c:	74 6f       	ld.w	pc,r10[0x18]
80006d1e:	3a 20       	mov	r0,-94
80006d20:	00 00       	add	r0,r0
80006d22:	00 00       	add	r0,r0
80006d24:	0d 0a       	ld.w	r10,r6++
80006d26:	3e 00       	mov	r0,-32
80006d28:	45 72       	lddsp	r2,sp[0x15c]
80006d2a:	72 6f       	ld.w	pc,r9[0x18]
80006d2c:	72 2e       	ld.w	lr,r9[0x8]
80006d2e:	20 49       	sub	r9,4
80006d30:	6e 69       	ld.w	r9,r7[0x18]
80006d32:	74 69       	ld.w	r9,r10[0x18]
80006d34:	61 6c       	ld.w	r12,r0[0x58]
80006d36:	20 44       	sub	r4,4
80006d38:	54 45       	stdsp	sp[0x110],r5
80006d3a:	20 6e       	sub	lr,6
80006d3c:	6f 74       	ld.w	r4,r7[0x5c]
80006d3e:	20 6d       	sub	sp,24
80006d40:	6f 64       	ld.w	r4,r7[0x58]
80006d42:	69 66       	ld.w	r6,r4[0x58]
80006d44:	69 65       	ld.w	r5,r4[0x58]
80006d46:	64 2e       	ld.w	lr,r2[0x8]
80006d48:	20 0d       	sub	sp,0
80006d4a:	0a 00       	add	r0,r5
80006d4c:	4d 75       	lddpc	r5,80006ea8 <osc_enable+0x40>
80006d4e:	73 74       	ld.w	r4,r9[0x5c]
80006d50:	20 62       	sub	r2,6
80006d52:	65 20       	ld.w	r0,r2[0x48]
80006d54:	61 20       	ld.w	r0,r0[0x48]
80006d56:	76 61       	ld.w	r1,r11[0x18]
80006d58:	6c 75       	ld.w	r5,r6[0x1c]
80006d5a:	65 20       	ld.w	r0,r2[0x48]
80006d5c:	62 65       	ld.w	r5,r1[0x18]
80006d5e:	74 77       	ld.w	r7,r10[0x1c]
80006d60:	65 65       	ld.w	r5,r2[0x58]
80006d62:	6e 20       	ld.w	r0,r7[0x8]
80006d64:	32 20       	mov	r0,34
80006d66:	61 6e       	ld.w	lr,r0[0x58]
80006d68:	64 20       	ld.w	r0,r2[0x8]
80006d6a:	35 39       	mov	r9,83
80006d6c:	2e 0d       	sub	sp,-128
80006d6e:	0a 3e       	cp.w	lr,r5
80006d70:	00 00       	add	r0,r0
80006d72:	00 00       	add	r0,r0
80006d74:	44 6f       	lddsp	pc,sp[0x118]
80006d76:	6f 72       	ld.w	r2,r7[0x5c]
80006d78:	20 6c       	sub	r12,6
80006d7a:	61 74       	ld.w	r4,r0[0x5c]
80006d7c:	63 68       	ld.w	r8,r1[0x58]
80006d7e:	20 64       	sub	r4,6
80006d80:	65 74       	ld.w	r4,r2[0x5c]
80006d82:	65 63       	ld.w	r3,r2[0x58]
80006d84:	74 65       	ld.w	r5,r10[0x18]
80006d86:	64 0d       	ld.w	sp,r2[0x0]
80006d88:	0a 00       	add	r0,r5
80006d8a:	00 00       	add	r0,r0
80006d8c:	41 63       	lddsp	r3,sp[0x58]
80006d8e:	74 69       	ld.w	r9,r10[0x18]
80006d90:	6f 6e       	ld.w	lr,r7[0x58]
80006d92:	20 70       	sub	r0,7
80006d94:	75 73       	ld.w	r3,r10[0x5c]
80006d96:	68 20       	ld.w	r0,r4[0x8]
80006d98:	62 75       	ld.w	r5,r1[0x1c]
80006d9a:	74 74       	ld.w	r4,r10[0x1c]
80006d9c:	6f 6e       	ld.w	lr,r7[0x58]
80006d9e:	20 70       	sub	r0,7
80006da0:	72 65       	ld.w	r5,r9[0x18]
80006da2:	73 73       	ld.w	r3,r9[0x5c]
80006da4:	20 64       	sub	r4,6
80006da6:	65 74       	ld.w	r4,r2[0x5c]
80006da8:	65 63       	ld.w	r3,r2[0x58]
80006daa:	74 65       	ld.w	r5,r10[0x18]
80006dac:	64 0d       	ld.w	sp,r2[0x0]
80006dae:	0a 00       	add	r0,r5
80006db0:	41 63       	lddsp	r3,sp[0x58]
80006db2:	74 69       	ld.w	r9,r10[0x18]
80006db4:	6f 6e       	ld.w	lr,r7[0x58]
80006db6:	20 70       	sub	r0,7
80006db8:	75 73       	ld.w	r3,r10[0x5c]
80006dba:	68 20       	ld.w	r0,r4[0x8]
80006dbc:	62 75       	ld.w	r5,r1[0x1c]
80006dbe:	74 74       	ld.w	r4,r10[0x1c]
80006dc0:	6f 6e       	ld.w	lr,r7[0x58]
80006dc2:	20 72       	sub	r2,7
80006dc4:	65 6c       	ld.w	r12,r2[0x58]
80006dc6:	65 61       	ld.w	r1,r2[0x58]
80006dc8:	73 65       	ld.w	r5,r9[0x58]
80006dca:	20 64       	sub	r4,6
80006dcc:	65 74       	ld.w	r4,r2[0x5c]
80006dce:	65 63       	ld.w	r3,r2[0x58]
80006dd0:	74 65       	ld.w	r5,r10[0x18]
80006dd2:	64 0d       	ld.w	sp,r2[0x0]
80006dd4:	0a 00       	add	r0,r5
80006dd6:	00 00       	add	r0,r0
80006dd8:	53 74       	stdsp	sp[0xdc],r4
80006dda:	61 72       	ld.w	r2,r0[0x5c]
80006ddc:	74 20       	ld.w	r0,r10[0x8]
80006dde:	73 61       	ld.w	r1,r9[0x58]
80006de0:	6e 69       	ld.w	r9,r7[0x18]
80006de2:	74 69       	ld.w	r9,r10[0x18]
80006de4:	7a 69       	ld.w	r9,sp[0x18]
80006de6:	6e 67       	ld.w	r7,r7[0x18]
80006de8:	0d 0a       	ld.w	r10,r6++
80006dea:	00 00       	add	r0,r0
80006dec:	4e 6f       	lddpc	pc,80006f84 <osc_get_rate+0x48>
80006dee:	20 73       	sub	r3,7
80006df0:	68 65       	ld.w	r5,r4[0x18]
80006df2:	6c 76       	ld.w	r6,r6[0x1c]
80006df4:	65 73       	ld.w	r3,r2[0x5c]
80006df6:	2c 20       	sub	r0,-62
80006df8:	6e 6f       	ld.w	pc,r7[0x18]
80006dfa:	20 64       	sub	r4,6
80006dfc:	65 76       	ld.w	r6,r2[0x5c]
80006dfe:	69 63       	ld.w	r3,r4[0x58]
80006e00:	65 73       	ld.w	r3,r2[0x5c]
80006e02:	20 6f       	sub	pc,6
80006e04:	72 20       	ld.w	r0,r9[0x8]
80006e06:	73 68       	ld.w	r8,r9[0x58]
80006e08:	65 6c       	ld.w	r12,r2[0x58]
80006e0a:	76 65       	ld.w	r5,r11[0x18]
80006e0c:	73 20       	ld.w	r0,r9[0x48]
80006e0e:	61 72       	ld.w	r2,r0[0x5c]
80006e10:	65 20       	ld.w	r0,r2[0x48]
80006e12:	70 61       	ld.w	r1,r8[0x18]
80006e14:	73 74       	ld.w	r4,r9[0x5c]
80006e16:	20 6c       	sub	r12,6
80006e18:	69 66       	ld.w	r6,r4[0x58]
80006e1a:	65 74       	ld.w	r4,r2[0x5c]
80006e1c:	69 6d       	ld.w	sp,r4[0x58]
80006e1e:	65 0d       	ld.w	sp,r2[0x40]
80006e20:	0a 00       	add	r0,r5
80006e22:	00 00       	add	r0,r0
80006e24:	53 68       	stdsp	sp[0xd8],r8
80006e26:	65 6c       	ld.w	r12,r2[0x58]
80006e28:	66 20       	ld.w	r0,r3[0x8]
80006e2a:	63 6c       	ld.w	r12,r1[0x58]
80006e2c:	65 61       	ld.w	r1,r2[0x58]
80006e2e:	6e 0d       	ld.w	sp,r7[0x0]
80006e30:	0a 00       	add	r0,r5
80006e32:	00 00       	add	r0,r0
80006e34:	44 6f       	lddsp	pc,sp[0x118]
80006e36:	6f 72       	ld.w	r2,r7[0x5c]
80006e38:	20 6c       	sub	r12,6
80006e3a:	61 74       	ld.w	r4,r0[0x5c]
80006e3c:	63 68       	ld.w	r8,r1[0x58]
80006e3e:	20 6f       	sub	pc,6
80006e40:	70 65       	ld.w	r5,r8[0x18]
80006e42:	6e 65       	ld.w	r5,r7[0x18]
80006e44:	64 2c       	ld.w	r12,r2[0x8]
80006e46:	20 73       	sub	r3,7
80006e48:	68 75       	ld.w	r5,r4[0x1c]
80006e4a:	74 74       	ld.w	r4,r10[0x1c]
80006e4c:	69 6e       	ld.w	lr,r4[0x58]
80006e4e:	67 20       	ld.w	r0,r3[0x48]
80006e50:	64 6f       	ld.w	pc,r2[0x18]
80006e52:	77 6e       	ld.w	lr,r11[0x58]
80006e54:	20 61       	sub	r1,6
80006e56:	6c 6c       	ld.w	r12,r6[0x18]
80006e58:	20 70       	sub	r0,7
80006e5a:	72 6f       	ld.w	pc,r9[0x18]
80006e5c:	63 65       	ld.w	r5,r1[0x58]
80006e5e:	73 73       	ld.w	r3,r9[0x5c]
80006e60:	65 73       	ld.w	r3,r2[0x5c]
80006e62:	0d 0a       	ld.w	r10,r6++
80006e64:	00 00       	add	r0,r0
	...

80006e68 <osc_enable>:
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);
extern bool osc_priv_rc120m_is_ready(void);

static inline void osc_enable(uint8_t id)
{
80006e68:	eb cd 40 80 	pushm	r7,lr
80006e6c:	1a 97       	mov	r7,sp
80006e6e:	20 1d       	sub	sp,4
80006e70:	18 98       	mov	r8,r12
80006e72:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80006e76:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006e7a:	58 28       	cp.w	r8,2
80006e7c:	c1 10       	breq	80006e9e <osc_enable+0x36>
80006e7e:	e0 89 00 05 	brgt	80006e88 <osc_enable+0x20>
80006e82:	58 08       	cp.w	r8,0
80006e84:	c0 70       	breq	80006e92 <osc_enable+0x2a>
80006e86:	c1 18       	rjmp	80006ea8 <osc_enable+0x40>
80006e88:	58 38       	cp.w	r8,3
80006e8a:	c0 70       	breq	80006e98 <osc_enable+0x30>
80006e8c:	58 48       	cp.w	r8,4
80006e8e:	c0 b0       	breq	80006ea4 <osc_enable+0x3c>
80006e90:	c0 c8       	rjmp	80006ea8 <osc_enable+0x40>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
80006e92:	f0 1f 00 08 	mcall	80006eb0 <osc_enable+0x48>
		break;
80006e96:	c0 98       	rjmp	80006ea8 <osc_enable+0x40>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
80006e98:	f0 1f 00 07 	mcall	80006eb4 <osc_enable+0x4c>
		break;
80006e9c:	c0 68       	rjmp	80006ea8 <osc_enable+0x40>
#endif

	case OSC_ID_RC8M:
		osc_priv_enable_rc8m();
80006e9e:	f0 1f 00 07 	mcall	80006eb8 <osc_enable+0x50>
		break;
80006ea2:	c0 38       	rjmp	80006ea8 <osc_enable+0x40>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
80006ea4:	f0 1f 00 06 	mcall	80006ebc <osc_enable+0x54>

	default:
		/* unhandled_case(id); */
		break;
	}
}
80006ea8:	2f fd       	sub	sp,-4
80006eaa:	e3 cd 80 80 	ldm	sp++,r7,pc
80006eae:	00 00       	add	r0,r0
80006eb0:	80 00       	ld.sh	r0,r0[0x0]
80006eb2:	5a 34       	cp.w	r4,-29
80006eb4:	80 00       	ld.sh	r0,r0[0x0]
80006eb6:	5a 74       	cp.w	r4,-25
80006eb8:	80 00       	ld.sh	r0,r0[0x0]
80006eba:	5a b4       	cp.w	r4,-21
80006ebc:	80 00       	ld.sh	r0,r0[0x0]
80006ebe:	5b 38       	cp.w	r8,-13

80006ec0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
80006ec0:	eb cd 40 80 	pushm	r7,lr
80006ec4:	1a 97       	mov	r7,sp
80006ec6:	20 1d       	sub	sp,4
80006ec8:	18 98       	mov	r8,r12
80006eca:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80006ece:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006ed2:	58 38       	cp.w	r8,3
80006ed4:	c1 50       	breq	80006efe <osc_is_ready+0x3e>
80006ed6:	e0 89 00 07 	brgt	80006ee4 <osc_is_ready+0x24>
80006eda:	58 08       	cp.w	r8,0
80006edc:	c0 90       	breq	80006eee <osc_is_ready+0x2e>
80006ede:	58 28       	cp.w	r8,2
80006ee0:	c1 70       	breq	80006f0e <osc_is_ready+0x4e>
80006ee2:	c2 88       	rjmp	80006f32 <osc_is_ready+0x72>
80006ee4:	58 48       	cp.w	r8,4
80006ee6:	c1 c0       	breq	80006f1e <osc_is_ready+0x5e>
80006ee8:	58 58       	cp.w	r8,5
80006eea:	c2 20       	breq	80006f2e <osc_is_ready+0x6e>
80006eec:	c2 38       	rjmp	80006f32 <osc_is_ready+0x72>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
80006eee:	fe 78 08 00 	mov	r8,-63488
80006ef2:	70 58       	ld.w	r8,r8[0x14]
80006ef4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006ef8:	5f 18       	srne	r8
80006efa:	5c 58       	castu.b	r8
80006efc:	c1 c8       	rjmp	80006f34 <osc_is_ready+0x74>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
80006efe:	fe 78 08 00 	mov	r8,-63488
80006f02:	70 58       	ld.w	r8,r8[0x14]
80006f04:	e2 18 00 04 	andl	r8,0x4,COH
80006f08:	5f 18       	srne	r8
80006f0a:	5c 58       	castu.b	r8
80006f0c:	c1 48       	rjmp	80006f34 <osc_is_ready+0x74>
#endif

	case OSC_ID_RC8M:
		return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_RCOSC8MRDY));
80006f0e:	fe 78 08 00 	mov	r8,-63488
80006f12:	70 58       	ld.w	r8,r8[0x14]
80006f14:	e2 18 00 08 	andl	r8,0x8,COH
80006f18:	5f 18       	srne	r8
80006f1a:	5c 58       	castu.b	r8
80006f1c:	c0 c8       	rjmp	80006f34 <osc_is_ready+0x74>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
80006f1e:	fe 78 08 00 	mov	r8,-63488
80006f22:	71 68       	ld.w	r8,r8[0x58]
80006f24:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006f28:	5f 18       	srne	r8
80006f2a:	5c 58       	castu.b	r8
80006f2c:	c0 48       	rjmp	80006f34 <osc_is_ready+0x74>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
80006f2e:	30 18       	mov	r8,1
80006f30:	c0 28       	rjmp	80006f34 <osc_is_ready+0x74>

	default:
		/* unhandled_case(id); */
		return false;
80006f32:	30 08       	mov	r8,0
	}
}
80006f34:	10 9c       	mov	r12,r8
80006f36:	2f fd       	sub	sp,-4
80006f38:	e3 cd 80 80 	ldm	sp++,r7,pc

80006f3c <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80006f3c:	eb cd 40 80 	pushm	r7,lr
80006f40:	1a 97       	mov	r7,sp
80006f42:	20 1d       	sub	sp,4
80006f44:	18 98       	mov	r8,r12
80006f46:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80006f4a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006f4e:	58 38       	cp.w	r8,3
80006f50:	c1 20       	breq	80006f74 <osc_get_rate+0x38>
80006f52:	e0 89 00 07 	brgt	80006f60 <osc_get_rate+0x24>
80006f56:	58 08       	cp.w	r8,0
80006f58:	c0 90       	breq	80006f6a <osc_get_rate+0x2e>
80006f5a:	58 28       	cp.w	r8,2
80006f5c:	c0 f0       	breq	80006f7a <osc_get_rate+0x3e>
80006f5e:	c1 b8       	rjmp	80006f94 <osc_get_rate+0x58>
80006f60:	58 48       	cp.w	r8,4
80006f62:	c1 10       	breq	80006f84 <osc_get_rate+0x48>
80006f64:	58 58       	cp.w	r8,5
80006f66:	c1 40       	breq	80006f8e <osc_get_rate+0x52>
80006f68:	c1 68       	rjmp	80006f94 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80006f6a:	e0 68 24 00 	mov	r8,9216
80006f6e:	ea 18 00 f4 	orh	r8,0xf4
80006f72:	c1 28       	rjmp	80006f96 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80006f74:	e0 68 80 00 	mov	r8,32768
80006f78:	c0 f8       	rjmp	80006f96 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80006f7a:	e0 68 12 00 	mov	r8,4608
80006f7e:	ea 18 00 7a 	orh	r8,0x7a
80006f82:	c0 a8       	rjmp	80006f96 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80006f84:	e0 68 0e 00 	mov	r8,3584
80006f88:	ea 18 07 27 	orh	r8,0x727
80006f8c:	c0 58       	rjmp	80006f96 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80006f8e:	e0 78 c1 38 	mov	r8,115000
80006f92:	c0 28       	rjmp	80006f96 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80006f94:	30 08       	mov	r8,0
	}
}
80006f96:	10 9c       	mov	r12,r8
80006f98:	2f fd       	sub	sp,-4
80006f9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f9e:	d7 03       	nop

80006fa0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
80006fa0:	eb cd 40 80 	pushm	r7,lr
80006fa4:	1a 97       	mov	r7,sp
80006fa6:	20 1d       	sub	sp,4
80006fa8:	18 98       	mov	r8,r12
80006faa:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
80006fae:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006fb2:	10 9c       	mov	r12,r8
80006fb4:	f0 1f 00 05 	mcall	80006fc8 <osc_wait_ready+0x28>
80006fb8:	18 98       	mov	r8,r12
80006fba:	ec 18 00 01 	eorl	r8,0x1
80006fbe:	5c 58       	castu.b	r8
80006fc0:	cf 71       	brne	80006fae <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
80006fc2:	2f fd       	sub	sp,-4
80006fc4:	e3 cd 80 80 	ldm	sp++,r7,pc
80006fc8:	80 00       	ld.sh	r0,r0[0x0]
80006fca:	6e c0       	ld.w	r0,r7[0x30]

80006fcc <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
80006fcc:	eb cd 40 80 	pushm	r7,lr
80006fd0:	1a 97       	mov	r7,sp
80006fd2:	20 2d       	sub	sp,8
80006fd4:	ef 4c ff fc 	st.w	r7[-4],r12
80006fd8:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
80006fdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006fe0:	70 09       	ld.w	r9,r8[0x0]
80006fe2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006fe6:	2f d8       	sub	r8,-3
80006fe8:	30 1a       	mov	r10,1
80006fea:	f4 08 09 48 	lsl	r8,r10,r8
80006fee:	10 49       	or	r9,r8
80006ff0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006ff4:	91 09       	st.w	r8[0x0],r9
}
80006ff6:	2f ed       	sub	sp,-8
80006ff8:	e3 cd 80 80 	ldm	sp++,r7,pc

80006ffc <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
80006ffc:	eb cd 40 80 	pushm	r7,lr
80007000:	1a 97       	mov	r7,sp
80007002:	20 5d       	sub	sp,20
80007004:	ef 4c ff f8 	st.w	r7[-8],r12
80007008:	ef 4b ff f4 	st.w	r7[-12],r11
8000700c:	ef 4a ff f0 	st.w	r7[-16],r10
80007010:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
80007014:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007018:	5c 58       	castu.b	r8
8000701a:	10 9c       	mov	r12,r8
8000701c:	f0 1f 00 2e 	mcall	800070d4 <pll_config_init+0xd8>
80007020:	18 99       	mov	r9,r12
80007022:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007026:	f2 08 02 48 	mul	r8,r9,r8
8000702a:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8000702e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007032:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007036:	f0 09 0d 08 	divu	r8,r8,r9
8000703a:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8000703e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007042:	30 09       	mov	r9,0
80007044:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
80007046:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000704a:	e0 69 b3 ff 	mov	r9,46079
8000704e:	ea 19 04 c4 	orh	r9,0x4c4
80007052:	12 38       	cp.w	r8,r9
80007054:	e0 8b 00 16 	brhi	80007080 <pll_config_init+0x84>
80007058:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000705c:	58 88       	cp.w	r8,8
8000705e:	e0 8b 00 11 	brhi	80007080 <pll_config_init+0x84>
		mul *= 2;
80007062:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007066:	a1 78       	lsl	r8,0x1
80007068:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8000706c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007070:	a1 78       	lsl	r8,0x1
80007072:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
80007076:	30 1b       	mov	r11,1
80007078:	ee fc ff f8 	ld.w	r12,r7[-8]
8000707c:	f0 1f 00 17 	mcall	800070d8 <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
80007080:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007084:	e0 69 fe 7f 	mov	r9,65151
80007088:	ea 19 0a 21 	orh	r9,0xa21
8000708c:	12 38       	cp.w	r8,r9
8000708e:	e0 8b 00 07 	brhi	8000709c <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
80007092:	30 0b       	mov	r11,0
80007094:	ee fc ff f8 	ld.w	r12,r7[-8]
80007098:	f0 1f 00 10 	mcall	800070d8 <pll_config_init+0xdc>

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8000709c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070a0:	70 09       	ld.w	r9,r8[0x0]
800070a2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800070a6:	20 18       	sub	r8,1
800070a8:	f0 0a 15 10 	lsl	r10,r8,0x10
		| (div << AVR32_SCIF_PLLDIV)
800070ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800070b0:	a9 68       	lsl	r8,0x8
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
800070b2:	10 4a       	or	r10,r8
		| (src << AVR32_SCIF_PLLOSC);
800070b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800070b8:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
800070ba:	f5 e8 10 08 	or	r8,r10,r8
800070be:	f3 e8 10 08 	or	r8,r9,r8
800070c2:	10 99       	mov	r9,r8
800070c4:	ea 19 3f 00 	orh	r9,0x3f00
800070c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070cc:	91 09       	st.w	r8[0x0],r9
		| (div << AVR32_SCIF_PLLDIV)
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
		| (src << AVR32_SCIF_PLLOSC);
}
800070ce:	2f bd       	sub	sp,-20
800070d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800070d4:	80 00       	ld.sh	r0,r0[0x0]
800070d6:	6f 3c       	ld.w	r12,r7[0x4c]
800070d8:	80 00       	ld.sh	r0,r0[0x0]
800070da:	6f cc       	ld.w	r12,r7[0x70]

800070dc <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_enable(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_disable(unsigned int pll_id);

static inline bool pll_is_locked(unsigned int pll_id)
{
800070dc:	eb cd 40 80 	pushm	r7,lr
800070e0:	1a 97       	mov	r7,sp
800070e2:	20 1d       	sub	sp,4
800070e4:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
800070e8:	fe 78 08 00 	mov	r8,-63488
800070ec:	70 59       	ld.w	r9,r8[0x14]
800070ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800070f2:	2f c8       	sub	r8,-4
800070f4:	30 1a       	mov	r10,1
800070f6:	f4 08 09 48 	lsl	r8,r10,r8
800070fa:	f3 e8 00 08 	and	r8,r9,r8
800070fe:	5f 18       	srne	r8
80007100:	5c 58       	castu.b	r8
}
80007102:	10 9c       	mov	r12,r8
80007104:	2f fd       	sub	sp,-4
80007106:	e3 cd 80 80 	ldm	sp++,r7,pc
8000710a:	d7 03       	nop

8000710c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
8000710c:	eb cd 40 80 	pushm	r7,lr
80007110:	1a 97       	mov	r7,sp
80007112:	20 1d       	sub	sp,4
80007114:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
80007118:	ee fc ff fc 	ld.w	r12,r7[-4]
8000711c:	f0 1f 00 06 	mcall	80007134 <pll_wait_for_lock+0x28>
80007120:	18 98       	mov	r8,r12
80007122:	ec 18 00 01 	eorl	r8,0x1
80007126:	5c 58       	castu.b	r8
80007128:	cf 81       	brne	80007118 <pll_wait_for_lock+0xc>
		/* Do nothing */
	}

	return 0;
8000712a:	30 08       	mov	r8,0
}
8000712c:	10 9c       	mov	r12,r8
8000712e:	2f fd       	sub	sp,-4
80007130:	e3 cd 80 80 	ldm	sp++,r7,pc
80007134:	80 00       	ld.sh	r0,r0[0x0]
80007136:	70 dc       	ld.w	r12,r8[0x34]

80007138 <init_sysErr>:

#define BIT(x) (1<<(x))

void init_sysErr(void);
void init_sysErr(void)
{
80007138:	eb cd 40 80 	pushm	r7,lr
8000713c:	1a 97       	mov	r7,sp
	memset(&sysErr, 0x00, sizeof(sysErr)); //Init everything to "PASS"
8000713e:	31 0a       	mov	r10,16
80007140:	30 0b       	mov	r11,0
80007142:	48 3c       	lddpc	r12,8000714c <init_sysErr+0x14>
80007144:	f0 1f 00 03 	mcall	80007150 <init_sysErr+0x18>
}
80007148:	e3 cd 80 80 	ldm	sp++,r7,pc
8000714c:	00 00       	add	r0,r0
8000714e:	0b cc       	ld.ub	r12,r5[0x4]
80007150:	80 00       	ld.sh	r0,r0[0x0]
80007152:	c7 e6       	brmi	8000724e <init_io+0x82>

80007154 <display_text>:
};


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
80007154:	eb cd 40 80 	pushm	r7,lr
80007158:	1a 97       	mov	r7,sp
8000715a:	20 2d       	sub	sp,8
8000715c:	18 98       	mov	r8,r12
8000715e:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i = 0; i<7; i++)
80007162:	30 08       	mov	r8,0
80007164:	ef 48 ff fc 	st.w	r7[-4],r8
80007168:	c1 58       	rjmp	80007192 <display_text+0x3e>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
8000716a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000716e:	48 e8       	lddpc	r8,800071a4 <display_text+0x50>
80007170:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80007174:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007178:	f2 08 00 08 	add	r8,r9,r8
8000717c:	11 88       	ld.ub	r8,r8[0x0]
8000717e:	10 9b       	mov	r11,r8
80007180:	fc 7c 14 00 	mov	r12,-191488
80007184:	f0 1f 00 09 	mcall	800071a8 <display_text+0x54>


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
	for (int i = 0; i<7; i++)
80007188:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000718c:	2f f8       	sub	r8,-1
8000718e:	ef 48 ff fc 	st.w	r7[-4],r8
80007192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007196:	58 68       	cp.w	r8,6
80007198:	fe 9a ff e9 	brle	8000716a <display_text+0x16>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
	}
	
}
8000719c:	2f ed       	sub	sp,-8
8000719e:	e3 cd 80 80 	ldm	sp++,r7,pc
800071a2:	00 00       	add	r0,r0
800071a4:	00 00       	add	r0,r0
800071a6:	00 60       	and	r0,r0
800071a8:	80 00       	ld.sh	r0,r0[0x0]
800071aa:	58 94       	cp.w	r4,9

800071ac <chassis_error>:

void chassis_error(void);
void chassis_error(void)
{
800071ac:	eb cd 40 80 	pushm	r7,lr
800071b0:	1a 97       	mov	r7,sp
	display_text(IDX_ERROR);
800071b2:	30 4c       	mov	r12,4
800071b4:	f0 1f 00 03 	mcall	800071c0 <chassis_error+0x14>
	print_ecdbg("Chassis error...shutting down.\r\n");
800071b8:	48 3c       	lddpc	r12,800071c4 <chassis_error+0x18>
800071ba:	f0 1f 00 04 	mcall	800071c8 <chassis_error+0x1c>
	
	while(1); //catastrophic error, just hang TODO: allow technician interface to work here possibly
800071be:	c0 08       	rjmp	800071be <chassis_error+0x12>
800071c0:	80 00       	ld.sh	r0,r0[0x0]
800071c2:	71 54       	ld.w	r4,r8[0x54]
800071c4:	80 00       	ld.sh	r0,r0[0x0]
800071c6:	64 a4       	ld.w	r4,r2[0x28]
800071c8:	80 00       	ld.sh	r0,r0[0x0]
800071ca:	33 38       	mov	r8,51

800071cc <init_io>:
	
}

void init_io(void);
void init_io(void)
{
800071cc:	eb cd 40 80 	pushm	r7,lr
800071d0:	1a 97       	mov	r7,sp
800071d2:	20 1d       	sub	sp,4
	uint32_t ioFlags;
	
	
	ioFlags = (GPIO_DIR_INPUT);
800071d4:	30 08       	mov	r8,0
800071d6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DOOR_LATCH, ioFlags);
800071da:	ee fb ff fc 	ld.w	r11,r7[-4]
800071de:	33 ec       	mov	r12,62
800071e0:	f0 1f 00 2b 	mcall	8000728c <init_io+0xc0>

	ioFlags = (GPIO_DIR_INPUT);
800071e4:	30 08       	mov	r8,0
800071e6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_ACTION_PB, ioFlags);
800071ea:	ee fb ff fc 	ld.w	r11,r7[-4]
800071ee:	33 fc       	mov	r12,63
800071f0:	f0 1f 00 27 	mcall	8000728c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800071f4:	30 38       	mov	r8,3
800071f6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID0, ioFlags);
800071fa:	ee fb ff fc 	ld.w	r11,r7[-4]
800071fe:	33 3c       	mov	r12,51
80007200:	f0 1f 00 23 	mcall	8000728c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007204:	30 38       	mov	r8,3
80007206:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID1, ioFlags);
8000720a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000720e:	33 4c       	mov	r12,52
80007210:	f0 1f 00 1f 	mcall	8000728c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007214:	30 38       	mov	r8,3
80007216:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID2, ioFlags);
8000721a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000721e:	33 5c       	mov	r12,53
80007220:	f0 1f 00 1b 	mcall	8000728c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007224:	30 38       	mov	r8,3
80007226:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID3, ioFlags);
8000722a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000722e:	33 6c       	mov	r12,54
80007230:	f0 1f 00 17 	mcall	8000728c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007234:	30 38       	mov	r8,3
80007236:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID4, ioFlags);
8000723a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000723e:	33 7c       	mov	r12,55
80007240:	f0 1f 00 13 	mcall	8000728c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
80007244:	30 18       	mov	r8,1
80007246:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DEBUG_LED, ioFlags);
8000724a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000724e:	37 cc       	mov	r12,124
80007250:	f0 1f 00 0f 	mcall	8000728c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007254:	30 38       	mov	r8,3
80007256:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_PSUPPLY_ONn, ioFlags);
8000725a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000725e:	31 7c       	mov	r12,23
80007260:	f0 1f 00 0b 	mcall	8000728c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007264:	30 38       	mov	r8,3
80007266:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_LED_OEn, ioFlags);
8000726a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000726e:	31 6c       	mov	r12,22
80007270:	f0 1f 00 07 	mcall	8000728c <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW); //high=1x multiplier, low=4x multiplier 10apr15
80007274:	30 18       	mov	r8,1
80007276:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_MFP, ioFlags);
8000727a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000727e:	31 5c       	mov	r12,21
80007280:	f0 1f 00 03 	mcall	8000728c <init_io+0xc0>

}
80007284:	2f fd       	sub	sp,-4
80007286:	e3 cd 80 80 	ldm	sp++,r7,pc
8000728a:	00 00       	add	r0,r0
8000728c:	80 00       	ld.sh	r0,r0[0x0]
8000728e:	48 28       	lddpc	r8,80007294 <print_ecdbg_num+0x4>

80007290 <print_ecdbg_num>:
};


void print_ecdbg_num(unsigned int num);
void print_ecdbg_num(unsigned int num)
{
80007290:	eb cd 40 80 	pushm	r7,lr
80007294:	1a 97       	mov	r7,sp
80007296:	20 3d       	sub	sp,12
80007298:	ef 4c ff f4 	st.w	r7[-12],r12
	char str[6];
	
	sprintf(str, "%d", num);	
8000729c:	ee c8 00 08 	sub	r8,r7,8
800072a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800072a4:	1a d9       	st.w	--sp,r9
800072a6:	48 7b       	lddpc	r11,800072c0 <print_ecdbg_num+0x30>
800072a8:	10 9c       	mov	r12,r8
800072aa:	f0 1f 00 07 	mcall	800072c4 <print_ecdbg_num+0x34>
800072ae:	2f fd       	sub	sp,-4
	
	print_ecdbg(str);
800072b0:	ee c8 00 08 	sub	r8,r7,8
800072b4:	10 9c       	mov	r12,r8
800072b6:	f0 1f 00 05 	mcall	800072c8 <print_ecdbg_num+0x38>
}
800072ba:	2f dd       	sub	sp,-12
800072bc:	e3 cd 80 80 	ldm	sp++,r7,pc
800072c0:	80 00       	ld.sh	r0,r0[0x0]
800072c2:	64 c8       	ld.w	r8,r2[0x30]
800072c4:	80 00       	ld.sh	r0,r0[0x0]
800072c6:	c7 f4       	brge	800073c4 <read_led_board_serial_ids+0xf8>
800072c8:	80 00       	ld.sh	r0,r0[0x0]
800072ca:	33 38       	mov	r8,51

800072cc <read_led_board_serial_ids>:

/* One serial ID chip per board */
void read_led_board_serial_ids(void);
void read_led_board_serial_ids(void)
{
800072cc:	eb cd 40 e0 	pushm	r5-r7,lr
800072d0:	1a 97       	mov	r7,sp
800072d2:	20 4d       	sub	sp,16
	/*
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
800072d4:	30 1c       	mov	r12,1
800072d6:	f0 1f 00 b1 	mcall	80007598 <read_led_board_serial_ids+0x2cc>
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
800072da:	30 08       	mov	r8,0
800072dc:	ef 48 ff f0 	st.w	r7[-16],r8
800072e0:	c3 88       	rjmp	80007350 <read_led_board_serial_ids+0x84>
	{
		ledBrd[i].present = !OWTouchReset(i);
800072e2:	ee f6 ff f0 	ld.w	r6,r7[-16]
800072e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800072ea:	5c 58       	castu.b	r8
800072ec:	10 9c       	mov	r12,r8
800072ee:	f0 1f 00 ac 	mcall	8000759c <read_led_board_serial_ids+0x2d0>
800072f2:	18 98       	mov	r8,r12
800072f4:	58 08       	cp.w	r8,0
800072f6:	5f 09       	sreq	r9
800072f8:	fe fa 02 a8 	ld.w	r10,pc[680]
800072fc:	0c 98       	mov	r8,r6
800072fe:	a3 78       	lsl	r8,0x3
80007300:	0c 18       	sub	r8,r6
80007302:	a1 78       	lsl	r8,0x1
80007304:	f4 08 00 08 	add	r8,r10,r8
80007308:	f0 ca ff f8 	sub	r10,r8,-8
8000730c:	12 98       	mov	r8,r9
8000730e:	b4 88       	st.b	r10[0x0],r8
		if (ledBrd[i].present)
80007310:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007314:	fe fa 02 8c 	ld.w	r10,pc[652]
80007318:	12 98       	mov	r8,r9
8000731a:	a3 78       	lsl	r8,0x3
8000731c:	12 18       	sub	r8,r9
8000731e:	a1 78       	lsl	r8,0x1
80007320:	f4 08 00 08 	add	r8,r10,r8
80007324:	2f 88       	sub	r8,-8
80007326:	11 88       	ld.ub	r8,r8[0x0]
80007328:	58 08       	cp.w	r8,0
8000732a:	c0 e0       	breq	80007346 <read_led_board_serial_ids+0x7a>
		{
			print_ecdbg("LED board detected in slot ");
8000732c:	fe fc 02 78 	ld.w	r12,pc[632]
80007330:	f0 1f 00 9e 	mcall	800075a8 <read_led_board_serial_ids+0x2dc>
			print_ecdbg_num(i);
80007334:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007338:	10 9c       	mov	r12,r8
8000733a:	f0 1f 00 9d 	mcall	800075ac <read_led_board_serial_ids+0x2e0>
			print_ecdbg("\r\n");
8000733e:	fe fc 02 72 	ld.w	r12,pc[626]
80007342:	f0 1f 00 9a 	mcall	800075a8 <read_led_board_serial_ids+0x2dc>
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80007346:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000734a:	2f f8       	sub	r8,-1
8000734c:	ef 48 ff f0 	st.w	r7[-16],r8
80007350:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007354:	58 48       	cp.w	r8,4
80007356:	fe 9a ff c6 	brle	800072e2 <read_led_board_serial_ids+0x16>
			print_ecdbg_num(i);
			print_ecdbg("\r\n");
		}
	}
	
	if (ledBrd[0].present && ledBrd[1].present)
8000735a:	fe f8 02 46 	ld.w	r8,pc[582]
8000735e:	f1 38 00 08 	ld.ub	r8,r8[8]
80007362:	58 08       	cp.w	r8,0
80007364:	c0 f0       	breq	80007382 <read_led_board_serial_ids+0xb6>
80007366:	fe f8 02 3a 	ld.w	r8,pc[570]
8000736a:	f1 38 00 16 	ld.ub	r8,r8[22]
8000736e:	58 08       	cp.w	r8,0
80007370:	c0 90       	breq	80007382 <read_led_board_serial_ids+0xb6>
	{
		shelf[0].present = 1;
80007372:	fe f9 02 42 	ld.w	r9,pc[578]
80007376:	30 18       	mov	r8,1
80007378:	b2 c8       	st.b	r9[0x4],r8
		
		print_ecdbg("Shelf 0 present\r\n");
8000737a:	fe fc 02 3e 	ld.w	r12,pc[574]
8000737e:	f0 1f 00 8b 	mcall	800075a8 <read_led_board_serial_ids+0x2dc>
	}
	if (ledBrd[1].present && ledBrd[2].present)
80007382:	fe f8 02 1e 	ld.w	r8,pc[542]
80007386:	f1 38 00 16 	ld.ub	r8,r8[22]
8000738a:	58 08       	cp.w	r8,0
8000738c:	c1 00       	breq	800073ac <read_led_board_serial_ids+0xe0>
8000738e:	fe f8 02 12 	ld.w	r8,pc[530]
80007392:	f1 38 00 24 	ld.ub	r8,r8[36]
80007396:	58 08       	cp.w	r8,0
80007398:	c0 a0       	breq	800073ac <read_led_board_serial_ids+0xe0>
	{
		shelf[1].present = 1;
8000739a:	fe f9 02 1a 	ld.w	r9,pc[538]
8000739e:	30 18       	mov	r8,1
800073a0:	f3 68 00 09 	st.b	r9[9],r8
		print_ecdbg("Shelf 1 present\r\n");
800073a4:	fe fc 02 18 	ld.w	r12,pc[536]
800073a8:	f0 1f 00 80 	mcall	800075a8 <read_led_board_serial_ids+0x2dc>
	}
	if (ledBrd[2].present && ledBrd[3].present)
800073ac:	4f d8       	lddpc	r8,800075a0 <read_led_board_serial_ids+0x2d4>
800073ae:	f1 38 00 24 	ld.ub	r8,r8[36]
800073b2:	58 08       	cp.w	r8,0
800073b4:	c0 d0       	breq	800073ce <read_led_board_serial_ids+0x102>
800073b6:	4f b8       	lddpc	r8,800075a0 <read_led_board_serial_ids+0x2d4>
800073b8:	f1 38 00 32 	ld.ub	r8,r8[50]
800073bc:	58 08       	cp.w	r8,0
800073be:	c0 80       	breq	800073ce <read_led_board_serial_ids+0x102>
	{
		shelf[2].present = 1;
800073c0:	4f d9       	lddpc	r9,800075b4 <read_led_board_serial_ids+0x2e8>
800073c2:	30 18       	mov	r8,1
800073c4:	f3 68 00 0e 	st.b	r9[14],r8
		print_ecdbg("Shelf 2 present\r\n");
800073c8:	4f ec       	lddpc	r12,800075c0 <read_led_board_serial_ids+0x2f4>
800073ca:	f0 1f 00 78 	mcall	800075a8 <read_led_board_serial_ids+0x2dc>
	}
	if (ledBrd[3].present && ledBrd[4].present)
800073ce:	4f 58       	lddpc	r8,800075a0 <read_led_board_serial_ids+0x2d4>
800073d0:	f1 38 00 32 	ld.ub	r8,r8[50]
800073d4:	58 08       	cp.w	r8,0
800073d6:	c0 d0       	breq	800073f0 <read_led_board_serial_ids+0x124>
800073d8:	4f 28       	lddpc	r8,800075a0 <read_led_board_serial_ids+0x2d4>
800073da:	f1 38 00 40 	ld.ub	r8,r8[64]
800073de:	58 08       	cp.w	r8,0
800073e0:	c0 80       	breq	800073f0 <read_led_board_serial_ids+0x124>
	{
		shelf[3].present = 1;
800073e2:	4f 59       	lddpc	r9,800075b4 <read_led_board_serial_ids+0x2e8>
800073e4:	30 18       	mov	r8,1
800073e6:	f3 68 00 13 	st.b	r9[19],r8
		print_ecdbg("Shelf 3 present\r\n");
800073ea:	4f 7c       	lddpc	r12,800075c4 <read_led_board_serial_ids+0x2f8>
800073ec:	f0 1f 00 6f 	mcall	800075a8 <read_led_board_serial_ids+0x2dc>
	}
	

	for (int i=0; i<NUM_LED_BOARDS; i++)
800073f0:	30 08       	mov	r8,0
800073f2:	ef 48 ff f4 	st.w	r7[-12],r8
800073f6:	cc 88       	rjmp	80007586 <read_led_board_serial_ids+0x2ba>
	{
		unsigned char acc = 0;
800073f8:	30 08       	mov	r8,0
800073fa:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[i].present)
800073fe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007402:	4e 8a       	lddpc	r10,800075a0 <read_led_board_serial_ids+0x2d4>
80007404:	12 98       	mov	r8,r9
80007406:	a3 78       	lsl	r8,0x3
80007408:	12 18       	sub	r8,r9
8000740a:	a1 78       	lsl	r8,0x1
8000740c:	f4 08 00 08 	add	r8,r10,r8
80007410:	2f 88       	sub	r8,-8
80007412:	11 88       	ld.ub	r8,r8[0x0]
80007414:	58 08       	cp.w	r8,0
80007416:	e0 80 00 b3 	breq	8000757c <read_led_board_serial_ids+0x2b0>
		{
			OWWriteByte(i, 0x33); //Read ID command
8000741a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000741e:	5c 58       	castu.b	r8
80007420:	33 3b       	mov	r11,51
80007422:	10 9c       	mov	r12,r8
80007424:	f0 1f 00 69 	mcall	800075c8 <read_led_board_serial_ids+0x2fc>
			
			ledBrd[i].idFamily = OWReadByte(i);
80007428:	ee f6 ff f4 	ld.w	r6,r7[-12]
8000742c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007430:	5c 58       	castu.b	r8
80007432:	10 9c       	mov	r12,r8
80007434:	f0 1f 00 66 	mcall	800075cc <read_led_board_serial_ids+0x300>
80007438:	18 98       	mov	r8,r12
8000743a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000743e:	4d 9a       	lddpc	r10,800075a0 <read_led_board_serial_ids+0x2d4>
80007440:	0c 98       	mov	r8,r6
80007442:	a3 78       	lsl	r8,0x3
80007444:	0c 18       	sub	r8,r6
80007446:	a1 78       	lsl	r8,0x1
80007448:	10 0a       	add	r10,r8
8000744a:	12 98       	mov	r8,r9
8000744c:	b4 88       	st.b	r10[0x0],r8
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
8000744e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007452:	4d 4a       	lddpc	r10,800075a0 <read_led_board_serial_ids+0x2d4>
80007454:	12 98       	mov	r8,r9
80007456:	a3 78       	lsl	r8,0x3
80007458:	12 18       	sub	r8,r9
8000745a:	a1 78       	lsl	r8,0x1
8000745c:	f4 08 00 08 	add	r8,r10,r8
80007460:	11 88       	ld.ub	r8,r8[0x0]
80007462:	10 9b       	mov	r11,r8
80007464:	30 0c       	mov	r12,0
80007466:	f0 1f 00 5b 	mcall	800075d0 <read_led_board_serial_ids+0x304>
8000746a:	18 98       	mov	r8,r12
8000746c:	ef 68 ff fb 	st.b	r7[-5],r8
			
			for (int j=0; j<6; j++)
80007470:	30 08       	mov	r8,0
80007472:	ef 48 ff fc 	st.w	r7[-4],r8
80007476:	c3 78       	rjmp	800074e4 <read_led_board_serial_ids+0x218>
			{
				ledBrd[i].id[j] = OWReadByte(i);
80007478:	ee f6 ff f4 	ld.w	r6,r7[-12]
8000747c:	ee f5 ff fc 	ld.w	r5,r7[-4]
80007480:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007484:	5c 58       	castu.b	r8
80007486:	10 9c       	mov	r12,r8
80007488:	f0 1f 00 51 	mcall	800075cc <read_led_board_serial_ids+0x300>
8000748c:	18 98       	mov	r8,r12
8000748e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007492:	4c 4a       	lddpc	r10,800075a0 <read_led_board_serial_ids+0x2d4>
80007494:	0c 98       	mov	r8,r6
80007496:	a3 78       	lsl	r8,0x3
80007498:	0c 18       	sub	r8,r6
8000749a:	a1 78       	lsl	r8,0x1
8000749c:	f4 08 00 08 	add	r8,r10,r8
800074a0:	0a 08       	add	r8,r5
800074a2:	f0 ca ff ff 	sub	r10,r8,-1
800074a6:	12 98       	mov	r8,r9
800074a8:	b4 88       	st.b	r10[0x0],r8
				acc = crc8_add(acc, ledBrd[i].id[j]);
800074aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800074ae:	ee fa ff fc 	ld.w	r10,r7[-4]
800074b2:	4b cb       	lddpc	r11,800075a0 <read_led_board_serial_ids+0x2d4>
800074b4:	12 98       	mov	r8,r9
800074b6:	a3 78       	lsl	r8,0x3
800074b8:	12 18       	sub	r8,r9
800074ba:	a1 78       	lsl	r8,0x1
800074bc:	f6 08 00 08 	add	r8,r11,r8
800074c0:	14 08       	add	r8,r10
800074c2:	2f f8       	sub	r8,-1
800074c4:	11 88       	ld.ub	r8,r8[0x0]
800074c6:	10 99       	mov	r9,r8
800074c8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800074cc:	12 9b       	mov	r11,r9
800074ce:	10 9c       	mov	r12,r8
800074d0:	f0 1f 00 40 	mcall	800075d0 <read_led_board_serial_ids+0x304>
800074d4:	18 98       	mov	r8,r12
800074d6:	ef 68 ff fb 	st.b	r7[-5],r8
			
			ledBrd[i].idFamily = OWReadByte(i);
			
			acc = crc8_add(0x00, ledBrd[i].idFamily);
			
			for (int j=0; j<6; j++)
800074da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074de:	2f f8       	sub	r8,-1
800074e0:	ef 48 ff fc 	st.w	r7[-4],r8
800074e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074e8:	58 58       	cp.w	r8,5
800074ea:	fe 9a ff c7 	brle	80007478 <read_led_board_serial_ids+0x1ac>
			{
				ledBrd[i].id[j] = OWReadByte(i);
				acc = crc8_add(acc, ledBrd[i].id[j]);
			}
			
			ledBrd[i].idcsum = OWReadByte(i);
800074ee:	ee f6 ff f4 	ld.w	r6,r7[-12]
800074f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800074f6:	5c 58       	castu.b	r8
800074f8:	10 9c       	mov	r12,r8
800074fa:	f0 1f 00 35 	mcall	800075cc <read_led_board_serial_ids+0x300>
800074fe:	18 98       	mov	r8,r12
80007500:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007504:	4a 7a       	lddpc	r10,800075a0 <read_led_board_serial_ids+0x2d4>
80007506:	0c 98       	mov	r8,r6
80007508:	a3 78       	lsl	r8,0x3
8000750a:	0c 18       	sub	r8,r6
8000750c:	a1 78       	lsl	r8,0x1
8000750e:	f4 08 00 08 	add	r8,r10,r8
80007512:	f0 ca ff f9 	sub	r10,r8,-7
80007516:	12 98       	mov	r8,r9
80007518:	b4 88       	st.b	r10[0x0],r8
			
			if (acc != ledBrd[i].idcsum)
8000751a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000751e:	4a 1a       	lddpc	r10,800075a0 <read_led_board_serial_ids+0x2d4>
80007520:	12 98       	mov	r8,r9
80007522:	a3 78       	lsl	r8,0x3
80007524:	12 18       	sub	r8,r9
80007526:	a1 78       	lsl	r8,0x1
80007528:	f4 08 00 08 	add	r8,r10,r8
8000752c:	2f 98       	sub	r8,-7
8000752e:	11 88       	ld.ub	r8,r8[0x0]
80007530:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007534:	f0 09 18 00 	cp.b	r9,r8
80007538:	c2 20       	breq	8000757c <read_led_board_serial_ids+0x2b0>
			{
				sysErr.ledBrdSerialIdCsum |= BIT(i); //SE_FAIL;
8000753a:	4a 78       	lddpc	r8,800075d4 <read_led_board_serial_ids+0x308>
8000753c:	f1 38 00 0c 	ld.ub	r8,r8[12]
80007540:	10 99       	mov	r9,r8
80007542:	30 1a       	mov	r10,1
80007544:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007548:	f4 08 09 48 	lsl	r8,r10,r8
8000754c:	5c 58       	castu.b	r8
8000754e:	f3 e8 10 08 	or	r8,r9,r8
80007552:	5c 58       	castu.b	r8
80007554:	5c 58       	castu.b	r8
80007556:	4a 09       	lddpc	r9,800075d4 <read_led_board_serial_ids+0x308>
80007558:	f3 68 00 0c 	st.b	r9[12],r8
				ledBrd[i].present = 0; //crc8 wasn't valid for this ID chip, don't trust the board
8000755c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007560:	49 0a       	lddpc	r10,800075a0 <read_led_board_serial_ids+0x2d4>
80007562:	12 98       	mov	r8,r9
80007564:	a3 78       	lsl	r8,0x3
80007566:	12 18       	sub	r8,r9
80007568:	a1 78       	lsl	r8,0x1
8000756a:	f4 08 00 08 	add	r8,r10,r8
8000756e:	f0 c9 ff f8 	sub	r9,r8,-8
80007572:	30 08       	mov	r8,0
80007574:	b2 88       	st.b	r9[0x0],r8
				print_ecdbg("Invalid serial ID checksum.\r\n");
80007576:	49 9c       	lddpc	r12,800075d8 <read_led_board_serial_ids+0x30c>
80007578:	f0 1f 00 0c 	mcall	800075a8 <read_led_board_serial_ids+0x2dc>
		shelf[3].present = 1;
		print_ecdbg("Shelf 3 present\r\n");
	}
	

	for (int i=0; i<NUM_LED_BOARDS; i++)
8000757c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007580:	2f f8       	sub	r8,-1
80007582:	ef 48 ff f4 	st.w	r7[-12],r8
80007586:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000758a:	58 48       	cp.w	r8,4
8000758c:	fe 9a ff 36 	brle	800073f8 <read_led_board_serial_ids+0x12c>
				ledBrd[i].present = 0; //crc8 wasn't valid for this ID chip, don't trust the board
				print_ecdbg("Invalid serial ID checksum.\r\n");
			}
		}
	}
}
80007590:	2f cd       	sub	sp,-16
80007592:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007596:	00 00       	add	r0,r0
80007598:	80 00       	ld.sh	r0,r0[0x0]
8000759a:	21 74       	sub	r4,23
8000759c:	80 00       	ld.sh	r0,r0[0x0]
8000759e:	22 34       	sub	r4,35
800075a0:	00 00       	add	r0,r0
800075a2:	0b 46       	ld.w	r6,--r5
800075a4:	80 00       	ld.sh	r0,r0[0x0]
800075a6:	64 cc       	ld.w	r12,r2[0x30]
800075a8:	80 00       	ld.sh	r0,r0[0x0]
800075aa:	33 38       	mov	r8,51
800075ac:	80 00       	ld.sh	r0,r0[0x0]
800075ae:	72 90       	ld.w	r0,r9[0x24]
800075b0:	80 00       	ld.sh	r0,r0[0x0]
800075b2:	64 e8       	ld.w	r8,r2[0x38]
800075b4:	00 00       	add	r0,r0
800075b6:	0b 8c       	ld.ub	r12,r5[0x0]
800075b8:	80 00       	ld.sh	r0,r0[0x0]
800075ba:	64 ec       	ld.w	r12,r2[0x38]
800075bc:	80 00       	ld.sh	r0,r0[0x0]
800075be:	65 00       	ld.w	r0,r2[0x40]
800075c0:	80 00       	ld.sh	r0,r0[0x0]
800075c2:	65 14       	ld.w	r4,r2[0x44]
800075c4:	80 00       	ld.sh	r0,r0[0x0]
800075c6:	65 28       	ld.w	r8,r2[0x48]
800075c8:	80 00       	ld.sh	r0,r0[0x0]
800075ca:	31 04       	mov	r4,16
800075cc:	80 00       	ld.sh	r0,r0[0x0]
800075ce:	31 5c       	mov	r12,21
800075d0:	80 00       	ld.sh	r0,r0[0x0]
800075d2:	31 c0       	mov	r0,28
800075d4:	00 00       	add	r0,r0
800075d6:	0b cc       	ld.ub	r12,r5[0x4]
800075d8:	80 00       	ld.sh	r0,r0[0x0]
800075da:	65 3c       	ld.w	r12,r2[0x4c]

800075dc <check_led_brd_side_lifetime>:
};

/* Each side of an LED board will get different usage */
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx);
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx)
{
800075dc:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
800075e0:	1a 97       	mov	r7,sp
800075e2:	20 4d       	sub	sp,16
800075e4:	18 98       	mov	r8,r12
800075e6:	ef 68 ff f0 	st.b	r7[-16],r8
	 * Find the record for this board's serial ID number, and check the usage hours and see if we
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
800075ea:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800075ee:	4c 2a       	lddpc	r10,800076f4 <check_led_brd_side_lifetime+0x118>
800075f0:	12 98       	mov	r8,r9
800075f2:	a3 68       	lsl	r8,0x2
800075f4:	12 08       	add	r8,r9
800075f6:	f4 08 00 08 	add	r8,r10,r8
800075fa:	2f f8       	sub	r8,-1
800075fc:	11 88       	ld.ub	r8,r8[0x0]
800075fe:	ef 68 ff f7 	st.b	r7[-9],r8
		hours++;
	}
	
#else
	
	hours = h.hrs[idx];
80007602:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80007606:	4b d8       	lddpc	r8,800076f8 <check_led_brd_side_lifetime+0x11c>
80007608:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000760c:	5c 78       	castu.h	r8
8000760e:	ef 48 ff f8 	st.w	r7[-8],r8
		

/*
 * Since we have to calculate the hours to see if the shelf is valid, finish out the calculations for the sanitizing time also. We'll need it later.
 */
	intensity = ((0.00002 * hours * hours) - (0.0699 * hours) + 92.879);
80007612:	ee fc ff f8 	ld.w	r12,r7[-8]
80007616:	f0 1f 00 3a 	mcall	800076fc <check_led_brd_side_lifetime+0x120>
8000761a:	e0 68 68 f1 	mov	r8,26865
8000761e:	ea 18 88 e3 	orh	r8,0x88e3
80007622:	e0 69 f8 b5 	mov	r9,63669
80007626:	ea 19 3e f4 	orh	r9,0x3ef4
8000762a:	f0 1f 00 36 	mcall	80007700 <check_led_brd_side_lifetime+0x124>
8000762e:	14 98       	mov	r8,r10
80007630:	16 99       	mov	r9,r11
80007632:	10 92       	mov	r2,r8
80007634:	12 93       	mov	r3,r9
80007636:	ee fc ff f8 	ld.w	r12,r7[-8]
8000763a:	f0 1f 00 31 	mcall	800076fc <check_led_brd_side_lifetime+0x120>
8000763e:	14 98       	mov	r8,r10
80007640:	16 99       	mov	r9,r11
80007642:	04 9a       	mov	r10,r2
80007644:	06 9b       	mov	r11,r3
80007646:	f0 1f 00 2f 	mcall	80007700 <check_led_brd_side_lifetime+0x124>
8000764a:	14 98       	mov	r8,r10
8000764c:	16 99       	mov	r9,r11
8000764e:	10 92       	mov	r2,r8
80007650:	12 93       	mov	r3,r9
80007652:	ee fc ff f8 	ld.w	r12,r7[-8]
80007656:	f0 1f 00 2a 	mcall	800076fc <check_led_brd_side_lifetime+0x120>
8000765a:	e0 68 8a db 	mov	r8,35547
8000765e:	ea 18 65 fd 	orh	r8,0x65fd
80007662:	e0 69 e4 f7 	mov	r9,58615
80007666:	ea 19 bf b1 	orh	r9,0xbfb1
8000766a:	f0 1f 00 26 	mcall	80007700 <check_led_brd_side_lifetime+0x124>
8000766e:	14 98       	mov	r8,r10
80007670:	16 99       	mov	r9,r11
80007672:	04 9a       	mov	r10,r2
80007674:	06 9b       	mov	r11,r3
80007676:	f0 1f 00 24 	mcall	80007704 <check_led_brd_side_lifetime+0x128>
8000767a:	14 98       	mov	r8,r10
8000767c:	16 99       	mov	r9,r11
8000767e:	10 9a       	mov	r10,r8
80007680:	12 9b       	mov	r11,r9
80007682:	e0 68 4b c7 	mov	r8,19399
80007686:	ea 18 89 37 	orh	r8,0x8937
8000768a:	e0 69 38 41 	mov	r9,14401
8000768e:	ea 19 40 57 	orh	r9,0x4057
80007692:	f0 1f 00 1d 	mcall	80007704 <check_led_brd_side_lifetime+0x128>
80007696:	14 98       	mov	r8,r10
80007698:	16 99       	mov	r9,r11
8000769a:	10 9a       	mov	r10,r8
8000769c:	12 9b       	mov	r11,r9
8000769e:	f0 1f 00 1b 	mcall	80007708 <check_led_brd_side_lifetime+0x12c>
800076a2:	18 98       	mov	r8,r12
800076a4:	ef 48 ff fc 	st.w	r7[-4],r8
		
	ledBrdSide[sideIdx].sanitizeMinutes = (c.initialDTE * 100)/intensity; //Shortest sanitize time is 20 minutes. Sanitize time increases as LED intensity drops with usage. Sanitize time is around 49 minutes when usage is at 2000 hours.
800076a8:	ef 36 ff f0 	ld.ub	r6,r7[-16]
800076ac:	49 88       	lddpc	r8,8000770c <check_led_brd_side_lifetime+0x130>
800076ae:	11 88       	ld.ub	r8,r8[0x0]
800076b0:	f0 08 10 64 	mul	r8,r8,100
800076b4:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
800076b8:	ee fb ff fc 	ld.w	r11,r7[-4]
800076bc:	10 9c       	mov	r12,r8
800076be:	f0 1f 00 15 	mcall	80007710 <check_led_brd_side_lifetime+0x134>
800076c2:	18 98       	mov	r8,r12
800076c4:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
800076c8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800076cc:	48 aa       	lddpc	r10,800076f4 <check_led_brd_side_lifetime+0x118>
800076ce:	0c 98       	mov	r8,r6
800076d0:	a3 68       	lsl	r8,0x2
800076d2:	0c 08       	add	r8,r6
800076d4:	10 0a       	add	r10,r8
800076d6:	12 98       	mov	r8,r9
800076d8:	b4 88       	st.b	r10[0x0],r8
	
	if (hours < 1999)
800076da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800076de:	e0 48 07 ce 	cp.w	r8,1998
800076e2:	e0 8b 00 04 	brhi	800076ea <check_led_brd_side_lifetime+0x10e>
	{
		return LED_BOARD_SIDE_WITHIN_LIFETIME_LIMIT;
800076e6:	30 18       	mov	r8,1
800076e8:	c0 28       	rjmp	800076ec <check_led_brd_side_lifetime+0x110>
	}
	else
	{
		return LED_BOARD_SIDE_PAST_LIFETIME_LIMIT;
800076ea:	30 08       	mov	r8,0
	}
}
800076ec:	10 9c       	mov	r12,r8
800076ee:	2f cd       	sub	sp,-16
800076f0:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
800076f4:	00 00       	add	r0,r0
800076f6:	0b f6       	ld.ub	r6,r5[0x7]
800076f8:	00 00       	add	r0,r0
800076fa:	0c 24       	rsub	r4,r6
800076fc:	80 00       	ld.sh	r0,r0[0x0]
800076fe:	c1 68       	rjmp	8000772a <check_led_brd_side_lifetimes+0x16>
80007700:	80 00       	ld.sh	r0,r0[0x0]
80007702:	bc e4       	st.b	lr[0x6],r4
80007704:	80 00       	ld.sh	r0,r0[0x0]
80007706:	c0 58       	rjmp	80007710 <check_led_brd_side_lifetime+0x134>
80007708:	80 00       	ld.sh	r0,r0[0x0]
8000770a:	c3 b0       	breq	80007780 <check_led_brd_side_lifetimes+0x6c>
8000770c:	00 00       	add	r0,r0
8000770e:	0b f4       	ld.ub	r4,r5[0x7]
80007710:	80 00       	ld.sh	r0,r0[0x0]
80007712:	c2 50       	breq	8000775c <check_led_brd_side_lifetimes+0x48>

80007714 <check_led_brd_side_lifetimes>:

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
80007714:	eb cd 40 c0 	pushm	r6-r7,lr
80007718:	1a 97       	mov	r7,sp
8000771a:	20 2d       	sub	sp,8
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
8000771c:	30 08       	mov	r8,0
8000771e:	ef 48 ff fc 	st.w	r7[-4],r8
80007722:	c3 78       	rjmp	80007790 <check_led_brd_side_lifetimes+0x7c>
	{
		brdIdx = ledBrdSide[i].boardIdx;
80007724:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007728:	49 ea       	lddpc	r10,800077a0 <check_led_brd_side_lifetimes+0x8c>
8000772a:	12 98       	mov	r8,r9
8000772c:	a3 68       	lsl	r8,0x2
8000772e:	12 08       	add	r8,r9
80007730:	f4 08 00 08 	add	r8,r10,r8
80007734:	2f c8       	sub	r8,-4
80007736:	11 88       	ld.ub	r8,r8[0x0]
80007738:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[brdIdx].present)
8000773c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007740:	49 9a       	lddpc	r10,800077a4 <check_led_brd_side_lifetimes+0x90>
80007742:	12 98       	mov	r8,r9
80007744:	a3 78       	lsl	r8,0x3
80007746:	12 18       	sub	r8,r9
80007748:	a1 78       	lsl	r8,0x1
8000774a:	f4 08 00 08 	add	r8,r10,r8
8000774e:	2f 88       	sub	r8,-8
80007750:	11 88       	ld.ub	r8,r8[0x0]
80007752:	58 08       	cp.w	r8,0
80007754:	c1 90       	breq	80007786 <check_led_brd_side_lifetimes+0x72>
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
80007756:	ee f6 ff fc 	ld.w	r6,r7[-4]
8000775a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000775e:	5c 58       	castu.b	r8
80007760:	10 9c       	mov	r12,r8
80007762:	f0 1f 00 12 	mcall	800077a8 <check_led_brd_side_lifetimes+0x94>
80007766:	18 98       	mov	r8,r12
80007768:	10 99       	mov	r9,r8
8000776a:	30 08       	mov	r8,0
8000776c:	f0 09 18 00 	cp.b	r9,r8
80007770:	5f 09       	sreq	r9
80007772:	48 ca       	lddpc	r10,800077a0 <check_led_brd_side_lifetimes+0x8c>
80007774:	0c 98       	mov	r8,r6
80007776:	a3 68       	lsl	r8,0x2
80007778:	0c 08       	add	r8,r6
8000777a:	f4 08 00 08 	add	r8,r10,r8
8000777e:	f0 ca ff fe 	sub	r10,r8,-2
80007782:	12 98       	mov	r8,r9
80007784:	b4 88       	st.b	r10[0x0],r8
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80007786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000778a:	2f f8       	sub	r8,-1
8000778c:	ef 48 ff fc 	st.w	r7[-4],r8
80007790:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007794:	58 78       	cp.w	r8,7
80007796:	fe 9a ff c7 	brle	80007724 <check_led_brd_side_lifetimes+0x10>
		if (ledBrd[brdIdx].present)
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
		}	
	}
}
8000779a:	2f ed       	sub	sp,-8
8000779c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800077a0:	00 00       	add	r0,r0
800077a2:	0b f6       	ld.ub	r6,r5[0x7]
800077a4:	00 00       	add	r0,r0
800077a6:	0b 46       	ld.w	r6,--r5
800077a8:	80 00       	ld.sh	r0,r0[0x0]
800077aa:	75 dc       	ld.w	r12,r10[0x74]

800077ac <adc_process_task>:

volatile avr32_adcifa_t *adcifa = &AVR32_ADCIFA; // ADCIFA IP registers address

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
800077ac:	eb cd 40 80 	pushm	r7,lr
800077b0:	1a 97       	mov	r7,sp
800077b2:	20 1d       	sub	sp,4
800077b4:	18 98       	mov	r8,r12
800077b6:	ef 68 ff fc 	st.b	r7[-4],r8
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
800077ba:	ef 39 ff fc 	ld.ub	r9,r7[-4]
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);
800077be:	12 98       	mov	r8,r9
800077c0:	a1 78       	lsl	r8,0x1
800077c2:	f0 09 00 09 	add	r9,r8,r9

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
800077c6:	49 88       	lddpc	r8,80007824 <adc_process_task+0x78>
800077c8:	10 09       	add	r9,r8
800077ca:	49 88       	lddpc	r8,80007828 <adc_process_task+0x7c>
800077cc:	70 08       	ld.w	r8,r8[0x0]
800077ce:	49 8a       	lddpc	r10,8000782c <adc_process_task+0x80>
800077d0:	30 0b       	mov	r11,0
800077d2:	10 9c       	mov	r12,r8
800077d4:	f0 1f 00 17 	mcall	80007830 <adc_process_task+0x84>
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);

	// Start ADCIFA sequencer 0
	adcifa_start_sequencer(adcifa, 0);
800077d8:	49 48       	lddpc	r8,80007828 <adc_process_task+0x7c>
800077da:	70 08       	ld.w	r8,r8[0x0]
800077dc:	30 0b       	mov	r11,0
800077de:	10 9c       	mov	r12,r8
800077e0:	f0 1f 00 15 	mcall	80007834 <adc_process_task+0x88>
800077e4:	c0 28       	rjmp	800077e8 <adc_process_task+0x3c>
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
			return bluesense_buf[shelfIdx];
		}
	}
800077e6:	d7 03       	nop
	// Get Values from sequencer 0
	while(1)
	{
		//TODO: need a timeout here and error handling in case the ADC gets stuck for some reason
		
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
800077e8:	49 08       	lddpc	r8,80007828 <adc_process_task+0x7c>
800077ea:	70 08       	ld.w	r8,r8[0x0]
800077ec:	49 39       	lddpc	r9,80007838 <adc_process_task+0x8c>
800077ee:	49 0a       	lddpc	r10,8000782c <adc_process_task+0x80>
800077f0:	30 0b       	mov	r11,0
800077f2:	10 9c       	mov	r12,r8
800077f4:	f0 1f 00 12 	mcall	8000783c <adc_process_task+0x90>
800077f8:	18 98       	mov	r8,r12
800077fa:	10 99       	mov	r9,r8
800077fc:	30 28       	mov	r8,2
800077fe:	f0 09 18 00 	cp.b	r9,r8
80007802:	cf 21       	brne	800077e6 <adc_process_task+0x3a>
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
80007804:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80007808:	48 c8       	lddpc	r8,80007838 <adc_process_task+0x8c>
8000780a:	90 08       	ld.sh	r8,r8[0x0]
8000780c:	48 d9       	lddpc	r9,80007840 <adc_process_task+0x94>
8000780e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
			return bluesense_buf[shelfIdx];
80007812:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007816:	48 b8       	lddpc	r8,80007840 <adc_process_task+0x94>
80007818:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
		}
	}
}
8000781c:	10 9c       	mov	r12,r8
8000781e:	2f fd       	sub	sp,-4
80007820:	e3 cd 80 80 	ldm	sp++,r7,pc
80007824:	00 00       	add	r0,r0
80007826:	00 a3       	st.w	r0++,r3
80007828:	00 00       	add	r0,r0
8000782a:	00 b0       	st.h	r0++,r0
8000782c:	00 00       	add	r0,r0
8000782e:	00 9c       	mov	r12,r0
80007830:	80 00       	ld.sh	r0,r0[0x0]
80007832:	35 7c       	mov	r12,87
80007834:	80 00       	ld.sh	r0,r0[0x0]
80007836:	3a 8c       	mov	r12,-88
80007838:	00 00       	add	r0,r0
8000783a:	0b 44       	ld.w	r4,--r5
8000783c:	80 00       	ld.sh	r0,r0[0x0]
8000783e:	3b 18       	mov	r8,-79
80007840:	00 00       	add	r0,r0
80007842:	08 3c       	cp.w	r12,r4

80007844 <check_shelf_for_devices>:
	DEVICES_PRESENT
};

unsigned char check_shelf_for_devices(unsigned char shelfPosition);
unsigned char check_shelf_for_devices(unsigned char shelfPosition)
{
80007844:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80007848:	1a 97       	mov	r7,sp
8000784a:	20 dd       	sub	sp,52
8000784c:	18 98       	mov	r8,r12
8000784e:	ef 68 ff cc 	st.b	r7[-52],r8
	U16 bluesense;
	
	led_shelf(shelfPosition, LED_ON); //TODO: do we finish this task fast enough to not check the door latch in here? Can't have LEDs on if the door opens
80007852:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80007856:	30 1b       	mov	r11,1
80007858:	10 9c       	mov	r12,r8
8000785a:	f0 1f 00 61 	mcall	800079dc <check_shelf_for_devices+0x198>
8000785e:	33 28       	mov	r8,50
80007860:	ef 48 ff e4 	st.w	r7[-28],r8
80007864:	e0 68 12 00 	mov	r8,4608
80007868:	ea 18 00 7a 	orh	r8,0x7a
8000786c:	ef 48 ff e0 	st.w	r7[-32],r8
80007870:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007874:	ef 48 ff ec 	st.w	r7[-20],r8
80007878:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000787c:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80007880:	ee f0 ff ec 	ld.w	r0,r7[-20]
80007884:	30 01       	mov	r1,0
80007886:	ee f2 ff e8 	ld.w	r2,r7[-24]
8000788a:	30 03       	mov	r3,0
8000788c:	e2 02 02 4a 	mul	r10,r1,r2
80007890:	e6 00 02 48 	mul	r8,r3,r0
80007894:	10 0a       	add	r10,r8
80007896:	e0 02 06 48 	mulu.d	r8,r0,r2
8000789a:	12 0a       	add	r10,r9
8000789c:	14 99       	mov	r9,r10
8000789e:	e0 6a 03 e7 	mov	r10,999
800078a2:	30 0b       	mov	r11,0
800078a4:	f0 0a 00 0a 	add	r10,r8,r10
800078a8:	f2 0b 00 4b 	adc	r11,r9,r11
800078ac:	e0 68 03 e8 	mov	r8,1000
800078b0:	30 09       	mov	r9,0
800078b2:	f0 1f 00 4c 	mcall	800079e0 <check_shelf_for_devices+0x19c>
800078b6:	14 98       	mov	r8,r10
800078b8:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800078ba:	ef 48 ff f4 	st.w	r7[-12],r8
800078be:	ee c8 00 30 	sub	r8,r7,48
800078c2:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800078c6:	e1 b8 00 42 	mfsr	r8,0x108
800078ca:	10 99       	mov	r9,r8
800078cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800078d0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800078d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800078d6:	70 09       	ld.w	r9,r8[0x0]
800078d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800078dc:	10 09       	add	r9,r8
800078de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800078e2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800078e4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800078e8:	30 08       	mov	r8,0
800078ea:	f3 68 00 08 	st.b	r9[8],r8
800078ee:	ee c8 00 30 	sub	r8,r7,48
800078f2:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800078f6:	e1 b8 00 42 	mfsr	r8,0x108
800078fa:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800078fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007902:	f1 39 00 08 	ld.ub	r9,r8[8]
80007906:	30 28       	mov	r8,2
80007908:	f0 09 18 00 	cp.b	r9,r8
8000790c:	c0 31       	brne	80007912 <check_shelf_for_devices+0xce>
    return false;
8000790e:	30 08       	mov	r8,0
80007910:	c4 38       	rjmp	80007996 <check_shelf_for_devices+0x152>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80007912:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007916:	f1 39 00 08 	ld.ub	r9,r8[8]
8000791a:	30 18       	mov	r8,1
8000791c:	f0 09 18 00 	cp.b	r9,r8
80007920:	c0 31       	brne	80007926 <check_shelf_for_devices+0xe2>
    return true;
80007922:	30 18       	mov	r8,1
80007924:	c3 98       	rjmp	80007996 <check_shelf_for_devices+0x152>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80007926:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000792a:	70 09       	ld.w	r9,r8[0x0]
8000792c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007930:	70 18       	ld.w	r8,r8[0x4]
80007932:	10 39       	cp.w	r9,r8
80007934:	e0 88 00 1a 	brls	80007968 <check_shelf_for_devices+0x124>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007938:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000793c:	70 08       	ld.w	r8,r8[0x0]
8000793e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007942:	10 39       	cp.w	r9,r8
80007944:	c1 02       	brcc	80007964 <check_shelf_for_devices+0x120>
80007946:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000794a:	70 18       	ld.w	r8,r8[0x4]
8000794c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007950:	10 39       	cp.w	r9,r8
80007952:	e0 88 00 09 	brls	80007964 <check_shelf_for_devices+0x120>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80007956:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000795a:	30 18       	mov	r8,1
8000795c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80007960:	30 18       	mov	r8,1
80007962:	c1 a8       	rjmp	80007996 <check_shelf_for_devices+0x152>
    }
    return false;
80007964:	30 08       	mov	r8,0
80007966:	c1 88       	rjmp	80007996 <check_shelf_for_devices+0x152>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007968:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000796c:	70 08       	ld.w	r8,r8[0x0]
8000796e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007972:	10 39       	cp.w	r9,r8
80007974:	c0 93       	brcs	80007986 <check_shelf_for_devices+0x142>
80007976:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000797a:	70 18       	ld.w	r8,r8[0x4]
8000797c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007980:	10 39       	cp.w	r9,r8
80007982:	e0 88 00 09 	brls	80007994 <check_shelf_for_devices+0x150>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80007986:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000798a:	30 18       	mov	r8,1
8000798c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80007990:	30 18       	mov	r8,1
80007992:	c0 28       	rjmp	80007996 <check_shelf_for_devices+0x152>
    }
    return false;
80007994:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80007996:	58 08       	cp.w	r8,0
80007998:	ca b0       	breq	800078ee <check_shelf_for_devices+0xaa>
	
	cpu_delay_ms(50, EC_CPU_CLOCK_FREQ);
		
	//Read bluesense for this shelf
	bluesense = 0;
8000799a:	30 08       	mov	r8,0
8000799c:	ef 58 ff de 	st.h	r7[-34],r8
	bluesense = adc_process_task(shelfPosition);
800079a0:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800079a4:	10 9c       	mov	r12,r8
800079a6:	f0 1f 00 10 	mcall	800079e4 <check_shelf_for_devices+0x1a0>
800079aa:	18 98       	mov	r8,r12
800079ac:	ef 58 ff de 	st.h	r7[-34],r8

	led_shelf(shelfPosition, LED_OFF);
800079b0:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800079b4:	30 0b       	mov	r11,0
800079b6:	10 9c       	mov	r12,r8
800079b8:	f0 1f 00 09 	mcall	800079dc <check_shelf_for_devices+0x198>
	

	if (bluesense > 0x800)
800079bc:	ef 09 ff de 	ld.sh	r9,r7[-34]
800079c0:	e0 68 08 00 	mov	r8,2048
800079c4:	f0 09 19 00 	cp.h	r9,r8
800079c8:	e0 88 00 04 	brls	800079d0 <check_shelf_for_devices+0x18c>
	{
		return DEVICES_PRESENT;
800079cc:	30 18       	mov	r8,1
800079ce:	c0 28       	rjmp	800079d2 <check_shelf_for_devices+0x18e>
	}
	else
	{
		return NO_DEVICES_PRESENT;
800079d0:	30 08       	mov	r8,0
	}
}
800079d2:	10 9c       	mov	r12,r8
800079d4:	2f 3d       	sub	sp,-52
800079d6:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800079da:	00 00       	add	r0,r0
800079dc:	80 00       	ld.sh	r0,r0[0x0]
800079de:	63 4c       	ld.w	r12,r1[0x50]
800079e0:	80 00       	ld.sh	r0,r0[0x0]
800079e2:	c4 3a       	rjmp	80007668 <check_led_brd_side_lifetime+0x8c>
800079e4:	80 00       	ld.sh	r0,r0[0x0]
800079e6:	77 ac       	ld.w	r12,r11[0x68]

800079e8 <check_shelves_for_devices>:

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
800079e8:	eb cd 40 c0 	pushm	r6-r7,lr
800079ec:	1a 97       	mov	r7,sp
800079ee:	20 1d       	sub	sp,4
	for (int i=0; i<NUM_SHELVES; i++)
800079f0:	30 08       	mov	r8,0
800079f2:	ef 48 ff fc 	st.w	r7[-4],r8
800079f6:	c3 d8       	rjmp	80007a70 <check_shelves_for_devices+0x88>
	{
		if (shelf[i].present)
800079f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800079fc:	4a 1a       	lddpc	r10,80007a80 <check_shelves_for_devices+0x98>
800079fe:	12 98       	mov	r8,r9
80007a00:	a3 68       	lsl	r8,0x2
80007a02:	12 08       	add	r8,r9
80007a04:	f4 08 00 08 	add	r8,r10,r8
80007a08:	2f c8       	sub	r8,-4
80007a0a:	11 88       	ld.ub	r8,r8[0x0]
80007a0c:	58 08       	cp.w	r8,0
80007a0e:	c2 c0       	breq	80007a66 <check_shelves_for_devices+0x7e>
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);
80007a10:	ee f6 ff fc 	ld.w	r6,r7[-4]
80007a14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007a18:	5c 58       	castu.b	r8
80007a1a:	10 9c       	mov	r12,r8
80007a1c:	f0 1f 00 1a 	mcall	80007a84 <check_shelves_for_devices+0x9c>
80007a20:	18 98       	mov	r8,r12
80007a22:	10 99       	mov	r9,r8
80007a24:	49 7a       	lddpc	r10,80007a80 <check_shelves_for_devices+0x98>
80007a26:	0c 98       	mov	r8,r6
80007a28:	a3 68       	lsl	r8,0x2
80007a2a:	0c 08       	add	r8,r6
80007a2c:	f4 08 00 08 	add	r8,r10,r8
80007a30:	f0 ca ff fd 	sub	r10,r8,-3
80007a34:	12 98       	mov	r8,r9
80007a36:	b4 88       	st.b	r10[0x0],r8
			
			if (shelf[i].devicesPresent)
80007a38:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007a3c:	49 1a       	lddpc	r10,80007a80 <check_shelves_for_devices+0x98>
80007a3e:	12 98       	mov	r8,r9
80007a40:	a3 68       	lsl	r8,0x2
80007a42:	12 08       	add	r8,r9
80007a44:	f4 08 00 08 	add	r8,r10,r8
80007a48:	2f d8       	sub	r8,-3
80007a4a:	11 88       	ld.ub	r8,r8[0x0]
80007a4c:	58 08       	cp.w	r8,0
80007a4e:	c0 c0       	breq	80007a66 <check_shelves_for_devices+0x7e>
			{
				print_ecdbg("Devices detected on shelf ");
80007a50:	48 ec       	lddpc	r12,80007a88 <check_shelves_for_devices+0xa0>
80007a52:	f0 1f 00 0f 	mcall	80007a8c <check_shelves_for_devices+0xa4>
				print_ecdbg_num(i);
80007a56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007a5a:	10 9c       	mov	r12,r8
80007a5c:	f0 1f 00 0d 	mcall	80007a90 <check_shelves_for_devices+0xa8>
				print_ecdbg("\r\n");
80007a60:	48 dc       	lddpc	r12,80007a94 <check_shelves_for_devices+0xac>
80007a62:	f0 1f 00 0b 	mcall	80007a8c <check_shelves_for_devices+0xa4>
}

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
	for (int i=0; i<NUM_SHELVES; i++)
80007a66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007a6a:	2f f8       	sub	r8,-1
80007a6c:	ef 48 ff fc 	st.w	r7[-4],r8
80007a70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007a74:	58 38       	cp.w	r8,3
80007a76:	fe 9a ff c1 	brle	800079f8 <check_shelves_for_devices+0x10>
				print_ecdbg_num(i);
				print_ecdbg("\r\n");
			}
		}
	}
}
80007a7a:	2f fd       	sub	sp,-4
80007a7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007a80:	00 00       	add	r0,r0
80007a82:	0b 8c       	ld.ub	r12,r5[0x0]
80007a84:	80 00       	ld.sh	r0,r0[0x0]
80007a86:	78 44       	ld.w	r4,r12[0x10]
80007a88:	80 00       	ld.sh	r0,r0[0x0]
80007a8a:	65 5c       	ld.w	r12,r2[0x54]
80007a8c:	80 00       	ld.sh	r0,r0[0x0]
80007a8e:	33 38       	mov	r8,51
80007a90:	80 00       	ld.sh	r0,r0[0x0]
80007a92:	72 90       	ld.w	r0,r9[0x24]
80007a94:	80 00       	ld.sh	r0,r0[0x0]
80007a96:	64 e8       	ld.w	r8,r2[0x38]

80007a98 <print_pca9952_errors>:


void print_pca9952_errors(unsigned char sideSel, unsigned char eflag0, unsigned char eflag1);
void print_pca9952_errors(unsigned char sideSel, unsigned char eflag0, unsigned char eflag1)
{
80007a98:	eb cd 40 80 	pushm	r7,lr
80007a9c:	1a 97       	mov	r7,sp
80007a9e:	20 7d       	sub	sp,28
80007aa0:	16 99       	mov	r9,r11
80007aa2:	14 98       	mov	r8,r10
80007aa4:	18 9a       	mov	r10,r12
80007aa6:	ef 6a ff ec 	st.b	r7[-20],r10
80007aaa:	ef 69 ff e8 	st.b	r7[-24],r9
80007aae:	ef 68 ff e4 	st.b	r7[-28],r8
	unsigned char bit;
	
	switch (sideSel)
80007ab2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80007ab6:	58 08       	cp.w	r8,0
80007ab8:	c4 80       	breq	80007b48 <print_pca9952_errors+0xb0>
80007aba:	58 18       	cp.w	r8,1
80007abc:	e0 81 00 b6 	brne	80007c28 <print_pca9952_errors+0x190>
	{
		case TOP:
			print_ecdbg("PCA9952 Error(s) on TOPDRIVE ");
80007ac0:	4d cc       	lddpc	r12,80007c30 <print_pca9952_errors+0x198>
80007ac2:	f0 1f 00 5d 	mcall	80007c34 <print_pca9952_errors+0x19c>
			
			for (int i=0; i<8; i++)
80007ac6:	30 08       	mov	r8,0
80007ac8:	ef 48 ff f4 	st.w	r7[-12],r8
80007acc:	c2 c8       	rjmp	80007b24 <print_pca9952_errors+0x8c>
			{
				bit = (1 << i);
80007ace:	30 19       	mov	r9,1
80007ad0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007ad4:	f2 08 09 48 	lsl	r8,r9,r8
80007ad8:	ef 68 ff f3 	st.b	r7[-13],r8
				if (bit & eflag0)
80007adc:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80007ae0:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80007ae4:	f3 e8 00 08 	and	r8,r9,r8
80007ae8:	5c 58       	castu.b	r8
80007aea:	c1 80       	breq	80007b1a <print_pca9952_errors+0x82>
				{
					print_ecdbg_num(i);
80007aec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007af0:	10 9c       	mov	r12,r8
80007af2:	f0 1f 00 52 	mcall	80007c38 <print_pca9952_errors+0x1a0>
					print_ecdbg(" ");
80007af6:	4d 2c       	lddpc	r12,80007c3c <print_pca9952_errors+0x1a4>
80007af8:	f0 1f 00 4f 	mcall	80007c34 <print_pca9952_errors+0x19c>
					sysErr.topdrive |= BIT(i); //SE_FAIL
80007afc:	4d 18       	lddpc	r8,80007c40 <print_pca9952_errors+0x1a8>
80007afe:	11 88       	ld.ub	r8,r8[0x0]
80007b00:	10 99       	mov	r9,r8
80007b02:	30 1a       	mov	r10,1
80007b04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007b08:	f4 08 09 48 	lsl	r8,r10,r8
80007b0c:	5c 58       	castu.b	r8
80007b0e:	f3 e8 10 08 	or	r8,r9,r8
80007b12:	5c 58       	castu.b	r8
80007b14:	5c 58       	castu.b	r8
80007b16:	4c b9       	lddpc	r9,80007c40 <print_pca9952_errors+0x1a8>
80007b18:	b2 88       	st.b	r9[0x0],r8
	switch (sideSel)
	{
		case TOP:
			print_ecdbg("PCA9952 Error(s) on TOPDRIVE ");
			
			for (int i=0; i<8; i++)
80007b1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007b1e:	2f f8       	sub	r8,-1
80007b20:	ef 48 ff f4 	st.w	r7[-12],r8
80007b24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007b28:	58 78       	cp.w	r8,7
80007b2a:	fe 9a ff d2 	brle	80007ace <print_pca9952_errors+0x36>
					print_ecdbg(" ");
					sysErr.topdrive |= BIT(i); //SE_FAIL
				}
			}
			
			print_ecdbg("\r\n");
80007b2e:	4c 6c       	lddpc	r12,80007c44 <print_pca9952_errors+0x1ac>
80007b30:	f0 1f 00 41 	mcall	80007c34 <print_pca9952_errors+0x19c>
			
			if (eflag1 != 0)
80007b34:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80007b38:	30 08       	mov	r8,0
80007b3a:	f0 09 18 00 	cp.b	r9,r8
80007b3e:	c7 40       	breq	80007c26 <print_pca9952_errors+0x18e>
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U7\r\n");
80007b40:	4c 2c       	lddpc	r12,80007c48 <print_pca9952_errors+0x1b0>
80007b42:	f0 1f 00 3d 	mcall	80007c34 <print_pca9952_errors+0x19c>
			}
			
			break;
80007b46:	c7 18       	rjmp	80007c28 <print_pca9952_errors+0x190>

		case BOTTOM:
			print_ecdbg("PCA9952 Error(s) on BOTDRIVE ");
80007b48:	4c 1c       	lddpc	r12,80007c4c <print_pca9952_errors+0x1b4>
80007b4a:	f0 1f 00 3b 	mcall	80007c34 <print_pca9952_errors+0x19c>
			
			for (int i=0; i<8; i++)
80007b4e:	30 08       	mov	r8,0
80007b50:	ef 48 ff f8 	st.w	r7[-8],r8
80007b54:	c2 78       	rjmp	80007ba2 <print_pca9952_errors+0x10a>
			{
				bit = (1 << i);
80007b56:	30 19       	mov	r9,1
80007b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b5c:	f2 08 09 48 	lsl	r8,r9,r8
80007b60:	ef 68 ff f3 	st.b	r7[-13],r8
				if (bit & eflag0)
80007b64:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80007b68:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80007b6c:	f3 e8 00 08 	and	r8,r9,r8
80007b70:	5c 58       	castu.b	r8
80007b72:	c1 30       	breq	80007b98 <print_pca9952_errors+0x100>
				{
					print_ecdbg_num(i);
80007b74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b78:	10 9c       	mov	r12,r8
80007b7a:	f0 1f 00 30 	mcall	80007c38 <print_pca9952_errors+0x1a0>
					print_ecdbg(" ");
80007b7e:	4b 0c       	lddpc	r12,80007c3c <print_pca9952_errors+0x1a4>
80007b80:	f0 1f 00 2d 	mcall	80007c34 <print_pca9952_errors+0x19c>
					sysErr.botdrive |= BIT(i); //SE_FAIL;
80007b84:	4a f8       	lddpc	r8,80007c40 <print_pca9952_errors+0x1a8>
80007b86:	70 19       	ld.w	r9,r8[0x4]
80007b88:	30 1a       	mov	r10,1
80007b8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b8e:	f4 08 09 48 	lsl	r8,r10,r8
80007b92:	10 49       	or	r9,r8
80007b94:	4a b8       	lddpc	r8,80007c40 <print_pca9952_errors+0x1a8>
80007b96:	91 19       	st.w	r8[0x4],r9
			break;

		case BOTTOM:
			print_ecdbg("PCA9952 Error(s) on BOTDRIVE ");
			
			for (int i=0; i<8; i++)
80007b98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b9c:	2f f8       	sub	r8,-1
80007b9e:	ef 48 ff f8 	st.w	r7[-8],r8
80007ba2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ba6:	58 78       	cp.w	r8,7
80007ba8:	fe 9a ff d7 	brle	80007b56 <print_pca9952_errors+0xbe>
					print_ecdbg(" ");
					sysErr.botdrive |= BIT(i); //SE_FAIL;
				}
			}
			
			for (int i=0; i<4; i++)
80007bac:	30 08       	mov	r8,0
80007bae:	ef 48 ff fc 	st.w	r7[-4],r8
80007bb2:	c2 98       	rjmp	80007c04 <print_pca9952_errors+0x16c>
			{
				bit = (1 << i);
80007bb4:	30 19       	mov	r9,1
80007bb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bba:	f2 08 09 48 	lsl	r8,r9,r8
80007bbe:	ef 68 ff f3 	st.b	r7[-13],r8
				if (bit & eflag1)
80007bc2:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80007bc6:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80007bca:	f3 e8 00 08 	and	r8,r9,r8
80007bce:	5c 58       	castu.b	r8
80007bd0:	c1 50       	breq	80007bfa <print_pca9952_errors+0x162>
				{
					print_ecdbg_num((i+8));
80007bd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bd6:	2f 88       	sub	r8,-8
80007bd8:	10 9c       	mov	r12,r8
80007bda:	f0 1f 00 18 	mcall	80007c38 <print_pca9952_errors+0x1a0>
					print_ecdbg(" ");
80007bde:	49 8c       	lddpc	r12,80007c3c <print_pca9952_errors+0x1a4>
80007be0:	f0 1f 00 15 	mcall	80007c34 <print_pca9952_errors+0x19c>
					sysErr.botdrive |= BIT(i+8); //SE_FAIL;
80007be4:	49 78       	lddpc	r8,80007c40 <print_pca9952_errors+0x1a8>
80007be6:	70 19       	ld.w	r9,r8[0x4]
80007be8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bec:	2f 88       	sub	r8,-8
80007bee:	30 1a       	mov	r10,1
80007bf0:	f4 08 09 48 	lsl	r8,r10,r8
80007bf4:	10 49       	or	r9,r8
80007bf6:	49 38       	lddpc	r8,80007c40 <print_pca9952_errors+0x1a8>
80007bf8:	91 19       	st.w	r8[0x4],r9
					print_ecdbg(" ");
					sysErr.botdrive |= BIT(i); //SE_FAIL;
				}
			}
			
			for (int i=0; i<4; i++)
80007bfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bfe:	2f f8       	sub	r8,-1
80007c00:	ef 48 ff fc 	st.w	r7[-4],r8
80007c04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c08:	58 38       	cp.w	r8,3
80007c0a:	fe 9a ff d5 	brle	80007bb4 <print_pca9952_errors+0x11c>
					print_ecdbg(" ");
					sysErr.botdrive |= BIT(i+8); //SE_FAIL;
				}
			}
			
			print_ecdbg("\r\n");
80007c0e:	48 ec       	lddpc	r12,80007c44 <print_pca9952_errors+0x1ac>
80007c10:	f0 1f 00 09 	mcall	80007c34 <print_pca9952_errors+0x19c>
			
			if ((eflag1 & 0xF0) != 0)
80007c14:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80007c18:	e2 18 00 f0 	andl	r8,0xf0,COH
80007c1c:	c0 60       	breq	80007c28 <print_pca9952_errors+0x190>
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U8\r\n");
80007c1e:	48 dc       	lddpc	r12,80007c50 <print_pca9952_errors+0x1b8>
80007c20:	f0 1f 00 05 	mcall	80007c34 <print_pca9952_errors+0x19c>
80007c24:	c0 28       	rjmp	80007c28 <print_pca9952_errors+0x190>
			if (eflag1 != 0)
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U7\r\n");
			}
			
			break;
80007c26:	d7 03       	nop
			{
				print_ecdbg("ERROR on unused channels: PCA9952 - Controller board U8\r\n");
			}
			break;
	}
}
80007c28:	2f 9d       	sub	sp,-28
80007c2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c2e:	00 00       	add	r0,r0
80007c30:	80 00       	ld.sh	r0,r0[0x0]
80007c32:	65 78       	ld.w	r8,r2[0x5c]
80007c34:	80 00       	ld.sh	r0,r0[0x0]
80007c36:	33 38       	mov	r8,51
80007c38:	80 00       	ld.sh	r0,r0[0x0]
80007c3a:	72 90       	ld.w	r0,r9[0x24]
80007c3c:	80 00       	ld.sh	r0,r0[0x0]
80007c3e:	65 98       	ld.w	r8,r2[0x64]
80007c40:	00 00       	add	r0,r0
80007c42:	0b cc       	ld.ub	r12,r5[0x4]
80007c44:	80 00       	ld.sh	r0,r0[0x0]
80007c46:	64 e8       	ld.w	r8,r2[0x38]
80007c48:	80 00       	ld.sh	r0,r0[0x0]
80007c4a:	65 9c       	ld.w	r12,r2[0x64]
80007c4c:	80 00       	ld.sh	r0,r0[0x0]
80007c4e:	65 d8       	ld.w	r8,r2[0x74]
80007c50:	80 00       	ld.sh	r0,r0[0x0]
80007c52:	65 f8       	ld.w	r8,r2[0x7c]

80007c54 <test_led_driver_channels>:

unsigned char topEflag0 = 0, topEflag1 = 0, botEflag0 = 0, botEflag1 = 0;

void test_led_driver_channels(void);
void test_led_driver_channels(void)
{
80007c54:	eb cd 40 80 	pushm	r7,lr
80007c58:	1a 97       	mov	r7,sp
80007c5a:	20 4d       	sub	sp,16
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
80007c5c:	30 08       	mov	r8,0
80007c5e:	ef 68 ff f3 	st.b	r7[-13],r8
	
	
	for (int i=0; i<NUM_SHELVES; i++)
80007c62:	30 08       	mov	r8,0
80007c64:	ef 48 ff f4 	st.w	r7[-12],r8
80007c68:	c1 78       	rjmp	80007c96 <test_led_driver_channels+0x42>
	{
		if (shelf[i].present)
80007c6a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007c6e:	4f 9a       	lddpc	r10,80007e50 <test_led_driver_channels+0x1fc>
80007c70:	12 98       	mov	r8,r9
80007c72:	a3 68       	lsl	r8,0x2
80007c74:	12 08       	add	r8,r9
80007c76:	f4 08 00 08 	add	r8,r10,r8
80007c7a:	2f c8       	sub	r8,-4
80007c7c:	11 88       	ld.ub	r8,r8[0x0]
80007c7e:	58 08       	cp.w	r8,0
80007c80:	c0 60       	breq	80007c8c <test_led_driver_channels+0x38>
		{
			numShelvesPresent++;
80007c82:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80007c86:	2f f8       	sub	r8,-1
80007c88:	ef 68 ff f3 	st.b	r7[-13],r8
void test_led_driver_channels(void)
{
	unsigned char tmp1, tmp2, numShelvesPresent = 0;
	
	
	for (int i=0; i<NUM_SHELVES; i++)
80007c8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007c90:	2f f8       	sub	r8,-1
80007c92:	ef 48 ff f4 	st.w	r7[-12],r8
80007c96:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007c9a:	58 38       	cp.w	r8,3
80007c9c:	fe 9a ff e7 	brle	80007c6a <test_led_driver_channels+0x16>
		{
			numShelvesPresent++;
		}
	}
	
	if (numShelvesPresent !=0)
80007ca0:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80007ca4:	30 08       	mov	r8,0
80007ca6:	f0 09 18 00 	cp.b	r9,r8
80007caa:	e0 80 00 be 	breq	80007e26 <test_led_driver_channels+0x1d2>
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
80007cae:	30 ca       	mov	r10,12
80007cb0:	34 3b       	mov	r11,67
80007cb2:	30 0c       	mov	r12,0
80007cb4:	f0 1f 00 68 	mcall	80007e54 <test_led_driver_channels+0x200>
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
80007cb8:	30 ca       	mov	r10,12
80007cba:	34 3b       	mov	r11,67
80007cbc:	30 1c       	mov	r12,1
80007cbe:	f0 1f 00 66 	mcall	80007e54 <test_led_driver_channels+0x200>

		for (int i=0; i<NUM_SHELVES; i++)
80007cc2:	30 08       	mov	r8,0
80007cc4:	ef 48 ff f8 	st.w	r7[-8],r8
80007cc8:	c1 98       	rjmp	80007cfa <test_led_driver_channels+0xa6>
		{
			if (shelf[i].present)
80007cca:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007cce:	4e 1a       	lddpc	r10,80007e50 <test_led_driver_channels+0x1fc>
80007cd0:	12 98       	mov	r8,r9
80007cd2:	a3 68       	lsl	r8,0x2
80007cd4:	12 08       	add	r8,r9
80007cd6:	f4 08 00 08 	add	r8,r10,r8
80007cda:	2f c8       	sub	r8,-4
80007cdc:	11 88       	ld.ub	r8,r8[0x0]
80007cde:	58 08       	cp.w	r8,0
80007ce0:	c0 80       	breq	80007cf0 <test_led_driver_channels+0x9c>
			{
				led_shelf(i, LED_ON);
80007ce2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ce6:	5c 58       	castu.b	r8
80007ce8:	30 1b       	mov	r11,1
80007cea:	10 9c       	mov	r12,r8
80007cec:	f0 1f 00 5b 	mcall	80007e58 <test_led_driver_channels+0x204>
	{
		//Tone down the current so all shelves can be turned on at once
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_TEST_DRIVER_CURRENT);

		for (int i=0; i<NUM_SHELVES; i++)
80007cf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007cf4:	2f f8       	sub	r8,-1
80007cf6:	ef 48 ff f8 	st.w	r7[-8],r8
80007cfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007cfe:	58 38       	cp.w	r8,3
80007d00:	fe 9a ff e5 	brle	80007cca <test_led_driver_channels+0x76>
			{
				led_shelf(i, LED_ON);
			}
		}

		PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0x40); //starts fault test
80007d04:	34 0a       	mov	r10,64
80007d06:	30 1b       	mov	r11,1
80007d08:	30 0c       	mov	r12,0
80007d0a:	f0 1f 00 53 	mcall	80007e54 <test_led_driver_channels+0x200>
		PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0x40); //starts fault test
80007d0e:	34 0a       	mov	r10,64
80007d10:	30 1b       	mov	r11,1
80007d12:	30 1c       	mov	r12,1
80007d14:	f0 1f 00 50 	mcall	80007e54 <test_led_driver_channels+0x200>
80007d18:	c0 28       	rjmp	80007d1c <test_led_driver_channels+0xc8>
				}
				
				break; //fault test for LED_TOP strings is complete
			}
			
		}
80007d1a:	d7 03       	nop
		PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0x40); //starts fault test
		PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0x40); //starts fault test
		
		while (1)
		{
			tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_MODE2);
80007d1c:	30 1b       	mov	r11,1
80007d1e:	30 0c       	mov	r12,0
80007d20:	f0 1f 00 4f 	mcall	80007e5c <test_led_driver_channels+0x208>
80007d24:	18 98       	mov	r8,r12
80007d26:	ef 68 ff f1 	st.b	r7[-15],r8
			
			if ((tmp1 & 0x40) == 0)
80007d2a:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80007d2e:	e2 18 00 40 	andl	r8,0x40,COH
80007d32:	cf 41       	brne	80007d1a <test_led_driver_channels+0xc6>
			{
				topEflag0 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);
80007d34:	34 4b       	mov	r11,68
80007d36:	30 0c       	mov	r12,0
80007d38:	f0 1f 00 49 	mcall	80007e5c <test_led_driver_channels+0x208>
80007d3c:	18 98       	mov	r8,r12
80007d3e:	4c 99       	lddpc	r9,80007e60 <test_led_driver_channels+0x20c>
80007d40:	b2 88       	st.b	r9[0x0],r8
				topEflag1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
80007d42:	34 5b       	mov	r11,69
80007d44:	30 0c       	mov	r12,0
80007d46:	f0 1f 00 46 	mcall	80007e5c <test_led_driver_channels+0x208>
80007d4a:	18 98       	mov	r8,r12
80007d4c:	4c 69       	lddpc	r9,80007e64 <test_led_driver_channels+0x210>
80007d4e:	b2 88       	st.b	r9[0x0],r8
				
				if ((topEflag0 != 0) || (topEflag1 != 0))
80007d50:	4c 48       	lddpc	r8,80007e60 <test_led_driver_channels+0x20c>
80007d52:	11 88       	ld.ub	r8,r8[0x0]
80007d54:	58 08       	cp.w	r8,0
80007d56:	c0 51       	brne	80007d60 <test_led_driver_channels+0x10c>
80007d58:	4c 38       	lddpc	r8,80007e64 <test_led_driver_channels+0x210>
80007d5a:	11 88       	ld.ub	r8,r8[0x0]
80007d5c:	58 08       	cp.w	r8,0
80007d5e:	c1 00       	breq	80007d7e <test_led_driver_channels+0x12a>
				{
					if (!firstTimeThroughPCA9952)
80007d60:	4c 28       	lddpc	r8,80007e68 <test_led_driver_channels+0x214>
80007d62:	11 88       	ld.ub	r8,r8[0x0]
80007d64:	58 08       	cp.w	r8,0
80007d66:	c0 e1       	brne	80007d82 <test_led_driver_channels+0x12e>
					{
						print_pca9952_errors(TOP, topEflag0, topEflag1);
80007d68:	4b f8       	lddpc	r8,80007e64 <test_led_driver_channels+0x210>
80007d6a:	11 88       	ld.ub	r8,r8[0x0]
80007d6c:	10 99       	mov	r9,r8
80007d6e:	4b d8       	lddpc	r8,80007e60 <test_led_driver_channels+0x20c>
80007d70:	11 88       	ld.ub	r8,r8[0x0]
80007d72:	12 9a       	mov	r10,r9
80007d74:	10 9b       	mov	r11,r8
80007d76:	30 1c       	mov	r12,1
80007d78:	f0 1f 00 3d 	mcall	80007e6c <test_led_driver_channels+0x218>
					}
				}
				
				break; //fault test for LED_TOP strings is complete
80007d7c:	c0 68       	rjmp	80007d88 <test_led_driver_channels+0x134>
80007d7e:	d7 03       	nop
80007d80:	c0 48       	rjmp	80007d88 <test_led_driver_channels+0x134>
80007d82:	d7 03       	nop
80007d84:	c0 28       	rjmp	80007d88 <test_led_driver_channels+0x134>
				}
				
				break; //fault test for LED_BOTTOM strings is complete
			}
			
		}
80007d86:	d7 03       	nop
			
		}
		
		while (1)
		{
			tmp2 = PCA9952_read_reg(LED_BOTTOM, PCA9952_MODE2);
80007d88:	30 1b       	mov	r11,1
80007d8a:	30 1c       	mov	r12,1
80007d8c:	f0 1f 00 34 	mcall	80007e5c <test_led_driver_channels+0x208>
80007d90:	18 98       	mov	r8,r12
80007d92:	ef 68 ff f2 	st.b	r7[-14],r8
			
			if ((tmp2 & 0x40) == 0)
80007d96:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80007d9a:	e2 18 00 40 	andl	r8,0x40,COH
80007d9e:	cf 41       	brne	80007d86 <test_led_driver_channels+0x132>
			{
				botEflag0 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);
80007da0:	34 4b       	mov	r11,68
80007da2:	30 1c       	mov	r12,1
80007da4:	f0 1f 00 2e 	mcall	80007e5c <test_led_driver_channels+0x208>
80007da8:	18 98       	mov	r8,r12
80007daa:	4b 29       	lddpc	r9,80007e70 <test_led_driver_channels+0x21c>
80007dac:	b2 88       	st.b	r9[0x0],r8
				botEflag1 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
80007dae:	34 5b       	mov	r11,69
80007db0:	30 1c       	mov	r12,1
80007db2:	f0 1f 00 2b 	mcall	80007e5c <test_led_driver_channels+0x208>
80007db6:	18 98       	mov	r8,r12
80007db8:	4a f9       	lddpc	r9,80007e74 <test_led_driver_channels+0x220>
80007dba:	b2 88       	st.b	r9[0x0],r8
				
				if ((botEflag0 != 0) || (botEflag1 != 0))
80007dbc:	4a d8       	lddpc	r8,80007e70 <test_led_driver_channels+0x21c>
80007dbe:	11 88       	ld.ub	r8,r8[0x0]
80007dc0:	58 08       	cp.w	r8,0
80007dc2:	c0 51       	brne	80007dcc <test_led_driver_channels+0x178>
80007dc4:	4a c8       	lddpc	r8,80007e74 <test_led_driver_channels+0x220>
80007dc6:	11 88       	ld.ub	r8,r8[0x0]
80007dc8:	58 08       	cp.w	r8,0
80007dca:	c0 f0       	breq	80007de8 <test_led_driver_channels+0x194>
				{
					if (!firstTimeThroughPCA9952)
80007dcc:	4a 78       	lddpc	r8,80007e68 <test_led_driver_channels+0x214>
80007dce:	11 88       	ld.ub	r8,r8[0x0]
80007dd0:	58 08       	cp.w	r8,0
80007dd2:	c0 b1       	brne	80007de8 <test_led_driver_channels+0x194>
					{
						print_pca9952_errors(BOTTOM, botEflag0, botEflag1);
80007dd4:	4a 88       	lddpc	r8,80007e74 <test_led_driver_channels+0x220>
80007dd6:	11 88       	ld.ub	r8,r8[0x0]
80007dd8:	10 99       	mov	r9,r8
80007dda:	4a 68       	lddpc	r8,80007e70 <test_led_driver_channels+0x21c>
80007ddc:	11 88       	ld.ub	r8,r8[0x0]
80007dde:	12 9a       	mov	r10,r9
80007de0:	10 9b       	mov	r11,r8
80007de2:	30 0c       	mov	r12,0
80007de4:	f0 1f 00 22 	mcall	80007e6c <test_led_driver_channels+0x218>
				break; //fault test for LED_BOTTOM strings is complete
			}
			
		}
		
		for (int i=0; i<NUM_SHELVES; i++)
80007de8:	30 08       	mov	r8,0
80007dea:	ef 48 ff fc 	st.w	r7[-4],r8
80007dee:	c0 d8       	rjmp	80007e08 <test_led_driver_channels+0x1b4>
		{
			led_shelf(i, LED_OFF);
80007df0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007df4:	5c 58       	castu.b	r8
80007df6:	30 0b       	mov	r11,0
80007df8:	10 9c       	mov	r12,r8
80007dfa:	f0 1f 00 18 	mcall	80007e58 <test_led_driver_channels+0x204>
				break; //fault test for LED_BOTTOM strings is complete
			}
			
		}
		
		for (int i=0; i<NUM_SHELVES; i++)
80007dfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e02:	2f f8       	sub	r8,-1
80007e04:	ef 48 ff fc 	st.w	r7[-4],r8
80007e08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e0c:	58 38       	cp.w	r8,3
80007e0e:	fe 9a ff f1 	brle	80007df0 <test_led_driver_channels+0x19c>
		{
			led_shelf(i, LED_OFF);
		}
		
		//Put driver current back to full power
		PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT);
80007e12:	36 4a       	mov	r10,100
80007e14:	34 3b       	mov	r11,67
80007e16:	30 0c       	mov	r12,0
80007e18:	f0 1f 00 0f 	mcall	80007e54 <test_led_driver_channels+0x200>
		PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT);
80007e1c:	36 4a       	mov	r10,100
80007e1e:	34 3b       	mov	r11,67
80007e20:	30 1c       	mov	r12,1
80007e22:	f0 1f 00 0d 	mcall	80007e54 <test_led_driver_channels+0x200>
	}
	
	sysErr.topdrive = topEflag0;
80007e26:	48 f8       	lddpc	r8,80007e60 <test_led_driver_channels+0x20c>
80007e28:	11 88       	ld.ub	r8,r8[0x0]
80007e2a:	49 49       	lddpc	r9,80007e78 <test_led_driver_channels+0x224>
80007e2c:	b2 88       	st.b	r9[0x0],r8
	sysErr.botdrive = (botEflag1 << 8) | botEflag0;
80007e2e:	49 28       	lddpc	r8,80007e74 <test_led_driver_channels+0x220>
80007e30:	11 88       	ld.ub	r8,r8[0x0]
80007e32:	f0 09 15 08 	lsl	r9,r8,0x8
80007e36:	48 f8       	lddpc	r8,80007e70 <test_led_driver_channels+0x21c>
80007e38:	11 88       	ld.ub	r8,r8[0x0]
80007e3a:	f3 e8 10 08 	or	r8,r9,r8
80007e3e:	10 99       	mov	r9,r8
80007e40:	48 e8       	lddpc	r8,80007e78 <test_led_driver_channels+0x224>
80007e42:	91 19       	st.w	r8[0x4],r9
	firstTimeThroughPCA9952 = 0;
80007e44:	48 99       	lddpc	r9,80007e68 <test_led_driver_channels+0x214>
80007e46:	30 08       	mov	r8,0
80007e48:	b2 88       	st.b	r9[0x0],r8
}
80007e4a:	2f cd       	sub	sp,-16
80007e4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e50:	00 00       	add	r0,r0
80007e52:	0b 8c       	ld.ub	r12,r5[0x0]
80007e54:	80 00       	ld.sh	r0,r0[0x0]
80007e56:	5e 8c       	retls	r12
80007e58:	80 00       	ld.sh	r0,r0[0x0]
80007e5a:	63 4c       	ld.w	r12,r1[0x50]
80007e5c:	80 00       	ld.sh	r0,r0[0x0]
80007e5e:	5f 10       	srne	r0
80007e60:	00 00       	add	r0,r0
80007e62:	07 cc       	ld.ub	r12,r3[0x4]
80007e64:	00 00       	add	r0,r0
80007e66:	07 cd       	ld.ub	sp,r3[0x4]
80007e68:	00 00       	add	r0,r0
80007e6a:	00 0d       	add	sp,r0
80007e6c:	80 00       	ld.sh	r0,r0[0x0]
80007e6e:	7a 98       	ld.w	r8,sp[0x24]
80007e70:	00 00       	add	r0,r0
80007e72:	07 ce       	ld.ub	lr,r3[0x4]
80007e74:	00 00       	add	r0,r0
80007e76:	07 cf       	ld.ub	pc,r3[0x4]
80007e78:	00 00       	add	r0,r0
80007e7a:	0b cc       	ld.ub	r12,r5[0x4]

80007e7c <set_shelves_active_inactive>:

void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
80007e7c:	eb cd 40 80 	pushm	r7,lr
80007e80:	1a 97       	mov	r7,sp
80007e82:	20 1d       	sub	sp,4

	test_led_driver_channels();
80007e84:	f0 1f 00 4f 	mcall	80007fc0 <set_shelves_active_inactive+0x144>
	
	numActiveShelves = 0;
80007e88:	4c f9       	lddpc	r9,80007fc4 <set_shelves_active_inactive+0x148>
80007e8a:	30 08       	mov	r8,0
80007e8c:	b2 88       	st.b	r9[0x0],r8
	
	for (int i=0; i<NUM_SHELVES; i++)
80007e8e:	30 08       	mov	r8,0
80007e90:	ef 48 ff fc 	st.w	r7[-4],r8
80007e94:	c1 08       	rjmp	80007eb4 <set_shelves_active_inactive+0x38>
	{
		shelf[i].active = SHELF_INACTIVE;
80007e96:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007e9a:	4c ca       	lddpc	r10,80007fc8 <set_shelves_active_inactive+0x14c>
80007e9c:	12 98       	mov	r8,r9
80007e9e:	a3 68       	lsl	r8,0x2
80007ea0:	12 08       	add	r8,r9
80007ea2:	f4 08 00 09 	add	r9,r10,r8
80007ea6:	30 08       	mov	r8,0
80007ea8:	b2 88       	st.b	r9[0x0],r8

	test_led_driver_channels();
	
	numActiveShelves = 0;
	
	for (int i=0; i<NUM_SHELVES; i++)
80007eaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007eae:	2f f8       	sub	r8,-1
80007eb0:	ef 48 ff fc 	st.w	r7[-4],r8
80007eb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007eb8:	58 38       	cp.w	r8,3
80007eba:	fe 9a ff ee 	brle	80007e96 <set_shelves_active_inactive+0x1a>
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80007ebe:	4c 38       	lddpc	r8,80007fc8 <set_shelves_active_inactive+0x14c>
80007ec0:	11 c8       	ld.ub	r8,r8[0x4]
80007ec2:	58 08       	cp.w	r8,0
80007ec4:	c1 90       	breq	80007ef6 <set_shelves_active_inactive+0x7a>
		shelf[0].devicesPresent && 
80007ec6:	4c 18       	lddpc	r8,80007fc8 <set_shelves_active_inactive+0x14c>
80007ec8:	11 b8       	ld.ub	r8,r8[0x3]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80007eca:	58 08       	cp.w	r8,0
80007ecc:	c1 50       	breq	80007ef6 <set_shelves_active_inactive+0x7a>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
80007ece:	4c 08       	lddpc	r8,80007fcc <set_shelves_active_inactive+0x150>
80007ed0:	11 a8       	ld.ub	r8,r8[0x2]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80007ed2:	58 08       	cp.w	r8,0
80007ed4:	c1 11       	brne	80007ef6 <set_shelves_active_inactive+0x7a>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
80007ed6:	4b e8       	lddpc	r8,80007fcc <set_shelves_active_inactive+0x150>
80007ed8:	11 f8       	ld.ub	r8,r8[0x7]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80007eda:	58 08       	cp.w	r8,0
80007edc:	c0 d1       	brne	80007ef6 <set_shelves_active_inactive+0x7a>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
	{
		shelf[0].active = SHELF_ACTIVE;
80007ede:	4b b9       	lddpc	r9,80007fc8 <set_shelves_active_inactive+0x14c>
80007ee0:	30 18       	mov	r8,1
80007ee2:	b2 88       	st.b	r9[0x0],r8
		numActiveShelves++;
80007ee4:	4b 88       	lddpc	r8,80007fc4 <set_shelves_active_inactive+0x148>
80007ee6:	11 88       	ld.ub	r8,r8[0x0]
80007ee8:	2f f8       	sub	r8,-1
80007eea:	5c 58       	castu.b	r8
80007eec:	4b 69       	lddpc	r9,80007fc4 <set_shelves_active_inactive+0x148>
80007eee:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 0 active\r\n");
80007ef0:	4b 8c       	lddpc	r12,80007fd0 <set_shelves_active_inactive+0x154>
80007ef2:	f0 1f 00 39 	mcall	80007fd4 <set_shelves_active_inactive+0x158>
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80007ef6:	4b 58       	lddpc	r8,80007fc8 <set_shelves_active_inactive+0x14c>
80007ef8:	f1 38 00 09 	ld.ub	r8,r8[9]
80007efc:	58 08       	cp.w	r8,0
80007efe:	c1 c0       	breq	80007f36 <set_shelves_active_inactive+0xba>
	shelf[1].devicesPresent &&
80007f00:	4b 28       	lddpc	r8,80007fc8 <set_shelves_active_inactive+0x14c>
80007f02:	f1 38 00 08 	ld.ub	r8,r8[8]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80007f06:	58 08       	cp.w	r8,0
80007f08:	c1 70       	breq	80007f36 <set_shelves_active_inactive+0xba>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
80007f0a:	4b 18       	lddpc	r8,80007fcc <set_shelves_active_inactive+0x150>
80007f0c:	f1 38 00 0c 	ld.ub	r8,r8[12]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80007f10:	58 08       	cp.w	r8,0
80007f12:	c1 21       	brne	80007f36 <set_shelves_active_inactive+0xba>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
80007f14:	4a e8       	lddpc	r8,80007fcc <set_shelves_active_inactive+0x150>
80007f16:	f1 38 00 11 	ld.ub	r8,r8[17]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80007f1a:	58 08       	cp.w	r8,0
80007f1c:	c0 d1       	brne	80007f36 <set_shelves_active_inactive+0xba>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
	{
		shelf[1].active = SHELF_ACTIVE;
80007f1e:	4a b9       	lddpc	r9,80007fc8 <set_shelves_active_inactive+0x14c>
80007f20:	30 18       	mov	r8,1
80007f22:	b2 d8       	st.b	r9[0x5],r8
		numActiveShelves++;
80007f24:	4a 88       	lddpc	r8,80007fc4 <set_shelves_active_inactive+0x148>
80007f26:	11 88       	ld.ub	r8,r8[0x0]
80007f28:	2f f8       	sub	r8,-1
80007f2a:	5c 58       	castu.b	r8
80007f2c:	4a 69       	lddpc	r9,80007fc4 <set_shelves_active_inactive+0x148>
80007f2e:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 1 active\r\n");
80007f30:	4a ac       	lddpc	r12,80007fd8 <set_shelves_active_inactive+0x15c>
80007f32:	f0 1f 00 29 	mcall	80007fd4 <set_shelves_active_inactive+0x158>
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80007f36:	4a 58       	lddpc	r8,80007fc8 <set_shelves_active_inactive+0x14c>
80007f38:	f1 38 00 0e 	ld.ub	r8,r8[14]
80007f3c:	58 08       	cp.w	r8,0
80007f3e:	c1 d0       	breq	80007f78 <set_shelves_active_inactive+0xfc>
	shelf[2].devicesPresent &&
80007f40:	4a 28       	lddpc	r8,80007fc8 <set_shelves_active_inactive+0x14c>
80007f42:	f1 38 00 0d 	ld.ub	r8,r8[13]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80007f46:	58 08       	cp.w	r8,0
80007f48:	c1 80       	breq	80007f78 <set_shelves_active_inactive+0xfc>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
80007f4a:	4a 18       	lddpc	r8,80007fcc <set_shelves_active_inactive+0x150>
80007f4c:	f1 38 00 16 	ld.ub	r8,r8[22]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80007f50:	58 08       	cp.w	r8,0
80007f52:	c1 31       	brne	80007f78 <set_shelves_active_inactive+0xfc>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
80007f54:	49 e8       	lddpc	r8,80007fcc <set_shelves_active_inactive+0x150>
80007f56:	f1 38 00 1b 	ld.ub	r8,r8[27]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
80007f5a:	58 08       	cp.w	r8,0
80007f5c:	c0 e1       	brne	80007f78 <set_shelves_active_inactive+0xfc>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
	{
		shelf[2].active = SHELF_ACTIVE;
80007f5e:	49 b9       	lddpc	r9,80007fc8 <set_shelves_active_inactive+0x14c>
80007f60:	30 18       	mov	r8,1
80007f62:	f3 68 00 0a 	st.b	r9[10],r8
		numActiveShelves++;
80007f66:	49 88       	lddpc	r8,80007fc4 <set_shelves_active_inactive+0x148>
80007f68:	11 88       	ld.ub	r8,r8[0x0]
80007f6a:	2f f8       	sub	r8,-1
80007f6c:	5c 58       	castu.b	r8
80007f6e:	49 69       	lddpc	r9,80007fc4 <set_shelves_active_inactive+0x148>
80007f70:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 2 active\r\n");
80007f72:	49 bc       	lddpc	r12,80007fdc <set_shelves_active_inactive+0x160>
80007f74:	f0 1f 00 18 	mcall	80007fd4 <set_shelves_active_inactive+0x158>
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
80007f78:	49 48       	lddpc	r8,80007fc8 <set_shelves_active_inactive+0x14c>
80007f7a:	f1 38 00 13 	ld.ub	r8,r8[19]
80007f7e:	58 08       	cp.w	r8,0
80007f80:	c1 d0       	breq	80007fba <set_shelves_active_inactive+0x13e>
	shelf[3].devicesPresent &&
80007f82:	49 28       	lddpc	r8,80007fc8 <set_shelves_active_inactive+0x14c>
80007f84:	f1 38 00 12 	ld.ub	r8,r8[18]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
80007f88:	58 08       	cp.w	r8,0
80007f8a:	c1 80       	breq	80007fba <set_shelves_active_inactive+0x13e>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
80007f8c:	49 08       	lddpc	r8,80007fcc <set_shelves_active_inactive+0x150>
80007f8e:	f1 38 00 20 	ld.ub	r8,r8[32]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
80007f92:	58 08       	cp.w	r8,0
80007f94:	c1 31       	brne	80007fba <set_shelves_active_inactive+0x13e>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
80007f96:	48 e8       	lddpc	r8,80007fcc <set_shelves_active_inactive+0x150>
80007f98:	f1 38 00 25 	ld.ub	r8,r8[37]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
80007f9c:	58 08       	cp.w	r8,0
80007f9e:	c0 e1       	brne	80007fba <set_shelves_active_inactive+0x13e>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
	{
		shelf[3].active = SHELF_ACTIVE;
80007fa0:	48 a9       	lddpc	r9,80007fc8 <set_shelves_active_inactive+0x14c>
80007fa2:	30 18       	mov	r8,1
80007fa4:	f3 68 00 0f 	st.b	r9[15],r8
		numActiveShelves++;
80007fa8:	48 78       	lddpc	r8,80007fc4 <set_shelves_active_inactive+0x148>
80007faa:	11 88       	ld.ub	r8,r8[0x0]
80007fac:	2f f8       	sub	r8,-1
80007fae:	5c 58       	castu.b	r8
80007fb0:	48 59       	lddpc	r9,80007fc4 <set_shelves_active_inactive+0x148>
80007fb2:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 3 active\r\n");
80007fb4:	48 bc       	lddpc	r12,80007fe0 <set_shelves_active_inactive+0x164>
80007fb6:	f0 1f 00 08 	mcall	80007fd4 <set_shelves_active_inactive+0x158>
	}
}
80007fba:	2f fd       	sub	sp,-4
80007fbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007fc0:	80 00       	ld.sh	r0,r0[0x0]
80007fc2:	7c 54       	ld.w	r4,lr[0x14]
80007fc4:	00 00       	add	r0,r0
80007fc6:	0c e6       	st.h	--r6,r6
80007fc8:	00 00       	add	r0,r0
80007fca:	0b 8c       	ld.ub	r12,r5[0x0]
80007fcc:	00 00       	add	r0,r0
80007fce:	0b f6       	ld.ub	r6,r5[0x7]
80007fd0:	80 00       	ld.sh	r0,r0[0x0]
80007fd2:	66 34       	ld.w	r4,r3[0xc]
80007fd4:	80 00       	ld.sh	r0,r0[0x0]
80007fd6:	33 38       	mov	r8,51
80007fd8:	80 00       	ld.sh	r0,r0[0x0]
80007fda:	66 48       	ld.w	r8,r3[0x10]
80007fdc:	80 00       	ld.sh	r0,r0[0x0]
80007fde:	66 5c       	ld.w	r12,r3[0x14]
80007fe0:	80 00       	ld.sh	r0,r0[0x0]
80007fe2:	66 70       	ld.w	r0,r3[0x1c]

80007fe4 <num_active_shelves>:

unsigned char num_active_shelves(void);
unsigned char num_active_shelves(void)
{
80007fe4:	eb cd 40 80 	pushm	r7,lr
80007fe8:	1a 97       	mov	r7,sp
	return numActiveShelves;
80007fea:	48 38       	lddpc	r8,80007ff4 <num_active_shelves+0x10>
80007fec:	11 88       	ld.ub	r8,r8[0x0]
}
80007fee:	10 9c       	mov	r12,r8
80007ff0:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ff4:	00 00       	add	r0,r0
80007ff6:	0c e6       	st.h	--r6,r6

80007ff8 <init_sys_clocks>:
/*
 * Using RC8M (internal 8MHz)
 */
void init_sys_clocks(void);
void init_sys_clocks(void)
{
80007ff8:	eb cd 40 80 	pushm	r7,lr
80007ffc:	1a 97       	mov	r7,sp
80007ffe:	20 1d       	sub	sp,4

//this kinda works for 100MHz, problems with TWIM, but maybe we can work around that 17may15
/*
 * From CLOCK_EXAMPLE31 which changes clock sources on the fly. Trying to get a faster clock so that we can work with the serial ID chip (DS2411) which needs control to 6us. 16may15
 */
	osc_enable(OSC_ID_RC8M);
80008000:	30 2c       	mov	r12,2
80008002:	f0 1f 00 10 	mcall	80008040 <init_sys_clocks+0x48>
	pll_config_init(&pcfg, PLL_SRC_RC8M, 1, EC_CPU_CLOCK_100MHZ/OSC_RC8M_NOMINAL_HZ);
80008006:	ee c8 00 04 	sub	r8,r7,4
8000800a:	30 c9       	mov	r9,12
8000800c:	30 1a       	mov	r10,1
8000800e:	30 2b       	mov	r11,2
80008010:	10 9c       	mov	r12,r8
80008012:	f0 1f 00 0d 	mcall	80008044 <init_sys_clocks+0x4c>
	pll_enable(&pcfg, 0);
80008016:	ee c8 00 04 	sub	r8,r7,4
8000801a:	30 0b       	mov	r11,0
8000801c:	10 9c       	mov	r12,r8
8000801e:	f0 1f 00 0b 	mcall	80008048 <init_sys_clocks+0x50>
	sysclk_set_prescalers(1,1,1,1);
80008022:	30 19       	mov	r9,1
80008024:	30 1a       	mov	r10,1
80008026:	30 1b       	mov	r11,1
80008028:	30 1c       	mov	r12,1
8000802a:	f0 1f 00 09 	mcall	8000804c <init_sys_clocks+0x54>
	pll_wait_for_lock(0);
8000802e:	30 0c       	mov	r12,0
80008030:	f0 1f 00 08 	mcall	80008050 <init_sys_clocks+0x58>
	sysclk_set_source(SYSCLK_SRC_PLL0);	
80008034:	30 3c       	mov	r12,3
80008036:	f0 1f 00 08 	mcall	80008054 <init_sys_clocks+0x5c>
	/* put the clock out on PC19 so we can check to make sure we set it up correctly */
	//Note this code comes from ASF example AVR32 SCIF example 3
//16may15 seems to cause problems, leave out for now	scif_start_gclk(AVR32_SCIF_GCLK_GCLK0PIN, &gclkOpt);
//16may15 seems to cause problems, leave out for now	gpio_enable_module_pin(AVR32_SCIF_GCLK_0_1_PIN, AVR32_SCIF_GCLK_0_1_FUNCTION);

}
8000803a:	2f fd       	sub	sp,-4
8000803c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008040:	80 00       	ld.sh	r0,r0[0x0]
80008042:	6e 68       	ld.w	r8,r7[0x18]
80008044:	80 00       	ld.sh	r0,r0[0x0]
80008046:	6f fc       	ld.w	r12,r7[0x7c]
80008048:	80 00       	ld.sh	r0,r0[0x0]
8000804a:	5b e0       	cp.w	r0,-2
8000804c:	80 00       	ld.sh	r0,r0[0x0]
8000804e:	5c f0       	rol	r0
80008050:	80 00       	ld.sh	r0,r0[0x0]
80008052:	71 0c       	ld.w	r12,r8[0x40]
80008054:	80 00       	ld.sh	r0,r0[0x0]
80008056:	5d f0       	*unknown*

80008058 <adc_process_init>:
 *
 *
 */
void adc_process_init(void);
void adc_process_init(void)
{
80008058:	eb cd 40 80 	pushm	r7,lr
8000805c:	1a 97       	mov	r7,sp
		{INPUT3_ADC_PIN, INPUT3_ADC_FUNCTION},
		{INPUT4_ADC_PIN, INPUT4_ADC_FUNCTION}
	};

	// Assign and enable GPIO pins to the ADC function.
	gpio_enable_module(ADCIFA_GPIO_MAP,
8000805e:	30 6b       	mov	r11,6
80008060:	48 bc       	lddpc	r12,8000808c <adc_process_init+0x34>
80008062:	f0 1f 00 0c 	mcall	80008090 <adc_process_init+0x38>
			sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));

	// Get ADCIFA Factory Configuration
	adcifa_get_calibration_data(adcifa, &adc_config_t);
80008066:	48 c8       	lddpc	r8,80008094 <adc_process_init+0x3c>
80008068:	70 08       	ld.w	r8,r8[0x0]
8000806a:	48 cb       	lddpc	r11,80008098 <adc_process_init+0x40>
8000806c:	10 9c       	mov	r12,r8
8000806e:	f0 1f 00 0c 	mcall	8000809c <adc_process_init+0x44>

	// Configure ADCIFA core
	adcifa_configure(adcifa, &adc_config_t, EC_CPU_CLOCK_FREQ);
80008072:	48 98       	lddpc	r8,80008094 <adc_process_init+0x3c>
80008074:	70 08       	ld.w	r8,r8[0x0]
80008076:	e0 6a 12 00 	mov	r10,4608
8000807a:	ea 1a 00 7a 	orh	r10,0x7a
8000807e:	48 7b       	lddpc	r11,80008098 <adc_process_init+0x40>
80008080:	10 9c       	mov	r12,r8
80008082:	f0 1f 00 08 	mcall	800080a0 <adc_process_init+0x48>

}
80008086:	e3 cd 80 80 	ldm	sp++,r7,pc
8000808a:	00 00       	add	r0,r0
8000808c:	80 01       	ld.sh	r1,r0[0x0]
8000808e:	20 20       	sub	r0,2
80008090:	80 00       	ld.sh	r0,r0[0x0]
80008092:	45 3c       	lddsp	r12,sp[0x14c]
80008094:	00 00       	add	r0,r0
80008096:	00 b0       	st.h	r0++,r0
80008098:	00 00       	add	r0,r0
8000809a:	00 88       	andn	r8,r0
8000809c:	80 00       	ld.sh	r0,r0[0x0]
8000809e:	33 84       	mov	r4,56
800080a0:	80 00       	ld.sh	r0,r0[0x0]
800080a2:	34 18       	mov	r8,65

800080a4 <twi_init>:
 *
 *
 */
static void twi_init(void);
static void twi_init(void)
{
800080a4:	eb cd 40 80 	pushm	r7,lr
800080a8:	1a 97       	mov	r7,sp
800080aa:	20 8d       	sub	sp,32
	const gpio_map_t PCA9952_TWI_GPIO_MAP = {
		{PCA9952_TWI_SCL_PIN, PCA9952_TWI_SCL_FUNCTION},
		{PCA9952_TWI_SDA_PIN, PCA9952_TWI_SDA_FUNCTION}
	};
800080ac:	49 a9       	lddpc	r9,80008114 <twi_init+0x70>
800080ae:	ee c8 00 10 	sub	r8,r7,16
800080b2:	20 08       	sub	r8,0
800080b4:	20 09       	sub	r9,0
800080b6:	72 0a       	ld.w	r10,r9[0x0]
800080b8:	91 0a       	st.w	r8[0x0],r10
800080ba:	72 1a       	ld.w	r10,r9[0x4]
800080bc:	91 1a       	st.w	r8[0x4],r10
800080be:	72 2a       	ld.w	r10,r9[0x8]
800080c0:	91 2a       	st.w	r8[0x8],r10
800080c2:	72 39       	ld.w	r9,r9[0xc]
800080c4:	91 39       	st.w	r8[0xc],r9
	twi_options_t PCA9952_TWI_OPTIONS = { //7apr15 make this *not* a const so we can change it and rerun twi_master_init() if necessary
		.pba_hz = FPBA_HZ,
		.speed = PCA9952_TWI_MASTER_SPEED,
		.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS, //7apr15
		.smbus        = false,
	};
800080c6:	49 59       	lddpc	r9,80008118 <twi_init+0x74>
800080c8:	ee c8 00 20 	sub	r8,r7,32
800080cc:	20 08       	sub	r8,0
800080ce:	20 09       	sub	r9,0
800080d0:	72 0a       	ld.w	r10,r9[0x0]
800080d2:	91 0a       	st.w	r8[0x0],r10
800080d4:	72 1a       	ld.w	r10,r9[0x4]
800080d6:	91 1a       	st.w	r8[0x4],r10
800080d8:	72 2a       	ld.w	r10,r9[0x8]
800080da:	91 2a       	st.w	r8[0x8],r10
800080dc:	72 39       	ld.w	r9,r9[0xc]
800080de:	91 39       	st.w	r8[0xc],r9

	// Assign I/Os to TWI.
	gpio_enable_module(PCA9952_TWI_GPIO_MAP,
800080e0:	ee c8 00 10 	sub	r8,r7,16
800080e4:	30 2b       	mov	r11,2
800080e6:	10 9c       	mov	r12,r8
800080e8:	f0 1f 00 0d 	mcall	8000811c <twi_init+0x78>
	sizeof(PCA9952_TWI_GPIO_MAP) / sizeof(PCA9952_TWI_GPIO_MAP[0]));
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
800080ec:	ee c8 00 20 	sub	r8,r7,32
800080f0:	10 9b       	mov	r11,r8
800080f2:	fe 7c 38 00 	mov	r12,-51200
800080f6:	f0 1f 00 0b 	mcall	80008120 <twi_init+0x7c>
	
	
	PCA9952_TWI_OPTIONS.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
800080fa:	36 18       	mov	r8,97
800080fc:	ef 48 ff e8 	st.w	r7[-24],r8
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
80008100:	ee c8 00 20 	sub	r8,r7,32
80008104:	10 9b       	mov	r11,r8
80008106:	fe 7c 38 00 	mov	r12,-51200
8000810a:	f0 1f 00 06 	mcall	80008120 <twi_init+0x7c>
	
	
}
8000810e:	2f 8d       	sub	sp,-32
80008110:	e3 cd 80 80 	ldm	sp++,r7,pc
80008114:	80 01       	ld.sh	r1,r0[0x0]
80008116:	20 00       	sub	r0,0
80008118:	80 01       	ld.sh	r1,r0[0x0]
8000811a:	20 10       	sub	r0,1
8000811c:	80 00       	ld.sh	r0,r0[0x0]
8000811e:	45 3c       	lddsp	r12,sp[0x14c]
80008120:	80 00       	ld.sh	r0,r0[0x0]
80008122:	50 00       	stdsp	sp[0x0],r0

80008124 <calc_sanitize_time>:
	STATE_SHUTDOWN_PROCESSES
};

unsigned char calc_sanitize_time(unsigned char shelfIdx);
unsigned char calc_sanitize_time(unsigned char shelfIdx)
{
80008124:	eb cd 40 80 	pushm	r7,lr
80008128:	1a 97       	mov	r7,sp
8000812a:	20 3d       	sub	sp,12
8000812c:	18 98       	mov	r8,r12
8000812e:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char uSideMinutes, lSideMinutes, minutes, boardIdx, sideIdx;
	
	boardIdx = shelf[shelfIdx].tLedIdx;							//top board in the shelf
80008132:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008136:	4a da       	lddpc	r10,800081e8 <calc_sanitize_time+0xc4>
80008138:	12 98       	mov	r8,r9
8000813a:	a3 68       	lsl	r8,0x2
8000813c:	12 08       	add	r8,r9
8000813e:	f4 08 00 08 	add	r8,r10,r8
80008142:	2f f8       	sub	r8,-1
80008144:	11 88       	ld.ub	r8,r8[0x0]
80008146:	ef 68 ff fe 	st.b	r7[-2],r8
	sideIdx = ledBrd[boardIdx].lSideIdx;						//lower side of the top board
8000814a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000814e:	4a 8a       	lddpc	r10,800081ec <calc_sanitize_time+0xc8>
80008150:	12 98       	mov	r8,r9
80008152:	a3 78       	lsl	r8,0x3
80008154:	12 18       	sub	r8,r9
80008156:	a1 78       	lsl	r8,0x1
80008158:	f4 08 00 08 	add	r8,r10,r8
8000815c:	2f 58       	sub	r8,-11
8000815e:	11 88       	ld.ub	r8,r8[0x0]
80008160:	ef 68 ff ff 	st.b	r7[-1],r8
	lSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
80008164:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008168:	4a 2a       	lddpc	r10,800081f0 <calc_sanitize_time+0xcc>
8000816a:	12 98       	mov	r8,r9
8000816c:	a3 68       	lsl	r8,0x2
8000816e:	12 08       	add	r8,r9
80008170:	f4 08 00 08 	add	r8,r10,r8
80008174:	11 88       	ld.ub	r8,r8[0x0]
80008176:	ef 68 ff fc 	st.b	r7[-4],r8
	

	boardIdx = shelf[shelfIdx].bLedIdx;							//bottom board in the shelf					
8000817a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000817e:	49 ba       	lddpc	r10,800081e8 <calc_sanitize_time+0xc4>
80008180:	12 98       	mov	r8,r9
80008182:	a3 68       	lsl	r8,0x2
80008184:	12 08       	add	r8,r9
80008186:	f4 08 00 08 	add	r8,r10,r8
8000818a:	2f e8       	sub	r8,-2
8000818c:	11 88       	ld.ub	r8,r8[0x0]
8000818e:	ef 68 ff fe 	st.b	r7[-2],r8
	sideIdx = ledBrd[boardIdx].uSideIdx;						//upper side of the bottom board
80008192:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80008196:	49 6a       	lddpc	r10,800081ec <calc_sanitize_time+0xc8>
80008198:	12 98       	mov	r8,r9
8000819a:	a3 78       	lsl	r8,0x3
8000819c:	12 18       	sub	r8,r9
8000819e:	a1 78       	lsl	r8,0x1
800081a0:	f4 08 00 08 	add	r8,r10,r8
800081a4:	2f 68       	sub	r8,-10
800081a6:	11 88       	ld.ub	r8,r8[0x0]
800081a8:	ef 68 ff ff 	st.b	r7[-1],r8
	uSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
800081ac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800081b0:	49 0a       	lddpc	r10,800081f0 <calc_sanitize_time+0xcc>
800081b2:	12 98       	mov	r8,r9
800081b4:	a3 68       	lsl	r8,0x2
800081b6:	12 08       	add	r8,r9
800081b8:	f4 08 00 08 	add	r8,r10,r8
800081bc:	11 88       	ld.ub	r8,r8[0x0]
800081be:	ef 68 ff fb 	st.b	r7[-5],r8

	minutes = (uSideMinutes >= lSideMinutes) ? uSideMinutes : lSideMinutes; //choose the sanitize time for the more worn-out leds
800081c2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800081c6:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800081ca:	ef 3a ff fb 	ld.ub	r10,r7[-5]
800081ce:	f0 0a 18 00 	cp.b	r10,r8
800081d2:	f2 08 17 20 	movhs	r8,r9
800081d6:	ef 68 ff fd 	st.b	r7[-3],r8
	
	return (minutes);
800081da:	ef 38 ff fd 	ld.ub	r8,r7[-3]
	
}
800081de:	10 9c       	mov	r12,r8
800081e0:	2f dd       	sub	sp,-12
800081e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800081e6:	00 00       	add	r0,r0
800081e8:	00 00       	add	r0,r0
800081ea:	0b 8c       	ld.ub	r12,r5[0x0]
800081ec:	00 00       	add	r0,r0
800081ee:	0b 46       	ld.w	r6,--r5
800081f0:	00 00       	add	r0,r0
800081f2:	0b f6       	ld.ub	r6,r5[0x7]

800081f4 <door_latch_open_kill_all_shelves>:


void door_latch_open_kill_all_shelves(void);
void door_latch_open_kill_all_shelves(void)
{
800081f4:	eb cd 40 80 	pushm	r7,lr
800081f8:	1a 97       	mov	r7,sp
	led_shelf(0, LED_OFF);
800081fa:	30 0b       	mov	r11,0
800081fc:	30 0c       	mov	r12,0
800081fe:	f0 1f 00 0a 	mcall	80008224 <door_latch_open_kill_all_shelves+0x30>
	led_shelf(1, LED_OFF);
80008202:	30 0b       	mov	r11,0
80008204:	30 1c       	mov	r12,1
80008206:	f0 1f 00 08 	mcall	80008224 <door_latch_open_kill_all_shelves+0x30>
	led_shelf(2, LED_OFF);
8000820a:	30 0b       	mov	r11,0
8000820c:	30 2c       	mov	r12,2
8000820e:	f0 1f 00 06 	mcall	80008224 <door_latch_open_kill_all_shelves+0x30>
	led_shelf(3, LED_OFF);
80008212:	30 0b       	mov	r11,0
80008214:	30 3c       	mov	r12,3
80008216:	f0 1f 00 04 	mcall	80008224 <door_latch_open_kill_all_shelves+0x30>
	
	print_ecdbg("Door latch opened, kill all shelves for safety.\r\n");
8000821a:	48 4c       	lddpc	r12,80008228 <door_latch_open_kill_all_shelves+0x34>
8000821c:	f0 1f 00 04 	mcall	8000822c <door_latch_open_kill_all_shelves+0x38>
}
80008220:	e3 cd 80 80 	ldm	sp++,r7,pc
80008224:	80 00       	ld.sh	r0,r0[0x0]
80008226:	63 4c       	ld.w	r12,r1[0x50]
80008228:	80 00       	ld.sh	r0,r0[0x0]
8000822a:	66 84       	ld.w	r4,r3[0x20]
8000822c:	80 00       	ld.sh	r0,r0[0x0]
8000822e:	33 38       	mov	r8,51

80008230 <usage_idx>:

unsigned char usage_idx(unsigned char * idPtr, unsigned char top_botn);
unsigned char usage_idx(unsigned char * idPtr, unsigned char top_botn)

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED
{
80008230:	eb cd 40 80 	pushm	r7,lr
80008234:	1a 97       	mov	r7,sp
80008236:	20 4d       	sub	sp,16
80008238:	ef 4c ff f4 	st.w	r7[-12],r12
8000823c:	16 98       	mov	r8,r11
8000823e:	ef 68 ff f0 	st.b	r7[-16],r8
	unsigned char tmpBoardId[6];
	
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008242:	30 08       	mov	r8,0
80008244:	ef 68 ff ff 	st.b	r7[-1],r8
80008248:	c8 c8       	rjmp	80008360 <usage_idx+0x130>
		} //if slotFilled (don't check against slots that haven't been assigned
	} //for each slot in usageShdw[sel]
	
#else

		if (sf[i].slotFilled)
8000824a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000824e:	4c c8       	lddpc	r8,8000837c <usage_idx+0x14c>
80008250:	a1 79       	lsl	r9,0x1
80008252:	2f f9       	sub	r9,-1
80008254:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008258:	f1 d8 c1 a1 	bfextu	r8,r8,0xd,0x1
8000825c:	5c 58       	castu.b	r8
8000825e:	c7 c0       	breq	80008356 <usage_idx+0x126>
		{
			tmpBoardId[0] = *(idPtr+0);
80008260:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008264:	11 88       	ld.ub	r8,r8[0x0]
80008266:	ef 68 ff f8 	st.b	r7[-8],r8
			tmpBoardId[1] = *(idPtr+1);
8000826a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000826e:	2f f8       	sub	r8,-1
80008270:	11 88       	ld.ub	r8,r8[0x0]
80008272:	ef 68 ff f9 	st.b	r7[-7],r8
			tmpBoardId[2] = *(idPtr+2);
80008276:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000827a:	2f e8       	sub	r8,-2
8000827c:	11 88       	ld.ub	r8,r8[0x0]
8000827e:	ef 68 ff fa 	st.b	r7[-6],r8
			tmpBoardId[3] = *(idPtr+3);
80008282:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008286:	2f d8       	sub	r8,-3
80008288:	11 88       	ld.ub	r8,r8[0x0]
8000828a:	ef 68 ff fb 	st.b	r7[-5],r8
			tmpBoardId[4] = *(idPtr+4);
8000828e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008292:	2f c8       	sub	r8,-4
80008294:	11 88       	ld.ub	r8,r8[0x0]
80008296:	ef 68 ff fc 	st.b	r7[-4],r8
			tmpBoardId[5] = *(idPtr+5);
8000829a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000829e:	2f b8       	sub	r8,-5
800082a0:	11 88       	ld.ub	r8,r8[0x0]
800082a2:	ef 68 ff fd 	st.b	r7[-3],r8
			
			
			if (tmpBoardId[0] == sf[i].id[0]) {
800082a6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800082aa:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800082ae:	4b 48       	lddpc	r8,8000837c <usage_idx+0x14c>
800082b0:	f0 0a 07 38 	ld.ub	r8,r8[r10<<0x3]
800082b4:	f0 09 18 00 	cp.b	r9,r8
800082b8:	c4 f1       	brne	80008356 <usage_idx+0x126>
				if (tmpBoardId[1] == sf[i].id[1]) {
800082ba:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800082be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800082c2:	4a fa       	lddpc	r10,8000837c <usage_idx+0x14c>
800082c4:	a3 78       	lsl	r8,0x3
800082c6:	f4 08 00 08 	add	r8,r10,r8
800082ca:	11 98       	ld.ub	r8,r8[0x1]
800082cc:	f0 09 18 00 	cp.b	r9,r8
800082d0:	c4 31       	brne	80008356 <usage_idx+0x126>
					if (tmpBoardId[2] == sf[i].id[2]) {
800082d2:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800082d6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800082da:	4a 98       	lddpc	r8,8000837c <usage_idx+0x14c>
800082dc:	a3 6a       	lsl	r10,0x2
800082de:	2f fa       	sub	r10,-1
800082e0:	f0 0a 07 18 	ld.ub	r8,r8[r10<<0x1]
800082e4:	f0 09 18 00 	cp.b	r9,r8
800082e8:	c3 71       	brne	80008356 <usage_idx+0x126>
						if (tmpBoardId[3] == sf[i].id[3]) {
800082ea:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800082ee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800082f2:	4a 3a       	lddpc	r10,8000837c <usage_idx+0x14c>
800082f4:	a3 78       	lsl	r8,0x3
800082f6:	f4 08 00 08 	add	r8,r10,r8
800082fa:	11 b8       	ld.ub	r8,r8[0x3]
800082fc:	f0 09 18 00 	cp.b	r9,r8
80008300:	c2 b1       	brne	80008356 <usage_idx+0x126>
							if (tmpBoardId[4] == sf[i].id[4]) {
80008302:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80008306:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000830a:	49 d8       	lddpc	r8,8000837c <usage_idx+0x14c>
8000830c:	a1 7a       	lsl	r10,0x1
8000830e:	2f fa       	sub	r10,-1
80008310:	f0 0a 07 28 	ld.ub	r8,r8[r10<<0x2]
80008314:	f0 09 18 00 	cp.b	r9,r8
80008318:	c1 f1       	brne	80008356 <usage_idx+0x126>
								if (tmpBoardId[5] == sf[i].id[5]) {
8000831a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000831e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008322:	49 7a       	lddpc	r10,8000837c <usage_idx+0x14c>
80008324:	a3 78       	lsl	r8,0x3
80008326:	f4 08 00 08 	add	r8,r10,r8
8000832a:	11 d8       	ld.ub	r8,r8[0x5]
8000832c:	f0 09 18 00 	cp.b	r9,r8
80008330:	c1 31       	brne	80008356 <usage_idx+0x126>
									if (top_botn == sf[i].top_botn)
80008332:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008336:	49 28       	lddpc	r8,8000837c <usage_idx+0x14c>
80008338:	a1 79       	lsl	r9,0x1
8000833a:	2f f9       	sub	r9,-1
8000833c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008340:	f1 d8 c1 e1 	bfextu	r8,r8,0xf,0x1
80008344:	5c 58       	castu.b	r8
80008346:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000834a:	f0 09 18 00 	cp.b	r9,r8
8000834e:	c0 41       	brne	80008356 <usage_idx+0x126>
									{
										return (i); //found a match!
80008350:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008354:	c0 f8       	rjmp	80008372 <usage_idx+0x142>

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED
{
	unsigned char tmpBoardId[6];
	
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008356:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000835a:	2f f8       	sub	r8,-1
8000835c:	ef 68 ff ff 	st.b	r7[-1],r8
80008360:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008364:	35 f8       	mov	r8,95
80008366:	f0 09 18 00 	cp.b	r9,r8
8000836a:	fe 98 ff 70 	brls	8000824a <usage_idx+0x1a>
		} //if slotFilled (don't check against slots that haven't been assigned
	} //for each slot in ush
	
#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED
	
	return NO_LED_BOARD_PRESENT; //no match found
8000836e:	e0 68 00 ff 	mov	r8,255
}
80008372:	10 9c       	mov	r12,r8
80008374:	2f cd       	sub	sp,-16
80008376:	e3 cd 80 80 	ldm	sp++,r7,pc
8000837a:	00 00       	add	r0,r0
8000837c:	00 00       	add	r0,r0
8000837e:	08 44       	or	r4,r4

80008380 <load_usage_indeces>:
	}
}
#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED

void load_usage_indeces(void)
{
80008380:	eb cd 40 c0 	pushm	r6-r7,lr
80008384:	1a 97       	mov	r7,sp
80008386:	20 2d       	sub	sp,8
	unsigned char top_botn, brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80008388:	30 08       	mov	r8,0
8000838a:	ef 48 ff fc 	st.w	r7[-4],r8
8000838e:	c4 78       	rjmp	8000841c <load_usage_indeces+0x9c>
	{
		brdIdx = ledBrdSide[i].boardIdx;
80008390:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008394:	4a 6a       	lddpc	r10,8000842c <load_usage_indeces+0xac>
80008396:	12 98       	mov	r8,r9
80008398:	a3 68       	lsl	r8,0x2
8000839a:	12 08       	add	r8,r9
8000839c:	f4 08 00 08 	add	r8,r10,r8
800083a0:	2f c8       	sub	r8,-4
800083a2:	11 88       	ld.ub	r8,r8[0x0]
800083a4:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[brdIdx].present)
800083a8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800083ac:	4a 1a       	lddpc	r10,80008430 <load_usage_indeces+0xb0>
800083ae:	12 98       	mov	r8,r9
800083b0:	a3 78       	lsl	r8,0x3
800083b2:	12 18       	sub	r8,r9
800083b4:	a1 78       	lsl	r8,0x1
800083b6:	f4 08 00 08 	add	r8,r10,r8
800083ba:	2f 88       	sub	r8,-8
800083bc:	11 88       	ld.ub	r8,r8[0x0]
800083be:	58 08       	cp.w	r8,0
800083c0:	c2 30       	breq	80008406 <load_usage_indeces+0x86>
		{
			top_botn = i%2;
800083c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800083c6:	f2 08 14 1f 	asr	r8,r9,0x1f
800083ca:	bf 98       	lsr	r8,0x1f
800083cc:	10 09       	add	r9,r8
800083ce:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800083d2:	f2 08 01 08 	sub	r8,r9,r8
800083d6:	ef 68 ff fa 	st.b	r7[-6],r8
			
			usageIdx[i] = usage_idx(&ledBrd[brdIdx].id[0], top_botn); //TODO: should change this nomenclature to upper/lower, we are talking about board sides here, not which board in the shelf, be consistent
800083da:	ee f6 ff fc 	ld.w	r6,r7[-4]
800083de:	ef 3a ff fa 	ld.ub	r10,r7[-6]
800083e2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800083e6:	12 98       	mov	r8,r9
800083e8:	a3 78       	lsl	r8,0x3
800083ea:	12 18       	sub	r8,r9
800083ec:	a1 78       	lsl	r8,0x1
800083ee:	49 19       	lddpc	r9,80008430 <load_usage_indeces+0xb0>
800083f0:	12 08       	add	r8,r9
800083f2:	2f f8       	sub	r8,-1
800083f4:	14 9b       	mov	r11,r10
800083f6:	10 9c       	mov	r12,r8
800083f8:	f0 1f 00 0f 	mcall	80008434 <load_usage_indeces+0xb4>
800083fc:	18 98       	mov	r8,r12
800083fe:	48 f9       	lddpc	r9,80008438 <load_usage_indeces+0xb8>
80008400:	f2 06 0b 08 	st.b	r9[r6],r8
80008404:	c0 78       	rjmp	80008412 <load_usage_indeces+0x92>
		}
		else
		{
			usageIdx[i] = NO_LED_BOARD_PRESENT;
80008406:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000840a:	48 ca       	lddpc	r10,80008438 <load_usage_indeces+0xb8>
8000840c:	3f f8       	mov	r8,-1
8000840e:	f4 09 0b 08 	st.b	r10[r9],r8

void load_usage_indeces(void)
{
	unsigned char top_botn, brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80008412:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008416:	2f f8       	sub	r8,-1
80008418:	ef 48 ff fc 	st.w	r7[-4],r8
8000841c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008420:	58 78       	cp.w	r8,7
80008422:	fe 9a ff b7 	brle	80008390 <load_usage_indeces+0x10>
		else
		{
			usageIdx[i] = NO_LED_BOARD_PRESENT;
		}
	}
}
80008426:	2f ed       	sub	sp,-8
80008428:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000842c:	00 00       	add	r0,r0
8000842e:	0b f6       	ld.ub	r6,r5[0x7]
80008430:	00 00       	add	r0,r0
80008432:	0b 46       	ld.w	r6,--r5
80008434:	80 00       	ld.sh	r0,r0[0x0]
80008436:	82 30       	ld.sh	r0,r1[0x6]
80008438:	00 00       	add	r0,r0
8000843a:	0b b8       	ld.ub	r8,r5[0x3]

8000843c <test_flash>:
	return SUCCESS;
}

#else
unsigned char test_flash(unsigned char sel)
{
8000843c:	eb cd 40 80 	pushm	r7,lr
80008440:	1a 97       	mov	r7,sp
80008442:	20 8d       	sub	sp,32
80008444:	18 98       	mov	r8,r12
80008446:	ef 68 ff e0 	st.b	r7[-32],r8
	volatile void* memPtr;
	unsigned char pattern[4] = {0x00, 0xAA, 0x55, 0xFF}, ubyte; //NOTE test 0xFF pattern last to essentially erase the flash
8000844a:	4c 08       	lddpc	r8,80008548 <test_flash+0x10c>
8000844c:	70 08       	ld.w	r8,r8[0x0]
8000844e:	ef 48 ff e4 	st.w	r7[-28],r8
	unsigned char *ubPtr;
	unsigned long memSize;
	
	switch(sel)
80008452:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80008456:	58 18       	cp.w	r8,1
80008458:	c1 30       	breq	8000847e <test_flash+0x42>
8000845a:	e0 89 00 05 	brgt	80008464 <test_flash+0x28>
8000845e:	58 08       	cp.w	r8,0
80008460:	c0 70       	breq	8000846e <test_flash+0x32>
80008462:	c2 58       	rjmp	800084ac <test_flash+0x70>
80008464:	58 28       	cp.w	r8,2
80008466:	c1 40       	breq	8000848e <test_flash+0x52>
80008468:	58 38       	cp.w	r8,3
8000846a:	c1 a0       	breq	8000849e <test_flash+0x62>
8000846c:	c2 08       	rjmp	800084ac <test_flash+0x70>
	{
		case 0:
			memPtr = &serialIdAndFlagsFlash;
8000846e:	4b 88       	lddpc	r8,8000854c <test_flash+0x110>
80008470:	ef 48 ff e8 	st.w	r7[-24],r8
			memSize = NUM_SERIAL_ID_BUFS_SECTORS * 128;
80008474:	e0 68 06 00 	mov	r8,1536
80008478:	ef 48 ff f4 	st.w	r7[-12],r8
			break;
8000847c:	c1 88       	rjmp	800084ac <test_flash+0x70>
		case 1:
			memPtr = &sanitationCyclesFlash;
8000847e:	4b 58       	lddpc	r8,80008550 <test_flash+0x114>
80008480:	ef 48 ff e8 	st.w	r7[-24],r8
			memSize = NUM_SAN_CYCLE_BUFS_SECTORS * 128;
80008484:	e0 68 03 00 	mov	r8,768
80008488:	ef 48 ff f4 	st.w	r7[-12],r8
			break;
8000848c:	c1 08       	rjmp	800084ac <test_flash+0x70>
		case 2:
			memPtr = &usageHoursFlash;
8000848e:	4b 28       	lddpc	r8,80008554 <test_flash+0x118>
80008490:	ef 48 ff e8 	st.w	r7[-24],r8
			memSize = NUM_USAGE_HOURS_BUFS_SECTORS * 128;
80008494:	e0 68 02 00 	mov	r8,512
80008498:	ef 48 ff f4 	st.w	r7[-12],r8
			break;
8000849c:	c0 88       	rjmp	800084ac <test_flash+0x70>
		case 3:
			memPtr = &usageMinutesFlash;
8000849e:	4a f8       	lddpc	r8,80008558 <test_flash+0x11c>
800084a0:	ef 48 ff e8 	st.w	r7[-24],r8
			memSize = NUM_USAGE_MINS_BUFS_SECTORS * 128;
800084a4:	e0 68 3a 00 	mov	r8,14848
800084a8:	ef 48 ff f4 	st.w	r7[-12],r8
			break;
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
800084ac:	30 08       	mov	r8,0
800084ae:	ef 68 ff fb 	st.b	r7[-5],r8
800084b2:	c3 e8       	rjmp	8000852e <test_flash+0xf2>
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
800084b4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800084b8:	ee 08 00 08 	add	r8,r7,r8
800084bc:	f1 38 ff e4 	ld.ub	r8,r8[-28]
800084c0:	30 19       	mov	r9,1
800084c2:	ee fa ff f4 	ld.w	r10,r7[-12]
800084c6:	10 9b       	mov	r11,r8
800084c8:	ee fc ff e8 	ld.w	r12,r7[-24]
800084cc:	f0 1f 00 24 	mcall	8000855c <test_flash+0x120>
		
		ubPtr = (unsigned char*) memPtr;
800084d0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800084d4:	ef 48 ff f0 	st.w	r7[-16],r8
		for (unsigned long j=0; j<memSize; j++)
800084d8:	30 08       	mov	r8,0
800084da:	ef 48 ff fc 	st.w	r7[-4],r8
800084de:	c1 d8       	rjmp	80008518 <test_flash+0xdc>
		{
			ubyte = (*ubPtr);
800084e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800084e4:	11 88       	ld.ub	r8,r8[0x0]
800084e6:	ef 68 ff ef 	st.b	r7[-17],r8
			if (ubyte != pattern[i])
800084ea:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800084ee:	ee 08 00 08 	add	r8,r7,r8
800084f2:	f1 38 ff e4 	ld.ub	r8,r8[-28]
800084f6:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800084fa:	f0 09 18 00 	cp.b	r9,r8
800084fe:	c0 30       	breq	80008504 <test_flash+0xc8>
			{
				return ERROR;
80008500:	30 18       	mov	r8,1
80008502:	c1 e8       	rjmp	8000853e <test_flash+0x102>
			}
			ubPtr++;
80008504:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008508:	2f f8       	sub	r8,-1
8000850a:	ef 48 ff f0 	st.w	r7[-16],r8
	for (unsigned char i=0; i<4; i++) //4 patterns to test
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
		
		ubPtr = (unsigned char*) memPtr;
		for (unsigned long j=0; j<memSize; j++)
8000850e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008512:	2f f8       	sub	r8,-1
80008514:	ef 48 ff fc 	st.w	r7[-4],r8
80008518:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000851c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008520:	10 39       	cp.w	r9,r8
80008522:	cd f3       	brcs	800084e0 <test_flash+0xa4>
			memPtr = &usageMinutesFlash;
			memSize = NUM_USAGE_MINS_BUFS_SECTORS * 128;
			break;
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
80008524:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008528:	2f f8       	sub	r8,-1
8000852a:	ef 68 ff fb 	st.b	r7[-5],r8
8000852e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80008532:	30 38       	mov	r8,3
80008534:	f0 09 18 00 	cp.b	r9,r8
80008538:	fe 98 ff be 	brls	800084b4 <test_flash+0x78>
			}
			ubPtr++;
		}
	}
	
	return SUCCESS;
8000853c:	30 08       	mov	r8,0
}
8000853e:	10 9c       	mov	r12,r8
80008540:	2f 8d       	sub	sp,-32
80008542:	e3 cd 80 80 	ldm	sp++,r7,pc
80008546:	00 00       	add	r0,r0
80008548:	80 01       	ld.sh	r1,r0[0x0]
8000854a:	1f fc       	ld.ub	r12,pc[0x7]
8000854c:	80 07       	ld.sh	r7,r0[0x0]
8000854e:	fa 00       	*unknown*
80008550:	80 07       	ld.sh	r7,r0[0x0]
80008552:	f7 00 80 07 	ld.sh	r0,r11[-32761]
80008556:	f5 00 80 07 	ld.sh	r0,r10[-32761]
8000855a:	bb 00       	ld.d	r0,sp
8000855c:	80 00       	ld.sh	r0,r0[0x0]
8000855e:	3e 64       	mov	r4,-26

80008560 <calc_region_checksum>:

#ifndef SERIAL_ID_AND_ALL_USAGE_COMBINED

unsigned char calc_region_checksum(unsigned char sel);
unsigned char calc_region_checksum(unsigned char sel)
{
80008560:	eb cd 40 80 	pushm	r7,lr
80008564:	1a 97       	mov	r7,sp
80008566:	20 5d       	sub	sp,20
80008568:	18 98       	mov	r8,r12
8000856a:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char csum = 0;
8000856e:	30 08       	mov	r8,0
80008570:	ef 68 ff f3 	st.b	r7[-13],r8

	switch(sel)
80008574:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80008578:	58 28       	cp.w	r8,2
8000857a:	e0 80 00 ae 	breq	800086d6 <calc_region_checksum+0x176>
8000857e:	e0 89 00 08 	brgt	8000858e <calc_region_checksum+0x2e>
80008582:	58 08       	cp.w	r8,0
80008584:	c0 c0       	breq	8000859c <calc_region_checksum+0x3c>
80008586:	58 18       	cp.w	r8,1
80008588:	e0 80 00 9e 	breq	800086c4 <calc_region_checksum+0x164>
8000858c:	c0 59       	rjmp	80008796 <calc_region_checksum+0x236>
8000858e:	58 38       	cp.w	r8,3
80008590:	e0 80 00 c7 	breq	8000871e <calc_region_checksum+0x1be>
80008594:	58 48       	cp.w	r8,4
80008596:	e0 80 00 f0 	breq	80008776 <calc_region_checksum+0x216>
8000859a:	cf e8       	rjmp	80008796 <calc_region_checksum+0x236>
	{
		case 0: //serial ID and flags
			csum = 0;
8000859c:	30 08       	mov	r8,0
8000859e:	ef 68 ff f3 	st.b	r7[-13],r8
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800085a2:	30 08       	mov	r8,0
800085a4:	ef 48 ff f4 	st.w	r7[-12],r8
800085a8:	c8 28       	rjmp	800086ac <calc_region_checksum+0x14c>
			{
				csum += sf[i].id[0];
800085aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800085ae:	4f e8       	lddpc	r8,800087a4 <calc_region_checksum+0x244>
800085b0:	f0 09 07 38 	ld.ub	r8,r8[r9<<0x3]
800085b4:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800085b8:	f2 08 00 08 	add	r8,r9,r8
800085bc:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].id[1];
800085c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085c4:	4f 89       	lddpc	r9,800087a4 <calc_region_checksum+0x244>
800085c6:	a3 78       	lsl	r8,0x3
800085c8:	f2 08 00 08 	add	r8,r9,r8
800085cc:	11 98       	ld.ub	r8,r8[0x1]
800085ce:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800085d2:	f2 08 00 08 	add	r8,r9,r8
800085d6:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].id[2];
800085da:	ee f9 ff f4 	ld.w	r9,r7[-12]
800085de:	4f 28       	lddpc	r8,800087a4 <calc_region_checksum+0x244>
800085e0:	a3 69       	lsl	r9,0x2
800085e2:	2f f9       	sub	r9,-1
800085e4:	f0 09 07 18 	ld.ub	r8,r8[r9<<0x1]
800085e8:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800085ec:	f2 08 00 08 	add	r8,r9,r8
800085f0:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].id[3];
800085f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085f8:	4e b9       	lddpc	r9,800087a4 <calc_region_checksum+0x244>
800085fa:	a3 78       	lsl	r8,0x3
800085fc:	f2 08 00 08 	add	r8,r9,r8
80008600:	11 b8       	ld.ub	r8,r8[0x3]
80008602:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80008606:	f2 08 00 08 	add	r8,r9,r8
8000860a:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].id[4];
8000860e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008612:	4e 58       	lddpc	r8,800087a4 <calc_region_checksum+0x244>
80008614:	a1 79       	lsl	r9,0x1
80008616:	2f f9       	sub	r9,-1
80008618:	f0 09 07 28 	ld.ub	r8,r8[r9<<0x2]
8000861c:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80008620:	f2 08 00 08 	add	r8,r9,r8
80008624:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].id[5];
80008628:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000862c:	4d e9       	lddpc	r9,800087a4 <calc_region_checksum+0x244>
8000862e:	a3 78       	lsl	r8,0x3
80008630:	f2 08 00 08 	add	r8,r9,r8
80008634:	11 d8       	ld.ub	r8,r8[0x5]
80008636:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8000863a:	f2 08 00 08 	add	r8,r9,r8
8000863e:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].maxUsageReached;
80008642:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008646:	4d 88       	lddpc	r8,800087a4 <calc_region_checksum+0x244>
80008648:	a1 79       	lsl	r9,0x1
8000864a:	2f f9       	sub	r9,-1
8000864c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008650:	f1 d8 c1 c1 	bfextu	r8,r8,0xe,0x1
80008654:	5c 58       	castu.b	r8
80008656:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8000865a:	f2 08 00 08 	add	r8,r9,r8
8000865e:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].slotFilled;
80008662:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008666:	4d 08       	lddpc	r8,800087a4 <calc_region_checksum+0x244>
80008668:	a1 79       	lsl	r9,0x1
8000866a:	2f f9       	sub	r9,-1
8000866c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008670:	f1 d8 c1 a1 	bfextu	r8,r8,0xd,0x1
80008674:	5c 58       	castu.b	r8
80008676:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8000867a:	f2 08 00 08 	add	r8,r9,r8
8000867e:	ef 68 ff f3 	st.b	r7[-13],r8
				csum += sf[i].top_botn;
80008682:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008686:	4c 88       	lddpc	r8,800087a4 <calc_region_checksum+0x244>
80008688:	a1 79       	lsl	r9,0x1
8000868a:	2f f9       	sub	r9,-1
8000868c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008690:	f1 d8 c1 e1 	bfextu	r8,r8,0xf,0x1
80008694:	5c 58       	castu.b	r8
80008696:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8000869a:	f2 08 00 08 	add	r8,r9,r8
8000869e:	ef 68 ff f3 	st.b	r7[-13],r8

	switch(sel)
	{
		case 0: //serial ID and flags
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800086a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800086a6:	2f f8       	sub	r8,-1
800086a8:	ef 48 ff f4 	st.w	r7[-12],r8
800086ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800086b0:	e0 48 00 5f 	cp.w	r8,95
800086b4:	fe 9a ff 7b 	brle	800085aa <calc_region_checksum+0x4a>
				csum += sf[i].id[5];
				csum += sf[i].maxUsageReached;
				csum += sf[i].slotFilled;
				csum += sf[i].top_botn;
			}
			csum = ((csum ^ 0xFF) & 0xFF);
800086b8:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800086bc:	5c d8       	com	r8
800086be:	ef 68 ff f3 	st.b	r7[-13],r8
			break;
800086c2:	c6 a8       	rjmp	80008796 <calc_region_checksum+0x236>

		case 1: //san cycles
			csum = ((sanc.cycles ^ 0xFF) & 0xFF);
800086c4:	4b 98       	lddpc	r8,800087a8 <calc_region_checksum+0x248>
800086c6:	70 08       	ld.w	r8,r8[0x0]
800086c8:	f1 d8 c1 94 	bfextu	r8,r8,0xc,0x14
800086cc:	5c 58       	castu.b	r8
800086ce:	5c d8       	com	r8
800086d0:	ef 68 ff f3 	st.b	r7[-13],r8
			break;
800086d4:	c6 18       	rjmp	80008796 <calc_region_checksum+0x236>

		case 2: //usage hours
			csum = 0;
800086d6:	30 08       	mov	r8,0
800086d8:	ef 68 ff f3 	st.b	r7[-13],r8
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800086dc:	30 08       	mov	r8,0
800086de:	ef 48 ff f8 	st.w	r7[-8],r8
800086e2:	c1 28       	rjmp	80008706 <calc_region_checksum+0x1a6>
			{
				csum += h.hrs[i];
800086e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800086e8:	4b 18       	lddpc	r8,800087ac <calc_region_checksum+0x24c>
800086ea:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800086ee:	5c 58       	castu.b	r8
800086f0:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800086f4:	f2 08 00 08 	add	r8,r9,r8
800086f8:	ef 68 ff f3 	st.b	r7[-13],r8
			csum = ((sanc.cycles ^ 0xFF) & 0xFF);
			break;

		case 2: //usage hours
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800086fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008700:	2f f8       	sub	r8,-1
80008702:	ef 48 ff f8 	st.w	r7[-8],r8
80008706:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000870a:	e0 48 00 5f 	cp.w	r8,95
8000870e:	fe 9a ff eb 	brle	800086e4 <calc_region_checksum+0x184>
			{
				csum += h.hrs[i];
			}
			csum = ((csum ^ 0xFF) & 0xFF);
80008712:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80008716:	5c d8       	com	r8
80008718:	ef 68 ff f3 	st.b	r7[-13],r8
			break;
8000871c:	c3 d8       	rjmp	80008796 <calc_region_checksum+0x236>

		case 3: //usage mins
			csum = 0;
8000871e:	30 08       	mov	r8,0
80008720:	ef 68 ff f3 	st.b	r7[-13],r8
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008724:	30 08       	mov	r8,0
80008726:	ef 48 ff fc 	st.w	r7[-4],r8
8000872a:	c1 18       	rjmp	8000874c <calc_region_checksum+0x1ec>
			{
				csum += m.mins[i];
8000872c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008730:	4a 09       	lddpc	r9,800087b0 <calc_region_checksum+0x250>
80008732:	f2 08 07 08 	ld.ub	r8,r9[r8]
80008736:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8000873a:	f2 08 00 08 	add	r8,r9,r8
8000873e:	ef 68 ff f3 	st.b	r7[-13],r8
			csum = ((csum ^ 0xFF) & 0xFF);
			break;

		case 3: //usage mins
			csum = 0;
			for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008742:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008746:	2f f8       	sub	r8,-1
80008748:	ef 48 ff fc 	st.w	r7[-4],r8
8000874c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008750:	e0 48 00 5f 	cp.w	r8,95
80008754:	fe 9a ff ec 	brle	8000872c <calc_region_checksum+0x1cc>
			{
				csum += m.mins[i];
			}
			csum += m.sanMins;
80008758:	49 68       	lddpc	r8,800087b0 <calc_region_checksum+0x250>
8000875a:	71 88       	ld.w	r8,r8[0x60]
8000875c:	5c 58       	castu.b	r8
8000875e:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80008762:	f2 08 00 08 	add	r8,r9,r8
80008766:	ef 68 ff f3 	st.b	r7[-13],r8
			csum = ((csum ^ 0xFF) & 0xFF);
8000876a:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000876e:	5c d8       	com	r8
80008770:	ef 68 ff f3 	st.b	r7[-13],r8
			break;
80008774:	c1 18       	rjmp	80008796 <calc_region_checksum+0x236>
		case 4: //configuration
			csum = 0;
80008776:	30 08       	mov	r8,0
80008778:	ef 68 ff f3 	st.b	r7[-13],r8
			csum += c.initialDTE;
8000877c:	48 e8       	lddpc	r8,800087b4 <calc_region_checksum+0x254>
8000877e:	11 88       	ld.ub	r8,r8[0x0]
80008780:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80008784:	f2 08 00 08 	add	r8,r9,r8
80008788:	ef 68 ff f3 	st.b	r7[-13],r8
			csum = ((csum ^ 0xFF) & 0xFF);
8000878c:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80008790:	5c d8       	com	r8
80008792:	ef 68 ff f3 	st.b	r7[-13],r8
			break;
	}
	
	return csum;	
80008796:	ef 38 ff f3 	ld.ub	r8,r7[-13]
}
8000879a:	10 9c       	mov	r12,r8
8000879c:	2f bd       	sub	sp,-20
8000879e:	e3 cd 80 80 	ldm	sp++,r7,pc
800087a2:	00 00       	add	r0,r0
800087a4:	00 00       	add	r0,r0
800087a6:	08 44       	or	r4,r4
800087a8:	00 00       	add	r0,r0
800087aa:	0c 20       	rsub	r0,r6
800087ac:	00 00       	add	r0,r0
800087ae:	0c 24       	rsub	r4,r6
800087b0:	00 00       	add	r0,r0
800087b2:	0c f4       	st.b	--r6,r4
800087b4:	00 00       	add	r0,r0
800087b6:	0b f4       	ld.ub	r4,r5[0x7]

800087b8 <eval_region>:

unsigned char eval_region(unsigned char sel);
unsigned char eval_region(unsigned char sel)
{
800087b8:	eb cd 40 80 	pushm	r7,lr
800087bc:	1a 97       	mov	r7,sp
800087be:	fa cd 04 80 	sub	sp,sp,1152
800087c2:	18 98       	mov	r8,r12
800087c4:	ef 68 fb 80 	st.b	r7[-1152],r8
	CONFIGURATION					tmpC;
	
	unsigned char					csum;
	long							flashOffset;
	long							tmpFlashOffset;
	unsigned char					retVal = 0; //NOT GOOD
800087c8:	30 08       	mov	r8,0
800087ca:	ef 68 ff c7 	st.b	r7[-57],r8
	

	unsigned long tmpHours, uHours, tmpMinutes, uMinutes, tmpSlotsFilled, uSlotsFilled;
	
	print_ecdbg("eval_region() ");
800087ce:	fe fc 06 06 	ld.w	r12,pc[1542]
800087d2:	f0 1f 01 82 	mcall	80008dd8 <eval_region+0x620>
	
	switch (sel)
800087d6:	ef 38 fb 80 	ld.ub	r8,r7[-1152]
800087da:	58 28       	cp.w	r8,2
800087dc:	e0 80 01 47 	breq	80008a6a <eval_region+0x2b2>
800087e0:	e0 89 00 09 	brgt	800087f2 <eval_region+0x3a>
800087e4:	58 08       	cp.w	r8,0
800087e6:	c0 e0       	breq	80008802 <eval_region+0x4a>
800087e8:	58 18       	cp.w	r8,1
800087ea:	e0 80 00 c1 	breq	8000896c <eval_region+0x1b4>
800087ee:	e0 8f 02 ec 	bral	80008dc6 <eval_region+0x60e>
800087f2:	58 38       	cp.w	r8,3
800087f4:	e0 80 01 e5 	breq	80008bbe <eval_region+0x406>
800087f8:	58 48       	cp.w	r8,4
800087fa:	e0 80 02 7d 	breq	80008cf4 <eval_region+0x53c>
800087fe:	e0 8f 02 e4 	bral	80008dc6 <eval_region+0x60e>
	{
		case 0: //serial ID and flags
			
			print_ecdbg("region 0 - serial ID and flags\r\n");
80008802:	fe fc 05 da 	ld.w	r12,pc[1498]
80008806:	f0 1f 01 75 	mcall	80008dd8 <eval_region+0x620>
			
			memset(&tmpSf, 0x00, sizeof(sf));
8000880a:	ee c8 03 48 	sub	r8,r7,840
8000880e:	e0 6a 03 00 	mov	r10,768
80008812:	30 0b       	mov	r11,0
80008814:	10 9c       	mov	r12,r8
80008816:	f0 1f 01 73 	mcall	80008de0 <eval_region+0x628>
			
			for (unsigned int i=0; i<(NUM_SERIAL_ID_BUFS_SECTORS / NUM_SERIAL_ID_SECTORS_PER_BUF); i++)
8000881a:	30 08       	mov	r8,0
8000881c:	ef 48 ff e0 	st.w	r7[-32],r8
80008820:	c8 f8       	rjmp	8000893e <eval_region+0x186>
			{
				flashOffset =  (i* 128 * NUM_SERIAL_ID_SECTORS_PER_BUF);
80008822:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008826:	12 98       	mov	r8,r9
80008828:	a1 78       	lsl	r8,0x1
8000882a:	12 08       	add	r8,r9
8000882c:	a9 68       	lsl	r8,0x8
8000882e:	ef 48 ff bc 	st.w	r7[-68],r8
				tmpFlashOffset = flashOffset + (unsigned long)serialIdAndFlagsFlash;
80008832:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008836:	fe f8 05 ae 	ld.w	r8,pc[1454]
8000883a:	f2 08 00 08 	add	r8,r9,r8
8000883e:	ef 48 ff c0 	st.w	r7[-64],r8
				memcpy(&sf, (const void*) tmpFlashOffset, sizeof(sf));
80008842:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008846:	e0 6a 03 00 	mov	r10,768
8000884a:	10 9b       	mov	r11,r8
8000884c:	fe fc 05 9c 	ld.w	r12,pc[1436]
80008850:	f0 1f 01 67 	mcall	80008dec <eval_region+0x634>
				
				csum = calc_region_checksum(0);
80008854:	30 0c       	mov	r12,0
80008856:	f0 1f 01 67 	mcall	80008df0 <eval_region+0x638>
8000885a:	18 98       	mov	r8,r12
8000885c:	ef 68 ff bb 	st.b	r7[-69],r8

				if (csum == sf[0].csum) //checksum is good
80008860:	fe f8 05 88 	ld.w	r8,pc[1416]
80008864:	11 f8       	ld.ub	r8,r8[0x7]
80008866:	ef 39 ff bb 	ld.ub	r9,r7[-69]
8000886a:	f0 09 18 00 	cp.b	r9,r8
8000886e:	c6 31       	brne	80008934 <eval_region+0x17c>
				{
					print_ecdbg("good csum\r\n");
80008870:	fe fc 05 84 	ld.w	r12,pc[1412]
80008874:	f0 1f 01 59 	mcall	80008dd8 <eval_region+0x620>
					
					retVal = 1; //we have at least one good copy
80008878:	30 18       	mov	r8,1
8000887a:	ef 68 ff c7 	st.b	r7[-57],r8

					tmpSlotsFilled = 0;
8000887e:	30 08       	mov	r8,0
80008880:	ef 48 ff d8 	st.w	r7[-40],r8
					uSlotsFilled = 0;
80008884:	30 08       	mov	r8,0
80008886:	ef 48 ff dc 	st.w	r7[-36],r8
				
					for (int j=0; j<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); j++)
8000888a:	30 08       	mov	r8,0
8000888c:	ef 48 ff e4 	st.w	r7[-28],r8
80008890:	c2 98       	rjmp	800088e2 <eval_region+0x12a>
					{
						tmpSlotsFilled += tmpSf[j].slotFilled;
80008892:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008896:	a1 78       	lsl	r8,0x1
80008898:	2f f8       	sub	r8,-1
8000889a:	a3 68       	lsl	r8,0x2
8000889c:	ee 08 00 08 	add	r8,r7,r8
800088a0:	f0 f8 fc b8 	ld.w	r8,r8[-840]
800088a4:	f1 d8 c1 a1 	bfextu	r8,r8,0xd,0x1
800088a8:	5c 58       	castu.b	r8
800088aa:	ee f9 ff d8 	ld.w	r9,r7[-40]
800088ae:	f2 08 00 08 	add	r8,r9,r8
800088b2:	ef 48 ff d8 	st.w	r7[-40],r8
						uSlotsFilled += sf[j].slotFilled;
800088b6:	ee f9 ff e4 	ld.w	r9,r7[-28]
800088ba:	fe f8 05 2e 	ld.w	r8,pc[1326]
800088be:	a1 79       	lsl	r9,0x1
800088c0:	2f f9       	sub	r9,-1
800088c2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800088c6:	f1 d8 c1 a1 	bfextu	r8,r8,0xd,0x1
800088ca:	5c 58       	castu.b	r8
800088cc:	ee f9 ff dc 	ld.w	r9,r7[-36]
800088d0:	f2 08 00 08 	add	r8,r9,r8
800088d4:	ef 48 ff dc 	st.w	r7[-36],r8
					retVal = 1; //we have at least one good copy

					tmpSlotsFilled = 0;
					uSlotsFilled = 0;
				
					for (int j=0; j<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); j++)
800088d8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800088dc:	2f f8       	sub	r8,-1
800088de:	ef 48 ff e4 	st.w	r7[-28],r8
800088e2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800088e6:	e0 48 00 5f 	cp.w	r8,95
800088ea:	fe 9a ff d4 	brle	80008892 <eval_region+0xda>
					{
						tmpSlotsFilled += tmpSf[j].slotFilled;
						uSlotsFilled += sf[j].slotFilled;
					}
				
					if (uSlotsFilled > tmpSlotsFilled)
800088ee:	ee f9 ff dc 	ld.w	r9,r7[-36]
800088f2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800088f6:	10 39       	cp.w	r9,r8
800088f8:	e0 88 00 1e 	brls	80008934 <eval_region+0x17c>
					{
						memcpy(&tmpSf, &sf, sizeof(sf));
800088fc:	ee c8 03 48 	sub	r8,r7,840
80008900:	e0 6a 03 00 	mov	r10,768
80008904:	fe fb 04 e4 	ld.w	r11,pc[1252]
80008908:	10 9c       	mov	r12,r8
8000890a:	f0 1f 01 39 	mcall	80008dec <eval_region+0x634>
						sfFlashIdx = i; //this is the new best copy
8000890e:	fe f8 04 ea 	ld.w	r8,pc[1258]
80008912:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008916:	91 09       	st.w	r8[0x0],r9
						
						print_ecdbg("sfFlashIdx ");
80008918:	fe fc 04 e4 	ld.w	r12,pc[1252]
8000891c:	f0 1f 01 2f 	mcall	80008dd8 <eval_region+0x620>
						print_ecdbg_num(sfFlashIdx);
80008920:	fe f8 04 d8 	ld.w	r8,pc[1240]
80008924:	70 08       	ld.w	r8,r8[0x0]
80008926:	10 9c       	mov	r12,r8
80008928:	f0 1f 01 36 	mcall	80008e00 <eval_region+0x648>
						print_ecdbg("\r\n");
8000892c:	fe fc 04 d8 	ld.w	r12,pc[1240]
80008930:	f0 1f 01 2a 	mcall	80008dd8 <eval_region+0x620>
			
			print_ecdbg("region 0 - serial ID and flags\r\n");
			
			memset(&tmpSf, 0x00, sizeof(sf));
			
			for (unsigned int i=0; i<(NUM_SERIAL_ID_BUFS_SECTORS / NUM_SERIAL_ID_SECTORS_PER_BUF); i++)
80008934:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008938:	2f f8       	sub	r8,-1
8000893a:	ef 48 ff e0 	st.w	r7[-32],r8
8000893e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008942:	58 18       	cp.w	r8,1
80008944:	fe 98 ff 6f 	brls	80008822 <eval_region+0x6a>
					}

				}
			}
			
			if (retVal == 1)
80008948:	ef 39 ff c7 	ld.ub	r9,r7[-57]
8000894c:	30 18       	mov	r8,1
8000894e:	f0 09 18 00 	cp.b	r9,r8
80008952:	e0 81 02 33 	brne	80008db8 <eval_region+0x600>
			{
				memcpy(&sf, &tmpSf, sizeof(sf));
80008956:	ee c8 03 48 	sub	r8,r7,840
8000895a:	e0 6a 03 00 	mov	r10,768
8000895e:	10 9b       	mov	r11,r8
80008960:	fe fc 04 88 	ld.w	r12,pc[1160]
80008964:	f0 1f 01 22 	mcall	80008dec <eval_region+0x634>
			}
			break;
80008968:	e0 8f 02 2f 	bral	80008dc6 <eval_region+0x60e>

		case 1: //san cycles
			memset(&tmpSanc, 0x00, sizeof(sanc));
8000896c:	ee c8 03 4c 	sub	r8,r7,844
80008970:	30 4a       	mov	r10,4
80008972:	30 0b       	mov	r11,0
80008974:	10 9c       	mov	r12,r8
80008976:	f0 1f 01 1b 	mcall	80008de0 <eval_region+0x628>

			print_ecdbg("region 1 - sanitation cycles\r\n");
8000897a:	fe fc 04 8e 	ld.w	r12,pc[1166]
8000897e:	f0 1f 01 17 	mcall	80008dd8 <eval_region+0x620>

			for (unsigned int i=0; i<(NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS); i++)
80008982:	30 08       	mov	r8,0
80008984:	ef 48 ff e8 	st.w	r7[-24],r8
80008988:	c5 b8       	rjmp	80008a3e <eval_region+0x286>
			{
				flashOffset = (i * 128 * NUM_SAN_CYCLE_BUFS_PER_SECTOR);
8000898a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000898e:	a7 78       	lsl	r8,0x7
80008990:	ef 48 ff bc 	st.w	r7[-68],r8
				
				tmpFlashOffset = flashOffset + (unsigned long) sanitationCyclesFlash;
80008994:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008998:	fe f8 04 74 	ld.w	r8,pc[1140]
8000899c:	f2 08 00 08 	add	r8,r9,r8
800089a0:	ef 48 ff c0 	st.w	r7[-64],r8
				memcpy(&sanc, (const void*) tmpFlashOffset, sizeof(sanc));
800089a4:	ee f8 ff c0 	ld.w	r8,r7[-64]
800089a8:	30 4a       	mov	r10,4
800089aa:	10 9b       	mov	r11,r8
800089ac:	fe fc 04 64 	ld.w	r12,pc[1124]
800089b0:	f0 1f 01 0f 	mcall	80008dec <eval_region+0x634>
				
				csum = calc_region_checksum(1);
800089b4:	30 1c       	mov	r12,1
800089b6:	f0 1f 01 0f 	mcall	80008df0 <eval_region+0x638>
800089ba:	18 98       	mov	r8,r12
800089bc:	ef 68 ff bb 	st.b	r7[-69],r8
				
				if (csum == sanc.csum) //checksum is good
800089c0:	fe f8 04 50 	ld.w	r8,pc[1104]
800089c4:	70 08       	ld.w	r8,r8[0x0]
800089c6:	f1 d8 c0 88 	bfextu	r8,r8,0x4,0x8
800089ca:	5c 58       	castu.b	r8
800089cc:	ef 39 ff bb 	ld.ub	r9,r7[-69]
800089d0:	f0 09 18 00 	cp.b	r9,r8
800089d4:	c3 01       	brne	80008a34 <eval_region+0x27c>
				{
					print_ecdbg("good csum\r\n");
800089d6:	fe fc 04 1e 	ld.w	r12,pc[1054]
800089da:	f0 1f 01 00 	mcall	80008dd8 <eval_region+0x620>

					retVal = 1; //we have at least one good copy
800089de:	30 18       	mov	r8,1
800089e0:	ef 68 ff c7 	st.b	r7[-57],r8
					
					if (sanc.cycles > tmpSanc.cycles)
800089e4:	fe f8 04 2c 	ld.w	r8,pc[1068]
800089e8:	70 08       	ld.w	r8,r8[0x0]
800089ea:	f1 d8 c1 94 	bfextu	r8,r8,0xc,0x14
800089ee:	10 99       	mov	r9,r8
800089f0:	ee f8 fc b4 	ld.w	r8,r7[-844]
800089f4:	f1 d8 c1 94 	bfextu	r8,r8,0xc,0x14
800089f8:	10 39       	cp.w	r9,r8
800089fa:	e0 8a 00 1d 	brle	80008a34 <eval_region+0x27c>
					{
						memcpy(&tmpSanc, &sanc, sizeof(sanc));
800089fe:	ee c8 03 4c 	sub	r8,r7,844
80008a02:	30 4a       	mov	r10,4
80008a04:	fe fb 04 0c 	ld.w	r11,pc[1036]
80008a08:	10 9c       	mov	r12,r8
80008a0a:	f0 1f 00 f9 	mcall	80008dec <eval_region+0x634>
						sanCycleFlashIdx = i; //this is the new best copy
80008a0e:	fe f8 04 06 	ld.w	r8,pc[1030]
80008a12:	ee f9 ff e8 	ld.w	r9,r7[-24]
80008a16:	91 09       	st.w	r8[0x0],r9

						print_ecdbg("sanCycleFlashIdx ");
80008a18:	fe fc 04 00 	ld.w	r12,pc[1024]
80008a1c:	f0 1f 00 ef 	mcall	80008dd8 <eval_region+0x620>
						print_ecdbg_num(sanCycleFlashIdx);
80008a20:	fe f8 03 f4 	ld.w	r8,pc[1012]
80008a24:	70 08       	ld.w	r8,r8[0x0]
80008a26:	10 9c       	mov	r12,r8
80008a28:	f0 1f 00 f6 	mcall	80008e00 <eval_region+0x648>
						print_ecdbg("\r\n");
80008a2c:	fe fc 03 d8 	ld.w	r12,pc[984]
80008a30:	f0 1f 00 ea 	mcall	80008dd8 <eval_region+0x620>
		case 1: //san cycles
			memset(&tmpSanc, 0x00, sizeof(sanc));

			print_ecdbg("region 1 - sanitation cycles\r\n");

			for (unsigned int i=0; i<(NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS); i++)
80008a34:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008a38:	2f f8       	sub	r8,-1
80008a3a:	ef 48 ff e8 	st.w	r7[-24],r8
80008a3e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008a42:	58 58       	cp.w	r8,5
80008a44:	fe 98 ff a3 	brls	8000898a <eval_region+0x1d2>
						print_ecdbg_num(sanCycleFlashIdx);
						print_ecdbg("\r\n");
					}
				}
			}
			if (retVal == 1)
80008a48:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80008a4c:	30 18       	mov	r8,1
80008a4e:	f0 09 18 00 	cp.b	r9,r8
80008a52:	e0 81 01 b5 	brne	80008dbc <eval_region+0x604>
			{
				memcpy(&sanc, &tmpSanc, sizeof(sanc));
80008a56:	ee c8 03 4c 	sub	r8,r7,844
80008a5a:	30 4a       	mov	r10,4
80008a5c:	10 9b       	mov	r11,r8
80008a5e:	fe fc 03 b2 	ld.w	r12,pc[946]
80008a62:	f0 1f 00 e3 	mcall	80008dec <eval_region+0x634>
			}
			break;
80008a66:	e0 8f 01 b0 	bral	80008dc6 <eval_region+0x60e>
			
		case 2: //usage hours
			memset(&tmpH, 0x00, sizeof(h));
80008a6a:	ee c8 04 0e 	sub	r8,r7,1038
80008a6e:	e0 6a 00 c2 	mov	r10,194
80008a72:	30 0b       	mov	r11,0
80008a74:	10 9c       	mov	r12,r8
80008a76:	f0 1f 00 db 	mcall	80008de0 <eval_region+0x628>

			print_ecdbg("region 2 - usage hours\r\n");
80008a7a:	fe fc 03 a2 	ld.w	r12,pc[930]
80008a7e:	f0 1f 00 d7 	mcall	80008dd8 <eval_region+0x620>

			for (unsigned int i=0; i<(NUM_USAGE_HOURS_BUFS_SECTORS / NUM_USAGE_HOURS_SECTORS_PER_BUF); i++)
80008a82:	30 08       	mov	r8,0
80008a84:	ef 48 ff ec 	st.w	r7[-20],r8
80008a88:	c8 58       	rjmp	80008b92 <eval_region+0x3da>
			{
				flashOffset = (i * 128 * NUM_USAGE_HOURS_SECTORS_PER_BUF);
80008a8a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008a8e:	a9 68       	lsl	r8,0x8
80008a90:	ef 48 ff bc 	st.w	r7[-68],r8
				
				tmpFlashOffset = flashOffset + (unsigned long) usageHoursFlash;
80008a94:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008a98:	fe f8 03 88 	ld.w	r8,pc[904]
80008a9c:	f2 08 00 08 	add	r8,r9,r8
80008aa0:	ef 48 ff c0 	st.w	r7[-64],r8
				
				memcpy(&h, (const void*) tmpFlashOffset, sizeof(h));
80008aa4:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008aa8:	e0 6a 00 c2 	mov	r10,194
80008aac:	10 9b       	mov	r11,r8
80008aae:	fe fc 03 76 	ld.w	r12,pc[886]
80008ab2:	f0 1f 00 cf 	mcall	80008dec <eval_region+0x634>
				
				csum = calc_region_checksum(2);
80008ab6:	30 2c       	mov	r12,2
80008ab8:	f0 1f 00 ce 	mcall	80008df0 <eval_region+0x638>
80008abc:	18 98       	mov	r8,r12
80008abe:	ef 68 ff bb 	st.b	r7[-69],r8
				
				if (csum == h.csum) //checksum is good
80008ac2:	fe f8 03 62 	ld.w	r8,pc[866]
80008ac6:	f1 38 00 c0 	ld.ub	r8,r8[192]
80008aca:	ef 39 ff bb 	ld.ub	r9,r7[-69]
80008ace:	f0 09 18 00 	cp.b	r9,r8
80008ad2:	c5 b1       	brne	80008b88 <eval_region+0x3d0>
				{
					print_ecdbg("good csum\r\n");
80008ad4:	fe fc 03 20 	ld.w	r12,pc[800]
80008ad8:	f0 1f 00 c0 	mcall	80008dd8 <eval_region+0x620>

					retVal = 1; //we have at least one good copy
80008adc:	30 18       	mov	r8,1
80008ade:	ef 68 ff c7 	st.b	r7[-57],r8
					
					tmpHours = 0;
80008ae2:	30 08       	mov	r8,0
80008ae4:	ef 48 ff c8 	st.w	r7[-56],r8
					uHours = 0;
80008ae8:	30 08       	mov	r8,0
80008aea:	ef 48 ff cc 	st.w	r7[-52],r8
					
					for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008aee:	30 08       	mov	r8,0
80008af0:	ef 48 ff f0 	st.w	r7[-16],r8
80008af4:	c2 18       	rjmp	80008b36 <eval_region+0x37e>
					{
						tmpHours += tmpH.hrs[i];
80008af6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008afa:	a1 78       	lsl	r8,0x1
80008afc:	ee 08 00 08 	add	r8,r7,r8
80008b00:	f1 08 fb f2 	ld.sh	r8,r8[-1038]
80008b04:	5c 78       	castu.h	r8
80008b06:	ee f9 ff c8 	ld.w	r9,r7[-56]
80008b0a:	f2 08 00 08 	add	r8,r9,r8
80008b0e:	ef 48 ff c8 	st.w	r7[-56],r8
						uHours += h.hrs[i];
80008b12:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008b16:	fe f8 03 0e 	ld.w	r8,pc[782]
80008b1a:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80008b1e:	5c 78       	castu.h	r8
80008b20:	ee f9 ff cc 	ld.w	r9,r7[-52]
80008b24:	f2 08 00 08 	add	r8,r9,r8
80008b28:	ef 48 ff cc 	st.w	r7[-52],r8
					retVal = 1; //we have at least one good copy
					
					tmpHours = 0;
					uHours = 0;
					
					for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008b2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008b30:	2f f8       	sub	r8,-1
80008b32:	ef 48 ff f0 	st.w	r7[-16],r8
80008b36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008b3a:	e0 48 00 5f 	cp.w	r8,95
80008b3e:	fe 9a ff dc 	brle	80008af6 <eval_region+0x33e>
					{
						tmpHours += tmpH.hrs[i];
						uHours += h.hrs[i];
					}
					
					if (uHours > tmpHours)
80008b42:	ee f9 ff cc 	ld.w	r9,r7[-52]
80008b46:	ee f8 ff c8 	ld.w	r8,r7[-56]
80008b4a:	10 39       	cp.w	r9,r8
80008b4c:	e0 88 00 1e 	brls	80008b88 <eval_region+0x3d0>
					{
						memcpy(&tmpH, &h, sizeof(h));
80008b50:	ee c8 04 0e 	sub	r8,r7,1038
80008b54:	e0 6a 00 c2 	mov	r10,194
80008b58:	fe fb 02 cc 	ld.w	r11,pc[716]
80008b5c:	10 9c       	mov	r12,r8
80008b5e:	f0 1f 00 a4 	mcall	80008dec <eval_region+0x634>
						hFlashIdx = i; //this is the new best copy
80008b62:	fe f8 02 c6 	ld.w	r8,pc[710]
80008b66:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008b6a:	91 09       	st.w	r8[0x0],r9
						
						print_ecdbg("hFlashIdx ");
80008b6c:	fe fc 02 c0 	ld.w	r12,pc[704]
80008b70:	f0 1f 00 9a 	mcall	80008dd8 <eval_region+0x620>
						print_ecdbg_num(hFlashIdx);
80008b74:	fe f8 02 b4 	ld.w	r8,pc[692]
80008b78:	70 08       	ld.w	r8,r8[0x0]
80008b7a:	10 9c       	mov	r12,r8
80008b7c:	f0 1f 00 a1 	mcall	80008e00 <eval_region+0x648>
						print_ecdbg("\r\n");
80008b80:	fe fc 02 84 	ld.w	r12,pc[644]
80008b84:	f0 1f 00 95 	mcall	80008dd8 <eval_region+0x620>
		case 2: //usage hours
			memset(&tmpH, 0x00, sizeof(h));

			print_ecdbg("region 2 - usage hours\r\n");

			for (unsigned int i=0; i<(NUM_USAGE_HOURS_BUFS_SECTORS / NUM_USAGE_HOURS_SECTORS_PER_BUF); i++)
80008b88:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008b8c:	2f f8       	sub	r8,-1
80008b8e:	ef 48 ff ec 	st.w	r7[-20],r8
80008b92:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008b96:	58 18       	cp.w	r8,1
80008b98:	fe 98 ff 79 	brls	80008a8a <eval_region+0x2d2>
						print_ecdbg("\r\n");

					}
				}
			}
			if (retVal == 1)
80008b9c:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80008ba0:	30 18       	mov	r8,1
80008ba2:	f0 09 18 00 	cp.b	r9,r8
80008ba6:	e0 81 01 0d 	brne	80008dc0 <eval_region+0x608>
			{
				memcpy(&h, &tmpH, sizeof(h));
80008baa:	ee c8 04 0e 	sub	r8,r7,1038
80008bae:	e0 6a 00 c2 	mov	r10,194
80008bb2:	10 9b       	mov	r11,r8
80008bb4:	fe fc 02 70 	ld.w	r12,pc[624]
80008bb8:	f0 1f 00 8d 	mcall	80008dec <eval_region+0x634>
			}
			break;
80008bbc:	c0 59       	rjmp	80008dc6 <eval_region+0x60e>

		case 3: //usage minutes
			memset(&tmpM, 0x00, sizeof(m));
80008bbe:	ee c8 04 78 	sub	r8,r7,1144
80008bc2:	36 8a       	mov	r10,104
80008bc4:	30 0b       	mov	r11,0
80008bc6:	10 9c       	mov	r12,r8
80008bc8:	f0 1f 00 86 	mcall	80008de0 <eval_region+0x628>
			
			print_ecdbg("region 3 - usage minutes\r\n");
80008bcc:	fe fc 02 64 	ld.w	r12,pc[612]
80008bd0:	f0 1f 00 82 	mcall	80008dd8 <eval_region+0x620>
			
			for (unsigned int i=0; i<(NUM_USAGE_MINS_BUFS_PER_SECTOR * NUM_USAGE_MINS_BUFS_SECTORS); i++)
80008bd4:	30 08       	mov	r8,0
80008bd6:	ef 48 ff f4 	st.w	r7[-12],r8
80008bda:	c7 98       	rjmp	80008ccc <eval_region+0x514>
			{
				flashOffset = (i * 128 * NUM_USAGE_MINS_BUFS_PER_SECTOR);
80008bdc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008be0:	a7 78       	lsl	r8,0x7
80008be2:	ef 48 ff bc 	st.w	r7[-68],r8
				
				tmpFlashOffset = flashOffset + (unsigned long) usageMinutesFlash;
80008be6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008bea:	fe f8 02 4a 	ld.w	r8,pc[586]
80008bee:	f2 08 00 08 	add	r8,r9,r8
80008bf2:	ef 48 ff c0 	st.w	r7[-64],r8
				
				memcpy(&m, (const void*) tmpFlashOffset, sizeof(m));
80008bf6:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008bfa:	36 8a       	mov	r10,104
80008bfc:	10 9b       	mov	r11,r8
80008bfe:	fe fc 02 3a 	ld.w	r12,pc[570]
80008c02:	f0 1f 00 7b 	mcall	80008dec <eval_region+0x634>
				
				csum = calc_region_checksum(3);
80008c06:	30 3c       	mov	r12,3
80008c08:	f0 1f 00 7a 	mcall	80008df0 <eval_region+0x638>
80008c0c:	18 98       	mov	r8,r12
80008c0e:	ef 68 ff bb 	st.b	r7[-69],r8
				
				if (csum == m.csum) //checksum is good
80008c12:	fe f8 02 26 	ld.w	r8,pc[550]
80008c16:	f1 38 00 64 	ld.ub	r8,r8[100]
80008c1a:	ef 39 ff bb 	ld.ub	r9,r7[-69]
80008c1e:	f0 09 18 00 	cp.b	r9,r8
80008c22:	c5 01       	brne	80008cc2 <eval_region+0x50a>
				{
					print_ecdbg("good csum\r\n");
80008c24:	4f 4c       	lddpc	r12,80008df4 <eval_region+0x63c>
80008c26:	f0 1f 00 6d 	mcall	80008dd8 <eval_region+0x620>

					retVal = 1; //we have at least one good copy
80008c2a:	30 18       	mov	r8,1
80008c2c:	ef 68 ff c7 	st.b	r7[-57],r8
					
					tmpMinutes = 0;
80008c30:	30 08       	mov	r8,0
80008c32:	ef 48 ff d0 	st.w	r7[-48],r8
					uMinutes = 0;
80008c36:	30 08       	mov	r8,0
80008c38:	ef 48 ff d4 	st.w	r7[-44],r8
					
					for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008c3c:	30 08       	mov	r8,0
80008c3e:	ef 48 ff f8 	st.w	r7[-8],r8
80008c42:	c1 d8       	rjmp	80008c7c <eval_region+0x4c4>
					{
						//TODO: I should be checking the serial ID and flags struct to see if the slot is filled, but i don't have a good way of syncing sf and m right now. In the meantime, just make sure that m.mins[i] is 0 if not used.
						tmpMinutes += tmpM.mins[i];
80008c44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c48:	ee 08 00 08 	add	r8,r7,r8
80008c4c:	f1 38 fb 88 	ld.ub	r8,r8[-1144]
80008c50:	ee f9 ff d0 	ld.w	r9,r7[-48]
80008c54:	f2 08 00 08 	add	r8,r9,r8
80008c58:	ef 48 ff d0 	st.w	r7[-48],r8
						uMinutes += m.mins[i];
80008c5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c60:	4f 69       	lddpc	r9,80008e38 <eval_region+0x680>
80008c62:	f2 08 07 08 	ld.ub	r8,r9[r8]
80008c66:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008c6a:	f2 08 00 08 	add	r8,r9,r8
80008c6e:	ef 48 ff d4 	st.w	r7[-44],r8
					retVal = 1; //we have at least one good copy
					
					tmpMinutes = 0;
					uMinutes = 0;
					
					for (int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80008c72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c76:	2f f8       	sub	r8,-1
80008c78:	ef 48 ff f8 	st.w	r7[-8],r8
80008c7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c80:	e0 48 00 5f 	cp.w	r8,95
80008c84:	fe 9a ff e0 	brle	80008c44 <eval_region+0x48c>
						//TODO: I should be checking the serial ID and flags struct to see if the slot is filled, but i don't have a good way of syncing sf and m right now. In the meantime, just make sure that m.mins[i] is 0 if not used.
						tmpMinutes += tmpM.mins[i];
						uMinutes += m.mins[i];
					}
					
					if (uMinutes > tmpMinutes)
80008c88:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008c8c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80008c90:	10 39       	cp.w	r9,r8
80008c92:	e0 88 00 18 	brls	80008cc2 <eval_region+0x50a>
					{
						memcpy(&tmpM, &m, sizeof(m));
80008c96:	ee c8 04 78 	sub	r8,r7,1144
80008c9a:	36 8a       	mov	r10,104
80008c9c:	4e 7b       	lddpc	r11,80008e38 <eval_region+0x680>
80008c9e:	10 9c       	mov	r12,r8
80008ca0:	f0 1f 00 53 	mcall	80008dec <eval_region+0x634>
						mFlashIdx = i; //this is the new best copy
80008ca4:	4e 68       	lddpc	r8,80008e3c <eval_region+0x684>
80008ca6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008caa:	91 09       	st.w	r8[0x0],r9

						print_ecdbg("mFlashIdx ");
80008cac:	4e 5c       	lddpc	r12,80008e40 <eval_region+0x688>
80008cae:	f0 1f 00 4b 	mcall	80008dd8 <eval_region+0x620>
						print_ecdbg_num(mFlashIdx);
80008cb2:	4e 38       	lddpc	r8,80008e3c <eval_region+0x684>
80008cb4:	70 08       	ld.w	r8,r8[0x0]
80008cb6:	10 9c       	mov	r12,r8
80008cb8:	f0 1f 00 52 	mcall	80008e00 <eval_region+0x648>
						print_ecdbg("\r\n");
80008cbc:	4d 2c       	lddpc	r12,80008e04 <eval_region+0x64c>
80008cbe:	f0 1f 00 47 	mcall	80008dd8 <eval_region+0x620>
		case 3: //usage minutes
			memset(&tmpM, 0x00, sizeof(m));
			
			print_ecdbg("region 3 - usage minutes\r\n");
			
			for (unsigned int i=0; i<(NUM_USAGE_MINS_BUFS_PER_SECTOR * NUM_USAGE_MINS_BUFS_SECTORS); i++)
80008cc2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008cc6:	2f f8       	sub	r8,-1
80008cc8:	ef 48 ff f4 	st.w	r7[-12],r8
80008ccc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008cd0:	e0 48 00 73 	cp.w	r8,115
80008cd4:	fe 98 ff 84 	brls	80008bdc <eval_region+0x424>
						print_ecdbg_num(mFlashIdx);
						print_ecdbg("\r\n");
					}
				}
			}
			if (retVal == 1)
80008cd8:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80008cdc:	30 18       	mov	r8,1
80008cde:	f0 09 18 00 	cp.b	r9,r8
80008ce2:	c7 11       	brne	80008dc4 <eval_region+0x60c>
			{
				memcpy(&m, &tmpM, sizeof(m));
80008ce4:	ee c8 04 78 	sub	r8,r7,1144
80008ce8:	36 8a       	mov	r10,104
80008cea:	10 9b       	mov	r11,r8
80008cec:	4d 3c       	lddpc	r12,80008e38 <eval_region+0x680>
80008cee:	f0 1f 00 40 	mcall	80008dec <eval_region+0x634>
			}
			break;
80008cf2:	c6 a8       	rjmp	80008dc6 <eval_region+0x60e>
		case 4: //configuration
			memset(&tmpC, 0x00, sizeof(c));
80008cf4:	ee c8 04 7a 	sub	r8,r7,1146
80008cf8:	30 2a       	mov	r10,2
80008cfa:	30 0b       	mov	r11,0
80008cfc:	10 9c       	mov	r12,r8
80008cfe:	f0 1f 00 39 	mcall	80008de0 <eval_region+0x628>

			print_ecdbg("region 4 - configuration\r\n");
80008d02:	4d 1c       	lddpc	r12,80008e44 <eval_region+0x68c>
80008d04:	f0 1f 00 35 	mcall	80008dd8 <eval_region+0x620>

			for (unsigned int i=0; i<(NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS); i++)
80008d08:	30 08       	mov	r8,0
80008d0a:	ef 48 ff fc 	st.w	r7[-4],r8
80008d0e:	c4 28       	rjmp	80008d92 <eval_region+0x5da>
			{
				flashOffset = (i * 128 * NUM_CONFIG_BUFS_PER_SECTOR);
80008d10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d14:	a7 78       	lsl	r8,0x7
80008d16:	ef 48 ff bc 	st.w	r7[-68],r8
			
				tmpFlashOffset = flashOffset + (unsigned long) configFlash;
80008d1a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008d1e:	4c b8       	lddpc	r8,80008e48 <eval_region+0x690>
80008d20:	f2 08 00 08 	add	r8,r9,r8
80008d24:	ef 48 ff c0 	st.w	r7[-64],r8
				memcpy(&c, (const void*) tmpFlashOffset, sizeof(c));
80008d28:	ee f8 ff c0 	ld.w	r8,r7[-64]
80008d2c:	30 2a       	mov	r10,2
80008d2e:	10 9b       	mov	r11,r8
80008d30:	4c 7c       	lddpc	r12,80008e4c <eval_region+0x694>
80008d32:	f0 1f 00 2f 	mcall	80008dec <eval_region+0x634>
			
				csum = calc_region_checksum(4);
80008d36:	30 4c       	mov	r12,4
80008d38:	f0 1f 00 2e 	mcall	80008df0 <eval_region+0x638>
80008d3c:	18 98       	mov	r8,r12
80008d3e:	ef 68 ff bb 	st.b	r7[-69],r8
			
				if (csum == c.csum) //checksum is good
80008d42:	4c 38       	lddpc	r8,80008e4c <eval_region+0x694>
80008d44:	11 98       	ld.ub	r8,r8[0x1]
80008d46:	ef 39 ff bb 	ld.ub	r9,r7[-69]
80008d4a:	f0 09 18 00 	cp.b	r9,r8
80008d4e:	c1 d1       	brne	80008d88 <eval_region+0x5d0>
				{
					print_ecdbg("good csum\r\n");
80008d50:	4a 9c       	lddpc	r12,80008df4 <eval_region+0x63c>
80008d52:	f0 1f 00 22 	mcall	80008dd8 <eval_region+0x620>

					retVal = 1; //we have at least one good copy
80008d56:	30 18       	mov	r8,1
80008d58:	ef 68 ff c7 	st.b	r7[-57],r8
				
					memcpy(&tmpC, &c, sizeof(c));
80008d5c:	ee c8 04 7a 	sub	r8,r7,1146
80008d60:	30 2a       	mov	r10,2
80008d62:	4b bb       	lddpc	r11,80008e4c <eval_region+0x694>
80008d64:	10 9c       	mov	r12,r8
80008d66:	f0 1f 00 22 	mcall	80008dec <eval_region+0x634>
					configFlashIdx = i; //no good eval criteria for initialDTE: user could increase or decrease it. Therefore, always store 2 copies so both copies will be the same.
80008d6a:	4b a8       	lddpc	r8,80008e50 <eval_region+0x698>
80008d6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008d70:	91 09       	st.w	r8[0x0],r9

					print_ecdbg("configFlashIdx ");
80008d72:	4b 9c       	lddpc	r12,80008e54 <eval_region+0x69c>
80008d74:	f0 1f 00 19 	mcall	80008dd8 <eval_region+0x620>
					print_ecdbg_num(configFlashIdx);
80008d78:	4b 68       	lddpc	r8,80008e50 <eval_region+0x698>
80008d7a:	70 08       	ld.w	r8,r8[0x0]
80008d7c:	10 9c       	mov	r12,r8
80008d7e:	f0 1f 00 21 	mcall	80008e00 <eval_region+0x648>
					print_ecdbg("\r\n");
80008d82:	4a 1c       	lddpc	r12,80008e04 <eval_region+0x64c>
80008d84:	f0 1f 00 15 	mcall	80008dd8 <eval_region+0x620>
		case 4: //configuration
			memset(&tmpC, 0x00, sizeof(c));

			print_ecdbg("region 4 - configuration\r\n");

			for (unsigned int i=0; i<(NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS); i++)
80008d88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d8c:	2f f8       	sub	r8,-1
80008d8e:	ef 48 ff fc 	st.w	r7[-4],r8
80008d92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d96:	58 18       	cp.w	r8,1
80008d98:	fe 98 ff bc 	brls	80008d10 <eval_region+0x558>
					print_ecdbg("configFlashIdx ");
					print_ecdbg_num(configFlashIdx);
					print_ecdbg("\r\n");
				}
			}
			if (retVal == 1)
80008d9c:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80008da0:	30 18       	mov	r8,1
80008da2:	f0 09 18 00 	cp.b	r9,r8
80008da6:	c1 01       	brne	80008dc6 <eval_region+0x60e>
			{
				memcpy(&c, &tmpC, sizeof(c));
80008da8:	ee c8 04 7a 	sub	r8,r7,1146
80008dac:	30 2a       	mov	r10,2
80008dae:	10 9b       	mov	r11,r8
80008db0:	4a 7c       	lddpc	r12,80008e4c <eval_region+0x694>
80008db2:	f0 1f 00 0f 	mcall	80008dec <eval_region+0x634>
80008db6:	c0 88       	rjmp	80008dc6 <eval_region+0x60e>
			
			if (retVal == 1)
			{
				memcpy(&sf, &tmpSf, sizeof(sf));
			}
			break;
80008db8:	d7 03       	nop
80008dba:	c0 68       	rjmp	80008dc6 <eval_region+0x60e>
			}
			if (retVal == 1)
			{
				memcpy(&sanc, &tmpSanc, sizeof(sanc));
			}
			break;
80008dbc:	d7 03       	nop
80008dbe:	c0 48       	rjmp	80008dc6 <eval_region+0x60e>
			}
			if (retVal == 1)
			{
				memcpy(&h, &tmpH, sizeof(h));
			}
			break;
80008dc0:	d7 03       	nop
80008dc2:	c0 28       	rjmp	80008dc6 <eval_region+0x60e>
			}
			if (retVal == 1)
			{
				memcpy(&m, &tmpM, sizeof(m));
			}
			break;
80008dc4:	d7 03       	nop
			}
			break;
		
	}
	
	return retVal;
80008dc6:	ef 38 ff c7 	ld.ub	r8,r7[-57]
}
80008dca:	10 9c       	mov	r12,r8
80008dcc:	fe 3d fb 80 	sub	sp,-1152
80008dd0:	e3 cd 80 80 	ldm	sp++,r7,pc
80008dd4:	80 00       	ld.sh	r0,r0[0x0]
80008dd6:	66 b8       	ld.w	r8,r3[0x2c]
80008dd8:	80 00       	ld.sh	r0,r0[0x0]
80008dda:	33 38       	mov	r8,51
80008ddc:	80 00       	ld.sh	r0,r0[0x0]
80008dde:	66 c8       	ld.w	r8,r3[0x30]
80008de0:	80 00       	ld.sh	r0,r0[0x0]
80008de2:	c7 e6       	brmi	80008ede <write_region_to_flash+0x86>
80008de4:	80 07       	ld.sh	r7,r0[0x0]
80008de6:	fa 00 00 00 	add	r0,sp,r0
80008dea:	08 44       	or	r4,r4
80008dec:	80 00       	ld.sh	r0,r0[0x0]
80008dee:	c6 9e       	rcall	80008ac0 <eval_region+0x308>
80008df0:	80 00       	ld.sh	r0,r0[0x0]
80008df2:	85 60       	st.w	r2[0x18],r0
80008df4:	80 00       	ld.sh	r0,r0[0x0]
80008df6:	66 ec       	ld.w	r12,r3[0x38]
80008df8:	00 00       	add	r0,r0
80008dfa:	07 b8       	ld.ub	r8,r3[0x3]
80008dfc:	80 00       	ld.sh	r0,r0[0x0]
80008dfe:	66 f8       	ld.w	r8,r3[0x3c]
80008e00:	80 00       	ld.sh	r0,r0[0x0]
80008e02:	72 90       	ld.w	r0,r9[0x24]
80008e04:	80 00       	ld.sh	r0,r0[0x0]
80008e06:	64 e8       	ld.w	r8,r2[0x38]
80008e08:	80 00       	ld.sh	r0,r0[0x0]
80008e0a:	67 04       	ld.w	r4,r3[0x40]
80008e0c:	80 07       	ld.sh	r7,r0[0x0]
80008e0e:	f7 00 00 00 	ld.sh	r0,r11[0]
80008e12:	0c 20       	rsub	r0,r6
80008e14:	00 00       	add	r0,r0
80008e16:	07 bc       	ld.ub	r12,r3[0x3]
80008e18:	80 00       	ld.sh	r0,r0[0x0]
80008e1a:	67 24       	ld.w	r4,r3[0x48]
80008e1c:	80 00       	ld.sh	r0,r0[0x0]
80008e1e:	67 38       	ld.w	r8,r3[0x4c]
80008e20:	80 07       	ld.sh	r7,r0[0x0]
80008e22:	f5 00 00 00 	ld.sh	r0,r10[0]
80008e26:	0c 24       	rsub	r4,r6
80008e28:	00 00       	add	r0,r0
80008e2a:	07 c0       	ld.ub	r0,r3[0x4]
80008e2c:	80 00       	ld.sh	r0,r0[0x0]
80008e2e:	67 54       	ld.w	r4,r3[0x54]
80008e30:	80 00       	ld.sh	r0,r0[0x0]
80008e32:	67 60       	ld.w	r0,r3[0x58]
80008e34:	80 07       	ld.sh	r7,r0[0x0]
80008e36:	bb 00       	ld.d	r0,sp
80008e38:	00 00       	add	r0,r0
80008e3a:	0c f4       	st.b	--r6,r4
80008e3c:	00 00       	add	r0,r0
80008e3e:	07 c4       	ld.ub	r4,r3[0x4]
80008e40:	80 00       	ld.sh	r0,r0[0x0]
80008e42:	67 7c       	ld.w	r12,r3[0x5c]
80008e44:	80 00       	ld.sh	r0,r0[0x0]
80008e46:	67 88       	ld.w	r8,r3[0x60]
80008e48:	80 07       	ld.sh	r7,r0[0x0]
80008e4a:	ba 00       	st.h	sp[0x0],r0
80008e4c:	00 00       	add	r0,r0
80008e4e:	0b f4       	ld.ub	r4,r5[0x7]
80008e50:	00 00       	add	r0,r0
80008e52:	07 c8       	ld.ub	r8,r3[0x4]
80008e54:	80 00       	ld.sh	r0,r0[0x0]
80008e56:	67 a4       	ld.w	r4,r3[0x68]

80008e58 <write_region_to_flash>:

unsigned char write_region_to_flash(unsigned char sel, unsigned char idx, unsigned char csum);
unsigned char write_region_to_flash(unsigned char sel, unsigned char idx, unsigned char csum)
{
80008e58:	eb cd 40 80 	pushm	r7,lr
80008e5c:	1a 97       	mov	r7,sp
80008e5e:	20 6d       	sub	sp,24
80008e60:	16 99       	mov	r9,r11
80008e62:	14 98       	mov	r8,r10
80008e64:	18 9a       	mov	r10,r12
80008e66:	ef 6a ff f0 	st.b	r7[-16],r10
80008e6a:	ef 69 ff ec 	st.b	r7[-20],r9
80008e6e:	ef 68 ff e8 	st.b	r7[-24],r8
	unsigned long tmpFlashOffset, flashOffset;
	unsigned char tmpIdx;
	
	if (idx == 0xFF) //use the default system index
80008e72:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80008e76:	3f f8       	mov	r8,-1
80008e78:	f0 09 18 00 	cp.b	r9,r8
80008e7c:	c2 b1       	brne	80008ed2 <write_region_to_flash+0x7a>
	{
		switch(sel)
80008e7e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80008e82:	58 28       	cp.w	r8,2
80008e84:	c1 70       	breq	80008eb2 <write_region_to_flash+0x5a>
80008e86:	e0 89 00 07 	brgt	80008e94 <write_region_to_flash+0x3c>
80008e8a:	58 08       	cp.w	r8,0
80008e8c:	c0 90       	breq	80008e9e <write_region_to_flash+0x46>
80008e8e:	58 18       	cp.w	r8,1
80008e90:	c0 c0       	breq	80008ea8 <write_region_to_flash+0x50>
				break;
			case 3: //usage minutes
				tmpIdx = mFlashIdx;
				break;
			case 4: //configuration
				tmpIdx = configFlashIdx;
80008e92:	c2 48       	rjmp	80008eda <write_region_to_flash+0x82>
	unsigned long tmpFlashOffset, flashOffset;
	unsigned char tmpIdx;
	
	if (idx == 0xFF) //use the default system index
	{
		switch(sel)
80008e94:	58 38       	cp.w	r8,3
80008e96:	c1 30       	breq	80008ebc <write_region_to_flash+0x64>
80008e98:	58 48       	cp.w	r8,4
80008e9a:	c1 70       	breq	80008ec8 <write_region_to_flash+0x70>
				break;
			case 3: //usage minutes
				tmpIdx = mFlashIdx;
				break;
			case 4: //configuration
				tmpIdx = configFlashIdx;
80008e9c:	c1 f8       	rjmp	80008eda <write_region_to_flash+0x82>
	if (idx == 0xFF) //use the default system index
	{
		switch(sel)
		{
			case 0: //serial ID and flags
				tmpIdx = sfFlashIdx;
80008e9e:	4d d8       	lddpc	r8,80009010 <write_region_to_flash+0x1b8>
80008ea0:	70 08       	ld.w	r8,r8[0x0]
80008ea2:	ef 68 ff ff 	st.b	r7[-1],r8
				break;
80008ea6:	c1 a8       	rjmp	80008eda <write_region_to_flash+0x82>
			case 1: //sanitation cycles
				tmpIdx = sanCycleFlashIdx;
80008ea8:	4d b8       	lddpc	r8,80009014 <write_region_to_flash+0x1bc>
80008eaa:	70 08       	ld.w	r8,r8[0x0]
80008eac:	ef 68 ff ff 	st.b	r7[-1],r8
				break;
80008eb0:	c1 58       	rjmp	80008eda <write_region_to_flash+0x82>
			case 2: //usage hours
				tmpIdx = hFlashIdx;
80008eb2:	4d a8       	lddpc	r8,80009018 <write_region_to_flash+0x1c0>
80008eb4:	70 08       	ld.w	r8,r8[0x0]
80008eb6:	ef 68 ff ff 	st.b	r7[-1],r8
				break;
80008eba:	c1 08       	rjmp	80008eda <write_region_to_flash+0x82>
			case 3: //usage minutes
				tmpIdx = mFlashIdx;
80008ebc:	4d 88       	lddpc	r8,8000901c <write_region_to_flash+0x1c4>
80008ebe:	70 08       	ld.w	r8,r8[0x0]
80008ec0:	ef 68 ff ff 	st.b	r7[-1],r8
				break;
80008ec4:	d7 03       	nop
80008ec6:	c0 a8       	rjmp	80008eda <write_region_to_flash+0x82>
			case 4: //configuration
				tmpIdx = configFlashIdx;
80008ec8:	4d 68       	lddpc	r8,80009020 <write_region_to_flash+0x1c8>
80008eca:	70 08       	ld.w	r8,r8[0x0]
80008ecc:	ef 68 ff ff 	st.b	r7[-1],r8
80008ed0:	c0 58       	rjmp	80008eda <write_region_to_flash+0x82>
				break;
		}
	}
	else //use the specific index passed to this function
	{
		tmpIdx = idx;
80008ed2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80008ed6:	ef 68 ff ff 	st.b	r7[-1],r8
	}
	
	switch (sel)
80008eda:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80008ede:	58 28       	cp.w	r8,2
80008ee0:	c4 60       	breq	80008f6c <write_region_to_flash+0x114>
80008ee2:	e0 89 00 07 	brgt	80008ef0 <write_region_to_flash+0x98>
80008ee6:	58 08       	cp.w	r8,0
80008ee8:	c0 90       	breq	80008efa <write_region_to_flash+0xa2>
80008eea:	58 18       	cp.w	r8,1
80008eec:	c2 40       	breq	80008f34 <write_region_to_flash+0xdc>
80008eee:	c8 c8       	rjmp	80009006 <write_region_to_flash+0x1ae>
80008ef0:	58 38       	cp.w	r8,3
80008ef2:	c5 80       	breq	80008fa2 <write_region_to_flash+0x14a>
80008ef4:	58 48       	cp.w	r8,4
80008ef6:	c7 00       	breq	80008fd6 <write_region_to_flash+0x17e>
80008ef8:	c8 78       	rjmp	80009006 <write_region_to_flash+0x1ae>
	{
		case 0: //serial ID and flags
			//NOTE: this is not as parameterized as it should be, only good for 2 sectors, but good enough for now. 
			
			sf[0].csum = csum;
80008efa:	4c b9       	lddpc	r9,80009024 <write_region_to_flash+0x1cc>
80008efc:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80008f00:	b2 f8       	st.b	r9[0x7],r8
			flashOffset = tmpIdx * 128 * NUM_SERIAL_ID_SECTORS_PER_BUF;
80008f02:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008f06:	12 98       	mov	r8,r9
80008f08:	a1 78       	lsl	r8,0x1
80008f0a:	12 08       	add	r8,r9
80008f0c:	a9 68       	lsl	r8,0x8
80008f0e:	ef 48 ff f8 	st.w	r7[-8],r8
			tmpFlashOffset = flashOffset + (unsigned long) serialIdAndFlagsFlash;
80008f12:	4c 68       	lddpc	r8,80009028 <write_region_to_flash+0x1d0>
80008f14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008f18:	f2 08 00 08 	add	r8,r9,r8
80008f1c:	ef 48 ff f4 	st.w	r7[-12],r8
			flashc_memcpy((volatile void*)tmpFlashOffset, &sf, sizeof(sf), true);
80008f20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f24:	30 19       	mov	r9,1
80008f26:	e0 6a 03 00 	mov	r10,768
80008f2a:	4b fb       	lddpc	r11,80009024 <write_region_to_flash+0x1cc>
80008f2c:	10 9c       	mov	r12,r8
80008f2e:	f0 1f 00 40 	mcall	8000902c <write_region_to_flash+0x1d4>
			break;
80008f32:	c6 a8       	rjmp	80009006 <write_region_to_flash+0x1ae>

		case 1: //san cycles
			//NOTE: this is not as parameterized as it should be, only good for 2 sectors, but good enough for now.
			
			sanc.csum = csum;
80008f34:	4b f9       	lddpc	r9,80009030 <write_region_to_flash+0x1d8>
80008f36:	72 08       	ld.w	r8,r9[0x0]
80008f38:	ef 3a ff e8 	ld.ub	r10,r7[-24]
80008f3c:	f1 da d0 88 	bfins	r8,r10,0x4,0x8
80008f40:	93 08       	st.w	r9[0x0],r8
			flashOffset = tmpIdx * 128 * NUM_SAN_CYCLE_BUFS_PER_SECTOR; //one sector per buf
80008f42:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008f46:	a7 78       	lsl	r8,0x7
80008f48:	ef 48 ff f8 	st.w	r7[-8],r8
			tmpFlashOffset = flashOffset + (unsigned long) sanitationCyclesFlash;
80008f4c:	4b a8       	lddpc	r8,80009034 <write_region_to_flash+0x1dc>
80008f4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008f52:	f2 08 00 08 	add	r8,r9,r8
80008f56:	ef 48 ff f4 	st.w	r7[-12],r8
			flashc_memcpy((volatile void*)tmpFlashOffset, &sanc, sizeof(sanc), true);
80008f5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f5e:	30 19       	mov	r9,1
80008f60:	30 4a       	mov	r10,4
80008f62:	4b 4b       	lddpc	r11,80009030 <write_region_to_flash+0x1d8>
80008f64:	10 9c       	mov	r12,r8
80008f66:	f0 1f 00 32 	mcall	8000902c <write_region_to_flash+0x1d4>
			break;
80008f6a:	c4 e8       	rjmp	80009006 <write_region_to_flash+0x1ae>

		case 2: //usage hours
			h.csum = csum;
80008f6c:	4b 39       	lddpc	r9,80009038 <write_region_to_flash+0x1e0>
80008f6e:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80008f72:	f3 68 00 c0 	st.b	r9[192],r8
			flashOffset = tmpIdx * 128 * NUM_USAGE_HOURS_SECTORS_PER_BUF;
80008f76:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008f7a:	a9 68       	lsl	r8,0x8
80008f7c:	ef 48 ff f8 	st.w	r7[-8],r8
			tmpFlashOffset = flashOffset + (unsigned long) usageHoursFlash;
80008f80:	4a f8       	lddpc	r8,8000903c <write_region_to_flash+0x1e4>
80008f82:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008f86:	f2 08 00 08 	add	r8,r9,r8
80008f8a:	ef 48 ff f4 	st.w	r7[-12],r8
			flashc_memcpy((volatile void*)tmpFlashOffset, &h, sizeof(h), true);
80008f8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008f92:	30 19       	mov	r9,1
80008f94:	e0 6a 00 c2 	mov	r10,194
80008f98:	4a 8b       	lddpc	r11,80009038 <write_region_to_flash+0x1e0>
80008f9a:	10 9c       	mov	r12,r8
80008f9c:	f0 1f 00 24 	mcall	8000902c <write_region_to_flash+0x1d4>
			break;
80008fa0:	c3 38       	rjmp	80009006 <write_region_to_flash+0x1ae>
			
		case 3: //usage minutes
			//NOTE: this is not as parameterized as it should be, but good enough for now.
			m.csum = csum;
80008fa2:	4a 89       	lddpc	r9,80009040 <write_region_to_flash+0x1e8>
80008fa4:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80008fa8:	f3 68 00 64 	st.b	r9[100],r8
			flashOffset = tmpIdx * 128 * NUM_USAGE_MINS_BUFS_PER_SECTOR;
80008fac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008fb0:	a7 78       	lsl	r8,0x7
80008fb2:	ef 48 ff f8 	st.w	r7[-8],r8
			tmpFlashOffset = flashOffset + (unsigned long) usageMinutesFlash;
80008fb6:	4a 48       	lddpc	r8,80009044 <write_region_to_flash+0x1ec>
80008fb8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008fbc:	f2 08 00 08 	add	r8,r9,r8
80008fc0:	ef 48 ff f4 	st.w	r7[-12],r8
			flashc_memcpy((volatile void*)tmpFlashOffset, &m, sizeof(m), true);
80008fc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008fc8:	30 19       	mov	r9,1
80008fca:	36 8a       	mov	r10,104
80008fcc:	49 db       	lddpc	r11,80009040 <write_region_to_flash+0x1e8>
80008fce:	10 9c       	mov	r12,r8
80008fd0:	f0 1f 00 17 	mcall	8000902c <write_region_to_flash+0x1d4>
			break;
80008fd4:	c1 98       	rjmp	80009006 <write_region_to_flash+0x1ae>

		case 4: //configuration
			c.csum = csum;
80008fd6:	49 d9       	lddpc	r9,80009048 <write_region_to_flash+0x1f0>
80008fd8:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80008fdc:	b2 98       	st.b	r9[0x1],r8
			flashOffset = tmpIdx * 128 * NUM_CONFIG_BUFS_PER_SECTOR; //one sector per buf
80008fde:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008fe2:	a7 78       	lsl	r8,0x7
80008fe4:	ef 48 ff f8 	st.w	r7[-8],r8
			tmpFlashOffset = flashOffset + (unsigned long) configFlash;
80008fe8:	49 98       	lddpc	r8,8000904c <write_region_to_flash+0x1f4>
80008fea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008fee:	f2 08 00 08 	add	r8,r9,r8
80008ff2:	ef 48 ff f4 	st.w	r7[-12],r8
			flashc_memcpy((volatile void*)tmpFlashOffset, &c, sizeof(c), true);
80008ff6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008ffa:	30 19       	mov	r9,1
80008ffc:	30 2a       	mov	r10,2
80008ffe:	49 3b       	lddpc	r11,80009048 <write_region_to_flash+0x1f0>
80009000:	10 9c       	mov	r12,r8
80009002:	f0 1f 00 0b 	mcall	8000902c <write_region_to_flash+0x1d4>
			break;
	}
	
	return SUCCESS;	
80009006:	30 08       	mov	r8,0
}
80009008:	10 9c       	mov	r12,r8
8000900a:	2f ad       	sub	sp,-24
8000900c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009010:	00 00       	add	r0,r0
80009012:	07 b8       	ld.ub	r8,r3[0x3]
80009014:	00 00       	add	r0,r0
80009016:	07 bc       	ld.ub	r12,r3[0x3]
80009018:	00 00       	add	r0,r0
8000901a:	07 c0       	ld.ub	r0,r3[0x4]
8000901c:	00 00       	add	r0,r0
8000901e:	07 c4       	ld.ub	r4,r3[0x4]
80009020:	00 00       	add	r0,r0
80009022:	07 c8       	ld.ub	r8,r3[0x4]
80009024:	00 00       	add	r0,r0
80009026:	08 44       	or	r4,r4
80009028:	80 07       	ld.sh	r7,r0[0x0]
8000902a:	fa 00       	*unknown*
8000902c:	80 00       	ld.sh	r0,r0[0x0]
8000902e:	43 84       	lddsp	r4,sp[0xe0]
80009030:	00 00       	add	r0,r0
80009032:	0c 20       	rsub	r0,r6
80009034:	80 07       	ld.sh	r7,r0[0x0]
80009036:	f7 00 00 00 	ld.sh	r0,r11[0]
8000903a:	0c 24       	rsub	r4,r6
8000903c:	80 07       	ld.sh	r7,r0[0x0]
8000903e:	f5 00 00 00 	ld.sh	r0,r10[0]
80009042:	0c f4       	st.b	--r6,r4
80009044:	80 07       	ld.sh	r7,r0[0x0]
80009046:	bb 00       	ld.d	r0,sp
80009048:	00 00       	add	r0,r0
8000904a:	0b f4       	ld.ub	r4,r5[0x7]
8000904c:	80 07       	ld.sh	r7,r0[0x0]
8000904e:	ba 00       	st.h	sp[0x0],r0

80009050 <write_bad_region_to_flash>:

void write_bad_region_to_flash(unsigned char sel, unsigned char idx);
void write_bad_region_to_flash(unsigned char sel, unsigned char idx)
{
80009050:	eb cd 40 80 	pushm	r7,lr
80009054:	1a 97       	mov	r7,sp
80009056:	21 fd       	sub	sp,124
80009058:	18 99       	mov	r9,r12
8000905a:	16 98       	mov	r8,r11
8000905c:	ef 69 ff 88 	st.b	r7[-120],r9
80009060:	ef 68 ff 84 	st.b	r7[-124],r8
	unsigned long tmpFlashOffset, flashOffset;
	unsigned char tmpIdx;

	USAGE_MINS_SET tmpM;
	
	memset(&tmpM, 0x00, sizeof(m)); //just zero it out and don't give it a good checksum
80009064:	ee c8 00 74 	sub	r8,r7,116
80009068:	36 8a       	mov	r10,104
8000906a:	30 0b       	mov	r11,0
8000906c:	10 9c       	mov	r12,r8
8000906e:	f0 1f 00 1d 	mcall	800090e0 <write_bad_region_to_flash+0x90>
	
	if (sel != 3)
80009072:	ef 39 ff 88 	ld.ub	r9,r7[-120]
80009076:	30 38       	mov	r8,3
80009078:	f0 09 18 00 	cp.b	r9,r8
8000907c:	c2 e1       	brne	800090d8 <write_bad_region_to_flash+0x88>
	{
		return; //we only do this for the minutes region
	}
	
	if (idx == 0xFF) //use the default system index
8000907e:	ef 39 ff 84 	ld.ub	r9,r7[-124]
80009082:	3f f8       	mov	r8,-1
80009084:	f0 09 18 00 	cp.b	r9,r8
80009088:	c0 a1       	brne	8000909c <write_bad_region_to_flash+0x4c>
	{
		switch(sel)
8000908a:	ef 38 ff 88 	ld.ub	r8,r7[-120]
8000908e:	58 38       	cp.w	r8,3
80009090:	c0 a1       	brne	800090a4 <write_bad_region_to_flash+0x54>
		{
			case 3: //usage minutes
				tmpIdx = mFlashIdx;
80009092:	49 58       	lddpc	r8,800090e4 <write_bad_region_to_flash+0x94>
80009094:	70 08       	ld.w	r8,r8[0x0]
80009096:	ef 68 ff ff 	st.b	r7[-1],r8
8000909a:	c0 58       	rjmp	800090a4 <write_bad_region_to_flash+0x54>
				break;
		}
	}
	else //use the specific index passed to this function
	{
		tmpIdx = idx;
8000909c:	ef 38 ff 84 	ld.ub	r8,r7[-124]
800090a0:	ef 68 ff ff 	st.b	r7[-1],r8
	}
	
	switch (sel)
800090a4:	ef 38 ff 88 	ld.ub	r8,r7[-120]
800090a8:	58 38       	cp.w	r8,3
800090aa:	c1 81       	brne	800090da <write_bad_region_to_flash+0x8a>
	{
		case 3: //usage minutes
			flashOffset = tmpIdx * 128 * NUM_USAGE_MINS_BUFS_PER_SECTOR;
800090ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800090b0:	a7 78       	lsl	r8,0x7
800090b2:	ef 48 ff f8 	st.w	r7[-8],r8
			tmpFlashOffset = flashOffset + (unsigned long) usageMinutesFlash;
800090b6:	48 d8       	lddpc	r8,800090e8 <write_bad_region_to_flash+0x98>
800090b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800090bc:	f2 08 00 08 	add	r8,r9,r8
800090c0:	ef 48 ff f4 	st.w	r7[-12],r8
			flashc_memcpy((volatile void*)tmpFlashOffset, &tmpM, sizeof(m), false); //don't erase, it would just cause the flash to wear out twice as fast
800090c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800090c8:	ee cb 00 74 	sub	r11,r7,116
800090cc:	30 09       	mov	r9,0
800090ce:	36 8a       	mov	r10,104
800090d0:	10 9c       	mov	r12,r8
800090d2:	f0 1f 00 07 	mcall	800090ec <write_bad_region_to_flash+0x9c>
800090d6:	c0 28       	rjmp	800090da <write_bad_region_to_flash+0x8a>
	
	memset(&tmpM, 0x00, sizeof(m)); //just zero it out and don't give it a good checksum
	
	if (sel != 3)
	{
		return; //we only do this for the minutes region
800090d8:	d7 03       	nop
			tmpFlashOffset = flashOffset + (unsigned long) usageMinutesFlash;
			flashc_memcpy((volatile void*)tmpFlashOffset, &tmpM, sizeof(m), false); //don't erase, it would just cause the flash to wear out twice as fast
			break;
	}
	
}
800090da:	2e 1d       	sub	sp,-124
800090dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800090e0:	80 00       	ld.sh	r0,r0[0x0]
800090e2:	c7 e6       	brmi	800091de <copy_region_to_another_sector+0xee>
800090e4:	00 00       	add	r0,r0
800090e6:	07 c4       	ld.ub	r4,r3[0x4]
800090e8:	80 07       	ld.sh	r7,r0[0x0]
800090ea:	bb 00       	ld.d	r0,sp
800090ec:	80 00       	ld.sh	r0,r0[0x0]
800090ee:	43 84       	lddsp	r4,sp[0xe0]

800090f0 <copy_region_to_another_sector>:


void copy_region_to_another_sector(unsigned char sel);
void copy_region_to_another_sector(unsigned char sel)
{
800090f0:	eb cd 40 80 	pushm	r7,lr
800090f4:	1a 97       	mov	r7,sp
800090f6:	20 2d       	sub	sp,8
800090f8:	18 98       	mov	r8,r12
800090fa:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char tmpIdx, csum;
	
	switch (sel)
800090fe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009102:	58 28       	cp.w	r8,2
80009104:	c5 10       	breq	800091a6 <copy_region_to_another_sector+0xb6>
80009106:	e0 89 00 07 	brgt	80009114 <copy_region_to_another_sector+0x24>
8000910a:	58 08       	cp.w	r8,0
8000910c:	c0 a0       	breq	80009120 <copy_region_to_another_sector+0x30>
8000910e:	58 18       	cp.w	r8,1
80009110:	c2 90       	breq	80009162 <copy_region_to_another_sector+0x72>
80009112:	cb 38       	rjmp	80009278 <copy_region_to_another_sector+0x188>
80009114:	58 38       	cp.w	r8,3
80009116:	c6 90       	breq	800091e8 <copy_region_to_another_sector+0xf8>
80009118:	58 48       	cp.w	r8,4
8000911a:	e0 80 00 8f 	breq	80009238 <copy_region_to_another_sector+0x148>
8000911e:	ca d8       	rjmp	80009278 <copy_region_to_another_sector+0x188>
	{
		case 0: //serial ID and flags
			if (sfFlashIdx < ((NUM_SERIAL_ID_BUFS_SECTORS/NUM_SERIAL_ID_SECTORS_PER_BUF)/2))
80009120:	4d 88       	lddpc	r8,80009280 <copy_region_to_another_sector+0x190>
80009122:	70 08       	ld.w	r8,r8[0x0]
80009124:	58 08       	cp.w	r8,0
80009126:	c0 81       	brne	80009136 <copy_region_to_another_sector+0x46>
			{
				tmpIdx = sfFlashIdx + ((NUM_SERIAL_ID_BUFS_SECTORS/NUM_SERIAL_ID_SECTORS_PER_BUF)/2);
80009128:	4d 68       	lddpc	r8,80009280 <copy_region_to_another_sector+0x190>
8000912a:	70 08       	ld.w	r8,r8[0x0]
8000912c:	5c 58       	castu.b	r8
8000912e:	2f f8       	sub	r8,-1
80009130:	ef 68 ff fe 	st.b	r7[-2],r8
80009134:	c0 78       	rjmp	80009142 <copy_region_to_another_sector+0x52>
			}
			else
			{
				tmpIdx = sfFlashIdx - ((NUM_SERIAL_ID_BUFS_SECTORS/NUM_SERIAL_ID_SECTORS_PER_BUF)/2);
80009136:	4d 38       	lddpc	r8,80009280 <copy_region_to_another_sector+0x190>
80009138:	70 08       	ld.w	r8,r8[0x0]
8000913a:	5c 58       	castu.b	r8
8000913c:	20 18       	sub	r8,1
8000913e:	ef 68 ff fe 	st.b	r7[-2],r8
			}
			
			csum = calc_region_checksum(0);
80009142:	30 0c       	mov	r12,0
80009144:	f0 1f 00 50 	mcall	80009284 <copy_region_to_another_sector+0x194>
80009148:	18 98       	mov	r8,r12
8000914a:	ef 68 ff ff 	st.b	r7[-1],r8
			write_region_to_flash(0, tmpIdx, csum);
8000914e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009152:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80009156:	12 9a       	mov	r10,r9
80009158:	10 9b       	mov	r11,r8
8000915a:	30 0c       	mov	r12,0
8000915c:	f0 1f 00 4b 	mcall	80009288 <copy_region_to_another_sector+0x198>
			break;
80009160:	c8 c8       	rjmp	80009278 <copy_region_to_another_sector+0x188>

		case 1: //san cycles
			if (sanCycleFlashIdx < ((NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS)/2))
80009162:	4c b8       	lddpc	r8,8000928c <copy_region_to_another_sector+0x19c>
80009164:	70 08       	ld.w	r8,r8[0x0]
80009166:	58 28       	cp.w	r8,2
80009168:	e0 8b 00 09 	brhi	8000917a <copy_region_to_another_sector+0x8a>
			{
				tmpIdx = sanCycleFlashIdx + ((NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS)/2);
8000916c:	4c 88       	lddpc	r8,8000928c <copy_region_to_another_sector+0x19c>
8000916e:	70 08       	ld.w	r8,r8[0x0]
80009170:	5c 58       	castu.b	r8
80009172:	2f d8       	sub	r8,-3
80009174:	ef 68 ff fe 	st.b	r7[-2],r8
80009178:	c0 78       	rjmp	80009186 <copy_region_to_another_sector+0x96>
			}
			else
			{
				tmpIdx = sanCycleFlashIdx - ((NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS)/2);
8000917a:	4c 58       	lddpc	r8,8000928c <copy_region_to_another_sector+0x19c>
8000917c:	70 08       	ld.w	r8,r8[0x0]
8000917e:	5c 58       	castu.b	r8
80009180:	20 38       	sub	r8,3
80009182:	ef 68 ff fe 	st.b	r7[-2],r8
			}
			csum = calc_region_checksum(1);
80009186:	30 1c       	mov	r12,1
80009188:	f0 1f 00 3f 	mcall	80009284 <copy_region_to_another_sector+0x194>
8000918c:	18 98       	mov	r8,r12
8000918e:	ef 68 ff ff 	st.b	r7[-1],r8
			write_region_to_flash(1, tmpIdx, csum);
80009192:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009196:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000919a:	12 9a       	mov	r10,r9
8000919c:	10 9b       	mov	r11,r8
8000919e:	30 1c       	mov	r12,1
800091a0:	f0 1f 00 3a 	mcall	80009288 <copy_region_to_another_sector+0x198>
			break;
800091a4:	c6 a8       	rjmp	80009278 <copy_region_to_another_sector+0x188>

		case 2: //usage hours
			if (hFlashIdx < ((NUM_USAGE_HOURS_BUFS_SECTORS/NUM_USAGE_HOURS_SECTORS_PER_BUF)/2))
800091a6:	4b b8       	lddpc	r8,80009290 <copy_region_to_another_sector+0x1a0>
800091a8:	70 08       	ld.w	r8,r8[0x0]
800091aa:	58 08       	cp.w	r8,0
800091ac:	c0 81       	brne	800091bc <copy_region_to_another_sector+0xcc>
			{
				tmpIdx = hFlashIdx + ((NUM_USAGE_HOURS_BUFS_SECTORS/NUM_USAGE_HOURS_SECTORS_PER_BUF)/2);
800091ae:	4b 98       	lddpc	r8,80009290 <copy_region_to_another_sector+0x1a0>
800091b0:	70 08       	ld.w	r8,r8[0x0]
800091b2:	5c 58       	castu.b	r8
800091b4:	2f f8       	sub	r8,-1
800091b6:	ef 68 ff fe 	st.b	r7[-2],r8
800091ba:	c0 78       	rjmp	800091c8 <copy_region_to_another_sector+0xd8>
			}
			else
			{
				tmpIdx = hFlashIdx - ((NUM_USAGE_HOURS_BUFS_SECTORS/NUM_USAGE_HOURS_SECTORS_PER_BUF)/2);
800091bc:	4b 58       	lddpc	r8,80009290 <copy_region_to_another_sector+0x1a0>
800091be:	70 08       	ld.w	r8,r8[0x0]
800091c0:	5c 58       	castu.b	r8
800091c2:	20 18       	sub	r8,1
800091c4:	ef 68 ff fe 	st.b	r7[-2],r8
			}
			csum = calc_region_checksum(2);
800091c8:	30 2c       	mov	r12,2
800091ca:	f0 1f 00 2f 	mcall	80009284 <copy_region_to_another_sector+0x194>
800091ce:	18 98       	mov	r8,r12
800091d0:	ef 68 ff ff 	st.b	r7[-1],r8
			write_region_to_flash(2, tmpIdx, csum);
800091d4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800091d8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800091dc:	12 9a       	mov	r10,r9
800091de:	10 9b       	mov	r11,r8
800091e0:	30 2c       	mov	r12,2
800091e2:	f0 1f 00 2a 	mcall	80009288 <copy_region_to_another_sector+0x198>
			break;
800091e6:	c4 98       	rjmp	80009278 <copy_region_to_another_sector+0x188>

		case 3: //usage minutes
			tmpIdx = mFlashIdx + (NUM_USAGE_MINS_BUFS_SECTORS/2);
800091e8:	4a b8       	lddpc	r8,80009294 <copy_region_to_another_sector+0x1a4>
800091ea:	70 08       	ld.w	r8,r8[0x0]
800091ec:	5c 58       	castu.b	r8
800091ee:	2c 68       	sub	r8,-58
800091f0:	ef 68 ff fe 	st.b	r7[-2],r8
			if (tmpIdx < (NUM_USAGE_MINS_BUFS_SECTORS/2))
800091f4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800091f8:	33 98       	mov	r8,57
800091fa:	f0 09 18 00 	cp.b	r9,r8
800091fe:	e0 8b 00 08 	brhi	8000920e <copy_region_to_another_sector+0x11e>
			{
				tmpIdx += (NUM_USAGE_MINS_BUFS_SECTORS/2); //wrap if necessary
80009202:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80009206:	2c 68       	sub	r8,-58
80009208:	ef 68 ff fe 	st.b	r7[-2],r8
8000920c:	c0 68       	rjmp	80009218 <copy_region_to_another_sector+0x128>
			}
			else
			{
				tmpIdx -= (NUM_USAGE_MINS_BUFS_SECTORS/2); //wrap if necessary
8000920e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80009212:	23 a8       	sub	r8,58
80009214:	ef 68 ff fe 	st.b	r7[-2],r8
			}
			csum = calc_region_checksum(3);
80009218:	30 3c       	mov	r12,3
8000921a:	f0 1f 00 1b 	mcall	80009284 <copy_region_to_another_sector+0x194>
8000921e:	18 98       	mov	r8,r12
80009220:	ef 68 ff ff 	st.b	r7[-1],r8
			write_region_to_flash(3, tmpIdx, csum);
80009224:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009228:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000922c:	12 9a       	mov	r10,r9
8000922e:	10 9b       	mov	r11,r8
80009230:	30 3c       	mov	r12,3
80009232:	f0 1f 00 16 	mcall	80009288 <copy_region_to_another_sector+0x198>
			break;
80009236:	c2 18       	rjmp	80009278 <copy_region_to_another_sector+0x188>

		case 4: //configuration
			if (configFlashIdx < ((NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS)/2))
80009238:	49 88       	lddpc	r8,80009298 <copy_region_to_another_sector+0x1a8>
8000923a:	70 08       	ld.w	r8,r8[0x0]
8000923c:	58 08       	cp.w	r8,0
8000923e:	c0 81       	brne	8000924e <copy_region_to_another_sector+0x15e>
			{
				tmpIdx = configFlashIdx + ((NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS)/2);
80009240:	49 68       	lddpc	r8,80009298 <copy_region_to_another_sector+0x1a8>
80009242:	70 08       	ld.w	r8,r8[0x0]
80009244:	5c 58       	castu.b	r8
80009246:	2f f8       	sub	r8,-1
80009248:	ef 68 ff fe 	st.b	r7[-2],r8
8000924c:	c0 78       	rjmp	8000925a <copy_region_to_another_sector+0x16a>
			}
			else
			{
				tmpIdx = configFlashIdx - ((NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS)/2);
8000924e:	49 38       	lddpc	r8,80009298 <copy_region_to_another_sector+0x1a8>
80009250:	70 08       	ld.w	r8,r8[0x0]
80009252:	5c 58       	castu.b	r8
80009254:	20 18       	sub	r8,1
80009256:	ef 68 ff fe 	st.b	r7[-2],r8
			}
			csum = calc_region_checksum(4);
8000925a:	30 4c       	mov	r12,4
8000925c:	f0 1f 00 0a 	mcall	80009284 <copy_region_to_another_sector+0x194>
80009260:	18 98       	mov	r8,r12
80009262:	ef 68 ff ff 	st.b	r7[-1],r8
			write_region_to_flash(4, tmpIdx, csum);
80009266:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000926a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000926e:	12 9a       	mov	r10,r9
80009270:	10 9b       	mov	r11,r8
80009272:	30 4c       	mov	r12,4
80009274:	f0 1f 00 05 	mcall	80009288 <copy_region_to_another_sector+0x198>
			break;
	}
	
}
80009278:	2f ed       	sub	sp,-8
8000927a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000927e:	00 00       	add	r0,r0
80009280:	00 00       	add	r0,r0
80009282:	07 b8       	ld.ub	r8,r3[0x3]
80009284:	80 00       	ld.sh	r0,r0[0x0]
80009286:	85 60       	st.w	r2[0x18],r0
80009288:	80 00       	ld.sh	r0,r0[0x0]
8000928a:	8e 58       	ld.sh	r8,r7[0xa]
8000928c:	00 00       	add	r0,r0
8000928e:	07 bc       	ld.ub	r12,r3[0x3]
80009290:	00 00       	add	r0,r0
80009292:	07 c0       	ld.ub	r0,r3[0x4]
80009294:	00 00       	add	r0,r0
80009296:	07 c4       	ld.ub	r4,r3[0x4]
80009298:	00 00       	add	r0,r0
8000929a:	07 c8       	ld.ub	r8,r3[0x4]

8000929c <disrupt_prior_m_sector>:
 * determining the optimum minutes sector (picking the highest value) so we have to do something to disrupt prior
 * entries which is intentionally write a bad checksum to flash. 
 */
void disrupt_prior_m_sector(void);
void disrupt_prior_m_sector(void)
{
8000929c:	eb cd 40 80 	pushm	r7,lr
800092a0:	1a 97       	mov	r7,sp
800092a2:	20 1d       	sub	sp,4
	unsigned char tmpIdx;

	if (mFlashIdx > 0)
800092a4:	48 c8       	lddpc	r8,800092d4 <disrupt_prior_m_sector+0x38>
800092a6:	70 08       	ld.w	r8,r8[0x0]
800092a8:	58 08       	cp.w	r8,0
800092aa:	c0 80       	breq	800092ba <disrupt_prior_m_sector+0x1e>
	{
		tmpIdx = mFlashIdx - 1;
800092ac:	48 a8       	lddpc	r8,800092d4 <disrupt_prior_m_sector+0x38>
800092ae:	70 08       	ld.w	r8,r8[0x0]
800092b0:	5c 58       	castu.b	r8
800092b2:	20 18       	sub	r8,1
800092b4:	ef 68 ff ff 	st.b	r7[-1],r8
800092b8:	c0 48       	rjmp	800092c0 <disrupt_prior_m_sector+0x24>
	}
	else
	{
		tmpIdx = NUM_USAGE_MINS_BUFS_SECTORS - 1; //backwards wrap if necessary
800092ba:	37 38       	mov	r8,115
800092bc:	ef 68 ff ff 	st.b	r7[-1],r8
	}

	write_bad_region_to_flash(3, tmpIdx);
800092c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800092c4:	10 9b       	mov	r11,r8
800092c6:	30 3c       	mov	r12,3
800092c8:	f0 1f 00 04 	mcall	800092d8 <disrupt_prior_m_sector+0x3c>
	
}
800092cc:	2f fd       	sub	sp,-4
800092ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800092d2:	00 00       	add	r0,r0
800092d4:	00 00       	add	r0,r0
800092d6:	07 c4       	ld.ub	r4,r3[0x4]
800092d8:	80 00       	ld.sh	r0,r0[0x0]
800092da:	90 50       	ld.sh	r0,r8[0xa]

800092dc <find_first_open_usage_slot>:
unsigned char find_first_open_usage_slot(unsigned char sel)
#else
unsigned char find_first_open_usage_slot(void);
unsigned char find_first_open_usage_slot(void)
#endif
{
800092dc:	eb cd 40 80 	pushm	r7,lr
800092e0:	1a 97       	mov	r7,sp
800092e2:	20 1d       	sub	sp,4
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800092e4:	30 08       	mov	r8,0
800092e6:	ef 48 ff fc 	st.w	r7[-4],r8
800092ea:	c1 58       	rjmp	80009314 <find_first_open_usage_slot+0x38>
	{
		
#ifdef SERIAL_ID_AND_ALL_USAGE_COMBINED		
		if (!usageShdw[sel].u[i].slotFilled)
#else
		if (!sf[i].slotFilled)
800092ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800092f0:	49 38       	lddpc	r8,8000933c <find_first_open_usage_slot+0x60>
800092f2:	a1 79       	lsl	r9,0x1
800092f4:	2f f9       	sub	r9,-1
800092f6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800092fa:	f1 d8 c1 a1 	bfextu	r8,r8,0xd,0x1
800092fe:	5c 58       	castu.b	r8
80009300:	c0 51       	brne	8000930a <find_first_open_usage_slot+0x2e>
#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED
		{
			return i;
80009302:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009306:	5c 58       	castu.b	r8
80009308:	c1 58       	rjmp	80009332 <find_first_open_usage_slot+0x56>
#else
unsigned char find_first_open_usage_slot(void);
unsigned char find_first_open_usage_slot(void)
#endif
{
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
8000930a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000930e:	2f f8       	sub	r8,-1
80009310:	ef 48 ff fc 	st.w	r7[-4],r8
80009314:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009318:	e0 48 00 5f 	cp.w	r8,95
8000931c:	fe 98 ff e8 	brls	800092ec <find_first_open_usage_slot+0x10>
		{
			return i;
		}
	}
	
	print_ecdbg("No more room for LED board info. Cannot track minute usage for additional boards.\r\n");
80009320:	48 8c       	lddpc	r12,80009340 <find_first_open_usage_slot+0x64>
80009322:	f0 1f 00 09 	mcall	80009344 <find_first_open_usage_slot+0x68>
	
	sysErr.usageStructsFull = FAIL;
80009326:	48 99       	lddpc	r9,80009348 <find_first_open_usage_slot+0x6c>
80009328:	30 18       	mov	r8,1
8000932a:	f3 68 00 0e 	st.b	r9[14],r8
	
	return USAGE_FULL; //Error, no open slots
8000932e:	e0 68 00 ff 	mov	r8,255
}
80009332:	10 9c       	mov	r12,r8
80009334:	2f fd       	sub	sp,-4
80009336:	e3 cd 80 80 	ldm	sp++,r7,pc
8000933a:	00 00       	add	r0,r0
8000933c:	00 00       	add	r0,r0
8000933e:	08 44       	or	r4,r4
80009340:	80 00       	ld.sh	r0,r0[0x0]
80009342:	67 b4       	ld.w	r4,r3[0x6c]
80009344:	80 00       	ld.sh	r0,r0[0x0]
80009346:	33 38       	mov	r8,51
80009348:	00 00       	add	r0,r0
8000934a:	0b cc       	ld.ub	r12,r5[0x4]

8000934c <add_new_led_board_sides_to_usage>:
#if 0 //SERIAL_ID_AND_ALL_USAGE_COMBINED
void add_new_led_board_sides_to_usage(unsigned char sel)
#endif
void add_new_led_board_sides_to_usage(void)

{
8000934c:	eb cd 40 80 	pushm	r7,lr
80009350:	1a 97       	mov	r7,sp
80009352:	20 2d       	sub	sp,8
			usageShdw[sel].u[slotAssignment].slotFilled = 1;

			usageIdx[sel][i] = slotAssignment++;
#else

	firstOpenSlot = find_first_open_usage_slot();
80009354:	f0 1f 00 43 	mcall	80009460 <add_new_led_board_sides_to_usage+0x114>
80009358:	18 98       	mov	r8,r12
8000935a:	ef 68 ff fb 	st.b	r7[-5],r8
	
	slotAssignment = firstOpenSlot;
8000935e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80009362:	ef 68 ff fc 	st.b	r7[-4],r8
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
80009366:	30 08       	mov	r8,0
80009368:	ef 68 ff ff 	st.b	r7[-1],r8
8000936c:	c7 08       	rjmp	8000944c <add_new_led_board_sides_to_usage+0x100>
	{
		brdIdx = ledBrdSide[i].boardIdx;
8000936e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009372:	4b da       	lddpc	r10,80009464 <add_new_led_board_sides_to_usage+0x118>
80009374:	12 98       	mov	r8,r9
80009376:	a3 68       	lsl	r8,0x2
80009378:	12 08       	add	r8,r9
8000937a:	f4 08 00 08 	add	r8,r10,r8
8000937e:	2f c8       	sub	r8,-4
80009380:	11 88       	ld.ub	r8,r8[0x0]
80009382:	ef 68 ff fd 	st.b	r7[-3],r8
		
		top_botn = (i%2) ? TOP : BOTTOM; //odd sides are top, even sides are bottom
80009386:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000938a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000938e:	ef 68 ff fe 	st.b	r7[-2],r8
		
		if ((ledBrd[brdIdx].present) && (usageIdx[i] == NO_LED_BOARD_PRESENT)) //TODO: do I need the NO_LED_BOARD_PRESENT check? this should always be open at this point
80009392:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009396:	4b 5a       	lddpc	r10,80009468 <add_new_led_board_sides_to_usage+0x11c>
80009398:	12 98       	mov	r8,r9
8000939a:	a3 78       	lsl	r8,0x3
8000939c:	12 18       	sub	r8,r9
8000939e:	a1 78       	lsl	r8,0x1
800093a0:	f4 08 00 08 	add	r8,r10,r8
800093a4:	2f 88       	sub	r8,-8
800093a6:	11 88       	ld.ub	r8,r8[0x0]
800093a8:	58 08       	cp.w	r8,0
800093aa:	c4 c0       	breq	80009442 <add_new_led_board_sides_to_usage+0xf6>
800093ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800093b0:	4a f9       	lddpc	r9,8000946c <add_new_led_board_sides_to_usage+0x120>
800093b2:	f2 08 07 09 	ld.ub	r9,r9[r8]
800093b6:	3f f8       	mov	r8,-1
800093b8:	f0 09 18 00 	cp.b	r9,r8
800093bc:	c4 31       	brne	80009442 <add_new_led_board_sides_to_usage+0xf6>
		{
			strncpy((char*)&sf[slotAssignment].id[0], (char*)&ledBrd[brdIdx].id[0],6);
800093be:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800093c2:	12 98       	mov	r8,r9
800093c4:	a3 78       	lsl	r8,0x3
800093c6:	12 18       	sub	r8,r9
800093c8:	a1 78       	lsl	r8,0x1
800093ca:	4a 89       	lddpc	r9,80009468 <add_new_led_board_sides_to_usage+0x11c>
800093cc:	12 08       	add	r8,r9
800093ce:	f0 c9 ff ff 	sub	r9,r8,-1
800093d2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800093d6:	f0 0a 15 03 	lsl	r10,r8,0x3
800093da:	4a 68       	lddpc	r8,80009470 <add_new_led_board_sides_to_usage+0x124>
800093dc:	f4 08 00 08 	add	r8,r10,r8
800093e0:	30 6a       	mov	r10,6
800093e2:	12 9b       	mov	r11,r9
800093e4:	10 9c       	mov	r12,r8
800093e6:	f0 1f 00 24 	mcall	80009474 <add_new_led_board_sides_to_usage+0x128>
			
			sf[slotAssignment].top_botn = top_botn;
800093ea:	ef 3a ff fc 	ld.ub	r10,r7[-4]
800093ee:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800093f2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800093f6:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800093fa:	49 e9       	lddpc	r9,80009470 <add_new_led_board_sides_to_usage+0x124>
800093fc:	f4 08 15 01 	lsl	r8,r10,0x1
80009400:	f0 ca ff ff 	sub	r10,r8,-1
80009404:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80009408:	f1 db d1 e1 	bfins	r8,r11,0xf,0x1
8000940c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
			
			sf[slotAssignment].slotFilled = 1;
80009410:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009414:	49 79       	lddpc	r9,80009470 <add_new_led_board_sides_to_usage+0x124>
80009416:	a1 78       	lsl	r8,0x1
80009418:	f0 ca ff ff 	sub	r10,r8,-1
8000941c:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80009420:	30 1b       	mov	r11,1
80009422:	f1 db d1 a1 	bfins	r8,r11,0xd,0x1
80009426:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8

			usageIdx[i] = slotAssignment++;
8000942a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000942e:	49 0a       	lddpc	r10,8000946c <add_new_led_board_sides_to_usage+0x120>
80009430:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009434:	f4 09 0b 08 	st.b	r10[r9],r8
80009438:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000943c:	2f f8       	sub	r8,-1
8000943e:	ef 68 ff fc 	st.b	r7[-4],r8

	firstOpenSlot = find_first_open_usage_slot();
	
	slotAssignment = firstOpenSlot;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
80009442:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009446:	2f f8       	sub	r8,-1
80009448:	ef 68 ff ff 	st.b	r7[-1],r8
8000944c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009450:	30 78       	mov	r8,7
80009452:	f0 09 18 00 	cp.b	r9,r8
80009456:	fe 98 ff 8c 	brls	8000936e <add_new_led_board_sides_to_usage+0x22>
			usageIdx[i] = slotAssignment++;

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED			
		}
	}
}
8000945a:	2f ed       	sub	sp,-8
8000945c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009460:	80 00       	ld.sh	r0,r0[0x0]
80009462:	92 dc       	ld.uh	r12,r9[0xa]
80009464:	00 00       	add	r0,r0
80009466:	0b f6       	ld.ub	r6,r5[0x7]
80009468:	00 00       	add	r0,r0
8000946a:	0b 46       	ld.w	r6,--r5
8000946c:	00 00       	add	r0,r0
8000946e:	0b b8       	ld.ub	r8,r5[0x3]
80009470:	00 00       	add	r0,r0
80009472:	08 44       	or	r4,r4
80009474:	80 00       	ld.sh	r0,r0[0x0]
80009476:	c8 4c       	rcall	8000957e <increment_ledBoard_usage_min+0x1a>

80009478 <inc_sanMins>:

#else

void inc_sanMins(void);
void inc_sanMins(void)
{
80009478:	eb cd 40 80 	pushm	r7,lr
8000947c:	1a 97       	mov	r7,sp
	m.sanMins++;
8000947e:	48 58       	lddpc	r8,80009490 <inc_sanMins+0x18>
80009480:	71 88       	ld.w	r8,r8[0x60]
80009482:	f0 c9 ff ff 	sub	r9,r8,-1
80009486:	48 38       	lddpc	r8,80009490 <inc_sanMins+0x18>
80009488:	f1 49 00 60 	st.w	r8[96],r9
	
	//the rest of the update of the struct, calc'ing the csum, writing to flash etc will happen when the usage minutes get updated
}
8000948c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009490:	00 00       	add	r0,r0
80009492:	0c f4       	st.b	--r6,r4

80009494 <inc_sanCycles>:

void inc_sanCycles(void);
void inc_sanCycles(void)
{
80009494:	eb cd 40 80 	pushm	r7,lr
80009498:	1a 97       	mov	r7,sp
	sanc.cycles++;
8000949a:	49 a8       	lddpc	r8,80009500 <inc_sanCycles+0x6c>
8000949c:	70 08       	ld.w	r8,r8[0x0]
8000949e:	f1 d8 c1 94 	bfextu	r8,r8,0xc,0x14
800094a2:	f0 c9 ff ff 	sub	r9,r8,-1
800094a6:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800094aa:	49 6a       	lddpc	r10,80009500 <inc_sanCycles+0x6c>
800094ac:	74 08       	ld.w	r8,r10[0x0]
800094ae:	f1 d9 d1 94 	bfins	r8,r9,0xc,0x14
800094b2:	95 08       	st.w	r10[0x0],r8
	sanCycleFlashIdx++;
800094b4:	49 48       	lddpc	r8,80009504 <inc_sanCycles+0x70>
800094b6:	70 08       	ld.w	r8,r8[0x0]
800094b8:	f0 c9 ff ff 	sub	r9,r8,-1
800094bc:	49 28       	lddpc	r8,80009504 <inc_sanCycles+0x70>
800094be:	91 09       	st.w	r8[0x0],r9
	if (sanCycleFlashIdx >= (NUM_SAN_CYCLE_BUFS_PER_SECTOR * NUM_SAN_CYCLE_BUFS_SECTORS))
800094c0:	49 18       	lddpc	r8,80009504 <inc_sanCycles+0x70>
800094c2:	70 08       	ld.w	r8,r8[0x0]
800094c4:	58 58       	cp.w	r8,5
800094c6:	e0 88 00 05 	brls	800094d0 <inc_sanCycles+0x3c>
	{
		sanCycleFlashIdx = 0;
800094ca:	48 f8       	lddpc	r8,80009504 <inc_sanCycles+0x70>
800094cc:	30 09       	mov	r9,0
800094ce:	91 09       	st.w	r8[0x0],r9
	}
	sanc.csum = calc_region_checksum(1);
800094d0:	30 1c       	mov	r12,1
800094d2:	f0 1f 00 0e 	mcall	80009508 <inc_sanCycles+0x74>
800094d6:	18 98       	mov	r8,r12
800094d8:	10 9a       	mov	r10,r8
800094da:	48 a9       	lddpc	r9,80009500 <inc_sanCycles+0x6c>
800094dc:	72 08       	ld.w	r8,r9[0x0]
800094de:	f1 da d0 88 	bfins	r8,r10,0x4,0x8
800094e2:	93 08       	st.w	r9[0x0],r8
	write_region_to_flash(1, 0xFF, sanc.csum);
800094e4:	48 78       	lddpc	r8,80009500 <inc_sanCycles+0x6c>
800094e6:	70 08       	ld.w	r8,r8[0x0]
800094e8:	f1 d8 c0 88 	bfextu	r8,r8,0x4,0x8
800094ec:	5c 58       	castu.b	r8
800094ee:	10 9a       	mov	r10,r8
800094f0:	e0 6b 00 ff 	mov	r11,255
800094f4:	30 1c       	mov	r12,1
800094f6:	f0 1f 00 06 	mcall	8000950c <inc_sanCycles+0x78>
}
800094fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800094fe:	00 00       	add	r0,r0
80009500:	00 00       	add	r0,r0
80009502:	0c 20       	rsub	r0,r6
80009504:	00 00       	add	r0,r0
80009506:	07 bc       	ld.ub	r12,r3[0x3]
80009508:	80 00       	ld.sh	r0,r0[0x0]
8000950a:	85 60       	st.w	r2[0x18],r0
8000950c:	80 00       	ld.sh	r0,r0[0x0]
8000950e:	8e 58       	ld.sh	r8,r7[0xa]

80009510 <store_config>:

void store_config(void);
void store_config(void)
{
80009510:	eb cd 40 80 	pushm	r7,lr
80009514:	1a 97       	mov	r7,sp
	/* initialDTE set in the serial user interface */
	configFlashIdx++;
80009516:	49 08       	lddpc	r8,80009554 <store_config+0x44>
80009518:	70 08       	ld.w	r8,r8[0x0]
8000951a:	f0 c9 ff ff 	sub	r9,r8,-1
8000951e:	48 e8       	lddpc	r8,80009554 <store_config+0x44>
80009520:	91 09       	st.w	r8[0x0],r9
	if (configFlashIdx >= (NUM_CONFIG_BUFS_PER_SECTOR * NUM_CONFIG_BUFS_SECTORS))
80009522:	48 d8       	lddpc	r8,80009554 <store_config+0x44>
80009524:	70 08       	ld.w	r8,r8[0x0]
80009526:	58 18       	cp.w	r8,1
80009528:	e0 88 00 05 	brls	80009532 <store_config+0x22>
	{
		configFlashIdx = 0;
8000952c:	48 a8       	lddpc	r8,80009554 <store_config+0x44>
8000952e:	30 09       	mov	r9,0
80009530:	91 09       	st.w	r8[0x0],r9
	}
	c.csum = calc_region_checksum(4);
80009532:	30 4c       	mov	r12,4
80009534:	f0 1f 00 09 	mcall	80009558 <store_config+0x48>
80009538:	18 98       	mov	r8,r12
8000953a:	48 99       	lddpc	r9,8000955c <store_config+0x4c>
8000953c:	b2 98       	st.b	r9[0x1],r8
	write_region_to_flash(4, 0xFF, c.csum);
8000953e:	48 88       	lddpc	r8,8000955c <store_config+0x4c>
80009540:	11 98       	ld.ub	r8,r8[0x1]
80009542:	10 9a       	mov	r10,r8
80009544:	e0 6b 00 ff 	mov	r11,255
80009548:	30 4c       	mov	r12,4
8000954a:	f0 1f 00 06 	mcall	80009560 <store_config+0x50>
}
8000954e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009552:	00 00       	add	r0,r0
80009554:	00 00       	add	r0,r0
80009556:	07 c8       	ld.ub	r8,r3[0x4]
80009558:	80 00       	ld.sh	r0,r0[0x0]
8000955a:	85 60       	st.w	r2[0x18],r0
8000955c:	00 00       	add	r0,r0
8000955e:	0b f4       	ld.ub	r4,r5[0x7]
80009560:	80 00       	ld.sh	r0,r0[0x0]
80009562:	8e 58       	ld.sh	r8,r7[0xa]

80009564 <increment_ledBoard_usage_min>:

void increment_ledBoard_usage_min(void)
{
80009564:	eb cd 40 80 	pushm	r7,lr
80009568:	1a 97       	mov	r7,sp
8000956a:	20 2d       	sub	sp,8
	unsigned char idx;
	unsigned char topLEDboardLowerSideIdx;
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	unsigned char hourRollover = 0;
8000956c:	30 08       	mov	r8,0
8000956e:	ef 68 ff fd 	st.b	r7[-3],r8
	
	inc_sanMins();
80009572:	f0 1f 00 8d 	mcall	800097a4 <increment_ledBoard_usage_min+0x240>

	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
80009576:	30 08       	mov	r8,0
80009578:	ef 68 ff fe 	st.b	r7[-2],r8
8000957c:	cb f8       	rjmp	800096fa <increment_ledBoard_usage_min+0x196>
	{
		if (shelf[i].active == SHELF_ACTIVE)
8000957e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80009582:	fe fa 02 26 	ld.w	r10,pc[550]
80009586:	12 98       	mov	r8,r9
80009588:	a3 68       	lsl	r8,0x2
8000958a:	12 08       	add	r8,r9
8000958c:	f4 08 00 08 	add	r8,r10,r8
80009590:	11 89       	ld.ub	r9,r8[0x0]
80009592:	30 18       	mov	r8,1
80009594:	f0 09 18 00 	cp.b	r9,r8
80009598:	e0 81 00 ac 	brne	800096f0 <increment_ledBoard_usage_min+0x18c>
		{
			topLEDboardLowerSideIdx = ledBrd[shelf[i].tLedIdx].lSideIdx;
8000959c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800095a0:	fe fa 02 08 	ld.w	r10,pc[520]
800095a4:	12 98       	mov	r8,r9
800095a6:	a3 68       	lsl	r8,0x2
800095a8:	12 08       	add	r8,r9
800095aa:	f4 08 00 08 	add	r8,r10,r8
800095ae:	2f f8       	sub	r8,-1
800095b0:	11 88       	ld.ub	r8,r8[0x0]
800095b2:	10 99       	mov	r9,r8
800095b4:	4f ea       	lddpc	r10,800097ac <increment_ledBoard_usage_min+0x248>
800095b6:	12 98       	mov	r8,r9
800095b8:	a3 78       	lsl	r8,0x3
800095ba:	12 18       	sub	r8,r9
800095bc:	a1 78       	lsl	r8,0x1
800095be:	f4 08 00 08 	add	r8,r10,r8
800095c2:	2f 58       	sub	r8,-11
800095c4:	11 88       	ld.ub	r8,r8[0x0]
800095c6:	ef 68 ff f9 	st.b	r7[-7],r8
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
800095ca:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800095ce:	4f 7a       	lddpc	r10,800097a8 <increment_ledBoard_usage_min+0x244>
800095d0:	12 98       	mov	r8,r9
800095d2:	a3 68       	lsl	r8,0x2
800095d4:	12 08       	add	r8,r9
800095d6:	f4 08 00 08 	add	r8,r10,r8
800095da:	2f e8       	sub	r8,-2
800095dc:	11 88       	ld.ub	r8,r8[0x0]
800095de:	10 99       	mov	r9,r8
800095e0:	4f 3a       	lddpc	r10,800097ac <increment_ledBoard_usage_min+0x248>
800095e2:	12 98       	mov	r8,r9
800095e4:	a3 78       	lsl	r8,0x3
800095e6:	12 18       	sub	r8,r9
800095e8:	a1 78       	lsl	r8,0x1
800095ea:	f4 08 00 08 	add	r8,r10,r8
800095ee:	2f 68       	sub	r8,-10
800095f0:	11 88       	ld.ub	r8,r8[0x0]
800095f2:	ef 68 ff fa 	st.b	r7[-6],r8
			
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
800095f6:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800095fa:	4e ea       	lddpc	r10,800097b0 <increment_ledBoard_usage_min+0x24c>
800095fc:	12 98       	mov	r8,r9
800095fe:	a3 68       	lsl	r8,0x2
80009600:	12 08       	add	r8,r9
80009602:	f4 08 00 08 	add	r8,r10,r8
80009606:	2f f8       	sub	r8,-1
80009608:	11 88       	ld.ub	r8,r8[0x0]
8000960a:	ef 68 ff fb 	st.b	r7[-5],r8
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
8000960e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80009612:	4e 8a       	lddpc	r10,800097b0 <increment_ledBoard_usage_min+0x24c>
80009614:	12 98       	mov	r8,r9
80009616:	a3 68       	lsl	r8,0x2
80009618:	12 08       	add	r8,r9
8000961a:	f4 08 00 08 	add	r8,r10,r8
8000961e:	2f f8       	sub	r8,-1
80009620:	11 88       	ld.ub	r8,r8[0x0]
80009622:	ef 68 ff fc 	st.b	r7[-4],r8
			
			for (unsigned char k=0; k<2; k++) //for each board side in the shelf
80009626:	30 08       	mov	r8,0
80009628:	ef 68 ff ff 	st.b	r7[-1],r8
8000962c:	c5 b8       	rjmp	800096e2 <increment_ledBoard_usage_min+0x17e>
			{
				switch (k)
8000962e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009632:	58 08       	cp.w	r8,0
80009634:	c0 40       	breq	8000963c <increment_ledBoard_usage_min+0xd8>
80009636:	58 18       	cp.w	r8,1
80009638:	c0 70       	breq	80009646 <increment_ledBoard_usage_min+0xe2>
8000963a:	c0 a8       	rjmp	8000964e <increment_ledBoard_usage_min+0xea>
				{
					case 0:
						idx = topUIdx;
8000963c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80009640:	ef 68 ff f8 	st.b	r7[-8],r8
						break;
80009644:	c0 58       	rjmp	8000964e <increment_ledBoard_usage_min+0xea>
					case 1:
						idx = bottomUIdx;
80009646:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000964a:	ef 68 ff f8 	st.b	r7[-8],r8
						break;

				}

				m.mins[idx] = m.mins[idx] + 1;
8000964e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009652:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009656:	4d 8a       	lddpc	r10,800097b4 <increment_ledBoard_usage_min+0x250>
80009658:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000965c:	2f f8       	sub	r8,-1
8000965e:	5c 58       	castu.b	r8
80009660:	4d 5a       	lddpc	r10,800097b4 <increment_ledBoard_usage_min+0x250>
80009662:	f4 09 0b 08 	st.b	r10[r9],r8
				if (m.mins[idx] > 59)
80009666:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000966a:	4d 39       	lddpc	r9,800097b4 <increment_ledBoard_usage_min+0x250>
8000966c:	f2 08 07 09 	ld.ub	r9,r9[r8]
80009670:	33 b8       	mov	r8,59
80009672:	f0 09 18 00 	cp.b	r9,r8
80009676:	e0 88 00 31 	brls	800096d8 <increment_ledBoard_usage_min+0x174>
				{
					m.mins[idx] = 0;
8000967a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000967e:	4c ea       	lddpc	r10,800097b4 <increment_ledBoard_usage_min+0x250>
80009680:	30 08       	mov	r8,0
80009682:	f4 09 0b 08 	st.b	r10[r9],r8
					hourRollover++; //count number of board sides that had hours rollover this pass for the current hourPingPong selection
80009686:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000968a:	2f f8       	sub	r8,-1
8000968c:	ef 68 ff fd 	st.b	r7[-3],r8
					h.hrs[idx] = h.hrs[idx] + 1;
80009690:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80009694:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009698:	4c 88       	lddpc	r8,800097b8 <increment_ledBoard_usage_min+0x254>
8000969a:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000969e:	2f f8       	sub	r8,-1
800096a0:	5c 88       	casts.h	r8
800096a2:	4c 69       	lddpc	r9,800097b8 <increment_ledBoard_usage_min+0x254>
800096a4:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
						
					if ((h.hrs[idx]) >= 2000) //2000 hours * 60 minutes per hour
800096a8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800096ac:	4c 38       	lddpc	r8,800097b8 <increment_ledBoard_usage_min+0x254>
800096ae:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800096b2:	e0 68 07 cf 	mov	r8,1999
800096b6:	f0 09 19 00 	cp.h	r9,r8
800096ba:	e0 88 00 0f 	brls	800096d8 <increment_ledBoard_usage_min+0x174>
					{
						sf[idx].maxUsageReached = 1; //And...we're done. Reached 2000 hours.
800096be:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800096c2:	4b f9       	lddpc	r9,800097bc <increment_ledBoard_usage_min+0x258>
800096c4:	a1 78       	lsl	r8,0x1
800096c6:	f0 ca ff ff 	sub	r10,r8,-1
800096ca:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
800096ce:	30 1b       	mov	r11,1
800096d0:	f1 db d1 c1 	bfins	r8,r11,0xe,0x1
800096d4:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
			
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
			
			for (unsigned char k=0; k<2; k++) //for each board side in the shelf
800096d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800096dc:	2f f8       	sub	r8,-1
800096de:	ef 68 ff ff 	st.b	r7[-1],r8
800096e2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800096e6:	30 18       	mov	r8,1
800096e8:	f0 09 18 00 	cp.b	r9,r8
800096ec:	fe 98 ff a1 	brls	8000962e <increment_ledBoard_usage_min+0xca>
	unsigned char bottomUIdx;
	unsigned char hourRollover = 0;
	
	inc_sanMins();

	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
800096f0:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800096f4:	2f f8       	sub	r8,-1
800096f6:	ef 68 ff fe 	st.b	r7[-2],r8
800096fa:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800096fe:	30 38       	mov	r8,3
80009700:	f0 09 18 00 	cp.b	r9,r8
80009704:	fe 98 ff 3d 	brls	8000957e <increment_ledBoard_usage_min+0x1a>
				}//if ((minutes %60) == 0)
			} //for each board side in the shelf (k)
		} //if (shelf[i].active)
	} //for (i=0; i<NUM_SHELVES; i++)
	
	mFlashIdx++;
80009708:	4a e8       	lddpc	r8,800097c0 <increment_ledBoard_usage_min+0x25c>
8000970a:	70 08       	ld.w	r8,r8[0x0]
8000970c:	f0 c9 ff ff 	sub	r9,r8,-1
80009710:	4a c8       	lddpc	r8,800097c0 <increment_ledBoard_usage_min+0x25c>
80009712:	91 09       	st.w	r8[0x0],r9
	if (mFlashIdx >= NUM_USAGE_MINS_BUFS_SECTORS)
80009714:	4a b8       	lddpc	r8,800097c0 <increment_ledBoard_usage_min+0x25c>
80009716:	70 08       	ld.w	r8,r8[0x0]
80009718:	e0 48 00 73 	cp.w	r8,115
8000971c:	e0 88 00 05 	brls	80009726 <increment_ledBoard_usage_min+0x1c2>
	{
		mFlashIdx = 0;
80009720:	4a 88       	lddpc	r8,800097c0 <increment_ledBoard_usage_min+0x25c>
80009722:	30 09       	mov	r9,0
80009724:	91 09       	st.w	r8[0x0],r9
	}
	m.csum = calc_region_checksum(3);
80009726:	30 3c       	mov	r12,3
80009728:	f0 1f 00 27 	mcall	800097c4 <increment_ledBoard_usage_min+0x260>
8000972c:	18 98       	mov	r8,r12
8000972e:	4a 29       	lddpc	r9,800097b4 <increment_ledBoard_usage_min+0x250>
80009730:	f3 68 00 64 	st.b	r9[100],r8
	write_region_to_flash(3, 0xFF, m.csum);
80009734:	4a 08       	lddpc	r8,800097b4 <increment_ledBoard_usage_min+0x250>
80009736:	f1 38 00 64 	ld.ub	r8,r8[100]
8000973a:	10 9a       	mov	r10,r8
8000973c:	e0 6b 00 ff 	mov	r11,255
80009740:	30 3c       	mov	r12,3
80009742:	f0 1f 00 22 	mcall	800097c8 <increment_ledBoard_usage_min+0x264>
	copy_region_to_another_sector(3);
80009746:	30 3c       	mov	r12,3
80009748:	f0 1f 00 21 	mcall	800097cc <increment_ledBoard_usage_min+0x268>
	disrupt_prior_m_sector();
8000974c:	f0 1f 00 21 	mcall	800097d0 <increment_ledBoard_usage_min+0x26c>

	if (hourRollover)
80009750:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009754:	30 08       	mov	r8,0
80009756:	f0 09 18 00 	cp.b	r9,r8
8000975a:	c2 20       	breq	8000979e <increment_ledBoard_usage_min+0x23a>
	{
		hFlashIdx++;
8000975c:	49 e8       	lddpc	r8,800097d4 <increment_ledBoard_usage_min+0x270>
8000975e:	70 08       	ld.w	r8,r8[0x0]
80009760:	f0 c9 ff ff 	sub	r9,r8,-1
80009764:	49 c8       	lddpc	r8,800097d4 <increment_ledBoard_usage_min+0x270>
80009766:	91 09       	st.w	r8[0x0],r9
		if (hFlashIdx >= (NUM_USAGE_HOURS_BUFS_SECTORS/NUM_USAGE_HOURS_SECTORS_PER_BUF))
80009768:	49 b8       	lddpc	r8,800097d4 <increment_ledBoard_usage_min+0x270>
8000976a:	70 08       	ld.w	r8,r8[0x0]
8000976c:	58 18       	cp.w	r8,1
8000976e:	e0 88 00 05 	brls	80009778 <increment_ledBoard_usage_min+0x214>
		{
			hFlashIdx = 0;
80009772:	49 98       	lddpc	r8,800097d4 <increment_ledBoard_usage_min+0x270>
80009774:	30 09       	mov	r9,0
80009776:	91 09       	st.w	r8[0x0],r9
		}
		h.csum = calc_region_checksum(2);
80009778:	30 2c       	mov	r12,2
8000977a:	f0 1f 00 13 	mcall	800097c4 <increment_ledBoard_usage_min+0x260>
8000977e:	18 98       	mov	r8,r12
80009780:	48 e9       	lddpc	r9,800097b8 <increment_ledBoard_usage_min+0x254>
80009782:	f3 68 00 c0 	st.b	r9[192],r8
		write_region_to_flash(2, 0xFF, h.csum);
80009786:	48 d8       	lddpc	r8,800097b8 <increment_ledBoard_usage_min+0x254>
80009788:	f1 38 00 c0 	ld.ub	r8,r8[192]
8000978c:	10 9a       	mov	r10,r8
8000978e:	e0 6b 00 ff 	mov	r11,255
80009792:	30 2c       	mov	r12,2
80009794:	f0 1f 00 0d 	mcall	800097c8 <increment_ledBoard_usage_min+0x264>

		hourRollover = 0; //reset for next pass
80009798:	30 08       	mov	r8,0
8000979a:	ef 68 ff fd 	st.b	r7[-3],r8
	}
}
8000979e:	2f ed       	sub	sp,-8
800097a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800097a4:	80 00       	ld.sh	r0,r0[0x0]
800097a6:	94 78       	ld.sh	r8,r10[0xe]
800097a8:	00 00       	add	r0,r0
800097aa:	0b 8c       	ld.ub	r12,r5[0x0]
800097ac:	00 00       	add	r0,r0
800097ae:	0b 46       	ld.w	r6,--r5
800097b0:	00 00       	add	r0,r0
800097b2:	0b f6       	ld.ub	r6,r5[0x7]
800097b4:	00 00       	add	r0,r0
800097b6:	0c f4       	st.b	--r6,r4
800097b8:	00 00       	add	r0,r0
800097ba:	0c 24       	rsub	r4,r6
800097bc:	00 00       	add	r0,r0
800097be:	08 44       	or	r4,r4
800097c0:	00 00       	add	r0,r0
800097c2:	07 c4       	ld.ub	r4,r3[0x4]
800097c4:	80 00       	ld.sh	r0,r0[0x0]
800097c6:	85 60       	st.w	r2[0x18],r0
800097c8:	80 00       	ld.sh	r0,r0[0x0]
800097ca:	8e 58       	ld.sh	r8,r7[0xa]
800097cc:	80 00       	ld.sh	r0,r0[0x0]
800097ce:	90 f0       	ld.uh	r0,r8[0xe]
800097d0:	80 00       	ld.sh	r0,r0[0x0]
800097d2:	92 9c       	ld.uh	r12,r9[0x2]
800097d4:	00 00       	add	r0,r0
800097d6:	07 c0       	ld.ub	r0,r3[0x4]

800097d8 <init_shelf_n_ledBrd_structs>:
#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED


void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
800097d8:	eb cd 40 80 	pushm	r7,lr
800097dc:	1a 97       	mov	r7,sp
800097de:	20 4d       	sub	sp,16
	
	for (int i=0; i<NUM_SHELVES; i++)
800097e0:	30 08       	mov	r8,0
800097e2:	ef 48 ff f0 	st.w	r7[-16],r8
800097e6:	c2 b8       	rjmp	8000983c <init_shelf_n_ledBrd_structs+0x64>
	{
		shelf[i].present = 0;
800097e8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800097ec:	fe fa 02 7c 	ld.w	r10,pc[636]
800097f0:	12 98       	mov	r8,r9
800097f2:	a3 68       	lsl	r8,0x2
800097f4:	12 08       	add	r8,r9
800097f6:	f4 08 00 08 	add	r8,r10,r8
800097fa:	f0 c9 ff fc 	sub	r9,r8,-4
800097fe:	30 08       	mov	r8,0
80009800:	b2 88       	st.b	r9[0x0],r8
		shelf[i].devicesPresent = 0;
80009802:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009806:	fe fa 02 62 	ld.w	r10,pc[610]
8000980a:	12 98       	mov	r8,r9
8000980c:	a3 68       	lsl	r8,0x2
8000980e:	12 08       	add	r8,r9
80009810:	f4 08 00 08 	add	r8,r10,r8
80009814:	f0 c9 ff fd 	sub	r9,r8,-3
80009818:	30 08       	mov	r8,0
8000981a:	b2 88       	st.b	r9[0x0],r8
		shelf[i].active = 0;
8000981c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009820:	fe fa 02 48 	ld.w	r10,pc[584]
80009824:	12 98       	mov	r8,r9
80009826:	a3 68       	lsl	r8,0x2
80009828:	12 08       	add	r8,r9
8000982a:	f4 08 00 09 	add	r9,r10,r8
8000982e:	30 08       	mov	r8,0
80009830:	b2 88       	st.b	r9[0x0],r8

void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
	
	for (int i=0; i<NUM_SHELVES; i++)
80009832:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009836:	2f f8       	sub	r8,-1
80009838:	ef 48 ff f0 	st.w	r7[-16],r8
8000983c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009840:	58 38       	cp.w	r8,3
80009842:	fe 9a ff d3 	brle	800097e8 <init_shelf_n_ledBrd_structs+0x10>
		shelf[i].present = 0;
		shelf[i].devicesPresent = 0;
		shelf[i].active = 0;
	}
	
	shelf[0].tLedIdx = 0;
80009846:	fe f9 02 22 	ld.w	r9,pc[546]
8000984a:	30 08       	mov	r8,0
8000984c:	b2 98       	st.b	r9[0x1],r8
	shelf[0].bLedIdx = 1;
8000984e:	fe f9 02 1a 	ld.w	r9,pc[538]
80009852:	30 18       	mov	r8,1
80009854:	b2 a8       	st.b	r9[0x2],r8
	shelf[1].tLedIdx = 1;
80009856:	fe f9 02 12 	ld.w	r9,pc[530]
8000985a:	30 18       	mov	r8,1
8000985c:	b2 e8       	st.b	r9[0x6],r8
	shelf[1].bLedIdx = 2;
8000985e:	fe f9 02 0a 	ld.w	r9,pc[522]
80009862:	30 28       	mov	r8,2
80009864:	b2 f8       	st.b	r9[0x7],r8
	shelf[2].tLedIdx = 2;
80009866:	fe f9 02 02 	ld.w	r9,pc[514]
8000986a:	30 28       	mov	r8,2
8000986c:	f3 68 00 0b 	st.b	r9[11],r8
	shelf[2].bLedIdx = 3;
80009870:	4f e9       	lddpc	r9,80009a68 <init_shelf_n_ledBrd_structs+0x290>
80009872:	30 38       	mov	r8,3
80009874:	f3 68 00 0c 	st.b	r9[12],r8
	shelf[3].tLedIdx = 3;
80009878:	4f c9       	lddpc	r9,80009a68 <init_shelf_n_ledBrd_structs+0x290>
8000987a:	30 38       	mov	r8,3
8000987c:	f3 68 00 10 	st.b	r9[16],r8
	shelf[3].bLedIdx = 4;
80009880:	4f a9       	lddpc	r9,80009a68 <init_shelf_n_ledBrd_structs+0x290>
80009882:	30 48       	mov	r8,4
80009884:	f3 68 00 11 	st.b	r9[17],r8
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80009888:	30 08       	mov	r8,0
8000988a:	ef 48 ff f4 	st.w	r7[-12],r8
8000988e:	c1 38       	rjmp	800098b4 <init_shelf_n_ledBrd_structs+0xdc>
	{
		ledBrd[i].present = 0;
80009890:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009894:	4f 6a       	lddpc	r10,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009896:	12 98       	mov	r8,r9
80009898:	a3 78       	lsl	r8,0x3
8000989a:	12 18       	sub	r8,r9
8000989c:	a1 78       	lsl	r8,0x1
8000989e:	f4 08 00 08 	add	r8,r10,r8
800098a2:	f0 c9 ff f8 	sub	r9,r8,-8
800098a6:	30 08       	mov	r8,0
800098a8:	b2 88       	st.b	r9[0x0],r8
	shelf[2].tLedIdx = 2;
	shelf[2].bLedIdx = 3;
	shelf[3].tLedIdx = 3;
	shelf[3].bLedIdx = 4;
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
800098aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800098ae:	2f f8       	sub	r8,-1
800098b0:	ef 48 ff f4 	st.w	r7[-12],r8
800098b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800098b8:	58 48       	cp.w	r8,4
800098ba:	fe 9a ff eb 	brle	80009890 <init_shelf_n_ledBrd_structs+0xb8>
	{
		ledBrd[i].present = 0;
	}
	
	ledBrd[0].uSideIdx = 0xFF;
800098be:	4e c9       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
800098c0:	3f f8       	mov	r8,-1
800098c2:	f3 68 00 0a 	st.b	r9[10],r8
	ledBrd[0].lSideIdx = 0;
800098c6:	4e a9       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
800098c8:	30 08       	mov	r8,0
800098ca:	f3 68 00 0b 	st.b	r9[11],r8
	ledBrd[1].uSideIdx = 1;
800098ce:	4e 89       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
800098d0:	30 18       	mov	r8,1
800098d2:	f3 68 00 18 	st.b	r9[24],r8
	ledBrd[1].lSideIdx = 2;
800098d6:	4e 69       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
800098d8:	30 28       	mov	r8,2
800098da:	f3 68 00 19 	st.b	r9[25],r8
	ledBrd[2].uSideIdx = 3;
800098de:	4e 49       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
800098e0:	30 38       	mov	r8,3
800098e2:	f3 68 00 26 	st.b	r9[38],r8
	ledBrd[2].lSideIdx = 4;
800098e6:	4e 29       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
800098e8:	30 48       	mov	r8,4
800098ea:	f3 68 00 27 	st.b	r9[39],r8
	ledBrd[3].uSideIdx = 5;
800098ee:	4e 09       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
800098f0:	30 58       	mov	r8,5
800098f2:	f3 68 00 34 	st.b	r9[52],r8
	ledBrd[3].lSideIdx = 6;
800098f6:	4d e9       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
800098f8:	30 68       	mov	r8,6
800098fa:	f3 68 00 35 	st.b	r9[53],r8
	ledBrd[4].uSideIdx = 7;
800098fe:	4d c9       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009900:	30 78       	mov	r8,7
80009902:	f3 68 00 42 	st.b	r9[66],r8
	ledBrd[4].lSideIdx = 0xFF;
80009906:	4d a9       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009908:	3f f8       	mov	r8,-1
8000990a:	f3 68 00 43 	st.b	r9[67],r8

	ledBrd[0].uSideShelfIdx = 0xFF;
8000990e:	4d 89       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009910:	3f f8       	mov	r8,-1
80009912:	f3 68 00 0c 	st.b	r9[12],r8
	ledBrd[1].uSideShelfIdx = 0;
80009916:	4d 69       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009918:	30 08       	mov	r8,0
8000991a:	f3 68 00 1a 	st.b	r9[26],r8
	ledBrd[2].uSideShelfIdx = 1;
8000991e:	4d 49       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009920:	30 18       	mov	r8,1
80009922:	f3 68 00 28 	st.b	r9[40],r8
	ledBrd[3].uSideShelfIdx = 2;
80009926:	4d 29       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009928:	30 28       	mov	r8,2
8000992a:	f3 68 00 36 	st.b	r9[54],r8
	ledBrd[4].uSideShelfIdx = 3;
8000992e:	4d 09       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009930:	30 38       	mov	r8,3
80009932:	f3 68 00 44 	st.b	r9[68],r8
 
	ledBrd[0].lSideShelfIdx = 0;
80009936:	4c e9       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009938:	30 08       	mov	r8,0
8000993a:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrd[1].lSideShelfIdx = 1;
8000993e:	4c c9       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009940:	30 18       	mov	r8,1
80009942:	f3 68 00 1b 	st.b	r9[27],r8
	ledBrd[2].lSideShelfIdx = 2;
80009946:	4c a9       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009948:	30 28       	mov	r8,2
8000994a:	f3 68 00 29 	st.b	r9[41],r8
	ledBrd[3].lSideShelfIdx = 3;
8000994e:	4c 89       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009950:	30 38       	mov	r8,3
80009952:	f3 68 00 37 	st.b	r9[55],r8
	ledBrd[4].lSideShelfIdx = 0xFF;
80009956:	4c 69       	lddpc	r9,80009a6c <init_shelf_n_ledBrd_structs+0x294>
80009958:	3f f8       	mov	r8,-1
8000995a:	f3 68 00 45 	st.b	r9[69],r8
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
8000995e:	30 08       	mov	r8,0
80009960:	ef 48 ff f8 	st.w	r7[-8],r8
80009964:	c2 88       	rjmp	800099b4 <init_shelf_n_ledBrd_structs+0x1dc>
	{
		ledBrdSide[i].maxUsageReached = 0;
80009966:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000996a:	4c 2a       	lddpc	r10,80009a70 <init_shelf_n_ledBrd_structs+0x298>
8000996c:	12 98       	mov	r8,r9
8000996e:	a3 68       	lsl	r8,0x2
80009970:	12 08       	add	r8,r9
80009972:	f4 08 00 08 	add	r8,r10,r8
80009976:	f0 c9 ff fe 	sub	r9,r8,-2
8000997a:	30 08       	mov	r8,0
8000997c:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].sanitizeMinutes = 0;
8000997e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009982:	4b ca       	lddpc	r10,80009a70 <init_shelf_n_ledBrd_structs+0x298>
80009984:	12 98       	mov	r8,r9
80009986:	a3 68       	lsl	r8,0x2
80009988:	12 08       	add	r8,r9
8000998a:	f4 08 00 09 	add	r9,r10,r8
8000998e:	30 08       	mov	r8,0
80009990:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].ushdwIdx = 0xFF;
80009992:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009996:	4b 7a       	lddpc	r10,80009a70 <init_shelf_n_ledBrd_structs+0x298>
80009998:	12 98       	mov	r8,r9
8000999a:	a3 68       	lsl	r8,0x2
8000999c:	12 08       	add	r8,r9
8000999e:	f4 08 00 08 	add	r8,r10,r8
800099a2:	f0 c9 ff ff 	sub	r9,r8,-1
800099a6:	3f f8       	mov	r8,-1
800099a8:	b2 88       	st.b	r9[0x0],r8
	ledBrd[2].lSideShelfIdx = 2;
	ledBrd[3].lSideShelfIdx = 3;
	ledBrd[4].lSideShelfIdx = 0xFF;
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
800099aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800099ae:	2f f8       	sub	r8,-1
800099b0:	ef 48 ff f8 	st.w	r7[-8],r8
800099b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800099b8:	58 78       	cp.w	r8,7
800099ba:	fe 9a ff d6 	brle	80009966 <init_shelf_n_ledBrd_structs+0x18e>
		ledBrdSide[i].maxUsageReached = 0;
		ledBrdSide[i].sanitizeMinutes = 0;
		ledBrdSide[i].ushdwIdx = 0xFF;
	}
	
	ledBrdSide[0].boardIdx = 0;
800099be:	4a d9       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
800099c0:	30 08       	mov	r8,0
800099c2:	b2 c8       	st.b	r9[0x4],r8
	ledBrdSide[1].boardIdx = 1;
800099c4:	4a b9       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
800099c6:	30 18       	mov	r8,1
800099c8:	f3 68 00 09 	st.b	r9[9],r8
	ledBrdSide[2].boardIdx = 1;
800099cc:	4a 99       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
800099ce:	30 18       	mov	r8,1
800099d0:	f3 68 00 0e 	st.b	r9[14],r8
	ledBrdSide[3].boardIdx = 2;
800099d4:	4a 79       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
800099d6:	30 28       	mov	r8,2
800099d8:	f3 68 00 13 	st.b	r9[19],r8
	ledBrdSide[4].boardIdx = 2;
800099dc:	4a 59       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
800099de:	30 28       	mov	r8,2
800099e0:	f3 68 00 18 	st.b	r9[24],r8
	ledBrdSide[5].boardIdx = 3;
800099e4:	4a 39       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
800099e6:	30 38       	mov	r8,3
800099e8:	f3 68 00 1d 	st.b	r9[29],r8
	ledBrdSide[6].boardIdx = 3;
800099ec:	4a 19       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
800099ee:	30 38       	mov	r8,3
800099f0:	f3 68 00 22 	st.b	r9[34],r8
	ledBrdSide[7].boardIdx = 4;
800099f4:	49 f9       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
800099f6:	30 48       	mov	r8,4
800099f8:	f3 68 00 27 	st.b	r9[39],r8
	

	ledBrdSide[0].shelfIdx = 0;
800099fc:	49 d9       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
800099fe:	30 08       	mov	r8,0
80009a00:	b2 b8       	st.b	r9[0x3],r8
	ledBrdSide[1].shelfIdx = 0;
80009a02:	49 c9       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
80009a04:	30 08       	mov	r8,0
80009a06:	f3 68 00 08 	st.b	r9[8],r8
	ledBrdSide[2].shelfIdx = 1;
80009a0a:	49 a9       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
80009a0c:	30 18       	mov	r8,1
80009a0e:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrdSide[3].shelfIdx = 1;
80009a12:	49 89       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
80009a14:	30 18       	mov	r8,1
80009a16:	f3 68 00 12 	st.b	r9[18],r8
	ledBrdSide[4].shelfIdx = 2;
80009a1a:	49 69       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
80009a1c:	30 28       	mov	r8,2
80009a1e:	f3 68 00 17 	st.b	r9[23],r8
	ledBrdSide[5].shelfIdx = 2;
80009a22:	49 49       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
80009a24:	30 28       	mov	r8,2
80009a26:	f3 68 00 1c 	st.b	r9[28],r8
	ledBrdSide[6].shelfIdx = 3;
80009a2a:	49 29       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
80009a2c:	30 38       	mov	r8,3
80009a2e:	f3 68 00 21 	st.b	r9[33],r8
	ledBrdSide[7].shelfIdx = 3;
80009a32:	49 09       	lddpc	r9,80009a70 <init_shelf_n_ledBrd_structs+0x298>
80009a34:	30 38       	mov	r8,3
80009a36:	f3 68 00 26 	st.b	r9[38],r8
		{
			usageIdx[i][j] = NO_LED_BOARD_PRESENT;
		}
	}
#else
	for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
80009a3a:	30 08       	mov	r8,0
80009a3c:	ef 48 ff fc 	st.w	r7[-4],r8
80009a40:	c0 c8       	rjmp	80009a58 <init_shelf_n_ledBrd_structs+0x280>
	{
		usageIdx[j] = NO_LED_BOARD_PRESENT;
80009a42:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009a46:	48 ca       	lddpc	r10,80009a74 <init_shelf_n_ledBrd_structs+0x29c>
80009a48:	3f f8       	mov	r8,-1
80009a4a:	f4 09 0b 08 	st.b	r10[r9],r8
		{
			usageIdx[i][j] = NO_LED_BOARD_PRESENT;
		}
	}
#else
	for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
80009a4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a52:	2f f8       	sub	r8,-1
80009a54:	ef 48 ff fc 	st.w	r7[-4],r8
80009a58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a5c:	58 78       	cp.w	r8,7
80009a5e:	fe 9a ff f2 	brle	80009a42 <init_shelf_n_ledBrd_structs+0x26a>
	{
		usageIdx[j] = NO_LED_BOARD_PRESENT;
	}
#endif

}
80009a62:	2f cd       	sub	sp,-16
80009a64:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a68:	00 00       	add	r0,r0
80009a6a:	0b 8c       	ld.ub	r12,r5[0x0]
80009a6c:	00 00       	add	r0,r0
80009a6e:	0b 46       	ld.w	r6,--r5
80009a70:	00 00       	add	r0,r0
80009a72:	0b f6       	ld.ub	r6,r5[0x7]
80009a74:	00 00       	add	r0,r0
80009a76:	0b b8       	ld.ub	r8,r5[0x3]

80009a78 <load_usageIdx_to_ledBrdSide>:

#else

void load_usageIdx_to_ledBrdSide(void);
void load_usageIdx_to_ledBrdSide(void)
{
80009a78:	eb cd 40 80 	pushm	r7,lr
80009a7c:	1a 97       	mov	r7,sp
80009a7e:	20 1d       	sub	sp,4
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80009a80:	30 08       	mov	r8,0
80009a82:	ef 48 ff fc 	st.w	r7[-4],r8
80009a86:	c1 78       	rjmp	80009ab4 <load_usageIdx_to_ledBrdSide+0x3c>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[i];
80009a88:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009a8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a90:	48 da       	lddpc	r10,80009ac4 <load_usageIdx_to_ledBrdSide+0x4c>
80009a92:	f4 08 07 0a 	ld.ub	r10,r10[r8]
80009a96:	48 db       	lddpc	r11,80009ac8 <load_usageIdx_to_ledBrdSide+0x50>
80009a98:	12 98       	mov	r8,r9
80009a9a:	a3 68       	lsl	r8,0x2
80009a9c:	12 08       	add	r8,r9
80009a9e:	f6 08 00 08 	add	r8,r11,r8
80009aa2:	f0 c9 ff ff 	sub	r9,r8,-1
80009aa6:	14 98       	mov	r8,r10
80009aa8:	b2 88       	st.b	r9[0x0],r8
#else

void load_usageIdx_to_ledBrdSide(void);
void load_usageIdx_to_ledBrdSide(void)
{
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80009aaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009aae:	2f f8       	sub	r8,-1
80009ab0:	ef 48 ff fc 	st.w	r7[-4],r8
80009ab4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009ab8:	58 78       	cp.w	r8,7
80009aba:	fe 9a ff e7 	brle	80009a88 <load_usageIdx_to_ledBrdSide+0x10>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[i];
	}
}
80009abe:	2f fd       	sub	sp,-4
80009ac0:	e3 cd 80 80 	ldm	sp++,r7,pc
80009ac4:	00 00       	add	r0,r0
80009ac6:	0b b8       	ld.ub	r8,r5[0x3]
80009ac8:	00 00       	add	r0,r0
80009aca:	0b f6       	ld.ub	r6,r5[0x7]

80009acc <init_led_board_info>:

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED

void init_led_board_info(void);
void init_led_board_info(void)
{
80009acc:	eb cd 40 c0 	pushm	r6-r7,lr
80009ad0:	1a 97       	mov	r7,sp
80009ad2:	20 6d       	sub	sp,24
	unsigned char regionGood[5];
	unsigned char csum;
	
	for (int i=0; i<5; i++)
80009ad4:	30 08       	mov	r8,0
80009ad6:	ef 48 ff f0 	st.w	r7[-16],r8
80009ada:	c1 38       	rjmp	80009b00 <init_led_board_info+0x34>
	{
		regionGood[i] = eval_region(i);
80009adc:	ee f6 ff f0 	ld.w	r6,r7[-16]
80009ae0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009ae4:	5c 58       	castu.b	r8
80009ae6:	10 9c       	mov	r12,r8
80009ae8:	f0 1f 00 81 	mcall	80009cec <init_led_board_info+0x220>
80009aec:	18 98       	mov	r8,r12
80009aee:	ee 06 00 09 	add	r9,r7,r6
80009af2:	f3 68 ff e8 	st.b	r9[-24],r8
void init_led_board_info(void)
{
	unsigned char regionGood[5];
	unsigned char csum;
	
	for (int i=0; i<5; i++)
80009af6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009afa:	2f f8       	sub	r8,-1
80009afc:	ef 48 ff f0 	st.w	r7[-16],r8
80009b00:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009b04:	58 48       	cp.w	r8,4
80009b06:	fe 9a ff eb 	brle	80009adc <init_led_board_info+0x10>
	{
		regionGood[i] = eval_region(i);
	}
	
	if (regionGood[0] && regionGood[1] && regionGood[2] && regionGood[3] && regionGood[4])
80009b0a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80009b0e:	58 08       	cp.w	r8,0
80009b10:	c7 00       	breq	80009bf0 <init_led_board_info+0x124>
80009b12:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80009b16:	58 08       	cp.w	r8,0
80009b18:	c6 c0       	breq	80009bf0 <init_led_board_info+0x124>
80009b1a:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80009b1e:	58 08       	cp.w	r8,0
80009b20:	c6 80       	breq	80009bf0 <init_led_board_info+0x124>
80009b22:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80009b26:	58 08       	cp.w	r8,0
80009b28:	c6 40       	breq	80009bf0 <init_led_board_info+0x124>
80009b2a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009b2e:	58 08       	cp.w	r8,0
80009b30:	c6 00       	breq	80009bf0 <init_led_board_info+0x124>
	{
		print_ecdbg("All 5 flash regions have good data sets.\r\n");
80009b32:	4f 0c       	lddpc	r12,80009cf0 <init_led_board_info+0x224>
80009b34:	f0 1f 00 70 	mcall	80009cf4 <init_led_board_info+0x228>

		load_usage_indeces();
80009b38:	f0 1f 00 70 	mcall	80009cf8 <init_led_board_info+0x22c>
		
		add_new_led_board_sides_to_usage();
80009b3c:	f0 1f 00 70 	mcall	80009cfc <init_led_board_info+0x230>
		load_usageIdx_to_ledBrdSide();
80009b40:	f0 1f 00 70 	mcall	80009d00 <init_led_board_info+0x234>

		//serial ID and flags
		csum = calc_region_checksum(0);
80009b44:	30 0c       	mov	r12,0
80009b46:	f0 1f 00 70 	mcall	80009d04 <init_led_board_info+0x238>
80009b4a:	18 98       	mov	r8,r12
80009b4c:	ef 68 ff ef 	st.b	r7[-17],r8
		write_region_to_flash(0, 0xFF, csum);
80009b50:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80009b54:	10 9a       	mov	r10,r8
80009b56:	e0 6b 00 ff 	mov	r11,255
80009b5a:	30 0c       	mov	r12,0
80009b5c:	f0 1f 00 6b 	mcall	80009d08 <init_led_board_info+0x23c>
		copy_region_to_another_sector(0);
80009b60:	30 0c       	mov	r12,0
80009b62:	f0 1f 00 6b 	mcall	80009d0c <init_led_board_info+0x240>

		//san cycles
		csum = calc_region_checksum(1);
80009b66:	30 1c       	mov	r12,1
80009b68:	f0 1f 00 67 	mcall	80009d04 <init_led_board_info+0x238>
80009b6c:	18 98       	mov	r8,r12
80009b6e:	ef 68 ff ef 	st.b	r7[-17],r8
		write_region_to_flash(1,  0xFF, csum);
80009b72:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80009b76:	10 9a       	mov	r10,r8
80009b78:	e0 6b 00 ff 	mov	r11,255
80009b7c:	30 1c       	mov	r12,1
80009b7e:	f0 1f 00 63 	mcall	80009d08 <init_led_board_info+0x23c>
		copy_region_to_another_sector(1);
80009b82:	30 1c       	mov	r12,1
80009b84:	f0 1f 00 62 	mcall	80009d0c <init_led_board_info+0x240>

		//usage hours
		csum = calc_region_checksum(2);
80009b88:	30 2c       	mov	r12,2
80009b8a:	f0 1f 00 5f 	mcall	80009d04 <init_led_board_info+0x238>
80009b8e:	18 98       	mov	r8,r12
80009b90:	ef 68 ff ef 	st.b	r7[-17],r8
		write_region_to_flash(2,  0xFF, csum);
80009b94:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80009b98:	10 9a       	mov	r10,r8
80009b9a:	e0 6b 00 ff 	mov	r11,255
80009b9e:	30 2c       	mov	r12,2
80009ba0:	f0 1f 00 5a 	mcall	80009d08 <init_led_board_info+0x23c>
		copy_region_to_another_sector(2);
80009ba4:	30 2c       	mov	r12,2
80009ba6:	f0 1f 00 5a 	mcall	80009d0c <init_led_board_info+0x240>

		//usage minutes
		csum = calc_region_checksum(3);
80009baa:	30 3c       	mov	r12,3
80009bac:	f0 1f 00 56 	mcall	80009d04 <init_led_board_info+0x238>
80009bb0:	18 98       	mov	r8,r12
80009bb2:	ef 68 ff ef 	st.b	r7[-17],r8
		write_region_to_flash(3,  0xFF, csum);
80009bb6:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80009bba:	10 9a       	mov	r10,r8
80009bbc:	e0 6b 00 ff 	mov	r11,255
80009bc0:	30 3c       	mov	r12,3
80009bc2:	f0 1f 00 52 	mcall	80009d08 <init_led_board_info+0x23c>
		copy_region_to_another_sector(3);
80009bc6:	30 3c       	mov	r12,3
80009bc8:	f0 1f 00 51 	mcall	80009d0c <init_led_board_info+0x240>

		//configuration
		csum = calc_region_checksum(4);
80009bcc:	30 4c       	mov	r12,4
80009bce:	f0 1f 00 4e 	mcall	80009d04 <init_led_board_info+0x238>
80009bd2:	18 98       	mov	r8,r12
80009bd4:	ef 68 ff ef 	st.b	r7[-17],r8
		write_region_to_flash(4,  0xFF, csum);
80009bd8:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80009bdc:	10 9a       	mov	r10,r8
80009bde:	e0 6b 00 ff 	mov	r11,255
80009be2:	30 4c       	mov	r12,4
80009be4:	f0 1f 00 49 	mcall	80009d08 <init_led_board_info+0x23c>
		copy_region_to_another_sector(4);
80009be8:	30 4c       	mov	r12,4
80009bea:	f0 1f 00 49 	mcall	80009d0c <init_led_board_info+0x240>
	for (int i=0; i<5; i++)
	{
		regionGood[i] = eval_region(i);
	}
	
	if (regionGood[0] && regionGood[1] && regionGood[2] && regionGood[3] && regionGood[4])
80009bee:	c7 c8       	rjmp	80009ce6 <init_led_board_info+0x21a>
		copy_region_to_another_sector(4);

	}
	else
	{
		memset(&sf, 0x00, sizeof(sf));		//serial id's and flags
80009bf0:	e0 6a 03 00 	mov	r10,768
80009bf4:	30 0b       	mov	r11,0
80009bf6:	4c 7c       	lddpc	r12,80009d10 <init_led_board_info+0x244>
80009bf8:	f0 1f 00 47 	mcall	80009d14 <init_led_board_info+0x248>
		memset(&sanc, 0x00, sizeof(sanc));	//total chassis sanitation cycles
80009bfc:	30 4a       	mov	r10,4
80009bfe:	30 0b       	mov	r11,0
80009c00:	4c 6c       	lddpc	r12,80009d18 <init_led_board_info+0x24c>
80009c02:	f0 1f 00 45 	mcall	80009d14 <init_led_board_info+0x248>
		memset(&h, 0x00, sizeof(h));		//usage hours
80009c06:	e0 6a 00 c2 	mov	r10,194
80009c0a:	30 0b       	mov	r11,0
80009c0c:	4c 4c       	lddpc	r12,80009d1c <init_led_board_info+0x250>
80009c0e:	f0 1f 00 42 	mcall	80009d14 <init_led_board_info+0x248>
		memset(&m, 0x00, sizeof(m));		//usage minutes
80009c12:	36 8a       	mov	r10,104
80009c14:	30 0b       	mov	r11,0
80009c16:	4c 3c       	lddpc	r12,80009d20 <init_led_board_info+0x254>
80009c18:	f0 1f 00 3f 	mcall	80009d14 <init_led_board_info+0x248>
		memset(&c, 0x00, sizeof(c));		//configuration
80009c1c:	30 2a       	mov	r10,2
80009c1e:	30 0b       	mov	r11,0
80009c20:	4c 1c       	lddpc	r12,80009d24 <init_led_board_info+0x258>
80009c22:	f0 1f 00 3d 	mcall	80009d14 <init_led_board_info+0x248>
		c.initialDTE = 20; //gotta start somewhere
80009c26:	4c 09       	lddpc	r9,80009d24 <init_led_board_info+0x258>
80009c28:	31 48       	mov	r8,20
80009c2a:	b2 88       	st.b	r9[0x0],r8

		for (int i=0; i<5; i++)
80009c2c:	30 08       	mov	r8,0
80009c2e:	ef 48 ff f4 	st.w	r7[-12],r8
80009c32:	c2 98       	rjmp	80009c84 <init_led_board_info+0x1b8>
		{
			if (test_flash(i) == ERROR)
80009c34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009c38:	5c 58       	castu.b	r8
80009c3a:	10 9c       	mov	r12,r8
80009c3c:	f0 1f 00 3b 	mcall	80009d28 <init_led_board_info+0x25c>
80009c40:	18 98       	mov	r8,r12
80009c42:	10 99       	mov	r9,r8
80009c44:	30 18       	mov	r8,1
80009c46:	f0 09 18 00 	cp.b	r9,r8
80009c4a:	c1 81       	brne	80009c7a <init_led_board_info+0x1ae>
			{
				print_ecdbg("Flash area ERROR: region ");
80009c4c:	4b 8c       	lddpc	r12,80009d2c <init_led_board_info+0x260>
80009c4e:	f0 1f 00 2a 	mcall	80009cf4 <init_led_board_info+0x228>
				print_ecdbg_num(i);
80009c52:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009c56:	10 9c       	mov	r12,r8
80009c58:	f0 1f 00 36 	mcall	80009d30 <init_led_board_info+0x264>
				print_ecdbg("\r\n");
80009c5c:	4b 6c       	lddpc	r12,80009d34 <init_led_board_info+0x268>
80009c5e:	f0 1f 00 26 	mcall	80009cf4 <init_led_board_info+0x228>
				sysErr.flashArea |= BIT(i); //SE_FAIL;
80009c62:	4b 68       	lddpc	r8,80009d38 <init_led_board_info+0x26c>
80009c64:	70 29       	ld.w	r9,r8[0x8]
80009c66:	30 1a       	mov	r10,1
80009c68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009c6c:	f4 08 09 48 	lsl	r8,r10,r8
80009c70:	10 49       	or	r9,r8
80009c72:	4b 28       	lddpc	r8,80009d38 <init_led_board_info+0x26c>
80009c74:	91 29       	st.w	r8[0x8],r9
				chassis_error();
80009c76:	f0 1f 00 32 	mcall	80009d3c <init_led_board_info+0x270>
		memset(&h, 0x00, sizeof(h));		//usage hours
		memset(&m, 0x00, sizeof(m));		//usage minutes
		memset(&c, 0x00, sizeof(c));		//configuration
		c.initialDTE = 20; //gotta start somewhere

		for (int i=0; i<5; i++)
80009c7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009c7e:	2f f8       	sub	r8,-1
80009c80:	ef 48 ff f4 	st.w	r7[-12],r8
80009c84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009c88:	58 48       	cp.w	r8,4
80009c8a:	fe 9a ff d5 	brle	80009c34 <init_led_board_info+0x168>
				sysErr.flashArea |= BIT(i); //SE_FAIL;
				chassis_error();
			}

		}
		add_new_led_board_sides_to_usage();
80009c8e:	f0 1f 00 1c 	mcall	80009cfc <init_led_board_info+0x230>
		load_usageIdx_to_ledBrdSide();
80009c92:	f0 1f 00 1c 	mcall	80009d00 <init_led_board_info+0x234>

		for (int i=0; i<5; i++)
80009c96:	30 08       	mov	r8,0
80009c98:	ef 48 ff f8 	st.w	r7[-8],r8
80009c9c:	c2 08       	rjmp	80009cdc <init_led_board_info+0x210>
		{
			unsigned char csum;
			csum = calc_region_checksum(i);
80009c9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009ca2:	5c 58       	castu.b	r8
80009ca4:	10 9c       	mov	r12,r8
80009ca6:	f0 1f 00 18 	mcall	80009d04 <init_led_board_info+0x238>
80009caa:	18 98       	mov	r8,r12
80009cac:	ef 68 ff ff 	st.b	r7[-1],r8
			write_region_to_flash(i,  0xFF, csum);
80009cb0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009cb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009cb8:	5c 58       	castu.b	r8
80009cba:	12 9a       	mov	r10,r9
80009cbc:	e0 6b 00 ff 	mov	r11,255
80009cc0:	10 9c       	mov	r12,r8
80009cc2:	f0 1f 00 12 	mcall	80009d08 <init_led_board_info+0x23c>
			copy_region_to_another_sector(i);
80009cc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009cca:	5c 58       	castu.b	r8
80009ccc:	10 9c       	mov	r12,r8
80009cce:	f0 1f 00 10 	mcall	80009d0c <init_led_board_info+0x240>

		}
		add_new_led_board_sides_to_usage();
		load_usageIdx_to_ledBrdSide();

		for (int i=0; i<5; i++)
80009cd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009cd6:	2f f8       	sub	r8,-1
80009cd8:	ef 48 ff f8 	st.w	r7[-8],r8
80009cdc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009ce0:	58 48       	cp.w	r8,4
80009ce2:	fe 9a ff de 	brle	80009c9e <init_led_board_info+0x1d2>
			csum = calc_region_checksum(i);
			write_region_to_flash(i,  0xFF, csum);
			copy_region_to_another_sector(i);
		}
	}
}
80009ce6:	2f ad       	sub	sp,-24
80009ce8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009cec:	80 00       	ld.sh	r0,r0[0x0]
80009cee:	87 b8       	st.w	r3[0x2c],r8
80009cf0:	80 00       	ld.sh	r0,r0[0x0]
80009cf2:	68 08       	ld.w	r8,r4[0x0]
80009cf4:	80 00       	ld.sh	r0,r0[0x0]
80009cf6:	33 38       	mov	r8,51
80009cf8:	80 00       	ld.sh	r0,r0[0x0]
80009cfa:	83 80       	st.w	r1[0x20],r0
80009cfc:	80 00       	ld.sh	r0,r0[0x0]
80009cfe:	93 4c       	st.w	r9[0x10],r12
80009d00:	80 00       	ld.sh	r0,r0[0x0]
80009d02:	9a 78       	ld.sh	r8,sp[0xe]
80009d04:	80 00       	ld.sh	r0,r0[0x0]
80009d06:	85 60       	st.w	r2[0x18],r0
80009d08:	80 00       	ld.sh	r0,r0[0x0]
80009d0a:	8e 58       	ld.sh	r8,r7[0xa]
80009d0c:	80 00       	ld.sh	r0,r0[0x0]
80009d0e:	90 f0       	ld.uh	r0,r8[0xe]
80009d10:	00 00       	add	r0,r0
80009d12:	08 44       	or	r4,r4
80009d14:	80 00       	ld.sh	r0,r0[0x0]
80009d16:	c7 e6       	brmi	80009e12 <show_chassis_status_info+0xae>
80009d18:	00 00       	add	r0,r0
80009d1a:	0c 20       	rsub	r0,r6
80009d1c:	00 00       	add	r0,r0
80009d1e:	0c 24       	rsub	r4,r6
80009d20:	00 00       	add	r0,r0
80009d22:	0c f4       	st.b	--r6,r4
80009d24:	00 00       	add	r0,r0
80009d26:	0b f4       	ld.ub	r4,r5[0x7]
80009d28:	80 00       	ld.sh	r0,r0[0x0]
80009d2a:	84 3c       	ld.sh	r12,r2[0x6]
80009d2c:	80 00       	ld.sh	r0,r0[0x0]
80009d2e:	68 34       	ld.w	r4,r4[0xc]
80009d30:	80 00       	ld.sh	r0,r0[0x0]
80009d32:	72 90       	ld.w	r0,r9[0x24]
80009d34:	80 00       	ld.sh	r0,r0[0x0]
80009d36:	64 e8       	ld.w	r8,r2[0x38]
80009d38:	00 00       	add	r0,r0
80009d3a:	0b cc       	ld.ub	r12,r5[0x4]
80009d3c:	80 00       	ld.sh	r0,r0[0x0]
80009d3e:	71 ac       	ld.w	r12,r8[0x68]

80009d40 <show_sw_version>:


void show_sw_version(void);
void show_sw_version(void)
{
80009d40:	eb cd 40 80 	pushm	r7,lr
80009d44:	1a 97       	mov	r7,sp
	print_ecdbg("\r\nELECTROCLAVE\r\nCopyright (c) 2015 Seal Shield, Inc.\r\n");
80009d46:	48 5c       	lddpc	r12,80009d58 <show_sw_version+0x18>
80009d48:	f0 1f 00 05 	mcall	80009d5c <show_sw_version+0x1c>
	print_ecdbg("Hardware Version: Classic +++ Software Version: 0.038\r\n");
80009d4c:	48 5c       	lddpc	r12,80009d60 <show_sw_version+0x20>
80009d4e:	f0 1f 00 04 	mcall	80009d5c <show_sw_version+0x1c>

}
80009d52:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d56:	00 00       	add	r0,r0
80009d58:	80 00       	ld.sh	r0,r0[0x0]
80009d5a:	68 50       	ld.w	r0,r4[0x14]
80009d5c:	80 00       	ld.sh	r0,r0[0x0]
80009d5e:	33 38       	mov	r8,51
80009d60:	80 00       	ld.sh	r0,r0[0x0]
80009d62:	68 88       	ld.w	r8,r4[0x20]

80009d64 <show_chassis_status_info>:

void show_chassis_status_info(void);
void show_chassis_status_info(void)
{
80009d64:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80009d68:	1a 97       	mov	r7,sp
80009d6a:	21 ad       	sub	sp,104
	char pStr[80];
	unsigned char uSideIdx, lSideIdx, uSideUsageIdx, lSideUsageIdx;
	unsigned char sanMinutesMax = 0, sanMinutesMin = 0xFF, sanMinutesUpper, sanMinutesLower, uMins, lMins;
80009d6c:	30 08       	mov	r8,0
80009d6e:	ef 68 ff ee 	st.b	r7[-18],r8
80009d72:	3f f8       	mov	r8,-1
80009d74:	ef 68 ff ef 	st.b	r7[-17],r8
	unsigned int uHrs, lHrs;
	
	print_ecdbg("\r\n***INSTALLED LED BOARDS***\r\n\r\n");
80009d78:	fe fc 04 18 	ld.w	r12,pc[1048]
80009d7c:	f0 1f 01 06 	mcall	8000a194 <show_chassis_status_info+0x430>
	
	print_ecdbg(" LED | LED BOARD    |   UPPER SIDE     |   LOWER SIDE    \r\n");
80009d80:	fe fc 04 18 	ld.w	r12,pc[1048]
80009d84:	f0 1f 01 04 	mcall	8000a194 <show_chassis_status_info+0x430>
	print_ecdbg("SLOT |    ID        | HRS:MIN    DTE   | HRS:MIN    DTE   \r\n");
80009d88:	fe fc 04 14 	ld.w	r12,pc[1044]
80009d8c:	f0 1f 01 02 	mcall	8000a194 <show_chassis_status_info+0x430>
	print_ecdbg("----------------------------------------------------------\r\n");
80009d90:	fe fc 04 10 	ld.w	r12,pc[1040]
80009d94:	f0 1f 01 00 	mcall	8000a194 <show_chassis_status_info+0x430>
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80009d98:	30 08       	mov	r8,0
80009d9a:	ef 48 ff fc 	st.w	r7[-4],r8
80009d9e:	c8 e9       	rjmp	8000a0ba <show_chassis_status_info+0x356>
	{
		if (ledBrd[i].present)
80009da0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009da4:	fe fa 04 00 	ld.w	r10,pc[1024]
80009da8:	12 98       	mov	r8,r9
80009daa:	a3 78       	lsl	r8,0x3
80009dac:	12 18       	sub	r8,r9
80009dae:	a1 78       	lsl	r8,0x1
80009db0:	f4 08 00 08 	add	r8,r10,r8
80009db4:	2f 88       	sub	r8,-8
80009db6:	11 88       	ld.ub	r8,r8[0x0]
80009db8:	58 08       	cp.w	r8,0
80009dba:	e0 80 01 7b 	breq	8000a0b0 <show_chassis_status_info+0x34c>
		{
			uSideIdx = ledBrd[i].uSideIdx;
80009dbe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009dc2:	fe fa 03 e2 	ld.w	r10,pc[994]
80009dc6:	12 98       	mov	r8,r9
80009dc8:	a3 78       	lsl	r8,0x3
80009dca:	12 18       	sub	r8,r9
80009dcc:	a1 78       	lsl	r8,0x1
80009dce:	f4 08 00 08 	add	r8,r10,r8
80009dd2:	2f 68       	sub	r8,-10
80009dd4:	11 88       	ld.ub	r8,r8[0x0]
80009dd6:	ef 68 ff ea 	st.b	r7[-22],r8
			lSideIdx = ledBrd[i].lSideIdx;
80009dda:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009dde:	fe fa 03 c6 	ld.w	r10,pc[966]
80009de2:	12 98       	mov	r8,r9
80009de4:	a3 78       	lsl	r8,0x3
80009de6:	12 18       	sub	r8,r9
80009de8:	a1 78       	lsl	r8,0x1
80009dea:	f4 08 00 08 	add	r8,r10,r8
80009dee:	2f 58       	sub	r8,-11
80009df0:	11 88       	ld.ub	r8,r8[0x0]
80009df2:	ef 68 ff eb 	st.b	r7[-21],r8
			
			if (uSideIdx != NO_LED_BOARD_PRESENT)
80009df6:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80009dfa:	3f f8       	mov	r8,-1
80009dfc:	f0 09 18 00 	cp.b	r9,r8
80009e00:	c4 40       	breq	80009e88 <show_chassis_status_info+0x124>
			{
				uSideUsageIdx = ledBrdSide[uSideIdx].ushdwIdx;	
80009e02:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80009e06:	fe fa 03 a2 	ld.w	r10,pc[930]
80009e0a:	12 98       	mov	r8,r9
80009e0c:	a3 68       	lsl	r8,0x2
80009e0e:	12 08       	add	r8,r9
80009e10:	f4 08 00 08 	add	r8,r10,r8
80009e14:	2f f8       	sub	r8,-1
80009e16:	11 88       	ld.ub	r8,r8[0x0]
80009e18:	ef 68 ff ec 	st.b	r7[-20],r8
				ledBrdSide[uSideIdx].maxUsageReached = !check_led_brd_side_lifetime(uSideIdx);
80009e1c:	ef 36 ff ea 	ld.ub	r6,r7[-22]
80009e20:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80009e24:	10 9c       	mov	r12,r8
80009e26:	f0 1f 00 e2 	mcall	8000a1ac <show_chassis_status_info+0x448>
80009e2a:	18 98       	mov	r8,r12
80009e2c:	10 99       	mov	r9,r8
80009e2e:	30 08       	mov	r8,0
80009e30:	f0 09 18 00 	cp.b	r9,r8
80009e34:	5f 09       	sreq	r9
80009e36:	fe fa 03 72 	ld.w	r10,pc[882]
80009e3a:	0c 98       	mov	r8,r6
80009e3c:	a3 68       	lsl	r8,0x2
80009e3e:	0c 08       	add	r8,r6
80009e40:	f4 08 00 08 	add	r8,r10,r8
80009e44:	f0 ca ff fe 	sub	r10,r8,-2
80009e48:	12 98       	mov	r8,r9
80009e4a:	b4 88       	st.b	r10[0x0],r8
				sanMinutesUpper = ledBrdSide[uSideIdx].sanitizeMinutes;
80009e4c:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80009e50:	fe fa 03 58 	ld.w	r10,pc[856]
80009e54:	12 98       	mov	r8,r9
80009e56:	a3 68       	lsl	r8,0x2
80009e58:	12 08       	add	r8,r9
80009e5a:	f4 08 00 08 	add	r8,r10,r8
80009e5e:	11 88       	ld.ub	r8,r8[0x0]
80009e60:	ef 68 ff f0 	st.b	r7[-16],r8
#ifdef SERIAL_ID_AND_ALL_USAGE_COMBINED
				uHrs = usageShdw[0].u[uSideUsageIdx].minutes/60;
				uMins = usageShdw[0].u[uSideUsageIdx].minutes%60;
#else
				uHrs = h.hrs[uSideUsageIdx];
80009e64:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80009e68:	fe f8 03 48 	ld.w	r8,pc[840]
80009e6c:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80009e70:	5c 78       	castu.h	r8
80009e72:	ef 48 ff f4 	st.w	r7[-12],r8
				uMins = m.mins[uSideUsageIdx];
80009e76:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009e7a:	fe f9 03 3a 	ld.w	r9,pc[826]
80009e7e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80009e82:	ef 68 ff f2 	st.b	r7[-14],r8
80009e86:	c0 a8       	rjmp	80009e9a <show_chassis_status_info+0x136>
#endif				
			}
			else
			{
				uHrs = 0;
80009e88:	30 08       	mov	r8,0
80009e8a:	ef 48 ff f4 	st.w	r7[-12],r8
				uMins = 0;
80009e8e:	30 08       	mov	r8,0
80009e90:	ef 68 ff f2 	st.b	r7[-14],r8
				sanMinutesUpper = 0;
80009e94:	30 08       	mov	r8,0
80009e96:	ef 68 ff f0 	st.b	r7[-16],r8
			}
			
			if (lSideIdx != NO_LED_BOARD_PRESENT)
80009e9a:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80009e9e:	3f f8       	mov	r8,-1
80009ea0:	f0 09 18 00 	cp.b	r9,r8
80009ea4:	c4 40       	breq	80009f2c <show_chassis_status_info+0x1c8>
			{
				lSideUsageIdx = ledBrdSide[lSideIdx].ushdwIdx;	
80009ea6:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80009eaa:	fe fa 02 fe 	ld.w	r10,pc[766]
80009eae:	12 98       	mov	r8,r9
80009eb0:	a3 68       	lsl	r8,0x2
80009eb2:	12 08       	add	r8,r9
80009eb4:	f4 08 00 08 	add	r8,r10,r8
80009eb8:	2f f8       	sub	r8,-1
80009eba:	11 88       	ld.ub	r8,r8[0x0]
80009ebc:	ef 68 ff ed 	st.b	r7[-19],r8
				ledBrdSide[uSideIdx].maxUsageReached = !check_led_brd_side_lifetime(lSideIdx);
80009ec0:	ef 36 ff ea 	ld.ub	r6,r7[-22]
80009ec4:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80009ec8:	10 9c       	mov	r12,r8
80009eca:	f0 1f 00 b9 	mcall	8000a1ac <show_chassis_status_info+0x448>
80009ece:	18 98       	mov	r8,r12
80009ed0:	10 99       	mov	r9,r8
80009ed2:	30 08       	mov	r8,0
80009ed4:	f0 09 18 00 	cp.b	r9,r8
80009ed8:	5f 09       	sreq	r9
80009eda:	fe fa 02 ce 	ld.w	r10,pc[718]
80009ede:	0c 98       	mov	r8,r6
80009ee0:	a3 68       	lsl	r8,0x2
80009ee2:	0c 08       	add	r8,r6
80009ee4:	f4 08 00 08 	add	r8,r10,r8
80009ee8:	f0 ca ff fe 	sub	r10,r8,-2
80009eec:	12 98       	mov	r8,r9
80009eee:	b4 88       	st.b	r10[0x0],r8
				sanMinutesLower = ledBrdSide[lSideIdx].sanitizeMinutes;
80009ef0:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80009ef4:	fe fa 02 b4 	ld.w	r10,pc[692]
80009ef8:	12 98       	mov	r8,r9
80009efa:	a3 68       	lsl	r8,0x2
80009efc:	12 08       	add	r8,r9
80009efe:	f4 08 00 08 	add	r8,r10,r8
80009f02:	11 88       	ld.ub	r8,r8[0x0]
80009f04:	ef 68 ff f1 	st.b	r7[-15],r8
#ifdef SERIAL_ID_AND_ALL_USAGE_COMBINED
				lHrs = usageShdw[0].u[lSideUsageIdx].minutes/60;
				lMins = usageShdw[0].u[lSideUsageIdx].minutes%60;
#else
				lHrs = h.hrs[lSideUsageIdx];
80009f08:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80009f0c:	fe f8 02 a4 	ld.w	r8,pc[676]
80009f10:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80009f14:	5c 78       	castu.h	r8
80009f16:	ef 48 ff f8 	st.w	r7[-8],r8
				lMins = m.mins[lSideUsageIdx];
80009f1a:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80009f1e:	fe f9 02 96 	ld.w	r9,pc[662]
80009f22:	f2 08 07 08 	ld.ub	r8,r9[r8]
80009f26:	ef 68 ff f3 	st.b	r7[-13],r8
80009f2a:	c0 a8       	rjmp	80009f3e <show_chassis_status_info+0x1da>
#endif
			}
			else
			{
				lHrs = 0;
80009f2c:	30 08       	mov	r8,0
80009f2e:	ef 48 ff f8 	st.w	r7[-8],r8
				lMins = 0;
80009f32:	30 08       	mov	r8,0
80009f34:	ef 68 ff f3 	st.b	r7[-13],r8
				sanMinutesLower = 0;
80009f38:	30 08       	mov	r8,0
80009f3a:	ef 68 ff f1 	st.b	r7[-15],r8
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
80009f3e:	ef 31 ff f1 	ld.ub	r1,r7[-15]
80009f42:	ef 32 ff f3 	ld.ub	r2,r7[-13]
80009f46:	ef 33 ff f0 	ld.ub	r3,r7[-16]
80009f4a:	ef 35 ff f2 	ld.ub	r5,r7[-14]
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
80009f4e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009f52:	fe fa 02 52 	ld.w	r10,pc[594]
80009f56:	12 98       	mov	r8,r9
80009f58:	a3 78       	lsl	r8,0x3
80009f5a:	12 18       	sub	r8,r9
80009f5c:	a1 78       	lsl	r8,0x1
80009f5e:	f4 08 00 08 	add	r8,r10,r8
80009f62:	2f a8       	sub	r8,-6
80009f64:	11 88       	ld.ub	r8,r8[0x0]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
80009f66:	10 96       	mov	r6,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
80009f68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009f6c:	fe fa 02 38 	ld.w	r10,pc[568]
80009f70:	12 98       	mov	r8,r9
80009f72:	a3 78       	lsl	r8,0x3
80009f74:	12 18       	sub	r8,r9
80009f76:	a1 78       	lsl	r8,0x1
80009f78:	f4 08 00 08 	add	r8,r10,r8
80009f7c:	2f b8       	sub	r8,-5
80009f7e:	11 88       	ld.ub	r8,r8[0x0]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
80009f80:	10 9e       	mov	lr,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
80009f82:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009f86:	fe fa 02 1e 	ld.w	r10,pc[542]
80009f8a:	12 98       	mov	r8,r9
80009f8c:	a3 78       	lsl	r8,0x3
80009f8e:	12 18       	sub	r8,r9
80009f90:	a1 78       	lsl	r8,0x1
80009f92:	f4 08 00 08 	add	r8,r10,r8
80009f96:	2f c8       	sub	r8,-4
80009f98:	11 88       	ld.ub	r8,r8[0x0]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
80009f9a:	10 9c       	mov	r12,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
80009f9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009fa0:	fe fa 02 04 	ld.w	r10,pc[516]
80009fa4:	12 98       	mov	r8,r9
80009fa6:	a3 78       	lsl	r8,0x3
80009fa8:	12 18       	sub	r8,r9
80009faa:	2f f8       	sub	r8,-1
80009fac:	a1 78       	lsl	r8,0x1
80009fae:	f4 08 00 08 	add	r8,r10,r8
80009fb2:	11 98       	ld.ub	r8,r8[0x1]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
80009fb4:	10 9b       	mov	r11,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
80009fb6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009fba:	4f ba       	lddpc	r10,8000a1a4 <show_chassis_status_info+0x440>
80009fbc:	12 98       	mov	r8,r9
80009fbe:	a3 78       	lsl	r8,0x3
80009fc0:	12 18       	sub	r8,r9
80009fc2:	a1 78       	lsl	r8,0x1
80009fc4:	f4 08 00 08 	add	r8,r10,r8
80009fc8:	2f e8       	sub	r8,-2
80009fca:	11 88       	ld.ub	r8,r8[0x0]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
80009fcc:	10 9a       	mov	r10,r8
				i, 
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
80009fce:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009fd2:	4f 50       	lddpc	r0,8000a1a4 <show_chassis_status_info+0x440>
80009fd4:	12 98       	mov	r8,r9
80009fd6:	a3 78       	lsl	r8,0x3
80009fd8:	12 18       	sub	r8,r9
80009fda:	a1 78       	lsl	r8,0x1
80009fdc:	e0 08 00 08 	add	r8,r0,r8
80009fe0:	2f f8       	sub	r8,-1
80009fe2:	11 88       	ld.ub	r8,r8[0x0]
				lMins = 0;
				sanMinutesLower = 0;
			} 
			
			
			sprintf(pStr, "%2d     %02X%02X%02X%02X%02X%02X  %04d:%02d     %02d     %04d:%02d     %02d\r\n", 
80009fe4:	10 99       	mov	r9,r8
80009fe6:	ee c8 00 68 	sub	r8,r7,104
80009fea:	1a d1       	st.w	--sp,r1
80009fec:	1a d2       	st.w	--sp,r2
80009fee:	ee f2 ff f8 	ld.w	r2,r7[-8]
80009ff2:	1a d2       	st.w	--sp,r2
80009ff4:	1a d3       	st.w	--sp,r3
80009ff6:	1a d5       	st.w	--sp,r5
80009ff8:	ee f5 ff f4 	ld.w	r5,r7[-12]
80009ffc:	1a d5       	st.w	--sp,r5
80009ffe:	1a d6       	st.w	--sp,r6
8000a000:	1a de       	st.w	--sp,lr
8000a002:	1a dc       	st.w	--sp,r12
8000a004:	1a db       	st.w	--sp,r11
8000a006:	1a da       	st.w	--sp,r10
8000a008:	1a d9       	st.w	--sp,r9
8000a00a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a00e:	1a d9       	st.w	--sp,r9
8000a010:	4e ab       	lddpc	r11,8000a1b8 <show_chassis_status_info+0x454>
8000a012:	10 9c       	mov	r12,r8
8000a014:	f0 1f 00 6a 	mcall	8000a1bc <show_chassis_status_info+0x458>
8000a018:	2f 3d       	sub	sp,-52
				ledBrd[i].id[0], ledBrd[i].id[1], ledBrd[i].id[2], ledBrd[i].id[3], ledBrd[i].id[4], ledBrd[i].id[5],
				uHrs, uMins,
				sanMinutesUpper,
				lHrs, lMins,
				sanMinutesLower);
			print_ecdbg(pStr);
8000a01a:	ee c8 00 68 	sub	r8,r7,104
8000a01e:	10 9c       	mov	r12,r8
8000a020:	f0 1f 00 5d 	mcall	8000a194 <show_chassis_status_info+0x430>
			

			/* 
			 * Determine the min and max sanitize times for the LED boards that are currently installed
			 */
			if ((sanMinutesMax < sanMinutesUpper) && (sanMinutesUpper != 0))
8000a024:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000a028:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000a02c:	f0 09 18 00 	cp.b	r9,r8
8000a030:	c0 b2       	brcc	8000a046 <show_chassis_status_info+0x2e2>
8000a032:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000a036:	30 08       	mov	r8,0
8000a038:	f0 09 18 00 	cp.b	r9,r8
8000a03c:	c0 50       	breq	8000a046 <show_chassis_status_info+0x2e2>
			{
				sanMinutesMax = sanMinutesUpper;
8000a03e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000a042:	ef 68 ff ee 	st.b	r7[-18],r8
			}
			if ((sanMinutesMax < sanMinutesLower) && (sanMinutesLower != 0))
8000a046:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000a04a:	ef 38 ff f1 	ld.ub	r8,r7[-15]
8000a04e:	f0 09 18 00 	cp.b	r9,r8
8000a052:	c0 b2       	brcc	8000a068 <show_chassis_status_info+0x304>
8000a054:	ef 39 ff f1 	ld.ub	r9,r7[-15]
8000a058:	30 08       	mov	r8,0
8000a05a:	f0 09 18 00 	cp.b	r9,r8
8000a05e:	c0 50       	breq	8000a068 <show_chassis_status_info+0x304>
			{
				sanMinutesMax = sanMinutesLower;
8000a060:	ef 38 ff f1 	ld.ub	r8,r7[-15]
8000a064:	ef 68 ff ee 	st.b	r7[-18],r8
			}
			if ((sanMinutesMin > sanMinutesUpper) && (sanMinutesUpper != 0))
8000a068:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000a06c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000a070:	f0 09 18 00 	cp.b	r9,r8
8000a074:	e0 88 00 0c 	brls	8000a08c <show_chassis_status_info+0x328>
8000a078:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000a07c:	30 08       	mov	r8,0
8000a07e:	f0 09 18 00 	cp.b	r9,r8
8000a082:	c0 50       	breq	8000a08c <show_chassis_status_info+0x328>
			{
				sanMinutesMin = sanMinutesUpper;
8000a084:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000a088:	ef 68 ff ef 	st.b	r7[-17],r8
			}
			if ((sanMinutesMin > sanMinutesLower) && (sanMinutesLower != 0))
8000a08c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000a090:	ef 38 ff f1 	ld.ub	r8,r7[-15]
8000a094:	f0 09 18 00 	cp.b	r9,r8
8000a098:	e0 88 00 0c 	brls	8000a0b0 <show_chassis_status_info+0x34c>
8000a09c:	ef 39 ff f1 	ld.ub	r9,r7[-15]
8000a0a0:	30 08       	mov	r8,0
8000a0a2:	f0 09 18 00 	cp.b	r9,r8
8000a0a6:	c0 50       	breq	8000a0b0 <show_chassis_status_info+0x34c>
			{
				sanMinutesMin = sanMinutesLower;
8000a0a8:	ef 38 ff f1 	ld.ub	r8,r7[-15]
8000a0ac:	ef 68 ff ef 	st.b	r7[-17],r8
	
	print_ecdbg(" LED | LED BOARD    |   UPPER SIDE     |   LOWER SIDE    \r\n");
	print_ecdbg("SLOT |    ID        | HRS:MIN    DTE   | HRS:MIN    DTE   \r\n");
	print_ecdbg("----------------------------------------------------------\r\n");
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
8000a0b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a0b4:	2f f8       	sub	r8,-1
8000a0b6:	ef 48 ff fc 	st.w	r7[-4],r8
8000a0ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a0be:	58 48       	cp.w	r8,4
8000a0c0:	fe 9a fe 70 	brle	80009da0 <show_chassis_status_info+0x3c>
				sanMinutesMin = sanMinutesLower;
			}
		}
	}
	
	print_ecdbg("MAX DTE: ");
8000a0c4:	4b fc       	lddpc	r12,8000a1c0 <show_chassis_status_info+0x45c>
8000a0c6:	f0 1f 00 34 	mcall	8000a194 <show_chassis_status_info+0x430>
	print_ecdbg_num(sanMinutesMax);
8000a0ca:	ef 38 ff ee 	ld.ub	r8,r7[-18]
8000a0ce:	10 9c       	mov	r12,r8
8000a0d0:	f0 1f 00 3d 	mcall	8000a1c4 <show_chassis_status_info+0x460>
	print_ecdbg(" MIN DTE: ");
8000a0d4:	4b dc       	lddpc	r12,8000a1c8 <show_chassis_status_info+0x464>
8000a0d6:	f0 1f 00 30 	mcall	8000a194 <show_chassis_status_info+0x430>
	print_ecdbg_num(sanMinutesMin);
8000a0da:	ef 38 ff ef 	ld.ub	r8,r7[-17]
8000a0de:	10 9c       	mov	r12,r8
8000a0e0:	f0 1f 00 39 	mcall	8000a1c4 <show_chassis_status_info+0x460>
	print_ecdbg("\r\n");
8000a0e4:	4b ac       	lddpc	r12,8000a1cc <show_chassis_status_info+0x468>
8000a0e6:	f0 1f 00 2c 	mcall	8000a194 <show_chassis_status_info+0x430>
	
	print_ecdbg("TOTAL SANITIZE TIME: ");
8000a0ea:	4b ac       	lddpc	r12,8000a1d0 <show_chassis_status_info+0x46c>
8000a0ec:	f0 1f 00 2a 	mcall	8000a194 <show_chassis_status_info+0x430>
		print_ecdbg_num(usageShdw[0].totalSanitationMinutes/60);
	}
	print_ecdbg(" TOTAL SANITIZE CYCLES: ");
	print_ecdbg_num(usageShdw[0].totalSanitationCycles);
#else
	if ((m.sanMins/60) < 10)
8000a0f0:	4b 18       	lddpc	r8,8000a1b4 <show_chassis_status_info+0x450>
8000a0f2:	71 88       	ld.w	r8,r8[0x60]
8000a0f4:	e0 48 02 57 	cp.w	r8,599
8000a0f8:	e0 8b 00 05 	brhi	8000a102 <show_chassis_status_info+0x39e>
	{
		print_ecdbg("0"); //print leading 0 if we need it
8000a0fc:	4b 6c       	lddpc	r12,8000a1d4 <show_chassis_status_info+0x470>
8000a0fe:	f0 1f 00 26 	mcall	8000a194 <show_chassis_status_info+0x430>
	}
	print_ecdbg_num((m.sanMins/60));
8000a102:	4a d8       	lddpc	r8,8000a1b4 <show_chassis_status_info+0x450>
8000a104:	71 89       	ld.w	r9,r8[0x60]
8000a106:	e0 68 88 89 	mov	r8,34953
8000a10a:	ea 18 88 88 	orh	r8,0x8888
8000a10e:	f2 08 06 48 	mulu.d	r8,r9,r8
8000a112:	f2 08 16 05 	lsr	r8,r9,0x5
8000a116:	10 9c       	mov	r12,r8
8000a118:	f0 1f 00 2b 	mcall	8000a1c4 <show_chassis_status_info+0x460>
	print_ecdbg(":");
8000a11c:	4a fc       	lddpc	r12,8000a1d8 <show_chassis_status_info+0x474>
8000a11e:	f0 1f 00 1e 	mcall	8000a194 <show_chassis_status_info+0x430>

	if ((m.sanMins%60) < 10)
8000a122:	4a 58       	lddpc	r8,8000a1b4 <show_chassis_status_info+0x450>
8000a124:	71 8a       	ld.w	r10,r8[0x60]
8000a126:	e0 68 88 89 	mov	r8,34953
8000a12a:	ea 18 88 88 	orh	r8,0x8888
8000a12e:	f4 08 06 48 	mulu.d	r8,r10,r8
8000a132:	a5 99       	lsr	r9,0x5
8000a134:	12 98       	mov	r8,r9
8000a136:	a5 68       	lsl	r8,0x4
8000a138:	12 18       	sub	r8,r9
8000a13a:	a3 68       	lsl	r8,0x2
8000a13c:	f4 08 01 09 	sub	r9,r10,r8
8000a140:	58 99       	cp.w	r9,9
8000a142:	e0 8b 00 05 	brhi	8000a14c <show_chassis_status_info+0x3e8>
	{
		print_ecdbg("0"); //print leading 0 if we need it
8000a146:	4a 4c       	lddpc	r12,8000a1d4 <show_chassis_status_info+0x470>
8000a148:	f0 1f 00 13 	mcall	8000a194 <show_chassis_status_info+0x430>
	}
	print_ecdbg_num((m.sanMins%60));
8000a14c:	49 a8       	lddpc	r8,8000a1b4 <show_chassis_status_info+0x450>
8000a14e:	71 8a       	ld.w	r10,r8[0x60]
8000a150:	e0 68 88 89 	mov	r8,34953
8000a154:	ea 18 88 88 	orh	r8,0x8888
8000a158:	f4 08 06 48 	mulu.d	r8,r10,r8
8000a15c:	a5 99       	lsr	r9,0x5
8000a15e:	12 98       	mov	r8,r9
8000a160:	a5 68       	lsl	r8,0x4
8000a162:	12 18       	sub	r8,r9
8000a164:	a3 68       	lsl	r8,0x2
8000a166:	f4 08 01 09 	sub	r9,r10,r8
8000a16a:	12 9c       	mov	r12,r9
8000a16c:	f0 1f 00 16 	mcall	8000a1c4 <show_chassis_status_info+0x460>

	print_ecdbg("  TOTAL SANITIZE CYCLES: ");
8000a170:	49 bc       	lddpc	r12,8000a1dc <show_chassis_status_info+0x478>
8000a172:	f0 1f 00 09 	mcall	8000a194 <show_chassis_status_info+0x430>
	print_ecdbg_num(sanc.cycles);
8000a176:	49 b8       	lddpc	r8,8000a1e0 <show_chassis_status_info+0x47c>
8000a178:	70 08       	ld.w	r8,r8[0x0]
8000a17a:	f1 d8 c1 94 	bfextu	r8,r8,0xc,0x14
8000a17e:	10 9c       	mov	r12,r8
8000a180:	f0 1f 00 11 	mcall	8000a1c4 <show_chassis_status_info+0x460>

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED	
	print_ecdbg("\r\n");
8000a184:	49 2c       	lddpc	r12,8000a1cc <show_chassis_status_info+0x468>
8000a186:	f0 1f 00 04 	mcall	8000a194 <show_chassis_status_info+0x430>
	
}
8000a18a:	2e 6d       	sub	sp,-104
8000a18c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000a190:	80 00       	ld.sh	r0,r0[0x0]
8000a192:	68 c0       	ld.w	r0,r4[0x30]
8000a194:	80 00       	ld.sh	r0,r0[0x0]
8000a196:	33 38       	mov	r8,51
8000a198:	80 00       	ld.sh	r0,r0[0x0]
8000a19a:	68 e4       	ld.w	r4,r4[0x38]
8000a19c:	80 00       	ld.sh	r0,r0[0x0]
8000a19e:	69 20       	ld.w	r0,r4[0x48]
8000a1a0:	80 00       	ld.sh	r0,r0[0x0]
8000a1a2:	69 60       	ld.w	r0,r4[0x58]
8000a1a4:	00 00       	add	r0,r0
8000a1a6:	0b 46       	ld.w	r6,--r5
8000a1a8:	00 00       	add	r0,r0
8000a1aa:	0b f6       	ld.ub	r6,r5[0x7]
8000a1ac:	80 00       	ld.sh	r0,r0[0x0]
8000a1ae:	75 dc       	ld.w	r12,r10[0x74]
8000a1b0:	00 00       	add	r0,r0
8000a1b2:	0c 24       	rsub	r4,r6
8000a1b4:	00 00       	add	r0,r0
8000a1b6:	0c f4       	st.b	--r6,r4
8000a1b8:	80 00       	ld.sh	r0,r0[0x0]
8000a1ba:	69 a0       	ld.w	r0,r4[0x68]
8000a1bc:	80 00       	ld.sh	r0,r0[0x0]
8000a1be:	c7 f4       	brge	8000a2bc <show_chassis_sysErr+0xd8>
8000a1c0:	80 00       	ld.sh	r0,r0[0x0]
8000a1c2:	69 f0       	ld.w	r0,r4[0x7c]
8000a1c4:	80 00       	ld.sh	r0,r0[0x0]
8000a1c6:	72 90       	ld.w	r0,r9[0x24]
8000a1c8:	80 00       	ld.sh	r0,r0[0x0]
8000a1ca:	69 fc       	ld.w	r12,r4[0x7c]
8000a1cc:	80 00       	ld.sh	r0,r0[0x0]
8000a1ce:	64 e8       	ld.w	r8,r2[0x38]
8000a1d0:	80 00       	ld.sh	r0,r0[0x0]
8000a1d2:	6a 08       	ld.w	r8,r5[0x0]
8000a1d4:	80 00       	ld.sh	r0,r0[0x0]
8000a1d6:	6a 20       	ld.w	r0,r5[0x8]
8000a1d8:	80 00       	ld.sh	r0,r0[0x0]
8000a1da:	6a 24       	ld.w	r4,r5[0x8]
8000a1dc:	80 00       	ld.sh	r0,r0[0x0]
8000a1de:	6a 28       	ld.w	r8,r5[0x8]
8000a1e0:	00 00       	add	r0,r0
8000a1e2:	0c 20       	rsub	r0,r6

8000a1e4 <show_chassis_sysErr>:


void show_chassis_sysErr(void);
void show_chassis_sysErr(void)
{
8000a1e4:	eb cd 40 c0 	pushm	r6-r7,lr
8000a1e8:	1a 97       	mov	r7,sp
8000a1ea:	21 9d       	sub	sp,100
	char str[80];
	

	print_ecdbg("\r\n***SYSTEM TESTS***\r\n\r\n");
8000a1ec:	fe fc 03 60 	ld.w	r12,pc[864]
8000a1f0:	f0 1f 00 d8 	mcall	8000a550 <show_chassis_sysErr+0x36c>


/*
 *	LED Driver: Top
 */
	sprintf(str, "LED Driver: TOP (7..0)                 ");
8000a1f4:	ee c8 00 64 	sub	r8,r7,100
8000a1f8:	32 8a       	mov	r10,40
8000a1fa:	fe fb 03 5a 	ld.w	r11,pc[858]
8000a1fe:	10 9c       	mov	r12,r8
8000a200:	f0 1f 00 d6 	mcall	8000a558 <show_chassis_sysErr+0x374>
	
	for (int i=8; i>0; i--)
8000a204:	30 88       	mov	r8,8
8000a206:	ef 48 ff ec 	st.w	r7[-20],r8
8000a20a:	c3 48       	rjmp	8000a272 <show_chassis_sysErr+0x8e>
	{
		if ((sysErr.topdrive & BIT(i-1)))
8000a20c:	fe f8 03 50 	ld.w	r8,pc[848]
8000a210:	11 88       	ld.ub	r8,r8[0x0]
8000a212:	10 99       	mov	r9,r8
8000a214:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a218:	20 18       	sub	r8,1
8000a21a:	f2 08 08 48 	asr	r8,r9,r8
8000a21e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a222:	5c 58       	castu.b	r8
8000a224:	c1 20       	breq	8000a248 <show_chassis_sysErr+0x64>
		{
			strcat(str,"F ");			
8000a226:	ee c6 00 64 	sub	r6,r7,100
8000a22a:	ee c8 00 64 	sub	r8,r7,100
8000a22e:	10 9c       	mov	r12,r8
8000a230:	f0 1f 00 cc 	mcall	8000a560 <show_chassis_sysErr+0x37c>
8000a234:	18 98       	mov	r8,r12
8000a236:	ec 08 00 08 	add	r8,r6,r8
8000a23a:	30 3a       	mov	r10,3
8000a23c:	fe fb 03 28 	ld.w	r11,pc[808]
8000a240:	10 9c       	mov	r12,r8
8000a242:	f0 1f 00 c6 	mcall	8000a558 <show_chassis_sysErr+0x374>
8000a246:	c1 18       	rjmp	8000a268 <show_chassis_sysErr+0x84>
		}
		else
		{
			strcat(str,"P ");
8000a248:	ee c6 00 64 	sub	r6,r7,100
8000a24c:	ee c8 00 64 	sub	r8,r7,100
8000a250:	10 9c       	mov	r12,r8
8000a252:	f0 1f 00 c4 	mcall	8000a560 <show_chassis_sysErr+0x37c>
8000a256:	18 98       	mov	r8,r12
8000a258:	ec 08 00 08 	add	r8,r6,r8
8000a25c:	30 3a       	mov	r10,3
8000a25e:	fe fb 03 0a 	ld.w	r11,pc[778]
8000a262:	10 9c       	mov	r12,r8
8000a264:	f0 1f 00 bd 	mcall	8000a558 <show_chassis_sysErr+0x374>
/*
 *	LED Driver: Top
 */
	sprintf(str, "LED Driver: TOP (7..0)                 ");
	
	for (int i=8; i>0; i--)
8000a268:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a26c:	20 18       	sub	r8,1
8000a26e:	ef 48 ff ec 	st.w	r7[-20],r8
8000a272:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a276:	58 08       	cp.w	r8,0
8000a278:	fe 99 ff ca 	brgt	8000a20c <show_chassis_sysErr+0x28>
		{
			strcat(str,"P ");
		}
	}
	
	print_ecdbg(str);
8000a27c:	ee c8 00 64 	sub	r8,r7,100
8000a280:	10 9c       	mov	r12,r8
8000a282:	f0 1f 00 b4 	mcall	8000a550 <show_chassis_sysErr+0x36c>
	print_ecdbg("\r\n");
8000a286:	fe fc 02 e6 	ld.w	r12,pc[742]
8000a28a:	f0 1f 00 b2 	mcall	8000a550 <show_chassis_sysErr+0x36c>
	
/*
 *	LED Driver: Bottom
 */
	sprintf(str, "LED Driver: BOTTOM (11..0)             ");
8000a28e:	ee c8 00 64 	sub	r8,r7,100
8000a292:	32 8a       	mov	r10,40
8000a294:	fe fb 02 dc 	ld.w	r11,pc[732]
8000a298:	10 9c       	mov	r12,r8
8000a29a:	f0 1f 00 b0 	mcall	8000a558 <show_chassis_sysErr+0x374>
	
	for (int i=12; i>0; i--)
8000a29e:	30 c8       	mov	r8,12
8000a2a0:	ef 48 ff f0 	st.w	r7[-16],r8
8000a2a4:	c3 38       	rjmp	8000a30a <show_chassis_sysErr+0x126>
	{
		if ((sysErr.botdrive & BIT(i-1)))
8000a2a6:	fe f8 02 b6 	ld.w	r8,pc[694]
8000a2aa:	70 19       	ld.w	r9,r8[0x4]
8000a2ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a2b0:	20 18       	sub	r8,1
8000a2b2:	30 1a       	mov	r10,1
8000a2b4:	f4 08 09 48 	lsl	r8,r10,r8
8000a2b8:	f3 e8 00 08 	and	r8,r9,r8
8000a2bc:	c1 20       	breq	8000a2e0 <show_chassis_sysErr+0xfc>
		{
			strcat(str,"F ");			
8000a2be:	ee c6 00 64 	sub	r6,r7,100
8000a2c2:	ee c8 00 64 	sub	r8,r7,100
8000a2c6:	10 9c       	mov	r12,r8
8000a2c8:	f0 1f 00 a6 	mcall	8000a560 <show_chassis_sysErr+0x37c>
8000a2cc:	18 98       	mov	r8,r12
8000a2ce:	ec 08 00 08 	add	r8,r6,r8
8000a2d2:	30 3a       	mov	r10,3
8000a2d4:	fe fb 02 90 	ld.w	r11,pc[656]
8000a2d8:	10 9c       	mov	r12,r8
8000a2da:	f0 1f 00 a0 	mcall	8000a558 <show_chassis_sysErr+0x374>
8000a2de:	c1 18       	rjmp	8000a300 <show_chassis_sysErr+0x11c>
		}
		else
		{
			strcat(str,"P ");
8000a2e0:	ee c6 00 64 	sub	r6,r7,100
8000a2e4:	ee c8 00 64 	sub	r8,r7,100
8000a2e8:	10 9c       	mov	r12,r8
8000a2ea:	f0 1f 00 9e 	mcall	8000a560 <show_chassis_sysErr+0x37c>
8000a2ee:	18 98       	mov	r8,r12
8000a2f0:	ec 08 00 08 	add	r8,r6,r8
8000a2f4:	30 3a       	mov	r10,3
8000a2f6:	fe fb 02 72 	ld.w	r11,pc[626]
8000a2fa:	10 9c       	mov	r12,r8
8000a2fc:	f0 1f 00 97 	mcall	8000a558 <show_chassis_sysErr+0x374>
/*
 *	LED Driver: Bottom
 */
	sprintf(str, "LED Driver: BOTTOM (11..0)             ");
	
	for (int i=12; i>0; i--)
8000a300:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a304:	20 18       	sub	r8,1
8000a306:	ef 48 ff f0 	st.w	r7[-16],r8
8000a30a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a30e:	58 08       	cp.w	r8,0
8000a310:	fe 99 ff cb 	brgt	8000a2a6 <show_chassis_sysErr+0xc2>
		{
			strcat(str,"P ");
		}
	}
	
	print_ecdbg(str);
8000a314:	ee c8 00 64 	sub	r8,r7,100
8000a318:	10 9c       	mov	r12,r8
8000a31a:	f0 1f 00 8e 	mcall	8000a550 <show_chassis_sysErr+0x36c>
	print_ecdbg("\r\n");
8000a31e:	fe fc 02 4e 	ld.w	r12,pc[590]
8000a322:	f0 1f 00 8c 	mcall	8000a550 <show_chassis_sysErr+0x36c>
	
/*
 *	Flash
 */

	sprintf(str, "Flash (0..4)                           ");
8000a326:	ee c8 00 64 	sub	r8,r7,100
8000a32a:	32 8a       	mov	r10,40
8000a32c:	fe fb 02 48 	ld.w	r11,pc[584]
8000a330:	10 9c       	mov	r12,r8
8000a332:	f0 1f 00 8a 	mcall	8000a558 <show_chassis_sysErr+0x374>
	
	for (int i=0; i<5; i++)
8000a336:	30 08       	mov	r8,0
8000a338:	ef 48 ff f4 	st.w	r7[-12],r8
8000a33c:	c3 18       	rjmp	8000a39e <show_chassis_sysErr+0x1ba>
	{
		if ((sysErr.flashArea & BIT(i)) == SE_FAIL)
8000a33e:	fe f8 02 1e 	ld.w	r8,pc[542]
8000a342:	70 29       	ld.w	r9,r8[0x8]
8000a344:	30 1a       	mov	r10,1
8000a346:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a34a:	f4 08 09 48 	lsl	r8,r10,r8
8000a34e:	f3 e8 00 08 	and	r8,r9,r8
8000a352:	58 18       	cp.w	r8,1
8000a354:	c1 11       	brne	8000a376 <show_chassis_sysErr+0x192>
		{
			strcat(str, "F ");
8000a356:	ee c6 00 64 	sub	r6,r7,100
8000a35a:	ee c8 00 64 	sub	r8,r7,100
8000a35e:	10 9c       	mov	r12,r8
8000a360:	f0 1f 00 80 	mcall	8000a560 <show_chassis_sysErr+0x37c>
8000a364:	18 98       	mov	r8,r12
8000a366:	ec 08 00 08 	add	r8,r6,r8
8000a36a:	30 3a       	mov	r10,3
8000a36c:	4f eb       	lddpc	r11,8000a564 <show_chassis_sysErr+0x380>
8000a36e:	10 9c       	mov	r12,r8
8000a370:	f0 1f 00 7a 	mcall	8000a558 <show_chassis_sysErr+0x374>
8000a374:	c1 08       	rjmp	8000a394 <show_chassis_sysErr+0x1b0>
		}
		else
		{
			strcat(str, "P ");
8000a376:	ee c6 00 64 	sub	r6,r7,100
8000a37a:	ee c8 00 64 	sub	r8,r7,100
8000a37e:	10 9c       	mov	r12,r8
8000a380:	f0 1f 00 78 	mcall	8000a560 <show_chassis_sysErr+0x37c>
8000a384:	18 98       	mov	r8,r12
8000a386:	ec 08 00 08 	add	r8,r6,r8
8000a38a:	30 3a       	mov	r10,3
8000a38c:	4f 7b       	lddpc	r11,8000a568 <show_chassis_sysErr+0x384>
8000a38e:	10 9c       	mov	r12,r8
8000a390:	f0 1f 00 72 	mcall	8000a558 <show_chassis_sysErr+0x374>
 *	Flash
 */

	sprintf(str, "Flash (0..4)                           ");
	
	for (int i=0; i<5; i++)
8000a394:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a398:	2f f8       	sub	r8,-1
8000a39a:	ef 48 ff f4 	st.w	r7[-12],r8
8000a39e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a3a2:	58 48       	cp.w	r8,4
8000a3a4:	fe 9a ff cd 	brle	8000a33e <show_chassis_sysErr+0x15a>
		{
			strcat(str, "P ");
		}
	}
	
	print_ecdbg(str);
8000a3a8:	ee c8 00 64 	sub	r8,r7,100
8000a3ac:	10 9c       	mov	r12,r8
8000a3ae:	f0 1f 00 69 	mcall	8000a550 <show_chassis_sysErr+0x36c>
	print_ecdbg("\r\n");
8000a3b2:	4e fc       	lddpc	r12,8000a56c <show_chassis_sysErr+0x388>
8000a3b4:	f0 1f 00 67 	mcall	8000a550 <show_chassis_sysErr+0x36c>
	
/*
 * LED board serial ID checksums
 */	
	sprintf(str, "LED Board Serial ID Checksums (0..4)   ");
8000a3b8:	ee c8 00 64 	sub	r8,r7,100
8000a3bc:	32 8a       	mov	r10,40
8000a3be:	4e fb       	lddpc	r11,8000a578 <show_chassis_sysErr+0x394>
8000a3c0:	10 9c       	mov	r12,r8
8000a3c2:	f0 1f 00 66 	mcall	8000a558 <show_chassis_sysErr+0x374>
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
8000a3c6:	30 08       	mov	r8,0
8000a3c8:	ef 48 ff f8 	st.w	r7[-8],r8
8000a3cc:	c3 28       	rjmp	8000a430 <show_chassis_sysErr+0x24c>
	{
		if ((sysErr.ledBrdSerialIdCsum & BIT(i)) == SE_FAIL)
8000a3ce:	4e 48       	lddpc	r8,8000a55c <show_chassis_sysErr+0x378>
8000a3d0:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000a3d4:	10 99       	mov	r9,r8
8000a3d6:	30 1a       	mov	r10,1
8000a3d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a3dc:	f4 08 09 48 	lsl	r8,r10,r8
8000a3e0:	f3 e8 00 08 	and	r8,r9,r8
8000a3e4:	58 18       	cp.w	r8,1
8000a3e6:	c1 11       	brne	8000a408 <show_chassis_sysErr+0x224>
		{
			strcat(str, "F ");
8000a3e8:	ee c6 00 64 	sub	r6,r7,100
8000a3ec:	ee c8 00 64 	sub	r8,r7,100
8000a3f0:	10 9c       	mov	r12,r8
8000a3f2:	f0 1f 00 5c 	mcall	8000a560 <show_chassis_sysErr+0x37c>
8000a3f6:	18 98       	mov	r8,r12
8000a3f8:	ec 08 00 08 	add	r8,r6,r8
8000a3fc:	30 3a       	mov	r10,3
8000a3fe:	4d ab       	lddpc	r11,8000a564 <show_chassis_sysErr+0x380>
8000a400:	10 9c       	mov	r12,r8
8000a402:	f0 1f 00 56 	mcall	8000a558 <show_chassis_sysErr+0x374>
8000a406:	c1 08       	rjmp	8000a426 <show_chassis_sysErr+0x242>
		}
		else
		{
			strcat(str, "P ");
8000a408:	ee c6 00 64 	sub	r6,r7,100
8000a40c:	ee c8 00 64 	sub	r8,r7,100
8000a410:	10 9c       	mov	r12,r8
8000a412:	f0 1f 00 54 	mcall	8000a560 <show_chassis_sysErr+0x37c>
8000a416:	18 98       	mov	r8,r12
8000a418:	ec 08 00 08 	add	r8,r6,r8
8000a41c:	30 3a       	mov	r10,3
8000a41e:	4d 3b       	lddpc	r11,8000a568 <show_chassis_sysErr+0x384>
8000a420:	10 9c       	mov	r12,r8
8000a422:	f0 1f 00 4e 	mcall	8000a558 <show_chassis_sysErr+0x374>
/*
 * LED board serial ID checksums
 */	
	sprintf(str, "LED Board Serial ID Checksums (0..4)   ");
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
8000a426:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a42a:	2f f8       	sub	r8,-1
8000a42c:	ef 48 ff f8 	st.w	r7[-8],r8
8000a430:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a434:	58 48       	cp.w	r8,4
8000a436:	fe 9a ff cc 	brle	8000a3ce <show_chassis_sysErr+0x1ea>
		{
			strcat(str, "P ");
		}
	}

	print_ecdbg(str);
8000a43a:	ee c8 00 64 	sub	r8,r7,100
8000a43e:	10 9c       	mov	r12,r8
8000a440:	f0 1f 00 44 	mcall	8000a550 <show_chassis_sysErr+0x36c>
	print_ecdbg("\r\n");
8000a444:	4c ac       	lddpc	r12,8000a56c <show_chassis_sysErr+0x388>
8000a446:	f0 1f 00 43 	mcall	8000a550 <show_chassis_sysErr+0x36c>
	

/*
 * LED Board Side Max Usage Reached
 */
	sprintf(str, "LED Board Side Max Usage (0..7)        ");
8000a44a:	ee c8 00 64 	sub	r8,r7,100
8000a44e:	32 8a       	mov	r10,40
8000a450:	4c bb       	lddpc	r11,8000a57c <show_chassis_sysErr+0x398>
8000a452:	10 9c       	mov	r12,r8
8000a454:	f0 1f 00 41 	mcall	8000a558 <show_chassis_sysErr+0x374>
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
8000a458:	30 08       	mov	r8,0
8000a45a:	ef 48 ff fc 	st.w	r7[-4],r8
8000a45e:	c3 18       	rjmp	8000a4c0 <show_chassis_sysErr+0x2dc>
	{
		if (ledBrdSide[i].maxUsageReached)
8000a460:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a464:	4c 7a       	lddpc	r10,8000a580 <show_chassis_sysErr+0x39c>
8000a466:	12 98       	mov	r8,r9
8000a468:	a3 68       	lsl	r8,0x2
8000a46a:	12 08       	add	r8,r9
8000a46c:	f4 08 00 08 	add	r8,r10,r8
8000a470:	2f e8       	sub	r8,-2
8000a472:	11 88       	ld.ub	r8,r8[0x0]
8000a474:	58 08       	cp.w	r8,0
8000a476:	c1 10       	breq	8000a498 <show_chassis_sysErr+0x2b4>
		{
			strcat(str, "F ");
8000a478:	ee c6 00 64 	sub	r6,r7,100
8000a47c:	ee c8 00 64 	sub	r8,r7,100
8000a480:	10 9c       	mov	r12,r8
8000a482:	f0 1f 00 38 	mcall	8000a560 <show_chassis_sysErr+0x37c>
8000a486:	18 98       	mov	r8,r12
8000a488:	ec 08 00 08 	add	r8,r6,r8
8000a48c:	30 3a       	mov	r10,3
8000a48e:	4b 6b       	lddpc	r11,8000a564 <show_chassis_sysErr+0x380>
8000a490:	10 9c       	mov	r12,r8
8000a492:	f0 1f 00 32 	mcall	8000a558 <show_chassis_sysErr+0x374>
8000a496:	c1 08       	rjmp	8000a4b6 <show_chassis_sysErr+0x2d2>
		}
		else
		{
			strcat(str, "P ");
8000a498:	ee c6 00 64 	sub	r6,r7,100
8000a49c:	ee c8 00 64 	sub	r8,r7,100
8000a4a0:	10 9c       	mov	r12,r8
8000a4a2:	f0 1f 00 30 	mcall	8000a560 <show_chassis_sysErr+0x37c>
8000a4a6:	18 98       	mov	r8,r12
8000a4a8:	ec 08 00 08 	add	r8,r6,r8
8000a4ac:	30 3a       	mov	r10,3
8000a4ae:	4a fb       	lddpc	r11,8000a568 <show_chassis_sysErr+0x384>
8000a4b0:	10 9c       	mov	r12,r8
8000a4b2:	f0 1f 00 2a 	mcall	8000a558 <show_chassis_sysErr+0x374>
/*
 * LED Board Side Max Usage Reached
 */
	sprintf(str, "LED Board Side Max Usage (0..7)        ");
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
8000a4b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a4ba:	2f f8       	sub	r8,-1
8000a4bc:	ef 48 ff fc 	st.w	r7[-4],r8
8000a4c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a4c4:	58 78       	cp.w	r8,7
8000a4c6:	fe 9a ff cd 	brle	8000a460 <show_chassis_sysErr+0x27c>
		{
			strcat(str, "P ");
		}
	}

	print_ecdbg(str);
8000a4ca:	ee c8 00 64 	sub	r8,r7,100
8000a4ce:	10 9c       	mov	r12,r8
8000a4d0:	f0 1f 00 20 	mcall	8000a550 <show_chassis_sysErr+0x36c>
	print_ecdbg("\r\n");
8000a4d4:	4a 6c       	lddpc	r12,8000a56c <show_chassis_sysErr+0x388>
8000a4d6:	f0 1f 00 1f 	mcall	8000a550 <show_chassis_sysErr+0x36c>

/*
 * Usage Struct Full
 */

	sprintf(str, "Usage Struct Open Slots                ");
8000a4da:	ee c8 00 64 	sub	r8,r7,100
8000a4de:	32 8a       	mov	r10,40
8000a4e0:	4a 9b       	lddpc	r11,8000a584 <show_chassis_sysErr+0x3a0>
8000a4e2:	10 9c       	mov	r12,r8
8000a4e4:	f0 1f 00 1d 	mcall	8000a558 <show_chassis_sysErr+0x374>
	if (sysErr.usageStructsFull == SE_FAIL)
8000a4e8:	49 d8       	lddpc	r8,8000a55c <show_chassis_sysErr+0x378>
8000a4ea:	f1 39 00 0e 	ld.ub	r9,r8[14]
8000a4ee:	30 18       	mov	r8,1
8000a4f0:	f0 09 18 00 	cp.b	r9,r8
8000a4f4:	c1 11       	brne	8000a516 <show_chassis_sysErr+0x332>
	{
		strcat(str, "F \r\n");
8000a4f6:	ee c6 00 64 	sub	r6,r7,100
8000a4fa:	ee c8 00 64 	sub	r8,r7,100
8000a4fe:	10 9c       	mov	r12,r8
8000a500:	f0 1f 00 18 	mcall	8000a560 <show_chassis_sysErr+0x37c>
8000a504:	18 98       	mov	r8,r12
8000a506:	ec 08 00 08 	add	r8,r6,r8
8000a50a:	30 5a       	mov	r10,5
8000a50c:	49 fb       	lddpc	r11,8000a588 <show_chassis_sysErr+0x3a4>
8000a50e:	10 9c       	mov	r12,r8
8000a510:	f0 1f 00 12 	mcall	8000a558 <show_chassis_sysErr+0x374>
8000a514:	c1 08       	rjmp	8000a534 <show_chassis_sysErr+0x350>
	}
	else
	{
		strcat(str, "P \r\n");
8000a516:	ee c6 00 64 	sub	r6,r7,100
8000a51a:	ee c8 00 64 	sub	r8,r7,100
8000a51e:	10 9c       	mov	r12,r8
8000a520:	f0 1f 00 10 	mcall	8000a560 <show_chassis_sysErr+0x37c>
8000a524:	18 98       	mov	r8,r12
8000a526:	ec 08 00 08 	add	r8,r6,r8
8000a52a:	30 5a       	mov	r10,5
8000a52c:	49 8b       	lddpc	r11,8000a58c <show_chassis_sysErr+0x3a8>
8000a52e:	10 9c       	mov	r12,r8
8000a530:	f0 1f 00 0a 	mcall	8000a558 <show_chassis_sysErr+0x374>
	}
	
	print_ecdbg(str);
8000a534:	ee c8 00 64 	sub	r8,r7,100
8000a538:	10 9c       	mov	r12,r8
8000a53a:	f0 1f 00 06 	mcall	8000a550 <show_chassis_sysErr+0x36c>
	print_ecdbg("\r\n");
8000a53e:	48 cc       	lddpc	r12,8000a56c <show_chassis_sysErr+0x388>
8000a540:	f0 1f 00 04 	mcall	8000a550 <show_chassis_sysErr+0x36c>

}
8000a544:	2e 7d       	sub	sp,-100
8000a546:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a54a:	00 00       	add	r0,r0
8000a54c:	80 00       	ld.sh	r0,r0[0x0]
8000a54e:	6a 44       	ld.w	r4,r5[0x10]
8000a550:	80 00       	ld.sh	r0,r0[0x0]
8000a552:	33 38       	mov	r8,51
8000a554:	80 00       	ld.sh	r0,r0[0x0]
8000a556:	6a 60       	ld.w	r0,r5[0x18]
8000a558:	80 00       	ld.sh	r0,r0[0x0]
8000a55a:	c6 9e       	rcall	8000a22c <show_chassis_sysErr+0x48>
8000a55c:	00 00       	add	r0,r0
8000a55e:	0b cc       	ld.ub	r12,r5[0x4]
8000a560:	80 00       	ld.sh	r0,r0[0x0]
8000a562:	c8 34       	brge	8000a468 <show_chassis_sysErr+0x284>
8000a564:	80 00       	ld.sh	r0,r0[0x0]
8000a566:	6a 88       	ld.w	r8,r5[0x20]
8000a568:	80 00       	ld.sh	r0,r0[0x0]
8000a56a:	6a 8c       	ld.w	r12,r5[0x20]
8000a56c:	80 00       	ld.sh	r0,r0[0x0]
8000a56e:	64 e8       	ld.w	r8,r2[0x38]
8000a570:	80 00       	ld.sh	r0,r0[0x0]
8000a572:	6a 90       	ld.w	r0,r5[0x24]
8000a574:	80 00       	ld.sh	r0,r0[0x0]
8000a576:	6a b8       	ld.w	r8,r5[0x2c]
8000a578:	80 00       	ld.sh	r0,r0[0x0]
8000a57a:	6a e0       	ld.w	r0,r5[0x38]
8000a57c:	80 00       	ld.sh	r0,r0[0x0]
8000a57e:	6b 08       	ld.w	r8,r5[0x40]
8000a580:	00 00       	add	r0,r0
8000a582:	0b f6       	ld.ub	r6,r5[0x7]
8000a584:	80 00       	ld.sh	r0,r0[0x0]
8000a586:	6b 30       	ld.w	r0,r5[0x4c]
8000a588:	80 00       	ld.sh	r0,r0[0x0]
8000a58a:	6b 58       	ld.w	r8,r5[0x54]
8000a58c:	80 00       	ld.sh	r0,r0[0x0]
8000a58e:	6b 60       	ld.w	r0,r5[0x58]

8000a590 <show_chassis_all_LED_boards>:

void show_chassis_all_LED_boards(void);
void show_chassis_all_LED_boards(void)
{
8000a590:	eb cd 40 c0 	pushm	r6-r7,lr
8000a594:	1a 97       	mov	r7,sp
8000a596:	21 5d       	sub	sp,84
	char str[80];
	int i = 0;
8000a598:	30 08       	mov	r8,0
8000a59a:	ef 48 ff fc 	st.w	r7[-4],r8

	print_ecdbg("\r\n***LED BOARDS MASTER LIST***\r\n\r\n");
8000a59e:	4c 4c       	lddpc	r12,8000a6ac <show_chassis_all_LED_boards+0x11c>
8000a5a0:	f0 1f 00 44 	mcall	8000a6b0 <show_chassis_all_LED_boards+0x120>
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
				usageShdw[0].u[i].id[0],usageShdw[0].u[i].id[1],usageShdw[0].u[i].id[2],usageShdw[0].u[i].id[3],usageShdw[0].u[i].id[4],usageShdw[0].u[i].id[5]);
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
8000a5a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a5a8:	4c 38       	lddpc	r8,8000a6b4 <show_chassis_all_LED_boards+0x124>
8000a5aa:	a1 79       	lsl	r9,0x1
8000a5ac:	2f f9       	sub	r9,-1
8000a5ae:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000a5b2:	f1 d8 c1 a1 	bfextu	r8,r8,0xd,0x1
8000a5b6:	5c 58       	castu.b	r8
8000a5b8:	c7 40       	breq	8000a6a0 <show_chassis_all_LED_boards+0x110>
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
8000a5ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a5be:	4b e9       	lddpc	r9,8000a6b4 <show_chassis_all_LED_boards+0x124>
8000a5c0:	a3 78       	lsl	r8,0x3
8000a5c2:	f2 08 00 08 	add	r8,r9,r8
8000a5c6:	11 d8       	ld.ub	r8,r8[0x5]
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
8000a5c8:	10 96       	mov	r6,r8
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
8000a5ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a5ce:	4b a8       	lddpc	r8,8000a6b4 <show_chassis_all_LED_boards+0x124>
8000a5d0:	a1 79       	lsl	r9,0x1
8000a5d2:	2f f9       	sub	r9,-1
8000a5d4:	f0 09 07 28 	ld.ub	r8,r8[r9<<0x2]
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
8000a5d8:	10 9e       	mov	lr,r8
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
8000a5da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a5de:	4b 69       	lddpc	r9,8000a6b4 <show_chassis_all_LED_boards+0x124>
8000a5e0:	a3 78       	lsl	r8,0x3
8000a5e2:	f2 08 00 08 	add	r8,r9,r8
8000a5e6:	11 b8       	ld.ub	r8,r8[0x3]
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
8000a5e8:	10 9c       	mov	r12,r8
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
8000a5ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a5ee:	4b 28       	lddpc	r8,8000a6b4 <show_chassis_all_LED_boards+0x124>
8000a5f0:	a3 69       	lsl	r9,0x2
8000a5f2:	2f f9       	sub	r9,-1
8000a5f4:	f0 09 07 18 	ld.ub	r8,r8[r9<<0x1]
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
8000a5f8:	10 9b       	mov	r11,r8
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
8000a5fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a5fe:	4a e9       	lddpc	r9,8000a6b4 <show_chassis_all_LED_boards+0x124>
8000a600:	a3 78       	lsl	r8,0x3
8000a602:	f2 08 00 08 	add	r8,r9,r8
8000a606:	11 98       	ld.ub	r8,r8[0x1]
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
8000a608:	10 9a       	mov	r10,r8
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
8000a60a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a60e:	4a a8       	lddpc	r8,8000a6b4 <show_chassis_all_LED_boards+0x124>
8000a610:	f0 09 07 38 	ld.ub	r8,r8[r9<<0x3]
			
			if (usageShdw[0].u[i].top_botn)
#else
		if (sf[i].slotFilled)
		{
			sprintf(str, "%2d) %02X%02X%02X%02X%02X%02X ", i,
8000a614:	10 99       	mov	r9,r8
8000a616:	ee c8 00 54 	sub	r8,r7,84
8000a61a:	1a d6       	st.w	--sp,r6
8000a61c:	1a de       	st.w	--sp,lr
8000a61e:	1a dc       	st.w	--sp,r12
8000a620:	1a db       	st.w	--sp,r11
8000a622:	1a da       	st.w	--sp,r10
8000a624:	1a d9       	st.w	--sp,r9
8000a626:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a62a:	1a d9       	st.w	--sp,r9
8000a62c:	4a 3b       	lddpc	r11,8000a6b8 <show_chassis_all_LED_boards+0x128>
8000a62e:	10 9c       	mov	r12,r8
8000a630:	f0 1f 00 23 	mcall	8000a6bc <show_chassis_all_LED_boards+0x12c>
8000a634:	2f 9d       	sub	sp,-28
			sf[i].id[0],sf[i].id[1],sf[i].id[2],sf[i].id[3],sf[i].id[4],sf[i].id[5]);
			
			if (sf[i].top_botn)
8000a636:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a63a:	49 f8       	lddpc	r8,8000a6b4 <show_chassis_all_LED_boards+0x124>
8000a63c:	a1 79       	lsl	r9,0x1
8000a63e:	2f f9       	sub	r9,-1
8000a640:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000a644:	f1 d8 c1 e1 	bfextu	r8,r8,0xf,0x1
8000a648:	5c 58       	castu.b	r8
8000a64a:	c1 10       	breq	8000a66c <show_chassis_all_LED_boards+0xdc>

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED			
			{
				strcat(str, " TOP\r\n");
8000a64c:	ee c6 00 54 	sub	r6,r7,84
8000a650:	ee c8 00 54 	sub	r8,r7,84
8000a654:	10 9c       	mov	r12,r8
8000a656:	f0 1f 00 1b 	mcall	8000a6c0 <show_chassis_all_LED_boards+0x130>
8000a65a:	18 98       	mov	r8,r12
8000a65c:	ec 08 00 08 	add	r8,r6,r8
8000a660:	30 7a       	mov	r10,7
8000a662:	49 9b       	lddpc	r11,8000a6c4 <show_chassis_all_LED_boards+0x134>
8000a664:	10 9c       	mov	r12,r8
8000a666:	f0 1f 00 19 	mcall	8000a6c8 <show_chassis_all_LED_boards+0x138>
8000a66a:	c1 08       	rjmp	8000a68a <show_chassis_all_LED_boards+0xfa>
			}
			else
			{
				strcat(str, " BOT\r\n");
8000a66c:	ee c6 00 54 	sub	r6,r7,84
8000a670:	ee c8 00 54 	sub	r8,r7,84
8000a674:	10 9c       	mov	r12,r8
8000a676:	f0 1f 00 13 	mcall	8000a6c0 <show_chassis_all_LED_boards+0x130>
8000a67a:	18 98       	mov	r8,r12
8000a67c:	ec 08 00 08 	add	r8,r6,r8
8000a680:	30 7a       	mov	r10,7
8000a682:	49 3b       	lddpc	r11,8000a6cc <show_chassis_all_LED_boards+0x13c>
8000a684:	10 9c       	mov	r12,r8
8000a686:	f0 1f 00 11 	mcall	8000a6c8 <show_chassis_all_LED_boards+0x138>
			}
			
			print_ecdbg(str);
8000a68a:	ee c8 00 54 	sub	r8,r7,84
8000a68e:	10 9c       	mov	r12,r8
8000a690:	f0 1f 00 08 	mcall	8000a6b0 <show_chassis_all_LED_boards+0x120>
		}
		else
		{
			break; //LED boards are stored contiguously, so if we hit a blank spot we are done with the entries in the list
		}
		i++;
8000a694:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a698:	2f f8       	sub	r8,-1
8000a69a:	ef 48 ff fc 	st.w	r7[-4],r8
		
	}
8000a69e:	c8 3b       	rjmp	8000a5a4 <show_chassis_all_LED_boards+0x14>
	
	print_ecdbg("\r\n\r\n");
8000a6a0:	48 cc       	lddpc	r12,8000a6d0 <show_chassis_all_LED_boards+0x140>
8000a6a2:	f0 1f 00 04 	mcall	8000a6b0 <show_chassis_all_LED_boards+0x120>

}
8000a6a6:	2e bd       	sub	sp,-84
8000a6a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a6ac:	80 00       	ld.sh	r0,r0[0x0]
8000a6ae:	6b 68       	ld.w	r8,r5[0x58]
8000a6b0:	80 00       	ld.sh	r0,r0[0x0]
8000a6b2:	33 38       	mov	r8,51
8000a6b4:	00 00       	add	r0,r0
8000a6b6:	08 44       	or	r4,r4
8000a6b8:	80 00       	ld.sh	r0,r0[0x0]
8000a6ba:	6b 8c       	ld.w	r12,r5[0x60]
8000a6bc:	80 00       	ld.sh	r0,r0[0x0]
8000a6be:	c7 f4       	brge	8000a7bc <service_ecdbg_input+0xd0>
8000a6c0:	80 00       	ld.sh	r0,r0[0x0]
8000a6c2:	c8 34       	brge	8000a5c8 <show_chassis_all_LED_boards+0x38>
8000a6c4:	80 00       	ld.sh	r0,r0[0x0]
8000a6c6:	6b ac       	ld.w	r12,r5[0x68]
8000a6c8:	80 00       	ld.sh	r0,r0[0x0]
8000a6ca:	c6 9e       	rcall	8000a39c <show_chassis_sysErr+0x1b8>
8000a6cc:	80 00       	ld.sh	r0,r0[0x0]
8000a6ce:	6b b4       	ld.w	r4,r5[0x6c]
8000a6d0:	80 00       	ld.sh	r0,r0[0x0]
8000a6d2:	6b bc       	ld.w	r12,r5[0x6c]

8000a6d4 <show_help_and_prompt>:

void show_help_and_prompt(void);
void show_help_and_prompt(void)
{
8000a6d4:	eb cd 40 80 	pushm	r7,lr
8000a6d8:	1a 97       	mov	r7,sp
	print_ecdbg("Type 'H' for help.\r\n\r\n");
8000a6da:	48 3c       	lddpc	r12,8000a6e4 <show_help_and_prompt+0x10>
8000a6dc:	f0 1f 00 03 	mcall	8000a6e8 <show_help_and_prompt+0x14>
}
8000a6e0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a6e4:	80 00       	ld.sh	r0,r0[0x0]
8000a6e6:	6b c4       	ld.w	r4,r5[0x70]
8000a6e8:	80 00       	ld.sh	r0,r0[0x0]
8000a6ea:	33 38       	mov	r8,51

8000a6ec <service_ecdbg_input>:
char cmd[20];
unsigned char cmdIdx = 0;

void service_ecdbg_input(void);
void service_ecdbg_input(void)
{
8000a6ec:	eb cd 40 80 	pushm	r7,lr
8000a6f0:	1a 97       	mov	r7,sp
8000a6f2:	20 3d       	sub	sp,12
	int rx_char;
	unsigned int tmpNewDte;
	unsigned char tryToChangeDte = 0;
8000a6f4:	30 08       	mov	r8,0
8000a6f6:	ef 68 ff ff 	st.b	r7[-1],r8

	if (usart_read_char(ECDBG_USART, &rx_char) != USART_SUCCESS)
8000a6fa:	ee c8 00 0c 	sub	r8,r7,12
8000a6fe:	10 9b       	mov	r11,r8
8000a700:	fe 7c 28 00 	mov	r12,-55296
8000a704:	f0 1f 00 b2 	mcall	8000a9cc <service_ecdbg_input+0x2e0>
8000a708:	18 98       	mov	r8,r12
8000a70a:	58 08       	cp.w	r8,0
8000a70c:	e0 81 01 4d 	brne	8000a9a6 <service_ecdbg_input+0x2ba>
	{
		return;
	}

	if (rx_char == USART_FAILURE)
8000a710:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a714:	5b f8       	cp.w	r8,-1
8000a716:	e0 80 01 4a 	breq	8000a9aa <service_ecdbg_input+0x2be>
	{
//26may15 why are we getting this? ignore for now		usart_write_line(ECDBG_USART, "UART error\r\n");
		return;
	}
	if (rx_char == '\x03')
8000a71a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a71e:	58 38       	cp.w	r8,3
8000a720:	e0 80 01 47 	breq	8000a9ae <service_ecdbg_input+0x2c2>
	{
		return;
	}
	
	if ((rx_char < 0x0a) || (rx_char > 0x7a))
8000a724:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a728:	58 98       	cp.w	r8,9
8000a72a:	e0 8a 01 44 	brle	8000a9b2 <service_ecdbg_input+0x2c6>
8000a72e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a732:	e0 48 00 7a 	cp.w	r8,122
8000a736:	e0 89 01 40 	brgt	8000a9b6 <service_ecdbg_input+0x2ca>
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a73a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a73e:	58 d8       	cp.w	r8,13
8000a740:	c2 e0       	breq	8000a79c <service_ecdbg_input+0xb0>
		(rx_char == 0x0a) ||							//line feed
8000a742:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a746:	58 a8       	cp.w	r8,10
8000a748:	c2 a0       	breq	8000a79c <service_ecdbg_input+0xb0>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
8000a74a:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a74e:	e0 48 00 20 	cp.w	r8,32
8000a752:	c2 50       	breq	8000a79c <service_ecdbg_input+0xb0>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
8000a754:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a758:	e0 48 00 2f 	cp.w	r8,47
8000a75c:	e0 8a 00 08 	brle	8000a76c <service_ecdbg_input+0x80>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
8000a760:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a764:	e0 48 00 39 	cp.w	r8,57
8000a768:	e0 8a 00 1a 	brle	8000a79c <service_ecdbg_input+0xb0>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
8000a76c:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a770:	e0 48 00 40 	cp.w	r8,64
8000a774:	e0 8a 00 08 	brle	8000a784 <service_ecdbg_input+0x98>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
8000a778:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a77c:	e0 48 00 5a 	cp.w	r8,90
8000a780:	e0 8a 00 0e 	brle	8000a79c <service_ecdbg_input+0xb0>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
8000a784:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a788:	e0 48 00 60 	cp.w	r8,96
8000a78c:	e0 8a 01 17 	brle	8000a9ba <service_ecdbg_input+0x2ce>
		(rx_char == 0x0a) ||							//line feed
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
8000a790:	ee f8 ff f4 	ld.w	r8,r7[-12]
	{
		return; //completely out of range, ignore
	}
	
	
	if ((rx_char == 0x0d) ||							//carriage return
8000a794:	e0 48 00 7a 	cp.w	r8,122
8000a798:	e0 89 01 13 	brgt	8000a9be <service_ecdbg_input+0x2d2>
		(rx_char == 0x20) ||							//space
		((rx_char >= 0x30) && (rx_char <= 0x39)) ||		//decimal number
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
	{
		if (rx_char == 0x50)
8000a79c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a7a0:	e0 48 00 50 	cp.w	r8,80
8000a7a4:	e0 80 01 0f 	breq	8000a9c2 <service_ecdbg_input+0x2d6>
	{
		return;
	}


	cmd[cmdIdx++] = rx_char;
8000a7a8:	fe f8 02 28 	ld.w	r8,pc[552]
8000a7ac:	11 88       	ld.ub	r8,r8[0x0]
8000a7ae:	10 9a       	mov	r10,r8
8000a7b0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a7b4:	5c 59       	castu.b	r9
8000a7b6:	fe fb 02 1e 	ld.w	r11,pc[542]
8000a7ba:	f6 0a 0b 09 	st.b	r11[r10],r9
8000a7be:	2f f8       	sub	r8,-1
8000a7c0:	5c 58       	castu.b	r8
8000a7c2:	fe f9 02 0e 	ld.w	r9,pc[526]
8000a7c6:	b2 88       	st.b	r9[0x0],r8
	
	usart_putchar(ECDBG_USART, rx_char);
8000a7c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a7cc:	10 9b       	mov	r11,r8
8000a7ce:	fe 7c 28 00 	mov	r12,-55296
8000a7d2:	f0 1f 00 82 	mcall	8000a9d8 <service_ecdbg_input+0x2ec>
	if (rx_char == '\r')
8000a7d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a7da:	58 d8       	cp.w	r8,13
8000a7dc:	e0 81 00 f4 	brne	8000a9c4 <service_ecdbg_input+0x2d8>
	{ 
		if (cmdIdx == 2)
8000a7e0:	4f c8       	lddpc	r8,8000a9d0 <service_ecdbg_input+0x2e4>
8000a7e2:	11 89       	ld.ub	r9,r8[0x0]
8000a7e4:	30 28       	mov	r8,2
8000a7e6:	f0 09 18 00 	cp.b	r9,r8
8000a7ea:	c4 d1       	brne	8000a884 <service_ecdbg_input+0x198>
		{
			switch(cmd[0])
8000a7ec:	4f a8       	lddpc	r8,8000a9d4 <service_ecdbg_input+0x2e8>
8000a7ee:	11 88       	ld.ub	r8,r8[0x0]
8000a7f0:	e0 48 00 53 	cp.w	r8,83
8000a7f4:	c3 d0       	breq	8000a86e <service_ecdbg_input+0x182>
8000a7f6:	e0 89 00 09 	brgt	8000a808 <service_ecdbg_input+0x11c>
8000a7fa:	e0 48 00 44 	cp.w	r8,68
8000a7fe:	c2 b0       	breq	8000a854 <service_ecdbg_input+0x168>
8000a800:	e0 48 00 48 	cp.w	r8,72
8000a804:	c0 c0       	breq	8000a81c <service_ecdbg_input+0x130>
				case 's':
					show_sw_version();
					show_chassis_status_info();
					show_chassis_sysErr();
					show_chassis_all_LED_boards();
					show_help_and_prompt();
8000a806:	cc 88       	rjmp	8000a996 <service_ecdbg_input+0x2aa>
	usart_putchar(ECDBG_USART, rx_char);
	if (rx_char == '\r')
	{ 
		if (cmdIdx == 2)
		{
			switch(cmd[0])
8000a808:	e0 48 00 68 	cp.w	r8,104
8000a80c:	c0 80       	breq	8000a81c <service_ecdbg_input+0x130>
8000a80e:	e0 48 00 73 	cp.w	r8,115
8000a812:	c2 e0       	breq	8000a86e <service_ecdbg_input+0x182>
8000a814:	e0 48 00 64 	cp.w	r8,100
8000a818:	c1 e0       	breq	8000a854 <service_ecdbg_input+0x168>
				case 's':
					show_sw_version();
					show_chassis_status_info();
					show_chassis_sysErr();
					show_chassis_all_LED_boards();
					show_help_and_prompt();
8000a81a:	cb e8       	rjmp	8000a996 <service_ecdbg_input+0x2aa>
		{
			switch(cmd[0])
			{
				case 'H':
				case 'h':
					print_ecdbg("\r\n**-----------------**\r\n");
8000a81c:	4f 0c       	lddpc	r12,8000a9dc <service_ecdbg_input+0x2f0>
8000a81e:	f0 1f 00 71 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
					print_ecdbg("  Electroclave HELP\r\n");
8000a822:	4f 1c       	lddpc	r12,8000a9e4 <service_ecdbg_input+0x2f8>
8000a824:	f0 1f 00 6f 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
					print_ecdbg("**-----------------**\r\n");
8000a828:	4f 0c       	lddpc	r12,8000a9e8 <service_ecdbg_input+0x2fc>
8000a82a:	f0 1f 00 6e 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
					print_ecdbg("    H        - This help menu\r\n");
8000a82e:	4f 0c       	lddpc	r12,8000a9ec <service_ecdbg_input+0x300>
8000a830:	f0 1f 00 6c 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
					print_ecdbg("    D        - Show current DTE setting\r\n");
8000a834:	4e fc       	lddpc	r12,8000a9f0 <service_ecdbg_input+0x304>
8000a836:	f0 1f 00 6b 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
					print_ecdbg("    D  xx    - Change initial DTE to xx minutes where 2 >= xx >= 59.\r\n");
8000a83a:	4e fc       	lddpc	r12,8000a9f4 <service_ecdbg_input+0x308>
8000a83c:	f0 1f 00 69 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
					print_ecdbg("    S        - System status\r\n");
8000a840:	4e ec       	lddpc	r12,8000a9f8 <service_ecdbg_input+0x30c>
8000a842:	f0 1f 00 68 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
					print_ecdbg("**-----------------**\r\n");
8000a846:	4e 9c       	lddpc	r12,8000a9e8 <service_ecdbg_input+0x2fc>
8000a848:	f0 1f 00 66 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
					print_ecdbg(">");
8000a84c:	4e cc       	lddpc	r12,8000a9fc <service_ecdbg_input+0x310>
8000a84e:	f0 1f 00 65 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
					break;
8000a852:	ca 28       	rjmp	8000a996 <service_ecdbg_input+0x2aa>
				case 'D':
				case 'd':
					print_ecdbg("Initial DTE set to: ");
8000a854:	4e bc       	lddpc	r12,8000aa00 <service_ecdbg_input+0x314>
8000a856:	f0 1f 00 63 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
					print_ecdbg_num(c.initialDTE);
8000a85a:	4e b8       	lddpc	r8,8000aa04 <service_ecdbg_input+0x318>
8000a85c:	11 88       	ld.ub	r8,r8[0x0]
8000a85e:	10 9c       	mov	r12,r8
8000a860:	f0 1f 00 6a 	mcall	8000aa08 <service_ecdbg_input+0x31c>
					print_ecdbg(" minutes.\r\n>");
8000a864:	4e ac       	lddpc	r12,8000aa0c <service_ecdbg_input+0x320>
8000a866:	f0 1f 00 5f 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
					break;
8000a86a:	d7 03       	nop
8000a86c:	c9 58       	rjmp	8000a996 <service_ecdbg_input+0x2aa>
				case 'S':
				case 's':
					show_sw_version();
8000a86e:	f0 1f 00 69 	mcall	8000aa10 <service_ecdbg_input+0x324>
					show_chassis_status_info();
8000a872:	f0 1f 00 69 	mcall	8000aa14 <service_ecdbg_input+0x328>
					show_chassis_sysErr();
8000a876:	f0 1f 00 69 	mcall	8000aa18 <service_ecdbg_input+0x32c>
					show_chassis_all_LED_boards();
8000a87a:	f0 1f 00 69 	mcall	8000aa1c <service_ecdbg_input+0x330>
					show_help_and_prompt();
8000a87e:	f0 1f 00 69 	mcall	8000aa20 <service_ecdbg_input+0x334>
8000a882:	c8 a8       	rjmp	8000a996 <service_ecdbg_input+0x2aa>
					break;
			}
		}
		else if (cmd[1] == ' ')
8000a884:	4d 48       	lddpc	r8,8000a9d4 <service_ecdbg_input+0x2e8>
8000a886:	11 99       	ld.ub	r9,r8[0x1]
8000a888:	32 08       	mov	r8,32
8000a88a:	f0 09 18 00 	cp.b	r9,r8
8000a88e:	e0 81 00 84 	brne	8000a996 <service_ecdbg_input+0x2aa>
		{
			if ((cmd[0] == 'D') || (cmd[0] == 'd'))
8000a892:	4d 18       	lddpc	r8,8000a9d4 <service_ecdbg_input+0x2e8>
8000a894:	11 89       	ld.ub	r9,r8[0x0]
8000a896:	34 48       	mov	r8,68
8000a898:	f0 09 18 00 	cp.b	r9,r8
8000a89c:	c0 70       	breq	8000a8aa <service_ecdbg_input+0x1be>
8000a89e:	4c e8       	lddpc	r8,8000a9d4 <service_ecdbg_input+0x2e8>
8000a8a0:	11 89       	ld.ub	r9,r8[0x0]
8000a8a2:	36 48       	mov	r8,100
8000a8a4:	f0 09 18 00 	cp.b	r9,r8
8000a8a8:	c7 71       	brne	8000a996 <service_ecdbg_input+0x2aa>
			{
				if (cmdIdx == 4)
8000a8aa:	4c a8       	lddpc	r8,8000a9d0 <service_ecdbg_input+0x2e4>
8000a8ac:	11 89       	ld.ub	r9,r8[0x0]
8000a8ae:	30 48       	mov	r8,4
8000a8b0:	f0 09 18 00 	cp.b	r9,r8
8000a8b4:	c1 41       	brne	8000a8dc <service_ecdbg_input+0x1f0>
				{
					if (isdigit(cmd[2]))
8000a8b6:	4d c8       	lddpc	r8,8000aa24 <service_ecdbg_input+0x338>
8000a8b8:	70 09       	ld.w	r9,r8[0x0]
8000a8ba:	4c 78       	lddpc	r8,8000a9d4 <service_ecdbg_input+0x2e8>
8000a8bc:	11 a8       	ld.ub	r8,r8[0x2]
8000a8be:	f2 08 00 08 	add	r8,r9,r8
8000a8c2:	11 88       	ld.ub	r8,r8[0x0]
8000a8c4:	e2 18 00 04 	andl	r8,0x4,COH
8000a8c8:	c3 c0       	breq	8000a940 <service_ecdbg_input+0x254>
					{
						tmpNewDte = cmd[2] - 0x30;
8000a8ca:	4c 38       	lddpc	r8,8000a9d4 <service_ecdbg_input+0x2e8>
8000a8cc:	11 a8       	ld.ub	r8,r8[0x2]
8000a8ce:	23 08       	sub	r8,48
8000a8d0:	ef 48 ff f8 	st.w	r7[-8],r8
						tryToChangeDte = 1;
8000a8d4:	30 18       	mov	r8,1
8000a8d6:	ef 68 ff ff 	st.b	r7[-1],r8
8000a8da:	c3 38       	rjmp	8000a940 <service_ecdbg_input+0x254>
					}					
				}
				else if (cmdIdx == 5)
8000a8dc:	4b d8       	lddpc	r8,8000a9d0 <service_ecdbg_input+0x2e4>
8000a8de:	11 89       	ld.ub	r9,r8[0x0]
8000a8e0:	30 58       	mov	r8,5
8000a8e2:	f0 09 18 00 	cp.b	r9,r8
8000a8e6:	c2 d1       	brne	8000a940 <service_ecdbg_input+0x254>
				{
					if (isdigit(cmd[2]) && (isdigit(cmd[3])))
8000a8e8:	4c f8       	lddpc	r8,8000aa24 <service_ecdbg_input+0x338>
8000a8ea:	70 09       	ld.w	r9,r8[0x0]
8000a8ec:	4b a8       	lddpc	r8,8000a9d4 <service_ecdbg_input+0x2e8>
8000a8ee:	11 a8       	ld.ub	r8,r8[0x2]
8000a8f0:	f2 08 00 08 	add	r8,r9,r8
8000a8f4:	11 88       	ld.ub	r8,r8[0x0]
8000a8f6:	e2 18 00 04 	andl	r8,0x4,COH
8000a8fa:	c2 30       	breq	8000a940 <service_ecdbg_input+0x254>
8000a8fc:	4c a8       	lddpc	r8,8000aa24 <service_ecdbg_input+0x338>
8000a8fe:	70 09       	ld.w	r9,r8[0x0]
8000a900:	4b 58       	lddpc	r8,8000a9d4 <service_ecdbg_input+0x2e8>
8000a902:	11 b8       	ld.ub	r8,r8[0x3]
8000a904:	f2 08 00 08 	add	r8,r9,r8
8000a908:	11 88       	ld.ub	r8,r8[0x0]
8000a90a:	e2 18 00 04 	andl	r8,0x4,COH
8000a90e:	c1 90       	breq	8000a940 <service_ecdbg_input+0x254>
					{
						tmpNewDte = (cmd[2]-0x30) * 10;
8000a910:	4b 18       	lddpc	r8,8000a9d4 <service_ecdbg_input+0x2e8>
8000a912:	11 a8       	ld.ub	r8,r8[0x2]
8000a914:	10 99       	mov	r9,r8
8000a916:	12 98       	mov	r8,r9
8000a918:	a3 68       	lsl	r8,0x2
8000a91a:	12 08       	add	r8,r9
8000a91c:	a1 78       	lsl	r8,0x1
8000a91e:	f0 c8 01 e0 	sub	r8,r8,480
8000a922:	ef 48 ff f8 	st.w	r7[-8],r8
						tmpNewDte += (cmd[3] - 0x30);
8000a926:	4a c8       	lddpc	r8,8000a9d4 <service_ecdbg_input+0x2e8>
8000a928:	11 b8       	ld.ub	r8,r8[0x3]
8000a92a:	10 99       	mov	r9,r8
8000a92c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a930:	f2 08 00 08 	add	r8,r9,r8
8000a934:	23 08       	sub	r8,48
8000a936:	ef 48 ff f8 	st.w	r7[-8],r8
						tryToChangeDte = 1;
8000a93a:	30 18       	mov	r8,1
8000a93c:	ef 68 ff ff 	st.b	r7[-1],r8
					}
				}
				if (tryToChangeDte)
8000a940:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a944:	30 08       	mov	r8,0
8000a946:	f0 09 18 00 	cp.b	r9,r8
8000a94a:	c2 60       	breq	8000a996 <service_ecdbg_input+0x2aa>
				{
					if ((tmpNewDte < 60) && (tmpNewDte > 1))
8000a94c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a950:	e0 48 00 3b 	cp.w	r8,59
8000a954:	e0 8b 00 1b 	brhi	8000a98a <service_ecdbg_input+0x29e>
8000a958:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a95c:	58 18       	cp.w	r8,1
8000a95e:	e0 88 00 16 	brls	8000a98a <service_ecdbg_input+0x29e>
					{
						print_ecdbg("Initial DTE now set to: ");
8000a962:	4b 2c       	lddpc	r12,8000aa28 <service_ecdbg_input+0x33c>
8000a964:	f0 1f 00 1f 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
						print_ecdbg_num(tmpNewDte);
8000a968:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a96c:	f0 1f 00 27 	mcall	8000aa08 <service_ecdbg_input+0x31c>
						print_ecdbg("\r\n>");
8000a970:	4a fc       	lddpc	r12,8000aa2c <service_ecdbg_input+0x340>
8000a972:	f0 1f 00 1c 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
						
						c.initialDTE = tmpNewDte;
8000a976:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a97a:	5c 58       	castu.b	r8
8000a97c:	4a 29       	lddpc	r9,8000aa04 <service_ecdbg_input+0x318>
8000a97e:	b2 88       	st.b	r9[0x0],r8
						
						store_config();
8000a980:	f0 1f 00 2c 	mcall	8000aa30 <service_ecdbg_input+0x344>
						store_config(); //do this twice to store it in both buffers to make extra sure we got it
8000a984:	f0 1f 00 2b 	mcall	8000aa30 <service_ecdbg_input+0x344>
						tryToChangeDte = 1;
					}
				}
				if (tryToChangeDte)
				{
					if ((tmpNewDte < 60) && (tmpNewDte > 1))
8000a988:	c0 78       	rjmp	8000a996 <service_ecdbg_input+0x2aa>
						store_config(); //do this twice to store it in both buffers to make extra sure we got it
						
					}
					else
					{
						print_ecdbg("Error. Initial DTE not modified. \r\n");
8000a98a:	4a bc       	lddpc	r12,8000aa34 <service_ecdbg_input+0x348>
8000a98c:	f0 1f 00 15 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
						print_ecdbg("Must be a value between 2 and 59.\r\n>");
8000a990:	4a ac       	lddpc	r12,8000aa38 <service_ecdbg_input+0x34c>
8000a992:	f0 1f 00 14 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
				}
			}
		}
		
		// Add a LF and consider this as the end of the line.
		print_ecdbg("\r\n>");
8000a996:	4a 6c       	lddpc	r12,8000aa2c <service_ecdbg_input+0x340>
8000a998:	f0 1f 00 12 	mcall	8000a9e0 <service_ecdbg_input+0x2f4>
		cmdIdx = 0;
8000a99c:	48 d9       	lddpc	r9,8000a9d0 <service_ecdbg_input+0x2e4>
8000a99e:	30 08       	mov	r8,0
8000a9a0:	b2 88       	st.b	r9[0x0],r8
		return;
8000a9a2:	d7 03       	nop
8000a9a4:	c1 08       	rjmp	8000a9c4 <service_ecdbg_input+0x2d8>
	unsigned int tmpNewDte;
	unsigned char tryToChangeDte = 0;

	if (usart_read_char(ECDBG_USART, &rx_char) != USART_SUCCESS)
	{
		return;
8000a9a6:	d7 03       	nop
8000a9a8:	c0 e8       	rjmp	8000a9c4 <service_ecdbg_input+0x2d8>
	}

	if (rx_char == USART_FAILURE)
	{
//26may15 why are we getting this? ignore for now		usart_write_line(ECDBG_USART, "UART error\r\n");
		return;
8000a9aa:	d7 03       	nop
8000a9ac:	c0 c8       	rjmp	8000a9c4 <service_ecdbg_input+0x2d8>
	}
	if (rx_char == '\x03')
	{
		return;
8000a9ae:	d7 03       	nop
8000a9b0:	c0 a8       	rjmp	8000a9c4 <service_ecdbg_input+0x2d8>
	}
	
	if ((rx_char < 0x0a) || (rx_char > 0x7a))
	{
		return; //completely out of range, ignore
8000a9b2:	d7 03       	nop
8000a9b4:	c0 88       	rjmp	8000a9c4 <service_ecdbg_input+0x2d8>
8000a9b6:	d7 03       	nop
8000a9b8:	c0 68       	rjmp	8000a9c4 <service_ecdbg_input+0x2d8>
			return; //TODO: this is kludgey...whenever we print to the debug port we rx a 'P' (0x50), just ignore them for now.
		}
	}
	else
	{
		return;
8000a9ba:	d7 03       	nop
8000a9bc:	c0 48       	rjmp	8000a9c4 <service_ecdbg_input+0x2d8>
8000a9be:	d7 03       	nop
8000a9c0:	c0 28       	rjmp	8000a9c4 <service_ecdbg_input+0x2d8>
		((rx_char >= 0x41) && (rx_char <= 0x5a)) ||		//upper case alpha
		((rx_char >= 0x61) && (rx_char <= 0x7a)))		//lower case alpha
	{
		if (rx_char == 0x50)
		{
			return; //TODO: this is kludgey...whenever we print to the debug port we rx a 'P' (0x50), just ignore them for now.
8000a9c2:	d7 03       	nop
		// Add a LF and consider this as the end of the line.
		print_ecdbg("\r\n>");
		cmdIdx = 0;
		return;
	}
}
8000a9c4:	2f dd       	sub	sp,-12
8000a9c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9ca:	00 00       	add	r0,r0
8000a9cc:	80 00       	ld.sh	r0,r0[0x0]
8000a9ce:	58 e8       	cp.w	r8,14
8000a9d0:	00 00       	add	r0,r0
8000a9d2:	07 d0       	ld.ub	r0,r3[0x5]
8000a9d4:	00 00       	add	r0,r0
8000a9d6:	0d 60       	ld.uh	r0,--r6
8000a9d8:	80 00       	ld.sh	r0,r0[0x0]
8000a9da:	58 94       	cp.w	r4,9
8000a9dc:	80 00       	ld.sh	r0,r0[0x0]
8000a9de:	6b dc       	ld.w	r12,r5[0x74]
8000a9e0:	80 00       	ld.sh	r0,r0[0x0]
8000a9e2:	33 38       	mov	r8,51
8000a9e4:	80 00       	ld.sh	r0,r0[0x0]
8000a9e6:	6b f8       	ld.w	r8,r5[0x7c]
8000a9e8:	80 00       	ld.sh	r0,r0[0x0]
8000a9ea:	6c 10       	ld.w	r0,r6[0x4]
8000a9ec:	80 00       	ld.sh	r0,r0[0x0]
8000a9ee:	6c 28       	ld.w	r8,r6[0x8]
8000a9f0:	80 00       	ld.sh	r0,r0[0x0]
8000a9f2:	6c 48       	ld.w	r8,r6[0x10]
8000a9f4:	80 00       	ld.sh	r0,r0[0x0]
8000a9f6:	6c 74       	ld.w	r4,r6[0x1c]
8000a9f8:	80 00       	ld.sh	r0,r0[0x0]
8000a9fa:	6c bc       	ld.w	r12,r6[0x2c]
8000a9fc:	80 00       	ld.sh	r0,r0[0x0]
8000a9fe:	6c dc       	ld.w	r12,r6[0x34]
8000aa00:	80 00       	ld.sh	r0,r0[0x0]
8000aa02:	6c e0       	ld.w	r0,r6[0x38]
8000aa04:	00 00       	add	r0,r0
8000aa06:	0b f4       	ld.ub	r4,r5[0x7]
8000aa08:	80 00       	ld.sh	r0,r0[0x0]
8000aa0a:	72 90       	ld.w	r0,r9[0x24]
8000aa0c:	80 00       	ld.sh	r0,r0[0x0]
8000aa0e:	6c f8       	ld.w	r8,r6[0x3c]
8000aa10:	80 00       	ld.sh	r0,r0[0x0]
8000aa12:	9d 40       	st.w	lr[0x10],r0
8000aa14:	80 00       	ld.sh	r0,r0[0x0]
8000aa16:	9d 64       	st.w	lr[0x18],r4
8000aa18:	80 00       	ld.sh	r0,r0[0x0]
8000aa1a:	a1 e4       	*unknown*
8000aa1c:	80 00       	ld.sh	r0,r0[0x0]
8000aa1e:	a5 90       	lsr	r0,0x5
8000aa20:	80 00       	ld.sh	r0,r0[0x0]
8000aa22:	a6 d4       	st.b	r3[0x5],r4
8000aa24:	00 00       	add	r0,r0
8000aa26:	00 b4       	st.h	r0++,r4
8000aa28:	80 00       	ld.sh	r0,r0[0x0]
8000aa2a:	6d 08       	ld.w	r8,r6[0x40]
8000aa2c:	80 00       	ld.sh	r0,r0[0x0]
8000aa2e:	6d 24       	ld.w	r4,r6[0x48]
8000aa30:	80 00       	ld.sh	r0,r0[0x0]
8000aa32:	95 10       	st.w	r10[0x4],r0
8000aa34:	80 00       	ld.sh	r0,r0[0x0]
8000aa36:	6d 28       	ld.w	r8,r6[0x48]
8000aa38:	80 00       	ld.sh	r0,r0[0x0]
8000aa3a:	6d 4c       	ld.w	r12,r6[0x50]

8000aa3c <main>:

/*! \brief Main File Section:
 *          - Initialization (CPU, TWI, Usart,...)
 */
int main(void)
{
8000aa3c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000aa40:	1a 97       	mov	r7,sp
8000aa42:	fa cd 02 10 	sub	sp,sp,528
	static unsigned char displayIdx = 0;
	
	// Initialize System Clock
	init_sys_clocks();
8000aa46:	f0 1f 04 6c 	mcall	8000bbf4 <main+0x11b8>

	init_io();
8000aa4a:	f0 1f 04 6c 	mcall	8000bbf8 <main+0x11bc>
	
	init_sysErr();
8000aa4e:	f0 1f 04 6c 	mcall	8000bbfc <main+0x11c0>
	
	init_shelf_n_ledBrd_structs();
8000aa52:	f0 1f 04 6c 	mcall	8000bc00 <main+0x11c4>
	read_led_board_serial_ids();
8000aa56:	f0 1f 04 6c 	mcall	8000bc04 <main+0x11c8>
		


	//Set clock to 8MHz. We start at 100MHz to get through the DS2411 LED board serial ID detection. But we don't need to run that fast for remaining operations.
	osc_enable(OSC_ID_RC8M);
8000aa5a:	30 2c       	mov	r12,2
8000aa5c:	f0 1f 04 6b 	mcall	8000bc08 <main+0x11cc>
	osc_wait_ready(OSC_ID_RC8M);
8000aa60:	30 2c       	mov	r12,2
8000aa62:	f0 1f 04 6b 	mcall	8000bc0c <main+0x11d0>
	sysclk_set_source(SYSCLK_SRC_RC8M);
8000aa66:	30 5c       	mov	r12,5
8000aa68:	f0 1f 04 6a 	mcall	8000bc10 <main+0x11d4>
	sysclk_set_prescalers(0,0,0,0);
8000aa6c:	30 09       	mov	r9,0
8000aa6e:	30 0a       	mov	r10,0
8000aa70:	30 0b       	mov	r11,0
8000aa72:	30 0c       	mov	r12,0
8000aa74:	f0 1f 04 68 	mcall	8000bc14 <main+0x11d8>
	pll_disable(0);
8000aa78:	30 0c       	mov	r12,0
8000aa7a:	f0 1f 04 68 	mcall	8000bc18 <main+0x11dc>



	// Initialize USART again after changing the system clock
	init_ecdbg_rs232(FPBA_HZ);
8000aa7e:	e0 6c 12 00 	mov	r12,4608
8000aa82:	ea 1c 00 7a 	orh	r12,0x7a
8000aa86:	f0 1f 04 66 	mcall	8000bc1c <main+0x11e0>
	init_display_rs232(FPBA_HZ);
8000aa8a:	e0 6c 12 00 	mov	r12,4608
8000aa8e:	ea 1c 00 7a 	orh	r12,0x7a
8000aa92:	f0 1f 04 64 	mcall	8000bc20 <main+0x11e4>
	
	show_sw_version();
8000aa96:	f0 1f 04 64 	mcall	8000bc24 <main+0x11e8>

	// Print Startup Message
	display_text(IDX_READY);
8000aa9a:	30 0c       	mov	r12,0
8000aa9c:	f0 1f 04 63 	mcall	8000bc28 <main+0x11ec>
	
	// Initialize ADC for bluesense channels which are used to see if there are any devices (phones, tablets, etc.) on the shelves
	adc_process_init();
8000aaa0:	f0 1f 04 63 	mcall	8000bc2c <main+0x11f0>

	
	// Initialize Interrupts
	irq_initialize_vectors(); //TODO: probably remove 5apr15
8000aaa4:	f0 1f 04 63 	mcall	8000bc30 <main+0x11f4>

	cpu_irq_enable();
8000aaa8:	d5 03       	csrf	0x10


	
	// Initialize TWI Interface
	twi_init();
8000aaaa:	f0 1f 04 63 	mcall	8000bc34 <main+0x11f8>

	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level
8000aaae:	31 6c       	mov	r12,22
8000aab0:	f0 1f 04 62 	mcall	8000bc38 <main+0x11fc>

	PCA9952_init();
8000aab4:	f0 1f 04 62 	mcall	8000bc3c <main+0x1200>
	test_led_driver_channels();
8000aab8:	f0 1f 04 62 	mcall	8000bc40 <main+0x1204>
	
	
	electroclaveState = STATE_EC_IDLE;
8000aabc:	fe f9 11 88 	ld.w	r9,pc[4488]
8000aac0:	30 08       	mov	r8,0
8000aac2:	b2 88       	st.b	r9[0x0],r8
	
	init_led_board_info();
8000aac4:	f0 1f 04 61 	mcall	8000bc48 <main+0x120c>

	show_chassis_status_info();
8000aac8:	f0 1f 04 61 	mcall	8000bc4c <main+0x1210>
	show_chassis_sysErr();
8000aacc:	f0 1f 04 61 	mcall	8000bc50 <main+0x1214>
	show_chassis_all_LED_boards();
8000aad0:	f0 1f 04 61 	mcall	8000bc54 <main+0x1218>
	show_help_and_prompt();
8000aad4:	f0 1f 04 61 	mcall	8000bc58 <main+0x121c>
	
	gpio_set_pin_low(ECLAVE_LED_OEn); //...and we are live!
8000aad8:	31 6c       	mov	r12,22
8000aada:	f0 1f 04 61 	mcall	8000bc5c <main+0x1220>
	gpio_set_pin_low(ECLAVE_PSUPPLY_ONn); //turn the leds on first and then the power supply
8000aade:	31 7c       	mov	r12,23
8000aae0:	f0 1f 04 5f 	mcall	8000bc5c <main+0x1220>
8000aae4:	e0 68 03 e8 	mov	r8,1000
8000aae8:	ef 48 fe d0 	st.w	r7[-304],r8
8000aaec:	e0 68 12 00 	mov	r8,4608
8000aaf0:	ea 18 00 7a 	orh	r8,0x7a
8000aaf4:	ef 48 fe cc 	st.w	r7[-308],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000aaf8:	ee f0 fe d0 	ld.w	r0,r7[-304]
8000aafc:	30 01       	mov	r1,0
8000aafe:	ee f2 fe cc 	ld.w	r2,r7[-308]
8000ab02:	30 03       	mov	r3,0
8000ab04:	e2 02 02 49 	mul	r9,r1,r2
8000ab08:	e6 00 02 48 	mul	r8,r3,r0
8000ab0c:	10 09       	add	r9,r8
8000ab0e:	e0 02 06 4a 	mulu.d	r10,r0,r2
8000ab12:	16 09       	add	r9,r11
8000ab14:	12 9b       	mov	r11,r9
8000ab16:	e0 68 03 e7 	mov	r8,999
8000ab1a:	30 09       	mov	r9,0
8000ab1c:	10 0a       	add	r10,r8
8000ab1e:	f6 09 00 4b 	adc	r11,r11,r9
8000ab22:	e0 68 03 e8 	mov	r8,1000
8000ab26:	30 09       	mov	r9,0
8000ab28:	f0 1f 04 4e 	mcall	8000bc60 <main+0x1224>
8000ab2c:	14 98       	mov	r8,r10
8000ab2e:	16 99       	mov	r9,r11
	
	cpu_set_timeout(EC_ONE_SECOND/2, &debugTimer);
8000ab30:	a1 98       	lsr	r8,0x1
8000ab32:	ef 48 fe d8 	st.w	r7[-296],r8
8000ab36:	fe f8 11 2e 	ld.w	r8,pc[4398]
8000ab3a:	ef 48 fe d4 	st.w	r7[-300],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000ab3e:	e1 b8 00 42 	mfsr	r8,0x108
8000ab42:	10 99       	mov	r9,r8
8000ab44:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000ab48:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000ab4a:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000ab4e:	70 09       	ld.w	r9,r8[0x0]
8000ab50:	ee f8 fe d8 	ld.w	r8,r7[-296]
8000ab54:	10 09       	add	r9,r8
8000ab56:	ee f8 fe d4 	ld.w	r8,r7[-300]
8000ab5a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000ab5c:	ee f9 fe d4 	ld.w	r9,r7[-300]
8000ab60:	30 08       	mov	r8,0
8000ab62:	f3 68 00 08 	st.b	r9[8],r8


	// Main loop
	while (true) 
	{
		switch(electroclaveState)
8000ab66:	fe f8 10 de 	ld.w	r8,pc[4318]
8000ab6a:	11 88       	ld.ub	r8,r8[0x0]
8000ab6c:	10 99       	mov	r9,r8
8000ab6e:	58 89       	cp.w	r9,8
8000ab70:	e0 8b 06 b5 	brhi	8000b8da <main+0xe9e>
8000ab74:	fe f8 10 f4 	ld.w	r8,pc[4340]
8000ab78:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
		{
			case STATE_EC_IDLE:
				if (EC_DOOR_LATCHED) {
8000ab7c:	33 ec       	mov	r12,62
8000ab7e:	f0 1f 04 3c 	mcall	8000bc6c <main+0x1230>
8000ab82:	18 98       	mov	r8,r12
8000ab84:	ec 18 00 01 	eorl	r8,0x1
8000ab88:	5c 58       	castu.b	r8
8000ab8a:	e0 80 06 9f 	breq	8000b8c8 <main+0xe8c>
					gpio_set_pin_low(ECLAVE_DEBUG_LED);
8000ab8e:	37 cc       	mov	r12,124
8000ab90:	f0 1f 04 33 	mcall	8000bc5c <main+0x1220>
					print_ecdbg("Door latch detected\r\n");
8000ab94:	fe fc 10 dc 	ld.w	r12,pc[4316]
8000ab98:	f0 1f 04 37 	mcall	8000bc74 <main+0x1238>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
8000ab9c:	30 0c       	mov	r12,0
8000ab9e:	f0 1f 04 23 	mcall	8000bc28 <main+0x11ec>
					electroclaveState = STATE_DOOR_LATCHED;
8000aba2:	fe f9 10 a2 	ld.w	r9,pc[4258]
8000aba6:	30 18       	mov	r8,1
8000aba8:	b2 88       	st.b	r9[0x0],r8
					firstTimeThroughDoorLatch = 1;
8000abaa:	fe f9 10 ce 	ld.w	r9,pc[4302]
8000abae:	30 18       	mov	r8,1
8000abb0:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000abb2:	e0 8f 06 94 	bral	8000b8da <main+0xe9e>
				
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
8000abb6:	33 fc       	mov	r12,63
8000abb8:	f0 1f 04 2d 	mcall	8000bc6c <main+0x1230>
8000abbc:	18 98       	mov	r8,r12
8000abbe:	58 08       	cp.w	r8,0
8000abc0:	e0 80 06 86 	breq	8000b8cc <main+0xe90>
					print_ecdbg("Action push button press detected\r\n");
8000abc4:	fe fc 10 b8 	ld.w	r12,pc[4280]
8000abc8:	f0 1f 04 2b 	mcall	8000bc74 <main+0x1238>
					electroclaveState = STATE_ACTION_PB_PRESSED;
8000abcc:	fe f9 10 78 	ld.w	r9,pc[4216]
8000abd0:	30 28       	mov	r8,2
8000abd2:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000abd4:	e0 8f 06 83 	bral	8000b8da <main+0xe9e>
				
			case STATE_ACTION_PB_PRESSED:
				if (EC_ACTION_PB)
8000abd8:	33 fc       	mov	r12,63
8000abda:	f0 1f 04 25 	mcall	8000bc6c <main+0x1230>
8000abde:	18 98       	mov	r8,r12
8000abe0:	ec 18 00 01 	eorl	r8,0x1
8000abe4:	5c 58       	castu.b	r8
8000abe6:	e0 80 06 75 	breq	8000b8d0 <main+0xe94>
				{
					print_ecdbg("Action push button release detected\r\n");
8000abea:	fe fc 10 96 	ld.w	r12,pc[4246]
8000abee:	f0 1f 04 22 	mcall	8000bc74 <main+0x1238>
					electroclaveState = STATE_ACTION_PB_RELEASED;	
8000abf2:	fe f9 10 52 	ld.w	r9,pc[4178]
8000abf6:	30 38       	mov	r8,3
8000abf8:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000abfa:	e0 8f 06 70 	bral	8000b8da <main+0xe9e>
				
			case STATE_ACTION_PB_RELEASED:
				check_led_brd_side_lifetimes();
8000abfe:	f0 1f 04 22 	mcall	8000bc84 <main+0x1248>
				check_shelves_for_devices();
8000ac02:	f0 1f 04 22 	mcall	8000bc88 <main+0x124c>
				set_shelves_active_inactive();
8000ac06:	f0 1f 04 22 	mcall	8000bc8c <main+0x1250>
				
				if (num_active_shelves() != 0) {
8000ac0a:	f0 1f 04 22 	mcall	8000bc90 <main+0x1254>
8000ac0e:	18 98       	mov	r8,r12
8000ac10:	58 08       	cp.w	r8,0
8000ac12:	e0 80 01 72 	breq	8000aef6 <main+0x4ba>
					electroclaveState = STATE_START_SANITIZE;
8000ac16:	fe f9 10 2e 	ld.w	r9,pc[4142]
8000ac1a:	30 48       	mov	r8,4
8000ac1c:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("Start sanitizing\r\n");
8000ac1e:	fe fc 10 76 	ld.w	r12,pc[4214]
8000ac22:	f0 1f 04 15 	mcall	8000bc74 <main+0x1238>
					display_text(IDX_CLEAR);
8000ac26:	30 9c       	mov	r12,9
8000ac28:	f0 1f 04 00 	mcall	8000bc28 <main+0x11ec>
8000ac2c:	e0 68 01 f4 	mov	r8,500
8000ac30:	ef 48 fe e0 	st.w	r7[-288],r8
8000ac34:	e0 68 12 00 	mov	r8,4608
8000ac38:	ea 18 00 7a 	orh	r8,0x7a
8000ac3c:	ef 48 fe dc 	st.w	r7[-292],r8
8000ac40:	ee f8 fe e0 	ld.w	r8,r7[-288]
8000ac44:	ef 48 fe e8 	st.w	r7[-280],r8
8000ac48:	ee f8 fe dc 	ld.w	r8,r7[-292]
8000ac4c:	ef 48 fe e4 	st.w	r7[-284],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000ac50:	ee fc fe e8 	ld.w	r12,r7[-280]
8000ac54:	ef 4c fd fc 	st.w	r7[-516],r12
8000ac58:	30 0a       	mov	r10,0
8000ac5a:	ef 4a fd f8 	st.w	r7[-520],r10
8000ac5e:	ee f8 fe e4 	ld.w	r8,r7[-284]
8000ac62:	ef 48 fd f4 	st.w	r7[-524],r8
8000ac66:	30 0c       	mov	r12,0
8000ac68:	ef 4c fd f0 	st.w	r7[-528],r12
8000ac6c:	ee f9 fd f8 	ld.w	r9,r7[-520]
8000ac70:	ee fa fd f4 	ld.w	r10,r7[-524]
8000ac74:	b5 39       	mul	r9,r10
8000ac76:	ee f8 fd f0 	ld.w	r8,r7[-528]
8000ac7a:	ee fc fd fc 	ld.w	r12,r7[-516]
8000ac7e:	b9 38       	mul	r8,r12
8000ac80:	10 09       	add	r9,r8
8000ac82:	ee f8 fd fc 	ld.w	r8,r7[-516]
8000ac86:	ee fc fd f4 	ld.w	r12,r7[-524]
8000ac8a:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000ac8e:	16 09       	add	r9,r11
8000ac90:	12 9b       	mov	r11,r9
8000ac92:	e0 68 03 e7 	mov	r8,999
8000ac96:	30 09       	mov	r9,0
8000ac98:	10 0a       	add	r10,r8
8000ac9a:	f6 09 00 4b 	adc	r11,r11,r9
8000ac9e:	e0 68 03 e8 	mov	r8,1000
8000aca2:	30 09       	mov	r9,0
8000aca4:	f0 1f 03 ef 	mcall	8000bc60 <main+0x1224>
8000aca8:	14 98       	mov	r8,r10
8000acaa:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000acac:	ef 48 fe f0 	st.w	r7[-272],r8
8000acb0:	ee c8 01 70 	sub	r8,r7,368
8000acb4:	ef 48 fe ec 	st.w	r7[-276],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000acb8:	e1 b8 00 42 	mfsr	r8,0x108
8000acbc:	10 99       	mov	r9,r8
8000acbe:	ee f8 fe ec 	ld.w	r8,r7[-276]
8000acc2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000acc4:	ee f8 fe ec 	ld.w	r8,r7[-276]
8000acc8:	70 09       	ld.w	r9,r8[0x0]
8000acca:	ee f8 fe f0 	ld.w	r8,r7[-272]
8000acce:	10 09       	add	r9,r8
8000acd0:	ee f8 fe ec 	ld.w	r8,r7[-276]
8000acd4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000acd6:	ee f9 fe ec 	ld.w	r9,r7[-276]
8000acda:	30 08       	mov	r8,0
8000acdc:	f3 68 00 08 	st.b	r9[8],r8
8000ace0:	ee c8 01 70 	sub	r8,r7,368
8000ace4:	ef 48 fe f4 	st.w	r7[-268],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000ace8:	e1 b8 00 42 	mfsr	r8,0x108
8000acec:	ef 48 fe f8 	st.w	r7[-264],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000acf0:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000acf4:	f1 39 00 08 	ld.ub	r9,r8[8]
8000acf8:	30 28       	mov	r8,2
8000acfa:	f0 09 18 00 	cp.b	r9,r8
8000acfe:	c0 31       	brne	8000ad04 <main+0x2c8>
    return false;
8000ad00:	30 08       	mov	r8,0
8000ad02:	c4 38       	rjmp	8000ad88 <main+0x34c>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000ad04:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000ad08:	f1 39 00 08 	ld.ub	r9,r8[8]
8000ad0c:	30 18       	mov	r8,1
8000ad0e:	f0 09 18 00 	cp.b	r9,r8
8000ad12:	c0 31       	brne	8000ad18 <main+0x2dc>
    return true;
8000ad14:	30 18       	mov	r8,1
8000ad16:	c3 98       	rjmp	8000ad88 <main+0x34c>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000ad18:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000ad1c:	70 09       	ld.w	r9,r8[0x0]
8000ad1e:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000ad22:	70 18       	ld.w	r8,r8[0x4]
8000ad24:	10 39       	cp.w	r9,r8
8000ad26:	e0 88 00 1a 	brls	8000ad5a <main+0x31e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000ad2a:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000ad2e:	70 09       	ld.w	r9,r8[0x0]
8000ad30:	ee f8 fe f8 	ld.w	r8,r7[-264]
8000ad34:	12 38       	cp.w	r8,r9
8000ad36:	c1 02       	brcc	8000ad56 <main+0x31a>
8000ad38:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000ad3c:	70 19       	ld.w	r9,r8[0x4]
8000ad3e:	ee f8 fe f8 	ld.w	r8,r7[-264]
8000ad42:	12 38       	cp.w	r8,r9
8000ad44:	e0 88 00 09 	brls	8000ad56 <main+0x31a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000ad48:	ee f9 fe f4 	ld.w	r9,r7[-268]
8000ad4c:	30 18       	mov	r8,1
8000ad4e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000ad52:	30 18       	mov	r8,1
8000ad54:	c1 a8       	rjmp	8000ad88 <main+0x34c>
    }
    return false;
8000ad56:	30 08       	mov	r8,0
8000ad58:	c1 88       	rjmp	8000ad88 <main+0x34c>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000ad5a:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000ad5e:	70 09       	ld.w	r9,r8[0x0]
8000ad60:	ee f8 fe f8 	ld.w	r8,r7[-264]
8000ad64:	12 38       	cp.w	r8,r9
8000ad66:	c0 93       	brcs	8000ad78 <main+0x33c>
8000ad68:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000ad6c:	70 19       	ld.w	r9,r8[0x4]
8000ad6e:	ee f8 fe f8 	ld.w	r8,r7[-264]
8000ad72:	12 38       	cp.w	r8,r9
8000ad74:	e0 88 00 09 	brls	8000ad86 <main+0x34a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000ad78:	ee f9 fe f4 	ld.w	r9,r7[-268]
8000ad7c:	30 18       	mov	r8,1
8000ad7e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000ad82:	30 18       	mov	r8,1
8000ad84:	c0 28       	rjmp	8000ad88 <main+0x34c>
    }
    return false;
8000ad86:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000ad88:	58 08       	cp.w	r8,0
8000ad8a:	ca b0       	breq	8000ace0 <main+0x2a4>
					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
8000ad8c:	30 2c       	mov	r12,2
8000ad8e:	f0 1f 03 a7 	mcall	8000bc28 <main+0x11ec>
8000ad92:	e0 68 0b b8 	mov	r8,3000
8000ad96:	ef 48 ff 00 	st.w	r7[-256],r8
8000ad9a:	e0 68 12 00 	mov	r8,4608
8000ad9e:	ea 18 00 7a 	orh	r8,0x7a
8000ada2:	ef 48 fe fc 	st.w	r7[-260],r8
8000ada6:	ee f8 ff 00 	ld.w	r8,r7[-256]
8000adaa:	ef 48 ff 08 	st.w	r7[-248],r8
8000adae:	ee f8 fe fc 	ld.w	r8,r7[-260]
8000adb2:	ef 48 ff 04 	st.w	r7[-252],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000adb6:	ee fa ff 08 	ld.w	r10,r7[-248]
8000adba:	ef 4a fe 0c 	st.w	r7[-500],r10
8000adbe:	30 08       	mov	r8,0
8000adc0:	ef 48 fe 08 	st.w	r7[-504],r8
8000adc4:	ee fc ff 04 	ld.w	r12,r7[-252]
8000adc8:	ef 4c fe 04 	st.w	r7[-508],r12
8000adcc:	30 0a       	mov	r10,0
8000adce:	ef 4a fe 00 	st.w	r7[-512],r10
8000add2:	ee f9 fe 08 	ld.w	r9,r7[-504]
8000add6:	ee f8 fe 04 	ld.w	r8,r7[-508]
8000adda:	b1 39       	mul	r9,r8
8000addc:	ee f8 fe 00 	ld.w	r8,r7[-512]
8000ade0:	ee fc fe 0c 	ld.w	r12,r7[-500]
8000ade4:	b9 38       	mul	r8,r12
8000ade6:	10 09       	add	r9,r8
8000ade8:	ee f8 fe 0c 	ld.w	r8,r7[-500]
8000adec:	ee fc fe 04 	ld.w	r12,r7[-508]
8000adf0:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000adf4:	16 09       	add	r9,r11
8000adf6:	12 9b       	mov	r11,r9
8000adf8:	e0 68 03 e7 	mov	r8,999
8000adfc:	30 09       	mov	r9,0
8000adfe:	10 0a       	add	r10,r8
8000ae00:	f6 09 00 4b 	adc	r11,r11,r9
8000ae04:	e0 68 03 e8 	mov	r8,1000
8000ae08:	30 09       	mov	r9,0
8000ae0a:	f0 1f 03 96 	mcall	8000bc60 <main+0x1224>
8000ae0e:	14 98       	mov	r8,r10
8000ae10:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000ae12:	ef 48 ff 10 	st.w	r7[-240],r8
8000ae16:	ee c8 01 64 	sub	r8,r7,356
8000ae1a:	ef 48 ff 0c 	st.w	r7[-244],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000ae1e:	e1 b8 00 42 	mfsr	r8,0x108
8000ae22:	10 99       	mov	r9,r8
8000ae24:	ee f8 ff 0c 	ld.w	r8,r7[-244]
8000ae28:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000ae2a:	ee f8 ff 0c 	ld.w	r8,r7[-244]
8000ae2e:	70 09       	ld.w	r9,r8[0x0]
8000ae30:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ae34:	10 09       	add	r9,r8
8000ae36:	ee f8 ff 0c 	ld.w	r8,r7[-244]
8000ae3a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000ae3c:	ee f9 ff 0c 	ld.w	r9,r7[-244]
8000ae40:	30 08       	mov	r8,0
8000ae42:	f3 68 00 08 	st.b	r9[8],r8
8000ae46:	ee c8 01 64 	sub	r8,r7,356
8000ae4a:	ef 48 ff 14 	st.w	r7[-236],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000ae4e:	e1 b8 00 42 	mfsr	r8,0x108
8000ae52:	ef 48 ff 18 	st.w	r7[-232],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000ae56:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000ae5a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000ae5e:	30 28       	mov	r8,2
8000ae60:	f0 09 18 00 	cp.b	r9,r8
8000ae64:	c0 31       	brne	8000ae6a <main+0x42e>
    return false;
8000ae66:	30 08       	mov	r8,0
8000ae68:	c4 38       	rjmp	8000aeee <main+0x4b2>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000ae6a:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000ae6e:	f1 39 00 08 	ld.ub	r9,r8[8]
8000ae72:	30 18       	mov	r8,1
8000ae74:	f0 09 18 00 	cp.b	r9,r8
8000ae78:	c0 31       	brne	8000ae7e <main+0x442>
    return true;
8000ae7a:	30 18       	mov	r8,1
8000ae7c:	c3 98       	rjmp	8000aeee <main+0x4b2>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000ae7e:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000ae82:	70 09       	ld.w	r9,r8[0x0]
8000ae84:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000ae88:	70 18       	ld.w	r8,r8[0x4]
8000ae8a:	10 39       	cp.w	r9,r8
8000ae8c:	e0 88 00 1a 	brls	8000aec0 <main+0x484>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000ae90:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000ae94:	70 09       	ld.w	r9,r8[0x0]
8000ae96:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ae9a:	12 38       	cp.w	r8,r9
8000ae9c:	c1 02       	brcc	8000aebc <main+0x480>
8000ae9e:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000aea2:	70 19       	ld.w	r9,r8[0x4]
8000aea4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000aea8:	12 38       	cp.w	r8,r9
8000aeaa:	e0 88 00 09 	brls	8000aebc <main+0x480>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000aeae:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000aeb2:	30 18       	mov	r8,1
8000aeb4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000aeb8:	30 18       	mov	r8,1
8000aeba:	c1 a8       	rjmp	8000aeee <main+0x4b2>
    }
    return false;
8000aebc:	30 08       	mov	r8,0
8000aebe:	c1 88       	rjmp	8000aeee <main+0x4b2>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000aec0:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000aec4:	70 09       	ld.w	r9,r8[0x0]
8000aec6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000aeca:	12 38       	cp.w	r8,r9
8000aecc:	c0 93       	brcs	8000aede <main+0x4a2>
8000aece:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000aed2:	70 19       	ld.w	r9,r8[0x4]
8000aed4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000aed8:	12 38       	cp.w	r8,r9
8000aeda:	e0 88 00 09 	brls	8000aeec <main+0x4b0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000aede:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000aee2:	30 18       	mov	r8,1
8000aee4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000aee8:	30 18       	mov	r8,1
8000aeea:	c0 28       	rjmp	8000aeee <main+0x4b2>
    }
    return false;
8000aeec:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000aeee:	58 08       	cp.w	r8,0
8000aef0:	ca b0       	breq	8000ae46 <main+0x40a>
					electroclaveState = STATE_START_CLEAN;
					print_ecdbg("No shelves, no devices or shelves are past lifetime\r\n");
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
				}
				break;
8000aef2:	e0 8f 04 f4 	bral	8000b8da <main+0xe9e>
					cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
					display_text(IDX_CLEANING);
					cpu_delay_ms(3000, EC_CPU_CLOCK_FREQ); //give display time to update, scroll all the way across
				}
				else {
					electroclaveState = STATE_START_CLEAN;
8000aef6:	fe f9 0d 4e 	ld.w	r9,pc[3406]
8000aefa:	30 68       	mov	r8,6
8000aefc:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("No shelves, no devices or shelves are past lifetime\r\n");
8000aefe:	fe fc 0d 9a 	ld.w	r12,pc[3482]
8000af02:	f0 1f 03 5d 	mcall	8000bc74 <main+0x1238>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
8000af06:	30 0c       	mov	r12,0
8000af08:	f0 1f 03 48 	mcall	8000bc28 <main+0x11ec>
				}
				break;
8000af0c:	e0 8f 04 e7 	bral	8000b8da <main+0xe9e>
				
			case STATE_START_SANITIZE:
				display_text(IDX_CLEAR);
8000af10:	30 9c       	mov	r12,9
8000af12:	f0 1f 03 46 	mcall	8000bc28 <main+0x11ec>
8000af16:	e0 68 01 f4 	mov	r8,500
8000af1a:	ef 48 ff 20 	st.w	r7[-224],r8
8000af1e:	e0 68 12 00 	mov	r8,4608
8000af22:	ea 18 00 7a 	orh	r8,0x7a
8000af26:	ef 48 ff 1c 	st.w	r7[-228],r8
8000af2a:	ee f8 ff 20 	ld.w	r8,r7[-224]
8000af2e:	ef 48 ff 28 	st.w	r7[-216],r8
8000af32:	ee f8 ff 1c 	ld.w	r8,r7[-228]
8000af36:	ef 48 ff 24 	st.w	r7[-220],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000af3a:	ee fa ff 28 	ld.w	r10,r7[-216]
8000af3e:	ef 4a fe 1c 	st.w	r7[-484],r10
8000af42:	30 08       	mov	r8,0
8000af44:	ef 48 fe 18 	st.w	r7[-488],r8
8000af48:	ee fc ff 24 	ld.w	r12,r7[-220]
8000af4c:	ef 4c fe 14 	st.w	r7[-492],r12
8000af50:	30 0a       	mov	r10,0
8000af52:	ef 4a fe 10 	st.w	r7[-496],r10
8000af56:	ee f9 fe 18 	ld.w	r9,r7[-488]
8000af5a:	ee f8 fe 14 	ld.w	r8,r7[-492]
8000af5e:	b1 39       	mul	r9,r8
8000af60:	ee f8 fe 10 	ld.w	r8,r7[-496]
8000af64:	ee fc fe 1c 	ld.w	r12,r7[-484]
8000af68:	b9 38       	mul	r8,r12
8000af6a:	10 09       	add	r9,r8
8000af6c:	ee f8 fe 1c 	ld.w	r8,r7[-484]
8000af70:	ee fc fe 14 	ld.w	r12,r7[-492]
8000af74:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000af78:	16 09       	add	r9,r11
8000af7a:	12 9b       	mov	r11,r9
8000af7c:	e0 68 03 e7 	mov	r8,999
8000af80:	30 09       	mov	r9,0
8000af82:	10 0a       	add	r10,r8
8000af84:	f6 09 00 4b 	adc	r11,r11,r9
8000af88:	e0 68 03 e8 	mov	r8,1000
8000af8c:	30 09       	mov	r9,0
8000af8e:	f0 1f 03 35 	mcall	8000bc60 <main+0x1224>
8000af92:	14 98       	mov	r8,r10
8000af94:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000af96:	ef 48 ff 30 	st.w	r7[-208],r8
8000af9a:	ee c8 01 58 	sub	r8,r7,344
8000af9e:	ef 48 ff 2c 	st.w	r7[-212],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000afa2:	e1 b8 00 42 	mfsr	r8,0x108
8000afa6:	10 99       	mov	r9,r8
8000afa8:	ee f8 ff 2c 	ld.w	r8,r7[-212]
8000afac:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000afae:	ee f8 ff 2c 	ld.w	r8,r7[-212]
8000afb2:	70 09       	ld.w	r9,r8[0x0]
8000afb4:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000afb8:	10 09       	add	r9,r8
8000afba:	ee f8 ff 2c 	ld.w	r8,r7[-212]
8000afbe:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000afc0:	ee f9 ff 2c 	ld.w	r9,r7[-212]
8000afc4:	30 08       	mov	r8,0
8000afc6:	f3 68 00 08 	st.b	r9[8],r8
8000afca:	ee c8 01 58 	sub	r8,r7,344
8000afce:	ef 48 ff 34 	st.w	r7[-204],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000afd2:	e1 b8 00 42 	mfsr	r8,0x108
8000afd6:	ef 48 ff 38 	st.w	r7[-200],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000afda:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000afde:	f1 39 00 08 	ld.ub	r9,r8[8]
8000afe2:	30 28       	mov	r8,2
8000afe4:	f0 09 18 00 	cp.b	r9,r8
8000afe8:	c0 31       	brne	8000afee <main+0x5b2>
    return false;
8000afea:	30 08       	mov	r8,0
8000afec:	c4 38       	rjmp	8000b072 <main+0x636>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000afee:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000aff2:	f1 39 00 08 	ld.ub	r9,r8[8]
8000aff6:	30 18       	mov	r8,1
8000aff8:	f0 09 18 00 	cp.b	r9,r8
8000affc:	c0 31       	brne	8000b002 <main+0x5c6>
    return true;
8000affe:	30 18       	mov	r8,1
8000b000:	c3 98       	rjmp	8000b072 <main+0x636>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b002:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000b006:	70 09       	ld.w	r9,r8[0x0]
8000b008:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000b00c:	70 18       	ld.w	r8,r8[0x4]
8000b00e:	10 39       	cp.w	r9,r8
8000b010:	e0 88 00 1a 	brls	8000b044 <main+0x608>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b014:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000b018:	70 09       	ld.w	r9,r8[0x0]
8000b01a:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000b01e:	12 38       	cp.w	r8,r9
8000b020:	c1 02       	brcc	8000b040 <main+0x604>
8000b022:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000b026:	70 19       	ld.w	r9,r8[0x4]
8000b028:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000b02c:	12 38       	cp.w	r8,r9
8000b02e:	e0 88 00 09 	brls	8000b040 <main+0x604>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b032:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000b036:	30 18       	mov	r8,1
8000b038:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b03c:	30 18       	mov	r8,1
8000b03e:	c1 a8       	rjmp	8000b072 <main+0x636>
    }
    return false;
8000b040:	30 08       	mov	r8,0
8000b042:	c1 88       	rjmp	8000b072 <main+0x636>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000b044:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000b048:	70 09       	ld.w	r9,r8[0x0]
8000b04a:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000b04e:	12 38       	cp.w	r8,r9
8000b050:	c0 93       	brcs	8000b062 <main+0x626>
8000b052:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000b056:	70 19       	ld.w	r9,r8[0x4]
8000b058:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000b05c:	12 38       	cp.w	r8,r9
8000b05e:	e0 88 00 09 	brls	8000b070 <main+0x634>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b062:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000b066:	30 18       	mov	r8,1
8000b068:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b06c:	30 18       	mov	r8,1
8000b06e:	c0 28       	rjmp	8000b072 <main+0x636>
    }
    return false;
8000b070:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000b072:	58 08       	cp.w	r8,0
8000b074:	ca b0       	breq	8000afca <main+0x58e>
				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
8000b076:	fe f9 0c 26 	ld.w	r9,pc[3110]
8000b07a:	3f f8       	mov	r8,-1
8000b07c:	b2 88       	st.b	r9[0x0],r8
				sanitizeMinutes = 0;
8000b07e:	fe f9 0c 22 	ld.w	r9,pc[3106]
8000b082:	30 08       	mov	r8,0
8000b084:	93 08       	st.w	r9[0x0],r8
				for (int i = 0; i<NUM_SHELVES; i++) {
8000b086:	30 08       	mov	r8,0
8000b088:	ef 48 fe c0 	st.w	r7[-320],r8
8000b08c:	c4 28       	rjmp	8000b110 <main+0x6d4>
					if (shelf[i].active == SHELF_ACTIVE) {
8000b08e:	ee f9 fe c0 	ld.w	r9,r7[-320]
8000b092:	fe fa 0c 12 	ld.w	r10,pc[3090]
8000b096:	12 98       	mov	r8,r9
8000b098:	a3 68       	lsl	r8,0x2
8000b09a:	12 08       	add	r8,r9
8000b09c:	f4 08 00 08 	add	r8,r10,r8
8000b0a0:	11 89       	ld.ub	r9,r8[0x0]
8000b0a2:	30 18       	mov	r8,1
8000b0a4:	f0 09 18 00 	cp.b	r9,r8
8000b0a8:	c2 f1       	brne	8000b106 <main+0x6ca>
						tmpSanitizeMinutes = calc_sanitize_time(i);
8000b0aa:	ee f8 fe c0 	ld.w	r8,r7[-320]
8000b0ae:	5c 58       	castu.b	r8
8000b0b0:	10 9c       	mov	r12,r8
8000b0b2:	f0 1f 02 fe 	mcall	8000bca8 <main+0x126c>
8000b0b6:	18 98       	mov	r8,r12
8000b0b8:	10 99       	mov	r9,r8
8000b0ba:	fe f8 0b f2 	ld.w	r8,pc[3058]
8000b0be:	91 09       	st.w	r8[0x0],r9
						
						if (tmpSanitizeMinutes > sanitizeMinutes)
8000b0c0:	fe f8 0b ec 	ld.w	r8,pc[3052]
8000b0c4:	70 09       	ld.w	r9,r8[0x0]
8000b0c6:	fe f8 0b da 	ld.w	r8,pc[3034]
8000b0ca:	70 08       	ld.w	r8,r8[0x0]
8000b0cc:	10 39       	cp.w	r9,r8
8000b0ce:	e0 88 00 08 	brls	8000b0de <main+0x6a2>
						{
							sanitizeMinutes = tmpSanitizeMinutes;
8000b0d2:	fe f8 0b da 	ld.w	r8,pc[3034]
8000b0d6:	70 09       	ld.w	r9,r8[0x0]
8000b0d8:	fe f8 0b c8 	ld.w	r8,pc[3016]
8000b0dc:	91 09       	st.w	r8[0x0],r9
						}
						
						led_shelf(i, LED_ON);
8000b0de:	ee f8 fe c0 	ld.w	r8,r7[-320]
8000b0e2:	5c 58       	castu.b	r8
8000b0e4:	30 1b       	mov	r11,1
8000b0e6:	10 9c       	mov	r12,r8
8000b0e8:	f0 1f 02 f2 	mcall	8000bcb0 <main+0x1274>
						
						if (displayIdx == 0xFF)
8000b0ec:	fe f8 0b b0 	ld.w	r8,pc[2992]
8000b0f0:	11 89       	ld.ub	r9,r8[0x0]
8000b0f2:	3f f8       	mov	r8,-1
8000b0f4:	f0 09 18 00 	cp.b	r9,r8
8000b0f8:	c0 71       	brne	8000b106 <main+0x6ca>
						{
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
8000b0fa:	ee f8 fe c0 	ld.w	r8,r7[-320]
8000b0fe:	5c 58       	castu.b	r8
8000b100:	fe f9 0b 9c 	ld.w	r9,pc[2972]
8000b104:	b2 88       	st.b	r9[0x0],r8
				display_text(IDX_CLEAR);
				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
				sanitizeMinutes = 0;
				for (int i = 0; i<NUM_SHELVES; i++) {
8000b106:	ee f8 fe c0 	ld.w	r8,r7[-320]
8000b10a:	2f f8       	sub	r8,-1
8000b10c:	ef 48 fe c0 	st.w	r7[-320],r8
8000b110:	ee f8 fe c0 	ld.w	r8,r7[-320]
8000b114:	58 38       	cp.w	r8,3
8000b116:	fe 9a ff bc 	brle	8000b08e <main+0x652>
8000b11a:	e0 68 1f 40 	mov	r8,8000
8000b11e:	ef 48 ff 40 	st.w	r7[-192],r8
8000b122:	e0 68 12 00 	mov	r8,4608
8000b126:	ea 18 00 7a 	orh	r8,0x7a
8000b12a:	ef 48 ff 3c 	st.w	r7[-196],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000b12e:	ee fa ff 40 	ld.w	r10,r7[-192]
8000b132:	ef 4a fe 2c 	st.w	r7[-468],r10
8000b136:	30 08       	mov	r8,0
8000b138:	ef 48 fe 28 	st.w	r7[-472],r8
8000b13c:	ee fc ff 3c 	ld.w	r12,r7[-196]
8000b140:	ef 4c fe 24 	st.w	r7[-476],r12
8000b144:	30 0a       	mov	r10,0
8000b146:	ef 4a fe 20 	st.w	r7[-480],r10
8000b14a:	ee f9 fe 28 	ld.w	r9,r7[-472]
8000b14e:	ee f8 fe 24 	ld.w	r8,r7[-476]
8000b152:	b1 39       	mul	r9,r8
8000b154:	ee f8 fe 20 	ld.w	r8,r7[-480]
8000b158:	ee fc fe 2c 	ld.w	r12,r7[-468]
8000b15c:	b9 38       	mul	r8,r12
8000b15e:	10 09       	add	r9,r8
8000b160:	ee f8 fe 2c 	ld.w	r8,r7[-468]
8000b164:	ee fc fe 24 	ld.w	r12,r7[-476]
8000b168:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000b16c:	16 09       	add	r9,r11
8000b16e:	12 9b       	mov	r11,r9
8000b170:	e0 68 03 e7 	mov	r8,999
8000b174:	30 09       	mov	r9,0
8000b176:	10 0a       	add	r10,r8
8000b178:	f6 09 00 4b 	adc	r11,r11,r9
8000b17c:	e0 68 03 e8 	mov	r8,1000
8000b180:	30 09       	mov	r9,0
8000b182:	f0 1f 02 b8 	mcall	8000bc60 <main+0x1224>
8000b186:	14 98       	mov	r8,r10
8000b188:	16 99       	mov	r9,r11
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
						}
					}
				}
				
				displayTimerSeconds = cpu_ms_2_cy(8000, EC_CPU_CLOCK_FREQ); //8 seconds per "shelf" display is enough time for the text to scroll twice
8000b18a:	10 99       	mov	r9,r8
8000b18c:	fe f8 0b 28 	ld.w	r8,pc[2856]
8000b190:	91 09       	st.w	r8[0x0],r9
				cpu_set_timeout(displayTimerSeconds, &displayTimer);
8000b192:	fe f8 0b 22 	ld.w	r8,pc[2850]
8000b196:	70 08       	ld.w	r8,r8[0x0]
8000b198:	ef 48 ff 48 	st.w	r7[-184],r8
8000b19c:	fe f8 0b 1c 	ld.w	r8,pc[2844]
8000b1a0:	ef 48 ff 44 	st.w	r7[-188],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b1a4:	e1 b8 00 42 	mfsr	r8,0x108
8000b1a8:	10 99       	mov	r9,r8
8000b1aa:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b1ae:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b1b0:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b1b4:	70 09       	ld.w	r9,r8[0x0]
8000b1b6:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000b1ba:	10 09       	add	r9,r8
8000b1bc:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b1c0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b1c2:	ee f9 ff 44 	ld.w	r9,r7[-188]
8000b1c6:	30 08       	mov	r8,0
8000b1c8:	f3 68 00 08 	st.b	r9[8],r8
8000b1cc:	e0 68 03 e8 	mov	r8,1000
8000b1d0:	ef 48 ff 50 	st.w	r7[-176],r8
8000b1d4:	e0 68 12 00 	mov	r8,4608
8000b1d8:	ea 18 00 7a 	orh	r8,0x7a
8000b1dc:	ef 48 ff 4c 	st.w	r7[-180],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000b1e0:	ee fa ff 50 	ld.w	r10,r7[-176]
8000b1e4:	ef 4a fe 3c 	st.w	r7[-452],r10
8000b1e8:	30 08       	mov	r8,0
8000b1ea:	ef 48 fe 38 	st.w	r7[-456],r8
8000b1ee:	ee fc ff 4c 	ld.w	r12,r7[-180]
8000b1f2:	ef 4c fe 34 	st.w	r7[-460],r12
8000b1f6:	30 0a       	mov	r10,0
8000b1f8:	ef 4a fe 30 	st.w	r7[-464],r10
8000b1fc:	ee f9 fe 38 	ld.w	r9,r7[-456]
8000b200:	ee f8 fe 34 	ld.w	r8,r7[-460]
8000b204:	b1 39       	mul	r9,r8
8000b206:	ee f8 fe 30 	ld.w	r8,r7[-464]
8000b20a:	ee fc fe 3c 	ld.w	r12,r7[-452]
8000b20e:	b9 38       	mul	r8,r12
8000b210:	10 09       	add	r9,r8
8000b212:	ee f8 fe 3c 	ld.w	r8,r7[-452]
8000b216:	ee fc fe 34 	ld.w	r12,r7[-460]
8000b21a:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000b21e:	16 09       	add	r9,r11
8000b220:	12 9b       	mov	r11,r9
8000b222:	e0 68 03 e7 	mov	r8,999
8000b226:	30 09       	mov	r9,0
8000b228:	10 0a       	add	r10,r8
8000b22a:	f6 09 00 4b 	adc	r11,r11,r9
8000b22e:	e0 68 03 e8 	mov	r8,1000
8000b232:	30 09       	mov	r9,0
8000b234:	f0 1f 02 8b 	mcall	8000bc60 <main+0x1224>
8000b238:	14 98       	mov	r8,r10
8000b23a:	16 99       	mov	r9,r11
				
#if 0 //DEBUG: set this to seconds not minutes so we can debug this logic faster 11may15				
				cpu_set_timeout((sanitizeMinutes * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer);
#endif
				cpu_set_timeout((sanitizeMinutes * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &sanitizeTimer); //DEBUG take this out when done debugging logic, put it back to minutes 11may15
8000b23c:	10 99       	mov	r9,r8
8000b23e:	fe f8 0a 62 	ld.w	r8,pc[2658]
8000b242:	70 08       	ld.w	r8,r8[0x0]
8000b244:	f2 08 02 48 	mul	r8,r9,r8
8000b248:	ef 48 ff 58 	st.w	r7[-168],r8
8000b24c:	fe f8 0a 70 	ld.w	r8,pc[2672]
8000b250:	ef 48 ff 54 	st.w	r7[-172],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b254:	e1 b8 00 42 	mfsr	r8,0x108
8000b258:	10 99       	mov	r9,r8
8000b25a:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b25e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b260:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b264:	70 09       	ld.w	r9,r8[0x0]
8000b266:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b26a:	10 09       	add	r9,r8
8000b26c:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b270:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b272:	ee f9 ff 54 	ld.w	r9,r7[-172]
8000b276:	30 08       	mov	r8,0
8000b278:	f3 68 00 08 	st.b	r9[8],r8
#ifdef SERIAL_ID_AND_ALL_USAGE_COMBINED
				usageShdw[0].totalSanitationCycles++;
				usageShdw[1].totalSanitationCycles++;
#else

				inc_sanCycles();
8000b27c:	f0 1f 02 91 	mcall	8000bcc0 <main+0x1284>
8000b280:	e0 68 03 e8 	mov	r8,1000
8000b284:	ef 48 ff 60 	st.w	r7[-160],r8
8000b288:	e0 68 12 00 	mov	r8,4608
8000b28c:	ea 18 00 7a 	orh	r8,0x7a
8000b290:	ef 48 ff 5c 	st.w	r7[-164],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000b294:	ee fa ff 60 	ld.w	r10,r7[-160]
8000b298:	ef 4a fe 4c 	st.w	r7[-436],r10
8000b29c:	30 08       	mov	r8,0
8000b29e:	ef 48 fe 48 	st.w	r7[-440],r8
8000b2a2:	ee fc ff 5c 	ld.w	r12,r7[-164]
8000b2a6:	ef 4c fe 44 	st.w	r7[-444],r12
8000b2aa:	30 0a       	mov	r10,0
8000b2ac:	ef 4a fe 40 	st.w	r7[-448],r10
8000b2b0:	ee f9 fe 48 	ld.w	r9,r7[-440]
8000b2b4:	ee f8 fe 44 	ld.w	r8,r7[-444]
8000b2b8:	b1 39       	mul	r9,r8
8000b2ba:	ee f8 fe 40 	ld.w	r8,r7[-448]
8000b2be:	ee fc fe 4c 	ld.w	r12,r7[-436]
8000b2c2:	b9 38       	mul	r8,r12
8000b2c4:	10 09       	add	r9,r8
8000b2c6:	ee f8 fe 4c 	ld.w	r8,r7[-436]
8000b2ca:	ee fc fe 44 	ld.w	r12,r7[-444]
8000b2ce:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000b2d2:	16 09       	add	r9,r11
8000b2d4:	12 9b       	mov	r11,r9
8000b2d6:	e0 68 03 e7 	mov	r8,999
8000b2da:	30 09       	mov	r9,0
8000b2dc:	10 0a       	add	r10,r8
8000b2de:	f6 09 00 4b 	adc	r11,r11,r9
8000b2e2:	e0 68 03 e8 	mov	r8,1000
8000b2e6:	30 09       	mov	r9,0
8000b2e8:	f0 1f 02 5e 	mcall	8000bc60 <main+0x1224>
8000b2ec:	14 98       	mov	r8,r10
8000b2ee:	16 99       	mov	r9,r11

#endif //SERIAL_ID_AND_ALL_USAGE_COMBINED
				
//DEBUG 11may15 do this once per second for debug				cpu_set_timeout((60 * cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics
				cpu_set_timeout((cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics DEBUG 11may15
8000b2f0:	ef 48 ff 68 	st.w	r7[-152],r8
8000b2f4:	fe f8 09 d0 	ld.w	r8,pc[2512]
8000b2f8:	ef 48 ff 64 	st.w	r7[-156],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b2fc:	e1 b8 00 42 	mfsr	r8,0x108
8000b300:	10 99       	mov	r9,r8
8000b302:	ee f8 ff 64 	ld.w	r8,r7[-156]
8000b306:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b308:	ee f8 ff 64 	ld.w	r8,r7[-156]
8000b30c:	70 09       	ld.w	r9,r8[0x0]
8000b30e:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000b312:	10 09       	add	r9,r8
8000b314:	ee f8 ff 64 	ld.w	r8,r7[-156]
8000b318:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b31a:	ee f9 ff 64 	ld.w	r9,r7[-156]
8000b31e:	30 08       	mov	r8,0
8000b320:	f3 68 00 08 	st.b	r9[8],r8

				electroclaveState = STATE_SANITIZE;
8000b324:	fe f9 09 20 	ld.w	r9,pc[2336]
8000b328:	30 58       	mov	r8,5
8000b32a:	b2 88       	st.b	r9[0x0],r8
				
				break;
8000b32c:	e0 8f 02 d7 	bral	8000b8da <main+0xe9e>
8000b330:	fe f8 09 88 	ld.w	r8,pc[2440]
8000b334:	ef 48 ff 6c 	st.w	r7[-148],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000b338:	e1 b8 00 42 	mfsr	r8,0x108
8000b33c:	ef 48 ff 70 	st.w	r7[-144],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000b340:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000b344:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b348:	30 28       	mov	r8,2
8000b34a:	f0 09 18 00 	cp.b	r9,r8
8000b34e:	c0 31       	brne	8000b354 <main+0x918>
    return false;
8000b350:	30 08       	mov	r8,0
8000b352:	c4 38       	rjmp	8000b3d8 <main+0x99c>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000b354:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000b358:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b35c:	30 18       	mov	r8,1
8000b35e:	f0 09 18 00 	cp.b	r9,r8
8000b362:	c0 31       	brne	8000b368 <main+0x92c>
    return true;
8000b364:	30 18       	mov	r8,1
8000b366:	c3 98       	rjmp	8000b3d8 <main+0x99c>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b368:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000b36c:	70 09       	ld.w	r9,r8[0x0]
8000b36e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000b372:	70 18       	ld.w	r8,r8[0x4]
8000b374:	10 39       	cp.w	r9,r8
8000b376:	e0 88 00 1a 	brls	8000b3aa <main+0x96e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b37a:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000b37e:	70 09       	ld.w	r9,r8[0x0]
8000b380:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000b384:	12 38       	cp.w	r8,r9
8000b386:	c1 02       	brcc	8000b3a6 <main+0x96a>
8000b388:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000b38c:	70 19       	ld.w	r9,r8[0x4]
8000b38e:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000b392:	12 38       	cp.w	r8,r9
8000b394:	e0 88 00 09 	brls	8000b3a6 <main+0x96a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b398:	ee f9 ff 6c 	ld.w	r9,r7[-148]
8000b39c:	30 18       	mov	r8,1
8000b39e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b3a2:	30 18       	mov	r8,1
8000b3a4:	c1 a8       	rjmp	8000b3d8 <main+0x99c>
    }
    return false;
8000b3a6:	30 08       	mov	r8,0
8000b3a8:	c1 88       	rjmp	8000b3d8 <main+0x99c>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000b3aa:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000b3ae:	70 09       	ld.w	r9,r8[0x0]
8000b3b0:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000b3b4:	12 38       	cp.w	r8,r9
8000b3b6:	c0 93       	brcs	8000b3c8 <main+0x98c>
8000b3b8:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000b3bc:	70 19       	ld.w	r9,r8[0x4]
8000b3be:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000b3c2:	12 38       	cp.w	r8,r9
8000b3c4:	e0 88 00 09 	brls	8000b3d6 <main+0x99a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b3c8:	ee f9 ff 6c 	ld.w	r9,r7[-148]
8000b3cc:	30 18       	mov	r8,1
8000b3ce:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b3d2:	30 18       	mov	r8,1
8000b3d4:	c0 28       	rjmp	8000b3d8 <main+0x99c>
    }
    return false;
8000b3d6:	30 08       	mov	r8,0
				
			case STATE_SANITIZE:
				/*
    			 * Manage the display
				 */
				if (cpu_is_timeout(&displayTimer))
8000b3d8:	58 08       	cp.w	r8,0
8000b3da:	c6 90       	breq	8000b4ac <main+0xa70>
8000b3dc:	fe f8 08 dc 	ld.w	r8,pc[2268]
8000b3e0:	ef 48 ff 74 	st.w	r7[-140],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000b3e4:	ee f9 ff 74 	ld.w	r9,r7[-140]
8000b3e8:	30 28       	mov	r8,2
8000b3ea:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout(&displayTimer);
					switch (displayIdx)
8000b3ee:	fe f8 08 ae 	ld.w	r8,pc[2222]
8000b3f2:	11 88       	ld.ub	r8,r8[0x0]
8000b3f4:	58 18       	cp.w	r8,1
8000b3f6:	c0 f0       	breq	8000b414 <main+0x9d8>
8000b3f8:	e0 89 00 05 	brgt	8000b402 <main+0x9c6>
8000b3fc:	58 08       	cp.w	r8,0
8000b3fe:	c0 70       	breq	8000b40c <main+0x9d0>
8000b400:	c1 78       	rjmp	8000b42e <main+0x9f2>
8000b402:	58 28       	cp.w	r8,2
8000b404:	c0 c0       	breq	8000b41c <main+0x9e0>
8000b406:	58 38       	cp.w	r8,3
8000b408:	c0 e0       	breq	8000b424 <main+0x9e8>
8000b40a:	c1 28       	rjmp	8000b42e <main+0x9f2>
					{
						case 0:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF1);
8000b40c:	30 5c       	mov	r12,5
8000b40e:	f0 1f 02 07 	mcall	8000bc28 <main+0x11ec>
							break;
8000b412:	c0 e8       	rjmp	8000b42e <main+0x9f2>
						case 1:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF2);
8000b414:	30 6c       	mov	r12,6
8000b416:	f0 1f 02 05 	mcall	8000bc28 <main+0x11ec>
							break;
8000b41a:	c0 a8       	rjmp	8000b42e <main+0x9f2>
						case 2:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF3);
8000b41c:	30 7c       	mov	r12,7
8000b41e:	f0 1f 02 03 	mcall	8000bc28 <main+0x11ec>
							break;
8000b422:	c0 68       	rjmp	8000b42e <main+0x9f2>
						case 3:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF4);
8000b424:	30 8c       	mov	r12,8
8000b426:	f0 1f 02 01 	mcall	8000bc28 <main+0x11ec>
8000b42a:	c0 28       	rjmp	8000b42e <main+0x9f2>
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
8000b42c:	d7 03       	nop
							break;
					}
					
					while (1)
					{
						if (++displayIdx >= NUM_SHELVES)
8000b42e:	fe f8 08 6e 	ld.w	r8,pc[2158]
8000b432:	11 88       	ld.ub	r8,r8[0x0]
8000b434:	2f f8       	sub	r8,-1
8000b436:	5c 58       	castu.b	r8
8000b438:	fe f9 08 64 	ld.w	r9,pc[2148]
8000b43c:	b2 88       	st.b	r9[0x0],r8
8000b43e:	fe f8 08 5e 	ld.w	r8,pc[2142]
8000b442:	11 89       	ld.ub	r9,r8[0x0]
8000b444:	30 38       	mov	r8,3
8000b446:	f0 09 18 00 	cp.b	r9,r8
8000b44a:	e0 88 00 06 	brls	8000b456 <main+0xa1a>
						{
							displayIdx = 0; //12apr15 wrap around
8000b44e:	fe f9 08 4e 	ld.w	r9,pc[2126]
8000b452:	30 08       	mov	r8,0
8000b454:	b2 88       	st.b	r9[0x0],r8
						}
						
						if (shelf[displayIdx].active)
8000b456:	fe f8 08 46 	ld.w	r8,pc[2118]
8000b45a:	11 88       	ld.ub	r8,r8[0x0]
8000b45c:	10 99       	mov	r9,r8
8000b45e:	fe fa 08 46 	ld.w	r10,pc[2118]
8000b462:	12 98       	mov	r8,r9
8000b464:	a3 68       	lsl	r8,0x2
8000b466:	12 08       	add	r8,r9
8000b468:	f4 08 00 08 	add	r8,r10,r8
8000b46c:	11 88       	ld.ub	r8,r8[0x0]
8000b46e:	58 08       	cp.w	r8,0
8000b470:	cd e0       	breq	8000b42c <main+0x9f0>
							break; //this shelf is active, we don't need to look for another one
						}
						
					}

					cpu_set_timeout(displayTimerSeconds, &displayTimer); //8 seconds per shelf
8000b472:	fe f8 08 42 	ld.w	r8,pc[2114]
8000b476:	70 08       	ld.w	r8,r8[0x0]
8000b478:	ef 48 ff 7c 	st.w	r7[-132],r8
8000b47c:	fe f8 08 3c 	ld.w	r8,pc[2108]
8000b480:	ef 48 ff 78 	st.w	r7[-136],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b484:	e1 b8 00 42 	mfsr	r8,0x108
8000b488:	10 99       	mov	r9,r8
8000b48a:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000b48e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b490:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000b494:	70 09       	ld.w	r9,r8[0x0]
8000b496:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000b49a:	10 09       	add	r9,r8
8000b49c:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000b4a0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b4a2:	ee f9 ff 78 	ld.w	r9,r7[-136]
8000b4a6:	30 08       	mov	r8,0
8000b4a8:	f3 68 00 08 	st.b	r9[8],r8
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
8000b4ac:	fe f8 08 18 	ld.w	r8,pc[2072]
8000b4b0:	ef 48 ff 80 	st.w	r7[-128],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000b4b4:	e1 b8 00 42 	mfsr	r8,0x108
8000b4b8:	ef 48 ff 84 	st.w	r7[-124],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000b4bc:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000b4c0:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b4c4:	30 28       	mov	r8,2
8000b4c6:	f0 09 18 00 	cp.b	r9,r8
8000b4ca:	c0 31       	brne	8000b4d0 <main+0xa94>
    return false;
8000b4cc:	30 08       	mov	r8,0
8000b4ce:	c4 38       	rjmp	8000b554 <main+0xb18>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000b4d0:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000b4d4:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b4d8:	30 18       	mov	r8,1
8000b4da:	f0 09 18 00 	cp.b	r9,r8
8000b4de:	c0 31       	brne	8000b4e4 <main+0xaa8>
    return true;
8000b4e0:	30 18       	mov	r8,1
8000b4e2:	c3 98       	rjmp	8000b554 <main+0xb18>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b4e4:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000b4e8:	70 09       	ld.w	r9,r8[0x0]
8000b4ea:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000b4ee:	70 18       	ld.w	r8,r8[0x4]
8000b4f0:	10 39       	cp.w	r9,r8
8000b4f2:	e0 88 00 1a 	brls	8000b526 <main+0xaea>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b4f6:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000b4fa:	70 09       	ld.w	r9,r8[0x0]
8000b4fc:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000b500:	12 38       	cp.w	r8,r9
8000b502:	c1 02       	brcc	8000b522 <main+0xae6>
8000b504:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000b508:	70 19       	ld.w	r9,r8[0x4]
8000b50a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000b50e:	12 38       	cp.w	r8,r9
8000b510:	e0 88 00 09 	brls	8000b522 <main+0xae6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b514:	ee f9 ff 80 	ld.w	r9,r7[-128]
8000b518:	30 18       	mov	r8,1
8000b51a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b51e:	30 18       	mov	r8,1
8000b520:	c1 a8       	rjmp	8000b554 <main+0xb18>
    }
    return false;
8000b522:	30 08       	mov	r8,0
8000b524:	c1 88       	rjmp	8000b554 <main+0xb18>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000b526:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000b52a:	70 09       	ld.w	r9,r8[0x0]
8000b52c:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000b530:	12 38       	cp.w	r8,r9
8000b532:	c0 93       	brcs	8000b544 <main+0xb08>
8000b534:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000b538:	70 19       	ld.w	r9,r8[0x4]
8000b53a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000b53e:	12 38       	cp.w	r8,r9
8000b540:	e0 88 00 09 	brls	8000b552 <main+0xb16>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b544:	ee f9 ff 80 	ld.w	r9,r7[-128]
8000b548:	30 18       	mov	r8,1
8000b54a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b54e:	30 18       	mov	r8,1
8000b550:	c0 28       	rjmp	8000b554 <main+0xb18>
    }
    return false;
8000b552:	30 08       	mov	r8,0
				}

				/*
    			 * Manage storing usage statistics to flash
				 */
				if (cpu_is_timeout (&oneMinuteTimer))
8000b554:	58 08       	cp.w	r8,0
8000b556:	c5 e0       	breq	8000b612 <main+0xbd6>
8000b558:	fe f8 07 6c 	ld.w	r8,pc[1900]
8000b55c:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000b560:	ee f9 ff 88 	ld.w	r9,r7[-120]
8000b564:	30 28       	mov	r8,2
8000b566:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout (&oneMinuteTimer);
					
					increment_ledBoard_usage_min(); //increments usage minutes for active shelves only
8000b56a:	f0 1f 01 d8 	mcall	8000bcc8 <main+0x128c>
8000b56e:	e0 68 03 e8 	mov	r8,1000
8000b572:	ef 48 ff 90 	st.w	r7[-112],r8
8000b576:	e0 68 12 00 	mov	r8,4608
8000b57a:	ea 18 00 7a 	orh	r8,0x7a
8000b57e:	ef 48 ff 8c 	st.w	r7[-116],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000b582:	ee fa ff 90 	ld.w	r10,r7[-112]
8000b586:	ef 4a fe 5c 	st.w	r7[-420],r10
8000b58a:	30 08       	mov	r8,0
8000b58c:	ef 48 fe 58 	st.w	r7[-424],r8
8000b590:	ee fc ff 8c 	ld.w	r12,r7[-116]
8000b594:	ef 4c fe 54 	st.w	r7[-428],r12
8000b598:	30 0a       	mov	r10,0
8000b59a:	ef 4a fe 50 	st.w	r7[-432],r10
8000b59e:	ee f9 fe 58 	ld.w	r9,r7[-424]
8000b5a2:	ee f8 fe 54 	ld.w	r8,r7[-428]
8000b5a6:	b1 39       	mul	r9,r8
8000b5a8:	ee f8 fe 50 	ld.w	r8,r7[-432]
8000b5ac:	ee fc fe 5c 	ld.w	r12,r7[-420]
8000b5b0:	b9 38       	mul	r8,r12
8000b5b2:	10 09       	add	r9,r8
8000b5b4:	ee f8 fe 5c 	ld.w	r8,r7[-420]
8000b5b8:	ee fc fe 54 	ld.w	r12,r7[-428]
8000b5bc:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000b5c0:	16 09       	add	r9,r11
8000b5c2:	12 9b       	mov	r11,r9
8000b5c4:	e0 68 03 e7 	mov	r8,999
8000b5c8:	30 09       	mov	r9,0
8000b5ca:	10 0a       	add	r10,r8
8000b5cc:	f6 09 00 4b 	adc	r11,r11,r9
8000b5d0:	e0 68 03 e8 	mov	r8,1000
8000b5d4:	30 09       	mov	r9,0
8000b5d6:	f0 1f 01 a3 	mcall	8000bc60 <main+0x1224>
8000b5da:	14 98       	mov	r8,r10
8000b5dc:	16 99       	mov	r9,r11
					
//DEBUG 11may15 set to one second for debug					cpu_set_timeout(cpu_ms_2_cy(60000, EC_CPU_CLOCK_FREQ), &oneMinuteTimer); //one minute for the usage statistics
					cpu_set_timeout((cpu_ms_2_cy(1000,EC_CPU_CLOCK_FREQ)), &oneMinuteTimer); //one minute for the usage statistics DEBUG 11may15 one second instead of one minute
8000b5de:	ef 48 ff 98 	st.w	r7[-104],r8
8000b5e2:	fe f8 06 e2 	ld.w	r8,pc[1762]
8000b5e6:	ef 48 ff 94 	st.w	r7[-108],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b5ea:	e1 b8 00 42 	mfsr	r8,0x108
8000b5ee:	10 99       	mov	r9,r8
8000b5f0:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b5f4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b5f6:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b5fa:	70 09       	ld.w	r9,r8[0x0]
8000b5fc:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b600:	10 09       	add	r9,r8
8000b602:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b606:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b608:	ee f9 ff 94 	ld.w	r9,r7[-108]
8000b60c:	30 08       	mov	r8,0
8000b60e:	f3 68 00 08 	st.b	r9[8],r8
8000b612:	fe f8 06 aa 	ld.w	r8,pc[1706]
8000b616:	ef 48 ff 9c 	st.w	r7[-100],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000b61a:	e1 b8 00 42 	mfsr	r8,0x108
8000b61e:	ef 48 ff a0 	st.w	r7[-96],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000b622:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b626:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b62a:	30 28       	mov	r8,2
8000b62c:	f0 09 18 00 	cp.b	r9,r8
8000b630:	c0 31       	brne	8000b636 <main+0xbfa>
    return false;
8000b632:	30 08       	mov	r8,0
8000b634:	c4 38       	rjmp	8000b6ba <main+0xc7e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000b636:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b63a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b63e:	30 18       	mov	r8,1
8000b640:	f0 09 18 00 	cp.b	r9,r8
8000b644:	c0 31       	brne	8000b64a <main+0xc0e>
    return true;
8000b646:	30 18       	mov	r8,1
8000b648:	c3 98       	rjmp	8000b6ba <main+0xc7e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b64a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b64e:	70 09       	ld.w	r9,r8[0x0]
8000b650:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b654:	70 18       	ld.w	r8,r8[0x4]
8000b656:	10 39       	cp.w	r9,r8
8000b658:	e0 88 00 1a 	brls	8000b68c <main+0xc50>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b65c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b660:	70 09       	ld.w	r9,r8[0x0]
8000b662:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000b666:	12 38       	cp.w	r8,r9
8000b668:	c1 02       	brcc	8000b688 <main+0xc4c>
8000b66a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b66e:	70 19       	ld.w	r9,r8[0x4]
8000b670:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000b674:	12 38       	cp.w	r8,r9
8000b676:	e0 88 00 09 	brls	8000b688 <main+0xc4c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b67a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000b67e:	30 18       	mov	r8,1
8000b680:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b684:	30 18       	mov	r8,1
8000b686:	c1 a8       	rjmp	8000b6ba <main+0xc7e>
    }
    return false;
8000b688:	30 08       	mov	r8,0
8000b68a:	c1 88       	rjmp	8000b6ba <main+0xc7e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000b68c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b690:	70 09       	ld.w	r9,r8[0x0]
8000b692:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000b696:	12 38       	cp.w	r8,r9
8000b698:	c0 93       	brcs	8000b6aa <main+0xc6e>
8000b69a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b69e:	70 19       	ld.w	r9,r8[0x4]
8000b6a0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000b6a4:	12 38       	cp.w	r8,r9
8000b6a6:	e0 88 00 09 	brls	8000b6b8 <main+0xc7c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b6aa:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000b6ae:	30 18       	mov	r8,1
8000b6b0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b6b4:	30 18       	mov	r8,1
8000b6b6:	c0 28       	rjmp	8000b6ba <main+0xc7e>
    }
    return false;
8000b6b8:	30 08       	mov	r8,0
				}
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
8000b6ba:	58 08       	cp.w	r8,0
8000b6bc:	e0 80 01 0c 	breq	8000b8d4 <main+0xe98>
					
					for (int i=0; i< NUM_SHELVES; i++)
8000b6c0:	30 08       	mov	r8,0
8000b6c2:	ef 48 fe c4 	st.w	r7[-316],r8
8000b6c6:	c0 d8       	rjmp	8000b6e0 <main+0xca4>
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
8000b6c8:	ee f8 fe c4 	ld.w	r8,r7[-316]
8000b6cc:	5c 58       	castu.b	r8
8000b6ce:	30 0b       	mov	r11,0
8000b6d0:	10 9c       	mov	r12,r8
8000b6d2:	f0 1f 01 78 	mcall	8000bcb0 <main+0x1274>
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
					
					for (int i=0; i< NUM_SHELVES; i++)
8000b6d6:	ee f8 fe c4 	ld.w	r8,r7[-316]
8000b6da:	2f f8       	sub	r8,-1
8000b6dc:	ef 48 fe c4 	st.w	r7[-316],r8
8000b6e0:	ee f8 fe c4 	ld.w	r8,r7[-316]
8000b6e4:	58 38       	cp.w	r8,3
8000b6e6:	fe 9a ff f1 	brle	8000b6c8 <main+0xc8c>
8000b6ea:	fe f8 05 d2 	ld.w	r8,pc[1490]
8000b6ee:	ef 48 ff a4 	st.w	r7[-92],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000b6f2:	ee f9 ff a4 	ld.w	r9,r7[-92]
8000b6f6:	30 28       	mov	r8,2
8000b6f8:	f3 68 00 08 	st.b	r9[8],r8
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
8000b6fc:	fe fc 05 d0 	ld.w	r12,pc[1488]
8000b700:	f0 1f 01 5d 	mcall	8000bc74 <main+0x1238>
					electroclaveState = STATE_START_CLEAN;
8000b704:	fe f9 05 40 	ld.w	r9,pc[1344]
8000b708:	30 68       	mov	r8,6
8000b70a:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000b70c:	ce 78       	rjmp	8000b8da <main+0xe9e>
				
			case STATE_START_CLEAN:
				display_text(IDX_CLEAN);
8000b70e:	30 1c       	mov	r12,1
8000b710:	f0 1f 01 46 	mcall	8000bc28 <main+0x11ec>
				electroclaveState = STATE_CLEAN;
8000b714:	fe f9 05 30 	ld.w	r9,pc[1328]
8000b718:	30 78       	mov	r8,7
8000b71a:	b2 88       	st.b	r9[0x0],r8
8000b71c:	e0 68 03 e8 	mov	r8,1000
8000b720:	ef 48 ff ac 	st.w	r7[-84],r8
8000b724:	e0 68 12 00 	mov	r8,4608
8000b728:	ea 18 00 7a 	orh	r8,0x7a
8000b72c:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000b730:	ee fa ff ac 	ld.w	r10,r7[-84]
8000b734:	ef 4a fe 6c 	st.w	r7[-404],r10
8000b738:	30 08       	mov	r8,0
8000b73a:	ef 48 fe 68 	st.w	r7[-408],r8
8000b73e:	ee fc ff a8 	ld.w	r12,r7[-88]
8000b742:	ef 4c fe 64 	st.w	r7[-412],r12
8000b746:	30 0a       	mov	r10,0
8000b748:	ef 4a fe 60 	st.w	r7[-416],r10
8000b74c:	ee f9 fe 68 	ld.w	r9,r7[-408]
8000b750:	ee f8 fe 64 	ld.w	r8,r7[-412]
8000b754:	b1 39       	mul	r9,r8
8000b756:	ee f8 fe 60 	ld.w	r8,r7[-416]
8000b75a:	ee fc fe 6c 	ld.w	r12,r7[-404]
8000b75e:	b9 38       	mul	r8,r12
8000b760:	10 09       	add	r9,r8
8000b762:	ee f8 fe 6c 	ld.w	r8,r7[-404]
8000b766:	ee fc fe 64 	ld.w	r12,r7[-412]
8000b76a:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000b76e:	16 09       	add	r9,r11
8000b770:	12 9b       	mov	r11,r9
8000b772:	e0 68 03 e7 	mov	r8,999
8000b776:	30 09       	mov	r9,0
8000b778:	10 0a       	add	r10,r8
8000b77a:	f6 09 00 4b 	adc	r11,r11,r9
8000b77e:	e0 68 03 e8 	mov	r8,1000
8000b782:	30 09       	mov	r9,0
8000b784:	f0 1f 01 37 	mcall	8000bc60 <main+0x1224>
8000b788:	14 98       	mov	r8,r10
8000b78a:	16 99       	mov	r9,r11
#if 0 //DEBUG do this in seconds to debug logic 11may15				
				cpu_set_timeout((20 * 60 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer);
#endif
				cpu_set_timeout((20 * cpu_ms_2_cy(1000, EC_CPU_CLOCK_FREQ)), &cleanTimer); //DEBUG 11may15 
8000b78c:	10 99       	mov	r9,r8
8000b78e:	12 98       	mov	r8,r9
8000b790:	a3 68       	lsl	r8,0x2
8000b792:	12 08       	add	r8,r9
8000b794:	a3 68       	lsl	r8,0x2
8000b796:	ef 48 ff b4 	st.w	r7[-76],r8
8000b79a:	fe f8 05 36 	ld.w	r8,pc[1334]
8000b79e:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b7a2:	e1 b8 00 42 	mfsr	r8,0x108
8000b7a6:	10 99       	mov	r9,r8
8000b7a8:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000b7ac:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b7ae:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000b7b2:	70 09       	ld.w	r9,r8[0x0]
8000b7b4:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000b7b8:	10 09       	add	r9,r8
8000b7ba:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000b7be:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b7c0:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000b7c4:	30 08       	mov	r8,0
8000b7c6:	f3 68 00 08 	st.b	r9[8],r8

				break;	
8000b7ca:	c8 88       	rjmp	8000b8da <main+0xe9e>
8000b7cc:	fe f8 05 04 	ld.w	r8,pc[1284]
8000b7d0:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000b7d4:	e1 b8 00 42 	mfsr	r8,0x108
8000b7d8:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000b7dc:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000b7e0:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b7e4:	30 28       	mov	r8,2
8000b7e6:	f0 09 18 00 	cp.b	r9,r8
8000b7ea:	c0 31       	brne	8000b7f0 <main+0xdb4>
    return false;
8000b7ec:	30 08       	mov	r8,0
8000b7ee:	c4 38       	rjmp	8000b874 <main+0xe38>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000b7f0:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000b7f4:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b7f8:	30 18       	mov	r8,1
8000b7fa:	f0 09 18 00 	cp.b	r9,r8
8000b7fe:	c0 31       	brne	8000b804 <main+0xdc8>
    return true;
8000b800:	30 18       	mov	r8,1
8000b802:	c3 98       	rjmp	8000b874 <main+0xe38>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b804:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000b808:	70 09       	ld.w	r9,r8[0x0]
8000b80a:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000b80e:	70 18       	ld.w	r8,r8[0x4]
8000b810:	10 39       	cp.w	r9,r8
8000b812:	e0 88 00 1a 	brls	8000b846 <main+0xe0a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b816:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000b81a:	70 09       	ld.w	r9,r8[0x0]
8000b81c:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000b820:	12 38       	cp.w	r8,r9
8000b822:	c1 02       	brcc	8000b842 <main+0xe06>
8000b824:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000b828:	70 19       	ld.w	r9,r8[0x4]
8000b82a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000b82e:	12 38       	cp.w	r8,r9
8000b830:	e0 88 00 09 	brls	8000b842 <main+0xe06>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b834:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000b838:	30 18       	mov	r8,1
8000b83a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b83e:	30 18       	mov	r8,1
8000b840:	c1 a8       	rjmp	8000b874 <main+0xe38>
    }
    return false;
8000b842:	30 08       	mov	r8,0
8000b844:	c1 88       	rjmp	8000b874 <main+0xe38>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000b846:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000b84a:	70 09       	ld.w	r9,r8[0x0]
8000b84c:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000b850:	12 38       	cp.w	r8,r9
8000b852:	c0 93       	brcs	8000b864 <main+0xe28>
8000b854:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000b858:	70 19       	ld.w	r9,r8[0x4]
8000b85a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000b85e:	12 38       	cp.w	r8,r9
8000b860:	e0 88 00 09 	brls	8000b872 <main+0xe36>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000b864:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000b868:	30 18       	mov	r8,1
8000b86a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000b86e:	30 18       	mov	r8,1
8000b870:	c0 28       	rjmp	8000b874 <main+0xe38>
    }
    return false;
8000b872:	30 08       	mov	r8,0
				
			case STATE_CLEAN:
				if (cpu_is_timeout(&cleanTimer)) {
8000b874:	58 08       	cp.w	r8,0
8000b876:	c3 10       	breq	8000b8d8 <main+0xe9c>
8000b878:	fe f8 04 58 	ld.w	r8,pc[1112]
8000b87c:	ef 48 ff c0 	st.w	r7[-64],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000b880:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000b884:	30 28       	mov	r8,2
8000b886:	f3 68 00 08 	st.b	r9[8],r8
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
8000b88a:	fe f9 03 ba 	ld.w	r9,pc[954]
8000b88e:	30 38       	mov	r8,3
8000b890:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000b892:	c2 48       	rjmp	8000b8da <main+0xe9e>
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
8000b894:	30 08       	mov	r8,0
8000b896:	ef 48 fe c8 	st.w	r7[-312],r8
8000b89a:	c0 d8       	rjmp	8000b8b4 <main+0xe78>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
8000b89c:	ee f8 fe c8 	ld.w	r8,r7[-312]
8000b8a0:	5c 58       	castu.b	r8
8000b8a2:	30 0b       	mov	r11,0
8000b8a4:	10 9c       	mov	r12,r8
8000b8a6:	f0 1f 01 03 	mcall	8000bcb0 <main+0x1274>
				}
				break;
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
8000b8aa:	ee f8 fe c8 	ld.w	r8,r7[-312]
8000b8ae:	2f f8       	sub	r8,-1
8000b8b0:	ef 48 fe c8 	st.w	r7[-312],r8
8000b8b4:	ee f8 fe c8 	ld.w	r8,r7[-312]
8000b8b8:	58 38       	cp.w	r8,3
8000b8ba:	fe 9a ff f1 	brle	8000b89c <main+0xe60>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				electroclaveState = STATE_EC_IDLE;
8000b8be:	fe f9 03 86 	ld.w	r9,pc[902]
8000b8c2:	30 08       	mov	r8,0
8000b8c4:	b2 88       	st.b	r9[0x0],r8
8000b8c6:	c0 a8       	rjmp	8000b8da <main+0xe9e>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
					electroclaveState = STATE_DOOR_LATCHED;
					firstTimeThroughDoorLatch = 1;
				}
				break;
8000b8c8:	d7 03       	nop
8000b8ca:	c0 88       	rjmp	8000b8da <main+0xe9e>
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
					print_ecdbg("Action push button press detected\r\n");
					electroclaveState = STATE_ACTION_PB_PRESSED;
				}
				break;
8000b8cc:	d7 03       	nop
8000b8ce:	c0 68       	rjmp	8000b8da <main+0xe9e>
				if (EC_ACTION_PB)
				{
					print_ecdbg("Action push button release detected\r\n");
					electroclaveState = STATE_ACTION_PB_RELEASED;	
				}
				break;
8000b8d0:	d7 03       	nop
8000b8d2:	c0 48       	rjmp	8000b8da <main+0xe9e>
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
					electroclaveState = STATE_START_CLEAN;
				}
				break;
8000b8d4:	d7 03       	nop
8000b8d6:	c0 28       	rjmp	8000b8da <main+0xe9e>
			case STATE_CLEAN:
				if (cpu_is_timeout(&cleanTimer)) {
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
				}
				break;
8000b8d8:	d7 03       	nop
		
		/*
		 * This check overrides everything going on in the state machine, if the user opens the door,
		 * shut down all processes for safety
		 */
		if (!EC_DOOR_LATCHED) {
8000b8da:	33 ec       	mov	r12,62
8000b8dc:	f0 1f 00 e4 	mcall	8000bc6c <main+0x1230>
8000b8e0:	18 98       	mov	r8,r12
8000b8e2:	58 08       	cp.w	r8,0
8000b8e4:	e0 80 00 d2 	breq	8000ba88 <main+0x104c>
		
			if (firstTimeThroughDoorLatch)
8000b8e8:	fe f8 03 90 	ld.w	r8,pc[912]
8000b8ec:	11 88       	ld.ub	r8,r8[0x0]
8000b8ee:	58 08       	cp.w	r8,0
8000b8f0:	e0 80 00 cc 	breq	8000ba88 <main+0x104c>
			{
				door_latch_open_kill_all_shelves();
8000b8f4:	f0 1f 00 f8 	mcall	8000bcd4 <main+0x1298>

				display_text(IDX_CLEAR);
8000b8f8:	30 9c       	mov	r12,9
8000b8fa:	f0 1f 00 cc 	mcall	8000bc28 <main+0x11ec>
8000b8fe:	e0 68 01 f4 	mov	r8,500
8000b902:	ef 48 ff c8 	st.w	r7[-56],r8
8000b906:	e0 68 12 00 	mov	r8,4608
8000b90a:	ea 18 00 7a 	orh	r8,0x7a
8000b90e:	ef 48 ff c4 	st.w	r7[-60],r8
8000b912:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000b916:	ef 48 ff d0 	st.w	r7[-48],r8
8000b91a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000b91e:	ef 48 ff cc 	st.w	r7[-52],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000b922:	ee fa ff d0 	ld.w	r10,r7[-48]
8000b926:	ef 4a fe 7c 	st.w	r7[-388],r10
8000b92a:	30 08       	mov	r8,0
8000b92c:	ef 48 fe 78 	st.w	r7[-392],r8
8000b930:	ee fc ff cc 	ld.w	r12,r7[-52]
8000b934:	ef 4c fe 74 	st.w	r7[-396],r12
8000b938:	30 0a       	mov	r10,0
8000b93a:	ef 4a fe 70 	st.w	r7[-400],r10
8000b93e:	ee f9 fe 78 	ld.w	r9,r7[-392]
8000b942:	ee f8 fe 74 	ld.w	r8,r7[-396]
8000b946:	b1 39       	mul	r9,r8
8000b948:	ee f8 fe 70 	ld.w	r8,r7[-400]
8000b94c:	ee fc fe 7c 	ld.w	r12,r7[-388]
8000b950:	b9 38       	mul	r8,r12
8000b952:	10 09       	add	r9,r8
8000b954:	ee f8 fe 7c 	ld.w	r8,r7[-388]
8000b958:	ee fc fe 74 	ld.w	r12,r7[-396]
8000b95c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000b960:	16 09       	add	r9,r11
8000b962:	12 9b       	mov	r11,r9
8000b964:	e0 68 03 e7 	mov	r8,999
8000b968:	30 09       	mov	r9,0
8000b96a:	10 0a       	add	r10,r8
8000b96c:	f6 09 00 4b 	adc	r11,r11,r9
8000b970:	e0 68 03 e8 	mov	r8,1000
8000b974:	30 09       	mov	r9,0
8000b976:	f0 1f 00 bb 	mcall	8000bc60 <main+0x1224>
8000b97a:	14 98       	mov	r8,r10
8000b97c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000b97e:	ef 48 ff d8 	st.w	r7[-40],r8
8000b982:	ee c8 01 4c 	sub	r8,r7,332
8000b986:	ef 48 ff d4 	st.w	r7[-44],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000b98a:	e1 b8 00 42 	mfsr	r8,0x108
8000b98e:	10 99       	mov	r9,r8
8000b990:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000b994:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000b996:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000b99a:	70 09       	ld.w	r9,r8[0x0]
8000b99c:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000b9a0:	10 09       	add	r9,r8
8000b9a2:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000b9a6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000b9a8:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000b9ac:	30 08       	mov	r8,0
8000b9ae:	f3 68 00 08 	st.b	r9[8],r8
8000b9b2:	ee c8 01 4c 	sub	r8,r7,332
8000b9b6:	ef 48 ff dc 	st.w	r7[-36],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000b9ba:	e1 b8 00 42 	mfsr	r8,0x108
8000b9be:	ef 48 ff e0 	st.w	r7[-32],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000b9c2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000b9c6:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b9ca:	30 28       	mov	r8,2
8000b9cc:	f0 09 18 00 	cp.b	r9,r8
8000b9d0:	c0 31       	brne	8000b9d6 <main+0xf9a>
    return false;
8000b9d2:	30 08       	mov	r8,0
8000b9d4:	c4 38       	rjmp	8000ba5a <main+0x101e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000b9d6:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000b9da:	f1 39 00 08 	ld.ub	r9,r8[8]
8000b9de:	30 18       	mov	r8,1
8000b9e0:	f0 09 18 00 	cp.b	r9,r8
8000b9e4:	c0 31       	brne	8000b9ea <main+0xfae>
    return true;
8000b9e6:	30 18       	mov	r8,1
8000b9e8:	c3 98       	rjmp	8000ba5a <main+0x101e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000b9ea:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000b9ee:	70 09       	ld.w	r9,r8[0x0]
8000b9f0:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000b9f4:	70 18       	ld.w	r8,r8[0x4]
8000b9f6:	10 39       	cp.w	r9,r8
8000b9f8:	e0 88 00 1a 	brls	8000ba2c <main+0xff0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000b9fc:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000ba00:	70 09       	ld.w	r9,r8[0x0]
8000ba02:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000ba06:	12 38       	cp.w	r8,r9
8000ba08:	c1 02       	brcc	8000ba28 <main+0xfec>
8000ba0a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000ba0e:	70 19       	ld.w	r9,r8[0x4]
8000ba10:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000ba14:	12 38       	cp.w	r8,r9
8000ba16:	e0 88 00 09 	brls	8000ba28 <main+0xfec>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000ba1a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000ba1e:	30 18       	mov	r8,1
8000ba20:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000ba24:	30 18       	mov	r8,1
8000ba26:	c1 a8       	rjmp	8000ba5a <main+0x101e>
    }
    return false;
8000ba28:	30 08       	mov	r8,0
8000ba2a:	c1 88       	rjmp	8000ba5a <main+0x101e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000ba2c:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000ba30:	70 09       	ld.w	r9,r8[0x0]
8000ba32:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000ba36:	12 38       	cp.w	r8,r9
8000ba38:	c0 93       	brcs	8000ba4a <main+0x100e>
8000ba3a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000ba3e:	70 19       	ld.w	r9,r8[0x4]
8000ba40:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000ba44:	12 38       	cp.w	r8,r9
8000ba46:	e0 88 00 09 	brls	8000ba58 <main+0x101c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000ba4a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000ba4e:	30 18       	mov	r8,1
8000ba50:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000ba54:	30 18       	mov	r8,1
8000ba56:	c0 28       	rjmp	8000ba5a <main+0x101e>
    }
    return false;
8000ba58:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000ba5a:	58 08       	cp.w	r8,0
8000ba5c:	ca b0       	breq	8000b9b2 <main+0xf76>
				cpu_delay_ms(500, EC_CPU_CLOCK_FREQ);
				switch (electroclaveState)
8000ba5e:	4f a8       	lddpc	r8,8000bc44 <main+0x1208>
8000ba60:	11 88       	ld.ub	r8,r8[0x0]
8000ba62:	58 58       	cp.w	r8,5
8000ba64:	c0 51       	brne	8000ba6e <main+0x1032>
				{
					case STATE_SANITIZE:
						display_text(IDX_DIRTY);
8000ba66:	30 3c       	mov	r12,3
8000ba68:	f0 1f 00 70 	mcall	8000bc28 <main+0x11ec>
						break;
8000ba6c:	c0 48       	rjmp	8000ba74 <main+0x1038>
					
					default:
						display_text(IDX_CLEAN);
8000ba6e:	30 1c       	mov	r12,1
8000ba70:	f0 1f 00 6e 	mcall	8000bc28 <main+0x11ec>
						break;
				}

				electroclaveState = STATE_SHUTDOWN_PROCESSES;
8000ba74:	4f 49       	lddpc	r9,8000bc44 <main+0x1208>
8000ba76:	30 88       	mov	r8,8
8000ba78:	b2 88       	st.b	r9[0x0],r8
				print_ecdbg("Door latch opened, shutting down all processes\r\n");
8000ba7a:	fe fc 02 5e 	ld.w	r12,pc[606]
8000ba7e:	f0 1f 00 7e 	mcall	8000bc74 <main+0x1238>
				firstTimeThroughDoorLatch = 0;
8000ba82:	4f e9       	lddpc	r9,8000bc78 <main+0x123c>
8000ba84:	30 08       	mov	r8,0
8000ba86:	b2 88       	st.b	r9[0x0],r8
8000ba88:	4f 78       	lddpc	r8,8000bc64 <main+0x1228>
8000ba8a:	ef 48 ff e4 	st.w	r7[-28],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000ba8e:	e1 b8 00 42 	mfsr	r8,0x108
8000ba92:	ef 48 ff e8 	st.w	r7[-24],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000ba96:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000ba9a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000ba9e:	30 28       	mov	r8,2
8000baa0:	f0 09 18 00 	cp.b	r9,r8
8000baa4:	c0 31       	brne	8000baaa <main+0x106e>
    return false;
8000baa6:	30 08       	mov	r8,0
8000baa8:	c4 38       	rjmp	8000bb2e <main+0x10f2>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000baaa:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000baae:	f1 39 00 08 	ld.ub	r9,r8[8]
8000bab2:	30 18       	mov	r8,1
8000bab4:	f0 09 18 00 	cp.b	r9,r8
8000bab8:	c0 31       	brne	8000babe <main+0x1082>
    return true;
8000baba:	30 18       	mov	r8,1
8000babc:	c3 98       	rjmp	8000bb2e <main+0x10f2>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000babe:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bac2:	70 09       	ld.w	r9,r8[0x0]
8000bac4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bac8:	70 18       	ld.w	r8,r8[0x4]
8000baca:	10 39       	cp.w	r9,r8
8000bacc:	e0 88 00 1a 	brls	8000bb00 <main+0x10c4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000bad0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bad4:	70 09       	ld.w	r9,r8[0x0]
8000bad6:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bada:	12 38       	cp.w	r8,r9
8000badc:	c1 02       	brcc	8000bafc <main+0x10c0>
8000bade:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bae2:	70 19       	ld.w	r9,r8[0x4]
8000bae4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bae8:	12 38       	cp.w	r8,r9
8000baea:	e0 88 00 09 	brls	8000bafc <main+0x10c0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000baee:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000baf2:	30 18       	mov	r8,1
8000baf4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000baf8:	30 18       	mov	r8,1
8000bafa:	c1 a8       	rjmp	8000bb2e <main+0x10f2>
    }
    return false;
8000bafc:	30 08       	mov	r8,0
8000bafe:	c1 88       	rjmp	8000bb2e <main+0x10f2>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000bb00:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bb04:	70 09       	ld.w	r9,r8[0x0]
8000bb06:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bb0a:	12 38       	cp.w	r8,r9
8000bb0c:	c0 93       	brcs	8000bb1e <main+0x10e2>
8000bb0e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bb12:	70 19       	ld.w	r9,r8[0x4]
8000bb14:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bb18:	12 38       	cp.w	r8,r9
8000bb1a:	e0 88 00 09 	brls	8000bb2c <main+0x10f0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000bb1e:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000bb22:	30 18       	mov	r8,1
8000bb24:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000bb28:	30 18       	mov	r8,1
8000bb2a:	c0 28       	rjmp	8000bb2e <main+0x10f2>
    }
    return false;
8000bb2c:	30 08       	mov	r8,0
				
			}
		} //if (!EC_DOOR_LATCHED)
		
		if (cpu_is_timeout(&debugTimer))
8000bb2e:	58 08       	cp.w	r8,0
8000bb30:	c5 e0       	breq	8000bbec <main+0x11b0>
8000bb32:	4c d8       	lddpc	r8,8000bc64 <main+0x1228>
8000bb34:	ef 48 ff ec 	st.w	r7[-20],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000bb38:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000bb3c:	30 28       	mov	r8,2
8000bb3e:	f3 68 00 08 	st.b	r9[8],r8
8000bb42:	e0 68 03 e8 	mov	r8,1000
8000bb46:	ef 48 ff f4 	st.w	r7[-12],r8
8000bb4a:	e0 68 12 00 	mov	r8,4608
8000bb4e:	ea 18 00 7a 	orh	r8,0x7a
8000bb52:	ef 48 ff f0 	st.w	r7[-16],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000bb56:	ee fa ff f4 	ld.w	r10,r7[-12]
8000bb5a:	ef 4a fe 8c 	st.w	r7[-372],r10
8000bb5e:	30 08       	mov	r8,0
8000bb60:	ef 48 fe 88 	st.w	r7[-376],r8
8000bb64:	ee fc ff f0 	ld.w	r12,r7[-16]
8000bb68:	ef 4c fe 84 	st.w	r7[-380],r12
8000bb6c:	30 0a       	mov	r10,0
8000bb6e:	ef 4a fe 80 	st.w	r7[-384],r10
8000bb72:	ee f9 fe 88 	ld.w	r9,r7[-376]
8000bb76:	ee f8 fe 84 	ld.w	r8,r7[-380]
8000bb7a:	b1 39       	mul	r9,r8
8000bb7c:	ee f8 fe 80 	ld.w	r8,r7[-384]
8000bb80:	ee fc fe 8c 	ld.w	r12,r7[-372]
8000bb84:	b9 38       	mul	r8,r12
8000bb86:	10 09       	add	r9,r8
8000bb88:	ee f8 fe 8c 	ld.w	r8,r7[-372]
8000bb8c:	ee fc fe 84 	ld.w	r12,r7[-380]
8000bb90:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000bb94:	16 09       	add	r9,r11
8000bb96:	12 9b       	mov	r11,r9
8000bb98:	e0 68 03 e7 	mov	r8,999
8000bb9c:	30 09       	mov	r9,0
8000bb9e:	10 0a       	add	r10,r8
8000bba0:	f6 09 00 4b 	adc	r11,r11,r9
8000bba4:	e0 68 03 e8 	mov	r8,1000
8000bba8:	30 09       	mov	r9,0
8000bbaa:	f0 1f 00 2e 	mcall	8000bc60 <main+0x1224>
8000bbae:	14 98       	mov	r8,r10
8000bbb0:	16 99       	mov	r9,r11
		{
			cpu_stop_timeout(&debugTimer);
			cpu_set_timeout((EC_ONE_SECOND/2), &debugTimer);
8000bbb2:	a1 98       	lsr	r8,0x1
8000bbb4:	ef 48 ff fc 	st.w	r7[-4],r8
8000bbb8:	4a b8       	lddpc	r8,8000bc64 <main+0x1228>
8000bbba:	ef 48 ff f8 	st.w	r7[-8],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000bbbe:	e1 b8 00 42 	mfsr	r8,0x108
8000bbc2:	10 99       	mov	r9,r8
8000bbc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bbc8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000bbca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bbce:	70 09       	ld.w	r9,r8[0x0]
8000bbd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbd4:	10 09       	add	r9,r8
8000bbd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bbda:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000bbdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bbe0:	30 08       	mov	r8,0
8000bbe2:	f3 68 00 08 	st.b	r9[8],r8
			gpio_toggle_pin(ECLAVE_DEBUG_LED);
8000bbe6:	37 cc       	mov	r12,124
8000bbe8:	f0 1f 00 3d 	mcall	8000bcdc <main+0x12a0>
		}
		
		service_ecdbg_input();
8000bbec:	f0 1f 00 3d 	mcall	8000bce0 <main+0x12a4>

	} //while(true)
8000bbf0:	fe 9f f7 bb 	bral	8000ab66 <main+0x12a>
8000bbf4:	80 00       	ld.sh	r0,r0[0x0]
8000bbf6:	7f f8       	ld.w	r8,pc[0x7c]
8000bbf8:	80 00       	ld.sh	r0,r0[0x0]
8000bbfa:	71 cc       	ld.w	r12,r8[0x70]
8000bbfc:	80 00       	ld.sh	r0,r0[0x0]
8000bbfe:	71 38       	ld.w	r8,r8[0x4c]
8000bc00:	80 00       	ld.sh	r0,r0[0x0]
8000bc02:	97 d8       	st.w	r11[0x34],r8
8000bc04:	80 00       	ld.sh	r0,r0[0x0]
8000bc06:	72 cc       	ld.w	r12,r9[0x30]
8000bc08:	80 00       	ld.sh	r0,r0[0x0]
8000bc0a:	6e 68       	ld.w	r8,r7[0x18]
8000bc0c:	80 00       	ld.sh	r0,r0[0x0]
8000bc0e:	6f a0       	ld.w	r0,r7[0x68]
8000bc10:	80 00       	ld.sh	r0,r0[0x0]
8000bc12:	5d f0       	*unknown*
8000bc14:	80 00       	ld.sh	r0,r0[0x0]
8000bc16:	5c f0       	rol	r0
8000bc18:	80 00       	ld.sh	r0,r0[0x0]
8000bc1a:	5c 38       	neg	r8
8000bc1c:	80 00       	ld.sh	r0,r0[0x0]
8000bc1e:	32 38       	mov	r8,35
8000bc20:	80 00       	ld.sh	r0,r0[0x0]
8000bc22:	32 5c       	mov	r12,37
8000bc24:	80 00       	ld.sh	r0,r0[0x0]
8000bc26:	9d 40       	st.w	lr[0x10],r0
8000bc28:	80 00       	ld.sh	r0,r0[0x0]
8000bc2a:	71 54       	ld.w	r4,r8[0x54]
8000bc2c:	80 00       	ld.sh	r0,r0[0x0]
8000bc2e:	80 58       	ld.sh	r8,r0[0xa]
8000bc30:	80 00       	ld.sh	r0,r0[0x0]
8000bc32:	4c 3c       	lddpc	r12,8000bd3c <__avr32_f64_mul+0x58>
8000bc34:	80 00       	ld.sh	r0,r0[0x0]
8000bc36:	80 a4       	ld.uh	r4,r0[0x4]
8000bc38:	80 00       	ld.sh	r0,r0[0x0]
8000bc3a:	4b 02       	lddpc	r2,8000bcf8 <__avr32_f64_mul+0x14>
8000bc3c:	80 00       	ld.sh	r0,r0[0x0]
8000bc3e:	60 f0       	ld.w	r0,r0[0x3c]
8000bc40:	80 00       	ld.sh	r0,r0[0x0]
8000bc42:	7c 54       	ld.w	r4,lr[0x14]
8000bc44:	00 00       	add	r0,r0
8000bc46:	0c 1e       	sub	lr,r6
8000bc48:	80 00       	ld.sh	r0,r0[0x0]
8000bc4a:	9a cc       	ld.uh	r12,sp[0x8]
8000bc4c:	80 00       	ld.sh	r0,r0[0x0]
8000bc4e:	9d 64       	st.w	lr[0x18],r4
8000bc50:	80 00       	ld.sh	r0,r0[0x0]
8000bc52:	a1 e4       	*unknown*
8000bc54:	80 00       	ld.sh	r0,r0[0x0]
8000bc56:	a5 90       	lsr	r0,0x5
8000bc58:	80 00       	ld.sh	r0,r0[0x0]
8000bc5a:	a6 d4       	st.b	r3[0x5],r4
8000bc5c:	80 00       	ld.sh	r0,r0[0x0]
8000bc5e:	4b 3c       	lddpc	r12,8000bd28 <__avr32_f64_mul+0x44>
8000bc60:	80 00       	ld.sh	r0,r0[0x0]
8000bc62:	c4 3a       	rjmp	8000b8e8 <main+0xeac>
8000bc64:	00 00       	add	r0,r0
8000bc66:	0b c0       	ld.ub	r0,r5[0x4]
8000bc68:	80 01       	ld.sh	r1,r0[0x0]
8000bc6a:	1f d8       	ld.ub	r8,pc[0x5]
8000bc6c:	80 00       	ld.sh	r0,r0[0x0]
8000bc6e:	4a c6       	lddpc	r6,8000bd1c <__avr32_f64_mul+0x38>
8000bc70:	80 00       	ld.sh	r0,r0[0x0]
8000bc72:	6d 74       	ld.w	r4,r6[0x5c]
8000bc74:	80 00       	ld.sh	r0,r0[0x0]
8000bc76:	33 38       	mov	r8,51
8000bc78:	00 00       	add	r0,r0
8000bc7a:	00 0c       	add	r12,r0
8000bc7c:	80 00       	ld.sh	r0,r0[0x0]
8000bc7e:	6d 8c       	ld.w	r12,r6[0x60]
8000bc80:	80 00       	ld.sh	r0,r0[0x0]
8000bc82:	6d b0       	ld.w	r0,r6[0x6c]
8000bc84:	80 00       	ld.sh	r0,r0[0x0]
8000bc86:	77 14       	ld.w	r4,r11[0x44]
8000bc88:	80 00       	ld.sh	r0,r0[0x0]
8000bc8a:	79 e8       	ld.w	r8,r12[0x78]
8000bc8c:	80 00       	ld.sh	r0,r0[0x0]
8000bc8e:	7e 7c       	ld.w	r12,pc[0x1c]
8000bc90:	80 00       	ld.sh	r0,r0[0x0]
8000bc92:	7f e4       	ld.w	r4,pc[0x78]
8000bc94:	80 00       	ld.sh	r0,r0[0x0]
8000bc96:	6d d8       	ld.w	r8,r6[0x74]
8000bc98:	80 00       	ld.sh	r0,r0[0x0]
8000bc9a:	6d ec       	ld.w	r12,r6[0x78]
8000bc9c:	00 00       	add	r0,r0
8000bc9e:	07 d1       	ld.ub	r1,r3[0x5]
8000bca0:	00 00       	add	r0,r0
8000bca2:	0b ac       	ld.ub	r12,r5[0x2]
8000bca4:	00 00       	add	r0,r0
8000bca6:	0b 8c       	ld.ub	r12,r5[0x0]
8000bca8:	80 00       	ld.sh	r0,r0[0x0]
8000bcaa:	81 24       	st.w	r0[0x8],r4
8000bcac:	00 00       	add	r0,r0
8000bcae:	0b b4       	ld.ub	r4,r5[0x3]
8000bcb0:	80 00       	ld.sh	r0,r0[0x0]
8000bcb2:	63 4c       	ld.w	r12,r1[0x50]
8000bcb4:	00 00       	add	r0,r0
8000bcb6:	08 34       	cp.w	r4,r4
8000bcb8:	00 00       	add	r0,r0
8000bcba:	0b dc       	ld.ub	r12,r5[0x5]
8000bcbc:	00 00       	add	r0,r0
8000bcbe:	0b a0       	ld.ub	r0,r5[0x2]
8000bcc0:	80 00       	ld.sh	r0,r0[0x0]
8000bcc2:	94 94       	ld.uh	r4,r10[0x2]
8000bcc4:	00 00       	add	r0,r0
8000bcc6:	0c e8       	st.h	--r6,r8
8000bcc8:	80 00       	ld.sh	r0,r0[0x0]
8000bcca:	95 64       	st.w	r10[0x18],r4
8000bccc:	80 00       	ld.sh	r0,r0[0x0]
8000bcce:	6e 24       	ld.w	r4,r7[0x8]
8000bcd0:	00 00       	add	r0,r0
8000bcd2:	0b e8       	ld.ub	r8,r5[0x6]
8000bcd4:	80 00       	ld.sh	r0,r0[0x0]
8000bcd6:	81 f4       	st.w	r0[0x3c],r4
8000bcd8:	80 00       	ld.sh	r0,r0[0x0]
8000bcda:	6e 34       	ld.w	r4,r7[0xc]
8000bcdc:	80 00       	ld.sh	r0,r0[0x0]
8000bcde:	4b 76       	lddpc	r6,8000bdb8 <__avr32_f64_mul_op1_subnormal+0x3a>
8000bce0:	80 00       	ld.sh	r0,r0[0x0]
8000bce2:	a6 ec       	st.b	r3[0x6],r12

8000bce4 <__avr32_f64_mul>:
8000bce4:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000bce8:	e0 80 00 dc 	breq	8000bea0 <__avr32_f64_mul_op1_zero>
8000bcec:	d4 21       	pushm	r4-r7,lr
8000bcee:	f7 e9 20 0e 	eor	lr,r11,r9
8000bcf2:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000bcf6:	30 15       	mov	r5,1
8000bcf8:	c4 30       	breq	8000bd7e <__avr32_f64_mul_op1_subnormal>
8000bcfa:	ab 6b       	lsl	r11,0xa
8000bcfc:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000bd00:	ab 6a       	lsl	r10,0xa
8000bd02:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000bd06:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000bd0a:	c5 c0       	breq	8000bdc2 <__avr32_f64_mul_op2_subnormal>
8000bd0c:	a1 78       	lsl	r8,0x1
8000bd0e:	5c f9       	rol	r9
8000bd10:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000bd14:	e0 47 07 ff 	cp.w	r7,2047
8000bd18:	c7 70       	breq	8000be06 <__avr32_f64_mul_op_nan_or_inf>
8000bd1a:	e0 46 07 ff 	cp.w	r6,2047
8000bd1e:	c7 40       	breq	8000be06 <__avr32_f64_mul_op_nan_or_inf>
8000bd20:	ee 06 00 0c 	add	r12,r7,r6
8000bd24:	e0 2c 03 fe 	sub	r12,1022
8000bd28:	f6 08 06 44 	mulu.d	r4,r11,r8
8000bd2c:	f4 09 07 44 	macu.d	r4,r10,r9
8000bd30:	f4 08 06 46 	mulu.d	r6,r10,r8
8000bd34:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000bd38:	08 07       	add	r7,r4
8000bd3a:	f4 05 00 4a 	adc	r10,r10,r5
8000bd3e:	5c 0b       	acr	r11
8000bd40:	ed bb 00 14 	bld	r11,0x14
8000bd44:	c0 50       	breq	8000bd4e <__avr32_f64_mul+0x6a>
8000bd46:	a1 77       	lsl	r7,0x1
8000bd48:	5c fa       	rol	r10
8000bd4a:	5c fb       	rol	r11
8000bd4c:	20 1c       	sub	r12,1
8000bd4e:	58 0c       	cp.w	r12,0
8000bd50:	e0 8a 00 6f 	brle	8000be2e <__avr32_f64_mul_res_subnormal>
8000bd54:	e0 4c 07 ff 	cp.w	r12,2047
8000bd58:	e0 84 00 9c 	brge	8000be90 <__avr32_f64_mul_res_inf>
8000bd5c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000bd60:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000bd64:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000bd68:	ee 17 80 00 	eorh	r7,0x8000
8000bd6c:	f1 b7 04 20 	satu	r7,0x1
8000bd70:	0e 0a       	add	r10,r7
8000bd72:	5c 0b       	acr	r11
8000bd74:	ed be 00 1f 	bld	lr,0x1f
8000bd78:	ef bb 00 1f 	bst	r11,0x1f
8000bd7c:	d8 22       	popm	r4-r7,pc

8000bd7e <__avr32_f64_mul_op1_subnormal>:
8000bd7e:	e4 1b 00 0f 	andh	r11,0xf
8000bd82:	f4 0c 12 00 	clz	r12,r10
8000bd86:	f6 06 12 00 	clz	r6,r11
8000bd8a:	f7 bc 03 e1 	sublo	r12,-31
8000bd8e:	f8 06 17 30 	movlo	r6,r12
8000bd92:	f7 b6 02 01 	subhs	r6,1
8000bd96:	e0 46 00 20 	cp.w	r6,32
8000bd9a:	c0 d4       	brge	8000bdb4 <__avr32_f64_mul_op1_subnormal+0x36>
8000bd9c:	ec 0c 11 20 	rsub	r12,r6,32
8000bda0:	f6 06 09 4b 	lsl	r11,r11,r6
8000bda4:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000bda8:	18 4b       	or	r11,r12
8000bdaa:	f4 06 09 4a 	lsl	r10,r10,r6
8000bdae:	20 b6       	sub	r6,11
8000bdb0:	0c 17       	sub	r7,r6
8000bdb2:	ca ab       	rjmp	8000bd06 <__avr32_f64_mul+0x22>
8000bdb4:	f4 06 09 4b 	lsl	r11,r10,r6
8000bdb8:	c6 40       	breq	8000be80 <__avr32_f64_mul_res_zero>
8000bdba:	30 0a       	mov	r10,0
8000bdbc:	20 b6       	sub	r6,11
8000bdbe:	0c 17       	sub	r7,r6
8000bdc0:	ca 3b       	rjmp	8000bd06 <__avr32_f64_mul+0x22>

8000bdc2 <__avr32_f64_mul_op2_subnormal>:
8000bdc2:	e4 19 00 0f 	andh	r9,0xf
8000bdc6:	f0 0c 12 00 	clz	r12,r8
8000bdca:	f2 05 12 00 	clz	r5,r9
8000bdce:	f7 bc 03 ea 	sublo	r12,-22
8000bdd2:	f8 05 17 30 	movlo	r5,r12
8000bdd6:	f7 b5 02 0a 	subhs	r5,10
8000bdda:	e0 45 00 20 	cp.w	r5,32
8000bdde:	c0 d4       	brge	8000bdf8 <__avr32_f64_mul_op2_subnormal+0x36>
8000bde0:	ea 0c 11 20 	rsub	r12,r5,32
8000bde4:	f2 05 09 49 	lsl	r9,r9,r5
8000bde8:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000bdec:	18 49       	or	r9,r12
8000bdee:	f0 05 09 48 	lsl	r8,r8,r5
8000bdf2:	20 25       	sub	r5,2
8000bdf4:	0a 16       	sub	r6,r5
8000bdf6:	c8 fb       	rjmp	8000bd14 <__avr32_f64_mul+0x30>
8000bdf8:	f0 05 09 49 	lsl	r9,r8,r5
8000bdfc:	c4 20       	breq	8000be80 <__avr32_f64_mul_res_zero>
8000bdfe:	30 08       	mov	r8,0
8000be00:	20 25       	sub	r5,2
8000be02:	0a 16       	sub	r6,r5
8000be04:	c8 8b       	rjmp	8000bd14 <__avr32_f64_mul+0x30>

8000be06 <__avr32_f64_mul_op_nan_or_inf>:
8000be06:	e4 19 00 0f 	andh	r9,0xf
8000be0a:	e4 1b 00 0f 	andh	r11,0xf
8000be0e:	14 4b       	or	r11,r10
8000be10:	10 49       	or	r9,r8
8000be12:	e0 47 07 ff 	cp.w	r7,2047
8000be16:	c0 91       	brne	8000be28 <__avr32_f64_mul_op1_not_naninf>
8000be18:	58 0b       	cp.w	r11,0
8000be1a:	c3 81       	brne	8000be8a <__avr32_f64_mul_res_nan>
8000be1c:	e0 46 07 ff 	cp.w	r6,2047
8000be20:	c3 81       	brne	8000be90 <__avr32_f64_mul_res_inf>
8000be22:	58 09       	cp.w	r9,0
8000be24:	c3 60       	breq	8000be90 <__avr32_f64_mul_res_inf>
8000be26:	c3 28       	rjmp	8000be8a <__avr32_f64_mul_res_nan>

8000be28 <__avr32_f64_mul_op1_not_naninf>:
8000be28:	58 09       	cp.w	r9,0
8000be2a:	c3 30       	breq	8000be90 <__avr32_f64_mul_res_inf>
8000be2c:	c2 f8       	rjmp	8000be8a <__avr32_f64_mul_res_nan>

8000be2e <__avr32_f64_mul_res_subnormal>:
8000be2e:	5c 3c       	neg	r12
8000be30:	2f fc       	sub	r12,-1
8000be32:	f1 bc 04 c0 	satu	r12,0x6
8000be36:	e0 4c 00 20 	cp.w	r12,32
8000be3a:	c1 14       	brge	8000be5c <__avr32_f64_mul_res_subnormal+0x2e>
8000be3c:	f8 08 11 20 	rsub	r8,r12,32
8000be40:	0e 46       	or	r6,r7
8000be42:	ee 0c 0a 47 	lsr	r7,r7,r12
8000be46:	f4 08 09 49 	lsl	r9,r10,r8
8000be4a:	12 47       	or	r7,r9
8000be4c:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000be50:	f6 08 09 49 	lsl	r9,r11,r8
8000be54:	12 4a       	or	r10,r9
8000be56:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000be5a:	c8 3b       	rjmp	8000bd60 <__avr32_f64_mul+0x7c>
8000be5c:	f8 08 11 20 	rsub	r8,r12,32
8000be60:	f9 b9 00 00 	moveq	r9,0
8000be64:	c0 30       	breq	8000be6a <__avr32_f64_mul_res_subnormal+0x3c>
8000be66:	f6 08 09 49 	lsl	r9,r11,r8
8000be6a:	0e 46       	or	r6,r7
8000be6c:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000be70:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000be74:	f3 ea 10 07 	or	r7,r9,r10
8000be78:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000be7c:	30 0b       	mov	r11,0
8000be7e:	c7 1b       	rjmp	8000bd60 <__avr32_f64_mul+0x7c>

8000be80 <__avr32_f64_mul_res_zero>:
8000be80:	1c 9b       	mov	r11,lr
8000be82:	e6 1b 80 00 	andh	r11,0x8000,COH
8000be86:	30 0a       	mov	r10,0
8000be88:	d8 22       	popm	r4-r7,pc

8000be8a <__avr32_f64_mul_res_nan>:
8000be8a:	3f fb       	mov	r11,-1
8000be8c:	3f fa       	mov	r10,-1
8000be8e:	d8 22       	popm	r4-r7,pc

8000be90 <__avr32_f64_mul_res_inf>:
8000be90:	f0 6b 00 00 	mov	r11,-1048576
8000be94:	ed be 00 1f 	bld	lr,0x1f
8000be98:	ef bb 00 1f 	bst	r11,0x1f
8000be9c:	30 0a       	mov	r10,0
8000be9e:	d8 22       	popm	r4-r7,pc

8000bea0 <__avr32_f64_mul_op1_zero>:
8000bea0:	f7 e9 20 0b 	eor	r11,r11,r9
8000bea4:	e6 1b 80 00 	andh	r11,0x8000,COH
8000bea8:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000beac:	e0 4c 07 ff 	cp.w	r12,2047
8000beb0:	5e 1c       	retne	r12
8000beb2:	3f fa       	mov	r10,-1
8000beb4:	3f fb       	mov	r11,-1
8000beb6:	5e fc       	retal	r12

8000beb8 <__avr32_f64_sub_from_add>:
8000beb8:	ee 19 80 00 	eorh	r9,0x8000

8000bebc <__avr32_f64_sub>:
8000bebc:	f7 e9 20 0c 	eor	r12,r11,r9
8000bec0:	e0 86 00 ca 	brmi	8000c054 <__avr32_f64_add_from_sub>
8000bec4:	eb cd 40 e0 	pushm	r5-r7,lr
8000bec8:	16 9c       	mov	r12,r11
8000beca:	e6 1c 80 00 	andh	r12,0x8000,COH
8000bece:	bf db       	cbr	r11,0x1f
8000bed0:	bf d9       	cbr	r9,0x1f
8000bed2:	10 3a       	cp.w	r10,r8
8000bed4:	f2 0b 13 00 	cpc	r11,r9
8000bed8:	c0 92       	brcc	8000beea <__avr32_f64_sub+0x2e>
8000beda:	16 97       	mov	r7,r11
8000bedc:	12 9b       	mov	r11,r9
8000bede:	0e 99       	mov	r9,r7
8000bee0:	14 97       	mov	r7,r10
8000bee2:	10 9a       	mov	r10,r8
8000bee4:	0e 98       	mov	r8,r7
8000bee6:	ee 1c 80 00 	eorh	r12,0x8000
8000beea:	f6 07 16 14 	lsr	r7,r11,0x14
8000beee:	ab 7b       	lsl	r11,0xb
8000bef0:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000bef4:	ab 7a       	lsl	r10,0xb
8000bef6:	bf bb       	sbr	r11,0x1f
8000bef8:	f2 06 16 14 	lsr	r6,r9,0x14
8000befc:	c4 40       	breq	8000bf84 <__avr32_f64_sub_opL_subnormal>
8000befe:	ab 79       	lsl	r9,0xb
8000bf00:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000bf04:	ab 78       	lsl	r8,0xb
8000bf06:	bf b9       	sbr	r9,0x1f

8000bf08 <__avr32_f64_sub_opL_subnormal_done>:
8000bf08:	e0 47 07 ff 	cp.w	r7,2047
8000bf0c:	c4 f0       	breq	8000bfaa <__avr32_f64_sub_opH_nan_or_inf>
8000bf0e:	0e 26       	rsub	r6,r7
8000bf10:	c1 20       	breq	8000bf34 <__avr32_f64_sub_shift_done>
8000bf12:	ec 05 11 20 	rsub	r5,r6,32
8000bf16:	e0 46 00 20 	cp.w	r6,32
8000bf1a:	c7 c2       	brcc	8000c012 <__avr32_f64_sub_longshift>
8000bf1c:	f0 05 09 4e 	lsl	lr,r8,r5
8000bf20:	f2 05 09 45 	lsl	r5,r9,r5
8000bf24:	f0 06 0a 48 	lsr	r8,r8,r6
8000bf28:	f2 06 0a 49 	lsr	r9,r9,r6
8000bf2c:	0a 48       	or	r8,r5
8000bf2e:	58 0e       	cp.w	lr,0
8000bf30:	5f 1e       	srne	lr
8000bf32:	1c 48       	or	r8,lr

8000bf34 <__avr32_f64_sub_shift_done>:
8000bf34:	10 1a       	sub	r10,r8
8000bf36:	f6 09 01 4b 	sbc	r11,r11,r9
8000bf3a:	f6 06 12 00 	clz	r6,r11
8000bf3e:	c0 e0       	breq	8000bf5a <__avr32_f64_sub_longnormalize_done>
8000bf40:	c7 83       	brcs	8000c030 <__avr32_f64_sub_longnormalize>
8000bf42:	ec 0e 11 20 	rsub	lr,r6,32
8000bf46:	f6 06 09 4b 	lsl	r11,r11,r6
8000bf4a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000bf4e:	1c 4b       	or	r11,lr
8000bf50:	f4 06 09 4a 	lsl	r10,r10,r6
8000bf54:	0c 17       	sub	r7,r6
8000bf56:	e0 8a 00 39 	brle	8000bfc8 <__avr32_f64_sub_subnormal_result>

8000bf5a <__avr32_f64_sub_longnormalize_done>:
8000bf5a:	f4 09 15 15 	lsl	r9,r10,0x15
8000bf5e:	ab 9a       	lsr	r10,0xb
8000bf60:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000bf64:	ab 9b       	lsr	r11,0xb
8000bf66:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000bf6a:	18 4b       	or	r11,r12

8000bf6c <__avr32_f64_sub_round>:
8000bf6c:	fc 17 80 00 	movh	r7,0x8000
8000bf70:	ed ba 00 00 	bld	r10,0x0
8000bf74:	f7 b7 01 ff 	subne	r7,-1
8000bf78:	0e 39       	cp.w	r9,r7
8000bf7a:	5f 29       	srhs	r9
8000bf7c:	12 0a       	add	r10,r9
8000bf7e:	5c 0b       	acr	r11
8000bf80:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000bf84 <__avr32_f64_sub_opL_subnormal>:
8000bf84:	ab 79       	lsl	r9,0xb
8000bf86:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000bf8a:	ab 78       	lsl	r8,0xb
8000bf8c:	f3 e8 10 0e 	or	lr,r9,r8
8000bf90:	f9 b6 01 01 	movne	r6,1
8000bf94:	ee 0e 11 00 	rsub	lr,r7,0
8000bf98:	f9 b7 00 01 	moveq	r7,1
8000bf9c:	ef bb 00 1f 	bst	r11,0x1f
8000bfa0:	f7 ea 10 0e 	or	lr,r11,r10
8000bfa4:	f9 b7 00 00 	moveq	r7,0
8000bfa8:	cb 0b       	rjmp	8000bf08 <__avr32_f64_sub_opL_subnormal_done>

8000bfaa <__avr32_f64_sub_opH_nan_or_inf>:
8000bfaa:	bf db       	cbr	r11,0x1f
8000bfac:	f7 ea 10 0e 	or	lr,r11,r10
8000bfb0:	c0 81       	brne	8000bfc0 <__avr32_f64_sub_return_nan>
8000bfb2:	e0 46 07 ff 	cp.w	r6,2047
8000bfb6:	c0 50       	breq	8000bfc0 <__avr32_f64_sub_return_nan>
8000bfb8:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000bfbc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000bfc0 <__avr32_f64_sub_return_nan>:
8000bfc0:	3f fa       	mov	r10,-1
8000bfc2:	3f fb       	mov	r11,-1
8000bfc4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000bfc8 <__avr32_f64_sub_subnormal_result>:
8000bfc8:	5c 37       	neg	r7
8000bfca:	2f f7       	sub	r7,-1
8000bfcc:	f1 b7 04 c0 	satu	r7,0x6
8000bfd0:	e0 47 00 20 	cp.w	r7,32
8000bfd4:	c1 14       	brge	8000bff6 <__avr32_f64_sub_subnormal_result+0x2e>
8000bfd6:	ee 08 11 20 	rsub	r8,r7,32
8000bfda:	f4 08 09 49 	lsl	r9,r10,r8
8000bfde:	5f 16       	srne	r6
8000bfe0:	f4 07 0a 4a 	lsr	r10,r10,r7
8000bfe4:	0c 4a       	or	r10,r6
8000bfe6:	f6 08 09 49 	lsl	r9,r11,r8
8000bfea:	f5 e9 10 0a 	or	r10,r10,r9
8000bfee:	f4 07 0a 4b 	lsr	r11,r10,r7
8000bff2:	30 07       	mov	r7,0
8000bff4:	cb 3b       	rjmp	8000bf5a <__avr32_f64_sub_longnormalize_done>
8000bff6:	ee 08 11 40 	rsub	r8,r7,64
8000bffa:	f6 08 09 49 	lsl	r9,r11,r8
8000bffe:	14 49       	or	r9,r10
8000c000:	5f 16       	srne	r6
8000c002:	f6 07 0a 4a 	lsr	r10,r11,r7
8000c006:	0c 4a       	or	r10,r6
8000c008:	30 0b       	mov	r11,0
8000c00a:	30 07       	mov	r7,0
8000c00c:	ca 7b       	rjmp	8000bf5a <__avr32_f64_sub_longnormalize_done>
8000c00e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c012 <__avr32_f64_sub_longshift>:
8000c012:	f1 b6 04 c0 	satu	r6,0x6
8000c016:	f0 0e 17 00 	moveq	lr,r8
8000c01a:	c0 40       	breq	8000c022 <__avr32_f64_sub_longshift+0x10>
8000c01c:	f2 05 09 4e 	lsl	lr,r9,r5
8000c020:	10 4e       	or	lr,r8
8000c022:	f2 06 0a 48 	lsr	r8,r9,r6
8000c026:	30 09       	mov	r9,0
8000c028:	58 0e       	cp.w	lr,0
8000c02a:	5f 1e       	srne	lr
8000c02c:	1c 48       	or	r8,lr
8000c02e:	c8 3b       	rjmp	8000bf34 <__avr32_f64_sub_shift_done>

8000c030 <__avr32_f64_sub_longnormalize>:
8000c030:	f4 06 12 00 	clz	r6,r10
8000c034:	f9 b7 03 00 	movlo	r7,0
8000c038:	f9 b6 03 00 	movlo	r6,0
8000c03c:	f9 bc 03 00 	movlo	r12,0
8000c040:	f7 b6 02 e0 	subhs	r6,-32
8000c044:	f4 06 09 4b 	lsl	r11,r10,r6
8000c048:	30 0a       	mov	r10,0
8000c04a:	0c 17       	sub	r7,r6
8000c04c:	fe 9a ff be 	brle	8000bfc8 <__avr32_f64_sub_subnormal_result>
8000c050:	c8 5b       	rjmp	8000bf5a <__avr32_f64_sub_longnormalize_done>
	...

8000c054 <__avr32_f64_add_from_sub>:
8000c054:	ee 19 80 00 	eorh	r9,0x8000

8000c058 <__avr32_f64_add>:
8000c058:	f7 e9 20 0c 	eor	r12,r11,r9
8000c05c:	fe 96 ff 2e 	brmi	8000beb8 <__avr32_f64_sub_from_add>
8000c060:	eb cd 40 e0 	pushm	r5-r7,lr
8000c064:	16 9c       	mov	r12,r11
8000c066:	e6 1c 80 00 	andh	r12,0x8000,COH
8000c06a:	bf db       	cbr	r11,0x1f
8000c06c:	bf d9       	cbr	r9,0x1f
8000c06e:	12 3b       	cp.w	r11,r9
8000c070:	c0 72       	brcc	8000c07e <__avr32_f64_add+0x26>
8000c072:	16 97       	mov	r7,r11
8000c074:	12 9b       	mov	r11,r9
8000c076:	0e 99       	mov	r9,r7
8000c078:	14 97       	mov	r7,r10
8000c07a:	10 9a       	mov	r10,r8
8000c07c:	0e 98       	mov	r8,r7
8000c07e:	30 0e       	mov	lr,0
8000c080:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000c084:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000c088:	b5 ab       	sbr	r11,0x14
8000c08a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000c08e:	c6 20       	breq	8000c152 <__avr32_f64_add_op2_subnormal>
8000c090:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000c094:	b5 a9       	sbr	r9,0x14
8000c096:	e0 47 07 ff 	cp.w	r7,2047
8000c09a:	c2 80       	breq	8000c0ea <__avr32_f64_add_opH_nan_or_inf>
8000c09c:	0e 26       	rsub	r6,r7
8000c09e:	c1 20       	breq	8000c0c2 <__avr32_f64_add_shift_done>
8000c0a0:	e0 46 00 36 	cp.w	r6,54
8000c0a4:	c1 52       	brcc	8000c0ce <__avr32_f64_add_res_of_done>
8000c0a6:	ec 05 11 20 	rsub	r5,r6,32
8000c0aa:	e0 46 00 20 	cp.w	r6,32
8000c0ae:	c3 52       	brcc	8000c118 <__avr32_f64_add_longshift>
8000c0b0:	f0 05 09 4e 	lsl	lr,r8,r5
8000c0b4:	f2 05 09 45 	lsl	r5,r9,r5
8000c0b8:	f0 06 0a 48 	lsr	r8,r8,r6
8000c0bc:	f2 06 0a 49 	lsr	r9,r9,r6
8000c0c0:	0a 48       	or	r8,r5

8000c0c2 <__avr32_f64_add_shift_done>:
8000c0c2:	10 0a       	add	r10,r8
8000c0c4:	f6 09 00 4b 	adc	r11,r11,r9
8000c0c8:	ed bb 00 15 	bld	r11,0x15
8000c0cc:	c3 40       	breq	8000c134 <__avr32_f64_add_res_of>

8000c0ce <__avr32_f64_add_res_of_done>:
8000c0ce:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000c0d2:	18 4b       	or	r11,r12

8000c0d4 <__avr32_f64_add_round>:
8000c0d4:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000c0d8:	18 4e       	or	lr,r12
8000c0da:	ee 1e 80 00 	eorh	lr,0x8000
8000c0de:	f1 be 04 20 	satu	lr,0x1
8000c0e2:	1c 0a       	add	r10,lr
8000c0e4:	5c 0b       	acr	r11
8000c0e6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c0ea <__avr32_f64_add_opH_nan_or_inf>:
8000c0ea:	b5 cb       	cbr	r11,0x14
8000c0ec:	f7 ea 10 0e 	or	lr,r11,r10
8000c0f0:	c1 01       	brne	8000c110 <__avr32_f64_add_return_nan>
8000c0f2:	e0 46 07 ff 	cp.w	r6,2047
8000c0f6:	c0 30       	breq	8000c0fc <__avr32_f64_add_opL_nan_or_inf>
8000c0f8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c0fc <__avr32_f64_add_opL_nan_or_inf>:
8000c0fc:	b5 c9       	cbr	r9,0x14
8000c0fe:	f3 e8 10 0e 	or	lr,r9,r8
8000c102:	c0 71       	brne	8000c110 <__avr32_f64_add_return_nan>
8000c104:	30 0a       	mov	r10,0
8000c106:	fc 1b 7f f0 	movh	r11,0x7ff0
8000c10a:	18 4b       	or	r11,r12
8000c10c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c110 <__avr32_f64_add_return_nan>:
8000c110:	3f fa       	mov	r10,-1
8000c112:	3f fb       	mov	r11,-1
8000c114:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c118 <__avr32_f64_add_longshift>:
8000c118:	f1 b6 04 c0 	satu	r6,0x6
8000c11c:	f0 0e 17 00 	moveq	lr,r8
8000c120:	c0 60       	breq	8000c12c <__avr32_f64_add_longshift+0x14>
8000c122:	f2 05 09 4e 	lsl	lr,r9,r5
8000c126:	58 08       	cp.w	r8,0
8000c128:	5f 18       	srne	r8
8000c12a:	10 4e       	or	lr,r8
8000c12c:	f2 06 0a 48 	lsr	r8,r9,r6
8000c130:	30 09       	mov	r9,0
8000c132:	cc 8b       	rjmp	8000c0c2 <__avr32_f64_add_shift_done>

8000c134 <__avr32_f64_add_res_of>:
8000c134:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000c138:	a1 9b       	lsr	r11,0x1
8000c13a:	5d 0a       	ror	r10
8000c13c:	5d 0e       	ror	lr
8000c13e:	2f f7       	sub	r7,-1
8000c140:	e0 47 07 ff 	cp.w	r7,2047
8000c144:	f9 ba 00 00 	moveq	r10,0
8000c148:	f9 bb 00 00 	moveq	r11,0
8000c14c:	f9 be 00 00 	moveq	lr,0
8000c150:	cb fb       	rjmp	8000c0ce <__avr32_f64_add_res_of_done>

8000c152 <__avr32_f64_add_op2_subnormal>:
8000c152:	30 16       	mov	r6,1
8000c154:	58 07       	cp.w	r7,0
8000c156:	ca 01       	brne	8000c096 <__avr32_f64_add+0x3e>
8000c158:	b5 cb       	cbr	r11,0x14
8000c15a:	10 0a       	add	r10,r8
8000c15c:	f6 09 00 4b 	adc	r11,r11,r9
8000c160:	18 4b       	or	r11,r12
8000c162:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	...

8000c168 <__avr32_u32_to_f64>:
8000c168:	f8 cb 00 00 	sub	r11,r12,0
8000c16c:	30 0c       	mov	r12,0
8000c16e:	c0 38       	rjmp	8000c174 <__avr32_s32_to_f64+0x4>

8000c170 <__avr32_s32_to_f64>:
8000c170:	18 9b       	mov	r11,r12
8000c172:	5c 4b       	abs	r11
8000c174:	30 0a       	mov	r10,0
8000c176:	5e 0b       	reteq	r11
8000c178:	d4 01       	pushm	lr
8000c17a:	e0 69 04 1e 	mov	r9,1054
8000c17e:	f6 08 12 00 	clz	r8,r11
8000c182:	c1 70       	breq	8000c1b0 <__avr32_s32_to_f64+0x40>
8000c184:	c0 c3       	brcs	8000c19c <__avr32_s32_to_f64+0x2c>
8000c186:	f0 0e 11 20 	rsub	lr,r8,32
8000c18a:	f6 08 09 4b 	lsl	r11,r11,r8
8000c18e:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000c192:	1c 4b       	or	r11,lr
8000c194:	f4 08 09 4a 	lsl	r10,r10,r8
8000c198:	10 19       	sub	r9,r8
8000c19a:	c0 b8       	rjmp	8000c1b0 <__avr32_s32_to_f64+0x40>
8000c19c:	f4 08 12 00 	clz	r8,r10
8000c1a0:	f9 b8 03 00 	movlo	r8,0
8000c1a4:	f7 b8 02 e0 	subhs	r8,-32
8000c1a8:	f4 08 09 4b 	lsl	r11,r10,r8
8000c1ac:	30 0a       	mov	r10,0
8000c1ae:	10 19       	sub	r9,r8
8000c1b0:	58 09       	cp.w	r9,0
8000c1b2:	e0 89 00 30 	brgt	8000c212 <__avr32_s32_to_f64+0xa2>
8000c1b6:	5c 39       	neg	r9
8000c1b8:	2f f9       	sub	r9,-1
8000c1ba:	e0 49 00 36 	cp.w	r9,54
8000c1be:	c0 43       	brcs	8000c1c6 <__avr32_s32_to_f64+0x56>
8000c1c0:	30 0b       	mov	r11,0
8000c1c2:	30 0a       	mov	r10,0
8000c1c4:	c2 68       	rjmp	8000c210 <__avr32_s32_to_f64+0xa0>
8000c1c6:	2f 69       	sub	r9,-10
8000c1c8:	f2 08 11 20 	rsub	r8,r9,32
8000c1cc:	e0 49 00 20 	cp.w	r9,32
8000c1d0:	c0 b2       	brcc	8000c1e6 <__avr32_s32_to_f64+0x76>
8000c1d2:	f4 08 09 4e 	lsl	lr,r10,r8
8000c1d6:	f6 08 09 48 	lsl	r8,r11,r8
8000c1da:	f4 09 0a 4a 	lsr	r10,r10,r9
8000c1de:	f6 09 0a 4b 	lsr	r11,r11,r9
8000c1e2:	10 4b       	or	r11,r8
8000c1e4:	c0 88       	rjmp	8000c1f4 <__avr32_s32_to_f64+0x84>
8000c1e6:	f6 08 09 4e 	lsl	lr,r11,r8
8000c1ea:	14 4e       	or	lr,r10
8000c1ec:	16 9a       	mov	r10,r11
8000c1ee:	30 0b       	mov	r11,0
8000c1f0:	f4 09 0a 4a 	lsr	r10,r10,r9
8000c1f4:	ed ba 00 00 	bld	r10,0x0
8000c1f8:	c0 92       	brcc	8000c20a <__avr32_s32_to_f64+0x9a>
8000c1fa:	1c 7e       	tst	lr,lr
8000c1fc:	c0 41       	brne	8000c204 <__avr32_s32_to_f64+0x94>
8000c1fe:	ed ba 00 01 	bld	r10,0x1
8000c202:	c0 42       	brcc	8000c20a <__avr32_s32_to_f64+0x9a>
8000c204:	2f fa       	sub	r10,-1
8000c206:	f7 bb 02 ff 	subhs	r11,-1
8000c20a:	5c fc       	rol	r12
8000c20c:	5d 0b       	ror	r11
8000c20e:	5d 0a       	ror	r10
8000c210:	d8 02       	popm	pc
8000c212:	e0 68 03 ff 	mov	r8,1023
8000c216:	ed ba 00 0b 	bld	r10,0xb
8000c21a:	f7 b8 00 ff 	subeq	r8,-1
8000c21e:	10 0a       	add	r10,r8
8000c220:	5c 0b       	acr	r11
8000c222:	f7 b9 03 fe 	sublo	r9,-2
8000c226:	e0 49 07 ff 	cp.w	r9,2047
8000c22a:	c0 55       	brlt	8000c234 <__avr32_s32_to_f64+0xc4>
8000c22c:	30 0a       	mov	r10,0
8000c22e:	fc 1b ff e0 	movh	r11,0xffe0
8000c232:	c0 c8       	rjmp	8000c24a <__floatsidf_return_op1>
8000c234:	ed bb 00 1f 	bld	r11,0x1f
8000c238:	f7 b9 01 01 	subne	r9,1
8000c23c:	ab 9a       	lsr	r10,0xb
8000c23e:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000c242:	a1 7b       	lsl	r11,0x1
8000c244:	ab 9b       	lsr	r11,0xb
8000c246:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000c24a <__floatsidf_return_op1>:
8000c24a:	a1 7c       	lsl	r12,0x1
8000c24c:	5d 0b       	ror	r11
8000c24e:	d8 02       	popm	pc

8000c250 <__avr32_f32_div>:
8000c250:	f7 ec 20 08 	eor	r8,r11,r12
8000c254:	a1 7c       	lsl	r12,0x1
8000c256:	a1 7b       	lsl	r11,0x1
8000c258:	c7 a0       	breq	8000c34c <__divsf_return_op1+0x16>
8000c25a:	18 7c       	tst	r12,r12
8000c25c:	f9 b9 00 00 	moveq	r9,0
8000c260:	c0 90       	breq	8000c272 <__avr32_f32_div+0x22>
8000c262:	f8 09 16 18 	lsr	r9,r12,0x18
8000c266:	c7 e0       	breq	8000c362 <__divsf_return_op1+0x2c>
8000c268:	e0 49 00 ff 	cp.w	r9,255
8000c26c:	c6 82       	brcc	8000c33c <__divsf_return_op1+0x6>
8000c26e:	a7 7c       	lsl	r12,0x7
8000c270:	bf bc       	sbr	r12,0x1f
8000c272:	f6 0a 16 18 	lsr	r10,r11,0x18
8000c276:	c7 e0       	breq	8000c372 <__divsf_return_op1+0x3c>
8000c278:	e0 4a 00 ff 	cp.w	r10,255
8000c27c:	c6 62       	brcc	8000c348 <__divsf_return_op1+0x12>
8000c27e:	a7 7b       	lsl	r11,0x7
8000c280:	bf bb       	sbr	r11,0x1f
8000c282:	58 09       	cp.w	r9,0
8000c284:	f5 bc 00 00 	subfeq	r12,0
8000c288:	5e 0d       	reteq	0
8000c28a:	1a d5       	st.w	--sp,r5
8000c28c:	bb 27       	st.d	--sp,r6
8000c28e:	14 19       	sub	r9,r10
8000c290:	28 19       	sub	r9,-127
8000c292:	fc 1a 80 00 	movh	r10,0x8000
8000c296:	a3 8c       	lsr	r12,0x2
8000c298:	f6 05 16 02 	lsr	r5,r11,0x2
8000c29c:	f4 0b 16 01 	lsr	r11,r10,0x1
8000c2a0:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8000c2a4:	5c d6       	com	r6
8000c2a6:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
8000c2aa:	f6 05 06 46 	mulu.d	r6,r11,r5
8000c2ae:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000c2b2:	f6 07 06 46 	mulu.d	r6,r11,r7
8000c2b6:	ee 0b 15 02 	lsl	r11,r7,0x2
8000c2ba:	f6 05 06 46 	mulu.d	r6,r11,r5
8000c2be:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000c2c2:	f6 07 06 46 	mulu.d	r6,r11,r7
8000c2c6:	ee 0b 15 02 	lsl	r11,r7,0x2
8000c2ca:	f6 05 06 46 	mulu.d	r6,r11,r5
8000c2ce:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000c2d2:	f6 07 06 46 	mulu.d	r6,r11,r7
8000c2d6:	ee 0b 15 02 	lsl	r11,r7,0x2
8000c2da:	f6 05 06 46 	mulu.d	r6,r11,r5
8000c2de:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000c2e2:	f6 07 06 46 	mulu.d	r6,r11,r7
8000c2e6:	ee 0b 15 02 	lsl	r11,r7,0x2
8000c2ea:	f6 0c 06 46 	mulu.d	r6,r11,r12
8000c2ee:	a5 8c       	lsr	r12,0x4
8000c2f0:	ed b7 00 1c 	bld	r7,0x1c
8000c2f4:	c0 40       	breq	8000c2fc <__avr32_f32_div+0xac>
8000c2f6:	a1 77       	lsl	r7,0x1
8000c2f8:	20 19       	sub	r9,1
8000c2fa:	a1 7c       	lsl	r12,0x1
8000c2fc:	58 09       	cp.w	r9,0
8000c2fe:	e0 8a 00 42 	brle	8000c382 <__avr32_f32_div_res_subnormal>
8000c302:	e0 17 ff e0 	andl	r7,0xffe0
8000c306:	e8 17 00 10 	orl	r7,0x10
8000c30a:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000c30e:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000c312:	58 0a       	cp.w	r10,0

8000c314 <__avr32_f32_div_round_subnormal>:
8000c314:	f8 0b 13 00 	cpc	r11,r12
8000c318:	5f 3b       	srlo	r11
8000c31a:	ea 0b 17 00 	moveq	r11,r5
8000c31e:	ee 0c 16 05 	lsr	r12,r7,0x5
8000c322:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8000c326:	bb 07       	ld.d	r6,sp++
8000c328:	1b 05       	ld.w	r5,sp++
8000c32a:	ed b8 00 1f 	bld	r8,0x1f
8000c32e:	ef bc 00 1f 	bst	r12,0x1f
8000c332:	16 0c       	add	r12,r11
8000c334:	5e fc       	retal	r12

8000c336 <__divsf_return_op1>:
8000c336:	a1 78       	lsl	r8,0x1
8000c338:	5d 0c       	ror	r12
8000c33a:	5e fc       	retal	r12
8000c33c:	5e 1e       	retne	-1
8000c33e:	fc 19 ff 00 	movh	r9,0xff00
8000c342:	12 3b       	cp.w	r11,r9
8000c344:	cf 93       	brcs	8000c336 <__divsf_return_op1>
8000c346:	5e fe       	retal	-1
8000c348:	5e 0d       	reteq	0
8000c34a:	5e fe       	retal	-1
8000c34c:	18 7c       	tst	r12,r12
8000c34e:	5e 0e       	reteq	-1
8000c350:	f8 09 16 18 	lsr	r9,r12,0x18
8000c354:	c0 70       	breq	8000c362 <__divsf_return_op1+0x2c>
8000c356:	e0 49 00 ff 	cp.w	r9,255
8000c35a:	cf 12       	brcc	8000c33c <__divsf_return_op1+0x6>
8000c35c:	fc 1c ff 00 	movh	r12,0xff00
8000c360:	ce bb       	rjmp	8000c336 <__divsf_return_op1>
8000c362:	a7 7c       	lsl	r12,0x7
8000c364:	f8 09 12 00 	clz	r9,r12
8000c368:	f8 09 09 4c 	lsl	r12,r12,r9
8000c36c:	f2 09 11 01 	rsub	r9,r9,1
8000c370:	c8 1b       	rjmp	8000c272 <__avr32_f32_div+0x22>
8000c372:	a7 7b       	lsl	r11,0x7
8000c374:	f6 0a 12 00 	clz	r10,r11
8000c378:	f6 0a 09 4b 	lsl	r11,r11,r10
8000c37c:	f4 0a 11 01 	rsub	r10,r10,1
8000c380:	c8 5b       	rjmp	8000c28a <__avr32_f32_div+0x3a>

8000c382 <__avr32_f32_div_res_subnormal>:
8000c382:	5c 39       	neg	r9
8000c384:	2f f9       	sub	r9,-1
8000c386:	f1 b9 04 a0 	satu	r9,0x5
8000c38a:	f2 0a 11 20 	rsub	r10,r9,32
8000c38e:	ee 09 0a 47 	lsr	r7,r7,r9
8000c392:	f8 0a 09 46 	lsl	r6,r12,r10
8000c396:	f8 09 0a 4c 	lsr	r12,r12,r9
8000c39a:	e0 17 ff e0 	andl	r7,0xffe0
8000c39e:	e8 17 00 10 	orl	r7,0x10
8000c3a2:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000c3a6:	30 09       	mov	r9,0
8000c3a8:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000c3ac:	0c 3a       	cp.w	r10,r6
8000c3ae:	cb 3b       	rjmp	8000c314 <__avr32_f32_div_round_subnormal>

8000c3b0 <__avr32_f64_to_f32>:
8000c3b0:	f6 09 15 01 	lsl	r9,r11,0x1
8000c3b4:	b5 99       	lsr	r9,0x15
8000c3b6:	5e 0d       	reteq	0
8000c3b8:	f6 08 15 0a 	lsl	r8,r11,0xa
8000c3bc:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
8000c3c0:	ab 6a       	lsl	r10,0xa
8000c3c2:	5c 3a       	neg	r10
8000c3c4:	5c fc       	rol	r12
8000c3c6:	e0 49 07 ff 	cp.w	r9,2047
8000c3ca:	c1 a0       	breq	8000c3fe <__truncdfsf_return_op1+0x6>
8000c3cc:	e0 29 03 80 	sub	r9,896
8000c3d0:	bf bc       	sbr	r12,0x1f
8000c3d2:	58 09       	cp.w	r9,0
8000c3d4:	e0 8a 00 1a 	brle	8000c408 <__truncdfsf_return_op1+0x10>
8000c3d8:	37 fa       	mov	r10,127
8000c3da:	ed bc 00 08 	bld	r12,0x8
8000c3de:	f7 ba 00 ff 	subeq	r10,-1
8000c3e2:	14 0c       	add	r12,r10
8000c3e4:	f7 b9 03 fe 	sublo	r9,-2
8000c3e8:	ed bc 00 1f 	bld	r12,0x1f
8000c3ec:	f7 b9 01 01 	subne	r9,1
8000c3f0:	f8 0c 16 07 	lsr	r12,r12,0x7
8000c3f4:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

8000c3f8 <__truncdfsf_return_op1>:
8000c3f8:	a1 7b       	lsl	r11,0x1
8000c3fa:	5d 0c       	ror	r12
8000c3fc:	5e fc       	retal	r12
8000c3fe:	bf dc       	cbr	r12,0x1f
8000c400:	5e 1e       	retne	-1
8000c402:	fc 1c 7f 80 	movh	r12,0x7f80
8000c406:	5e fc       	retal	r12
8000c408:	f2 09 11 01 	rsub	r9,r9,1
8000c40c:	59 99       	cp.w	r9,25
8000c40e:	f9 bc 02 00 	movhs	r12,0
8000c412:	c1 32       	brcc	8000c438 <__truncdfsf_return_op1+0x40>
8000c414:	f2 0a 11 20 	rsub	r10,r9,32
8000c418:	f8 0a 09 4a 	lsl	r10,r12,r10
8000c41c:	5f 1a       	srne	r10
8000c41e:	f8 09 0a 4c 	lsr	r12,r12,r9
8000c422:	14 4c       	or	r12,r10
8000c424:	37 fa       	mov	r10,127
8000c426:	ed bc 00 08 	bld	r12,0x8
8000c42a:	f7 ba 00 ff 	subeq	r10,-1
8000c42e:	14 0c       	add	r12,r10
8000c430:	f8 0c 16 07 	lsr	r12,r12,0x7
8000c434:	a1 7b       	lsl	r11,0x1
8000c436:	5d 0c       	ror	r12
8000c438:	5e fc       	retal	r12

8000c43a <__avr32_udiv64>:
8000c43a:	d4 31       	pushm	r0-r7,lr
8000c43c:	1a 97       	mov	r7,sp
8000c43e:	20 3d       	sub	sp,12
8000c440:	10 9c       	mov	r12,r8
8000c442:	12 9e       	mov	lr,r9
8000c444:	14 93       	mov	r3,r10
8000c446:	58 09       	cp.w	r9,0
8000c448:	e0 81 00 bd 	brne	8000c5c2 <__avr32_udiv64+0x188>
8000c44c:	16 38       	cp.w	r8,r11
8000c44e:	e0 88 00 40 	brls	8000c4ce <__avr32_udiv64+0x94>
8000c452:	f0 08 12 00 	clz	r8,r8
8000c456:	c0 d0       	breq	8000c470 <__avr32_udiv64+0x36>
8000c458:	f6 08 09 4b 	lsl	r11,r11,r8
8000c45c:	f0 09 11 20 	rsub	r9,r8,32
8000c460:	f8 08 09 4c 	lsl	r12,r12,r8
8000c464:	f4 09 0a 49 	lsr	r9,r10,r9
8000c468:	f4 08 09 43 	lsl	r3,r10,r8
8000c46c:	f3 eb 10 0b 	or	r11,r9,r11
8000c470:	f8 0e 16 10 	lsr	lr,r12,0x10
8000c474:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000c478:	f6 0e 0d 00 	divu	r0,r11,lr
8000c47c:	e6 0b 16 10 	lsr	r11,r3,0x10
8000c480:	00 99       	mov	r9,r0
8000c482:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000c486:	e0 0a 02 48 	mul	r8,r0,r10
8000c48a:	10 3b       	cp.w	r11,r8
8000c48c:	c0 a2       	brcc	8000c4a0 <__avr32_udiv64+0x66>
8000c48e:	20 19       	sub	r9,1
8000c490:	18 0b       	add	r11,r12
8000c492:	18 3b       	cp.w	r11,r12
8000c494:	c0 63       	brcs	8000c4a0 <__avr32_udiv64+0x66>
8000c496:	10 3b       	cp.w	r11,r8
8000c498:	f7 b9 03 01 	sublo	r9,1
8000c49c:	f7 dc e3 0b 	addcs	r11,r11,r12
8000c4a0:	f6 08 01 01 	sub	r1,r11,r8
8000c4a4:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000c4a8:	e2 0e 0d 00 	divu	r0,r1,lr
8000c4ac:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000c4b0:	00 98       	mov	r8,r0
8000c4b2:	e0 0a 02 4a 	mul	r10,r0,r10
8000c4b6:	14 33       	cp.w	r3,r10
8000c4b8:	c0 82       	brcc	8000c4c8 <__avr32_udiv64+0x8e>
8000c4ba:	20 18       	sub	r8,1
8000c4bc:	18 03       	add	r3,r12
8000c4be:	18 33       	cp.w	r3,r12
8000c4c0:	c0 43       	brcs	8000c4c8 <__avr32_udiv64+0x8e>
8000c4c2:	14 33       	cp.w	r3,r10
8000c4c4:	f7 b8 03 01 	sublo	r8,1
8000c4c8:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000c4cc:	cd f8       	rjmp	8000c68a <__avr32_udiv64+0x250>
8000c4ce:	58 08       	cp.w	r8,0
8000c4d0:	c0 51       	brne	8000c4da <__avr32_udiv64+0xa0>
8000c4d2:	30 19       	mov	r9,1
8000c4d4:	f2 08 0d 08 	divu	r8,r9,r8
8000c4d8:	10 9c       	mov	r12,r8
8000c4da:	f8 06 12 00 	clz	r6,r12
8000c4de:	c0 41       	brne	8000c4e6 <__avr32_udiv64+0xac>
8000c4e0:	18 1b       	sub	r11,r12
8000c4e2:	30 19       	mov	r9,1
8000c4e4:	c4 08       	rjmp	8000c564 <__avr32_udiv64+0x12a>
8000c4e6:	ec 01 11 20 	rsub	r1,r6,32
8000c4ea:	f4 01 0a 49 	lsr	r9,r10,r1
8000c4ee:	f8 06 09 4c 	lsl	r12,r12,r6
8000c4f2:	f6 06 09 48 	lsl	r8,r11,r6
8000c4f6:	f6 01 0a 41 	lsr	r1,r11,r1
8000c4fa:	f3 e8 10 08 	or	r8,r9,r8
8000c4fe:	f8 03 16 10 	lsr	r3,r12,0x10
8000c502:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000c506:	e2 03 0d 00 	divu	r0,r1,r3
8000c50a:	f0 0b 16 10 	lsr	r11,r8,0x10
8000c50e:	00 9e       	mov	lr,r0
8000c510:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000c514:	e0 05 02 49 	mul	r9,r0,r5
8000c518:	12 3b       	cp.w	r11,r9
8000c51a:	c0 a2       	brcc	8000c52e <__avr32_udiv64+0xf4>
8000c51c:	20 1e       	sub	lr,1
8000c51e:	18 0b       	add	r11,r12
8000c520:	18 3b       	cp.w	r11,r12
8000c522:	c0 63       	brcs	8000c52e <__avr32_udiv64+0xf4>
8000c524:	12 3b       	cp.w	r11,r9
8000c526:	f7 be 03 01 	sublo	lr,1
8000c52a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000c52e:	12 1b       	sub	r11,r9
8000c530:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000c534:	f6 03 0d 02 	divu	r2,r11,r3
8000c538:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000c53c:	04 99       	mov	r9,r2
8000c53e:	e4 05 02 4b 	mul	r11,r2,r5
8000c542:	16 38       	cp.w	r8,r11
8000c544:	c0 a2       	brcc	8000c558 <__avr32_udiv64+0x11e>
8000c546:	20 19       	sub	r9,1
8000c548:	18 08       	add	r8,r12
8000c54a:	18 38       	cp.w	r8,r12
8000c54c:	c0 63       	brcs	8000c558 <__avr32_udiv64+0x11e>
8000c54e:	16 38       	cp.w	r8,r11
8000c550:	f7 b9 03 01 	sublo	r9,1
8000c554:	f1 dc e3 08 	addcs	r8,r8,r12
8000c558:	f4 06 09 43 	lsl	r3,r10,r6
8000c55c:	f0 0b 01 0b 	sub	r11,r8,r11
8000c560:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000c564:	f8 06 16 10 	lsr	r6,r12,0x10
8000c568:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000c56c:	f6 06 0d 00 	divu	r0,r11,r6
8000c570:	e6 0b 16 10 	lsr	r11,r3,0x10
8000c574:	00 9a       	mov	r10,r0
8000c576:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000c57a:	e0 0e 02 48 	mul	r8,r0,lr
8000c57e:	10 3b       	cp.w	r11,r8
8000c580:	c0 a2       	brcc	8000c594 <__avr32_udiv64+0x15a>
8000c582:	20 1a       	sub	r10,1
8000c584:	18 0b       	add	r11,r12
8000c586:	18 3b       	cp.w	r11,r12
8000c588:	c0 63       	brcs	8000c594 <__avr32_udiv64+0x15a>
8000c58a:	10 3b       	cp.w	r11,r8
8000c58c:	f7 ba 03 01 	sublo	r10,1
8000c590:	f7 dc e3 0b 	addcs	r11,r11,r12
8000c594:	f6 08 01 01 	sub	r1,r11,r8
8000c598:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000c59c:	e2 06 0d 00 	divu	r0,r1,r6
8000c5a0:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000c5a4:	00 98       	mov	r8,r0
8000c5a6:	e0 0e 02 4b 	mul	r11,r0,lr
8000c5aa:	16 33       	cp.w	r3,r11
8000c5ac:	c0 82       	brcc	8000c5bc <__avr32_udiv64+0x182>
8000c5ae:	20 18       	sub	r8,1
8000c5b0:	18 03       	add	r3,r12
8000c5b2:	18 33       	cp.w	r3,r12
8000c5b4:	c0 43       	brcs	8000c5bc <__avr32_udiv64+0x182>
8000c5b6:	16 33       	cp.w	r3,r11
8000c5b8:	f7 b8 03 01 	sublo	r8,1
8000c5bc:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000c5c0:	c6 98       	rjmp	8000c692 <__avr32_udiv64+0x258>
8000c5c2:	16 39       	cp.w	r9,r11
8000c5c4:	e0 8b 00 65 	brhi	8000c68e <__avr32_udiv64+0x254>
8000c5c8:	f2 09 12 00 	clz	r9,r9
8000c5cc:	c0 b1       	brne	8000c5e2 <__avr32_udiv64+0x1a8>
8000c5ce:	10 3a       	cp.w	r10,r8
8000c5d0:	5f 2a       	srhs	r10
8000c5d2:	1c 3b       	cp.w	r11,lr
8000c5d4:	5f b8       	srhi	r8
8000c5d6:	10 4a       	or	r10,r8
8000c5d8:	f2 0a 18 00 	cp.b	r10,r9
8000c5dc:	c5 90       	breq	8000c68e <__avr32_udiv64+0x254>
8000c5de:	30 18       	mov	r8,1
8000c5e0:	c5 98       	rjmp	8000c692 <__avr32_udiv64+0x258>
8000c5e2:	f0 09 09 46 	lsl	r6,r8,r9
8000c5e6:	f2 03 11 20 	rsub	r3,r9,32
8000c5ea:	fc 09 09 4e 	lsl	lr,lr,r9
8000c5ee:	f0 03 0a 48 	lsr	r8,r8,r3
8000c5f2:	f6 09 09 4c 	lsl	r12,r11,r9
8000c5f6:	f4 03 0a 42 	lsr	r2,r10,r3
8000c5fa:	ef 46 ff f4 	st.w	r7[-12],r6
8000c5fe:	f6 03 0a 43 	lsr	r3,r11,r3
8000c602:	18 42       	or	r2,r12
8000c604:	f1 ee 10 0c 	or	r12,r8,lr
8000c608:	f8 01 16 10 	lsr	r1,r12,0x10
8000c60c:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000c610:	e6 01 0d 04 	divu	r4,r3,r1
8000c614:	e4 03 16 10 	lsr	r3,r2,0x10
8000c618:	08 9e       	mov	lr,r4
8000c61a:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000c61e:	e8 06 02 48 	mul	r8,r4,r6
8000c622:	10 33       	cp.w	r3,r8
8000c624:	c0 a2       	brcc	8000c638 <__avr32_udiv64+0x1fe>
8000c626:	20 1e       	sub	lr,1
8000c628:	18 03       	add	r3,r12
8000c62a:	18 33       	cp.w	r3,r12
8000c62c:	c0 63       	brcs	8000c638 <__avr32_udiv64+0x1fe>
8000c62e:	10 33       	cp.w	r3,r8
8000c630:	f7 be 03 01 	sublo	lr,1
8000c634:	e7 dc e3 03 	addcs	r3,r3,r12
8000c638:	10 13       	sub	r3,r8
8000c63a:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000c63e:	e6 01 0d 00 	divu	r0,r3,r1
8000c642:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000c646:	00 98       	mov	r8,r0
8000c648:	e0 06 02 46 	mul	r6,r0,r6
8000c64c:	0c 3b       	cp.w	r11,r6
8000c64e:	c0 a2       	brcc	8000c662 <__avr32_udiv64+0x228>
8000c650:	20 18       	sub	r8,1
8000c652:	18 0b       	add	r11,r12
8000c654:	18 3b       	cp.w	r11,r12
8000c656:	c0 63       	brcs	8000c662 <__avr32_udiv64+0x228>
8000c658:	0c 3b       	cp.w	r11,r6
8000c65a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000c65e:	f7 b8 03 01 	sublo	r8,1
8000c662:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000c666:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000c66a:	0c 1b       	sub	r11,r6
8000c66c:	f0 04 06 42 	mulu.d	r2,r8,r4
8000c670:	06 95       	mov	r5,r3
8000c672:	16 35       	cp.w	r5,r11
8000c674:	e0 8b 00 0a 	brhi	8000c688 <__avr32_udiv64+0x24e>
8000c678:	5f 0b       	sreq	r11
8000c67a:	f4 09 09 49 	lsl	r9,r10,r9
8000c67e:	12 32       	cp.w	r2,r9
8000c680:	5f b9       	srhi	r9
8000c682:	f7 e9 00 09 	and	r9,r11,r9
8000c686:	c0 60       	breq	8000c692 <__avr32_udiv64+0x258>
8000c688:	20 18       	sub	r8,1
8000c68a:	30 09       	mov	r9,0
8000c68c:	c0 38       	rjmp	8000c692 <__avr32_udiv64+0x258>
8000c68e:	30 09       	mov	r9,0
8000c690:	12 98       	mov	r8,r9
8000c692:	10 9a       	mov	r10,r8
8000c694:	12 93       	mov	r3,r9
8000c696:	10 92       	mov	r2,r8
8000c698:	12 9b       	mov	r11,r9
8000c69a:	2f dd       	sub	sp,-12
8000c69c:	d8 32       	popm	r0-r7,pc

8000c69e <memcpy>:
8000c69e:	58 8a       	cp.w	r10,8
8000c6a0:	c2 f5       	brlt	8000c6fe <memcpy+0x60>
8000c6a2:	f9 eb 10 09 	or	r9,r12,r11
8000c6a6:	e2 19 00 03 	andl	r9,0x3,COH
8000c6aa:	e0 81 00 97 	brne	8000c7d8 <memcpy+0x13a>
8000c6ae:	e0 4a 00 20 	cp.w	r10,32
8000c6b2:	c3 b4       	brge	8000c728 <memcpy+0x8a>
8000c6b4:	f4 08 14 02 	asr	r8,r10,0x2
8000c6b8:	f0 09 11 08 	rsub	r9,r8,8
8000c6bc:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000c6c0:	76 69       	ld.w	r9,r11[0x18]
8000c6c2:	99 69       	st.w	r12[0x18],r9
8000c6c4:	76 59       	ld.w	r9,r11[0x14]
8000c6c6:	99 59       	st.w	r12[0x14],r9
8000c6c8:	76 49       	ld.w	r9,r11[0x10]
8000c6ca:	99 49       	st.w	r12[0x10],r9
8000c6cc:	76 39       	ld.w	r9,r11[0xc]
8000c6ce:	99 39       	st.w	r12[0xc],r9
8000c6d0:	76 29       	ld.w	r9,r11[0x8]
8000c6d2:	99 29       	st.w	r12[0x8],r9
8000c6d4:	76 19       	ld.w	r9,r11[0x4]
8000c6d6:	99 19       	st.w	r12[0x4],r9
8000c6d8:	76 09       	ld.w	r9,r11[0x0]
8000c6da:	99 09       	st.w	r12[0x0],r9
8000c6dc:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000c6e0:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000c6e4:	e0 1a 00 03 	andl	r10,0x3
8000c6e8:	f4 0a 11 04 	rsub	r10,r10,4
8000c6ec:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000c6f0:	17 a9       	ld.ub	r9,r11[0x2]
8000c6f2:	b0 a9       	st.b	r8[0x2],r9
8000c6f4:	17 99       	ld.ub	r9,r11[0x1]
8000c6f6:	b0 99       	st.b	r8[0x1],r9
8000c6f8:	17 89       	ld.ub	r9,r11[0x0]
8000c6fa:	b0 89       	st.b	r8[0x0],r9
8000c6fc:	5e fc       	retal	r12
8000c6fe:	f4 0a 11 09 	rsub	r10,r10,9
8000c702:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000c706:	17 f9       	ld.ub	r9,r11[0x7]
8000c708:	b8 f9       	st.b	r12[0x7],r9
8000c70a:	17 e9       	ld.ub	r9,r11[0x6]
8000c70c:	b8 e9       	st.b	r12[0x6],r9
8000c70e:	17 d9       	ld.ub	r9,r11[0x5]
8000c710:	b8 d9       	st.b	r12[0x5],r9
8000c712:	17 c9       	ld.ub	r9,r11[0x4]
8000c714:	b8 c9       	st.b	r12[0x4],r9
8000c716:	17 b9       	ld.ub	r9,r11[0x3]
8000c718:	b8 b9       	st.b	r12[0x3],r9
8000c71a:	17 a9       	ld.ub	r9,r11[0x2]
8000c71c:	b8 a9       	st.b	r12[0x2],r9
8000c71e:	17 99       	ld.ub	r9,r11[0x1]
8000c720:	b8 99       	st.b	r12[0x1],r9
8000c722:	17 89       	ld.ub	r9,r11[0x0]
8000c724:	b8 89       	st.b	r12[0x0],r9
8000c726:	5e fc       	retal	r12
8000c728:	eb cd 40 c0 	pushm	r6-r7,lr
8000c72c:	18 99       	mov	r9,r12
8000c72e:	22 0a       	sub	r10,32
8000c730:	b7 07       	ld.d	r6,r11++
8000c732:	b3 26       	st.d	r9++,r6
8000c734:	b7 07       	ld.d	r6,r11++
8000c736:	b3 26       	st.d	r9++,r6
8000c738:	b7 07       	ld.d	r6,r11++
8000c73a:	b3 26       	st.d	r9++,r6
8000c73c:	b7 07       	ld.d	r6,r11++
8000c73e:	b3 26       	st.d	r9++,r6
8000c740:	22 0a       	sub	r10,32
8000c742:	cf 74       	brge	8000c730 <memcpy+0x92>
8000c744:	2f 0a       	sub	r10,-16
8000c746:	c0 65       	brlt	8000c752 <memcpy+0xb4>
8000c748:	b7 07       	ld.d	r6,r11++
8000c74a:	b3 26       	st.d	r9++,r6
8000c74c:	b7 07       	ld.d	r6,r11++
8000c74e:	b3 26       	st.d	r9++,r6
8000c750:	21 0a       	sub	r10,16
8000c752:	5c 3a       	neg	r10
8000c754:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000c758:	d7 03       	nop
8000c75a:	d7 03       	nop
8000c75c:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000c760:	f3 66 00 0e 	st.b	r9[14],r6
8000c764:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000c768:	f3 66 00 0d 	st.b	r9[13],r6
8000c76c:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000c770:	f3 66 00 0c 	st.b	r9[12],r6
8000c774:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000c778:	f3 66 00 0b 	st.b	r9[11],r6
8000c77c:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000c780:	f3 66 00 0a 	st.b	r9[10],r6
8000c784:	f7 36 00 09 	ld.ub	r6,r11[9]
8000c788:	f3 66 00 09 	st.b	r9[9],r6
8000c78c:	f7 36 00 08 	ld.ub	r6,r11[8]
8000c790:	f3 66 00 08 	st.b	r9[8],r6
8000c794:	f7 36 00 07 	ld.ub	r6,r11[7]
8000c798:	f3 66 00 07 	st.b	r9[7],r6
8000c79c:	f7 36 00 06 	ld.ub	r6,r11[6]
8000c7a0:	f3 66 00 06 	st.b	r9[6],r6
8000c7a4:	f7 36 00 05 	ld.ub	r6,r11[5]
8000c7a8:	f3 66 00 05 	st.b	r9[5],r6
8000c7ac:	f7 36 00 04 	ld.ub	r6,r11[4]
8000c7b0:	f3 66 00 04 	st.b	r9[4],r6
8000c7b4:	f7 36 00 03 	ld.ub	r6,r11[3]
8000c7b8:	f3 66 00 03 	st.b	r9[3],r6
8000c7bc:	f7 36 00 02 	ld.ub	r6,r11[2]
8000c7c0:	f3 66 00 02 	st.b	r9[2],r6
8000c7c4:	f7 36 00 01 	ld.ub	r6,r11[1]
8000c7c8:	f3 66 00 01 	st.b	r9[1],r6
8000c7cc:	f7 36 00 00 	ld.ub	r6,r11[0]
8000c7d0:	f3 66 00 00 	st.b	r9[0],r6
8000c7d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c7d8:	20 1a       	sub	r10,1
8000c7da:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000c7de:	f8 0a 0b 09 	st.b	r12[r10],r9
8000c7e2:	cf b1       	brne	8000c7d8 <memcpy+0x13a>
8000c7e4:	5e fc       	retal	r12

8000c7e6 <memset>:
8000c7e6:	18 98       	mov	r8,r12
8000c7e8:	c0 38       	rjmp	8000c7ee <memset+0x8>
8000c7ea:	10 cb       	st.b	r8++,r11
8000c7ec:	20 1a       	sub	r10,1
8000c7ee:	58 0a       	cp.w	r10,0
8000c7f0:	cf d1       	brne	8000c7ea <memset+0x4>
8000c7f2:	5e fc       	retal	r12

8000c7f4 <sprintf>:
8000c7f4:	d4 01       	pushm	lr
8000c7f6:	21 7d       	sub	sp,92
8000c7f8:	e0 68 ff ff 	mov	r8,65535
8000c7fc:	ea 18 7f ff 	orh	r8,0x7fff
8000c800:	50 58       	stdsp	sp[0x14],r8
8000c802:	50 28       	stdsp	sp[0x8],r8
8000c804:	e0 68 02 08 	mov	r8,520
8000c808:	ba 68       	st.h	sp[0xc],r8
8000c80a:	3f f8       	mov	r8,-1
8000c80c:	ba 78       	st.h	sp[0xe],r8
8000c80e:	48 88       	lddpc	r8,8000c82c <sprintf+0x38>
8000c810:	50 4c       	stdsp	sp[0x10],r12
8000c812:	16 9a       	mov	r10,r11
8000c814:	50 0c       	stdsp	sp[0x0],r12
8000c816:	fa c9 ff a0 	sub	r9,sp,-96
8000c81a:	70 0c       	ld.w	r12,r8[0x0]
8000c81c:	1a 9b       	mov	r11,sp
8000c81e:	f0 1f 00 05 	mcall	8000c830 <sprintf+0x3c>
8000c822:	30 09       	mov	r9,0
8000c824:	40 08       	lddsp	r8,sp[0x0]
8000c826:	b0 89       	st.b	r8[0x0],r9
8000c828:	2e 9d       	sub	sp,-92
8000c82a:	d8 02       	popm	pc
8000c82c:	00 00       	add	r0,r0
8000c82e:	01 a8       	ld.ub	r8,r0[0x2]
8000c830:	80 00       	ld.sh	r0,r0[0x0]
8000c832:	cb b0       	breq	8000c7a8 <memcpy+0x10a>

8000c834 <strlen>:
8000c834:	30 09       	mov	r9,0
8000c836:	18 98       	mov	r8,r12
8000c838:	c0 28       	rjmp	8000c83c <strlen+0x8>
8000c83a:	2f f8       	sub	r8,-1
8000c83c:	11 8a       	ld.ub	r10,r8[0x0]
8000c83e:	f2 0a 18 00 	cp.b	r10,r9
8000c842:	cf c1       	brne	8000c83a <strlen+0x6>
8000c844:	f0 0c 01 0c 	sub	r12,r8,r12
8000c848:	5e fc       	retal	r12
8000c84a:	d7 03       	nop

8000c84c <strncpy>:
8000c84c:	30 08       	mov	r8,0
8000c84e:	10 3a       	cp.w	r10,r8
8000c850:	5e 0c       	reteq	r12
8000c852:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000c856:	f8 08 0b 09 	st.b	r12[r8],r9
8000c85a:	2f f8       	sub	r8,-1
8000c85c:	58 09       	cp.w	r9,0
8000c85e:	cf 81       	brne	8000c84e <strncpy+0x2>
8000c860:	10 3a       	cp.w	r10,r8
8000c862:	5e 0c       	reteq	r12
8000c864:	f8 08 0b 09 	st.b	r12[r8],r9
8000c868:	2f f8       	sub	r8,-1
8000c86a:	cf bb       	rjmp	8000c860 <strncpy+0x14>

8000c86c <get_arg>:
8000c86c:	d4 31       	pushm	r0-r7,lr
8000c86e:	20 8d       	sub	sp,32
8000c870:	fa c4 ff bc 	sub	r4,sp,-68
8000c874:	50 4b       	stdsp	sp[0x10],r11
8000c876:	68 2e       	ld.w	lr,r4[0x8]
8000c878:	50 58       	stdsp	sp[0x14],r8
8000c87a:	12 96       	mov	r6,r9
8000c87c:	7c 0b       	ld.w	r11,lr[0x0]
8000c87e:	70 05       	ld.w	r5,r8[0x0]
8000c880:	50 6e       	stdsp	sp[0x18],lr
8000c882:	58 0b       	cp.w	r11,0
8000c884:	f4 0b 17 00 	moveq	r11,r10
8000c888:	68 03       	ld.w	r3,r4[0x0]
8000c88a:	68 11       	ld.w	r1,r4[0x4]
8000c88c:	40 49       	lddsp	r9,sp[0x10]
8000c88e:	30 08       	mov	r8,0
8000c890:	c2 e9       	rjmp	8000caec <get_arg+0x280>
8000c892:	2f fb       	sub	r11,-1
8000c894:	32 5c       	mov	r12,37
8000c896:	17 8a       	ld.ub	r10,r11[0x0]
8000c898:	f8 0a 18 00 	cp.b	r10,r12
8000c89c:	5f 1e       	srne	lr
8000c89e:	f0 0a 18 00 	cp.b	r10,r8
8000c8a2:	5f 1c       	srne	r12
8000c8a4:	fd ec 00 0c 	and	r12,lr,r12
8000c8a8:	f0 0c 18 00 	cp.b	r12,r8
8000c8ac:	cf 31       	brne	8000c892 <get_arg+0x26>
8000c8ae:	58 0a       	cp.w	r10,0
8000c8b0:	e0 80 01 2b 	breq	8000cb06 <get_arg+0x29a>
8000c8b4:	30 0c       	mov	r12,0
8000c8b6:	3f fa       	mov	r10,-1
8000c8b8:	18 90       	mov	r0,r12
8000c8ba:	50 3a       	stdsp	sp[0xc],r10
8000c8bc:	18 94       	mov	r4,r12
8000c8be:	18 92       	mov	r2,r12
8000c8c0:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000c8c4:	16 97       	mov	r7,r11
8000c8c6:	50 7c       	stdsp	sp[0x1c],r12
8000c8c8:	4c ec       	lddpc	r12,8000ca00 <get_arg+0x194>
8000c8ca:	0f 3a       	ld.ub	r10,r7++
8000c8cc:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000c8d0:	40 7c       	lddsp	r12,sp[0x1c]
8000c8d2:	1c 0c       	add	r12,lr
8000c8d4:	4c ce       	lddpc	lr,8000ca04 <get_arg+0x198>
8000c8d6:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000c8da:	20 1e       	sub	lr,1
8000c8dc:	50 0e       	stdsp	sp[0x0],lr
8000c8de:	4c be       	lddpc	lr,8000ca08 <get_arg+0x19c>
8000c8e0:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000c8e4:	50 7c       	stdsp	sp[0x1c],r12
8000c8e6:	40 0c       	lddsp	r12,sp[0x0]
8000c8e8:	58 7c       	cp.w	r12,7
8000c8ea:	e0 8b 00 fa 	brhi	8000cade <get_arg+0x272>
8000c8ee:	4c 8e       	lddpc	lr,8000ca0c <get_arg+0x1a0>
8000c8f0:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000c8f4:	36 8b       	mov	r11,104
8000c8f6:	f6 0a 18 00 	cp.b	r10,r11
8000c8fa:	e0 80 00 f2 	breq	8000cade <get_arg+0x272>
8000c8fe:	37 1b       	mov	r11,113
8000c900:	f6 0a 18 00 	cp.b	r10,r11
8000c904:	c0 70       	breq	8000c912 <get_arg+0xa6>
8000c906:	34 cb       	mov	r11,76
8000c908:	f6 0a 18 00 	cp.b	r10,r11
8000c90c:	c0 51       	brne	8000c916 <get_arg+0xaa>
8000c90e:	a3 b4       	sbr	r4,0x3
8000c910:	ce 78       	rjmp	8000cade <get_arg+0x272>
8000c912:	a5 b4       	sbr	r4,0x5
8000c914:	ce 58       	rjmp	8000cade <get_arg+0x272>
8000c916:	08 9a       	mov	r10,r4
8000c918:	0e 9b       	mov	r11,r7
8000c91a:	a5 aa       	sbr	r10,0x4
8000c91c:	17 3c       	ld.ub	r12,r11++
8000c91e:	a5 b4       	sbr	r4,0x5
8000c920:	36 ce       	mov	lr,108
8000c922:	fc 0c 18 00 	cp.b	r12,lr
8000c926:	e0 80 00 dd 	breq	8000cae0 <get_arg+0x274>
8000c92a:	14 94       	mov	r4,r10
8000c92c:	cd 98       	rjmp	8000cade <get_arg+0x272>
8000c92e:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000c932:	36 7c       	mov	r12,103
8000c934:	f8 0a 18 00 	cp.b	r10,r12
8000c938:	e0 8b 00 27 	brhi	8000c986 <get_arg+0x11a>
8000c93c:	36 5b       	mov	r11,101
8000c93e:	f6 0a 18 00 	cp.b	r10,r11
8000c942:	c4 82       	brcc	8000c9d2 <get_arg+0x166>
8000c944:	34 fb       	mov	r11,79
8000c946:	f6 0a 18 00 	cp.b	r10,r11
8000c94a:	c4 80       	breq	8000c9da <get_arg+0x16e>
8000c94c:	e0 8b 00 0c 	brhi	8000c964 <get_arg+0xf8>
8000c950:	34 5b       	mov	r11,69
8000c952:	f6 0a 18 00 	cp.b	r10,r11
8000c956:	c3 e0       	breq	8000c9d2 <get_arg+0x166>
8000c958:	34 7b       	mov	r11,71
8000c95a:	f6 0a 18 00 	cp.b	r10,r11
8000c95e:	c3 a0       	breq	8000c9d2 <get_arg+0x166>
8000c960:	34 4b       	mov	r11,68
8000c962:	c0 88       	rjmp	8000c972 <get_arg+0x106>
8000c964:	35 8b       	mov	r11,88
8000c966:	f6 0a 18 00 	cp.b	r10,r11
8000c96a:	c2 c0       	breq	8000c9c2 <get_arg+0x156>
8000c96c:	e0 8b 00 07 	brhi	8000c97a <get_arg+0x10e>
8000c970:	35 5b       	mov	r11,85
8000c972:	f6 0a 18 00 	cp.b	r10,r11
8000c976:	c3 51       	brne	8000c9e0 <get_arg+0x174>
8000c978:	c3 18       	rjmp	8000c9da <get_arg+0x16e>
8000c97a:	36 3b       	mov	r11,99
8000c97c:	f6 0a 18 00 	cp.b	r10,r11
8000c980:	c2 f0       	breq	8000c9de <get_arg+0x172>
8000c982:	36 4b       	mov	r11,100
8000c984:	c0 e8       	rjmp	8000c9a0 <get_arg+0x134>
8000c986:	37 0b       	mov	r11,112
8000c988:	f6 0a 18 00 	cp.b	r10,r11
8000c98c:	c2 50       	breq	8000c9d6 <get_arg+0x16a>
8000c98e:	e0 8b 00 0d 	brhi	8000c9a8 <get_arg+0x13c>
8000c992:	36 eb       	mov	r11,110
8000c994:	f6 0a 18 00 	cp.b	r10,r11
8000c998:	c1 f0       	breq	8000c9d6 <get_arg+0x16a>
8000c99a:	e0 8b 00 14 	brhi	8000c9c2 <get_arg+0x156>
8000c99e:	36 9b       	mov	r11,105
8000c9a0:	f6 0a 18 00 	cp.b	r10,r11
8000c9a4:	c1 e1       	brne	8000c9e0 <get_arg+0x174>
8000c9a6:	c0 e8       	rjmp	8000c9c2 <get_arg+0x156>
8000c9a8:	37 5b       	mov	r11,117
8000c9aa:	f6 0a 18 00 	cp.b	r10,r11
8000c9ae:	c0 a0       	breq	8000c9c2 <get_arg+0x156>
8000c9b0:	37 8b       	mov	r11,120
8000c9b2:	f6 0a 18 00 	cp.b	r10,r11
8000c9b6:	c0 60       	breq	8000c9c2 <get_arg+0x156>
8000c9b8:	37 3b       	mov	r11,115
8000c9ba:	f6 0a 18 00 	cp.b	r10,r11
8000c9be:	c1 11       	brne	8000c9e0 <get_arg+0x174>
8000c9c0:	c0 b8       	rjmp	8000c9d6 <get_arg+0x16a>
8000c9c2:	ed b4 00 04 	bld	r4,0x4
8000c9c6:	c0 a0       	breq	8000c9da <get_arg+0x16e>
8000c9c8:	ed b4 00 05 	bld	r4,0x5
8000c9cc:	c0 91       	brne	8000c9de <get_arg+0x172>
8000c9ce:	30 20       	mov	r0,2
8000c9d0:	c0 88       	rjmp	8000c9e0 <get_arg+0x174>
8000c9d2:	30 40       	mov	r0,4
8000c9d4:	c0 68       	rjmp	8000c9e0 <get_arg+0x174>
8000c9d6:	30 30       	mov	r0,3
8000c9d8:	c0 48       	rjmp	8000c9e0 <get_arg+0x174>
8000c9da:	30 10       	mov	r0,1
8000c9dc:	c0 28       	rjmp	8000c9e0 <get_arg+0x174>
8000c9de:	30 00       	mov	r0,0
8000c9e0:	40 3b       	lddsp	r11,sp[0xc]
8000c9e2:	5b fb       	cp.w	r11,-1
8000c9e4:	c0 40       	breq	8000c9ec <get_arg+0x180>
8000c9e6:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000c9ea:	c7 a8       	rjmp	8000cade <get_arg+0x272>
8000c9ec:	58 60       	cp.w	r0,6
8000c9ee:	e0 8b 00 78 	brhi	8000cade <get_arg+0x272>
8000c9f2:	6c 0a       	ld.w	r10,r6[0x0]
8000c9f4:	ea cc ff ff 	sub	r12,r5,-1
8000c9f8:	48 6e       	lddpc	lr,8000ca10 <get_arg+0x1a4>
8000c9fa:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000c9fe:	00 00       	add	r0,r0
8000ca00:	80 01       	ld.sh	r1,r0[0x0]
8000ca02:	24 28       	sub	r8,66
8000ca04:	80 01       	ld.sh	r1,r0[0x0]
8000ca06:	23 60       	sub	r0,54
8000ca08:	80 01       	ld.sh	r1,r0[0x0]
8000ca0a:	22 f4       	sub	r4,47
8000ca0c:	80 01       	ld.sh	r1,r0[0x0]
8000ca0e:	21 54       	sub	r4,21
8000ca10:	80 01       	ld.sh	r1,r0[0x0]
8000ca12:	21 74       	sub	r4,23
8000ca14:	f4 cb ff f8 	sub	r11,r10,-8
8000ca18:	8d 0b       	st.w	r6[0x0],r11
8000ca1a:	f4 ea 00 00 	ld.d	r10,r10[0]
8000ca1e:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000ca22:	c0 f8       	rjmp	8000ca40 <get_arg+0x1d4>
8000ca24:	f4 cb ff fc 	sub	r11,r10,-4
8000ca28:	8d 0b       	st.w	r6[0x0],r11
8000ca2a:	74 0a       	ld.w	r10,r10[0x0]
8000ca2c:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000ca30:	c0 88       	rjmp	8000ca40 <get_arg+0x1d4>
8000ca32:	f4 cb ff f8 	sub	r11,r10,-8
8000ca36:	8d 0b       	st.w	r6[0x0],r11
8000ca38:	f4 ea 00 00 	ld.d	r10,r10[0]
8000ca3c:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000ca40:	0e 9b       	mov	r11,r7
8000ca42:	18 95       	mov	r5,r12
8000ca44:	c4 e8       	rjmp	8000cae0 <get_arg+0x274>
8000ca46:	62 0a       	ld.w	r10,r1[0x0]
8000ca48:	5b fa       	cp.w	r10,-1
8000ca4a:	c0 b1       	brne	8000ca60 <get_arg+0x1f4>
8000ca4c:	50 19       	stdsp	sp[0x4],r9
8000ca4e:	50 28       	stdsp	sp[0x8],r8
8000ca50:	e0 6a 00 80 	mov	r10,128
8000ca54:	30 0b       	mov	r11,0
8000ca56:	02 9c       	mov	r12,r1
8000ca58:	f0 1f 00 4d 	mcall	8000cb8c <get_arg+0x320>
8000ca5c:	40 28       	lddsp	r8,sp[0x8]
8000ca5e:	40 19       	lddsp	r9,sp[0x4]
8000ca60:	e4 cc 00 01 	sub	r12,r2,1
8000ca64:	0e 9b       	mov	r11,r7
8000ca66:	50 3c       	stdsp	sp[0xc],r12
8000ca68:	f2 0c 0c 49 	max	r9,r9,r12
8000ca6c:	c3 a8       	rjmp	8000cae0 <get_arg+0x274>
8000ca6e:	62 0a       	ld.w	r10,r1[0x0]
8000ca70:	5b fa       	cp.w	r10,-1
8000ca72:	c0 b1       	brne	8000ca88 <get_arg+0x21c>
8000ca74:	50 19       	stdsp	sp[0x4],r9
8000ca76:	50 28       	stdsp	sp[0x8],r8
8000ca78:	e0 6a 00 80 	mov	r10,128
8000ca7c:	30 0b       	mov	r11,0
8000ca7e:	02 9c       	mov	r12,r1
8000ca80:	f0 1f 00 43 	mcall	8000cb8c <get_arg+0x320>
8000ca84:	40 28       	lddsp	r8,sp[0x8]
8000ca86:	40 19       	lddsp	r9,sp[0x4]
8000ca88:	20 12       	sub	r2,1
8000ca8a:	30 0a       	mov	r10,0
8000ca8c:	0e 9b       	mov	r11,r7
8000ca8e:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000ca92:	f2 02 0c 49 	max	r9,r9,r2
8000ca96:	c2 58       	rjmp	8000cae0 <get_arg+0x274>
8000ca98:	16 97       	mov	r7,r11
8000ca9a:	6c 0a       	ld.w	r10,r6[0x0]
8000ca9c:	f4 cb ff fc 	sub	r11,r10,-4
8000caa0:	8d 0b       	st.w	r6[0x0],r11
8000caa2:	74 0a       	ld.w	r10,r10[0x0]
8000caa4:	0e 9b       	mov	r11,r7
8000caa6:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000caaa:	2f f5       	sub	r5,-1
8000caac:	c1 a8       	rjmp	8000cae0 <get_arg+0x274>
8000caae:	f4 c2 00 30 	sub	r2,r10,48
8000cab2:	c0 68       	rjmp	8000cabe <get_arg+0x252>
8000cab4:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000cab8:	2f f7       	sub	r7,-1
8000caba:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000cabe:	0f 8a       	ld.ub	r10,r7[0x0]
8000cac0:	58 0a       	cp.w	r10,0
8000cac2:	c0 e0       	breq	8000cade <get_arg+0x272>
8000cac4:	23 0a       	sub	r10,48
8000cac6:	58 9a       	cp.w	r10,9
8000cac8:	fe 98 ff f6 	brls	8000cab4 <get_arg+0x248>
8000cacc:	c0 98       	rjmp	8000cade <get_arg+0x272>
8000cace:	2f f7       	sub	r7,-1
8000cad0:	0f 8a       	ld.ub	r10,r7[0x0]
8000cad2:	58 0a       	cp.w	r10,0
8000cad4:	c0 50       	breq	8000cade <get_arg+0x272>
8000cad6:	23 0a       	sub	r10,48
8000cad8:	58 9a       	cp.w	r10,9
8000cada:	fe 98 ff fa 	brls	8000cace <get_arg+0x262>
8000cade:	0e 9b       	mov	r11,r7
8000cae0:	40 7c       	lddsp	r12,sp[0x1c]
8000cae2:	30 ba       	mov	r10,11
8000cae4:	f4 0c 18 00 	cp.b	r12,r10
8000cae8:	fe 91 fe ec 	brne	8000c8c0 <get_arg+0x54>
8000caec:	40 42       	lddsp	r2,sp[0x10]
8000caee:	17 8c       	ld.ub	r12,r11[0x0]
8000caf0:	0a 32       	cp.w	r2,r5
8000caf2:	5f 4a       	srge	r10
8000caf4:	f0 0c 18 00 	cp.b	r12,r8
8000caf8:	5f 1c       	srne	r12
8000cafa:	f9 ea 00 0a 	and	r10,r12,r10
8000cafe:	f0 0a 18 00 	cp.b	r10,r8
8000cb02:	fe 91 fe c9 	brne	8000c894 <get_arg+0x28>
8000cb06:	30 08       	mov	r8,0
8000cb08:	40 4e       	lddsp	lr,sp[0x10]
8000cb0a:	17 8a       	ld.ub	r10,r11[0x0]
8000cb0c:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000cb10:	f0 0a 18 00 	cp.b	r10,r8
8000cb14:	fc 09 17 10 	movne	r9,lr
8000cb18:	e6 05 00 38 	add	r8,r3,r5<<0x3
8000cb1c:	06 9e       	mov	lr,r3
8000cb1e:	c2 a8       	rjmp	8000cb72 <get_arg+0x306>
8000cb20:	62 0a       	ld.w	r10,r1[0x0]
8000cb22:	58 3a       	cp.w	r10,3
8000cb24:	c1 e0       	breq	8000cb60 <get_arg+0x2f4>
8000cb26:	e0 89 00 07 	brgt	8000cb34 <get_arg+0x2c8>
8000cb2a:	58 1a       	cp.w	r10,1
8000cb2c:	c1 a0       	breq	8000cb60 <get_arg+0x2f4>
8000cb2e:	58 2a       	cp.w	r10,2
8000cb30:	c1 81       	brne	8000cb60 <get_arg+0x2f4>
8000cb32:	c0 58       	rjmp	8000cb3c <get_arg+0x2d0>
8000cb34:	58 5a       	cp.w	r10,5
8000cb36:	c0 c0       	breq	8000cb4e <get_arg+0x2e2>
8000cb38:	c0 b5       	brlt	8000cb4e <get_arg+0x2e2>
8000cb3a:	c1 38       	rjmp	8000cb60 <get_arg+0x2f4>
8000cb3c:	6c 0a       	ld.w	r10,r6[0x0]
8000cb3e:	f4 cc ff f8 	sub	r12,r10,-8
8000cb42:	8d 0c       	st.w	r6[0x0],r12
8000cb44:	f4 e2 00 00 	ld.d	r2,r10[0]
8000cb48:	f0 e3 00 00 	st.d	r8[0],r2
8000cb4c:	c1 08       	rjmp	8000cb6c <get_arg+0x300>
8000cb4e:	6c 0a       	ld.w	r10,r6[0x0]
8000cb50:	f4 cc ff f8 	sub	r12,r10,-8
8000cb54:	8d 0c       	st.w	r6[0x0],r12
8000cb56:	f4 e2 00 00 	ld.d	r2,r10[0]
8000cb5a:	f0 e3 00 00 	st.d	r8[0],r2
8000cb5e:	c0 78       	rjmp	8000cb6c <get_arg+0x300>
8000cb60:	6c 0a       	ld.w	r10,r6[0x0]
8000cb62:	f4 cc ff fc 	sub	r12,r10,-4
8000cb66:	8d 0c       	st.w	r6[0x0],r12
8000cb68:	74 0a       	ld.w	r10,r10[0x0]
8000cb6a:	91 0a       	st.w	r8[0x0],r10
8000cb6c:	2f f5       	sub	r5,-1
8000cb6e:	2f 88       	sub	r8,-8
8000cb70:	2f c1       	sub	r1,-4
8000cb72:	12 35       	cp.w	r5,r9
8000cb74:	fe 9a ff d6 	brle	8000cb20 <get_arg+0x2b4>
8000cb78:	1c 93       	mov	r3,lr
8000cb7a:	40 52       	lddsp	r2,sp[0x14]
8000cb7c:	40 6e       	lddsp	lr,sp[0x18]
8000cb7e:	85 05       	st.w	r2[0x0],r5
8000cb80:	9d 0b       	st.w	lr[0x0],r11
8000cb82:	40 4b       	lddsp	r11,sp[0x10]
8000cb84:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000cb88:	2f 8d       	sub	sp,-32
8000cb8a:	d8 32       	popm	r0-r7,pc
8000cb8c:	80 00       	ld.sh	r0,r0[0x0]
8000cb8e:	c7 e6       	brmi	8000cc8a <_vfprintf_r+0xda>

8000cb90 <__sprint_r>:
8000cb90:	d4 21       	pushm	r4-r7,lr
8000cb92:	14 97       	mov	r7,r10
8000cb94:	74 28       	ld.w	r8,r10[0x8]
8000cb96:	58 08       	cp.w	r8,0
8000cb98:	c0 41       	brne	8000cba0 <__sprint_r+0x10>
8000cb9a:	95 18       	st.w	r10[0x4],r8
8000cb9c:	10 9c       	mov	r12,r8
8000cb9e:	d8 22       	popm	r4-r7,pc
8000cba0:	f0 1f 00 03 	mcall	8000cbac <__sprint_r+0x1c>
8000cba4:	30 08       	mov	r8,0
8000cba6:	8f 18       	st.w	r7[0x4],r8
8000cba8:	8f 28       	st.w	r7[0x8],r8
8000cbaa:	d8 22       	popm	r4-r7,pc
8000cbac:	80 00       	ld.sh	r0,r0[0x0]
8000cbae:	fe bc       	*unknown*

8000cbb0 <_vfprintf_r>:
8000cbb0:	d4 31       	pushm	r0-r7,lr
8000cbb2:	fa cd 06 bc 	sub	sp,sp,1724
8000cbb6:	51 09       	stdsp	sp[0x40],r9
8000cbb8:	16 91       	mov	r1,r11
8000cbba:	14 97       	mov	r7,r10
8000cbbc:	18 95       	mov	r5,r12
8000cbbe:	f0 1f 00 56 	mcall	8000cd14 <_vfprintf_r+0x164>
8000cbc2:	78 0c       	ld.w	r12,r12[0x0]
8000cbc4:	50 cc       	stdsp	sp[0x30],r12
8000cbc6:	58 05       	cp.w	r5,0
8000cbc8:	c0 70       	breq	8000cbd6 <_vfprintf_r+0x26>
8000cbca:	6a 68       	ld.w	r8,r5[0x18]
8000cbcc:	58 08       	cp.w	r8,0
8000cbce:	c0 41       	brne	8000cbd6 <_vfprintf_r+0x26>
8000cbd0:	0a 9c       	mov	r12,r5
8000cbd2:	f0 1f 00 52 	mcall	8000cd18 <_vfprintf_r+0x168>
8000cbd6:	4d 28       	lddpc	r8,8000cd1c <_vfprintf_r+0x16c>
8000cbd8:	10 31       	cp.w	r1,r8
8000cbda:	c0 31       	brne	8000cbe0 <_vfprintf_r+0x30>
8000cbdc:	6a 01       	ld.w	r1,r5[0x0]
8000cbde:	c0 a8       	rjmp	8000cbf2 <_vfprintf_r+0x42>
8000cbe0:	4d 08       	lddpc	r8,8000cd20 <_vfprintf_r+0x170>
8000cbe2:	10 31       	cp.w	r1,r8
8000cbe4:	c0 31       	brne	8000cbea <_vfprintf_r+0x3a>
8000cbe6:	6a 11       	ld.w	r1,r5[0x4]
8000cbe8:	c0 58       	rjmp	8000cbf2 <_vfprintf_r+0x42>
8000cbea:	4c f8       	lddpc	r8,8000cd24 <_vfprintf_r+0x174>
8000cbec:	10 31       	cp.w	r1,r8
8000cbee:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000cbf2:	82 68       	ld.sh	r8,r1[0xc]
8000cbf4:	ed b8 00 03 	bld	r8,0x3
8000cbf8:	c0 41       	brne	8000cc00 <_vfprintf_r+0x50>
8000cbfa:	62 48       	ld.w	r8,r1[0x10]
8000cbfc:	58 08       	cp.w	r8,0
8000cbfe:	c0 71       	brne	8000cc0c <_vfprintf_r+0x5c>
8000cc00:	02 9b       	mov	r11,r1
8000cc02:	0a 9c       	mov	r12,r5
8000cc04:	f0 1f 00 49 	mcall	8000cd28 <_vfprintf_r+0x178>
8000cc08:	e0 81 0f 99 	brne	8000eb3a <_vfprintf_r+0x1f8a>
8000cc0c:	82 68       	ld.sh	r8,r1[0xc]
8000cc0e:	10 99       	mov	r9,r8
8000cc10:	e2 19 00 1a 	andl	r9,0x1a,COH
8000cc14:	58 a9       	cp.w	r9,10
8000cc16:	c3 d1       	brne	8000cc90 <_vfprintf_r+0xe0>
8000cc18:	82 79       	ld.sh	r9,r1[0xe]
8000cc1a:	30 0a       	mov	r10,0
8000cc1c:	f4 09 19 00 	cp.h	r9,r10
8000cc20:	c3 85       	brlt	8000cc90 <_vfprintf_r+0xe0>
8000cc22:	a1 d8       	cbr	r8,0x1
8000cc24:	fb 58 05 d0 	st.h	sp[1488],r8
8000cc28:	62 88       	ld.w	r8,r1[0x20]
8000cc2a:	fb 48 05 e4 	st.w	sp[1508],r8
8000cc2e:	62 a8       	ld.w	r8,r1[0x28]
8000cc30:	fb 48 05 ec 	st.w	sp[1516],r8
8000cc34:	fa c8 ff bc 	sub	r8,sp,-68
8000cc38:	fb 48 05 d4 	st.w	sp[1492],r8
8000cc3c:	fb 48 05 c4 	st.w	sp[1476],r8
8000cc40:	e0 68 04 00 	mov	r8,1024
8000cc44:	fb 48 05 d8 	st.w	sp[1496],r8
8000cc48:	fb 48 05 cc 	st.w	sp[1484],r8
8000cc4c:	30 08       	mov	r8,0
8000cc4e:	fb 59 05 d2 	st.h	sp[1490],r9
8000cc52:	0e 9a       	mov	r10,r7
8000cc54:	41 09       	lddsp	r9,sp[0x40]
8000cc56:	fa c7 fa 3c 	sub	r7,sp,-1476
8000cc5a:	fb 48 05 dc 	st.w	sp[1500],r8
8000cc5e:	0a 9c       	mov	r12,r5
8000cc60:	0e 9b       	mov	r11,r7
8000cc62:	f0 1f 00 33 	mcall	8000cd2c <_vfprintf_r+0x17c>
8000cc66:	50 bc       	stdsp	sp[0x2c],r12
8000cc68:	c0 95       	brlt	8000cc7a <_vfprintf_r+0xca>
8000cc6a:	0e 9b       	mov	r11,r7
8000cc6c:	0a 9c       	mov	r12,r5
8000cc6e:	f0 1f 00 31 	mcall	8000cd30 <_vfprintf_r+0x180>
8000cc72:	40 be       	lddsp	lr,sp[0x2c]
8000cc74:	f9 be 01 ff 	movne	lr,-1
8000cc78:	50 be       	stdsp	sp[0x2c],lr
8000cc7a:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000cc7e:	ed b8 00 06 	bld	r8,0x6
8000cc82:	e0 81 0f 5e 	brne	8000eb3e <_vfprintf_r+0x1f8e>
8000cc86:	82 68       	ld.sh	r8,r1[0xc]
8000cc88:	a7 a8       	sbr	r8,0x6
8000cc8a:	a2 68       	st.h	r1[0xc],r8
8000cc8c:	e0 8f 0f 59 	bral	8000eb3e <_vfprintf_r+0x1f8e>
8000cc90:	30 08       	mov	r8,0
8000cc92:	fb 48 06 b4 	st.w	sp[1716],r8
8000cc96:	fb 48 06 90 	st.w	sp[1680],r8
8000cc9a:	fb 48 06 8c 	st.w	sp[1676],r8
8000cc9e:	fb 48 06 b0 	st.w	sp[1712],r8
8000cca2:	30 08       	mov	r8,0
8000cca4:	30 09       	mov	r9,0
8000cca6:	50 a7       	stdsp	sp[0x28],r7
8000cca8:	50 78       	stdsp	sp[0x1c],r8
8000ccaa:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ccae:	3f f8       	mov	r8,-1
8000ccb0:	50 59       	stdsp	sp[0x14],r9
8000ccb2:	fb 43 06 88 	st.w	sp[1672],r3
8000ccb6:	fb 48 05 44 	st.w	sp[1348],r8
8000ccba:	12 9c       	mov	r12,r9
8000ccbc:	50 69       	stdsp	sp[0x18],r9
8000ccbe:	50 d9       	stdsp	sp[0x34],r9
8000ccc0:	50 e9       	stdsp	sp[0x38],r9
8000ccc2:	50 b9       	stdsp	sp[0x2c],r9
8000ccc4:	12 97       	mov	r7,r9
8000ccc6:	0a 94       	mov	r4,r5
8000ccc8:	40 a2       	lddsp	r2,sp[0x28]
8000ccca:	32 5a       	mov	r10,37
8000cccc:	30 08       	mov	r8,0
8000ccce:	c0 28       	rjmp	8000ccd2 <_vfprintf_r+0x122>
8000ccd0:	2f f2       	sub	r2,-1
8000ccd2:	05 89       	ld.ub	r9,r2[0x0]
8000ccd4:	f0 09 18 00 	cp.b	r9,r8
8000ccd8:	5f 1b       	srne	r11
8000ccda:	f4 09 18 00 	cp.b	r9,r10
8000ccde:	5f 19       	srne	r9
8000cce0:	f3 eb 00 0b 	and	r11,r9,r11
8000cce4:	f0 0b 18 00 	cp.b	r11,r8
8000cce8:	cf 41       	brne	8000ccd0 <_vfprintf_r+0x120>
8000ccea:	40 ab       	lddsp	r11,sp[0x28]
8000ccec:	e4 0b 01 06 	sub	r6,r2,r11
8000ccf0:	c2 f0       	breq	8000cd4e <_vfprintf_r+0x19e>
8000ccf2:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ccf6:	0c 08       	add	r8,r6
8000ccf8:	87 0b       	st.w	r3[0x0],r11
8000ccfa:	fb 48 06 90 	st.w	sp[1680],r8
8000ccfe:	87 16       	st.w	r3[0x4],r6
8000cd00:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000cd04:	2f f8       	sub	r8,-1
8000cd06:	fb 48 06 8c 	st.w	sp[1676],r8
8000cd0a:	58 78       	cp.w	r8,7
8000cd0c:	e0 89 00 14 	brgt	8000cd34 <_vfprintf_r+0x184>
8000cd10:	2f 83       	sub	r3,-8
8000cd12:	c1 b8       	rjmp	8000cd48 <_vfprintf_r+0x198>
8000cd14:	80 01       	ld.sh	r1,r0[0x0]
8000cd16:	01 d4       	ld.ub	r4,r0[0x5]
8000cd18:	80 00       	ld.sh	r0,r0[0x0]
8000cd1a:	fb c4       	*unknown*
8000cd1c:	80 01       	ld.sh	r1,r0[0x0]
8000cd1e:	25 38       	sub	r8,83
8000cd20:	80 01       	ld.sh	r1,r0[0x0]
8000cd22:	25 58       	sub	r8,85
8000cd24:	80 01       	ld.sh	r1,r0[0x0]
8000cd26:	25 78       	sub	r8,87
8000cd28:	80 00       	ld.sh	r0,r0[0x0]
8000cd2a:	eb 4c 80 00 	st.w	r5[-32768],r12
8000cd2e:	cb b0       	breq	8000cca4 <_vfprintf_r+0xf4>
8000cd30:	80 00       	ld.sh	r0,r0[0x0]
8000cd32:	f9 e8 fa ca 	sthh.w	r10[0x2b0],r12:t,r8:t
8000cd36:	f9 78 02 9b 	stcond	r12[667],r8
8000cd3a:	08 9c       	mov	r12,r4
8000cd3c:	f0 1f 00 71 	mcall	8000cf00 <_vfprintf_r+0x350>
8000cd40:	e0 81 0e f9 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000cd44:	fa c3 f9 e0 	sub	r3,sp,-1568
8000cd48:	40 ba       	lddsp	r10,sp[0x2c]
8000cd4a:	0c 0a       	add	r10,r6
8000cd4c:	50 ba       	stdsp	sp[0x2c],r10
8000cd4e:	05 89       	ld.ub	r9,r2[0x0]
8000cd50:	30 08       	mov	r8,0
8000cd52:	f0 09 18 00 	cp.b	r9,r8
8000cd56:	e0 80 0e dd 	breq	8000eb10 <_vfprintf_r+0x1f60>
8000cd5a:	30 09       	mov	r9,0
8000cd5c:	fb 68 06 bb 	st.b	sp[1723],r8
8000cd60:	0e 96       	mov	r6,r7
8000cd62:	e4 c8 ff ff 	sub	r8,r2,-1
8000cd66:	3f fe       	mov	lr,-1
8000cd68:	50 93       	stdsp	sp[0x24],r3
8000cd6a:	50 41       	stdsp	sp[0x10],r1
8000cd6c:	0e 93       	mov	r3,r7
8000cd6e:	04 91       	mov	r1,r2
8000cd70:	50 89       	stdsp	sp[0x20],r9
8000cd72:	50 a8       	stdsp	sp[0x28],r8
8000cd74:	50 2e       	stdsp	sp[0x8],lr
8000cd76:	50 39       	stdsp	sp[0xc],r9
8000cd78:	12 95       	mov	r5,r9
8000cd7a:	12 90       	mov	r0,r9
8000cd7c:	10 97       	mov	r7,r8
8000cd7e:	08 92       	mov	r2,r4
8000cd80:	c0 78       	rjmp	8000cd8e <_vfprintf_r+0x1de>
8000cd82:	3f fc       	mov	r12,-1
8000cd84:	08 97       	mov	r7,r4
8000cd86:	50 2c       	stdsp	sp[0x8],r12
8000cd88:	c0 38       	rjmp	8000cd8e <_vfprintf_r+0x1de>
8000cd8a:	30 0b       	mov	r11,0
8000cd8c:	50 3b       	stdsp	sp[0xc],r11
8000cd8e:	0f 38       	ld.ub	r8,r7++
8000cd90:	c0 28       	rjmp	8000cd94 <_vfprintf_r+0x1e4>
8000cd92:	12 90       	mov	r0,r9
8000cd94:	f0 c9 00 20 	sub	r9,r8,32
8000cd98:	e0 49 00 58 	cp.w	r9,88
8000cd9c:	e0 8b 0a 4d 	brhi	8000e236 <_vfprintf_r+0x1686>
8000cda0:	4d 9a       	lddpc	r10,8000cf04 <_vfprintf_r+0x354>
8000cda2:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000cda6:	50 a7       	stdsp	sp[0x28],r7
8000cda8:	50 80       	stdsp	sp[0x20],r0
8000cdaa:	0c 97       	mov	r7,r6
8000cdac:	04 94       	mov	r4,r2
8000cdae:	06 96       	mov	r6,r3
8000cdb0:	02 92       	mov	r2,r1
8000cdb2:	4d 69       	lddpc	r9,8000cf08 <_vfprintf_r+0x358>
8000cdb4:	40 93       	lddsp	r3,sp[0x24]
8000cdb6:	10 90       	mov	r0,r8
8000cdb8:	40 41       	lddsp	r1,sp[0x10]
8000cdba:	50 d9       	stdsp	sp[0x34],r9
8000cdbc:	e0 8f 08 aa 	bral	8000df10 <_vfprintf_r+0x1360>
8000cdc0:	30 08       	mov	r8,0
8000cdc2:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000cdc6:	f0 09 18 00 	cp.b	r9,r8
8000cdca:	ce 21       	brne	8000cd8e <_vfprintf_r+0x1de>
8000cdcc:	32 08       	mov	r8,32
8000cdce:	c6 e8       	rjmp	8000ceaa <_vfprintf_r+0x2fa>
8000cdd0:	a1 a5       	sbr	r5,0x0
8000cdd2:	cd eb       	rjmp	8000cd8e <_vfprintf_r+0x1de>
8000cdd4:	0f 89       	ld.ub	r9,r7[0x0]
8000cdd6:	f2 c8 00 30 	sub	r8,r9,48
8000cdda:	58 98       	cp.w	r8,9
8000cddc:	e0 8b 00 1d 	brhi	8000ce16 <_vfprintf_r+0x266>
8000cde0:	ee c8 ff ff 	sub	r8,r7,-1
8000cde4:	30 0b       	mov	r11,0
8000cde6:	23 09       	sub	r9,48
8000cde8:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000cdec:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000cdf0:	11 39       	ld.ub	r9,r8++
8000cdf2:	f2 ca 00 30 	sub	r10,r9,48
8000cdf6:	58 9a       	cp.w	r10,9
8000cdf8:	fe 98 ff f7 	brls	8000cde6 <_vfprintf_r+0x236>
8000cdfc:	e0 49 00 24 	cp.w	r9,36
8000ce00:	cc 51       	brne	8000cd8a <_vfprintf_r+0x1da>
8000ce02:	e0 4b 00 20 	cp.w	r11,32
8000ce06:	e0 89 0e 95 	brgt	8000eb30 <_vfprintf_r+0x1f80>
8000ce0a:	20 1b       	sub	r11,1
8000ce0c:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000ce10:	12 3b       	cp.w	r11,r9
8000ce12:	c0 95       	brlt	8000ce24 <_vfprintf_r+0x274>
8000ce14:	c1 08       	rjmp	8000ce34 <_vfprintf_r+0x284>
8000ce16:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000ce1a:	ec ca ff ff 	sub	r10,r6,-1
8000ce1e:	12 36       	cp.w	r6,r9
8000ce20:	c1 f5       	brlt	8000ce5e <_vfprintf_r+0x2ae>
8000ce22:	c2 68       	rjmp	8000ce6e <_vfprintf_r+0x2be>
8000ce24:	fa ce f9 44 	sub	lr,sp,-1724
8000ce28:	10 97       	mov	r7,r8
8000ce2a:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
8000ce2e:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000ce32:	c3 58       	rjmp	8000ce9c <_vfprintf_r+0x2ec>
8000ce34:	10 97       	mov	r7,r8
8000ce36:	fa c8 f9 50 	sub	r8,sp,-1712
8000ce3a:	1a d8       	st.w	--sp,r8
8000ce3c:	fa c8 fa b8 	sub	r8,sp,-1352
8000ce40:	1a d8       	st.w	--sp,r8
8000ce42:	fa c8 fb b4 	sub	r8,sp,-1100
8000ce46:	02 9a       	mov	r10,r1
8000ce48:	1a d8       	st.w	--sp,r8
8000ce4a:	04 9c       	mov	r12,r2
8000ce4c:	fa c8 f9 40 	sub	r8,sp,-1728
8000ce50:	fa c9 ff b4 	sub	r9,sp,-76
8000ce54:	f0 1f 00 2e 	mcall	8000cf0c <_vfprintf_r+0x35c>
8000ce58:	2f dd       	sub	sp,-12
8000ce5a:	78 00       	ld.w	r0,r12[0x0]
8000ce5c:	c2 08       	rjmp	8000ce9c <_vfprintf_r+0x2ec>
8000ce5e:	fa cc f9 44 	sub	r12,sp,-1724
8000ce62:	14 96       	mov	r6,r10
8000ce64:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000ce68:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000ce6c:	c1 88       	rjmp	8000ce9c <_vfprintf_r+0x2ec>
8000ce6e:	41 08       	lddsp	r8,sp[0x40]
8000ce70:	59 f9       	cp.w	r9,31
8000ce72:	e0 89 00 11 	brgt	8000ce94 <_vfprintf_r+0x2e4>
8000ce76:	f0 cb ff fc 	sub	r11,r8,-4
8000ce7a:	51 0b       	stdsp	sp[0x40],r11
8000ce7c:	70 00       	ld.w	r0,r8[0x0]
8000ce7e:	fa cb f9 44 	sub	r11,sp,-1724
8000ce82:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000ce86:	f1 40 fd 88 	st.w	r8[-632],r0
8000ce8a:	2f f9       	sub	r9,-1
8000ce8c:	14 96       	mov	r6,r10
8000ce8e:	fb 49 06 b4 	st.w	sp[1716],r9
8000ce92:	c0 58       	rjmp	8000ce9c <_vfprintf_r+0x2ec>
8000ce94:	70 00       	ld.w	r0,r8[0x0]
8000ce96:	14 96       	mov	r6,r10
8000ce98:	2f c8       	sub	r8,-4
8000ce9a:	51 08       	stdsp	sp[0x40],r8
8000ce9c:	58 00       	cp.w	r0,0
8000ce9e:	fe 94 ff 78 	brge	8000cd8e <_vfprintf_r+0x1de>
8000cea2:	5c 30       	neg	r0
8000cea4:	a3 a5       	sbr	r5,0x2
8000cea6:	c7 4b       	rjmp	8000cd8e <_vfprintf_r+0x1de>
8000cea8:	32 b8       	mov	r8,43
8000ceaa:	fb 68 06 bb 	st.b	sp[1723],r8
8000ceae:	c7 0b       	rjmp	8000cd8e <_vfprintf_r+0x1de>
8000ceb0:	0f 38       	ld.ub	r8,r7++
8000ceb2:	e0 48 00 2a 	cp.w	r8,42
8000ceb6:	c0 30       	breq	8000cebc <_vfprintf_r+0x30c>
8000ceb8:	30 09       	mov	r9,0
8000ceba:	c8 08       	rjmp	8000cfba <_vfprintf_r+0x40a>
8000cebc:	0f 88       	ld.ub	r8,r7[0x0]
8000cebe:	f0 c9 00 30 	sub	r9,r8,48
8000cec2:	58 99       	cp.w	r9,9
8000cec4:	e0 8b 00 26 	brhi	8000cf10 <_vfprintf_r+0x360>
8000cec8:	ee c4 ff ff 	sub	r4,r7,-1
8000cecc:	30 0b       	mov	r11,0
8000cece:	23 08       	sub	r8,48
8000ced0:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000ced4:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000ced8:	09 38       	ld.ub	r8,r4++
8000ceda:	f0 c9 00 30 	sub	r9,r8,48
8000cede:	58 99       	cp.w	r9,9
8000cee0:	fe 98 ff f7 	brls	8000cece <_vfprintf_r+0x31e>
8000cee4:	e0 48 00 24 	cp.w	r8,36
8000cee8:	fe 91 ff 51 	brne	8000cd8a <_vfprintf_r+0x1da>
8000ceec:	e0 4b 00 20 	cp.w	r11,32
8000cef0:	e0 89 0e 20 	brgt	8000eb30 <_vfprintf_r+0x1f80>
8000cef4:	20 1b       	sub	r11,1
8000cef6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000cefa:	10 3b       	cp.w	r11,r8
8000cefc:	c1 15       	brlt	8000cf1e <_vfprintf_r+0x36e>
8000cefe:	c1 88       	rjmp	8000cf2e <_vfprintf_r+0x37e>
8000cf00:	80 00       	ld.sh	r0,r0[0x0]
8000cf02:	cb 90       	breq	8000ce74 <_vfprintf_r+0x2c4>
8000cf04:	80 01       	ld.sh	r1,r0[0x0]
8000cf06:	21 90       	sub	r0,25
8000cf08:	80 01       	ld.sh	r1,r0[0x0]
8000cf0a:	23 cc       	sub	r12,60
8000cf0c:	80 00       	ld.sh	r0,r0[0x0]
8000cf0e:	c8 6c       	rcall	8000d01a <_vfprintf_r+0x46a>
8000cf10:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000cf14:	ec c9 ff ff 	sub	r9,r6,-1
8000cf18:	14 36       	cp.w	r6,r10
8000cf1a:	c1 f5       	brlt	8000cf58 <_vfprintf_r+0x3a8>
8000cf1c:	c2 88       	rjmp	8000cf6c <_vfprintf_r+0x3bc>
8000cf1e:	fa ca f9 44 	sub	r10,sp,-1724
8000cf22:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000cf26:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000cf2a:	50 2b       	stdsp	sp[0x8],r11
8000cf2c:	c3 c8       	rjmp	8000cfa4 <_vfprintf_r+0x3f4>
8000cf2e:	fa c8 f9 50 	sub	r8,sp,-1712
8000cf32:	1a d8       	st.w	--sp,r8
8000cf34:	fa c8 fa b8 	sub	r8,sp,-1352
8000cf38:	1a d8       	st.w	--sp,r8
8000cf3a:	fa c8 fb b4 	sub	r8,sp,-1100
8000cf3e:	02 9a       	mov	r10,r1
8000cf40:	1a d8       	st.w	--sp,r8
8000cf42:	04 9c       	mov	r12,r2
8000cf44:	fa c8 f9 40 	sub	r8,sp,-1728
8000cf48:	fa c9 ff b4 	sub	r9,sp,-76
8000cf4c:	f0 1f 01 9e 	mcall	8000d5c4 <_vfprintf_r+0xa14>
8000cf50:	2f dd       	sub	sp,-12
8000cf52:	78 0c       	ld.w	r12,r12[0x0]
8000cf54:	50 2c       	stdsp	sp[0x8],r12
8000cf56:	c2 78       	rjmp	8000cfa4 <_vfprintf_r+0x3f4>
8000cf58:	12 96       	mov	r6,r9
8000cf5a:	0e 94       	mov	r4,r7
8000cf5c:	fa c9 f9 44 	sub	r9,sp,-1724
8000cf60:	f2 03 00 38 	add	r8,r9,r3<<0x3
8000cf64:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000cf68:	50 28       	stdsp	sp[0x8],r8
8000cf6a:	c1 d8       	rjmp	8000cfa4 <_vfprintf_r+0x3f4>
8000cf6c:	41 08       	lddsp	r8,sp[0x40]
8000cf6e:	59 fa       	cp.w	r10,31
8000cf70:	e0 89 00 14 	brgt	8000cf98 <_vfprintf_r+0x3e8>
8000cf74:	f0 cb ff fc 	sub	r11,r8,-4
8000cf78:	70 08       	ld.w	r8,r8[0x0]
8000cf7a:	51 0b       	stdsp	sp[0x40],r11
8000cf7c:	50 28       	stdsp	sp[0x8],r8
8000cf7e:	fa c6 f9 44 	sub	r6,sp,-1724
8000cf82:	40 2e       	lddsp	lr,sp[0x8]
8000cf84:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000cf88:	f1 4e fd 88 	st.w	r8[-632],lr
8000cf8c:	2f fa       	sub	r10,-1
8000cf8e:	0e 94       	mov	r4,r7
8000cf90:	fb 4a 06 b4 	st.w	sp[1716],r10
8000cf94:	12 96       	mov	r6,r9
8000cf96:	c0 78       	rjmp	8000cfa4 <_vfprintf_r+0x3f4>
8000cf98:	70 0c       	ld.w	r12,r8[0x0]
8000cf9a:	0e 94       	mov	r4,r7
8000cf9c:	2f c8       	sub	r8,-4
8000cf9e:	50 2c       	stdsp	sp[0x8],r12
8000cfa0:	12 96       	mov	r6,r9
8000cfa2:	51 08       	stdsp	sp[0x40],r8
8000cfa4:	40 2b       	lddsp	r11,sp[0x8]
8000cfa6:	58 0b       	cp.w	r11,0
8000cfa8:	fe 95 fe ed 	brlt	8000cd82 <_vfprintf_r+0x1d2>
8000cfac:	08 97       	mov	r7,r4
8000cfae:	cf 0a       	rjmp	8000cd8e <_vfprintf_r+0x1de>
8000cfb0:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000cfb4:	0f 38       	ld.ub	r8,r7++
8000cfb6:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000cfba:	f0 ca 00 30 	sub	r10,r8,48
8000cfbe:	58 9a       	cp.w	r10,9
8000cfc0:	fe 98 ff f8 	brls	8000cfb0 <_vfprintf_r+0x400>
8000cfc4:	3f fa       	mov	r10,-1
8000cfc6:	f2 0a 0c 49 	max	r9,r9,r10
8000cfca:	50 29       	stdsp	sp[0x8],r9
8000cfcc:	ce 4a       	rjmp	8000cd94 <_vfprintf_r+0x1e4>
8000cfce:	a7 b5       	sbr	r5,0x7
8000cfd0:	cd fa       	rjmp	8000cd8e <_vfprintf_r+0x1de>
8000cfd2:	30 09       	mov	r9,0
8000cfd4:	23 08       	sub	r8,48
8000cfd6:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000cfda:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000cfde:	0f 38       	ld.ub	r8,r7++
8000cfe0:	f0 ca 00 30 	sub	r10,r8,48
8000cfe4:	58 9a       	cp.w	r10,9
8000cfe6:	fe 98 ff f7 	brls	8000cfd4 <_vfprintf_r+0x424>
8000cfea:	e0 48 00 24 	cp.w	r8,36
8000cfee:	fe 91 fe d2 	brne	8000cd92 <_vfprintf_r+0x1e2>
8000cff2:	e0 49 00 20 	cp.w	r9,32
8000cff6:	e0 89 0d 9d 	brgt	8000eb30 <_vfprintf_r+0x1f80>
8000cffa:	f2 c3 00 01 	sub	r3,r9,1
8000cffe:	30 19       	mov	r9,1
8000d000:	50 39       	stdsp	sp[0xc],r9
8000d002:	cc 6a       	rjmp	8000cd8e <_vfprintf_r+0x1de>
8000d004:	a3 b5       	sbr	r5,0x3
8000d006:	cc 4a       	rjmp	8000cd8e <_vfprintf_r+0x1de>
8000d008:	a7 a5       	sbr	r5,0x6
8000d00a:	cc 2a       	rjmp	8000cd8e <_vfprintf_r+0x1de>
8000d00c:	0a 98       	mov	r8,r5
8000d00e:	a5 b5       	sbr	r5,0x5
8000d010:	a5 a8       	sbr	r8,0x4
8000d012:	0f 89       	ld.ub	r9,r7[0x0]
8000d014:	36 ce       	mov	lr,108
8000d016:	fc 09 18 00 	cp.b	r9,lr
8000d01a:	f7 b7 00 ff 	subeq	r7,-1
8000d01e:	f0 05 17 10 	movne	r5,r8
8000d022:	cb 6a       	rjmp	8000cd8e <_vfprintf_r+0x1de>
8000d024:	a5 b5       	sbr	r5,0x5
8000d026:	cb 4a       	rjmp	8000cd8e <_vfprintf_r+0x1de>
8000d028:	50 a7       	stdsp	sp[0x28],r7
8000d02a:	50 80       	stdsp	sp[0x20],r0
8000d02c:	0c 97       	mov	r7,r6
8000d02e:	10 90       	mov	r0,r8
8000d030:	06 96       	mov	r6,r3
8000d032:	04 94       	mov	r4,r2
8000d034:	40 93       	lddsp	r3,sp[0x24]
8000d036:	02 92       	mov	r2,r1
8000d038:	0e 99       	mov	r9,r7
8000d03a:	40 41       	lddsp	r1,sp[0x10]
8000d03c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d040:	40 3c       	lddsp	r12,sp[0xc]
8000d042:	58 0c       	cp.w	r12,0
8000d044:	c1 d0       	breq	8000d07e <_vfprintf_r+0x4ce>
8000d046:	10 36       	cp.w	r6,r8
8000d048:	c0 64       	brge	8000d054 <_vfprintf_r+0x4a4>
8000d04a:	fa cb f9 44 	sub	r11,sp,-1724
8000d04e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d052:	c1 d8       	rjmp	8000d08c <_vfprintf_r+0x4dc>
8000d054:	fa c8 f9 50 	sub	r8,sp,-1712
8000d058:	1a d8       	st.w	--sp,r8
8000d05a:	fa c8 fa b8 	sub	r8,sp,-1352
8000d05e:	1a d8       	st.w	--sp,r8
8000d060:	fa c8 fb b4 	sub	r8,sp,-1100
8000d064:	1a d8       	st.w	--sp,r8
8000d066:	fa c8 f9 40 	sub	r8,sp,-1728
8000d06a:	fa c9 ff b4 	sub	r9,sp,-76
8000d06e:	04 9a       	mov	r10,r2
8000d070:	0c 9b       	mov	r11,r6
8000d072:	08 9c       	mov	r12,r4
8000d074:	f0 1f 01 54 	mcall	8000d5c4 <_vfprintf_r+0xa14>
8000d078:	2f dd       	sub	sp,-12
8000d07a:	19 b8       	ld.ub	r8,r12[0x3]
8000d07c:	c2 28       	rjmp	8000d0c0 <_vfprintf_r+0x510>
8000d07e:	2f f7       	sub	r7,-1
8000d080:	10 39       	cp.w	r9,r8
8000d082:	c0 84       	brge	8000d092 <_vfprintf_r+0x4e2>
8000d084:	fa ca f9 44 	sub	r10,sp,-1724
8000d088:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000d08c:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000d090:	c1 88       	rjmp	8000d0c0 <_vfprintf_r+0x510>
8000d092:	41 09       	lddsp	r9,sp[0x40]
8000d094:	59 f8       	cp.w	r8,31
8000d096:	e0 89 00 12 	brgt	8000d0ba <_vfprintf_r+0x50a>
8000d09a:	f2 ca ff fc 	sub	r10,r9,-4
8000d09e:	51 0a       	stdsp	sp[0x40],r10
8000d0a0:	72 09       	ld.w	r9,r9[0x0]
8000d0a2:	fa c6 f9 44 	sub	r6,sp,-1724
8000d0a6:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000d0aa:	2f f8       	sub	r8,-1
8000d0ac:	f5 49 fd 88 	st.w	r10[-632],r9
8000d0b0:	fb 48 06 b4 	st.w	sp[1716],r8
8000d0b4:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000d0b8:	c0 48       	rjmp	8000d0c0 <_vfprintf_r+0x510>
8000d0ba:	13 b8       	ld.ub	r8,r9[0x3]
8000d0bc:	2f c9       	sub	r9,-4
8000d0be:	51 09       	stdsp	sp[0x40],r9
8000d0c0:	fb 68 06 60 	st.b	sp[1632],r8
8000d0c4:	30 0e       	mov	lr,0
8000d0c6:	30 08       	mov	r8,0
8000d0c8:	30 12       	mov	r2,1
8000d0ca:	fb 68 06 bb 	st.b	sp[1723],r8
8000d0ce:	50 2e       	stdsp	sp[0x8],lr
8000d0d0:	e0 8f 08 c5 	bral	8000e25a <_vfprintf_r+0x16aa>
8000d0d4:	50 a7       	stdsp	sp[0x28],r7
8000d0d6:	50 80       	stdsp	sp[0x20],r0
8000d0d8:	0c 97       	mov	r7,r6
8000d0da:	04 94       	mov	r4,r2
8000d0dc:	06 96       	mov	r6,r3
8000d0de:	02 92       	mov	r2,r1
8000d0e0:	40 93       	lddsp	r3,sp[0x24]
8000d0e2:	10 90       	mov	r0,r8
8000d0e4:	40 41       	lddsp	r1,sp[0x10]
8000d0e6:	a5 a5       	sbr	r5,0x4
8000d0e8:	c0 a8       	rjmp	8000d0fc <_vfprintf_r+0x54c>
8000d0ea:	50 a7       	stdsp	sp[0x28],r7
8000d0ec:	50 80       	stdsp	sp[0x20],r0
8000d0ee:	0c 97       	mov	r7,r6
8000d0f0:	04 94       	mov	r4,r2
8000d0f2:	06 96       	mov	r6,r3
8000d0f4:	02 92       	mov	r2,r1
8000d0f6:	40 93       	lddsp	r3,sp[0x24]
8000d0f8:	10 90       	mov	r0,r8
8000d0fa:	40 41       	lddsp	r1,sp[0x10]
8000d0fc:	ed b5 00 05 	bld	r5,0x5
8000d100:	c5 11       	brne	8000d1a2 <_vfprintf_r+0x5f2>
8000d102:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d106:	40 3c       	lddsp	r12,sp[0xc]
8000d108:	58 0c       	cp.w	r12,0
8000d10a:	c1 e0       	breq	8000d146 <_vfprintf_r+0x596>
8000d10c:	10 36       	cp.w	r6,r8
8000d10e:	c0 64       	brge	8000d11a <_vfprintf_r+0x56a>
8000d110:	fa cb f9 44 	sub	r11,sp,-1724
8000d114:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d118:	c2 08       	rjmp	8000d158 <_vfprintf_r+0x5a8>
8000d11a:	fa c8 f9 50 	sub	r8,sp,-1712
8000d11e:	1a d8       	st.w	--sp,r8
8000d120:	fa c8 fa b8 	sub	r8,sp,-1352
8000d124:	0c 9b       	mov	r11,r6
8000d126:	1a d8       	st.w	--sp,r8
8000d128:	fa c8 fb b4 	sub	r8,sp,-1100
8000d12c:	1a d8       	st.w	--sp,r8
8000d12e:	fa c9 ff b4 	sub	r9,sp,-76
8000d132:	fa c8 f9 40 	sub	r8,sp,-1728
8000d136:	04 9a       	mov	r10,r2
8000d138:	08 9c       	mov	r12,r4
8000d13a:	f0 1f 01 23 	mcall	8000d5c4 <_vfprintf_r+0xa14>
8000d13e:	2f dd       	sub	sp,-12
8000d140:	78 1b       	ld.w	r11,r12[0x4]
8000d142:	78 09       	ld.w	r9,r12[0x0]
8000d144:	c2 b8       	rjmp	8000d19a <_vfprintf_r+0x5ea>
8000d146:	ee ca ff ff 	sub	r10,r7,-1
8000d14a:	10 37       	cp.w	r7,r8
8000d14c:	c0 b4       	brge	8000d162 <_vfprintf_r+0x5b2>
8000d14e:	fa c9 f9 44 	sub	r9,sp,-1724
8000d152:	14 97       	mov	r7,r10
8000d154:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d158:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000d15c:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000d160:	c1 d8       	rjmp	8000d19a <_vfprintf_r+0x5ea>
8000d162:	41 09       	lddsp	r9,sp[0x40]
8000d164:	59 f8       	cp.w	r8,31
8000d166:	e0 89 00 14 	brgt	8000d18e <_vfprintf_r+0x5de>
8000d16a:	f2 cb ff f8 	sub	r11,r9,-8
8000d16e:	51 0b       	stdsp	sp[0x40],r11
8000d170:	fa c6 f9 44 	sub	r6,sp,-1724
8000d174:	72 1b       	ld.w	r11,r9[0x4]
8000d176:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000d17a:	72 09       	ld.w	r9,r9[0x0]
8000d17c:	f9 4b fd 8c 	st.w	r12[-628],r11
8000d180:	f9 49 fd 88 	st.w	r12[-632],r9
8000d184:	2f f8       	sub	r8,-1
8000d186:	14 97       	mov	r7,r10
8000d188:	fb 48 06 b4 	st.w	sp[1716],r8
8000d18c:	c0 78       	rjmp	8000d19a <_vfprintf_r+0x5ea>
8000d18e:	f2 c8 ff f8 	sub	r8,r9,-8
8000d192:	72 1b       	ld.w	r11,r9[0x4]
8000d194:	14 97       	mov	r7,r10
8000d196:	51 08       	stdsp	sp[0x40],r8
8000d198:	72 09       	ld.w	r9,r9[0x0]
8000d19a:	16 98       	mov	r8,r11
8000d19c:	fa e9 00 00 	st.d	sp[0],r8
8000d1a0:	ca e8       	rjmp	8000d2fc <_vfprintf_r+0x74c>
8000d1a2:	ed b5 00 04 	bld	r5,0x4
8000d1a6:	c1 71       	brne	8000d1d4 <_vfprintf_r+0x624>
8000d1a8:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d1ac:	40 3e       	lddsp	lr,sp[0xc]
8000d1ae:	58 0e       	cp.w	lr,0
8000d1b0:	c0 80       	breq	8000d1c0 <_vfprintf_r+0x610>
8000d1b2:	10 36       	cp.w	r6,r8
8000d1b4:	c6 94       	brge	8000d286 <_vfprintf_r+0x6d6>
8000d1b6:	fa cc f9 44 	sub	r12,sp,-1724
8000d1ba:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000d1be:	c8 28       	rjmp	8000d2c2 <_vfprintf_r+0x712>
8000d1c0:	ee ca ff ff 	sub	r10,r7,-1
8000d1c4:	10 37       	cp.w	r7,r8
8000d1c6:	e0 84 00 81 	brge	8000d2c8 <_vfprintf_r+0x718>
8000d1ca:	fa cb f9 44 	sub	r11,sp,-1724
8000d1ce:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d1d2:	c7 78       	rjmp	8000d2c0 <_vfprintf_r+0x710>
8000d1d4:	ed b5 00 06 	bld	r5,0x6
8000d1d8:	c4 b1       	brne	8000d26e <_vfprintf_r+0x6be>
8000d1da:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d1de:	40 3c       	lddsp	r12,sp[0xc]
8000d1e0:	58 0c       	cp.w	r12,0
8000d1e2:	c1 d0       	breq	8000d21c <_vfprintf_r+0x66c>
8000d1e4:	10 36       	cp.w	r6,r8
8000d1e6:	c0 64       	brge	8000d1f2 <_vfprintf_r+0x642>
8000d1e8:	fa cb f9 44 	sub	r11,sp,-1724
8000d1ec:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d1f0:	c1 f8       	rjmp	8000d22e <_vfprintf_r+0x67e>
8000d1f2:	fa c8 f9 50 	sub	r8,sp,-1712
8000d1f6:	1a d8       	st.w	--sp,r8
8000d1f8:	fa c8 fa b8 	sub	r8,sp,-1352
8000d1fc:	1a d8       	st.w	--sp,r8
8000d1fe:	fa c8 fb b4 	sub	r8,sp,-1100
8000d202:	1a d8       	st.w	--sp,r8
8000d204:	fa c8 f9 40 	sub	r8,sp,-1728
8000d208:	fa c9 ff b4 	sub	r9,sp,-76
8000d20c:	04 9a       	mov	r10,r2
8000d20e:	0c 9b       	mov	r11,r6
8000d210:	08 9c       	mov	r12,r4
8000d212:	f0 1f 00 ed 	mcall	8000d5c4 <_vfprintf_r+0xa14>
8000d216:	2f dd       	sub	sp,-12
8000d218:	98 18       	ld.sh	r8,r12[0x2]
8000d21a:	c2 68       	rjmp	8000d266 <_vfprintf_r+0x6b6>
8000d21c:	ee ca ff ff 	sub	r10,r7,-1
8000d220:	10 37       	cp.w	r7,r8
8000d222:	c0 94       	brge	8000d234 <_vfprintf_r+0x684>
8000d224:	fa c9 f9 44 	sub	r9,sp,-1724
8000d228:	14 97       	mov	r7,r10
8000d22a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d22e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000d232:	c1 a8       	rjmp	8000d266 <_vfprintf_r+0x6b6>
8000d234:	41 09       	lddsp	r9,sp[0x40]
8000d236:	59 f8       	cp.w	r8,31
8000d238:	e0 89 00 13 	brgt	8000d25e <_vfprintf_r+0x6ae>
8000d23c:	f2 cb ff fc 	sub	r11,r9,-4
8000d240:	51 0b       	stdsp	sp[0x40],r11
8000d242:	72 09       	ld.w	r9,r9[0x0]
8000d244:	fa c6 f9 44 	sub	r6,sp,-1724
8000d248:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000d24c:	2f f8       	sub	r8,-1
8000d24e:	f7 49 fd 88 	st.w	r11[-632],r9
8000d252:	fb 48 06 b4 	st.w	sp[1716],r8
8000d256:	14 97       	mov	r7,r10
8000d258:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000d25c:	c0 58       	rjmp	8000d266 <_vfprintf_r+0x6b6>
8000d25e:	92 18       	ld.sh	r8,r9[0x2]
8000d260:	14 97       	mov	r7,r10
8000d262:	2f c9       	sub	r9,-4
8000d264:	51 09       	stdsp	sp[0x40],r9
8000d266:	50 18       	stdsp	sp[0x4],r8
8000d268:	bf 58       	asr	r8,0x1f
8000d26a:	50 08       	stdsp	sp[0x0],r8
8000d26c:	c4 88       	rjmp	8000d2fc <_vfprintf_r+0x74c>
8000d26e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d272:	40 3c       	lddsp	r12,sp[0xc]
8000d274:	58 0c       	cp.w	r12,0
8000d276:	c1 d0       	breq	8000d2b0 <_vfprintf_r+0x700>
8000d278:	10 36       	cp.w	r6,r8
8000d27a:	c0 64       	brge	8000d286 <_vfprintf_r+0x6d6>
8000d27c:	fa cb f9 44 	sub	r11,sp,-1724
8000d280:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d284:	c1 f8       	rjmp	8000d2c2 <_vfprintf_r+0x712>
8000d286:	fa c8 f9 50 	sub	r8,sp,-1712
8000d28a:	1a d8       	st.w	--sp,r8
8000d28c:	fa c8 fa b8 	sub	r8,sp,-1352
8000d290:	0c 9b       	mov	r11,r6
8000d292:	1a d8       	st.w	--sp,r8
8000d294:	fa c8 fb b4 	sub	r8,sp,-1100
8000d298:	04 9a       	mov	r10,r2
8000d29a:	1a d8       	st.w	--sp,r8
8000d29c:	08 9c       	mov	r12,r4
8000d29e:	fa c8 f9 40 	sub	r8,sp,-1728
8000d2a2:	fa c9 ff b4 	sub	r9,sp,-76
8000d2a6:	f0 1f 00 c8 	mcall	8000d5c4 <_vfprintf_r+0xa14>
8000d2aa:	2f dd       	sub	sp,-12
8000d2ac:	78 0b       	ld.w	r11,r12[0x0]
8000d2ae:	c2 48       	rjmp	8000d2f6 <_vfprintf_r+0x746>
8000d2b0:	ee ca ff ff 	sub	r10,r7,-1
8000d2b4:	10 37       	cp.w	r7,r8
8000d2b6:	c0 94       	brge	8000d2c8 <_vfprintf_r+0x718>
8000d2b8:	fa c9 f9 44 	sub	r9,sp,-1724
8000d2bc:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d2c0:	14 97       	mov	r7,r10
8000d2c2:	ec fb fd 88 	ld.w	r11,r6[-632]
8000d2c6:	c1 88       	rjmp	8000d2f6 <_vfprintf_r+0x746>
8000d2c8:	41 09       	lddsp	r9,sp[0x40]
8000d2ca:	59 f8       	cp.w	r8,31
8000d2cc:	e0 89 00 11 	brgt	8000d2ee <_vfprintf_r+0x73e>
8000d2d0:	f2 cb ff fc 	sub	r11,r9,-4
8000d2d4:	51 0b       	stdsp	sp[0x40],r11
8000d2d6:	fa c6 f9 44 	sub	r6,sp,-1724
8000d2da:	72 0b       	ld.w	r11,r9[0x0]
8000d2dc:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d2e0:	f3 4b fd 88 	st.w	r9[-632],r11
8000d2e4:	2f f8       	sub	r8,-1
8000d2e6:	14 97       	mov	r7,r10
8000d2e8:	fb 48 06 b4 	st.w	sp[1716],r8
8000d2ec:	c0 58       	rjmp	8000d2f6 <_vfprintf_r+0x746>
8000d2ee:	72 0b       	ld.w	r11,r9[0x0]
8000d2f0:	14 97       	mov	r7,r10
8000d2f2:	2f c9       	sub	r9,-4
8000d2f4:	51 09       	stdsp	sp[0x40],r9
8000d2f6:	50 1b       	stdsp	sp[0x4],r11
8000d2f8:	bf 5b       	asr	r11,0x1f
8000d2fa:	50 0b       	stdsp	sp[0x0],r11
8000d2fc:	fa ea 00 00 	ld.d	r10,sp[0]
8000d300:	58 0a       	cp.w	r10,0
8000d302:	5c 2b       	cpc	r11
8000d304:	c0 e4       	brge	8000d320 <_vfprintf_r+0x770>
8000d306:	30 08       	mov	r8,0
8000d308:	fa ea 00 00 	ld.d	r10,sp[0]
8000d30c:	30 09       	mov	r9,0
8000d30e:	f0 0a 01 0a 	sub	r10,r8,r10
8000d312:	f2 0b 01 4b 	sbc	r11,r9,r11
8000d316:	32 d8       	mov	r8,45
8000d318:	fa eb 00 00 	st.d	sp[0],r10
8000d31c:	fb 68 06 bb 	st.b	sp[1723],r8
8000d320:	30 18       	mov	r8,1
8000d322:	e0 8f 07 12 	bral	8000e146 <_vfprintf_r+0x1596>
8000d326:	50 a7       	stdsp	sp[0x28],r7
8000d328:	50 80       	stdsp	sp[0x20],r0
8000d32a:	0c 97       	mov	r7,r6
8000d32c:	04 94       	mov	r4,r2
8000d32e:	06 96       	mov	r6,r3
8000d330:	02 92       	mov	r2,r1
8000d332:	40 93       	lddsp	r3,sp[0x24]
8000d334:	10 90       	mov	r0,r8
8000d336:	40 41       	lddsp	r1,sp[0x10]
8000d338:	0e 99       	mov	r9,r7
8000d33a:	ed b5 00 03 	bld	r5,0x3
8000d33e:	c4 11       	brne	8000d3c0 <_vfprintf_r+0x810>
8000d340:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d344:	40 3a       	lddsp	r10,sp[0xc]
8000d346:	58 0a       	cp.w	r10,0
8000d348:	c1 90       	breq	8000d37a <_vfprintf_r+0x7ca>
8000d34a:	10 36       	cp.w	r6,r8
8000d34c:	c6 45       	brlt	8000d414 <_vfprintf_r+0x864>
8000d34e:	fa c8 f9 50 	sub	r8,sp,-1712
8000d352:	1a d8       	st.w	--sp,r8
8000d354:	fa c8 fa b8 	sub	r8,sp,-1352
8000d358:	1a d8       	st.w	--sp,r8
8000d35a:	fa c8 fb b4 	sub	r8,sp,-1100
8000d35e:	0c 9b       	mov	r11,r6
8000d360:	1a d8       	st.w	--sp,r8
8000d362:	04 9a       	mov	r10,r2
8000d364:	fa c8 f9 40 	sub	r8,sp,-1728
8000d368:	fa c9 ff b4 	sub	r9,sp,-76
8000d36c:	08 9c       	mov	r12,r4
8000d36e:	f0 1f 00 96 	mcall	8000d5c4 <_vfprintf_r+0xa14>
8000d372:	2f dd       	sub	sp,-12
8000d374:	78 16       	ld.w	r6,r12[0x4]
8000d376:	50 76       	stdsp	sp[0x1c],r6
8000d378:	c4 88       	rjmp	8000d408 <_vfprintf_r+0x858>
8000d37a:	2f f7       	sub	r7,-1
8000d37c:	10 39       	cp.w	r9,r8
8000d37e:	c0 c4       	brge	8000d396 <_vfprintf_r+0x7e6>
8000d380:	fa ce f9 44 	sub	lr,sp,-1724
8000d384:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000d388:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000d38c:	50 7c       	stdsp	sp[0x1c],r12
8000d38e:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000d392:	50 56       	stdsp	sp[0x14],r6
8000d394:	c6 68       	rjmp	8000d460 <_vfprintf_r+0x8b0>
8000d396:	41 09       	lddsp	r9,sp[0x40]
8000d398:	59 f8       	cp.w	r8,31
8000d39a:	e0 89 00 10 	brgt	8000d3ba <_vfprintf_r+0x80a>
8000d39e:	f2 ca ff f8 	sub	r10,r9,-8
8000d3a2:	72 1b       	ld.w	r11,r9[0x4]
8000d3a4:	51 0a       	stdsp	sp[0x40],r10
8000d3a6:	72 09       	ld.w	r9,r9[0x0]
8000d3a8:	fa ca f9 44 	sub	r10,sp,-1724
8000d3ac:	50 7b       	stdsp	sp[0x1c],r11
8000d3ae:	50 59       	stdsp	sp[0x14],r9
8000d3b0:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000d3b4:	40 5b       	lddsp	r11,sp[0x14]
8000d3b6:	40 7a       	lddsp	r10,sp[0x1c]
8000d3b8:	c4 78       	rjmp	8000d446 <_vfprintf_r+0x896>
8000d3ba:	72 18       	ld.w	r8,r9[0x4]
8000d3bc:	50 78       	stdsp	sp[0x1c],r8
8000d3be:	c4 c8       	rjmp	8000d456 <_vfprintf_r+0x8a6>
8000d3c0:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d3c4:	40 3e       	lddsp	lr,sp[0xc]
8000d3c6:	58 0e       	cp.w	lr,0
8000d3c8:	c2 30       	breq	8000d40e <_vfprintf_r+0x85e>
8000d3ca:	10 36       	cp.w	r6,r8
8000d3cc:	c0 94       	brge	8000d3de <_vfprintf_r+0x82e>
8000d3ce:	fa cc f9 44 	sub	r12,sp,-1724
8000d3d2:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000d3d6:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000d3da:	50 7b       	stdsp	sp[0x1c],r11
8000d3dc:	cd 9b       	rjmp	8000d38e <_vfprintf_r+0x7de>
8000d3de:	fa c8 f9 50 	sub	r8,sp,-1712
8000d3e2:	1a d8       	st.w	--sp,r8
8000d3e4:	fa c8 fa b8 	sub	r8,sp,-1352
8000d3e8:	04 9a       	mov	r10,r2
8000d3ea:	1a d8       	st.w	--sp,r8
8000d3ec:	fa c8 fb b4 	sub	r8,sp,-1100
8000d3f0:	0c 9b       	mov	r11,r6
8000d3f2:	1a d8       	st.w	--sp,r8
8000d3f4:	08 9c       	mov	r12,r4
8000d3f6:	fa c8 f9 40 	sub	r8,sp,-1728
8000d3fa:	fa c9 ff b4 	sub	r9,sp,-76
8000d3fe:	f0 1f 00 72 	mcall	8000d5c4 <_vfprintf_r+0xa14>
8000d402:	2f dd       	sub	sp,-12
8000d404:	78 1a       	ld.w	r10,r12[0x4]
8000d406:	50 7a       	stdsp	sp[0x1c],r10
8000d408:	78 0c       	ld.w	r12,r12[0x0]
8000d40a:	50 5c       	stdsp	sp[0x14],r12
8000d40c:	c2 a8       	rjmp	8000d460 <_vfprintf_r+0x8b0>
8000d40e:	2f f7       	sub	r7,-1
8000d410:	10 39       	cp.w	r9,r8
8000d412:	c0 94       	brge	8000d424 <_vfprintf_r+0x874>
8000d414:	fa c9 f9 44 	sub	r9,sp,-1724
8000d418:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d41c:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000d420:	50 78       	stdsp	sp[0x1c],r8
8000d422:	cb 6b       	rjmp	8000d38e <_vfprintf_r+0x7de>
8000d424:	41 09       	lddsp	r9,sp[0x40]
8000d426:	59 f8       	cp.w	r8,31
8000d428:	e0 89 00 15 	brgt	8000d452 <_vfprintf_r+0x8a2>
8000d42c:	f2 ca ff f8 	sub	r10,r9,-8
8000d430:	72 16       	ld.w	r6,r9[0x4]
8000d432:	72 09       	ld.w	r9,r9[0x0]
8000d434:	51 0a       	stdsp	sp[0x40],r10
8000d436:	50 59       	stdsp	sp[0x14],r9
8000d438:	fa ce f9 44 	sub	lr,sp,-1724
8000d43c:	50 76       	stdsp	sp[0x1c],r6
8000d43e:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000d442:	40 5b       	lddsp	r11,sp[0x14]
8000d444:	0c 9a       	mov	r10,r6
8000d446:	f2 eb fd 88 	st.d	r9[-632],r10
8000d44a:	2f f8       	sub	r8,-1
8000d44c:	fb 48 06 b4 	st.w	sp[1716],r8
8000d450:	c0 88       	rjmp	8000d460 <_vfprintf_r+0x8b0>
8000d452:	72 1c       	ld.w	r12,r9[0x4]
8000d454:	50 7c       	stdsp	sp[0x1c],r12
8000d456:	f2 c8 ff f8 	sub	r8,r9,-8
8000d45a:	51 08       	stdsp	sp[0x40],r8
8000d45c:	72 09       	ld.w	r9,r9[0x0]
8000d45e:	50 59       	stdsp	sp[0x14],r9
8000d460:	40 5b       	lddsp	r11,sp[0x14]
8000d462:	40 7a       	lddsp	r10,sp[0x1c]
8000d464:	f0 1f 00 59 	mcall	8000d5c8 <_vfprintf_r+0xa18>
8000d468:	18 96       	mov	r6,r12
8000d46a:	c1 50       	breq	8000d494 <_vfprintf_r+0x8e4>
8000d46c:	30 08       	mov	r8,0
8000d46e:	30 09       	mov	r9,0
8000d470:	40 5b       	lddsp	r11,sp[0x14]
8000d472:	40 7a       	lddsp	r10,sp[0x1c]
8000d474:	f0 1f 00 56 	mcall	8000d5cc <_vfprintf_r+0xa1c>
8000d478:	c0 40       	breq	8000d480 <_vfprintf_r+0x8d0>
8000d47a:	32 d8       	mov	r8,45
8000d47c:	fb 68 06 bb 	st.b	sp[1723],r8
8000d480:	4d 48       	lddpc	r8,8000d5d0 <_vfprintf_r+0xa20>
8000d482:	4d 56       	lddpc	r6,8000d5d4 <_vfprintf_r+0xa24>
8000d484:	a7 d5       	cbr	r5,0x7
8000d486:	e0 40 00 47 	cp.w	r0,71
8000d48a:	f0 06 17 a0 	movle	r6,r8
8000d48e:	30 32       	mov	r2,3
8000d490:	e0 8f 06 e8 	bral	8000e260 <_vfprintf_r+0x16b0>
8000d494:	40 5b       	lddsp	r11,sp[0x14]
8000d496:	40 7a       	lddsp	r10,sp[0x1c]
8000d498:	f0 1f 00 50 	mcall	8000d5d8 <_vfprintf_r+0xa28>
8000d49c:	c0 c0       	breq	8000d4b4 <_vfprintf_r+0x904>
8000d49e:	50 26       	stdsp	sp[0x8],r6
8000d4a0:	4c f8       	lddpc	r8,8000d5dc <_vfprintf_r+0xa2c>
8000d4a2:	4d 06       	lddpc	r6,8000d5e0 <_vfprintf_r+0xa30>
8000d4a4:	a7 d5       	cbr	r5,0x7
8000d4a6:	e0 40 00 47 	cp.w	r0,71
8000d4aa:	f0 06 17 a0 	movle	r6,r8
8000d4ae:	30 32       	mov	r2,3
8000d4b0:	e0 8f 06 de 	bral	8000e26c <_vfprintf_r+0x16bc>
8000d4b4:	40 2a       	lddsp	r10,sp[0x8]
8000d4b6:	5b fa       	cp.w	r10,-1
8000d4b8:	c0 41       	brne	8000d4c0 <_vfprintf_r+0x910>
8000d4ba:	30 69       	mov	r9,6
8000d4bc:	50 29       	stdsp	sp[0x8],r9
8000d4be:	c1 18       	rjmp	8000d4e0 <_vfprintf_r+0x930>
8000d4c0:	e0 40 00 47 	cp.w	r0,71
8000d4c4:	5f 09       	sreq	r9
8000d4c6:	e0 40 00 67 	cp.w	r0,103
8000d4ca:	5f 08       	sreq	r8
8000d4cc:	f3 e8 10 08 	or	r8,r9,r8
8000d4d0:	f8 08 18 00 	cp.b	r8,r12
8000d4d4:	c0 60       	breq	8000d4e0 <_vfprintf_r+0x930>
8000d4d6:	40 28       	lddsp	r8,sp[0x8]
8000d4d8:	58 08       	cp.w	r8,0
8000d4da:	f9 b8 00 01 	moveq	r8,1
8000d4de:	50 28       	stdsp	sp[0x8],r8
8000d4e0:	40 78       	lddsp	r8,sp[0x1c]
8000d4e2:	40 59       	lddsp	r9,sp[0x14]
8000d4e4:	fa e9 06 94 	st.d	sp[1684],r8
8000d4e8:	a9 a5       	sbr	r5,0x8
8000d4ea:	fa f8 06 94 	ld.w	r8,sp[1684]
8000d4ee:	58 08       	cp.w	r8,0
8000d4f0:	c0 65       	brlt	8000d4fc <_vfprintf_r+0x94c>
8000d4f2:	40 5e       	lddsp	lr,sp[0x14]
8000d4f4:	30 0c       	mov	r12,0
8000d4f6:	50 6e       	stdsp	sp[0x18],lr
8000d4f8:	50 9c       	stdsp	sp[0x24],r12
8000d4fa:	c0 78       	rjmp	8000d508 <_vfprintf_r+0x958>
8000d4fc:	40 5b       	lddsp	r11,sp[0x14]
8000d4fe:	32 da       	mov	r10,45
8000d500:	ee 1b 80 00 	eorh	r11,0x8000
8000d504:	50 9a       	stdsp	sp[0x24],r10
8000d506:	50 6b       	stdsp	sp[0x18],r11
8000d508:	e0 40 00 46 	cp.w	r0,70
8000d50c:	5f 09       	sreq	r9
8000d50e:	e0 40 00 66 	cp.w	r0,102
8000d512:	5f 08       	sreq	r8
8000d514:	f3 e8 10 08 	or	r8,r9,r8
8000d518:	50 48       	stdsp	sp[0x10],r8
8000d51a:	c0 40       	breq	8000d522 <_vfprintf_r+0x972>
8000d51c:	40 22       	lddsp	r2,sp[0x8]
8000d51e:	30 39       	mov	r9,3
8000d520:	c1 08       	rjmp	8000d540 <_vfprintf_r+0x990>
8000d522:	e0 40 00 45 	cp.w	r0,69
8000d526:	5f 09       	sreq	r9
8000d528:	e0 40 00 65 	cp.w	r0,101
8000d52c:	5f 08       	sreq	r8
8000d52e:	40 22       	lddsp	r2,sp[0x8]
8000d530:	10 49       	or	r9,r8
8000d532:	2f f2       	sub	r2,-1
8000d534:	40 46       	lddsp	r6,sp[0x10]
8000d536:	ec 09 18 00 	cp.b	r9,r6
8000d53a:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000d53e:	30 29       	mov	r9,2
8000d540:	fa c8 f9 5c 	sub	r8,sp,-1700
8000d544:	1a d8       	st.w	--sp,r8
8000d546:	fa c8 f9 54 	sub	r8,sp,-1708
8000d54a:	1a d8       	st.w	--sp,r8
8000d54c:	fa c8 f9 4c 	sub	r8,sp,-1716
8000d550:	08 9c       	mov	r12,r4
8000d552:	1a d8       	st.w	--sp,r8
8000d554:	04 98       	mov	r8,r2
8000d556:	40 9b       	lddsp	r11,sp[0x24]
8000d558:	40 aa       	lddsp	r10,sp[0x28]
8000d55a:	f0 1f 00 23 	mcall	8000d5e4 <_vfprintf_r+0xa34>
8000d55e:	e0 40 00 47 	cp.w	r0,71
8000d562:	5f 19       	srne	r9
8000d564:	e0 40 00 67 	cp.w	r0,103
8000d568:	5f 18       	srne	r8
8000d56a:	18 96       	mov	r6,r12
8000d56c:	2f dd       	sub	sp,-12
8000d56e:	f3 e8 00 08 	and	r8,r9,r8
8000d572:	c0 41       	brne	8000d57a <_vfprintf_r+0x9ca>
8000d574:	ed b5 00 00 	bld	r5,0x0
8000d578:	c4 41       	brne	8000d600 <_vfprintf_r+0xa50>
8000d57a:	ec 02 00 0e 	add	lr,r6,r2
8000d57e:	50 3e       	stdsp	sp[0xc],lr
8000d580:	40 4c       	lddsp	r12,sp[0x10]
8000d582:	58 0c       	cp.w	r12,0
8000d584:	c1 50       	breq	8000d5ae <_vfprintf_r+0x9fe>
8000d586:	0d 89       	ld.ub	r9,r6[0x0]
8000d588:	33 08       	mov	r8,48
8000d58a:	f0 09 18 00 	cp.b	r9,r8
8000d58e:	c0 b1       	brne	8000d5a4 <_vfprintf_r+0x9f4>
8000d590:	30 08       	mov	r8,0
8000d592:	30 09       	mov	r9,0
8000d594:	40 6b       	lddsp	r11,sp[0x18]
8000d596:	40 7a       	lddsp	r10,sp[0x1c]
8000d598:	f0 1f 00 14 	mcall	8000d5e8 <_vfprintf_r+0xa38>
8000d59c:	fb b2 00 01 	rsubeq	r2,1
8000d5a0:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8000d5a4:	40 3b       	lddsp	r11,sp[0xc]
8000d5a6:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000d5aa:	10 0b       	add	r11,r8
8000d5ac:	50 3b       	stdsp	sp[0xc],r11
8000d5ae:	40 6b       	lddsp	r11,sp[0x18]
8000d5b0:	30 08       	mov	r8,0
8000d5b2:	30 09       	mov	r9,0
8000d5b4:	40 7a       	lddsp	r10,sp[0x1c]
8000d5b6:	f0 1f 00 0d 	mcall	8000d5e8 <_vfprintf_r+0xa38>
8000d5ba:	c1 d0       	breq	8000d5f4 <_vfprintf_r+0xa44>
8000d5bc:	40 3a       	lddsp	r10,sp[0xc]
8000d5be:	fb 4a 06 a4 	st.w	sp[1700],r10
8000d5c2:	c1 98       	rjmp	8000d5f4 <_vfprintf_r+0xa44>
8000d5c4:	80 00       	ld.sh	r0,r0[0x0]
8000d5c6:	c8 6c       	rcall	8000d6d2 <_vfprintf_r+0xb22>
8000d5c8:	80 01       	ld.sh	r1,r0[0x0]
8000d5ca:	10 8c       	andn	r12,r8
8000d5cc:	80 01       	ld.sh	r1,r0[0x0]
8000d5ce:	15 94       	ld.ub	r4,r10[0x1]
8000d5d0:	80 01       	ld.sh	r1,r0[0x0]
8000d5d2:	23 e0       	sub	r0,62
8000d5d4:	80 01       	ld.sh	r1,r0[0x0]
8000d5d6:	23 e4       	sub	r4,62
8000d5d8:	80 01       	ld.sh	r1,r0[0x0]
8000d5da:	10 b6       	st.h	r8++,r6
8000d5dc:	80 01       	ld.sh	r1,r0[0x0]
8000d5de:	23 e8       	sub	r8,62
8000d5e0:	80 01       	ld.sh	r1,r0[0x0]
8000d5e2:	23 ec       	sub	r12,62
8000d5e4:	80 00       	ld.sh	r0,r0[0x0]
8000d5e6:	ed 58 80 01 	st.h	r6[-32767],r8
8000d5ea:	15 06       	ld.w	r6,r10++
8000d5ec:	10 c9       	st.b	r8++,r9
8000d5ee:	fb 48 06 a4 	st.w	sp[1700],r8
8000d5f2:	c0 28       	rjmp	8000d5f6 <_vfprintf_r+0xa46>
8000d5f4:	33 09       	mov	r9,48
8000d5f6:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000d5fa:	40 3e       	lddsp	lr,sp[0xc]
8000d5fc:	1c 38       	cp.w	r8,lr
8000d5fe:	cf 73       	brcs	8000d5ec <_vfprintf_r+0xa3c>
8000d600:	e0 40 00 47 	cp.w	r0,71
8000d604:	5f 09       	sreq	r9
8000d606:	e0 40 00 67 	cp.w	r0,103
8000d60a:	5f 08       	sreq	r8
8000d60c:	f3 e8 10 08 	or	r8,r9,r8
8000d610:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000d614:	0c 19       	sub	r9,r6
8000d616:	50 69       	stdsp	sp[0x18],r9
8000d618:	58 08       	cp.w	r8,0
8000d61a:	c0 b0       	breq	8000d630 <_vfprintf_r+0xa80>
8000d61c:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000d620:	5b d8       	cp.w	r8,-3
8000d622:	c0 55       	brlt	8000d62c <_vfprintf_r+0xa7c>
8000d624:	40 2c       	lddsp	r12,sp[0x8]
8000d626:	18 38       	cp.w	r8,r12
8000d628:	e0 8a 00 6a 	brle	8000d6fc <_vfprintf_r+0xb4c>
8000d62c:	20 20       	sub	r0,2
8000d62e:	c0 58       	rjmp	8000d638 <_vfprintf_r+0xa88>
8000d630:	e0 40 00 65 	cp.w	r0,101
8000d634:	e0 89 00 46 	brgt	8000d6c0 <_vfprintf_r+0xb10>
8000d638:	fa fb 06 ac 	ld.w	r11,sp[1708]
8000d63c:	fb 60 06 9c 	st.b	sp[1692],r0
8000d640:	20 1b       	sub	r11,1
8000d642:	fb 4b 06 ac 	st.w	sp[1708],r11
8000d646:	c0 47       	brpl	8000d64e <_vfprintf_r+0xa9e>
8000d648:	5c 3b       	neg	r11
8000d64a:	32 d8       	mov	r8,45
8000d64c:	c0 28       	rjmp	8000d650 <_vfprintf_r+0xaa0>
8000d64e:	32 b8       	mov	r8,43
8000d650:	fb 68 06 9d 	st.b	sp[1693],r8
8000d654:	58 9b       	cp.w	r11,9
8000d656:	e0 8a 00 1d 	brle	8000d690 <_vfprintf_r+0xae0>
8000d65a:	fa c9 fa 35 	sub	r9,sp,-1483
8000d65e:	30 aa       	mov	r10,10
8000d660:	12 98       	mov	r8,r9
8000d662:	0e 9c       	mov	r12,r7
8000d664:	0c 92       	mov	r2,r6
8000d666:	f6 0a 0c 06 	divs	r6,r11,r10
8000d66a:	0e 9b       	mov	r11,r7
8000d66c:	2d 0b       	sub	r11,-48
8000d66e:	10 fb       	st.b	--r8,r11
8000d670:	0c 9b       	mov	r11,r6
8000d672:	58 96       	cp.w	r6,9
8000d674:	fe 99 ff f9 	brgt	8000d666 <_vfprintf_r+0xab6>
8000d678:	2d 0b       	sub	r11,-48
8000d67a:	18 97       	mov	r7,r12
8000d67c:	04 96       	mov	r6,r2
8000d67e:	10 fb       	st.b	--r8,r11
8000d680:	fa ca f9 62 	sub	r10,sp,-1694
8000d684:	c0 38       	rjmp	8000d68a <_vfprintf_r+0xada>
8000d686:	11 3b       	ld.ub	r11,r8++
8000d688:	14 cb       	st.b	r10++,r11
8000d68a:	12 38       	cp.w	r8,r9
8000d68c:	cf d3       	brcs	8000d686 <_vfprintf_r+0xad6>
8000d68e:	c0 98       	rjmp	8000d6a0 <_vfprintf_r+0xaf0>
8000d690:	2d 0b       	sub	r11,-48
8000d692:	33 08       	mov	r8,48
8000d694:	fb 6b 06 9f 	st.b	sp[1695],r11
8000d698:	fb 68 06 9e 	st.b	sp[1694],r8
8000d69c:	fa ca f9 60 	sub	r10,sp,-1696
8000d6a0:	fa c8 f9 64 	sub	r8,sp,-1692
8000d6a4:	f4 08 01 08 	sub	r8,r10,r8
8000d6a8:	50 e8       	stdsp	sp[0x38],r8
8000d6aa:	10 92       	mov	r2,r8
8000d6ac:	40 6b       	lddsp	r11,sp[0x18]
8000d6ae:	16 02       	add	r2,r11
8000d6b0:	58 1b       	cp.w	r11,1
8000d6b2:	e0 89 00 05 	brgt	8000d6bc <_vfprintf_r+0xb0c>
8000d6b6:	ed b5 00 00 	bld	r5,0x0
8000d6ba:	c3 51       	brne	8000d724 <_vfprintf_r+0xb74>
8000d6bc:	2f f2       	sub	r2,-1
8000d6be:	c3 38       	rjmp	8000d724 <_vfprintf_r+0xb74>
8000d6c0:	e0 40 00 66 	cp.w	r0,102
8000d6c4:	c1 c1       	brne	8000d6fc <_vfprintf_r+0xb4c>
8000d6c6:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000d6ca:	58 02       	cp.w	r2,0
8000d6cc:	e0 8a 00 0c 	brle	8000d6e4 <_vfprintf_r+0xb34>
8000d6d0:	40 2a       	lddsp	r10,sp[0x8]
8000d6d2:	58 0a       	cp.w	r10,0
8000d6d4:	c0 41       	brne	8000d6dc <_vfprintf_r+0xb2c>
8000d6d6:	ed b5 00 00 	bld	r5,0x0
8000d6da:	c2 51       	brne	8000d724 <_vfprintf_r+0xb74>
8000d6dc:	2f f2       	sub	r2,-1
8000d6de:	40 29       	lddsp	r9,sp[0x8]
8000d6e0:	12 02       	add	r2,r9
8000d6e2:	c0 b8       	rjmp	8000d6f8 <_vfprintf_r+0xb48>
8000d6e4:	40 28       	lddsp	r8,sp[0x8]
8000d6e6:	58 08       	cp.w	r8,0
8000d6e8:	c0 61       	brne	8000d6f4 <_vfprintf_r+0xb44>
8000d6ea:	ed b5 00 00 	bld	r5,0x0
8000d6ee:	c0 30       	breq	8000d6f4 <_vfprintf_r+0xb44>
8000d6f0:	30 12       	mov	r2,1
8000d6f2:	c1 98       	rjmp	8000d724 <_vfprintf_r+0xb74>
8000d6f4:	40 22       	lddsp	r2,sp[0x8]
8000d6f6:	2f e2       	sub	r2,-2
8000d6f8:	36 60       	mov	r0,102
8000d6fa:	c1 58       	rjmp	8000d724 <_vfprintf_r+0xb74>
8000d6fc:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000d700:	40 6e       	lddsp	lr,sp[0x18]
8000d702:	1c 32       	cp.w	r2,lr
8000d704:	c0 65       	brlt	8000d710 <_vfprintf_r+0xb60>
8000d706:	ed b5 00 00 	bld	r5,0x0
8000d70a:	f7 b2 00 ff 	subeq	r2,-1
8000d70e:	c0 a8       	rjmp	8000d722 <_vfprintf_r+0xb72>
8000d710:	e4 08 11 02 	rsub	r8,r2,2
8000d714:	40 6c       	lddsp	r12,sp[0x18]
8000d716:	58 02       	cp.w	r2,0
8000d718:	f0 02 17 a0 	movle	r2,r8
8000d71c:	f9 b2 09 01 	movgt	r2,1
8000d720:	18 02       	add	r2,r12
8000d722:	36 70       	mov	r0,103
8000d724:	40 9b       	lddsp	r11,sp[0x24]
8000d726:	58 0b       	cp.w	r11,0
8000d728:	e0 80 05 9c 	breq	8000e260 <_vfprintf_r+0x16b0>
8000d72c:	32 d8       	mov	r8,45
8000d72e:	fb 68 06 bb 	st.b	sp[1723],r8
8000d732:	e0 8f 05 9b 	bral	8000e268 <_vfprintf_r+0x16b8>
8000d736:	50 a7       	stdsp	sp[0x28],r7
8000d738:	04 94       	mov	r4,r2
8000d73a:	0c 97       	mov	r7,r6
8000d73c:	02 92       	mov	r2,r1
8000d73e:	06 96       	mov	r6,r3
8000d740:	40 41       	lddsp	r1,sp[0x10]
8000d742:	40 93       	lddsp	r3,sp[0x24]
8000d744:	0e 99       	mov	r9,r7
8000d746:	ed b5 00 05 	bld	r5,0x5
8000d74a:	c4 81       	brne	8000d7da <_vfprintf_r+0xc2a>
8000d74c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d750:	40 3e       	lddsp	lr,sp[0xc]
8000d752:	58 0e       	cp.w	lr,0
8000d754:	c1 d0       	breq	8000d78e <_vfprintf_r+0xbde>
8000d756:	10 36       	cp.w	r6,r8
8000d758:	c0 64       	brge	8000d764 <_vfprintf_r+0xbb4>
8000d75a:	fa cc f9 44 	sub	r12,sp,-1724
8000d75e:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000d762:	c1 d8       	rjmp	8000d79c <_vfprintf_r+0xbec>
8000d764:	fa c8 f9 50 	sub	r8,sp,-1712
8000d768:	1a d8       	st.w	--sp,r8
8000d76a:	fa c8 fa b8 	sub	r8,sp,-1352
8000d76e:	04 9a       	mov	r10,r2
8000d770:	1a d8       	st.w	--sp,r8
8000d772:	fa c8 fb b4 	sub	r8,sp,-1100
8000d776:	0c 9b       	mov	r11,r6
8000d778:	1a d8       	st.w	--sp,r8
8000d77a:	08 9c       	mov	r12,r4
8000d77c:	fa c8 f9 40 	sub	r8,sp,-1728
8000d780:	fa c9 ff b4 	sub	r9,sp,-76
8000d784:	f0 1f 01 5f 	mcall	8000dd00 <_vfprintf_r+0x1150>
8000d788:	2f dd       	sub	sp,-12
8000d78a:	78 0a       	ld.w	r10,r12[0x0]
8000d78c:	c2 08       	rjmp	8000d7cc <_vfprintf_r+0xc1c>
8000d78e:	2f f7       	sub	r7,-1
8000d790:	10 39       	cp.w	r9,r8
8000d792:	c0 84       	brge	8000d7a2 <_vfprintf_r+0xbf2>
8000d794:	fa cb f9 44 	sub	r11,sp,-1724
8000d798:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d79c:	ec fa fd 88 	ld.w	r10,r6[-632]
8000d7a0:	c1 68       	rjmp	8000d7cc <_vfprintf_r+0xc1c>
8000d7a2:	41 09       	lddsp	r9,sp[0x40]
8000d7a4:	59 f8       	cp.w	r8,31
8000d7a6:	e0 89 00 10 	brgt	8000d7c6 <_vfprintf_r+0xc16>
8000d7aa:	f2 ca ff fc 	sub	r10,r9,-4
8000d7ae:	51 0a       	stdsp	sp[0x40],r10
8000d7b0:	fa c6 f9 44 	sub	r6,sp,-1724
8000d7b4:	72 0a       	ld.w	r10,r9[0x0]
8000d7b6:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d7ba:	f3 4a fd 88 	st.w	r9[-632],r10
8000d7be:	2f f8       	sub	r8,-1
8000d7c0:	fb 48 06 b4 	st.w	sp[1716],r8
8000d7c4:	c0 48       	rjmp	8000d7cc <_vfprintf_r+0xc1c>
8000d7c6:	72 0a       	ld.w	r10,r9[0x0]
8000d7c8:	2f c9       	sub	r9,-4
8000d7ca:	51 09       	stdsp	sp[0x40],r9
8000d7cc:	40 be       	lddsp	lr,sp[0x2c]
8000d7ce:	1c 98       	mov	r8,lr
8000d7d0:	95 1e       	st.w	r10[0x4],lr
8000d7d2:	bf 58       	asr	r8,0x1f
8000d7d4:	95 08       	st.w	r10[0x0],r8
8000d7d6:	fe 9f fa 79 	bral	8000ccc8 <_vfprintf_r+0x118>
8000d7da:	ed b5 00 04 	bld	r5,0x4
8000d7de:	c4 80       	breq	8000d86e <_vfprintf_r+0xcbe>
8000d7e0:	e2 15 00 40 	andl	r5,0x40,COH
8000d7e4:	c4 50       	breq	8000d86e <_vfprintf_r+0xcbe>
8000d7e6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d7ea:	40 3c       	lddsp	r12,sp[0xc]
8000d7ec:	58 0c       	cp.w	r12,0
8000d7ee:	c1 d0       	breq	8000d828 <_vfprintf_r+0xc78>
8000d7f0:	10 36       	cp.w	r6,r8
8000d7f2:	c0 64       	brge	8000d7fe <_vfprintf_r+0xc4e>
8000d7f4:	fa cb f9 44 	sub	r11,sp,-1724
8000d7f8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d7fc:	c1 d8       	rjmp	8000d836 <_vfprintf_r+0xc86>
8000d7fe:	fa c8 f9 50 	sub	r8,sp,-1712
8000d802:	1a d8       	st.w	--sp,r8
8000d804:	fa c8 fa b8 	sub	r8,sp,-1352
8000d808:	04 9a       	mov	r10,r2
8000d80a:	1a d8       	st.w	--sp,r8
8000d80c:	fa c8 fb b4 	sub	r8,sp,-1100
8000d810:	0c 9b       	mov	r11,r6
8000d812:	1a d8       	st.w	--sp,r8
8000d814:	08 9c       	mov	r12,r4
8000d816:	fa c8 f9 40 	sub	r8,sp,-1728
8000d81a:	fa c9 ff b4 	sub	r9,sp,-76
8000d81e:	f0 1f 01 39 	mcall	8000dd00 <_vfprintf_r+0x1150>
8000d822:	2f dd       	sub	sp,-12
8000d824:	78 0a       	ld.w	r10,r12[0x0]
8000d826:	c2 08       	rjmp	8000d866 <_vfprintf_r+0xcb6>
8000d828:	2f f7       	sub	r7,-1
8000d82a:	10 39       	cp.w	r9,r8
8000d82c:	c0 84       	brge	8000d83c <_vfprintf_r+0xc8c>
8000d82e:	fa ca f9 44 	sub	r10,sp,-1724
8000d832:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000d836:	ec fa fd 88 	ld.w	r10,r6[-632]
8000d83a:	c1 68       	rjmp	8000d866 <_vfprintf_r+0xcb6>
8000d83c:	41 09       	lddsp	r9,sp[0x40]
8000d83e:	59 f8       	cp.w	r8,31
8000d840:	e0 89 00 10 	brgt	8000d860 <_vfprintf_r+0xcb0>
8000d844:	f2 ca ff fc 	sub	r10,r9,-4
8000d848:	51 0a       	stdsp	sp[0x40],r10
8000d84a:	fa c6 f9 44 	sub	r6,sp,-1724
8000d84e:	72 0a       	ld.w	r10,r9[0x0]
8000d850:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d854:	f3 4a fd 88 	st.w	r9[-632],r10
8000d858:	2f f8       	sub	r8,-1
8000d85a:	fb 48 06 b4 	st.w	sp[1716],r8
8000d85e:	c0 48       	rjmp	8000d866 <_vfprintf_r+0xcb6>
8000d860:	72 0a       	ld.w	r10,r9[0x0]
8000d862:	2f c9       	sub	r9,-4
8000d864:	51 09       	stdsp	sp[0x40],r9
8000d866:	40 be       	lddsp	lr,sp[0x2c]
8000d868:	b4 0e       	st.h	r10[0x0],lr
8000d86a:	fe 9f fa 2f 	bral	8000ccc8 <_vfprintf_r+0x118>
8000d86e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d872:	40 3c       	lddsp	r12,sp[0xc]
8000d874:	58 0c       	cp.w	r12,0
8000d876:	c1 d0       	breq	8000d8b0 <_vfprintf_r+0xd00>
8000d878:	10 36       	cp.w	r6,r8
8000d87a:	c0 64       	brge	8000d886 <_vfprintf_r+0xcd6>
8000d87c:	fa cb f9 44 	sub	r11,sp,-1724
8000d880:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d884:	c1 d8       	rjmp	8000d8be <_vfprintf_r+0xd0e>
8000d886:	fa c8 f9 50 	sub	r8,sp,-1712
8000d88a:	1a d8       	st.w	--sp,r8
8000d88c:	fa c8 fa b8 	sub	r8,sp,-1352
8000d890:	04 9a       	mov	r10,r2
8000d892:	1a d8       	st.w	--sp,r8
8000d894:	fa c8 fb b4 	sub	r8,sp,-1100
8000d898:	0c 9b       	mov	r11,r6
8000d89a:	1a d8       	st.w	--sp,r8
8000d89c:	08 9c       	mov	r12,r4
8000d89e:	fa c8 f9 40 	sub	r8,sp,-1728
8000d8a2:	fa c9 ff b4 	sub	r9,sp,-76
8000d8a6:	f0 1f 01 17 	mcall	8000dd00 <_vfprintf_r+0x1150>
8000d8aa:	2f dd       	sub	sp,-12
8000d8ac:	78 0a       	ld.w	r10,r12[0x0]
8000d8ae:	c2 08       	rjmp	8000d8ee <_vfprintf_r+0xd3e>
8000d8b0:	2f f7       	sub	r7,-1
8000d8b2:	10 39       	cp.w	r9,r8
8000d8b4:	c0 84       	brge	8000d8c4 <_vfprintf_r+0xd14>
8000d8b6:	fa ca f9 44 	sub	r10,sp,-1724
8000d8ba:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000d8be:	ec fa fd 88 	ld.w	r10,r6[-632]
8000d8c2:	c1 68       	rjmp	8000d8ee <_vfprintf_r+0xd3e>
8000d8c4:	41 09       	lddsp	r9,sp[0x40]
8000d8c6:	59 f8       	cp.w	r8,31
8000d8c8:	e0 89 00 10 	brgt	8000d8e8 <_vfprintf_r+0xd38>
8000d8cc:	f2 ca ff fc 	sub	r10,r9,-4
8000d8d0:	51 0a       	stdsp	sp[0x40],r10
8000d8d2:	fa c6 f9 44 	sub	r6,sp,-1724
8000d8d6:	72 0a       	ld.w	r10,r9[0x0]
8000d8d8:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d8dc:	f3 4a fd 88 	st.w	r9[-632],r10
8000d8e0:	2f f8       	sub	r8,-1
8000d8e2:	fb 48 06 b4 	st.w	sp[1716],r8
8000d8e6:	c0 48       	rjmp	8000d8ee <_vfprintf_r+0xd3e>
8000d8e8:	72 0a       	ld.w	r10,r9[0x0]
8000d8ea:	2f c9       	sub	r9,-4
8000d8ec:	51 09       	stdsp	sp[0x40],r9
8000d8ee:	40 be       	lddsp	lr,sp[0x2c]
8000d8f0:	95 0e       	st.w	r10[0x0],lr
8000d8f2:	fe 9f f9 eb 	bral	8000ccc8 <_vfprintf_r+0x118>
8000d8f6:	50 a7       	stdsp	sp[0x28],r7
8000d8f8:	50 80       	stdsp	sp[0x20],r0
8000d8fa:	0c 97       	mov	r7,r6
8000d8fc:	04 94       	mov	r4,r2
8000d8fe:	06 96       	mov	r6,r3
8000d900:	02 92       	mov	r2,r1
8000d902:	40 93       	lddsp	r3,sp[0x24]
8000d904:	10 90       	mov	r0,r8
8000d906:	40 41       	lddsp	r1,sp[0x10]
8000d908:	a5 a5       	sbr	r5,0x4
8000d90a:	c0 a8       	rjmp	8000d91e <_vfprintf_r+0xd6e>
8000d90c:	50 a7       	stdsp	sp[0x28],r7
8000d90e:	50 80       	stdsp	sp[0x20],r0
8000d910:	0c 97       	mov	r7,r6
8000d912:	04 94       	mov	r4,r2
8000d914:	06 96       	mov	r6,r3
8000d916:	02 92       	mov	r2,r1
8000d918:	40 93       	lddsp	r3,sp[0x24]
8000d91a:	10 90       	mov	r0,r8
8000d91c:	40 41       	lddsp	r1,sp[0x10]
8000d91e:	ed b5 00 05 	bld	r5,0x5
8000d922:	c5 d1       	brne	8000d9dc <_vfprintf_r+0xe2c>
8000d924:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d928:	40 3c       	lddsp	r12,sp[0xc]
8000d92a:	58 0c       	cp.w	r12,0
8000d92c:	c2 60       	breq	8000d978 <_vfprintf_r+0xdc8>
8000d92e:	10 36       	cp.w	r6,r8
8000d930:	c0 a4       	brge	8000d944 <_vfprintf_r+0xd94>
8000d932:	fa cb f9 44 	sub	r11,sp,-1724
8000d936:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000d93a:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000d93e:	fa e9 00 00 	st.d	sp[0],r8
8000d942:	c1 88       	rjmp	8000d972 <_vfprintf_r+0xdc2>
8000d944:	fa c8 f9 50 	sub	r8,sp,-1712
8000d948:	1a d8       	st.w	--sp,r8
8000d94a:	fa c8 fa b8 	sub	r8,sp,-1352
8000d94e:	04 9a       	mov	r10,r2
8000d950:	1a d8       	st.w	--sp,r8
8000d952:	0c 9b       	mov	r11,r6
8000d954:	fa c8 fb b4 	sub	r8,sp,-1100
8000d958:	08 9c       	mov	r12,r4
8000d95a:	1a d8       	st.w	--sp,r8
8000d95c:	fa c8 f9 40 	sub	r8,sp,-1728
8000d960:	fa c9 ff b4 	sub	r9,sp,-76
8000d964:	f0 1f 00 e7 	mcall	8000dd00 <_vfprintf_r+0x1150>
8000d968:	2f dd       	sub	sp,-12
8000d96a:	f8 ea 00 00 	ld.d	r10,r12[0]
8000d96e:	fa eb 00 00 	st.d	sp[0],r10
8000d972:	30 08       	mov	r8,0
8000d974:	e0 8f 03 e6 	bral	8000e140 <_vfprintf_r+0x1590>
8000d978:	ee ca ff ff 	sub	r10,r7,-1
8000d97c:	10 37       	cp.w	r7,r8
8000d97e:	c0 b4       	brge	8000d994 <_vfprintf_r+0xde4>
8000d980:	fa c9 f9 44 	sub	r9,sp,-1724
8000d984:	14 97       	mov	r7,r10
8000d986:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000d98a:	ec ea fd 88 	ld.d	r10,r6[-632]
8000d98e:	fa eb 00 00 	st.d	sp[0],r10
8000d992:	c1 88       	rjmp	8000d9c2 <_vfprintf_r+0xe12>
8000d994:	41 09       	lddsp	r9,sp[0x40]
8000d996:	59 f8       	cp.w	r8,31
8000d998:	e0 89 00 18 	brgt	8000d9c8 <_vfprintf_r+0xe18>
8000d99c:	f2 e6 00 00 	ld.d	r6,r9[0]
8000d9a0:	f2 cb ff f8 	sub	r11,r9,-8
8000d9a4:	fa e7 00 00 	st.d	sp[0],r6
8000d9a8:	51 0b       	stdsp	sp[0x40],r11
8000d9aa:	fa c6 f9 44 	sub	r6,sp,-1724
8000d9ae:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000d9b2:	fa e6 00 00 	ld.d	r6,sp[0]
8000d9b6:	f2 e7 fd 88 	st.d	r9[-632],r6
8000d9ba:	2f f8       	sub	r8,-1
8000d9bc:	14 97       	mov	r7,r10
8000d9be:	fb 48 06 b4 	st.w	sp[1716],r8
8000d9c2:	40 38       	lddsp	r8,sp[0xc]
8000d9c4:	e0 8f 03 be 	bral	8000e140 <_vfprintf_r+0x1590>
8000d9c8:	f2 e6 00 00 	ld.d	r6,r9[0]
8000d9cc:	40 38       	lddsp	r8,sp[0xc]
8000d9ce:	fa e7 00 00 	st.d	sp[0],r6
8000d9d2:	2f 89       	sub	r9,-8
8000d9d4:	14 97       	mov	r7,r10
8000d9d6:	51 09       	stdsp	sp[0x40],r9
8000d9d8:	e0 8f 03 b4 	bral	8000e140 <_vfprintf_r+0x1590>
8000d9dc:	ed b5 00 04 	bld	r5,0x4
8000d9e0:	c1 61       	brne	8000da0c <_vfprintf_r+0xe5c>
8000d9e2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000d9e6:	40 3e       	lddsp	lr,sp[0xc]
8000d9e8:	58 0e       	cp.w	lr,0
8000d9ea:	c0 80       	breq	8000d9fa <_vfprintf_r+0xe4a>
8000d9ec:	10 36       	cp.w	r6,r8
8000d9ee:	c6 74       	brge	8000dabc <_vfprintf_r+0xf0c>
8000d9f0:	fa cc f9 44 	sub	r12,sp,-1724
8000d9f4:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000d9f8:	c8 08       	rjmp	8000daf8 <_vfprintf_r+0xf48>
8000d9fa:	ee ca ff ff 	sub	r10,r7,-1
8000d9fe:	10 37       	cp.w	r7,r8
8000da00:	c7 f4       	brge	8000dafe <_vfprintf_r+0xf4e>
8000da02:	fa cb f9 44 	sub	r11,sp,-1724
8000da06:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000da0a:	c7 68       	rjmp	8000daf6 <_vfprintf_r+0xf46>
8000da0c:	ed b5 00 06 	bld	r5,0x6
8000da10:	c4 a1       	brne	8000daa4 <_vfprintf_r+0xef4>
8000da12:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000da16:	40 3c       	lddsp	r12,sp[0xc]
8000da18:	58 0c       	cp.w	r12,0
8000da1a:	c1 d0       	breq	8000da54 <_vfprintf_r+0xea4>
8000da1c:	10 36       	cp.w	r6,r8
8000da1e:	c0 64       	brge	8000da2a <_vfprintf_r+0xe7a>
8000da20:	fa cb f9 44 	sub	r11,sp,-1724
8000da24:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000da28:	c1 f8       	rjmp	8000da66 <_vfprintf_r+0xeb6>
8000da2a:	fa c8 f9 50 	sub	r8,sp,-1712
8000da2e:	1a d8       	st.w	--sp,r8
8000da30:	fa c8 fa b8 	sub	r8,sp,-1352
8000da34:	1a d8       	st.w	--sp,r8
8000da36:	fa c8 fb b4 	sub	r8,sp,-1100
8000da3a:	1a d8       	st.w	--sp,r8
8000da3c:	fa c8 f9 40 	sub	r8,sp,-1728
8000da40:	fa c9 ff b4 	sub	r9,sp,-76
8000da44:	04 9a       	mov	r10,r2
8000da46:	0c 9b       	mov	r11,r6
8000da48:	08 9c       	mov	r12,r4
8000da4a:	f0 1f 00 ae 	mcall	8000dd00 <_vfprintf_r+0x1150>
8000da4e:	2f dd       	sub	sp,-12
8000da50:	98 18       	ld.sh	r8,r12[0x2]
8000da52:	c2 68       	rjmp	8000da9e <_vfprintf_r+0xeee>
8000da54:	ee ca ff ff 	sub	r10,r7,-1
8000da58:	10 37       	cp.w	r7,r8
8000da5a:	c0 94       	brge	8000da6c <_vfprintf_r+0xebc>
8000da5c:	fa c9 f9 44 	sub	r9,sp,-1724
8000da60:	14 97       	mov	r7,r10
8000da62:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000da66:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000da6a:	c1 a8       	rjmp	8000da9e <_vfprintf_r+0xeee>
8000da6c:	41 09       	lddsp	r9,sp[0x40]
8000da6e:	59 f8       	cp.w	r8,31
8000da70:	e0 89 00 13 	brgt	8000da96 <_vfprintf_r+0xee6>
8000da74:	f2 cb ff fc 	sub	r11,r9,-4
8000da78:	51 0b       	stdsp	sp[0x40],r11
8000da7a:	72 09       	ld.w	r9,r9[0x0]
8000da7c:	fa c6 f9 44 	sub	r6,sp,-1724
8000da80:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000da84:	2f f8       	sub	r8,-1
8000da86:	f7 49 fd 88 	st.w	r11[-632],r9
8000da8a:	fb 48 06 b4 	st.w	sp[1716],r8
8000da8e:	14 97       	mov	r7,r10
8000da90:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000da94:	c0 58       	rjmp	8000da9e <_vfprintf_r+0xeee>
8000da96:	92 18       	ld.sh	r8,r9[0x2]
8000da98:	14 97       	mov	r7,r10
8000da9a:	2f c9       	sub	r9,-4
8000da9c:	51 09       	stdsp	sp[0x40],r9
8000da9e:	5c 78       	castu.h	r8
8000daa0:	50 18       	stdsp	sp[0x4],r8
8000daa2:	c4 68       	rjmp	8000db2e <_vfprintf_r+0xf7e>
8000daa4:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000daa8:	40 3c       	lddsp	r12,sp[0xc]
8000daaa:	58 0c       	cp.w	r12,0
8000daac:	c1 d0       	breq	8000dae6 <_vfprintf_r+0xf36>
8000daae:	10 36       	cp.w	r6,r8
8000dab0:	c0 64       	brge	8000dabc <_vfprintf_r+0xf0c>
8000dab2:	fa cb f9 44 	sub	r11,sp,-1724
8000dab6:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000daba:	c1 f8       	rjmp	8000daf8 <_vfprintf_r+0xf48>
8000dabc:	fa c8 f9 50 	sub	r8,sp,-1712
8000dac0:	1a d8       	st.w	--sp,r8
8000dac2:	fa c8 fa b8 	sub	r8,sp,-1352
8000dac6:	0c 9b       	mov	r11,r6
8000dac8:	1a d8       	st.w	--sp,r8
8000daca:	fa c8 fb b4 	sub	r8,sp,-1100
8000dace:	04 9a       	mov	r10,r2
8000dad0:	1a d8       	st.w	--sp,r8
8000dad2:	08 9c       	mov	r12,r4
8000dad4:	fa c8 f9 40 	sub	r8,sp,-1728
8000dad8:	fa c9 ff b4 	sub	r9,sp,-76
8000dadc:	f0 1f 00 89 	mcall	8000dd00 <_vfprintf_r+0x1150>
8000dae0:	2f dd       	sub	sp,-12
8000dae2:	78 0b       	ld.w	r11,r12[0x0]
8000dae4:	c2 48       	rjmp	8000db2c <_vfprintf_r+0xf7c>
8000dae6:	ee ca ff ff 	sub	r10,r7,-1
8000daea:	10 37       	cp.w	r7,r8
8000daec:	c0 94       	brge	8000dafe <_vfprintf_r+0xf4e>
8000daee:	fa c9 f9 44 	sub	r9,sp,-1724
8000daf2:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000daf6:	14 97       	mov	r7,r10
8000daf8:	ec fb fd 88 	ld.w	r11,r6[-632]
8000dafc:	c1 88       	rjmp	8000db2c <_vfprintf_r+0xf7c>
8000dafe:	41 09       	lddsp	r9,sp[0x40]
8000db00:	59 f8       	cp.w	r8,31
8000db02:	e0 89 00 11 	brgt	8000db24 <_vfprintf_r+0xf74>
8000db06:	f2 cb ff fc 	sub	r11,r9,-4
8000db0a:	51 0b       	stdsp	sp[0x40],r11
8000db0c:	fa c6 f9 44 	sub	r6,sp,-1724
8000db10:	72 0b       	ld.w	r11,r9[0x0]
8000db12:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000db16:	f3 4b fd 88 	st.w	r9[-632],r11
8000db1a:	2f f8       	sub	r8,-1
8000db1c:	14 97       	mov	r7,r10
8000db1e:	fb 48 06 b4 	st.w	sp[1716],r8
8000db22:	c0 58       	rjmp	8000db2c <_vfprintf_r+0xf7c>
8000db24:	72 0b       	ld.w	r11,r9[0x0]
8000db26:	14 97       	mov	r7,r10
8000db28:	2f c9       	sub	r9,-4
8000db2a:	51 09       	stdsp	sp[0x40],r9
8000db2c:	50 1b       	stdsp	sp[0x4],r11
8000db2e:	30 0e       	mov	lr,0
8000db30:	50 0e       	stdsp	sp[0x0],lr
8000db32:	1c 98       	mov	r8,lr
8000db34:	e0 8f 03 06 	bral	8000e140 <_vfprintf_r+0x1590>
8000db38:	50 a7       	stdsp	sp[0x28],r7
8000db3a:	50 80       	stdsp	sp[0x20],r0
8000db3c:	0c 97       	mov	r7,r6
8000db3e:	04 94       	mov	r4,r2
8000db40:	06 96       	mov	r6,r3
8000db42:	02 92       	mov	r2,r1
8000db44:	40 93       	lddsp	r3,sp[0x24]
8000db46:	40 41       	lddsp	r1,sp[0x10]
8000db48:	0e 99       	mov	r9,r7
8000db4a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000db4e:	40 3c       	lddsp	r12,sp[0xc]
8000db50:	58 0c       	cp.w	r12,0
8000db52:	c1 d0       	breq	8000db8c <_vfprintf_r+0xfdc>
8000db54:	10 36       	cp.w	r6,r8
8000db56:	c0 64       	brge	8000db62 <_vfprintf_r+0xfb2>
8000db58:	fa cb f9 44 	sub	r11,sp,-1724
8000db5c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000db60:	c1 d8       	rjmp	8000db9a <_vfprintf_r+0xfea>
8000db62:	fa c8 f9 50 	sub	r8,sp,-1712
8000db66:	1a d8       	st.w	--sp,r8
8000db68:	fa c8 fa b8 	sub	r8,sp,-1352
8000db6c:	1a d8       	st.w	--sp,r8
8000db6e:	fa c8 fb b4 	sub	r8,sp,-1100
8000db72:	1a d8       	st.w	--sp,r8
8000db74:	fa c9 ff b4 	sub	r9,sp,-76
8000db78:	fa c8 f9 40 	sub	r8,sp,-1728
8000db7c:	04 9a       	mov	r10,r2
8000db7e:	0c 9b       	mov	r11,r6
8000db80:	08 9c       	mov	r12,r4
8000db82:	f0 1f 00 60 	mcall	8000dd00 <_vfprintf_r+0x1150>
8000db86:	2f dd       	sub	sp,-12
8000db88:	78 09       	ld.w	r9,r12[0x0]
8000db8a:	c2 18       	rjmp	8000dbcc <_vfprintf_r+0x101c>
8000db8c:	2f f7       	sub	r7,-1
8000db8e:	10 39       	cp.w	r9,r8
8000db90:	c0 84       	brge	8000dba0 <_vfprintf_r+0xff0>
8000db92:	fa ca f9 44 	sub	r10,sp,-1724
8000db96:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000db9a:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000db9e:	c1 78       	rjmp	8000dbcc <_vfprintf_r+0x101c>
8000dba0:	41 09       	lddsp	r9,sp[0x40]
8000dba2:	59 f8       	cp.w	r8,31
8000dba4:	e0 89 00 10 	brgt	8000dbc4 <_vfprintf_r+0x1014>
8000dba8:	f2 ca ff fc 	sub	r10,r9,-4
8000dbac:	51 0a       	stdsp	sp[0x40],r10
8000dbae:	fa c6 f9 44 	sub	r6,sp,-1724
8000dbb2:	72 09       	ld.w	r9,r9[0x0]
8000dbb4:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000dbb8:	f5 49 fd 88 	st.w	r10[-632],r9
8000dbbc:	2f f8       	sub	r8,-1
8000dbbe:	fb 48 06 b4 	st.w	sp[1716],r8
8000dbc2:	c0 58       	rjmp	8000dbcc <_vfprintf_r+0x101c>
8000dbc4:	f2 c8 ff fc 	sub	r8,r9,-4
8000dbc8:	51 08       	stdsp	sp[0x40],r8
8000dbca:	72 09       	ld.w	r9,r9[0x0]
8000dbcc:	33 08       	mov	r8,48
8000dbce:	fb 68 06 b8 	st.b	sp[1720],r8
8000dbd2:	37 88       	mov	r8,120
8000dbd4:	30 0e       	mov	lr,0
8000dbd6:	fb 68 06 b9 	st.b	sp[1721],r8
8000dbda:	4c bc       	lddpc	r12,8000dd04 <_vfprintf_r+0x1154>
8000dbdc:	50 19       	stdsp	sp[0x4],r9
8000dbde:	a1 b5       	sbr	r5,0x1
8000dbe0:	50 0e       	stdsp	sp[0x0],lr
8000dbe2:	50 dc       	stdsp	sp[0x34],r12
8000dbe4:	30 28       	mov	r8,2
8000dbe6:	37 80       	mov	r0,120
8000dbe8:	e0 8f 02 ac 	bral	8000e140 <_vfprintf_r+0x1590>
8000dbec:	50 a7       	stdsp	sp[0x28],r7
8000dbee:	50 80       	stdsp	sp[0x20],r0
8000dbf0:	10 90       	mov	r0,r8
8000dbf2:	30 08       	mov	r8,0
8000dbf4:	fb 68 06 bb 	st.b	sp[1723],r8
8000dbf8:	0c 97       	mov	r7,r6
8000dbfa:	04 94       	mov	r4,r2
8000dbfc:	06 96       	mov	r6,r3
8000dbfe:	02 92       	mov	r2,r1
8000dc00:	40 93       	lddsp	r3,sp[0x24]
8000dc02:	40 41       	lddsp	r1,sp[0x10]
8000dc04:	0e 99       	mov	r9,r7
8000dc06:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dc0a:	40 3b       	lddsp	r11,sp[0xc]
8000dc0c:	58 0b       	cp.w	r11,0
8000dc0e:	c1 d0       	breq	8000dc48 <_vfprintf_r+0x1098>
8000dc10:	10 36       	cp.w	r6,r8
8000dc12:	c0 64       	brge	8000dc1e <_vfprintf_r+0x106e>
8000dc14:	fa ca f9 44 	sub	r10,sp,-1724
8000dc18:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000dc1c:	c1 d8       	rjmp	8000dc56 <_vfprintf_r+0x10a6>
8000dc1e:	fa c8 f9 50 	sub	r8,sp,-1712
8000dc22:	1a d8       	st.w	--sp,r8
8000dc24:	fa c8 fa b8 	sub	r8,sp,-1352
8000dc28:	1a d8       	st.w	--sp,r8
8000dc2a:	fa c8 fb b4 	sub	r8,sp,-1100
8000dc2e:	0c 9b       	mov	r11,r6
8000dc30:	1a d8       	st.w	--sp,r8
8000dc32:	04 9a       	mov	r10,r2
8000dc34:	fa c8 f9 40 	sub	r8,sp,-1728
8000dc38:	fa c9 ff b4 	sub	r9,sp,-76
8000dc3c:	08 9c       	mov	r12,r4
8000dc3e:	f0 1f 00 31 	mcall	8000dd00 <_vfprintf_r+0x1150>
8000dc42:	2f dd       	sub	sp,-12
8000dc44:	78 06       	ld.w	r6,r12[0x0]
8000dc46:	c2 08       	rjmp	8000dc86 <_vfprintf_r+0x10d6>
8000dc48:	2f f7       	sub	r7,-1
8000dc4a:	10 39       	cp.w	r9,r8
8000dc4c:	c0 84       	brge	8000dc5c <_vfprintf_r+0x10ac>
8000dc4e:	fa c9 f9 44 	sub	r9,sp,-1724
8000dc52:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000dc56:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000dc5a:	c1 68       	rjmp	8000dc86 <_vfprintf_r+0x10d6>
8000dc5c:	41 09       	lddsp	r9,sp[0x40]
8000dc5e:	59 f8       	cp.w	r8,31
8000dc60:	e0 89 00 10 	brgt	8000dc80 <_vfprintf_r+0x10d0>
8000dc64:	f2 ca ff fc 	sub	r10,r9,-4
8000dc68:	51 0a       	stdsp	sp[0x40],r10
8000dc6a:	72 06       	ld.w	r6,r9[0x0]
8000dc6c:	fa ce f9 44 	sub	lr,sp,-1724
8000dc70:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000dc74:	f3 46 fd 88 	st.w	r9[-632],r6
8000dc78:	2f f8       	sub	r8,-1
8000dc7a:	fb 48 06 b4 	st.w	sp[1716],r8
8000dc7e:	c0 48       	rjmp	8000dc86 <_vfprintf_r+0x10d6>
8000dc80:	72 06       	ld.w	r6,r9[0x0]
8000dc82:	2f c9       	sub	r9,-4
8000dc84:	51 09       	stdsp	sp[0x40],r9
8000dc86:	40 2c       	lddsp	r12,sp[0x8]
8000dc88:	58 0c       	cp.w	r12,0
8000dc8a:	c1 05       	brlt	8000dcaa <_vfprintf_r+0x10fa>
8000dc8c:	18 9a       	mov	r10,r12
8000dc8e:	30 0b       	mov	r11,0
8000dc90:	0c 9c       	mov	r12,r6
8000dc92:	f0 1f 00 1e 	mcall	8000dd08 <_vfprintf_r+0x1158>
8000dc96:	e0 80 02 e8 	breq	8000e266 <_vfprintf_r+0x16b6>
8000dc9a:	f8 06 01 02 	sub	r2,r12,r6
8000dc9e:	40 2b       	lddsp	r11,sp[0x8]
8000dca0:	16 32       	cp.w	r2,r11
8000dca2:	e0 89 02 e2 	brgt	8000e266 <_vfprintf_r+0x16b6>
8000dca6:	e0 8f 02 dd 	bral	8000e260 <_vfprintf_r+0x16b0>
8000dcaa:	30 0a       	mov	r10,0
8000dcac:	0c 9c       	mov	r12,r6
8000dcae:	50 2a       	stdsp	sp[0x8],r10
8000dcb0:	f0 1f 00 17 	mcall	8000dd0c <_vfprintf_r+0x115c>
8000dcb4:	18 92       	mov	r2,r12
8000dcb6:	e0 8f 02 db 	bral	8000e26c <_vfprintf_r+0x16bc>
8000dcba:	50 a7       	stdsp	sp[0x28],r7
8000dcbc:	50 80       	stdsp	sp[0x20],r0
8000dcbe:	0c 97       	mov	r7,r6
8000dcc0:	04 94       	mov	r4,r2
8000dcc2:	06 96       	mov	r6,r3
8000dcc4:	02 92       	mov	r2,r1
8000dcc6:	40 93       	lddsp	r3,sp[0x24]
8000dcc8:	10 90       	mov	r0,r8
8000dcca:	40 41       	lddsp	r1,sp[0x10]
8000dccc:	a5 a5       	sbr	r5,0x4
8000dcce:	c0 a8       	rjmp	8000dce2 <_vfprintf_r+0x1132>
8000dcd0:	50 a7       	stdsp	sp[0x28],r7
8000dcd2:	50 80       	stdsp	sp[0x20],r0
8000dcd4:	0c 97       	mov	r7,r6
8000dcd6:	04 94       	mov	r4,r2
8000dcd8:	06 96       	mov	r6,r3
8000dcda:	02 92       	mov	r2,r1
8000dcdc:	40 93       	lddsp	r3,sp[0x24]
8000dcde:	10 90       	mov	r0,r8
8000dce0:	40 41       	lddsp	r1,sp[0x10]
8000dce2:	ed b5 00 05 	bld	r5,0x5
8000dce6:	c5 d1       	brne	8000dda0 <_vfprintf_r+0x11f0>
8000dce8:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dcec:	40 39       	lddsp	r9,sp[0xc]
8000dcee:	58 09       	cp.w	r9,0
8000dcf0:	c2 80       	breq	8000dd40 <_vfprintf_r+0x1190>
8000dcf2:	10 36       	cp.w	r6,r8
8000dcf4:	c0 e4       	brge	8000dd10 <_vfprintf_r+0x1160>
8000dcf6:	fa c8 f9 44 	sub	r8,sp,-1724
8000dcfa:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000dcfe:	c2 a8       	rjmp	8000dd52 <_vfprintf_r+0x11a2>
8000dd00:	80 00       	ld.sh	r0,r0[0x0]
8000dd02:	c8 6c       	rcall	8000de0e <_vfprintf_r+0x125e>
8000dd04:	80 01       	ld.sh	r1,r0[0x0]
8000dd06:	23 f0       	sub	r0,63
8000dd08:	80 01       	ld.sh	r1,r0[0x0]
8000dd0a:	07 10       	ld.sh	r0,r3++
8000dd0c:	80 00       	ld.sh	r0,r0[0x0]
8000dd0e:	c8 34       	brge	8000dc14 <_vfprintf_r+0x1064>
8000dd10:	fa c8 f9 50 	sub	r8,sp,-1712
8000dd14:	1a d8       	st.w	--sp,r8
8000dd16:	fa c8 fa b8 	sub	r8,sp,-1352
8000dd1a:	1a d8       	st.w	--sp,r8
8000dd1c:	fa c8 fb b4 	sub	r8,sp,-1100
8000dd20:	1a d8       	st.w	--sp,r8
8000dd22:	fa c8 f9 40 	sub	r8,sp,-1728
8000dd26:	fa c9 ff b4 	sub	r9,sp,-76
8000dd2a:	04 9a       	mov	r10,r2
8000dd2c:	0c 9b       	mov	r11,r6
8000dd2e:	08 9c       	mov	r12,r4
8000dd30:	f0 1f 00 c8 	mcall	8000e050 <_vfprintf_r+0x14a0>
8000dd34:	2f dd       	sub	sp,-12
8000dd36:	f8 e8 00 00 	ld.d	r8,r12[0]
8000dd3a:	fa e9 00 00 	st.d	sp[0],r8
8000dd3e:	c2 e8       	rjmp	8000dd9a <_vfprintf_r+0x11ea>
8000dd40:	ee ca ff ff 	sub	r10,r7,-1
8000dd44:	10 37       	cp.w	r7,r8
8000dd46:	c0 b4       	brge	8000dd5c <_vfprintf_r+0x11ac>
8000dd48:	fa c8 f9 44 	sub	r8,sp,-1724
8000dd4c:	14 97       	mov	r7,r10
8000dd4e:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000dd52:	ec ea fd 88 	ld.d	r10,r6[-632]
8000dd56:	fa eb 00 00 	st.d	sp[0],r10
8000dd5a:	c2 08       	rjmp	8000dd9a <_vfprintf_r+0x11ea>
8000dd5c:	41 09       	lddsp	r9,sp[0x40]
8000dd5e:	59 f8       	cp.w	r8,31
8000dd60:	e0 89 00 16 	brgt	8000dd8c <_vfprintf_r+0x11dc>
8000dd64:	f2 e6 00 00 	ld.d	r6,r9[0]
8000dd68:	f2 cb ff f8 	sub	r11,r9,-8
8000dd6c:	fa e7 00 00 	st.d	sp[0],r6
8000dd70:	51 0b       	stdsp	sp[0x40],r11
8000dd72:	fa c6 f9 44 	sub	r6,sp,-1724
8000dd76:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000dd7a:	fa e6 00 00 	ld.d	r6,sp[0]
8000dd7e:	f2 e7 fd 88 	st.d	r9[-632],r6
8000dd82:	2f f8       	sub	r8,-1
8000dd84:	14 97       	mov	r7,r10
8000dd86:	fb 48 06 b4 	st.w	sp[1716],r8
8000dd8a:	c0 88       	rjmp	8000dd9a <_vfprintf_r+0x11ea>
8000dd8c:	f2 e6 00 00 	ld.d	r6,r9[0]
8000dd90:	2f 89       	sub	r9,-8
8000dd92:	fa e7 00 00 	st.d	sp[0],r6
8000dd96:	51 09       	stdsp	sp[0x40],r9
8000dd98:	14 97       	mov	r7,r10
8000dd9a:	30 18       	mov	r8,1
8000dd9c:	e0 8f 01 d2 	bral	8000e140 <_vfprintf_r+0x1590>
8000dda0:	ed b5 00 04 	bld	r5,0x4
8000dda4:	c1 61       	brne	8000ddd0 <_vfprintf_r+0x1220>
8000dda6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ddaa:	40 3e       	lddsp	lr,sp[0xc]
8000ddac:	58 0e       	cp.w	lr,0
8000ddae:	c0 80       	breq	8000ddbe <_vfprintf_r+0x120e>
8000ddb0:	10 36       	cp.w	r6,r8
8000ddb2:	c6 74       	brge	8000de80 <_vfprintf_r+0x12d0>
8000ddb4:	fa cc f9 44 	sub	r12,sp,-1724
8000ddb8:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000ddbc:	c8 08       	rjmp	8000debc <_vfprintf_r+0x130c>
8000ddbe:	ee ca ff ff 	sub	r10,r7,-1
8000ddc2:	10 37       	cp.w	r7,r8
8000ddc4:	c7 f4       	brge	8000dec2 <_vfprintf_r+0x1312>
8000ddc6:	fa cb f9 44 	sub	r11,sp,-1724
8000ddca:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ddce:	c7 68       	rjmp	8000deba <_vfprintf_r+0x130a>
8000ddd0:	ed b5 00 06 	bld	r5,0x6
8000ddd4:	c4 a1       	brne	8000de68 <_vfprintf_r+0x12b8>
8000ddd6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ddda:	40 3c       	lddsp	r12,sp[0xc]
8000dddc:	58 0c       	cp.w	r12,0
8000ddde:	c1 d0       	breq	8000de18 <_vfprintf_r+0x1268>
8000dde0:	10 36       	cp.w	r6,r8
8000dde2:	c0 64       	brge	8000ddee <_vfprintf_r+0x123e>
8000dde4:	fa cb f9 44 	sub	r11,sp,-1724
8000dde8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ddec:	c1 f8       	rjmp	8000de2a <_vfprintf_r+0x127a>
8000ddee:	fa c8 f9 50 	sub	r8,sp,-1712
8000ddf2:	1a d8       	st.w	--sp,r8
8000ddf4:	fa c8 fa b8 	sub	r8,sp,-1352
8000ddf8:	1a d8       	st.w	--sp,r8
8000ddfa:	fa c8 fb b4 	sub	r8,sp,-1100
8000ddfe:	1a d8       	st.w	--sp,r8
8000de00:	fa c8 f9 40 	sub	r8,sp,-1728
8000de04:	fa c9 ff b4 	sub	r9,sp,-76
8000de08:	04 9a       	mov	r10,r2
8000de0a:	0c 9b       	mov	r11,r6
8000de0c:	08 9c       	mov	r12,r4
8000de0e:	f0 1f 00 91 	mcall	8000e050 <_vfprintf_r+0x14a0>
8000de12:	2f dd       	sub	sp,-12
8000de14:	98 18       	ld.sh	r8,r12[0x2]
8000de16:	c2 68       	rjmp	8000de62 <_vfprintf_r+0x12b2>
8000de18:	ee ca ff ff 	sub	r10,r7,-1
8000de1c:	10 37       	cp.w	r7,r8
8000de1e:	c0 94       	brge	8000de30 <_vfprintf_r+0x1280>
8000de20:	fa c9 f9 44 	sub	r9,sp,-1724
8000de24:	14 97       	mov	r7,r10
8000de26:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000de2a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000de2e:	c1 a8       	rjmp	8000de62 <_vfprintf_r+0x12b2>
8000de30:	41 09       	lddsp	r9,sp[0x40]
8000de32:	59 f8       	cp.w	r8,31
8000de34:	e0 89 00 13 	brgt	8000de5a <_vfprintf_r+0x12aa>
8000de38:	f2 cb ff fc 	sub	r11,r9,-4
8000de3c:	51 0b       	stdsp	sp[0x40],r11
8000de3e:	72 09       	ld.w	r9,r9[0x0]
8000de40:	fa c6 f9 44 	sub	r6,sp,-1724
8000de44:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000de48:	2f f8       	sub	r8,-1
8000de4a:	f7 49 fd 88 	st.w	r11[-632],r9
8000de4e:	fb 48 06 b4 	st.w	sp[1716],r8
8000de52:	14 97       	mov	r7,r10
8000de54:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000de58:	c0 58       	rjmp	8000de62 <_vfprintf_r+0x12b2>
8000de5a:	92 18       	ld.sh	r8,r9[0x2]
8000de5c:	14 97       	mov	r7,r10
8000de5e:	2f c9       	sub	r9,-4
8000de60:	51 09       	stdsp	sp[0x40],r9
8000de62:	5c 78       	castu.h	r8
8000de64:	50 18       	stdsp	sp[0x4],r8
8000de66:	c4 68       	rjmp	8000def2 <_vfprintf_r+0x1342>
8000de68:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000de6c:	40 3c       	lddsp	r12,sp[0xc]
8000de6e:	58 0c       	cp.w	r12,0
8000de70:	c1 d0       	breq	8000deaa <_vfprintf_r+0x12fa>
8000de72:	10 36       	cp.w	r6,r8
8000de74:	c0 64       	brge	8000de80 <_vfprintf_r+0x12d0>
8000de76:	fa cb f9 44 	sub	r11,sp,-1724
8000de7a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000de7e:	c1 f8       	rjmp	8000debc <_vfprintf_r+0x130c>
8000de80:	fa c8 f9 50 	sub	r8,sp,-1712
8000de84:	1a d8       	st.w	--sp,r8
8000de86:	fa c8 fa b8 	sub	r8,sp,-1352
8000de8a:	0c 9b       	mov	r11,r6
8000de8c:	1a d8       	st.w	--sp,r8
8000de8e:	fa c8 fb b4 	sub	r8,sp,-1100
8000de92:	04 9a       	mov	r10,r2
8000de94:	1a d8       	st.w	--sp,r8
8000de96:	08 9c       	mov	r12,r4
8000de98:	fa c8 f9 40 	sub	r8,sp,-1728
8000de9c:	fa c9 ff b4 	sub	r9,sp,-76
8000dea0:	f0 1f 00 6c 	mcall	8000e050 <_vfprintf_r+0x14a0>
8000dea4:	2f dd       	sub	sp,-12
8000dea6:	78 0b       	ld.w	r11,r12[0x0]
8000dea8:	c2 48       	rjmp	8000def0 <_vfprintf_r+0x1340>
8000deaa:	ee ca ff ff 	sub	r10,r7,-1
8000deae:	10 37       	cp.w	r7,r8
8000deb0:	c0 94       	brge	8000dec2 <_vfprintf_r+0x1312>
8000deb2:	fa c9 f9 44 	sub	r9,sp,-1724
8000deb6:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000deba:	14 97       	mov	r7,r10
8000debc:	ec fb fd 88 	ld.w	r11,r6[-632]
8000dec0:	c1 88       	rjmp	8000def0 <_vfprintf_r+0x1340>
8000dec2:	41 09       	lddsp	r9,sp[0x40]
8000dec4:	59 f8       	cp.w	r8,31
8000dec6:	e0 89 00 11 	brgt	8000dee8 <_vfprintf_r+0x1338>
8000deca:	f2 cb ff fc 	sub	r11,r9,-4
8000dece:	51 0b       	stdsp	sp[0x40],r11
8000ded0:	fa c6 f9 44 	sub	r6,sp,-1724
8000ded4:	72 0b       	ld.w	r11,r9[0x0]
8000ded6:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000deda:	f3 4b fd 88 	st.w	r9[-632],r11
8000dede:	2f f8       	sub	r8,-1
8000dee0:	14 97       	mov	r7,r10
8000dee2:	fb 48 06 b4 	st.w	sp[1716],r8
8000dee6:	c0 58       	rjmp	8000def0 <_vfprintf_r+0x1340>
8000dee8:	72 0b       	ld.w	r11,r9[0x0]
8000deea:	14 97       	mov	r7,r10
8000deec:	2f c9       	sub	r9,-4
8000deee:	51 09       	stdsp	sp[0x40],r9
8000def0:	50 1b       	stdsp	sp[0x4],r11
8000def2:	30 0e       	mov	lr,0
8000def4:	30 18       	mov	r8,1
8000def6:	50 0e       	stdsp	sp[0x0],lr
8000def8:	c2 49       	rjmp	8000e140 <_vfprintf_r+0x1590>
8000defa:	50 a7       	stdsp	sp[0x28],r7
8000defc:	50 80       	stdsp	sp[0x20],r0
8000defe:	0c 97       	mov	r7,r6
8000df00:	04 94       	mov	r4,r2
8000df02:	06 96       	mov	r6,r3
8000df04:	02 92       	mov	r2,r1
8000df06:	4d 4c       	lddpc	r12,8000e054 <_vfprintf_r+0x14a4>
8000df08:	40 93       	lddsp	r3,sp[0x24]
8000df0a:	10 90       	mov	r0,r8
8000df0c:	40 41       	lddsp	r1,sp[0x10]
8000df0e:	50 dc       	stdsp	sp[0x34],r12
8000df10:	ed b5 00 05 	bld	r5,0x5
8000df14:	c5 51       	brne	8000dfbe <_vfprintf_r+0x140e>
8000df16:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000df1a:	40 3b       	lddsp	r11,sp[0xc]
8000df1c:	58 0b       	cp.w	r11,0
8000df1e:	c2 20       	breq	8000df62 <_vfprintf_r+0x13b2>
8000df20:	10 36       	cp.w	r6,r8
8000df22:	c0 a4       	brge	8000df36 <_vfprintf_r+0x1386>
8000df24:	fa ca f9 44 	sub	r10,sp,-1724
8000df28:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000df2c:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000df30:	fa e9 00 00 	st.d	sp[0],r8
8000df34:	cf 58       	rjmp	8000e11e <_vfprintf_r+0x156e>
8000df36:	fa c8 f9 50 	sub	r8,sp,-1712
8000df3a:	1a d8       	st.w	--sp,r8
8000df3c:	fa c8 fa b8 	sub	r8,sp,-1352
8000df40:	04 9a       	mov	r10,r2
8000df42:	1a d8       	st.w	--sp,r8
8000df44:	0c 9b       	mov	r11,r6
8000df46:	fa c8 fb b4 	sub	r8,sp,-1100
8000df4a:	08 9c       	mov	r12,r4
8000df4c:	1a d8       	st.w	--sp,r8
8000df4e:	fa c8 f9 40 	sub	r8,sp,-1728
8000df52:	fa c9 ff b4 	sub	r9,sp,-76
8000df56:	f0 1f 00 3f 	mcall	8000e050 <_vfprintf_r+0x14a0>
8000df5a:	2f dd       	sub	sp,-12
8000df5c:	f8 ea 00 00 	ld.d	r10,r12[0]
8000df60:	c0 c8       	rjmp	8000df78 <_vfprintf_r+0x13c8>
8000df62:	ee ca ff ff 	sub	r10,r7,-1
8000df66:	10 37       	cp.w	r7,r8
8000df68:	c0 b4       	brge	8000df7e <_vfprintf_r+0x13ce>
8000df6a:	fa c9 f9 44 	sub	r9,sp,-1724
8000df6e:	14 97       	mov	r7,r10
8000df70:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000df74:	ec ea fd 88 	ld.d	r10,r6[-632]
8000df78:	fa eb 00 00 	st.d	sp[0],r10
8000df7c:	cd 18       	rjmp	8000e11e <_vfprintf_r+0x156e>
8000df7e:	41 09       	lddsp	r9,sp[0x40]
8000df80:	59 f8       	cp.w	r8,31
8000df82:	e0 89 00 16 	brgt	8000dfae <_vfprintf_r+0x13fe>
8000df86:	f2 e6 00 00 	ld.d	r6,r9[0]
8000df8a:	f2 cb ff f8 	sub	r11,r9,-8
8000df8e:	fa e7 00 00 	st.d	sp[0],r6
8000df92:	51 0b       	stdsp	sp[0x40],r11
8000df94:	fa c6 f9 44 	sub	r6,sp,-1724
8000df98:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000df9c:	fa e6 00 00 	ld.d	r6,sp[0]
8000dfa0:	f2 e7 fd 88 	st.d	r9[-632],r6
8000dfa4:	2f f8       	sub	r8,-1
8000dfa6:	14 97       	mov	r7,r10
8000dfa8:	fb 48 06 b4 	st.w	sp[1716],r8
8000dfac:	cb 98       	rjmp	8000e11e <_vfprintf_r+0x156e>
8000dfae:	f2 e6 00 00 	ld.d	r6,r9[0]
8000dfb2:	2f 89       	sub	r9,-8
8000dfb4:	fa e7 00 00 	st.d	sp[0],r6
8000dfb8:	51 09       	stdsp	sp[0x40],r9
8000dfba:	14 97       	mov	r7,r10
8000dfbc:	cb 18       	rjmp	8000e11e <_vfprintf_r+0x156e>
8000dfbe:	ed b5 00 04 	bld	r5,0x4
8000dfc2:	c1 71       	brne	8000dff0 <_vfprintf_r+0x1440>
8000dfc4:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dfc8:	40 3e       	lddsp	lr,sp[0xc]
8000dfca:	58 0e       	cp.w	lr,0
8000dfcc:	c0 80       	breq	8000dfdc <_vfprintf_r+0x142c>
8000dfce:	10 36       	cp.w	r6,r8
8000dfd0:	c6 c4       	brge	8000e0a8 <_vfprintf_r+0x14f8>
8000dfd2:	fa cc f9 44 	sub	r12,sp,-1724
8000dfd6:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000dfda:	c8 58       	rjmp	8000e0e4 <_vfprintf_r+0x1534>
8000dfdc:	ee ca ff ff 	sub	r10,r7,-1
8000dfe0:	10 37       	cp.w	r7,r8
8000dfe2:	e0 84 00 84 	brge	8000e0ea <_vfprintf_r+0x153a>
8000dfe6:	fa cb f9 44 	sub	r11,sp,-1724
8000dfea:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000dfee:	c7 a8       	rjmp	8000e0e2 <_vfprintf_r+0x1532>
8000dff0:	ed b5 00 06 	bld	r5,0x6
8000dff4:	c4 e1       	brne	8000e090 <_vfprintf_r+0x14e0>
8000dff6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000dffa:	40 3c       	lddsp	r12,sp[0xc]
8000dffc:	58 0c       	cp.w	r12,0
8000dffe:	c1 d0       	breq	8000e038 <_vfprintf_r+0x1488>
8000e000:	10 36       	cp.w	r6,r8
8000e002:	c0 64       	brge	8000e00e <_vfprintf_r+0x145e>
8000e004:	fa cb f9 44 	sub	r11,sp,-1724
8000e008:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e00c:	c1 f8       	rjmp	8000e04a <_vfprintf_r+0x149a>
8000e00e:	fa c8 f9 50 	sub	r8,sp,-1712
8000e012:	1a d8       	st.w	--sp,r8
8000e014:	fa c8 fa b8 	sub	r8,sp,-1352
8000e018:	1a d8       	st.w	--sp,r8
8000e01a:	fa c8 fb b4 	sub	r8,sp,-1100
8000e01e:	1a d8       	st.w	--sp,r8
8000e020:	fa c8 f9 40 	sub	r8,sp,-1728
8000e024:	fa c9 ff b4 	sub	r9,sp,-76
8000e028:	04 9a       	mov	r10,r2
8000e02a:	0c 9b       	mov	r11,r6
8000e02c:	08 9c       	mov	r12,r4
8000e02e:	f0 1f 00 09 	mcall	8000e050 <_vfprintf_r+0x14a0>
8000e032:	2f dd       	sub	sp,-12
8000e034:	98 18       	ld.sh	r8,r12[0x2]
8000e036:	c2 a8       	rjmp	8000e08a <_vfprintf_r+0x14da>
8000e038:	ee ca ff ff 	sub	r10,r7,-1
8000e03c:	10 37       	cp.w	r7,r8
8000e03e:	c0 d4       	brge	8000e058 <_vfprintf_r+0x14a8>
8000e040:	fa c9 f9 44 	sub	r9,sp,-1724
8000e044:	14 97       	mov	r7,r10
8000e046:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e04a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000e04e:	c1 e8       	rjmp	8000e08a <_vfprintf_r+0x14da>
8000e050:	80 00       	ld.sh	r0,r0[0x0]
8000e052:	c8 6c       	rcall	8000e15e <_vfprintf_r+0x15ae>
8000e054:	80 01       	ld.sh	r1,r0[0x0]
8000e056:	23 f0       	sub	r0,63
8000e058:	41 09       	lddsp	r9,sp[0x40]
8000e05a:	59 f8       	cp.w	r8,31
8000e05c:	e0 89 00 13 	brgt	8000e082 <_vfprintf_r+0x14d2>
8000e060:	f2 cb ff fc 	sub	r11,r9,-4
8000e064:	51 0b       	stdsp	sp[0x40],r11
8000e066:	72 09       	ld.w	r9,r9[0x0]
8000e068:	fa c6 f9 44 	sub	r6,sp,-1724
8000e06c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000e070:	2f f8       	sub	r8,-1
8000e072:	f7 49 fd 88 	st.w	r11[-632],r9
8000e076:	fb 48 06 b4 	st.w	sp[1716],r8
8000e07a:	14 97       	mov	r7,r10
8000e07c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000e080:	c0 58       	rjmp	8000e08a <_vfprintf_r+0x14da>
8000e082:	92 18       	ld.sh	r8,r9[0x2]
8000e084:	14 97       	mov	r7,r10
8000e086:	2f c9       	sub	r9,-4
8000e088:	51 09       	stdsp	sp[0x40],r9
8000e08a:	5c 78       	castu.h	r8
8000e08c:	50 18       	stdsp	sp[0x4],r8
8000e08e:	c4 68       	rjmp	8000e11a <_vfprintf_r+0x156a>
8000e090:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e094:	40 3c       	lddsp	r12,sp[0xc]
8000e096:	58 0c       	cp.w	r12,0
8000e098:	c1 d0       	breq	8000e0d2 <_vfprintf_r+0x1522>
8000e09a:	10 36       	cp.w	r6,r8
8000e09c:	c0 64       	brge	8000e0a8 <_vfprintf_r+0x14f8>
8000e09e:	fa cb f9 44 	sub	r11,sp,-1724
8000e0a2:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e0a6:	c1 f8       	rjmp	8000e0e4 <_vfprintf_r+0x1534>
8000e0a8:	fa c8 f9 50 	sub	r8,sp,-1712
8000e0ac:	1a d8       	st.w	--sp,r8
8000e0ae:	fa c8 fa b8 	sub	r8,sp,-1352
8000e0b2:	0c 9b       	mov	r11,r6
8000e0b4:	1a d8       	st.w	--sp,r8
8000e0b6:	fa c8 fb b4 	sub	r8,sp,-1100
8000e0ba:	04 9a       	mov	r10,r2
8000e0bc:	1a d8       	st.w	--sp,r8
8000e0be:	08 9c       	mov	r12,r4
8000e0c0:	fa c8 f9 40 	sub	r8,sp,-1728
8000e0c4:	fa c9 ff b4 	sub	r9,sp,-76
8000e0c8:	f0 1f 00 cb 	mcall	8000e3f4 <_vfprintf_r+0x1844>
8000e0cc:	2f dd       	sub	sp,-12
8000e0ce:	78 0b       	ld.w	r11,r12[0x0]
8000e0d0:	c2 48       	rjmp	8000e118 <_vfprintf_r+0x1568>
8000e0d2:	ee ca ff ff 	sub	r10,r7,-1
8000e0d6:	10 37       	cp.w	r7,r8
8000e0d8:	c0 94       	brge	8000e0ea <_vfprintf_r+0x153a>
8000e0da:	fa c9 f9 44 	sub	r9,sp,-1724
8000e0de:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e0e2:	14 97       	mov	r7,r10
8000e0e4:	ec fb fd 88 	ld.w	r11,r6[-632]
8000e0e8:	c1 88       	rjmp	8000e118 <_vfprintf_r+0x1568>
8000e0ea:	41 09       	lddsp	r9,sp[0x40]
8000e0ec:	59 f8       	cp.w	r8,31
8000e0ee:	e0 89 00 11 	brgt	8000e110 <_vfprintf_r+0x1560>
8000e0f2:	f2 cb ff fc 	sub	r11,r9,-4
8000e0f6:	51 0b       	stdsp	sp[0x40],r11
8000e0f8:	fa c6 f9 44 	sub	r6,sp,-1724
8000e0fc:	72 0b       	ld.w	r11,r9[0x0]
8000e0fe:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000e102:	f3 4b fd 88 	st.w	r9[-632],r11
8000e106:	2f f8       	sub	r8,-1
8000e108:	14 97       	mov	r7,r10
8000e10a:	fb 48 06 b4 	st.w	sp[1716],r8
8000e10e:	c0 58       	rjmp	8000e118 <_vfprintf_r+0x1568>
8000e110:	72 0b       	ld.w	r11,r9[0x0]
8000e112:	14 97       	mov	r7,r10
8000e114:	2f c9       	sub	r9,-4
8000e116:	51 09       	stdsp	sp[0x40],r9
8000e118:	50 1b       	stdsp	sp[0x4],r11
8000e11a:	30 0e       	mov	lr,0
8000e11c:	50 0e       	stdsp	sp[0x0],lr
8000e11e:	40 08       	lddsp	r8,sp[0x0]
8000e120:	40 1c       	lddsp	r12,sp[0x4]
8000e122:	18 48       	or	r8,r12
8000e124:	5f 19       	srne	r9
8000e126:	0a 98       	mov	r8,r5
8000e128:	eb e9 00 09 	and	r9,r5,r9
8000e12c:	a1 b8       	sbr	r8,0x1
8000e12e:	58 09       	cp.w	r9,0
8000e130:	c0 70       	breq	8000e13e <_vfprintf_r+0x158e>
8000e132:	10 95       	mov	r5,r8
8000e134:	fb 60 06 b9 	st.b	sp[1721],r0
8000e138:	33 08       	mov	r8,48
8000e13a:	fb 68 06 b8 	st.b	sp[1720],r8
8000e13e:	30 28       	mov	r8,2
8000e140:	30 09       	mov	r9,0
8000e142:	fb 69 06 bb 	st.b	sp[1723],r9
8000e146:	0a 99       	mov	r9,r5
8000e148:	a7 d9       	cbr	r9,0x7
8000e14a:	40 2b       	lddsp	r11,sp[0x8]
8000e14c:	40 16       	lddsp	r6,sp[0x4]
8000e14e:	58 0b       	cp.w	r11,0
8000e150:	5f 1a       	srne	r10
8000e152:	f2 05 17 40 	movge	r5,r9
8000e156:	fa c2 f9 78 	sub	r2,sp,-1672
8000e15a:	40 09       	lddsp	r9,sp[0x0]
8000e15c:	0c 49       	or	r9,r6
8000e15e:	5f 19       	srne	r9
8000e160:	f5 e9 10 09 	or	r9,r10,r9
8000e164:	c5 c0       	breq	8000e21c <_vfprintf_r+0x166c>
8000e166:	30 19       	mov	r9,1
8000e168:	f2 08 18 00 	cp.b	r8,r9
8000e16c:	c0 60       	breq	8000e178 <_vfprintf_r+0x15c8>
8000e16e:	30 29       	mov	r9,2
8000e170:	f2 08 18 00 	cp.b	r8,r9
8000e174:	c0 41       	brne	8000e17c <_vfprintf_r+0x15cc>
8000e176:	c3 c8       	rjmp	8000e1ee <_vfprintf_r+0x163e>
8000e178:	04 96       	mov	r6,r2
8000e17a:	c3 08       	rjmp	8000e1da <_vfprintf_r+0x162a>
8000e17c:	04 96       	mov	r6,r2
8000e17e:	fa e8 00 00 	ld.d	r8,sp[0]
8000e182:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000e186:	2d 0a       	sub	r10,-48
8000e188:	0c fa       	st.b	--r6,r10
8000e18a:	f0 0b 16 03 	lsr	r11,r8,0x3
8000e18e:	f2 0c 16 03 	lsr	r12,r9,0x3
8000e192:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000e196:	18 99       	mov	r9,r12
8000e198:	16 98       	mov	r8,r11
8000e19a:	58 08       	cp.w	r8,0
8000e19c:	5c 29       	cpc	r9
8000e19e:	cf 21       	brne	8000e182 <_vfprintf_r+0x15d2>
8000e1a0:	fa e9 00 00 	st.d	sp[0],r8
8000e1a4:	ed b5 00 00 	bld	r5,0x0
8000e1a8:	c4 51       	brne	8000e232 <_vfprintf_r+0x1682>
8000e1aa:	33 09       	mov	r9,48
8000e1ac:	f2 0a 18 00 	cp.b	r10,r9
8000e1b0:	c4 10       	breq	8000e232 <_vfprintf_r+0x1682>
8000e1b2:	0c f9       	st.b	--r6,r9
8000e1b4:	c3 f8       	rjmp	8000e232 <_vfprintf_r+0x1682>
8000e1b6:	fa ea 00 00 	ld.d	r10,sp[0]
8000e1ba:	30 a8       	mov	r8,10
8000e1bc:	30 09       	mov	r9,0
8000e1be:	f0 1f 00 8f 	mcall	8000e3f8 <_vfprintf_r+0x1848>
8000e1c2:	30 a8       	mov	r8,10
8000e1c4:	2d 0a       	sub	r10,-48
8000e1c6:	30 09       	mov	r9,0
8000e1c8:	ac 8a       	st.b	r6[0x0],r10
8000e1ca:	fa ea 00 00 	ld.d	r10,sp[0]
8000e1ce:	f0 1f 00 8c 	mcall	8000e3fc <_vfprintf_r+0x184c>
8000e1d2:	16 99       	mov	r9,r11
8000e1d4:	14 98       	mov	r8,r10
8000e1d6:	fa e9 00 00 	st.d	sp[0],r8
8000e1da:	20 16       	sub	r6,1
8000e1dc:	fa ea 00 00 	ld.d	r10,sp[0]
8000e1e0:	58 9a       	cp.w	r10,9
8000e1e2:	5c 2b       	cpc	r11
8000e1e4:	fe 9b ff e9 	brhi	8000e1b6 <_vfprintf_r+0x1606>
8000e1e8:	1b f8       	ld.ub	r8,sp[0x7]
8000e1ea:	2d 08       	sub	r8,-48
8000e1ec:	c2 08       	rjmp	8000e22c <_vfprintf_r+0x167c>
8000e1ee:	04 96       	mov	r6,r2
8000e1f0:	fa e8 00 00 	ld.d	r8,sp[0]
8000e1f4:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000e1f8:	40 de       	lddsp	lr,sp[0x34]
8000e1fa:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000e1fe:	0c fa       	st.b	--r6,r10
8000e200:	f2 0b 16 04 	lsr	r11,r9,0x4
8000e204:	f0 0a 16 04 	lsr	r10,r8,0x4
8000e208:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000e20c:	16 99       	mov	r9,r11
8000e20e:	14 98       	mov	r8,r10
8000e210:	58 08       	cp.w	r8,0
8000e212:	5c 29       	cpc	r9
8000e214:	cf 01       	brne	8000e1f4 <_vfprintf_r+0x1644>
8000e216:	fa e9 00 00 	st.d	sp[0],r8
8000e21a:	c0 c8       	rjmp	8000e232 <_vfprintf_r+0x1682>
8000e21c:	58 08       	cp.w	r8,0
8000e21e:	c0 91       	brne	8000e230 <_vfprintf_r+0x1680>
8000e220:	ed b5 00 00 	bld	r5,0x0
8000e224:	c0 61       	brne	8000e230 <_vfprintf_r+0x1680>
8000e226:	fa c6 f9 79 	sub	r6,sp,-1671
8000e22a:	33 08       	mov	r8,48
8000e22c:	ac 88       	st.b	r6[0x0],r8
8000e22e:	c0 28       	rjmp	8000e232 <_vfprintf_r+0x1682>
8000e230:	04 96       	mov	r6,r2
8000e232:	0c 12       	sub	r2,r6
8000e234:	c1 c8       	rjmp	8000e26c <_vfprintf_r+0x16bc>
8000e236:	50 a7       	stdsp	sp[0x28],r7
8000e238:	50 80       	stdsp	sp[0x20],r0
8000e23a:	40 93       	lddsp	r3,sp[0x24]
8000e23c:	0c 97       	mov	r7,r6
8000e23e:	10 90       	mov	r0,r8
8000e240:	04 94       	mov	r4,r2
8000e242:	40 41       	lddsp	r1,sp[0x10]
8000e244:	58 08       	cp.w	r8,0
8000e246:	e0 80 04 65 	breq	8000eb10 <_vfprintf_r+0x1f60>
8000e24a:	fb 68 06 60 	st.b	sp[1632],r8
8000e24e:	30 0c       	mov	r12,0
8000e250:	30 08       	mov	r8,0
8000e252:	30 12       	mov	r2,1
8000e254:	fb 68 06 bb 	st.b	sp[1723],r8
8000e258:	50 2c       	stdsp	sp[0x8],r12
8000e25a:	fa c6 f9 a0 	sub	r6,sp,-1632
8000e25e:	c0 78       	rjmp	8000e26c <_vfprintf_r+0x16bc>
8000e260:	30 0b       	mov	r11,0
8000e262:	50 2b       	stdsp	sp[0x8],r11
8000e264:	c0 48       	rjmp	8000e26c <_vfprintf_r+0x16bc>
8000e266:	40 22       	lddsp	r2,sp[0x8]
8000e268:	30 0a       	mov	r10,0
8000e26a:	50 2a       	stdsp	sp[0x8],r10
8000e26c:	40 29       	lddsp	r9,sp[0x8]
8000e26e:	e4 09 0c 49 	max	r9,r2,r9
8000e272:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000e276:	50 39       	stdsp	sp[0xc],r9
8000e278:	0a 9e       	mov	lr,r5
8000e27a:	30 09       	mov	r9,0
8000e27c:	e2 1e 00 02 	andl	lr,0x2,COH
8000e280:	f2 08 18 00 	cp.b	r8,r9
8000e284:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000e288:	f7 b8 01 ff 	subne	r8,-1
8000e28c:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000e290:	0a 9b       	mov	r11,r5
8000e292:	58 0e       	cp.w	lr,0
8000e294:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000e298:	f7 bc 01 fe 	subne	r12,-2
8000e29c:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000e2a0:	e2 1b 00 84 	andl	r11,0x84,COH
8000e2a4:	50 fe       	stdsp	sp[0x3c],lr
8000e2a6:	50 9b       	stdsp	sp[0x24],r11
8000e2a8:	c4 51       	brne	8000e332 <_vfprintf_r+0x1782>
8000e2aa:	40 8a       	lddsp	r10,sp[0x20]
8000e2ac:	40 39       	lddsp	r9,sp[0xc]
8000e2ae:	12 1a       	sub	r10,r9
8000e2b0:	50 4a       	stdsp	sp[0x10],r10
8000e2b2:	58 0a       	cp.w	r10,0
8000e2b4:	e0 89 00 1f 	brgt	8000e2f2 <_vfprintf_r+0x1742>
8000e2b8:	c3 d8       	rjmp	8000e332 <_vfprintf_r+0x1782>
8000e2ba:	2f 09       	sub	r9,-16
8000e2bc:	2f f8       	sub	r8,-1
8000e2be:	4d 1e       	lddpc	lr,8000e400 <_vfprintf_r+0x1850>
8000e2c0:	31 0c       	mov	r12,16
8000e2c2:	fb 49 06 90 	st.w	sp[1680],r9
8000e2c6:	87 0e       	st.w	r3[0x0],lr
8000e2c8:	87 1c       	st.w	r3[0x4],r12
8000e2ca:	fb 48 06 8c 	st.w	sp[1676],r8
8000e2ce:	58 78       	cp.w	r8,7
8000e2d0:	e0 89 00 04 	brgt	8000e2d8 <_vfprintf_r+0x1728>
8000e2d4:	2f 83       	sub	r3,-8
8000e2d6:	c0 b8       	rjmp	8000e2ec <_vfprintf_r+0x173c>
8000e2d8:	fa ca f9 78 	sub	r10,sp,-1672
8000e2dc:	02 9b       	mov	r11,r1
8000e2de:	08 9c       	mov	r12,r4
8000e2e0:	f0 1f 00 49 	mcall	8000e404 <_vfprintf_r+0x1854>
8000e2e4:	e0 81 04 27 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e2e8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e2ec:	40 4b       	lddsp	r11,sp[0x10]
8000e2ee:	21 0b       	sub	r11,16
8000e2f0:	50 4b       	stdsp	sp[0x10],r11
8000e2f2:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e2f6:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e2fa:	4c 2a       	lddpc	r10,8000e400 <_vfprintf_r+0x1850>
8000e2fc:	40 4e       	lddsp	lr,sp[0x10]
8000e2fe:	59 0e       	cp.w	lr,16
8000e300:	fe 99 ff dd 	brgt	8000e2ba <_vfprintf_r+0x170a>
8000e304:	1c 09       	add	r9,lr
8000e306:	2f f8       	sub	r8,-1
8000e308:	87 0a       	st.w	r3[0x0],r10
8000e30a:	fb 49 06 90 	st.w	sp[1680],r9
8000e30e:	87 1e       	st.w	r3[0x4],lr
8000e310:	fb 48 06 8c 	st.w	sp[1676],r8
8000e314:	58 78       	cp.w	r8,7
8000e316:	e0 89 00 04 	brgt	8000e31e <_vfprintf_r+0x176e>
8000e31a:	2f 83       	sub	r3,-8
8000e31c:	c0 b8       	rjmp	8000e332 <_vfprintf_r+0x1782>
8000e31e:	fa ca f9 78 	sub	r10,sp,-1672
8000e322:	02 9b       	mov	r11,r1
8000e324:	08 9c       	mov	r12,r4
8000e326:	f0 1f 00 38 	mcall	8000e404 <_vfprintf_r+0x1854>
8000e32a:	e0 81 04 04 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e32e:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e332:	30 09       	mov	r9,0
8000e334:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000e338:	f2 08 18 00 	cp.b	r8,r9
8000e33c:	c1 f0       	breq	8000e37a <_vfprintf_r+0x17ca>
8000e33e:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e342:	fa c9 f9 45 	sub	r9,sp,-1723
8000e346:	2f f8       	sub	r8,-1
8000e348:	87 09       	st.w	r3[0x0],r9
8000e34a:	fb 48 06 90 	st.w	sp[1680],r8
8000e34e:	30 19       	mov	r9,1
8000e350:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e354:	87 19       	st.w	r3[0x4],r9
8000e356:	2f f8       	sub	r8,-1
8000e358:	fb 48 06 8c 	st.w	sp[1676],r8
8000e35c:	58 78       	cp.w	r8,7
8000e35e:	e0 89 00 04 	brgt	8000e366 <_vfprintf_r+0x17b6>
8000e362:	2f 83       	sub	r3,-8
8000e364:	c0 b8       	rjmp	8000e37a <_vfprintf_r+0x17ca>
8000e366:	fa ca f9 78 	sub	r10,sp,-1672
8000e36a:	02 9b       	mov	r11,r1
8000e36c:	08 9c       	mov	r12,r4
8000e36e:	f0 1f 00 26 	mcall	8000e404 <_vfprintf_r+0x1854>
8000e372:	e0 81 03 e0 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e376:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e37a:	40 fc       	lddsp	r12,sp[0x3c]
8000e37c:	58 0c       	cp.w	r12,0
8000e37e:	c1 f0       	breq	8000e3bc <_vfprintf_r+0x180c>
8000e380:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e384:	fa c9 f9 48 	sub	r9,sp,-1720
8000e388:	2f e8       	sub	r8,-2
8000e38a:	87 09       	st.w	r3[0x0],r9
8000e38c:	fb 48 06 90 	st.w	sp[1680],r8
8000e390:	30 29       	mov	r9,2
8000e392:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e396:	87 19       	st.w	r3[0x4],r9
8000e398:	2f f8       	sub	r8,-1
8000e39a:	fb 48 06 8c 	st.w	sp[1676],r8
8000e39e:	58 78       	cp.w	r8,7
8000e3a0:	e0 89 00 04 	brgt	8000e3a8 <_vfprintf_r+0x17f8>
8000e3a4:	2f 83       	sub	r3,-8
8000e3a6:	c0 b8       	rjmp	8000e3bc <_vfprintf_r+0x180c>
8000e3a8:	fa ca f9 78 	sub	r10,sp,-1672
8000e3ac:	02 9b       	mov	r11,r1
8000e3ae:	08 9c       	mov	r12,r4
8000e3b0:	f0 1f 00 15 	mcall	8000e404 <_vfprintf_r+0x1854>
8000e3b4:	e0 81 03 bf 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e3b8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e3bc:	40 9b       	lddsp	r11,sp[0x24]
8000e3be:	e0 4b 00 80 	cp.w	r11,128
8000e3c2:	c5 21       	brne	8000e466 <_vfprintf_r+0x18b6>
8000e3c4:	40 8a       	lddsp	r10,sp[0x20]
8000e3c6:	40 39       	lddsp	r9,sp[0xc]
8000e3c8:	12 1a       	sub	r10,r9
8000e3ca:	50 4a       	stdsp	sp[0x10],r10
8000e3cc:	58 0a       	cp.w	r10,0
8000e3ce:	e0 89 00 2c 	brgt	8000e426 <_vfprintf_r+0x1876>
8000e3d2:	c4 a8       	rjmp	8000e466 <_vfprintf_r+0x18b6>
8000e3d4:	2f 09       	sub	r9,-16
8000e3d6:	2f f8       	sub	r8,-1
8000e3d8:	48 ce       	lddpc	lr,8000e408 <_vfprintf_r+0x1858>
8000e3da:	31 0c       	mov	r12,16
8000e3dc:	fb 49 06 90 	st.w	sp[1680],r9
8000e3e0:	87 0e       	st.w	r3[0x0],lr
8000e3e2:	87 1c       	st.w	r3[0x4],r12
8000e3e4:	fb 48 06 8c 	st.w	sp[1676],r8
8000e3e8:	58 78       	cp.w	r8,7
8000e3ea:	e0 89 00 11 	brgt	8000e40c <_vfprintf_r+0x185c>
8000e3ee:	2f 83       	sub	r3,-8
8000e3f0:	c1 88       	rjmp	8000e420 <_vfprintf_r+0x1870>
8000e3f2:	00 00       	add	r0,r0
8000e3f4:	80 00       	ld.sh	r0,r0[0x0]
8000e3f6:	c8 6c       	rcall	8000e502 <_vfprintf_r+0x1952>
8000e3f8:	80 01       	ld.sh	r1,r0[0x0]
8000e3fa:	19 14       	ld.sh	r4,r12++
8000e3fc:	80 00       	ld.sh	r0,r0[0x0]
8000e3fe:	c4 3a       	rjmp	8000e084 <_vfprintf_r+0x14d4>
8000e400:	80 01       	ld.sh	r1,r0[0x0]
8000e402:	24 08       	sub	r8,64
8000e404:	80 00       	ld.sh	r0,r0[0x0]
8000e406:	cb 90       	breq	8000e378 <_vfprintf_r+0x17c8>
8000e408:	80 01       	ld.sh	r1,r0[0x0]
8000e40a:	24 18       	sub	r8,65
8000e40c:	fa ca f9 78 	sub	r10,sp,-1672
8000e410:	02 9b       	mov	r11,r1
8000e412:	08 9c       	mov	r12,r4
8000e414:	f0 1f 00 4c 	mcall	8000e544 <_vfprintf_r+0x1994>
8000e418:	e0 81 03 8d 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e41c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e420:	40 4b       	lddsp	r11,sp[0x10]
8000e422:	21 0b       	sub	r11,16
8000e424:	50 4b       	stdsp	sp[0x10],r11
8000e426:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e42a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e42e:	4c 7a       	lddpc	r10,8000e548 <_vfprintf_r+0x1998>
8000e430:	40 4e       	lddsp	lr,sp[0x10]
8000e432:	59 0e       	cp.w	lr,16
8000e434:	fe 99 ff d0 	brgt	8000e3d4 <_vfprintf_r+0x1824>
8000e438:	1c 09       	add	r9,lr
8000e43a:	2f f8       	sub	r8,-1
8000e43c:	87 0a       	st.w	r3[0x0],r10
8000e43e:	fb 49 06 90 	st.w	sp[1680],r9
8000e442:	87 1e       	st.w	r3[0x4],lr
8000e444:	fb 48 06 8c 	st.w	sp[1676],r8
8000e448:	58 78       	cp.w	r8,7
8000e44a:	e0 89 00 04 	brgt	8000e452 <_vfprintf_r+0x18a2>
8000e44e:	2f 83       	sub	r3,-8
8000e450:	c0 b8       	rjmp	8000e466 <_vfprintf_r+0x18b6>
8000e452:	fa ca f9 78 	sub	r10,sp,-1672
8000e456:	02 9b       	mov	r11,r1
8000e458:	08 9c       	mov	r12,r4
8000e45a:	f0 1f 00 3b 	mcall	8000e544 <_vfprintf_r+0x1994>
8000e45e:	e0 81 03 6a 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e462:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e466:	40 2c       	lddsp	r12,sp[0x8]
8000e468:	04 1c       	sub	r12,r2
8000e46a:	50 2c       	stdsp	sp[0x8],r12
8000e46c:	58 0c       	cp.w	r12,0
8000e46e:	e0 89 00 1f 	brgt	8000e4ac <_vfprintf_r+0x18fc>
8000e472:	c3 d8       	rjmp	8000e4ec <_vfprintf_r+0x193c>
8000e474:	2f 09       	sub	r9,-16
8000e476:	2f f8       	sub	r8,-1
8000e478:	4b 4b       	lddpc	r11,8000e548 <_vfprintf_r+0x1998>
8000e47a:	31 0a       	mov	r10,16
8000e47c:	fb 49 06 90 	st.w	sp[1680],r9
8000e480:	87 0b       	st.w	r3[0x0],r11
8000e482:	87 1a       	st.w	r3[0x4],r10
8000e484:	fb 48 06 8c 	st.w	sp[1676],r8
8000e488:	58 78       	cp.w	r8,7
8000e48a:	e0 89 00 04 	brgt	8000e492 <_vfprintf_r+0x18e2>
8000e48e:	2f 83       	sub	r3,-8
8000e490:	c0 b8       	rjmp	8000e4a6 <_vfprintf_r+0x18f6>
8000e492:	fa ca f9 78 	sub	r10,sp,-1672
8000e496:	02 9b       	mov	r11,r1
8000e498:	08 9c       	mov	r12,r4
8000e49a:	f0 1f 00 2b 	mcall	8000e544 <_vfprintf_r+0x1994>
8000e49e:	e0 81 03 4a 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e4a2:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e4a6:	40 29       	lddsp	r9,sp[0x8]
8000e4a8:	21 09       	sub	r9,16
8000e4aa:	50 29       	stdsp	sp[0x8],r9
8000e4ac:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e4b0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e4b4:	4a 5a       	lddpc	r10,8000e548 <_vfprintf_r+0x1998>
8000e4b6:	40 2e       	lddsp	lr,sp[0x8]
8000e4b8:	59 0e       	cp.w	lr,16
8000e4ba:	fe 99 ff dd 	brgt	8000e474 <_vfprintf_r+0x18c4>
8000e4be:	1c 09       	add	r9,lr
8000e4c0:	2f f8       	sub	r8,-1
8000e4c2:	87 0a       	st.w	r3[0x0],r10
8000e4c4:	fb 49 06 90 	st.w	sp[1680],r9
8000e4c8:	87 1e       	st.w	r3[0x4],lr
8000e4ca:	fb 48 06 8c 	st.w	sp[1676],r8
8000e4ce:	58 78       	cp.w	r8,7
8000e4d0:	e0 89 00 04 	brgt	8000e4d8 <_vfprintf_r+0x1928>
8000e4d4:	2f 83       	sub	r3,-8
8000e4d6:	c0 b8       	rjmp	8000e4ec <_vfprintf_r+0x193c>
8000e4d8:	fa ca f9 78 	sub	r10,sp,-1672
8000e4dc:	02 9b       	mov	r11,r1
8000e4de:	08 9c       	mov	r12,r4
8000e4e0:	f0 1f 00 19 	mcall	8000e544 <_vfprintf_r+0x1994>
8000e4e4:	e0 81 03 27 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e4e8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e4ec:	ed b5 00 08 	bld	r5,0x8
8000e4f0:	c0 b0       	breq	8000e506 <_vfprintf_r+0x1956>
8000e4f2:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e4f6:	87 12       	st.w	r3[0x4],r2
8000e4f8:	87 06       	st.w	r3[0x0],r6
8000e4fa:	f0 02 00 02 	add	r2,r8,r2
8000e4fe:	fb 42 06 90 	st.w	sp[1680],r2
8000e502:	e0 8f 01 db 	bral	8000e8b8 <_vfprintf_r+0x1d08>
8000e506:	e0 40 00 65 	cp.w	r0,101
8000e50a:	e0 8a 01 dd 	brle	8000e8c4 <_vfprintf_r+0x1d14>
8000e50e:	30 08       	mov	r8,0
8000e510:	30 09       	mov	r9,0
8000e512:	40 5b       	lddsp	r11,sp[0x14]
8000e514:	40 7a       	lddsp	r10,sp[0x1c]
8000e516:	f0 1f 00 0e 	mcall	8000e54c <_vfprintf_r+0x199c>
8000e51a:	c7 e0       	breq	8000e616 <_vfprintf_r+0x1a66>
8000e51c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e520:	48 c9       	lddpc	r9,8000e550 <_vfprintf_r+0x19a0>
8000e522:	2f f8       	sub	r8,-1
8000e524:	87 09       	st.w	r3[0x0],r9
8000e526:	fb 48 06 90 	st.w	sp[1680],r8
8000e52a:	30 19       	mov	r9,1
8000e52c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e530:	87 19       	st.w	r3[0x4],r9
8000e532:	2f f8       	sub	r8,-1
8000e534:	fb 48 06 8c 	st.w	sp[1676],r8
8000e538:	58 78       	cp.w	r8,7
8000e53a:	e0 89 00 0d 	brgt	8000e554 <_vfprintf_r+0x19a4>
8000e53e:	2f 83       	sub	r3,-8
8000e540:	c1 48       	rjmp	8000e568 <_vfprintf_r+0x19b8>
8000e542:	00 00       	add	r0,r0
8000e544:	80 00       	ld.sh	r0,r0[0x0]
8000e546:	cb 90       	breq	8000e4b8 <_vfprintf_r+0x1908>
8000e548:	80 01       	ld.sh	r1,r0[0x0]
8000e54a:	24 18       	sub	r8,65
8000e54c:	80 01       	ld.sh	r1,r0[0x0]
8000e54e:	15 06       	ld.w	r6,r10++
8000e550:	80 01       	ld.sh	r1,r0[0x0]
8000e552:	24 04       	sub	r4,64
8000e554:	fa ca f9 78 	sub	r10,sp,-1672
8000e558:	02 9b       	mov	r11,r1
8000e55a:	08 9c       	mov	r12,r4
8000e55c:	f0 1f 00 78 	mcall	8000e73c <_vfprintf_r+0x1b8c>
8000e560:	e0 81 02 e9 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e564:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e568:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000e56c:	40 6c       	lddsp	r12,sp[0x18]
8000e56e:	18 38       	cp.w	r8,r12
8000e570:	c0 55       	brlt	8000e57a <_vfprintf_r+0x19ca>
8000e572:	ed b5 00 00 	bld	r5,0x0
8000e576:	e0 81 02 6d 	brne	8000ea50 <_vfprintf_r+0x1ea0>
8000e57a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e57e:	2f f8       	sub	r8,-1
8000e580:	40 cb       	lddsp	r11,sp[0x30]
8000e582:	fb 48 06 90 	st.w	sp[1680],r8
8000e586:	30 19       	mov	r9,1
8000e588:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e58c:	87 0b       	st.w	r3[0x0],r11
8000e58e:	2f f8       	sub	r8,-1
8000e590:	87 19       	st.w	r3[0x4],r9
8000e592:	fb 48 06 8c 	st.w	sp[1676],r8
8000e596:	58 78       	cp.w	r8,7
8000e598:	e0 89 00 04 	brgt	8000e5a0 <_vfprintf_r+0x19f0>
8000e59c:	2f 83       	sub	r3,-8
8000e59e:	c0 b8       	rjmp	8000e5b4 <_vfprintf_r+0x1a04>
8000e5a0:	fa ca f9 78 	sub	r10,sp,-1672
8000e5a4:	02 9b       	mov	r11,r1
8000e5a6:	08 9c       	mov	r12,r4
8000e5a8:	f0 1f 00 65 	mcall	8000e73c <_vfprintf_r+0x1b8c>
8000e5ac:	e0 81 02 c3 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e5b0:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e5b4:	40 66       	lddsp	r6,sp[0x18]
8000e5b6:	20 16       	sub	r6,1
8000e5b8:	58 06       	cp.w	r6,0
8000e5ba:	e0 89 00 1d 	brgt	8000e5f4 <_vfprintf_r+0x1a44>
8000e5be:	e0 8f 02 49 	bral	8000ea50 <_vfprintf_r+0x1ea0>
8000e5c2:	2f 09       	sub	r9,-16
8000e5c4:	2f f8       	sub	r8,-1
8000e5c6:	fb 49 06 90 	st.w	sp[1680],r9
8000e5ca:	87 02       	st.w	r3[0x0],r2
8000e5cc:	87 10       	st.w	r3[0x4],r0
8000e5ce:	fb 48 06 8c 	st.w	sp[1676],r8
8000e5d2:	58 78       	cp.w	r8,7
8000e5d4:	e0 89 00 04 	brgt	8000e5dc <_vfprintf_r+0x1a2c>
8000e5d8:	2f 83       	sub	r3,-8
8000e5da:	c0 b8       	rjmp	8000e5f0 <_vfprintf_r+0x1a40>
8000e5dc:	fa ca f9 78 	sub	r10,sp,-1672
8000e5e0:	02 9b       	mov	r11,r1
8000e5e2:	08 9c       	mov	r12,r4
8000e5e4:	f0 1f 00 56 	mcall	8000e73c <_vfprintf_r+0x1b8c>
8000e5e8:	e0 81 02 a5 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e5ec:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e5f0:	21 06       	sub	r6,16
8000e5f2:	c0 38       	rjmp	8000e5f8 <_vfprintf_r+0x1a48>
8000e5f4:	4d 32       	lddpc	r2,8000e740 <_vfprintf_r+0x1b90>
8000e5f6:	31 00       	mov	r0,16
8000e5f8:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e5fc:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e600:	4d 0a       	lddpc	r10,8000e740 <_vfprintf_r+0x1b90>
8000e602:	59 06       	cp.w	r6,16
8000e604:	fe 99 ff df 	brgt	8000e5c2 <_vfprintf_r+0x1a12>
8000e608:	0c 09       	add	r9,r6
8000e60a:	87 0a       	st.w	r3[0x0],r10
8000e60c:	fb 49 06 90 	st.w	sp[1680],r9
8000e610:	2f f8       	sub	r8,-1
8000e612:	87 16       	st.w	r3[0x4],r6
8000e614:	c5 59       	rjmp	8000e8be <_vfprintf_r+0x1d0e>
8000e616:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000e61a:	58 0a       	cp.w	r10,0
8000e61c:	e0 89 00 96 	brgt	8000e748 <_vfprintf_r+0x1b98>
8000e620:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e624:	4c 89       	lddpc	r9,8000e744 <_vfprintf_r+0x1b94>
8000e626:	2f f8       	sub	r8,-1
8000e628:	87 09       	st.w	r3[0x0],r9
8000e62a:	fb 48 06 90 	st.w	sp[1680],r8
8000e62e:	30 19       	mov	r9,1
8000e630:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e634:	87 19       	st.w	r3[0x4],r9
8000e636:	2f f8       	sub	r8,-1
8000e638:	fb 48 06 8c 	st.w	sp[1676],r8
8000e63c:	58 78       	cp.w	r8,7
8000e63e:	e0 89 00 04 	brgt	8000e646 <_vfprintf_r+0x1a96>
8000e642:	2f 83       	sub	r3,-8
8000e644:	c0 b8       	rjmp	8000e65a <_vfprintf_r+0x1aaa>
8000e646:	fa ca f9 78 	sub	r10,sp,-1672
8000e64a:	02 9b       	mov	r11,r1
8000e64c:	08 9c       	mov	r12,r4
8000e64e:	f0 1f 00 3c 	mcall	8000e73c <_vfprintf_r+0x1b8c>
8000e652:	e0 81 02 70 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e656:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e65a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000e65e:	58 08       	cp.w	r8,0
8000e660:	c0 81       	brne	8000e670 <_vfprintf_r+0x1ac0>
8000e662:	40 6a       	lddsp	r10,sp[0x18]
8000e664:	58 0a       	cp.w	r10,0
8000e666:	c0 51       	brne	8000e670 <_vfprintf_r+0x1ac0>
8000e668:	ed b5 00 00 	bld	r5,0x0
8000e66c:	e0 81 01 f2 	brne	8000ea50 <_vfprintf_r+0x1ea0>
8000e670:	40 c9       	lddsp	r9,sp[0x30]
8000e672:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e676:	2f f8       	sub	r8,-1
8000e678:	87 09       	st.w	r3[0x0],r9
8000e67a:	fb 48 06 90 	st.w	sp[1680],r8
8000e67e:	30 19       	mov	r9,1
8000e680:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e684:	87 19       	st.w	r3[0x4],r9
8000e686:	2f f8       	sub	r8,-1
8000e688:	fb 48 06 8c 	st.w	sp[1676],r8
8000e68c:	58 78       	cp.w	r8,7
8000e68e:	e0 89 00 04 	brgt	8000e696 <_vfprintf_r+0x1ae6>
8000e692:	2f 83       	sub	r3,-8
8000e694:	c0 b8       	rjmp	8000e6aa <_vfprintf_r+0x1afa>
8000e696:	fa ca f9 78 	sub	r10,sp,-1672
8000e69a:	02 9b       	mov	r11,r1
8000e69c:	08 9c       	mov	r12,r4
8000e69e:	f0 1f 00 28 	mcall	8000e73c <_vfprintf_r+0x1b8c>
8000e6a2:	e0 81 02 48 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e6a6:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e6aa:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000e6ae:	5c 32       	neg	r2
8000e6b0:	58 02       	cp.w	r2,0
8000e6b2:	e0 89 00 1d 	brgt	8000e6ec <_vfprintf_r+0x1b3c>
8000e6b6:	c3 b8       	rjmp	8000e72c <_vfprintf_r+0x1b7c>
8000e6b8:	2f 09       	sub	r9,-16
8000e6ba:	2f f8       	sub	r8,-1
8000e6bc:	31 0e       	mov	lr,16
8000e6be:	fb 49 06 90 	st.w	sp[1680],r9
8000e6c2:	87 00       	st.w	r3[0x0],r0
8000e6c4:	87 1e       	st.w	r3[0x4],lr
8000e6c6:	fb 48 06 8c 	st.w	sp[1676],r8
8000e6ca:	58 78       	cp.w	r8,7
8000e6cc:	e0 89 00 04 	brgt	8000e6d4 <_vfprintf_r+0x1b24>
8000e6d0:	2f 83       	sub	r3,-8
8000e6d2:	c0 b8       	rjmp	8000e6e8 <_vfprintf_r+0x1b38>
8000e6d4:	fa ca f9 78 	sub	r10,sp,-1672
8000e6d8:	02 9b       	mov	r11,r1
8000e6da:	08 9c       	mov	r12,r4
8000e6dc:	f0 1f 00 18 	mcall	8000e73c <_vfprintf_r+0x1b8c>
8000e6e0:	e0 81 02 29 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e6e4:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e6e8:	21 02       	sub	r2,16
8000e6ea:	c0 28       	rjmp	8000e6ee <_vfprintf_r+0x1b3e>
8000e6ec:	49 50       	lddpc	r0,8000e740 <_vfprintf_r+0x1b90>
8000e6ee:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e6f2:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e6f6:	49 3a       	lddpc	r10,8000e740 <_vfprintf_r+0x1b90>
8000e6f8:	59 02       	cp.w	r2,16
8000e6fa:	fe 99 ff df 	brgt	8000e6b8 <_vfprintf_r+0x1b08>
8000e6fe:	04 09       	add	r9,r2
8000e700:	2f f8       	sub	r8,-1
8000e702:	87 0a       	st.w	r3[0x0],r10
8000e704:	fb 49 06 90 	st.w	sp[1680],r9
8000e708:	87 12       	st.w	r3[0x4],r2
8000e70a:	fb 48 06 8c 	st.w	sp[1676],r8
8000e70e:	58 78       	cp.w	r8,7
8000e710:	e0 89 00 04 	brgt	8000e718 <_vfprintf_r+0x1b68>
8000e714:	2f 83       	sub	r3,-8
8000e716:	c0 b8       	rjmp	8000e72c <_vfprintf_r+0x1b7c>
8000e718:	fa ca f9 78 	sub	r10,sp,-1672
8000e71c:	02 9b       	mov	r11,r1
8000e71e:	08 9c       	mov	r12,r4
8000e720:	f0 1f 00 07 	mcall	8000e73c <_vfprintf_r+0x1b8c>
8000e724:	e0 81 02 07 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e728:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e72c:	40 6c       	lddsp	r12,sp[0x18]
8000e72e:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e732:	87 06       	st.w	r3[0x0],r6
8000e734:	87 1c       	st.w	r3[0x4],r12
8000e736:	18 08       	add	r8,r12
8000e738:	cb e8       	rjmp	8000e8b4 <_vfprintf_r+0x1d04>
8000e73a:	00 00       	add	r0,r0
8000e73c:	80 00       	ld.sh	r0,r0[0x0]
8000e73e:	cb 90       	breq	8000e6b0 <_vfprintf_r+0x1b00>
8000e740:	80 01       	ld.sh	r1,r0[0x0]
8000e742:	24 18       	sub	r8,65
8000e744:	80 01       	ld.sh	r1,r0[0x0]
8000e746:	24 04       	sub	r4,64
8000e748:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e74c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e750:	40 6b       	lddsp	r11,sp[0x18]
8000e752:	16 3a       	cp.w	r10,r11
8000e754:	c6 d5       	brlt	8000e82e <_vfprintf_r+0x1c7e>
8000e756:	16 09       	add	r9,r11
8000e758:	2f f8       	sub	r8,-1
8000e75a:	87 06       	st.w	r3[0x0],r6
8000e75c:	fb 49 06 90 	st.w	sp[1680],r9
8000e760:	87 1b       	st.w	r3[0x4],r11
8000e762:	fb 48 06 8c 	st.w	sp[1676],r8
8000e766:	58 78       	cp.w	r8,7
8000e768:	e0 89 00 04 	brgt	8000e770 <_vfprintf_r+0x1bc0>
8000e76c:	2f 83       	sub	r3,-8
8000e76e:	c0 b8       	rjmp	8000e784 <_vfprintf_r+0x1bd4>
8000e770:	fa ca f9 78 	sub	r10,sp,-1672
8000e774:	02 9b       	mov	r11,r1
8000e776:	08 9c       	mov	r12,r4
8000e778:	f0 1f 00 6f 	mcall	8000e934 <_vfprintf_r+0x1d84>
8000e77c:	e0 81 01 db 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e780:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e784:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000e788:	40 6a       	lddsp	r10,sp[0x18]
8000e78a:	14 16       	sub	r6,r10
8000e78c:	58 06       	cp.w	r6,0
8000e78e:	e0 89 00 1c 	brgt	8000e7c6 <_vfprintf_r+0x1c16>
8000e792:	c3 b8       	rjmp	8000e808 <_vfprintf_r+0x1c58>
8000e794:	2f 09       	sub	r9,-16
8000e796:	2f f8       	sub	r8,-1
8000e798:	fb 49 06 90 	st.w	sp[1680],r9
8000e79c:	87 02       	st.w	r3[0x0],r2
8000e79e:	87 10       	st.w	r3[0x4],r0
8000e7a0:	fb 48 06 8c 	st.w	sp[1676],r8
8000e7a4:	58 78       	cp.w	r8,7
8000e7a6:	e0 89 00 04 	brgt	8000e7ae <_vfprintf_r+0x1bfe>
8000e7aa:	2f 83       	sub	r3,-8
8000e7ac:	c0 b8       	rjmp	8000e7c2 <_vfprintf_r+0x1c12>
8000e7ae:	fa ca f9 78 	sub	r10,sp,-1672
8000e7b2:	02 9b       	mov	r11,r1
8000e7b4:	08 9c       	mov	r12,r4
8000e7b6:	f0 1f 00 60 	mcall	8000e934 <_vfprintf_r+0x1d84>
8000e7ba:	e0 81 01 bc 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e7be:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e7c2:	21 06       	sub	r6,16
8000e7c4:	c0 38       	rjmp	8000e7ca <_vfprintf_r+0x1c1a>
8000e7c6:	4d d2       	lddpc	r2,8000e938 <_vfprintf_r+0x1d88>
8000e7c8:	31 00       	mov	r0,16
8000e7ca:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e7ce:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e7d2:	4d aa       	lddpc	r10,8000e938 <_vfprintf_r+0x1d88>
8000e7d4:	59 06       	cp.w	r6,16
8000e7d6:	fe 99 ff df 	brgt	8000e794 <_vfprintf_r+0x1be4>
8000e7da:	0c 09       	add	r9,r6
8000e7dc:	2f f8       	sub	r8,-1
8000e7de:	87 0a       	st.w	r3[0x0],r10
8000e7e0:	fb 49 06 90 	st.w	sp[1680],r9
8000e7e4:	87 16       	st.w	r3[0x4],r6
8000e7e6:	fb 48 06 8c 	st.w	sp[1676],r8
8000e7ea:	58 78       	cp.w	r8,7
8000e7ec:	e0 89 00 04 	brgt	8000e7f4 <_vfprintf_r+0x1c44>
8000e7f0:	2f 83       	sub	r3,-8
8000e7f2:	c0 b8       	rjmp	8000e808 <_vfprintf_r+0x1c58>
8000e7f4:	fa ca f9 78 	sub	r10,sp,-1672
8000e7f8:	02 9b       	mov	r11,r1
8000e7fa:	08 9c       	mov	r12,r4
8000e7fc:	f0 1f 00 4e 	mcall	8000e934 <_vfprintf_r+0x1d84>
8000e800:	e0 81 01 99 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e804:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e808:	ed b5 00 00 	bld	r5,0x0
8000e80c:	e0 81 01 22 	brne	8000ea50 <_vfprintf_r+0x1ea0>
8000e810:	40 c9       	lddsp	r9,sp[0x30]
8000e812:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e816:	2f f8       	sub	r8,-1
8000e818:	87 09       	st.w	r3[0x0],r9
8000e81a:	fb 48 06 90 	st.w	sp[1680],r8
8000e81e:	30 19       	mov	r9,1
8000e820:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e824:	87 19       	st.w	r3[0x4],r9
8000e826:	2f f8       	sub	r8,-1
8000e828:	fb 48 06 8c 	st.w	sp[1676],r8
8000e82c:	c0 49       	rjmp	8000ea34 <_vfprintf_r+0x1e84>
8000e82e:	14 09       	add	r9,r10
8000e830:	2f f8       	sub	r8,-1
8000e832:	fb 49 06 90 	st.w	sp[1680],r9
8000e836:	87 06       	st.w	r3[0x0],r6
8000e838:	87 1a       	st.w	r3[0x4],r10
8000e83a:	fb 48 06 8c 	st.w	sp[1676],r8
8000e83e:	58 78       	cp.w	r8,7
8000e840:	e0 89 00 04 	brgt	8000e848 <_vfprintf_r+0x1c98>
8000e844:	2f 83       	sub	r3,-8
8000e846:	c0 b8       	rjmp	8000e85c <_vfprintf_r+0x1cac>
8000e848:	fa ca f9 78 	sub	r10,sp,-1672
8000e84c:	02 9b       	mov	r11,r1
8000e84e:	08 9c       	mov	r12,r4
8000e850:	f0 1f 00 39 	mcall	8000e934 <_vfprintf_r+0x1d84>
8000e854:	e0 81 01 6f 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e858:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e85c:	40 c8       	lddsp	r8,sp[0x30]
8000e85e:	87 08       	st.w	r3[0x0],r8
8000e860:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e864:	2f f8       	sub	r8,-1
8000e866:	30 19       	mov	r9,1
8000e868:	fb 48 06 90 	st.w	sp[1680],r8
8000e86c:	87 19       	st.w	r3[0x4],r9
8000e86e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e872:	2f f8       	sub	r8,-1
8000e874:	fb 48 06 8c 	st.w	sp[1676],r8
8000e878:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000e87c:	58 78       	cp.w	r8,7
8000e87e:	e0 89 00 04 	brgt	8000e886 <_vfprintf_r+0x1cd6>
8000e882:	2f 83       	sub	r3,-8
8000e884:	c0 b8       	rjmp	8000e89a <_vfprintf_r+0x1cea>
8000e886:	fa ca f9 78 	sub	r10,sp,-1672
8000e88a:	02 9b       	mov	r11,r1
8000e88c:	08 9c       	mov	r12,r4
8000e88e:	f0 1f 00 2a 	mcall	8000e934 <_vfprintf_r+0x1d84>
8000e892:	e0 81 01 50 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e896:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e89a:	04 06       	add	r6,r2
8000e89c:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000e8a0:	87 06       	st.w	r3[0x0],r6
8000e8a2:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e8a6:	40 66       	lddsp	r6,sp[0x18]
8000e8a8:	40 6e       	lddsp	lr,sp[0x18]
8000e8aa:	10 16       	sub	r6,r8
8000e8ac:	f2 08 01 08 	sub	r8,r9,r8
8000e8b0:	87 16       	st.w	r3[0x4],r6
8000e8b2:	1c 08       	add	r8,lr
8000e8b4:	fb 48 06 90 	st.w	sp[1680],r8
8000e8b8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e8bc:	2f f8       	sub	r8,-1
8000e8be:	fb 48 06 8c 	st.w	sp[1676],r8
8000e8c2:	cb 98       	rjmp	8000ea34 <_vfprintf_r+0x1e84>
8000e8c4:	40 6c       	lddsp	r12,sp[0x18]
8000e8c6:	58 1c       	cp.w	r12,1
8000e8c8:	e0 89 00 06 	brgt	8000e8d4 <_vfprintf_r+0x1d24>
8000e8cc:	ed b5 00 00 	bld	r5,0x0
8000e8d0:	e0 81 00 87 	brne	8000e9de <_vfprintf_r+0x1e2e>
8000e8d4:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e8d8:	2f f8       	sub	r8,-1
8000e8da:	30 19       	mov	r9,1
8000e8dc:	fb 48 06 90 	st.w	sp[1680],r8
8000e8e0:	87 06       	st.w	r3[0x0],r6
8000e8e2:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e8e6:	87 19       	st.w	r3[0x4],r9
8000e8e8:	2f f8       	sub	r8,-1
8000e8ea:	fb 48 06 8c 	st.w	sp[1676],r8
8000e8ee:	58 78       	cp.w	r8,7
8000e8f0:	e0 89 00 04 	brgt	8000e8f8 <_vfprintf_r+0x1d48>
8000e8f4:	2f 83       	sub	r3,-8
8000e8f6:	c0 b8       	rjmp	8000e90c <_vfprintf_r+0x1d5c>
8000e8f8:	fa ca f9 78 	sub	r10,sp,-1672
8000e8fc:	02 9b       	mov	r11,r1
8000e8fe:	08 9c       	mov	r12,r4
8000e900:	f0 1f 00 0d 	mcall	8000e934 <_vfprintf_r+0x1d84>
8000e904:	e0 81 01 17 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e908:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e90c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e910:	2f f8       	sub	r8,-1
8000e912:	40 cb       	lddsp	r11,sp[0x30]
8000e914:	fb 48 06 90 	st.w	sp[1680],r8
8000e918:	30 19       	mov	r9,1
8000e91a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e91e:	87 0b       	st.w	r3[0x0],r11
8000e920:	2f f8       	sub	r8,-1
8000e922:	87 19       	st.w	r3[0x4],r9
8000e924:	fb 48 06 8c 	st.w	sp[1676],r8
8000e928:	58 78       	cp.w	r8,7
8000e92a:	e0 89 00 09 	brgt	8000e93c <_vfprintf_r+0x1d8c>
8000e92e:	2f 83       	sub	r3,-8
8000e930:	c1 08       	rjmp	8000e950 <_vfprintf_r+0x1da0>
8000e932:	00 00       	add	r0,r0
8000e934:	80 00       	ld.sh	r0,r0[0x0]
8000e936:	cb 90       	breq	8000e8a8 <_vfprintf_r+0x1cf8>
8000e938:	80 01       	ld.sh	r1,r0[0x0]
8000e93a:	24 18       	sub	r8,65
8000e93c:	fa ca f9 78 	sub	r10,sp,-1672
8000e940:	02 9b       	mov	r11,r1
8000e942:	08 9c       	mov	r12,r4
8000e944:	f0 1f 00 6f 	mcall	8000eb00 <_vfprintf_r+0x1f50>
8000e948:	e0 81 00 f5 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e94c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e950:	30 08       	mov	r8,0
8000e952:	30 09       	mov	r9,0
8000e954:	40 5b       	lddsp	r11,sp[0x14]
8000e956:	40 7a       	lddsp	r10,sp[0x1c]
8000e958:	f0 1f 00 6b 	mcall	8000eb04 <_vfprintf_r+0x1f54>
8000e95c:	40 68       	lddsp	r8,sp[0x18]
8000e95e:	20 18       	sub	r8,1
8000e960:	58 0c       	cp.w	r12,0
8000e962:	c0 d1       	brne	8000e97c <_vfprintf_r+0x1dcc>
8000e964:	2f f6       	sub	r6,-1
8000e966:	87 18       	st.w	r3[0x4],r8
8000e968:	87 06       	st.w	r3[0x0],r6
8000e96a:	fa f6 06 90 	ld.w	r6,sp[1680]
8000e96e:	10 06       	add	r6,r8
8000e970:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e974:	fb 46 06 90 	st.w	sp[1680],r6
8000e978:	2f f8       	sub	r8,-1
8000e97a:	c2 f8       	rjmp	8000e9d8 <_vfprintf_r+0x1e28>
8000e97c:	10 96       	mov	r6,r8
8000e97e:	58 08       	cp.w	r8,0
8000e980:	e0 89 00 1c 	brgt	8000e9b8 <_vfprintf_r+0x1e08>
8000e984:	c4 98       	rjmp	8000ea16 <_vfprintf_r+0x1e66>
8000e986:	2f 09       	sub	r9,-16
8000e988:	2f f8       	sub	r8,-1
8000e98a:	fb 49 06 90 	st.w	sp[1680],r9
8000e98e:	87 02       	st.w	r3[0x0],r2
8000e990:	87 10       	st.w	r3[0x4],r0
8000e992:	fb 48 06 8c 	st.w	sp[1676],r8
8000e996:	58 78       	cp.w	r8,7
8000e998:	e0 89 00 04 	brgt	8000e9a0 <_vfprintf_r+0x1df0>
8000e99c:	2f 83       	sub	r3,-8
8000e99e:	c0 b8       	rjmp	8000e9b4 <_vfprintf_r+0x1e04>
8000e9a0:	fa ca f9 78 	sub	r10,sp,-1672
8000e9a4:	02 9b       	mov	r11,r1
8000e9a6:	08 9c       	mov	r12,r4
8000e9a8:	f0 1f 00 56 	mcall	8000eb00 <_vfprintf_r+0x1f50>
8000e9ac:	e0 81 00 c3 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000e9b0:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e9b4:	21 06       	sub	r6,16
8000e9b6:	c0 38       	rjmp	8000e9bc <_vfprintf_r+0x1e0c>
8000e9b8:	4d 42       	lddpc	r2,8000eb08 <_vfprintf_r+0x1f58>
8000e9ba:	31 00       	mov	r0,16
8000e9bc:	fa f9 06 90 	ld.w	r9,sp[1680]
8000e9c0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e9c4:	4d 1a       	lddpc	r10,8000eb08 <_vfprintf_r+0x1f58>
8000e9c6:	59 06       	cp.w	r6,16
8000e9c8:	fe 99 ff df 	brgt	8000e986 <_vfprintf_r+0x1dd6>
8000e9cc:	0c 09       	add	r9,r6
8000e9ce:	87 0a       	st.w	r3[0x0],r10
8000e9d0:	fb 49 06 90 	st.w	sp[1680],r9
8000e9d4:	2f f8       	sub	r8,-1
8000e9d6:	87 16       	st.w	r3[0x4],r6
8000e9d8:	fb 48 06 8c 	st.w	sp[1676],r8
8000e9dc:	c0 e8       	rjmp	8000e9f8 <_vfprintf_r+0x1e48>
8000e9de:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e9e2:	2f f8       	sub	r8,-1
8000e9e4:	30 19       	mov	r9,1
8000e9e6:	fb 48 06 90 	st.w	sp[1680],r8
8000e9ea:	87 06       	st.w	r3[0x0],r6
8000e9ec:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e9f0:	87 19       	st.w	r3[0x4],r9
8000e9f2:	2f f8       	sub	r8,-1
8000e9f4:	fb 48 06 8c 	st.w	sp[1676],r8
8000e9f8:	58 78       	cp.w	r8,7
8000e9fa:	e0 89 00 04 	brgt	8000ea02 <_vfprintf_r+0x1e52>
8000e9fe:	2f 83       	sub	r3,-8
8000ea00:	c0 b8       	rjmp	8000ea16 <_vfprintf_r+0x1e66>
8000ea02:	fa ca f9 78 	sub	r10,sp,-1672
8000ea06:	02 9b       	mov	r11,r1
8000ea08:	08 9c       	mov	r12,r4
8000ea0a:	f0 1f 00 3e 	mcall	8000eb00 <_vfprintf_r+0x1f50>
8000ea0e:	e0 81 00 92 	brne	8000eb32 <_vfprintf_r+0x1f82>
8000ea12:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ea16:	40 ea       	lddsp	r10,sp[0x38]
8000ea18:	fa f8 06 90 	ld.w	r8,sp[1680]
8000ea1c:	14 08       	add	r8,r10
8000ea1e:	fa c9 f9 64 	sub	r9,sp,-1692
8000ea22:	fb 48 06 90 	st.w	sp[1680],r8
8000ea26:	87 1a       	st.w	r3[0x4],r10
8000ea28:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000ea2c:	87 09       	st.w	r3[0x0],r9
8000ea2e:	2f f8       	sub	r8,-1
8000ea30:	fb 48 06 8c 	st.w	sp[1676],r8
8000ea34:	58 78       	cp.w	r8,7
8000ea36:	e0 89 00 04 	brgt	8000ea3e <_vfprintf_r+0x1e8e>
8000ea3a:	2f 83       	sub	r3,-8
8000ea3c:	c0 a8       	rjmp	8000ea50 <_vfprintf_r+0x1ea0>
8000ea3e:	fa ca f9 78 	sub	r10,sp,-1672
8000ea42:	02 9b       	mov	r11,r1
8000ea44:	08 9c       	mov	r12,r4
8000ea46:	f0 1f 00 2f 	mcall	8000eb00 <_vfprintf_r+0x1f50>
8000ea4a:	c7 41       	brne	8000eb32 <_vfprintf_r+0x1f82>
8000ea4c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ea50:	e2 15 00 04 	andl	r5,0x4,COH
8000ea54:	c3 d0       	breq	8000eace <_vfprintf_r+0x1f1e>
8000ea56:	40 86       	lddsp	r6,sp[0x20]
8000ea58:	40 39       	lddsp	r9,sp[0xc]
8000ea5a:	12 16       	sub	r6,r9
8000ea5c:	58 06       	cp.w	r6,0
8000ea5e:	e0 89 00 1a 	brgt	8000ea92 <_vfprintf_r+0x1ee2>
8000ea62:	c3 68       	rjmp	8000eace <_vfprintf_r+0x1f1e>
8000ea64:	2f 09       	sub	r9,-16
8000ea66:	2f f8       	sub	r8,-1
8000ea68:	fb 49 06 90 	st.w	sp[1680],r9
8000ea6c:	87 05       	st.w	r3[0x0],r5
8000ea6e:	87 12       	st.w	r3[0x4],r2
8000ea70:	fb 48 06 8c 	st.w	sp[1676],r8
8000ea74:	58 78       	cp.w	r8,7
8000ea76:	e0 89 00 04 	brgt	8000ea7e <_vfprintf_r+0x1ece>
8000ea7a:	2f 83       	sub	r3,-8
8000ea7c:	c0 98       	rjmp	8000ea8e <_vfprintf_r+0x1ede>
8000ea7e:	00 9a       	mov	r10,r0
8000ea80:	02 9b       	mov	r11,r1
8000ea82:	08 9c       	mov	r12,r4
8000ea84:	f0 1f 00 1f 	mcall	8000eb00 <_vfprintf_r+0x1f50>
8000ea88:	c5 51       	brne	8000eb32 <_vfprintf_r+0x1f82>
8000ea8a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000ea8e:	21 06       	sub	r6,16
8000ea90:	c0 58       	rjmp	8000ea9a <_vfprintf_r+0x1eea>
8000ea92:	49 f5       	lddpc	r5,8000eb0c <_vfprintf_r+0x1f5c>
8000ea94:	31 02       	mov	r2,16
8000ea96:	fa c0 f9 78 	sub	r0,sp,-1672
8000ea9a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000ea9e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000eaa2:	49 ba       	lddpc	r10,8000eb0c <_vfprintf_r+0x1f5c>
8000eaa4:	59 06       	cp.w	r6,16
8000eaa6:	fe 99 ff df 	brgt	8000ea64 <_vfprintf_r+0x1eb4>
8000eaaa:	0c 09       	add	r9,r6
8000eaac:	2f f8       	sub	r8,-1
8000eaae:	87 0a       	st.w	r3[0x0],r10
8000eab0:	87 16       	st.w	r3[0x4],r6
8000eab2:	fb 49 06 90 	st.w	sp[1680],r9
8000eab6:	fb 48 06 8c 	st.w	sp[1676],r8
8000eaba:	58 78       	cp.w	r8,7
8000eabc:	e0 8a 00 09 	brle	8000eace <_vfprintf_r+0x1f1e>
8000eac0:	fa ca f9 78 	sub	r10,sp,-1672
8000eac4:	02 9b       	mov	r11,r1
8000eac6:	08 9c       	mov	r12,r4
8000eac8:	f0 1f 00 0e 	mcall	8000eb00 <_vfprintf_r+0x1f50>
8000eacc:	c3 31       	brne	8000eb32 <_vfprintf_r+0x1f82>
8000eace:	40 bc       	lddsp	r12,sp[0x2c]
8000ead0:	40 36       	lddsp	r6,sp[0xc]
8000ead2:	40 8e       	lddsp	lr,sp[0x20]
8000ead4:	ec 0e 0c 48 	max	r8,r6,lr
8000ead8:	10 0c       	add	r12,r8
8000eada:	50 bc       	stdsp	sp[0x2c],r12
8000eadc:	fa f8 06 90 	ld.w	r8,sp[1680]
8000eae0:	58 08       	cp.w	r8,0
8000eae2:	c0 80       	breq	8000eaf2 <_vfprintf_r+0x1f42>
8000eae4:	fa ca f9 78 	sub	r10,sp,-1672
8000eae8:	02 9b       	mov	r11,r1
8000eaea:	08 9c       	mov	r12,r4
8000eaec:	f0 1f 00 05 	mcall	8000eb00 <_vfprintf_r+0x1f50>
8000eaf0:	c2 11       	brne	8000eb32 <_vfprintf_r+0x1f82>
8000eaf2:	30 0b       	mov	r11,0
8000eaf4:	fa c3 f9 e0 	sub	r3,sp,-1568
8000eaf8:	fb 4b 06 8c 	st.w	sp[1676],r11
8000eafc:	fe 9f f0 e6 	bral	8000ccc8 <_vfprintf_r+0x118>
8000eb00:	80 00       	ld.sh	r0,r0[0x0]
8000eb02:	cb 90       	breq	8000ea74 <_vfprintf_r+0x1ec4>
8000eb04:	80 01       	ld.sh	r1,r0[0x0]
8000eb06:	15 06       	ld.w	r6,r10++
8000eb08:	80 01       	ld.sh	r1,r0[0x0]
8000eb0a:	24 18       	sub	r8,65
8000eb0c:	80 01       	ld.sh	r1,r0[0x0]
8000eb0e:	24 08       	sub	r8,64
8000eb10:	08 95       	mov	r5,r4
8000eb12:	fa f8 06 90 	ld.w	r8,sp[1680]
8000eb16:	58 08       	cp.w	r8,0
8000eb18:	c0 80       	breq	8000eb28 <_vfprintf_r+0x1f78>
8000eb1a:	08 9c       	mov	r12,r4
8000eb1c:	fa ca f9 78 	sub	r10,sp,-1672
8000eb20:	02 9b       	mov	r11,r1
8000eb22:	f0 1f 00 0a 	mcall	8000eb48 <_vfprintf_r+0x1f98>
8000eb26:	c0 61       	brne	8000eb32 <_vfprintf_r+0x1f82>
8000eb28:	30 08       	mov	r8,0
8000eb2a:	fb 48 06 8c 	st.w	sp[1676],r8
8000eb2e:	c0 28       	rjmp	8000eb32 <_vfprintf_r+0x1f82>
8000eb30:	40 41       	lddsp	r1,sp[0x10]
8000eb32:	82 68       	ld.sh	r8,r1[0xc]
8000eb34:	ed b8 00 06 	bld	r8,0x6
8000eb38:	c0 31       	brne	8000eb3e <_vfprintf_r+0x1f8e>
8000eb3a:	3f fa       	mov	r10,-1
8000eb3c:	50 ba       	stdsp	sp[0x2c],r10
8000eb3e:	40 bc       	lddsp	r12,sp[0x2c]
8000eb40:	fe 3d f9 44 	sub	sp,-1724
8000eb44:	d8 32       	popm	r0-r7,pc
8000eb46:	00 00       	add	r0,r0
8000eb48:	80 00       	ld.sh	r0,r0[0x0]
8000eb4a:	cb 90       	breq	8000eabc <_vfprintf_r+0x1f0c>

8000eb4c <__swsetup_r>:
8000eb4c:	d4 21       	pushm	r4-r7,lr
8000eb4e:	4b 38       	lddpc	r8,8000ec18 <__swsetup_r+0xcc>
8000eb50:	18 96       	mov	r6,r12
8000eb52:	16 97       	mov	r7,r11
8000eb54:	70 0c       	ld.w	r12,r8[0x0]
8000eb56:	58 0c       	cp.w	r12,0
8000eb58:	c0 60       	breq	8000eb64 <__swsetup_r+0x18>
8000eb5a:	78 68       	ld.w	r8,r12[0x18]
8000eb5c:	58 08       	cp.w	r8,0
8000eb5e:	c0 31       	brne	8000eb64 <__swsetup_r+0x18>
8000eb60:	f0 1f 00 2f 	mcall	8000ec1c <__swsetup_r+0xd0>
8000eb64:	4a f8       	lddpc	r8,8000ec20 <__swsetup_r+0xd4>
8000eb66:	10 37       	cp.w	r7,r8
8000eb68:	c0 51       	brne	8000eb72 <__swsetup_r+0x26>
8000eb6a:	4a c8       	lddpc	r8,8000ec18 <__swsetup_r+0xcc>
8000eb6c:	70 08       	ld.w	r8,r8[0x0]
8000eb6e:	70 07       	ld.w	r7,r8[0x0]
8000eb70:	c0 e8       	rjmp	8000eb8c <__swsetup_r+0x40>
8000eb72:	4a d8       	lddpc	r8,8000ec24 <__swsetup_r+0xd8>
8000eb74:	10 37       	cp.w	r7,r8
8000eb76:	c0 51       	brne	8000eb80 <__swsetup_r+0x34>
8000eb78:	4a 88       	lddpc	r8,8000ec18 <__swsetup_r+0xcc>
8000eb7a:	70 08       	ld.w	r8,r8[0x0]
8000eb7c:	70 17       	ld.w	r7,r8[0x4]
8000eb7e:	c0 78       	rjmp	8000eb8c <__swsetup_r+0x40>
8000eb80:	4a a8       	lddpc	r8,8000ec28 <__swsetup_r+0xdc>
8000eb82:	10 37       	cp.w	r7,r8
8000eb84:	c0 41       	brne	8000eb8c <__swsetup_r+0x40>
8000eb86:	4a 58       	lddpc	r8,8000ec18 <__swsetup_r+0xcc>
8000eb88:	70 08       	ld.w	r8,r8[0x0]
8000eb8a:	70 27       	ld.w	r7,r8[0x8]
8000eb8c:	8e 68       	ld.sh	r8,r7[0xc]
8000eb8e:	ed b8 00 03 	bld	r8,0x3
8000eb92:	c1 e0       	breq	8000ebce <__swsetup_r+0x82>
8000eb94:	ed b8 00 04 	bld	r8,0x4
8000eb98:	c3 e1       	brne	8000ec14 <__swsetup_r+0xc8>
8000eb9a:	ed b8 00 02 	bld	r8,0x2
8000eb9e:	c1 51       	brne	8000ebc8 <__swsetup_r+0x7c>
8000eba0:	6e db       	ld.w	r11,r7[0x34]
8000eba2:	58 0b       	cp.w	r11,0
8000eba4:	c0 a0       	breq	8000ebb8 <__swsetup_r+0x6c>
8000eba6:	ee c8 ff bc 	sub	r8,r7,-68
8000ebaa:	10 3b       	cp.w	r11,r8
8000ebac:	c0 40       	breq	8000ebb4 <__swsetup_r+0x68>
8000ebae:	0c 9c       	mov	r12,r6
8000ebb0:	f0 1f 00 1f 	mcall	8000ec2c <__swsetup_r+0xe0>
8000ebb4:	30 08       	mov	r8,0
8000ebb6:	8f d8       	st.w	r7[0x34],r8
8000ebb8:	8e 68       	ld.sh	r8,r7[0xc]
8000ebba:	e0 18 ff db 	andl	r8,0xffdb
8000ebbe:	ae 68       	st.h	r7[0xc],r8
8000ebc0:	30 08       	mov	r8,0
8000ebc2:	8f 18       	st.w	r7[0x4],r8
8000ebc4:	6e 48       	ld.w	r8,r7[0x10]
8000ebc6:	8f 08       	st.w	r7[0x0],r8
8000ebc8:	8e 68       	ld.sh	r8,r7[0xc]
8000ebca:	a3 b8       	sbr	r8,0x3
8000ebcc:	ae 68       	st.h	r7[0xc],r8
8000ebce:	6e 48       	ld.w	r8,r7[0x10]
8000ebd0:	58 08       	cp.w	r8,0
8000ebd2:	c0 b1       	brne	8000ebe8 <__swsetup_r+0x9c>
8000ebd4:	8e 68       	ld.sh	r8,r7[0xc]
8000ebd6:	e2 18 02 80 	andl	r8,0x280,COH
8000ebda:	e0 48 02 00 	cp.w	r8,512
8000ebde:	c0 50       	breq	8000ebe8 <__swsetup_r+0x9c>
8000ebe0:	0c 9c       	mov	r12,r6
8000ebe2:	0e 9b       	mov	r11,r7
8000ebe4:	f0 1f 00 13 	mcall	8000ec30 <__swsetup_r+0xe4>
8000ebe8:	8e 69       	ld.sh	r9,r7[0xc]
8000ebea:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000ebee:	c0 70       	breq	8000ebfc <__swsetup_r+0xb0>
8000ebf0:	30 08       	mov	r8,0
8000ebf2:	8f 28       	st.w	r7[0x8],r8
8000ebf4:	6e 58       	ld.w	r8,r7[0x14]
8000ebf6:	5c 38       	neg	r8
8000ebf8:	8f 68       	st.w	r7[0x18],r8
8000ebfa:	c0 68       	rjmp	8000ec06 <__swsetup_r+0xba>
8000ebfc:	ed b9 00 01 	bld	r9,0x1
8000ec00:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000ec04:	8f 28       	st.w	r7[0x8],r8
8000ec06:	6e 48       	ld.w	r8,r7[0x10]
8000ec08:	58 08       	cp.w	r8,0
8000ec0a:	c0 61       	brne	8000ec16 <__swsetup_r+0xca>
8000ec0c:	8e 68       	ld.sh	r8,r7[0xc]
8000ec0e:	ed b8 00 07 	bld	r8,0x7
8000ec12:	c0 21       	brne	8000ec16 <__swsetup_r+0xca>
8000ec14:	dc 2a       	popm	r4-r7,pc,r12=-1
8000ec16:	d8 2a       	popm	r4-r7,pc,r12=0
8000ec18:	00 00       	add	r0,r0
8000ec1a:	01 a8       	ld.ub	r8,r0[0x2]
8000ec1c:	80 00       	ld.sh	r0,r0[0x0]
8000ec1e:	fb c4       	*unknown*
8000ec20:	80 01       	ld.sh	r1,r0[0x0]
8000ec22:	25 38       	sub	r8,83
8000ec24:	80 01       	ld.sh	r1,r0[0x0]
8000ec26:	25 58       	sub	r8,85
8000ec28:	80 01       	ld.sh	r1,r0[0x0]
8000ec2a:	25 78       	sub	r8,87
8000ec2c:	80 00       	ld.sh	r0,r0[0x0]
8000ec2e:	fd 1c 80 01 	ld.uh	r12,lr[-32767]
8000ec32:	01 dc       	ld.ub	r12,r0[0x5]

8000ec34 <quorem>:
8000ec34:	d4 31       	pushm	r0-r7,lr
8000ec36:	20 2d       	sub	sp,8
8000ec38:	18 97       	mov	r7,r12
8000ec3a:	78 48       	ld.w	r8,r12[0x10]
8000ec3c:	76 46       	ld.w	r6,r11[0x10]
8000ec3e:	0c 38       	cp.w	r8,r6
8000ec40:	c0 34       	brge	8000ec46 <quorem+0x12>
8000ec42:	30 0c       	mov	r12,0
8000ec44:	c8 58       	rjmp	8000ed4e <quorem+0x11a>
8000ec46:	ec c2 ff fc 	sub	r2,r6,-4
8000ec4a:	f6 c3 ff ec 	sub	r3,r11,-20
8000ec4e:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000ec52:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000ec56:	2f f9       	sub	r9,-1
8000ec58:	20 16       	sub	r6,1
8000ec5a:	f8 09 0d 08 	divu	r8,r12,r9
8000ec5e:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000ec62:	ee c4 ff ec 	sub	r4,r7,-20
8000ec66:	10 95       	mov	r5,r8
8000ec68:	58 08       	cp.w	r8,0
8000ec6a:	c4 10       	breq	8000ecec <quorem+0xb8>
8000ec6c:	30 09       	mov	r9,0
8000ec6e:	06 9a       	mov	r10,r3
8000ec70:	08 98       	mov	r8,r4
8000ec72:	12 91       	mov	r1,r9
8000ec74:	50 0b       	stdsp	sp[0x0],r11
8000ec76:	70 0e       	ld.w	lr,r8[0x0]
8000ec78:	b1 8e       	lsr	lr,0x10
8000ec7a:	50 1e       	stdsp	sp[0x4],lr
8000ec7c:	15 0e       	ld.w	lr,r10++
8000ec7e:	fc 00 16 10 	lsr	r0,lr,0x10
8000ec82:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000ec86:	ea 0e 03 41 	mac	r1,r5,lr
8000ec8a:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000ec8e:	b1 81       	lsr	r1,0x10
8000ec90:	40 1b       	lddsp	r11,sp[0x4]
8000ec92:	ea 00 02 40 	mul	r0,r5,r0
8000ec96:	e2 00 00 00 	add	r0,r1,r0
8000ec9a:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000ec9e:	02 1b       	sub	r11,r1
8000eca0:	50 1b       	stdsp	sp[0x4],r11
8000eca2:	70 0b       	ld.w	r11,r8[0x0]
8000eca4:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000eca8:	02 09       	add	r9,r1
8000ecaa:	f2 0e 01 0e 	sub	lr,r9,lr
8000ecae:	b0 1e       	st.h	r8[0x2],lr
8000ecb0:	fc 09 14 10 	asr	r9,lr,0x10
8000ecb4:	40 1e       	lddsp	lr,sp[0x4]
8000ecb6:	fc 09 00 09 	add	r9,lr,r9
8000ecba:	b0 09       	st.h	r8[0x0],r9
8000ecbc:	e0 01 16 10 	lsr	r1,r0,0x10
8000ecc0:	2f c8       	sub	r8,-4
8000ecc2:	b1 49       	asr	r9,0x10
8000ecc4:	04 3a       	cp.w	r10,r2
8000ecc6:	fe 98 ff d8 	brls	8000ec76 <quorem+0x42>
8000ecca:	40 0b       	lddsp	r11,sp[0x0]
8000eccc:	58 0c       	cp.w	r12,0
8000ecce:	c0 f1       	brne	8000ecec <quorem+0xb8>
8000ecd0:	ec c8 ff fb 	sub	r8,r6,-5
8000ecd4:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000ecd8:	c0 28       	rjmp	8000ecdc <quorem+0xa8>
8000ecda:	20 16       	sub	r6,1
8000ecdc:	20 48       	sub	r8,4
8000ecde:	08 38       	cp.w	r8,r4
8000ece0:	e0 88 00 05 	brls	8000ecea <quorem+0xb6>
8000ece4:	70 09       	ld.w	r9,r8[0x0]
8000ece6:	58 09       	cp.w	r9,0
8000ece8:	cf 90       	breq	8000ecda <quorem+0xa6>
8000ecea:	8f 46       	st.w	r7[0x10],r6
8000ecec:	0e 9c       	mov	r12,r7
8000ecee:	f0 1f 00 1a 	mcall	8000ed54 <quorem+0x120>
8000ecf2:	c2 d5       	brlt	8000ed4c <quorem+0x118>
8000ecf4:	2f f5       	sub	r5,-1
8000ecf6:	08 98       	mov	r8,r4
8000ecf8:	30 09       	mov	r9,0
8000ecfa:	07 0b       	ld.w	r11,r3++
8000ecfc:	f6 0a 16 10 	lsr	r10,r11,0x10
8000ed00:	70 0c       	ld.w	r12,r8[0x0]
8000ed02:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000ed06:	f8 0e 16 10 	lsr	lr,r12,0x10
8000ed0a:	14 1e       	sub	lr,r10
8000ed0c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000ed10:	16 1a       	sub	r10,r11
8000ed12:	12 0a       	add	r10,r9
8000ed14:	b0 1a       	st.h	r8[0x2],r10
8000ed16:	b1 4a       	asr	r10,0x10
8000ed18:	fc 0a 00 09 	add	r9,lr,r10
8000ed1c:	b0 09       	st.h	r8[0x0],r9
8000ed1e:	2f c8       	sub	r8,-4
8000ed20:	b1 49       	asr	r9,0x10
8000ed22:	04 33       	cp.w	r3,r2
8000ed24:	fe 98 ff eb 	brls	8000ecfa <quorem+0xc6>
8000ed28:	ec c8 ff fb 	sub	r8,r6,-5
8000ed2c:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000ed30:	58 09       	cp.w	r9,0
8000ed32:	c0 d1       	brne	8000ed4c <quorem+0x118>
8000ed34:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000ed38:	c0 28       	rjmp	8000ed3c <quorem+0x108>
8000ed3a:	20 16       	sub	r6,1
8000ed3c:	20 48       	sub	r8,4
8000ed3e:	08 38       	cp.w	r8,r4
8000ed40:	e0 88 00 05 	brls	8000ed4a <quorem+0x116>
8000ed44:	70 09       	ld.w	r9,r8[0x0]
8000ed46:	58 09       	cp.w	r9,0
8000ed48:	cf 90       	breq	8000ed3a <quorem+0x106>
8000ed4a:	8f 46       	st.w	r7[0x10],r6
8000ed4c:	0a 9c       	mov	r12,r5
8000ed4e:	2f ed       	sub	sp,-8
8000ed50:	d8 32       	popm	r0-r7,pc
8000ed52:	00 00       	add	r0,r0
8000ed54:	80 01       	ld.sh	r1,r0[0x0]
8000ed56:	08 56       	eor	r6,r4

8000ed58 <_dtoa_r>:
8000ed58:	d4 31       	pushm	r0-r7,lr
8000ed5a:	21 ad       	sub	sp,104
8000ed5c:	fa c4 ff 74 	sub	r4,sp,-140
8000ed60:	18 97       	mov	r7,r12
8000ed62:	16 95       	mov	r5,r11
8000ed64:	68 2c       	ld.w	r12,r4[0x8]
8000ed66:	50 c9       	stdsp	sp[0x30],r9
8000ed68:	68 16       	ld.w	r6,r4[0x4]
8000ed6a:	68 09       	ld.w	r9,r4[0x0]
8000ed6c:	50 e8       	stdsp	sp[0x38],r8
8000ed6e:	14 94       	mov	r4,r10
8000ed70:	51 2c       	stdsp	sp[0x48],r12
8000ed72:	fa e5 00 08 	st.d	sp[8],r4
8000ed76:	51 59       	stdsp	sp[0x54],r9
8000ed78:	6e 95       	ld.w	r5,r7[0x24]
8000ed7a:	58 05       	cp.w	r5,0
8000ed7c:	c0 91       	brne	8000ed8e <_dtoa_r+0x36>
8000ed7e:	31 0c       	mov	r12,16
8000ed80:	f0 1f 00 47 	mcall	8000ee9c <_dtoa_r+0x144>
8000ed84:	99 35       	st.w	r12[0xc],r5
8000ed86:	8f 9c       	st.w	r7[0x24],r12
8000ed88:	99 15       	st.w	r12[0x4],r5
8000ed8a:	99 25       	st.w	r12[0x8],r5
8000ed8c:	99 05       	st.w	r12[0x0],r5
8000ed8e:	6e 99       	ld.w	r9,r7[0x24]
8000ed90:	72 08       	ld.w	r8,r9[0x0]
8000ed92:	58 08       	cp.w	r8,0
8000ed94:	c0 f0       	breq	8000edb2 <_dtoa_r+0x5a>
8000ed96:	72 1a       	ld.w	r10,r9[0x4]
8000ed98:	91 1a       	st.w	r8[0x4],r10
8000ed9a:	30 1a       	mov	r10,1
8000ed9c:	72 19       	ld.w	r9,r9[0x4]
8000ed9e:	f4 09 09 49 	lsl	r9,r10,r9
8000eda2:	10 9b       	mov	r11,r8
8000eda4:	91 29       	st.w	r8[0x8],r9
8000eda6:	0e 9c       	mov	r12,r7
8000eda8:	f0 1f 00 3e 	mcall	8000eea0 <_dtoa_r+0x148>
8000edac:	6e 98       	ld.w	r8,r7[0x24]
8000edae:	30 09       	mov	r9,0
8000edb0:	91 09       	st.w	r8[0x0],r9
8000edb2:	40 28       	lddsp	r8,sp[0x8]
8000edb4:	10 94       	mov	r4,r8
8000edb6:	58 08       	cp.w	r8,0
8000edb8:	c0 64       	brge	8000edc4 <_dtoa_r+0x6c>
8000edba:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000edbe:	50 28       	stdsp	sp[0x8],r8
8000edc0:	30 18       	mov	r8,1
8000edc2:	c0 28       	rjmp	8000edc6 <_dtoa_r+0x6e>
8000edc4:	30 08       	mov	r8,0
8000edc6:	8d 08       	st.w	r6[0x0],r8
8000edc8:	fc 1c 7f f0 	movh	r12,0x7ff0
8000edcc:	40 26       	lddsp	r6,sp[0x8]
8000edce:	0c 98       	mov	r8,r6
8000edd0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000edd4:	18 38       	cp.w	r8,r12
8000edd6:	c1 e1       	brne	8000ee12 <_dtoa_r+0xba>
8000edd8:	e0 68 27 0f 	mov	r8,9999
8000eddc:	41 5b       	lddsp	r11,sp[0x54]
8000edde:	97 08       	st.w	r11[0x0],r8
8000ede0:	40 3a       	lddsp	r10,sp[0xc]
8000ede2:	58 0a       	cp.w	r10,0
8000ede4:	c0 61       	brne	8000edf0 <_dtoa_r+0x98>
8000ede6:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000edea:	c0 31       	brne	8000edf0 <_dtoa_r+0x98>
8000edec:	4a ec       	lddpc	r12,8000eea4 <_dtoa_r+0x14c>
8000edee:	c0 28       	rjmp	8000edf2 <_dtoa_r+0x9a>
8000edf0:	4a ec       	lddpc	r12,8000eea8 <_dtoa_r+0x150>
8000edf2:	41 29       	lddsp	r9,sp[0x48]
8000edf4:	58 09       	cp.w	r9,0
8000edf6:	e0 80 05 de 	breq	8000f9b2 <_dtoa_r+0xc5a>
8000edfa:	f8 c8 ff fd 	sub	r8,r12,-3
8000edfe:	f8 c9 ff f8 	sub	r9,r12,-8
8000ee02:	11 8b       	ld.ub	r11,r8[0x0]
8000ee04:	30 0a       	mov	r10,0
8000ee06:	41 25       	lddsp	r5,sp[0x48]
8000ee08:	f4 0b 18 00 	cp.b	r11,r10
8000ee0c:	f2 08 17 10 	movne	r8,r9
8000ee10:	c1 58       	rjmp	8000ee3a <_dtoa_r+0xe2>
8000ee12:	fa ea 00 08 	ld.d	r10,sp[8]
8000ee16:	30 08       	mov	r8,0
8000ee18:	fa eb 00 3c 	st.d	sp[60],r10
8000ee1c:	30 09       	mov	r9,0
8000ee1e:	f0 1f 00 24 	mcall	8000eeac <_dtoa_r+0x154>
8000ee22:	c0 f0       	breq	8000ee40 <_dtoa_r+0xe8>
8000ee24:	30 18       	mov	r8,1
8000ee26:	41 5a       	lddsp	r10,sp[0x54]
8000ee28:	95 08       	st.w	r10[0x0],r8
8000ee2a:	4a 2c       	lddpc	r12,8000eeb0 <_dtoa_r+0x158>
8000ee2c:	41 29       	lddsp	r9,sp[0x48]
8000ee2e:	f8 08 00 08 	add	r8,r12,r8
8000ee32:	58 09       	cp.w	r9,0
8000ee34:	e0 80 05 bf 	breq	8000f9b2 <_dtoa_r+0xc5a>
8000ee38:	12 95       	mov	r5,r9
8000ee3a:	8b 08       	st.w	r5[0x0],r8
8000ee3c:	e0 8f 05 bb 	bral	8000f9b2 <_dtoa_r+0xc5a>
8000ee40:	fa c8 ff 9c 	sub	r8,sp,-100
8000ee44:	fa c9 ff a0 	sub	r9,sp,-96
8000ee48:	fa ea 00 3c 	ld.d	r10,sp[60]
8000ee4c:	0e 9c       	mov	r12,r7
8000ee4e:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000ee52:	f0 1f 00 19 	mcall	8000eeb4 <_dtoa_r+0x15c>
8000ee56:	18 93       	mov	r3,r12
8000ee58:	58 05       	cp.w	r5,0
8000ee5a:	c0 d0       	breq	8000ee74 <_dtoa_r+0x11c>
8000ee5c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000ee60:	30 04       	mov	r4,0
8000ee62:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000ee66:	ea c5 03 ff 	sub	r5,r5,1023
8000ee6a:	10 9b       	mov	r11,r8
8000ee6c:	51 74       	stdsp	sp[0x5c],r4
8000ee6e:	ea 1b 3f f0 	orh	r11,0x3ff0
8000ee72:	c3 28       	rjmp	8000eed6 <_dtoa_r+0x17e>
8000ee74:	41 88       	lddsp	r8,sp[0x60]
8000ee76:	41 9c       	lddsp	r12,sp[0x64]
8000ee78:	10 0c       	add	r12,r8
8000ee7a:	f8 c5 fb ce 	sub	r5,r12,-1074
8000ee7e:	e0 45 00 20 	cp.w	r5,32
8000ee82:	e0 8a 00 1b 	brle	8000eeb8 <_dtoa_r+0x160>
8000ee86:	f8 cc fb ee 	sub	r12,r12,-1042
8000ee8a:	40 3b       	lddsp	r11,sp[0xc]
8000ee8c:	ea 08 11 40 	rsub	r8,r5,64
8000ee90:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000ee94:	ec 08 09 46 	lsl	r6,r6,r8
8000ee98:	0c 4c       	or	r12,r6
8000ee9a:	c1 48       	rjmp	8000eec2 <_dtoa_r+0x16a>
8000ee9c:	80 01       	ld.sh	r1,r0[0x0]
8000ee9e:	02 a8       	st.w	r1++,r8
8000eea0:	80 01       	ld.sh	r1,r0[0x0]
8000eea2:	08 88       	andn	r8,r4
8000eea4:	80 01       	ld.sh	r1,r0[0x0]
8000eea6:	25 28       	sub	r8,82
8000eea8:	80 01       	ld.sh	r1,r0[0x0]
8000eeaa:	25 34       	sub	r4,83
8000eeac:	80 01       	ld.sh	r1,r0[0x0]
8000eeae:	15 06       	ld.w	r6,r10++
8000eeb0:	80 01       	ld.sh	r1,r0[0x0]
8000eeb2:	24 04       	sub	r4,64
8000eeb4:	80 01       	ld.sh	r1,r0[0x0]
8000eeb6:	09 38       	ld.ub	r8,r4++
8000eeb8:	ea 0c 11 20 	rsub	r12,r5,32
8000eebc:	40 3a       	lddsp	r10,sp[0xc]
8000eebe:	f4 0c 09 4c 	lsl	r12,r10,r12
8000eec2:	f0 1f 00 6b 	mcall	8000f06c <_dtoa_r+0x314>
8000eec6:	fc 18 fe 10 	movh	r8,0xfe10
8000eeca:	30 19       	mov	r9,1
8000eecc:	ea c5 04 33 	sub	r5,r5,1075
8000eed0:	f0 0b 00 0b 	add	r11,r8,r11
8000eed4:	51 79       	stdsp	sp[0x5c],r9
8000eed6:	30 08       	mov	r8,0
8000eed8:	fc 19 3f f8 	movh	r9,0x3ff8
8000eedc:	f0 1f 00 65 	mcall	8000f070 <_dtoa_r+0x318>
8000eee0:	e0 68 43 61 	mov	r8,17249
8000eee4:	ea 18 63 6f 	orh	r8,0x636f
8000eee8:	e0 69 87 a7 	mov	r9,34727
8000eeec:	ea 19 3f d2 	orh	r9,0x3fd2
8000eef0:	f0 1f 00 61 	mcall	8000f074 <_dtoa_r+0x31c>
8000eef4:	e0 68 c8 b3 	mov	r8,51379
8000eef8:	ea 18 8b 60 	orh	r8,0x8b60
8000eefc:	e0 69 8a 28 	mov	r9,35368
8000ef00:	ea 19 3f c6 	orh	r9,0x3fc6
8000ef04:	f0 1f 00 5d 	mcall	8000f078 <_dtoa_r+0x320>
8000ef08:	0a 9c       	mov	r12,r5
8000ef0a:	14 90       	mov	r0,r10
8000ef0c:	16 91       	mov	r1,r11
8000ef0e:	f0 1f 00 5c 	mcall	8000f07c <_dtoa_r+0x324>
8000ef12:	e0 68 79 fb 	mov	r8,31227
8000ef16:	ea 18 50 9f 	orh	r8,0x509f
8000ef1a:	e0 69 44 13 	mov	r9,17427
8000ef1e:	ea 19 3f d3 	orh	r9,0x3fd3
8000ef22:	f0 1f 00 55 	mcall	8000f074 <_dtoa_r+0x31c>
8000ef26:	14 98       	mov	r8,r10
8000ef28:	16 99       	mov	r9,r11
8000ef2a:	00 9a       	mov	r10,r0
8000ef2c:	02 9b       	mov	r11,r1
8000ef2e:	f0 1f 00 53 	mcall	8000f078 <_dtoa_r+0x320>
8000ef32:	14 90       	mov	r0,r10
8000ef34:	16 91       	mov	r1,r11
8000ef36:	f0 1f 00 53 	mcall	8000f080 <_dtoa_r+0x328>
8000ef3a:	30 08       	mov	r8,0
8000ef3c:	18 96       	mov	r6,r12
8000ef3e:	30 09       	mov	r9,0
8000ef40:	00 9a       	mov	r10,r0
8000ef42:	02 9b       	mov	r11,r1
8000ef44:	f0 1f 00 50 	mcall	8000f084 <_dtoa_r+0x32c>
8000ef48:	c0 c0       	breq	8000ef60 <_dtoa_r+0x208>
8000ef4a:	0c 9c       	mov	r12,r6
8000ef4c:	f0 1f 00 4c 	mcall	8000f07c <_dtoa_r+0x324>
8000ef50:	14 98       	mov	r8,r10
8000ef52:	16 99       	mov	r9,r11
8000ef54:	00 9a       	mov	r10,r0
8000ef56:	02 9b       	mov	r11,r1
8000ef58:	f0 1f 00 4c 	mcall	8000f088 <_dtoa_r+0x330>
8000ef5c:	f7 b6 00 01 	subeq	r6,1
8000ef60:	59 66       	cp.w	r6,22
8000ef62:	e0 88 00 05 	brls	8000ef6c <_dtoa_r+0x214>
8000ef66:	30 18       	mov	r8,1
8000ef68:	51 48       	stdsp	sp[0x50],r8
8000ef6a:	c1 28       	rjmp	8000ef8e <_dtoa_r+0x236>
8000ef6c:	4c 88       	lddpc	r8,8000f08c <_dtoa_r+0x334>
8000ef6e:	fa ea 00 3c 	ld.d	r10,sp[60]
8000ef72:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000ef76:	f0 1f 00 44 	mcall	8000f084 <_dtoa_r+0x32c>
8000ef7a:	f9 b4 00 00 	moveq	r4,0
8000ef7e:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000ef82:	f7 b6 01 01 	subne	r6,1
8000ef86:	f9 bc 01 00 	movne	r12,0
8000ef8a:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000ef8e:	41 90       	lddsp	r0,sp[0x64]
8000ef90:	20 10       	sub	r0,1
8000ef92:	0a 10       	sub	r0,r5
8000ef94:	c0 46       	brmi	8000ef9c <_dtoa_r+0x244>
8000ef96:	50 40       	stdsp	sp[0x10],r0
8000ef98:	30 00       	mov	r0,0
8000ef9a:	c0 48       	rjmp	8000efa2 <_dtoa_r+0x24a>
8000ef9c:	30 0b       	mov	r11,0
8000ef9e:	5c 30       	neg	r0
8000efa0:	50 4b       	stdsp	sp[0x10],r11
8000efa2:	ec 02 11 00 	rsub	r2,r6,0
8000efa6:	58 06       	cp.w	r6,0
8000efa8:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000efac:	f5 d6 e4 0a 	addge	r10,r10,r6
8000efb0:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000efb4:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000efb8:	f9 b2 04 00 	movge	r2,0
8000efbc:	e1 d6 e5 10 	sublt	r0,r0,r6
8000efc0:	f9 b9 05 00 	movlt	r9,0
8000efc4:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000efc8:	40 c8       	lddsp	r8,sp[0x30]
8000efca:	58 98       	cp.w	r8,9
8000efcc:	e0 8b 00 20 	brhi	8000f00c <_dtoa_r+0x2b4>
8000efd0:	58 58       	cp.w	r8,5
8000efd2:	f9 b4 0a 01 	movle	r4,1
8000efd6:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000efda:	f7 b5 09 04 	subgt	r5,4
8000efde:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000efe2:	f9 b4 09 00 	movgt	r4,0
8000efe6:	40 cc       	lddsp	r12,sp[0x30]
8000efe8:	58 3c       	cp.w	r12,3
8000efea:	c2 d0       	breq	8000f044 <_dtoa_r+0x2ec>
8000efec:	e0 89 00 05 	brgt	8000eff6 <_dtoa_r+0x29e>
8000eff0:	58 2c       	cp.w	r12,2
8000eff2:	c1 01       	brne	8000f012 <_dtoa_r+0x2ba>
8000eff4:	c1 88       	rjmp	8000f024 <_dtoa_r+0x2cc>
8000eff6:	40 cb       	lddsp	r11,sp[0x30]
8000eff8:	58 4b       	cp.w	r11,4
8000effa:	c0 60       	breq	8000f006 <_dtoa_r+0x2ae>
8000effc:	58 5b       	cp.w	r11,5
8000effe:	c0 a1       	brne	8000f012 <_dtoa_r+0x2ba>
8000f000:	30 1a       	mov	r10,1
8000f002:	50 da       	stdsp	sp[0x34],r10
8000f004:	c2 28       	rjmp	8000f048 <_dtoa_r+0x2f0>
8000f006:	30 19       	mov	r9,1
8000f008:	50 d9       	stdsp	sp[0x34],r9
8000f00a:	c0 f8       	rjmp	8000f028 <_dtoa_r+0x2d0>
8000f00c:	30 08       	mov	r8,0
8000f00e:	30 14       	mov	r4,1
8000f010:	50 c8       	stdsp	sp[0x30],r8
8000f012:	3f f5       	mov	r5,-1
8000f014:	30 1c       	mov	r12,1
8000f016:	30 0b       	mov	r11,0
8000f018:	50 95       	stdsp	sp[0x24],r5
8000f01a:	50 dc       	stdsp	sp[0x34],r12
8000f01c:	0a 91       	mov	r1,r5
8000f01e:	31 28       	mov	r8,18
8000f020:	50 eb       	stdsp	sp[0x38],r11
8000f022:	c2 08       	rjmp	8000f062 <_dtoa_r+0x30a>
8000f024:	30 0a       	mov	r10,0
8000f026:	50 da       	stdsp	sp[0x34],r10
8000f028:	40 e9       	lddsp	r9,sp[0x38]
8000f02a:	58 09       	cp.w	r9,0
8000f02c:	e0 89 00 07 	brgt	8000f03a <_dtoa_r+0x2e2>
8000f030:	30 18       	mov	r8,1
8000f032:	50 98       	stdsp	sp[0x24],r8
8000f034:	10 91       	mov	r1,r8
8000f036:	50 e8       	stdsp	sp[0x38],r8
8000f038:	c1 58       	rjmp	8000f062 <_dtoa_r+0x30a>
8000f03a:	40 e5       	lddsp	r5,sp[0x38]
8000f03c:	50 95       	stdsp	sp[0x24],r5
8000f03e:	0a 91       	mov	r1,r5
8000f040:	0a 98       	mov	r8,r5
8000f042:	c1 08       	rjmp	8000f062 <_dtoa_r+0x30a>
8000f044:	30 0c       	mov	r12,0
8000f046:	50 dc       	stdsp	sp[0x34],r12
8000f048:	40 eb       	lddsp	r11,sp[0x38]
8000f04a:	ec 0b 00 0b 	add	r11,r6,r11
8000f04e:	50 9b       	stdsp	sp[0x24],r11
8000f050:	16 98       	mov	r8,r11
8000f052:	2f f8       	sub	r8,-1
8000f054:	58 08       	cp.w	r8,0
8000f056:	e0 89 00 05 	brgt	8000f060 <_dtoa_r+0x308>
8000f05a:	10 91       	mov	r1,r8
8000f05c:	30 18       	mov	r8,1
8000f05e:	c0 28       	rjmp	8000f062 <_dtoa_r+0x30a>
8000f060:	10 91       	mov	r1,r8
8000f062:	30 09       	mov	r9,0
8000f064:	6e 9a       	ld.w	r10,r7[0x24]
8000f066:	95 19       	st.w	r10[0x4],r9
8000f068:	30 49       	mov	r9,4
8000f06a:	c1 78       	rjmp	8000f098 <_dtoa_r+0x340>
8000f06c:	80 00       	ld.sh	r0,r0[0x0]
8000f06e:	c1 68       	rjmp	8000f09a <_dtoa_r+0x342>
8000f070:	80 00       	ld.sh	r0,r0[0x0]
8000f072:	be bc       	st.b	pc[0x3],r12
8000f074:	80 00       	ld.sh	r0,r0[0x0]
8000f076:	bc e4       	st.b	lr[0x6],r4
8000f078:	80 00       	ld.sh	r0,r0[0x0]
8000f07a:	c0 58       	rjmp	8000f084 <_dtoa_r+0x32c>
8000f07c:	80 00       	ld.sh	r0,r0[0x0]
8000f07e:	c1 70       	breq	8000f0ac <_dtoa_r+0x354>
8000f080:	80 01       	ld.sh	r1,r0[0x0]
8000f082:	14 e0       	st.h	--r10,r0
8000f084:	80 01       	ld.sh	r1,r0[0x0]
8000f086:	15 94       	ld.ub	r4,r10[0x1]
8000f088:	80 01       	ld.sh	r1,r0[0x0]
8000f08a:	15 06       	ld.w	r6,r10++
8000f08c:	80 01       	ld.sh	r1,r0[0x0]
8000f08e:	25 ec       	sub	r12,94
8000f090:	6a 1a       	ld.w	r10,r5[0x4]
8000f092:	a1 79       	lsl	r9,0x1
8000f094:	2f fa       	sub	r10,-1
8000f096:	8b 1a       	st.w	r5[0x4],r10
8000f098:	6e 95       	ld.w	r5,r7[0x24]
8000f09a:	f2 ca ff ec 	sub	r10,r9,-20
8000f09e:	10 3a       	cp.w	r10,r8
8000f0a0:	fe 98 ff f8 	brls	8000f090 <_dtoa_r+0x338>
8000f0a4:	6a 1b       	ld.w	r11,r5[0x4]
8000f0a6:	0e 9c       	mov	r12,r7
8000f0a8:	f0 1f 00 53 	mcall	8000f1f4 <_dtoa_r+0x49c>
8000f0ac:	58 e1       	cp.w	r1,14
8000f0ae:	5f 88       	srls	r8
8000f0b0:	8b 0c       	st.w	r5[0x0],r12
8000f0b2:	f1 e4 00 04 	and	r4,r8,r4
8000f0b6:	6e 98       	ld.w	r8,r7[0x24]
8000f0b8:	70 08       	ld.w	r8,r8[0x0]
8000f0ba:	50 88       	stdsp	sp[0x20],r8
8000f0bc:	e0 80 01 98 	breq	8000f3ec <_dtoa_r+0x694>
8000f0c0:	58 06       	cp.w	r6,0
8000f0c2:	e0 8a 00 40 	brle	8000f142 <_dtoa_r+0x3ea>
8000f0c6:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000f0ca:	4c c8       	lddpc	r8,8000f1f8 <_dtoa_r+0x4a0>
8000f0cc:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000f0d0:	fa e5 00 18 	st.d	sp[24],r4
8000f0d4:	ec 04 14 04 	asr	r4,r6,0x4
8000f0d8:	ed b4 00 04 	bld	r4,0x4
8000f0dc:	c0 30       	breq	8000f0e2 <_dtoa_r+0x38a>
8000f0de:	30 25       	mov	r5,2
8000f0e0:	c0 f8       	rjmp	8000f0fe <_dtoa_r+0x3a6>
8000f0e2:	4c 78       	lddpc	r8,8000f1fc <_dtoa_r+0x4a4>
8000f0e4:	f0 e8 00 20 	ld.d	r8,r8[32]
8000f0e8:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f0ec:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000f0f0:	f0 1f 00 44 	mcall	8000f200 <_dtoa_r+0x4a8>
8000f0f4:	30 35       	mov	r5,3
8000f0f6:	14 98       	mov	r8,r10
8000f0f8:	16 99       	mov	r9,r11
8000f0fa:	fa e9 00 08 	st.d	sp[8],r8
8000f0fe:	4c 0c       	lddpc	r12,8000f1fc <_dtoa_r+0x4a4>
8000f100:	50 a3       	stdsp	sp[0x28],r3
8000f102:	0c 93       	mov	r3,r6
8000f104:	18 96       	mov	r6,r12
8000f106:	c0 f8       	rjmp	8000f124 <_dtoa_r+0x3cc>
8000f108:	fa ea 00 18 	ld.d	r10,sp[24]
8000f10c:	ed b4 00 00 	bld	r4,0x0
8000f110:	c0 81       	brne	8000f120 <_dtoa_r+0x3c8>
8000f112:	ec e8 00 00 	ld.d	r8,r6[0]
8000f116:	2f f5       	sub	r5,-1
8000f118:	f0 1f 00 3b 	mcall	8000f204 <_dtoa_r+0x4ac>
8000f11c:	fa eb 00 18 	st.d	sp[24],r10
8000f120:	a1 54       	asr	r4,0x1
8000f122:	2f 86       	sub	r6,-8
8000f124:	58 04       	cp.w	r4,0
8000f126:	cf 11       	brne	8000f108 <_dtoa_r+0x3b0>
8000f128:	fa e8 00 18 	ld.d	r8,sp[24]
8000f12c:	fa ea 00 08 	ld.d	r10,sp[8]
8000f130:	06 96       	mov	r6,r3
8000f132:	f0 1f 00 34 	mcall	8000f200 <_dtoa_r+0x4a8>
8000f136:	40 a3       	lddsp	r3,sp[0x28]
8000f138:	14 98       	mov	r8,r10
8000f13a:	16 99       	mov	r9,r11
8000f13c:	fa e9 00 08 	st.d	sp[8],r8
8000f140:	c2 d8       	rjmp	8000f19a <_dtoa_r+0x442>
8000f142:	ec 08 11 00 	rsub	r8,r6,0
8000f146:	c0 31       	brne	8000f14c <_dtoa_r+0x3f4>
8000f148:	30 25       	mov	r5,2
8000f14a:	c2 88       	rjmp	8000f19a <_dtoa_r+0x442>
8000f14c:	4a cc       	lddpc	r12,8000f1fc <_dtoa_r+0x4a4>
8000f14e:	f0 04 14 04 	asr	r4,r8,0x4
8000f152:	50 1c       	stdsp	sp[0x4],r12
8000f154:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000f158:	4a 89       	lddpc	r9,8000f1f8 <_dtoa_r+0x4a0>
8000f15a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f15e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000f162:	f0 1f 00 29 	mcall	8000f204 <_dtoa_r+0x4ac>
8000f166:	40 1c       	lddsp	r12,sp[0x4]
8000f168:	50 63       	stdsp	sp[0x18],r3
8000f16a:	30 25       	mov	r5,2
8000f16c:	0c 93       	mov	r3,r6
8000f16e:	fa eb 00 08 	st.d	sp[8],r10
8000f172:	18 96       	mov	r6,r12
8000f174:	c0 f8       	rjmp	8000f192 <_dtoa_r+0x43a>
8000f176:	fa ea 00 08 	ld.d	r10,sp[8]
8000f17a:	ed b4 00 00 	bld	r4,0x0
8000f17e:	c0 81       	brne	8000f18e <_dtoa_r+0x436>
8000f180:	ec e8 00 00 	ld.d	r8,r6[0]
8000f184:	2f f5       	sub	r5,-1
8000f186:	f0 1f 00 20 	mcall	8000f204 <_dtoa_r+0x4ac>
8000f18a:	fa eb 00 08 	st.d	sp[8],r10
8000f18e:	a1 54       	asr	r4,0x1
8000f190:	2f 86       	sub	r6,-8
8000f192:	58 04       	cp.w	r4,0
8000f194:	cf 11       	brne	8000f176 <_dtoa_r+0x41e>
8000f196:	06 96       	mov	r6,r3
8000f198:	40 63       	lddsp	r3,sp[0x18]
8000f19a:	41 4a       	lddsp	r10,sp[0x50]
8000f19c:	58 0a       	cp.w	r10,0
8000f19e:	c3 70       	breq	8000f20c <_dtoa_r+0x4b4>
8000f1a0:	fa e8 00 08 	ld.d	r8,sp[8]
8000f1a4:	58 01       	cp.w	r1,0
8000f1a6:	5f 94       	srgt	r4
8000f1a8:	fa e9 00 18 	st.d	sp[24],r8
8000f1ac:	30 08       	mov	r8,0
8000f1ae:	fc 19 3f f0 	movh	r9,0x3ff0
8000f1b2:	fa ea 00 18 	ld.d	r10,sp[24]
8000f1b6:	f0 1f 00 15 	mcall	8000f208 <_dtoa_r+0x4b0>
8000f1ba:	f9 bc 00 00 	moveq	r12,0
8000f1be:	f9 bc 01 01 	movne	r12,1
8000f1c2:	e9 ec 00 0c 	and	r12,r4,r12
8000f1c6:	c2 30       	breq	8000f20c <_dtoa_r+0x4b4>
8000f1c8:	40 98       	lddsp	r8,sp[0x24]
8000f1ca:	58 08       	cp.w	r8,0
8000f1cc:	e0 8a 01 0c 	brle	8000f3e4 <_dtoa_r+0x68c>
8000f1d0:	30 08       	mov	r8,0
8000f1d2:	fc 19 40 24 	movh	r9,0x4024
8000f1d6:	ec c4 00 01 	sub	r4,r6,1
8000f1da:	fa ea 00 18 	ld.d	r10,sp[24]
8000f1de:	2f f5       	sub	r5,-1
8000f1e0:	50 64       	stdsp	sp[0x18],r4
8000f1e2:	f0 1f 00 09 	mcall	8000f204 <_dtoa_r+0x4ac>
8000f1e6:	40 94       	lddsp	r4,sp[0x24]
8000f1e8:	14 98       	mov	r8,r10
8000f1ea:	16 99       	mov	r9,r11
8000f1ec:	fa e9 00 08 	st.d	sp[8],r8
8000f1f0:	c1 08       	rjmp	8000f210 <_dtoa_r+0x4b8>
8000f1f2:	00 00       	add	r0,r0
8000f1f4:	80 01       	ld.sh	r1,r0[0x0]
8000f1f6:	08 c0       	st.b	r4++,r0
8000f1f8:	80 01       	ld.sh	r1,r0[0x0]
8000f1fa:	25 ec       	sub	r12,94
8000f1fc:	80 01       	ld.sh	r1,r0[0x0]
8000f1fe:	26 b4       	sub	r4,107
8000f200:	80 01       	ld.sh	r1,r0[0x0]
8000f202:	15 fc       	ld.ub	r12,r10[0x7]
8000f204:	80 00       	ld.sh	r0,r0[0x0]
8000f206:	bc e4       	st.b	lr[0x6],r4
8000f208:	80 01       	ld.sh	r1,r0[0x0]
8000f20a:	15 94       	ld.ub	r4,r10[0x1]
8000f20c:	50 66       	stdsp	sp[0x18],r6
8000f20e:	02 94       	mov	r4,r1
8000f210:	0a 9c       	mov	r12,r5
8000f212:	f0 1f 00 69 	mcall	8000f3b4 <_dtoa_r+0x65c>
8000f216:	fa e8 00 08 	ld.d	r8,sp[8]
8000f21a:	f0 1f 00 68 	mcall	8000f3b8 <_dtoa_r+0x660>
8000f21e:	30 08       	mov	r8,0
8000f220:	fc 19 40 1c 	movh	r9,0x401c
8000f224:	f0 1f 00 66 	mcall	8000f3bc <_dtoa_r+0x664>
8000f228:	14 98       	mov	r8,r10
8000f22a:	16 99       	mov	r9,r11
8000f22c:	fa e9 00 28 	st.d	sp[40],r8
8000f230:	fc 18 fc c0 	movh	r8,0xfcc0
8000f234:	40 a5       	lddsp	r5,sp[0x28]
8000f236:	10 05       	add	r5,r8
8000f238:	50 a5       	stdsp	sp[0x28],r5
8000f23a:	58 04       	cp.w	r4,0
8000f23c:	c2 11       	brne	8000f27e <_dtoa_r+0x526>
8000f23e:	fa ea 00 08 	ld.d	r10,sp[8]
8000f242:	30 08       	mov	r8,0
8000f244:	fc 19 40 14 	movh	r9,0x4014
8000f248:	f0 1f 00 5e 	mcall	8000f3c0 <_dtoa_r+0x668>
8000f24c:	40 bc       	lddsp	r12,sp[0x2c]
8000f24e:	fa eb 00 08 	st.d	sp[8],r10
8000f252:	14 98       	mov	r8,r10
8000f254:	16 99       	mov	r9,r11
8000f256:	18 9a       	mov	r10,r12
8000f258:	0a 9b       	mov	r11,r5
8000f25a:	f0 1f 00 5b 	mcall	8000f3c4 <_dtoa_r+0x66c>
8000f25e:	e0 81 02 74 	brne	8000f746 <_dtoa_r+0x9ee>
8000f262:	0a 98       	mov	r8,r5
8000f264:	40 b9       	lddsp	r9,sp[0x2c]
8000f266:	ee 18 80 00 	eorh	r8,0x8000
8000f26a:	fa ea 00 08 	ld.d	r10,sp[8]
8000f26e:	10 95       	mov	r5,r8
8000f270:	12 98       	mov	r8,r9
8000f272:	0a 99       	mov	r9,r5
8000f274:	f0 1f 00 54 	mcall	8000f3c4 <_dtoa_r+0x66c>
8000f278:	e0 81 02 5e 	brne	8000f734 <_dtoa_r+0x9dc>
8000f27c:	cb 48       	rjmp	8000f3e4 <_dtoa_r+0x68c>
8000f27e:	4d 39       	lddpc	r9,8000f3c8 <_dtoa_r+0x670>
8000f280:	e8 c8 00 01 	sub	r8,r4,1
8000f284:	40 d5       	lddsp	r5,sp[0x34]
8000f286:	58 05       	cp.w	r5,0
8000f288:	c4 f0       	breq	8000f326 <_dtoa_r+0x5ce>
8000f28a:	30 0c       	mov	r12,0
8000f28c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000f290:	51 3c       	stdsp	sp[0x4c],r12
8000f292:	30 0a       	mov	r10,0
8000f294:	fc 1b 3f e0 	movh	r11,0x3fe0
8000f298:	f0 1f 00 4d 	mcall	8000f3cc <_dtoa_r+0x674>
8000f29c:	fa e8 00 28 	ld.d	r8,sp[40]
8000f2a0:	40 85       	lddsp	r5,sp[0x20]
8000f2a2:	f0 1f 00 48 	mcall	8000f3c0 <_dtoa_r+0x668>
8000f2a6:	fa eb 00 28 	st.d	sp[40],r10
8000f2aa:	fa ea 00 08 	ld.d	r10,sp[8]
8000f2ae:	f0 1f 00 49 	mcall	8000f3d0 <_dtoa_r+0x678>
8000f2b2:	51 6c       	stdsp	sp[0x58],r12
8000f2b4:	f0 1f 00 40 	mcall	8000f3b4 <_dtoa_r+0x65c>
8000f2b8:	14 98       	mov	r8,r10
8000f2ba:	16 99       	mov	r9,r11
8000f2bc:	fa ea 00 08 	ld.d	r10,sp[8]
8000f2c0:	f0 1f 00 40 	mcall	8000f3c0 <_dtoa_r+0x668>
8000f2c4:	fa eb 00 08 	st.d	sp[8],r10
8000f2c8:	41 68       	lddsp	r8,sp[0x58]
8000f2ca:	2d 08       	sub	r8,-48
8000f2cc:	0a c8       	st.b	r5++,r8
8000f2ce:	41 39       	lddsp	r9,sp[0x4c]
8000f2d0:	2f f9       	sub	r9,-1
8000f2d2:	51 39       	stdsp	sp[0x4c],r9
8000f2d4:	fa e8 00 28 	ld.d	r8,sp[40]
8000f2d8:	f0 1f 00 3b 	mcall	8000f3c4 <_dtoa_r+0x66c>
8000f2dc:	e0 81 03 5a 	brne	8000f990 <_dtoa_r+0xc38>
8000f2e0:	fa e8 00 08 	ld.d	r8,sp[8]
8000f2e4:	30 0a       	mov	r10,0
8000f2e6:	fc 1b 3f f0 	movh	r11,0x3ff0
8000f2ea:	f0 1f 00 36 	mcall	8000f3c0 <_dtoa_r+0x668>
8000f2ee:	fa e8 00 28 	ld.d	r8,sp[40]
8000f2f2:	f0 1f 00 35 	mcall	8000f3c4 <_dtoa_r+0x66c>
8000f2f6:	fa ea 00 28 	ld.d	r10,sp[40]
8000f2fa:	30 08       	mov	r8,0
8000f2fc:	fc 19 40 24 	movh	r9,0x4024
8000f300:	e0 81 00 e8 	brne	8000f4d0 <_dtoa_r+0x778>
8000f304:	41 3c       	lddsp	r12,sp[0x4c]
8000f306:	08 3c       	cp.w	r12,r4
8000f308:	c6 e4       	brge	8000f3e4 <_dtoa_r+0x68c>
8000f30a:	f0 1f 00 2c 	mcall	8000f3b8 <_dtoa_r+0x660>
8000f30e:	30 08       	mov	r8,0
8000f310:	fa eb 00 28 	st.d	sp[40],r10
8000f314:	fc 19 40 24 	movh	r9,0x4024
8000f318:	fa ea 00 08 	ld.d	r10,sp[8]
8000f31c:	f0 1f 00 27 	mcall	8000f3b8 <_dtoa_r+0x660>
8000f320:	fa eb 00 08 	st.d	sp[8],r10
8000f324:	cc 3b       	rjmp	8000f2aa <_dtoa_r+0x552>
8000f326:	40 85       	lddsp	r5,sp[0x20]
8000f328:	08 05       	add	r5,r4
8000f32a:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000f32e:	51 35       	stdsp	sp[0x4c],r5
8000f330:	fa e8 00 28 	ld.d	r8,sp[40]
8000f334:	40 85       	lddsp	r5,sp[0x20]
8000f336:	f0 1f 00 21 	mcall	8000f3b8 <_dtoa_r+0x660>
8000f33a:	fa eb 00 28 	st.d	sp[40],r10
8000f33e:	fa ea 00 08 	ld.d	r10,sp[8]
8000f342:	f0 1f 00 24 	mcall	8000f3d0 <_dtoa_r+0x678>
8000f346:	51 6c       	stdsp	sp[0x58],r12
8000f348:	f0 1f 00 1b 	mcall	8000f3b4 <_dtoa_r+0x65c>
8000f34c:	14 98       	mov	r8,r10
8000f34e:	16 99       	mov	r9,r11
8000f350:	fa ea 00 08 	ld.d	r10,sp[8]
8000f354:	f0 1f 00 1b 	mcall	8000f3c0 <_dtoa_r+0x668>
8000f358:	fa eb 00 08 	st.d	sp[8],r10
8000f35c:	41 68       	lddsp	r8,sp[0x58]
8000f35e:	2d 08       	sub	r8,-48
8000f360:	0a c8       	st.b	r5++,r8
8000f362:	41 3c       	lddsp	r12,sp[0x4c]
8000f364:	18 35       	cp.w	r5,r12
8000f366:	c3 71       	brne	8000f3d4 <_dtoa_r+0x67c>
8000f368:	30 08       	mov	r8,0
8000f36a:	fc 19 3f e0 	movh	r9,0x3fe0
8000f36e:	fa ea 00 28 	ld.d	r10,sp[40]
8000f372:	f0 1f 00 13 	mcall	8000f3bc <_dtoa_r+0x664>
8000f376:	40 85       	lddsp	r5,sp[0x20]
8000f378:	fa e8 00 08 	ld.d	r8,sp[8]
8000f37c:	08 05       	add	r5,r4
8000f37e:	f0 1f 00 12 	mcall	8000f3c4 <_dtoa_r+0x66c>
8000f382:	e0 81 00 a7 	brne	8000f4d0 <_dtoa_r+0x778>
8000f386:	fa e8 00 28 	ld.d	r8,sp[40]
8000f38a:	30 0a       	mov	r10,0
8000f38c:	fc 1b 3f e0 	movh	r11,0x3fe0
8000f390:	f0 1f 00 0c 	mcall	8000f3c0 <_dtoa_r+0x668>
8000f394:	14 98       	mov	r8,r10
8000f396:	16 99       	mov	r9,r11
8000f398:	fa ea 00 08 	ld.d	r10,sp[8]
8000f39c:	f0 1f 00 0a 	mcall	8000f3c4 <_dtoa_r+0x66c>
8000f3a0:	c2 20       	breq	8000f3e4 <_dtoa_r+0x68c>
8000f3a2:	33 09       	mov	r9,48
8000f3a4:	0a 98       	mov	r8,r5
8000f3a6:	11 7a       	ld.ub	r10,--r8
8000f3a8:	f2 0a 18 00 	cp.b	r10,r9
8000f3ac:	e0 81 02 f2 	brne	8000f990 <_dtoa_r+0xc38>
8000f3b0:	10 95       	mov	r5,r8
8000f3b2:	cf 9b       	rjmp	8000f3a4 <_dtoa_r+0x64c>
8000f3b4:	80 00       	ld.sh	r0,r0[0x0]
8000f3b6:	c1 70       	breq	8000f3e4 <_dtoa_r+0x68c>
8000f3b8:	80 00       	ld.sh	r0,r0[0x0]
8000f3ba:	bc e4       	st.b	lr[0x6],r4
8000f3bc:	80 00       	ld.sh	r0,r0[0x0]
8000f3be:	c0 58       	rjmp	8000f3c8 <_dtoa_r+0x670>
8000f3c0:	80 00       	ld.sh	r0,r0[0x0]
8000f3c2:	be bc       	st.b	pc[0x3],r12
8000f3c4:	80 01       	ld.sh	r1,r0[0x0]
8000f3c6:	15 94       	ld.ub	r4,r10[0x1]
8000f3c8:	80 01       	ld.sh	r1,r0[0x0]
8000f3ca:	25 ec       	sub	r12,94
8000f3cc:	80 01       	ld.sh	r1,r0[0x0]
8000f3ce:	15 fc       	ld.ub	r12,r10[0x7]
8000f3d0:	80 01       	ld.sh	r1,r0[0x0]
8000f3d2:	14 e0       	st.h	--r10,r0
8000f3d4:	30 08       	mov	r8,0
8000f3d6:	fc 19 40 24 	movh	r9,0x4024
8000f3da:	f0 1f 00 56 	mcall	8000f530 <_dtoa_r+0x7d8>
8000f3de:	fa eb 00 08 	st.d	sp[8],r10
8000f3e2:	ca eb       	rjmp	8000f33e <_dtoa_r+0x5e6>
8000f3e4:	fa ea 00 3c 	ld.d	r10,sp[60]
8000f3e8:	fa eb 00 08 	st.d	sp[8],r10
8000f3ec:	58 e6       	cp.w	r6,14
8000f3ee:	5f ab       	srle	r11
8000f3f0:	41 8a       	lddsp	r10,sp[0x60]
8000f3f2:	30 08       	mov	r8,0
8000f3f4:	f4 09 11 ff 	rsub	r9,r10,-1
8000f3f8:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000f3fc:	f0 09 18 00 	cp.b	r9,r8
8000f400:	e0 80 00 81 	breq	8000f502 <_dtoa_r+0x7aa>
8000f404:	40 ea       	lddsp	r10,sp[0x38]
8000f406:	58 01       	cp.w	r1,0
8000f408:	5f a9       	srle	r9
8000f40a:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000f40e:	4c aa       	lddpc	r10,8000f534 <_dtoa_r+0x7dc>
8000f410:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000f414:	fa e5 00 10 	st.d	sp[16],r4
8000f418:	f0 09 18 00 	cp.b	r9,r8
8000f41c:	c1 40       	breq	8000f444 <_dtoa_r+0x6ec>
8000f41e:	58 01       	cp.w	r1,0
8000f420:	e0 81 01 8a 	brne	8000f734 <_dtoa_r+0x9dc>
8000f424:	30 08       	mov	r8,0
8000f426:	fc 19 40 14 	movh	r9,0x4014
8000f42a:	08 9a       	mov	r10,r4
8000f42c:	0a 9b       	mov	r11,r5
8000f42e:	f0 1f 00 41 	mcall	8000f530 <_dtoa_r+0x7d8>
8000f432:	fa e8 00 08 	ld.d	r8,sp[8]
8000f436:	f0 1f 00 41 	mcall	8000f538 <_dtoa_r+0x7e0>
8000f43a:	e0 81 01 7d 	brne	8000f734 <_dtoa_r+0x9dc>
8000f43e:	02 92       	mov	r2,r1
8000f440:	e0 8f 01 85 	bral	8000f74a <_dtoa_r+0x9f2>
8000f444:	40 85       	lddsp	r5,sp[0x20]
8000f446:	30 14       	mov	r4,1
8000f448:	fa e8 00 10 	ld.d	r8,sp[16]
8000f44c:	fa ea 00 08 	ld.d	r10,sp[8]
8000f450:	f0 1f 00 3b 	mcall	8000f53c <_dtoa_r+0x7e4>
8000f454:	f0 1f 00 3b 	mcall	8000f540 <_dtoa_r+0x7e8>
8000f458:	18 92       	mov	r2,r12
8000f45a:	f0 1f 00 3b 	mcall	8000f544 <_dtoa_r+0x7ec>
8000f45e:	fa e8 00 10 	ld.d	r8,sp[16]
8000f462:	f0 1f 00 34 	mcall	8000f530 <_dtoa_r+0x7d8>
8000f466:	14 98       	mov	r8,r10
8000f468:	16 99       	mov	r9,r11
8000f46a:	fa ea 00 08 	ld.d	r10,sp[8]
8000f46e:	f0 1f 00 37 	mcall	8000f548 <_dtoa_r+0x7f0>
8000f472:	fa eb 00 08 	st.d	sp[8],r10
8000f476:	e4 c8 ff d0 	sub	r8,r2,-48
8000f47a:	0a c8       	st.b	r5++,r8
8000f47c:	fc 19 40 24 	movh	r9,0x4024
8000f480:	30 08       	mov	r8,0
8000f482:	02 34       	cp.w	r4,r1
8000f484:	c3 31       	brne	8000f4ea <_dtoa_r+0x792>
8000f486:	fa e8 00 08 	ld.d	r8,sp[8]
8000f48a:	f0 1f 00 31 	mcall	8000f54c <_dtoa_r+0x7f4>
8000f48e:	16 91       	mov	r1,r11
8000f490:	14 90       	mov	r0,r10
8000f492:	14 98       	mov	r8,r10
8000f494:	02 99       	mov	r9,r1
8000f496:	fa ea 00 10 	ld.d	r10,sp[16]
8000f49a:	f0 1f 00 2e 	mcall	8000f550 <_dtoa_r+0x7f8>
8000f49e:	c1 a1       	brne	8000f4d2 <_dtoa_r+0x77a>
8000f4a0:	fa e8 00 10 	ld.d	r8,sp[16]
8000f4a4:	00 9a       	mov	r10,r0
8000f4a6:	02 9b       	mov	r11,r1
8000f4a8:	f0 1f 00 2b 	mcall	8000f554 <_dtoa_r+0x7fc>
8000f4ac:	e0 80 02 71 	breq	8000f98e <_dtoa_r+0xc36>
8000f4b0:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000f4b4:	c0 f1       	brne	8000f4d2 <_dtoa_r+0x77a>
8000f4b6:	e0 8f 02 6c 	bral	8000f98e <_dtoa_r+0xc36>
8000f4ba:	40 8a       	lddsp	r10,sp[0x20]
8000f4bc:	14 38       	cp.w	r8,r10
8000f4be:	c0 30       	breq	8000f4c4 <_dtoa_r+0x76c>
8000f4c0:	10 95       	mov	r5,r8
8000f4c2:	c0 98       	rjmp	8000f4d4 <_dtoa_r+0x77c>
8000f4c4:	33 08       	mov	r8,48
8000f4c6:	40 89       	lddsp	r9,sp[0x20]
8000f4c8:	2f f6       	sub	r6,-1
8000f4ca:	b2 88       	st.b	r9[0x0],r8
8000f4cc:	40 88       	lddsp	r8,sp[0x20]
8000f4ce:	c0 88       	rjmp	8000f4de <_dtoa_r+0x786>
8000f4d0:	40 66       	lddsp	r6,sp[0x18]
8000f4d2:	33 99       	mov	r9,57
8000f4d4:	0a 98       	mov	r8,r5
8000f4d6:	11 7a       	ld.ub	r10,--r8
8000f4d8:	f2 0a 18 00 	cp.b	r10,r9
8000f4dc:	ce f0       	breq	8000f4ba <_dtoa_r+0x762>
8000f4de:	50 66       	stdsp	sp[0x18],r6
8000f4e0:	11 89       	ld.ub	r9,r8[0x0]
8000f4e2:	2f f9       	sub	r9,-1
8000f4e4:	b0 89       	st.b	r8[0x0],r9
8000f4e6:	e0 8f 02 55 	bral	8000f990 <_dtoa_r+0xc38>
8000f4ea:	f0 1f 00 12 	mcall	8000f530 <_dtoa_r+0x7d8>
8000f4ee:	2f f4       	sub	r4,-1
8000f4f0:	fa eb 00 08 	st.d	sp[8],r10
8000f4f4:	30 08       	mov	r8,0
8000f4f6:	30 09       	mov	r9,0
8000f4f8:	f0 1f 00 17 	mcall	8000f554 <_dtoa_r+0x7fc>
8000f4fc:	ca 60       	breq	8000f448 <_dtoa_r+0x6f0>
8000f4fe:	e0 8f 02 48 	bral	8000f98e <_dtoa_r+0xc36>
8000f502:	40 d8       	lddsp	r8,sp[0x34]
8000f504:	58 08       	cp.w	r8,0
8000f506:	c0 51       	brne	8000f510 <_dtoa_r+0x7b8>
8000f508:	04 98       	mov	r8,r2
8000f50a:	00 95       	mov	r5,r0
8000f50c:	40 d4       	lddsp	r4,sp[0x34]
8000f50e:	c4 a8       	rjmp	8000f5a2 <_dtoa_r+0x84a>
8000f510:	40 c5       	lddsp	r5,sp[0x30]
8000f512:	58 15       	cp.w	r5,1
8000f514:	e0 89 00 22 	brgt	8000f558 <_dtoa_r+0x800>
8000f518:	41 74       	lddsp	r4,sp[0x5c]
8000f51a:	58 04       	cp.w	r4,0
8000f51c:	c0 40       	breq	8000f524 <_dtoa_r+0x7cc>
8000f51e:	f4 c9 fb cd 	sub	r9,r10,-1075
8000f522:	c0 48       	rjmp	8000f52a <_dtoa_r+0x7d2>
8000f524:	41 99       	lddsp	r9,sp[0x64]
8000f526:	f2 09 11 36 	rsub	r9,r9,54
8000f52a:	04 98       	mov	r8,r2
8000f52c:	00 95       	mov	r5,r0
8000f52e:	c2 f8       	rjmp	8000f58c <_dtoa_r+0x834>
8000f530:	80 00       	ld.sh	r0,r0[0x0]
8000f532:	bc e4       	st.b	lr[0x6],r4
8000f534:	80 01       	ld.sh	r1,r0[0x0]
8000f536:	25 ec       	sub	r12,94
8000f538:	80 01       	ld.sh	r1,r0[0x0]
8000f53a:	15 2c       	ld.uh	r12,r10++
8000f53c:	80 01       	ld.sh	r1,r0[0x0]
8000f53e:	15 fc       	ld.ub	r12,r10[0x7]
8000f540:	80 01       	ld.sh	r1,r0[0x0]
8000f542:	14 e0       	st.h	--r10,r0
8000f544:	80 00       	ld.sh	r0,r0[0x0]
8000f546:	c1 70       	breq	8000f574 <_dtoa_r+0x81c>
8000f548:	80 00       	ld.sh	r0,r0[0x0]
8000f54a:	be bc       	st.b	pc[0x3],r12
8000f54c:	80 00       	ld.sh	r0,r0[0x0]
8000f54e:	c0 58       	rjmp	8000f558 <_dtoa_r+0x800>
8000f550:	80 01       	ld.sh	r1,r0[0x0]
8000f552:	15 94       	ld.ub	r4,r10[0x1]
8000f554:	80 01       	ld.sh	r1,r0[0x0]
8000f556:	15 06       	ld.w	r6,r10++
8000f558:	e2 c8 00 01 	sub	r8,r1,1
8000f55c:	58 01       	cp.w	r1,0
8000f55e:	e0 05 17 40 	movge	r5,r0
8000f562:	e2 09 17 40 	movge	r9,r1
8000f566:	e1 d1 e5 15 	sublt	r5,r0,r1
8000f56a:	f9 b9 05 00 	movlt	r9,0
8000f56e:	10 32       	cp.w	r2,r8
8000f570:	e5 d8 e4 18 	subge	r8,r2,r8
8000f574:	f1 d2 e5 18 	sublt	r8,r8,r2
8000f578:	e5 d8 e5 02 	addlt	r2,r2,r8
8000f57c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000f580:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000f584:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000f588:	f9 b8 05 00 	movlt	r8,0
8000f58c:	40 4b       	lddsp	r11,sp[0x10]
8000f58e:	12 0b       	add	r11,r9
8000f590:	50 08       	stdsp	sp[0x0],r8
8000f592:	50 4b       	stdsp	sp[0x10],r11
8000f594:	12 00       	add	r0,r9
8000f596:	30 1b       	mov	r11,1
8000f598:	0e 9c       	mov	r12,r7
8000f59a:	f0 1f 01 08 	mcall	8000f9b8 <_dtoa_r+0xc60>
8000f59e:	40 08       	lddsp	r8,sp[0x0]
8000f5a0:	18 94       	mov	r4,r12
8000f5a2:	40 4a       	lddsp	r10,sp[0x10]
8000f5a4:	58 05       	cp.w	r5,0
8000f5a6:	5f 99       	srgt	r9
8000f5a8:	58 0a       	cp.w	r10,0
8000f5aa:	5f 9a       	srgt	r10
8000f5ac:	f5 e9 00 09 	and	r9,r10,r9
8000f5b0:	c0 80       	breq	8000f5c0 <_dtoa_r+0x868>
8000f5b2:	40 4c       	lddsp	r12,sp[0x10]
8000f5b4:	f8 05 0d 49 	min	r9,r12,r5
8000f5b8:	12 1c       	sub	r12,r9
8000f5ba:	12 10       	sub	r0,r9
8000f5bc:	50 4c       	stdsp	sp[0x10],r12
8000f5be:	12 15       	sub	r5,r9
8000f5c0:	58 02       	cp.w	r2,0
8000f5c2:	e0 8a 00 27 	brle	8000f610 <_dtoa_r+0x8b8>
8000f5c6:	40 db       	lddsp	r11,sp[0x34]
8000f5c8:	58 0b       	cp.w	r11,0
8000f5ca:	c1 d0       	breq	8000f604 <_dtoa_r+0x8ac>
8000f5cc:	58 08       	cp.w	r8,0
8000f5ce:	e0 8a 00 17 	brle	8000f5fc <_dtoa_r+0x8a4>
8000f5d2:	10 9a       	mov	r10,r8
8000f5d4:	50 08       	stdsp	sp[0x0],r8
8000f5d6:	08 9b       	mov	r11,r4
8000f5d8:	0e 9c       	mov	r12,r7
8000f5da:	f0 1f 00 f9 	mcall	8000f9bc <_dtoa_r+0xc64>
8000f5de:	06 9a       	mov	r10,r3
8000f5e0:	18 9b       	mov	r11,r12
8000f5e2:	18 94       	mov	r4,r12
8000f5e4:	0e 9c       	mov	r12,r7
8000f5e6:	f0 1f 00 f7 	mcall	8000f9c0 <_dtoa_r+0xc68>
8000f5ea:	18 99       	mov	r9,r12
8000f5ec:	06 9b       	mov	r11,r3
8000f5ee:	50 19       	stdsp	sp[0x4],r9
8000f5f0:	0e 9c       	mov	r12,r7
8000f5f2:	f0 1f 00 f5 	mcall	8000f9c4 <_dtoa_r+0xc6c>
8000f5f6:	40 19       	lddsp	r9,sp[0x4]
8000f5f8:	40 08       	lddsp	r8,sp[0x0]
8000f5fa:	12 93       	mov	r3,r9
8000f5fc:	e4 08 01 0a 	sub	r10,r2,r8
8000f600:	c0 80       	breq	8000f610 <_dtoa_r+0x8b8>
8000f602:	c0 28       	rjmp	8000f606 <_dtoa_r+0x8ae>
8000f604:	04 9a       	mov	r10,r2
8000f606:	06 9b       	mov	r11,r3
8000f608:	0e 9c       	mov	r12,r7
8000f60a:	f0 1f 00 ed 	mcall	8000f9bc <_dtoa_r+0xc64>
8000f60e:	18 93       	mov	r3,r12
8000f610:	30 1b       	mov	r11,1
8000f612:	0e 9c       	mov	r12,r7
8000f614:	f0 1f 00 e9 	mcall	8000f9b8 <_dtoa_r+0xc60>
8000f618:	41 1a       	lddsp	r10,sp[0x44]
8000f61a:	18 92       	mov	r2,r12
8000f61c:	58 0a       	cp.w	r10,0
8000f61e:	e0 8a 00 07 	brle	8000f62c <_dtoa_r+0x8d4>
8000f622:	18 9b       	mov	r11,r12
8000f624:	0e 9c       	mov	r12,r7
8000f626:	f0 1f 00 e6 	mcall	8000f9bc <_dtoa_r+0xc64>
8000f62a:	18 92       	mov	r2,r12
8000f62c:	40 c9       	lddsp	r9,sp[0x30]
8000f62e:	58 19       	cp.w	r9,1
8000f630:	e0 89 00 14 	brgt	8000f658 <_dtoa_r+0x900>
8000f634:	40 38       	lddsp	r8,sp[0xc]
8000f636:	58 08       	cp.w	r8,0
8000f638:	c1 01       	brne	8000f658 <_dtoa_r+0x900>
8000f63a:	40 29       	lddsp	r9,sp[0x8]
8000f63c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000f640:	c0 c1       	brne	8000f658 <_dtoa_r+0x900>
8000f642:	12 98       	mov	r8,r9
8000f644:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000f648:	c0 80       	breq	8000f658 <_dtoa_r+0x900>
8000f64a:	40 4c       	lddsp	r12,sp[0x10]
8000f64c:	30 1b       	mov	r11,1
8000f64e:	2f fc       	sub	r12,-1
8000f650:	2f f0       	sub	r0,-1
8000f652:	50 4c       	stdsp	sp[0x10],r12
8000f654:	50 6b       	stdsp	sp[0x18],r11
8000f656:	c0 38       	rjmp	8000f65c <_dtoa_r+0x904>
8000f658:	30 0a       	mov	r10,0
8000f65a:	50 6a       	stdsp	sp[0x18],r10
8000f65c:	41 19       	lddsp	r9,sp[0x44]
8000f65e:	58 09       	cp.w	r9,0
8000f660:	c0 31       	brne	8000f666 <_dtoa_r+0x90e>
8000f662:	30 1c       	mov	r12,1
8000f664:	c0 98       	rjmp	8000f676 <_dtoa_r+0x91e>
8000f666:	64 48       	ld.w	r8,r2[0x10]
8000f668:	2f c8       	sub	r8,-4
8000f66a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000f66e:	f0 1f 00 d7 	mcall	8000f9c8 <_dtoa_r+0xc70>
8000f672:	f8 0c 11 20 	rsub	r12,r12,32
8000f676:	40 4b       	lddsp	r11,sp[0x10]
8000f678:	f8 0b 00 08 	add	r8,r12,r11
8000f67c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000f680:	c0 c0       	breq	8000f698 <_dtoa_r+0x940>
8000f682:	f0 08 11 20 	rsub	r8,r8,32
8000f686:	58 48       	cp.w	r8,4
8000f688:	e0 8a 00 06 	brle	8000f694 <_dtoa_r+0x93c>
8000f68c:	20 48       	sub	r8,4
8000f68e:	10 0b       	add	r11,r8
8000f690:	50 4b       	stdsp	sp[0x10],r11
8000f692:	c0 78       	rjmp	8000f6a0 <_dtoa_r+0x948>
8000f694:	58 48       	cp.w	r8,4
8000f696:	c0 70       	breq	8000f6a4 <_dtoa_r+0x94c>
8000f698:	40 4a       	lddsp	r10,sp[0x10]
8000f69a:	2e 48       	sub	r8,-28
8000f69c:	10 0a       	add	r10,r8
8000f69e:	50 4a       	stdsp	sp[0x10],r10
8000f6a0:	10 00       	add	r0,r8
8000f6a2:	10 05       	add	r5,r8
8000f6a4:	58 00       	cp.w	r0,0
8000f6a6:	e0 8a 00 08 	brle	8000f6b6 <_dtoa_r+0x95e>
8000f6aa:	06 9b       	mov	r11,r3
8000f6ac:	00 9a       	mov	r10,r0
8000f6ae:	0e 9c       	mov	r12,r7
8000f6b0:	f0 1f 00 c7 	mcall	8000f9cc <_dtoa_r+0xc74>
8000f6b4:	18 93       	mov	r3,r12
8000f6b6:	40 49       	lddsp	r9,sp[0x10]
8000f6b8:	58 09       	cp.w	r9,0
8000f6ba:	e0 8a 00 08 	brle	8000f6ca <_dtoa_r+0x972>
8000f6be:	04 9b       	mov	r11,r2
8000f6c0:	12 9a       	mov	r10,r9
8000f6c2:	0e 9c       	mov	r12,r7
8000f6c4:	f0 1f 00 c2 	mcall	8000f9cc <_dtoa_r+0xc74>
8000f6c8:	18 92       	mov	r2,r12
8000f6ca:	41 48       	lddsp	r8,sp[0x50]
8000f6cc:	58 08       	cp.w	r8,0
8000f6ce:	c1 b0       	breq	8000f704 <_dtoa_r+0x9ac>
8000f6d0:	04 9b       	mov	r11,r2
8000f6d2:	06 9c       	mov	r12,r3
8000f6d4:	f0 1f 00 bf 	mcall	8000f9d0 <_dtoa_r+0xc78>
8000f6d8:	c1 64       	brge	8000f704 <_dtoa_r+0x9ac>
8000f6da:	06 9b       	mov	r11,r3
8000f6dc:	30 09       	mov	r9,0
8000f6de:	30 aa       	mov	r10,10
8000f6e0:	0e 9c       	mov	r12,r7
8000f6e2:	f0 1f 00 bd 	mcall	8000f9d4 <_dtoa_r+0xc7c>
8000f6e6:	20 16       	sub	r6,1
8000f6e8:	18 93       	mov	r3,r12
8000f6ea:	40 dc       	lddsp	r12,sp[0x34]
8000f6ec:	58 0c       	cp.w	r12,0
8000f6ee:	c0 31       	brne	8000f6f4 <_dtoa_r+0x99c>
8000f6f0:	40 91       	lddsp	r1,sp[0x24]
8000f6f2:	c0 98       	rjmp	8000f704 <_dtoa_r+0x9ac>
8000f6f4:	08 9b       	mov	r11,r4
8000f6f6:	40 91       	lddsp	r1,sp[0x24]
8000f6f8:	30 09       	mov	r9,0
8000f6fa:	30 aa       	mov	r10,10
8000f6fc:	0e 9c       	mov	r12,r7
8000f6fe:	f0 1f 00 b6 	mcall	8000f9d4 <_dtoa_r+0xc7c>
8000f702:	18 94       	mov	r4,r12
8000f704:	58 01       	cp.w	r1,0
8000f706:	5f a9       	srle	r9
8000f708:	40 cb       	lddsp	r11,sp[0x30]
8000f70a:	58 2b       	cp.w	r11,2
8000f70c:	5f 98       	srgt	r8
8000f70e:	f3 e8 00 08 	and	r8,r9,r8
8000f712:	c2 50       	breq	8000f75c <_dtoa_r+0xa04>
8000f714:	58 01       	cp.w	r1,0
8000f716:	c1 11       	brne	8000f738 <_dtoa_r+0x9e0>
8000f718:	04 9b       	mov	r11,r2
8000f71a:	02 99       	mov	r9,r1
8000f71c:	30 5a       	mov	r10,5
8000f71e:	0e 9c       	mov	r12,r7
8000f720:	f0 1f 00 ad 	mcall	8000f9d4 <_dtoa_r+0xc7c>
8000f724:	18 92       	mov	r2,r12
8000f726:	18 9b       	mov	r11,r12
8000f728:	06 9c       	mov	r12,r3
8000f72a:	f0 1f 00 aa 	mcall	8000f9d0 <_dtoa_r+0xc78>
8000f72e:	e0 89 00 0f 	brgt	8000f74c <_dtoa_r+0x9f4>
8000f732:	c0 38       	rjmp	8000f738 <_dtoa_r+0x9e0>
8000f734:	30 02       	mov	r2,0
8000f736:	04 94       	mov	r4,r2
8000f738:	40 ea       	lddsp	r10,sp[0x38]
8000f73a:	30 09       	mov	r9,0
8000f73c:	5c da       	com	r10
8000f73e:	40 85       	lddsp	r5,sp[0x20]
8000f740:	50 6a       	stdsp	sp[0x18],r10
8000f742:	50 49       	stdsp	sp[0x10],r9
8000f744:	c0 f9       	rjmp	8000f962 <_dtoa_r+0xc0a>
8000f746:	08 92       	mov	r2,r4
8000f748:	40 66       	lddsp	r6,sp[0x18]
8000f74a:	04 94       	mov	r4,r2
8000f74c:	2f f6       	sub	r6,-1
8000f74e:	50 66       	stdsp	sp[0x18],r6
8000f750:	33 18       	mov	r8,49
8000f752:	40 85       	lddsp	r5,sp[0x20]
8000f754:	0a c8       	st.b	r5++,r8
8000f756:	30 08       	mov	r8,0
8000f758:	50 48       	stdsp	sp[0x10],r8
8000f75a:	c0 49       	rjmp	8000f962 <_dtoa_r+0xc0a>
8000f75c:	40 dc       	lddsp	r12,sp[0x34]
8000f75e:	58 0c       	cp.w	r12,0
8000f760:	e0 80 00 b5 	breq	8000f8ca <_dtoa_r+0xb72>
8000f764:	58 05       	cp.w	r5,0
8000f766:	e0 8a 00 08 	brle	8000f776 <_dtoa_r+0xa1e>
8000f76a:	08 9b       	mov	r11,r4
8000f76c:	0a 9a       	mov	r10,r5
8000f76e:	0e 9c       	mov	r12,r7
8000f770:	f0 1f 00 97 	mcall	8000f9cc <_dtoa_r+0xc74>
8000f774:	18 94       	mov	r4,r12
8000f776:	40 6b       	lddsp	r11,sp[0x18]
8000f778:	58 0b       	cp.w	r11,0
8000f77a:	c0 31       	brne	8000f780 <_dtoa_r+0xa28>
8000f77c:	08 9c       	mov	r12,r4
8000f77e:	c1 38       	rjmp	8000f7a4 <_dtoa_r+0xa4c>
8000f780:	68 1b       	ld.w	r11,r4[0x4]
8000f782:	0e 9c       	mov	r12,r7
8000f784:	f0 1f 00 95 	mcall	8000f9d8 <_dtoa_r+0xc80>
8000f788:	68 4a       	ld.w	r10,r4[0x10]
8000f78a:	18 95       	mov	r5,r12
8000f78c:	e8 cb ff f4 	sub	r11,r4,-12
8000f790:	2f ea       	sub	r10,-2
8000f792:	2f 4c       	sub	r12,-12
8000f794:	a3 6a       	lsl	r10,0x2
8000f796:	f0 1f 00 92 	mcall	8000f9dc <_dtoa_r+0xc84>
8000f79a:	0a 9b       	mov	r11,r5
8000f79c:	30 1a       	mov	r10,1
8000f79e:	0e 9c       	mov	r12,r7
8000f7a0:	f0 1f 00 8b 	mcall	8000f9cc <_dtoa_r+0xc74>
8000f7a4:	50 44       	stdsp	sp[0x10],r4
8000f7a6:	40 3a       	lddsp	r10,sp[0xc]
8000f7a8:	30 19       	mov	r9,1
8000f7aa:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000f7ae:	18 94       	mov	r4,r12
8000f7b0:	50 da       	stdsp	sp[0x34],r10
8000f7b2:	40 85       	lddsp	r5,sp[0x20]
8000f7b4:	50 99       	stdsp	sp[0x24],r9
8000f7b6:	50 26       	stdsp	sp[0x8],r6
8000f7b8:	50 e1       	stdsp	sp[0x38],r1
8000f7ba:	04 9b       	mov	r11,r2
8000f7bc:	06 9c       	mov	r12,r3
8000f7be:	f0 1f 00 89 	mcall	8000f9e0 <_dtoa_r+0xc88>
8000f7c2:	40 4b       	lddsp	r11,sp[0x10]
8000f7c4:	f8 c0 ff d0 	sub	r0,r12,-48
8000f7c8:	06 9c       	mov	r12,r3
8000f7ca:	f0 1f 00 82 	mcall	8000f9d0 <_dtoa_r+0xc78>
8000f7ce:	08 9a       	mov	r10,r4
8000f7d0:	50 6c       	stdsp	sp[0x18],r12
8000f7d2:	04 9b       	mov	r11,r2
8000f7d4:	0e 9c       	mov	r12,r7
8000f7d6:	f0 1f 00 84 	mcall	8000f9e4 <_dtoa_r+0xc8c>
8000f7da:	18 91       	mov	r1,r12
8000f7dc:	78 38       	ld.w	r8,r12[0xc]
8000f7de:	58 08       	cp.w	r8,0
8000f7e0:	c0 30       	breq	8000f7e6 <_dtoa_r+0xa8e>
8000f7e2:	30 16       	mov	r6,1
8000f7e4:	c0 68       	rjmp	8000f7f0 <_dtoa_r+0xa98>
8000f7e6:	18 9b       	mov	r11,r12
8000f7e8:	06 9c       	mov	r12,r3
8000f7ea:	f0 1f 00 7a 	mcall	8000f9d0 <_dtoa_r+0xc78>
8000f7ee:	18 96       	mov	r6,r12
8000f7f0:	0e 9c       	mov	r12,r7
8000f7f2:	02 9b       	mov	r11,r1
8000f7f4:	f0 1f 00 74 	mcall	8000f9c4 <_dtoa_r+0xc6c>
8000f7f8:	40 cc       	lddsp	r12,sp[0x30]
8000f7fa:	ed ec 10 08 	or	r8,r6,r12
8000f7fe:	c0 d1       	brne	8000f818 <_dtoa_r+0xac0>
8000f800:	40 db       	lddsp	r11,sp[0x34]
8000f802:	58 0b       	cp.w	r11,0
8000f804:	c0 a1       	brne	8000f818 <_dtoa_r+0xac0>
8000f806:	40 26       	lddsp	r6,sp[0x8]
8000f808:	e0 40 00 39 	cp.w	r0,57
8000f80c:	c3 00       	breq	8000f86c <_dtoa_r+0xb14>
8000f80e:	40 6a       	lddsp	r10,sp[0x18]
8000f810:	58 0a       	cp.w	r10,0
8000f812:	e0 89 00 24 	brgt	8000f85a <_dtoa_r+0xb02>
8000f816:	c2 f8       	rjmp	8000f874 <_dtoa_r+0xb1c>
8000f818:	40 69       	lddsp	r9,sp[0x18]
8000f81a:	58 09       	cp.w	r9,0
8000f81c:	c0 85       	brlt	8000f82c <_dtoa_r+0xad4>
8000f81e:	12 98       	mov	r8,r9
8000f820:	40 cc       	lddsp	r12,sp[0x30]
8000f822:	18 48       	or	r8,r12
8000f824:	c1 d1       	brne	8000f85e <_dtoa_r+0xb06>
8000f826:	40 db       	lddsp	r11,sp[0x34]
8000f828:	58 0b       	cp.w	r11,0
8000f82a:	c1 a1       	brne	8000f85e <_dtoa_r+0xb06>
8000f82c:	0c 99       	mov	r9,r6
8000f82e:	40 26       	lddsp	r6,sp[0x8]
8000f830:	58 09       	cp.w	r9,0
8000f832:	e0 8a 00 21 	brle	8000f874 <_dtoa_r+0xb1c>
8000f836:	06 9b       	mov	r11,r3
8000f838:	30 1a       	mov	r10,1
8000f83a:	0e 9c       	mov	r12,r7
8000f83c:	f0 1f 00 64 	mcall	8000f9cc <_dtoa_r+0xc74>
8000f840:	04 9b       	mov	r11,r2
8000f842:	18 93       	mov	r3,r12
8000f844:	f0 1f 00 63 	mcall	8000f9d0 <_dtoa_r+0xc78>
8000f848:	e0 89 00 06 	brgt	8000f854 <_dtoa_r+0xafc>
8000f84c:	c1 41       	brne	8000f874 <_dtoa_r+0xb1c>
8000f84e:	ed b0 00 00 	bld	r0,0x0
8000f852:	c1 11       	brne	8000f874 <_dtoa_r+0xb1c>
8000f854:	e0 40 00 39 	cp.w	r0,57
8000f858:	c0 a0       	breq	8000f86c <_dtoa_r+0xb14>
8000f85a:	2f f0       	sub	r0,-1
8000f85c:	c0 c8       	rjmp	8000f874 <_dtoa_r+0xb1c>
8000f85e:	58 06       	cp.w	r6,0
8000f860:	e0 8a 00 0c 	brle	8000f878 <_dtoa_r+0xb20>
8000f864:	40 26       	lddsp	r6,sp[0x8]
8000f866:	e0 40 00 39 	cp.w	r0,57
8000f86a:	c0 41       	brne	8000f872 <_dtoa_r+0xb1a>
8000f86c:	33 98       	mov	r8,57
8000f86e:	0a c8       	st.b	r5++,r8
8000f870:	c6 78       	rjmp	8000f93e <_dtoa_r+0xbe6>
8000f872:	2f f0       	sub	r0,-1
8000f874:	0a c0       	st.b	r5++,r0
8000f876:	c7 58       	rjmp	8000f960 <_dtoa_r+0xc08>
8000f878:	0a c0       	st.b	r5++,r0
8000f87a:	40 9a       	lddsp	r10,sp[0x24]
8000f87c:	40 e9       	lddsp	r9,sp[0x38]
8000f87e:	12 3a       	cp.w	r10,r9
8000f880:	c4 30       	breq	8000f906 <_dtoa_r+0xbae>
8000f882:	06 9b       	mov	r11,r3
8000f884:	30 09       	mov	r9,0
8000f886:	30 aa       	mov	r10,10
8000f888:	0e 9c       	mov	r12,r7
8000f88a:	f0 1f 00 53 	mcall	8000f9d4 <_dtoa_r+0xc7c>
8000f88e:	40 48       	lddsp	r8,sp[0x10]
8000f890:	18 93       	mov	r3,r12
8000f892:	08 38       	cp.w	r8,r4
8000f894:	c0 91       	brne	8000f8a6 <_dtoa_r+0xb4e>
8000f896:	10 9b       	mov	r11,r8
8000f898:	30 09       	mov	r9,0
8000f89a:	30 aa       	mov	r10,10
8000f89c:	0e 9c       	mov	r12,r7
8000f89e:	f0 1f 00 4e 	mcall	8000f9d4 <_dtoa_r+0xc7c>
8000f8a2:	50 4c       	stdsp	sp[0x10],r12
8000f8a4:	c0 e8       	rjmp	8000f8c0 <_dtoa_r+0xb68>
8000f8a6:	40 4b       	lddsp	r11,sp[0x10]
8000f8a8:	30 09       	mov	r9,0
8000f8aa:	30 aa       	mov	r10,10
8000f8ac:	0e 9c       	mov	r12,r7
8000f8ae:	f0 1f 00 4a 	mcall	8000f9d4 <_dtoa_r+0xc7c>
8000f8b2:	08 9b       	mov	r11,r4
8000f8b4:	50 4c       	stdsp	sp[0x10],r12
8000f8b6:	30 09       	mov	r9,0
8000f8b8:	30 aa       	mov	r10,10
8000f8ba:	0e 9c       	mov	r12,r7
8000f8bc:	f0 1f 00 46 	mcall	8000f9d4 <_dtoa_r+0xc7c>
8000f8c0:	18 94       	mov	r4,r12
8000f8c2:	40 9c       	lddsp	r12,sp[0x24]
8000f8c4:	2f fc       	sub	r12,-1
8000f8c6:	50 9c       	stdsp	sp[0x24],r12
8000f8c8:	c7 9b       	rjmp	8000f7ba <_dtoa_r+0xa62>
8000f8ca:	30 18       	mov	r8,1
8000f8cc:	06 90       	mov	r0,r3
8000f8ce:	40 85       	lddsp	r5,sp[0x20]
8000f8d0:	08 93       	mov	r3,r4
8000f8d2:	0c 94       	mov	r4,r6
8000f8d4:	10 96       	mov	r6,r8
8000f8d6:	04 9b       	mov	r11,r2
8000f8d8:	00 9c       	mov	r12,r0
8000f8da:	f0 1f 00 42 	mcall	8000f9e0 <_dtoa_r+0xc88>
8000f8de:	2d 0c       	sub	r12,-48
8000f8e0:	0a cc       	st.b	r5++,r12
8000f8e2:	02 36       	cp.w	r6,r1
8000f8e4:	c0 a4       	brge	8000f8f8 <_dtoa_r+0xba0>
8000f8e6:	00 9b       	mov	r11,r0
8000f8e8:	30 09       	mov	r9,0
8000f8ea:	30 aa       	mov	r10,10
8000f8ec:	0e 9c       	mov	r12,r7
8000f8ee:	2f f6       	sub	r6,-1
8000f8f0:	f0 1f 00 39 	mcall	8000f9d4 <_dtoa_r+0xc7c>
8000f8f4:	18 90       	mov	r0,r12
8000f8f6:	cf 0b       	rjmp	8000f8d6 <_dtoa_r+0xb7e>
8000f8f8:	08 96       	mov	r6,r4
8000f8fa:	30 0b       	mov	r11,0
8000f8fc:	06 94       	mov	r4,r3
8000f8fe:	50 4b       	stdsp	sp[0x10],r11
8000f900:	00 93       	mov	r3,r0
8000f902:	18 90       	mov	r0,r12
8000f904:	c0 28       	rjmp	8000f908 <_dtoa_r+0xbb0>
8000f906:	40 26       	lddsp	r6,sp[0x8]
8000f908:	06 9b       	mov	r11,r3
8000f90a:	30 1a       	mov	r10,1
8000f90c:	0e 9c       	mov	r12,r7
8000f90e:	f0 1f 00 30 	mcall	8000f9cc <_dtoa_r+0xc74>
8000f912:	04 9b       	mov	r11,r2
8000f914:	18 93       	mov	r3,r12
8000f916:	f0 1f 00 2f 	mcall	8000f9d0 <_dtoa_r+0xc78>
8000f91a:	e0 89 00 12 	brgt	8000f93e <_dtoa_r+0xbe6>
8000f91e:	c1 b1       	brne	8000f954 <_dtoa_r+0xbfc>
8000f920:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000f924:	c0 d1       	brne	8000f93e <_dtoa_r+0xbe6>
8000f926:	c1 78       	rjmp	8000f954 <_dtoa_r+0xbfc>
8000f928:	40 89       	lddsp	r9,sp[0x20]
8000f92a:	12 38       	cp.w	r8,r9
8000f92c:	c0 30       	breq	8000f932 <_dtoa_r+0xbda>
8000f92e:	10 95       	mov	r5,r8
8000f930:	c0 88       	rjmp	8000f940 <_dtoa_r+0xbe8>
8000f932:	2f f6       	sub	r6,-1
8000f934:	50 66       	stdsp	sp[0x18],r6
8000f936:	33 18       	mov	r8,49
8000f938:	40 8c       	lddsp	r12,sp[0x20]
8000f93a:	b8 88       	st.b	r12[0x0],r8
8000f93c:	c1 38       	rjmp	8000f962 <_dtoa_r+0xc0a>
8000f93e:	33 9a       	mov	r10,57
8000f940:	0a 98       	mov	r8,r5
8000f942:	11 79       	ld.ub	r9,--r8
8000f944:	f4 09 18 00 	cp.b	r9,r10
8000f948:	cf 00       	breq	8000f928 <_dtoa_r+0xbd0>
8000f94a:	2f f9       	sub	r9,-1
8000f94c:	b0 89       	st.b	r8[0x0],r9
8000f94e:	c0 98       	rjmp	8000f960 <_dtoa_r+0xc08>
8000f950:	10 95       	mov	r5,r8
8000f952:	c0 28       	rjmp	8000f956 <_dtoa_r+0xbfe>
8000f954:	33 09       	mov	r9,48
8000f956:	0a 98       	mov	r8,r5
8000f958:	11 7a       	ld.ub	r10,--r8
8000f95a:	f2 0a 18 00 	cp.b	r10,r9
8000f95e:	cf 90       	breq	8000f950 <_dtoa_r+0xbf8>
8000f960:	50 66       	stdsp	sp[0x18],r6
8000f962:	04 9b       	mov	r11,r2
8000f964:	0e 9c       	mov	r12,r7
8000f966:	f0 1f 00 18 	mcall	8000f9c4 <_dtoa_r+0xc6c>
8000f96a:	58 04       	cp.w	r4,0
8000f96c:	c1 20       	breq	8000f990 <_dtoa_r+0xc38>
8000f96e:	40 4b       	lddsp	r11,sp[0x10]
8000f970:	08 3b       	cp.w	r11,r4
8000f972:	5f 19       	srne	r9
8000f974:	58 0b       	cp.w	r11,0
8000f976:	5f 18       	srne	r8
8000f978:	f3 e8 00 08 	and	r8,r9,r8
8000f97c:	c0 40       	breq	8000f984 <_dtoa_r+0xc2c>
8000f97e:	0e 9c       	mov	r12,r7
8000f980:	f0 1f 00 11 	mcall	8000f9c4 <_dtoa_r+0xc6c>
8000f984:	08 9b       	mov	r11,r4
8000f986:	0e 9c       	mov	r12,r7
8000f988:	f0 1f 00 0f 	mcall	8000f9c4 <_dtoa_r+0xc6c>
8000f98c:	c0 28       	rjmp	8000f990 <_dtoa_r+0xc38>
8000f98e:	50 66       	stdsp	sp[0x18],r6
8000f990:	0e 9c       	mov	r12,r7
8000f992:	06 9b       	mov	r11,r3
8000f994:	f0 1f 00 0c 	mcall	8000f9c4 <_dtoa_r+0xc6c>
8000f998:	30 08       	mov	r8,0
8000f99a:	aa 88       	st.b	r5[0x0],r8
8000f99c:	40 68       	lddsp	r8,sp[0x18]
8000f99e:	41 5a       	lddsp	r10,sp[0x54]
8000f9a0:	2f f8       	sub	r8,-1
8000f9a2:	41 29       	lddsp	r9,sp[0x48]
8000f9a4:	95 08       	st.w	r10[0x0],r8
8000f9a6:	40 8c       	lddsp	r12,sp[0x20]
8000f9a8:	58 09       	cp.w	r9,0
8000f9aa:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000f9ae:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000f9b2:	2e 6d       	sub	sp,-104
8000f9b4:	d8 32       	popm	r0-r7,pc
8000f9b6:	00 00       	add	r0,r0
8000f9b8:	80 01       	ld.sh	r1,r0[0x0]
8000f9ba:	0c 60       	and	r0,r6
8000f9bc:	80 01       	ld.sh	r1,r0[0x0]
8000f9be:	0d 00       	ld.w	r0,r6++
8000f9c0:	80 01       	ld.sh	r1,r0[0x0]
8000f9c2:	0b 58       	ld.sh	r8,--r5
8000f9c4:	80 01       	ld.sh	r1,r0[0x0]
8000f9c6:	08 88       	andn	r8,r4
8000f9c8:	80 01       	ld.sh	r1,r0[0x0]
8000f9ca:	07 68       	ld.uh	r8,--r3
8000f9cc:	80 01       	ld.sh	r1,r0[0x0]
8000f9ce:	0a c4       	st.b	r5++,r4
8000f9d0:	80 01       	ld.sh	r1,r0[0x0]
8000f9d2:	08 56       	eor	r6,r4
8000f9d4:	80 01       	ld.sh	r1,r0[0x0]
8000f9d6:	0c 78       	tst	r8,r6
8000f9d8:	80 01       	ld.sh	r1,r0[0x0]
8000f9da:	08 c0       	st.b	r4++,r0
8000f9dc:	80 00       	ld.sh	r0,r0[0x0]
8000f9de:	c6 9e       	rcall	8000f6b0 <_dtoa_r+0x958>
8000f9e0:	80 00       	ld.sh	r0,r0[0x0]
8000f9e2:	ec 34 80 01 	sub	r4,884737
8000f9e6:	09 ec       	ld.ub	r12,r4[0x6]

8000f9e8 <_fflush_r>:
8000f9e8:	d4 21       	pushm	r4-r7,lr
8000f9ea:	16 97       	mov	r7,r11
8000f9ec:	18 96       	mov	r6,r12
8000f9ee:	76 48       	ld.w	r8,r11[0x10]
8000f9f0:	58 08       	cp.w	r8,0
8000f9f2:	c7 d0       	breq	8000faec <_fflush_r+0x104>
8000f9f4:	58 0c       	cp.w	r12,0
8000f9f6:	c0 60       	breq	8000fa02 <_fflush_r+0x1a>
8000f9f8:	78 68       	ld.w	r8,r12[0x18]
8000f9fa:	58 08       	cp.w	r8,0
8000f9fc:	c0 31       	brne	8000fa02 <_fflush_r+0x1a>
8000f9fe:	f0 1f 00 3d 	mcall	8000faf0 <_fflush_r+0x108>
8000fa02:	4b d8       	lddpc	r8,8000faf4 <_fflush_r+0x10c>
8000fa04:	10 37       	cp.w	r7,r8
8000fa06:	c0 31       	brne	8000fa0c <_fflush_r+0x24>
8000fa08:	6c 07       	ld.w	r7,r6[0x0]
8000fa0a:	c0 a8       	rjmp	8000fa1e <_fflush_r+0x36>
8000fa0c:	4b b8       	lddpc	r8,8000faf8 <_fflush_r+0x110>
8000fa0e:	10 37       	cp.w	r7,r8
8000fa10:	c0 31       	brne	8000fa16 <_fflush_r+0x2e>
8000fa12:	6c 17       	ld.w	r7,r6[0x4]
8000fa14:	c0 58       	rjmp	8000fa1e <_fflush_r+0x36>
8000fa16:	4b a8       	lddpc	r8,8000fafc <_fflush_r+0x114>
8000fa18:	10 37       	cp.w	r7,r8
8000fa1a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000fa1e:	8e 6a       	ld.sh	r10,r7[0xc]
8000fa20:	14 98       	mov	r8,r10
8000fa22:	ed ba 00 03 	bld	r10,0x3
8000fa26:	c4 20       	breq	8000faaa <_fflush_r+0xc2>
8000fa28:	ab ba       	sbr	r10,0xb
8000fa2a:	ae 6a       	st.h	r7[0xc],r10
8000fa2c:	6e 18       	ld.w	r8,r7[0x4]
8000fa2e:	58 08       	cp.w	r8,0
8000fa30:	e0 89 00 06 	brgt	8000fa3c <_fflush_r+0x54>
8000fa34:	6f 08       	ld.w	r8,r7[0x40]
8000fa36:	58 08       	cp.w	r8,0
8000fa38:	e0 8a 00 5a 	brle	8000faec <_fflush_r+0x104>
8000fa3c:	6e b8       	ld.w	r8,r7[0x2c]
8000fa3e:	58 08       	cp.w	r8,0
8000fa40:	c5 60       	breq	8000faec <_fflush_r+0x104>
8000fa42:	e2 1a 10 00 	andl	r10,0x1000,COH
8000fa46:	c0 30       	breq	8000fa4c <_fflush_r+0x64>
8000fa48:	6f 55       	ld.w	r5,r7[0x54]
8000fa4a:	c0 f8       	rjmp	8000fa68 <_fflush_r+0x80>
8000fa4c:	30 19       	mov	r9,1
8000fa4e:	6e 8b       	ld.w	r11,r7[0x20]
8000fa50:	0c 9c       	mov	r12,r6
8000fa52:	5d 18       	icall	r8
8000fa54:	18 95       	mov	r5,r12
8000fa56:	5b fc       	cp.w	r12,-1
8000fa58:	c0 81       	brne	8000fa68 <_fflush_r+0x80>
8000fa5a:	6c 38       	ld.w	r8,r6[0xc]
8000fa5c:	59 d8       	cp.w	r8,29
8000fa5e:	c4 70       	breq	8000faec <_fflush_r+0x104>
8000fa60:	8e 68       	ld.sh	r8,r7[0xc]
8000fa62:	a7 a8       	sbr	r8,0x6
8000fa64:	ae 68       	st.h	r7[0xc],r8
8000fa66:	d8 22       	popm	r4-r7,pc
8000fa68:	8e 68       	ld.sh	r8,r7[0xc]
8000fa6a:	ed b8 00 02 	bld	r8,0x2
8000fa6e:	c0 91       	brne	8000fa80 <_fflush_r+0x98>
8000fa70:	6e 18       	ld.w	r8,r7[0x4]
8000fa72:	10 15       	sub	r5,r8
8000fa74:	6e d8       	ld.w	r8,r7[0x34]
8000fa76:	58 08       	cp.w	r8,0
8000fa78:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000fa7c:	eb d8 e1 15 	subne	r5,r5,r8
8000fa80:	6e b8       	ld.w	r8,r7[0x2c]
8000fa82:	0c 9c       	mov	r12,r6
8000fa84:	30 09       	mov	r9,0
8000fa86:	0a 9a       	mov	r10,r5
8000fa88:	6e 8b       	ld.w	r11,r7[0x20]
8000fa8a:	5d 18       	icall	r8
8000fa8c:	8e 68       	ld.sh	r8,r7[0xc]
8000fa8e:	0a 3c       	cp.w	r12,r5
8000fa90:	c2 61       	brne	8000fadc <_fflush_r+0xf4>
8000fa92:	ab d8       	cbr	r8,0xb
8000fa94:	30 0c       	mov	r12,0
8000fa96:	6e 49       	ld.w	r9,r7[0x10]
8000fa98:	ae 68       	st.h	r7[0xc],r8
8000fa9a:	8f 1c       	st.w	r7[0x4],r12
8000fa9c:	8f 09       	st.w	r7[0x0],r9
8000fa9e:	ed b8 00 0c 	bld	r8,0xc
8000faa2:	c2 51       	brne	8000faec <_fflush_r+0x104>
8000faa4:	ef 45 00 54 	st.w	r7[84],r5
8000faa8:	d8 22       	popm	r4-r7,pc
8000faaa:	6e 45       	ld.w	r5,r7[0x10]
8000faac:	58 05       	cp.w	r5,0
8000faae:	c1 f0       	breq	8000faec <_fflush_r+0x104>
8000fab0:	6e 04       	ld.w	r4,r7[0x0]
8000fab2:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000fab6:	8f 05       	st.w	r7[0x0],r5
8000fab8:	f9 b8 01 00 	movne	r8,0
8000fabc:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000fac0:	0a 14       	sub	r4,r5
8000fac2:	8f 28       	st.w	r7[0x8],r8
8000fac4:	c1 18       	rjmp	8000fae6 <_fflush_r+0xfe>
8000fac6:	08 99       	mov	r9,r4
8000fac8:	0a 9a       	mov	r10,r5
8000faca:	6e a8       	ld.w	r8,r7[0x28]
8000facc:	6e 8b       	ld.w	r11,r7[0x20]
8000face:	0c 9c       	mov	r12,r6
8000fad0:	5d 18       	icall	r8
8000fad2:	18 14       	sub	r4,r12
8000fad4:	58 0c       	cp.w	r12,0
8000fad6:	e0 89 00 07 	brgt	8000fae4 <_fflush_r+0xfc>
8000fada:	8e 68       	ld.sh	r8,r7[0xc]
8000fadc:	a7 a8       	sbr	r8,0x6
8000fade:	3f fc       	mov	r12,-1
8000fae0:	ae 68       	st.h	r7[0xc],r8
8000fae2:	d8 22       	popm	r4-r7,pc
8000fae4:	18 05       	add	r5,r12
8000fae6:	58 04       	cp.w	r4,0
8000fae8:	fe 99 ff ef 	brgt	8000fac6 <_fflush_r+0xde>
8000faec:	d8 2a       	popm	r4-r7,pc,r12=0
8000faee:	00 00       	add	r0,r0
8000faf0:	80 00       	ld.sh	r0,r0[0x0]
8000faf2:	fb c4       	*unknown*
8000faf4:	80 01       	ld.sh	r1,r0[0x0]
8000faf6:	25 38       	sub	r8,83
8000faf8:	80 01       	ld.sh	r1,r0[0x0]
8000fafa:	25 58       	sub	r8,85
8000fafc:	80 01       	ld.sh	r1,r0[0x0]
8000fafe:	25 78       	sub	r8,87

8000fb00 <__sfp_lock_acquire>:
8000fb00:	5e fc       	retal	r12

8000fb02 <__sfp_lock_release>:
8000fb02:	5e fc       	retal	r12

8000fb04 <_cleanup_r>:
8000fb04:	d4 01       	pushm	lr
8000fb06:	48 3b       	lddpc	r11,8000fb10 <_cleanup_r+0xc>
8000fb08:	f0 1f 00 03 	mcall	8000fb14 <_cleanup_r+0x10>
8000fb0c:	d8 02       	popm	pc
8000fb0e:	00 00       	add	r0,r0
8000fb10:	80 01       	ld.sh	r1,r0[0x0]
8000fb12:	14 40       	or	r0,r10
8000fb14:	80 01       	ld.sh	r1,r0[0x0]
8000fb16:	01 80       	ld.ub	r0,r0[0x0]

8000fb18 <__sfmoreglue>:
8000fb18:	d4 21       	pushm	r4-r7,lr
8000fb1a:	16 95       	mov	r5,r11
8000fb1c:	f6 06 10 5c 	mul	r6,r11,92
8000fb20:	ec cb ff f4 	sub	r11,r6,-12
8000fb24:	f0 1f 00 07 	mcall	8000fb40 <__sfmoreglue+0x28>
8000fb28:	18 97       	mov	r7,r12
8000fb2a:	c0 90       	breq	8000fb3c <__sfmoreglue+0x24>
8000fb2c:	99 15       	st.w	r12[0x4],r5
8000fb2e:	30 0b       	mov	r11,0
8000fb30:	2f 4c       	sub	r12,-12
8000fb32:	0c 9a       	mov	r10,r6
8000fb34:	8f 2c       	st.w	r7[0x8],r12
8000fb36:	8f 0b       	st.w	r7[0x0],r11
8000fb38:	f0 1f 00 03 	mcall	8000fb44 <__sfmoreglue+0x2c>
8000fb3c:	0e 9c       	mov	r12,r7
8000fb3e:	d8 22       	popm	r4-r7,pc
8000fb40:	80 01       	ld.sh	r1,r0[0x0]
8000fb42:	02 c0       	st.b	r1++,r0
8000fb44:	80 00       	ld.sh	r0,r0[0x0]
8000fb46:	c7 e6       	brmi	8000fc42 <__sinit+0x7e>

8000fb48 <__sfp>:
8000fb48:	d4 21       	pushm	r4-r7,lr
8000fb4a:	49 c8       	lddpc	r8,8000fbb8 <__sfp+0x70>
8000fb4c:	18 96       	mov	r6,r12
8000fb4e:	70 07       	ld.w	r7,r8[0x0]
8000fb50:	6e 68       	ld.w	r8,r7[0x18]
8000fb52:	58 08       	cp.w	r8,0
8000fb54:	c0 41       	brne	8000fb5c <__sfp+0x14>
8000fb56:	0e 9c       	mov	r12,r7
8000fb58:	f0 1f 00 19 	mcall	8000fbbc <__sfp+0x74>
8000fb5c:	ee c7 ff 28 	sub	r7,r7,-216
8000fb60:	30 05       	mov	r5,0
8000fb62:	6e 2c       	ld.w	r12,r7[0x8]
8000fb64:	6e 18       	ld.w	r8,r7[0x4]
8000fb66:	c0 68       	rjmp	8000fb72 <__sfp+0x2a>
8000fb68:	98 69       	ld.sh	r9,r12[0xc]
8000fb6a:	ea 09 19 00 	cp.h	r9,r5
8000fb6e:	c1 20       	breq	8000fb92 <__sfp+0x4a>
8000fb70:	2a 4c       	sub	r12,-92
8000fb72:	20 18       	sub	r8,1
8000fb74:	cf a7       	brpl	8000fb68 <__sfp+0x20>
8000fb76:	6e 08       	ld.w	r8,r7[0x0]
8000fb78:	58 08       	cp.w	r8,0
8000fb7a:	c0 71       	brne	8000fb88 <__sfp+0x40>
8000fb7c:	30 4b       	mov	r11,4
8000fb7e:	0c 9c       	mov	r12,r6
8000fb80:	f0 1f 00 10 	mcall	8000fbc0 <__sfp+0x78>
8000fb84:	8f 0c       	st.w	r7[0x0],r12
8000fb86:	c0 30       	breq	8000fb8c <__sfp+0x44>
8000fb88:	6e 07       	ld.w	r7,r7[0x0]
8000fb8a:	ce cb       	rjmp	8000fb62 <__sfp+0x1a>
8000fb8c:	30 c8       	mov	r8,12
8000fb8e:	8d 38       	st.w	r6[0xc],r8
8000fb90:	d8 22       	popm	r4-r7,pc
8000fb92:	30 08       	mov	r8,0
8000fb94:	f9 48 00 4c 	st.w	r12[76],r8
8000fb98:	99 08       	st.w	r12[0x0],r8
8000fb9a:	99 28       	st.w	r12[0x8],r8
8000fb9c:	99 18       	st.w	r12[0x4],r8
8000fb9e:	99 48       	st.w	r12[0x10],r8
8000fba0:	99 58       	st.w	r12[0x14],r8
8000fba2:	99 68       	st.w	r12[0x18],r8
8000fba4:	99 d8       	st.w	r12[0x34],r8
8000fba6:	99 e8       	st.w	r12[0x38],r8
8000fba8:	f9 48 00 48 	st.w	r12[72],r8
8000fbac:	3f f8       	mov	r8,-1
8000fbae:	b8 78       	st.h	r12[0xe],r8
8000fbb0:	30 18       	mov	r8,1
8000fbb2:	b8 68       	st.h	r12[0xc],r8
8000fbb4:	d8 22       	popm	r4-r7,pc
8000fbb6:	00 00       	add	r0,r0
8000fbb8:	80 01       	ld.sh	r1,r0[0x0]
8000fbba:	25 9c       	sub	r12,89
8000fbbc:	80 00       	ld.sh	r0,r0[0x0]
8000fbbe:	fb c4       	*unknown*
8000fbc0:	80 00       	ld.sh	r0,r0[0x0]
8000fbc2:	fb 18 d4 21 	ld.uh	r8,sp[-11231]

8000fbc4 <__sinit>:
8000fbc4:	d4 21       	pushm	r4-r7,lr
8000fbc6:	18 96       	mov	r6,r12
8000fbc8:	78 67       	ld.w	r7,r12[0x18]
8000fbca:	58 07       	cp.w	r7,0
8000fbcc:	c4 71       	brne	8000fc5a <__sinit+0x96>
8000fbce:	4a 48       	lddpc	r8,8000fc5c <__sinit+0x98>
8000fbd0:	30 15       	mov	r5,1
8000fbd2:	99 a8       	st.w	r12[0x28],r8
8000fbd4:	f9 47 00 d8 	st.w	r12[216],r7
8000fbd8:	f9 47 00 dc 	st.w	r12[220],r7
8000fbdc:	f9 47 00 e0 	st.w	r12[224],r7
8000fbe0:	99 65       	st.w	r12[0x18],r5
8000fbe2:	f0 1f 00 20 	mcall	8000fc60 <__sinit+0x9c>
8000fbe6:	8d 0c       	st.w	r6[0x0],r12
8000fbe8:	0c 9c       	mov	r12,r6
8000fbea:	f0 1f 00 1e 	mcall	8000fc60 <__sinit+0x9c>
8000fbee:	8d 1c       	st.w	r6[0x4],r12
8000fbf0:	0c 9c       	mov	r12,r6
8000fbf2:	f0 1f 00 1c 	mcall	8000fc60 <__sinit+0x9c>
8000fbf6:	6c 09       	ld.w	r9,r6[0x0]
8000fbf8:	30 48       	mov	r8,4
8000fbfa:	93 07       	st.w	r9[0x0],r7
8000fbfc:	b2 68       	st.h	r9[0xc],r8
8000fbfe:	93 17       	st.w	r9[0x4],r7
8000fc00:	93 27       	st.w	r9[0x8],r7
8000fc02:	6c 18       	ld.w	r8,r6[0x4]
8000fc04:	b2 77       	st.h	r9[0xe],r7
8000fc06:	93 47       	st.w	r9[0x10],r7
8000fc08:	93 57       	st.w	r9[0x14],r7
8000fc0a:	93 67       	st.w	r9[0x18],r7
8000fc0c:	93 89       	st.w	r9[0x20],r9
8000fc0e:	91 07       	st.w	r8[0x0],r7
8000fc10:	91 17       	st.w	r8[0x4],r7
8000fc12:	91 27       	st.w	r8[0x8],r7
8000fc14:	49 4e       	lddpc	lr,8000fc64 <__sinit+0xa0>
8000fc16:	49 5b       	lddpc	r11,8000fc68 <__sinit+0xa4>
8000fc18:	93 9e       	st.w	r9[0x24],lr
8000fc1a:	93 ab       	st.w	r9[0x28],r11
8000fc1c:	49 4a       	lddpc	r10,8000fc6c <__sinit+0xa8>
8000fc1e:	49 54       	lddpc	r4,8000fc70 <__sinit+0xac>
8000fc20:	93 ba       	st.w	r9[0x2c],r10
8000fc22:	93 c4       	st.w	r9[0x30],r4
8000fc24:	30 99       	mov	r9,9
8000fc26:	b0 69       	st.h	r8[0xc],r9
8000fc28:	b0 75       	st.h	r8[0xe],r5
8000fc2a:	91 c4       	st.w	r8[0x30],r4
8000fc2c:	91 47       	st.w	r8[0x10],r7
8000fc2e:	91 57       	st.w	r8[0x14],r7
8000fc30:	91 67       	st.w	r8[0x18],r7
8000fc32:	91 88       	st.w	r8[0x20],r8
8000fc34:	91 9e       	st.w	r8[0x24],lr
8000fc36:	91 ab       	st.w	r8[0x28],r11
8000fc38:	91 ba       	st.w	r8[0x2c],r10
8000fc3a:	8d 2c       	st.w	r6[0x8],r12
8000fc3c:	31 28       	mov	r8,18
8000fc3e:	99 07       	st.w	r12[0x0],r7
8000fc40:	b8 68       	st.h	r12[0xc],r8
8000fc42:	99 17       	st.w	r12[0x4],r7
8000fc44:	99 27       	st.w	r12[0x8],r7
8000fc46:	30 28       	mov	r8,2
8000fc48:	b8 78       	st.h	r12[0xe],r8
8000fc4a:	99 c4       	st.w	r12[0x30],r4
8000fc4c:	99 67       	st.w	r12[0x18],r7
8000fc4e:	99 9e       	st.w	r12[0x24],lr
8000fc50:	99 ab       	st.w	r12[0x28],r11
8000fc52:	99 ba       	st.w	r12[0x2c],r10
8000fc54:	99 47       	st.w	r12[0x10],r7
8000fc56:	99 57       	st.w	r12[0x14],r7
8000fc58:	99 8c       	st.w	r12[0x20],r12
8000fc5a:	d8 22       	popm	r4-r7,pc
8000fc5c:	80 00       	ld.sh	r0,r0[0x0]
8000fc5e:	fb 04 80 00 	ld.sh	r4,sp[-32768]
8000fc62:	fb 48 80 01 	st.w	sp[-32767],r8
8000fc66:	11 6c       	ld.uh	r12,--r8
8000fc68:	80 01       	ld.sh	r1,r0[0x0]
8000fc6a:	11 34       	ld.ub	r4,r8++
8000fc6c:	80 01       	ld.sh	r1,r0[0x0]
8000fc6e:	11 0c       	ld.w	r12,r8++
8000fc70:	80 01       	ld.sh	r1,r0[0x0]
8000fc72:	10 fc       	st.b	--r8,r12

8000fc74 <_malloc_trim_r>:
8000fc74:	d4 21       	pushm	r4-r7,lr
8000fc76:	16 95       	mov	r5,r11
8000fc78:	18 97       	mov	r7,r12
8000fc7a:	f0 1f 00 23 	mcall	8000fd04 <_malloc_trim_r+0x90>
8000fc7e:	4a 34       	lddpc	r4,8000fd08 <_malloc_trim_r+0x94>
8000fc80:	68 28       	ld.w	r8,r4[0x8]
8000fc82:	70 16       	ld.w	r6,r8[0x4]
8000fc84:	e0 16 ff fc 	andl	r6,0xfffc
8000fc88:	ec c8 ff 91 	sub	r8,r6,-111
8000fc8c:	f0 05 01 05 	sub	r5,r8,r5
8000fc90:	e0 15 ff 80 	andl	r5,0xff80
8000fc94:	ea c5 00 80 	sub	r5,r5,128
8000fc98:	e0 45 00 7f 	cp.w	r5,127
8000fc9c:	e0 8a 00 23 	brle	8000fce2 <_malloc_trim_r+0x6e>
8000fca0:	30 0b       	mov	r11,0
8000fca2:	0e 9c       	mov	r12,r7
8000fca4:	f0 1f 00 1a 	mcall	8000fd0c <_malloc_trim_r+0x98>
8000fca8:	68 28       	ld.w	r8,r4[0x8]
8000fcaa:	0c 08       	add	r8,r6
8000fcac:	10 3c       	cp.w	r12,r8
8000fcae:	c1 a1       	brne	8000fce2 <_malloc_trim_r+0x6e>
8000fcb0:	ea 0b 11 00 	rsub	r11,r5,0
8000fcb4:	0e 9c       	mov	r12,r7
8000fcb6:	f0 1f 00 16 	mcall	8000fd0c <_malloc_trim_r+0x98>
8000fcba:	5b fc       	cp.w	r12,-1
8000fcbc:	c1 71       	brne	8000fcea <_malloc_trim_r+0x76>
8000fcbe:	30 0b       	mov	r11,0
8000fcc0:	0e 9c       	mov	r12,r7
8000fcc2:	f0 1f 00 13 	mcall	8000fd0c <_malloc_trim_r+0x98>
8000fcc6:	68 28       	ld.w	r8,r4[0x8]
8000fcc8:	f8 08 01 09 	sub	r9,r12,r8
8000fccc:	58 f9       	cp.w	r9,15
8000fcce:	e0 8a 00 0a 	brle	8000fce2 <_malloc_trim_r+0x6e>
8000fcd2:	a1 a9       	sbr	r9,0x0
8000fcd4:	91 19       	st.w	r8[0x4],r9
8000fcd6:	48 f8       	lddpc	r8,8000fd10 <_malloc_trim_r+0x9c>
8000fcd8:	70 09       	ld.w	r9,r8[0x0]
8000fcda:	48 f8       	lddpc	r8,8000fd14 <_malloc_trim_r+0xa0>
8000fcdc:	f8 09 01 09 	sub	r9,r12,r9
8000fce0:	91 09       	st.w	r8[0x0],r9
8000fce2:	0e 9c       	mov	r12,r7
8000fce4:	f0 1f 00 0d 	mcall	8000fd18 <_malloc_trim_r+0xa4>
8000fce8:	d8 2a       	popm	r4-r7,pc,r12=0
8000fcea:	68 28       	ld.w	r8,r4[0x8]
8000fcec:	0a 16       	sub	r6,r5
8000fcee:	a1 a6       	sbr	r6,0x0
8000fcf0:	91 16       	st.w	r8[0x4],r6
8000fcf2:	48 98       	lddpc	r8,8000fd14 <_malloc_trim_r+0xa0>
8000fcf4:	70 09       	ld.w	r9,r8[0x0]
8000fcf6:	0a 19       	sub	r9,r5
8000fcf8:	0e 9c       	mov	r12,r7
8000fcfa:	91 09       	st.w	r8[0x0],r9
8000fcfc:	f0 1f 00 07 	mcall	8000fd18 <_malloc_trim_r+0xa4>
8000fd00:	da 2a       	popm	r4-r7,pc,r12=1
8000fd02:	00 00       	add	r0,r0
8000fd04:	80 01       	ld.sh	r1,r0[0x0]
8000fd06:	07 64       	ld.uh	r4,--r3
8000fd08:	00 00       	add	r0,r0
8000fd0a:	01 ac       	ld.ub	r12,r0[0x2]
8000fd0c:	80 01       	ld.sh	r1,r0[0x0]
8000fd0e:	10 d4       	st.w	--r8,r4
8000fd10:	00 00       	add	r0,r0
8000fd12:	05 b8       	ld.ub	r8,r2[0x3]
8000fd14:	00 00       	add	r0,r0
8000fd16:	07 e0       	ld.ub	r0,r3[0x6]
8000fd18:	80 01       	ld.sh	r1,r0[0x0]
8000fd1a:	07 66       	ld.uh	r6,--r3

8000fd1c <_free_r>:
8000fd1c:	d4 21       	pushm	r4-r7,lr
8000fd1e:	16 96       	mov	r6,r11
8000fd20:	18 97       	mov	r7,r12
8000fd22:	58 0b       	cp.w	r11,0
8000fd24:	e0 80 00 c8 	breq	8000feb4 <_free_r+0x198>
8000fd28:	f0 1f 00 4c 	mcall	8000fe58 <_free_r+0x13c>
8000fd2c:	20 86       	sub	r6,8
8000fd2e:	4c ca       	lddpc	r10,8000fe5c <_free_r+0x140>
8000fd30:	6c 18       	ld.w	r8,r6[0x4]
8000fd32:	74 2e       	ld.w	lr,r10[0x8]
8000fd34:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000fd38:	a1 c8       	cbr	r8,0x0
8000fd3a:	ec 08 00 09 	add	r9,r6,r8
8000fd3e:	72 1b       	ld.w	r11,r9[0x4]
8000fd40:	e0 1b ff fc 	andl	r11,0xfffc
8000fd44:	1c 39       	cp.w	r9,lr
8000fd46:	c1 d1       	brne	8000fd80 <_free_r+0x64>
8000fd48:	f6 08 00 08 	add	r8,r11,r8
8000fd4c:	58 0c       	cp.w	r12,0
8000fd4e:	c0 81       	brne	8000fd5e <_free_r+0x42>
8000fd50:	6c 09       	ld.w	r9,r6[0x0]
8000fd52:	12 16       	sub	r6,r9
8000fd54:	12 08       	add	r8,r9
8000fd56:	6c 3b       	ld.w	r11,r6[0xc]
8000fd58:	6c 29       	ld.w	r9,r6[0x8]
8000fd5a:	97 29       	st.w	r11[0x8],r9
8000fd5c:	93 3b       	st.w	r9[0xc],r11
8000fd5e:	10 99       	mov	r9,r8
8000fd60:	95 26       	st.w	r10[0x8],r6
8000fd62:	a1 a9       	sbr	r9,0x0
8000fd64:	8d 19       	st.w	r6[0x4],r9
8000fd66:	4b f9       	lddpc	r9,8000fe60 <_free_r+0x144>
8000fd68:	72 09       	ld.w	r9,r9[0x0]
8000fd6a:	12 38       	cp.w	r8,r9
8000fd6c:	c0 63       	brcs	8000fd78 <_free_r+0x5c>
8000fd6e:	4b e8       	lddpc	r8,8000fe64 <_free_r+0x148>
8000fd70:	0e 9c       	mov	r12,r7
8000fd72:	70 0b       	ld.w	r11,r8[0x0]
8000fd74:	f0 1f 00 3d 	mcall	8000fe68 <_free_r+0x14c>
8000fd78:	0e 9c       	mov	r12,r7
8000fd7a:	f0 1f 00 3d 	mcall	8000fe6c <_free_r+0x150>
8000fd7e:	d8 22       	popm	r4-r7,pc
8000fd80:	93 1b       	st.w	r9[0x4],r11
8000fd82:	58 0c       	cp.w	r12,0
8000fd84:	c0 30       	breq	8000fd8a <_free_r+0x6e>
8000fd86:	30 0c       	mov	r12,0
8000fd88:	c1 08       	rjmp	8000fda8 <_free_r+0x8c>
8000fd8a:	6c 0e       	ld.w	lr,r6[0x0]
8000fd8c:	f4 c5 ff f8 	sub	r5,r10,-8
8000fd90:	1c 16       	sub	r6,lr
8000fd92:	1c 08       	add	r8,lr
8000fd94:	6c 2e       	ld.w	lr,r6[0x8]
8000fd96:	0a 3e       	cp.w	lr,r5
8000fd98:	f9 bc 00 01 	moveq	r12,1
8000fd9c:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000fda0:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000fda4:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000fda8:	f2 0b 00 0e 	add	lr,r9,r11
8000fdac:	7c 1e       	ld.w	lr,lr[0x4]
8000fdae:	ed be 00 00 	bld	lr,0x0
8000fdb2:	c1 30       	breq	8000fdd8 <_free_r+0xbc>
8000fdb4:	16 08       	add	r8,r11
8000fdb6:	58 0c       	cp.w	r12,0
8000fdb8:	c0 c1       	brne	8000fdd0 <_free_r+0xb4>
8000fdba:	4a 9e       	lddpc	lr,8000fe5c <_free_r+0x140>
8000fdbc:	72 2b       	ld.w	r11,r9[0x8]
8000fdbe:	2f 8e       	sub	lr,-8
8000fdc0:	1c 3b       	cp.w	r11,lr
8000fdc2:	c0 71       	brne	8000fdd0 <_free_r+0xb4>
8000fdc4:	97 36       	st.w	r11[0xc],r6
8000fdc6:	97 26       	st.w	r11[0x8],r6
8000fdc8:	8d 2b       	st.w	r6[0x8],r11
8000fdca:	8d 3b       	st.w	r6[0xc],r11
8000fdcc:	30 1c       	mov	r12,1
8000fdce:	c0 58       	rjmp	8000fdd8 <_free_r+0xbc>
8000fdd0:	72 2b       	ld.w	r11,r9[0x8]
8000fdd2:	72 39       	ld.w	r9,r9[0xc]
8000fdd4:	93 2b       	st.w	r9[0x8],r11
8000fdd6:	97 39       	st.w	r11[0xc],r9
8000fdd8:	10 99       	mov	r9,r8
8000fdda:	ec 08 09 08 	st.w	r6[r8],r8
8000fdde:	a1 a9       	sbr	r9,0x0
8000fde0:	8d 19       	st.w	r6[0x4],r9
8000fde2:	58 0c       	cp.w	r12,0
8000fde4:	c6 51       	brne	8000feae <_free_r+0x192>
8000fde6:	e0 48 01 ff 	cp.w	r8,511
8000fdea:	e0 8b 00 13 	brhi	8000fe10 <_free_r+0xf4>
8000fdee:	a3 98       	lsr	r8,0x3
8000fdf0:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000fdf4:	72 2b       	ld.w	r11,r9[0x8]
8000fdf6:	8d 39       	st.w	r6[0xc],r9
8000fdf8:	8d 2b       	st.w	r6[0x8],r11
8000fdfa:	97 36       	st.w	r11[0xc],r6
8000fdfc:	93 26       	st.w	r9[0x8],r6
8000fdfe:	a3 48       	asr	r8,0x2
8000fe00:	74 19       	ld.w	r9,r10[0x4]
8000fe02:	30 1b       	mov	r11,1
8000fe04:	f6 08 09 48 	lsl	r8,r11,r8
8000fe08:	f3 e8 10 08 	or	r8,r9,r8
8000fe0c:	95 18       	st.w	r10[0x4],r8
8000fe0e:	c5 08       	rjmp	8000feae <_free_r+0x192>
8000fe10:	f0 0b 16 09 	lsr	r11,r8,0x9
8000fe14:	58 4b       	cp.w	r11,4
8000fe16:	e0 8b 00 06 	brhi	8000fe22 <_free_r+0x106>
8000fe1a:	f0 0b 16 06 	lsr	r11,r8,0x6
8000fe1e:	2c 8b       	sub	r11,-56
8000fe20:	c2 b8       	rjmp	8000fe76 <_free_r+0x15a>
8000fe22:	59 4b       	cp.w	r11,20
8000fe24:	e0 8b 00 04 	brhi	8000fe2c <_free_r+0x110>
8000fe28:	2a 5b       	sub	r11,-91
8000fe2a:	c2 68       	rjmp	8000fe76 <_free_r+0x15a>
8000fe2c:	e0 4b 00 54 	cp.w	r11,84
8000fe30:	e0 8b 00 06 	brhi	8000fe3c <_free_r+0x120>
8000fe34:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000fe38:	29 2b       	sub	r11,-110
8000fe3a:	c1 e8       	rjmp	8000fe76 <_free_r+0x15a>
8000fe3c:	e0 4b 01 54 	cp.w	r11,340
8000fe40:	e0 8b 00 06 	brhi	8000fe4c <_free_r+0x130>
8000fe44:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000fe48:	28 9b       	sub	r11,-119
8000fe4a:	c1 68       	rjmp	8000fe76 <_free_r+0x15a>
8000fe4c:	e0 4b 05 54 	cp.w	r11,1364
8000fe50:	e0 88 00 10 	brls	8000fe70 <_free_r+0x154>
8000fe54:	37 eb       	mov	r11,126
8000fe56:	c1 08       	rjmp	8000fe76 <_free_r+0x15a>
8000fe58:	80 01       	ld.sh	r1,r0[0x0]
8000fe5a:	07 64       	ld.uh	r4,--r3
8000fe5c:	00 00       	add	r0,r0
8000fe5e:	01 ac       	ld.ub	r12,r0[0x2]
8000fe60:	00 00       	add	r0,r0
8000fe62:	05 b4       	ld.ub	r4,r2[0x3]
8000fe64:	00 00       	add	r0,r0
8000fe66:	07 dc       	ld.ub	r12,r3[0x5]
8000fe68:	80 00       	ld.sh	r0,r0[0x0]
8000fe6a:	fc 74 80 01 	mov	r4,-163839
8000fe6e:	07 66       	ld.uh	r6,--r3
8000fe70:	f0 0b 16 12 	lsr	r11,r8,0x12
8000fe74:	28 4b       	sub	r11,-124
8000fe76:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000fe7a:	78 29       	ld.w	r9,r12[0x8]
8000fe7c:	18 39       	cp.w	r9,r12
8000fe7e:	c0 e1       	brne	8000fe9a <_free_r+0x17e>
8000fe80:	74 18       	ld.w	r8,r10[0x4]
8000fe82:	a3 4b       	asr	r11,0x2
8000fe84:	30 1c       	mov	r12,1
8000fe86:	f8 0b 09 4b 	lsl	r11,r12,r11
8000fe8a:	f1 eb 10 0b 	or	r11,r8,r11
8000fe8e:	12 98       	mov	r8,r9
8000fe90:	95 1b       	st.w	r10[0x4],r11
8000fe92:	c0 a8       	rjmp	8000fea6 <_free_r+0x18a>
8000fe94:	72 29       	ld.w	r9,r9[0x8]
8000fe96:	18 39       	cp.w	r9,r12
8000fe98:	c0 60       	breq	8000fea4 <_free_r+0x188>
8000fe9a:	72 1a       	ld.w	r10,r9[0x4]
8000fe9c:	e0 1a ff fc 	andl	r10,0xfffc
8000fea0:	14 38       	cp.w	r8,r10
8000fea2:	cf 93       	brcs	8000fe94 <_free_r+0x178>
8000fea4:	72 38       	ld.w	r8,r9[0xc]
8000fea6:	8d 38       	st.w	r6[0xc],r8
8000fea8:	8d 29       	st.w	r6[0x8],r9
8000feaa:	93 36       	st.w	r9[0xc],r6
8000feac:	91 26       	st.w	r8[0x8],r6
8000feae:	0e 9c       	mov	r12,r7
8000feb0:	f0 1f 00 02 	mcall	8000feb8 <_free_r+0x19c>
8000feb4:	d8 22       	popm	r4-r7,pc
8000feb6:	00 00       	add	r0,r0
8000feb8:	80 01       	ld.sh	r1,r0[0x0]
8000feba:	07 66       	ld.uh	r6,--r3

8000febc <__sfvwrite_r>:
8000febc:	d4 31       	pushm	r0-r7,lr
8000febe:	20 3d       	sub	sp,12
8000fec0:	14 94       	mov	r4,r10
8000fec2:	18 95       	mov	r5,r12
8000fec4:	16 97       	mov	r7,r11
8000fec6:	74 28       	ld.w	r8,r10[0x8]
8000fec8:	58 08       	cp.w	r8,0
8000feca:	e0 80 01 47 	breq	80010158 <__sfvwrite_r+0x29c>
8000fece:	96 68       	ld.sh	r8,r11[0xc]
8000fed0:	ed b8 00 03 	bld	r8,0x3
8000fed4:	c0 41       	brne	8000fedc <__sfvwrite_r+0x20>
8000fed6:	76 48       	ld.w	r8,r11[0x10]
8000fed8:	58 08       	cp.w	r8,0
8000feda:	c0 c1       	brne	8000fef2 <__sfvwrite_r+0x36>
8000fedc:	0e 9b       	mov	r11,r7
8000fede:	0a 9c       	mov	r12,r5
8000fee0:	f0 1f 00 a0 	mcall	80010160 <__sfvwrite_r+0x2a4>
8000fee4:	c0 70       	breq	8000fef2 <__sfvwrite_r+0x36>
8000fee6:	8e 68       	ld.sh	r8,r7[0xc]
8000fee8:	a7 a8       	sbr	r8,0x6
8000feea:	ae 68       	st.h	r7[0xc],r8
8000feec:	30 98       	mov	r8,9
8000feee:	8b 38       	st.w	r5[0xc],r8
8000fef0:	c3 29       	rjmp	80010154 <__sfvwrite_r+0x298>
8000fef2:	8e 63       	ld.sh	r3,r7[0xc]
8000fef4:	68 00       	ld.w	r0,r4[0x0]
8000fef6:	06 96       	mov	r6,r3
8000fef8:	e2 16 00 02 	andl	r6,0x2,COH
8000fefc:	c2 10       	breq	8000ff3e <__sfvwrite_r+0x82>
8000fefe:	30 03       	mov	r3,0
8000ff00:	e0 62 04 00 	mov	r2,1024
8000ff04:	06 96       	mov	r6,r3
8000ff06:	c0 48       	rjmp	8000ff0e <__sfvwrite_r+0x52>
8000ff08:	60 03       	ld.w	r3,r0[0x0]
8000ff0a:	60 16       	ld.w	r6,r0[0x4]
8000ff0c:	2f 80       	sub	r0,-8
8000ff0e:	58 06       	cp.w	r6,0
8000ff10:	cf c0       	breq	8000ff08 <__sfvwrite_r+0x4c>
8000ff12:	e0 46 04 00 	cp.w	r6,1024
8000ff16:	ec 09 17 80 	movls	r9,r6
8000ff1a:	e4 09 17 b0 	movhi	r9,r2
8000ff1e:	06 9a       	mov	r10,r3
8000ff20:	6e a8       	ld.w	r8,r7[0x28]
8000ff22:	6e 8b       	ld.w	r11,r7[0x20]
8000ff24:	0a 9c       	mov	r12,r5
8000ff26:	5d 18       	icall	r8
8000ff28:	18 16       	sub	r6,r12
8000ff2a:	58 0c       	cp.w	r12,0
8000ff2c:	e0 8a 01 11 	brle	8001014e <__sfvwrite_r+0x292>
8000ff30:	68 28       	ld.w	r8,r4[0x8]
8000ff32:	18 18       	sub	r8,r12
8000ff34:	89 28       	st.w	r4[0x8],r8
8000ff36:	e0 80 01 11 	breq	80010158 <__sfvwrite_r+0x29c>
8000ff3a:	18 03       	add	r3,r12
8000ff3c:	ce 9b       	rjmp	8000ff0e <__sfvwrite_r+0x52>
8000ff3e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000ff42:	c0 70       	breq	8000ff50 <__sfvwrite_r+0x94>
8000ff44:	50 06       	stdsp	sp[0x0],r6
8000ff46:	0c 93       	mov	r3,r6
8000ff48:	0c 91       	mov	r1,r6
8000ff4a:	50 15       	stdsp	sp[0x4],r5
8000ff4c:	08 92       	mov	r2,r4
8000ff4e:	ca 08       	rjmp	8001008e <__sfvwrite_r+0x1d2>
8000ff50:	06 96       	mov	r6,r3
8000ff52:	08 91       	mov	r1,r4
8000ff54:	c0 48       	rjmp	8000ff5c <__sfvwrite_r+0xa0>
8000ff56:	60 03       	ld.w	r3,r0[0x0]
8000ff58:	60 16       	ld.w	r6,r0[0x4]
8000ff5a:	2f 80       	sub	r0,-8
8000ff5c:	58 06       	cp.w	r6,0
8000ff5e:	cf c0       	breq	8000ff56 <__sfvwrite_r+0x9a>
8000ff60:	8e 68       	ld.sh	r8,r7[0xc]
8000ff62:	6e 24       	ld.w	r4,r7[0x8]
8000ff64:	10 99       	mov	r9,r8
8000ff66:	e2 19 02 00 	andl	r9,0x200,COH
8000ff6a:	c5 70       	breq	80010018 <__sfvwrite_r+0x15c>
8000ff6c:	08 36       	cp.w	r6,r4
8000ff6e:	c4 53       	brcs	8000fff8 <__sfvwrite_r+0x13c>
8000ff70:	10 99       	mov	r9,r8
8000ff72:	e2 19 04 80 	andl	r9,0x480,COH
8000ff76:	c4 10       	breq	8000fff8 <__sfvwrite_r+0x13c>
8000ff78:	6e 4b       	ld.w	r11,r7[0x10]
8000ff7a:	6e 09       	ld.w	r9,r7[0x0]
8000ff7c:	16 19       	sub	r9,r11
8000ff7e:	50 09       	stdsp	sp[0x0],r9
8000ff80:	6e 59       	ld.w	r9,r7[0x14]
8000ff82:	10 9c       	mov	r12,r8
8000ff84:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000ff88:	30 28       	mov	r8,2
8000ff8a:	f4 08 0c 08 	divs	r8,r10,r8
8000ff8e:	fa e9 00 04 	st.d	sp[4],r8
8000ff92:	10 94       	mov	r4,r8
8000ff94:	40 09       	lddsp	r9,sp[0x0]
8000ff96:	e2 1c 04 00 	andl	r12,0x400,COH
8000ff9a:	2f f9       	sub	r9,-1
8000ff9c:	0c 09       	add	r9,r6
8000ff9e:	12 38       	cp.w	r8,r9
8000ffa0:	f2 04 17 30 	movlo	r4,r9
8000ffa4:	58 0c       	cp.w	r12,0
8000ffa6:	c1 10       	breq	8000ffc8 <__sfvwrite_r+0x10c>
8000ffa8:	08 9b       	mov	r11,r4
8000ffaa:	0a 9c       	mov	r12,r5
8000ffac:	f0 1f 00 6e 	mcall	80010164 <__sfvwrite_r+0x2a8>
8000ffb0:	18 92       	mov	r2,r12
8000ffb2:	c1 50       	breq	8000ffdc <__sfvwrite_r+0x120>
8000ffb4:	40 0a       	lddsp	r10,sp[0x0]
8000ffb6:	6e 4b       	ld.w	r11,r7[0x10]
8000ffb8:	f0 1f 00 6c 	mcall	80010168 <__sfvwrite_r+0x2ac>
8000ffbc:	8e 68       	ld.sh	r8,r7[0xc]
8000ffbe:	e0 18 fb 7f 	andl	r8,0xfb7f
8000ffc2:	a7 b8       	sbr	r8,0x7
8000ffc4:	ae 68       	st.h	r7[0xc],r8
8000ffc6:	c0 e8       	rjmp	8000ffe2 <__sfvwrite_r+0x126>
8000ffc8:	08 9a       	mov	r10,r4
8000ffca:	0a 9c       	mov	r12,r5
8000ffcc:	f0 1f 00 68 	mcall	8001016c <__sfvwrite_r+0x2b0>
8000ffd0:	18 92       	mov	r2,r12
8000ffd2:	c0 81       	brne	8000ffe2 <__sfvwrite_r+0x126>
8000ffd4:	6e 4b       	ld.w	r11,r7[0x10]
8000ffd6:	0a 9c       	mov	r12,r5
8000ffd8:	f0 1f 00 66 	mcall	80010170 <__sfvwrite_r+0x2b4>
8000ffdc:	30 c8       	mov	r8,12
8000ffde:	8b 38       	st.w	r5[0xc],r8
8000ffe0:	cb 78       	rjmp	8001014e <__sfvwrite_r+0x292>
8000ffe2:	40 0a       	lddsp	r10,sp[0x0]
8000ffe4:	40 09       	lddsp	r9,sp[0x0]
8000ffe6:	e8 0a 01 0a 	sub	r10,r4,r10
8000ffea:	e4 09 00 08 	add	r8,r2,r9
8000ffee:	8f 54       	st.w	r7[0x14],r4
8000fff0:	8f 2a       	st.w	r7[0x8],r10
8000fff2:	8f 08       	st.w	r7[0x0],r8
8000fff4:	8f 42       	st.w	r7[0x10],r2
8000fff6:	0c 94       	mov	r4,r6
8000fff8:	08 36       	cp.w	r6,r4
8000fffa:	ec 04 17 30 	movlo	r4,r6
8000fffe:	06 9b       	mov	r11,r3
80010000:	08 9a       	mov	r10,r4
80010002:	6e 0c       	ld.w	r12,r7[0x0]
80010004:	f0 1f 00 5c 	mcall	80010174 <__sfvwrite_r+0x2b8>
80010008:	6e 08       	ld.w	r8,r7[0x0]
8001000a:	08 08       	add	r8,r4
8001000c:	8f 08       	st.w	r7[0x0],r8
8001000e:	6e 28       	ld.w	r8,r7[0x8]
80010010:	08 18       	sub	r8,r4
80010012:	0c 94       	mov	r4,r6
80010014:	8f 28       	st.w	r7[0x8],r8
80010016:	c3 08       	rjmp	80010076 <__sfvwrite_r+0x1ba>
80010018:	08 36       	cp.w	r6,r4
8001001a:	5f ba       	srhi	r10
8001001c:	6e 0c       	ld.w	r12,r7[0x0]
8001001e:	6e 48       	ld.w	r8,r7[0x10]
80010020:	10 3c       	cp.w	r12,r8
80010022:	5f b8       	srhi	r8
80010024:	f5 e8 00 08 	and	r8,r10,r8
80010028:	f2 08 18 00 	cp.b	r8,r9
8001002c:	c0 e0       	breq	80010048 <__sfvwrite_r+0x18c>
8001002e:	06 9b       	mov	r11,r3
80010030:	08 9a       	mov	r10,r4
80010032:	f0 1f 00 51 	mcall	80010174 <__sfvwrite_r+0x2b8>
80010036:	6e 08       	ld.w	r8,r7[0x0]
80010038:	08 08       	add	r8,r4
8001003a:	0e 9b       	mov	r11,r7
8001003c:	8f 08       	st.w	r7[0x0],r8
8001003e:	0a 9c       	mov	r12,r5
80010040:	f0 1f 00 4e 	mcall	80010178 <__sfvwrite_r+0x2bc>
80010044:	c1 90       	breq	80010076 <__sfvwrite_r+0x1ba>
80010046:	c8 48       	rjmp	8001014e <__sfvwrite_r+0x292>
80010048:	6e 59       	ld.w	r9,r7[0x14]
8001004a:	12 36       	cp.w	r6,r9
8001004c:	c0 a3       	brcs	80010060 <__sfvwrite_r+0x1a4>
8001004e:	6e a8       	ld.w	r8,r7[0x28]
80010050:	06 9a       	mov	r10,r3
80010052:	6e 8b       	ld.w	r11,r7[0x20]
80010054:	0a 9c       	mov	r12,r5
80010056:	5d 18       	icall	r8
80010058:	18 94       	mov	r4,r12
8001005a:	e0 89 00 0e 	brgt	80010076 <__sfvwrite_r+0x1ba>
8001005e:	c7 88       	rjmp	8001014e <__sfvwrite_r+0x292>
80010060:	0c 9a       	mov	r10,r6
80010062:	06 9b       	mov	r11,r3
80010064:	f0 1f 00 44 	mcall	80010174 <__sfvwrite_r+0x2b8>
80010068:	6e 08       	ld.w	r8,r7[0x0]
8001006a:	0c 08       	add	r8,r6
8001006c:	0c 94       	mov	r4,r6
8001006e:	8f 08       	st.w	r7[0x0],r8
80010070:	6e 28       	ld.w	r8,r7[0x8]
80010072:	0c 18       	sub	r8,r6
80010074:	8f 28       	st.w	r7[0x8],r8
80010076:	62 28       	ld.w	r8,r1[0x8]
80010078:	08 18       	sub	r8,r4
8001007a:	83 28       	st.w	r1[0x8],r8
8001007c:	c6 e0       	breq	80010158 <__sfvwrite_r+0x29c>
8001007e:	08 16       	sub	r6,r4
80010080:	08 03       	add	r3,r4
80010082:	c6 db       	rjmp	8000ff5c <__sfvwrite_r+0xa0>
80010084:	60 03       	ld.w	r3,r0[0x0]
80010086:	60 11       	ld.w	r1,r0[0x4]
80010088:	30 08       	mov	r8,0
8001008a:	2f 80       	sub	r0,-8
8001008c:	50 08       	stdsp	sp[0x0],r8
8001008e:	58 01       	cp.w	r1,0
80010090:	cf a0       	breq	80010084 <__sfvwrite_r+0x1c8>
80010092:	40 0a       	lddsp	r10,sp[0x0]
80010094:	58 0a       	cp.w	r10,0
80010096:	c1 51       	brne	800100c0 <__sfvwrite_r+0x204>
80010098:	e2 c6 ff ff 	sub	r6,r1,-1
8001009c:	02 9a       	mov	r10,r1
8001009e:	30 ab       	mov	r11,10
800100a0:	06 9c       	mov	r12,r3
800100a2:	f0 1f 00 37 	mcall	8001017c <__sfvwrite_r+0x2c0>
800100a6:	f8 c8 ff ff 	sub	r8,r12,-1
800100aa:	58 0c       	cp.w	r12,0
800100ac:	f1 d3 e1 16 	subne	r6,r8,r3
800100b0:	f9 b9 01 01 	movne	r9,1
800100b4:	fb f9 1a 00 	st.wne	sp[0x0],r9
800100b8:	f9 b8 00 01 	moveq	r8,1
800100bc:	fb f8 0a 00 	st.weq	sp[0x0],r8
800100c0:	02 36       	cp.w	r6,r1
800100c2:	ec 04 17 80 	movls	r4,r6
800100c6:	e2 04 17 b0 	movhi	r4,r1
800100ca:	6e 59       	ld.w	r9,r7[0x14]
800100cc:	6e 25       	ld.w	r5,r7[0x8]
800100ce:	f2 05 00 05 	add	r5,r9,r5
800100d2:	0a 34       	cp.w	r4,r5
800100d4:	5f 9a       	srgt	r10
800100d6:	6e 0c       	ld.w	r12,r7[0x0]
800100d8:	6e 48       	ld.w	r8,r7[0x10]
800100da:	10 3c       	cp.w	r12,r8
800100dc:	5f b8       	srhi	r8
800100de:	f5 e8 00 08 	and	r8,r10,r8
800100e2:	30 0a       	mov	r10,0
800100e4:	f4 08 18 00 	cp.b	r8,r10
800100e8:	c0 e0       	breq	80010104 <__sfvwrite_r+0x248>
800100ea:	06 9b       	mov	r11,r3
800100ec:	0a 9a       	mov	r10,r5
800100ee:	f0 1f 00 22 	mcall	80010174 <__sfvwrite_r+0x2b8>
800100f2:	6e 08       	ld.w	r8,r7[0x0]
800100f4:	0a 08       	add	r8,r5
800100f6:	0e 9b       	mov	r11,r7
800100f8:	8f 08       	st.w	r7[0x0],r8
800100fa:	40 1c       	lddsp	r12,sp[0x4]
800100fc:	f0 1f 00 1f 	mcall	80010178 <__sfvwrite_r+0x2bc>
80010100:	c1 80       	breq	80010130 <__sfvwrite_r+0x274>
80010102:	c2 68       	rjmp	8001014e <__sfvwrite_r+0x292>
80010104:	12 34       	cp.w	r4,r9
80010106:	c0 a5       	brlt	8001011a <__sfvwrite_r+0x25e>
80010108:	6e a8       	ld.w	r8,r7[0x28]
8001010a:	06 9a       	mov	r10,r3
8001010c:	6e 8b       	ld.w	r11,r7[0x20]
8001010e:	40 1c       	lddsp	r12,sp[0x4]
80010110:	5d 18       	icall	r8
80010112:	18 95       	mov	r5,r12
80010114:	e0 89 00 0e 	brgt	80010130 <__sfvwrite_r+0x274>
80010118:	c1 b8       	rjmp	8001014e <__sfvwrite_r+0x292>
8001011a:	08 9a       	mov	r10,r4
8001011c:	06 9b       	mov	r11,r3
8001011e:	f0 1f 00 16 	mcall	80010174 <__sfvwrite_r+0x2b8>
80010122:	6e 08       	ld.w	r8,r7[0x0]
80010124:	08 08       	add	r8,r4
80010126:	08 95       	mov	r5,r4
80010128:	8f 08       	st.w	r7[0x0],r8
8001012a:	6e 28       	ld.w	r8,r7[0x8]
8001012c:	08 18       	sub	r8,r4
8001012e:	8f 28       	st.w	r7[0x8],r8
80010130:	0a 16       	sub	r6,r5
80010132:	c0 71       	brne	80010140 <__sfvwrite_r+0x284>
80010134:	0e 9b       	mov	r11,r7
80010136:	40 1c       	lddsp	r12,sp[0x4]
80010138:	f0 1f 00 10 	mcall	80010178 <__sfvwrite_r+0x2bc>
8001013c:	c0 91       	brne	8001014e <__sfvwrite_r+0x292>
8001013e:	50 06       	stdsp	sp[0x0],r6
80010140:	64 28       	ld.w	r8,r2[0x8]
80010142:	0a 18       	sub	r8,r5
80010144:	85 28       	st.w	r2[0x8],r8
80010146:	c0 90       	breq	80010158 <__sfvwrite_r+0x29c>
80010148:	0a 11       	sub	r1,r5
8001014a:	0a 03       	add	r3,r5
8001014c:	ca 1b       	rjmp	8001008e <__sfvwrite_r+0x1d2>
8001014e:	8e 68       	ld.sh	r8,r7[0xc]
80010150:	a7 a8       	sbr	r8,0x6
80010152:	ae 68       	st.h	r7[0xc],r8
80010154:	3f fc       	mov	r12,-1
80010156:	c0 28       	rjmp	8001015a <__sfvwrite_r+0x29e>
80010158:	30 0c       	mov	r12,0
8001015a:	2f dd       	sub	sp,-12
8001015c:	d8 32       	popm	r0-r7,pc
8001015e:	00 00       	add	r0,r0
80010160:	80 00       	ld.sh	r0,r0[0x0]
80010162:	eb 4c 80 01 	st.w	r5[-32767],r12
80010166:	02 c0       	st.b	r1++,r0
80010168:	80 00       	ld.sh	r0,r0[0x0]
8001016a:	c6 9e       	rcall	8000fe3c <_free_r+0x120>
8001016c:	80 01       	ld.sh	r1,r0[0x0]
8001016e:	0d ac       	ld.ub	r12,r6[0x2]
80010170:	80 00       	ld.sh	r0,r0[0x0]
80010172:	fd 1c 80 01 	ld.uh	r12,lr[-32767]
80010176:	07 26       	ld.uh	r6,r3++
80010178:	80 00       	ld.sh	r0,r0[0x0]
8001017a:	f9 e8 80 01 	sthh.w	r1[r0],r12:b,r8:b
8001017e:	07 10       	ld.sh	r0,r3++

80010180 <_fwalk>:
80010180:	d4 31       	pushm	r0-r7,lr
80010182:	30 05       	mov	r5,0
80010184:	16 91       	mov	r1,r11
80010186:	f8 c7 ff 28 	sub	r7,r12,-216
8001018a:	0a 92       	mov	r2,r5
8001018c:	f0 1f 00 10 	mcall	800101cc <_fwalk+0x4c>
80010190:	3f f3       	mov	r3,-1
80010192:	c1 68       	rjmp	800101be <_fwalk+0x3e>
80010194:	6e 26       	ld.w	r6,r7[0x8]
80010196:	6e 14       	ld.w	r4,r7[0x4]
80010198:	2f 46       	sub	r6,-12
8001019a:	c0 c8       	rjmp	800101b2 <_fwalk+0x32>
8001019c:	8c 08       	ld.sh	r8,r6[0x0]
8001019e:	e4 08 19 00 	cp.h	r8,r2
800101a2:	c0 70       	breq	800101b0 <_fwalk+0x30>
800101a4:	8c 18       	ld.sh	r8,r6[0x2]
800101a6:	e6 08 19 00 	cp.h	r8,r3
800101aa:	c0 30       	breq	800101b0 <_fwalk+0x30>
800101ac:	5d 11       	icall	r1
800101ae:	18 45       	or	r5,r12
800101b0:	2a 46       	sub	r6,-92
800101b2:	20 14       	sub	r4,1
800101b4:	ec cc 00 0c 	sub	r12,r6,12
800101b8:	58 04       	cp.w	r4,0
800101ba:	cf 14       	brge	8001019c <_fwalk+0x1c>
800101bc:	6e 07       	ld.w	r7,r7[0x0]
800101be:	58 07       	cp.w	r7,0
800101c0:	ce a1       	brne	80010194 <_fwalk+0x14>
800101c2:	f0 1f 00 04 	mcall	800101d0 <_fwalk+0x50>
800101c6:	0a 9c       	mov	r12,r5
800101c8:	d8 32       	popm	r0-r7,pc
800101ca:	00 00       	add	r0,r0
800101cc:	80 00       	ld.sh	r0,r0[0x0]
800101ce:	fb 00 80 00 	ld.sh	r0,sp[-32768]
800101d2:	fb 02 48 1c 	ld.sh	r2,sp[18460]

800101d4 <_localeconv_r>:
800101d4:	48 1c       	lddpc	r12,800101d8 <_localeconv_r+0x4>
800101d6:	5e fc       	retal	r12
800101d8:	80 01       	ld.sh	r1,r0[0x0]
800101da:	25 a0       	sub	r0,90

800101dc <__smakebuf_r>:
800101dc:	d4 21       	pushm	r4-r7,lr
800101de:	20 fd       	sub	sp,60
800101e0:	96 68       	ld.sh	r8,r11[0xc]
800101e2:	16 97       	mov	r7,r11
800101e4:	18 96       	mov	r6,r12
800101e6:	e2 18 00 02 	andl	r8,0x2,COH
800101ea:	c3 c1       	brne	80010262 <__smakebuf_r+0x86>
800101ec:	96 7b       	ld.sh	r11,r11[0xe]
800101ee:	f0 0b 19 00 	cp.h	r11,r8
800101f2:	c0 55       	brlt	800101fc <__smakebuf_r+0x20>
800101f4:	1a 9a       	mov	r10,sp
800101f6:	f0 1f 00 28 	mcall	80010294 <__smakebuf_r+0xb8>
800101fa:	c0 f4       	brge	80010218 <__smakebuf_r+0x3c>
800101fc:	8e 65       	ld.sh	r5,r7[0xc]
800101fe:	0a 98       	mov	r8,r5
80010200:	ab b8       	sbr	r8,0xb
80010202:	e2 15 00 80 	andl	r5,0x80,COH
80010206:	ae 68       	st.h	r7[0xc],r8
80010208:	30 04       	mov	r4,0
8001020a:	e0 68 04 00 	mov	r8,1024
8001020e:	f9 b5 01 40 	movne	r5,64
80010212:	f0 05 17 00 	moveq	r5,r8
80010216:	c1 b8       	rjmp	8001024c <__smakebuf_r+0x70>
80010218:	40 18       	lddsp	r8,sp[0x4]
8001021a:	e2 18 f0 00 	andl	r8,0xf000,COH
8001021e:	e0 48 20 00 	cp.w	r8,8192
80010222:	5f 04       	sreq	r4
80010224:	e0 48 80 00 	cp.w	r8,32768
80010228:	c0 d1       	brne	80010242 <__smakebuf_r+0x66>
8001022a:	6e b9       	ld.w	r9,r7[0x2c]
8001022c:	49 b8       	lddpc	r8,80010298 <__smakebuf_r+0xbc>
8001022e:	10 39       	cp.w	r9,r8
80010230:	c0 91       	brne	80010242 <__smakebuf_r+0x66>
80010232:	8e 68       	ld.sh	r8,r7[0xc]
80010234:	e0 65 04 00 	mov	r5,1024
80010238:	ab a8       	sbr	r8,0xa
8001023a:	ef 45 00 50 	st.w	r7[80],r5
8001023e:	ae 68       	st.h	r7[0xc],r8
80010240:	c0 68       	rjmp	8001024c <__smakebuf_r+0x70>
80010242:	8e 68       	ld.sh	r8,r7[0xc]
80010244:	e0 65 04 00 	mov	r5,1024
80010248:	ab b8       	sbr	r8,0xb
8001024a:	ae 68       	st.h	r7[0xc],r8
8001024c:	0a 9b       	mov	r11,r5
8001024e:	0c 9c       	mov	r12,r6
80010250:	f0 1f 00 13 	mcall	8001029c <__smakebuf_r+0xc0>
80010254:	8e 68       	ld.sh	r8,r7[0xc]
80010256:	c0 d1       	brne	80010270 <__smakebuf_r+0x94>
80010258:	ed b8 00 09 	bld	r8,0x9
8001025c:	c1 a0       	breq	80010290 <__smakebuf_r+0xb4>
8001025e:	a1 b8       	sbr	r8,0x1
80010260:	ae 68       	st.h	r7[0xc],r8
80010262:	ee c8 ff b9 	sub	r8,r7,-71
80010266:	8f 48       	st.w	r7[0x10],r8
80010268:	8f 08       	st.w	r7[0x0],r8
8001026a:	30 18       	mov	r8,1
8001026c:	8f 58       	st.w	r7[0x14],r8
8001026e:	c1 18       	rjmp	80010290 <__smakebuf_r+0xb4>
80010270:	a7 b8       	sbr	r8,0x7
80010272:	8f 4c       	st.w	r7[0x10],r12
80010274:	ae 68       	st.h	r7[0xc],r8
80010276:	8f 55       	st.w	r7[0x14],r5
80010278:	48 a8       	lddpc	r8,800102a0 <__smakebuf_r+0xc4>
8001027a:	8f 0c       	st.w	r7[0x0],r12
8001027c:	8d a8       	st.w	r6[0x28],r8
8001027e:	58 04       	cp.w	r4,0
80010280:	c0 80       	breq	80010290 <__smakebuf_r+0xb4>
80010282:	8e 7c       	ld.sh	r12,r7[0xe]
80010284:	f0 1f 00 08 	mcall	800102a4 <__smakebuf_r+0xc8>
80010288:	c0 40       	breq	80010290 <__smakebuf_r+0xb4>
8001028a:	8e 68       	ld.sh	r8,r7[0xc]
8001028c:	a1 a8       	sbr	r8,0x0
8001028e:	ae 68       	st.h	r7[0xc],r8
80010290:	2f 1d       	sub	sp,-60
80010292:	d8 22       	popm	r4-r7,pc
80010294:	80 01       	ld.sh	r1,r0[0x0]
80010296:	14 58       	eor	r8,r10
80010298:	80 01       	ld.sh	r1,r0[0x0]
8001029a:	11 0c       	ld.w	r12,r8++
8001029c:	80 01       	ld.sh	r1,r0[0x0]
8001029e:	02 c0       	st.b	r1++,r0
800102a0:	80 00       	ld.sh	r0,r0[0x0]
800102a2:	fb 04 80 01 	ld.sh	r4,sp[-32767]
800102a6:	11 f0       	ld.ub	r0,r8[0x7]

800102a8 <malloc>:
800102a8:	d4 01       	pushm	lr
800102aa:	48 48       	lddpc	r8,800102b8 <malloc+0x10>
800102ac:	18 9b       	mov	r11,r12
800102ae:	70 0c       	ld.w	r12,r8[0x0]
800102b0:	f0 1f 00 03 	mcall	800102bc <malloc+0x14>
800102b4:	d8 02       	popm	pc
800102b6:	00 00       	add	r0,r0
800102b8:	00 00       	add	r0,r0
800102ba:	01 a8       	ld.ub	r8,r0[0x2]
800102bc:	80 01       	ld.sh	r1,r0[0x0]
800102be:	02 c0       	st.b	r1++,r0

800102c0 <_malloc_r>:
800102c0:	d4 31       	pushm	r0-r7,lr
800102c2:	f6 c8 ff f5 	sub	r8,r11,-11
800102c6:	18 95       	mov	r5,r12
800102c8:	10 97       	mov	r7,r8
800102ca:	e0 17 ff f8 	andl	r7,0xfff8
800102ce:	59 68       	cp.w	r8,22
800102d0:	f9 b7 08 10 	movls	r7,16
800102d4:	16 37       	cp.w	r7,r11
800102d6:	5f 38       	srlo	r8
800102d8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800102dc:	c0 50       	breq	800102e6 <_malloc_r+0x26>
800102de:	30 c8       	mov	r8,12
800102e0:	99 38       	st.w	r12[0xc],r8
800102e2:	e0 8f 01 f3 	bral	800106c8 <_malloc_r+0x408>
800102e6:	f0 1f 00 50 	mcall	80010424 <_malloc_r+0x164>
800102ea:	e0 47 01 f7 	cp.w	r7,503
800102ee:	e0 8b 00 1c 	brhi	80010326 <_malloc_r+0x66>
800102f2:	ee 03 16 03 	lsr	r3,r7,0x3
800102f6:	4c d8       	lddpc	r8,80010428 <_malloc_r+0x168>
800102f8:	f0 03 00 38 	add	r8,r8,r3<<0x3
800102fc:	70 36       	ld.w	r6,r8[0xc]
800102fe:	10 36       	cp.w	r6,r8
80010300:	c0 61       	brne	8001030c <_malloc_r+0x4c>
80010302:	ec c8 ff f8 	sub	r8,r6,-8
80010306:	70 36       	ld.w	r6,r8[0xc]
80010308:	10 36       	cp.w	r6,r8
8001030a:	c0 c0       	breq	80010322 <_malloc_r+0x62>
8001030c:	6c 18       	ld.w	r8,r6[0x4]
8001030e:	e0 18 ff fc 	andl	r8,0xfffc
80010312:	6c 3a       	ld.w	r10,r6[0xc]
80010314:	ec 08 00 09 	add	r9,r6,r8
80010318:	0a 9c       	mov	r12,r5
8001031a:	6c 28       	ld.w	r8,r6[0x8]
8001031c:	95 28       	st.w	r10[0x8],r8
8001031e:	91 3a       	st.w	r8[0xc],r10
80010320:	c4 68       	rjmp	800103ac <_malloc_r+0xec>
80010322:	2f e3       	sub	r3,-2
80010324:	c4 c8       	rjmp	800103bc <_malloc_r+0xfc>
80010326:	ee 03 16 09 	lsr	r3,r7,0x9
8001032a:	c0 41       	brne	80010332 <_malloc_r+0x72>
8001032c:	ee 03 16 03 	lsr	r3,r7,0x3
80010330:	c2 68       	rjmp	8001037c <_malloc_r+0xbc>
80010332:	58 43       	cp.w	r3,4
80010334:	e0 8b 00 06 	brhi	80010340 <_malloc_r+0x80>
80010338:	ee 03 16 06 	lsr	r3,r7,0x6
8001033c:	2c 83       	sub	r3,-56
8001033e:	c1 f8       	rjmp	8001037c <_malloc_r+0xbc>
80010340:	59 43       	cp.w	r3,20
80010342:	e0 8b 00 04 	brhi	8001034a <_malloc_r+0x8a>
80010346:	2a 53       	sub	r3,-91
80010348:	c1 a8       	rjmp	8001037c <_malloc_r+0xbc>
8001034a:	e0 43 00 54 	cp.w	r3,84
8001034e:	e0 8b 00 06 	brhi	8001035a <_malloc_r+0x9a>
80010352:	ee 03 16 0c 	lsr	r3,r7,0xc
80010356:	29 23       	sub	r3,-110
80010358:	c1 28       	rjmp	8001037c <_malloc_r+0xbc>
8001035a:	e0 43 01 54 	cp.w	r3,340
8001035e:	e0 8b 00 06 	brhi	8001036a <_malloc_r+0xaa>
80010362:	ee 03 16 0f 	lsr	r3,r7,0xf
80010366:	28 93       	sub	r3,-119
80010368:	c0 a8       	rjmp	8001037c <_malloc_r+0xbc>
8001036a:	e0 43 05 54 	cp.w	r3,1364
8001036e:	e0 88 00 04 	brls	80010376 <_malloc_r+0xb6>
80010372:	37 e3       	mov	r3,126
80010374:	c0 48       	rjmp	8001037c <_malloc_r+0xbc>
80010376:	ee 03 16 12 	lsr	r3,r7,0x12
8001037a:	28 43       	sub	r3,-124
8001037c:	4a ba       	lddpc	r10,80010428 <_malloc_r+0x168>
8001037e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80010382:	74 36       	ld.w	r6,r10[0xc]
80010384:	c1 98       	rjmp	800103b6 <_malloc_r+0xf6>
80010386:	6c 19       	ld.w	r9,r6[0x4]
80010388:	e0 19 ff fc 	andl	r9,0xfffc
8001038c:	f2 07 01 0b 	sub	r11,r9,r7
80010390:	58 fb       	cp.w	r11,15
80010392:	e0 8a 00 04 	brle	8001039a <_malloc_r+0xda>
80010396:	20 13       	sub	r3,1
80010398:	c1 18       	rjmp	800103ba <_malloc_r+0xfa>
8001039a:	6c 38       	ld.w	r8,r6[0xc]
8001039c:	58 0b       	cp.w	r11,0
8001039e:	c0 b5       	brlt	800103b4 <_malloc_r+0xf4>
800103a0:	6c 2a       	ld.w	r10,r6[0x8]
800103a2:	ec 09 00 09 	add	r9,r6,r9
800103a6:	0a 9c       	mov	r12,r5
800103a8:	91 2a       	st.w	r8[0x8],r10
800103aa:	95 38       	st.w	r10[0xc],r8
800103ac:	72 18       	ld.w	r8,r9[0x4]
800103ae:	a1 a8       	sbr	r8,0x0
800103b0:	93 18       	st.w	r9[0x4],r8
800103b2:	cb c8       	rjmp	8001052a <_malloc_r+0x26a>
800103b4:	10 96       	mov	r6,r8
800103b6:	14 36       	cp.w	r6,r10
800103b8:	ce 71       	brne	80010386 <_malloc_r+0xc6>
800103ba:	2f f3       	sub	r3,-1
800103bc:	49 ba       	lddpc	r10,80010428 <_malloc_r+0x168>
800103be:	f4 cc ff f8 	sub	r12,r10,-8
800103c2:	78 26       	ld.w	r6,r12[0x8]
800103c4:	18 36       	cp.w	r6,r12
800103c6:	c6 e0       	breq	800104a2 <_malloc_r+0x1e2>
800103c8:	6c 19       	ld.w	r9,r6[0x4]
800103ca:	e0 19 ff fc 	andl	r9,0xfffc
800103ce:	f2 07 01 08 	sub	r8,r9,r7
800103d2:	58 f8       	cp.w	r8,15
800103d4:	e0 89 00 90 	brgt	800104f4 <_malloc_r+0x234>
800103d8:	99 3c       	st.w	r12[0xc],r12
800103da:	99 2c       	st.w	r12[0x8],r12
800103dc:	58 08       	cp.w	r8,0
800103de:	c0 55       	brlt	800103e8 <_malloc_r+0x128>
800103e0:	ec 09 00 09 	add	r9,r6,r9
800103e4:	0a 9c       	mov	r12,r5
800103e6:	ce 3b       	rjmp	800103ac <_malloc_r+0xec>
800103e8:	e0 49 01 ff 	cp.w	r9,511
800103ec:	e0 8b 00 13 	brhi	80010412 <_malloc_r+0x152>
800103f0:	a3 99       	lsr	r9,0x3
800103f2:	f4 09 00 38 	add	r8,r10,r9<<0x3
800103f6:	70 2b       	ld.w	r11,r8[0x8]
800103f8:	8d 38       	st.w	r6[0xc],r8
800103fa:	8d 2b       	st.w	r6[0x8],r11
800103fc:	97 36       	st.w	r11[0xc],r6
800103fe:	91 26       	st.w	r8[0x8],r6
80010400:	a3 49       	asr	r9,0x2
80010402:	74 18       	ld.w	r8,r10[0x4]
80010404:	30 1b       	mov	r11,1
80010406:	f6 09 09 49 	lsl	r9,r11,r9
8001040a:	f1 e9 10 09 	or	r9,r8,r9
8001040e:	95 19       	st.w	r10[0x4],r9
80010410:	c4 98       	rjmp	800104a2 <_malloc_r+0x1e2>
80010412:	f2 0a 16 09 	lsr	r10,r9,0x9
80010416:	58 4a       	cp.w	r10,4
80010418:	e0 8b 00 0a 	brhi	8001042c <_malloc_r+0x16c>
8001041c:	f2 0a 16 06 	lsr	r10,r9,0x6
80010420:	2c 8a       	sub	r10,-56
80010422:	c2 38       	rjmp	80010468 <_malloc_r+0x1a8>
80010424:	80 01       	ld.sh	r1,r0[0x0]
80010426:	07 64       	ld.uh	r4,--r3
80010428:	00 00       	add	r0,r0
8001042a:	01 ac       	ld.ub	r12,r0[0x2]
8001042c:	59 4a       	cp.w	r10,20
8001042e:	e0 8b 00 04 	brhi	80010436 <_malloc_r+0x176>
80010432:	2a 5a       	sub	r10,-91
80010434:	c1 a8       	rjmp	80010468 <_malloc_r+0x1a8>
80010436:	e0 4a 00 54 	cp.w	r10,84
8001043a:	e0 8b 00 06 	brhi	80010446 <_malloc_r+0x186>
8001043e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80010442:	29 2a       	sub	r10,-110
80010444:	c1 28       	rjmp	80010468 <_malloc_r+0x1a8>
80010446:	e0 4a 01 54 	cp.w	r10,340
8001044a:	e0 8b 00 06 	brhi	80010456 <_malloc_r+0x196>
8001044e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80010452:	28 9a       	sub	r10,-119
80010454:	c0 a8       	rjmp	80010468 <_malloc_r+0x1a8>
80010456:	e0 4a 05 54 	cp.w	r10,1364
8001045a:	e0 88 00 04 	brls	80010462 <_malloc_r+0x1a2>
8001045e:	37 ea       	mov	r10,126
80010460:	c0 48       	rjmp	80010468 <_malloc_r+0x1a8>
80010462:	f2 0a 16 12 	lsr	r10,r9,0x12
80010466:	28 4a       	sub	r10,-124
80010468:	4c 8b       	lddpc	r11,80010588 <_malloc_r+0x2c8>
8001046a:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8001046e:	68 28       	ld.w	r8,r4[0x8]
80010470:	08 38       	cp.w	r8,r4
80010472:	c0 e1       	brne	8001048e <_malloc_r+0x1ce>
80010474:	76 19       	ld.w	r9,r11[0x4]
80010476:	a3 4a       	asr	r10,0x2
80010478:	30 1e       	mov	lr,1
8001047a:	fc 0a 09 4a 	lsl	r10,lr,r10
8001047e:	f3 ea 10 0a 	or	r10,r9,r10
80010482:	10 99       	mov	r9,r8
80010484:	97 1a       	st.w	r11[0x4],r10
80010486:	c0 a8       	rjmp	8001049a <_malloc_r+0x1da>
80010488:	70 28       	ld.w	r8,r8[0x8]
8001048a:	08 38       	cp.w	r8,r4
8001048c:	c0 60       	breq	80010498 <_malloc_r+0x1d8>
8001048e:	70 1a       	ld.w	r10,r8[0x4]
80010490:	e0 1a ff fc 	andl	r10,0xfffc
80010494:	14 39       	cp.w	r9,r10
80010496:	cf 93       	brcs	80010488 <_malloc_r+0x1c8>
80010498:	70 39       	ld.w	r9,r8[0xc]
8001049a:	8d 39       	st.w	r6[0xc],r9
8001049c:	8d 28       	st.w	r6[0x8],r8
8001049e:	91 36       	st.w	r8[0xc],r6
800104a0:	93 26       	st.w	r9[0x8],r6
800104a2:	e6 08 14 02 	asr	r8,r3,0x2
800104a6:	30 1b       	mov	r11,1
800104a8:	4b 84       	lddpc	r4,80010588 <_malloc_r+0x2c8>
800104aa:	f6 08 09 4b 	lsl	r11,r11,r8
800104ae:	68 18       	ld.w	r8,r4[0x4]
800104b0:	10 3b       	cp.w	r11,r8
800104b2:	e0 8b 00 6f 	brhi	80010590 <_malloc_r+0x2d0>
800104b6:	f7 e8 00 09 	and	r9,r11,r8
800104ba:	c0 b1       	brne	800104d0 <_malloc_r+0x210>
800104bc:	e0 13 ff fc 	andl	r3,0xfffc
800104c0:	a1 7b       	lsl	r11,0x1
800104c2:	2f c3       	sub	r3,-4
800104c4:	c0 38       	rjmp	800104ca <_malloc_r+0x20a>
800104c6:	2f c3       	sub	r3,-4
800104c8:	a1 7b       	lsl	r11,0x1
800104ca:	f7 e8 00 09 	and	r9,r11,r8
800104ce:	cf c0       	breq	800104c6 <_malloc_r+0x206>
800104d0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800104d4:	06 92       	mov	r2,r3
800104d6:	1c 91       	mov	r1,lr
800104d8:	62 36       	ld.w	r6,r1[0xc]
800104da:	c2 e8       	rjmp	80010536 <_malloc_r+0x276>
800104dc:	6c 1a       	ld.w	r10,r6[0x4]
800104de:	e0 1a ff fc 	andl	r10,0xfffc
800104e2:	f4 07 01 08 	sub	r8,r10,r7
800104e6:	58 f8       	cp.w	r8,15
800104e8:	e0 8a 00 15 	brle	80010512 <_malloc_r+0x252>
800104ec:	6c 3a       	ld.w	r10,r6[0xc]
800104ee:	6c 29       	ld.w	r9,r6[0x8]
800104f0:	95 29       	st.w	r10[0x8],r9
800104f2:	93 3a       	st.w	r9[0xc],r10
800104f4:	0e 99       	mov	r9,r7
800104f6:	ec 07 00 07 	add	r7,r6,r7
800104fa:	a1 a9       	sbr	r9,0x0
800104fc:	99 37       	st.w	r12[0xc],r7
800104fe:	99 27       	st.w	r12[0x8],r7
80010500:	8d 19       	st.w	r6[0x4],r9
80010502:	ee 08 09 08 	st.w	r7[r8],r8
80010506:	8f 2c       	st.w	r7[0x8],r12
80010508:	8f 3c       	st.w	r7[0xc],r12
8001050a:	a1 a8       	sbr	r8,0x0
8001050c:	0a 9c       	mov	r12,r5
8001050e:	8f 18       	st.w	r7[0x4],r8
80010510:	c0 d8       	rjmp	8001052a <_malloc_r+0x26a>
80010512:	6c 39       	ld.w	r9,r6[0xc]
80010514:	58 08       	cp.w	r8,0
80010516:	c0 f5       	brlt	80010534 <_malloc_r+0x274>
80010518:	ec 0a 00 0a 	add	r10,r6,r10
8001051c:	74 18       	ld.w	r8,r10[0x4]
8001051e:	a1 a8       	sbr	r8,0x0
80010520:	0a 9c       	mov	r12,r5
80010522:	95 18       	st.w	r10[0x4],r8
80010524:	6c 28       	ld.w	r8,r6[0x8]
80010526:	93 28       	st.w	r9[0x8],r8
80010528:	91 39       	st.w	r8[0xc],r9
8001052a:	f0 1f 00 19 	mcall	8001058c <_malloc_r+0x2cc>
8001052e:	ec cc ff f8 	sub	r12,r6,-8
80010532:	d8 32       	popm	r0-r7,pc
80010534:	12 96       	mov	r6,r9
80010536:	02 36       	cp.w	r6,r1
80010538:	cd 21       	brne	800104dc <_malloc_r+0x21c>
8001053a:	2f f2       	sub	r2,-1
8001053c:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80010540:	c0 30       	breq	80010546 <_malloc_r+0x286>
80010542:	2f 81       	sub	r1,-8
80010544:	cc ab       	rjmp	800104d8 <_malloc_r+0x218>
80010546:	1c 98       	mov	r8,lr
80010548:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8001054c:	c0 81       	brne	8001055c <_malloc_r+0x29c>
8001054e:	68 19       	ld.w	r9,r4[0x4]
80010550:	f6 08 11 ff 	rsub	r8,r11,-1
80010554:	f3 e8 00 08 	and	r8,r9,r8
80010558:	89 18       	st.w	r4[0x4],r8
8001055a:	c0 78       	rjmp	80010568 <_malloc_r+0x2a8>
8001055c:	f0 c9 00 08 	sub	r9,r8,8
80010560:	20 13       	sub	r3,1
80010562:	70 08       	ld.w	r8,r8[0x0]
80010564:	12 38       	cp.w	r8,r9
80010566:	cf 10       	breq	80010548 <_malloc_r+0x288>
80010568:	a1 7b       	lsl	r11,0x1
8001056a:	68 18       	ld.w	r8,r4[0x4]
8001056c:	10 3b       	cp.w	r11,r8
8001056e:	e0 8b 00 11 	brhi	80010590 <_malloc_r+0x2d0>
80010572:	58 0b       	cp.w	r11,0
80010574:	c0 e0       	breq	80010590 <_malloc_r+0x2d0>
80010576:	04 93       	mov	r3,r2
80010578:	c0 38       	rjmp	8001057e <_malloc_r+0x2be>
8001057a:	2f c3       	sub	r3,-4
8001057c:	a1 7b       	lsl	r11,0x1
8001057e:	f7 e8 00 09 	and	r9,r11,r8
80010582:	ca 71       	brne	800104d0 <_malloc_r+0x210>
80010584:	cf bb       	rjmp	8001057a <_malloc_r+0x2ba>
80010586:	00 00       	add	r0,r0
80010588:	00 00       	add	r0,r0
8001058a:	01 ac       	ld.ub	r12,r0[0x2]
8001058c:	80 01       	ld.sh	r1,r0[0x0]
8001058e:	07 66       	ld.uh	r6,--r3
80010590:	68 23       	ld.w	r3,r4[0x8]
80010592:	66 12       	ld.w	r2,r3[0x4]
80010594:	e0 12 ff fc 	andl	r2,0xfffc
80010598:	0e 32       	cp.w	r2,r7
8001059a:	5f 39       	srlo	r9
8001059c:	e4 07 01 08 	sub	r8,r2,r7
800105a0:	58 f8       	cp.w	r8,15
800105a2:	5f aa       	srle	r10
800105a4:	f5 e9 10 09 	or	r9,r10,r9
800105a8:	e0 80 00 a2 	breq	800106ec <_malloc_r+0x42c>
800105ac:	4c 88       	lddpc	r8,800106cc <_malloc_r+0x40c>
800105ae:	70 01       	ld.w	r1,r8[0x0]
800105b0:	4c 88       	lddpc	r8,800106d0 <_malloc_r+0x410>
800105b2:	2f 01       	sub	r1,-16
800105b4:	70 08       	ld.w	r8,r8[0x0]
800105b6:	0e 01       	add	r1,r7
800105b8:	5b f8       	cp.w	r8,-1
800105ba:	c0 40       	breq	800105c2 <_malloc_r+0x302>
800105bc:	28 11       	sub	r1,-127
800105be:	e0 11 ff 80 	andl	r1,0xff80
800105c2:	02 9b       	mov	r11,r1
800105c4:	0a 9c       	mov	r12,r5
800105c6:	f0 1f 00 44 	mcall	800106d4 <_malloc_r+0x414>
800105ca:	18 96       	mov	r6,r12
800105cc:	5b fc       	cp.w	r12,-1
800105ce:	c6 e0       	breq	800106aa <_malloc_r+0x3ea>
800105d0:	e6 02 00 08 	add	r8,r3,r2
800105d4:	10 3c       	cp.w	r12,r8
800105d6:	c0 32       	brcc	800105dc <_malloc_r+0x31c>
800105d8:	08 33       	cp.w	r3,r4
800105da:	c6 81       	brne	800106aa <_malloc_r+0x3ea>
800105dc:	4b fa       	lddpc	r10,800106d8 <_malloc_r+0x418>
800105de:	74 09       	ld.w	r9,r10[0x0]
800105e0:	e2 09 00 09 	add	r9,r1,r9
800105e4:	95 09       	st.w	r10[0x0],r9
800105e6:	10 36       	cp.w	r6,r8
800105e8:	c0 a1       	brne	800105fc <_malloc_r+0x33c>
800105ea:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800105ee:	c0 71       	brne	800105fc <_malloc_r+0x33c>
800105f0:	e2 02 00 02 	add	r2,r1,r2
800105f4:	68 28       	ld.w	r8,r4[0x8]
800105f6:	a1 a2       	sbr	r2,0x0
800105f8:	91 12       	st.w	r8[0x4],r2
800105fa:	c4 c8       	rjmp	80010692 <_malloc_r+0x3d2>
800105fc:	4b 5a       	lddpc	r10,800106d0 <_malloc_r+0x410>
800105fe:	74 0b       	ld.w	r11,r10[0x0]
80010600:	5b fb       	cp.w	r11,-1
80010602:	c0 31       	brne	80010608 <_malloc_r+0x348>
80010604:	95 06       	st.w	r10[0x0],r6
80010606:	c0 68       	rjmp	80010612 <_malloc_r+0x352>
80010608:	ec 09 00 09 	add	r9,r6,r9
8001060c:	4b 3a       	lddpc	r10,800106d8 <_malloc_r+0x418>
8001060e:	10 19       	sub	r9,r8
80010610:	95 09       	st.w	r10[0x0],r9
80010612:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80010616:	f0 09 11 08 	rsub	r9,r8,8
8001061a:	58 08       	cp.w	r8,0
8001061c:	f2 08 17 10 	movne	r8,r9
80010620:	ed d8 e1 06 	addne	r6,r6,r8
80010624:	28 08       	sub	r8,-128
80010626:	ec 01 00 01 	add	r1,r6,r1
8001062a:	0a 9c       	mov	r12,r5
8001062c:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80010630:	f0 01 01 01 	sub	r1,r8,r1
80010634:	02 9b       	mov	r11,r1
80010636:	f0 1f 00 28 	mcall	800106d4 <_malloc_r+0x414>
8001063a:	4a 88       	lddpc	r8,800106d8 <_malloc_r+0x418>
8001063c:	5b fc       	cp.w	r12,-1
8001063e:	ec 0c 17 00 	moveq	r12,r6
80010642:	f9 b1 00 00 	moveq	r1,0
80010646:	70 09       	ld.w	r9,r8[0x0]
80010648:	0c 1c       	sub	r12,r6
8001064a:	89 26       	st.w	r4[0x8],r6
8001064c:	02 0c       	add	r12,r1
8001064e:	12 01       	add	r1,r9
80010650:	a1 ac       	sbr	r12,0x0
80010652:	91 01       	st.w	r8[0x0],r1
80010654:	8d 1c       	st.w	r6[0x4],r12
80010656:	08 33       	cp.w	r3,r4
80010658:	c1 d0       	breq	80010692 <_malloc_r+0x3d2>
8001065a:	58 f2       	cp.w	r2,15
8001065c:	e0 8b 00 05 	brhi	80010666 <_malloc_r+0x3a6>
80010660:	30 18       	mov	r8,1
80010662:	8d 18       	st.w	r6[0x4],r8
80010664:	c2 38       	rjmp	800106aa <_malloc_r+0x3ea>
80010666:	30 59       	mov	r9,5
80010668:	20 c2       	sub	r2,12
8001066a:	e0 12 ff f8 	andl	r2,0xfff8
8001066e:	e6 02 00 08 	add	r8,r3,r2
80010672:	91 29       	st.w	r8[0x8],r9
80010674:	91 19       	st.w	r8[0x4],r9
80010676:	66 18       	ld.w	r8,r3[0x4]
80010678:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001067c:	e5 e8 10 08 	or	r8,r2,r8
80010680:	87 18       	st.w	r3[0x4],r8
80010682:	58 f2       	cp.w	r2,15
80010684:	e0 88 00 07 	brls	80010692 <_malloc_r+0x3d2>
80010688:	e6 cb ff f8 	sub	r11,r3,-8
8001068c:	0a 9c       	mov	r12,r5
8001068e:	f0 1f 00 14 	mcall	800106dc <_malloc_r+0x41c>
80010692:	49 49       	lddpc	r9,800106e0 <_malloc_r+0x420>
80010694:	72 0a       	ld.w	r10,r9[0x0]
80010696:	49 18       	lddpc	r8,800106d8 <_malloc_r+0x418>
80010698:	70 08       	ld.w	r8,r8[0x0]
8001069a:	14 38       	cp.w	r8,r10
8001069c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800106a0:	49 19       	lddpc	r9,800106e4 <_malloc_r+0x424>
800106a2:	72 0a       	ld.w	r10,r9[0x0]
800106a4:	14 38       	cp.w	r8,r10
800106a6:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800106aa:	68 28       	ld.w	r8,r4[0x8]
800106ac:	70 18       	ld.w	r8,r8[0x4]
800106ae:	e0 18 ff fc 	andl	r8,0xfffc
800106b2:	0e 38       	cp.w	r8,r7
800106b4:	5f 39       	srlo	r9
800106b6:	0e 18       	sub	r8,r7
800106b8:	58 f8       	cp.w	r8,15
800106ba:	5f aa       	srle	r10
800106bc:	f5 e9 10 09 	or	r9,r10,r9
800106c0:	c1 60       	breq	800106ec <_malloc_r+0x42c>
800106c2:	0a 9c       	mov	r12,r5
800106c4:	f0 1f 00 09 	mcall	800106e8 <_malloc_r+0x428>
800106c8:	d8 3a       	popm	r0-r7,pc,r12=0
800106ca:	00 00       	add	r0,r0
800106cc:	00 00       	add	r0,r0
800106ce:	07 dc       	ld.ub	r12,r3[0x5]
800106d0:	00 00       	add	r0,r0
800106d2:	05 b8       	ld.ub	r8,r2[0x3]
800106d4:	80 01       	ld.sh	r1,r0[0x0]
800106d6:	10 d4       	st.w	--r8,r4
800106d8:	00 00       	add	r0,r0
800106da:	07 e0       	ld.ub	r0,r3[0x6]
800106dc:	80 00       	ld.sh	r0,r0[0x0]
800106de:	fd 1c 00 00 	ld.uh	r12,lr[0]
800106e2:	07 d8       	ld.ub	r8,r3[0x5]
800106e4:	00 00       	add	r0,r0
800106e6:	07 d4       	ld.ub	r4,r3[0x5]
800106e8:	80 01       	ld.sh	r1,r0[0x0]
800106ea:	07 66       	ld.uh	r6,--r3
800106ec:	68 26       	ld.w	r6,r4[0x8]
800106ee:	a1 a8       	sbr	r8,0x0
800106f0:	0e 99       	mov	r9,r7
800106f2:	a1 a9       	sbr	r9,0x0
800106f4:	8d 19       	st.w	r6[0x4],r9
800106f6:	ec 07 00 07 	add	r7,r6,r7
800106fa:	0a 9c       	mov	r12,r5
800106fc:	89 27       	st.w	r4[0x8],r7
800106fe:	8f 18       	st.w	r7[0x4],r8
80010700:	f0 1f 00 03 	mcall	8001070c <_malloc_r+0x44c>
80010704:	ec cc ff f8 	sub	r12,r6,-8
80010708:	d8 32       	popm	r0-r7,pc
8001070a:	00 00       	add	r0,r0
8001070c:	80 01       	ld.sh	r1,r0[0x0]
8001070e:	07 66       	ld.uh	r6,--r3

80010710 <memchr>:
80010710:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80010714:	c0 68       	rjmp	80010720 <memchr+0x10>
80010716:	20 1a       	sub	r10,1
80010718:	19 88       	ld.ub	r8,r12[0x0]
8001071a:	16 38       	cp.w	r8,r11
8001071c:	5e 0c       	reteq	r12
8001071e:	2f fc       	sub	r12,-1
80010720:	58 0a       	cp.w	r10,0
80010722:	cf a1       	brne	80010716 <memchr+0x6>
80010724:	5e fa       	retal	r10

80010726 <memmove>:
80010726:	d4 01       	pushm	lr
80010728:	18 3b       	cp.w	r11,r12
8001072a:	c1 92       	brcc	8001075c <memmove+0x36>
8001072c:	f6 0a 00 09 	add	r9,r11,r10
80010730:	12 3c       	cp.w	r12,r9
80010732:	c1 52       	brcc	8001075c <memmove+0x36>
80010734:	f8 0a 00 0b 	add	r11,r12,r10
80010738:	30 08       	mov	r8,0
8001073a:	c0 68       	rjmp	80010746 <memmove+0x20>
8001073c:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80010740:	20 1a       	sub	r10,1
80010742:	f6 08 0b 0e 	st.b	r11[r8],lr
80010746:	20 18       	sub	r8,1
80010748:	58 0a       	cp.w	r10,0
8001074a:	cf 91       	brne	8001073c <memmove+0x16>
8001074c:	d8 02       	popm	pc
8001074e:	f6 08 07 09 	ld.ub	r9,r11[r8]
80010752:	20 1a       	sub	r10,1
80010754:	f8 08 0b 09 	st.b	r12[r8],r9
80010758:	2f f8       	sub	r8,-1
8001075a:	c0 28       	rjmp	8001075e <memmove+0x38>
8001075c:	30 08       	mov	r8,0
8001075e:	58 0a       	cp.w	r10,0
80010760:	cf 71       	brne	8001074e <memmove+0x28>
80010762:	d8 02       	popm	pc

80010764 <__malloc_lock>:
80010764:	5e fc       	retal	r12

80010766 <__malloc_unlock>:
80010766:	5e fc       	retal	r12

80010768 <__hi0bits>:
80010768:	18 98       	mov	r8,r12
8001076a:	e0 1c 00 00 	andl	r12,0x0
8001076e:	f0 09 15 10 	lsl	r9,r8,0x10
80010772:	58 0c       	cp.w	r12,0
80010774:	f2 08 17 00 	moveq	r8,r9
80010778:	f9 bc 00 10 	moveq	r12,16
8001077c:	f9 bc 01 00 	movne	r12,0
80010780:	10 9a       	mov	r10,r8
80010782:	f0 09 15 08 	lsl	r9,r8,0x8
80010786:	e6 1a ff 00 	andh	r10,0xff00,COH
8001078a:	f7 bc 00 f8 	subeq	r12,-8
8001078e:	f2 08 17 00 	moveq	r8,r9
80010792:	10 9a       	mov	r10,r8
80010794:	f0 09 15 04 	lsl	r9,r8,0x4
80010798:	e6 1a f0 00 	andh	r10,0xf000,COH
8001079c:	f7 bc 00 fc 	subeq	r12,-4
800107a0:	f2 08 17 00 	moveq	r8,r9
800107a4:	10 9a       	mov	r10,r8
800107a6:	f0 09 15 02 	lsl	r9,r8,0x2
800107aa:	e6 1a c0 00 	andh	r10,0xc000,COH
800107ae:	f7 bc 00 fe 	subeq	r12,-2
800107b2:	f2 08 17 00 	moveq	r8,r9
800107b6:	58 08       	cp.w	r8,0
800107b8:	5e 5c       	retlt	r12
800107ba:	ed b8 00 1e 	bld	r8,0x1e
800107be:	f9 bc 01 20 	movne	r12,32
800107c2:	f7 bc 00 ff 	subeq	r12,-1
800107c6:	5e fc       	retal	r12

800107c8 <__lo0bits>:
800107c8:	18 99       	mov	r9,r12
800107ca:	78 08       	ld.w	r8,r12[0x0]
800107cc:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800107d0:	c1 50       	breq	800107fa <__lo0bits+0x32>
800107d2:	ed b8 00 00 	bld	r8,0x0
800107d6:	c0 21       	brne	800107da <__lo0bits+0x12>
800107d8:	5e fd       	retal	0
800107da:	10 9b       	mov	r11,r8
800107dc:	f0 0a 16 01 	lsr	r10,r8,0x1
800107e0:	e2 1b 00 02 	andl	r11,0x2,COH
800107e4:	a3 88       	lsr	r8,0x2
800107e6:	58 0b       	cp.w	r11,0
800107e8:	f3 fa 1a 00 	st.wne	r9[0x0],r10
800107ec:	f9 bc 01 01 	movne	r12,1
800107f0:	f3 f8 0a 00 	st.weq	r9[0x0],r8
800107f4:	f9 bc 00 02 	moveq	r12,2
800107f8:	5e fc       	retal	r12
800107fa:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800107fe:	f0 0b 16 10 	lsr	r11,r8,0x10
80010802:	58 0a       	cp.w	r10,0
80010804:	f6 08 17 00 	moveq	r8,r11
80010808:	f9 bc 00 10 	moveq	r12,16
8001080c:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80010810:	f0 0a 16 08 	lsr	r10,r8,0x8
80010814:	58 0b       	cp.w	r11,0
80010816:	f7 bc 00 f8 	subeq	r12,-8
8001081a:	f4 08 17 00 	moveq	r8,r10
8001081e:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80010822:	f0 0a 16 04 	lsr	r10,r8,0x4
80010826:	58 0b       	cp.w	r11,0
80010828:	f7 bc 00 fc 	subeq	r12,-4
8001082c:	f4 08 17 00 	moveq	r8,r10
80010830:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80010834:	f0 0a 16 02 	lsr	r10,r8,0x2
80010838:	58 0b       	cp.w	r11,0
8001083a:	f7 bc 00 fe 	subeq	r12,-2
8001083e:	f4 08 17 00 	moveq	r8,r10
80010842:	ed b8 00 00 	bld	r8,0x0
80010846:	c0 60       	breq	80010852 <__lo0bits+0x8a>
80010848:	a1 98       	lsr	r8,0x1
8001084a:	c0 31       	brne	80010850 <__lo0bits+0x88>
8001084c:	32 0c       	mov	r12,32
8001084e:	5e fc       	retal	r12
80010850:	2f fc       	sub	r12,-1
80010852:	93 08       	st.w	r9[0x0],r8
80010854:	5e fc       	retal	r12

80010856 <__mcmp>:
80010856:	d4 01       	pushm	lr
80010858:	18 98       	mov	r8,r12
8001085a:	76 49       	ld.w	r9,r11[0x10]
8001085c:	78 4c       	ld.w	r12,r12[0x10]
8001085e:	12 1c       	sub	r12,r9
80010860:	c1 31       	brne	80010886 <__mcmp+0x30>
80010862:	2f b9       	sub	r9,-5
80010864:	a3 69       	lsl	r9,0x2
80010866:	12 0b       	add	r11,r9
80010868:	f0 09 00 09 	add	r9,r8,r9
8001086c:	2e c8       	sub	r8,-20
8001086e:	13 4e       	ld.w	lr,--r9
80010870:	17 4a       	ld.w	r10,--r11
80010872:	14 3e       	cp.w	lr,r10
80010874:	c0 60       	breq	80010880 <__mcmp+0x2a>
80010876:	f9 bc 03 ff 	movlo	r12,-1
8001087a:	f9 bc 02 01 	movhs	r12,1
8001087e:	d8 02       	popm	pc
80010880:	10 39       	cp.w	r9,r8
80010882:	fe 9b ff f6 	brhi	8001086e <__mcmp+0x18>
80010886:	d8 02       	popm	pc

80010888 <_Bfree>:
80010888:	d4 21       	pushm	r4-r7,lr
8001088a:	18 97       	mov	r7,r12
8001088c:	16 95       	mov	r5,r11
8001088e:	78 96       	ld.w	r6,r12[0x24]
80010890:	58 06       	cp.w	r6,0
80010892:	c0 91       	brne	800108a4 <_Bfree+0x1c>
80010894:	31 0c       	mov	r12,16
80010896:	f0 1f 00 0a 	mcall	800108bc <_Bfree+0x34>
8001089a:	99 36       	st.w	r12[0xc],r6
8001089c:	8f 9c       	st.w	r7[0x24],r12
8001089e:	99 16       	st.w	r12[0x4],r6
800108a0:	99 26       	st.w	r12[0x8],r6
800108a2:	99 06       	st.w	r12[0x0],r6
800108a4:	58 05       	cp.w	r5,0
800108a6:	c0 90       	breq	800108b8 <_Bfree+0x30>
800108a8:	6a 19       	ld.w	r9,r5[0x4]
800108aa:	6e 98       	ld.w	r8,r7[0x24]
800108ac:	70 38       	ld.w	r8,r8[0xc]
800108ae:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
800108b2:	8b 0a       	st.w	r5[0x0],r10
800108b4:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
800108b8:	d8 22       	popm	r4-r7,pc
800108ba:	00 00       	add	r0,r0
800108bc:	80 01       	ld.sh	r1,r0[0x0]
800108be:	02 a8       	st.w	r1++,r8

800108c0 <_Balloc>:
800108c0:	d4 21       	pushm	r4-r7,lr
800108c2:	18 97       	mov	r7,r12
800108c4:	16 96       	mov	r6,r11
800108c6:	78 95       	ld.w	r5,r12[0x24]
800108c8:	58 05       	cp.w	r5,0
800108ca:	c0 91       	brne	800108dc <_Balloc+0x1c>
800108cc:	31 0c       	mov	r12,16
800108ce:	f0 1f 00 19 	mcall	80010930 <_Balloc+0x70>
800108d2:	99 35       	st.w	r12[0xc],r5
800108d4:	8f 9c       	st.w	r7[0x24],r12
800108d6:	99 15       	st.w	r12[0x4],r5
800108d8:	99 25       	st.w	r12[0x8],r5
800108da:	99 05       	st.w	r12[0x0],r5
800108dc:	6e 95       	ld.w	r5,r7[0x24]
800108de:	6a 38       	ld.w	r8,r5[0xc]
800108e0:	58 08       	cp.w	r8,0
800108e2:	c0 b1       	brne	800108f8 <_Balloc+0x38>
800108e4:	31 0a       	mov	r10,16
800108e6:	30 4b       	mov	r11,4
800108e8:	0e 9c       	mov	r12,r7
800108ea:	f0 1f 00 13 	mcall	80010934 <_Balloc+0x74>
800108ee:	8b 3c       	st.w	r5[0xc],r12
800108f0:	6e 98       	ld.w	r8,r7[0x24]
800108f2:	70 3c       	ld.w	r12,r8[0xc]
800108f4:	58 0c       	cp.w	r12,0
800108f6:	c1 b0       	breq	8001092c <_Balloc+0x6c>
800108f8:	6e 98       	ld.w	r8,r7[0x24]
800108fa:	70 38       	ld.w	r8,r8[0xc]
800108fc:	f0 06 00 28 	add	r8,r8,r6<<0x2
80010900:	70 0c       	ld.w	r12,r8[0x0]
80010902:	58 0c       	cp.w	r12,0
80010904:	c0 40       	breq	8001090c <_Balloc+0x4c>
80010906:	78 09       	ld.w	r9,r12[0x0]
80010908:	91 09       	st.w	r8[0x0],r9
8001090a:	c0 e8       	rjmp	80010926 <_Balloc+0x66>
8001090c:	0e 9c       	mov	r12,r7
8001090e:	30 17       	mov	r7,1
80010910:	0e 9b       	mov	r11,r7
80010912:	ee 06 09 47 	lsl	r7,r7,r6
80010916:	ee ca ff fb 	sub	r10,r7,-5
8001091a:	a3 6a       	lsl	r10,0x2
8001091c:	f0 1f 00 06 	mcall	80010934 <_Balloc+0x74>
80010920:	c0 60       	breq	8001092c <_Balloc+0x6c>
80010922:	99 16       	st.w	r12[0x4],r6
80010924:	99 27       	st.w	r12[0x8],r7
80010926:	30 08       	mov	r8,0
80010928:	99 38       	st.w	r12[0xc],r8
8001092a:	99 48       	st.w	r12[0x10],r8
8001092c:	d8 22       	popm	r4-r7,pc
8001092e:	00 00       	add	r0,r0
80010930:	80 01       	ld.sh	r1,r0[0x0]
80010932:	02 a8       	st.w	r1++,r8
80010934:	80 01       	ld.sh	r1,r0[0x0]
80010936:	12 dc       	st.w	--r9,r12

80010938 <__d2b>:
80010938:	d4 31       	pushm	r0-r7,lr
8001093a:	20 2d       	sub	sp,8
8001093c:	16 93       	mov	r3,r11
8001093e:	12 96       	mov	r6,r9
80010940:	10 95       	mov	r5,r8
80010942:	14 92       	mov	r2,r10
80010944:	30 1b       	mov	r11,1
80010946:	f0 1f 00 27 	mcall	800109e0 <__d2b+0xa8>
8001094a:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8001094e:	50 09       	stdsp	sp[0x0],r9
80010950:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80010954:	b5 a9       	sbr	r9,0x14
80010956:	f0 01 16 14 	lsr	r1,r8,0x14
8001095a:	fb f9 1a 00 	st.wne	sp[0x0],r9
8001095e:	18 94       	mov	r4,r12
80010960:	58 02       	cp.w	r2,0
80010962:	c1 e0       	breq	8001099e <__d2b+0x66>
80010964:	fa cc ff f8 	sub	r12,sp,-8
80010968:	18 d2       	st.w	--r12,r2
8001096a:	f0 1f 00 1f 	mcall	800109e4 <__d2b+0xac>
8001096e:	40 18       	lddsp	r8,sp[0x4]
80010970:	c0 d0       	breq	8001098a <__d2b+0x52>
80010972:	40 09       	lddsp	r9,sp[0x0]
80010974:	f8 0a 11 20 	rsub	r10,r12,32
80010978:	f2 0a 09 4a 	lsl	r10,r9,r10
8001097c:	f5 e8 10 08 	or	r8,r10,r8
80010980:	89 58       	st.w	r4[0x14],r8
80010982:	f2 0c 0a 49 	lsr	r9,r9,r12
80010986:	50 09       	stdsp	sp[0x0],r9
80010988:	c0 28       	rjmp	8001098c <__d2b+0x54>
8001098a:	89 58       	st.w	r4[0x14],r8
8001098c:	40 08       	lddsp	r8,sp[0x0]
8001098e:	58 08       	cp.w	r8,0
80010990:	f9 b3 01 02 	movne	r3,2
80010994:	f9 b3 00 01 	moveq	r3,1
80010998:	89 68       	st.w	r4[0x18],r8
8001099a:	89 43       	st.w	r4[0x10],r3
8001099c:	c0 98       	rjmp	800109ae <__d2b+0x76>
8001099e:	1a 9c       	mov	r12,sp
800109a0:	f0 1f 00 11 	mcall	800109e4 <__d2b+0xac>
800109a4:	30 13       	mov	r3,1
800109a6:	40 08       	lddsp	r8,sp[0x0]
800109a8:	2e 0c       	sub	r12,-32
800109aa:	89 43       	st.w	r4[0x10],r3
800109ac:	89 58       	st.w	r4[0x14],r8
800109ae:	58 01       	cp.w	r1,0
800109b0:	c0 90       	breq	800109c2 <__d2b+0x8a>
800109b2:	e2 c1 04 33 	sub	r1,r1,1075
800109b6:	18 01       	add	r1,r12
800109b8:	8d 01       	st.w	r6[0x0],r1
800109ba:	f8 0c 11 35 	rsub	r12,r12,53
800109be:	8b 0c       	st.w	r5[0x0],r12
800109c0:	c0 d8       	rjmp	800109da <__d2b+0xa2>
800109c2:	e6 c8 ff fc 	sub	r8,r3,-4
800109c6:	f8 cc 04 32 	sub	r12,r12,1074
800109ca:	a5 73       	lsl	r3,0x5
800109cc:	8d 0c       	st.w	r6[0x0],r12
800109ce:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800109d2:	f0 1f 00 06 	mcall	800109e8 <__d2b+0xb0>
800109d6:	18 13       	sub	r3,r12
800109d8:	8b 03       	st.w	r5[0x0],r3
800109da:	08 9c       	mov	r12,r4
800109dc:	2f ed       	sub	sp,-8
800109de:	d8 32       	popm	r0-r7,pc
800109e0:	80 01       	ld.sh	r1,r0[0x0]
800109e2:	08 c0       	st.b	r4++,r0
800109e4:	80 01       	ld.sh	r1,r0[0x0]
800109e6:	07 c8       	ld.ub	r8,r3[0x4]
800109e8:	80 01       	ld.sh	r1,r0[0x0]
800109ea:	07 68       	ld.uh	r8,--r3

800109ec <__mdiff>:
800109ec:	d4 31       	pushm	r0-r7,lr
800109ee:	74 48       	ld.w	r8,r10[0x10]
800109f0:	76 45       	ld.w	r5,r11[0x10]
800109f2:	16 97       	mov	r7,r11
800109f4:	14 96       	mov	r6,r10
800109f6:	10 15       	sub	r5,r8
800109f8:	c1 31       	brne	80010a1e <__mdiff+0x32>
800109fa:	2f b8       	sub	r8,-5
800109fc:	ee ce ff ec 	sub	lr,r7,-20
80010a00:	a3 68       	lsl	r8,0x2
80010a02:	f4 08 00 0b 	add	r11,r10,r8
80010a06:	ee 08 00 08 	add	r8,r7,r8
80010a0a:	11 4a       	ld.w	r10,--r8
80010a0c:	17 49       	ld.w	r9,--r11
80010a0e:	12 3a       	cp.w	r10,r9
80010a10:	c0 30       	breq	80010a16 <__mdiff+0x2a>
80010a12:	c0 e2       	brcc	80010a2e <__mdiff+0x42>
80010a14:	c0 78       	rjmp	80010a22 <__mdiff+0x36>
80010a16:	1c 38       	cp.w	r8,lr
80010a18:	fe 9b ff f9 	brhi	80010a0a <__mdiff+0x1e>
80010a1c:	c4 a8       	rjmp	80010ab0 <__mdiff+0xc4>
80010a1e:	58 05       	cp.w	r5,0
80010a20:	c0 64       	brge	80010a2c <__mdiff+0x40>
80010a22:	0e 98       	mov	r8,r7
80010a24:	30 15       	mov	r5,1
80010a26:	0c 97       	mov	r7,r6
80010a28:	10 96       	mov	r6,r8
80010a2a:	c0 28       	rjmp	80010a2e <__mdiff+0x42>
80010a2c:	30 05       	mov	r5,0
80010a2e:	6e 1b       	ld.w	r11,r7[0x4]
80010a30:	f0 1f 00 24 	mcall	80010ac0 <__mdiff+0xd4>
80010a34:	6e 49       	ld.w	r9,r7[0x10]
80010a36:	6c 44       	ld.w	r4,r6[0x10]
80010a38:	99 35       	st.w	r12[0xc],r5
80010a3a:	2f b4       	sub	r4,-5
80010a3c:	f2 c5 ff fb 	sub	r5,r9,-5
80010a40:	ec 04 00 24 	add	r4,r6,r4<<0x2
80010a44:	ee 05 00 25 	add	r5,r7,r5<<0x2
80010a48:	2e c6       	sub	r6,-20
80010a4a:	2e c7       	sub	r7,-20
80010a4c:	f8 c8 ff ec 	sub	r8,r12,-20
80010a50:	30 0a       	mov	r10,0
80010a52:	0f 0e       	ld.w	lr,r7++
80010a54:	0d 0b       	ld.w	r11,r6++
80010a56:	fc 02 16 10 	lsr	r2,lr,0x10
80010a5a:	f6 03 16 10 	lsr	r3,r11,0x10
80010a5e:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80010a62:	e4 03 01 03 	sub	r3,r2,r3
80010a66:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80010a6a:	fc 0b 01 0b 	sub	r11,lr,r11
80010a6e:	f6 0a 00 0a 	add	r10,r11,r10
80010a72:	b0 1a       	st.h	r8[0x2],r10
80010a74:	b1 4a       	asr	r10,0x10
80010a76:	e6 0a 00 0a 	add	r10,r3,r10
80010a7a:	b0 0a       	st.h	r8[0x0],r10
80010a7c:	2f c8       	sub	r8,-4
80010a7e:	b1 4a       	asr	r10,0x10
80010a80:	08 36       	cp.w	r6,r4
80010a82:	ce 83       	brcs	80010a52 <__mdiff+0x66>
80010a84:	c0 d8       	rjmp	80010a9e <__mdiff+0xb2>
80010a86:	0f 0b       	ld.w	r11,r7++
80010a88:	f6 0e 16 10 	lsr	lr,r11,0x10
80010a8c:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80010a90:	16 0a       	add	r10,r11
80010a92:	b0 1a       	st.h	r8[0x2],r10
80010a94:	b1 4a       	asr	r10,0x10
80010a96:	1c 0a       	add	r10,lr
80010a98:	b0 0a       	st.h	r8[0x0],r10
80010a9a:	2f c8       	sub	r8,-4
80010a9c:	b1 4a       	asr	r10,0x10
80010a9e:	0a 37       	cp.w	r7,r5
80010aa0:	cf 33       	brcs	80010a86 <__mdiff+0x9a>
80010aa2:	c0 28       	rjmp	80010aa6 <__mdiff+0xba>
80010aa4:	20 19       	sub	r9,1
80010aa6:	11 4a       	ld.w	r10,--r8
80010aa8:	58 0a       	cp.w	r10,0
80010aaa:	cf d0       	breq	80010aa4 <__mdiff+0xb8>
80010aac:	99 49       	st.w	r12[0x10],r9
80010aae:	d8 32       	popm	r0-r7,pc
80010ab0:	30 0b       	mov	r11,0
80010ab2:	f0 1f 00 04 	mcall	80010ac0 <__mdiff+0xd4>
80010ab6:	30 18       	mov	r8,1
80010ab8:	99 48       	st.w	r12[0x10],r8
80010aba:	30 08       	mov	r8,0
80010abc:	99 58       	st.w	r12[0x14],r8
80010abe:	d8 32       	popm	r0-r7,pc
80010ac0:	80 01       	ld.sh	r1,r0[0x0]
80010ac2:	08 c0       	st.b	r4++,r0

80010ac4 <__lshift>:
80010ac4:	d4 31       	pushm	r0-r7,lr
80010ac6:	16 97       	mov	r7,r11
80010ac8:	76 46       	ld.w	r6,r11[0x10]
80010aca:	f4 02 14 05 	asr	r2,r10,0x5
80010ace:	2f f6       	sub	r6,-1
80010ad0:	14 93       	mov	r3,r10
80010ad2:	18 94       	mov	r4,r12
80010ad4:	04 06       	add	r6,r2
80010ad6:	76 1b       	ld.w	r11,r11[0x4]
80010ad8:	6e 28       	ld.w	r8,r7[0x8]
80010ada:	c0 38       	rjmp	80010ae0 <__lshift+0x1c>
80010adc:	2f fb       	sub	r11,-1
80010ade:	a1 78       	lsl	r8,0x1
80010ae0:	10 36       	cp.w	r6,r8
80010ae2:	fe 99 ff fd 	brgt	80010adc <__lshift+0x18>
80010ae6:	08 9c       	mov	r12,r4
80010ae8:	f0 1f 00 1a 	mcall	80010b50 <__lshift+0x8c>
80010aec:	30 09       	mov	r9,0
80010aee:	18 95       	mov	r5,r12
80010af0:	f8 c8 ff ec 	sub	r8,r12,-20
80010af4:	12 9a       	mov	r10,r9
80010af6:	c0 38       	rjmp	80010afc <__lshift+0x38>
80010af8:	10 aa       	st.w	r8++,r10
80010afa:	2f f9       	sub	r9,-1
80010afc:	04 39       	cp.w	r9,r2
80010afe:	cf d5       	brlt	80010af8 <__lshift+0x34>
80010b00:	6e 4b       	ld.w	r11,r7[0x10]
80010b02:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80010b06:	2f bb       	sub	r11,-5
80010b08:	ee c9 ff ec 	sub	r9,r7,-20
80010b0c:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80010b10:	58 03       	cp.w	r3,0
80010b12:	c1 30       	breq	80010b38 <__lshift+0x74>
80010b14:	e6 0c 11 20 	rsub	r12,r3,32
80010b18:	30 0a       	mov	r10,0
80010b1a:	72 02       	ld.w	r2,r9[0x0]
80010b1c:	e4 03 09 42 	lsl	r2,r2,r3
80010b20:	04 4a       	or	r10,r2
80010b22:	10 aa       	st.w	r8++,r10
80010b24:	13 0a       	ld.w	r10,r9++
80010b26:	f4 0c 0a 4a 	lsr	r10,r10,r12
80010b2a:	16 39       	cp.w	r9,r11
80010b2c:	cf 73       	brcs	80010b1a <__lshift+0x56>
80010b2e:	91 0a       	st.w	r8[0x0],r10
80010b30:	58 0a       	cp.w	r10,0
80010b32:	c0 70       	breq	80010b40 <__lshift+0x7c>
80010b34:	2f f6       	sub	r6,-1
80010b36:	c0 58       	rjmp	80010b40 <__lshift+0x7c>
80010b38:	13 0a       	ld.w	r10,r9++
80010b3a:	10 aa       	st.w	r8++,r10
80010b3c:	16 39       	cp.w	r9,r11
80010b3e:	cf d3       	brcs	80010b38 <__lshift+0x74>
80010b40:	08 9c       	mov	r12,r4
80010b42:	20 16       	sub	r6,1
80010b44:	0e 9b       	mov	r11,r7
80010b46:	8b 46       	st.w	r5[0x10],r6
80010b48:	f0 1f 00 03 	mcall	80010b54 <__lshift+0x90>
80010b4c:	0a 9c       	mov	r12,r5
80010b4e:	d8 32       	popm	r0-r7,pc
80010b50:	80 01       	ld.sh	r1,r0[0x0]
80010b52:	08 c0       	st.b	r4++,r0
80010b54:	80 01       	ld.sh	r1,r0[0x0]
80010b56:	08 88       	andn	r8,r4

80010b58 <__multiply>:
80010b58:	d4 31       	pushm	r0-r7,lr
80010b5a:	20 2d       	sub	sp,8
80010b5c:	76 49       	ld.w	r9,r11[0x10]
80010b5e:	74 48       	ld.w	r8,r10[0x10]
80010b60:	16 96       	mov	r6,r11
80010b62:	14 95       	mov	r5,r10
80010b64:	10 39       	cp.w	r9,r8
80010b66:	ec 08 17 50 	movlt	r8,r6
80010b6a:	ea 06 17 50 	movlt	r6,r5
80010b6e:	f0 05 17 50 	movlt	r5,r8
80010b72:	6c 28       	ld.w	r8,r6[0x8]
80010b74:	76 43       	ld.w	r3,r11[0x10]
80010b76:	74 42       	ld.w	r2,r10[0x10]
80010b78:	76 1b       	ld.w	r11,r11[0x4]
80010b7a:	e4 03 00 07 	add	r7,r2,r3
80010b7e:	10 37       	cp.w	r7,r8
80010b80:	f7 bb 09 ff 	subgt	r11,-1
80010b84:	f0 1f 00 36 	mcall	80010c5c <__multiply+0x104>
80010b88:	ee c4 ff fb 	sub	r4,r7,-5
80010b8c:	f8 c9 ff ec 	sub	r9,r12,-20
80010b90:	f8 04 00 24 	add	r4,r12,r4<<0x2
80010b94:	30 0a       	mov	r10,0
80010b96:	12 98       	mov	r8,r9
80010b98:	c0 28       	rjmp	80010b9c <__multiply+0x44>
80010b9a:	10 aa       	st.w	r8++,r10
80010b9c:	08 38       	cp.w	r8,r4
80010b9e:	cf e3       	brcs	80010b9a <__multiply+0x42>
80010ba0:	2f b3       	sub	r3,-5
80010ba2:	2f b2       	sub	r2,-5
80010ba4:	ec 03 00 23 	add	r3,r6,r3<<0x2
80010ba8:	ea 02 00 22 	add	r2,r5,r2<<0x2
80010bac:	ec cb ff ec 	sub	r11,r6,-20
80010bb0:	50 12       	stdsp	sp[0x4],r2
80010bb2:	ea ca ff ec 	sub	r10,r5,-20
80010bb6:	c4 48       	rjmp	80010c3e <__multiply+0xe6>
80010bb8:	94 95       	ld.uh	r5,r10[0x2]
80010bba:	58 05       	cp.w	r5,0
80010bbc:	c2 00       	breq	80010bfc <__multiply+0xa4>
80010bbe:	12 98       	mov	r8,r9
80010bc0:	16 96       	mov	r6,r11
80010bc2:	30 0e       	mov	lr,0
80010bc4:	50 09       	stdsp	sp[0x0],r9
80010bc6:	0d 02       	ld.w	r2,r6++
80010bc8:	e4 00 16 10 	lsr	r0,r2,0x10
80010bcc:	70 01       	ld.w	r1,r8[0x0]
80010bce:	70 09       	ld.w	r9,r8[0x0]
80010bd0:	b1 81       	lsr	r1,0x10
80010bd2:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80010bd6:	e0 05 03 41 	mac	r1,r0,r5
80010bda:	ab 32       	mul	r2,r5
80010bdc:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80010be0:	00 02       	add	r2,r0
80010be2:	e4 0e 00 0e 	add	lr,r2,lr
80010be6:	b0 1e       	st.h	r8[0x2],lr
80010be8:	b1 8e       	lsr	lr,0x10
80010bea:	1c 01       	add	r1,lr
80010bec:	b0 01       	st.h	r8[0x0],r1
80010bee:	e2 0e 16 10 	lsr	lr,r1,0x10
80010bf2:	2f c8       	sub	r8,-4
80010bf4:	06 36       	cp.w	r6,r3
80010bf6:	ce 83       	brcs	80010bc6 <__multiply+0x6e>
80010bf8:	40 09       	lddsp	r9,sp[0x0]
80010bfa:	91 0e       	st.w	r8[0x0],lr
80010bfc:	94 86       	ld.uh	r6,r10[0x0]
80010bfe:	58 06       	cp.w	r6,0
80010c00:	c1 d0       	breq	80010c3a <__multiply+0xe2>
80010c02:	72 02       	ld.w	r2,r9[0x0]
80010c04:	12 98       	mov	r8,r9
80010c06:	16 9e       	mov	lr,r11
80010c08:	30 05       	mov	r5,0
80010c0a:	b0 12       	st.h	r8[0x2],r2
80010c0c:	1d 01       	ld.w	r1,lr++
80010c0e:	90 82       	ld.uh	r2,r8[0x0]
80010c10:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80010c14:	ad 30       	mul	r0,r6
80010c16:	e0 02 00 02 	add	r2,r0,r2
80010c1a:	e4 05 00 05 	add	r5,r2,r5
80010c1e:	b0 05       	st.h	r8[0x0],r5
80010c20:	b1 85       	lsr	r5,0x10
80010c22:	b1 81       	lsr	r1,0x10
80010c24:	2f c8       	sub	r8,-4
80010c26:	ad 31       	mul	r1,r6
80010c28:	90 92       	ld.uh	r2,r8[0x2]
80010c2a:	e2 02 00 02 	add	r2,r1,r2
80010c2e:	0a 02       	add	r2,r5
80010c30:	e4 05 16 10 	lsr	r5,r2,0x10
80010c34:	06 3e       	cp.w	lr,r3
80010c36:	ce a3       	brcs	80010c0a <__multiply+0xb2>
80010c38:	91 02       	st.w	r8[0x0],r2
80010c3a:	2f ca       	sub	r10,-4
80010c3c:	2f c9       	sub	r9,-4
80010c3e:	40 18       	lddsp	r8,sp[0x4]
80010c40:	10 3a       	cp.w	r10,r8
80010c42:	cb b3       	brcs	80010bb8 <__multiply+0x60>
80010c44:	c0 28       	rjmp	80010c48 <__multiply+0xf0>
80010c46:	20 17       	sub	r7,1
80010c48:	58 07       	cp.w	r7,0
80010c4a:	e0 8a 00 05 	brle	80010c54 <__multiply+0xfc>
80010c4e:	09 48       	ld.w	r8,--r4
80010c50:	58 08       	cp.w	r8,0
80010c52:	cf a0       	breq	80010c46 <__multiply+0xee>
80010c54:	99 47       	st.w	r12[0x10],r7
80010c56:	2f ed       	sub	sp,-8
80010c58:	d8 32       	popm	r0-r7,pc
80010c5a:	00 00       	add	r0,r0
80010c5c:	80 01       	ld.sh	r1,r0[0x0]
80010c5e:	08 c0       	st.b	r4++,r0

80010c60 <__i2b>:
80010c60:	d4 21       	pushm	r4-r7,lr
80010c62:	16 97       	mov	r7,r11
80010c64:	30 1b       	mov	r11,1
80010c66:	f0 1f 00 04 	mcall	80010c74 <__i2b+0x14>
80010c6a:	30 19       	mov	r9,1
80010c6c:	99 57       	st.w	r12[0x14],r7
80010c6e:	99 49       	st.w	r12[0x10],r9
80010c70:	d8 22       	popm	r4-r7,pc
80010c72:	00 00       	add	r0,r0
80010c74:	80 01       	ld.sh	r1,r0[0x0]
80010c76:	08 c0       	st.b	r4++,r0

80010c78 <__multadd>:
80010c78:	d4 31       	pushm	r0-r7,lr
80010c7a:	30 08       	mov	r8,0
80010c7c:	12 95       	mov	r5,r9
80010c7e:	16 97       	mov	r7,r11
80010c80:	18 96       	mov	r6,r12
80010c82:	76 44       	ld.w	r4,r11[0x10]
80010c84:	f6 c9 ff ec 	sub	r9,r11,-20
80010c88:	72 0b       	ld.w	r11,r9[0x0]
80010c8a:	f6 0c 16 10 	lsr	r12,r11,0x10
80010c8e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80010c92:	f4 0c 02 4c 	mul	r12,r10,r12
80010c96:	f4 0b 03 45 	mac	r5,r10,r11
80010c9a:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80010c9e:	b1 85       	lsr	r5,0x10
80010ca0:	18 05       	add	r5,r12
80010ca2:	ea 0c 15 10 	lsl	r12,r5,0x10
80010ca6:	f8 0b 00 0b 	add	r11,r12,r11
80010caa:	12 ab       	st.w	r9++,r11
80010cac:	2f f8       	sub	r8,-1
80010cae:	b1 85       	lsr	r5,0x10
80010cb0:	08 38       	cp.w	r8,r4
80010cb2:	ce b5       	brlt	80010c88 <__multadd+0x10>
80010cb4:	58 05       	cp.w	r5,0
80010cb6:	c1 d0       	breq	80010cf0 <__multadd+0x78>
80010cb8:	6e 28       	ld.w	r8,r7[0x8]
80010cba:	10 34       	cp.w	r4,r8
80010cbc:	c1 45       	brlt	80010ce4 <__multadd+0x6c>
80010cbe:	6e 1b       	ld.w	r11,r7[0x4]
80010cc0:	0c 9c       	mov	r12,r6
80010cc2:	2f fb       	sub	r11,-1
80010cc4:	f0 1f 00 0c 	mcall	80010cf4 <__multadd+0x7c>
80010cc8:	6e 4a       	ld.w	r10,r7[0x10]
80010cca:	ee cb ff f4 	sub	r11,r7,-12
80010cce:	18 93       	mov	r3,r12
80010cd0:	2f ea       	sub	r10,-2
80010cd2:	2f 4c       	sub	r12,-12
80010cd4:	a3 6a       	lsl	r10,0x2
80010cd6:	f0 1f 00 09 	mcall	80010cf8 <__multadd+0x80>
80010cda:	0e 9b       	mov	r11,r7
80010cdc:	0c 9c       	mov	r12,r6
80010cde:	f0 1f 00 08 	mcall	80010cfc <__multadd+0x84>
80010ce2:	06 97       	mov	r7,r3
80010ce4:	e8 c8 ff ff 	sub	r8,r4,-1
80010ce8:	2f b4       	sub	r4,-5
80010cea:	8f 48       	st.w	r7[0x10],r8
80010cec:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80010cf0:	0e 9c       	mov	r12,r7
80010cf2:	d8 32       	popm	r0-r7,pc
80010cf4:	80 01       	ld.sh	r1,r0[0x0]
80010cf6:	08 c0       	st.b	r4++,r0
80010cf8:	80 00       	ld.sh	r0,r0[0x0]
80010cfa:	c6 9e       	rcall	800109cc <__d2b+0x94>
80010cfc:	80 01       	ld.sh	r1,r0[0x0]
80010cfe:	08 88       	andn	r8,r4

80010d00 <__pow5mult>:
80010d00:	d4 31       	pushm	r0-r7,lr
80010d02:	14 96       	mov	r6,r10
80010d04:	18 97       	mov	r7,r12
80010d06:	16 94       	mov	r4,r11
80010d08:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80010d0c:	c0 90       	breq	80010d1e <__pow5mult+0x1e>
80010d0e:	20 18       	sub	r8,1
80010d10:	4a 19       	lddpc	r9,80010d94 <__pow5mult+0x94>
80010d12:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80010d16:	30 09       	mov	r9,0
80010d18:	f0 1f 00 20 	mcall	80010d98 <__pow5mult+0x98>
80010d1c:	18 94       	mov	r4,r12
80010d1e:	a3 46       	asr	r6,0x2
80010d20:	c3 70       	breq	80010d8e <__pow5mult+0x8e>
80010d22:	6e 95       	ld.w	r5,r7[0x24]
80010d24:	58 05       	cp.w	r5,0
80010d26:	c0 91       	brne	80010d38 <__pow5mult+0x38>
80010d28:	31 0c       	mov	r12,16
80010d2a:	f0 1f 00 1d 	mcall	80010d9c <__pow5mult+0x9c>
80010d2e:	99 35       	st.w	r12[0xc],r5
80010d30:	8f 9c       	st.w	r7[0x24],r12
80010d32:	99 15       	st.w	r12[0x4],r5
80010d34:	99 25       	st.w	r12[0x8],r5
80010d36:	99 05       	st.w	r12[0x0],r5
80010d38:	6e 93       	ld.w	r3,r7[0x24]
80010d3a:	66 25       	ld.w	r5,r3[0x8]
80010d3c:	58 05       	cp.w	r5,0
80010d3e:	c0 d1       	brne	80010d58 <__pow5mult+0x58>
80010d40:	e0 6b 02 71 	mov	r11,625
80010d44:	0e 9c       	mov	r12,r7
80010d46:	f0 1f 00 17 	mcall	80010da0 <__pow5mult+0xa0>
80010d4a:	87 2c       	st.w	r3[0x8],r12
80010d4c:	30 08       	mov	r8,0
80010d4e:	18 95       	mov	r5,r12
80010d50:	99 08       	st.w	r12[0x0],r8
80010d52:	c0 38       	rjmp	80010d58 <__pow5mult+0x58>
80010d54:	06 9c       	mov	r12,r3
80010d56:	18 95       	mov	r5,r12
80010d58:	ed b6 00 00 	bld	r6,0x0
80010d5c:	c0 c1       	brne	80010d74 <__pow5mult+0x74>
80010d5e:	08 9b       	mov	r11,r4
80010d60:	0a 9a       	mov	r10,r5
80010d62:	0e 9c       	mov	r12,r7
80010d64:	f0 1f 00 10 	mcall	80010da4 <__pow5mult+0xa4>
80010d68:	08 9b       	mov	r11,r4
80010d6a:	18 93       	mov	r3,r12
80010d6c:	0e 9c       	mov	r12,r7
80010d6e:	06 94       	mov	r4,r3
80010d70:	f0 1f 00 0e 	mcall	80010da8 <__pow5mult+0xa8>
80010d74:	a1 56       	asr	r6,0x1
80010d76:	c0 c0       	breq	80010d8e <__pow5mult+0x8e>
80010d78:	6a 03       	ld.w	r3,r5[0x0]
80010d7a:	58 03       	cp.w	r3,0
80010d7c:	ce c1       	brne	80010d54 <__pow5mult+0x54>
80010d7e:	0a 9a       	mov	r10,r5
80010d80:	0a 9b       	mov	r11,r5
80010d82:	0e 9c       	mov	r12,r7
80010d84:	f0 1f 00 08 	mcall	80010da4 <__pow5mult+0xa4>
80010d88:	8b 0c       	st.w	r5[0x0],r12
80010d8a:	99 03       	st.w	r12[0x0],r3
80010d8c:	ce 5b       	rjmp	80010d56 <__pow5mult+0x56>
80010d8e:	08 9c       	mov	r12,r4
80010d90:	d8 32       	popm	r0-r7,pc
80010d92:	00 00       	add	r0,r0
80010d94:	80 01       	ld.sh	r1,r0[0x0]
80010d96:	25 e0       	sub	r0,94
80010d98:	80 01       	ld.sh	r1,r0[0x0]
80010d9a:	0c 78       	tst	r8,r6
80010d9c:	80 01       	ld.sh	r1,r0[0x0]
80010d9e:	02 a8       	st.w	r1++,r8
80010da0:	80 01       	ld.sh	r1,r0[0x0]
80010da2:	0c 60       	and	r0,r6
80010da4:	80 01       	ld.sh	r1,r0[0x0]
80010da6:	0b 58       	ld.sh	r8,--r5
80010da8:	80 01       	ld.sh	r1,r0[0x0]
80010daa:	08 88       	andn	r8,r4

80010dac <_realloc_r>:
80010dac:	d4 31       	pushm	r0-r7,lr
80010dae:	20 1d       	sub	sp,4
80010db0:	16 94       	mov	r4,r11
80010db2:	18 92       	mov	r2,r12
80010db4:	14 9b       	mov	r11,r10
80010db6:	58 04       	cp.w	r4,0
80010db8:	c0 51       	brne	80010dc2 <_realloc_r+0x16>
80010dba:	f0 1f 00 5b 	mcall	80010f24 <_realloc_r+0x178>
80010dbe:	18 95       	mov	r5,r12
80010dc0:	c5 b9       	rjmp	80011076 <_realloc_r+0x2ca>
80010dc2:	50 0a       	stdsp	sp[0x0],r10
80010dc4:	f0 1f 00 59 	mcall	80010f28 <_realloc_r+0x17c>
80010dc8:	40 0b       	lddsp	r11,sp[0x0]
80010dca:	f6 c8 ff f5 	sub	r8,r11,-11
80010dce:	e8 c1 00 08 	sub	r1,r4,8
80010dd2:	10 96       	mov	r6,r8
80010dd4:	62 1c       	ld.w	r12,r1[0x4]
80010dd6:	e0 16 ff f8 	andl	r6,0xfff8
80010dda:	59 68       	cp.w	r8,22
80010ddc:	f9 b6 08 10 	movls	r6,16
80010de0:	16 36       	cp.w	r6,r11
80010de2:	5f 38       	srlo	r8
80010de4:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80010de8:	c0 50       	breq	80010df2 <_realloc_r+0x46>
80010dea:	30 c8       	mov	r8,12
80010dec:	30 05       	mov	r5,0
80010dee:	85 38       	st.w	r2[0xc],r8
80010df0:	c4 39       	rjmp	80011076 <_realloc_r+0x2ca>
80010df2:	18 90       	mov	r0,r12
80010df4:	e0 10 ff fc 	andl	r0,0xfffc
80010df8:	0c 30       	cp.w	r0,r6
80010dfa:	e0 84 01 13 	brge	80011020 <_realloc_r+0x274>
80010dfe:	4c c8       	lddpc	r8,80010f2c <_realloc_r+0x180>
80010e00:	e2 00 00 09 	add	r9,r1,r0
80010e04:	70 25       	ld.w	r5,r8[0x8]
80010e06:	0a 39       	cp.w	r9,r5
80010e08:	c0 90       	breq	80010e1a <_realloc_r+0x6e>
80010e0a:	72 1a       	ld.w	r10,r9[0x4]
80010e0c:	a1 ca       	cbr	r10,0x0
80010e0e:	f2 0a 00 0a 	add	r10,r9,r10
80010e12:	74 1a       	ld.w	r10,r10[0x4]
80010e14:	ed ba 00 00 	bld	r10,0x0
80010e18:	c2 20       	breq	80010e5c <_realloc_r+0xb0>
80010e1a:	72 1a       	ld.w	r10,r9[0x4]
80010e1c:	e0 1a ff fc 	andl	r10,0xfffc
80010e20:	f4 00 00 03 	add	r3,r10,r0
80010e24:	0a 39       	cp.w	r9,r5
80010e26:	c1 31       	brne	80010e4c <_realloc_r+0xa0>
80010e28:	ec c7 ff f0 	sub	r7,r6,-16
80010e2c:	0e 33       	cp.w	r3,r7
80010e2e:	c1 95       	brlt	80010e60 <_realloc_r+0xb4>
80010e30:	e2 06 00 09 	add	r9,r1,r6
80010e34:	0c 13       	sub	r3,r6
80010e36:	a1 a3       	sbr	r3,0x0
80010e38:	93 13       	st.w	r9[0x4],r3
80010e3a:	91 29       	st.w	r8[0x8],r9
80010e3c:	04 9c       	mov	r12,r2
80010e3e:	62 18       	ld.w	r8,r1[0x4]
80010e40:	08 95       	mov	r5,r4
80010e42:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80010e46:	10 46       	or	r6,r8
80010e48:	83 16       	st.w	r1[0x4],r6
80010e4a:	c1 49       	rjmp	80011072 <_realloc_r+0x2c6>
80010e4c:	0c 33       	cp.w	r3,r6
80010e4e:	c0 95       	brlt	80010e60 <_realloc_r+0xb4>
80010e50:	72 28       	ld.w	r8,r9[0x8]
80010e52:	02 97       	mov	r7,r1
80010e54:	72 39       	ld.w	r9,r9[0xc]
80010e56:	93 28       	st.w	r9[0x8],r8
80010e58:	91 39       	st.w	r8[0xc],r9
80010e5a:	ce 58       	rjmp	80011024 <_realloc_r+0x278>
80010e5c:	30 0a       	mov	r10,0
80010e5e:	14 99       	mov	r9,r10
80010e60:	ed bc 00 00 	bld	r12,0x0
80010e64:	e0 80 00 9e 	breq	80010fa0 <_realloc_r+0x1f4>
80010e68:	62 07       	ld.w	r7,r1[0x0]
80010e6a:	e2 07 01 07 	sub	r7,r1,r7
80010e6e:	6e 1c       	ld.w	r12,r7[0x4]
80010e70:	e0 1c ff fc 	andl	r12,0xfffc
80010e74:	58 09       	cp.w	r9,0
80010e76:	c5 f0       	breq	80010f34 <_realloc_r+0x188>
80010e78:	f8 00 00 03 	add	r3,r12,r0
80010e7c:	0a 39       	cp.w	r9,r5
80010e7e:	c4 81       	brne	80010f0e <_realloc_r+0x162>
80010e80:	14 03       	add	r3,r10
80010e82:	ec c9 ff f0 	sub	r9,r6,-16
80010e86:	12 33       	cp.w	r3,r9
80010e88:	c5 65       	brlt	80010f34 <_realloc_r+0x188>
80010e8a:	6e 3a       	ld.w	r10,r7[0xc]
80010e8c:	6e 29       	ld.w	r9,r7[0x8]
80010e8e:	95 29       	st.w	r10[0x8],r9
80010e90:	93 3a       	st.w	r9[0xc],r10
80010e92:	ee c5 ff f8 	sub	r5,r7,-8
80010e96:	e0 ca 00 04 	sub	r10,r0,4
80010e9a:	e0 4a 00 24 	cp.w	r10,36
80010e9e:	e0 8b 00 25 	brhi	80010ee8 <_realloc_r+0x13c>
80010ea2:	0a 99       	mov	r9,r5
80010ea4:	59 3a       	cp.w	r10,19
80010ea6:	e0 88 00 1a 	brls	80010eda <_realloc_r+0x12e>
80010eaa:	09 09       	ld.w	r9,r4++
80010eac:	8b 09       	st.w	r5[0x0],r9
80010eae:	09 09       	ld.w	r9,r4++
80010eb0:	8f 39       	st.w	r7[0xc],r9
80010eb2:	ee c9 ff f0 	sub	r9,r7,-16
80010eb6:	59 ba       	cp.w	r10,27
80010eb8:	e0 88 00 11 	brls	80010eda <_realloc_r+0x12e>
80010ebc:	09 0b       	ld.w	r11,r4++
80010ebe:	93 0b       	st.w	r9[0x0],r11
80010ec0:	09 09       	ld.w	r9,r4++
80010ec2:	8f 59       	st.w	r7[0x14],r9
80010ec4:	ee c9 ff e8 	sub	r9,r7,-24
80010ec8:	e0 4a 00 24 	cp.w	r10,36
80010ecc:	c0 71       	brne	80010eda <_realloc_r+0x12e>
80010ece:	09 0a       	ld.w	r10,r4++
80010ed0:	93 0a       	st.w	r9[0x0],r10
80010ed2:	ee c9 ff e0 	sub	r9,r7,-32
80010ed6:	09 0a       	ld.w	r10,r4++
80010ed8:	8f 7a       	st.w	r7[0x1c],r10
80010eda:	09 0a       	ld.w	r10,r4++
80010edc:	12 aa       	st.w	r9++,r10
80010ede:	68 0a       	ld.w	r10,r4[0x0]
80010ee0:	93 0a       	st.w	r9[0x0],r10
80010ee2:	68 1a       	ld.w	r10,r4[0x4]
80010ee4:	93 1a       	st.w	r9[0x4],r10
80010ee6:	c0 78       	rjmp	80010ef4 <_realloc_r+0x148>
80010ee8:	50 08       	stdsp	sp[0x0],r8
80010eea:	08 9b       	mov	r11,r4
80010eec:	0a 9c       	mov	r12,r5
80010eee:	f0 1f 00 11 	mcall	80010f30 <_realloc_r+0x184>
80010ef2:	40 08       	lddsp	r8,sp[0x0]
80010ef4:	ee 06 00 09 	add	r9,r7,r6
80010ef8:	0c 13       	sub	r3,r6
80010efa:	a1 a3       	sbr	r3,0x0
80010efc:	93 13       	st.w	r9[0x4],r3
80010efe:	91 29       	st.w	r8[0x8],r9
80010f00:	04 9c       	mov	r12,r2
80010f02:	6e 18       	ld.w	r8,r7[0x4]
80010f04:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80010f08:	10 46       	or	r6,r8
80010f0a:	8f 16       	st.w	r7[0x4],r6
80010f0c:	cb 38       	rjmp	80011072 <_realloc_r+0x2c6>
80010f0e:	14 03       	add	r3,r10
80010f10:	0c 33       	cp.w	r3,r6
80010f12:	c1 15       	brlt	80010f34 <_realloc_r+0x188>
80010f14:	72 28       	ld.w	r8,r9[0x8]
80010f16:	72 39       	ld.w	r9,r9[0xc]
80010f18:	93 28       	st.w	r9[0x8],r8
80010f1a:	91 39       	st.w	r8[0xc],r9
80010f1c:	6e 28       	ld.w	r8,r7[0x8]
80010f1e:	6e 39       	ld.w	r9,r7[0xc]
80010f20:	c1 08       	rjmp	80010f40 <_realloc_r+0x194>
80010f22:	00 00       	add	r0,r0
80010f24:	80 01       	ld.sh	r1,r0[0x0]
80010f26:	02 c0       	st.b	r1++,r0
80010f28:	80 01       	ld.sh	r1,r0[0x0]
80010f2a:	07 64       	ld.uh	r4,--r3
80010f2c:	00 00       	add	r0,r0
80010f2e:	01 ac       	ld.ub	r12,r0[0x2]
80010f30:	80 01       	ld.sh	r1,r0[0x0]
80010f32:	07 26       	ld.uh	r6,r3++
80010f34:	f8 00 00 03 	add	r3,r12,r0
80010f38:	0c 33       	cp.w	r3,r6
80010f3a:	c3 35       	brlt	80010fa0 <_realloc_r+0x1f4>
80010f3c:	6e 39       	ld.w	r9,r7[0xc]
80010f3e:	6e 28       	ld.w	r8,r7[0x8]
80010f40:	93 28       	st.w	r9[0x8],r8
80010f42:	91 39       	st.w	r8[0xc],r9
80010f44:	e0 ca 00 04 	sub	r10,r0,4
80010f48:	ee cc ff f8 	sub	r12,r7,-8
80010f4c:	e0 4a 00 24 	cp.w	r10,36
80010f50:	e0 8b 00 24 	brhi	80010f98 <_realloc_r+0x1ec>
80010f54:	59 3a       	cp.w	r10,19
80010f56:	e0 88 00 1a 	brls	80010f8a <_realloc_r+0x1de>
80010f5a:	09 08       	ld.w	r8,r4++
80010f5c:	99 08       	st.w	r12[0x0],r8
80010f5e:	09 08       	ld.w	r8,r4++
80010f60:	8f 38       	st.w	r7[0xc],r8
80010f62:	ee cc ff f0 	sub	r12,r7,-16
80010f66:	59 ba       	cp.w	r10,27
80010f68:	e0 88 00 11 	brls	80010f8a <_realloc_r+0x1de>
80010f6c:	09 08       	ld.w	r8,r4++
80010f6e:	99 08       	st.w	r12[0x0],r8
80010f70:	09 08       	ld.w	r8,r4++
80010f72:	8f 58       	st.w	r7[0x14],r8
80010f74:	ee cc ff e8 	sub	r12,r7,-24
80010f78:	e0 4a 00 24 	cp.w	r10,36
80010f7c:	c0 71       	brne	80010f8a <_realloc_r+0x1de>
80010f7e:	09 08       	ld.w	r8,r4++
80010f80:	99 08       	st.w	r12[0x0],r8
80010f82:	ee cc ff e0 	sub	r12,r7,-32
80010f86:	09 08       	ld.w	r8,r4++
80010f88:	8f 78       	st.w	r7[0x1c],r8
80010f8a:	09 08       	ld.w	r8,r4++
80010f8c:	18 a8       	st.w	r12++,r8
80010f8e:	68 08       	ld.w	r8,r4[0x0]
80010f90:	99 08       	st.w	r12[0x0],r8
80010f92:	68 18       	ld.w	r8,r4[0x4]
80010f94:	99 18       	st.w	r12[0x4],r8
80010f96:	c4 78       	rjmp	80011024 <_realloc_r+0x278>
80010f98:	08 9b       	mov	r11,r4
80010f9a:	f0 1f 00 39 	mcall	8001107c <_realloc_r+0x2d0>
80010f9e:	c4 38       	rjmp	80011024 <_realloc_r+0x278>
80010fa0:	04 9c       	mov	r12,r2
80010fa2:	f0 1f 00 38 	mcall	80011080 <_realloc_r+0x2d4>
80010fa6:	18 95       	mov	r5,r12
80010fa8:	c3 a0       	breq	8001101c <_realloc_r+0x270>
80010faa:	62 18       	ld.w	r8,r1[0x4]
80010fac:	f8 c9 00 08 	sub	r9,r12,8
80010fb0:	a1 c8       	cbr	r8,0x0
80010fb2:	e2 08 00 08 	add	r8,r1,r8
80010fb6:	10 39       	cp.w	r9,r8
80010fb8:	c0 71       	brne	80010fc6 <_realloc_r+0x21a>
80010fba:	72 13       	ld.w	r3,r9[0x4]
80010fbc:	02 97       	mov	r7,r1
80010fbe:	e0 13 ff fc 	andl	r3,0xfffc
80010fc2:	00 03       	add	r3,r0
80010fc4:	c3 08       	rjmp	80011024 <_realloc_r+0x278>
80010fc6:	e0 ca 00 04 	sub	r10,r0,4
80010fca:	e0 4a 00 24 	cp.w	r10,36
80010fce:	e0 8b 00 20 	brhi	8001100e <_realloc_r+0x262>
80010fd2:	08 99       	mov	r9,r4
80010fd4:	18 98       	mov	r8,r12
80010fd6:	59 3a       	cp.w	r10,19
80010fd8:	e0 88 00 14 	brls	80011000 <_realloc_r+0x254>
80010fdc:	13 0b       	ld.w	r11,r9++
80010fde:	10 ab       	st.w	r8++,r11
80010fe0:	13 0b       	ld.w	r11,r9++
80010fe2:	10 ab       	st.w	r8++,r11
80010fe4:	59 ba       	cp.w	r10,27
80010fe6:	e0 88 00 0d 	brls	80011000 <_realloc_r+0x254>
80010fea:	13 0b       	ld.w	r11,r9++
80010fec:	10 ab       	st.w	r8++,r11
80010fee:	13 0b       	ld.w	r11,r9++
80010ff0:	10 ab       	st.w	r8++,r11
80010ff2:	e0 4a 00 24 	cp.w	r10,36
80010ff6:	c0 51       	brne	80011000 <_realloc_r+0x254>
80010ff8:	13 0a       	ld.w	r10,r9++
80010ffa:	10 aa       	st.w	r8++,r10
80010ffc:	13 0a       	ld.w	r10,r9++
80010ffe:	10 aa       	st.w	r8++,r10
80011000:	13 0a       	ld.w	r10,r9++
80011002:	10 aa       	st.w	r8++,r10
80011004:	72 0a       	ld.w	r10,r9[0x0]
80011006:	91 0a       	st.w	r8[0x0],r10
80011008:	72 19       	ld.w	r9,r9[0x4]
8001100a:	91 19       	st.w	r8[0x4],r9
8001100c:	c0 48       	rjmp	80011014 <_realloc_r+0x268>
8001100e:	08 9b       	mov	r11,r4
80011010:	f0 1f 00 1b 	mcall	8001107c <_realloc_r+0x2d0>
80011014:	08 9b       	mov	r11,r4
80011016:	04 9c       	mov	r12,r2
80011018:	f0 1f 00 1b 	mcall	80011084 <_realloc_r+0x2d8>
8001101c:	04 9c       	mov	r12,r2
8001101e:	c2 a8       	rjmp	80011072 <_realloc_r+0x2c6>
80011020:	00 93       	mov	r3,r0
80011022:	02 97       	mov	r7,r1
80011024:	e6 06 01 09 	sub	r9,r3,r6
80011028:	6e 18       	ld.w	r8,r7[0x4]
8001102a:	58 f9       	cp.w	r9,15
8001102c:	e0 88 00 16 	brls	80011058 <_realloc_r+0x2ac>
80011030:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80011034:	ed e8 10 08 	or	r8,r6,r8
80011038:	8f 18       	st.w	r7[0x4],r8
8001103a:	12 98       	mov	r8,r9
8001103c:	a1 a8       	sbr	r8,0x0
8001103e:	ee 06 00 0b 	add	r11,r7,r6
80011042:	f6 09 00 09 	add	r9,r11,r9
80011046:	97 18       	st.w	r11[0x4],r8
80011048:	72 18       	ld.w	r8,r9[0x4]
8001104a:	a1 a8       	sbr	r8,0x0
8001104c:	2f 8b       	sub	r11,-8
8001104e:	93 18       	st.w	r9[0x4],r8
80011050:	04 9c       	mov	r12,r2
80011052:	f0 1f 00 0d 	mcall	80011084 <_realloc_r+0x2d8>
80011056:	c0 b8       	rjmp	8001106c <_realloc_r+0x2c0>
80011058:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001105c:	e7 e8 10 08 	or	r8,r3,r8
80011060:	8f 18       	st.w	r7[0x4],r8
80011062:	ee 03 00 03 	add	r3,r7,r3
80011066:	66 18       	ld.w	r8,r3[0x4]
80011068:	a1 a8       	sbr	r8,0x0
8001106a:	87 18       	st.w	r3[0x4],r8
8001106c:	04 9c       	mov	r12,r2
8001106e:	ee c5 ff f8 	sub	r5,r7,-8
80011072:	f0 1f 00 06 	mcall	80011088 <_realloc_r+0x2dc>
80011076:	0a 9c       	mov	r12,r5
80011078:	2f fd       	sub	sp,-4
8001107a:	d8 32       	popm	r0-r7,pc
8001107c:	80 01       	ld.sh	r1,r0[0x0]
8001107e:	07 26       	ld.uh	r6,r3++
80011080:	80 01       	ld.sh	r1,r0[0x0]
80011082:	02 c0       	st.b	r1++,r0
80011084:	80 00       	ld.sh	r0,r0[0x0]
80011086:	fd 1c 80 01 	ld.uh	r12,lr[-32767]
8001108a:	07 66       	ld.uh	r6,--r3

8001108c <__isinfd>:
8001108c:	14 98       	mov	r8,r10
8001108e:	fc 19 7f f0 	movh	r9,0x7ff0
80011092:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80011096:	f0 0b 11 00 	rsub	r11,r8,0
8001109a:	f7 e8 10 08 	or	r8,r11,r8
8001109e:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800110a2:	f2 08 01 08 	sub	r8,r9,r8
800110a6:	f0 0c 11 00 	rsub	r12,r8,0
800110aa:	f9 e8 10 08 	or	r8,r12,r8
800110ae:	f0 0c 14 1f 	asr	r12,r8,0x1f
800110b2:	2f fc       	sub	r12,-1
800110b4:	5e fc       	retal	r12

800110b6 <__isnand>:
800110b6:	14 98       	mov	r8,r10
800110b8:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800110bc:	f0 0c 11 00 	rsub	r12,r8,0
800110c0:	10 4c       	or	r12,r8
800110c2:	fc 18 7f f0 	movh	r8,0x7ff0
800110c6:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800110ca:	f0 0c 01 0c 	sub	r12,r8,r12
800110ce:	bf 9c       	lsr	r12,0x1f
800110d0:	5e fc       	retal	r12
800110d2:	d7 03       	nop

800110d4 <_sbrk_r>:
800110d4:	d4 21       	pushm	r4-r7,lr
800110d6:	30 08       	mov	r8,0
800110d8:	18 97       	mov	r7,r12
800110da:	48 76       	lddpc	r6,800110f4 <_sbrk_r+0x20>
800110dc:	16 9c       	mov	r12,r11
800110de:	8d 08       	st.w	r6[0x0],r8
800110e0:	f0 1f 00 06 	mcall	800110f8 <_sbrk_r+0x24>
800110e4:	5b fc       	cp.w	r12,-1
800110e6:	c0 51       	brne	800110f0 <_sbrk_r+0x1c>
800110e8:	6c 08       	ld.w	r8,r6[0x0]
800110ea:	58 08       	cp.w	r8,0
800110ec:	ef f8 1a 03 	st.wne	r7[0xc],r8
800110f0:	d8 22       	popm	r4-r7,pc
800110f2:	00 00       	add	r0,r0
800110f4:	00 00       	add	r0,r0
800110f6:	0d 74       	ld.ub	r4,--r6
800110f8:	80 01       	ld.sh	r1,r0[0x0]
800110fa:	12 70       	tst	r0,r9

800110fc <__sclose>:
800110fc:	d4 01       	pushm	lr
800110fe:	96 7b       	ld.sh	r11,r11[0xe]
80011100:	f0 1f 00 02 	mcall	80011108 <__sclose+0xc>
80011104:	d8 02       	popm	pc
80011106:	00 00       	add	r0,r0
80011108:	80 01       	ld.sh	r1,r0[0x0]
8001110a:	13 3c       	ld.ub	r12,r9++

8001110c <__sseek>:
8001110c:	d4 21       	pushm	r4-r7,lr
8001110e:	16 97       	mov	r7,r11
80011110:	96 7b       	ld.sh	r11,r11[0xe]
80011112:	f0 1f 00 08 	mcall	80011130 <__sseek+0x24>
80011116:	8e 68       	ld.sh	r8,r7[0xc]
80011118:	10 99       	mov	r9,r8
8001111a:	ad c8       	cbr	r8,0xc
8001111c:	ad a9       	sbr	r9,0xc
8001111e:	5b fc       	cp.w	r12,-1
80011120:	ef f8 0c 06 	st.heq	r7[0xc],r8
80011124:	ef f9 1c 06 	st.hne	r7[0xc],r9
80011128:	ef fc 1a 15 	st.wne	r7[0x54],r12
8001112c:	d8 22       	popm	r4-r7,pc
8001112e:	00 00       	add	r0,r0
80011130:	80 01       	ld.sh	r1,r0[0x0]
80011132:	14 84       	andn	r4,r10

80011134 <__swrite>:
80011134:	d4 21       	pushm	r4-r7,lr
80011136:	96 68       	ld.sh	r8,r11[0xc]
80011138:	16 97       	mov	r7,r11
8001113a:	14 95       	mov	r5,r10
8001113c:	12 94       	mov	r4,r9
8001113e:	e2 18 01 00 	andl	r8,0x100,COH
80011142:	18 96       	mov	r6,r12
80011144:	c0 60       	breq	80011150 <__swrite+0x1c>
80011146:	30 29       	mov	r9,2
80011148:	30 0a       	mov	r10,0
8001114a:	96 7b       	ld.sh	r11,r11[0xe]
8001114c:	f0 1f 00 06 	mcall	80011164 <__swrite+0x30>
80011150:	8e 68       	ld.sh	r8,r7[0xc]
80011152:	ad c8       	cbr	r8,0xc
80011154:	08 99       	mov	r9,r4
80011156:	0a 9a       	mov	r10,r5
80011158:	8e 7b       	ld.sh	r11,r7[0xe]
8001115a:	0c 9c       	mov	r12,r6
8001115c:	ae 68       	st.h	r7[0xc],r8
8001115e:	f0 1f 00 03 	mcall	80011168 <__swrite+0x34>
80011162:	d8 22       	popm	r4-r7,pc
80011164:	80 01       	ld.sh	r1,r0[0x0]
80011166:	14 84       	andn	r4,r10
80011168:	80 01       	ld.sh	r1,r0[0x0]
8001116a:	12 b0       	st.h	r9++,r0

8001116c <__sread>:
8001116c:	d4 21       	pushm	r4-r7,lr
8001116e:	16 97       	mov	r7,r11
80011170:	96 7b       	ld.sh	r11,r11[0xe]
80011172:	f0 1f 00 07 	mcall	8001118c <__sread+0x20>
80011176:	c0 65       	brlt	80011182 <__sread+0x16>
80011178:	6f 58       	ld.w	r8,r7[0x54]
8001117a:	18 08       	add	r8,r12
8001117c:	ef 48 00 54 	st.w	r7[84],r8
80011180:	d8 22       	popm	r4-r7,pc
80011182:	8e 68       	ld.sh	r8,r7[0xc]
80011184:	ad c8       	cbr	r8,0xc
80011186:	ae 68       	st.h	r7[0xc],r8
80011188:	d8 22       	popm	r4-r7,pc
8001118a:	00 00       	add	r0,r0
8001118c:	80 01       	ld.sh	r1,r0[0x0]
8001118e:	14 b0       	st.h	r10++,r0

80011190 <_close>:
80011190:	30 28       	mov	r8,2
80011192:	d6 73       	breakpoint
80011194:	3f fc       	mov	r12,-1
80011196:	35 8b       	mov	r11,88
80011198:	58 0c       	cp.w	r12,0
8001119a:	5e 4c       	retge	r12
8001119c:	48 2a       	lddpc	r10,800111a4 <_close+0x14>
8001119e:	95 0b       	st.w	r10[0x0],r11
800111a0:	5e fc       	retal	r12
800111a2:	00 00       	add	r0,r0
800111a4:	00 00       	add	r0,r0
800111a6:	0d 74       	ld.ub	r4,--r6

800111a8 <_lseek>:
800111a8:	30 58       	mov	r8,5
800111aa:	d6 73       	breakpoint
800111ac:	3f fc       	mov	r12,-1
800111ae:	35 8b       	mov	r11,88
800111b0:	58 0c       	cp.w	r12,0
800111b2:	5e 4c       	retge	r12
800111b4:	48 2a       	lddpc	r10,800111bc <_lseek+0x14>
800111b6:	95 0b       	st.w	r10[0x0],r11
800111b8:	5e fc       	retal	r12
800111ba:	00 00       	add	r0,r0
800111bc:	00 00       	add	r0,r0
800111be:	0d 74       	ld.ub	r4,--r6

800111c0 <_read>:
800111c0:	30 38       	mov	r8,3
800111c2:	d6 73       	breakpoint
800111c4:	3f fc       	mov	r12,-1
800111c6:	35 8b       	mov	r11,88
800111c8:	58 0c       	cp.w	r12,0
800111ca:	5e 4c       	retge	r12
800111cc:	48 2a       	lddpc	r10,800111d4 <_read+0x14>
800111ce:	95 0b       	st.w	r10[0x0],r11
800111d0:	5e fc       	retal	r12
800111d2:	00 00       	add	r0,r0
800111d4:	00 00       	add	r0,r0
800111d6:	0d 74       	ld.ub	r4,--r6

800111d8 <_write>:
800111d8:	30 48       	mov	r8,4
800111da:	d6 73       	breakpoint
800111dc:	3f fc       	mov	r12,-1
800111de:	35 8b       	mov	r11,88
800111e0:	58 0c       	cp.w	r12,0
800111e2:	5e 4c       	retge	r12
800111e4:	48 2a       	lddpc	r10,800111ec <_write+0x14>
800111e6:	95 0b       	st.w	r10[0x0],r11
800111e8:	5e fc       	retal	r12
800111ea:	00 00       	add	r0,r0
800111ec:	00 00       	add	r0,r0
800111ee:	0d 74       	ld.ub	r4,--r6

800111f0 <isatty>:
800111f0:	30 b8       	mov	r8,11
800111f2:	d6 73       	breakpoint
800111f4:	3f fc       	mov	r12,-1
800111f6:	35 8b       	mov	r11,88
800111f8:	58 0c       	cp.w	r12,0
800111fa:	5e 4c       	retge	r12
800111fc:	48 2a       	lddpc	r10,80011204 <isatty+0x14>
800111fe:	95 0b       	st.w	r10[0x0],r11
80011200:	5e fc       	retal	r12
80011202:	00 00       	add	r0,r0
80011204:	00 00       	add	r0,r0
80011206:	0d 74       	ld.ub	r4,--r6

80011208 <_fstat_host>:
80011208:	30 98       	mov	r8,9
8001120a:	d6 73       	breakpoint
8001120c:	3f fc       	mov	r12,-1
8001120e:	35 8b       	mov	r11,88
80011210:	58 0c       	cp.w	r12,0
80011212:	5e 4c       	retge	r12
80011214:	48 2a       	lddpc	r10,8001121c <_fstat_host+0x14>
80011216:	95 0b       	st.w	r10[0x0],r11
80011218:	5e fc       	retal	r12
8001121a:	00 00       	add	r0,r0
8001121c:	00 00       	add	r0,r0
8001121e:	0d 74       	ld.ub	r4,--r6

80011220 <_fstat>:
80011220:	d4 21       	pushm	r4-r7,lr
80011222:	21 0d       	sub	sp,64
80011224:	16 97       	mov	r7,r11
80011226:	1a 9b       	mov	r11,sp
80011228:	f0 1f 00 11 	mcall	8001126c <_fstat+0x4c>
8001122c:	c0 34       	brge	80011232 <_fstat+0x12>
8001122e:	3f fc       	mov	r12,-1
80011230:	c1 c8       	rjmp	80011268 <_fstat+0x48>
80011232:	40 08       	lddsp	r8,sp[0x0]
80011234:	ae 08       	st.h	r7[0x0],r8
80011236:	40 18       	lddsp	r8,sp[0x4]
80011238:	ae 18       	st.h	r7[0x2],r8
8001123a:	40 28       	lddsp	r8,sp[0x8]
8001123c:	8f 18       	st.w	r7[0x4],r8
8001123e:	40 38       	lddsp	r8,sp[0xc]
80011240:	ae 48       	st.h	r7[0x8],r8
80011242:	40 48       	lddsp	r8,sp[0x10]
80011244:	ae 58       	st.h	r7[0xa],r8
80011246:	40 58       	lddsp	r8,sp[0x14]
80011248:	ae 68       	st.h	r7[0xc],r8
8001124a:	40 68       	lddsp	r8,sp[0x18]
8001124c:	ae 78       	st.h	r7[0xe],r8
8001124e:	40 88       	lddsp	r8,sp[0x20]
80011250:	8f 48       	st.w	r7[0x10],r8
80011252:	40 a8       	lddsp	r8,sp[0x28]
80011254:	8f b8       	st.w	r7[0x2c],r8
80011256:	40 c8       	lddsp	r8,sp[0x30]
80011258:	8f c8       	st.w	r7[0x30],r8
8001125a:	40 d8       	lddsp	r8,sp[0x34]
8001125c:	8f 58       	st.w	r7[0x14],r8
8001125e:	40 e8       	lddsp	r8,sp[0x38]
80011260:	30 0c       	mov	r12,0
80011262:	8f 78       	st.w	r7[0x1c],r8
80011264:	40 f8       	lddsp	r8,sp[0x3c]
80011266:	8f 98       	st.w	r7[0x24],r8
80011268:	2f 0d       	sub	sp,-64
8001126a:	d8 22       	popm	r4-r7,pc
8001126c:	80 01       	ld.sh	r1,r0[0x0]
8001126e:	12 08       	add	r8,r9

80011270 <_sbrk>:
80011270:	d4 01       	pushm	lr
80011272:	48 c8       	lddpc	r8,800112a0 <_sbrk+0x30>
80011274:	70 09       	ld.w	r9,r8[0x0]
80011276:	58 09       	cp.w	r9,0
80011278:	c0 31       	brne	8001127e <_sbrk+0xe>
8001127a:	48 b9       	lddpc	r9,800112a4 <_sbrk+0x34>
8001127c:	91 09       	st.w	r8[0x0],r9
8001127e:	48 99       	lddpc	r9,800112a0 <_sbrk+0x30>
80011280:	48 aa       	lddpc	r10,800112a8 <_sbrk+0x38>
80011282:	72 08       	ld.w	r8,r9[0x0]
80011284:	f0 0c 00 0c 	add	r12,r8,r12
80011288:	14 3c       	cp.w	r12,r10
8001128a:	e0 8b 00 04 	brhi	80011292 <_sbrk+0x22>
8001128e:	93 0c       	st.w	r9[0x0],r12
80011290:	c0 68       	rjmp	8001129c <_sbrk+0x2c>
80011292:	f0 1f 00 07 	mcall	800112ac <_sbrk+0x3c>
80011296:	30 c8       	mov	r8,12
80011298:	99 08       	st.w	r12[0x0],r8
8001129a:	3f f8       	mov	r8,-1
8001129c:	10 9c       	mov	r12,r8
8001129e:	d8 02       	popm	pc
800112a0:	00 00       	add	r0,r0
800112a2:	08 08       	add	r8,r4
800112a4:	00 00       	add	r0,r0
800112a6:	0d 78       	ld.ub	r8,--r6
800112a8:	00 00       	add	r0,r0
800112aa:	f0 00       	*unknown*
800112ac:	80 01       	ld.sh	r1,r0[0x0]
800112ae:	13 64       	ld.uh	r4,--r9

800112b0 <_write_r>:
800112b0:	d4 21       	pushm	r4-r7,lr
800112b2:	16 98       	mov	r8,r11
800112b4:	18 97       	mov	r7,r12
800112b6:	10 9c       	mov	r12,r8
800112b8:	30 08       	mov	r8,0
800112ba:	14 9b       	mov	r11,r10
800112bc:	48 66       	lddpc	r6,800112d4 <_write_r+0x24>
800112be:	12 9a       	mov	r10,r9
800112c0:	8d 08       	st.w	r6[0x0],r8
800112c2:	f0 1f 00 06 	mcall	800112d8 <_write_r+0x28>
800112c6:	5b fc       	cp.w	r12,-1
800112c8:	c0 51       	brne	800112d2 <_write_r+0x22>
800112ca:	6c 08       	ld.w	r8,r6[0x0]
800112cc:	58 08       	cp.w	r8,0
800112ce:	ef f8 1a 03 	st.wne	r7[0xc],r8
800112d2:	d8 22       	popm	r4-r7,pc
800112d4:	00 00       	add	r0,r0
800112d6:	0d 74       	ld.ub	r4,--r6
800112d8:	80 01       	ld.sh	r1,r0[0x0]
800112da:	11 d8       	ld.ub	r8,r8[0x5]

800112dc <_calloc_r>:
800112dc:	d4 21       	pushm	r4-r7,lr
800112de:	f4 0b 02 4b 	mul	r11,r10,r11
800112e2:	f0 1f 00 15 	mcall	80011334 <_calloc_r+0x58>
800112e6:	18 97       	mov	r7,r12
800112e8:	c2 30       	breq	8001132e <_calloc_r+0x52>
800112ea:	f8 fa ff fc 	ld.w	r10,r12[-4]
800112ee:	e0 1a ff fc 	andl	r10,0xfffc
800112f2:	20 4a       	sub	r10,4
800112f4:	e0 4a 00 24 	cp.w	r10,36
800112f8:	e0 8b 00 18 	brhi	80011328 <_calloc_r+0x4c>
800112fc:	18 98       	mov	r8,r12
800112fe:	59 3a       	cp.w	r10,19
80011300:	e0 88 00 0f 	brls	8001131e <_calloc_r+0x42>
80011304:	30 09       	mov	r9,0
80011306:	10 a9       	st.w	r8++,r9
80011308:	10 a9       	st.w	r8++,r9
8001130a:	59 ba       	cp.w	r10,27
8001130c:	e0 88 00 09 	brls	8001131e <_calloc_r+0x42>
80011310:	10 a9       	st.w	r8++,r9
80011312:	10 a9       	st.w	r8++,r9
80011314:	e0 4a 00 24 	cp.w	r10,36
80011318:	c0 31       	brne	8001131e <_calloc_r+0x42>
8001131a:	10 a9       	st.w	r8++,r9
8001131c:	10 a9       	st.w	r8++,r9
8001131e:	30 09       	mov	r9,0
80011320:	10 a9       	st.w	r8++,r9
80011322:	91 19       	st.w	r8[0x4],r9
80011324:	91 09       	st.w	r8[0x0],r9
80011326:	c0 48       	rjmp	8001132e <_calloc_r+0x52>
80011328:	30 0b       	mov	r11,0
8001132a:	f0 1f 00 04 	mcall	80011338 <_calloc_r+0x5c>
8001132e:	0e 9c       	mov	r12,r7
80011330:	d8 22       	popm	r4-r7,pc
80011332:	00 00       	add	r0,r0
80011334:	80 01       	ld.sh	r1,r0[0x0]
80011336:	02 c0       	st.b	r1++,r0
80011338:	80 00       	ld.sh	r0,r0[0x0]
8001133a:	c7 e6       	brmi	80011436 <_fclose_r+0xc6>

8001133c <_close_r>:
8001133c:	d4 21       	pushm	r4-r7,lr
8001133e:	30 08       	mov	r8,0
80011340:	18 97       	mov	r7,r12
80011342:	48 76       	lddpc	r6,8001135c <_close_r+0x20>
80011344:	16 9c       	mov	r12,r11
80011346:	8d 08       	st.w	r6[0x0],r8
80011348:	f0 1f 00 06 	mcall	80011360 <_close_r+0x24>
8001134c:	5b fc       	cp.w	r12,-1
8001134e:	c0 51       	brne	80011358 <_close_r+0x1c>
80011350:	6c 08       	ld.w	r8,r6[0x0]
80011352:	58 08       	cp.w	r8,0
80011354:	ef f8 1a 03 	st.wne	r7[0xc],r8
80011358:	d8 22       	popm	r4-r7,pc
8001135a:	00 00       	add	r0,r0
8001135c:	00 00       	add	r0,r0
8001135e:	0d 74       	ld.ub	r4,--r6
80011360:	80 01       	ld.sh	r1,r0[0x0]
80011362:	11 90       	ld.ub	r0,r8[0x1]

80011364 <__errno>:
80011364:	48 28       	lddpc	r8,8001136c <__errno+0x8>
80011366:	70 0c       	ld.w	r12,r8[0x0]
80011368:	2f 4c       	sub	r12,-12
8001136a:	5e fc       	retal	r12
8001136c:	00 00       	add	r0,r0
8001136e:	01 a8       	ld.ub	r8,r0[0x2]

80011370 <_fclose_r>:
80011370:	d4 21       	pushm	r4-r7,lr
80011372:	18 96       	mov	r6,r12
80011374:	16 97       	mov	r7,r11
80011376:	58 0b       	cp.w	r11,0
80011378:	c0 31       	brne	8001137e <_fclose_r+0xe>
8001137a:	16 95       	mov	r5,r11
8001137c:	c5 08       	rjmp	8001141c <_fclose_r+0xac>
8001137e:	f0 1f 00 29 	mcall	80011420 <_fclose_r+0xb0>
80011382:	58 06       	cp.w	r6,0
80011384:	c0 70       	breq	80011392 <_fclose_r+0x22>
80011386:	6c 68       	ld.w	r8,r6[0x18]
80011388:	58 08       	cp.w	r8,0
8001138a:	c0 41       	brne	80011392 <_fclose_r+0x22>
8001138c:	0c 9c       	mov	r12,r6
8001138e:	f0 1f 00 26 	mcall	80011424 <_fclose_r+0xb4>
80011392:	4a 68       	lddpc	r8,80011428 <_fclose_r+0xb8>
80011394:	10 37       	cp.w	r7,r8
80011396:	c0 31       	brne	8001139c <_fclose_r+0x2c>
80011398:	6c 07       	ld.w	r7,r6[0x0]
8001139a:	c0 a8       	rjmp	800113ae <_fclose_r+0x3e>
8001139c:	4a 48       	lddpc	r8,8001142c <_fclose_r+0xbc>
8001139e:	10 37       	cp.w	r7,r8
800113a0:	c0 31       	brne	800113a6 <_fclose_r+0x36>
800113a2:	6c 17       	ld.w	r7,r6[0x4]
800113a4:	c0 58       	rjmp	800113ae <_fclose_r+0x3e>
800113a6:	4a 38       	lddpc	r8,80011430 <_fclose_r+0xc0>
800113a8:	10 37       	cp.w	r7,r8
800113aa:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800113ae:	8e 69       	ld.sh	r9,r7[0xc]
800113b0:	30 08       	mov	r8,0
800113b2:	f0 09 19 00 	cp.h	r9,r8
800113b6:	c0 51       	brne	800113c0 <_fclose_r+0x50>
800113b8:	f0 1f 00 1f 	mcall	80011434 <_fclose_r+0xc4>
800113bc:	30 05       	mov	r5,0
800113be:	c2 f8       	rjmp	8001141c <_fclose_r+0xac>
800113c0:	0e 9b       	mov	r11,r7
800113c2:	0c 9c       	mov	r12,r6
800113c4:	f0 1f 00 1d 	mcall	80011438 <_fclose_r+0xc8>
800113c8:	6e c8       	ld.w	r8,r7[0x30]
800113ca:	18 95       	mov	r5,r12
800113cc:	58 08       	cp.w	r8,0
800113ce:	c0 60       	breq	800113da <_fclose_r+0x6a>
800113d0:	6e 8b       	ld.w	r11,r7[0x20]
800113d2:	0c 9c       	mov	r12,r6
800113d4:	5d 18       	icall	r8
800113d6:	f9 b5 05 ff 	movlt	r5,-1
800113da:	8e 68       	ld.sh	r8,r7[0xc]
800113dc:	ed b8 00 07 	bld	r8,0x7
800113e0:	c0 51       	brne	800113ea <_fclose_r+0x7a>
800113e2:	6e 4b       	ld.w	r11,r7[0x10]
800113e4:	0c 9c       	mov	r12,r6
800113e6:	f0 1f 00 16 	mcall	8001143c <_fclose_r+0xcc>
800113ea:	6e db       	ld.w	r11,r7[0x34]
800113ec:	58 0b       	cp.w	r11,0
800113ee:	c0 a0       	breq	80011402 <_fclose_r+0x92>
800113f0:	ee c8 ff bc 	sub	r8,r7,-68
800113f4:	10 3b       	cp.w	r11,r8
800113f6:	c0 40       	breq	800113fe <_fclose_r+0x8e>
800113f8:	0c 9c       	mov	r12,r6
800113fa:	f0 1f 00 11 	mcall	8001143c <_fclose_r+0xcc>
800113fe:	30 08       	mov	r8,0
80011400:	8f d8       	st.w	r7[0x34],r8
80011402:	6f 2b       	ld.w	r11,r7[0x48]
80011404:	58 0b       	cp.w	r11,0
80011406:	c0 70       	breq	80011414 <_fclose_r+0xa4>
80011408:	0c 9c       	mov	r12,r6
8001140a:	f0 1f 00 0d 	mcall	8001143c <_fclose_r+0xcc>
8001140e:	30 08       	mov	r8,0
80011410:	ef 48 00 48 	st.w	r7[72],r8
80011414:	30 08       	mov	r8,0
80011416:	ae 68       	st.h	r7[0xc],r8
80011418:	f0 1f 00 07 	mcall	80011434 <_fclose_r+0xc4>
8001141c:	0a 9c       	mov	r12,r5
8001141e:	d8 22       	popm	r4-r7,pc
80011420:	80 00       	ld.sh	r0,r0[0x0]
80011422:	fb 00 80 00 	ld.sh	r0,sp[-32768]
80011426:	fb c4       	*unknown*
80011428:	80 01       	ld.sh	r1,r0[0x0]
8001142a:	25 38       	sub	r8,83
8001142c:	80 01       	ld.sh	r1,r0[0x0]
8001142e:	25 58       	sub	r8,85
80011430:	80 01       	ld.sh	r1,r0[0x0]
80011432:	25 78       	sub	r8,87
80011434:	80 00       	ld.sh	r0,r0[0x0]
80011436:	fb 02 80 00 	ld.sh	r2,sp[-32768]
8001143a:	f9 e8 80 00 	sthh.w	r0[r0],r12:b,r8:b
8001143e:	fd 1c d4 01 	ld.uh	r12,lr[-11263]

80011440 <fclose>:
80011440:	d4 01       	pushm	lr
80011442:	48 48       	lddpc	r8,80011450 <fclose+0x10>
80011444:	18 9b       	mov	r11,r12
80011446:	70 0c       	ld.w	r12,r8[0x0]
80011448:	f0 1f 00 03 	mcall	80011454 <fclose+0x14>
8001144c:	d8 02       	popm	pc
8001144e:	00 00       	add	r0,r0
80011450:	00 00       	add	r0,r0
80011452:	01 a8       	ld.ub	r8,r0[0x2]
80011454:	80 01       	ld.sh	r1,r0[0x0]
80011456:	13 70       	ld.ub	r0,--r9

80011458 <_fstat_r>:
80011458:	d4 21       	pushm	r4-r7,lr
8001145a:	16 98       	mov	r8,r11
8001145c:	18 97       	mov	r7,r12
8001145e:	10 9c       	mov	r12,r8
80011460:	30 08       	mov	r8,0
80011462:	48 76       	lddpc	r6,8001147c <_fstat_r+0x24>
80011464:	14 9b       	mov	r11,r10
80011466:	8d 08       	st.w	r6[0x0],r8
80011468:	f0 1f 00 06 	mcall	80011480 <_fstat_r+0x28>
8001146c:	5b fc       	cp.w	r12,-1
8001146e:	c0 51       	brne	80011478 <_fstat_r+0x20>
80011470:	6c 08       	ld.w	r8,r6[0x0]
80011472:	58 08       	cp.w	r8,0
80011474:	ef f8 1a 03 	st.wne	r7[0xc],r8
80011478:	d8 22       	popm	r4-r7,pc
8001147a:	00 00       	add	r0,r0
8001147c:	00 00       	add	r0,r0
8001147e:	0d 74       	ld.ub	r4,--r6
80011480:	80 01       	ld.sh	r1,r0[0x0]
80011482:	12 20       	rsub	r0,r9

80011484 <_lseek_r>:
80011484:	d4 21       	pushm	r4-r7,lr
80011486:	16 98       	mov	r8,r11
80011488:	18 97       	mov	r7,r12
8001148a:	10 9c       	mov	r12,r8
8001148c:	30 08       	mov	r8,0
8001148e:	14 9b       	mov	r11,r10
80011490:	48 66       	lddpc	r6,800114a8 <_lseek_r+0x24>
80011492:	12 9a       	mov	r10,r9
80011494:	8d 08       	st.w	r6[0x0],r8
80011496:	f0 1f 00 06 	mcall	800114ac <_lseek_r+0x28>
8001149a:	5b fc       	cp.w	r12,-1
8001149c:	c0 51       	brne	800114a6 <_lseek_r+0x22>
8001149e:	6c 08       	ld.w	r8,r6[0x0]
800114a0:	58 08       	cp.w	r8,0
800114a2:	ef f8 1a 03 	st.wne	r7[0xc],r8
800114a6:	d8 22       	popm	r4-r7,pc
800114a8:	00 00       	add	r0,r0
800114aa:	0d 74       	ld.ub	r4,--r6
800114ac:	80 01       	ld.sh	r1,r0[0x0]
800114ae:	11 a8       	ld.ub	r8,r8[0x2]

800114b0 <_read_r>:
800114b0:	d4 21       	pushm	r4-r7,lr
800114b2:	16 98       	mov	r8,r11
800114b4:	18 97       	mov	r7,r12
800114b6:	10 9c       	mov	r12,r8
800114b8:	30 08       	mov	r8,0
800114ba:	14 9b       	mov	r11,r10
800114bc:	48 66       	lddpc	r6,800114d4 <_read_r+0x24>
800114be:	12 9a       	mov	r10,r9
800114c0:	8d 08       	st.w	r6[0x0],r8
800114c2:	f0 1f 00 06 	mcall	800114d8 <_read_r+0x28>
800114c6:	5b fc       	cp.w	r12,-1
800114c8:	c0 51       	brne	800114d2 <_read_r+0x22>
800114ca:	6c 08       	ld.w	r8,r6[0x0]
800114cc:	58 08       	cp.w	r8,0
800114ce:	ef f8 1a 03 	st.wne	r7[0xc],r8
800114d2:	d8 22       	popm	r4-r7,pc
800114d4:	00 00       	add	r0,r0
800114d6:	0d 74       	ld.ub	r4,--r6
800114d8:	80 01       	ld.sh	r1,r0[0x0]
800114da:	11 c0       	ld.ub	r0,r8[0x4]

800114dc <__avr32_f64_to_u32>:
800114dc:	58 0b       	cp.w	r11,0
800114de:	5e 6d       	retmi	0

800114e0 <__avr32_f64_to_s32>:
800114e0:	f6 0c 15 01 	lsl	r12,r11,0x1
800114e4:	b5 9c       	lsr	r12,0x15
800114e6:	e0 2c 03 ff 	sub	r12,1023
800114ea:	5e 3d       	retlo	0
800114ec:	f8 0c 11 1f 	rsub	r12,r12,31
800114f0:	16 99       	mov	r9,r11
800114f2:	ab 7b       	lsl	r11,0xb
800114f4:	bf bb       	sbr	r11,0x1f
800114f6:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800114fa:	f6 0c 0a 4b 	lsr	r11,r11,r12
800114fe:	a1 79       	lsl	r9,0x1
80011500:	5e 2b       	reths	r11
80011502:	5c 3b       	neg	r11
80011504:	5e fb       	retal	r11

80011506 <__avr32_f64_cmp_eq>:
80011506:	10 3a       	cp.w	r10,r8
80011508:	f2 0b 13 00 	cpc	r11,r9
8001150c:	c0 80       	breq	8001151c <__avr32_f64_cmp_eq+0x16>
8001150e:	a1 7b       	lsl	r11,0x1
80011510:	a1 79       	lsl	r9,0x1
80011512:	14 4b       	or	r11,r10
80011514:	12 4b       	or	r11,r9
80011516:	10 4b       	or	r11,r8
80011518:	5e 0f       	reteq	1
8001151a:	5e fd       	retal	0
8001151c:	a1 7b       	lsl	r11,0x1
8001151e:	fc 1c ff e0 	movh	r12,0xffe0
80011522:	58 0a       	cp.w	r10,0
80011524:	f8 0b 13 00 	cpc	r11,r12
80011528:	5e 8f       	retls	1
8001152a:	5e fd       	retal	0

8001152c <__avr32_f64_cmp_ge>:
8001152c:	1a de       	st.w	--sp,lr
8001152e:	1a d7       	st.w	--sp,r7
80011530:	a1 7b       	lsl	r11,0x1
80011532:	5f 3c       	srlo	r12
80011534:	a1 79       	lsl	r9,0x1
80011536:	5f 37       	srlo	r7
80011538:	5c fc       	rol	r12
8001153a:	fc 1e ff e0 	movh	lr,0xffe0
8001153e:	58 0a       	cp.w	r10,0
80011540:	fc 0b 13 00 	cpc	r11,lr
80011544:	e0 8b 00 1d 	brhi	8001157e <__avr32_f64_cmp_ge+0x52>
80011548:	58 08       	cp.w	r8,0
8001154a:	fc 09 13 00 	cpc	r9,lr
8001154e:	e0 8b 00 18 	brhi	8001157e <__avr32_f64_cmp_ge+0x52>
80011552:	58 0b       	cp.w	r11,0
80011554:	f5 ba 00 00 	subfeq	r10,0
80011558:	c1 50       	breq	80011582 <__avr32_f64_cmp_ge+0x56>
8001155a:	1b 07       	ld.w	r7,sp++
8001155c:	1b 0e       	ld.w	lr,sp++
8001155e:	58 3c       	cp.w	r12,3
80011560:	c0 a0       	breq	80011574 <__avr32_f64_cmp_ge+0x48>
80011562:	58 1c       	cp.w	r12,1
80011564:	c0 33       	brcs	8001156a <__avr32_f64_cmp_ge+0x3e>
80011566:	5e 0f       	reteq	1
80011568:	5e 1d       	retne	0
8001156a:	10 3a       	cp.w	r10,r8
8001156c:	f2 0b 13 00 	cpc	r11,r9
80011570:	5e 2f       	reths	1
80011572:	5e 3d       	retlo	0
80011574:	14 38       	cp.w	r8,r10
80011576:	f6 09 13 00 	cpc	r9,r11
8001157a:	5e 2f       	reths	1
8001157c:	5e 3d       	retlo	0
8001157e:	1b 07       	ld.w	r7,sp++
80011580:	d8 0a       	popm	pc,r12=0
80011582:	58 17       	cp.w	r7,1
80011584:	5f 0c       	sreq	r12
80011586:	58 09       	cp.w	r9,0
80011588:	f5 b8 00 00 	subfeq	r8,0
8001158c:	1b 07       	ld.w	r7,sp++
8001158e:	1b 0e       	ld.w	lr,sp++
80011590:	5e 0f       	reteq	1
80011592:	5e fc       	retal	r12

80011594 <__avr32_f64_cmp_lt>:
80011594:	1a de       	st.w	--sp,lr
80011596:	1a d7       	st.w	--sp,r7
80011598:	a1 7b       	lsl	r11,0x1
8001159a:	5f 3c       	srlo	r12
8001159c:	a1 79       	lsl	r9,0x1
8001159e:	5f 37       	srlo	r7
800115a0:	5c fc       	rol	r12
800115a2:	fc 1e ff e0 	movh	lr,0xffe0
800115a6:	58 0a       	cp.w	r10,0
800115a8:	fc 0b 13 00 	cpc	r11,lr
800115ac:	e0 8b 00 1d 	brhi	800115e6 <__avr32_f64_cmp_lt+0x52>
800115b0:	58 08       	cp.w	r8,0
800115b2:	fc 09 13 00 	cpc	r9,lr
800115b6:	e0 8b 00 18 	brhi	800115e6 <__avr32_f64_cmp_lt+0x52>
800115ba:	58 0b       	cp.w	r11,0
800115bc:	f5 ba 00 00 	subfeq	r10,0
800115c0:	c1 50       	breq	800115ea <__avr32_f64_cmp_lt+0x56>
800115c2:	1b 07       	ld.w	r7,sp++
800115c4:	1b 0e       	ld.w	lr,sp++
800115c6:	58 3c       	cp.w	r12,3
800115c8:	c0 a0       	breq	800115dc <__avr32_f64_cmp_lt+0x48>
800115ca:	58 1c       	cp.w	r12,1
800115cc:	c0 33       	brcs	800115d2 <__avr32_f64_cmp_lt+0x3e>
800115ce:	5e 0d       	reteq	0
800115d0:	5e 1f       	retne	1
800115d2:	10 3a       	cp.w	r10,r8
800115d4:	f2 0b 13 00 	cpc	r11,r9
800115d8:	5e 2d       	reths	0
800115da:	5e 3f       	retlo	1
800115dc:	14 38       	cp.w	r8,r10
800115de:	f6 09 13 00 	cpc	r9,r11
800115e2:	5e 2d       	reths	0
800115e4:	5e 3f       	retlo	1
800115e6:	1b 07       	ld.w	r7,sp++
800115e8:	d8 0a       	popm	pc,r12=0
800115ea:	58 17       	cp.w	r7,1
800115ec:	5f 1c       	srne	r12
800115ee:	58 09       	cp.w	r9,0
800115f0:	f5 b8 00 00 	subfeq	r8,0
800115f4:	1b 07       	ld.w	r7,sp++
800115f6:	1b 0e       	ld.w	lr,sp++
800115f8:	5e 0d       	reteq	0
800115fa:	5e fc       	retal	r12

800115fc <__avr32_f64_div>:
800115fc:	eb cd 40 ff 	pushm	r0-r7,lr
80011600:	f7 e9 20 0e 	eor	lr,r11,r9
80011604:	f6 07 16 14 	lsr	r7,r11,0x14
80011608:	a9 7b       	lsl	r11,0x9
8001160a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8001160e:	a9 7a       	lsl	r10,0x9
80011610:	bd bb       	sbr	r11,0x1d
80011612:	e4 1b 3f ff 	andh	r11,0x3fff
80011616:	ab d7       	cbr	r7,0xb
80011618:	e0 80 00 cc 	breq	800117b0 <__avr32_f64_div_round_subnormal+0x54>
8001161c:	e0 47 07 ff 	cp.w	r7,2047
80011620:	e0 84 00 b5 	brge	8001178a <__avr32_f64_div_round_subnormal+0x2e>
80011624:	f2 06 16 14 	lsr	r6,r9,0x14
80011628:	a9 79       	lsl	r9,0x9
8001162a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8001162e:	a9 78       	lsl	r8,0x9
80011630:	bd b9       	sbr	r9,0x1d
80011632:	e4 19 3f ff 	andh	r9,0x3fff
80011636:	ab d6       	cbr	r6,0xb
80011638:	e0 80 00 e2 	breq	800117fc <__avr32_f64_div_round_subnormal+0xa0>
8001163c:	e0 46 07 ff 	cp.w	r6,2047
80011640:	e0 84 00 b2 	brge	800117a4 <__avr32_f64_div_round_subnormal+0x48>
80011644:	0c 17       	sub	r7,r6
80011646:	fe 37 fc 01 	sub	r7,-1023
8001164a:	fc 1c 80 00 	movh	r12,0x8000
8001164e:	f8 03 16 01 	lsr	r3,r12,0x1
80011652:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80011656:	5c d4       	com	r4
80011658:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8001165c:	e6 09 06 44 	mulu.d	r4,r3,r9
80011660:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80011664:	e6 05 06 44 	mulu.d	r4,r3,r5
80011668:	ea 03 15 02 	lsl	r3,r5,0x2
8001166c:	e6 09 06 44 	mulu.d	r4,r3,r9
80011670:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80011674:	e6 05 06 44 	mulu.d	r4,r3,r5
80011678:	ea 03 15 02 	lsl	r3,r5,0x2
8001167c:	e6 09 06 44 	mulu.d	r4,r3,r9
80011680:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80011684:	e6 05 06 44 	mulu.d	r4,r3,r5
80011688:	ea 03 15 02 	lsl	r3,r5,0x2
8001168c:	e6 08 06 40 	mulu.d	r0,r3,r8
80011690:	e4 09 07 40 	macu.d	r0,r2,r9
80011694:	e6 09 06 44 	mulu.d	r4,r3,r9
80011698:	02 04       	add	r4,r1
8001169a:	5c 05       	acr	r5
8001169c:	a3 65       	lsl	r5,0x2
8001169e:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800116a2:	a3 64       	lsl	r4,0x2
800116a4:	5c 34       	neg	r4
800116a6:	f8 05 01 45 	sbc	r5,r12,r5
800116aa:	e6 04 06 40 	mulu.d	r0,r3,r4
800116ae:	e4 05 07 40 	macu.d	r0,r2,r5
800116b2:	e6 05 06 44 	mulu.d	r4,r3,r5
800116b6:	02 04       	add	r4,r1
800116b8:	5c 05       	acr	r5
800116ba:	ea 03 15 02 	lsl	r3,r5,0x2
800116be:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800116c2:	e8 02 15 02 	lsl	r2,r4,0x2
800116c6:	e6 08 06 40 	mulu.d	r0,r3,r8
800116ca:	e4 09 07 40 	macu.d	r0,r2,r9
800116ce:	e6 09 06 44 	mulu.d	r4,r3,r9
800116d2:	02 04       	add	r4,r1
800116d4:	5c 05       	acr	r5
800116d6:	a3 65       	lsl	r5,0x2
800116d8:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800116dc:	a3 64       	lsl	r4,0x2
800116de:	5c 34       	neg	r4
800116e0:	f8 05 01 45 	sbc	r5,r12,r5
800116e4:	e6 04 06 40 	mulu.d	r0,r3,r4
800116e8:	e4 05 07 40 	macu.d	r0,r2,r5
800116ec:	e6 05 06 44 	mulu.d	r4,r3,r5
800116f0:	02 04       	add	r4,r1
800116f2:	5c 05       	acr	r5
800116f4:	ea 03 15 02 	lsl	r3,r5,0x2
800116f8:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800116fc:	e8 02 15 02 	lsl	r2,r4,0x2
80011700:	e6 0a 06 40 	mulu.d	r0,r3,r10
80011704:	e4 0b 07 40 	macu.d	r0,r2,r11
80011708:	e6 0b 06 42 	mulu.d	r2,r3,r11
8001170c:	02 02       	add	r2,r1
8001170e:	5c 03       	acr	r3
80011710:	ed b3 00 1c 	bld	r3,0x1c
80011714:	c0 90       	breq	80011726 <__avr32_f64_div+0x12a>
80011716:	a1 72       	lsl	r2,0x1
80011718:	5c f3       	rol	r3
8001171a:	20 17       	sub	r7,1
8001171c:	a3 9a       	lsr	r10,0x3
8001171e:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80011722:	a3 9b       	lsr	r11,0x3
80011724:	c0 58       	rjmp	8001172e <__avr32_f64_div+0x132>
80011726:	a5 8a       	lsr	r10,0x4
80011728:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8001172c:	a5 8b       	lsr	r11,0x4
8001172e:	58 07       	cp.w	r7,0
80011730:	e0 8a 00 8b 	brle	80011846 <__avr32_f64_div_res_subnormal>
80011734:	e0 12 ff 00 	andl	r2,0xff00
80011738:	e8 12 00 80 	orl	r2,0x80
8001173c:	e6 08 06 40 	mulu.d	r0,r3,r8
80011740:	e4 09 07 40 	macu.d	r0,r2,r9
80011744:	e4 08 06 44 	mulu.d	r4,r2,r8
80011748:	e6 09 06 48 	mulu.d	r8,r3,r9
8001174c:	00 05       	add	r5,r0
8001174e:	f0 01 00 48 	adc	r8,r8,r1
80011752:	5c 09       	acr	r9
80011754:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80011758:	58 04       	cp.w	r4,0
8001175a:	5c 25       	cpc	r5

8001175c <__avr32_f64_div_round_subnormal>:
8001175c:	f4 08 13 00 	cpc	r8,r10
80011760:	f6 09 13 00 	cpc	r9,r11
80011764:	5f 36       	srlo	r6
80011766:	f8 06 17 00 	moveq	r6,r12
8001176a:	e4 0a 16 08 	lsr	r10,r2,0x8
8001176e:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80011772:	e6 0b 16 08 	lsr	r11,r3,0x8
80011776:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8001177a:	ed be 00 1f 	bld	lr,0x1f
8001177e:	ef bb 00 1f 	bst	r11,0x1f
80011782:	0c 0a       	add	r10,r6
80011784:	5c 0b       	acr	r11
80011786:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8001178a:	e4 1b 00 0f 	andh	r11,0xf
8001178e:	14 4b       	or	r11,r10
80011790:	e0 81 00 a7 	brne	800118de <__avr32_f64_div_res_subnormal+0x98>
80011794:	f2 06 16 14 	lsr	r6,r9,0x14
80011798:	ab d6       	cbr	r6,0xb
8001179a:	e0 46 07 ff 	cp.w	r6,2047
8001179e:	e0 81 00 a4 	brne	800118e6 <__avr32_f64_div_res_subnormal+0xa0>
800117a2:	c9 e8       	rjmp	800118de <__avr32_f64_div_res_subnormal+0x98>
800117a4:	e4 19 00 0f 	andh	r9,0xf
800117a8:	10 49       	or	r9,r8
800117aa:	e0 81 00 9a 	brne	800118de <__avr32_f64_div_res_subnormal+0x98>
800117ae:	c9 28       	rjmp	800118d2 <__avr32_f64_div_res_subnormal+0x8c>
800117b0:	a3 7b       	lsl	r11,0x3
800117b2:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800117b6:	a3 7a       	lsl	r10,0x3
800117b8:	f5 eb 10 04 	or	r4,r10,r11
800117bc:	e0 80 00 a0 	breq	800118fc <__avr32_f64_div_op1_zero>
800117c0:	f6 04 12 00 	clz	r4,r11
800117c4:	c1 70       	breq	800117f2 <__avr32_f64_div_round_subnormal+0x96>
800117c6:	c0 c3       	brcs	800117de <__avr32_f64_div_round_subnormal+0x82>
800117c8:	e8 05 11 20 	rsub	r5,r4,32
800117cc:	f6 04 09 4b 	lsl	r11,r11,r4
800117d0:	f4 05 0a 45 	lsr	r5,r10,r5
800117d4:	0a 4b       	or	r11,r5
800117d6:	f4 04 09 4a 	lsl	r10,r10,r4
800117da:	08 17       	sub	r7,r4
800117dc:	c0 b8       	rjmp	800117f2 <__avr32_f64_div_round_subnormal+0x96>
800117de:	f4 04 12 00 	clz	r4,r10
800117e2:	f9 b4 03 00 	movlo	r4,0
800117e6:	f7 b4 02 e0 	subhs	r4,-32
800117ea:	f4 04 09 4b 	lsl	r11,r10,r4
800117ee:	30 0a       	mov	r10,0
800117f0:	08 17       	sub	r7,r4
800117f2:	a3 8a       	lsr	r10,0x2
800117f4:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800117f8:	a3 8b       	lsr	r11,0x2
800117fa:	c1 1b       	rjmp	8001161c <__avr32_f64_div+0x20>
800117fc:	a3 79       	lsl	r9,0x3
800117fe:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80011802:	a3 78       	lsl	r8,0x3
80011804:	f3 e8 10 04 	or	r4,r9,r8
80011808:	c6 f0       	breq	800118e6 <__avr32_f64_div_res_subnormal+0xa0>
8001180a:	f2 04 12 00 	clz	r4,r9
8001180e:	c1 70       	breq	8001183c <__avr32_f64_div_round_subnormal+0xe0>
80011810:	c0 c3       	brcs	80011828 <__avr32_f64_div_round_subnormal+0xcc>
80011812:	e8 05 11 20 	rsub	r5,r4,32
80011816:	f2 04 09 49 	lsl	r9,r9,r4
8001181a:	f0 05 0a 45 	lsr	r5,r8,r5
8001181e:	0a 49       	or	r9,r5
80011820:	f0 04 09 48 	lsl	r8,r8,r4
80011824:	08 16       	sub	r6,r4
80011826:	c0 b8       	rjmp	8001183c <__avr32_f64_div_round_subnormal+0xe0>
80011828:	f0 04 12 00 	clz	r4,r8
8001182c:	f9 b4 03 00 	movlo	r4,0
80011830:	f7 b4 02 e0 	subhs	r4,-32
80011834:	f0 04 09 49 	lsl	r9,r8,r4
80011838:	30 08       	mov	r8,0
8001183a:	08 16       	sub	r6,r4
8001183c:	a3 88       	lsr	r8,0x2
8001183e:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80011842:	a3 89       	lsr	r9,0x2
80011844:	cf ca       	rjmp	8001163c <__avr32_f64_div+0x40>

80011846 <__avr32_f64_div_res_subnormal>:
80011846:	5c 37       	neg	r7
80011848:	2f f7       	sub	r7,-1
8001184a:	f1 b7 04 c0 	satu	r7,0x6
8001184e:	e0 47 00 20 	cp.w	r7,32
80011852:	c1 54       	brge	8001187c <__avr32_f64_div_res_subnormal+0x36>
80011854:	ee 06 11 20 	rsub	r6,r7,32
80011858:	e4 07 0a 42 	lsr	r2,r2,r7
8001185c:	e6 06 09 4c 	lsl	r12,r3,r6
80011860:	18 42       	or	r2,r12
80011862:	e6 07 0a 43 	lsr	r3,r3,r7
80011866:	f4 06 09 41 	lsl	r1,r10,r6
8001186a:	f4 07 0a 4a 	lsr	r10,r10,r7
8001186e:	f6 06 09 4c 	lsl	r12,r11,r6
80011872:	18 4a       	or	r10,r12
80011874:	f6 07 0a 4b 	lsr	r11,r11,r7
80011878:	30 00       	mov	r0,0
8001187a:	c1 58       	rjmp	800118a4 <__avr32_f64_div_res_subnormal+0x5e>
8001187c:	ee 06 11 20 	rsub	r6,r7,32
80011880:	f9 b0 00 00 	moveq	r0,0
80011884:	f9 bc 00 00 	moveq	r12,0
80011888:	c0 50       	breq	80011892 <__avr32_f64_div_res_subnormal+0x4c>
8001188a:	f4 06 09 40 	lsl	r0,r10,r6
8001188e:	f6 06 09 4c 	lsl	r12,r11,r6
80011892:	e6 07 0a 42 	lsr	r2,r3,r7
80011896:	30 03       	mov	r3,0
80011898:	f4 07 0a 41 	lsr	r1,r10,r7
8001189c:	18 41       	or	r1,r12
8001189e:	f6 07 0a 4a 	lsr	r10,r11,r7
800118a2:	30 0b       	mov	r11,0
800118a4:	e0 12 ff 00 	andl	r2,0xff00
800118a8:	e8 12 00 80 	orl	r2,0x80
800118ac:	e6 08 06 46 	mulu.d	r6,r3,r8
800118b0:	e4 09 07 46 	macu.d	r6,r2,r9
800118b4:	e4 08 06 44 	mulu.d	r4,r2,r8
800118b8:	e6 09 06 48 	mulu.d	r8,r3,r9
800118bc:	0c 05       	add	r5,r6
800118be:	f0 07 00 48 	adc	r8,r8,r7
800118c2:	5c 09       	acr	r9
800118c4:	30 07       	mov	r7,0
800118c6:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800118ca:	00 34       	cp.w	r4,r0
800118cc:	e2 05 13 00 	cpc	r5,r1
800118d0:	c4 6b       	rjmp	8001175c <__avr32_f64_div_round_subnormal>
800118d2:	1c 9b       	mov	r11,lr
800118d4:	e6 1b 80 00 	andh	r11,0x8000,COH
800118d8:	30 0a       	mov	r10,0
800118da:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800118de:	3f fb       	mov	r11,-1
800118e0:	30 0a       	mov	r10,0
800118e2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800118e6:	f5 eb 10 04 	or	r4,r10,r11
800118ea:	c0 90       	breq	800118fc <__avr32_f64_div_op1_zero>
800118ec:	1c 9b       	mov	r11,lr
800118ee:	e6 1b 80 00 	andh	r11,0x8000,COH
800118f2:	ea 1b 7f f0 	orh	r11,0x7ff0
800118f6:	30 0a       	mov	r10,0
800118f8:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800118fc <__avr32_f64_div_op1_zero>:
800118fc:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80011900:	ce f0       	breq	800118de <__avr32_f64_div_res_subnormal+0x98>
80011902:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80011906:	e0 44 07 ff 	cp.w	r4,2047
8001190a:	ce 41       	brne	800118d2 <__avr32_f64_div_res_subnormal+0x8c>
8001190c:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80011910:	ce 10       	breq	800118d2 <__avr32_f64_div_res_subnormal+0x8c>
80011912:	ce 6b       	rjmp	800118de <__avr32_f64_div_res_subnormal+0x98>

80011914 <__avr32_umod64>:
80011914:	d4 31       	pushm	r0-r7,lr
80011916:	1a 97       	mov	r7,sp
80011918:	20 3d       	sub	sp,12
8001191a:	10 9c       	mov	r12,r8
8001191c:	12 95       	mov	r5,r9
8001191e:	14 9e       	mov	lr,r10
80011920:	16 91       	mov	r1,r11
80011922:	16 96       	mov	r6,r11
80011924:	58 09       	cp.w	r9,0
80011926:	e0 81 00 81 	brne	80011a28 <__avr32_umod64+0x114>
8001192a:	16 38       	cp.w	r8,r11
8001192c:	e0 88 00 12 	brls	80011950 <__avr32_umod64+0x3c>
80011930:	f0 08 12 00 	clz	r8,r8
80011934:	c4 e0       	breq	800119d0 <__avr32_umod64+0xbc>
80011936:	f6 08 09 46 	lsl	r6,r11,r8
8001193a:	f8 08 09 4c 	lsl	r12,r12,r8
8001193e:	f0 0b 11 20 	rsub	r11,r8,32
80011942:	f4 08 09 4e 	lsl	lr,r10,r8
80011946:	f4 0b 0a 4b 	lsr	r11,r10,r11
8001194a:	f7 e6 10 06 	or	r6,r11,r6
8001194e:	c4 18       	rjmp	800119d0 <__avr32_umod64+0xbc>
80011950:	58 08       	cp.w	r8,0
80011952:	c0 51       	brne	8001195c <__avr32_umod64+0x48>
80011954:	30 19       	mov	r9,1
80011956:	f2 08 0d 08 	divu	r8,r9,r8
8001195a:	10 9c       	mov	r12,r8
8001195c:	f8 08 12 00 	clz	r8,r12
80011960:	c0 31       	brne	80011966 <__avr32_umod64+0x52>
80011962:	18 16       	sub	r6,r12
80011964:	c3 68       	rjmp	800119d0 <__avr32_umod64+0xbc>
80011966:	f0 03 11 20 	rsub	r3,r8,32
8001196a:	f4 03 0a 4b 	lsr	r11,r10,r3
8001196e:	f8 08 09 4c 	lsl	r12,r12,r8
80011972:	ec 08 09 49 	lsl	r9,r6,r8
80011976:	ec 03 0a 43 	lsr	r3,r6,r3
8001197a:	f7 e9 10 09 	or	r9,r11,r9
8001197e:	f8 05 16 10 	lsr	r5,r12,0x10
80011982:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80011986:	e6 05 0d 02 	divu	r2,r3,r5
8001198a:	f2 0e 16 10 	lsr	lr,r9,0x10
8001198e:	ec 02 02 4b 	mul	r11,r6,r2
80011992:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80011996:	16 3e       	cp.w	lr,r11
80011998:	c0 72       	brcc	800119a6 <__avr32_umod64+0x92>
8001199a:	18 0e       	add	lr,r12
8001199c:	18 3e       	cp.w	lr,r12
8001199e:	c0 43       	brcs	800119a6 <__avr32_umod64+0x92>
800119a0:	16 3e       	cp.w	lr,r11
800119a2:	fd dc e3 0e 	addcs	lr,lr,r12
800119a6:	fc 0b 01 03 	sub	r3,lr,r11
800119aa:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800119ae:	e6 05 0d 02 	divu	r2,r3,r5
800119b2:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800119b6:	a5 36       	mul	r6,r2
800119b8:	0c 39       	cp.w	r9,r6
800119ba:	c0 72       	brcc	800119c8 <__avr32_umod64+0xb4>
800119bc:	18 09       	add	r9,r12
800119be:	18 39       	cp.w	r9,r12
800119c0:	c0 43       	brcs	800119c8 <__avr32_umod64+0xb4>
800119c2:	0c 39       	cp.w	r9,r6
800119c4:	f3 dc e3 09 	addcs	r9,r9,r12
800119c8:	f2 06 01 06 	sub	r6,r9,r6
800119cc:	f4 08 09 4e 	lsl	lr,r10,r8
800119d0:	f8 0a 16 10 	lsr	r10,r12,0x10
800119d4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800119d8:	ec 0a 0d 02 	divu	r2,r6,r10
800119dc:	fc 09 16 10 	lsr	r9,lr,0x10
800119e0:	ea 02 02 4b 	mul	r11,r5,r2
800119e4:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800119e8:	16 39       	cp.w	r9,r11
800119ea:	c0 72       	brcc	800119f8 <__avr32_umod64+0xe4>
800119ec:	18 09       	add	r9,r12
800119ee:	18 39       	cp.w	r9,r12
800119f0:	c0 43       	brcs	800119f8 <__avr32_umod64+0xe4>
800119f2:	16 39       	cp.w	r9,r11
800119f4:	f3 dc e3 09 	addcs	r9,r9,r12
800119f8:	f2 0b 01 0b 	sub	r11,r9,r11
800119fc:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80011a00:	f6 0a 0d 0a 	divu	r10,r11,r10
80011a04:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80011a08:	ea 0a 02 4a 	mul	r10,r5,r10
80011a0c:	14 3e       	cp.w	lr,r10
80011a0e:	c0 72       	brcc	80011a1c <__avr32_umod64+0x108>
80011a10:	18 0e       	add	lr,r12
80011a12:	18 3e       	cp.w	lr,r12
80011a14:	c0 43       	brcs	80011a1c <__avr32_umod64+0x108>
80011a16:	14 3e       	cp.w	lr,r10
80011a18:	fd dc e3 0e 	addcs	lr,lr,r12
80011a1c:	fc 0a 01 0a 	sub	r10,lr,r10
80011a20:	30 0b       	mov	r11,0
80011a22:	f4 08 0a 4a 	lsr	r10,r10,r8
80011a26:	c7 b8       	rjmp	80011b1c <__avr32_umod64+0x208>
80011a28:	16 39       	cp.w	r9,r11
80011a2a:	e0 8b 00 79 	brhi	80011b1c <__avr32_umod64+0x208>
80011a2e:	f2 09 12 00 	clz	r9,r9
80011a32:	c1 21       	brne	80011a56 <__avr32_umod64+0x142>
80011a34:	10 3a       	cp.w	r10,r8
80011a36:	5f 2b       	srhs	r11
80011a38:	0a 31       	cp.w	r1,r5
80011a3a:	5f ba       	srhi	r10
80011a3c:	f7 ea 10 0a 	or	r10,r11,r10
80011a40:	f2 0a 18 00 	cp.b	r10,r9
80011a44:	c0 60       	breq	80011a50 <__avr32_umod64+0x13c>
80011a46:	fc 08 01 0c 	sub	r12,lr,r8
80011a4a:	e2 05 01 46 	sbc	r6,r1,r5
80011a4e:	18 9e       	mov	lr,r12
80011a50:	0c 9b       	mov	r11,r6
80011a52:	1c 9a       	mov	r10,lr
80011a54:	c6 48       	rjmp	80011b1c <__avr32_umod64+0x208>
80011a56:	ea 09 09 4c 	lsl	r12,r5,r9
80011a5a:	f2 06 11 20 	rsub	r6,r9,32
80011a5e:	f6 09 09 4b 	lsl	r11,r11,r9
80011a62:	f0 09 09 42 	lsl	r2,r8,r9
80011a66:	ef 46 ff f4 	st.w	r7[-12],r6
80011a6a:	f0 06 0a 48 	lsr	r8,r8,r6
80011a6e:	18 48       	or	r8,r12
80011a70:	e2 06 0a 4c 	lsr	r12,r1,r6
80011a74:	f4 09 09 43 	lsl	r3,r10,r9
80011a78:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80011a7c:	f4 06 0a 4a 	lsr	r10,r10,r6
80011a80:	16 4a       	or	r10,r11
80011a82:	f0 0b 16 10 	lsr	r11,r8,0x10
80011a86:	f8 0b 0d 04 	divu	r4,r12,r11
80011a8a:	f4 0c 16 10 	lsr	r12,r10,0x10
80011a8e:	08 91       	mov	r1,r4
80011a90:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80011a94:	e8 0e 02 46 	mul	r6,r4,lr
80011a98:	0c 3c       	cp.w	r12,r6
80011a9a:	c0 a2       	brcc	80011aae <__avr32_umod64+0x19a>
80011a9c:	20 11       	sub	r1,1
80011a9e:	10 0c       	add	r12,r8
80011aa0:	10 3c       	cp.w	r12,r8
80011aa2:	c0 63       	brcs	80011aae <__avr32_umod64+0x19a>
80011aa4:	0c 3c       	cp.w	r12,r6
80011aa6:	f7 b1 03 01 	sublo	r1,1
80011aaa:	f9 d8 e3 0c 	addcs	r12,r12,r8
80011aae:	0c 1c       	sub	r12,r6
80011ab0:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80011ab4:	f8 0b 0d 04 	divu	r4,r12,r11
80011ab8:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80011abc:	08 96       	mov	r6,r4
80011abe:	e8 0e 02 4e 	mul	lr,r4,lr
80011ac2:	1c 3b       	cp.w	r11,lr
80011ac4:	c0 a2       	brcc	80011ad8 <__avr32_umod64+0x1c4>
80011ac6:	20 16       	sub	r6,1
80011ac8:	10 0b       	add	r11,r8
80011aca:	10 3b       	cp.w	r11,r8
80011acc:	c0 63       	brcs	80011ad8 <__avr32_umod64+0x1c4>
80011ace:	1c 3b       	cp.w	r11,lr
80011ad0:	f7 b6 03 01 	sublo	r6,1
80011ad4:	f7 d8 e3 0b 	addcs	r11,r11,r8
80011ad8:	ed e1 11 01 	or	r1,r6,r1<<0x10
80011adc:	1c 1b       	sub	r11,lr
80011ade:	e2 02 06 40 	mulu.d	r0,r1,r2
80011ae2:	00 9e       	mov	lr,r0
80011ae4:	02 9c       	mov	r12,r1
80011ae6:	16 3c       	cp.w	r12,r11
80011ae8:	e0 8b 00 08 	brhi	80011af8 <__avr32_umod64+0x1e4>
80011aec:	5f 06       	sreq	r6
80011aee:	06 30       	cp.w	r0,r3
80011af0:	5f ba       	srhi	r10
80011af2:	ed ea 00 0a 	and	r10,r6,r10
80011af6:	c0 60       	breq	80011b02 <__avr32_umod64+0x1ee>
80011af8:	fc 02 01 04 	sub	r4,lr,r2
80011afc:	f8 08 01 4c 	sbc	r12,r12,r8
80011b00:	08 9e       	mov	lr,r4
80011b02:	e6 0e 01 0a 	sub	r10,r3,lr
80011b06:	f6 0c 01 4c 	sbc	r12,r11,r12
80011b0a:	ee f1 ff f4 	ld.w	r1,r7[-12]
80011b0e:	f8 09 0a 4b 	lsr	r11,r12,r9
80011b12:	f4 09 0a 4a 	lsr	r10,r10,r9
80011b16:	f8 01 09 4c 	lsl	r12,r12,r1
80011b1a:	18 4a       	or	r10,r12
80011b1c:	2f dd       	sub	sp,-12
80011b1e:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80011c00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80011c00:	c0 08       	rjmp	80011c00 <_evba>
	...

80011c04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80011c04:	c0 08       	rjmp	80011c04 <_handle_TLB_Multiple_Hit>
	...

80011c08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80011c08:	c0 08       	rjmp	80011c08 <_handle_Bus_Error_Data_Fetch>
	...

80011c0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80011c0c:	c0 08       	rjmp	80011c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80011c10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80011c10:	c0 08       	rjmp	80011c10 <_handle_NMI>
	...

80011c14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80011c14:	c0 08       	rjmp	80011c14 <_handle_Instruction_Address>
	...

80011c18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80011c18:	c0 08       	rjmp	80011c18 <_handle_ITLB_Protection>
	...

80011c1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80011c1c:	c0 08       	rjmp	80011c1c <_handle_Breakpoint>
	...

80011c20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80011c20:	c0 08       	rjmp	80011c20 <_handle_Illegal_Opcode>
	...

80011c24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80011c24:	c0 08       	rjmp	80011c24 <_handle_Unimplemented_Instruction>
	...

80011c28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80011c28:	c0 08       	rjmp	80011c28 <_handle_Privilege_Violation>
	...

80011c2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80011c2c:	c0 08       	rjmp	80011c2c <_handle_Floating_Point>
	...

80011c30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80011c30:	c0 08       	rjmp	80011c30 <_handle_Coprocessor_Absent>
	...

80011c34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80011c34:	c0 08       	rjmp	80011c34 <_handle_Data_Address_Read>
	...

80011c38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80011c38:	c0 08       	rjmp	80011c38 <_handle_Data_Address_Write>
	...

80011c3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80011c3c:	c0 08       	rjmp	80011c3c <_handle_DTLB_Protection_Read>
	...

80011c40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80011c40:	c0 08       	rjmp	80011c40 <_handle_DTLB_Protection_Write>
	...

80011c44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80011c44:	c0 08       	rjmp	80011c44 <_handle_DTLB_Modified>
	...

80011c50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80011c50:	c0 08       	rjmp	80011c50 <_handle_ITLB_Miss>
	...

80011c60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80011c60:	c0 08       	rjmp	80011c60 <_handle_DTLB_Miss_Read>
	...

80011c70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80011c70:	c0 08       	rjmp	80011c70 <_handle_DTLB_Miss_Write>
	...

80011d00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80011d00:	c0 08       	rjmp	80011d00 <_handle_Supervisor_Call>
	...

80011d04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80011d04:	30 0c       	mov	r12,0
80011d06:	f0 1f 00 0e 	mcall	80011d3c <_int3+0xe>
80011d0a:	58 0c       	cp.w	r12,0
80011d0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80011d10:	d6 03       	rete

80011d12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80011d12:	30 1c       	mov	r12,1
80011d14:	f0 1f 00 0a 	mcall	80011d3c <_int3+0xe>
80011d18:	58 0c       	cp.w	r12,0
80011d1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80011d1e:	d6 03       	rete

80011d20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80011d20:	30 2c       	mov	r12,2
80011d22:	f0 1f 00 07 	mcall	80011d3c <_int3+0xe>
80011d26:	58 0c       	cp.w	r12,0
80011d28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80011d2c:	d6 03       	rete

80011d2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80011d2e:	30 3c       	mov	r12,3
80011d30:	f0 1f 00 03 	mcall	80011d3c <_int3+0xe>
80011d34:	58 0c       	cp.w	r12,0
80011d36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80011d3a:	d6 03       	rete
80011d3c:	80 00       	ld.sh	r0,r0[0x0]
80011d3e:	4b b8       	lddpc	r8,80011e28 <C.35.14269+0x8>
	...
