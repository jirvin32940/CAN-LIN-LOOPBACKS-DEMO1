
electroclave.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002010  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007fe4  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000a000  8000a000  0000a400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000250  8000a200  8000a200  0000a600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000000a9  00000008  8000a450  0000ac08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000007  000000b1  8000a4f9  0000acb1  2**0
                  ALLOC
  8 .bss          00000aa8  000000b8  000000b8  00000000  2**2
                  ALLOC
  9 .heap         0000e4a0  00000b60  00000b60  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000acb1  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000ad8  00000000  00000000  0000ace8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001ec2  00000000  00000000  0000b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000179bb  00000000  00000000  0000d682  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001c29  00000000  00000000  0002503d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000865e  00000000  00000000  00026c66  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000021a8  00000000  00000000  0002f2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005094  00000000  00000000  0003146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00003813  00000000  00000000  00036500  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00eea61e  00000000  00000000  00039d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .flash_nvram0 000003c0  8007f000  8000a4f9  0000b000  2**0
                  ALLOC
 22 .flash_nvram1 000003c0  8007f800  8007f3c0  0000b000  2**0
                  ALLOC
 23 .debug_ranges 00000a80  00000000  00000000  00f24338  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	57 84       	stdsp	sp[0x1e0],r4

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	48 1f       	lddpc	pc,8000200c <program_start+0x4>
8000200a:	00 00       	add	r0,r0
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	57 84       	stdsp	sp[0x1e0],r4

Disassembly of section .text:

80002010 <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
80002010:	eb cd 40 80 	pushm	r7,lr
80002014:	1a 97       	mov	r7,sp
80002016:	20 1d       	sub	sp,4
80002018:	18 98       	mov	r8,r12
8000201a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (idx)
8000201e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002022:	58 28       	cp.w	r8,2
80002024:	c1 10       	breq	80002046 <io_pin+0x36>
80002026:	e0 89 00 07 	brgt	80002034 <io_pin+0x24>
8000202a:	58 08       	cp.w	r8,0
8000202c:	c0 90       	breq	8000203e <io_pin+0x2e>
8000202e:	58 18       	cp.w	r8,1
80002030:	c0 90       	breq	80002042 <io_pin+0x32>
80002032:	c1 08       	rjmp	80002052 <io_pin+0x42>
80002034:	58 38       	cp.w	r8,3
80002036:	c0 a0       	breq	8000204a <io_pin+0x3a>
80002038:	58 48       	cp.w	r8,4
8000203a:	c0 a0       	breq	8000204e <io_pin+0x3e>
8000203c:	c0 b8       	rjmp	80002052 <io_pin+0x42>
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
8000203e:	33 38       	mov	r8,51
80002040:	c0 a8       	rjmp	80002054 <io_pin+0x44>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
80002042:	33 48       	mov	r8,52
80002044:	c0 88       	rjmp	80002054 <io_pin+0x44>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
80002046:	33 58       	mov	r8,53
80002048:	c0 68       	rjmp	80002054 <io_pin+0x44>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
8000204a:	33 68       	mov	r8,54
8000204c:	c0 48       	rjmp	80002054 <io_pin+0x44>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
8000204e:	33 78       	mov	r8,55
80002050:	c0 28       	rjmp	80002054 <io_pin+0x44>
			break;
		default: 
			return 0; //TODO: return a better error code here
80002052:	30 08       	mov	r8,0
			break;
	}
}
80002054:	10 9c       	mov	r12,r8
80002056:	2f fd       	sub	sp,-4
80002058:	e3 cd 80 80 	ldm	sp++,r7,pc

8000205c <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
8000205c:	eb cd 40 80 	pushm	r7,lr
80002060:	1a 97       	mov	r7,sp
80002062:	20 3d       	sub	sp,12
80002064:	18 98       	mov	r8,r12
80002066:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
8000206a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000206e:	10 9c       	mov	r12,r8
80002070:	f0 1f 00 0c 	mcall	800020a0 <drive_DQ_low+0x44>
80002074:	18 98       	mov	r8,r12
80002076:	ef 68 ff fb 	st.b	r7[-5],r8
	
	ioFlags = (GPIO_DIR_OUTPUT); //14may15 experiment
8000207a:	30 18       	mov	r8,1
8000207c:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ioPin, ioFlags); //14may15 experiment
80002080:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002084:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002088:	12 9b       	mov	r11,r9
8000208a:	10 9c       	mov	r12,r8
8000208c:	f0 1f 00 06 	mcall	800020a4 <drive_DQ_low+0x48>

	gpio_set_pin_low(ioPin);
80002090:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002094:	10 9c       	mov	r12,r8
80002096:	f0 1f 00 05 	mcall	800020a8 <drive_DQ_low+0x4c>

}
8000209a:	2f dd       	sub	sp,-12
8000209c:	e3 cd 80 80 	ldm	sp++,r7,pc
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	20 10       	sub	r0,1
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	45 04       	lddsp	r4,sp[0x140]
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	48 18       	lddpc	r8,800020ac <release_the_bus>

800020ac <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
800020ac:	eb cd 40 80 	pushm	r7,lr
800020b0:	1a 97       	mov	r7,sp
800020b2:	20 3d       	sub	sp,12
800020b4:	18 98       	mov	r8,r12
800020b6:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char ioPin;
	int32_t ioFlags;
	
	ioPin = io_pin(idx);
800020ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800020be:	10 9c       	mov	r12,r8
800020c0:	f0 1f 00 0a 	mcall	800020e8 <release_the_bus+0x3c>
800020c4:	18 98       	mov	r8,r12
800020c6:	ef 68 ff fb 	st.b	r7[-5],r8
	
//14may15 experiment	gpio_set_pin_high(ioPin);
	
	ioFlags = (GPIO_DIR_INPUT); //14may15 experiment
800020ca:	30 08       	mov	r8,0
800020cc:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ioPin, ioFlags); //14may15 experiment
800020d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020d4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800020d8:	12 9b       	mov	r11,r9
800020da:	10 9c       	mov	r12,r8
800020dc:	f0 1f 00 04 	mcall	800020ec <release_the_bus+0x40>

}
800020e0:	2f dd       	sub	sp,-12
800020e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800020e6:	00 00       	add	r0,r0
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	20 10       	sub	r0,1
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	45 04       	lddsp	r4,sp[0x140]

800020f0 <gpio_input>:

void gpio_input(unsigned char idx) //14may15 experiment
{
800020f0:	eb cd 40 80 	pushm	r7,lr
800020f4:	1a 97       	mov	r7,sp
800020f6:	20 3d       	sub	sp,12
800020f8:	18 98       	mov	r8,r12
800020fa:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t ioFlags;
	unsigned char ioPin;
		
	ioPin = io_pin(idx);
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 9c       	mov	r12,r8
80002104:	f0 1f 00 09 	mcall	80002128 <gpio_input+0x38>
80002108:	18 98       	mov	r8,r12
8000210a:	ef 68 ff ff 	st.b	r7[-1],r8
		
	ioFlags = (GPIO_DIR_INPUT);
8000210e:	30 08       	mov	r8,0
80002110:	ef 48 ff f8 	st.w	r7[-8],r8
	gpio_configure_pin(ioPin, ioFlags);
80002114:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002118:	ee fb ff f8 	ld.w	r11,r7[-8]
8000211c:	10 9c       	mov	r12,r8
8000211e:	f0 1f 00 04 	mcall	8000212c <gpio_input+0x3c>

}
80002122:	2f dd       	sub	sp,-12
80002124:	e3 cd 80 80 	ldm	sp++,r7,pc
80002128:	80 00       	ld.sh	r0,r0[0x0]
8000212a:	20 10       	sub	r0,1
8000212c:	80 00       	ld.sh	r0,r0[0x0]
8000212e:	45 04       	lddsp	r4,sp[0x140]

80002130 <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
80002130:	eb cd 40 80 	pushm	r7,lr
80002134:	1a 97       	mov	r7,sp
80002136:	20 2d       	sub	sp,8
80002138:	18 98       	mov	r8,r12
8000213a:	ef 68 ff f8 	st.b	r7[-8],r8
//14may15 experiment		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
8000213e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002142:	10 9c       	mov	r12,r8
80002144:	f0 1f 00 0a 	mcall	8000216c <sample_line+0x3c>
80002148:	18 98       	mov	r8,r12
8000214a:	ef 68 ff ff 	st.b	r7[-1],r8
		
//14may15 experiment		ioFlags = (GPIO_DIR_INPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		retVal = gpio_get_pin_value(ioPin);
8000214e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002152:	10 9c       	mov	r12,r8
80002154:	f0 1f 00 07 	mcall	80002170 <sample_line+0x40>
80002158:	18 98       	mov	r8,r12
8000215a:	ef 68 ff fe 	st.b	r7[-2],r8

//14may15 experiment		ioFlags = (GPIO_DIR_OUTPUT);
//14may15 experiment		gpio_configure_pin(ioPin, ioFlags);

		return retVal;
8000215e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
80002162:	10 9c       	mov	r12,r8
80002164:	2f ed       	sub	sp,-8
80002166:	e3 cd 80 80 	ldm	sp++,r7,pc
8000216a:	00 00       	add	r0,r0
8000216c:	80 00       	ld.sh	r0,r0[0x0]
8000216e:	20 10       	sub	r0,1
80002170:	80 00       	ld.sh	r0,r0[0x0]
80002172:	47 a2       	lddsp	r2,sp[0x1e8]

80002174 <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
80002174:	eb cd 40 80 	pushm	r7,lr
80002178:	1a 97       	mov	r7,sp
8000217a:	20 1d       	sub	sp,4
8000217c:	ef 4c ff fc 	st.w	r7[-4],r12
	// Adjust tick values depending on speed
	if (standard)
80002180:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002184:	58 08       	cp.w	r8,0
80002186:	c2 20       	breq	800021ca <SetSpeed+0x56>
	{
		// Standard Speed
//14may15 we can't seem to control this tightly		A = 6; //us
		A = 1; //should be 6 14may15
80002188:	4a 18       	lddpc	r8,8000220c <SetSpeed+0x98>
8000218a:	30 19       	mov	r9,1
8000218c:	91 09       	st.w	r8[0x0],r9
		B = 64;
8000218e:	4a 18       	lddpc	r8,80002210 <SetSpeed+0x9c>
80002190:	34 09       	mov	r9,64
80002192:	91 09       	st.w	r8[0x0],r9
		C = 60;
80002194:	4a 08       	lddpc	r8,80002214 <SetSpeed+0xa0>
80002196:	33 c9       	mov	r9,60
80002198:	91 09       	st.w	r8[0x0],r9
//14may15 we can't seem to control this tightly		D = 10;
//14may15 we can't seem to control this tightly		E = 9;
		D = 1; //should be 10 14may15
8000219a:	4a 08       	lddpc	r8,80002218 <SetSpeed+0xa4>
8000219c:	30 19       	mov	r9,1
8000219e:	91 09       	st.w	r8[0x0],r9
		E = 3; //should be 9 14may15
800021a0:	49 f8       	lddpc	r8,8000221c <SetSpeed+0xa8>
800021a2:	30 39       	mov	r9,3
800021a4:	91 09       	st.w	r8[0x0],r9
		F = 55;
800021a6:	49 f8       	lddpc	r8,80002220 <SetSpeed+0xac>
800021a8:	33 79       	mov	r9,55
800021aa:	91 09       	st.w	r8[0x0],r9
		G = 0;
800021ac:	49 e8       	lddpc	r8,80002224 <SetSpeed+0xb0>
800021ae:	30 09       	mov	r9,0
800021b0:	91 09       	st.w	r8[0x0],r9
		H = 480;
800021b2:	49 e8       	lddpc	r8,80002228 <SetSpeed+0xb4>
800021b4:	e0 69 01 e0 	mov	r9,480
800021b8:	91 09       	st.w	r8[0x0],r9
		I = 70;
800021ba:	49 d8       	lddpc	r8,8000222c <SetSpeed+0xb8>
800021bc:	34 69       	mov	r9,70
800021be:	91 09       	st.w	r8[0x0],r9
		J = 410;
800021c0:	49 c8       	lddpc	r8,80002230 <SetSpeed+0xbc>
800021c2:	e0 69 01 9a 	mov	r9,410
800021c6:	91 09       	st.w	r8[0x0],r9
800021c8:	c1 f8       	rjmp	80002206 <SetSpeed+0x92>
	}
	else
	{
		// Overdrive Speed
		A = 1.5;
800021ca:	49 18       	lddpc	r8,8000220c <SetSpeed+0x98>
800021cc:	30 19       	mov	r9,1
800021ce:	91 09       	st.w	r8[0x0],r9
		B = 7.5;
800021d0:	49 08       	lddpc	r8,80002210 <SetSpeed+0x9c>
800021d2:	30 79       	mov	r9,7
800021d4:	91 09       	st.w	r8[0x0],r9
		C = 7.5;
800021d6:	49 08       	lddpc	r8,80002214 <SetSpeed+0xa0>
800021d8:	30 79       	mov	r9,7
800021da:	91 09       	st.w	r8[0x0],r9
		D = 2.5;
800021dc:	48 f8       	lddpc	r8,80002218 <SetSpeed+0xa4>
800021de:	30 29       	mov	r9,2
800021e0:	91 09       	st.w	r8[0x0],r9
		E = 0.75;
800021e2:	48 f8       	lddpc	r8,8000221c <SetSpeed+0xa8>
800021e4:	30 09       	mov	r9,0
800021e6:	91 09       	st.w	r8[0x0],r9
		F = 7;
800021e8:	48 e8       	lddpc	r8,80002220 <SetSpeed+0xac>
800021ea:	30 79       	mov	r9,7
800021ec:	91 09       	st.w	r8[0x0],r9
		G = 2.5;
800021ee:	48 e8       	lddpc	r8,80002224 <SetSpeed+0xb0>
800021f0:	30 29       	mov	r9,2
800021f2:	91 09       	st.w	r8[0x0],r9
		H = 70;
800021f4:	48 d8       	lddpc	r8,80002228 <SetSpeed+0xb4>
800021f6:	34 69       	mov	r9,70
800021f8:	91 09       	st.w	r8[0x0],r9
		I = 8.5;
800021fa:	48 d8       	lddpc	r8,8000222c <SetSpeed+0xb8>
800021fc:	30 89       	mov	r9,8
800021fe:	91 09       	st.w	r8[0x0],r9
		J = 40;
80002200:	48 c8       	lddpc	r8,80002230 <SetSpeed+0xbc>
80002202:	32 89       	mov	r9,40
80002204:	91 09       	st.w	r8[0x0],r9
	}
}
80002206:	2f fd       	sub	sp,-4
80002208:	e3 cd 80 80 	ldm	sp++,r7,pc
8000220c:	00 00       	add	r0,r0
8000220e:	02 b8       	st.h	r1++,r8
80002210:	00 00       	add	r0,r0
80002212:	02 bc       	st.h	r1++,r12
80002214:	00 00       	add	r0,r0
80002216:	02 c4       	st.b	r1++,r4
80002218:	00 00       	add	r0,r0
8000221a:	02 b4       	st.h	r1++,r4
8000221c:	00 00       	add	r0,r0
8000221e:	02 d0       	st.w	--r1,r0
80002220:	00 00       	add	r0,r0
80002222:	02 d8       	st.w	--r1,r8
80002224:	00 00       	add	r0,r0
80002226:	02 c8       	st.b	r1++,r8
80002228:	00 00       	add	r0,r0
8000222a:	02 cc       	st.b	r1++,r12
8000222c:	00 00       	add	r0,r0
8000222e:	02 d4       	st.w	--r1,r4
80002230:	00 00       	add	r0,r0
80002232:	02 c0       	st.b	r1++,r0

80002234 <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
80002234:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002238:	1a 97       	mov	r7,sp
8000223a:	fa cd 00 e0 	sub	sp,sp,224
8000223e:	18 98       	mov	r8,r12
80002240:	ef 68 ff 48 	st.b	r7[-184],r8
	int result;

	cpu_delay_us(A, 8000000);
80002244:	fe f8 05 9c 	ld.w	r8,pc[1436]
80002248:	70 08       	ld.w	r8,r8[0x0]
8000224a:	ef 48 ff 84 	st.w	r7[-124],r8
8000224e:	e0 68 12 00 	mov	r8,4608
80002252:	ea 18 00 7a 	orh	r8,0x7a
80002256:	ef 48 ff 80 	st.w	r7[-128],r8
8000225a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000225e:	ef 48 ff 8c 	st.w	r7[-116],r8
80002262:	ee f8 ff 80 	ld.w	r8,r7[-128]
80002266:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000226a:	ee f2 ff 8c 	ld.w	r2,r7[-116]
8000226e:	30 03       	mov	r3,0
80002270:	ee fa ff 88 	ld.w	r10,r7[-120]
80002274:	30 0b       	mov	r11,0
80002276:	e6 0a 02 49 	mul	r9,r3,r10
8000227a:	f6 02 02 48 	mul	r8,r11,r2
8000227e:	10 09       	add	r9,r8
80002280:	e4 0a 06 4a 	mulu.d	r10,r2,r10
80002284:	16 09       	add	r9,r11
80002286:	12 9b       	mov	r11,r9
80002288:	ee 78 42 3f 	mov	r8,999999
8000228c:	30 09       	mov	r9,0
8000228e:	10 0a       	add	r10,r8
80002290:	f6 09 00 4b 	adc	r11,r11,r9
80002294:	ee 78 42 40 	mov	r8,1000000
80002298:	30 09       	mov	r9,0
8000229a:	f0 1f 01 53 	mcall	800027e4 <OWTouchReset+0x5b0>
8000229e:	14 98       	mov	r8,r10
800022a0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800022a2:	ef 48 ff 94 	st.w	r7[-108],r8
800022a6:	ee c8 00 b4 	sub	r8,r7,180
800022aa:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022ae:	e1 b8 00 42 	mfsr	r8,0x108
800022b2:	10 99       	mov	r9,r8
800022b4:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022b8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022ba:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022be:	70 09       	ld.w	r9,r8[0x0]
800022c0:	ee f8 ff 94 	ld.w	r8,r7[-108]
800022c4:	10 09       	add	r9,r8
800022c6:	ee f8 ff 90 	ld.w	r8,r7[-112]
800022ca:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800022cc:	ee f9 ff 90 	ld.w	r9,r7[-112]
800022d0:	30 08       	mov	r8,0
800022d2:	f3 68 00 08 	st.b	r9[8],r8
800022d6:	ee c8 00 b4 	sub	r8,r7,180
800022da:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022de:	e1 b8 00 42 	mfsr	r8,0x108
800022e2:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800022e6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022ea:	f1 39 00 08 	ld.ub	r9,r8[8]
800022ee:	30 28       	mov	r8,2
800022f0:	f0 09 18 00 	cp.b	r9,r8
800022f4:	c0 31       	brne	800022fa <OWTouchReset+0xc6>
    return false;
800022f6:	30 08       	mov	r8,0
800022f8:	c4 38       	rjmp	8000237e <OWTouchReset+0x14a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800022fa:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022fe:	f1 39 00 08 	ld.ub	r9,r8[8]
80002302:	30 18       	mov	r8,1
80002304:	f0 09 18 00 	cp.b	r9,r8
80002308:	c0 31       	brne	8000230e <OWTouchReset+0xda>
    return true;
8000230a:	30 18       	mov	r8,1
8000230c:	c3 98       	rjmp	8000237e <OWTouchReset+0x14a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000230e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002312:	70 09       	ld.w	r9,r8[0x0]
80002314:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002318:	70 18       	ld.w	r8,r8[0x4]
8000231a:	10 39       	cp.w	r9,r8
8000231c:	e0 88 00 1a 	brls	80002350 <OWTouchReset+0x11c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002320:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002324:	70 08       	ld.w	r8,r8[0x0]
80002326:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000232a:	10 39       	cp.w	r9,r8
8000232c:	c1 02       	brcc	8000234c <OWTouchReset+0x118>
8000232e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002332:	70 18       	ld.w	r8,r8[0x4]
80002334:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002338:	10 39       	cp.w	r9,r8
8000233a:	e0 88 00 09 	brls	8000234c <OWTouchReset+0x118>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000233e:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002342:	30 18       	mov	r8,1
80002344:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002348:	30 18       	mov	r8,1
8000234a:	c1 a8       	rjmp	8000237e <OWTouchReset+0x14a>
    }
    return false;
8000234c:	30 08       	mov	r8,0
8000234e:	c1 88       	rjmp	8000237e <OWTouchReset+0x14a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002350:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002354:	70 08       	ld.w	r8,r8[0x0]
80002356:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000235a:	10 39       	cp.w	r9,r8
8000235c:	c0 93       	brcs	8000236e <OWTouchReset+0x13a>
8000235e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002362:	70 18       	ld.w	r8,r8[0x4]
80002364:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002368:	10 39       	cp.w	r9,r8
8000236a:	e0 88 00 09 	brls	8000237c <OWTouchReset+0x148>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000236e:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002372:	30 18       	mov	r8,1
80002374:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002378:	30 18       	mov	r8,1
8000237a:	c0 28       	rjmp	8000237e <OWTouchReset+0x14a>
    }
    return false;
8000237c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000237e:	58 08       	cp.w	r8,0
80002380:	ca b0       	breq	800022d6 <OWTouchReset+0xa2>
	drive_DQ_low(idx);
80002382:	ef 38 ff 48 	ld.ub	r8,r7[-184]
80002386:	10 9c       	mov	r12,r8
80002388:	f0 1f 01 18 	mcall	800027e8 <OWTouchReset+0x5b4>
	cpu_delay_us(H, 8000000);	//tRSTL (reset low) 480-640us
8000238c:	fe f8 04 60 	ld.w	r8,pc[1120]
80002390:	70 08       	ld.w	r8,r8[0x0]
80002392:	ef 48 ff a4 	st.w	r7[-92],r8
80002396:	e0 68 12 00 	mov	r8,4608
8000239a:	ea 18 00 7a 	orh	r8,0x7a
8000239e:	ef 48 ff a0 	st.w	r7[-96],r8
800023a2:	ee f8 ff a4 	ld.w	r8,r7[-92]
800023a6:	ef 48 ff ac 	st.w	r7[-84],r8
800023aa:	ee f8 ff a0 	ld.w	r8,r7[-96]
800023ae:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800023b2:	ee fc ff ac 	ld.w	r12,r7[-84]
800023b6:	ef 4c ff 2c 	st.w	r7[-212],r12
800023ba:	30 0b       	mov	r11,0
800023bc:	ef 4b ff 28 	st.w	r7[-216],r11
800023c0:	ee f9 ff a8 	ld.w	r9,r7[-88]
800023c4:	ef 49 ff 24 	st.w	r7[-220],r9
800023c8:	30 08       	mov	r8,0
800023ca:	ef 48 ff 20 	st.w	r7[-224],r8
800023ce:	ee fa ff 28 	ld.w	r10,r7[-216]
800023d2:	ee fc ff 24 	ld.w	r12,r7[-220]
800023d6:	b9 3a       	mul	r10,r12
800023d8:	ee f8 ff 20 	ld.w	r8,r7[-224]
800023dc:	ee fb ff 2c 	ld.w	r11,r7[-212]
800023e0:	b7 38       	mul	r8,r11
800023e2:	10 0a       	add	r10,r8
800023e4:	ee fc ff 2c 	ld.w	r12,r7[-212]
800023e8:	ee fb ff 24 	ld.w	r11,r7[-220]
800023ec:	f8 0b 06 48 	mulu.d	r8,r12,r11
800023f0:	12 0a       	add	r10,r9
800023f2:	14 99       	mov	r9,r10
800023f4:	ee 7a 42 3f 	mov	r10,999999
800023f8:	30 0b       	mov	r11,0
800023fa:	f0 0a 00 0a 	add	r10,r8,r10
800023fe:	f2 0b 00 4b 	adc	r11,r9,r11
80002402:	ee 78 42 40 	mov	r8,1000000
80002406:	30 09       	mov	r9,0
80002408:	f0 1f 00 f7 	mcall	800027e4 <OWTouchReset+0x5b0>
8000240c:	14 98       	mov	r8,r10
8000240e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002410:	ef 48 ff b4 	st.w	r7[-76],r8
80002414:	ee c8 00 a8 	sub	r8,r7,168
80002418:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000241c:	e1 b8 00 42 	mfsr	r8,0x108
80002420:	10 99       	mov	r9,r8
80002422:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002426:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002428:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000242c:	70 09       	ld.w	r9,r8[0x0]
8000242e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002432:	10 09       	add	r9,r8
80002434:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002438:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000243a:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000243e:	30 08       	mov	r8,0
80002440:	f3 68 00 08 	st.b	r9[8],r8
80002444:	ee c8 00 a8 	sub	r8,r7,168
80002448:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000244c:	e1 b8 00 42 	mfsr	r8,0x108
80002450:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002454:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002458:	f1 39 00 08 	ld.ub	r9,r8[8]
8000245c:	30 28       	mov	r8,2
8000245e:	f0 09 18 00 	cp.b	r9,r8
80002462:	c0 31       	brne	80002468 <OWTouchReset+0x234>
    return false;
80002464:	30 08       	mov	r8,0
80002466:	c4 38       	rjmp	800024ec <OWTouchReset+0x2b8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002468:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000246c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002470:	30 18       	mov	r8,1
80002472:	f0 09 18 00 	cp.b	r9,r8
80002476:	c0 31       	brne	8000247c <OWTouchReset+0x248>
    return true;
80002478:	30 18       	mov	r8,1
8000247a:	c3 98       	rjmp	800024ec <OWTouchReset+0x2b8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000247c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002480:	70 09       	ld.w	r9,r8[0x0]
80002482:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002486:	70 18       	ld.w	r8,r8[0x4]
80002488:	10 39       	cp.w	r9,r8
8000248a:	e0 88 00 1a 	brls	800024be <OWTouchReset+0x28a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000248e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002492:	70 08       	ld.w	r8,r8[0x0]
80002494:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002498:	10 39       	cp.w	r9,r8
8000249a:	c1 02       	brcc	800024ba <OWTouchReset+0x286>
8000249c:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024a0:	70 18       	ld.w	r8,r8[0x4]
800024a2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024a6:	10 39       	cp.w	r9,r8
800024a8:	e0 88 00 09 	brls	800024ba <OWTouchReset+0x286>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024ac:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024b0:	30 18       	mov	r8,1
800024b2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024b6:	30 18       	mov	r8,1
800024b8:	c1 a8       	rjmp	800024ec <OWTouchReset+0x2b8>
    }
    return false;
800024ba:	30 08       	mov	r8,0
800024bc:	c1 88       	rjmp	800024ec <OWTouchReset+0x2b8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800024be:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024c2:	70 08       	ld.w	r8,r8[0x0]
800024c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024c8:	10 39       	cp.w	r9,r8
800024ca:	c0 93       	brcs	800024dc <OWTouchReset+0x2a8>
800024cc:	ee f8 ff b8 	ld.w	r8,r7[-72]
800024d0:	70 18       	ld.w	r8,r8[0x4]
800024d2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800024d6:	10 39       	cp.w	r9,r8
800024d8:	e0 88 00 09 	brls	800024ea <OWTouchReset+0x2b6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024dc:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024e0:	30 18       	mov	r8,1
800024e2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024e6:	30 18       	mov	r8,1
800024e8:	c0 28       	rjmp	800024ec <OWTouchReset+0x2b8>
    }
    return false;
800024ea:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800024ec:	58 08       	cp.w	r8,0
800024ee:	ca b0       	breq	80002444 <OWTouchReset+0x210>
	release_the_bus(idx);
800024f0:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024f4:	10 9c       	mov	r12,r8
800024f6:	f0 1f 00 bf 	mcall	800027f0 <OWTouchReset+0x5bc>
	
	gpio_input(idx); //14may15 experiment
800024fa:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024fe:	10 9c       	mov	r12,r8
80002500:	f0 1f 00 bd 	mcall	800027f4 <OWTouchReset+0x5c0>

	
	cpu_delay_us(I, 8000000);	//tMSP (presence detect sample) 60-75us
80002504:	fe f8 02 f4 	ld.w	r8,pc[756]
80002508:	70 08       	ld.w	r8,r8[0x0]
8000250a:	ef 48 ff c4 	st.w	r7[-60],r8
8000250e:	e0 68 12 00 	mov	r8,4608
80002512:	ea 18 00 7a 	orh	r8,0x7a
80002516:	ef 48 ff c0 	st.w	r7[-64],r8
8000251a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000251e:	ef 48 ff cc 	st.w	r7[-52],r8
80002522:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002526:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000252a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000252e:	ef 49 ff 3c 	st.w	r7[-196],r9
80002532:	30 08       	mov	r8,0
80002534:	ef 48 ff 38 	st.w	r7[-200],r8
80002538:	ee fc ff c8 	ld.w	r12,r7[-56]
8000253c:	ef 4c ff 34 	st.w	r7[-204],r12
80002540:	30 0b       	mov	r11,0
80002542:	ef 4b ff 30 	st.w	r7[-208],r11
80002546:	ee fa ff 38 	ld.w	r10,r7[-200]
8000254a:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000254e:	b3 3a       	mul	r10,r9
80002550:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002554:	ee fc ff 3c 	ld.w	r12,r7[-196]
80002558:	b9 38       	mul	r8,r12
8000255a:	10 0a       	add	r10,r8
8000255c:	ee fb ff 3c 	ld.w	r11,r7[-196]
80002560:	ee fc ff 34 	ld.w	r12,r7[-204]
80002564:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002568:	12 0a       	add	r10,r9
8000256a:	14 99       	mov	r9,r10
8000256c:	ee 7a 42 3f 	mov	r10,999999
80002570:	30 0b       	mov	r11,0
80002572:	f0 0a 00 0a 	add	r10,r8,r10
80002576:	f2 0b 00 4b 	adc	r11,r9,r11
8000257a:	ee 78 42 40 	mov	r8,1000000
8000257e:	30 09       	mov	r9,0
80002580:	f0 1f 00 99 	mcall	800027e4 <OWTouchReset+0x5b0>
80002584:	14 98       	mov	r8,r10
80002586:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002588:	ef 48 ff d4 	st.w	r7[-44],r8
8000258c:	ee c8 00 9c 	sub	r8,r7,156
80002590:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002594:	e1 b8 00 42 	mfsr	r8,0x108
80002598:	10 99       	mov	r9,r8
8000259a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000259e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025a0:	ee f8 ff d0 	ld.w	r8,r7[-48]
800025a4:	70 09       	ld.w	r9,r8[0x0]
800025a6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800025aa:	10 09       	add	r9,r8
800025ac:	ee f8 ff d0 	ld.w	r8,r7[-48]
800025b0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800025b2:	ee f9 ff d0 	ld.w	r9,r7[-48]
800025b6:	30 08       	mov	r8,0
800025b8:	f3 68 00 08 	st.b	r9[8],r8
800025bc:	ee c8 00 9c 	sub	r8,r7,156
800025c0:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025c4:	e1 b8 00 42 	mfsr	r8,0x108
800025c8:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800025cc:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025d0:	f1 39 00 08 	ld.ub	r9,r8[8]
800025d4:	30 28       	mov	r8,2
800025d6:	f0 09 18 00 	cp.b	r9,r8
800025da:	c0 31       	brne	800025e0 <OWTouchReset+0x3ac>
    return false;
800025dc:	30 08       	mov	r8,0
800025de:	c4 38       	rjmp	80002664 <OWTouchReset+0x430>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800025e0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025e4:	f1 39 00 08 	ld.ub	r9,r8[8]
800025e8:	30 18       	mov	r8,1
800025ea:	f0 09 18 00 	cp.b	r9,r8
800025ee:	c0 31       	brne	800025f4 <OWTouchReset+0x3c0>
    return true;
800025f0:	30 18       	mov	r8,1
800025f2:	c3 98       	rjmp	80002664 <OWTouchReset+0x430>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025f4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025f8:	70 09       	ld.w	r9,r8[0x0]
800025fa:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025fe:	70 18       	ld.w	r8,r8[0x4]
80002600:	10 39       	cp.w	r9,r8
80002602:	e0 88 00 1a 	brls	80002636 <OWTouchReset+0x402>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002606:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000260a:	70 08       	ld.w	r8,r8[0x0]
8000260c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002610:	10 39       	cp.w	r9,r8
80002612:	c1 02       	brcc	80002632 <OWTouchReset+0x3fe>
80002614:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002618:	70 18       	ld.w	r8,r8[0x4]
8000261a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000261e:	10 39       	cp.w	r9,r8
80002620:	e0 88 00 09 	brls	80002632 <OWTouchReset+0x3fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002624:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002628:	30 18       	mov	r8,1
8000262a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000262e:	30 18       	mov	r8,1
80002630:	c1 a8       	rjmp	80002664 <OWTouchReset+0x430>
    }
    return false;
80002632:	30 08       	mov	r8,0
80002634:	c1 88       	rjmp	80002664 <OWTouchReset+0x430>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002636:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000263a:	70 08       	ld.w	r8,r8[0x0]
8000263c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002640:	10 39       	cp.w	r9,r8
80002642:	c0 93       	brcs	80002654 <OWTouchReset+0x420>
80002644:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002648:	70 18       	ld.w	r8,r8[0x4]
8000264a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000264e:	10 39       	cp.w	r9,r8
80002650:	e0 88 00 09 	brls	80002662 <OWTouchReset+0x42e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002654:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002658:	30 18       	mov	r8,1
8000265a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000265e:	30 18       	mov	r8,1
80002660:	c0 28       	rjmp	80002664 <OWTouchReset+0x430>
    }
    return false;
80002662:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002664:	58 08       	cp.w	r8,0
80002666:	ca b0       	breq	800025bc <OWTouchReset+0x388>
	result = sample_line(idx);
80002668:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000266c:	10 9c       	mov	r12,r8
8000266e:	f0 1f 00 64 	mcall	800027fc <OWTouchReset+0x5c8>
80002672:	18 98       	mov	r8,r12
80002674:	ef 48 ff 7c 	st.w	r7[-132],r8
	
	gpio_input(idx); //14may15 experiement
80002678:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000267c:	10 9c       	mov	r12,r8
8000267e:	f0 1f 00 5e 	mcall	800027f4 <OWTouchReset+0x5c0>

	cpu_delay_us(J, 8000000); // Complete the reset sequence recovery 5-??us (no max?)
80002682:	4e 08       	lddpc	r8,80002800 <OWTouchReset+0x5cc>
80002684:	70 08       	ld.w	r8,r8[0x0]
80002686:	ef 48 ff e4 	st.w	r7[-28],r8
8000268a:	e0 68 12 00 	mov	r8,4608
8000268e:	ea 18 00 7a 	orh	r8,0x7a
80002692:	ef 48 ff e0 	st.w	r7[-32],r8
80002696:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000269a:	ef 48 ff ec 	st.w	r7[-20],r8
8000269e:	ee f8 ff e0 	ld.w	r8,r7[-32]
800026a2:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800026a6:	ee fb ff ec 	ld.w	r11,r7[-20]
800026aa:	ef 4b ff 44 	st.w	r7[-188],r11
800026ae:	30 09       	mov	r9,0
800026b0:	ef 49 ff 40 	st.w	r7[-192],r9
800026b4:	ee f0 ff e8 	ld.w	r0,r7[-24]
800026b8:	30 01       	mov	r1,0
800026ba:	ee fa ff 40 	ld.w	r10,r7[-192]
800026be:	a1 3a       	mul	r10,r0
800026c0:	ee fc ff 44 	ld.w	r12,r7[-188]
800026c4:	e2 0c 02 48 	mul	r8,r1,r12
800026c8:	10 0a       	add	r10,r8
800026ca:	ee fb ff 44 	ld.w	r11,r7[-188]
800026ce:	f6 00 06 48 	mulu.d	r8,r11,r0
800026d2:	12 0a       	add	r10,r9
800026d4:	14 99       	mov	r9,r10
800026d6:	ee 7a 42 3f 	mov	r10,999999
800026da:	30 0b       	mov	r11,0
800026dc:	f0 0a 00 0a 	add	r10,r8,r10
800026e0:	f2 0b 00 4b 	adc	r11,r9,r11
800026e4:	ee 78 42 40 	mov	r8,1000000
800026e8:	30 09       	mov	r9,0
800026ea:	f0 1f 00 3f 	mcall	800027e4 <OWTouchReset+0x5b0>
800026ee:	14 98       	mov	r8,r10
800026f0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800026f2:	ef 48 ff f4 	st.w	r7[-12],r8
800026f6:	ee c8 00 90 	sub	r8,r7,144
800026fa:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026fe:	e1 b8 00 42 	mfsr	r8,0x108
80002702:	10 99       	mov	r9,r8
80002704:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002708:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000270a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000270e:	70 09       	ld.w	r9,r8[0x0]
80002710:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002714:	10 09       	add	r9,r8
80002716:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000271a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000271c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002720:	30 08       	mov	r8,0
80002722:	f3 68 00 08 	st.b	r9[8],r8
80002726:	ee c8 00 90 	sub	r8,r7,144
8000272a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000272e:	e1 b8 00 42 	mfsr	r8,0x108
80002732:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002736:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000273a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000273e:	30 28       	mov	r8,2
80002740:	f0 09 18 00 	cp.b	r9,r8
80002744:	c0 31       	brne	8000274a <OWTouchReset+0x516>
    return false;
80002746:	30 08       	mov	r8,0
80002748:	c4 38       	rjmp	800027ce <OWTouchReset+0x59a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000274a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000274e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002752:	30 18       	mov	r8,1
80002754:	f0 09 18 00 	cp.b	r9,r8
80002758:	c0 31       	brne	8000275e <OWTouchReset+0x52a>
    return true;
8000275a:	30 18       	mov	r8,1
8000275c:	c3 98       	rjmp	800027ce <OWTouchReset+0x59a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000275e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002762:	70 09       	ld.w	r9,r8[0x0]
80002764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002768:	70 18       	ld.w	r8,r8[0x4]
8000276a:	10 39       	cp.w	r9,r8
8000276c:	e0 88 00 1a 	brls	800027a0 <OWTouchReset+0x56c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002774:	70 08       	ld.w	r8,r8[0x0]
80002776:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000277a:	10 39       	cp.w	r9,r8
8000277c:	c1 02       	brcc	8000279c <OWTouchReset+0x568>
8000277e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002782:	70 18       	ld.w	r8,r8[0x4]
80002784:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002788:	10 39       	cp.w	r9,r8
8000278a:	e0 88 00 09 	brls	8000279c <OWTouchReset+0x568>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000278e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002792:	30 18       	mov	r8,1
80002794:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002798:	30 18       	mov	r8,1
8000279a:	c1 a8       	rjmp	800027ce <OWTouchReset+0x59a>
    }
    return false;
8000279c:	30 08       	mov	r8,0
8000279e:	c1 88       	rjmp	800027ce <OWTouchReset+0x59a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800027a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027a4:	70 08       	ld.w	r8,r8[0x0]
800027a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027aa:	10 39       	cp.w	r9,r8
800027ac:	c0 93       	brcs	800027be <OWTouchReset+0x58a>
800027ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027b2:	70 18       	ld.w	r8,r8[0x4]
800027b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027b8:	10 39       	cp.w	r9,r8
800027ba:	e0 88 00 09 	brls	800027cc <OWTouchReset+0x598>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800027c2:	30 18       	mov	r8,1
800027c4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027c8:	30 18       	mov	r8,1
800027ca:	c0 28       	rjmp	800027ce <OWTouchReset+0x59a>
    }
    return false;
800027cc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800027ce:	58 08       	cp.w	r8,0
800027d0:	ca b0       	breq	80002726 <OWTouchReset+0x4f2>
	return result; // Return sample presence pulse result
800027d2:	ee f8 ff 7c 	ld.w	r8,r7[-132]
}
800027d6:	10 9c       	mov	r12,r8
800027d8:	2c 8d       	sub	sp,-224
800027da:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800027de:	00 00       	add	r0,r0
800027e0:	00 00       	add	r0,r0
800027e2:	02 b8       	st.h	r1++,r8
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	9c 1a       	ld.sh	r10,lr[0x2]
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	20 5c       	sub	r12,5
800027ec:	00 00       	add	r0,r0
800027ee:	02 cc       	st.b	r1++,r12
800027f0:	80 00       	ld.sh	r0,r0[0x0]
800027f2:	20 ac       	sub	r12,10
800027f4:	80 00       	ld.sh	r0,r0[0x0]
800027f6:	20 f0       	sub	r0,15
800027f8:	00 00       	add	r0,r0
800027fa:	02 d4       	st.w	--r1,r4
800027fc:	80 00       	ld.sh	r0,r0[0x0]
800027fe:	21 30       	sub	r0,19
80002800:	00 00       	add	r0,r0
80002802:	02 c0       	st.b	r1++,r0

80002804 <drive_DQ_low_and_release_the_bus>:


void drive_DQ_low_and_release_the_bus(unsigned char idx)
{
80002804:	eb cd 40 80 	pushm	r7,lr
80002808:	1a 97       	mov	r7,sp
8000280a:	20 4d       	sub	sp,16
8000280c:	18 98       	mov	r8,r12
8000280e:	ef 68 ff f0 	st.b	r7[-16],r8
	unsigned char ioPin;
	int32_t ioFlagsOutput, ioFlagsInput;
	
	ioPin = io_pin(idx);
80002812:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002816:	10 9c       	mov	r12,r8
80002818:	f0 1f 00 12 	mcall	80002860 <drive_DQ_low_and_release_the_bus+0x5c>
8000281c:	18 98       	mov	r8,r12
8000281e:	ef 68 ff f7 	st.b	r7[-9],r8
	
	ioFlagsInput = (GPIO_DIR_INPUT);
80002822:	30 08       	mov	r8,0
80002824:	ef 48 ff fc 	st.w	r7[-4],r8
	ioFlagsOutput = (GPIO_DIR_OUTPUT); //14may15 experiment
80002828:	30 18       	mov	r8,1
8000282a:	ef 48 ff f8 	st.w	r7[-8],r8

	gpio_configure_pin(ioPin, ioFlagsOutput); //14may15 experiment
8000282e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002832:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002836:	12 9b       	mov	r11,r9
80002838:	10 9c       	mov	r12,r8
8000283a:	f0 1f 00 0b 	mcall	80002864 <drive_DQ_low_and_release_the_bus+0x60>

	gpio_set_pin_low(ioPin);
8000283e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002842:	10 9c       	mov	r12,r8
80002844:	f0 1f 00 09 	mcall	80002868 <drive_DQ_low_and_release_the_bus+0x64>

	gpio_configure_pin(ioPin, ioFlagsInput); //14may15 experiment
80002848:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000284c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002850:	12 9b       	mov	r11,r9
80002852:	10 9c       	mov	r12,r8
80002854:	f0 1f 00 04 	mcall	80002864 <drive_DQ_low_and_release_the_bus+0x60>
	
}
80002858:	2f cd       	sub	sp,-16
8000285a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000285e:	00 00       	add	r0,r0
80002860:	80 00       	ld.sh	r0,r0[0x0]
80002862:	20 10       	sub	r0,1
80002864:	80 00       	ld.sh	r0,r0[0x0]
80002866:	45 04       	lddsp	r4,sp[0x140]
80002868:	80 00       	ld.sh	r0,r0[0x0]
8000286a:	48 18       	lddpc	r8,8000286c <OWWriteBit>

8000286c <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
8000286c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002870:	1a 97       	mov	r7,sp
80002872:	fa cd 00 ac 	sub	sp,sp,172
80002876:	18 98       	mov	r8,r12
80002878:	ef 4b ff 74 	st.w	r7[-140],r11
8000287c:	ef 68 ff 78 	st.b	r7[-136],r8
	if (bit)
80002880:	ee f8 ff 74 	ld.w	r8,r7[-140]
80002884:	58 08       	cp.w	r8,0
80002886:	e0 80 00 ba 	breq	800029fa <OWWriteBit+0x18e>
	{
		// Write '1' bit
		drive_DQ_low_and_release_the_bus(idx);
8000288a:	ef 38 ff 78 	ld.ub	r8,r7[-136]
8000288e:	10 9c       	mov	r12,r8
80002890:	f0 1f 01 0a 	mcall	80002cb8 <OWWriteBit+0x44c>
#if 0
		drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough		cpu_delay_us(A, 8000000);	//tW1L 5-15us
		release_the_bus(idx);
#endif
		cpu_delay_us(B, 8000000);	// Complete the time slot and 10us recovery tSLOT 65-??us (no max)
80002894:	fe f8 04 28 	ld.w	r8,pc[1064]
80002898:	70 08       	ld.w	r8,r8[0x0]
8000289a:	ef 48 ff a4 	st.w	r7[-92],r8
8000289e:	e0 68 12 00 	mov	r8,4608
800028a2:	ea 18 00 7a 	orh	r8,0x7a
800028a6:	ef 48 ff a0 	st.w	r7[-96],r8
800028aa:	ee f8 ff a4 	ld.w	r8,r7[-92]
800028ae:	ef 48 ff ac 	st.w	r7[-84],r8
800028b2:	ee f8 ff a0 	ld.w	r8,r7[-96]
800028b6:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800028ba:	ee fc ff ac 	ld.w	r12,r7[-84]
800028be:	ef 4c ff 60 	st.w	r7[-160],r12
800028c2:	30 0b       	mov	r11,0
800028c4:	ef 4b ff 5c 	st.w	r7[-164],r11
800028c8:	ee f9 ff a8 	ld.w	r9,r7[-88]
800028cc:	ef 49 ff 58 	st.w	r7[-168],r9
800028d0:	30 08       	mov	r8,0
800028d2:	ef 48 ff 54 	st.w	r7[-172],r8
800028d6:	ee fa ff 5c 	ld.w	r10,r7[-164]
800028da:	ee fc ff 58 	ld.w	r12,r7[-168]
800028de:	b9 3a       	mul	r10,r12
800028e0:	ee f8 ff 54 	ld.w	r8,r7[-172]
800028e4:	ee fb ff 60 	ld.w	r11,r7[-160]
800028e8:	b7 38       	mul	r8,r11
800028ea:	10 0a       	add	r10,r8
800028ec:	ee fc ff 60 	ld.w	r12,r7[-160]
800028f0:	ee fb ff 58 	ld.w	r11,r7[-168]
800028f4:	f8 0b 06 48 	mulu.d	r8,r12,r11
800028f8:	12 0a       	add	r10,r9
800028fa:	14 99       	mov	r9,r10
800028fc:	ee 7a 42 3f 	mov	r10,999999
80002900:	30 0b       	mov	r11,0
80002902:	f0 0a 00 0a 	add	r10,r8,r10
80002906:	f2 0b 00 4b 	adc	r11,r9,r11
8000290a:	ee 78 42 40 	mov	r8,1000000
8000290e:	30 09       	mov	r9,0
80002910:	f0 1f 00 ec 	mcall	80002cc0 <OWWriteBit+0x454>
80002914:	14 98       	mov	r8,r10
80002916:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002918:	ef 48 ff b4 	st.w	r7[-76],r8
8000291c:	ee c8 00 84 	sub	r8,r7,132
80002920:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002924:	e1 b8 00 42 	mfsr	r8,0x108
80002928:	10 99       	mov	r9,r8
8000292a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000292e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002930:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002934:	70 09       	ld.w	r9,r8[0x0]
80002936:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000293a:	10 09       	add	r9,r8
8000293c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002940:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002942:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002946:	30 08       	mov	r8,0
80002948:	f3 68 00 08 	st.b	r9[8],r8
8000294c:	ee c8 00 84 	sub	r8,r7,132
80002950:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002954:	e1 b8 00 42 	mfsr	r8,0x108
80002958:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000295c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002960:	f1 39 00 08 	ld.ub	r9,r8[8]
80002964:	30 28       	mov	r8,2
80002966:	f0 09 18 00 	cp.b	r9,r8
8000296a:	c0 31       	brne	80002970 <OWWriteBit+0x104>
    return false;
8000296c:	30 08       	mov	r8,0
8000296e:	c4 38       	rjmp	800029f4 <OWWriteBit+0x188>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002970:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002974:	f1 39 00 08 	ld.ub	r9,r8[8]
80002978:	30 18       	mov	r8,1
8000297a:	f0 09 18 00 	cp.b	r9,r8
8000297e:	c0 31       	brne	80002984 <OWWriteBit+0x118>
    return true;
80002980:	30 18       	mov	r8,1
80002982:	c3 98       	rjmp	800029f4 <OWWriteBit+0x188>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002984:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002988:	70 09       	ld.w	r9,r8[0x0]
8000298a:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000298e:	70 18       	ld.w	r8,r8[0x4]
80002990:	10 39       	cp.w	r9,r8
80002992:	e0 88 00 1a 	brls	800029c6 <OWWriteBit+0x15a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002996:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000299a:	70 08       	ld.w	r8,r8[0x0]
8000299c:	ee f9 ff bc 	ld.w	r9,r7[-68]
800029a0:	10 39       	cp.w	r9,r8
800029a2:	c1 02       	brcc	800029c2 <OWWriteBit+0x156>
800029a4:	ee f8 ff b8 	ld.w	r8,r7[-72]
800029a8:	70 18       	ld.w	r8,r8[0x4]
800029aa:	ee f9 ff bc 	ld.w	r9,r7[-68]
800029ae:	10 39       	cp.w	r9,r8
800029b0:	e0 88 00 09 	brls	800029c2 <OWWriteBit+0x156>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800029b4:	ee f9 ff b8 	ld.w	r9,r7[-72]
800029b8:	30 18       	mov	r8,1
800029ba:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800029be:	30 18       	mov	r8,1
800029c0:	c1 a8       	rjmp	800029f4 <OWWriteBit+0x188>
    }
    return false;
800029c2:	30 08       	mov	r8,0
800029c4:	c1 88       	rjmp	800029f4 <OWWriteBit+0x188>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800029c6:	ee f8 ff b8 	ld.w	r8,r7[-72]
800029ca:	70 08       	ld.w	r8,r8[0x0]
800029cc:	ee f9 ff bc 	ld.w	r9,r7[-68]
800029d0:	10 39       	cp.w	r9,r8
800029d2:	c0 93       	brcs	800029e4 <OWWriteBit+0x178>
800029d4:	ee f8 ff b8 	ld.w	r8,r7[-72]
800029d8:	70 18       	ld.w	r8,r8[0x4]
800029da:	ee f9 ff bc 	ld.w	r9,r7[-68]
800029de:	10 39       	cp.w	r9,r8
800029e0:	e0 88 00 09 	brls	800029f2 <OWWriteBit+0x186>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800029e4:	ee f9 ff b8 	ld.w	r9,r7[-72]
800029e8:	30 18       	mov	r8,1
800029ea:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800029ee:	30 18       	mov	r8,1
800029f0:	c0 28       	rjmp	800029f4 <OWWriteBit+0x188>
    }
    return false;
800029f2:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800029f4:	58 08       	cp.w	r8,0
800029f6:	ca b0       	breq	8000294c <OWWriteBit+0xe0>
800029f8:	c5 c9       	rjmp	80002cb0 <OWWriteBit+0x444>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
800029fa:	ef 38 ff 78 	ld.ub	r8,r7[-136]
800029fe:	10 9c       	mov	r12,r8
80002a00:	f0 1f 00 b1 	mcall	80002cc4 <OWWriteBit+0x458>
		cpu_delay_us(C, 8000000);	//tW0L 60-120us
80002a04:	fe f8 02 c4 	ld.w	r8,pc[708]
80002a08:	70 08       	ld.w	r8,r8[0x0]
80002a0a:	ef 48 ff c4 	st.w	r7[-60],r8
80002a0e:	e0 68 12 00 	mov	r8,4608
80002a12:	ea 18 00 7a 	orh	r8,0x7a
80002a16:	ef 48 ff c0 	st.w	r7[-64],r8
80002a1a:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002a1e:	ef 48 ff cc 	st.w	r7[-52],r8
80002a22:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002a26:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002a2a:	ee f9 ff cc 	ld.w	r9,r7[-52]
80002a2e:	ef 49 ff 70 	st.w	r7[-144],r9
80002a32:	30 08       	mov	r8,0
80002a34:	ef 48 ff 6c 	st.w	r7[-148],r8
80002a38:	ee fc ff c8 	ld.w	r12,r7[-56]
80002a3c:	ef 4c ff 68 	st.w	r7[-152],r12
80002a40:	30 0b       	mov	r11,0
80002a42:	ef 4b ff 64 	st.w	r7[-156],r11
80002a46:	ee fa ff 6c 	ld.w	r10,r7[-148]
80002a4a:	ee f9 ff 68 	ld.w	r9,r7[-152]
80002a4e:	b3 3a       	mul	r10,r9
80002a50:	ee f8 ff 64 	ld.w	r8,r7[-156]
80002a54:	ee fc ff 70 	ld.w	r12,r7[-144]
80002a58:	b9 38       	mul	r8,r12
80002a5a:	10 0a       	add	r10,r8
80002a5c:	ee fb ff 70 	ld.w	r11,r7[-144]
80002a60:	ee fc ff 68 	ld.w	r12,r7[-152]
80002a64:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002a68:	12 0a       	add	r10,r9
80002a6a:	14 99       	mov	r9,r10
80002a6c:	ee 7a 42 3f 	mov	r10,999999
80002a70:	30 0b       	mov	r11,0
80002a72:	f0 0a 00 0a 	add	r10,r8,r10
80002a76:	f2 0b 00 4b 	adc	r11,r9,r11
80002a7a:	ee 78 42 40 	mov	r8,1000000
80002a7e:	30 09       	mov	r9,0
80002a80:	f0 1f 00 90 	mcall	80002cc0 <OWWriteBit+0x454>
80002a84:	14 98       	mov	r8,r10
80002a86:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002a88:	ef 48 ff d4 	st.w	r7[-44],r8
80002a8c:	ee c8 00 78 	sub	r8,r7,120
80002a90:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a94:	e1 b8 00 42 	mfsr	r8,0x108
80002a98:	10 99       	mov	r9,r8
80002a9a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002a9e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002aa0:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002aa4:	70 09       	ld.w	r9,r8[0x0]
80002aa6:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002aaa:	10 09       	add	r9,r8
80002aac:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002ab0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002ab2:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002ab6:	30 08       	mov	r8,0
80002ab8:	f3 68 00 08 	st.b	r9[8],r8
80002abc:	ee c8 00 78 	sub	r8,r7,120
80002ac0:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ac4:	e1 b8 00 42 	mfsr	r8,0x108
80002ac8:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002acc:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002ad0:	f1 39 00 08 	ld.ub	r9,r8[8]
80002ad4:	30 28       	mov	r8,2
80002ad6:	f0 09 18 00 	cp.b	r9,r8
80002ada:	c0 31       	brne	80002ae0 <OWWriteBit+0x274>
    return false;
80002adc:	30 08       	mov	r8,0
80002ade:	c4 38       	rjmp	80002b64 <OWWriteBit+0x2f8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002ae0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002ae4:	f1 39 00 08 	ld.ub	r9,r8[8]
80002ae8:	30 18       	mov	r8,1
80002aea:	f0 09 18 00 	cp.b	r9,r8
80002aee:	c0 31       	brne	80002af4 <OWWriteBit+0x288>
    return true;
80002af0:	30 18       	mov	r8,1
80002af2:	c3 98       	rjmp	80002b64 <OWWriteBit+0x2f8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002af4:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002af8:	70 09       	ld.w	r9,r8[0x0]
80002afa:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002afe:	70 18       	ld.w	r8,r8[0x4]
80002b00:	10 39       	cp.w	r9,r8
80002b02:	e0 88 00 1a 	brls	80002b36 <OWWriteBit+0x2ca>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002b06:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002b0a:	70 08       	ld.w	r8,r8[0x0]
80002b0c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002b10:	10 39       	cp.w	r9,r8
80002b12:	c1 02       	brcc	80002b32 <OWWriteBit+0x2c6>
80002b14:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002b18:	70 18       	ld.w	r8,r8[0x4]
80002b1a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002b1e:	10 39       	cp.w	r9,r8
80002b20:	e0 88 00 09 	brls	80002b32 <OWWriteBit+0x2c6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002b24:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002b28:	30 18       	mov	r8,1
80002b2a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b2e:	30 18       	mov	r8,1
80002b30:	c1 a8       	rjmp	80002b64 <OWWriteBit+0x2f8>
    }
    return false;
80002b32:	30 08       	mov	r8,0
80002b34:	c1 88       	rjmp	80002b64 <OWWriteBit+0x2f8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002b36:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002b3a:	70 08       	ld.w	r8,r8[0x0]
80002b3c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002b40:	10 39       	cp.w	r9,r8
80002b42:	c0 93       	brcs	80002b54 <OWWriteBit+0x2e8>
80002b44:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002b48:	70 18       	ld.w	r8,r8[0x4]
80002b4a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002b4e:	10 39       	cp.w	r9,r8
80002b50:	e0 88 00 09 	brls	80002b62 <OWWriteBit+0x2f6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002b54:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002b58:	30 18       	mov	r8,1
80002b5a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b5e:	30 18       	mov	r8,1
80002b60:	c0 28       	rjmp	80002b64 <OWWriteBit+0x2f8>
    }
    return false;
80002b62:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002b64:	58 08       	cp.w	r8,0
80002b66:	ca b0       	breq	80002abc <OWWriteBit+0x250>
		release_the_bus(idx);
80002b68:	ef 38 ff 78 	ld.ub	r8,r7[-136]
80002b6c:	10 9c       	mov	r12,r8
80002b6e:	f0 1f 00 58 	mcall	80002ccc <OWWriteBit+0x460>
		cpu_delay_us(D, 8000000);	//tREC 5-??us
80002b72:	4d 88       	lddpc	r8,80002cd0 <OWWriteBit+0x464>
80002b74:	70 08       	ld.w	r8,r8[0x0]
80002b76:	ef 48 ff e4 	st.w	r7[-28],r8
80002b7a:	e0 68 12 00 	mov	r8,4608
80002b7e:	ea 18 00 7a 	orh	r8,0x7a
80002b82:	ef 48 ff e0 	st.w	r7[-32],r8
80002b86:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002b8a:	ef 48 ff ec 	st.w	r7[-20],r8
80002b8e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002b92:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002b96:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002b9a:	30 01       	mov	r1,0
80002b9c:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002ba0:	30 03       	mov	r3,0
80002ba2:	e2 02 02 4a 	mul	r10,r1,r2
80002ba6:	e6 00 02 48 	mul	r8,r3,r0
80002baa:	10 0a       	add	r10,r8
80002bac:	e0 02 06 48 	mulu.d	r8,r0,r2
80002bb0:	12 0a       	add	r10,r9
80002bb2:	14 99       	mov	r9,r10
80002bb4:	ee 7a 42 3f 	mov	r10,999999
80002bb8:	30 0b       	mov	r11,0
80002bba:	f0 0a 00 0a 	add	r10,r8,r10
80002bbe:	f2 0b 00 4b 	adc	r11,r9,r11
80002bc2:	ee 78 42 40 	mov	r8,1000000
80002bc6:	30 09       	mov	r9,0
80002bc8:	f0 1f 00 3e 	mcall	80002cc0 <OWWriteBit+0x454>
80002bcc:	14 98       	mov	r8,r10
80002bce:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002bd0:	ef 48 ff f4 	st.w	r7[-12],r8
80002bd4:	ee c8 00 6c 	sub	r8,r7,108
80002bd8:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002bdc:	e1 b8 00 42 	mfsr	r8,0x108
80002be0:	10 99       	mov	r9,r8
80002be2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002be6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002be8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002bec:	70 09       	ld.w	r9,r8[0x0]
80002bee:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002bf2:	10 09       	add	r9,r8
80002bf4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002bf8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002bfa:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002bfe:	30 08       	mov	r8,0
80002c00:	f3 68 00 08 	st.b	r9[8],r8
80002c04:	ee c8 00 6c 	sub	r8,r7,108
80002c08:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c0c:	e1 b8 00 42 	mfsr	r8,0x108
80002c10:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002c14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c18:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c1c:	30 28       	mov	r8,2
80002c1e:	f0 09 18 00 	cp.b	r9,r8
80002c22:	c0 31       	brne	80002c28 <OWWriteBit+0x3bc>
    return false;
80002c24:	30 08       	mov	r8,0
80002c26:	c4 38       	rjmp	80002cac <OWWriteBit+0x440>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002c28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c2c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c30:	30 18       	mov	r8,1
80002c32:	f0 09 18 00 	cp.b	r9,r8
80002c36:	c0 31       	brne	80002c3c <OWWriteBit+0x3d0>
    return true;
80002c38:	30 18       	mov	r8,1
80002c3a:	c3 98       	rjmp	80002cac <OWWriteBit+0x440>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c40:	70 09       	ld.w	r9,r8[0x0]
80002c42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c46:	70 18       	ld.w	r8,r8[0x4]
80002c48:	10 39       	cp.w	r9,r8
80002c4a:	e0 88 00 1a 	brls	80002c7e <OWWriteBit+0x412>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c52:	70 08       	ld.w	r8,r8[0x0]
80002c54:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002c58:	10 39       	cp.w	r9,r8
80002c5a:	c1 02       	brcc	80002c7a <OWWriteBit+0x40e>
80002c5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c60:	70 18       	ld.w	r8,r8[0x4]
80002c62:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002c66:	10 39       	cp.w	r9,r8
80002c68:	e0 88 00 09 	brls	80002c7a <OWWriteBit+0x40e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c6c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c70:	30 18       	mov	r8,1
80002c72:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002c76:	30 18       	mov	r8,1
80002c78:	c1 a8       	rjmp	80002cac <OWWriteBit+0x440>
    }
    return false;
80002c7a:	30 08       	mov	r8,0
80002c7c:	c1 88       	rjmp	80002cac <OWWriteBit+0x440>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c82:	70 08       	ld.w	r8,r8[0x0]
80002c84:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002c88:	10 39       	cp.w	r9,r8
80002c8a:	c0 93       	brcs	80002c9c <OWWriteBit+0x430>
80002c8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c90:	70 18       	ld.w	r8,r8[0x4]
80002c92:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002c96:	10 39       	cp.w	r9,r8
80002c98:	e0 88 00 09 	brls	80002caa <OWWriteBit+0x43e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ca0:	30 18       	mov	r8,1
80002ca2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ca6:	30 18       	mov	r8,1
80002ca8:	c0 28       	rjmp	80002cac <OWWriteBit+0x440>
    }
    return false;
80002caa:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002cac:	58 08       	cp.w	r8,0
80002cae:	ca b0       	breq	80002c04 <OWWriteBit+0x398>
	}
}
80002cb0:	2d 5d       	sub	sp,-172
80002cb2:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002cb6:	00 00       	add	r0,r0
80002cb8:	80 00       	ld.sh	r0,r0[0x0]
80002cba:	28 04       	sub	r4,-128
80002cbc:	00 00       	add	r0,r0
80002cbe:	02 bc       	st.h	r1++,r12
80002cc0:	80 00       	ld.sh	r0,r0[0x0]
80002cc2:	9c 1a       	ld.sh	r10,lr[0x2]
80002cc4:	80 00       	ld.sh	r0,r0[0x0]
80002cc6:	20 5c       	sub	r12,5
80002cc8:	00 00       	add	r0,r0
80002cca:	02 c4       	st.b	r1++,r4
80002ccc:	80 00       	ld.sh	r0,r0[0x0]
80002cce:	20 ac       	sub	r12,10
80002cd0:	00 00       	add	r0,r0
80002cd2:	02 b4       	st.h	r1++,r4

80002cd4 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
80002cd4:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002cd8:	1a 97       	mov	r7,sp
80002cda:	20 dd       	sub	sp,52
80002cdc:	18 98       	mov	r8,r12
80002cde:	ef 68 ff cc 	st.b	r7[-52],r8
#if 0
	drive_DQ_low(idx);
//14may15 take this out entirely, we can't seem to control this precisely enough	cpu_delay_us(A, 8000000);	//tRL 5-15us
	release_the_bus(idx);
#endif
	drive_DQ_low_and_release_the_bus(idx);
80002ce2:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80002ce6:	10 9c       	mov	r12,r8
80002ce8:	f0 1f 00 58 	mcall	80002e48 <OWReadBit+0x174>
	
//14may15 take this out, too tight	cpu_delay_us(E, 8000000);	//tMSR 5-15us
	result = sample_line(idx);
80002cec:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80002cf0:	10 9c       	mov	r12,r8
80002cf2:	f0 1f 00 57 	mcall	80002e4c <OWReadBit+0x178>
80002cf6:	18 98       	mov	r8,r12
80002cf8:	ef 48 ff dc 	st.w	r7[-36],r8
	cpu_delay_us(F, 8000000); // Complete the time slot and 10us recovery tREC 5+us
80002cfc:	4d 58       	lddpc	r8,80002e50 <OWReadBit+0x17c>
80002cfe:	70 08       	ld.w	r8,r8[0x0]
80002d00:	ef 48 ff e4 	st.w	r7[-28],r8
80002d04:	e0 68 12 00 	mov	r8,4608
80002d08:	ea 18 00 7a 	orh	r8,0x7a
80002d0c:	ef 48 ff e0 	st.w	r7[-32],r8
80002d10:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002d14:	ef 48 ff ec 	st.w	r7[-20],r8
80002d18:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002d1c:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002d20:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002d24:	30 01       	mov	r1,0
80002d26:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002d2a:	30 03       	mov	r3,0
80002d2c:	e2 02 02 4a 	mul	r10,r1,r2
80002d30:	e6 00 02 48 	mul	r8,r3,r0
80002d34:	10 0a       	add	r10,r8
80002d36:	e0 02 06 48 	mulu.d	r8,r0,r2
80002d3a:	12 0a       	add	r10,r9
80002d3c:	14 99       	mov	r9,r10
80002d3e:	ee 7a 42 3f 	mov	r10,999999
80002d42:	30 0b       	mov	r11,0
80002d44:	f0 0a 00 0a 	add	r10,r8,r10
80002d48:	f2 0b 00 4b 	adc	r11,r9,r11
80002d4c:	ee 78 42 40 	mov	r8,1000000
80002d50:	30 09       	mov	r9,0
80002d52:	f0 1f 00 41 	mcall	80002e54 <OWReadBit+0x180>
80002d56:	14 98       	mov	r8,r10
80002d58:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002d5a:	ef 48 ff f4 	st.w	r7[-12],r8
80002d5e:	ee c8 00 30 	sub	r8,r7,48
80002d62:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d66:	e1 b8 00 42 	mfsr	r8,0x108
80002d6a:	10 99       	mov	r9,r8
80002d6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d70:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d72:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d76:	70 09       	ld.w	r9,r8[0x0]
80002d78:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d7c:	10 09       	add	r9,r8
80002d7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d82:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002d84:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002d88:	30 08       	mov	r8,0
80002d8a:	f3 68 00 08 	st.b	r9[8],r8
80002d8e:	ee c8 00 30 	sub	r8,r7,48
80002d92:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d96:	e1 b8 00 42 	mfsr	r8,0x108
80002d9a:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002d9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002da2:	f1 39 00 08 	ld.ub	r9,r8[8]
80002da6:	30 28       	mov	r8,2
80002da8:	f0 09 18 00 	cp.b	r9,r8
80002dac:	c0 31       	brne	80002db2 <OWReadBit+0xde>
    return false;
80002dae:	30 08       	mov	r8,0
80002db0:	c4 38       	rjmp	80002e36 <OWReadBit+0x162>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002db2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002db6:	f1 39 00 08 	ld.ub	r9,r8[8]
80002dba:	30 18       	mov	r8,1
80002dbc:	f0 09 18 00 	cp.b	r9,r8
80002dc0:	c0 31       	brne	80002dc6 <OWReadBit+0xf2>
    return true;
80002dc2:	30 18       	mov	r8,1
80002dc4:	c3 98       	rjmp	80002e36 <OWReadBit+0x162>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002dc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dca:	70 09       	ld.w	r9,r8[0x0]
80002dcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dd0:	70 18       	ld.w	r8,r8[0x4]
80002dd2:	10 39       	cp.w	r9,r8
80002dd4:	e0 88 00 1a 	brls	80002e08 <OWReadBit+0x134>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002dd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ddc:	70 08       	ld.w	r8,r8[0x0]
80002dde:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002de2:	10 39       	cp.w	r9,r8
80002de4:	c1 02       	brcc	80002e04 <OWReadBit+0x130>
80002de6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dea:	70 18       	ld.w	r8,r8[0x4]
80002dec:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002df0:	10 39       	cp.w	r9,r8
80002df2:	e0 88 00 09 	brls	80002e04 <OWReadBit+0x130>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002df6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002dfa:	30 18       	mov	r8,1
80002dfc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002e00:	30 18       	mov	r8,1
80002e02:	c1 a8       	rjmp	80002e36 <OWReadBit+0x162>
    }
    return false;
80002e04:	30 08       	mov	r8,0
80002e06:	c1 88       	rjmp	80002e36 <OWReadBit+0x162>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002e08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e0c:	70 08       	ld.w	r8,r8[0x0]
80002e0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002e12:	10 39       	cp.w	r9,r8
80002e14:	c0 93       	brcs	80002e26 <OWReadBit+0x152>
80002e16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e1a:	70 18       	ld.w	r8,r8[0x4]
80002e1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002e20:	10 39       	cp.w	r9,r8
80002e22:	e0 88 00 09 	brls	80002e34 <OWReadBit+0x160>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002e26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002e2a:	30 18       	mov	r8,1
80002e2c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002e30:	30 18       	mov	r8,1
80002e32:	c0 28       	rjmp	80002e36 <OWReadBit+0x162>
    }
    return false;
80002e34:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002e36:	58 08       	cp.w	r8,0
80002e38:	ca b0       	breq	80002d8e <OWReadBit+0xba>

	return result;
80002e3a:	ee f8 ff dc 	ld.w	r8,r7[-36]
}
80002e3e:	10 9c       	mov	r12,r8
80002e40:	2f 3d       	sub	sp,-52
80002e42:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002e46:	00 00       	add	r0,r0
80002e48:	80 00       	ld.sh	r0,r0[0x0]
80002e4a:	28 04       	sub	r4,-128
80002e4c:	80 00       	ld.sh	r0,r0[0x0]
80002e4e:	21 30       	sub	r0,19
80002e50:	00 00       	add	r0,r0
80002e52:	02 d8       	st.w	--r1,r8
80002e54:	80 00       	ld.sh	r0,r0[0x0]
80002e56:	9c 1a       	ld.sh	r10,lr[0x2]

80002e58 <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
80002e58:	eb cd 40 80 	pushm	r7,lr
80002e5c:	1a 97       	mov	r7,sp
80002e5e:	20 3d       	sub	sp,12
80002e60:	18 98       	mov	r8,r12
80002e62:	ef 4b ff f4 	st.w	r7[-12],r11
80002e66:	ef 68 ff f8 	st.b	r7[-8],r8
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
80002e6a:	30 08       	mov	r8,0
80002e6c:	ef 48 ff fc 	st.w	r7[-4],r8
80002e70:	c1 58       	rjmp	80002e9a <OWWriteByte+0x42>
	{
		OWWriteBit(idx, data & 0x01);
80002e72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e76:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80002e7a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002e7e:	12 9b       	mov	r11,r9
80002e80:	10 9c       	mov	r12,r8
80002e82:	f0 1f 00 0b 	mcall	80002eac <OWWriteByte+0x54>

		// shift the data byte for the next bit
		data >>= 1;
80002e86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e8a:	a1 58       	asr	r8,0x1
80002e8c:	ef 48 ff f4 	st.w	r7[-12],r8
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
80002e90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e94:	2f f8       	sub	r8,-1
80002e96:	ef 48 ff fc 	st.w	r7[-4],r8
80002e9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e9e:	58 78       	cp.w	r8,7
80002ea0:	fe 9a ff e9 	brle	80002e72 <OWWriteByte+0x1a>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
80002ea4:	2f dd       	sub	sp,-12
80002ea6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002eaa:	00 00       	add	r0,r0
80002eac:	80 00       	ld.sh	r0,r0[0x0]
80002eae:	28 6c       	sub	r12,-122

80002eb0 <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
80002eb0:	eb cd 40 80 	pushm	r7,lr
80002eb4:	1a 97       	mov	r7,sp
80002eb6:	20 3d       	sub	sp,12
80002eb8:	18 98       	mov	r8,r12
80002eba:	ef 68 ff f4 	st.b	r7[-12],r8
	int loop, result=0;
80002ebe:	30 08       	mov	r8,0
80002ec0:	ef 48 ff fc 	st.w	r7[-4],r8

	for (loop = 0; loop < 8; loop++)
80002ec4:	30 08       	mov	r8,0
80002ec6:	ef 48 ff f8 	st.w	r7[-8],r8
80002eca:	c1 88       	rjmp	80002efa <OWReadByte+0x4a>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
80002ecc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ed0:	a1 58       	asr	r8,0x1
80002ed2:	ef 48 ff fc 	st.w	r7[-4],r8

		// if result is one, then set MS bit
		if (OWReadBit(idx))
80002ed6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002eda:	10 9c       	mov	r12,r8
80002edc:	f0 1f 00 0d 	mcall	80002f10 <OWReadByte+0x60>
80002ee0:	18 98       	mov	r8,r12
80002ee2:	58 08       	cp.w	r8,0
80002ee4:	c0 60       	breq	80002ef0 <OWReadByte+0x40>
		result |= 0x80;
80002ee6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002eea:	a7 b8       	sbr	r8,0x7
80002eec:	ef 48 ff fc 	st.w	r7[-4],r8
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
80002ef0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ef4:	2f f8       	sub	r8,-1
80002ef6:	ef 48 ff f8 	st.w	r7[-8],r8
80002efa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002efe:	58 78       	cp.w	r8,7
80002f00:	fe 9a ff e6 	brle	80002ecc <OWReadByte+0x1c>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
80002f04:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002f08:	10 9c       	mov	r12,r8
80002f0a:	2f dd       	sub	sp,-12
80002f0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f10:	80 00       	ld.sh	r0,r0[0x0]
80002f12:	2c d4       	sub	r4,-51

80002f14 <init_ecdbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_ecdbg_rs232(long pba_hz)
{
80002f14:	eb cd 40 80 	pushm	r7,lr
80002f18:	1a 97       	mov	r7,sp
80002f1a:	20 1d       	sub	sp,4
80002f1c:	ef 4c ff fc 	st.w	r7[-4],r12
  init_ecdbg_rs232_ex(ECDBG_USART_BAUDRATE, pba_hz);
80002f20:	ee fb ff fc 	ld.w	r11,r7[-4]
80002f24:	e0 7c c2 00 	mov	r12,115200
80002f28:	f0 1f 00 03 	mcall	80002f34 <init_ecdbg_rs232+0x20>
}
80002f2c:	2f fd       	sub	sp,-4
80002f2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f32:	00 00       	add	r0,r0
80002f34:	80 00       	ld.sh	r0,r0[0x0]
80002f36:	2f 5c       	sub	r12,-11

80002f38 <init_display_rs232>:

void init_display_rs232(long pba_hz)
{
80002f38:	eb cd 40 80 	pushm	r7,lr
80002f3c:	1a 97       	mov	r7,sp
80002f3e:	20 1d       	sub	sp,4
80002f40:	ef 4c ff fc 	st.w	r7[-4],r12
	init_display_rs232_ex(DISPLAY_USART_BAUDRATE, pba_hz);
80002f44:	ee fb ff fc 	ld.w	r11,r7[-4]
80002f48:	e0 6c 12 c0 	mov	r12,4800
80002f4c:	f0 1f 00 03 	mcall	80002f58 <init_display_rs232+0x20>
}
80002f50:	2f fd       	sub	sp,-4
80002f52:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f56:	00 00       	add	r0,r0
80002f58:	80 00       	ld.sh	r0,r0[0x0]
80002f5a:	2f b8       	sub	r8,-5

80002f5c <init_ecdbg_rs232_ex>:


void init_ecdbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80002f5c:	eb cd 40 80 	pushm	r7,lr
80002f60:	1a 97       	mov	r7,sp
80002f62:	20 5d       	sub	sp,20
80002f64:	ef 4c ff f0 	st.w	r7[-16],r12
80002f68:	ef 4b ff ec 	st.w	r7[-20],r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80002f6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002f70:	ef 48 ff f4 	st.w	r7[-12],r8
80002f74:	30 88       	mov	r8,8
80002f76:	ef 68 ff f8 	st.b	r7[-8],r8
80002f7a:	30 48       	mov	r8,4
80002f7c:	ef 68 ff f9 	st.b	r7[-7],r8
80002f80:	30 08       	mov	r8,0
80002f82:	ef 58 ff fa 	st.h	r7[-6],r8
80002f86:	30 08       	mov	r8,0
80002f88:	ef 68 ff fc 	st.b	r7[-4],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(ECDBG_USART_GPIO_MAP,
80002f8c:	30 2b       	mov	r11,2
80002f8e:	48 8c       	lddpc	r12,80002fac <init_ecdbg_rs232_ex+0x50>
80002f90:	f0 1f 00 08 	mcall	80002fb0 <init_ecdbg_rs232_ex+0x54>
                     sizeof(ECDBG_USART_GPIO_MAP) / sizeof(ECDBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(ECDBG_USART, &ecdbg_usart_options, pba_hz);
80002f94:	ee c8 00 0c 	sub	r8,r7,12
80002f98:	ee fa ff ec 	ld.w	r10,r7[-20]
80002f9c:	10 9b       	mov	r11,r8
80002f9e:	fe 7c 28 00 	mov	r12,-55296
80002fa2:	f0 1f 00 05 	mcall	80002fb4 <init_ecdbg_rs232_ex+0x58>
}
80002fa6:	2f bd       	sub	sp,-20
80002fa8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fac:	80 00       	ld.sh	r0,r0[0x0]
80002fae:	a2 10       	st.h	r1[0x2],r0
80002fb0:	80 00       	ld.sh	r0,r0[0x0]
80002fb2:	42 18       	lddsp	r8,sp[0x84]
80002fb4:	80 00       	ld.sh	r0,r0[0x0]
80002fb6:	55 3c       	stdsp	sp[0x14c],r12

80002fb8 <init_display_rs232_ex>:

void init_display_rs232_ex(unsigned long baudrate, long pba_hz)
{
80002fb8:	eb cd 40 80 	pushm	r7,lr
80002fbc:	1a 97       	mov	r7,sp
80002fbe:	20 5d       	sub	sp,20
80002fc0:	ef 4c ff f0 	st.w	r7[-16],r12
80002fc4:	ef 4b ff ec 	st.w	r7[-20],r11
		.baudrate = baudrate,
		.charlength = 8,
		.paritytype = USART_NO_PARITY,
		.stopbits = USART_1_STOPBIT,
		.channelmode = USART_NORMAL_CHMODE
	};
80002fc8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002fcc:	ef 48 ff f4 	st.w	r7[-12],r8
80002fd0:	30 88       	mov	r8,8
80002fd2:	ef 68 ff f8 	st.b	r7[-8],r8
80002fd6:	30 48       	mov	r8,4
80002fd8:	ef 68 ff f9 	st.b	r7[-7],r8
80002fdc:	30 08       	mov	r8,0
80002fde:	ef 58 ff fa 	st.h	r7[-6],r8
80002fe2:	30 08       	mov	r8,0
80002fe4:	ef 68 ff fc 	st.b	r7[-4],r8

	// Setup GPIO for debug USART.
	gpio_enable_module(DISPLAY_USART_GPIO_MAP,
80002fe8:	30 2b       	mov	r11,2
80002fea:	48 8c       	lddpc	r12,80003008 <init_display_rs232_ex+0x50>
80002fec:	f0 1f 00 08 	mcall	8000300c <init_display_rs232_ex+0x54>
	sizeof(DISPLAY_USART_GPIO_MAP) / sizeof(DISPLAY_USART_GPIO_MAP[0]));

	// Initialize it in RS232 mode.
	usart_init_rs232(DISPLAY_USART, &display_usart_options, pba_hz);
80002ff0:	ee c8 00 0c 	sub	r8,r7,12
80002ff4:	ee fa ff ec 	ld.w	r10,r7[-20]
80002ff8:	10 9b       	mov	r11,r8
80002ffa:	fc 7c 14 00 	mov	r12,-191488
80002ffe:	f0 1f 00 05 	mcall	80003010 <init_display_rs232_ex+0x58>
}
80003002:	2f bd       	sub	sp,-20
80003004:	e3 cd 80 80 	ldm	sp++,r7,pc
80003008:	80 00       	ld.sh	r0,r0[0x0]
8000300a:	a2 00       	st.h	r1[0x0],r0
8000300c:	80 00       	ld.sh	r0,r0[0x0]
8000300e:	42 18       	lddsp	r8,sp[0x84]
80003010:	80 00       	ld.sh	r0,r0[0x0]
80003012:	55 3c       	stdsp	sp[0x14c],r12

80003014 <print_ecdbg>:


void print_ecdbg(const char *str)
{
80003014:	eb cd 40 80 	pushm	r7,lr
80003018:	1a 97       	mov	r7,sp
8000301a:	20 1d       	sub	sp,4
8000301c:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print(ECDBG_USART, str);
80003020:	ee fb ff fc 	ld.w	r11,r7[-4]
80003024:	fe 7c 28 00 	mov	r12,-55296
80003028:	f0 1f 00 03 	mcall	80003034 <print_ecdbg+0x20>
}
8000302c:	2f fd       	sub	sp,-4
8000302e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003032:	00 00       	add	r0,r0
80003034:	80 00       	ld.sh	r0,r0[0x0]
80003036:	30 38       	mov	r8,3

80003038 <print>:
	print_hex(DISPLAY_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80003038:	eb cd 40 80 	pushm	r7,lr
8000303c:	1a 97       	mov	r7,sp
8000303e:	20 2d       	sub	sp,8
80003040:	ef 4c ff fc 	st.w	r7[-4],r12
80003044:	ef 4b ff f8 	st.w	r7[-8],r11
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80003048:	ee fb ff f8 	ld.w	r11,r7[-8]
8000304c:	ee fc ff fc 	ld.w	r12,r7[-4]
80003050:	f0 1f 00 03 	mcall	8000305c <print+0x24>
}
80003054:	2f ed       	sub	sp,-8
80003056:	e3 cd 80 80 	ldm	sp++,r7,pc
8000305a:	00 00       	add	r0,r0
8000305c:	80 00       	ld.sh	r0,r0[0x0]
8000305e:	57 44       	stdsp	sp[0x1d0],r4

80003060 <adcifa_get_calibration_data>:
 * \param adcifa       Base address of the ADCIFA
 * \param p_adcifa_opt Structure for the ADCIFA core configuration
 */
void adcifa_get_calibration_data(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt)
{
80003060:	eb cd 40 80 	pushm	r7,lr
80003064:	1a 97       	mov	r7,sp
80003066:	20 6d       	sub	sp,24
80003068:	ef 4c ff ec 	st.w	r7[-20],r12
8000306c:	ef 4b ff e8 	st.w	r7[-24],r11
	/* Get Offset Calibration */
	int32_t adc_ocal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003070:	e0 68 02 04 	mov	r8,516
80003074:	ea 18 80 80 	orh	r8,0x8080
80003078:	70 08       	ld.w	r8,r8[0x0]
8000307a:	e6 18 3f 00 	andh	r8,0x3f00,COH
			+ AVR32_FLASHC_FROW_OCAL_WORD)) &
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;
8000307e:	b9 48       	asr	r8,0x18
80003080:	ef 48 ff f0 	st.w	r7[-16],r8
	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
80003084:	e0 68 02 04 	mov	r8,516
80003088:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;

	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
8000308c:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
8000308e:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80003092:	ef 48 ff f4 	st.w	r7[-12],r8
	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
80003096:	e0 68 02 08 	mov	r8,520
8000309a:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;

	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
8000309e:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
800030a0:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800030a4:	ef 48 ff f8 	st.w	r7[-8],r8

	int32_t adc_gain1
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
800030a8:	e0 68 02 08 	mov	r8,520
800030ac:	ea 18 80 80 	orh	r8,0x8080
800030b0:	70 08       	ld.w	r8,r8[0x0]
800030b2:	e6 18 03 ff 	andh	r8,0x3ff,COH
			+ AVR32_FLASHC_FROW_GAIN1_WORD)) &
			AVR32_FLASHC_FROW_GAIN1_MASK) >>
			AVR32_FLASHC_FROW_GAIN1_OFFSET;
800030b6:	b1 48       	asr	r8,0x10
800030b8:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Get ADC Offset Calibration */
	p_adcifa_opt->offset_calibration_value = adc_ocal;
800030bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800030c0:	5c 88       	casts.h	r8
800030c2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800030c6:	b2 68       	st.h	r9[0xc],r8

	/* Get ADC Gain Calibration */
	p_adcifa_opt->gain_calibration_value = adc_gcal;
800030c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030cc:	5c 88       	casts.h	r8
800030ce:	ee f9 ff e8 	ld.w	r9,r7[-24]
800030d2:	b2 58       	st.h	r9[0xa],r8

	/* Get Sample & Hold Gain Calibration for Seq 0 */
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
800030d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030d8:	5c 88       	casts.h	r8
800030da:	ee f9 ff e8 	ld.w	r9,r7[-24]
800030de:	b2 78       	st.h	r9[0xe],r8

	/* Get Sample & Hold Gain Calibration for Seq 1 */
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
800030e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030e4:	5c 88       	casts.h	r8
800030e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800030ea:	f3 58 00 10 	st.h	r9[16],r8
}
800030ee:	2f ad       	sub	sp,-24
800030f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800030f4 <adcifa_configure>:
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt,
		uint32_t pb_hz)
{
800030f4:	eb cd 40 80 	pushm	r7,lr
800030f8:	1a 97       	mov	r7,sp
800030fa:	20 3d       	sub	sp,12
800030fc:	ef 4c ff fc 	st.w	r7[-4],r12
80003100:	ef 4b ff f8 	st.w	r7[-8],r11
80003104:	ef 4a ff f4 	st.w	r7[-12],r10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
80003108:	fc 7a 24 00 	mov	r10,-187392
		= (p_adcifa_opt->sleep_mode_enable <<
8000310c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003110:	f1 38 00 08 	ld.ub	r8,r8[8]
80003114:	f0 09 15 02 	lsl	r9,r8,0x2
			AVR32_ADCIFA_CFG_SLEEP)
			| (p_adcifa_opt->single_sequencer_mode <<
80003118:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000311c:	11 e8       	ld.ub	r8,r8[0x6]
8000311e:	a3 78       	lsl	r8,0x3
			AVR32_ADCIFA_CFG_SSMQ)
			| (p_adcifa_opt->free_running_mode_enable <<
80003120:	10 49       	or	r9,r8
80003122:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003126:	11 f8       	ld.ub	r8,r8[0x7]
80003128:	a5 68       	lsl	r8,0x4
			AVR32_ADCIFA_CFG_FRM)
			| (p_adcifa_opt->reference_source <<
8000312a:	10 49       	or	r9,r8
8000312c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003130:	11 c8       	ld.ub	r8,r8[0x4]
80003132:	a5 78       	lsl	r8,0x5
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
80003134:	10 49       	or	r9,r8
80003136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000313a:	11 d8       	ld.ub	r8,r8[0x5]
8000313c:	a7 78       	lsl	r8,0x7
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
8000313e:	10 49       	or	r9,r8
80003140:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003144:	f1 38 00 09 	ld.ub	r8,r8[9]
80003148:	ab 68       	lsl	r8,0xa
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
8000314a:	f3 e8 10 08 	or	r8,r9,r8
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
8000314e:	10 9b       	mov	r11,r8
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
80003150:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003154:	70 09       	ld.w	r9,r8[0x0]
80003156:	e0 68 4d d3 	mov	r8,19923
8000315a:	ea 18 10 62 	orh	r8,0x1062
8000315e:	f2 08 06 48 	mulu.d	r8,r9,r8
80003162:	a7 89       	lsr	r9,0x6
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
80003164:	e0 68 03 e8 	mov	r8,1000
80003168:	b1 39       	mul	r9,r8
8000316a:	e0 68 4d d3 	mov	r8,19923
8000316e:	ea 18 10 62 	orh	r8,0x1062
80003172:	f2 08 06 48 	mulu.d	r8,r9,r8
80003176:	f2 08 16 0b 	lsr	r8,r9,0xb
8000317a:	b1 68       	lsl	r8,0x10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
8000317c:	f7 e8 10 08 	or	r8,r11,r8
{
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
80003180:	95 18       	st.w	r10[0x4],r8
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
			(2 * p_adcifa_opt->frequency)) - 1) <<
80003182:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003186:	70 08       	ld.w	r8,r8[0x0]
80003188:	f0 09 15 01 	lsl	r9,r8,0x1
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
8000318c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003190:	f0 09 0d 08 	divu	r8,r8,r9
80003194:	20 18       	sub	r8,1
80003196:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
8000319a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000319e:	f1 49 00 44 	st.w	r8[68],r9
			(2 * p_adcifa_opt->frequency)) - 1) <<
			AVR32_ADCIFA_CKDIV_CNT_OFFSET) &
			AVR32_ADCIFA_CKDIV_CNT_MASK;

	/* Set ADC Offset Calibration */
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
800031a2:	fc 78 24 00 	mov	r8,-187392
800031a6:	fc 79 24 00 	mov	r9,-187392
800031aa:	73 a9       	ld.w	r9,r9[0x68]
800031ac:	12 9a       	mov	r10,r9
800031ae:	e4 1a c0 ff 	andh	r10,0xc0ff
800031b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800031b6:	92 69       	ld.sh	r9,r9[0xc]
800031b8:	b9 69       	lsl	r9,0x18
800031ba:	e6 19 3f 00 	andh	r9,0x3f00,COH
800031be:	f5 e9 10 09 	or	r9,r10,r9
800031c2:	f1 49 00 68 	st.w	r8[104],r9

	/* Set ADC Gain Calibration */
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
800031c6:	fc 78 24 00 	mov	r8,-187392
800031ca:	fc 79 24 00 	mov	r9,-187392
800031ce:	73 a9       	ld.w	r9,r9[0x68]
800031d0:	12 9a       	mov	r10,r9
800031d2:	e0 1a 80 00 	andl	r10,0x8000
800031d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800031da:	92 59       	ld.sh	r9,r9[0xa]
800031dc:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
800031e0:	f5 e9 10 09 	or	r9,r10,r9
800031e4:	f1 49 00 68 	st.w	r8[104],r9

	/* Set Sample & Hold Gain Calibration for seq 0 */
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
800031e8:	fc 78 24 00 	mov	r8,-187392
800031ec:	fc 79 24 00 	mov	r9,-187392
800031f0:	73 b9       	ld.w	r9,r9[0x6c]
800031f2:	12 9a       	mov	r10,r9
800031f4:	e0 1a fc 00 	andl	r10,0xfc00
800031f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800031fc:	92 79       	ld.sh	r9,r9[0xe]
800031fe:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
80003202:	f5 e9 10 09 	or	r9,r10,r9
80003206:	f1 49 00 6c 	st.w	r8[108],r9

	/* Set Sample & Hold Gain Calibration for seq 1 */
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
8000320a:	fc 78 24 00 	mov	r8,-187392
8000320e:	fc 79 24 00 	mov	r9,-187392
80003212:	73 b9       	ld.w	r9,r9[0x6c]
80003214:	12 9a       	mov	r10,r9
80003216:	e4 1a fc 00 	andh	r10,0xfc00
8000321a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000321e:	f3 09 00 10 	ld.sh	r9,r9[16]
80003222:	b1 69       	lsl	r9,0x10
80003224:	e6 19 03 ff 	andh	r9,0x3ff,COH
80003228:	f5 e9 10 09 	or	r9,r10,r9
8000322c:	f1 49 00 6c 	st.w	r8[108],r9

	/* Enable ADCIFA */
	ADCIFA_enable();
80003230:	fc 78 24 00 	mov	r8,-187392
80003234:	fc 79 24 00 	mov	r9,-187392
80003238:	72 19       	ld.w	r9,r9[0x4]
8000323a:	a1 a9       	sbr	r9,0x0
8000323c:	91 19       	st.w	r8[0x4],r9
8000323e:	c0 28       	rjmp	80003242 <adcifa_configure+0x14e>
	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
			break;
		}
	}
80003240:	d7 03       	nop
	/* Enable ADCIFA */
	ADCIFA_enable();

	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
80003242:	fc 78 24 00 	mov	r8,-187392
80003246:	70 28       	ld.w	r8,r8[0x8]
80003248:	e2 18 40 00 	andl	r8,0x4000,COH
8000324c:	cf a0       	breq	80003240 <adcifa_configure+0x14c>
			break;
		}
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
8000324e:	30 18       	mov	r8,1
}
80003250:	10 9c       	mov	r12,r8
80003252:	2f dd       	sub	sp,-12
80003254:	e3 cd 80 80 	ldm	sp++,r7,pc

80003258 <adcifa_configure_sequencer>:
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		adcifa_sequencer_conversion_opt_t *p_adcifa_sequencer_conversion_opt)
{
80003258:	eb cd 40 80 	pushm	r7,lr
8000325c:	1a 97       	mov	r7,sp
8000325e:	21 1d       	sub	sp,68
80003260:	ef 4c ff c8 	st.w	r7[-56],r12
80003264:	16 98       	mov	r8,r11
80003266:	ef 4a ff c0 	st.w	r7[-64],r10
8000326a:	ef 49 ff bc 	st.w	r7[-68],r9
8000326e:	ef 68 ff c4 	st.b	r7[-60],r8
	uint8_t g[16] = {0};
80003272:	30 08       	mov	r8,0
80003274:	30 09       	mov	r9,0
80003276:	ee e9 ff ec 	st.d	r7[-20],r8
8000327a:	30 08       	mov	r8,0
8000327c:	30 09       	mov	r9,0
8000327e:	ee e9 ff f4 	st.d	r7[-12],r8
	uint8_t mp[16] = {0};
80003282:	30 08       	mov	r8,0
80003284:	30 09       	mov	r9,0
80003286:	ee e9 ff dc 	st.d	r7[-36],r8
8000328a:	30 08       	mov	r8,0
8000328c:	30 09       	mov	r9,0
8000328e:	ee e9 ff e4 	st.d	r7[-28],r8
	uint8_t mn[16] = {0};
80003292:	30 08       	mov	r8,0
80003294:	30 09       	mov	r9,0
80003296:	ee e9 ff cc 	st.d	r7[-52],r8
8000329a:	30 08       	mov	r8,0
8000329c:	30 09       	mov	r9,0
8000329e:	ee e9 ff d4 	st.d	r7[-44],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch case with sequencer */
	switch (sequencer) {
800032a2:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800032a6:	58 08       	cp.w	r8,0
800032a8:	c0 60       	breq	800032b4 <adcifa_configure_sequencer+0x5c>
800032aa:	58 18       	cp.w	r8,1
800032ac:	e0 80 01 65 	breq	80003576 <adcifa_configure_sequencer+0x31e>
800032b0:	e0 8f 02 54 	bral	80003758 <adcifa_configure_sequencer+0x500>
	/* Sequencer 0 */
	case 0:
		/* Configure Sequencer 0 */
		ADCIFA_configure_sequencer_0(
800032b4:	fc 78 24 00 	mov	r8,-187392
800032b8:	ee f9 ff c0 	ld.w	r9,r7[-64]
800032bc:	13 89       	ld.ub	r9,r9[0x0]
800032be:	20 19       	sub	r9,1
800032c0:	f2 0a 15 10 	lsl	r10,r9,0x10
800032c4:	ee f9 ff c0 	ld.w	r9,r7[-64]
800032c8:	13 99       	ld.ub	r9,r9[0x1]
800032ca:	ad 69       	lsl	r9,0xc
800032cc:	12 4a       	or	r10,r9
800032ce:	ee f9 ff c0 	ld.w	r9,r7[-64]
800032d2:	13 a9       	ld.ub	r9,r9[0x2]
800032d4:	a9 69       	lsl	r9,0x8
800032d6:	12 4a       	or	r10,r9
800032d8:	ee f9 ff c0 	ld.w	r9,r7[-64]
800032dc:	13 b9       	ld.ub	r9,r9[0x3]
800032de:	a3 69       	lsl	r9,0x2
800032e0:	12 4a       	or	r10,r9
800032e2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800032e6:	13 c9       	ld.ub	r9,r9[0x4]
800032e8:	a3 79       	lsl	r9,0x3
800032ea:	12 4a       	or	r10,r9
800032ec:	ee f9 ff c0 	ld.w	r9,r7[-64]
800032f0:	13 d9       	ld.ub	r9,r9[0x5]
800032f2:	a1 79       	lsl	r9,0x1
800032f4:	12 4a       	or	r10,r9
800032f6:	ee f9 ff c0 	ld.w	r9,r7[-64]
800032fa:	13 e9       	ld.ub	r9,r9[0x6]
800032fc:	f5 e9 10 09 	or	r9,r10,r9
80003300:	91 59       	st.w	r8[0x14],r9
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003302:	30 08       	mov	r8,0
80003304:	ef 68 ff ff 	st.b	r7[-1],r8
80003308:	c1 68       	rjmp	80003334 <adcifa_configure_sequencer+0xdc>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8000330a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000330e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003312:	12 98       	mov	r8,r9
80003314:	a1 78       	lsl	r8,0x1
80003316:	12 08       	add	r8,r9
80003318:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000331c:	f2 08 00 08 	add	r8,r9,r8
80003320:	11 a8       	ld.ub	r8,r8[0x2]
80003322:	ee 0a 00 09 	add	r9,r7,r10
80003326:	f3 68 ff ec 	st.b	r9[-20],r8
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000332a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000332e:	2f f8       	sub	r8,-1
80003330:	ef 68 ff ff 	st.b	r7[-1],r8
80003334:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003338:	11 88       	ld.ub	r8,r8[0x0]
8000333a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000333e:	f0 09 18 00 	cp.b	r9,r8
80003342:	ce 43       	brcs	8000330a <adcifa_configure_sequencer+0xb2>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
80003344:	fc 78 24 00 	mov	r8,-187392
80003348:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8000334c:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80003350:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80003354:	b9 69       	lsl	r9,0x18
80003356:	12 4a       	or	r10,r9
80003358:	ef 39 ff f1 	ld.ub	r9,r7[-15]
8000335c:	b5 69       	lsl	r9,0x14
8000335e:	12 4a       	or	r10,r9
80003360:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003364:	b1 69       	lsl	r9,0x10
80003366:	12 4a       	or	r10,r9
80003368:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000336c:	ad 69       	lsl	r9,0xc
8000336e:	12 4a       	or	r10,r9
80003370:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80003374:	a9 69       	lsl	r9,0x8
80003376:	12 4a       	or	r10,r9
80003378:	ef 39 ff ed 	ld.ub	r9,r7[-19]
8000337c:	a5 69       	lsl	r9,0x4
8000337e:	12 4a       	or	r10,r9
80003380:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80003384:	f5 e9 10 09 	or	r9,r10,r9
80003388:	91 79       	st.w	r8[0x1c],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000338a:	30 08       	mov	r8,0
8000338c:	ef 68 ff ff 	st.b	r7[-1],r8
80003390:	c2 68       	rjmp	800033dc <adcifa_configure_sequencer+0x184>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
80003392:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003396:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000339a:	12 98       	mov	r8,r9
8000339c:	a1 78       	lsl	r8,0x1
8000339e:	12 08       	add	r8,r9
800033a0:	ee f9 ff bc 	ld.w	r9,r7[-68]
800033a4:	f2 08 00 08 	add	r8,r9,r8
800033a8:	11 88       	ld.ub	r8,r8[0x0]
800033aa:	ee 0a 00 09 	add	r9,r7,r10
800033ae:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800033b2:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800033b6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800033ba:	12 98       	mov	r8,r9
800033bc:	a1 78       	lsl	r8,0x1
800033be:	12 08       	add	r8,r9
800033c0:	ee f9 ff bc 	ld.w	r9,r7[-68]
800033c4:	f2 08 00 08 	add	r8,r9,r8
800033c8:	11 98       	ld.ub	r8,r8[0x1]
800033ca:	ee 0a 00 09 	add	r9,r7,r10
800033ce:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800033d2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800033d6:	2f f8       	sub	r8,-1
800033d8:	ef 68 ff ff 	st.b	r7[-1],r8
800033dc:	ee f8 ff c0 	ld.w	r8,r7[-64]
800033e0:	11 88       	ld.ub	r8,r8[0x0]
800033e2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800033e6:	f0 09 18 00 	cp.b	r9,r8
800033ea:	cd 43       	brcs	80003392 <adcifa_configure_sequencer+0x13a>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3],
800033ec:	fc 78 24 00 	mov	r8,-187392
800033f0:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800033f4:	f2 0a 15 18 	lsl	r10,r9,0x18
800033f8:	ef 39 ff e2 	ld.ub	r9,r7[-30]
800033fc:	b1 69       	lsl	r9,0x10
800033fe:	12 4a       	or	r10,r9
80003400:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80003404:	a9 69       	lsl	r9,0x8
80003406:	12 4a       	or	r10,r9
80003408:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8000340c:	f5 e9 10 09 	or	r9,r10,r9
80003410:	91 b9       	st.w	r8[0x2c],r9
80003412:	fc 78 24 00 	mov	r8,-187392
80003416:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000341a:	f2 0a 15 18 	lsl	r10,r9,0x18
8000341e:	ef 39 ff de 	ld.ub	r9,r7[-34]
80003422:	b1 69       	lsl	r9,0x10
80003424:	12 4a       	or	r10,r9
80003426:	ef 39 ff dd 	ld.ub	r9,r7[-35]
8000342a:	a9 69       	lsl	r9,0x8
8000342c:	12 4a       	or	r10,r9
8000342e:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80003432:	f5 e9 10 09 	or	r9,r10,r9
80003436:	91 99       	st.w	r8[0x24],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3],
80003438:	fc 78 24 00 	mov	r8,-187392
8000343c:	ef 39 ff d3 	ld.ub	r9,r7[-45]
80003440:	f2 0a 15 18 	lsl	r10,r9,0x18
80003444:	ef 39 ff d2 	ld.ub	r9,r7[-46]
80003448:	b1 69       	lsl	r9,0x10
8000344a:	12 4a       	or	r10,r9
8000344c:	ef 39 ff d1 	ld.ub	r9,r7[-47]
80003450:	a9 69       	lsl	r9,0x8
80003452:	12 4a       	or	r10,r9
80003454:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80003458:	f5 e9 10 09 	or	r9,r10,r9
8000345c:	91 f9       	st.w	r8[0x3c],r9
8000345e:	fc 78 24 00 	mov	r8,-187392
80003462:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003466:	f2 0a 15 18 	lsl	r10,r9,0x18
8000346a:	ef 39 ff ce 	ld.ub	r9,r7[-50]
8000346e:	b1 69       	lsl	r9,0x10
80003470:	12 4a       	or	r10,r9
80003472:	ef 39 ff cd 	ld.ub	r9,r7[-51]
80003476:	a9 69       	lsl	r9,0x8
80003478:	12 4a       	or	r10,r9
8000347a:	ef 39 ff cc 	ld.ub	r9,r7[-52]
8000347e:	f5 e9 10 09 	or	r9,r10,r9
80003482:	91 d9       	st.w	r8[0x34],r9
		 * This adcifa_seq1_configured variable check if muxsel1p,muxsel1n 
		 * registers are already configured. This may happen if this function is
		 * called first with sequencer 1 as argument and then called with 
		 * sequencer 0 as argument in case dual mode is used.
		 */
		if(!adcifa_seq1_configured)
80003484:	fe f8 02 e0 	ld.w	r8,pc[736]
80003488:	11 88       	ld.ub	r8,r8[0x0]
8000348a:	ec 18 00 01 	eorl	r8,0x1
8000348e:	5c 58       	castu.b	r8
80003490:	e0 80 01 63 	breq	80003756 <adcifa_configure_sequencer+0x4fe>
		{
			/*
			 * Configure gain for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */ 
			ADCIFA_configure_sh1gain(g[15], g[14], g[13], g[12], g[11], g[10], 
80003494:	fc 78 24 00 	mov	r8,-187392
80003498:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000349c:	f2 0a 15 1c 	lsl	r10,r9,0x1c
800034a0:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800034a4:	b9 69       	lsl	r9,0x18
800034a6:	12 4a       	or	r10,r9
800034a8:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800034ac:	b5 69       	lsl	r9,0x14
800034ae:	12 4a       	or	r10,r9
800034b0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800034b4:	b1 69       	lsl	r9,0x10
800034b6:	12 4a       	or	r10,r9
800034b8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800034bc:	ad 69       	lsl	r9,0xc
800034be:	12 4a       	or	r10,r9
800034c0:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800034c4:	a9 69       	lsl	r9,0x8
800034c6:	12 4a       	or	r10,r9
800034c8:	ef 39 ff f5 	ld.ub	r9,r7[-11]
800034cc:	a5 69       	lsl	r9,0x4
800034ce:	12 4a       	or	r10,r9
800034d0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800034d4:	f5 e9 10 09 	or	r9,r10,r9
800034d8:	91 89       	st.w	r8[0x20],r9

			/*
			 * Configure Mux for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */
			ADCIFA_configure_muxsel1p(mp[15], mp[14], mp[13], mp[12], mp[11], 
800034da:	fc 78 24 00 	mov	r8,-187392
800034de:	ef 39 ff eb 	ld.ub	r9,r7[-21]
800034e2:	f2 0a 15 18 	lsl	r10,r9,0x18
800034e6:	ef 39 ff ea 	ld.ub	r9,r7[-22]
800034ea:	b1 69       	lsl	r9,0x10
800034ec:	12 4a       	or	r10,r9
800034ee:	ef 39 ff e9 	ld.ub	r9,r7[-23]
800034f2:	a9 69       	lsl	r9,0x8
800034f4:	12 4a       	or	r10,r9
800034f6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800034fa:	f5 e9 10 09 	or	r9,r10,r9
800034fe:	91 c9       	st.w	r8[0x30],r9
80003500:	fc 78 24 00 	mov	r8,-187392
80003504:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80003508:	f2 0a 15 18 	lsl	r10,r9,0x18
8000350c:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80003510:	b1 69       	lsl	r9,0x10
80003512:	12 4a       	or	r10,r9
80003514:	ef 39 ff e5 	ld.ub	r9,r7[-27]
80003518:	a9 69       	lsl	r9,0x8
8000351a:	12 4a       	or	r10,r9
8000351c:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80003520:	f5 e9 10 09 	or	r9,r10,r9
80003524:	91 a9       	st.w	r8[0x28],r9
				mp[10], mp[9], mp[8]);
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
80003526:	fc 78 24 00 	mov	r8,-187392
8000352a:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000352e:	f2 0a 15 18 	lsl	r10,r9,0x18
80003532:	ef 39 ff da 	ld.ub	r9,r7[-38]
80003536:	b1 69       	lsl	r9,0x10
80003538:	12 4a       	or	r10,r9
8000353a:	ef 39 ff d9 	ld.ub	r9,r7[-39]
8000353e:	a9 69       	lsl	r9,0x8
80003540:	12 4a       	or	r10,r9
80003542:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80003546:	f5 e9 10 09 	or	r9,r10,r9
8000354a:	f1 49 00 40 	st.w	r8[64],r9
8000354e:	fc 78 24 00 	mov	r8,-187392
80003552:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003556:	f2 0a 15 18 	lsl	r10,r9,0x18
8000355a:	ef 39 ff d6 	ld.ub	r9,r7[-42]
8000355e:	b1 69       	lsl	r9,0x10
80003560:	12 4a       	or	r10,r9
80003562:	ef 39 ff d5 	ld.ub	r9,r7[-43]
80003566:	a9 69       	lsl	r9,0x8
80003568:	12 4a       	or	r10,r9
8000356a:	ef 39 ff d4 	ld.ub	r9,r7[-44]
8000356e:	f5 e9 10 09 	or	r9,r10,r9
80003572:	91 e9       	st.w	r8[0x38],r9
				mn[10], mn[9], mn[8]);

		}

		break;
80003574:	cf 28       	rjmp	80003758 <adcifa_configure_sequencer+0x500>

	/* Sequencer 1 */
	case 1:
		/* Configure Sequencer 1 */
		ADCIFA_configure_sequencer_1(
80003576:	fc 78 24 00 	mov	r8,-187392
8000357a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000357e:	13 89       	ld.ub	r9,r9[0x0]
80003580:	20 19       	sub	r9,1
80003582:	f2 0a 15 10 	lsl	r10,r9,0x10
80003586:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000358a:	13 99       	ld.ub	r9,r9[0x1]
8000358c:	ad 69       	lsl	r9,0xc
8000358e:	12 4a       	or	r10,r9
80003590:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003594:	13 a9       	ld.ub	r9,r9[0x2]
80003596:	a9 69       	lsl	r9,0x8
80003598:	12 4a       	or	r10,r9
8000359a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000359e:	13 b9       	ld.ub	r9,r9[0x3]
800035a0:	a3 69       	lsl	r9,0x2
800035a2:	12 4a       	or	r10,r9
800035a4:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035a8:	13 c9       	ld.ub	r9,r9[0x4]
800035aa:	a3 79       	lsl	r9,0x3
800035ac:	12 4a       	or	r10,r9
800035ae:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035b2:	13 d9       	ld.ub	r9,r9[0x5]
800035b4:	a1 79       	lsl	r9,0x1
800035b6:	f5 e9 10 09 	or	r9,r10,r9
800035ba:	12 9a       	mov	r10,r9
800035bc:	a5 aa       	sbr	r10,0x4
800035be:	ee f9 ff c0 	ld.w	r9,r7[-64]
800035c2:	13 e9       	ld.ub	r9,r9[0x6]
800035c4:	f5 e9 10 09 	or	r9,r10,r9
800035c8:	91 69       	st.w	r8[0x18],r9
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800035ca:	30 08       	mov	r8,0
800035cc:	ef 68 ff ff 	st.b	r7[-1],r8
800035d0:	c1 68       	rjmp	800035fc <adcifa_configure_sequencer+0x3a4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800035d2:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800035d6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800035da:	12 98       	mov	r8,r9
800035dc:	a1 78       	lsl	r8,0x1
800035de:	12 08       	add	r8,r9
800035e0:	ee f9 ff bc 	ld.w	r9,r7[-68]
800035e4:	f2 08 00 08 	add	r8,r9,r8
800035e8:	11 a8       	ld.ub	r8,r8[0x2]
800035ea:	ee 0a 00 09 	add	r9,r7,r10
800035ee:	f3 68 ff ec 	st.b	r9[-20],r8
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800035f2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800035f6:	2f f8       	sub	r8,-1
800035f8:	ef 68 ff ff 	st.b	r7[-1],r8
800035fc:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003600:	11 88       	ld.ub	r8,r8[0x0]
80003602:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003606:	f0 09 18 00 	cp.b	r9,r8
8000360a:	ce 43       	brcs	800035d2 <adcifa_configure_sequencer+0x37a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
8000360c:	fc 78 24 00 	mov	r8,-187392
80003610:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80003614:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80003618:	ef 39 ff f2 	ld.ub	r9,r7[-14]
8000361c:	b9 69       	lsl	r9,0x18
8000361e:	12 4a       	or	r10,r9
80003620:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80003624:	b5 69       	lsl	r9,0x14
80003626:	12 4a       	or	r10,r9
80003628:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000362c:	b1 69       	lsl	r9,0x10
8000362e:	12 4a       	or	r10,r9
80003630:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003634:	ad 69       	lsl	r9,0xc
80003636:	12 4a       	or	r10,r9
80003638:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000363c:	a9 69       	lsl	r9,0x8
8000363e:	12 4a       	or	r10,r9
80003640:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80003644:	a5 69       	lsl	r9,0x4
80003646:	12 4a       	or	r10,r9
80003648:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000364c:	f5 e9 10 09 	or	r9,r10,r9
80003650:	91 89       	st.w	r8[0x20],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003652:	30 08       	mov	r8,0
80003654:	ef 68 ff ff 	st.b	r7[-1],r8
80003658:	c2 68       	rjmp	800036a4 <adcifa_configure_sequencer+0x44c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
8000365a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000365e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003662:	12 98       	mov	r8,r9
80003664:	a1 78       	lsl	r8,0x1
80003666:	12 08       	add	r8,r9
80003668:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000366c:	f2 08 00 08 	add	r8,r9,r8
80003670:	11 88       	ld.ub	r8,r8[0x0]
80003672:	ee 0a 00 09 	add	r9,r7,r10
80003676:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
8000367a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000367e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003682:	12 98       	mov	r8,r9
80003684:	a1 78       	lsl	r8,0x1
80003686:	12 08       	add	r8,r9
80003688:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000368c:	f2 08 00 08 	add	r8,r9,r8
80003690:	11 98       	ld.ub	r8,r8[0x1]
80003692:	ee 0a 00 09 	add	r9,r7,r10
80003696:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000369a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000369e:	2f f8       	sub	r8,-1
800036a0:	ef 68 ff ff 	st.b	r7[-1],r8
800036a4:	ee f8 ff c0 	ld.w	r8,r7[-64]
800036a8:	11 88       	ld.ub	r8,r8[0x0]
800036aa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036ae:	f0 09 18 00 	cp.b	r9,r8
800036b2:	cd 43       	brcs	8000365a <adcifa_configure_sequencer+0x402>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3],
800036b4:	fc 78 24 00 	mov	r8,-187392
800036b8:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800036bc:	f2 0a 15 18 	lsl	r10,r9,0x18
800036c0:	ef 39 ff e2 	ld.ub	r9,r7[-30]
800036c4:	b1 69       	lsl	r9,0x10
800036c6:	12 4a       	or	r10,r9
800036c8:	ef 39 ff e1 	ld.ub	r9,r7[-31]
800036cc:	a9 69       	lsl	r9,0x8
800036ce:	12 4a       	or	r10,r9
800036d0:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800036d4:	f5 e9 10 09 	or	r9,r10,r9
800036d8:	91 c9       	st.w	r8[0x30],r9
800036da:	fc 78 24 00 	mov	r8,-187392
800036de:	ef 39 ff df 	ld.ub	r9,r7[-33]
800036e2:	f2 0a 15 18 	lsl	r10,r9,0x18
800036e6:	ef 39 ff de 	ld.ub	r9,r7[-34]
800036ea:	b1 69       	lsl	r9,0x10
800036ec:	12 4a       	or	r10,r9
800036ee:	ef 39 ff dd 	ld.ub	r9,r7[-35]
800036f2:	a9 69       	lsl	r9,0x8
800036f4:	12 4a       	or	r10,r9
800036f6:	ef 39 ff dc 	ld.ub	r9,r7[-36]
800036fa:	f5 e9 10 09 	or	r9,r10,r9
800036fe:	91 a9       	st.w	r8[0x28],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3],
80003700:	fc 78 24 00 	mov	r8,-187392
80003704:	ef 39 ff d3 	ld.ub	r9,r7[-45]
80003708:	f2 0a 15 18 	lsl	r10,r9,0x18
8000370c:	ef 39 ff d2 	ld.ub	r9,r7[-46]
80003710:	b1 69       	lsl	r9,0x10
80003712:	12 4a       	or	r10,r9
80003714:	ef 39 ff d1 	ld.ub	r9,r7[-47]
80003718:	a9 69       	lsl	r9,0x8
8000371a:	12 4a       	or	r10,r9
8000371c:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80003720:	f5 e9 10 09 	or	r9,r10,r9
80003724:	f1 49 00 40 	st.w	r8[64],r9
80003728:	fc 78 24 00 	mov	r8,-187392
8000372c:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003730:	f2 0a 15 18 	lsl	r10,r9,0x18
80003734:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003738:	b1 69       	lsl	r9,0x10
8000373a:	12 4a       	or	r10,r9
8000373c:	ef 39 ff cd 	ld.ub	r9,r7[-51]
80003740:	a9 69       	lsl	r9,0x8
80003742:	12 4a       	or	r10,r9
80003744:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80003748:	f5 e9 10 09 	or	r9,r10,r9
8000374c:	91 e9       	st.w	r8[0x38],r9
				mn[2], mn[1], mn[0]);

		adcifa_seq1_configured = true;
8000374e:	48 69       	lddpc	r9,80003764 <adcifa_configure_sequencer+0x50c>
80003750:	30 18       	mov	r8,1
80003752:	b2 88       	st.b	r9[0x0],r8
80003754:	c0 28       	rjmp	80003758 <adcifa_configure_sequencer+0x500>
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
				mn[10], mn[9], mn[8]);

		}

		break;
80003756:	d7 03       	nop
		break;

	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
80003758:	30 18       	mov	r8,1
}
8000375a:	10 9c       	mov	r12,r8
8000375c:	2e fd       	sub	sp,-68
8000375e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003762:	00 00       	add	r0,r0
80003764:	00 00       	add	r0,r0
80003766:	00 b8       	st.h	r0++,r8

80003768 <adcifa_start_sequencer>:
/** \brief Start analog to digital conversion for a specific sequencer
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
void adcifa_start_sequencer(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003768:	eb cd 40 80 	pushm	r7,lr
8000376c:	1a 97       	mov	r7,sp
8000376e:	20 2d       	sub	sp,8
80003770:	ef 4c ff fc 	st.w	r7[-4],r12
80003774:	16 98       	mov	r8,r11
80003776:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch Sequencer */
	switch (sequencer) {
8000377a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000377e:	58 18       	cp.w	r8,1
80003780:	c0 a0       	breq	80003794 <adcifa_start_sequencer+0x2c>
80003782:	58 38       	cp.w	r8,3
80003784:	c0 d0       	breq	8000379e <adcifa_start_sequencer+0x36>
80003786:	58 08       	cp.w	r8,0
80003788:	c0 f1       	brne	800037a6 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
8000378a:	fc 78 24 00 	mov	r8,-187392
8000378e:	30 19       	mov	r9,1
80003790:	91 09       	st.w	r8[0x0],r9
		break;
80003792:	c0 a8       	rjmp	800037a6 <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
80003794:	fc 78 24 00 	mov	r8,-187392
80003798:	30 29       	mov	r9,2
8000379a:	91 09       	st.w	r8[0x0],r9
		break;
8000379c:	c0 58       	rjmp	800037a6 <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(
8000379e:	fc 78 24 00 	mov	r8,-187392
800037a2:	30 39       	mov	r9,3
800037a4:	91 09       	st.w	r8[0x0],r9
		break;

	default:
		break;
	}
}
800037a6:	2f ed       	sub	sp,-8
800037a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800037ac <adcifa_check_eos>:
/** \brief Get End of Conversion status bit
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
bool adcifa_check_eos(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
800037ac:	eb cd 40 80 	pushm	r7,lr
800037b0:	1a 97       	mov	r7,sp
800037b2:	20 2d       	sub	sp,8
800037b4:	ef 4c ff fc 	st.w	r7[-4],r12
800037b8:	16 98       	mov	r8,r11
800037ba:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* get SR register : EOS bit for channel */
	switch (sequencer) {
800037be:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800037c2:	58 08       	cp.w	r8,0
800037c4:	c0 40       	breq	800037cc <adcifa_check_eos+0x20>
800037c6:	58 18       	cp.w	r8,1
800037c8:	c0 90       	breq	800037da <adcifa_check_eos+0x2e>
800037ca:	c1 08       	rjmp	800037ea <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
800037cc:	fc 78 24 00 	mov	r8,-187392
800037d0:	70 28       	ld.w	r8,r8[0x8]
800037d2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800037d6:	5c 58       	castu.b	r8
800037d8:	c0 a8       	rjmp	800037ec <adcifa_check_eos+0x40>

	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
800037da:	fc 78 24 00 	mov	r8,-187392
800037de:	70 28       	ld.w	r8,r8[0x8]
800037e0:	e2 18 00 10 	andl	r8,0x10,COH
800037e4:	5f 18       	srne	r8
800037e6:	5c 58       	castu.b	r8
800037e8:	c0 28       	rjmp	800037ec <adcifa_check_eos+0x40>

	default:
		break;
	}
	return false;
800037ea:	30 08       	mov	r8,0
}
800037ec:	10 9c       	mov	r12,r8
800037ee:	2f ed       	sub	sp,-8
800037f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800037f4 <adcifa_get_values_from_sequencer>:
 */
uint8_t adcifa_get_values_from_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		int16_t *adcifa_values)
{
800037f4:	eb cd 40 80 	pushm	r7,lr
800037f8:	1a 97       	mov	r7,sp
800037fa:	20 5d       	sub	sp,20
800037fc:	ef 4c ff f8 	st.w	r7[-8],r12
80003800:	16 98       	mov	r8,r11
80003802:	ef 4a ff f0 	st.w	r7[-16],r10
80003806:	ef 49 ff ec 	st.w	r7[-20],r9
8000380a:	ef 68 ff f4 	st.b	r7[-12],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* wait for end of sequence */
	if (adcifa_check_eos(adcifa, sequencer) != true) {
8000380e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003812:	10 9b       	mov	r11,r8
80003814:	ee fc ff f8 	ld.w	r12,r7[-8]
80003818:	f0 1f 00 2c 	mcall	800038c8 <adcifa_get_values_from_sequencer+0xd4>
8000381c:	18 98       	mov	r8,r12
8000381e:	ec 18 00 01 	eorl	r8,0x1
80003822:	5c 58       	castu.b	r8
80003824:	c0 30       	breq	8000382a <adcifa_get_values_from_sequencer+0x36>
		return ADCIFA_STATUS_NOT_COMPLETED;
80003826:	30 38       	mov	r8,3
80003828:	c4 b8       	rjmp	800038be <adcifa_get_values_from_sequencer+0xca>
	}

	switch (sequencer) {
8000382a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000382e:	58 08       	cp.w	r8,0
80003830:	c0 40       	breq	80003838 <adcifa_get_values_from_sequencer+0x44>
80003832:	58 18       	cp.w	r8,1
80003834:	c2 30       	breq	8000387a <adcifa_get_values_from_sequencer+0x86>
80003836:	c4 38       	rjmp	800038bc <adcifa_get_values_from_sequencer+0xc8>
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003838:	30 08       	mov	r8,0
8000383a:	ef 68 ff ff 	st.b	r7[-1],r8
8000383e:	c1 58       	rjmp	80003868 <adcifa_get_values_from_sequencer+0x74>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
80003840:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003844:	a1 78       	lsl	r8,0x1
80003846:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000384a:	10 09       	add	r9,r8
8000384c:	fc 78 24 00 	mov	r8,-187392
80003850:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003854:	2d fa       	sub	r10,-33
80003856:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000385a:	5c 88       	casts.h	r8
8000385c:	b2 08       	st.h	r9[0x0],r8
	}

	switch (sequencer) {
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000385e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003862:	2f f8       	sub	r8,-1
80003864:	ef 68 ff ff 	st.b	r7[-1],r8
80003868:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000386c:	11 88       	ld.ub	r8,r8[0x0]
8000386e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003872:	f0 09 18 00 	cp.b	r9,r8
80003876:	ce 53       	brcs	80003840 <adcifa_get_values_from_sequencer+0x4c>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
80003878:	c2 28       	rjmp	800038bc <adcifa_get_values_from_sequencer+0xc8>

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000387a:	30 08       	mov	r8,0
8000387c:	ef 68 ff ff 	st.b	r7[-1],r8
80003880:	c1 68       	rjmp	800038ac <adcifa_get_values_from_sequencer+0xb8>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
80003882:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003886:	a1 78       	lsl	r8,0x1
80003888:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000388c:	10 09       	add	r9,r8
8000388e:	fc 78 24 00 	mov	r8,-187392
80003892:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003896:	2f 8a       	sub	r10,-8
80003898:	2d fa       	sub	r10,-33
8000389a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000389e:	5c 88       	casts.h	r8
800038a0:	b2 08       	st.h	r9[0x0],r8
		}
		break;

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800038a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800038a6:	2f f8       	sub	r8,-1
800038a8:	ef 68 ff ff 	st.b	r7[-1],r8
800038ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800038b0:	11 88       	ld.ub	r8,r8[0x0]
800038b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800038b6:	f0 09 18 00 	cp.b	r9,r8
800038ba:	ce 43       	brcs	80003882 <adcifa_get_values_from_sequencer+0x8e>

	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
800038bc:	30 28       	mov	r8,2
}
800038be:	10 9c       	mov	r12,r8
800038c0:	2f bd       	sub	sp,-20
800038c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800038c6:	00 00       	add	r0,r0
800038c8:	80 00       	ld.sh	r0,r0[0x0]
800038ca:	37 ac       	mov	r12,122

800038cc <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
800038cc:	eb cd 40 80 	pushm	r7,lr
800038d0:	1a 97       	mov	r7,sp
800038d2:	20 8d       	sub	sp,32
		384,
		512,
		768,
		1024,
		2048,
	};
800038d4:	48 c9       	lddpc	r9,80003904 <flashc_get_flash_size+0x38>
800038d6:	ee c8 00 1e 	sub	r8,r7,30
800038da:	31 ea       	mov	r10,30
800038dc:	12 9b       	mov	r11,r9
800038de:	10 9c       	mov	r12,r8
800038e0:	f0 1f 00 0a 	mcall	80003908 <flashc_get_flash_size+0x3c>
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK)
800038e4:	fe 68 00 00 	mov	r8,-131072
800038e8:	70 38       	ld.w	r8,r8[0xc]
800038ea:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800038ee:	a1 78       	lsl	r8,0x1
800038f0:	ee 08 00 08 	add	r8,r7,r8
800038f4:	f1 08 ff e2 	ld.sh	r8,r8[-30]
800038f8:	5c 78       	castu.h	r8
800038fa:	ab 68       	lsl	r8,0xa
		1024,
	};
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
			>> AVR32_FLASHC_FSR_FSZ_OFFSET]) << 10;
#endif
}
800038fc:	10 9c       	mov	r12,r8
800038fe:	2f 8d       	sub	sp,-32
80003900:	e3 cd 80 80 	ldm	sp++,r7,pc
80003904:	80 00       	ld.sh	r0,r0[0x0]
80003906:	a2 20       	st.h	r1[0x4],r0
80003908:	80 00       	ld.sh	r0,r0[0x0]
8000390a:	9e 7e       	ld.sh	lr,pc[0xe]

8000390c <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
8000390c:	eb cd 40 80 	pushm	r7,lr
80003910:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80003912:	fe 68 00 00 	mov	r8,-131072
80003916:	70 28       	ld.w	r8,r8[0x8]
80003918:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000391c:	5c 58       	castu.b	r8
}
8000391e:	10 9c       	mov	r12,r8
80003920:	e3 cd 80 80 	ldm	sp++,r7,pc

80003924 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80003924:	eb cd 40 80 	pushm	r7,lr
80003928:	1a 97       	mov	r7,sp
	while (!flashc_is_ready());
8000392a:	f0 1f 00 05 	mcall	8000393c <flashc_default_wait_until_ready+0x18>
8000392e:	18 98       	mov	r8,r12
80003930:	ec 18 00 01 	eorl	r8,0x1
80003934:	5c 58       	castu.b	r8
80003936:	cf a1       	brne	8000392a <flashc_default_wait_until_ready+0x6>
}
80003938:	e3 cd 80 80 	ldm	sp++,r7,pc
8000393c:	80 00       	ld.sh	r0,r0[0x0]
8000393e:	39 0c       	mov	r12,-112

80003940 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80003940:	eb cd 40 80 	pushm	r7,lr
80003944:	1a 97       	mov	r7,sp
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80003946:	fe 68 00 00 	mov	r8,-131072
8000394a:	70 28       	ld.w	r8,r8[0x8]
8000394c:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHC_FSR_PROGE_MASK);
}
80003950:	10 9c       	mov	r12,r8
80003952:	e3 cd 80 80 	ldm	sp++,r7,pc
80003956:	d7 03       	nop

80003958 <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80003958:	eb cd 40 80 	pushm	r7,lr
8000395c:	1a 97       	mov	r7,sp
8000395e:	20 3d       	sub	sp,12
80003960:	ef 4c ff f8 	st.w	r7[-8],r12
80003964:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003968:	49 b8       	lddpc	r8,800039d4 <flashc_issue_command+0x7c>
8000396a:	70 08       	ld.w	r8,r8[0x0]
8000396c:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8000396e:	fe 68 00 00 	mov	r8,-131072
80003972:	70 18       	ld.w	r8,r8[0x4]
80003974:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80003978:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000397c:	5c 58       	castu.b	r8
8000397e:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80003982:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003986:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000398a:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
8000398e:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80003992:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003996:	58 08       	cp.w	r8,0
80003998:	c0 b5       	brlt	800039ae <flashc_issue_command+0x56>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
8000399a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000399e:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800039a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039a6:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
800039aa:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800039ae:	3a 58       	mov	r8,-91
800039b0:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800039b4:	fe 68 00 00 	mov	r8,-131072
800039b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800039bc:	91 19       	st.w	r8[0x4],r9
	flashc_error_status = flashc_get_error_status();
800039be:	f0 1f 00 07 	mcall	800039d8 <flashc_issue_command+0x80>
800039c2:	18 99       	mov	r9,r12
800039c4:	48 68       	lddpc	r8,800039dc <flashc_issue_command+0x84>
800039c6:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
800039c8:	48 38       	lddpc	r8,800039d4 <flashc_issue_command+0x7c>
800039ca:	70 08       	ld.w	r8,r8[0x0]
800039cc:	5d 18       	icall	r8
}
800039ce:	2f dd       	sub	sp,-12
800039d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800039d4:	00 00       	add	r0,r0
800039d6:	00 08       	add	r8,r0
800039d8:	80 00       	ld.sh	r0,r0[0x0]
800039da:	39 40       	mov	r0,-108
800039dc:	00 00       	add	r0,r0
800039de:	00 bc       	st.h	r0++,r12

800039e0 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
800039e0:	eb cd 40 80 	pushm	r7,lr
800039e4:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
800039e6:	3f fb       	mov	r11,-1
800039e8:	30 3c       	mov	r12,3
800039ea:	f0 1f 00 03 	mcall	800039f4 <flashc_clear_page_buffer+0x14>
}
800039ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800039f2:	00 00       	add	r0,r0
800039f4:	80 00       	ld.sh	r0,r0[0x0]
800039f6:	39 58       	mov	r8,-107

800039f8 <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
800039f8:	eb cd 40 80 	pushm	r7,lr
800039fc:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
800039fe:	fe 68 00 00 	mov	r8,-131072
80003a02:	70 28       	ld.w	r8,r8[0x8]
80003a04:	e2 18 00 20 	andl	r8,0x20,COH
80003a08:	5f 18       	srne	r8
80003a0a:	5c 58       	castu.b	r8
}
80003a0c:	10 9c       	mov	r12,r8
80003a0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a12:	d7 03       	nop

80003a14 <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80003a14:	eb cd 40 80 	pushm	r7,lr
80003a18:	1a 97       	mov	r7,sp
80003a1a:	20 1d       	sub	sp,4
80003a1c:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80003a20:	ee fb ff fc 	ld.w	r11,r7[-4]
80003a24:	30 cc       	mov	r12,12
80003a26:	f0 1f 00 05 	mcall	80003a38 <flashc_quick_page_read+0x24>
	return flashc_is_page_erased();
80003a2a:	f0 1f 00 05 	mcall	80003a3c <flashc_quick_page_read+0x28>
80003a2e:	18 98       	mov	r8,r12
}
80003a30:	10 9c       	mov	r12,r8
80003a32:	2f fd       	sub	sp,-4
80003a34:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a38:	80 00       	ld.sh	r0,r0[0x0]
80003a3a:	39 58       	mov	r8,-107
80003a3c:	80 00       	ld.sh	r0,r0[0x0]
80003a3e:	39 f8       	mov	r8,-97

80003a40 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80003a40:	eb cd 40 80 	pushm	r7,lr
80003a44:	1a 97       	mov	r7,sp
80003a46:	20 4d       	sub	sp,16
80003a48:	ef 4c ff f4 	st.w	r7[-12],r12
80003a4c:	16 98       	mov	r8,r11
80003a4e:	ef 68 ff f0 	st.b	r7[-16],r8
	bool page_erased = true;
80003a52:	30 18       	mov	r8,1
80003a54:	ef 68 ff fb 	st.b	r7[-5],r8

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80003a58:	ee fb ff f4 	ld.w	r11,r7[-12]
80003a5c:	30 2c       	mov	r12,2
80003a5e:	f0 1f 00 10 	mcall	80003a9c <flashc_erase_page+0x5c>
	if (check) {
80003a62:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003a66:	30 08       	mov	r8,0
80003a68:	f0 09 18 00 	cp.b	r9,r8
80003a6c:	c1 20       	breq	80003a90 <flashc_erase_page+0x50>
		unsigned int error_status = flashc_error_status;
80003a6e:	48 d8       	lddpc	r8,80003aa0 <flashc_erase_page+0x60>
80003a70:	70 08       	ld.w	r8,r8[0x0]
80003a72:	ef 48 ff fc 	st.w	r7[-4],r8
		page_erased = flashc_quick_page_read(-1);
80003a76:	3f fc       	mov	r12,-1
80003a78:	f0 1f 00 0b 	mcall	80003aa4 <flashc_erase_page+0x64>
80003a7c:	18 98       	mov	r8,r12
80003a7e:	ef 68 ff fb 	st.b	r7[-5],r8
		flashc_error_status |= error_status;
80003a82:	48 88       	lddpc	r8,80003aa0 <flashc_erase_page+0x60>
80003a84:	70 09       	ld.w	r9,r8[0x0]
80003a86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a8a:	10 49       	or	r9,r8
80003a8c:	48 58       	lddpc	r8,80003aa0 <flashc_erase_page+0x60>
80003a8e:	91 09       	st.w	r8[0x0],r9
	}
	return page_erased;
80003a90:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80003a94:	10 9c       	mov	r12,r8
80003a96:	2f cd       	sub	sp,-16
80003a98:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a9c:	80 00       	ld.sh	r0,r0[0x0]
80003a9e:	39 58       	mov	r8,-107
80003aa0:	00 00       	add	r0,r0
80003aa2:	00 bc       	st.h	r0++,r12
80003aa4:	80 00       	ld.sh	r0,r0[0x0]
80003aa6:	3a 14       	mov	r4,-95

80003aa8 <flashc_write_page>:
	return all_pages_erased;
}


void flashc_write_page(int page_number)
{
80003aa8:	eb cd 40 80 	pushm	r7,lr
80003aac:	1a 97       	mov	r7,sp
80003aae:	20 1d       	sub	sp,4
80003ab0:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80003ab4:	ee fb ff fc 	ld.w	r11,r7[-4]
80003ab8:	30 1c       	mov	r12,1
80003aba:	f0 1f 00 03 	mcall	80003ac4 <flashc_write_page+0x1c>
}
80003abe:	2f fd       	sub	sp,-4
80003ac0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ac4:	80 00       	ld.sh	r0,r0[0x0]
80003ac6:	39 58       	mov	r8,-107

80003ac8 <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80003ac8:	eb cd 40 80 	pushm	r7,lr
80003acc:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80003ace:	3f fb       	mov	r11,-1
80003ad0:	30 fc       	mov	r12,15
80003ad2:	f0 1f 00 05 	mcall	80003ae4 <flashc_quick_user_page_read+0x1c>
	return flashc_is_page_erased();
80003ad6:	f0 1f 00 05 	mcall	80003ae8 <flashc_quick_user_page_read+0x20>
80003ada:	18 98       	mov	r8,r12
}
80003adc:	10 9c       	mov	r12,r8
80003ade:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ae2:	00 00       	add	r0,r0
80003ae4:	80 00       	ld.sh	r0,r0[0x0]
80003ae6:	39 58       	mov	r8,-107
80003ae8:	80 00       	ld.sh	r0,r0[0x0]
80003aea:	39 f8       	mov	r8,-97

80003aec <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80003aec:	eb cd 40 80 	pushm	r7,lr
80003af0:	1a 97       	mov	r7,sp
80003af2:	20 1d       	sub	sp,4
80003af4:	18 98       	mov	r8,r12
80003af6:	ef 68 ff fc 	st.b	r7[-4],r8
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80003afa:	3f fb       	mov	r11,-1
80003afc:	30 ec       	mov	r12,14
80003afe:	f0 1f 00 09 	mcall	80003b20 <flashc_erase_user_page+0x34>
	return (check) ? flashc_quick_user_page_read() : true;
80003b02:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003b06:	30 08       	mov	r8,0
80003b08:	f0 09 18 00 	cp.b	r9,r8
80003b0c:	c0 50       	breq	80003b16 <flashc_erase_user_page+0x2a>
80003b0e:	f0 1f 00 06 	mcall	80003b24 <flashc_erase_user_page+0x38>
80003b12:	18 98       	mov	r8,r12
80003b14:	c0 28       	rjmp	80003b18 <flashc_erase_user_page+0x2c>
80003b16:	30 18       	mov	r8,1
}
80003b18:	10 9c       	mov	r12,r8
80003b1a:	2f fd       	sub	sp,-4
80003b1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b20:	80 00       	ld.sh	r0,r0[0x0]
80003b22:	39 58       	mov	r8,-107
80003b24:	80 00       	ld.sh	r0,r0[0x0]
80003b26:	3a c8       	mov	r8,-84

80003b28 <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80003b28:	eb cd 40 80 	pushm	r7,lr
80003b2c:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80003b2e:	3f fb       	mov	r11,-1
80003b30:	30 dc       	mov	r12,13
80003b32:	f0 1f 00 03 	mcall	80003b3c <flashc_write_user_page+0x14>
}
80003b36:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b3a:	00 00       	add	r0,r0
80003b3c:	80 00       	ld.sh	r0,r0[0x0]
80003b3e:	39 58       	mov	r8,-107

80003b40 <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, uint8_t src, size_t nbytes, bool erase)
{
80003b40:	eb cd 40 80 	pushm	r7,lr
80003b44:	1a 97       	mov	r7,sp
80003b46:	20 4d       	sub	sp,16
80003b48:	ef 4c ff fc 	st.w	r7[-4],r12
80003b4c:	ef 4a ff f4 	st.w	r7[-12],r10
80003b50:	12 98       	mov	r8,r9
80003b52:	16 99       	mov	r9,r11
80003b54:	ef 69 ff f8 	st.b	r7[-8],r9
80003b58:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset16(dst, src | (uint16_t)src << 8, nbytes, erase);
80003b5c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003b60:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80003b64:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003b68:	a9 68       	lsl	r8,0x8
80003b6a:	5c 88       	casts.h	r8
80003b6c:	f5 e8 10 08 	or	r8,r10,r8
80003b70:	5c 88       	casts.h	r8
80003b72:	5c 78       	castu.h	r8
80003b74:	ee fa ff f4 	ld.w	r10,r7[-12]
80003b78:	10 9b       	mov	r11,r8
80003b7a:	ee fc ff fc 	ld.w	r12,r7[-4]
80003b7e:	f0 1f 00 04 	mcall	80003b8c <flashc_memset8+0x4c>
80003b82:	18 98       	mov	r8,r12
}
80003b84:	10 9c       	mov	r12,r8
80003b86:	2f cd       	sub	sp,-16
80003b88:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b8c:	80 00       	ld.sh	r0,r0[0x0]
80003b8e:	3b 90       	mov	r0,-71

80003b90 <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, uint16_t src, size_t nbytes, bool erase)
{
80003b90:	eb cd 40 80 	pushm	r7,lr
80003b94:	1a 97       	mov	r7,sp
80003b96:	20 4d       	sub	sp,16
80003b98:	ef 4c ff fc 	st.w	r7[-4],r12
80003b9c:	ef 4a ff f4 	st.w	r7[-12],r10
80003ba0:	12 98       	mov	r8,r9
80003ba2:	16 99       	mov	r9,r11
80003ba4:	ef 59 ff f8 	st.h	r7[-8],r9
80003ba8:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset32(dst, src | (uint32_t)src << 16, nbytes, erase);
80003bac:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003bb0:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80003bb4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003bb8:	b1 68       	lsl	r8,0x10
80003bba:	f5 e8 10 08 	or	r8,r10,r8
80003bbe:	ee fa ff f4 	ld.w	r10,r7[-12]
80003bc2:	10 9b       	mov	r11,r8
80003bc4:	ee fc ff fc 	ld.w	r12,r7[-4]
80003bc8:	f0 1f 00 04 	mcall	80003bd8 <flashc_memset16+0x48>
80003bcc:	18 98       	mov	r8,r12
}
80003bce:	10 9c       	mov	r12,r8
80003bd0:	2f cd       	sub	sp,-16
80003bd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bd6:	00 00       	add	r0,r0
80003bd8:	80 00       	ld.sh	r0,r0[0x0]
80003bda:	3b dc       	mov	r12,-67

80003bdc <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, uint32_t src, size_t nbytes, bool erase)
{
80003bdc:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80003be0:	1a 97       	mov	r7,sp
80003be2:	20 6d       	sub	sp,24
80003be4:	ef 4c ff fc 	st.w	r7[-4],r12
80003be8:	ef 4b ff f8 	st.w	r7[-8],r11
80003bec:	ef 4a ff f4 	st.w	r7[-12],r10
80003bf0:	12 98       	mov	r8,r9
80003bf2:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
80003bf6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003bfa:	ee f0 ff f8 	ld.w	r0,r7[-8]
80003bfe:	30 01       	mov	r1,0
80003c00:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c04:	ef 49 ff ec 	st.w	r7[-20],r9
80003c08:	30 09       	mov	r9,0
80003c0a:	ef 49 ff e8 	st.w	r7[-24],r9
80003c0e:	ee f3 ff ec 	ld.w	r3,r7[-20]
80003c12:	a1 63       	lsl	r3,0x0
80003c14:	30 02       	mov	r2,0
80003c16:	e1 e2 10 0a 	or	r10,r0,r2
80003c1a:	e3 e3 10 0b 	or	r11,r1,r3
80003c1e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003c22:	ee fc ff fc 	ld.w	r12,r7[-4]
80003c26:	f0 1f 00 04 	mcall	80003c34 <flashc_memset32+0x58>
80003c2a:	18 98       	mov	r8,r12
}
80003c2c:	10 9c       	mov	r12,r8
80003c2e:	2f ad       	sub	sp,-24
80003c30:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80003c34:	80 00       	ld.sh	r0,r0[0x0]
80003c36:	3c 38       	mov	r8,-61

80003c38 <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80003c38:	eb cd 40 80 	pushm	r7,lr
80003c3c:	1a 97       	mov	r7,sp
80003c3e:	21 bd       	sub	sp,108
80003c40:	ef 4c ff a4 	st.w	r7[-92],r12
80003c44:	ee eb ff 9c 	st.d	r7[-100],r10
80003c48:	ef 49 ff 98 	st.w	r7[-104],r9
80003c4c:	ef 68 ff 94 	st.b	r7[-108],r8
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
80003c50:	30 08       	mov	r8,0
80003c52:	30 09       	mov	r9,0
80003c54:	ee e9 ff d8 	st.d	r7[-40],r8
	StructCVPtr dest_end;
	UnionCVPtr flash_page_source_end;
	bool incomplete_flash_page_end;
	Union64 flash_dword;
	UnionVPtr tmp;
	unsigned int error_status = 0;
80003c58:	30 08       	mov	r8,0
80003c5a:	ef 48 ff ec 	st.w	r7[-20],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80003c5e:	f0 1f 00 fa 	mcall	80004044 <flashc_memset64+0x40c>
80003c62:	18 99       	mov	r9,r12
80003c64:	fc 18 80 00 	movh	r8,0x8000
80003c68:	f2 08 00 08 	add	r8,r9,r8
80003c6c:	ef 48 ff e4 	st.w	r7[-28],r8
	dest.u8ptr = dst;
80003c70:	ee f8 ff a4 	ld.w	r8,r7[-92]
80003c74:	ef 48 ff e0 	st.w	r7[-32],r8
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80003c78:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003c7c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003c80:	20 18       	sub	r8,1
80003c82:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003c86:	ef 48 ff f0 	st.w	r7[-16],r8
80003c8a:	c1 f8       	rjmp	80003cc8 <flashc_memset64+0x90>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
80003c8c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003c90:	ef 38 ff a3 	ld.ub	r8,r7[-93]
80003c94:	ee 09 00 09 	add	r9,r7,r9
80003c98:	f3 68 ff d8 	st.b	r9[-40],r8
		src >>= 8;
80003c9c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80003ca0:	b9 68       	lsl	r8,0x18
80003ca2:	ee f9 ff a0 	ld.w	r9,r7[-96]
80003ca6:	a9 89       	lsr	r9,0x8
80003ca8:	f3 e8 10 08 	or	r8,r9,r8
80003cac:	ef 48 ff a0 	st.w	r7[-96],r8
80003cb0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80003cb4:	a9 88       	lsr	r8,0x8
80003cb6:	ef 48 ff 9c 	st.w	r7[-100],r8

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
80003cba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003cbe:	20 18       	sub	r8,1
80003cc0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003cc4:	ef 48 ff f0 	st.w	r7[-16],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80003cc8:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80003ccc:	58 08       	cp.w	r8,0
80003cce:	5c 29       	cpc	r9
80003cd0:	cd e1       	brne	80003c8c <flashc_memset64+0x54>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
80003cd2:	ee f9 ff e0 	ld.w	r9,r7[-32]
80003cd6:	ee f8 ff 98 	ld.w	r8,r7[-104]
80003cda:	f2 08 00 08 	add	r8,r9,r8
80003cde:	ef 48 ff d4 	st.w	r7[-44],r8

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
80003ce2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003ce6:	e0 69 ff ff 	mov	r9,65535
80003cea:	ea 19 7f ff 	orh	r9,0x7fff
80003cee:	12 38       	cp.w	r8,r9
80003cf0:	e0 8b 00 07 	brhi	80003cfe <flashc_memset64+0xc6>
		dest.u8ptr = AVR32_FLASH;
80003cf4:	fc 18 80 00 	movh	r8,0x8000
80003cf8:	ef 48 ff e0 	st.w	r7[-32],r8
80003cfc:	c1 58       	rjmp	80003d26 <flashc_memset64+0xee>
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
80003cfe:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003d02:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003d06:	10 39       	cp.w	r9,r8
80003d08:	e0 8b 00 0f 	brhi	80003d26 <flashc_memset64+0xee>
80003d0c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003d10:	e0 69 ff ff 	mov	r9,65535
80003d14:	ea 19 80 7f 	orh	r9,0x807f
80003d18:	12 38       	cp.w	r8,r9
80003d1a:	e0 8b 00 06 	brhi	80003d26 <flashc_memset64+0xee>
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80003d1e:	fc 18 80 80 	movh	r8,0x8080
80003d22:	ef 48 ff e0 	st.w	r7[-32],r8
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
80003d26:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003d2a:	e0 69 02 00 	mov	r9,512
80003d2e:	ea 19 80 80 	orh	r9,0x8080
80003d32:	12 38       	cp.w	r8,r9
80003d34:	e0 88 00 09 	brls	80003d46 <flashc_memset64+0x10e>
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80003d38:	e0 68 02 00 	mov	r8,512
80003d3c:	ea 18 80 80 	orh	r8,0x8080
80003d40:	ef 48 ff d4 	st.w	r7[-44],r8
80003d44:	c1 38       	rjmp	80003d6a <flashc_memset64+0x132>
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
80003d46:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003d4a:	fc 19 80 80 	movh	r9,0x8080
80003d4e:	12 38       	cp.w	r8,r9
80003d50:	e0 8b 00 0d 	brhi	80003d6a <flashc_memset64+0x132>
80003d54:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003d58:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003d5c:	10 39       	cp.w	r9,r8
80003d5e:	e0 88 00 06 	brls	80003d6a <flashc_memset64+0x132>
		dest_end.u8ptr = flash_array_end.u8ptr;
80003d62:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003d66:	ef 48 ff d4 	st.w	r7[-44],r8
	}

	// Align each end of destination pointer with its natural boundary.
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
80003d6a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003d6e:	a1 c8       	cbr	r8,0x0
80003d70:	ef 48 ff cc 	st.w	r7[-52],r8
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
80003d74:	ee f8 ff cc 	ld.w	r8,r7[-52]
80003d78:	e0 18 ff fc 	andl	r8,0xfffc
80003d7c:	ef 48 ff c4 	st.w	r7[-60],r8
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));
80003d80:	ee f8 ff c4 	ld.w	r8,r7[-60]
80003d84:	e0 18 ff f8 	andl	r8,0xfff8
80003d88:	ef 48 ff bc 	st.w	r7[-68],r8

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
80003d8c:	c4 b9       	rjmp	80004022 <flashc_memset64+0x3ea>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
80003d8e:	f0 1f 00 af 	mcall	80004048 <flashc_memset64+0x410>
		error_status |= flashc_error_status;
80003d92:	fe f8 02 ba 	ld.w	r8,pc[698]
80003d96:	70 08       	ld.w	r8,r8[0x0]
80003d98:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003d9c:	f3 e8 10 08 	or	r8,r9,r8
80003da0:	ef 48 ff ec 	st.w	r7[-20],r8

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
80003da4:	ee f8 ff bc 	ld.w	r8,r7[-68]
80003da8:	ef 48 ff f8 	st.w	r7[-8],r8
80003dac:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003db0:	e0 18 fe 00 	andl	r8,0xfe00
80003db4:	f0 c8 fe 00 	sub	r8,r8,-512
80003db8:	ef 48 ff fc 	st.w	r7[-4],r8
80003dbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003dc0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003dc4:	f0 09 0d 48 	min	r8,r8,r9
80003dc8:	ef 48 ff f4 	st.w	r7[-12],r8
80003dcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
80003dd0:	ef 48 ff b4 	st.w	r7[-76],r8
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80003dd4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003dd8:	10 9a       	mov	r10,r8
80003dda:	e0 1a fe 00 	andl	r10,0xfe00
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
80003dde:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003de2:	10 99       	mov	r9,r8
80003de4:	e0 19 fe 00 	andl	r9,0xfe00
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80003de8:	30 18       	mov	r8,1
80003dea:	12 3a       	cp.w	r10,r9
80003dec:	c0 22       	brcc	80003df0 <flashc_memset64+0x1b8>
80003dee:	30 08       	mov	r8,0
80003df0:	ef 68 ff eb 	st.b	r7[-21],r8
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80003df4:	ee e8 ff d8 	ld.d	r8,r7[-40]
80003df8:	ee e9 ff ac 	st.d	r7[-84],r8

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80003dfc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003e00:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80003e04:	c5 b0       	breq	80003eba <flashc_memset64+0x282>
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80003e06:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003e0a:	e0 18 fe 00 	andl	r8,0xfe00
80003e0e:	ef 48 ff a8 	st.w	r7[-88],r8
80003e12:	c0 e8       	rjmp	80003e2e <flashc_memset64+0x1f6>
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
80003e14:	ee fa ff a8 	ld.w	r10,r7[-88]
80003e18:	ee f8 ff a8 	ld.w	r8,r7[-88]
80003e1c:	f0 e8 00 00 	ld.d	r8,r8[0]
80003e20:	f4 e9 00 00 	st.d	r10[0],r8
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
80003e24:	ee f8 ff a8 	ld.w	r8,r7[-88]
80003e28:	2f 88       	sub	r8,-8
80003e2a:	ef 48 ff a8 	st.w	r7[-88],r8
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80003e2e:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003e32:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003e36:	e0 18 ff f8 	andl	r8,0xfff8
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80003e3a:	10 39       	cp.w	r9,r8
80003e3c:	ce c3       	brcs	80003e14 <flashc_memset64+0x1dc>
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
80003e3e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003e42:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003e46:	c3 a0       	breq	80003eba <flashc_memset64+0x282>
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
80003e48:	30 08       	mov	r8,0
80003e4a:	ef 48 ff f0 	st.w	r7[-16],r8
80003e4e:	c1 38       	rjmp	80003e74 <flashc_memset64+0x23c>
					flash_dword.u8[i] = *tmp.u8ptr++;
80003e50:	ee fa ff f0 	ld.w	r10,r7[-16]
80003e54:	ee f8 ff a8 	ld.w	r8,r7[-88]
80003e58:	11 89       	ld.ub	r9,r8[0x0]
80003e5a:	5c 59       	castu.b	r9
80003e5c:	ee 0a 00 0a 	add	r10,r7,r10
80003e60:	f5 69 ff ac 	st.b	r10[-84],r9
80003e64:	2f f8       	sub	r8,-1
80003e66:	ef 48 ff a8 	st.w	r7[-88],r8
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
80003e6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e6e:	2f f8       	sub	r8,-1
80003e70:	ef 48 ff f0 	st.w	r7[-16],r8
80003e74:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003e78:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80003e7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e80:	10 39       	cp.w	r9,r8
80003e82:	fe 9b ff e7 	brhi	80003e50 <flashc_memset64+0x218>
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80003e86:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003e8a:	e0 18 ff f8 	andl	r8,0xfff8
80003e8e:	ef 48 ff e0 	st.w	r7[-32],r8

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
80003e92:	ee f9 ff e0 	ld.w	r9,r7[-32]
80003e96:	ee f8 ff bc 	ld.w	r8,r7[-68]
80003e9a:	10 39       	cp.w	r9,r8
80003e9c:	c0 f2       	brcc	80003eba <flashc_memset64+0x282>
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
80003e9e:	ee fa ff e0 	ld.w	r10,r7[-32]
80003ea2:	ee e8 ff ac 	ld.d	r8,r7[-84]
80003ea6:	f4 e9 00 00 	st.d	r10[0],r8
80003eaa:	f4 c8 ff f8 	sub	r8,r10,-8
80003eae:	ef 48 ff e0 	st.w	r7[-32],r8
					flash_dword.u64 = source.u64;
80003eb2:	ee e8 ff d8 	ld.d	r8,r7[-40]
80003eb6:	ee e9 ff ac 	st.d	r7[-84],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80003eba:	ee f8 ff b4 	ld.w	r8,r7[-76]
80003ebe:	10 99       	mov	r9,r8
80003ec0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003ec4:	f2 08 01 08 	sub	r8,r9,r8
80003ec8:	a3 58       	asr	r8,0x3
80003eca:	ef 48 ff f0 	st.w	r7[-16],r8
80003ece:	c1 08       	rjmp	80003eee <flashc_memset64+0x2b6>
			*dest.u64ptr++ = source.u64;
80003ed0:	ee fa ff e0 	ld.w	r10,r7[-32]
80003ed4:	ee e8 ff d8 	ld.d	r8,r7[-40]
80003ed8:	f4 e9 00 00 	st.d	r10[0],r8
80003edc:	f4 c8 ff f8 	sub	r8,r10,-8
80003ee0:	ef 48 ff e0 	st.w	r7[-32],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80003ee4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003ee8:	20 18       	sub	r8,1
80003eea:	ef 48 ff f0 	st.w	r7[-16],r8
80003eee:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003ef2:	58 08       	cp.w	r8,0
80003ef4:	ce e1       	brne	80003ed0 <flashc_memset64+0x298>
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
80003ef6:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80003efa:	30 08       	mov	r8,0
80003efc:	f0 09 18 00 	cp.b	r9,r8
80003f00:	c4 70       	breq	80003f8e <flashc_memset64+0x356>
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
80003f02:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003f06:	ef 48 ff a8 	st.w	r7[-88],r8

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
80003f0a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003f0e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003f12:	c3 80       	breq	80003f82 <flashc_memset64+0x34a>
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80003f14:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003f18:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003f1c:	ef 48 ff f0 	st.w	r7[-16],r8
80003f20:	c1 38       	rjmp	80003f46 <flashc_memset64+0x30e>
						flash_dword.u8[i] = *tmp.u8ptr++;
80003f22:	ee fa ff f0 	ld.w	r10,r7[-16]
80003f26:	ee f8 ff a8 	ld.w	r8,r7[-88]
80003f2a:	11 89       	ld.ub	r9,r8[0x0]
80003f2c:	5c 59       	castu.b	r9
80003f2e:	ee 0a 00 0a 	add	r10,r7,r10
80003f32:	f5 69 ff ac 	st.b	r10[-84],r9
80003f36:	2f f8       	sub	r8,-1
80003f38:	ef 48 ff a8 	st.w	r7[-88],r8
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80003f3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003f40:	2f f8       	sub	r8,-1
80003f42:	ef 48 ff f0 	st.w	r7[-16],r8
80003f46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003f4a:	58 78       	cp.w	r8,7
80003f4c:	fe 98 ff eb 	brls	80003f22 <flashc_memset64+0x2ea>
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
80003f50:	ee fa ff e0 	ld.w	r10,r7[-32]
80003f54:	ee e8 ff ac 	ld.d	r8,r7[-84]
80003f58:	f4 e9 00 00 	st.d	r10[0],r8
80003f5c:	f4 c8 ff f8 	sub	r8,r10,-8
80003f60:	ef 48 ff e0 	st.w	r7[-32],r8
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80003f64:	c1 08       	rjmp	80003f84 <flashc_memset64+0x34c>
					*tmp.u64ptr = *tmp.u64ptr;
80003f66:	ee fa ff a8 	ld.w	r10,r7[-88]
80003f6a:	ee f8 ff a8 	ld.w	r8,r7[-88]
80003f6e:	f0 e8 00 00 	ld.d	r8,r8[0]
80003f72:	f4 e9 00 00 	st.d	r10[0],r8
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80003f76:	ee f8 ff a8 	ld.w	r8,r7[-88]
80003f7a:	2f 88       	sub	r8,-8
80003f7c:	ef 48 ff a8 	st.w	r7[-88],r8
80003f80:	c0 28       	rjmp	80003f84 <flashc_memset64+0x34c>
80003f82:	d7 03       	nop
80003f84:	ee f8 ff a8 	ld.w	r8,r7[-88]
80003f88:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80003f8c:	ce d1       	brne	80003f66 <flashc_memset64+0x32e>
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
80003f8e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003f92:	fc 19 80 80 	movh	r9,0x8080
80003f96:	12 38       	cp.w	r8,r9
80003f98:	e0 8b 00 2a 	brhi	80003fec <flashc_memset64+0x3b4>
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
80003f9c:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80003fa0:	30 08       	mov	r8,0
80003fa2:	f0 09 18 00 	cp.b	r9,r8
80003fa6:	c0 d0       	breq	80003fc0 <flashc_memset64+0x388>
				flashc_erase_page(-1, false);
80003fa8:	30 0b       	mov	r11,0
80003faa:	3f fc       	mov	r12,-1
80003fac:	f0 1f 00 29 	mcall	80004050 <flashc_memset64+0x418>
				error_status |= flashc_error_status;
80003fb0:	4a 78       	lddpc	r8,8000404c <flashc_memset64+0x414>
80003fb2:	70 08       	ld.w	r8,r8[0x0]
80003fb4:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003fb8:	f3 e8 10 08 	or	r8,r9,r8
80003fbc:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_page(-1);
80003fc0:	3f fc       	mov	r12,-1
80003fc2:	f0 1f 00 25 	mcall	80004054 <flashc_memset64+0x41c>
			error_status |= flashc_error_status;
80003fc6:	4a 28       	lddpc	r8,8000404c <flashc_memset64+0x414>
80003fc8:	70 08       	ld.w	r8,r8[0x0]
80003fca:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003fce:	f3 e8 10 08 	or	r8,r9,r8
80003fd2:	ef 48 ff ec 	st.w	r7[-20],r8

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
80003fd6:	ee f9 ff e0 	ld.w	r9,r7[-32]
80003fda:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003fde:	10 39       	cp.w	r9,r8
80003fe0:	c2 13       	brcs	80004022 <flashc_memset64+0x3ea>
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80003fe2:	fc 18 80 80 	movh	r8,0x8080
80003fe6:	ef 48 ff e0 	st.w	r7[-32],r8
80003fea:	c1 c8       	rjmp	80004022 <flashc_memset64+0x3ea>
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
80003fec:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80003ff0:	30 08       	mov	r8,0
80003ff2:	f0 09 18 00 	cp.b	r9,r8
80003ff6:	c0 c0       	breq	8000400e <flashc_memset64+0x3d6>
				flashc_erase_user_page(false);
80003ff8:	30 0c       	mov	r12,0
80003ffa:	f0 1f 00 18 	mcall	80004058 <flashc_memset64+0x420>
				error_status |= flashc_error_status;
80003ffe:	49 48       	lddpc	r8,8000404c <flashc_memset64+0x414>
80004000:	70 08       	ld.w	r8,r8[0x0]
80004002:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004006:	f3 e8 10 08 	or	r8,r9,r8
8000400a:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_user_page();
8000400e:	f0 1f 00 14 	mcall	8000405c <flashc_memset64+0x424>
			error_status |= flashc_error_status;
80004012:	48 f8       	lddpc	r8,8000404c <flashc_memset64+0x414>
80004014:	70 08       	ld.w	r8,r8[0x0]
80004016:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000401a:	f3 e8 10 08 	or	r8,r9,r8
8000401e:	ef 48 ff ec 	st.w	r7[-20],r8
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
80004022:	ee f9 ff e0 	ld.w	r9,r7[-32]
80004026:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000402a:	10 39       	cp.w	r9,r8
8000402c:	fe 93 fe b1 	brlo	80003d8e <flashc_memset64+0x156>
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
80004030:	48 78       	lddpc	r8,8000404c <flashc_memset64+0x414>
80004032:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004036:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memset function does.
	return dst;
80004038:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
8000403c:	10 9c       	mov	r12,r8
8000403e:	2e 5d       	sub	sp,-108
80004040:	e3 cd 80 80 	ldm	sp++,r7,pc
80004044:	80 00       	ld.sh	r0,r0[0x0]
80004046:	38 cc       	mov	r12,-116
80004048:	80 00       	ld.sh	r0,r0[0x0]
8000404a:	39 e0       	mov	r0,-98
8000404c:	00 00       	add	r0,r0
8000404e:	00 bc       	st.h	r0++,r12
80004050:	80 00       	ld.sh	r0,r0[0x0]
80004052:	3a 40       	mov	r0,-92
80004054:	80 00       	ld.sh	r0,r0[0x0]
80004056:	3a a8       	mov	r8,-86
80004058:	80 00       	ld.sh	r0,r0[0x0]
8000405a:	3a ec       	mov	r12,-82
8000405c:	80 00       	ld.sh	r0,r0[0x0]
8000405e:	3b 28       	mov	r8,-78

80004060 <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80004060:	eb cd 40 80 	pushm	r7,lr
80004064:	1a 97       	mov	r7,sp
80004066:	20 bd       	sub	sp,44
80004068:	ef 4c ff e0 	st.w	r7[-32],r12
8000406c:	ef 4b ff dc 	st.w	r7[-36],r11
80004070:	ef 4a ff d8 	st.w	r7[-40],r10
80004074:	12 98       	mov	r8,r9
80004076:	ef 68 ff d4 	st.b	r7[-44],r8
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
8000407a:	30 08       	mov	r8,0
8000407c:	ef 48 ff f0 	st.w	r7[-16],r8
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
80004080:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004084:	ef 48 ff f8 	st.w	r7[-8],r8
	const uint8_t* src_buf=(const uint8_t*)src;
80004088:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000408c:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80004090:	ee f9 ff e0 	ld.w	r9,r7[-32]
80004094:	30 18       	mov	r8,1
80004096:	e0 6a ff ff 	mov	r10,65535
8000409a:	ea 1a 80 7f 	orh	r10,0x807f
8000409e:	14 39       	cp.w	r9,r10
800040a0:	e0 8b 00 03 	brhi	800040a6 <flashc_memcpy+0x46>
800040a4:	30 08       	mov	r8,0
800040a6:	ef 68 ff ef 	st.b	r7[-17],r8

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
800040aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800040ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040b2:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800040b6:	f2 08 01 08 	sub	r8,r9,r8
800040ba:	ef 48 ff f4 	st.w	r7[-12],r8

	while (nbytes) {
800040be:	c9 18       	rjmp	800041e0 <flashc_memcpy+0x180>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800040c0:	f0 1f 00 50 	mcall	80004200 <flashc_memcpy+0x1a0>
		error_status |= flashc_error_status;
800040c4:	4d 08       	lddpc	r8,80004204 <flashc_memcpy+0x1a4>
800040c6:	70 08       	ld.w	r8,r8[0x0]
800040c8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800040cc:	f3 e8 10 08 	or	r8,r9,r8
800040d0:	ef 48 ff f0 	st.w	r7[-16],r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
800040d4:	30 08       	mov	r8,0
800040d6:	ef 58 ff ec 	st.h	r7[-20],r8
800040da:	c4 b8       	rjmp	80004170 <flashc_memcpy+0x110>
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
800040dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800040e0:	f0 e8 00 00 	ld.d	r8,r8[0]
800040e4:	ee e9 ff e4 	st.d	r7[-28],r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
800040e8:	30 08       	mov	r8,0
800040ea:	ef 68 ff ee 	st.b	r7[-18],r8
800040ee:	c2 d8       	rjmp	80004148 <flashc_memcpy+0xe8>
				if (nbytes && (flash_add == dest_add)) {
800040f0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800040f4:	58 08       	cp.w	r8,0
800040f6:	c1 f0       	breq	80004134 <flashc_memcpy+0xd4>
800040f8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800040fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004100:	10 39       	cp.w	r9,r8
80004102:	c1 91       	brne	80004134 <flashc_memcpy+0xd4>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80004104:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80004108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000410c:	11 88       	ld.ub	r8,r8[0x0]
8000410e:	ee 09 00 09 	add	r9,r7,r9
80004112:	f3 68 ff e4 	st.b	r9[-28],r8
80004116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000411a:	2f f8       	sub	r8,-1
8000411c:	ef 48 ff fc 	st.w	r7[-4],r8
					dest_add++;
80004120:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004124:	2f f8       	sub	r8,-1
80004126:	ef 48 ff f8 	st.w	r7[-8],r8
					nbytes--;
8000412a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000412e:	20 18       	sub	r8,1
80004130:	ef 48 ff d8 	st.w	r7[-40],r8
				}
				flash_add++;
80004134:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004138:	2f f8       	sub	r8,-1
8000413a:	ef 48 ff f4 	st.w	r7[-12],r8
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
8000413e:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004142:	2f f8       	sub	r8,-1
80004144:	ef 68 ff ee 	st.b	r7[-18],r8
80004148:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000414c:	30 78       	mov	r8,7
8000414e:	f0 09 18 00 	cp.b	r9,r8
80004152:	fe 98 ff cf 	brls	800040f0 <flashc_memcpy+0x90>
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
80004156:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000415a:	20 88       	sub	r8,8
8000415c:	10 9a       	mov	r10,r8
8000415e:	ee e8 ff e4 	ld.d	r8,r7[-28]
80004162:	f4 e9 00 00 	st.d	r10[0],r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80004166:	ef 08 ff ec 	ld.sh	r8,r7[-20]
8000416a:	2f 88       	sub	r8,-8
8000416c:	ef 58 ff ec 	st.h	r7[-20],r8
80004170:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80004174:	e0 68 01 ff 	mov	r8,511
80004178:	f0 09 19 00 	cp.h	r9,r8
8000417c:	fe 98 ff b0 	brls	800040dc <flashc_memcpy+0x7c>
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
80004180:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80004184:	30 08       	mov	r8,0
80004186:	f0 09 18 00 	cp.b	r9,r8
8000418a:	c1 70       	breq	800041b8 <flashc_memcpy+0x158>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
8000418c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80004190:	30 08       	mov	r8,0
80004192:	f0 09 18 00 	cp.b	r9,r8
80004196:	c0 50       	breq	800041a0 <flashc_memcpy+0x140>
80004198:	30 0c       	mov	r12,0
8000419a:	f0 1f 00 1c 	mcall	80004208 <flashc_memcpy+0x1a8>
8000419e:	c0 58       	rjmp	800041a8 <flashc_memcpy+0x148>
800041a0:	30 0b       	mov	r11,0
800041a2:	3f fc       	mov	r12,-1
800041a4:	f0 1f 00 1a 	mcall	8000420c <flashc_memcpy+0x1ac>
			error_status |= flashc_error_status;
800041a8:	49 78       	lddpc	r8,80004204 <flashc_memcpy+0x1a4>
800041aa:	70 08       	ld.w	r8,r8[0x0]
800041ac:	ee f9 ff f0 	ld.w	r9,r7[-16]
800041b0:	f3 e8 10 08 	or	r8,r9,r8
800041b4:	ef 48 ff f0 	st.w	r7[-16],r8
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
800041b8:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800041bc:	30 08       	mov	r8,0
800041be:	f0 09 18 00 	cp.b	r9,r8
800041c2:	c0 40       	breq	800041ca <flashc_memcpy+0x16a>
800041c4:	f0 1f 00 13 	mcall	80004210 <flashc_memcpy+0x1b0>
800041c8:	c0 48       	rjmp	800041d0 <flashc_memcpy+0x170>
800041ca:	3f fc       	mov	r12,-1
800041cc:	f0 1f 00 12 	mcall	80004214 <flashc_memcpy+0x1b4>
		error_status |= flashc_error_status;
800041d0:	48 d8       	lddpc	r8,80004204 <flashc_memcpy+0x1a4>
800041d2:	70 08       	ld.w	r8,r8[0x0]
800041d4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800041d8:	f3 e8 10 08 	or	r8,r9,r8
800041dc:	ef 48 ff f0 	st.w	r7[-16],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
800041e0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800041e4:	58 08       	cp.w	r8,0
800041e6:	fe 91 ff 6d 	brne	800040c0 <flashc_memcpy+0x60>
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
800041ea:	48 78       	lddpc	r8,80004204 <flashc_memcpy+0x1a4>
800041ec:	ee f9 ff f0 	ld.w	r9,r7[-16]
800041f0:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
800041f2:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
800041f6:	10 9c       	mov	r12,r8
800041f8:	2f 5d       	sub	sp,-44
800041fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800041fe:	00 00       	add	r0,r0
80004200:	80 00       	ld.sh	r0,r0[0x0]
80004202:	39 e0       	mov	r0,-98
80004204:	00 00       	add	r0,r0
80004206:	00 bc       	st.h	r0++,r12
80004208:	80 00       	ld.sh	r0,r0[0x0]
8000420a:	3a ec       	mov	r12,-82
8000420c:	80 00       	ld.sh	r0,r0[0x0]
8000420e:	3a 40       	mov	r0,-92
80004210:	80 00       	ld.sh	r0,r0[0x0]
80004212:	3b 28       	mov	r8,-78
80004214:	80 00       	ld.sh	r0,r0[0x0]
80004216:	3a a8       	mov	r8,-86

80004218 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80004218:	eb cd 40 80 	pushm	r7,lr
8000421c:	1a 97       	mov	r7,sp
8000421e:	20 4d       	sub	sp,16
80004220:	ef 4c ff f4 	st.w	r7[-12],r12
80004224:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
80004228:	30 08       	mov	r8,0
8000422a:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
8000422e:	30 08       	mov	r8,0
80004230:	ef 48 ff fc 	st.w	r7[-4],r8
80004234:	c1 c8       	rjmp	8000426c <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80004236:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000423a:	70 19       	ld.w	r9,r8[0x4]
8000423c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004240:	70 08       	ld.w	r8,r8[0x0]
80004242:	12 9b       	mov	r11,r9
80004244:	10 9c       	mov	r12,r8
80004246:	f0 1f 00 10 	mcall	80004284 <gpio_enable_module+0x6c>
8000424a:	18 98       	mov	r8,r12
8000424c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004250:	f3 e8 10 08 	or	r8,r9,r8
80004254:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
80004258:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000425c:	2f 88       	sub	r8,-8
8000425e:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80004262:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004266:	2f f8       	sub	r8,-1
80004268:	ef 48 ff fc 	st.w	r7[-4],r8
8000426c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004270:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004274:	10 39       	cp.w	r9,r8
80004276:	ce 03       	brcs	80004236 <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
80004278:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000427c:	10 9c       	mov	r12,r8
8000427e:	2f cd       	sub	sp,-16
80004280:	e3 cd 80 80 	ldm	sp++,r7,pc
80004284:	80 00       	ld.sh	r0,r0[0x0]
80004286:	42 88       	lddsp	r8,sp[0xa0]

80004288 <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80004288:	eb cd 40 80 	pushm	r7,lr
8000428c:	1a 97       	mov	r7,sp
8000428e:	20 3d       	sub	sp,12
80004290:	ef 4c ff f8 	st.w	r7[-8],r12
80004294:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004298:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000429c:	a5 98       	lsr	r8,0x5
8000429e:	a9 78       	lsl	r8,0x9
800042a0:	e0 28 e0 00 	sub	r8,57344
800042a4:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
800042a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042ac:	58 78       	cp.w	r8,7
800042ae:	e0 8b 01 16 	brhi	800044da <gpio_enable_module_pin+0x252>
800042b2:	fe f9 02 4e 	ld.w	r9,pc[590]
800042b6:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800042ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800042c2:	30 19       	mov	r9,1
800042c4:	f2 08 09 48 	lsl	r8,r9,r8
800042c8:	10 99       	mov	r9,r8
800042ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042ce:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800042d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800042d8:	30 19       	mov	r9,1
800042da:	f2 08 09 48 	lsl	r8,r9,r8
800042de:	10 99       	mov	r9,r8
800042e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042e4:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800042e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800042ee:	30 19       	mov	r9,1
800042f0:	f2 08 09 48 	lsl	r8,r9,r8
800042f4:	10 99       	mov	r9,r8
800042f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042fa:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800042fc:	cf 18       	rjmp	800044de <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800042fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004302:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004306:	30 19       	mov	r9,1
80004308:	f2 08 09 48 	lsl	r8,r9,r8
8000430c:	10 99       	mov	r9,r8
8000430e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004312:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004314:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004318:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000431c:	30 19       	mov	r9,1
8000431e:	f2 08 09 48 	lsl	r8,r9,r8
80004322:	10 99       	mov	r9,r8
80004324:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004328:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000432a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000432e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004332:	30 19       	mov	r9,1
80004334:	f2 08 09 48 	lsl	r8,r9,r8
80004338:	10 99       	mov	r9,r8
8000433a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000433e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004340:	cc f8       	rjmp	800044de <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004342:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004346:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000434a:	30 19       	mov	r9,1
8000434c:	f2 08 09 48 	lsl	r8,r9,r8
80004350:	10 99       	mov	r9,r8
80004352:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004356:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000435c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004360:	30 19       	mov	r9,1
80004362:	f2 08 09 48 	lsl	r8,r9,r8
80004366:	10 99       	mov	r9,r8
80004368:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000436c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000436e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004372:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004376:	30 19       	mov	r9,1
80004378:	f2 08 09 48 	lsl	r8,r9,r8
8000437c:	10 99       	mov	r9,r8
8000437e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004382:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004384:	ca d8       	rjmp	800044de <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004386:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000438a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000438e:	30 19       	mov	r9,1
80004390:	f2 08 09 48 	lsl	r8,r9,r8
80004394:	10 99       	mov	r9,r8
80004396:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000439a:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000439c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043a0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800043a4:	30 19       	mov	r9,1
800043a6:	f2 08 09 48 	lsl	r8,r9,r8
800043aa:	10 99       	mov	r9,r8
800043ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043b0:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800043b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043b6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800043ba:	30 19       	mov	r9,1
800043bc:	f2 08 09 48 	lsl	r8,r9,r8
800043c0:	10 99       	mov	r9,r8
800043c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043c6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800043c8:	c8 b8       	rjmp	800044de <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800043ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800043d2:	30 19       	mov	r9,1
800043d4:	f2 08 09 48 	lsl	r8,r9,r8
800043d8:	10 99       	mov	r9,r8
800043da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043de:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800043e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043e4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800043e8:	30 19       	mov	r9,1
800043ea:	f2 08 09 48 	lsl	r8,r9,r8
800043ee:	10 99       	mov	r9,r8
800043f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043f4:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800043f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043fa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800043fe:	30 19       	mov	r9,1
80004400:	f2 08 09 48 	lsl	r8,r9,r8
80004404:	10 99       	mov	r9,r8
80004406:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000440a:	91 d9       	st.w	r8[0x34],r9
		break;
8000440c:	c6 98       	rjmp	800044de <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000440e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004412:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004416:	30 19       	mov	r9,1
80004418:	f2 08 09 48 	lsl	r8,r9,r8
8000441c:	10 99       	mov	r9,r8
8000441e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004422:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004424:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004428:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000442c:	30 19       	mov	r9,1
8000442e:	f2 08 09 48 	lsl	r8,r9,r8
80004432:	10 99       	mov	r9,r8
80004434:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004438:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000443a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000443e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004442:	30 19       	mov	r9,1
80004444:	f2 08 09 48 	lsl	r8,r9,r8
80004448:	10 99       	mov	r9,r8
8000444a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000444e:	91 d9       	st.w	r8[0x34],r9
		break;
80004450:	c4 78       	rjmp	800044de <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004452:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004456:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000445a:	30 19       	mov	r9,1
8000445c:	f2 08 09 48 	lsl	r8,r9,r8
80004460:	10 99       	mov	r9,r8
80004462:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004466:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000446c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004470:	30 19       	mov	r9,1
80004472:	f2 08 09 48 	lsl	r8,r9,r8
80004476:	10 99       	mov	r9,r8
80004478:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000447c:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000447e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004482:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004486:	30 19       	mov	r9,1
80004488:	f2 08 09 48 	lsl	r8,r9,r8
8000448c:	10 99       	mov	r9,r8
8000448e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004492:	91 d9       	st.w	r8[0x34],r9
		break;
80004494:	c2 58       	rjmp	800044de <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004496:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000449a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000449e:	30 19       	mov	r9,1
800044a0:	f2 08 09 48 	lsl	r8,r9,r8
800044a4:	10 99       	mov	r9,r8
800044a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044aa:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800044ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800044b4:	30 19       	mov	r9,1
800044b6:	f2 08 09 48 	lsl	r8,r9,r8
800044ba:	10 99       	mov	r9,r8
800044bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044c0:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800044c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044c6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800044ca:	30 19       	mov	r9,1
800044cc:	f2 08 09 48 	lsl	r8,r9,r8
800044d0:	10 99       	mov	r9,r8
800044d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044d6:	91 d9       	st.w	r8[0x34],r9
		break;
800044d8:	c0 38       	rjmp	800044de <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
800044da:	30 18       	mov	r8,1
800044dc:	c0 d8       	rjmp	800044f6 <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800044de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800044e6:	30 19       	mov	r9,1
800044e8:	f2 08 09 48 	lsl	r8,r9,r8
800044ec:	10 99       	mov	r9,r8
800044ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044f2:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
800044f4:	30 08       	mov	r8,0
}
800044f6:	10 9c       	mov	r12,r8
800044f8:	2f dd       	sub	sp,-12
800044fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800044fe:	00 00       	add	r0,r0
80004500:	80 00       	ld.sh	r0,r0[0x0]
80004502:	a2 40       	st.h	r1[0x8],r0

80004504 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80004504:	eb cd 40 80 	pushm	r7,lr
80004508:	1a 97       	mov	r7,sp
8000450a:	20 3d       	sub	sp,12
8000450c:	ef 4c ff f8 	st.w	r7[-8],r12
80004510:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004514:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004518:	a5 98       	lsr	r8,0x5
8000451a:	a9 78       	lsl	r8,0x9
8000451c:	e0 28 e0 00 	sub	r8,57344
80004520:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
80004524:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004528:	e2 18 00 08 	andl	r8,0x8,COH
8000452c:	c0 e0       	breq	80004548 <gpio_configure_pin+0x44>
		gpio_port->pders = 1 << (pin & 0x1F);
8000452e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004532:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004536:	30 19       	mov	r9,1
80004538:	f2 08 09 48 	lsl	r8,r9,r8
8000453c:	10 99       	mov	r9,r8
8000453e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004542:	f1 49 00 84 	st.w	r8[132],r9
80004546:	c0 d8       	rjmp	80004560 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
80004548:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000454c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004550:	30 19       	mov	r9,1
80004552:	f2 08 09 48 	lsl	r8,r9,r8
80004556:	10 99       	mov	r9,r8
80004558:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000455c:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
80004560:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004564:	e2 18 00 04 	andl	r8,0x4,COH
80004568:	c0 e0       	breq	80004584 <gpio_configure_pin+0x80>
		gpio_port->puers = 1 << (pin & 0x1F);
8000456a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000456e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004572:	30 19       	mov	r9,1
80004574:	f2 08 09 48 	lsl	r8,r9,r8
80004578:	10 99       	mov	r9,r8
8000457a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000457e:	f1 49 00 74 	st.w	r8[116],r9
80004582:	c0 d8       	rjmp	8000459c <gpio_configure_pin+0x98>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80004584:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004588:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000458c:	30 19       	mov	r9,1
8000458e:	f2 08 09 48 	lsl	r8,r9,r8
80004592:	10 99       	mov	r9,r8
80004594:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004598:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
8000459c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800045a0:	e2 18 00 40 	andl	r8,0x40,COH
800045a4:	c0 e0       	breq	800045c0 <gpio_configure_pin+0xbc>
		gpio_port->odmers = 1 << (pin & 0x1F);
800045a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045ae:	30 19       	mov	r9,1
800045b0:	f2 08 09 48 	lsl	r8,r9,r8
800045b4:	10 99       	mov	r9,r8
800045b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045ba:	f1 49 00 e4 	st.w	r8[228],r9
800045be:	c0 d8       	rjmp	800045d8 <gpio_configure_pin+0xd4>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
800045c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045c8:	30 19       	mov	r9,1
800045ca:	f2 08 09 48 	lsl	r8,r9,r8
800045ce:	10 99       	mov	r9,r8
800045d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045d4:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
800045d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800045dc:	e2 18 00 10 	andl	r8,0x10,COH
800045e0:	c0 e0       	breq	800045fc <gpio_configure_pin+0xf8>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
800045e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045ea:	30 19       	mov	r9,1
800045ec:	f2 08 09 48 	lsl	r8,r9,r8
800045f0:	10 99       	mov	r9,r8
800045f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045f6:	f1 49 01 04 	st.w	r8[260],r9
800045fa:	c0 d8       	rjmp	80004614 <gpio_configure_pin+0x110>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
800045fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004600:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004604:	30 19       	mov	r9,1
80004606:	f2 08 09 48 	lsl	r8,r9,r8
8000460a:	10 99       	mov	r9,r8
8000460c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004610:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
80004614:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004618:	e2 18 00 20 	andl	r8,0x20,COH
8000461c:	c0 e0       	breq	80004638 <gpio_configure_pin+0x134>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
8000461e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004622:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004626:	30 19       	mov	r9,1
80004628:	f2 08 09 48 	lsl	r8,r9,r8
8000462c:	10 99       	mov	r9,r8
8000462e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004632:	f1 49 01 14 	st.w	r8[276],r9
80004636:	c0 d8       	rjmp	80004650 <gpio_configure_pin+0x14c>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
80004638:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000463c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004640:	30 19       	mov	r9,1
80004642:	f2 08 09 48 	lsl	r8,r9,r8
80004646:	10 99       	mov	r9,r8
80004648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000464c:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80004650:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004654:	e2 18 00 80 	andl	r8,0x80,COH
80004658:	c5 a0       	breq	8000470c <gpio_configure_pin+0x208>
		if (flags & GPIO_BOTHEDGES) {
8000465a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000465e:	e2 18 01 80 	andl	r8,0x180,COH
80004662:	c1 a0       	breq	80004696 <gpio_configure_pin+0x192>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004664:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004668:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000466c:	30 19       	mov	r9,1
8000466e:	f2 08 09 48 	lsl	r8,r9,r8
80004672:	10 99       	mov	r9,r8
80004674:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004678:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000467c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004680:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004684:	30 19       	mov	r9,1
80004686:	f2 08 09 48 	lsl	r8,r9,r8
8000468a:	10 99       	mov	r9,r8
8000468c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004690:	f1 49 00 b8 	st.w	r8[184],r9
80004694:	c3 c8       	rjmp	8000470c <gpio_configure_pin+0x208>
		} else if (flags & GPIO_RISING) {
80004696:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000469a:	e2 18 02 80 	andl	r8,0x280,COH
8000469e:	c1 a0       	breq	800046d2 <gpio_configure_pin+0x1ce>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800046a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046a8:	30 19       	mov	r9,1
800046aa:	f2 08 09 48 	lsl	r8,r9,r8
800046ae:	10 99       	mov	r9,r8
800046b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046b4:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800046b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046bc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046c0:	30 19       	mov	r9,1
800046c2:	f2 08 09 48 	lsl	r8,r9,r8
800046c6:	10 99       	mov	r9,r8
800046c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046cc:	f1 49 00 b8 	st.w	r8[184],r9
800046d0:	c1 e8       	rjmp	8000470c <gpio_configure_pin+0x208>
		} else if (flags & GPIO_FALLING) {
800046d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046d6:	e2 18 03 80 	andl	r8,0x380,COH
800046da:	c1 90       	breq	8000470c <gpio_configure_pin+0x208>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800046dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046e4:	30 19       	mov	r9,1
800046e6:	f2 08 09 48 	lsl	r8,r9,r8
800046ea:	10 99       	mov	r9,r8
800046ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046f0:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
800046f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046fc:	30 19       	mov	r9,1
800046fe:	f2 08 09 48 	lsl	r8,r9,r8
80004702:	10 99       	mov	r9,r8
80004704:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004708:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
8000470c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004710:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004714:	5c 58       	castu.b	r8
80004716:	c2 c0       	breq	8000476e <gpio_configure_pin+0x26a>
		if (flags & GPIO_INIT_HIGH) {
80004718:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000471c:	e2 18 00 02 	andl	r8,0x2,COH
80004720:	c0 e0       	breq	8000473c <gpio_configure_pin+0x238>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80004722:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004726:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000472a:	30 19       	mov	r9,1
8000472c:	f2 08 09 48 	lsl	r8,r9,r8
80004730:	10 99       	mov	r9,r8
80004732:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004736:	f1 49 00 54 	st.w	r8[84],r9
8000473a:	c0 d8       	rjmp	80004754 <gpio_configure_pin+0x250>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000473c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004740:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004744:	30 19       	mov	r9,1
80004746:	f2 08 09 48 	lsl	r8,r9,r8
8000474a:	10 99       	mov	r9,r8
8000474c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004750:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80004754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004758:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000475c:	30 19       	mov	r9,1
8000475e:	f2 08 09 48 	lsl	r8,r9,r8
80004762:	10 99       	mov	r9,r8
80004764:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004768:	f1 49 00 44 	st.w	r8[68],r9
8000476c:	c0 d8       	rjmp	80004786 <gpio_configure_pin+0x282>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
8000476e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004772:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004776:	30 19       	mov	r9,1
80004778:	f2 08 09 48 	lsl	r8,r9,r8
8000477c:	10 99       	mov	r9,r8
8000477e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004782:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004786:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000478a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000478e:	30 19       	mov	r9,1
80004790:	f2 08 09 48 	lsl	r8,r9,r8
80004794:	10 99       	mov	r9,r8
80004796:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000479a:	91 19       	st.w	r8[0x4],r9
}
8000479c:	2f dd       	sub	sp,-12
8000479e:	e3 cd 80 80 	ldm	sp++,r7,pc

800047a2 <gpio_get_pin_value>:
 * \param pin The pin number.
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
800047a2:	eb cd 40 80 	pushm	r7,lr
800047a6:	1a 97       	mov	r7,sp
800047a8:	20 2d       	sub	sp,8
800047aa:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800047ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047b2:	a5 98       	lsr	r8,0x5
800047b4:	a9 78       	lsl	r8,0x9
800047b6:	e0 28 e0 00 	sub	r8,57344
800047ba:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
800047be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047c2:	71 89       	ld.w	r9,r8[0x60]
800047c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047cc:	f2 08 0a 48 	lsr	r8,r9,r8
800047d0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800047d4:	5c 58       	castu.b	r8
}
800047d6:	10 9c       	mov	r12,r8
800047d8:	2f ed       	sub	sp,-8
800047da:	e3 cd 80 80 	ldm	sp++,r7,pc

800047de <gpio_set_pin_high>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
800047de:	eb cd 40 80 	pushm	r7,lr
800047e2:	1a 97       	mov	r7,sp
800047e4:	20 2d       	sub	sp,8
800047e6:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800047ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047ee:	a5 98       	lsr	r8,0x5
800047f0:	a9 78       	lsl	r8,0x9
800047f2:	e0 28 e0 00 	sub	r8,57344
800047f6:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800047fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004802:	30 19       	mov	r9,1
80004804:	f2 08 09 48 	lsl	r8,r9,r8
80004808:	10 99       	mov	r9,r8
8000480a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000480e:	f1 49 00 54 	st.w	r8[84],r9
}
80004812:	2f ed       	sub	sp,-8
80004814:	e3 cd 80 80 	ldm	sp++,r7,pc

80004818 <gpio_set_pin_low>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
80004818:	eb cd 40 80 	pushm	r7,lr
8000481c:	1a 97       	mov	r7,sp
8000481e:	20 2d       	sub	sp,8
80004820:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004824:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004828:	a5 98       	lsr	r8,0x5
8000482a:	a9 78       	lsl	r8,0x9
8000482c:	e0 28 e0 00 	sub	r8,57344
80004830:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004834:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004838:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000483c:	30 19       	mov	r9,1
8000483e:	f2 08 09 48 	lsl	r8,r9,r8
80004842:	10 99       	mov	r9,r8
80004844:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004848:	f1 49 00 58 	st.w	r8[88],r9
}
8000484c:	2f ed       	sub	sp,-8
8000484e:	e3 cd 80 80 	ldm	sp++,r7,pc

80004852 <gpio_toggle_pin>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
80004852:	eb cd 40 80 	pushm	r7,lr
80004856:	1a 97       	mov	r7,sp
80004858:	20 2d       	sub	sp,8
8000485a:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000485e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004862:	a5 98       	lsr	r8,0x5
80004864:	a9 78       	lsl	r8,0x9
80004866:	e0 28 e0 00 	sub	r8,57344
8000486a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
8000486e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004872:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004876:	30 19       	mov	r9,1
80004878:	f2 08 09 48 	lsl	r8,r9,r8
8000487c:	10 99       	mov	r9,r8
8000487e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004882:	f1 49 00 5c 	st.w	r8[92],r9
}
80004886:	2f ed       	sub	sp,-8
80004888:	e3 cd 80 80 	ldm	sp++,r7,pc

8000488c <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000488c:	eb cd 40 80 	pushm	r7,lr
80004890:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80004892:	c0 08       	rjmp	80004892 <_unhandled_interrupt+0x6>

80004894 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80004894:	eb cd 40 80 	pushm	r7,lr
80004898:	1a 97       	mov	r7,sp
8000489a:	20 3d       	sub	sp,12
8000489c:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800048a0:	fe 78 00 00 	mov	r8,-65536
800048a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800048a8:	f2 09 11 03 	rsub	r9,r9,3
800048ac:	28 09       	sub	r9,-128
800048ae:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800048b2:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800048b6:	fe 78 00 00 	mov	r8,-65536
800048ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800048be:	2c 09       	sub	r9,-64
800048c0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800048c4:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800048c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048cc:	58 08       	cp.w	r8,0
800048ce:	c1 30       	breq	800048f4 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
800048d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800048d4:	48 b8       	lddpc	r8,80004900 <_get_interrupt_handler+0x6c>
800048d6:	a1 79       	lsl	r9,0x1
800048d8:	2f f9       	sub	r9,-1
800048da:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800048de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048e2:	f0 08 12 00 	clz	r8,r8
800048e6:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
800048ea:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800048ec:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800048f0:	70 08       	ld.w	r8,r8[0x0]
800048f2:	c0 28       	rjmp	800048f6 <_get_interrupt_handler+0x62>
800048f4:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800048f6:	10 9c       	mov	r12,r8
800048f8:	2f dd       	sub	sp,-12
800048fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800048fe:	00 00       	add	r0,r0
80004900:	80 00       	ld.sh	r0,r0[0x0]
80004902:	a2 60       	st.h	r1[0xc],r0

80004904 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80004904:	eb cd 40 80 	pushm	r7,lr
80004908:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000490a:	48 38       	lddpc	r8,80004914 <INTC_init_evba+0x10>
8000490c:	e3 b8 00 01 	mtsr	0x4,r8
}
80004910:	e3 cd 80 80 	ldm	sp++,r7,pc
80004914:	80 00       	ld.sh	r0,r0[0x0]
80004916:	a0 00       	st.h	r0[0x0],r0

80004918 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80004918:	eb cd 40 80 	pushm	r7,lr
8000491c:	1a 97       	mov	r7,sp
8000491e:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80004920:	f0 1f 00 20 	mcall	800049a0 <INTC_init_interrupts+0x88>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004924:	30 08       	mov	r8,0
80004926:	ef 48 ff f8 	st.w	r7[-8],r8
8000492a:	c3 18       	rjmp	8000498c <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000492c:	30 08       	mov	r8,0
8000492e:	ef 48 ff fc 	st.w	r7[-4],r8
80004932:	c1 48       	rjmp	8000495a <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80004934:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004938:	49 b8       	lddpc	r8,800049a4 <INTC_init_interrupts+0x8c>
8000493a:	a1 79       	lsl	r9,0x1
8000493c:	2f f9       	sub	r9,-1
8000493e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004942:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004946:	a3 68       	lsl	r8,0x2
80004948:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000494c:	49 79       	lddpc	r9,800049a8 <INTC_init_interrupts+0x90>
8000494e:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004950:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004954:	2f f8       	sub	r8,-1
80004956:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
8000495a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000495e:	49 28       	lddpc	r8,800049a4 <INTC_init_interrupts+0x8c>
80004960:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004964:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004968:	10 39       	cp.w	r9,r8
8000496a:	fe 9b ff e5 	brhi	80004934 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000496e:	fe 78 00 00 	mov	r8,-65536
80004972:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004976:	48 eb       	lddpc	r11,800049ac <INTC_init_interrupts+0x94>
80004978:	48 ea       	lddpc	r10,800049b0 <INTC_init_interrupts+0x98>
8000497a:	f6 0a 01 0a 	sub	r10,r11,r10
8000497e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004982:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004986:	2f f8       	sub	r8,-1
80004988:	ef 48 ff f8 	st.w	r7[-8],r8
8000498c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004990:	e0 48 00 2e 	cp.w	r8,46
80004994:	fe 98 ff cc 	brls	8000492c <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80004998:	2f ed       	sub	sp,-8
8000499a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000499e:	00 00       	add	r0,r0
800049a0:	80 00       	ld.sh	r0,r0[0x0]
800049a2:	49 04       	lddpc	r4,800049e0 <INTC_register_interrupt+0x2c>
800049a4:	80 00       	ld.sh	r0,r0[0x0]
800049a6:	a2 60       	st.h	r1[0xc],r0
800049a8:	80 00       	ld.sh	r0,r0[0x0]
800049aa:	48 8c       	lddpc	r12,800049c8 <INTC_register_interrupt+0x14>
800049ac:	80 00       	ld.sh	r0,r0[0x0]
800049ae:	a1 04       	ld.d	r4,r0
800049b0:	80 00       	ld.sh	r0,r0[0x0]
800049b2:	a0 00       	st.h	r0[0x0],r0

800049b4 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
800049b4:	eb cd 40 80 	pushm	r7,lr
800049b8:	1a 97       	mov	r7,sp
800049ba:	20 4d       	sub	sp,16
800049bc:	ef 4c ff f8 	st.w	r7[-8],r12
800049c0:	ef 4b ff f4 	st.w	r7[-12],r11
800049c4:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800049c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049cc:	a5 98       	lsr	r8,0x5
800049ce:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800049d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800049d6:	4a 78       	lddpc	r8,80004a70 <INTC_register_interrupt+0xbc>
800049d8:	a1 79       	lsl	r9,0x1
800049da:	2f f9       	sub	r9,-1
800049dc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800049e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049e4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049e8:	a3 68       	lsl	r8,0x2
800049ea:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800049ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800049f2:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800049f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800049f8:	58 08       	cp.w	r8,0
800049fa:	c0 c1       	brne	80004a12 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800049fc:	fe 78 00 00 	mov	r8,-65536
80004a00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004a04:	49 cb       	lddpc	r11,80004a74 <INTC_register_interrupt+0xc0>
80004a06:	49 da       	lddpc	r10,80004a78 <INTC_register_interrupt+0xc4>
80004a08:	f6 0a 01 0a 	sub	r10,r11,r10
80004a0c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004a10:	c2 d8       	rjmp	80004a6a <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80004a12:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a16:	58 18       	cp.w	r8,1
80004a18:	c0 d1       	brne	80004a32 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004a1a:	fe 78 00 00 	mov	r8,-65536
80004a1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004a22:	49 7b       	lddpc	r11,80004a7c <INTC_register_interrupt+0xc8>
80004a24:	49 5a       	lddpc	r10,80004a78 <INTC_register_interrupt+0xc4>
80004a26:	f6 0a 01 0a 	sub	r10,r11,r10
80004a2a:	bf aa       	sbr	r10,0x1e
80004a2c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004a30:	c1 d8       	rjmp	80004a6a <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80004a32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a36:	58 28       	cp.w	r8,2
80004a38:	c0 d1       	brne	80004a52 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80004a3a:	fe 78 00 00 	mov	r8,-65536
80004a3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004a42:	49 0b       	lddpc	r11,80004a80 <INTC_register_interrupt+0xcc>
80004a44:	48 da       	lddpc	r10,80004a78 <INTC_register_interrupt+0xc4>
80004a46:	f6 0a 01 0a 	sub	r10,r11,r10
80004a4a:	bf ba       	sbr	r10,0x1f
80004a4c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004a50:	c0 d8       	rjmp	80004a6a <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004a52:	fe 78 00 00 	mov	r8,-65536
80004a56:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004a5a:	48 bb       	lddpc	r11,80004a84 <INTC_register_interrupt+0xd0>
80004a5c:	48 7a       	lddpc	r10,80004a78 <INTC_register_interrupt+0xc4>
80004a5e:	f6 0a 01 0a 	sub	r10,r11,r10
80004a62:	ea 1a c0 00 	orh	r10,0xc000
80004a66:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80004a6a:	2f cd       	sub	sp,-16
80004a6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a70:	80 00       	ld.sh	r0,r0[0x0]
80004a72:	a2 60       	st.h	r1[0xc],r0
80004a74:	80 00       	ld.sh	r0,r0[0x0]
80004a76:	a1 04       	ld.d	r4,r0
80004a78:	80 00       	ld.sh	r0,r0[0x0]
80004a7a:	a0 00       	st.h	r0[0x0],r0
80004a7c:	80 00       	ld.sh	r0,r0[0x0]
80004a7e:	a1 12       	ld.d	r2,--r0
80004a80:	80 00       	ld.sh	r0,r0[0x0]
80004a82:	a1 20       	st.d	r0++,r0
80004a84:	80 00       	ld.sh	r0,r0[0x0]
80004a86:	a1 2e       	st.d	r0++,lr

80004a88 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004a88:	eb cd 40 80 	pushm	r7,lr
80004a8c:	1a 97       	mov	r7,sp
80004a8e:	20 1d       	sub	sp,4
80004a90:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004a94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a98:	e6 18 00 01 	andh	r8,0x1,COH
80004a9c:	5f 08       	sreq	r8
80004a9e:	5c 58       	castu.b	r8
}
80004aa0:	10 9c       	mov	r12,r8
80004aa2:	2f fd       	sub	sp,-4
80004aa4:	e3 cd 80 80 	ldm	sp++,r7,pc

80004aa8 <pm_set_mclk_source>:
/**
 ** Clock Functions
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
80004aa8:	eb cd 40 80 	pushm	r7,lr
80004aac:	1a 97       	mov	r7,sp
80004aae:	20 2d       	sub	sp,8
80004ab0:	ef 4c ff f8 	st.w	r7[-8],r12
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
80004ab4:	e1 b8 00 00 	mfsr	r8,0x0
80004ab8:	10 9c       	mov	r12,r8
80004aba:	f0 1f 00 0f 	mcall	80004af4 <pm_set_mclk_source+0x4c>
80004abe:	18 98       	mov	r8,r12
80004ac0:	ef 68 ff ff 	st.b	r7[-1],r8
80004ac4:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
80004ac6:	fe 78 04 00 	mov	r8,-64512
80004aca:	fc 19 aa 00 	movh	r9,0xaa00
80004ace:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.mcctrl = src;
80004ad2:	fe 78 04 00 	mov	r8,-64512
80004ad6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004ada:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80004adc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004ae0:	30 08       	mov	r8,0
80004ae2:	f0 09 18 00 	cp.b	r9,r8
80004ae6:	c0 20       	breq	80004aea <pm_set_mclk_source+0x42>
80004ae8:	d5 03       	csrf	0x10

  return PASS;
80004aea:	30 08       	mov	r8,0
}
80004aec:	10 9c       	mov	r12,r8
80004aee:	2f ed       	sub	sp,-8
80004af0:	e3 cd 80 80 	ldm	sp++,r7,pc
80004af4:	80 00       	ld.sh	r0,r0[0x0]
80004af6:	4a 88       	lddpc	r8,80004b94 <scif_start_rc8M+0x7c>

80004af8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004af8:	eb cd 40 80 	pushm	r7,lr
80004afc:	1a 97       	mov	r7,sp
80004afe:	20 1d       	sub	sp,4
80004b00:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004b04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b08:	e6 18 00 01 	andh	r8,0x1,COH
80004b0c:	5f 08       	sreq	r8
80004b0e:	5c 58       	castu.b	r8
}
80004b10:	10 9c       	mov	r12,r8
80004b12:	2f fd       	sub	sp,-4
80004b14:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b18 <scif_start_rc8M>:
/**
 ** 8MHz RCosc Functions
 **/

void scif_start_rc8M(void)
{
80004b18:	eb cd 40 80 	pushm	r7,lr
80004b1c:	1a 97       	mov	r7,sp
80004b1e:	20 3d       	sub	sp,12
  unsigned int* calibration_bits = (unsigned int*)0x80800200;
80004b20:	e0 68 02 00 	mov	r8,512
80004b24:	ea 18 80 80 	orh	r8,0x8080
80004b28:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned long tmp1;
  
  AVR32_ENTER_CRITICAL_REGION( );
80004b2c:	e1 b8 00 00 	mfsr	r8,0x0
80004b30:	10 9c       	mov	r12,r8
80004b32:	f0 1f 00 19 	mcall	80004b94 <scif_start_rc8M+0x7c>
80004b36:	18 98       	mov	r8,r12
80004b38:	ef 68 ff ff 	st.b	r7[-1],r8
80004b3c:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
80004b3e:	fe 78 08 00 	mov	r8,-63488
80004b42:	34 89       	mov	r9,72
80004b44:	ea 19 aa 00 	orh	r9,0xaa00
80004b48:	91 69       	st.w	r8[0x18],r9
   * NOTE: Datasheet says that LS byte is for 8MHz at 3.3V, and byte[2] is for 8MHz at 5V so that's the one we really want 7apr15
   */
  
//debug AVR32_SCIF.rccr8 = AVR32_SCIF_RCCR8_RCOSC8_EN_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);

  tmp1 = (*calibration_bits);				//read calibration info from flash
80004b4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b4e:	70 08       	ld.w	r8,r8[0x0]
80004b50:	ef 48 ff f8 	st.w	r7[-8],r8
  tmp1 >>= 16;								//shift down by 16 to get byte[2] 7apr15
80004b54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b58:	b1 88       	lsr	r8,0x10
80004b5a:	ef 48 ff f8 	st.w	r7[-8],r8
  tmp1 &= AVR32_SCIF_RCCR8_CALIB_MASK;		//7apr15
80004b5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b62:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80004b66:	ef 48 ff f8 	st.w	r7[-8],r8
  tmp1 |= AVR32_SCIF_RCCR8_RCOSC8_EN_MASK;  //7apr15
80004b6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b6e:	b9 a8       	sbr	r8,0x18
80004b70:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_SCIF.rccr8 = tmp1;
80004b74:	fe 78 08 00 	mov	r8,-63488
80004b78:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004b7c:	f1 49 00 48 	st.w	r8[72],r9
  
  AVR32_LEAVE_CRITICAL_REGION( );
80004b80:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004b84:	30 08       	mov	r8,0
80004b86:	f0 09 18 00 	cp.b	r9,r8
80004b8a:	c0 20       	breq	80004b8e <scif_start_rc8M+0x76>
80004b8c:	d5 03       	csrf	0x10
}
80004b8e:	2f dd       	sub	sp,-12
80004b90:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b94:	80 00       	ld.sh	r0,r0[0x0]
80004b96:	4a f8       	lddpc	r8,80004c50 <cpu_irq_restore+0x8>

80004b98 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
80004b98:	eb cd 40 80 	pushm	r7,lr
80004b9c:	1a 97       	mov	r7,sp
80004b9e:	20 2d       	sub	sp,8
80004ba0:	ef 4c ff fc 	st.w	r7[-4],r12
80004ba4:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80004ba8:	fe 78 08 00 	mov	r8,-63488
80004bac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004bb0:	2e 79       	sub	r9,-25
80004bb2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004bb6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004bba:	5c 58       	castu.b	r8
80004bbc:	c0 30       	breq	80004bc2 <scif_start_gclk+0x2a>
    return -1;
80004bbe:	3f f8       	mov	r8,-1
80004bc0:	c2 08       	rjmp	80004c00 <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80004bc2:	fe 78 08 00 	mov	r8,-63488
80004bc6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004bca:	ee fa ff f8 	ld.w	r10,r7[-8]
80004bce:	74 1a       	ld.w	r10,r10[0x4]
80004bd0:	b1 6a       	lsl	r10,0x10
80004bd2:	14 9b       	mov	r11,r10
80004bd4:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
80004bd8:	ee fa ff f8 	ld.w	r10,r7[-8]
80004bdc:	74 2a       	ld.w	r10,r10[0x8]
80004bde:	a1 7a       	lsl	r10,0x1
80004be0:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80004be4:	14 4b       	or	r11,r10
80004be6:	ee fa ff f8 	ld.w	r10,r7[-8]
80004bea:	74 0a       	ld.w	r10,r10[0x0]
80004bec:	a9 6a       	lsl	r10,0x8
80004bee:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
80004bf2:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80004bf6:	a1 aa       	sbr	r10,0x0
80004bf8:	2e 79       	sub	r9,-25
80004bfa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
80004bfe:	30 08       	mov	r8,0
}
80004c00:	10 9c       	mov	r12,r8
80004c02:	2f ed       	sub	sp,-8
80004c04:	e3 cd 80 80 	ldm	sp++,r7,pc

80004c08 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80004c08:	eb cd 40 80 	pushm	r7,lr
80004c0c:	1a 97       	mov	r7,sp
80004c0e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004c10:	e1 b8 00 00 	mfsr	r8,0x0
80004c14:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80004c18:	d3 03       	ssrf	0x10

	return flags;
80004c1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80004c1e:	10 9c       	mov	r12,r8
80004c20:	2f fd       	sub	sp,-4
80004c22:	e3 cd 80 80 	ldm	sp++,r7,pc

80004c26 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004c26:	eb cd 40 80 	pushm	r7,lr
80004c2a:	1a 97       	mov	r7,sp
80004c2c:	20 1d       	sub	sp,4
80004c2e:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004c32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c36:	e6 18 00 01 	andh	r8,0x1,COH
80004c3a:	5f 08       	sreq	r8
80004c3c:	5c 58       	castu.b	r8
}
80004c3e:	10 9c       	mov	r12,r8
80004c40:	2f fd       	sub	sp,-4
80004c42:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c46:	d7 03       	nop

80004c48 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80004c48:	eb cd 40 80 	pushm	r7,lr
80004c4c:	1a 97       	mov	r7,sp
80004c4e:	20 1d       	sub	sp,4
80004c50:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004c54:	ee fc ff fc 	ld.w	r12,r7[-4]
80004c58:	f0 1f 00 05 	mcall	80004c6c <cpu_irq_restore+0x24>
80004c5c:	18 98       	mov	r8,r12
80004c5e:	58 08       	cp.w	r8,0
80004c60:	c0 20       	breq	80004c64 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80004c62:	d5 03       	csrf	0x10
   }

	barrier();
}
80004c64:	2f fd       	sub	sp,-4
80004c66:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c6a:	00 00       	add	r0,r0
80004c6c:	80 00       	ld.sh	r0,r0[0x0]
80004c6e:	4c 26       	lddpc	r6,80004d74 <twim_master_interrupt_handler+0x104>

80004c70 <twim_master_interrupt_handler>:
/**
 * \internal
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80004c70:	eb cd 40 80 	pushm	r7,lr
80004c74:	1a 97       	mov	r7,sp
80004c76:	20 1d       	sub	sp,4
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80004c78:	4c 68       	lddpc	r8,80004d90 <twim_master_interrupt_handler+0x120>
80004c7a:	70 08       	ld.w	r8,r8[0x0]
80004c7c:	70 79       	ld.w	r9,r8[0x1c]
80004c7e:	4c 68       	lddpc	r8,80004d94 <twim_master_interrupt_handler+0x124>
80004c80:	70 08       	ld.w	r8,r8[0x0]
80004c82:	f3 e8 00 08 	and	r8,r9,r8
80004c86:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80004c8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c8e:	e2 18 07 00 	andl	r8,0x700,COH
80004c92:	c1 e0       	breq	80004cce <twim_master_interrupt_handler+0x5e>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80004c94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c98:	e2 18 03 00 	andl	r8,0x300,COH
80004c9c:	c0 30       	breq	80004ca2 <twim_master_interrupt_handler+0x32>
80004c9e:	3f c8       	mov	r8,-4
80004ca0:	c0 28       	rjmp	80004ca4 <twim_master_interrupt_handler+0x34>
80004ca2:	3f e8       	mov	r8,-2
80004ca4:	4b d9       	lddpc	r9,80004d98 <twim_master_interrupt_handler+0x128>
80004ca6:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80004ca8:	4b a8       	lddpc	r8,80004d90 <twim_master_interrupt_handler+0x120>
80004caa:	70 09       	ld.w	r9,r8[0x0]
80004cac:	72 38       	ld.w	r8,r9[0xc]
80004cae:	30 0a       	mov	r10,0
80004cb0:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80004cb4:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80004cb6:	4b 78       	lddpc	r8,80004d90 <twim_master_interrupt_handler+0x120>
80004cb8:	70 08       	ld.w	r8,r8[0x0]
80004cba:	3f f9       	mov	r9,-1
80004cbc:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80004cbe:	4b 58       	lddpc	r8,80004d90 <twim_master_interrupt_handler+0x120>
80004cc0:	70 08       	ld.w	r8,r8[0x0]
80004cc2:	3f f9       	mov	r9,-1
80004cc4:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80004cc6:	4b 69       	lddpc	r9,80004d9c <twim_master_interrupt_handler+0x12c>
80004cc8:	30 08       	mov	r8,0
80004cca:	b2 88       	st.b	r9[0x0],r8
80004ccc:	c5 e8       	rjmp	80004d88 <twim_master_interrupt_handler+0x118>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80004cce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cd2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004cd6:	5c 58       	castu.b	r8
80004cd8:	c2 00       	breq	80004d18 <twim_master_interrupt_handler+0xa8>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80004cda:	4b 28       	lddpc	r8,80004da0 <twim_master_interrupt_handler+0x130>
80004cdc:	70 09       	ld.w	r9,r8[0x0]
80004cde:	4a d8       	lddpc	r8,80004d90 <twim_master_interrupt_handler+0x120>
80004ce0:	70 08       	ld.w	r8,r8[0x0]
80004ce2:	70 58       	ld.w	r8,r8[0x14]
80004ce4:	5c 58       	castu.b	r8
80004ce6:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80004ce8:	4a e8       	lddpc	r8,80004da0 <twim_master_interrupt_handler+0x130>
80004cea:	70 08       	ld.w	r8,r8[0x0]
80004cec:	f0 c9 ff ff 	sub	r9,r8,-1
80004cf0:	4a c8       	lddpc	r8,80004da0 <twim_master_interrupt_handler+0x130>
80004cf2:	91 09       	st.w	r8[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80004cf4:	4a c8       	lddpc	r8,80004da4 <twim_master_interrupt_handler+0x134>
80004cf6:	70 08       	ld.w	r8,r8[0x0]
80004cf8:	f0 c9 00 01 	sub	r9,r8,1
80004cfc:	4a a8       	lddpc	r8,80004da4 <twim_master_interrupt_handler+0x134>
80004cfe:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80004d00:	4a 98       	lddpc	r8,80004da4 <twim_master_interrupt_handler+0x134>
80004d02:	70 08       	ld.w	r8,r8[0x0]
80004d04:	58 08       	cp.w	r8,0
80004d06:	c4 11       	brne	80004d88 <twim_master_interrupt_handler+0x118>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80004d08:	4a 28       	lddpc	r8,80004d90 <twim_master_interrupt_handler+0x120>
80004d0a:	70 08       	ld.w	r8,r8[0x0]
80004d0c:	30 19       	mov	r9,1
80004d0e:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004d10:	4a 39       	lddpc	r9,80004d9c <twim_master_interrupt_handler+0x12c>
80004d12:	30 08       	mov	r8,0
80004d14:	b2 88       	st.b	r9[0x0],r8
80004d16:	c3 98       	rjmp	80004d88 <twim_master_interrupt_handler+0x118>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80004d18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d1c:	e2 18 00 02 	andl	r8,0x2,COH
80004d20:	c3 40       	breq	80004d88 <twim_master_interrupt_handler+0x118>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80004d22:	4a 28       	lddpc	r8,80004da8 <twim_master_interrupt_handler+0x138>
80004d24:	70 08       	ld.w	r8,r8[0x0]
80004d26:	58 08       	cp.w	r8,0
80004d28:	c0 91       	brne	80004d3a <twim_master_interrupt_handler+0xca>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80004d2a:	49 a8       	lddpc	r8,80004d90 <twim_master_interrupt_handler+0x120>
80004d2c:	70 08       	ld.w	r8,r8[0x0]
80004d2e:	30 29       	mov	r9,2
80004d30:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004d32:	49 b9       	lddpc	r9,80004d9c <twim_master_interrupt_handler+0x12c>
80004d34:	30 08       	mov	r8,0
80004d36:	b2 88       	st.b	r9[0x0],r8
80004d38:	c2 88       	rjmp	80004d88 <twim_master_interrupt_handler+0x118>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80004d3a:	49 68       	lddpc	r8,80004d90 <twim_master_interrupt_handler+0x120>
80004d3c:	70 0a       	ld.w	r10,r8[0x0]
80004d3e:	49 c8       	lddpc	r8,80004dac <twim_master_interrupt_handler+0x13c>
80004d40:	70 08       	ld.w	r8,r8[0x0]
80004d42:	11 89       	ld.ub	r9,r8[0x0]
80004d44:	5c 59       	castu.b	r9
80004d46:	95 69       	st.w	r10[0x18],r9
80004d48:	f0 c9 ff ff 	sub	r9,r8,-1
80004d4c:	49 88       	lddpc	r8,80004dac <twim_master_interrupt_handler+0x13c>
80004d4e:	91 09       	st.w	r8[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80004d50:	49 68       	lddpc	r8,80004da8 <twim_master_interrupt_handler+0x138>
80004d52:	70 08       	ld.w	r8,r8[0x0]
80004d54:	f0 c9 00 01 	sub	r9,r8,1
80004d58:	49 48       	lddpc	r8,80004da8 <twim_master_interrupt_handler+0x138>
80004d5a:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80004d5c:	49 38       	lddpc	r8,80004da8 <twim_master_interrupt_handler+0x138>
80004d5e:	70 08       	ld.w	r8,r8[0x0]
80004d60:	58 08       	cp.w	r8,0
80004d62:	c1 31       	brne	80004d88 <twim_master_interrupt_handler+0x118>
				// Check for next transfer
				if(twim_next) {
80004d64:	48 e8       	lddpc	r8,80004d9c <twim_master_interrupt_handler+0x12c>
80004d66:	11 88       	ld.ub	r8,r8[0x0]
80004d68:	5c 58       	castu.b	r8
80004d6a:	c0 f0       	breq	80004d88 <twim_master_interrupt_handler+0x118>
					twim_next = false;
80004d6c:	48 c9       	lddpc	r9,80004d9c <twim_master_interrupt_handler+0x12c>
80004d6e:	30 08       	mov	r8,0
80004d70:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80004d72:	49 08       	lddpc	r8,80004db0 <twim_master_interrupt_handler+0x140>
80004d74:	70 08       	ld.w	r8,r8[0x0]
80004d76:	70 39       	ld.w	r9,r8[0xc]
80004d78:	48 c8       	lddpc	r8,80004da8 <twim_master_interrupt_handler+0x138>
80004d7a:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80004d7c:	48 d8       	lddpc	r8,80004db0 <twim_master_interrupt_handler+0x140>
80004d7e:	70 08       	ld.w	r8,r8[0x0]
80004d80:	70 28       	ld.w	r8,r8[0x8]
80004d82:	10 99       	mov	r9,r8
80004d84:	48 a8       	lddpc	r8,80004dac <twim_master_interrupt_handler+0x13c>
80004d86:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80004d88:	2f fd       	sub	sp,-4
80004d8a:	e3 cd 40 80 	ldm	sp++,r7,lr
80004d8e:	d6 03       	rete
80004d90:	00 00       	add	r0,r0
80004d92:	02 88       	andn	r8,r1
80004d94:	00 00       	add	r0,r0
80004d96:	02 a0       	st.w	r1++,r0
80004d98:	00 00       	add	r0,r0
80004d9a:	02 94       	mov	r4,r1
80004d9c:	00 00       	add	r0,r0
80004d9e:	02 a8       	st.w	r1++,r8
80004da0:	00 00       	add	r0,r0
80004da2:	02 90       	mov	r0,r1
80004da4:	00 00       	add	r0,r0
80004da6:	02 9c       	mov	r12,r1
80004da8:	00 00       	add	r0,r0
80004daa:	02 98       	mov	r8,r1
80004dac:	00 00       	add	r0,r0
80004dae:	02 8c       	andn	r12,r1
80004db0:	00 00       	add	r0,r0
80004db2:	02 a4       	st.w	r1++,r4

80004db4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80004db4:	eb cd 40 80 	pushm	r7,lr
80004db8:	1a 97       	mov	r7,sp
80004dba:	20 5d       	sub	sp,20
80004dbc:	ef 4c ff f4 	st.w	r7[-12],r12
80004dc0:	ef 4b ff f0 	st.w	r7[-16],r11
80004dc4:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
80004dc8:	30 08       	mov	r8,0
80004dca:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
80004dce:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004dd2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004dd6:	f0 09 0d 08 	divu	r8,r8,r9
80004dda:	a1 98       	lsr	r8,0x1
80004ddc:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004de0:	c0 b8       	rjmp	80004df6 <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
80004de2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004de6:	2f f8       	sub	r8,-1
80004de8:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
80004dec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004df0:	a1 98       	lsr	r8,0x1
80004df2:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004df6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004dfa:	e0 48 00 ff 	cp.w	r8,255
80004dfe:	e0 88 00 09 	brls	80004e10 <twim_set_speed+0x5c>
80004e02:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004e06:	30 78       	mov	r8,7
80004e08:	f0 09 18 00 	cp.b	r9,r8
80004e0c:	fe 98 ff eb 	brls	80004de2 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80004e10:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004e14:	30 78       	mov	r8,7
80004e16:	f0 09 18 00 	cp.b	r9,r8
80004e1a:	e0 88 00 04 	brls	80004e22 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
80004e1e:	3f 88       	mov	r8,-8
80004e20:	c1 a8       	rjmp	80004e54 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004e22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e26:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80004e2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e2e:	a1 98       	lsr	r8,0x1
80004e30:	ee fa ff f8 	ld.w	r10,r7[-8]
80004e34:	f4 08 01 08 	sub	r8,r10,r8
80004e38:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
80004e3a:	10 49       	or	r9,r8
80004e3c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004e40:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
80004e42:	10 49       	or	r9,r8
80004e44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e48:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004e4a:	10 49       	or	r9,r8
80004e4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e50:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
80004e52:	30 08       	mov	r8,0
}
80004e54:	10 9c       	mov	r12,r8
80004e56:	2f bd       	sub	sp,-20
80004e58:	e3 cd 80 80 	ldm	sp++,r7,pc

80004e5c <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80004e5c:	eb cd 40 80 	pushm	r7,lr
80004e60:	1a 97       	mov	r7,sp
80004e62:	20 4d       	sub	sp,16
80004e64:	ef 4c ff f4 	st.w	r7[-12],r12
80004e68:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80004e6c:	e1 b8 00 00 	mfsr	r8,0x0
80004e70:	10 9c       	mov	r12,r8
80004e72:	f0 1f 00 37 	mcall	80004f4c <twim_master_init+0xf0>
80004e76:	18 98       	mov	r8,r12
80004e78:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80004e7c:	4b 58       	lddpc	r8,80004f50 <twim_master_init+0xf4>
80004e7e:	30 09       	mov	r9,0
80004e80:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80004e82:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80004e86:	30 08       	mov	r8,0
80004e88:	f0 09 18 00 	cp.b	r9,r8
80004e8c:	c0 20       	breq	80004e90 <twim_master_init+0x34>
		cpu_irq_disable ();
80004e8e:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80004e90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e94:	3f f9       	mov	r9,-1
80004e96:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80004e98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e9c:	30 19       	mov	r9,1
80004e9e:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80004ea0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ea4:	e0 69 00 80 	mov	r9,128
80004ea8:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
80004eaa:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80004eae:	30 08       	mov	r8,0
80004eb0:	f0 09 18 00 	cp.b	r9,r8
80004eb4:	c0 20       	breq	80004eb8 <twim_master_init+0x5c>
		cpu_irq_enable ();
80004eb6:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80004eb8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ebc:	3f f9       	mov	r9,-1
80004ebe:	91 b9       	st.w	r8[0x2c],r9

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
80004ec0:	f0 1f 00 25 	mcall	80004f54 <twim_master_init+0xf8>
80004ec4:	18 98       	mov	r8,r12
80004ec6:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
80004eca:	30 1a       	mov	r10,1
80004ecc:	e0 6b 03 20 	mov	r11,800
80004ed0:	4a 2c       	lddpc	r12,80004f58 <twim_master_init+0xfc>
80004ed2:	f0 1f 00 23 	mcall	80004f5c <twim_master_init+0x100>
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
80004ed6:	ee fc ff fc 	ld.w	r12,r7[-4]
80004eda:	f0 1f 00 22 	mcall	80004f60 <twim_master_init+0x104>

	if (opt->smbus) {
80004ede:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004ee2:	f1 38 00 0c 	ld.ub	r8,r8[12]
80004ee6:	58 08       	cp.w	r8,0
80004ee8:	c0 90       	breq	80004efa <twim_master_init+0x9e>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80004eea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004eee:	31 09       	mov	r9,16
80004ef0:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
80004ef2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ef6:	3f f9       	mov	r9,-1
80004ef8:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80004efa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004efe:	70 09       	ld.w	r9,r8[0x0]
80004f00:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004f04:	70 18       	ld.w	r8,r8[0x4]
80004f06:	12 9a       	mov	r10,r9
80004f08:	10 9b       	mov	r11,r8
80004f0a:	ee fc ff f4 	ld.w	r12,r7[-12]
80004f0e:	f0 1f 00 16 	mcall	80004f64 <twim_master_init+0x108>
80004f12:	18 98       	mov	r8,r12
80004f14:	5b 88       	cp.w	r8,-8
80004f16:	c0 31       	brne	80004f1c <twim_master_init+0xc0>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
80004f18:	3f 88       	mov	r8,-8
80004f1a:	c1 48       	rjmp	80004f42 <twim_master_init+0xe6>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80004f1c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004f20:	70 28       	ld.w	r8,r8[0x8]
80004f22:	10 9b       	mov	r11,r8
80004f24:	ee fc ff f4 	ld.w	r12,r7[-12]
80004f28:	f0 1f 00 10 	mcall	80004f68 <twim_master_init+0x10c>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004f2c:	48 98       	lddpc	r8,80004f50 <twim_master_init+0xf4>
80004f2e:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80004f30:	5b c8       	cp.w	r8,-4
80004f32:	c0 50       	breq	80004f3c <twim_master_init+0xe0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004f34:	48 78       	lddpc	r8,80004f50 <twim_master_init+0xf4>
80004f36:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80004f38:	5b e8       	cp.w	r8,-2
80004f3a:	c0 31       	brne	80004f40 <twim_master_init+0xe4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80004f3c:	3f f8       	mov	r8,-1
80004f3e:	c0 28       	rjmp	80004f42 <twim_master_init+0xe6>
	}
	return STATUS_OK;
80004f40:	30 08       	mov	r8,0
}
80004f42:	10 9c       	mov	r12,r8
80004f44:	2f cd       	sub	sp,-16
80004f46:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f4a:	00 00       	add	r0,r0
80004f4c:	80 00       	ld.sh	r0,r0[0x0]
80004f4e:	4c 26       	lddpc	r6,80005054 <twim_read_packet+0x6c>
80004f50:	00 00       	add	r0,r0
80004f52:	02 94       	mov	r4,r1
80004f54:	80 00       	ld.sh	r0,r0[0x0]
80004f56:	4c 08       	lddpc	r8,80005054 <twim_read_packet+0x6c>
80004f58:	80 00       	ld.sh	r0,r0[0x0]
80004f5a:	4c 70       	lddpc	r0,80005074 <twim_read_packet+0x8c>
80004f5c:	80 00       	ld.sh	r0,r0[0x0]
80004f5e:	49 b4       	lddpc	r4,80004fc8 <twim_probe+0x18>
80004f60:	80 00       	ld.sh	r0,r0[0x0]
80004f62:	4c 48       	lddpc	r8,80005070 <twim_read_packet+0x88>
80004f64:	80 00       	ld.sh	r0,r0[0x0]
80004f66:	4d b4       	lddpc	r4,800050d0 <twim_read_packet+0xe8>
80004f68:	80 00       	ld.sh	r0,r0[0x0]
80004f6a:	4f b0       	lddpc	r0,80005154 <twim_read_packet+0x16c>

80004f6c <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
80004f6c:	eb cd 40 80 	pushm	r7,lr
80004f70:	1a 97       	mov	r7,sp
80004f72:	20 2d       	sub	sp,8
80004f74:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80004f78:	e1 b8 00 00 	mfsr	r8,0x0
80004f7c:	10 9c       	mov	r12,r8
80004f7e:	f0 1f 00 0c 	mcall	80004fac <twim_disable_interrupt+0x40>
80004f82:	18 98       	mov	r8,r12
80004f84:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
80004f88:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f8c:	30 08       	mov	r8,0
80004f8e:	f0 09 18 00 	cp.b	r9,r8
80004f92:	c0 20       	breq	80004f96 <twim_disable_interrupt+0x2a>
		cpu_irq_disable ();
80004f94:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80004f96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f9a:	3f f9       	mov	r9,-1
80004f9c:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
80004f9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fa2:	3f f9       	mov	r9,-1
80004fa4:	91 b9       	st.w	r8[0x2c],r9
}
80004fa6:	2f ed       	sub	sp,-8
80004fa8:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fac:	80 00       	ld.sh	r0,r0[0x0]
80004fae:	4c 26       	lddpc	r6,800050b4 <twim_read_packet+0xcc>

80004fb0 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80004fb0:	eb cd 40 80 	pushm	r7,lr
80004fb4:	1a 97       	mov	r7,sp
80004fb6:	20 3d       	sub	sp,12
80004fb8:	ef 4c ff f8 	st.w	r7[-8],r12
80004fbc:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
80004fc0:	30 08       	mov	r8,0
80004fc2:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
80004fc6:	ee cb 00 04 	sub	r11,r7,4
80004fca:	30 08       	mov	r8,0
80004fcc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004fd0:	30 0a       	mov	r10,0
80004fd2:	ee fc ff f8 	ld.w	r12,r7[-8]
80004fd6:	f0 1f 00 04 	mcall	80004fe4 <twim_probe+0x34>
80004fda:	18 98       	mov	r8,r12
}
80004fdc:	10 9c       	mov	r12,r8
80004fde:	2f dd       	sub	sp,-12
80004fe0:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fe4:	80 00       	ld.sh	r0,r0[0x0]
80004fe6:	52 a0       	stdsp	sp[0xa8],r0

80004fe8 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80004fe8:	eb cd 40 80 	pushm	r7,lr
80004fec:	1a 97       	mov	r7,sp
80004fee:	20 2d       	sub	sp,8
80004ff0:	ef 4c ff fc 	st.w	r7[-4],r12
80004ff4:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80004ff8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ffc:	30 29       	mov	r9,2
80004ffe:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80005000:	4c f8       	lddpc	r8,8000513c <twim_read_packet+0x154>
80005002:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005006:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80005008:	4c d8       	lddpc	r8,8000513c <twim_read_packet+0x154>
8000500a:	70 08       	ld.w	r8,r8[0x0]
8000500c:	10 9c       	mov	r12,r8
8000500e:	f0 1f 00 4d 	mcall	80005140 <twim_read_packet+0x158>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80005012:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005016:	70 28       	ld.w	r8,r8[0x8]
80005018:	10 99       	mov	r9,r8
8000501a:	4c b8       	lddpc	r8,80005144 <twim_read_packet+0x15c>
8000501c:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8000501e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005022:	70 39       	ld.w	r9,r8[0xc]
80005024:	4c 98       	lddpc	r8,80005148 <twim_read_packet+0x160>
80005026:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80005028:	4c 99       	lddpc	r9,8000514c <twim_read_packet+0x164>
8000502a:	30 08       	mov	r8,0
8000502c:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8000502e:	4c 98       	lddpc	r8,80005150 <twim_read_packet+0x168>
80005030:	30 09       	mov	r9,0
80005032:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
80005034:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005038:	11 f8       	ld.ub	r8,r8[0x7]
8000503a:	58 08       	cp.w	r8,0
8000503c:	c3 f0       	breq	800050ba <twim_read_packet+0xd2>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8000503e:	4c 08       	lddpc	r8,8000513c <twim_read_packet+0x154>
80005040:	70 08       	ld.w	r8,r8[0x0]
80005042:	30 19       	mov	r9,1
80005044:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
80005046:	4b e8       	lddpc	r8,8000513c <twim_read_packet+0x154>
80005048:	70 08       	ld.w	r8,r8[0x0]
8000504a:	e0 69 00 80 	mov	r9,128
8000504e:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80005050:	4b b8       	lddpc	r8,8000513c <twim_read_packet+0x154>
80005052:	70 08       	ld.w	r8,r8[0x0]
80005054:	30 29       	mov	r9,2
80005056:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80005058:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000505c:	2f c8       	sub	r8,-4
8000505e:	10 99       	mov	r9,r8
80005060:	4b d8       	lddpc	r8,80005154 <twim_read_packet+0x16c>
80005062:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80005064:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005068:	11 f8       	ld.ub	r8,r8[0x7]
8000506a:	10 99       	mov	r9,r8
8000506c:	4b b8       	lddpc	r8,80005158 <twim_read_packet+0x170>
8000506e:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80005070:	4b b8       	lddpc	r8,8000515c <twim_read_packet+0x174>
80005072:	e0 69 07 03 	mov	r9,1795
80005076:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005078:	4b 18       	lddpc	r8,8000513c <twim_read_packet+0x154>
8000507a:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000507c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005080:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005082:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005086:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000508a:	13 f9       	ld.ub	r9,r9[0x7]
8000508c:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000508e:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005092:	e8 19 a0 00 	orl	r9,0xa000
80005096:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80005098:	4a 98       	lddpc	r8,8000513c <twim_read_packet+0x154>
8000509a:	70 08       	ld.w	r8,r8[0x0]
8000509c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800050a0:	72 09       	ld.w	r9,r9[0x0]
800050a2:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
800050a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800050aa:	72 39       	ld.w	r9,r9[0xc]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800050ac:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
800050ae:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
800050b2:	e8 19 e0 01 	orl	r9,0xe001
800050b6:	91 49       	st.w	r8[0x10],r9
800050b8:	c1 88       	rjmp	800050e8 <twim_read_packet+0x100>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
800050ba:	4a 88       	lddpc	r8,80005158 <twim_read_packet+0x170>
800050bc:	30 09       	mov	r9,0
800050be:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
800050c0:	4a 78       	lddpc	r8,8000515c <twim_read_packet+0x174>
800050c2:	e0 69 07 01 	mov	r9,1793
800050c6:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800050c8:	49 d8       	lddpc	r8,8000513c <twim_read_packet+0x154>
800050ca:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
800050cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800050d0:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800050d2:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
800050d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800050da:	72 39       	ld.w	r9,r9[0xc]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800050dc:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
800050de:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800050e2:	e8 19 e0 01 	orl	r9,0xe001
800050e6:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800050e8:	49 58       	lddpc	r8,8000513c <twim_read_packet+0x154>
800050ea:	70 08       	ld.w	r8,r8[0x0]
800050ec:	49 c9       	lddpc	r9,8000515c <twim_read_packet+0x174>
800050ee:	72 09       	ld.w	r9,r9[0x0]
800050f0:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800050f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800050f6:	30 19       	mov	r9,1
800050f8:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800050fa:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
800050fc:	c0 38       	rjmp	80005102 <twim_read_packet+0x11a>
		cpu_relax();
800050fe:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80005102:	49 48       	lddpc	r8,80005150 <twim_read_packet+0x168>
80005104:	70 08       	ld.w	r8,r8[0x0]
80005106:	58 08       	cp.w	r8,0
80005108:	c0 61       	brne	80005114 <twim_read_packet+0x12c>
8000510a:	f0 1f 00 16 	mcall	80005160 <twim_read_packet+0x178>
8000510e:	18 98       	mov	r8,r12
80005110:	58 08       	cp.w	r8,0
80005112:	cf 60       	breq	800050fe <twim_read_packet+0x116>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005114:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005118:	30 29       	mov	r9,2
8000511a:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000511c:	48 d8       	lddpc	r8,80005150 <twim_read_packet+0x168>
8000511e:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80005120:	5b c8       	cp.w	r8,-4
80005122:	c0 50       	breq	8000512c <twim_read_packet+0x144>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005124:	48 b8       	lddpc	r8,80005150 <twim_read_packet+0x168>
80005126:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80005128:	5b e8       	cp.w	r8,-2
8000512a:	c0 31       	brne	80005130 <twim_read_packet+0x148>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8000512c:	3f f8       	mov	r8,-1
8000512e:	c0 28       	rjmp	80005132 <twim_read_packet+0x14a>
	}
	return STATUS_OK;
80005130:	30 08       	mov	r8,0
}
80005132:	10 9c       	mov	r12,r8
80005134:	2f ed       	sub	sp,-8
80005136:	e3 cd 80 80 	ldm	sp++,r7,pc
8000513a:	00 00       	add	r0,r0
8000513c:	00 00       	add	r0,r0
8000513e:	02 88       	andn	r8,r1
80005140:	80 00       	ld.sh	r0,r0[0x0]
80005142:	4f 6c       	lddpc	r12,80005318 <twim_write+0x78>
80005144:	00 00       	add	r0,r0
80005146:	02 90       	mov	r0,r1
80005148:	00 00       	add	r0,r0
8000514a:	02 9c       	mov	r12,r1
8000514c:	00 00       	add	r0,r0
8000514e:	02 a8       	st.w	r1++,r8
80005150:	00 00       	add	r0,r0
80005152:	02 94       	mov	r4,r1
80005154:	00 00       	add	r0,r0
80005156:	02 8c       	andn	r12,r1
80005158:	00 00       	add	r0,r0
8000515a:	02 98       	mov	r8,r1
8000515c:	00 00       	add	r0,r0
8000515e:	02 a0       	st.w	r1++,r0
80005160:	80 00       	ld.sh	r0,r0[0x0]
80005162:	53 a4       	stdsp	sp[0xe8],r4

80005164 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80005164:	eb cd 40 80 	pushm	r7,lr
80005168:	1a 97       	mov	r7,sp
8000516a:	20 2d       	sub	sp,8
8000516c:	ef 4c ff fc 	st.w	r7[-4],r12
80005170:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005174:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005178:	30 19       	mov	r9,1
8000517a:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8000517c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005180:	e0 69 00 80 	mov	r9,128
80005184:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000518a:	30 29       	mov	r9,2
8000518c:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000518e:	4b c8       	lddpc	r8,8000527c <twim_write_packet+0x118>
80005190:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005194:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80005196:	4b a8       	lddpc	r8,8000527c <twim_write_packet+0x118>
80005198:	70 08       	ld.w	r8,r8[0x0]
8000519a:	10 9c       	mov	r12,r8
8000519c:	f0 1f 00 39 	mcall	80005280 <twim_write_packet+0x11c>
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800051a0:	4b 98       	lddpc	r8,80005284 <twim_write_packet+0x120>
800051a2:	30 09       	mov	r9,0
800051a4:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800051a6:	4b 98       	lddpc	r8,80005288 <twim_write_packet+0x124>
800051a8:	e0 69 07 02 	mov	r9,1794
800051ac:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
800051ae:	4b 89       	lddpc	r9,8000528c <twim_write_packet+0x128>
800051b0:	30 08       	mov	r8,0
800051b2:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
800051b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051b8:	11 f8       	ld.ub	r8,r8[0x7]
800051ba:	58 08       	cp.w	r8,0
800051bc:	c1 50       	breq	800051e6 <twim_write_packet+0x82>
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
800051be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051c2:	2f c8       	sub	r8,-4
800051c4:	10 99       	mov	r9,r8
800051c6:	4b 38       	lddpc	r8,80005290 <twim_write_packet+0x12c>
800051c8:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
800051ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051ce:	11 f8       	ld.ub	r8,r8[0x7]
800051d0:	10 99       	mov	r9,r8
800051d2:	4b 18       	lddpc	r8,80005294 <twim_write_packet+0x130>
800051d4:	91 09       	st.w	r8[0x0],r9
		// set next transfer to true
		twim_next = true;
800051d6:	4a e9       	lddpc	r9,8000528c <twim_write_packet+0x128>
800051d8:	30 18       	mov	r8,1
800051da:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
800051dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800051e0:	4a e8       	lddpc	r8,80005298 <twim_write_packet+0x134>
800051e2:	91 09       	st.w	r8[0x0],r9
800051e4:	c0 c8       	rjmp	800051fc <twim_write_packet+0x98>
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
800051e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051ea:	70 28       	ld.w	r8,r8[0x8]
800051ec:	10 99       	mov	r9,r8
800051ee:	4a 98       	lddpc	r8,80005290 <twim_write_packet+0x12c>
800051f0:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
800051f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051f6:	70 39       	ld.w	r9,r8[0xc]
800051f8:	4a 78       	lddpc	r8,80005294 <twim_write_packet+0x130>
800051fa:	91 09       	st.w	r8[0x0],r9
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| ((package->length + package->addr_length)
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
800051fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005200:	70 08       	ld.w	r8,r8[0x0]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005202:	f0 09 15 01 	lsl	r9,r8,0x1
			| ((package->length + package->addr_length)
80005206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000520a:	70 3a       	ld.w	r10,r8[0xc]
8000520c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005210:	11 f8       	ld.ub	r8,r8[0x7]
80005212:	f4 08 00 08 	add	r8,r10,r8
80005216:	b1 68       	lsl	r8,0x10
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
80005218:	f3 e8 10 08 	or	r8,r9,r8
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000521c:	10 99       	mov	r9,r8
8000521e:	e8 19 e0 00 	orl	r9,0xe000
80005222:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005226:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80005228:	49 58       	lddpc	r8,8000527c <twim_write_packet+0x118>
8000522a:	70 08       	ld.w	r8,r8[0x0]
8000522c:	49 79       	lddpc	r9,80005288 <twim_write_packet+0x124>
8000522e:	72 09       	ld.w	r9,r9[0x0]
80005230:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80005232:	49 38       	lddpc	r8,8000527c <twim_write_packet+0x118>
80005234:	70 08       	ld.w	r8,r8[0x0]
80005236:	30 19       	mov	r9,1
80005238:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8000523a:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8000523c:	c0 38       	rjmp	80005242 <twim_write_packet+0xde>
		cpu_relax();
8000523e:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80005242:	49 18       	lddpc	r8,80005284 <twim_write_packet+0x120>
80005244:	70 08       	ld.w	r8,r8[0x0]
80005246:	58 08       	cp.w	r8,0
80005248:	c0 61       	brne	80005254 <twim_write_packet+0xf0>
8000524a:	f0 1f 00 15 	mcall	8000529c <twim_write_packet+0x138>
8000524e:	18 98       	mov	r8,r12
80005250:	58 08       	cp.w	r8,0
80005252:	cf 60       	breq	8000523e <twim_write_packet+0xda>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005254:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005258:	30 29       	mov	r9,2
8000525a:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000525c:	48 a8       	lddpc	r8,80005284 <twim_write_packet+0x120>
8000525e:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80005260:	5b c8       	cp.w	r8,-4
80005262:	c0 50       	breq	8000526c <twim_write_packet+0x108>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005264:	48 88       	lddpc	r8,80005284 <twim_write_packet+0x120>
80005266:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80005268:	5b e8       	cp.w	r8,-2
8000526a:	c0 31       	brne	80005270 <twim_write_packet+0x10c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8000526c:	3f f8       	mov	r8,-1
8000526e:	c0 28       	rjmp	80005272 <twim_write_packet+0x10e>
	}
	return STATUS_OK;
80005270:	30 08       	mov	r8,0
}
80005272:	10 9c       	mov	r12,r8
80005274:	2f ed       	sub	sp,-8
80005276:	e3 cd 80 80 	ldm	sp++,r7,pc
8000527a:	00 00       	add	r0,r0
8000527c:	00 00       	add	r0,r0
8000527e:	02 88       	andn	r8,r1
80005280:	80 00       	ld.sh	r0,r0[0x0]
80005282:	4f 6c       	lddpc	r12,80005458 <usart_set_async_baudrate+0x64>
80005284:	00 00       	add	r0,r0
80005286:	02 94       	mov	r4,r1
80005288:	00 00       	add	r0,r0
8000528a:	02 a0       	st.w	r1++,r0
8000528c:	00 00       	add	r0,r0
8000528e:	02 a8       	st.w	r1++,r8
80005290:	00 00       	add	r0,r0
80005292:	02 8c       	andn	r12,r1
80005294:	00 00       	add	r0,r0
80005296:	02 98       	mov	r8,r1
80005298:	00 00       	add	r0,r0
8000529a:	02 a4       	st.w	r1++,r4
8000529c:	80 00       	ld.sh	r0,r0[0x0]
8000529e:	53 a4       	stdsp	sp[0xe8],r4

800052a0 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
800052a0:	eb cd 40 80 	pushm	r7,lr
800052a4:	1a 97       	mov	r7,sp
800052a6:	20 5d       	sub	sp,20
800052a8:	ef 4c ff fc 	st.w	r7[-4],r12
800052ac:	ef 4b ff f8 	st.w	r7[-8],r11
800052b0:	ef 4a ff f4 	st.w	r7[-12],r10
800052b4:	ef 49 ff f0 	st.w	r7[-16],r9
800052b8:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800052bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052c0:	30 19       	mov	r9,1
800052c2:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800052c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052c8:	e0 69 00 80 	mov	r9,128
800052cc:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800052ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052d2:	30 29       	mov	r9,2
800052d4:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
800052d6:	4a c8       	lddpc	r8,80005384 <twim_write+0xe4>
800052d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800052dc:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
800052de:	4a a8       	lddpc	r8,80005384 <twim_write+0xe4>
800052e0:	70 08       	ld.w	r8,r8[0x0]
800052e2:	10 9c       	mov	r12,r8
800052e4:	f0 1f 00 29 	mcall	80005388 <twim_write+0xe8>
	// get a pointer to applicative data
	twim_tx_data = buffer;
800052e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800052ec:	4a 88       	lddpc	r8,8000538c <twim_write+0xec>
800052ee:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
800052f0:	4a 88       	lddpc	r8,80005390 <twim_write+0xf0>
800052f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800052f6:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
800052f8:	4a 79       	lddpc	r9,80005394 <twim_write+0xf4>
800052fa:	30 08       	mov	r8,0
800052fc:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800052fe:	4a 78       	lddpc	r8,80005398 <twim_write+0xf8>
80005300:	30 09       	mov	r9,0
80005302:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80005304:	4a 08       	lddpc	r8,80005384 <twim_write+0xe4>
80005306:	70 08       	ld.w	r8,r8[0x0]
80005308:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000530c:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005310:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005314:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
80005316:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
80005318:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000531c:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8000531e:	f5 e9 10 09 	or	r9,r10,r9
80005322:	e8 19 e0 00 	orl	r9,0xe000
80005326:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80005328:	49 d8       	lddpc	r8,8000539c <twim_write+0xfc>
8000532a:	e0 69 03 02 	mov	r9,770
8000532e:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80005330:	49 58       	lddpc	r8,80005384 <twim_write+0xe4>
80005332:	70 08       	ld.w	r8,r8[0x0]
80005334:	49 a9       	lddpc	r9,8000539c <twim_write+0xfc>
80005336:	72 09       	ld.w	r9,r9[0x0]
80005338:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8000533a:	49 38       	lddpc	r8,80005384 <twim_write+0xe4>
8000533c:	70 08       	ld.w	r8,r8[0x0]
8000533e:	30 19       	mov	r9,1
80005340:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
80005342:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80005344:	c0 38       	rjmp	8000534a <twim_write+0xaa>
		cpu_relax();
80005346:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8000534a:	49 48       	lddpc	r8,80005398 <twim_write+0xf8>
8000534c:	70 08       	ld.w	r8,r8[0x0]
8000534e:	58 08       	cp.w	r8,0
80005350:	c0 61       	brne	8000535c <twim_write+0xbc>
80005352:	f0 1f 00 14 	mcall	800053a0 <twim_write+0x100>
80005356:	18 98       	mov	r8,r12
80005358:	58 08       	cp.w	r8,0
8000535a:	cf 60       	breq	80005346 <twim_write+0xa6>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000535c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005360:	30 29       	mov	r9,2
80005362:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005364:	48 d8       	lddpc	r8,80005398 <twim_write+0xf8>
80005366:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80005368:	5b c8       	cp.w	r8,-4
8000536a:	c0 50       	breq	80005374 <twim_write+0xd4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000536c:	48 b8       	lddpc	r8,80005398 <twim_write+0xf8>
8000536e:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80005370:	5b e8       	cp.w	r8,-2
80005372:	c0 31       	brne	80005378 <twim_write+0xd8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005374:	3f f8       	mov	r8,-1
80005376:	c0 28       	rjmp	8000537a <twim_write+0xda>
	}
	return STATUS_OK;
80005378:	30 08       	mov	r8,0
}
8000537a:	10 9c       	mov	r12,r8
8000537c:	2f bd       	sub	sp,-20
8000537e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005382:	00 00       	add	r0,r0
80005384:	00 00       	add	r0,r0
80005386:	02 88       	andn	r8,r1
80005388:	80 00       	ld.sh	r0,r0[0x0]
8000538a:	4f 6c       	lddpc	r12,80005560 <usart_init_rs232+0x24>
8000538c:	00 00       	add	r0,r0
8000538e:	02 8c       	andn	r12,r1
80005390:	00 00       	add	r0,r0
80005392:	02 98       	mov	r8,r1
80005394:	00 00       	add	r0,r0
80005396:	02 a8       	st.w	r1++,r8
80005398:	00 00       	add	r0,r0
8000539a:	02 94       	mov	r4,r1
8000539c:	00 00       	add	r0,r0
8000539e:	02 a0       	st.w	r1++,r0
800053a0:	80 00       	ld.sh	r0,r0[0x0]
800053a2:	53 a4       	stdsp	sp[0xe8],r4

800053a4 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
800053a4:	eb cd 40 80 	pushm	r7,lr
800053a8:	1a 97       	mov	r7,sp
800053aa:	20 1d       	sub	sp,4
	uint32_t status = twim_inst->sr;
800053ac:	48 98       	lddpc	r8,800053d0 <twim_status+0x2c>
800053ae:	70 08       	ld.w	r8,r8[0x0]
800053b0:	70 78       	ld.w	r8,r8[0x1c]
800053b2:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
800053b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053ba:	e2 18 00 10 	andl	r8,0x10,COH
800053be:	c0 30       	breq	800053c4 <twim_status+0x20>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif
		) {
		return 1;
800053c0:	30 18       	mov	r8,1
800053c2:	c0 28       	rjmp	800053c6 <twim_status+0x22>
	} else {
		return 0;
800053c4:	30 08       	mov	r8,0
	}
}
800053c6:	10 9c       	mov	r12,r8
800053c8:	2f fd       	sub	sp,-4
800053ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800053ce:	00 00       	add	r0,r0
800053d0:	00 00       	add	r0,r0
800053d2:	02 88       	andn	r8,r1

800053d4 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800053d4:	eb cd 40 80 	pushm	r7,lr
800053d8:	1a 97       	mov	r7,sp
800053da:	20 1d       	sub	sp,4
800053dc:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800053e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053e4:	e6 18 00 01 	andh	r8,0x1,COH
800053e8:	5f 08       	sreq	r8
800053ea:	5c 58       	castu.b	r8
}
800053ec:	10 9c       	mov	r12,r8
800053ee:	2f fd       	sub	sp,-4
800053f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800053f4 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
800053f4:	eb cd 40 80 	pushm	r7,lr
800053f8:	1a 97       	mov	r7,sp
800053fa:	20 7d       	sub	sp,28
800053fc:	ef 4c ff ec 	st.w	r7[-20],r12
80005400:	ef 4b ff e8 	st.w	r7[-24],r11
80005404:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80005408:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000540c:	f0 09 15 04 	lsl	r9,r8,0x4
80005410:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005414:	10 39       	cp.w	r9,r8
80005416:	e0 8b 00 04 	brhi	8000541e <usart_set_async_baudrate+0x2a>
8000541a:	31 08       	mov	r8,16
8000541c:	c0 28       	rjmp	80005420 <usart_set_async_baudrate+0x2c>
8000541e:	30 88       	mov	r8,8
80005420:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80005424:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005428:	f0 09 15 03 	lsl	r9,r8,0x3
8000542c:	ee fa ff f0 	ld.w	r10,r7[-16]
80005430:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005434:	f4 08 02 48 	mul	r8,r10,r8
80005438:	a1 98       	lsr	r8,0x1
8000543a:	f2 08 00 08 	add	r8,r9,r8
8000543e:	ee fa ff f0 	ld.w	r10,r7[-16]
80005442:	ee f9 ff e8 	ld.w	r9,r7[-24]
80005446:	f4 09 02 49 	mul	r9,r10,r9
8000544a:	f0 09 0d 08 	divu	r8,r8,r9
8000544e:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80005452:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005456:	a3 98       	lsr	r8,0x3
80005458:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
8000545c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005460:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80005464:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80005468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000546c:	58 08       	cp.w	r8,0
8000546e:	c0 70       	breq	8000547c <usart_set_async_baudrate+0x88>
80005470:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005474:	e0 48 ff ff 	cp.w	r8,65535
80005478:	e0 88 00 04 	brls	80005480 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
8000547c:	30 18       	mov	r8,1
8000547e:	c2 08       	rjmp	800054be <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80005480:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005484:	70 18       	ld.w	r8,r8[0x4]
80005486:	10 99       	mov	r9,r8
80005488:	e4 19 ff f7 	andh	r9,0xfff7
8000548c:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80005490:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005494:	59 08       	cp.w	r8,16
80005496:	c0 40       	breq	8000549e <usart_set_async_baudrate+0xaa>
80005498:	e8 68 00 00 	mov	r8,524288
8000549c:	c0 28       	rjmp	800054a0 <usart_set_async_baudrate+0xac>
8000549e:	30 08       	mov	r8,0
800054a0:	10 49       	or	r9,r8
800054a2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800054a6:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
800054a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054ac:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800054b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054b4:	10 49       	or	r9,r8
800054b6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800054ba:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
800054bc:	30 08       	mov	r8,0
}
800054be:	10 9c       	mov	r12,r8
800054c0:	2f 9d       	sub	sp,-28
800054c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800054c6:	d7 03       	nop

800054c8 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
800054c8:	eb cd 40 80 	pushm	r7,lr
800054cc:	1a 97       	mov	r7,sp
800054ce:	20 2d       	sub	sp,8
800054d0:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800054d4:	e1 b8 00 00 	mfsr	r8,0x0
800054d8:	10 9c       	mov	r12,r8
800054da:	f0 1f 00 18 	mcall	80005538 <usart_reset+0x70>
800054de:	18 98       	mov	r8,r12
800054e0:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800054e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800054e8:	30 08       	mov	r8,0
800054ea:	f0 09 18 00 	cp.b	r9,r8
800054ee:	c0 20       	breq	800054f2 <usart_reset+0x2a>
800054f0:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800054f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054f6:	3f f9       	mov	r9,-1
800054f8:	91 39       	st.w	r8[0xc],r9
  usart->csr;
800054fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054fe:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80005500:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005504:	30 08       	mov	r8,0
80005506:	f0 09 18 00 	cp.b	r9,r8
8000550a:	c0 20       	breq	8000550e <usart_reset+0x46>
8000550c:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8000550e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005512:	30 09       	mov	r9,0
80005514:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80005516:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000551a:	30 09       	mov	r9,0
8000551c:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
8000551e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005522:	30 09       	mov	r9,0
80005524:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80005526:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000552a:	ea 69 61 0c 	mov	r9,680204
8000552e:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80005530:	2f ed       	sub	sp,-8
80005532:	e3 cd 80 80 	ldm	sp++,r7,pc
80005536:	00 00       	add	r0,r0
80005538:	80 00       	ld.sh	r0,r0[0x0]
8000553a:	53 d4       	stdsp	sp[0xf4],r4

8000553c <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8000553c:	eb cd 40 80 	pushm	r7,lr
80005540:	1a 97       	mov	r7,sp
80005542:	20 3d       	sub	sp,12
80005544:	ef 4c ff fc 	st.w	r7[-4],r12
80005548:	ef 4b ff f8 	st.w	r7[-8],r11
8000554c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80005550:	ee fc ff fc 	ld.w	r12,r7[-4]
80005554:	f0 1f 00 54 	mcall	800056a4 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80005558:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000555c:	58 08       	cp.w	r8,0
8000555e:	c3 90       	breq	800055d0 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80005560:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005564:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80005566:	30 48       	mov	r8,4
80005568:	f0 09 18 00 	cp.b	r9,r8
8000556c:	e0 88 00 32 	brls	800055d0 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80005570:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005574:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80005576:	30 98       	mov	r8,9
80005578:	f0 09 18 00 	cp.b	r9,r8
8000557c:	e0 8b 00 2a 	brhi	800055d0 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80005580:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005584:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80005586:	30 78       	mov	r8,7
80005588:	f0 09 18 00 	cp.b	r9,r8
8000558c:	e0 8b 00 22 	brhi	800055d0 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80005590:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005594:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80005596:	e0 68 01 01 	mov	r8,257
8000559a:	f0 09 19 00 	cp.h	r9,r8
8000559e:	e0 8b 00 19 	brhi	800055d0 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
800055a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800055a6:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800055aa:	30 38       	mov	r8,3
800055ac:	f0 09 18 00 	cp.b	r9,r8
800055b0:	e0 8b 00 10 	brhi	800055d0 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800055b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800055b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800055bc:	70 08       	ld.w	r8,r8[0x0]
800055be:	12 9a       	mov	r10,r9
800055c0:	10 9b       	mov	r11,r8
800055c2:	ee fc ff fc 	ld.w	r12,r7[-4]
800055c6:	f0 1f 00 39 	mcall	800056a8 <usart_init_rs232+0x16c>
800055ca:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800055cc:	58 18       	cp.w	r8,1
800055ce:	c0 31       	brne	800055d4 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
800055d0:	30 18       	mov	r8,1
800055d2:	c6 48       	rjmp	8000569a <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
800055d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800055d8:	11 c9       	ld.ub	r9,r8[0x4]
800055da:	30 98       	mov	r8,9
800055dc:	f0 09 18 00 	cp.b	r9,r8
800055e0:	c0 a1       	brne	800055f4 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800055e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055e6:	70 18       	ld.w	r8,r8[0x4]
800055e8:	10 99       	mov	r9,r8
800055ea:	b1 b9       	sbr	r9,0x11
800055ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055f0:	91 19       	st.w	r8[0x4],r9
800055f2:	c0 d8       	rjmp	8000560c <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800055f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055f8:	70 19       	ld.w	r9,r8[0x4]
800055fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800055fe:	11 c8       	ld.ub	r8,r8[0x4]
80005600:	20 58       	sub	r8,5
80005602:	a7 68       	lsl	r8,0x6
80005604:	10 49       	or	r9,r8
80005606:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000560a:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000560c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005610:	70 19       	ld.w	r9,r8[0x4]
80005612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005616:	11 d8       	ld.ub	r8,r8[0x5]
80005618:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8000561c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005620:	f1 38 00 08 	ld.ub	r8,r8[8]
80005624:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80005626:	f5 e8 10 08 	or	r8,r10,r8
8000562a:	10 49       	or	r9,r8
8000562c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005630:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80005632:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005636:	90 39       	ld.sh	r9,r8[0x6]
80005638:	30 28       	mov	r8,2
8000563a:	f0 09 19 00 	cp.h	r9,r8
8000563e:	e0 88 00 14 	brls	80005666 <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80005642:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005646:	70 18       	ld.w	r8,r8[0x4]
80005648:	10 99       	mov	r9,r8
8000564a:	ad b9       	sbr	r9,0xd
8000564c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005650:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80005652:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005656:	90 38       	ld.sh	r8,r8[0x6]
80005658:	5c 78       	castu.h	r8
8000565a:	20 28       	sub	r8,2
8000565c:	10 99       	mov	r9,r8
8000565e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005662:	91 a9       	st.w	r8[0x28],r9
80005664:	c0 d8       	rjmp	8000567e <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80005666:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000566a:	70 19       	ld.w	r9,r8[0x4]
8000566c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005670:	90 38       	ld.sh	r8,r8[0x6]
80005672:	5c 78       	castu.h	r8
80005674:	ad 68       	lsl	r8,0xc
80005676:	10 49       	or	r9,r8
80005678:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000567c:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8000567e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005682:	70 18       	ld.w	r8,r8[0x4]
80005684:	10 99       	mov	r9,r8
80005686:	e0 19 ff f0 	andl	r9,0xfff0
8000568a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000568e:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80005690:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005694:	35 09       	mov	r9,80
80005696:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80005698:	30 08       	mov	r8,0
}
8000569a:	10 9c       	mov	r12,r8
8000569c:	2f dd       	sub	sp,-12
8000569e:	e3 cd 80 80 	ldm	sp++,r7,pc
800056a2:	00 00       	add	r0,r0
800056a4:	80 00       	ld.sh	r0,r0[0x0]
800056a6:	54 c8       	stdsp	sp[0x130],r8
800056a8:	80 00       	ld.sh	r0,r0[0x0]
800056aa:	53 f4       	stdsp	sp[0xfc],r4

800056ac <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
800056ac:	eb cd 40 80 	pushm	r7,lr
800056b0:	1a 97       	mov	r7,sp
800056b2:	20 3d       	sub	sp,12
800056b4:	ef 4c ff f8 	st.w	r7[-8],r12
800056b8:	ef 4b ff f4 	st.w	r7[-12],r11
800056bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056c0:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800056c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056c8:	70 58       	ld.w	r8,r8[0x14]
800056ca:	e2 18 00 02 	andl	r8,0x2,COH
800056ce:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
800056d0:	58 08       	cp.w	r8,0
800056d2:	c0 a0       	breq	800056e6 <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800056d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800056d8:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
800056dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056e0:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
800056e2:	30 08       	mov	r8,0
800056e4:	c0 28       	rjmp	800056e8 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
800056e6:	30 28       	mov	r8,2
}
800056e8:	10 9c       	mov	r12,r8
800056ea:	2f dd       	sub	sp,-12
800056ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800056f0 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800056f0:	eb cd 40 80 	pushm	r7,lr
800056f4:	1a 97       	mov	r7,sp
800056f6:	20 3d       	sub	sp,12
800056f8:	ef 4c ff f8 	st.w	r7[-8],r12
800056fc:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80005700:	e0 68 27 10 	mov	r8,10000
80005704:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80005708:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000570c:	58 08       	cp.w	r8,0
8000570e:	5f 08       	sreq	r8
80005710:	5c 58       	castu.b	r8
80005712:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005716:	20 19       	sub	r9,1
80005718:	ef 49 ff fc 	st.w	r7[-4],r9
8000571c:	58 08       	cp.w	r8,0
8000571e:	c0 30       	breq	80005724 <usart_putchar+0x34>
80005720:	3f f8       	mov	r8,-1
80005722:	c0 b8       	rjmp	80005738 <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80005724:	ee fb ff f4 	ld.w	r11,r7[-12]
80005728:	ee fc ff f8 	ld.w	r12,r7[-8]
8000572c:	f0 1f 00 05 	mcall	80005740 <usart_putchar+0x50>
80005730:	18 98       	mov	r8,r12
80005732:	58 08       	cp.w	r8,0
80005734:	ce a1       	brne	80005708 <usart_putchar+0x18>

  return USART_SUCCESS;
80005736:	30 08       	mov	r8,0
}
80005738:	10 9c       	mov	r12,r8
8000573a:	2f dd       	sub	sp,-12
8000573c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005740:	80 00       	ld.sh	r0,r0[0x0]
80005742:	56 ac       	stdsp	sp[0x1a8],r12

80005744 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80005744:	eb cd 40 80 	pushm	r7,lr
80005748:	1a 97       	mov	r7,sp
8000574a:	20 2d       	sub	sp,8
8000574c:	ef 4c ff fc 	st.w	r7[-4],r12
80005750:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
80005754:	c0 e8       	rjmp	80005770 <usart_write_line+0x2c>
    usart_putchar(usart, *string++);
80005756:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000575a:	11 88       	ld.ub	r8,r8[0x0]
8000575c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005760:	2f f9       	sub	r9,-1
80005762:	ef 49 ff f8 	st.w	r7[-8],r9
80005766:	10 9b       	mov	r11,r8
80005768:	ee fc ff fc 	ld.w	r12,r7[-4]
8000576c:	f0 1f 00 05 	mcall	80005780 <usart_write_line+0x3c>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80005770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005774:	11 88       	ld.ub	r8,r8[0x0]
80005776:	58 08       	cp.w	r8,0
80005778:	ce f1       	brne	80005756 <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
8000577a:	2f ed       	sub	sp,-8
8000577c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005780:	80 00       	ld.sh	r0,r0[0x0]
80005782:	56 f0       	stdsp	sp[0x1bc],r0

80005784 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80005784:	48 cd       	lddpc	sp,800057b4 <udata_clear_loop_end+0x2>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
80005786:	48 d0       	lddpc	r0,800057b8 <udata_clear_loop_end+0x6>
  mtsr    AVR32_EVBA, r0
80005788:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000578c:	d5 53       	csrf	0x15

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
8000578e:	48 c0       	lddpc	r0,800057bc <udata_clear_loop_end+0xa>
  lda.w   r1, _edata
80005790:	48 c1       	lddpc	r1,800057c0 <udata_clear_loop_end+0xe>
  cp      r0, r1
80005792:	02 30       	cp.w	r0,r1
  brhs    idata_load_loop_end
80005794:	c0 62       	brcc	800057a0 <idata_load_loop_end>
  lda.w   r2, _data_lma
80005796:	48 c2       	lddpc	r2,800057c4 <udata_clear_loop_end+0x12>

80005798 <idata_load_loop>:
idata_load_loop:
  ld.d    r4, r2++
80005798:	a5 05       	ld.d	r4,r2++
  st.d    r0++, r4
8000579a:	a1 24       	st.d	r0++,r4
  cp      r0, r1
8000579c:	02 30       	cp.w	r0,r1
  brlo    idata_load_loop
8000579e:	cf d3       	brcs	80005798 <idata_load_loop>

800057a0 <idata_load_loop_end>:
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800057a0:	48 a0       	lddpc	r0,800057c8 <udata_clear_loop_end+0x16>
  lda.w   r1, _end
800057a2:	48 b1       	lddpc	r1,800057cc <udata_clear_loop_end+0x1a>
  cp      r0, r1
800057a4:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800057a6:	c0 62       	brcc	800057b2 <udata_clear_loop_end>
  mov     r2, 0
800057a8:	30 02       	mov	r2,0
  mov     r3, 0
800057aa:	30 03       	mov	r3,0

800057ac <udata_clear_loop>:
udata_clear_loop:
  st.d    r0++, r2
800057ac:	a1 22       	st.d	r0++,r2
  cp      r0, r1
800057ae:	02 30       	cp.w	r0,r1
  brlo    udata_clear_loop
800057b0:	cf e3       	brcs	800057ac <udata_clear_loop>

800057b2 <udata_clear_loop_end>:
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800057b2:	48 8f       	lddpc	pc,800057d0 <udata_clear_loop_end+0x1e>
800057b4:	00 01       	add	r1,r0
800057b6:	00 00       	add	r0,r0
800057b8:	80 00       	ld.sh	r0,r0[0x0]
800057ba:	a0 00       	st.h	r0[0x0],r0
800057bc:	00 00       	add	r0,r0
800057be:	00 08       	add	r8,r0
800057c0:	00 00       	add	r0,r0
800057c2:	00 b8       	st.h	r0++,r8
800057c4:	80 00       	ld.sh	r0,r0[0x0]
800057c6:	a4 50       	st.h	r2[0xa],r0
800057c8:	00 00       	add	r0,r0
800057ca:	00 b8       	st.h	r0++,r8
800057cc:	00 00       	add	r0,r0
800057ce:	0b 60       	ld.uh	r0,--r5
800057d0:	80 00       	ld.sh	r0,r0[0x0]
800057d2:	82 94       	ld.uh	r4,r1[0x2]

800057d4 <twi_master_read>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
800057d4:	eb cd 40 80 	pushm	r7,lr
800057d8:	1a 97       	mov	r7,sp
800057da:	20 2d       	sub	sp,8
800057dc:	ef 4c ff fc 	st.w	r7[-4],r12
800057e0:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_read_packet (twim, package));
800057e4:	ee fb ff f8 	ld.w	r11,r7[-8]
800057e8:	ee fc ff fc 	ld.w	r12,r7[-4]
800057ec:	f0 1f 00 04 	mcall	800057fc <twi_master_read+0x28>
800057f0:	18 98       	mov	r8,r12
}
800057f2:	10 9c       	mov	r12,r8
800057f4:	2f ed       	sub	sp,-8
800057f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800057fa:	00 00       	add	r0,r0
800057fc:	80 00       	ld.sh	r0,r0[0x0]
800057fe:	4f e8       	lddpc	r8,800059f4 <PCA9952_read_reg+0x144>

80005800 <twi_master_write>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   if all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005800:	eb cd 40 80 	pushm	r7,lr
80005804:	1a 97       	mov	r7,sp
80005806:	20 2d       	sub	sp,8
80005808:	ef 4c ff fc 	st.w	r7[-4],r12
8000580c:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_write_packet (twim, package));
80005810:	ee fb ff f8 	ld.w	r11,r7[-8]
80005814:	ee fc ff fc 	ld.w	r12,r7[-4]
80005818:	f0 1f 00 04 	mcall	80005828 <twi_master_write+0x28>
8000581c:	18 98       	mov	r8,r12
}
8000581e:	10 9c       	mov	r12,r8
80005820:	2f ed       	sub	sp,-8
80005822:	e3 cd 80 80 	ldm	sp++,r7,pc
80005826:	00 00       	add	r0,r0
80005828:	80 00       	ld.sh	r0,r0[0x0]
8000582a:	51 64       	stdsp	sp[0x58],r4

8000582c <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
8000582c:	eb cd 40 80 	pushm	r7,lr
80005830:	1a 97       	mov	r7,sp
80005832:	20 9d       	sub	sp,36
80005834:	16 99       	mov	r9,r11
80005836:	14 98       	mov	r8,r10
80005838:	18 9a       	mov	r10,r12
8000583a:	ef 6a ff e4 	st.b	r7[-28],r10
8000583e:	ef 69 ff e0 	st.b	r7[-32],r9
80005842:	ef 68 ff dc 	st.b	r7[-36],r8
uint8_t pack[2];
twi_package_t twi_package;

	pack[0] = reg_index;
80005846:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000584a:	ef 68 ff fc 	st.b	r7[-4],r8
	pack[1] = data;
8000584e:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80005852:	ef 68 ff fd 	st.b	r7[-3],r8

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005856:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000585a:	30 08       	mov	r8,0
8000585c:	f0 09 18 00 	cp.b	r9,r8
80005860:	c0 51       	brne	8000586a <PCA9952_write_reg+0x3e>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005862:	36 08       	mov	r8,96
80005864:	ef 48 ff e8 	st.w	r7[-24],r8
80005868:	c0 a8       	rjmp	8000587c <PCA9952_write_reg+0x50>
	}
	else if (topBotn == LED_BOTTOM)
8000586a:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000586e:	30 18       	mov	r8,1
80005870:	f0 09 18 00 	cp.b	r9,r8
80005874:	c0 41       	brne	8000587c <PCA9952_write_reg+0x50>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005876:	36 18       	mov	r8,97
80005878:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	twi_package.addr_length = 0;
8000587c:	30 08       	mov	r8,0
8000587e:	ef 68 ff ef 	st.b	r7[-17],r8
	twi_package.buffer = &pack;
80005882:	ee c8 00 04 	sub	r8,r7,4
80005886:	ef 48 ff f0 	st.w	r7[-16],r8
	twi_package.length = sizeof(pack);
8000588a:	30 28       	mov	r8,2
8000588c:	ef 48 ff f4 	st.w	r7[-12],r8

	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005890:	ee c8 00 18 	sub	r8,r7,24
80005894:	10 9b       	mov	r11,r8
80005896:	fe 7c 38 00 	mov	r12,-51200
8000589a:	f0 1f 00 05 	mcall	800058ac <PCA9952_write_reg+0x80>
8000589e:	18 98       	mov	r8,r12
800058a0:	58 08       	cp.w	r8,0
800058a2:	cf 71       	brne	80005890 <PCA9952_write_reg+0x64>

	return;
}
800058a4:	2f 7d       	sub	sp,-36
800058a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800058aa:	00 00       	add	r0,r0
800058ac:	80 00       	ld.sh	r0,r0[0x0]
800058ae:	58 00       	cp.w	r0,0

800058b0 <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
800058b0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800058b4:	1a 97       	mov	r7,sp
800058b6:	21 3d       	sub	sp,76
800058b8:	18 99       	mov	r9,r12
800058ba:	16 98       	mov	r8,r11
800058bc:	ef 69 ff b8 	st.b	r7[-72],r9
800058c0:	ef 68 ff b4 	st.b	r7[-76],r8
uint8_t data;
twi_package_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
800058c4:	ef 39 ff b8 	ld.ub	r9,r7[-72]
800058c8:	30 08       	mov	r8,0
800058ca:	f0 09 18 00 	cp.b	r9,r8
800058ce:	c0 51       	brne	800058d8 <PCA9952_read_reg+0x28>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
800058d0:	36 08       	mov	r8,96
800058d2:	ef 48 ff c8 	st.w	r7[-56],r8
800058d6:	c0 a8       	rjmp	800058ea <PCA9952_read_reg+0x3a>
	}
	else if (topBotn == LED_BOTTOM)
800058d8:	ef 39 ff b8 	ld.ub	r9,r7[-72]
800058dc:	30 18       	mov	r8,1
800058de:	f0 09 18 00 	cp.b	r9,r8
800058e2:	c0 41       	brne	800058ea <PCA9952_read_reg+0x3a>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
800058e4:	36 18       	mov	r8,97
800058e6:	ef 48 ff c8 	st.w	r7[-56],r8
	}

	twi_package.addr_length = 0;
800058ea:	30 08       	mov	r8,0
800058ec:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &reg_index;
800058f0:	ee c8 00 4c 	sub	r8,r7,76
800058f4:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
800058f8:	30 18       	mov	r8,1
800058fa:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
800058fe:	ee c8 00 38 	sub	r8,r7,56
80005902:	10 9b       	mov	r11,r8
80005904:	fe 7c 38 00 	mov	r12,-51200
80005908:	f0 1f 00 5e 	mcall	80005a80 <PCA9952_read_reg+0x1d0>
8000590c:	18 98       	mov	r8,r12
8000590e:	58 08       	cp.w	r8,0
80005910:	cf 71       	brne	800058fe <PCA9952_read_reg+0x4e>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	cpu_delay_us(20, cpu_hz);
80005912:	4d d8       	lddpc	r8,80005a84 <PCA9952_read_reg+0x1d4>
80005914:	70 08       	ld.w	r8,r8[0x0]
80005916:	31 49       	mov	r9,20
80005918:	ef 49 ff e4 	st.w	r7[-28],r9
8000591c:	ef 48 ff e0 	st.w	r7[-32],r8
80005920:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005924:	ef 48 ff ec 	st.w	r7[-20],r8
80005928:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000592c:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80005930:	ee f0 ff ec 	ld.w	r0,r7[-20]
80005934:	30 01       	mov	r1,0
80005936:	ee f2 ff e8 	ld.w	r2,r7[-24]
8000593a:	30 03       	mov	r3,0
8000593c:	e2 02 02 4a 	mul	r10,r1,r2
80005940:	e6 00 02 48 	mul	r8,r3,r0
80005944:	10 0a       	add	r10,r8
80005946:	e0 02 06 48 	mulu.d	r8,r0,r2
8000594a:	12 0a       	add	r10,r9
8000594c:	14 99       	mov	r9,r10
8000594e:	ee 7a 42 3f 	mov	r10,999999
80005952:	30 0b       	mov	r11,0
80005954:	f0 0a 00 0a 	add	r10,r8,r10
80005958:	f2 0b 00 4b 	adc	r11,r9,r11
8000595c:	ee 78 42 40 	mov	r8,1000000
80005960:	30 09       	mov	r9,0
80005962:	f0 1f 00 4a 	mcall	80005a88 <PCA9952_read_reg+0x1d8>
80005966:	14 98       	mov	r8,r10
80005968:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
8000596a:	ef 48 ff f4 	st.w	r7[-12],r8
8000596e:	ee c8 00 44 	sub	r8,r7,68
80005972:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005976:	e1 b8 00 42 	mfsr	r8,0x108
8000597a:	10 99       	mov	r9,r8
8000597c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005980:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005982:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005986:	70 09       	ld.w	r9,r8[0x0]
80005988:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000598c:	10 09       	add	r9,r8
8000598e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005992:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005994:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005998:	30 08       	mov	r8,0
8000599a:	f3 68 00 08 	st.b	r9[8],r8
8000599e:	ee c8 00 44 	sub	r8,r7,68
800059a2:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800059a6:	e1 b8 00 42 	mfsr	r8,0x108
800059aa:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800059ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059b2:	f1 39 00 08 	ld.ub	r9,r8[8]
800059b6:	30 28       	mov	r8,2
800059b8:	f0 09 18 00 	cp.b	r9,r8
800059bc:	c0 31       	brne	800059c2 <PCA9952_read_reg+0x112>
    return false;
800059be:	30 08       	mov	r8,0
800059c0:	c4 38       	rjmp	80005a46 <PCA9952_read_reg+0x196>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800059c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059c6:	f1 39 00 08 	ld.ub	r9,r8[8]
800059ca:	30 18       	mov	r8,1
800059cc:	f0 09 18 00 	cp.b	r9,r8
800059d0:	c0 31       	brne	800059d6 <PCA9952_read_reg+0x126>
    return true;
800059d2:	30 18       	mov	r8,1
800059d4:	c3 98       	rjmp	80005a46 <PCA9952_read_reg+0x196>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800059d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059da:	70 09       	ld.w	r9,r8[0x0]
800059dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059e0:	70 18       	ld.w	r8,r8[0x4]
800059e2:	10 39       	cp.w	r9,r8
800059e4:	e0 88 00 1a 	brls	80005a18 <PCA9952_read_reg+0x168>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800059e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059ec:	70 08       	ld.w	r8,r8[0x0]
800059ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800059f2:	10 39       	cp.w	r9,r8
800059f4:	c1 02       	brcc	80005a14 <PCA9952_read_reg+0x164>
800059f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059fa:	70 18       	ld.w	r8,r8[0x4]
800059fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a00:	10 39       	cp.w	r9,r8
80005a02:	e0 88 00 09 	brls	80005a14 <PCA9952_read_reg+0x164>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005a06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005a0a:	30 18       	mov	r8,1
80005a0c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005a10:	30 18       	mov	r8,1
80005a12:	c1 a8       	rjmp	80005a46 <PCA9952_read_reg+0x196>
    }
    return false;
80005a14:	30 08       	mov	r8,0
80005a16:	c1 88       	rjmp	80005a46 <PCA9952_read_reg+0x196>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005a18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a1c:	70 08       	ld.w	r8,r8[0x0]
80005a1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a22:	10 39       	cp.w	r9,r8
80005a24:	c0 93       	brcs	80005a36 <PCA9952_read_reg+0x186>
80005a26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a2a:	70 18       	ld.w	r8,r8[0x4]
80005a2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a30:	10 39       	cp.w	r9,r8
80005a32:	e0 88 00 09 	brls	80005a44 <PCA9952_read_reg+0x194>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005a36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005a3a:	30 18       	mov	r8,1
80005a3c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005a40:	30 18       	mov	r8,1
80005a42:	c0 28       	rjmp	80005a46 <PCA9952_read_reg+0x196>
    }
    return false;
80005a44:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005a46:	58 08       	cp.w	r8,0
80005a48:	ca b0       	breq	8000599e <PCA9952_read_reg+0xee>

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
80005a4a:	30 08       	mov	r8,0
80005a4c:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &data;
80005a50:	ee c8 00 21 	sub	r8,r7,33
80005a54:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
80005a58:	30 18       	mov	r8,1
80005a5a:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_read(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005a5e:	ee c8 00 38 	sub	r8,r7,56
80005a62:	10 9b       	mov	r11,r8
80005a64:	fe 7c 38 00 	mov	r12,-51200
80005a68:	f0 1f 00 09 	mcall	80005a8c <PCA9952_read_reg+0x1dc>
80005a6c:	18 98       	mov	r8,r12
80005a6e:	58 08       	cp.w	r8,0
80005a70:	cf 71       	brne	80005a5e <PCA9952_read_reg+0x1ae>

	return data;
80005a72:	ef 38 ff df 	ld.ub	r8,r7[-33]
}
80005a76:	10 9c       	mov	r12,r8
80005a78:	2e dd       	sub	sp,-76
80005a7a:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005a7e:	00 00       	add	r0,r0
80005a80:	80 00       	ld.sh	r0,r0[0x0]
80005a82:	58 00       	cp.w	r0,0
80005a84:	00 00       	add	r0,r0
80005a86:	02 ac       	st.w	r1++,r12
80005a88:	80 00       	ld.sh	r0,r0[0x0]
80005a8a:	9c 1a       	ld.sh	r10,lr[0x2]
80005a8c:	80 00       	ld.sh	r0,r0[0x0]
80005a8e:	57 d4       	stdsp	sp[0x1f4],r4

80005a90 <PCA9952_init>:


void PCA9952_init(void) //7apr15
{
80005a90:	eb cd 40 80 	pushm	r7,lr
80005a94:	1a 97       	mov	r7,sp
80005a96:	20 1d       	sub	sp,4
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
80005a98:	30 0a       	mov	r10,0
80005a9a:	30 0b       	mov	r11,0
80005a9c:	30 0c       	mov	r12,0
80005a9e:	f0 1f 00 32 	mcall	80005b64 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
80005aa2:	30 0a       	mov	r10,0
80005aa4:	30 1b       	mov	r11,1
80005aa6:	30 0c       	mov	r12,0
80005aa8:	f0 1f 00 2f 	mcall	80005b64 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
80005aac:	36 4a       	mov	r10,100
80005aae:	34 3b       	mov	r11,67
80005ab0:	30 0c       	mov	r12,0
80005ab2:	f0 1f 00 2d 	mcall	80005b64 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
80005ab6:	30 0a       	mov	r10,0
80005ab8:	30 2b       	mov	r11,2
80005aba:	30 0c       	mov	r12,0
80005abc:	f0 1f 00 2a 	mcall	80005b64 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
80005ac0:	30 0a       	mov	r10,0
80005ac2:	30 3b       	mov	r11,3
80005ac4:	30 0c       	mov	r12,0
80005ac6:	f0 1f 00 28 	mcall	80005b64 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
80005aca:	30 0a       	mov	r10,0
80005acc:	30 4b       	mov	r11,4
80005ace:	30 0c       	mov	r12,0
80005ad0:	f0 1f 00 25 	mcall	80005b64 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
80005ad4:	30 0a       	mov	r10,0
80005ad6:	30 5b       	mov	r11,5
80005ad8:	30 0c       	mov	r12,0
80005ada:	f0 1f 00 23 	mcall	80005b64 <PCA9952_init+0xd4>

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
80005ade:	34 4b       	mov	r11,68
80005ae0:	30 0c       	mov	r12,0
80005ae2:	f0 1f 00 22 	mcall	80005b68 <PCA9952_init+0xd8>
80005ae6:	18 98       	mov	r8,r12
80005ae8:	ef 68 ff ff 	st.b	r7[-1],r8
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
80005aec:	34 5b       	mov	r11,69
80005aee:	30 0c       	mov	r12,0
80005af0:	f0 1f 00 1e 	mcall	80005b68 <PCA9952_init+0xd8>
80005af4:	18 98       	mov	r8,r12
80005af6:	ef 68 ff fe 	st.b	r7[-2],r8

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
80005afa:	30 0a       	mov	r10,0
80005afc:	30 0b       	mov	r11,0
80005afe:	30 1c       	mov	r12,1
80005b00:	f0 1f 00 19 	mcall	80005b64 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
80005b04:	30 0a       	mov	r10,0
80005b06:	30 1b       	mov	r11,1
80005b08:	30 1c       	mov	r12,1
80005b0a:	f0 1f 00 17 	mcall	80005b64 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
80005b0e:	36 4a       	mov	r10,100
80005b10:	34 3b       	mov	r11,67
80005b12:	30 1c       	mov	r12,1
80005b14:	f0 1f 00 14 	mcall	80005b64 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
80005b18:	30 0a       	mov	r10,0
80005b1a:	30 2b       	mov	r11,2
80005b1c:	30 1c       	mov	r12,1
80005b1e:	f0 1f 00 12 	mcall	80005b64 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
80005b22:	30 0a       	mov	r10,0
80005b24:	30 3b       	mov	r11,3
80005b26:	30 1c       	mov	r12,1
80005b28:	f0 1f 00 0f 	mcall	80005b64 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
80005b2c:	30 0a       	mov	r10,0
80005b2e:	30 4b       	mov	r11,4
80005b30:	30 1c       	mov	r12,1
80005b32:	f0 1f 00 0d 	mcall	80005b64 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
80005b36:	30 0a       	mov	r10,0
80005b38:	30 5b       	mov	r11,5
80005b3a:	30 1c       	mov	r12,1
80005b3c:	f0 1f 00 0a 	mcall	80005b64 <PCA9952_init+0xd4>

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
80005b40:	34 4b       	mov	r11,68
80005b42:	30 1c       	mov	r12,1
80005b44:	f0 1f 00 09 	mcall	80005b68 <PCA9952_init+0xd8>
80005b48:	18 98       	mov	r8,r12
80005b4a:	ef 68 ff fd 	st.b	r7[-3],r8
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
80005b4e:	34 5b       	mov	r11,69
80005b50:	30 1c       	mov	r12,1
80005b52:	f0 1f 00 06 	mcall	80005b68 <PCA9952_init+0xd8>
80005b56:	18 98       	mov	r8,r12
80005b58:	ef 68 ff fc 	st.b	r7[-4],r8

}
80005b5c:	2f fd       	sub	sp,-4
80005b5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b62:	00 00       	add	r0,r0
80005b64:	80 00       	ld.sh	r0,r0[0x0]
80005b66:	58 2c       	cp.w	r12,2
80005b68:	80 00       	ld.sh	r0,r0[0x0]
80005b6a:	58 b0       	cp.w	r0,11

80005b6c <PCA9952_channel>:


void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn);
void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn)
{
80005b6c:	eb cd 40 80 	pushm	r7,lr
80005b70:	1a 97       	mov	r7,sp
80005b72:	20 5d       	sub	sp,20
80005b74:	16 99       	mov	r9,r11
80005b76:	14 98       	mov	r8,r10
80005b78:	18 9a       	mov	r10,r12
80005b7a:	ef 6a ff f4 	st.b	r7[-12],r10
80005b7e:	ef 69 ff f0 	st.b	r7[-16],r9
80005b82:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char regIdx, regPos, regShadow, maskVal, writeVal;
	
	regIdx = (channel / 4); //LEDOUT0 controls channels 0..3, LEDOUT1 controls channels 4..7 etc.
80005b86:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005b8a:	a3 88       	lsr	r8,0x2
80005b8c:	ef 68 ff fb 	st.b	r7[-5],r8
	regPos = (channel % 4);
80005b90:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005b94:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80005b98:	ef 68 ff fc 	st.b	r7[-4],r8
	
	switch(regIdx)
80005b9c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005ba0:	58 18       	cp.w	r8,1
80005ba2:	c1 50       	breq	80005bcc <PCA9952_channel+0x60>
80005ba4:	e0 89 00 05 	brgt	80005bae <PCA9952_channel+0x42>
80005ba8:	58 08       	cp.w	r8,0
80005baa:	c0 70       	breq	80005bb8 <PCA9952_channel+0x4c>
80005bac:	c2 d8       	rjmp	80005c06 <PCA9952_channel+0x9a>
80005bae:	58 28       	cp.w	r8,2
80005bb0:	c1 80       	breq	80005be0 <PCA9952_channel+0x74>
80005bb2:	58 38       	cp.w	r8,3
80005bb4:	c2 00       	breq	80005bf4 <PCA9952_channel+0x88>
80005bb6:	c2 88       	rjmp	80005c06 <PCA9952_channel+0x9a>
	{
		case 0:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT0);
80005bb8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005bbc:	30 2b       	mov	r11,2
80005bbe:	10 9c       	mov	r12,r8
80005bc0:	f0 1f 00 49 	mcall	80005ce4 <PCA9952_channel+0x178>
80005bc4:	18 98       	mov	r8,r12
80005bc6:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80005bca:	c1 e8       	rjmp	80005c06 <PCA9952_channel+0x9a>
		case 1:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT1);
80005bcc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005bd0:	30 3b       	mov	r11,3
80005bd2:	10 9c       	mov	r12,r8
80005bd4:	f0 1f 00 44 	mcall	80005ce4 <PCA9952_channel+0x178>
80005bd8:	18 98       	mov	r8,r12
80005bda:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80005bde:	c1 48       	rjmp	80005c06 <PCA9952_channel+0x9a>
		case 2:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT2);
80005be0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005be4:	30 4b       	mov	r11,4
80005be6:	10 9c       	mov	r12,r8
80005be8:	f0 1f 00 3f 	mcall	80005ce4 <PCA9952_channel+0x178>
80005bec:	18 98       	mov	r8,r12
80005bee:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80005bf2:	c0 a8       	rjmp	80005c06 <PCA9952_channel+0x9a>
		case 3:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT3);
80005bf4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005bf8:	30 5b       	mov	r11,5
80005bfa:	10 9c       	mov	r12,r8
80005bfc:	f0 1f 00 3a 	mcall	80005ce4 <PCA9952_channel+0x178>
80005c00:	18 98       	mov	r8,r12
80005c02:	ef 68 ff fd 	st.b	r7[-3],r8
			break;		
	}

	maskVal = 0xFF << (regPos * 2);
80005c06:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005c0a:	a1 78       	lsl	r8,0x1
80005c0c:	e0 69 00 ff 	mov	r9,255
80005c10:	f2 08 09 48 	lsl	r8,r9,r8
80005c14:	ef 68 ff fe 	st.b	r7[-2],r8
	maskVal = maskVal ^ 0xFF;
80005c18:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005c1c:	5c d8       	com	r8
80005c1e:	ef 68 ff fe 	st.b	r7[-2],r8
	regShadow &= maskVal;
80005c22:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005c26:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005c2a:	f3 e8 00 08 	and	r8,r9,r8
80005c2e:	ef 68 ff fd 	st.b	r7[-3],r8

	if (onOffn == LED_ON)
80005c32:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80005c36:	30 18       	mov	r8,1
80005c38:	f0 09 18 00 	cp.b	r9,r8
80005c3c:	c0 a1       	brne	80005c50 <PCA9952_channel+0xe4>
	{
		writeVal = (0x01 << (regPos * 2));
80005c3e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005c42:	a1 78       	lsl	r8,0x1
80005c44:	30 19       	mov	r9,1
80005c46:	f2 08 09 48 	lsl	r8,r9,r8
80005c4a:	ef 68 ff ff 	st.b	r7[-1],r8
80005c4e:	c0 a8       	rjmp	80005c62 <PCA9952_channel+0xf6>
	}
	else if (onOffn == LED_OFF)
80005c50:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80005c54:	30 08       	mov	r8,0
80005c56:	f0 09 18 00 	cp.b	r9,r8
80005c5a:	c0 41       	brne	80005c62 <PCA9952_channel+0xf6>
	{
		writeVal = 0;
80005c5c:	30 08       	mov	r8,0
80005c5e:	ef 68 ff ff 	st.b	r7[-1],r8
	}
	
	regShadow |= writeVal;
80005c62:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005c66:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005c6a:	f3 e8 10 08 	or	r8,r9,r8
80005c6e:	ef 68 ff fd 	st.b	r7[-3],r8
	
	switch(regIdx)
80005c72:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005c76:	58 18       	cp.w	r8,1
80005c78:	c1 50       	breq	80005ca2 <PCA9952_channel+0x136>
80005c7a:	e0 89 00 05 	brgt	80005c84 <PCA9952_channel+0x118>
80005c7e:	58 08       	cp.w	r8,0
80005c80:	c0 70       	breq	80005c8e <PCA9952_channel+0x122>
80005c82:	c2 d8       	rjmp	80005cdc <PCA9952_channel+0x170>
80005c84:	58 28       	cp.w	r8,2
80005c86:	c1 80       	breq	80005cb6 <PCA9952_channel+0x14a>
80005c88:	58 38       	cp.w	r8,3
80005c8a:	c2 00       	breq	80005cca <PCA9952_channel+0x15e>
80005c8c:	c2 88       	rjmp	80005cdc <PCA9952_channel+0x170>
	{
		case 0:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT0, regShadow);
80005c8e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005c92:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005c96:	12 9a       	mov	r10,r9
80005c98:	30 2b       	mov	r11,2
80005c9a:	10 9c       	mov	r12,r8
80005c9c:	f0 1f 00 13 	mcall	80005ce8 <PCA9952_channel+0x17c>
			break;
80005ca0:	c1 e8       	rjmp	80005cdc <PCA9952_channel+0x170>
		case 1:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT1, regShadow);
80005ca2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005ca6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005caa:	12 9a       	mov	r10,r9
80005cac:	30 3b       	mov	r11,3
80005cae:	10 9c       	mov	r12,r8
80005cb0:	f0 1f 00 0e 	mcall	80005ce8 <PCA9952_channel+0x17c>
			break;
80005cb4:	c1 48       	rjmp	80005cdc <PCA9952_channel+0x170>
		case 2:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT2, regShadow);
80005cb6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005cba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005cbe:	12 9a       	mov	r10,r9
80005cc0:	30 4b       	mov	r11,4
80005cc2:	10 9c       	mov	r12,r8
80005cc4:	f0 1f 00 09 	mcall	80005ce8 <PCA9952_channel+0x17c>
			break;
80005cc8:	c0 a8       	rjmp	80005cdc <PCA9952_channel+0x170>
		case 3:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT3, regShadow);
80005cca:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005cce:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005cd2:	12 9a       	mov	r10,r9
80005cd4:	30 5b       	mov	r11,5
80005cd6:	10 9c       	mov	r12,r8
80005cd8:	f0 1f 00 04 	mcall	80005ce8 <PCA9952_channel+0x17c>
			break;
	}

}
80005cdc:	2f bd       	sub	sp,-20
80005cde:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ce2:	00 00       	add	r0,r0
80005ce4:	80 00       	ld.sh	r0,r0[0x0]
80005ce6:	58 b0       	cp.w	r0,11
80005ce8:	80 00       	ld.sh	r0,r0[0x0]
80005cea:	58 2c       	cp.w	r12,2

80005cec <led_shelf>:

void led_shelf(unsigned char shelf, unsigned char onOffn)
{
80005cec:	eb cd 40 80 	pushm	r7,lr
80005cf0:	1a 97       	mov	r7,sp
80005cf2:	20 2d       	sub	sp,8
80005cf4:	18 99       	mov	r9,r12
80005cf6:	16 98       	mov	r8,r11
80005cf8:	ef 69 ff fc 	st.b	r7[-4],r9
80005cfc:	ef 68 ff f8 	st.b	r7[-8],r8
	switch(shelf)
80005d00:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005d04:	58 18       	cp.w	r8,1
80005d06:	c2 f0       	breq	80005d64 <led_shelf+0x78>
80005d08:	e0 89 00 05 	brgt	80005d12 <led_shelf+0x26>
80005d0c:	58 08       	cp.w	r8,0
80005d0e:	c0 70       	breq	80005d1c <led_shelf+0x30>
80005d10:	c9 58       	rjmp	80005e3a <led_shelf+0x14e>
80005d12:	58 28       	cp.w	r8,2
80005d14:	c4 c0       	breq	80005dac <led_shelf+0xc0>
80005d16:	58 38       	cp.w	r8,3
80005d18:	c6 e0       	breq	80005df4 <led_shelf+0x108>
80005d1a:	c9 08       	rjmp	80005e3a <led_shelf+0x14e>
	{
		case 0: //bottom of LED board 0 which is the upper board in the shelf, and top of LED board 1 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 0, onOffn);
80005d1c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d20:	10 9a       	mov	r10,r8
80005d22:	30 0b       	mov	r11,0
80005d24:	30 1c       	mov	r12,1
80005d26:	f0 1f 00 47 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 1, onOffn);
80005d2a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d2e:	10 9a       	mov	r10,r8
80005d30:	30 1b       	mov	r11,1
80005d32:	30 1c       	mov	r12,1
80005d34:	f0 1f 00 43 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 2, onOffn);
80005d38:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d3c:	10 9a       	mov	r10,r8
80005d3e:	30 2b       	mov	r11,2
80005d40:	30 1c       	mov	r12,1
80005d42:	f0 1f 00 40 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 0, onOffn);
80005d46:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d4a:	10 9a       	mov	r10,r8
80005d4c:	30 0b       	mov	r11,0
80005d4e:	30 0c       	mov	r12,0
80005d50:	f0 1f 00 3c 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 1, onOffn);
80005d54:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d58:	10 9a       	mov	r10,r8
80005d5a:	30 1b       	mov	r11,1
80005d5c:	30 0c       	mov	r12,0
80005d5e:	f0 1f 00 39 	mcall	80005e40 <led_shelf+0x154>
			break;
80005d62:	c6 c8       	rjmp	80005e3a <led_shelf+0x14e>

		case 1: //bottom of LED board 1 which is the upper board in the shelf, and top of LED board 2 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 3, onOffn);
80005d64:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d68:	10 9a       	mov	r10,r8
80005d6a:	30 3b       	mov	r11,3
80005d6c:	30 1c       	mov	r12,1
80005d6e:	f0 1f 00 35 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 4, onOffn);
80005d72:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d76:	10 9a       	mov	r10,r8
80005d78:	30 4b       	mov	r11,4
80005d7a:	30 1c       	mov	r12,1
80005d7c:	f0 1f 00 31 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 5, onOffn);
80005d80:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d84:	10 9a       	mov	r10,r8
80005d86:	30 5b       	mov	r11,5
80005d88:	30 1c       	mov	r12,1
80005d8a:	f0 1f 00 2e 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 2, onOffn);
80005d8e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005d92:	10 9a       	mov	r10,r8
80005d94:	30 2b       	mov	r11,2
80005d96:	30 0c       	mov	r12,0
80005d98:	f0 1f 00 2a 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 3, onOffn);
80005d9c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005da0:	10 9a       	mov	r10,r8
80005da2:	30 3b       	mov	r11,3
80005da4:	30 0c       	mov	r12,0
80005da6:	f0 1f 00 27 	mcall	80005e40 <led_shelf+0x154>
			break;
80005daa:	c4 88       	rjmp	80005e3a <led_shelf+0x14e>

		case 2: //bottom of LED board 2 which is the upper board in the shelf, and top of LED board 3 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 6, onOffn);
80005dac:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005db0:	10 9a       	mov	r10,r8
80005db2:	30 6b       	mov	r11,6
80005db4:	30 1c       	mov	r12,1
80005db6:	f0 1f 00 23 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 7, onOffn);
80005dba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005dbe:	10 9a       	mov	r10,r8
80005dc0:	30 7b       	mov	r11,7
80005dc2:	30 1c       	mov	r12,1
80005dc4:	f0 1f 00 1f 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 8, onOffn);
80005dc8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005dcc:	10 9a       	mov	r10,r8
80005dce:	30 8b       	mov	r11,8
80005dd0:	30 1c       	mov	r12,1
80005dd2:	f0 1f 00 1c 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 4, onOffn);
80005dd6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005dda:	10 9a       	mov	r10,r8
80005ddc:	30 4b       	mov	r11,4
80005dde:	30 0c       	mov	r12,0
80005de0:	f0 1f 00 18 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 5, onOffn);
80005de4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005de8:	10 9a       	mov	r10,r8
80005dea:	30 5b       	mov	r11,5
80005dec:	30 0c       	mov	r12,0
80005dee:	f0 1f 00 15 	mcall	80005e40 <led_shelf+0x154>
			break;
80005df2:	c2 48       	rjmp	80005e3a <led_shelf+0x14e>

		case 3: //bottom of LED board 3 which is the upper board in the shelf, and top of LED board 4 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 9, onOffn);
80005df4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005df8:	10 9a       	mov	r10,r8
80005dfa:	30 9b       	mov	r11,9
80005dfc:	30 1c       	mov	r12,1
80005dfe:	f0 1f 00 11 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 10, onOffn);
80005e02:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005e06:	10 9a       	mov	r10,r8
80005e08:	30 ab       	mov	r11,10
80005e0a:	30 1c       	mov	r12,1
80005e0c:	f0 1f 00 0d 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 11, onOffn);
80005e10:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005e14:	10 9a       	mov	r10,r8
80005e16:	30 bb       	mov	r11,11
80005e18:	30 1c       	mov	r12,1
80005e1a:	f0 1f 00 0a 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 6, onOffn);
80005e1e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005e22:	10 9a       	mov	r10,r8
80005e24:	30 6b       	mov	r11,6
80005e26:	30 0c       	mov	r12,0
80005e28:	f0 1f 00 06 	mcall	80005e40 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 7, onOffn);
80005e2c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005e30:	10 9a       	mov	r10,r8
80005e32:	30 7b       	mov	r11,7
80005e34:	30 0c       	mov	r12,0
80005e36:	f0 1f 00 03 	mcall	80005e40 <led_shelf+0x154>
			break;
	}	
	
}
80005e3a:	2f ed       	sub	sp,-8
80005e3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e40:	80 00       	ld.sh	r0,r0[0x0]
80005e42:	5b 6c       	cp.w	r12,-10
80005e44:	53 68       	stdsp	sp[0xd8],r8
80005e46:	65 6c       	ld.w	r12,r2[0x58]
80005e48:	66 20       	ld.w	r0,r3[0x8]
80005e4a:	30 20       	mov	r0,2
80005e4c:	61 63       	ld.w	r3,r0[0x58]
80005e4e:	74 69       	ld.w	r9,r10[0x18]
80005e50:	76 65       	ld.w	r5,r11[0x18]
80005e52:	0d 0a       	ld.w	r10,r6++
80005e54:	00 00       	add	r0,r0
80005e56:	00 00       	add	r0,r0
80005e58:	53 68       	stdsp	sp[0xd8],r8
80005e5a:	65 6c       	ld.w	r12,r2[0x58]
80005e5c:	66 20       	ld.w	r0,r3[0x8]
80005e5e:	31 20       	mov	r0,18
80005e60:	61 63       	ld.w	r3,r0[0x58]
80005e62:	74 69       	ld.w	r9,r10[0x18]
80005e64:	76 65       	ld.w	r5,r11[0x18]
80005e66:	0d 0a       	ld.w	r10,r6++
80005e68:	00 00       	add	r0,r0
80005e6a:	00 00       	add	r0,r0
80005e6c:	53 68       	stdsp	sp[0xd8],r8
80005e6e:	65 6c       	ld.w	r12,r2[0x58]
80005e70:	66 20       	ld.w	r0,r3[0x8]
80005e72:	32 20       	mov	r0,34
80005e74:	61 63       	ld.w	r3,r0[0x58]
80005e76:	74 69       	ld.w	r9,r10[0x18]
80005e78:	76 65       	ld.w	r5,r11[0x18]
80005e7a:	0d 0a       	ld.w	r10,r6++
80005e7c:	00 00       	add	r0,r0
80005e7e:	00 00       	add	r0,r0
80005e80:	53 68       	stdsp	sp[0xd8],r8
80005e82:	65 6c       	ld.w	r12,r2[0x58]
80005e84:	66 20       	ld.w	r0,r3[0x8]
80005e86:	33 20       	mov	r0,50
80005e88:	61 63       	ld.w	r3,r0[0x58]
80005e8a:	74 69       	ld.w	r9,r10[0x18]
80005e8c:	76 65       	ld.w	r5,r11[0x18]
80005e8e:	0d 0a       	ld.w	r10,r6++
80005e90:	00 00       	add	r0,r0
80005e92:	00 00       	add	r0,r0
80005e94:	53 45       	stdsp	sp[0xd0],r5
80005e96:	41 4c       	lddsp	r12,sp[0x50]
80005e98:	20 53       	sub	r3,5
80005e9a:	48 49       	lddpc	r9,80005ea8 <led_shelf+0x1bc>
80005e9c:	45 4c       	lddsp	r12,sp[0x150]
80005e9e:	44 20       	lddsp	r0,sp[0x108]
80005ea0:	44 45       	lddsp	r5,sp[0x110]
80005ea2:	4d 4f       	lddpc	pc,80005ff0 <display_text+0xc>
80005ea4:	20 0d       	sub	sp,0
80005ea6:	0a 20       	rsub	r0,r5
80005ea8:	43 6f       	lddsp	pc,sp[0xd8]
80005eaa:	70 79       	ld.w	r9,r8[0x1c]
80005eac:	72 69       	ld.w	r9,r9[0x18]
80005eae:	67 68       	ld.w	r8,r3[0x58]
80005eb0:	74 20       	ld.w	r0,r10[0x8]
80005eb2:	28 63       	sub	r3,-122
80005eb4:	29 20       	sub	r0,-110
80005eb6:	32 30       	mov	r0,35
80005eb8:	31 35       	mov	r5,19
80005eba:	20 54       	sub	r4,5
80005ebc:	65 63       	ld.w	r3,r2[0x58]
80005ebe:	68 6e       	ld.w	lr,r4[0x18]
80005ec0:	69 63       	ld.w	r3,r4[0x58]
80005ec2:	61 6c       	ld.w	r12,r0[0x58]
80005ec4:	20 53       	sub	r3,5
80005ec6:	6f 6c       	ld.w	r12,r7[0x58]
80005ec8:	75 74       	ld.w	r4,r10[0x5c]
80005eca:	69 6f       	ld.w	pc,r4[0x58]
80005ecc:	6e 73       	ld.w	r3,r7[0x1c]
80005ece:	20 47       	sub	r7,4
80005ed0:	72 6f       	ld.w	pc,r9[0x18]
80005ed2:	75 70       	ld.w	r0,r10[0x5c]
80005ed4:	2c 20       	sub	r0,-62
80005ed6:	49 6e       	lddpc	lr,80005f2c <led_shelf+0x240>
80005ed8:	63 2e       	ld.w	lr,r1[0x48]
80005eda:	0d 0a       	ld.w	r10,r6++
80005edc:	00 00       	add	r0,r0
80005ede:	00 00       	add	r0,r0
80005ee0:	44 6f       	lddsp	pc,sp[0x118]
80005ee2:	6f 72       	ld.w	r2,r7[0x5c]
80005ee4:	20 6c       	sub	r12,6
80005ee6:	61 74       	ld.w	r4,r0[0x5c]
80005ee8:	63 68       	ld.w	r8,r1[0x58]
80005eea:	20 64       	sub	r4,6
80005eec:	65 74       	ld.w	r4,r2[0x5c]
80005eee:	65 63       	ld.w	r3,r2[0x58]
80005ef0:	74 65       	ld.w	r5,r10[0x18]
80005ef2:	64 0d       	ld.w	sp,r2[0x0]
80005ef4:	0a 00       	add	r0,r5
80005ef6:	00 00       	add	r0,r0
80005ef8:	41 63       	lddsp	r3,sp[0x58]
80005efa:	74 69       	ld.w	r9,r10[0x18]
80005efc:	6f 6e       	ld.w	lr,r7[0x58]
80005efe:	20 70       	sub	r0,7
80005f00:	75 73       	ld.w	r3,r10[0x5c]
80005f02:	68 20       	ld.w	r0,r4[0x8]
80005f04:	62 75       	ld.w	r5,r1[0x1c]
80005f06:	74 74       	ld.w	r4,r10[0x1c]
80005f08:	6f 6e       	ld.w	lr,r7[0x58]
80005f0a:	20 70       	sub	r0,7
80005f0c:	72 65       	ld.w	r5,r9[0x18]
80005f0e:	73 73       	ld.w	r3,r9[0x5c]
80005f10:	20 64       	sub	r4,6
80005f12:	65 74       	ld.w	r4,r2[0x5c]
80005f14:	65 63       	ld.w	r3,r2[0x58]
80005f16:	74 65       	ld.w	r5,r10[0x18]
80005f18:	64 0d       	ld.w	sp,r2[0x0]
80005f1a:	0a 00       	add	r0,r5
80005f1c:	41 63       	lddsp	r3,sp[0x58]
80005f1e:	74 69       	ld.w	r9,r10[0x18]
80005f20:	6f 6e       	ld.w	lr,r7[0x58]
80005f22:	20 70       	sub	r0,7
80005f24:	75 73       	ld.w	r3,r10[0x5c]
80005f26:	68 20       	ld.w	r0,r4[0x8]
80005f28:	62 75       	ld.w	r5,r1[0x1c]
80005f2a:	74 74       	ld.w	r4,r10[0x1c]
80005f2c:	6f 6e       	ld.w	lr,r7[0x58]
80005f2e:	20 72       	sub	r2,7
80005f30:	65 6c       	ld.w	r12,r2[0x58]
80005f32:	65 61       	ld.w	r1,r2[0x58]
80005f34:	73 65       	ld.w	r5,r9[0x58]
80005f36:	20 64       	sub	r4,6
80005f38:	65 74       	ld.w	r4,r2[0x5c]
80005f3a:	65 63       	ld.w	r3,r2[0x58]
80005f3c:	74 65       	ld.w	r5,r10[0x18]
80005f3e:	64 0d       	ld.w	sp,r2[0x0]
80005f40:	0a 00       	add	r0,r5
80005f42:	00 00       	add	r0,r0
80005f44:	53 74       	stdsp	sp[0xdc],r4
80005f46:	61 72       	ld.w	r2,r0[0x5c]
80005f48:	74 20       	ld.w	r0,r10[0x8]
80005f4a:	73 61       	ld.w	r1,r9[0x58]
80005f4c:	6e 69       	ld.w	r9,r7[0x18]
80005f4e:	74 69       	ld.w	r9,r10[0x18]
80005f50:	7a 69       	ld.w	r9,sp[0x18]
80005f52:	6e 67       	ld.w	r7,r7[0x18]
80005f54:	0d 0a       	ld.w	r10,r6++
80005f56:	00 00       	add	r0,r0
80005f58:	4e 6f       	lddpc	pc,800060f0 <init_io+0xa0>
80005f5a:	20 73       	sub	r3,7
80005f5c:	68 65       	ld.w	r5,r4[0x18]
80005f5e:	6c 76       	ld.w	r6,r6[0x1c]
80005f60:	65 73       	ld.w	r3,r2[0x5c]
80005f62:	2c 20       	sub	r0,-62
80005f64:	6e 6f       	ld.w	pc,r7[0x18]
80005f66:	20 64       	sub	r4,6
80005f68:	65 76       	ld.w	r6,r2[0x5c]
80005f6a:	69 63       	ld.w	r3,r4[0x58]
80005f6c:	65 73       	ld.w	r3,r2[0x5c]
80005f6e:	20 6f       	sub	pc,6
80005f70:	72 20       	ld.w	r0,r9[0x8]
80005f72:	73 68       	ld.w	r8,r9[0x58]
80005f74:	65 6c       	ld.w	r12,r2[0x58]
80005f76:	76 65       	ld.w	r5,r11[0x18]
80005f78:	73 20       	ld.w	r0,r9[0x48]
80005f7a:	61 72       	ld.w	r2,r0[0x5c]
80005f7c:	65 20       	ld.w	r0,r2[0x48]
80005f7e:	70 61       	ld.w	r1,r8[0x18]
80005f80:	73 74       	ld.w	r4,r9[0x5c]
80005f82:	20 6c       	sub	r12,6
80005f84:	69 66       	ld.w	r6,r4[0x58]
80005f86:	65 74       	ld.w	r4,r2[0x5c]
80005f88:	69 6d       	ld.w	sp,r4[0x58]
80005f8a:	65 2c       	ld.w	r12,r2[0x48]
80005f8c:	20 63       	sub	r3,6
80005f8e:	68 61       	ld.w	r1,r4[0x18]
80005f90:	72 67       	ld.w	r7,r9[0x18]
80005f92:	69 6e       	ld.w	lr,r4[0x58]
80005f94:	67 20       	ld.w	r0,r3[0x48]
80005f96:	64 65       	ld.w	r5,r2[0x18]
80005f98:	76 69       	ld.w	r9,r11[0x18]
80005f9a:	63 65       	ld.w	r5,r1[0x58]
80005f9c:	73 0d       	ld.w	sp,r9[0x40]
80005f9e:	0a 00       	add	r0,r5
80005fa0:	53 68       	stdsp	sp[0xd8],r8
80005fa2:	65 6c       	ld.w	r12,r2[0x58]
80005fa4:	66 20       	ld.w	r0,r3[0x8]
80005fa6:	63 6c       	ld.w	r12,r1[0x58]
80005fa8:	65 61       	ld.w	r1,r2[0x58]
80005faa:	6e 0d       	ld.w	sp,r7[0x0]
80005fac:	0a 00       	add	r0,r5
80005fae:	00 00       	add	r0,r0
80005fb0:	44 6f       	lddsp	pc,sp[0x118]
80005fb2:	6f 72       	ld.w	r2,r7[0x5c]
80005fb4:	20 6c       	sub	r12,6
80005fb6:	61 74       	ld.w	r4,r0[0x5c]
80005fb8:	63 68       	ld.w	r8,r1[0x58]
80005fba:	20 6f       	sub	pc,6
80005fbc:	70 65       	ld.w	r5,r8[0x18]
80005fbe:	6e 65       	ld.w	r5,r7[0x18]
80005fc0:	64 2c       	ld.w	r12,r2[0x8]
80005fc2:	20 73       	sub	r3,7
80005fc4:	68 75       	ld.w	r5,r4[0x1c]
80005fc6:	74 74       	ld.w	r4,r10[0x1c]
80005fc8:	69 6e       	ld.w	lr,r4[0x58]
80005fca:	67 20       	ld.w	r0,r3[0x48]
80005fcc:	64 6f       	ld.w	pc,r2[0x18]
80005fce:	77 6e       	ld.w	lr,r11[0x58]
80005fd0:	20 61       	sub	r1,6
80005fd2:	6c 6c       	ld.w	r12,r6[0x18]
80005fd4:	20 70       	sub	r0,7
80005fd6:	72 6f       	ld.w	pc,r9[0x18]
80005fd8:	63 65       	ld.w	r5,r1[0x58]
80005fda:	73 73       	ld.w	r3,r9[0x5c]
80005fdc:	65 73       	ld.w	r3,r2[0x5c]
80005fde:	0d 0a       	ld.w	r10,r6++
80005fe0:	00 00       	add	r0,r0
	...

80005fe4 <display_text>:
};


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
80005fe4:	eb cd 40 80 	pushm	r7,lr
80005fe8:	1a 97       	mov	r7,sp
80005fea:	20 2d       	sub	sp,8
80005fec:	18 98       	mov	r8,r12
80005fee:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i = 0; i<7; i++)
80005ff2:	30 08       	mov	r8,0
80005ff4:	ef 48 ff fc 	st.w	r7[-4],r8
80005ff8:	c1 58       	rjmp	80006022 <display_text+0x3e>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
80005ffa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005ffe:	48 e8       	lddpc	r8,80006034 <display_text+0x50>
80006000:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006004:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006008:	f2 08 00 08 	add	r8,r9,r8
8000600c:	11 88       	ld.ub	r8,r8[0x0]
8000600e:	10 9b       	mov	r11,r8
80006010:	fc 7c 14 00 	mov	r12,-191488
80006014:	f0 1f 00 09 	mcall	80006038 <display_text+0x54>


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
	for (int i = 0; i<7; i++)
80006018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000601c:	2f f8       	sub	r8,-1
8000601e:	ef 48 ff fc 	st.w	r7[-4],r8
80006022:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006026:	58 68       	cp.w	r8,6
80006028:	fe 9a ff e9 	brle	80005ffa <display_text+0x16>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
	}
	
}
8000602c:	2f ed       	sub	sp,-8
8000602e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006032:	00 00       	add	r0,r0
80006034:	00 00       	add	r0,r0
80006036:	00 5c       	eor	r12,r0
80006038:	80 00       	ld.sh	r0,r0[0x0]
8000603a:	56 f0       	stdsp	sp[0x1bc],r0

8000603c <chassis_error>:

void chassis_error(void);
void chassis_error(void)
{
8000603c:	eb cd 40 80 	pushm	r7,lr
80006040:	1a 97       	mov	r7,sp
	display_text(IDX_ERROR);
80006042:	30 4c       	mov	r12,4
80006044:	f0 1f 00 02 	mcall	8000604c <chassis_error+0x10>
	
	while(1); //catastrophic error, just hang TODO: allow technician interface to work here possibly
80006048:	c0 08       	rjmp	80006048 <chassis_error+0xc>
8000604a:	00 00       	add	r0,r0
8000604c:	80 00       	ld.sh	r0,r0[0x0]
8000604e:	5f e4       	srqs	r4

80006050 <init_io>:
	
}

void init_io(void);
void init_io(void)
{
80006050:	eb cd 40 80 	pushm	r7,lr
80006054:	1a 97       	mov	r7,sp
80006056:	20 1d       	sub	sp,4
	uint32_t ioFlags;
	
	
	ioFlags = (GPIO_DIR_INPUT);
80006058:	30 08       	mov	r8,0
8000605a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DOOR_LATCH, ioFlags);
8000605e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006062:	33 ec       	mov	r12,62
80006064:	f0 1f 00 2b 	mcall	80006110 <init_io+0xc0>

	ioFlags = (GPIO_DIR_INPUT);
80006068:	30 08       	mov	r8,0
8000606a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_ACTION_PB, ioFlags);
8000606e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006072:	33 fc       	mov	r12,63
80006074:	f0 1f 00 27 	mcall	80006110 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006078:	30 38       	mov	r8,3
8000607a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID0, ioFlags);
8000607e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006082:	33 3c       	mov	r12,51
80006084:	f0 1f 00 23 	mcall	80006110 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006088:	30 38       	mov	r8,3
8000608a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID1, ioFlags);
8000608e:	ee fb ff fc 	ld.w	r11,r7[-4]
80006092:	33 4c       	mov	r12,52
80006094:	f0 1f 00 1f 	mcall	80006110 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80006098:	30 38       	mov	r8,3
8000609a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID2, ioFlags);
8000609e:	ee fb ff fc 	ld.w	r11,r7[-4]
800060a2:	33 5c       	mov	r12,53
800060a4:	f0 1f 00 1b 	mcall	80006110 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800060a8:	30 38       	mov	r8,3
800060aa:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID3, ioFlags);
800060ae:	ee fb ff fc 	ld.w	r11,r7[-4]
800060b2:	33 6c       	mov	r12,54
800060b4:	f0 1f 00 17 	mcall	80006110 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800060b8:	30 38       	mov	r8,3
800060ba:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID4, ioFlags);
800060be:	ee fb ff fc 	ld.w	r11,r7[-4]
800060c2:	33 7c       	mov	r12,55
800060c4:	f0 1f 00 13 	mcall	80006110 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
800060c8:	30 18       	mov	r8,1
800060ca:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DEBUG_LED, ioFlags);
800060ce:	ee fb ff fc 	ld.w	r11,r7[-4]
800060d2:	37 cc       	mov	r12,124
800060d4:	f0 1f 00 0f 	mcall	80006110 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800060d8:	30 38       	mov	r8,3
800060da:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_PSUPPLY_ONn, ioFlags);
800060de:	ee fb ff fc 	ld.w	r11,r7[-4]
800060e2:	31 7c       	mov	r12,23
800060e4:	f0 1f 00 0b 	mcall	80006110 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800060e8:	30 38       	mov	r8,3
800060ea:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_LED_OEn, ioFlags);
800060ee:	ee fb ff fc 	ld.w	r11,r7[-4]
800060f2:	31 6c       	mov	r12,22
800060f4:	f0 1f 00 07 	mcall	80006110 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW); //high=1x multiplier, low=4x multiplier 10apr15
800060f8:	30 18       	mov	r8,1
800060fa:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_MFP, ioFlags);
800060fe:	ee fb ff fc 	ld.w	r11,r7[-4]
80006102:	31 5c       	mov	r12,21
80006104:	f0 1f 00 03 	mcall	80006110 <init_io+0xc0>

}
80006108:	2f fd       	sub	sp,-4
8000610a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000610e:	00 00       	add	r0,r0
80006110:	80 00       	ld.sh	r0,r0[0x0]
80006112:	45 04       	lddsp	r4,sp[0x140]

80006114 <read_led_board_serial_ids>:
};

/* One serial ID chip per board */
void read_led_board_serial_ids(void);
void read_led_board_serial_ids(void)
{
80006114:	eb cd 40 c0 	pushm	r6-r7,lr
80006118:	1a 97       	mov	r7,sp
8000611a:	20 2d       	sub	sp,8
	/*
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive 
8000611c:	30 1c       	mov	r12,1
8000611e:	f0 1f 00 6f 	mcall	800062d8 <read_led_board_serial_ids+0x1c4>
	
	ledBrd[0].present = !OWTouchReset(0);
80006122:	30 0c       	mov	r12,0
80006124:	f0 1f 00 6e 	mcall	800062dc <read_led_board_serial_ids+0x1c8>
80006128:	18 98       	mov	r8,r12
8000612a:	58 08       	cp.w	r8,0
8000612c:	5f 08       	sreq	r8
8000612e:	4e d9       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
80006130:	f3 68 00 08 	st.b	r9[8],r8
	if (ledBrd[0].present)
80006134:	4e b8       	lddpc	r8,800062e0 <read_led_board_serial_ids+0x1cc>
80006136:	f1 38 00 08 	ld.ub	r8,r8[8]
8000613a:	58 08       	cp.w	r8,0
8000613c:	c2 b0       	breq	80006192 <read_led_board_serial_ids+0x7e>
	{
		OWWriteByte(0, 0x33); //Read ID command
8000613e:	33 3b       	mov	r11,51
80006140:	30 0c       	mov	r12,0
80006142:	f0 1f 00 69 	mcall	800062e4 <read_led_board_serial_ids+0x1d0>
			
		ledBrd[0].idFamily = OWReadByte(0);
80006146:	30 0c       	mov	r12,0
80006148:	f0 1f 00 68 	mcall	800062e8 <read_led_board_serial_ids+0x1d4>
8000614c:	18 98       	mov	r8,r12
8000614e:	5c 58       	castu.b	r8
80006150:	4e 49       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
80006152:	b2 88       	st.b	r9[0x0],r8
			
		for (int j=0; j<6; j++)
80006154:	30 08       	mov	r8,0
80006156:	ef 48 ff f8 	st.w	r7[-8],r8
8000615a:	c1 08       	rjmp	8000617a <read_led_board_serial_ids+0x66>
		{
			ledBrd[0].id[j] = OWReadByte(0);
8000615c:	ee f6 ff f8 	ld.w	r6,r7[-8]
80006160:	30 0c       	mov	r12,0
80006162:	f0 1f 00 62 	mcall	800062e8 <read_led_board_serial_ids+0x1d4>
80006166:	18 98       	mov	r8,r12
80006168:	5c 58       	castu.b	r8
8000616a:	4d e9       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
8000616c:	0c 09       	add	r9,r6
8000616e:	b2 98       	st.b	r9[0x1],r8
	{
		OWWriteByte(0, 0x33); //Read ID command
			
		ledBrd[0].idFamily = OWReadByte(0);
			
		for (int j=0; j<6; j++)
80006170:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006174:	2f f8       	sub	r8,-1
80006176:	ef 48 ff f8 	st.w	r7[-8],r8
8000617a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000617e:	58 58       	cp.w	r8,5
80006180:	fe 9a ff ee 	brle	8000615c <read_led_board_serial_ids+0x48>
		{
			ledBrd[0].id[j] = OWReadByte(0);
		}
			
		ledBrd[0].idcsum = OWReadByte(0);
80006184:	30 0c       	mov	r12,0
80006186:	f0 1f 00 59 	mcall	800062e8 <read_led_board_serial_ids+0x1d4>
8000618a:	18 98       	mov	r8,r12
8000618c:	5c 58       	castu.b	r8
8000618e:	4d 59       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
80006190:	b2 f8       	st.b	r9[0x7],r8
	}
	
	ledBrd[1].present = !OWTouchReset(1);
80006192:	30 1c       	mov	r12,1
80006194:	f0 1f 00 52 	mcall	800062dc <read_led_board_serial_ids+0x1c8>
80006198:	18 98       	mov	r8,r12
8000619a:	58 08       	cp.w	r8,0
8000619c:	5f 08       	sreq	r8
8000619e:	4d 19       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
800061a0:	f3 68 00 16 	st.b	r9[22],r8
	ledBrd[2].present = !OWTouchReset(2);
800061a4:	30 2c       	mov	r12,2
800061a6:	f0 1f 00 4e 	mcall	800062dc <read_led_board_serial_ids+0x1c8>
800061aa:	18 98       	mov	r8,r12
800061ac:	58 08       	cp.w	r8,0
800061ae:	5f 08       	sreq	r8
800061b0:	4c c9       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
800061b2:	f3 68 00 24 	st.b	r9[36],r8
	ledBrd[3].present = !OWTouchReset(3);
800061b6:	30 3c       	mov	r12,3
800061b8:	f0 1f 00 49 	mcall	800062dc <read_led_board_serial_ids+0x1c8>
800061bc:	18 98       	mov	r8,r12
800061be:	58 08       	cp.w	r8,0
800061c0:	5f 08       	sreq	r8
800061c2:	4c 89       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
800061c4:	f3 68 00 32 	st.b	r9[50],r8
	ledBrd[4].present = !OWTouchReset(4);
800061c8:	30 4c       	mov	r12,4
800061ca:	f0 1f 00 45 	mcall	800062dc <read_led_board_serial_ids+0x1c8>
800061ce:	18 98       	mov	r8,r12
800061d0:	58 08       	cp.w	r8,0
800061d2:	5f 08       	sreq	r8
800061d4:	4c 39       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
800061d6:	f3 68 00 40 	st.b	r9[64],r8
	
	if (ledBrd[0].present && ledBrd[1].present)
800061da:	4c 28       	lddpc	r8,800062e0 <read_led_board_serial_ids+0x1cc>
800061dc:	f1 38 00 08 	ld.ub	r8,r8[8]
800061e0:	58 08       	cp.w	r8,0
800061e2:	c0 90       	breq	800061f4 <read_led_board_serial_ids+0xe0>
800061e4:	4b f8       	lddpc	r8,800062e0 <read_led_board_serial_ids+0x1cc>
800061e6:	f1 38 00 16 	ld.ub	r8,r8[22]
800061ea:	58 08       	cp.w	r8,0
800061ec:	c0 40       	breq	800061f4 <read_led_board_serial_ids+0xe0>
	{
		shelf[0].present = 1;
800061ee:	4c 09       	lddpc	r9,800062ec <read_led_board_serial_ids+0x1d8>
800061f0:	30 18       	mov	r8,1
800061f2:	b2 c8       	st.b	r9[0x4],r8
	}
	if (ledBrd[1].present && ledBrd[2].present)
800061f4:	4b b8       	lddpc	r8,800062e0 <read_led_board_serial_ids+0x1cc>
800061f6:	f1 38 00 16 	ld.ub	r8,r8[22]
800061fa:	58 08       	cp.w	r8,0
800061fc:	c0 a0       	breq	80006210 <read_led_board_serial_ids+0xfc>
800061fe:	4b 98       	lddpc	r8,800062e0 <read_led_board_serial_ids+0x1cc>
80006200:	f1 38 00 24 	ld.ub	r8,r8[36]
80006204:	58 08       	cp.w	r8,0
80006206:	c0 50       	breq	80006210 <read_led_board_serial_ids+0xfc>
	{
		shelf[1].present = 1;
80006208:	4b 99       	lddpc	r9,800062ec <read_led_board_serial_ids+0x1d8>
8000620a:	30 18       	mov	r8,1
8000620c:	f3 68 00 09 	st.b	r9[9],r8
	}
	if (ledBrd[2].present && ledBrd[3].present)
80006210:	4b 48       	lddpc	r8,800062e0 <read_led_board_serial_ids+0x1cc>
80006212:	f1 38 00 24 	ld.ub	r8,r8[36]
80006216:	58 08       	cp.w	r8,0
80006218:	c0 a0       	breq	8000622c <read_led_board_serial_ids+0x118>
8000621a:	4b 28       	lddpc	r8,800062e0 <read_led_board_serial_ids+0x1cc>
8000621c:	f1 38 00 32 	ld.ub	r8,r8[50]
80006220:	58 08       	cp.w	r8,0
80006222:	c0 50       	breq	8000622c <read_led_board_serial_ids+0x118>
	{
		shelf[2].present = 1;
80006224:	4b 29       	lddpc	r9,800062ec <read_led_board_serial_ids+0x1d8>
80006226:	30 18       	mov	r8,1
80006228:	f3 68 00 0e 	st.b	r9[14],r8
	}
	if (ledBrd[3].present && ledBrd[4].present)
8000622c:	4a d8       	lddpc	r8,800062e0 <read_led_board_serial_ids+0x1cc>
8000622e:	f1 38 00 32 	ld.ub	r8,r8[50]
80006232:	58 08       	cp.w	r8,0
80006234:	c0 a0       	breq	80006248 <read_led_board_serial_ids+0x134>
80006236:	4a b8       	lddpc	r8,800062e0 <read_led_board_serial_ids+0x1cc>
80006238:	f1 38 00 40 	ld.ub	r8,r8[64]
8000623c:	58 08       	cp.w	r8,0
8000623e:	c0 50       	breq	80006248 <read_led_board_serial_ids+0x134>
	{
		shelf[3].present = 1;
80006240:	4a b9       	lddpc	r9,800062ec <read_led_board_serial_ids+0x1d8>
80006242:	30 18       	mov	r8,1
80006244:	f3 68 00 13 	st.b	r9[19],r8
	}
	

//for (;;) //DEBUG 12may15
//{
	for (int i=0; i<NUM_LED_BOARDS; i++)
80006248:	30 08       	mov	r8,0
8000624a:	ef 48 ff fc 	st.w	r7[-4],r8
8000624e:	c0 c8       	rjmp	80006266 <read_led_board_serial_ids+0x152>
	{
		if (ledBrd[i].present)
80006250:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006254:	12 98       	mov	r8,r9
80006256:	a3 78       	lsl	r8,0x3
80006258:	12 18       	sub	r8,r9
8000625a:	a1 78       	lsl	r8,0x1
	}
	

//for (;;) //DEBUG 12may15
//{
	for (int i=0; i<NUM_LED_BOARDS; i++)
8000625c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006260:	2f f8       	sub	r8,-1
80006262:	ef 48 ff fc 	st.w	r7[-4],r8
80006266:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000626a:	58 48       	cp.w	r8,4
8000626c:	fe 9a ff f2 	brle	80006250 <read_led_board_serial_ids+0x13c>
	}
//}//DEBUG 12may15
	
	//DEBUG until we fix the reading of the serial chip ID 11may15
	
	ledBrd[1].id[0] = 0x01;
80006270:	49 c9       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
80006272:	30 18       	mov	r8,1
80006274:	f3 68 00 0f 	st.b	r9[15],r8
	ledBrd[1].id[1] = 0x23;
80006278:	49 a9       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
8000627a:	32 38       	mov	r8,35
8000627c:	f3 68 00 10 	st.b	r9[16],r8
	ledBrd[1].id[2] = 0x45;
80006280:	49 89       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
80006282:	34 58       	mov	r8,69
80006284:	f3 68 00 11 	st.b	r9[17],r8
	ledBrd[1].id[3] = 0x67;
80006288:	49 69       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
8000628a:	36 78       	mov	r8,103
8000628c:	f3 68 00 12 	st.b	r9[18],r8
	ledBrd[1].id[4] = 0x89;
80006290:	49 49       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
80006292:	38 98       	mov	r8,-119
80006294:	f3 68 00 13 	st.b	r9[19],r8
	ledBrd[1].id[5] = 0xab;
80006298:	49 29       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
8000629a:	3a b8       	mov	r8,-85
8000629c:	f3 68 00 14 	st.b	r9[20],r8

	ledBrd[2].id[0] = 0xab;
800062a0:	49 09       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
800062a2:	3a b8       	mov	r8,-85
800062a4:	f3 68 00 1d 	st.b	r9[29],r8
	ledBrd[2].id[1] = 0x89;
800062a8:	48 e9       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
800062aa:	38 98       	mov	r8,-119
800062ac:	f3 68 00 1e 	st.b	r9[30],r8
	ledBrd[2].id[2] = 0x67;
800062b0:	48 c9       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
800062b2:	36 78       	mov	r8,103
800062b4:	f3 68 00 1f 	st.b	r9[31],r8
	ledBrd[2].id[3] = 0x45;
800062b8:	48 a9       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
800062ba:	34 58       	mov	r8,69
800062bc:	f3 68 00 20 	st.b	r9[32],r8
	ledBrd[2].id[4] = 0x23;
800062c0:	48 89       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
800062c2:	32 38       	mov	r8,35
800062c4:	f3 68 00 21 	st.b	r9[33],r8
	ledBrd[2].id[5] = 0x01;
800062c8:	48 69       	lddpc	r9,800062e0 <read_led_board_serial_ids+0x1cc>
800062ca:	30 18       	mov	r8,1
800062cc:	f3 68 00 22 	st.b	r9[34],r8

}
800062d0:	2f ed       	sub	sp,-8
800062d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800062d6:	00 00       	add	r0,r0
800062d8:	80 00       	ld.sh	r0,r0[0x0]
800062da:	21 74       	sub	r4,23
800062dc:	80 00       	ld.sh	r0,r0[0x0]
800062de:	22 34       	sub	r4,35
800062e0:	00 00       	add	r0,r0
800062e2:	02 f4       	st.b	--r1,r4
800062e4:	80 00       	ld.sh	r0,r0[0x0]
800062e6:	2e 58       	sub	r8,-27
800062e8:	80 00       	ld.sh	r0,r0[0x0]
800062ea:	2e b0       	sub	r0,-21
800062ec:	00 00       	add	r0,r0
800062ee:	03 3a       	ld.ub	r10,r1++

800062f0 <check_led_brd_side_lifetime>:
};

/* Each side of an LED board will get different usage */
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx);
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx)
{
800062f0:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
800062f4:	1a 97       	mov	r7,sp
800062f6:	20 4d       	sub	sp,16
800062f8:	18 98       	mov	r8,r12
800062fa:	ef 68 ff f0 	st.b	r7[-16],r8
	 * Find the record for this board's serial ID number, and check the usage hours and see if we
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
800062fe:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80006302:	4e 1a       	lddpc	r10,80006484 <check_led_brd_side_lifetime+0x194>
80006304:	12 98       	mov	r8,r9
80006306:	a3 68       	lsl	r8,0x2
80006308:	12 08       	add	r8,r9
8000630a:	f4 08 00 08 	add	r8,r10,r8
8000630e:	2f f8       	sub	r8,-1
80006310:	11 88       	ld.ub	r8,r8[0x0]
80006312:	ef 68 ff f7 	st.b	r7[-9],r8
	hours = (usageShdw[0].u[idx].hrs_thous * 1000) +
80006316:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000631a:	4d ca       	lddpc	r10,80006488 <check_led_brd_side_lifetime+0x198>
8000631c:	12 98       	mov	r8,r9
8000631e:	a3 68       	lsl	r8,0x2
80006320:	12 08       	add	r8,r9
80006322:	a1 78       	lsl	r8,0x1
80006324:	f4 08 00 08 	add	r8,r10,r8
80006328:	2f c8       	sub	r8,-4
8000632a:	11 b8       	ld.ub	r8,r8[0x3]
8000632c:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80006330:	5c 58       	castu.b	r8
80006332:	10 99       	mov	r9,r8
80006334:	e0 68 03 e8 	mov	r8,1000
80006338:	f2 08 02 4a 	mul	r10,r9,r8
		(usageShdw[0].u[idx].hrs_huns * 100) +
8000633c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006340:	4d 2b       	lddpc	r11,80006488 <check_led_brd_side_lifetime+0x198>
80006342:	12 98       	mov	r8,r9
80006344:	a3 68       	lsl	r8,0x2
80006346:	12 08       	add	r8,r9
80006348:	a1 78       	lsl	r8,0x1
8000634a:	f6 08 00 08 	add	r8,r11,r8
8000634e:	2f c8       	sub	r8,-4
80006350:	11 b8       	ld.ub	r8,r8[0x3]
80006352:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006356:	5c 58       	castu.b	r8
80006358:	f0 08 10 64 	mul	r8,r8,100
8000635c:	10 0a       	add	r10,r8
		(usageShdw[0].u[idx].hrs_tens * 10) +
8000635e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006362:	4c ab       	lddpc	r11,80006488 <check_led_brd_side_lifetime+0x198>
80006364:	12 98       	mov	r8,r9
80006366:	a3 68       	lsl	r8,0x2
80006368:	12 08       	add	r8,r9
8000636a:	a1 78       	lsl	r8,0x1
8000636c:	f6 08 00 08 	add	r8,r11,r8
80006370:	2f 88       	sub	r8,-8
80006372:	11 88       	ld.ub	r8,r8[0x0]
80006374:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80006378:	5c 58       	castu.b	r8
8000637a:	10 99       	mov	r9,r8
8000637c:	12 98       	mov	r8,r9
8000637e:	a3 68       	lsl	r8,0x2
80006380:	12 08       	add	r8,r9
80006382:	a1 78       	lsl	r8,0x1
80006384:	10 0a       	add	r10,r8
		(usageShdw[0].u[idx].hrs_ones);
80006386:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000638a:	4c 0b       	lddpc	r11,80006488 <check_led_brd_side_lifetime+0x198>
8000638c:	12 98       	mov	r8,r9
8000638e:	a3 68       	lsl	r8,0x2
80006390:	12 08       	add	r8,r9
80006392:	a1 78       	lsl	r8,0x1
80006394:	f6 08 00 08 	add	r8,r11,r8
80006398:	2f 88       	sub	r8,-8
8000639a:	11 88       	ld.ub	r8,r8[0x0]
8000639c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800063a0:	5c 58       	castu.b	r8
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = ledBrdSide[sideIdx].ushdwIdx;
	hours = (usageShdw[0].u[idx].hrs_thous * 1000) +
800063a2:	f4 08 00 08 	add	r8,r10,r8
800063a6:	ef 48 ff f8 	st.w	r7[-8],r8
		

/*
 * Since we have to calculate the hours to see if the shelf is valid, finish out the calculations for the sanitizing time also. We'll need it later.
 */
	intensity = ((0.00002 * hours * hours) - (0.0699 * hours) + 92.879);
800063aa:	ee fc ff f8 	ld.w	r12,r7[-8]
800063ae:	f0 1f 00 38 	mcall	8000648c <check_led_brd_side_lifetime+0x19c>
800063b2:	e0 68 68 f1 	mov	r8,26865
800063b6:	ea 18 88 e3 	orh	r8,0x88e3
800063ba:	e0 69 f8 b5 	mov	r9,63669
800063be:	ea 19 3e f4 	orh	r9,0x3ef4
800063c2:	f0 1f 00 34 	mcall	80006490 <check_led_brd_side_lifetime+0x1a0>
800063c6:	14 98       	mov	r8,r10
800063c8:	16 99       	mov	r9,r11
800063ca:	10 92       	mov	r2,r8
800063cc:	12 93       	mov	r3,r9
800063ce:	ee fc ff f8 	ld.w	r12,r7[-8]
800063d2:	f0 1f 00 2f 	mcall	8000648c <check_led_brd_side_lifetime+0x19c>
800063d6:	14 98       	mov	r8,r10
800063d8:	16 99       	mov	r9,r11
800063da:	04 9a       	mov	r10,r2
800063dc:	06 9b       	mov	r11,r3
800063de:	f0 1f 00 2d 	mcall	80006490 <check_led_brd_side_lifetime+0x1a0>
800063e2:	14 98       	mov	r8,r10
800063e4:	16 99       	mov	r9,r11
800063e6:	10 92       	mov	r2,r8
800063e8:	12 93       	mov	r3,r9
800063ea:	ee fc ff f8 	ld.w	r12,r7[-8]
800063ee:	f0 1f 00 28 	mcall	8000648c <check_led_brd_side_lifetime+0x19c>
800063f2:	e0 68 8a db 	mov	r8,35547
800063f6:	ea 18 65 fd 	orh	r8,0x65fd
800063fa:	e0 69 e4 f7 	mov	r9,58615
800063fe:	ea 19 bf b1 	orh	r9,0xbfb1
80006402:	f0 1f 00 24 	mcall	80006490 <check_led_brd_side_lifetime+0x1a0>
80006406:	14 98       	mov	r8,r10
80006408:	16 99       	mov	r9,r11
8000640a:	04 9a       	mov	r10,r2
8000640c:	06 9b       	mov	r11,r3
8000640e:	f0 1f 00 22 	mcall	80006494 <check_led_brd_side_lifetime+0x1a4>
80006412:	14 98       	mov	r8,r10
80006414:	16 99       	mov	r9,r11
80006416:	10 9a       	mov	r10,r8
80006418:	12 9b       	mov	r11,r9
8000641a:	e0 68 4b c7 	mov	r8,19399
8000641e:	ea 18 89 37 	orh	r8,0x8937
80006422:	e0 69 38 41 	mov	r9,14401
80006426:	ea 19 40 57 	orh	r9,0x4057
8000642a:	f0 1f 00 1b 	mcall	80006494 <check_led_brd_side_lifetime+0x1a4>
8000642e:	14 98       	mov	r8,r10
80006430:	16 99       	mov	r9,r11
80006432:	10 9a       	mov	r10,r8
80006434:	12 9b       	mov	r11,r9
80006436:	f0 1f 00 19 	mcall	80006498 <check_led_brd_side_lifetime+0x1a8>
8000643a:	18 98       	mov	r8,r12
8000643c:	ef 48 ff fc 	st.w	r7[-4],r8
		
	ledBrdSide[sideIdx].sanitizeMinutes = (20 * 100)/intensity; //Shortest sanitize time is 20 minutes. Sanitize time increases as LED intensity drops with usage. Sanitize time is around 49 minutes when usage is at 2000 hours.
80006440:	ef 36 ff f0 	ld.ub	r6,r7[-16]
80006444:	ee fb ff fc 	ld.w	r11,r7[-4]
80006448:	fc 1c 44 fa 	movh	r12,0x44fa
8000644c:	f0 1f 00 14 	mcall	8000649c <check_led_brd_side_lifetime+0x1ac>
80006450:	18 98       	mov	r8,r12
80006452:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
80006456:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000645a:	48 ba       	lddpc	r10,80006484 <check_led_brd_side_lifetime+0x194>
8000645c:	0c 98       	mov	r8,r6
8000645e:	a3 68       	lsl	r8,0x2
80006460:	0c 08       	add	r8,r6
80006462:	10 0a       	add	r10,r8
80006464:	12 98       	mov	r8,r9
80006466:	b4 88       	st.b	r10[0x0],r8
	
	if (hours < 1999)
80006468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000646c:	e0 48 07 ce 	cp.w	r8,1998
80006470:	e0 8b 00 04 	brhi	80006478 <check_led_brd_side_lifetime+0x188>
	{
		return LED_BOARD_SIDE_WITHIN_LIFETIME_LIMIT;
80006474:	30 18       	mov	r8,1
80006476:	c0 28       	rjmp	8000647a <check_led_brd_side_lifetime+0x18a>
	}
	else
	{
		return LED_BOARD_SIDE_PAST_LIFETIME_LIMIT;
80006478:	30 08       	mov	r8,0
	}
}
8000647a:	10 9c       	mov	r12,r8
8000647c:	2f cd       	sub	sp,-16
8000647e:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80006482:	00 00       	add	r0,r0
80006484:	00 00       	add	r0,r0
80006486:	0b 24       	ld.uh	r4,r5++
80006488:	00 00       	add	r0,r0
8000648a:	03 88       	ld.ub	r8,r1[0x0]
8000648c:	80 00       	ld.sh	r0,r0[0x0]
8000648e:	99 48       	st.w	r12[0x10],r8
80006490:	80 00       	ld.sh	r0,r0[0x0]
80006492:	94 c4       	ld.uh	r4,r10[0x8]
80006494:	80 00       	ld.sh	r0,r0[0x0]
80006496:	98 38       	ld.sh	r8,r12[0x6]
80006498:	80 00       	ld.sh	r0,r0[0x0]
8000649a:	9b 90       	st.w	sp[0x24],r0
8000649c:	80 00       	ld.sh	r0,r0[0x0]
8000649e:	9a 30       	ld.sh	r0,sp[0x6]

800064a0 <check_led_brd_side_lifetimes>:

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
800064a0:	eb cd 40 c0 	pushm	r6-r7,lr
800064a4:	1a 97       	mov	r7,sp
800064a6:	20 2d       	sub	sp,8
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
800064a8:	30 08       	mov	r8,0
800064aa:	ef 48 ff fc 	st.w	r7[-4],r8
800064ae:	c3 78       	rjmp	8000651c <check_led_brd_side_lifetimes+0x7c>
	{
		brdIdx = ledBrdSide[i].boardIdx;
800064b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800064b4:	49 ea       	lddpc	r10,8000652c <check_led_brd_side_lifetimes+0x8c>
800064b6:	12 98       	mov	r8,r9
800064b8:	a3 68       	lsl	r8,0x2
800064ba:	12 08       	add	r8,r9
800064bc:	f4 08 00 08 	add	r8,r10,r8
800064c0:	2f c8       	sub	r8,-4
800064c2:	11 88       	ld.ub	r8,r8[0x0]
800064c4:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[brdIdx].present)
800064c8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800064cc:	49 9a       	lddpc	r10,80006530 <check_led_brd_side_lifetimes+0x90>
800064ce:	12 98       	mov	r8,r9
800064d0:	a3 78       	lsl	r8,0x3
800064d2:	12 18       	sub	r8,r9
800064d4:	a1 78       	lsl	r8,0x1
800064d6:	f4 08 00 08 	add	r8,r10,r8
800064da:	2f 88       	sub	r8,-8
800064dc:	11 88       	ld.ub	r8,r8[0x0]
800064de:	58 08       	cp.w	r8,0
800064e0:	c1 90       	breq	80006512 <check_led_brd_side_lifetimes+0x72>
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
800064e2:	ee f6 ff fc 	ld.w	r6,r7[-4]
800064e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800064ea:	5c 58       	castu.b	r8
800064ec:	10 9c       	mov	r12,r8
800064ee:	f0 1f 00 12 	mcall	80006534 <check_led_brd_side_lifetimes+0x94>
800064f2:	18 98       	mov	r8,r12
800064f4:	10 99       	mov	r9,r8
800064f6:	30 08       	mov	r8,0
800064f8:	f0 09 18 00 	cp.b	r9,r8
800064fc:	5f 09       	sreq	r9
800064fe:	48 ca       	lddpc	r10,8000652c <check_led_brd_side_lifetimes+0x8c>
80006500:	0c 98       	mov	r8,r6
80006502:	a3 68       	lsl	r8,0x2
80006504:	0c 08       	add	r8,r6
80006506:	f4 08 00 08 	add	r8,r10,r8
8000650a:	f0 ca ff fe 	sub	r10,r8,-2
8000650e:	12 98       	mov	r8,r9
80006510:	b4 88       	st.b	r10[0x0],r8
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
	unsigned char brdIdx;
	
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80006512:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006516:	2f f8       	sub	r8,-1
80006518:	ef 48 ff fc 	st.w	r7[-4],r8
8000651c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006520:	58 78       	cp.w	r8,7
80006522:	fe 9a ff c7 	brle	800064b0 <check_led_brd_side_lifetimes+0x10>
		if (ledBrd[brdIdx].present)
		{
			ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);	
		}	
	}
}
80006526:	2f ed       	sub	sp,-8
80006528:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000652c:	00 00       	add	r0,r0
8000652e:	0b 24       	ld.uh	r4,r5++
80006530:	00 00       	add	r0,r0
80006532:	02 f4       	st.b	--r1,r4
80006534:	80 00       	ld.sh	r0,r0[0x0]
80006536:	62 f0       	ld.w	r0,r1[0x3c]

80006538 <adc_process_task>:

volatile avr32_adcifa_t *adcifa = &AVR32_ADCIFA; // ADCIFA IP registers address

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
80006538:	eb cd 40 80 	pushm	r7,lr
8000653c:	1a 97       	mov	r7,sp
8000653e:	20 1d       	sub	sp,4
80006540:	18 98       	mov	r8,r12
80006542:	ef 68 ff fc 	st.b	r7[-4],r8
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
80006546:	ef 39 ff fc 	ld.ub	r9,r7[-4]
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);
8000654a:	12 98       	mov	r8,r9
8000654c:	a1 78       	lsl	r8,0x1
8000654e:	f0 09 00 09 	add	r9,r8,r9

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
80006552:	49 88       	lddpc	r8,800065b0 <adc_process_task+0x78>
80006554:	10 09       	add	r9,r8
80006556:	49 88       	lddpc	r8,800065b4 <adc_process_task+0x7c>
80006558:	70 08       	ld.w	r8,r8[0x0]
8000655a:	49 8a       	lddpc	r10,800065b8 <adc_process_task+0x80>
8000655c:	30 0b       	mov	r11,0
8000655e:	10 9c       	mov	r12,r8
80006560:	f0 1f 00 17 	mcall	800065bc <adc_process_task+0x84>
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);

	// Start ADCIFA sequencer 0
	adcifa_start_sequencer(adcifa, 0);
80006564:	49 48       	lddpc	r8,800065b4 <adc_process_task+0x7c>
80006566:	70 08       	ld.w	r8,r8[0x0]
80006568:	30 0b       	mov	r11,0
8000656a:	10 9c       	mov	r12,r8
8000656c:	f0 1f 00 15 	mcall	800065c0 <adc_process_task+0x88>
80006570:	c0 28       	rjmp	80006574 <adc_process_task+0x3c>
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
			return bluesense_buf[shelfIdx];
		}
	}
80006572:	d7 03       	nop
	// Get Values from sequencer 0
	while(1)
	{
		//TODO: need a timeout here and error handling in case the ADC gets stuck for some reason
		
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
80006574:	49 08       	lddpc	r8,800065b4 <adc_process_task+0x7c>
80006576:	70 08       	ld.w	r8,r8[0x0]
80006578:	49 39       	lddpc	r9,800065c4 <adc_process_task+0x8c>
8000657a:	49 0a       	lddpc	r10,800065b8 <adc_process_task+0x80>
8000657c:	30 0b       	mov	r11,0
8000657e:	10 9c       	mov	r12,r8
80006580:	f0 1f 00 12 	mcall	800065c8 <adc_process_task+0x90>
80006584:	18 98       	mov	r8,r12
80006586:	10 99       	mov	r9,r8
80006588:	30 28       	mov	r8,2
8000658a:	f0 09 18 00 	cp.b	r9,r8
8000658e:	cf 21       	brne	80006572 <adc_process_task+0x3a>
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
80006590:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80006594:	48 c8       	lddpc	r8,800065c4 <adc_process_task+0x8c>
80006596:	90 08       	ld.sh	r8,r8[0x0]
80006598:	48 d9       	lddpc	r9,800065cc <adc_process_task+0x94>
8000659a:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
			return bluesense_buf[shelfIdx];
8000659e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800065a2:	48 b8       	lddpc	r8,800065cc <adc_process_task+0x94>
800065a4:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
		}
	}
}
800065a8:	10 9c       	mov	r12,r8
800065aa:	2f fd       	sub	sp,-4
800065ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800065b0:	00 00       	add	r0,r0
800065b2:	00 9f       	mov	pc,r0
800065b4:	00 00       	add	r0,r0
800065b6:	00 ac       	st.w	r0++,r12
800065b8:	00 00       	add	r0,r0
800065ba:	00 98       	mov	r8,r0
800065bc:	80 00       	ld.sh	r0,r0[0x0]
800065be:	32 58       	mov	r8,37
800065c0:	80 00       	ld.sh	r0,r0[0x0]
800065c2:	37 68       	mov	r8,118
800065c4:	00 00       	add	r0,r0
800065c6:	02 f2       	st.b	--r1,r2
800065c8:	80 00       	ld.sh	r0,r0[0x0]
800065ca:	37 f4       	mov	r4,127
800065cc:	00 00       	add	r0,r0
800065ce:	02 e8       	st.h	--r1,r8

800065d0 <check_shelf_for_devices>:
	DEVICES_PRESENT
};

unsigned char check_shelf_for_devices(unsigned char shelfPosition);
unsigned char check_shelf_for_devices(unsigned char shelfPosition)
{
800065d0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800065d4:	1a 97       	mov	r7,sp
800065d6:	20 dd       	sub	sp,52
800065d8:	18 98       	mov	r8,r12
800065da:	ef 68 ff cc 	st.b	r7[-52],r8
	U16 bluesense;
	
	led_shelf(shelfPosition, LED_ON); //TODO: do we finish this task fast enough to not check the door latch in here? Can't have LEDs on if the door opens
800065de:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800065e2:	30 1b       	mov	r11,1
800065e4:	10 9c       	mov	r12,r8
800065e6:	f0 1f 00 61 	mcall	80006768 <check_shelf_for_devices+0x198>
800065ea:	33 28       	mov	r8,50
800065ec:	ef 48 ff e4 	st.w	r7[-28],r8
800065f0:	e0 68 12 00 	mov	r8,4608
800065f4:	ea 18 00 7a 	orh	r8,0x7a
800065f8:	ef 48 ff e0 	st.w	r7[-32],r8
800065fc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006600:	ef 48 ff ec 	st.w	r7[-20],r8
80006604:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006608:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000660c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80006610:	30 01       	mov	r1,0
80006612:	ee f2 ff e8 	ld.w	r2,r7[-24]
80006616:	30 03       	mov	r3,0
80006618:	e2 02 02 4a 	mul	r10,r1,r2
8000661c:	e6 00 02 48 	mul	r8,r3,r0
80006620:	10 0a       	add	r10,r8
80006622:	e0 02 06 48 	mulu.d	r8,r0,r2
80006626:	12 0a       	add	r10,r9
80006628:	14 99       	mov	r9,r10
8000662a:	e0 6a 03 e7 	mov	r10,999
8000662e:	30 0b       	mov	r11,0
80006630:	f0 0a 00 0a 	add	r10,r8,r10
80006634:	f2 0b 00 4b 	adc	r11,r9,r11
80006638:	e0 68 03 e8 	mov	r8,1000
8000663c:	30 09       	mov	r9,0
8000663e:	f0 1f 00 4c 	mcall	8000676c <check_shelf_for_devices+0x19c>
80006642:	14 98       	mov	r8,r10
80006644:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80006646:	ef 48 ff f4 	st.w	r7[-12],r8
8000664a:	ee c8 00 30 	sub	r8,r7,48
8000664e:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006652:	e1 b8 00 42 	mfsr	r8,0x108
80006656:	10 99       	mov	r9,r8
80006658:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000665c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000665e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006662:	70 09       	ld.w	r9,r8[0x0]
80006664:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006668:	10 09       	add	r9,r8
8000666a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000666e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006670:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006674:	30 08       	mov	r8,0
80006676:	f3 68 00 08 	st.b	r9[8],r8
8000667a:	ee c8 00 30 	sub	r8,r7,48
8000667e:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006682:	e1 b8 00 42 	mfsr	r8,0x108
80006686:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000668a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000668e:	f1 39 00 08 	ld.ub	r9,r8[8]
80006692:	30 28       	mov	r8,2
80006694:	f0 09 18 00 	cp.b	r9,r8
80006698:	c0 31       	brne	8000669e <check_shelf_for_devices+0xce>
    return false;
8000669a:	30 08       	mov	r8,0
8000669c:	c4 38       	rjmp	80006722 <check_shelf_for_devices+0x152>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000669e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066a2:	f1 39 00 08 	ld.ub	r9,r8[8]
800066a6:	30 18       	mov	r8,1
800066a8:	f0 09 18 00 	cp.b	r9,r8
800066ac:	c0 31       	brne	800066b2 <check_shelf_for_devices+0xe2>
    return true;
800066ae:	30 18       	mov	r8,1
800066b0:	c3 98       	rjmp	80006722 <check_shelf_for_devices+0x152>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800066b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066b6:	70 09       	ld.w	r9,r8[0x0]
800066b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066bc:	70 18       	ld.w	r8,r8[0x4]
800066be:	10 39       	cp.w	r9,r8
800066c0:	e0 88 00 1a 	brls	800066f4 <check_shelf_for_devices+0x124>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800066c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066c8:	70 08       	ld.w	r8,r8[0x0]
800066ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
800066ce:	10 39       	cp.w	r9,r8
800066d0:	c1 02       	brcc	800066f0 <check_shelf_for_devices+0x120>
800066d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066d6:	70 18       	ld.w	r8,r8[0x4]
800066d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800066dc:	10 39       	cp.w	r9,r8
800066de:	e0 88 00 09 	brls	800066f0 <check_shelf_for_devices+0x120>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800066e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800066e6:	30 18       	mov	r8,1
800066e8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800066ec:	30 18       	mov	r8,1
800066ee:	c1 a8       	rjmp	80006722 <check_shelf_for_devices+0x152>
    }
    return false;
800066f0:	30 08       	mov	r8,0
800066f2:	c1 88       	rjmp	80006722 <check_shelf_for_devices+0x152>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800066f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066f8:	70 08       	ld.w	r8,r8[0x0]
800066fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800066fe:	10 39       	cp.w	r9,r8
80006700:	c0 93       	brcs	80006712 <check_shelf_for_devices+0x142>
80006702:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006706:	70 18       	ld.w	r8,r8[0x4]
80006708:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000670c:	10 39       	cp.w	r9,r8
8000670e:	e0 88 00 09 	brls	80006720 <check_shelf_for_devices+0x150>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006712:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006716:	30 18       	mov	r8,1
80006718:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000671c:	30 18       	mov	r8,1
8000671e:	c0 28       	rjmp	80006722 <check_shelf_for_devices+0x152>
    }
    return false;
80006720:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006722:	58 08       	cp.w	r8,0
80006724:	ca b0       	breq	8000667a <check_shelf_for_devices+0xaa>
	
	cpu_delay_ms(50, 8000000);
		
	//Read bluesense for this shelf
	bluesense = 0;
80006726:	30 08       	mov	r8,0
80006728:	ef 58 ff de 	st.h	r7[-34],r8
	bluesense = adc_process_task(shelfPosition);
8000672c:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80006730:	10 9c       	mov	r12,r8
80006732:	f0 1f 00 10 	mcall	80006770 <check_shelf_for_devices+0x1a0>
80006736:	18 98       	mov	r8,r12
80006738:	ef 58 ff de 	st.h	r7[-34],r8

	led_shelf(shelfPosition, LED_OFF);
8000673c:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80006740:	30 0b       	mov	r11,0
80006742:	10 9c       	mov	r12,r8
80006744:	f0 1f 00 09 	mcall	80006768 <check_shelf_for_devices+0x198>
	

	if (bluesense > 0x800)
80006748:	ef 09 ff de 	ld.sh	r9,r7[-34]
8000674c:	e0 68 08 00 	mov	r8,2048
80006750:	f0 09 19 00 	cp.h	r9,r8
80006754:	e0 88 00 04 	brls	8000675c <check_shelf_for_devices+0x18c>
	{
		return DEVICES_PRESENT;
80006758:	30 18       	mov	r8,1
8000675a:	c0 28       	rjmp	8000675e <check_shelf_for_devices+0x18e>
	}
	else
	{
		return NO_DEVICES_PRESENT;
8000675c:	30 08       	mov	r8,0
	}
}
8000675e:	10 9c       	mov	r12,r8
80006760:	2f 3d       	sub	sp,-52
80006762:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80006766:	00 00       	add	r0,r0
80006768:	80 00       	ld.sh	r0,r0[0x0]
8000676a:	5c ec       	tnbz	r12
8000676c:	80 00       	ld.sh	r0,r0[0x0]
8000676e:	9c 1a       	ld.sh	r10,lr[0x2]
80006770:	80 00       	ld.sh	r0,r0[0x0]
80006772:	65 38       	ld.w	r8,r2[0x4c]

80006774 <check_shelves_for_devices>:

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
80006774:	eb cd 40 c0 	pushm	r6-r7,lr
80006778:	1a 97       	mov	r7,sp
8000677a:	20 1d       	sub	sp,4
	for (int i=0; i<NUM_SHELVES; i++)
8000677c:	30 08       	mov	r8,0
8000677e:	ef 48 ff fc 	st.w	r7[-4],r8
80006782:	c2 68       	rjmp	800067ce <check_shelves_for_devices+0x5a>
	{
		if (shelf[i].present)
80006784:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006788:	49 6a       	lddpc	r10,800067e0 <check_shelves_for_devices+0x6c>
8000678a:	12 98       	mov	r8,r9
8000678c:	a3 68       	lsl	r8,0x2
8000678e:	12 08       	add	r8,r9
80006790:	f4 08 00 08 	add	r8,r10,r8
80006794:	2f c8       	sub	r8,-4
80006796:	11 88       	ld.ub	r8,r8[0x0]
80006798:	58 08       	cp.w	r8,0
8000679a:	c1 50       	breq	800067c4 <check_shelves_for_devices+0x50>
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);	
8000679c:	ee f6 ff fc 	ld.w	r6,r7[-4]
800067a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067a4:	5c 58       	castu.b	r8
800067a6:	10 9c       	mov	r12,r8
800067a8:	f0 1f 00 0f 	mcall	800067e4 <check_shelves_for_devices+0x70>
800067ac:	18 98       	mov	r8,r12
800067ae:	10 99       	mov	r9,r8
800067b0:	48 ca       	lddpc	r10,800067e0 <check_shelves_for_devices+0x6c>
800067b2:	0c 98       	mov	r8,r6
800067b4:	a3 68       	lsl	r8,0x2
800067b6:	0c 08       	add	r8,r6
800067b8:	f4 08 00 08 	add	r8,r10,r8
800067bc:	f0 ca ff fd 	sub	r10,r8,-3
800067c0:	12 98       	mov	r8,r9
800067c2:	b4 88       	st.b	r10[0x0],r8
}

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
	for (int i=0; i<NUM_SHELVES; i++)
800067c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067c8:	2f f8       	sub	r8,-1
800067ca:	ef 48 ff fc 	st.w	r7[-4],r8
800067ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067d2:	58 38       	cp.w	r8,3
800067d4:	fe 9a ff d8 	brle	80006784 <check_shelves_for_devices+0x10>
		if (shelf[i].present)
		{
			shelf[i].devicesPresent = check_shelf_for_devices(i);	
		}
	}
}
800067d8:	2f fd       	sub	sp,-4
800067da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800067de:	00 00       	add	r0,r0
800067e0:	00 00       	add	r0,r0
800067e2:	03 3a       	ld.ub	r10,r1++
800067e4:	80 00       	ld.sh	r0,r0[0x0]
800067e6:	65 d0       	ld.w	r0,r2[0x74]

800067e8 <set_shelves_active_inactive>:

unsigned char topEflag0, topEflag1, botEflag0, botEflag1;

void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
800067e8:	eb cd 40 80 	pushm	r7,lr
800067ec:	1a 97       	mov	r7,sp
800067ee:	20 1d       	sub	sp,4
	numActiveShelves = 0;
800067f0:	4c e9       	lddpc	r9,80006928 <set_shelves_active_inactive+0x140>
800067f2:	30 08       	mov	r8,0
800067f4:	b2 88       	st.b	r9[0x0],r8
	/*
	 * The rest of the evaluation
	 */
	
	
	for (int i=0; i<NUM_SHELVES; i++)
800067f6:	30 08       	mov	r8,0
800067f8:	ef 48 ff fc 	st.w	r7[-4],r8
800067fc:	c1 08       	rjmp	8000681c <set_shelves_active_inactive+0x34>
	{
		shelf[i].active = SHELF_INACTIVE;
800067fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006802:	4c ba       	lddpc	r10,8000692c <set_shelves_active_inactive+0x144>
80006804:	12 98       	mov	r8,r9
80006806:	a3 68       	lsl	r8,0x2
80006808:	12 08       	add	r8,r9
8000680a:	f4 08 00 09 	add	r9,r10,r8
8000680e:	30 18       	mov	r8,1
80006810:	b2 88       	st.b	r9[0x0],r8
	/*
	 * The rest of the evaluation
	 */
	
	
	for (int i=0; i<NUM_SHELVES; i++)
80006812:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006816:	2f f8       	sub	r8,-1
80006818:	ef 48 ff fc 	st.w	r7[-4],r8
8000681c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006820:	58 38       	cp.w	r8,3
80006822:	fe 9a ff ee 	brle	800067fe <set_shelves_active_inactive+0x16>
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80006826:	4c 28       	lddpc	r8,8000692c <set_shelves_active_inactive+0x144>
80006828:	11 c8       	ld.ub	r8,r8[0x4]
8000682a:	58 08       	cp.w	r8,0
8000682c:	c1 90       	breq	8000685e <set_shelves_active_inactive+0x76>
		shelf[0].devicesPresent && 
8000682e:	4c 08       	lddpc	r8,8000692c <set_shelves_active_inactive+0x144>
80006830:	11 b8       	ld.ub	r8,r8[0x3]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80006832:	58 08       	cp.w	r8,0
80006834:	c1 50       	breq	8000685e <set_shelves_active_inactive+0x76>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
80006836:	4b f8       	lddpc	r8,80006930 <set_shelves_active_inactive+0x148>
80006838:	11 a8       	ld.ub	r8,r8[0x2]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
8000683a:	58 08       	cp.w	r8,0
8000683c:	c1 11       	brne	8000685e <set_shelves_active_inactive+0x76>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
8000683e:	4b d8       	lddpc	r8,80006930 <set_shelves_active_inactive+0x148>
80006840:	11 f8       	ld.ub	r8,r8[0x7]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (shelf[0].present &&
80006842:	58 08       	cp.w	r8,0
80006844:	c0 d1       	brne	8000685e <set_shelves_active_inactive+0x76>
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
	{
		shelf[0].active = SHELF_ACTIVE;
80006846:	4b a9       	lddpc	r9,8000692c <set_shelves_active_inactive+0x144>
80006848:	30 08       	mov	r8,0
8000684a:	b2 88       	st.b	r9[0x0],r8
		numActiveShelves++;
8000684c:	4b 78       	lddpc	r8,80006928 <set_shelves_active_inactive+0x140>
8000684e:	11 88       	ld.ub	r8,r8[0x0]
80006850:	2f f8       	sub	r8,-1
80006852:	5c 58       	castu.b	r8
80006854:	4b 59       	lddpc	r9,80006928 <set_shelves_active_inactive+0x140>
80006856:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 0 active\r\n");
80006858:	4b 7c       	lddpc	r12,80006934 <set_shelves_active_inactive+0x14c>
8000685a:	f0 1f 00 38 	mcall	80006938 <set_shelves_active_inactive+0x150>
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
8000685e:	4b 48       	lddpc	r8,8000692c <set_shelves_active_inactive+0x144>
80006860:	f1 38 00 09 	ld.ub	r8,r8[9]
80006864:	58 08       	cp.w	r8,0
80006866:	c1 c0       	breq	8000689e <set_shelves_active_inactive+0xb6>
	shelf[1].devicesPresent &&
80006868:	4b 18       	lddpc	r8,8000692c <set_shelves_active_inactive+0x144>
8000686a:	f1 38 00 08 	ld.ub	r8,r8[8]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
8000686e:	58 08       	cp.w	r8,0
80006870:	c1 70       	breq	8000689e <set_shelves_active_inactive+0xb6>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
80006872:	4b 08       	lddpc	r8,80006930 <set_shelves_active_inactive+0x148>
80006874:	f1 38 00 0c 	ld.ub	r8,r8[12]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80006878:	58 08       	cp.w	r8,0
8000687a:	c1 21       	brne	8000689e <set_shelves_active_inactive+0xb6>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
8000687c:	4a d8       	lddpc	r8,80006930 <set_shelves_active_inactive+0x148>
8000687e:	f1 38 00 11 	ld.ub	r8,r8[17]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (shelf[1].present &&
80006882:	58 08       	cp.w	r8,0
80006884:	c0 d1       	brne	8000689e <set_shelves_active_inactive+0xb6>
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
	{
		shelf[1].active = SHELF_ACTIVE;
80006886:	4a a9       	lddpc	r9,8000692c <set_shelves_active_inactive+0x144>
80006888:	30 08       	mov	r8,0
8000688a:	b2 d8       	st.b	r9[0x5],r8
		numActiveShelves++;
8000688c:	4a 78       	lddpc	r8,80006928 <set_shelves_active_inactive+0x140>
8000688e:	11 88       	ld.ub	r8,r8[0x0]
80006890:	2f f8       	sub	r8,-1
80006892:	5c 58       	castu.b	r8
80006894:	4a 59       	lddpc	r9,80006928 <set_shelves_active_inactive+0x140>
80006896:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 1 active\r\n");
80006898:	4a 9c       	lddpc	r12,8000693c <set_shelves_active_inactive+0x154>
8000689a:	f0 1f 00 28 	mcall	80006938 <set_shelves_active_inactive+0x150>
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
8000689e:	4a 48       	lddpc	r8,8000692c <set_shelves_active_inactive+0x144>
800068a0:	f1 38 00 0e 	ld.ub	r8,r8[14]
800068a4:	58 08       	cp.w	r8,0
800068a6:	c1 d0       	breq	800068e0 <set_shelves_active_inactive+0xf8>
	shelf[2].devicesPresent &&
800068a8:	4a 18       	lddpc	r8,8000692c <set_shelves_active_inactive+0x144>
800068aa:	f1 38 00 0d 	ld.ub	r8,r8[13]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
800068ae:	58 08       	cp.w	r8,0
800068b0:	c1 80       	breq	800068e0 <set_shelves_active_inactive+0xf8>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
800068b2:	4a 08       	lddpc	r8,80006930 <set_shelves_active_inactive+0x148>
800068b4:	f1 38 00 16 	ld.ub	r8,r8[22]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
800068b8:	58 08       	cp.w	r8,0
800068ba:	c1 31       	brne	800068e0 <set_shelves_active_inactive+0xf8>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
800068bc:	49 d8       	lddpc	r8,80006930 <set_shelves_active_inactive+0x148>
800068be:	f1 38 00 1b 	ld.ub	r8,r8[27]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (shelf[2].present &&
800068c2:	58 08       	cp.w	r8,0
800068c4:	c0 e1       	brne	800068e0 <set_shelves_active_inactive+0xf8>
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
	{
		shelf[2].active = SHELF_ACTIVE;
800068c6:	49 a9       	lddpc	r9,8000692c <set_shelves_active_inactive+0x144>
800068c8:	30 08       	mov	r8,0
800068ca:	f3 68 00 0a 	st.b	r9[10],r8
		numActiveShelves++;
800068ce:	49 78       	lddpc	r8,80006928 <set_shelves_active_inactive+0x140>
800068d0:	11 88       	ld.ub	r8,r8[0x0]
800068d2:	2f f8       	sub	r8,-1
800068d4:	5c 58       	castu.b	r8
800068d6:	49 59       	lddpc	r9,80006928 <set_shelves_active_inactive+0x140>
800068d8:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 2 active\r\n");
800068da:	49 ac       	lddpc	r12,80006940 <set_shelves_active_inactive+0x158>
800068dc:	f0 1f 00 17 	mcall	80006938 <set_shelves_active_inactive+0x150>
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
800068e0:	49 38       	lddpc	r8,8000692c <set_shelves_active_inactive+0x144>
800068e2:	f1 38 00 13 	ld.ub	r8,r8[19]
800068e6:	58 08       	cp.w	r8,0
800068e8:	c1 d0       	breq	80006922 <set_shelves_active_inactive+0x13a>
	shelf[3].devicesPresent &&
800068ea:	49 18       	lddpc	r8,8000692c <set_shelves_active_inactive+0x144>
800068ec:	f1 38 00 12 	ld.ub	r8,r8[18]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
800068f0:	58 08       	cp.w	r8,0
800068f2:	c1 80       	breq	80006922 <set_shelves_active_inactive+0x13a>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
800068f4:	48 f8       	lddpc	r8,80006930 <set_shelves_active_inactive+0x148>
800068f6:	f1 38 00 20 	ld.ub	r8,r8[32]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
800068fa:	58 08       	cp.w	r8,0
800068fc:	c1 31       	brne	80006922 <set_shelves_active_inactive+0x13a>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
800068fe:	48 d8       	lddpc	r8,80006930 <set_shelves_active_inactive+0x148>
80006900:	f1 38 00 25 	ld.ub	r8,r8[37]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (shelf[3].present &&
80006904:	58 08       	cp.w	r8,0
80006906:	c0 e1       	brne	80006922 <set_shelves_active_inactive+0x13a>
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
	{
		shelf[3].active = SHELF_ACTIVE;
80006908:	48 99       	lddpc	r9,8000692c <set_shelves_active_inactive+0x144>
8000690a:	30 08       	mov	r8,0
8000690c:	f3 68 00 0f 	st.b	r9[15],r8
		numActiveShelves++;
80006910:	48 68       	lddpc	r8,80006928 <set_shelves_active_inactive+0x140>
80006912:	11 88       	ld.ub	r8,r8[0x0]
80006914:	2f f8       	sub	r8,-1
80006916:	5c 58       	castu.b	r8
80006918:	48 49       	lddpc	r9,80006928 <set_shelves_active_inactive+0x140>
8000691a:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 3 active\r\n");
8000691c:	48 ac       	lddpc	r12,80006944 <set_shelves_active_inactive+0x15c>
8000691e:	f0 1f 00 07 	mcall	80006938 <set_shelves_active_inactive+0x150>
	}
}
80006922:	2f fd       	sub	sp,-4
80006924:	e3 cd 80 80 	ldm	sp++,r7,pc
80006928:	00 00       	add	r0,r0
8000692a:	0b 4e       	ld.w	lr,--r5
8000692c:	00 00       	add	r0,r0
8000692e:	03 3a       	ld.ub	r10,r1++
80006930:	00 00       	add	r0,r0
80006932:	0b 24       	ld.uh	r4,r5++
80006934:	80 00       	ld.sh	r0,r0[0x0]
80006936:	5e 44       	retge	r4
80006938:	80 00       	ld.sh	r0,r0[0x0]
8000693a:	30 14       	mov	r4,1
8000693c:	80 00       	ld.sh	r0,r0[0x0]
8000693e:	5e 58       	retlt	r8
80006940:	80 00       	ld.sh	r0,r0[0x0]
80006942:	5e 6c       	retmi	r12
80006944:	80 00       	ld.sh	r0,r0[0x0]
80006946:	5e 80       	retls	r0

80006948 <num_active_shelves>:

unsigned char num_active_shelves(void);
unsigned char num_active_shelves(void)
{
80006948:	eb cd 40 80 	pushm	r7,lr
8000694c:	1a 97       	mov	r7,sp
	return numActiveShelves;
8000694e:	48 38       	lddpc	r8,80006958 <num_active_shelves+0x10>
80006950:	11 88       	ld.ub	r8,r8[0x0]
}
80006952:	10 9c       	mov	r12,r8
80006954:	e3 cd 80 80 	ldm	sp++,r7,pc
80006958:	00 00       	add	r0,r0
8000695a:	0b 4e       	ld.w	lr,--r5

8000695c <init_sys_clocks>:
/*
 * Using RC8M (internal 8MHz)
 */
void init_sys_clocks(void);
void init_sys_clocks(void)
{
8000695c:	eb cd 40 80 	pushm	r7,lr
80006960:	1a 97       	mov	r7,sp
80006962:	20 3d       	sub	sp,12
	scif_gclk_opt_t gclkOpt = {SCIF_GCCTRL_RC8M, 0,0};
80006964:	30 28       	mov	r8,2
80006966:	ef 48 ff f4 	st.w	r7[-12],r8
8000696a:	30 08       	mov	r8,0
8000696c:	ef 48 ff f8 	st.w	r7[-8],r8
80006970:	30 08       	mov	r8,0
80006972:	ef 48 ff fc 	st.w	r7[-4],r8
	
	// Start the 8Mhz Oscillator
	scif_start_rc8M();
80006976:	f0 1f 00 0a 	mcall	8000699c <init_sys_clocks+0x40>
	// Set the main clock source as being RC8MHz.
	pm_set_mclk_source(PM_CLK_SRC_RC8M);	
8000697a:	30 5c       	mov	r12,5
8000697c:	f0 1f 00 09 	mcall	800069a0 <init_sys_clocks+0x44>


	/* put the clock out on PC19 so we can check to make sure we set it up correctly */
	//Note this code comes from ASF example AVR32 SCIF example 3
	scif_start_gclk(AVR32_SCIF_GCLK_GCLK0PIN, &gclkOpt);
80006980:	ee c8 00 0c 	sub	r8,r7,12
80006984:	10 9b       	mov	r11,r8
80006986:	30 9c       	mov	r12,9
80006988:	f0 1f 00 07 	mcall	800069a4 <init_sys_clocks+0x48>
	gpio_enable_module_pin(AVR32_SCIF_GCLK_0_1_PIN, AVR32_SCIF_GCLK_0_1_FUNCTION);
8000698c:	30 1b       	mov	r11,1
8000698e:	35 3c       	mov	r12,83
80006990:	f0 1f 00 06 	mcall	800069a8 <init_sys_clocks+0x4c>
	
}
80006994:	2f dd       	sub	sp,-12
80006996:	e3 cd 80 80 	ldm	sp++,r7,pc
8000699a:	00 00       	add	r0,r0
8000699c:	80 00       	ld.sh	r0,r0[0x0]
8000699e:	4b 18       	lddpc	r8,80006a60 <twi_init+0x68>
800069a0:	80 00       	ld.sh	r0,r0[0x0]
800069a2:	4a a8       	lddpc	r8,80006a48 <twi_init+0x50>
800069a4:	80 00       	ld.sh	r0,r0[0x0]
800069a6:	4b 98       	lddpc	r8,80006a88 <calc_sanitize_time+0x10>
800069a8:	80 00       	ld.sh	r0,r0[0x0]
800069aa:	42 88       	lddsp	r8,sp[0xa0]

800069ac <adc_process_init>:
 *
 *
 */
void adc_process_init(void);
void adc_process_init(void)
{
800069ac:	eb cd 40 80 	pushm	r7,lr
800069b0:	1a 97       	mov	r7,sp
		{INPUT3_ADC_PIN, INPUT3_ADC_FUNCTION},
		{INPUT4_ADC_PIN, INPUT4_ADC_FUNCTION}
	};

	// Assign and enable GPIO pins to the ADC function.
	gpio_enable_module(ADCIFA_GPIO_MAP,
800069b2:	30 6b       	mov	r11,6
800069b4:	48 bc       	lddpc	r12,800069e0 <adc_process_init+0x34>
800069b6:	f0 1f 00 0c 	mcall	800069e4 <adc_process_init+0x38>
			sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));

	// Get ADCIFA Factory Configuration
	adcifa_get_calibration_data(adcifa, &adc_config_t);
800069ba:	48 c8       	lddpc	r8,800069e8 <adc_process_init+0x3c>
800069bc:	70 08       	ld.w	r8,r8[0x0]
800069be:	48 cb       	lddpc	r11,800069ec <adc_process_init+0x40>
800069c0:	10 9c       	mov	r12,r8
800069c2:	f0 1f 00 0c 	mcall	800069f0 <adc_process_init+0x44>

	// Configure ADCIFA core
	adcifa_configure(adcifa, &adc_config_t, 8000000);
800069c6:	48 98       	lddpc	r8,800069e8 <adc_process_init+0x3c>
800069c8:	70 08       	ld.w	r8,r8[0x0]
800069ca:	e0 6a 12 00 	mov	r10,4608
800069ce:	ea 1a 00 7a 	orh	r10,0x7a
800069d2:	48 7b       	lddpc	r11,800069ec <adc_process_init+0x40>
800069d4:	10 9c       	mov	r12,r8
800069d6:	f0 1f 00 08 	mcall	800069f4 <adc_process_init+0x48>

}
800069da:	e3 cd 80 80 	ldm	sp++,r7,pc
800069de:	00 00       	add	r0,r0
800069e0:	80 00       	ld.sh	r0,r0[0x0]
800069e2:	a4 20       	st.h	r2[0x4],r0
800069e4:	80 00       	ld.sh	r0,r0[0x0]
800069e6:	42 18       	lddsp	r8,sp[0x84]
800069e8:	00 00       	add	r0,r0
800069ea:	00 ac       	st.w	r0++,r12
800069ec:	00 00       	add	r0,r0
800069ee:	00 84       	andn	r4,r0
800069f0:	80 00       	ld.sh	r0,r0[0x0]
800069f2:	30 60       	mov	r0,6
800069f4:	80 00       	ld.sh	r0,r0[0x0]
800069f6:	30 f4       	mov	r4,15

800069f8 <twi_init>:
 *
 *
 */
static void twi_init(void);
static void twi_init(void)
{
800069f8:	eb cd 40 80 	pushm	r7,lr
800069fc:	1a 97       	mov	r7,sp
800069fe:	20 8d       	sub	sp,32
	const gpio_map_t PCA9952_TWI_GPIO_MAP = {
		{PCA9952_TWI_SCL_PIN, PCA9952_TWI_SCL_FUNCTION},
		{PCA9952_TWI_SDA_PIN, PCA9952_TWI_SDA_FUNCTION}
	};
80006a00:	49 a9       	lddpc	r9,80006a68 <twi_init+0x70>
80006a02:	ee c8 00 10 	sub	r8,r7,16
80006a06:	20 08       	sub	r8,0
80006a08:	20 09       	sub	r9,0
80006a0a:	72 0a       	ld.w	r10,r9[0x0]
80006a0c:	91 0a       	st.w	r8[0x0],r10
80006a0e:	72 1a       	ld.w	r10,r9[0x4]
80006a10:	91 1a       	st.w	r8[0x4],r10
80006a12:	72 2a       	ld.w	r10,r9[0x8]
80006a14:	91 2a       	st.w	r8[0x8],r10
80006a16:	72 39       	ld.w	r9,r9[0xc]
80006a18:	91 39       	st.w	r8[0xc],r9
	twi_options_t PCA9952_TWI_OPTIONS = { //7apr15 make this *not* a const so we can change it and rerun twi_master_init() if necessary
		.pba_hz = FPBA_HZ,
		.speed = PCA9952_TWI_MASTER_SPEED,
		.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS, //7apr15
		.smbus        = false,
	};
80006a1a:	49 59       	lddpc	r9,80006a6c <twi_init+0x74>
80006a1c:	ee c8 00 20 	sub	r8,r7,32
80006a20:	20 08       	sub	r8,0
80006a22:	20 09       	sub	r9,0
80006a24:	72 0a       	ld.w	r10,r9[0x0]
80006a26:	91 0a       	st.w	r8[0x0],r10
80006a28:	72 1a       	ld.w	r10,r9[0x4]
80006a2a:	91 1a       	st.w	r8[0x4],r10
80006a2c:	72 2a       	ld.w	r10,r9[0x8]
80006a2e:	91 2a       	st.w	r8[0x8],r10
80006a30:	72 39       	ld.w	r9,r9[0xc]
80006a32:	91 39       	st.w	r8[0xc],r9

	// Assign I/Os to TWI.
	gpio_enable_module(PCA9952_TWI_GPIO_MAP,
80006a34:	ee c8 00 10 	sub	r8,r7,16
80006a38:	30 2b       	mov	r11,2
80006a3a:	10 9c       	mov	r12,r8
80006a3c:	f0 1f 00 0d 	mcall	80006a70 <twi_init+0x78>
	sizeof(PCA9952_TWI_GPIO_MAP) / sizeof(PCA9952_TWI_GPIO_MAP[0]));
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
80006a40:	ee c8 00 20 	sub	r8,r7,32
80006a44:	10 9b       	mov	r11,r8
80006a46:	fe 7c 38 00 	mov	r12,-51200
80006a4a:	f0 1f 00 0b 	mcall	80006a74 <twi_init+0x7c>
	
	
	PCA9952_TWI_OPTIONS.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80006a4e:	36 18       	mov	r8,97
80006a50:	ef 48 ff e8 	st.w	r7[-24],r8
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
80006a54:	ee c8 00 20 	sub	r8,r7,32
80006a58:	10 9b       	mov	r11,r8
80006a5a:	fe 7c 38 00 	mov	r12,-51200
80006a5e:	f0 1f 00 06 	mcall	80006a74 <twi_init+0x7c>
	
	
}
80006a62:	2f 8d       	sub	sp,-32
80006a64:	e3 cd 80 80 	ldm	sp++,r7,pc
80006a68:	80 00       	ld.sh	r0,r0[0x0]
80006a6a:	a4 00       	st.h	r2[0x0],r0
80006a6c:	80 00       	ld.sh	r0,r0[0x0]
80006a6e:	a4 10       	st.h	r2[0x2],r0
80006a70:	80 00       	ld.sh	r0,r0[0x0]
80006a72:	42 18       	lddsp	r8,sp[0x84]
80006a74:	80 00       	ld.sh	r0,r0[0x0]
80006a76:	4e 5c       	lddpc	r12,80006c08 <usage_idx+0x90>

80006a78 <calc_sanitize_time>:
	STATE_SHUTDOWN_PROCESSES
};

unsigned char calc_sanitize_time(unsigned char shelfIdx);
unsigned char calc_sanitize_time(unsigned char shelfIdx)
{
80006a78:	eb cd 40 80 	pushm	r7,lr
80006a7c:	1a 97       	mov	r7,sp
80006a7e:	20 3d       	sub	sp,12
80006a80:	18 98       	mov	r8,r12
80006a82:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char uSideMinutes, lSideMinutes, minutes, boardIdx, sideIdx;
	
	boardIdx = shelf[shelfIdx].tLedIdx;							//top board in the shelf
80006a86:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006a8a:	4a da       	lddpc	r10,80006b3c <calc_sanitize_time+0xc4>
80006a8c:	12 98       	mov	r8,r9
80006a8e:	a3 68       	lsl	r8,0x2
80006a90:	12 08       	add	r8,r9
80006a92:	f4 08 00 08 	add	r8,r10,r8
80006a96:	2f f8       	sub	r8,-1
80006a98:	11 88       	ld.ub	r8,r8[0x0]
80006a9a:	ef 68 ff fe 	st.b	r7[-2],r8
	sideIdx = ledBrd[boardIdx].lSideIdx;						//lower side of the top board
80006a9e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006aa2:	4a 8a       	lddpc	r10,80006b40 <calc_sanitize_time+0xc8>
80006aa4:	12 98       	mov	r8,r9
80006aa6:	a3 78       	lsl	r8,0x3
80006aa8:	12 18       	sub	r8,r9
80006aaa:	a1 78       	lsl	r8,0x1
80006aac:	f4 08 00 08 	add	r8,r10,r8
80006ab0:	2f 58       	sub	r8,-11
80006ab2:	11 88       	ld.ub	r8,r8[0x0]
80006ab4:	ef 68 ff ff 	st.b	r7[-1],r8
	lSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
80006ab8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006abc:	4a 2a       	lddpc	r10,80006b44 <calc_sanitize_time+0xcc>
80006abe:	12 98       	mov	r8,r9
80006ac0:	a3 68       	lsl	r8,0x2
80006ac2:	12 08       	add	r8,r9
80006ac4:	f4 08 00 08 	add	r8,r10,r8
80006ac8:	11 88       	ld.ub	r8,r8[0x0]
80006aca:	ef 68 ff fc 	st.b	r7[-4],r8
	

	boardIdx = shelf[shelfIdx].bLedIdx;							//bottom board in the shelf					
80006ace:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006ad2:	49 ba       	lddpc	r10,80006b3c <calc_sanitize_time+0xc4>
80006ad4:	12 98       	mov	r8,r9
80006ad6:	a3 68       	lsl	r8,0x2
80006ad8:	12 08       	add	r8,r9
80006ada:	f4 08 00 08 	add	r8,r10,r8
80006ade:	2f e8       	sub	r8,-2
80006ae0:	11 88       	ld.ub	r8,r8[0x0]
80006ae2:	ef 68 ff fe 	st.b	r7[-2],r8
	sideIdx = ledBrd[boardIdx].uSideIdx;						//upper side of the bottom board
80006ae6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006aea:	49 6a       	lddpc	r10,80006b40 <calc_sanitize_time+0xc8>
80006aec:	12 98       	mov	r8,r9
80006aee:	a3 78       	lsl	r8,0x3
80006af0:	12 18       	sub	r8,r9
80006af2:	a1 78       	lsl	r8,0x1
80006af4:	f4 08 00 08 	add	r8,r10,r8
80006af8:	2f 68       	sub	r8,-10
80006afa:	11 88       	ld.ub	r8,r8[0x0]
80006afc:	ef 68 ff ff 	st.b	r7[-1],r8
	uSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
80006b00:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006b04:	49 0a       	lddpc	r10,80006b44 <calc_sanitize_time+0xcc>
80006b06:	12 98       	mov	r8,r9
80006b08:	a3 68       	lsl	r8,0x2
80006b0a:	12 08       	add	r8,r9
80006b0c:	f4 08 00 08 	add	r8,r10,r8
80006b10:	11 88       	ld.ub	r8,r8[0x0]
80006b12:	ef 68 ff fb 	st.b	r7[-5],r8

	minutes = (uSideMinutes >= lSideMinutes) ? uSideMinutes : lSideMinutes; //choose the sanitize time for the more worn-out leds
80006b16:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006b1a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80006b1e:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80006b22:	f0 0a 18 00 	cp.b	r10,r8
80006b26:	f2 08 17 20 	movhs	r8,r9
80006b2a:	ef 68 ff fd 	st.b	r7[-3],r8
	
	return (minutes);
80006b2e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
	
}
80006b32:	10 9c       	mov	r12,r8
80006b34:	2f dd       	sub	sp,-12
80006b36:	e3 cd 80 80 	ldm	sp++,r7,pc
80006b3a:	00 00       	add	r0,r0
80006b3c:	00 00       	add	r0,r0
80006b3e:	03 3a       	ld.ub	r10,r1++
80006b40:	00 00       	add	r0,r0
80006b42:	02 f4       	st.b	--r1,r4
80006b44:	00 00       	add	r0,r0
80006b46:	0b 24       	ld.uh	r4,r5++

80006b48 <door_latch_open_kill_all_shelves>:


void door_latch_open_kill_all_shelves(void);
void door_latch_open_kill_all_shelves(void)
{
80006b48:	eb cd 40 80 	pushm	r7,lr
80006b4c:	1a 97       	mov	r7,sp
	led_shelf(0, LED_OFF);
80006b4e:	30 0b       	mov	r11,0
80006b50:	30 0c       	mov	r12,0
80006b52:	f0 1f 00 09 	mcall	80006b74 <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(1, LED_OFF);
80006b56:	30 0b       	mov	r11,0
80006b58:	30 1c       	mov	r12,1
80006b5a:	f0 1f 00 07 	mcall	80006b74 <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(2, LED_OFF);
80006b5e:	30 0b       	mov	r11,0
80006b60:	30 2c       	mov	r12,2
80006b62:	f0 1f 00 05 	mcall	80006b74 <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(3, LED_OFF);
80006b66:	30 0b       	mov	r11,0
80006b68:	30 3c       	mov	r12,3
80006b6a:	f0 1f 00 03 	mcall	80006b74 <door_latch_open_kill_all_shelves+0x2c>
}
80006b6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006b72:	00 00       	add	r0,r0
80006b74:	80 00       	ld.sh	r0,r0[0x0]
80006b76:	5c ec       	tnbz	r12

80006b78 <usage_idx>:

#define STRINGS_MATCH 0

unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn);
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn)
{
80006b78:	eb cd 40 80 	pushm	r7,lr
80006b7c:	1a 97       	mov	r7,sp
80006b7e:	20 5d       	sub	sp,20
80006b80:	18 99       	mov	r9,r12
80006b82:	ef 4b ff f0 	st.w	r7[-16],r11
80006b86:	14 98       	mov	r8,r10
80006b88:	ef 69 ff f4 	st.b	r7[-12],r9
80006b8c:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char tmpBoardId[6];
	
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80006b90:	30 08       	mov	r8,0
80006b92:	ef 68 ff ff 	st.b	r7[-1],r8
80006b96:	cf b8       	rjmp	80006d8c <usage_idx+0x214>
		if ((strncmp((char*)idPtr, (char*)(&usageShdw[sel].u[i].id[0]),6)) && (usageShdw[sel].u[i].top_botn == top_botn) == STRINGS_MATCH)
		{
			return (i); //Found a match!
		}
#endif
		if (usageShdw[sel].u[i].slotFilled)
80006b98:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006b9c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006ba0:	fe fb 02 08 	ld.w	r11,pc[520]
80006ba4:	12 98       	mov	r8,r9
80006ba6:	a3 68       	lsl	r8,0x2
80006ba8:	12 08       	add	r8,r9
80006baa:	a1 78       	lsl	r8,0x1
80006bac:	14 99       	mov	r9,r10
80006bae:	a5 79       	lsl	r9,0x5
80006bb0:	14 19       	sub	r9,r10
80006bb2:	f2 0a 15 05 	lsl	r10,r9,0x5
80006bb6:	12 1a       	sub	r10,r9
80006bb8:	14 08       	add	r8,r10
80006bba:	f6 08 00 08 	add	r8,r11,r8
80006bbe:	2f c8       	sub	r8,-4
80006bc0:	11 a8       	ld.ub	r8,r8[0x2]
80006bc2:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80006bc6:	5c 58       	castu.b	r8
80006bc8:	e0 80 00 dd 	breq	80006d82 <usage_idx+0x20a>
		{
			tmpBoardId[0] = *(idPtr+0);
80006bcc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006bd0:	11 88       	ld.ub	r8,r8[0x0]
80006bd2:	ef 68 ff f8 	st.b	r7[-8],r8
			tmpBoardId[1] = *(idPtr+1);
80006bd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006bda:	2f f8       	sub	r8,-1
80006bdc:	11 88       	ld.ub	r8,r8[0x0]
80006bde:	ef 68 ff f9 	st.b	r7[-7],r8
			tmpBoardId[2] = *(idPtr+2);
80006be2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006be6:	2f e8       	sub	r8,-2
80006be8:	11 88       	ld.ub	r8,r8[0x0]
80006bea:	ef 68 ff fa 	st.b	r7[-6],r8
			tmpBoardId[3] = *(idPtr+3);
80006bee:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006bf2:	2f d8       	sub	r8,-3
80006bf4:	11 88       	ld.ub	r8,r8[0x0]
80006bf6:	ef 68 ff fb 	st.b	r7[-5],r8
			tmpBoardId[4] = *(idPtr+4);
80006bfa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006bfe:	2f c8       	sub	r8,-4
80006c00:	11 88       	ld.ub	r8,r8[0x0]
80006c02:	ef 68 ff fc 	st.b	r7[-4],r8
			tmpBoardId[5] = *(idPtr+5);
80006c06:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006c0a:	2f b8       	sub	r8,-5
80006c0c:	11 88       	ld.ub	r8,r8[0x0]
80006c0e:	ef 68 ff fd 	st.b	r7[-3],r8
			
		
			if (tmpBoardId[0] == usageShdw[sel].u[i].id[0]) {
80006c12:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80006c16:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006c1a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006c1e:	4e 3c       	lddpc	r12,80006da8 <usage_idx+0x230>
80006c20:	12 98       	mov	r8,r9
80006c22:	a3 68       	lsl	r8,0x2
80006c24:	12 08       	add	r8,r9
80006c26:	a1 78       	lsl	r8,0x1
80006c28:	14 99       	mov	r9,r10
80006c2a:	a5 79       	lsl	r9,0x5
80006c2c:	14 19       	sub	r9,r10
80006c2e:	f2 0a 15 05 	lsl	r10,r9,0x5
80006c32:	12 1a       	sub	r10,r9
80006c34:	14 08       	add	r8,r10
80006c36:	f8 08 00 08 	add	r8,r12,r8
80006c3a:	11 88       	ld.ub	r8,r8[0x0]
80006c3c:	f0 0b 18 00 	cp.b	r11,r8
80006c40:	e0 81 00 a1 	brne	80006d82 <usage_idx+0x20a>
				if (tmpBoardId[1] == usageShdw[sel].u[i].id[1]) {
80006c44:	ef 3b ff f9 	ld.ub	r11,r7[-7]
80006c48:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006c4c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006c50:	4d 6c       	lddpc	r12,80006da8 <usage_idx+0x230>
80006c52:	12 98       	mov	r8,r9
80006c54:	a3 68       	lsl	r8,0x2
80006c56:	12 08       	add	r8,r9
80006c58:	a1 78       	lsl	r8,0x1
80006c5a:	14 99       	mov	r9,r10
80006c5c:	a5 79       	lsl	r9,0x5
80006c5e:	14 19       	sub	r9,r10
80006c60:	f2 0a 15 05 	lsl	r10,r9,0x5
80006c64:	12 1a       	sub	r10,r9
80006c66:	14 08       	add	r8,r10
80006c68:	f8 08 00 08 	add	r8,r12,r8
80006c6c:	2f f8       	sub	r8,-1
80006c6e:	11 88       	ld.ub	r8,r8[0x0]
80006c70:	f0 0b 18 00 	cp.b	r11,r8
80006c74:	e0 81 00 87 	brne	80006d82 <usage_idx+0x20a>
					if (tmpBoardId[2] == usageShdw[sel].u[i].id[2]) {
80006c78:	ef 3b ff fa 	ld.ub	r11,r7[-6]
80006c7c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006c80:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80006c84:	4c 9c       	lddpc	r12,80006da8 <usage_idx+0x230>
80006c86:	14 98       	mov	r8,r10
80006c88:	a3 68       	lsl	r8,0x2
80006c8a:	14 08       	add	r8,r10
80006c8c:	2f f8       	sub	r8,-1
80006c8e:	f0 0a 15 01 	lsl	r10,r8,0x1
80006c92:	12 98       	mov	r8,r9
80006c94:	a5 78       	lsl	r8,0x5
80006c96:	12 18       	sub	r8,r9
80006c98:	f0 09 15 05 	lsl	r9,r8,0x5
80006c9c:	10 19       	sub	r9,r8
80006c9e:	f4 09 00 08 	add	r8,r10,r9
80006ca2:	f8 08 00 08 	add	r8,r12,r8
80006ca6:	11 88       	ld.ub	r8,r8[0x0]
80006ca8:	f0 0b 18 00 	cp.b	r11,r8
80006cac:	c6 b1       	brne	80006d82 <usage_idx+0x20a>
						if (tmpBoardId[3] == usageShdw[sel].u[i].id[3]) {
80006cae:	ef 3b ff fb 	ld.ub	r11,r7[-5]
80006cb2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006cb6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006cba:	4b cc       	lddpc	r12,80006da8 <usage_idx+0x230>
80006cbc:	12 98       	mov	r8,r9
80006cbe:	a3 68       	lsl	r8,0x2
80006cc0:	12 08       	add	r8,r9
80006cc2:	a1 78       	lsl	r8,0x1
80006cc4:	14 99       	mov	r9,r10
80006cc6:	a5 79       	lsl	r9,0x5
80006cc8:	14 19       	sub	r9,r10
80006cca:	f2 0a 15 05 	lsl	r10,r9,0x5
80006cce:	12 1a       	sub	r10,r9
80006cd0:	14 08       	add	r8,r10
80006cd2:	f8 08 00 08 	add	r8,r12,r8
80006cd6:	2f d8       	sub	r8,-3
80006cd8:	11 88       	ld.ub	r8,r8[0x0]
80006cda:	f0 0b 18 00 	cp.b	r11,r8
80006cde:	c5 21       	brne	80006d82 <usage_idx+0x20a>
							if (tmpBoardId[4] == usageShdw[sel].u[i].id[4]) {
80006ce0:	ef 3b ff fc 	ld.ub	r11,r7[-4]
80006ce4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006ce8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006cec:	4a fc       	lddpc	r12,80006da8 <usage_idx+0x230>
80006cee:	12 98       	mov	r8,r9
80006cf0:	a3 68       	lsl	r8,0x2
80006cf2:	12 08       	add	r8,r9
80006cf4:	a1 78       	lsl	r8,0x1
80006cf6:	14 99       	mov	r9,r10
80006cf8:	a5 79       	lsl	r9,0x5
80006cfa:	14 19       	sub	r9,r10
80006cfc:	f2 0a 15 05 	lsl	r10,r9,0x5
80006d00:	12 1a       	sub	r10,r9
80006d02:	14 08       	add	r8,r10
80006d04:	f8 08 00 08 	add	r8,r12,r8
80006d08:	2f c8       	sub	r8,-4
80006d0a:	11 88       	ld.ub	r8,r8[0x0]
80006d0c:	f0 0b 18 00 	cp.b	r11,r8
80006d10:	c3 91       	brne	80006d82 <usage_idx+0x20a>
								if (tmpBoardId[5] == usageShdw[sel].u[i].id[5]) {
80006d12:	ef 3b ff fd 	ld.ub	r11,r7[-3]
80006d16:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006d1a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006d1e:	4a 3c       	lddpc	r12,80006da8 <usage_idx+0x230>
80006d20:	12 98       	mov	r8,r9
80006d22:	a3 68       	lsl	r8,0x2
80006d24:	12 08       	add	r8,r9
80006d26:	a1 78       	lsl	r8,0x1
80006d28:	14 99       	mov	r9,r10
80006d2a:	a5 79       	lsl	r9,0x5
80006d2c:	14 19       	sub	r9,r10
80006d2e:	f2 0a 15 05 	lsl	r10,r9,0x5
80006d32:	12 1a       	sub	r10,r9
80006d34:	14 08       	add	r8,r10
80006d36:	f8 08 00 08 	add	r8,r12,r8
80006d3a:	2f b8       	sub	r8,-5
80006d3c:	11 88       	ld.ub	r8,r8[0x0]
80006d3e:	f0 0b 18 00 	cp.b	r11,r8
80006d42:	c2 01       	brne	80006d82 <usage_idx+0x20a>
									if (top_botn == usageShdw[sel].u[i].top_botn)
80006d44:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006d48:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006d4c:	49 7b       	lddpc	r11,80006da8 <usage_idx+0x230>
80006d4e:	12 98       	mov	r8,r9
80006d50:	a3 68       	lsl	r8,0x2
80006d52:	12 08       	add	r8,r9
80006d54:	a1 78       	lsl	r8,0x1
80006d56:	14 99       	mov	r9,r10
80006d58:	a5 79       	lsl	r9,0x5
80006d5a:	14 19       	sub	r9,r10
80006d5c:	f2 0a 15 05 	lsl	r10,r9,0x5
80006d60:	12 1a       	sub	r10,r9
80006d62:	14 08       	add	r8,r10
80006d64:	f6 08 00 08 	add	r8,r11,r8
80006d68:	2f c8       	sub	r8,-4
80006d6a:	11 a8       	ld.ub	r8,r8[0x2]
80006d6c:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80006d70:	5c 58       	castu.b	r8
80006d72:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80006d76:	f0 09 18 00 	cp.b	r9,r8
80006d7a:	c0 41       	brne	80006d82 <usage_idx+0x20a>
									{
										return (i); //found a match!
80006d7c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006d80:	c0 f8       	rjmp	80006d9e <usage_idx+0x226>
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn);
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn)
{
	unsigned char tmpBoardId[6];
	
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80006d82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006d86:	2f f8       	sub	r8,-1
80006d88:	ef 68 ff ff 	st.b	r7[-1],r8
80006d8c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006d90:	35 f8       	mov	r8,95
80006d92:	f0 09 18 00 	cp.b	r9,r8
80006d96:	fe 98 ff 01 	brls	80006b98 <usage_idx+0x20>
				} //tmpBoardId[1]
			} //tmpBoardId[0]
		} //if slotFilled (don't check against slots that haven't been assigned
	} //for each slot in usageShdw[sel]
	
	return NO_LED_BOARD_PRESENT; //no match found
80006d9a:	e0 68 00 ff 	mov	r8,255
}
80006d9e:	10 9c       	mov	r12,r8
80006da0:	2f bd       	sub	sp,-20
80006da2:	e3 cd 80 80 	ldm	sp++,r7,pc
80006da6:	00 00       	add	r0,r0
80006da8:	00 00       	add	r0,r0
80006daa:	03 88       	ld.ub	r8,r1[0x0]

80006dac <load_usage_indeces>:

void load_usage_indeces(unsigned char sel)
{
80006dac:	eb cd 40 e0 	pushm	r5-r7,lr
80006db0:	1a 97       	mov	r7,sp
80006db2:	20 3d       	sub	sp,12
80006db4:	18 98       	mov	r8,r12
80006db6:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char top_botn, brdIdx;
		
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80006dba:	30 08       	mov	r8,0
80006dbc:	ef 48 ff fc 	st.w	r7[-4],r8
80006dc0:	c5 58       	rjmp	80006e6a <load_usage_indeces+0xbe>
	{
		brdIdx = ledBrdSide[i].boardIdx;
80006dc2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006dc6:	4a ea       	lddpc	r10,80006e7c <load_usage_indeces+0xd0>
80006dc8:	12 98       	mov	r8,r9
80006dca:	a3 68       	lsl	r8,0x2
80006dcc:	12 08       	add	r8,r9
80006dce:	f4 08 00 08 	add	r8,r10,r8
80006dd2:	2f c8       	sub	r8,-4
80006dd4:	11 88       	ld.ub	r8,r8[0x0]
80006dd6:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (ledBrd[brdIdx].present)
80006dda:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80006dde:	4a 9a       	lddpc	r10,80006e80 <load_usage_indeces+0xd4>
80006de0:	12 98       	mov	r8,r9
80006de2:	a3 78       	lsl	r8,0x3
80006de4:	12 18       	sub	r8,r9
80006de6:	a1 78       	lsl	r8,0x1
80006de8:	f4 08 00 08 	add	r8,r10,r8
80006dec:	2f 88       	sub	r8,-8
80006dee:	11 88       	ld.ub	r8,r8[0x0]
80006df0:	58 08       	cp.w	r8,0
80006df2:	c2 c0       	breq	80006e4a <load_usage_indeces+0x9e>
		{
			top_botn = i%2;
80006df4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006df8:	f2 08 14 1f 	asr	r8,r9,0x1f
80006dfc:	bf 98       	lsr	r8,0x1f
80006dfe:	10 09       	add	r9,r8
80006e00:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80006e04:	f2 08 01 08 	sub	r8,r9,r8
80006e08:	ef 68 ff fa 	st.b	r7[-6],r8
			
			usageIdx[sel][i] = usage_idx(sel, &ledBrd[brdIdx].id[0], top_botn); //TODO: should change this nomenclature to upper/lower, we are talking about board sides here, not which board in the shelf, be consistent
80006e0c:	ef 35 ff f4 	ld.ub	r5,r7[-12]
80006e10:	ee f6 ff fc 	ld.w	r6,r7[-4]
80006e14:	ef 3a ff fa 	ld.ub	r10,r7[-6]
80006e18:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80006e1c:	12 98       	mov	r8,r9
80006e1e:	a3 78       	lsl	r8,0x3
80006e20:	12 18       	sub	r8,r9
80006e22:	a1 78       	lsl	r8,0x1
80006e24:	49 79       	lddpc	r9,80006e80 <load_usage_indeces+0xd4>
80006e26:	12 08       	add	r8,r9
80006e28:	f0 c9 ff ff 	sub	r9,r8,-1
80006e2c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006e30:	12 9b       	mov	r11,r9
80006e32:	10 9c       	mov	r12,r8
80006e34:	f0 1f 00 14 	mcall	80006e84 <load_usage_indeces+0xd8>
80006e38:	18 98       	mov	r8,r12
80006e3a:	49 4a       	lddpc	r10,80006e88 <load_usage_indeces+0xdc>
80006e3c:	ea 09 15 03 	lsl	r9,r5,0x3
80006e40:	0c 09       	add	r9,r6
80006e42:	f4 09 00 09 	add	r9,r10,r9
80006e46:	b2 88       	st.b	r9[0x0],r8
80006e48:	c0 c8       	rjmp	80006e60 <load_usage_indeces+0xb4>
		}
		else
		{
			usageIdx[sel][i] = NO_LED_BOARD_PRESENT;
80006e4a:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006e4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e52:	48 e9       	lddpc	r9,80006e88 <load_usage_indeces+0xdc>
80006e54:	a3 7a       	lsl	r10,0x3
80006e56:	f4 08 00 08 	add	r8,r10,r8
80006e5a:	10 09       	add	r9,r8
80006e5c:	3f f8       	mov	r8,-1
80006e5e:	b2 88       	st.b	r9[0x0],r8

void load_usage_indeces(unsigned char sel)
{
	unsigned char top_botn, brdIdx;
		
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80006e60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e64:	2f f8       	sub	r8,-1
80006e66:	ef 48 ff fc 	st.w	r7[-4],r8
80006e6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e6e:	58 78       	cp.w	r8,7
80006e70:	fe 9a ff a9 	brle	80006dc2 <load_usage_indeces+0x16>
		else
		{
			usageIdx[sel][i] = NO_LED_BOARD_PRESENT;
		}
	}
}
80006e74:	2f dd       	sub	sp,-12
80006e76:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006e7a:	00 00       	add	r0,r0
80006e7c:	00 00       	add	r0,r0
80006e7e:	0b 24       	ld.uh	r4,r5++
80006e80:	00 00       	add	r0,r0
80006e82:	02 f4       	st.b	--r1,r4
80006e84:	80 00       	ld.sh	r0,r0[0x0]
80006e86:	6b 78       	ld.w	r8,r5[0x5c]
80006e88:	00 00       	add	r0,r0
80006e8a:	03 69       	ld.uh	r9,--r1

80006e8c <read_usage_struct>:

enum{CHECKSUM_INVALID, CHECKSUM_VALID};

unsigned char read_usage_struct(unsigned char sel)
{
80006e8c:	eb cd 40 80 	pushm	r7,lr
80006e90:	1a 97       	mov	r7,sp
80006e92:	20 2d       	sub	sp,8
80006e94:	18 98       	mov	r8,r12
80006e96:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char tmpCsum;
	
	if (sel == 0)
80006e9a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006e9e:	30 08       	mov	r8,0
80006ea0:	f0 09 18 00 	cp.b	r9,r8
80006ea4:	c0 81       	brne	80006eb4 <read_usage_struct+0x28>
	{
		memcpy(&usageShdw[0],serialIdAndUsageFlashZero, sizeof(usageShdw[0]));
80006ea6:	e0 6a 03 c1 	mov	r10,961
80006eaa:	49 9b       	lddpc	r11,80006f0c <read_usage_struct+0x80>
80006eac:	49 9c       	lddpc	r12,80006f10 <read_usage_struct+0x84>
80006eae:	f0 1f 00 1a 	mcall	80006f14 <read_usage_struct+0x88>
80006eb2:	c0 a8       	rjmp	80006ec6 <read_usage_struct+0x3a>
	}
	else
	{
		memcpy(&usageShdw[1],serialIdAndUsageFlashOne, sizeof(usageShdw[1]));
80006eb4:	49 78       	lddpc	r8,80006f10 <read_usage_struct+0x84>
80006eb6:	f0 c8 fc 3f 	sub	r8,r8,-961
80006eba:	e0 6a 03 c1 	mov	r10,961
80006ebe:	49 7b       	lddpc	r11,80006f18 <read_usage_struct+0x8c>
80006ec0:	10 9c       	mov	r12,r8
80006ec2:	f0 1f 00 15 	mcall	80006f14 <read_usage_struct+0x88>
	}
	
	tmpCsum = calc_usage_csum(sel);
80006ec6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006eca:	10 9c       	mov	r12,r8
80006ecc:	f0 1f 00 14 	mcall	80006f1c <read_usage_struct+0x90>
80006ed0:	18 98       	mov	r8,r12
80006ed2:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (tmpCsum == usageShdw[sel].csum)
80006ed6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006eda:	48 ea       	lddpc	r10,80006f10 <read_usage_struct+0x84>
80006edc:	12 98       	mov	r8,r9
80006ede:	a5 78       	lsl	r8,0x5
80006ee0:	12 18       	sub	r8,r9
80006ee2:	f0 09 15 05 	lsl	r9,r8,0x5
80006ee6:	10 19       	sub	r9,r8
80006ee8:	f4 09 00 08 	add	r8,r10,r9
80006eec:	f0 c8 fc 40 	sub	r8,r8,-960
80006ef0:	11 88       	ld.ub	r8,r8[0x0]
80006ef2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006ef6:	f0 09 18 00 	cp.b	r9,r8
80006efa:	c0 31       	brne	80006f00 <read_usage_struct+0x74>
	{
		return CHECKSUM_VALID;
80006efc:	30 18       	mov	r8,1
80006efe:	c0 28       	rjmp	80006f02 <read_usage_struct+0x76>
	}
	else
	{
		return CHECKSUM_INVALID;
80006f00:	30 08       	mov	r8,0
	}
}
80006f02:	10 9c       	mov	r12,r8
80006f04:	2f ed       	sub	sp,-8
80006f06:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f0a:	00 00       	add	r0,r0
80006f0c:	80 07       	ld.sh	r7,r0[0x0]
80006f0e:	f0 00 00 00 	add	r0,r8,r0
80006f12:	03 88       	ld.ub	r8,r1[0x0]
80006f14:	80 00       	ld.sh	r0,r0[0x0]
80006f16:	9e 7e       	ld.sh	lr,pc[0xe]
80006f18:	80 07       	ld.sh	r7,r0[0x0]
80006f1a:	f8 00       	*unknown*
80006f1c:	80 00       	ld.sh	r0,r0[0x0]
80006f1e:	72 0c       	ld.w	r12,r9[0x0]

80006f20 <test_flash>:

enum {SUCCESS, ERROR};

unsigned char test_flash(unsigned char sel)
{
80006f20:	eb cd 40 80 	pushm	r7,lr
80006f24:	1a 97       	mov	r7,sp
80006f26:	20 8d       	sub	sp,32
80006f28:	18 98       	mov	r8,r12
80006f2a:	ef 68 ff e0 	st.b	r7[-32],r8
	volatile void* memPtr;
	unsigned char pattern[4] = {0xFF, 0x00, 0xAA, 0x55}, ubyte;
80006f2e:	4b 28       	lddpc	r8,80006ff4 <test_flash+0xd4>
80006f30:	70 08       	ld.w	r8,r8[0x0]
80006f32:	ef 48 ff e4 	st.w	r7[-28],r8
	unsigned char *ubPtr;
	unsigned long memSize;
	
	memSize = sizeof(usageShdw[sel]);
80006f36:	e0 68 03 c1 	mov	r8,961
80006f3a:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (sel == 0)
80006f3e:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80006f42:	30 08       	mov	r8,0
80006f44:	f0 09 18 00 	cp.b	r9,r8
80006f48:	c0 51       	brne	80006f52 <test_flash+0x32>
	{
		memPtr = &serialIdAndUsageFlashZero;
80006f4a:	4a c8       	lddpc	r8,80006ff8 <test_flash+0xd8>
80006f4c:	ef 48 ff e8 	st.w	r7[-24],r8
80006f50:	c0 48       	rjmp	80006f58 <test_flash+0x38>
	}
	else
	{
		memPtr = &serialIdAndUsageFlashOne;
80006f52:	4a b8       	lddpc	r8,80006ffc <test_flash+0xdc>
80006f54:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
80006f58:	30 08       	mov	r8,0
80006f5a:	ef 68 ff fb 	st.b	r7[-5],r8
80006f5e:	c3 e8       	rjmp	80006fda <test_flash+0xba>
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
80006f60:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006f64:	ee 08 00 08 	add	r8,r7,r8
80006f68:	f1 38 ff e4 	ld.ub	r8,r8[-28]
80006f6c:	30 19       	mov	r9,1
80006f6e:	ee fa ff f4 	ld.w	r10,r7[-12]
80006f72:	10 9b       	mov	r11,r8
80006f74:	ee fc ff e8 	ld.w	r12,r7[-24]
80006f78:	f0 1f 00 22 	mcall	80007000 <test_flash+0xe0>
	
		ubPtr = (unsigned char*) memPtr;
80006f7c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006f80:	ef 48 ff f0 	st.w	r7[-16],r8
		for (unsigned long j=0; j<memSize; j++)
80006f84:	30 08       	mov	r8,0
80006f86:	ef 48 ff fc 	st.w	r7[-4],r8
80006f8a:	c1 d8       	rjmp	80006fc4 <test_flash+0xa4>
		{
			ubyte = (*ubPtr);
80006f8c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006f90:	11 88       	ld.ub	r8,r8[0x0]
80006f92:	ef 68 ff ef 	st.b	r7[-17],r8
			if (ubyte != pattern[i])
80006f96:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006f9a:	ee 08 00 08 	add	r8,r7,r8
80006f9e:	f1 38 ff e4 	ld.ub	r8,r8[-28]
80006fa2:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80006fa6:	f0 09 18 00 	cp.b	r9,r8
80006faa:	c0 30       	breq	80006fb0 <test_flash+0x90>
			{
				return ERROR;
80006fac:	30 18       	mov	r8,1
80006fae:	c1 e8       	rjmp	80006fea <test_flash+0xca>
			}
			ubPtr++;
80006fb0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006fb4:	2f f8       	sub	r8,-1
80006fb6:	ef 48 ff f0 	st.w	r7[-16],r8
	for (unsigned char i=0; i<4; i++) //4 patterns to test
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
	
		ubPtr = (unsigned char*) memPtr;
		for (unsigned long j=0; j<memSize; j++)
80006fba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006fbe:	2f f8       	sub	r8,-1
80006fc0:	ef 48 ff fc 	st.w	r7[-4],r8
80006fc4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006fc8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006fcc:	10 39       	cp.w	r9,r8
80006fce:	cd f3       	brcs	80006f8c <test_flash+0x6c>
	else
	{
		memPtr = &serialIdAndUsageFlashOne;
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
80006fd0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006fd4:	2f f8       	sub	r8,-1
80006fd6:	ef 68 ff fb 	st.b	r7[-5],r8
80006fda:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80006fde:	30 38       	mov	r8,3
80006fe0:	f0 09 18 00 	cp.b	r9,r8
80006fe4:	fe 98 ff be 	brls	80006f60 <test_flash+0x40>
			}
			ubPtr++;
		}
	}
	
	return SUCCESS;
80006fe8:	30 08       	mov	r8,0
}
80006fea:	10 9c       	mov	r12,r8
80006fec:	2f 8d       	sub	sp,-32
80006fee:	e3 cd 80 80 	ldm	sp++,r7,pc
80006ff2:	00 00       	add	r0,r0
80006ff4:	80 00       	ld.sh	r0,r0[0x0]
80006ff6:	a3 fc       	*unknown*
80006ff8:	80 07       	ld.sh	r7,r0[0x0]
80006ffa:	f0 00       	*unknown*
80006ffc:	80 07       	ld.sh	r7,r0[0x0]
80006ffe:	f8 00       	*unknown*
80007000:	80 00       	ld.sh	r0,r0[0x0]
80007002:	3b 40       	mov	r0,-76

80007004 <find_first_open_usage_slot>:

#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(unsigned char sel);
unsigned char find_first_open_usage_slot(unsigned char sel)
{
80007004:	eb cd 40 80 	pushm	r7,lr
80007008:	1a 97       	mov	r7,sp
8000700a:	20 2d       	sub	sp,8
8000700c:	18 98       	mov	r8,r12
8000700e:	ef 68 ff f8 	st.b	r7[-8],r8
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007012:	30 08       	mov	r8,0
80007014:	ef 48 ff fc 	st.w	r7[-4],r8
80007018:	c2 28       	rjmp	8000705c <find_first_open_usage_slot+0x58>
	{
		if (!usageShdw[sel].u[i].slotFilled)
8000701a:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8000701e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007022:	49 5b       	lddpc	r11,80007074 <find_first_open_usage_slot+0x70>
80007024:	12 98       	mov	r8,r9
80007026:	a3 68       	lsl	r8,0x2
80007028:	12 08       	add	r8,r9
8000702a:	a1 78       	lsl	r8,0x1
8000702c:	14 99       	mov	r9,r10
8000702e:	a5 79       	lsl	r9,0x5
80007030:	14 19       	sub	r9,r10
80007032:	f2 0a 15 05 	lsl	r10,r9,0x5
80007036:	12 1a       	sub	r10,r9
80007038:	14 08       	add	r8,r10
8000703a:	f6 08 00 08 	add	r8,r11,r8
8000703e:	2f c8       	sub	r8,-4
80007040:	11 a8       	ld.ub	r8,r8[0x2]
80007042:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80007046:	5c 58       	castu.b	r8
80007048:	c0 51       	brne	80007052 <find_first_open_usage_slot+0x4e>
		{
			return i;
8000704a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000704e:	5c 58       	castu.b	r8
80007050:	c0 e8       	rjmp	8000706c <find_first_open_usage_slot+0x68>
#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(unsigned char sel);
unsigned char find_first_open_usage_slot(unsigned char sel)
{
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007052:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007056:	2f f8       	sub	r8,-1
80007058:	ef 48 ff fc 	st.w	r7[-4],r8
8000705c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007060:	e0 48 00 5f 	cp.w	r8,95
80007064:	fe 98 ff db 	brls	8000701a <find_first_open_usage_slot+0x16>
		{
			return i;
		}
	}
	
	return USAGE_FULL; //Error, no open slots
80007068:	e0 68 00 ff 	mov	r8,255
}
8000706c:	10 9c       	mov	r12,r8
8000706e:	2f ed       	sub	sp,-8
80007070:	e3 cd 80 80 	ldm	sp++,r7,pc
80007074:	00 00       	add	r0,r0
80007076:	03 88       	ld.ub	r8,r1[0x0]

80007078 <add_new_led_board_sides_to_usage>:

void add_new_led_board_sides_to_usage(unsigned char sel)
{
80007078:	eb cd 40 80 	pushm	r7,lr
8000707c:	1a 97       	mov	r7,sp
8000707e:	20 3d       	sub	sp,12
80007080:	18 98       	mov	r8,r12
80007082:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char firstOpenSlot, slotAssignment, brdIdx, top_botn;
	
	//NOTE that load_usage_indeces() must have been run already for this function to work. 
	// i.e., usageIdx[][] must be populated.
	
	firstOpenSlot = find_first_open_usage_slot(sel);
80007086:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000708a:	10 9c       	mov	r12,r8
8000708c:	f0 1f 00 5a 	mcall	800071f4 <add_new_led_board_sides_to_usage+0x17c>
80007090:	18 98       	mov	r8,r12
80007092:	ef 68 ff fb 	st.b	r7[-5],r8
	
	slotAssignment = firstOpenSlot;
80007096:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000709a:	ef 68 ff fc 	st.b	r7[-4],r8
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
8000709e:	30 08       	mov	r8,0
800070a0:	ef 68 ff ff 	st.b	r7[-1],r8
800070a4:	c9 d8       	rjmp	800071de <add_new_led_board_sides_to_usage+0x166>
	{
		brdIdx = ledBrdSide[i].boardIdx;
800070a6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800070aa:	4d 4a       	lddpc	r10,800071f8 <add_new_led_board_sides_to_usage+0x180>
800070ac:	12 98       	mov	r8,r9
800070ae:	a3 68       	lsl	r8,0x2
800070b0:	12 08       	add	r8,r9
800070b2:	f4 08 00 08 	add	r8,r10,r8
800070b6:	2f c8       	sub	r8,-4
800070b8:	11 88       	ld.ub	r8,r8[0x0]
800070ba:	ef 68 ff fd 	st.b	r7[-3],r8
		
		top_botn = (i%2) ? TOP : BOTTOM; //odd sides are top, even sides are bottom
800070be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800070c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800070c6:	ef 68 ff fe 	st.b	r7[-2],r8
		
		if ((ledBrd[brdIdx].present) && (usageIdx[sel][i] == NO_LED_BOARD_PRESENT)) //TODO: do I need the NO_LED_BOARD_PRESENT check? this should always be open at this point
800070ca:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800070ce:	4c ca       	lddpc	r10,800071fc <add_new_led_board_sides_to_usage+0x184>
800070d0:	12 98       	mov	r8,r9
800070d2:	a3 78       	lsl	r8,0x3
800070d4:	12 18       	sub	r8,r9
800070d6:	a1 78       	lsl	r8,0x1
800070d8:	f4 08 00 08 	add	r8,r10,r8
800070dc:	2f 88       	sub	r8,-8
800070de:	11 88       	ld.ub	r8,r8[0x0]
800070e0:	58 08       	cp.w	r8,0
800070e2:	c7 90       	breq	800071d4 <add_new_led_board_sides_to_usage+0x15c>
800070e4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800070e8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800070ec:	4c 59       	lddpc	r9,80007200 <add_new_led_board_sides_to_usage+0x188>
800070ee:	a3 7a       	lsl	r10,0x3
800070f0:	f4 08 00 08 	add	r8,r10,r8
800070f4:	f2 08 00 08 	add	r8,r9,r8
800070f8:	11 89       	ld.ub	r9,r8[0x0]
800070fa:	3f f8       	mov	r8,-1
800070fc:	f0 09 18 00 	cp.b	r9,r8
80007100:	c6 a1       	brne	800071d4 <add_new_led_board_sides_to_usage+0x15c>
		{
			strncpy((char*)&usageShdw[sel].u[slotAssignment].id[0], (char*)&ledBrd[brdIdx].id[0],6);
80007102:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80007106:	12 98       	mov	r8,r9
80007108:	a3 78       	lsl	r8,0x3
8000710a:	12 18       	sub	r8,r9
8000710c:	a1 78       	lsl	r8,0x1
8000710e:	4b c9       	lddpc	r9,800071fc <add_new_led_board_sides_to_usage+0x184>
80007110:	12 08       	add	r8,r9
80007112:	f0 cb ff ff 	sub	r11,r8,-1
80007116:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000711a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000711e:	12 98       	mov	r8,r9
80007120:	a3 68       	lsl	r8,0x2
80007122:	12 08       	add	r8,r9
80007124:	a1 78       	lsl	r8,0x1
80007126:	14 99       	mov	r9,r10
80007128:	a5 79       	lsl	r9,0x5
8000712a:	14 19       	sub	r9,r10
8000712c:	f2 0a 15 05 	lsl	r10,r9,0x5
80007130:	12 1a       	sub	r10,r9
80007132:	f0 0a 00 09 	add	r9,r8,r10
80007136:	4b 48       	lddpc	r8,80007204 <add_new_led_board_sides_to_usage+0x18c>
80007138:	f2 08 00 08 	add	r8,r9,r8
8000713c:	30 6a       	mov	r10,6
8000713e:	10 9c       	mov	r12,r8
80007140:	f0 1f 00 32 	mcall	80007208 <add_new_led_board_sides_to_usage+0x190>
			
			usageShdw[sel].u[slotAssignment].top_botn = top_botn;
80007144:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007148:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000714c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007150:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007154:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007158:	4a bc       	lddpc	r12,80007204 <add_new_led_board_sides_to_usage+0x18c>
8000715a:	12 98       	mov	r8,r9
8000715c:	a3 68       	lsl	r8,0x2
8000715e:	12 08       	add	r8,r9
80007160:	a1 78       	lsl	r8,0x1
80007162:	14 99       	mov	r9,r10
80007164:	a5 79       	lsl	r9,0x5
80007166:	14 19       	sub	r9,r10
80007168:	f2 0a 15 05 	lsl	r10,r9,0x5
8000716c:	12 1a       	sub	r10,r9
8000716e:	14 08       	add	r8,r10
80007170:	f8 08 00 08 	add	r8,r12,r8
80007174:	f0 c9 ff fc 	sub	r9,r8,-4
80007178:	13 a8       	ld.ub	r8,r9[0x2]
8000717a:	f1 db d0 c1 	bfins	r8,r11,0x6,0x1
8000717e:	b2 a8       	st.b	r9[0x2],r8
			
			usageShdw[sel].u[slotAssignment].slotFilled = 1;
80007180:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007184:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007188:	49 fb       	lddpc	r11,80007204 <add_new_led_board_sides_to_usage+0x18c>
8000718a:	12 98       	mov	r8,r9
8000718c:	a3 68       	lsl	r8,0x2
8000718e:	12 08       	add	r8,r9
80007190:	a1 78       	lsl	r8,0x1
80007192:	14 99       	mov	r9,r10
80007194:	a5 79       	lsl	r9,0x5
80007196:	14 19       	sub	r9,r10
80007198:	f2 0a 15 05 	lsl	r10,r9,0x5
8000719c:	12 1a       	sub	r10,r9
8000719e:	14 08       	add	r8,r10
800071a0:	f6 08 00 08 	add	r8,r11,r8
800071a4:	f0 c9 ff fc 	sub	r9,r8,-4
800071a8:	13 a8       	ld.ub	r8,r9[0x2]
800071aa:	30 1a       	mov	r10,1
800071ac:	f1 da d0 a1 	bfins	r8,r10,0x5,0x1
800071b0:	b2 a8       	st.b	r9[0x2],r8

			usageIdx[sel][i] = slotAssignment++;
800071b2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800071b6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800071ba:	49 29       	lddpc	r9,80007200 <add_new_led_board_sides_to_usage+0x188>
800071bc:	a3 7a       	lsl	r10,0x3
800071be:	f4 08 00 08 	add	r8,r10,r8
800071c2:	10 09       	add	r9,r8
800071c4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800071c8:	b2 88       	st.b	r9[0x0],r8
800071ca:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800071ce:	2f f8       	sub	r8,-1
800071d0:	ef 68 ff fc 	st.b	r7[-4],r8
	
	firstOpenSlot = find_first_open_usage_slot(sel);
	
	slotAssignment = firstOpenSlot;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
800071d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800071d8:	2f f8       	sub	r8,-1
800071da:	ef 68 ff ff 	st.b	r7[-1],r8
800071de:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800071e2:	30 78       	mov	r8,7
800071e4:	f0 09 18 00 	cp.b	r9,r8
800071e8:	fe 98 ff 5f 	brls	800070a6 <add_new_led_board_sides_to_usage+0x2e>
			usageShdw[sel].u[slotAssignment].slotFilled = 1;

			usageIdx[sel][i] = slotAssignment++;
		}
	}
}
800071ec:	2f dd       	sub	sp,-12
800071ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800071f2:	00 00       	add	r0,r0
800071f4:	80 00       	ld.sh	r0,r0[0x0]
800071f6:	70 04       	ld.w	r4,r8[0x0]
800071f8:	00 00       	add	r0,r0
800071fa:	0b 24       	ld.uh	r4,r5++
800071fc:	00 00       	add	r0,r0
800071fe:	02 f4       	st.b	--r1,r4
80007200:	00 00       	add	r0,r0
80007202:	03 69       	ld.uh	r9,--r1
80007204:	00 00       	add	r0,r0
80007206:	03 88       	ld.ub	r8,r1[0x0]
80007208:	80 00       	ld.sh	r0,r0[0x0]
8000720a:	9f d4       	st.w	pc[0x34],r4

8000720c <calc_usage_csum>:

unsigned char calc_usage_csum(unsigned char sel)
{
8000720c:	eb cd 40 80 	pushm	r7,lr
80007210:	1a 97       	mov	r7,sp
80007212:	20 2d       	sub	sp,8
80007214:	18 98       	mov	r8,r12
80007216:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char csum = 0;
8000721a:	30 08       	mov	r8,0
8000721c:	ef 68 ff fe 	st.b	r7[-2],r8
	
/*
 * Lots of ways to checksum this struct, don't over-think it
 */

	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007220:	30 08       	mov	r8,0
80007222:	ef 68 ff ff 	st.b	r7[-1],r8
80007226:	ca f9       	rjmp	80007584 <calc_usage_csum+0x378>
	{
		csum += usageShdw[sel].u[i].hrs_thous;
80007228:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8000722c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007230:	fe fb 03 70 	ld.w	r11,pc[880]
80007234:	12 98       	mov	r8,r9
80007236:	a3 68       	lsl	r8,0x2
80007238:	12 08       	add	r8,r9
8000723a:	a1 78       	lsl	r8,0x1
8000723c:	14 99       	mov	r9,r10
8000723e:	a5 79       	lsl	r9,0x5
80007240:	14 19       	sub	r9,r10
80007242:	f2 0a 15 05 	lsl	r10,r9,0x5
80007246:	12 1a       	sub	r10,r9
80007248:	14 08       	add	r8,r10
8000724a:	f6 08 00 08 	add	r8,r11,r8
8000724e:	2f c8       	sub	r8,-4
80007250:	11 b8       	ld.ub	r8,r8[0x3]
80007252:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007256:	5c 58       	castu.b	r8
80007258:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000725c:	f2 08 00 08 	add	r8,r9,r8
80007260:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_huns;
80007264:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007268:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000726c:	fe fb 03 34 	ld.w	r11,pc[820]
80007270:	12 98       	mov	r8,r9
80007272:	a3 68       	lsl	r8,0x2
80007274:	12 08       	add	r8,r9
80007276:	a1 78       	lsl	r8,0x1
80007278:	14 99       	mov	r9,r10
8000727a:	a5 79       	lsl	r9,0x5
8000727c:	14 19       	sub	r9,r10
8000727e:	f2 0a 15 05 	lsl	r10,r9,0x5
80007282:	12 1a       	sub	r10,r9
80007284:	14 08       	add	r8,r10
80007286:	f6 08 00 08 	add	r8,r11,r8
8000728a:	2f c8       	sub	r8,-4
8000728c:	11 b8       	ld.ub	r8,r8[0x3]
8000728e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007292:	5c 58       	castu.b	r8
80007294:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007298:	f2 08 00 08 	add	r8,r9,r8
8000729c:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_tens;
800072a0:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800072a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800072a8:	fe fb 02 f8 	ld.w	r11,pc[760]
800072ac:	12 98       	mov	r8,r9
800072ae:	a3 68       	lsl	r8,0x2
800072b0:	12 08       	add	r8,r9
800072b2:	a1 78       	lsl	r8,0x1
800072b4:	14 99       	mov	r9,r10
800072b6:	a5 79       	lsl	r9,0x5
800072b8:	14 19       	sub	r9,r10
800072ba:	f2 0a 15 05 	lsl	r10,r9,0x5
800072be:	12 1a       	sub	r10,r9
800072c0:	14 08       	add	r8,r10
800072c2:	f6 08 00 08 	add	r8,r11,r8
800072c6:	2f 88       	sub	r8,-8
800072c8:	11 88       	ld.ub	r8,r8[0x0]
800072ca:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800072ce:	5c 58       	castu.b	r8
800072d0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800072d4:	f2 08 00 08 	add	r8,r9,r8
800072d8:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_ones;
800072dc:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800072e0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800072e4:	fe fb 02 bc 	ld.w	r11,pc[700]
800072e8:	12 98       	mov	r8,r9
800072ea:	a3 68       	lsl	r8,0x2
800072ec:	12 08       	add	r8,r9
800072ee:	a1 78       	lsl	r8,0x1
800072f0:	14 99       	mov	r9,r10
800072f2:	a5 79       	lsl	r9,0x5
800072f4:	14 19       	sub	r9,r10
800072f6:	f2 0a 15 05 	lsl	r10,r9,0x5
800072fa:	12 1a       	sub	r10,r9
800072fc:	14 08       	add	r8,r10
800072fe:	f6 08 00 08 	add	r8,r11,r8
80007302:	2f 88       	sub	r8,-8
80007304:	11 88       	ld.ub	r8,r8[0x0]
80007306:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000730a:	5c 58       	castu.b	r8
8000730c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007310:	f2 08 00 08 	add	r8,r9,r8
80007314:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].min_tens;
80007318:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8000731c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007320:	fe fb 02 80 	ld.w	r11,pc[640]
80007324:	12 98       	mov	r8,r9
80007326:	a3 68       	lsl	r8,0x2
80007328:	12 08       	add	r8,r9
8000732a:	a1 78       	lsl	r8,0x1
8000732c:	14 99       	mov	r9,r10
8000732e:	a5 79       	lsl	r9,0x5
80007330:	14 19       	sub	r9,r10
80007332:	f2 0a 15 05 	lsl	r10,r9,0x5
80007336:	12 1a       	sub	r10,r9
80007338:	14 08       	add	r8,r10
8000733a:	f6 08 00 08 	add	r8,r11,r8
8000733e:	2f 88       	sub	r8,-8
80007340:	11 98       	ld.ub	r8,r8[0x1]
80007342:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007346:	5c 58       	castu.b	r8
80007348:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000734c:	f2 08 00 08 	add	r8,r9,r8
80007350:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].min_ones;
80007354:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007358:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000735c:	fe fb 02 44 	ld.w	r11,pc[580]
80007360:	12 98       	mov	r8,r9
80007362:	a3 68       	lsl	r8,0x2
80007364:	12 08       	add	r8,r9
80007366:	a1 78       	lsl	r8,0x1
80007368:	14 99       	mov	r9,r10
8000736a:	a5 79       	lsl	r9,0x5
8000736c:	14 19       	sub	r9,r10
8000736e:	f2 0a 15 05 	lsl	r10,r9,0x5
80007372:	12 1a       	sub	r10,r9
80007374:	14 08       	add	r8,r10
80007376:	f6 08 00 08 	add	r8,r11,r8
8000737a:	2f 88       	sub	r8,-8
8000737c:	11 98       	ld.ub	r8,r8[0x1]
8000737e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007382:	5c 58       	castu.b	r8
80007384:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007388:	f2 08 00 08 	add	r8,r9,r8
8000738c:	ef 68 ff fe 	st.b	r7[-2],r8
		
		csum += usageShdw[sel].u[i].id[0];
80007390:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007394:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007398:	fe fb 02 08 	ld.w	r11,pc[520]
8000739c:	12 98       	mov	r8,r9
8000739e:	a3 68       	lsl	r8,0x2
800073a0:	12 08       	add	r8,r9
800073a2:	a1 78       	lsl	r8,0x1
800073a4:	14 99       	mov	r9,r10
800073a6:	a5 79       	lsl	r9,0x5
800073a8:	14 19       	sub	r9,r10
800073aa:	f2 0a 15 05 	lsl	r10,r9,0x5
800073ae:	12 1a       	sub	r10,r9
800073b0:	14 08       	add	r8,r10
800073b2:	f6 08 00 08 	add	r8,r11,r8
800073b6:	11 88       	ld.ub	r8,r8[0x0]
800073b8:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800073bc:	f2 08 00 08 	add	r8,r9,r8
800073c0:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[1];
800073c4:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800073c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800073cc:	4f 5b       	lddpc	r11,800075a0 <calc_usage_csum+0x394>
800073ce:	12 98       	mov	r8,r9
800073d0:	a3 68       	lsl	r8,0x2
800073d2:	12 08       	add	r8,r9
800073d4:	a1 78       	lsl	r8,0x1
800073d6:	14 99       	mov	r9,r10
800073d8:	a5 79       	lsl	r9,0x5
800073da:	14 19       	sub	r9,r10
800073dc:	f2 0a 15 05 	lsl	r10,r9,0x5
800073e0:	12 1a       	sub	r10,r9
800073e2:	14 08       	add	r8,r10
800073e4:	f6 08 00 08 	add	r8,r11,r8
800073e8:	2f f8       	sub	r8,-1
800073ea:	11 88       	ld.ub	r8,r8[0x0]
800073ec:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800073f0:	f2 08 00 08 	add	r8,r9,r8
800073f4:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[2];
800073f8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800073fc:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80007400:	4e 8b       	lddpc	r11,800075a0 <calc_usage_csum+0x394>
80007402:	14 98       	mov	r8,r10
80007404:	a3 68       	lsl	r8,0x2
80007406:	14 08       	add	r8,r10
80007408:	2f f8       	sub	r8,-1
8000740a:	f0 0a 15 01 	lsl	r10,r8,0x1
8000740e:	12 98       	mov	r8,r9
80007410:	a5 78       	lsl	r8,0x5
80007412:	12 18       	sub	r8,r9
80007414:	f0 09 15 05 	lsl	r9,r8,0x5
80007418:	10 19       	sub	r9,r8
8000741a:	f4 09 00 08 	add	r8,r10,r9
8000741e:	f6 08 00 08 	add	r8,r11,r8
80007422:	11 88       	ld.ub	r8,r8[0x0]
80007424:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007428:	f2 08 00 08 	add	r8,r9,r8
8000742c:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[3];
80007430:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007434:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007438:	4d ab       	lddpc	r11,800075a0 <calc_usage_csum+0x394>
8000743a:	12 98       	mov	r8,r9
8000743c:	a3 68       	lsl	r8,0x2
8000743e:	12 08       	add	r8,r9
80007440:	a1 78       	lsl	r8,0x1
80007442:	14 99       	mov	r9,r10
80007444:	a5 79       	lsl	r9,0x5
80007446:	14 19       	sub	r9,r10
80007448:	f2 0a 15 05 	lsl	r10,r9,0x5
8000744c:	12 1a       	sub	r10,r9
8000744e:	14 08       	add	r8,r10
80007450:	f6 08 00 08 	add	r8,r11,r8
80007454:	2f d8       	sub	r8,-3
80007456:	11 88       	ld.ub	r8,r8[0x0]
80007458:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000745c:	f2 08 00 08 	add	r8,r9,r8
80007460:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[4];
80007464:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007468:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000746c:	4c db       	lddpc	r11,800075a0 <calc_usage_csum+0x394>
8000746e:	12 98       	mov	r8,r9
80007470:	a3 68       	lsl	r8,0x2
80007472:	12 08       	add	r8,r9
80007474:	a1 78       	lsl	r8,0x1
80007476:	14 99       	mov	r9,r10
80007478:	a5 79       	lsl	r9,0x5
8000747a:	14 19       	sub	r9,r10
8000747c:	f2 0a 15 05 	lsl	r10,r9,0x5
80007480:	12 1a       	sub	r10,r9
80007482:	14 08       	add	r8,r10
80007484:	f6 08 00 08 	add	r8,r11,r8
80007488:	2f c8       	sub	r8,-4
8000748a:	11 88       	ld.ub	r8,r8[0x0]
8000748c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007490:	f2 08 00 08 	add	r8,r9,r8
80007494:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[5];
80007498:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8000749c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800074a0:	4c 0b       	lddpc	r11,800075a0 <calc_usage_csum+0x394>
800074a2:	12 98       	mov	r8,r9
800074a4:	a3 68       	lsl	r8,0x2
800074a6:	12 08       	add	r8,r9
800074a8:	a1 78       	lsl	r8,0x1
800074aa:	14 99       	mov	r9,r10
800074ac:	a5 79       	lsl	r9,0x5
800074ae:	14 19       	sub	r9,r10
800074b0:	f2 0a 15 05 	lsl	r10,r9,0x5
800074b4:	12 1a       	sub	r10,r9
800074b6:	14 08       	add	r8,r10
800074b8:	f6 08 00 08 	add	r8,r11,r8
800074bc:	2f b8       	sub	r8,-5
800074be:	11 88       	ld.ub	r8,r8[0x0]
800074c0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800074c4:	f2 08 00 08 	add	r8,r9,r8
800074c8:	ef 68 ff fe 	st.b	r7[-2],r8
		
		csum += usageShdw[sel].u[i].maxUsageReached;
800074cc:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800074d0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800074d4:	4b 3b       	lddpc	r11,800075a0 <calc_usage_csum+0x394>
800074d6:	12 98       	mov	r8,r9
800074d8:	a3 68       	lsl	r8,0x2
800074da:	12 08       	add	r8,r9
800074dc:	a1 78       	lsl	r8,0x1
800074de:	14 99       	mov	r9,r10
800074e0:	a5 79       	lsl	r9,0x5
800074e2:	14 19       	sub	r9,r10
800074e4:	f2 0a 15 05 	lsl	r10,r9,0x5
800074e8:	12 1a       	sub	r10,r9
800074ea:	14 08       	add	r8,r10
800074ec:	f6 08 00 08 	add	r8,r11,r8
800074f0:	2f c8       	sub	r8,-4
800074f2:	11 a8       	ld.ub	r8,r8[0x2]
800074f4:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800074f8:	5c 58       	castu.b	r8
800074fa:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800074fe:	f2 08 00 08 	add	r8,r9,r8
80007502:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].top_botn;
80007506:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8000750a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000750e:	4a 5b       	lddpc	r11,800075a0 <calc_usage_csum+0x394>
80007510:	12 98       	mov	r8,r9
80007512:	a3 68       	lsl	r8,0x2
80007514:	12 08       	add	r8,r9
80007516:	a1 78       	lsl	r8,0x1
80007518:	14 99       	mov	r9,r10
8000751a:	a5 79       	lsl	r9,0x5
8000751c:	14 19       	sub	r9,r10
8000751e:	f2 0a 15 05 	lsl	r10,r9,0x5
80007522:	12 1a       	sub	r10,r9
80007524:	14 08       	add	r8,r10
80007526:	f6 08 00 08 	add	r8,r11,r8
8000752a:	2f c8       	sub	r8,-4
8000752c:	11 a8       	ld.ub	r8,r8[0x2]
8000752e:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80007532:	5c 58       	castu.b	r8
80007534:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007538:	f2 08 00 08 	add	r8,r9,r8
8000753c:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].slotFilled;
80007540:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007544:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007548:	49 6b       	lddpc	r11,800075a0 <calc_usage_csum+0x394>
8000754a:	12 98       	mov	r8,r9
8000754c:	a3 68       	lsl	r8,0x2
8000754e:	12 08       	add	r8,r9
80007550:	a1 78       	lsl	r8,0x1
80007552:	14 99       	mov	r9,r10
80007554:	a5 79       	lsl	r9,0x5
80007556:	14 19       	sub	r9,r10
80007558:	f2 0a 15 05 	lsl	r10,r9,0x5
8000755c:	12 1a       	sub	r10,r9
8000755e:	14 08       	add	r8,r10
80007560:	f6 08 00 08 	add	r8,r11,r8
80007564:	2f c8       	sub	r8,-4
80007566:	11 a8       	ld.ub	r8,r8[0x2]
80007568:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
8000756c:	5c 58       	castu.b	r8
8000756e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007572:	f2 08 00 08 	add	r8,r9,r8
80007576:	ef 68 ff fe 	st.b	r7[-2],r8
	
/*
 * Lots of ways to checksum this struct, don't over-think it
 */

	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
8000757a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000757e:	2f f8       	sub	r8,-1
80007580:	ef 68 ff ff 	st.b	r7[-1],r8
80007584:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007588:	35 f8       	mov	r8,95
8000758a:	f0 09 18 00 	cp.b	r9,r8
8000758e:	fe 98 fe 4d 	brls	80007228 <calc_usage_csum+0x1c>
		csum += usageShdw[sel].u[i].maxUsageReached;
		csum += usageShdw[sel].u[i].top_botn;
		csum += usageShdw[sel].u[i].slotFilled;
	}
	
	return csum;
80007592:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
80007596:	10 9c       	mov	r12,r8
80007598:	2f ed       	sub	sp,-8
8000759a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000759e:	00 00       	add	r0,r0
800075a0:	00 00       	add	r0,r0
800075a2:	03 88       	ld.ub	r8,r1[0x0]

800075a4 <copy_usage_to_usage>:

void copy_usage_to_usage(unsigned char dst, unsigned char src)
{
800075a4:	eb cd 40 80 	pushm	r7,lr
800075a8:	1a 97       	mov	r7,sp
800075aa:	20 2d       	sub	sp,8
800075ac:	18 99       	mov	r9,r12
800075ae:	16 98       	mov	r8,r11
800075b0:	ef 69 ff fc 	st.b	r7[-4],r9
800075b4:	ef 68 ff f8 	st.b	r7[-8],r8
	memcpy(&usageShdw[dst], &usageShdw[src], sizeof(usageShdw[src]));
800075b8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800075bc:	12 98       	mov	r8,r9
800075be:	a5 78       	lsl	r8,0x5
800075c0:	12 18       	sub	r8,r9
800075c2:	f0 09 15 05 	lsl	r9,r8,0x5
800075c6:	10 19       	sub	r9,r8
800075c8:	48 b8       	lddpc	r8,800075f4 <copy_usage_to_usage+0x50>
800075ca:	f2 08 00 0b 	add	r11,r9,r8
800075ce:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800075d2:	12 98       	mov	r8,r9
800075d4:	a5 78       	lsl	r8,0x5
800075d6:	12 18       	sub	r8,r9
800075d8:	f0 09 15 05 	lsl	r9,r8,0x5
800075dc:	10 19       	sub	r9,r8
800075de:	48 68       	lddpc	r8,800075f4 <copy_usage_to_usage+0x50>
800075e0:	f2 08 00 08 	add	r8,r9,r8
800075e4:	e0 6a 03 c1 	mov	r10,961
800075e8:	10 9c       	mov	r12,r8
800075ea:	f0 1f 00 04 	mcall	800075f8 <copy_usage_to_usage+0x54>
}
800075ee:	2f ed       	sub	sp,-8
800075f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800075f4:	00 00       	add	r0,r0
800075f6:	03 88       	ld.ub	r8,r1[0x0]
800075f8:	80 00       	ld.sh	r0,r0[0x0]
800075fa:	9e 7e       	ld.sh	lr,pc[0xe]

800075fc <write_usage_to_flash>:

void write_usage_to_flash(unsigned char sel)
{
800075fc:	eb cd 40 80 	pushm	r7,lr
80007600:	1a 97       	mov	r7,sp
80007602:	20 1d       	sub	sp,4
80007604:	18 98       	mov	r8,r12
80007606:	ef 68 ff fc 	st.b	r7[-4],r8
	if (sel == 0)
8000760a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000760e:	30 08       	mov	r8,0
80007610:	f0 09 18 00 	cp.b	r9,r8
80007614:	c0 91       	brne	80007626 <write_usage_to_flash+0x2a>
	{
		flashc_memcpy(serialIdAndUsageFlashZero, &usageShdw[0], sizeof(usageShdw[0]),true);
80007616:	30 19       	mov	r9,1
80007618:	e0 6a 03 c1 	mov	r10,961
8000761c:	48 9b       	lddpc	r11,80007640 <write_usage_to_flash+0x44>
8000761e:	48 ac       	lddpc	r12,80007644 <write_usage_to_flash+0x48>
80007620:	f0 1f 00 0a 	mcall	80007648 <write_usage_to_flash+0x4c>
80007624:	c0 b8       	rjmp	8000763a <write_usage_to_flash+0x3e>
	}
	else
	{
		flashc_memcpy(serialIdAndUsageFlashOne, &usageShdw[1], sizeof(usageShdw[1]),true);
80007626:	48 78       	lddpc	r8,80007640 <write_usage_to_flash+0x44>
80007628:	f0 c8 fc 3f 	sub	r8,r8,-961
8000762c:	30 19       	mov	r9,1
8000762e:	e0 6a 03 c1 	mov	r10,961
80007632:	10 9b       	mov	r11,r8
80007634:	48 6c       	lddpc	r12,8000764c <write_usage_to_flash+0x50>
80007636:	f0 1f 00 05 	mcall	80007648 <write_usage_to_flash+0x4c>
	}
}
8000763a:	2f fd       	sub	sp,-4
8000763c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007640:	00 00       	add	r0,r0
80007642:	03 88       	ld.ub	r8,r1[0x0]
80007644:	80 07       	ld.sh	r7,r0[0x0]
80007646:	f0 00       	*unknown*
80007648:	80 00       	ld.sh	r0,r0[0x0]
8000764a:	40 60       	lddsp	r0,sp[0x18]
8000764c:	80 07       	ld.sh	r7,r0[0x0]
8000764e:	f8 00       	*unknown*

80007650 <calc_usage_current_led_boards>:

unsigned long calc_usage_current_led_boards(unsigned char sel);
unsigned long calc_usage_current_led_boards(unsigned char sel)
{
80007650:	eb cd 40 80 	pushm	r7,lr
80007654:	1a 97       	mov	r7,sp
80007656:	20 ad       	sub	sp,40
80007658:	18 98       	mov	r8,r12
8000765a:	ef 68 ff d8 	st.b	r7[-40],r8
	unsigned long hrs_thous = 0, 
8000765e:	30 08       	mov	r8,0
80007660:	ef 48 ff dc 	st.w	r7[-36],r8
		hrs_huns = 0, 
80007664:	30 08       	mov	r8,0
80007666:	ef 48 ff e0 	st.w	r7[-32],r8
		hrs_tens = 0, 
8000766a:	30 08       	mov	r8,0
8000766c:	ef 48 ff e4 	st.w	r7[-28],r8
		hrs_ones = 0, 
80007670:	30 08       	mov	r8,0
80007672:	ef 48 ff e8 	st.w	r7[-24],r8
		min_tens = 0, 
80007676:	30 08       	mov	r8,0
80007678:	ef 48 ff ec 	st.w	r7[-20],r8
		min_ones = 0;
8000767c:	30 08       	mov	r8,0
8000767e:	ef 48 ff f0 	st.w	r7[-16],r8
		
	unsigned char idx;
	unsigned long retMinutes;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
80007682:	30 08       	mov	r8,0
80007684:	ef 68 ff ff 	st.b	r7[-1],r8
80007688:	cd 28       	rjmp	8000782c <calc_usage_current_led_boards+0x1dc>
	{
		if (usageIdx[sel][i] != NO_LED_BOARD_PRESENT)
8000768a:	ef 3a ff d8 	ld.ub	r10,r7[-40]
8000768e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007692:	fe f9 02 1a 	ld.w	r9,pc[538]
80007696:	a3 7a       	lsl	r10,0x3
80007698:	f4 08 00 08 	add	r8,r10,r8
8000769c:	f2 08 00 08 	add	r8,r9,r8
800076a0:	11 89       	ld.ub	r9,r8[0x0]
800076a2:	3f f8       	mov	r8,-1
800076a4:	f0 09 18 00 	cp.b	r9,r8
800076a8:	e0 80 00 bd 	breq	80007822 <calc_usage_current_led_boards+0x1d2>
		{
			idx = usageIdx[sel][i];
800076ac:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800076b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800076b4:	4f e9       	lddpc	r9,800078ac <calc_usage_current_led_boards+0x25c>
800076b6:	a3 7a       	lsl	r10,0x3
800076b8:	f4 08 00 08 	add	r8,r10,r8
800076bc:	f2 08 00 08 	add	r8,r9,r8
800076c0:	11 88       	ld.ub	r8,r8[0x0]
800076c2:	ef 68 ff f7 	st.b	r7[-9],r8
					
			hrs_thous += usageShdw[sel].u[idx].hrs_thous;
800076c6:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800076ca:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800076ce:	4f 9b       	lddpc	r11,800078b0 <calc_usage_current_led_boards+0x260>
800076d0:	12 98       	mov	r8,r9
800076d2:	a3 68       	lsl	r8,0x2
800076d4:	12 08       	add	r8,r9
800076d6:	a1 78       	lsl	r8,0x1
800076d8:	14 99       	mov	r9,r10
800076da:	a5 79       	lsl	r9,0x5
800076dc:	14 19       	sub	r9,r10
800076de:	f2 0a 15 05 	lsl	r10,r9,0x5
800076e2:	12 1a       	sub	r10,r9
800076e4:	14 08       	add	r8,r10
800076e6:	f6 08 00 08 	add	r8,r11,r8
800076ea:	2f c8       	sub	r8,-4
800076ec:	11 b8       	ld.ub	r8,r8[0x3]
800076ee:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800076f2:	5c 58       	castu.b	r8
800076f4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800076f8:	f2 08 00 08 	add	r8,r9,r8
800076fc:	ef 48 ff dc 	st.w	r7[-36],r8
			hrs_huns += usageShdw[sel].u[idx].hrs_huns;
80007700:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007704:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80007708:	4e ab       	lddpc	r11,800078b0 <calc_usage_current_led_boards+0x260>
8000770a:	12 98       	mov	r8,r9
8000770c:	a3 68       	lsl	r8,0x2
8000770e:	12 08       	add	r8,r9
80007710:	a1 78       	lsl	r8,0x1
80007712:	14 99       	mov	r9,r10
80007714:	a5 79       	lsl	r9,0x5
80007716:	14 19       	sub	r9,r10
80007718:	f2 0a 15 05 	lsl	r10,r9,0x5
8000771c:	12 1a       	sub	r10,r9
8000771e:	14 08       	add	r8,r10
80007720:	f6 08 00 08 	add	r8,r11,r8
80007724:	2f c8       	sub	r8,-4
80007726:	11 b8       	ld.ub	r8,r8[0x3]
80007728:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000772c:	5c 58       	castu.b	r8
8000772e:	ee f9 ff e0 	ld.w	r9,r7[-32]
80007732:	f2 08 00 08 	add	r8,r9,r8
80007736:	ef 48 ff e0 	st.w	r7[-32],r8
			hrs_tens += usageShdw[sel].u[idx].hrs_tens;
8000773a:	ef 3a ff d8 	ld.ub	r10,r7[-40]
8000773e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80007742:	4d cb       	lddpc	r11,800078b0 <calc_usage_current_led_boards+0x260>
80007744:	12 98       	mov	r8,r9
80007746:	a3 68       	lsl	r8,0x2
80007748:	12 08       	add	r8,r9
8000774a:	a1 78       	lsl	r8,0x1
8000774c:	14 99       	mov	r9,r10
8000774e:	a5 79       	lsl	r9,0x5
80007750:	14 19       	sub	r9,r10
80007752:	f2 0a 15 05 	lsl	r10,r9,0x5
80007756:	12 1a       	sub	r10,r9
80007758:	14 08       	add	r8,r10
8000775a:	f6 08 00 08 	add	r8,r11,r8
8000775e:	2f 88       	sub	r8,-8
80007760:	11 88       	ld.ub	r8,r8[0x0]
80007762:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007766:	5c 58       	castu.b	r8
80007768:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000776c:	f2 08 00 08 	add	r8,r9,r8
80007770:	ef 48 ff e4 	st.w	r7[-28],r8
			hrs_ones += usageShdw[sel].u[idx].hrs_ones;
80007774:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007778:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000777c:	4c db       	lddpc	r11,800078b0 <calc_usage_current_led_boards+0x260>
8000777e:	12 98       	mov	r8,r9
80007780:	a3 68       	lsl	r8,0x2
80007782:	12 08       	add	r8,r9
80007784:	a1 78       	lsl	r8,0x1
80007786:	14 99       	mov	r9,r10
80007788:	a5 79       	lsl	r9,0x5
8000778a:	14 19       	sub	r9,r10
8000778c:	f2 0a 15 05 	lsl	r10,r9,0x5
80007790:	12 1a       	sub	r10,r9
80007792:	14 08       	add	r8,r10
80007794:	f6 08 00 08 	add	r8,r11,r8
80007798:	2f 88       	sub	r8,-8
8000779a:	11 88       	ld.ub	r8,r8[0x0]
8000779c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800077a0:	5c 58       	castu.b	r8
800077a2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800077a6:	f2 08 00 08 	add	r8,r9,r8
800077aa:	ef 48 ff e8 	st.w	r7[-24],r8
			min_tens += usageShdw[sel].u[idx].min_tens;
800077ae:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800077b2:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800077b6:	4b fb       	lddpc	r11,800078b0 <calc_usage_current_led_boards+0x260>
800077b8:	12 98       	mov	r8,r9
800077ba:	a3 68       	lsl	r8,0x2
800077bc:	12 08       	add	r8,r9
800077be:	a1 78       	lsl	r8,0x1
800077c0:	14 99       	mov	r9,r10
800077c2:	a5 79       	lsl	r9,0x5
800077c4:	14 19       	sub	r9,r10
800077c6:	f2 0a 15 05 	lsl	r10,r9,0x5
800077ca:	12 1a       	sub	r10,r9
800077cc:	14 08       	add	r8,r10
800077ce:	f6 08 00 08 	add	r8,r11,r8
800077d2:	2f 88       	sub	r8,-8
800077d4:	11 98       	ld.ub	r8,r8[0x1]
800077d6:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
800077da:	5c 58       	castu.b	r8
800077dc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800077e0:	f2 08 00 08 	add	r8,r9,r8
800077e4:	ef 48 ff ec 	st.w	r7[-20],r8
			min_ones += usageShdw[sel].u[idx].min_ones;
800077e8:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800077ec:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800077f0:	4b 0b       	lddpc	r11,800078b0 <calc_usage_current_led_boards+0x260>
800077f2:	12 98       	mov	r8,r9
800077f4:	a3 68       	lsl	r8,0x2
800077f6:	12 08       	add	r8,r9
800077f8:	a1 78       	lsl	r8,0x1
800077fa:	14 99       	mov	r9,r10
800077fc:	a5 79       	lsl	r9,0x5
800077fe:	14 19       	sub	r9,r10
80007800:	f2 0a 15 05 	lsl	r10,r9,0x5
80007804:	12 1a       	sub	r10,r9
80007806:	14 08       	add	r8,r10
80007808:	f6 08 00 08 	add	r8,r11,r8
8000780c:	2f 88       	sub	r8,-8
8000780e:	11 98       	ld.ub	r8,r8[0x1]
80007810:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007814:	5c 58       	castu.b	r8
80007816:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000781a:	f2 08 00 08 	add	r8,r9,r8
8000781e:	ef 48 ff f0 	st.w	r7[-16],r8
		min_ones = 0;
		
	unsigned char idx;
	unsigned long retMinutes;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
80007822:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007826:	2f f8       	sub	r8,-1
80007828:	ef 68 ff ff 	st.b	r7[-1],r8
8000782c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007830:	30 78       	mov	r8,7
80007832:	f0 09 18 00 	cp.b	r9,r8
80007836:	fe 98 ff 2a 	brls	8000768a <calc_usage_current_led_boards+0x3a>
			min_tens += usageShdw[sel].u[idx].min_tens;
			min_ones += usageShdw[sel].u[idx].min_ones;
		}
	}
	
	retMinutes = (hrs_thous * 1000) + (hrs_huns * 100) + (hrs_tens * 10) + (hrs_ones);
8000783a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000783e:	e0 68 03 e8 	mov	r8,1000
80007842:	b1 39       	mul	r9,r8
80007844:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007848:	f0 08 10 64 	mul	r8,r8,100
8000784c:	f2 08 00 0a 	add	r10,r9,r8
80007850:	ee f9 ff e4 	ld.w	r9,r7[-28]
80007854:	12 98       	mov	r8,r9
80007856:	a3 68       	lsl	r8,0x2
80007858:	12 08       	add	r8,r9
8000785a:	a1 78       	lsl	r8,0x1
8000785c:	f4 08 00 09 	add	r9,r10,r8
80007860:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007864:	f2 08 00 08 	add	r8,r9,r8
80007868:	ef 48 ff f8 	st.w	r7[-8],r8
	retMinutes *= 60;
8000786c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007870:	12 98       	mov	r8,r9
80007872:	a5 68       	lsl	r8,0x4
80007874:	12 18       	sub	r8,r9
80007876:	a3 68       	lsl	r8,0x2
80007878:	ef 48 ff f8 	st.w	r7[-8],r8
	retMinutes += ((min_tens * 10) + (min_ones));
8000787c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007880:	12 98       	mov	r8,r9
80007882:	a3 68       	lsl	r8,0x2
80007884:	12 08       	add	r8,r9
80007886:	a1 78       	lsl	r8,0x1
80007888:	10 99       	mov	r9,r8
8000788a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000788e:	f2 08 00 08 	add	r8,r9,r8
80007892:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007896:	f2 08 00 08 	add	r8,r9,r8
8000789a:	ef 48 ff f8 	st.w	r7[-8],r8
	
	return retMinutes;
8000789e:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800078a2:	10 9c       	mov	r12,r8
800078a4:	2f 6d       	sub	sp,-40
800078a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800078aa:	00 00       	add	r0,r0
800078ac:	00 00       	add	r0,r0
800078ae:	03 69       	ld.uh	r9,--r1
800078b0:	00 00       	add	r0,r0
800078b2:	03 88       	ld.ub	r8,r1[0x0]

800078b4 <increment_ledBoard_usage_min>:

void increment_ledBoard_usage_min(void);
void increment_ledBoard_usage_min(void)
{
800078b4:	eb cd 40 c0 	pushm	r6-r7,lr
800078b8:	1a 97       	mov	r7,sp
800078ba:	20 3d       	sub	sp,12
	unsigned char topLEDboardLowerSideIdx;
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	
	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
800078bc:	30 08       	mov	r8,0
800078be:	ef 68 ff fd 	st.b	r7[-3],r8
800078c2:	c8 f9       	rjmp	80007be0 <increment_ledBoard_usage_min+0x32c>
	{
		if (shelf[i].active == SHELF_ACTIVE)
800078c4:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800078c8:	fe fa 03 7c 	ld.w	r10,pc[892]
800078cc:	12 98       	mov	r8,r9
800078ce:	a3 68       	lsl	r8,0x2
800078d0:	12 08       	add	r8,r9
800078d2:	f4 08 00 08 	add	r8,r10,r8
800078d6:	11 88       	ld.ub	r8,r8[0x0]
800078d8:	58 08       	cp.w	r8,0
800078da:	e0 81 01 7e 	brne	80007bd6 <increment_ledBoard_usage_min+0x322>
		{
			topLEDboardLowerSideIdx = ledBrd[shelf[i].tLedIdx].lSideIdx;
800078de:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800078e2:	fe fa 03 62 	ld.w	r10,pc[866]
800078e6:	12 98       	mov	r8,r9
800078e8:	a3 68       	lsl	r8,0x2
800078ea:	12 08       	add	r8,r9
800078ec:	f4 08 00 08 	add	r8,r10,r8
800078f0:	2f f8       	sub	r8,-1
800078f2:	11 88       	ld.ub	r8,r8[0x0]
800078f4:	10 99       	mov	r9,r8
800078f6:	fe fa 03 52 	ld.w	r10,pc[850]
800078fa:	12 98       	mov	r8,r9
800078fc:	a3 78       	lsl	r8,0x3
800078fe:	12 18       	sub	r8,r9
80007900:	a1 78       	lsl	r8,0x1
80007902:	f4 08 00 08 	add	r8,r10,r8
80007906:	2f 58       	sub	r8,-11
80007908:	11 88       	ld.ub	r8,r8[0x0]
8000790a:	ef 68 ff f9 	st.b	r7[-7],r8
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
8000790e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80007912:	fe fa 03 32 	ld.w	r10,pc[818]
80007916:	12 98       	mov	r8,r9
80007918:	a3 68       	lsl	r8,0x2
8000791a:	12 08       	add	r8,r9
8000791c:	f4 08 00 08 	add	r8,r10,r8
80007920:	2f e8       	sub	r8,-2
80007922:	11 88       	ld.ub	r8,r8[0x0]
80007924:	10 99       	mov	r9,r8
80007926:	fe fa 03 22 	ld.w	r10,pc[802]
8000792a:	12 98       	mov	r8,r9
8000792c:	a3 78       	lsl	r8,0x3
8000792e:	12 18       	sub	r8,r9
80007930:	a1 78       	lsl	r8,0x1
80007932:	f4 08 00 08 	add	r8,r10,r8
80007936:	2f 68       	sub	r8,-10
80007938:	11 88       	ld.ub	r8,r8[0x0]
8000793a:	ef 68 ff fa 	st.b	r7[-6],r8
		
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
8000793e:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80007942:	fe fa 03 0a 	ld.w	r10,pc[778]
80007946:	12 98       	mov	r8,r9
80007948:	a3 68       	lsl	r8,0x2
8000794a:	12 08       	add	r8,r9
8000794c:	f4 08 00 08 	add	r8,r10,r8
80007950:	2f f8       	sub	r8,-1
80007952:	11 88       	ld.ub	r8,r8[0x0]
80007954:	ef 68 ff fb 	st.b	r7[-5],r8
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
80007958:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000795c:	fe fa 02 f0 	ld.w	r10,pc[752]
80007960:	12 98       	mov	r8,r9
80007962:	a3 68       	lsl	r8,0x2
80007964:	12 08       	add	r8,r9
80007966:	f4 08 00 08 	add	r8,r10,r8
8000796a:	2f f8       	sub	r8,-1
8000796c:	11 88       	ld.ub	r8,r8[0x0]
8000796e:	ef 68 ff fc 	st.b	r7[-4],r8
		
			for (unsigned char j=0; j<2; j++) //for each copy of usageShdw[] (update both copies every time)
80007972:	30 08       	mov	r8,0
80007974:	ef 68 ff fe 	st.b	r7[-2],r8
80007978:	c2 89       	rjmp	80007bc8 <increment_ledBoard_usage_min+0x314>
			{
				for (unsigned char k=0; k<2; k++) //for each board side in the shelf
8000797a:	30 08       	mov	r8,0
8000797c:	ef 68 ff ff 	st.b	r7[-1],r8
80007980:	c1 89       	rjmp	80007bb0 <increment_ledBoard_usage_min+0x2fc>
				{
					switch (k)
80007982:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007986:	58 08       	cp.w	r8,0
80007988:	c0 40       	breq	80007990 <increment_ledBoard_usage_min+0xdc>
8000798a:	58 18       	cp.w	r8,1
8000798c:	c1 90       	breq	800079be <increment_ledBoard_usage_min+0x10a>
8000798e:	c2 e8       	rjmp	800079ea <increment_ledBoard_usage_min+0x136>
					{
						case 0:
							tmp = &usageShdw[j].u[topUIdx];
80007990:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007994:	12 98       	mov	r8,r9
80007996:	a5 78       	lsl	r8,0x5
80007998:	12 18       	sub	r8,r9
8000799a:	f0 09 15 05 	lsl	r9,r8,0x5
8000799e:	10 19       	sub	r9,r8
800079a0:	fe f8 02 b0 	ld.w	r8,pc[688]
800079a4:	f2 08 00 0a 	add	r10,r9,r8
800079a8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800079ac:	12 98       	mov	r8,r9
800079ae:	a3 68       	lsl	r8,0x2
800079b0:	12 08       	add	r8,r9
800079b2:	a1 78       	lsl	r8,0x1
800079b4:	f4 08 00 08 	add	r8,r10,r8
800079b8:	ef 48 ff f4 	st.w	r7[-12],r8
							break;
800079bc:	c1 78       	rjmp	800079ea <increment_ledBoard_usage_min+0x136>
						case 1:
							tmp = &usageShdw[j].u[bottomUIdx];
800079be:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800079c2:	12 98       	mov	r8,r9
800079c4:	a5 78       	lsl	r8,0x5
800079c6:	12 18       	sub	r8,r9
800079c8:	f0 09 15 05 	lsl	r9,r8,0x5
800079cc:	10 19       	sub	r9,r8
800079ce:	fe f8 02 82 	ld.w	r8,pc[642]
800079d2:	f2 08 00 0a 	add	r10,r9,r8
800079d6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800079da:	12 98       	mov	r8,r9
800079dc:	a3 68       	lsl	r8,0x2
800079de:	12 08       	add	r8,r9
800079e0:	a1 78       	lsl	r8,0x1
800079e2:	f4 08 00 08 	add	r8,r10,r8
800079e6:	ef 48 ff f4 	st.w	r7[-12],r8
							break;
					}

					if (++(tmp->min_ones) > 9)
800079ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800079ee:	f1 38 00 09 	ld.ub	r8,r8[9]
800079f2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800079f6:	5c 58       	castu.b	r8
800079f8:	2f f8       	sub	r8,-1
800079fa:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800079fe:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007a02:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007a06:	f3 38 00 09 	ld.ub	r8,r9[9]
80007a0a:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80007a0e:	f3 68 00 09 	st.b	r9[9],r8
80007a12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007a16:	f1 38 00 09 	ld.ub	r8,r8[9]
80007a1a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007a1e:	5c 58       	castu.b	r8
80007a20:	58 98       	cp.w	r8,9
80007a22:	e0 8a 00 c2 	brle	80007ba6 <increment_ledBoard_usage_min+0x2f2>
					{
						tmp->min_ones = 0;
80007a26:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007a2a:	f3 38 00 09 	ld.ub	r8,r9[9]
80007a2e:	30 0a       	mov	r10,0
80007a30:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80007a34:	f3 68 00 09 	st.b	r9[9],r8
				
						if (++(tmp->min_tens) > 5)
80007a38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007a3c:	f1 38 00 09 	ld.ub	r8,r8[9]
80007a40:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007a44:	5c 58       	castu.b	r8
80007a46:	2f f8       	sub	r8,-1
80007a48:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007a4c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007a50:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007a54:	f3 38 00 09 	ld.ub	r8,r9[9]
80007a58:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80007a5c:	f3 68 00 09 	st.b	r9[9],r8
80007a60:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007a64:	f1 38 00 09 	ld.ub	r8,r8[9]
80007a68:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007a6c:	5c 58       	castu.b	r8
80007a6e:	58 58       	cp.w	r8,5
80007a70:	e0 8a 00 9b 	brle	80007ba6 <increment_ledBoard_usage_min+0x2f2>
						{
							tmp->min_tens = 0;
80007a74:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007a78:	f3 38 00 09 	ld.ub	r8,r9[9]
80007a7c:	30 0a       	mov	r10,0
80007a7e:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80007a82:	f3 68 00 09 	st.b	r9[9],r8
					
							if (++(tmp->hrs_ones) > 9)
80007a86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007a8a:	f1 38 00 08 	ld.ub	r8,r8[8]
80007a8e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007a92:	5c 58       	castu.b	r8
80007a94:	2f f8       	sub	r8,-1
80007a96:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007a9a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007a9e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007aa2:	f3 38 00 08 	ld.ub	r8,r9[8]
80007aa6:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80007aaa:	f3 68 00 08 	st.b	r9[8],r8
80007aae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007ab2:	f1 38 00 08 	ld.ub	r8,r8[8]
80007ab6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007aba:	5c 58       	castu.b	r8
80007abc:	58 98       	cp.w	r8,9
80007abe:	e0 8a 00 74 	brle	80007ba6 <increment_ledBoard_usage_min+0x2f2>
							{
								tmp->hrs_ones = 0;
80007ac2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007ac6:	f3 38 00 08 	ld.ub	r8,r9[8]
80007aca:	30 0a       	mov	r10,0
80007acc:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80007ad0:	f3 68 00 08 	st.b	r9[8],r8
						
								if (++(tmp->hrs_tens) > 9)
80007ad4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007ad8:	f1 38 00 08 	ld.ub	r8,r8[8]
80007adc:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007ae0:	5c 58       	castu.b	r8
80007ae2:	2f f8       	sub	r8,-1
80007ae4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007ae8:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007aec:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007af0:	f3 38 00 08 	ld.ub	r8,r9[8]
80007af4:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80007af8:	f3 68 00 08 	st.b	r9[8],r8
80007afc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007b00:	f1 38 00 08 	ld.ub	r8,r8[8]
80007b04:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007b08:	5c 58       	castu.b	r8
80007b0a:	58 98       	cp.w	r8,9
80007b0c:	e0 8a 00 4d 	brle	80007ba6 <increment_ledBoard_usage_min+0x2f2>
								{
									tmp->hrs_tens = 0;
80007b10:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007b14:	f3 38 00 08 	ld.ub	r8,r9[8]
80007b18:	30 0a       	mov	r10,0
80007b1a:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80007b1e:	f3 68 00 08 	st.b	r9[8],r8
							
									if (++(tmp->hrs_huns) > 9)
80007b22:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007b26:	11 f8       	ld.ub	r8,r8[0x7]
80007b28:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007b2c:	5c 58       	castu.b	r8
80007b2e:	2f f8       	sub	r8,-1
80007b30:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007b34:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007b38:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007b3c:	13 f8       	ld.ub	r8,r9[0x7]
80007b3e:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80007b42:	b2 f8       	st.b	r9[0x7],r8
80007b44:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007b48:	11 f8       	ld.ub	r8,r8[0x7]
80007b4a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007b4e:	5c 58       	castu.b	r8
80007b50:	58 98       	cp.w	r8,9
80007b52:	e0 8a 00 2a 	brle	80007ba6 <increment_ledBoard_usage_min+0x2f2>
									{
										tmp->hrs_huns = 0;
80007b56:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007b5a:	13 f8       	ld.ub	r8,r9[0x7]
80007b5c:	30 0a       	mov	r10,0
80007b5e:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80007b62:	b2 f8       	st.b	r9[0x7],r8
								
										if (++(tmp->hrs_thous) > 1)
80007b64:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007b68:	11 f8       	ld.ub	r8,r8[0x7]
80007b6a:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007b6e:	5c 58       	castu.b	r8
80007b70:	2f f8       	sub	r8,-1
80007b72:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007b76:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007b7a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007b7e:	13 f8       	ld.ub	r8,r9[0x7]
80007b80:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80007b84:	b2 f8       	st.b	r9[0x7],r8
80007b86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007b8a:	11 f8       	ld.ub	r8,r8[0x7]
80007b8c:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007b90:	5c 58       	castu.b	r8
80007b92:	58 18       	cp.w	r8,1
80007b94:	e0 8a 00 09 	brle	80007ba6 <increment_ledBoard_usage_min+0x2f2>
										{
											tmp->maxUsageReached = 1; //And...we're done. Reached 2000 hours.
80007b98:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007b9c:	13 e8       	ld.ub	r8,r9[0x6]
80007b9e:	30 1a       	mov	r10,1
80007ba0:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
80007ba4:	b2 e8       	st.b	r9[0x6],r8
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
		
			for (unsigned char j=0; j<2; j++) //for each copy of usageShdw[] (update both copies every time)
			{
				for (unsigned char k=0; k<2; k++) //for each board side in the shelf
80007ba6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007baa:	2f f8       	sub	r8,-1
80007bac:	ef 68 ff ff 	st.b	r7[-1],r8
80007bb0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007bb4:	30 18       	mov	r8,1
80007bb6:	f0 09 18 00 	cp.b	r9,r8
80007bba:	fe 98 fe e4 	brls	80007982 <increment_ledBoard_usage_min+0xce>
			bottomLEDboardUpperSideIdx = ledBrd[shelf[i].bLedIdx].uSideIdx;
		
			topUIdx = ledBrdSide[topLEDboardLowerSideIdx].ushdwIdx;
			bottomUIdx = ledBrdSide[bottomLEDboardUpperSideIdx].ushdwIdx;
		
			for (unsigned char j=0; j<2; j++) //for each copy of usageShdw[] (update both copies every time)
80007bbe:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007bc2:	2f f8       	sub	r8,-1
80007bc4:	ef 68 ff fe 	st.b	r7[-2],r8
80007bc8:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007bcc:	30 18       	mov	r8,1
80007bce:	f0 09 18 00 	cp.b	r9,r8
80007bd2:	fe 98 fe d4 	brls	8000797a <increment_ledBoard_usage_min+0xc6>
	unsigned char topLEDboardLowerSideIdx;
	unsigned char bottomLEDboardUpperSideIdx;
	unsigned char topUIdx;
	unsigned char bottomUIdx;
	
	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
80007bd6:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80007bda:	2f f8       	sub	r8,-1
80007bdc:	ef 68 ff fd 	st.b	r7[-3],r8
80007be0:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80007be4:	30 38       	mov	r8,3
80007be6:	f0 09 18 00 	cp.b	r9,r8
80007bea:	fe 98 fe 6d 	brls	800078c4 <increment_ledBoard_usage_min+0x10>
				} //for each board side in the shelf (k)
			} //for each copy of usageShdw
		} //if (shelf[i].active)
	} //for (i=0; i<NUM_SHELVES; i++)
	
	usageShdw[pingPong].csum = calc_usage_csum(pingPong);
80007bee:	49 a8       	lddpc	r8,80007c54 <increment_ledBoard_usage_min+0x3a0>
80007bf0:	11 88       	ld.ub	r8,r8[0x0]
80007bf2:	10 96       	mov	r6,r8
80007bf4:	49 88       	lddpc	r8,80007c54 <increment_ledBoard_usage_min+0x3a0>
80007bf6:	11 88       	ld.ub	r8,r8[0x0]
80007bf8:	10 9c       	mov	r12,r8
80007bfa:	f0 1f 00 18 	mcall	80007c58 <increment_ledBoard_usage_min+0x3a4>
80007bfe:	18 98       	mov	r8,r12
80007c00:	10 9a       	mov	r10,r8
80007c02:	49 4b       	lddpc	r11,80007c50 <increment_ledBoard_usage_min+0x39c>
80007c04:	0c 98       	mov	r8,r6
80007c06:	a5 78       	lsl	r8,0x5
80007c08:	0c 18       	sub	r8,r6
80007c0a:	f0 09 15 05 	lsl	r9,r8,0x5
80007c0e:	10 19       	sub	r9,r8
80007c10:	f6 09 00 08 	add	r8,r11,r9
80007c14:	f0 c9 fc 40 	sub	r9,r8,-960
80007c18:	14 98       	mov	r8,r10
80007c1a:	b2 88       	st.b	r9[0x0],r8
			
	write_usage_to_flash(pingPong);
80007c1c:	48 e8       	lddpc	r8,80007c54 <increment_ledBoard_usage_min+0x3a0>
80007c1e:	11 88       	ld.ub	r8,r8[0x0]
80007c20:	10 9c       	mov	r12,r8
80007c22:	f0 1f 00 0f 	mcall	80007c5c <increment_ledBoard_usage_min+0x3a8>
	
	pingPong++;
80007c26:	48 c8       	lddpc	r8,80007c54 <increment_ledBoard_usage_min+0x3a0>
80007c28:	11 88       	ld.ub	r8,r8[0x0]
80007c2a:	2f f8       	sub	r8,-1
80007c2c:	5c 58       	castu.b	r8
80007c2e:	48 a9       	lddpc	r9,80007c54 <increment_ledBoard_usage_min+0x3a0>
80007c30:	b2 88       	st.b	r9[0x0],r8
	pingPong &= 1; //toggle between 0 (EVEN) and 1 (ODD)
80007c32:	48 98       	lddpc	r8,80007c54 <increment_ledBoard_usage_min+0x3a0>
80007c34:	11 88       	ld.ub	r8,r8[0x0]
80007c36:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007c3a:	48 79       	lddpc	r9,80007c54 <increment_ledBoard_usage_min+0x3a0>
80007c3c:	b2 88       	st.b	r9[0x0],r8
}
80007c3e:	2f dd       	sub	sp,-12
80007c40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007c44:	00 00       	add	r0,r0
80007c46:	03 3a       	ld.ub	r10,r1++
80007c48:	00 00       	add	r0,r0
80007c4a:	02 f4       	st.b	--r1,r4
80007c4c:	00 00       	add	r0,r0
80007c4e:	0b 24       	ld.uh	r4,r5++
80007c50:	00 00       	add	r0,r0
80007c52:	03 88       	ld.ub	r8,r1[0x0]
80007c54:	00 00       	add	r0,r0
80007c56:	0b 4d       	ld.w	sp,--r5
80007c58:	80 00       	ld.sh	r0,r0[0x0]
80007c5a:	72 0c       	ld.w	r12,r9[0x0]
80007c5c:	80 00       	ld.sh	r0,r0[0x0]
80007c5e:	75 fc       	ld.w	r12,r10[0x7c]

80007c60 <init_shelf_n_ledBrd_structs>:


void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
80007c60:	eb cd 40 80 	pushm	r7,lr
80007c64:	1a 97       	mov	r7,sp
80007c66:	20 5d       	sub	sp,20
	
	for (int i=0; i<NUM_SHELVES; i++)
80007c68:	30 08       	mov	r8,0
80007c6a:	ef 48 ff ec 	st.w	r7[-20],r8
80007c6e:	c2 b8       	rjmp	80007cc4 <init_shelf_n_ledBrd_structs+0x64>
	{
		shelf[i].active = 0;
80007c70:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007c74:	fe fa 02 ac 	ld.w	r10,pc[684]
80007c78:	12 98       	mov	r8,r9
80007c7a:	a3 68       	lsl	r8,0x2
80007c7c:	12 08       	add	r8,r9
80007c7e:	f4 08 00 09 	add	r9,r10,r8
80007c82:	30 08       	mov	r8,0
80007c84:	b2 88       	st.b	r9[0x0],r8
		shelf[i].devicesPresent = 0;
80007c86:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007c8a:	fe fa 02 96 	ld.w	r10,pc[662]
80007c8e:	12 98       	mov	r8,r9
80007c90:	a3 68       	lsl	r8,0x2
80007c92:	12 08       	add	r8,r9
80007c94:	f4 08 00 08 	add	r8,r10,r8
80007c98:	f0 c9 ff fd 	sub	r9,r8,-3
80007c9c:	30 08       	mov	r8,0
80007c9e:	b2 88       	st.b	r9[0x0],r8
		shelf[i].present = 0;
80007ca0:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007ca4:	fe fa 02 7c 	ld.w	r10,pc[636]
80007ca8:	12 98       	mov	r8,r9
80007caa:	a3 68       	lsl	r8,0x2
80007cac:	12 08       	add	r8,r9
80007cae:	f4 08 00 08 	add	r8,r10,r8
80007cb2:	f0 c9 ff fc 	sub	r9,r8,-4
80007cb6:	30 08       	mov	r8,0
80007cb8:	b2 88       	st.b	r9[0x0],r8

void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
	
	for (int i=0; i<NUM_SHELVES; i++)
80007cba:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007cbe:	2f f8       	sub	r8,-1
80007cc0:	ef 48 ff ec 	st.w	r7[-20],r8
80007cc4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007cc8:	58 38       	cp.w	r8,3
80007cca:	fe 9a ff d3 	brle	80007c70 <init_shelf_n_ledBrd_structs+0x10>
		shelf[i].active = 0;
		shelf[i].devicesPresent = 0;
		shelf[i].present = 0;
	}
	
	shelf[0].tLedIdx = 0;
80007cce:	fe f9 02 52 	ld.w	r9,pc[594]
80007cd2:	30 08       	mov	r8,0
80007cd4:	b2 98       	st.b	r9[0x1],r8
	shelf[0].bLedIdx = 1;
80007cd6:	fe f9 02 4a 	ld.w	r9,pc[586]
80007cda:	30 18       	mov	r8,1
80007cdc:	b2 a8       	st.b	r9[0x2],r8
	shelf[1].tLedIdx = 1;
80007cde:	fe f9 02 42 	ld.w	r9,pc[578]
80007ce2:	30 18       	mov	r8,1
80007ce4:	b2 e8       	st.b	r9[0x6],r8
	shelf[1].bLedIdx = 2;
80007ce6:	fe f9 02 3a 	ld.w	r9,pc[570]
80007cea:	30 28       	mov	r8,2
80007cec:	b2 f8       	st.b	r9[0x7],r8
	shelf[2].tLedIdx = 2;
80007cee:	fe f9 02 32 	ld.w	r9,pc[562]
80007cf2:	30 28       	mov	r8,2
80007cf4:	f3 68 00 0b 	st.b	r9[11],r8
	shelf[2].bLedIdx = 3;
80007cf8:	fe f9 02 28 	ld.w	r9,pc[552]
80007cfc:	30 38       	mov	r8,3
80007cfe:	f3 68 00 0c 	st.b	r9[12],r8
	shelf[3].tLedIdx = 3;
80007d02:	fe f9 02 1e 	ld.w	r9,pc[542]
80007d06:	30 38       	mov	r8,3
80007d08:	f3 68 00 10 	st.b	r9[16],r8
	shelf[3].bLedIdx = 4;
80007d0c:	fe f9 02 14 	ld.w	r9,pc[532]
80007d10:	30 48       	mov	r8,4
80007d12:	f3 68 00 11 	st.b	r9[17],r8
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80007d16:	30 08       	mov	r8,0
80007d18:	ef 48 ff f0 	st.w	r7[-16],r8
80007d1c:	c1 48       	rjmp	80007d44 <init_shelf_n_ledBrd_structs+0xe4>
	{
		ledBrd[i].present = 0;
80007d1e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007d22:	fe fa 02 02 	ld.w	r10,pc[514]
80007d26:	12 98       	mov	r8,r9
80007d28:	a3 78       	lsl	r8,0x3
80007d2a:	12 18       	sub	r8,r9
80007d2c:	a1 78       	lsl	r8,0x1
80007d2e:	f4 08 00 08 	add	r8,r10,r8
80007d32:	f0 c9 ff f8 	sub	r9,r8,-8
80007d36:	30 08       	mov	r8,0
80007d38:	b2 88       	st.b	r9[0x0],r8
	shelf[2].tLedIdx = 2;
	shelf[2].bLedIdx = 3;
	shelf[3].tLedIdx = 3;
	shelf[3].bLedIdx = 4;
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80007d3a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007d3e:	2f f8       	sub	r8,-1
80007d40:	ef 48 ff f0 	st.w	r7[-16],r8
80007d44:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007d48:	58 48       	cp.w	r8,4
80007d4a:	fe 9a ff ea 	brle	80007d1e <init_shelf_n_ledBrd_structs+0xbe>
	{
		ledBrd[i].present = 0;
	}
	
	ledBrd[0].uSideIdx = 0xFF;
80007d4e:	4f 69       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007d50:	3f f8       	mov	r8,-1
80007d52:	f3 68 00 0a 	st.b	r9[10],r8
	ledBrd[0].lSideIdx = 0;
80007d56:	4f 49       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007d58:	30 08       	mov	r8,0
80007d5a:	f3 68 00 0b 	st.b	r9[11],r8
	ledBrd[1].uSideIdx = 1;
80007d5e:	4f 29       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007d60:	30 18       	mov	r8,1
80007d62:	f3 68 00 18 	st.b	r9[24],r8
	ledBrd[1].lSideIdx = 2;
80007d66:	4f 09       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007d68:	30 28       	mov	r8,2
80007d6a:	f3 68 00 19 	st.b	r9[25],r8
	ledBrd[2].uSideIdx = 3;
80007d6e:	4e e9       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007d70:	30 38       	mov	r8,3
80007d72:	f3 68 00 26 	st.b	r9[38],r8
	ledBrd[2].lSideIdx = 4;
80007d76:	4e c9       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007d78:	30 48       	mov	r8,4
80007d7a:	f3 68 00 27 	st.b	r9[39],r8
	ledBrd[3].uSideIdx = 5;
80007d7e:	4e a9       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007d80:	30 58       	mov	r8,5
80007d82:	f3 68 00 34 	st.b	r9[52],r8
	ledBrd[3].lSideIdx = 6;
80007d86:	4e 89       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007d88:	30 68       	mov	r8,6
80007d8a:	f3 68 00 35 	st.b	r9[53],r8
	ledBrd[4].uSideIdx = 7;
80007d8e:	4e 69       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007d90:	30 78       	mov	r8,7
80007d92:	f3 68 00 42 	st.b	r9[66],r8
	ledBrd[4].lSideIdx = 0xFF;
80007d96:	4e 49       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007d98:	3f f8       	mov	r8,-1
80007d9a:	f3 68 00 43 	st.b	r9[67],r8

	ledBrd[0].uSideShelfIdx = 0xFF;
80007d9e:	4e 29       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007da0:	3f f8       	mov	r8,-1
80007da2:	f3 68 00 0c 	st.b	r9[12],r8
	ledBrd[1].uSideShelfIdx = 0;
80007da6:	4e 09       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007da8:	30 08       	mov	r8,0
80007daa:	f3 68 00 1a 	st.b	r9[26],r8
	ledBrd[2].uSideShelfIdx = 1;
80007dae:	4d e9       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007db0:	30 18       	mov	r8,1
80007db2:	f3 68 00 28 	st.b	r9[40],r8
	ledBrd[3].uSideShelfIdx = 2;
80007db6:	4d c9       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007db8:	30 28       	mov	r8,2
80007dba:	f3 68 00 36 	st.b	r9[54],r8
	ledBrd[4].uSideShelfIdx = 3;
80007dbe:	4d a9       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007dc0:	30 38       	mov	r8,3
80007dc2:	f3 68 00 44 	st.b	r9[68],r8
 
	ledBrd[0].lSideShelfIdx = 0;
80007dc6:	4d 89       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007dc8:	30 08       	mov	r8,0
80007dca:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrd[1].lSideShelfIdx = 1;
80007dce:	4d 69       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007dd0:	30 18       	mov	r8,1
80007dd2:	f3 68 00 1b 	st.b	r9[27],r8
	ledBrd[2].lSideShelfIdx = 2;
80007dd6:	4d 49       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007dd8:	30 28       	mov	r8,2
80007dda:	f3 68 00 29 	st.b	r9[41],r8
	ledBrd[3].lSideShelfIdx = 3;
80007dde:	4d 29       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007de0:	30 38       	mov	r8,3
80007de2:	f3 68 00 37 	st.b	r9[55],r8
	ledBrd[4].lSideShelfIdx = 0xFF;
80007de6:	4d 09       	lddpc	r9,80007f24 <init_shelf_n_ledBrd_structs+0x2c4>
80007de8:	3f f8       	mov	r8,-1
80007dea:	f3 68 00 45 	st.b	r9[69],r8
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80007dee:	30 08       	mov	r8,0
80007df0:	ef 48 ff f4 	st.w	r7[-12],r8
80007df4:	c2 88       	rjmp	80007e44 <init_shelf_n_ledBrd_structs+0x1e4>
	{
		ledBrdSide[i].maxUsageReached = 0;
80007df6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007dfa:	4c ca       	lddpc	r10,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007dfc:	12 98       	mov	r8,r9
80007dfe:	a3 68       	lsl	r8,0x2
80007e00:	12 08       	add	r8,r9
80007e02:	f4 08 00 08 	add	r8,r10,r8
80007e06:	f0 c9 ff fe 	sub	r9,r8,-2
80007e0a:	30 08       	mov	r8,0
80007e0c:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].sanitizeMinutes = 0;
80007e0e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007e12:	4c 6a       	lddpc	r10,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e14:	12 98       	mov	r8,r9
80007e16:	a3 68       	lsl	r8,0x2
80007e18:	12 08       	add	r8,r9
80007e1a:	f4 08 00 09 	add	r9,r10,r8
80007e1e:	30 08       	mov	r8,0
80007e20:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].ushdwIdx = 0xFF;
80007e22:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007e26:	4c 1a       	lddpc	r10,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e28:	12 98       	mov	r8,r9
80007e2a:	a3 68       	lsl	r8,0x2
80007e2c:	12 08       	add	r8,r9
80007e2e:	f4 08 00 08 	add	r8,r10,r8
80007e32:	f0 c9 ff ff 	sub	r9,r8,-1
80007e36:	3f f8       	mov	r8,-1
80007e38:	b2 88       	st.b	r9[0x0],r8
	ledBrd[2].lSideShelfIdx = 2;
	ledBrd[3].lSideShelfIdx = 3;
	ledBrd[4].lSideShelfIdx = 0xFF;
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80007e3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007e3e:	2f f8       	sub	r8,-1
80007e40:	ef 48 ff f4 	st.w	r7[-12],r8
80007e44:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007e48:	58 78       	cp.w	r8,7
80007e4a:	fe 9a ff d6 	brle	80007df6 <init_shelf_n_ledBrd_structs+0x196>
		ledBrdSide[i].maxUsageReached = 0;
		ledBrdSide[i].sanitizeMinutes = 0;
		ledBrdSide[i].ushdwIdx = 0xFF;
	}
	
	ledBrdSide[0].boardIdx = 0;
80007e4e:	4b 79       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e50:	30 08       	mov	r8,0
80007e52:	b2 c8       	st.b	r9[0x4],r8
	ledBrdSide[1].boardIdx = 1;
80007e54:	4b 59       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e56:	30 18       	mov	r8,1
80007e58:	f3 68 00 09 	st.b	r9[9],r8
	ledBrdSide[2].boardIdx = 1;
80007e5c:	4b 39       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e5e:	30 18       	mov	r8,1
80007e60:	f3 68 00 0e 	st.b	r9[14],r8
	ledBrdSide[3].boardIdx = 2;
80007e64:	4b 19       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e66:	30 28       	mov	r8,2
80007e68:	f3 68 00 13 	st.b	r9[19],r8
	ledBrdSide[4].boardIdx = 2;
80007e6c:	4a f9       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e6e:	30 28       	mov	r8,2
80007e70:	f3 68 00 18 	st.b	r9[24],r8
	ledBrdSide[5].boardIdx = 3;
80007e74:	4a d9       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e76:	30 38       	mov	r8,3
80007e78:	f3 68 00 1d 	st.b	r9[29],r8
	ledBrdSide[6].boardIdx = 3;
80007e7c:	4a b9       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e7e:	30 38       	mov	r8,3
80007e80:	f3 68 00 22 	st.b	r9[34],r8
	ledBrdSide[7].boardIdx = 4;
80007e84:	4a 99       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e86:	30 48       	mov	r8,4
80007e88:	f3 68 00 27 	st.b	r9[39],r8
	

	ledBrdSide[0].shelfIdx = 0;
80007e8c:	4a 79       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e8e:	30 08       	mov	r8,0
80007e90:	b2 b8       	st.b	r9[0x3],r8
	ledBrdSide[1].shelfIdx = 0;
80007e92:	4a 69       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e94:	30 08       	mov	r8,0
80007e96:	f3 68 00 08 	st.b	r9[8],r8
	ledBrdSide[2].shelfIdx = 1;
80007e9a:	4a 49       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007e9c:	30 18       	mov	r8,1
80007e9e:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrdSide[3].shelfIdx = 1;
80007ea2:	4a 29       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007ea4:	30 18       	mov	r8,1
80007ea6:	f3 68 00 12 	st.b	r9[18],r8
	ledBrdSide[4].shelfIdx = 2;
80007eaa:	4a 09       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007eac:	30 28       	mov	r8,2
80007eae:	f3 68 00 17 	st.b	r9[23],r8
	ledBrdSide[5].shelfIdx = 2;
80007eb2:	49 e9       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007eb4:	30 28       	mov	r8,2
80007eb6:	f3 68 00 1c 	st.b	r9[28],r8
	ledBrdSide[6].shelfIdx = 3;
80007eba:	49 c9       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007ebc:	30 38       	mov	r8,3
80007ebe:	f3 68 00 21 	st.b	r9[33],r8
	ledBrdSide[7].shelfIdx = 3;
80007ec2:	49 a9       	lddpc	r9,80007f28 <init_shelf_n_ledBrd_structs+0x2c8>
80007ec4:	30 38       	mov	r8,3
80007ec6:	f3 68 00 26 	st.b	r9[38],r8
	
	for (int i=0; i<2; i++)
80007eca:	30 08       	mov	r8,0
80007ecc:	ef 48 ff f8 	st.w	r7[-8],r8
80007ed0:	c1 f8       	rjmp	80007f0e <init_shelf_n_ledBrd_structs+0x2ae>
	{
		for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
80007ed2:	30 08       	mov	r8,0
80007ed4:	ef 48 ff fc 	st.w	r7[-4],r8
80007ed8:	c1 18       	rjmp	80007efa <init_shelf_n_ledBrd_structs+0x29a>
		{
			usageIdx[i][j] = NO_LED_BOARD_PRESENT;
80007eda:	ee fa ff f8 	ld.w	r10,r7[-8]
80007ede:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007ee2:	49 39       	lddpc	r9,80007f2c <init_shelf_n_ledBrd_structs+0x2cc>
80007ee4:	a3 7a       	lsl	r10,0x3
80007ee6:	f4 08 00 08 	add	r8,r10,r8
80007eea:	10 09       	add	r9,r8
80007eec:	3f f8       	mov	r8,-1
80007eee:	b2 88       	st.b	r9[0x0],r8
	ledBrdSide[6].shelfIdx = 3;
	ledBrdSide[7].shelfIdx = 3;
	
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<NUM_LED_BOARD_SIDES; j++)
80007ef0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007ef4:	2f f8       	sub	r8,-1
80007ef6:	ef 48 ff fc 	st.w	r7[-4],r8
80007efa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007efe:	58 78       	cp.w	r8,7
80007f00:	fe 9a ff ed 	brle	80007eda <init_shelf_n_ledBrd_structs+0x27a>
	ledBrdSide[4].shelfIdx = 2;
	ledBrdSide[5].shelfIdx = 2;
	ledBrdSide[6].shelfIdx = 3;
	ledBrdSide[7].shelfIdx = 3;
	
	for (int i=0; i<2; i++)
80007f04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f08:	2f f8       	sub	r8,-1
80007f0a:	ef 48 ff f8 	st.w	r7[-8],r8
80007f0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f12:	58 18       	cp.w	r8,1
80007f14:	fe 9a ff df 	brle	80007ed2 <init_shelf_n_ledBrd_structs+0x272>
		{
			usageIdx[i][j] = NO_LED_BOARD_PRESENT;
		}
	}

}
80007f18:	2f bd       	sub	sp,-20
80007f1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f1e:	00 00       	add	r0,r0
80007f20:	00 00       	add	r0,r0
80007f22:	03 3a       	ld.ub	r10,r1++
80007f24:	00 00       	add	r0,r0
80007f26:	02 f4       	st.b	--r1,r4
80007f28:	00 00       	add	r0,r0
80007f2a:	0b 24       	ld.uh	r4,r5++
80007f2c:	00 00       	add	r0,r0
80007f2e:	03 69       	ld.uh	r9,--r1

80007f30 <load_usageIdx_to_ledBrdSide>:

void load_usageIdx_to_ledBrdSide(unsigned char sel);
void load_usageIdx_to_ledBrdSide(unsigned char sel)
{
80007f30:	eb cd 40 80 	pushm	r7,lr
80007f34:	1a 97       	mov	r7,sp
80007f36:	20 2d       	sub	sp,8
80007f38:	18 98       	mov	r8,r12
80007f3a:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80007f3e:	30 08       	mov	r8,0
80007f40:	ef 48 ff fc 	st.w	r7[-4],r8
80007f44:	c1 d8       	rjmp	80007f7e <load_usageIdx_to_ledBrdSide+0x4e>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[sel][i];
80007f46:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007f4a:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80007f4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f52:	49 0a       	lddpc	r10,80007f90 <load_usageIdx_to_ledBrdSide+0x60>
80007f54:	a3 7b       	lsl	r11,0x3
80007f56:	f6 08 00 08 	add	r8,r11,r8
80007f5a:	f4 08 00 08 	add	r8,r10,r8
80007f5e:	11 8a       	ld.ub	r10,r8[0x0]
80007f60:	48 db       	lddpc	r11,80007f94 <load_usageIdx_to_ledBrdSide+0x64>
80007f62:	12 98       	mov	r8,r9
80007f64:	a3 68       	lsl	r8,0x2
80007f66:	12 08       	add	r8,r9
80007f68:	f6 08 00 08 	add	r8,r11,r8
80007f6c:	f0 c9 ff ff 	sub	r9,r8,-1
80007f70:	14 98       	mov	r8,r10
80007f72:	b2 88       	st.b	r9[0x0],r8
}

void load_usageIdx_to_ledBrdSide(unsigned char sel);
void load_usageIdx_to_ledBrdSide(unsigned char sel)
{
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80007f74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f78:	2f f8       	sub	r8,-1
80007f7a:	ef 48 ff fc 	st.w	r7[-4],r8
80007f7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f82:	58 78       	cp.w	r8,7
80007f84:	fe 9a ff e1 	brle	80007f46 <load_usageIdx_to_ledBrdSide+0x16>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[sel][i];
	}
}
80007f88:	2f ed       	sub	sp,-8
80007f8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f8e:	00 00       	add	r0,r0
80007f90:	00 00       	add	r0,r0
80007f92:	03 69       	ld.uh	r9,--r1
80007f94:	00 00       	add	r0,r0
80007f96:	0b 24       	ld.uh	r4,r5++

80007f98 <init_led_board_info>:


void init_led_board_info(void);
void init_led_board_info(void)
{
80007f98:	eb cd 40 c0 	pushm	r6-r7,lr
80007f9c:	1a 97       	mov	r7,sp
80007f9e:	20 5d       	sub	sp,20
	unsigned char usage0good, usage1good;
	unsigned int usage0cnt, usage1cnt;
	unsigned char newer, older, previouslyOlder;
	unsigned char good, bad, previouslyBad;
	
	init_shelf_n_ledBrd_structs();
80007fa0:	f0 1f 00 ae 	mcall	80008258 <init_led_board_info+0x2c0>
	
	read_led_board_serial_ids();
80007fa4:	f0 1f 00 ae 	mcall	8000825c <init_led_board_info+0x2c4>
	usage0good = read_usage_struct(0);
80007fa8:	30 0c       	mov	r12,0
80007faa:	f0 1f 00 ae 	mcall	80008260 <init_led_board_info+0x2c8>
80007fae:	18 98       	mov	r8,r12
80007fb0:	ef 68 ff ee 	st.b	r7[-18],r8
	usage1good = read_usage_struct(1);
80007fb4:	30 1c       	mov	r12,1
80007fb6:	f0 1f 00 ab 	mcall	80008260 <init_led_board_info+0x2c8>
80007fba:	18 98       	mov	r8,r12
80007fbc:	ef 68 ff ef 	st.b	r7[-17],r8
	
	if (usage0good)
80007fc0:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80007fc4:	30 08       	mov	r8,0
80007fc6:	f0 09 18 00 	cp.b	r9,r8
80007fca:	c0 50       	breq	80007fd4 <init_led_board_info+0x3c>
	{
		load_usage_indeces(0);
80007fcc:	30 0c       	mov	r12,0
80007fce:	f0 1f 00 a6 	mcall	80008264 <init_led_board_info+0x2cc>
80007fd2:	c0 88       	rjmp	80007fe2 <init_led_board_info+0x4a>
	}
	else
	{
		memset(&usageShdw[0], 0x00, sizeof(usageShdw[0]));
80007fd4:	e0 6a 03 c1 	mov	r10,961
80007fd8:	30 0b       	mov	r11,0
80007fda:	fe fc 02 8e 	ld.w	r12,pc[654]
80007fde:	f0 1f 00 a4 	mcall	8000826c <init_led_board_info+0x2d4>
	}
	
	if (usage1good)
80007fe2:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80007fe6:	30 08       	mov	r8,0
80007fe8:	f0 09 18 00 	cp.b	r9,r8
80007fec:	c0 50       	breq	80007ff6 <init_led_board_info+0x5e>
	{
		load_usage_indeces(1);
80007fee:	30 1c       	mov	r12,1
80007ff0:	f0 1f 00 9d 	mcall	80008264 <init_led_board_info+0x2cc>
80007ff4:	c0 b8       	rjmp	8000800a <init_led_board_info+0x72>
	}
	else
	{
		memset(&usageShdw[1], 0x00, sizeof(usageShdw[1]));
80007ff6:	fe f8 02 72 	ld.w	r8,pc[626]
80007ffa:	f0 c8 fc 3f 	sub	r8,r8,-961
80007ffe:	e0 6a 03 c1 	mov	r10,961
80008002:	30 0b       	mov	r11,0
80008004:	10 9c       	mov	r12,r8
80008006:	f0 1f 00 9a 	mcall	8000826c <init_led_board_info+0x2d4>
	}
	
	if ((!usage0good) && (!usage1good)) //Chassis is probably powering up for the first time
8000800a:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000800e:	30 08       	mov	r8,0
80008010:	f0 09 18 00 	cp.b	r9,r8
80008014:	c3 a1       	brne	80008088 <init_led_board_info+0xf0>
80008016:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000801a:	30 08       	mov	r8,0
8000801c:	f0 09 18 00 	cp.b	r9,r8
80008020:	c3 41       	brne	80008088 <init_led_board_info+0xf0>
	{
		if (test_flash(0) == ERROR)
80008022:	30 0c       	mov	r12,0
80008024:	f0 1f 00 93 	mcall	80008270 <init_led_board_info+0x2d8>
80008028:	18 98       	mov	r8,r12
8000802a:	10 99       	mov	r9,r8
8000802c:	30 18       	mov	r8,1
8000802e:	f0 09 18 00 	cp.b	r9,r8
80008032:	c0 31       	brne	80008038 <init_led_board_info+0xa0>
		{
			chassis_error();
80008034:	f0 1f 00 90 	mcall	80008274 <init_led_board_info+0x2dc>
		}
		if (test_flash(1) == ERROR)
80008038:	30 1c       	mov	r12,1
8000803a:	f0 1f 00 8e 	mcall	80008270 <init_led_board_info+0x2d8>
8000803e:	18 98       	mov	r8,r12
80008040:	10 99       	mov	r9,r8
80008042:	30 18       	mov	r8,1
80008044:	f0 09 18 00 	cp.b	r9,r8
80008048:	c0 31       	brne	8000804e <init_led_board_info+0xb6>
		{
			chassis_error();
8000804a:	f0 1f 00 8b 	mcall	80008274 <init_led_board_info+0x2dc>
		}
		add_new_led_board_sides_to_usage(0);
8000804e:	30 0c       	mov	r12,0
80008050:	f0 1f 00 8a 	mcall	80008278 <init_led_board_info+0x2e0>
		load_usageIdx_to_ledBrdSide(0);
80008054:	30 0c       	mov	r12,0
80008056:	f0 1f 00 8a 	mcall	8000827c <init_led_board_info+0x2e4>
		usageShdw[0].csum = calc_usage_csum(0);
8000805a:	30 0c       	mov	r12,0
8000805c:	f0 1f 00 89 	mcall	80008280 <init_led_board_info+0x2e8>
80008060:	18 98       	mov	r8,r12
80008062:	fe f9 02 06 	ld.w	r9,pc[518]
80008066:	f3 68 03 c0 	st.b	r9[960],r8
		copy_usage_to_usage(1,0);
8000806a:	30 0b       	mov	r11,0
8000806c:	30 1c       	mov	r12,1
8000806e:	f0 1f 00 86 	mcall	80008284 <init_led_board_info+0x2ec>
		write_usage_to_flash(0);
80008072:	30 0c       	mov	r12,0
80008074:	f0 1f 00 85 	mcall	80008288 <init_led_board_info+0x2f0>
		write_usage_to_flash(1);
80008078:	30 1c       	mov	r12,1
8000807a:	f0 1f 00 84 	mcall	80008288 <init_led_board_info+0x2f0>
		pingPong = 0;
8000807e:	fe f9 02 0e 	ld.w	r9,pc[526]
80008082:	30 08       	mov	r8,0
80008084:	b2 88       	st.b	r9[0x0],r8
	else
	{
		memset(&usageShdw[1], 0x00, sizeof(usageShdw[1]));
	}
	
	if ((!usage0good) && (!usage1good)) //Chassis is probably powering up for the first time
80008086:	ce 68       	rjmp	80008252 <init_led_board_info+0x2ba>
		write_usage_to_flash(0);
		write_usage_to_flash(1);
		pingPong = 0;
		
	}
	else if (usage0good && usage1good) //Both usage structs are good, find the newer one
80008088:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000808c:	30 08       	mov	r8,0
8000808e:	f0 09 18 00 	cp.b	r9,r8
80008092:	c7 a0       	breq	80008186 <init_led_board_info+0x1ee>
80008094:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008098:	30 08       	mov	r8,0
8000809a:	f0 09 18 00 	cp.b	r9,r8
8000809e:	c7 40       	breq	80008186 <init_led_board_info+0x1ee>
	{
		usage0cnt = calc_usage_current_led_boards(0);
800080a0:	30 0c       	mov	r12,0
800080a2:	f0 1f 00 7c 	mcall	80008290 <init_led_board_info+0x2f8>
800080a6:	18 98       	mov	r8,r12
800080a8:	ef 48 ff f0 	st.w	r7[-16],r8
		usage1cnt = calc_usage_current_led_boards(1);
800080ac:	30 1c       	mov	r12,1
800080ae:	f0 1f 00 79 	mcall	80008290 <init_led_board_info+0x2f8>
800080b2:	18 98       	mov	r8,r12
800080b4:	ef 48 ff f4 	st.w	r7[-12],r8
		
		if (usage0cnt >= usage1cnt)
800080b8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800080bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800080c0:	10 39       	cp.w	r9,r8
800080c2:	c0 53       	brcs	800080cc <init_led_board_info+0x134>
		{
			newer = 0;
800080c4:	30 08       	mov	r8,0
800080c6:	ef 68 ff fa 	st.b	r7[-6],r8
800080ca:	c0 48       	rjmp	800080d2 <init_led_board_info+0x13a>
		}
		else
		{
			newer = 1;
800080cc:	30 18       	mov	r8,1
800080ce:	ef 68 ff fa 	st.b	r7[-6],r8
		}
		older = newer ^ 1; //older is the opposite of newer
800080d2:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800080d6:	ec 18 00 01 	eorl	r8,0x1
800080da:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (test_flash(older) == ERROR)
800080de:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800080e2:	10 9c       	mov	r12,r8
800080e4:	f0 1f 00 63 	mcall	80008270 <init_led_board_info+0x2d8>
800080e8:	18 98       	mov	r8,r12
800080ea:	10 99       	mov	r9,r8
800080ec:	30 18       	mov	r8,1
800080ee:	f0 09 18 00 	cp.b	r9,r8
800080f2:	c0 31       	brne	800080f8 <init_led_board_info+0x160>
		{
			chassis_error();
800080f4:	f0 1f 00 60 	mcall	80008274 <init_led_board_info+0x2dc>
		}

		add_new_led_board_sides_to_usage(newer);
800080f8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800080fc:	10 9c       	mov	r12,r8
800080fe:	f0 1f 00 5f 	mcall	80008278 <init_led_board_info+0x2e0>
		load_usageIdx_to_ledBrdSide(newer);
80008102:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008106:	10 9c       	mov	r12,r8
80008108:	f0 1f 00 5d 	mcall	8000827c <init_led_board_info+0x2e4>
		usageShdw[newer].csum = calc_usage_csum(newer);
8000810c:	ef 36 ff fa 	ld.ub	r6,r7[-6]
80008110:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008114:	10 9c       	mov	r12,r8
80008116:	f0 1f 00 5b 	mcall	80008280 <init_led_board_info+0x2e8>
8000811a:	18 98       	mov	r8,r12
8000811c:	10 9a       	mov	r10,r8
8000811e:	4d 3b       	lddpc	r11,80008268 <init_led_board_info+0x2d0>
80008120:	0c 98       	mov	r8,r6
80008122:	a5 78       	lsl	r8,0x5
80008124:	0c 18       	sub	r8,r6
80008126:	f0 09 15 05 	lsl	r9,r8,0x5
8000812a:	10 19       	sub	r9,r8
8000812c:	f6 09 00 08 	add	r8,r11,r9
80008130:	f0 c9 fc 40 	sub	r9,r8,-960
80008134:	14 98       	mov	r8,r10
80008136:	b2 88       	st.b	r9[0x0],r8
		copy_usage_to_usage(older, newer);
80008138:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000813c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008140:	12 9b       	mov	r11,r9
80008142:	10 9c       	mov	r12,r8
80008144:	f0 1f 00 50 	mcall	80008284 <init_led_board_info+0x2ec>
		previouslyOlder = older;
80008148:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000814c:	ef 68 ff fc 	st.b	r7[-4],r8
		write_usage_to_flash(previouslyOlder);
80008150:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008154:	10 9c       	mov	r12,r8
80008156:	f0 1f 00 4d 	mcall	80008288 <init_led_board_info+0x2f0>
		if (test_flash(newer) == ERROR)
8000815a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000815e:	10 9c       	mov	r12,r8
80008160:	f0 1f 00 44 	mcall	80008270 <init_led_board_info+0x2d8>
80008164:	18 98       	mov	r8,r12
80008166:	10 99       	mov	r9,r8
80008168:	30 18       	mov	r8,1
8000816a:	f0 09 18 00 	cp.b	r9,r8
8000816e:	c0 31       	brne	80008174 <init_led_board_info+0x1dc>
		{
			chassis_error();
80008170:	f0 1f 00 41 	mcall	80008274 <init_led_board_info+0x2dc>
		}

		write_usage_to_flash(newer);
80008174:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008178:	10 9c       	mov	r12,r8
8000817a:	f0 1f 00 44 	mcall	80008288 <init_led_board_info+0x2f0>
		pingPong = 0;
8000817e:	4c 49       	lddpc	r9,8000828c <init_led_board_info+0x2f4>
80008180:	30 08       	mov	r8,0
80008182:	b2 88       	st.b	r9[0x0],r8
		write_usage_to_flash(0);
		write_usage_to_flash(1);
		pingPong = 0;
		
	}
	else if (usage0good && usage1good) //Both usage structs are good, find the newer one
80008184:	c6 78       	rjmp	80008252 <init_led_board_info+0x2ba>
		pingPong = 0;
		
	}
	else //Only one usage struct is good, the other was probably corrupted during a power-down while sanitizing
	{
		if (usage0good)
80008186:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000818a:	30 08       	mov	r8,0
8000818c:	f0 09 18 00 	cp.b	r9,r8
80008190:	c0 50       	breq	8000819a <init_led_board_info+0x202>
		{
			good = 0;
80008192:	30 08       	mov	r8,0
80008194:	ef 68 ff fd 	st.b	r7[-3],r8
80008198:	c0 48       	rjmp	800081a0 <init_led_board_info+0x208>
		}
		else
		{
			good = 1;
8000819a:	30 18       	mov	r8,1
8000819c:	ef 68 ff fd 	st.b	r7[-3],r8
		}
		bad = good ^ 1; //bad is the opposite of good
800081a0:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800081a4:	ec 18 00 01 	eorl	r8,0x1
800081a8:	ef 68 ff fe 	st.b	r7[-2],r8
		
		if (test_flash(bad) == ERROR)
800081ac:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800081b0:	10 9c       	mov	r12,r8
800081b2:	f0 1f 00 30 	mcall	80008270 <init_led_board_info+0x2d8>
800081b6:	18 98       	mov	r8,r12
800081b8:	10 99       	mov	r9,r8
800081ba:	30 18       	mov	r8,1
800081bc:	f0 09 18 00 	cp.b	r9,r8
800081c0:	c0 31       	brne	800081c6 <init_led_board_info+0x22e>
		{
			chassis_error();
800081c2:	f0 1f 00 2d 	mcall	80008274 <init_led_board_info+0x2dc>
		}
		
		add_new_led_board_sides_to_usage(good);
800081c6:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800081ca:	10 9c       	mov	r12,r8
800081cc:	f0 1f 00 2b 	mcall	80008278 <init_led_board_info+0x2e0>
		load_usageIdx_to_ledBrdSide(good);
800081d0:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800081d4:	10 9c       	mov	r12,r8
800081d6:	f0 1f 00 2a 	mcall	8000827c <init_led_board_info+0x2e4>
		usageShdw[good].csum = calc_usage_csum(good);
800081da:	ef 36 ff fd 	ld.ub	r6,r7[-3]
800081de:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800081e2:	10 9c       	mov	r12,r8
800081e4:	f0 1f 00 27 	mcall	80008280 <init_led_board_info+0x2e8>
800081e8:	18 98       	mov	r8,r12
800081ea:	10 9a       	mov	r10,r8
800081ec:	49 fb       	lddpc	r11,80008268 <init_led_board_info+0x2d0>
800081ee:	0c 98       	mov	r8,r6
800081f0:	a5 78       	lsl	r8,0x5
800081f2:	0c 18       	sub	r8,r6
800081f4:	f0 09 15 05 	lsl	r9,r8,0x5
800081f8:	10 19       	sub	r9,r8
800081fa:	f6 09 00 08 	add	r8,r11,r9
800081fe:	f0 c9 fc 40 	sub	r9,r8,-960
80008202:	14 98       	mov	r8,r10
80008204:	b2 88       	st.b	r9[0x0],r8
		copy_usage_to_usage(bad, good);
80008206:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000820a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000820e:	12 9b       	mov	r11,r9
80008210:	10 9c       	mov	r12,r8
80008212:	f0 1f 00 1d 	mcall	80008284 <init_led_board_info+0x2ec>
		previouslyBad = bad;
80008216:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000821a:	ef 68 ff ff 	st.b	r7[-1],r8
		write_usage_to_flash(previouslyBad);
8000821e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008222:	10 9c       	mov	r12,r8
80008224:	f0 1f 00 19 	mcall	80008288 <init_led_board_info+0x2f0>
		if (test_flash(good) == ERROR)
80008228:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000822c:	10 9c       	mov	r12,r8
8000822e:	f0 1f 00 11 	mcall	80008270 <init_led_board_info+0x2d8>
80008232:	18 98       	mov	r8,r12
80008234:	10 99       	mov	r9,r8
80008236:	30 18       	mov	r8,1
80008238:	f0 09 18 00 	cp.b	r9,r8
8000823c:	c0 31       	brne	80008242 <init_led_board_info+0x2aa>
		{
			chassis_error();
8000823e:	f0 1f 00 0e 	mcall	80008274 <init_led_board_info+0x2dc>
		}
		
		write_usage_to_flash(good);
80008242:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008246:	10 9c       	mov	r12,r8
80008248:	f0 1f 00 10 	mcall	80008288 <init_led_board_info+0x2f0>
		pingPong = 0;
8000824c:	49 09       	lddpc	r9,8000828c <init_led_board_info+0x2f4>
8000824e:	30 08       	mov	r8,0
80008250:	b2 88       	st.b	r9[0x0],r8
	}
	
}
80008252:	2f bd       	sub	sp,-20
80008254:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008258:	80 00       	ld.sh	r0,r0[0x0]
8000825a:	7c 60       	ld.w	r0,lr[0x18]
8000825c:	80 00       	ld.sh	r0,r0[0x0]
8000825e:	61 14       	ld.w	r4,r0[0x44]
80008260:	80 00       	ld.sh	r0,r0[0x0]
80008262:	6e 8c       	ld.w	r12,r7[0x20]
80008264:	80 00       	ld.sh	r0,r0[0x0]
80008266:	6d ac       	ld.w	r12,r6[0x68]
80008268:	00 00       	add	r0,r0
8000826a:	03 88       	ld.ub	r8,r1[0x0]
8000826c:	80 00       	ld.sh	r0,r0[0x0]
8000826e:	9f c6       	st.w	pc[0x30],r6
80008270:	80 00       	ld.sh	r0,r0[0x0]
80008272:	6f 20       	ld.w	r0,r7[0x48]
80008274:	80 00       	ld.sh	r0,r0[0x0]
80008276:	60 3c       	ld.w	r12,r0[0xc]
80008278:	80 00       	ld.sh	r0,r0[0x0]
8000827a:	70 78       	ld.w	r8,r8[0x1c]
8000827c:	80 00       	ld.sh	r0,r0[0x0]
8000827e:	7f 30       	ld.w	r0,pc[0x4c]
80008280:	80 00       	ld.sh	r0,r0[0x0]
80008282:	72 0c       	ld.w	r12,r9[0x0]
80008284:	80 00       	ld.sh	r0,r0[0x0]
80008286:	75 a4       	ld.w	r4,r10[0x68]
80008288:	80 00       	ld.sh	r0,r0[0x0]
8000828a:	75 fc       	ld.w	r12,r10[0x7c]
8000828c:	00 00       	add	r0,r0
8000828e:	0b 4d       	ld.w	sp,--r5
80008290:	80 00       	ld.sh	r0,r0[0x0]
80008292:	76 50       	ld.w	r0,r11[0x14]

80008294 <main>:

/*! \brief Main File Section:
 *          - Initialization (CPU, TWI, Usart,...)
 */
int main(void)
{
80008294:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80008298:	1a 97       	mov	r7,sp
8000829a:	fa cd 02 10 	sub	sp,sp,528
	static unsigned char displayIdx = 0;
	
	// Initialize System Clock
	init_sys_clocks();
8000829e:	f0 1f 04 5d 	mcall	80009410 <main+0x117c>

	init_io();
800082a2:	f0 1f 04 5d 	mcall	80009414 <main+0x1180>
	

	// Initialize USART
	init_ecdbg_rs232(FPBA_HZ);
800082a6:	e0 6c 24 00 	mov	r12,9216
800082aa:	ea 1c 00 f4 	orh	r12,0xf4
800082ae:	f0 1f 04 5b 	mcall	80009418 <main+0x1184>
	init_display_rs232(FPBA_HZ);
800082b2:	e0 6c 24 00 	mov	r12,9216
800082b6:	ea 1c 00 f4 	orh	r12,0xf4
800082ba:	f0 1f 04 59 	mcall	8000941c <main+0x1188>

	// Print Startup Message
	print_ecdbg("SEAL SHIELD DEMO \r\n Copyright (c) 2015 Technical Solutions Group, Inc.\r\n");
800082be:	fe fc 11 62 	ld.w	r12,pc[4450]
800082c2:	f0 1f 04 59 	mcall	80009424 <main+0x1190>
	display_text(IDX_READY);
800082c6:	30 0c       	mov	r12,0
800082c8:	f0 1f 04 58 	mcall	80009428 <main+0x1194>
	
	// Initialize ADC for bluesense channels which are used to see if there are any devices (phones, tablets, etc.) on the shelves
	adc_process_init();
800082cc:	f0 1f 04 58 	mcall	8000942c <main+0x1198>

	
	// Initialize Interrupts
	irq_initialize_vectors(); //TODO: probably remove 5apr15
800082d0:	f0 1f 04 58 	mcall	80009430 <main+0x119c>

	cpu_irq_enable();
800082d4:	d5 03       	csrf	0x10

	// Initialize TWI Interface
	twi_init();
800082d6:	f0 1f 04 58 	mcall	80009434 <main+0x11a0>

	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level
800082da:	31 6c       	mov	r12,22
800082dc:	f0 1f 04 57 	mcall	80009438 <main+0x11a4>
	PCA9952_init();
800082e0:	f0 1f 04 57 	mcall	8000943c <main+0x11a8>
	
	electroclaveState = STATE_EC_IDLE;
800082e4:	fe f9 11 5c 	ld.w	r9,pc[4444]
800082e8:	30 08       	mov	r8,0
800082ea:	b2 88       	st.b	r9[0x0],r8
	
	init_led_board_info();
800082ec:	f0 1f 04 56 	mcall	80009444 <main+0x11b0>
	
	gpio_set_pin_low(ECLAVE_LED_OEn); //...and we are live!
800082f0:	31 6c       	mov	r12,22
800082f2:	f0 1f 04 56 	mcall	80009448 <main+0x11b4>
	gpio_set_pin_low(ECLAVE_PSUPPLY_ONn); //turn the leds on first and then the power supply
800082f6:	31 7c       	mov	r12,23
800082f8:	f0 1f 04 54 	mcall	80009448 <main+0x11b4>
800082fc:	e0 68 03 e8 	mov	r8,1000
80008300:	ef 48 fe d0 	st.w	r7[-304],r8
80008304:	e0 68 12 00 	mov	r8,4608
80008308:	ea 18 00 7a 	orh	r8,0x7a
8000830c:	ef 48 fe cc 	st.w	r7[-308],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008310:	ee f0 fe d0 	ld.w	r0,r7[-304]
80008314:	30 01       	mov	r1,0
80008316:	ee f2 fe cc 	ld.w	r2,r7[-308]
8000831a:	30 03       	mov	r3,0
8000831c:	e2 02 02 49 	mul	r9,r1,r2
80008320:	e6 00 02 48 	mul	r8,r3,r0
80008324:	10 09       	add	r9,r8
80008326:	e0 02 06 4a 	mulu.d	r10,r0,r2
8000832a:	16 09       	add	r9,r11
8000832c:	12 9b       	mov	r11,r9
8000832e:	e0 68 03 e7 	mov	r8,999
80008332:	30 09       	mov	r9,0
80008334:	10 0a       	add	r10,r8
80008336:	f6 09 00 4b 	adc	r11,r11,r9
8000833a:	e0 68 03 e8 	mov	r8,1000
8000833e:	30 09       	mov	r9,0
80008340:	f0 1f 04 43 	mcall	8000944c <main+0x11b8>
80008344:	14 98       	mov	r8,r10
80008346:	16 99       	mov	r9,r11
	
	cpu_set_timeout(EC_ONE_SECOND/2, &debugTimer);
80008348:	a1 98       	lsr	r8,0x1
8000834a:	ef 48 fe d8 	st.w	r7[-296],r8
8000834e:	fe f8 11 02 	ld.w	r8,pc[4354]
80008352:	ef 48 fe d4 	st.w	r7[-300],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008356:	e1 b8 00 42 	mfsr	r8,0x108
8000835a:	10 99       	mov	r9,r8
8000835c:	ee f8 fe d4 	ld.w	r8,r7[-300]
80008360:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008362:	ee f8 fe d4 	ld.w	r8,r7[-300]
80008366:	70 09       	ld.w	r9,r8[0x0]
80008368:	ee f8 fe d8 	ld.w	r8,r7[-296]
8000836c:	10 09       	add	r9,r8
8000836e:	ee f8 fe d4 	ld.w	r8,r7[-300]
80008372:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008374:	ee f9 fe d4 	ld.w	r9,r7[-300]
80008378:	30 08       	mov	r8,0
8000837a:	f3 68 00 08 	st.b	r9[8],r8
8000837e:	c0 28       	rjmp	80008382 <main+0xee>
		{
			cpu_stop_timeout(&debugTimer);
			cpu_set_timeout((EC_ONE_SECOND/2), &debugTimer);
			gpio_toggle_pin(ECLAVE_DEBUG_LED);
		}
	} //while(true)
80008380:	d7 03       	nop


	// Main loop
	while (true) {

		switch(electroclaveState)
80008382:	fe f8 10 be 	ld.w	r8,pc[4286]
80008386:	11 88       	ld.ub	r8,r8[0x0]
80008388:	10 99       	mov	r9,r8
8000838a:	58 89       	cp.w	r9,8
8000838c:	e0 8b 06 b5 	brhi	800090f6 <main+0xe62>
80008390:	fe f8 10 c4 	ld.w	r8,pc[4292]
80008394:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
		{
			case STATE_EC_IDLE:
				if (EC_DOOR_LATCHED) {
80008398:	33 ec       	mov	r12,62
8000839a:	f0 1f 04 30 	mcall	80009458 <main+0x11c4>
8000839e:	18 98       	mov	r8,r12
800083a0:	ec 18 00 01 	eorl	r8,0x1
800083a4:	5c 58       	castu.b	r8
800083a6:	e0 80 06 9f 	breq	800090e4 <main+0xe50>
					gpio_set_pin_low(ECLAVE_DEBUG_LED);
800083aa:	37 cc       	mov	r12,124
800083ac:	f0 1f 04 27 	mcall	80009448 <main+0x11b4>
					print_ecdbg("Door latch detected\r\n");
800083b0:	fe fc 10 ac 	ld.w	r12,pc[4268]
800083b4:	f0 1f 04 1c 	mcall	80009424 <main+0x1190>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
800083b8:	30 0c       	mov	r12,0
800083ba:	f0 1f 04 1c 	mcall	80009428 <main+0x1194>
					electroclaveState = STATE_DOOR_LATCHED;
800083be:	fe f9 10 82 	ld.w	r9,pc[4226]
800083c2:	30 18       	mov	r8,1
800083c4:	b2 88       	st.b	r9[0x0],r8
					firstTimeThrough = 1;
800083c6:	fe f9 10 9a 	ld.w	r9,pc[4250]
800083ca:	30 18       	mov	r8,1
800083cc:	b2 88       	st.b	r9[0x0],r8
				}
				break;
800083ce:	e0 8f 06 94 	bral	800090f6 <main+0xe62>
				
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
800083d2:	33 fc       	mov	r12,63
800083d4:	f0 1f 04 21 	mcall	80009458 <main+0x11c4>
800083d8:	18 98       	mov	r8,r12
800083da:	58 08       	cp.w	r8,0
800083dc:	e0 80 06 86 	breq	800090e8 <main+0xe54>
					print_ecdbg("Action push button press detected\r\n");
800083e0:	fe fc 10 84 	ld.w	r12,pc[4228]
800083e4:	f0 1f 04 10 	mcall	80009424 <main+0x1190>
					electroclaveState = STATE_ACTION_PB_PRESSED;
800083e8:	fe f9 10 58 	ld.w	r9,pc[4184]
800083ec:	30 28       	mov	r8,2
800083ee:	b2 88       	st.b	r9[0x0],r8
				}
				break;
800083f0:	e0 8f 06 83 	bral	800090f6 <main+0xe62>
				
			case STATE_ACTION_PB_PRESSED:
				if (EC_ACTION_PB)
800083f4:	33 fc       	mov	r12,63
800083f6:	f0 1f 04 19 	mcall	80009458 <main+0x11c4>
800083fa:	18 98       	mov	r8,r12
800083fc:	ec 18 00 01 	eorl	r8,0x1
80008400:	5c 58       	castu.b	r8
80008402:	e0 80 06 75 	breq	800090ec <main+0xe58>
				{
					print_ecdbg("Action push button release detected\r\n");
80008406:	fe fc 10 62 	ld.w	r12,pc[4194]
8000840a:	f0 1f 04 07 	mcall	80009424 <main+0x1190>
					electroclaveState = STATE_ACTION_PB_RELEASED;	
8000840e:	fe f9 10 32 	ld.w	r9,pc[4146]
80008412:	30 38       	mov	r8,3
80008414:	b2 88       	st.b	r9[0x0],r8
				}
				break;
80008416:	e0 8f 06 70 	bral	800090f6 <main+0xe62>
				
			case STATE_ACTION_PB_RELEASED:
				check_led_brd_side_lifetimes();
8000841a:	f0 1f 04 15 	mcall	8000946c <main+0x11d8>
				check_shelves_for_devices();
8000841e:	f0 1f 04 15 	mcall	80009470 <main+0x11dc>
				set_shelves_active_inactive();
80008422:	f0 1f 04 15 	mcall	80009474 <main+0x11e0>
				
				if (num_active_shelves() != 0) {
80008426:	f0 1f 04 15 	mcall	80009478 <main+0x11e4>
8000842a:	18 98       	mov	r8,r12
8000842c:	58 08       	cp.w	r8,0
8000842e:	e0 80 01 72 	breq	80008712 <main+0x47e>
					electroclaveState = STATE_START_SANITIZE;	
80008432:	fe f9 10 0e 	ld.w	r9,pc[4110]
80008436:	30 48       	mov	r8,4
80008438:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("Start sanitizing\r\n");
8000843a:	fe fc 10 42 	ld.w	r12,pc[4162]
8000843e:	f0 1f 03 fa 	mcall	80009424 <main+0x1190>
					display_text(IDX_CLEAR);
80008442:	30 9c       	mov	r12,9
80008444:	f0 1f 03 f9 	mcall	80009428 <main+0x1194>
80008448:	e0 68 01 f4 	mov	r8,500
8000844c:	ef 48 fe e0 	st.w	r7[-288],r8
80008450:	e0 68 12 00 	mov	r8,4608
80008454:	ea 18 00 7a 	orh	r8,0x7a
80008458:	ef 48 fe dc 	st.w	r7[-292],r8
8000845c:	ee f8 fe e0 	ld.w	r8,r7[-288]
80008460:	ef 48 fe e8 	st.w	r7[-280],r8
80008464:	ee f8 fe dc 	ld.w	r8,r7[-292]
80008468:	ef 48 fe e4 	st.w	r7[-284],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000846c:	ee fc fe e8 	ld.w	r12,r7[-280]
80008470:	ef 4c fd fc 	st.w	r7[-516],r12
80008474:	30 0a       	mov	r10,0
80008476:	ef 4a fd f8 	st.w	r7[-520],r10
8000847a:	ee f8 fe e4 	ld.w	r8,r7[-284]
8000847e:	ef 48 fd f4 	st.w	r7[-524],r8
80008482:	30 0c       	mov	r12,0
80008484:	ef 4c fd f0 	st.w	r7[-528],r12
80008488:	ee f9 fd f8 	ld.w	r9,r7[-520]
8000848c:	ee fa fd f4 	ld.w	r10,r7[-524]
80008490:	b5 39       	mul	r9,r10
80008492:	ee f8 fd f0 	ld.w	r8,r7[-528]
80008496:	ee fc fd fc 	ld.w	r12,r7[-516]
8000849a:	b9 38       	mul	r8,r12
8000849c:	10 09       	add	r9,r8
8000849e:	ee f8 fd fc 	ld.w	r8,r7[-516]
800084a2:	ee fc fd f4 	ld.w	r12,r7[-524]
800084a6:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800084aa:	16 09       	add	r9,r11
800084ac:	12 9b       	mov	r11,r9
800084ae:	e0 68 03 e7 	mov	r8,999
800084b2:	30 09       	mov	r9,0
800084b4:	10 0a       	add	r10,r8
800084b6:	f6 09 00 4b 	adc	r11,r11,r9
800084ba:	e0 68 03 e8 	mov	r8,1000
800084be:	30 09       	mov	r9,0
800084c0:	f0 1f 03 e3 	mcall	8000944c <main+0x11b8>
800084c4:	14 98       	mov	r8,r10
800084c6:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800084c8:	ef 48 fe f0 	st.w	r7[-272],r8
800084cc:	ee c8 01 70 	sub	r8,r7,368
800084d0:	ef 48 fe ec 	st.w	r7[-276],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800084d4:	e1 b8 00 42 	mfsr	r8,0x108
800084d8:	10 99       	mov	r9,r8
800084da:	ee f8 fe ec 	ld.w	r8,r7[-276]
800084de:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800084e0:	ee f8 fe ec 	ld.w	r8,r7[-276]
800084e4:	70 09       	ld.w	r9,r8[0x0]
800084e6:	ee f8 fe f0 	ld.w	r8,r7[-272]
800084ea:	10 09       	add	r9,r8
800084ec:	ee f8 fe ec 	ld.w	r8,r7[-276]
800084f0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800084f2:	ee f9 fe ec 	ld.w	r9,r7[-276]
800084f6:	30 08       	mov	r8,0
800084f8:	f3 68 00 08 	st.b	r9[8],r8
800084fc:	ee c8 01 70 	sub	r8,r7,368
80008500:	ef 48 fe f4 	st.w	r7[-268],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008504:	e1 b8 00 42 	mfsr	r8,0x108
80008508:	ef 48 fe f8 	st.w	r7[-264],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000850c:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008510:	f1 39 00 08 	ld.ub	r9,r8[8]
80008514:	30 28       	mov	r8,2
80008516:	f0 09 18 00 	cp.b	r9,r8
8000851a:	c0 31       	brne	80008520 <main+0x28c>
    return false;
8000851c:	30 08       	mov	r8,0
8000851e:	c4 38       	rjmp	800085a4 <main+0x310>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008520:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008524:	f1 39 00 08 	ld.ub	r9,r8[8]
80008528:	30 18       	mov	r8,1
8000852a:	f0 09 18 00 	cp.b	r9,r8
8000852e:	c0 31       	brne	80008534 <main+0x2a0>
    return true;
80008530:	30 18       	mov	r8,1
80008532:	c3 98       	rjmp	800085a4 <main+0x310>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008534:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008538:	70 09       	ld.w	r9,r8[0x0]
8000853a:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000853e:	70 18       	ld.w	r8,r8[0x4]
80008540:	10 39       	cp.w	r9,r8
80008542:	e0 88 00 1a 	brls	80008576 <main+0x2e2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008546:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000854a:	70 09       	ld.w	r9,r8[0x0]
8000854c:	ee f8 fe f8 	ld.w	r8,r7[-264]
80008550:	12 38       	cp.w	r8,r9
80008552:	c1 02       	brcc	80008572 <main+0x2de>
80008554:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008558:	70 19       	ld.w	r9,r8[0x4]
8000855a:	ee f8 fe f8 	ld.w	r8,r7[-264]
8000855e:	12 38       	cp.w	r8,r9
80008560:	e0 88 00 09 	brls	80008572 <main+0x2de>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008564:	ee f9 fe f4 	ld.w	r9,r7[-268]
80008568:	30 18       	mov	r8,1
8000856a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000856e:	30 18       	mov	r8,1
80008570:	c1 a8       	rjmp	800085a4 <main+0x310>
    }
    return false;
80008572:	30 08       	mov	r8,0
80008574:	c1 88       	rjmp	800085a4 <main+0x310>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008576:	ee f8 fe f4 	ld.w	r8,r7[-268]
8000857a:	70 09       	ld.w	r9,r8[0x0]
8000857c:	ee f8 fe f8 	ld.w	r8,r7[-264]
80008580:	12 38       	cp.w	r8,r9
80008582:	c0 93       	brcs	80008594 <main+0x300>
80008584:	ee f8 fe f4 	ld.w	r8,r7[-268]
80008588:	70 19       	ld.w	r9,r8[0x4]
8000858a:	ee f8 fe f8 	ld.w	r8,r7[-264]
8000858e:	12 38       	cp.w	r8,r9
80008590:	e0 88 00 09 	brls	800085a2 <main+0x30e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008594:	ee f9 fe f4 	ld.w	r9,r7[-268]
80008598:	30 18       	mov	r8,1
8000859a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000859e:	30 18       	mov	r8,1
800085a0:	c0 28       	rjmp	800085a4 <main+0x310>
    }
    return false;
800085a2:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800085a4:	58 08       	cp.w	r8,0
800085a6:	ca b0       	breq	800084fc <main+0x268>
					cpu_delay_ms(500, 8000000);
					display_text(IDX_CLEANING);
800085a8:	30 2c       	mov	r12,2
800085aa:	f0 1f 03 a0 	mcall	80009428 <main+0x1194>
800085ae:	e0 68 0b b8 	mov	r8,3000
800085b2:	ef 48 ff 00 	st.w	r7[-256],r8
800085b6:	e0 68 12 00 	mov	r8,4608
800085ba:	ea 18 00 7a 	orh	r8,0x7a
800085be:	ef 48 fe fc 	st.w	r7[-260],r8
800085c2:	ee f8 ff 00 	ld.w	r8,r7[-256]
800085c6:	ef 48 ff 08 	st.w	r7[-248],r8
800085ca:	ee f8 fe fc 	ld.w	r8,r7[-260]
800085ce:	ef 48 ff 04 	st.w	r7[-252],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800085d2:	ee fa ff 08 	ld.w	r10,r7[-248]
800085d6:	ef 4a fe 0c 	st.w	r7[-500],r10
800085da:	30 08       	mov	r8,0
800085dc:	ef 48 fe 08 	st.w	r7[-504],r8
800085e0:	ee fc ff 04 	ld.w	r12,r7[-252]
800085e4:	ef 4c fe 04 	st.w	r7[-508],r12
800085e8:	30 0a       	mov	r10,0
800085ea:	ef 4a fe 00 	st.w	r7[-512],r10
800085ee:	ee f9 fe 08 	ld.w	r9,r7[-504]
800085f2:	ee f8 fe 04 	ld.w	r8,r7[-508]
800085f6:	b1 39       	mul	r9,r8
800085f8:	ee f8 fe 00 	ld.w	r8,r7[-512]
800085fc:	ee fc fe 0c 	ld.w	r12,r7[-500]
80008600:	b9 38       	mul	r8,r12
80008602:	10 09       	add	r9,r8
80008604:	ee f8 fe 0c 	ld.w	r8,r7[-500]
80008608:	ee fc fe 04 	ld.w	r12,r7[-508]
8000860c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008610:	16 09       	add	r9,r11
80008612:	12 9b       	mov	r11,r9
80008614:	e0 68 03 e7 	mov	r8,999
80008618:	30 09       	mov	r9,0
8000861a:	10 0a       	add	r10,r8
8000861c:	f6 09 00 4b 	adc	r11,r11,r9
80008620:	e0 68 03 e8 	mov	r8,1000
80008624:	30 09       	mov	r9,0
80008626:	f0 1f 03 8a 	mcall	8000944c <main+0x11b8>
8000862a:	14 98       	mov	r8,r10
8000862c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000862e:	ef 48 ff 10 	st.w	r7[-240],r8
80008632:	ee c8 01 64 	sub	r8,r7,356
80008636:	ef 48 ff 0c 	st.w	r7[-244],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000863a:	e1 b8 00 42 	mfsr	r8,0x108
8000863e:	10 99       	mov	r9,r8
80008640:	ee f8 ff 0c 	ld.w	r8,r7[-244]
80008644:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008646:	ee f8 ff 0c 	ld.w	r8,r7[-244]
8000864a:	70 09       	ld.w	r9,r8[0x0]
8000864c:	ee f8 ff 10 	ld.w	r8,r7[-240]
80008650:	10 09       	add	r9,r8
80008652:	ee f8 ff 0c 	ld.w	r8,r7[-244]
80008656:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008658:	ee f9 ff 0c 	ld.w	r9,r7[-244]
8000865c:	30 08       	mov	r8,0
8000865e:	f3 68 00 08 	st.b	r9[8],r8
80008662:	ee c8 01 64 	sub	r8,r7,356
80008666:	ef 48 ff 14 	st.w	r7[-236],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000866a:	e1 b8 00 42 	mfsr	r8,0x108
8000866e:	ef 48 ff 18 	st.w	r7[-232],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008672:	ee f8 ff 14 	ld.w	r8,r7[-236]
80008676:	f1 39 00 08 	ld.ub	r9,r8[8]
8000867a:	30 28       	mov	r8,2
8000867c:	f0 09 18 00 	cp.b	r9,r8
80008680:	c0 31       	brne	80008686 <main+0x3f2>
    return false;
80008682:	30 08       	mov	r8,0
80008684:	c4 38       	rjmp	8000870a <main+0x476>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008686:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000868a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000868e:	30 18       	mov	r8,1
80008690:	f0 09 18 00 	cp.b	r9,r8
80008694:	c0 31       	brne	8000869a <main+0x406>
    return true;
80008696:	30 18       	mov	r8,1
80008698:	c3 98       	rjmp	8000870a <main+0x476>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000869a:	ee f8 ff 14 	ld.w	r8,r7[-236]
8000869e:	70 09       	ld.w	r9,r8[0x0]
800086a0:	ee f8 ff 14 	ld.w	r8,r7[-236]
800086a4:	70 18       	ld.w	r8,r8[0x4]
800086a6:	10 39       	cp.w	r9,r8
800086a8:	e0 88 00 1a 	brls	800086dc <main+0x448>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800086ac:	ee f8 ff 14 	ld.w	r8,r7[-236]
800086b0:	70 09       	ld.w	r9,r8[0x0]
800086b2:	ee f8 ff 18 	ld.w	r8,r7[-232]
800086b6:	12 38       	cp.w	r8,r9
800086b8:	c1 02       	brcc	800086d8 <main+0x444>
800086ba:	ee f8 ff 14 	ld.w	r8,r7[-236]
800086be:	70 19       	ld.w	r9,r8[0x4]
800086c0:	ee f8 ff 18 	ld.w	r8,r7[-232]
800086c4:	12 38       	cp.w	r8,r9
800086c6:	e0 88 00 09 	brls	800086d8 <main+0x444>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800086ca:	ee f9 ff 14 	ld.w	r9,r7[-236]
800086ce:	30 18       	mov	r8,1
800086d0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800086d4:	30 18       	mov	r8,1
800086d6:	c1 a8       	rjmp	8000870a <main+0x476>
    }
    return false;
800086d8:	30 08       	mov	r8,0
800086da:	c1 88       	rjmp	8000870a <main+0x476>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800086dc:	ee f8 ff 14 	ld.w	r8,r7[-236]
800086e0:	70 09       	ld.w	r9,r8[0x0]
800086e2:	ee f8 ff 18 	ld.w	r8,r7[-232]
800086e6:	12 38       	cp.w	r8,r9
800086e8:	c0 93       	brcs	800086fa <main+0x466>
800086ea:	ee f8 ff 14 	ld.w	r8,r7[-236]
800086ee:	70 19       	ld.w	r9,r8[0x4]
800086f0:	ee f8 ff 18 	ld.w	r8,r7[-232]
800086f4:	12 38       	cp.w	r8,r9
800086f6:	e0 88 00 09 	brls	80008708 <main+0x474>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800086fa:	ee f9 ff 14 	ld.w	r9,r7[-236]
800086fe:	30 18       	mov	r8,1
80008700:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008704:	30 18       	mov	r8,1
80008706:	c0 28       	rjmp	8000870a <main+0x476>
    }
    return false;
80008708:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000870a:	58 08       	cp.w	r8,0
8000870c:	ca b0       	breq	80008662 <main+0x3ce>
					electroclaveState = STATE_START_CLEAN;
					print_ecdbg("No shelves, no devices or shelves are past lifetime, charging devices\r\n");
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
				}
				break;
8000870e:	e0 8f 04 f4 	bral	800090f6 <main+0xe62>
					cpu_delay_ms(500, 8000000);
					display_text(IDX_CLEANING);
					cpu_delay_ms(3000, 8000000); //give display time to update, scroll all the way across
				}
				else {
					electroclaveState = STATE_START_CLEAN;
80008712:	fe f9 0d 2e 	ld.w	r9,pc[3374]
80008716:	30 68       	mov	r8,6
80008718:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("No shelves, no devices or shelves are past lifetime, charging devices\r\n");
8000871a:	fe fc 0d 66 	ld.w	r12,pc[3430]
8000871e:	f0 1f 03 42 	mcall	80009424 <main+0x1190>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
80008722:	30 0c       	mov	r12,0
80008724:	f0 1f 03 41 	mcall	80009428 <main+0x1194>
				}
				break;
80008728:	e0 8f 04 e7 	bral	800090f6 <main+0xe62>
				
			case STATE_START_SANITIZE:
				display_text(IDX_CLEAR);
8000872c:	30 9c       	mov	r12,9
8000872e:	f0 1f 03 3f 	mcall	80009428 <main+0x1194>
80008732:	e0 68 01 f4 	mov	r8,500
80008736:	ef 48 ff 20 	st.w	r7[-224],r8
8000873a:	e0 68 12 00 	mov	r8,4608
8000873e:	ea 18 00 7a 	orh	r8,0x7a
80008742:	ef 48 ff 1c 	st.w	r7[-228],r8
80008746:	ee f8 ff 20 	ld.w	r8,r7[-224]
8000874a:	ef 48 ff 28 	st.w	r7[-216],r8
8000874e:	ee f8 ff 1c 	ld.w	r8,r7[-228]
80008752:	ef 48 ff 24 	st.w	r7[-220],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008756:	ee fa ff 28 	ld.w	r10,r7[-216]
8000875a:	ef 4a fe 1c 	st.w	r7[-484],r10
8000875e:	30 08       	mov	r8,0
80008760:	ef 48 fe 18 	st.w	r7[-488],r8
80008764:	ee fc ff 24 	ld.w	r12,r7[-220]
80008768:	ef 4c fe 14 	st.w	r7[-492],r12
8000876c:	30 0a       	mov	r10,0
8000876e:	ef 4a fe 10 	st.w	r7[-496],r10
80008772:	ee f9 fe 18 	ld.w	r9,r7[-488]
80008776:	ee f8 fe 14 	ld.w	r8,r7[-492]
8000877a:	b1 39       	mul	r9,r8
8000877c:	ee f8 fe 10 	ld.w	r8,r7[-496]
80008780:	ee fc fe 1c 	ld.w	r12,r7[-484]
80008784:	b9 38       	mul	r8,r12
80008786:	10 09       	add	r9,r8
80008788:	ee f8 fe 1c 	ld.w	r8,r7[-484]
8000878c:	ee fc fe 14 	ld.w	r12,r7[-492]
80008790:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008794:	16 09       	add	r9,r11
80008796:	12 9b       	mov	r11,r9
80008798:	e0 68 03 e7 	mov	r8,999
8000879c:	30 09       	mov	r9,0
8000879e:	10 0a       	add	r10,r8
800087a0:	f6 09 00 4b 	adc	r11,r11,r9
800087a4:	e0 68 03 e8 	mov	r8,1000
800087a8:	30 09       	mov	r9,0
800087aa:	f0 1f 03 29 	mcall	8000944c <main+0x11b8>
800087ae:	14 98       	mov	r8,r10
800087b0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800087b2:	ef 48 ff 30 	st.w	r7[-208],r8
800087b6:	ee c8 01 58 	sub	r8,r7,344
800087ba:	ef 48 ff 2c 	st.w	r7[-212],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800087be:	e1 b8 00 42 	mfsr	r8,0x108
800087c2:	10 99       	mov	r9,r8
800087c4:	ee f8 ff 2c 	ld.w	r8,r7[-212]
800087c8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800087ca:	ee f8 ff 2c 	ld.w	r8,r7[-212]
800087ce:	70 09       	ld.w	r9,r8[0x0]
800087d0:	ee f8 ff 30 	ld.w	r8,r7[-208]
800087d4:	10 09       	add	r9,r8
800087d6:	ee f8 ff 2c 	ld.w	r8,r7[-212]
800087da:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800087dc:	ee f9 ff 2c 	ld.w	r9,r7[-212]
800087e0:	30 08       	mov	r8,0
800087e2:	f3 68 00 08 	st.b	r9[8],r8
800087e6:	ee c8 01 58 	sub	r8,r7,344
800087ea:	ef 48 ff 34 	st.w	r7[-204],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800087ee:	e1 b8 00 42 	mfsr	r8,0x108
800087f2:	ef 48 ff 38 	st.w	r7[-200],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800087f6:	ee f8 ff 34 	ld.w	r8,r7[-204]
800087fa:	f1 39 00 08 	ld.ub	r9,r8[8]
800087fe:	30 28       	mov	r8,2
80008800:	f0 09 18 00 	cp.b	r9,r8
80008804:	c0 31       	brne	8000880a <main+0x576>
    return false;
80008806:	30 08       	mov	r8,0
80008808:	c4 38       	rjmp	8000888e <main+0x5fa>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000880a:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000880e:	f1 39 00 08 	ld.ub	r9,r8[8]
80008812:	30 18       	mov	r8,1
80008814:	f0 09 18 00 	cp.b	r9,r8
80008818:	c0 31       	brne	8000881e <main+0x58a>
    return true;
8000881a:	30 18       	mov	r8,1
8000881c:	c3 98       	rjmp	8000888e <main+0x5fa>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000881e:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008822:	70 09       	ld.w	r9,r8[0x0]
80008824:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008828:	70 18       	ld.w	r8,r8[0x4]
8000882a:	10 39       	cp.w	r9,r8
8000882c:	e0 88 00 1a 	brls	80008860 <main+0x5cc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008830:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008834:	70 09       	ld.w	r9,r8[0x0]
80008836:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000883a:	12 38       	cp.w	r8,r9
8000883c:	c1 02       	brcc	8000885c <main+0x5c8>
8000883e:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008842:	70 19       	ld.w	r9,r8[0x4]
80008844:	ee f8 ff 38 	ld.w	r8,r7[-200]
80008848:	12 38       	cp.w	r8,r9
8000884a:	e0 88 00 09 	brls	8000885c <main+0x5c8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000884e:	ee f9 ff 34 	ld.w	r9,r7[-204]
80008852:	30 18       	mov	r8,1
80008854:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008858:	30 18       	mov	r8,1
8000885a:	c1 a8       	rjmp	8000888e <main+0x5fa>
    }
    return false;
8000885c:	30 08       	mov	r8,0
8000885e:	c1 88       	rjmp	8000888e <main+0x5fa>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008860:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008864:	70 09       	ld.w	r9,r8[0x0]
80008866:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000886a:	12 38       	cp.w	r8,r9
8000886c:	c0 93       	brcs	8000887e <main+0x5ea>
8000886e:	ee f8 ff 34 	ld.w	r8,r7[-204]
80008872:	70 19       	ld.w	r9,r8[0x4]
80008874:	ee f8 ff 38 	ld.w	r8,r7[-200]
80008878:	12 38       	cp.w	r8,r9
8000887a:	e0 88 00 09 	brls	8000888c <main+0x5f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000887e:	ee f9 ff 34 	ld.w	r9,r7[-204]
80008882:	30 18       	mov	r8,1
80008884:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008888:	30 18       	mov	r8,1
8000888a:	c0 28       	rjmp	8000888e <main+0x5fa>
    }
    return false;
8000888c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000888e:	58 08       	cp.w	r8,0
80008890:	ca b0       	breq	800087e6 <main+0x552>
				cpu_delay_ms(500, 8000000); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
80008892:	fe f9 0b f2 	ld.w	r9,pc[3058]
80008896:	3f f8       	mov	r8,-1
80008898:	b2 88       	st.b	r9[0x0],r8
				sanitizeMinutes = 0;
8000889a:	fe f9 0b ee 	ld.w	r9,pc[3054]
8000889e:	30 08       	mov	r8,0
800088a0:	93 08       	st.w	r9[0x0],r8
				for (int i = 0; i<NUM_SHELVES; i++) {
800088a2:	30 08       	mov	r8,0
800088a4:	ef 48 fe c0 	st.w	r7[-320],r8
800088a8:	c4 08       	rjmp	80008928 <main+0x694>
					if (shelf[i].active == SHELF_ACTIVE) {
800088aa:	ee f9 fe c0 	ld.w	r9,r7[-320]
800088ae:	fe fa 0b de 	ld.w	r10,pc[3038]
800088b2:	12 98       	mov	r8,r9
800088b4:	a3 68       	lsl	r8,0x2
800088b6:	12 08       	add	r8,r9
800088b8:	f4 08 00 08 	add	r8,r10,r8
800088bc:	11 88       	ld.ub	r8,r8[0x0]
800088be:	58 08       	cp.w	r8,0
800088c0:	c2 f1       	brne	8000891e <main+0x68a>
						tmpSanitizeMinutes = calc_sanitize_time(i);
800088c2:	ee f8 fe c0 	ld.w	r8,r7[-320]
800088c6:	5c 58       	castu.b	r8
800088c8:	10 9c       	mov	r12,r8
800088ca:	f0 1f 02 f2 	mcall	80009490 <main+0x11fc>
800088ce:	18 98       	mov	r8,r12
800088d0:	10 99       	mov	r9,r8
800088d2:	fe f8 0b c2 	ld.w	r8,pc[3010]
800088d6:	91 09       	st.w	r8[0x0],r9
						
						if (tmpSanitizeMinutes > sanitizeMinutes)
800088d8:	fe f8 0b bc 	ld.w	r8,pc[3004]
800088dc:	70 09       	ld.w	r9,r8[0x0]
800088de:	fe f8 0b aa 	ld.w	r8,pc[2986]
800088e2:	70 08       	ld.w	r8,r8[0x0]
800088e4:	10 39       	cp.w	r9,r8
800088e6:	e0 88 00 08 	brls	800088f6 <main+0x662>
						{
							sanitizeMinutes = tmpSanitizeMinutes;
800088ea:	fe f8 0b aa 	ld.w	r8,pc[2986]
800088ee:	70 09       	ld.w	r9,r8[0x0]
800088f0:	fe f8 0b 98 	ld.w	r8,pc[2968]
800088f4:	91 09       	st.w	r8[0x0],r9
						}
						
						led_shelf(i, LED_ON);
800088f6:	ee f8 fe c0 	ld.w	r8,r7[-320]
800088fa:	5c 58       	castu.b	r8
800088fc:	30 1b       	mov	r11,1
800088fe:	10 9c       	mov	r12,r8
80008900:	f0 1f 02 e6 	mcall	80009498 <main+0x1204>
						
						if (displayIdx == 0xFF)
80008904:	fe f8 0b 80 	ld.w	r8,pc[2944]
80008908:	11 89       	ld.ub	r9,r8[0x0]
8000890a:	3f f8       	mov	r8,-1
8000890c:	f0 09 18 00 	cp.b	r9,r8
80008910:	c0 71       	brne	8000891e <main+0x68a>
						{
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
80008912:	ee f8 fe c0 	ld.w	r8,r7[-320]
80008916:	5c 58       	castu.b	r8
80008918:	fe f9 0b 6c 	ld.w	r9,pc[2924]
8000891c:	b2 88       	st.b	r9[0x0],r8
				display_text(IDX_CLEAR);
				cpu_delay_ms(500, 8000000); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				displayIdx = 0xFF; //this means not assigned yet
				sanitizeMinutes = 0;
				for (int i = 0; i<NUM_SHELVES; i++) {
8000891e:	ee f8 fe c0 	ld.w	r8,r7[-320]
80008922:	2f f8       	sub	r8,-1
80008924:	ef 48 fe c0 	st.w	r7[-320],r8
80008928:	ee f8 fe c0 	ld.w	r8,r7[-320]
8000892c:	58 38       	cp.w	r8,3
8000892e:	fe 9a ff be 	brle	800088aa <main+0x616>
80008932:	e0 68 1f 40 	mov	r8,8000
80008936:	ef 48 ff 40 	st.w	r7[-192],r8
8000893a:	e0 68 12 00 	mov	r8,4608
8000893e:	ea 18 00 7a 	orh	r8,0x7a
80008942:	ef 48 ff 3c 	st.w	r7[-196],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008946:	ee fa ff 40 	ld.w	r10,r7[-192]
8000894a:	ef 4a fe 2c 	st.w	r7[-468],r10
8000894e:	30 08       	mov	r8,0
80008950:	ef 48 fe 28 	st.w	r7[-472],r8
80008954:	ee fc ff 3c 	ld.w	r12,r7[-196]
80008958:	ef 4c fe 24 	st.w	r7[-476],r12
8000895c:	30 0a       	mov	r10,0
8000895e:	ef 4a fe 20 	st.w	r7[-480],r10
80008962:	ee f9 fe 28 	ld.w	r9,r7[-472]
80008966:	ee f8 fe 24 	ld.w	r8,r7[-476]
8000896a:	b1 39       	mul	r9,r8
8000896c:	ee f8 fe 20 	ld.w	r8,r7[-480]
80008970:	ee fc fe 2c 	ld.w	r12,r7[-468]
80008974:	b9 38       	mul	r8,r12
80008976:	10 09       	add	r9,r8
80008978:	ee f8 fe 2c 	ld.w	r8,r7[-468]
8000897c:	ee fc fe 24 	ld.w	r12,r7[-476]
80008980:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008984:	16 09       	add	r9,r11
80008986:	12 9b       	mov	r11,r9
80008988:	e0 68 03 e7 	mov	r8,999
8000898c:	30 09       	mov	r9,0
8000898e:	10 0a       	add	r10,r8
80008990:	f6 09 00 4b 	adc	r11,r11,r9
80008994:	e0 68 03 e8 	mov	r8,1000
80008998:	30 09       	mov	r9,0
8000899a:	f0 1f 02 ad 	mcall	8000944c <main+0x11b8>
8000899e:	14 98       	mov	r8,r10
800089a0:	16 99       	mov	r9,r11
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
						}
					}
				}
				
				displayTimerSeconds = cpu_ms_2_cy(8000, 8000000); //8 seconds per "shelf" display is enough time for the text to scroll twice
800089a2:	10 99       	mov	r9,r8
800089a4:	fe f8 0a f8 	ld.w	r8,pc[2808]
800089a8:	91 09       	st.w	r8[0x0],r9
				cpu_set_timeout(displayTimerSeconds, &displayTimer);
800089aa:	fe f8 0a f2 	ld.w	r8,pc[2802]
800089ae:	70 08       	ld.w	r8,r8[0x0]
800089b0:	ef 48 ff 48 	st.w	r7[-184],r8
800089b4:	fe f8 0a ec 	ld.w	r8,pc[2796]
800089b8:	ef 48 ff 44 	st.w	r7[-188],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800089bc:	e1 b8 00 42 	mfsr	r8,0x108
800089c0:	10 99       	mov	r9,r8
800089c2:	ee f8 ff 44 	ld.w	r8,r7[-188]
800089c6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800089c8:	ee f8 ff 44 	ld.w	r8,r7[-188]
800089cc:	70 09       	ld.w	r9,r8[0x0]
800089ce:	ee f8 ff 48 	ld.w	r8,r7[-184]
800089d2:	10 09       	add	r9,r8
800089d4:	ee f8 ff 44 	ld.w	r8,r7[-188]
800089d8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800089da:	ee f9 ff 44 	ld.w	r9,r7[-188]
800089de:	30 08       	mov	r8,0
800089e0:	f3 68 00 08 	st.b	r9[8],r8
800089e4:	e0 68 03 e8 	mov	r8,1000
800089e8:	ef 48 ff 50 	st.w	r7[-176],r8
800089ec:	e0 68 12 00 	mov	r8,4608
800089f0:	ea 18 00 7a 	orh	r8,0x7a
800089f4:	ef 48 ff 4c 	st.w	r7[-180],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800089f8:	ee fa ff 50 	ld.w	r10,r7[-176]
800089fc:	ef 4a fe 3c 	st.w	r7[-452],r10
80008a00:	30 08       	mov	r8,0
80008a02:	ef 48 fe 38 	st.w	r7[-456],r8
80008a06:	ee fc ff 4c 	ld.w	r12,r7[-180]
80008a0a:	ef 4c fe 34 	st.w	r7[-460],r12
80008a0e:	30 0a       	mov	r10,0
80008a10:	ef 4a fe 30 	st.w	r7[-464],r10
80008a14:	ee f9 fe 38 	ld.w	r9,r7[-456]
80008a18:	ee f8 fe 34 	ld.w	r8,r7[-460]
80008a1c:	b1 39       	mul	r9,r8
80008a1e:	ee f8 fe 30 	ld.w	r8,r7[-464]
80008a22:	ee fc fe 3c 	ld.w	r12,r7[-452]
80008a26:	b9 38       	mul	r8,r12
80008a28:	10 09       	add	r9,r8
80008a2a:	ee f8 fe 3c 	ld.w	r8,r7[-452]
80008a2e:	ee fc fe 34 	ld.w	r12,r7[-460]
80008a32:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008a36:	16 09       	add	r9,r11
80008a38:	12 9b       	mov	r11,r9
80008a3a:	e0 68 03 e7 	mov	r8,999
80008a3e:	30 09       	mov	r9,0
80008a40:	10 0a       	add	r10,r8
80008a42:	f6 09 00 4b 	adc	r11,r11,r9
80008a46:	e0 68 03 e8 	mov	r8,1000
80008a4a:	30 09       	mov	r9,0
80008a4c:	f0 1f 02 80 	mcall	8000944c <main+0x11b8>
80008a50:	14 98       	mov	r8,r10
80008a52:	16 99       	mov	r9,r11
				
#if 0 //DEBUG: set this to seconds not minutes so we can debug this logic faster 11may15				
				cpu_set_timeout((sanitizeMinutes * 60 * cpu_ms_2_cy(1000, 8000000)), &sanitizeTimer);
#endif
				cpu_set_timeout((sanitizeMinutes * cpu_ms_2_cy(1000, 8000000)), &sanitizeTimer); //DEBUG take this out when done debugging logic, put it back to minutes 11may15
80008a54:	10 99       	mov	r9,r8
80008a56:	fe f8 0a 32 	ld.w	r8,pc[2610]
80008a5a:	70 08       	ld.w	r8,r8[0x0]
80008a5c:	f2 08 02 48 	mul	r8,r9,r8
80008a60:	ef 48 ff 58 	st.w	r7[-168],r8
80008a64:	fe f8 0a 40 	ld.w	r8,pc[2624]
80008a68:	ef 48 ff 54 	st.w	r7[-172],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008a6c:	e1 b8 00 42 	mfsr	r8,0x108
80008a70:	10 99       	mov	r9,r8
80008a72:	ee f8 ff 54 	ld.w	r8,r7[-172]
80008a76:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008a78:	ee f8 ff 54 	ld.w	r8,r7[-172]
80008a7c:	70 09       	ld.w	r9,r8[0x0]
80008a7e:	ee f8 ff 58 	ld.w	r8,r7[-168]
80008a82:	10 09       	add	r9,r8
80008a84:	ee f8 ff 54 	ld.w	r8,r7[-172]
80008a88:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008a8a:	ee f9 ff 54 	ld.w	r9,r7[-172]
80008a8e:	30 08       	mov	r8,0
80008a90:	f3 68 00 08 	st.b	r9[8],r8
80008a94:	e0 68 03 e8 	mov	r8,1000
80008a98:	ef 48 ff 60 	st.w	r7[-160],r8
80008a9c:	e0 68 12 00 	mov	r8,4608
80008aa0:	ea 18 00 7a 	orh	r8,0x7a
80008aa4:	ef 48 ff 5c 	st.w	r7[-164],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008aa8:	ee fa ff 60 	ld.w	r10,r7[-160]
80008aac:	ef 4a fe 4c 	st.w	r7[-436],r10
80008ab0:	30 08       	mov	r8,0
80008ab2:	ef 48 fe 48 	st.w	r7[-440],r8
80008ab6:	ee fc ff 5c 	ld.w	r12,r7[-164]
80008aba:	ef 4c fe 44 	st.w	r7[-444],r12
80008abe:	30 0a       	mov	r10,0
80008ac0:	ef 4a fe 40 	st.w	r7[-448],r10
80008ac4:	ee f9 fe 48 	ld.w	r9,r7[-440]
80008ac8:	ee f8 fe 44 	ld.w	r8,r7[-444]
80008acc:	b1 39       	mul	r9,r8
80008ace:	ee f8 fe 40 	ld.w	r8,r7[-448]
80008ad2:	ee fc fe 4c 	ld.w	r12,r7[-436]
80008ad6:	b9 38       	mul	r8,r12
80008ad8:	10 09       	add	r9,r8
80008ada:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80008ade:	ee fc fe 44 	ld.w	r12,r7[-444]
80008ae2:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008ae6:	16 09       	add	r9,r11
80008ae8:	12 9b       	mov	r11,r9
80008aea:	e0 68 03 e7 	mov	r8,999
80008aee:	30 09       	mov	r9,0
80008af0:	10 0a       	add	r10,r8
80008af2:	f6 09 00 4b 	adc	r11,r11,r9
80008af6:	e0 68 03 e8 	mov	r8,1000
80008afa:	30 09       	mov	r9,0
80008afc:	f0 1f 02 54 	mcall	8000944c <main+0x11b8>
80008b00:	14 98       	mov	r8,r10
80008b02:	16 99       	mov	r9,r11

				
//DEBUG 11may15 do this once per second for debug				cpu_set_timeout((60 * cpu_ms_2_cy(1000,8000000)), &oneMinuteTimer); //one minute for the usage statistics
				cpu_set_timeout((cpu_ms_2_cy(1000,8000000)), &oneMinuteTimer); //one minute for the usage statistics DEBUG 11may15
80008b04:	ef 48 ff 68 	st.w	r7[-152],r8
80008b08:	fe f8 09 a0 	ld.w	r8,pc[2464]
80008b0c:	ef 48 ff 64 	st.w	r7[-156],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008b10:	e1 b8 00 42 	mfsr	r8,0x108
80008b14:	10 99       	mov	r9,r8
80008b16:	ee f8 ff 64 	ld.w	r8,r7[-156]
80008b1a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008b1c:	ee f8 ff 64 	ld.w	r8,r7[-156]
80008b20:	70 09       	ld.w	r9,r8[0x0]
80008b22:	ee f8 ff 68 	ld.w	r8,r7[-152]
80008b26:	10 09       	add	r9,r8
80008b28:	ee f8 ff 64 	ld.w	r8,r7[-156]
80008b2c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008b2e:	ee f9 ff 64 	ld.w	r9,r7[-156]
80008b32:	30 08       	mov	r8,0
80008b34:	f3 68 00 08 	st.b	r9[8],r8

				electroclaveState = STATE_SANITIZE;
80008b38:	fe f9 09 08 	ld.w	r9,pc[2312]
80008b3c:	30 58       	mov	r8,5
80008b3e:	b2 88       	st.b	r9[0x0],r8
				
				break;
80008b40:	e0 8f 02 db 	bral	800090f6 <main+0xe62>
80008b44:	fe f8 09 5c 	ld.w	r8,pc[2396]
80008b48:	ef 48 ff 6c 	st.w	r7[-148],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008b4c:	e1 b8 00 42 	mfsr	r8,0x108
80008b50:	ef 48 ff 70 	st.w	r7[-144],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008b54:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008b58:	f1 39 00 08 	ld.ub	r9,r8[8]
80008b5c:	30 28       	mov	r8,2
80008b5e:	f0 09 18 00 	cp.b	r9,r8
80008b62:	c0 31       	brne	80008b68 <main+0x8d4>
    return false;
80008b64:	30 08       	mov	r8,0
80008b66:	c4 38       	rjmp	80008bec <main+0x958>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008b68:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008b6c:	f1 39 00 08 	ld.ub	r9,r8[8]
80008b70:	30 18       	mov	r8,1
80008b72:	f0 09 18 00 	cp.b	r9,r8
80008b76:	c0 31       	brne	80008b7c <main+0x8e8>
    return true;
80008b78:	30 18       	mov	r8,1
80008b7a:	c3 98       	rjmp	80008bec <main+0x958>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008b7c:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008b80:	70 09       	ld.w	r9,r8[0x0]
80008b82:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008b86:	70 18       	ld.w	r8,r8[0x4]
80008b88:	10 39       	cp.w	r9,r8
80008b8a:	e0 88 00 1a 	brls	80008bbe <main+0x92a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008b8e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008b92:	70 09       	ld.w	r9,r8[0x0]
80008b94:	ee f8 ff 70 	ld.w	r8,r7[-144]
80008b98:	12 38       	cp.w	r8,r9
80008b9a:	c1 02       	brcc	80008bba <main+0x926>
80008b9c:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008ba0:	70 19       	ld.w	r9,r8[0x4]
80008ba2:	ee f8 ff 70 	ld.w	r8,r7[-144]
80008ba6:	12 38       	cp.w	r8,r9
80008ba8:	e0 88 00 09 	brls	80008bba <main+0x926>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008bac:	ee f9 ff 6c 	ld.w	r9,r7[-148]
80008bb0:	30 18       	mov	r8,1
80008bb2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008bb6:	30 18       	mov	r8,1
80008bb8:	c1 a8       	rjmp	80008bec <main+0x958>
    }
    return false;
80008bba:	30 08       	mov	r8,0
80008bbc:	c1 88       	rjmp	80008bec <main+0x958>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008bbe:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008bc2:	70 09       	ld.w	r9,r8[0x0]
80008bc4:	ee f8 ff 70 	ld.w	r8,r7[-144]
80008bc8:	12 38       	cp.w	r8,r9
80008bca:	c0 93       	brcs	80008bdc <main+0x948>
80008bcc:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008bd0:	70 19       	ld.w	r9,r8[0x4]
80008bd2:	ee f8 ff 70 	ld.w	r8,r7[-144]
80008bd6:	12 38       	cp.w	r8,r9
80008bd8:	e0 88 00 09 	brls	80008bea <main+0x956>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008bdc:	ee f9 ff 6c 	ld.w	r9,r7[-148]
80008be0:	30 18       	mov	r8,1
80008be2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008be6:	30 18       	mov	r8,1
80008be8:	c0 28       	rjmp	80008bec <main+0x958>
    }
    return false;
80008bea:	30 08       	mov	r8,0
				
			case STATE_SANITIZE:
				/*
    			 * Manage the display
				 */
				if (cpu_is_timeout(&displayTimer))
80008bec:	58 08       	cp.w	r8,0
80008bee:	c6 90       	breq	80008cc0 <main+0xa2c>
80008bf0:	fe f8 08 b0 	ld.w	r8,pc[2224]
80008bf4:	ef 48 ff 74 	st.w	r7[-140],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80008bf8:	ee f9 ff 74 	ld.w	r9,r7[-140]
80008bfc:	30 28       	mov	r8,2
80008bfe:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout(&displayTimer);
					switch (displayIdx)
80008c02:	fe f8 08 82 	ld.w	r8,pc[2178]
80008c06:	11 88       	ld.ub	r8,r8[0x0]
80008c08:	58 18       	cp.w	r8,1
80008c0a:	c0 f0       	breq	80008c28 <main+0x994>
80008c0c:	e0 89 00 05 	brgt	80008c16 <main+0x982>
80008c10:	58 08       	cp.w	r8,0
80008c12:	c0 70       	breq	80008c20 <main+0x98c>
80008c14:	c1 78       	rjmp	80008c42 <main+0x9ae>
80008c16:	58 28       	cp.w	r8,2
80008c18:	c0 c0       	breq	80008c30 <main+0x99c>
80008c1a:	58 38       	cp.w	r8,3
80008c1c:	c0 e0       	breq	80008c38 <main+0x9a4>
80008c1e:	c1 28       	rjmp	80008c42 <main+0x9ae>
					{
						case 0:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF1);
80008c20:	30 5c       	mov	r12,5
80008c22:	f0 1f 02 02 	mcall	80009428 <main+0x1194>
							break;
80008c26:	c0 e8       	rjmp	80008c42 <main+0x9ae>
						case 1:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF2);
80008c28:	30 6c       	mov	r12,6
80008c2a:	f0 1f 02 00 	mcall	80009428 <main+0x1194>
							break;
80008c2e:	c0 a8       	rjmp	80008c42 <main+0x9ae>
						case 2:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF3);
80008c30:	30 7c       	mov	r12,7
80008c32:	f0 1f 01 fe 	mcall	80009428 <main+0x1194>
							break;
80008c36:	c0 68       	rjmp	80008c42 <main+0x9ae>
						case 3:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF4);
80008c38:	30 8c       	mov	r12,8
80008c3a:	f0 1f 01 fc 	mcall	80009428 <main+0x1194>
80008c3e:	c0 28       	rjmp	80008c42 <main+0x9ae>
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
80008c40:	d7 03       	nop
							break;
					}
					
					while (1)
					{
						if (++displayIdx >= NUM_SHELVES)
80008c42:	fe f8 08 42 	ld.w	r8,pc[2114]
80008c46:	11 88       	ld.ub	r8,r8[0x0]
80008c48:	2f f8       	sub	r8,-1
80008c4a:	5c 58       	castu.b	r8
80008c4c:	fe f9 08 38 	ld.w	r9,pc[2104]
80008c50:	b2 88       	st.b	r9[0x0],r8
80008c52:	fe f8 08 32 	ld.w	r8,pc[2098]
80008c56:	11 89       	ld.ub	r9,r8[0x0]
80008c58:	30 38       	mov	r8,3
80008c5a:	f0 09 18 00 	cp.b	r9,r8
80008c5e:	e0 88 00 06 	brls	80008c6a <main+0x9d6>
						{
							displayIdx = 0; //12apr15 wrap around
80008c62:	fe f9 08 22 	ld.w	r9,pc[2082]
80008c66:	30 08       	mov	r8,0
80008c68:	b2 88       	st.b	r9[0x0],r8
						}
						
						if (shelf[displayIdx].active)
80008c6a:	fe f8 08 1a 	ld.w	r8,pc[2074]
80008c6e:	11 88       	ld.ub	r8,r8[0x0]
80008c70:	10 99       	mov	r9,r8
80008c72:	fe fa 08 1a 	ld.w	r10,pc[2074]
80008c76:	12 98       	mov	r8,r9
80008c78:	a3 68       	lsl	r8,0x2
80008c7a:	12 08       	add	r8,r9
80008c7c:	f4 08 00 08 	add	r8,r10,r8
80008c80:	11 88       	ld.ub	r8,r8[0x0]
80008c82:	58 08       	cp.w	r8,0
80008c84:	cd e0       	breq	80008c40 <main+0x9ac>
							break; //this shelf is active, we don't need to look for another one
						}
						
					}

					cpu_set_timeout(displayTimerSeconds, &displayTimer); //8 seconds per shelf
80008c86:	fe f8 08 16 	ld.w	r8,pc[2070]
80008c8a:	70 08       	ld.w	r8,r8[0x0]
80008c8c:	ef 48 ff 7c 	st.w	r7[-132],r8
80008c90:	fe f8 08 10 	ld.w	r8,pc[2064]
80008c94:	ef 48 ff 78 	st.w	r7[-136],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008c98:	e1 b8 00 42 	mfsr	r8,0x108
80008c9c:	10 99       	mov	r9,r8
80008c9e:	ee f8 ff 78 	ld.w	r8,r7[-136]
80008ca2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008ca4:	ee f8 ff 78 	ld.w	r8,r7[-136]
80008ca8:	70 09       	ld.w	r9,r8[0x0]
80008caa:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80008cae:	10 09       	add	r9,r8
80008cb0:	ee f8 ff 78 	ld.w	r8,r7[-136]
80008cb4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008cb6:	ee f9 ff 78 	ld.w	r9,r7[-136]
80008cba:	30 08       	mov	r8,0
80008cbc:	f3 68 00 08 	st.b	r9[8],r8
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
80008cc0:	fe f8 07 e8 	ld.w	r8,pc[2024]
80008cc4:	ef 48 ff 80 	st.w	r7[-128],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008cc8:	e1 b8 00 42 	mfsr	r8,0x108
80008ccc:	ef 48 ff 84 	st.w	r7[-124],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008cd0:	ee f8 ff 80 	ld.w	r8,r7[-128]
80008cd4:	f1 39 00 08 	ld.ub	r9,r8[8]
80008cd8:	30 28       	mov	r8,2
80008cda:	f0 09 18 00 	cp.b	r9,r8
80008cde:	c0 31       	brne	80008ce4 <main+0xa50>
    return false;
80008ce0:	30 08       	mov	r8,0
80008ce2:	c4 38       	rjmp	80008d68 <main+0xad4>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008ce4:	ee f8 ff 80 	ld.w	r8,r7[-128]
80008ce8:	f1 39 00 08 	ld.ub	r9,r8[8]
80008cec:	30 18       	mov	r8,1
80008cee:	f0 09 18 00 	cp.b	r9,r8
80008cf2:	c0 31       	brne	80008cf8 <main+0xa64>
    return true;
80008cf4:	30 18       	mov	r8,1
80008cf6:	c3 98       	rjmp	80008d68 <main+0xad4>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008cf8:	ee f8 ff 80 	ld.w	r8,r7[-128]
80008cfc:	70 09       	ld.w	r9,r8[0x0]
80008cfe:	ee f8 ff 80 	ld.w	r8,r7[-128]
80008d02:	70 18       	ld.w	r8,r8[0x4]
80008d04:	10 39       	cp.w	r9,r8
80008d06:	e0 88 00 1a 	brls	80008d3a <main+0xaa6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008d0a:	ee f8 ff 80 	ld.w	r8,r7[-128]
80008d0e:	70 09       	ld.w	r9,r8[0x0]
80008d10:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008d14:	12 38       	cp.w	r8,r9
80008d16:	c1 02       	brcc	80008d36 <main+0xaa2>
80008d18:	ee f8 ff 80 	ld.w	r8,r7[-128]
80008d1c:	70 19       	ld.w	r9,r8[0x4]
80008d1e:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008d22:	12 38       	cp.w	r8,r9
80008d24:	e0 88 00 09 	brls	80008d36 <main+0xaa2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008d28:	ee f9 ff 80 	ld.w	r9,r7[-128]
80008d2c:	30 18       	mov	r8,1
80008d2e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008d32:	30 18       	mov	r8,1
80008d34:	c1 a8       	rjmp	80008d68 <main+0xad4>
    }
    return false;
80008d36:	30 08       	mov	r8,0
80008d38:	c1 88       	rjmp	80008d68 <main+0xad4>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008d3a:	ee f8 ff 80 	ld.w	r8,r7[-128]
80008d3e:	70 09       	ld.w	r9,r8[0x0]
80008d40:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008d44:	12 38       	cp.w	r8,r9
80008d46:	c0 93       	brcs	80008d58 <main+0xac4>
80008d48:	ee f8 ff 80 	ld.w	r8,r7[-128]
80008d4c:	70 19       	ld.w	r9,r8[0x4]
80008d4e:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008d52:	12 38       	cp.w	r8,r9
80008d54:	e0 88 00 09 	brls	80008d66 <main+0xad2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008d58:	ee f9 ff 80 	ld.w	r9,r7[-128]
80008d5c:	30 18       	mov	r8,1
80008d5e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008d62:	30 18       	mov	r8,1
80008d64:	c0 28       	rjmp	80008d68 <main+0xad4>
    }
    return false;
80008d66:	30 08       	mov	r8,0
				}

				/*
    			 * Manage storing usage statistics to flash
				 */
				if (cpu_is_timeout (&oneMinuteTimer))
80008d68:	58 08       	cp.w	r8,0
80008d6a:	c5 e0       	breq	80008e26 <main+0xb92>
80008d6c:	fe f8 07 3c 	ld.w	r8,pc[1852]
80008d70:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80008d74:	ee f9 ff 88 	ld.w	r9,r7[-120]
80008d78:	30 28       	mov	r8,2
80008d7a:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout (&oneMinuteTimer);
					
					increment_ledBoard_usage_min(); //increments usage minutes for active shelves only
80008d7e:	f0 1f 01 cc 	mcall	800094ac <main+0x1218>
80008d82:	e0 68 03 e8 	mov	r8,1000
80008d86:	ef 48 ff 90 	st.w	r7[-112],r8
80008d8a:	e0 68 12 00 	mov	r8,4608
80008d8e:	ea 18 00 7a 	orh	r8,0x7a
80008d92:	ef 48 ff 8c 	st.w	r7[-116],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008d96:	ee fa ff 90 	ld.w	r10,r7[-112]
80008d9a:	ef 4a fe 5c 	st.w	r7[-420],r10
80008d9e:	30 08       	mov	r8,0
80008da0:	ef 48 fe 58 	st.w	r7[-424],r8
80008da4:	ee fc ff 8c 	ld.w	r12,r7[-116]
80008da8:	ef 4c fe 54 	st.w	r7[-428],r12
80008dac:	30 0a       	mov	r10,0
80008dae:	ef 4a fe 50 	st.w	r7[-432],r10
80008db2:	ee f9 fe 58 	ld.w	r9,r7[-424]
80008db6:	ee f8 fe 54 	ld.w	r8,r7[-428]
80008dba:	b1 39       	mul	r9,r8
80008dbc:	ee f8 fe 50 	ld.w	r8,r7[-432]
80008dc0:	ee fc fe 5c 	ld.w	r12,r7[-420]
80008dc4:	b9 38       	mul	r8,r12
80008dc6:	10 09       	add	r9,r8
80008dc8:	ee f8 fe 5c 	ld.w	r8,r7[-420]
80008dcc:	ee fc fe 54 	ld.w	r12,r7[-428]
80008dd0:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008dd4:	16 09       	add	r9,r11
80008dd6:	12 9b       	mov	r11,r9
80008dd8:	e0 68 03 e7 	mov	r8,999
80008ddc:	30 09       	mov	r9,0
80008dde:	10 0a       	add	r10,r8
80008de0:	f6 09 00 4b 	adc	r11,r11,r9
80008de4:	e0 68 03 e8 	mov	r8,1000
80008de8:	30 09       	mov	r9,0
80008dea:	f0 1f 01 99 	mcall	8000944c <main+0x11b8>
80008dee:	14 98       	mov	r8,r10
80008df0:	16 99       	mov	r9,r11
					
//DEBUG 11may15 set to one second for debug					cpu_set_timeout(cpu_ms_2_cy(60000, 8000000), &oneMinuteTimer); //one minute for the usage statistics
					cpu_set_timeout((cpu_ms_2_cy(1000,8000000)), &oneMinuteTimer); //one minute for the usage statistics DEBUG 11may15 one second instead of one minute
80008df2:	ef 48 ff 98 	st.w	r7[-104],r8
80008df6:	fe f8 06 b2 	ld.w	r8,pc[1714]
80008dfa:	ef 48 ff 94 	st.w	r7[-108],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008dfe:	e1 b8 00 42 	mfsr	r8,0x108
80008e02:	10 99       	mov	r9,r8
80008e04:	ee f8 ff 94 	ld.w	r8,r7[-108]
80008e08:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008e0a:	ee f8 ff 94 	ld.w	r8,r7[-108]
80008e0e:	70 09       	ld.w	r9,r8[0x0]
80008e10:	ee f8 ff 98 	ld.w	r8,r7[-104]
80008e14:	10 09       	add	r9,r8
80008e16:	ee f8 ff 94 	ld.w	r8,r7[-108]
80008e1a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008e1c:	ee f9 ff 94 	ld.w	r9,r7[-108]
80008e20:	30 08       	mov	r8,0
80008e22:	f3 68 00 08 	st.b	r9[8],r8
80008e26:	fe f8 06 7e 	ld.w	r8,pc[1662]
80008e2a:	ef 48 ff 9c 	st.w	r7[-100],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008e2e:	e1 b8 00 42 	mfsr	r8,0x108
80008e32:	ef 48 ff a0 	st.w	r7[-96],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008e36:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008e3a:	f1 39 00 08 	ld.ub	r9,r8[8]
80008e3e:	30 28       	mov	r8,2
80008e40:	f0 09 18 00 	cp.b	r9,r8
80008e44:	c0 31       	brne	80008e4a <main+0xbb6>
    return false;
80008e46:	30 08       	mov	r8,0
80008e48:	c4 38       	rjmp	80008ece <main+0xc3a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008e4a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008e4e:	f1 39 00 08 	ld.ub	r9,r8[8]
80008e52:	30 18       	mov	r8,1
80008e54:	f0 09 18 00 	cp.b	r9,r8
80008e58:	c0 31       	brne	80008e5e <main+0xbca>
    return true;
80008e5a:	30 18       	mov	r8,1
80008e5c:	c3 98       	rjmp	80008ece <main+0xc3a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008e5e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008e62:	70 09       	ld.w	r9,r8[0x0]
80008e64:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008e68:	70 18       	ld.w	r8,r8[0x4]
80008e6a:	10 39       	cp.w	r9,r8
80008e6c:	e0 88 00 1a 	brls	80008ea0 <main+0xc0c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008e70:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008e74:	70 09       	ld.w	r9,r8[0x0]
80008e76:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008e7a:	12 38       	cp.w	r8,r9
80008e7c:	c1 02       	brcc	80008e9c <main+0xc08>
80008e7e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008e82:	70 19       	ld.w	r9,r8[0x4]
80008e84:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008e88:	12 38       	cp.w	r8,r9
80008e8a:	e0 88 00 09 	brls	80008e9c <main+0xc08>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008e8e:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80008e92:	30 18       	mov	r8,1
80008e94:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008e98:	30 18       	mov	r8,1
80008e9a:	c1 a8       	rjmp	80008ece <main+0xc3a>
    }
    return false;
80008e9c:	30 08       	mov	r8,0
80008e9e:	c1 88       	rjmp	80008ece <main+0xc3a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008ea0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008ea4:	70 09       	ld.w	r9,r8[0x0]
80008ea6:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008eaa:	12 38       	cp.w	r8,r9
80008eac:	c0 93       	brcs	80008ebe <main+0xc2a>
80008eae:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008eb2:	70 19       	ld.w	r9,r8[0x4]
80008eb4:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008eb8:	12 38       	cp.w	r8,r9
80008eba:	e0 88 00 09 	brls	80008ecc <main+0xc38>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008ebe:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80008ec2:	30 18       	mov	r8,1
80008ec4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008ec8:	30 18       	mov	r8,1
80008eca:	c0 28       	rjmp	80008ece <main+0xc3a>
    }
    return false;
80008ecc:	30 08       	mov	r8,0
				}
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
80008ece:	58 08       	cp.w	r8,0
80008ed0:	e0 80 01 10 	breq	800090f0 <main+0xe5c>
					
					for (int i=0; i< NUM_SHELVES; i++)
80008ed4:	30 08       	mov	r8,0
80008ed6:	ef 48 fe c4 	st.w	r7[-316],r8
80008eda:	c0 d8       	rjmp	80008ef4 <main+0xc60>
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
80008edc:	ee f8 fe c4 	ld.w	r8,r7[-316]
80008ee0:	5c 58       	castu.b	r8
80008ee2:	30 0b       	mov	r11,0
80008ee4:	10 9c       	mov	r12,r8
80008ee6:	f0 1f 01 6d 	mcall	80009498 <main+0x1204>
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
					
					for (int i=0; i< NUM_SHELVES; i++)
80008eea:	ee f8 fe c4 	ld.w	r8,r7[-316]
80008eee:	2f f8       	sub	r8,-1
80008ef0:	ef 48 fe c4 	st.w	r7[-316],r8
80008ef4:	ee f8 fe c4 	ld.w	r8,r7[-316]
80008ef8:	58 38       	cp.w	r8,3
80008efa:	fe 9a ff f1 	brle	80008edc <main+0xc48>
80008efe:	fe f8 05 a6 	ld.w	r8,pc[1446]
80008f02:	ef 48 ff a4 	st.w	r7[-92],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80008f06:	ee f9 ff a4 	ld.w	r9,r7[-92]
80008f0a:	30 28       	mov	r8,2
80008f0c:	f3 68 00 08 	st.b	r9[8],r8
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
80008f10:	fe fc 05 a0 	ld.w	r12,pc[1440]
80008f14:	f0 1f 01 44 	mcall	80009424 <main+0x1190>
					electroclaveState = STATE_START_CLEAN;
80008f18:	fe f9 05 28 	ld.w	r9,pc[1320]
80008f1c:	30 68       	mov	r8,6
80008f1e:	b2 88       	st.b	r9[0x0],r8
				}
				break;
80008f20:	ce b8       	rjmp	800090f6 <main+0xe62>
				
			case STATE_START_CLEAN:
				display_text(IDX_CLEAN);
80008f22:	30 1c       	mov	r12,1
80008f24:	f0 1f 01 41 	mcall	80009428 <main+0x1194>
				electroclaveState = STATE_CLEAN;
80008f28:	fe f9 05 18 	ld.w	r9,pc[1304]
80008f2c:	30 78       	mov	r8,7
80008f2e:	b2 88       	st.b	r9[0x0],r8
80008f30:	e0 68 03 e8 	mov	r8,1000
80008f34:	ef 48 ff ac 	st.w	r7[-84],r8
80008f38:	e0 68 12 00 	mov	r8,4608
80008f3c:	ea 18 00 7a 	orh	r8,0x7a
80008f40:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008f44:	ee fa ff ac 	ld.w	r10,r7[-84]
80008f48:	ef 4a fe 6c 	st.w	r7[-404],r10
80008f4c:	30 08       	mov	r8,0
80008f4e:	ef 48 fe 68 	st.w	r7[-408],r8
80008f52:	ee fc ff a8 	ld.w	r12,r7[-88]
80008f56:	ef 4c fe 64 	st.w	r7[-412],r12
80008f5a:	30 0a       	mov	r10,0
80008f5c:	ef 4a fe 60 	st.w	r7[-416],r10
80008f60:	ee f9 fe 68 	ld.w	r9,r7[-408]
80008f64:	ee f8 fe 64 	ld.w	r8,r7[-412]
80008f68:	b1 39       	mul	r9,r8
80008f6a:	ee f8 fe 60 	ld.w	r8,r7[-416]
80008f6e:	ee fc fe 6c 	ld.w	r12,r7[-404]
80008f72:	b9 38       	mul	r8,r12
80008f74:	10 09       	add	r9,r8
80008f76:	ee f8 fe 6c 	ld.w	r8,r7[-404]
80008f7a:	ee fc fe 64 	ld.w	r12,r7[-412]
80008f7e:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008f82:	16 09       	add	r9,r11
80008f84:	12 9b       	mov	r11,r9
80008f86:	e0 68 03 e7 	mov	r8,999
80008f8a:	30 09       	mov	r9,0
80008f8c:	10 0a       	add	r10,r8
80008f8e:	f6 09 00 4b 	adc	r11,r11,r9
80008f92:	e0 68 03 e8 	mov	r8,1000
80008f96:	30 09       	mov	r9,0
80008f98:	f0 1f 01 2d 	mcall	8000944c <main+0x11b8>
80008f9c:	14 98       	mov	r8,r10
80008f9e:	16 99       	mov	r9,r11
#if 0 //DEBUG do this in seconds to debug logic 11may15				
				cpu_set_timeout((20 * 60 * cpu_ms_2_cy(1000, 8000000)), &cleanTimer); //TODO: this time period will be parameterized from the technician UART interface
#endif
				cpu_set_timeout((20 * cpu_ms_2_cy(1000, 8000000)), &cleanTimer); //DEBUG 11may15 
80008fa0:	10 99       	mov	r9,r8
80008fa2:	12 98       	mov	r8,r9
80008fa4:	a3 68       	lsl	r8,0x2
80008fa6:	12 08       	add	r8,r9
80008fa8:	a3 68       	lsl	r8,0x2
80008faa:	ef 48 ff b4 	st.w	r7[-76],r8
80008fae:	fe f8 05 06 	ld.w	r8,pc[1286]
80008fb2:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008fb6:	e1 b8 00 42 	mfsr	r8,0x108
80008fba:	10 99       	mov	r9,r8
80008fbc:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008fc0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008fc2:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008fc6:	70 09       	ld.w	r9,r8[0x0]
80008fc8:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008fcc:	10 09       	add	r9,r8
80008fce:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008fd2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008fd4:	ee f9 ff b0 	ld.w	r9,r7[-80]
80008fd8:	30 08       	mov	r8,0
80008fda:	f3 68 00 08 	st.b	r9[8],r8

				break;	
80008fde:	c8 c8       	rjmp	800090f6 <main+0xe62>
80008fe0:	fe f8 04 d4 	ld.w	r8,pc[1236]
80008fe4:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008fe8:	e1 b8 00 42 	mfsr	r8,0x108
80008fec:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008ff0:	ee f8 ff b8 	ld.w	r8,r7[-72]
80008ff4:	f1 39 00 08 	ld.ub	r9,r8[8]
80008ff8:	30 28       	mov	r8,2
80008ffa:	f0 09 18 00 	cp.b	r9,r8
80008ffe:	c0 31       	brne	80009004 <main+0xd70>
    return false;
80009000:	30 08       	mov	r8,0
80009002:	c4 38       	rjmp	80009088 <main+0xdf4>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009004:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009008:	f1 39 00 08 	ld.ub	r9,r8[8]
8000900c:	30 18       	mov	r8,1
8000900e:	f0 09 18 00 	cp.b	r9,r8
80009012:	c0 31       	brne	80009018 <main+0xd84>
    return true;
80009014:	30 18       	mov	r8,1
80009016:	c3 98       	rjmp	80009088 <main+0xdf4>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009018:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000901c:	70 09       	ld.w	r9,r8[0x0]
8000901e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80009022:	70 18       	ld.w	r8,r8[0x4]
80009024:	10 39       	cp.w	r9,r8
80009026:	e0 88 00 1a 	brls	8000905a <main+0xdc6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000902a:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000902e:	70 09       	ld.w	r9,r8[0x0]
80009030:	ee f8 ff bc 	ld.w	r8,r7[-68]
80009034:	12 38       	cp.w	r8,r9
80009036:	c1 02       	brcc	80009056 <main+0xdc2>
80009038:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000903c:	70 19       	ld.w	r9,r8[0x4]
8000903e:	ee f8 ff bc 	ld.w	r8,r7[-68]
80009042:	12 38       	cp.w	r8,r9
80009044:	e0 88 00 09 	brls	80009056 <main+0xdc2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009048:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000904c:	30 18       	mov	r8,1
8000904e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009052:	30 18       	mov	r8,1
80009054:	c1 a8       	rjmp	80009088 <main+0xdf4>
    }
    return false;
80009056:	30 08       	mov	r8,0
80009058:	c1 88       	rjmp	80009088 <main+0xdf4>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000905a:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000905e:	70 09       	ld.w	r9,r8[0x0]
80009060:	ee f8 ff bc 	ld.w	r8,r7[-68]
80009064:	12 38       	cp.w	r8,r9
80009066:	c0 93       	brcs	80009078 <main+0xde4>
80009068:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000906c:	70 19       	ld.w	r9,r8[0x4]
8000906e:	ee f8 ff bc 	ld.w	r8,r7[-68]
80009072:	12 38       	cp.w	r8,r9
80009074:	e0 88 00 09 	brls	80009086 <main+0xdf2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009078:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000907c:	30 18       	mov	r8,1
8000907e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009082:	30 18       	mov	r8,1
80009084:	c0 28       	rjmp	80009088 <main+0xdf4>
    }
    return false;
80009086:	30 08       	mov	r8,0
				
			case STATE_CLEAN:
				if (cpu_is_timeout(&cleanTimer)) {
80009088:	58 08       	cp.w	r8,0
8000908a:	c3 50       	breq	800090f4 <main+0xe60>
8000908c:	fe f8 04 28 	ld.w	r8,pc[1064]
80009090:	ef 48 ff c0 	st.w	r7[-64],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80009094:	ee f9 ff c0 	ld.w	r9,r7[-64]
80009098:	30 28       	mov	r8,2
8000909a:	f3 68 00 08 	st.b	r9[8],r8
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
8000909e:	fe f9 03 a2 	ld.w	r9,pc[930]
800090a2:	30 38       	mov	r8,3
800090a4:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("Start sanitizing\r\n");
800090a6:	fe fc 03 d6 	ld.w	r12,pc[982]
800090aa:	f0 1f 00 df 	mcall	80009424 <main+0x1190>

				}
				break;
800090ae:	c2 48       	rjmp	800090f6 <main+0xe62>
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
800090b0:	30 08       	mov	r8,0
800090b2:	ef 48 fe c8 	st.w	r7[-312],r8
800090b6:	c0 d8       	rjmp	800090d0 <main+0xe3c>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
800090b8:	ee f8 fe c8 	ld.w	r8,r7[-312]
800090bc:	5c 58       	castu.b	r8
800090be:	30 0b       	mov	r11,0
800090c0:	10 9c       	mov	r12,r8
800090c2:	f0 1f 00 f6 	mcall	80009498 <main+0x1204>
				}
				break;
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
800090c6:	ee f8 fe c8 	ld.w	r8,r7[-312]
800090ca:	2f f8       	sub	r8,-1
800090cc:	ef 48 fe c8 	st.w	r7[-312],r8
800090d0:	ee f8 fe c8 	ld.w	r8,r7[-312]
800090d4:	58 38       	cp.w	r8,3
800090d6:	fe 9a ff f1 	brle	800090b8 <main+0xe24>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				electroclaveState = STATE_EC_IDLE;
800090da:	fe f9 03 66 	ld.w	r9,pc[870]
800090de:	30 08       	mov	r8,0
800090e0:	b2 88       	st.b	r9[0x0],r8
800090e2:	c0 a8       	rjmp	800090f6 <main+0xe62>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
					electroclaveState = STATE_DOOR_LATCHED;
					firstTimeThrough = 1;
				}
				break;
800090e4:	d7 03       	nop
800090e6:	c0 88       	rjmp	800090f6 <main+0xe62>
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
					print_ecdbg("Action push button press detected\r\n");
					electroclaveState = STATE_ACTION_PB_PRESSED;
				}
				break;
800090e8:	d7 03       	nop
800090ea:	c0 68       	rjmp	800090f6 <main+0xe62>
				if (EC_ACTION_PB)
				{
					print_ecdbg("Action push button release detected\r\n");
					electroclaveState = STATE_ACTION_PB_RELEASED;	
				}
				break;
800090ec:	d7 03       	nop
800090ee:	c0 48       	rjmp	800090f6 <main+0xe62>
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
					electroclaveState = STATE_START_CLEAN;
				}
				break;
800090f0:	d7 03       	nop
800090f2:	c0 28       	rjmp	800090f6 <main+0xe62>
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
					print_ecdbg("Start sanitizing\r\n");

				}
				break;
800090f4:	d7 03       	nop
		
		/*
		 * This check overrides everything going on in the state machine, if the user opens the door,
		 * shut down all processes for safety
		 */
		if (!EC_DOOR_LATCHED) {
800090f6:	33 ec       	mov	r12,62
800090f8:	f0 1f 00 d8 	mcall	80009458 <main+0x11c4>
800090fc:	18 98       	mov	r8,r12
800090fe:	58 08       	cp.w	r8,0
80009100:	e0 80 00 d2 	breq	800092a4 <main+0x1010>
		
			if (firstTimeThrough)
80009104:	fe f8 03 5c 	ld.w	r8,pc[860]
80009108:	11 88       	ld.ub	r8,r8[0x0]
8000910a:	58 08       	cp.w	r8,0
8000910c:	e0 80 00 cc 	breq	800092a4 <main+0x1010>
			{
				door_latch_open_kill_all_shelves();
80009110:	f0 1f 00 ea 	mcall	800094b8 <main+0x1224>

				display_text(IDX_CLEAR);
80009114:	30 9c       	mov	r12,9
80009116:	f0 1f 00 c5 	mcall	80009428 <main+0x1194>
8000911a:	e0 68 01 f4 	mov	r8,500
8000911e:	ef 48 ff c8 	st.w	r7[-56],r8
80009122:	e0 68 12 00 	mov	r8,4608
80009126:	ea 18 00 7a 	orh	r8,0x7a
8000912a:	ef 48 ff c4 	st.w	r7[-60],r8
8000912e:	ee f8 ff c8 	ld.w	r8,r7[-56]
80009132:	ef 48 ff d0 	st.w	r7[-48],r8
80009136:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000913a:	ef 48 ff cc 	st.w	r7[-52],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000913e:	ee fa ff d0 	ld.w	r10,r7[-48]
80009142:	ef 4a fe 7c 	st.w	r7[-388],r10
80009146:	30 08       	mov	r8,0
80009148:	ef 48 fe 78 	st.w	r7[-392],r8
8000914c:	ee fc ff cc 	ld.w	r12,r7[-52]
80009150:	ef 4c fe 74 	st.w	r7[-396],r12
80009154:	30 0a       	mov	r10,0
80009156:	ef 4a fe 70 	st.w	r7[-400],r10
8000915a:	ee f9 fe 78 	ld.w	r9,r7[-392]
8000915e:	ee f8 fe 74 	ld.w	r8,r7[-396]
80009162:	b1 39       	mul	r9,r8
80009164:	ee f8 fe 70 	ld.w	r8,r7[-400]
80009168:	ee fc fe 7c 	ld.w	r12,r7[-388]
8000916c:	b9 38       	mul	r8,r12
8000916e:	10 09       	add	r9,r8
80009170:	ee f8 fe 7c 	ld.w	r8,r7[-388]
80009174:	ee fc fe 74 	ld.w	r12,r7[-396]
80009178:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000917c:	16 09       	add	r9,r11
8000917e:	12 9b       	mov	r11,r9
80009180:	e0 68 03 e7 	mov	r8,999
80009184:	30 09       	mov	r9,0
80009186:	10 0a       	add	r10,r8
80009188:	f6 09 00 4b 	adc	r11,r11,r9
8000918c:	e0 68 03 e8 	mov	r8,1000
80009190:	30 09       	mov	r9,0
80009192:	f0 1f 00 af 	mcall	8000944c <main+0x11b8>
80009196:	14 98       	mov	r8,r10
80009198:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000919a:	ef 48 ff d8 	st.w	r7[-40],r8
8000919e:	ee c8 01 4c 	sub	r8,r7,332
800091a2:	ef 48 ff d4 	st.w	r7[-44],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800091a6:	e1 b8 00 42 	mfsr	r8,0x108
800091aa:	10 99       	mov	r9,r8
800091ac:	ee f8 ff d4 	ld.w	r8,r7[-44]
800091b0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800091b2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800091b6:	70 09       	ld.w	r9,r8[0x0]
800091b8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800091bc:	10 09       	add	r9,r8
800091be:	ee f8 ff d4 	ld.w	r8,r7[-44]
800091c2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800091c4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800091c8:	30 08       	mov	r8,0
800091ca:	f3 68 00 08 	st.b	r9[8],r8
800091ce:	ee c8 01 4c 	sub	r8,r7,332
800091d2:	ef 48 ff dc 	st.w	r7[-36],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800091d6:	e1 b8 00 42 	mfsr	r8,0x108
800091da:	ef 48 ff e0 	st.w	r7[-32],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800091de:	ee f8 ff dc 	ld.w	r8,r7[-36]
800091e2:	f1 39 00 08 	ld.ub	r9,r8[8]
800091e6:	30 28       	mov	r8,2
800091e8:	f0 09 18 00 	cp.b	r9,r8
800091ec:	c0 31       	brne	800091f2 <main+0xf5e>
    return false;
800091ee:	30 08       	mov	r8,0
800091f0:	c4 38       	rjmp	80009276 <main+0xfe2>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800091f2:	ee f8 ff dc 	ld.w	r8,r7[-36]
800091f6:	f1 39 00 08 	ld.ub	r9,r8[8]
800091fa:	30 18       	mov	r8,1
800091fc:	f0 09 18 00 	cp.b	r9,r8
80009200:	c0 31       	brne	80009206 <main+0xf72>
    return true;
80009202:	30 18       	mov	r8,1
80009204:	c3 98       	rjmp	80009276 <main+0xfe2>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009206:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000920a:	70 09       	ld.w	r9,r8[0x0]
8000920c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009210:	70 18       	ld.w	r8,r8[0x4]
80009212:	10 39       	cp.w	r9,r8
80009214:	e0 88 00 1a 	brls	80009248 <main+0xfb4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009218:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000921c:	70 09       	ld.w	r9,r8[0x0]
8000921e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009222:	12 38       	cp.w	r8,r9
80009224:	c1 02       	brcc	80009244 <main+0xfb0>
80009226:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000922a:	70 19       	ld.w	r9,r8[0x4]
8000922c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009230:	12 38       	cp.w	r8,r9
80009232:	e0 88 00 09 	brls	80009244 <main+0xfb0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009236:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000923a:	30 18       	mov	r8,1
8000923c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009240:	30 18       	mov	r8,1
80009242:	c1 a8       	rjmp	80009276 <main+0xfe2>
    }
    return false;
80009244:	30 08       	mov	r8,0
80009246:	c1 88       	rjmp	80009276 <main+0xfe2>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80009248:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000924c:	70 09       	ld.w	r9,r8[0x0]
8000924e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009252:	12 38       	cp.w	r8,r9
80009254:	c0 93       	brcs	80009266 <main+0xfd2>
80009256:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000925a:	70 19       	ld.w	r9,r8[0x4]
8000925c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80009260:	12 38       	cp.w	r8,r9
80009262:	e0 88 00 09 	brls	80009274 <main+0xfe0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009266:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000926a:	30 18       	mov	r8,1
8000926c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009270:	30 18       	mov	r8,1
80009272:	c0 28       	rjmp	80009276 <main+0xfe2>
    }
    return false;
80009274:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80009276:	58 08       	cp.w	r8,0
80009278:	ca b0       	breq	800091ce <main+0xf3a>
				cpu_delay_ms(500, 8000000);
				switch (electroclaveState)
8000927a:	4f 28       	lddpc	r8,80009440 <main+0x11ac>
8000927c:	11 88       	ld.ub	r8,r8[0x0]
8000927e:	58 58       	cp.w	r8,5
80009280:	c0 51       	brne	8000928a <main+0xff6>
				{
					case STATE_SANITIZE:
						display_text(IDX_DIRTY);
80009282:	30 3c       	mov	r12,3
80009284:	f0 1f 00 69 	mcall	80009428 <main+0x1194>
						break;
80009288:	c0 48       	rjmp	80009290 <main+0xffc>
					
					default:
						display_text(IDX_CLEAN);
8000928a:	30 1c       	mov	r12,1
8000928c:	f0 1f 00 67 	mcall	80009428 <main+0x1194>
						break;
				}

				electroclaveState = STATE_SHUTDOWN_PROCESSES;
80009290:	4e c9       	lddpc	r9,80009440 <main+0x11ac>
80009292:	30 88       	mov	r8,8
80009294:	b2 88       	st.b	r9[0x0],r8
				print_ecdbg("Door latch opened, shutting down all processes\r\n");
80009296:	fe fc 02 26 	ld.w	r12,pc[550]
8000929a:	f0 1f 00 63 	mcall	80009424 <main+0x1190>
				firstTimeThrough = 0;
8000929e:	4f 19       	lddpc	r9,80009460 <main+0x11cc>
800092a0:	30 08       	mov	r8,0
800092a2:	b2 88       	st.b	r9[0x0],r8
800092a4:	4e b8       	lddpc	r8,80009450 <main+0x11bc>
800092a6:	ef 48 ff e4 	st.w	r7[-28],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800092aa:	e1 b8 00 42 	mfsr	r8,0x108
800092ae:	ef 48 ff e8 	st.w	r7[-24],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800092b2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800092b6:	f1 39 00 08 	ld.ub	r9,r8[8]
800092ba:	30 28       	mov	r8,2
800092bc:	f0 09 18 00 	cp.b	r9,r8
800092c0:	c0 31       	brne	800092c6 <main+0x1032>
    return false;
800092c2:	30 08       	mov	r8,0
800092c4:	c4 38       	rjmp	8000934a <main+0x10b6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800092c6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800092ca:	f1 39 00 08 	ld.ub	r9,r8[8]
800092ce:	30 18       	mov	r8,1
800092d0:	f0 09 18 00 	cp.b	r9,r8
800092d4:	c0 31       	brne	800092da <main+0x1046>
    return true;
800092d6:	30 18       	mov	r8,1
800092d8:	c3 98       	rjmp	8000934a <main+0x10b6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800092da:	ee f8 ff e4 	ld.w	r8,r7[-28]
800092de:	70 09       	ld.w	r9,r8[0x0]
800092e0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800092e4:	70 18       	ld.w	r8,r8[0x4]
800092e6:	10 39       	cp.w	r9,r8
800092e8:	e0 88 00 1a 	brls	8000931c <main+0x1088>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800092ec:	ee f8 ff e4 	ld.w	r8,r7[-28]
800092f0:	70 09       	ld.w	r9,r8[0x0]
800092f2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800092f6:	12 38       	cp.w	r8,r9
800092f8:	c1 02       	brcc	80009318 <main+0x1084>
800092fa:	ee f8 ff e4 	ld.w	r8,r7[-28]
800092fe:	70 19       	ld.w	r9,r8[0x4]
80009300:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009304:	12 38       	cp.w	r8,r9
80009306:	e0 88 00 09 	brls	80009318 <main+0x1084>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000930a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000930e:	30 18       	mov	r8,1
80009310:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009314:	30 18       	mov	r8,1
80009316:	c1 a8       	rjmp	8000934a <main+0x10b6>
    }
    return false;
80009318:	30 08       	mov	r8,0
8000931a:	c1 88       	rjmp	8000934a <main+0x10b6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000931c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009320:	70 09       	ld.w	r9,r8[0x0]
80009322:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009326:	12 38       	cp.w	r8,r9
80009328:	c0 93       	brcs	8000933a <main+0x10a6>
8000932a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000932e:	70 19       	ld.w	r9,r8[0x4]
80009330:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009334:	12 38       	cp.w	r8,r9
80009336:	e0 88 00 09 	brls	80009348 <main+0x10b4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000933a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000933e:	30 18       	mov	r8,1
80009340:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009344:	30 18       	mov	r8,1
80009346:	c0 28       	rjmp	8000934a <main+0x10b6>
    }
    return false;
80009348:	30 08       	mov	r8,0
				
			}
		} //if (!EC_DOOR_LATCHED)
		
		if (cpu_is_timeout(&debugTimer))
8000934a:	58 08       	cp.w	r8,0
8000934c:	fe 90 f8 1a 	breq	80008380 <main+0xec>
80009350:	4c 08       	lddpc	r8,80009450 <main+0x11bc>
80009352:	ef 48 ff ec 	st.w	r7[-20],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80009356:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000935a:	30 28       	mov	r8,2
8000935c:	f3 68 00 08 	st.b	r9[8],r8
80009360:	e0 68 03 e8 	mov	r8,1000
80009364:	ef 48 ff f4 	st.w	r7[-12],r8
80009368:	e0 68 12 00 	mov	r8,4608
8000936c:	ea 18 00 7a 	orh	r8,0x7a
80009370:	ef 48 ff f0 	st.w	r7[-16],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80009374:	ee fa ff f4 	ld.w	r10,r7[-12]
80009378:	ef 4a fe 8c 	st.w	r7[-372],r10
8000937c:	30 08       	mov	r8,0
8000937e:	ef 48 fe 88 	st.w	r7[-376],r8
80009382:	ee fc ff f0 	ld.w	r12,r7[-16]
80009386:	ef 4c fe 84 	st.w	r7[-380],r12
8000938a:	30 0a       	mov	r10,0
8000938c:	ef 4a fe 80 	st.w	r7[-384],r10
80009390:	ee f9 fe 88 	ld.w	r9,r7[-376]
80009394:	ee f8 fe 84 	ld.w	r8,r7[-380]
80009398:	b1 39       	mul	r9,r8
8000939a:	ee f8 fe 80 	ld.w	r8,r7[-384]
8000939e:	ee fc fe 8c 	ld.w	r12,r7[-372]
800093a2:	b9 38       	mul	r8,r12
800093a4:	10 09       	add	r9,r8
800093a6:	ee f8 fe 8c 	ld.w	r8,r7[-372]
800093aa:	ee fc fe 84 	ld.w	r12,r7[-380]
800093ae:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800093b2:	16 09       	add	r9,r11
800093b4:	12 9b       	mov	r11,r9
800093b6:	e0 68 03 e7 	mov	r8,999
800093ba:	30 09       	mov	r9,0
800093bc:	10 0a       	add	r10,r8
800093be:	f6 09 00 4b 	adc	r11,r11,r9
800093c2:	e0 68 03 e8 	mov	r8,1000
800093c6:	30 09       	mov	r9,0
800093c8:	f0 1f 00 21 	mcall	8000944c <main+0x11b8>
800093cc:	14 98       	mov	r8,r10
800093ce:	16 99       	mov	r9,r11
		{
			cpu_stop_timeout(&debugTimer);
			cpu_set_timeout((EC_ONE_SECOND/2), &debugTimer);
800093d0:	a1 98       	lsr	r8,0x1
800093d2:	ef 48 ff fc 	st.w	r7[-4],r8
800093d6:	49 f8       	lddpc	r8,80009450 <main+0x11bc>
800093d8:	ef 48 ff f8 	st.w	r7[-8],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800093dc:	e1 b8 00 42 	mfsr	r8,0x108
800093e0:	10 99       	mov	r9,r8
800093e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093e6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800093e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093ec:	70 09       	ld.w	r9,r8[0x0]
800093ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093f2:	10 09       	add	r9,r8
800093f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093f8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800093fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800093fe:	30 08       	mov	r8,0
80009400:	f3 68 00 08 	st.b	r9[8],r8
			gpio_toggle_pin(ECLAVE_DEBUG_LED);
80009404:	37 cc       	mov	r12,124
80009406:	f0 1f 00 2f 	mcall	800094c0 <main+0x122c>
		}
	} //while(true)
8000940a:	fe 9f f7 bc 	bral	80008382 <main+0xee>
8000940e:	00 00       	add	r0,r0
80009410:	80 00       	ld.sh	r0,r0[0x0]
80009412:	69 5c       	ld.w	r12,r4[0x54]
80009414:	80 00       	ld.sh	r0,r0[0x0]
80009416:	60 50       	ld.w	r0,r0[0x14]
80009418:	80 00       	ld.sh	r0,r0[0x0]
8000941a:	2f 14       	sub	r4,-15
8000941c:	80 00       	ld.sh	r0,r0[0x0]
8000941e:	2f 38       	sub	r8,-13
80009420:	80 00       	ld.sh	r0,r0[0x0]
80009422:	5e 94       	retgt	r4
80009424:	80 00       	ld.sh	r0,r0[0x0]
80009426:	30 14       	mov	r4,1
80009428:	80 00       	ld.sh	r0,r0[0x0]
8000942a:	5f e4       	srqs	r4
8000942c:	80 00       	ld.sh	r0,r0[0x0]
8000942e:	69 ac       	ld.w	r12,r4[0x68]
80009430:	80 00       	ld.sh	r0,r0[0x0]
80009432:	49 18       	lddpc	r8,80009474 <main+0x11e0>
80009434:	80 00       	ld.sh	r0,r0[0x0]
80009436:	69 f8       	ld.w	r8,r4[0x7c]
80009438:	80 00       	ld.sh	r0,r0[0x0]
8000943a:	47 de       	lddsp	lr,sp[0x1f4]
8000943c:	80 00       	ld.sh	r0,r0[0x0]
8000943e:	5a 90       	cp.w	r0,-23
80009440:	00 00       	add	r0,r0
80009442:	0b 4c       	ld.w	r12,--r5
80009444:	80 00       	ld.sh	r0,r0[0x0]
80009446:	7f 98       	ld.w	r8,pc[0x64]
80009448:	80 00       	ld.sh	r0,r0[0x0]
8000944a:	48 18       	lddpc	r8,8000944c <main+0x11b8>
8000944c:	80 00       	ld.sh	r0,r0[0x0]
8000944e:	9c 1a       	ld.sh	r10,lr[0x2]
80009450:	00 00       	add	r0,r0
80009452:	03 7c       	ld.ub	r12,--r1
80009454:	80 00       	ld.sh	r0,r0[0x0]
80009456:	a3 d8       	cbr	r8,0x3
80009458:	80 00       	ld.sh	r0,r0[0x0]
8000945a:	47 a2       	lddsp	r2,sp[0x1e8]
8000945c:	80 00       	ld.sh	r0,r0[0x0]
8000945e:	5e e0       	retqs	r0
80009460:	00 00       	add	r0,r0
80009462:	00 b0       	st.h	r0++,r0
80009464:	80 00       	ld.sh	r0,r0[0x0]
80009466:	5e f8       	retal	r8
80009468:	80 00       	ld.sh	r0,r0[0x0]
8000946a:	5f 1c       	srne	r12
8000946c:	80 00       	ld.sh	r0,r0[0x0]
8000946e:	64 a0       	ld.w	r0,r2[0x28]
80009470:	80 00       	ld.sh	r0,r0[0x0]
80009472:	67 74       	ld.w	r4,r3[0x5c]
80009474:	80 00       	ld.sh	r0,r0[0x0]
80009476:	67 e8       	ld.w	r8,r3[0x78]
80009478:	80 00       	ld.sh	r0,r0[0x0]
8000947a:	69 48       	ld.w	r8,r4[0x50]
8000947c:	80 00       	ld.sh	r0,r0[0x0]
8000947e:	5f 44       	srge	r4
80009480:	80 00       	ld.sh	r0,r0[0x0]
80009482:	5f 58       	srlt	r8
80009484:	00 00       	add	r0,r0
80009486:	02 b0       	st.h	r1++,r0
80009488:	00 00       	add	r0,r0
8000948a:	03 5c       	ld.sh	r12,--r1
8000948c:	00 00       	add	r0,r0
8000948e:	03 3a       	ld.ub	r10,r1++
80009490:	80 00       	ld.sh	r0,r0[0x0]
80009492:	6a 78       	ld.w	r8,r5[0x1c]
80009494:	00 00       	add	r0,r0
80009496:	03 64       	ld.uh	r4,--r1
80009498:	80 00       	ld.sh	r0,r0[0x0]
8000949a:	5c ec       	tnbz	r12
8000949c:	00 00       	add	r0,r0
8000949e:	02 e0       	st.h	--r1,r0
800094a0:	00 00       	add	r0,r0
800094a2:	0b 0c       	ld.w	r12,r5++
800094a4:	00 00       	add	r0,r0
800094a6:	03 50       	ld.sh	r0,--r1
800094a8:	00 00       	add	r0,r0
800094aa:	0b 50       	ld.sh	r0,--r5
800094ac:	80 00       	ld.sh	r0,r0[0x0]
800094ae:	78 b4       	ld.w	r4,r12[0x2c]
800094b0:	80 00       	ld.sh	r0,r0[0x0]
800094b2:	5f a0       	srle	r0
800094b4:	00 00       	add	r0,r0
800094b6:	0b 18       	ld.sh	r8,r5++
800094b8:	80 00       	ld.sh	r0,r0[0x0]
800094ba:	6b 48       	ld.w	r8,r5[0x50]
800094bc:	80 00       	ld.sh	r0,r0[0x0]
800094be:	5f b0       	srhi	r0
800094c0:	80 00       	ld.sh	r0,r0[0x0]
800094c2:	48 52       	lddpc	r2,800094d4 <__avr32_f64_mul+0x10>

800094c4 <__avr32_f64_mul>:
800094c4:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800094c8:	e0 80 00 dc 	breq	80009680 <__avr32_f64_mul_op1_zero>
800094cc:	d4 21       	pushm	r4-r7,lr
800094ce:	f7 e9 20 0e 	eor	lr,r11,r9
800094d2:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800094d6:	30 15       	mov	r5,1
800094d8:	c4 30       	breq	8000955e <__avr32_f64_mul_op1_subnormal>
800094da:	ab 6b       	lsl	r11,0xa
800094dc:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
800094e0:	ab 6a       	lsl	r10,0xa
800094e2:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
800094e6:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800094ea:	c5 c0       	breq	800095a2 <__avr32_f64_mul_op2_subnormal>
800094ec:	a1 78       	lsl	r8,0x1
800094ee:	5c f9       	rol	r9
800094f0:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
800094f4:	e0 47 07 ff 	cp.w	r7,2047
800094f8:	c7 70       	breq	800095e6 <__avr32_f64_mul_op_nan_or_inf>
800094fa:	e0 46 07 ff 	cp.w	r6,2047
800094fe:	c7 40       	breq	800095e6 <__avr32_f64_mul_op_nan_or_inf>
80009500:	ee 06 00 0c 	add	r12,r7,r6
80009504:	e0 2c 03 fe 	sub	r12,1022
80009508:	f6 08 06 44 	mulu.d	r4,r11,r8
8000950c:	f4 09 07 44 	macu.d	r4,r10,r9
80009510:	f4 08 06 46 	mulu.d	r6,r10,r8
80009514:	f6 09 06 4a 	mulu.d	r10,r11,r9
80009518:	08 07       	add	r7,r4
8000951a:	f4 05 00 4a 	adc	r10,r10,r5
8000951e:	5c 0b       	acr	r11
80009520:	ed bb 00 14 	bld	r11,0x14
80009524:	c0 50       	breq	8000952e <__avr32_f64_mul+0x6a>
80009526:	a1 77       	lsl	r7,0x1
80009528:	5c fa       	rol	r10
8000952a:	5c fb       	rol	r11
8000952c:	20 1c       	sub	r12,1
8000952e:	58 0c       	cp.w	r12,0
80009530:	e0 8a 00 6f 	brle	8000960e <__avr32_f64_mul_res_subnormal>
80009534:	e0 4c 07 ff 	cp.w	r12,2047
80009538:	e0 84 00 9c 	brge	80009670 <__avr32_f64_mul_res_inf>
8000953c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80009540:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80009544:	ef e6 12 17 	or	r7,r7,r6>>0x1
80009548:	ee 17 80 00 	eorh	r7,0x8000
8000954c:	f1 b7 04 20 	satu	r7,0x1
80009550:	0e 0a       	add	r10,r7
80009552:	5c 0b       	acr	r11
80009554:	ed be 00 1f 	bld	lr,0x1f
80009558:	ef bb 00 1f 	bst	r11,0x1f
8000955c:	d8 22       	popm	r4-r7,pc

8000955e <__avr32_f64_mul_op1_subnormal>:
8000955e:	e4 1b 00 0f 	andh	r11,0xf
80009562:	f4 0c 12 00 	clz	r12,r10
80009566:	f6 06 12 00 	clz	r6,r11
8000956a:	f7 bc 03 e1 	sublo	r12,-31
8000956e:	f8 06 17 30 	movlo	r6,r12
80009572:	f7 b6 02 01 	subhs	r6,1
80009576:	e0 46 00 20 	cp.w	r6,32
8000957a:	c0 d4       	brge	80009594 <__avr32_f64_mul_op1_subnormal+0x36>
8000957c:	ec 0c 11 20 	rsub	r12,r6,32
80009580:	f6 06 09 4b 	lsl	r11,r11,r6
80009584:	f4 0c 0a 4c 	lsr	r12,r10,r12
80009588:	18 4b       	or	r11,r12
8000958a:	f4 06 09 4a 	lsl	r10,r10,r6
8000958e:	20 b6       	sub	r6,11
80009590:	0c 17       	sub	r7,r6
80009592:	ca ab       	rjmp	800094e6 <__avr32_f64_mul+0x22>
80009594:	f4 06 09 4b 	lsl	r11,r10,r6
80009598:	c6 40       	breq	80009660 <__avr32_f64_mul_res_zero>
8000959a:	30 0a       	mov	r10,0
8000959c:	20 b6       	sub	r6,11
8000959e:	0c 17       	sub	r7,r6
800095a0:	ca 3b       	rjmp	800094e6 <__avr32_f64_mul+0x22>

800095a2 <__avr32_f64_mul_op2_subnormal>:
800095a2:	e4 19 00 0f 	andh	r9,0xf
800095a6:	f0 0c 12 00 	clz	r12,r8
800095aa:	f2 05 12 00 	clz	r5,r9
800095ae:	f7 bc 03 ea 	sublo	r12,-22
800095b2:	f8 05 17 30 	movlo	r5,r12
800095b6:	f7 b5 02 0a 	subhs	r5,10
800095ba:	e0 45 00 20 	cp.w	r5,32
800095be:	c0 d4       	brge	800095d8 <__avr32_f64_mul_op2_subnormal+0x36>
800095c0:	ea 0c 11 20 	rsub	r12,r5,32
800095c4:	f2 05 09 49 	lsl	r9,r9,r5
800095c8:	f0 0c 0a 4c 	lsr	r12,r8,r12
800095cc:	18 49       	or	r9,r12
800095ce:	f0 05 09 48 	lsl	r8,r8,r5
800095d2:	20 25       	sub	r5,2
800095d4:	0a 16       	sub	r6,r5
800095d6:	c8 fb       	rjmp	800094f4 <__avr32_f64_mul+0x30>
800095d8:	f0 05 09 49 	lsl	r9,r8,r5
800095dc:	c4 20       	breq	80009660 <__avr32_f64_mul_res_zero>
800095de:	30 08       	mov	r8,0
800095e0:	20 25       	sub	r5,2
800095e2:	0a 16       	sub	r6,r5
800095e4:	c8 8b       	rjmp	800094f4 <__avr32_f64_mul+0x30>

800095e6 <__avr32_f64_mul_op_nan_or_inf>:
800095e6:	e4 19 00 0f 	andh	r9,0xf
800095ea:	e4 1b 00 0f 	andh	r11,0xf
800095ee:	14 4b       	or	r11,r10
800095f0:	10 49       	or	r9,r8
800095f2:	e0 47 07 ff 	cp.w	r7,2047
800095f6:	c0 91       	brne	80009608 <__avr32_f64_mul_op1_not_naninf>
800095f8:	58 0b       	cp.w	r11,0
800095fa:	c3 81       	brne	8000966a <__avr32_f64_mul_res_nan>
800095fc:	e0 46 07 ff 	cp.w	r6,2047
80009600:	c3 81       	brne	80009670 <__avr32_f64_mul_res_inf>
80009602:	58 09       	cp.w	r9,0
80009604:	c3 60       	breq	80009670 <__avr32_f64_mul_res_inf>
80009606:	c3 28       	rjmp	8000966a <__avr32_f64_mul_res_nan>

80009608 <__avr32_f64_mul_op1_not_naninf>:
80009608:	58 09       	cp.w	r9,0
8000960a:	c3 30       	breq	80009670 <__avr32_f64_mul_res_inf>
8000960c:	c2 f8       	rjmp	8000966a <__avr32_f64_mul_res_nan>

8000960e <__avr32_f64_mul_res_subnormal>:
8000960e:	5c 3c       	neg	r12
80009610:	2f fc       	sub	r12,-1
80009612:	f1 bc 04 c0 	satu	r12,0x6
80009616:	e0 4c 00 20 	cp.w	r12,32
8000961a:	c1 14       	brge	8000963c <__avr32_f64_mul_res_subnormal+0x2e>
8000961c:	f8 08 11 20 	rsub	r8,r12,32
80009620:	0e 46       	or	r6,r7
80009622:	ee 0c 0a 47 	lsr	r7,r7,r12
80009626:	f4 08 09 49 	lsl	r9,r10,r8
8000962a:	12 47       	or	r7,r9
8000962c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009630:	f6 08 09 49 	lsl	r9,r11,r8
80009634:	12 4a       	or	r10,r9
80009636:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000963a:	c8 3b       	rjmp	80009540 <__avr32_f64_mul+0x7c>
8000963c:	f8 08 11 20 	rsub	r8,r12,32
80009640:	f9 b9 00 00 	moveq	r9,0
80009644:	c0 30       	breq	8000964a <__avr32_f64_mul_res_subnormal+0x3c>
80009646:	f6 08 09 49 	lsl	r9,r11,r8
8000964a:	0e 46       	or	r6,r7
8000964c:	ed ea 10 16 	or	r6,r6,r10<<0x1
80009650:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009654:	f3 ea 10 07 	or	r7,r9,r10
80009658:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000965c:	30 0b       	mov	r11,0
8000965e:	c7 1b       	rjmp	80009540 <__avr32_f64_mul+0x7c>

80009660 <__avr32_f64_mul_res_zero>:
80009660:	1c 9b       	mov	r11,lr
80009662:	e6 1b 80 00 	andh	r11,0x8000,COH
80009666:	30 0a       	mov	r10,0
80009668:	d8 22       	popm	r4-r7,pc

8000966a <__avr32_f64_mul_res_nan>:
8000966a:	3f fb       	mov	r11,-1
8000966c:	3f fa       	mov	r10,-1
8000966e:	d8 22       	popm	r4-r7,pc

80009670 <__avr32_f64_mul_res_inf>:
80009670:	f0 6b 00 00 	mov	r11,-1048576
80009674:	ed be 00 1f 	bld	lr,0x1f
80009678:	ef bb 00 1f 	bst	r11,0x1f
8000967c:	30 0a       	mov	r10,0
8000967e:	d8 22       	popm	r4-r7,pc

80009680 <__avr32_f64_mul_op1_zero>:
80009680:	f7 e9 20 0b 	eor	r11,r11,r9
80009684:	e6 1b 80 00 	andh	r11,0x8000,COH
80009688:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000968c:	e0 4c 07 ff 	cp.w	r12,2047
80009690:	5e 1c       	retne	r12
80009692:	3f fa       	mov	r10,-1
80009694:	3f fb       	mov	r11,-1
80009696:	5e fc       	retal	r12

80009698 <__avr32_f64_sub_from_add>:
80009698:	ee 19 80 00 	eorh	r9,0x8000

8000969c <__avr32_f64_sub>:
8000969c:	f7 e9 20 0c 	eor	r12,r11,r9
800096a0:	e0 86 00 ca 	brmi	80009834 <__avr32_f64_add_from_sub>
800096a4:	eb cd 40 e0 	pushm	r5-r7,lr
800096a8:	16 9c       	mov	r12,r11
800096aa:	e6 1c 80 00 	andh	r12,0x8000,COH
800096ae:	bf db       	cbr	r11,0x1f
800096b0:	bf d9       	cbr	r9,0x1f
800096b2:	10 3a       	cp.w	r10,r8
800096b4:	f2 0b 13 00 	cpc	r11,r9
800096b8:	c0 92       	brcc	800096ca <__avr32_f64_sub+0x2e>
800096ba:	16 97       	mov	r7,r11
800096bc:	12 9b       	mov	r11,r9
800096be:	0e 99       	mov	r9,r7
800096c0:	14 97       	mov	r7,r10
800096c2:	10 9a       	mov	r10,r8
800096c4:	0e 98       	mov	r8,r7
800096c6:	ee 1c 80 00 	eorh	r12,0x8000
800096ca:	f6 07 16 14 	lsr	r7,r11,0x14
800096ce:	ab 7b       	lsl	r11,0xb
800096d0:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800096d4:	ab 7a       	lsl	r10,0xb
800096d6:	bf bb       	sbr	r11,0x1f
800096d8:	f2 06 16 14 	lsr	r6,r9,0x14
800096dc:	c4 40       	breq	80009764 <__avr32_f64_sub_opL_subnormal>
800096de:	ab 79       	lsl	r9,0xb
800096e0:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800096e4:	ab 78       	lsl	r8,0xb
800096e6:	bf b9       	sbr	r9,0x1f

800096e8 <__avr32_f64_sub_opL_subnormal_done>:
800096e8:	e0 47 07 ff 	cp.w	r7,2047
800096ec:	c4 f0       	breq	8000978a <__avr32_f64_sub_opH_nan_or_inf>
800096ee:	0e 26       	rsub	r6,r7
800096f0:	c1 20       	breq	80009714 <__avr32_f64_sub_shift_done>
800096f2:	ec 05 11 20 	rsub	r5,r6,32
800096f6:	e0 46 00 20 	cp.w	r6,32
800096fa:	c7 c2       	brcc	800097f2 <__avr32_f64_sub_longshift>
800096fc:	f0 05 09 4e 	lsl	lr,r8,r5
80009700:	f2 05 09 45 	lsl	r5,r9,r5
80009704:	f0 06 0a 48 	lsr	r8,r8,r6
80009708:	f2 06 0a 49 	lsr	r9,r9,r6
8000970c:	0a 48       	or	r8,r5
8000970e:	58 0e       	cp.w	lr,0
80009710:	5f 1e       	srne	lr
80009712:	1c 48       	or	r8,lr

80009714 <__avr32_f64_sub_shift_done>:
80009714:	10 1a       	sub	r10,r8
80009716:	f6 09 01 4b 	sbc	r11,r11,r9
8000971a:	f6 06 12 00 	clz	r6,r11
8000971e:	c0 e0       	breq	8000973a <__avr32_f64_sub_longnormalize_done>
80009720:	c7 83       	brcs	80009810 <__avr32_f64_sub_longnormalize>
80009722:	ec 0e 11 20 	rsub	lr,r6,32
80009726:	f6 06 09 4b 	lsl	r11,r11,r6
8000972a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000972e:	1c 4b       	or	r11,lr
80009730:	f4 06 09 4a 	lsl	r10,r10,r6
80009734:	0c 17       	sub	r7,r6
80009736:	e0 8a 00 39 	brle	800097a8 <__avr32_f64_sub_subnormal_result>

8000973a <__avr32_f64_sub_longnormalize_done>:
8000973a:	f4 09 15 15 	lsl	r9,r10,0x15
8000973e:	ab 9a       	lsr	r10,0xb
80009740:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80009744:	ab 9b       	lsr	r11,0xb
80009746:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000974a:	18 4b       	or	r11,r12

8000974c <__avr32_f64_sub_round>:
8000974c:	fc 17 80 00 	movh	r7,0x8000
80009750:	ed ba 00 00 	bld	r10,0x0
80009754:	f7 b7 01 ff 	subne	r7,-1
80009758:	0e 39       	cp.w	r9,r7
8000975a:	5f 29       	srhs	r9
8000975c:	12 0a       	add	r10,r9
8000975e:	5c 0b       	acr	r11
80009760:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009764 <__avr32_f64_sub_opL_subnormal>:
80009764:	ab 79       	lsl	r9,0xb
80009766:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000976a:	ab 78       	lsl	r8,0xb
8000976c:	f3 e8 10 0e 	or	lr,r9,r8
80009770:	f9 b6 01 01 	movne	r6,1
80009774:	ee 0e 11 00 	rsub	lr,r7,0
80009778:	f9 b7 00 01 	moveq	r7,1
8000977c:	ef bb 00 1f 	bst	r11,0x1f
80009780:	f7 ea 10 0e 	or	lr,r11,r10
80009784:	f9 b7 00 00 	moveq	r7,0
80009788:	cb 0b       	rjmp	800096e8 <__avr32_f64_sub_opL_subnormal_done>

8000978a <__avr32_f64_sub_opH_nan_or_inf>:
8000978a:	bf db       	cbr	r11,0x1f
8000978c:	f7 ea 10 0e 	or	lr,r11,r10
80009790:	c0 81       	brne	800097a0 <__avr32_f64_sub_return_nan>
80009792:	e0 46 07 ff 	cp.w	r6,2047
80009796:	c0 50       	breq	800097a0 <__avr32_f64_sub_return_nan>
80009798:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000979c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800097a0 <__avr32_f64_sub_return_nan>:
800097a0:	3f fa       	mov	r10,-1
800097a2:	3f fb       	mov	r11,-1
800097a4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800097a8 <__avr32_f64_sub_subnormal_result>:
800097a8:	5c 37       	neg	r7
800097aa:	2f f7       	sub	r7,-1
800097ac:	f1 b7 04 c0 	satu	r7,0x6
800097b0:	e0 47 00 20 	cp.w	r7,32
800097b4:	c1 14       	brge	800097d6 <__avr32_f64_sub_subnormal_result+0x2e>
800097b6:	ee 08 11 20 	rsub	r8,r7,32
800097ba:	f4 08 09 49 	lsl	r9,r10,r8
800097be:	5f 16       	srne	r6
800097c0:	f4 07 0a 4a 	lsr	r10,r10,r7
800097c4:	0c 4a       	or	r10,r6
800097c6:	f6 08 09 49 	lsl	r9,r11,r8
800097ca:	f5 e9 10 0a 	or	r10,r10,r9
800097ce:	f4 07 0a 4b 	lsr	r11,r10,r7
800097d2:	30 07       	mov	r7,0
800097d4:	cb 3b       	rjmp	8000973a <__avr32_f64_sub_longnormalize_done>
800097d6:	ee 08 11 40 	rsub	r8,r7,64
800097da:	f6 08 09 49 	lsl	r9,r11,r8
800097de:	14 49       	or	r9,r10
800097e0:	5f 16       	srne	r6
800097e2:	f6 07 0a 4a 	lsr	r10,r11,r7
800097e6:	0c 4a       	or	r10,r6
800097e8:	30 0b       	mov	r11,0
800097ea:	30 07       	mov	r7,0
800097ec:	ca 7b       	rjmp	8000973a <__avr32_f64_sub_longnormalize_done>
800097ee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800097f2 <__avr32_f64_sub_longshift>:
800097f2:	f1 b6 04 c0 	satu	r6,0x6
800097f6:	f0 0e 17 00 	moveq	lr,r8
800097fa:	c0 40       	breq	80009802 <__avr32_f64_sub_longshift+0x10>
800097fc:	f2 05 09 4e 	lsl	lr,r9,r5
80009800:	10 4e       	or	lr,r8
80009802:	f2 06 0a 48 	lsr	r8,r9,r6
80009806:	30 09       	mov	r9,0
80009808:	58 0e       	cp.w	lr,0
8000980a:	5f 1e       	srne	lr
8000980c:	1c 48       	or	r8,lr
8000980e:	c8 3b       	rjmp	80009714 <__avr32_f64_sub_shift_done>

80009810 <__avr32_f64_sub_longnormalize>:
80009810:	f4 06 12 00 	clz	r6,r10
80009814:	f9 b7 03 00 	movlo	r7,0
80009818:	f9 b6 03 00 	movlo	r6,0
8000981c:	f9 bc 03 00 	movlo	r12,0
80009820:	f7 b6 02 e0 	subhs	r6,-32
80009824:	f4 06 09 4b 	lsl	r11,r10,r6
80009828:	30 0a       	mov	r10,0
8000982a:	0c 17       	sub	r7,r6
8000982c:	fe 9a ff be 	brle	800097a8 <__avr32_f64_sub_subnormal_result>
80009830:	c8 5b       	rjmp	8000973a <__avr32_f64_sub_longnormalize_done>
	...

80009834 <__avr32_f64_add_from_sub>:
80009834:	ee 19 80 00 	eorh	r9,0x8000

80009838 <__avr32_f64_add>:
80009838:	f7 e9 20 0c 	eor	r12,r11,r9
8000983c:	fe 96 ff 2e 	brmi	80009698 <__avr32_f64_sub_from_add>
80009840:	eb cd 40 e0 	pushm	r5-r7,lr
80009844:	16 9c       	mov	r12,r11
80009846:	e6 1c 80 00 	andh	r12,0x8000,COH
8000984a:	bf db       	cbr	r11,0x1f
8000984c:	bf d9       	cbr	r9,0x1f
8000984e:	12 3b       	cp.w	r11,r9
80009850:	c0 72       	brcc	8000985e <__avr32_f64_add+0x26>
80009852:	16 97       	mov	r7,r11
80009854:	12 9b       	mov	r11,r9
80009856:	0e 99       	mov	r9,r7
80009858:	14 97       	mov	r7,r10
8000985a:	10 9a       	mov	r10,r8
8000985c:	0e 98       	mov	r8,r7
8000985e:	30 0e       	mov	lr,0
80009860:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80009864:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80009868:	b5 ab       	sbr	r11,0x14
8000986a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000986e:	c6 20       	breq	80009932 <__avr32_f64_add_op2_subnormal>
80009870:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80009874:	b5 a9       	sbr	r9,0x14
80009876:	e0 47 07 ff 	cp.w	r7,2047
8000987a:	c2 80       	breq	800098ca <__avr32_f64_add_opH_nan_or_inf>
8000987c:	0e 26       	rsub	r6,r7
8000987e:	c1 20       	breq	800098a2 <__avr32_f64_add_shift_done>
80009880:	e0 46 00 36 	cp.w	r6,54
80009884:	c1 52       	brcc	800098ae <__avr32_f64_add_res_of_done>
80009886:	ec 05 11 20 	rsub	r5,r6,32
8000988a:	e0 46 00 20 	cp.w	r6,32
8000988e:	c3 52       	brcc	800098f8 <__avr32_f64_add_longshift>
80009890:	f0 05 09 4e 	lsl	lr,r8,r5
80009894:	f2 05 09 45 	lsl	r5,r9,r5
80009898:	f0 06 0a 48 	lsr	r8,r8,r6
8000989c:	f2 06 0a 49 	lsr	r9,r9,r6
800098a0:	0a 48       	or	r8,r5

800098a2 <__avr32_f64_add_shift_done>:
800098a2:	10 0a       	add	r10,r8
800098a4:	f6 09 00 4b 	adc	r11,r11,r9
800098a8:	ed bb 00 15 	bld	r11,0x15
800098ac:	c3 40       	breq	80009914 <__avr32_f64_add_res_of>

800098ae <__avr32_f64_add_res_of_done>:
800098ae:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800098b2:	18 4b       	or	r11,r12

800098b4 <__avr32_f64_add_round>:
800098b4:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800098b8:	18 4e       	or	lr,r12
800098ba:	ee 1e 80 00 	eorh	lr,0x8000
800098be:	f1 be 04 20 	satu	lr,0x1
800098c2:	1c 0a       	add	r10,lr
800098c4:	5c 0b       	acr	r11
800098c6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800098ca <__avr32_f64_add_opH_nan_or_inf>:
800098ca:	b5 cb       	cbr	r11,0x14
800098cc:	f7 ea 10 0e 	or	lr,r11,r10
800098d0:	c1 01       	brne	800098f0 <__avr32_f64_add_return_nan>
800098d2:	e0 46 07 ff 	cp.w	r6,2047
800098d6:	c0 30       	breq	800098dc <__avr32_f64_add_opL_nan_or_inf>
800098d8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800098dc <__avr32_f64_add_opL_nan_or_inf>:
800098dc:	b5 c9       	cbr	r9,0x14
800098de:	f3 e8 10 0e 	or	lr,r9,r8
800098e2:	c0 71       	brne	800098f0 <__avr32_f64_add_return_nan>
800098e4:	30 0a       	mov	r10,0
800098e6:	fc 1b 7f f0 	movh	r11,0x7ff0
800098ea:	18 4b       	or	r11,r12
800098ec:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800098f0 <__avr32_f64_add_return_nan>:
800098f0:	3f fa       	mov	r10,-1
800098f2:	3f fb       	mov	r11,-1
800098f4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800098f8 <__avr32_f64_add_longshift>:
800098f8:	f1 b6 04 c0 	satu	r6,0x6
800098fc:	f0 0e 17 00 	moveq	lr,r8
80009900:	c0 60       	breq	8000990c <__avr32_f64_add_longshift+0x14>
80009902:	f2 05 09 4e 	lsl	lr,r9,r5
80009906:	58 08       	cp.w	r8,0
80009908:	5f 18       	srne	r8
8000990a:	10 4e       	or	lr,r8
8000990c:	f2 06 0a 48 	lsr	r8,r9,r6
80009910:	30 09       	mov	r9,0
80009912:	cc 8b       	rjmp	800098a2 <__avr32_f64_add_shift_done>

80009914 <__avr32_f64_add_res_of>:
80009914:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80009918:	a1 9b       	lsr	r11,0x1
8000991a:	5d 0a       	ror	r10
8000991c:	5d 0e       	ror	lr
8000991e:	2f f7       	sub	r7,-1
80009920:	e0 47 07 ff 	cp.w	r7,2047
80009924:	f9 ba 00 00 	moveq	r10,0
80009928:	f9 bb 00 00 	moveq	r11,0
8000992c:	f9 be 00 00 	moveq	lr,0
80009930:	cb fb       	rjmp	800098ae <__avr32_f64_add_res_of_done>

80009932 <__avr32_f64_add_op2_subnormal>:
80009932:	30 16       	mov	r6,1
80009934:	58 07       	cp.w	r7,0
80009936:	ca 01       	brne	80009876 <__avr32_f64_add+0x3e>
80009938:	b5 cb       	cbr	r11,0x14
8000993a:	10 0a       	add	r10,r8
8000993c:	f6 09 00 4b 	adc	r11,r11,r9
80009940:	18 4b       	or	r11,r12
80009942:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	...

80009948 <__avr32_u32_to_f64>:
80009948:	f8 cb 00 00 	sub	r11,r12,0
8000994c:	30 0c       	mov	r12,0
8000994e:	c0 38       	rjmp	80009954 <__avr32_s32_to_f64+0x4>

80009950 <__avr32_s32_to_f64>:
80009950:	18 9b       	mov	r11,r12
80009952:	5c 4b       	abs	r11
80009954:	30 0a       	mov	r10,0
80009956:	5e 0b       	reteq	r11
80009958:	d4 01       	pushm	lr
8000995a:	e0 69 04 1e 	mov	r9,1054
8000995e:	f6 08 12 00 	clz	r8,r11
80009962:	c1 70       	breq	80009990 <__avr32_s32_to_f64+0x40>
80009964:	c0 c3       	brcs	8000997c <__avr32_s32_to_f64+0x2c>
80009966:	f0 0e 11 20 	rsub	lr,r8,32
8000996a:	f6 08 09 4b 	lsl	r11,r11,r8
8000996e:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009972:	1c 4b       	or	r11,lr
80009974:	f4 08 09 4a 	lsl	r10,r10,r8
80009978:	10 19       	sub	r9,r8
8000997a:	c0 b8       	rjmp	80009990 <__avr32_s32_to_f64+0x40>
8000997c:	f4 08 12 00 	clz	r8,r10
80009980:	f9 b8 03 00 	movlo	r8,0
80009984:	f7 b8 02 e0 	subhs	r8,-32
80009988:	f4 08 09 4b 	lsl	r11,r10,r8
8000998c:	30 0a       	mov	r10,0
8000998e:	10 19       	sub	r9,r8
80009990:	58 09       	cp.w	r9,0
80009992:	e0 89 00 30 	brgt	800099f2 <__avr32_s32_to_f64+0xa2>
80009996:	5c 39       	neg	r9
80009998:	2f f9       	sub	r9,-1
8000999a:	e0 49 00 36 	cp.w	r9,54
8000999e:	c0 43       	brcs	800099a6 <__avr32_s32_to_f64+0x56>
800099a0:	30 0b       	mov	r11,0
800099a2:	30 0a       	mov	r10,0
800099a4:	c2 68       	rjmp	800099f0 <__avr32_s32_to_f64+0xa0>
800099a6:	2f 69       	sub	r9,-10
800099a8:	f2 08 11 20 	rsub	r8,r9,32
800099ac:	e0 49 00 20 	cp.w	r9,32
800099b0:	c0 b2       	brcc	800099c6 <__avr32_s32_to_f64+0x76>
800099b2:	f4 08 09 4e 	lsl	lr,r10,r8
800099b6:	f6 08 09 48 	lsl	r8,r11,r8
800099ba:	f4 09 0a 4a 	lsr	r10,r10,r9
800099be:	f6 09 0a 4b 	lsr	r11,r11,r9
800099c2:	10 4b       	or	r11,r8
800099c4:	c0 88       	rjmp	800099d4 <__avr32_s32_to_f64+0x84>
800099c6:	f6 08 09 4e 	lsl	lr,r11,r8
800099ca:	14 4e       	or	lr,r10
800099cc:	16 9a       	mov	r10,r11
800099ce:	30 0b       	mov	r11,0
800099d0:	f4 09 0a 4a 	lsr	r10,r10,r9
800099d4:	ed ba 00 00 	bld	r10,0x0
800099d8:	c0 92       	brcc	800099ea <__avr32_s32_to_f64+0x9a>
800099da:	1c 7e       	tst	lr,lr
800099dc:	c0 41       	brne	800099e4 <__avr32_s32_to_f64+0x94>
800099de:	ed ba 00 01 	bld	r10,0x1
800099e2:	c0 42       	brcc	800099ea <__avr32_s32_to_f64+0x9a>
800099e4:	2f fa       	sub	r10,-1
800099e6:	f7 bb 02 ff 	subhs	r11,-1
800099ea:	5c fc       	rol	r12
800099ec:	5d 0b       	ror	r11
800099ee:	5d 0a       	ror	r10
800099f0:	d8 02       	popm	pc
800099f2:	e0 68 03 ff 	mov	r8,1023
800099f6:	ed ba 00 0b 	bld	r10,0xb
800099fa:	f7 b8 00 ff 	subeq	r8,-1
800099fe:	10 0a       	add	r10,r8
80009a00:	5c 0b       	acr	r11
80009a02:	f7 b9 03 fe 	sublo	r9,-2
80009a06:	e0 49 07 ff 	cp.w	r9,2047
80009a0a:	c0 55       	brlt	80009a14 <__avr32_s32_to_f64+0xc4>
80009a0c:	30 0a       	mov	r10,0
80009a0e:	fc 1b ff e0 	movh	r11,0xffe0
80009a12:	c0 c8       	rjmp	80009a2a <__floatsidf_return_op1>
80009a14:	ed bb 00 1f 	bld	r11,0x1f
80009a18:	f7 b9 01 01 	subne	r9,1
80009a1c:	ab 9a       	lsr	r10,0xb
80009a1e:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80009a22:	a1 7b       	lsl	r11,0x1
80009a24:	ab 9b       	lsr	r11,0xb
80009a26:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80009a2a <__floatsidf_return_op1>:
80009a2a:	a1 7c       	lsl	r12,0x1
80009a2c:	5d 0b       	ror	r11
80009a2e:	d8 02       	popm	pc

80009a30 <__avr32_f32_div>:
80009a30:	f7 ec 20 08 	eor	r8,r11,r12
80009a34:	a1 7c       	lsl	r12,0x1
80009a36:	a1 7b       	lsl	r11,0x1
80009a38:	c7 a0       	breq	80009b2c <__divsf_return_op1+0x16>
80009a3a:	18 7c       	tst	r12,r12
80009a3c:	f9 b9 00 00 	moveq	r9,0
80009a40:	c0 90       	breq	80009a52 <__avr32_f32_div+0x22>
80009a42:	f8 09 16 18 	lsr	r9,r12,0x18
80009a46:	c7 e0       	breq	80009b42 <__divsf_return_op1+0x2c>
80009a48:	e0 49 00 ff 	cp.w	r9,255
80009a4c:	c6 82       	brcc	80009b1c <__divsf_return_op1+0x6>
80009a4e:	a7 7c       	lsl	r12,0x7
80009a50:	bf bc       	sbr	r12,0x1f
80009a52:	f6 0a 16 18 	lsr	r10,r11,0x18
80009a56:	c7 e0       	breq	80009b52 <__divsf_return_op1+0x3c>
80009a58:	e0 4a 00 ff 	cp.w	r10,255
80009a5c:	c6 62       	brcc	80009b28 <__divsf_return_op1+0x12>
80009a5e:	a7 7b       	lsl	r11,0x7
80009a60:	bf bb       	sbr	r11,0x1f
80009a62:	58 09       	cp.w	r9,0
80009a64:	f5 bc 00 00 	subfeq	r12,0
80009a68:	5e 0d       	reteq	0
80009a6a:	1a d5       	st.w	--sp,r5
80009a6c:	bb 27       	st.d	--sp,r6
80009a6e:	14 19       	sub	r9,r10
80009a70:	28 19       	sub	r9,-127
80009a72:	fc 1a 80 00 	movh	r10,0x8000
80009a76:	a3 8c       	lsr	r12,0x2
80009a78:	f6 05 16 02 	lsr	r5,r11,0x2
80009a7c:	f4 0b 16 01 	lsr	r11,r10,0x1
80009a80:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80009a84:	5c d6       	com	r6
80009a86:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80009a8a:	f6 05 06 46 	mulu.d	r6,r11,r5
80009a8e:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80009a92:	f6 07 06 46 	mulu.d	r6,r11,r7
80009a96:	ee 0b 15 02 	lsl	r11,r7,0x2
80009a9a:	f6 05 06 46 	mulu.d	r6,r11,r5
80009a9e:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80009aa2:	f6 07 06 46 	mulu.d	r6,r11,r7
80009aa6:	ee 0b 15 02 	lsl	r11,r7,0x2
80009aaa:	f6 05 06 46 	mulu.d	r6,r11,r5
80009aae:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80009ab2:	f6 07 06 46 	mulu.d	r6,r11,r7
80009ab6:	ee 0b 15 02 	lsl	r11,r7,0x2
80009aba:	f6 05 06 46 	mulu.d	r6,r11,r5
80009abe:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80009ac2:	f6 07 06 46 	mulu.d	r6,r11,r7
80009ac6:	ee 0b 15 02 	lsl	r11,r7,0x2
80009aca:	f6 0c 06 46 	mulu.d	r6,r11,r12
80009ace:	a5 8c       	lsr	r12,0x4
80009ad0:	ed b7 00 1c 	bld	r7,0x1c
80009ad4:	c0 40       	breq	80009adc <__avr32_f32_div+0xac>
80009ad6:	a1 77       	lsl	r7,0x1
80009ad8:	20 19       	sub	r9,1
80009ada:	a1 7c       	lsl	r12,0x1
80009adc:	58 09       	cp.w	r9,0
80009ade:	e0 8a 00 42 	brle	80009b62 <__avr32_f32_div_res_subnormal>
80009ae2:	e0 17 ff e0 	andl	r7,0xffe0
80009ae6:	e8 17 00 10 	orl	r7,0x10
80009aea:	ea 07 06 4a 	mulu.d	r10,r5,r7
80009aee:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80009af2:	58 0a       	cp.w	r10,0

80009af4 <__avr32_f32_div_round_subnormal>:
80009af4:	f8 0b 13 00 	cpc	r11,r12
80009af8:	5f 3b       	srlo	r11
80009afa:	ea 0b 17 00 	moveq	r11,r5
80009afe:	ee 0c 16 05 	lsr	r12,r7,0x5
80009b02:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
80009b06:	bb 07       	ld.d	r6,sp++
80009b08:	1b 05       	ld.w	r5,sp++
80009b0a:	ed b8 00 1f 	bld	r8,0x1f
80009b0e:	ef bc 00 1f 	bst	r12,0x1f
80009b12:	16 0c       	add	r12,r11
80009b14:	5e fc       	retal	r12

80009b16 <__divsf_return_op1>:
80009b16:	a1 78       	lsl	r8,0x1
80009b18:	5d 0c       	ror	r12
80009b1a:	5e fc       	retal	r12
80009b1c:	5e 1e       	retne	-1
80009b1e:	fc 19 ff 00 	movh	r9,0xff00
80009b22:	12 3b       	cp.w	r11,r9
80009b24:	cf 93       	brcs	80009b16 <__divsf_return_op1>
80009b26:	5e fe       	retal	-1
80009b28:	5e 0d       	reteq	0
80009b2a:	5e fe       	retal	-1
80009b2c:	18 7c       	tst	r12,r12
80009b2e:	5e 0e       	reteq	-1
80009b30:	f8 09 16 18 	lsr	r9,r12,0x18
80009b34:	c0 70       	breq	80009b42 <__divsf_return_op1+0x2c>
80009b36:	e0 49 00 ff 	cp.w	r9,255
80009b3a:	cf 12       	brcc	80009b1c <__divsf_return_op1+0x6>
80009b3c:	fc 1c ff 00 	movh	r12,0xff00
80009b40:	ce bb       	rjmp	80009b16 <__divsf_return_op1>
80009b42:	a7 7c       	lsl	r12,0x7
80009b44:	f8 09 12 00 	clz	r9,r12
80009b48:	f8 09 09 4c 	lsl	r12,r12,r9
80009b4c:	f2 09 11 01 	rsub	r9,r9,1
80009b50:	c8 1b       	rjmp	80009a52 <__avr32_f32_div+0x22>
80009b52:	a7 7b       	lsl	r11,0x7
80009b54:	f6 0a 12 00 	clz	r10,r11
80009b58:	f6 0a 09 4b 	lsl	r11,r11,r10
80009b5c:	f4 0a 11 01 	rsub	r10,r10,1
80009b60:	c8 5b       	rjmp	80009a6a <__avr32_f32_div+0x3a>

80009b62 <__avr32_f32_div_res_subnormal>:
80009b62:	5c 39       	neg	r9
80009b64:	2f f9       	sub	r9,-1
80009b66:	f1 b9 04 a0 	satu	r9,0x5
80009b6a:	f2 0a 11 20 	rsub	r10,r9,32
80009b6e:	ee 09 0a 47 	lsr	r7,r7,r9
80009b72:	f8 0a 09 46 	lsl	r6,r12,r10
80009b76:	f8 09 0a 4c 	lsr	r12,r12,r9
80009b7a:	e0 17 ff e0 	andl	r7,0xffe0
80009b7e:	e8 17 00 10 	orl	r7,0x10
80009b82:	ea 07 06 4a 	mulu.d	r10,r5,r7
80009b86:	30 09       	mov	r9,0
80009b88:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80009b8c:	0c 3a       	cp.w	r10,r6
80009b8e:	cb 3b       	rjmp	80009af4 <__avr32_f32_div_round_subnormal>

80009b90 <__avr32_f64_to_f32>:
80009b90:	f6 09 15 01 	lsl	r9,r11,0x1
80009b94:	b5 99       	lsr	r9,0x15
80009b96:	5e 0d       	reteq	0
80009b98:	f6 08 15 0a 	lsl	r8,r11,0xa
80009b9c:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80009ba0:	ab 6a       	lsl	r10,0xa
80009ba2:	5c 3a       	neg	r10
80009ba4:	5c fc       	rol	r12
80009ba6:	e0 49 07 ff 	cp.w	r9,2047
80009baa:	c1 a0       	breq	80009bde <__truncdfsf_return_op1+0x6>
80009bac:	e0 29 03 80 	sub	r9,896
80009bb0:	bf bc       	sbr	r12,0x1f
80009bb2:	58 09       	cp.w	r9,0
80009bb4:	e0 8a 00 1a 	brle	80009be8 <__truncdfsf_return_op1+0x10>
80009bb8:	37 fa       	mov	r10,127
80009bba:	ed bc 00 08 	bld	r12,0x8
80009bbe:	f7 ba 00 ff 	subeq	r10,-1
80009bc2:	14 0c       	add	r12,r10
80009bc4:	f7 b9 03 fe 	sublo	r9,-2
80009bc8:	ed bc 00 1f 	bld	r12,0x1f
80009bcc:	f7 b9 01 01 	subne	r9,1
80009bd0:	f8 0c 16 07 	lsr	r12,r12,0x7
80009bd4:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80009bd8 <__truncdfsf_return_op1>:
80009bd8:	a1 7b       	lsl	r11,0x1
80009bda:	5d 0c       	ror	r12
80009bdc:	5e fc       	retal	r12
80009bde:	bf dc       	cbr	r12,0x1f
80009be0:	5e 1e       	retne	-1
80009be2:	fc 1c 7f 80 	movh	r12,0x7f80
80009be6:	5e fc       	retal	r12
80009be8:	f2 09 11 01 	rsub	r9,r9,1
80009bec:	59 99       	cp.w	r9,25
80009bee:	f9 bc 02 00 	movhs	r12,0
80009bf2:	c1 32       	brcc	80009c18 <__truncdfsf_return_op1+0x40>
80009bf4:	f2 0a 11 20 	rsub	r10,r9,32
80009bf8:	f8 0a 09 4a 	lsl	r10,r12,r10
80009bfc:	5f 1a       	srne	r10
80009bfe:	f8 09 0a 4c 	lsr	r12,r12,r9
80009c02:	14 4c       	or	r12,r10
80009c04:	37 fa       	mov	r10,127
80009c06:	ed bc 00 08 	bld	r12,0x8
80009c0a:	f7 ba 00 ff 	subeq	r10,-1
80009c0e:	14 0c       	add	r12,r10
80009c10:	f8 0c 16 07 	lsr	r12,r12,0x7
80009c14:	a1 7b       	lsl	r11,0x1
80009c16:	5d 0c       	ror	r12
80009c18:	5e fc       	retal	r12

80009c1a <__avr32_udiv64>:
80009c1a:	d4 31       	pushm	r0-r7,lr
80009c1c:	1a 97       	mov	r7,sp
80009c1e:	20 3d       	sub	sp,12
80009c20:	10 9c       	mov	r12,r8
80009c22:	12 9e       	mov	lr,r9
80009c24:	14 93       	mov	r3,r10
80009c26:	58 09       	cp.w	r9,0
80009c28:	e0 81 00 bd 	brne	80009da2 <__avr32_udiv64+0x188>
80009c2c:	16 38       	cp.w	r8,r11
80009c2e:	e0 88 00 40 	brls	80009cae <__avr32_udiv64+0x94>
80009c32:	f0 08 12 00 	clz	r8,r8
80009c36:	c0 d0       	breq	80009c50 <__avr32_udiv64+0x36>
80009c38:	f6 08 09 4b 	lsl	r11,r11,r8
80009c3c:	f0 09 11 20 	rsub	r9,r8,32
80009c40:	f8 08 09 4c 	lsl	r12,r12,r8
80009c44:	f4 09 0a 49 	lsr	r9,r10,r9
80009c48:	f4 08 09 43 	lsl	r3,r10,r8
80009c4c:	f3 eb 10 0b 	or	r11,r9,r11
80009c50:	f8 0e 16 10 	lsr	lr,r12,0x10
80009c54:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80009c58:	f6 0e 0d 00 	divu	r0,r11,lr
80009c5c:	e6 0b 16 10 	lsr	r11,r3,0x10
80009c60:	00 99       	mov	r9,r0
80009c62:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009c66:	e0 0a 02 48 	mul	r8,r0,r10
80009c6a:	10 3b       	cp.w	r11,r8
80009c6c:	c0 a2       	brcc	80009c80 <__avr32_udiv64+0x66>
80009c6e:	20 19       	sub	r9,1
80009c70:	18 0b       	add	r11,r12
80009c72:	18 3b       	cp.w	r11,r12
80009c74:	c0 63       	brcs	80009c80 <__avr32_udiv64+0x66>
80009c76:	10 3b       	cp.w	r11,r8
80009c78:	f7 b9 03 01 	sublo	r9,1
80009c7c:	f7 dc e3 0b 	addcs	r11,r11,r12
80009c80:	f6 08 01 01 	sub	r1,r11,r8
80009c84:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80009c88:	e2 0e 0d 00 	divu	r0,r1,lr
80009c8c:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80009c90:	00 98       	mov	r8,r0
80009c92:	e0 0a 02 4a 	mul	r10,r0,r10
80009c96:	14 33       	cp.w	r3,r10
80009c98:	c0 82       	brcc	80009ca8 <__avr32_udiv64+0x8e>
80009c9a:	20 18       	sub	r8,1
80009c9c:	18 03       	add	r3,r12
80009c9e:	18 33       	cp.w	r3,r12
80009ca0:	c0 43       	brcs	80009ca8 <__avr32_udiv64+0x8e>
80009ca2:	14 33       	cp.w	r3,r10
80009ca4:	f7 b8 03 01 	sublo	r8,1
80009ca8:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80009cac:	cd f8       	rjmp	80009e6a <__avr32_udiv64+0x250>
80009cae:	58 08       	cp.w	r8,0
80009cb0:	c0 51       	brne	80009cba <__avr32_udiv64+0xa0>
80009cb2:	30 19       	mov	r9,1
80009cb4:	f2 08 0d 08 	divu	r8,r9,r8
80009cb8:	10 9c       	mov	r12,r8
80009cba:	f8 06 12 00 	clz	r6,r12
80009cbe:	c0 41       	brne	80009cc6 <__avr32_udiv64+0xac>
80009cc0:	18 1b       	sub	r11,r12
80009cc2:	30 19       	mov	r9,1
80009cc4:	c4 08       	rjmp	80009d44 <__avr32_udiv64+0x12a>
80009cc6:	ec 01 11 20 	rsub	r1,r6,32
80009cca:	f4 01 0a 49 	lsr	r9,r10,r1
80009cce:	f8 06 09 4c 	lsl	r12,r12,r6
80009cd2:	f6 06 09 48 	lsl	r8,r11,r6
80009cd6:	f6 01 0a 41 	lsr	r1,r11,r1
80009cda:	f3 e8 10 08 	or	r8,r9,r8
80009cde:	f8 03 16 10 	lsr	r3,r12,0x10
80009ce2:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009ce6:	e2 03 0d 00 	divu	r0,r1,r3
80009cea:	f0 0b 16 10 	lsr	r11,r8,0x10
80009cee:	00 9e       	mov	lr,r0
80009cf0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009cf4:	e0 05 02 49 	mul	r9,r0,r5
80009cf8:	12 3b       	cp.w	r11,r9
80009cfa:	c0 a2       	brcc	80009d0e <__avr32_udiv64+0xf4>
80009cfc:	20 1e       	sub	lr,1
80009cfe:	18 0b       	add	r11,r12
80009d00:	18 3b       	cp.w	r11,r12
80009d02:	c0 63       	brcs	80009d0e <__avr32_udiv64+0xf4>
80009d04:	12 3b       	cp.w	r11,r9
80009d06:	f7 be 03 01 	sublo	lr,1
80009d0a:	f7 dc e3 0b 	addcs	r11,r11,r12
80009d0e:	12 1b       	sub	r11,r9
80009d10:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80009d14:	f6 03 0d 02 	divu	r2,r11,r3
80009d18:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80009d1c:	04 99       	mov	r9,r2
80009d1e:	e4 05 02 4b 	mul	r11,r2,r5
80009d22:	16 38       	cp.w	r8,r11
80009d24:	c0 a2       	brcc	80009d38 <__avr32_udiv64+0x11e>
80009d26:	20 19       	sub	r9,1
80009d28:	18 08       	add	r8,r12
80009d2a:	18 38       	cp.w	r8,r12
80009d2c:	c0 63       	brcs	80009d38 <__avr32_udiv64+0x11e>
80009d2e:	16 38       	cp.w	r8,r11
80009d30:	f7 b9 03 01 	sublo	r9,1
80009d34:	f1 dc e3 08 	addcs	r8,r8,r12
80009d38:	f4 06 09 43 	lsl	r3,r10,r6
80009d3c:	f0 0b 01 0b 	sub	r11,r8,r11
80009d40:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80009d44:	f8 06 16 10 	lsr	r6,r12,0x10
80009d48:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80009d4c:	f6 06 0d 00 	divu	r0,r11,r6
80009d50:	e6 0b 16 10 	lsr	r11,r3,0x10
80009d54:	00 9a       	mov	r10,r0
80009d56:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009d5a:	e0 0e 02 48 	mul	r8,r0,lr
80009d5e:	10 3b       	cp.w	r11,r8
80009d60:	c0 a2       	brcc	80009d74 <__avr32_udiv64+0x15a>
80009d62:	20 1a       	sub	r10,1
80009d64:	18 0b       	add	r11,r12
80009d66:	18 3b       	cp.w	r11,r12
80009d68:	c0 63       	brcs	80009d74 <__avr32_udiv64+0x15a>
80009d6a:	10 3b       	cp.w	r11,r8
80009d6c:	f7 ba 03 01 	sublo	r10,1
80009d70:	f7 dc e3 0b 	addcs	r11,r11,r12
80009d74:	f6 08 01 01 	sub	r1,r11,r8
80009d78:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80009d7c:	e2 06 0d 00 	divu	r0,r1,r6
80009d80:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80009d84:	00 98       	mov	r8,r0
80009d86:	e0 0e 02 4b 	mul	r11,r0,lr
80009d8a:	16 33       	cp.w	r3,r11
80009d8c:	c0 82       	brcc	80009d9c <__avr32_udiv64+0x182>
80009d8e:	20 18       	sub	r8,1
80009d90:	18 03       	add	r3,r12
80009d92:	18 33       	cp.w	r3,r12
80009d94:	c0 43       	brcs	80009d9c <__avr32_udiv64+0x182>
80009d96:	16 33       	cp.w	r3,r11
80009d98:	f7 b8 03 01 	sublo	r8,1
80009d9c:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80009da0:	c6 98       	rjmp	80009e72 <__avr32_udiv64+0x258>
80009da2:	16 39       	cp.w	r9,r11
80009da4:	e0 8b 00 65 	brhi	80009e6e <__avr32_udiv64+0x254>
80009da8:	f2 09 12 00 	clz	r9,r9
80009dac:	c0 b1       	brne	80009dc2 <__avr32_udiv64+0x1a8>
80009dae:	10 3a       	cp.w	r10,r8
80009db0:	5f 2a       	srhs	r10
80009db2:	1c 3b       	cp.w	r11,lr
80009db4:	5f b8       	srhi	r8
80009db6:	10 4a       	or	r10,r8
80009db8:	f2 0a 18 00 	cp.b	r10,r9
80009dbc:	c5 90       	breq	80009e6e <__avr32_udiv64+0x254>
80009dbe:	30 18       	mov	r8,1
80009dc0:	c5 98       	rjmp	80009e72 <__avr32_udiv64+0x258>
80009dc2:	f0 09 09 46 	lsl	r6,r8,r9
80009dc6:	f2 03 11 20 	rsub	r3,r9,32
80009dca:	fc 09 09 4e 	lsl	lr,lr,r9
80009dce:	f0 03 0a 48 	lsr	r8,r8,r3
80009dd2:	f6 09 09 4c 	lsl	r12,r11,r9
80009dd6:	f4 03 0a 42 	lsr	r2,r10,r3
80009dda:	ef 46 ff f4 	st.w	r7[-12],r6
80009dde:	f6 03 0a 43 	lsr	r3,r11,r3
80009de2:	18 42       	or	r2,r12
80009de4:	f1 ee 10 0c 	or	r12,r8,lr
80009de8:	f8 01 16 10 	lsr	r1,r12,0x10
80009dec:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009df0:	e6 01 0d 04 	divu	r4,r3,r1
80009df4:	e4 03 16 10 	lsr	r3,r2,0x10
80009df8:	08 9e       	mov	lr,r4
80009dfa:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80009dfe:	e8 06 02 48 	mul	r8,r4,r6
80009e02:	10 33       	cp.w	r3,r8
80009e04:	c0 a2       	brcc	80009e18 <__avr32_udiv64+0x1fe>
80009e06:	20 1e       	sub	lr,1
80009e08:	18 03       	add	r3,r12
80009e0a:	18 33       	cp.w	r3,r12
80009e0c:	c0 63       	brcs	80009e18 <__avr32_udiv64+0x1fe>
80009e0e:	10 33       	cp.w	r3,r8
80009e10:	f7 be 03 01 	sublo	lr,1
80009e14:	e7 dc e3 03 	addcs	r3,r3,r12
80009e18:	10 13       	sub	r3,r8
80009e1a:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80009e1e:	e6 01 0d 00 	divu	r0,r3,r1
80009e22:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009e26:	00 98       	mov	r8,r0
80009e28:	e0 06 02 46 	mul	r6,r0,r6
80009e2c:	0c 3b       	cp.w	r11,r6
80009e2e:	c0 a2       	brcc	80009e42 <__avr32_udiv64+0x228>
80009e30:	20 18       	sub	r8,1
80009e32:	18 0b       	add	r11,r12
80009e34:	18 3b       	cp.w	r11,r12
80009e36:	c0 63       	brcs	80009e42 <__avr32_udiv64+0x228>
80009e38:	0c 3b       	cp.w	r11,r6
80009e3a:	f7 dc e3 0b 	addcs	r11,r11,r12
80009e3e:	f7 b8 03 01 	sublo	r8,1
80009e42:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80009e46:	ee f4 ff f4 	ld.w	r4,r7[-12]
80009e4a:	0c 1b       	sub	r11,r6
80009e4c:	f0 04 06 42 	mulu.d	r2,r8,r4
80009e50:	06 95       	mov	r5,r3
80009e52:	16 35       	cp.w	r5,r11
80009e54:	e0 8b 00 0a 	brhi	80009e68 <__avr32_udiv64+0x24e>
80009e58:	5f 0b       	sreq	r11
80009e5a:	f4 09 09 49 	lsl	r9,r10,r9
80009e5e:	12 32       	cp.w	r2,r9
80009e60:	5f b9       	srhi	r9
80009e62:	f7 e9 00 09 	and	r9,r11,r9
80009e66:	c0 60       	breq	80009e72 <__avr32_udiv64+0x258>
80009e68:	20 18       	sub	r8,1
80009e6a:	30 09       	mov	r9,0
80009e6c:	c0 38       	rjmp	80009e72 <__avr32_udiv64+0x258>
80009e6e:	30 09       	mov	r9,0
80009e70:	12 98       	mov	r8,r9
80009e72:	10 9a       	mov	r10,r8
80009e74:	12 93       	mov	r3,r9
80009e76:	10 92       	mov	r2,r8
80009e78:	12 9b       	mov	r11,r9
80009e7a:	2f dd       	sub	sp,-12
80009e7c:	d8 32       	popm	r0-r7,pc

80009e7e <memcpy>:
80009e7e:	58 8a       	cp.w	r10,8
80009e80:	c2 f5       	brlt	80009ede <memcpy+0x60>
80009e82:	f9 eb 10 09 	or	r9,r12,r11
80009e86:	e2 19 00 03 	andl	r9,0x3,COH
80009e8a:	e0 81 00 97 	brne	80009fb8 <memcpy+0x13a>
80009e8e:	e0 4a 00 20 	cp.w	r10,32
80009e92:	c3 b4       	brge	80009f08 <memcpy+0x8a>
80009e94:	f4 08 14 02 	asr	r8,r10,0x2
80009e98:	f0 09 11 08 	rsub	r9,r8,8
80009e9c:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80009ea0:	76 69       	ld.w	r9,r11[0x18]
80009ea2:	99 69       	st.w	r12[0x18],r9
80009ea4:	76 59       	ld.w	r9,r11[0x14]
80009ea6:	99 59       	st.w	r12[0x14],r9
80009ea8:	76 49       	ld.w	r9,r11[0x10]
80009eaa:	99 49       	st.w	r12[0x10],r9
80009eac:	76 39       	ld.w	r9,r11[0xc]
80009eae:	99 39       	st.w	r12[0xc],r9
80009eb0:	76 29       	ld.w	r9,r11[0x8]
80009eb2:	99 29       	st.w	r12[0x8],r9
80009eb4:	76 19       	ld.w	r9,r11[0x4]
80009eb6:	99 19       	st.w	r12[0x4],r9
80009eb8:	76 09       	ld.w	r9,r11[0x0]
80009eba:	99 09       	st.w	r12[0x0],r9
80009ebc:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80009ec0:	f8 08 00 28 	add	r8,r12,r8<<0x2
80009ec4:	e0 1a 00 03 	andl	r10,0x3
80009ec8:	f4 0a 11 04 	rsub	r10,r10,4
80009ecc:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009ed0:	17 a9       	ld.ub	r9,r11[0x2]
80009ed2:	b0 a9       	st.b	r8[0x2],r9
80009ed4:	17 99       	ld.ub	r9,r11[0x1]
80009ed6:	b0 99       	st.b	r8[0x1],r9
80009ed8:	17 89       	ld.ub	r9,r11[0x0]
80009eda:	b0 89       	st.b	r8[0x0],r9
80009edc:	5e fc       	retal	r12
80009ede:	f4 0a 11 09 	rsub	r10,r10,9
80009ee2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009ee6:	17 f9       	ld.ub	r9,r11[0x7]
80009ee8:	b8 f9       	st.b	r12[0x7],r9
80009eea:	17 e9       	ld.ub	r9,r11[0x6]
80009eec:	b8 e9       	st.b	r12[0x6],r9
80009eee:	17 d9       	ld.ub	r9,r11[0x5]
80009ef0:	b8 d9       	st.b	r12[0x5],r9
80009ef2:	17 c9       	ld.ub	r9,r11[0x4]
80009ef4:	b8 c9       	st.b	r12[0x4],r9
80009ef6:	17 b9       	ld.ub	r9,r11[0x3]
80009ef8:	b8 b9       	st.b	r12[0x3],r9
80009efa:	17 a9       	ld.ub	r9,r11[0x2]
80009efc:	b8 a9       	st.b	r12[0x2],r9
80009efe:	17 99       	ld.ub	r9,r11[0x1]
80009f00:	b8 99       	st.b	r12[0x1],r9
80009f02:	17 89       	ld.ub	r9,r11[0x0]
80009f04:	b8 89       	st.b	r12[0x0],r9
80009f06:	5e fc       	retal	r12
80009f08:	eb cd 40 c0 	pushm	r6-r7,lr
80009f0c:	18 99       	mov	r9,r12
80009f0e:	22 0a       	sub	r10,32
80009f10:	b7 07       	ld.d	r6,r11++
80009f12:	b3 26       	st.d	r9++,r6
80009f14:	b7 07       	ld.d	r6,r11++
80009f16:	b3 26       	st.d	r9++,r6
80009f18:	b7 07       	ld.d	r6,r11++
80009f1a:	b3 26       	st.d	r9++,r6
80009f1c:	b7 07       	ld.d	r6,r11++
80009f1e:	b3 26       	st.d	r9++,r6
80009f20:	22 0a       	sub	r10,32
80009f22:	cf 74       	brge	80009f10 <memcpy+0x92>
80009f24:	2f 0a       	sub	r10,-16
80009f26:	c0 65       	brlt	80009f32 <memcpy+0xb4>
80009f28:	b7 07       	ld.d	r6,r11++
80009f2a:	b3 26       	st.d	r9++,r6
80009f2c:	b7 07       	ld.d	r6,r11++
80009f2e:	b3 26       	st.d	r9++,r6
80009f30:	21 0a       	sub	r10,16
80009f32:	5c 3a       	neg	r10
80009f34:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80009f38:	d7 03       	nop
80009f3a:	d7 03       	nop
80009f3c:	f7 36 00 0e 	ld.ub	r6,r11[14]
80009f40:	f3 66 00 0e 	st.b	r9[14],r6
80009f44:	f7 36 00 0d 	ld.ub	r6,r11[13]
80009f48:	f3 66 00 0d 	st.b	r9[13],r6
80009f4c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80009f50:	f3 66 00 0c 	st.b	r9[12],r6
80009f54:	f7 36 00 0b 	ld.ub	r6,r11[11]
80009f58:	f3 66 00 0b 	st.b	r9[11],r6
80009f5c:	f7 36 00 0a 	ld.ub	r6,r11[10]
80009f60:	f3 66 00 0a 	st.b	r9[10],r6
80009f64:	f7 36 00 09 	ld.ub	r6,r11[9]
80009f68:	f3 66 00 09 	st.b	r9[9],r6
80009f6c:	f7 36 00 08 	ld.ub	r6,r11[8]
80009f70:	f3 66 00 08 	st.b	r9[8],r6
80009f74:	f7 36 00 07 	ld.ub	r6,r11[7]
80009f78:	f3 66 00 07 	st.b	r9[7],r6
80009f7c:	f7 36 00 06 	ld.ub	r6,r11[6]
80009f80:	f3 66 00 06 	st.b	r9[6],r6
80009f84:	f7 36 00 05 	ld.ub	r6,r11[5]
80009f88:	f3 66 00 05 	st.b	r9[5],r6
80009f8c:	f7 36 00 04 	ld.ub	r6,r11[4]
80009f90:	f3 66 00 04 	st.b	r9[4],r6
80009f94:	f7 36 00 03 	ld.ub	r6,r11[3]
80009f98:	f3 66 00 03 	st.b	r9[3],r6
80009f9c:	f7 36 00 02 	ld.ub	r6,r11[2]
80009fa0:	f3 66 00 02 	st.b	r9[2],r6
80009fa4:	f7 36 00 01 	ld.ub	r6,r11[1]
80009fa8:	f3 66 00 01 	st.b	r9[1],r6
80009fac:	f7 36 00 00 	ld.ub	r6,r11[0]
80009fb0:	f3 66 00 00 	st.b	r9[0],r6
80009fb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009fb8:	20 1a       	sub	r10,1
80009fba:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80009fbe:	f8 0a 0b 09 	st.b	r12[r10],r9
80009fc2:	cf b1       	brne	80009fb8 <memcpy+0x13a>
80009fc4:	5e fc       	retal	r12

80009fc6 <memset>:
80009fc6:	18 98       	mov	r8,r12
80009fc8:	c0 38       	rjmp	80009fce <memset+0x8>
80009fca:	10 cb       	st.b	r8++,r11
80009fcc:	20 1a       	sub	r10,1
80009fce:	58 0a       	cp.w	r10,0
80009fd0:	cf d1       	brne	80009fca <memset+0x4>
80009fd2:	5e fc       	retal	r12

80009fd4 <strncpy>:
80009fd4:	30 08       	mov	r8,0
80009fd6:	10 3a       	cp.w	r10,r8
80009fd8:	5e 0c       	reteq	r12
80009fda:	f6 08 07 09 	ld.ub	r9,r11[r8]
80009fde:	f8 08 0b 09 	st.b	r12[r8],r9
80009fe2:	2f f8       	sub	r8,-1
80009fe4:	58 09       	cp.w	r9,0
80009fe6:	cf 81       	brne	80009fd6 <strncpy+0x2>
80009fe8:	10 3a       	cp.w	r10,r8
80009fea:	5e 0c       	reteq	r12
80009fec:	f8 08 0b 09 	st.b	r12[r8],r9
80009ff0:	2f f8       	sub	r8,-1
80009ff2:	cf bb       	rjmp	80009fe8 <strncpy+0x14>

Disassembly of section .exception:

8000a000 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000a000:	c0 08       	rjmp	8000a000 <_evba>
	...

8000a004 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000a004:	c0 08       	rjmp	8000a004 <_handle_TLB_Multiple_Hit>
	...

8000a008 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000a008:	c0 08       	rjmp	8000a008 <_handle_Bus_Error_Data_Fetch>
	...

8000a00c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000a00c:	c0 08       	rjmp	8000a00c <_handle_Bus_Error_Instruction_Fetch>
	...

8000a010 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000a010:	c0 08       	rjmp	8000a010 <_handle_NMI>
	...

8000a014 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000a014:	c0 08       	rjmp	8000a014 <_handle_Instruction_Address>
	...

8000a018 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000a018:	c0 08       	rjmp	8000a018 <_handle_ITLB_Protection>
	...

8000a01c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000a01c:	c0 08       	rjmp	8000a01c <_handle_Breakpoint>
	...

8000a020 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000a020:	c0 08       	rjmp	8000a020 <_handle_Illegal_Opcode>
	...

8000a024 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000a024:	c0 08       	rjmp	8000a024 <_handle_Unimplemented_Instruction>
	...

8000a028 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000a028:	c0 08       	rjmp	8000a028 <_handle_Privilege_Violation>
	...

8000a02c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000a02c:	c0 08       	rjmp	8000a02c <_handle_Floating_Point>
	...

8000a030 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000a030:	c0 08       	rjmp	8000a030 <_handle_Coprocessor_Absent>
	...

8000a034 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000a034:	c0 08       	rjmp	8000a034 <_handle_Data_Address_Read>
	...

8000a038 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000a038:	c0 08       	rjmp	8000a038 <_handle_Data_Address_Write>
	...

8000a03c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000a03c:	c0 08       	rjmp	8000a03c <_handle_DTLB_Protection_Read>
	...

8000a040 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000a040:	c0 08       	rjmp	8000a040 <_handle_DTLB_Protection_Write>
	...

8000a044 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000a044:	c0 08       	rjmp	8000a044 <_handle_DTLB_Modified>
	...

8000a050 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000a050:	c0 08       	rjmp	8000a050 <_handle_ITLB_Miss>
	...

8000a060 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000a060:	c0 08       	rjmp	8000a060 <_handle_DTLB_Miss_Read>
	...

8000a070 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000a070:	c0 08       	rjmp	8000a070 <_handle_DTLB_Miss_Write>
	...

8000a100 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000a100:	c0 08       	rjmp	8000a100 <_handle_Supervisor_Call>
	...

8000a104 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a104:	30 0c       	mov	r12,0
8000a106:	f0 1f 00 0e 	mcall	8000a13c <_int3+0xe>
8000a10a:	58 0c       	cp.w	r12,0
8000a10c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a110:	d6 03       	rete

8000a112 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a112:	30 1c       	mov	r12,1
8000a114:	f0 1f 00 0a 	mcall	8000a13c <_int3+0xe>
8000a118:	58 0c       	cp.w	r12,0
8000a11a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a11e:	d6 03       	rete

8000a120 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a120:	30 2c       	mov	r12,2
8000a122:	f0 1f 00 07 	mcall	8000a13c <_int3+0xe>
8000a126:	58 0c       	cp.w	r12,0
8000a128:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a12c:	d6 03       	rete

8000a12e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a12e:	30 3c       	mov	r12,3
8000a130:	f0 1f 00 03 	mcall	8000a13c <_int3+0xe>
8000a134:	58 0c       	cp.w	r12,0
8000a136:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a13a:	d6 03       	rete
8000a13c:	80 00       	ld.sh	r0,r0[0x0]
8000a13e:	48 94       	lddpc	r4,8000a160 <_int3+0x32>
	...
