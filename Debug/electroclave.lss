
electroclave.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002010  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000080a8  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000a200  8000a200  0000a600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000250  8000a400  8000a400  0000a800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000000a9  00000008  8000a650  0000ac08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000007  000000b1  8000a6f9  0000acb1  2**0
                  ALLOC
  8 .bss          00000aa0  000000b8  000000b8  00000000  2**2
                  ALLOC
  9 .heap         0000e4a8  00000b58  00000b58  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000acb1  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000ae8  00000000  00000000  0000ace8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001eab  00000000  00000000  0000b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00017b42  00000000  00000000  0000d67b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001caf  00000000  00000000  000251bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008858  00000000  00000000  00026e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000021a0  00000000  00000000  0002f6c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000050df  00000000  00000000  00031864  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00003818  00000000  00000000  00036943  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00eea60b  00000000  00000000  0003a15b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .flash_nvram0 000003c0  8007f000  8000a6f9  0000b000  2**0
                  ALLOC
 22 .flash_nvram1 000003c0  8007f800  8007f3c0  0000b000  2**0
                  ALLOC
 23 .debug_ranges 00000a88  00000000  00000000  00f24768  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	5b 18       	cp.w	r8,-15

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	48 1f       	lddpc	pc,8000200c <program_start+0x4>
8000200a:	00 00       	add	r0,r0
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	5b 18       	cp.w	r8,-15

Disassembly of section .text:

80002010 <io_pin>:

#define EC_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
80002010:	eb cd 40 80 	pushm	r7,lr
80002014:	1a 97       	mov	r7,sp
80002016:	20 1d       	sub	sp,4
80002018:	18 98       	mov	r8,r12
8000201a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (idx)
8000201e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002022:	58 28       	cp.w	r8,2
80002024:	c1 10       	breq	80002046 <io_pin+0x36>
80002026:	e0 89 00 07 	brgt	80002034 <io_pin+0x24>
8000202a:	58 08       	cp.w	r8,0
8000202c:	c0 90       	breq	8000203e <io_pin+0x2e>
8000202e:	58 18       	cp.w	r8,1
80002030:	c0 90       	breq	80002042 <io_pin+0x32>
80002032:	c1 08       	rjmp	80002052 <io_pin+0x42>
80002034:	58 38       	cp.w	r8,3
80002036:	c0 a0       	breq	8000204a <io_pin+0x3a>
80002038:	58 48       	cp.w	r8,4
8000203a:	c0 a0       	breq	8000204e <io_pin+0x3e>
8000203c:	c0 b8       	rjmp	80002052 <io_pin+0x42>
	{
		case 0:
			return ECLAVE_SERIAL_ID0;
8000203e:	33 38       	mov	r8,51
80002040:	c0 a8       	rjmp	80002054 <io_pin+0x44>
			break;
		case 1:
			return ECLAVE_SERIAL_ID1;
80002042:	33 48       	mov	r8,52
80002044:	c0 88       	rjmp	80002054 <io_pin+0x44>
			break;
		case 2:
			return ECLAVE_SERIAL_ID2;
80002046:	33 58       	mov	r8,53
80002048:	c0 68       	rjmp	80002054 <io_pin+0x44>
			break;
		case 3:
			return ECLAVE_SERIAL_ID3;
8000204a:	33 68       	mov	r8,54
8000204c:	c0 48       	rjmp	80002054 <io_pin+0x44>
			break;
		case 4:
			return ECLAVE_SERIAL_ID4;
8000204e:	33 78       	mov	r8,55
80002050:	c0 28       	rjmp	80002054 <io_pin+0x44>
			break;
		default: 
			return 0; //TODO: return a better error code here
80002052:	30 08       	mov	r8,0
			break;
	}
}
80002054:	10 9c       	mov	r12,r8
80002056:	2f fd       	sub	sp,-4
80002058:	e3 cd 80 80 	ldm	sp++,r7,pc

8000205c <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
8000205c:	eb cd 40 80 	pushm	r7,lr
80002060:	1a 97       	mov	r7,sp
80002062:	20 2d       	sub	sp,8
80002064:	18 98       	mov	r8,r12
80002066:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char ioPin;
	
	ioPin = io_pin(idx);
8000206a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000206e:	10 9c       	mov	r12,r8
80002070:	f0 1f 00 07 	mcall	8000208c <drive_DQ_low+0x30>
80002074:	18 98       	mov	r8,r12
80002076:	ef 68 ff ff 	st.b	r7[-1],r8
	
	gpio_set_pin_low(ioPin);
8000207a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000207e:	10 9c       	mov	r12,r8
80002080:	f0 1f 00 04 	mcall	80002090 <drive_DQ_low+0x34>
}
80002084:	2f ed       	sub	sp,-8
80002086:	e3 cd 80 80 	ldm	sp++,r7,pc
8000208a:	00 00       	add	r0,r0
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	20 10       	sub	r0,1
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	4b ac       	lddpc	r12,80002178 <SetSpeed+0x3c>

80002094 <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
80002094:	eb cd 40 80 	pushm	r7,lr
80002098:	1a 97       	mov	r7,sp
8000209a:	20 2d       	sub	sp,8
8000209c:	18 98       	mov	r8,r12
8000209e:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char ioPin;
	
	ioPin = io_pin(idx);
800020a2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800020a6:	10 9c       	mov	r12,r8
800020a8:	f0 1f 00 07 	mcall	800020c4 <release_the_bus+0x30>
800020ac:	18 98       	mov	r8,r12
800020ae:	ef 68 ff ff 	st.b	r7[-1],r8
	
	gpio_set_pin_high(ioPin);
800020b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800020b6:	10 9c       	mov	r12,r8
800020b8:	f0 1f 00 04 	mcall	800020c8 <release_the_bus+0x34>
	
}
800020bc:	2f ed       	sub	sp,-8
800020be:	e3 cd 80 80 	ldm	sp++,r7,pc
800020c2:	00 00       	add	r0,r0
800020c4:	80 00       	ld.sh	r0,r0[0x0]
800020c6:	20 10       	sub	r0,1
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	4b 72       	lddpc	r2,800021a4 <SetSpeed+0x68>

800020cc <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
800020cc:	eb cd 40 80 	pushm	r7,lr
800020d0:	1a 97       	mov	r7,sp
800020d2:	20 3d       	sub	sp,12
800020d4:	18 98       	mov	r8,r12
800020d6:	ef 68 ff f4 	st.b	r7[-12],r8
		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
800020da:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800020de:	10 9c       	mov	r12,r8
800020e0:	f0 1f 00 14 	mcall	80002130 <sample_line+0x64>
800020e4:	18 98       	mov	r8,r12
800020e6:	ef 68 ff ff 	st.b	r7[-1],r8
		
		ioFlags = (GPIO_DIR_INPUT);
800020ea:	30 08       	mov	r8,0
800020ec:	ef 48 ff f8 	st.w	r7[-8],r8
		gpio_configure_pin(ioPin, ioFlags);
800020f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800020f4:	ee fb ff f8 	ld.w	r11,r7[-8]
800020f8:	10 9c       	mov	r12,r8
800020fa:	f0 1f 00 0f 	mcall	80002134 <sample_line+0x68>

		retVal = gpio_get_pin_value(ioPin);
800020fe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002102:	10 9c       	mov	r12,r8
80002104:	f0 1f 00 0d 	mcall	80002138 <sample_line+0x6c>
80002108:	18 98       	mov	r8,r12
8000210a:	ef 68 ff fe 	st.b	r7[-2],r8

		ioFlags = (GPIO_DIR_OUTPUT);
8000210e:	30 18       	mov	r8,1
80002110:	ef 48 ff f8 	st.w	r7[-8],r8
		gpio_configure_pin(ioPin, ioFlags);
80002114:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002118:	ee fb ff f8 	ld.w	r11,r7[-8]
8000211c:	10 9c       	mov	r12,r8
8000211e:	f0 1f 00 06 	mcall	80002134 <sample_line+0x68>

		return retVal;
80002122:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
80002126:	10 9c       	mov	r12,r8
80002128:	2f dd       	sub	sp,-12
8000212a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000212e:	00 00       	add	r0,r0
80002130:	80 00       	ld.sh	r0,r0[0x0]
80002132:	20 10       	sub	r0,1
80002134:	80 00       	ld.sh	r0,r0[0x0]
80002136:	48 98       	lddpc	r8,80002158 <SetSpeed+0x1c>
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	4b 36       	lddpc	r6,80002204 <OWTouchReset+0x8>

8000213c <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
8000213c:	eb cd 40 80 	pushm	r7,lr
80002140:	1a 97       	mov	r7,sp
80002142:	20 1d       	sub	sp,4
80002144:	ef 4c ff fc 	st.w	r7[-4],r12
	// Adjust tick values depending on speed
	if (standard)
80002148:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000214c:	58 08       	cp.w	r8,0
8000214e:	c2 20       	breq	80002192 <SetSpeed+0x56>
	{
		// Standard Speed
		A = 6; //us
80002150:	4a 18       	lddpc	r8,800021d4 <SetSpeed+0x98>
80002152:	30 69       	mov	r9,6
80002154:	91 09       	st.w	r8[0x0],r9
		B = 64;
80002156:	4a 18       	lddpc	r8,800021d8 <SetSpeed+0x9c>
80002158:	34 09       	mov	r9,64
8000215a:	91 09       	st.w	r8[0x0],r9
		C = 60;
8000215c:	4a 08       	lddpc	r8,800021dc <SetSpeed+0xa0>
8000215e:	33 c9       	mov	r9,60
80002160:	91 09       	st.w	r8[0x0],r9
		D = 10;
80002162:	4a 08       	lddpc	r8,800021e0 <SetSpeed+0xa4>
80002164:	30 a9       	mov	r9,10
80002166:	91 09       	st.w	r8[0x0],r9
		E = 9;
80002168:	49 f8       	lddpc	r8,800021e4 <SetSpeed+0xa8>
8000216a:	30 99       	mov	r9,9
8000216c:	91 09       	st.w	r8[0x0],r9
		F = 55;
8000216e:	49 f8       	lddpc	r8,800021e8 <SetSpeed+0xac>
80002170:	33 79       	mov	r9,55
80002172:	91 09       	st.w	r8[0x0],r9
		G = 0;
80002174:	49 e8       	lddpc	r8,800021ec <SetSpeed+0xb0>
80002176:	30 09       	mov	r9,0
80002178:	91 09       	st.w	r8[0x0],r9
		H = 480;
8000217a:	49 e8       	lddpc	r8,800021f0 <SetSpeed+0xb4>
8000217c:	e0 69 01 e0 	mov	r9,480
80002180:	91 09       	st.w	r8[0x0],r9
		I = 70;
80002182:	49 d8       	lddpc	r8,800021f4 <SetSpeed+0xb8>
80002184:	34 69       	mov	r9,70
80002186:	91 09       	st.w	r8[0x0],r9
		J = 410;
80002188:	49 c8       	lddpc	r8,800021f8 <SetSpeed+0xbc>
8000218a:	e0 69 01 9a 	mov	r9,410
8000218e:	91 09       	st.w	r8[0x0],r9
80002190:	c1 f8       	rjmp	800021ce <SetSpeed+0x92>
	}
	else
	{
		// Overdrive Speed
		A = 1.5;
80002192:	49 18       	lddpc	r8,800021d4 <SetSpeed+0x98>
80002194:	30 19       	mov	r9,1
80002196:	91 09       	st.w	r8[0x0],r9
		B = 7.5;
80002198:	49 08       	lddpc	r8,800021d8 <SetSpeed+0x9c>
8000219a:	30 79       	mov	r9,7
8000219c:	91 09       	st.w	r8[0x0],r9
		C = 7.5;
8000219e:	49 08       	lddpc	r8,800021dc <SetSpeed+0xa0>
800021a0:	30 79       	mov	r9,7
800021a2:	91 09       	st.w	r8[0x0],r9
		D = 2.5;
800021a4:	48 f8       	lddpc	r8,800021e0 <SetSpeed+0xa4>
800021a6:	30 29       	mov	r9,2
800021a8:	91 09       	st.w	r8[0x0],r9
		E = 0.75;
800021aa:	48 f8       	lddpc	r8,800021e4 <SetSpeed+0xa8>
800021ac:	30 09       	mov	r9,0
800021ae:	91 09       	st.w	r8[0x0],r9
		F = 7;
800021b0:	48 e8       	lddpc	r8,800021e8 <SetSpeed+0xac>
800021b2:	30 79       	mov	r9,7
800021b4:	91 09       	st.w	r8[0x0],r9
		G = 2.5;
800021b6:	48 e8       	lddpc	r8,800021ec <SetSpeed+0xb0>
800021b8:	30 29       	mov	r9,2
800021ba:	91 09       	st.w	r8[0x0],r9
		H = 70;
800021bc:	48 d8       	lddpc	r8,800021f0 <SetSpeed+0xb4>
800021be:	34 69       	mov	r9,70
800021c0:	91 09       	st.w	r8[0x0],r9
		I = 8.5;
800021c2:	48 d8       	lddpc	r8,800021f4 <SetSpeed+0xb8>
800021c4:	30 89       	mov	r9,8
800021c6:	91 09       	st.w	r8[0x0],r9
		J = 40;
800021c8:	48 c8       	lddpc	r8,800021f8 <SetSpeed+0xbc>
800021ca:	32 89       	mov	r9,40
800021cc:	91 09       	st.w	r8[0x0],r9
	}
}
800021ce:	2f fd       	sub	sp,-4
800021d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800021d4:	00 00       	add	r0,r0
800021d6:	02 b8       	st.h	r1++,r8
800021d8:	00 00       	add	r0,r0
800021da:	02 bc       	st.h	r1++,r12
800021dc:	00 00       	add	r0,r0
800021de:	02 c4       	st.b	r1++,r4
800021e0:	00 00       	add	r0,r0
800021e2:	02 b4       	st.h	r1++,r4
800021e4:	00 00       	add	r0,r0
800021e6:	02 d0       	st.w	--r1,r0
800021e8:	00 00       	add	r0,r0
800021ea:	02 d8       	st.w	--r1,r8
800021ec:	00 00       	add	r0,r0
800021ee:	02 c8       	st.b	r1++,r8
800021f0:	00 00       	add	r0,r0
800021f2:	02 cc       	st.b	r1++,r12
800021f4:	00 00       	add	r0,r0
800021f6:	02 d4       	st.w	--r1,r4
800021f8:	00 00       	add	r0,r0
800021fa:	02 c0       	st.b	r1++,r0

800021fc <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
800021fc:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002200:	1a 97       	mov	r7,sp
80002202:	fa cd 00 e0 	sub	sp,sp,224
80002206:	18 98       	mov	r8,r12
80002208:	ef 68 ff 48 	st.b	r7[-184],r8
	int result;

	cpu_delay_us(A, 8000000);
8000220c:	fe f8 05 88 	ld.w	r8,pc[1416]
80002210:	70 08       	ld.w	r8,r8[0x0]
80002212:	ef 48 ff 84 	st.w	r7[-124],r8
80002216:	e0 68 12 00 	mov	r8,4608
8000221a:	ea 18 00 7a 	orh	r8,0x7a
8000221e:	ef 48 ff 80 	st.w	r7[-128],r8
80002222:	ee f8 ff 84 	ld.w	r8,r7[-124]
80002226:	ef 48 ff 8c 	st.w	r7[-116],r8
8000222a:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000222e:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002232:	ee f2 ff 8c 	ld.w	r2,r7[-116]
80002236:	30 03       	mov	r3,0
80002238:	ee fa ff 88 	ld.w	r10,r7[-120]
8000223c:	30 0b       	mov	r11,0
8000223e:	e6 0a 02 49 	mul	r9,r3,r10
80002242:	f6 02 02 48 	mul	r8,r11,r2
80002246:	10 09       	add	r9,r8
80002248:	e4 0a 06 4a 	mulu.d	r10,r2,r10
8000224c:	16 09       	add	r9,r11
8000224e:	12 9b       	mov	r11,r9
80002250:	ee 78 42 3f 	mov	r8,999999
80002254:	30 09       	mov	r9,0
80002256:	10 0a       	add	r10,r8
80002258:	f6 09 00 4b 	adc	r11,r11,r9
8000225c:	ee 78 42 40 	mov	r8,1000000
80002260:	30 09       	mov	r9,0
80002262:	f0 1f 01 4e 	mcall	80002798 <OWTouchReset+0x59c>
80002266:	14 98       	mov	r8,r10
80002268:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
8000226a:	ef 48 ff 94 	st.w	r7[-108],r8
8000226e:	ee c8 00 b4 	sub	r8,r7,180
80002272:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002276:	e1 b8 00 42 	mfsr	r8,0x108
8000227a:	10 99       	mov	r9,r8
8000227c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002280:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002282:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002286:	70 09       	ld.w	r9,r8[0x0]
80002288:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000228c:	10 09       	add	r9,r8
8000228e:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002292:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002294:	ee f9 ff 90 	ld.w	r9,r7[-112]
80002298:	30 08       	mov	r8,0
8000229a:	f3 68 00 08 	st.b	r9[8],r8
8000229e:	ee c8 00 b4 	sub	r8,r7,180
800022a2:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022a6:	e1 b8 00 42 	mfsr	r8,0x108
800022aa:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800022ae:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022b2:	f1 39 00 08 	ld.ub	r9,r8[8]
800022b6:	30 28       	mov	r8,2
800022b8:	f0 09 18 00 	cp.b	r9,r8
800022bc:	c0 31       	brne	800022c2 <OWTouchReset+0xc6>
    return false;
800022be:	30 08       	mov	r8,0
800022c0:	c4 38       	rjmp	80002346 <OWTouchReset+0x14a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800022c2:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022c6:	f1 39 00 08 	ld.ub	r9,r8[8]
800022ca:	30 18       	mov	r8,1
800022cc:	f0 09 18 00 	cp.b	r9,r8
800022d0:	c0 31       	brne	800022d6 <OWTouchReset+0xda>
    return true;
800022d2:	30 18       	mov	r8,1
800022d4:	c3 98       	rjmp	80002346 <OWTouchReset+0x14a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022d6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022da:	70 09       	ld.w	r9,r8[0x0]
800022dc:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022e0:	70 18       	ld.w	r8,r8[0x4]
800022e2:	10 39       	cp.w	r9,r8
800022e4:	e0 88 00 1a 	brls	80002318 <OWTouchReset+0x11c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022e8:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022ec:	70 08       	ld.w	r8,r8[0x0]
800022ee:	ee f9 ff 9c 	ld.w	r9,r7[-100]
800022f2:	10 39       	cp.w	r9,r8
800022f4:	c1 02       	brcc	80002314 <OWTouchReset+0x118>
800022f6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022fa:	70 18       	ld.w	r8,r8[0x4]
800022fc:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002300:	10 39       	cp.w	r9,r8
80002302:	e0 88 00 09 	brls	80002314 <OWTouchReset+0x118>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002306:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000230a:	30 18       	mov	r8,1
8000230c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002310:	30 18       	mov	r8,1
80002312:	c1 a8       	rjmp	80002346 <OWTouchReset+0x14a>
    }
    return false;
80002314:	30 08       	mov	r8,0
80002316:	c1 88       	rjmp	80002346 <OWTouchReset+0x14a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002318:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000231c:	70 08       	ld.w	r8,r8[0x0]
8000231e:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002322:	10 39       	cp.w	r9,r8
80002324:	c0 93       	brcs	80002336 <OWTouchReset+0x13a>
80002326:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000232a:	70 18       	ld.w	r8,r8[0x4]
8000232c:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002330:	10 39       	cp.w	r9,r8
80002332:	e0 88 00 09 	brls	80002344 <OWTouchReset+0x148>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002336:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000233a:	30 18       	mov	r8,1
8000233c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002340:	30 18       	mov	r8,1
80002342:	c0 28       	rjmp	80002346 <OWTouchReset+0x14a>
    }
    return false;
80002344:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002346:	58 08       	cp.w	r8,0
80002348:	ca b0       	breq	8000229e <OWTouchReset+0xa2>
	drive_DQ_low(idx);
8000234a:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000234e:	10 9c       	mov	r12,r8
80002350:	f0 1f 01 13 	mcall	8000279c <OWTouchReset+0x5a0>
	cpu_delay_us(H, 8000000);
80002354:	fe f8 04 4c 	ld.w	r8,pc[1100]
80002358:	70 08       	ld.w	r8,r8[0x0]
8000235a:	ef 48 ff a4 	st.w	r7[-92],r8
8000235e:	e0 68 12 00 	mov	r8,4608
80002362:	ea 18 00 7a 	orh	r8,0x7a
80002366:	ef 48 ff a0 	st.w	r7[-96],r8
8000236a:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000236e:	ef 48 ff ac 	st.w	r7[-84],r8
80002372:	ee f8 ff a0 	ld.w	r8,r7[-96]
80002376:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000237a:	ee fc ff ac 	ld.w	r12,r7[-84]
8000237e:	ef 4c ff 2c 	st.w	r7[-212],r12
80002382:	30 0b       	mov	r11,0
80002384:	ef 4b ff 28 	st.w	r7[-216],r11
80002388:	ee f9 ff a8 	ld.w	r9,r7[-88]
8000238c:	ef 49 ff 24 	st.w	r7[-220],r9
80002390:	30 08       	mov	r8,0
80002392:	ef 48 ff 20 	st.w	r7[-224],r8
80002396:	ee fa ff 28 	ld.w	r10,r7[-216]
8000239a:	ee fc ff 24 	ld.w	r12,r7[-220]
8000239e:	b9 3a       	mul	r10,r12
800023a0:	ee f8 ff 20 	ld.w	r8,r7[-224]
800023a4:	ee fb ff 2c 	ld.w	r11,r7[-212]
800023a8:	b7 38       	mul	r8,r11
800023aa:	10 0a       	add	r10,r8
800023ac:	ee fc ff 2c 	ld.w	r12,r7[-212]
800023b0:	ee fb ff 24 	ld.w	r11,r7[-220]
800023b4:	f8 0b 06 48 	mulu.d	r8,r12,r11
800023b8:	12 0a       	add	r10,r9
800023ba:	14 99       	mov	r9,r10
800023bc:	ee 7a 42 3f 	mov	r10,999999
800023c0:	30 0b       	mov	r11,0
800023c2:	f0 0a 00 0a 	add	r10,r8,r10
800023c6:	f2 0b 00 4b 	adc	r11,r9,r11
800023ca:	ee 78 42 40 	mov	r8,1000000
800023ce:	30 09       	mov	r9,0
800023d0:	f0 1f 00 f2 	mcall	80002798 <OWTouchReset+0x59c>
800023d4:	14 98       	mov	r8,r10
800023d6:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800023d8:	ef 48 ff b4 	st.w	r7[-76],r8
800023dc:	ee c8 00 a8 	sub	r8,r7,168
800023e0:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800023e4:	e1 b8 00 42 	mfsr	r8,0x108
800023e8:	10 99       	mov	r9,r8
800023ea:	ee f8 ff b0 	ld.w	r8,r7[-80]
800023ee:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800023f0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800023f4:	70 09       	ld.w	r9,r8[0x0]
800023f6:	ee f8 ff b4 	ld.w	r8,r7[-76]
800023fa:	10 09       	add	r9,r8
800023fc:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002400:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002402:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002406:	30 08       	mov	r8,0
80002408:	f3 68 00 08 	st.b	r9[8],r8
8000240c:	ee c8 00 a8 	sub	r8,r7,168
80002410:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002414:	e1 b8 00 42 	mfsr	r8,0x108
80002418:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000241c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002420:	f1 39 00 08 	ld.ub	r9,r8[8]
80002424:	30 28       	mov	r8,2
80002426:	f0 09 18 00 	cp.b	r9,r8
8000242a:	c0 31       	brne	80002430 <OWTouchReset+0x234>
    return false;
8000242c:	30 08       	mov	r8,0
8000242e:	c4 38       	rjmp	800024b4 <OWTouchReset+0x2b8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002430:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002434:	f1 39 00 08 	ld.ub	r9,r8[8]
80002438:	30 18       	mov	r8,1
8000243a:	f0 09 18 00 	cp.b	r9,r8
8000243e:	c0 31       	brne	80002444 <OWTouchReset+0x248>
    return true;
80002440:	30 18       	mov	r8,1
80002442:	c3 98       	rjmp	800024b4 <OWTouchReset+0x2b8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002444:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002448:	70 09       	ld.w	r9,r8[0x0]
8000244a:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000244e:	70 18       	ld.w	r8,r8[0x4]
80002450:	10 39       	cp.w	r9,r8
80002452:	e0 88 00 1a 	brls	80002486 <OWTouchReset+0x28a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002456:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000245a:	70 08       	ld.w	r8,r8[0x0]
8000245c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002460:	10 39       	cp.w	r9,r8
80002462:	c1 02       	brcc	80002482 <OWTouchReset+0x286>
80002464:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002468:	70 18       	ld.w	r8,r8[0x4]
8000246a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000246e:	10 39       	cp.w	r9,r8
80002470:	e0 88 00 09 	brls	80002482 <OWTouchReset+0x286>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002474:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002478:	30 18       	mov	r8,1
8000247a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000247e:	30 18       	mov	r8,1
80002480:	c1 a8       	rjmp	800024b4 <OWTouchReset+0x2b8>
    }
    return false;
80002482:	30 08       	mov	r8,0
80002484:	c1 88       	rjmp	800024b4 <OWTouchReset+0x2b8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002486:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000248a:	70 08       	ld.w	r8,r8[0x0]
8000248c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002490:	10 39       	cp.w	r9,r8
80002492:	c0 93       	brcs	800024a4 <OWTouchReset+0x2a8>
80002494:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002498:	70 18       	ld.w	r8,r8[0x4]
8000249a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000249e:	10 39       	cp.w	r9,r8
800024a0:	e0 88 00 09 	brls	800024b2 <OWTouchReset+0x2b6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024a4:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024a8:	30 18       	mov	r8,1
800024aa:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024ae:	30 18       	mov	r8,1
800024b0:	c0 28       	rjmp	800024b4 <OWTouchReset+0x2b8>
    }
    return false;
800024b2:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800024b4:	58 08       	cp.w	r8,0
800024b6:	ca b0       	breq	8000240c <OWTouchReset+0x210>
	release_the_bus(idx);
800024b8:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024bc:	10 9c       	mov	r12,r8
800024be:	f0 1f 00 ba 	mcall	800027a4 <OWTouchReset+0x5a8>
	cpu_delay_us(I, 8000000);
800024c2:	fe f8 02 e6 	ld.w	r8,pc[742]
800024c6:	70 08       	ld.w	r8,r8[0x0]
800024c8:	ef 48 ff c4 	st.w	r7[-60],r8
800024cc:	e0 68 12 00 	mov	r8,4608
800024d0:	ea 18 00 7a 	orh	r8,0x7a
800024d4:	ef 48 ff c0 	st.w	r7[-64],r8
800024d8:	ee f8 ff c4 	ld.w	r8,r7[-60]
800024dc:	ef 48 ff cc 	st.w	r7[-52],r8
800024e0:	ee f8 ff c0 	ld.w	r8,r7[-64]
800024e4:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800024e8:	ee f9 ff cc 	ld.w	r9,r7[-52]
800024ec:	ef 49 ff 3c 	st.w	r7[-196],r9
800024f0:	30 08       	mov	r8,0
800024f2:	ef 48 ff 38 	st.w	r7[-200],r8
800024f6:	ee fc ff c8 	ld.w	r12,r7[-56]
800024fa:	ef 4c ff 34 	st.w	r7[-204],r12
800024fe:	30 0b       	mov	r11,0
80002500:	ef 4b ff 30 	st.w	r7[-208],r11
80002504:	ee fa ff 38 	ld.w	r10,r7[-200]
80002508:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000250c:	b3 3a       	mul	r10,r9
8000250e:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002512:	ee fc ff 3c 	ld.w	r12,r7[-196]
80002516:	b9 38       	mul	r8,r12
80002518:	10 0a       	add	r10,r8
8000251a:	ee fb ff 3c 	ld.w	r11,r7[-196]
8000251e:	ee fc ff 34 	ld.w	r12,r7[-204]
80002522:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002526:	12 0a       	add	r10,r9
80002528:	14 99       	mov	r9,r10
8000252a:	ee 7a 42 3f 	mov	r10,999999
8000252e:	30 0b       	mov	r11,0
80002530:	f0 0a 00 0a 	add	r10,r8,r10
80002534:	f2 0b 00 4b 	adc	r11,r9,r11
80002538:	ee 78 42 40 	mov	r8,1000000
8000253c:	30 09       	mov	r9,0
8000253e:	f0 1f 00 97 	mcall	80002798 <OWTouchReset+0x59c>
80002542:	14 98       	mov	r8,r10
80002544:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002546:	ef 48 ff d4 	st.w	r7[-44],r8
8000254a:	ee c8 00 9c 	sub	r8,r7,156
8000254e:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002552:	e1 b8 00 42 	mfsr	r8,0x108
80002556:	10 99       	mov	r9,r8
80002558:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000255c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000255e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002562:	70 09       	ld.w	r9,r8[0x0]
80002564:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002568:	10 09       	add	r9,r8
8000256a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000256e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002570:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002574:	30 08       	mov	r8,0
80002576:	f3 68 00 08 	st.b	r9[8],r8
8000257a:	ee c8 00 9c 	sub	r8,r7,156
8000257e:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002582:	e1 b8 00 42 	mfsr	r8,0x108
80002586:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000258a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000258e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002592:	30 28       	mov	r8,2
80002594:	f0 09 18 00 	cp.b	r9,r8
80002598:	c0 31       	brne	8000259e <OWTouchReset+0x3a2>
    return false;
8000259a:	30 08       	mov	r8,0
8000259c:	c4 38       	rjmp	80002622 <OWTouchReset+0x426>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000259e:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025a2:	f1 39 00 08 	ld.ub	r9,r8[8]
800025a6:	30 18       	mov	r8,1
800025a8:	f0 09 18 00 	cp.b	r9,r8
800025ac:	c0 31       	brne	800025b2 <OWTouchReset+0x3b6>
    return true;
800025ae:	30 18       	mov	r8,1
800025b0:	c3 98       	rjmp	80002622 <OWTouchReset+0x426>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025b2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025b6:	70 09       	ld.w	r9,r8[0x0]
800025b8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025bc:	70 18       	ld.w	r8,r8[0x4]
800025be:	10 39       	cp.w	r9,r8
800025c0:	e0 88 00 1a 	brls	800025f4 <OWTouchReset+0x3f8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025c4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025c8:	70 08       	ld.w	r8,r8[0x0]
800025ca:	ee f9 ff dc 	ld.w	r9,r7[-36]
800025ce:	10 39       	cp.w	r9,r8
800025d0:	c1 02       	brcc	800025f0 <OWTouchReset+0x3f4>
800025d2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025d6:	70 18       	ld.w	r8,r8[0x4]
800025d8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800025dc:	10 39       	cp.w	r9,r8
800025de:	e0 88 00 09 	brls	800025f0 <OWTouchReset+0x3f4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800025e2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800025e6:	30 18       	mov	r8,1
800025e8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800025ec:	30 18       	mov	r8,1
800025ee:	c1 a8       	rjmp	80002622 <OWTouchReset+0x426>
    }
    return false;
800025f0:	30 08       	mov	r8,0
800025f2:	c1 88       	rjmp	80002622 <OWTouchReset+0x426>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800025f4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025f8:	70 08       	ld.w	r8,r8[0x0]
800025fa:	ee f9 ff dc 	ld.w	r9,r7[-36]
800025fe:	10 39       	cp.w	r9,r8
80002600:	c0 93       	brcs	80002612 <OWTouchReset+0x416>
80002602:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002606:	70 18       	ld.w	r8,r8[0x4]
80002608:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000260c:	10 39       	cp.w	r9,r8
8000260e:	e0 88 00 09 	brls	80002620 <OWTouchReset+0x424>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002612:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002616:	30 18       	mov	r8,1
80002618:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000261c:	30 18       	mov	r8,1
8000261e:	c0 28       	rjmp	80002622 <OWTouchReset+0x426>
    }
    return false;
80002620:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002622:	58 08       	cp.w	r8,0
80002624:	ca b0       	breq	8000257a <OWTouchReset+0x37e>
	result = sample_line(idx);
80002626:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000262a:	10 9c       	mov	r12,r8
8000262c:	f0 1f 00 60 	mcall	800027ac <OWTouchReset+0x5b0>
80002630:	18 98       	mov	r8,r12
80002632:	ef 48 ff 7c 	st.w	r7[-132],r8
	cpu_delay_us(J, 8000000); // Complete the reset sequence recovery
80002636:	4d f8       	lddpc	r8,800027b0 <OWTouchReset+0x5b4>
80002638:	70 08       	ld.w	r8,r8[0x0]
8000263a:	ef 48 ff e4 	st.w	r7[-28],r8
8000263e:	e0 68 12 00 	mov	r8,4608
80002642:	ea 18 00 7a 	orh	r8,0x7a
80002646:	ef 48 ff e0 	st.w	r7[-32],r8
8000264a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000264e:	ef 48 ff ec 	st.w	r7[-20],r8
80002652:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002656:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000265a:	ee fb ff ec 	ld.w	r11,r7[-20]
8000265e:	ef 4b ff 44 	st.w	r7[-188],r11
80002662:	30 09       	mov	r9,0
80002664:	ef 49 ff 40 	st.w	r7[-192],r9
80002668:	ee f0 ff e8 	ld.w	r0,r7[-24]
8000266c:	30 01       	mov	r1,0
8000266e:	ee fa ff 40 	ld.w	r10,r7[-192]
80002672:	a1 3a       	mul	r10,r0
80002674:	ee fc ff 44 	ld.w	r12,r7[-188]
80002678:	e2 0c 02 48 	mul	r8,r1,r12
8000267c:	10 0a       	add	r10,r8
8000267e:	ee fb ff 44 	ld.w	r11,r7[-188]
80002682:	f6 00 06 48 	mulu.d	r8,r11,r0
80002686:	12 0a       	add	r10,r9
80002688:	14 99       	mov	r9,r10
8000268a:	ee 7a 42 3f 	mov	r10,999999
8000268e:	30 0b       	mov	r11,0
80002690:	f0 0a 00 0a 	add	r10,r8,r10
80002694:	f2 0b 00 4b 	adc	r11,r9,r11
80002698:	ee 78 42 40 	mov	r8,1000000
8000269c:	30 09       	mov	r9,0
8000269e:	f0 1f 00 3f 	mcall	80002798 <OWTouchReset+0x59c>
800026a2:	14 98       	mov	r8,r10
800026a4:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800026a6:	ef 48 ff f4 	st.w	r7[-12],r8
800026aa:	ee c8 00 90 	sub	r8,r7,144
800026ae:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026b2:	e1 b8 00 42 	mfsr	r8,0x108
800026b6:	10 99       	mov	r9,r8
800026b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800026bc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800026be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800026c2:	70 09       	ld.w	r9,r8[0x0]
800026c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800026c8:	10 09       	add	r9,r8
800026ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800026ce:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800026d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800026d4:	30 08       	mov	r8,0
800026d6:	f3 68 00 08 	st.b	r9[8],r8
800026da:	ee c8 00 90 	sub	r8,r7,144
800026de:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800026e2:	e1 b8 00 42 	mfsr	r8,0x108
800026e6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800026ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026ee:	f1 39 00 08 	ld.ub	r9,r8[8]
800026f2:	30 28       	mov	r8,2
800026f4:	f0 09 18 00 	cp.b	r9,r8
800026f8:	c0 31       	brne	800026fe <OWTouchReset+0x502>
    return false;
800026fa:	30 08       	mov	r8,0
800026fc:	c4 38       	rjmp	80002782 <OWTouchReset+0x586>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800026fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002702:	f1 39 00 08 	ld.ub	r9,r8[8]
80002706:	30 18       	mov	r8,1
80002708:	f0 09 18 00 	cp.b	r9,r8
8000270c:	c0 31       	brne	80002712 <OWTouchReset+0x516>
    return true;
8000270e:	30 18       	mov	r8,1
80002710:	c3 98       	rjmp	80002782 <OWTouchReset+0x586>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002712:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002716:	70 09       	ld.w	r9,r8[0x0]
80002718:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000271c:	70 18       	ld.w	r8,r8[0x4]
8000271e:	10 39       	cp.w	r9,r8
80002720:	e0 88 00 1a 	brls	80002754 <OWTouchReset+0x558>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002724:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002728:	70 08       	ld.w	r8,r8[0x0]
8000272a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000272e:	10 39       	cp.w	r9,r8
80002730:	c1 02       	brcc	80002750 <OWTouchReset+0x554>
80002732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002736:	70 18       	ld.w	r8,r8[0x4]
80002738:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000273c:	10 39       	cp.w	r9,r8
8000273e:	e0 88 00 09 	brls	80002750 <OWTouchReset+0x554>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002742:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002746:	30 18       	mov	r8,1
80002748:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000274c:	30 18       	mov	r8,1
8000274e:	c1 a8       	rjmp	80002782 <OWTouchReset+0x586>
    }
    return false;
80002750:	30 08       	mov	r8,0
80002752:	c1 88       	rjmp	80002782 <OWTouchReset+0x586>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002758:	70 08       	ld.w	r8,r8[0x0]
8000275a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000275e:	10 39       	cp.w	r9,r8
80002760:	c0 93       	brcs	80002772 <OWTouchReset+0x576>
80002762:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002766:	70 18       	ld.w	r8,r8[0x4]
80002768:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000276c:	10 39       	cp.w	r9,r8
8000276e:	e0 88 00 09 	brls	80002780 <OWTouchReset+0x584>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002772:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002776:	30 18       	mov	r8,1
80002778:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000277c:	30 18       	mov	r8,1
8000277e:	c0 28       	rjmp	80002782 <OWTouchReset+0x586>
    }
    return false;
80002780:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002782:	58 08       	cp.w	r8,0
80002784:	ca b0       	breq	800026da <OWTouchReset+0x4de>
	return result; // Return sample presence pulse result
80002786:	ee f8 ff 7c 	ld.w	r8,r7[-132]
}
8000278a:	10 9c       	mov	r12,r8
8000278c:	2c 8d       	sub	sp,-224
8000278e:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002792:	00 00       	add	r0,r0
80002794:	00 00       	add	r0,r0
80002796:	02 b8       	st.h	r1++,r8
80002798:	80 00       	ld.sh	r0,r0[0x0]
8000279a:	9c 9e       	ld.uh	lr,lr[0x2]
8000279c:	80 00       	ld.sh	r0,r0[0x0]
8000279e:	20 5c       	sub	r12,5
800027a0:	00 00       	add	r0,r0
800027a2:	02 cc       	st.b	r1++,r12
800027a4:	80 00       	ld.sh	r0,r0[0x0]
800027a6:	20 94       	sub	r4,9
800027a8:	00 00       	add	r0,r0
800027aa:	02 d4       	st.w	--r1,r4
800027ac:	80 00       	ld.sh	r0,r0[0x0]
800027ae:	20 cc       	sub	r12,12
800027b0:	00 00       	add	r0,r0
800027b2:	02 c0       	st.b	r1++,r0

800027b4 <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
800027b4:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800027b8:	1a 97       	mov	r7,sp
800027ba:	fa cd 00 e8 	sub	sp,sp,232
800027be:	18 98       	mov	r8,r12
800027c0:	ef 4b ff 48 	st.w	r7[-184],r11
800027c4:	ef 68 ff 4c 	st.b	r7[-180],r8
	if (bit)
800027c8:	ee f8 ff 48 	ld.w	r8,r7[-184]
800027cc:	58 08       	cp.w	r8,0
800027ce:	e0 80 01 71 	breq	80002ab0 <OWWriteBit+0x2fc>
	{
		// Write '1' bit
		drive_DQ_low(idx);
800027d2:	ef 38 ff 4c 	ld.ub	r8,r7[-180]
800027d6:	10 9c       	mov	r12,r8
800027d8:	f0 1f 01 65 	mcall	80002d6c <OWWriteBit+0x5b8>
		cpu_delay_us(A, 8000000);
800027dc:	fe f8 05 94 	ld.w	r8,pc[1428]
800027e0:	70 08       	ld.w	r8,r8[0x0]
800027e2:	ef 48 ff 84 	st.w	r7[-124],r8
800027e6:	e0 68 12 00 	mov	r8,4608
800027ea:	ea 18 00 7a 	orh	r8,0x7a
800027ee:	ef 48 ff 80 	st.w	r7[-128],r8
800027f2:	ee f8 ff 84 	ld.w	r8,r7[-124]
800027f6:	ef 48 ff 8c 	st.w	r7[-116],r8
800027fa:	ee f8 ff 80 	ld.w	r8,r7[-128]
800027fe:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002802:	ee fc ff 8c 	ld.w	r12,r7[-116]
80002806:	ef 4c ff 24 	st.w	r7[-220],r12
8000280a:	30 0b       	mov	r11,0
8000280c:	ef 4b ff 20 	st.w	r7[-224],r11
80002810:	ee f9 ff 88 	ld.w	r9,r7[-120]
80002814:	ef 49 ff 1c 	st.w	r7[-228],r9
80002818:	30 08       	mov	r8,0
8000281a:	ef 48 ff 18 	st.w	r7[-232],r8
8000281e:	ee fa ff 20 	ld.w	r10,r7[-224]
80002822:	ee fc ff 1c 	ld.w	r12,r7[-228]
80002826:	b9 3a       	mul	r10,r12
80002828:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000282c:	ee fb ff 24 	ld.w	r11,r7[-220]
80002830:	b7 38       	mul	r8,r11
80002832:	10 0a       	add	r10,r8
80002834:	ee fc ff 24 	ld.w	r12,r7[-220]
80002838:	ee fb ff 1c 	ld.w	r11,r7[-228]
8000283c:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002840:	12 0a       	add	r10,r9
80002842:	14 99       	mov	r9,r10
80002844:	ee 7a 42 3f 	mov	r10,999999
80002848:	30 0b       	mov	r11,0
8000284a:	f0 0a 00 0a 	add	r10,r8,r10
8000284e:	f2 0b 00 4b 	adc	r11,r9,r11
80002852:	ee 78 42 40 	mov	r8,1000000
80002856:	30 09       	mov	r9,0
80002858:	f0 1f 01 47 	mcall	80002d74 <OWWriteBit+0x5c0>
8000285c:	14 98       	mov	r8,r10
8000285e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002860:	ef 48 ff 94 	st.w	r7[-108],r8
80002864:	ee c8 00 b0 	sub	r8,r7,176
80002868:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000286c:	e1 b8 00 42 	mfsr	r8,0x108
80002870:	10 99       	mov	r9,r8
80002872:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002876:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002878:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000287c:	70 09       	ld.w	r9,r8[0x0]
8000287e:	ee f8 ff 94 	ld.w	r8,r7[-108]
80002882:	10 09       	add	r9,r8
80002884:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002888:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000288a:	ee f9 ff 90 	ld.w	r9,r7[-112]
8000288e:	30 08       	mov	r8,0
80002890:	f3 68 00 08 	st.b	r9[8],r8
80002894:	ee c8 00 b0 	sub	r8,r7,176
80002898:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000289c:	e1 b8 00 42 	mfsr	r8,0x108
800028a0:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800028a4:	ee f8 ff 98 	ld.w	r8,r7[-104]
800028a8:	f1 39 00 08 	ld.ub	r9,r8[8]
800028ac:	30 28       	mov	r8,2
800028ae:	f0 09 18 00 	cp.b	r9,r8
800028b2:	c0 31       	brne	800028b8 <OWWriteBit+0x104>
    return false;
800028b4:	30 08       	mov	r8,0
800028b6:	c4 38       	rjmp	8000293c <OWWriteBit+0x188>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800028b8:	ee f8 ff 98 	ld.w	r8,r7[-104]
800028bc:	f1 39 00 08 	ld.ub	r9,r8[8]
800028c0:	30 18       	mov	r8,1
800028c2:	f0 09 18 00 	cp.b	r9,r8
800028c6:	c0 31       	brne	800028cc <OWWriteBit+0x118>
    return true;
800028c8:	30 18       	mov	r8,1
800028ca:	c3 98       	rjmp	8000293c <OWWriteBit+0x188>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800028cc:	ee f8 ff 98 	ld.w	r8,r7[-104]
800028d0:	70 09       	ld.w	r9,r8[0x0]
800028d2:	ee f8 ff 98 	ld.w	r8,r7[-104]
800028d6:	70 18       	ld.w	r8,r8[0x4]
800028d8:	10 39       	cp.w	r9,r8
800028da:	e0 88 00 1a 	brls	8000290e <OWWriteBit+0x15a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800028de:	ee f8 ff 98 	ld.w	r8,r7[-104]
800028e2:	70 08       	ld.w	r8,r8[0x0]
800028e4:	ee f9 ff 9c 	ld.w	r9,r7[-100]
800028e8:	10 39       	cp.w	r9,r8
800028ea:	c1 02       	brcc	8000290a <OWWriteBit+0x156>
800028ec:	ee f8 ff 98 	ld.w	r8,r7[-104]
800028f0:	70 18       	ld.w	r8,r8[0x4]
800028f2:	ee f9 ff 9c 	ld.w	r9,r7[-100]
800028f6:	10 39       	cp.w	r9,r8
800028f8:	e0 88 00 09 	brls	8000290a <OWWriteBit+0x156>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800028fc:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002900:	30 18       	mov	r8,1
80002902:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002906:	30 18       	mov	r8,1
80002908:	c1 a8       	rjmp	8000293c <OWWriteBit+0x188>
    }
    return false;
8000290a:	30 08       	mov	r8,0
8000290c:	c1 88       	rjmp	8000293c <OWWriteBit+0x188>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000290e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002912:	70 08       	ld.w	r8,r8[0x0]
80002914:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002918:	10 39       	cp.w	r9,r8
8000291a:	c0 93       	brcs	8000292c <OWWriteBit+0x178>
8000291c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002920:	70 18       	ld.w	r8,r8[0x4]
80002922:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002926:	10 39       	cp.w	r9,r8
80002928:	e0 88 00 09 	brls	8000293a <OWWriteBit+0x186>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000292c:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002930:	30 18       	mov	r8,1
80002932:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002936:	30 18       	mov	r8,1
80002938:	c0 28       	rjmp	8000293c <OWWriteBit+0x188>
    }
    return false;
8000293a:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000293c:	58 08       	cp.w	r8,0
8000293e:	ca b0       	breq	80002894 <OWWriteBit+0xe0>
		release_the_bus(idx);
80002940:	ef 38 ff 4c 	ld.ub	r8,r7[-180]
80002944:	10 9c       	mov	r12,r8
80002946:	f0 1f 01 0d 	mcall	80002d78 <OWWriteBit+0x5c4>
		cpu_delay_us(B, 8000000); // Complete the time slot and 10us recovery
8000294a:	fe f8 04 32 	ld.w	r8,pc[1074]
8000294e:	70 08       	ld.w	r8,r8[0x0]
80002950:	ef 48 ff a4 	st.w	r7[-92],r8
80002954:	e0 68 12 00 	mov	r8,4608
80002958:	ea 18 00 7a 	orh	r8,0x7a
8000295c:	ef 48 ff a0 	st.w	r7[-96],r8
80002960:	ee f8 ff a4 	ld.w	r8,r7[-92]
80002964:	ef 48 ff ac 	st.w	r7[-84],r8
80002968:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000296c:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002970:	ee f9 ff ac 	ld.w	r9,r7[-84]
80002974:	ef 49 ff 34 	st.w	r7[-204],r9
80002978:	30 08       	mov	r8,0
8000297a:	ef 48 ff 30 	st.w	r7[-208],r8
8000297e:	ee fc ff a8 	ld.w	r12,r7[-88]
80002982:	ef 4c ff 2c 	st.w	r7[-212],r12
80002986:	30 0b       	mov	r11,0
80002988:	ef 4b ff 28 	st.w	r7[-216],r11
8000298c:	ee fa ff 30 	ld.w	r10,r7[-208]
80002990:	ee f9 ff 2c 	ld.w	r9,r7[-212]
80002994:	b3 3a       	mul	r10,r9
80002996:	ee f8 ff 28 	ld.w	r8,r7[-216]
8000299a:	ee fc ff 34 	ld.w	r12,r7[-204]
8000299e:	b9 38       	mul	r8,r12
800029a0:	10 0a       	add	r10,r8
800029a2:	ee fb ff 34 	ld.w	r11,r7[-204]
800029a6:	ee fc ff 2c 	ld.w	r12,r7[-212]
800029aa:	f6 0c 06 48 	mulu.d	r8,r11,r12
800029ae:	12 0a       	add	r10,r9
800029b0:	14 99       	mov	r9,r10
800029b2:	ee 7a 42 3f 	mov	r10,999999
800029b6:	30 0b       	mov	r11,0
800029b8:	f0 0a 00 0a 	add	r10,r8,r10
800029bc:	f2 0b 00 4b 	adc	r11,r9,r11
800029c0:	ee 78 42 40 	mov	r8,1000000
800029c4:	30 09       	mov	r9,0
800029c6:	f0 1f 00 ec 	mcall	80002d74 <OWWriteBit+0x5c0>
800029ca:	14 98       	mov	r8,r10
800029cc:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800029ce:	ef 48 ff b4 	st.w	r7[-76],r8
800029d2:	ee c8 00 a4 	sub	r8,r7,164
800029d6:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800029da:	e1 b8 00 42 	mfsr	r8,0x108
800029de:	10 99       	mov	r9,r8
800029e0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800029e4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800029e6:	ee f8 ff b0 	ld.w	r8,r7[-80]
800029ea:	70 09       	ld.w	r9,r8[0x0]
800029ec:	ee f8 ff b4 	ld.w	r8,r7[-76]
800029f0:	10 09       	add	r9,r8
800029f2:	ee f8 ff b0 	ld.w	r8,r7[-80]
800029f6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800029f8:	ee f9 ff b0 	ld.w	r9,r7[-80]
800029fc:	30 08       	mov	r8,0
800029fe:	f3 68 00 08 	st.b	r9[8],r8
80002a02:	ee c8 00 a4 	sub	r8,r7,164
80002a06:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a0a:	e1 b8 00 42 	mfsr	r8,0x108
80002a0e:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002a12:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a16:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a1a:	30 28       	mov	r8,2
80002a1c:	f0 09 18 00 	cp.b	r9,r8
80002a20:	c0 31       	brne	80002a26 <OWWriteBit+0x272>
    return false;
80002a22:	30 08       	mov	r8,0
80002a24:	c4 38       	rjmp	80002aaa <OWWriteBit+0x2f6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002a26:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a2a:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a2e:	30 18       	mov	r8,1
80002a30:	f0 09 18 00 	cp.b	r9,r8
80002a34:	c0 31       	brne	80002a3a <OWWriteBit+0x286>
    return true;
80002a36:	30 18       	mov	r8,1
80002a38:	c3 98       	rjmp	80002aaa <OWWriteBit+0x2f6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002a3a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a3e:	70 09       	ld.w	r9,r8[0x0]
80002a40:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a44:	70 18       	ld.w	r8,r8[0x4]
80002a46:	10 39       	cp.w	r9,r8
80002a48:	e0 88 00 1a 	brls	80002a7c <OWWriteBit+0x2c8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002a4c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a50:	70 08       	ld.w	r8,r8[0x0]
80002a52:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002a56:	10 39       	cp.w	r9,r8
80002a58:	c1 02       	brcc	80002a78 <OWWriteBit+0x2c4>
80002a5a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a5e:	70 18       	ld.w	r8,r8[0x4]
80002a60:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002a64:	10 39       	cp.w	r9,r8
80002a66:	e0 88 00 09 	brls	80002a78 <OWWriteBit+0x2c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002a6a:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002a6e:	30 18       	mov	r8,1
80002a70:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002a74:	30 18       	mov	r8,1
80002a76:	c1 a8       	rjmp	80002aaa <OWWriteBit+0x2f6>
    }
    return false;
80002a78:	30 08       	mov	r8,0
80002a7a:	c1 88       	rjmp	80002aaa <OWWriteBit+0x2f6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002a7c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a80:	70 08       	ld.w	r8,r8[0x0]
80002a82:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002a86:	10 39       	cp.w	r9,r8
80002a88:	c0 93       	brcs	80002a9a <OWWriteBit+0x2e6>
80002a8a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a8e:	70 18       	ld.w	r8,r8[0x4]
80002a90:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002a94:	10 39       	cp.w	r9,r8
80002a96:	e0 88 00 09 	brls	80002aa8 <OWWriteBit+0x2f4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002a9a:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002a9e:	30 18       	mov	r8,1
80002aa0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002aa4:	30 18       	mov	r8,1
80002aa6:	c0 28       	rjmp	80002aaa <OWWriteBit+0x2f6>
    }
    return false;
80002aa8:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002aaa:	58 08       	cp.w	r8,0
80002aac:	ca b0       	breq	80002a02 <OWWriteBit+0x24e>
80002aae:	c5 c9       	rjmp	80002d66 <OWWriteBit+0x5b2>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
80002ab0:	ef 38 ff 4c 	ld.ub	r8,r7[-180]
80002ab4:	10 9c       	mov	r12,r8
80002ab6:	f0 1f 00 ae 	mcall	80002d6c <OWWriteBit+0x5b8>
		cpu_delay_us(C, 8000000);
80002aba:	fe f8 02 c6 	ld.w	r8,pc[710]
80002abe:	70 08       	ld.w	r8,r8[0x0]
80002ac0:	ef 48 ff c4 	st.w	r7[-60],r8
80002ac4:	e0 68 12 00 	mov	r8,4608
80002ac8:	ea 18 00 7a 	orh	r8,0x7a
80002acc:	ef 48 ff c0 	st.w	r7[-64],r8
80002ad0:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002ad4:	ef 48 ff cc 	st.w	r7[-52],r8
80002ad8:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002adc:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002ae0:	ee fb ff cc 	ld.w	r11,r7[-52]
80002ae4:	ef 4b ff 44 	st.w	r7[-188],r11
80002ae8:	30 09       	mov	r9,0
80002aea:	ef 49 ff 40 	st.w	r7[-192],r9
80002aee:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002af2:	ef 48 ff 3c 	st.w	r7[-196],r8
80002af6:	30 0c       	mov	r12,0
80002af8:	ef 4c ff 38 	st.w	r7[-200],r12
80002afc:	ee fa ff 40 	ld.w	r10,r7[-192]
80002b00:	ee fb ff 3c 	ld.w	r11,r7[-196]
80002b04:	b7 3a       	mul	r10,r11
80002b06:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002b0a:	ee f9 ff 44 	ld.w	r9,r7[-188]
80002b0e:	b3 38       	mul	r8,r9
80002b10:	10 0a       	add	r10,r8
80002b12:	ee fc ff 44 	ld.w	r12,r7[-188]
80002b16:	ee fb ff 3c 	ld.w	r11,r7[-196]
80002b1a:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002b1e:	12 0a       	add	r10,r9
80002b20:	14 99       	mov	r9,r10
80002b22:	ee 7a 42 3f 	mov	r10,999999
80002b26:	30 0b       	mov	r11,0
80002b28:	f0 0a 00 0a 	add	r10,r8,r10
80002b2c:	f2 0b 00 4b 	adc	r11,r9,r11
80002b30:	ee 78 42 40 	mov	r8,1000000
80002b34:	30 09       	mov	r9,0
80002b36:	f0 1f 00 90 	mcall	80002d74 <OWWriteBit+0x5c0>
80002b3a:	14 98       	mov	r8,r10
80002b3c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002b3e:	ef 48 ff d4 	st.w	r7[-44],r8
80002b42:	ee c8 00 98 	sub	r8,r7,152
80002b46:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002b4a:	e1 b8 00 42 	mfsr	r8,0x108
80002b4e:	10 99       	mov	r9,r8
80002b50:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002b54:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002b56:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002b5a:	70 09       	ld.w	r9,r8[0x0]
80002b5c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002b60:	10 09       	add	r9,r8
80002b62:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002b66:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002b68:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002b6c:	30 08       	mov	r8,0
80002b6e:	f3 68 00 08 	st.b	r9[8],r8
80002b72:	ee c8 00 98 	sub	r8,r7,152
80002b76:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002b7a:	e1 b8 00 42 	mfsr	r8,0x108
80002b7e:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002b82:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002b86:	f1 39 00 08 	ld.ub	r9,r8[8]
80002b8a:	30 28       	mov	r8,2
80002b8c:	f0 09 18 00 	cp.b	r9,r8
80002b90:	c0 31       	brne	80002b96 <OWWriteBit+0x3e2>
    return false;
80002b92:	30 08       	mov	r8,0
80002b94:	c4 38       	rjmp	80002c1a <OWWriteBit+0x466>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002b96:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002b9a:	f1 39 00 08 	ld.ub	r9,r8[8]
80002b9e:	30 18       	mov	r8,1
80002ba0:	f0 09 18 00 	cp.b	r9,r8
80002ba4:	c0 31       	brne	80002baa <OWWriteBit+0x3f6>
    return true;
80002ba6:	30 18       	mov	r8,1
80002ba8:	c3 98       	rjmp	80002c1a <OWWriteBit+0x466>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002baa:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bae:	70 09       	ld.w	r9,r8[0x0]
80002bb0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bb4:	70 18       	ld.w	r8,r8[0x4]
80002bb6:	10 39       	cp.w	r9,r8
80002bb8:	e0 88 00 1a 	brls	80002bec <OWWriteBit+0x438>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002bbc:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bc0:	70 08       	ld.w	r8,r8[0x0]
80002bc2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002bc6:	10 39       	cp.w	r9,r8
80002bc8:	c1 02       	brcc	80002be8 <OWWriteBit+0x434>
80002bca:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bce:	70 18       	ld.w	r8,r8[0x4]
80002bd0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002bd4:	10 39       	cp.w	r9,r8
80002bd6:	e0 88 00 09 	brls	80002be8 <OWWriteBit+0x434>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002bda:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002bde:	30 18       	mov	r8,1
80002be0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002be4:	30 18       	mov	r8,1
80002be6:	c1 a8       	rjmp	80002c1a <OWWriteBit+0x466>
    }
    return false;
80002be8:	30 08       	mov	r8,0
80002bea:	c1 88       	rjmp	80002c1a <OWWriteBit+0x466>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002bec:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bf0:	70 08       	ld.w	r8,r8[0x0]
80002bf2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002bf6:	10 39       	cp.w	r9,r8
80002bf8:	c0 93       	brcs	80002c0a <OWWriteBit+0x456>
80002bfa:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bfe:	70 18       	ld.w	r8,r8[0x4]
80002c00:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c04:	10 39       	cp.w	r9,r8
80002c06:	e0 88 00 09 	brls	80002c18 <OWWriteBit+0x464>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c0a:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c0e:	30 18       	mov	r8,1
80002c10:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002c14:	30 18       	mov	r8,1
80002c16:	c0 28       	rjmp	80002c1a <OWWriteBit+0x466>
    }
    return false;
80002c18:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002c1a:	58 08       	cp.w	r8,0
80002c1c:	ca b0       	breq	80002b72 <OWWriteBit+0x3be>
		release_the_bus(idx);
80002c1e:	ef 38 ff 4c 	ld.ub	r8,r7[-180]
80002c22:	10 9c       	mov	r12,r8
80002c24:	f0 1f 00 55 	mcall	80002d78 <OWWriteBit+0x5c4>
		cpu_delay_us(D, 8000000);
80002c28:	4d 78       	lddpc	r8,80002d84 <OWWriteBit+0x5d0>
80002c2a:	70 08       	ld.w	r8,r8[0x0]
80002c2c:	ef 48 ff e4 	st.w	r7[-28],r8
80002c30:	e0 68 12 00 	mov	r8,4608
80002c34:	ea 18 00 7a 	orh	r8,0x7a
80002c38:	ef 48 ff e0 	st.w	r7[-32],r8
80002c3c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002c40:	ef 48 ff ec 	st.w	r7[-20],r8
80002c44:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002c48:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002c4c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002c50:	30 01       	mov	r1,0
80002c52:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002c56:	30 03       	mov	r3,0
80002c58:	e2 02 02 4a 	mul	r10,r1,r2
80002c5c:	e6 00 02 48 	mul	r8,r3,r0
80002c60:	10 0a       	add	r10,r8
80002c62:	e0 02 06 48 	mulu.d	r8,r0,r2
80002c66:	12 0a       	add	r10,r9
80002c68:	14 99       	mov	r9,r10
80002c6a:	ee 7a 42 3f 	mov	r10,999999
80002c6e:	30 0b       	mov	r11,0
80002c70:	f0 0a 00 0a 	add	r10,r8,r10
80002c74:	f2 0b 00 4b 	adc	r11,r9,r11
80002c78:	ee 78 42 40 	mov	r8,1000000
80002c7c:	30 09       	mov	r9,0
80002c7e:	f0 1f 00 3e 	mcall	80002d74 <OWWriteBit+0x5c0>
80002c82:	14 98       	mov	r8,r10
80002c84:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002c86:	ef 48 ff f4 	st.w	r7[-12],r8
80002c8a:	ee c8 00 8c 	sub	r8,r7,140
80002c8e:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c92:	e1 b8 00 42 	mfsr	r8,0x108
80002c96:	10 99       	mov	r9,r8
80002c98:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c9c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002c9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ca2:	70 09       	ld.w	r9,r8[0x0]
80002ca4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002ca8:	10 09       	add	r9,r8
80002caa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002cae:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002cb0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002cb4:	30 08       	mov	r8,0
80002cb6:	f3 68 00 08 	st.b	r9[8],r8
80002cba:	ee c8 00 8c 	sub	r8,r7,140
80002cbe:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002cc2:	e1 b8 00 42 	mfsr	r8,0x108
80002cc6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002cca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cce:	f1 39 00 08 	ld.ub	r9,r8[8]
80002cd2:	30 28       	mov	r8,2
80002cd4:	f0 09 18 00 	cp.b	r9,r8
80002cd8:	c0 31       	brne	80002cde <OWWriteBit+0x52a>
    return false;
80002cda:	30 08       	mov	r8,0
80002cdc:	c4 38       	rjmp	80002d62 <OWWriteBit+0x5ae>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002cde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ce2:	f1 39 00 08 	ld.ub	r9,r8[8]
80002ce6:	30 18       	mov	r8,1
80002ce8:	f0 09 18 00 	cp.b	r9,r8
80002cec:	c0 31       	brne	80002cf2 <OWWriteBit+0x53e>
    return true;
80002cee:	30 18       	mov	r8,1
80002cf0:	c3 98       	rjmp	80002d62 <OWWriteBit+0x5ae>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002cf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cf6:	70 09       	ld.w	r9,r8[0x0]
80002cf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cfc:	70 18       	ld.w	r8,r8[0x4]
80002cfe:	10 39       	cp.w	r9,r8
80002d00:	e0 88 00 1a 	brls	80002d34 <OWWriteBit+0x580>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d08:	70 08       	ld.w	r8,r8[0x0]
80002d0a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d0e:	10 39       	cp.w	r9,r8
80002d10:	c1 02       	brcc	80002d30 <OWWriteBit+0x57c>
80002d12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d16:	70 18       	ld.w	r8,r8[0x4]
80002d18:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d1c:	10 39       	cp.w	r9,r8
80002d1e:	e0 88 00 09 	brls	80002d30 <OWWriteBit+0x57c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002d22:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d26:	30 18       	mov	r8,1
80002d28:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002d2c:	30 18       	mov	r8,1
80002d2e:	c1 a8       	rjmp	80002d62 <OWWriteBit+0x5ae>
    }
    return false;
80002d30:	30 08       	mov	r8,0
80002d32:	c1 88       	rjmp	80002d62 <OWWriteBit+0x5ae>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002d34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d38:	70 08       	ld.w	r8,r8[0x0]
80002d3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d3e:	10 39       	cp.w	r9,r8
80002d40:	c0 93       	brcs	80002d52 <OWWriteBit+0x59e>
80002d42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d46:	70 18       	ld.w	r8,r8[0x4]
80002d48:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d4c:	10 39       	cp.w	r9,r8
80002d4e:	e0 88 00 09 	brls	80002d60 <OWWriteBit+0x5ac>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002d52:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d56:	30 18       	mov	r8,1
80002d58:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002d5c:	30 18       	mov	r8,1
80002d5e:	c0 28       	rjmp	80002d62 <OWWriteBit+0x5ae>
    }
    return false;
80002d60:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002d62:	58 08       	cp.w	r8,0
80002d64:	ca b0       	breq	80002cba <OWWriteBit+0x506>
	}
}
80002d66:	2c 6d       	sub	sp,-232
80002d68:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002d6c:	80 00       	ld.sh	r0,r0[0x0]
80002d6e:	20 5c       	sub	r12,5
80002d70:	00 00       	add	r0,r0
80002d72:	02 b8       	st.h	r1++,r8
80002d74:	80 00       	ld.sh	r0,r0[0x0]
80002d76:	9c 9e       	ld.uh	lr,lr[0x2]
80002d78:	80 00       	ld.sh	r0,r0[0x0]
80002d7a:	20 94       	sub	r4,9
80002d7c:	00 00       	add	r0,r0
80002d7e:	02 bc       	st.h	r1++,r12
80002d80:	00 00       	add	r0,r0
80002d82:	02 c4       	st.b	r1++,r4
80002d84:	00 00       	add	r0,r0
80002d86:	02 b4       	st.h	r1++,r4

80002d88 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
80002d88:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002d8c:	1a 97       	mov	r7,sp
80002d8e:	fa cd 00 ac 	sub	sp,sp,172
80002d92:	18 98       	mov	r8,r12
80002d94:	ef 68 ff 74 	st.b	r7[-140],r8
	int result;

	drive_DQ_low(idx);
80002d98:	ef 38 ff 74 	ld.ub	r8,r7[-140]
80002d9c:	10 9c       	mov	r12,r8
80002d9e:	f0 1f 01 0d 	mcall	800031d0 <OWReadBit+0x448>
	cpu_delay_us(A, 8000000);
80002da2:	fe f8 04 32 	ld.w	r8,pc[1074]
80002da6:	70 08       	ld.w	r8,r8[0x0]
80002da8:	ef 48 ff a4 	st.w	r7[-92],r8
80002dac:	e0 68 12 00 	mov	r8,4608
80002db0:	ea 18 00 7a 	orh	r8,0x7a
80002db4:	ef 48 ff a0 	st.w	r7[-96],r8
80002db8:	ee f8 ff a4 	ld.w	r8,r7[-92]
80002dbc:	ef 48 ff ac 	st.w	r7[-84],r8
80002dc0:	ee f8 ff a0 	ld.w	r8,r7[-96]
80002dc4:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002dc8:	ee fc ff ac 	ld.w	r12,r7[-84]
80002dcc:	ef 4c ff 60 	st.w	r7[-160],r12
80002dd0:	30 0b       	mov	r11,0
80002dd2:	ef 4b ff 5c 	st.w	r7[-164],r11
80002dd6:	ee f9 ff a8 	ld.w	r9,r7[-88]
80002dda:	ef 49 ff 58 	st.w	r7[-168],r9
80002dde:	30 08       	mov	r8,0
80002de0:	ef 48 ff 54 	st.w	r7[-172],r8
80002de4:	ee fa ff 5c 	ld.w	r10,r7[-164]
80002de8:	ee fc ff 58 	ld.w	r12,r7[-168]
80002dec:	b9 3a       	mul	r10,r12
80002dee:	ee f8 ff 54 	ld.w	r8,r7[-172]
80002df2:	ee fb ff 60 	ld.w	r11,r7[-160]
80002df6:	b7 38       	mul	r8,r11
80002df8:	10 0a       	add	r10,r8
80002dfa:	ee fc ff 60 	ld.w	r12,r7[-160]
80002dfe:	ee fb ff 58 	ld.w	r11,r7[-168]
80002e02:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002e06:	12 0a       	add	r10,r9
80002e08:	14 99       	mov	r9,r10
80002e0a:	ee 7a 42 3f 	mov	r10,999999
80002e0e:	30 0b       	mov	r11,0
80002e10:	f0 0a 00 0a 	add	r10,r8,r10
80002e14:	f2 0b 00 4b 	adc	r11,r9,r11
80002e18:	ee 78 42 40 	mov	r8,1000000
80002e1c:	30 09       	mov	r9,0
80002e1e:	f0 1f 00 ef 	mcall	800031d8 <OWReadBit+0x450>
80002e22:	14 98       	mov	r8,r10
80002e24:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002e26:	ef 48 ff b4 	st.w	r7[-76],r8
80002e2a:	ee c8 00 88 	sub	r8,r7,136
80002e2e:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002e32:	e1 b8 00 42 	mfsr	r8,0x108
80002e36:	10 99       	mov	r9,r8
80002e38:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002e3c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002e3e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002e42:	70 09       	ld.w	r9,r8[0x0]
80002e44:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002e48:	10 09       	add	r9,r8
80002e4a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002e4e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002e50:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002e54:	30 08       	mov	r8,0
80002e56:	f3 68 00 08 	st.b	r9[8],r8
80002e5a:	ee c8 00 88 	sub	r8,r7,136
80002e5e:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002e62:	e1 b8 00 42 	mfsr	r8,0x108
80002e66:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002e6a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002e6e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002e72:	30 28       	mov	r8,2
80002e74:	f0 09 18 00 	cp.b	r9,r8
80002e78:	c0 31       	brne	80002e7e <OWReadBit+0xf6>
    return false;
80002e7a:	30 08       	mov	r8,0
80002e7c:	c4 38       	rjmp	80002f02 <OWReadBit+0x17a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002e7e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002e82:	f1 39 00 08 	ld.ub	r9,r8[8]
80002e86:	30 18       	mov	r8,1
80002e88:	f0 09 18 00 	cp.b	r9,r8
80002e8c:	c0 31       	brne	80002e92 <OWReadBit+0x10a>
    return true;
80002e8e:	30 18       	mov	r8,1
80002e90:	c3 98       	rjmp	80002f02 <OWReadBit+0x17a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002e92:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002e96:	70 09       	ld.w	r9,r8[0x0]
80002e98:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002e9c:	70 18       	ld.w	r8,r8[0x4]
80002e9e:	10 39       	cp.w	r9,r8
80002ea0:	e0 88 00 1a 	brls	80002ed4 <OWReadBit+0x14c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ea4:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ea8:	70 08       	ld.w	r8,r8[0x0]
80002eaa:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002eae:	10 39       	cp.w	r9,r8
80002eb0:	c1 02       	brcc	80002ed0 <OWReadBit+0x148>
80002eb2:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002eb6:	70 18       	ld.w	r8,r8[0x4]
80002eb8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002ebc:	10 39       	cp.w	r9,r8
80002ebe:	e0 88 00 09 	brls	80002ed0 <OWReadBit+0x148>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002ec2:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002ec6:	30 18       	mov	r8,1
80002ec8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ecc:	30 18       	mov	r8,1
80002ece:	c1 a8       	rjmp	80002f02 <OWReadBit+0x17a>
    }
    return false;
80002ed0:	30 08       	mov	r8,0
80002ed2:	c1 88       	rjmp	80002f02 <OWReadBit+0x17a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002ed4:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ed8:	70 08       	ld.w	r8,r8[0x0]
80002eda:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002ede:	10 39       	cp.w	r9,r8
80002ee0:	c0 93       	brcs	80002ef2 <OWReadBit+0x16a>
80002ee2:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ee6:	70 18       	ld.w	r8,r8[0x4]
80002ee8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002eec:	10 39       	cp.w	r9,r8
80002eee:	e0 88 00 09 	brls	80002f00 <OWReadBit+0x178>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002ef2:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002ef6:	30 18       	mov	r8,1
80002ef8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002efc:	30 18       	mov	r8,1
80002efe:	c0 28       	rjmp	80002f02 <OWReadBit+0x17a>
    }
    return false;
80002f00:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002f02:	58 08       	cp.w	r8,0
80002f04:	ca b0       	breq	80002e5a <OWReadBit+0xd2>
	release_the_bus(idx);
80002f06:	ef 38 ff 74 	ld.ub	r8,r7[-140]
80002f0a:	10 9c       	mov	r12,r8
80002f0c:	f0 1f 00 b4 	mcall	800031dc <OWReadBit+0x454>
	cpu_delay_us(E, 8000000);
80002f10:	fe f8 02 d0 	ld.w	r8,pc[720]
80002f14:	70 08       	ld.w	r8,r8[0x0]
80002f16:	ef 48 ff c4 	st.w	r7[-60],r8
80002f1a:	e0 68 12 00 	mov	r8,4608
80002f1e:	ea 18 00 7a 	orh	r8,0x7a
80002f22:	ef 48 ff c0 	st.w	r7[-64],r8
80002f26:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002f2a:	ef 48 ff cc 	st.w	r7[-52],r8
80002f2e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002f32:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002f36:	ee f9 ff cc 	ld.w	r9,r7[-52]
80002f3a:	ef 49 ff 70 	st.w	r7[-144],r9
80002f3e:	30 08       	mov	r8,0
80002f40:	ef 48 ff 6c 	st.w	r7[-148],r8
80002f44:	ee fc ff c8 	ld.w	r12,r7[-56]
80002f48:	ef 4c ff 68 	st.w	r7[-152],r12
80002f4c:	30 0b       	mov	r11,0
80002f4e:	ef 4b ff 64 	st.w	r7[-156],r11
80002f52:	ee fa ff 6c 	ld.w	r10,r7[-148]
80002f56:	ee f9 ff 68 	ld.w	r9,r7[-152]
80002f5a:	b3 3a       	mul	r10,r9
80002f5c:	ee f8 ff 64 	ld.w	r8,r7[-156]
80002f60:	ee fc ff 70 	ld.w	r12,r7[-144]
80002f64:	b9 38       	mul	r8,r12
80002f66:	10 0a       	add	r10,r8
80002f68:	ee fb ff 70 	ld.w	r11,r7[-144]
80002f6c:	ee fc ff 68 	ld.w	r12,r7[-152]
80002f70:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002f74:	12 0a       	add	r10,r9
80002f76:	14 99       	mov	r9,r10
80002f78:	ee 7a 42 3f 	mov	r10,999999
80002f7c:	30 0b       	mov	r11,0
80002f7e:	f0 0a 00 0a 	add	r10,r8,r10
80002f82:	f2 0b 00 4b 	adc	r11,r9,r11
80002f86:	ee 78 42 40 	mov	r8,1000000
80002f8a:	30 09       	mov	r9,0
80002f8c:	f0 1f 00 93 	mcall	800031d8 <OWReadBit+0x450>
80002f90:	14 98       	mov	r8,r10
80002f92:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002f94:	ef 48 ff d4 	st.w	r7[-44],r8
80002f98:	ee c8 00 7c 	sub	r8,r7,124
80002f9c:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002fa0:	e1 b8 00 42 	mfsr	r8,0x108
80002fa4:	10 99       	mov	r9,r8
80002fa6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002faa:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002fac:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002fb0:	70 09       	ld.w	r9,r8[0x0]
80002fb2:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fb6:	10 09       	add	r9,r8
80002fb8:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002fbc:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002fbe:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002fc2:	30 08       	mov	r8,0
80002fc4:	f3 68 00 08 	st.b	r9[8],r8
80002fc8:	ee c8 00 7c 	sub	r8,r7,124
80002fcc:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002fd0:	e1 b8 00 42 	mfsr	r8,0x108
80002fd4:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002fd8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002fdc:	f1 39 00 08 	ld.ub	r9,r8[8]
80002fe0:	30 28       	mov	r8,2
80002fe2:	f0 09 18 00 	cp.b	r9,r8
80002fe6:	c0 31       	brne	80002fec <OWReadBit+0x264>
    return false;
80002fe8:	30 08       	mov	r8,0
80002fea:	c4 38       	rjmp	80003070 <OWReadBit+0x2e8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002fec:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002ff0:	f1 39 00 08 	ld.ub	r9,r8[8]
80002ff4:	30 18       	mov	r8,1
80002ff6:	f0 09 18 00 	cp.b	r9,r8
80002ffa:	c0 31       	brne	80003000 <OWReadBit+0x278>
    return true;
80002ffc:	30 18       	mov	r8,1
80002ffe:	c3 98       	rjmp	80003070 <OWReadBit+0x2e8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003000:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003004:	70 09       	ld.w	r9,r8[0x0]
80003006:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000300a:	70 18       	ld.w	r8,r8[0x4]
8000300c:	10 39       	cp.w	r9,r8
8000300e:	e0 88 00 1a 	brls	80003042 <OWReadBit+0x2ba>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003012:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003016:	70 08       	ld.w	r8,r8[0x0]
80003018:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000301c:	10 39       	cp.w	r9,r8
8000301e:	c1 02       	brcc	8000303e <OWReadBit+0x2b6>
80003020:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003024:	70 18       	ld.w	r8,r8[0x4]
80003026:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000302a:	10 39       	cp.w	r9,r8
8000302c:	e0 88 00 09 	brls	8000303e <OWReadBit+0x2b6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003030:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003034:	30 18       	mov	r8,1
80003036:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000303a:	30 18       	mov	r8,1
8000303c:	c1 a8       	rjmp	80003070 <OWReadBit+0x2e8>
    }
    return false;
8000303e:	30 08       	mov	r8,0
80003040:	c1 88       	rjmp	80003070 <OWReadBit+0x2e8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003042:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003046:	70 08       	ld.w	r8,r8[0x0]
80003048:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000304c:	10 39       	cp.w	r9,r8
8000304e:	c0 93       	brcs	80003060 <OWReadBit+0x2d8>
80003050:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003054:	70 18       	ld.w	r8,r8[0x4]
80003056:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000305a:	10 39       	cp.w	r9,r8
8000305c:	e0 88 00 09 	brls	8000306e <OWReadBit+0x2e6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003060:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003064:	30 18       	mov	r8,1
80003066:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000306a:	30 18       	mov	r8,1
8000306c:	c0 28       	rjmp	80003070 <OWReadBit+0x2e8>
    }
    return false;
8000306e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80003070:	58 08       	cp.w	r8,0
80003072:	ca b0       	breq	80002fc8 <OWReadBit+0x240>
	result = sample_line(idx);
80003074:	ef 38 ff 74 	ld.ub	r8,r7[-140]
80003078:	10 9c       	mov	r12,r8
8000307a:	f0 1f 00 5b 	mcall	800031e4 <OWReadBit+0x45c>
8000307e:	18 98       	mov	r8,r12
80003080:	ef 48 ff 9c 	st.w	r7[-100],r8
	cpu_delay_us(F, 8000000); // Complete the time slot and 10us recovery
80003084:	4d 98       	lddpc	r8,800031e8 <OWReadBit+0x460>
80003086:	70 08       	ld.w	r8,r8[0x0]
80003088:	ef 48 ff e4 	st.w	r7[-28],r8
8000308c:	e0 68 12 00 	mov	r8,4608
80003090:	ea 18 00 7a 	orh	r8,0x7a
80003094:	ef 48 ff e0 	st.w	r7[-32],r8
80003098:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000309c:	ef 48 ff ec 	st.w	r7[-20],r8
800030a0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800030a4:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800030a8:	ee f0 ff ec 	ld.w	r0,r7[-20]
800030ac:	30 01       	mov	r1,0
800030ae:	ee f2 ff e8 	ld.w	r2,r7[-24]
800030b2:	30 03       	mov	r3,0
800030b4:	e2 02 02 4a 	mul	r10,r1,r2
800030b8:	e6 00 02 48 	mul	r8,r3,r0
800030bc:	10 0a       	add	r10,r8
800030be:	e0 02 06 48 	mulu.d	r8,r0,r2
800030c2:	12 0a       	add	r10,r9
800030c4:	14 99       	mov	r9,r10
800030c6:	ee 7a 42 3f 	mov	r10,999999
800030ca:	30 0b       	mov	r11,0
800030cc:	f0 0a 00 0a 	add	r10,r8,r10
800030d0:	f2 0b 00 4b 	adc	r11,r9,r11
800030d4:	ee 78 42 40 	mov	r8,1000000
800030d8:	30 09       	mov	r9,0
800030da:	f0 1f 00 40 	mcall	800031d8 <OWReadBit+0x450>
800030de:	14 98       	mov	r8,r10
800030e0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800030e2:	ef 48 ff f4 	st.w	r7[-12],r8
800030e6:	ee c8 00 70 	sub	r8,r7,112
800030ea:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800030ee:	e1 b8 00 42 	mfsr	r8,0x108
800030f2:	10 99       	mov	r9,r8
800030f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800030f8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800030fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800030fe:	70 09       	ld.w	r9,r8[0x0]
80003100:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003104:	10 09       	add	r9,r8
80003106:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000310a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000310c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003110:	30 08       	mov	r8,0
80003112:	f3 68 00 08 	st.b	r9[8],r8
80003116:	ee c8 00 70 	sub	r8,r7,112
8000311a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000311e:	e1 b8 00 42 	mfsr	r8,0x108
80003122:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003126:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000312a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000312e:	30 28       	mov	r8,2
80003130:	f0 09 18 00 	cp.b	r9,r8
80003134:	c0 31       	brne	8000313a <OWReadBit+0x3b2>
    return false;
80003136:	30 08       	mov	r8,0
80003138:	c4 38       	rjmp	800031be <OWReadBit+0x436>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000313a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000313e:	f1 39 00 08 	ld.ub	r9,r8[8]
80003142:	30 18       	mov	r8,1
80003144:	f0 09 18 00 	cp.b	r9,r8
80003148:	c0 31       	brne	8000314e <OWReadBit+0x3c6>
    return true;
8000314a:	30 18       	mov	r8,1
8000314c:	c3 98       	rjmp	800031be <OWReadBit+0x436>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000314e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003152:	70 09       	ld.w	r9,r8[0x0]
80003154:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003158:	70 18       	ld.w	r8,r8[0x4]
8000315a:	10 39       	cp.w	r9,r8
8000315c:	e0 88 00 1a 	brls	80003190 <OWReadBit+0x408>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003160:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003164:	70 08       	ld.w	r8,r8[0x0]
80003166:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000316a:	10 39       	cp.w	r9,r8
8000316c:	c1 02       	brcc	8000318c <OWReadBit+0x404>
8000316e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003172:	70 18       	ld.w	r8,r8[0x4]
80003174:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003178:	10 39       	cp.w	r9,r8
8000317a:	e0 88 00 09 	brls	8000318c <OWReadBit+0x404>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000317e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003182:	30 18       	mov	r8,1
80003184:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003188:	30 18       	mov	r8,1
8000318a:	c1 a8       	rjmp	800031be <OWReadBit+0x436>
    }
    return false;
8000318c:	30 08       	mov	r8,0
8000318e:	c1 88       	rjmp	800031be <OWReadBit+0x436>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003190:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003194:	70 08       	ld.w	r8,r8[0x0]
80003196:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000319a:	10 39       	cp.w	r9,r8
8000319c:	c0 93       	brcs	800031ae <OWReadBit+0x426>
8000319e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031a2:	70 18       	ld.w	r8,r8[0x4]
800031a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800031a8:	10 39       	cp.w	r9,r8
800031aa:	e0 88 00 09 	brls	800031bc <OWReadBit+0x434>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800031ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800031b2:	30 18       	mov	r8,1
800031b4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800031b8:	30 18       	mov	r8,1
800031ba:	c0 28       	rjmp	800031be <OWReadBit+0x436>
    }
    return false;
800031bc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800031be:	58 08       	cp.w	r8,0
800031c0:	ca b0       	breq	80003116 <OWReadBit+0x38e>

	return result;
800031c2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
}
800031c6:	10 9c       	mov	r12,r8
800031c8:	2d 5d       	sub	sp,-172
800031ca:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800031ce:	00 00       	add	r0,r0
800031d0:	80 00       	ld.sh	r0,r0[0x0]
800031d2:	20 5c       	sub	r12,5
800031d4:	00 00       	add	r0,r0
800031d6:	02 b8       	st.h	r1++,r8
800031d8:	80 00       	ld.sh	r0,r0[0x0]
800031da:	9c 9e       	ld.uh	lr,lr[0x2]
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	20 94       	sub	r4,9
800031e0:	00 00       	add	r0,r0
800031e2:	02 d0       	st.w	--r1,r0
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	20 cc       	sub	r12,12
800031e8:	00 00       	add	r0,r0
800031ea:	02 d8       	st.w	--r1,r8

800031ec <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
800031ec:	eb cd 40 80 	pushm	r7,lr
800031f0:	1a 97       	mov	r7,sp
800031f2:	20 3d       	sub	sp,12
800031f4:	18 98       	mov	r8,r12
800031f6:	ef 4b ff f4 	st.w	r7[-12],r11
800031fa:	ef 68 ff f8 	st.b	r7[-8],r8
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
800031fe:	30 08       	mov	r8,0
80003200:	ef 48 ff fc 	st.w	r7[-4],r8
80003204:	c1 58       	rjmp	8000322e <OWWriteByte+0x42>
	{
		OWWriteBit(idx, data & 0x01);
80003206:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000320a:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
8000320e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003212:	12 9b       	mov	r11,r9
80003214:	10 9c       	mov	r12,r8
80003216:	f0 1f 00 0b 	mcall	80003240 <OWWriteByte+0x54>

		// shift the data byte for the next bit
		data >>= 1;
8000321a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000321e:	a1 58       	asr	r8,0x1
80003220:	ef 48 ff f4 	st.w	r7[-12],r8
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
80003224:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003228:	2f f8       	sub	r8,-1
8000322a:	ef 48 ff fc 	st.w	r7[-4],r8
8000322e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003232:	58 78       	cp.w	r8,7
80003234:	fe 9a ff e9 	brle	80003206 <OWWriteByte+0x1a>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
80003238:	2f dd       	sub	sp,-12
8000323a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000323e:	00 00       	add	r0,r0
80003240:	80 00       	ld.sh	r0,r0[0x0]
80003242:	27 b4       	sub	r4,123

80003244 <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
80003244:	eb cd 40 80 	pushm	r7,lr
80003248:	1a 97       	mov	r7,sp
8000324a:	20 3d       	sub	sp,12
8000324c:	18 98       	mov	r8,r12
8000324e:	ef 68 ff f4 	st.b	r7[-12],r8
	int loop, result=0;
80003252:	30 08       	mov	r8,0
80003254:	ef 48 ff fc 	st.w	r7[-4],r8

	for (loop = 0; loop < 8; loop++)
80003258:	30 08       	mov	r8,0
8000325a:	ef 48 ff f8 	st.w	r7[-8],r8
8000325e:	c1 88       	rjmp	8000328e <OWReadByte+0x4a>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
80003260:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003264:	a1 58       	asr	r8,0x1
80003266:	ef 48 ff fc 	st.w	r7[-4],r8

		// if result is one, then set MS bit
		if (OWReadBit(idx))
8000326a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000326e:	10 9c       	mov	r12,r8
80003270:	f0 1f 00 0d 	mcall	800032a4 <OWReadByte+0x60>
80003274:	18 98       	mov	r8,r12
80003276:	58 08       	cp.w	r8,0
80003278:	c0 60       	breq	80003284 <OWReadByte+0x40>
		result |= 0x80;
8000327a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000327e:	a7 b8       	sbr	r8,0x7
80003280:	ef 48 ff fc 	st.w	r7[-4],r8
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
80003284:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003288:	2f f8       	sub	r8,-1
8000328a:	ef 48 ff f8 	st.w	r7[-8],r8
8000328e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003292:	58 78       	cp.w	r8,7
80003294:	fe 9a ff e6 	brle	80003260 <OWReadByte+0x1c>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
80003298:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000329c:	10 9c       	mov	r12,r8
8000329e:	2f dd       	sub	sp,-12
800032a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800032a4:	80 00       	ld.sh	r0,r0[0x0]
800032a6:	2d 88       	sub	r8,-40

800032a8 <init_ecdbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_ecdbg_rs232(long pba_hz)
{
800032a8:	eb cd 40 80 	pushm	r7,lr
800032ac:	1a 97       	mov	r7,sp
800032ae:	20 1d       	sub	sp,4
800032b0:	ef 4c ff fc 	st.w	r7[-4],r12
  init_ecdbg_rs232_ex(ECDBG_USART_BAUDRATE, pba_hz);
800032b4:	ee fb ff fc 	ld.w	r11,r7[-4]
800032b8:	e0 7c c2 00 	mov	r12,115200
800032bc:	f0 1f 00 03 	mcall	800032c8 <init_ecdbg_rs232+0x20>
}
800032c0:	2f fd       	sub	sp,-4
800032c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800032c6:	00 00       	add	r0,r0
800032c8:	80 00       	ld.sh	r0,r0[0x0]
800032ca:	32 f0       	mov	r0,47

800032cc <init_display_rs232>:

void init_display_rs232(long pba_hz)
{
800032cc:	eb cd 40 80 	pushm	r7,lr
800032d0:	1a 97       	mov	r7,sp
800032d2:	20 1d       	sub	sp,4
800032d4:	ef 4c ff fc 	st.w	r7[-4],r12
	init_display_rs232_ex(DISPLAY_USART_BAUDRATE, pba_hz);
800032d8:	ee fb ff fc 	ld.w	r11,r7[-4]
800032dc:	e0 6c 12 c0 	mov	r12,4800
800032e0:	f0 1f 00 03 	mcall	800032ec <init_display_rs232+0x20>
}
800032e4:	2f fd       	sub	sp,-4
800032e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800032ea:	00 00       	add	r0,r0
800032ec:	80 00       	ld.sh	r0,r0[0x0]
800032ee:	33 4c       	mov	r12,52

800032f0 <init_ecdbg_rs232_ex>:


void init_ecdbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
800032f0:	eb cd 40 80 	pushm	r7,lr
800032f4:	1a 97       	mov	r7,sp
800032f6:	20 5d       	sub	sp,20
800032f8:	ef 4c ff f0 	st.w	r7[-16],r12
800032fc:	ef 4b ff ec 	st.w	r7[-20],r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80003300:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003304:	ef 48 ff f4 	st.w	r7[-12],r8
80003308:	30 88       	mov	r8,8
8000330a:	ef 68 ff f8 	st.b	r7[-8],r8
8000330e:	30 48       	mov	r8,4
80003310:	ef 68 ff f9 	st.b	r7[-7],r8
80003314:	30 08       	mov	r8,0
80003316:	ef 58 ff fa 	st.h	r7[-6],r8
8000331a:	30 08       	mov	r8,0
8000331c:	ef 68 ff fc 	st.b	r7[-4],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(ECDBG_USART_GPIO_MAP,
80003320:	30 2b       	mov	r11,2
80003322:	48 8c       	lddpc	r12,80003340 <init_ecdbg_rs232_ex+0x50>
80003324:	f0 1f 00 08 	mcall	80003344 <init_ecdbg_rs232_ex+0x54>
                     sizeof(ECDBG_USART_GPIO_MAP) / sizeof(ECDBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(ECDBG_USART, &ecdbg_usart_options, pba_hz);
80003328:	ee c8 00 0c 	sub	r8,r7,12
8000332c:	ee fa ff ec 	ld.w	r10,r7[-20]
80003330:	10 9b       	mov	r11,r8
80003332:	fe 7c 28 00 	mov	r12,-55296
80003336:	f0 1f 00 05 	mcall	80003348 <init_ecdbg_rs232_ex+0x58>
}
8000333a:	2f bd       	sub	sp,-20
8000333c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003340:	80 00       	ld.sh	r0,r0[0x0]
80003342:	a4 10       	st.h	r2[0x2],r0
80003344:	80 00       	ld.sh	r0,r0[0x0]
80003346:	45 ac       	lddsp	r12,sp[0x168]
80003348:	80 00       	ld.sh	r0,r0[0x0]
8000334a:	58 d0       	cp.w	r0,13

8000334c <init_display_rs232_ex>:

void init_display_rs232_ex(unsigned long baudrate, long pba_hz)
{
8000334c:	eb cd 40 80 	pushm	r7,lr
80003350:	1a 97       	mov	r7,sp
80003352:	20 5d       	sub	sp,20
80003354:	ef 4c ff f0 	st.w	r7[-16],r12
80003358:	ef 4b ff ec 	st.w	r7[-20],r11
		.baudrate = baudrate,
		.charlength = 8,
		.paritytype = USART_NO_PARITY,
		.stopbits = USART_1_STOPBIT,
		.channelmode = USART_NORMAL_CHMODE
	};
8000335c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003360:	ef 48 ff f4 	st.w	r7[-12],r8
80003364:	30 88       	mov	r8,8
80003366:	ef 68 ff f8 	st.b	r7[-8],r8
8000336a:	30 48       	mov	r8,4
8000336c:	ef 68 ff f9 	st.b	r7[-7],r8
80003370:	30 08       	mov	r8,0
80003372:	ef 58 ff fa 	st.h	r7[-6],r8
80003376:	30 08       	mov	r8,0
80003378:	ef 68 ff fc 	st.b	r7[-4],r8

	// Setup GPIO for debug USART.
	gpio_enable_module(DISPLAY_USART_GPIO_MAP,
8000337c:	30 2b       	mov	r11,2
8000337e:	48 8c       	lddpc	r12,8000339c <init_display_rs232_ex+0x50>
80003380:	f0 1f 00 08 	mcall	800033a0 <init_display_rs232_ex+0x54>
	sizeof(DISPLAY_USART_GPIO_MAP) / sizeof(DISPLAY_USART_GPIO_MAP[0]));

	// Initialize it in RS232 mode.
	usart_init_rs232(DISPLAY_USART, &display_usart_options, pba_hz);
80003384:	ee c8 00 0c 	sub	r8,r7,12
80003388:	ee fa ff ec 	ld.w	r10,r7[-20]
8000338c:	10 9b       	mov	r11,r8
8000338e:	fc 7c 14 00 	mov	r12,-191488
80003392:	f0 1f 00 05 	mcall	800033a4 <init_display_rs232_ex+0x58>
}
80003396:	2f bd       	sub	sp,-20
80003398:	e3 cd 80 80 	ldm	sp++,r7,pc
8000339c:	80 00       	ld.sh	r0,r0[0x0]
8000339e:	a4 00       	st.h	r2[0x0],r0
800033a0:	80 00       	ld.sh	r0,r0[0x0]
800033a2:	45 ac       	lddsp	r12,sp[0x168]
800033a4:	80 00       	ld.sh	r0,r0[0x0]
800033a6:	58 d0       	cp.w	r0,13

800033a8 <print_ecdbg>:


void print_ecdbg(const char *str)
{
800033a8:	eb cd 40 80 	pushm	r7,lr
800033ac:	1a 97       	mov	r7,sp
800033ae:	20 1d       	sub	sp,4
800033b0:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print(ECDBG_USART, str);
800033b4:	ee fb ff fc 	ld.w	r11,r7[-4]
800033b8:	fe 7c 28 00 	mov	r12,-55296
800033bc:	f0 1f 00 03 	mcall	800033c8 <print_ecdbg+0x20>
}
800033c0:	2f fd       	sub	sp,-4
800033c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800033c6:	00 00       	add	r0,r0
800033c8:	80 00       	ld.sh	r0,r0[0x0]
800033ca:	33 cc       	mov	r12,60

800033cc <print>:
	print_hex(DISPLAY_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
800033cc:	eb cd 40 80 	pushm	r7,lr
800033d0:	1a 97       	mov	r7,sp
800033d2:	20 2d       	sub	sp,8
800033d4:	ef 4c ff fc 	st.w	r7[-4],r12
800033d8:	ef 4b ff f8 	st.w	r7[-8],r11
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
800033dc:	ee fb ff f8 	ld.w	r11,r7[-8]
800033e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800033e4:	f0 1f 00 03 	mcall	800033f0 <print+0x24>
}
800033e8:	2f ed       	sub	sp,-8
800033ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800033ee:	00 00       	add	r0,r0
800033f0:	80 00       	ld.sh	r0,r0[0x0]
800033f2:	5a d8       	cp.w	r8,-19

800033f4 <adcifa_get_calibration_data>:
 * \param adcifa       Base address of the ADCIFA
 * \param p_adcifa_opt Structure for the ADCIFA core configuration
 */
void adcifa_get_calibration_data(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt)
{
800033f4:	eb cd 40 80 	pushm	r7,lr
800033f8:	1a 97       	mov	r7,sp
800033fa:	20 6d       	sub	sp,24
800033fc:	ef 4c ff ec 	st.w	r7[-20],r12
80003400:	ef 4b ff e8 	st.w	r7[-24],r11
	/* Get Offset Calibration */
	int32_t adc_ocal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003404:	e0 68 02 04 	mov	r8,516
80003408:	ea 18 80 80 	orh	r8,0x8080
8000340c:	70 08       	ld.w	r8,r8[0x0]
8000340e:	e6 18 3f 00 	andh	r8,0x3f00,COH
			+ AVR32_FLASHC_FROW_OCAL_WORD)) &
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;
80003412:	b9 48       	asr	r8,0x18
80003414:	ef 48 ff f0 	st.w	r7[-16],r8
	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
80003418:	e0 68 02 04 	mov	r8,516
8000341c:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;

	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003420:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
80003422:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80003426:	ef 48 ff f4 	st.w	r7[-12],r8
	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
8000342a:	e0 68 02 08 	mov	r8,520
8000342e:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;

	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003432:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
80003434:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80003438:	ef 48 ff f8 	st.w	r7[-8],r8

	int32_t adc_gain1
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
8000343c:	e0 68 02 08 	mov	r8,520
80003440:	ea 18 80 80 	orh	r8,0x8080
80003444:	70 08       	ld.w	r8,r8[0x0]
80003446:	e6 18 03 ff 	andh	r8,0x3ff,COH
			+ AVR32_FLASHC_FROW_GAIN1_WORD)) &
			AVR32_FLASHC_FROW_GAIN1_MASK) >>
			AVR32_FLASHC_FROW_GAIN1_OFFSET;
8000344a:	b1 48       	asr	r8,0x10
8000344c:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Get ADC Offset Calibration */
	p_adcifa_opt->offset_calibration_value = adc_ocal;
80003450:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003454:	5c 88       	casts.h	r8
80003456:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000345a:	b2 68       	st.h	r9[0xc],r8

	/* Get ADC Gain Calibration */
	p_adcifa_opt->gain_calibration_value = adc_gcal;
8000345c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003460:	5c 88       	casts.h	r8
80003462:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003466:	b2 58       	st.h	r9[0xa],r8

	/* Get Sample & Hold Gain Calibration for Seq 0 */
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
80003468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000346c:	5c 88       	casts.h	r8
8000346e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003472:	b2 78       	st.h	r9[0xe],r8

	/* Get Sample & Hold Gain Calibration for Seq 1 */
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
80003474:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003478:	5c 88       	casts.h	r8
8000347a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000347e:	f3 58 00 10 	st.h	r9[16],r8
}
80003482:	2f ad       	sub	sp,-24
80003484:	e3 cd 80 80 	ldm	sp++,r7,pc

80003488 <adcifa_configure>:
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt,
		uint32_t pb_hz)
{
80003488:	eb cd 40 80 	pushm	r7,lr
8000348c:	1a 97       	mov	r7,sp
8000348e:	20 3d       	sub	sp,12
80003490:	ef 4c ff fc 	st.w	r7[-4],r12
80003494:	ef 4b ff f8 	st.w	r7[-8],r11
80003498:	ef 4a ff f4 	st.w	r7[-12],r10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
8000349c:	fc 7a 24 00 	mov	r10,-187392
		= (p_adcifa_opt->sleep_mode_enable <<
800034a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034a4:	f1 38 00 08 	ld.ub	r8,r8[8]
800034a8:	f0 09 15 02 	lsl	r9,r8,0x2
			AVR32_ADCIFA_CFG_SLEEP)
			| (p_adcifa_opt->single_sequencer_mode <<
800034ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034b0:	11 e8       	ld.ub	r8,r8[0x6]
800034b2:	a3 78       	lsl	r8,0x3
			AVR32_ADCIFA_CFG_SSMQ)
			| (p_adcifa_opt->free_running_mode_enable <<
800034b4:	10 49       	or	r9,r8
800034b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034ba:	11 f8       	ld.ub	r8,r8[0x7]
800034bc:	a5 68       	lsl	r8,0x4
			AVR32_ADCIFA_CFG_FRM)
			| (p_adcifa_opt->reference_source <<
800034be:	10 49       	or	r9,r8
800034c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034c4:	11 c8       	ld.ub	r8,r8[0x4]
800034c6:	a5 78       	lsl	r8,0x5
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
800034c8:	10 49       	or	r9,r8
800034ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034ce:	11 d8       	ld.ub	r8,r8[0x5]
800034d0:	a7 78       	lsl	r8,0x7
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
800034d2:	10 49       	or	r9,r8
800034d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034d8:	f1 38 00 09 	ld.ub	r8,r8[9]
800034dc:	ab 68       	lsl	r8,0xa
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
800034de:	f3 e8 10 08 	or	r8,r9,r8
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
800034e2:	10 9b       	mov	r11,r8
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
800034e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034e8:	70 09       	ld.w	r9,r8[0x0]
800034ea:	e0 68 4d d3 	mov	r8,19923
800034ee:	ea 18 10 62 	orh	r8,0x1062
800034f2:	f2 08 06 48 	mulu.d	r8,r9,r8
800034f6:	a7 89       	lsr	r9,0x6
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
800034f8:	e0 68 03 e8 	mov	r8,1000
800034fc:	b1 39       	mul	r9,r8
800034fe:	e0 68 4d d3 	mov	r8,19923
80003502:	ea 18 10 62 	orh	r8,0x1062
80003506:	f2 08 06 48 	mulu.d	r8,r9,r8
8000350a:	f2 08 16 0b 	lsr	r8,r9,0xb
8000350e:	b1 68       	lsl	r8,0x10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
80003510:	f7 e8 10 08 	or	r8,r11,r8
{
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
80003514:	95 18       	st.w	r10[0x4],r8
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
			(2 * p_adcifa_opt->frequency)) - 1) <<
80003516:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000351a:	70 08       	ld.w	r8,r8[0x0]
8000351c:	f0 09 15 01 	lsl	r9,r8,0x1
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
80003520:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003524:	f0 09 0d 08 	divu	r8,r8,r9
80003528:	20 18       	sub	r8,1
8000352a:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
8000352e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003532:	f1 49 00 44 	st.w	r8[68],r9
			(2 * p_adcifa_opt->frequency)) - 1) <<
			AVR32_ADCIFA_CKDIV_CNT_OFFSET) &
			AVR32_ADCIFA_CKDIV_CNT_MASK;

	/* Set ADC Offset Calibration */
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
80003536:	fc 78 24 00 	mov	r8,-187392
8000353a:	fc 79 24 00 	mov	r9,-187392
8000353e:	73 a9       	ld.w	r9,r9[0x68]
80003540:	12 9a       	mov	r10,r9
80003542:	e4 1a c0 ff 	andh	r10,0xc0ff
80003546:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000354a:	92 69       	ld.sh	r9,r9[0xc]
8000354c:	b9 69       	lsl	r9,0x18
8000354e:	e6 19 3f 00 	andh	r9,0x3f00,COH
80003552:	f5 e9 10 09 	or	r9,r10,r9
80003556:	f1 49 00 68 	st.w	r8[104],r9

	/* Set ADC Gain Calibration */
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
8000355a:	fc 78 24 00 	mov	r8,-187392
8000355e:	fc 79 24 00 	mov	r9,-187392
80003562:	73 a9       	ld.w	r9,r9[0x68]
80003564:	12 9a       	mov	r10,r9
80003566:	e0 1a 80 00 	andl	r10,0x8000
8000356a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000356e:	92 59       	ld.sh	r9,r9[0xa]
80003570:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
80003574:	f5 e9 10 09 	or	r9,r10,r9
80003578:	f1 49 00 68 	st.w	r8[104],r9

	/* Set Sample & Hold Gain Calibration for seq 0 */
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
8000357c:	fc 78 24 00 	mov	r8,-187392
80003580:	fc 79 24 00 	mov	r9,-187392
80003584:	73 b9       	ld.w	r9,r9[0x6c]
80003586:	12 9a       	mov	r10,r9
80003588:	e0 1a fc 00 	andl	r10,0xfc00
8000358c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003590:	92 79       	ld.sh	r9,r9[0xe]
80003592:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
80003596:	f5 e9 10 09 	or	r9,r10,r9
8000359a:	f1 49 00 6c 	st.w	r8[108],r9

	/* Set Sample & Hold Gain Calibration for seq 1 */
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
8000359e:	fc 78 24 00 	mov	r8,-187392
800035a2:	fc 79 24 00 	mov	r9,-187392
800035a6:	73 b9       	ld.w	r9,r9[0x6c]
800035a8:	12 9a       	mov	r10,r9
800035aa:	e4 1a fc 00 	andh	r10,0xfc00
800035ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800035b2:	f3 09 00 10 	ld.sh	r9,r9[16]
800035b6:	b1 69       	lsl	r9,0x10
800035b8:	e6 19 03 ff 	andh	r9,0x3ff,COH
800035bc:	f5 e9 10 09 	or	r9,r10,r9
800035c0:	f1 49 00 6c 	st.w	r8[108],r9

	/* Enable ADCIFA */
	ADCIFA_enable();
800035c4:	fc 78 24 00 	mov	r8,-187392
800035c8:	fc 79 24 00 	mov	r9,-187392
800035cc:	72 19       	ld.w	r9,r9[0x4]
800035ce:	a1 a9       	sbr	r9,0x0
800035d0:	91 19       	st.w	r8[0x4],r9
800035d2:	c0 28       	rjmp	800035d6 <adcifa_configure+0x14e>
	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
			break;
		}
	}
800035d4:	d7 03       	nop
	/* Enable ADCIFA */
	ADCIFA_enable();

	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
800035d6:	fc 78 24 00 	mov	r8,-187392
800035da:	70 28       	ld.w	r8,r8[0x8]
800035dc:	e2 18 40 00 	andl	r8,0x4000,COH
800035e0:	cf a0       	breq	800035d4 <adcifa_configure+0x14c>
			break;
		}
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
800035e2:	30 18       	mov	r8,1
}
800035e4:	10 9c       	mov	r12,r8
800035e6:	2f dd       	sub	sp,-12
800035e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800035ec <adcifa_configure_sequencer>:
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		adcifa_sequencer_conversion_opt_t *p_adcifa_sequencer_conversion_opt)
{
800035ec:	eb cd 40 80 	pushm	r7,lr
800035f0:	1a 97       	mov	r7,sp
800035f2:	21 1d       	sub	sp,68
800035f4:	ef 4c ff c8 	st.w	r7[-56],r12
800035f8:	16 98       	mov	r8,r11
800035fa:	ef 4a ff c0 	st.w	r7[-64],r10
800035fe:	ef 49 ff bc 	st.w	r7[-68],r9
80003602:	ef 68 ff c4 	st.b	r7[-60],r8
	uint8_t g[16] = {0};
80003606:	30 08       	mov	r8,0
80003608:	30 09       	mov	r9,0
8000360a:	ee e9 ff ec 	st.d	r7[-20],r8
8000360e:	30 08       	mov	r8,0
80003610:	30 09       	mov	r9,0
80003612:	ee e9 ff f4 	st.d	r7[-12],r8
	uint8_t mp[16] = {0};
80003616:	30 08       	mov	r8,0
80003618:	30 09       	mov	r9,0
8000361a:	ee e9 ff dc 	st.d	r7[-36],r8
8000361e:	30 08       	mov	r8,0
80003620:	30 09       	mov	r9,0
80003622:	ee e9 ff e4 	st.d	r7[-28],r8
	uint8_t mn[16] = {0};
80003626:	30 08       	mov	r8,0
80003628:	30 09       	mov	r9,0
8000362a:	ee e9 ff cc 	st.d	r7[-52],r8
8000362e:	30 08       	mov	r8,0
80003630:	30 09       	mov	r9,0
80003632:	ee e9 ff d4 	st.d	r7[-44],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch case with sequencer */
	switch (sequencer) {
80003636:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8000363a:	58 08       	cp.w	r8,0
8000363c:	c0 60       	breq	80003648 <adcifa_configure_sequencer+0x5c>
8000363e:	58 18       	cp.w	r8,1
80003640:	e0 80 01 65 	breq	8000390a <adcifa_configure_sequencer+0x31e>
80003644:	e0 8f 02 54 	bral	80003aec <adcifa_configure_sequencer+0x500>
	/* Sequencer 0 */
	case 0:
		/* Configure Sequencer 0 */
		ADCIFA_configure_sequencer_0(
80003648:	fc 78 24 00 	mov	r8,-187392
8000364c:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003650:	13 89       	ld.ub	r9,r9[0x0]
80003652:	20 19       	sub	r9,1
80003654:	f2 0a 15 10 	lsl	r10,r9,0x10
80003658:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000365c:	13 99       	ld.ub	r9,r9[0x1]
8000365e:	ad 69       	lsl	r9,0xc
80003660:	12 4a       	or	r10,r9
80003662:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003666:	13 a9       	ld.ub	r9,r9[0x2]
80003668:	a9 69       	lsl	r9,0x8
8000366a:	12 4a       	or	r10,r9
8000366c:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003670:	13 b9       	ld.ub	r9,r9[0x3]
80003672:	a3 69       	lsl	r9,0x2
80003674:	12 4a       	or	r10,r9
80003676:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000367a:	13 c9       	ld.ub	r9,r9[0x4]
8000367c:	a3 79       	lsl	r9,0x3
8000367e:	12 4a       	or	r10,r9
80003680:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003684:	13 d9       	ld.ub	r9,r9[0x5]
80003686:	a1 79       	lsl	r9,0x1
80003688:	12 4a       	or	r10,r9
8000368a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000368e:	13 e9       	ld.ub	r9,r9[0x6]
80003690:	f5 e9 10 09 	or	r9,r10,r9
80003694:	91 59       	st.w	r8[0x14],r9
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003696:	30 08       	mov	r8,0
80003698:	ef 68 ff ff 	st.b	r7[-1],r8
8000369c:	c1 68       	rjmp	800036c8 <adcifa_configure_sequencer+0xdc>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8000369e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800036a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036a6:	12 98       	mov	r8,r9
800036a8:	a1 78       	lsl	r8,0x1
800036aa:	12 08       	add	r8,r9
800036ac:	ee f9 ff bc 	ld.w	r9,r7[-68]
800036b0:	f2 08 00 08 	add	r8,r9,r8
800036b4:	11 a8       	ld.ub	r8,r8[0x2]
800036b6:	ee 0a 00 09 	add	r9,r7,r10
800036ba:	f3 68 ff ec 	st.b	r9[-20],r8
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800036be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036c2:	2f f8       	sub	r8,-1
800036c4:	ef 68 ff ff 	st.b	r7[-1],r8
800036c8:	ee f8 ff c0 	ld.w	r8,r7[-64]
800036cc:	11 88       	ld.ub	r8,r8[0x0]
800036ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036d2:	f0 09 18 00 	cp.b	r9,r8
800036d6:	ce 43       	brcs	8000369e <adcifa_configure_sequencer+0xb2>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
800036d8:	fc 78 24 00 	mov	r8,-187392
800036dc:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800036e0:	f2 0a 15 1c 	lsl	r10,r9,0x1c
800036e4:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800036e8:	b9 69       	lsl	r9,0x18
800036ea:	12 4a       	or	r10,r9
800036ec:	ef 39 ff f1 	ld.ub	r9,r7[-15]
800036f0:	b5 69       	lsl	r9,0x14
800036f2:	12 4a       	or	r10,r9
800036f4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800036f8:	b1 69       	lsl	r9,0x10
800036fa:	12 4a       	or	r10,r9
800036fc:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003700:	ad 69       	lsl	r9,0xc
80003702:	12 4a       	or	r10,r9
80003704:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80003708:	a9 69       	lsl	r9,0x8
8000370a:	12 4a       	or	r10,r9
8000370c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80003710:	a5 69       	lsl	r9,0x4
80003712:	12 4a       	or	r10,r9
80003714:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80003718:	f5 e9 10 09 	or	r9,r10,r9
8000371c:	91 79       	st.w	r8[0x1c],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000371e:	30 08       	mov	r8,0
80003720:	ef 68 ff ff 	st.b	r7[-1],r8
80003724:	c2 68       	rjmp	80003770 <adcifa_configure_sequencer+0x184>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
80003726:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000372a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000372e:	12 98       	mov	r8,r9
80003730:	a1 78       	lsl	r8,0x1
80003732:	12 08       	add	r8,r9
80003734:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003738:	f2 08 00 08 	add	r8,r9,r8
8000373c:	11 88       	ld.ub	r8,r8[0x0]
8000373e:	ee 0a 00 09 	add	r9,r7,r10
80003742:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
80003746:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000374a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000374e:	12 98       	mov	r8,r9
80003750:	a1 78       	lsl	r8,0x1
80003752:	12 08       	add	r8,r9
80003754:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003758:	f2 08 00 08 	add	r8,r9,r8
8000375c:	11 98       	ld.ub	r8,r8[0x1]
8000375e:	ee 0a 00 09 	add	r9,r7,r10
80003762:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003766:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000376a:	2f f8       	sub	r8,-1
8000376c:	ef 68 ff ff 	st.b	r7[-1],r8
80003770:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003774:	11 88       	ld.ub	r8,r8[0x0]
80003776:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000377a:	f0 09 18 00 	cp.b	r9,r8
8000377e:	cd 43       	brcs	80003726 <adcifa_configure_sequencer+0x13a>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3],
80003780:	fc 78 24 00 	mov	r8,-187392
80003784:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80003788:	f2 0a 15 18 	lsl	r10,r9,0x18
8000378c:	ef 39 ff e2 	ld.ub	r9,r7[-30]
80003790:	b1 69       	lsl	r9,0x10
80003792:	12 4a       	or	r10,r9
80003794:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80003798:	a9 69       	lsl	r9,0x8
8000379a:	12 4a       	or	r10,r9
8000379c:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800037a0:	f5 e9 10 09 	or	r9,r10,r9
800037a4:	91 b9       	st.w	r8[0x2c],r9
800037a6:	fc 78 24 00 	mov	r8,-187392
800037aa:	ef 39 ff df 	ld.ub	r9,r7[-33]
800037ae:	f2 0a 15 18 	lsl	r10,r9,0x18
800037b2:	ef 39 ff de 	ld.ub	r9,r7[-34]
800037b6:	b1 69       	lsl	r9,0x10
800037b8:	12 4a       	or	r10,r9
800037ba:	ef 39 ff dd 	ld.ub	r9,r7[-35]
800037be:	a9 69       	lsl	r9,0x8
800037c0:	12 4a       	or	r10,r9
800037c2:	ef 39 ff dc 	ld.ub	r9,r7[-36]
800037c6:	f5 e9 10 09 	or	r9,r10,r9
800037ca:	91 99       	st.w	r8[0x24],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3],
800037cc:	fc 78 24 00 	mov	r8,-187392
800037d0:	ef 39 ff d3 	ld.ub	r9,r7[-45]
800037d4:	f2 0a 15 18 	lsl	r10,r9,0x18
800037d8:	ef 39 ff d2 	ld.ub	r9,r7[-46]
800037dc:	b1 69       	lsl	r9,0x10
800037de:	12 4a       	or	r10,r9
800037e0:	ef 39 ff d1 	ld.ub	r9,r7[-47]
800037e4:	a9 69       	lsl	r9,0x8
800037e6:	12 4a       	or	r10,r9
800037e8:	ef 39 ff d0 	ld.ub	r9,r7[-48]
800037ec:	f5 e9 10 09 	or	r9,r10,r9
800037f0:	91 f9       	st.w	r8[0x3c],r9
800037f2:	fc 78 24 00 	mov	r8,-187392
800037f6:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800037fa:	f2 0a 15 18 	lsl	r10,r9,0x18
800037fe:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003802:	b1 69       	lsl	r9,0x10
80003804:	12 4a       	or	r10,r9
80003806:	ef 39 ff cd 	ld.ub	r9,r7[-51]
8000380a:	a9 69       	lsl	r9,0x8
8000380c:	12 4a       	or	r10,r9
8000380e:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80003812:	f5 e9 10 09 	or	r9,r10,r9
80003816:	91 d9       	st.w	r8[0x34],r9
		 * This adcifa_seq1_configured variable check if muxsel1p,muxsel1n 
		 * registers are already configured. This may happen if this function is
		 * called first with sequencer 1 as argument and then called with 
		 * sequencer 0 as argument in case dual mode is used.
		 */
		if(!adcifa_seq1_configured)
80003818:	fe f8 02 e0 	ld.w	r8,pc[736]
8000381c:	11 88       	ld.ub	r8,r8[0x0]
8000381e:	ec 18 00 01 	eorl	r8,0x1
80003822:	5c 58       	castu.b	r8
80003824:	e0 80 01 63 	breq	80003aea <adcifa_configure_sequencer+0x4fe>
		{
			/*
			 * Configure gain for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */ 
			ADCIFA_configure_sh1gain(g[15], g[14], g[13], g[12], g[11], g[10], 
80003828:	fc 78 24 00 	mov	r8,-187392
8000382c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003830:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80003834:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80003838:	b9 69       	lsl	r9,0x18
8000383a:	12 4a       	or	r10,r9
8000383c:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80003840:	b5 69       	lsl	r9,0x14
80003842:	12 4a       	or	r10,r9
80003844:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80003848:	b1 69       	lsl	r9,0x10
8000384a:	12 4a       	or	r10,r9
8000384c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80003850:	ad 69       	lsl	r9,0xc
80003852:	12 4a       	or	r10,r9
80003854:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80003858:	a9 69       	lsl	r9,0x8
8000385a:	12 4a       	or	r10,r9
8000385c:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80003860:	a5 69       	lsl	r9,0x4
80003862:	12 4a       	or	r10,r9
80003864:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003868:	f5 e9 10 09 	or	r9,r10,r9
8000386c:	91 89       	st.w	r8[0x20],r9

			/*
			 * Configure Mux for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */
			ADCIFA_configure_muxsel1p(mp[15], mp[14], mp[13], mp[12], mp[11], 
8000386e:	fc 78 24 00 	mov	r8,-187392
80003872:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80003876:	f2 0a 15 18 	lsl	r10,r9,0x18
8000387a:	ef 39 ff ea 	ld.ub	r9,r7[-22]
8000387e:	b1 69       	lsl	r9,0x10
80003880:	12 4a       	or	r10,r9
80003882:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80003886:	a9 69       	lsl	r9,0x8
80003888:	12 4a       	or	r10,r9
8000388a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000388e:	f5 e9 10 09 	or	r9,r10,r9
80003892:	91 c9       	st.w	r8[0x30],r9
80003894:	fc 78 24 00 	mov	r8,-187392
80003898:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8000389c:	f2 0a 15 18 	lsl	r10,r9,0x18
800038a0:	ef 39 ff e6 	ld.ub	r9,r7[-26]
800038a4:	b1 69       	lsl	r9,0x10
800038a6:	12 4a       	or	r10,r9
800038a8:	ef 39 ff e5 	ld.ub	r9,r7[-27]
800038ac:	a9 69       	lsl	r9,0x8
800038ae:	12 4a       	or	r10,r9
800038b0:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800038b4:	f5 e9 10 09 	or	r9,r10,r9
800038b8:	91 a9       	st.w	r8[0x28],r9
				mp[10], mp[9], mp[8]);
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
800038ba:	fc 78 24 00 	mov	r8,-187392
800038be:	ef 39 ff db 	ld.ub	r9,r7[-37]
800038c2:	f2 0a 15 18 	lsl	r10,r9,0x18
800038c6:	ef 39 ff da 	ld.ub	r9,r7[-38]
800038ca:	b1 69       	lsl	r9,0x10
800038cc:	12 4a       	or	r10,r9
800038ce:	ef 39 ff d9 	ld.ub	r9,r7[-39]
800038d2:	a9 69       	lsl	r9,0x8
800038d4:	12 4a       	or	r10,r9
800038d6:	ef 39 ff d8 	ld.ub	r9,r7[-40]
800038da:	f5 e9 10 09 	or	r9,r10,r9
800038de:	f1 49 00 40 	st.w	r8[64],r9
800038e2:	fc 78 24 00 	mov	r8,-187392
800038e6:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800038ea:	f2 0a 15 18 	lsl	r10,r9,0x18
800038ee:	ef 39 ff d6 	ld.ub	r9,r7[-42]
800038f2:	b1 69       	lsl	r9,0x10
800038f4:	12 4a       	or	r10,r9
800038f6:	ef 39 ff d5 	ld.ub	r9,r7[-43]
800038fa:	a9 69       	lsl	r9,0x8
800038fc:	12 4a       	or	r10,r9
800038fe:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80003902:	f5 e9 10 09 	or	r9,r10,r9
80003906:	91 e9       	st.w	r8[0x38],r9
				mn[10], mn[9], mn[8]);

		}

		break;
80003908:	cf 28       	rjmp	80003aec <adcifa_configure_sequencer+0x500>

	/* Sequencer 1 */
	case 1:
		/* Configure Sequencer 1 */
		ADCIFA_configure_sequencer_1(
8000390a:	fc 78 24 00 	mov	r8,-187392
8000390e:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003912:	13 89       	ld.ub	r9,r9[0x0]
80003914:	20 19       	sub	r9,1
80003916:	f2 0a 15 10 	lsl	r10,r9,0x10
8000391a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000391e:	13 99       	ld.ub	r9,r9[0x1]
80003920:	ad 69       	lsl	r9,0xc
80003922:	12 4a       	or	r10,r9
80003924:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003928:	13 a9       	ld.ub	r9,r9[0x2]
8000392a:	a9 69       	lsl	r9,0x8
8000392c:	12 4a       	or	r10,r9
8000392e:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003932:	13 b9       	ld.ub	r9,r9[0x3]
80003934:	a3 69       	lsl	r9,0x2
80003936:	12 4a       	or	r10,r9
80003938:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000393c:	13 c9       	ld.ub	r9,r9[0x4]
8000393e:	a3 79       	lsl	r9,0x3
80003940:	12 4a       	or	r10,r9
80003942:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003946:	13 d9       	ld.ub	r9,r9[0x5]
80003948:	a1 79       	lsl	r9,0x1
8000394a:	f5 e9 10 09 	or	r9,r10,r9
8000394e:	12 9a       	mov	r10,r9
80003950:	a5 aa       	sbr	r10,0x4
80003952:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003956:	13 e9       	ld.ub	r9,r9[0x6]
80003958:	f5 e9 10 09 	or	r9,r10,r9
8000395c:	91 69       	st.w	r8[0x18],r9
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000395e:	30 08       	mov	r8,0
80003960:	ef 68 ff ff 	st.b	r7[-1],r8
80003964:	c1 68       	rjmp	80003990 <adcifa_configure_sequencer+0x3a4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
80003966:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000396a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000396e:	12 98       	mov	r8,r9
80003970:	a1 78       	lsl	r8,0x1
80003972:	12 08       	add	r8,r9
80003974:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003978:	f2 08 00 08 	add	r8,r9,r8
8000397c:	11 a8       	ld.ub	r8,r8[0x2]
8000397e:	ee 0a 00 09 	add	r9,r7,r10
80003982:	f3 68 ff ec 	st.b	r9[-20],r8
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003986:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000398a:	2f f8       	sub	r8,-1
8000398c:	ef 68 ff ff 	st.b	r7[-1],r8
80003990:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003994:	11 88       	ld.ub	r8,r8[0x0]
80003996:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000399a:	f0 09 18 00 	cp.b	r9,r8
8000399e:	ce 43       	brcs	80003966 <adcifa_configure_sequencer+0x37a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
800039a0:	fc 78 24 00 	mov	r8,-187392
800039a4:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800039a8:	f2 0a 15 1c 	lsl	r10,r9,0x1c
800039ac:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800039b0:	b9 69       	lsl	r9,0x18
800039b2:	12 4a       	or	r10,r9
800039b4:	ef 39 ff f1 	ld.ub	r9,r7[-15]
800039b8:	b5 69       	lsl	r9,0x14
800039ba:	12 4a       	or	r10,r9
800039bc:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800039c0:	b1 69       	lsl	r9,0x10
800039c2:	12 4a       	or	r10,r9
800039c4:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800039c8:	ad 69       	lsl	r9,0xc
800039ca:	12 4a       	or	r10,r9
800039cc:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800039d0:	a9 69       	lsl	r9,0x8
800039d2:	12 4a       	or	r10,r9
800039d4:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800039d8:	a5 69       	lsl	r9,0x4
800039da:	12 4a       	or	r10,r9
800039dc:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800039e0:	f5 e9 10 09 	or	r9,r10,r9
800039e4:	91 89       	st.w	r8[0x20],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800039e6:	30 08       	mov	r8,0
800039e8:	ef 68 ff ff 	st.b	r7[-1],r8
800039ec:	c2 68       	rjmp	80003a38 <adcifa_configure_sequencer+0x44c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800039ee:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800039f2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039f6:	12 98       	mov	r8,r9
800039f8:	a1 78       	lsl	r8,0x1
800039fa:	12 08       	add	r8,r9
800039fc:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003a00:	f2 08 00 08 	add	r8,r9,r8
80003a04:	11 88       	ld.ub	r8,r8[0x0]
80003a06:	ee 0a 00 09 	add	r9,r7,r10
80003a0a:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
80003a0e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003a12:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003a16:	12 98       	mov	r8,r9
80003a18:	a1 78       	lsl	r8,0x1
80003a1a:	12 08       	add	r8,r9
80003a1c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003a20:	f2 08 00 08 	add	r8,r9,r8
80003a24:	11 98       	ld.ub	r8,r8[0x1]
80003a26:	ee 0a 00 09 	add	r9,r7,r10
80003a2a:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003a2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a32:	2f f8       	sub	r8,-1
80003a34:	ef 68 ff ff 	st.b	r7[-1],r8
80003a38:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003a3c:	11 88       	ld.ub	r8,r8[0x0]
80003a3e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003a42:	f0 09 18 00 	cp.b	r9,r8
80003a46:	cd 43       	brcs	800039ee <adcifa_configure_sequencer+0x402>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3],
80003a48:	fc 78 24 00 	mov	r8,-187392
80003a4c:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80003a50:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a54:	ef 39 ff e2 	ld.ub	r9,r7[-30]
80003a58:	b1 69       	lsl	r9,0x10
80003a5a:	12 4a       	or	r10,r9
80003a5c:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80003a60:	a9 69       	lsl	r9,0x8
80003a62:	12 4a       	or	r10,r9
80003a64:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80003a68:	f5 e9 10 09 	or	r9,r10,r9
80003a6c:	91 c9       	st.w	r8[0x30],r9
80003a6e:	fc 78 24 00 	mov	r8,-187392
80003a72:	ef 39 ff df 	ld.ub	r9,r7[-33]
80003a76:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a7a:	ef 39 ff de 	ld.ub	r9,r7[-34]
80003a7e:	b1 69       	lsl	r9,0x10
80003a80:	12 4a       	or	r10,r9
80003a82:	ef 39 ff dd 	ld.ub	r9,r7[-35]
80003a86:	a9 69       	lsl	r9,0x8
80003a88:	12 4a       	or	r10,r9
80003a8a:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80003a8e:	f5 e9 10 09 	or	r9,r10,r9
80003a92:	91 a9       	st.w	r8[0x28],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3],
80003a94:	fc 78 24 00 	mov	r8,-187392
80003a98:	ef 39 ff d3 	ld.ub	r9,r7[-45]
80003a9c:	f2 0a 15 18 	lsl	r10,r9,0x18
80003aa0:	ef 39 ff d2 	ld.ub	r9,r7[-46]
80003aa4:	b1 69       	lsl	r9,0x10
80003aa6:	12 4a       	or	r10,r9
80003aa8:	ef 39 ff d1 	ld.ub	r9,r7[-47]
80003aac:	a9 69       	lsl	r9,0x8
80003aae:	12 4a       	or	r10,r9
80003ab0:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80003ab4:	f5 e9 10 09 	or	r9,r10,r9
80003ab8:	f1 49 00 40 	st.w	r8[64],r9
80003abc:	fc 78 24 00 	mov	r8,-187392
80003ac0:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003ac4:	f2 0a 15 18 	lsl	r10,r9,0x18
80003ac8:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003acc:	b1 69       	lsl	r9,0x10
80003ace:	12 4a       	or	r10,r9
80003ad0:	ef 39 ff cd 	ld.ub	r9,r7[-51]
80003ad4:	a9 69       	lsl	r9,0x8
80003ad6:	12 4a       	or	r10,r9
80003ad8:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80003adc:	f5 e9 10 09 	or	r9,r10,r9
80003ae0:	91 e9       	st.w	r8[0x38],r9
				mn[2], mn[1], mn[0]);

		adcifa_seq1_configured = true;
80003ae2:	48 69       	lddpc	r9,80003af8 <adcifa_configure_sequencer+0x50c>
80003ae4:	30 18       	mov	r8,1
80003ae6:	b2 88       	st.b	r9[0x0],r8
80003ae8:	c0 28       	rjmp	80003aec <adcifa_configure_sequencer+0x500>
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
				mn[10], mn[9], mn[8]);

		}

		break;
80003aea:	d7 03       	nop
		break;

	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
80003aec:	30 18       	mov	r8,1
}
80003aee:	10 9c       	mov	r12,r8
80003af0:	2e fd       	sub	sp,-68
80003af2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003af6:	00 00       	add	r0,r0
80003af8:	00 00       	add	r0,r0
80003afa:	00 b8       	st.h	r0++,r8

80003afc <adcifa_start_sequencer>:
/** \brief Start analog to digital conversion for a specific sequencer
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
void adcifa_start_sequencer(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003afc:	eb cd 40 80 	pushm	r7,lr
80003b00:	1a 97       	mov	r7,sp
80003b02:	20 2d       	sub	sp,8
80003b04:	ef 4c ff fc 	st.w	r7[-4],r12
80003b08:	16 98       	mov	r8,r11
80003b0a:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch Sequencer */
	switch (sequencer) {
80003b0e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003b12:	58 18       	cp.w	r8,1
80003b14:	c0 a0       	breq	80003b28 <adcifa_start_sequencer+0x2c>
80003b16:	58 38       	cp.w	r8,3
80003b18:	c0 d0       	breq	80003b32 <adcifa_start_sequencer+0x36>
80003b1a:	58 08       	cp.w	r8,0
80003b1c:	c0 f1       	brne	80003b3a <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
80003b1e:	fc 78 24 00 	mov	r8,-187392
80003b22:	30 19       	mov	r9,1
80003b24:	91 09       	st.w	r8[0x0],r9
		break;
80003b26:	c0 a8       	rjmp	80003b3a <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
80003b28:	fc 78 24 00 	mov	r8,-187392
80003b2c:	30 29       	mov	r9,2
80003b2e:	91 09       	st.w	r8[0x0],r9
		break;
80003b30:	c0 58       	rjmp	80003b3a <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(
80003b32:	fc 78 24 00 	mov	r8,-187392
80003b36:	30 39       	mov	r9,3
80003b38:	91 09       	st.w	r8[0x0],r9
		break;

	default:
		break;
	}
}
80003b3a:	2f ed       	sub	sp,-8
80003b3c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b40 <adcifa_check_eos>:
/** \brief Get End of Conversion status bit
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
bool adcifa_check_eos(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003b40:	eb cd 40 80 	pushm	r7,lr
80003b44:	1a 97       	mov	r7,sp
80003b46:	20 2d       	sub	sp,8
80003b48:	ef 4c ff fc 	st.w	r7[-4],r12
80003b4c:	16 98       	mov	r8,r11
80003b4e:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* get SR register : EOS bit for channel */
	switch (sequencer) {
80003b52:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003b56:	58 08       	cp.w	r8,0
80003b58:	c0 40       	breq	80003b60 <adcifa_check_eos+0x20>
80003b5a:	58 18       	cp.w	r8,1
80003b5c:	c0 90       	breq	80003b6e <adcifa_check_eos+0x2e>
80003b5e:	c1 08       	rjmp	80003b7e <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
80003b60:	fc 78 24 00 	mov	r8,-187392
80003b64:	70 28       	ld.w	r8,r8[0x8]
80003b66:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003b6a:	5c 58       	castu.b	r8
80003b6c:	c0 a8       	rjmp	80003b80 <adcifa_check_eos+0x40>

	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
80003b6e:	fc 78 24 00 	mov	r8,-187392
80003b72:	70 28       	ld.w	r8,r8[0x8]
80003b74:	e2 18 00 10 	andl	r8,0x10,COH
80003b78:	5f 18       	srne	r8
80003b7a:	5c 58       	castu.b	r8
80003b7c:	c0 28       	rjmp	80003b80 <adcifa_check_eos+0x40>

	default:
		break;
	}
	return false;
80003b7e:	30 08       	mov	r8,0
}
80003b80:	10 9c       	mov	r12,r8
80003b82:	2f ed       	sub	sp,-8
80003b84:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b88 <adcifa_get_values_from_sequencer>:
 */
uint8_t adcifa_get_values_from_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		int16_t *adcifa_values)
{
80003b88:	eb cd 40 80 	pushm	r7,lr
80003b8c:	1a 97       	mov	r7,sp
80003b8e:	20 5d       	sub	sp,20
80003b90:	ef 4c ff f8 	st.w	r7[-8],r12
80003b94:	16 98       	mov	r8,r11
80003b96:	ef 4a ff f0 	st.w	r7[-16],r10
80003b9a:	ef 49 ff ec 	st.w	r7[-20],r9
80003b9e:	ef 68 ff f4 	st.b	r7[-12],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* wait for end of sequence */
	if (adcifa_check_eos(adcifa, sequencer) != true) {
80003ba2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003ba6:	10 9b       	mov	r11,r8
80003ba8:	ee fc ff f8 	ld.w	r12,r7[-8]
80003bac:	f0 1f 00 2c 	mcall	80003c5c <adcifa_get_values_from_sequencer+0xd4>
80003bb0:	18 98       	mov	r8,r12
80003bb2:	ec 18 00 01 	eorl	r8,0x1
80003bb6:	5c 58       	castu.b	r8
80003bb8:	c0 30       	breq	80003bbe <adcifa_get_values_from_sequencer+0x36>
		return ADCIFA_STATUS_NOT_COMPLETED;
80003bba:	30 38       	mov	r8,3
80003bbc:	c4 b8       	rjmp	80003c52 <adcifa_get_values_from_sequencer+0xca>
	}

	switch (sequencer) {
80003bbe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003bc2:	58 08       	cp.w	r8,0
80003bc4:	c0 40       	breq	80003bcc <adcifa_get_values_from_sequencer+0x44>
80003bc6:	58 18       	cp.w	r8,1
80003bc8:	c2 30       	breq	80003c0e <adcifa_get_values_from_sequencer+0x86>
80003bca:	c4 38       	rjmp	80003c50 <adcifa_get_values_from_sequencer+0xc8>
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003bcc:	30 08       	mov	r8,0
80003bce:	ef 68 ff ff 	st.b	r7[-1],r8
80003bd2:	c1 58       	rjmp	80003bfc <adcifa_get_values_from_sequencer+0x74>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
80003bd4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003bd8:	a1 78       	lsl	r8,0x1
80003bda:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003bde:	10 09       	add	r9,r8
80003be0:	fc 78 24 00 	mov	r8,-187392
80003be4:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003be8:	2d fa       	sub	r10,-33
80003bea:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003bee:	5c 88       	casts.h	r8
80003bf0:	b2 08       	st.h	r9[0x0],r8
	}

	switch (sequencer) {
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003bf2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003bf6:	2f f8       	sub	r8,-1
80003bf8:	ef 68 ff ff 	st.b	r7[-1],r8
80003bfc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003c00:	11 88       	ld.ub	r8,r8[0x0]
80003c02:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003c06:	f0 09 18 00 	cp.b	r9,r8
80003c0a:	ce 53       	brcs	80003bd4 <adcifa_get_values_from_sequencer+0x4c>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
80003c0c:	c2 28       	rjmp	80003c50 <adcifa_get_values_from_sequencer+0xc8>

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003c0e:	30 08       	mov	r8,0
80003c10:	ef 68 ff ff 	st.b	r7[-1],r8
80003c14:	c1 68       	rjmp	80003c40 <adcifa_get_values_from_sequencer+0xb8>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
80003c16:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003c1a:	a1 78       	lsl	r8,0x1
80003c1c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003c20:	10 09       	add	r9,r8
80003c22:	fc 78 24 00 	mov	r8,-187392
80003c26:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003c2a:	2f 8a       	sub	r10,-8
80003c2c:	2d fa       	sub	r10,-33
80003c2e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003c32:	5c 88       	casts.h	r8
80003c34:	b2 08       	st.h	r9[0x0],r8
		}
		break;

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003c36:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003c3a:	2f f8       	sub	r8,-1
80003c3c:	ef 68 ff ff 	st.b	r7[-1],r8
80003c40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003c44:	11 88       	ld.ub	r8,r8[0x0]
80003c46:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003c4a:	f0 09 18 00 	cp.b	r9,r8
80003c4e:	ce 43       	brcs	80003c16 <adcifa_get_values_from_sequencer+0x8e>

	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
80003c50:	30 28       	mov	r8,2
}
80003c52:	10 9c       	mov	r12,r8
80003c54:	2f bd       	sub	sp,-20
80003c56:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c5a:	00 00       	add	r0,r0
80003c5c:	80 00       	ld.sh	r0,r0[0x0]
80003c5e:	3b 40       	mov	r0,-76

80003c60 <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
80003c60:	eb cd 40 80 	pushm	r7,lr
80003c64:	1a 97       	mov	r7,sp
80003c66:	20 8d       	sub	sp,32
		384,
		512,
		768,
		1024,
		2048,
	};
80003c68:	48 c9       	lddpc	r9,80003c98 <flashc_get_flash_size+0x38>
80003c6a:	ee c8 00 1e 	sub	r8,r7,30
80003c6e:	31 ea       	mov	r10,30
80003c70:	12 9b       	mov	r11,r9
80003c72:	10 9c       	mov	r12,r8
80003c74:	f0 1f 00 0a 	mcall	80003c9c <flashc_get_flash_size+0x3c>
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK)
80003c78:	fe 68 00 00 	mov	r8,-131072
80003c7c:	70 38       	ld.w	r8,r8[0xc]
80003c7e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003c82:	a1 78       	lsl	r8,0x1
80003c84:	ee 08 00 08 	add	r8,r7,r8
80003c88:	f1 08 ff e2 	ld.sh	r8,r8[-30]
80003c8c:	5c 78       	castu.h	r8
80003c8e:	ab 68       	lsl	r8,0xa
		1024,
	};
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
			>> AVR32_FLASHC_FSR_FSZ_OFFSET]) << 10;
#endif
}
80003c90:	10 9c       	mov	r12,r8
80003c92:	2f 8d       	sub	sp,-32
80003c94:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c98:	80 00       	ld.sh	r0,r0[0x0]
80003c9a:	a4 20       	st.h	r2[0x4],r0
80003c9c:	80 00       	ld.sh	r0,r0[0x0]
80003c9e:	9f 02       	st.w	pc[0x0],r2

80003ca0 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
80003ca0:	eb cd 40 80 	pushm	r7,lr
80003ca4:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80003ca6:	fe 68 00 00 	mov	r8,-131072
80003caa:	70 28       	ld.w	r8,r8[0x8]
80003cac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003cb0:	5c 58       	castu.b	r8
}
80003cb2:	10 9c       	mov	r12,r8
80003cb4:	e3 cd 80 80 	ldm	sp++,r7,pc

80003cb8 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80003cb8:	eb cd 40 80 	pushm	r7,lr
80003cbc:	1a 97       	mov	r7,sp
	while (!flashc_is_ready());
80003cbe:	f0 1f 00 05 	mcall	80003cd0 <flashc_default_wait_until_ready+0x18>
80003cc2:	18 98       	mov	r8,r12
80003cc4:	ec 18 00 01 	eorl	r8,0x1
80003cc8:	5c 58       	castu.b	r8
80003cca:	cf a1       	brne	80003cbe <flashc_default_wait_until_ready+0x6>
}
80003ccc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cd0:	80 00       	ld.sh	r0,r0[0x0]
80003cd2:	3c a0       	mov	r0,-54

80003cd4 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80003cd4:	eb cd 40 80 	pushm	r7,lr
80003cd8:	1a 97       	mov	r7,sp
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80003cda:	fe 68 00 00 	mov	r8,-131072
80003cde:	70 28       	ld.w	r8,r8[0x8]
80003ce0:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHC_FSR_PROGE_MASK);
}
80003ce4:	10 9c       	mov	r12,r8
80003ce6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cea:	d7 03       	nop

80003cec <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80003cec:	eb cd 40 80 	pushm	r7,lr
80003cf0:	1a 97       	mov	r7,sp
80003cf2:	20 3d       	sub	sp,12
80003cf4:	ef 4c ff f8 	st.w	r7[-8],r12
80003cf8:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80003cfc:	49 b8       	lddpc	r8,80003d68 <flashc_issue_command+0x7c>
80003cfe:	70 08       	ld.w	r8,r8[0x0]
80003d00:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80003d02:	fe 68 00 00 	mov	r8,-131072
80003d06:	70 18       	ld.w	r8,r8[0x4]
80003d08:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80003d0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d10:	5c 58       	castu.b	r8
80003d12:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80003d16:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003d1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d1e:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80003d22:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
80003d26:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003d2a:	58 08       	cp.w	r8,0
80003d2c:	c0 b5       	brlt	80003d42 <flashc_issue_command+0x56>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80003d2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003d32:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80003d36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d3a:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80003d3e:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80003d42:	3a 58       	mov	r8,-91
80003d44:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80003d48:	fe 68 00 00 	mov	r8,-131072
80003d4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003d50:	91 19       	st.w	r8[0x4],r9
	flashc_error_status = flashc_get_error_status();
80003d52:	f0 1f 00 07 	mcall	80003d6c <flashc_issue_command+0x80>
80003d56:	18 99       	mov	r9,r12
80003d58:	48 68       	lddpc	r8,80003d70 <flashc_issue_command+0x84>
80003d5a:	91 09       	st.w	r8[0x0],r9
	flashc_wait_until_ready();
80003d5c:	48 38       	lddpc	r8,80003d68 <flashc_issue_command+0x7c>
80003d5e:	70 08       	ld.w	r8,r8[0x0]
80003d60:	5d 18       	icall	r8
}
80003d62:	2f dd       	sub	sp,-12
80003d64:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d68:	00 00       	add	r0,r0
80003d6a:	00 08       	add	r8,r0
80003d6c:	80 00       	ld.sh	r0,r0[0x0]
80003d6e:	3c d4       	mov	r4,-51
80003d70:	00 00       	add	r0,r0
80003d72:	00 bc       	st.h	r0++,r12

80003d74 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80003d74:	eb cd 40 80 	pushm	r7,lr
80003d78:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80003d7a:	3f fb       	mov	r11,-1
80003d7c:	30 3c       	mov	r12,3
80003d7e:	f0 1f 00 03 	mcall	80003d88 <flashc_clear_page_buffer+0x14>
}
80003d82:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d86:	00 00       	add	r0,r0
80003d88:	80 00       	ld.sh	r0,r0[0x0]
80003d8a:	3c ec       	mov	r12,-50

80003d8c <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
80003d8c:	eb cd 40 80 	pushm	r7,lr
80003d90:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80003d92:	fe 68 00 00 	mov	r8,-131072
80003d96:	70 28       	ld.w	r8,r8[0x8]
80003d98:	e2 18 00 20 	andl	r8,0x20,COH
80003d9c:	5f 18       	srne	r8
80003d9e:	5c 58       	castu.b	r8
}
80003da0:	10 9c       	mov	r12,r8
80003da2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003da6:	d7 03       	nop

80003da8 <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80003da8:	eb cd 40 80 	pushm	r7,lr
80003dac:	1a 97       	mov	r7,sp
80003dae:	20 1d       	sub	sp,4
80003db0:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80003db4:	ee fb ff fc 	ld.w	r11,r7[-4]
80003db8:	30 cc       	mov	r12,12
80003dba:	f0 1f 00 05 	mcall	80003dcc <flashc_quick_page_read+0x24>
	return flashc_is_page_erased();
80003dbe:	f0 1f 00 05 	mcall	80003dd0 <flashc_quick_page_read+0x28>
80003dc2:	18 98       	mov	r8,r12
}
80003dc4:	10 9c       	mov	r12,r8
80003dc6:	2f fd       	sub	sp,-4
80003dc8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003dcc:	80 00       	ld.sh	r0,r0[0x0]
80003dce:	3c ec       	mov	r12,-50
80003dd0:	80 00       	ld.sh	r0,r0[0x0]
80003dd2:	3d 8c       	mov	r12,-40

80003dd4 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80003dd4:	eb cd 40 80 	pushm	r7,lr
80003dd8:	1a 97       	mov	r7,sp
80003dda:	20 4d       	sub	sp,16
80003ddc:	ef 4c ff f4 	st.w	r7[-12],r12
80003de0:	16 98       	mov	r8,r11
80003de2:	ef 68 ff f0 	st.b	r7[-16],r8
	bool page_erased = true;
80003de6:	30 18       	mov	r8,1
80003de8:	ef 68 ff fb 	st.b	r7[-5],r8

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80003dec:	ee fb ff f4 	ld.w	r11,r7[-12]
80003df0:	30 2c       	mov	r12,2
80003df2:	f0 1f 00 10 	mcall	80003e30 <flashc_erase_page+0x5c>
	if (check) {
80003df6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003dfa:	30 08       	mov	r8,0
80003dfc:	f0 09 18 00 	cp.b	r9,r8
80003e00:	c1 20       	breq	80003e24 <flashc_erase_page+0x50>
		unsigned int error_status = flashc_error_status;
80003e02:	48 d8       	lddpc	r8,80003e34 <flashc_erase_page+0x60>
80003e04:	70 08       	ld.w	r8,r8[0x0]
80003e06:	ef 48 ff fc 	st.w	r7[-4],r8
		page_erased = flashc_quick_page_read(-1);
80003e0a:	3f fc       	mov	r12,-1
80003e0c:	f0 1f 00 0b 	mcall	80003e38 <flashc_erase_page+0x64>
80003e10:	18 98       	mov	r8,r12
80003e12:	ef 68 ff fb 	st.b	r7[-5],r8
		flashc_error_status |= error_status;
80003e16:	48 88       	lddpc	r8,80003e34 <flashc_erase_page+0x60>
80003e18:	70 09       	ld.w	r9,r8[0x0]
80003e1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e1e:	10 49       	or	r9,r8
80003e20:	48 58       	lddpc	r8,80003e34 <flashc_erase_page+0x60>
80003e22:	91 09       	st.w	r8[0x0],r9
	}
	return page_erased;
80003e24:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80003e28:	10 9c       	mov	r12,r8
80003e2a:	2f cd       	sub	sp,-16
80003e2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e30:	80 00       	ld.sh	r0,r0[0x0]
80003e32:	3c ec       	mov	r12,-50
80003e34:	00 00       	add	r0,r0
80003e36:	00 bc       	st.h	r0++,r12
80003e38:	80 00       	ld.sh	r0,r0[0x0]
80003e3a:	3d a8       	mov	r8,-38

80003e3c <flashc_write_page>:
	return all_pages_erased;
}


void flashc_write_page(int page_number)
{
80003e3c:	eb cd 40 80 	pushm	r7,lr
80003e40:	1a 97       	mov	r7,sp
80003e42:	20 1d       	sub	sp,4
80003e44:	ef 4c ff fc 	st.w	r7[-4],r12
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80003e48:	ee fb ff fc 	ld.w	r11,r7[-4]
80003e4c:	30 1c       	mov	r12,1
80003e4e:	f0 1f 00 03 	mcall	80003e58 <flashc_write_page+0x1c>
}
80003e52:	2f fd       	sub	sp,-4
80003e54:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e58:	80 00       	ld.sh	r0,r0[0x0]
80003e5a:	3c ec       	mov	r12,-50

80003e5c <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80003e5c:	eb cd 40 80 	pushm	r7,lr
80003e60:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80003e62:	3f fb       	mov	r11,-1
80003e64:	30 fc       	mov	r12,15
80003e66:	f0 1f 00 05 	mcall	80003e78 <flashc_quick_user_page_read+0x1c>
	return flashc_is_page_erased();
80003e6a:	f0 1f 00 05 	mcall	80003e7c <flashc_quick_user_page_read+0x20>
80003e6e:	18 98       	mov	r8,r12
}
80003e70:	10 9c       	mov	r12,r8
80003e72:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e76:	00 00       	add	r0,r0
80003e78:	80 00       	ld.sh	r0,r0[0x0]
80003e7a:	3c ec       	mov	r12,-50
80003e7c:	80 00       	ld.sh	r0,r0[0x0]
80003e7e:	3d 8c       	mov	r12,-40

80003e80 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80003e80:	eb cd 40 80 	pushm	r7,lr
80003e84:	1a 97       	mov	r7,sp
80003e86:	20 1d       	sub	sp,4
80003e88:	18 98       	mov	r8,r12
80003e8a:	ef 68 ff fc 	st.b	r7[-4],r8
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80003e8e:	3f fb       	mov	r11,-1
80003e90:	30 ec       	mov	r12,14
80003e92:	f0 1f 00 09 	mcall	80003eb4 <flashc_erase_user_page+0x34>
	return (check) ? flashc_quick_user_page_read() : true;
80003e96:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003e9a:	30 08       	mov	r8,0
80003e9c:	f0 09 18 00 	cp.b	r9,r8
80003ea0:	c0 50       	breq	80003eaa <flashc_erase_user_page+0x2a>
80003ea2:	f0 1f 00 06 	mcall	80003eb8 <flashc_erase_user_page+0x38>
80003ea6:	18 98       	mov	r8,r12
80003ea8:	c0 28       	rjmp	80003eac <flashc_erase_user_page+0x2c>
80003eaa:	30 18       	mov	r8,1
}
80003eac:	10 9c       	mov	r12,r8
80003eae:	2f fd       	sub	sp,-4
80003eb0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eb4:	80 00       	ld.sh	r0,r0[0x0]
80003eb6:	3c ec       	mov	r12,-50
80003eb8:	80 00       	ld.sh	r0,r0[0x0]
80003eba:	3e 5c       	mov	r12,-27

80003ebc <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80003ebc:	eb cd 40 80 	pushm	r7,lr
80003ec0:	1a 97       	mov	r7,sp
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80003ec2:	3f fb       	mov	r11,-1
80003ec4:	30 dc       	mov	r12,13
80003ec6:	f0 1f 00 03 	mcall	80003ed0 <flashc_write_user_page+0x14>
}
80003eca:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ece:	00 00       	add	r0,r0
80003ed0:	80 00       	ld.sh	r0,r0[0x0]
80003ed2:	3c ec       	mov	r12,-50

80003ed4 <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, uint8_t src, size_t nbytes, bool erase)
{
80003ed4:	eb cd 40 80 	pushm	r7,lr
80003ed8:	1a 97       	mov	r7,sp
80003eda:	20 4d       	sub	sp,16
80003edc:	ef 4c ff fc 	st.w	r7[-4],r12
80003ee0:	ef 4a ff f4 	st.w	r7[-12],r10
80003ee4:	12 98       	mov	r8,r9
80003ee6:	16 99       	mov	r9,r11
80003ee8:	ef 69 ff f8 	st.b	r7[-8],r9
80003eec:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset16(dst, src | (uint16_t)src << 8, nbytes, erase);
80003ef0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003ef4:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80003ef8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003efc:	a9 68       	lsl	r8,0x8
80003efe:	5c 88       	casts.h	r8
80003f00:	f5 e8 10 08 	or	r8,r10,r8
80003f04:	5c 88       	casts.h	r8
80003f06:	5c 78       	castu.h	r8
80003f08:	ee fa ff f4 	ld.w	r10,r7[-12]
80003f0c:	10 9b       	mov	r11,r8
80003f0e:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f12:	f0 1f 00 04 	mcall	80003f20 <flashc_memset8+0x4c>
80003f16:	18 98       	mov	r8,r12
}
80003f18:	10 9c       	mov	r12,r8
80003f1a:	2f cd       	sub	sp,-16
80003f1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f20:	80 00       	ld.sh	r0,r0[0x0]
80003f22:	3f 24       	mov	r4,-14

80003f24 <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, uint16_t src, size_t nbytes, bool erase)
{
80003f24:	eb cd 40 80 	pushm	r7,lr
80003f28:	1a 97       	mov	r7,sp
80003f2a:	20 4d       	sub	sp,16
80003f2c:	ef 4c ff fc 	st.w	r7[-4],r12
80003f30:	ef 4a ff f4 	st.w	r7[-12],r10
80003f34:	12 98       	mov	r8,r9
80003f36:	16 99       	mov	r9,r11
80003f38:	ef 59 ff f8 	st.h	r7[-8],r9
80003f3c:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset32(dst, src | (uint32_t)src << 16, nbytes, erase);
80003f40:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003f44:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80003f48:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003f4c:	b1 68       	lsl	r8,0x10
80003f4e:	f5 e8 10 08 	or	r8,r10,r8
80003f52:	ee fa ff f4 	ld.w	r10,r7[-12]
80003f56:	10 9b       	mov	r11,r8
80003f58:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f5c:	f0 1f 00 04 	mcall	80003f6c <flashc_memset16+0x48>
80003f60:	18 98       	mov	r8,r12
}
80003f62:	10 9c       	mov	r12,r8
80003f64:	2f cd       	sub	sp,-16
80003f66:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f6a:	00 00       	add	r0,r0
80003f6c:	80 00       	ld.sh	r0,r0[0x0]
80003f6e:	3f 70       	mov	r0,-9

80003f70 <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, uint32_t src, size_t nbytes, bool erase)
{
80003f70:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80003f74:	1a 97       	mov	r7,sp
80003f76:	20 6d       	sub	sp,24
80003f78:	ef 4c ff fc 	st.w	r7[-4],r12
80003f7c:	ef 4b ff f8 	st.w	r7[-8],r11
80003f80:	ef 4a ff f4 	st.w	r7[-12],r10
80003f84:	12 98       	mov	r8,r9
80003f86:	ef 68 ff f0 	st.b	r7[-16],r8
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
80003f8a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003f8e:	ee f0 ff f8 	ld.w	r0,r7[-8]
80003f92:	30 01       	mov	r1,0
80003f94:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003f98:	ef 49 ff ec 	st.w	r7[-20],r9
80003f9c:	30 09       	mov	r9,0
80003f9e:	ef 49 ff e8 	st.w	r7[-24],r9
80003fa2:	ee f3 ff ec 	ld.w	r3,r7[-20]
80003fa6:	a1 63       	lsl	r3,0x0
80003fa8:	30 02       	mov	r2,0
80003faa:	e1 e2 10 0a 	or	r10,r0,r2
80003fae:	e3 e3 10 0b 	or	r11,r1,r3
80003fb2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003fb6:	ee fc ff fc 	ld.w	r12,r7[-4]
80003fba:	f0 1f 00 04 	mcall	80003fc8 <flashc_memset32+0x58>
80003fbe:	18 98       	mov	r8,r12
}
80003fc0:	10 9c       	mov	r12,r8
80003fc2:	2f ad       	sub	sp,-24
80003fc4:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80003fc8:	80 00       	ld.sh	r0,r0[0x0]
80003fca:	3f cc       	mov	r12,-4

80003fcc <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80003fcc:	eb cd 40 80 	pushm	r7,lr
80003fd0:	1a 97       	mov	r7,sp
80003fd2:	21 bd       	sub	sp,108
80003fd4:	ef 4c ff a4 	st.w	r7[-92],r12
80003fd8:	ee eb ff 9c 	st.d	r7[-100],r10
80003fdc:	ef 49 ff 98 	st.w	r7[-104],r9
80003fe0:	ef 68 ff 94 	st.b	r7[-108],r8
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
80003fe4:	30 08       	mov	r8,0
80003fe6:	30 09       	mov	r9,0
80003fe8:	ee e9 ff d8 	st.d	r7[-40],r8
	StructCVPtr dest_end;
	UnionCVPtr flash_page_source_end;
	bool incomplete_flash_page_end;
	Union64 flash_dword;
	UnionVPtr tmp;
	unsigned int error_status = 0;
80003fec:	30 08       	mov	r8,0
80003fee:	ef 48 ff ec 	st.w	r7[-20],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80003ff2:	f0 1f 00 fa 	mcall	800043d8 <flashc_memset64+0x40c>
80003ff6:	18 99       	mov	r9,r12
80003ff8:	fc 18 80 00 	movh	r8,0x8000
80003ffc:	f2 08 00 08 	add	r8,r9,r8
80004000:	ef 48 ff e4 	st.w	r7[-28],r8
	dest.u8ptr = dst;
80004004:	ee f8 ff a4 	ld.w	r8,r7[-92]
80004008:	ef 48 ff e0 	st.w	r7[-32],r8
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
8000400c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004010:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004014:	20 18       	sub	r8,1
80004016:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000401a:	ef 48 ff f0 	st.w	r7[-16],r8
8000401e:	c1 f8       	rjmp	8000405c <flashc_memset64+0x90>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
80004020:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004024:	ef 38 ff a3 	ld.ub	r8,r7[-93]
80004028:	ee 09 00 09 	add	r9,r7,r9
8000402c:	f3 68 ff d8 	st.b	r9[-40],r8
		src >>= 8;
80004030:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80004034:	b9 68       	lsl	r8,0x18
80004036:	ee f9 ff a0 	ld.w	r9,r7[-96]
8000403a:	a9 89       	lsr	r9,0x8
8000403c:	f3 e8 10 08 	or	r8,r9,r8
80004040:	ef 48 ff a0 	st.w	r7[-96],r8
80004044:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80004048:	a9 88       	lsr	r8,0x8
8000404a:	ef 48 ff 9c 	st.w	r7[-100],r8

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
8000404e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004052:	20 18       	sub	r8,1
80004054:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004058:	ef 48 ff f0 	st.w	r7[-16],r8
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
8000405c:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80004060:	58 08       	cp.w	r8,0
80004062:	5c 29       	cpc	r9
80004064:	cd e1       	brne	80004020 <flashc_memset64+0x54>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
80004066:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000406a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000406e:	f2 08 00 08 	add	r8,r9,r8
80004072:	ef 48 ff d4 	st.w	r7[-44],r8

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
80004076:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000407a:	e0 69 ff ff 	mov	r9,65535
8000407e:	ea 19 7f ff 	orh	r9,0x7fff
80004082:	12 38       	cp.w	r8,r9
80004084:	e0 8b 00 07 	brhi	80004092 <flashc_memset64+0xc6>
		dest.u8ptr = AVR32_FLASH;
80004088:	fc 18 80 00 	movh	r8,0x8000
8000408c:	ef 48 ff e0 	st.w	r7[-32],r8
80004090:	c1 58       	rjmp	800040ba <flashc_memset64+0xee>
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
80004092:	ee f9 ff e4 	ld.w	r9,r7[-28]
80004096:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000409a:	10 39       	cp.w	r9,r8
8000409c:	e0 8b 00 0f 	brhi	800040ba <flashc_memset64+0xee>
800040a0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800040a4:	e0 69 ff ff 	mov	r9,65535
800040a8:	ea 19 80 7f 	orh	r9,0x807f
800040ac:	12 38       	cp.w	r8,r9
800040ae:	e0 8b 00 06 	brhi	800040ba <flashc_memset64+0xee>
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800040b2:	fc 18 80 80 	movh	r8,0x8080
800040b6:	ef 48 ff e0 	st.w	r7[-32],r8
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
800040ba:	ee f8 ff d4 	ld.w	r8,r7[-44]
800040be:	e0 69 02 00 	mov	r9,512
800040c2:	ea 19 80 80 	orh	r9,0x8080
800040c6:	12 38       	cp.w	r8,r9
800040c8:	e0 88 00 09 	brls	800040da <flashc_memset64+0x10e>
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
800040cc:	e0 68 02 00 	mov	r8,512
800040d0:	ea 18 80 80 	orh	r8,0x8080
800040d4:	ef 48 ff d4 	st.w	r7[-44],r8
800040d8:	c1 38       	rjmp	800040fe <flashc_memset64+0x132>
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
800040da:	ee f8 ff d4 	ld.w	r8,r7[-44]
800040de:	fc 19 80 80 	movh	r9,0x8080
800040e2:	12 38       	cp.w	r8,r9
800040e4:	e0 8b 00 0d 	brhi	800040fe <flashc_memset64+0x132>
800040e8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800040ec:	ee f8 ff e4 	ld.w	r8,r7[-28]
800040f0:	10 39       	cp.w	r9,r8
800040f2:	e0 88 00 06 	brls	800040fe <flashc_memset64+0x132>
		dest_end.u8ptr = flash_array_end.u8ptr;
800040f6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800040fa:	ef 48 ff d4 	st.w	r7[-44],r8
	}

	// Align each end of destination pointer with its natural boundary.
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
800040fe:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004102:	a1 c8       	cbr	r8,0x0
80004104:	ef 48 ff cc 	st.w	r7[-52],r8
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
80004108:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000410c:	e0 18 ff fc 	andl	r8,0xfffc
80004110:	ef 48 ff c4 	st.w	r7[-60],r8
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));
80004114:	ee f8 ff c4 	ld.w	r8,r7[-60]
80004118:	e0 18 ff f8 	andl	r8,0xfff8
8000411c:	ef 48 ff bc 	st.w	r7[-68],r8

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
80004120:	c4 b9       	rjmp	800043b6 <flashc_memset64+0x3ea>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
80004122:	f0 1f 00 af 	mcall	800043dc <flashc_memset64+0x410>
		error_status |= flashc_error_status;
80004126:	fe f8 02 ba 	ld.w	r8,pc[698]
8000412a:	70 08       	ld.w	r8,r8[0x0]
8000412c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004130:	f3 e8 10 08 	or	r8,r9,r8
80004134:	ef 48 ff ec 	st.w	r7[-20],r8

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
80004138:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000413c:	ef 48 ff f8 	st.w	r7[-8],r8
80004140:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004144:	e0 18 fe 00 	andl	r8,0xfe00
80004148:	f0 c8 fe 00 	sub	r8,r8,-512
8000414c:	ef 48 ff fc 	st.w	r7[-4],r8
80004150:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004154:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004158:	f0 09 0d 48 	min	r8,r8,r9
8000415c:	ef 48 ff f4 	st.w	r7[-12],r8
80004160:	ee f8 ff f4 	ld.w	r8,r7[-12]
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
80004164:	ef 48 ff b4 	st.w	r7[-76],r8
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80004168:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000416c:	10 9a       	mov	r10,r8
8000416e:	e0 1a fe 00 	andl	r10,0xfe00
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
80004172:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004176:	10 99       	mov	r9,r8
80004178:	e0 19 fe 00 	andl	r9,0xfe00
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
				Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
8000417c:	30 18       	mov	r8,1
8000417e:	12 3a       	cp.w	r10,r9
80004180:	c0 22       	brcc	80004184 <flashc_memset64+0x1b8>
80004182:	30 08       	mov	r8,0
80004184:	ef 68 ff eb 	st.b	r7[-21],r8
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80004188:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000418c:	ee e9 ff ac 	st.d	r7[-84],r8

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80004190:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004194:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004198:	c5 b0       	breq	8000424e <flashc_memset64+0x282>
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8000419a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000419e:	e0 18 fe 00 	andl	r8,0xfe00
800041a2:	ef 48 ff a8 	st.w	r7[-88],r8
800041a6:	c0 e8       	rjmp	800041c2 <flashc_memset64+0x1f6>
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
800041a8:	ee fa ff a8 	ld.w	r10,r7[-88]
800041ac:	ee f8 ff a8 	ld.w	r8,r7[-88]
800041b0:	f0 e8 00 00 	ld.d	r8,r8[0]
800041b4:	f4 e9 00 00 	st.d	r10[0],r8
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
800041b8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800041bc:	2f 88       	sub	r8,-8
800041be:	ef 48 ff a8 	st.w	r7[-88],r8
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
800041c2:	ee f9 ff a8 	ld.w	r9,r7[-88]
800041c6:	ee f8 ff e0 	ld.w	r8,r7[-32]
800041ca:	e0 18 ff f8 	andl	r8,0xfff8
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800041ce:	10 39       	cp.w	r9,r8
800041d0:	ce c3       	brcs	800041a8 <flashc_memset64+0x1dc>
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
800041d2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800041d6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800041da:	c3 a0       	breq	8000424e <flashc_memset64+0x282>
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
800041dc:	30 08       	mov	r8,0
800041de:	ef 48 ff f0 	st.w	r7[-16],r8
800041e2:	c1 38       	rjmp	80004208 <flashc_memset64+0x23c>
					flash_dword.u8[i] = *tmp.u8ptr++;
800041e4:	ee fa ff f0 	ld.w	r10,r7[-16]
800041e8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800041ec:	11 89       	ld.ub	r9,r8[0x0]
800041ee:	5c 59       	castu.b	r9
800041f0:	ee 0a 00 0a 	add	r10,r7,r10
800041f4:	f5 69 ff ac 	st.b	r10[-84],r9
800041f8:	2f f8       	sub	r8,-1
800041fa:	ef 48 ff a8 	st.w	r7[-88],r8
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
800041fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004202:	2f f8       	sub	r8,-1
80004204:	ef 48 ff f0 	st.w	r7[-16],r8
80004208:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000420c:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80004210:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004214:	10 39       	cp.w	r9,r8
80004216:	fe 9b ff e7 	brhi	800041e4 <flashc_memset64+0x218>
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
8000421a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000421e:	e0 18 ff f8 	andl	r8,0xfff8
80004222:	ef 48 ff e0 	st.w	r7[-32],r8

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
80004226:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000422a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000422e:	10 39       	cp.w	r9,r8
80004230:	c0 f2       	brcc	8000424e <flashc_memset64+0x282>
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
80004232:	ee fa ff e0 	ld.w	r10,r7[-32]
80004236:	ee e8 ff ac 	ld.d	r8,r7[-84]
8000423a:	f4 e9 00 00 	st.d	r10[0],r8
8000423e:	f4 c8 ff f8 	sub	r8,r10,-8
80004242:	ef 48 ff e0 	st.w	r7[-32],r8
					flash_dword.u64 = source.u64;
80004246:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000424a:	ee e9 ff ac 	st.d	r7[-84],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
8000424e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80004252:	10 99       	mov	r9,r8
80004254:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004258:	f2 08 01 08 	sub	r8,r9,r8
8000425c:	a3 58       	asr	r8,0x3
8000425e:	ef 48 ff f0 	st.w	r7[-16],r8
80004262:	c1 08       	rjmp	80004282 <flashc_memset64+0x2b6>
			*dest.u64ptr++ = source.u64;
80004264:	ee fa ff e0 	ld.w	r10,r7[-32]
80004268:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000426c:	f4 e9 00 00 	st.d	r10[0],r8
80004270:	f4 c8 ff f8 	sub	r8,r10,-8
80004274:	ef 48 ff e0 	st.w	r7[-32],r8
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80004278:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000427c:	20 18       	sub	r8,1
8000427e:	ef 48 ff f0 	st.w	r7[-16],r8
80004282:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004286:	58 08       	cp.w	r8,0
80004288:	ce e1       	brne	80004264 <flashc_memset64+0x298>
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
8000428a:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8000428e:	30 08       	mov	r8,0
80004290:	f0 09 18 00 	cp.b	r9,r8
80004294:	c4 70       	breq	80004322 <flashc_memset64+0x356>
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
80004296:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000429a:	ef 48 ff a8 	st.w	r7[-88],r8

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
8000429e:	ee f8 ff d4 	ld.w	r8,r7[-44]
800042a2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800042a6:	c3 80       	breq	80004316 <flashc_memset64+0x34a>
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
800042a8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800042ac:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800042b0:	ef 48 ff f0 	st.w	r7[-16],r8
800042b4:	c1 38       	rjmp	800042da <flashc_memset64+0x30e>
						flash_dword.u8[i] = *tmp.u8ptr++;
800042b6:	ee fa ff f0 	ld.w	r10,r7[-16]
800042ba:	ee f8 ff a8 	ld.w	r8,r7[-88]
800042be:	11 89       	ld.ub	r9,r8[0x0]
800042c0:	5c 59       	castu.b	r9
800042c2:	ee 0a 00 0a 	add	r10,r7,r10
800042c6:	f5 69 ff ac 	st.b	r10[-84],r9
800042ca:	2f f8       	sub	r8,-1
800042cc:	ef 48 ff a8 	st.w	r7[-88],r8
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
800042d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042d4:	2f f8       	sub	r8,-1
800042d6:	ef 48 ff f0 	st.w	r7[-16],r8
800042da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042de:	58 78       	cp.w	r8,7
800042e0:	fe 98 ff eb 	brls	800042b6 <flashc_memset64+0x2ea>
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
800042e4:	ee fa ff e0 	ld.w	r10,r7[-32]
800042e8:	ee e8 ff ac 	ld.d	r8,r7[-84]
800042ec:	f4 e9 00 00 	st.d	r10[0],r8
800042f0:	f4 c8 ff f8 	sub	r8,r10,-8
800042f4:	ef 48 ff e0 	st.w	r7[-32],r8
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
800042f8:	c1 08       	rjmp	80004318 <flashc_memset64+0x34c>
					*tmp.u64ptr = *tmp.u64ptr;
800042fa:	ee fa ff a8 	ld.w	r10,r7[-88]
800042fe:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004302:	f0 e8 00 00 	ld.d	r8,r8[0]
80004306:	f4 e9 00 00 	st.d	r10[0],r8
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
8000430a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000430e:	2f 88       	sub	r8,-8
80004310:	ef 48 ff a8 	st.w	r7[-88],r8
80004314:	c0 28       	rjmp	80004318 <flashc_memset64+0x34c>
80004316:	d7 03       	nop
80004318:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000431c:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004320:	ce d1       	brne	800042fa <flashc_memset64+0x32e>
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
80004322:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004326:	fc 19 80 80 	movh	r9,0x8080
8000432a:	12 38       	cp.w	r8,r9
8000432c:	e0 8b 00 2a 	brhi	80004380 <flashc_memset64+0x3b4>
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
80004330:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80004334:	30 08       	mov	r8,0
80004336:	f0 09 18 00 	cp.b	r9,r8
8000433a:	c0 d0       	breq	80004354 <flashc_memset64+0x388>
				flashc_erase_page(-1, false);
8000433c:	30 0b       	mov	r11,0
8000433e:	3f fc       	mov	r12,-1
80004340:	f0 1f 00 29 	mcall	800043e4 <flashc_memset64+0x418>
				error_status |= flashc_error_status;
80004344:	4a 78       	lddpc	r8,800043e0 <flashc_memset64+0x414>
80004346:	70 08       	ld.w	r8,r8[0x0]
80004348:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000434c:	f3 e8 10 08 	or	r8,r9,r8
80004350:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_page(-1);
80004354:	3f fc       	mov	r12,-1
80004356:	f0 1f 00 25 	mcall	800043e8 <flashc_memset64+0x41c>
			error_status |= flashc_error_status;
8000435a:	4a 28       	lddpc	r8,800043e0 <flashc_memset64+0x414>
8000435c:	70 08       	ld.w	r8,r8[0x0]
8000435e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004362:	f3 e8 10 08 	or	r8,r9,r8
80004366:	ef 48 ff ec 	st.w	r7[-20],r8

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
8000436a:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000436e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004372:	10 39       	cp.w	r9,r8
80004374:	c2 13       	brcs	800043b6 <flashc_memset64+0x3ea>
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80004376:	fc 18 80 80 	movh	r8,0x8080
8000437a:	ef 48 ff e0 	st.w	r7[-32],r8
8000437e:	c1 c8       	rjmp	800043b6 <flashc_memset64+0x3ea>
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
80004380:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80004384:	30 08       	mov	r8,0
80004386:	f0 09 18 00 	cp.b	r9,r8
8000438a:	c0 c0       	breq	800043a2 <flashc_memset64+0x3d6>
				flashc_erase_user_page(false);
8000438c:	30 0c       	mov	r12,0
8000438e:	f0 1f 00 18 	mcall	800043ec <flashc_memset64+0x420>
				error_status |= flashc_error_status;
80004392:	49 48       	lddpc	r8,800043e0 <flashc_memset64+0x414>
80004394:	70 08       	ld.w	r8,r8[0x0]
80004396:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000439a:	f3 e8 10 08 	or	r8,r9,r8
8000439e:	ef 48 ff ec 	st.w	r7[-20],r8
			}
			flashc_write_user_page();
800043a2:	f0 1f 00 14 	mcall	800043f0 <flashc_memset64+0x424>
			error_status |= flashc_error_status;
800043a6:	48 f8       	lddpc	r8,800043e0 <flashc_memset64+0x414>
800043a8:	70 08       	ld.w	r8,r8[0x0]
800043aa:	ee f9 ff ec 	ld.w	r9,r7[-20]
800043ae:	f3 e8 10 08 	or	r8,r9,r8
800043b2:	ef 48 ff ec 	st.w	r7[-20],r8
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
800043b6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800043ba:	ee f8 ff d4 	ld.w	r8,r7[-44]
800043be:	10 39       	cp.w	r9,r8
800043c0:	fe 93 fe b1 	brlo	80004122 <flashc_memset64+0x156>
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
800043c4:	48 78       	lddpc	r8,800043e0 <flashc_memset64+0x414>
800043c6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800043ca:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memset function does.
	return dst;
800043cc:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
800043d0:	10 9c       	mov	r12,r8
800043d2:	2e 5d       	sub	sp,-108
800043d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800043d8:	80 00       	ld.sh	r0,r0[0x0]
800043da:	3c 60       	mov	r0,-58
800043dc:	80 00       	ld.sh	r0,r0[0x0]
800043de:	3d 74       	mov	r4,-41
800043e0:	00 00       	add	r0,r0
800043e2:	00 bc       	st.h	r0++,r12
800043e4:	80 00       	ld.sh	r0,r0[0x0]
800043e6:	3d d4       	mov	r4,-35
800043e8:	80 00       	ld.sh	r0,r0[0x0]
800043ea:	3e 3c       	mov	r12,-29
800043ec:	80 00       	ld.sh	r0,r0[0x0]
800043ee:	3e 80       	mov	r0,-24
800043f0:	80 00       	ld.sh	r0,r0[0x0]
800043f2:	3e bc       	mov	r12,-21

800043f4 <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800043f4:	eb cd 40 80 	pushm	r7,lr
800043f8:	1a 97       	mov	r7,sp
800043fa:	20 bd       	sub	sp,44
800043fc:	ef 4c ff e0 	st.w	r7[-32],r12
80004400:	ef 4b ff dc 	st.w	r7[-36],r11
80004404:	ef 4a ff d8 	st.w	r7[-40],r10
80004408:	12 98       	mov	r8,r9
8000440a:	ef 68 ff d4 	st.b	r7[-44],r8
	uint16_t page_pos;
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
8000440e:	30 08       	mov	r8,0
80004410:	ef 48 ff f0 	st.w	r7[-16],r8
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
80004414:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004418:	ef 48 ff f8 	st.w	r7[-8],r8
	const uint8_t* src_buf=(const uint8_t*)src;
8000441c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80004420:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80004424:	ee f9 ff e0 	ld.w	r9,r7[-32]
80004428:	30 18       	mov	r8,1
8000442a:	e0 6a ff ff 	mov	r10,65535
8000442e:	ea 1a 80 7f 	orh	r10,0x807f
80004432:	14 39       	cp.w	r9,r10
80004434:	e0 8b 00 03 	brhi	8000443a <flashc_memcpy+0x46>
80004438:	30 08       	mov	r8,0
8000443a:	ef 68 ff ef 	st.b	r7[-17],r8

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
8000443e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004442:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004446:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8000444a:	f2 08 01 08 	sub	r8,r9,r8
8000444e:	ef 48 ff f4 	st.w	r7[-12],r8

	while (nbytes) {
80004452:	c9 18       	rjmp	80004574 <flashc_memcpy+0x180>
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
80004454:	f0 1f 00 50 	mcall	80004594 <flashc_memcpy+0x1a0>
		error_status |= flashc_error_status;
80004458:	4d 08       	lddpc	r8,80004598 <flashc_memcpy+0x1a4>
8000445a:	70 08       	ld.w	r8,r8[0x0]
8000445c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004460:	f3 e8 10 08 	or	r8,r9,r8
80004464:	ef 48 ff f0 	st.w	r7[-16],r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80004468:	30 08       	mov	r8,0
8000446a:	ef 58 ff ec 	st.h	r7[-20],r8
8000446e:	c4 b8       	rjmp	80004504 <flashc_memcpy+0x110>
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
80004470:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004474:	f0 e8 00 00 	ld.d	r8,r8[0]
80004478:	ee e9 ff e4 	st.d	r7[-28],r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
8000447c:	30 08       	mov	r8,0
8000447e:	ef 68 ff ee 	st.b	r7[-18],r8
80004482:	c2 d8       	rjmp	800044dc <flashc_memcpy+0xe8>
				if (nbytes && (flash_add == dest_add)) {
80004484:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004488:	58 08       	cp.w	r8,0
8000448a:	c1 f0       	breq	800044c8 <flashc_memcpy+0xd4>
8000448c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004490:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004494:	10 39       	cp.w	r9,r8
80004496:	c1 91       	brne	800044c8 <flashc_memcpy+0xd4>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80004498:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000449c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044a0:	11 88       	ld.ub	r8,r8[0x0]
800044a2:	ee 09 00 09 	add	r9,r7,r9
800044a6:	f3 68 ff e4 	st.b	r9[-28],r8
800044aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044ae:	2f f8       	sub	r8,-1
800044b0:	ef 48 ff fc 	st.w	r7[-4],r8
					dest_add++;
800044b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044b8:	2f f8       	sub	r8,-1
800044ba:	ef 48 ff f8 	st.w	r7[-8],r8
					nbytes--;
800044be:	ee f8 ff d8 	ld.w	r8,r7[-40]
800044c2:	20 18       	sub	r8,1
800044c4:	ef 48 ff d8 	st.w	r7[-40],r8
				}
				flash_add++;
800044c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044cc:	2f f8       	sub	r8,-1
800044ce:	ef 48 ff f4 	st.w	r7[-12],r8
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
800044d2:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800044d6:	2f f8       	sub	r8,-1
800044d8:	ef 68 ff ee 	st.b	r7[-18],r8
800044dc:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800044e0:	30 78       	mov	r8,7
800044e2:	f0 09 18 00 	cp.b	r9,r8
800044e6:	fe 98 ff cf 	brls	80004484 <flashc_memcpy+0x90>
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
800044ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044ee:	20 88       	sub	r8,8
800044f0:	10 9a       	mov	r10,r8
800044f2:	ee e8 ff e4 	ld.d	r8,r7[-28]
800044f6:	f4 e9 00 00 	st.d	r10[0],r8
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
800044fa:	ef 08 ff ec 	ld.sh	r8,r7[-20]
800044fe:	2f 88       	sub	r8,-8
80004500:	ef 58 ff ec 	st.h	r7[-20],r8
80004504:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80004508:	e0 68 01 ff 	mov	r8,511
8000450c:	f0 09 19 00 	cp.h	r9,r8
80004510:	fe 98 ff b0 	brls	80004470 <flashc_memcpy+0x7c>
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
80004514:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80004518:	30 08       	mov	r8,0
8000451a:	f0 09 18 00 	cp.b	r9,r8
8000451e:	c1 70       	breq	8000454c <flashc_memcpy+0x158>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
80004520:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80004524:	30 08       	mov	r8,0
80004526:	f0 09 18 00 	cp.b	r9,r8
8000452a:	c0 50       	breq	80004534 <flashc_memcpy+0x140>
8000452c:	30 0c       	mov	r12,0
8000452e:	f0 1f 00 1c 	mcall	8000459c <flashc_memcpy+0x1a8>
80004532:	c0 58       	rjmp	8000453c <flashc_memcpy+0x148>
80004534:	30 0b       	mov	r11,0
80004536:	3f fc       	mov	r12,-1
80004538:	f0 1f 00 1a 	mcall	800045a0 <flashc_memcpy+0x1ac>
			error_status |= flashc_error_status;
8000453c:	49 78       	lddpc	r8,80004598 <flashc_memcpy+0x1a4>
8000453e:	70 08       	ld.w	r8,r8[0x0]
80004540:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004544:	f3 e8 10 08 	or	r8,r9,r8
80004548:	ef 48 ff f0 	st.w	r7[-16],r8
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
8000454c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80004550:	30 08       	mov	r8,0
80004552:	f0 09 18 00 	cp.b	r9,r8
80004556:	c0 40       	breq	8000455e <flashc_memcpy+0x16a>
80004558:	f0 1f 00 13 	mcall	800045a4 <flashc_memcpy+0x1b0>
8000455c:	c0 48       	rjmp	80004564 <flashc_memcpy+0x170>
8000455e:	3f fc       	mov	r12,-1
80004560:	f0 1f 00 12 	mcall	800045a8 <flashc_memcpy+0x1b4>
		error_status |= flashc_error_status;
80004564:	48 d8       	lddpc	r8,80004598 <flashc_memcpy+0x1a4>
80004566:	70 08       	ld.w	r8,r8[0x0]
80004568:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000456c:	f3 e8 10 08 	or	r8,r9,r8
80004570:	ef 48 ff f0 	st.w	r7[-16],r8

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80004574:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004578:	58 08       	cp.w	r8,0
8000457a:	fe 91 ff 6d 	brne	80004454 <flashc_memcpy+0x60>
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
8000457e:	48 78       	lddpc	r8,80004598 <flashc_memcpy+0x1a4>
80004580:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004584:	91 09       	st.w	r8[0x0],r9

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
80004586:	ee f8 ff e0 	ld.w	r8,r7[-32]
}
8000458a:	10 9c       	mov	r12,r8
8000458c:	2f 5d       	sub	sp,-44
8000458e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004592:	00 00       	add	r0,r0
80004594:	80 00       	ld.sh	r0,r0[0x0]
80004596:	3d 74       	mov	r4,-41
80004598:	00 00       	add	r0,r0
8000459a:	00 bc       	st.h	r0++,r12
8000459c:	80 00       	ld.sh	r0,r0[0x0]
8000459e:	3e 80       	mov	r0,-24
800045a0:	80 00       	ld.sh	r0,r0[0x0]
800045a2:	3d d4       	mov	r4,-35
800045a4:	80 00       	ld.sh	r0,r0[0x0]
800045a6:	3e bc       	mov	r12,-21
800045a8:	80 00       	ld.sh	r0,r0[0x0]
800045aa:	3e 3c       	mov	r12,-29

800045ac <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800045ac:	eb cd 40 80 	pushm	r7,lr
800045b0:	1a 97       	mov	r7,sp
800045b2:	20 4d       	sub	sp,16
800045b4:	ef 4c ff f4 	st.w	r7[-12],r12
800045b8:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
800045bc:	30 08       	mov	r8,0
800045be:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
800045c2:	30 08       	mov	r8,0
800045c4:	ef 48 ff fc 	st.w	r7[-4],r8
800045c8:	c1 c8       	rjmp	80004600 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800045ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800045ce:	70 19       	ld.w	r9,r8[0x4]
800045d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800045d4:	70 08       	ld.w	r8,r8[0x0]
800045d6:	12 9b       	mov	r11,r9
800045d8:	10 9c       	mov	r12,r8
800045da:	f0 1f 00 10 	mcall	80004618 <gpio_enable_module+0x6c>
800045de:	18 98       	mov	r8,r12
800045e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800045e4:	f3 e8 10 08 	or	r8,r9,r8
800045e8:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
800045ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800045f0:	2f 88       	sub	r8,-8
800045f2:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800045f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045fa:	2f f8       	sub	r8,-1
800045fc:	ef 48 ff fc 	st.w	r7[-4],r8
80004600:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004604:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004608:	10 39       	cp.w	r9,r8
8000460a:	ce 03       	brcs	800045ca <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
8000460c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80004610:	10 9c       	mov	r12,r8
80004612:	2f cd       	sub	sp,-16
80004614:	e3 cd 80 80 	ldm	sp++,r7,pc
80004618:	80 00       	ld.sh	r0,r0[0x0]
8000461a:	46 1c       	lddsp	r12,sp[0x184]

8000461c <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
8000461c:	eb cd 40 80 	pushm	r7,lr
80004620:	1a 97       	mov	r7,sp
80004622:	20 3d       	sub	sp,12
80004624:	ef 4c ff f8 	st.w	r7[-8],r12
80004628:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000462c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004630:	a5 98       	lsr	r8,0x5
80004632:	a9 78       	lsl	r8,0x9
80004634:	e0 28 e0 00 	sub	r8,57344
80004638:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
8000463c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004640:	58 78       	cp.w	r8,7
80004642:	e0 8b 01 16 	brhi	8000486e <gpio_enable_module_pin+0x252>
80004646:	fe f9 02 4e 	ld.w	r9,pc[590]
8000464a:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000464e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004652:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004656:	30 19       	mov	r9,1
80004658:	f2 08 09 48 	lsl	r8,r9,r8
8000465c:	10 99       	mov	r9,r8
8000465e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004662:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004664:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004668:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000466c:	30 19       	mov	r9,1
8000466e:	f2 08 09 48 	lsl	r8,r9,r8
80004672:	10 99       	mov	r9,r8
80004674:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004678:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000467a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000467e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004682:	30 19       	mov	r9,1
80004684:	f2 08 09 48 	lsl	r8,r9,r8
80004688:	10 99       	mov	r9,r8
8000468a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000468e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004690:	cf 18       	rjmp	80004872 <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004692:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004696:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000469a:	30 19       	mov	r9,1
8000469c:	f2 08 09 48 	lsl	r8,r9,r8
800046a0:	10 99       	mov	r9,r8
800046a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046a6:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800046a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046b0:	30 19       	mov	r9,1
800046b2:	f2 08 09 48 	lsl	r8,r9,r8
800046b6:	10 99       	mov	r9,r8
800046b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046bc:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800046be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046c6:	30 19       	mov	r9,1
800046c8:	f2 08 09 48 	lsl	r8,r9,r8
800046cc:	10 99       	mov	r9,r8
800046ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046d2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800046d4:	cc f8       	rjmp	80004872 <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800046d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046de:	30 19       	mov	r9,1
800046e0:	f2 08 09 48 	lsl	r8,r9,r8
800046e4:	10 99       	mov	r9,r8
800046e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046ea:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800046ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046f4:	30 19       	mov	r9,1
800046f6:	f2 08 09 48 	lsl	r8,r9,r8
800046fa:	10 99       	mov	r9,r8
800046fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004700:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80004702:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004706:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000470a:	30 19       	mov	r9,1
8000470c:	f2 08 09 48 	lsl	r8,r9,r8
80004710:	10 99       	mov	r9,r8
80004712:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004716:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80004718:	ca d8       	rjmp	80004872 <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000471a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000471e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004722:	30 19       	mov	r9,1
80004724:	f2 08 09 48 	lsl	r8,r9,r8
80004728:	10 99       	mov	r9,r8
8000472a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000472e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004730:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004734:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004738:	30 19       	mov	r9,1
8000473a:	f2 08 09 48 	lsl	r8,r9,r8
8000473e:	10 99       	mov	r9,r8
80004740:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004744:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80004746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000474a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000474e:	30 19       	mov	r9,1
80004750:	f2 08 09 48 	lsl	r8,r9,r8
80004754:	10 99       	mov	r9,r8
80004756:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000475a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000475c:	c8 b8       	rjmp	80004872 <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000475e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004762:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004766:	30 19       	mov	r9,1
80004768:	f2 08 09 48 	lsl	r8,r9,r8
8000476c:	10 99       	mov	r9,r8
8000476e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004772:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004774:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004778:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000477c:	30 19       	mov	r9,1
8000477e:	f2 08 09 48 	lsl	r8,r9,r8
80004782:	10 99       	mov	r9,r8
80004784:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004788:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000478a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000478e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004792:	30 19       	mov	r9,1
80004794:	f2 08 09 48 	lsl	r8,r9,r8
80004798:	10 99       	mov	r9,r8
8000479a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000479e:	91 d9       	st.w	r8[0x34],r9
		break;
800047a0:	c6 98       	rjmp	80004872 <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800047a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047aa:	30 19       	mov	r9,1
800047ac:	f2 08 09 48 	lsl	r8,r9,r8
800047b0:	10 99       	mov	r9,r8
800047b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047b6:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800047b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047bc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047c0:	30 19       	mov	r9,1
800047c2:	f2 08 09 48 	lsl	r8,r9,r8
800047c6:	10 99       	mov	r9,r8
800047c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047cc:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800047ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047d6:	30 19       	mov	r9,1
800047d8:	f2 08 09 48 	lsl	r8,r9,r8
800047dc:	10 99       	mov	r9,r8
800047de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047e2:	91 d9       	st.w	r8[0x34],r9
		break;
800047e4:	c4 78       	rjmp	80004872 <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800047e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047ee:	30 19       	mov	r9,1
800047f0:	f2 08 09 48 	lsl	r8,r9,r8
800047f4:	10 99       	mov	r9,r8
800047f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047fa:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800047fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004800:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004804:	30 19       	mov	r9,1
80004806:	f2 08 09 48 	lsl	r8,r9,r8
8000480a:	10 99       	mov	r9,r8
8000480c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004810:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80004812:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004816:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000481a:	30 19       	mov	r9,1
8000481c:	f2 08 09 48 	lsl	r8,r9,r8
80004820:	10 99       	mov	r9,r8
80004822:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004826:	91 d9       	st.w	r8[0x34],r9
		break;
80004828:	c2 58       	rjmp	80004872 <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000482a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000482e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004832:	30 19       	mov	r9,1
80004834:	f2 08 09 48 	lsl	r8,r9,r8
80004838:	10 99       	mov	r9,r8
8000483a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000483e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004840:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004844:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004848:	30 19       	mov	r9,1
8000484a:	f2 08 09 48 	lsl	r8,r9,r8
8000484e:	10 99       	mov	r9,r8
80004850:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004854:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80004856:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000485a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000485e:	30 19       	mov	r9,1
80004860:	f2 08 09 48 	lsl	r8,r9,r8
80004864:	10 99       	mov	r9,r8
80004866:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000486a:	91 d9       	st.w	r8[0x34],r9
		break;
8000486c:	c0 38       	rjmp	80004872 <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
8000486e:	30 18       	mov	r8,1
80004870:	c0 d8       	rjmp	8000488a <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80004872:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004876:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000487a:	30 19       	mov	r9,1
8000487c:	f2 08 09 48 	lsl	r8,r9,r8
80004880:	10 99       	mov	r9,r8
80004882:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004886:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80004888:	30 08       	mov	r8,0
}
8000488a:	10 9c       	mov	r12,r8
8000488c:	2f dd       	sub	sp,-12
8000488e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004892:	00 00       	add	r0,r0
80004894:	80 00       	ld.sh	r0,r0[0x0]
80004896:	a4 40       	st.h	r2[0x8],r0

80004898 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80004898:	eb cd 40 80 	pushm	r7,lr
8000489c:	1a 97       	mov	r7,sp
8000489e:	20 3d       	sub	sp,12
800048a0:	ef 4c ff f8 	st.w	r7[-8],r12
800048a4:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800048a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048ac:	a5 98       	lsr	r8,0x5
800048ae:	a9 78       	lsl	r8,0x9
800048b0:	e0 28 e0 00 	sub	r8,57344
800048b4:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
800048b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048bc:	e2 18 00 08 	andl	r8,0x8,COH
800048c0:	c0 e0       	breq	800048dc <gpio_configure_pin+0x44>
		gpio_port->pders = 1 << (pin & 0x1F);
800048c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048c6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048ca:	30 19       	mov	r9,1
800048cc:	f2 08 09 48 	lsl	r8,r9,r8
800048d0:	10 99       	mov	r9,r8
800048d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048d6:	f1 49 00 84 	st.w	r8[132],r9
800048da:	c0 d8       	rjmp	800048f4 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
800048dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048e4:	30 19       	mov	r9,1
800048e6:	f2 08 09 48 	lsl	r8,r9,r8
800048ea:	10 99       	mov	r9,r8
800048ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048f0:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
800048f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048f8:	e2 18 00 04 	andl	r8,0x4,COH
800048fc:	c0 e0       	breq	80004918 <gpio_configure_pin+0x80>
		gpio_port->puers = 1 << (pin & 0x1F);
800048fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004902:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004906:	30 19       	mov	r9,1
80004908:	f2 08 09 48 	lsl	r8,r9,r8
8000490c:	10 99       	mov	r9,r8
8000490e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004912:	f1 49 00 74 	st.w	r8[116],r9
80004916:	c0 d8       	rjmp	80004930 <gpio_configure_pin+0x98>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80004918:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000491c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004920:	30 19       	mov	r9,1
80004922:	f2 08 09 48 	lsl	r8,r9,r8
80004926:	10 99       	mov	r9,r8
80004928:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000492c:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
80004930:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004934:	e2 18 00 40 	andl	r8,0x40,COH
80004938:	c0 e0       	breq	80004954 <gpio_configure_pin+0xbc>
		gpio_port->odmers = 1 << (pin & 0x1F);
8000493a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000493e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004942:	30 19       	mov	r9,1
80004944:	f2 08 09 48 	lsl	r8,r9,r8
80004948:	10 99       	mov	r9,r8
8000494a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000494e:	f1 49 00 e4 	st.w	r8[228],r9
80004952:	c0 d8       	rjmp	8000496c <gpio_configure_pin+0xd4>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
80004954:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004958:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000495c:	30 19       	mov	r9,1
8000495e:	f2 08 09 48 	lsl	r8,r9,r8
80004962:	10 99       	mov	r9,r8
80004964:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004968:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
8000496c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004970:	e2 18 00 10 	andl	r8,0x10,COH
80004974:	c0 e0       	breq	80004990 <gpio_configure_pin+0xf8>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
80004976:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000497a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000497e:	30 19       	mov	r9,1
80004980:	f2 08 09 48 	lsl	r8,r9,r8
80004984:	10 99       	mov	r9,r8
80004986:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000498a:	f1 49 01 04 	st.w	r8[260],r9
8000498e:	c0 d8       	rjmp	800049a8 <gpio_configure_pin+0x110>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
80004990:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004994:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004998:	30 19       	mov	r9,1
8000499a:	f2 08 09 48 	lsl	r8,r9,r8
8000499e:	10 99       	mov	r9,r8
800049a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049a4:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
800049a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049ac:	e2 18 00 20 	andl	r8,0x20,COH
800049b0:	c0 e0       	breq	800049cc <gpio_configure_pin+0x134>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
800049b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049b6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049ba:	30 19       	mov	r9,1
800049bc:	f2 08 09 48 	lsl	r8,r9,r8
800049c0:	10 99       	mov	r9,r8
800049c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049c6:	f1 49 01 14 	st.w	r8[276],r9
800049ca:	c0 d8       	rjmp	800049e4 <gpio_configure_pin+0x14c>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
800049cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049d4:	30 19       	mov	r9,1
800049d6:	f2 08 09 48 	lsl	r8,r9,r8
800049da:	10 99       	mov	r9,r8
800049dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049e0:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800049e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049e8:	e2 18 00 80 	andl	r8,0x80,COH
800049ec:	c5 a0       	breq	80004aa0 <gpio_configure_pin+0x208>
		if (flags & GPIO_BOTHEDGES) {
800049ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049f2:	e2 18 01 80 	andl	r8,0x180,COH
800049f6:	c1 a0       	breq	80004a2a <gpio_configure_pin+0x192>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800049f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049fc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a00:	30 19       	mov	r9,1
80004a02:	f2 08 09 48 	lsl	r8,r9,r8
80004a06:	10 99       	mov	r9,r8
80004a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a0c:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80004a10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a18:	30 19       	mov	r9,1
80004a1a:	f2 08 09 48 	lsl	r8,r9,r8
80004a1e:	10 99       	mov	r9,r8
80004a20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a24:	f1 49 00 b8 	st.w	r8[184],r9
80004a28:	c3 c8       	rjmp	80004aa0 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_RISING) {
80004a2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a2e:	e2 18 02 80 	andl	r8,0x280,COH
80004a32:	c1 a0       	breq	80004a66 <gpio_configure_pin+0x1ce>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80004a34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a38:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a3c:	30 19       	mov	r9,1
80004a3e:	f2 08 09 48 	lsl	r8,r9,r8
80004a42:	10 99       	mov	r9,r8
80004a44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a48:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80004a4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a50:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a54:	30 19       	mov	r9,1
80004a56:	f2 08 09 48 	lsl	r8,r9,r8
80004a5a:	10 99       	mov	r9,r8
80004a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a60:	f1 49 00 b8 	st.w	r8[184],r9
80004a64:	c1 e8       	rjmp	80004aa0 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_FALLING) {
80004a66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a6a:	e2 18 03 80 	andl	r8,0x380,COH
80004a6e:	c1 90       	breq	80004aa0 <gpio_configure_pin+0x208>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004a70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a74:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a78:	30 19       	mov	r9,1
80004a7a:	f2 08 09 48 	lsl	r8,r9,r8
80004a7e:	10 99       	mov	r9,r8
80004a80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a84:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80004a88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a8c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a90:	30 19       	mov	r9,1
80004a92:	f2 08 09 48 	lsl	r8,r9,r8
80004a96:	10 99       	mov	r9,r8
80004a98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a9c:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80004aa0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004aa4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004aa8:	5c 58       	castu.b	r8
80004aaa:	c2 c0       	breq	80004b02 <gpio_configure_pin+0x26a>
		if (flags & GPIO_INIT_HIGH) {
80004aac:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ab0:	e2 18 00 02 	andl	r8,0x2,COH
80004ab4:	c0 e0       	breq	80004ad0 <gpio_configure_pin+0x238>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80004ab6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004abe:	30 19       	mov	r9,1
80004ac0:	f2 08 09 48 	lsl	r8,r9,r8
80004ac4:	10 99       	mov	r9,r8
80004ac6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004aca:	f1 49 00 54 	st.w	r8[84],r9
80004ace:	c0 d8       	rjmp	80004ae8 <gpio_configure_pin+0x250>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80004ad0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ad4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004ad8:	30 19       	mov	r9,1
80004ada:	f2 08 09 48 	lsl	r8,r9,r8
80004ade:	10 99       	mov	r9,r8
80004ae0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ae4:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80004ae8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004af0:	30 19       	mov	r9,1
80004af2:	f2 08 09 48 	lsl	r8,r9,r8
80004af6:	10 99       	mov	r9,r8
80004af8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004afc:	f1 49 00 44 	st.w	r8[68],r9
80004b00:	c0 d8       	rjmp	80004b1a <gpio_configure_pin+0x282>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80004b02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b06:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b0a:	30 19       	mov	r9,1
80004b0c:	f2 08 09 48 	lsl	r8,r9,r8
80004b10:	10 99       	mov	r9,r8
80004b12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b16:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004b1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b1e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b22:	30 19       	mov	r9,1
80004b24:	f2 08 09 48 	lsl	r8,r9,r8
80004b28:	10 99       	mov	r9,r8
80004b2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b2e:	91 19       	st.w	r8[0x4],r9
}
80004b30:	2f dd       	sub	sp,-12
80004b32:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b36 <gpio_get_pin_value>:
 * \param pin The pin number.
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
80004b36:	eb cd 40 80 	pushm	r7,lr
80004b3a:	1a 97       	mov	r7,sp
80004b3c:	20 2d       	sub	sp,8
80004b3e:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b46:	a5 98       	lsr	r8,0x5
80004b48:	a9 78       	lsl	r8,0x9
80004b4a:	e0 28 e0 00 	sub	r8,57344
80004b4e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80004b52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b56:	71 89       	ld.w	r9,r8[0x60]
80004b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b5c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b60:	f2 08 0a 48 	lsr	r8,r9,r8
80004b64:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004b68:	5c 58       	castu.b	r8
}
80004b6a:	10 9c       	mov	r12,r8
80004b6c:	2f ed       	sub	sp,-8
80004b6e:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b72 <gpio_set_pin_high>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
80004b72:	eb cd 40 80 	pushm	r7,lr
80004b76:	1a 97       	mov	r7,sp
80004b78:	20 2d       	sub	sp,8
80004b7a:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b82:	a5 98       	lsr	r8,0x5
80004b84:	a9 78       	lsl	r8,0x9
80004b86:	e0 28 e0 00 	sub	r8,57344
80004b8a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80004b8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b92:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b96:	30 19       	mov	r9,1
80004b98:	f2 08 09 48 	lsl	r8,r9,r8
80004b9c:	10 99       	mov	r9,r8
80004b9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ba2:	f1 49 00 54 	st.w	r8[84],r9
}
80004ba6:	2f ed       	sub	sp,-8
80004ba8:	e3 cd 80 80 	ldm	sp++,r7,pc

80004bac <gpio_set_pin_low>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
80004bac:	eb cd 40 80 	pushm	r7,lr
80004bb0:	1a 97       	mov	r7,sp
80004bb2:	20 2d       	sub	sp,8
80004bb4:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004bb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004bbc:	a5 98       	lsr	r8,0x5
80004bbe:	a9 78       	lsl	r8,0x9
80004bc0:	e0 28 e0 00 	sub	r8,57344
80004bc4:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004bc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004bcc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004bd0:	30 19       	mov	r9,1
80004bd2:	f2 08 09 48 	lsl	r8,r9,r8
80004bd6:	10 99       	mov	r9,r8
80004bd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bdc:	f1 49 00 58 	st.w	r8[88],r9
}
80004be0:	2f ed       	sub	sp,-8
80004be2:	e3 cd 80 80 	ldm	sp++,r7,pc

80004be6 <gpio_toggle_pin>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
80004be6:	eb cd 40 80 	pushm	r7,lr
80004bea:	1a 97       	mov	r7,sp
80004bec:	20 2d       	sub	sp,8
80004bee:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004bf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004bf6:	a5 98       	lsr	r8,0x5
80004bf8:	a9 78       	lsl	r8,0x9
80004bfa:	e0 28 e0 00 	sub	r8,57344
80004bfe:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80004c02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c06:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004c0a:	30 19       	mov	r9,1
80004c0c:	f2 08 09 48 	lsl	r8,r9,r8
80004c10:	10 99       	mov	r9,r8
80004c12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c16:	f1 49 00 5c 	st.w	r8[92],r9
}
80004c1a:	2f ed       	sub	sp,-8
80004c1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004c20 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80004c20:	eb cd 40 80 	pushm	r7,lr
80004c24:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80004c26:	c0 08       	rjmp	80004c26 <_unhandled_interrupt+0x6>

80004c28 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80004c28:	eb cd 40 80 	pushm	r7,lr
80004c2c:	1a 97       	mov	r7,sp
80004c2e:	20 3d       	sub	sp,12
80004c30:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80004c34:	fe 78 00 00 	mov	r8,-65536
80004c38:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004c3c:	f2 09 11 03 	rsub	r9,r9,3
80004c40:	28 09       	sub	r9,-128
80004c42:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004c46:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80004c4a:	fe 78 00 00 	mov	r8,-65536
80004c4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c52:	2c 09       	sub	r9,-64
80004c54:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004c58:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004c5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c60:	58 08       	cp.w	r8,0
80004c62:	c1 30       	breq	80004c88 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004c64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c68:	48 b8       	lddpc	r8,80004c94 <_get_interrupt_handler+0x6c>
80004c6a:	a1 79       	lsl	r9,0x1
80004c6c:	2f f9       	sub	r9,-1
80004c6e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004c72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c76:	f0 08 12 00 	clz	r8,r8
80004c7a:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80004c7e:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004c80:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004c84:	70 08       	ld.w	r8,r8[0x0]
80004c86:	c0 28       	rjmp	80004c8a <_get_interrupt_handler+0x62>
80004c88:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80004c8a:	10 9c       	mov	r12,r8
80004c8c:	2f dd       	sub	sp,-12
80004c8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c92:	00 00       	add	r0,r0
80004c94:	80 00       	ld.sh	r0,r0[0x0]
80004c96:	a4 60       	st.h	r2[0xc],r0

80004c98 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80004c98:	eb cd 40 80 	pushm	r7,lr
80004c9c:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004c9e:	48 38       	lddpc	r8,80004ca8 <INTC_init_evba+0x10>
80004ca0:	e3 b8 00 01 	mtsr	0x4,r8
}
80004ca4:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ca8:	80 00       	ld.sh	r0,r0[0x0]
80004caa:	a2 00       	st.h	r1[0x0],r0

80004cac <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80004cac:	eb cd 40 80 	pushm	r7,lr
80004cb0:	1a 97       	mov	r7,sp
80004cb2:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80004cb4:	f0 1f 00 20 	mcall	80004d34 <INTC_init_interrupts+0x88>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004cb8:	30 08       	mov	r8,0
80004cba:	ef 48 ff f8 	st.w	r7[-8],r8
80004cbe:	c3 18       	rjmp	80004d20 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004cc0:	30 08       	mov	r8,0
80004cc2:	ef 48 ff fc 	st.w	r7[-4],r8
80004cc6:	c1 48       	rjmp	80004cee <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80004cc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004ccc:	49 b8       	lddpc	r8,80004d38 <INTC_init_interrupts+0x8c>
80004cce:	a1 79       	lsl	r9,0x1
80004cd0:	2f f9       	sub	r9,-1
80004cd2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004cd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cda:	a3 68       	lsl	r8,0x2
80004cdc:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004ce0:	49 79       	lddpc	r9,80004d3c <INTC_init_interrupts+0x90>
80004ce2:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004ce4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ce8:	2f f8       	sub	r8,-1
80004cea:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80004cee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004cf2:	49 28       	lddpc	r8,80004d38 <INTC_init_interrupts+0x8c>
80004cf4:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004cf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cfc:	10 39       	cp.w	r9,r8
80004cfe:	fe 9b ff e5 	brhi	80004cc8 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004d02:	fe 78 00 00 	mov	r8,-65536
80004d06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004d0a:	48 eb       	lddpc	r11,80004d40 <INTC_init_interrupts+0x94>
80004d0c:	48 ea       	lddpc	r10,80004d44 <INTC_init_interrupts+0x98>
80004d0e:	f6 0a 01 0a 	sub	r10,r11,r10
80004d12:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004d16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004d1a:	2f f8       	sub	r8,-1
80004d1c:	ef 48 ff f8 	st.w	r7[-8],r8
80004d20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004d24:	e0 48 00 2e 	cp.w	r8,46
80004d28:	fe 98 ff cc 	brls	80004cc0 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80004d2c:	2f ed       	sub	sp,-8
80004d2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d32:	00 00       	add	r0,r0
80004d34:	80 00       	ld.sh	r0,r0[0x0]
80004d36:	4c 98       	lddpc	r8,80004e58 <pm_set_mclk_source+0x1c>
80004d38:	80 00       	ld.sh	r0,r0[0x0]
80004d3a:	a4 60       	st.h	r2[0xc],r0
80004d3c:	80 00       	ld.sh	r0,r0[0x0]
80004d3e:	4c 20       	lddpc	r0,80004e44 <pm_set_mclk_source+0x8>
80004d40:	80 00       	ld.sh	r0,r0[0x0]
80004d42:	a3 04       	ld.d	r4,r1
80004d44:	80 00       	ld.sh	r0,r0[0x0]
80004d46:	a2 00       	st.h	r1[0x0],r0

80004d48 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80004d48:	eb cd 40 80 	pushm	r7,lr
80004d4c:	1a 97       	mov	r7,sp
80004d4e:	20 4d       	sub	sp,16
80004d50:	ef 4c ff f8 	st.w	r7[-8],r12
80004d54:	ef 4b ff f4 	st.w	r7[-12],r11
80004d58:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80004d5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004d60:	a5 98       	lsr	r8,0x5
80004d62:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80004d66:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d6a:	4a 78       	lddpc	r8,80004e04 <INTC_register_interrupt+0xbc>
80004d6c:	a1 79       	lsl	r9,0x1
80004d6e:	2f f9       	sub	r9,-1
80004d70:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004d74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004d78:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004d7c:	a3 68       	lsl	r8,0x2
80004d7e:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80004d82:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004d86:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80004d88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d8c:	58 08       	cp.w	r8,0
80004d8e:	c0 c1       	brne	80004da6 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004d90:	fe 78 00 00 	mov	r8,-65536
80004d94:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d98:	49 cb       	lddpc	r11,80004e08 <INTC_register_interrupt+0xc0>
80004d9a:	49 da       	lddpc	r10,80004e0c <INTC_register_interrupt+0xc4>
80004d9c:	f6 0a 01 0a 	sub	r10,r11,r10
80004da0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004da4:	c2 d8       	rjmp	80004dfe <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80004da6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004daa:	58 18       	cp.w	r8,1
80004dac:	c0 d1       	brne	80004dc6 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004dae:	fe 78 00 00 	mov	r8,-65536
80004db2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004db6:	49 7b       	lddpc	r11,80004e10 <INTC_register_interrupt+0xc8>
80004db8:	49 5a       	lddpc	r10,80004e0c <INTC_register_interrupt+0xc4>
80004dba:	f6 0a 01 0a 	sub	r10,r11,r10
80004dbe:	bf aa       	sbr	r10,0x1e
80004dc0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004dc4:	c1 d8       	rjmp	80004dfe <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80004dc6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004dca:	58 28       	cp.w	r8,2
80004dcc:	c0 d1       	brne	80004de6 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80004dce:	fe 78 00 00 	mov	r8,-65536
80004dd2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004dd6:	49 0b       	lddpc	r11,80004e14 <INTC_register_interrupt+0xcc>
80004dd8:	48 da       	lddpc	r10,80004e0c <INTC_register_interrupt+0xc4>
80004dda:	f6 0a 01 0a 	sub	r10,r11,r10
80004dde:	bf ba       	sbr	r10,0x1f
80004de0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004de4:	c0 d8       	rjmp	80004dfe <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004de6:	fe 78 00 00 	mov	r8,-65536
80004dea:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004dee:	48 bb       	lddpc	r11,80004e18 <INTC_register_interrupt+0xd0>
80004df0:	48 7a       	lddpc	r10,80004e0c <INTC_register_interrupt+0xc4>
80004df2:	f6 0a 01 0a 	sub	r10,r11,r10
80004df6:	ea 1a c0 00 	orh	r10,0xc000
80004dfa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80004dfe:	2f cd       	sub	sp,-16
80004e00:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e04:	80 00       	ld.sh	r0,r0[0x0]
80004e06:	a4 60       	st.h	r2[0xc],r0
80004e08:	80 00       	ld.sh	r0,r0[0x0]
80004e0a:	a3 04       	ld.d	r4,r1
80004e0c:	80 00       	ld.sh	r0,r0[0x0]
80004e0e:	a2 00       	st.h	r1[0x0],r0
80004e10:	80 00       	ld.sh	r0,r0[0x0]
80004e12:	a3 12       	ld.d	r2,--r1
80004e14:	80 00       	ld.sh	r0,r0[0x0]
80004e16:	a3 20       	st.d	r1++,r0
80004e18:	80 00       	ld.sh	r0,r0[0x0]
80004e1a:	a3 2e       	st.d	r1++,lr

80004e1c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004e1c:	eb cd 40 80 	pushm	r7,lr
80004e20:	1a 97       	mov	r7,sp
80004e22:	20 1d       	sub	sp,4
80004e24:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004e28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e2c:	e6 18 00 01 	andh	r8,0x1,COH
80004e30:	5f 08       	sreq	r8
80004e32:	5c 58       	castu.b	r8
}
80004e34:	10 9c       	mov	r12,r8
80004e36:	2f fd       	sub	sp,-4
80004e38:	e3 cd 80 80 	ldm	sp++,r7,pc

80004e3c <pm_set_mclk_source>:
/**
 ** Clock Functions
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
80004e3c:	eb cd 40 80 	pushm	r7,lr
80004e40:	1a 97       	mov	r7,sp
80004e42:	20 2d       	sub	sp,8
80004e44:	ef 4c ff f8 	st.w	r7[-8],r12
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
80004e48:	e1 b8 00 00 	mfsr	r8,0x0
80004e4c:	10 9c       	mov	r12,r8
80004e4e:	f0 1f 00 0f 	mcall	80004e88 <pm_set_mclk_source+0x4c>
80004e52:	18 98       	mov	r8,r12
80004e54:	ef 68 ff ff 	st.b	r7[-1],r8
80004e58:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
80004e5a:	fe 78 04 00 	mov	r8,-64512
80004e5e:	fc 19 aa 00 	movh	r9,0xaa00
80004e62:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.mcctrl = src;
80004e66:	fe 78 04 00 	mov	r8,-64512
80004e6a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004e6e:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80004e70:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004e74:	30 08       	mov	r8,0
80004e76:	f0 09 18 00 	cp.b	r9,r8
80004e7a:	c0 20       	breq	80004e7e <pm_set_mclk_source+0x42>
80004e7c:	d5 03       	csrf	0x10

  return PASS;
80004e7e:	30 08       	mov	r8,0
}
80004e80:	10 9c       	mov	r12,r8
80004e82:	2f ed       	sub	sp,-8
80004e84:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e88:	80 00       	ld.sh	r0,r0[0x0]
80004e8a:	4e 1c       	lddpc	r12,8000500c <twim_master_interrupt_handler+0x8>

80004e8c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004e8c:	eb cd 40 80 	pushm	r7,lr
80004e90:	1a 97       	mov	r7,sp
80004e92:	20 1d       	sub	sp,4
80004e94:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004e98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e9c:	e6 18 00 01 	andh	r8,0x1,COH
80004ea0:	5f 08       	sreq	r8
80004ea2:	5c 58       	castu.b	r8
}
80004ea4:	10 9c       	mov	r12,r8
80004ea6:	2f fd       	sub	sp,-4
80004ea8:	e3 cd 80 80 	ldm	sp++,r7,pc

80004eac <scif_start_rc8M>:
/**
 ** 8MHz RCosc Functions
 **/

void scif_start_rc8M(void)
{
80004eac:	eb cd 40 80 	pushm	r7,lr
80004eb0:	1a 97       	mov	r7,sp
80004eb2:	20 3d       	sub	sp,12
  unsigned int* calibration_bits = (unsigned int*)0x80800200;
80004eb4:	e0 68 02 00 	mov	r8,512
80004eb8:	ea 18 80 80 	orh	r8,0x8080
80004ebc:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned long tmp1;
  
  AVR32_ENTER_CRITICAL_REGION( );
80004ec0:	e1 b8 00 00 	mfsr	r8,0x0
80004ec4:	10 9c       	mov	r12,r8
80004ec6:	f0 1f 00 19 	mcall	80004f28 <scif_start_rc8M+0x7c>
80004eca:	18 98       	mov	r8,r12
80004ecc:	ef 68 ff ff 	st.b	r7[-1],r8
80004ed0:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
80004ed2:	fe 78 08 00 	mov	r8,-63488
80004ed6:	34 89       	mov	r9,72
80004ed8:	ea 19 aa 00 	orh	r9,0xaa00
80004edc:	91 69       	st.w	r8[0x18],r9
   * NOTE: Datasheet says that LS byte is for 8MHz at 3.3V, and byte[2] is for 8MHz at 5V so that's the one we really want 7apr15
   */
  
//debug AVR32_SCIF.rccr8 = AVR32_SCIF_RCCR8_RCOSC8_EN_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);

  tmp1 = (*calibration_bits);				//read calibration info from flash
80004ede:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ee2:	70 08       	ld.w	r8,r8[0x0]
80004ee4:	ef 48 ff f8 	st.w	r7[-8],r8
  tmp1 >>= 16;								//shift down by 16 to get byte[2] 7apr15
80004ee8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004eec:	b1 88       	lsr	r8,0x10
80004eee:	ef 48 ff f8 	st.w	r7[-8],r8
  tmp1 &= AVR32_SCIF_RCCR8_CALIB_MASK;		//7apr15
80004ef2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ef6:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80004efa:	ef 48 ff f8 	st.w	r7[-8],r8
  tmp1 |= AVR32_SCIF_RCCR8_RCOSC8_EN_MASK;  //7apr15
80004efe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f02:	b9 a8       	sbr	r8,0x18
80004f04:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_SCIF.rccr8 = tmp1;
80004f08:	fe 78 08 00 	mov	r8,-63488
80004f0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004f10:	f1 49 00 48 	st.w	r8[72],r9
  
  AVR32_LEAVE_CRITICAL_REGION( );
80004f14:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f18:	30 08       	mov	r8,0
80004f1a:	f0 09 18 00 	cp.b	r9,r8
80004f1e:	c0 20       	breq	80004f22 <scif_start_rc8M+0x76>
80004f20:	d5 03       	csrf	0x10
}
80004f22:	2f dd       	sub	sp,-12
80004f24:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f28:	80 00       	ld.sh	r0,r0[0x0]
80004f2a:	4e 8c       	lddpc	r12,800050c8 <twim_master_interrupt_handler+0xc4>

80004f2c <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
80004f2c:	eb cd 40 80 	pushm	r7,lr
80004f30:	1a 97       	mov	r7,sp
80004f32:	20 2d       	sub	sp,8
80004f34:	ef 4c ff fc 	st.w	r7[-4],r12
80004f38:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80004f3c:	fe 78 08 00 	mov	r8,-63488
80004f40:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004f44:	2e 79       	sub	r9,-25
80004f46:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004f4a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004f4e:	5c 58       	castu.b	r8
80004f50:	c0 30       	breq	80004f56 <scif_start_gclk+0x2a>
    return -1;
80004f52:	3f f8       	mov	r8,-1
80004f54:	c2 08       	rjmp	80004f94 <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80004f56:	fe 78 08 00 	mov	r8,-63488
80004f5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004f5e:	ee fa ff f8 	ld.w	r10,r7[-8]
80004f62:	74 1a       	ld.w	r10,r10[0x4]
80004f64:	b1 6a       	lsl	r10,0x10
80004f66:	14 9b       	mov	r11,r10
80004f68:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
80004f6c:	ee fa ff f8 	ld.w	r10,r7[-8]
80004f70:	74 2a       	ld.w	r10,r10[0x8]
80004f72:	a1 7a       	lsl	r10,0x1
80004f74:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80004f78:	14 4b       	or	r11,r10
80004f7a:	ee fa ff f8 	ld.w	r10,r7[-8]
80004f7e:	74 0a       	ld.w	r10,r10[0x0]
80004f80:	a9 6a       	lsl	r10,0x8
80004f82:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
80004f86:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80004f8a:	a1 aa       	sbr	r10,0x0
80004f8c:	2e 79       	sub	r9,-25
80004f8e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
80004f92:	30 08       	mov	r8,0
}
80004f94:	10 9c       	mov	r12,r8
80004f96:	2f ed       	sub	sp,-8
80004f98:	e3 cd 80 80 	ldm	sp++,r7,pc

80004f9c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80004f9c:	eb cd 40 80 	pushm	r7,lr
80004fa0:	1a 97       	mov	r7,sp
80004fa2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004fa4:	e1 b8 00 00 	mfsr	r8,0x0
80004fa8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80004fac:	d3 03       	ssrf	0x10

	return flags;
80004fae:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80004fb2:	10 9c       	mov	r12,r8
80004fb4:	2f fd       	sub	sp,-4
80004fb6:	e3 cd 80 80 	ldm	sp++,r7,pc

80004fba <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004fba:	eb cd 40 80 	pushm	r7,lr
80004fbe:	1a 97       	mov	r7,sp
80004fc0:	20 1d       	sub	sp,4
80004fc2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004fc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fca:	e6 18 00 01 	andh	r8,0x1,COH
80004fce:	5f 08       	sreq	r8
80004fd0:	5c 58       	castu.b	r8
}
80004fd2:	10 9c       	mov	r12,r8
80004fd4:	2f fd       	sub	sp,-4
80004fd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fda:	d7 03       	nop

80004fdc <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80004fdc:	eb cd 40 80 	pushm	r7,lr
80004fe0:	1a 97       	mov	r7,sp
80004fe2:	20 1d       	sub	sp,4
80004fe4:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004fe8:	ee fc ff fc 	ld.w	r12,r7[-4]
80004fec:	f0 1f 00 05 	mcall	80005000 <cpu_irq_restore+0x24>
80004ff0:	18 98       	mov	r8,r12
80004ff2:	58 08       	cp.w	r8,0
80004ff4:	c0 20       	breq	80004ff8 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80004ff6:	d5 03       	csrf	0x10
   }

	barrier();
}
80004ff8:	2f fd       	sub	sp,-4
80004ffa:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ffe:	00 00       	add	r0,r0
80005000:	80 00       	ld.sh	r0,r0[0x0]
80005002:	4f ba       	lddpc	r10,800051ec <twim_set_speed+0xa4>

80005004 <twim_master_interrupt_handler>:
/**
 * \internal
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80005004:	eb cd 40 80 	pushm	r7,lr
80005008:	1a 97       	mov	r7,sp
8000500a:	20 1d       	sub	sp,4
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8000500c:	4c 68       	lddpc	r8,80005124 <twim_master_interrupt_handler+0x120>
8000500e:	70 08       	ld.w	r8,r8[0x0]
80005010:	70 79       	ld.w	r9,r8[0x1c]
80005012:	4c 68       	lddpc	r8,80005128 <twim_master_interrupt_handler+0x124>
80005014:	70 08       	ld.w	r8,r8[0x0]
80005016:	f3 e8 00 08 	and	r8,r9,r8
8000501a:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
8000501e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005022:	e2 18 07 00 	andl	r8,0x700,COH
80005026:	c1 e0       	breq	80005062 <twim_master_interrupt_handler+0x5e>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
80005028:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000502c:	e2 18 03 00 	andl	r8,0x300,COH
80005030:	c0 30       	breq	80005036 <twim_master_interrupt_handler+0x32>
80005032:	3f c8       	mov	r8,-4
80005034:	c0 28       	rjmp	80005038 <twim_master_interrupt_handler+0x34>
80005036:	3f e8       	mov	r8,-2
80005038:	4b d9       	lddpc	r9,8000512c <twim_master_interrupt_handler+0x128>
8000503a:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8000503c:	4b a8       	lddpc	r8,80005124 <twim_master_interrupt_handler+0x120>
8000503e:	70 09       	ld.w	r9,r8[0x0]
80005040:	72 38       	ld.w	r8,r9[0xc]
80005042:	30 0a       	mov	r10,0
80005044:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80005048:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
8000504a:	4b 78       	lddpc	r8,80005124 <twim_master_interrupt_handler+0x120>
8000504c:	70 08       	ld.w	r8,r8[0x0]
8000504e:	3f f9       	mov	r9,-1
80005050:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80005052:	4b 58       	lddpc	r8,80005124 <twim_master_interrupt_handler+0x120>
80005054:	70 08       	ld.w	r8,r8[0x0]
80005056:	3f f9       	mov	r9,-1
80005058:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
8000505a:	4b 69       	lddpc	r9,80005130 <twim_master_interrupt_handler+0x12c>
8000505c:	30 08       	mov	r8,0
8000505e:	b2 88       	st.b	r9[0x0],r8
80005060:	c5 e8       	rjmp	8000511c <twim_master_interrupt_handler+0x118>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80005062:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005066:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000506a:	5c 58       	castu.b	r8
8000506c:	c2 00       	breq	800050ac <twim_master_interrupt_handler+0xa8>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8000506e:	4b 28       	lddpc	r8,80005134 <twim_master_interrupt_handler+0x130>
80005070:	70 09       	ld.w	r9,r8[0x0]
80005072:	4a d8       	lddpc	r8,80005124 <twim_master_interrupt_handler+0x120>
80005074:	70 08       	ld.w	r8,r8[0x0]
80005076:	70 58       	ld.w	r8,r8[0x14]
80005078:	5c 58       	castu.b	r8
8000507a:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
8000507c:	4a e8       	lddpc	r8,80005134 <twim_master_interrupt_handler+0x130>
8000507e:	70 08       	ld.w	r8,r8[0x0]
80005080:	f0 c9 ff ff 	sub	r9,r8,-1
80005084:	4a c8       	lddpc	r8,80005134 <twim_master_interrupt_handler+0x130>
80005086:	91 09       	st.w	r8[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
80005088:	4a c8       	lddpc	r8,80005138 <twim_master_interrupt_handler+0x134>
8000508a:	70 08       	ld.w	r8,r8[0x0]
8000508c:	f0 c9 00 01 	sub	r9,r8,1
80005090:	4a a8       	lddpc	r8,80005138 <twim_master_interrupt_handler+0x134>
80005092:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80005094:	4a 98       	lddpc	r8,80005138 <twim_master_interrupt_handler+0x134>
80005096:	70 08       	ld.w	r8,r8[0x0]
80005098:	58 08       	cp.w	r8,0
8000509a:	c4 11       	brne	8000511c <twim_master_interrupt_handler+0x118>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8000509c:	4a 28       	lddpc	r8,80005124 <twim_master_interrupt_handler+0x120>
8000509e:	70 08       	ld.w	r8,r8[0x0]
800050a0:	30 19       	mov	r9,1
800050a2:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
800050a4:	4a 39       	lddpc	r9,80005130 <twim_master_interrupt_handler+0x12c>
800050a6:	30 08       	mov	r8,0
800050a8:	b2 88       	st.b	r9[0x0],r8
800050aa:	c3 98       	rjmp	8000511c <twim_master_interrupt_handler+0x118>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
800050ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800050b0:	e2 18 00 02 	andl	r8,0x2,COH
800050b4:	c3 40       	breq	8000511c <twim_master_interrupt_handler+0x118>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
800050b6:	4a 28       	lddpc	r8,8000513c <twim_master_interrupt_handler+0x138>
800050b8:	70 08       	ld.w	r8,r8[0x0]
800050ba:	58 08       	cp.w	r8,0
800050bc:	c0 91       	brne	800050ce <twim_master_interrupt_handler+0xca>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
800050be:	49 a8       	lddpc	r8,80005124 <twim_master_interrupt_handler+0x120>
800050c0:	70 08       	ld.w	r8,r8[0x0]
800050c2:	30 29       	mov	r9,2
800050c4:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
800050c6:	49 b9       	lddpc	r9,80005130 <twim_master_interrupt_handler+0x12c>
800050c8:	30 08       	mov	r8,0
800050ca:	b2 88       	st.b	r9[0x0],r8
800050cc:	c2 88       	rjmp	8000511c <twim_master_interrupt_handler+0x118>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
800050ce:	49 68       	lddpc	r8,80005124 <twim_master_interrupt_handler+0x120>
800050d0:	70 0a       	ld.w	r10,r8[0x0]
800050d2:	49 c8       	lddpc	r8,80005140 <twim_master_interrupt_handler+0x13c>
800050d4:	70 08       	ld.w	r8,r8[0x0]
800050d6:	11 89       	ld.ub	r9,r8[0x0]
800050d8:	5c 59       	castu.b	r9
800050da:	95 69       	st.w	r10[0x18],r9
800050dc:	f0 c9 ff ff 	sub	r9,r8,-1
800050e0:	49 88       	lddpc	r8,80005140 <twim_master_interrupt_handler+0x13c>
800050e2:	91 09       	st.w	r8[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
800050e4:	49 68       	lddpc	r8,8000513c <twim_master_interrupt_handler+0x138>
800050e6:	70 08       	ld.w	r8,r8[0x0]
800050e8:	f0 c9 00 01 	sub	r9,r8,1
800050ec:	49 48       	lddpc	r8,8000513c <twim_master_interrupt_handler+0x138>
800050ee:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
800050f0:	49 38       	lddpc	r8,8000513c <twim_master_interrupt_handler+0x138>
800050f2:	70 08       	ld.w	r8,r8[0x0]
800050f4:	58 08       	cp.w	r8,0
800050f6:	c1 31       	brne	8000511c <twim_master_interrupt_handler+0x118>
				// Check for next transfer
				if(twim_next) {
800050f8:	48 e8       	lddpc	r8,80005130 <twim_master_interrupt_handler+0x12c>
800050fa:	11 88       	ld.ub	r8,r8[0x0]
800050fc:	5c 58       	castu.b	r8
800050fe:	c0 f0       	breq	8000511c <twim_master_interrupt_handler+0x118>
					twim_next = false;
80005100:	48 c9       	lddpc	r9,80005130 <twim_master_interrupt_handler+0x12c>
80005102:	30 08       	mov	r8,0
80005104:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80005106:	49 08       	lddpc	r8,80005144 <twim_master_interrupt_handler+0x140>
80005108:	70 08       	ld.w	r8,r8[0x0]
8000510a:	70 39       	ld.w	r9,r8[0xc]
8000510c:	48 c8       	lddpc	r8,8000513c <twim_master_interrupt_handler+0x138>
8000510e:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80005110:	48 d8       	lddpc	r8,80005144 <twim_master_interrupt_handler+0x140>
80005112:	70 08       	ld.w	r8,r8[0x0]
80005114:	70 28       	ld.w	r8,r8[0x8]
80005116:	10 99       	mov	r9,r8
80005118:	48 a8       	lddpc	r8,80005140 <twim_master_interrupt_handler+0x13c>
8000511a:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
8000511c:	2f fd       	sub	sp,-4
8000511e:	e3 cd 40 80 	ldm	sp++,r7,lr
80005122:	d6 03       	rete
80005124:	00 00       	add	r0,r0
80005126:	02 88       	andn	r8,r1
80005128:	00 00       	add	r0,r0
8000512a:	02 a0       	st.w	r1++,r0
8000512c:	00 00       	add	r0,r0
8000512e:	02 94       	mov	r4,r1
80005130:	00 00       	add	r0,r0
80005132:	02 a8       	st.w	r1++,r8
80005134:	00 00       	add	r0,r0
80005136:	02 90       	mov	r0,r1
80005138:	00 00       	add	r0,r0
8000513a:	02 9c       	mov	r12,r1
8000513c:	00 00       	add	r0,r0
8000513e:	02 98       	mov	r8,r1
80005140:	00 00       	add	r0,r0
80005142:	02 8c       	andn	r12,r1
80005144:	00 00       	add	r0,r0
80005146:	02 a4       	st.w	r1++,r4

80005148 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80005148:	eb cd 40 80 	pushm	r7,lr
8000514c:	1a 97       	mov	r7,sp
8000514e:	20 5d       	sub	sp,20
80005150:	ef 4c ff f4 	st.w	r7[-12],r12
80005154:	ef 4b ff f0 	st.w	r7[-16],r11
80005158:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
8000515c:	30 08       	mov	r8,0
8000515e:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
80005162:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005166:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000516a:	f0 09 0d 08 	divu	r8,r8,r9
8000516e:	a1 98       	lsr	r8,0x1
80005170:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80005174:	c0 b8       	rjmp	8000518a <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
80005176:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000517a:	2f f8       	sub	r8,-1
8000517c:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
80005180:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005184:	a1 98       	lsr	r8,0x1
80005186:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8000518a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000518e:	e0 48 00 ff 	cp.w	r8,255
80005192:	e0 88 00 09 	brls	800051a4 <twim_set_speed+0x5c>
80005196:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000519a:	30 78       	mov	r8,7
8000519c:	f0 09 18 00 	cp.b	r9,r8
800051a0:	fe 98 ff eb 	brls	80005176 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
800051a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800051a8:	30 78       	mov	r8,7
800051aa:	f0 09 18 00 	cp.b	r9,r8
800051ae:	e0 88 00 04 	brls	800051b6 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
800051b2:	3f 88       	mov	r8,-8
800051b4:	c1 a8       	rjmp	800051e8 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
800051b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051ba:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
800051be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051c2:	a1 98       	lsr	r8,0x1
800051c4:	ee fa ff f8 	ld.w	r10,r7[-8]
800051c8:	f4 08 01 08 	sub	r8,r10,r8
800051cc:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
800051ce:	10 49       	or	r9,r8
800051d0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800051d4:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
800051d6:	10 49       	or	r9,r8
800051d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051dc:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
800051de:	10 49       	or	r9,r8
800051e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800051e4:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
800051e6:	30 08       	mov	r8,0
}
800051e8:	10 9c       	mov	r12,r8
800051ea:	2f bd       	sub	sp,-20
800051ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800051f0 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
800051f0:	eb cd 40 80 	pushm	r7,lr
800051f4:	1a 97       	mov	r7,sp
800051f6:	20 4d       	sub	sp,16
800051f8:	ef 4c ff f4 	st.w	r7[-12],r12
800051fc:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80005200:	e1 b8 00 00 	mfsr	r8,0x0
80005204:	10 9c       	mov	r12,r8
80005206:	f0 1f 00 37 	mcall	800052e0 <twim_master_init+0xf0>
8000520a:	18 98       	mov	r8,r12
8000520c:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80005210:	4b 58       	lddpc	r8,800052e4 <twim_master_init+0xf4>
80005212:	30 09       	mov	r9,0
80005214:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80005216:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000521a:	30 08       	mov	r8,0
8000521c:	f0 09 18 00 	cp.b	r9,r8
80005220:	c0 20       	breq	80005224 <twim_master_init+0x34>
		cpu_irq_disable ();
80005222:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80005224:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005228:	3f f9       	mov	r9,-1
8000522a:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8000522c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005230:	30 19       	mov	r9,1
80005232:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005234:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005238:	e0 69 00 80 	mov	r9,128
8000523c:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
8000523e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80005242:	30 08       	mov	r8,0
80005244:	f0 09 18 00 	cp.b	r9,r8
80005248:	c0 20       	breq	8000524c <twim_master_init+0x5c>
		cpu_irq_enable ();
8000524a:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
8000524c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005250:	3f f9       	mov	r9,-1
80005252:	91 b9       	st.w	r8[0x2c],r9

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
80005254:	f0 1f 00 25 	mcall	800052e8 <twim_master_init+0xf8>
80005258:	18 98       	mov	r8,r12
8000525a:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
8000525e:	30 1a       	mov	r10,1
80005260:	e0 6b 03 20 	mov	r11,800
80005264:	4a 2c       	lddpc	r12,800052ec <twim_master_init+0xfc>
80005266:	f0 1f 00 23 	mcall	800052f0 <twim_master_init+0x100>
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
8000526a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000526e:	f0 1f 00 22 	mcall	800052f4 <twim_master_init+0x104>

	if (opt->smbus) {
80005272:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005276:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000527a:	58 08       	cp.w	r8,0
8000527c:	c0 90       	breq	8000528e <twim_master_init+0x9e>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8000527e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005282:	31 09       	mov	r9,16
80005284:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
80005286:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000528a:	3f f9       	mov	r9,-1
8000528c:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
8000528e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005292:	70 09       	ld.w	r9,r8[0x0]
80005294:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005298:	70 18       	ld.w	r8,r8[0x4]
8000529a:	12 9a       	mov	r10,r9
8000529c:	10 9b       	mov	r11,r8
8000529e:	ee fc ff f4 	ld.w	r12,r7[-12]
800052a2:	f0 1f 00 16 	mcall	800052f8 <twim_master_init+0x108>
800052a6:	18 98       	mov	r8,r12
800052a8:	5b 88       	cp.w	r8,-8
800052aa:	c0 31       	brne	800052b0 <twim_master_init+0xc0>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
800052ac:	3f 88       	mov	r8,-8
800052ae:	c1 48       	rjmp	800052d6 <twim_master_init+0xe6>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
800052b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800052b4:	70 28       	ld.w	r8,r8[0x8]
800052b6:	10 9b       	mov	r11,r8
800052b8:	ee fc ff f4 	ld.w	r12,r7[-12]
800052bc:	f0 1f 00 10 	mcall	800052fc <twim_master_init+0x10c>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800052c0:	48 98       	lddpc	r8,800052e4 <twim_master_init+0xf4>
800052c2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800052c4:	5b c8       	cp.w	r8,-4
800052c6:	c0 50       	breq	800052d0 <twim_master_init+0xe0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800052c8:	48 78       	lddpc	r8,800052e4 <twim_master_init+0xf4>
800052ca:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
800052cc:	5b e8       	cp.w	r8,-2
800052ce:	c0 31       	brne	800052d4 <twim_master_init+0xe4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
800052d0:	3f f8       	mov	r8,-1
800052d2:	c0 28       	rjmp	800052d6 <twim_master_init+0xe6>
	}
	return STATUS_OK;
800052d4:	30 08       	mov	r8,0
}
800052d6:	10 9c       	mov	r12,r8
800052d8:	2f cd       	sub	sp,-16
800052da:	e3 cd 80 80 	ldm	sp++,r7,pc
800052de:	00 00       	add	r0,r0
800052e0:	80 00       	ld.sh	r0,r0[0x0]
800052e2:	4f ba       	lddpc	r10,800054cc <twim_read_packet+0x150>
800052e4:	00 00       	add	r0,r0
800052e6:	02 94       	mov	r4,r1
800052e8:	80 00       	ld.sh	r0,r0[0x0]
800052ea:	4f 9c       	lddpc	r12,800054cc <twim_read_packet+0x150>
800052ec:	80 00       	ld.sh	r0,r0[0x0]
800052ee:	50 04       	stdsp	sp[0x0],r4
800052f0:	80 00       	ld.sh	r0,r0[0x0]
800052f2:	4d 48       	lddpc	r8,80005440 <twim_read_packet+0xc4>
800052f4:	80 00       	ld.sh	r0,r0[0x0]
800052f6:	4f dc       	lddpc	r12,800054e8 <twim_read_packet+0x16c>
800052f8:	80 00       	ld.sh	r0,r0[0x0]
800052fa:	51 48       	stdsp	sp[0x50],r8
800052fc:	80 00       	ld.sh	r0,r0[0x0]
800052fe:	53 44       	stdsp	sp[0xd0],r4

80005300 <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
80005300:	eb cd 40 80 	pushm	r7,lr
80005304:	1a 97       	mov	r7,sp
80005306:	20 2d       	sub	sp,8
80005308:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8000530c:	e1 b8 00 00 	mfsr	r8,0x0
80005310:	10 9c       	mov	r12,r8
80005312:	f0 1f 00 0c 	mcall	80005340 <twim_disable_interrupt+0x40>
80005316:	18 98       	mov	r8,r12
80005318:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
8000531c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005320:	30 08       	mov	r8,0
80005322:	f0 09 18 00 	cp.b	r9,r8
80005326:	c0 20       	breq	8000532a <twim_disable_interrupt+0x2a>
		cpu_irq_disable ();
80005328:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
8000532a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000532e:	3f f9       	mov	r9,-1
80005330:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
80005332:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005336:	3f f9       	mov	r9,-1
80005338:	91 b9       	st.w	r8[0x2c],r9
}
8000533a:	2f ed       	sub	sp,-8
8000533c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005340:	80 00       	ld.sh	r0,r0[0x0]
80005342:	4f ba       	lddpc	r10,8000552c <twim_write_packet+0x34>

80005344 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80005344:	eb cd 40 80 	pushm	r7,lr
80005348:	1a 97       	mov	r7,sp
8000534a:	20 3d       	sub	sp,12
8000534c:	ef 4c ff f8 	st.w	r7[-8],r12
80005350:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
80005354:	30 08       	mov	r8,0
80005356:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
8000535a:	ee cb 00 04 	sub	r11,r7,4
8000535e:	30 08       	mov	r8,0
80005360:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005364:	30 0a       	mov	r10,0
80005366:	ee fc ff f8 	ld.w	r12,r7[-8]
8000536a:	f0 1f 00 04 	mcall	80005378 <twim_probe+0x34>
8000536e:	18 98       	mov	r8,r12
}
80005370:	10 9c       	mov	r12,r8
80005372:	2f dd       	sub	sp,-12
80005374:	e3 cd 80 80 	ldm	sp++,r7,pc
80005378:	80 00       	ld.sh	r0,r0[0x0]
8000537a:	56 34       	stdsp	sp[0x18c],r4

8000537c <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8000537c:	eb cd 40 80 	pushm	r7,lr
80005380:	1a 97       	mov	r7,sp
80005382:	20 2d       	sub	sp,8
80005384:	ef 4c ff fc 	st.w	r7[-4],r12
80005388:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000538c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005390:	30 29       	mov	r9,2
80005392:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80005394:	4c f8       	lddpc	r8,800054d0 <twim_read_packet+0x154>
80005396:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000539a:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000539c:	4c d8       	lddpc	r8,800054d0 <twim_read_packet+0x154>
8000539e:	70 08       	ld.w	r8,r8[0x0]
800053a0:	10 9c       	mov	r12,r8
800053a2:	f0 1f 00 4d 	mcall	800054d4 <twim_read_packet+0x158>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
800053a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053aa:	70 28       	ld.w	r8,r8[0x8]
800053ac:	10 99       	mov	r9,r8
800053ae:	4c b8       	lddpc	r8,800054d8 <twim_read_packet+0x15c>
800053b0:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
800053b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053b6:	70 39       	ld.w	r9,r8[0xc]
800053b8:	4c 98       	lddpc	r8,800054dc <twim_read_packet+0x160>
800053ba:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
800053bc:	4c 99       	lddpc	r9,800054e0 <twim_read_packet+0x164>
800053be:	30 08       	mov	r8,0
800053c0:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800053c2:	4c 98       	lddpc	r8,800054e4 <twim_read_packet+0x168>
800053c4:	30 09       	mov	r9,0
800053c6:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
800053c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053cc:	11 f8       	ld.ub	r8,r8[0x7]
800053ce:	58 08       	cp.w	r8,0
800053d0:	c3 f0       	breq	8000544e <twim_read_packet+0xd2>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800053d2:	4c 08       	lddpc	r8,800054d0 <twim_read_packet+0x154>
800053d4:	70 08       	ld.w	r8,r8[0x0]
800053d6:	30 19       	mov	r9,1
800053d8:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
800053da:	4b e8       	lddpc	r8,800054d0 <twim_read_packet+0x154>
800053dc:	70 08       	ld.w	r8,r8[0x0]
800053de:	e0 69 00 80 	mov	r9,128
800053e2:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
800053e4:	4b b8       	lddpc	r8,800054d0 <twim_read_packet+0x154>
800053e6:	70 08       	ld.w	r8,r8[0x0]
800053e8:	30 29       	mov	r9,2
800053ea:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
800053ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053f0:	2f c8       	sub	r8,-4
800053f2:	10 99       	mov	r9,r8
800053f4:	4b d8       	lddpc	r8,800054e8 <twim_read_packet+0x16c>
800053f6:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
800053f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053fc:	11 f8       	ld.ub	r8,r8[0x7]
800053fe:	10 99       	mov	r9,r8
80005400:	4b b8       	lddpc	r8,800054ec <twim_read_packet+0x170>
80005402:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80005404:	4b b8       	lddpc	r8,800054f0 <twim_read_packet+0x174>
80005406:	e0 69 07 03 	mov	r9,1795
8000540a:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000540c:	4b 18       	lddpc	r8,800054d0 <twim_read_packet+0x154>
8000540e:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005410:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005414:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005416:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8000541a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000541e:	13 f9       	ld.ub	r9,r9[0x7]
80005420:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005422:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005426:	e8 19 a0 00 	orl	r9,0xa000
8000542a:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8000542c:	4a 98       	lddpc	r8,800054d0 <twim_read_packet+0x154>
8000542e:	70 08       	ld.w	r8,r8[0x0]
80005430:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005434:	72 09       	ld.w	r9,r9[0x0]
80005436:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000543a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000543e:	72 39       	ld.w	r9,r9[0xc]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005440:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005442:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80005446:	e8 19 e0 01 	orl	r9,0xe001
8000544a:	91 49       	st.w	r8[0x10],r9
8000544c:	c1 88       	rjmp	8000547c <twim_read_packet+0x100>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
8000544e:	4a 88       	lddpc	r8,800054ec <twim_read_packet+0x170>
80005450:	30 09       	mov	r9,0
80005452:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
80005454:	4a 78       	lddpc	r8,800054f0 <twim_read_packet+0x174>
80005456:	e0 69 07 01 	mov	r9,1793
8000545a:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8000545c:	49 d8       	lddpc	r8,800054d0 <twim_read_packet+0x154>
8000545e:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005460:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005464:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005466:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8000546a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000546e:	72 39       	ld.w	r9,r9[0xc]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80005470:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80005472:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005476:	e8 19 e0 01 	orl	r9,0xe001
8000547a:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8000547c:	49 58       	lddpc	r8,800054d0 <twim_read_packet+0x154>
8000547e:	70 08       	ld.w	r8,r8[0x0]
80005480:	49 c9       	lddpc	r9,800054f0 <twim_read_packet+0x174>
80005482:	72 09       	ld.w	r9,r9[0x0]
80005484:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005486:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000548a:	30 19       	mov	r9,1
8000548c:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8000548e:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80005490:	c0 38       	rjmp	80005496 <twim_read_packet+0x11a>
		cpu_relax();
80005492:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80005496:	49 48       	lddpc	r8,800054e4 <twim_read_packet+0x168>
80005498:	70 08       	ld.w	r8,r8[0x0]
8000549a:	58 08       	cp.w	r8,0
8000549c:	c0 61       	brne	800054a8 <twim_read_packet+0x12c>
8000549e:	f0 1f 00 16 	mcall	800054f4 <twim_read_packet+0x178>
800054a2:	18 98       	mov	r8,r12
800054a4:	58 08       	cp.w	r8,0
800054a6:	cf 60       	breq	80005492 <twim_read_packet+0x116>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800054a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054ac:	30 29       	mov	r9,2
800054ae:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800054b0:	48 d8       	lddpc	r8,800054e4 <twim_read_packet+0x168>
800054b2:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
800054b4:	5b c8       	cp.w	r8,-4
800054b6:	c0 50       	breq	800054c0 <twim_read_packet+0x144>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800054b8:	48 b8       	lddpc	r8,800054e4 <twim_read_packet+0x168>
800054ba:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
800054bc:	5b e8       	cp.w	r8,-2
800054be:	c0 31       	brne	800054c4 <twim_read_packet+0x148>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
800054c0:	3f f8       	mov	r8,-1
800054c2:	c0 28       	rjmp	800054c6 <twim_read_packet+0x14a>
	}
	return STATUS_OK;
800054c4:	30 08       	mov	r8,0
}
800054c6:	10 9c       	mov	r12,r8
800054c8:	2f ed       	sub	sp,-8
800054ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800054ce:	00 00       	add	r0,r0
800054d0:	00 00       	add	r0,r0
800054d2:	02 88       	andn	r8,r1
800054d4:	80 00       	ld.sh	r0,r0[0x0]
800054d6:	53 00       	stdsp	sp[0xc0],r0
800054d8:	00 00       	add	r0,r0
800054da:	02 90       	mov	r0,r1
800054dc:	00 00       	add	r0,r0
800054de:	02 9c       	mov	r12,r1
800054e0:	00 00       	add	r0,r0
800054e2:	02 a8       	st.w	r1++,r8
800054e4:	00 00       	add	r0,r0
800054e6:	02 94       	mov	r4,r1
800054e8:	00 00       	add	r0,r0
800054ea:	02 8c       	andn	r12,r1
800054ec:	00 00       	add	r0,r0
800054ee:	02 98       	mov	r8,r1
800054f0:	00 00       	add	r0,r0
800054f2:	02 a0       	st.w	r1++,r0
800054f4:	80 00       	ld.sh	r0,r0[0x0]
800054f6:	57 38       	stdsp	sp[0x1cc],r8

800054f8 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
800054f8:	eb cd 40 80 	pushm	r7,lr
800054fc:	1a 97       	mov	r7,sp
800054fe:	20 2d       	sub	sp,8
80005500:	ef 4c ff fc 	st.w	r7[-4],r12
80005504:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000550c:	30 19       	mov	r9,1
8000550e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005510:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005514:	e0 69 00 80 	mov	r9,128
80005518:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8000551a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000551e:	30 29       	mov	r9,2
80005520:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80005522:	4b c8       	lddpc	r8,80005610 <twim_write_packet+0x118>
80005524:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005528:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8000552a:	4b a8       	lddpc	r8,80005610 <twim_write_packet+0x118>
8000552c:	70 08       	ld.w	r8,r8[0x0]
8000552e:	10 9c       	mov	r12,r8
80005530:	f0 1f 00 39 	mcall	80005614 <twim_write_packet+0x11c>
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80005534:	4b 98       	lddpc	r8,80005618 <twim_write_packet+0x120>
80005536:	30 09       	mov	r9,0
80005538:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8000553a:	4b 98       	lddpc	r8,8000561c <twim_write_packet+0x124>
8000553c:	e0 69 07 02 	mov	r9,1794
80005540:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
80005542:	4b 89       	lddpc	r9,80005620 <twim_write_packet+0x128>
80005544:	30 08       	mov	r8,0
80005546:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
80005548:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000554c:	11 f8       	ld.ub	r8,r8[0x7]
8000554e:	58 08       	cp.w	r8,0
80005550:	c1 50       	breq	8000557a <twim_write_packet+0x82>
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80005552:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005556:	2f c8       	sub	r8,-4
80005558:	10 99       	mov	r9,r8
8000555a:	4b 38       	lddpc	r8,80005624 <twim_write_packet+0x12c>
8000555c:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8000555e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005562:	11 f8       	ld.ub	r8,r8[0x7]
80005564:	10 99       	mov	r9,r8
80005566:	4b 18       	lddpc	r8,80005628 <twim_write_packet+0x130>
80005568:	91 09       	st.w	r8[0x0],r9
		// set next transfer to true
		twim_next = true;
8000556a:	4a e9       	lddpc	r9,80005620 <twim_write_packet+0x128>
8000556c:	30 18       	mov	r8,1
8000556e:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
80005570:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005574:	4a e8       	lddpc	r8,8000562c <twim_write_packet+0x134>
80005576:	91 09       	st.w	r8[0x0],r9
80005578:	c0 c8       	rjmp	80005590 <twim_write_packet+0x98>
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
8000557a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000557e:	70 28       	ld.w	r8,r8[0x8]
80005580:	10 99       	mov	r9,r8
80005582:	4a 98       	lddpc	r8,80005624 <twim_write_packet+0x12c>
80005584:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
80005586:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000558a:	70 39       	ld.w	r9,r8[0xc]
8000558c:	4a 78       	lddpc	r8,80005628 <twim_write_packet+0x130>
8000558e:	91 09       	st.w	r8[0x0],r9
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| ((package->length + package->addr_length)
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
80005590:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005594:	70 08       	ld.w	r8,r8[0x0]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80005596:	f0 09 15 01 	lsl	r9,r8,0x1
			| ((package->length + package->addr_length)
8000559a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000559e:	70 3a       	ld.w	r10,r8[0xc]
800055a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800055a4:	11 f8       	ld.ub	r8,r8[0x7]
800055a6:	f4 08 00 08 	add	r8,r10,r8
800055aa:	b1 68       	lsl	r8,0x10
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
800055ac:	f3 e8 10 08 	or	r8,r9,r8
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
800055b0:	10 99       	mov	r9,r8
800055b2:	e8 19 e0 00 	orl	r9,0xe000
800055b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055ba:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800055bc:	49 58       	lddpc	r8,80005610 <twim_write_packet+0x118>
800055be:	70 08       	ld.w	r8,r8[0x0]
800055c0:	49 79       	lddpc	r9,8000561c <twim_write_packet+0x124>
800055c2:	72 09       	ld.w	r9,r9[0x0]
800055c4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800055c6:	49 38       	lddpc	r8,80005610 <twim_write_packet+0x118>
800055c8:	70 08       	ld.w	r8,r8[0x0]
800055ca:	30 19       	mov	r9,1
800055cc:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800055ce:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800055d0:	c0 38       	rjmp	800055d6 <twim_write_packet+0xde>
		cpu_relax();
800055d2:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800055d6:	49 18       	lddpc	r8,80005618 <twim_write_packet+0x120>
800055d8:	70 08       	ld.w	r8,r8[0x0]
800055da:	58 08       	cp.w	r8,0
800055dc:	c0 61       	brne	800055e8 <twim_write_packet+0xf0>
800055de:	f0 1f 00 15 	mcall	80005630 <twim_write_packet+0x138>
800055e2:	18 98       	mov	r8,r12
800055e4:	58 08       	cp.w	r8,0
800055e6:	cf 60       	breq	800055d2 <twim_write_packet+0xda>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800055e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055ec:	30 29       	mov	r9,2
800055ee:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800055f0:	48 a8       	lddpc	r8,80005618 <twim_write_packet+0x120>
800055f2:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
800055f4:	5b c8       	cp.w	r8,-4
800055f6:	c0 50       	breq	80005600 <twim_write_packet+0x108>
			|| transfer_status == TWI_ARBITRATION_LOST) {
800055f8:	48 88       	lddpc	r8,80005618 <twim_write_packet+0x120>
800055fa:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
800055fc:	5b e8       	cp.w	r8,-2
800055fe:	c0 31       	brne	80005604 <twim_write_packet+0x10c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005600:	3f f8       	mov	r8,-1
80005602:	c0 28       	rjmp	80005606 <twim_write_packet+0x10e>
	}
	return STATUS_OK;
80005604:	30 08       	mov	r8,0
}
80005606:	10 9c       	mov	r12,r8
80005608:	2f ed       	sub	sp,-8
8000560a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000560e:	00 00       	add	r0,r0
80005610:	00 00       	add	r0,r0
80005612:	02 88       	andn	r8,r1
80005614:	80 00       	ld.sh	r0,r0[0x0]
80005616:	53 00       	stdsp	sp[0xc0],r0
80005618:	00 00       	add	r0,r0
8000561a:	02 94       	mov	r4,r1
8000561c:	00 00       	add	r0,r0
8000561e:	02 a0       	st.w	r1++,r0
80005620:	00 00       	add	r0,r0
80005622:	02 a8       	st.w	r1++,r8
80005624:	00 00       	add	r0,r0
80005626:	02 8c       	andn	r12,r1
80005628:	00 00       	add	r0,r0
8000562a:	02 98       	mov	r8,r1
8000562c:	00 00       	add	r0,r0
8000562e:	02 a4       	st.w	r1++,r4
80005630:	80 00       	ld.sh	r0,r0[0x0]
80005632:	57 38       	stdsp	sp[0x1cc],r8

80005634 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80005634:	eb cd 40 80 	pushm	r7,lr
80005638:	1a 97       	mov	r7,sp
8000563a:	20 5d       	sub	sp,20
8000563c:	ef 4c ff fc 	st.w	r7[-4],r12
80005640:	ef 4b ff f8 	st.w	r7[-8],r11
80005644:	ef 4a ff f4 	st.w	r7[-12],r10
80005648:	ef 49 ff f0 	st.w	r7[-16],r9
8000564c:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80005650:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005654:	30 19       	mov	r9,1
80005656:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80005658:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000565c:	e0 69 00 80 	mov	r9,128
80005660:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80005662:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005666:	30 29       	mov	r9,2
80005668:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8000566a:	4a c8       	lddpc	r8,80005718 <twim_write+0xe4>
8000566c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005670:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80005672:	4a a8       	lddpc	r8,80005718 <twim_write+0xe4>
80005674:	70 08       	ld.w	r8,r8[0x0]
80005676:	10 9c       	mov	r12,r8
80005678:	f0 1f 00 29 	mcall	8000571c <twim_write+0xe8>
	// get a pointer to applicative data
	twim_tx_data = buffer;
8000567c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005680:	4a 88       	lddpc	r8,80005720 <twim_write+0xec>
80005682:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80005684:	4a 88       	lddpc	r8,80005724 <twim_write+0xf0>
80005686:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000568a:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8000568c:	4a 79       	lddpc	r9,80005728 <twim_write+0xf4>
8000568e:	30 08       	mov	r8,0
80005690:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80005692:	4a 78       	lddpc	r8,8000572c <twim_write+0xf8>
80005694:	30 09       	mov	r9,0
80005696:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80005698:	4a 08       	lddpc	r8,80005718 <twim_write+0xe4>
8000569a:	70 08       	ld.w	r8,r8[0x0]
8000569c:	ee f9 ff f0 	ld.w	r9,r7[-16]
800056a0:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800056a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800056a8:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
800056aa:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
800056ac:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800056b0:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
800056b2:	f5 e9 10 09 	or	r9,r10,r9
800056b6:	e8 19 e0 00 	orl	r9,0xe000
800056ba:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
800056bc:	49 d8       	lddpc	r8,80005730 <twim_write+0xfc>
800056be:	e0 69 03 02 	mov	r9,770
800056c2:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
800056c4:	49 58       	lddpc	r8,80005718 <twim_write+0xe4>
800056c6:	70 08       	ld.w	r8,r8[0x0]
800056c8:	49 a9       	lddpc	r9,80005730 <twim_write+0xfc>
800056ca:	72 09       	ld.w	r9,r9[0x0]
800056cc:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
800056ce:	49 38       	lddpc	r8,80005718 <twim_write+0xe4>
800056d0:	70 08       	ld.w	r8,r8[0x0]
800056d2:	30 19       	mov	r9,1
800056d4:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
800056d6:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800056d8:	c0 38       	rjmp	800056de <twim_write+0xaa>
		cpu_relax();
800056da:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
800056de:	49 48       	lddpc	r8,8000572c <twim_write+0xf8>
800056e0:	70 08       	ld.w	r8,r8[0x0]
800056e2:	58 08       	cp.w	r8,0
800056e4:	c0 61       	brne	800056f0 <twim_write+0xbc>
800056e6:	f0 1f 00 14 	mcall	80005734 <twim_write+0x100>
800056ea:	18 98       	mov	r8,r12
800056ec:	58 08       	cp.w	r8,0
800056ee:	cf 60       	breq	800056da <twim_write+0xa6>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800056f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056f4:	30 29       	mov	r9,2
800056f6:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
800056f8:	48 d8       	lddpc	r8,8000572c <twim_write+0xf8>
800056fa:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
800056fc:	5b c8       	cp.w	r8,-4
800056fe:	c0 50       	breq	80005708 <twim_write+0xd4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80005700:	48 b8       	lddpc	r8,8000572c <twim_write+0xf8>
80005702:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80005704:	5b e8       	cp.w	r8,-2
80005706:	c0 31       	brne	8000570c <twim_write+0xd8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80005708:	3f f8       	mov	r8,-1
8000570a:	c0 28       	rjmp	8000570e <twim_write+0xda>
	}
	return STATUS_OK;
8000570c:	30 08       	mov	r8,0
}
8000570e:	10 9c       	mov	r12,r8
80005710:	2f bd       	sub	sp,-20
80005712:	e3 cd 80 80 	ldm	sp++,r7,pc
80005716:	00 00       	add	r0,r0
80005718:	00 00       	add	r0,r0
8000571a:	02 88       	andn	r8,r1
8000571c:	80 00       	ld.sh	r0,r0[0x0]
8000571e:	53 00       	stdsp	sp[0xc0],r0
80005720:	00 00       	add	r0,r0
80005722:	02 8c       	andn	r12,r1
80005724:	00 00       	add	r0,r0
80005726:	02 98       	mov	r8,r1
80005728:	00 00       	add	r0,r0
8000572a:	02 a8       	st.w	r1++,r8
8000572c:	00 00       	add	r0,r0
8000572e:	02 94       	mov	r4,r1
80005730:	00 00       	add	r0,r0
80005732:	02 a0       	st.w	r1++,r0
80005734:	80 00       	ld.sh	r0,r0[0x0]
80005736:	57 38       	stdsp	sp[0x1cc],r8

80005738 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
80005738:	eb cd 40 80 	pushm	r7,lr
8000573c:	1a 97       	mov	r7,sp
8000573e:	20 1d       	sub	sp,4
	uint32_t status = twim_inst->sr;
80005740:	48 98       	lddpc	r8,80005764 <twim_status+0x2c>
80005742:	70 08       	ld.w	r8,r8[0x0]
80005744:	70 78       	ld.w	r8,r8[0x1c]
80005746:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
8000574a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000574e:	e2 18 00 10 	andl	r8,0x10,COH
80005752:	c0 30       	breq	80005758 <twim_status+0x20>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif
		) {
		return 1;
80005754:	30 18       	mov	r8,1
80005756:	c0 28       	rjmp	8000575a <twim_status+0x22>
	} else {
		return 0;
80005758:	30 08       	mov	r8,0
	}
}
8000575a:	10 9c       	mov	r12,r8
8000575c:	2f fd       	sub	sp,-4
8000575e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005762:	00 00       	add	r0,r0
80005764:	00 00       	add	r0,r0
80005766:	02 88       	andn	r8,r1

80005768 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005768:	eb cd 40 80 	pushm	r7,lr
8000576c:	1a 97       	mov	r7,sp
8000576e:	20 1d       	sub	sp,4
80005770:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005774:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005778:	e6 18 00 01 	andh	r8,0x1,COH
8000577c:	5f 08       	sreq	r8
8000577e:	5c 58       	castu.b	r8
}
80005780:	10 9c       	mov	r12,r8
80005782:	2f fd       	sub	sp,-4
80005784:	e3 cd 80 80 	ldm	sp++,r7,pc

80005788 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80005788:	eb cd 40 80 	pushm	r7,lr
8000578c:	1a 97       	mov	r7,sp
8000578e:	20 7d       	sub	sp,28
80005790:	ef 4c ff ec 	st.w	r7[-20],r12
80005794:	ef 4b ff e8 	st.w	r7[-24],r11
80005798:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8000579c:	ee f8 ff e8 	ld.w	r8,r7[-24]
800057a0:	f0 09 15 04 	lsl	r9,r8,0x4
800057a4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800057a8:	10 39       	cp.w	r9,r8
800057aa:	e0 8b 00 04 	brhi	800057b2 <usart_set_async_baudrate+0x2a>
800057ae:	31 08       	mov	r8,16
800057b0:	c0 28       	rjmp	800057b4 <usart_set_async_baudrate+0x2c>
800057b2:	30 88       	mov	r8,8
800057b4:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
800057b8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800057bc:	f0 09 15 03 	lsl	r9,r8,0x3
800057c0:	ee fa ff f0 	ld.w	r10,r7[-16]
800057c4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800057c8:	f4 08 02 48 	mul	r8,r10,r8
800057cc:	a1 98       	lsr	r8,0x1
800057ce:	f2 08 00 08 	add	r8,r9,r8
800057d2:	ee fa ff f0 	ld.w	r10,r7[-16]
800057d6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800057da:	f4 09 02 49 	mul	r9,r10,r9
800057de:	f0 09 0d 08 	divu	r8,r8,r9
800057e2:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800057e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800057ea:	a3 98       	lsr	r8,0x3
800057ec:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
800057f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800057f4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800057f8:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800057fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005800:	58 08       	cp.w	r8,0
80005802:	c0 70       	breq	80005810 <usart_set_async_baudrate+0x88>
80005804:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005808:	e0 48 ff ff 	cp.w	r8,65535
8000580c:	e0 88 00 04 	brls	80005814 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80005810:	30 18       	mov	r8,1
80005812:	c2 08       	rjmp	80005852 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80005814:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005818:	70 18       	ld.w	r8,r8[0x4]
8000581a:	10 99       	mov	r9,r8
8000581c:	e4 19 ff f7 	andh	r9,0xfff7
80005820:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80005824:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005828:	59 08       	cp.w	r8,16
8000582a:	c0 40       	breq	80005832 <usart_set_async_baudrate+0xaa>
8000582c:	e8 68 00 00 	mov	r8,524288
80005830:	c0 28       	rjmp	80005834 <usart_set_async_baudrate+0xac>
80005832:	30 08       	mov	r8,0
80005834:	10 49       	or	r9,r8
80005836:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000583a:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
8000583c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005840:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80005844:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005848:	10 49       	or	r9,r8
8000584a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000584e:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80005850:	30 08       	mov	r8,0
}
80005852:	10 9c       	mov	r12,r8
80005854:	2f 9d       	sub	sp,-28
80005856:	e3 cd 80 80 	ldm	sp++,r7,pc
8000585a:	d7 03       	nop

8000585c <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
8000585c:	eb cd 40 80 	pushm	r7,lr
80005860:	1a 97       	mov	r7,sp
80005862:	20 2d       	sub	sp,8
80005864:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80005868:	e1 b8 00 00 	mfsr	r8,0x0
8000586c:	10 9c       	mov	r12,r8
8000586e:	f0 1f 00 18 	mcall	800058cc <usart_reset+0x70>
80005872:	18 98       	mov	r8,r12
80005874:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80005878:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000587c:	30 08       	mov	r8,0
8000587e:	f0 09 18 00 	cp.b	r9,r8
80005882:	c0 20       	breq	80005886 <usart_reset+0x2a>
80005884:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80005886:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000588a:	3f f9       	mov	r9,-1
8000588c:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8000588e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005892:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80005894:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005898:	30 08       	mov	r8,0
8000589a:	f0 09 18 00 	cp.b	r9,r8
8000589e:	c0 20       	breq	800058a2 <usart_reset+0x46>
800058a0:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800058a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058a6:	30 09       	mov	r9,0
800058a8:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
800058aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058ae:	30 09       	mov	r9,0
800058b0:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
800058b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058b6:	30 09       	mov	r9,0
800058b8:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800058ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058be:	ea 69 61 0c 	mov	r9,680204
800058c2:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
800058c4:	2f ed       	sub	sp,-8
800058c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800058ca:	00 00       	add	r0,r0
800058cc:	80 00       	ld.sh	r0,r0[0x0]
800058ce:	57 68       	stdsp	sp[0x1d8],r8

800058d0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800058d0:	eb cd 40 80 	pushm	r7,lr
800058d4:	1a 97       	mov	r7,sp
800058d6:	20 3d       	sub	sp,12
800058d8:	ef 4c ff fc 	st.w	r7[-4],r12
800058dc:	ef 4b ff f8 	st.w	r7[-8],r11
800058e0:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800058e4:	ee fc ff fc 	ld.w	r12,r7[-4]
800058e8:	f0 1f 00 54 	mcall	80005a38 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
800058ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058f0:	58 08       	cp.w	r8,0
800058f2:	c3 90       	breq	80005964 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
800058f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058f8:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800058fa:	30 48       	mov	r8,4
800058fc:	f0 09 18 00 	cp.b	r9,r8
80005900:	e0 88 00 32 	brls	80005964 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80005904:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005908:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000590a:	30 98       	mov	r8,9
8000590c:	f0 09 18 00 	cp.b	r9,r8
80005910:	e0 8b 00 2a 	brhi	80005964 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80005914:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005918:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000591a:	30 78       	mov	r8,7
8000591c:	f0 09 18 00 	cp.b	r9,r8
80005920:	e0 8b 00 22 	brhi	80005964 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80005924:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005928:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000592a:	e0 68 01 01 	mov	r8,257
8000592e:	f0 09 19 00 	cp.h	r9,r8
80005932:	e0 8b 00 19 	brhi	80005964 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80005936:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000593a:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000593e:	30 38       	mov	r8,3
80005940:	f0 09 18 00 	cp.b	r9,r8
80005944:	e0 8b 00 10 	brhi	80005964 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80005948:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000594c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005950:	70 08       	ld.w	r8,r8[0x0]
80005952:	12 9a       	mov	r10,r9
80005954:	10 9b       	mov	r11,r8
80005956:	ee fc ff fc 	ld.w	r12,r7[-4]
8000595a:	f0 1f 00 39 	mcall	80005a3c <usart_init_rs232+0x16c>
8000595e:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80005960:	58 18       	cp.w	r8,1
80005962:	c0 31       	brne	80005968 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80005964:	30 18       	mov	r8,1
80005966:	c6 48       	rjmp	80005a2e <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80005968:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000596c:	11 c9       	ld.ub	r9,r8[0x4]
8000596e:	30 98       	mov	r8,9
80005970:	f0 09 18 00 	cp.b	r9,r8
80005974:	c0 a1       	brne	80005988 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80005976:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000597a:	70 18       	ld.w	r8,r8[0x4]
8000597c:	10 99       	mov	r9,r8
8000597e:	b1 b9       	sbr	r9,0x11
80005980:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005984:	91 19       	st.w	r8[0x4],r9
80005986:	c0 d8       	rjmp	800059a0 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80005988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000598c:	70 19       	ld.w	r9,r8[0x4]
8000598e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005992:	11 c8       	ld.ub	r8,r8[0x4]
80005994:	20 58       	sub	r8,5
80005996:	a7 68       	lsl	r8,0x6
80005998:	10 49       	or	r9,r8
8000599a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000599e:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800059a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059a4:	70 19       	ld.w	r9,r8[0x4]
800059a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059aa:	11 d8       	ld.ub	r8,r8[0x5]
800059ac:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
800059b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059b4:	f1 38 00 08 	ld.ub	r8,r8[8]
800059b8:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800059ba:	f5 e8 10 08 	or	r8,r10,r8
800059be:	10 49       	or	r9,r8
800059c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059c4:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800059c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059ca:	90 39       	ld.sh	r9,r8[0x6]
800059cc:	30 28       	mov	r8,2
800059ce:	f0 09 19 00 	cp.h	r9,r8
800059d2:	e0 88 00 14 	brls	800059fa <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800059d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059da:	70 18       	ld.w	r8,r8[0x4]
800059dc:	10 99       	mov	r9,r8
800059de:	ad b9       	sbr	r9,0xd
800059e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059e4:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800059e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059ea:	90 38       	ld.sh	r8,r8[0x6]
800059ec:	5c 78       	castu.h	r8
800059ee:	20 28       	sub	r8,2
800059f0:	10 99       	mov	r9,r8
800059f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059f6:	91 a9       	st.w	r8[0x28],r9
800059f8:	c0 d8       	rjmp	80005a12 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800059fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059fe:	70 19       	ld.w	r9,r8[0x4]
80005a00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a04:	90 38       	ld.sh	r8,r8[0x6]
80005a06:	5c 78       	castu.h	r8
80005a08:	ad 68       	lsl	r8,0xc
80005a0a:	10 49       	or	r9,r8
80005a0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a10:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80005a12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a16:	70 18       	ld.w	r8,r8[0x4]
80005a18:	10 99       	mov	r9,r8
80005a1a:	e0 19 ff f0 	andl	r9,0xfff0
80005a1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a22:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80005a24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a28:	35 09       	mov	r9,80
80005a2a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80005a2c:	30 08       	mov	r8,0
}
80005a2e:	10 9c       	mov	r12,r8
80005a30:	2f dd       	sub	sp,-12
80005a32:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a36:	00 00       	add	r0,r0
80005a38:	80 00       	ld.sh	r0,r0[0x0]
80005a3a:	58 5c       	cp.w	r12,5
80005a3c:	80 00       	ld.sh	r0,r0[0x0]
80005a3e:	57 88       	stdsp	sp[0x1e0],r8

80005a40 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80005a40:	eb cd 40 80 	pushm	r7,lr
80005a44:	1a 97       	mov	r7,sp
80005a46:	20 3d       	sub	sp,12
80005a48:	ef 4c ff f8 	st.w	r7[-8],r12
80005a4c:	ef 4b ff f4 	st.w	r7[-12],r11
80005a50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a54:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80005a58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a5c:	70 58       	ld.w	r8,r8[0x14]
80005a5e:	e2 18 00 02 	andl	r8,0x2,COH
80005a62:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80005a64:	58 08       	cp.w	r8,0
80005a66:	c0 a0       	breq	80005a7a <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80005a68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005a6c:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80005a70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a74:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80005a76:	30 08       	mov	r8,0
80005a78:	c0 28       	rjmp	80005a7c <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
80005a7a:	30 28       	mov	r8,2
}
80005a7c:	10 9c       	mov	r12,r8
80005a7e:	2f dd       	sub	sp,-12
80005a80:	e3 cd 80 80 	ldm	sp++,r7,pc

80005a84 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80005a84:	eb cd 40 80 	pushm	r7,lr
80005a88:	1a 97       	mov	r7,sp
80005a8a:	20 3d       	sub	sp,12
80005a8c:	ef 4c ff f8 	st.w	r7[-8],r12
80005a90:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80005a94:	e0 68 27 10 	mov	r8,10000
80005a98:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80005a9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005aa0:	58 08       	cp.w	r8,0
80005aa2:	5f 08       	sreq	r8
80005aa4:	5c 58       	castu.b	r8
80005aa6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005aaa:	20 19       	sub	r9,1
80005aac:	ef 49 ff fc 	st.w	r7[-4],r9
80005ab0:	58 08       	cp.w	r8,0
80005ab2:	c0 30       	breq	80005ab8 <usart_putchar+0x34>
80005ab4:	3f f8       	mov	r8,-1
80005ab6:	c0 b8       	rjmp	80005acc <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80005ab8:	ee fb ff f4 	ld.w	r11,r7[-12]
80005abc:	ee fc ff f8 	ld.w	r12,r7[-8]
80005ac0:	f0 1f 00 05 	mcall	80005ad4 <usart_putchar+0x50>
80005ac4:	18 98       	mov	r8,r12
80005ac6:	58 08       	cp.w	r8,0
80005ac8:	ce a1       	brne	80005a9c <usart_putchar+0x18>

  return USART_SUCCESS;
80005aca:	30 08       	mov	r8,0
}
80005acc:	10 9c       	mov	r12,r8
80005ace:	2f dd       	sub	sp,-12
80005ad0:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ad4:	80 00       	ld.sh	r0,r0[0x0]
80005ad6:	5a 40       	cp.w	r0,-28

80005ad8 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80005ad8:	eb cd 40 80 	pushm	r7,lr
80005adc:	1a 97       	mov	r7,sp
80005ade:	20 2d       	sub	sp,8
80005ae0:	ef 4c ff fc 	st.w	r7[-4],r12
80005ae4:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
80005ae8:	c0 e8       	rjmp	80005b04 <usart_write_line+0x2c>
    usart_putchar(usart, *string++);
80005aea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005aee:	11 88       	ld.ub	r8,r8[0x0]
80005af0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005af4:	2f f9       	sub	r9,-1
80005af6:	ef 49 ff f8 	st.w	r7[-8],r9
80005afa:	10 9b       	mov	r11,r8
80005afc:	ee fc ff fc 	ld.w	r12,r7[-4]
80005b00:	f0 1f 00 05 	mcall	80005b14 <usart_write_line+0x3c>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80005b04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b08:	11 88       	ld.ub	r8,r8[0x0]
80005b0a:	58 08       	cp.w	r8,0
80005b0c:	ce f1       	brne	80005aea <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
80005b0e:	2f ed       	sub	sp,-8
80005b10:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b14:	80 00       	ld.sh	r0,r0[0x0]
80005b16:	5a 84       	cp.w	r4,-24

80005b18 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80005b18:	48 cd       	lddpc	sp,80005b48 <udata_clear_loop_end+0x2>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
80005b1a:	48 d0       	lddpc	r0,80005b4c <udata_clear_loop_end+0x6>
  mtsr    AVR32_EVBA, r0
80005b1c:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80005b20:	d5 53       	csrf	0x15

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
80005b22:	48 c0       	lddpc	r0,80005b50 <udata_clear_loop_end+0xa>
  lda.w   r1, _edata
80005b24:	48 c1       	lddpc	r1,80005b54 <udata_clear_loop_end+0xe>
  cp      r0, r1
80005b26:	02 30       	cp.w	r0,r1
  brhs    idata_load_loop_end
80005b28:	c0 62       	brcc	80005b34 <idata_load_loop_end>
  lda.w   r2, _data_lma
80005b2a:	48 c2       	lddpc	r2,80005b58 <udata_clear_loop_end+0x12>

80005b2c <idata_load_loop>:
idata_load_loop:
  ld.d    r4, r2++
80005b2c:	a5 05       	ld.d	r4,r2++
  st.d    r0++, r4
80005b2e:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80005b30:	02 30       	cp.w	r0,r1
  brlo    idata_load_loop
80005b32:	cf d3       	brcs	80005b2c <idata_load_loop>

80005b34 <idata_load_loop_end>:
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80005b34:	48 a0       	lddpc	r0,80005b5c <udata_clear_loop_end+0x16>
  lda.w   r1, _end
80005b36:	48 b1       	lddpc	r1,80005b60 <udata_clear_loop_end+0x1a>
  cp      r0, r1
80005b38:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80005b3a:	c0 62       	brcc	80005b46 <udata_clear_loop_end>
  mov     r2, 0
80005b3c:	30 02       	mov	r2,0
  mov     r3, 0
80005b3e:	30 03       	mov	r3,0

80005b40 <udata_clear_loop>:
udata_clear_loop:
  st.d    r0++, r2
80005b40:	a1 22       	st.d	r0++,r2
  cp      r0, r1
80005b42:	02 30       	cp.w	r0,r1
  brlo    udata_clear_loop
80005b44:	cf e3       	brcs	80005b40 <udata_clear_loop>

80005b46 <udata_clear_loop_end>:
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80005b46:	48 8f       	lddpc	pc,80005b64 <udata_clear_loop_end+0x1e>
80005b48:	00 01       	add	r1,r0
80005b4a:	00 00       	add	r0,r0
80005b4c:	80 00       	ld.sh	r0,r0[0x0]
80005b4e:	a2 00       	st.h	r1[0x0],r0
80005b50:	00 00       	add	r0,r0
80005b52:	00 08       	add	r8,r0
80005b54:	00 00       	add	r0,r0
80005b56:	00 b8       	st.h	r0++,r8
80005b58:	80 00       	ld.sh	r0,r0[0x0]
80005b5a:	a6 50       	st.h	r3[0xa],r0
80005b5c:	00 00       	add	r0,r0
80005b5e:	00 b8       	st.h	r0++,r8
80005b60:	00 00       	add	r0,r0
80005b62:	0b 58       	ld.sh	r8,--r5
80005b64:	80 00       	ld.sh	r0,r0[0x0]
80005b66:	83 90       	st.w	r1[0x24],r0

80005b68 <twi_master_read>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005b68:	eb cd 40 80 	pushm	r7,lr
80005b6c:	1a 97       	mov	r7,sp
80005b6e:	20 2d       	sub	sp,8
80005b70:	ef 4c ff fc 	st.w	r7[-4],r12
80005b74:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_read_packet (twim, package));
80005b78:	ee fb ff f8 	ld.w	r11,r7[-8]
80005b7c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005b80:	f0 1f 00 04 	mcall	80005b90 <twi_master_read+0x28>
80005b84:	18 98       	mov	r8,r12
}
80005b86:	10 9c       	mov	r12,r8
80005b88:	2f ed       	sub	sp,-8
80005b8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b8e:	00 00       	add	r0,r0
80005b90:	80 00       	ld.sh	r0,r0[0x0]
80005b92:	53 7c       	stdsp	sp[0xdc],r12

80005b94 <twi_master_write>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   if all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005b94:	eb cd 40 80 	pushm	r7,lr
80005b98:	1a 97       	mov	r7,sp
80005b9a:	20 2d       	sub	sp,8
80005b9c:	ef 4c ff fc 	st.w	r7[-4],r12
80005ba0:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_write_packet (twim, package));
80005ba4:	ee fb ff f8 	ld.w	r11,r7[-8]
80005ba8:	ee fc ff fc 	ld.w	r12,r7[-4]
80005bac:	f0 1f 00 04 	mcall	80005bbc <twi_master_write+0x28>
80005bb0:	18 98       	mov	r8,r12
}
80005bb2:	10 9c       	mov	r12,r8
80005bb4:	2f ed       	sub	sp,-8
80005bb6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005bba:	00 00       	add	r0,r0
80005bbc:	80 00       	ld.sh	r0,r0[0x0]
80005bbe:	54 f8       	stdsp	sp[0x13c],r8

80005bc0 <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
80005bc0:	eb cd 40 80 	pushm	r7,lr
80005bc4:	1a 97       	mov	r7,sp
80005bc6:	20 9d       	sub	sp,36
80005bc8:	16 99       	mov	r9,r11
80005bca:	14 98       	mov	r8,r10
80005bcc:	18 9a       	mov	r10,r12
80005bce:	ef 6a ff e4 	st.b	r7[-28],r10
80005bd2:	ef 69 ff e0 	st.b	r7[-32],r9
80005bd6:	ef 68 ff dc 	st.b	r7[-36],r8
uint8_t pack[2];
twi_package_t twi_package;

	pack[0] = reg_index;
80005bda:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80005bde:	ef 68 ff fc 	st.b	r7[-4],r8
	pack[1] = data;
80005be2:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80005be6:	ef 68 ff fd 	st.b	r7[-3],r8

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005bea:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80005bee:	30 08       	mov	r8,0
80005bf0:	f0 09 18 00 	cp.b	r9,r8
80005bf4:	c0 51       	brne	80005bfe <PCA9952_write_reg+0x3e>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005bf6:	36 08       	mov	r8,96
80005bf8:	ef 48 ff e8 	st.w	r7[-24],r8
80005bfc:	c0 a8       	rjmp	80005c10 <PCA9952_write_reg+0x50>
	}
	else if (topBotn == LED_BOTTOM)
80005bfe:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80005c02:	30 18       	mov	r8,1
80005c04:	f0 09 18 00 	cp.b	r9,r8
80005c08:	c0 41       	brne	80005c10 <PCA9952_write_reg+0x50>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005c0a:	36 18       	mov	r8,97
80005c0c:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	twi_package.addr_length = 0;
80005c10:	30 08       	mov	r8,0
80005c12:	ef 68 ff ef 	st.b	r7[-17],r8
	twi_package.buffer = &pack;
80005c16:	ee c8 00 04 	sub	r8,r7,4
80005c1a:	ef 48 ff f0 	st.w	r7[-16],r8
	twi_package.length = sizeof(pack);
80005c1e:	30 28       	mov	r8,2
80005c20:	ef 48 ff f4 	st.w	r7[-12],r8

	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005c24:	ee c8 00 18 	sub	r8,r7,24
80005c28:	10 9b       	mov	r11,r8
80005c2a:	fe 7c 38 00 	mov	r12,-51200
80005c2e:	f0 1f 00 05 	mcall	80005c40 <PCA9952_write_reg+0x80>
80005c32:	18 98       	mov	r8,r12
80005c34:	58 08       	cp.w	r8,0
80005c36:	cf 71       	brne	80005c24 <PCA9952_write_reg+0x64>

	return;
}
80005c38:	2f 7d       	sub	sp,-36
80005c3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c3e:	00 00       	add	r0,r0
80005c40:	80 00       	ld.sh	r0,r0[0x0]
80005c42:	5b 94       	cp.w	r4,-7

80005c44 <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
80005c44:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005c48:	1a 97       	mov	r7,sp
80005c4a:	21 3d       	sub	sp,76
80005c4c:	18 99       	mov	r9,r12
80005c4e:	16 98       	mov	r8,r11
80005c50:	ef 69 ff b8 	st.b	r7[-72],r9
80005c54:	ef 68 ff b4 	st.b	r7[-76],r8
uint8_t data;
twi_package_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
80005c58:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005c5c:	30 08       	mov	r8,0
80005c5e:	f0 09 18 00 	cp.b	r9,r8
80005c62:	c0 51       	brne	80005c6c <PCA9952_read_reg+0x28>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005c64:	36 08       	mov	r8,96
80005c66:	ef 48 ff c8 	st.w	r7[-56],r8
80005c6a:	c0 a8       	rjmp	80005c7e <PCA9952_read_reg+0x3a>
	}
	else if (topBotn == LED_BOTTOM)
80005c6c:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005c70:	30 18       	mov	r8,1
80005c72:	f0 09 18 00 	cp.b	r9,r8
80005c76:	c0 41       	brne	80005c7e <PCA9952_read_reg+0x3a>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80005c78:	36 18       	mov	r8,97
80005c7a:	ef 48 ff c8 	st.w	r7[-56],r8
	}

	twi_package.addr_length = 0;
80005c7e:	30 08       	mov	r8,0
80005c80:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &reg_index;
80005c84:	ee c8 00 4c 	sub	r8,r7,76
80005c88:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
80005c8c:	30 18       	mov	r8,1
80005c8e:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005c92:	ee c8 00 38 	sub	r8,r7,56
80005c96:	10 9b       	mov	r11,r8
80005c98:	fe 7c 38 00 	mov	r12,-51200
80005c9c:	f0 1f 00 5e 	mcall	80005e14 <PCA9952_read_reg+0x1d0>
80005ca0:	18 98       	mov	r8,r12
80005ca2:	58 08       	cp.w	r8,0
80005ca4:	cf 71       	brne	80005c92 <PCA9952_read_reg+0x4e>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	cpu_delay_us(20, cpu_hz);
80005ca6:	4d d8       	lddpc	r8,80005e18 <PCA9952_read_reg+0x1d4>
80005ca8:	70 08       	ld.w	r8,r8[0x0]
80005caa:	31 49       	mov	r9,20
80005cac:	ef 49 ff e4 	st.w	r7[-28],r9
80005cb0:	ef 48 ff e0 	st.w	r7[-32],r8
80005cb4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005cb8:	ef 48 ff ec 	st.w	r7[-20],r8
80005cbc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005cc0:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80005cc4:	ee f0 ff ec 	ld.w	r0,r7[-20]
80005cc8:	30 01       	mov	r1,0
80005cca:	ee f2 ff e8 	ld.w	r2,r7[-24]
80005cce:	30 03       	mov	r3,0
80005cd0:	e2 02 02 4a 	mul	r10,r1,r2
80005cd4:	e6 00 02 48 	mul	r8,r3,r0
80005cd8:	10 0a       	add	r10,r8
80005cda:	e0 02 06 48 	mulu.d	r8,r0,r2
80005cde:	12 0a       	add	r10,r9
80005ce0:	14 99       	mov	r9,r10
80005ce2:	ee 7a 42 3f 	mov	r10,999999
80005ce6:	30 0b       	mov	r11,0
80005ce8:	f0 0a 00 0a 	add	r10,r8,r10
80005cec:	f2 0b 00 4b 	adc	r11,r9,r11
80005cf0:	ee 78 42 40 	mov	r8,1000000
80005cf4:	30 09       	mov	r9,0
80005cf6:	f0 1f 00 4a 	mcall	80005e1c <PCA9952_read_reg+0x1d8>
80005cfa:	14 98       	mov	r8,r10
80005cfc:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80005cfe:	ef 48 ff f4 	st.w	r7[-12],r8
80005d02:	ee c8 00 44 	sub	r8,r7,68
80005d06:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005d0a:	e1 b8 00 42 	mfsr	r8,0x108
80005d0e:	10 99       	mov	r9,r8
80005d10:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005d14:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005d16:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005d1a:	70 09       	ld.w	r9,r8[0x0]
80005d1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005d20:	10 09       	add	r9,r8
80005d22:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005d26:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005d28:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005d2c:	30 08       	mov	r8,0
80005d2e:	f3 68 00 08 	st.b	r9[8],r8
80005d32:	ee c8 00 44 	sub	r8,r7,68
80005d36:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005d3a:	e1 b8 00 42 	mfsr	r8,0x108
80005d3e:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005d42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d46:	f1 39 00 08 	ld.ub	r9,r8[8]
80005d4a:	30 28       	mov	r8,2
80005d4c:	f0 09 18 00 	cp.b	r9,r8
80005d50:	c0 31       	brne	80005d56 <PCA9952_read_reg+0x112>
    return false;
80005d52:	30 08       	mov	r8,0
80005d54:	c4 38       	rjmp	80005dda <PCA9952_read_reg+0x196>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005d56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d5a:	f1 39 00 08 	ld.ub	r9,r8[8]
80005d5e:	30 18       	mov	r8,1
80005d60:	f0 09 18 00 	cp.b	r9,r8
80005d64:	c0 31       	brne	80005d6a <PCA9952_read_reg+0x126>
    return true;
80005d66:	30 18       	mov	r8,1
80005d68:	c3 98       	rjmp	80005dda <PCA9952_read_reg+0x196>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005d6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d6e:	70 09       	ld.w	r9,r8[0x0]
80005d70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d74:	70 18       	ld.w	r8,r8[0x4]
80005d76:	10 39       	cp.w	r9,r8
80005d78:	e0 88 00 1a 	brls	80005dac <PCA9952_read_reg+0x168>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005d7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d80:	70 08       	ld.w	r8,r8[0x0]
80005d82:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d86:	10 39       	cp.w	r9,r8
80005d88:	c1 02       	brcc	80005da8 <PCA9952_read_reg+0x164>
80005d8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d8e:	70 18       	ld.w	r8,r8[0x4]
80005d90:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d94:	10 39       	cp.w	r9,r8
80005d96:	e0 88 00 09 	brls	80005da8 <PCA9952_read_reg+0x164>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005d9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d9e:	30 18       	mov	r8,1
80005da0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005da4:	30 18       	mov	r8,1
80005da6:	c1 a8       	rjmp	80005dda <PCA9952_read_reg+0x196>
    }
    return false;
80005da8:	30 08       	mov	r8,0
80005daa:	c1 88       	rjmp	80005dda <PCA9952_read_reg+0x196>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005dac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005db0:	70 08       	ld.w	r8,r8[0x0]
80005db2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005db6:	10 39       	cp.w	r9,r8
80005db8:	c0 93       	brcs	80005dca <PCA9952_read_reg+0x186>
80005dba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005dbe:	70 18       	ld.w	r8,r8[0x4]
80005dc0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005dc4:	10 39       	cp.w	r9,r8
80005dc6:	e0 88 00 09 	brls	80005dd8 <PCA9952_read_reg+0x194>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005dca:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005dce:	30 18       	mov	r8,1
80005dd0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005dd4:	30 18       	mov	r8,1
80005dd6:	c0 28       	rjmp	80005dda <PCA9952_read_reg+0x196>
    }
    return false;
80005dd8:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005dda:	58 08       	cp.w	r8,0
80005ddc:	ca b0       	breq	80005d32 <PCA9952_read_reg+0xee>

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
80005dde:	30 08       	mov	r8,0
80005de0:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &data;
80005de4:	ee c8 00 21 	sub	r8,r7,33
80005de8:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
80005dec:	30 18       	mov	r8,1
80005dee:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_read(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005df2:	ee c8 00 38 	sub	r8,r7,56
80005df6:	10 9b       	mov	r11,r8
80005df8:	fe 7c 38 00 	mov	r12,-51200
80005dfc:	f0 1f 00 09 	mcall	80005e20 <PCA9952_read_reg+0x1dc>
80005e00:	18 98       	mov	r8,r12
80005e02:	58 08       	cp.w	r8,0
80005e04:	cf 71       	brne	80005df2 <PCA9952_read_reg+0x1ae>

	return data;
80005e06:	ef 38 ff df 	ld.ub	r8,r7[-33]
}
80005e0a:	10 9c       	mov	r12,r8
80005e0c:	2e dd       	sub	sp,-76
80005e0e:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005e12:	00 00       	add	r0,r0
80005e14:	80 00       	ld.sh	r0,r0[0x0]
80005e16:	5b 94       	cp.w	r4,-7
80005e18:	00 00       	add	r0,r0
80005e1a:	02 ac       	st.w	r1++,r12
80005e1c:	80 00       	ld.sh	r0,r0[0x0]
80005e1e:	9c 9e       	ld.uh	lr,lr[0x2]
80005e20:	80 00       	ld.sh	r0,r0[0x0]
80005e22:	5b 68       	cp.w	r8,-10

80005e24 <PCA9952_init>:


void PCA9952_init(void) //7apr15
{
80005e24:	eb cd 40 80 	pushm	r7,lr
80005e28:	1a 97       	mov	r7,sp
80005e2a:	20 1d       	sub	sp,4
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
80005e2c:	30 0a       	mov	r10,0
80005e2e:	30 0b       	mov	r11,0
80005e30:	30 0c       	mov	r12,0
80005e32:	f0 1f 00 32 	mcall	80005ef8 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
80005e36:	30 0a       	mov	r10,0
80005e38:	30 1b       	mov	r11,1
80005e3a:	30 0c       	mov	r12,0
80005e3c:	f0 1f 00 2f 	mcall	80005ef8 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
80005e40:	36 4a       	mov	r10,100
80005e42:	34 3b       	mov	r11,67
80005e44:	30 0c       	mov	r12,0
80005e46:	f0 1f 00 2d 	mcall	80005ef8 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
80005e4a:	30 0a       	mov	r10,0
80005e4c:	30 2b       	mov	r11,2
80005e4e:	30 0c       	mov	r12,0
80005e50:	f0 1f 00 2a 	mcall	80005ef8 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
80005e54:	30 0a       	mov	r10,0
80005e56:	30 3b       	mov	r11,3
80005e58:	30 0c       	mov	r12,0
80005e5a:	f0 1f 00 28 	mcall	80005ef8 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
80005e5e:	30 0a       	mov	r10,0
80005e60:	30 4b       	mov	r11,4
80005e62:	30 0c       	mov	r12,0
80005e64:	f0 1f 00 25 	mcall	80005ef8 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
80005e68:	30 0a       	mov	r10,0
80005e6a:	30 5b       	mov	r11,5
80005e6c:	30 0c       	mov	r12,0
80005e6e:	f0 1f 00 23 	mcall	80005ef8 <PCA9952_init+0xd4>

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
80005e72:	34 4b       	mov	r11,68
80005e74:	30 0c       	mov	r12,0
80005e76:	f0 1f 00 22 	mcall	80005efc <PCA9952_init+0xd8>
80005e7a:	18 98       	mov	r8,r12
80005e7c:	ef 68 ff ff 	st.b	r7[-1],r8
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
80005e80:	34 5b       	mov	r11,69
80005e82:	30 0c       	mov	r12,0
80005e84:	f0 1f 00 1e 	mcall	80005efc <PCA9952_init+0xd8>
80005e88:	18 98       	mov	r8,r12
80005e8a:	ef 68 ff fe 	st.b	r7[-2],r8

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
80005e8e:	30 0a       	mov	r10,0
80005e90:	30 0b       	mov	r11,0
80005e92:	30 1c       	mov	r12,1
80005e94:	f0 1f 00 19 	mcall	80005ef8 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
80005e98:	30 0a       	mov	r10,0
80005e9a:	30 1b       	mov	r11,1
80005e9c:	30 1c       	mov	r12,1
80005e9e:	f0 1f 00 17 	mcall	80005ef8 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
80005ea2:	36 4a       	mov	r10,100
80005ea4:	34 3b       	mov	r11,67
80005ea6:	30 1c       	mov	r12,1
80005ea8:	f0 1f 00 14 	mcall	80005ef8 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
80005eac:	30 0a       	mov	r10,0
80005eae:	30 2b       	mov	r11,2
80005eb0:	30 1c       	mov	r12,1
80005eb2:	f0 1f 00 12 	mcall	80005ef8 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
80005eb6:	30 0a       	mov	r10,0
80005eb8:	30 3b       	mov	r11,3
80005eba:	30 1c       	mov	r12,1
80005ebc:	f0 1f 00 0f 	mcall	80005ef8 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
80005ec0:	30 0a       	mov	r10,0
80005ec2:	30 4b       	mov	r11,4
80005ec4:	30 1c       	mov	r12,1
80005ec6:	f0 1f 00 0d 	mcall	80005ef8 <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
80005eca:	30 0a       	mov	r10,0
80005ecc:	30 5b       	mov	r11,5
80005ece:	30 1c       	mov	r12,1
80005ed0:	f0 1f 00 0a 	mcall	80005ef8 <PCA9952_init+0xd4>

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
80005ed4:	34 4b       	mov	r11,68
80005ed6:	30 1c       	mov	r12,1
80005ed8:	f0 1f 00 09 	mcall	80005efc <PCA9952_init+0xd8>
80005edc:	18 98       	mov	r8,r12
80005ede:	ef 68 ff fd 	st.b	r7[-3],r8
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
80005ee2:	34 5b       	mov	r11,69
80005ee4:	30 1c       	mov	r12,1
80005ee6:	f0 1f 00 06 	mcall	80005efc <PCA9952_init+0xd8>
80005eea:	18 98       	mov	r8,r12
80005eec:	ef 68 ff fc 	st.b	r7[-4],r8

}
80005ef0:	2f fd       	sub	sp,-4
80005ef2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ef6:	00 00       	add	r0,r0
80005ef8:	80 00       	ld.sh	r0,r0[0x0]
80005efa:	5b c0       	cp.w	r0,-4
80005efc:	80 00       	ld.sh	r0,r0[0x0]
80005efe:	5c 44       	abs	r4

80005f00 <PCA9952_channel>:


void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn);
void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn)
{
80005f00:	eb cd 40 80 	pushm	r7,lr
80005f04:	1a 97       	mov	r7,sp
80005f06:	20 5d       	sub	sp,20
80005f08:	16 99       	mov	r9,r11
80005f0a:	14 98       	mov	r8,r10
80005f0c:	18 9a       	mov	r10,r12
80005f0e:	ef 6a ff f4 	st.b	r7[-12],r10
80005f12:	ef 69 ff f0 	st.b	r7[-16],r9
80005f16:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char regIdx, regPos, regShadow, maskVal, writeVal;
	
	regIdx = (channel / 4); //LEDOUT0 controls channels 0..3, LEDOUT1 controls channels 4..7 etc.
80005f1a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005f1e:	a3 88       	lsr	r8,0x2
80005f20:	ef 68 ff fb 	st.b	r7[-5],r8
	regPos = (channel % 4);
80005f24:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80005f28:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80005f2c:	ef 68 ff fc 	st.b	r7[-4],r8
	
	switch(regIdx)
80005f30:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005f34:	58 18       	cp.w	r8,1
80005f36:	c1 50       	breq	80005f60 <PCA9952_channel+0x60>
80005f38:	e0 89 00 05 	brgt	80005f42 <PCA9952_channel+0x42>
80005f3c:	58 08       	cp.w	r8,0
80005f3e:	c0 70       	breq	80005f4c <PCA9952_channel+0x4c>
80005f40:	c2 d8       	rjmp	80005f9a <PCA9952_channel+0x9a>
80005f42:	58 28       	cp.w	r8,2
80005f44:	c1 80       	breq	80005f74 <PCA9952_channel+0x74>
80005f46:	58 38       	cp.w	r8,3
80005f48:	c2 00       	breq	80005f88 <PCA9952_channel+0x88>
80005f4a:	c2 88       	rjmp	80005f9a <PCA9952_channel+0x9a>
	{
		case 0:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT0);
80005f4c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005f50:	30 2b       	mov	r11,2
80005f52:	10 9c       	mov	r12,r8
80005f54:	f0 1f 00 49 	mcall	80006078 <PCA9952_channel+0x178>
80005f58:	18 98       	mov	r8,r12
80005f5a:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80005f5e:	c1 e8       	rjmp	80005f9a <PCA9952_channel+0x9a>
		case 1:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT1);
80005f60:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005f64:	30 3b       	mov	r11,3
80005f66:	10 9c       	mov	r12,r8
80005f68:	f0 1f 00 44 	mcall	80006078 <PCA9952_channel+0x178>
80005f6c:	18 98       	mov	r8,r12
80005f6e:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80005f72:	c1 48       	rjmp	80005f9a <PCA9952_channel+0x9a>
		case 2:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT2);
80005f74:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005f78:	30 4b       	mov	r11,4
80005f7a:	10 9c       	mov	r12,r8
80005f7c:	f0 1f 00 3f 	mcall	80006078 <PCA9952_channel+0x178>
80005f80:	18 98       	mov	r8,r12
80005f82:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80005f86:	c0 a8       	rjmp	80005f9a <PCA9952_channel+0x9a>
		case 3:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT3);
80005f88:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005f8c:	30 5b       	mov	r11,5
80005f8e:	10 9c       	mov	r12,r8
80005f90:	f0 1f 00 3a 	mcall	80006078 <PCA9952_channel+0x178>
80005f94:	18 98       	mov	r8,r12
80005f96:	ef 68 ff fd 	st.b	r7[-3],r8
			break;		
	}

	maskVal = 0xFF << (regPos * 2);
80005f9a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005f9e:	a1 78       	lsl	r8,0x1
80005fa0:	e0 69 00 ff 	mov	r9,255
80005fa4:	f2 08 09 48 	lsl	r8,r9,r8
80005fa8:	ef 68 ff fe 	st.b	r7[-2],r8
	maskVal = maskVal ^ 0xFF;
80005fac:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005fb0:	5c d8       	com	r8
80005fb2:	ef 68 ff fe 	st.b	r7[-2],r8
	regShadow &= maskVal;
80005fb6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005fba:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005fbe:	f3 e8 00 08 	and	r8,r9,r8
80005fc2:	ef 68 ff fd 	st.b	r7[-3],r8

	if (onOffn == LED_ON)
80005fc6:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80005fca:	30 18       	mov	r8,1
80005fcc:	f0 09 18 00 	cp.b	r9,r8
80005fd0:	c0 a1       	brne	80005fe4 <PCA9952_channel+0xe4>
	{
		writeVal = (0x01 << (regPos * 2));
80005fd2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005fd6:	a1 78       	lsl	r8,0x1
80005fd8:	30 19       	mov	r9,1
80005fda:	f2 08 09 48 	lsl	r8,r9,r8
80005fde:	ef 68 ff ff 	st.b	r7[-1],r8
80005fe2:	c0 a8       	rjmp	80005ff6 <PCA9952_channel+0xf6>
	}
	else if (onOffn == LED_OFF)
80005fe4:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80005fe8:	30 08       	mov	r8,0
80005fea:	f0 09 18 00 	cp.b	r9,r8
80005fee:	c0 41       	brne	80005ff6 <PCA9952_channel+0xf6>
	{
		writeVal = 0;
80005ff0:	30 08       	mov	r8,0
80005ff2:	ef 68 ff ff 	st.b	r7[-1],r8
	}
	
	regShadow |= writeVal;
80005ff6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005ffa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005ffe:	f3 e8 10 08 	or	r8,r9,r8
80006002:	ef 68 ff fd 	st.b	r7[-3],r8
	
	switch(regIdx)
80006006:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000600a:	58 18       	cp.w	r8,1
8000600c:	c1 50       	breq	80006036 <PCA9952_channel+0x136>
8000600e:	e0 89 00 05 	brgt	80006018 <PCA9952_channel+0x118>
80006012:	58 08       	cp.w	r8,0
80006014:	c0 70       	breq	80006022 <PCA9952_channel+0x122>
80006016:	c2 d8       	rjmp	80006070 <PCA9952_channel+0x170>
80006018:	58 28       	cp.w	r8,2
8000601a:	c1 80       	breq	8000604a <PCA9952_channel+0x14a>
8000601c:	58 38       	cp.w	r8,3
8000601e:	c2 00       	breq	8000605e <PCA9952_channel+0x15e>
80006020:	c2 88       	rjmp	80006070 <PCA9952_channel+0x170>
	{
		case 0:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT0, regShadow);
80006022:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006026:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000602a:	12 9a       	mov	r10,r9
8000602c:	30 2b       	mov	r11,2
8000602e:	10 9c       	mov	r12,r8
80006030:	f0 1f 00 13 	mcall	8000607c <PCA9952_channel+0x17c>
			break;
80006034:	c1 e8       	rjmp	80006070 <PCA9952_channel+0x170>
		case 1:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT1, regShadow);
80006036:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000603a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000603e:	12 9a       	mov	r10,r9
80006040:	30 3b       	mov	r11,3
80006042:	10 9c       	mov	r12,r8
80006044:	f0 1f 00 0e 	mcall	8000607c <PCA9952_channel+0x17c>
			break;
80006048:	c1 48       	rjmp	80006070 <PCA9952_channel+0x170>
		case 2:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT2, regShadow);
8000604a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000604e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006052:	12 9a       	mov	r10,r9
80006054:	30 4b       	mov	r11,4
80006056:	10 9c       	mov	r12,r8
80006058:	f0 1f 00 09 	mcall	8000607c <PCA9952_channel+0x17c>
			break;
8000605c:	c0 a8       	rjmp	80006070 <PCA9952_channel+0x170>
		case 3:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT3, regShadow);
8000605e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006062:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006066:	12 9a       	mov	r10,r9
80006068:	30 5b       	mov	r11,5
8000606a:	10 9c       	mov	r12,r8
8000606c:	f0 1f 00 04 	mcall	8000607c <PCA9952_channel+0x17c>
			break;
	}

}
80006070:	2f bd       	sub	sp,-20
80006072:	e3 cd 80 80 	ldm	sp++,r7,pc
80006076:	00 00       	add	r0,r0
80006078:	80 00       	ld.sh	r0,r0[0x0]
8000607a:	5c 44       	abs	r4
8000607c:	80 00       	ld.sh	r0,r0[0x0]
8000607e:	5b c0       	cp.w	r0,-4

80006080 <led_shelf>:

void led_shelf(unsigned char shelf, unsigned char onOffn)
{
80006080:	eb cd 40 80 	pushm	r7,lr
80006084:	1a 97       	mov	r7,sp
80006086:	20 2d       	sub	sp,8
80006088:	18 99       	mov	r9,r12
8000608a:	16 98       	mov	r8,r11
8000608c:	ef 69 ff fc 	st.b	r7[-4],r9
80006090:	ef 68 ff f8 	st.b	r7[-8],r8
	switch(shelf)
80006094:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006098:	58 18       	cp.w	r8,1
8000609a:	c2 f0       	breq	800060f8 <led_shelf+0x78>
8000609c:	e0 89 00 05 	brgt	800060a6 <led_shelf+0x26>
800060a0:	58 08       	cp.w	r8,0
800060a2:	c0 70       	breq	800060b0 <led_shelf+0x30>
800060a4:	c9 58       	rjmp	800061ce <led_shelf+0x14e>
800060a6:	58 28       	cp.w	r8,2
800060a8:	c4 c0       	breq	80006140 <led_shelf+0xc0>
800060aa:	58 38       	cp.w	r8,3
800060ac:	c6 e0       	breq	80006188 <led_shelf+0x108>
800060ae:	c9 08       	rjmp	800061ce <led_shelf+0x14e>
	{
		case 0: //bottom of LED board 0 which is the upper board in the shelf, and top of LED board 1 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 0, onOffn);
800060b0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800060b4:	10 9a       	mov	r10,r8
800060b6:	30 0b       	mov	r11,0
800060b8:	30 1c       	mov	r12,1
800060ba:	f0 1f 00 47 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 1, onOffn);
800060be:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800060c2:	10 9a       	mov	r10,r8
800060c4:	30 1b       	mov	r11,1
800060c6:	30 1c       	mov	r12,1
800060c8:	f0 1f 00 43 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 2, onOffn);
800060cc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800060d0:	10 9a       	mov	r10,r8
800060d2:	30 2b       	mov	r11,2
800060d4:	30 1c       	mov	r12,1
800060d6:	f0 1f 00 40 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 0, onOffn);
800060da:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800060de:	10 9a       	mov	r10,r8
800060e0:	30 0b       	mov	r11,0
800060e2:	30 0c       	mov	r12,0
800060e4:	f0 1f 00 3c 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 1, onOffn);
800060e8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800060ec:	10 9a       	mov	r10,r8
800060ee:	30 1b       	mov	r11,1
800060f0:	30 0c       	mov	r12,0
800060f2:	f0 1f 00 39 	mcall	800061d4 <led_shelf+0x154>
			break;
800060f6:	c6 c8       	rjmp	800061ce <led_shelf+0x14e>

		case 1: //bottom of LED board 1 which is the upper board in the shelf, and top of LED board 2 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 3, onOffn);
800060f8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800060fc:	10 9a       	mov	r10,r8
800060fe:	30 3b       	mov	r11,3
80006100:	30 1c       	mov	r12,1
80006102:	f0 1f 00 35 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 4, onOffn);
80006106:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000610a:	10 9a       	mov	r10,r8
8000610c:	30 4b       	mov	r11,4
8000610e:	30 1c       	mov	r12,1
80006110:	f0 1f 00 31 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 5, onOffn);
80006114:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006118:	10 9a       	mov	r10,r8
8000611a:	30 5b       	mov	r11,5
8000611c:	30 1c       	mov	r12,1
8000611e:	f0 1f 00 2e 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 2, onOffn);
80006122:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006126:	10 9a       	mov	r10,r8
80006128:	30 2b       	mov	r11,2
8000612a:	30 0c       	mov	r12,0
8000612c:	f0 1f 00 2a 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 3, onOffn);
80006130:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006134:	10 9a       	mov	r10,r8
80006136:	30 3b       	mov	r11,3
80006138:	30 0c       	mov	r12,0
8000613a:	f0 1f 00 27 	mcall	800061d4 <led_shelf+0x154>
			break;
8000613e:	c4 88       	rjmp	800061ce <led_shelf+0x14e>

		case 2: //bottom of LED board 2 which is the upper board in the shelf, and top of LED board 3 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 6, onOffn);
80006140:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006144:	10 9a       	mov	r10,r8
80006146:	30 6b       	mov	r11,6
80006148:	30 1c       	mov	r12,1
8000614a:	f0 1f 00 23 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 7, onOffn);
8000614e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006152:	10 9a       	mov	r10,r8
80006154:	30 7b       	mov	r11,7
80006156:	30 1c       	mov	r12,1
80006158:	f0 1f 00 1f 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 8, onOffn);
8000615c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006160:	10 9a       	mov	r10,r8
80006162:	30 8b       	mov	r11,8
80006164:	30 1c       	mov	r12,1
80006166:	f0 1f 00 1c 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 4, onOffn);
8000616a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000616e:	10 9a       	mov	r10,r8
80006170:	30 4b       	mov	r11,4
80006172:	30 0c       	mov	r12,0
80006174:	f0 1f 00 18 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 5, onOffn);
80006178:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000617c:	10 9a       	mov	r10,r8
8000617e:	30 5b       	mov	r11,5
80006180:	30 0c       	mov	r12,0
80006182:	f0 1f 00 15 	mcall	800061d4 <led_shelf+0x154>
			break;
80006186:	c2 48       	rjmp	800061ce <led_shelf+0x14e>

		case 3: //bottom of LED board 3 which is the upper board in the shelf, and top of LED board 4 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 9, onOffn);
80006188:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000618c:	10 9a       	mov	r10,r8
8000618e:	30 9b       	mov	r11,9
80006190:	30 1c       	mov	r12,1
80006192:	f0 1f 00 11 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 10, onOffn);
80006196:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000619a:	10 9a       	mov	r10,r8
8000619c:	30 ab       	mov	r11,10
8000619e:	30 1c       	mov	r12,1
800061a0:	f0 1f 00 0d 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 11, onOffn);
800061a4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800061a8:	10 9a       	mov	r10,r8
800061aa:	30 bb       	mov	r11,11
800061ac:	30 1c       	mov	r12,1
800061ae:	f0 1f 00 0a 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 6, onOffn);
800061b2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800061b6:	10 9a       	mov	r10,r8
800061b8:	30 6b       	mov	r11,6
800061ba:	30 0c       	mov	r12,0
800061bc:	f0 1f 00 06 	mcall	800061d4 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 7, onOffn);
800061c0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800061c4:	10 9a       	mov	r10,r8
800061c6:	30 7b       	mov	r11,7
800061c8:	30 0c       	mov	r12,0
800061ca:	f0 1f 00 03 	mcall	800061d4 <led_shelf+0x154>
			break;
	}	
	
}
800061ce:	2f ed       	sub	sp,-8
800061d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800061d4:	80 00       	ld.sh	r0,r0[0x0]
800061d6:	5f 00       	sreq	r0
800061d8:	53 68       	stdsp	sp[0xd8],r8
800061da:	65 6c       	ld.w	r12,r2[0x58]
800061dc:	66 20       	ld.w	r0,r3[0x8]
800061de:	30 20       	mov	r0,2
800061e0:	61 63       	ld.w	r3,r0[0x58]
800061e2:	74 69       	ld.w	r9,r10[0x18]
800061e4:	76 65       	ld.w	r5,r11[0x18]
800061e6:	0d 0a       	ld.w	r10,r6++
800061e8:	00 00       	add	r0,r0
800061ea:	00 00       	add	r0,r0
800061ec:	53 68       	stdsp	sp[0xd8],r8
800061ee:	65 6c       	ld.w	r12,r2[0x58]
800061f0:	66 20       	ld.w	r0,r3[0x8]
800061f2:	31 20       	mov	r0,18
800061f4:	61 63       	ld.w	r3,r0[0x58]
800061f6:	74 69       	ld.w	r9,r10[0x18]
800061f8:	76 65       	ld.w	r5,r11[0x18]
800061fa:	0d 0a       	ld.w	r10,r6++
800061fc:	00 00       	add	r0,r0
800061fe:	00 00       	add	r0,r0
80006200:	53 68       	stdsp	sp[0xd8],r8
80006202:	65 6c       	ld.w	r12,r2[0x58]
80006204:	66 20       	ld.w	r0,r3[0x8]
80006206:	32 20       	mov	r0,34
80006208:	61 63       	ld.w	r3,r0[0x58]
8000620a:	74 69       	ld.w	r9,r10[0x18]
8000620c:	76 65       	ld.w	r5,r11[0x18]
8000620e:	0d 0a       	ld.w	r10,r6++
80006210:	00 00       	add	r0,r0
80006212:	00 00       	add	r0,r0
80006214:	53 68       	stdsp	sp[0xd8],r8
80006216:	65 6c       	ld.w	r12,r2[0x58]
80006218:	66 20       	ld.w	r0,r3[0x8]
8000621a:	33 20       	mov	r0,50
8000621c:	61 63       	ld.w	r3,r0[0x58]
8000621e:	74 69       	ld.w	r9,r10[0x18]
80006220:	76 65       	ld.w	r5,r11[0x18]
80006222:	0d 0a       	ld.w	r10,r6++
80006224:	00 00       	add	r0,r0
80006226:	00 00       	add	r0,r0
80006228:	53 45       	stdsp	sp[0xd0],r5
8000622a:	41 4c       	lddsp	r12,sp[0x50]
8000622c:	20 53       	sub	r3,5
8000622e:	48 49       	lddpc	r9,8000623c <led_shelf+0x1bc>
80006230:	45 4c       	lddsp	r12,sp[0x150]
80006232:	44 20       	lddsp	r0,sp[0x108]
80006234:	44 45       	lddsp	r5,sp[0x110]
80006236:	4d 4f       	lddpc	pc,80006384 <display_text+0xc>
80006238:	20 0d       	sub	sp,0
8000623a:	0a 20       	rsub	r0,r5
8000623c:	43 6f       	lddsp	pc,sp[0xd8]
8000623e:	70 79       	ld.w	r9,r8[0x1c]
80006240:	72 69       	ld.w	r9,r9[0x18]
80006242:	67 68       	ld.w	r8,r3[0x58]
80006244:	74 20       	ld.w	r0,r10[0x8]
80006246:	28 63       	sub	r3,-122
80006248:	29 20       	sub	r0,-110
8000624a:	32 30       	mov	r0,35
8000624c:	31 35       	mov	r5,19
8000624e:	20 54       	sub	r4,5
80006250:	65 63       	ld.w	r3,r2[0x58]
80006252:	68 6e       	ld.w	lr,r4[0x18]
80006254:	69 63       	ld.w	r3,r4[0x58]
80006256:	61 6c       	ld.w	r12,r0[0x58]
80006258:	20 53       	sub	r3,5
8000625a:	6f 6c       	ld.w	r12,r7[0x58]
8000625c:	75 74       	ld.w	r4,r10[0x5c]
8000625e:	69 6f       	ld.w	pc,r4[0x58]
80006260:	6e 73       	ld.w	r3,r7[0x1c]
80006262:	20 47       	sub	r7,4
80006264:	72 6f       	ld.w	pc,r9[0x18]
80006266:	75 70       	ld.w	r0,r10[0x5c]
80006268:	2c 20       	sub	r0,-62
8000626a:	49 6e       	lddpc	lr,800062c0 <led_shelf+0x240>
8000626c:	63 2e       	ld.w	lr,r1[0x48]
8000626e:	0d 0a       	ld.w	r10,r6++
80006270:	00 00       	add	r0,r0
80006272:	00 00       	add	r0,r0
80006274:	44 6f       	lddsp	pc,sp[0x118]
80006276:	6f 72       	ld.w	r2,r7[0x5c]
80006278:	20 6c       	sub	r12,6
8000627a:	61 74       	ld.w	r4,r0[0x5c]
8000627c:	63 68       	ld.w	r8,r1[0x58]
8000627e:	20 64       	sub	r4,6
80006280:	65 74       	ld.w	r4,r2[0x5c]
80006282:	65 63       	ld.w	r3,r2[0x58]
80006284:	74 65       	ld.w	r5,r10[0x18]
80006286:	64 0d       	ld.w	sp,r2[0x0]
80006288:	0a 00       	add	r0,r5
8000628a:	00 00       	add	r0,r0
8000628c:	41 63       	lddsp	r3,sp[0x58]
8000628e:	74 69       	ld.w	r9,r10[0x18]
80006290:	6f 6e       	ld.w	lr,r7[0x58]
80006292:	20 70       	sub	r0,7
80006294:	75 73       	ld.w	r3,r10[0x5c]
80006296:	68 20       	ld.w	r0,r4[0x8]
80006298:	62 75       	ld.w	r5,r1[0x1c]
8000629a:	74 74       	ld.w	r4,r10[0x1c]
8000629c:	6f 6e       	ld.w	lr,r7[0x58]
8000629e:	20 70       	sub	r0,7
800062a0:	72 65       	ld.w	r5,r9[0x18]
800062a2:	73 73       	ld.w	r3,r9[0x5c]
800062a4:	20 64       	sub	r4,6
800062a6:	65 74       	ld.w	r4,r2[0x5c]
800062a8:	65 63       	ld.w	r3,r2[0x58]
800062aa:	74 65       	ld.w	r5,r10[0x18]
800062ac:	64 0d       	ld.w	sp,r2[0x0]
800062ae:	0a 00       	add	r0,r5
800062b0:	41 63       	lddsp	r3,sp[0x58]
800062b2:	74 69       	ld.w	r9,r10[0x18]
800062b4:	6f 6e       	ld.w	lr,r7[0x58]
800062b6:	20 70       	sub	r0,7
800062b8:	75 73       	ld.w	r3,r10[0x5c]
800062ba:	68 20       	ld.w	r0,r4[0x8]
800062bc:	62 75       	ld.w	r5,r1[0x1c]
800062be:	74 74       	ld.w	r4,r10[0x1c]
800062c0:	6f 6e       	ld.w	lr,r7[0x58]
800062c2:	20 72       	sub	r2,7
800062c4:	65 6c       	ld.w	r12,r2[0x58]
800062c6:	65 61       	ld.w	r1,r2[0x58]
800062c8:	73 65       	ld.w	r5,r9[0x58]
800062ca:	20 64       	sub	r4,6
800062cc:	65 74       	ld.w	r4,r2[0x5c]
800062ce:	65 63       	ld.w	r3,r2[0x58]
800062d0:	74 65       	ld.w	r5,r10[0x18]
800062d2:	64 0d       	ld.w	sp,r2[0x0]
800062d4:	0a 00       	add	r0,r5
800062d6:	00 00       	add	r0,r0
800062d8:	53 74       	stdsp	sp[0xdc],r4
800062da:	61 72       	ld.w	r2,r0[0x5c]
800062dc:	74 20       	ld.w	r0,r10[0x8]
800062de:	73 61       	ld.w	r1,r9[0x58]
800062e0:	6e 69       	ld.w	r9,r7[0x18]
800062e2:	74 69       	ld.w	r9,r10[0x18]
800062e4:	7a 69       	ld.w	r9,sp[0x18]
800062e6:	6e 67       	ld.w	r7,r7[0x18]
800062e8:	0d 0a       	ld.w	r10,r6++
800062ea:	00 00       	add	r0,r0
800062ec:	4e 6f       	lddpc	pc,80006484 <init_io+0xa0>
800062ee:	20 73       	sub	r3,7
800062f0:	68 65       	ld.w	r5,r4[0x18]
800062f2:	6c 76       	ld.w	r6,r6[0x1c]
800062f4:	65 73       	ld.w	r3,r2[0x5c]
800062f6:	2c 20       	sub	r0,-62
800062f8:	6e 6f       	ld.w	pc,r7[0x18]
800062fa:	20 64       	sub	r4,6
800062fc:	65 76       	ld.w	r6,r2[0x5c]
800062fe:	69 63       	ld.w	r3,r4[0x58]
80006300:	65 73       	ld.w	r3,r2[0x5c]
80006302:	20 6f       	sub	pc,6
80006304:	72 20       	ld.w	r0,r9[0x8]
80006306:	73 68       	ld.w	r8,r9[0x58]
80006308:	65 6c       	ld.w	r12,r2[0x58]
8000630a:	76 65       	ld.w	r5,r11[0x18]
8000630c:	73 20       	ld.w	r0,r9[0x48]
8000630e:	61 72       	ld.w	r2,r0[0x5c]
80006310:	65 20       	ld.w	r0,r2[0x48]
80006312:	70 61       	ld.w	r1,r8[0x18]
80006314:	73 74       	ld.w	r4,r9[0x5c]
80006316:	20 6c       	sub	r12,6
80006318:	69 66       	ld.w	r6,r4[0x58]
8000631a:	65 74       	ld.w	r4,r2[0x5c]
8000631c:	69 6d       	ld.w	sp,r4[0x58]
8000631e:	65 2c       	ld.w	r12,r2[0x48]
80006320:	20 63       	sub	r3,6
80006322:	68 61       	ld.w	r1,r4[0x18]
80006324:	72 67       	ld.w	r7,r9[0x18]
80006326:	69 6e       	ld.w	lr,r4[0x58]
80006328:	67 20       	ld.w	r0,r3[0x48]
8000632a:	64 65       	ld.w	r5,r2[0x18]
8000632c:	76 69       	ld.w	r9,r11[0x18]
8000632e:	63 65       	ld.w	r5,r1[0x58]
80006330:	73 0d       	ld.w	sp,r9[0x40]
80006332:	0a 00       	add	r0,r5
80006334:	53 68       	stdsp	sp[0xd8],r8
80006336:	65 6c       	ld.w	r12,r2[0x58]
80006338:	66 20       	ld.w	r0,r3[0x8]
8000633a:	63 6c       	ld.w	r12,r1[0x58]
8000633c:	65 61       	ld.w	r1,r2[0x58]
8000633e:	6e 0d       	ld.w	sp,r7[0x0]
80006340:	0a 00       	add	r0,r5
80006342:	00 00       	add	r0,r0
80006344:	44 6f       	lddsp	pc,sp[0x118]
80006346:	6f 72       	ld.w	r2,r7[0x5c]
80006348:	20 6c       	sub	r12,6
8000634a:	61 74       	ld.w	r4,r0[0x5c]
8000634c:	63 68       	ld.w	r8,r1[0x58]
8000634e:	20 6f       	sub	pc,6
80006350:	70 65       	ld.w	r5,r8[0x18]
80006352:	6e 65       	ld.w	r5,r7[0x18]
80006354:	64 2c       	ld.w	r12,r2[0x8]
80006356:	20 73       	sub	r3,7
80006358:	68 75       	ld.w	r5,r4[0x1c]
8000635a:	74 74       	ld.w	r4,r10[0x1c]
8000635c:	69 6e       	ld.w	lr,r4[0x58]
8000635e:	67 20       	ld.w	r0,r3[0x48]
80006360:	64 6f       	ld.w	pc,r2[0x18]
80006362:	77 6e       	ld.w	lr,r11[0x58]
80006364:	20 61       	sub	r1,6
80006366:	6c 6c       	ld.w	r12,r6[0x18]
80006368:	20 70       	sub	r0,7
8000636a:	72 6f       	ld.w	pc,r9[0x18]
8000636c:	63 65       	ld.w	r5,r1[0x58]
8000636e:	73 73       	ld.w	r3,r9[0x5c]
80006370:	65 73       	ld.w	r3,r2[0x5c]
80006372:	0d 0a       	ld.w	r10,r6++
80006374:	00 00       	add	r0,r0
	...

80006378 <display_text>:
};


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
80006378:	eb cd 40 80 	pushm	r7,lr
8000637c:	1a 97       	mov	r7,sp
8000637e:	20 2d       	sub	sp,8
80006380:	18 98       	mov	r8,r12
80006382:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i = 0; i<7; i++)
80006386:	30 08       	mov	r8,0
80006388:	ef 48 ff fc 	st.w	r7[-4],r8
8000638c:	c1 58       	rjmp	800063b6 <display_text+0x3e>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
8000638e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006392:	48 e8       	lddpc	r8,800063c8 <display_text+0x50>
80006394:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006398:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000639c:	f2 08 00 08 	add	r8,r9,r8
800063a0:	11 88       	ld.ub	r8,r8[0x0]
800063a2:	10 9b       	mov	r11,r8
800063a4:	fc 7c 14 00 	mov	r12,-191488
800063a8:	f0 1f 00 09 	mcall	800063cc <display_text+0x54>


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
	for (int i = 0; i<7; i++)
800063ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063b0:	2f f8       	sub	r8,-1
800063b2:	ef 48 ff fc 	st.w	r7[-4],r8
800063b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063ba:	58 68       	cp.w	r8,6
800063bc:	fe 9a ff e9 	brle	8000638e <display_text+0x16>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
	}
	
}
800063c0:	2f ed       	sub	sp,-8
800063c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800063c6:	00 00       	add	r0,r0
800063c8:	00 00       	add	r0,r0
800063ca:	00 5c       	eor	r12,r0
800063cc:	80 00       	ld.sh	r0,r0[0x0]
800063ce:	5a 84       	cp.w	r4,-24

800063d0 <chassis_error>:

void chassis_error(void);
void chassis_error(void)
{
800063d0:	eb cd 40 80 	pushm	r7,lr
800063d4:	1a 97       	mov	r7,sp
	display_text(IDX_ERROR);
800063d6:	30 4c       	mov	r12,4
800063d8:	f0 1f 00 02 	mcall	800063e0 <chassis_error+0x10>
	
	while(1); //catastrophic error, just hang TODO: allow technician interface to work here possibly
800063dc:	c0 08       	rjmp	800063dc <chassis_error+0xc>
800063de:	00 00       	add	r0,r0
800063e0:	80 00       	ld.sh	r0,r0[0x0]
800063e2:	63 78       	ld.w	r8,r1[0x5c]

800063e4 <init_io>:
	
}

void init_io(void);
void init_io(void)
{
800063e4:	eb cd 40 80 	pushm	r7,lr
800063e8:	1a 97       	mov	r7,sp
800063ea:	20 1d       	sub	sp,4
	uint32_t ioFlags;
	
	
	ioFlags = (GPIO_DIR_INPUT);
800063ec:	30 08       	mov	r8,0
800063ee:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DOOR_LATCH, ioFlags);
800063f2:	ee fb ff fc 	ld.w	r11,r7[-4]
800063f6:	33 ec       	mov	r12,62
800063f8:	f0 1f 00 2b 	mcall	800064a4 <init_io+0xc0>

	ioFlags = (GPIO_DIR_INPUT);
800063fc:	30 08       	mov	r8,0
800063fe:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_ACTION_PB, ioFlags);
80006402:	ee fb ff fc 	ld.w	r11,r7[-4]
80006406:	33 fc       	mov	r12,63
80006408:	f0 1f 00 27 	mcall	800064a4 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000640c:	30 38       	mov	r8,3
8000640e:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID0, ioFlags);
80006412:	ee fb ff fc 	ld.w	r11,r7[-4]
80006416:	33 3c       	mov	r12,51
80006418:	f0 1f 00 23 	mcall	800064a4 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000641c:	30 38       	mov	r8,3
8000641e:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID1, ioFlags);
80006422:	ee fb ff fc 	ld.w	r11,r7[-4]
80006426:	33 4c       	mov	r12,52
80006428:	f0 1f 00 1f 	mcall	800064a4 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000642c:	30 38       	mov	r8,3
8000642e:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID2, ioFlags);
80006432:	ee fb ff fc 	ld.w	r11,r7[-4]
80006436:	33 5c       	mov	r12,53
80006438:	f0 1f 00 1b 	mcall	800064a4 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000643c:	30 38       	mov	r8,3
8000643e:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID3, ioFlags);
80006442:	ee fb ff fc 	ld.w	r11,r7[-4]
80006446:	33 6c       	mov	r12,54
80006448:	f0 1f 00 17 	mcall	800064a4 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000644c:	30 38       	mov	r8,3
8000644e:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_SERIAL_ID4, ioFlags);
80006452:	ee fb ff fc 	ld.w	r11,r7[-4]
80006456:	33 7c       	mov	r12,55
80006458:	f0 1f 00 13 	mcall	800064a4 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8000645c:	30 18       	mov	r8,1
8000645e:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_DEBUG_LED, ioFlags);
80006462:	ee fb ff fc 	ld.w	r11,r7[-4]
80006466:	37 cc       	mov	r12,124
80006468:	f0 1f 00 0f 	mcall	800064a4 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000646c:	30 38       	mov	r8,3
8000646e:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_PSUPPLY_ONn, ioFlags);
80006472:	ee fb ff fc 	ld.w	r11,r7[-4]
80006476:	31 7c       	mov	r12,23
80006478:	f0 1f 00 0b 	mcall	800064a4 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000647c:	30 38       	mov	r8,3
8000647e:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_LED_OEn, ioFlags);
80006482:	ee fb ff fc 	ld.w	r11,r7[-4]
80006486:	31 6c       	mov	r12,22
80006488:	f0 1f 00 07 	mcall	800064a4 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW); //high=1x multiplier, low=4x multiplier 10apr15
8000648c:	30 18       	mov	r8,1
8000648e:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(ECLAVE_MFP, ioFlags);
80006492:	ee fb ff fc 	ld.w	r11,r7[-4]
80006496:	31 5c       	mov	r12,21
80006498:	f0 1f 00 03 	mcall	800064a4 <init_io+0xc0>

}
8000649c:	2f fd       	sub	sp,-4
8000649e:	e3 cd 80 80 	ldm	sp++,r7,pc
800064a2:	00 00       	add	r0,r0
800064a4:	80 00       	ld.sh	r0,r0[0x0]
800064a6:	48 98       	lddpc	r8,800064c8 <read_led_board_serial_ids+0x20>

800064a8 <read_led_board_serial_ids>:
};

/* One serial ID chip per board */
void read_led_board_serial_ids(void);
void read_led_board_serial_ids(void)
{
800064a8:	eb cd 40 e0 	pushm	r5-r7,lr
800064ac:	1a 97       	mov	r7,sp
800064ae:	20 2d       	sub	sp,8
	/*
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive
800064b0:	30 1c       	mov	r12,1
800064b2:	f0 1f 00 53 	mcall	800065fc <read_led_board_serial_ids+0x154>
	
	ledBrd[0].present = !OWTouchReset(0);
800064b6:	30 0c       	mov	r12,0
800064b8:	f0 1f 00 52 	mcall	80006600 <read_led_board_serial_ids+0x158>
800064bc:	18 98       	mov	r8,r12
800064be:	58 08       	cp.w	r8,0
800064c0:	5f 08       	sreq	r8
800064c2:	4d 19       	lddpc	r9,80006604 <read_led_board_serial_ids+0x15c>
800064c4:	f3 68 00 08 	st.b	r9[8],r8
	ledBrd[1].present = !OWTouchReset(1);
800064c8:	30 1c       	mov	r12,1
800064ca:	f0 1f 00 4e 	mcall	80006600 <read_led_board_serial_ids+0x158>
800064ce:	18 98       	mov	r8,r12
800064d0:	58 08       	cp.w	r8,0
800064d2:	5f 08       	sreq	r8
800064d4:	4c c9       	lddpc	r9,80006604 <read_led_board_serial_ids+0x15c>
800064d6:	f3 68 00 16 	st.b	r9[22],r8
	ledBrd[2].present = !OWTouchReset(2);
800064da:	30 2c       	mov	r12,2
800064dc:	f0 1f 00 49 	mcall	80006600 <read_led_board_serial_ids+0x158>
800064e0:	18 98       	mov	r8,r12
800064e2:	58 08       	cp.w	r8,0
800064e4:	5f 08       	sreq	r8
800064e6:	4c 89       	lddpc	r9,80006604 <read_led_board_serial_ids+0x15c>
800064e8:	f3 68 00 24 	st.b	r9[36],r8
	ledBrd[3].present = !OWTouchReset(3);
800064ec:	30 3c       	mov	r12,3
800064ee:	f0 1f 00 45 	mcall	80006600 <read_led_board_serial_ids+0x158>
800064f2:	18 98       	mov	r8,r12
800064f4:	58 08       	cp.w	r8,0
800064f6:	5f 08       	sreq	r8
800064f8:	4c 39       	lddpc	r9,80006604 <read_led_board_serial_ids+0x15c>
800064fa:	f3 68 00 32 	st.b	r9[50],r8
	ledBrd[4].present = !OWTouchReset(4);
800064fe:	30 4c       	mov	r12,4
80006500:	f0 1f 00 40 	mcall	80006600 <read_led_board_serial_ids+0x158>
80006504:	18 98       	mov	r8,r12
80006506:	58 08       	cp.w	r8,0
80006508:	5f 08       	sreq	r8
8000650a:	4b f9       	lddpc	r9,80006604 <read_led_board_serial_ids+0x15c>
8000650c:	f3 68 00 40 	st.b	r9[64],r8
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80006510:	30 08       	mov	r8,0
80006512:	ef 48 ff f8 	st.w	r7[-8],r8
80006516:	c6 a8       	rjmp	800065ea <read_led_board_serial_ids+0x142>
	{
		if (ledBrd[i].present)
80006518:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000651c:	4b aa       	lddpc	r10,80006604 <read_led_board_serial_ids+0x15c>
8000651e:	12 98       	mov	r8,r9
80006520:	a3 78       	lsl	r8,0x3
80006522:	12 18       	sub	r8,r9
80006524:	a1 78       	lsl	r8,0x1
80006526:	f4 08 00 08 	add	r8,r10,r8
8000652a:	2f 88       	sub	r8,-8
8000652c:	11 88       	ld.ub	r8,r8[0x0]
8000652e:	58 08       	cp.w	r8,0
80006530:	c5 80       	breq	800065e0 <read_led_board_serial_ids+0x138>
		{
			OWWriteByte(i, 0x33); //Read ID command
80006532:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006536:	5c 58       	castu.b	r8
80006538:	33 3b       	mov	r11,51
8000653a:	10 9c       	mov	r12,r8
8000653c:	f0 1f 00 33 	mcall	80006608 <read_led_board_serial_ids+0x160>
			
			ledBrd[i].idFamily = OWReadByte(i);
80006540:	ee f6 ff f8 	ld.w	r6,r7[-8]
80006544:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006548:	5c 58       	castu.b	r8
8000654a:	10 9c       	mov	r12,r8
8000654c:	f0 1f 00 30 	mcall	8000660c <read_led_board_serial_ids+0x164>
80006550:	18 98       	mov	r8,r12
80006552:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006556:	4a ca       	lddpc	r10,80006604 <read_led_board_serial_ids+0x15c>
80006558:	0c 98       	mov	r8,r6
8000655a:	a3 78       	lsl	r8,0x3
8000655c:	0c 18       	sub	r8,r6
8000655e:	a1 78       	lsl	r8,0x1
80006560:	10 0a       	add	r10,r8
80006562:	12 98       	mov	r8,r9
80006564:	b4 88       	st.b	r10[0x0],r8
			
			for (int j=0; j<6; j++)
80006566:	30 08       	mov	r8,0
80006568:	ef 48 ff fc 	st.w	r7[-4],r8
8000656c:	c1 f8       	rjmp	800065aa <read_led_board_serial_ids+0x102>
			{
				ledBrd[i].id[j] = OWReadByte(i);
8000656e:	ee f6 ff f8 	ld.w	r6,r7[-8]
80006572:	ee f5 ff fc 	ld.w	r5,r7[-4]
80006576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000657a:	5c 58       	castu.b	r8
8000657c:	10 9c       	mov	r12,r8
8000657e:	f0 1f 00 24 	mcall	8000660c <read_led_board_serial_ids+0x164>
80006582:	18 98       	mov	r8,r12
80006584:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006588:	49 fa       	lddpc	r10,80006604 <read_led_board_serial_ids+0x15c>
8000658a:	0c 98       	mov	r8,r6
8000658c:	a3 78       	lsl	r8,0x3
8000658e:	0c 18       	sub	r8,r6
80006590:	a1 78       	lsl	r8,0x1
80006592:	f4 08 00 08 	add	r8,r10,r8
80006596:	0a 08       	add	r8,r5
80006598:	f0 ca ff ff 	sub	r10,r8,-1
8000659c:	12 98       	mov	r8,r9
8000659e:	b4 88       	st.b	r10[0x0],r8
		{
			OWWriteByte(i, 0x33); //Read ID command
			
			ledBrd[i].idFamily = OWReadByte(i);
			
			for (int j=0; j<6; j++)
800065a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800065a4:	2f f8       	sub	r8,-1
800065a6:	ef 48 ff fc 	st.w	r7[-4],r8
800065aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800065ae:	58 58       	cp.w	r8,5
800065b0:	fe 9a ff df 	brle	8000656e <read_led_board_serial_ids+0xc6>
			{
				ledBrd[i].id[j] = OWReadByte(i);
			}
			
			ledBrd[i].idcsum = OWReadByte(i);
800065b4:	ee f6 ff f8 	ld.w	r6,r7[-8]
800065b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800065bc:	5c 58       	castu.b	r8
800065be:	10 9c       	mov	r12,r8
800065c0:	f0 1f 00 13 	mcall	8000660c <read_led_board_serial_ids+0x164>
800065c4:	18 98       	mov	r8,r12
800065c6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800065ca:	48 fa       	lddpc	r10,80006604 <read_led_board_serial_ids+0x15c>
800065cc:	0c 98       	mov	r8,r6
800065ce:	a3 78       	lsl	r8,0x3
800065d0:	0c 18       	sub	r8,r6
800065d2:	a1 78       	lsl	r8,0x1
800065d4:	f4 08 00 08 	add	r8,r10,r8
800065d8:	f0 ca ff f9 	sub	r10,r8,-7
800065dc:	12 98       	mov	r8,r9
800065de:	b4 88       	st.b	r10[0x0],r8
	ledBrd[1].present = !OWTouchReset(1);
	ledBrd[2].present = !OWTouchReset(2);
	ledBrd[3].present = !OWTouchReset(3);
	ledBrd[4].present = !OWTouchReset(4);
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
800065e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800065e4:	2f f8       	sub	r8,-1
800065e6:	ef 48 ff f8 	st.w	r7[-8],r8
800065ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800065ee:	58 48       	cp.w	r8,4
800065f0:	fe 9a ff 94 	brle	80006518 <read_led_board_serial_ids+0x70>
			}
			
			ledBrd[i].idcsum = OWReadByte(i);
		}
	}
}
800065f4:	2f ed       	sub	sp,-8
800065f6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800065fa:	00 00       	add	r0,r0
800065fc:	80 00       	ld.sh	r0,r0[0x0]
800065fe:	21 3c       	sub	r12,19
80006600:	80 00       	ld.sh	r0,r0[0x0]
80006602:	21 fc       	sub	r12,31
80006604:	00 00       	add	r0,r0
80006606:	02 f4       	st.b	--r1,r4
80006608:	80 00       	ld.sh	r0,r0[0x0]
8000660a:	31 ec       	mov	r12,30
8000660c:	80 00       	ld.sh	r0,r0[0x0]
8000660e:	32 44       	mov	r4,36

80006610 <check_led_brd_side_lifetime>:
};

/* Each side of an LED board will get different usage */
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx);
unsigned char check_led_brd_side_lifetime(unsigned char sideIdx)
{
80006610:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80006614:	1a 97       	mov	r7,sp
80006616:	20 4d       	sub	sp,16
80006618:	18 98       	mov	r8,r12
8000661a:	ef 68 ff f0 	st.b	r7[-16],r8
	 * Find the record for this board's serial ID number, and check the usage hours and see if we
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = usageIdx[0][sideIdx];
8000661e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80006622:	4d e9       	lddpc	r9,80006798 <check_led_brd_side_lifetime+0x188>
80006624:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006628:	ef 68 ff f7 	st.b	r7[-9],r8
	hours = (usageShdw[0].u[idx].hrs_thous * 1000) +
8000662c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006630:	4d ba       	lddpc	r10,8000679c <check_led_brd_side_lifetime+0x18c>
80006632:	12 98       	mov	r8,r9
80006634:	a3 68       	lsl	r8,0x2
80006636:	12 08       	add	r8,r9
80006638:	a1 78       	lsl	r8,0x1
8000663a:	f4 08 00 08 	add	r8,r10,r8
8000663e:	2f c8       	sub	r8,-4
80006640:	11 b8       	ld.ub	r8,r8[0x3]
80006642:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80006646:	5c 58       	castu.b	r8
80006648:	10 99       	mov	r9,r8
8000664a:	e0 68 03 e8 	mov	r8,1000
8000664e:	f2 08 02 4a 	mul	r10,r9,r8
		(usageShdw[0].u[idx].hrs_huns * 100) +
80006652:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006656:	4d 2b       	lddpc	r11,8000679c <check_led_brd_side_lifetime+0x18c>
80006658:	12 98       	mov	r8,r9
8000665a:	a3 68       	lsl	r8,0x2
8000665c:	12 08       	add	r8,r9
8000665e:	a1 78       	lsl	r8,0x1
80006660:	f6 08 00 08 	add	r8,r11,r8
80006664:	2f c8       	sub	r8,-4
80006666:	11 b8       	ld.ub	r8,r8[0x3]
80006668:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000666c:	5c 58       	castu.b	r8
8000666e:	f0 08 10 64 	mul	r8,r8,100
80006672:	10 0a       	add	r10,r8
		(usageShdw[0].u[idx].hrs_tens * 10) +
80006674:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006678:	4c 9b       	lddpc	r11,8000679c <check_led_brd_side_lifetime+0x18c>
8000667a:	12 98       	mov	r8,r9
8000667c:	a3 68       	lsl	r8,0x2
8000667e:	12 08       	add	r8,r9
80006680:	a1 78       	lsl	r8,0x1
80006682:	f6 08 00 08 	add	r8,r11,r8
80006686:	2f 88       	sub	r8,-8
80006688:	11 88       	ld.ub	r8,r8[0x0]
8000668a:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000668e:	5c 58       	castu.b	r8
80006690:	10 99       	mov	r9,r8
80006692:	12 98       	mov	r8,r9
80006694:	a3 68       	lsl	r8,0x2
80006696:	12 08       	add	r8,r9
80006698:	a1 78       	lsl	r8,0x1
8000669a:	10 0a       	add	r10,r8
		(usageShdw[0].u[idx].hrs_ones);
8000669c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800066a0:	4b fb       	lddpc	r11,8000679c <check_led_brd_side_lifetime+0x18c>
800066a2:	12 98       	mov	r8,r9
800066a4:	a3 68       	lsl	r8,0x2
800066a6:	12 08       	add	r8,r9
800066a8:	a1 78       	lsl	r8,0x1
800066aa:	f6 08 00 08 	add	r8,r11,r8
800066ae:	2f 88       	sub	r8,-8
800066b0:	11 88       	ld.ub	r8,r8[0x0]
800066b2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800066b6:	5c 58       	castu.b	r8
	 *	are past the 2000 hour mark. If we are, this board is considered un-usuable until it is
	 *	refurbished. 
	 */
	
	idx = usageIdx[0][sideIdx];
	hours = (usageShdw[0].u[idx].hrs_thous * 1000) +
800066b8:	f4 08 00 08 	add	r8,r10,r8
800066bc:	ef 48 ff f8 	st.w	r7[-8],r8
		

/*
 * Since we have to calculate the hours to see if the shelf is valid, finish out the calculations for the sanitizing time also. We'll need it later.
 */
	intensity = ((0.00002 * hours * hours) - (0.0699 * hours) + 92.879);
800066c0:	ee fc ff f8 	ld.w	r12,r7[-8]
800066c4:	f0 1f 00 37 	mcall	800067a0 <check_led_brd_side_lifetime+0x190>
800066c8:	e0 68 68 f1 	mov	r8,26865
800066cc:	ea 18 88 e3 	orh	r8,0x88e3
800066d0:	e0 69 f8 b5 	mov	r9,63669
800066d4:	ea 19 3e f4 	orh	r9,0x3ef4
800066d8:	f0 1f 00 33 	mcall	800067a4 <check_led_brd_side_lifetime+0x194>
800066dc:	14 98       	mov	r8,r10
800066de:	16 99       	mov	r9,r11
800066e0:	10 92       	mov	r2,r8
800066e2:	12 93       	mov	r3,r9
800066e4:	ee fc ff f8 	ld.w	r12,r7[-8]
800066e8:	f0 1f 00 2e 	mcall	800067a0 <check_led_brd_side_lifetime+0x190>
800066ec:	14 98       	mov	r8,r10
800066ee:	16 99       	mov	r9,r11
800066f0:	04 9a       	mov	r10,r2
800066f2:	06 9b       	mov	r11,r3
800066f4:	f0 1f 00 2c 	mcall	800067a4 <check_led_brd_side_lifetime+0x194>
800066f8:	14 98       	mov	r8,r10
800066fa:	16 99       	mov	r9,r11
800066fc:	10 92       	mov	r2,r8
800066fe:	12 93       	mov	r3,r9
80006700:	ee fc ff f8 	ld.w	r12,r7[-8]
80006704:	f0 1f 00 27 	mcall	800067a0 <check_led_brd_side_lifetime+0x190>
80006708:	e0 68 8a db 	mov	r8,35547
8000670c:	ea 18 65 fd 	orh	r8,0x65fd
80006710:	e0 69 e4 f7 	mov	r9,58615
80006714:	ea 19 bf b1 	orh	r9,0xbfb1
80006718:	f0 1f 00 23 	mcall	800067a4 <check_led_brd_side_lifetime+0x194>
8000671c:	14 98       	mov	r8,r10
8000671e:	16 99       	mov	r9,r11
80006720:	04 9a       	mov	r10,r2
80006722:	06 9b       	mov	r11,r3
80006724:	f0 1f 00 21 	mcall	800067a8 <check_led_brd_side_lifetime+0x198>
80006728:	14 98       	mov	r8,r10
8000672a:	16 99       	mov	r9,r11
8000672c:	10 9a       	mov	r10,r8
8000672e:	12 9b       	mov	r11,r9
80006730:	e0 68 4b c7 	mov	r8,19399
80006734:	ea 18 89 37 	orh	r8,0x8937
80006738:	e0 69 38 41 	mov	r9,14401
8000673c:	ea 19 40 57 	orh	r9,0x4057
80006740:	f0 1f 00 1a 	mcall	800067a8 <check_led_brd_side_lifetime+0x198>
80006744:	14 98       	mov	r8,r10
80006746:	16 99       	mov	r9,r11
80006748:	10 9a       	mov	r10,r8
8000674a:	12 9b       	mov	r11,r9
8000674c:	f0 1f 00 18 	mcall	800067ac <check_led_brd_side_lifetime+0x19c>
80006750:	18 98       	mov	r8,r12
80006752:	ef 48 ff fc 	st.w	r7[-4],r8
		
	ledBrdSide[sideIdx].sanitizeMinutes = (20 * 100)/intensity; //Shortest sanitize time is 20 minutes. Sanitize time increases as LED intensity drops with usage. Sanitize time is around 49 minutes when usage is at 2000 hours.
80006756:	ef 36 ff f0 	ld.ub	r6,r7[-16]
8000675a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000675e:	fc 1c 44 fa 	movh	r12,0x44fa
80006762:	f0 1f 00 14 	mcall	800067b0 <check_led_brd_side_lifetime+0x1a0>
80006766:	18 98       	mov	r8,r12
80006768:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000676c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006770:	49 1a       	lddpc	r10,800067b4 <check_led_brd_side_lifetime+0x1a4>
80006772:	0c 98       	mov	r8,r6
80006774:	a3 68       	lsl	r8,0x2
80006776:	0c 08       	add	r8,r6
80006778:	10 0a       	add	r10,r8
8000677a:	12 98       	mov	r8,r9
8000677c:	b4 88       	st.b	r10[0x0],r8
	
	if (hours < 1999)
8000677e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006782:	e0 48 07 ce 	cp.w	r8,1998
80006786:	e0 8b 00 04 	brhi	8000678e <check_led_brd_side_lifetime+0x17e>
	{
		return LED_BOARD_SIDE_WITHIN_LIFETIME_LIMIT;
8000678a:	30 18       	mov	r8,1
8000678c:	c0 28       	rjmp	80006790 <check_led_brd_side_lifetime+0x180>
	}
	else
	{
		return LED_BOARD_SIDE_PAST_LIFETIME_LIMIT;
8000678e:	30 08       	mov	r8,0
	}
}
80006790:	10 9c       	mov	r12,r8
80006792:	2f cd       	sub	sp,-16
80006794:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80006798:	00 00       	add	r0,r0
8000679a:	03 65       	ld.uh	r5,--r1
8000679c:	00 00       	add	r0,r0
8000679e:	03 84       	ld.ub	r4,r1[0x0]
800067a0:	80 00       	ld.sh	r0,r0[0x0]
800067a2:	99 cc       	st.w	r12[0x30],r12
800067a4:	80 00       	ld.sh	r0,r0[0x0]
800067a6:	95 48       	st.w	r10[0x10],r8
800067a8:	80 00       	ld.sh	r0,r0[0x0]
800067aa:	98 bc       	ld.uh	r12,r12[0x6]
800067ac:	80 00       	ld.sh	r0,r0[0x0]
800067ae:	9c 14       	ld.sh	r4,lr[0x2]
800067b0:	80 00       	ld.sh	r0,r0[0x0]
800067b2:	9a b4       	ld.uh	r4,sp[0x6]
800067b4:	00 00       	add	r0,r0
800067b6:	0b 20       	ld.uh	r0,r5++

800067b8 <check_led_brd_side_lifetimes>:

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
800067b8:	eb cd 40 c0 	pushm	r6-r7,lr
800067bc:	1a 97       	mov	r7,sp
800067be:	20 1d       	sub	sp,4
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
800067c0:	30 08       	mov	r8,0
800067c2:	ef 48 ff fc 	st.w	r7[-4],r8
800067c6:	c1 e8       	rjmp	80006802 <check_led_brd_side_lifetimes+0x4a>
	{
		ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);
800067c8:	ee f6 ff fc 	ld.w	r6,r7[-4]
800067cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067d0:	5c 58       	castu.b	r8
800067d2:	10 9c       	mov	r12,r8
800067d4:	f0 1f 00 10 	mcall	80006814 <check_led_brd_side_lifetimes+0x5c>
800067d8:	18 98       	mov	r8,r12
800067da:	10 99       	mov	r9,r8
800067dc:	30 08       	mov	r8,0
800067de:	f0 09 18 00 	cp.b	r9,r8
800067e2:	5f 09       	sreq	r9
800067e4:	48 da       	lddpc	r10,80006818 <check_led_brd_side_lifetimes+0x60>
800067e6:	0c 98       	mov	r8,r6
800067e8:	a3 68       	lsl	r8,0x2
800067ea:	0c 08       	add	r8,r6
800067ec:	f4 08 00 08 	add	r8,r10,r8
800067f0:	f0 ca ff fe 	sub	r10,r8,-2
800067f4:	12 98       	mov	r8,r9
800067f6:	b4 88       	st.b	r10[0x0],r8

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
800067f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067fc:	2f f8       	sub	r8,-1
800067fe:	ef 48 ff fc 	st.w	r7[-4],r8
80006802:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006806:	58 78       	cp.w	r8,7
80006808:	fe 9a ff e0 	brle	800067c8 <check_led_brd_side_lifetimes+0x10>
	{
		ledBrdSide[i].maxUsageReached = !check_led_brd_side_lifetime(i);
	}
}
8000680c:	2f fd       	sub	sp,-4
8000680e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006812:	00 00       	add	r0,r0
80006814:	80 00       	ld.sh	r0,r0[0x0]
80006816:	66 10       	ld.w	r0,r3[0x4]
80006818:	00 00       	add	r0,r0
8000681a:	0b 20       	ld.uh	r0,r5++

8000681c <adc_process_task>:

volatile avr32_adcifa_t *adcifa = &AVR32_ADCIFA; // ADCIFA IP registers address

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
8000681c:	eb cd 40 80 	pushm	r7,lr
80006820:	1a 97       	mov	r7,sp
80006822:	20 1d       	sub	sp,4
80006824:	18 98       	mov	r8,r12
80006826:	ef 68 ff fc 	st.b	r7[-4],r8
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
8000682a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);
8000682e:	12 98       	mov	r8,r9
80006830:	a1 78       	lsl	r8,0x1
80006832:	f0 09 00 09 	add	r9,r8,r9

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
	// Configure ADCIFA sequencer 0 for this particular shelf
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt,
80006836:	49 88       	lddpc	r8,80006894 <adc_process_task+0x78>
80006838:	10 09       	add	r9,r8
8000683a:	49 88       	lddpc	r8,80006898 <adc_process_task+0x7c>
8000683c:	70 08       	ld.w	r8,r8[0x0]
8000683e:	49 8a       	lddpc	r10,8000689c <adc_process_task+0x80>
80006840:	30 0b       	mov	r11,0
80006842:	10 9c       	mov	r12,r8
80006844:	f0 1f 00 17 	mcall	800068a0 <adc_process_task+0x84>
		&adcifa_sequence_conversion_opt_seq0_shelf[shelfIdx]);

	// Start ADCIFA sequencer 0
	adcifa_start_sequencer(adcifa, 0);
80006848:	49 48       	lddpc	r8,80006898 <adc_process_task+0x7c>
8000684a:	70 08       	ld.w	r8,r8[0x0]
8000684c:	30 0b       	mov	r11,0
8000684e:	10 9c       	mov	r12,r8
80006850:	f0 1f 00 15 	mcall	800068a4 <adc_process_task+0x88>
80006854:	c0 28       	rjmp	80006858 <adc_process_task+0x3c>
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
			return bluesense_buf[shelfIdx];
		}
	}
80006856:	d7 03       	nop
	// Get Values from sequencer 0
	while(1)
	{
		//TODO: need a timeout here and error handling in case the ADC gets stuck for some reason
		
		if (adcifa_get_values_from_sequencer(adcifa, 0, &adcifa_sequence_opt, &adc_values_seq0) == ADCIFA_STATUS_COMPLETED) 
80006858:	49 08       	lddpc	r8,80006898 <adc_process_task+0x7c>
8000685a:	70 08       	ld.w	r8,r8[0x0]
8000685c:	49 39       	lddpc	r9,800068a8 <adc_process_task+0x8c>
8000685e:	49 0a       	lddpc	r10,8000689c <adc_process_task+0x80>
80006860:	30 0b       	mov	r11,0
80006862:	10 9c       	mov	r12,r8
80006864:	f0 1f 00 12 	mcall	800068ac <adc_process_task+0x90>
80006868:	18 98       	mov	r8,r12
8000686a:	10 99       	mov	r9,r8
8000686c:	30 28       	mov	r8,2
8000686e:	f0 09 18 00 	cp.b	r9,r8
80006872:	cf 21       	brne	80006856 <adc_process_task+0x3a>
		{
			bluesense_buf[shelfIdx] = adc_values_seq0;
80006874:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80006878:	48 c8       	lddpc	r8,800068a8 <adc_process_task+0x8c>
8000687a:	90 08       	ld.sh	r8,r8[0x0]
8000687c:	48 d9       	lddpc	r9,800068b0 <adc_process_task+0x94>
8000687e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
			return bluesense_buf[shelfIdx];
80006882:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006886:	48 b8       	lddpc	r8,800068b0 <adc_process_task+0x94>
80006888:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
		}
	}
}
8000688c:	10 9c       	mov	r12,r8
8000688e:	2f fd       	sub	sp,-4
80006890:	e3 cd 80 80 	ldm	sp++,r7,pc
80006894:	00 00       	add	r0,r0
80006896:	00 9f       	mov	pc,r0
80006898:	00 00       	add	r0,r0
8000689a:	00 ac       	st.w	r0++,r12
8000689c:	00 00       	add	r0,r0
8000689e:	00 98       	mov	r8,r0
800068a0:	80 00       	ld.sh	r0,r0[0x0]
800068a2:	35 ec       	mov	r12,94
800068a4:	80 00       	ld.sh	r0,r0[0x0]
800068a6:	3a fc       	mov	r12,-81
800068a8:	00 00       	add	r0,r0
800068aa:	02 f2       	st.b	--r1,r2
800068ac:	80 00       	ld.sh	r0,r0[0x0]
800068ae:	3b 88       	mov	r8,-72
800068b0:	00 00       	add	r0,r0
800068b2:	02 e8       	st.h	--r1,r8

800068b4 <check_shelf_for_devices>:
	DEVICES_PRESENT
};

unsigned char check_shelf_for_devices(unsigned char shelfPosition);
unsigned char check_shelf_for_devices(unsigned char shelfPosition)
{
800068b4:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800068b8:	1a 97       	mov	r7,sp
800068ba:	20 dd       	sub	sp,52
800068bc:	18 98       	mov	r8,r12
800068be:	ef 68 ff cc 	st.b	r7[-52],r8
	U16 bluesense;
	
	led_shelf(shelfPosition, LED_ON); //TODO: do we finish this task fast enough to not check the door latch in here? Can't have LEDs on if the door opens
800068c2:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800068c6:	30 1b       	mov	r11,1
800068c8:	10 9c       	mov	r12,r8
800068ca:	f0 1f 00 61 	mcall	80006a4c <check_shelf_for_devices+0x198>
800068ce:	33 28       	mov	r8,50
800068d0:	ef 48 ff e4 	st.w	r7[-28],r8
800068d4:	e0 68 12 00 	mov	r8,4608
800068d8:	ea 18 00 7a 	orh	r8,0x7a
800068dc:	ef 48 ff e0 	st.w	r7[-32],r8
800068e0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800068e4:	ef 48 ff ec 	st.w	r7[-20],r8
800068e8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800068ec:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800068f0:	ee f0 ff ec 	ld.w	r0,r7[-20]
800068f4:	30 01       	mov	r1,0
800068f6:	ee f2 ff e8 	ld.w	r2,r7[-24]
800068fa:	30 03       	mov	r3,0
800068fc:	e2 02 02 4a 	mul	r10,r1,r2
80006900:	e6 00 02 48 	mul	r8,r3,r0
80006904:	10 0a       	add	r10,r8
80006906:	e0 02 06 48 	mulu.d	r8,r0,r2
8000690a:	12 0a       	add	r10,r9
8000690c:	14 99       	mov	r9,r10
8000690e:	e0 6a 03 e7 	mov	r10,999
80006912:	30 0b       	mov	r11,0
80006914:	f0 0a 00 0a 	add	r10,r8,r10
80006918:	f2 0b 00 4b 	adc	r11,r9,r11
8000691c:	e0 68 03 e8 	mov	r8,1000
80006920:	30 09       	mov	r9,0
80006922:	f0 1f 00 4c 	mcall	80006a50 <check_shelf_for_devices+0x19c>
80006926:	14 98       	mov	r8,r10
80006928:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000692a:	ef 48 ff f4 	st.w	r7[-12],r8
8000692e:	ee c8 00 30 	sub	r8,r7,48
80006932:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006936:	e1 b8 00 42 	mfsr	r8,0x108
8000693a:	10 99       	mov	r9,r8
8000693c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006940:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006942:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006946:	70 09       	ld.w	r9,r8[0x0]
80006948:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000694c:	10 09       	add	r9,r8
8000694e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006952:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006954:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006958:	30 08       	mov	r8,0
8000695a:	f3 68 00 08 	st.b	r9[8],r8
8000695e:	ee c8 00 30 	sub	r8,r7,48
80006962:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006966:	e1 b8 00 42 	mfsr	r8,0x108
8000696a:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000696e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006972:	f1 39 00 08 	ld.ub	r9,r8[8]
80006976:	30 28       	mov	r8,2
80006978:	f0 09 18 00 	cp.b	r9,r8
8000697c:	c0 31       	brne	80006982 <check_shelf_for_devices+0xce>
    return false;
8000697e:	30 08       	mov	r8,0
80006980:	c4 38       	rjmp	80006a06 <check_shelf_for_devices+0x152>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006982:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006986:	f1 39 00 08 	ld.ub	r9,r8[8]
8000698a:	30 18       	mov	r8,1
8000698c:	f0 09 18 00 	cp.b	r9,r8
80006990:	c0 31       	brne	80006996 <check_shelf_for_devices+0xe2>
    return true;
80006992:	30 18       	mov	r8,1
80006994:	c3 98       	rjmp	80006a06 <check_shelf_for_devices+0x152>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006996:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000699a:	70 09       	ld.w	r9,r8[0x0]
8000699c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800069a0:	70 18       	ld.w	r8,r8[0x4]
800069a2:	10 39       	cp.w	r9,r8
800069a4:	e0 88 00 1a 	brls	800069d8 <check_shelf_for_devices+0x124>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800069a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800069ac:	70 08       	ld.w	r8,r8[0x0]
800069ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800069b2:	10 39       	cp.w	r9,r8
800069b4:	c1 02       	brcc	800069d4 <check_shelf_for_devices+0x120>
800069b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800069ba:	70 18       	ld.w	r8,r8[0x4]
800069bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800069c0:	10 39       	cp.w	r9,r8
800069c2:	e0 88 00 09 	brls	800069d4 <check_shelf_for_devices+0x120>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800069c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800069ca:	30 18       	mov	r8,1
800069cc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800069d0:	30 18       	mov	r8,1
800069d2:	c1 a8       	rjmp	80006a06 <check_shelf_for_devices+0x152>
    }
    return false;
800069d4:	30 08       	mov	r8,0
800069d6:	c1 88       	rjmp	80006a06 <check_shelf_for_devices+0x152>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800069d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800069dc:	70 08       	ld.w	r8,r8[0x0]
800069de:	ee f9 ff fc 	ld.w	r9,r7[-4]
800069e2:	10 39       	cp.w	r9,r8
800069e4:	c0 93       	brcs	800069f6 <check_shelf_for_devices+0x142>
800069e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800069ea:	70 18       	ld.w	r8,r8[0x4]
800069ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800069f0:	10 39       	cp.w	r9,r8
800069f2:	e0 88 00 09 	brls	80006a04 <check_shelf_for_devices+0x150>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800069f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800069fa:	30 18       	mov	r8,1
800069fc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006a00:	30 18       	mov	r8,1
80006a02:	c0 28       	rjmp	80006a06 <check_shelf_for_devices+0x152>
    }
    return false;
80006a04:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006a06:	58 08       	cp.w	r8,0
80006a08:	ca b0       	breq	8000695e <check_shelf_for_devices+0xaa>
	
	cpu_delay_ms(50, 8000000);
		
	//Read bluesense for this shelf
	bluesense = 0;
80006a0a:	30 08       	mov	r8,0
80006a0c:	ef 58 ff de 	st.h	r7[-34],r8
	bluesense = adc_process_task(shelfPosition);
80006a10:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80006a14:	10 9c       	mov	r12,r8
80006a16:	f0 1f 00 10 	mcall	80006a54 <check_shelf_for_devices+0x1a0>
80006a1a:	18 98       	mov	r8,r12
80006a1c:	ef 58 ff de 	st.h	r7[-34],r8

	led_shelf(shelfPosition, LED_OFF);
80006a20:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80006a24:	30 0b       	mov	r11,0
80006a26:	10 9c       	mov	r12,r8
80006a28:	f0 1f 00 09 	mcall	80006a4c <check_shelf_for_devices+0x198>
	

	if (bluesense > 0x800)
80006a2c:	ef 09 ff de 	ld.sh	r9,r7[-34]
80006a30:	e0 68 08 00 	mov	r8,2048
80006a34:	f0 09 19 00 	cp.h	r9,r8
80006a38:	e0 88 00 04 	brls	80006a40 <check_shelf_for_devices+0x18c>
	{
		return DEVICES_PRESENT;
80006a3c:	30 18       	mov	r8,1
80006a3e:	c0 28       	rjmp	80006a42 <check_shelf_for_devices+0x18e>
	}
	else
	{
		return NO_DEVICES_PRESENT;
80006a40:	30 08       	mov	r8,0
	}
}
80006a42:	10 9c       	mov	r12,r8
80006a44:	2f 3d       	sub	sp,-52
80006a46:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80006a4a:	00 00       	add	r0,r0
80006a4c:	80 00       	ld.sh	r0,r0[0x0]
80006a4e:	60 80       	ld.w	r0,r0[0x20]
80006a50:	80 00       	ld.sh	r0,r0[0x0]
80006a52:	9c 9e       	ld.uh	lr,lr[0x2]
80006a54:	80 00       	ld.sh	r0,r0[0x0]
80006a56:	68 1c       	ld.w	r12,r4[0x4]

80006a58 <check_shelves_for_devices>:

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
80006a58:	eb cd 40 c0 	pushm	r6-r7,lr
80006a5c:	1a 97       	mov	r7,sp
80006a5e:	20 1d       	sub	sp,4
	for (int i=0; i<NUM_SHELVES; i++)
80006a60:	30 08       	mov	r8,0
80006a62:	ef 48 ff fc 	st.w	r7[-4],r8
80006a66:	c1 68       	rjmp	80006a92 <check_shelves_for_devices+0x3a>
	{
		shelf[i].devicesPresent = check_shelf_for_devices(i);
80006a68:	ee f6 ff fc 	ld.w	r6,r7[-4]
80006a6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006a70:	5c 58       	castu.b	r8
80006a72:	10 9c       	mov	r12,r8
80006a74:	f0 1f 00 0c 	mcall	80006aa4 <check_shelves_for_devices+0x4c>
80006a78:	18 98       	mov	r8,r12
80006a7a:	10 99       	mov	r9,r8
80006a7c:	48 ba       	lddpc	r10,80006aa8 <check_shelves_for_devices+0x50>
80006a7e:	ec 08 15 02 	lsl	r8,r6,0x2
80006a82:	f4 08 00 08 	add	r8,r10,r8
80006a86:	b0 b9       	st.b	r8[0x3],r9
}

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
	for (int i=0; i<NUM_SHELVES; i++)
80006a88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006a8c:	2f f8       	sub	r8,-1
80006a8e:	ef 48 ff fc 	st.w	r7[-4],r8
80006a92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006a96:	58 38       	cp.w	r8,3
80006a98:	fe 9a ff e8 	brle	80006a68 <check_shelves_for_devices+0x10>
	{
		shelf[i].devicesPresent = check_shelf_for_devices(i);
	}
}
80006a9c:	2f fd       	sub	sp,-4
80006a9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006aa2:	00 00       	add	r0,r0
80006aa4:	80 00       	ld.sh	r0,r0[0x0]
80006aa6:	68 b4       	ld.w	r4,r4[0x2c]
80006aa8:	00 00       	add	r0,r0
80006aaa:	03 3a       	ld.ub	r10,r1++

80006aac <set_shelves_active_inactive>:

unsigned char topEflag0, topEflag1, botEflag0, botEflag1;

void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
80006aac:	eb cd 40 80 	pushm	r7,lr
80006ab0:	1a 97       	mov	r7,sp
80006ab2:	20 1d       	sub	sp,4
	numActiveShelves = 0;
80006ab4:	4d 69       	lddpc	r9,80006c0c <set_shelves_active_inactive+0x160>
80006ab6:	30 08       	mov	r8,0
80006ab8:	b2 88       	st.b	r9[0x0],r8
	/*
	 * The rest of the evaluation
	 */
	
	
	for (int i=0; i<NUM_SHELVES; i++)
80006aba:	30 08       	mov	r8,0
80006abc:	ef 48 ff fc 	st.w	r7[-4],r8
80006ac0:	c0 c8       	rjmp	80006ad8 <set_shelves_active_inactive+0x2c>
	{
		shelf[i].active = SHELF_INACTIVE;
80006ac2:	ee fa ff fc 	ld.w	r10,r7[-4]
80006ac6:	4d 39       	lddpc	r9,80006c10 <set_shelves_active_inactive+0x164>
80006ac8:	30 18       	mov	r8,1
80006aca:	f2 0a 0b 28 	st.b	r9[r10<<0x2],r8
	/*
	 * The rest of the evaluation
	 */
	
	
	for (int i=0; i<NUM_SHELVES; i++)
80006ace:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006ad2:	2f f8       	sub	r8,-1
80006ad4:	ef 48 ff fc 	st.w	r7[-4],r8
80006ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006adc:	58 38       	cp.w	r8,3
80006ade:	fe 9a ff f2 	brle	80006ac2 <set_shelves_active_inactive+0x16>
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (ledBrd[0].present &&
80006ae2:	4c d8       	lddpc	r8,80006c14 <set_shelves_active_inactive+0x168>
80006ae4:	f1 38 00 08 	ld.ub	r8,r8[8]
80006ae8:	58 08       	cp.w	r8,0
80006aea:	c1 e0       	breq	80006b26 <set_shelves_active_inactive+0x7a>
		ledBrd[1].present &&
80006aec:	4c a8       	lddpc	r8,80006c14 <set_shelves_active_inactive+0x168>
80006aee:	f1 38 00 16 	ld.ub	r8,r8[22]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (ledBrd[0].present &&
80006af2:	58 08       	cp.w	r8,0
80006af4:	c1 90       	breq	80006b26 <set_shelves_active_inactive+0x7a>
		ledBrd[1].present &&
		shelf[0].devicesPresent && 
80006af6:	4c 78       	lddpc	r8,80006c10 <set_shelves_active_inactive+0x164>
80006af8:	11 b8       	ld.ub	r8,r8[0x3]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (ledBrd[0].present &&
80006afa:	58 08       	cp.w	r8,0
80006afc:	c1 50       	breq	80006b26 <set_shelves_active_inactive+0x7a>
		ledBrd[1].present &&
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
80006afe:	4c 78       	lddpc	r8,80006c18 <set_shelves_active_inactive+0x16c>
80006b00:	11 a8       	ld.ub	r8,r8[0x2]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (ledBrd[0].present &&
80006b02:	58 08       	cp.w	r8,0
80006b04:	c1 11       	brne	80006b26 <set_shelves_active_inactive+0x7a>
		ledBrd[1].present &&
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
80006b06:	4c 58       	lddpc	r8,80006c18 <set_shelves_active_inactive+0x16c>
80006b08:	11 f8       	ld.ub	r8,r8[0x7]
		shelf[i].active = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (ledBrd[0].present &&
80006b0a:	58 08       	cp.w	r8,0
80006b0c:	c0 d1       	brne	80006b26 <set_shelves_active_inactive+0x7a>
		ledBrd[1].present &&
		shelf[0].devicesPresent && 
		(!ledBrdSide[LED_BRD_0_BOT].maxUsageReached) &&
		(!ledBrdSide[LED_BRD_1_TOP].maxUsageReached) )
	{
		shelf[0].active = SHELF_ACTIVE;
80006b0e:	4c 19       	lddpc	r9,80006c10 <set_shelves_active_inactive+0x164>
80006b10:	30 08       	mov	r8,0
80006b12:	b2 88       	st.b	r9[0x0],r8
		numActiveShelves++;
80006b14:	4b e8       	lddpc	r8,80006c0c <set_shelves_active_inactive+0x160>
80006b16:	11 88       	ld.ub	r8,r8[0x0]
80006b18:	2f f8       	sub	r8,-1
80006b1a:	5c 58       	castu.b	r8
80006b1c:	4b c9       	lddpc	r9,80006c0c <set_shelves_active_inactive+0x160>
80006b1e:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 0 active\r\n");
80006b20:	4b fc       	lddpc	r12,80006c1c <set_shelves_active_inactive+0x170>
80006b22:	f0 1f 00 40 	mcall	80006c20 <set_shelves_active_inactive+0x174>
	}
	
	/* check shelf 1 */
	
	if (ledBrd[1].present &&
80006b26:	4b c8       	lddpc	r8,80006c14 <set_shelves_active_inactive+0x168>
80006b28:	f1 38 00 16 	ld.ub	r8,r8[22]
80006b2c:	58 08       	cp.w	r8,0
80006b2e:	c2 00       	breq	80006b6e <set_shelves_active_inactive+0xc2>
		ledBrd[2].present &&
80006b30:	4b 98       	lddpc	r8,80006c14 <set_shelves_active_inactive+0x168>
80006b32:	f1 38 00 24 	ld.ub	r8,r8[36]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (ledBrd[1].present &&
80006b36:	58 08       	cp.w	r8,0
80006b38:	c1 b0       	breq	80006b6e <set_shelves_active_inactive+0xc2>
		ledBrd[2].present &&
	shelf[1].devicesPresent &&
80006b3a:	4b 68       	lddpc	r8,80006c10 <set_shelves_active_inactive+0x164>
80006b3c:	11 f8       	ld.ub	r8,r8[0x7]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (ledBrd[1].present &&
80006b3e:	58 08       	cp.w	r8,0
80006b40:	c1 70       	breq	80006b6e <set_shelves_active_inactive+0xc2>
		ledBrd[2].present &&
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
80006b42:	4b 68       	lddpc	r8,80006c18 <set_shelves_active_inactive+0x16c>
80006b44:	f1 38 00 0c 	ld.ub	r8,r8[12]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (ledBrd[1].present &&
80006b48:	58 08       	cp.w	r8,0
80006b4a:	c1 21       	brne	80006b6e <set_shelves_active_inactive+0xc2>
		ledBrd[2].present &&
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
80006b4c:	4b 38       	lddpc	r8,80006c18 <set_shelves_active_inactive+0x16c>
80006b4e:	f1 38 00 11 	ld.ub	r8,r8[17]
		print_ecdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (ledBrd[1].present &&
80006b52:	58 08       	cp.w	r8,0
80006b54:	c0 d1       	brne	80006b6e <set_shelves_active_inactive+0xc2>
		ledBrd[2].present &&
	shelf[1].devicesPresent &&
	(!ledBrdSide[LED_BRD_1_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_2_TOP].maxUsageReached) )
	{
		shelf[1].active = SHELF_ACTIVE;
80006b56:	4a f9       	lddpc	r9,80006c10 <set_shelves_active_inactive+0x164>
80006b58:	30 08       	mov	r8,0
80006b5a:	b2 c8       	st.b	r9[0x4],r8
		numActiveShelves++;
80006b5c:	4a c8       	lddpc	r8,80006c0c <set_shelves_active_inactive+0x160>
80006b5e:	11 88       	ld.ub	r8,r8[0x0]
80006b60:	2f f8       	sub	r8,-1
80006b62:	5c 58       	castu.b	r8
80006b64:	4a a9       	lddpc	r9,80006c0c <set_shelves_active_inactive+0x160>
80006b66:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 1 active\r\n");
80006b68:	4a fc       	lddpc	r12,80006c24 <set_shelves_active_inactive+0x178>
80006b6a:	f0 1f 00 2e 	mcall	80006c20 <set_shelves_active_inactive+0x174>
	}
	
	/* check shelf 2 */
	
	if (ledBrd[2].present &&
80006b6e:	4a a8       	lddpc	r8,80006c14 <set_shelves_active_inactive+0x168>
80006b70:	f1 38 00 24 	ld.ub	r8,r8[36]
80006b74:	58 08       	cp.w	r8,0
80006b76:	c2 20       	breq	80006bba <set_shelves_active_inactive+0x10e>
		ledBrd[3].present &&
80006b78:	4a 78       	lddpc	r8,80006c14 <set_shelves_active_inactive+0x168>
80006b7a:	f1 38 00 32 	ld.ub	r8,r8[50]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (ledBrd[2].present &&
80006b7e:	58 08       	cp.w	r8,0
80006b80:	c1 d0       	breq	80006bba <set_shelves_active_inactive+0x10e>
		ledBrd[3].present &&
	shelf[2].devicesPresent &&
80006b82:	4a 48       	lddpc	r8,80006c10 <set_shelves_active_inactive+0x164>
80006b84:	f1 38 00 0b 	ld.ub	r8,r8[11]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (ledBrd[2].present &&
80006b88:	58 08       	cp.w	r8,0
80006b8a:	c1 80       	breq	80006bba <set_shelves_active_inactive+0x10e>
		ledBrd[3].present &&
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
80006b8c:	4a 38       	lddpc	r8,80006c18 <set_shelves_active_inactive+0x16c>
80006b8e:	f1 38 00 16 	ld.ub	r8,r8[22]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (ledBrd[2].present &&
80006b92:	58 08       	cp.w	r8,0
80006b94:	c1 31       	brne	80006bba <set_shelves_active_inactive+0x10e>
		ledBrd[3].present &&
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
80006b96:	4a 18       	lddpc	r8,80006c18 <set_shelves_active_inactive+0x16c>
80006b98:	f1 38 00 1b 	ld.ub	r8,r8[27]
		print_ecdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (ledBrd[2].present &&
80006b9c:	58 08       	cp.w	r8,0
80006b9e:	c0 e1       	brne	80006bba <set_shelves_active_inactive+0x10e>
		ledBrd[3].present &&
	shelf[2].devicesPresent &&
	(!ledBrdSide[LED_BRD_2_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_3_TOP].maxUsageReached) )
	{
		shelf[2].active = SHELF_ACTIVE;
80006ba0:	49 c9       	lddpc	r9,80006c10 <set_shelves_active_inactive+0x164>
80006ba2:	30 08       	mov	r8,0
80006ba4:	f3 68 00 08 	st.b	r9[8],r8
		numActiveShelves++;
80006ba8:	49 98       	lddpc	r8,80006c0c <set_shelves_active_inactive+0x160>
80006baa:	11 88       	ld.ub	r8,r8[0x0]
80006bac:	2f f8       	sub	r8,-1
80006bae:	5c 58       	castu.b	r8
80006bb0:	49 79       	lddpc	r9,80006c0c <set_shelves_active_inactive+0x160>
80006bb2:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 2 active\r\n");
80006bb4:	49 dc       	lddpc	r12,80006c28 <set_shelves_active_inactive+0x17c>
80006bb6:	f0 1f 00 1b 	mcall	80006c20 <set_shelves_active_inactive+0x174>
	}
	
	/* check shelf 3 */
	
	if (ledBrd[3].present &&
80006bba:	49 78       	lddpc	r8,80006c14 <set_shelves_active_inactive+0x168>
80006bbc:	f1 38 00 32 	ld.ub	r8,r8[50]
80006bc0:	58 08       	cp.w	r8,0
80006bc2:	c2 20       	breq	80006c06 <set_shelves_active_inactive+0x15a>
		ledBrd[4].present &&
80006bc4:	49 48       	lddpc	r8,80006c14 <set_shelves_active_inactive+0x168>
80006bc6:	f1 38 00 40 	ld.ub	r8,r8[64]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (ledBrd[3].present &&
80006bca:	58 08       	cp.w	r8,0
80006bcc:	c1 d0       	breq	80006c06 <set_shelves_active_inactive+0x15a>
		ledBrd[4].present &&
	shelf[3].devicesPresent &&
80006bce:	49 18       	lddpc	r8,80006c10 <set_shelves_active_inactive+0x164>
80006bd0:	f1 38 00 0f 	ld.ub	r8,r8[15]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (ledBrd[3].present &&
80006bd4:	58 08       	cp.w	r8,0
80006bd6:	c1 80       	breq	80006c06 <set_shelves_active_inactive+0x15a>
		ledBrd[4].present &&
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
80006bd8:	49 08       	lddpc	r8,80006c18 <set_shelves_active_inactive+0x16c>
80006bda:	f1 38 00 20 	ld.ub	r8,r8[32]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (ledBrd[3].present &&
80006bde:	58 08       	cp.w	r8,0
80006be0:	c1 31       	brne	80006c06 <set_shelves_active_inactive+0x15a>
		ledBrd[4].present &&
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
80006be2:	48 e8       	lddpc	r8,80006c18 <set_shelves_active_inactive+0x16c>
80006be4:	f1 38 00 25 	ld.ub	r8,r8[37]
		print_ecdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (ledBrd[3].present &&
80006be8:	58 08       	cp.w	r8,0
80006bea:	c0 e1       	brne	80006c06 <set_shelves_active_inactive+0x15a>
		ledBrd[4].present &&
	shelf[3].devicesPresent &&
	(!ledBrdSide[LED_BRD_3_BOT].maxUsageReached) &&
	(!ledBrdSide[LED_BRD_4_TOP].maxUsageReached) )
	{
		shelf[3].active = SHELF_ACTIVE;
80006bec:	48 99       	lddpc	r9,80006c10 <set_shelves_active_inactive+0x164>
80006bee:	30 08       	mov	r8,0
80006bf0:	f3 68 00 0c 	st.b	r9[12],r8
		numActiveShelves++;
80006bf4:	48 68       	lddpc	r8,80006c0c <set_shelves_active_inactive+0x160>
80006bf6:	11 88       	ld.ub	r8,r8[0x0]
80006bf8:	2f f8       	sub	r8,-1
80006bfa:	5c 58       	castu.b	r8
80006bfc:	48 49       	lddpc	r9,80006c0c <set_shelves_active_inactive+0x160>
80006bfe:	b2 88       	st.b	r9[0x0],r8
		print_ecdbg("Shelf 3 active\r\n");
80006c00:	48 bc       	lddpc	r12,80006c2c <set_shelves_active_inactive+0x180>
80006c02:	f0 1f 00 08 	mcall	80006c20 <set_shelves_active_inactive+0x174>
	}
}
80006c06:	2f fd       	sub	sp,-4
80006c08:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c0c:	00 00       	add	r0,r0
80006c0e:	0b 4a       	ld.w	r10,--r5
80006c10:	00 00       	add	r0,r0
80006c12:	03 3a       	ld.ub	r10,r1++
80006c14:	00 00       	add	r0,r0
80006c16:	02 f4       	st.b	--r1,r4
80006c18:	00 00       	add	r0,r0
80006c1a:	0b 20       	ld.uh	r0,r5++
80006c1c:	80 00       	ld.sh	r0,r0[0x0]
80006c1e:	61 d8       	ld.w	r8,r0[0x74]
80006c20:	80 00       	ld.sh	r0,r0[0x0]
80006c22:	33 a8       	mov	r8,58
80006c24:	80 00       	ld.sh	r0,r0[0x0]
80006c26:	61 ec       	ld.w	r12,r0[0x78]
80006c28:	80 00       	ld.sh	r0,r0[0x0]
80006c2a:	62 00       	ld.w	r0,r1[0x0]
80006c2c:	80 00       	ld.sh	r0,r0[0x0]
80006c2e:	62 14       	ld.w	r4,r1[0x4]

80006c30 <num_active_shelves>:

unsigned char num_active_shelves(void);
unsigned char num_active_shelves(void)
{
80006c30:	eb cd 40 80 	pushm	r7,lr
80006c34:	1a 97       	mov	r7,sp
	return numActiveShelves;
80006c36:	48 38       	lddpc	r8,80006c40 <num_active_shelves+0x10>
80006c38:	11 88       	ld.ub	r8,r8[0x0]
}
80006c3a:	10 9c       	mov	r12,r8
80006c3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c40:	00 00       	add	r0,r0
80006c42:	0b 4a       	ld.w	r10,--r5

80006c44 <init_sys_clocks>:
/*
 * Using RC8M (internal 8MHz)
 */
void init_sys_clocks(void);
void init_sys_clocks(void)
{
80006c44:	eb cd 40 80 	pushm	r7,lr
80006c48:	1a 97       	mov	r7,sp
80006c4a:	20 3d       	sub	sp,12
	scif_gclk_opt_t gclkOpt = {SCIF_GCCTRL_RC8M, 0,0};
80006c4c:	30 28       	mov	r8,2
80006c4e:	ef 48 ff f4 	st.w	r7[-12],r8
80006c52:	30 08       	mov	r8,0
80006c54:	ef 48 ff f8 	st.w	r7[-8],r8
80006c58:	30 08       	mov	r8,0
80006c5a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	// Start the 8Mhz Oscillator
	scif_start_rc8M();
80006c5e:	f0 1f 00 0a 	mcall	80006c84 <init_sys_clocks+0x40>
	// Set the main clock source as being RC8MHz.
	pm_set_mclk_source(PM_CLK_SRC_RC8M);	
80006c62:	30 5c       	mov	r12,5
80006c64:	f0 1f 00 09 	mcall	80006c88 <init_sys_clocks+0x44>


	/* put the clock out on PC19 so we can check to make sure we set it up correctly */
	//Note this code comes from ASF example AVR32 SCIF example 3
	scif_start_gclk(AVR32_SCIF_GCLK_GCLK0PIN, &gclkOpt);
80006c68:	ee c8 00 0c 	sub	r8,r7,12
80006c6c:	10 9b       	mov	r11,r8
80006c6e:	30 9c       	mov	r12,9
80006c70:	f0 1f 00 07 	mcall	80006c8c <init_sys_clocks+0x48>
	gpio_enable_module_pin(AVR32_SCIF_GCLK_0_1_PIN, AVR32_SCIF_GCLK_0_1_FUNCTION);
80006c74:	30 1b       	mov	r11,1
80006c76:	35 3c       	mov	r12,83
80006c78:	f0 1f 00 06 	mcall	80006c90 <init_sys_clocks+0x4c>
	
}
80006c7c:	2f dd       	sub	sp,-12
80006c7e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c82:	00 00       	add	r0,r0
80006c84:	80 00       	ld.sh	r0,r0[0x0]
80006c86:	4e ac       	lddpc	r12,80006e2c <calc_sanitize_time+0xcc>
80006c88:	80 00       	ld.sh	r0,r0[0x0]
80006c8a:	4e 3c       	lddpc	r12,80006e14 <calc_sanitize_time+0xb4>
80006c8c:	80 00       	ld.sh	r0,r0[0x0]
80006c8e:	4f 2c       	lddpc	r12,80006e54 <calc_sanitize_time+0xf4>
80006c90:	80 00       	ld.sh	r0,r0[0x0]
80006c92:	46 1c       	lddsp	r12,sp[0x184]

80006c94 <adc_process_init>:
 *
 *
 */
void adc_process_init(void);
void adc_process_init(void)
{
80006c94:	eb cd 40 80 	pushm	r7,lr
80006c98:	1a 97       	mov	r7,sp
		{INPUT3_ADC_PIN, INPUT3_ADC_FUNCTION},
		{INPUT4_ADC_PIN, INPUT4_ADC_FUNCTION}
	};

	// Assign and enable GPIO pins to the ADC function.
	gpio_enable_module(ADCIFA_GPIO_MAP,
80006c9a:	30 6b       	mov	r11,6
80006c9c:	48 bc       	lddpc	r12,80006cc8 <adc_process_init+0x34>
80006c9e:	f0 1f 00 0c 	mcall	80006ccc <adc_process_init+0x38>
			sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));

	// Get ADCIFA Factory Configuration
	adcifa_get_calibration_data(adcifa, &adc_config_t);
80006ca2:	48 c8       	lddpc	r8,80006cd0 <adc_process_init+0x3c>
80006ca4:	70 08       	ld.w	r8,r8[0x0]
80006ca6:	48 cb       	lddpc	r11,80006cd4 <adc_process_init+0x40>
80006ca8:	10 9c       	mov	r12,r8
80006caa:	f0 1f 00 0c 	mcall	80006cd8 <adc_process_init+0x44>

	// Configure ADCIFA core
	adcifa_configure(adcifa, &adc_config_t, 8000000);
80006cae:	48 98       	lddpc	r8,80006cd0 <adc_process_init+0x3c>
80006cb0:	70 08       	ld.w	r8,r8[0x0]
80006cb2:	e0 6a 12 00 	mov	r10,4608
80006cb6:	ea 1a 00 7a 	orh	r10,0x7a
80006cba:	48 7b       	lddpc	r11,80006cd4 <adc_process_init+0x40>
80006cbc:	10 9c       	mov	r12,r8
80006cbe:	f0 1f 00 08 	mcall	80006cdc <adc_process_init+0x48>

}
80006cc2:	e3 cd 80 80 	ldm	sp++,r7,pc
80006cc6:	00 00       	add	r0,r0
80006cc8:	80 00       	ld.sh	r0,r0[0x0]
80006cca:	a6 20       	st.h	r3[0x4],r0
80006ccc:	80 00       	ld.sh	r0,r0[0x0]
80006cce:	45 ac       	lddsp	r12,sp[0x168]
80006cd0:	00 00       	add	r0,r0
80006cd2:	00 ac       	st.w	r0++,r12
80006cd4:	00 00       	add	r0,r0
80006cd6:	00 84       	andn	r4,r0
80006cd8:	80 00       	ld.sh	r0,r0[0x0]
80006cda:	33 f4       	mov	r4,63
80006cdc:	80 00       	ld.sh	r0,r0[0x0]
80006cde:	34 88       	mov	r8,72

80006ce0 <twi_init>:
 *
 *
 */
static void twi_init(void);
static void twi_init(void)
{
80006ce0:	eb cd 40 80 	pushm	r7,lr
80006ce4:	1a 97       	mov	r7,sp
80006ce6:	20 8d       	sub	sp,32
	const gpio_map_t PCA9952_TWI_GPIO_MAP = {
		{PCA9952_TWI_SCL_PIN, PCA9952_TWI_SCL_FUNCTION},
		{PCA9952_TWI_SDA_PIN, PCA9952_TWI_SDA_FUNCTION}
	};
80006ce8:	49 a9       	lddpc	r9,80006d50 <twi_init+0x70>
80006cea:	ee c8 00 10 	sub	r8,r7,16
80006cee:	20 08       	sub	r8,0
80006cf0:	20 09       	sub	r9,0
80006cf2:	72 0a       	ld.w	r10,r9[0x0]
80006cf4:	91 0a       	st.w	r8[0x0],r10
80006cf6:	72 1a       	ld.w	r10,r9[0x4]
80006cf8:	91 1a       	st.w	r8[0x4],r10
80006cfa:	72 2a       	ld.w	r10,r9[0x8]
80006cfc:	91 2a       	st.w	r8[0x8],r10
80006cfe:	72 39       	ld.w	r9,r9[0xc]
80006d00:	91 39       	st.w	r8[0xc],r9
	twi_options_t PCA9952_TWI_OPTIONS = { //7apr15 make this *not* a const so we can change it and rerun twi_master_init() if necessary
		.pba_hz = FPBA_HZ,
		.speed = PCA9952_TWI_MASTER_SPEED,
		.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS, //7apr15
		.smbus        = false,
	};
80006d02:	49 59       	lddpc	r9,80006d54 <twi_init+0x74>
80006d04:	ee c8 00 20 	sub	r8,r7,32
80006d08:	20 08       	sub	r8,0
80006d0a:	20 09       	sub	r9,0
80006d0c:	72 0a       	ld.w	r10,r9[0x0]
80006d0e:	91 0a       	st.w	r8[0x0],r10
80006d10:	72 1a       	ld.w	r10,r9[0x4]
80006d12:	91 1a       	st.w	r8[0x4],r10
80006d14:	72 2a       	ld.w	r10,r9[0x8]
80006d16:	91 2a       	st.w	r8[0x8],r10
80006d18:	72 39       	ld.w	r9,r9[0xc]
80006d1a:	91 39       	st.w	r8[0xc],r9

	// Assign I/Os to TWI.
	gpio_enable_module(PCA9952_TWI_GPIO_MAP,
80006d1c:	ee c8 00 10 	sub	r8,r7,16
80006d20:	30 2b       	mov	r11,2
80006d22:	10 9c       	mov	r12,r8
80006d24:	f0 1f 00 0d 	mcall	80006d58 <twi_init+0x78>
	sizeof(PCA9952_TWI_GPIO_MAP) / sizeof(PCA9952_TWI_GPIO_MAP[0]));
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
80006d28:	ee c8 00 20 	sub	r8,r7,32
80006d2c:	10 9b       	mov	r11,r8
80006d2e:	fe 7c 38 00 	mov	r12,-51200
80006d32:	f0 1f 00 0b 	mcall	80006d5c <twi_init+0x7c>
	
	
	PCA9952_TWI_OPTIONS.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
80006d36:	36 18       	mov	r8,97
80006d38:	ef 48 ff e8 	st.w	r7[-24],r8
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
80006d3c:	ee c8 00 20 	sub	r8,r7,32
80006d40:	10 9b       	mov	r11,r8
80006d42:	fe 7c 38 00 	mov	r12,-51200
80006d46:	f0 1f 00 06 	mcall	80006d5c <twi_init+0x7c>
	
	
}
80006d4a:	2f 8d       	sub	sp,-32
80006d4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006d50:	80 00       	ld.sh	r0,r0[0x0]
80006d52:	a6 00       	st.h	r3[0x0],r0
80006d54:	80 00       	ld.sh	r0,r0[0x0]
80006d56:	a6 10       	st.h	r3[0x2],r0
80006d58:	80 00       	ld.sh	r0,r0[0x0]
80006d5a:	45 ac       	lddsp	r12,sp[0x168]
80006d5c:	80 00       	ld.sh	r0,r0[0x0]
80006d5e:	51 f0       	stdsp	sp[0x7c],r0

80006d60 <calc_sanitize_time>:
	STATE_SHUTDOWN_PROCESSES
};

unsigned long calc_sanitize_time(unsigned char shelfIdx);
unsigned long calc_sanitize_time(unsigned char shelfIdx)
{
80006d60:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80006d64:	1a 97       	mov	r7,sp
80006d66:	20 5d       	sub	sp,20
80006d68:	18 98       	mov	r8,r12
80006d6a:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char uSideMinutes, lSideMinutes, minutes, boardIdx, sideIdx;
	
	boardIdx = shelf[shelfIdx].tLedIdx;							//top board in the shelf
80006d6e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80006d72:	4c 09       	lddpc	r9,80006e70 <calc_sanitize_time+0x110>
80006d74:	a3 68       	lsl	r8,0x2
80006d76:	f2 08 00 08 	add	r8,r9,r8
80006d7a:	11 98       	ld.ub	r8,r8[0x1]
80006d7c:	ef 68 ff f6 	st.b	r7[-10],r8
	sideIdx = ledBrd[boardIdx].lSideIdx;						//lower side of the top board
80006d80:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80006d84:	4b cc       	lddpc	r12,80006e74 <calc_sanitize_time+0x114>
80006d86:	12 98       	mov	r8,r9
80006d88:	a3 78       	lsl	r8,0x3
80006d8a:	12 18       	sub	r8,r9
80006d8c:	a1 78       	lsl	r8,0x1
80006d8e:	f8 08 00 08 	add	r8,r12,r8
80006d92:	2f 58       	sub	r8,-11
80006d94:	11 88       	ld.ub	r8,r8[0x0]
80006d96:	ef 68 ff f7 	st.b	r7[-9],r8
	lSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
80006d9a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006d9e:	4b 7c       	lddpc	r12,80006e78 <calc_sanitize_time+0x118>
80006da0:	12 98       	mov	r8,r9
80006da2:	a3 68       	lsl	r8,0x2
80006da4:	12 08       	add	r8,r9
80006da6:	f8 08 00 08 	add	r8,r12,r8
80006daa:	11 88       	ld.ub	r8,r8[0x0]
80006dac:	ef 68 ff f4 	st.b	r7[-12],r8
	

	boardIdx = shelf[shelfIdx].bLedIdx;							//bottom board in the shelf					
80006db0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80006db4:	4a f9       	lddpc	r9,80006e70 <calc_sanitize_time+0x110>
80006db6:	a3 68       	lsl	r8,0x2
80006db8:	f2 08 00 08 	add	r8,r9,r8
80006dbc:	11 a8       	ld.ub	r8,r8[0x2]
80006dbe:	ef 68 ff f6 	st.b	r7[-10],r8
	sideIdx = ledBrd[boardIdx].uSideIdx;						//upper side of the bottom board
80006dc2:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80006dc6:	4a cc       	lddpc	r12,80006e74 <calc_sanitize_time+0x114>
80006dc8:	12 98       	mov	r8,r9
80006dca:	a3 78       	lsl	r8,0x3
80006dcc:	12 18       	sub	r8,r9
80006dce:	a1 78       	lsl	r8,0x1
80006dd0:	f8 08 00 08 	add	r8,r12,r8
80006dd4:	2f 68       	sub	r8,-10
80006dd6:	11 88       	ld.ub	r8,r8[0x0]
80006dd8:	ef 68 ff f7 	st.b	r7[-9],r8
	uSideMinutes = ledBrdSide[sideIdx].sanitizeMinutes;
80006ddc:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006de0:	4a 6c       	lddpc	r12,80006e78 <calc_sanitize_time+0x118>
80006de2:	12 98       	mov	r8,r9
80006de4:	a3 68       	lsl	r8,0x2
80006de6:	12 08       	add	r8,r9
80006de8:	f8 08 00 08 	add	r8,r12,r8
80006dec:	11 88       	ld.ub	r8,r8[0x0]
80006dee:	ef 68 ff f3 	st.b	r7[-13],r8

	minutes = (uSideMinutes >= lSideMinutes) ? uSideMinutes : lSideMinutes; //choose the sanitize time for the more worn-out leds
80006df2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006df6:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80006dfa:	ef 3c ff f3 	ld.ub	r12,r7[-13]
80006dfe:	f0 0c 18 00 	cp.b	r12,r8
80006e02:	f2 08 17 20 	movhs	r8,r9
80006e06:	ef 68 ff f5 	st.b	r7[-11],r8
	
	return (minutes * 60 * cpu_ms_2_cy(1000, 80000000));
80006e0a:	ef 36 ff f5 	ld.ub	r6,r7[-11]
80006e0e:	e0 68 03 e8 	mov	r8,1000
80006e12:	ef 48 ff fc 	st.w	r7[-4],r8
80006e16:	e0 68 b4 00 	mov	r8,46080
80006e1a:	ea 18 04 c4 	orh	r8,0x4c4
80006e1e:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80006e22:	ee f2 ff fc 	ld.w	r2,r7[-4]
80006e26:	30 03       	mov	r3,0
80006e28:	ee fa ff f8 	ld.w	r10,r7[-8]
80006e2c:	30 0b       	mov	r11,0
80006e2e:	e6 0a 02 4c 	mul	r12,r3,r10
80006e32:	f6 02 02 48 	mul	r8,r11,r2
80006e36:	10 0c       	add	r12,r8
80006e38:	e4 0a 06 48 	mulu.d	r8,r2,r10
80006e3c:	12 0c       	add	r12,r9
80006e3e:	18 99       	mov	r9,r12
80006e40:	e0 6a 03 e7 	mov	r10,999
80006e44:	30 0b       	mov	r11,0
80006e46:	f0 0a 00 0a 	add	r10,r8,r10
80006e4a:	f2 0b 00 4b 	adc	r11,r9,r11
80006e4e:	e0 68 03 e8 	mov	r8,1000
80006e52:	30 09       	mov	r9,0
80006e54:	f0 1f 00 0a 	mcall	80006e7c <calc_sanitize_time+0x11c>
80006e58:	14 98       	mov	r8,r10
80006e5a:	16 99       	mov	r9,r11
80006e5c:	ec 08 02 49 	mul	r9,r6,r8
80006e60:	12 98       	mov	r8,r9
80006e62:	a5 68       	lsl	r8,0x4
80006e64:	12 18       	sub	r8,r9
80006e66:	a3 68       	lsl	r8,0x2
	
}
80006e68:	10 9c       	mov	r12,r8
80006e6a:	2f bd       	sub	sp,-20
80006e6c:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80006e70:	00 00       	add	r0,r0
80006e72:	03 3a       	ld.ub	r10,r1++
80006e74:	00 00       	add	r0,r0
80006e76:	02 f4       	st.b	--r1,r4
80006e78:	00 00       	add	r0,r0
80006e7a:	0b 20       	ld.uh	r0,r5++
80006e7c:	80 00       	ld.sh	r0,r0[0x0]
80006e7e:	9c 9e       	ld.uh	lr,lr[0x2]

80006e80 <door_latch_open_kill_all_shelves>:


void door_latch_open_kill_all_shelves(void);
void door_latch_open_kill_all_shelves(void)
{
80006e80:	eb cd 40 80 	pushm	r7,lr
80006e84:	1a 97       	mov	r7,sp
	led_shelf(0, LED_OFF);
80006e86:	30 0b       	mov	r11,0
80006e88:	30 0c       	mov	r12,0
80006e8a:	f0 1f 00 09 	mcall	80006eac <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(1, LED_OFF);
80006e8e:	30 0b       	mov	r11,0
80006e90:	30 1c       	mov	r12,1
80006e92:	f0 1f 00 07 	mcall	80006eac <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(2, LED_OFF);
80006e96:	30 0b       	mov	r11,0
80006e98:	30 2c       	mov	r12,2
80006e9a:	f0 1f 00 05 	mcall	80006eac <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(3, LED_OFF);
80006e9e:	30 0b       	mov	r11,0
80006ea0:	30 3c       	mov	r12,3
80006ea2:	f0 1f 00 03 	mcall	80006eac <door_latch_open_kill_all_shelves+0x2c>
}
80006ea6:	e3 cd 80 80 	ldm	sp++,r7,pc
80006eaa:	00 00       	add	r0,r0
80006eac:	80 00       	ld.sh	r0,r0[0x0]
80006eae:	60 80       	ld.w	r0,r0[0x20]

80006eb0 <usage_idx>:
#endif
;

unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn);
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn)
{
80006eb0:	eb cd 40 80 	pushm	r7,lr
80006eb4:	1a 97       	mov	r7,sp
80006eb6:	20 4d       	sub	sp,16
80006eb8:	18 99       	mov	r9,r12
80006eba:	ef 4b ff f4 	st.w	r7[-12],r11
80006ebe:	14 98       	mov	r8,r10
80006ec0:	ef 69 ff f8 	st.b	r7[-8],r9
80006ec4:	ef 68 ff f0 	st.b	r7[-16],r8
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80006ec8:	30 08       	mov	r8,0
80006eca:	ef 68 ff ff 	st.b	r7[-1],r8
80006ece:	c4 08       	rjmp	80006f4e <usage_idx+0x9e>
	{
		if ((strstr((char*)idPtr, (char*)(usageShdw[sel].u[i].id))) && (usageShdw[sel].u[i].top_botn == top_botn))
80006ed0:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80006ed4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006ed8:	12 98       	mov	r8,r9
80006eda:	a3 68       	lsl	r8,0x2
80006edc:	12 08       	add	r8,r9
80006ede:	a1 78       	lsl	r8,0x1
80006ee0:	14 99       	mov	r9,r10
80006ee2:	a5 79       	lsl	r9,0x5
80006ee4:	14 19       	sub	r9,r10
80006ee6:	f2 0a 15 05 	lsl	r10,r9,0x5
80006eea:	12 1a       	sub	r10,r9
80006eec:	f0 0a 00 09 	add	r9,r8,r10
80006ef0:	49 e8       	lddpc	r8,80006f68 <usage_idx+0xb8>
80006ef2:	f2 08 00 08 	add	r8,r9,r8
80006ef6:	10 9b       	mov	r11,r8
80006ef8:	ee fc ff f4 	ld.w	r12,r7[-12]
80006efc:	f0 1f 00 1c 	mcall	80006f6c <usage_idx+0xbc>
80006f00:	18 98       	mov	r8,r12
80006f02:	58 08       	cp.w	r8,0
80006f04:	c2 00       	breq	80006f44 <usage_idx+0x94>
80006f06:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80006f0a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006f0e:	49 7b       	lddpc	r11,80006f68 <usage_idx+0xb8>
80006f10:	12 98       	mov	r8,r9
80006f12:	a3 68       	lsl	r8,0x2
80006f14:	12 08       	add	r8,r9
80006f16:	a1 78       	lsl	r8,0x1
80006f18:	14 99       	mov	r9,r10
80006f1a:	a5 79       	lsl	r9,0x5
80006f1c:	14 19       	sub	r9,r10
80006f1e:	f2 0a 15 05 	lsl	r10,r9,0x5
80006f22:	12 1a       	sub	r10,r9
80006f24:	14 08       	add	r8,r10
80006f26:	f6 08 00 08 	add	r8,r11,r8
80006f2a:	2f c8       	sub	r8,-4
80006f2c:	11 a8       	ld.ub	r8,r8[0x2]
80006f2e:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80006f32:	5c 58       	castu.b	r8
80006f34:	10 99       	mov	r9,r8
80006f36:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80006f3a:	10 39       	cp.w	r9,r8
80006f3c:	c0 41       	brne	80006f44 <usage_idx+0x94>
		{
			return (i); //Found a match!
80006f3e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006f42:	c0 f8       	rjmp	80006f60 <usage_idx+0xb0>
;

unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn);
unsigned char usage_idx(unsigned char sel, unsigned char * idPtr, unsigned char top_botn)
{
	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80006f44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006f48:	2f f8       	sub	r8,-1
80006f4a:	ef 68 ff ff 	st.b	r7[-1],r8
80006f4e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006f52:	35 f8       	mov	r8,95
80006f54:	f0 09 18 00 	cp.b	r9,r8
80006f58:	fe 98 ff bc 	brls	80006ed0 <usage_idx+0x20>
		{
			return (i); //Found a match!
		}
	}
	
	return NO_LED_BOARD_PRESENT;
80006f5c:	e0 68 00 ff 	mov	r8,255

}
80006f60:	10 9c       	mov	r12,r8
80006f62:	2f cd       	sub	sp,-16
80006f64:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f68:	00 00       	add	r0,r0
80006f6a:	03 84       	ld.ub	r4,r1[0x0]
80006f6c:	80 00       	ld.sh	r0,r0[0x0]
80006f6e:	a0 78       	st.h	r0[0xe],r8

80006f70 <load_usage_indeces>:

void load_usage_indeces(unsigned char sel)
{
80006f70:	eb cd 40 c0 	pushm	r6-r7,lr
80006f74:	1a 97       	mov	r7,sp
80006f76:	20 1d       	sub	sp,4
80006f78:	18 98       	mov	r8,r12
80006f7a:	ef 68 ff fc 	st.b	r7[-4],r8
	usageIdx[sel][0] = usage_idx(sel, &ledBrd[0].id[0], BOTTOM);
80006f7e:	ef 36 ff fc 	ld.ub	r6,r7[-4]
80006f82:	4c e8       	lddpc	r8,800070b8 <load_usage_indeces+0x148>
80006f84:	f0 c9 ff ff 	sub	r9,r8,-1
80006f88:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006f8c:	30 0a       	mov	r10,0
80006f8e:	12 9b       	mov	r11,r9
80006f90:	10 9c       	mov	r12,r8
80006f92:	f0 1f 00 4b 	mcall	800070bc <load_usage_indeces+0x14c>
80006f96:	18 98       	mov	r8,r12
80006f98:	4c a9       	lddpc	r9,800070c0 <load_usage_indeces+0x150>
80006f9a:	f2 06 0b 38 	st.b	r9[r6<<0x3],r8
	usageIdx[sel][1] = usage_idx(sel, &ledBrd[1].id[0], TOP);
80006f9e:	ef 36 ff fc 	ld.ub	r6,r7[-4]
80006fa2:	4c 68       	lddpc	r8,800070b8 <load_usage_indeces+0x148>
80006fa4:	f0 c9 ff f1 	sub	r9,r8,-15
80006fa8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006fac:	30 1a       	mov	r10,1
80006fae:	12 9b       	mov	r11,r9
80006fb0:	10 9c       	mov	r12,r8
80006fb2:	f0 1f 00 43 	mcall	800070bc <load_usage_indeces+0x14c>
80006fb6:	18 98       	mov	r8,r12
80006fb8:	10 99       	mov	r9,r8
80006fba:	4c 2a       	lddpc	r10,800070c0 <load_usage_indeces+0x150>
80006fbc:	ec 08 15 03 	lsl	r8,r6,0x3
80006fc0:	f4 08 00 08 	add	r8,r10,r8
80006fc4:	b0 99       	st.b	r8[0x1],r9
	usageIdx[sel][2] = usage_idx(sel, &ledBrd[1].id[0], BOTTOM);
80006fc6:	ef 36 ff fc 	ld.ub	r6,r7[-4]
80006fca:	4b c8       	lddpc	r8,800070b8 <load_usage_indeces+0x148>
80006fcc:	f0 c9 ff f1 	sub	r9,r8,-15
80006fd0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006fd4:	30 0a       	mov	r10,0
80006fd6:	12 9b       	mov	r11,r9
80006fd8:	10 9c       	mov	r12,r8
80006fda:	f0 1f 00 39 	mcall	800070bc <load_usage_indeces+0x14c>
80006fde:	18 98       	mov	r8,r12
80006fe0:	4b 89       	lddpc	r9,800070c0 <load_usage_indeces+0x150>
80006fe2:	ec 0a 15 02 	lsl	r10,r6,0x2
80006fe6:	2f fa       	sub	r10,-1
80006fe8:	f2 0a 0b 18 	st.b	r9[r10<<0x1],r8
	usageIdx[sel][3] = usage_idx(sel, &ledBrd[2].id[0], TOP);
80006fec:	ef 36 ff fc 	ld.ub	r6,r7[-4]
80006ff0:	4b 28       	lddpc	r8,800070b8 <load_usage_indeces+0x148>
80006ff2:	f0 c9 ff e3 	sub	r9,r8,-29
80006ff6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006ffa:	30 1a       	mov	r10,1
80006ffc:	12 9b       	mov	r11,r9
80006ffe:	10 9c       	mov	r12,r8
80007000:	f0 1f 00 2f 	mcall	800070bc <load_usage_indeces+0x14c>
80007004:	18 98       	mov	r8,r12
80007006:	10 99       	mov	r9,r8
80007008:	4a ea       	lddpc	r10,800070c0 <load_usage_indeces+0x150>
8000700a:	ec 08 15 03 	lsl	r8,r6,0x3
8000700e:	f4 08 00 08 	add	r8,r10,r8
80007012:	b0 b9       	st.b	r8[0x3],r9
	usageIdx[sel][4] = usage_idx(sel, &ledBrd[2].id[0], BOTTOM);
80007014:	ef 36 ff fc 	ld.ub	r6,r7[-4]
80007018:	4a 88       	lddpc	r8,800070b8 <load_usage_indeces+0x148>
8000701a:	f0 c9 ff e3 	sub	r9,r8,-29
8000701e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007022:	30 0a       	mov	r10,0
80007024:	12 9b       	mov	r11,r9
80007026:	10 9c       	mov	r12,r8
80007028:	f0 1f 00 25 	mcall	800070bc <load_usage_indeces+0x14c>
8000702c:	18 98       	mov	r8,r12
8000702e:	4a 59       	lddpc	r9,800070c0 <load_usage_indeces+0x150>
80007030:	ec 0a 15 01 	lsl	r10,r6,0x1
80007034:	2f fa       	sub	r10,-1
80007036:	f2 0a 0b 28 	st.b	r9[r10<<0x2],r8
	usageIdx[sel][5] = usage_idx(sel, &ledBrd[3].id[0], TOP);
8000703a:	ef 36 ff fc 	ld.ub	r6,r7[-4]
8000703e:	49 f8       	lddpc	r8,800070b8 <load_usage_indeces+0x148>
80007040:	f0 c9 ff d5 	sub	r9,r8,-43
80007044:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007048:	30 1a       	mov	r10,1
8000704a:	12 9b       	mov	r11,r9
8000704c:	10 9c       	mov	r12,r8
8000704e:	f0 1f 00 1c 	mcall	800070bc <load_usage_indeces+0x14c>
80007052:	18 98       	mov	r8,r12
80007054:	10 99       	mov	r9,r8
80007056:	49 ba       	lddpc	r10,800070c0 <load_usage_indeces+0x150>
80007058:	ec 08 15 03 	lsl	r8,r6,0x3
8000705c:	f4 08 00 08 	add	r8,r10,r8
80007060:	b0 d9       	st.b	r8[0x5],r9
	usageIdx[sel][6] = usage_idx(sel, &ledBrd[3].id[0], BOTTOM);
80007062:	ef 36 ff fc 	ld.ub	r6,r7[-4]
80007066:	49 58       	lddpc	r8,800070b8 <load_usage_indeces+0x148>
80007068:	f0 c9 ff d5 	sub	r9,r8,-43
8000706c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007070:	30 0a       	mov	r10,0
80007072:	12 9b       	mov	r11,r9
80007074:	10 9c       	mov	r12,r8
80007076:	f0 1f 00 12 	mcall	800070bc <load_usage_indeces+0x14c>
8000707a:	18 98       	mov	r8,r12
8000707c:	10 99       	mov	r9,r8
8000707e:	49 1a       	lddpc	r10,800070c0 <load_usage_indeces+0x150>
80007080:	ec 08 15 03 	lsl	r8,r6,0x3
80007084:	f4 08 00 08 	add	r8,r10,r8
80007088:	b0 e9       	st.b	r8[0x6],r9
	usageIdx[sel][7] = usage_idx(sel, &ledBrd[4].id[0], TOP);
8000708a:	ef 36 ff fc 	ld.ub	r6,r7[-4]
8000708e:	48 b8       	lddpc	r8,800070b8 <load_usage_indeces+0x148>
80007090:	f0 c9 ff c7 	sub	r9,r8,-57
80007094:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007098:	30 1a       	mov	r10,1
8000709a:	12 9b       	mov	r11,r9
8000709c:	10 9c       	mov	r12,r8
8000709e:	f0 1f 00 08 	mcall	800070bc <load_usage_indeces+0x14c>
800070a2:	18 98       	mov	r8,r12
800070a4:	10 99       	mov	r9,r8
800070a6:	48 7a       	lddpc	r10,800070c0 <load_usage_indeces+0x150>
800070a8:	ec 08 15 03 	lsl	r8,r6,0x3
800070ac:	f4 08 00 08 	add	r8,r10,r8
800070b0:	b0 f9       	st.b	r8[0x7],r9
}
800070b2:	2f fd       	sub	sp,-4
800070b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800070b8:	00 00       	add	r0,r0
800070ba:	02 f4       	st.b	--r1,r4
800070bc:	80 00       	ld.sh	r0,r0[0x0]
800070be:	6e b0       	ld.w	r0,r7[0x2c]
800070c0:	00 00       	add	r0,r0
800070c2:	03 65       	ld.uh	r5,--r1

800070c4 <read_usage_struct>:

enum{CHECKSUM_INVALID, CHECKSUM_VALID};

unsigned char read_usage_struct(unsigned char sel)
{
800070c4:	eb cd 40 80 	pushm	r7,lr
800070c8:	1a 97       	mov	r7,sp
800070ca:	20 2d       	sub	sp,8
800070cc:	18 98       	mov	r8,r12
800070ce:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char tmpCsum;
	
	if (sel == 0)
800070d2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800070d6:	30 08       	mov	r8,0
800070d8:	f0 09 18 00 	cp.b	r9,r8
800070dc:	c0 81       	brne	800070ec <read_usage_struct+0x28>
	{
		memcpy(&usageShdw[0],serialIdAndUsageFlashZero, sizeof(usageShdw[0]));
800070de:	e0 6a 03 c1 	mov	r10,961
800070e2:	49 9b       	lddpc	r11,80007144 <read_usage_struct+0x80>
800070e4:	49 9c       	lddpc	r12,80007148 <read_usage_struct+0x84>
800070e6:	f0 1f 00 1a 	mcall	8000714c <read_usage_struct+0x88>
800070ea:	c0 a8       	rjmp	800070fe <read_usage_struct+0x3a>
	}
	else
	{
		memcpy(&usageShdw[1],serialIdAndUsageFlashOne, sizeof(usageShdw[1]));
800070ec:	49 78       	lddpc	r8,80007148 <read_usage_struct+0x84>
800070ee:	f0 c8 fc 3f 	sub	r8,r8,-961
800070f2:	e0 6a 03 c1 	mov	r10,961
800070f6:	49 7b       	lddpc	r11,80007150 <read_usage_struct+0x8c>
800070f8:	10 9c       	mov	r12,r8
800070fa:	f0 1f 00 15 	mcall	8000714c <read_usage_struct+0x88>
	}
	
	tmpCsum = calc_usage_csum(sel);
800070fe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007102:	10 9c       	mov	r12,r8
80007104:	f0 1f 00 14 	mcall	80007154 <read_usage_struct+0x90>
80007108:	18 98       	mov	r8,r12
8000710a:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (tmpCsum == usageShdw[sel].csum)
8000710e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007112:	48 ea       	lddpc	r10,80007148 <read_usage_struct+0x84>
80007114:	12 98       	mov	r8,r9
80007116:	a5 78       	lsl	r8,0x5
80007118:	12 18       	sub	r8,r9
8000711a:	f0 09 15 05 	lsl	r9,r8,0x5
8000711e:	10 19       	sub	r9,r8
80007120:	f4 09 00 08 	add	r8,r10,r9
80007124:	f0 c8 fc 40 	sub	r8,r8,-960
80007128:	11 88       	ld.ub	r8,r8[0x0]
8000712a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000712e:	f0 09 18 00 	cp.b	r9,r8
80007132:	c0 31       	brne	80007138 <read_usage_struct+0x74>
	{
		return CHECKSUM_VALID;
80007134:	30 18       	mov	r8,1
80007136:	c0 28       	rjmp	8000713a <read_usage_struct+0x76>
	}
	else
	{
		return CHECKSUM_INVALID;
80007138:	30 08       	mov	r8,0
	}
}
8000713a:	10 9c       	mov	r12,r8
8000713c:	2f ed       	sub	sp,-8
8000713e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007142:	00 00       	add	r0,r0
80007144:	80 07       	ld.sh	r7,r0[0x0]
80007146:	f0 00 00 00 	add	r0,r8,r0
8000714a:	03 84       	ld.ub	r4,r1[0x0]
8000714c:	80 00       	ld.sh	r0,r0[0x0]
8000714e:	9f 02       	st.w	pc[0x0],r2
80007150:	80 07       	ld.sh	r7,r0[0x0]
80007152:	f8 00       	*unknown*
80007154:	80 00       	ld.sh	r0,r0[0x0]
80007156:	74 44       	ld.w	r4,r10[0x10]

80007158 <test_flash>:

enum {SUCCESS, ERROR};

unsigned char test_flash(unsigned char sel)
{
80007158:	eb cd 40 80 	pushm	r7,lr
8000715c:	1a 97       	mov	r7,sp
8000715e:	20 8d       	sub	sp,32
80007160:	18 98       	mov	r8,r12
80007162:	ef 68 ff e0 	st.b	r7[-32],r8
	volatile void* memPtr;
	unsigned char pattern[4] = {0xFF, 0x00, 0xAA, 0x55}, ubyte;
80007166:	4b 28       	lddpc	r8,8000722c <test_flash+0xd4>
80007168:	70 08       	ld.w	r8,r8[0x0]
8000716a:	ef 48 ff e4 	st.w	r7[-28],r8
	unsigned char *ubPtr;
	unsigned long memSize;
	
	memSize = sizeof(usageShdw[sel]);
8000716e:	e0 68 03 c1 	mov	r8,961
80007172:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (sel == 0)
80007176:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8000717a:	30 08       	mov	r8,0
8000717c:	f0 09 18 00 	cp.b	r9,r8
80007180:	c0 51       	brne	8000718a <test_flash+0x32>
	{
		memPtr = &serialIdAndUsageFlashZero;
80007182:	4a c8       	lddpc	r8,80007230 <test_flash+0xd8>
80007184:	ef 48 ff e8 	st.w	r7[-24],r8
80007188:	c0 48       	rjmp	80007190 <test_flash+0x38>
	}
	else
	{
		memPtr = &serialIdAndUsageFlashOne;
8000718a:	4a b8       	lddpc	r8,80007234 <test_flash+0xdc>
8000718c:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
80007190:	30 08       	mov	r8,0
80007192:	ef 68 ff fb 	st.b	r7[-5],r8
80007196:	c3 e8       	rjmp	80007212 <test_flash+0xba>
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
80007198:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000719c:	ee 08 00 08 	add	r8,r7,r8
800071a0:	f1 38 ff e4 	ld.ub	r8,r8[-28]
800071a4:	30 19       	mov	r9,1
800071a6:	ee fa ff f4 	ld.w	r10,r7[-12]
800071aa:	10 9b       	mov	r11,r8
800071ac:	ee fc ff e8 	ld.w	r12,r7[-24]
800071b0:	f0 1f 00 22 	mcall	80007238 <test_flash+0xe0>
	
		ubPtr = (unsigned char*) memPtr;
800071b4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800071b8:	ef 48 ff f0 	st.w	r7[-16],r8
		for (unsigned long j=0; j<memSize; j++)
800071bc:	30 08       	mov	r8,0
800071be:	ef 48 ff fc 	st.w	r7[-4],r8
800071c2:	c1 d8       	rjmp	800071fc <test_flash+0xa4>
		{
			ubyte = (*ubPtr);
800071c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800071c8:	11 88       	ld.ub	r8,r8[0x0]
800071ca:	ef 68 ff ef 	st.b	r7[-17],r8
			if (ubyte != pattern[i])
800071ce:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800071d2:	ee 08 00 08 	add	r8,r7,r8
800071d6:	f1 38 ff e4 	ld.ub	r8,r8[-28]
800071da:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800071de:	f0 09 18 00 	cp.b	r9,r8
800071e2:	c0 30       	breq	800071e8 <test_flash+0x90>
			{
				return ERROR;
800071e4:	30 18       	mov	r8,1
800071e6:	c1 e8       	rjmp	80007222 <test_flash+0xca>
			}
			ubPtr++;
800071e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800071ec:	2f f8       	sub	r8,-1
800071ee:	ef 48 ff f0 	st.w	r7[-16],r8
	for (unsigned char i=0; i<4; i++) //4 patterns to test
	{
		flashc_memset(memPtr, pattern[i], 8, memSize, true);
	
		ubPtr = (unsigned char*) memPtr;
		for (unsigned long j=0; j<memSize; j++)
800071f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800071f6:	2f f8       	sub	r8,-1
800071f8:	ef 48 ff fc 	st.w	r7[-4],r8
800071fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007200:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007204:	10 39       	cp.w	r9,r8
80007206:	cd f3       	brcs	800071c4 <test_flash+0x6c>
	else
	{
		memPtr = &serialIdAndUsageFlashOne;
	}

	for (unsigned char i=0; i<4; i++) //4 patterns to test
80007208:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000720c:	2f f8       	sub	r8,-1
8000720e:	ef 68 ff fb 	st.b	r7[-5],r8
80007212:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007216:	30 38       	mov	r8,3
80007218:	f0 09 18 00 	cp.b	r9,r8
8000721c:	fe 98 ff be 	brls	80007198 <test_flash+0x40>
			}
			ubPtr++;
		}
	}
	
	return SUCCESS;
80007220:	30 08       	mov	r8,0
}
80007222:	10 9c       	mov	r12,r8
80007224:	2f 8d       	sub	sp,-32
80007226:	e3 cd 80 80 	ldm	sp++,r7,pc
8000722a:	00 00       	add	r0,r0
8000722c:	80 00       	ld.sh	r0,r0[0x0]
8000722e:	a5 fc       	*unknown*
80007230:	80 07       	ld.sh	r7,r0[0x0]
80007232:	f0 00       	*unknown*
80007234:	80 07       	ld.sh	r7,r0[0x0]
80007236:	f8 00       	*unknown*
80007238:	80 00       	ld.sh	r0,r0[0x0]
8000723a:	3e d4       	mov	r4,-19

8000723c <find_first_open_usage_slot>:

#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(unsigned char sel);
unsigned char find_first_open_usage_slot(unsigned char sel)
{
8000723c:	eb cd 40 80 	pushm	r7,lr
80007240:	1a 97       	mov	r7,sp
80007242:	20 2d       	sub	sp,8
80007244:	18 98       	mov	r8,r12
80007246:	ef 68 ff f8 	st.b	r7[-8],r8
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
8000724a:	30 08       	mov	r8,0
8000724c:	ef 48 ff fc 	st.w	r7[-4],r8
80007250:	c2 28       	rjmp	80007294 <find_first_open_usage_slot+0x58>
	{
		if (!usageShdw[sel].u[i].slotFilled)
80007252:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007256:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000725a:	49 5b       	lddpc	r11,800072ac <find_first_open_usage_slot+0x70>
8000725c:	12 98       	mov	r8,r9
8000725e:	a3 68       	lsl	r8,0x2
80007260:	12 08       	add	r8,r9
80007262:	a1 78       	lsl	r8,0x1
80007264:	14 99       	mov	r9,r10
80007266:	a5 79       	lsl	r9,0x5
80007268:	14 19       	sub	r9,r10
8000726a:	f2 0a 15 05 	lsl	r10,r9,0x5
8000726e:	12 1a       	sub	r10,r9
80007270:	14 08       	add	r8,r10
80007272:	f6 08 00 08 	add	r8,r11,r8
80007276:	2f c8       	sub	r8,-4
80007278:	11 a8       	ld.ub	r8,r8[0x2]
8000727a:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
8000727e:	5c 58       	castu.b	r8
80007280:	c0 51       	brne	8000728a <find_first_open_usage_slot+0x4e>
		{
			return i;
80007282:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007286:	5c 58       	castu.b	r8
80007288:	c0 e8       	rjmp	800072a4 <find_first_open_usage_slot+0x68>
#define USAGE_FULL 0xFF

unsigned char find_first_open_usage_slot(unsigned char sel);
unsigned char find_first_open_usage_slot(unsigned char sel)
{
	for (unsigned int i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
8000728a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000728e:	2f f8       	sub	r8,-1
80007290:	ef 48 ff fc 	st.w	r7[-4],r8
80007294:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007298:	e0 48 00 5f 	cp.w	r8,95
8000729c:	fe 98 ff db 	brls	80007252 <find_first_open_usage_slot+0x16>
		{
			return i;
		}
	}
	
	return USAGE_FULL; //Error, no open slots
800072a0:	e0 68 00 ff 	mov	r8,255
}
800072a4:	10 9c       	mov	r12,r8
800072a6:	2f ed       	sub	sp,-8
800072a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800072ac:	00 00       	add	r0,r0
800072ae:	03 84       	ld.ub	r4,r1[0x0]

800072b0 <add_new_led_board_sides_to_usage>:

void add_new_led_board_sides_to_usage(unsigned char sel)
{
800072b0:	eb cd 40 80 	pushm	r7,lr
800072b4:	1a 97       	mov	r7,sp
800072b6:	20 3d       	sub	sp,12
800072b8:	18 98       	mov	r8,r12
800072ba:	ef 68 ff f4 	st.b	r7[-12],r8
	unsigned char firstOpenSlot, slotAssignment, brdIdx, top_botn;
	
	//NOTE that load_usage_indeces() must have been run already for this function to work. 
	// i.e., usageIdx[][] must be populated.
	
	firstOpenSlot = find_first_open_usage_slot(sel);
800072be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800072c2:	10 9c       	mov	r12,r8
800072c4:	f0 1f 00 5a 	mcall	8000742c <add_new_led_board_sides_to_usage+0x17c>
800072c8:	18 98       	mov	r8,r12
800072ca:	ef 68 ff fb 	st.b	r7[-5],r8
	
	slotAssignment = firstOpenSlot;
800072ce:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800072d2:	ef 68 ff fc 	st.b	r7[-4],r8
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
800072d6:	30 08       	mov	r8,0
800072d8:	ef 68 ff ff 	st.b	r7[-1],r8
800072dc:	c9 d8       	rjmp	80007416 <add_new_led_board_sides_to_usage+0x166>
	{
		brdIdx = ledBrdSide[i].boardIdx;
800072de:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800072e2:	4d 4a       	lddpc	r10,80007430 <add_new_led_board_sides_to_usage+0x180>
800072e4:	12 98       	mov	r8,r9
800072e6:	a3 68       	lsl	r8,0x2
800072e8:	12 08       	add	r8,r9
800072ea:	f4 08 00 08 	add	r8,r10,r8
800072ee:	2f c8       	sub	r8,-4
800072f0:	11 88       	ld.ub	r8,r8[0x0]
800072f2:	ef 68 ff fd 	st.b	r7[-3],r8
		
		top_botn = (i%2) ? TOP : BOTTOM; //odd sides are top, even sides are bottom
800072f6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800072fa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800072fe:	ef 68 ff fe 	st.b	r7[-2],r8
		
		if ((ledBrd[brdIdx].present) && (usageIdx[sel][i] == NO_LED_BOARD_PRESENT)) //TODO: do I need the NO_LED_BOARD_PRESENT check? this should always be open at this point
80007302:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80007306:	4c ca       	lddpc	r10,80007434 <add_new_led_board_sides_to_usage+0x184>
80007308:	12 98       	mov	r8,r9
8000730a:	a3 78       	lsl	r8,0x3
8000730c:	12 18       	sub	r8,r9
8000730e:	a1 78       	lsl	r8,0x1
80007310:	f4 08 00 08 	add	r8,r10,r8
80007314:	2f 88       	sub	r8,-8
80007316:	11 88       	ld.ub	r8,r8[0x0]
80007318:	58 08       	cp.w	r8,0
8000731a:	c7 90       	breq	8000740c <add_new_led_board_sides_to_usage+0x15c>
8000731c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007320:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007324:	4c 59       	lddpc	r9,80007438 <add_new_led_board_sides_to_usage+0x188>
80007326:	a3 7a       	lsl	r10,0x3
80007328:	f4 08 00 08 	add	r8,r10,r8
8000732c:	f2 08 00 08 	add	r8,r9,r8
80007330:	11 89       	ld.ub	r9,r8[0x0]
80007332:	3f f8       	mov	r8,-1
80007334:	f0 09 18 00 	cp.b	r9,r8
80007338:	c6 a1       	brne	8000740c <add_new_led_board_sides_to_usage+0x15c>
		{
			strncpy((char*)&usageShdw[sel].u[slotAssignment].id[0], (char*)&ledBrd[brdIdx].id[0],6);
8000733a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000733e:	12 98       	mov	r8,r9
80007340:	a3 78       	lsl	r8,0x3
80007342:	12 18       	sub	r8,r9
80007344:	a1 78       	lsl	r8,0x1
80007346:	4b c9       	lddpc	r9,80007434 <add_new_led_board_sides_to_usage+0x184>
80007348:	12 08       	add	r8,r9
8000734a:	f0 cb ff ff 	sub	r11,r8,-1
8000734e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007352:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007356:	12 98       	mov	r8,r9
80007358:	a3 68       	lsl	r8,0x2
8000735a:	12 08       	add	r8,r9
8000735c:	a1 78       	lsl	r8,0x1
8000735e:	14 99       	mov	r9,r10
80007360:	a5 79       	lsl	r9,0x5
80007362:	14 19       	sub	r9,r10
80007364:	f2 0a 15 05 	lsl	r10,r9,0x5
80007368:	12 1a       	sub	r10,r9
8000736a:	f0 0a 00 09 	add	r9,r8,r10
8000736e:	4b 48       	lddpc	r8,8000743c <add_new_led_board_sides_to_usage+0x18c>
80007370:	f2 08 00 08 	add	r8,r9,r8
80007374:	30 6a       	mov	r10,6
80007376:	10 9c       	mov	r12,r8
80007378:	f0 1f 00 32 	mcall	80007440 <add_new_led_board_sides_to_usage+0x190>
			
			usageShdw[sel].u[slotAssignment].top_botn = top_botn;
8000737c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80007380:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007384:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007388:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000738c:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007390:	4a bc       	lddpc	r12,8000743c <add_new_led_board_sides_to_usage+0x18c>
80007392:	12 98       	mov	r8,r9
80007394:	a3 68       	lsl	r8,0x2
80007396:	12 08       	add	r8,r9
80007398:	a1 78       	lsl	r8,0x1
8000739a:	14 99       	mov	r9,r10
8000739c:	a5 79       	lsl	r9,0x5
8000739e:	14 19       	sub	r9,r10
800073a0:	f2 0a 15 05 	lsl	r10,r9,0x5
800073a4:	12 1a       	sub	r10,r9
800073a6:	14 08       	add	r8,r10
800073a8:	f8 08 00 08 	add	r8,r12,r8
800073ac:	f0 c9 ff fc 	sub	r9,r8,-4
800073b0:	13 a8       	ld.ub	r8,r9[0x2]
800073b2:	f1 db d0 c1 	bfins	r8,r11,0x6,0x1
800073b6:	b2 a8       	st.b	r9[0x2],r8
			
			usageShdw[sel].u[slotAssignment].slotFilled = 1;
800073b8:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800073bc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800073c0:	49 fb       	lddpc	r11,8000743c <add_new_led_board_sides_to_usage+0x18c>
800073c2:	12 98       	mov	r8,r9
800073c4:	a3 68       	lsl	r8,0x2
800073c6:	12 08       	add	r8,r9
800073c8:	a1 78       	lsl	r8,0x1
800073ca:	14 99       	mov	r9,r10
800073cc:	a5 79       	lsl	r9,0x5
800073ce:	14 19       	sub	r9,r10
800073d0:	f2 0a 15 05 	lsl	r10,r9,0x5
800073d4:	12 1a       	sub	r10,r9
800073d6:	14 08       	add	r8,r10
800073d8:	f6 08 00 08 	add	r8,r11,r8
800073dc:	f0 c9 ff fc 	sub	r9,r8,-4
800073e0:	13 a8       	ld.ub	r8,r9[0x2]
800073e2:	30 1a       	mov	r10,1
800073e4:	f1 da d0 a1 	bfins	r8,r10,0x5,0x1
800073e8:	b2 a8       	st.b	r9[0x2],r8

			usageIdx[sel][i] = slotAssignment++;
800073ea:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800073ee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800073f2:	49 29       	lddpc	r9,80007438 <add_new_led_board_sides_to_usage+0x188>
800073f4:	a3 7a       	lsl	r10,0x3
800073f6:	f4 08 00 08 	add	r8,r10,r8
800073fa:	10 09       	add	r9,r8
800073fc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007400:	b2 88       	st.b	r9[0x0],r8
80007402:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007406:	2f f8       	sub	r8,-1
80007408:	ef 68 ff fc 	st.b	r7[-4],r8
	
	firstOpenSlot = find_first_open_usage_slot(sel);
	
	slotAssignment = firstOpenSlot;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
8000740c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007410:	2f f8       	sub	r8,-1
80007412:	ef 68 ff ff 	st.b	r7[-1],r8
80007416:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000741a:	30 78       	mov	r8,7
8000741c:	f0 09 18 00 	cp.b	r9,r8
80007420:	fe 98 ff 5f 	brls	800072de <add_new_led_board_sides_to_usage+0x2e>
			usageShdw[sel].u[slotAssignment].slotFilled = 1;

			usageIdx[sel][i] = slotAssignment++;
		}
	}
}
80007424:	2f dd       	sub	sp,-12
80007426:	e3 cd 80 80 	ldm	sp++,r7,pc
8000742a:	00 00       	add	r0,r0
8000742c:	80 00       	ld.sh	r0,r0[0x0]
8000742e:	72 3c       	ld.w	r12,r9[0xc]
80007430:	00 00       	add	r0,r0
80007432:	0b 20       	ld.uh	r0,r5++
80007434:	00 00       	add	r0,r0
80007436:	02 f4       	st.b	--r1,r4
80007438:	00 00       	add	r0,r0
8000743a:	03 65       	ld.uh	r5,--r1
8000743c:	00 00       	add	r0,r0
8000743e:	03 84       	ld.ub	r4,r1[0x0]
80007440:	80 00       	ld.sh	r0,r0[0x0]
80007442:	a0 58       	st.h	r0[0xa],r8

80007444 <calc_usage_csum>:

unsigned char calc_usage_csum(unsigned char sel)
{
80007444:	eb cd 40 80 	pushm	r7,lr
80007448:	1a 97       	mov	r7,sp
8000744a:	20 2d       	sub	sp,8
8000744c:	18 98       	mov	r8,r12
8000744e:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char csum = 0;
80007452:	30 08       	mov	r8,0
80007454:	ef 68 ff fe 	st.b	r7[-2],r8
	
/*
 * Lots of ways to checksum this struct, don't over-think it
 */

	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
80007458:	30 08       	mov	r8,0
8000745a:	ef 68 ff ff 	st.b	r7[-1],r8
8000745e:	ca f9       	rjmp	800077bc <calc_usage_csum+0x378>
	{
		csum += usageShdw[sel].u[i].hrs_thous;
80007460:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007464:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007468:	fe fb 03 70 	ld.w	r11,pc[880]
8000746c:	12 98       	mov	r8,r9
8000746e:	a3 68       	lsl	r8,0x2
80007470:	12 08       	add	r8,r9
80007472:	a1 78       	lsl	r8,0x1
80007474:	14 99       	mov	r9,r10
80007476:	a5 79       	lsl	r9,0x5
80007478:	14 19       	sub	r9,r10
8000747a:	f2 0a 15 05 	lsl	r10,r9,0x5
8000747e:	12 1a       	sub	r10,r9
80007480:	14 08       	add	r8,r10
80007482:	f6 08 00 08 	add	r8,r11,r8
80007486:	2f c8       	sub	r8,-4
80007488:	11 b8       	ld.ub	r8,r8[0x3]
8000748a:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000748e:	5c 58       	castu.b	r8
80007490:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007494:	f2 08 00 08 	add	r8,r9,r8
80007498:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_huns;
8000749c:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800074a0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800074a4:	fe fb 03 34 	ld.w	r11,pc[820]
800074a8:	12 98       	mov	r8,r9
800074aa:	a3 68       	lsl	r8,0x2
800074ac:	12 08       	add	r8,r9
800074ae:	a1 78       	lsl	r8,0x1
800074b0:	14 99       	mov	r9,r10
800074b2:	a5 79       	lsl	r9,0x5
800074b4:	14 19       	sub	r9,r10
800074b6:	f2 0a 15 05 	lsl	r10,r9,0x5
800074ba:	12 1a       	sub	r10,r9
800074bc:	14 08       	add	r8,r10
800074be:	f6 08 00 08 	add	r8,r11,r8
800074c2:	2f c8       	sub	r8,-4
800074c4:	11 b8       	ld.ub	r8,r8[0x3]
800074c6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800074ca:	5c 58       	castu.b	r8
800074cc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800074d0:	f2 08 00 08 	add	r8,r9,r8
800074d4:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_tens;
800074d8:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800074dc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800074e0:	fe fb 02 f8 	ld.w	r11,pc[760]
800074e4:	12 98       	mov	r8,r9
800074e6:	a3 68       	lsl	r8,0x2
800074e8:	12 08       	add	r8,r9
800074ea:	a1 78       	lsl	r8,0x1
800074ec:	14 99       	mov	r9,r10
800074ee:	a5 79       	lsl	r9,0x5
800074f0:	14 19       	sub	r9,r10
800074f2:	f2 0a 15 05 	lsl	r10,r9,0x5
800074f6:	12 1a       	sub	r10,r9
800074f8:	14 08       	add	r8,r10
800074fa:	f6 08 00 08 	add	r8,r11,r8
800074fe:	2f 88       	sub	r8,-8
80007500:	11 88       	ld.ub	r8,r8[0x0]
80007502:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007506:	5c 58       	castu.b	r8
80007508:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000750c:	f2 08 00 08 	add	r8,r9,r8
80007510:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].hrs_ones;
80007514:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007518:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000751c:	fe fb 02 bc 	ld.w	r11,pc[700]
80007520:	12 98       	mov	r8,r9
80007522:	a3 68       	lsl	r8,0x2
80007524:	12 08       	add	r8,r9
80007526:	a1 78       	lsl	r8,0x1
80007528:	14 99       	mov	r9,r10
8000752a:	a5 79       	lsl	r9,0x5
8000752c:	14 19       	sub	r9,r10
8000752e:	f2 0a 15 05 	lsl	r10,r9,0x5
80007532:	12 1a       	sub	r10,r9
80007534:	14 08       	add	r8,r10
80007536:	f6 08 00 08 	add	r8,r11,r8
8000753a:	2f 88       	sub	r8,-8
8000753c:	11 88       	ld.ub	r8,r8[0x0]
8000753e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007542:	5c 58       	castu.b	r8
80007544:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007548:	f2 08 00 08 	add	r8,r9,r8
8000754c:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].min_tens;
80007550:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007554:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007558:	fe fb 02 80 	ld.w	r11,pc[640]
8000755c:	12 98       	mov	r8,r9
8000755e:	a3 68       	lsl	r8,0x2
80007560:	12 08       	add	r8,r9
80007562:	a1 78       	lsl	r8,0x1
80007564:	14 99       	mov	r9,r10
80007566:	a5 79       	lsl	r9,0x5
80007568:	14 19       	sub	r9,r10
8000756a:	f2 0a 15 05 	lsl	r10,r9,0x5
8000756e:	12 1a       	sub	r10,r9
80007570:	14 08       	add	r8,r10
80007572:	f6 08 00 08 	add	r8,r11,r8
80007576:	2f 88       	sub	r8,-8
80007578:	11 98       	ld.ub	r8,r8[0x1]
8000757a:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000757e:	5c 58       	castu.b	r8
80007580:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007584:	f2 08 00 08 	add	r8,r9,r8
80007588:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].min_ones;
8000758c:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007590:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007594:	fe fb 02 44 	ld.w	r11,pc[580]
80007598:	12 98       	mov	r8,r9
8000759a:	a3 68       	lsl	r8,0x2
8000759c:	12 08       	add	r8,r9
8000759e:	a1 78       	lsl	r8,0x1
800075a0:	14 99       	mov	r9,r10
800075a2:	a5 79       	lsl	r9,0x5
800075a4:	14 19       	sub	r9,r10
800075a6:	f2 0a 15 05 	lsl	r10,r9,0x5
800075aa:	12 1a       	sub	r10,r9
800075ac:	14 08       	add	r8,r10
800075ae:	f6 08 00 08 	add	r8,r11,r8
800075b2:	2f 88       	sub	r8,-8
800075b4:	11 98       	ld.ub	r8,r8[0x1]
800075b6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800075ba:	5c 58       	castu.b	r8
800075bc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800075c0:	f2 08 00 08 	add	r8,r9,r8
800075c4:	ef 68 ff fe 	st.b	r7[-2],r8
		
		csum += usageShdw[sel].u[i].id[0];
800075c8:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800075cc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800075d0:	fe fb 02 08 	ld.w	r11,pc[520]
800075d4:	12 98       	mov	r8,r9
800075d6:	a3 68       	lsl	r8,0x2
800075d8:	12 08       	add	r8,r9
800075da:	a1 78       	lsl	r8,0x1
800075dc:	14 99       	mov	r9,r10
800075de:	a5 79       	lsl	r9,0x5
800075e0:	14 19       	sub	r9,r10
800075e2:	f2 0a 15 05 	lsl	r10,r9,0x5
800075e6:	12 1a       	sub	r10,r9
800075e8:	14 08       	add	r8,r10
800075ea:	f6 08 00 08 	add	r8,r11,r8
800075ee:	11 88       	ld.ub	r8,r8[0x0]
800075f0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800075f4:	f2 08 00 08 	add	r8,r9,r8
800075f8:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[1];
800075fc:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007600:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007604:	4f 5b       	lddpc	r11,800077d8 <calc_usage_csum+0x394>
80007606:	12 98       	mov	r8,r9
80007608:	a3 68       	lsl	r8,0x2
8000760a:	12 08       	add	r8,r9
8000760c:	a1 78       	lsl	r8,0x1
8000760e:	14 99       	mov	r9,r10
80007610:	a5 79       	lsl	r9,0x5
80007612:	14 19       	sub	r9,r10
80007614:	f2 0a 15 05 	lsl	r10,r9,0x5
80007618:	12 1a       	sub	r10,r9
8000761a:	14 08       	add	r8,r10
8000761c:	f6 08 00 08 	add	r8,r11,r8
80007620:	2f f8       	sub	r8,-1
80007622:	11 88       	ld.ub	r8,r8[0x0]
80007624:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007628:	f2 08 00 08 	add	r8,r9,r8
8000762c:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[2];
80007630:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007634:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80007638:	4e 8b       	lddpc	r11,800077d8 <calc_usage_csum+0x394>
8000763a:	14 98       	mov	r8,r10
8000763c:	a3 68       	lsl	r8,0x2
8000763e:	14 08       	add	r8,r10
80007640:	2f f8       	sub	r8,-1
80007642:	f0 0a 15 01 	lsl	r10,r8,0x1
80007646:	12 98       	mov	r8,r9
80007648:	a5 78       	lsl	r8,0x5
8000764a:	12 18       	sub	r8,r9
8000764c:	f0 09 15 05 	lsl	r9,r8,0x5
80007650:	10 19       	sub	r9,r8
80007652:	f4 09 00 08 	add	r8,r10,r9
80007656:	f6 08 00 08 	add	r8,r11,r8
8000765a:	11 88       	ld.ub	r8,r8[0x0]
8000765c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007660:	f2 08 00 08 	add	r8,r9,r8
80007664:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[3];
80007668:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8000766c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007670:	4d ab       	lddpc	r11,800077d8 <calc_usage_csum+0x394>
80007672:	12 98       	mov	r8,r9
80007674:	a3 68       	lsl	r8,0x2
80007676:	12 08       	add	r8,r9
80007678:	a1 78       	lsl	r8,0x1
8000767a:	14 99       	mov	r9,r10
8000767c:	a5 79       	lsl	r9,0x5
8000767e:	14 19       	sub	r9,r10
80007680:	f2 0a 15 05 	lsl	r10,r9,0x5
80007684:	12 1a       	sub	r10,r9
80007686:	14 08       	add	r8,r10
80007688:	f6 08 00 08 	add	r8,r11,r8
8000768c:	2f d8       	sub	r8,-3
8000768e:	11 88       	ld.ub	r8,r8[0x0]
80007690:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007694:	f2 08 00 08 	add	r8,r9,r8
80007698:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[4];
8000769c:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800076a0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800076a4:	4c db       	lddpc	r11,800077d8 <calc_usage_csum+0x394>
800076a6:	12 98       	mov	r8,r9
800076a8:	a3 68       	lsl	r8,0x2
800076aa:	12 08       	add	r8,r9
800076ac:	a1 78       	lsl	r8,0x1
800076ae:	14 99       	mov	r9,r10
800076b0:	a5 79       	lsl	r9,0x5
800076b2:	14 19       	sub	r9,r10
800076b4:	f2 0a 15 05 	lsl	r10,r9,0x5
800076b8:	12 1a       	sub	r10,r9
800076ba:	14 08       	add	r8,r10
800076bc:	f6 08 00 08 	add	r8,r11,r8
800076c0:	2f c8       	sub	r8,-4
800076c2:	11 88       	ld.ub	r8,r8[0x0]
800076c4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800076c8:	f2 08 00 08 	add	r8,r9,r8
800076cc:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].id[5];
800076d0:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800076d4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800076d8:	4c 0b       	lddpc	r11,800077d8 <calc_usage_csum+0x394>
800076da:	12 98       	mov	r8,r9
800076dc:	a3 68       	lsl	r8,0x2
800076de:	12 08       	add	r8,r9
800076e0:	a1 78       	lsl	r8,0x1
800076e2:	14 99       	mov	r9,r10
800076e4:	a5 79       	lsl	r9,0x5
800076e6:	14 19       	sub	r9,r10
800076e8:	f2 0a 15 05 	lsl	r10,r9,0x5
800076ec:	12 1a       	sub	r10,r9
800076ee:	14 08       	add	r8,r10
800076f0:	f6 08 00 08 	add	r8,r11,r8
800076f4:	2f b8       	sub	r8,-5
800076f6:	11 88       	ld.ub	r8,r8[0x0]
800076f8:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800076fc:	f2 08 00 08 	add	r8,r9,r8
80007700:	ef 68 ff fe 	st.b	r7[-2],r8
		
		csum += usageShdw[sel].u[i].maxUsageReached;
80007704:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007708:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000770c:	4b 3b       	lddpc	r11,800077d8 <calc_usage_csum+0x394>
8000770e:	12 98       	mov	r8,r9
80007710:	a3 68       	lsl	r8,0x2
80007712:	12 08       	add	r8,r9
80007714:	a1 78       	lsl	r8,0x1
80007716:	14 99       	mov	r9,r10
80007718:	a5 79       	lsl	r9,0x5
8000771a:	14 19       	sub	r9,r10
8000771c:	f2 0a 15 05 	lsl	r10,r9,0x5
80007720:	12 1a       	sub	r10,r9
80007722:	14 08       	add	r8,r10
80007724:	f6 08 00 08 	add	r8,r11,r8
80007728:	2f c8       	sub	r8,-4
8000772a:	11 a8       	ld.ub	r8,r8[0x2]
8000772c:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80007730:	5c 58       	castu.b	r8
80007732:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007736:	f2 08 00 08 	add	r8,r9,r8
8000773a:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].top_botn;
8000773e:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80007742:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007746:	4a 5b       	lddpc	r11,800077d8 <calc_usage_csum+0x394>
80007748:	12 98       	mov	r8,r9
8000774a:	a3 68       	lsl	r8,0x2
8000774c:	12 08       	add	r8,r9
8000774e:	a1 78       	lsl	r8,0x1
80007750:	14 99       	mov	r9,r10
80007752:	a5 79       	lsl	r9,0x5
80007754:	14 19       	sub	r9,r10
80007756:	f2 0a 15 05 	lsl	r10,r9,0x5
8000775a:	12 1a       	sub	r10,r9
8000775c:	14 08       	add	r8,r10
8000775e:	f6 08 00 08 	add	r8,r11,r8
80007762:	2f c8       	sub	r8,-4
80007764:	11 a8       	ld.ub	r8,r8[0x2]
80007766:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
8000776a:	5c 58       	castu.b	r8
8000776c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007770:	f2 08 00 08 	add	r8,r9,r8
80007774:	ef 68 ff fe 	st.b	r7[-2],r8
		csum += usageShdw[sel].u[i].slotFilled;
80007778:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8000777c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007780:	49 6b       	lddpc	r11,800077d8 <calc_usage_csum+0x394>
80007782:	12 98       	mov	r8,r9
80007784:	a3 68       	lsl	r8,0x2
80007786:	12 08       	add	r8,r9
80007788:	a1 78       	lsl	r8,0x1
8000778a:	14 99       	mov	r9,r10
8000778c:	a5 79       	lsl	r9,0x5
8000778e:	14 19       	sub	r9,r10
80007790:	f2 0a 15 05 	lsl	r10,r9,0x5
80007794:	12 1a       	sub	r10,r9
80007796:	14 08       	add	r8,r10
80007798:	f6 08 00 08 	add	r8,r11,r8
8000779c:	2f c8       	sub	r8,-4
8000779e:	11 a8       	ld.ub	r8,r8[0x2]
800077a0:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800077a4:	5c 58       	castu.b	r8
800077a6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800077aa:	f2 08 00 08 	add	r8,r9,r8
800077ae:	ef 68 ff fe 	st.b	r7[-2],r8
	
/*
 * Lots of ways to checksum this struct, don't over-think it
 */

	for (unsigned char i=0; i<(NUM_SETS_LED_BOARD_SIDES * NUM_LED_BOARD_SIDES); i++)
800077b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800077b6:	2f f8       	sub	r8,-1
800077b8:	ef 68 ff ff 	st.b	r7[-1],r8
800077bc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800077c0:	35 f8       	mov	r8,95
800077c2:	f0 09 18 00 	cp.b	r9,r8
800077c6:	fe 98 fe 4d 	brls	80007460 <calc_usage_csum+0x1c>
		csum += usageShdw[sel].u[i].maxUsageReached;
		csum += usageShdw[sel].u[i].top_botn;
		csum += usageShdw[sel].u[i].slotFilled;
	}
	
	return csum;
800077ca:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
800077ce:	10 9c       	mov	r12,r8
800077d0:	2f ed       	sub	sp,-8
800077d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800077d6:	00 00       	add	r0,r0
800077d8:	00 00       	add	r0,r0
800077da:	03 84       	ld.ub	r4,r1[0x0]

800077dc <copy_usage_to_usage>:

void copy_usage_to_usage(unsigned char dst, unsigned char src)
{
800077dc:	eb cd 40 80 	pushm	r7,lr
800077e0:	1a 97       	mov	r7,sp
800077e2:	20 2d       	sub	sp,8
800077e4:	18 99       	mov	r9,r12
800077e6:	16 98       	mov	r8,r11
800077e8:	ef 69 ff fc 	st.b	r7[-4],r9
800077ec:	ef 68 ff f8 	st.b	r7[-8],r8
	memcpy(&usageShdw[dst], &usageShdw[src], sizeof(usageShdw[src]));
800077f0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800077f4:	12 98       	mov	r8,r9
800077f6:	a5 78       	lsl	r8,0x5
800077f8:	12 18       	sub	r8,r9
800077fa:	f0 09 15 05 	lsl	r9,r8,0x5
800077fe:	10 19       	sub	r9,r8
80007800:	48 b8       	lddpc	r8,8000782c <copy_usage_to_usage+0x50>
80007802:	f2 08 00 0b 	add	r11,r9,r8
80007806:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000780a:	12 98       	mov	r8,r9
8000780c:	a5 78       	lsl	r8,0x5
8000780e:	12 18       	sub	r8,r9
80007810:	f0 09 15 05 	lsl	r9,r8,0x5
80007814:	10 19       	sub	r9,r8
80007816:	48 68       	lddpc	r8,8000782c <copy_usage_to_usage+0x50>
80007818:	f2 08 00 08 	add	r8,r9,r8
8000781c:	e0 6a 03 c1 	mov	r10,961
80007820:	10 9c       	mov	r12,r8
80007822:	f0 1f 00 04 	mcall	80007830 <copy_usage_to_usage+0x54>
}
80007826:	2f ed       	sub	sp,-8
80007828:	e3 cd 80 80 	ldm	sp++,r7,pc
8000782c:	00 00       	add	r0,r0
8000782e:	03 84       	ld.ub	r4,r1[0x0]
80007830:	80 00       	ld.sh	r0,r0[0x0]
80007832:	9f 02       	st.w	pc[0x0],r2

80007834 <write_usage_to_flash>:

void write_usage_to_flash(unsigned char sel)
{
80007834:	eb cd 40 80 	pushm	r7,lr
80007838:	1a 97       	mov	r7,sp
8000783a:	20 1d       	sub	sp,4
8000783c:	18 98       	mov	r8,r12
8000783e:	ef 68 ff fc 	st.b	r7[-4],r8
	if (sel == 0)
80007842:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007846:	30 08       	mov	r8,0
80007848:	f0 09 18 00 	cp.b	r9,r8
8000784c:	c0 91       	brne	8000785e <write_usage_to_flash+0x2a>
	{
		flashc_memcpy(serialIdAndUsageFlashZero, &usageShdw[0], sizeof(usageShdw[0]),true);
8000784e:	30 19       	mov	r9,1
80007850:	e0 6a 03 c1 	mov	r10,961
80007854:	48 8b       	lddpc	r11,80007874 <write_usage_to_flash+0x40>
80007856:	48 9c       	lddpc	r12,80007878 <write_usage_to_flash+0x44>
80007858:	f0 1f 00 09 	mcall	8000787c <write_usage_to_flash+0x48>
8000785c:	c0 88       	rjmp	8000786c <write_usage_to_flash+0x38>
	}
	else
	{
		flashc_memcpy(serialIdAndUsageFlashOne, &usageShdw[0], sizeof(usageShdw[0]),true);
8000785e:	30 19       	mov	r9,1
80007860:	e0 6a 03 c1 	mov	r10,961
80007864:	48 4b       	lddpc	r11,80007874 <write_usage_to_flash+0x40>
80007866:	48 7c       	lddpc	r12,80007880 <write_usage_to_flash+0x4c>
80007868:	f0 1f 00 05 	mcall	8000787c <write_usage_to_flash+0x48>
	}
}
8000786c:	2f fd       	sub	sp,-4
8000786e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007872:	00 00       	add	r0,r0
80007874:	00 00       	add	r0,r0
80007876:	03 84       	ld.ub	r4,r1[0x0]
80007878:	80 07       	ld.sh	r7,r0[0x0]
8000787a:	f0 00       	*unknown*
8000787c:	80 00       	ld.sh	r0,r0[0x0]
8000787e:	43 f4       	lddsp	r4,sp[0xfc]
80007880:	80 07       	ld.sh	r7,r0[0x0]
80007882:	f8 00       	*unknown*

80007884 <calc_usage_current_led_boards>:

unsigned long calc_usage_current_led_boards(unsigned char sel);
unsigned long calc_usage_current_led_boards(unsigned char sel)
{
80007884:	eb cd 40 80 	pushm	r7,lr
80007888:	1a 97       	mov	r7,sp
8000788a:	20 ad       	sub	sp,40
8000788c:	18 98       	mov	r8,r12
8000788e:	ef 68 ff d8 	st.b	r7[-40],r8
	unsigned long hrs_thous = 0, 
80007892:	30 08       	mov	r8,0
80007894:	ef 48 ff dc 	st.w	r7[-36],r8
		hrs_huns = 0, 
80007898:	30 08       	mov	r8,0
8000789a:	ef 48 ff e0 	st.w	r7[-32],r8
		hrs_tens = 0, 
8000789e:	30 08       	mov	r8,0
800078a0:	ef 48 ff e4 	st.w	r7[-28],r8
		hrs_ones = 0, 
800078a4:	30 08       	mov	r8,0
800078a6:	ef 48 ff e8 	st.w	r7[-24],r8
		min_tens = 0, 
800078aa:	30 08       	mov	r8,0
800078ac:	ef 48 ff ec 	st.w	r7[-20],r8
		min_ones = 0;
800078b0:	30 08       	mov	r8,0
800078b2:	ef 48 ff f0 	st.w	r7[-16],r8
		
	unsigned char idx;
	unsigned long retMinutes;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
800078b6:	30 08       	mov	r8,0
800078b8:	ef 68 ff ff 	st.b	r7[-1],r8
800078bc:	cd 28       	rjmp	80007a60 <calc_usage_current_led_boards+0x1dc>
	{
		if (usageIdx[sel][i] != NO_LED_BOARD_PRESENT)
800078be:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800078c2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800078c6:	fe f9 02 1a 	ld.w	r9,pc[538]
800078ca:	a3 7a       	lsl	r10,0x3
800078cc:	f4 08 00 08 	add	r8,r10,r8
800078d0:	f2 08 00 08 	add	r8,r9,r8
800078d4:	11 89       	ld.ub	r9,r8[0x0]
800078d6:	3f f8       	mov	r8,-1
800078d8:	f0 09 18 00 	cp.b	r9,r8
800078dc:	e0 80 00 bd 	breq	80007a56 <calc_usage_current_led_boards+0x1d2>
		{
			idx = usageIdx[sel][i];
800078e0:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800078e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800078e8:	4f e9       	lddpc	r9,80007ae0 <calc_usage_current_led_boards+0x25c>
800078ea:	a3 7a       	lsl	r10,0x3
800078ec:	f4 08 00 08 	add	r8,r10,r8
800078f0:	f2 08 00 08 	add	r8,r9,r8
800078f4:	11 88       	ld.ub	r8,r8[0x0]
800078f6:	ef 68 ff f7 	st.b	r7[-9],r8
					
			hrs_thous += usageShdw[sel].u[idx].hrs_thous;
800078fa:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800078fe:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80007902:	4f 9b       	lddpc	r11,80007ae4 <calc_usage_current_led_boards+0x260>
80007904:	12 98       	mov	r8,r9
80007906:	a3 68       	lsl	r8,0x2
80007908:	12 08       	add	r8,r9
8000790a:	a1 78       	lsl	r8,0x1
8000790c:	14 99       	mov	r9,r10
8000790e:	a5 79       	lsl	r9,0x5
80007910:	14 19       	sub	r9,r10
80007912:	f2 0a 15 05 	lsl	r10,r9,0x5
80007916:	12 1a       	sub	r10,r9
80007918:	14 08       	add	r8,r10
8000791a:	f6 08 00 08 	add	r8,r11,r8
8000791e:	2f c8       	sub	r8,-4
80007920:	11 b8       	ld.ub	r8,r8[0x3]
80007922:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007926:	5c 58       	castu.b	r8
80007928:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000792c:	f2 08 00 08 	add	r8,r9,r8
80007930:	ef 48 ff dc 	st.w	r7[-36],r8
			hrs_huns += usageShdw[sel].u[idx].hrs_huns;
80007934:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007938:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000793c:	4e ab       	lddpc	r11,80007ae4 <calc_usage_current_led_boards+0x260>
8000793e:	12 98       	mov	r8,r9
80007940:	a3 68       	lsl	r8,0x2
80007942:	12 08       	add	r8,r9
80007944:	a1 78       	lsl	r8,0x1
80007946:	14 99       	mov	r9,r10
80007948:	a5 79       	lsl	r9,0x5
8000794a:	14 19       	sub	r9,r10
8000794c:	f2 0a 15 05 	lsl	r10,r9,0x5
80007950:	12 1a       	sub	r10,r9
80007952:	14 08       	add	r8,r10
80007954:	f6 08 00 08 	add	r8,r11,r8
80007958:	2f c8       	sub	r8,-4
8000795a:	11 b8       	ld.ub	r8,r8[0x3]
8000795c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007960:	5c 58       	castu.b	r8
80007962:	ee f9 ff e0 	ld.w	r9,r7[-32]
80007966:	f2 08 00 08 	add	r8,r9,r8
8000796a:	ef 48 ff e0 	st.w	r7[-32],r8
			hrs_tens += usageShdw[sel].u[idx].hrs_tens;
8000796e:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007972:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80007976:	4d cb       	lddpc	r11,80007ae4 <calc_usage_current_led_boards+0x260>
80007978:	12 98       	mov	r8,r9
8000797a:	a3 68       	lsl	r8,0x2
8000797c:	12 08       	add	r8,r9
8000797e:	a1 78       	lsl	r8,0x1
80007980:	14 99       	mov	r9,r10
80007982:	a5 79       	lsl	r9,0x5
80007984:	14 19       	sub	r9,r10
80007986:	f2 0a 15 05 	lsl	r10,r9,0x5
8000798a:	12 1a       	sub	r10,r9
8000798c:	14 08       	add	r8,r10
8000798e:	f6 08 00 08 	add	r8,r11,r8
80007992:	2f 88       	sub	r8,-8
80007994:	11 88       	ld.ub	r8,r8[0x0]
80007996:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
8000799a:	5c 58       	castu.b	r8
8000799c:	ee f9 ff e4 	ld.w	r9,r7[-28]
800079a0:	f2 08 00 08 	add	r8,r9,r8
800079a4:	ef 48 ff e4 	st.w	r7[-28],r8
			hrs_ones += usageShdw[sel].u[idx].hrs_ones;
800079a8:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800079ac:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800079b0:	4c db       	lddpc	r11,80007ae4 <calc_usage_current_led_boards+0x260>
800079b2:	12 98       	mov	r8,r9
800079b4:	a3 68       	lsl	r8,0x2
800079b6:	12 08       	add	r8,r9
800079b8:	a1 78       	lsl	r8,0x1
800079ba:	14 99       	mov	r9,r10
800079bc:	a5 79       	lsl	r9,0x5
800079be:	14 19       	sub	r9,r10
800079c0:	f2 0a 15 05 	lsl	r10,r9,0x5
800079c4:	12 1a       	sub	r10,r9
800079c6:	14 08       	add	r8,r10
800079c8:	f6 08 00 08 	add	r8,r11,r8
800079cc:	2f 88       	sub	r8,-8
800079ce:	11 88       	ld.ub	r8,r8[0x0]
800079d0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800079d4:	5c 58       	castu.b	r8
800079d6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800079da:	f2 08 00 08 	add	r8,r9,r8
800079de:	ef 48 ff e8 	st.w	r7[-24],r8
			min_tens += usageShdw[sel].u[idx].min_tens;
800079e2:	ef 3a ff d8 	ld.ub	r10,r7[-40]
800079e6:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800079ea:	4b fb       	lddpc	r11,80007ae4 <calc_usage_current_led_boards+0x260>
800079ec:	12 98       	mov	r8,r9
800079ee:	a3 68       	lsl	r8,0x2
800079f0:	12 08       	add	r8,r9
800079f2:	a1 78       	lsl	r8,0x1
800079f4:	14 99       	mov	r9,r10
800079f6:	a5 79       	lsl	r9,0x5
800079f8:	14 19       	sub	r9,r10
800079fa:	f2 0a 15 05 	lsl	r10,r9,0x5
800079fe:	12 1a       	sub	r10,r9
80007a00:	14 08       	add	r8,r10
80007a02:	f6 08 00 08 	add	r8,r11,r8
80007a06:	2f 88       	sub	r8,-8
80007a08:	11 98       	ld.ub	r8,r8[0x1]
80007a0a:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007a0e:	5c 58       	castu.b	r8
80007a10:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007a14:	f2 08 00 08 	add	r8,r9,r8
80007a18:	ef 48 ff ec 	st.w	r7[-20],r8
			min_ones += usageShdw[sel].u[idx].min_ones;
80007a1c:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80007a20:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80007a24:	4b 0b       	lddpc	r11,80007ae4 <calc_usage_current_led_boards+0x260>
80007a26:	12 98       	mov	r8,r9
80007a28:	a3 68       	lsl	r8,0x2
80007a2a:	12 08       	add	r8,r9
80007a2c:	a1 78       	lsl	r8,0x1
80007a2e:	14 99       	mov	r9,r10
80007a30:	a5 79       	lsl	r9,0x5
80007a32:	14 19       	sub	r9,r10
80007a34:	f2 0a 15 05 	lsl	r10,r9,0x5
80007a38:	12 1a       	sub	r10,r9
80007a3a:	14 08       	add	r8,r10
80007a3c:	f6 08 00 08 	add	r8,r11,r8
80007a40:	2f 88       	sub	r8,-8
80007a42:	11 98       	ld.ub	r8,r8[0x1]
80007a44:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007a48:	5c 58       	castu.b	r8
80007a4a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007a4e:	f2 08 00 08 	add	r8,r9,r8
80007a52:	ef 48 ff f0 	st.w	r7[-16],r8
		min_ones = 0;
		
	unsigned char idx;
	unsigned long retMinutes;
	
	for (unsigned char i=0; i<NUM_LED_BOARD_SIDES; i++)
80007a56:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007a5a:	2f f8       	sub	r8,-1
80007a5c:	ef 68 ff ff 	st.b	r7[-1],r8
80007a60:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a64:	30 78       	mov	r8,7
80007a66:	f0 09 18 00 	cp.b	r9,r8
80007a6a:	fe 98 ff 2a 	brls	800078be <calc_usage_current_led_boards+0x3a>
			min_tens += usageShdw[sel].u[idx].min_tens;
			min_ones += usageShdw[sel].u[idx].min_ones;
		}
	}
	
	retMinutes = (hrs_thous * 1000) + (hrs_huns * 100) + (hrs_tens * 10) + (hrs_ones);
80007a6e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007a72:	e0 68 03 e8 	mov	r8,1000
80007a76:	b1 39       	mul	r9,r8
80007a78:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007a7c:	f0 08 10 64 	mul	r8,r8,100
80007a80:	f2 08 00 0a 	add	r10,r9,r8
80007a84:	ee f9 ff e4 	ld.w	r9,r7[-28]
80007a88:	12 98       	mov	r8,r9
80007a8a:	a3 68       	lsl	r8,0x2
80007a8c:	12 08       	add	r8,r9
80007a8e:	a1 78       	lsl	r8,0x1
80007a90:	f4 08 00 09 	add	r9,r10,r8
80007a94:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007a98:	f2 08 00 08 	add	r8,r9,r8
80007a9c:	ef 48 ff f8 	st.w	r7[-8],r8
	retMinutes *= 60;
80007aa0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007aa4:	12 98       	mov	r8,r9
80007aa6:	a5 68       	lsl	r8,0x4
80007aa8:	12 18       	sub	r8,r9
80007aaa:	a3 68       	lsl	r8,0x2
80007aac:	ef 48 ff f8 	st.w	r7[-8],r8
	retMinutes += ((min_tens * 10) + (min_ones));
80007ab0:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007ab4:	12 98       	mov	r8,r9
80007ab6:	a3 68       	lsl	r8,0x2
80007ab8:	12 08       	add	r8,r9
80007aba:	a1 78       	lsl	r8,0x1
80007abc:	10 99       	mov	r9,r8
80007abe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007ac2:	f2 08 00 08 	add	r8,r9,r8
80007ac6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007aca:	f2 08 00 08 	add	r8,r9,r8
80007ace:	ef 48 ff f8 	st.w	r7[-8],r8
	
	return retMinutes;
80007ad2:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80007ad6:	10 9c       	mov	r12,r8
80007ad8:	2f 6d       	sub	sp,-40
80007ada:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ade:	00 00       	add	r0,r0
80007ae0:	00 00       	add	r0,r0
80007ae2:	03 65       	ld.uh	r5,--r1
80007ae4:	00 00       	add	r0,r0
80007ae6:	03 84       	ld.ub	r4,r1[0x0]

80007ae8 <increment_ledBoard_usage_min>:

void increment_ledBoard_usage_min(void);
void increment_ledBoard_usage_min(void)
{
80007ae8:	eb cd 40 80 	pushm	r7,lr
80007aec:	1a 97       	mov	r7,sp
80007aee:	20 3d       	sub	sp,12
	unsigned char upperLEDboardIdx;
	unsigned char lowerLEDboardIdx;
	unsigned char upperLEDboardMinuteUsageIdx;
	unsigned char lowerLEDboardMinuteUsageIdx;
	
	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
80007af0:	30 08       	mov	r8,0
80007af2:	ef 68 ff fe 	st.b	r7[-2],r8
80007af6:	c5 69       	rjmp	80007da2 <increment_ledBoard_usage_min+0x2ba>
	{
		if (shelf[i].active == SHELF_ACTIVE)
80007af8:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007afc:	fe f8 02 dc 	ld.w	r8,pc[732]
80007b00:	f0 09 07 28 	ld.ub	r8,r8[r9<<0x2]
80007b04:	58 08       	cp.w	r8,0
80007b06:	e0 81 01 49 	brne	80007d98 <increment_ledBoard_usage_min+0x2b0>
		{
			switch (i)
80007b0a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007b0e:	58 18       	cp.w	r8,1
80007b10:	c1 20       	breq	80007b34 <increment_ledBoard_usage_min+0x4c>
80007b12:	e0 89 00 05 	brgt	80007b1c <increment_ledBoard_usage_min+0x34>
80007b16:	58 08       	cp.w	r8,0
80007b18:	c0 70       	breq	80007b26 <increment_ledBoard_usage_min+0x3e>
80007b1a:	c2 18       	rjmp	80007b5c <increment_ledBoard_usage_min+0x74>
80007b1c:	58 28       	cp.w	r8,2
80007b1e:	c1 20       	breq	80007b42 <increment_ledBoard_usage_min+0x5a>
80007b20:	58 38       	cp.w	r8,3
80007b22:	c1 70       	breq	80007b50 <increment_ledBoard_usage_min+0x68>
80007b24:	c1 c8       	rjmp	80007b5c <increment_ledBoard_usage_min+0x74>
			{
				case 0:
					upperLEDboardIdx = 0;
80007b26:	30 08       	mov	r8,0
80007b28:	ef 68 ff fa 	st.b	r7[-6],r8
					lowerLEDboardIdx = 1;
80007b2c:	30 18       	mov	r8,1
80007b2e:	ef 68 ff fb 	st.b	r7[-5],r8
					break;
80007b32:	c1 58       	rjmp	80007b5c <increment_ledBoard_usage_min+0x74>
				case 1:
					upperLEDboardIdx = 1;
80007b34:	30 18       	mov	r8,1
80007b36:	ef 68 ff fa 	st.b	r7[-6],r8
					lowerLEDboardIdx = 2;
80007b3a:	30 28       	mov	r8,2
80007b3c:	ef 68 ff fb 	st.b	r7[-5],r8
					break;
80007b40:	c0 e8       	rjmp	80007b5c <increment_ledBoard_usage_min+0x74>
				case 2:
					upperLEDboardIdx = 2;
80007b42:	30 28       	mov	r8,2
80007b44:	ef 68 ff fa 	st.b	r7[-6],r8
					lowerLEDboardIdx = 3;
80007b48:	30 38       	mov	r8,3
80007b4a:	ef 68 ff fb 	st.b	r7[-5],r8
					break;
80007b4e:	c0 78       	rjmp	80007b5c <increment_ledBoard_usage_min+0x74>
				case 3:
					upperLEDboardIdx = 3;
80007b50:	30 38       	mov	r8,3
80007b52:	ef 68 ff fa 	st.b	r7[-6],r8
					lowerLEDboardIdx = 4;
80007b56:	30 48       	mov	r8,4
80007b58:	ef 68 ff fb 	st.b	r7[-5],r8
					break;
			}
		
			upperLEDboardMinuteUsageIdx = usageIdx[0][upperLEDboardIdx];
80007b5c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007b60:	fe f9 02 7c 	ld.w	r9,pc[636]
80007b64:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007b68:	ef 68 ff fc 	st.b	r7[-4],r8
			lowerLEDboardMinuteUsageIdx = usageIdx[0][lowerLEDboardIdx];
80007b6c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007b70:	fe f9 02 6c 	ld.w	r9,pc[620]
80007b74:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007b78:	ef 68 ff fd 	st.b	r7[-3],r8
		
			for (unsigned char j=0; j<2; j++)
80007b7c:	30 08       	mov	r8,0
80007b7e:	ef 68 ff ff 	st.b	r7[-1],r8
80007b82:	c0 49       	rjmp	80007d8a <increment_ledBoard_usage_min+0x2a2>
			{
				switch (j)
80007b84:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007b88:	58 08       	cp.w	r8,0
80007b8a:	c0 40       	breq	80007b92 <increment_ledBoard_usage_min+0xaa>
80007b8c:	58 18       	cp.w	r8,1
80007b8e:	c0 f0       	breq	80007bac <increment_ledBoard_usage_min+0xc4>
80007b90:	c1 a8       	rjmp	80007bc4 <increment_ledBoard_usage_min+0xdc>
				{
					case 0:
						tmp = &usageShdw[0].u[upperLEDboardMinuteUsageIdx];
80007b92:	fe fa 02 4e 	ld.w	r10,pc[590]
80007b96:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b9a:	12 98       	mov	r8,r9
80007b9c:	a3 68       	lsl	r8,0x2
80007b9e:	12 08       	add	r8,r9
80007ba0:	a1 78       	lsl	r8,0x1
80007ba2:	f4 08 00 08 	add	r8,r10,r8
80007ba6:	ef 48 ff f4 	st.w	r7[-12],r8
						break;
80007baa:	c0 d8       	rjmp	80007bc4 <increment_ledBoard_usage_min+0xdc>
					case 1:
						tmp = &usageShdw[0].u[lowerLEDboardMinuteUsageIdx];
80007bac:	fe fa 02 34 	ld.w	r10,pc[564]
80007bb0:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80007bb4:	12 98       	mov	r8,r9
80007bb6:	a3 68       	lsl	r8,0x2
80007bb8:	12 08       	add	r8,r9
80007bba:	a1 78       	lsl	r8,0x1
80007bbc:	f4 08 00 08 	add	r8,r10,r8
80007bc0:	ef 48 ff f4 	st.w	r7[-12],r8
						break;
				}
			

				if (++(tmp->min_ones) > 9)
80007bc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007bc8:	f1 38 00 09 	ld.ub	r8,r8[9]
80007bcc:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007bd0:	5c 58       	castu.b	r8
80007bd2:	2f f8       	sub	r8,-1
80007bd4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007bd8:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007bdc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007be0:	f3 38 00 09 	ld.ub	r8,r9[9]
80007be4:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80007be8:	f3 68 00 09 	st.b	r9[9],r8
80007bec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007bf0:	f1 38 00 09 	ld.ub	r8,r8[9]
80007bf4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007bf8:	5c 58       	castu.b	r8
80007bfa:	58 98       	cp.w	r8,9
80007bfc:	e0 8a 00 c2 	brle	80007d80 <increment_ledBoard_usage_min+0x298>
				{
					tmp->min_ones = 0;
80007c00:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007c04:	f3 38 00 09 	ld.ub	r8,r9[9]
80007c08:	30 0a       	mov	r10,0
80007c0a:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80007c0e:	f3 68 00 09 	st.b	r9[9],r8
				
					if (++(tmp->min_tens) > 5)
80007c12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007c16:	f1 38 00 09 	ld.ub	r8,r8[9]
80007c1a:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007c1e:	5c 58       	castu.b	r8
80007c20:	2f f8       	sub	r8,-1
80007c22:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007c26:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007c2a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007c2e:	f3 38 00 09 	ld.ub	r8,r9[9]
80007c32:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80007c36:	f3 68 00 09 	st.b	r9[9],r8
80007c3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007c3e:	f1 38 00 09 	ld.ub	r8,r8[9]
80007c42:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007c46:	5c 58       	castu.b	r8
80007c48:	58 58       	cp.w	r8,5
80007c4a:	e0 8a 00 9b 	brle	80007d80 <increment_ledBoard_usage_min+0x298>
					{
						tmp->min_tens = 0;
80007c4e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007c52:	f3 38 00 09 	ld.ub	r8,r9[9]
80007c56:	30 0a       	mov	r10,0
80007c58:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80007c5c:	f3 68 00 09 	st.b	r9[9],r8
					
						if (++(tmp->hrs_ones) > 9)
80007c60:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007c64:	f1 38 00 08 	ld.ub	r8,r8[8]
80007c68:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007c6c:	5c 58       	castu.b	r8
80007c6e:	2f f8       	sub	r8,-1
80007c70:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007c74:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007c78:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007c7c:	f3 38 00 08 	ld.ub	r8,r9[8]
80007c80:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80007c84:	f3 68 00 08 	st.b	r9[8],r8
80007c88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007c8c:	f1 38 00 08 	ld.ub	r8,r8[8]
80007c90:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007c94:	5c 58       	castu.b	r8
80007c96:	58 98       	cp.w	r8,9
80007c98:	e0 8a 00 74 	brle	80007d80 <increment_ledBoard_usage_min+0x298>
						{
							tmp->hrs_ones = 0;
80007c9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007ca0:	f3 38 00 08 	ld.ub	r8,r9[8]
80007ca4:	30 0a       	mov	r10,0
80007ca6:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80007caa:	f3 68 00 08 	st.b	r9[8],r8
						
							if (++(tmp->hrs_tens) > 9)
80007cae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007cb2:	f1 38 00 08 	ld.ub	r8,r8[8]
80007cb6:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007cba:	5c 58       	castu.b	r8
80007cbc:	2f f8       	sub	r8,-1
80007cbe:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007cc2:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007cc6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007cca:	f3 38 00 08 	ld.ub	r8,r9[8]
80007cce:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80007cd2:	f3 68 00 08 	st.b	r9[8],r8
80007cd6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007cda:	f1 38 00 08 	ld.ub	r8,r8[8]
80007cde:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007ce2:	5c 58       	castu.b	r8
80007ce4:	58 98       	cp.w	r8,9
80007ce6:	e0 8a 00 4d 	brle	80007d80 <increment_ledBoard_usage_min+0x298>
							{
								tmp->hrs_tens = 0;
80007cea:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007cee:	f3 38 00 08 	ld.ub	r8,r9[8]
80007cf2:	30 0a       	mov	r10,0
80007cf4:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80007cf8:	f3 68 00 08 	st.b	r9[8],r8
							
								if (++(tmp->hrs_huns) > 9)
80007cfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007d00:	11 f8       	ld.ub	r8,r8[0x7]
80007d02:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007d06:	5c 58       	castu.b	r8
80007d08:	2f f8       	sub	r8,-1
80007d0a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007d0e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007d12:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007d16:	13 f8       	ld.ub	r8,r9[0x7]
80007d18:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80007d1c:	b2 f8       	st.b	r9[0x7],r8
80007d1e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007d22:	11 f8       	ld.ub	r8,r8[0x7]
80007d24:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007d28:	5c 58       	castu.b	r8
80007d2a:	58 98       	cp.w	r8,9
80007d2c:	e0 8a 00 2a 	brle	80007d80 <increment_ledBoard_usage_min+0x298>
								{
									tmp->hrs_huns = 0;
80007d30:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007d34:	13 f8       	ld.ub	r8,r9[0x7]
80007d36:	30 0a       	mov	r10,0
80007d38:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80007d3c:	b2 f8       	st.b	r9[0x7],r8
								
									if (++(tmp->hrs_thous) > 1)
80007d3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007d42:	11 f8       	ld.ub	r8,r8[0x7]
80007d44:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007d48:	5c 58       	castu.b	r8
80007d4a:	2f f8       	sub	r8,-1
80007d4c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007d50:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80007d54:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007d58:	13 f8       	ld.ub	r8,r9[0x7]
80007d5a:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
80007d5e:	b2 f8       	st.b	r9[0x7],r8
80007d60:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007d64:	11 f8       	ld.ub	r8,r8[0x7]
80007d66:	f1 d8 c0 84 	bfextu	r8,r8,0x4,0x4
80007d6a:	5c 58       	castu.b	r8
80007d6c:	58 18       	cp.w	r8,1
80007d6e:	e0 8a 00 09 	brle	80007d80 <increment_ledBoard_usage_min+0x298>
									{
										tmp->maxUsageReached = 1; //And...we're done. Reached 2000 hours.
80007d72:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007d76:	13 e8       	ld.ub	r8,r9[0x6]
80007d78:	30 1a       	mov	r10,1
80007d7a:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
80007d7e:	b2 e8       	st.b	r9[0x6],r8
			}
		
			upperLEDboardMinuteUsageIdx = usageIdx[0][upperLEDboardIdx];
			lowerLEDboardMinuteUsageIdx = usageIdx[0][lowerLEDboardIdx];
		
			for (unsigned char j=0; j<2; j++)
80007d80:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007d84:	2f f8       	sub	r8,-1
80007d86:	ef 68 ff ff 	st.b	r7[-1],r8
80007d8a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007d8e:	30 18       	mov	r8,1
80007d90:	f0 09 18 00 	cp.b	r9,r8
80007d94:	fe 98 fe f8 	brls	80007b84 <increment_ledBoard_usage_min+0x9c>
	unsigned char upperLEDboardIdx;
	unsigned char lowerLEDboardIdx;
	unsigned char upperLEDboardMinuteUsageIdx;
	unsigned char lowerLEDboardMinuteUsageIdx;
	
	for (unsigned char i=0; i<NUM_SHELVES; i++) //check every active shelf
80007d98:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007d9c:	2f f8       	sub	r8,-1
80007d9e:	ef 68 ff fe 	st.b	r7[-2],r8
80007da2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80007da6:	30 38       	mov	r8,3
80007da8:	f0 09 18 00 	cp.b	r9,r8
80007dac:	fe 98 fe a6 	brls	80007af8 <increment_ledBoard_usage_min+0x10>
				}
			}
		}
	}
			
	write_usage_to_flash(pingPong);
80007db0:	48 d8       	lddpc	r8,80007de4 <increment_ledBoard_usage_min+0x2fc>
80007db2:	11 88       	ld.ub	r8,r8[0x0]
80007db4:	10 9c       	mov	r12,r8
80007db6:	f0 1f 00 0d 	mcall	80007de8 <increment_ledBoard_usage_min+0x300>
	
	pingPong++;
80007dba:	48 b8       	lddpc	r8,80007de4 <increment_ledBoard_usage_min+0x2fc>
80007dbc:	11 88       	ld.ub	r8,r8[0x0]
80007dbe:	2f f8       	sub	r8,-1
80007dc0:	5c 58       	castu.b	r8
80007dc2:	48 99       	lddpc	r9,80007de4 <increment_ledBoard_usage_min+0x2fc>
80007dc4:	b2 88       	st.b	r9[0x0],r8
	pingPong &= 1; //toggle between 0 (EVEN) and 1 (ODD)
80007dc6:	48 88       	lddpc	r8,80007de4 <increment_ledBoard_usage_min+0x2fc>
80007dc8:	11 88       	ld.ub	r8,r8[0x0]
80007dca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007dce:	48 69       	lddpc	r9,80007de4 <increment_ledBoard_usage_min+0x2fc>
80007dd0:	b2 88       	st.b	r9[0x0],r8
}
80007dd2:	2f dd       	sub	sp,-12
80007dd4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007dd8:	00 00       	add	r0,r0
80007dda:	03 3a       	ld.ub	r10,r1++
80007ddc:	00 00       	add	r0,r0
80007dde:	03 65       	ld.uh	r5,--r1
80007de0:	00 00       	add	r0,r0
80007de2:	03 84       	ld.ub	r4,r1[0x0]
80007de4:	00 00       	add	r0,r0
80007de6:	0b 49       	ld.w	r9,--r5
80007de8:	80 00       	ld.sh	r0,r0[0x0]
80007dea:	78 34       	ld.w	r4,r12[0xc]

80007dec <init_shelf_n_ledBrd_structs>:


void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
80007dec:	eb cd 40 80 	pushm	r7,lr
80007df0:	1a 97       	mov	r7,sp
80007df2:	20 3d       	sub	sp,12
	
	for (int i=0; i<NUM_SHELVES; i++)
80007df4:	30 08       	mov	r8,0
80007df6:	ef 48 ff f4 	st.w	r7[-12],r8
80007dfa:	c1 68       	rjmp	80007e26 <init_shelf_n_ledBrd_structs+0x3a>
	{
		shelf[i].active = 0;
80007dfc:	ee fa ff f4 	ld.w	r10,r7[-12]
80007e00:	fe f9 02 20 	ld.w	r9,pc[544]
80007e04:	30 08       	mov	r8,0
80007e06:	f2 0a 0b 28 	st.b	r9[r10<<0x2],r8
		shelf[i].devicesPresent = 0;
80007e0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007e0e:	fe f9 02 12 	ld.w	r9,pc[530]
80007e12:	a3 68       	lsl	r8,0x2
80007e14:	f2 08 00 08 	add	r8,r9,r8
80007e18:	30 09       	mov	r9,0
80007e1a:	b0 b9       	st.b	r8[0x3],r9

void init_shelf_n_ledBrd_structs(void);
void init_shelf_n_ledBrd_structs(void)
{
	
	for (int i=0; i<NUM_SHELVES; i++)
80007e1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007e20:	2f f8       	sub	r8,-1
80007e22:	ef 48 ff f4 	st.w	r7[-12],r8
80007e26:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007e2a:	58 38       	cp.w	r8,3
80007e2c:	fe 9a ff e8 	brle	80007dfc <init_shelf_n_ledBrd_structs+0x10>
	{
		shelf[i].active = 0;
		shelf[i].devicesPresent = 0;
	}
	
	shelf[0].tLedIdx = 0;
80007e30:	4f c9       	lddpc	r9,80008020 <init_shelf_n_ledBrd_structs+0x234>
80007e32:	30 08       	mov	r8,0
80007e34:	b2 98       	st.b	r9[0x1],r8
	shelf[0].bLedIdx = 1;
80007e36:	4f b9       	lddpc	r9,80008020 <init_shelf_n_ledBrd_structs+0x234>
80007e38:	30 18       	mov	r8,1
80007e3a:	b2 a8       	st.b	r9[0x2],r8
	shelf[1].tLedIdx = 1;
80007e3c:	4f 99       	lddpc	r9,80008020 <init_shelf_n_ledBrd_structs+0x234>
80007e3e:	30 18       	mov	r8,1
80007e40:	b2 d8       	st.b	r9[0x5],r8
	shelf[1].bLedIdx = 2;
80007e42:	4f 89       	lddpc	r9,80008020 <init_shelf_n_ledBrd_structs+0x234>
80007e44:	30 28       	mov	r8,2
80007e46:	b2 e8       	st.b	r9[0x6],r8
	shelf[2].tLedIdx = 2;
80007e48:	4f 69       	lddpc	r9,80008020 <init_shelf_n_ledBrd_structs+0x234>
80007e4a:	30 28       	mov	r8,2
80007e4c:	f3 68 00 09 	st.b	r9[9],r8
	shelf[2].bLedIdx = 3;
80007e50:	4f 49       	lddpc	r9,80008020 <init_shelf_n_ledBrd_structs+0x234>
80007e52:	30 38       	mov	r8,3
80007e54:	f3 68 00 0a 	st.b	r9[10],r8
	shelf[3].tLedIdx = 3;
80007e58:	4f 29       	lddpc	r9,80008020 <init_shelf_n_ledBrd_structs+0x234>
80007e5a:	30 38       	mov	r8,3
80007e5c:	f3 68 00 0d 	st.b	r9[13],r8
	shelf[3].bLedIdx = 4;
80007e60:	4f 09       	lddpc	r9,80008020 <init_shelf_n_ledBrd_structs+0x234>
80007e62:	30 48       	mov	r8,4
80007e64:	f3 68 00 0e 	st.b	r9[14],r8
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80007e68:	30 08       	mov	r8,0
80007e6a:	ef 48 ff f8 	st.w	r7[-8],r8
80007e6e:	c1 38       	rjmp	80007e94 <init_shelf_n_ledBrd_structs+0xa8>
	{
		ledBrd[i].present = 0;
80007e70:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007e74:	4e ca       	lddpc	r10,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007e76:	12 98       	mov	r8,r9
80007e78:	a3 78       	lsl	r8,0x3
80007e7a:	12 18       	sub	r8,r9
80007e7c:	a1 78       	lsl	r8,0x1
80007e7e:	f4 08 00 08 	add	r8,r10,r8
80007e82:	f0 c9 ff f8 	sub	r9,r8,-8
80007e86:	30 08       	mov	r8,0
80007e88:	b2 88       	st.b	r9[0x0],r8
	shelf[2].tLedIdx = 2;
	shelf[2].bLedIdx = 3;
	shelf[3].tLedIdx = 3;
	shelf[3].bLedIdx = 4;
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80007e8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e8e:	2f f8       	sub	r8,-1
80007e90:	ef 48 ff f8 	st.w	r7[-8],r8
80007e94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e98:	58 48       	cp.w	r8,4
80007e9a:	fe 9a ff eb 	brle	80007e70 <init_shelf_n_ledBrd_structs+0x84>
	{
		ledBrd[i].present = 0;
	}
	
	ledBrd[0].uSideIdx = 0xFF;
80007e9e:	4e 29       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007ea0:	3f f8       	mov	r8,-1
80007ea2:	f3 68 00 0a 	st.b	r9[10],r8
	ledBrd[0].lSideIdx = 0;
80007ea6:	4e 09       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007ea8:	30 08       	mov	r8,0
80007eaa:	f3 68 00 0b 	st.b	r9[11],r8
	ledBrd[1].uSideIdx = 1;
80007eae:	4d e9       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007eb0:	30 18       	mov	r8,1
80007eb2:	f3 68 00 18 	st.b	r9[24],r8
	ledBrd[1].lSideIdx = 2;
80007eb6:	4d c9       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007eb8:	30 28       	mov	r8,2
80007eba:	f3 68 00 19 	st.b	r9[25],r8
	ledBrd[2].uSideIdx = 3;
80007ebe:	4d a9       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007ec0:	30 38       	mov	r8,3
80007ec2:	f3 68 00 26 	st.b	r9[38],r8
	ledBrd[2].lSideIdx = 4;
80007ec6:	4d 89       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007ec8:	30 48       	mov	r8,4
80007eca:	f3 68 00 27 	st.b	r9[39],r8
	ledBrd[3].uSideIdx = 5;
80007ece:	4d 69       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007ed0:	30 58       	mov	r8,5
80007ed2:	f3 68 00 34 	st.b	r9[52],r8
	ledBrd[3].lSideIdx = 6;
80007ed6:	4d 49       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007ed8:	30 68       	mov	r8,6
80007eda:	f3 68 00 35 	st.b	r9[53],r8
	ledBrd[4].uSideIdx = 7;
80007ede:	4d 29       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007ee0:	30 78       	mov	r8,7
80007ee2:	f3 68 00 42 	st.b	r9[66],r8
	ledBrd[4].lSideIdx = 0xFF;
80007ee6:	4d 09       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007ee8:	3f f8       	mov	r8,-1
80007eea:	f3 68 00 43 	st.b	r9[67],r8

	ledBrd[0].uSideShelfIdx = 0xFF;
80007eee:	4c e9       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007ef0:	3f f8       	mov	r8,-1
80007ef2:	f3 68 00 0c 	st.b	r9[12],r8
	ledBrd[1].uSideShelfIdx = 0;
80007ef6:	4c c9       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007ef8:	30 08       	mov	r8,0
80007efa:	f3 68 00 1a 	st.b	r9[26],r8
	ledBrd[2].uSideShelfIdx = 1;
80007efe:	4c a9       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007f00:	30 18       	mov	r8,1
80007f02:	f3 68 00 28 	st.b	r9[40],r8
	ledBrd[3].uSideShelfIdx = 2;
80007f06:	4c 89       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007f08:	30 28       	mov	r8,2
80007f0a:	f3 68 00 36 	st.b	r9[54],r8
	ledBrd[4].uSideShelfIdx = 3;
80007f0e:	4c 69       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007f10:	30 38       	mov	r8,3
80007f12:	f3 68 00 44 	st.b	r9[68],r8
 
	ledBrd[0].lSideShelfIdx = 0;
80007f16:	4c 49       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007f18:	30 08       	mov	r8,0
80007f1a:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrd[1].lSideShelfIdx = 1;
80007f1e:	4c 29       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007f20:	30 18       	mov	r8,1
80007f22:	f3 68 00 1b 	st.b	r9[27],r8
	ledBrd[2].lSideShelfIdx = 2;
80007f26:	4c 09       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007f28:	30 28       	mov	r8,2
80007f2a:	f3 68 00 29 	st.b	r9[41],r8
	ledBrd[3].lSideShelfIdx = 3;
80007f2e:	4b e9       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007f30:	30 38       	mov	r8,3
80007f32:	f3 68 00 37 	st.b	r9[55],r8
	ledBrd[4].lSideShelfIdx = 0xFF;
80007f36:	4b c9       	lddpc	r9,80008024 <init_shelf_n_ledBrd_structs+0x238>
80007f38:	3f f8       	mov	r8,-1
80007f3a:	f3 68 00 45 	st.b	r9[69],r8
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80007f3e:	30 08       	mov	r8,0
80007f40:	ef 48 ff fc 	st.w	r7[-4],r8
80007f44:	c2 88       	rjmp	80007f94 <init_shelf_n_ledBrd_structs+0x1a8>
	{
		ledBrdSide[i].maxUsageReached = 0;
80007f46:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007f4a:	4b 8a       	lddpc	r10,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007f4c:	12 98       	mov	r8,r9
80007f4e:	a3 68       	lsl	r8,0x2
80007f50:	12 08       	add	r8,r9
80007f52:	f4 08 00 08 	add	r8,r10,r8
80007f56:	f0 c9 ff fe 	sub	r9,r8,-2
80007f5a:	30 08       	mov	r8,0
80007f5c:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].sanitizeMinutes = 0;
80007f5e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007f62:	4b 2a       	lddpc	r10,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007f64:	12 98       	mov	r8,r9
80007f66:	a3 68       	lsl	r8,0x2
80007f68:	12 08       	add	r8,r9
80007f6a:	f4 08 00 09 	add	r9,r10,r8
80007f6e:	30 08       	mov	r8,0
80007f70:	b2 88       	st.b	r9[0x0],r8
		ledBrdSide[i].ushdwIdx = 0xFF;
80007f72:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007f76:	4a da       	lddpc	r10,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007f78:	12 98       	mov	r8,r9
80007f7a:	a3 68       	lsl	r8,0x2
80007f7c:	12 08       	add	r8,r9
80007f7e:	f4 08 00 08 	add	r8,r10,r8
80007f82:	f0 c9 ff ff 	sub	r9,r8,-1
80007f86:	3f f8       	mov	r8,-1
80007f88:	b2 88       	st.b	r9[0x0],r8
	ledBrd[2].lSideShelfIdx = 2;
	ledBrd[3].lSideShelfIdx = 3;
	ledBrd[4].lSideShelfIdx = 0xFF;
	

	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80007f8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f8e:	2f f8       	sub	r8,-1
80007f90:	ef 48 ff fc 	st.w	r7[-4],r8
80007f94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f98:	58 78       	cp.w	r8,7
80007f9a:	fe 9a ff d6 	brle	80007f46 <init_shelf_n_ledBrd_structs+0x15a>
		ledBrdSide[i].maxUsageReached = 0;
		ledBrdSide[i].sanitizeMinutes = 0;
		ledBrdSide[i].ushdwIdx = 0xFF;
	}
	
	ledBrdSide[0].boardIdx = 0;
80007f9e:	4a 39       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007fa0:	30 08       	mov	r8,0
80007fa2:	b2 c8       	st.b	r9[0x4],r8
	ledBrdSide[1].boardIdx = 1;
80007fa4:	4a 19       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007fa6:	30 18       	mov	r8,1
80007fa8:	f3 68 00 09 	st.b	r9[9],r8
	ledBrdSide[2].boardIdx = 1;
80007fac:	49 f9       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007fae:	30 18       	mov	r8,1
80007fb0:	f3 68 00 0e 	st.b	r9[14],r8
	ledBrdSide[3].boardIdx = 2;
80007fb4:	49 d9       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007fb6:	30 28       	mov	r8,2
80007fb8:	f3 68 00 13 	st.b	r9[19],r8
	ledBrdSide[4].boardIdx = 2;
80007fbc:	49 b9       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007fbe:	30 28       	mov	r8,2
80007fc0:	f3 68 00 18 	st.b	r9[24],r8
	ledBrdSide[5].boardIdx = 3;
80007fc4:	49 99       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007fc6:	30 38       	mov	r8,3
80007fc8:	f3 68 00 1d 	st.b	r9[29],r8
	ledBrdSide[6].boardIdx = 3;
80007fcc:	49 79       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007fce:	30 38       	mov	r8,3
80007fd0:	f3 68 00 22 	st.b	r9[34],r8
	ledBrdSide[7].boardIdx = 4;
80007fd4:	49 59       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007fd6:	30 48       	mov	r8,4
80007fd8:	f3 68 00 27 	st.b	r9[39],r8
	

	ledBrdSide[0].shelfIdx = 0;
80007fdc:	49 39       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007fde:	30 08       	mov	r8,0
80007fe0:	b2 b8       	st.b	r9[0x3],r8
	ledBrdSide[1].shelfIdx = 0;
80007fe2:	49 29       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007fe4:	30 08       	mov	r8,0
80007fe6:	f3 68 00 08 	st.b	r9[8],r8
	ledBrdSide[2].shelfIdx = 1;
80007fea:	49 09       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007fec:	30 18       	mov	r8,1
80007fee:	f3 68 00 0d 	st.b	r9[13],r8
	ledBrdSide[3].shelfIdx = 1;
80007ff2:	48 e9       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007ff4:	30 18       	mov	r8,1
80007ff6:	f3 68 00 12 	st.b	r9[18],r8
	ledBrdSide[4].shelfIdx = 2;
80007ffa:	48 c9       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80007ffc:	30 28       	mov	r8,2
80007ffe:	f3 68 00 17 	st.b	r9[23],r8
	ledBrdSide[5].shelfIdx = 2;
80008002:	48 a9       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80008004:	30 28       	mov	r8,2
80008006:	f3 68 00 1c 	st.b	r9[28],r8
	ledBrdSide[6].shelfIdx = 3;
8000800a:	48 89       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
8000800c:	30 38       	mov	r8,3
8000800e:	f3 68 00 21 	st.b	r9[33],r8
	ledBrdSide[7].shelfIdx = 3;
80008012:	48 69       	lddpc	r9,80008028 <init_shelf_n_ledBrd_structs+0x23c>
80008014:	30 38       	mov	r8,3
80008016:	f3 68 00 26 	st.b	r9[38],r8

}
8000801a:	2f dd       	sub	sp,-12
8000801c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008020:	00 00       	add	r0,r0
80008022:	03 3a       	ld.ub	r10,r1++
80008024:	00 00       	add	r0,r0
80008026:	02 f4       	st.b	--r1,r4
80008028:	00 00       	add	r0,r0
8000802a:	0b 20       	ld.uh	r0,r5++

8000802c <load_usageIdx_to_ledBrdSide>:

void load_usageIdx_to_ledBrdSide(unsigned char sel);
void load_usageIdx_to_ledBrdSide(unsigned char sel)
{
8000802c:	eb cd 40 80 	pushm	r7,lr
80008030:	1a 97       	mov	r7,sp
80008032:	20 2d       	sub	sp,8
80008034:	18 98       	mov	r8,r12
80008036:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
8000803a:	30 08       	mov	r8,0
8000803c:	ef 48 ff fc 	st.w	r7[-4],r8
80008040:	c1 d8       	rjmp	8000807a <load_usageIdx_to_ledBrdSide+0x4e>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[sel][i];
80008042:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008046:	ef 3b ff f8 	ld.ub	r11,r7[-8]
8000804a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000804e:	49 0a       	lddpc	r10,8000808c <load_usageIdx_to_ledBrdSide+0x60>
80008050:	a3 7b       	lsl	r11,0x3
80008052:	f6 08 00 08 	add	r8,r11,r8
80008056:	f4 08 00 08 	add	r8,r10,r8
8000805a:	11 8a       	ld.ub	r10,r8[0x0]
8000805c:	48 db       	lddpc	r11,80008090 <load_usageIdx_to_ledBrdSide+0x64>
8000805e:	12 98       	mov	r8,r9
80008060:	a3 68       	lsl	r8,0x2
80008062:	12 08       	add	r8,r9
80008064:	f6 08 00 08 	add	r8,r11,r8
80008068:	f0 c9 ff ff 	sub	r9,r8,-1
8000806c:	14 98       	mov	r8,r10
8000806e:	b2 88       	st.b	r9[0x0],r8
}

void load_usageIdx_to_ledBrdSide(unsigned char sel);
void load_usageIdx_to_ledBrdSide(unsigned char sel)
{
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80008070:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008074:	2f f8       	sub	r8,-1
80008076:	ef 48 ff fc 	st.w	r7[-4],r8
8000807a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000807e:	58 78       	cp.w	r8,7
80008080:	fe 9a ff e1 	brle	80008042 <load_usageIdx_to_ledBrdSide+0x16>
	{
		ledBrdSide[i].ushdwIdx = usageIdx[sel][i];
	}
}
80008084:	2f ed       	sub	sp,-8
80008086:	e3 cd 80 80 	ldm	sp++,r7,pc
8000808a:	00 00       	add	r0,r0
8000808c:	00 00       	add	r0,r0
8000808e:	03 65       	ld.uh	r5,--r1
80008090:	00 00       	add	r0,r0
80008092:	0b 20       	ld.uh	r0,r5++

80008094 <init_led_board_info>:


void init_led_board_info(void);
void init_led_board_info(void)
{
80008094:	eb cd 40 c0 	pushm	r6-r7,lr
80008098:	1a 97       	mov	r7,sp
8000809a:	20 5d       	sub	sp,20
	unsigned char usage0good, usage1good;
	unsigned int usage0cnt, usage1cnt;
	unsigned char newer, older, previouslyOlder;
	unsigned char good, bad, previouslyBad;
	
	init_shelf_n_ledBrd_structs();
8000809c:	f0 1f 00 ae 	mcall	80008354 <init_led_board_info+0x2c0>
	
	read_led_board_serial_ids();
800080a0:	f0 1f 00 ae 	mcall	80008358 <init_led_board_info+0x2c4>
	usage0good = read_usage_struct(0);
800080a4:	30 0c       	mov	r12,0
800080a6:	f0 1f 00 ae 	mcall	8000835c <init_led_board_info+0x2c8>
800080aa:	18 98       	mov	r8,r12
800080ac:	ef 68 ff ee 	st.b	r7[-18],r8
	usage1good = read_usage_struct(1);
800080b0:	30 1c       	mov	r12,1
800080b2:	f0 1f 00 ab 	mcall	8000835c <init_led_board_info+0x2c8>
800080b6:	18 98       	mov	r8,r12
800080b8:	ef 68 ff ef 	st.b	r7[-17],r8
	
	if (usage0good)
800080bc:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800080c0:	30 08       	mov	r8,0
800080c2:	f0 09 18 00 	cp.b	r9,r8
800080c6:	c0 50       	breq	800080d0 <init_led_board_info+0x3c>
	{
		load_usage_indeces(0);
800080c8:	30 0c       	mov	r12,0
800080ca:	f0 1f 00 a6 	mcall	80008360 <init_led_board_info+0x2cc>
800080ce:	c0 88       	rjmp	800080de <init_led_board_info+0x4a>
	}
	else
	{
		memset(&usageShdw[0], 0x00, sizeof(usageShdw[0]));
800080d0:	e0 6a 03 c1 	mov	r10,961
800080d4:	30 0b       	mov	r11,0
800080d6:	fe fc 02 8e 	ld.w	r12,pc[654]
800080da:	f0 1f 00 a4 	mcall	80008368 <init_led_board_info+0x2d4>
	}
	
	if (usage1good)
800080de:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800080e2:	30 08       	mov	r8,0
800080e4:	f0 09 18 00 	cp.b	r9,r8
800080e8:	c0 50       	breq	800080f2 <init_led_board_info+0x5e>
	{
		load_usage_indeces(1);
800080ea:	30 1c       	mov	r12,1
800080ec:	f0 1f 00 9d 	mcall	80008360 <init_led_board_info+0x2cc>
800080f0:	c0 b8       	rjmp	80008106 <init_led_board_info+0x72>
	}
	else
	{
		memset(&usageShdw[1], 0x00, sizeof(usageShdw[1]));
800080f2:	fe f8 02 72 	ld.w	r8,pc[626]
800080f6:	f0 c8 fc 3f 	sub	r8,r8,-961
800080fa:	e0 6a 03 c1 	mov	r10,961
800080fe:	30 0b       	mov	r11,0
80008100:	10 9c       	mov	r12,r8
80008102:	f0 1f 00 9a 	mcall	80008368 <init_led_board_info+0x2d4>
	}
	
	if ((!usage0good) && (!usage1good)) //Chassis is probably powering up for the first time
80008106:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000810a:	30 08       	mov	r8,0
8000810c:	f0 09 18 00 	cp.b	r9,r8
80008110:	c3 a1       	brne	80008184 <init_led_board_info+0xf0>
80008112:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008116:	30 08       	mov	r8,0
80008118:	f0 09 18 00 	cp.b	r9,r8
8000811c:	c3 41       	brne	80008184 <init_led_board_info+0xf0>
	{
		if (test_flash(0) == ERROR)
8000811e:	30 0c       	mov	r12,0
80008120:	f0 1f 00 93 	mcall	8000836c <init_led_board_info+0x2d8>
80008124:	18 98       	mov	r8,r12
80008126:	10 99       	mov	r9,r8
80008128:	30 18       	mov	r8,1
8000812a:	f0 09 18 00 	cp.b	r9,r8
8000812e:	c0 31       	brne	80008134 <init_led_board_info+0xa0>
		{
			chassis_error();
80008130:	f0 1f 00 90 	mcall	80008370 <init_led_board_info+0x2dc>
		}
		if (test_flash(1) == ERROR)
80008134:	30 1c       	mov	r12,1
80008136:	f0 1f 00 8e 	mcall	8000836c <init_led_board_info+0x2d8>
8000813a:	18 98       	mov	r8,r12
8000813c:	10 99       	mov	r9,r8
8000813e:	30 18       	mov	r8,1
80008140:	f0 09 18 00 	cp.b	r9,r8
80008144:	c0 31       	brne	8000814a <init_led_board_info+0xb6>
		{
			chassis_error();
80008146:	f0 1f 00 8b 	mcall	80008370 <init_led_board_info+0x2dc>
		}
		add_new_led_board_sides_to_usage(0);
8000814a:	30 0c       	mov	r12,0
8000814c:	f0 1f 00 8a 	mcall	80008374 <init_led_board_info+0x2e0>
		load_usageIdx_to_ledBrdSide(0);
80008150:	30 0c       	mov	r12,0
80008152:	f0 1f 00 8a 	mcall	80008378 <init_led_board_info+0x2e4>
		usageShdw[0].csum = calc_usage_csum(0);
80008156:	30 0c       	mov	r12,0
80008158:	f0 1f 00 89 	mcall	8000837c <init_led_board_info+0x2e8>
8000815c:	18 98       	mov	r8,r12
8000815e:	fe f9 02 06 	ld.w	r9,pc[518]
80008162:	f3 68 03 c0 	st.b	r9[960],r8
		copy_usage_to_usage(1,0);
80008166:	30 0b       	mov	r11,0
80008168:	30 1c       	mov	r12,1
8000816a:	f0 1f 00 86 	mcall	80008380 <init_led_board_info+0x2ec>
		write_usage_to_flash(0);
8000816e:	30 0c       	mov	r12,0
80008170:	f0 1f 00 85 	mcall	80008384 <init_led_board_info+0x2f0>
		write_usage_to_flash(1);
80008174:	30 1c       	mov	r12,1
80008176:	f0 1f 00 84 	mcall	80008384 <init_led_board_info+0x2f0>
		pingPong = 0;
8000817a:	fe f9 02 0e 	ld.w	r9,pc[526]
8000817e:	30 08       	mov	r8,0
80008180:	b2 88       	st.b	r9[0x0],r8
	else
	{
		memset(&usageShdw[1], 0x00, sizeof(usageShdw[1]));
	}
	
	if ((!usage0good) && (!usage1good)) //Chassis is probably powering up for the first time
80008182:	ce 68       	rjmp	8000834e <init_led_board_info+0x2ba>
		write_usage_to_flash(0);
		write_usage_to_flash(1);
		pingPong = 0;
		
	}
	else if (usage0good && usage1good) //Both usage structs are good, find the newer one
80008184:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008188:	30 08       	mov	r8,0
8000818a:	f0 09 18 00 	cp.b	r9,r8
8000818e:	c7 a0       	breq	80008282 <init_led_board_info+0x1ee>
80008190:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80008194:	30 08       	mov	r8,0
80008196:	f0 09 18 00 	cp.b	r9,r8
8000819a:	c7 40       	breq	80008282 <init_led_board_info+0x1ee>
	{
		usage0cnt = calc_usage_current_led_boards(0);
8000819c:	30 0c       	mov	r12,0
8000819e:	f0 1f 00 7c 	mcall	8000838c <init_led_board_info+0x2f8>
800081a2:	18 98       	mov	r8,r12
800081a4:	ef 48 ff f0 	st.w	r7[-16],r8
		usage1cnt = calc_usage_current_led_boards(1);
800081a8:	30 1c       	mov	r12,1
800081aa:	f0 1f 00 79 	mcall	8000838c <init_led_board_info+0x2f8>
800081ae:	18 98       	mov	r8,r12
800081b0:	ef 48 ff f4 	st.w	r7[-12],r8
		
		if (usage0cnt >= usage1cnt)
800081b4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800081b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800081bc:	10 39       	cp.w	r9,r8
800081be:	c0 53       	brcs	800081c8 <init_led_board_info+0x134>
		{
			newer = 0;
800081c0:	30 08       	mov	r8,0
800081c2:	ef 68 ff fa 	st.b	r7[-6],r8
800081c6:	c0 48       	rjmp	800081ce <init_led_board_info+0x13a>
		}
		else
		{
			newer = 1;
800081c8:	30 18       	mov	r8,1
800081ca:	ef 68 ff fa 	st.b	r7[-6],r8
		}
		older = newer ^ 1; //older is the opposite of newer
800081ce:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800081d2:	ec 18 00 01 	eorl	r8,0x1
800081d6:	ef 68 ff fb 	st.b	r7[-5],r8
		
		if (test_flash(older) == ERROR)
800081da:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800081de:	10 9c       	mov	r12,r8
800081e0:	f0 1f 00 63 	mcall	8000836c <init_led_board_info+0x2d8>
800081e4:	18 98       	mov	r8,r12
800081e6:	10 99       	mov	r9,r8
800081e8:	30 18       	mov	r8,1
800081ea:	f0 09 18 00 	cp.b	r9,r8
800081ee:	c0 31       	brne	800081f4 <init_led_board_info+0x160>
		{
			chassis_error();
800081f0:	f0 1f 00 60 	mcall	80008370 <init_led_board_info+0x2dc>
		}

		add_new_led_board_sides_to_usage(newer);
800081f4:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800081f8:	10 9c       	mov	r12,r8
800081fa:	f0 1f 00 5f 	mcall	80008374 <init_led_board_info+0x2e0>
		load_usageIdx_to_ledBrdSide(newer);
800081fe:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008202:	10 9c       	mov	r12,r8
80008204:	f0 1f 00 5d 	mcall	80008378 <init_led_board_info+0x2e4>
		usageShdw[newer].csum = calc_usage_csum(newer);
80008208:	ef 36 ff fa 	ld.ub	r6,r7[-6]
8000820c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008210:	10 9c       	mov	r12,r8
80008212:	f0 1f 00 5b 	mcall	8000837c <init_led_board_info+0x2e8>
80008216:	18 98       	mov	r8,r12
80008218:	10 9a       	mov	r10,r8
8000821a:	4d 3b       	lddpc	r11,80008364 <init_led_board_info+0x2d0>
8000821c:	0c 98       	mov	r8,r6
8000821e:	a5 78       	lsl	r8,0x5
80008220:	0c 18       	sub	r8,r6
80008222:	f0 09 15 05 	lsl	r9,r8,0x5
80008226:	10 19       	sub	r9,r8
80008228:	f6 09 00 08 	add	r8,r11,r9
8000822c:	f0 c9 fc 40 	sub	r9,r8,-960
80008230:	14 98       	mov	r8,r10
80008232:	b2 88       	st.b	r9[0x0],r8
		copy_usage_to_usage(older, newer);
80008234:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80008238:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000823c:	12 9b       	mov	r11,r9
8000823e:	10 9c       	mov	r12,r8
80008240:	f0 1f 00 50 	mcall	80008380 <init_led_board_info+0x2ec>
		previouslyOlder = older;
80008244:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008248:	ef 68 ff fc 	st.b	r7[-4],r8
		write_usage_to_flash(previouslyOlder);
8000824c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80008250:	10 9c       	mov	r12,r8
80008252:	f0 1f 00 4d 	mcall	80008384 <init_led_board_info+0x2f0>
		if (test_flash(newer) == ERROR)
80008256:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000825a:	10 9c       	mov	r12,r8
8000825c:	f0 1f 00 44 	mcall	8000836c <init_led_board_info+0x2d8>
80008260:	18 98       	mov	r8,r12
80008262:	10 99       	mov	r9,r8
80008264:	30 18       	mov	r8,1
80008266:	f0 09 18 00 	cp.b	r9,r8
8000826a:	c0 31       	brne	80008270 <init_led_board_info+0x1dc>
		{
			chassis_error();
8000826c:	f0 1f 00 41 	mcall	80008370 <init_led_board_info+0x2dc>
		}

		write_usage_to_flash(newer);
80008270:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008274:	10 9c       	mov	r12,r8
80008276:	f0 1f 00 44 	mcall	80008384 <init_led_board_info+0x2f0>
		pingPong = 0;
8000827a:	4c 49       	lddpc	r9,80008388 <init_led_board_info+0x2f4>
8000827c:	30 08       	mov	r8,0
8000827e:	b2 88       	st.b	r9[0x0],r8
		write_usage_to_flash(0);
		write_usage_to_flash(1);
		pingPong = 0;
		
	}
	else if (usage0good && usage1good) //Both usage structs are good, find the newer one
80008280:	c6 78       	rjmp	8000834e <init_led_board_info+0x2ba>
		pingPong = 0;
		
	}
	else //Only one usage struct is good, the other was probably corrupted during a power-down while sanitizing
	{
		if (usage0good)
80008282:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80008286:	30 08       	mov	r8,0
80008288:	f0 09 18 00 	cp.b	r9,r8
8000828c:	c0 50       	breq	80008296 <init_led_board_info+0x202>
		{
			good = 0;
8000828e:	30 08       	mov	r8,0
80008290:	ef 68 ff fd 	st.b	r7[-3],r8
80008294:	c0 48       	rjmp	8000829c <init_led_board_info+0x208>
		}
		else
		{
			good = 1;
80008296:	30 18       	mov	r8,1
80008298:	ef 68 ff fd 	st.b	r7[-3],r8
		}
		bad = good ^ 1; //bad is the opposite of good
8000829c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800082a0:	ec 18 00 01 	eorl	r8,0x1
800082a4:	ef 68 ff fe 	st.b	r7[-2],r8
		
		if (test_flash(bad) == ERROR)
800082a8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800082ac:	10 9c       	mov	r12,r8
800082ae:	f0 1f 00 30 	mcall	8000836c <init_led_board_info+0x2d8>
800082b2:	18 98       	mov	r8,r12
800082b4:	10 99       	mov	r9,r8
800082b6:	30 18       	mov	r8,1
800082b8:	f0 09 18 00 	cp.b	r9,r8
800082bc:	c0 31       	brne	800082c2 <init_led_board_info+0x22e>
		{
			chassis_error();
800082be:	f0 1f 00 2d 	mcall	80008370 <init_led_board_info+0x2dc>
		}
		
		add_new_led_board_sides_to_usage(good);
800082c2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800082c6:	10 9c       	mov	r12,r8
800082c8:	f0 1f 00 2b 	mcall	80008374 <init_led_board_info+0x2e0>
		load_usageIdx_to_ledBrdSide(good);
800082cc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800082d0:	10 9c       	mov	r12,r8
800082d2:	f0 1f 00 2a 	mcall	80008378 <init_led_board_info+0x2e4>
		usageShdw[good].csum = calc_usage_csum(good);
800082d6:	ef 36 ff fd 	ld.ub	r6,r7[-3]
800082da:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800082de:	10 9c       	mov	r12,r8
800082e0:	f0 1f 00 27 	mcall	8000837c <init_led_board_info+0x2e8>
800082e4:	18 98       	mov	r8,r12
800082e6:	10 9a       	mov	r10,r8
800082e8:	49 fb       	lddpc	r11,80008364 <init_led_board_info+0x2d0>
800082ea:	0c 98       	mov	r8,r6
800082ec:	a5 78       	lsl	r8,0x5
800082ee:	0c 18       	sub	r8,r6
800082f0:	f0 09 15 05 	lsl	r9,r8,0x5
800082f4:	10 19       	sub	r9,r8
800082f6:	f6 09 00 08 	add	r8,r11,r9
800082fa:	f0 c9 fc 40 	sub	r9,r8,-960
800082fe:	14 98       	mov	r8,r10
80008300:	b2 88       	st.b	r9[0x0],r8
		copy_usage_to_usage(bad, good);
80008302:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80008306:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000830a:	12 9b       	mov	r11,r9
8000830c:	10 9c       	mov	r12,r8
8000830e:	f0 1f 00 1d 	mcall	80008380 <init_led_board_info+0x2ec>
		previouslyBad = bad;
80008312:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80008316:	ef 68 ff ff 	st.b	r7[-1],r8
		write_usage_to_flash(previouslyBad);
8000831a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000831e:	10 9c       	mov	r12,r8
80008320:	f0 1f 00 19 	mcall	80008384 <init_led_board_info+0x2f0>
		if (test_flash(good) == ERROR)
80008324:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008328:	10 9c       	mov	r12,r8
8000832a:	f0 1f 00 11 	mcall	8000836c <init_led_board_info+0x2d8>
8000832e:	18 98       	mov	r8,r12
80008330:	10 99       	mov	r9,r8
80008332:	30 18       	mov	r8,1
80008334:	f0 09 18 00 	cp.b	r9,r8
80008338:	c0 31       	brne	8000833e <init_led_board_info+0x2aa>
		{
			chassis_error();
8000833a:	f0 1f 00 0e 	mcall	80008370 <init_led_board_info+0x2dc>
		}
		
		write_usage_to_flash(good);
8000833e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80008342:	10 9c       	mov	r12,r8
80008344:	f0 1f 00 10 	mcall	80008384 <init_led_board_info+0x2f0>
		pingPong = 0;
80008348:	49 09       	lddpc	r9,80008388 <init_led_board_info+0x2f4>
8000834a:	30 08       	mov	r8,0
8000834c:	b2 88       	st.b	r9[0x0],r8
	}
	
}
8000834e:	2f bd       	sub	sp,-20
80008350:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008354:	80 00       	ld.sh	r0,r0[0x0]
80008356:	7d ec       	ld.w	r12,lr[0x78]
80008358:	80 00       	ld.sh	r0,r0[0x0]
8000835a:	64 a8       	ld.w	r8,r2[0x28]
8000835c:	80 00       	ld.sh	r0,r0[0x0]
8000835e:	70 c4       	ld.w	r4,r8[0x30]
80008360:	80 00       	ld.sh	r0,r0[0x0]
80008362:	6f 70       	ld.w	r0,r7[0x5c]
80008364:	00 00       	add	r0,r0
80008366:	03 84       	ld.ub	r4,r1[0x0]
80008368:	80 00       	ld.sh	r0,r0[0x0]
8000836a:	a0 4a       	st.h	r0[0x8],r10
8000836c:	80 00       	ld.sh	r0,r0[0x0]
8000836e:	71 58       	ld.w	r8,r8[0x54]
80008370:	80 00       	ld.sh	r0,r0[0x0]
80008372:	63 d0       	ld.w	r0,r1[0x74]
80008374:	80 00       	ld.sh	r0,r0[0x0]
80008376:	72 b0       	ld.w	r0,r9[0x2c]
80008378:	80 00       	ld.sh	r0,r0[0x0]
8000837a:	80 2c       	ld.sh	r12,r0[0x4]
8000837c:	80 00       	ld.sh	r0,r0[0x0]
8000837e:	74 44       	ld.w	r4,r10[0x10]
80008380:	80 00       	ld.sh	r0,r0[0x0]
80008382:	77 dc       	ld.w	r12,r11[0x74]
80008384:	80 00       	ld.sh	r0,r0[0x0]
80008386:	78 34       	ld.w	r4,r12[0xc]
80008388:	00 00       	add	r0,r0
8000838a:	0b 49       	ld.w	r9,--r5
8000838c:	80 00       	ld.sh	r0,r0[0x0]
8000838e:	78 84       	ld.w	r4,r12[0x20]

80008390 <main>:

/*! \brief Main File Section:
 *          - Initialization (CPU, TWI, Usart,...)
 */
int main(void)
{
80008390:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80008394:	1a 97       	mov	r7,sp
80008396:	fa cd 01 f8 	sub	sp,sp,504
	static unsigned char displayIdx = 0;
	
	// Initialize System Clock
	init_sys_clocks();
8000839a:	f0 1f 04 3f 	mcall	80009494 <main+0x1104>

	init_io();
8000839e:	f0 1f 04 3f 	mcall	80009498 <main+0x1108>
	

	// Initialize USART
	init_ecdbg_rs232(FPBA_HZ);
800083a2:	e0 6c 24 00 	mov	r12,9216
800083a6:	ea 1c 00 f4 	orh	r12,0xf4
800083aa:	f0 1f 04 3d 	mcall	8000949c <main+0x110c>
	init_display_rs232(FPBA_HZ);
800083ae:	e0 6c 24 00 	mov	r12,9216
800083b2:	ea 1c 00 f4 	orh	r12,0xf4
800083b6:	f0 1f 04 3b 	mcall	800094a0 <main+0x1110>

	// Print Startup Message
	print_ecdbg("SEAL SHIELD DEMO \r\n Copyright (c) 2015 Technical Solutions Group, Inc.\r\n");
800083ba:	fe fc 10 ea 	ld.w	r12,pc[4330]
800083be:	f0 1f 04 3b 	mcall	800094a8 <main+0x1118>
	display_text(IDX_READY);
800083c2:	30 0c       	mov	r12,0
800083c4:	f0 1f 04 3a 	mcall	800094ac <main+0x111c>
	
	// Initialize ADC for bluesense channels which are used to see if there are any devices (phones, tablets, etc.) on the shelves
	adc_process_init();
800083c8:	f0 1f 04 3a 	mcall	800094b0 <main+0x1120>

	
	// Initialize Interrupts
	irq_initialize_vectors(); //TODO: probably remove 5apr15
800083cc:	f0 1f 04 3a 	mcall	800094b4 <main+0x1124>

	cpu_irq_enable();
800083d0:	d5 03       	csrf	0x10

	// Initialize TWI Interface
	twi_init();
800083d2:	f0 1f 04 3a 	mcall	800094b8 <main+0x1128>

	gpio_set_pin_high(ECLAVE_LED_OEn); //make sure outputs are disabled at the chip level
800083d6:	31 6c       	mov	r12,22
800083d8:	f0 1f 04 39 	mcall	800094bc <main+0x112c>
	PCA9952_init();
800083dc:	f0 1f 04 39 	mcall	800094c0 <main+0x1130>
	
	electroclaveState = STATE_EC_IDLE;
800083e0:	fe f9 10 e4 	ld.w	r9,pc[4324]
800083e4:	30 08       	mov	r8,0
800083e6:	b2 88       	st.b	r9[0x0],r8
	
	init_led_board_info();
800083e8:	f0 1f 04 38 	mcall	800094c8 <main+0x1138>
	
	gpio_set_pin_low(ECLAVE_LED_OEn); //...and we are live!
800083ec:	31 6c       	mov	r12,22
800083ee:	f0 1f 04 38 	mcall	800094cc <main+0x113c>
	gpio_set_pin_low(ECLAVE_PSUPPLY_ONn); //turn the leds on first and then the power supply
800083f2:	31 7c       	mov	r12,23
800083f4:	f0 1f 04 36 	mcall	800094cc <main+0x113c>
800083f8:	e0 68 03 e8 	mov	r8,1000
800083fc:	ef 48 fe d8 	st.w	r7[-296],r8
80008400:	e0 68 12 00 	mov	r8,4608
80008404:	ea 18 00 7a 	orh	r8,0x7a
80008408:	ef 48 fe d4 	st.w	r7[-300],r8
8000840c:	ee f0 fe d8 	ld.w	r0,r7[-296]
80008410:	30 01       	mov	r1,0
80008412:	ee f2 fe d4 	ld.w	r2,r7[-300]
80008416:	30 03       	mov	r3,0
80008418:	e2 02 02 49 	mul	r9,r1,r2
8000841c:	e6 00 02 48 	mul	r8,r3,r0
80008420:	10 09       	add	r9,r8
80008422:	e0 02 06 4a 	mulu.d	r10,r0,r2
80008426:	16 09       	add	r9,r11
80008428:	12 9b       	mov	r11,r9
8000842a:	e0 68 03 e7 	mov	r8,999
8000842e:	30 09       	mov	r9,0
80008430:	10 0a       	add	r10,r8
80008432:	f6 09 00 4b 	adc	r11,r11,r9
80008436:	e0 68 03 e8 	mov	r8,1000
8000843a:	30 09       	mov	r9,0
8000843c:	f0 1f 04 25 	mcall	800094d0 <main+0x1140>
80008440:	14 98       	mov	r8,r10
80008442:	16 99       	mov	r9,r11
	
	cpu_set_timeout(EC_ONE_SECOND/2, &debugTimer);
80008444:	a1 98       	lsr	r8,0x1
80008446:	ef 48 fe e0 	st.w	r7[-288],r8
8000844a:	fe f8 10 8a 	ld.w	r8,pc[4234]
8000844e:	ef 48 fe dc 	st.w	r7[-292],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008452:	e1 b8 00 42 	mfsr	r8,0x108
80008456:	10 99       	mov	r9,r8
80008458:	ee f8 fe dc 	ld.w	r8,r7[-292]
8000845c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000845e:	ee f8 fe dc 	ld.w	r8,r7[-292]
80008462:	70 09       	ld.w	r9,r8[0x0]
80008464:	ee f8 fe e0 	ld.w	r8,r7[-288]
80008468:	10 09       	add	r9,r8
8000846a:	ee f8 fe dc 	ld.w	r8,r7[-292]
8000846e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008470:	ee f9 fe dc 	ld.w	r9,r7[-292]
80008474:	30 08       	mov	r8,0
80008476:	f3 68 00 08 	st.b	r9[8],r8
8000847a:	c0 28       	rjmp	8000847e <main+0xee>
		{
			cpu_stop_timeout(&debugTimer);
			cpu_set_timeout((EC_ONE_SECOND/2), &debugTimer);
			gpio_toggle_pin(ECLAVE_DEBUG_LED);
		}
	} //while(true)
8000847c:	d7 03       	nop


	// Main loop
	while (true) {

		switch(electroclaveState)
8000847e:	fe f8 10 46 	ld.w	r8,pc[4166]
80008482:	11 88       	ld.ub	r8,r8[0x0]
80008484:	10 99       	mov	r9,r8
80008486:	58 89       	cp.w	r9,8
80008488:	e0 8b 06 7a 	brhi	8000917c <main+0xdec>
8000848c:	fe f8 10 4c 	ld.w	r8,pc[4172]
80008490:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
		{
			case STATE_EC_IDLE:
				if (EC_DOOR_LATCHED) {
80008494:	33 ec       	mov	r12,62
80008496:	f0 1f 04 12 	mcall	800094dc <main+0x114c>
8000849a:	18 98       	mov	r8,r12
8000849c:	ec 18 00 01 	eorl	r8,0x1
800084a0:	5c 58       	castu.b	r8
800084a2:	e0 80 06 64 	breq	8000916a <main+0xdda>
					gpio_set_pin_low(ECLAVE_DEBUG_LED);
800084a6:	37 cc       	mov	r12,124
800084a8:	f0 1f 04 09 	mcall	800094cc <main+0x113c>
					print_ecdbg("Door latch detected\r\n");
800084ac:	fe fc 10 34 	ld.w	r12,pc[4148]
800084b0:	f0 1f 03 fe 	mcall	800094a8 <main+0x1118>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
800084b4:	30 0c       	mov	r12,0
800084b6:	f0 1f 03 fe 	mcall	800094ac <main+0x111c>
					electroclaveState = STATE_DOOR_LATCHED;
800084ba:	fe f9 10 0a 	ld.w	r9,pc[4106]
800084be:	30 18       	mov	r8,1
800084c0:	b2 88       	st.b	r9[0x0],r8
					firstTimeThrough = 1;
800084c2:	fe f9 10 22 	ld.w	r9,pc[4130]
800084c6:	30 18       	mov	r8,1
800084c8:	b2 88       	st.b	r9[0x0],r8
				}
				break;
800084ca:	e0 8f 06 59 	bral	8000917c <main+0xdec>
				
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
800084ce:	33 fc       	mov	r12,63
800084d0:	f0 1f 04 03 	mcall	800094dc <main+0x114c>
800084d4:	18 98       	mov	r8,r12
800084d6:	58 08       	cp.w	r8,0
800084d8:	e0 80 06 4b 	breq	8000916e <main+0xdde>
					print_ecdbg("Action push button press detected\r\n");
800084dc:	fe fc 10 0c 	ld.w	r12,pc[4108]
800084e0:	f0 1f 03 f2 	mcall	800094a8 <main+0x1118>
					electroclaveState = STATE_ACTION_PB_PRESSED;
800084e4:	fe f9 0f e0 	ld.w	r9,pc[4064]
800084e8:	30 28       	mov	r8,2
800084ea:	b2 88       	st.b	r9[0x0],r8
				}
				break;
800084ec:	e0 8f 06 48 	bral	8000917c <main+0xdec>
				
			case STATE_ACTION_PB_PRESSED:
				if (EC_ACTION_PB)
800084f0:	33 fc       	mov	r12,63
800084f2:	f0 1f 03 fb 	mcall	800094dc <main+0x114c>
800084f6:	18 98       	mov	r8,r12
800084f8:	ec 18 00 01 	eorl	r8,0x1
800084fc:	5c 58       	castu.b	r8
800084fe:	e0 80 06 3a 	breq	80009172 <main+0xde2>
				{
					print_ecdbg("Action push button release detected\r\n");
80008502:	fe fc 0f ea 	ld.w	r12,pc[4074]
80008506:	f0 1f 03 e9 	mcall	800094a8 <main+0x1118>
					electroclaveState = STATE_ACTION_PB_RELEASED;	
8000850a:	fe f9 0f ba 	ld.w	r9,pc[4026]
8000850e:	30 38       	mov	r8,3
80008510:	b2 88       	st.b	r9[0x0],r8
				}
				break;
80008512:	e0 8f 06 35 	bral	8000917c <main+0xdec>
				
			case STATE_ACTION_PB_RELEASED:
				check_led_brd_side_lifetimes();
80008516:	f0 1f 03 f7 	mcall	800094f0 <main+0x1160>
				check_shelves_for_devices();
8000851a:	f0 1f 03 f7 	mcall	800094f4 <main+0x1164>
				set_shelves_active_inactive();
8000851e:	f0 1f 03 f7 	mcall	800094f8 <main+0x1168>
				
				if (num_active_shelves() != 0) {
80008522:	f0 1f 03 f7 	mcall	800094fc <main+0x116c>
80008526:	18 98       	mov	r8,r12
80008528:	58 08       	cp.w	r8,0
8000852a:	e0 80 01 72 	breq	8000880e <main+0x47e>
					electroclaveState = STATE_START_SANITIZE;	
8000852e:	fe f9 0f 96 	ld.w	r9,pc[3990]
80008532:	30 48       	mov	r8,4
80008534:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("Start sanitizing\r\n");
80008536:	fe fc 0f ca 	ld.w	r12,pc[4042]
8000853a:	f0 1f 03 dc 	mcall	800094a8 <main+0x1118>
					display_text(IDX_CLEAR);
8000853e:	30 9c       	mov	r12,9
80008540:	f0 1f 03 db 	mcall	800094ac <main+0x111c>
80008544:	e0 68 01 f4 	mov	r8,500
80008548:	ef 48 fe e8 	st.w	r7[-280],r8
8000854c:	e0 68 12 00 	mov	r8,4608
80008550:	ea 18 00 7a 	orh	r8,0x7a
80008554:	ef 48 fe e4 	st.w	r7[-284],r8
80008558:	ee f8 fe e8 	ld.w	r8,r7[-280]
8000855c:	ef 48 fe f0 	st.w	r7[-272],r8
80008560:	ee f8 fe e4 	ld.w	r8,r7[-284]
80008564:	ef 48 fe ec 	st.w	r7[-276],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008568:	ee fc fe f0 	ld.w	r12,r7[-272]
8000856c:	ef 4c fe 14 	st.w	r7[-492],r12
80008570:	30 0a       	mov	r10,0
80008572:	ef 4a fe 10 	st.w	r7[-496],r10
80008576:	ee f8 fe ec 	ld.w	r8,r7[-276]
8000857a:	ef 48 fe 0c 	st.w	r7[-500],r8
8000857e:	30 0c       	mov	r12,0
80008580:	ef 4c fe 08 	st.w	r7[-504],r12
80008584:	ee f9 fe 10 	ld.w	r9,r7[-496]
80008588:	ee fa fe 0c 	ld.w	r10,r7[-500]
8000858c:	b5 39       	mul	r9,r10
8000858e:	ee f8 fe 08 	ld.w	r8,r7[-504]
80008592:	ee fc fe 14 	ld.w	r12,r7[-492]
80008596:	b9 38       	mul	r8,r12
80008598:	10 09       	add	r9,r8
8000859a:	ee f8 fe 14 	ld.w	r8,r7[-492]
8000859e:	ee fc fe 0c 	ld.w	r12,r7[-500]
800085a2:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800085a6:	16 09       	add	r9,r11
800085a8:	12 9b       	mov	r11,r9
800085aa:	e0 68 03 e7 	mov	r8,999
800085ae:	30 09       	mov	r9,0
800085b0:	10 0a       	add	r10,r8
800085b2:	f6 09 00 4b 	adc	r11,r11,r9
800085b6:	e0 68 03 e8 	mov	r8,1000
800085ba:	30 09       	mov	r9,0
800085bc:	f0 1f 03 c5 	mcall	800094d0 <main+0x1140>
800085c0:	14 98       	mov	r8,r10
800085c2:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800085c4:	ef 48 fe f8 	st.w	r7[-264],r8
800085c8:	ee c8 01 68 	sub	r8,r7,360
800085cc:	ef 48 fe f4 	st.w	r7[-268],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800085d0:	e1 b8 00 42 	mfsr	r8,0x108
800085d4:	10 99       	mov	r9,r8
800085d6:	ee f8 fe f4 	ld.w	r8,r7[-268]
800085da:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800085dc:	ee f8 fe f4 	ld.w	r8,r7[-268]
800085e0:	70 09       	ld.w	r9,r8[0x0]
800085e2:	ee f8 fe f8 	ld.w	r8,r7[-264]
800085e6:	10 09       	add	r9,r8
800085e8:	ee f8 fe f4 	ld.w	r8,r7[-268]
800085ec:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800085ee:	ee f9 fe f4 	ld.w	r9,r7[-268]
800085f2:	30 08       	mov	r8,0
800085f4:	f3 68 00 08 	st.b	r9[8],r8
800085f8:	ee c8 01 68 	sub	r8,r7,360
800085fc:	ef 48 fe fc 	st.w	r7[-260],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008600:	e1 b8 00 42 	mfsr	r8,0x108
80008604:	ef 48 ff 00 	st.w	r7[-256],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008608:	ee f8 fe fc 	ld.w	r8,r7[-260]
8000860c:	f1 39 00 08 	ld.ub	r9,r8[8]
80008610:	30 28       	mov	r8,2
80008612:	f0 09 18 00 	cp.b	r9,r8
80008616:	c0 31       	brne	8000861c <main+0x28c>
    return false;
80008618:	30 08       	mov	r8,0
8000861a:	c4 38       	rjmp	800086a0 <main+0x310>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000861c:	ee f8 fe fc 	ld.w	r8,r7[-260]
80008620:	f1 39 00 08 	ld.ub	r9,r8[8]
80008624:	30 18       	mov	r8,1
80008626:	f0 09 18 00 	cp.b	r9,r8
8000862a:	c0 31       	brne	80008630 <main+0x2a0>
    return true;
8000862c:	30 18       	mov	r8,1
8000862e:	c3 98       	rjmp	800086a0 <main+0x310>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008630:	ee f8 fe fc 	ld.w	r8,r7[-260]
80008634:	70 09       	ld.w	r9,r8[0x0]
80008636:	ee f8 fe fc 	ld.w	r8,r7[-260]
8000863a:	70 18       	ld.w	r8,r8[0x4]
8000863c:	10 39       	cp.w	r9,r8
8000863e:	e0 88 00 1a 	brls	80008672 <main+0x2e2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008642:	ee f8 fe fc 	ld.w	r8,r7[-260]
80008646:	70 09       	ld.w	r9,r8[0x0]
80008648:	ee f8 ff 00 	ld.w	r8,r7[-256]
8000864c:	12 38       	cp.w	r8,r9
8000864e:	c1 02       	brcc	8000866e <main+0x2de>
80008650:	ee f8 fe fc 	ld.w	r8,r7[-260]
80008654:	70 19       	ld.w	r9,r8[0x4]
80008656:	ee f8 ff 00 	ld.w	r8,r7[-256]
8000865a:	12 38       	cp.w	r8,r9
8000865c:	e0 88 00 09 	brls	8000866e <main+0x2de>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008660:	ee f9 fe fc 	ld.w	r9,r7[-260]
80008664:	30 18       	mov	r8,1
80008666:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000866a:	30 18       	mov	r8,1
8000866c:	c1 a8       	rjmp	800086a0 <main+0x310>
    }
    return false;
8000866e:	30 08       	mov	r8,0
80008670:	c1 88       	rjmp	800086a0 <main+0x310>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008672:	ee f8 fe fc 	ld.w	r8,r7[-260]
80008676:	70 09       	ld.w	r9,r8[0x0]
80008678:	ee f8 ff 00 	ld.w	r8,r7[-256]
8000867c:	12 38       	cp.w	r8,r9
8000867e:	c0 93       	brcs	80008690 <main+0x300>
80008680:	ee f8 fe fc 	ld.w	r8,r7[-260]
80008684:	70 19       	ld.w	r9,r8[0x4]
80008686:	ee f8 ff 00 	ld.w	r8,r7[-256]
8000868a:	12 38       	cp.w	r8,r9
8000868c:	e0 88 00 09 	brls	8000869e <main+0x30e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008690:	ee f9 fe fc 	ld.w	r9,r7[-260]
80008694:	30 18       	mov	r8,1
80008696:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000869a:	30 18       	mov	r8,1
8000869c:	c0 28       	rjmp	800086a0 <main+0x310>
    }
    return false;
8000869e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800086a0:	58 08       	cp.w	r8,0
800086a2:	ca b0       	breq	800085f8 <main+0x268>
					cpu_delay_ms(500, 8000000);
					display_text(IDX_CLEANING);
800086a4:	30 2c       	mov	r12,2
800086a6:	f0 1f 03 82 	mcall	800094ac <main+0x111c>
800086aa:	e0 68 0b b8 	mov	r8,3000
800086ae:	ef 48 ff 08 	st.w	r7[-248],r8
800086b2:	e0 68 12 00 	mov	r8,4608
800086b6:	ea 18 00 7a 	orh	r8,0x7a
800086ba:	ef 48 ff 04 	st.w	r7[-252],r8
800086be:	ee f8 ff 08 	ld.w	r8,r7[-248]
800086c2:	ef 48 ff 10 	st.w	r7[-240],r8
800086c6:	ee f8 ff 04 	ld.w	r8,r7[-252]
800086ca:	ef 48 ff 0c 	st.w	r7[-244],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800086ce:	ee fa ff 10 	ld.w	r10,r7[-240]
800086d2:	ef 4a fe 24 	st.w	r7[-476],r10
800086d6:	30 08       	mov	r8,0
800086d8:	ef 48 fe 20 	st.w	r7[-480],r8
800086dc:	ee fc ff 0c 	ld.w	r12,r7[-244]
800086e0:	ef 4c fe 1c 	st.w	r7[-484],r12
800086e4:	30 0a       	mov	r10,0
800086e6:	ef 4a fe 18 	st.w	r7[-488],r10
800086ea:	ee f9 fe 20 	ld.w	r9,r7[-480]
800086ee:	ee f8 fe 1c 	ld.w	r8,r7[-484]
800086f2:	b1 39       	mul	r9,r8
800086f4:	ee f8 fe 18 	ld.w	r8,r7[-488]
800086f8:	ee fc fe 24 	ld.w	r12,r7[-476]
800086fc:	b9 38       	mul	r8,r12
800086fe:	10 09       	add	r9,r8
80008700:	ee f8 fe 24 	ld.w	r8,r7[-476]
80008704:	ee fc fe 1c 	ld.w	r12,r7[-484]
80008708:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000870c:	16 09       	add	r9,r11
8000870e:	12 9b       	mov	r11,r9
80008710:	e0 68 03 e7 	mov	r8,999
80008714:	30 09       	mov	r9,0
80008716:	10 0a       	add	r10,r8
80008718:	f6 09 00 4b 	adc	r11,r11,r9
8000871c:	e0 68 03 e8 	mov	r8,1000
80008720:	30 09       	mov	r9,0
80008722:	f0 1f 03 6c 	mcall	800094d0 <main+0x1140>
80008726:	14 98       	mov	r8,r10
80008728:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000872a:	ef 48 ff 18 	st.w	r7[-232],r8
8000872e:	ee c8 01 5c 	sub	r8,r7,348
80008732:	ef 48 ff 14 	st.w	r7[-236],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008736:	e1 b8 00 42 	mfsr	r8,0x108
8000873a:	10 99       	mov	r9,r8
8000873c:	ee f8 ff 14 	ld.w	r8,r7[-236]
80008740:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008742:	ee f8 ff 14 	ld.w	r8,r7[-236]
80008746:	70 09       	ld.w	r9,r8[0x0]
80008748:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000874c:	10 09       	add	r9,r8
8000874e:	ee f8 ff 14 	ld.w	r8,r7[-236]
80008752:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008754:	ee f9 ff 14 	ld.w	r9,r7[-236]
80008758:	30 08       	mov	r8,0
8000875a:	f3 68 00 08 	st.b	r9[8],r8
8000875e:	ee c8 01 5c 	sub	r8,r7,348
80008762:	ef 48 ff 1c 	st.w	r7[-228],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008766:	e1 b8 00 42 	mfsr	r8,0x108
8000876a:	ef 48 ff 20 	st.w	r7[-224],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000876e:	ee f8 ff 1c 	ld.w	r8,r7[-228]
80008772:	f1 39 00 08 	ld.ub	r9,r8[8]
80008776:	30 28       	mov	r8,2
80008778:	f0 09 18 00 	cp.b	r9,r8
8000877c:	c0 31       	brne	80008782 <main+0x3f2>
    return false;
8000877e:	30 08       	mov	r8,0
80008780:	c4 38       	rjmp	80008806 <main+0x476>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008782:	ee f8 ff 1c 	ld.w	r8,r7[-228]
80008786:	f1 39 00 08 	ld.ub	r9,r8[8]
8000878a:	30 18       	mov	r8,1
8000878c:	f0 09 18 00 	cp.b	r9,r8
80008790:	c0 31       	brne	80008796 <main+0x406>
    return true;
80008792:	30 18       	mov	r8,1
80008794:	c3 98       	rjmp	80008806 <main+0x476>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008796:	ee f8 ff 1c 	ld.w	r8,r7[-228]
8000879a:	70 09       	ld.w	r9,r8[0x0]
8000879c:	ee f8 ff 1c 	ld.w	r8,r7[-228]
800087a0:	70 18       	ld.w	r8,r8[0x4]
800087a2:	10 39       	cp.w	r9,r8
800087a4:	e0 88 00 1a 	brls	800087d8 <main+0x448>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800087a8:	ee f8 ff 1c 	ld.w	r8,r7[-228]
800087ac:	70 09       	ld.w	r9,r8[0x0]
800087ae:	ee f8 ff 20 	ld.w	r8,r7[-224]
800087b2:	12 38       	cp.w	r8,r9
800087b4:	c1 02       	brcc	800087d4 <main+0x444>
800087b6:	ee f8 ff 1c 	ld.w	r8,r7[-228]
800087ba:	70 19       	ld.w	r9,r8[0x4]
800087bc:	ee f8 ff 20 	ld.w	r8,r7[-224]
800087c0:	12 38       	cp.w	r8,r9
800087c2:	e0 88 00 09 	brls	800087d4 <main+0x444>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800087c6:	ee f9 ff 1c 	ld.w	r9,r7[-228]
800087ca:	30 18       	mov	r8,1
800087cc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800087d0:	30 18       	mov	r8,1
800087d2:	c1 a8       	rjmp	80008806 <main+0x476>
    }
    return false;
800087d4:	30 08       	mov	r8,0
800087d6:	c1 88       	rjmp	80008806 <main+0x476>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800087d8:	ee f8 ff 1c 	ld.w	r8,r7[-228]
800087dc:	70 09       	ld.w	r9,r8[0x0]
800087de:	ee f8 ff 20 	ld.w	r8,r7[-224]
800087e2:	12 38       	cp.w	r8,r9
800087e4:	c0 93       	brcs	800087f6 <main+0x466>
800087e6:	ee f8 ff 1c 	ld.w	r8,r7[-228]
800087ea:	70 19       	ld.w	r9,r8[0x4]
800087ec:	ee f8 ff 20 	ld.w	r8,r7[-224]
800087f0:	12 38       	cp.w	r8,r9
800087f2:	e0 88 00 09 	brls	80008804 <main+0x474>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800087f6:	ee f9 ff 1c 	ld.w	r9,r7[-228]
800087fa:	30 18       	mov	r8,1
800087fc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008800:	30 18       	mov	r8,1
80008802:	c0 28       	rjmp	80008806 <main+0x476>
    }
    return false;
80008804:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80008806:	58 08       	cp.w	r8,0
80008808:	ca b0       	breq	8000875e <main+0x3ce>
					electroclaveState = STATE_START_CLEAN;
					print_ecdbg("No shelves, no devices or shelves are past lifetime, charging devices\r\n");
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
				}
				break;
8000880a:	e0 8f 04 b9 	bral	8000917c <main+0xdec>
					cpu_delay_ms(500, 8000000);
					display_text(IDX_CLEANING);
					cpu_delay_ms(3000, 8000000); //give display time to update, scroll all the way across
				}
				else {
					electroclaveState = STATE_START_CLEAN;
8000880e:	fe f9 0c b6 	ld.w	r9,pc[3254]
80008812:	30 68       	mov	r8,6
80008814:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("No shelves, no devices or shelves are past lifetime, charging devices\r\n");
80008816:	fe fc 0c ee 	ld.w	r12,pc[3310]
8000881a:	f0 1f 03 24 	mcall	800094a8 <main+0x1118>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
8000881e:	30 0c       	mov	r12,0
80008820:	f0 1f 03 23 	mcall	800094ac <main+0x111c>
				}
				break;
80008824:	e0 8f 04 ac 	bral	8000917c <main+0xdec>
				
			case STATE_START_SANITIZE:
				displayIdx = 0xFF; //this means not assigned yet
80008828:	fe f9 0c e0 	ld.w	r9,pc[3296]
8000882c:	3f f8       	mov	r8,-1
8000882e:	b2 88       	st.b	r9[0x0],r8
				sanitizeMinutes = 0;
80008830:	fe f9 0c dc 	ld.w	r9,pc[3292]
80008834:	30 08       	mov	r8,0
80008836:	93 08       	st.w	r9[0x0],r8
				for (int i = 0; i<NUM_SHELVES; i++) {
80008838:	30 08       	mov	r8,0
8000883a:	ef 48 fe c8 	st.w	r7[-312],r8
8000883e:	c3 b8       	rjmp	800088b4 <main+0x524>
					if (shelf[i].active == SHELF_ACTIVE) {
80008840:	ee f9 fe c8 	ld.w	r9,r7[-312]
80008844:	fe f8 0c cc 	ld.w	r8,pc[3276]
80008848:	f0 09 07 28 	ld.ub	r8,r8[r9<<0x2]
8000884c:	58 08       	cp.w	r8,0
8000884e:	c2 e1       	brne	800088aa <main+0x51a>
						tmpSanitizeMinutes = calc_sanitize_time(i);
80008850:	ee f8 fe c8 	ld.w	r8,r7[-312]
80008854:	5c 58       	castu.b	r8
80008856:	10 9c       	mov	r12,r8
80008858:	f0 1f 03 2f 	mcall	80009514 <main+0x1184>
8000885c:	18 99       	mov	r9,r12
8000885e:	fe f8 0c ba 	ld.w	r8,pc[3258]
80008862:	91 09       	st.w	r8[0x0],r9
						
						if (tmpSanitizeMinutes > sanitizeMinutes)
80008864:	fe f8 0c b4 	ld.w	r8,pc[3252]
80008868:	70 09       	ld.w	r9,r8[0x0]
8000886a:	fe f8 0c a2 	ld.w	r8,pc[3234]
8000886e:	70 08       	ld.w	r8,r8[0x0]
80008870:	10 39       	cp.w	r9,r8
80008872:	e0 88 00 08 	brls	80008882 <main+0x4f2>
						{
							sanitizeMinutes = tmpSanitizeMinutes;
80008876:	fe f8 0c a2 	ld.w	r8,pc[3234]
8000887a:	70 09       	ld.w	r9,r8[0x0]
8000887c:	fe f8 0c 90 	ld.w	r8,pc[3216]
80008880:	91 09       	st.w	r8[0x0],r9
						}
						
						led_shelf(i, LED_ON);
80008882:	ee f8 fe c8 	ld.w	r8,r7[-312]
80008886:	5c 58       	castu.b	r8
80008888:	30 1b       	mov	r11,1
8000888a:	10 9c       	mov	r12,r8
8000888c:	f0 1f 03 24 	mcall	8000951c <main+0x118c>
						
						if (displayIdx == 0xFF)
80008890:	fe f8 0c 78 	ld.w	r8,pc[3192]
80008894:	11 89       	ld.ub	r9,r8[0x0]
80008896:	3f f8       	mov	r8,-1
80008898:	f0 09 18 00 	cp.b	r9,r8
8000889c:	c0 71       	brne	800088aa <main+0x51a>
						{
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
8000889e:	ee f8 fe c8 	ld.w	r8,r7[-312]
800088a2:	5c 58       	castu.b	r8
800088a4:	fe f9 0c 64 	ld.w	r9,pc[3172]
800088a8:	b2 88       	st.b	r9[0x0],r8
				break;
				
			case STATE_START_SANITIZE:
				displayIdx = 0xFF; //this means not assigned yet
				sanitizeMinutes = 0;
				for (int i = 0; i<NUM_SHELVES; i++) {
800088aa:	ee f8 fe c8 	ld.w	r8,r7[-312]
800088ae:	2f f8       	sub	r8,-1
800088b0:	ef 48 fe c8 	st.w	r7[-312],r8
800088b4:	ee f8 fe c8 	ld.w	r8,r7[-312]
800088b8:	58 38       	cp.w	r8,3
800088ba:	fe 9a ff c3 	brle	80008840 <main+0x4b0>
800088be:	e0 68 1f 40 	mov	r8,8000
800088c2:	ef 48 ff 28 	st.w	r7[-216],r8
800088c6:	e0 68 12 00 	mov	r8,4608
800088ca:	ea 18 00 7a 	orh	r8,0x7a
800088ce:	ef 48 ff 24 	st.w	r7[-220],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800088d2:	ee fa ff 28 	ld.w	r10,r7[-216]
800088d6:	ef 4a fe 34 	st.w	r7[-460],r10
800088da:	30 08       	mov	r8,0
800088dc:	ef 48 fe 30 	st.w	r7[-464],r8
800088e0:	ee fc ff 24 	ld.w	r12,r7[-220]
800088e4:	ef 4c fe 2c 	st.w	r7[-468],r12
800088e8:	30 0a       	mov	r10,0
800088ea:	ef 4a fe 28 	st.w	r7[-472],r10
800088ee:	ee f9 fe 30 	ld.w	r9,r7[-464]
800088f2:	ee f8 fe 2c 	ld.w	r8,r7[-468]
800088f6:	b1 39       	mul	r9,r8
800088f8:	ee f8 fe 28 	ld.w	r8,r7[-472]
800088fc:	ee fc fe 34 	ld.w	r12,r7[-460]
80008900:	b9 38       	mul	r8,r12
80008902:	10 09       	add	r9,r8
80008904:	ee f8 fe 34 	ld.w	r8,r7[-460]
80008908:	ee fc fe 2c 	ld.w	r12,r7[-468]
8000890c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008910:	16 09       	add	r9,r11
80008912:	12 9b       	mov	r11,r9
80008914:	e0 68 03 e7 	mov	r8,999
80008918:	30 09       	mov	r9,0
8000891a:	10 0a       	add	r10,r8
8000891c:	f6 09 00 4b 	adc	r11,r11,r9
80008920:	e0 68 03 e8 	mov	r8,1000
80008924:	30 09       	mov	r9,0
80008926:	f0 1f 02 eb 	mcall	800094d0 <main+0x1140>
8000892a:	14 98       	mov	r8,r10
8000892c:	16 99       	mov	r9,r11
							displayIdx = i; //set this to the first active shelf if this is the first active shelf encountered
						}
					}
				}
				
				displayTimerSeconds = cpu_ms_2_cy(8000, 8000000); //8 seconds per "shelf" display is enough time for the text to scroll twice
8000892e:	10 99       	mov	r9,r8
80008930:	fe f8 0b f0 	ld.w	r8,pc[3056]
80008934:	91 09       	st.w	r8[0x0],r9
				cpu_set_timeout(displayTimerSeconds, &displayTimer);
80008936:	fe f8 0b ea 	ld.w	r8,pc[3050]
8000893a:	70 08       	ld.w	r8,r8[0x0]
8000893c:	ef 48 ff 30 	st.w	r7[-208],r8
80008940:	fe f8 0b e4 	ld.w	r8,pc[3044]
80008944:	ef 48 ff 2c 	st.w	r7[-212],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008948:	e1 b8 00 42 	mfsr	r8,0x108
8000894c:	10 99       	mov	r9,r8
8000894e:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80008952:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008954:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80008958:	70 09       	ld.w	r9,r8[0x0]
8000895a:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000895e:	10 09       	add	r9,r8
80008960:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80008964:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008966:	ee f9 ff 2c 	ld.w	r9,r7[-212]
8000896a:	30 08       	mov	r8,0
8000896c:	f3 68 00 08 	st.b	r9[8],r8
80008970:	e0 68 03 e8 	mov	r8,1000
80008974:	ef 48 ff 38 	st.w	r7[-200],r8
80008978:	e0 68 12 00 	mov	r8,4608
8000897c:	ea 18 00 7a 	orh	r8,0x7a
80008980:	ef 48 ff 34 	st.w	r7[-204],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008984:	ee fa ff 38 	ld.w	r10,r7[-200]
80008988:	ef 4a fe 44 	st.w	r7[-444],r10
8000898c:	30 08       	mov	r8,0
8000898e:	ef 48 fe 40 	st.w	r7[-448],r8
80008992:	ee fc ff 34 	ld.w	r12,r7[-204]
80008996:	ef 4c fe 3c 	st.w	r7[-452],r12
8000899a:	30 0a       	mov	r10,0
8000899c:	ef 4a fe 38 	st.w	r7[-456],r10
800089a0:	ee f9 fe 40 	ld.w	r9,r7[-448]
800089a4:	ee f8 fe 3c 	ld.w	r8,r7[-452]
800089a8:	b1 39       	mul	r9,r8
800089aa:	ee f8 fe 38 	ld.w	r8,r7[-456]
800089ae:	ee fc fe 44 	ld.w	r12,r7[-444]
800089b2:	b9 38       	mul	r8,r12
800089b4:	10 09       	add	r9,r8
800089b6:	ee f8 fe 44 	ld.w	r8,r7[-444]
800089ba:	ee fc fe 3c 	ld.w	r12,r7[-452]
800089be:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800089c2:	16 09       	add	r9,r11
800089c4:	12 9b       	mov	r11,r9
800089c6:	e0 68 03 e7 	mov	r8,999
800089ca:	30 09       	mov	r9,0
800089cc:	10 0a       	add	r10,r8
800089ce:	f6 09 00 4b 	adc	r11,r11,r9
800089d2:	e0 68 03 e8 	mov	r8,1000
800089d6:	30 09       	mov	r9,0
800089d8:	f0 1f 02 be 	mcall	800094d0 <main+0x1140>
800089dc:	14 98       	mov	r8,r10
800089de:	16 99       	mov	r9,r11
				
				cpu_set_timeout((sanitizeMinutes * 60 * cpu_ms_2_cy(1000, 8000000)), &sanitizeTimer);
800089e0:	10 99       	mov	r9,r8
800089e2:	fe f8 0b 2a 	ld.w	r8,pc[2858]
800089e6:	70 08       	ld.w	r8,r8[0x0]
800089e8:	b1 39       	mul	r9,r8
800089ea:	12 98       	mov	r8,r9
800089ec:	a5 68       	lsl	r8,0x4
800089ee:	12 18       	sub	r8,r9
800089f0:	a3 68       	lsl	r8,0x2
800089f2:	ef 48 ff 40 	st.w	r7[-192],r8
800089f6:	fe f8 0b 32 	ld.w	r8,pc[2866]
800089fa:	ef 48 ff 3c 	st.w	r7[-196],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800089fe:	e1 b8 00 42 	mfsr	r8,0x108
80008a02:	10 99       	mov	r9,r8
80008a04:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80008a08:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008a0a:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80008a0e:	70 09       	ld.w	r9,r8[0x0]
80008a10:	ee f8 ff 40 	ld.w	r8,r7[-192]
80008a14:	10 09       	add	r9,r8
80008a16:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80008a1a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008a1c:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80008a20:	30 08       	mov	r8,0
80008a22:	f3 68 00 08 	st.b	r9[8],r8
80008a26:	e0 68 03 e8 	mov	r8,1000
80008a2a:	ef 48 ff 48 	st.w	r7[-184],r8
80008a2e:	e0 68 12 00 	mov	r8,4608
80008a32:	ea 18 00 7a 	orh	r8,0x7a
80008a36:	ef 48 ff 44 	st.w	r7[-188],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008a3a:	ee fa ff 48 	ld.w	r10,r7[-184]
80008a3e:	ef 4a fe 54 	st.w	r7[-428],r10
80008a42:	30 08       	mov	r8,0
80008a44:	ef 48 fe 50 	st.w	r7[-432],r8
80008a48:	ee fc ff 44 	ld.w	r12,r7[-188]
80008a4c:	ef 4c fe 4c 	st.w	r7[-436],r12
80008a50:	30 0a       	mov	r10,0
80008a52:	ef 4a fe 48 	st.w	r7[-440],r10
80008a56:	ee f9 fe 50 	ld.w	r9,r7[-432]
80008a5a:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80008a5e:	b1 39       	mul	r9,r8
80008a60:	ee f8 fe 48 	ld.w	r8,r7[-440]
80008a64:	ee fc fe 54 	ld.w	r12,r7[-428]
80008a68:	b9 38       	mul	r8,r12
80008a6a:	10 09       	add	r9,r8
80008a6c:	ee f8 fe 54 	ld.w	r8,r7[-428]
80008a70:	ee fc fe 4c 	ld.w	r12,r7[-436]
80008a74:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008a78:	16 09       	add	r9,r11
80008a7a:	12 9b       	mov	r11,r9
80008a7c:	e0 68 03 e7 	mov	r8,999
80008a80:	30 09       	mov	r9,0
80008a82:	10 0a       	add	r10,r8
80008a84:	f6 09 00 4b 	adc	r11,r11,r9
80008a88:	e0 68 03 e8 	mov	r8,1000
80008a8c:	30 09       	mov	r9,0
80008a8e:	f0 1f 02 91 	mcall	800094d0 <main+0x1140>
80008a92:	14 98       	mov	r8,r10
80008a94:	16 99       	mov	r9,r11
				
				cpu_set_timeout((60 * cpu_ms_2_cy(1000,8000000)), &oneMinuteTimer); //one minute for the usage statistics
80008a96:	10 99       	mov	r9,r8
80008a98:	12 98       	mov	r8,r9
80008a9a:	a5 68       	lsl	r8,0x4
80008a9c:	12 18       	sub	r8,r9
80008a9e:	a3 68       	lsl	r8,0x2
80008aa0:	ef 48 ff 50 	st.w	r7[-176],r8
80008aa4:	fe f8 0a 88 	ld.w	r8,pc[2696]
80008aa8:	ef 48 ff 4c 	st.w	r7[-180],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008aac:	e1 b8 00 42 	mfsr	r8,0x108
80008ab0:	10 99       	mov	r9,r8
80008ab2:	ee f8 ff 4c 	ld.w	r8,r7[-180]
80008ab6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008ab8:	ee f8 ff 4c 	ld.w	r8,r7[-180]
80008abc:	70 09       	ld.w	r9,r8[0x0]
80008abe:	ee f8 ff 50 	ld.w	r8,r7[-176]
80008ac2:	10 09       	add	r9,r8
80008ac4:	ee f8 ff 4c 	ld.w	r8,r7[-180]
80008ac8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008aca:	ee f9 ff 4c 	ld.w	r9,r7[-180]
80008ace:	30 08       	mov	r8,0
80008ad0:	f3 68 00 08 	st.b	r9[8],r8

				display_text(IDX_CLEAR);
80008ad4:	30 9c       	mov	r12,9
80008ad6:	f0 1f 02 76 	mcall	800094ac <main+0x111c>
80008ada:	e0 68 01 f4 	mov	r8,500
80008ade:	ef 48 ff 58 	st.w	r7[-168],r8
80008ae2:	e0 68 12 00 	mov	r8,4608
80008ae6:	ea 18 00 7a 	orh	r8,0x7a
80008aea:	ef 48 ff 54 	st.w	r7[-172],r8
80008aee:	ee f8 ff 58 	ld.w	r8,r7[-168]
80008af2:	ef 48 ff 60 	st.w	r7[-160],r8
80008af6:	ee f8 ff 54 	ld.w	r8,r7[-172]
80008afa:	ef 48 ff 5c 	st.w	r7[-164],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008afe:	ee fa ff 60 	ld.w	r10,r7[-160]
80008b02:	ef 4a fe 64 	st.w	r7[-412],r10
80008b06:	30 08       	mov	r8,0
80008b08:	ef 48 fe 60 	st.w	r7[-416],r8
80008b0c:	ee fc ff 5c 	ld.w	r12,r7[-164]
80008b10:	ef 4c fe 5c 	st.w	r7[-420],r12
80008b14:	30 0a       	mov	r10,0
80008b16:	ef 4a fe 58 	st.w	r7[-424],r10
80008b1a:	ee f9 fe 60 	ld.w	r9,r7[-416]
80008b1e:	ee f8 fe 5c 	ld.w	r8,r7[-420]
80008b22:	b1 39       	mul	r9,r8
80008b24:	ee f8 fe 58 	ld.w	r8,r7[-424]
80008b28:	ee fc fe 64 	ld.w	r12,r7[-412]
80008b2c:	b9 38       	mul	r8,r12
80008b2e:	10 09       	add	r9,r8
80008b30:	ee f8 fe 64 	ld.w	r8,r7[-412]
80008b34:	ee fc fe 5c 	ld.w	r12,r7[-420]
80008b38:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80008b3c:	16 09       	add	r9,r11
80008b3e:	12 9b       	mov	r11,r9
80008b40:	e0 68 03 e7 	mov	r8,999
80008b44:	30 09       	mov	r9,0
80008b46:	10 0a       	add	r10,r8
80008b48:	f6 09 00 4b 	adc	r11,r11,r9
80008b4c:	e0 68 03 e8 	mov	r8,1000
80008b50:	30 09       	mov	r9,0
80008b52:	f0 1f 02 60 	mcall	800094d0 <main+0x1140>
80008b56:	14 98       	mov	r8,r10
80008b58:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80008b5a:	ef 48 ff 68 	st.w	r7[-152],r8
80008b5e:	ee c8 01 50 	sub	r8,r7,336
80008b62:	ef 48 ff 64 	st.w	r7[-156],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008b66:	e1 b8 00 42 	mfsr	r8,0x108
80008b6a:	10 99       	mov	r9,r8
80008b6c:	ee f8 ff 64 	ld.w	r8,r7[-156]
80008b70:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008b72:	ee f8 ff 64 	ld.w	r8,r7[-156]
80008b76:	70 09       	ld.w	r9,r8[0x0]
80008b78:	ee f8 ff 68 	ld.w	r8,r7[-152]
80008b7c:	10 09       	add	r9,r8
80008b7e:	ee f8 ff 64 	ld.w	r8,r7[-156]
80008b82:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008b84:	ee f9 ff 64 	ld.w	r9,r7[-156]
80008b88:	30 08       	mov	r8,0
80008b8a:	f3 68 00 08 	st.b	r9[8],r8
80008b8e:	ee c8 01 50 	sub	r8,r7,336
80008b92:	ef 48 ff 6c 	st.w	r7[-148],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008b96:	e1 b8 00 42 	mfsr	r8,0x108
80008b9a:	ef 48 ff 70 	st.w	r7[-144],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008b9e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008ba2:	f1 39 00 08 	ld.ub	r9,r8[8]
80008ba6:	30 28       	mov	r8,2
80008ba8:	f0 09 18 00 	cp.b	r9,r8
80008bac:	c0 31       	brne	80008bb2 <main+0x822>
    return false;
80008bae:	30 08       	mov	r8,0
80008bb0:	c4 38       	rjmp	80008c36 <main+0x8a6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008bb2:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008bb6:	f1 39 00 08 	ld.ub	r9,r8[8]
80008bba:	30 18       	mov	r8,1
80008bbc:	f0 09 18 00 	cp.b	r9,r8
80008bc0:	c0 31       	brne	80008bc6 <main+0x836>
    return true;
80008bc2:	30 18       	mov	r8,1
80008bc4:	c3 98       	rjmp	80008c36 <main+0x8a6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008bc6:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008bca:	70 09       	ld.w	r9,r8[0x0]
80008bcc:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008bd0:	70 18       	ld.w	r8,r8[0x4]
80008bd2:	10 39       	cp.w	r9,r8
80008bd4:	e0 88 00 1a 	brls	80008c08 <main+0x878>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008bd8:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008bdc:	70 09       	ld.w	r9,r8[0x0]
80008bde:	ee f8 ff 70 	ld.w	r8,r7[-144]
80008be2:	12 38       	cp.w	r8,r9
80008be4:	c1 02       	brcc	80008c04 <main+0x874>
80008be6:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008bea:	70 19       	ld.w	r9,r8[0x4]
80008bec:	ee f8 ff 70 	ld.w	r8,r7[-144]
80008bf0:	12 38       	cp.w	r8,r9
80008bf2:	e0 88 00 09 	brls	80008c04 <main+0x874>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008bf6:	ee f9 ff 6c 	ld.w	r9,r7[-148]
80008bfa:	30 18       	mov	r8,1
80008bfc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008c00:	30 18       	mov	r8,1
80008c02:	c1 a8       	rjmp	80008c36 <main+0x8a6>
    }
    return false;
80008c04:	30 08       	mov	r8,0
80008c06:	c1 88       	rjmp	80008c36 <main+0x8a6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008c08:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008c0c:	70 09       	ld.w	r9,r8[0x0]
80008c0e:	ee f8 ff 70 	ld.w	r8,r7[-144]
80008c12:	12 38       	cp.w	r8,r9
80008c14:	c0 93       	brcs	80008c26 <main+0x896>
80008c16:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80008c1a:	70 19       	ld.w	r9,r8[0x4]
80008c1c:	ee f8 ff 70 	ld.w	r8,r7[-144]
80008c20:	12 38       	cp.w	r8,r9
80008c22:	e0 88 00 09 	brls	80008c34 <main+0x8a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008c26:	ee f9 ff 6c 	ld.w	r9,r7[-148]
80008c2a:	30 18       	mov	r8,1
80008c2c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008c30:	30 18       	mov	r8,1
80008c32:	c0 28       	rjmp	80008c36 <main+0x8a6>
    }
    return false;
80008c34:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80008c36:	58 08       	cp.w	r8,0
80008c38:	ca b0       	breq	80008b8e <main+0x7fe>
				cpu_delay_ms(500, 8000000); //half second TODO: figure out why this is here and get rid of it, don't like to just hang for no reason, especially when we need to be monitoring the door latch
				
				electroclaveState = STATE_SANITIZE;
80008c3a:	fe f9 08 8a 	ld.w	r9,pc[2186]
80008c3e:	30 58       	mov	r8,5
80008c40:	b2 88       	st.b	r9[0x0],r8
				
				break;
80008c42:	e0 8f 02 9d 	bral	8000917c <main+0xdec>
80008c46:	fe f8 08 de 	ld.w	r8,pc[2270]
80008c4a:	ef 48 ff 74 	st.w	r7[-140],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008c4e:	e1 b8 00 42 	mfsr	r8,0x108
80008c52:	ef 48 ff 78 	st.w	r7[-136],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008c56:	ee f8 ff 74 	ld.w	r8,r7[-140]
80008c5a:	f1 39 00 08 	ld.ub	r9,r8[8]
80008c5e:	30 28       	mov	r8,2
80008c60:	f0 09 18 00 	cp.b	r9,r8
80008c64:	c0 31       	brne	80008c6a <main+0x8da>
    return false;
80008c66:	30 08       	mov	r8,0
80008c68:	c4 38       	rjmp	80008cee <main+0x95e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008c6a:	ee f8 ff 74 	ld.w	r8,r7[-140]
80008c6e:	f1 39 00 08 	ld.ub	r9,r8[8]
80008c72:	30 18       	mov	r8,1
80008c74:	f0 09 18 00 	cp.b	r9,r8
80008c78:	c0 31       	brne	80008c7e <main+0x8ee>
    return true;
80008c7a:	30 18       	mov	r8,1
80008c7c:	c3 98       	rjmp	80008cee <main+0x95e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008c7e:	ee f8 ff 74 	ld.w	r8,r7[-140]
80008c82:	70 09       	ld.w	r9,r8[0x0]
80008c84:	ee f8 ff 74 	ld.w	r8,r7[-140]
80008c88:	70 18       	ld.w	r8,r8[0x4]
80008c8a:	10 39       	cp.w	r9,r8
80008c8c:	e0 88 00 1a 	brls	80008cc0 <main+0x930>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008c90:	ee f8 ff 74 	ld.w	r8,r7[-140]
80008c94:	70 09       	ld.w	r9,r8[0x0]
80008c96:	ee f8 ff 78 	ld.w	r8,r7[-136]
80008c9a:	12 38       	cp.w	r8,r9
80008c9c:	c1 02       	brcc	80008cbc <main+0x92c>
80008c9e:	ee f8 ff 74 	ld.w	r8,r7[-140]
80008ca2:	70 19       	ld.w	r9,r8[0x4]
80008ca4:	ee f8 ff 78 	ld.w	r8,r7[-136]
80008ca8:	12 38       	cp.w	r8,r9
80008caa:	e0 88 00 09 	brls	80008cbc <main+0x92c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008cae:	ee f9 ff 74 	ld.w	r9,r7[-140]
80008cb2:	30 18       	mov	r8,1
80008cb4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008cb8:	30 18       	mov	r8,1
80008cba:	c1 a8       	rjmp	80008cee <main+0x95e>
    }
    return false;
80008cbc:	30 08       	mov	r8,0
80008cbe:	c1 88       	rjmp	80008cee <main+0x95e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008cc0:	ee f8 ff 74 	ld.w	r8,r7[-140]
80008cc4:	70 09       	ld.w	r9,r8[0x0]
80008cc6:	ee f8 ff 78 	ld.w	r8,r7[-136]
80008cca:	12 38       	cp.w	r8,r9
80008ccc:	c0 93       	brcs	80008cde <main+0x94e>
80008cce:	ee f8 ff 74 	ld.w	r8,r7[-140]
80008cd2:	70 19       	ld.w	r9,r8[0x4]
80008cd4:	ee f8 ff 78 	ld.w	r8,r7[-136]
80008cd8:	12 38       	cp.w	r8,r9
80008cda:	e0 88 00 09 	brls	80008cec <main+0x95c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008cde:	ee f9 ff 74 	ld.w	r9,r7[-140]
80008ce2:	30 18       	mov	r8,1
80008ce4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008ce8:	30 18       	mov	r8,1
80008cea:	c0 28       	rjmp	80008cee <main+0x95e>
    }
    return false;
80008cec:	30 08       	mov	r8,0
				
			case STATE_SANITIZE:
				/*
    			 * Manage the display
				 */
				if (cpu_is_timeout(&displayTimer))
80008cee:	58 08       	cp.w	r8,0
80008cf0:	c6 50       	breq	80008dba <main+0xa2a>
80008cf2:	fe f8 08 32 	ld.w	r8,pc[2098]
80008cf6:	ef 48 ff 7c 	st.w	r7[-132],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80008cfa:	ee f9 ff 7c 	ld.w	r9,r7[-132]
80008cfe:	30 28       	mov	r8,2
80008d00:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout(&displayTimer);
					switch (displayIdx)
80008d04:	fe f8 08 04 	ld.w	r8,pc[2052]
80008d08:	11 88       	ld.ub	r8,r8[0x0]
80008d0a:	58 18       	cp.w	r8,1
80008d0c:	c0 f0       	breq	80008d2a <main+0x99a>
80008d0e:	e0 89 00 05 	brgt	80008d18 <main+0x988>
80008d12:	58 08       	cp.w	r8,0
80008d14:	c0 70       	breq	80008d22 <main+0x992>
80008d16:	c1 78       	rjmp	80008d44 <main+0x9b4>
80008d18:	58 28       	cp.w	r8,2
80008d1a:	c0 c0       	breq	80008d32 <main+0x9a2>
80008d1c:	58 38       	cp.w	r8,3
80008d1e:	c0 e0       	breq	80008d3a <main+0x9aa>
80008d20:	c1 28       	rjmp	80008d44 <main+0x9b4>
					{
						case 0:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF1);
80008d22:	30 5c       	mov	r12,5
80008d24:	f0 1f 01 e2 	mcall	800094ac <main+0x111c>
							break;
80008d28:	c0 e8       	rjmp	80008d44 <main+0x9b4>
						case 1:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF2);
80008d2a:	30 6c       	mov	r12,6
80008d2c:	f0 1f 01 e0 	mcall	800094ac <main+0x111c>
							break;
80008d30:	c0 a8       	rjmp	80008d44 <main+0x9b4>
						case 2:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF3);
80008d32:	30 7c       	mov	r12,7
80008d34:	f0 1f 01 de 	mcall	800094ac <main+0x111c>
							break;
80008d38:	c0 68       	rjmp	80008d44 <main+0x9b4>
						case 3:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF4);
80008d3a:	30 8c       	mov	r12,8
80008d3c:	f0 1f 01 dc 	mcall	800094ac <main+0x111c>
80008d40:	c0 28       	rjmp	80008d44 <main+0x9b4>
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
80008d42:	d7 03       	nop
							break;
					}
					
					while (1)
					{
						if (++displayIdx >= NUM_SHELVES)
80008d44:	fe f8 07 c4 	ld.w	r8,pc[1988]
80008d48:	11 88       	ld.ub	r8,r8[0x0]
80008d4a:	2f f8       	sub	r8,-1
80008d4c:	5c 58       	castu.b	r8
80008d4e:	fe f9 07 ba 	ld.w	r9,pc[1978]
80008d52:	b2 88       	st.b	r9[0x0],r8
80008d54:	fe f8 07 b4 	ld.w	r8,pc[1972]
80008d58:	11 89       	ld.ub	r9,r8[0x0]
80008d5a:	30 38       	mov	r8,3
80008d5c:	f0 09 18 00 	cp.b	r9,r8
80008d60:	e0 88 00 06 	brls	80008d6c <main+0x9dc>
						{
							displayIdx = 0; //12apr15 wrap around
80008d64:	fe f9 07 a4 	ld.w	r9,pc[1956]
80008d68:	30 08       	mov	r8,0
80008d6a:	b2 88       	st.b	r9[0x0],r8
						}
						
						if (shelf[displayIdx].active)
80008d6c:	fe f8 07 9c 	ld.w	r8,pc[1948]
80008d70:	11 88       	ld.ub	r8,r8[0x0]
80008d72:	10 99       	mov	r9,r8
80008d74:	fe f8 07 9c 	ld.w	r8,pc[1948]
80008d78:	f0 09 07 28 	ld.ub	r8,r8[r9<<0x2]
80008d7c:	58 08       	cp.w	r8,0
80008d7e:	ce 20       	breq	80008d42 <main+0x9b2>
							break; //this shelf is active, we don't need to look for another one
						}
						
					}

					cpu_set_timeout(displayTimerSeconds, &displayTimer); //8 seconds per shelf
80008d80:	fe f8 07 a0 	ld.w	r8,pc[1952]
80008d84:	70 08       	ld.w	r8,r8[0x0]
80008d86:	ef 48 ff 84 	st.w	r7[-124],r8
80008d8a:	fe f8 07 9a 	ld.w	r8,pc[1946]
80008d8e:	ef 48 ff 80 	st.w	r7[-128],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008d92:	e1 b8 00 42 	mfsr	r8,0x108
80008d96:	10 99       	mov	r9,r8
80008d98:	ee f8 ff 80 	ld.w	r8,r7[-128]
80008d9c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008d9e:	ee f8 ff 80 	ld.w	r8,r7[-128]
80008da2:	70 09       	ld.w	r9,r8[0x0]
80008da4:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008da8:	10 09       	add	r9,r8
80008daa:	ee f8 ff 80 	ld.w	r8,r7[-128]
80008dae:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008db0:	ee f9 ff 80 	ld.w	r9,r7[-128]
80008db4:	30 08       	mov	r8,0
80008db6:	f3 68 00 08 	st.b	r9[8],r8
						if (shelf[displayIdx].active)
						{
							break; //this shelf is active, we don't need to look for another one
						}
						
					}
80008dba:	fe f8 07 72 	ld.w	r8,pc[1906]
80008dbe:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008dc2:	e1 b8 00 42 	mfsr	r8,0x108
80008dc6:	ef 48 ff 8c 	st.w	r7[-116],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008dca:	ee f8 ff 88 	ld.w	r8,r7[-120]
80008dce:	f1 39 00 08 	ld.ub	r9,r8[8]
80008dd2:	30 28       	mov	r8,2
80008dd4:	f0 09 18 00 	cp.b	r9,r8
80008dd8:	c0 31       	brne	80008dde <main+0xa4e>
    return false;
80008dda:	30 08       	mov	r8,0
80008ddc:	c4 38       	rjmp	80008e62 <main+0xad2>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008dde:	ee f8 ff 88 	ld.w	r8,r7[-120]
80008de2:	f1 39 00 08 	ld.ub	r9,r8[8]
80008de6:	30 18       	mov	r8,1
80008de8:	f0 09 18 00 	cp.b	r9,r8
80008dec:	c0 31       	brne	80008df2 <main+0xa62>
    return true;
80008dee:	30 18       	mov	r8,1
80008df0:	c3 98       	rjmp	80008e62 <main+0xad2>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008df2:	ee f8 ff 88 	ld.w	r8,r7[-120]
80008df6:	70 09       	ld.w	r9,r8[0x0]
80008df8:	ee f8 ff 88 	ld.w	r8,r7[-120]
80008dfc:	70 18       	ld.w	r8,r8[0x4]
80008dfe:	10 39       	cp.w	r9,r8
80008e00:	e0 88 00 1a 	brls	80008e34 <main+0xaa4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008e04:	ee f8 ff 88 	ld.w	r8,r7[-120]
80008e08:	70 09       	ld.w	r9,r8[0x0]
80008e0a:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80008e0e:	12 38       	cp.w	r8,r9
80008e10:	c1 02       	brcc	80008e30 <main+0xaa0>
80008e12:	ee f8 ff 88 	ld.w	r8,r7[-120]
80008e16:	70 19       	ld.w	r9,r8[0x4]
80008e18:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80008e1c:	12 38       	cp.w	r8,r9
80008e1e:	e0 88 00 09 	brls	80008e30 <main+0xaa0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008e22:	ee f9 ff 88 	ld.w	r9,r7[-120]
80008e26:	30 18       	mov	r8,1
80008e28:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008e2c:	30 18       	mov	r8,1
80008e2e:	c1 a8       	rjmp	80008e62 <main+0xad2>
    }
    return false;
80008e30:	30 08       	mov	r8,0
80008e32:	c1 88       	rjmp	80008e62 <main+0xad2>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008e34:	ee f8 ff 88 	ld.w	r8,r7[-120]
80008e38:	70 09       	ld.w	r9,r8[0x0]
80008e3a:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80008e3e:	12 38       	cp.w	r8,r9
80008e40:	c0 93       	brcs	80008e52 <main+0xac2>
80008e42:	ee f8 ff 88 	ld.w	r8,r7[-120]
80008e46:	70 19       	ld.w	r9,r8[0x4]
80008e48:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80008e4c:	12 38       	cp.w	r8,r9
80008e4e:	e0 88 00 09 	brls	80008e60 <main+0xad0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008e52:	ee f9 ff 88 	ld.w	r9,r7[-120]
80008e56:	30 18       	mov	r8,1
80008e58:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008e5c:	30 18       	mov	r8,1
80008e5e:	c0 28       	rjmp	80008e62 <main+0xad2>
    }
    return false;
80008e60:	30 08       	mov	r8,0
				}

				/*
    			 * Manage storing usage statistics to flash
				 */
				if (cpu_is_timeout (&oneMinuteTimer))
80008e62:	58 08       	cp.w	r8,0
80008e64:	c2 80       	breq	80008eb4 <main+0xb24>
80008e66:	fe f8 06 c6 	ld.w	r8,pc[1734]
80008e6a:	ef 48 ff 90 	st.w	r7[-112],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80008e6e:	ee f9 ff 90 	ld.w	r9,r7[-112]
80008e72:	30 28       	mov	r8,2
80008e74:	f3 68 00 08 	st.b	r9[8],r8
				{
					cpu_stop_timeout (&oneMinuteTimer);
					
					increment_ledBoard_usage_min(); //increments usage minutes for active shelves only
80008e78:	f0 1f 01 ae 	mcall	80009530 <main+0x11a0>
80008e7c:	e0 68 ea 60 	mov	r8,60000
80008e80:	ef 48 ff 98 	st.w	r7[-104],r8
80008e84:	fe f8 06 a8 	ld.w	r8,pc[1704]
80008e88:	ef 48 ff 94 	st.w	r7[-108],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80008e8c:	e1 b8 00 42 	mfsr	r8,0x108
80008e90:	10 99       	mov	r9,r8
80008e92:	ee f8 ff 94 	ld.w	r8,r7[-108]
80008e96:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80008e98:	ee f8 ff 94 	ld.w	r8,r7[-108]
80008e9c:	70 09       	ld.w	r9,r8[0x0]
80008e9e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80008ea2:	10 09       	add	r9,r8
80008ea4:	ee f8 ff 94 	ld.w	r8,r7[-108]
80008ea8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80008eaa:	ee f9 ff 94 	ld.w	r9,r7[-108]
80008eae:	30 08       	mov	r8,0
80008eb0:	f3 68 00 08 	st.b	r9[8],r8
80008eb4:	fe f8 06 74 	ld.w	r8,pc[1652]
80008eb8:	ef 48 ff 9c 	st.w	r7[-100],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80008ebc:	e1 b8 00 42 	mfsr	r8,0x108
80008ec0:	ef 48 ff a0 	st.w	r7[-96],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80008ec4:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008ec8:	f1 39 00 08 	ld.ub	r9,r8[8]
80008ecc:	30 28       	mov	r8,2
80008ece:	f0 09 18 00 	cp.b	r9,r8
80008ed2:	c0 31       	brne	80008ed8 <main+0xb48>
    return false;
80008ed4:	30 08       	mov	r8,0
80008ed6:	c4 38       	rjmp	80008f5c <main+0xbcc>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80008ed8:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008edc:	f1 39 00 08 	ld.ub	r9,r8[8]
80008ee0:	30 18       	mov	r8,1
80008ee2:	f0 09 18 00 	cp.b	r9,r8
80008ee6:	c0 31       	brne	80008eec <main+0xb5c>
    return true;
80008ee8:	30 18       	mov	r8,1
80008eea:	c3 98       	rjmp	80008f5c <main+0xbcc>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80008eec:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008ef0:	70 09       	ld.w	r9,r8[0x0]
80008ef2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008ef6:	70 18       	ld.w	r8,r8[0x4]
80008ef8:	10 39       	cp.w	r9,r8
80008efa:	e0 88 00 1a 	brls	80008f2e <main+0xb9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80008efe:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008f02:	70 09       	ld.w	r9,r8[0x0]
80008f04:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008f08:	12 38       	cp.w	r8,r9
80008f0a:	c1 02       	brcc	80008f2a <main+0xb9a>
80008f0c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008f10:	70 19       	ld.w	r9,r8[0x4]
80008f12:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008f16:	12 38       	cp.w	r8,r9
80008f18:	e0 88 00 09 	brls	80008f2a <main+0xb9a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008f1c:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80008f20:	30 18       	mov	r8,1
80008f22:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008f26:	30 18       	mov	r8,1
80008f28:	c1 a8       	rjmp	80008f5c <main+0xbcc>
    }
    return false;
80008f2a:	30 08       	mov	r8,0
80008f2c:	c1 88       	rjmp	80008f5c <main+0xbcc>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80008f2e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008f32:	70 09       	ld.w	r9,r8[0x0]
80008f34:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008f38:	12 38       	cp.w	r8,r9
80008f3a:	c0 93       	brcs	80008f4c <main+0xbbc>
80008f3c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80008f40:	70 19       	ld.w	r9,r8[0x4]
80008f42:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008f46:	12 38       	cp.w	r8,r9
80008f48:	e0 88 00 09 	brls	80008f5a <main+0xbca>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80008f4c:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80008f50:	30 18       	mov	r8,1
80008f52:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80008f56:	30 18       	mov	r8,1
80008f58:	c0 28       	rjmp	80008f5c <main+0xbcc>
    }
    return false;
80008f5a:	30 08       	mov	r8,0
				}

				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
80008f5c:	58 08       	cp.w	r8,0
80008f5e:	e0 80 01 0c 	breq	80009176 <main+0xde6>
					
					for (int i=0; i< NUM_SHELVES; i++)
80008f62:	30 08       	mov	r8,0
80008f64:	ef 48 fe cc 	st.w	r7[-308],r8
80008f68:	c0 d8       	rjmp	80008f82 <main+0xbf2>
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
80008f6a:	ee f8 fe cc 	ld.w	r8,r7[-308]
80008f6e:	5c 58       	castu.b	r8
80008f70:	30 0b       	mov	r11,0
80008f72:	10 9c       	mov	r12,r8
80008f74:	f0 1f 01 6a 	mcall	8000951c <main+0x118c>
				/*
    			 * Manage the sanitizer timer
				 */
				if (cpu_is_timeout(&sanitizeTimer)) {
					
					for (int i=0; i< NUM_SHELVES; i++)
80008f78:	ee f8 fe cc 	ld.w	r8,r7[-308]
80008f7c:	2f f8       	sub	r8,-1
80008f7e:	ef 48 fe cc 	st.w	r7[-308],r8
80008f82:	ee f8 fe cc 	ld.w	r8,r7[-308]
80008f86:	58 38       	cp.w	r8,3
80008f88:	fe 9a ff f1 	brle	80008f6a <main+0xbda>
80008f8c:	fe f8 05 9c 	ld.w	r8,pc[1436]
80008f90:	ef 48 ff a4 	st.w	r7[-92],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80008f94:	ee f9 ff a4 	ld.w	r9,r7[-92]
80008f98:	30 28       	mov	r8,2
80008f9a:	f3 68 00 08 	st.b	r9[8],r8
					{
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
80008f9e:	fe fc 05 96 	ld.w	r12,pc[1430]
80008fa2:	f0 1f 01 42 	mcall	800094a8 <main+0x1118>
				}
				break;
80008fa6:	ce b8       	rjmp	8000917c <main+0xdec>
				
			case STATE_START_CLEAN:
				display_text(IDX_CLEAN);
80008fa8:	30 1c       	mov	r12,1
80008faa:	f0 1f 01 41 	mcall	800094ac <main+0x111c>
				electroclaveState = STATE_CLEAN;
80008fae:	fe f9 05 16 	ld.w	r9,pc[1302]
80008fb2:	30 78       	mov	r8,7
80008fb4:	b2 88       	st.b	r9[0x0],r8
80008fb6:	e0 68 03 e8 	mov	r8,1000
80008fba:	ef 48 ff ac 	st.w	r7[-84],r8
80008fbe:	e0 68 b4 00 	mov	r8,46080
80008fc2:	ea 18 04 c4 	orh	r8,0x4c4
80008fc6:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80008fca:	ee fa ff ac 	ld.w	r10,r7[-84]
80008fce:	ef 4a fe 74 	st.w	r7[-396],r10
80008fd2:	30 08       	mov	r8,0
80008fd4:	ef 48 fe 70 	st.w	r7[-400],r8
80008fd8:	ee fc ff a8 	ld.w	r12,r7[-88]
80008fdc:	ef 4c fe 6c 	st.w	r7[-404],r12
80008fe0:	30 0a       	mov	r10,0
80008fe2:	ef 4a fe 68 	st.w	r7[-408],r10
80008fe6:	ee f9 fe 70 	ld.w	r9,r7[-400]
80008fea:	ee f8 fe 6c 	ld.w	r8,r7[-404]
80008fee:	b1 39       	mul	r9,r8
80008ff0:	ee f8 fe 68 	ld.w	r8,r7[-408]
80008ff4:	ee fc fe 74 	ld.w	r12,r7[-396]
80008ff8:	b9 38       	mul	r8,r12
80008ffa:	10 09       	add	r9,r8
80008ffc:	ee f8 fe 74 	ld.w	r8,r7[-396]
80009000:	ee fc fe 6c 	ld.w	r12,r7[-404]
80009004:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009008:	16 09       	add	r9,r11
8000900a:	12 9b       	mov	r11,r9
8000900c:	e0 68 03 e7 	mov	r8,999
80009010:	30 09       	mov	r9,0
80009012:	10 0a       	add	r10,r8
80009014:	f6 09 00 4b 	adc	r11,r11,r9
80009018:	e0 68 03 e8 	mov	r8,1000
8000901c:	30 09       	mov	r9,0
8000901e:	f0 1f 01 2d 	mcall	800094d0 <main+0x1140>
80009022:	14 98       	mov	r8,r10
80009024:	16 99       	mov	r9,r11
				cpu_set_timeout((20 * 60 * cpu_ms_2_cy(1000, 80000000)), &cleanTimer); //TODO: this time period will be parameterized from the technician UART interface
80009026:	10 99       	mov	r9,r8
80009028:	e0 68 04 b0 	mov	r8,1200
8000902c:	f2 08 02 48 	mul	r8,r9,r8
80009030:	ef 48 ff b4 	st.w	r7[-76],r8
80009034:	fe f8 05 04 	ld.w	r8,pc[1284]
80009038:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000903c:	e1 b8 00 42 	mfsr	r8,0x108
80009040:	10 99       	mov	r9,r8
80009042:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009046:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009048:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000904c:	70 09       	ld.w	r9,r8[0x0]
8000904e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009052:	10 09       	add	r9,r8
80009054:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009058:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000905a:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000905e:	30 08       	mov	r8,0
80009060:	f3 68 00 08 	st.b	r9[8],r8
				break;	
80009064:	c8 c8       	rjmp	8000917c <main+0xdec>
80009066:	fe f8 04 d2 	ld.w	r8,pc[1234]
8000906a:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000906e:	e1 b8 00 42 	mfsr	r8,0x108
80009072:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009076:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000907a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000907e:	30 28       	mov	r8,2
80009080:	f0 09 18 00 	cp.b	r9,r8
80009084:	c0 31       	brne	8000908a <main+0xcfa>
    return false;
80009086:	30 08       	mov	r8,0
80009088:	c4 38       	rjmp	8000910e <main+0xd7e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000908a:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000908e:	f1 39 00 08 	ld.ub	r9,r8[8]
80009092:	30 18       	mov	r8,1
80009094:	f0 09 18 00 	cp.b	r9,r8
80009098:	c0 31       	brne	8000909e <main+0xd0e>
    return true;
8000909a:	30 18       	mov	r8,1
8000909c:	c3 98       	rjmp	8000910e <main+0xd7e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000909e:	ee f8 ff b8 	ld.w	r8,r7[-72]
800090a2:	70 09       	ld.w	r9,r8[0x0]
800090a4:	ee f8 ff b8 	ld.w	r8,r7[-72]
800090a8:	70 18       	ld.w	r8,r8[0x4]
800090aa:	10 39       	cp.w	r9,r8
800090ac:	e0 88 00 1a 	brls	800090e0 <main+0xd50>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800090b0:	ee f8 ff b8 	ld.w	r8,r7[-72]
800090b4:	70 09       	ld.w	r9,r8[0x0]
800090b6:	ee f8 ff bc 	ld.w	r8,r7[-68]
800090ba:	12 38       	cp.w	r8,r9
800090bc:	c1 02       	brcc	800090dc <main+0xd4c>
800090be:	ee f8 ff b8 	ld.w	r8,r7[-72]
800090c2:	70 19       	ld.w	r9,r8[0x4]
800090c4:	ee f8 ff bc 	ld.w	r8,r7[-68]
800090c8:	12 38       	cp.w	r8,r9
800090ca:	e0 88 00 09 	brls	800090dc <main+0xd4c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800090ce:	ee f9 ff b8 	ld.w	r9,r7[-72]
800090d2:	30 18       	mov	r8,1
800090d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800090d8:	30 18       	mov	r8,1
800090da:	c1 a8       	rjmp	8000910e <main+0xd7e>
    }
    return false;
800090dc:	30 08       	mov	r8,0
800090de:	c1 88       	rjmp	8000910e <main+0xd7e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800090e0:	ee f8 ff b8 	ld.w	r8,r7[-72]
800090e4:	70 09       	ld.w	r9,r8[0x0]
800090e6:	ee f8 ff bc 	ld.w	r8,r7[-68]
800090ea:	12 38       	cp.w	r8,r9
800090ec:	c0 93       	brcs	800090fe <main+0xd6e>
800090ee:	ee f8 ff b8 	ld.w	r8,r7[-72]
800090f2:	70 19       	ld.w	r9,r8[0x4]
800090f4:	ee f8 ff bc 	ld.w	r8,r7[-68]
800090f8:	12 38       	cp.w	r8,r9
800090fa:	e0 88 00 09 	brls	8000910c <main+0xd7c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800090fe:	ee f9 ff b8 	ld.w	r9,r7[-72]
80009102:	30 18       	mov	r8,1
80009104:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80009108:	30 18       	mov	r8,1
8000910a:	c0 28       	rjmp	8000910e <main+0xd7e>
    }
    return false;
8000910c:	30 08       	mov	r8,0
				
			case STATE_CLEAN:
				if (cpu_is_timeout(&cleanTimer)) {
8000910e:	58 08       	cp.w	r8,0
80009110:	c3 50       	breq	8000917a <main+0xdea>
80009112:	fe f8 04 26 	ld.w	r8,pc[1062]
80009116:	ef 48 ff c0 	st.w	r7[-64],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
8000911a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000911e:	30 28       	mov	r8,2
80009120:	f3 68 00 08 	st.b	r9[8],r8
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
80009124:	fe f9 03 a0 	ld.w	r9,pc[928]
80009128:	30 38       	mov	r8,3
8000912a:	b2 88       	st.b	r9[0x0],r8
					print_ecdbg("Start sanitizing\r\n");
8000912c:	fe fc 03 d4 	ld.w	r12,pc[980]
80009130:	f0 1f 00 de 	mcall	800094a8 <main+0x1118>

				}
				break;
80009134:	c2 48       	rjmp	8000917c <main+0xdec>
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
80009136:	30 08       	mov	r8,0
80009138:	ef 48 fe d0 	st.w	r7[-304],r8
8000913c:	c0 d8       	rjmp	80009156 <main+0xdc6>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
8000913e:	ee f8 fe d0 	ld.w	r8,r7[-304]
80009142:	5c 58       	castu.b	r8
80009144:	30 0b       	mov	r11,0
80009146:	10 9c       	mov	r12,r8
80009148:	f0 1f 00 f5 	mcall	8000951c <main+0x118c>
				}
				break;
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				for (int i=0; i< NUM_SHELVES; i++)
8000914c:	ee f8 fe d0 	ld.w	r8,r7[-304]
80009150:	2f f8       	sub	r8,-1
80009152:	ef 48 fe d0 	st.w	r7[-304],r8
80009156:	ee f8 fe d0 	ld.w	r8,r7[-304]
8000915a:	58 38       	cp.w	r8,3
8000915c:	fe 9a ff f1 	brle	8000913e <main+0xdae>
				{
					led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
				}
				electroclaveState = STATE_EC_IDLE;
80009160:	fe f9 03 64 	ld.w	r9,pc[868]
80009164:	30 08       	mov	r8,0
80009166:	b2 88       	st.b	r9[0x0],r8
80009168:	c0 a8       	rjmp	8000917c <main+0xdec>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
					electroclaveState = STATE_DOOR_LATCHED;
					firstTimeThrough = 1;
				}
				break;
8000916a:	d7 03       	nop
8000916c:	c0 88       	rjmp	8000917c <main+0xdec>
			case STATE_DOOR_LATCHED:
				if (!EC_ACTION_PB) {
					print_ecdbg("Action push button press detected\r\n");
					electroclaveState = STATE_ACTION_PB_PRESSED;
				}
				break;
8000916e:	d7 03       	nop
80009170:	c0 68       	rjmp	8000917c <main+0xdec>
				if (EC_ACTION_PB)
				{
					print_ecdbg("Action push button release detected\r\n");
					electroclaveState = STATE_ACTION_PB_RELEASED;	
				}
				break;
80009172:	d7 03       	nop
80009174:	c0 48       	rjmp	8000917c <main+0xdec>
						led_shelf(i, LED_OFF); //turn off every shelf. (doesn't hurt to make sure that even non-active shelves are off.)
					}
					cpu_stop_timeout(&sanitizeTimer);
					print_ecdbg("Shelf clean\r\n");
				}
				break;
80009176:	d7 03       	nop
80009178:	c0 28       	rjmp	8000917c <main+0xdec>
					cpu_stop_timeout(&cleanTimer);
					electroclaveState = STATE_ACTION_PB_RELEASED;	
					print_ecdbg("Start sanitizing\r\n");

				}
				break;
8000917a:	d7 03       	nop
		
		/*
		 * This check overrides everything going on in the state machine, if the user opens the door,
		 * shut down all processes for safety
		 */
		if (!EC_DOOR_LATCHED) {
8000917c:	33 ec       	mov	r12,62
8000917e:	f0 1f 00 d8 	mcall	800094dc <main+0x114c>
80009182:	18 98       	mov	r8,r12
80009184:	58 08       	cp.w	r8,0
80009186:	e0 80 00 d2 	breq	8000932a <main+0xf9a>
		
			if (firstTimeThrough)
8000918a:	fe f8 03 5a 	ld.w	r8,pc[858]
8000918e:	11 88       	ld.ub	r8,r8[0x0]
80009190:	58 08       	cp.w	r8,0
80009192:	e0 80 00 cc 	breq	8000932a <main+0xf9a>
			{
				door_latch_open_kill_all_shelves();
80009196:	f0 1f 00 ea 	mcall	8000953c <main+0x11ac>

				display_text(IDX_CLEAR);
8000919a:	30 9c       	mov	r12,9
8000919c:	f0 1f 00 c4 	mcall	800094ac <main+0x111c>
800091a0:	e0 68 01 f4 	mov	r8,500
800091a4:	ef 48 ff c8 	st.w	r7[-56],r8
800091a8:	e0 68 12 00 	mov	r8,4608
800091ac:	ea 18 00 7a 	orh	r8,0x7a
800091b0:	ef 48 ff c4 	st.w	r7[-60],r8
800091b4:	ee f8 ff c8 	ld.w	r8,r7[-56]
800091b8:	ef 48 ff d0 	st.w	r7[-48],r8
800091bc:	ee f8 ff c4 	ld.w	r8,r7[-60]
800091c0:	ef 48 ff cc 	st.w	r7[-52],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800091c4:	ee fa ff d0 	ld.w	r10,r7[-48]
800091c8:	ef 4a fe 84 	st.w	r7[-380],r10
800091cc:	30 08       	mov	r8,0
800091ce:	ef 48 fe 80 	st.w	r7[-384],r8
800091d2:	ee fc ff cc 	ld.w	r12,r7[-52]
800091d6:	ef 4c fe 7c 	st.w	r7[-388],r12
800091da:	30 0a       	mov	r10,0
800091dc:	ef 4a fe 78 	st.w	r7[-392],r10
800091e0:	ee f9 fe 80 	ld.w	r9,r7[-384]
800091e4:	ee f8 fe 7c 	ld.w	r8,r7[-388]
800091e8:	b1 39       	mul	r9,r8
800091ea:	ee f8 fe 78 	ld.w	r8,r7[-392]
800091ee:	ee fc fe 84 	ld.w	r12,r7[-380]
800091f2:	b9 38       	mul	r8,r12
800091f4:	10 09       	add	r9,r8
800091f6:	ee f8 fe 84 	ld.w	r8,r7[-380]
800091fa:	ee fc fe 7c 	ld.w	r12,r7[-388]
800091fe:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009202:	16 09       	add	r9,r11
80009204:	12 9b       	mov	r11,r9
80009206:	e0 68 03 e7 	mov	r8,999
8000920a:	30 09       	mov	r9,0
8000920c:	10 0a       	add	r10,r8
8000920e:	f6 09 00 4b 	adc	r11,r11,r9
80009212:	e0 68 03 e8 	mov	r8,1000
80009216:	30 09       	mov	r9,0
80009218:	f0 1f 00 ae 	mcall	800094d0 <main+0x1140>
8000921c:	14 98       	mov	r8,r10
8000921e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80009220:	ef 48 ff d8 	st.w	r7[-40],r8
80009224:	ee c8 01 44 	sub	r8,r7,324
80009228:	ef 48 ff d4 	st.w	r7[-44],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000922c:	e1 b8 00 42 	mfsr	r8,0x108
80009230:	10 99       	mov	r9,r8
80009232:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009236:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80009238:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000923c:	70 09       	ld.w	r9,r8[0x0]
8000923e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009242:	10 09       	add	r9,r8
80009244:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009248:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000924a:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000924e:	30 08       	mov	r8,0
80009250:	f3 68 00 08 	st.b	r9[8],r8
80009254:	ee c8 01 44 	sub	r8,r7,324
80009258:	ef 48 ff dc 	st.w	r7[-36],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000925c:	e1 b8 00 42 	mfsr	r8,0x108
80009260:	ef 48 ff e0 	st.w	r7[-32],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009264:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009268:	f1 39 00 08 	ld.ub	r9,r8[8]
8000926c:	30 28       	mov	r8,2
8000926e:	f0 09 18 00 	cp.b	r9,r8
80009272:	c0 31       	brne	80009278 <main+0xee8>
    return false;
80009274:	30 08       	mov	r8,0
80009276:	c4 38       	rjmp	800092fc <main+0xf6c>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80009278:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000927c:	f1 39 00 08 	ld.ub	r9,r8[8]
80009280:	30 18       	mov	r8,1
80009282:	f0 09 18 00 	cp.b	r9,r8
80009286:	c0 31       	brne	8000928c <main+0xefc>
    return true;
80009288:	30 18       	mov	r8,1
8000928a:	c3 98       	rjmp	800092fc <main+0xf6c>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000928c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009290:	70 09       	ld.w	r9,r8[0x0]
80009292:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009296:	70 18       	ld.w	r8,r8[0x4]
80009298:	10 39       	cp.w	r9,r8
8000929a:	e0 88 00 1a 	brls	800092ce <main+0xf3e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000929e:	ee f8 ff dc 	ld.w	r8,r7[-36]
800092a2:	70 09       	ld.w	r9,r8[0x0]
800092a4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800092a8:	12 38       	cp.w	r8,r9
800092aa:	c1 02       	brcc	800092ca <main+0xf3a>
800092ac:	ee f8 ff dc 	ld.w	r8,r7[-36]
800092b0:	70 19       	ld.w	r9,r8[0x4]
800092b2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800092b6:	12 38       	cp.w	r8,r9
800092b8:	e0 88 00 09 	brls	800092ca <main+0xf3a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800092bc:	ee f9 ff dc 	ld.w	r9,r7[-36]
800092c0:	30 18       	mov	r8,1
800092c2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800092c6:	30 18       	mov	r8,1
800092c8:	c1 a8       	rjmp	800092fc <main+0xf6c>
    }
    return false;
800092ca:	30 08       	mov	r8,0
800092cc:	c1 88       	rjmp	800092fc <main+0xf6c>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800092ce:	ee f8 ff dc 	ld.w	r8,r7[-36]
800092d2:	70 09       	ld.w	r9,r8[0x0]
800092d4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800092d8:	12 38       	cp.w	r8,r9
800092da:	c0 93       	brcs	800092ec <main+0xf5c>
800092dc:	ee f8 ff dc 	ld.w	r8,r7[-36]
800092e0:	70 19       	ld.w	r9,r8[0x4]
800092e2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800092e6:	12 38       	cp.w	r8,r9
800092e8:	e0 88 00 09 	brls	800092fa <main+0xf6a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800092ec:	ee f9 ff dc 	ld.w	r9,r7[-36]
800092f0:	30 18       	mov	r8,1
800092f2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800092f6:	30 18       	mov	r8,1
800092f8:	c0 28       	rjmp	800092fc <main+0xf6c>
    }
    return false;
800092fa:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800092fc:	58 08       	cp.w	r8,0
800092fe:	ca b0       	breq	80009254 <main+0xec4>
				cpu_delay_ms(500, 8000000);
				switch (electroclaveState)
80009300:	4f 18       	lddpc	r8,800094c4 <main+0x1134>
80009302:	11 88       	ld.ub	r8,r8[0x0]
80009304:	58 58       	cp.w	r8,5
80009306:	c0 51       	brne	80009310 <main+0xf80>
				{
					case STATE_SANITIZE:
						display_text(IDX_DIRTY);
80009308:	30 3c       	mov	r12,3
8000930a:	f0 1f 00 69 	mcall	800094ac <main+0x111c>
						break;
8000930e:	c0 48       	rjmp	80009316 <main+0xf86>
					
					default:
						display_text(IDX_CLEAN);
80009310:	30 1c       	mov	r12,1
80009312:	f0 1f 00 67 	mcall	800094ac <main+0x111c>
						break;
				}

				electroclaveState = STATE_SHUTDOWN_PROCESSES;
80009316:	4e c9       	lddpc	r9,800094c4 <main+0x1134>
80009318:	30 88       	mov	r8,8
8000931a:	b2 88       	st.b	r9[0x0],r8
				print_ecdbg("Door latch opened, shutting down all processes\r\n");
8000931c:	fe fc 02 24 	ld.w	r12,pc[548]
80009320:	f0 1f 00 62 	mcall	800094a8 <main+0x1118>
				firstTimeThrough = 0;
80009324:	4f 09       	lddpc	r9,800094e4 <main+0x1154>
80009326:	30 08       	mov	r8,0
80009328:	b2 88       	st.b	r9[0x0],r8
8000932a:	4e b8       	lddpc	r8,800094d4 <main+0x1144>
8000932c:	ef 48 ff e4 	st.w	r7[-28],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80009330:	e1 b8 00 42 	mfsr	r8,0x108
80009334:	ef 48 ff e8 	st.w	r7[-24],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80009338:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000933c:	f1 39 00 08 	ld.ub	r9,r8[8]
80009340:	30 28       	mov	r8,2
80009342:	f0 09 18 00 	cp.b	r9,r8
80009346:	c0 31       	brne	8000934c <main+0xfbc>
    return false;
80009348:	30 08       	mov	r8,0
8000934a:	c4 38       	rjmp	800093d0 <main+0x1040>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000934c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009350:	f1 39 00 08 	ld.ub	r9,r8[8]
80009354:	30 18       	mov	r8,1
80009356:	f0 09 18 00 	cp.b	r9,r8
8000935a:	c0 31       	brne	80009360 <main+0xfd0>
    return true;
8000935c:	30 18       	mov	r8,1
8000935e:	c3 98       	rjmp	800093d0 <main+0x1040>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80009360:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009364:	70 09       	ld.w	r9,r8[0x0]
80009366:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000936a:	70 18       	ld.w	r8,r8[0x4]
8000936c:	10 39       	cp.w	r9,r8
8000936e:	e0 88 00 1a 	brls	800093a2 <main+0x1012>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80009372:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009376:	70 09       	ld.w	r9,r8[0x0]
80009378:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000937c:	12 38       	cp.w	r8,r9
8000937e:	c1 02       	brcc	8000939e <main+0x100e>
80009380:	ee f8 ff e4 	ld.w	r8,r7[-28]
80009384:	70 19       	ld.w	r9,r8[0x4]
80009386:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000938a:	12 38       	cp.w	r8,r9
8000938c:	e0 88 00 09 	brls	8000939e <main+0x100e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80009390:	ee f9 ff e4 	ld.w	r9,r7[-28]
80009394:	30 18       	mov	r8,1
80009396:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000939a:	30 18       	mov	r8,1
8000939c:	c1 a8       	rjmp	800093d0 <main+0x1040>
    }
    return false;
8000939e:	30 08       	mov	r8,0
800093a0:	c1 88       	rjmp	800093d0 <main+0x1040>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800093a2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800093a6:	70 09       	ld.w	r9,r8[0x0]
800093a8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800093ac:	12 38       	cp.w	r8,r9
800093ae:	c0 93       	brcs	800093c0 <main+0x1030>
800093b0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800093b4:	70 19       	ld.w	r9,r8[0x4]
800093b6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800093ba:	12 38       	cp.w	r8,r9
800093bc:	e0 88 00 09 	brls	800093ce <main+0x103e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800093c0:	ee f9 ff e4 	ld.w	r9,r7[-28]
800093c4:	30 18       	mov	r8,1
800093c6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800093ca:	30 18       	mov	r8,1
800093cc:	c0 28       	rjmp	800093d0 <main+0x1040>
    }
    return false;
800093ce:	30 08       	mov	r8,0
				
			}
		} //if (!EC_DOOR_LATCHED)
		
		if (cpu_is_timeout(&debugTimer))
800093d0:	58 08       	cp.w	r8,0
800093d2:	fe 90 f8 55 	breq	8000847c <main+0xec>
800093d6:	4c 08       	lddpc	r8,800094d4 <main+0x1144>
800093d8:	ef 48 ff ec 	st.w	r7[-20],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
800093dc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800093e0:	30 28       	mov	r8,2
800093e2:	f3 68 00 08 	st.b	r9[8],r8
800093e6:	e0 68 03 e8 	mov	r8,1000
800093ea:	ef 48 ff f4 	st.w	r7[-12],r8
800093ee:	e0 68 12 00 	mov	r8,4608
800093f2:	ea 18 00 7a 	orh	r8,0x7a
800093f6:	ef 48 ff f0 	st.w	r7[-16],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800093fa:	ee fa ff f4 	ld.w	r10,r7[-12]
800093fe:	ef 4a fe 94 	st.w	r7[-364],r10
80009402:	30 08       	mov	r8,0
80009404:	ef 48 fe 90 	st.w	r7[-368],r8
80009408:	ee fc ff f0 	ld.w	r12,r7[-16]
8000940c:	ef 4c fe 8c 	st.w	r7[-372],r12
80009410:	30 0a       	mov	r10,0
80009412:	ef 4a fe 88 	st.w	r7[-376],r10
80009416:	ee f9 fe 90 	ld.w	r9,r7[-368]
8000941a:	ee f8 fe 8c 	ld.w	r8,r7[-372]
8000941e:	b1 39       	mul	r9,r8
80009420:	ee f8 fe 88 	ld.w	r8,r7[-376]
80009424:	ee fc fe 94 	ld.w	r12,r7[-364]
80009428:	b9 38       	mul	r8,r12
8000942a:	10 09       	add	r9,r8
8000942c:	ee f8 fe 94 	ld.w	r8,r7[-364]
80009430:	ee fc fe 8c 	ld.w	r12,r7[-372]
80009434:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80009438:	16 09       	add	r9,r11
8000943a:	12 9b       	mov	r11,r9
8000943c:	e0 68 03 e7 	mov	r8,999
80009440:	30 09       	mov	r9,0
80009442:	10 0a       	add	r10,r8
80009444:	f6 09 00 4b 	adc	r11,r11,r9
80009448:	e0 68 03 e8 	mov	r8,1000
8000944c:	30 09       	mov	r9,0
8000944e:	f0 1f 00 21 	mcall	800094d0 <main+0x1140>
80009452:	14 98       	mov	r8,r10
80009454:	16 99       	mov	r9,r11
		{
			cpu_stop_timeout(&debugTimer);
			cpu_set_timeout((EC_ONE_SECOND/2), &debugTimer);
80009456:	a1 98       	lsr	r8,0x1
80009458:	ef 48 ff fc 	st.w	r7[-4],r8
8000945c:	49 e8       	lddpc	r8,800094d4 <main+0x1144>
8000945e:	ef 48 ff f8 	st.w	r7[-8],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80009462:	e1 b8 00 42 	mfsr	r8,0x108
80009466:	10 99       	mov	r9,r8
80009468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000946c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000946e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009472:	70 09       	ld.w	r9,r8[0x0]
80009474:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009478:	10 09       	add	r9,r8
8000947a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000947e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80009480:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009484:	30 08       	mov	r8,0
80009486:	f3 68 00 08 	st.b	r9[8],r8
			gpio_toggle_pin(ECLAVE_DEBUG_LED);
8000948a:	37 cc       	mov	r12,124
8000948c:	f0 1f 00 2e 	mcall	80009544 <main+0x11b4>
		}
	} //while(true)
80009490:	fe 9f f7 f7 	bral	8000847e <main+0xee>
80009494:	80 00       	ld.sh	r0,r0[0x0]
80009496:	6c 44       	ld.w	r4,r6[0x10]
80009498:	80 00       	ld.sh	r0,r0[0x0]
8000949a:	63 e4       	ld.w	r4,r1[0x78]
8000949c:	80 00       	ld.sh	r0,r0[0x0]
8000949e:	32 a8       	mov	r8,42
800094a0:	80 00       	ld.sh	r0,r0[0x0]
800094a2:	32 cc       	mov	r12,44
800094a4:	80 00       	ld.sh	r0,r0[0x0]
800094a6:	62 28       	ld.w	r8,r1[0x8]
800094a8:	80 00       	ld.sh	r0,r0[0x0]
800094aa:	33 a8       	mov	r8,58
800094ac:	80 00       	ld.sh	r0,r0[0x0]
800094ae:	63 78       	ld.w	r8,r1[0x5c]
800094b0:	80 00       	ld.sh	r0,r0[0x0]
800094b2:	6c 94       	ld.w	r4,r6[0x24]
800094b4:	80 00       	ld.sh	r0,r0[0x0]
800094b6:	4c ac       	lddpc	r12,800095dc <__avr32_f64_mul+0x94>
800094b8:	80 00       	ld.sh	r0,r0[0x0]
800094ba:	6c e0       	ld.w	r0,r6[0x38]
800094bc:	80 00       	ld.sh	r0,r0[0x0]
800094be:	4b 72       	lddpc	r2,80009598 <__avr32_f64_mul+0x50>
800094c0:	80 00       	ld.sh	r0,r0[0x0]
800094c2:	5e 24       	reths	r4
800094c4:	00 00       	add	r0,r0
800094c6:	0b 48       	ld.w	r8,--r5
800094c8:	80 00       	ld.sh	r0,r0[0x0]
800094ca:	80 94       	ld.uh	r4,r0[0x2]
800094cc:	80 00       	ld.sh	r0,r0[0x0]
800094ce:	4b ac       	lddpc	r12,800095b4 <__avr32_f64_mul+0x6c>
800094d0:	80 00       	ld.sh	r0,r0[0x0]
800094d2:	9c 9e       	ld.uh	lr,lr[0x2]
800094d4:	00 00       	add	r0,r0
800094d6:	03 78       	ld.ub	r8,--r1
800094d8:	80 00       	ld.sh	r0,r0[0x0]
800094da:	a5 d8       	cbr	r8,0x5
800094dc:	80 00       	ld.sh	r0,r0[0x0]
800094de:	4b 36       	lddpc	r6,800095a8 <__avr32_f64_mul+0x60>
800094e0:	80 00       	ld.sh	r0,r0[0x0]
800094e2:	62 74       	ld.w	r4,r1[0x1c]
800094e4:	00 00       	add	r0,r0
800094e6:	00 b0       	st.h	r0++,r0
800094e8:	80 00       	ld.sh	r0,r0[0x0]
800094ea:	62 8c       	ld.w	r12,r1[0x20]
800094ec:	80 00       	ld.sh	r0,r0[0x0]
800094ee:	62 b0       	ld.w	r0,r1[0x2c]
800094f0:	80 00       	ld.sh	r0,r0[0x0]
800094f2:	67 b8       	ld.w	r8,r3[0x6c]
800094f4:	80 00       	ld.sh	r0,r0[0x0]
800094f6:	6a 58       	ld.w	r8,r5[0x14]
800094f8:	80 00       	ld.sh	r0,r0[0x0]
800094fa:	6a ac       	ld.w	r12,r5[0x28]
800094fc:	80 00       	ld.sh	r0,r0[0x0]
800094fe:	6c 30       	ld.w	r0,r6[0xc]
80009500:	80 00       	ld.sh	r0,r0[0x0]
80009502:	62 d8       	ld.w	r8,r1[0x34]
80009504:	80 00       	ld.sh	r0,r0[0x0]
80009506:	62 ec       	ld.w	r12,r1[0x38]
80009508:	00 00       	add	r0,r0
8000950a:	02 b0       	st.h	r1++,r0
8000950c:	00 00       	add	r0,r0
8000950e:	03 58       	ld.sh	r8,--r1
80009510:	00 00       	add	r0,r0
80009512:	03 3a       	ld.ub	r10,r1++
80009514:	80 00       	ld.sh	r0,r0[0x0]
80009516:	6d 60       	ld.w	r0,r6[0x58]
80009518:	00 00       	add	r0,r0
8000951a:	03 60       	ld.uh	r0,--r1
8000951c:	80 00       	ld.sh	r0,r0[0x0]
8000951e:	60 80       	ld.w	r0,r0[0x20]
80009520:	00 00       	add	r0,r0
80009522:	02 e0       	st.h	--r1,r0
80009524:	00 00       	add	r0,r0
80009526:	0b 08       	ld.w	r8,r5++
80009528:	00 00       	add	r0,r0
8000952a:	03 4c       	ld.w	r12,--r1
8000952c:	00 00       	add	r0,r0
8000952e:	0b 4c       	ld.w	r12,--r5
80009530:	80 00       	ld.sh	r0,r0[0x0]
80009532:	7a e8       	ld.w	r8,sp[0x38]
80009534:	80 00       	ld.sh	r0,r0[0x0]
80009536:	63 34       	ld.w	r4,r1[0x4c]
80009538:	00 00       	add	r0,r0
8000953a:	0b 14       	ld.sh	r4,r5++
8000953c:	80 00       	ld.sh	r0,r0[0x0]
8000953e:	6e 80       	ld.w	r0,r7[0x20]
80009540:	80 00       	ld.sh	r0,r0[0x0]
80009542:	63 44       	ld.w	r4,r1[0x50]
80009544:	80 00       	ld.sh	r0,r0[0x0]
80009546:	4b e6       	lddpc	r6,8000963c <__avr32_f64_mul_op2_subnormal+0x16>

80009548 <__avr32_f64_mul>:
80009548:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000954c:	e0 80 00 dc 	breq	80009704 <__avr32_f64_mul_op1_zero>
80009550:	d4 21       	pushm	r4-r7,lr
80009552:	f7 e9 20 0e 	eor	lr,r11,r9
80009556:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000955a:	30 15       	mov	r5,1
8000955c:	c4 30       	breq	800095e2 <__avr32_f64_mul_op1_subnormal>
8000955e:	ab 6b       	lsl	r11,0xa
80009560:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80009564:	ab 6a       	lsl	r10,0xa
80009566:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000956a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000956e:	c5 c0       	breq	80009626 <__avr32_f64_mul_op2_subnormal>
80009570:	a1 78       	lsl	r8,0x1
80009572:	5c f9       	rol	r9
80009574:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80009578:	e0 47 07 ff 	cp.w	r7,2047
8000957c:	c7 70       	breq	8000966a <__avr32_f64_mul_op_nan_or_inf>
8000957e:	e0 46 07 ff 	cp.w	r6,2047
80009582:	c7 40       	breq	8000966a <__avr32_f64_mul_op_nan_or_inf>
80009584:	ee 06 00 0c 	add	r12,r7,r6
80009588:	e0 2c 03 fe 	sub	r12,1022
8000958c:	f6 08 06 44 	mulu.d	r4,r11,r8
80009590:	f4 09 07 44 	macu.d	r4,r10,r9
80009594:	f4 08 06 46 	mulu.d	r6,r10,r8
80009598:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000959c:	08 07       	add	r7,r4
8000959e:	f4 05 00 4a 	adc	r10,r10,r5
800095a2:	5c 0b       	acr	r11
800095a4:	ed bb 00 14 	bld	r11,0x14
800095a8:	c0 50       	breq	800095b2 <__avr32_f64_mul+0x6a>
800095aa:	a1 77       	lsl	r7,0x1
800095ac:	5c fa       	rol	r10
800095ae:	5c fb       	rol	r11
800095b0:	20 1c       	sub	r12,1
800095b2:	58 0c       	cp.w	r12,0
800095b4:	e0 8a 00 6f 	brle	80009692 <__avr32_f64_mul_res_subnormal>
800095b8:	e0 4c 07 ff 	cp.w	r12,2047
800095bc:	e0 84 00 9c 	brge	800096f4 <__avr32_f64_mul_res_inf>
800095c0:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
800095c4:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
800095c8:	ef e6 12 17 	or	r7,r7,r6>>0x1
800095cc:	ee 17 80 00 	eorh	r7,0x8000
800095d0:	f1 b7 04 20 	satu	r7,0x1
800095d4:	0e 0a       	add	r10,r7
800095d6:	5c 0b       	acr	r11
800095d8:	ed be 00 1f 	bld	lr,0x1f
800095dc:	ef bb 00 1f 	bst	r11,0x1f
800095e0:	d8 22       	popm	r4-r7,pc

800095e2 <__avr32_f64_mul_op1_subnormal>:
800095e2:	e4 1b 00 0f 	andh	r11,0xf
800095e6:	f4 0c 12 00 	clz	r12,r10
800095ea:	f6 06 12 00 	clz	r6,r11
800095ee:	f7 bc 03 e1 	sublo	r12,-31
800095f2:	f8 06 17 30 	movlo	r6,r12
800095f6:	f7 b6 02 01 	subhs	r6,1
800095fa:	e0 46 00 20 	cp.w	r6,32
800095fe:	c0 d4       	brge	80009618 <__avr32_f64_mul_op1_subnormal+0x36>
80009600:	ec 0c 11 20 	rsub	r12,r6,32
80009604:	f6 06 09 4b 	lsl	r11,r11,r6
80009608:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000960c:	18 4b       	or	r11,r12
8000960e:	f4 06 09 4a 	lsl	r10,r10,r6
80009612:	20 b6       	sub	r6,11
80009614:	0c 17       	sub	r7,r6
80009616:	ca ab       	rjmp	8000956a <__avr32_f64_mul+0x22>
80009618:	f4 06 09 4b 	lsl	r11,r10,r6
8000961c:	c6 40       	breq	800096e4 <__avr32_f64_mul_res_zero>
8000961e:	30 0a       	mov	r10,0
80009620:	20 b6       	sub	r6,11
80009622:	0c 17       	sub	r7,r6
80009624:	ca 3b       	rjmp	8000956a <__avr32_f64_mul+0x22>

80009626 <__avr32_f64_mul_op2_subnormal>:
80009626:	e4 19 00 0f 	andh	r9,0xf
8000962a:	f0 0c 12 00 	clz	r12,r8
8000962e:	f2 05 12 00 	clz	r5,r9
80009632:	f7 bc 03 ea 	sublo	r12,-22
80009636:	f8 05 17 30 	movlo	r5,r12
8000963a:	f7 b5 02 0a 	subhs	r5,10
8000963e:	e0 45 00 20 	cp.w	r5,32
80009642:	c0 d4       	brge	8000965c <__avr32_f64_mul_op2_subnormal+0x36>
80009644:	ea 0c 11 20 	rsub	r12,r5,32
80009648:	f2 05 09 49 	lsl	r9,r9,r5
8000964c:	f0 0c 0a 4c 	lsr	r12,r8,r12
80009650:	18 49       	or	r9,r12
80009652:	f0 05 09 48 	lsl	r8,r8,r5
80009656:	20 25       	sub	r5,2
80009658:	0a 16       	sub	r6,r5
8000965a:	c8 fb       	rjmp	80009578 <__avr32_f64_mul+0x30>
8000965c:	f0 05 09 49 	lsl	r9,r8,r5
80009660:	c4 20       	breq	800096e4 <__avr32_f64_mul_res_zero>
80009662:	30 08       	mov	r8,0
80009664:	20 25       	sub	r5,2
80009666:	0a 16       	sub	r6,r5
80009668:	c8 8b       	rjmp	80009578 <__avr32_f64_mul+0x30>

8000966a <__avr32_f64_mul_op_nan_or_inf>:
8000966a:	e4 19 00 0f 	andh	r9,0xf
8000966e:	e4 1b 00 0f 	andh	r11,0xf
80009672:	14 4b       	or	r11,r10
80009674:	10 49       	or	r9,r8
80009676:	e0 47 07 ff 	cp.w	r7,2047
8000967a:	c0 91       	brne	8000968c <__avr32_f64_mul_op1_not_naninf>
8000967c:	58 0b       	cp.w	r11,0
8000967e:	c3 81       	brne	800096ee <__avr32_f64_mul_res_nan>
80009680:	e0 46 07 ff 	cp.w	r6,2047
80009684:	c3 81       	brne	800096f4 <__avr32_f64_mul_res_inf>
80009686:	58 09       	cp.w	r9,0
80009688:	c3 60       	breq	800096f4 <__avr32_f64_mul_res_inf>
8000968a:	c3 28       	rjmp	800096ee <__avr32_f64_mul_res_nan>

8000968c <__avr32_f64_mul_op1_not_naninf>:
8000968c:	58 09       	cp.w	r9,0
8000968e:	c3 30       	breq	800096f4 <__avr32_f64_mul_res_inf>
80009690:	c2 f8       	rjmp	800096ee <__avr32_f64_mul_res_nan>

80009692 <__avr32_f64_mul_res_subnormal>:
80009692:	5c 3c       	neg	r12
80009694:	2f fc       	sub	r12,-1
80009696:	f1 bc 04 c0 	satu	r12,0x6
8000969a:	e0 4c 00 20 	cp.w	r12,32
8000969e:	c1 14       	brge	800096c0 <__avr32_f64_mul_res_subnormal+0x2e>
800096a0:	f8 08 11 20 	rsub	r8,r12,32
800096a4:	0e 46       	or	r6,r7
800096a6:	ee 0c 0a 47 	lsr	r7,r7,r12
800096aa:	f4 08 09 49 	lsl	r9,r10,r8
800096ae:	12 47       	or	r7,r9
800096b0:	f4 0c 0a 4a 	lsr	r10,r10,r12
800096b4:	f6 08 09 49 	lsl	r9,r11,r8
800096b8:	12 4a       	or	r10,r9
800096ba:	f6 0c 0a 4b 	lsr	r11,r11,r12
800096be:	c8 3b       	rjmp	800095c4 <__avr32_f64_mul+0x7c>
800096c0:	f8 08 11 20 	rsub	r8,r12,32
800096c4:	f9 b9 00 00 	moveq	r9,0
800096c8:	c0 30       	breq	800096ce <__avr32_f64_mul_res_subnormal+0x3c>
800096ca:	f6 08 09 49 	lsl	r9,r11,r8
800096ce:	0e 46       	or	r6,r7
800096d0:	ed ea 10 16 	or	r6,r6,r10<<0x1
800096d4:	f4 0c 0a 4a 	lsr	r10,r10,r12
800096d8:	f3 ea 10 07 	or	r7,r9,r10
800096dc:	f6 0c 0a 4a 	lsr	r10,r11,r12
800096e0:	30 0b       	mov	r11,0
800096e2:	c7 1b       	rjmp	800095c4 <__avr32_f64_mul+0x7c>

800096e4 <__avr32_f64_mul_res_zero>:
800096e4:	1c 9b       	mov	r11,lr
800096e6:	e6 1b 80 00 	andh	r11,0x8000,COH
800096ea:	30 0a       	mov	r10,0
800096ec:	d8 22       	popm	r4-r7,pc

800096ee <__avr32_f64_mul_res_nan>:
800096ee:	3f fb       	mov	r11,-1
800096f0:	3f fa       	mov	r10,-1
800096f2:	d8 22       	popm	r4-r7,pc

800096f4 <__avr32_f64_mul_res_inf>:
800096f4:	f0 6b 00 00 	mov	r11,-1048576
800096f8:	ed be 00 1f 	bld	lr,0x1f
800096fc:	ef bb 00 1f 	bst	r11,0x1f
80009700:	30 0a       	mov	r10,0
80009702:	d8 22       	popm	r4-r7,pc

80009704 <__avr32_f64_mul_op1_zero>:
80009704:	f7 e9 20 0b 	eor	r11,r11,r9
80009708:	e6 1b 80 00 	andh	r11,0x8000,COH
8000970c:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80009710:	e0 4c 07 ff 	cp.w	r12,2047
80009714:	5e 1c       	retne	r12
80009716:	3f fa       	mov	r10,-1
80009718:	3f fb       	mov	r11,-1
8000971a:	5e fc       	retal	r12

8000971c <__avr32_f64_sub_from_add>:
8000971c:	ee 19 80 00 	eorh	r9,0x8000

80009720 <__avr32_f64_sub>:
80009720:	f7 e9 20 0c 	eor	r12,r11,r9
80009724:	e0 86 00 ca 	brmi	800098b8 <__avr32_f64_add_from_sub>
80009728:	eb cd 40 e0 	pushm	r5-r7,lr
8000972c:	16 9c       	mov	r12,r11
8000972e:	e6 1c 80 00 	andh	r12,0x8000,COH
80009732:	bf db       	cbr	r11,0x1f
80009734:	bf d9       	cbr	r9,0x1f
80009736:	10 3a       	cp.w	r10,r8
80009738:	f2 0b 13 00 	cpc	r11,r9
8000973c:	c0 92       	brcc	8000974e <__avr32_f64_sub+0x2e>
8000973e:	16 97       	mov	r7,r11
80009740:	12 9b       	mov	r11,r9
80009742:	0e 99       	mov	r9,r7
80009744:	14 97       	mov	r7,r10
80009746:	10 9a       	mov	r10,r8
80009748:	0e 98       	mov	r8,r7
8000974a:	ee 1c 80 00 	eorh	r12,0x8000
8000974e:	f6 07 16 14 	lsr	r7,r11,0x14
80009752:	ab 7b       	lsl	r11,0xb
80009754:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80009758:	ab 7a       	lsl	r10,0xb
8000975a:	bf bb       	sbr	r11,0x1f
8000975c:	f2 06 16 14 	lsr	r6,r9,0x14
80009760:	c4 40       	breq	800097e8 <__avr32_f64_sub_opL_subnormal>
80009762:	ab 79       	lsl	r9,0xb
80009764:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009768:	ab 78       	lsl	r8,0xb
8000976a:	bf b9       	sbr	r9,0x1f

8000976c <__avr32_f64_sub_opL_subnormal_done>:
8000976c:	e0 47 07 ff 	cp.w	r7,2047
80009770:	c4 f0       	breq	8000980e <__avr32_f64_sub_opH_nan_or_inf>
80009772:	0e 26       	rsub	r6,r7
80009774:	c1 20       	breq	80009798 <__avr32_f64_sub_shift_done>
80009776:	ec 05 11 20 	rsub	r5,r6,32
8000977a:	e0 46 00 20 	cp.w	r6,32
8000977e:	c7 c2       	brcc	80009876 <__avr32_f64_sub_longshift>
80009780:	f0 05 09 4e 	lsl	lr,r8,r5
80009784:	f2 05 09 45 	lsl	r5,r9,r5
80009788:	f0 06 0a 48 	lsr	r8,r8,r6
8000978c:	f2 06 0a 49 	lsr	r9,r9,r6
80009790:	0a 48       	or	r8,r5
80009792:	58 0e       	cp.w	lr,0
80009794:	5f 1e       	srne	lr
80009796:	1c 48       	or	r8,lr

80009798 <__avr32_f64_sub_shift_done>:
80009798:	10 1a       	sub	r10,r8
8000979a:	f6 09 01 4b 	sbc	r11,r11,r9
8000979e:	f6 06 12 00 	clz	r6,r11
800097a2:	c0 e0       	breq	800097be <__avr32_f64_sub_longnormalize_done>
800097a4:	c7 83       	brcs	80009894 <__avr32_f64_sub_longnormalize>
800097a6:	ec 0e 11 20 	rsub	lr,r6,32
800097aa:	f6 06 09 4b 	lsl	r11,r11,r6
800097ae:	f4 0e 0a 4e 	lsr	lr,r10,lr
800097b2:	1c 4b       	or	r11,lr
800097b4:	f4 06 09 4a 	lsl	r10,r10,r6
800097b8:	0c 17       	sub	r7,r6
800097ba:	e0 8a 00 39 	brle	8000982c <__avr32_f64_sub_subnormal_result>

800097be <__avr32_f64_sub_longnormalize_done>:
800097be:	f4 09 15 15 	lsl	r9,r10,0x15
800097c2:	ab 9a       	lsr	r10,0xb
800097c4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800097c8:	ab 9b       	lsr	r11,0xb
800097ca:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800097ce:	18 4b       	or	r11,r12

800097d0 <__avr32_f64_sub_round>:
800097d0:	fc 17 80 00 	movh	r7,0x8000
800097d4:	ed ba 00 00 	bld	r10,0x0
800097d8:	f7 b7 01 ff 	subne	r7,-1
800097dc:	0e 39       	cp.w	r9,r7
800097de:	5f 29       	srhs	r9
800097e0:	12 0a       	add	r10,r9
800097e2:	5c 0b       	acr	r11
800097e4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800097e8 <__avr32_f64_sub_opL_subnormal>:
800097e8:	ab 79       	lsl	r9,0xb
800097ea:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800097ee:	ab 78       	lsl	r8,0xb
800097f0:	f3 e8 10 0e 	or	lr,r9,r8
800097f4:	f9 b6 01 01 	movne	r6,1
800097f8:	ee 0e 11 00 	rsub	lr,r7,0
800097fc:	f9 b7 00 01 	moveq	r7,1
80009800:	ef bb 00 1f 	bst	r11,0x1f
80009804:	f7 ea 10 0e 	or	lr,r11,r10
80009808:	f9 b7 00 00 	moveq	r7,0
8000980c:	cb 0b       	rjmp	8000976c <__avr32_f64_sub_opL_subnormal_done>

8000980e <__avr32_f64_sub_opH_nan_or_inf>:
8000980e:	bf db       	cbr	r11,0x1f
80009810:	f7 ea 10 0e 	or	lr,r11,r10
80009814:	c0 81       	brne	80009824 <__avr32_f64_sub_return_nan>
80009816:	e0 46 07 ff 	cp.w	r6,2047
8000981a:	c0 50       	breq	80009824 <__avr32_f64_sub_return_nan>
8000981c:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80009820:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009824 <__avr32_f64_sub_return_nan>:
80009824:	3f fa       	mov	r10,-1
80009826:	3f fb       	mov	r11,-1
80009828:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000982c <__avr32_f64_sub_subnormal_result>:
8000982c:	5c 37       	neg	r7
8000982e:	2f f7       	sub	r7,-1
80009830:	f1 b7 04 c0 	satu	r7,0x6
80009834:	e0 47 00 20 	cp.w	r7,32
80009838:	c1 14       	brge	8000985a <__avr32_f64_sub_subnormal_result+0x2e>
8000983a:	ee 08 11 20 	rsub	r8,r7,32
8000983e:	f4 08 09 49 	lsl	r9,r10,r8
80009842:	5f 16       	srne	r6
80009844:	f4 07 0a 4a 	lsr	r10,r10,r7
80009848:	0c 4a       	or	r10,r6
8000984a:	f6 08 09 49 	lsl	r9,r11,r8
8000984e:	f5 e9 10 0a 	or	r10,r10,r9
80009852:	f4 07 0a 4b 	lsr	r11,r10,r7
80009856:	30 07       	mov	r7,0
80009858:	cb 3b       	rjmp	800097be <__avr32_f64_sub_longnormalize_done>
8000985a:	ee 08 11 40 	rsub	r8,r7,64
8000985e:	f6 08 09 49 	lsl	r9,r11,r8
80009862:	14 49       	or	r9,r10
80009864:	5f 16       	srne	r6
80009866:	f6 07 0a 4a 	lsr	r10,r11,r7
8000986a:	0c 4a       	or	r10,r6
8000986c:	30 0b       	mov	r11,0
8000986e:	30 07       	mov	r7,0
80009870:	ca 7b       	rjmp	800097be <__avr32_f64_sub_longnormalize_done>
80009872:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009876 <__avr32_f64_sub_longshift>:
80009876:	f1 b6 04 c0 	satu	r6,0x6
8000987a:	f0 0e 17 00 	moveq	lr,r8
8000987e:	c0 40       	breq	80009886 <__avr32_f64_sub_longshift+0x10>
80009880:	f2 05 09 4e 	lsl	lr,r9,r5
80009884:	10 4e       	or	lr,r8
80009886:	f2 06 0a 48 	lsr	r8,r9,r6
8000988a:	30 09       	mov	r9,0
8000988c:	58 0e       	cp.w	lr,0
8000988e:	5f 1e       	srne	lr
80009890:	1c 48       	or	r8,lr
80009892:	c8 3b       	rjmp	80009798 <__avr32_f64_sub_shift_done>

80009894 <__avr32_f64_sub_longnormalize>:
80009894:	f4 06 12 00 	clz	r6,r10
80009898:	f9 b7 03 00 	movlo	r7,0
8000989c:	f9 b6 03 00 	movlo	r6,0
800098a0:	f9 bc 03 00 	movlo	r12,0
800098a4:	f7 b6 02 e0 	subhs	r6,-32
800098a8:	f4 06 09 4b 	lsl	r11,r10,r6
800098ac:	30 0a       	mov	r10,0
800098ae:	0c 17       	sub	r7,r6
800098b0:	fe 9a ff be 	brle	8000982c <__avr32_f64_sub_subnormal_result>
800098b4:	c8 5b       	rjmp	800097be <__avr32_f64_sub_longnormalize_done>
	...

800098b8 <__avr32_f64_add_from_sub>:
800098b8:	ee 19 80 00 	eorh	r9,0x8000

800098bc <__avr32_f64_add>:
800098bc:	f7 e9 20 0c 	eor	r12,r11,r9
800098c0:	fe 96 ff 2e 	brmi	8000971c <__avr32_f64_sub_from_add>
800098c4:	eb cd 40 e0 	pushm	r5-r7,lr
800098c8:	16 9c       	mov	r12,r11
800098ca:	e6 1c 80 00 	andh	r12,0x8000,COH
800098ce:	bf db       	cbr	r11,0x1f
800098d0:	bf d9       	cbr	r9,0x1f
800098d2:	12 3b       	cp.w	r11,r9
800098d4:	c0 72       	brcc	800098e2 <__avr32_f64_add+0x26>
800098d6:	16 97       	mov	r7,r11
800098d8:	12 9b       	mov	r11,r9
800098da:	0e 99       	mov	r9,r7
800098dc:	14 97       	mov	r7,r10
800098de:	10 9a       	mov	r10,r8
800098e0:	0e 98       	mov	r8,r7
800098e2:	30 0e       	mov	lr,0
800098e4:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800098e8:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800098ec:	b5 ab       	sbr	r11,0x14
800098ee:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800098f2:	c6 20       	breq	800099b6 <__avr32_f64_add_op2_subnormal>
800098f4:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800098f8:	b5 a9       	sbr	r9,0x14
800098fa:	e0 47 07 ff 	cp.w	r7,2047
800098fe:	c2 80       	breq	8000994e <__avr32_f64_add_opH_nan_or_inf>
80009900:	0e 26       	rsub	r6,r7
80009902:	c1 20       	breq	80009926 <__avr32_f64_add_shift_done>
80009904:	e0 46 00 36 	cp.w	r6,54
80009908:	c1 52       	brcc	80009932 <__avr32_f64_add_res_of_done>
8000990a:	ec 05 11 20 	rsub	r5,r6,32
8000990e:	e0 46 00 20 	cp.w	r6,32
80009912:	c3 52       	brcc	8000997c <__avr32_f64_add_longshift>
80009914:	f0 05 09 4e 	lsl	lr,r8,r5
80009918:	f2 05 09 45 	lsl	r5,r9,r5
8000991c:	f0 06 0a 48 	lsr	r8,r8,r6
80009920:	f2 06 0a 49 	lsr	r9,r9,r6
80009924:	0a 48       	or	r8,r5

80009926 <__avr32_f64_add_shift_done>:
80009926:	10 0a       	add	r10,r8
80009928:	f6 09 00 4b 	adc	r11,r11,r9
8000992c:	ed bb 00 15 	bld	r11,0x15
80009930:	c3 40       	breq	80009998 <__avr32_f64_add_res_of>

80009932 <__avr32_f64_add_res_of_done>:
80009932:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009936:	18 4b       	or	r11,r12

80009938 <__avr32_f64_add_round>:
80009938:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000993c:	18 4e       	or	lr,r12
8000993e:	ee 1e 80 00 	eorh	lr,0x8000
80009942:	f1 be 04 20 	satu	lr,0x1
80009946:	1c 0a       	add	r10,lr
80009948:	5c 0b       	acr	r11
8000994a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000994e <__avr32_f64_add_opH_nan_or_inf>:
8000994e:	b5 cb       	cbr	r11,0x14
80009950:	f7 ea 10 0e 	or	lr,r11,r10
80009954:	c1 01       	brne	80009974 <__avr32_f64_add_return_nan>
80009956:	e0 46 07 ff 	cp.w	r6,2047
8000995a:	c0 30       	breq	80009960 <__avr32_f64_add_opL_nan_or_inf>
8000995c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009960 <__avr32_f64_add_opL_nan_or_inf>:
80009960:	b5 c9       	cbr	r9,0x14
80009962:	f3 e8 10 0e 	or	lr,r9,r8
80009966:	c0 71       	brne	80009974 <__avr32_f64_add_return_nan>
80009968:	30 0a       	mov	r10,0
8000996a:	fc 1b 7f f0 	movh	r11,0x7ff0
8000996e:	18 4b       	or	r11,r12
80009970:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009974 <__avr32_f64_add_return_nan>:
80009974:	3f fa       	mov	r10,-1
80009976:	3f fb       	mov	r11,-1
80009978:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000997c <__avr32_f64_add_longshift>:
8000997c:	f1 b6 04 c0 	satu	r6,0x6
80009980:	f0 0e 17 00 	moveq	lr,r8
80009984:	c0 60       	breq	80009990 <__avr32_f64_add_longshift+0x14>
80009986:	f2 05 09 4e 	lsl	lr,r9,r5
8000998a:	58 08       	cp.w	r8,0
8000998c:	5f 18       	srne	r8
8000998e:	10 4e       	or	lr,r8
80009990:	f2 06 0a 48 	lsr	r8,r9,r6
80009994:	30 09       	mov	r9,0
80009996:	cc 8b       	rjmp	80009926 <__avr32_f64_add_shift_done>

80009998 <__avr32_f64_add_res_of>:
80009998:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000999c:	a1 9b       	lsr	r11,0x1
8000999e:	5d 0a       	ror	r10
800099a0:	5d 0e       	ror	lr
800099a2:	2f f7       	sub	r7,-1
800099a4:	e0 47 07 ff 	cp.w	r7,2047
800099a8:	f9 ba 00 00 	moveq	r10,0
800099ac:	f9 bb 00 00 	moveq	r11,0
800099b0:	f9 be 00 00 	moveq	lr,0
800099b4:	cb fb       	rjmp	80009932 <__avr32_f64_add_res_of_done>

800099b6 <__avr32_f64_add_op2_subnormal>:
800099b6:	30 16       	mov	r6,1
800099b8:	58 07       	cp.w	r7,0
800099ba:	ca 01       	brne	800098fa <__avr32_f64_add+0x3e>
800099bc:	b5 cb       	cbr	r11,0x14
800099be:	10 0a       	add	r10,r8
800099c0:	f6 09 00 4b 	adc	r11,r11,r9
800099c4:	18 4b       	or	r11,r12
800099c6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	...

800099cc <__avr32_u32_to_f64>:
800099cc:	f8 cb 00 00 	sub	r11,r12,0
800099d0:	30 0c       	mov	r12,0
800099d2:	c0 38       	rjmp	800099d8 <__avr32_s32_to_f64+0x4>

800099d4 <__avr32_s32_to_f64>:
800099d4:	18 9b       	mov	r11,r12
800099d6:	5c 4b       	abs	r11
800099d8:	30 0a       	mov	r10,0
800099da:	5e 0b       	reteq	r11
800099dc:	d4 01       	pushm	lr
800099de:	e0 69 04 1e 	mov	r9,1054
800099e2:	f6 08 12 00 	clz	r8,r11
800099e6:	c1 70       	breq	80009a14 <__avr32_s32_to_f64+0x40>
800099e8:	c0 c3       	brcs	80009a00 <__avr32_s32_to_f64+0x2c>
800099ea:	f0 0e 11 20 	rsub	lr,r8,32
800099ee:	f6 08 09 4b 	lsl	r11,r11,r8
800099f2:	f4 0e 0a 4e 	lsr	lr,r10,lr
800099f6:	1c 4b       	or	r11,lr
800099f8:	f4 08 09 4a 	lsl	r10,r10,r8
800099fc:	10 19       	sub	r9,r8
800099fe:	c0 b8       	rjmp	80009a14 <__avr32_s32_to_f64+0x40>
80009a00:	f4 08 12 00 	clz	r8,r10
80009a04:	f9 b8 03 00 	movlo	r8,0
80009a08:	f7 b8 02 e0 	subhs	r8,-32
80009a0c:	f4 08 09 4b 	lsl	r11,r10,r8
80009a10:	30 0a       	mov	r10,0
80009a12:	10 19       	sub	r9,r8
80009a14:	58 09       	cp.w	r9,0
80009a16:	e0 89 00 30 	brgt	80009a76 <__avr32_s32_to_f64+0xa2>
80009a1a:	5c 39       	neg	r9
80009a1c:	2f f9       	sub	r9,-1
80009a1e:	e0 49 00 36 	cp.w	r9,54
80009a22:	c0 43       	brcs	80009a2a <__avr32_s32_to_f64+0x56>
80009a24:	30 0b       	mov	r11,0
80009a26:	30 0a       	mov	r10,0
80009a28:	c2 68       	rjmp	80009a74 <__avr32_s32_to_f64+0xa0>
80009a2a:	2f 69       	sub	r9,-10
80009a2c:	f2 08 11 20 	rsub	r8,r9,32
80009a30:	e0 49 00 20 	cp.w	r9,32
80009a34:	c0 b2       	brcc	80009a4a <__avr32_s32_to_f64+0x76>
80009a36:	f4 08 09 4e 	lsl	lr,r10,r8
80009a3a:	f6 08 09 48 	lsl	r8,r11,r8
80009a3e:	f4 09 0a 4a 	lsr	r10,r10,r9
80009a42:	f6 09 0a 4b 	lsr	r11,r11,r9
80009a46:	10 4b       	or	r11,r8
80009a48:	c0 88       	rjmp	80009a58 <__avr32_s32_to_f64+0x84>
80009a4a:	f6 08 09 4e 	lsl	lr,r11,r8
80009a4e:	14 4e       	or	lr,r10
80009a50:	16 9a       	mov	r10,r11
80009a52:	30 0b       	mov	r11,0
80009a54:	f4 09 0a 4a 	lsr	r10,r10,r9
80009a58:	ed ba 00 00 	bld	r10,0x0
80009a5c:	c0 92       	brcc	80009a6e <__avr32_s32_to_f64+0x9a>
80009a5e:	1c 7e       	tst	lr,lr
80009a60:	c0 41       	brne	80009a68 <__avr32_s32_to_f64+0x94>
80009a62:	ed ba 00 01 	bld	r10,0x1
80009a66:	c0 42       	brcc	80009a6e <__avr32_s32_to_f64+0x9a>
80009a68:	2f fa       	sub	r10,-1
80009a6a:	f7 bb 02 ff 	subhs	r11,-1
80009a6e:	5c fc       	rol	r12
80009a70:	5d 0b       	ror	r11
80009a72:	5d 0a       	ror	r10
80009a74:	d8 02       	popm	pc
80009a76:	e0 68 03 ff 	mov	r8,1023
80009a7a:	ed ba 00 0b 	bld	r10,0xb
80009a7e:	f7 b8 00 ff 	subeq	r8,-1
80009a82:	10 0a       	add	r10,r8
80009a84:	5c 0b       	acr	r11
80009a86:	f7 b9 03 fe 	sublo	r9,-2
80009a8a:	e0 49 07 ff 	cp.w	r9,2047
80009a8e:	c0 55       	brlt	80009a98 <__avr32_s32_to_f64+0xc4>
80009a90:	30 0a       	mov	r10,0
80009a92:	fc 1b ff e0 	movh	r11,0xffe0
80009a96:	c0 c8       	rjmp	80009aae <__floatsidf_return_op1>
80009a98:	ed bb 00 1f 	bld	r11,0x1f
80009a9c:	f7 b9 01 01 	subne	r9,1
80009aa0:	ab 9a       	lsr	r10,0xb
80009aa2:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80009aa6:	a1 7b       	lsl	r11,0x1
80009aa8:	ab 9b       	lsr	r11,0xb
80009aaa:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80009aae <__floatsidf_return_op1>:
80009aae:	a1 7c       	lsl	r12,0x1
80009ab0:	5d 0b       	ror	r11
80009ab2:	d8 02       	popm	pc

80009ab4 <__avr32_f32_div>:
80009ab4:	f7 ec 20 08 	eor	r8,r11,r12
80009ab8:	a1 7c       	lsl	r12,0x1
80009aba:	a1 7b       	lsl	r11,0x1
80009abc:	c7 a0       	breq	80009bb0 <__divsf_return_op1+0x16>
80009abe:	18 7c       	tst	r12,r12
80009ac0:	f9 b9 00 00 	moveq	r9,0
80009ac4:	c0 90       	breq	80009ad6 <__avr32_f32_div+0x22>
80009ac6:	f8 09 16 18 	lsr	r9,r12,0x18
80009aca:	c7 e0       	breq	80009bc6 <__divsf_return_op1+0x2c>
80009acc:	e0 49 00 ff 	cp.w	r9,255
80009ad0:	c6 82       	brcc	80009ba0 <__divsf_return_op1+0x6>
80009ad2:	a7 7c       	lsl	r12,0x7
80009ad4:	bf bc       	sbr	r12,0x1f
80009ad6:	f6 0a 16 18 	lsr	r10,r11,0x18
80009ada:	c7 e0       	breq	80009bd6 <__divsf_return_op1+0x3c>
80009adc:	e0 4a 00 ff 	cp.w	r10,255
80009ae0:	c6 62       	brcc	80009bac <__divsf_return_op1+0x12>
80009ae2:	a7 7b       	lsl	r11,0x7
80009ae4:	bf bb       	sbr	r11,0x1f
80009ae6:	58 09       	cp.w	r9,0
80009ae8:	f5 bc 00 00 	subfeq	r12,0
80009aec:	5e 0d       	reteq	0
80009aee:	1a d5       	st.w	--sp,r5
80009af0:	bb 27       	st.d	--sp,r6
80009af2:	14 19       	sub	r9,r10
80009af4:	28 19       	sub	r9,-127
80009af6:	fc 1a 80 00 	movh	r10,0x8000
80009afa:	a3 8c       	lsr	r12,0x2
80009afc:	f6 05 16 02 	lsr	r5,r11,0x2
80009b00:	f4 0b 16 01 	lsr	r11,r10,0x1
80009b04:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80009b08:	5c d6       	com	r6
80009b0a:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80009b0e:	f6 05 06 46 	mulu.d	r6,r11,r5
80009b12:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80009b16:	f6 07 06 46 	mulu.d	r6,r11,r7
80009b1a:	ee 0b 15 02 	lsl	r11,r7,0x2
80009b1e:	f6 05 06 46 	mulu.d	r6,r11,r5
80009b22:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80009b26:	f6 07 06 46 	mulu.d	r6,r11,r7
80009b2a:	ee 0b 15 02 	lsl	r11,r7,0x2
80009b2e:	f6 05 06 46 	mulu.d	r6,r11,r5
80009b32:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80009b36:	f6 07 06 46 	mulu.d	r6,r11,r7
80009b3a:	ee 0b 15 02 	lsl	r11,r7,0x2
80009b3e:	f6 05 06 46 	mulu.d	r6,r11,r5
80009b42:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80009b46:	f6 07 06 46 	mulu.d	r6,r11,r7
80009b4a:	ee 0b 15 02 	lsl	r11,r7,0x2
80009b4e:	f6 0c 06 46 	mulu.d	r6,r11,r12
80009b52:	a5 8c       	lsr	r12,0x4
80009b54:	ed b7 00 1c 	bld	r7,0x1c
80009b58:	c0 40       	breq	80009b60 <__avr32_f32_div+0xac>
80009b5a:	a1 77       	lsl	r7,0x1
80009b5c:	20 19       	sub	r9,1
80009b5e:	a1 7c       	lsl	r12,0x1
80009b60:	58 09       	cp.w	r9,0
80009b62:	e0 8a 00 42 	brle	80009be6 <__avr32_f32_div_res_subnormal>
80009b66:	e0 17 ff e0 	andl	r7,0xffe0
80009b6a:	e8 17 00 10 	orl	r7,0x10
80009b6e:	ea 07 06 4a 	mulu.d	r10,r5,r7
80009b72:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80009b76:	58 0a       	cp.w	r10,0

80009b78 <__avr32_f32_div_round_subnormal>:
80009b78:	f8 0b 13 00 	cpc	r11,r12
80009b7c:	5f 3b       	srlo	r11
80009b7e:	ea 0b 17 00 	moveq	r11,r5
80009b82:	ee 0c 16 05 	lsr	r12,r7,0x5
80009b86:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
80009b8a:	bb 07       	ld.d	r6,sp++
80009b8c:	1b 05       	ld.w	r5,sp++
80009b8e:	ed b8 00 1f 	bld	r8,0x1f
80009b92:	ef bc 00 1f 	bst	r12,0x1f
80009b96:	16 0c       	add	r12,r11
80009b98:	5e fc       	retal	r12

80009b9a <__divsf_return_op1>:
80009b9a:	a1 78       	lsl	r8,0x1
80009b9c:	5d 0c       	ror	r12
80009b9e:	5e fc       	retal	r12
80009ba0:	5e 1e       	retne	-1
80009ba2:	fc 19 ff 00 	movh	r9,0xff00
80009ba6:	12 3b       	cp.w	r11,r9
80009ba8:	cf 93       	brcs	80009b9a <__divsf_return_op1>
80009baa:	5e fe       	retal	-1
80009bac:	5e 0d       	reteq	0
80009bae:	5e fe       	retal	-1
80009bb0:	18 7c       	tst	r12,r12
80009bb2:	5e 0e       	reteq	-1
80009bb4:	f8 09 16 18 	lsr	r9,r12,0x18
80009bb8:	c0 70       	breq	80009bc6 <__divsf_return_op1+0x2c>
80009bba:	e0 49 00 ff 	cp.w	r9,255
80009bbe:	cf 12       	brcc	80009ba0 <__divsf_return_op1+0x6>
80009bc0:	fc 1c ff 00 	movh	r12,0xff00
80009bc4:	ce bb       	rjmp	80009b9a <__divsf_return_op1>
80009bc6:	a7 7c       	lsl	r12,0x7
80009bc8:	f8 09 12 00 	clz	r9,r12
80009bcc:	f8 09 09 4c 	lsl	r12,r12,r9
80009bd0:	f2 09 11 01 	rsub	r9,r9,1
80009bd4:	c8 1b       	rjmp	80009ad6 <__avr32_f32_div+0x22>
80009bd6:	a7 7b       	lsl	r11,0x7
80009bd8:	f6 0a 12 00 	clz	r10,r11
80009bdc:	f6 0a 09 4b 	lsl	r11,r11,r10
80009be0:	f4 0a 11 01 	rsub	r10,r10,1
80009be4:	c8 5b       	rjmp	80009aee <__avr32_f32_div+0x3a>

80009be6 <__avr32_f32_div_res_subnormal>:
80009be6:	5c 39       	neg	r9
80009be8:	2f f9       	sub	r9,-1
80009bea:	f1 b9 04 a0 	satu	r9,0x5
80009bee:	f2 0a 11 20 	rsub	r10,r9,32
80009bf2:	ee 09 0a 47 	lsr	r7,r7,r9
80009bf6:	f8 0a 09 46 	lsl	r6,r12,r10
80009bfa:	f8 09 0a 4c 	lsr	r12,r12,r9
80009bfe:	e0 17 ff e0 	andl	r7,0xffe0
80009c02:	e8 17 00 10 	orl	r7,0x10
80009c06:	ea 07 06 4a 	mulu.d	r10,r5,r7
80009c0a:	30 09       	mov	r9,0
80009c0c:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80009c10:	0c 3a       	cp.w	r10,r6
80009c12:	cb 3b       	rjmp	80009b78 <__avr32_f32_div_round_subnormal>

80009c14 <__avr32_f64_to_f32>:
80009c14:	f6 09 15 01 	lsl	r9,r11,0x1
80009c18:	b5 99       	lsr	r9,0x15
80009c1a:	5e 0d       	reteq	0
80009c1c:	f6 08 15 0a 	lsl	r8,r11,0xa
80009c20:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80009c24:	ab 6a       	lsl	r10,0xa
80009c26:	5c 3a       	neg	r10
80009c28:	5c fc       	rol	r12
80009c2a:	e0 49 07 ff 	cp.w	r9,2047
80009c2e:	c1 a0       	breq	80009c62 <__truncdfsf_return_op1+0x6>
80009c30:	e0 29 03 80 	sub	r9,896
80009c34:	bf bc       	sbr	r12,0x1f
80009c36:	58 09       	cp.w	r9,0
80009c38:	e0 8a 00 1a 	brle	80009c6c <__truncdfsf_return_op1+0x10>
80009c3c:	37 fa       	mov	r10,127
80009c3e:	ed bc 00 08 	bld	r12,0x8
80009c42:	f7 ba 00 ff 	subeq	r10,-1
80009c46:	14 0c       	add	r12,r10
80009c48:	f7 b9 03 fe 	sublo	r9,-2
80009c4c:	ed bc 00 1f 	bld	r12,0x1f
80009c50:	f7 b9 01 01 	subne	r9,1
80009c54:	f8 0c 16 07 	lsr	r12,r12,0x7
80009c58:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80009c5c <__truncdfsf_return_op1>:
80009c5c:	a1 7b       	lsl	r11,0x1
80009c5e:	5d 0c       	ror	r12
80009c60:	5e fc       	retal	r12
80009c62:	bf dc       	cbr	r12,0x1f
80009c64:	5e 1e       	retne	-1
80009c66:	fc 1c 7f 80 	movh	r12,0x7f80
80009c6a:	5e fc       	retal	r12
80009c6c:	f2 09 11 01 	rsub	r9,r9,1
80009c70:	59 99       	cp.w	r9,25
80009c72:	f9 bc 02 00 	movhs	r12,0
80009c76:	c1 32       	brcc	80009c9c <__truncdfsf_return_op1+0x40>
80009c78:	f2 0a 11 20 	rsub	r10,r9,32
80009c7c:	f8 0a 09 4a 	lsl	r10,r12,r10
80009c80:	5f 1a       	srne	r10
80009c82:	f8 09 0a 4c 	lsr	r12,r12,r9
80009c86:	14 4c       	or	r12,r10
80009c88:	37 fa       	mov	r10,127
80009c8a:	ed bc 00 08 	bld	r12,0x8
80009c8e:	f7 ba 00 ff 	subeq	r10,-1
80009c92:	14 0c       	add	r12,r10
80009c94:	f8 0c 16 07 	lsr	r12,r12,0x7
80009c98:	a1 7b       	lsl	r11,0x1
80009c9a:	5d 0c       	ror	r12
80009c9c:	5e fc       	retal	r12

80009c9e <__avr32_udiv64>:
80009c9e:	d4 31       	pushm	r0-r7,lr
80009ca0:	1a 97       	mov	r7,sp
80009ca2:	20 3d       	sub	sp,12
80009ca4:	10 9c       	mov	r12,r8
80009ca6:	12 9e       	mov	lr,r9
80009ca8:	14 93       	mov	r3,r10
80009caa:	58 09       	cp.w	r9,0
80009cac:	e0 81 00 bd 	brne	80009e26 <__avr32_udiv64+0x188>
80009cb0:	16 38       	cp.w	r8,r11
80009cb2:	e0 88 00 40 	brls	80009d32 <__avr32_udiv64+0x94>
80009cb6:	f0 08 12 00 	clz	r8,r8
80009cba:	c0 d0       	breq	80009cd4 <__avr32_udiv64+0x36>
80009cbc:	f6 08 09 4b 	lsl	r11,r11,r8
80009cc0:	f0 09 11 20 	rsub	r9,r8,32
80009cc4:	f8 08 09 4c 	lsl	r12,r12,r8
80009cc8:	f4 09 0a 49 	lsr	r9,r10,r9
80009ccc:	f4 08 09 43 	lsl	r3,r10,r8
80009cd0:	f3 eb 10 0b 	or	r11,r9,r11
80009cd4:	f8 0e 16 10 	lsr	lr,r12,0x10
80009cd8:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80009cdc:	f6 0e 0d 00 	divu	r0,r11,lr
80009ce0:	e6 0b 16 10 	lsr	r11,r3,0x10
80009ce4:	00 99       	mov	r9,r0
80009ce6:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009cea:	e0 0a 02 48 	mul	r8,r0,r10
80009cee:	10 3b       	cp.w	r11,r8
80009cf0:	c0 a2       	brcc	80009d04 <__avr32_udiv64+0x66>
80009cf2:	20 19       	sub	r9,1
80009cf4:	18 0b       	add	r11,r12
80009cf6:	18 3b       	cp.w	r11,r12
80009cf8:	c0 63       	brcs	80009d04 <__avr32_udiv64+0x66>
80009cfa:	10 3b       	cp.w	r11,r8
80009cfc:	f7 b9 03 01 	sublo	r9,1
80009d00:	f7 dc e3 0b 	addcs	r11,r11,r12
80009d04:	f6 08 01 01 	sub	r1,r11,r8
80009d08:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80009d0c:	e2 0e 0d 00 	divu	r0,r1,lr
80009d10:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80009d14:	00 98       	mov	r8,r0
80009d16:	e0 0a 02 4a 	mul	r10,r0,r10
80009d1a:	14 33       	cp.w	r3,r10
80009d1c:	c0 82       	brcc	80009d2c <__avr32_udiv64+0x8e>
80009d1e:	20 18       	sub	r8,1
80009d20:	18 03       	add	r3,r12
80009d22:	18 33       	cp.w	r3,r12
80009d24:	c0 43       	brcs	80009d2c <__avr32_udiv64+0x8e>
80009d26:	14 33       	cp.w	r3,r10
80009d28:	f7 b8 03 01 	sublo	r8,1
80009d2c:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80009d30:	cd f8       	rjmp	80009eee <__avr32_udiv64+0x250>
80009d32:	58 08       	cp.w	r8,0
80009d34:	c0 51       	brne	80009d3e <__avr32_udiv64+0xa0>
80009d36:	30 19       	mov	r9,1
80009d38:	f2 08 0d 08 	divu	r8,r9,r8
80009d3c:	10 9c       	mov	r12,r8
80009d3e:	f8 06 12 00 	clz	r6,r12
80009d42:	c0 41       	brne	80009d4a <__avr32_udiv64+0xac>
80009d44:	18 1b       	sub	r11,r12
80009d46:	30 19       	mov	r9,1
80009d48:	c4 08       	rjmp	80009dc8 <__avr32_udiv64+0x12a>
80009d4a:	ec 01 11 20 	rsub	r1,r6,32
80009d4e:	f4 01 0a 49 	lsr	r9,r10,r1
80009d52:	f8 06 09 4c 	lsl	r12,r12,r6
80009d56:	f6 06 09 48 	lsl	r8,r11,r6
80009d5a:	f6 01 0a 41 	lsr	r1,r11,r1
80009d5e:	f3 e8 10 08 	or	r8,r9,r8
80009d62:	f8 03 16 10 	lsr	r3,r12,0x10
80009d66:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009d6a:	e2 03 0d 00 	divu	r0,r1,r3
80009d6e:	f0 0b 16 10 	lsr	r11,r8,0x10
80009d72:	00 9e       	mov	lr,r0
80009d74:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009d78:	e0 05 02 49 	mul	r9,r0,r5
80009d7c:	12 3b       	cp.w	r11,r9
80009d7e:	c0 a2       	brcc	80009d92 <__avr32_udiv64+0xf4>
80009d80:	20 1e       	sub	lr,1
80009d82:	18 0b       	add	r11,r12
80009d84:	18 3b       	cp.w	r11,r12
80009d86:	c0 63       	brcs	80009d92 <__avr32_udiv64+0xf4>
80009d88:	12 3b       	cp.w	r11,r9
80009d8a:	f7 be 03 01 	sublo	lr,1
80009d8e:	f7 dc e3 0b 	addcs	r11,r11,r12
80009d92:	12 1b       	sub	r11,r9
80009d94:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80009d98:	f6 03 0d 02 	divu	r2,r11,r3
80009d9c:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80009da0:	04 99       	mov	r9,r2
80009da2:	e4 05 02 4b 	mul	r11,r2,r5
80009da6:	16 38       	cp.w	r8,r11
80009da8:	c0 a2       	brcc	80009dbc <__avr32_udiv64+0x11e>
80009daa:	20 19       	sub	r9,1
80009dac:	18 08       	add	r8,r12
80009dae:	18 38       	cp.w	r8,r12
80009db0:	c0 63       	brcs	80009dbc <__avr32_udiv64+0x11e>
80009db2:	16 38       	cp.w	r8,r11
80009db4:	f7 b9 03 01 	sublo	r9,1
80009db8:	f1 dc e3 08 	addcs	r8,r8,r12
80009dbc:	f4 06 09 43 	lsl	r3,r10,r6
80009dc0:	f0 0b 01 0b 	sub	r11,r8,r11
80009dc4:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80009dc8:	f8 06 16 10 	lsr	r6,r12,0x10
80009dcc:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80009dd0:	f6 06 0d 00 	divu	r0,r11,r6
80009dd4:	e6 0b 16 10 	lsr	r11,r3,0x10
80009dd8:	00 9a       	mov	r10,r0
80009dda:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009dde:	e0 0e 02 48 	mul	r8,r0,lr
80009de2:	10 3b       	cp.w	r11,r8
80009de4:	c0 a2       	brcc	80009df8 <__avr32_udiv64+0x15a>
80009de6:	20 1a       	sub	r10,1
80009de8:	18 0b       	add	r11,r12
80009dea:	18 3b       	cp.w	r11,r12
80009dec:	c0 63       	brcs	80009df8 <__avr32_udiv64+0x15a>
80009dee:	10 3b       	cp.w	r11,r8
80009df0:	f7 ba 03 01 	sublo	r10,1
80009df4:	f7 dc e3 0b 	addcs	r11,r11,r12
80009df8:	f6 08 01 01 	sub	r1,r11,r8
80009dfc:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80009e00:	e2 06 0d 00 	divu	r0,r1,r6
80009e04:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80009e08:	00 98       	mov	r8,r0
80009e0a:	e0 0e 02 4b 	mul	r11,r0,lr
80009e0e:	16 33       	cp.w	r3,r11
80009e10:	c0 82       	brcc	80009e20 <__avr32_udiv64+0x182>
80009e12:	20 18       	sub	r8,1
80009e14:	18 03       	add	r3,r12
80009e16:	18 33       	cp.w	r3,r12
80009e18:	c0 43       	brcs	80009e20 <__avr32_udiv64+0x182>
80009e1a:	16 33       	cp.w	r3,r11
80009e1c:	f7 b8 03 01 	sublo	r8,1
80009e20:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80009e24:	c6 98       	rjmp	80009ef6 <__avr32_udiv64+0x258>
80009e26:	16 39       	cp.w	r9,r11
80009e28:	e0 8b 00 65 	brhi	80009ef2 <__avr32_udiv64+0x254>
80009e2c:	f2 09 12 00 	clz	r9,r9
80009e30:	c0 b1       	brne	80009e46 <__avr32_udiv64+0x1a8>
80009e32:	10 3a       	cp.w	r10,r8
80009e34:	5f 2a       	srhs	r10
80009e36:	1c 3b       	cp.w	r11,lr
80009e38:	5f b8       	srhi	r8
80009e3a:	10 4a       	or	r10,r8
80009e3c:	f2 0a 18 00 	cp.b	r10,r9
80009e40:	c5 90       	breq	80009ef2 <__avr32_udiv64+0x254>
80009e42:	30 18       	mov	r8,1
80009e44:	c5 98       	rjmp	80009ef6 <__avr32_udiv64+0x258>
80009e46:	f0 09 09 46 	lsl	r6,r8,r9
80009e4a:	f2 03 11 20 	rsub	r3,r9,32
80009e4e:	fc 09 09 4e 	lsl	lr,lr,r9
80009e52:	f0 03 0a 48 	lsr	r8,r8,r3
80009e56:	f6 09 09 4c 	lsl	r12,r11,r9
80009e5a:	f4 03 0a 42 	lsr	r2,r10,r3
80009e5e:	ef 46 ff f4 	st.w	r7[-12],r6
80009e62:	f6 03 0a 43 	lsr	r3,r11,r3
80009e66:	18 42       	or	r2,r12
80009e68:	f1 ee 10 0c 	or	r12,r8,lr
80009e6c:	f8 01 16 10 	lsr	r1,r12,0x10
80009e70:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009e74:	e6 01 0d 04 	divu	r4,r3,r1
80009e78:	e4 03 16 10 	lsr	r3,r2,0x10
80009e7c:	08 9e       	mov	lr,r4
80009e7e:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80009e82:	e8 06 02 48 	mul	r8,r4,r6
80009e86:	10 33       	cp.w	r3,r8
80009e88:	c0 a2       	brcc	80009e9c <__avr32_udiv64+0x1fe>
80009e8a:	20 1e       	sub	lr,1
80009e8c:	18 03       	add	r3,r12
80009e8e:	18 33       	cp.w	r3,r12
80009e90:	c0 63       	brcs	80009e9c <__avr32_udiv64+0x1fe>
80009e92:	10 33       	cp.w	r3,r8
80009e94:	f7 be 03 01 	sublo	lr,1
80009e98:	e7 dc e3 03 	addcs	r3,r3,r12
80009e9c:	10 13       	sub	r3,r8
80009e9e:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80009ea2:	e6 01 0d 00 	divu	r0,r3,r1
80009ea6:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009eaa:	00 98       	mov	r8,r0
80009eac:	e0 06 02 46 	mul	r6,r0,r6
80009eb0:	0c 3b       	cp.w	r11,r6
80009eb2:	c0 a2       	brcc	80009ec6 <__avr32_udiv64+0x228>
80009eb4:	20 18       	sub	r8,1
80009eb6:	18 0b       	add	r11,r12
80009eb8:	18 3b       	cp.w	r11,r12
80009eba:	c0 63       	brcs	80009ec6 <__avr32_udiv64+0x228>
80009ebc:	0c 3b       	cp.w	r11,r6
80009ebe:	f7 dc e3 0b 	addcs	r11,r11,r12
80009ec2:	f7 b8 03 01 	sublo	r8,1
80009ec6:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80009eca:	ee f4 ff f4 	ld.w	r4,r7[-12]
80009ece:	0c 1b       	sub	r11,r6
80009ed0:	f0 04 06 42 	mulu.d	r2,r8,r4
80009ed4:	06 95       	mov	r5,r3
80009ed6:	16 35       	cp.w	r5,r11
80009ed8:	e0 8b 00 0a 	brhi	80009eec <__avr32_udiv64+0x24e>
80009edc:	5f 0b       	sreq	r11
80009ede:	f4 09 09 49 	lsl	r9,r10,r9
80009ee2:	12 32       	cp.w	r2,r9
80009ee4:	5f b9       	srhi	r9
80009ee6:	f7 e9 00 09 	and	r9,r11,r9
80009eea:	c0 60       	breq	80009ef6 <__avr32_udiv64+0x258>
80009eec:	20 18       	sub	r8,1
80009eee:	30 09       	mov	r9,0
80009ef0:	c0 38       	rjmp	80009ef6 <__avr32_udiv64+0x258>
80009ef2:	30 09       	mov	r9,0
80009ef4:	12 98       	mov	r8,r9
80009ef6:	10 9a       	mov	r10,r8
80009ef8:	12 93       	mov	r3,r9
80009efa:	10 92       	mov	r2,r8
80009efc:	12 9b       	mov	r11,r9
80009efe:	2f dd       	sub	sp,-12
80009f00:	d8 32       	popm	r0-r7,pc

80009f02 <memcpy>:
80009f02:	58 8a       	cp.w	r10,8
80009f04:	c2 f5       	brlt	80009f62 <memcpy+0x60>
80009f06:	f9 eb 10 09 	or	r9,r12,r11
80009f0a:	e2 19 00 03 	andl	r9,0x3,COH
80009f0e:	e0 81 00 97 	brne	8000a03c <memcpy+0x13a>
80009f12:	e0 4a 00 20 	cp.w	r10,32
80009f16:	c3 b4       	brge	80009f8c <memcpy+0x8a>
80009f18:	f4 08 14 02 	asr	r8,r10,0x2
80009f1c:	f0 09 11 08 	rsub	r9,r8,8
80009f20:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80009f24:	76 69       	ld.w	r9,r11[0x18]
80009f26:	99 69       	st.w	r12[0x18],r9
80009f28:	76 59       	ld.w	r9,r11[0x14]
80009f2a:	99 59       	st.w	r12[0x14],r9
80009f2c:	76 49       	ld.w	r9,r11[0x10]
80009f2e:	99 49       	st.w	r12[0x10],r9
80009f30:	76 39       	ld.w	r9,r11[0xc]
80009f32:	99 39       	st.w	r12[0xc],r9
80009f34:	76 29       	ld.w	r9,r11[0x8]
80009f36:	99 29       	st.w	r12[0x8],r9
80009f38:	76 19       	ld.w	r9,r11[0x4]
80009f3a:	99 19       	st.w	r12[0x4],r9
80009f3c:	76 09       	ld.w	r9,r11[0x0]
80009f3e:	99 09       	st.w	r12[0x0],r9
80009f40:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80009f44:	f8 08 00 28 	add	r8,r12,r8<<0x2
80009f48:	e0 1a 00 03 	andl	r10,0x3
80009f4c:	f4 0a 11 04 	rsub	r10,r10,4
80009f50:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009f54:	17 a9       	ld.ub	r9,r11[0x2]
80009f56:	b0 a9       	st.b	r8[0x2],r9
80009f58:	17 99       	ld.ub	r9,r11[0x1]
80009f5a:	b0 99       	st.b	r8[0x1],r9
80009f5c:	17 89       	ld.ub	r9,r11[0x0]
80009f5e:	b0 89       	st.b	r8[0x0],r9
80009f60:	5e fc       	retal	r12
80009f62:	f4 0a 11 09 	rsub	r10,r10,9
80009f66:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009f6a:	17 f9       	ld.ub	r9,r11[0x7]
80009f6c:	b8 f9       	st.b	r12[0x7],r9
80009f6e:	17 e9       	ld.ub	r9,r11[0x6]
80009f70:	b8 e9       	st.b	r12[0x6],r9
80009f72:	17 d9       	ld.ub	r9,r11[0x5]
80009f74:	b8 d9       	st.b	r12[0x5],r9
80009f76:	17 c9       	ld.ub	r9,r11[0x4]
80009f78:	b8 c9       	st.b	r12[0x4],r9
80009f7a:	17 b9       	ld.ub	r9,r11[0x3]
80009f7c:	b8 b9       	st.b	r12[0x3],r9
80009f7e:	17 a9       	ld.ub	r9,r11[0x2]
80009f80:	b8 a9       	st.b	r12[0x2],r9
80009f82:	17 99       	ld.ub	r9,r11[0x1]
80009f84:	b8 99       	st.b	r12[0x1],r9
80009f86:	17 89       	ld.ub	r9,r11[0x0]
80009f88:	b8 89       	st.b	r12[0x0],r9
80009f8a:	5e fc       	retal	r12
80009f8c:	eb cd 40 c0 	pushm	r6-r7,lr
80009f90:	18 99       	mov	r9,r12
80009f92:	22 0a       	sub	r10,32
80009f94:	b7 07       	ld.d	r6,r11++
80009f96:	b3 26       	st.d	r9++,r6
80009f98:	b7 07       	ld.d	r6,r11++
80009f9a:	b3 26       	st.d	r9++,r6
80009f9c:	b7 07       	ld.d	r6,r11++
80009f9e:	b3 26       	st.d	r9++,r6
80009fa0:	b7 07       	ld.d	r6,r11++
80009fa2:	b3 26       	st.d	r9++,r6
80009fa4:	22 0a       	sub	r10,32
80009fa6:	cf 74       	brge	80009f94 <memcpy+0x92>
80009fa8:	2f 0a       	sub	r10,-16
80009faa:	c0 65       	brlt	80009fb6 <memcpy+0xb4>
80009fac:	b7 07       	ld.d	r6,r11++
80009fae:	b3 26       	st.d	r9++,r6
80009fb0:	b7 07       	ld.d	r6,r11++
80009fb2:	b3 26       	st.d	r9++,r6
80009fb4:	21 0a       	sub	r10,16
80009fb6:	5c 3a       	neg	r10
80009fb8:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80009fbc:	d7 03       	nop
80009fbe:	d7 03       	nop
80009fc0:	f7 36 00 0e 	ld.ub	r6,r11[14]
80009fc4:	f3 66 00 0e 	st.b	r9[14],r6
80009fc8:	f7 36 00 0d 	ld.ub	r6,r11[13]
80009fcc:	f3 66 00 0d 	st.b	r9[13],r6
80009fd0:	f7 36 00 0c 	ld.ub	r6,r11[12]
80009fd4:	f3 66 00 0c 	st.b	r9[12],r6
80009fd8:	f7 36 00 0b 	ld.ub	r6,r11[11]
80009fdc:	f3 66 00 0b 	st.b	r9[11],r6
80009fe0:	f7 36 00 0a 	ld.ub	r6,r11[10]
80009fe4:	f3 66 00 0a 	st.b	r9[10],r6
80009fe8:	f7 36 00 09 	ld.ub	r6,r11[9]
80009fec:	f3 66 00 09 	st.b	r9[9],r6
80009ff0:	f7 36 00 08 	ld.ub	r6,r11[8]
80009ff4:	f3 66 00 08 	st.b	r9[8],r6
80009ff8:	f7 36 00 07 	ld.ub	r6,r11[7]
80009ffc:	f3 66 00 07 	st.b	r9[7],r6
8000a000:	f7 36 00 06 	ld.ub	r6,r11[6]
8000a004:	f3 66 00 06 	st.b	r9[6],r6
8000a008:	f7 36 00 05 	ld.ub	r6,r11[5]
8000a00c:	f3 66 00 05 	st.b	r9[5],r6
8000a010:	f7 36 00 04 	ld.ub	r6,r11[4]
8000a014:	f3 66 00 04 	st.b	r9[4],r6
8000a018:	f7 36 00 03 	ld.ub	r6,r11[3]
8000a01c:	f3 66 00 03 	st.b	r9[3],r6
8000a020:	f7 36 00 02 	ld.ub	r6,r11[2]
8000a024:	f3 66 00 02 	st.b	r9[2],r6
8000a028:	f7 36 00 01 	ld.ub	r6,r11[1]
8000a02c:	f3 66 00 01 	st.b	r9[1],r6
8000a030:	f7 36 00 00 	ld.ub	r6,r11[0]
8000a034:	f3 66 00 00 	st.b	r9[0],r6
8000a038:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a03c:	20 1a       	sub	r10,1
8000a03e:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000a042:	f8 0a 0b 09 	st.b	r12[r10],r9
8000a046:	cf b1       	brne	8000a03c <memcpy+0x13a>
8000a048:	5e fc       	retal	r12

8000a04a <memset>:
8000a04a:	18 98       	mov	r8,r12
8000a04c:	c0 38       	rjmp	8000a052 <memset+0x8>
8000a04e:	10 cb       	st.b	r8++,r11
8000a050:	20 1a       	sub	r10,1
8000a052:	58 0a       	cp.w	r10,0
8000a054:	cf d1       	brne	8000a04e <memset+0x4>
8000a056:	5e fc       	retal	r12

8000a058 <strncpy>:
8000a058:	30 08       	mov	r8,0
8000a05a:	10 3a       	cp.w	r10,r8
8000a05c:	5e 0c       	reteq	r12
8000a05e:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000a062:	f8 08 0b 09 	st.b	r12[r8],r9
8000a066:	2f f8       	sub	r8,-1
8000a068:	58 09       	cp.w	r9,0
8000a06a:	cf 81       	brne	8000a05a <strncpy+0x2>
8000a06c:	10 3a       	cp.w	r10,r8
8000a06e:	5e 0c       	reteq	r12
8000a070:	f8 08 0b 09 	st.b	r12[r8],r9
8000a074:	2f f8       	sub	r8,-1
8000a076:	cf bb       	rjmp	8000a06c <strncpy+0x14>

8000a078 <strstr>:
8000a078:	d4 01       	pushm	lr
8000a07a:	30 08       	mov	r8,0
8000a07c:	19 89       	ld.ub	r9,r12[0x0]
8000a07e:	f0 09 18 00 	cp.b	r9,r8
8000a082:	c1 41       	brne	8000a0aa <strstr+0x32>
8000a084:	17 88       	ld.ub	r8,r11[0x0]
8000a086:	f2 08 18 00 	cp.b	r8,r9
8000a08a:	c1 51       	brne	8000a0b4 <strstr+0x3c>
8000a08c:	d8 02       	popm	pc
8000a08e:	30 08       	mov	r8,0
8000a090:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000a094:	58 09       	cp.w	r9,0
8000a096:	c1 00       	breq	8000a0b6 <strstr+0x3e>
8000a098:	f8 08 07 0e 	ld.ub	lr,r12[r8]
8000a09c:	f2 0e 18 00 	cp.b	lr,r9
8000a0a0:	c0 31       	brne	8000a0a6 <strstr+0x2e>
8000a0a2:	2f f8       	sub	r8,-1
8000a0a4:	cf 6b       	rjmp	8000a090 <strstr+0x18>
8000a0a6:	2f fc       	sub	r12,-1
8000a0a8:	c0 28       	rjmp	8000a0ac <strstr+0x34>
8000a0aa:	10 9a       	mov	r10,r8
8000a0ac:	19 88       	ld.ub	r8,r12[0x0]
8000a0ae:	f4 08 18 00 	cp.b	r8,r10
8000a0b2:	ce e1       	brne	8000a08e <strstr+0x16>
8000a0b4:	30 0c       	mov	r12,0
8000a0b6:	d8 02       	popm	pc

Disassembly of section .exception:

8000a200 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000a200:	c0 08       	rjmp	8000a200 <_evba>
	...

8000a204 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000a204:	c0 08       	rjmp	8000a204 <_handle_TLB_Multiple_Hit>
	...

8000a208 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000a208:	c0 08       	rjmp	8000a208 <_handle_Bus_Error_Data_Fetch>
	...

8000a20c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000a20c:	c0 08       	rjmp	8000a20c <_handle_Bus_Error_Instruction_Fetch>
	...

8000a210 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000a210:	c0 08       	rjmp	8000a210 <_handle_NMI>
	...

8000a214 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000a214:	c0 08       	rjmp	8000a214 <_handle_Instruction_Address>
	...

8000a218 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000a218:	c0 08       	rjmp	8000a218 <_handle_ITLB_Protection>
	...

8000a21c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000a21c:	c0 08       	rjmp	8000a21c <_handle_Breakpoint>
	...

8000a220 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000a220:	c0 08       	rjmp	8000a220 <_handle_Illegal_Opcode>
	...

8000a224 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000a224:	c0 08       	rjmp	8000a224 <_handle_Unimplemented_Instruction>
	...

8000a228 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000a228:	c0 08       	rjmp	8000a228 <_handle_Privilege_Violation>
	...

8000a22c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000a22c:	c0 08       	rjmp	8000a22c <_handle_Floating_Point>
	...

8000a230 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000a230:	c0 08       	rjmp	8000a230 <_handle_Coprocessor_Absent>
	...

8000a234 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000a234:	c0 08       	rjmp	8000a234 <_handle_Data_Address_Read>
	...

8000a238 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000a238:	c0 08       	rjmp	8000a238 <_handle_Data_Address_Write>
	...

8000a23c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000a23c:	c0 08       	rjmp	8000a23c <_handle_DTLB_Protection_Read>
	...

8000a240 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000a240:	c0 08       	rjmp	8000a240 <_handle_DTLB_Protection_Write>
	...

8000a244 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000a244:	c0 08       	rjmp	8000a244 <_handle_DTLB_Modified>
	...

8000a250 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000a250:	c0 08       	rjmp	8000a250 <_handle_ITLB_Miss>
	...

8000a260 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000a260:	c0 08       	rjmp	8000a260 <_handle_DTLB_Miss_Read>
	...

8000a270 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000a270:	c0 08       	rjmp	8000a270 <_handle_DTLB_Miss_Write>
	...

8000a300 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000a300:	c0 08       	rjmp	8000a300 <_handle_Supervisor_Call>
	...

8000a304 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a304:	30 0c       	mov	r12,0
8000a306:	f0 1f 00 0e 	mcall	8000a33c <_int3+0xe>
8000a30a:	58 0c       	cp.w	r12,0
8000a30c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a310:	d6 03       	rete

8000a312 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a312:	30 1c       	mov	r12,1
8000a314:	f0 1f 00 0a 	mcall	8000a33c <_int3+0xe>
8000a318:	58 0c       	cp.w	r12,0
8000a31a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a31e:	d6 03       	rete

8000a320 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a320:	30 2c       	mov	r12,2
8000a322:	f0 1f 00 07 	mcall	8000a33c <_int3+0xe>
8000a326:	58 0c       	cp.w	r12,0
8000a328:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a32c:	d6 03       	rete

8000a32e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a32e:	30 3c       	mov	r12,3
8000a330:	f0 1f 00 03 	mcall	8000a33c <_int3+0xe>
8000a334:	58 0c       	cp.w	r12,0
8000a336:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a33a:	d6 03       	rete
8000a33c:	80 00       	ld.sh	r0,r0[0x0]
8000a33e:	4c 28       	lddpc	r8,8000a444 <C.35.14269+0x24>
	...
