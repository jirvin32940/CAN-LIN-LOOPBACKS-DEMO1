
CAN-LIN-LOOPBACKS-DEMO1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002010  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000541c  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80007600  80007600  00007a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000238  80007800  80007800  00007c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000000b5  00000008  80007a38  00008008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000003  000000bd  80007aed  000080bd  2**0
                  ALLOC
  8 .bss          00000b18  000000c0  000000c0  00000000  2**2
                  ALLOC
  9 .heap         0000e428  00000bd8  00000bd8  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  000080bd  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000808  00000000  00000000  000080f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 0000167c  00000000  00000000  000088f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00015260  00000000  00000000  00009f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000190d  00000000  00000000  0001f1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000742c  00000000  00000000  00020ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000017fc  00000000  00000000  00027f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000429a  00000000  00000000  0002970c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00002a22  00000000  00000000  0002d9a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00dad4f2  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 000007c0  00000000  00000000  00ddd8c0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	51 cc       	stdsp	sp[0x70],r12

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	48 1f       	lddpc	pc,8000200c <program_start+0x4>
8000200a:	00 00       	add	r0,r0
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	51 cc       	stdsp	sp[0x70],r12

Disassembly of section .text:

80002010 <io_pin>:

#define SS_ONE_MICROSECOND 8

unsigned char io_pin(unsigned char idx);
unsigned char io_pin(unsigned char idx)
{
80002010:	eb cd 40 80 	pushm	r7,lr
80002014:	1a 97       	mov	r7,sp
80002016:	20 1d       	sub	sp,4
80002018:	18 98       	mov	r8,r12
8000201a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (idx)
8000201e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002022:	58 28       	cp.w	r8,2
80002024:	c1 10       	breq	80002046 <io_pin+0x36>
80002026:	e0 89 00 07 	brgt	80002034 <io_pin+0x24>
8000202a:	58 08       	cp.w	r8,0
8000202c:	c0 90       	breq	8000203e <io_pin+0x2e>
8000202e:	58 18       	cp.w	r8,1
80002030:	c0 90       	breq	80002042 <io_pin+0x32>
80002032:	c1 08       	rjmp	80002052 <io_pin+0x42>
80002034:	58 38       	cp.w	r8,3
80002036:	c0 a0       	breq	8000204a <io_pin+0x3a>
80002038:	58 48       	cp.w	r8,4
8000203a:	c0 a0       	breq	8000204e <io_pin+0x3e>
8000203c:	c0 b8       	rjmp	80002052 <io_pin+0x42>
	{
		case 0:
			return SEALSHIELD_SERIAL_ID0;
8000203e:	33 38       	mov	r8,51
80002040:	c0 a8       	rjmp	80002054 <io_pin+0x44>
			break;
		case 1:
			return SEALSHIELD_SERIAL_ID1;
80002042:	33 48       	mov	r8,52
80002044:	c0 88       	rjmp	80002054 <io_pin+0x44>
			break;
		case 2:
			return SEALSHIELD_SERIAL_ID2;
80002046:	33 58       	mov	r8,53
80002048:	c0 68       	rjmp	80002054 <io_pin+0x44>
			break;
		case 3:
			return SEALSHIELD_SERIAL_ID3;
8000204a:	33 68       	mov	r8,54
8000204c:	c0 48       	rjmp	80002054 <io_pin+0x44>
			break;
		case 4:
			return SEALSHIELD_SERIAL_ID4;
8000204e:	33 78       	mov	r8,55
80002050:	c0 28       	rjmp	80002054 <io_pin+0x44>
			break;
		default: 
			return 0; //TODO: return a better error code here
80002052:	30 08       	mov	r8,0
			break;
	}
}
80002054:	10 9c       	mov	r12,r8
80002056:	2f fd       	sub	sp,-4
80002058:	e3 cd 80 80 	ldm	sp++,r7,pc

8000205c <drive_DQ_low>:

void drive_DQ_low(unsigned char idx);
void drive_DQ_low(unsigned char idx)
{
8000205c:	eb cd 40 80 	pushm	r7,lr
80002060:	1a 97       	mov	r7,sp
80002062:	20 2d       	sub	sp,8
80002064:	18 98       	mov	r8,r12
80002066:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char ioPin;
	
	ioPin = io_pin(idx);
8000206a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000206e:	10 9c       	mov	r12,r8
80002070:	f0 1f 00 07 	mcall	8000208c <drive_DQ_low+0x30>
80002074:	18 98       	mov	r8,r12
80002076:	ef 68 ff ff 	st.b	r7[-1],r8
	
	gpio_set_pin_low(ioPin);
8000207a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000207e:	10 9c       	mov	r12,r8
80002080:	f0 1f 00 04 	mcall	80002090 <drive_DQ_low+0x34>
}
80002084:	2f ed       	sub	sp,-8
80002086:	e3 cd 80 80 	ldm	sp++,r7,pc
8000208a:	00 00       	add	r0,r0
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	20 10       	sub	r0,1
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	42 60       	lddsp	r0,sp[0x98]

80002094 <release_the_bus>:

void release_the_bus(unsigned char idx);
void release_the_bus(unsigned char idx)
{
80002094:	eb cd 40 80 	pushm	r7,lr
80002098:	1a 97       	mov	r7,sp
8000209a:	20 2d       	sub	sp,8
8000209c:	18 98       	mov	r8,r12
8000209e:	ef 68 ff f8 	st.b	r7[-8],r8
	unsigned char ioPin;
	
	ioPin = io_pin(idx);
800020a2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800020a6:	10 9c       	mov	r12,r8
800020a8:	f0 1f 00 07 	mcall	800020c4 <release_the_bus+0x30>
800020ac:	18 98       	mov	r8,r12
800020ae:	ef 68 ff ff 	st.b	r7[-1],r8
	
	gpio_set_pin_high(ioPin);
800020b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800020b6:	10 9c       	mov	r12,r8
800020b8:	f0 1f 00 04 	mcall	800020c8 <release_the_bus+0x34>
	
}
800020bc:	2f ed       	sub	sp,-8
800020be:	e3 cd 80 80 	ldm	sp++,r7,pc
800020c2:	00 00       	add	r0,r0
800020c4:	80 00       	ld.sh	r0,r0[0x0]
800020c6:	20 10       	sub	r0,1
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	42 26       	lddsp	r6,sp[0x88]

800020cc <sample_line>:

unsigned char sample_line(unsigned char idx);
unsigned char sample_line(unsigned char idx)
{
800020cc:	eb cd 40 80 	pushm	r7,lr
800020d0:	1a 97       	mov	r7,sp
800020d2:	20 3d       	sub	sp,12
800020d4:	18 98       	mov	r8,r12
800020d6:	ef 68 ff f4 	st.b	r7[-12],r8
		uint32_t ioFlags;
		unsigned char retVal, ioPin;
		
		ioPin = io_pin(idx);
800020da:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800020de:	10 9c       	mov	r12,r8
800020e0:	f0 1f 00 14 	mcall	80002130 <sample_line+0x64>
800020e4:	18 98       	mov	r8,r12
800020e6:	ef 68 ff ff 	st.b	r7[-1],r8
		
		ioFlags = (GPIO_DIR_INPUT);
800020ea:	30 08       	mov	r8,0
800020ec:	ef 48 ff f8 	st.w	r7[-8],r8
		gpio_configure_pin(ioPin, ioFlags);
800020f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800020f4:	ee fb ff f8 	ld.w	r11,r7[-8]
800020f8:	10 9c       	mov	r12,r8
800020fa:	f0 1f 00 0f 	mcall	80002134 <sample_line+0x68>

		retVal = gpio_get_pin_value(ioPin);
800020fe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002102:	10 9c       	mov	r12,r8
80002104:	f0 1f 00 0d 	mcall	80002138 <sample_line+0x6c>
80002108:	18 98       	mov	r8,r12
8000210a:	ef 68 ff fe 	st.b	r7[-2],r8

		ioFlags = (GPIO_DIR_OUTPUT);
8000210e:	30 18       	mov	r8,1
80002110:	ef 48 ff f8 	st.w	r7[-8],r8
		gpio_configure_pin(ioPin, ioFlags);
80002114:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002118:	ee fb ff f8 	ld.w	r11,r7[-8]
8000211c:	10 9c       	mov	r12,r8
8000211e:	f0 1f 00 06 	mcall	80002134 <sample_line+0x68>

		return retVal;
80002122:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
80002126:	10 9c       	mov	r12,r8
80002128:	2f dd       	sub	sp,-12
8000212a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000212e:	00 00       	add	r0,r0
80002130:	80 00       	ld.sh	r0,r0[0x0]
80002132:	20 10       	sub	r0,1
80002134:	80 00       	ld.sh	r0,r0[0x0]
80002136:	3f 4c       	mov	r12,-12
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	41 ea       	lddsp	r10,sp[0x78]

8000213c <SetSpeed>:

//-----------------------------------------------------------------------------
// Set the 1-Wire timing to 'standard' (standard=1) or 'overdrive' (standard=0).
//
void SetSpeed(int standard)
{
8000213c:	eb cd 40 80 	pushm	r7,lr
80002140:	1a 97       	mov	r7,sp
80002142:	20 1d       	sub	sp,4
80002144:	ef 4c ff fc 	st.w	r7[-4],r12
	// Adjust tick values depending on speed
	if (standard)
80002148:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000214c:	58 08       	cp.w	r8,0
8000214e:	c2 20       	breq	80002192 <SetSpeed+0x56>
	{
		// Standard Speed
		A = 6; //us
80002150:	4a 18       	lddpc	r8,800021d4 <SetSpeed+0x98>
80002152:	30 69       	mov	r9,6
80002154:	91 09       	st.w	r8[0x0],r9
		B = 64;
80002156:	4a 18       	lddpc	r8,800021d8 <SetSpeed+0x9c>
80002158:	34 09       	mov	r9,64
8000215a:	91 09       	st.w	r8[0x0],r9
		C = 60;
8000215c:	4a 08       	lddpc	r8,800021dc <SetSpeed+0xa0>
8000215e:	33 c9       	mov	r9,60
80002160:	91 09       	st.w	r8[0x0],r9
		D = 10;
80002162:	4a 08       	lddpc	r8,800021e0 <SetSpeed+0xa4>
80002164:	30 a9       	mov	r9,10
80002166:	91 09       	st.w	r8[0x0],r9
		E = 9;
80002168:	49 f8       	lddpc	r8,800021e4 <SetSpeed+0xa8>
8000216a:	30 99       	mov	r9,9
8000216c:	91 09       	st.w	r8[0x0],r9
		F = 55;
8000216e:	49 f8       	lddpc	r8,800021e8 <SetSpeed+0xac>
80002170:	33 79       	mov	r9,55
80002172:	91 09       	st.w	r8[0x0],r9
		G = 0;
80002174:	49 e8       	lddpc	r8,800021ec <SetSpeed+0xb0>
80002176:	30 09       	mov	r9,0
80002178:	91 09       	st.w	r8[0x0],r9
		H = 480;
8000217a:	49 e8       	lddpc	r8,800021f0 <SetSpeed+0xb4>
8000217c:	e0 69 01 e0 	mov	r9,480
80002180:	91 09       	st.w	r8[0x0],r9
		I = 70;
80002182:	49 d8       	lddpc	r8,800021f4 <SetSpeed+0xb8>
80002184:	34 69       	mov	r9,70
80002186:	91 09       	st.w	r8[0x0],r9
		J = 410;
80002188:	49 c8       	lddpc	r8,800021f8 <SetSpeed+0xbc>
8000218a:	e0 69 01 9a 	mov	r9,410
8000218e:	91 09       	st.w	r8[0x0],r9
80002190:	c1 f8       	rjmp	800021ce <SetSpeed+0x92>
	}
	else
	{
		// Overdrive Speed
		A = 1.5;
80002192:	49 18       	lddpc	r8,800021d4 <SetSpeed+0x98>
80002194:	30 19       	mov	r9,1
80002196:	91 09       	st.w	r8[0x0],r9
		B = 7.5;
80002198:	49 08       	lddpc	r8,800021d8 <SetSpeed+0x9c>
8000219a:	30 79       	mov	r9,7
8000219c:	91 09       	st.w	r8[0x0],r9
		C = 7.5;
8000219e:	49 08       	lddpc	r8,800021dc <SetSpeed+0xa0>
800021a0:	30 79       	mov	r9,7
800021a2:	91 09       	st.w	r8[0x0],r9
		D = 2.5;
800021a4:	48 f8       	lddpc	r8,800021e0 <SetSpeed+0xa4>
800021a6:	30 29       	mov	r9,2
800021a8:	91 09       	st.w	r8[0x0],r9
		E = 0.75;
800021aa:	48 f8       	lddpc	r8,800021e4 <SetSpeed+0xa8>
800021ac:	30 09       	mov	r9,0
800021ae:	91 09       	st.w	r8[0x0],r9
		F = 7;
800021b0:	48 e8       	lddpc	r8,800021e8 <SetSpeed+0xac>
800021b2:	30 79       	mov	r9,7
800021b4:	91 09       	st.w	r8[0x0],r9
		G = 2.5;
800021b6:	48 e8       	lddpc	r8,800021ec <SetSpeed+0xb0>
800021b8:	30 29       	mov	r9,2
800021ba:	91 09       	st.w	r8[0x0],r9
		H = 70;
800021bc:	48 d8       	lddpc	r8,800021f0 <SetSpeed+0xb4>
800021be:	34 69       	mov	r9,70
800021c0:	91 09       	st.w	r8[0x0],r9
		I = 8.5;
800021c2:	48 d8       	lddpc	r8,800021f4 <SetSpeed+0xb8>
800021c4:	30 89       	mov	r9,8
800021c6:	91 09       	st.w	r8[0x0],r9
		J = 40;
800021c8:	48 c8       	lddpc	r8,800021f8 <SetSpeed+0xbc>
800021ca:	32 89       	mov	r9,40
800021cc:	91 09       	st.w	r8[0x0],r9
	}
}
800021ce:	2f fd       	sub	sp,-4
800021d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800021d4:	00 00       	add	r0,r0
800021d6:	02 bc       	st.h	r1++,r12
800021d8:	00 00       	add	r0,r0
800021da:	02 c0       	st.b	r1++,r0
800021dc:	00 00       	add	r0,r0
800021de:	02 c8       	st.b	r1++,r8
800021e0:	00 00       	add	r0,r0
800021e2:	02 b8       	st.h	r1++,r8
800021e4:	00 00       	add	r0,r0
800021e6:	02 d4       	st.w	--r1,r4
800021e8:	00 00       	add	r0,r0
800021ea:	02 dc       	st.w	--r1,r12
800021ec:	00 00       	add	r0,r0
800021ee:	02 cc       	st.b	r1++,r12
800021f0:	00 00       	add	r0,r0
800021f2:	02 d0       	st.w	--r1,r0
800021f4:	00 00       	add	r0,r0
800021f6:	02 d8       	st.w	--r1,r8
800021f8:	00 00       	add	r0,r0
800021fa:	02 c4       	st.b	r1++,r4

800021fc <OWTouchReset>:
// Generate a 1-Wire reset, return 1 if no presence detect was found,
// return 0 otherwise.
// (NOTE: Does not handle alarm presence from DS2404/DS1994)
//
int OWTouchReset(unsigned char idx)
{
800021fc:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002200:	1a 97       	mov	r7,sp
80002202:	fa cd 00 e0 	sub	sp,sp,224
80002206:	18 98       	mov	r8,r12
80002208:	ef 68 ff 48 	st.b	r7[-184],r8
	int result;

	cpu_delay_us(A, 8000000);
8000220c:	fe f8 05 88 	ld.w	r8,pc[1416]
80002210:	70 08       	ld.w	r8,r8[0x0]
80002212:	ef 48 ff 84 	st.w	r7[-124],r8
80002216:	e0 68 12 00 	mov	r8,4608
8000221a:	ea 18 00 7a 	orh	r8,0x7a
8000221e:	ef 48 ff 80 	st.w	r7[-128],r8
80002222:	ee f8 ff 84 	ld.w	r8,r7[-124]
80002226:	ef 48 ff 8c 	st.w	r7[-116],r8
8000222a:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000222e:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002232:	ee f2 ff 8c 	ld.w	r2,r7[-116]
80002236:	30 03       	mov	r3,0
80002238:	ee fa ff 88 	ld.w	r10,r7[-120]
8000223c:	30 0b       	mov	r11,0
8000223e:	e6 0a 02 49 	mul	r9,r3,r10
80002242:	f6 02 02 48 	mul	r8,r11,r2
80002246:	10 09       	add	r9,r8
80002248:	e4 0a 06 4a 	mulu.d	r10,r2,r10
8000224c:	16 09       	add	r9,r11
8000224e:	12 9b       	mov	r11,r9
80002250:	ee 78 42 3f 	mov	r8,999999
80002254:	30 09       	mov	r9,0
80002256:	10 0a       	add	r10,r8
80002258:	f6 09 00 4b 	adc	r11,r11,r9
8000225c:	ee 78 42 40 	mov	r8,1000000
80002260:	30 09       	mov	r9,0
80002262:	f0 1f 01 4e 	mcall	80002798 <OWTouchReset+0x59c>
80002266:	14 98       	mov	r8,r10
80002268:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
8000226a:	ef 48 ff 94 	st.w	r7[-108],r8
8000226e:	ee c8 00 b4 	sub	r8,r7,180
80002272:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002276:	e1 b8 00 42 	mfsr	r8,0x108
8000227a:	10 99       	mov	r9,r8
8000227c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002280:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002282:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002286:	70 09       	ld.w	r9,r8[0x0]
80002288:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000228c:	10 09       	add	r9,r8
8000228e:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002292:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002294:	ee f9 ff 90 	ld.w	r9,r7[-112]
80002298:	30 08       	mov	r8,0
8000229a:	f3 68 00 08 	st.b	r9[8],r8
8000229e:	ee c8 00 b4 	sub	r8,r7,180
800022a2:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022a6:	e1 b8 00 42 	mfsr	r8,0x108
800022aa:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800022ae:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022b2:	f1 39 00 08 	ld.ub	r9,r8[8]
800022b6:	30 28       	mov	r8,2
800022b8:	f0 09 18 00 	cp.b	r9,r8
800022bc:	c0 31       	brne	800022c2 <OWTouchReset+0xc6>
    return false;
800022be:	30 08       	mov	r8,0
800022c0:	c4 38       	rjmp	80002346 <OWTouchReset+0x14a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800022c2:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022c6:	f1 39 00 08 	ld.ub	r9,r8[8]
800022ca:	30 18       	mov	r8,1
800022cc:	f0 09 18 00 	cp.b	r9,r8
800022d0:	c0 31       	brne	800022d6 <OWTouchReset+0xda>
    return true;
800022d2:	30 18       	mov	r8,1
800022d4:	c3 98       	rjmp	80002346 <OWTouchReset+0x14a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022d6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022da:	70 09       	ld.w	r9,r8[0x0]
800022dc:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022e0:	70 18       	ld.w	r8,r8[0x4]
800022e2:	10 39       	cp.w	r9,r8
800022e4:	e0 88 00 1a 	brls	80002318 <OWTouchReset+0x11c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022e8:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022ec:	70 08       	ld.w	r8,r8[0x0]
800022ee:	ee f9 ff 9c 	ld.w	r9,r7[-100]
800022f2:	10 39       	cp.w	r9,r8
800022f4:	c1 02       	brcc	80002314 <OWTouchReset+0x118>
800022f6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800022fa:	70 18       	ld.w	r8,r8[0x4]
800022fc:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002300:	10 39       	cp.w	r9,r8
80002302:	e0 88 00 09 	brls	80002314 <OWTouchReset+0x118>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002306:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000230a:	30 18       	mov	r8,1
8000230c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002310:	30 18       	mov	r8,1
80002312:	c1 a8       	rjmp	80002346 <OWTouchReset+0x14a>
    }
    return false;
80002314:	30 08       	mov	r8,0
80002316:	c1 88       	rjmp	80002346 <OWTouchReset+0x14a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002318:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000231c:	70 08       	ld.w	r8,r8[0x0]
8000231e:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002322:	10 39       	cp.w	r9,r8
80002324:	c0 93       	brcs	80002336 <OWTouchReset+0x13a>
80002326:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000232a:	70 18       	ld.w	r8,r8[0x4]
8000232c:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002330:	10 39       	cp.w	r9,r8
80002332:	e0 88 00 09 	brls	80002344 <OWTouchReset+0x148>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002336:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000233a:	30 18       	mov	r8,1
8000233c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002340:	30 18       	mov	r8,1
80002342:	c0 28       	rjmp	80002346 <OWTouchReset+0x14a>
    }
    return false;
80002344:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002346:	58 08       	cp.w	r8,0
80002348:	ca b0       	breq	8000229e <OWTouchReset+0xa2>
	drive_DQ_low(idx);
8000234a:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000234e:	10 9c       	mov	r12,r8
80002350:	f0 1f 01 13 	mcall	8000279c <OWTouchReset+0x5a0>
	cpu_delay_us(H, 8000000);
80002354:	fe f8 04 4c 	ld.w	r8,pc[1100]
80002358:	70 08       	ld.w	r8,r8[0x0]
8000235a:	ef 48 ff a4 	st.w	r7[-92],r8
8000235e:	e0 68 12 00 	mov	r8,4608
80002362:	ea 18 00 7a 	orh	r8,0x7a
80002366:	ef 48 ff a0 	st.w	r7[-96],r8
8000236a:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000236e:	ef 48 ff ac 	st.w	r7[-84],r8
80002372:	ee f8 ff a0 	ld.w	r8,r7[-96]
80002376:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000237a:	ee fc ff ac 	ld.w	r12,r7[-84]
8000237e:	ef 4c ff 2c 	st.w	r7[-212],r12
80002382:	30 0b       	mov	r11,0
80002384:	ef 4b ff 28 	st.w	r7[-216],r11
80002388:	ee f9 ff a8 	ld.w	r9,r7[-88]
8000238c:	ef 49 ff 24 	st.w	r7[-220],r9
80002390:	30 08       	mov	r8,0
80002392:	ef 48 ff 20 	st.w	r7[-224],r8
80002396:	ee fa ff 28 	ld.w	r10,r7[-216]
8000239a:	ee fc ff 24 	ld.w	r12,r7[-220]
8000239e:	b9 3a       	mul	r10,r12
800023a0:	ee f8 ff 20 	ld.w	r8,r7[-224]
800023a4:	ee fb ff 2c 	ld.w	r11,r7[-212]
800023a8:	b7 38       	mul	r8,r11
800023aa:	10 0a       	add	r10,r8
800023ac:	ee fc ff 2c 	ld.w	r12,r7[-212]
800023b0:	ee fb ff 24 	ld.w	r11,r7[-220]
800023b4:	f8 0b 06 48 	mulu.d	r8,r12,r11
800023b8:	12 0a       	add	r10,r9
800023ba:	14 99       	mov	r9,r10
800023bc:	ee 7a 42 3f 	mov	r10,999999
800023c0:	30 0b       	mov	r11,0
800023c2:	f0 0a 00 0a 	add	r10,r8,r10
800023c6:	f2 0b 00 4b 	adc	r11,r9,r11
800023ca:	ee 78 42 40 	mov	r8,1000000
800023ce:	30 09       	mov	r9,0
800023d0:	f0 1f 00 f2 	mcall	80002798 <OWTouchReset+0x59c>
800023d4:	14 98       	mov	r8,r10
800023d6:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800023d8:	ef 48 ff b4 	st.w	r7[-76],r8
800023dc:	ee c8 00 a8 	sub	r8,r7,168
800023e0:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800023e4:	e1 b8 00 42 	mfsr	r8,0x108
800023e8:	10 99       	mov	r9,r8
800023ea:	ee f8 ff b0 	ld.w	r8,r7[-80]
800023ee:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800023f0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800023f4:	70 09       	ld.w	r9,r8[0x0]
800023f6:	ee f8 ff b4 	ld.w	r8,r7[-76]
800023fa:	10 09       	add	r9,r8
800023fc:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002400:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002402:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002406:	30 08       	mov	r8,0
80002408:	f3 68 00 08 	st.b	r9[8],r8
8000240c:	ee c8 00 a8 	sub	r8,r7,168
80002410:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002414:	e1 b8 00 42 	mfsr	r8,0x108
80002418:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000241c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002420:	f1 39 00 08 	ld.ub	r9,r8[8]
80002424:	30 28       	mov	r8,2
80002426:	f0 09 18 00 	cp.b	r9,r8
8000242a:	c0 31       	brne	80002430 <OWTouchReset+0x234>
    return false;
8000242c:	30 08       	mov	r8,0
8000242e:	c4 38       	rjmp	800024b4 <OWTouchReset+0x2b8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002430:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002434:	f1 39 00 08 	ld.ub	r9,r8[8]
80002438:	30 18       	mov	r8,1
8000243a:	f0 09 18 00 	cp.b	r9,r8
8000243e:	c0 31       	brne	80002444 <OWTouchReset+0x248>
    return true;
80002440:	30 18       	mov	r8,1
80002442:	c3 98       	rjmp	800024b4 <OWTouchReset+0x2b8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002444:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002448:	70 09       	ld.w	r9,r8[0x0]
8000244a:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000244e:	70 18       	ld.w	r8,r8[0x4]
80002450:	10 39       	cp.w	r9,r8
80002452:	e0 88 00 1a 	brls	80002486 <OWTouchReset+0x28a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002456:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000245a:	70 08       	ld.w	r8,r8[0x0]
8000245c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002460:	10 39       	cp.w	r9,r8
80002462:	c1 02       	brcc	80002482 <OWTouchReset+0x286>
80002464:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002468:	70 18       	ld.w	r8,r8[0x4]
8000246a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000246e:	10 39       	cp.w	r9,r8
80002470:	e0 88 00 09 	brls	80002482 <OWTouchReset+0x286>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002474:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002478:	30 18       	mov	r8,1
8000247a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000247e:	30 18       	mov	r8,1
80002480:	c1 a8       	rjmp	800024b4 <OWTouchReset+0x2b8>
    }
    return false;
80002482:	30 08       	mov	r8,0
80002484:	c1 88       	rjmp	800024b4 <OWTouchReset+0x2b8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002486:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000248a:	70 08       	ld.w	r8,r8[0x0]
8000248c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002490:	10 39       	cp.w	r9,r8
80002492:	c0 93       	brcs	800024a4 <OWTouchReset+0x2a8>
80002494:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002498:	70 18       	ld.w	r8,r8[0x4]
8000249a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000249e:	10 39       	cp.w	r9,r8
800024a0:	e0 88 00 09 	brls	800024b2 <OWTouchReset+0x2b6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024a4:	ee f9 ff b8 	ld.w	r9,r7[-72]
800024a8:	30 18       	mov	r8,1
800024aa:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024ae:	30 18       	mov	r8,1
800024b0:	c0 28       	rjmp	800024b4 <OWTouchReset+0x2b8>
    }
    return false;
800024b2:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800024b4:	58 08       	cp.w	r8,0
800024b6:	ca b0       	breq	8000240c <OWTouchReset+0x210>
	release_the_bus(idx);
800024b8:	ef 38 ff 48 	ld.ub	r8,r7[-184]
800024bc:	10 9c       	mov	r12,r8
800024be:	f0 1f 00 ba 	mcall	800027a4 <OWTouchReset+0x5a8>
	cpu_delay_us(I, 8000000);
800024c2:	fe f8 02 e6 	ld.w	r8,pc[742]
800024c6:	70 08       	ld.w	r8,r8[0x0]
800024c8:	ef 48 ff c4 	st.w	r7[-60],r8
800024cc:	e0 68 12 00 	mov	r8,4608
800024d0:	ea 18 00 7a 	orh	r8,0x7a
800024d4:	ef 48 ff c0 	st.w	r7[-64],r8
800024d8:	ee f8 ff c4 	ld.w	r8,r7[-60]
800024dc:	ef 48 ff cc 	st.w	r7[-52],r8
800024e0:	ee f8 ff c0 	ld.w	r8,r7[-64]
800024e4:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800024e8:	ee f9 ff cc 	ld.w	r9,r7[-52]
800024ec:	ef 49 ff 3c 	st.w	r7[-196],r9
800024f0:	30 08       	mov	r8,0
800024f2:	ef 48 ff 38 	st.w	r7[-200],r8
800024f6:	ee fc ff c8 	ld.w	r12,r7[-56]
800024fa:	ef 4c ff 34 	st.w	r7[-204],r12
800024fe:	30 0b       	mov	r11,0
80002500:	ef 4b ff 30 	st.w	r7[-208],r11
80002504:	ee fa ff 38 	ld.w	r10,r7[-200]
80002508:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000250c:	b3 3a       	mul	r10,r9
8000250e:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002512:	ee fc ff 3c 	ld.w	r12,r7[-196]
80002516:	b9 38       	mul	r8,r12
80002518:	10 0a       	add	r10,r8
8000251a:	ee fb ff 3c 	ld.w	r11,r7[-196]
8000251e:	ee fc ff 34 	ld.w	r12,r7[-204]
80002522:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002526:	12 0a       	add	r10,r9
80002528:	14 99       	mov	r9,r10
8000252a:	ee 7a 42 3f 	mov	r10,999999
8000252e:	30 0b       	mov	r11,0
80002530:	f0 0a 00 0a 	add	r10,r8,r10
80002534:	f2 0b 00 4b 	adc	r11,r9,r11
80002538:	ee 78 42 40 	mov	r8,1000000
8000253c:	30 09       	mov	r9,0
8000253e:	f0 1f 00 97 	mcall	80002798 <OWTouchReset+0x59c>
80002542:	14 98       	mov	r8,r10
80002544:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002546:	ef 48 ff d4 	st.w	r7[-44],r8
8000254a:	ee c8 00 9c 	sub	r8,r7,156
8000254e:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002552:	e1 b8 00 42 	mfsr	r8,0x108
80002556:	10 99       	mov	r9,r8
80002558:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000255c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000255e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002562:	70 09       	ld.w	r9,r8[0x0]
80002564:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002568:	10 09       	add	r9,r8
8000256a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000256e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002570:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002574:	30 08       	mov	r8,0
80002576:	f3 68 00 08 	st.b	r9[8],r8
8000257a:	ee c8 00 9c 	sub	r8,r7,156
8000257e:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002582:	e1 b8 00 42 	mfsr	r8,0x108
80002586:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000258a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000258e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002592:	30 28       	mov	r8,2
80002594:	f0 09 18 00 	cp.b	r9,r8
80002598:	c0 31       	brne	8000259e <OWTouchReset+0x3a2>
    return false;
8000259a:	30 08       	mov	r8,0
8000259c:	c4 38       	rjmp	80002622 <OWTouchReset+0x426>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000259e:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025a2:	f1 39 00 08 	ld.ub	r9,r8[8]
800025a6:	30 18       	mov	r8,1
800025a8:	f0 09 18 00 	cp.b	r9,r8
800025ac:	c0 31       	brne	800025b2 <OWTouchReset+0x3b6>
    return true;
800025ae:	30 18       	mov	r8,1
800025b0:	c3 98       	rjmp	80002622 <OWTouchReset+0x426>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800025b2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025b6:	70 09       	ld.w	r9,r8[0x0]
800025b8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025bc:	70 18       	ld.w	r8,r8[0x4]
800025be:	10 39       	cp.w	r9,r8
800025c0:	e0 88 00 1a 	brls	800025f4 <OWTouchReset+0x3f8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025c4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025c8:	70 08       	ld.w	r8,r8[0x0]
800025ca:	ee f9 ff dc 	ld.w	r9,r7[-36]
800025ce:	10 39       	cp.w	r9,r8
800025d0:	c1 02       	brcc	800025f0 <OWTouchReset+0x3f4>
800025d2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025d6:	70 18       	ld.w	r8,r8[0x4]
800025d8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800025dc:	10 39       	cp.w	r9,r8
800025de:	e0 88 00 09 	brls	800025f0 <OWTouchReset+0x3f4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800025e2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800025e6:	30 18       	mov	r8,1
800025e8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800025ec:	30 18       	mov	r8,1
800025ee:	c1 a8       	rjmp	80002622 <OWTouchReset+0x426>
    }
    return false;
800025f0:	30 08       	mov	r8,0
800025f2:	c1 88       	rjmp	80002622 <OWTouchReset+0x426>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800025f4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800025f8:	70 08       	ld.w	r8,r8[0x0]
800025fa:	ee f9 ff dc 	ld.w	r9,r7[-36]
800025fe:	10 39       	cp.w	r9,r8
80002600:	c0 93       	brcs	80002612 <OWTouchReset+0x416>
80002602:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002606:	70 18       	ld.w	r8,r8[0x4]
80002608:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000260c:	10 39       	cp.w	r9,r8
8000260e:	e0 88 00 09 	brls	80002620 <OWTouchReset+0x424>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002612:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002616:	30 18       	mov	r8,1
80002618:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000261c:	30 18       	mov	r8,1
8000261e:	c0 28       	rjmp	80002622 <OWTouchReset+0x426>
    }
    return false;
80002620:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002622:	58 08       	cp.w	r8,0
80002624:	ca b0       	breq	8000257a <OWTouchReset+0x37e>
	result = sample_line(idx);
80002626:	ef 38 ff 48 	ld.ub	r8,r7[-184]
8000262a:	10 9c       	mov	r12,r8
8000262c:	f0 1f 00 60 	mcall	800027ac <OWTouchReset+0x5b0>
80002630:	18 98       	mov	r8,r12
80002632:	ef 48 ff 7c 	st.w	r7[-132],r8
	cpu_delay_us(J, 8000000); // Complete the reset sequence recovery
80002636:	4d f8       	lddpc	r8,800027b0 <OWTouchReset+0x5b4>
80002638:	70 08       	ld.w	r8,r8[0x0]
8000263a:	ef 48 ff e4 	st.w	r7[-28],r8
8000263e:	e0 68 12 00 	mov	r8,4608
80002642:	ea 18 00 7a 	orh	r8,0x7a
80002646:	ef 48 ff e0 	st.w	r7[-32],r8
8000264a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000264e:	ef 48 ff ec 	st.w	r7[-20],r8
80002652:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002656:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000265a:	ee fb ff ec 	ld.w	r11,r7[-20]
8000265e:	ef 4b ff 44 	st.w	r7[-188],r11
80002662:	30 09       	mov	r9,0
80002664:	ef 49 ff 40 	st.w	r7[-192],r9
80002668:	ee f0 ff e8 	ld.w	r0,r7[-24]
8000266c:	30 01       	mov	r1,0
8000266e:	ee fa ff 40 	ld.w	r10,r7[-192]
80002672:	a1 3a       	mul	r10,r0
80002674:	ee fc ff 44 	ld.w	r12,r7[-188]
80002678:	e2 0c 02 48 	mul	r8,r1,r12
8000267c:	10 0a       	add	r10,r8
8000267e:	ee fb ff 44 	ld.w	r11,r7[-188]
80002682:	f6 00 06 48 	mulu.d	r8,r11,r0
80002686:	12 0a       	add	r10,r9
80002688:	14 99       	mov	r9,r10
8000268a:	ee 7a 42 3f 	mov	r10,999999
8000268e:	30 0b       	mov	r11,0
80002690:	f0 0a 00 0a 	add	r10,r8,r10
80002694:	f2 0b 00 4b 	adc	r11,r9,r11
80002698:	ee 78 42 40 	mov	r8,1000000
8000269c:	30 09       	mov	r9,0
8000269e:	f0 1f 00 3f 	mcall	80002798 <OWTouchReset+0x59c>
800026a2:	14 98       	mov	r8,r10
800026a4:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800026a6:	ef 48 ff f4 	st.w	r7[-12],r8
800026aa:	ee c8 00 90 	sub	r8,r7,144
800026ae:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026b2:	e1 b8 00 42 	mfsr	r8,0x108
800026b6:	10 99       	mov	r9,r8
800026b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800026bc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800026be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800026c2:	70 09       	ld.w	r9,r8[0x0]
800026c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800026c8:	10 09       	add	r9,r8
800026ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800026ce:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800026d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800026d4:	30 08       	mov	r8,0
800026d6:	f3 68 00 08 	st.b	r9[8],r8
800026da:	ee c8 00 90 	sub	r8,r7,144
800026de:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800026e2:	e1 b8 00 42 	mfsr	r8,0x108
800026e6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800026ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026ee:	f1 39 00 08 	ld.ub	r9,r8[8]
800026f2:	30 28       	mov	r8,2
800026f4:	f0 09 18 00 	cp.b	r9,r8
800026f8:	c0 31       	brne	800026fe <OWTouchReset+0x502>
    return false;
800026fa:	30 08       	mov	r8,0
800026fc:	c4 38       	rjmp	80002782 <OWTouchReset+0x586>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800026fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002702:	f1 39 00 08 	ld.ub	r9,r8[8]
80002706:	30 18       	mov	r8,1
80002708:	f0 09 18 00 	cp.b	r9,r8
8000270c:	c0 31       	brne	80002712 <OWTouchReset+0x516>
    return true;
8000270e:	30 18       	mov	r8,1
80002710:	c3 98       	rjmp	80002782 <OWTouchReset+0x586>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002712:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002716:	70 09       	ld.w	r9,r8[0x0]
80002718:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000271c:	70 18       	ld.w	r8,r8[0x4]
8000271e:	10 39       	cp.w	r9,r8
80002720:	e0 88 00 1a 	brls	80002754 <OWTouchReset+0x558>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002724:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002728:	70 08       	ld.w	r8,r8[0x0]
8000272a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000272e:	10 39       	cp.w	r9,r8
80002730:	c1 02       	brcc	80002750 <OWTouchReset+0x554>
80002732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002736:	70 18       	ld.w	r8,r8[0x4]
80002738:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000273c:	10 39       	cp.w	r9,r8
8000273e:	e0 88 00 09 	brls	80002750 <OWTouchReset+0x554>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002742:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002746:	30 18       	mov	r8,1
80002748:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000274c:	30 18       	mov	r8,1
8000274e:	c1 a8       	rjmp	80002782 <OWTouchReset+0x586>
    }
    return false;
80002750:	30 08       	mov	r8,0
80002752:	c1 88       	rjmp	80002782 <OWTouchReset+0x586>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002758:	70 08       	ld.w	r8,r8[0x0]
8000275a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000275e:	10 39       	cp.w	r9,r8
80002760:	c0 93       	brcs	80002772 <OWTouchReset+0x576>
80002762:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002766:	70 18       	ld.w	r8,r8[0x4]
80002768:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000276c:	10 39       	cp.w	r9,r8
8000276e:	e0 88 00 09 	brls	80002780 <OWTouchReset+0x584>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002772:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002776:	30 18       	mov	r8,1
80002778:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000277c:	30 18       	mov	r8,1
8000277e:	c0 28       	rjmp	80002782 <OWTouchReset+0x586>
    }
    return false;
80002780:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002782:	58 08       	cp.w	r8,0
80002784:	ca b0       	breq	800026da <OWTouchReset+0x4de>
	return result; // Return sample presence pulse result
80002786:	ee f8 ff 7c 	ld.w	r8,r7[-132]
}
8000278a:	10 9c       	mov	r12,r8
8000278c:	2c 8d       	sub	sp,-224
8000278e:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002792:	00 00       	add	r0,r0
80002794:	00 00       	add	r0,r0
80002796:	02 bc       	st.h	r1++,r12
80002798:	80 00       	ld.sh	r0,r0[0x0]
8000279a:	71 c8       	ld.w	r8,r8[0x70]
8000279c:	80 00       	ld.sh	r0,r0[0x0]
8000279e:	20 5c       	sub	r12,5
800027a0:	00 00       	add	r0,r0
800027a2:	02 d0       	st.w	--r1,r0
800027a4:	80 00       	ld.sh	r0,r0[0x0]
800027a6:	20 94       	sub	r4,9
800027a8:	00 00       	add	r0,r0
800027aa:	02 d8       	st.w	--r1,r8
800027ac:	80 00       	ld.sh	r0,r0[0x0]
800027ae:	20 cc       	sub	r12,12
800027b0:	00 00       	add	r0,r0
800027b2:	02 c4       	st.b	r1++,r4

800027b4 <OWWriteBit>:
//-----------------------------------------------------------------------------
// Send a 1-Wire write bit. Provide 10us recovery time.
//
void OWWriteBit(unsigned char idx, int bit);
void OWWriteBit(unsigned char idx, int bit)
{
800027b4:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800027b8:	1a 97       	mov	r7,sp
800027ba:	fa cd 00 e8 	sub	sp,sp,232
800027be:	18 98       	mov	r8,r12
800027c0:	ef 4b ff 48 	st.w	r7[-184],r11
800027c4:	ef 68 ff 4c 	st.b	r7[-180],r8
	if (bit)
800027c8:	ee f8 ff 48 	ld.w	r8,r7[-184]
800027cc:	58 08       	cp.w	r8,0
800027ce:	e0 80 01 71 	breq	80002ab0 <OWWriteBit+0x2fc>
	{
		// Write '1' bit
		drive_DQ_low(idx);
800027d2:	ef 38 ff 4c 	ld.ub	r8,r7[-180]
800027d6:	10 9c       	mov	r12,r8
800027d8:	f0 1f 01 65 	mcall	80002d6c <OWWriteBit+0x5b8>
		cpu_delay_us(A, 8000000);
800027dc:	fe f8 05 94 	ld.w	r8,pc[1428]
800027e0:	70 08       	ld.w	r8,r8[0x0]
800027e2:	ef 48 ff 84 	st.w	r7[-124],r8
800027e6:	e0 68 12 00 	mov	r8,4608
800027ea:	ea 18 00 7a 	orh	r8,0x7a
800027ee:	ef 48 ff 80 	st.w	r7[-128],r8
800027f2:	ee f8 ff 84 	ld.w	r8,r7[-124]
800027f6:	ef 48 ff 8c 	st.w	r7[-116],r8
800027fa:	ee f8 ff 80 	ld.w	r8,r7[-128]
800027fe:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002802:	ee fc ff 8c 	ld.w	r12,r7[-116]
80002806:	ef 4c ff 24 	st.w	r7[-220],r12
8000280a:	30 0b       	mov	r11,0
8000280c:	ef 4b ff 20 	st.w	r7[-224],r11
80002810:	ee f9 ff 88 	ld.w	r9,r7[-120]
80002814:	ef 49 ff 1c 	st.w	r7[-228],r9
80002818:	30 08       	mov	r8,0
8000281a:	ef 48 ff 18 	st.w	r7[-232],r8
8000281e:	ee fa ff 20 	ld.w	r10,r7[-224]
80002822:	ee fc ff 1c 	ld.w	r12,r7[-228]
80002826:	b9 3a       	mul	r10,r12
80002828:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000282c:	ee fb ff 24 	ld.w	r11,r7[-220]
80002830:	b7 38       	mul	r8,r11
80002832:	10 0a       	add	r10,r8
80002834:	ee fc ff 24 	ld.w	r12,r7[-220]
80002838:	ee fb ff 1c 	ld.w	r11,r7[-228]
8000283c:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002840:	12 0a       	add	r10,r9
80002842:	14 99       	mov	r9,r10
80002844:	ee 7a 42 3f 	mov	r10,999999
80002848:	30 0b       	mov	r11,0
8000284a:	f0 0a 00 0a 	add	r10,r8,r10
8000284e:	f2 0b 00 4b 	adc	r11,r9,r11
80002852:	ee 78 42 40 	mov	r8,1000000
80002856:	30 09       	mov	r9,0
80002858:	f0 1f 01 47 	mcall	80002d74 <OWWriteBit+0x5c0>
8000285c:	14 98       	mov	r8,r10
8000285e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002860:	ef 48 ff 94 	st.w	r7[-108],r8
80002864:	ee c8 00 b0 	sub	r8,r7,176
80002868:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000286c:	e1 b8 00 42 	mfsr	r8,0x108
80002870:	10 99       	mov	r9,r8
80002872:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002876:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002878:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000287c:	70 09       	ld.w	r9,r8[0x0]
8000287e:	ee f8 ff 94 	ld.w	r8,r7[-108]
80002882:	10 09       	add	r9,r8
80002884:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002888:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000288a:	ee f9 ff 90 	ld.w	r9,r7[-112]
8000288e:	30 08       	mov	r8,0
80002890:	f3 68 00 08 	st.b	r9[8],r8
80002894:	ee c8 00 b0 	sub	r8,r7,176
80002898:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000289c:	e1 b8 00 42 	mfsr	r8,0x108
800028a0:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800028a4:	ee f8 ff 98 	ld.w	r8,r7[-104]
800028a8:	f1 39 00 08 	ld.ub	r9,r8[8]
800028ac:	30 28       	mov	r8,2
800028ae:	f0 09 18 00 	cp.b	r9,r8
800028b2:	c0 31       	brne	800028b8 <OWWriteBit+0x104>
    return false;
800028b4:	30 08       	mov	r8,0
800028b6:	c4 38       	rjmp	8000293c <OWWriteBit+0x188>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800028b8:	ee f8 ff 98 	ld.w	r8,r7[-104]
800028bc:	f1 39 00 08 	ld.ub	r9,r8[8]
800028c0:	30 18       	mov	r8,1
800028c2:	f0 09 18 00 	cp.b	r9,r8
800028c6:	c0 31       	brne	800028cc <OWWriteBit+0x118>
    return true;
800028c8:	30 18       	mov	r8,1
800028ca:	c3 98       	rjmp	8000293c <OWWriteBit+0x188>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800028cc:	ee f8 ff 98 	ld.w	r8,r7[-104]
800028d0:	70 09       	ld.w	r9,r8[0x0]
800028d2:	ee f8 ff 98 	ld.w	r8,r7[-104]
800028d6:	70 18       	ld.w	r8,r8[0x4]
800028d8:	10 39       	cp.w	r9,r8
800028da:	e0 88 00 1a 	brls	8000290e <OWWriteBit+0x15a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800028de:	ee f8 ff 98 	ld.w	r8,r7[-104]
800028e2:	70 08       	ld.w	r8,r8[0x0]
800028e4:	ee f9 ff 9c 	ld.w	r9,r7[-100]
800028e8:	10 39       	cp.w	r9,r8
800028ea:	c1 02       	brcc	8000290a <OWWriteBit+0x156>
800028ec:	ee f8 ff 98 	ld.w	r8,r7[-104]
800028f0:	70 18       	ld.w	r8,r8[0x4]
800028f2:	ee f9 ff 9c 	ld.w	r9,r7[-100]
800028f6:	10 39       	cp.w	r9,r8
800028f8:	e0 88 00 09 	brls	8000290a <OWWriteBit+0x156>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800028fc:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002900:	30 18       	mov	r8,1
80002902:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002906:	30 18       	mov	r8,1
80002908:	c1 a8       	rjmp	8000293c <OWWriteBit+0x188>
    }
    return false;
8000290a:	30 08       	mov	r8,0
8000290c:	c1 88       	rjmp	8000293c <OWWriteBit+0x188>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000290e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002912:	70 08       	ld.w	r8,r8[0x0]
80002914:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002918:	10 39       	cp.w	r9,r8
8000291a:	c0 93       	brcs	8000292c <OWWriteBit+0x178>
8000291c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002920:	70 18       	ld.w	r8,r8[0x4]
80002922:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002926:	10 39       	cp.w	r9,r8
80002928:	e0 88 00 09 	brls	8000293a <OWWriteBit+0x186>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000292c:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002930:	30 18       	mov	r8,1
80002932:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002936:	30 18       	mov	r8,1
80002938:	c0 28       	rjmp	8000293c <OWWriteBit+0x188>
    }
    return false;
8000293a:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000293c:	58 08       	cp.w	r8,0
8000293e:	ca b0       	breq	80002894 <OWWriteBit+0xe0>
		release_the_bus(idx);
80002940:	ef 38 ff 4c 	ld.ub	r8,r7[-180]
80002944:	10 9c       	mov	r12,r8
80002946:	f0 1f 01 0d 	mcall	80002d78 <OWWriteBit+0x5c4>
		cpu_delay_us(B, 8000000); // Complete the time slot and 10us recovery
8000294a:	fe f8 04 32 	ld.w	r8,pc[1074]
8000294e:	70 08       	ld.w	r8,r8[0x0]
80002950:	ef 48 ff a4 	st.w	r7[-92],r8
80002954:	e0 68 12 00 	mov	r8,4608
80002958:	ea 18 00 7a 	orh	r8,0x7a
8000295c:	ef 48 ff a0 	st.w	r7[-96],r8
80002960:	ee f8 ff a4 	ld.w	r8,r7[-92]
80002964:	ef 48 ff ac 	st.w	r7[-84],r8
80002968:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000296c:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002970:	ee f9 ff ac 	ld.w	r9,r7[-84]
80002974:	ef 49 ff 34 	st.w	r7[-204],r9
80002978:	30 08       	mov	r8,0
8000297a:	ef 48 ff 30 	st.w	r7[-208],r8
8000297e:	ee fc ff a8 	ld.w	r12,r7[-88]
80002982:	ef 4c ff 2c 	st.w	r7[-212],r12
80002986:	30 0b       	mov	r11,0
80002988:	ef 4b ff 28 	st.w	r7[-216],r11
8000298c:	ee fa ff 30 	ld.w	r10,r7[-208]
80002990:	ee f9 ff 2c 	ld.w	r9,r7[-212]
80002994:	b3 3a       	mul	r10,r9
80002996:	ee f8 ff 28 	ld.w	r8,r7[-216]
8000299a:	ee fc ff 34 	ld.w	r12,r7[-204]
8000299e:	b9 38       	mul	r8,r12
800029a0:	10 0a       	add	r10,r8
800029a2:	ee fb ff 34 	ld.w	r11,r7[-204]
800029a6:	ee fc ff 2c 	ld.w	r12,r7[-212]
800029aa:	f6 0c 06 48 	mulu.d	r8,r11,r12
800029ae:	12 0a       	add	r10,r9
800029b0:	14 99       	mov	r9,r10
800029b2:	ee 7a 42 3f 	mov	r10,999999
800029b6:	30 0b       	mov	r11,0
800029b8:	f0 0a 00 0a 	add	r10,r8,r10
800029bc:	f2 0b 00 4b 	adc	r11,r9,r11
800029c0:	ee 78 42 40 	mov	r8,1000000
800029c4:	30 09       	mov	r9,0
800029c6:	f0 1f 00 ec 	mcall	80002d74 <OWWriteBit+0x5c0>
800029ca:	14 98       	mov	r8,r10
800029cc:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800029ce:	ef 48 ff b4 	st.w	r7[-76],r8
800029d2:	ee c8 00 a4 	sub	r8,r7,164
800029d6:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800029da:	e1 b8 00 42 	mfsr	r8,0x108
800029de:	10 99       	mov	r9,r8
800029e0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800029e4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800029e6:	ee f8 ff b0 	ld.w	r8,r7[-80]
800029ea:	70 09       	ld.w	r9,r8[0x0]
800029ec:	ee f8 ff b4 	ld.w	r8,r7[-76]
800029f0:	10 09       	add	r9,r8
800029f2:	ee f8 ff b0 	ld.w	r8,r7[-80]
800029f6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800029f8:	ee f9 ff b0 	ld.w	r9,r7[-80]
800029fc:	30 08       	mov	r8,0
800029fe:	f3 68 00 08 	st.b	r9[8],r8
80002a02:	ee c8 00 a4 	sub	r8,r7,164
80002a06:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a0a:	e1 b8 00 42 	mfsr	r8,0x108
80002a0e:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002a12:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a16:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a1a:	30 28       	mov	r8,2
80002a1c:	f0 09 18 00 	cp.b	r9,r8
80002a20:	c0 31       	brne	80002a26 <OWWriteBit+0x272>
    return false;
80002a22:	30 08       	mov	r8,0
80002a24:	c4 38       	rjmp	80002aaa <OWWriteBit+0x2f6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002a26:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a2a:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a2e:	30 18       	mov	r8,1
80002a30:	f0 09 18 00 	cp.b	r9,r8
80002a34:	c0 31       	brne	80002a3a <OWWriteBit+0x286>
    return true;
80002a36:	30 18       	mov	r8,1
80002a38:	c3 98       	rjmp	80002aaa <OWWriteBit+0x2f6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002a3a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a3e:	70 09       	ld.w	r9,r8[0x0]
80002a40:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a44:	70 18       	ld.w	r8,r8[0x4]
80002a46:	10 39       	cp.w	r9,r8
80002a48:	e0 88 00 1a 	brls	80002a7c <OWWriteBit+0x2c8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002a4c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a50:	70 08       	ld.w	r8,r8[0x0]
80002a52:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002a56:	10 39       	cp.w	r9,r8
80002a58:	c1 02       	brcc	80002a78 <OWWriteBit+0x2c4>
80002a5a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a5e:	70 18       	ld.w	r8,r8[0x4]
80002a60:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002a64:	10 39       	cp.w	r9,r8
80002a66:	e0 88 00 09 	brls	80002a78 <OWWriteBit+0x2c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002a6a:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002a6e:	30 18       	mov	r8,1
80002a70:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002a74:	30 18       	mov	r8,1
80002a76:	c1 a8       	rjmp	80002aaa <OWWriteBit+0x2f6>
    }
    return false;
80002a78:	30 08       	mov	r8,0
80002a7a:	c1 88       	rjmp	80002aaa <OWWriteBit+0x2f6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002a7c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a80:	70 08       	ld.w	r8,r8[0x0]
80002a82:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002a86:	10 39       	cp.w	r9,r8
80002a88:	c0 93       	brcs	80002a9a <OWWriteBit+0x2e6>
80002a8a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a8e:	70 18       	ld.w	r8,r8[0x4]
80002a90:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002a94:	10 39       	cp.w	r9,r8
80002a96:	e0 88 00 09 	brls	80002aa8 <OWWriteBit+0x2f4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002a9a:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002a9e:	30 18       	mov	r8,1
80002aa0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002aa4:	30 18       	mov	r8,1
80002aa6:	c0 28       	rjmp	80002aaa <OWWriteBit+0x2f6>
    }
    return false;
80002aa8:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002aaa:	58 08       	cp.w	r8,0
80002aac:	ca b0       	breq	80002a02 <OWWriteBit+0x24e>
80002aae:	c5 c9       	rjmp	80002d66 <OWWriteBit+0x5b2>
	}
	else
	{
		// Write '0' bit
		drive_DQ_low(idx);
80002ab0:	ef 38 ff 4c 	ld.ub	r8,r7[-180]
80002ab4:	10 9c       	mov	r12,r8
80002ab6:	f0 1f 00 ae 	mcall	80002d6c <OWWriteBit+0x5b8>
		cpu_delay_us(C, 8000000);
80002aba:	fe f8 02 c6 	ld.w	r8,pc[710]
80002abe:	70 08       	ld.w	r8,r8[0x0]
80002ac0:	ef 48 ff c4 	st.w	r7[-60],r8
80002ac4:	e0 68 12 00 	mov	r8,4608
80002ac8:	ea 18 00 7a 	orh	r8,0x7a
80002acc:	ef 48 ff c0 	st.w	r7[-64],r8
80002ad0:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002ad4:	ef 48 ff cc 	st.w	r7[-52],r8
80002ad8:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002adc:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002ae0:	ee fb ff cc 	ld.w	r11,r7[-52]
80002ae4:	ef 4b ff 44 	st.w	r7[-188],r11
80002ae8:	30 09       	mov	r9,0
80002aea:	ef 49 ff 40 	st.w	r7[-192],r9
80002aee:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002af2:	ef 48 ff 3c 	st.w	r7[-196],r8
80002af6:	30 0c       	mov	r12,0
80002af8:	ef 4c ff 38 	st.w	r7[-200],r12
80002afc:	ee fa ff 40 	ld.w	r10,r7[-192]
80002b00:	ee fb ff 3c 	ld.w	r11,r7[-196]
80002b04:	b7 3a       	mul	r10,r11
80002b06:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002b0a:	ee f9 ff 44 	ld.w	r9,r7[-188]
80002b0e:	b3 38       	mul	r8,r9
80002b10:	10 0a       	add	r10,r8
80002b12:	ee fc ff 44 	ld.w	r12,r7[-188]
80002b16:	ee fb ff 3c 	ld.w	r11,r7[-196]
80002b1a:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002b1e:	12 0a       	add	r10,r9
80002b20:	14 99       	mov	r9,r10
80002b22:	ee 7a 42 3f 	mov	r10,999999
80002b26:	30 0b       	mov	r11,0
80002b28:	f0 0a 00 0a 	add	r10,r8,r10
80002b2c:	f2 0b 00 4b 	adc	r11,r9,r11
80002b30:	ee 78 42 40 	mov	r8,1000000
80002b34:	30 09       	mov	r9,0
80002b36:	f0 1f 00 90 	mcall	80002d74 <OWWriteBit+0x5c0>
80002b3a:	14 98       	mov	r8,r10
80002b3c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002b3e:	ef 48 ff d4 	st.w	r7[-44],r8
80002b42:	ee c8 00 98 	sub	r8,r7,152
80002b46:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002b4a:	e1 b8 00 42 	mfsr	r8,0x108
80002b4e:	10 99       	mov	r9,r8
80002b50:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002b54:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002b56:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002b5a:	70 09       	ld.w	r9,r8[0x0]
80002b5c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002b60:	10 09       	add	r9,r8
80002b62:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002b66:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002b68:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002b6c:	30 08       	mov	r8,0
80002b6e:	f3 68 00 08 	st.b	r9[8],r8
80002b72:	ee c8 00 98 	sub	r8,r7,152
80002b76:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002b7a:	e1 b8 00 42 	mfsr	r8,0x108
80002b7e:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002b82:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002b86:	f1 39 00 08 	ld.ub	r9,r8[8]
80002b8a:	30 28       	mov	r8,2
80002b8c:	f0 09 18 00 	cp.b	r9,r8
80002b90:	c0 31       	brne	80002b96 <OWWriteBit+0x3e2>
    return false;
80002b92:	30 08       	mov	r8,0
80002b94:	c4 38       	rjmp	80002c1a <OWWriteBit+0x466>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002b96:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002b9a:	f1 39 00 08 	ld.ub	r9,r8[8]
80002b9e:	30 18       	mov	r8,1
80002ba0:	f0 09 18 00 	cp.b	r9,r8
80002ba4:	c0 31       	brne	80002baa <OWWriteBit+0x3f6>
    return true;
80002ba6:	30 18       	mov	r8,1
80002ba8:	c3 98       	rjmp	80002c1a <OWWriteBit+0x466>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002baa:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bae:	70 09       	ld.w	r9,r8[0x0]
80002bb0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bb4:	70 18       	ld.w	r8,r8[0x4]
80002bb6:	10 39       	cp.w	r9,r8
80002bb8:	e0 88 00 1a 	brls	80002bec <OWWriteBit+0x438>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002bbc:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bc0:	70 08       	ld.w	r8,r8[0x0]
80002bc2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002bc6:	10 39       	cp.w	r9,r8
80002bc8:	c1 02       	brcc	80002be8 <OWWriteBit+0x434>
80002bca:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bce:	70 18       	ld.w	r8,r8[0x4]
80002bd0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002bd4:	10 39       	cp.w	r9,r8
80002bd6:	e0 88 00 09 	brls	80002be8 <OWWriteBit+0x434>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002bda:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002bde:	30 18       	mov	r8,1
80002be0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002be4:	30 18       	mov	r8,1
80002be6:	c1 a8       	rjmp	80002c1a <OWWriteBit+0x466>
    }
    return false;
80002be8:	30 08       	mov	r8,0
80002bea:	c1 88       	rjmp	80002c1a <OWWriteBit+0x466>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002bec:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bf0:	70 08       	ld.w	r8,r8[0x0]
80002bf2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002bf6:	10 39       	cp.w	r9,r8
80002bf8:	c0 93       	brcs	80002c0a <OWWriteBit+0x456>
80002bfa:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bfe:	70 18       	ld.w	r8,r8[0x4]
80002c00:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c04:	10 39       	cp.w	r9,r8
80002c06:	e0 88 00 09 	brls	80002c18 <OWWriteBit+0x464>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c0a:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c0e:	30 18       	mov	r8,1
80002c10:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002c14:	30 18       	mov	r8,1
80002c16:	c0 28       	rjmp	80002c1a <OWWriteBit+0x466>
    }
    return false;
80002c18:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002c1a:	58 08       	cp.w	r8,0
80002c1c:	ca b0       	breq	80002b72 <OWWriteBit+0x3be>
		release_the_bus(idx);
80002c1e:	ef 38 ff 4c 	ld.ub	r8,r7[-180]
80002c22:	10 9c       	mov	r12,r8
80002c24:	f0 1f 00 55 	mcall	80002d78 <OWWriteBit+0x5c4>
		cpu_delay_us(D, 8000000);
80002c28:	4d 78       	lddpc	r8,80002d84 <OWWriteBit+0x5d0>
80002c2a:	70 08       	ld.w	r8,r8[0x0]
80002c2c:	ef 48 ff e4 	st.w	r7[-28],r8
80002c30:	e0 68 12 00 	mov	r8,4608
80002c34:	ea 18 00 7a 	orh	r8,0x7a
80002c38:	ef 48 ff e0 	st.w	r7[-32],r8
80002c3c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002c40:	ef 48 ff ec 	st.w	r7[-20],r8
80002c44:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002c48:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002c4c:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002c50:	30 01       	mov	r1,0
80002c52:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002c56:	30 03       	mov	r3,0
80002c58:	e2 02 02 4a 	mul	r10,r1,r2
80002c5c:	e6 00 02 48 	mul	r8,r3,r0
80002c60:	10 0a       	add	r10,r8
80002c62:	e0 02 06 48 	mulu.d	r8,r0,r2
80002c66:	12 0a       	add	r10,r9
80002c68:	14 99       	mov	r9,r10
80002c6a:	ee 7a 42 3f 	mov	r10,999999
80002c6e:	30 0b       	mov	r11,0
80002c70:	f0 0a 00 0a 	add	r10,r8,r10
80002c74:	f2 0b 00 4b 	adc	r11,r9,r11
80002c78:	ee 78 42 40 	mov	r8,1000000
80002c7c:	30 09       	mov	r9,0
80002c7e:	f0 1f 00 3e 	mcall	80002d74 <OWWriteBit+0x5c0>
80002c82:	14 98       	mov	r8,r10
80002c84:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002c86:	ef 48 ff f4 	st.w	r7[-12],r8
80002c8a:	ee c8 00 8c 	sub	r8,r7,140
80002c8e:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c92:	e1 b8 00 42 	mfsr	r8,0x108
80002c96:	10 99       	mov	r9,r8
80002c98:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c9c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002c9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ca2:	70 09       	ld.w	r9,r8[0x0]
80002ca4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002ca8:	10 09       	add	r9,r8
80002caa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002cae:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002cb0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002cb4:	30 08       	mov	r8,0
80002cb6:	f3 68 00 08 	st.b	r9[8],r8
80002cba:	ee c8 00 8c 	sub	r8,r7,140
80002cbe:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002cc2:	e1 b8 00 42 	mfsr	r8,0x108
80002cc6:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002cca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cce:	f1 39 00 08 	ld.ub	r9,r8[8]
80002cd2:	30 28       	mov	r8,2
80002cd4:	f0 09 18 00 	cp.b	r9,r8
80002cd8:	c0 31       	brne	80002cde <OWWriteBit+0x52a>
    return false;
80002cda:	30 08       	mov	r8,0
80002cdc:	c4 38       	rjmp	80002d62 <OWWriteBit+0x5ae>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002cde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ce2:	f1 39 00 08 	ld.ub	r9,r8[8]
80002ce6:	30 18       	mov	r8,1
80002ce8:	f0 09 18 00 	cp.b	r9,r8
80002cec:	c0 31       	brne	80002cf2 <OWWriteBit+0x53e>
    return true;
80002cee:	30 18       	mov	r8,1
80002cf0:	c3 98       	rjmp	80002d62 <OWWriteBit+0x5ae>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002cf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cf6:	70 09       	ld.w	r9,r8[0x0]
80002cf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cfc:	70 18       	ld.w	r8,r8[0x4]
80002cfe:	10 39       	cp.w	r9,r8
80002d00:	e0 88 00 1a 	brls	80002d34 <OWWriteBit+0x580>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d08:	70 08       	ld.w	r8,r8[0x0]
80002d0a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d0e:	10 39       	cp.w	r9,r8
80002d10:	c1 02       	brcc	80002d30 <OWWriteBit+0x57c>
80002d12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d16:	70 18       	ld.w	r8,r8[0x4]
80002d18:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d1c:	10 39       	cp.w	r9,r8
80002d1e:	e0 88 00 09 	brls	80002d30 <OWWriteBit+0x57c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002d22:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d26:	30 18       	mov	r8,1
80002d28:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002d2c:	30 18       	mov	r8,1
80002d2e:	c1 a8       	rjmp	80002d62 <OWWriteBit+0x5ae>
    }
    return false;
80002d30:	30 08       	mov	r8,0
80002d32:	c1 88       	rjmp	80002d62 <OWWriteBit+0x5ae>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002d34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d38:	70 08       	ld.w	r8,r8[0x0]
80002d3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d3e:	10 39       	cp.w	r9,r8
80002d40:	c0 93       	brcs	80002d52 <OWWriteBit+0x59e>
80002d42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d46:	70 18       	ld.w	r8,r8[0x4]
80002d48:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d4c:	10 39       	cp.w	r9,r8
80002d4e:	e0 88 00 09 	brls	80002d60 <OWWriteBit+0x5ac>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002d52:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d56:	30 18       	mov	r8,1
80002d58:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002d5c:	30 18       	mov	r8,1
80002d5e:	c0 28       	rjmp	80002d62 <OWWriteBit+0x5ae>
    }
    return false;
80002d60:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002d62:	58 08       	cp.w	r8,0
80002d64:	ca b0       	breq	80002cba <OWWriteBit+0x506>
	}
}
80002d66:	2c 6d       	sub	sp,-232
80002d68:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002d6c:	80 00       	ld.sh	r0,r0[0x0]
80002d6e:	20 5c       	sub	r12,5
80002d70:	00 00       	add	r0,r0
80002d72:	02 bc       	st.h	r1++,r12
80002d74:	80 00       	ld.sh	r0,r0[0x0]
80002d76:	71 c8       	ld.w	r8,r8[0x70]
80002d78:	80 00       	ld.sh	r0,r0[0x0]
80002d7a:	20 94       	sub	r4,9
80002d7c:	00 00       	add	r0,r0
80002d7e:	02 c0       	st.b	r1++,r0
80002d80:	00 00       	add	r0,r0
80002d82:	02 c8       	st.b	r1++,r8
80002d84:	00 00       	add	r0,r0
80002d86:	02 b8       	st.h	r1++,r8

80002d88 <OWReadBit>:
//-----------------------------------------------------------------------------
// Read a bit from the 1-Wire bus and return it. Provide 10us recovery time.
//
int OWReadBit(unsigned char idx);
int OWReadBit(unsigned char idx)
{
80002d88:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002d8c:	1a 97       	mov	r7,sp
80002d8e:	fa cd 00 ac 	sub	sp,sp,172
80002d92:	18 98       	mov	r8,r12
80002d94:	ef 68 ff 74 	st.b	r7[-140],r8
	int result;

	drive_DQ_low(idx);
80002d98:	ef 38 ff 74 	ld.ub	r8,r7[-140]
80002d9c:	10 9c       	mov	r12,r8
80002d9e:	f0 1f 01 0d 	mcall	800031d0 <OWReadBit+0x448>
	cpu_delay_us(A, 8000000);
80002da2:	fe f8 04 32 	ld.w	r8,pc[1074]
80002da6:	70 08       	ld.w	r8,r8[0x0]
80002da8:	ef 48 ff a4 	st.w	r7[-92],r8
80002dac:	e0 68 12 00 	mov	r8,4608
80002db0:	ea 18 00 7a 	orh	r8,0x7a
80002db4:	ef 48 ff a0 	st.w	r7[-96],r8
80002db8:	ee f8 ff a4 	ld.w	r8,r7[-92]
80002dbc:	ef 48 ff ac 	st.w	r7[-84],r8
80002dc0:	ee f8 ff a0 	ld.w	r8,r7[-96]
80002dc4:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002dc8:	ee fc ff ac 	ld.w	r12,r7[-84]
80002dcc:	ef 4c ff 60 	st.w	r7[-160],r12
80002dd0:	30 0b       	mov	r11,0
80002dd2:	ef 4b ff 5c 	st.w	r7[-164],r11
80002dd6:	ee f9 ff a8 	ld.w	r9,r7[-88]
80002dda:	ef 49 ff 58 	st.w	r7[-168],r9
80002dde:	30 08       	mov	r8,0
80002de0:	ef 48 ff 54 	st.w	r7[-172],r8
80002de4:	ee fa ff 5c 	ld.w	r10,r7[-164]
80002de8:	ee fc ff 58 	ld.w	r12,r7[-168]
80002dec:	b9 3a       	mul	r10,r12
80002dee:	ee f8 ff 54 	ld.w	r8,r7[-172]
80002df2:	ee fb ff 60 	ld.w	r11,r7[-160]
80002df6:	b7 38       	mul	r8,r11
80002df8:	10 0a       	add	r10,r8
80002dfa:	ee fc ff 60 	ld.w	r12,r7[-160]
80002dfe:	ee fb ff 58 	ld.w	r11,r7[-168]
80002e02:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002e06:	12 0a       	add	r10,r9
80002e08:	14 99       	mov	r9,r10
80002e0a:	ee 7a 42 3f 	mov	r10,999999
80002e0e:	30 0b       	mov	r11,0
80002e10:	f0 0a 00 0a 	add	r10,r8,r10
80002e14:	f2 0b 00 4b 	adc	r11,r9,r11
80002e18:	ee 78 42 40 	mov	r8,1000000
80002e1c:	30 09       	mov	r9,0
80002e1e:	f0 1f 00 ef 	mcall	800031d8 <OWReadBit+0x450>
80002e22:	14 98       	mov	r8,r10
80002e24:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002e26:	ef 48 ff b4 	st.w	r7[-76],r8
80002e2a:	ee c8 00 88 	sub	r8,r7,136
80002e2e:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002e32:	e1 b8 00 42 	mfsr	r8,0x108
80002e36:	10 99       	mov	r9,r8
80002e38:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002e3c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002e3e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002e42:	70 09       	ld.w	r9,r8[0x0]
80002e44:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002e48:	10 09       	add	r9,r8
80002e4a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002e4e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002e50:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002e54:	30 08       	mov	r8,0
80002e56:	f3 68 00 08 	st.b	r9[8],r8
80002e5a:	ee c8 00 88 	sub	r8,r7,136
80002e5e:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002e62:	e1 b8 00 42 	mfsr	r8,0x108
80002e66:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002e6a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002e6e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002e72:	30 28       	mov	r8,2
80002e74:	f0 09 18 00 	cp.b	r9,r8
80002e78:	c0 31       	brne	80002e7e <OWReadBit+0xf6>
    return false;
80002e7a:	30 08       	mov	r8,0
80002e7c:	c4 38       	rjmp	80002f02 <OWReadBit+0x17a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002e7e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002e82:	f1 39 00 08 	ld.ub	r9,r8[8]
80002e86:	30 18       	mov	r8,1
80002e88:	f0 09 18 00 	cp.b	r9,r8
80002e8c:	c0 31       	brne	80002e92 <OWReadBit+0x10a>
    return true;
80002e8e:	30 18       	mov	r8,1
80002e90:	c3 98       	rjmp	80002f02 <OWReadBit+0x17a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002e92:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002e96:	70 09       	ld.w	r9,r8[0x0]
80002e98:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002e9c:	70 18       	ld.w	r8,r8[0x4]
80002e9e:	10 39       	cp.w	r9,r8
80002ea0:	e0 88 00 1a 	brls	80002ed4 <OWReadBit+0x14c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ea4:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ea8:	70 08       	ld.w	r8,r8[0x0]
80002eaa:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002eae:	10 39       	cp.w	r9,r8
80002eb0:	c1 02       	brcc	80002ed0 <OWReadBit+0x148>
80002eb2:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002eb6:	70 18       	ld.w	r8,r8[0x4]
80002eb8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002ebc:	10 39       	cp.w	r9,r8
80002ebe:	e0 88 00 09 	brls	80002ed0 <OWReadBit+0x148>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002ec2:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002ec6:	30 18       	mov	r8,1
80002ec8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ecc:	30 18       	mov	r8,1
80002ece:	c1 a8       	rjmp	80002f02 <OWReadBit+0x17a>
    }
    return false;
80002ed0:	30 08       	mov	r8,0
80002ed2:	c1 88       	rjmp	80002f02 <OWReadBit+0x17a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002ed4:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ed8:	70 08       	ld.w	r8,r8[0x0]
80002eda:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002ede:	10 39       	cp.w	r9,r8
80002ee0:	c0 93       	brcs	80002ef2 <OWReadBit+0x16a>
80002ee2:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ee6:	70 18       	ld.w	r8,r8[0x4]
80002ee8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002eec:	10 39       	cp.w	r9,r8
80002eee:	e0 88 00 09 	brls	80002f00 <OWReadBit+0x178>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002ef2:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002ef6:	30 18       	mov	r8,1
80002ef8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002efc:	30 18       	mov	r8,1
80002efe:	c0 28       	rjmp	80002f02 <OWReadBit+0x17a>
    }
    return false;
80002f00:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002f02:	58 08       	cp.w	r8,0
80002f04:	ca b0       	breq	80002e5a <OWReadBit+0xd2>
	release_the_bus(idx);
80002f06:	ef 38 ff 74 	ld.ub	r8,r7[-140]
80002f0a:	10 9c       	mov	r12,r8
80002f0c:	f0 1f 00 b4 	mcall	800031dc <OWReadBit+0x454>
	cpu_delay_us(E, 8000000);
80002f10:	fe f8 02 d0 	ld.w	r8,pc[720]
80002f14:	70 08       	ld.w	r8,r8[0x0]
80002f16:	ef 48 ff c4 	st.w	r7[-60],r8
80002f1a:	e0 68 12 00 	mov	r8,4608
80002f1e:	ea 18 00 7a 	orh	r8,0x7a
80002f22:	ef 48 ff c0 	st.w	r7[-64],r8
80002f26:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002f2a:	ef 48 ff cc 	st.w	r7[-52],r8
80002f2e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002f32:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80002f36:	ee f9 ff cc 	ld.w	r9,r7[-52]
80002f3a:	ef 49 ff 70 	st.w	r7[-144],r9
80002f3e:	30 08       	mov	r8,0
80002f40:	ef 48 ff 6c 	st.w	r7[-148],r8
80002f44:	ee fc ff c8 	ld.w	r12,r7[-56]
80002f48:	ef 4c ff 68 	st.w	r7[-152],r12
80002f4c:	30 0b       	mov	r11,0
80002f4e:	ef 4b ff 64 	st.w	r7[-156],r11
80002f52:	ee fa ff 6c 	ld.w	r10,r7[-148]
80002f56:	ee f9 ff 68 	ld.w	r9,r7[-152]
80002f5a:	b3 3a       	mul	r10,r9
80002f5c:	ee f8 ff 64 	ld.w	r8,r7[-156]
80002f60:	ee fc ff 70 	ld.w	r12,r7[-144]
80002f64:	b9 38       	mul	r8,r12
80002f66:	10 0a       	add	r10,r8
80002f68:	ee fb ff 70 	ld.w	r11,r7[-144]
80002f6c:	ee fc ff 68 	ld.w	r12,r7[-152]
80002f70:	f6 0c 06 48 	mulu.d	r8,r11,r12
80002f74:	12 0a       	add	r10,r9
80002f76:	14 99       	mov	r9,r10
80002f78:	ee 7a 42 3f 	mov	r10,999999
80002f7c:	30 0b       	mov	r11,0
80002f7e:	f0 0a 00 0a 	add	r10,r8,r10
80002f82:	f2 0b 00 4b 	adc	r11,r9,r11
80002f86:	ee 78 42 40 	mov	r8,1000000
80002f8a:	30 09       	mov	r9,0
80002f8c:	f0 1f 00 93 	mcall	800031d8 <OWReadBit+0x450>
80002f90:	14 98       	mov	r8,r10
80002f92:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80002f94:	ef 48 ff d4 	st.w	r7[-44],r8
80002f98:	ee c8 00 7c 	sub	r8,r7,124
80002f9c:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002fa0:	e1 b8 00 42 	mfsr	r8,0x108
80002fa4:	10 99       	mov	r9,r8
80002fa6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002faa:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002fac:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002fb0:	70 09       	ld.w	r9,r8[0x0]
80002fb2:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fb6:	10 09       	add	r9,r8
80002fb8:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002fbc:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002fbe:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002fc2:	30 08       	mov	r8,0
80002fc4:	f3 68 00 08 	st.b	r9[8],r8
80002fc8:	ee c8 00 7c 	sub	r8,r7,124
80002fcc:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002fd0:	e1 b8 00 42 	mfsr	r8,0x108
80002fd4:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002fd8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002fdc:	f1 39 00 08 	ld.ub	r9,r8[8]
80002fe0:	30 28       	mov	r8,2
80002fe2:	f0 09 18 00 	cp.b	r9,r8
80002fe6:	c0 31       	brne	80002fec <OWReadBit+0x264>
    return false;
80002fe8:	30 08       	mov	r8,0
80002fea:	c4 38       	rjmp	80003070 <OWReadBit+0x2e8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002fec:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002ff0:	f1 39 00 08 	ld.ub	r9,r8[8]
80002ff4:	30 18       	mov	r8,1
80002ff6:	f0 09 18 00 	cp.b	r9,r8
80002ffa:	c0 31       	brne	80003000 <OWReadBit+0x278>
    return true;
80002ffc:	30 18       	mov	r8,1
80002ffe:	c3 98       	rjmp	80003070 <OWReadBit+0x2e8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003000:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003004:	70 09       	ld.w	r9,r8[0x0]
80003006:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000300a:	70 18       	ld.w	r8,r8[0x4]
8000300c:	10 39       	cp.w	r9,r8
8000300e:	e0 88 00 1a 	brls	80003042 <OWReadBit+0x2ba>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003012:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003016:	70 08       	ld.w	r8,r8[0x0]
80003018:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000301c:	10 39       	cp.w	r9,r8
8000301e:	c1 02       	brcc	8000303e <OWReadBit+0x2b6>
80003020:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003024:	70 18       	ld.w	r8,r8[0x4]
80003026:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000302a:	10 39       	cp.w	r9,r8
8000302c:	e0 88 00 09 	brls	8000303e <OWReadBit+0x2b6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003030:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003034:	30 18       	mov	r8,1
80003036:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000303a:	30 18       	mov	r8,1
8000303c:	c1 a8       	rjmp	80003070 <OWReadBit+0x2e8>
    }
    return false;
8000303e:	30 08       	mov	r8,0
80003040:	c1 88       	rjmp	80003070 <OWReadBit+0x2e8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003042:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003046:	70 08       	ld.w	r8,r8[0x0]
80003048:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000304c:	10 39       	cp.w	r9,r8
8000304e:	c0 93       	brcs	80003060 <OWReadBit+0x2d8>
80003050:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003054:	70 18       	ld.w	r8,r8[0x4]
80003056:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000305a:	10 39       	cp.w	r9,r8
8000305c:	e0 88 00 09 	brls	8000306e <OWReadBit+0x2e6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003060:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003064:	30 18       	mov	r8,1
80003066:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000306a:	30 18       	mov	r8,1
8000306c:	c0 28       	rjmp	80003070 <OWReadBit+0x2e8>
    }
    return false;
8000306e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80003070:	58 08       	cp.w	r8,0
80003072:	ca b0       	breq	80002fc8 <OWReadBit+0x240>
	result = sample_line(idx);
80003074:	ef 38 ff 74 	ld.ub	r8,r7[-140]
80003078:	10 9c       	mov	r12,r8
8000307a:	f0 1f 00 5b 	mcall	800031e4 <OWReadBit+0x45c>
8000307e:	18 98       	mov	r8,r12
80003080:	ef 48 ff 9c 	st.w	r7[-100],r8
	cpu_delay_us(F, 8000000); // Complete the time slot and 10us recovery
80003084:	4d 98       	lddpc	r8,800031e8 <OWReadBit+0x460>
80003086:	70 08       	ld.w	r8,r8[0x0]
80003088:	ef 48 ff e4 	st.w	r7[-28],r8
8000308c:	e0 68 12 00 	mov	r8,4608
80003090:	ea 18 00 7a 	orh	r8,0x7a
80003094:	ef 48 ff e0 	st.w	r7[-32],r8
80003098:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000309c:	ef 48 ff ec 	st.w	r7[-20],r8
800030a0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800030a4:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800030a8:	ee f0 ff ec 	ld.w	r0,r7[-20]
800030ac:	30 01       	mov	r1,0
800030ae:	ee f2 ff e8 	ld.w	r2,r7[-24]
800030b2:	30 03       	mov	r3,0
800030b4:	e2 02 02 4a 	mul	r10,r1,r2
800030b8:	e6 00 02 48 	mul	r8,r3,r0
800030bc:	10 0a       	add	r10,r8
800030be:	e0 02 06 48 	mulu.d	r8,r0,r2
800030c2:	12 0a       	add	r10,r9
800030c4:	14 99       	mov	r9,r10
800030c6:	ee 7a 42 3f 	mov	r10,999999
800030ca:	30 0b       	mov	r11,0
800030cc:	f0 0a 00 0a 	add	r10,r8,r10
800030d0:	f2 0b 00 4b 	adc	r11,r9,r11
800030d4:	ee 78 42 40 	mov	r8,1000000
800030d8:	30 09       	mov	r9,0
800030da:	f0 1f 00 40 	mcall	800031d8 <OWReadBit+0x450>
800030de:	14 98       	mov	r8,r10
800030e0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800030e2:	ef 48 ff f4 	st.w	r7[-12],r8
800030e6:	ee c8 00 70 	sub	r8,r7,112
800030ea:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800030ee:	e1 b8 00 42 	mfsr	r8,0x108
800030f2:	10 99       	mov	r9,r8
800030f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800030f8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800030fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800030fe:	70 09       	ld.w	r9,r8[0x0]
80003100:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003104:	10 09       	add	r9,r8
80003106:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000310a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000310c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003110:	30 08       	mov	r8,0
80003112:	f3 68 00 08 	st.b	r9[8],r8
80003116:	ee c8 00 70 	sub	r8,r7,112
8000311a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000311e:	e1 b8 00 42 	mfsr	r8,0x108
80003122:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003126:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000312a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000312e:	30 28       	mov	r8,2
80003130:	f0 09 18 00 	cp.b	r9,r8
80003134:	c0 31       	brne	8000313a <OWReadBit+0x3b2>
    return false;
80003136:	30 08       	mov	r8,0
80003138:	c4 38       	rjmp	800031be <OWReadBit+0x436>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000313a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000313e:	f1 39 00 08 	ld.ub	r9,r8[8]
80003142:	30 18       	mov	r8,1
80003144:	f0 09 18 00 	cp.b	r9,r8
80003148:	c0 31       	brne	8000314e <OWReadBit+0x3c6>
    return true;
8000314a:	30 18       	mov	r8,1
8000314c:	c3 98       	rjmp	800031be <OWReadBit+0x436>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000314e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003152:	70 09       	ld.w	r9,r8[0x0]
80003154:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003158:	70 18       	ld.w	r8,r8[0x4]
8000315a:	10 39       	cp.w	r9,r8
8000315c:	e0 88 00 1a 	brls	80003190 <OWReadBit+0x408>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003160:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003164:	70 08       	ld.w	r8,r8[0x0]
80003166:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000316a:	10 39       	cp.w	r9,r8
8000316c:	c1 02       	brcc	8000318c <OWReadBit+0x404>
8000316e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003172:	70 18       	ld.w	r8,r8[0x4]
80003174:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003178:	10 39       	cp.w	r9,r8
8000317a:	e0 88 00 09 	brls	8000318c <OWReadBit+0x404>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000317e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003182:	30 18       	mov	r8,1
80003184:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003188:	30 18       	mov	r8,1
8000318a:	c1 a8       	rjmp	800031be <OWReadBit+0x436>
    }
    return false;
8000318c:	30 08       	mov	r8,0
8000318e:	c1 88       	rjmp	800031be <OWReadBit+0x436>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003190:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003194:	70 08       	ld.w	r8,r8[0x0]
80003196:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000319a:	10 39       	cp.w	r9,r8
8000319c:	c0 93       	brcs	800031ae <OWReadBit+0x426>
8000319e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031a2:	70 18       	ld.w	r8,r8[0x4]
800031a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800031a8:	10 39       	cp.w	r9,r8
800031aa:	e0 88 00 09 	brls	800031bc <OWReadBit+0x434>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800031ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800031b2:	30 18       	mov	r8,1
800031b4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800031b8:	30 18       	mov	r8,1
800031ba:	c0 28       	rjmp	800031be <OWReadBit+0x436>
    }
    return false;
800031bc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800031be:	58 08       	cp.w	r8,0
800031c0:	ca b0       	breq	80003116 <OWReadBit+0x38e>

	return result;
800031c2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
}
800031c6:	10 9c       	mov	r12,r8
800031c8:	2d 5d       	sub	sp,-172
800031ca:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800031ce:	00 00       	add	r0,r0
800031d0:	80 00       	ld.sh	r0,r0[0x0]
800031d2:	20 5c       	sub	r12,5
800031d4:	00 00       	add	r0,r0
800031d6:	02 bc       	st.h	r1++,r12
800031d8:	80 00       	ld.sh	r0,r0[0x0]
800031da:	71 c8       	ld.w	r8,r8[0x70]
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	20 94       	sub	r4,9
800031e0:	00 00       	add	r0,r0
800031e2:	02 d4       	st.w	--r1,r4
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	20 cc       	sub	r12,12
800031e8:	00 00       	add	r0,r0
800031ea:	02 dc       	st.w	--r1,r12

800031ec <OWWriteByte>:

//-----------------------------------------------------------------------------
// Write 1-Wire data byte
//
void OWWriteByte(unsigned char idx, int data)
{
800031ec:	eb cd 40 80 	pushm	r7,lr
800031f0:	1a 97       	mov	r7,sp
800031f2:	20 3d       	sub	sp,12
800031f4:	18 98       	mov	r8,r12
800031f6:	ef 4b ff f4 	st.w	r7[-12],r11
800031fa:	ef 68 ff f8 	st.b	r7[-8],r8
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
800031fe:	30 08       	mov	r8,0
80003200:	ef 48 ff fc 	st.w	r7[-4],r8
80003204:	c1 58       	rjmp	8000322e <OWWriteByte+0x42>
	{
		OWWriteBit(idx, data & 0x01);
80003206:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000320a:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
8000320e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003212:	12 9b       	mov	r11,r9
80003214:	10 9c       	mov	r12,r8
80003216:	f0 1f 00 0b 	mcall	80003240 <OWWriteByte+0x54>

		// shift the data byte for the next bit
		data >>= 1;
8000321a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000321e:	a1 58       	asr	r8,0x1
80003220:	ef 48 ff f4 	st.w	r7[-12],r8
void OWWriteByte(unsigned char idx, int data)
{
	int loop;

	// Loop to write each bit in the byte, LS-bit first
	for (loop = 0; loop < 8; loop++)
80003224:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003228:	2f f8       	sub	r8,-1
8000322a:	ef 48 ff fc 	st.w	r7[-4],r8
8000322e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003232:	58 78       	cp.w	r8,7
80003234:	fe 9a ff e9 	brle	80003206 <OWWriteByte+0x1a>
		OWWriteBit(idx, data & 0x01);

		// shift the data byte for the next bit
		data >>= 1;
	}
}
80003238:	2f dd       	sub	sp,-12
8000323a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000323e:	00 00       	add	r0,r0
80003240:	80 00       	ld.sh	r0,r0[0x0]
80003242:	27 b4       	sub	r4,123

80003244 <OWReadByte>:

//-----------------------------------------------------------------------------
// Read 1-Wire data byte and return it
//
int OWReadByte(unsigned char idx)
{
80003244:	eb cd 40 80 	pushm	r7,lr
80003248:	1a 97       	mov	r7,sp
8000324a:	20 3d       	sub	sp,12
8000324c:	18 98       	mov	r8,r12
8000324e:	ef 68 ff f4 	st.b	r7[-12],r8
	int loop, result=0;
80003252:	30 08       	mov	r8,0
80003254:	ef 48 ff fc 	st.w	r7[-4],r8

	for (loop = 0; loop < 8; loop++)
80003258:	30 08       	mov	r8,0
8000325a:	ef 48 ff f8 	st.w	r7[-8],r8
8000325e:	c1 88       	rjmp	8000328e <OWReadByte+0x4a>
	{
		// shift the result to get it ready for the next bit
		result >>= 1;
80003260:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003264:	a1 58       	asr	r8,0x1
80003266:	ef 48 ff fc 	st.w	r7[-4],r8

		// if result is one, then set MS bit
		if (OWReadBit(idx))
8000326a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000326e:	10 9c       	mov	r12,r8
80003270:	f0 1f 00 0d 	mcall	800032a4 <OWReadByte+0x60>
80003274:	18 98       	mov	r8,r12
80003276:	58 08       	cp.w	r8,0
80003278:	c0 60       	breq	80003284 <OWReadByte+0x40>
		result |= 0x80;
8000327a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000327e:	a7 b8       	sbr	r8,0x7
80003280:	ef 48 ff fc 	st.w	r7[-4],r8
//
int OWReadByte(unsigned char idx)
{
	int loop, result=0;

	for (loop = 0; loop < 8; loop++)
80003284:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003288:	2f f8       	sub	r8,-1
8000328a:	ef 48 ff f8 	st.w	r7[-8],r8
8000328e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003292:	58 78       	cp.w	r8,7
80003294:	fe 9a ff e6 	brle	80003260 <OWReadByte+0x1c>

		// if result is one, then set MS bit
		if (OWReadBit(idx))
		result |= 0x80;
	}
	return result;
80003298:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000329c:	10 9c       	mov	r12,r8
8000329e:	2f dd       	sub	sp,-12
800032a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800032a4:	80 00       	ld.sh	r0,r0[0x0]
800032a6:	2d 88       	sub	r8,-40

800032a8 <init_ssdbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_ssdbg_rs232(long pba_hz)
{
800032a8:	eb cd 40 80 	pushm	r7,lr
800032ac:	1a 97       	mov	r7,sp
800032ae:	20 1d       	sub	sp,4
800032b0:	ef 4c ff fc 	st.w	r7[-4],r12
  init_ssdbg_rs232_ex(SSDBG_USART_BAUDRATE, pba_hz);
800032b4:	ee fb ff fc 	ld.w	r11,r7[-4]
800032b8:	e0 7c c2 00 	mov	r12,115200
800032bc:	f0 1f 00 03 	mcall	800032c8 <init_ssdbg_rs232+0x20>
}
800032c0:	2f fd       	sub	sp,-4
800032c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800032c6:	00 00       	add	r0,r0
800032c8:	80 00       	ld.sh	r0,r0[0x0]
800032ca:	32 f0       	mov	r0,47

800032cc <init_display_rs232>:

void init_display_rs232(long pba_hz)
{
800032cc:	eb cd 40 80 	pushm	r7,lr
800032d0:	1a 97       	mov	r7,sp
800032d2:	20 1d       	sub	sp,4
800032d4:	ef 4c ff fc 	st.w	r7[-4],r12
	init_display_rs232_ex(DISPLAY_USART_BAUDRATE, pba_hz);
800032d8:	ee fb ff fc 	ld.w	r11,r7[-4]
800032dc:	e0 6c 12 c0 	mov	r12,4800
800032e0:	f0 1f 00 03 	mcall	800032ec <init_display_rs232+0x20>
}
800032e4:	2f fd       	sub	sp,-4
800032e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800032ea:	00 00       	add	r0,r0
800032ec:	80 00       	ld.sh	r0,r0[0x0]
800032ee:	33 4c       	mov	r12,52

800032f0 <init_ssdbg_rs232_ex>:


void init_ssdbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
800032f0:	eb cd 40 80 	pushm	r7,lr
800032f4:	1a 97       	mov	r7,sp
800032f6:	20 5d       	sub	sp,20
800032f8:	ef 4c ff f0 	st.w	r7[-16],r12
800032fc:	ef 4b ff ec 	st.w	r7[-20],r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80003300:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003304:	ef 48 ff f4 	st.w	r7[-12],r8
80003308:	30 88       	mov	r8,8
8000330a:	ef 68 ff f8 	st.b	r7[-8],r8
8000330e:	30 48       	mov	r8,4
80003310:	ef 68 ff f9 	st.b	r7[-7],r8
80003314:	30 08       	mov	r8,0
80003316:	ef 58 ff fa 	st.h	r7[-6],r8
8000331a:	30 08       	mov	r8,0
8000331c:	ef 68 ff fc 	st.b	r7[-4],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(SSDBG_USART_GPIO_MAP,
80003320:	30 2b       	mov	r11,2
80003322:	48 8c       	lddpc	r12,80003340 <init_ssdbg_rs232_ex+0x50>
80003324:	f0 1f 00 08 	mcall	80003344 <init_ssdbg_rs232_ex+0x54>
                     sizeof(SSDBG_USART_GPIO_MAP) / sizeof(SSDBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(SSDBG_USART, &ssdbg_usart_options, pba_hz);
80003328:	ee c8 00 0c 	sub	r8,r7,12
8000332c:	ee fa ff ec 	ld.w	r10,r7[-20]
80003330:	10 9b       	mov	r11,r8
80003332:	fe 7c 28 00 	mov	r12,-55296
80003336:	f0 1f 00 05 	mcall	80003348 <init_ssdbg_rs232_ex+0x58>
}
8000333a:	2f bd       	sub	sp,-20
8000333c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003340:	80 00       	ld.sh	r0,r0[0x0]
80003342:	78 10       	ld.w	r0,r12[0x4]
80003344:	80 00       	ld.sh	r0,r0[0x0]
80003346:	3c 60       	mov	r0,-58
80003348:	80 00       	ld.sh	r0,r0[0x0]
8000334a:	4f 84       	lddpc	r4,80003528 <adcifa_configure+0xa0>

8000334c <init_display_rs232_ex>:

void init_display_rs232_ex(unsigned long baudrate, long pba_hz)
{
8000334c:	eb cd 40 80 	pushm	r7,lr
80003350:	1a 97       	mov	r7,sp
80003352:	20 5d       	sub	sp,20
80003354:	ef 4c ff f0 	st.w	r7[-16],r12
80003358:	ef 4b ff ec 	st.w	r7[-20],r11
		.baudrate = baudrate,
		.charlength = 8,
		.paritytype = USART_NO_PARITY,
		.stopbits = USART_1_STOPBIT,
		.channelmode = USART_NORMAL_CHMODE
	};
8000335c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003360:	ef 48 ff f4 	st.w	r7[-12],r8
80003364:	30 88       	mov	r8,8
80003366:	ef 68 ff f8 	st.b	r7[-8],r8
8000336a:	30 48       	mov	r8,4
8000336c:	ef 68 ff f9 	st.b	r7[-7],r8
80003370:	30 08       	mov	r8,0
80003372:	ef 58 ff fa 	st.h	r7[-6],r8
80003376:	30 08       	mov	r8,0
80003378:	ef 68 ff fc 	st.b	r7[-4],r8

	// Setup GPIO for debug USART.
	gpio_enable_module(DISPLAY_USART_GPIO_MAP,
8000337c:	30 2b       	mov	r11,2
8000337e:	48 8c       	lddpc	r12,8000339c <init_display_rs232_ex+0x50>
80003380:	f0 1f 00 08 	mcall	800033a0 <init_display_rs232_ex+0x54>
	sizeof(DISPLAY_USART_GPIO_MAP) / sizeof(DISPLAY_USART_GPIO_MAP[0]));

	// Initialize it in RS232 mode.
	usart_init_rs232(DISPLAY_USART, &display_usart_options, pba_hz);
80003384:	ee c8 00 0c 	sub	r8,r7,12
80003388:	ee fa ff ec 	ld.w	r10,r7[-20]
8000338c:	10 9b       	mov	r11,r8
8000338e:	fc 7c 14 00 	mov	r12,-191488
80003392:	f0 1f 00 05 	mcall	800033a4 <init_display_rs232_ex+0x58>
}
80003396:	2f bd       	sub	sp,-20
80003398:	e3 cd 80 80 	ldm	sp++,r7,pc
8000339c:	80 00       	ld.sh	r0,r0[0x0]
8000339e:	78 00       	ld.w	r0,r12[0x0]
800033a0:	80 00       	ld.sh	r0,r0[0x0]
800033a2:	3c 60       	mov	r0,-58
800033a4:	80 00       	ld.sh	r0,r0[0x0]
800033a6:	4f 84       	lddpc	r4,80003584 <adcifa_configure+0xfc>

800033a8 <print_ssdbg>:


void print_ssdbg(const char *str)
{
800033a8:	eb cd 40 80 	pushm	r7,lr
800033ac:	1a 97       	mov	r7,sp
800033ae:	20 1d       	sub	sp,4
800033b0:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print(SSDBG_USART, str);
800033b4:	ee fb ff fc 	ld.w	r11,r7[-4]
800033b8:	fe 7c 28 00 	mov	r12,-55296
800033bc:	f0 1f 00 03 	mcall	800033c8 <print_ssdbg+0x20>
}
800033c0:	2f fd       	sub	sp,-4
800033c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800033c6:	00 00       	add	r0,r0
800033c8:	80 00       	ld.sh	r0,r0[0x0]
800033ca:	33 cc       	mov	r12,60

800033cc <print>:
	print_hex(DISPLAY_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
800033cc:	eb cd 40 80 	pushm	r7,lr
800033d0:	1a 97       	mov	r7,sp
800033d2:	20 2d       	sub	sp,8
800033d4:	ef 4c ff fc 	st.w	r7[-4],r12
800033d8:	ef 4b ff f8 	st.w	r7[-8],r11
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
800033dc:	ee fb ff f8 	ld.w	r11,r7[-8]
800033e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800033e4:	f0 1f 00 03 	mcall	800033f0 <print+0x24>
}
800033e8:	2f ed       	sub	sp,-8
800033ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800033ee:	00 00       	add	r0,r0
800033f0:	80 00       	ld.sh	r0,r0[0x0]
800033f2:	51 8c       	stdsp	sp[0x60],r12

800033f4 <adcifa_get_calibration_data>:
 * \param adcifa       Base address of the ADCIFA
 * \param p_adcifa_opt Structure for the ADCIFA core configuration
 */
void adcifa_get_calibration_data(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt)
{
800033f4:	eb cd 40 80 	pushm	r7,lr
800033f8:	1a 97       	mov	r7,sp
800033fa:	20 6d       	sub	sp,24
800033fc:	ef 4c ff ec 	st.w	r7[-20],r12
80003400:	ef 4b ff e8 	st.w	r7[-24],r11
	/* Get Offset Calibration */
	int32_t adc_ocal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003404:	e0 68 02 04 	mov	r8,516
80003408:	ea 18 80 80 	orh	r8,0x8080
8000340c:	70 08       	ld.w	r8,r8[0x0]
8000340e:	e6 18 3f 00 	andh	r8,0x3f00,COH
			+ AVR32_FLASHC_FROW_OCAL_WORD)) &
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;
80003412:	b9 48       	asr	r8,0x18
80003414:	ef 48 ff f0 	st.w	r7[-16],r8
	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
80003418:	e0 68 02 04 	mov	r8,516
8000341c:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_OCAL_MASK) >>
			AVR32_FLASHC_FROW_OCAL_OFFSET;

	/* Get Gain Calibration */
	int32_t adc_gcal
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003420:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GCAL_WORD)) &
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;
80003422:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80003426:	ef 48 ff f4 	st.w	r7[-12],r8
	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
8000342a:	e0 68 02 08 	mov	r8,520
8000342e:	ea 18 80 80 	orh	r8,0x8080
			AVR32_FLASHC_FROW_GCAL_MASK) >>
			AVR32_FLASHC_FROW_GCAL_OFFSET;

	/*  Get S/H Calibration */
	int32_t adc_gain0
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
80003432:	70 08       	ld.w	r8,r8[0x0]
			+ AVR32_FLASHC_FROW_GAIN0_WORD)) &
			AVR32_FLASHC_FROW_GAIN0_MASK) >>
			AVR32_FLASHC_FROW_GAIN0_OFFSET;
80003434:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80003438:	ef 48 ff f8 	st.w	r7[-8],r8

	int32_t adc_gain1
		= ((*(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS
8000343c:	e0 68 02 08 	mov	r8,520
80003440:	ea 18 80 80 	orh	r8,0x8080
80003444:	70 08       	ld.w	r8,r8[0x0]
80003446:	e6 18 03 ff 	andh	r8,0x3ff,COH
			+ AVR32_FLASHC_FROW_GAIN1_WORD)) &
			AVR32_FLASHC_FROW_GAIN1_MASK) >>
			AVR32_FLASHC_FROW_GAIN1_OFFSET;
8000344a:	b1 48       	asr	r8,0x10
8000344c:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Get ADC Offset Calibration */
	p_adcifa_opt->offset_calibration_value = adc_ocal;
80003450:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003454:	5c 88       	casts.h	r8
80003456:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000345a:	b2 68       	st.h	r9[0xc],r8

	/* Get ADC Gain Calibration */
	p_adcifa_opt->gain_calibration_value = adc_gcal;
8000345c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003460:	5c 88       	casts.h	r8
80003462:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003466:	b2 58       	st.h	r9[0xa],r8

	/* Get Sample & Hold Gain Calibration for Seq 0 */
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
80003468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000346c:	5c 88       	casts.h	r8
8000346e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003472:	b2 78       	st.h	r9[0xe],r8

	/* Get Sample & Hold Gain Calibration for Seq 1 */
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
80003474:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003478:	5c 88       	casts.h	r8
8000347a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000347e:	f3 58 00 10 	st.h	r9[16],r8
}
80003482:	2f ad       	sub	sp,-24
80003484:	e3 cd 80 80 	ldm	sp++,r7,pc

80003488 <adcifa_configure>:
 * \return ADCIFA_CONFIGURATION_REFUSED or ADCIFA_CONFIGURATION_ACCEPTED
 */
uint8_t adcifa_configure(volatile avr32_adcifa_t *adcifa,
		adcifa_opt_t *p_adcifa_opt,
		uint32_t pb_hz)
{
80003488:	eb cd 40 80 	pushm	r7,lr
8000348c:	1a 97       	mov	r7,sp
8000348e:	20 3d       	sub	sp,12
80003490:	ef 4c ff fc 	st.w	r7[-4],r12
80003494:	ef 4b ff f8 	st.w	r7[-8],r11
80003498:	ef 4a ff f4 	st.w	r7[-12],r10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
8000349c:	fc 7a 24 00 	mov	r10,-187392
		= (p_adcifa_opt->sleep_mode_enable <<
800034a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034a4:	f1 38 00 08 	ld.ub	r8,r8[8]
800034a8:	f0 09 15 02 	lsl	r9,r8,0x2
			AVR32_ADCIFA_CFG_SLEEP)
			| (p_adcifa_opt->single_sequencer_mode <<
800034ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034b0:	11 e8       	ld.ub	r8,r8[0x6]
800034b2:	a3 78       	lsl	r8,0x3
			AVR32_ADCIFA_CFG_SSMQ)
			| (p_adcifa_opt->free_running_mode_enable <<
800034b4:	10 49       	or	r9,r8
800034b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034ba:	11 f8       	ld.ub	r8,r8[0x7]
800034bc:	a5 68       	lsl	r8,0x4
			AVR32_ADCIFA_CFG_FRM)
			| (p_adcifa_opt->reference_source <<
800034be:	10 49       	or	r9,r8
800034c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034c4:	11 c8       	ld.ub	r8,r8[0x4]
800034c6:	a5 78       	lsl	r8,0x5
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
800034c8:	10 49       	or	r9,r8
800034ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034ce:	11 d8       	ld.ub	r8,r8[0x5]
800034d0:	a7 78       	lsl	r8,0x7
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
800034d2:	10 49       	or	r9,r8
800034d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034d8:	f1 38 00 09 	ld.ub	r8,r8[9]
800034dc:	ab 68       	lsl	r8,0xa
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
800034de:	f3 e8 10 08 	or	r8,r9,r8
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
800034e2:	10 9b       	mov	r11,r8
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
800034e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034e8:	70 09       	ld.w	r9,r8[0x0]
800034ea:	e0 68 4d d3 	mov	r8,19923
800034ee:	ea 18 10 62 	orh	r8,0x1062
800034f2:	f2 08 06 48 	mulu.d	r8,r9,r8
800034f6:	a7 89       	lsr	r9,0x6
			AVR32_ADCIFA_CFG_RS)
			| (p_adcifa_opt->sample_and_hold_disable <<
			AVR32_ADCIFA_CFG_SHD)
			| (p_adcifa_opt->mux_settle_more_time <<
			AVR32_ADCIFA_CFG_MUXSET)
			| (((ADCIFA_START_UP_TIME *
800034f8:	e0 68 03 e8 	mov	r8,1000
800034fc:	b1 39       	mul	r9,r8
800034fe:	e0 68 4d d3 	mov	r8,19923
80003502:	ea 18 10 62 	orh	r8,0x1062
80003506:	f2 08 06 48 	mulu.d	r8,r9,r8
8000350a:	f2 08 16 0b 	lsr	r8,r9,0xb
8000350e:	b1 68       	lsl	r8,0x10
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
		= (p_adcifa_opt->sleep_mode_enable <<
80003510:	f7 e8 10 08 	or	r8,r11,r8
{
	/* Sanity Check */
	Assert(adcifa != NULL);

	/* Set the ADC configuration */
	AVR32_ADCIFA.cfg
80003514:	95 18       	st.w	r10[0x4],r8
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
			(2 * p_adcifa_opt->frequency)) - 1) <<
80003516:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000351a:	70 08       	ld.w	r8,r8[0x0]
8000351c:	f0 09 15 01 	lsl	r9,r8,0x1
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
		= (((pb_hz /
80003520:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003524:	f0 09 0d 08 	divu	r8,r8,r9
80003528:	20 18       	sub	r8,1
8000352a:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
			| (((ADCIFA_START_UP_TIME *
			(p_adcifa_opt->frequency /
			1000)) / 32000) << AVR32_ADCIFA_CFG_SUT);

	/* Configure Clock  (rounded up) */
	adcifa->ckdiv
8000352e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003532:	f1 49 00 44 	st.w	r8[68],r9
			(2 * p_adcifa_opt->frequency)) - 1) <<
			AVR32_ADCIFA_CKDIV_CNT_OFFSET) &
			AVR32_ADCIFA_CKDIV_CNT_MASK;

	/* Set ADC Offset Calibration */
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
80003536:	fc 78 24 00 	mov	r8,-187392
8000353a:	fc 79 24 00 	mov	r9,-187392
8000353e:	73 a9       	ld.w	r9,r9[0x68]
80003540:	12 9a       	mov	r10,r9
80003542:	e4 1a c0 ff 	andh	r10,0xc0ff
80003546:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000354a:	92 69       	ld.sh	r9,r9[0xc]
8000354c:	b9 69       	lsl	r9,0x18
8000354e:	e6 19 3f 00 	andh	r9,0x3f00,COH
80003552:	f5 e9 10 09 	or	r9,r10,r9
80003556:	f1 49 00 68 	st.w	r8[104],r9

	/* Set ADC Gain Calibration */
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
8000355a:	fc 78 24 00 	mov	r8,-187392
8000355e:	fc 79 24 00 	mov	r9,-187392
80003562:	73 a9       	ld.w	r9,r9[0x68]
80003564:	12 9a       	mov	r10,r9
80003566:	e0 1a 80 00 	andl	r10,0x8000
8000356a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000356e:	92 59       	ld.sh	r9,r9[0xa]
80003570:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
80003574:	f5 e9 10 09 	or	r9,r10,r9
80003578:	f1 49 00 68 	st.w	r8[104],r9

	/* Set Sample & Hold Gain Calibration for seq 0 */
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
8000357c:	fc 78 24 00 	mov	r8,-187392
80003580:	fc 79 24 00 	mov	r9,-187392
80003584:	73 b9       	ld.w	r9,r9[0x6c]
80003586:	12 9a       	mov	r10,r9
80003588:	e0 1a fc 00 	andl	r10,0xfc00
8000358c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003590:	92 79       	ld.sh	r9,r9[0xe]
80003592:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
80003596:	f5 e9 10 09 	or	r9,r10,r9
8000359a:	f1 49 00 6c 	st.w	r8[108],r9

	/* Set Sample & Hold Gain Calibration for seq 1 */
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
8000359e:	fc 78 24 00 	mov	r8,-187392
800035a2:	fc 79 24 00 	mov	r9,-187392
800035a6:	73 b9       	ld.w	r9,r9[0x6c]
800035a8:	12 9a       	mov	r10,r9
800035aa:	e4 1a fc 00 	andh	r10,0xfc00
800035ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800035b2:	f3 09 00 10 	ld.sh	r9,r9[16]
800035b6:	b1 69       	lsl	r9,0x10
800035b8:	e6 19 03 ff 	andh	r9,0x3ff,COH
800035bc:	f5 e9 10 09 	or	r9,r10,r9
800035c0:	f1 49 00 6c 	st.w	r8[108],r9

	/* Enable ADCIFA */
	ADCIFA_enable();
800035c4:	fc 78 24 00 	mov	r8,-187392
800035c8:	fc 79 24 00 	mov	r9,-187392
800035cc:	72 19       	ld.w	r9,r9[0x4]
800035ce:	a1 a9       	sbr	r9,0x0
800035d0:	91 19       	st.w	r8[0x4],r9
800035d2:	c0 28       	rjmp	800035d6 <adcifa_configure+0x14e>
	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
			break;
		}
	}
800035d4:	d7 03       	nop
	/* Enable ADCIFA */
	ADCIFA_enable();

	/* Wait Startup Time */
	while (1) {
		if (ADCIFA_is_startup_time()) {
800035d6:	fc 78 24 00 	mov	r8,-187392
800035da:	70 28       	ld.w	r8,r8[0x8]
800035dc:	e2 18 40 00 	andl	r8,0x4000,COH
800035e0:	cf a0       	breq	800035d4 <adcifa_configure+0x14c>
			break;
		}
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
800035e2:	30 18       	mov	r8,1
}
800035e4:	10 9c       	mov	r12,r8
800035e6:	2f dd       	sub	sp,-12
800035e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800035ec <adcifa_configure_sequencer>:
 */
uint8_t adcifa_configure_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		adcifa_sequencer_conversion_opt_t *p_adcifa_sequencer_conversion_opt)
{
800035ec:	eb cd 40 80 	pushm	r7,lr
800035f0:	1a 97       	mov	r7,sp
800035f2:	21 1d       	sub	sp,68
800035f4:	ef 4c ff c8 	st.w	r7[-56],r12
800035f8:	16 98       	mov	r8,r11
800035fa:	ef 4a ff c0 	st.w	r7[-64],r10
800035fe:	ef 49 ff bc 	st.w	r7[-68],r9
80003602:	ef 68 ff c4 	st.b	r7[-60],r8
	uint8_t g[16] = {0};
80003606:	30 08       	mov	r8,0
80003608:	30 09       	mov	r9,0
8000360a:	ee e9 ff ec 	st.d	r7[-20],r8
8000360e:	30 08       	mov	r8,0
80003610:	30 09       	mov	r9,0
80003612:	ee e9 ff f4 	st.d	r7[-12],r8
	uint8_t mp[16] = {0};
80003616:	30 08       	mov	r8,0
80003618:	30 09       	mov	r9,0
8000361a:	ee e9 ff dc 	st.d	r7[-36],r8
8000361e:	30 08       	mov	r8,0
80003620:	30 09       	mov	r9,0
80003622:	ee e9 ff e4 	st.d	r7[-28],r8
	uint8_t mn[16] = {0};
80003626:	30 08       	mov	r8,0
80003628:	30 09       	mov	r9,0
8000362a:	ee e9 ff cc 	st.d	r7[-52],r8
8000362e:	30 08       	mov	r8,0
80003630:	30 09       	mov	r9,0
80003632:	ee e9 ff d4 	st.d	r7[-44],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch case with sequencer */
	switch (sequencer) {
80003636:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8000363a:	58 08       	cp.w	r8,0
8000363c:	c0 60       	breq	80003648 <adcifa_configure_sequencer+0x5c>
8000363e:	58 18       	cp.w	r8,1
80003640:	e0 80 01 65 	breq	8000390a <adcifa_configure_sequencer+0x31e>
80003644:	e0 8f 02 54 	bral	80003aec <adcifa_configure_sequencer+0x500>
	/* Sequencer 0 */
	case 0:
		/* Configure Sequencer 0 */
		ADCIFA_configure_sequencer_0(
80003648:	fc 78 24 00 	mov	r8,-187392
8000364c:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003650:	13 89       	ld.ub	r9,r9[0x0]
80003652:	20 19       	sub	r9,1
80003654:	f2 0a 15 10 	lsl	r10,r9,0x10
80003658:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000365c:	13 99       	ld.ub	r9,r9[0x1]
8000365e:	ad 69       	lsl	r9,0xc
80003660:	12 4a       	or	r10,r9
80003662:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003666:	13 a9       	ld.ub	r9,r9[0x2]
80003668:	a9 69       	lsl	r9,0x8
8000366a:	12 4a       	or	r10,r9
8000366c:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003670:	13 b9       	ld.ub	r9,r9[0x3]
80003672:	a3 69       	lsl	r9,0x2
80003674:	12 4a       	or	r10,r9
80003676:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000367a:	13 c9       	ld.ub	r9,r9[0x4]
8000367c:	a3 79       	lsl	r9,0x3
8000367e:	12 4a       	or	r10,r9
80003680:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003684:	13 d9       	ld.ub	r9,r9[0x5]
80003686:	a1 79       	lsl	r9,0x1
80003688:	12 4a       	or	r10,r9
8000368a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000368e:	13 e9       	ld.ub	r9,r9[0x6]
80003690:	f5 e9 10 09 	or	r9,r10,r9
80003694:	91 59       	st.w	r8[0x14],r9
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003696:	30 08       	mov	r8,0
80003698:	ef 68 ff ff 	st.b	r7[-1],r8
8000369c:	c1 68       	rjmp	800036c8 <adcifa_configure_sequencer+0xdc>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8000369e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800036a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036a6:	12 98       	mov	r8,r9
800036a8:	a1 78       	lsl	r8,0x1
800036aa:	12 08       	add	r8,r9
800036ac:	ee f9 ff bc 	ld.w	r9,r7[-68]
800036b0:	f2 08 00 08 	add	r8,r9,r8
800036b4:	11 a8       	ld.ub	r8,r8[0x2]
800036b6:	ee 0a 00 09 	add	r9,r7,r10
800036ba:	f3 68 ff ec 	st.b	r9[-20],r8
				(p_adcifa_sequencer_opt->sh_mode),
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));
		/* Configure Gain for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800036be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036c2:	2f f8       	sub	r8,-1
800036c4:	ef 68 ff ff 	st.b	r7[-1],r8
800036c8:	ee f8 ff c0 	ld.w	r8,r7[-64]
800036cc:	11 88       	ld.ub	r8,r8[0x0]
800036ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036d2:	f0 09 18 00 	cp.b	r9,r8
800036d6:	ce 43       	brcs	8000369e <adcifa_configure_sequencer+0xb2>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
800036d8:	fc 78 24 00 	mov	r8,-187392
800036dc:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800036e0:	f2 0a 15 1c 	lsl	r10,r9,0x1c
800036e4:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800036e8:	b9 69       	lsl	r9,0x18
800036ea:	12 4a       	or	r10,r9
800036ec:	ef 39 ff f1 	ld.ub	r9,r7[-15]
800036f0:	b5 69       	lsl	r9,0x14
800036f2:	12 4a       	or	r10,r9
800036f4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800036f8:	b1 69       	lsl	r9,0x10
800036fa:	12 4a       	or	r10,r9
800036fc:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003700:	ad 69       	lsl	r9,0xc
80003702:	12 4a       	or	r10,r9
80003704:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80003708:	a9 69       	lsl	r9,0x8
8000370a:	12 4a       	or	r10,r9
8000370c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80003710:	a5 69       	lsl	r9,0x4
80003712:	12 4a       	or	r10,r9
80003714:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80003718:	f5 e9 10 09 	or	r9,r10,r9
8000371c:	91 79       	st.w	r8[0x1c],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000371e:	30 08       	mov	r8,0
80003720:	ef 68 ff ff 	st.b	r7[-1],r8
80003724:	c2 68       	rjmp	80003770 <adcifa_configure_sequencer+0x184>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
80003726:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000372a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000372e:	12 98       	mov	r8,r9
80003730:	a1 78       	lsl	r8,0x1
80003732:	12 08       	add	r8,r9
80003734:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003738:	f2 08 00 08 	add	r8,r9,r8
8000373c:	11 88       	ld.ub	r8,r8[0x0]
8000373e:	ee 0a 00 09 	add	r9,r7,r10
80003742:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
80003746:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000374a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000374e:	12 98       	mov	r8,r9
80003750:	a1 78       	lsl	r8,0x1
80003752:	12 08       	add	r8,r9
80003754:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003758:	f2 08 00 08 	add	r8,r9,r8
8000375c:	11 98       	ld.ub	r8,r8[0x1]
8000375e:	ee 0a 00 09 	add	r9,r7,r10
80003762:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003766:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000376a:	2f f8       	sub	r8,-1
8000376c:	ef 68 ff ff 	st.b	r7[-1],r8
80003770:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003774:	11 88       	ld.ub	r8,r8[0x0]
80003776:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000377a:	f0 09 18 00 	cp.b	r9,r8
8000377e:	cd 43       	brcs	80003726 <adcifa_configure_sequencer+0x13a>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3],
80003780:	fc 78 24 00 	mov	r8,-187392
80003784:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80003788:	f2 0a 15 18 	lsl	r10,r9,0x18
8000378c:	ef 39 ff e2 	ld.ub	r9,r7[-30]
80003790:	b1 69       	lsl	r9,0x10
80003792:	12 4a       	or	r10,r9
80003794:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80003798:	a9 69       	lsl	r9,0x8
8000379a:	12 4a       	or	r10,r9
8000379c:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800037a0:	f5 e9 10 09 	or	r9,r10,r9
800037a4:	91 b9       	st.w	r8[0x2c],r9
800037a6:	fc 78 24 00 	mov	r8,-187392
800037aa:	ef 39 ff df 	ld.ub	r9,r7[-33]
800037ae:	f2 0a 15 18 	lsl	r10,r9,0x18
800037b2:	ef 39 ff de 	ld.ub	r9,r7[-34]
800037b6:	b1 69       	lsl	r9,0x10
800037b8:	12 4a       	or	r10,r9
800037ba:	ef 39 ff dd 	ld.ub	r9,r7[-35]
800037be:	a9 69       	lsl	r9,0x8
800037c0:	12 4a       	or	r10,r9
800037c2:	ef 39 ff dc 	ld.ub	r9,r7[-36]
800037c6:	f5 e9 10 09 	or	r9,r10,r9
800037ca:	91 99       	st.w	r8[0x24],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3],
800037cc:	fc 78 24 00 	mov	r8,-187392
800037d0:	ef 39 ff d3 	ld.ub	r9,r7[-45]
800037d4:	f2 0a 15 18 	lsl	r10,r9,0x18
800037d8:	ef 39 ff d2 	ld.ub	r9,r7[-46]
800037dc:	b1 69       	lsl	r9,0x10
800037de:	12 4a       	or	r10,r9
800037e0:	ef 39 ff d1 	ld.ub	r9,r7[-47]
800037e4:	a9 69       	lsl	r9,0x8
800037e6:	12 4a       	or	r10,r9
800037e8:	ef 39 ff d0 	ld.ub	r9,r7[-48]
800037ec:	f5 e9 10 09 	or	r9,r10,r9
800037f0:	91 f9       	st.w	r8[0x3c],r9
800037f2:	fc 78 24 00 	mov	r8,-187392
800037f6:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800037fa:	f2 0a 15 18 	lsl	r10,r9,0x18
800037fe:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003802:	b1 69       	lsl	r9,0x10
80003804:	12 4a       	or	r10,r9
80003806:	ef 39 ff cd 	ld.ub	r9,r7[-51]
8000380a:	a9 69       	lsl	r9,0x8
8000380c:	12 4a       	or	r10,r9
8000380e:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80003812:	f5 e9 10 09 	or	r9,r10,r9
80003816:	91 d9       	st.w	r8[0x34],r9
		 * This adcifa_seq1_configured variable check if muxsel1p,muxsel1n 
		 * registers are already configured. This may happen if this function is
		 * called first with sequencer 1 as argument and then called with 
		 * sequencer 0 as argument in case dual mode is used.
		 */
		if(!adcifa_seq1_configured)
80003818:	fe f8 02 e0 	ld.w	r8,pc[736]
8000381c:	11 88       	ld.ub	r8,r8[0x0]
8000381e:	ec 18 00 01 	eorl	r8,0x1
80003822:	5c 58       	castu.b	r8
80003824:	e0 80 01 63 	breq	80003aea <adcifa_configure_sequencer+0x4fe>
		{
			/*
			 * Configure gain for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */ 
			ADCIFA_configure_sh1gain(g[15], g[14], g[13], g[12], g[11], g[10], 
80003828:	fc 78 24 00 	mov	r8,-187392
8000382c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003830:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80003834:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80003838:	b9 69       	lsl	r9,0x18
8000383a:	12 4a       	or	r10,r9
8000383c:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80003840:	b5 69       	lsl	r9,0x14
80003842:	12 4a       	or	r10,r9
80003844:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80003848:	b1 69       	lsl	r9,0x10
8000384a:	12 4a       	or	r10,r9
8000384c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80003850:	ad 69       	lsl	r9,0xc
80003852:	12 4a       	or	r10,r9
80003854:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80003858:	a9 69       	lsl	r9,0x8
8000385a:	12 4a       	or	r10,r9
8000385c:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80003860:	a5 69       	lsl	r9,0x4
80003862:	12 4a       	or	r10,r9
80003864:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003868:	f5 e9 10 09 	or	r9,r10,r9
8000386c:	91 89       	st.w	r8[0x20],r9

			/*
			 * Configure Mux for sequencer 0 (in single sequencer mode for 
			 * conversions 9 to 16)
			 */
			ADCIFA_configure_muxsel1p(mp[15], mp[14], mp[13], mp[12], mp[11], 
8000386e:	fc 78 24 00 	mov	r8,-187392
80003872:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80003876:	f2 0a 15 18 	lsl	r10,r9,0x18
8000387a:	ef 39 ff ea 	ld.ub	r9,r7[-22]
8000387e:	b1 69       	lsl	r9,0x10
80003880:	12 4a       	or	r10,r9
80003882:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80003886:	a9 69       	lsl	r9,0x8
80003888:	12 4a       	or	r10,r9
8000388a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000388e:	f5 e9 10 09 	or	r9,r10,r9
80003892:	91 c9       	st.w	r8[0x30],r9
80003894:	fc 78 24 00 	mov	r8,-187392
80003898:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8000389c:	f2 0a 15 18 	lsl	r10,r9,0x18
800038a0:	ef 39 ff e6 	ld.ub	r9,r7[-26]
800038a4:	b1 69       	lsl	r9,0x10
800038a6:	12 4a       	or	r10,r9
800038a8:	ef 39 ff e5 	ld.ub	r9,r7[-27]
800038ac:	a9 69       	lsl	r9,0x8
800038ae:	12 4a       	or	r10,r9
800038b0:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800038b4:	f5 e9 10 09 	or	r9,r10,r9
800038b8:	91 a9       	st.w	r8[0x28],r9
				mp[10], mp[9], mp[8]);
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
800038ba:	fc 78 24 00 	mov	r8,-187392
800038be:	ef 39 ff db 	ld.ub	r9,r7[-37]
800038c2:	f2 0a 15 18 	lsl	r10,r9,0x18
800038c6:	ef 39 ff da 	ld.ub	r9,r7[-38]
800038ca:	b1 69       	lsl	r9,0x10
800038cc:	12 4a       	or	r10,r9
800038ce:	ef 39 ff d9 	ld.ub	r9,r7[-39]
800038d2:	a9 69       	lsl	r9,0x8
800038d4:	12 4a       	or	r10,r9
800038d6:	ef 39 ff d8 	ld.ub	r9,r7[-40]
800038da:	f5 e9 10 09 	or	r9,r10,r9
800038de:	f1 49 00 40 	st.w	r8[64],r9
800038e2:	fc 78 24 00 	mov	r8,-187392
800038e6:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800038ea:	f2 0a 15 18 	lsl	r10,r9,0x18
800038ee:	ef 39 ff d6 	ld.ub	r9,r7[-42]
800038f2:	b1 69       	lsl	r9,0x10
800038f4:	12 4a       	or	r10,r9
800038f6:	ef 39 ff d5 	ld.ub	r9,r7[-43]
800038fa:	a9 69       	lsl	r9,0x8
800038fc:	12 4a       	or	r10,r9
800038fe:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80003902:	f5 e9 10 09 	or	r9,r10,r9
80003906:	91 e9       	st.w	r8[0x38],r9
				mn[10], mn[9], mn[8]);

		}

		break;
80003908:	cf 28       	rjmp	80003aec <adcifa_configure_sequencer+0x500>

	/* Sequencer 1 */
	case 1:
		/* Configure Sequencer 1 */
		ADCIFA_configure_sequencer_1(
8000390a:	fc 78 24 00 	mov	r8,-187392
8000390e:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003912:	13 89       	ld.ub	r9,r9[0x0]
80003914:	20 19       	sub	r9,1
80003916:	f2 0a 15 10 	lsl	r10,r9,0x10
8000391a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000391e:	13 99       	ld.ub	r9,r9[0x1]
80003920:	ad 69       	lsl	r9,0xc
80003922:	12 4a       	or	r10,r9
80003924:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003928:	13 a9       	ld.ub	r9,r9[0x2]
8000392a:	a9 69       	lsl	r9,0x8
8000392c:	12 4a       	or	r10,r9
8000392e:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003932:	13 b9       	ld.ub	r9,r9[0x3]
80003934:	a3 69       	lsl	r9,0x2
80003936:	12 4a       	or	r10,r9
80003938:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000393c:	13 c9       	ld.ub	r9,r9[0x4]
8000393e:	a3 79       	lsl	r9,0x3
80003940:	12 4a       	or	r10,r9
80003942:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003946:	13 d9       	ld.ub	r9,r9[0x5]
80003948:	a1 79       	lsl	r9,0x1
8000394a:	f5 e9 10 09 	or	r9,r10,r9
8000394e:	12 9a       	mov	r10,r9
80003950:	a5 aa       	sbr	r10,0x4
80003952:	ee f9 ff c0 	ld.w	r9,r7[-64]
80003956:	13 e9       	ld.ub	r9,r9[0x6]
80003958:	f5 e9 10 09 	or	r9,r10,r9
8000395c:	91 69       	st.w	r8[0x18],r9
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8000395e:	30 08       	mov	r8,0
80003960:	ef 68 ff ff 	st.b	r7[-1],r8
80003964:	c1 68       	rjmp	80003990 <adcifa_configure_sequencer+0x3a4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
80003966:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000396a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000396e:	12 98       	mov	r8,r9
80003970:	a1 78       	lsl	r8,0x1
80003972:	12 08       	add	r8,r9
80003974:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003978:	f2 08 00 08 	add	r8,r9,r8
8000397c:	11 a8       	ld.ub	r8,r8[0x2]
8000397e:	ee 0a 00 09 	add	r9,r7,r10
80003982:	f3 68 ff ec 	st.b	r9[-20],r8
#endif
				(p_adcifa_sequencer_opt->half_word_adjustment),
				(p_adcifa_sequencer_opt->software_acknowledge));

		/* Configure Gain for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003986:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000398a:	2f f8       	sub	r8,-1
8000398c:	ef 68 ff ff 	st.b	r7[-1],r8
80003990:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003994:	11 88       	ld.ub	r8,r8[0x0]
80003996:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000399a:	f0 09 18 00 	cp.b	r9,r8
8000399e:	ce 43       	brcs	80003966 <adcifa_configure_sequencer+0x37a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
800039a0:	fc 78 24 00 	mov	r8,-187392
800039a4:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800039a8:	f2 0a 15 1c 	lsl	r10,r9,0x1c
800039ac:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800039b0:	b9 69       	lsl	r9,0x18
800039b2:	12 4a       	or	r10,r9
800039b4:	ef 39 ff f1 	ld.ub	r9,r7[-15]
800039b8:	b5 69       	lsl	r9,0x14
800039ba:	12 4a       	or	r10,r9
800039bc:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800039c0:	b1 69       	lsl	r9,0x10
800039c2:	12 4a       	or	r10,r9
800039c4:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800039c8:	ad 69       	lsl	r9,0xc
800039ca:	12 4a       	or	r10,r9
800039cc:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800039d0:	a9 69       	lsl	r9,0x8
800039d2:	12 4a       	or	r10,r9
800039d4:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800039d8:	a5 69       	lsl	r9,0x4
800039da:	12 4a       	or	r10,r9
800039dc:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800039e0:	f5 e9 10 09 	or	r9,r10,r9
800039e4:	91 89       	st.w	r8[0x20],r9
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800039e6:	30 08       	mov	r8,0
800039e8:	ef 68 ff ff 	st.b	r7[-1],r8
800039ec:	c2 68       	rjmp	80003a38 <adcifa_configure_sequencer+0x44c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800039ee:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800039f2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039f6:	12 98       	mov	r8,r9
800039f8:	a1 78       	lsl	r8,0x1
800039fa:	12 08       	add	r8,r9
800039fc:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003a00:	f2 08 00 08 	add	r8,r9,r8
80003a04:	11 88       	ld.ub	r8,r8[0x0]
80003a06:	ee 0a 00 09 	add	r9,r7,r10
80003a0a:	f3 68 ff dc 	st.b	r9[-36],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
80003a0e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003a12:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003a16:	12 98       	mov	r8,r9
80003a18:	a1 78       	lsl	r8,0x1
80003a1a:	12 08       	add	r8,r9
80003a1c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80003a20:	f2 08 00 08 	add	r8,r9,r8
80003a24:	11 98       	ld.ub	r8,r8[0x1]
80003a26:	ee 0a 00 09 	add	r9,r7,r10
80003a2a:	f3 68 ff cc 	st.b	r9[-52],r8
		}
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2],
				g[1], g[0]);

		/* Configure Mux for Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003a2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a32:	2f f8       	sub	r8,-1
80003a34:	ef 68 ff ff 	st.b	r7[-1],r8
80003a38:	ee f8 ff c0 	ld.w	r8,r7[-64]
80003a3c:	11 88       	ld.ub	r8,r8[0x0]
80003a3e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003a42:	f0 09 18 00 	cp.b	r9,r8
80003a46:	cd 43       	brcs	800039ee <adcifa_configure_sequencer+0x402>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3],
80003a48:	fc 78 24 00 	mov	r8,-187392
80003a4c:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80003a50:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a54:	ef 39 ff e2 	ld.ub	r9,r7[-30]
80003a58:	b1 69       	lsl	r9,0x10
80003a5a:	12 4a       	or	r10,r9
80003a5c:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80003a60:	a9 69       	lsl	r9,0x8
80003a62:	12 4a       	or	r10,r9
80003a64:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80003a68:	f5 e9 10 09 	or	r9,r10,r9
80003a6c:	91 c9       	st.w	r8[0x30],r9
80003a6e:	fc 78 24 00 	mov	r8,-187392
80003a72:	ef 39 ff df 	ld.ub	r9,r7[-33]
80003a76:	f2 0a 15 18 	lsl	r10,r9,0x18
80003a7a:	ef 39 ff de 	ld.ub	r9,r7[-34]
80003a7e:	b1 69       	lsl	r9,0x10
80003a80:	12 4a       	or	r10,r9
80003a82:	ef 39 ff dd 	ld.ub	r9,r7[-35]
80003a86:	a9 69       	lsl	r9,0x8
80003a88:	12 4a       	or	r10,r9
80003a8a:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80003a8e:	f5 e9 10 09 	or	r9,r10,r9
80003a92:	91 a9       	st.w	r8[0x28],r9
				mp[2], mp[1], mp[0]);
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3],
80003a94:	fc 78 24 00 	mov	r8,-187392
80003a98:	ef 39 ff d3 	ld.ub	r9,r7[-45]
80003a9c:	f2 0a 15 18 	lsl	r10,r9,0x18
80003aa0:	ef 39 ff d2 	ld.ub	r9,r7[-46]
80003aa4:	b1 69       	lsl	r9,0x10
80003aa6:	12 4a       	or	r10,r9
80003aa8:	ef 39 ff d1 	ld.ub	r9,r7[-47]
80003aac:	a9 69       	lsl	r9,0x8
80003aae:	12 4a       	or	r10,r9
80003ab0:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80003ab4:	f5 e9 10 09 	or	r9,r10,r9
80003ab8:	f1 49 00 40 	st.w	r8[64],r9
80003abc:	fc 78 24 00 	mov	r8,-187392
80003ac0:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003ac4:	f2 0a 15 18 	lsl	r10,r9,0x18
80003ac8:	ef 39 ff ce 	ld.ub	r9,r7[-50]
80003acc:	b1 69       	lsl	r9,0x10
80003ace:	12 4a       	or	r10,r9
80003ad0:	ef 39 ff cd 	ld.ub	r9,r7[-51]
80003ad4:	a9 69       	lsl	r9,0x8
80003ad6:	12 4a       	or	r10,r9
80003ad8:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80003adc:	f5 e9 10 09 	or	r9,r10,r9
80003ae0:	91 e9       	st.w	r8[0x38],r9
				mn[2], mn[1], mn[0]);

		adcifa_seq1_configured = true;
80003ae2:	48 69       	lddpc	r9,80003af8 <adcifa_configure_sequencer+0x50c>
80003ae4:	30 18       	mov	r8,1
80003ae6:	b2 88       	st.b	r9[0x0],r8
80003ae8:	c0 28       	rjmp	80003aec <adcifa_configure_sequencer+0x500>
			ADCIFA_configure_muxsel1n(mn[15], mn[14], mn[13], mn[12], mn[11], 
				mn[10], mn[9], mn[8]);

		}

		break;
80003aea:	d7 03       	nop
		break;

	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
80003aec:	30 18       	mov	r8,1
}
80003aee:	10 9c       	mov	r12,r8
80003af0:	2e fd       	sub	sp,-68
80003af2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003af6:	00 00       	add	r0,r0
80003af8:	00 00       	add	r0,r0
80003afa:	00 c0       	st.b	r0++,r0

80003afc <adcifa_start_sequencer>:
/** \brief Start analog to digital conversion for a specific sequencer
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
void adcifa_start_sequencer(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003afc:	eb cd 40 80 	pushm	r7,lr
80003b00:	1a 97       	mov	r7,sp
80003b02:	20 2d       	sub	sp,8
80003b04:	ef 4c ff fc 	st.w	r7[-4],r12
80003b08:	16 98       	mov	r8,r11
80003b0a:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* Switch Sequencer */
	switch (sequencer) {
80003b0e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003b12:	58 18       	cp.w	r8,1
80003b14:	c0 a0       	breq	80003b28 <adcifa_start_sequencer+0x2c>
80003b16:	58 38       	cp.w	r8,3
80003b18:	c0 d0       	breq	80003b32 <adcifa_start_sequencer+0x36>
80003b1a:	58 08       	cp.w	r8,0
80003b1c:	c0 f1       	brne	80003b3a <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
80003b1e:	fc 78 24 00 	mov	r8,-187392
80003b22:	30 19       	mov	r9,1
80003b24:	91 09       	st.w	r8[0x0],r9
		break;
80003b26:	c0 a8       	rjmp	80003b3a <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
80003b28:	fc 78 24 00 	mov	r8,-187392
80003b2c:	30 29       	mov	r9,2
80003b2e:	91 09       	st.w	r8[0x0],r9
		break;
80003b30:	c0 58       	rjmp	80003b3a <adcifa_start_sequencer+0x3e>

	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(
80003b32:	fc 78 24 00 	mov	r8,-187392
80003b36:	30 39       	mov	r9,3
80003b38:	91 09       	st.w	r8[0x0],r9
		break;

	default:
		break;
	}
}
80003b3a:	2f ed       	sub	sp,-8
80003b3c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b40 <adcifa_check_eos>:
/** \brief Get End of Conversion status bit
 *  \param adcifa     Base address of the ADCIFA
 *  \param sequencer  Sequencer index
 */
bool adcifa_check_eos(volatile avr32_adcifa_t *adcifa, uint8_t sequencer)
{
80003b40:	eb cd 40 80 	pushm	r7,lr
80003b44:	1a 97       	mov	r7,sp
80003b46:	20 2d       	sub	sp,8
80003b48:	ef 4c ff fc 	st.w	r7[-4],r12
80003b4c:	16 98       	mov	r8,r11
80003b4e:	ef 68 ff f8 	st.b	r7[-8],r8
	/* Sanity Check */
	Assert( adcifa != NULL );

	/* get SR register : EOS bit for channel */
	switch (sequencer) {
80003b52:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003b56:	58 08       	cp.w	r8,0
80003b58:	c0 40       	breq	80003b60 <adcifa_check_eos+0x20>
80003b5a:	58 18       	cp.w	r8,1
80003b5c:	c0 90       	breq	80003b6e <adcifa_check_eos+0x2e>
80003b5e:	c1 08       	rjmp	80003b7e <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
80003b60:	fc 78 24 00 	mov	r8,-187392
80003b64:	70 28       	ld.w	r8,r8[0x8]
80003b66:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003b6a:	5c 58       	castu.b	r8
80003b6c:	c0 a8       	rjmp	80003b80 <adcifa_check_eos+0x40>

	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
80003b6e:	fc 78 24 00 	mov	r8,-187392
80003b72:	70 28       	ld.w	r8,r8[0x8]
80003b74:	e2 18 00 10 	andl	r8,0x10,COH
80003b78:	5f 18       	srne	r8
80003b7a:	5c 58       	castu.b	r8
80003b7c:	c0 28       	rjmp	80003b80 <adcifa_check_eos+0x40>

	default:
		break;
	}
	return false;
80003b7e:	30 08       	mov	r8,0
}
80003b80:	10 9c       	mov	r12,r8
80003b82:	2f ed       	sub	sp,-8
80003b84:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b88 <adcifa_get_values_from_sequencer>:
 */
uint8_t adcifa_get_values_from_sequencer(volatile avr32_adcifa_t *adcifa,
		uint8_t sequencer,
		adcifa_sequencer_opt_t *p_adcifa_sequencer_opt,
		int16_t *adcifa_values)
{
80003b88:	eb cd 40 80 	pushm	r7,lr
80003b8c:	1a 97       	mov	r7,sp
80003b8e:	20 5d       	sub	sp,20
80003b90:	ef 4c ff f8 	st.w	r7[-8],r12
80003b94:	16 98       	mov	r8,r11
80003b96:	ef 4a ff f0 	st.w	r7[-16],r10
80003b9a:	ef 49 ff ec 	st.w	r7[-20],r9
80003b9e:	ef 68 ff f4 	st.b	r7[-12],r8

	/* Sanity Check */
	Assert( adcifa != NULL );

	/* wait for end of sequence */
	if (adcifa_check_eos(adcifa, sequencer) != true) {
80003ba2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003ba6:	10 9b       	mov	r11,r8
80003ba8:	ee fc ff f8 	ld.w	r12,r7[-8]
80003bac:	f0 1f 00 2c 	mcall	80003c5c <adcifa_get_values_from_sequencer+0xd4>
80003bb0:	18 98       	mov	r8,r12
80003bb2:	ec 18 00 01 	eorl	r8,0x1
80003bb6:	5c 58       	castu.b	r8
80003bb8:	c0 30       	breq	80003bbe <adcifa_get_values_from_sequencer+0x36>
		return ADCIFA_STATUS_NOT_COMPLETED;
80003bba:	30 38       	mov	r8,3
80003bbc:	c4 b8       	rjmp	80003c52 <adcifa_get_values_from_sequencer+0xca>
	}

	switch (sequencer) {
80003bbe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003bc2:	58 08       	cp.w	r8,0
80003bc4:	c0 40       	breq	80003bcc <adcifa_get_values_from_sequencer+0x44>
80003bc6:	58 18       	cp.w	r8,1
80003bc8:	c2 30       	breq	80003c0e <adcifa_get_values_from_sequencer+0x86>
80003bca:	c4 38       	rjmp	80003c50 <adcifa_get_values_from_sequencer+0xc8>
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003bcc:	30 08       	mov	r8,0
80003bce:	ef 68 ff ff 	st.b	r7[-1],r8
80003bd2:	c1 58       	rjmp	80003bfc <adcifa_get_values_from_sequencer+0x74>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
80003bd4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003bd8:	a1 78       	lsl	r8,0x1
80003bda:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003bde:	10 09       	add	r9,r8
80003be0:	fc 78 24 00 	mov	r8,-187392
80003be4:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003be8:	2d fa       	sub	r10,-33
80003bea:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003bee:	5c 88       	casts.h	r8
80003bf0:	b2 08       	st.h	r9[0x0],r8
	}

	switch (sequencer) {
	case 0:
		/* Read values from Sequencer 0 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003bf2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003bf6:	2f f8       	sub	r8,-1
80003bf8:	ef 68 ff ff 	st.b	r7[-1],r8
80003bfc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003c00:	11 88       	ld.ub	r8,r8[0x0]
80003c02:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003c06:	f0 09 18 00 	cp.b	r9,r8
80003c0a:	ce 53       	brcs	80003bd4 <adcifa_get_values_from_sequencer+0x4c>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
80003c0c:	c2 28       	rjmp	80003c50 <adcifa_get_values_from_sequencer+0xc8>

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003c0e:	30 08       	mov	r8,0
80003c10:	ef 68 ff ff 	st.b	r7[-1],r8
80003c14:	c1 68       	rjmp	80003c40 <adcifa_get_values_from_sequencer+0xb8>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
80003c16:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003c1a:	a1 78       	lsl	r8,0x1
80003c1c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003c20:	10 09       	add	r9,r8
80003c22:	fc 78 24 00 	mov	r8,-187392
80003c26:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003c2a:	2f 8a       	sub	r10,-8
80003c2c:	2d fa       	sub	r10,-33
80003c2e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003c32:	5c 88       	casts.h	r8
80003c34:	b2 08       	st.h	r9[0x0],r8
		}
		break;

	case 1:
		/* Read values from Sequencer 1 */
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80003c36:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003c3a:	2f f8       	sub	r8,-1
80003c3c:	ef 68 ff ff 	st.b	r7[-1],r8
80003c40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003c44:	11 88       	ld.ub	r8,r8[0x0]
80003c46:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003c4a:	f0 09 18 00 	cp.b	r9,r8
80003c4e:	ce 43       	brcs	80003c16 <adcifa_get_values_from_sequencer+0x8e>

	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
80003c50:	30 28       	mov	r8,2
}
80003c52:	10 9c       	mov	r12,r8
80003c54:	2f bd       	sub	sp,-20
80003c56:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c5a:	00 00       	add	r0,r0
80003c5c:	80 00       	ld.sh	r0,r0[0x0]
80003c5e:	3b 40       	mov	r0,-76

80003c60 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80003c60:	eb cd 40 80 	pushm	r7,lr
80003c64:	1a 97       	mov	r7,sp
80003c66:	20 4d       	sub	sp,16
80003c68:	ef 4c ff f4 	st.w	r7[-12],r12
80003c6c:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
80003c70:	30 08       	mov	r8,0
80003c72:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
80003c76:	30 08       	mov	r8,0
80003c78:	ef 48 ff fc 	st.w	r7[-4],r8
80003c7c:	c1 c8       	rjmp	80003cb4 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80003c7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003c82:	70 19       	ld.w	r9,r8[0x4]
80003c84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003c88:	70 08       	ld.w	r8,r8[0x0]
80003c8a:	12 9b       	mov	r11,r9
80003c8c:	10 9c       	mov	r12,r8
80003c8e:	f0 1f 00 10 	mcall	80003ccc <gpio_enable_module+0x6c>
80003c92:	18 98       	mov	r8,r12
80003c94:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c98:	f3 e8 10 08 	or	r8,r9,r8
80003c9c:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
80003ca0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003ca4:	2f 88       	sub	r8,-8
80003ca6:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80003caa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cae:	2f f8       	sub	r8,-1
80003cb0:	ef 48 ff fc 	st.w	r7[-4],r8
80003cb4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003cb8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003cbc:	10 39       	cp.w	r9,r8
80003cbe:	ce 03       	brcs	80003c7e <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
80003cc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003cc4:	10 9c       	mov	r12,r8
80003cc6:	2f cd       	sub	sp,-16
80003cc8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ccc:	80 00       	ld.sh	r0,r0[0x0]
80003cce:	3c d0       	mov	r0,-51

80003cd0 <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80003cd0:	eb cd 40 80 	pushm	r7,lr
80003cd4:	1a 97       	mov	r7,sp
80003cd6:	20 3d       	sub	sp,12
80003cd8:	ef 4c ff f8 	st.w	r7[-8],r12
80003cdc:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003ce0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ce4:	a5 98       	lsr	r8,0x5
80003ce6:	a9 78       	lsl	r8,0x9
80003ce8:	e0 28 e0 00 	sub	r8,57344
80003cec:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
80003cf0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003cf4:	58 78       	cp.w	r8,7
80003cf6:	e0 8b 01 16 	brhi	80003f22 <gpio_enable_module_pin+0x252>
80003cfa:	fe f9 02 4e 	ld.w	r9,pc[590]
80003cfe:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003d02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d06:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003d0a:	30 19       	mov	r9,1
80003d0c:	f2 08 09 48 	lsl	r8,r9,r8
80003d10:	10 99       	mov	r9,r8
80003d12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d16:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003d18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d1c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003d20:	30 19       	mov	r9,1
80003d22:	f2 08 09 48 	lsl	r8,r9,r8
80003d26:	10 99       	mov	r9,r8
80003d28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d2c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003d2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d32:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003d36:	30 19       	mov	r9,1
80003d38:	f2 08 09 48 	lsl	r8,r9,r8
80003d3c:	10 99       	mov	r9,r8
80003d3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d42:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003d44:	cf 18       	rjmp	80003f26 <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003d46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003d4e:	30 19       	mov	r9,1
80003d50:	f2 08 09 48 	lsl	r8,r9,r8
80003d54:	10 99       	mov	r9,r8
80003d56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d5a:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003d5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d60:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003d64:	30 19       	mov	r9,1
80003d66:	f2 08 09 48 	lsl	r8,r9,r8
80003d6a:	10 99       	mov	r9,r8
80003d6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d70:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003d72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d76:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003d7a:	30 19       	mov	r9,1
80003d7c:	f2 08 09 48 	lsl	r8,r9,r8
80003d80:	10 99       	mov	r9,r8
80003d82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d86:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003d88:	cc f8       	rjmp	80003f26 <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003d8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d8e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003d92:	30 19       	mov	r9,1
80003d94:	f2 08 09 48 	lsl	r8,r9,r8
80003d98:	10 99       	mov	r9,r8
80003d9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d9e:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003da0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003da4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003da8:	30 19       	mov	r9,1
80003daa:	f2 08 09 48 	lsl	r8,r9,r8
80003dae:	10 99       	mov	r9,r8
80003db0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003db4:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003db6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003dba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003dbe:	30 19       	mov	r9,1
80003dc0:	f2 08 09 48 	lsl	r8,r9,r8
80003dc4:	10 99       	mov	r9,r8
80003dc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003dca:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003dcc:	ca d8       	rjmp	80003f26 <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003dce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003dd2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003dd6:	30 19       	mov	r9,1
80003dd8:	f2 08 09 48 	lsl	r8,r9,r8
80003ddc:	10 99       	mov	r9,r8
80003dde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003de2:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003de4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003de8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003dec:	30 19       	mov	r9,1
80003dee:	f2 08 09 48 	lsl	r8,r9,r8
80003df2:	10 99       	mov	r9,r8
80003df4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003df8:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80003dfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003dfe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003e02:	30 19       	mov	r9,1
80003e04:	f2 08 09 48 	lsl	r8,r9,r8
80003e08:	10 99       	mov	r9,r8
80003e0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e0e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80003e10:	c8 b8       	rjmp	80003f26 <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003e12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e16:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003e1a:	30 19       	mov	r9,1
80003e1c:	f2 08 09 48 	lsl	r8,r9,r8
80003e20:	10 99       	mov	r9,r8
80003e22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e26:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003e28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e2c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003e30:	30 19       	mov	r9,1
80003e32:	f2 08 09 48 	lsl	r8,r9,r8
80003e36:	10 99       	mov	r9,r8
80003e38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e3c:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80003e3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e42:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003e46:	30 19       	mov	r9,1
80003e48:	f2 08 09 48 	lsl	r8,r9,r8
80003e4c:	10 99       	mov	r9,r8
80003e4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e52:	91 d9       	st.w	r8[0x34],r9
		break;
80003e54:	c6 98       	rjmp	80003f26 <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003e56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e5a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003e5e:	30 19       	mov	r9,1
80003e60:	f2 08 09 48 	lsl	r8,r9,r8
80003e64:	10 99       	mov	r9,r8
80003e66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e6a:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003e6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e70:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003e74:	30 19       	mov	r9,1
80003e76:	f2 08 09 48 	lsl	r8,r9,r8
80003e7a:	10 99       	mov	r9,r8
80003e7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e80:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80003e82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e86:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003e8a:	30 19       	mov	r9,1
80003e8c:	f2 08 09 48 	lsl	r8,r9,r8
80003e90:	10 99       	mov	r9,r8
80003e92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e96:	91 d9       	st.w	r8[0x34],r9
		break;
80003e98:	c4 78       	rjmp	80003f26 <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003e9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e9e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003ea2:	30 19       	mov	r9,1
80003ea4:	f2 08 09 48 	lsl	r8,r9,r8
80003ea8:	10 99       	mov	r9,r8
80003eaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003eae:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003eb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003eb4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003eb8:	30 19       	mov	r9,1
80003eba:	f2 08 09 48 	lsl	r8,r9,r8
80003ebe:	10 99       	mov	r9,r8
80003ec0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ec4:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80003ec6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003eca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003ece:	30 19       	mov	r9,1
80003ed0:	f2 08 09 48 	lsl	r8,r9,r8
80003ed4:	10 99       	mov	r9,r8
80003ed6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003eda:	91 d9       	st.w	r8[0x34],r9
		break;
80003edc:	c2 58       	rjmp	80003f26 <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003ede:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ee2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003ee6:	30 19       	mov	r9,1
80003ee8:	f2 08 09 48 	lsl	r8,r9,r8
80003eec:	10 99       	mov	r9,r8
80003eee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ef2:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003ef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ef8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003efc:	30 19       	mov	r9,1
80003efe:	f2 08 09 48 	lsl	r8,r9,r8
80003f02:	10 99       	mov	r9,r8
80003f04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f08:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80003f0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f0e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003f12:	30 19       	mov	r9,1
80003f14:	f2 08 09 48 	lsl	r8,r9,r8
80003f18:	10 99       	mov	r9,r8
80003f1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f1e:	91 d9       	st.w	r8[0x34],r9
		break;
80003f20:	c0 38       	rjmp	80003f26 <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
80003f22:	30 18       	mov	r8,1
80003f24:	c0 d8       	rjmp	80003f3e <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80003f26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f2a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003f2e:	30 19       	mov	r9,1
80003f30:	f2 08 09 48 	lsl	r8,r9,r8
80003f34:	10 99       	mov	r9,r8
80003f36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f3a:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80003f3c:	30 08       	mov	r8,0
}
80003f3e:	10 9c       	mov	r12,r8
80003f40:	2f dd       	sub	sp,-12
80003f42:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f46:	00 00       	add	r0,r0
80003f48:	80 00       	ld.sh	r0,r0[0x0]
80003f4a:	78 20       	ld.w	r0,r12[0x8]

80003f4c <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80003f4c:	eb cd 40 80 	pushm	r7,lr
80003f50:	1a 97       	mov	r7,sp
80003f52:	20 3d       	sub	sp,12
80003f54:	ef 4c ff f8 	st.w	r7[-8],r12
80003f58:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003f5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f60:	a5 98       	lsr	r8,0x5
80003f62:	a9 78       	lsl	r8,0x9
80003f64:	e0 28 e0 00 	sub	r8,57344
80003f68:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
80003f6c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003f70:	e2 18 00 08 	andl	r8,0x8,COH
80003f74:	c0 e0       	breq	80003f90 <gpio_configure_pin+0x44>
		gpio_port->pders = 1 << (pin & 0x1F);
80003f76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f7a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003f7e:	30 19       	mov	r9,1
80003f80:	f2 08 09 48 	lsl	r8,r9,r8
80003f84:	10 99       	mov	r9,r8
80003f86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f8a:	f1 49 00 84 	st.w	r8[132],r9
80003f8e:	c0 d8       	rjmp	80003fa8 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
80003f90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f94:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003f98:	30 19       	mov	r9,1
80003f9a:	f2 08 09 48 	lsl	r8,r9,r8
80003f9e:	10 99       	mov	r9,r8
80003fa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fa4:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
80003fa8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003fac:	e2 18 00 04 	andl	r8,0x4,COH
80003fb0:	c0 e0       	breq	80003fcc <gpio_configure_pin+0x80>
		gpio_port->puers = 1 << (pin & 0x1F);
80003fb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fb6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003fba:	30 19       	mov	r9,1
80003fbc:	f2 08 09 48 	lsl	r8,r9,r8
80003fc0:	10 99       	mov	r9,r8
80003fc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fc6:	f1 49 00 74 	st.w	r8[116],r9
80003fca:	c0 d8       	rjmp	80003fe4 <gpio_configure_pin+0x98>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80003fcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fd0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003fd4:	30 19       	mov	r9,1
80003fd6:	f2 08 09 48 	lsl	r8,r9,r8
80003fda:	10 99       	mov	r9,r8
80003fdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fe0:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
80003fe4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003fe8:	e2 18 00 40 	andl	r8,0x40,COH
80003fec:	c0 e0       	breq	80004008 <gpio_configure_pin+0xbc>
		gpio_port->odmers = 1 << (pin & 0x1F);
80003fee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ff2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003ff6:	30 19       	mov	r9,1
80003ff8:	f2 08 09 48 	lsl	r8,r9,r8
80003ffc:	10 99       	mov	r9,r8
80003ffe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004002:	f1 49 00 e4 	st.w	r8[228],r9
80004006:	c0 d8       	rjmp	80004020 <gpio_configure_pin+0xd4>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
80004008:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000400c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004010:	30 19       	mov	r9,1
80004012:	f2 08 09 48 	lsl	r8,r9,r8
80004016:	10 99       	mov	r9,r8
80004018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000401c:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
80004020:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004024:	e2 18 00 10 	andl	r8,0x10,COH
80004028:	c0 e0       	breq	80004044 <gpio_configure_pin+0xf8>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
8000402a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000402e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004032:	30 19       	mov	r9,1
80004034:	f2 08 09 48 	lsl	r8,r9,r8
80004038:	10 99       	mov	r9,r8
8000403a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000403e:	f1 49 01 04 	st.w	r8[260],r9
80004042:	c0 d8       	rjmp	8000405c <gpio_configure_pin+0x110>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
80004044:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004048:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000404c:	30 19       	mov	r9,1
8000404e:	f2 08 09 48 	lsl	r8,r9,r8
80004052:	10 99       	mov	r9,r8
80004054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004058:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
8000405c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004060:	e2 18 00 20 	andl	r8,0x20,COH
80004064:	c0 e0       	breq	80004080 <gpio_configure_pin+0x134>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
80004066:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000406a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000406e:	30 19       	mov	r9,1
80004070:	f2 08 09 48 	lsl	r8,r9,r8
80004074:	10 99       	mov	r9,r8
80004076:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000407a:	f1 49 01 14 	st.w	r8[276],r9
8000407e:	c0 d8       	rjmp	80004098 <gpio_configure_pin+0x14c>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
80004080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004084:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004088:	30 19       	mov	r9,1
8000408a:	f2 08 09 48 	lsl	r8,r9,r8
8000408e:	10 99       	mov	r9,r8
80004090:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004094:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80004098:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000409c:	e2 18 00 80 	andl	r8,0x80,COH
800040a0:	c5 a0       	breq	80004154 <gpio_configure_pin+0x208>
		if (flags & GPIO_BOTHEDGES) {
800040a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800040a6:	e2 18 01 80 	andl	r8,0x180,COH
800040aa:	c1 a0       	breq	800040de <gpio_configure_pin+0x192>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800040ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800040b4:	30 19       	mov	r9,1
800040b6:	f2 08 09 48 	lsl	r8,r9,r8
800040ba:	10 99       	mov	r9,r8
800040bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040c0:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800040c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800040cc:	30 19       	mov	r9,1
800040ce:	f2 08 09 48 	lsl	r8,r9,r8
800040d2:	10 99       	mov	r9,r8
800040d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040d8:	f1 49 00 b8 	st.w	r8[184],r9
800040dc:	c3 c8       	rjmp	80004154 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_RISING) {
800040de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800040e2:	e2 18 02 80 	andl	r8,0x280,COH
800040e6:	c1 a0       	breq	8000411a <gpio_configure_pin+0x1ce>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800040e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800040f0:	30 19       	mov	r9,1
800040f2:	f2 08 09 48 	lsl	r8,r9,r8
800040f6:	10 99       	mov	r9,r8
800040f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040fc:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80004100:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004104:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004108:	30 19       	mov	r9,1
8000410a:	f2 08 09 48 	lsl	r8,r9,r8
8000410e:	10 99       	mov	r9,r8
80004110:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004114:	f1 49 00 b8 	st.w	r8[184],r9
80004118:	c1 e8       	rjmp	80004154 <gpio_configure_pin+0x208>
		} else if (flags & GPIO_FALLING) {
8000411a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000411e:	e2 18 03 80 	andl	r8,0x380,COH
80004122:	c1 90       	breq	80004154 <gpio_configure_pin+0x208>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004124:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004128:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000412c:	30 19       	mov	r9,1
8000412e:	f2 08 09 48 	lsl	r8,r9,r8
80004132:	10 99       	mov	r9,r8
80004134:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004138:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000413c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004140:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004144:	30 19       	mov	r9,1
80004146:	f2 08 09 48 	lsl	r8,r9,r8
8000414a:	10 99       	mov	r9,r8
8000414c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004150:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80004154:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004158:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000415c:	5c 58       	castu.b	r8
8000415e:	c2 c0       	breq	800041b6 <gpio_configure_pin+0x26a>
		if (flags & GPIO_INIT_HIGH) {
80004160:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004164:	e2 18 00 02 	andl	r8,0x2,COH
80004168:	c0 e0       	breq	80004184 <gpio_configure_pin+0x238>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000416a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000416e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004172:	30 19       	mov	r9,1
80004174:	f2 08 09 48 	lsl	r8,r9,r8
80004178:	10 99       	mov	r9,r8
8000417a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000417e:	f1 49 00 54 	st.w	r8[84],r9
80004182:	c0 d8       	rjmp	8000419c <gpio_configure_pin+0x250>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80004184:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004188:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000418c:	30 19       	mov	r9,1
8000418e:	f2 08 09 48 	lsl	r8,r9,r8
80004192:	10 99       	mov	r9,r8
80004194:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004198:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
8000419c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041a0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800041a4:	30 19       	mov	r9,1
800041a6:	f2 08 09 48 	lsl	r8,r9,r8
800041aa:	10 99       	mov	r9,r8
800041ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800041b0:	f1 49 00 44 	st.w	r8[68],r9
800041b4:	c0 d8       	rjmp	800041ce <gpio_configure_pin+0x282>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
800041b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800041be:	30 19       	mov	r9,1
800041c0:	f2 08 09 48 	lsl	r8,r9,r8
800041c4:	10 99       	mov	r9,r8
800041c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800041ca:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
800041ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800041d6:	30 19       	mov	r9,1
800041d8:	f2 08 09 48 	lsl	r8,r9,r8
800041dc:	10 99       	mov	r9,r8
800041de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800041e2:	91 19       	st.w	r8[0x4],r9
}
800041e4:	2f dd       	sub	sp,-12
800041e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800041ea <gpio_get_pin_value>:
 * \param pin The pin number.
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
800041ea:	eb cd 40 80 	pushm	r7,lr
800041ee:	1a 97       	mov	r7,sp
800041f0:	20 2d       	sub	sp,8
800041f2:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800041f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041fa:	a5 98       	lsr	r8,0x5
800041fc:	a9 78       	lsl	r8,0x9
800041fe:	e0 28 e0 00 	sub	r8,57344
80004202:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80004206:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000420a:	71 89       	ld.w	r9,r8[0x60]
8000420c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004210:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004214:	f2 08 0a 48 	lsr	r8,r9,r8
80004218:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000421c:	5c 58       	castu.b	r8
}
8000421e:	10 9c       	mov	r12,r8
80004220:	2f ed       	sub	sp,-8
80004222:	e3 cd 80 80 	ldm	sp++,r7,pc

80004226 <gpio_set_pin_high>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
80004226:	eb cd 40 80 	pushm	r7,lr
8000422a:	1a 97       	mov	r7,sp
8000422c:	20 2d       	sub	sp,8
8000422e:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004232:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004236:	a5 98       	lsr	r8,0x5
80004238:	a9 78       	lsl	r8,0x9
8000423a:	e0 28 e0 00 	sub	r8,57344
8000423e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80004242:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004246:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000424a:	30 19       	mov	r9,1
8000424c:	f2 08 09 48 	lsl	r8,r9,r8
80004250:	10 99       	mov	r9,r8
80004252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004256:	f1 49 00 54 	st.w	r8[84],r9
}
8000425a:	2f ed       	sub	sp,-8
8000425c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004260 <gpio_set_pin_low>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
80004260:	eb cd 40 80 	pushm	r7,lr
80004264:	1a 97       	mov	r7,sp
80004266:	20 2d       	sub	sp,8
80004268:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000426c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004270:	a5 98       	lsr	r8,0x5
80004272:	a9 78       	lsl	r8,0x9
80004274:	e0 28 e0 00 	sub	r8,57344
80004278:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000427c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004280:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004284:	30 19       	mov	r9,1
80004286:	f2 08 09 48 	lsl	r8,r9,r8
8000428a:	10 99       	mov	r9,r8
8000428c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004290:	f1 49 00 58 	st.w	r8[88],r9
}
80004294:	2f ed       	sub	sp,-8
80004296:	e3 cd 80 80 	ldm	sp++,r7,pc

8000429a <gpio_toggle_pin>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
8000429a:	eb cd 40 80 	pushm	r7,lr
8000429e:	1a 97       	mov	r7,sp
800042a0:	20 2d       	sub	sp,8
800042a2:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800042a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042aa:	a5 98       	lsr	r8,0x5
800042ac:	a9 78       	lsl	r8,0x9
800042ae:	e0 28 e0 00 	sub	r8,57344
800042b2:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
800042b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800042be:	30 19       	mov	r9,1
800042c0:	f2 08 09 48 	lsl	r8,r9,r8
800042c4:	10 99       	mov	r9,r8
800042c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042ca:	f1 49 00 5c 	st.w	r8[92],r9
}
800042ce:	2f ed       	sub	sp,-8
800042d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800042d4 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800042d4:	eb cd 40 80 	pushm	r7,lr
800042d8:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
800042da:	c0 08       	rjmp	800042da <_unhandled_interrupt+0x6>

800042dc <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
800042dc:	eb cd 40 80 	pushm	r7,lr
800042e0:	1a 97       	mov	r7,sp
800042e2:	20 3d       	sub	sp,12
800042e4:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800042e8:	fe 78 00 00 	mov	r8,-65536
800042ec:	ee f9 ff f4 	ld.w	r9,r7[-12]
800042f0:	f2 09 11 03 	rsub	r9,r9,3
800042f4:	28 09       	sub	r9,-128
800042f6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800042fa:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800042fe:	fe 78 00 00 	mov	r8,-65536
80004302:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004306:	2c 09       	sub	r9,-64
80004308:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000430c:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004310:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004314:	58 08       	cp.w	r8,0
80004316:	c1 30       	breq	8000433c <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004318:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000431c:	48 b8       	lddpc	r8,80004348 <_get_interrupt_handler+0x6c>
8000431e:	a1 79       	lsl	r9,0x1
80004320:	2f f9       	sub	r9,-1
80004322:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004326:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000432a:	f0 08 12 00 	clz	r8,r8
8000432e:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80004332:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004334:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004338:	70 08       	ld.w	r8,r8[0x0]
8000433a:	c0 28       	rjmp	8000433e <_get_interrupt_handler+0x62>
8000433c:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000433e:	10 9c       	mov	r12,r8
80004340:	2f dd       	sub	sp,-12
80004342:	e3 cd 80 80 	ldm	sp++,r7,pc
80004346:	00 00       	add	r0,r0
80004348:	80 00       	ld.sh	r0,r0[0x0]
8000434a:	78 40       	ld.w	r0,r12[0x10]

8000434c <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
8000434c:	eb cd 40 80 	pushm	r7,lr
80004350:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004352:	48 38       	lddpc	r8,8000435c <INTC_init_evba+0x10>
80004354:	e3 b8 00 01 	mtsr	0x4,r8
}
80004358:	e3 cd 80 80 	ldm	sp++,r7,pc
8000435c:	80 00       	ld.sh	r0,r0[0x0]
8000435e:	76 00       	ld.w	r0,r11[0x0]

80004360 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80004360:	eb cd 40 80 	pushm	r7,lr
80004364:	1a 97       	mov	r7,sp
80004366:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80004368:	f0 1f 00 20 	mcall	800043e8 <INTC_init_interrupts+0x88>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000436c:	30 08       	mov	r8,0
8000436e:	ef 48 ff f8 	st.w	r7[-8],r8
80004372:	c3 18       	rjmp	800043d4 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004374:	30 08       	mov	r8,0
80004376:	ef 48 ff fc 	st.w	r7[-4],r8
8000437a:	c1 48       	rjmp	800043a2 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
8000437c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004380:	49 b8       	lddpc	r8,800043ec <INTC_init_interrupts+0x8c>
80004382:	a1 79       	lsl	r9,0x1
80004384:	2f f9       	sub	r9,-1
80004386:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000438a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000438e:	a3 68       	lsl	r8,0x2
80004390:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004394:	49 79       	lddpc	r9,800043f0 <INTC_init_interrupts+0x90>
80004396:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004398:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000439c:	2f f8       	sub	r8,-1
8000439e:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
800043a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043a6:	49 28       	lddpc	r8,800043ec <INTC_init_interrupts+0x8c>
800043a8:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800043ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043b0:	10 39       	cp.w	r9,r8
800043b2:	fe 9b ff e5 	brhi	8000437c <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800043b6:	fe 78 00 00 	mov	r8,-65536
800043ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043be:	48 eb       	lddpc	r11,800043f4 <INTC_init_interrupts+0x94>
800043c0:	48 ea       	lddpc	r10,800043f8 <INTC_init_interrupts+0x98>
800043c2:	f6 0a 01 0a 	sub	r10,r11,r10
800043c6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800043ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043ce:	2f f8       	sub	r8,-1
800043d0:	ef 48 ff f8 	st.w	r7[-8],r8
800043d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043d8:	e0 48 00 2e 	cp.w	r8,46
800043dc:	fe 98 ff cc 	brls	80004374 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
800043e0:	2f ed       	sub	sp,-8
800043e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800043e6:	00 00       	add	r0,r0
800043e8:	80 00       	ld.sh	r0,r0[0x0]
800043ea:	43 4c       	lddsp	r12,sp[0xd0]
800043ec:	80 00       	ld.sh	r0,r0[0x0]
800043ee:	78 40       	ld.w	r0,r12[0x10]
800043f0:	80 00       	ld.sh	r0,r0[0x0]
800043f2:	42 d4       	lddsp	r4,sp[0xb4]
800043f4:	80 00       	ld.sh	r0,r0[0x0]
800043f6:	77 04       	ld.w	r4,r11[0x40]
800043f8:	80 00       	ld.sh	r0,r0[0x0]
800043fa:	76 00       	ld.w	r0,r11[0x0]

800043fc <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
800043fc:	eb cd 40 80 	pushm	r7,lr
80004400:	1a 97       	mov	r7,sp
80004402:	20 4d       	sub	sp,16
80004404:	ef 4c ff f8 	st.w	r7[-8],r12
80004408:	ef 4b ff f4 	st.w	r7[-12],r11
8000440c:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80004410:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004414:	a5 98       	lsr	r8,0x5
80004416:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000441a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000441e:	4a 78       	lddpc	r8,800044b8 <INTC_register_interrupt+0xbc>
80004420:	a1 79       	lsl	r9,0x1
80004422:	2f f9       	sub	r9,-1
80004424:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004428:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000442c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004430:	a3 68       	lsl	r8,0x2
80004432:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80004436:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000443a:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000443c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004440:	58 08       	cp.w	r8,0
80004442:	c0 c1       	brne	8000445a <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004444:	fe 78 00 00 	mov	r8,-65536
80004448:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000444c:	49 cb       	lddpc	r11,800044bc <INTC_register_interrupt+0xc0>
8000444e:	49 da       	lddpc	r10,800044c0 <INTC_register_interrupt+0xc4>
80004450:	f6 0a 01 0a 	sub	r10,r11,r10
80004454:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004458:	c2 d8       	rjmp	800044b2 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
8000445a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000445e:	58 18       	cp.w	r8,1
80004460:	c0 d1       	brne	8000447a <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004462:	fe 78 00 00 	mov	r8,-65536
80004466:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000446a:	49 7b       	lddpc	r11,800044c4 <INTC_register_interrupt+0xc8>
8000446c:	49 5a       	lddpc	r10,800044c0 <INTC_register_interrupt+0xc4>
8000446e:	f6 0a 01 0a 	sub	r10,r11,r10
80004472:	bf aa       	sbr	r10,0x1e
80004474:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004478:	c1 d8       	rjmp	800044b2 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
8000447a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000447e:	58 28       	cp.w	r8,2
80004480:	c0 d1       	brne	8000449a <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80004482:	fe 78 00 00 	mov	r8,-65536
80004486:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000448a:	49 0b       	lddpc	r11,800044c8 <INTC_register_interrupt+0xcc>
8000448c:	48 da       	lddpc	r10,800044c0 <INTC_register_interrupt+0xc4>
8000448e:	f6 0a 01 0a 	sub	r10,r11,r10
80004492:	bf ba       	sbr	r10,0x1f
80004494:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004498:	c0 d8       	rjmp	800044b2 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000449a:	fe 78 00 00 	mov	r8,-65536
8000449e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800044a2:	48 bb       	lddpc	r11,800044cc <INTC_register_interrupt+0xd0>
800044a4:	48 7a       	lddpc	r10,800044c0 <INTC_register_interrupt+0xc4>
800044a6:	f6 0a 01 0a 	sub	r10,r11,r10
800044aa:	ea 1a c0 00 	orh	r10,0xc000
800044ae:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
800044b2:	2f cd       	sub	sp,-16
800044b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800044b8:	80 00       	ld.sh	r0,r0[0x0]
800044ba:	78 40       	ld.w	r0,r12[0x10]
800044bc:	80 00       	ld.sh	r0,r0[0x0]
800044be:	77 04       	ld.w	r4,r11[0x40]
800044c0:	80 00       	ld.sh	r0,r0[0x0]
800044c2:	76 00       	ld.w	r0,r11[0x0]
800044c4:	80 00       	ld.sh	r0,r0[0x0]
800044c6:	77 12       	ld.w	r2,r11[0x44]
800044c8:	80 00       	ld.sh	r0,r0[0x0]
800044ca:	77 20       	ld.w	r0,r11[0x48]
800044cc:	80 00       	ld.sh	r0,r0[0x0]
800044ce:	77 2e       	ld.w	lr,r11[0x48]

800044d0 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800044d0:	eb cd 40 80 	pushm	r7,lr
800044d4:	1a 97       	mov	r7,sp
800044d6:	20 1d       	sub	sp,4
800044d8:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800044dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044e0:	e6 18 00 01 	andh	r8,0x1,COH
800044e4:	5f 08       	sreq	r8
800044e6:	5c 58       	castu.b	r8
}
800044e8:	10 9c       	mov	r12,r8
800044ea:	2f fd       	sub	sp,-4
800044ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800044f0 <pm_set_mclk_source>:
/**
 ** Clock Functions
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
800044f0:	eb cd 40 80 	pushm	r7,lr
800044f4:	1a 97       	mov	r7,sp
800044f6:	20 2d       	sub	sp,8
800044f8:	ef 4c ff f8 	st.w	r7[-8],r12
  // Unlock the write-protected MCCTRL register
  AVR32_ENTER_CRITICAL_REGION( );
800044fc:	e1 b8 00 00 	mfsr	r8,0x0
80004500:	10 9c       	mov	r12,r8
80004502:	f0 1f 00 0f 	mcall	8000453c <pm_set_mclk_source+0x4c>
80004506:	18 98       	mov	r8,r12
80004508:	ef 68 ff ff 	st.b	r7[-1],r8
8000450c:	d3 03       	ssrf	0x10
  PM_UNLOCK(AVR32_PM_MCCTRL);
8000450e:	fe 78 04 00 	mov	r8,-64512
80004512:	fc 19 aa 00 	movh	r9,0xaa00
80004516:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.mcctrl = src;
8000451a:	fe 78 04 00 	mov	r8,-64512
8000451e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004522:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80004524:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004528:	30 08       	mov	r8,0
8000452a:	f0 09 18 00 	cp.b	r9,r8
8000452e:	c0 20       	breq	80004532 <pm_set_mclk_source+0x42>
80004530:	d5 03       	csrf	0x10

  return PASS;
80004532:	30 08       	mov	r8,0
}
80004534:	10 9c       	mov	r12,r8
80004536:	2f ed       	sub	sp,-8
80004538:	e3 cd 80 80 	ldm	sp++,r7,pc
8000453c:	80 00       	ld.sh	r0,r0[0x0]
8000453e:	44 d0       	lddsp	r0,sp[0x134]

80004540 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004540:	eb cd 40 80 	pushm	r7,lr
80004544:	1a 97       	mov	r7,sp
80004546:	20 1d       	sub	sp,4
80004548:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000454c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004550:	e6 18 00 01 	andh	r8,0x1,COH
80004554:	5f 08       	sreq	r8
80004556:	5c 58       	castu.b	r8
}
80004558:	10 9c       	mov	r12,r8
8000455a:	2f fd       	sub	sp,-4
8000455c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004560 <scif_start_rc8M>:
/**
 ** 8MHz RCosc Functions
 **/

void scif_start_rc8M(void)
{
80004560:	eb cd 40 80 	pushm	r7,lr
80004564:	1a 97       	mov	r7,sp
80004566:	20 3d       	sub	sp,12
  unsigned int* calibration_bits = (unsigned int*)0x80800200;
80004568:	e0 68 02 00 	mov	r8,512
8000456c:	ea 18 80 80 	orh	r8,0x8080
80004570:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned long tmp1;
  
  AVR32_ENTER_CRITICAL_REGION( );
80004574:	e1 b8 00 00 	mfsr	r8,0x0
80004578:	10 9c       	mov	r12,r8
8000457a:	f0 1f 00 19 	mcall	800045dc <scif_start_rc8M+0x7c>
8000457e:	18 98       	mov	r8,r12
80004580:	ef 68 ff ff 	st.b	r7[-1],r8
80004584:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
80004586:	fe 78 08 00 	mov	r8,-63488
8000458a:	34 89       	mov	r9,72
8000458c:	ea 19 aa 00 	orh	r9,0xaa00
80004590:	91 69       	st.w	r8[0x18],r9
   * NOTE: Datasheet says that LS byte is for 8MHz at 3.3V, and byte[2] is for 8MHz at 5V so that's the one we really want 7apr15
   */
  
//debug AVR32_SCIF.rccr8 = AVR32_SCIF_RCCR8_RCOSC8_EN_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);

  tmp1 = (*calibration_bits);				//read calibration info from flash
80004592:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004596:	70 08       	ld.w	r8,r8[0x0]
80004598:	ef 48 ff f8 	st.w	r7[-8],r8
  tmp1 >>= 16;								//shift down by 16 to get byte[2] 7apr15
8000459c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045a0:	b1 88       	lsr	r8,0x10
800045a2:	ef 48 ff f8 	st.w	r7[-8],r8
  tmp1 &= AVR32_SCIF_RCCR8_CALIB_MASK;		//7apr15
800045a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045aa:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800045ae:	ef 48 ff f8 	st.w	r7[-8],r8
  tmp1 |= AVR32_SCIF_RCCR8_RCOSC8_EN_MASK;  //7apr15
800045b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045b6:	b9 a8       	sbr	r8,0x18
800045b8:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_SCIF.rccr8 = tmp1;
800045bc:	fe 78 08 00 	mov	r8,-63488
800045c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800045c4:	f1 49 00 48 	st.w	r8[72],r9
  
  AVR32_LEAVE_CRITICAL_REGION( );
800045c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800045cc:	30 08       	mov	r8,0
800045ce:	f0 09 18 00 	cp.b	r9,r8
800045d2:	c0 20       	breq	800045d6 <scif_start_rc8M+0x76>
800045d4:	d5 03       	csrf	0x10
}
800045d6:	2f dd       	sub	sp,-12
800045d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800045dc:	80 00       	ld.sh	r0,r0[0x0]
800045de:	45 40       	lddsp	r0,sp[0x150]

800045e0 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
800045e0:	eb cd 40 80 	pushm	r7,lr
800045e4:	1a 97       	mov	r7,sp
800045e6:	20 2d       	sub	sp,8
800045e8:	ef 4c ff fc 	st.w	r7[-4],r12
800045ec:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800045f0:	fe 78 08 00 	mov	r8,-63488
800045f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800045f8:	2e 79       	sub	r9,-25
800045fa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800045fe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004602:	5c 58       	castu.b	r8
80004604:	c0 30       	breq	8000460a <scif_start_gclk+0x2a>
    return -1;
80004606:	3f f8       	mov	r8,-1
80004608:	c2 08       	rjmp	80004648 <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8000460a:	fe 78 08 00 	mov	r8,-63488
8000460e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004612:	ee fa ff f8 	ld.w	r10,r7[-8]
80004616:	74 1a       	ld.w	r10,r10[0x4]
80004618:	b1 6a       	lsl	r10,0x10
8000461a:	14 9b       	mov	r11,r10
8000461c:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
80004620:	ee fa ff f8 	ld.w	r10,r7[-8]
80004624:	74 2a       	ld.w	r10,r10[0x8]
80004626:	a1 7a       	lsl	r10,0x1
80004628:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8000462c:	14 4b       	or	r11,r10
8000462e:	ee fa ff f8 	ld.w	r10,r7[-8]
80004632:	74 0a       	ld.w	r10,r10[0x0]
80004634:	a9 6a       	lsl	r10,0x8
80004636:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
8000463a:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8000463e:	a1 aa       	sbr	r10,0x0
80004640:	2e 79       	sub	r9,-25
80004642:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
80004646:	30 08       	mov	r8,0
}
80004648:	10 9c       	mov	r12,r8
8000464a:	2f ed       	sub	sp,-8
8000464c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004650 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80004650:	eb cd 40 80 	pushm	r7,lr
80004654:	1a 97       	mov	r7,sp
80004656:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004658:	e1 b8 00 00 	mfsr	r8,0x0
8000465c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80004660:	d3 03       	ssrf	0x10

	return flags;
80004662:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80004666:	10 9c       	mov	r12,r8
80004668:	2f fd       	sub	sp,-4
8000466a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000466e <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8000466e:	eb cd 40 80 	pushm	r7,lr
80004672:	1a 97       	mov	r7,sp
80004674:	20 1d       	sub	sp,4
80004676:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000467a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000467e:	e6 18 00 01 	andh	r8,0x1,COH
80004682:	5f 08       	sreq	r8
80004684:	5c 58       	castu.b	r8
}
80004686:	10 9c       	mov	r12,r8
80004688:	2f fd       	sub	sp,-4
8000468a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000468e:	d7 03       	nop

80004690 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80004690:	eb cd 40 80 	pushm	r7,lr
80004694:	1a 97       	mov	r7,sp
80004696:	20 1d       	sub	sp,4
80004698:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000469c:	ee fc ff fc 	ld.w	r12,r7[-4]
800046a0:	f0 1f 00 05 	mcall	800046b4 <cpu_irq_restore+0x24>
800046a4:	18 98       	mov	r8,r12
800046a6:	58 08       	cp.w	r8,0
800046a8:	c0 20       	breq	800046ac <cpu_irq_restore+0x1c>
      cpu_irq_enable();
800046aa:	d5 03       	csrf	0x10
   }

	barrier();
}
800046ac:	2f fd       	sub	sp,-4
800046ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800046b2:	00 00       	add	r0,r0
800046b4:	80 00       	ld.sh	r0,r0[0x0]
800046b6:	46 6e       	lddsp	lr,sp[0x198]

800046b8 <twim_master_interrupt_handler>:
/**
 * \internal
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
800046b8:	eb cd 40 80 	pushm	r7,lr
800046bc:	1a 97       	mov	r7,sp
800046be:	20 1d       	sub	sp,4
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
800046c0:	4c 68       	lddpc	r8,800047d8 <twim_master_interrupt_handler+0x120>
800046c2:	70 08       	ld.w	r8,r8[0x0]
800046c4:	70 79       	ld.w	r9,r8[0x1c]
800046c6:	4c 68       	lddpc	r8,800047dc <twim_master_interrupt_handler+0x124>
800046c8:	70 08       	ld.w	r8,r8[0x0]
800046ca:	f3 e8 00 08 	and	r8,r9,r8
800046ce:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
800046d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046d6:	e2 18 07 00 	andl	r8,0x700,COH
800046da:	c1 e0       	breq	80004716 <twim_master_interrupt_handler+0x5e>
		//if we get a nak, clear the valid bit in cmdr,
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ?
800046dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046e0:	e2 18 03 00 	andl	r8,0x300,COH
800046e4:	c0 30       	breq	800046ea <twim_master_interrupt_handler+0x32>
800046e6:	3f c8       	mov	r8,-4
800046e8:	c0 28       	rjmp	800046ec <twim_master_interrupt_handler+0x34>
800046ea:	3f e8       	mov	r8,-2
800046ec:	4b d9       	lddpc	r9,800047e0 <twim_master_interrupt_handler+0x128>
800046ee:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
800046f0:	4b a8       	lddpc	r8,800047d8 <twim_master_interrupt_handler+0x120>
800046f2:	70 09       	ld.w	r9,r8[0x0]
800046f4:	72 38       	ld.w	r8,r9[0xc]
800046f6:	30 0a       	mov	r10,0
800046f8:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
800046fc:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
800046fe:	4b 78       	lddpc	r8,800047d8 <twim_master_interrupt_handler+0x120>
80004700:	70 08       	ld.w	r8,r8[0x0]
80004702:	3f f9       	mov	r9,-1
80004704:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80004706:	4b 58       	lddpc	r8,800047d8 <twim_master_interrupt_handler+0x120>
80004708:	70 08       	ld.w	r8,r8[0x0]
8000470a:	3f f9       	mov	r9,-1
8000470c:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
8000470e:	4b 69       	lddpc	r9,800047e4 <twim_master_interrupt_handler+0x12c>
80004710:	30 08       	mov	r8,0
80004712:	b2 88       	st.b	r9[0x0],r8
80004714:	c5 e8       	rjmp	800047d0 <twim_master_interrupt_handler+0x118>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80004716:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000471a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000471e:	5c 58       	castu.b	r8
80004720:	c2 00       	breq	80004760 <twim_master_interrupt_handler+0xa8>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80004722:	4b 28       	lddpc	r8,800047e8 <twim_master_interrupt_handler+0x130>
80004724:	70 09       	ld.w	r9,r8[0x0]
80004726:	4a d8       	lddpc	r8,800047d8 <twim_master_interrupt_handler+0x120>
80004728:	70 08       	ld.w	r8,r8[0x0]
8000472a:	70 58       	ld.w	r8,r8[0x14]
8000472c:	5c 58       	castu.b	r8
8000472e:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80004730:	4a e8       	lddpc	r8,800047e8 <twim_master_interrupt_handler+0x130>
80004732:	70 08       	ld.w	r8,r8[0x0]
80004734:	f0 c9 ff ff 	sub	r9,r8,-1
80004738:	4a c8       	lddpc	r8,800047e8 <twim_master_interrupt_handler+0x130>
8000473a:	91 09       	st.w	r8[0x0],r9
		// decrease received bytes number
		twim_rx_nb_bytes--;
8000473c:	4a c8       	lddpc	r8,800047ec <twim_master_interrupt_handler+0x134>
8000473e:	70 08       	ld.w	r8,r8[0x0]
80004740:	f0 c9 00 01 	sub	r9,r8,1
80004744:	4a a8       	lddpc	r8,800047ec <twim_master_interrupt_handler+0x134>
80004746:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80004748:	4a 98       	lddpc	r8,800047ec <twim_master_interrupt_handler+0x134>
8000474a:	70 08       	ld.w	r8,r8[0x0]
8000474c:	58 08       	cp.w	r8,0
8000474e:	c4 11       	brne	800047d0 <twim_master_interrupt_handler+0x118>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80004750:	4a 28       	lddpc	r8,800047d8 <twim_master_interrupt_handler+0x120>
80004752:	70 08       	ld.w	r8,r8[0x0]
80004754:	30 19       	mov	r9,1
80004756:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80004758:	4a 39       	lddpc	r9,800047e4 <twim_master_interrupt_handler+0x12c>
8000475a:	30 08       	mov	r8,0
8000475c:	b2 88       	st.b	r9[0x0],r8
8000475e:	c3 98       	rjmp	800047d0 <twim_master_interrupt_handler+0x118>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80004760:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004764:	e2 18 00 02 	andl	r8,0x2,COH
80004768:	c3 40       	breq	800047d0 <twim_master_interrupt_handler+0x118>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
8000476a:	4a 28       	lddpc	r8,800047f0 <twim_master_interrupt_handler+0x138>
8000476c:	70 08       	ld.w	r8,r8[0x0]
8000476e:	58 08       	cp.w	r8,0
80004770:	c0 91       	brne	80004782 <twim_master_interrupt_handler+0xca>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80004772:	49 a8       	lddpc	r8,800047d8 <twim_master_interrupt_handler+0x120>
80004774:	70 08       	ld.w	r8,r8[0x0]
80004776:	30 29       	mov	r9,2
80004778:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8000477a:	49 b9       	lddpc	r9,800047e4 <twim_master_interrupt_handler+0x12c>
8000477c:	30 08       	mov	r8,0
8000477e:	b2 88       	st.b	r9[0x0],r8
80004780:	c2 88       	rjmp	800047d0 <twim_master_interrupt_handler+0x118>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80004782:	49 68       	lddpc	r8,800047d8 <twim_master_interrupt_handler+0x120>
80004784:	70 0a       	ld.w	r10,r8[0x0]
80004786:	49 c8       	lddpc	r8,800047f4 <twim_master_interrupt_handler+0x13c>
80004788:	70 08       	ld.w	r8,r8[0x0]
8000478a:	11 89       	ld.ub	r9,r8[0x0]
8000478c:	5c 59       	castu.b	r9
8000478e:	95 69       	st.w	r10[0x18],r9
80004790:	f0 c9 ff ff 	sub	r9,r8,-1
80004794:	49 88       	lddpc	r8,800047f4 <twim_master_interrupt_handler+0x13c>
80004796:	91 09       	st.w	r8[0x0],r9
			// decrease transmitted bytes number
			twim_tx_nb_bytes--;
80004798:	49 68       	lddpc	r8,800047f0 <twim_master_interrupt_handler+0x138>
8000479a:	70 08       	ld.w	r8,r8[0x0]
8000479c:	f0 c9 00 01 	sub	r9,r8,1
800047a0:	49 48       	lddpc	r8,800047f0 <twim_master_interrupt_handler+0x138>
800047a2:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
800047a4:	49 38       	lddpc	r8,800047f0 <twim_master_interrupt_handler+0x138>
800047a6:	70 08       	ld.w	r8,r8[0x0]
800047a8:	58 08       	cp.w	r8,0
800047aa:	c1 31       	brne	800047d0 <twim_master_interrupt_handler+0x118>
				// Check for next transfer
				if(twim_next) {
800047ac:	48 e8       	lddpc	r8,800047e4 <twim_master_interrupt_handler+0x12c>
800047ae:	11 88       	ld.ub	r8,r8[0x0]
800047b0:	5c 58       	castu.b	r8
800047b2:	c0 f0       	breq	800047d0 <twim_master_interrupt_handler+0x118>
					twim_next = false;
800047b4:	48 c9       	lddpc	r9,800047e4 <twim_master_interrupt_handler+0x12c>
800047b6:	30 08       	mov	r8,0
800047b8:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
800047ba:	49 08       	lddpc	r8,800047f8 <twim_master_interrupt_handler+0x140>
800047bc:	70 08       	ld.w	r8,r8[0x0]
800047be:	70 39       	ld.w	r9,r8[0xc]
800047c0:	48 c8       	lddpc	r8,800047f0 <twim_master_interrupt_handler+0x138>
800047c2:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
800047c4:	48 d8       	lddpc	r8,800047f8 <twim_master_interrupt_handler+0x140>
800047c6:	70 08       	ld.w	r8,r8[0x0]
800047c8:	70 28       	ld.w	r8,r8[0x8]
800047ca:	10 99       	mov	r9,r8
800047cc:	48 a8       	lddpc	r8,800047f4 <twim_master_interrupt_handler+0x13c>
800047ce:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
800047d0:	2f fd       	sub	sp,-4
800047d2:	e3 cd 40 80 	ldm	sp++,r7,lr
800047d6:	d6 03       	rete
800047d8:	00 00       	add	r0,r0
800047da:	02 8c       	andn	r12,r1
800047dc:	00 00       	add	r0,r0
800047de:	02 a4       	st.w	r1++,r4
800047e0:	00 00       	add	r0,r0
800047e2:	02 98       	mov	r8,r1
800047e4:	00 00       	add	r0,r0
800047e6:	02 ac       	st.w	r1++,r12
800047e8:	00 00       	add	r0,r0
800047ea:	02 94       	mov	r4,r1
800047ec:	00 00       	add	r0,r0
800047ee:	02 a0       	st.w	r1++,r0
800047f0:	00 00       	add	r0,r0
800047f2:	02 9c       	mov	r12,r1
800047f4:	00 00       	add	r0,r0
800047f6:	02 90       	mov	r0,r1
800047f8:	00 00       	add	r0,r0
800047fa:	02 a8       	st.w	r1++,r8

800047fc <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
800047fc:	eb cd 40 80 	pushm	r7,lr
80004800:	1a 97       	mov	r7,sp
80004802:	20 5d       	sub	sp,20
80004804:	ef 4c ff f4 	st.w	r7[-12],r12
80004808:	ef 4b ff f0 	st.w	r7[-16],r11
8000480c:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
80004810:	30 08       	mov	r8,0
80004812:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
80004816:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000481a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000481e:	f0 09 0d 08 	divu	r8,r8,r9
80004822:	a1 98       	lsr	r8,0x1
80004824:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80004828:	c0 b8       	rjmp	8000483e <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
8000482a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000482e:	2f f8       	sub	r8,-1
80004830:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
80004834:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004838:	a1 98       	lsr	r8,0x1
8000483a:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8000483e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004842:	e0 48 00 ff 	cp.w	r8,255
80004846:	e0 88 00 09 	brls	80004858 <twim_set_speed+0x5c>
8000484a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000484e:	30 78       	mov	r8,7
80004850:	f0 09 18 00 	cp.b	r9,r8
80004854:	fe 98 ff eb 	brls	8000482a <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80004858:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000485c:	30 78       	mov	r8,7
8000485e:	f0 09 18 00 	cp.b	r9,r8
80004862:	e0 88 00 04 	brls	8000486a <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
80004866:	3f 88       	mov	r8,-8
80004868:	c1 a8       	rjmp	8000489c <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8000486a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000486e:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80004872:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004876:	a1 98       	lsr	r8,0x1
80004878:	ee fa ff f8 	ld.w	r10,r7[-8]
8000487c:	f4 08 01 08 	sub	r8,r10,r8
80004880:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
80004882:	10 49       	or	r9,r8
80004884:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004888:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
8000488a:	10 49       	or	r9,r8
8000488c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004890:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80004892:	10 49       	or	r9,r8
80004894:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004898:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
8000489a:	30 08       	mov	r8,0
}
8000489c:	10 9c       	mov	r12,r8
8000489e:	2f bd       	sub	sp,-20
800048a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800048a4 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
800048a4:	eb cd 40 80 	pushm	r7,lr
800048a8:	1a 97       	mov	r7,sp
800048aa:	20 4d       	sub	sp,16
800048ac:	ef 4c ff f4 	st.w	r7[-12],r12
800048b0:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
800048b4:	e1 b8 00 00 	mfsr	r8,0x0
800048b8:	10 9c       	mov	r12,r8
800048ba:	f0 1f 00 37 	mcall	80004994 <twim_master_init+0xf0>
800048be:	18 98       	mov	r8,r12
800048c0:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
800048c4:	4b 58       	lddpc	r8,80004998 <twim_master_init+0xf4>
800048c6:	30 09       	mov	r9,0
800048c8:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
800048ca:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800048ce:	30 08       	mov	r8,0
800048d0:	f0 09 18 00 	cp.b	r9,r8
800048d4:	c0 20       	breq	800048d8 <twim_master_init+0x34>
		cpu_irq_disable ();
800048d6:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
800048d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048dc:	3f f9       	mov	r9,-1
800048de:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800048e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048e4:	30 19       	mov	r9,1
800048e6:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800048e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048ec:	e0 69 00 80 	mov	r9,128
800048f0:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
800048f2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800048f6:	30 08       	mov	r8,0
800048f8:	f0 09 18 00 	cp.b	r9,r8
800048fc:	c0 20       	breq	80004900 <twim_master_init+0x5c>
		cpu_irq_enable ();
800048fe:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80004900:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004904:	3f f9       	mov	r9,-1
80004906:	91 b9       	st.w	r8[0x2c],r9

	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
80004908:	f0 1f 00 25 	mcall	8000499c <twim_master_init+0xf8>
8000490c:	18 98       	mov	r8,r12
8000490e:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
80004912:	30 1a       	mov	r10,1
80004914:	e0 6b 03 20 	mov	r11,800
80004918:	4a 2c       	lddpc	r12,800049a0 <twim_master_init+0xfc>
8000491a:	f0 1f 00 23 	mcall	800049a4 <twim_master_init+0x100>
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
8000491e:	ee fc ff fc 	ld.w	r12,r7[-4]
80004922:	f0 1f 00 22 	mcall	800049a8 <twim_master_init+0x104>

	if (opt->smbus) {
80004926:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000492a:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000492e:	58 08       	cp.w	r8,0
80004930:	c0 90       	breq	80004942 <twim_master_init+0x9e>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80004932:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004936:	31 09       	mov	r9,16
80004938:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
8000493a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000493e:	3f f9       	mov	r9,-1
80004940:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) ==
80004942:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004946:	70 09       	ld.w	r9,r8[0x0]
80004948:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000494c:	70 18       	ld.w	r8,r8[0x4]
8000494e:	12 9a       	mov	r10,r9
80004950:	10 9b       	mov	r11,r8
80004952:	ee fc ff f4 	ld.w	r12,r7[-12]
80004956:	f0 1f 00 16 	mcall	800049ac <twim_master_init+0x108>
8000495a:	18 98       	mov	r8,r12
8000495c:	5b 88       	cp.w	r8,-8
8000495e:	c0 31       	brne	80004964 <twim_master_init+0xc0>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
80004960:	3f 88       	mov	r8,-8
80004962:	c1 48       	rjmp	8000498a <twim_master_init+0xe6>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80004964:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004968:	70 28       	ld.w	r8,r8[0x8]
8000496a:	10 9b       	mov	r11,r8
8000496c:	ee fc ff f4 	ld.w	r12,r7[-12]
80004970:	f0 1f 00 10 	mcall	800049b0 <twim_master_init+0x10c>
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004974:	48 98       	lddpc	r8,80004998 <twim_master_init+0xf4>
80004976:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80004978:	5b c8       	cp.w	r8,-4
8000497a:	c0 50       	breq	80004984 <twim_master_init+0xe0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8000497c:	48 78       	lddpc	r8,80004998 <twim_master_init+0xf4>
8000497e:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and arbitration
	if (transfer_status == TWI_RECEIVE_NACK
80004980:	5b e8       	cp.w	r8,-2
80004982:	c0 31       	brne	80004988 <twim_master_init+0xe4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80004984:	3f f8       	mov	r8,-1
80004986:	c0 28       	rjmp	8000498a <twim_master_init+0xe6>
	}
	return STATUS_OK;
80004988:	30 08       	mov	r8,0
}
8000498a:	10 9c       	mov	r12,r8
8000498c:	2f cd       	sub	sp,-16
8000498e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004992:	00 00       	add	r0,r0
80004994:	80 00       	ld.sh	r0,r0[0x0]
80004996:	46 6e       	lddsp	lr,sp[0x198]
80004998:	00 00       	add	r0,r0
8000499a:	02 98       	mov	r8,r1
8000499c:	80 00       	ld.sh	r0,r0[0x0]
8000499e:	46 50       	lddsp	r0,sp[0x194]
800049a0:	80 00       	ld.sh	r0,r0[0x0]
800049a2:	46 b8       	lddsp	r8,sp[0x1ac]
800049a4:	80 00       	ld.sh	r0,r0[0x0]
800049a6:	43 fc       	lddsp	r12,sp[0xfc]
800049a8:	80 00       	ld.sh	r0,r0[0x0]
800049aa:	46 90       	lddsp	r0,sp[0x1a4]
800049ac:	80 00       	ld.sh	r0,r0[0x0]
800049ae:	47 fc       	lddsp	r12,sp[0x1fc]
800049b0:	80 00       	ld.sh	r0,r0[0x0]
800049b2:	49 f8       	lddpc	r8,80004a2c <twim_probe+0x34>

800049b4 <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
800049b4:	eb cd 40 80 	pushm	r7,lr
800049b8:	1a 97       	mov	r7,sp
800049ba:	20 2d       	sub	sp,8
800049bc:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
800049c0:	e1 b8 00 00 	mfsr	r8,0x0
800049c4:	10 9c       	mov	r12,r8
800049c6:	f0 1f 00 0c 	mcall	800049f4 <twim_disable_interrupt+0x40>
800049ca:	18 98       	mov	r8,r12
800049cc:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
800049d0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800049d4:	30 08       	mov	r8,0
800049d6:	f0 09 18 00 	cp.b	r9,r8
800049da:	c0 20       	breq	800049de <twim_disable_interrupt+0x2a>
		cpu_irq_disable ();
800049dc:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
800049de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049e2:	3f f9       	mov	r9,-1
800049e4:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
800049e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049ea:	3f f9       	mov	r9,-1
800049ec:	91 b9       	st.w	r8[0x2c],r9
}
800049ee:	2f ed       	sub	sp,-8
800049f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800049f4:	80 00       	ld.sh	r0,r0[0x0]
800049f6:	46 6e       	lddsp	lr,sp[0x198]

800049f8 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
800049f8:	eb cd 40 80 	pushm	r7,lr
800049fc:	1a 97       	mov	r7,sp
800049fe:	20 3d       	sub	sp,12
80004a00:	ef 4c ff f8 	st.w	r7[-8],r12
80004a04:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
80004a08:	30 08       	mov	r8,0
80004a0a:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
80004a0e:	ee cb 00 04 	sub	r11,r7,4
80004a12:	30 08       	mov	r8,0
80004a14:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004a18:	30 0a       	mov	r10,0
80004a1a:	ee fc ff f8 	ld.w	r12,r7[-8]
80004a1e:	f0 1f 00 04 	mcall	80004a2c <twim_probe+0x34>
80004a22:	18 98       	mov	r8,r12
}
80004a24:	10 9c       	mov	r12,r8
80004a26:	2f dd       	sub	sp,-12
80004a28:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a2c:	80 00       	ld.sh	r0,r0[0x0]
80004a2e:	4c e8       	lddpc	r8,80004b64 <twim_read_packet+0x134>

80004a30 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80004a30:	eb cd 40 80 	pushm	r7,lr
80004a34:	1a 97       	mov	r7,sp
80004a36:	20 2d       	sub	sp,8
80004a38:	ef 4c ff fc 	st.w	r7[-4],r12
80004a3c:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80004a40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a44:	30 29       	mov	r9,2
80004a46:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80004a48:	4c f8       	lddpc	r8,80004b84 <twim_read_packet+0x154>
80004a4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004a4e:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80004a50:	4c d8       	lddpc	r8,80004b84 <twim_read_packet+0x154>
80004a52:	70 08       	ld.w	r8,r8[0x0]
80004a54:	10 9c       	mov	r12,r8
80004a56:	f0 1f 00 4d 	mcall	80004b88 <twim_read_packet+0x158>
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80004a5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a5e:	70 28       	ld.w	r8,r8[0x8]
80004a60:	10 99       	mov	r9,r8
80004a62:	4c b8       	lddpc	r8,80004b8c <twim_read_packet+0x15c>
80004a64:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
80004a66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a6a:	70 39       	ld.w	r9,r8[0xc]
80004a6c:	4c 98       	lddpc	r8,80004b90 <twim_read_packet+0x160>
80004a6e:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80004a70:	4c 99       	lddpc	r9,80004b94 <twim_read_packet+0x164>
80004a72:	30 08       	mov	r8,0
80004a74:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80004a76:	4c 98       	lddpc	r8,80004b98 <twim_read_packet+0x168>
80004a78:	30 09       	mov	r9,0
80004a7a:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
80004a7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a80:	11 f8       	ld.ub	r8,r8[0x7]
80004a82:	58 08       	cp.w	r8,0
80004a84:	c3 f0       	breq	80004b02 <twim_read_packet+0xd2>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80004a86:	4c 08       	lddpc	r8,80004b84 <twim_read_packet+0x154>
80004a88:	70 08       	ld.w	r8,r8[0x0]
80004a8a:	30 19       	mov	r9,1
80004a8c:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
80004a8e:	4b e8       	lddpc	r8,80004b84 <twim_read_packet+0x154>
80004a90:	70 08       	ld.w	r8,r8[0x0]
80004a92:	e0 69 00 80 	mov	r9,128
80004a96:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80004a98:	4b b8       	lddpc	r8,80004b84 <twim_read_packet+0x154>
80004a9a:	70 08       	ld.w	r8,r8[0x0]
80004a9c:	30 29       	mov	r9,2
80004a9e:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80004aa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aa4:	2f c8       	sub	r8,-4
80004aa6:	10 99       	mov	r9,r8
80004aa8:	4b d8       	lddpc	r8,80004b9c <twim_read_packet+0x16c>
80004aaa:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80004aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ab0:	11 f8       	ld.ub	r8,r8[0x7]
80004ab2:	10 99       	mov	r9,r8
80004ab4:	4b b8       	lddpc	r8,80004ba0 <twim_read_packet+0x170>
80004ab6:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
80004ab8:	4b b8       	lddpc	r8,80004ba4 <twim_read_packet+0x174>
80004aba:	e0 69 07 03 	mov	r9,1795
80004abe:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80004ac0:	4b 18       	lddpc	r8,80004b84 <twim_read_packet+0x154>
80004ac2:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80004ac4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004ac8:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80004aca:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80004ace:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004ad2:	13 f9       	ld.ub	r9,r9[0x7]
80004ad4:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80004ad6:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK |
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80004ada:	e8 19 a0 00 	orl	r9,0xa000
80004ade:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80004ae0:	4a 98       	lddpc	r8,80004b84 <twim_read_packet+0x154>
80004ae2:	70 08       	ld.w	r8,r8[0x0]
80004ae4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004ae8:	72 09       	ld.w	r9,r9[0x0]
80004aea:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80004aee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004af2:	72 39       	ld.w	r9,r9[0xc]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80004af4:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80004af6:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80004afa:	e8 19 e0 01 	orl	r9,0xe001
80004afe:	91 49       	st.w	r8[0x10],r9
80004b00:	c1 88       	rjmp	80004b30 <twim_read_packet+0x100>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
80004b02:	4a 88       	lddpc	r8,80004ba0 <twim_read_packet+0x170>
80004b04:	30 09       	mov	r9,0
80004b06:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
80004b08:	4a 78       	lddpc	r8,80004ba4 <twim_read_packet+0x174>
80004b0a:	e0 69 07 01 	mov	r9,1793
80004b0e:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80004b10:	49 d8       	lddpc	r8,80004b84 <twim_read_packet+0x154>
80004b12:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80004b14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004b18:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80004b1a:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80004b1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004b22:	72 39       	ld.w	r9,r9[0xc]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80004b24:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80004b26:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80004b2a:	e8 19 e0 01 	orl	r9,0xe001
80004b2e:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80004b30:	49 58       	lddpc	r8,80004b84 <twim_read_packet+0x154>
80004b32:	70 08       	ld.w	r8,r8[0x0]
80004b34:	49 c9       	lddpc	r9,80004ba4 <twim_read_packet+0x174>
80004b36:	72 09       	ld.w	r9,r9[0x0]
80004b38:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80004b3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b3e:	30 19       	mov	r9,1
80004b40:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
80004b42:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80004b44:	c0 38       	rjmp	80004b4a <twim_read_packet+0x11a>
		cpu_relax();
80004b46:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
80004b4a:	49 48       	lddpc	r8,80004b98 <twim_read_packet+0x168>
80004b4c:	70 08       	ld.w	r8,r8[0x0]
80004b4e:	58 08       	cp.w	r8,0
80004b50:	c0 61       	brne	80004b5c <twim_read_packet+0x12c>
80004b52:	f0 1f 00 16 	mcall	80004ba8 <twim_read_packet+0x178>
80004b56:	18 98       	mov	r8,r12
80004b58:	58 08       	cp.w	r8,0
80004b5a:	cf 60       	breq	80004b46 <twim_read_packet+0x116>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80004b5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b60:	30 29       	mov	r9,2
80004b62:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004b64:	48 d8       	lddpc	r8,80004b98 <twim_read_packet+0x168>
80004b66:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80004b68:	5b c8       	cp.w	r8,-4
80004b6a:	c0 50       	breq	80004b74 <twim_read_packet+0x144>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004b6c:	48 b8       	lddpc	r8,80004b98 <twim_read_packet+0x168>
80004b6e:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
80004b70:	5b e8       	cp.w	r8,-2
80004b72:	c0 31       	brne	80004b78 <twim_read_packet+0x148>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80004b74:	3f f8       	mov	r8,-1
80004b76:	c0 28       	rjmp	80004b7a <twim_read_packet+0x14a>
	}
	return STATUS_OK;
80004b78:	30 08       	mov	r8,0
}
80004b7a:	10 9c       	mov	r12,r8
80004b7c:	2f ed       	sub	sp,-8
80004b7e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b82:	00 00       	add	r0,r0
80004b84:	00 00       	add	r0,r0
80004b86:	02 8c       	andn	r12,r1
80004b88:	80 00       	ld.sh	r0,r0[0x0]
80004b8a:	49 b4       	lddpc	r4,80004bf4 <twim_write_packet+0x48>
80004b8c:	00 00       	add	r0,r0
80004b8e:	02 94       	mov	r4,r1
80004b90:	00 00       	add	r0,r0
80004b92:	02 a0       	st.w	r1++,r0
80004b94:	00 00       	add	r0,r0
80004b96:	02 ac       	st.w	r1++,r12
80004b98:	00 00       	add	r0,r0
80004b9a:	02 98       	mov	r8,r1
80004b9c:	00 00       	add	r0,r0
80004b9e:	02 90       	mov	r0,r1
80004ba0:	00 00       	add	r0,r0
80004ba2:	02 9c       	mov	r12,r1
80004ba4:	00 00       	add	r0,r0
80004ba6:	02 a4       	st.w	r1++,r4
80004ba8:	80 00       	ld.sh	r0,r0[0x0]
80004baa:	4d ec       	lddpc	r12,80004d20 <twim_write+0x38>

80004bac <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80004bac:	eb cd 40 80 	pushm	r7,lr
80004bb0:	1a 97       	mov	r7,sp
80004bb2:	20 2d       	sub	sp,8
80004bb4:	ef 4c ff fc 	st.w	r7[-4],r12
80004bb8:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80004bbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bc0:	30 19       	mov	r9,1
80004bc2:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80004bc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bc8:	e0 69 00 80 	mov	r9,128
80004bcc:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80004bce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bd2:	30 29       	mov	r9,2
80004bd4:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80004bd6:	4b c8       	lddpc	r8,80004cc4 <twim_write_packet+0x118>
80004bd8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004bdc:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80004bde:	4b a8       	lddpc	r8,80004cc4 <twim_write_packet+0x118>
80004be0:	70 08       	ld.w	r8,r8[0x0]
80004be2:	10 9c       	mov	r12,r8
80004be4:	f0 1f 00 39 	mcall	80004cc8 <twim_write_packet+0x11c>
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80004be8:	4b 98       	lddpc	r8,80004ccc <twim_write_packet+0x120>
80004bea:	30 09       	mov	r9,0
80004bec:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80004bee:	4b 98       	lddpc	r8,80004cd0 <twim_write_packet+0x124>
80004bf0:	e0 69 07 02 	mov	r9,1794
80004bf4:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
80004bf6:	4b 89       	lddpc	r9,80004cd4 <twim_write_packet+0x128>
80004bf8:	30 08       	mov	r8,0
80004bfa:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
80004bfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c00:	11 f8       	ld.ub	r8,r8[0x7]
80004c02:	58 08       	cp.w	r8,0
80004c04:	c1 50       	breq	80004c2e <twim_write_packet+0x82>
		// selection of first valid byte of the address
		twim_tx_data = package->addr;
80004c06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c0a:	2f c8       	sub	r8,-4
80004c0c:	10 99       	mov	r9,r8
80004c0e:	4b 38       	lddpc	r8,80004cd8 <twim_write_packet+0x12c>
80004c10:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80004c12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c16:	11 f8       	ld.ub	r8,r8[0x7]
80004c18:	10 99       	mov	r9,r8
80004c1a:	4b 18       	lddpc	r8,80004cdc <twim_write_packet+0x130>
80004c1c:	91 09       	st.w	r8[0x0],r9
		// set next transfer to true
		twim_next = true;
80004c1e:	4a e9       	lddpc	r9,80004cd4 <twim_write_packet+0x128>
80004c20:	30 18       	mov	r8,1
80004c22:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
80004c24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c28:	4a e8       	lddpc	r8,80004ce0 <twim_write_packet+0x134>
80004c2a:	91 09       	st.w	r8[0x0],r9
80004c2c:	c0 c8       	rjmp	80004c44 <twim_write_packet+0x98>
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
80004c2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c32:	70 28       	ld.w	r8,r8[0x8]
80004c34:	10 99       	mov	r9,r8
80004c36:	4a 98       	lddpc	r8,80004cd8 <twim_write_packet+0x12c>
80004c38:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
80004c3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c3e:	70 39       	ld.w	r9,r8[0xc]
80004c40:	4a 78       	lddpc	r8,80004cdc <twim_write_packet+0x130>
80004c42:	91 09       	st.w	r8[0x0],r9
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| ((package->length + package->addr_length)
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
80004c44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c48:	70 08       	ld.w	r8,r8[0x0]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80004c4a:	f0 09 15 01 	lsl	r9,r8,0x1
			| ((package->length + package->addr_length)
80004c4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c52:	70 3a       	ld.w	r10,r8[0xc]
80004c54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c58:	11 f8       	ld.ub	r8,r8[0x7]
80004c5a:	f4 08 00 08 	add	r8,r10,r8
80004c5e:	b1 68       	lsl	r8,0x10
					<< AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
80004c60:	f3 e8 10 08 	or	r8,r9,r8
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	}
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80004c64:	10 99       	mov	r9,r8
80004c66:	e8 19 e0 00 	orl	r9,0xe000
80004c6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c6e:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80004c70:	49 58       	lddpc	r8,80004cc4 <twim_write_packet+0x118>
80004c72:	70 08       	ld.w	r8,r8[0x0]
80004c74:	49 79       	lddpc	r9,80004cd0 <twim_write_packet+0x124>
80004c76:	72 09       	ld.w	r9,r9[0x0]
80004c78:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80004c7a:	49 38       	lddpc	r8,80004cc4 <twim_write_packet+0x118>
80004c7c:	70 08       	ld.w	r8,r8[0x0]
80004c7e:	30 19       	mov	r9,1
80004c80:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
80004c82:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80004c84:	c0 38       	rjmp	80004c8a <twim_write_packet+0xde>
		cpu_relax();
80004c86:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80004c8a:	49 18       	lddpc	r8,80004ccc <twim_write_packet+0x120>
80004c8c:	70 08       	ld.w	r8,r8[0x0]
80004c8e:	58 08       	cp.w	r8,0
80004c90:	c0 61       	brne	80004c9c <twim_write_packet+0xf0>
80004c92:	f0 1f 00 15 	mcall	80004ce4 <twim_write_packet+0x138>
80004c96:	18 98       	mov	r8,r12
80004c98:	58 08       	cp.w	r8,0
80004c9a:	cf 60       	breq	80004c86 <twim_write_packet+0xda>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80004c9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ca0:	30 29       	mov	r9,2
80004ca2:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004ca4:	48 a8       	lddpc	r8,80004ccc <twim_write_packet+0x120>
80004ca6:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80004ca8:	5b c8       	cp.w	r8,-4
80004caa:	c0 50       	breq	80004cb4 <twim_write_packet+0x108>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004cac:	48 88       	lddpc	r8,80004ccc <twim_write_packet+0x120>
80004cae:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
80004cb0:	5b e8       	cp.w	r8,-2
80004cb2:	c0 31       	brne	80004cb8 <twim_write_packet+0x10c>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80004cb4:	3f f8       	mov	r8,-1
80004cb6:	c0 28       	rjmp	80004cba <twim_write_packet+0x10e>
	}
	return STATUS_OK;
80004cb8:	30 08       	mov	r8,0
}
80004cba:	10 9c       	mov	r12,r8
80004cbc:	2f ed       	sub	sp,-8
80004cbe:	e3 cd 80 80 	ldm	sp++,r7,pc
80004cc2:	00 00       	add	r0,r0
80004cc4:	00 00       	add	r0,r0
80004cc6:	02 8c       	andn	r12,r1
80004cc8:	80 00       	ld.sh	r0,r0[0x0]
80004cca:	49 b4       	lddpc	r4,80004d34 <twim_write+0x4c>
80004ccc:	00 00       	add	r0,r0
80004cce:	02 98       	mov	r8,r1
80004cd0:	00 00       	add	r0,r0
80004cd2:	02 a4       	st.w	r1++,r4
80004cd4:	00 00       	add	r0,r0
80004cd6:	02 ac       	st.w	r1++,r12
80004cd8:	00 00       	add	r0,r0
80004cda:	02 90       	mov	r0,r1
80004cdc:	00 00       	add	r0,r0
80004cde:	02 9c       	mov	r12,r1
80004ce0:	00 00       	add	r0,r0
80004ce2:	02 a8       	st.w	r1++,r8
80004ce4:	80 00       	ld.sh	r0,r0[0x0]
80004ce6:	4d ec       	lddpc	r12,80004e5c <usart_set_async_baudrate+0x20>

80004ce8 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
80004ce8:	eb cd 40 80 	pushm	r7,lr
80004cec:	1a 97       	mov	r7,sp
80004cee:	20 5d       	sub	sp,20
80004cf0:	ef 4c ff fc 	st.w	r7[-4],r12
80004cf4:	ef 4b ff f8 	st.w	r7[-8],r11
80004cf8:	ef 4a ff f4 	st.w	r7[-12],r10
80004cfc:	ef 49 ff f0 	st.w	r7[-16],r9
80004d00:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80004d04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d08:	30 19       	mov	r9,1
80004d0a:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80004d0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d10:	e0 69 00 80 	mov	r9,128
80004d14:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80004d16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d1a:	30 29       	mov	r9,2
80004d1c:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80004d1e:	4a c8       	lddpc	r8,80004dcc <twim_write+0xe4>
80004d20:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d24:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80004d26:	4a a8       	lddpc	r8,80004dcc <twim_write+0xe4>
80004d28:	70 08       	ld.w	r8,r8[0x0]
80004d2a:	10 9c       	mov	r12,r8
80004d2c:	f0 1f 00 29 	mcall	80004dd0 <twim_write+0xe8>
	// get a pointer to applicative data
	twim_tx_data = buffer;
80004d30:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004d34:	4a 88       	lddpc	r8,80004dd4 <twim_write+0xec>
80004d36:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
80004d38:	4a 88       	lddpc	r8,80004dd8 <twim_write+0xf0>
80004d3a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004d3e:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
80004d40:	4a 79       	lddpc	r9,80004ddc <twim_write+0xf4>
80004d42:	30 08       	mov	r8,0
80004d44:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80004d46:	4a 78       	lddpc	r8,80004de0 <twim_write+0xf8>
80004d48:	30 09       	mov	r9,0
80004d4a:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80004d4c:	4a 08       	lddpc	r8,80004dcc <twim_write+0xe4>
80004d4e:	70 08       	ld.w	r8,r8[0x0]
80004d50:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004d54:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80004d58:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004d5c:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
80004d5e:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
80004d60:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80004d64:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
80004d66:	f5 e9 10 09 	or	r9,r10,r9
80004d6a:	e8 19 e0 00 	orl	r9,0xe000
80004d6e:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
80004d70:	49 d8       	lddpc	r8,80004de4 <twim_write+0xfc>
80004d72:	e0 69 03 02 	mov	r9,770
80004d76:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80004d78:	49 58       	lddpc	r8,80004dcc <twim_write+0xe4>
80004d7a:	70 08       	ld.w	r8,r8[0x0]
80004d7c:	49 a9       	lddpc	r9,80004de4 <twim_write+0xfc>
80004d7e:	72 09       	ld.w	r9,r9[0x0]
80004d80:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80004d82:	49 38       	lddpc	r8,80004dcc <twim_write+0xe4>
80004d84:	70 08       	ld.w	r8,r8[0x0]
80004d86:	30 19       	mov	r9,1
80004d88:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
80004d8a:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80004d8c:	c0 38       	rjmp	80004d92 <twim_write+0xaa>
		cpu_relax();
80004d8e:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
80004d92:	49 48       	lddpc	r8,80004de0 <twim_write+0xf8>
80004d94:	70 08       	ld.w	r8,r8[0x0]
80004d96:	58 08       	cp.w	r8,0
80004d98:	c0 61       	brne	80004da4 <twim_write+0xbc>
80004d9a:	f0 1f 00 14 	mcall	80004de8 <twim_write+0x100>
80004d9e:	18 98       	mov	r8,r12
80004da0:	58 08       	cp.w	r8,0
80004da2:	cf 60       	breq	80004d8e <twim_write+0xa6>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80004da4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004da8:	30 29       	mov	r9,2
80004daa:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004dac:	48 d8       	lddpc	r8,80004de0 <twim_write+0xf8>
80004dae:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80004db0:	5b c8       	cp.w	r8,-4
80004db2:	c0 50       	breq	80004dbc <twim_write+0xd4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80004db4:	48 b8       	lddpc	r8,80004de0 <twim_write+0xf8>
80004db6:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
80004db8:	5b e8       	cp.w	r8,-2
80004dba:	c0 31       	brne	80004dc0 <twim_write+0xd8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80004dbc:	3f f8       	mov	r8,-1
80004dbe:	c0 28       	rjmp	80004dc2 <twim_write+0xda>
	}
	return STATUS_OK;
80004dc0:	30 08       	mov	r8,0
}
80004dc2:	10 9c       	mov	r12,r8
80004dc4:	2f bd       	sub	sp,-20
80004dc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004dca:	00 00       	add	r0,r0
80004dcc:	00 00       	add	r0,r0
80004dce:	02 8c       	andn	r12,r1
80004dd0:	80 00       	ld.sh	r0,r0[0x0]
80004dd2:	49 b4       	lddpc	r4,80004e3c <usart_set_async_baudrate>
80004dd4:	00 00       	add	r0,r0
80004dd6:	02 90       	mov	r0,r1
80004dd8:	00 00       	add	r0,r0
80004dda:	02 9c       	mov	r12,r1
80004ddc:	00 00       	add	r0,r0
80004dde:	02 ac       	st.w	r1++,r12
80004de0:	00 00       	add	r0,r0
80004de2:	02 98       	mov	r8,r1
80004de4:	00 00       	add	r0,r0
80004de6:	02 a4       	st.w	r1++,r4
80004de8:	80 00       	ld.sh	r0,r0[0x0]
80004dea:	4d ec       	lddpc	r12,80004f60 <usart_reset+0x50>

80004dec <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
80004dec:	eb cd 40 80 	pushm	r7,lr
80004df0:	1a 97       	mov	r7,sp
80004df2:	20 1d       	sub	sp,4
	uint32_t status = twim_inst->sr;
80004df4:	48 98       	lddpc	r8,80004e18 <twim_status+0x2c>
80004df6:	70 08       	ld.w	r8,r8[0x0]
80004df8:	70 78       	ld.w	r8,r8[0x1c]
80004dfa:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
80004dfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e02:	e2 18 00 10 	andl	r8,0x10,COH
80004e06:	c0 30       	breq	80004e0c <twim_status+0x20>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif
		) {
		return 1;
80004e08:	30 18       	mov	r8,1
80004e0a:	c0 28       	rjmp	80004e0e <twim_status+0x22>
	} else {
		return 0;
80004e0c:	30 08       	mov	r8,0
	}
}
80004e0e:	10 9c       	mov	r12,r8
80004e10:	2f fd       	sub	sp,-4
80004e12:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e16:	00 00       	add	r0,r0
80004e18:	00 00       	add	r0,r0
80004e1a:	02 8c       	andn	r12,r1

80004e1c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004e1c:	eb cd 40 80 	pushm	r7,lr
80004e20:	1a 97       	mov	r7,sp
80004e22:	20 1d       	sub	sp,4
80004e24:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004e28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e2c:	e6 18 00 01 	andh	r8,0x1,COH
80004e30:	5f 08       	sreq	r8
80004e32:	5c 58       	castu.b	r8
}
80004e34:	10 9c       	mov	r12,r8
80004e36:	2f fd       	sub	sp,-4
80004e38:	e3 cd 80 80 	ldm	sp++,r7,pc

80004e3c <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80004e3c:	eb cd 40 80 	pushm	r7,lr
80004e40:	1a 97       	mov	r7,sp
80004e42:	20 7d       	sub	sp,28
80004e44:	ef 4c ff ec 	st.w	r7[-20],r12
80004e48:	ef 4b ff e8 	st.w	r7[-24],r11
80004e4c:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80004e50:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004e54:	f0 09 15 04 	lsl	r9,r8,0x4
80004e58:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004e5c:	10 39       	cp.w	r9,r8
80004e5e:	e0 8b 00 04 	brhi	80004e66 <usart_set_async_baudrate+0x2a>
80004e62:	31 08       	mov	r8,16
80004e64:	c0 28       	rjmp	80004e68 <usart_set_async_baudrate+0x2c>
80004e66:	30 88       	mov	r8,8
80004e68:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80004e6c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004e70:	f0 09 15 03 	lsl	r9,r8,0x3
80004e74:	ee fa ff f0 	ld.w	r10,r7[-16]
80004e78:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004e7c:	f4 08 02 48 	mul	r8,r10,r8
80004e80:	a1 98       	lsr	r8,0x1
80004e82:	f2 08 00 08 	add	r8,r9,r8
80004e86:	ee fa ff f0 	ld.w	r10,r7[-16]
80004e8a:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004e8e:	f4 09 02 49 	mul	r9,r10,r9
80004e92:	f0 09 0d 08 	divu	r8,r8,r9
80004e96:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80004e9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e9e:	a3 98       	lsr	r8,0x3
80004ea0:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80004ea4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ea8:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004eac:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80004eb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004eb4:	58 08       	cp.w	r8,0
80004eb6:	c0 70       	breq	80004ec4 <usart_set_async_baudrate+0x88>
80004eb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ebc:	e0 48 ff ff 	cp.w	r8,65535
80004ec0:	e0 88 00 04 	brls	80004ec8 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80004ec4:	30 18       	mov	r8,1
80004ec6:	c2 08       	rjmp	80004f06 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80004ec8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004ecc:	70 18       	ld.w	r8,r8[0x4]
80004ece:	10 99       	mov	r9,r8
80004ed0:	e4 19 ff f7 	andh	r9,0xfff7
80004ed4:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80004ed8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004edc:	59 08       	cp.w	r8,16
80004ede:	c0 40       	breq	80004ee6 <usart_set_async_baudrate+0xaa>
80004ee0:	e8 68 00 00 	mov	r8,524288
80004ee4:	c0 28       	rjmp	80004ee8 <usart_set_async_baudrate+0xac>
80004ee6:	30 08       	mov	r8,0
80004ee8:	10 49       	or	r9,r8
80004eea:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004eee:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
80004ef0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ef4:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80004ef8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004efc:	10 49       	or	r9,r8
80004efe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004f02:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80004f04:	30 08       	mov	r8,0
}
80004f06:	10 9c       	mov	r12,r8
80004f08:	2f 9d       	sub	sp,-28
80004f0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f0e:	d7 03       	nop

80004f10 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80004f10:	eb cd 40 80 	pushm	r7,lr
80004f14:	1a 97       	mov	r7,sp
80004f16:	20 2d       	sub	sp,8
80004f18:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80004f1c:	e1 b8 00 00 	mfsr	r8,0x0
80004f20:	10 9c       	mov	r12,r8
80004f22:	f0 1f 00 18 	mcall	80004f80 <usart_reset+0x70>
80004f26:	18 98       	mov	r8,r12
80004f28:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80004f2c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f30:	30 08       	mov	r8,0
80004f32:	f0 09 18 00 	cp.b	r9,r8
80004f36:	c0 20       	breq	80004f3a <usart_reset+0x2a>
80004f38:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80004f3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f3e:	3f f9       	mov	r9,-1
80004f40:	91 39       	st.w	r8[0xc],r9
  usart->csr;
80004f42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f46:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80004f48:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f4c:	30 08       	mov	r8,0
80004f4e:	f0 09 18 00 	cp.b	r9,r8
80004f52:	c0 20       	breq	80004f56 <usart_reset+0x46>
80004f54:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80004f56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f5a:	30 09       	mov	r9,0
80004f5c:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80004f5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f62:	30 09       	mov	r9,0
80004f64:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
80004f66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f6a:	30 09       	mov	r9,0
80004f6c:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80004f6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f72:	ea 69 61 0c 	mov	r9,680204
80004f76:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80004f78:	2f ed       	sub	sp,-8
80004f7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f7e:	00 00       	add	r0,r0
80004f80:	80 00       	ld.sh	r0,r0[0x0]
80004f82:	4e 1c       	lddpc	r12,80005104 <usart_write_char+0x10>

80004f84 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80004f84:	eb cd 40 80 	pushm	r7,lr
80004f88:	1a 97       	mov	r7,sp
80004f8a:	20 3d       	sub	sp,12
80004f8c:	ef 4c ff fc 	st.w	r7[-4],r12
80004f90:	ef 4b ff f8 	st.w	r7[-8],r11
80004f94:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80004f98:	ee fc ff fc 	ld.w	r12,r7[-4]
80004f9c:	f0 1f 00 54 	mcall	800050ec <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80004fa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fa4:	58 08       	cp.w	r8,0
80004fa6:	c3 90       	breq	80005018 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80004fa8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fac:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004fae:	30 48       	mov	r8,4
80004fb0:	f0 09 18 00 	cp.b	r9,r8
80004fb4:	e0 88 00 32 	brls	80005018 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80004fb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fbc:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004fbe:	30 98       	mov	r8,9
80004fc0:	f0 09 18 00 	cp.b	r9,r8
80004fc4:	e0 8b 00 2a 	brhi	80005018 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80004fc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fcc:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004fce:	30 78       	mov	r8,7
80004fd0:	f0 09 18 00 	cp.b	r9,r8
80004fd4:	e0 8b 00 22 	brhi	80005018 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80004fd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fdc:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004fde:	e0 68 01 01 	mov	r8,257
80004fe2:	f0 09 19 00 	cp.h	r9,r8
80004fe6:	e0 8b 00 19 	brhi	80005018 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80004fea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fee:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004ff2:	30 38       	mov	r8,3
80004ff4:	f0 09 18 00 	cp.b	r9,r8
80004ff8:	e0 8b 00 10 	brhi	80005018 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80004ffc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005000:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005004:	70 08       	ld.w	r8,r8[0x0]
80005006:	12 9a       	mov	r10,r9
80005008:	10 9b       	mov	r11,r8
8000500a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000500e:	f0 1f 00 39 	mcall	800050f0 <usart_init_rs232+0x16c>
80005012:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80005014:	58 18       	cp.w	r8,1
80005016:	c0 31       	brne	8000501c <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80005018:	30 18       	mov	r8,1
8000501a:	c6 48       	rjmp	800050e2 <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
8000501c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005020:	11 c9       	ld.ub	r9,r8[0x4]
80005022:	30 98       	mov	r8,9
80005024:	f0 09 18 00 	cp.b	r9,r8
80005028:	c0 a1       	brne	8000503c <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8000502a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000502e:	70 18       	ld.w	r8,r8[0x4]
80005030:	10 99       	mov	r9,r8
80005032:	b1 b9       	sbr	r9,0x11
80005034:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005038:	91 19       	st.w	r8[0x4],r9
8000503a:	c0 d8       	rjmp	80005054 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8000503c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005040:	70 19       	ld.w	r9,r8[0x4]
80005042:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005046:	11 c8       	ld.ub	r8,r8[0x4]
80005048:	20 58       	sub	r8,5
8000504a:	a7 68       	lsl	r8,0x6
8000504c:	10 49       	or	r9,r8
8000504e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005052:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80005054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005058:	70 19       	ld.w	r9,r8[0x4]
8000505a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000505e:	11 d8       	ld.ub	r8,r8[0x5]
80005060:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80005064:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005068:	f1 38 00 08 	ld.ub	r8,r8[8]
8000506c:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000506e:	f5 e8 10 08 	or	r8,r10,r8
80005072:	10 49       	or	r9,r8
80005074:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005078:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8000507a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000507e:	90 39       	ld.sh	r9,r8[0x6]
80005080:	30 28       	mov	r8,2
80005082:	f0 09 19 00 	cp.h	r9,r8
80005086:	e0 88 00 14 	brls	800050ae <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8000508a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000508e:	70 18       	ld.w	r8,r8[0x4]
80005090:	10 99       	mov	r9,r8
80005092:	ad b9       	sbr	r9,0xd
80005094:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005098:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8000509a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000509e:	90 38       	ld.sh	r8,r8[0x6]
800050a0:	5c 78       	castu.h	r8
800050a2:	20 28       	sub	r8,2
800050a4:	10 99       	mov	r9,r8
800050a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800050aa:	91 a9       	st.w	r8[0x28],r9
800050ac:	c0 d8       	rjmp	800050c6 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800050ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800050b2:	70 19       	ld.w	r9,r8[0x4]
800050b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050b8:	90 38       	ld.sh	r8,r8[0x6]
800050ba:	5c 78       	castu.h	r8
800050bc:	ad 68       	lsl	r8,0xc
800050be:	10 49       	or	r9,r8
800050c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800050c4:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800050c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800050ca:	70 18       	ld.w	r8,r8[0x4]
800050cc:	10 99       	mov	r9,r8
800050ce:	e0 19 ff f0 	andl	r9,0xfff0
800050d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800050d6:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800050d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800050dc:	35 09       	mov	r9,80
800050de:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800050e0:	30 08       	mov	r8,0
}
800050e2:	10 9c       	mov	r12,r8
800050e4:	2f dd       	sub	sp,-12
800050e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800050ea:	00 00       	add	r0,r0
800050ec:	80 00       	ld.sh	r0,r0[0x0]
800050ee:	4f 10       	lddpc	r0,800052b0 <PCA9952_write_reg+0x3c>
800050f0:	80 00       	ld.sh	r0,r0[0x0]
800050f2:	4e 3c       	lddpc	r12,8000527c <PCA9952_write_reg+0x8>

800050f4 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
800050f4:	eb cd 40 80 	pushm	r7,lr
800050f8:	1a 97       	mov	r7,sp
800050fa:	20 3d       	sub	sp,12
800050fc:	ef 4c ff f8 	st.w	r7[-8],r12
80005100:	ef 4b ff f4 	st.w	r7[-12],r11
80005104:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005108:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
8000510c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005110:	70 58       	ld.w	r8,r8[0x14]
80005112:	e2 18 00 02 	andl	r8,0x2,COH
80005116:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80005118:	58 08       	cp.w	r8,0
8000511a:	c0 a0       	breq	8000512e <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8000511c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005120:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80005124:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005128:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
8000512a:	30 08       	mov	r8,0
8000512c:	c0 28       	rjmp	80005130 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
8000512e:	30 28       	mov	r8,2
}
80005130:	10 9c       	mov	r12,r8
80005132:	2f dd       	sub	sp,-12
80005134:	e3 cd 80 80 	ldm	sp++,r7,pc

80005138 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80005138:	eb cd 40 80 	pushm	r7,lr
8000513c:	1a 97       	mov	r7,sp
8000513e:	20 3d       	sub	sp,12
80005140:	ef 4c ff f8 	st.w	r7[-8],r12
80005144:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80005148:	e0 68 27 10 	mov	r8,10000
8000514c:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80005150:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005154:	58 08       	cp.w	r8,0
80005156:	5f 08       	sreq	r8
80005158:	5c 58       	castu.b	r8
8000515a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000515e:	20 19       	sub	r9,1
80005160:	ef 49 ff fc 	st.w	r7[-4],r9
80005164:	58 08       	cp.w	r8,0
80005166:	c0 30       	breq	8000516c <usart_putchar+0x34>
80005168:	3f f8       	mov	r8,-1
8000516a:	c0 b8       	rjmp	80005180 <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
8000516c:	ee fb ff f4 	ld.w	r11,r7[-12]
80005170:	ee fc ff f8 	ld.w	r12,r7[-8]
80005174:	f0 1f 00 05 	mcall	80005188 <usart_putchar+0x50>
80005178:	18 98       	mov	r8,r12
8000517a:	58 08       	cp.w	r8,0
8000517c:	ce a1       	brne	80005150 <usart_putchar+0x18>

  return USART_SUCCESS;
8000517e:	30 08       	mov	r8,0
}
80005180:	10 9c       	mov	r12,r8
80005182:	2f dd       	sub	sp,-12
80005184:	e3 cd 80 80 	ldm	sp++,r7,pc
80005188:	80 00       	ld.sh	r0,r0[0x0]
8000518a:	50 f4       	stdsp	sp[0x3c],r4

8000518c <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
8000518c:	eb cd 40 80 	pushm	r7,lr
80005190:	1a 97       	mov	r7,sp
80005192:	20 2d       	sub	sp,8
80005194:	ef 4c ff fc 	st.w	r7[-4],r12
80005198:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
8000519c:	c0 e8       	rjmp	800051b8 <usart_write_line+0x2c>
    usart_putchar(usart, *string++);
8000519e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051a2:	11 88       	ld.ub	r8,r8[0x0]
800051a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800051a8:	2f f9       	sub	r9,-1
800051aa:	ef 49 ff f8 	st.w	r7[-8],r9
800051ae:	10 9b       	mov	r11,r8
800051b0:	ee fc ff fc 	ld.w	r12,r7[-4]
800051b4:	f0 1f 00 05 	mcall	800051c8 <usart_write_line+0x3c>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
800051b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051bc:	11 88       	ld.ub	r8,r8[0x0]
800051be:	58 08       	cp.w	r8,0
800051c0:	ce f1       	brne	8000519e <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
800051c2:	2f ed       	sub	sp,-8
800051c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800051c8:	80 00       	ld.sh	r0,r0[0x0]
800051ca:	51 38       	stdsp	sp[0x4c],r8

800051cc <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800051cc:	48 cd       	lddpc	sp,800051fc <udata_clear_loop_end+0x2>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
800051ce:	48 d0       	lddpc	r0,80005200 <udata_clear_loop_end+0x6>
  mtsr    AVR32_EVBA, r0
800051d0:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800051d4:	d5 53       	csrf	0x15

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
800051d6:	48 c0       	lddpc	r0,80005204 <udata_clear_loop_end+0xa>
  lda.w   r1, _edata
800051d8:	48 c1       	lddpc	r1,80005208 <udata_clear_loop_end+0xe>
  cp      r0, r1
800051da:	02 30       	cp.w	r0,r1
  brhs    idata_load_loop_end
800051dc:	c0 62       	brcc	800051e8 <idata_load_loop_end>
  lda.w   r2, _data_lma
800051de:	48 c2       	lddpc	r2,8000520c <udata_clear_loop_end+0x12>

800051e0 <idata_load_loop>:
idata_load_loop:
  ld.d    r4, r2++
800051e0:	a5 05       	ld.d	r4,r2++
  st.d    r0++, r4
800051e2:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800051e4:	02 30       	cp.w	r0,r1
  brlo    idata_load_loop
800051e6:	cf d3       	brcs	800051e0 <idata_load_loop>

800051e8 <idata_load_loop_end>:
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800051e8:	48 a0       	lddpc	r0,80005210 <udata_clear_loop_end+0x16>
  lda.w   r1, _end
800051ea:	48 b1       	lddpc	r1,80005214 <udata_clear_loop_end+0x1a>
  cp      r0, r1
800051ec:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800051ee:	c0 62       	brcc	800051fa <udata_clear_loop_end>
  mov     r2, 0
800051f0:	30 02       	mov	r2,0
  mov     r3, 0
800051f2:	30 03       	mov	r3,0

800051f4 <udata_clear_loop>:
udata_clear_loop:
  st.d    r0++, r2
800051f4:	a1 22       	st.d	r0++,r2
  cp      r0, r1
800051f6:	02 30       	cp.w	r0,r1
  brlo    udata_clear_loop
800051f8:	cf e3       	brcs	800051f4 <udata_clear_loop>

800051fa <udata_clear_loop_end>:
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800051fa:	48 8f       	lddpc	pc,80005218 <udata_clear_loop_end+0x1e>
800051fc:	00 01       	add	r1,r0
800051fe:	00 00       	add	r0,r0
80005200:	80 00       	ld.sh	r0,r0[0x0]
80005202:	76 00       	ld.w	r0,r11[0x0]
80005204:	00 00       	add	r0,r0
80005206:	00 08       	add	r8,r0
80005208:	00 00       	add	r0,r0
8000520a:	00 c0       	st.b	r0++,r0
8000520c:	80 00       	ld.sh	r0,r0[0x0]
8000520e:	7a 38       	ld.w	r8,sp[0xc]
80005210:	00 00       	add	r0,r0
80005212:	00 c0       	st.b	r0++,r0
80005214:	00 00       	add	r0,r0
80005216:	0b d8       	ld.ub	r8,r5[0x5]
80005218:	80 00       	ld.sh	r0,r0[0x0]
8000521a:	64 c4       	ld.w	r4,r2[0x30]

8000521c <twi_master_read>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
8000521c:	eb cd 40 80 	pushm	r7,lr
80005220:	1a 97       	mov	r7,sp
80005222:	20 2d       	sub	sp,8
80005224:	ef 4c ff fc 	st.w	r7[-4],r12
80005228:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_read_packet (twim, package));
8000522c:	ee fb ff f8 	ld.w	r11,r7[-8]
80005230:	ee fc ff fc 	ld.w	r12,r7[-4]
80005234:	f0 1f 00 04 	mcall	80005244 <twi_master_read+0x28>
80005238:	18 98       	mov	r8,r12
}
8000523a:	10 9c       	mov	r12,r8
8000523c:	2f ed       	sub	sp,-8
8000523e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005242:	00 00       	add	r0,r0
80005244:	80 00       	ld.sh	r0,r0[0x0]
80005246:	4a 30       	lddpc	r0,800052d0 <PCA9952_write_reg+0x5c>

80005248 <twi_master_write>:
 *                     (see \ref twim_package_t)
 * \return STATUS_OK   if all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write (volatile avr32_twi_t *twim,
		const twi_package_t *package)
{
80005248:	eb cd 40 80 	pushm	r7,lr
8000524c:	1a 97       	mov	r7,sp
8000524e:	20 2d       	sub	sp,8
80005250:	ef 4c ff fc 	st.w	r7[-4],r12
80005254:	ef 4b ff f8 	st.w	r7[-8],r11
	return (twim_write_packet (twim, package));
80005258:	ee fb ff f8 	ld.w	r11,r7[-8]
8000525c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005260:	f0 1f 00 04 	mcall	80005270 <twi_master_write+0x28>
80005264:	18 98       	mov	r8,r12
}
80005266:	10 9c       	mov	r12,r8
80005268:	2f ed       	sub	sp,-8
8000526a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000526e:	00 00       	add	r0,r0
80005270:	80 00       	ld.sh	r0,r0[0x0]
80005272:	4b ac       	lddpc	r12,80005358 <PCA9952_read_reg+0x60>

80005274 <PCA9952_write_reg>:
 *
 * \param reg_index Register address. Use macros as defined in the header file.
 * \param data Data that should be written to the device register.
 */
void PCA9952_write_reg(unsigned char topBotn, uint8_t reg_index, uint8_t data)
{
80005274:	eb cd 40 80 	pushm	r7,lr
80005278:	1a 97       	mov	r7,sp
8000527a:	20 9d       	sub	sp,36
8000527c:	16 99       	mov	r9,r11
8000527e:	14 98       	mov	r8,r10
80005280:	18 9a       	mov	r10,r12
80005282:	ef 6a ff e4 	st.b	r7[-28],r10
80005286:	ef 69 ff e0 	st.b	r7[-32],r9
8000528a:	ef 68 ff dc 	st.b	r7[-36],r8
uint8_t pack[2];
twi_package_t twi_package;

	pack[0] = reg_index;
8000528e:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80005292:	ef 68 ff fc 	st.b	r7[-4],r8
	pack[1] = data;
80005296:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000529a:	ef 68 ff fd 	st.b	r7[-3],r8

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
8000529e:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800052a2:	30 08       	mov	r8,0
800052a4:	f0 09 18 00 	cp.b	r9,r8
800052a8:	c0 51       	brne	800052b2 <PCA9952_write_reg+0x3e>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
800052aa:	36 08       	mov	r8,96
800052ac:	ef 48 ff e8 	st.w	r7[-24],r8
800052b0:	c0 a8       	rjmp	800052c4 <PCA9952_write_reg+0x50>
	}
	else if (topBotn == LED_BOTTOM)
800052b2:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800052b6:	30 18       	mov	r8,1
800052b8:	f0 09 18 00 	cp.b	r9,r8
800052bc:	c0 41       	brne	800052c4 <PCA9952_write_reg+0x50>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
800052be:	36 18       	mov	r8,97
800052c0:	ef 48 ff e8 	st.w	r7[-24],r8
	}

	twi_package.addr_length = 0;
800052c4:	30 08       	mov	r8,0
800052c6:	ef 68 ff ef 	st.b	r7[-17],r8
	twi_package.buffer = &pack;
800052ca:	ee c8 00 04 	sub	r8,r7,4
800052ce:	ef 48 ff f0 	st.w	r7[-16],r8
	twi_package.length = sizeof(pack);
800052d2:	30 28       	mov	r8,2
800052d4:	ef 48 ff f4 	st.w	r7[-12],r8

	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
800052d8:	ee c8 00 18 	sub	r8,r7,24
800052dc:	10 9b       	mov	r11,r8
800052de:	fe 7c 38 00 	mov	r12,-51200
800052e2:	f0 1f 00 05 	mcall	800052f4 <PCA9952_write_reg+0x80>
800052e6:	18 98       	mov	r8,r12
800052e8:	58 08       	cp.w	r8,0
800052ea:	cf 71       	brne	800052d8 <PCA9952_write_reg+0x64>

	return;
}
800052ec:	2f 7d       	sub	sp,-36
800052ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800052f2:	00 00       	add	r0,r0
800052f4:	80 00       	ld.sh	r0,r0[0x0]
800052f6:	52 48       	stdsp	sp[0x90],r8

800052f8 <PCA9952_read_reg>:
 *
 * \param reg_index Register address.
 * \returns Register content.
 */
uint8_t PCA9952_read_reg(unsigned char topBotn, uint8_t reg_index)
{
800052f8:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800052fc:	1a 97       	mov	r7,sp
800052fe:	21 3d       	sub	sp,76
80005300:	18 99       	mov	r9,r12
80005302:	16 98       	mov	r8,r11
80005304:	ef 69 ff b8 	st.b	r7[-72],r9
80005308:	ef 68 ff b4 	st.b	r7[-76],r8
uint8_t data;
twi_package_t twi_package;

//7apr15	twi_package.chip = PCA9952_TWI_ADDRESS;

	if (topBotn == LED_TOP)
8000530c:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005310:	30 08       	mov	r8,0
80005312:	f0 09 18 00 	cp.b	r9,r8
80005316:	c0 51       	brne	80005320 <PCA9952_read_reg+0x28>
	{
		twi_package.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS;
80005318:	36 08       	mov	r8,96
8000531a:	ef 48 ff c8 	st.w	r7[-56],r8
8000531e:	c0 a8       	rjmp	80005332 <PCA9952_read_reg+0x3a>
	}
	else if (topBotn == LED_BOTTOM)
80005320:	ef 39 ff b8 	ld.ub	r9,r7[-72]
80005324:	30 18       	mov	r8,1
80005326:	f0 09 18 00 	cp.b	r9,r8
8000532a:	c0 41       	brne	80005332 <PCA9952_read_reg+0x3a>
	{
		twi_package.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
8000532c:	36 18       	mov	r8,97
8000532e:	ef 48 ff c8 	st.w	r7[-56],r8
	}

	twi_package.addr_length = 0;
80005332:	30 08       	mov	r8,0
80005334:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &reg_index;
80005338:	ee c8 00 4c 	sub	r8,r7,76
8000533c:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
80005340:	30 18       	mov	r8,1
80005342:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_write(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
80005346:	ee c8 00 38 	sub	r8,r7,56
8000534a:	10 9b       	mov	r11,r8
8000534c:	fe 7c 38 00 	mov	r12,-51200
80005350:	f0 1f 00 5e 	mcall	800054c8 <PCA9952_read_reg+0x1d0>
80005354:	18 98       	mov	r8,r12
80005356:	58 08       	cp.w	r8,0
80005358:	cf 71       	brne	80005346 <PCA9952_read_reg+0x4e>
	* specified in the datasheet.
	* Also there seems to be a bug in the TWI module or the driver
	* since some delay here (code or real delay) adds about 500us
	* between the write and the next read cycle.
	*/
	cpu_delay_us(20, cpu_hz);
8000535a:	4d d8       	lddpc	r8,800054cc <PCA9952_read_reg+0x1d4>
8000535c:	70 08       	ld.w	r8,r8[0x0]
8000535e:	31 49       	mov	r9,20
80005360:	ef 49 ff e4 	st.w	r7[-28],r9
80005364:	ef 48 ff e0 	st.w	r7[-32],r8
80005368:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000536c:	ef 48 ff ec 	st.w	r7[-20],r8
80005370:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005374:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80005378:	ee f0 ff ec 	ld.w	r0,r7[-20]
8000537c:	30 01       	mov	r1,0
8000537e:	ee f2 ff e8 	ld.w	r2,r7[-24]
80005382:	30 03       	mov	r3,0
80005384:	e2 02 02 4a 	mul	r10,r1,r2
80005388:	e6 00 02 48 	mul	r8,r3,r0
8000538c:	10 0a       	add	r10,r8
8000538e:	e0 02 06 48 	mulu.d	r8,r0,r2
80005392:	12 0a       	add	r10,r9
80005394:	14 99       	mov	r9,r10
80005396:	ee 7a 42 3f 	mov	r10,999999
8000539a:	30 0b       	mov	r11,0
8000539c:	f0 0a 00 0a 	add	r10,r8,r10
800053a0:	f2 0b 00 4b 	adc	r11,r9,r11
800053a4:	ee 78 42 40 	mov	r8,1000000
800053a8:	30 09       	mov	r9,0
800053aa:	f0 1f 00 4a 	mcall	800054d0 <PCA9952_read_reg+0x1d8>
800053ae:	14 98       	mov	r8,r10
800053b0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
800053b2:	ef 48 ff f4 	st.w	r7[-12],r8
800053b6:	ee c8 00 44 	sub	r8,r7,68
800053ba:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800053be:	e1 b8 00 42 	mfsr	r8,0x108
800053c2:	10 99       	mov	r9,r8
800053c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800053c8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800053ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800053ce:	70 09       	ld.w	r9,r8[0x0]
800053d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800053d4:	10 09       	add	r9,r8
800053d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800053da:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800053dc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800053e0:	30 08       	mov	r8,0
800053e2:	f3 68 00 08 	st.b	r9[8],r8
800053e6:	ee c8 00 44 	sub	r8,r7,68
800053ea:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800053ee:	e1 b8 00 42 	mfsr	r8,0x108
800053f2:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800053f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053fa:	f1 39 00 08 	ld.ub	r9,r8[8]
800053fe:	30 28       	mov	r8,2
80005400:	f0 09 18 00 	cp.b	r9,r8
80005404:	c0 31       	brne	8000540a <PCA9952_read_reg+0x112>
    return false;
80005406:	30 08       	mov	r8,0
80005408:	c4 38       	rjmp	8000548e <PCA9952_read_reg+0x196>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000540a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000540e:	f1 39 00 08 	ld.ub	r9,r8[8]
80005412:	30 18       	mov	r8,1
80005414:	f0 09 18 00 	cp.b	r9,r8
80005418:	c0 31       	brne	8000541e <PCA9952_read_reg+0x126>
    return true;
8000541a:	30 18       	mov	r8,1
8000541c:	c3 98       	rjmp	8000548e <PCA9952_read_reg+0x196>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000541e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005422:	70 09       	ld.w	r9,r8[0x0]
80005424:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005428:	70 18       	ld.w	r8,r8[0x4]
8000542a:	10 39       	cp.w	r9,r8
8000542c:	e0 88 00 1a 	brls	80005460 <PCA9952_read_reg+0x168>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005430:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005434:	70 08       	ld.w	r8,r8[0x0]
80005436:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000543a:	10 39       	cp.w	r9,r8
8000543c:	c1 02       	brcc	8000545c <PCA9952_read_reg+0x164>
8000543e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005442:	70 18       	ld.w	r8,r8[0x4]
80005444:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005448:	10 39       	cp.w	r9,r8
8000544a:	e0 88 00 09 	brls	8000545c <PCA9952_read_reg+0x164>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000544e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005452:	30 18       	mov	r8,1
80005454:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005458:	30 18       	mov	r8,1
8000545a:	c1 a8       	rjmp	8000548e <PCA9952_read_reg+0x196>
    }
    return false;
8000545c:	30 08       	mov	r8,0
8000545e:	c1 88       	rjmp	8000548e <PCA9952_read_reg+0x196>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005460:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005464:	70 08       	ld.w	r8,r8[0x0]
80005466:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000546a:	10 39       	cp.w	r9,r8
8000546c:	c0 93       	brcs	8000547e <PCA9952_read_reg+0x186>
8000546e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005472:	70 18       	ld.w	r8,r8[0x4]
80005474:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005478:	10 39       	cp.w	r9,r8
8000547a:	e0 88 00 09 	brls	8000548c <PCA9952_read_reg+0x194>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000547e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005482:	30 18       	mov	r8,1
80005484:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005488:	30 18       	mov	r8,1
8000548a:	c0 28       	rjmp	8000548e <PCA9952_read_reg+0x196>
    }
    return false;
8000548c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000548e:	58 08       	cp.w	r8,0
80005490:	ca b0       	breq	800053e6 <PCA9952_read_reg+0xee>

//7apr15 this was set above, no need to reassign	twi_package.chip = PCA9952_TWI_ADDRESS;
	twi_package.addr_length = 0;
80005492:	30 08       	mov	r8,0
80005494:	ef 68 ff cf 	st.b	r7[-49],r8
	twi_package.buffer = &data;
80005498:	ee c8 00 21 	sub	r8,r7,33
8000549c:	ef 48 ff d0 	st.w	r7[-48],r8
	twi_package.length = 1;
800054a0:	30 18       	mov	r8,1
800054a2:	ef 48 ff d4 	st.w	r7[-44],r8
	while(twi_master_read(PCA9952_TWI, &twi_package)!=TWI_SUCCESS);
800054a6:	ee c8 00 38 	sub	r8,r7,56
800054aa:	10 9b       	mov	r11,r8
800054ac:	fe 7c 38 00 	mov	r12,-51200
800054b0:	f0 1f 00 09 	mcall	800054d4 <PCA9952_read_reg+0x1dc>
800054b4:	18 98       	mov	r8,r12
800054b6:	58 08       	cp.w	r8,0
800054b8:	cf 71       	brne	800054a6 <PCA9952_read_reg+0x1ae>

	return data;
800054ba:	ef 38 ff df 	ld.ub	r8,r7[-33]
}
800054be:	10 9c       	mov	r12,r8
800054c0:	2e dd       	sub	sp,-76
800054c2:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800054c6:	00 00       	add	r0,r0
800054c8:	80 00       	ld.sh	r0,r0[0x0]
800054ca:	52 48       	stdsp	sp[0x90],r8
800054cc:	00 00       	add	r0,r0
800054ce:	02 b0       	st.h	r1++,r0
800054d0:	80 00       	ld.sh	r0,r0[0x0]
800054d2:	71 c8       	ld.w	r8,r8[0x70]
800054d4:	80 00       	ld.sh	r0,r0[0x0]
800054d6:	52 1c       	stdsp	sp[0x84],r12

800054d8 <PCA9952_init>:


//7apr15 void PCA9952_init(int32_t fcpu) //TODO: maybe don't need fcpu, we'll see.
void PCA9952_init(void) //7apr15
{
800054d8:	eb cd 40 80 	pushm	r7,lr
800054dc:	1a 97       	mov	r7,sp
800054de:	20 1d       	sub	sp,4
	/* Store cpu frequency locally*/
//7apr15	cpu_hz = fcpu;

	//Note output is off at the chip level before coming into this routine, LED_OEn set high before calling this function from main()

	PCA9952_write_reg(LED_TOP, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
800054e0:	30 0a       	mov	r10,0
800054e2:	30 0b       	mov	r11,0
800054e4:	30 0c       	mov	r12,0
800054e6:	f0 1f 00 32 	mcall	800055ac <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
800054ea:	30 0a       	mov	r10,0
800054ec:	30 1b       	mov	r11,1
800054ee:	30 0c       	mov	r12,0
800054f0:	f0 1f 00 2f 	mcall	800055ac <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
800054f4:	36 4a       	mov	r10,100
800054f6:	34 3b       	mov	r11,67
800054f8:	30 0c       	mov	r12,0
800054fa:	f0 1f 00 2d 	mcall	800055ac <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
800054fe:	30 0a       	mov	r10,0
80005500:	30 2b       	mov	r11,2
80005502:	30 0c       	mov	r12,0
80005504:	f0 1f 00 2a 	mcall	800055ac <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT1, 0);
80005508:	30 0a       	mov	r10,0
8000550a:	30 3b       	mov	r11,3
8000550c:	30 0c       	mov	r12,0
8000550e:	f0 1f 00 28 	mcall	800055ac <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT2, 0);
80005512:	30 0a       	mov	r10,0
80005514:	30 4b       	mov	r11,4
80005516:	30 0c       	mov	r12,0
80005518:	f0 1f 00 25 	mcall	800055ac <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_TOP, PCA9952_LEDOUT3, 0);
8000551c:	30 0a       	mov	r10,0
8000551e:	30 5b       	mov	r11,5
80005520:	30 0c       	mov	r12,0
80005522:	f0 1f 00 23 	mcall	800055ac <PCA9952_init+0xd4>

	tmp1 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
80005526:	34 4b       	mov	r11,68
80005528:	30 0c       	mov	r12,0
8000552a:	f0 1f 00 22 	mcall	800055b0 <PCA9952_init+0xd8>
8000552e:	18 98       	mov	r8,r12
80005530:	ef 68 ff ff 	st.b	r7[-1],r8
	tmp2 = PCA9952_read_reg(LED_TOP, PCA9952_EFLAG1);
80005534:	34 5b       	mov	r11,69
80005536:	30 0c       	mov	r12,0
80005538:	f0 1f 00 1e 	mcall	800055b0 <PCA9952_init+0xd8>
8000553c:	18 98       	mov	r8,r12
8000553e:	ef 68 ff fe 	st.b	r7[-2],r8

	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE1, 0);		//No autoincrement, normal mode not sleep, does not respond to sub or allcall addresses
80005542:	30 0a       	mov	r10,0
80005544:	30 0b       	mov	r11,0
80005546:	30 1c       	mov	r12,1
80005548:	f0 1f 00 19 	mcall	800055ac <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_MODE2, 0);		//Dimming not blinking, change on stop not ack (don't really care but have to pick something)
8000554c:	30 0a       	mov	r10,0
8000554e:	30 1b       	mov	r11,1
80005550:	30 1c       	mov	r12,1
80005552:	f0 1f 00 17 	mcall	800055ac <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_IREFALL, LED_DRIVER_CURRENT); //9apr15 drive at half current for now, power supply circuit needs modification
80005556:	36 4a       	mov	r10,100
80005558:	34 3b       	mov	r11,67
8000555a:	30 1c       	mov	r12,1
8000555c:	f0 1f 00 14 	mcall	800055ac <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT0, 0);		//Setting all channels off for now
80005560:	30 0a       	mov	r10,0
80005562:	30 2b       	mov	r11,2
80005564:	30 1c       	mov	r12,1
80005566:	f0 1f 00 12 	mcall	800055ac <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT1, 0);
8000556a:	30 0a       	mov	r10,0
8000556c:	30 3b       	mov	r11,3
8000556e:	30 1c       	mov	r12,1
80005570:	f0 1f 00 0f 	mcall	800055ac <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT2, 0);
80005574:	30 0a       	mov	r10,0
80005576:	30 4b       	mov	r11,4
80005578:	30 1c       	mov	r12,1
8000557a:	f0 1f 00 0d 	mcall	800055ac <PCA9952_init+0xd4>
	PCA9952_write_reg(LED_BOTTOM, PCA9952_LEDOUT3, 0);
8000557e:	30 0a       	mov	r10,0
80005580:	30 5b       	mov	r11,5
80005582:	30 1c       	mov	r12,1
80005584:	f0 1f 00 0a 	mcall	800055ac <PCA9952_init+0xd4>

	tmp3 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG0);	//TODO: just see what we get, will need to weave error checking into this system later
80005588:	34 4b       	mov	r11,68
8000558a:	30 1c       	mov	r12,1
8000558c:	f0 1f 00 09 	mcall	800055b0 <PCA9952_init+0xd8>
80005590:	18 98       	mov	r8,r12
80005592:	ef 68 ff fd 	st.b	r7[-3],r8
	tmp4 = PCA9952_read_reg(LED_BOTTOM, PCA9952_EFLAG1);
80005596:	34 5b       	mov	r11,69
80005598:	30 1c       	mov	r12,1
8000559a:	f0 1f 00 06 	mcall	800055b0 <PCA9952_init+0xd8>
8000559e:	18 98       	mov	r8,r12
800055a0:	ef 68 ff fc 	st.b	r7[-4],r8

}
800055a4:	2f fd       	sub	sp,-4
800055a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800055aa:	00 00       	add	r0,r0
800055ac:	80 00       	ld.sh	r0,r0[0x0]
800055ae:	52 74       	stdsp	sp[0x9c],r4
800055b0:	80 00       	ld.sh	r0,r0[0x0]
800055b2:	52 f8       	stdsp	sp[0xbc],r8

800055b4 <PCA9952_channel>:


void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn);
void PCA9952_channel(unsigned char topBotn, unsigned char channel, unsigned char onOffn)
{
800055b4:	eb cd 40 80 	pushm	r7,lr
800055b8:	1a 97       	mov	r7,sp
800055ba:	20 5d       	sub	sp,20
800055bc:	16 99       	mov	r9,r11
800055be:	14 98       	mov	r8,r10
800055c0:	18 9a       	mov	r10,r12
800055c2:	ef 6a ff f4 	st.b	r7[-12],r10
800055c6:	ef 69 ff f0 	st.b	r7[-16],r9
800055ca:	ef 68 ff ec 	st.b	r7[-20],r8
	unsigned char regIdx, regPos, regShadow, maskVal, writeVal;
	
	regIdx = (channel / 4); //LEDOUT0 controls channels 0..3, LEDOUT1 controls channels 4..7 etc.
800055ce:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800055d2:	a3 88       	lsr	r8,0x2
800055d4:	ef 68 ff fb 	st.b	r7[-5],r8
	regPos = (channel % 4);
800055d8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800055dc:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800055e0:	ef 68 ff fc 	st.b	r7[-4],r8
	
	switch(regIdx)
800055e4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800055e8:	58 18       	cp.w	r8,1
800055ea:	c1 50       	breq	80005614 <PCA9952_channel+0x60>
800055ec:	e0 89 00 05 	brgt	800055f6 <PCA9952_channel+0x42>
800055f0:	58 08       	cp.w	r8,0
800055f2:	c0 70       	breq	80005600 <PCA9952_channel+0x4c>
800055f4:	c2 d8       	rjmp	8000564e <PCA9952_channel+0x9a>
800055f6:	58 28       	cp.w	r8,2
800055f8:	c1 80       	breq	80005628 <PCA9952_channel+0x74>
800055fa:	58 38       	cp.w	r8,3
800055fc:	c2 00       	breq	8000563c <PCA9952_channel+0x88>
800055fe:	c2 88       	rjmp	8000564e <PCA9952_channel+0x9a>
	{
		case 0:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT0);
80005600:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005604:	30 2b       	mov	r11,2
80005606:	10 9c       	mov	r12,r8
80005608:	f0 1f 00 49 	mcall	8000572c <PCA9952_channel+0x178>
8000560c:	18 98       	mov	r8,r12
8000560e:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80005612:	c1 e8       	rjmp	8000564e <PCA9952_channel+0x9a>
		case 1:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT1);
80005614:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005618:	30 3b       	mov	r11,3
8000561a:	10 9c       	mov	r12,r8
8000561c:	f0 1f 00 44 	mcall	8000572c <PCA9952_channel+0x178>
80005620:	18 98       	mov	r8,r12
80005622:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
80005626:	c1 48       	rjmp	8000564e <PCA9952_channel+0x9a>
		case 2:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT2);
80005628:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000562c:	30 4b       	mov	r11,4
8000562e:	10 9c       	mov	r12,r8
80005630:	f0 1f 00 3f 	mcall	8000572c <PCA9952_channel+0x178>
80005634:	18 98       	mov	r8,r12
80005636:	ef 68 ff fd 	st.b	r7[-3],r8
			break;
8000563a:	c0 a8       	rjmp	8000564e <PCA9952_channel+0x9a>
		case 3:
			regShadow = PCA9952_read_reg(topBotn,PCA9952_LEDOUT3);
8000563c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005640:	30 5b       	mov	r11,5
80005642:	10 9c       	mov	r12,r8
80005644:	f0 1f 00 3a 	mcall	8000572c <PCA9952_channel+0x178>
80005648:	18 98       	mov	r8,r12
8000564a:	ef 68 ff fd 	st.b	r7[-3],r8
			break;		
	}

	maskVal = 0xFF << (regPos * 2);
8000564e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005652:	a1 78       	lsl	r8,0x1
80005654:	e0 69 00 ff 	mov	r9,255
80005658:	f2 08 09 48 	lsl	r8,r9,r8
8000565c:	ef 68 ff fe 	st.b	r7[-2],r8
	maskVal = maskVal ^ 0xFF;
80005660:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005664:	5c d8       	com	r8
80005666:	ef 68 ff fe 	st.b	r7[-2],r8
	regShadow &= maskVal;
8000566a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000566e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005672:	f3 e8 00 08 	and	r8,r9,r8
80005676:	ef 68 ff fd 	st.b	r7[-3],r8

	if (onOffn == LED_ON)
8000567a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000567e:	30 18       	mov	r8,1
80005680:	f0 09 18 00 	cp.b	r9,r8
80005684:	c0 a1       	brne	80005698 <PCA9952_channel+0xe4>
	{
		writeVal = (0x01 << (regPos * 2));
80005686:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000568a:	a1 78       	lsl	r8,0x1
8000568c:	30 19       	mov	r9,1
8000568e:	f2 08 09 48 	lsl	r8,r9,r8
80005692:	ef 68 ff ff 	st.b	r7[-1],r8
80005696:	c0 a8       	rjmp	800056aa <PCA9952_channel+0xf6>
	}
	else if (onOffn == LED_OFF)
80005698:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000569c:	30 08       	mov	r8,0
8000569e:	f0 09 18 00 	cp.b	r9,r8
800056a2:	c0 41       	brne	800056aa <PCA9952_channel+0xf6>
	{
		writeVal = 0;
800056a4:	30 08       	mov	r8,0
800056a6:	ef 68 ff ff 	st.b	r7[-1],r8
	}
	
	regShadow |= writeVal;
800056aa:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800056ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800056b2:	f3 e8 10 08 	or	r8,r9,r8
800056b6:	ef 68 ff fd 	st.b	r7[-3],r8
	
	switch(regIdx)
800056ba:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800056be:	58 18       	cp.w	r8,1
800056c0:	c1 50       	breq	800056ea <PCA9952_channel+0x136>
800056c2:	e0 89 00 05 	brgt	800056cc <PCA9952_channel+0x118>
800056c6:	58 08       	cp.w	r8,0
800056c8:	c0 70       	breq	800056d6 <PCA9952_channel+0x122>
800056ca:	c2 d8       	rjmp	80005724 <PCA9952_channel+0x170>
800056cc:	58 28       	cp.w	r8,2
800056ce:	c1 80       	breq	800056fe <PCA9952_channel+0x14a>
800056d0:	58 38       	cp.w	r8,3
800056d2:	c2 00       	breq	80005712 <PCA9952_channel+0x15e>
800056d4:	c2 88       	rjmp	80005724 <PCA9952_channel+0x170>
	{
		case 0:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT0, regShadow);
800056d6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800056da:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800056de:	12 9a       	mov	r10,r9
800056e0:	30 2b       	mov	r11,2
800056e2:	10 9c       	mov	r12,r8
800056e4:	f0 1f 00 13 	mcall	80005730 <PCA9952_channel+0x17c>
			break;
800056e8:	c1 e8       	rjmp	80005724 <PCA9952_channel+0x170>
		case 1:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT1, regShadow);
800056ea:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800056ee:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800056f2:	12 9a       	mov	r10,r9
800056f4:	30 3b       	mov	r11,3
800056f6:	10 9c       	mov	r12,r8
800056f8:	f0 1f 00 0e 	mcall	80005730 <PCA9952_channel+0x17c>
			break;
800056fc:	c1 48       	rjmp	80005724 <PCA9952_channel+0x170>
		case 2:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT2, regShadow);
800056fe:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005702:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005706:	12 9a       	mov	r10,r9
80005708:	30 4b       	mov	r11,4
8000570a:	10 9c       	mov	r12,r8
8000570c:	f0 1f 00 09 	mcall	80005730 <PCA9952_channel+0x17c>
			break;
80005710:	c0 a8       	rjmp	80005724 <PCA9952_channel+0x170>
		case 3:
			PCA9952_write_reg(topBotn,PCA9952_LEDOUT3, regShadow);
80005712:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005716:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000571a:	12 9a       	mov	r10,r9
8000571c:	30 5b       	mov	r11,5
8000571e:	10 9c       	mov	r12,r8
80005720:	f0 1f 00 04 	mcall	80005730 <PCA9952_channel+0x17c>
			break;
	}

}
80005724:	2f bd       	sub	sp,-20
80005726:	e3 cd 80 80 	ldm	sp++,r7,pc
8000572a:	00 00       	add	r0,r0
8000572c:	80 00       	ld.sh	r0,r0[0x0]
8000572e:	52 f8       	stdsp	sp[0xbc],r8
80005730:	80 00       	ld.sh	r0,r0[0x0]
80005732:	52 74       	stdsp	sp[0x9c],r4

80005734 <led_shelf>:

void led_shelf(unsigned char shelf, unsigned char onOffn)
{
80005734:	eb cd 40 80 	pushm	r7,lr
80005738:	1a 97       	mov	r7,sp
8000573a:	20 2d       	sub	sp,8
8000573c:	18 99       	mov	r9,r12
8000573e:	16 98       	mov	r8,r11
80005740:	ef 69 ff fc 	st.b	r7[-4],r9
80005744:	ef 68 ff f8 	st.b	r7[-8],r8
	switch(shelf)
80005748:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000574c:	58 18       	cp.w	r8,1
8000574e:	c2 f0       	breq	800057ac <led_shelf+0x78>
80005750:	e0 89 00 05 	brgt	8000575a <led_shelf+0x26>
80005754:	58 08       	cp.w	r8,0
80005756:	c0 70       	breq	80005764 <led_shelf+0x30>
80005758:	c9 58       	rjmp	80005882 <led_shelf+0x14e>
8000575a:	58 28       	cp.w	r8,2
8000575c:	c4 c0       	breq	800057f4 <led_shelf+0xc0>
8000575e:	58 38       	cp.w	r8,3
80005760:	c6 e0       	breq	8000583c <led_shelf+0x108>
80005762:	c9 08       	rjmp	80005882 <led_shelf+0x14e>
	{
		case 0: //bottom of LED board 0 which is the upper board in the shelf, and top of LED board 1 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 0, onOffn);
80005764:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005768:	10 9a       	mov	r10,r8
8000576a:	30 0b       	mov	r11,0
8000576c:	30 1c       	mov	r12,1
8000576e:	f0 1f 00 47 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 1, onOffn);
80005772:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005776:	10 9a       	mov	r10,r8
80005778:	30 1b       	mov	r11,1
8000577a:	30 1c       	mov	r12,1
8000577c:	f0 1f 00 43 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 2, onOffn);
80005780:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005784:	10 9a       	mov	r10,r8
80005786:	30 2b       	mov	r11,2
80005788:	30 1c       	mov	r12,1
8000578a:	f0 1f 00 40 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 0, onOffn);
8000578e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005792:	10 9a       	mov	r10,r8
80005794:	30 0b       	mov	r11,0
80005796:	30 0c       	mov	r12,0
80005798:	f0 1f 00 3c 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 1, onOffn);
8000579c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800057a0:	10 9a       	mov	r10,r8
800057a2:	30 1b       	mov	r11,1
800057a4:	30 0c       	mov	r12,0
800057a6:	f0 1f 00 39 	mcall	80005888 <led_shelf+0x154>
			break;
800057aa:	c6 c8       	rjmp	80005882 <led_shelf+0x14e>

		case 1: //bottom of LED board 1 which is the upper board in the shelf, and top of LED board 2 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 3, onOffn);
800057ac:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800057b0:	10 9a       	mov	r10,r8
800057b2:	30 3b       	mov	r11,3
800057b4:	30 1c       	mov	r12,1
800057b6:	f0 1f 00 35 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 4, onOffn);
800057ba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800057be:	10 9a       	mov	r10,r8
800057c0:	30 4b       	mov	r11,4
800057c2:	30 1c       	mov	r12,1
800057c4:	f0 1f 00 31 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 5, onOffn);
800057c8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800057cc:	10 9a       	mov	r10,r8
800057ce:	30 5b       	mov	r11,5
800057d0:	30 1c       	mov	r12,1
800057d2:	f0 1f 00 2e 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 2, onOffn);
800057d6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800057da:	10 9a       	mov	r10,r8
800057dc:	30 2b       	mov	r11,2
800057de:	30 0c       	mov	r12,0
800057e0:	f0 1f 00 2a 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 3, onOffn);
800057e4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800057e8:	10 9a       	mov	r10,r8
800057ea:	30 3b       	mov	r11,3
800057ec:	30 0c       	mov	r12,0
800057ee:	f0 1f 00 27 	mcall	80005888 <led_shelf+0x154>
			break;
800057f2:	c4 88       	rjmp	80005882 <led_shelf+0x14e>

		case 2: //bottom of LED board 2 which is the upper board in the shelf, and top of LED board 3 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 6, onOffn);
800057f4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800057f8:	10 9a       	mov	r10,r8
800057fa:	30 6b       	mov	r11,6
800057fc:	30 1c       	mov	r12,1
800057fe:	f0 1f 00 23 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 7, onOffn);
80005802:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005806:	10 9a       	mov	r10,r8
80005808:	30 7b       	mov	r11,7
8000580a:	30 1c       	mov	r12,1
8000580c:	f0 1f 00 1f 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 8, onOffn);
80005810:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005814:	10 9a       	mov	r10,r8
80005816:	30 8b       	mov	r11,8
80005818:	30 1c       	mov	r12,1
8000581a:	f0 1f 00 1c 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 4, onOffn);
8000581e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005822:	10 9a       	mov	r10,r8
80005824:	30 4b       	mov	r11,4
80005826:	30 0c       	mov	r12,0
80005828:	f0 1f 00 18 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 5, onOffn);
8000582c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005830:	10 9a       	mov	r10,r8
80005832:	30 5b       	mov	r11,5
80005834:	30 0c       	mov	r12,0
80005836:	f0 1f 00 15 	mcall	80005888 <led_shelf+0x154>
			break;
8000583a:	c2 48       	rjmp	80005882 <led_shelf+0x14e>

		case 3: //bottom of LED board 3 which is the upper board in the shelf, and top of LED board 4 which is the lower board in the shelf
			PCA9952_channel(LED_BOTTOM, 9, onOffn);
8000583c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005840:	10 9a       	mov	r10,r8
80005842:	30 9b       	mov	r11,9
80005844:	30 1c       	mov	r12,1
80005846:	f0 1f 00 11 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 10, onOffn);
8000584a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000584e:	10 9a       	mov	r10,r8
80005850:	30 ab       	mov	r11,10
80005852:	30 1c       	mov	r12,1
80005854:	f0 1f 00 0d 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_BOTTOM, 11, onOffn);
80005858:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000585c:	10 9a       	mov	r10,r8
8000585e:	30 bb       	mov	r11,11
80005860:	30 1c       	mov	r12,1
80005862:	f0 1f 00 0a 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 6, onOffn);
80005866:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000586a:	10 9a       	mov	r10,r8
8000586c:	30 6b       	mov	r11,6
8000586e:	30 0c       	mov	r12,0
80005870:	f0 1f 00 06 	mcall	80005888 <led_shelf+0x154>
			PCA9952_channel(LED_TOP, 7, onOffn);
80005874:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005878:	10 9a       	mov	r10,r8
8000587a:	30 7b       	mov	r11,7
8000587c:	30 0c       	mov	r12,0
8000587e:	f0 1f 00 03 	mcall	80005888 <led_shelf+0x154>
			break;
	}	
	
}
80005882:	2f ed       	sub	sp,-8
80005884:	e3 cd 80 80 	ldm	sp++,r7,pc
80005888:	80 00       	ld.sh	r0,r0[0x0]
8000588a:	55 b4       	stdsp	sp[0x16c],r4
8000588c:	53 68       	stdsp	sp[0xd8],r8
8000588e:	65 6c       	ld.w	r12,r2[0x58]
80005890:	66 20       	ld.w	r0,r3[0x8]
80005892:	30 20       	mov	r0,2
80005894:	61 63       	ld.w	r3,r0[0x58]
80005896:	74 69       	ld.w	r9,r10[0x18]
80005898:	76 65       	ld.w	r5,r11[0x18]
8000589a:	0d 0a       	ld.w	r10,r6++
8000589c:	00 00       	add	r0,r0
8000589e:	00 00       	add	r0,r0
800058a0:	53 68       	stdsp	sp[0xd8],r8
800058a2:	65 6c       	ld.w	r12,r2[0x58]
800058a4:	66 20       	ld.w	r0,r3[0x8]
800058a6:	31 20       	mov	r0,18
800058a8:	61 63       	ld.w	r3,r0[0x58]
800058aa:	74 69       	ld.w	r9,r10[0x18]
800058ac:	76 65       	ld.w	r5,r11[0x18]
800058ae:	0d 0a       	ld.w	r10,r6++
800058b0:	00 00       	add	r0,r0
800058b2:	00 00       	add	r0,r0
800058b4:	53 68       	stdsp	sp[0xd8],r8
800058b6:	65 6c       	ld.w	r12,r2[0x58]
800058b8:	66 20       	ld.w	r0,r3[0x8]
800058ba:	32 20       	mov	r0,34
800058bc:	61 63       	ld.w	r3,r0[0x58]
800058be:	74 69       	ld.w	r9,r10[0x18]
800058c0:	76 65       	ld.w	r5,r11[0x18]
800058c2:	0d 0a       	ld.w	r10,r6++
800058c4:	00 00       	add	r0,r0
800058c6:	00 00       	add	r0,r0
800058c8:	53 68       	stdsp	sp[0xd8],r8
800058ca:	65 6c       	ld.w	r12,r2[0x58]
800058cc:	66 20       	ld.w	r0,r3[0x8]
800058ce:	33 20       	mov	r0,50
800058d0:	61 63       	ld.w	r3,r0[0x58]
800058d2:	74 69       	ld.w	r9,r10[0x18]
800058d4:	76 65       	ld.w	r5,r11[0x18]
800058d6:	0d 0a       	ld.w	r10,r6++
800058d8:	00 00       	add	r0,r0
800058da:	00 00       	add	r0,r0
800058dc:	53 45       	stdsp	sp[0xd0],r5
800058de:	41 4c       	lddsp	r12,sp[0x50]
800058e0:	20 53       	sub	r3,5
800058e2:	48 49       	lddpc	r9,800058f0 <led_shelf+0x1bc>
800058e4:	45 4c       	lddsp	r12,sp[0x150]
800058e6:	44 20       	lddsp	r0,sp[0x108]
800058e8:	44 45       	lddsp	r5,sp[0x110]
800058ea:	4d 4f       	lddpc	pc,80005a38 <display_text+0x10>
800058ec:	20 0d       	sub	sp,0
800058ee:	0a 20       	rsub	r0,r5
800058f0:	43 6f       	lddsp	pc,sp[0xd8]
800058f2:	70 79       	ld.w	r9,r8[0x1c]
800058f4:	72 69       	ld.w	r9,r9[0x18]
800058f6:	67 68       	ld.w	r8,r3[0x58]
800058f8:	74 20       	ld.w	r0,r10[0x8]
800058fa:	28 63       	sub	r3,-122
800058fc:	29 20       	sub	r0,-110
800058fe:	32 30       	mov	r0,35
80005900:	31 35       	mov	r5,19
80005902:	20 54       	sub	r4,5
80005904:	65 63       	ld.w	r3,r2[0x58]
80005906:	68 6e       	ld.w	lr,r4[0x18]
80005908:	69 63       	ld.w	r3,r4[0x58]
8000590a:	61 6c       	ld.w	r12,r0[0x58]
8000590c:	20 53       	sub	r3,5
8000590e:	6f 6c       	ld.w	r12,r7[0x58]
80005910:	75 74       	ld.w	r4,r10[0x5c]
80005912:	69 6f       	ld.w	pc,r4[0x58]
80005914:	6e 73       	ld.w	r3,r7[0x1c]
80005916:	20 47       	sub	r7,4
80005918:	72 6f       	ld.w	pc,r9[0x18]
8000591a:	75 70       	ld.w	r0,r10[0x5c]
8000591c:	2c 20       	sub	r0,-62
8000591e:	49 6e       	lddpc	lr,80005974 <led_shelf+0x240>
80005920:	63 2e       	ld.w	lr,r1[0x48]
80005922:	0d 0a       	ld.w	r10,r6++
80005924:	00 00       	add	r0,r0
80005926:	00 00       	add	r0,r0
80005928:	44 6f       	lddsp	pc,sp[0x118]
8000592a:	6f 72       	ld.w	r2,r7[0x5c]
8000592c:	20 6c       	sub	r12,6
8000592e:	61 74       	ld.w	r4,r0[0x5c]
80005930:	63 68       	ld.w	r8,r1[0x58]
80005932:	20 64       	sub	r4,6
80005934:	65 74       	ld.w	r4,r2[0x5c]
80005936:	65 63       	ld.w	r3,r2[0x58]
80005938:	74 65       	ld.w	r5,r10[0x18]
8000593a:	64 0d       	ld.w	sp,r2[0x0]
8000593c:	0a 00       	add	r0,r5
8000593e:	00 00       	add	r0,r0
80005940:	41 63       	lddsp	r3,sp[0x58]
80005942:	74 69       	ld.w	r9,r10[0x18]
80005944:	6f 6e       	ld.w	lr,r7[0x58]
80005946:	20 70       	sub	r0,7
80005948:	75 73       	ld.w	r3,r10[0x5c]
8000594a:	68 20       	ld.w	r0,r4[0x8]
8000594c:	62 75       	ld.w	r5,r1[0x1c]
8000594e:	74 74       	ld.w	r4,r10[0x1c]
80005950:	6f 6e       	ld.w	lr,r7[0x58]
80005952:	20 70       	sub	r0,7
80005954:	72 65       	ld.w	r5,r9[0x18]
80005956:	73 73       	ld.w	r3,r9[0x5c]
80005958:	20 64       	sub	r4,6
8000595a:	65 74       	ld.w	r4,r2[0x5c]
8000595c:	65 63       	ld.w	r3,r2[0x58]
8000595e:	74 65       	ld.w	r5,r10[0x18]
80005960:	64 0d       	ld.w	sp,r2[0x0]
80005962:	0a 00       	add	r0,r5
80005964:	41 63       	lddsp	r3,sp[0x58]
80005966:	74 69       	ld.w	r9,r10[0x18]
80005968:	6f 6e       	ld.w	lr,r7[0x58]
8000596a:	20 70       	sub	r0,7
8000596c:	75 73       	ld.w	r3,r10[0x5c]
8000596e:	68 20       	ld.w	r0,r4[0x8]
80005970:	62 75       	ld.w	r5,r1[0x1c]
80005972:	74 74       	ld.w	r4,r10[0x1c]
80005974:	6f 6e       	ld.w	lr,r7[0x58]
80005976:	20 72       	sub	r2,7
80005978:	65 6c       	ld.w	r12,r2[0x58]
8000597a:	65 61       	ld.w	r1,r2[0x58]
8000597c:	73 65       	ld.w	r5,r9[0x58]
8000597e:	20 64       	sub	r4,6
80005980:	65 74       	ld.w	r4,r2[0x5c]
80005982:	65 63       	ld.w	r3,r2[0x58]
80005984:	74 65       	ld.w	r5,r10[0x18]
80005986:	64 0d       	ld.w	sp,r2[0x0]
80005988:	0a 00       	add	r0,r5
8000598a:	00 00       	add	r0,r0
8000598c:	53 74       	stdsp	sp[0xdc],r4
8000598e:	61 72       	ld.w	r2,r0[0x5c]
80005990:	74 20       	ld.w	r0,r10[0x8]
80005992:	73 61       	ld.w	r1,r9[0x58]
80005994:	6e 69       	ld.w	r9,r7[0x18]
80005996:	74 69       	ld.w	r9,r10[0x18]
80005998:	7a 69       	ld.w	r9,sp[0x18]
8000599a:	6e 67       	ld.w	r7,r7[0x18]
8000599c:	0d 0a       	ld.w	r10,r6++
8000599e:	00 00       	add	r0,r0
800059a0:	45 69       	lddsp	r9,sp[0x158]
800059a2:	74 68       	ld.w	r8,r10[0x18]
800059a4:	65 72       	ld.w	r2,r2[0x5c]
800059a6:	20 6e       	sub	lr,6
800059a8:	6f 20       	ld.w	r0,r7[0x48]
800059aa:	64 65       	ld.w	r5,r2[0x18]
800059ac:	76 69       	ld.w	r9,r11[0x18]
800059ae:	63 65       	ld.w	r5,r1[0x58]
800059b0:	73 20       	ld.w	r0,r9[0x48]
800059b2:	6f 72       	ld.w	r2,r7[0x5c]
800059b4:	20 73       	sub	r3,7
800059b6:	68 65       	ld.w	r5,r4[0x18]
800059b8:	6c 76       	ld.w	r6,r6[0x1c]
800059ba:	65 73       	ld.w	r3,r2[0x5c]
800059bc:	20 61       	sub	r1,6
800059be:	72 65       	ld.w	r5,r9[0x18]
800059c0:	20 70       	sub	r0,7
800059c2:	61 73       	ld.w	r3,r0[0x5c]
800059c4:	74 20       	ld.w	r0,r10[0x8]
800059c6:	6c 69       	ld.w	r9,r6[0x18]
800059c8:	66 65       	ld.w	r5,r3[0x18]
800059ca:	74 69       	ld.w	r9,r10[0x18]
800059cc:	6d 65       	ld.w	r5,r6[0x58]
800059ce:	2c 20       	sub	r0,-62
800059d0:	63 68       	ld.w	r8,r1[0x58]
800059d2:	61 72       	ld.w	r2,r0[0x5c]
800059d4:	67 69       	ld.w	r9,r3[0x58]
800059d6:	6e 67       	ld.w	r7,r7[0x18]
800059d8:	20 64       	sub	r4,6
800059da:	65 76       	ld.w	r6,r2[0x5c]
800059dc:	69 63       	ld.w	r3,r4[0x58]
800059de:	65 73       	ld.w	r3,r2[0x5c]
800059e0:	0d 0a       	ld.w	r10,r6++
800059e2:	00 00       	add	r0,r0
800059e4:	53 68       	stdsp	sp[0xd8],r8
800059e6:	65 6c       	ld.w	r12,r2[0x58]
800059e8:	66 20       	ld.w	r0,r3[0x8]
800059ea:	63 6c       	ld.w	r12,r1[0x58]
800059ec:	65 61       	ld.w	r1,r2[0x58]
800059ee:	6e 0d       	ld.w	sp,r7[0x0]
800059f0:	0a 00       	add	r0,r5
800059f2:	00 00       	add	r0,r0
800059f4:	44 6f       	lddsp	pc,sp[0x118]
800059f6:	6f 72       	ld.w	r2,r7[0x5c]
800059f8:	20 6c       	sub	r12,6
800059fa:	61 74       	ld.w	r4,r0[0x5c]
800059fc:	63 68       	ld.w	r8,r1[0x58]
800059fe:	20 6f       	sub	pc,6
80005a00:	70 65       	ld.w	r5,r8[0x18]
80005a02:	6e 65       	ld.w	r5,r7[0x18]
80005a04:	64 2c       	ld.w	r12,r2[0x8]
80005a06:	20 73       	sub	r3,7
80005a08:	68 75       	ld.w	r5,r4[0x1c]
80005a0a:	74 74       	ld.w	r4,r10[0x1c]
80005a0c:	69 6e       	ld.w	lr,r4[0x58]
80005a0e:	67 20       	ld.w	r0,r3[0x48]
80005a10:	64 6f       	ld.w	pc,r2[0x18]
80005a12:	77 6e       	ld.w	lr,r11[0x58]
80005a14:	20 61       	sub	r1,6
80005a16:	6c 6c       	ld.w	r12,r6[0x18]
80005a18:	20 70       	sub	r0,7
80005a1a:	72 6f       	ld.w	pc,r9[0x18]
80005a1c:	63 65       	ld.w	r5,r1[0x58]
80005a1e:	73 73       	ld.w	r3,r9[0x5c]
80005a20:	65 73       	ld.w	r3,r2[0x5c]
80005a22:	0d 0a       	ld.w	r10,r6++
80005a24:	00 00       	add	r0,r0
	...

80005a28 <display_text>:
unsigned char shelfActive[NUM_SHELVES];


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
80005a28:	eb cd 40 80 	pushm	r7,lr
80005a2c:	1a 97       	mov	r7,sp
80005a2e:	20 2d       	sub	sp,8
80005a30:	18 98       	mov	r8,r12
80005a32:	ef 68 ff f8 	st.b	r7[-8],r8
	for (int i = 0; i<7; i++)
80005a36:	30 08       	mov	r8,0
80005a38:	ef 48 ff fc 	st.w	r7[-4],r8
80005a3c:	c1 58       	rjmp	80005a66 <display_text+0x3e>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
80005a3e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005a42:	48 e8       	lddpc	r8,80005a78 <display_text+0x50>
80005a44:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005a48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a4c:	f2 08 00 08 	add	r8,r9,r8
80005a50:	11 88       	ld.ub	r8,r8[0x0]
80005a52:	10 9b       	mov	r11,r8
80005a54:	fc 7c 14 00 	mov	r12,-191488
80005a58:	f0 1f 00 09 	mcall	80005a7c <display_text+0x54>


void display_text(unsigned char idx);
void display_text(unsigned char idx)
{
	for (int i = 0; i<7; i++)
80005a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a60:	2f f8       	sub	r8,-1
80005a62:	ef 48 ff fc 	st.w	r7[-4],r8
80005a66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a6a:	58 68       	cp.w	r8,6
80005a6c:	fe 9a ff e9 	brle	80005a3e <display_text+0x16>
	{
		usart_putchar(DISPLAY_USART, ((unsigned char) ((*(cmdPtrArray[idx]+i)))));
	}
	
}
80005a70:	2f ed       	sub	sp,-8
80005a72:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a76:	00 00       	add	r0,r0
80005a78:	00 00       	add	r0,r0
80005a7a:	00 58       	eor	r8,r0
80005a7c:	80 00       	ld.sh	r0,r0[0x0]
80005a7e:	51 38       	stdsp	sp[0x4c],r8

80005a80 <init_io>:

void init_io(void);
void init_io(void)
{
80005a80:	eb cd 40 80 	pushm	r7,lr
80005a84:	1a 97       	mov	r7,sp
80005a86:	20 1d       	sub	sp,4
	uint32_t ioFlags;
	
	
	ioFlags = (GPIO_DIR_INPUT);
80005a88:	30 08       	mov	r8,0
80005a8a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(SEALSHIELD_DOOR_LATCH, ioFlags);
80005a8e:	ee fb ff fc 	ld.w	r11,r7[-4]
80005a92:	33 ec       	mov	r12,62
80005a94:	f0 1f 00 2b 	mcall	80005b40 <init_io+0xc0>

	ioFlags = (GPIO_DIR_INPUT);
80005a98:	30 08       	mov	r8,0
80005a9a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(SEALSHIELD_ACTION_PB, ioFlags);
80005a9e:	ee fb ff fc 	ld.w	r11,r7[-4]
80005aa2:	33 fc       	mov	r12,63
80005aa4:	f0 1f 00 27 	mcall	80005b40 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005aa8:	30 38       	mov	r8,3
80005aaa:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(SEALSHIELD_SERIAL_ID0, ioFlags);
80005aae:	ee fb ff fc 	ld.w	r11,r7[-4]
80005ab2:	33 3c       	mov	r12,51
80005ab4:	f0 1f 00 23 	mcall	80005b40 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005ab8:	30 38       	mov	r8,3
80005aba:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(SEALSHIELD_SERIAL_ID1, ioFlags);
80005abe:	ee fb ff fc 	ld.w	r11,r7[-4]
80005ac2:	33 4c       	mov	r12,52
80005ac4:	f0 1f 00 1f 	mcall	80005b40 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005ac8:	30 38       	mov	r8,3
80005aca:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(SEALSHIELD_SERIAL_ID2, ioFlags);
80005ace:	ee fb ff fc 	ld.w	r11,r7[-4]
80005ad2:	33 5c       	mov	r12,53
80005ad4:	f0 1f 00 1b 	mcall	80005b40 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005ad8:	30 38       	mov	r8,3
80005ada:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(SEALSHIELD_SERIAL_ID3, ioFlags);
80005ade:	ee fb ff fc 	ld.w	r11,r7[-4]
80005ae2:	33 6c       	mov	r12,54
80005ae4:	f0 1f 00 17 	mcall	80005b40 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005ae8:	30 38       	mov	r8,3
80005aea:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(SEALSHIELD_SERIAL_ID4, ioFlags);
80005aee:	ee fb ff fc 	ld.w	r11,r7[-4]
80005af2:	33 7c       	mov	r12,55
80005af4:	f0 1f 00 13 	mcall	80005b40 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
80005af8:	30 18       	mov	r8,1
80005afa:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(SEALSHIELD_DEBUG_LED, ioFlags);
80005afe:	ee fb ff fc 	ld.w	r11,r7[-4]
80005b02:	37 cc       	mov	r12,124
80005b04:	f0 1f 00 0f 	mcall	80005b40 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005b08:	30 38       	mov	r8,3
80005b0a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(SEALSHIELD_PSUPPLY_ONn, ioFlags);
80005b0e:	ee fb ff fc 	ld.w	r11,r7[-4]
80005b12:	31 7c       	mov	r12,23
80005b14:	f0 1f 00 0b 	mcall	80005b40 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005b18:	30 38       	mov	r8,3
80005b1a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(SEALSHIELD_LED_OEn, ioFlags);
80005b1e:	ee fb ff fc 	ld.w	r11,r7[-4]
80005b22:	31 6c       	mov	r12,22
80005b24:	f0 1f 00 07 	mcall	80005b40 <init_io+0xc0>

	ioFlags = (GPIO_DIR_OUTPUT | GPIO_INIT_LOW); //high=1x multiplier, low=4x multiplier 10apr15
80005b28:	30 18       	mov	r8,1
80005b2a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_configure_pin(SEALSHIELD_MFP, ioFlags);
80005b2e:	ee fb ff fc 	ld.w	r11,r7[-4]
80005b32:	31 5c       	mov	r12,21
80005b34:	f0 1f 00 03 	mcall	80005b40 <init_io+0xc0>

}
80005b38:	2f fd       	sub	sp,-4
80005b3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b3e:	00 00       	add	r0,r0
80005b40:	80 00       	ld.sh	r0,r0[0x0]
80005b42:	3f 4c       	mov	r12,-12

80005b44 <read_serial_ids>:
int ledBoardPresent[NUM_LED_BOARDS];

/* One serial ID chip per board */
void read_serial_ids(void);
void read_serial_ids(void)
{
80005b44:	eb cd 40 e0 	pushm	r5-r7,lr
80005b48:	1a 97       	mov	r7,sp
80005b4a:	20 2d       	sub	sp,8
	/*
	 * Check for LED board presence by issuing a reset to the serial ID chip and checking for a response.
	 */
	
	SetSpeed(1); //1==standard speed, not overdrive
80005b4c:	30 1c       	mov	r12,1
80005b4e:	f0 1f 00 36 	mcall	80005c24 <read_serial_ids+0xe0>
	
	ledBoardPresent[0] = !OWTouchReset(0);
80005b52:	30 0c       	mov	r12,0
80005b54:	f0 1f 00 35 	mcall	80005c28 <read_serial_ids+0xe4>
80005b58:	18 98       	mov	r8,r12
80005b5a:	58 08       	cp.w	r8,0
80005b5c:	5f 09       	sreq	r9
80005b5e:	4b 48       	lddpc	r8,80005c2c <read_serial_ids+0xe8>
80005b60:	91 09       	st.w	r8[0x0],r9
	ledBoardPresent[1] = !OWTouchReset(1);
80005b62:	30 1c       	mov	r12,1
80005b64:	f0 1f 00 31 	mcall	80005c28 <read_serial_ids+0xe4>
80005b68:	18 98       	mov	r8,r12
80005b6a:	58 08       	cp.w	r8,0
80005b6c:	5f 09       	sreq	r9
80005b6e:	4b 08       	lddpc	r8,80005c2c <read_serial_ids+0xe8>
80005b70:	91 19       	st.w	r8[0x4],r9
	ledBoardPresent[2] = !OWTouchReset(2);
80005b72:	30 2c       	mov	r12,2
80005b74:	f0 1f 00 2d 	mcall	80005c28 <read_serial_ids+0xe4>
80005b78:	18 98       	mov	r8,r12
80005b7a:	58 08       	cp.w	r8,0
80005b7c:	5f 09       	sreq	r9
80005b7e:	4a c8       	lddpc	r8,80005c2c <read_serial_ids+0xe8>
80005b80:	91 29       	st.w	r8[0x8],r9
	ledBoardPresent[3] = !OWTouchReset(3);
80005b82:	30 3c       	mov	r12,3
80005b84:	f0 1f 00 29 	mcall	80005c28 <read_serial_ids+0xe4>
80005b88:	18 98       	mov	r8,r12
80005b8a:	58 08       	cp.w	r8,0
80005b8c:	5f 09       	sreq	r9
80005b8e:	4a 88       	lddpc	r8,80005c2c <read_serial_ids+0xe8>
80005b90:	91 39       	st.w	r8[0xc],r9
	ledBoardPresent[4] = !OWTouchReset(4);
80005b92:	30 4c       	mov	r12,4
80005b94:	f0 1f 00 25 	mcall	80005c28 <read_serial_ids+0xe4>
80005b98:	18 98       	mov	r8,r12
80005b9a:	58 08       	cp.w	r8,0
80005b9c:	5f 09       	sreq	r9
80005b9e:	4a 48       	lddpc	r8,80005c2c <read_serial_ids+0xe8>
80005ba0:	91 49       	st.w	r8[0x10],r9
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80005ba2:	30 08       	mov	r8,0
80005ba4:	ef 48 ff f8 	st.w	r7[-8],r8
80005ba8:	c3 58       	rjmp	80005c12 <read_serial_ids+0xce>
	{
		if (ledBoardPresent[i])
80005baa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005bae:	4a 08       	lddpc	r8,80005c2c <read_serial_ids+0xe8>
80005bb0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80005bb4:	58 08       	cp.w	r8,0
80005bb6:	c2 90       	breq	80005c08 <read_serial_ids+0xc4>
		{
			OWWriteByte(i, 0x33); //Read ID command
80005bb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005bbc:	5c 58       	castu.b	r8
80005bbe:	33 3b       	mov	r11,51
80005bc0:	10 9c       	mov	r12,r8
80005bc2:	f0 1f 00 1c 	mcall	80005c30 <read_serial_ids+0xec>
			
			for (int j=0; j<8; j++)
80005bc6:	30 08       	mov	r8,0
80005bc8:	ef 48 ff fc 	st.w	r7[-4],r8
80005bcc:	c1 98       	rjmp	80005bfe <read_serial_ids+0xba>
			{
				ledBrdSerialID[i][j] = OWReadByte(i);
80005bce:	ee f5 ff f8 	ld.w	r5,r7[-8]
80005bd2:	ee f6 ff fc 	ld.w	r6,r7[-4]
80005bd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005bda:	5c 58       	castu.b	r8
80005bdc:	10 9c       	mov	r12,r8
80005bde:	f0 1f 00 16 	mcall	80005c34 <read_serial_ids+0xf0>
80005be2:	18 98       	mov	r8,r12
80005be4:	5c 58       	castu.b	r8
80005be6:	49 5a       	lddpc	r10,80005c38 <read_serial_ids+0xf4>
80005be8:	ea 09 15 03 	lsl	r9,r5,0x3
80005bec:	0c 09       	add	r9,r6
80005bee:	f4 09 00 09 	add	r9,r10,r9
80005bf2:	b2 88       	st.b	r9[0x0],r8
	{
		if (ledBoardPresent[i])
		{
			OWWriteByte(i, 0x33); //Read ID command
			
			for (int j=0; j<8; j++)
80005bf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005bf8:	2f f8       	sub	r8,-1
80005bfa:	ef 48 ff fc 	st.w	r7[-4],r8
80005bfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c02:	58 78       	cp.w	r8,7
80005c04:	fe 9a ff e5 	brle	80005bce <read_serial_ids+0x8a>
	ledBoardPresent[1] = !OWTouchReset(1);
	ledBoardPresent[2] = !OWTouchReset(2);
	ledBoardPresent[3] = !OWTouchReset(3);
	ledBoardPresent[4] = !OWTouchReset(4);
	
	for (int i=0; i<NUM_LED_BOARDS; i++)
80005c08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005c0c:	2f f8       	sub	r8,-1
80005c0e:	ef 48 ff f8 	st.w	r7[-8],r8
80005c12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005c16:	58 48       	cp.w	r8,4
80005c18:	fe 9a ff c9 	brle	80005baa <read_serial_ids+0x66>
			{
				ledBrdSerialID[i][j] = OWReadByte(i);
			}
		}
	}
}
80005c1c:	2f ed       	sub	sp,-8
80005c1e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005c22:	00 00       	add	r0,r0
80005c24:	80 00       	ld.sh	r0,r0[0x0]
80005c26:	21 3c       	sub	r12,19
80005c28:	80 00       	ld.sh	r0,r0[0x0]
80005c2a:	21 fc       	sub	r12,31
80005c2c:	00 00       	add	r0,r0
80005c2e:	07 0c       	ld.w	r12,r3++
80005c30:	80 00       	ld.sh	r0,r0[0x0]
80005c32:	31 ec       	mov	r12,30
80005c34:	80 00       	ld.sh	r0,r0[0x0]
80005c36:	32 44       	mov	r4,36
80005c38:	00 00       	add	r0,r0
80005c3a:	0b a8       	ld.ub	r8,r5[0x2]

80005c3c <check_led_brd_side_lifetime>:
};

/* Each side of an LED board will get different usage */
unsigned char check_led_brd_side_lifetime(unsigned char ledBrdPosition);
unsigned char check_led_brd_side_lifetime(unsigned char ledBrdPosition)
{
80005c3c:	eb cd 40 80 	pushm	r7,lr
80005c40:	1a 97       	mov	r7,sp
80005c42:	20 1d       	sub	sp,4
80005c44:	18 98       	mov	r8,r12
80005c46:	ef 68 ff fc 	st.b	r7[-4],r8
	 *			refurbished. This will require variable array storage. I could also create a linked
	 *			list to go with it to sort the IDs in numerial order to make them easier to find, otherwise
	 *			have to sort through the whole list every time, could get slow.
	 */
	
	return LED_BOARD_SIDE_WITHIN_LIFETIME_LIMIT;	//TODO: Every board is within limit for now. Perhaps hardcode one as out of spec
80005c4a:	30 18       	mov	r8,1
													//		for demo purposes.
 	
}
80005c4c:	10 9c       	mov	r12,r8
80005c4e:	2f fd       	sub	sp,-4
80005c50:	e3 cd 80 80 	ldm	sp++,r7,pc

80005c54 <check_led_brd_side_lifetimes>:

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
80005c54:	eb cd 40 c0 	pushm	r6-r7,lr
80005c58:	1a 97       	mov	r7,sp
80005c5a:	20 1d       	sub	sp,4
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80005c5c:	30 08       	mov	r8,0
80005c5e:	ef 48 ff fc 	st.w	r7[-4],r8
80005c62:	c1 28       	rjmp	80005c86 <check_led_brd_side_lifetimes+0x32>
	{
		brdSideWithinLifetimeLimit[i] = check_led_brd_side_lifetime(i);
80005c64:	ee f6 ff fc 	ld.w	r6,r7[-4]
80005c68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c6c:	5c 58       	castu.b	r8
80005c6e:	10 9c       	mov	r12,r8
80005c70:	f0 1f 00 0a 	mcall	80005c98 <check_led_brd_side_lifetimes+0x44>
80005c74:	18 98       	mov	r8,r12
80005c76:	48 a9       	lddpc	r9,80005c9c <check_led_brd_side_lifetimes+0x48>
80005c78:	f2 06 0b 08 	st.b	r9[r6],r8

/* Aggregate the information */
void check_led_brd_side_lifetimes(void);
void check_led_brd_side_lifetimes(void)
{
	for (int i=0; i<NUM_LED_BOARD_SIDES; i++)
80005c7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c80:	2f f8       	sub	r8,-1
80005c82:	ef 48 ff fc 	st.w	r7[-4],r8
80005c86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c8a:	58 78       	cp.w	r8,7
80005c8c:	fe 9a ff ec 	brle	80005c64 <check_led_brd_side_lifetimes+0x10>
	{
		brdSideWithinLifetimeLimit[i] = check_led_brd_side_lifetime(i);
	}
}
80005c90:	2f fd       	sub	sp,-4
80005c92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005c96:	00 00       	add	r0,r0
80005c98:	80 00       	ld.sh	r0,r0[0x0]
80005c9a:	5c 3c       	neg	r12
80005c9c:	00 00       	add	r0,r0
80005c9e:	09 84       	ld.ub	r4,r4[0x0]

80005ca0 <adc_process_task>:

volatile avr32_adcifa_t *adcifa = &AVR32_ADCIFA; // ADCIFA IP registers address

int16_t adc_process_task(unsigned char shelfIdx);
int16_t adc_process_task(unsigned char shelfIdx)
{
80005ca0:	eb cd 40 80 	pushm	r7,lr
80005ca4:	1a 97       	mov	r7,sp
80005ca6:	20 3d       	sub	sp,12
80005ca8:	18 98       	mov	r8,r12
80005caa:	ef 68 ff f4 	st.b	r7[-12],r8
	int32_t i;

	volatile int16_t retVal;

	switch (shelfIdx)
80005cae:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005cb2:	58 18       	cp.w	r8,1
80005cb4:	c5 30       	breq	80005d5a <adc_process_task+0xba>
80005cb6:	e0 89 00 05 	brgt	80005cc0 <adc_process_task+0x20>
80005cba:	58 08       	cp.w	r8,0
80005cbc:	c0 90       	breq	80005cce <adc_process_task+0x2e>
80005cbe:	c0 f9       	rjmp	80005edc <adc_process_task+0x23c>
80005cc0:	58 28       	cp.w	r8,2
80005cc2:	e0 80 00 8c 	breq	80005dda <adc_process_task+0x13a>
80005cc6:	58 38       	cp.w	r8,3
80005cc8:	e0 80 00 c9 	breq	80005e5a <adc_process_task+0x1ba>
80005ccc:	c0 89       	rjmp	80005edc <adc_process_task+0x23c>
	{
		case 0:
			// Configure ADCIFA sequencer 0 shelf 1
			adcifa_configure_sequencer(adcifa, 0,
80005cce:	fe f8 02 1e 	ld.w	r8,pc[542]
80005cd2:	70 08       	ld.w	r8,r8[0x0]
80005cd4:	fe f9 02 1c 	ld.w	r9,pc[540]
80005cd8:	fe fa 02 1c 	ld.w	r10,pc[540]
80005cdc:	30 0b       	mov	r11,0
80005cde:	10 9c       	mov	r12,r8
80005ce0:	f0 1f 00 86 	mcall	80005ef8 <adc_process_task+0x258>
			&adcifa_sequence_opt,
			adcifa_sequence_conversion_opt_seq0_shelf1);

			// Start ADCIFA sequencer 0
			adcifa_start_sequencer(adcifa, 0);
80005ce4:	fe f8 02 08 	ld.w	r8,pc[520]
80005ce8:	70 08       	ld.w	r8,r8[0x0]
80005cea:	30 0b       	mov	r11,0
80005cec:	10 9c       	mov	r12,r8
80005cee:	f0 1f 00 84 	mcall	80005efc <adc_process_task+0x25c>

			// Get Values from sequencer 0
			if (adcifa_get_values_from_sequencer(adcifa,
80005cf2:	4f f8       	lddpc	r8,80005eec <adc_process_task+0x24c>
80005cf4:	70 08       	ld.w	r8,r8[0x0]
80005cf6:	fe f9 02 0a 	ld.w	r9,pc[522]
80005cfa:	4f fa       	lddpc	r10,80005ef4 <adc_process_task+0x254>
80005cfc:	30 0b       	mov	r11,0
80005cfe:	10 9c       	mov	r12,r8
80005d00:	f0 1f 00 81 	mcall	80005f04 <adc_process_task+0x264>
80005d04:	18 98       	mov	r8,r12
80005d06:	10 99       	mov	r9,r8
80005d08:	30 28       	mov	r8,2
80005d0a:	f0 09 18 00 	cp.b	r9,r8
80005d0e:	e0 81 00 e6 	brne	80005eda <adc_process_task+0x23a>
			0,
			&adcifa_sequence_opt,
			adc_values_seq0) == ADCIFA_STATUS_COMPLETED) {
				for (i=BUFFER_LENGTH-1;i>=1;i--) {
80005d12:	e0 68 00 ff 	mov	r8,255
80005d16:	ef 48 ff fc 	st.w	r7[-4],r8
80005d1a:	c1 28       	rjmp	80005d3e <adc_process_task+0x9e>
					bluesense0_buf[i] = bluesense0_buf[i-1];
80005d1c:	ee fa ff fc 	ld.w	r10,r7[-4]
80005d20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d24:	f0 c9 00 01 	sub	r9,r8,1
80005d28:	4f 88       	lddpc	r8,80005f08 <adc_process_task+0x268>
80005d2a:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80005d2e:	4f 79       	lddpc	r9,80005f08 <adc_process_task+0x268>
80005d30:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
			// Get Values from sequencer 0
			if (adcifa_get_values_from_sequencer(adcifa,
			0,
			&adcifa_sequence_opt,
			adc_values_seq0) == ADCIFA_STATUS_COMPLETED) {
				for (i=BUFFER_LENGTH-1;i>=1;i--) {
80005d34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d38:	20 18       	sub	r8,1
80005d3a:	ef 48 ff fc 	st.w	r7[-4],r8
80005d3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d42:	58 08       	cp.w	r8,0
80005d44:	fe 99 ff ec 	brgt	80005d1c <adc_process_task+0x7c>
					bluesense0_buf[i] = bluesense0_buf[i-1];
				}
				bluesense0_buf[0] = adc_values_seq0[0];
80005d48:	4e e8       	lddpc	r8,80005f00 <adc_process_task+0x260>
80005d4a:	90 08       	ld.sh	r8,r8[0x0]
80005d4c:	4e f9       	lddpc	r9,80005f08 <adc_process_task+0x268>
80005d4e:	b2 08       	st.h	r9[0x0],r8
				retVal = bluesense0_buf[0];
80005d50:	4e e8       	lddpc	r8,80005f08 <adc_process_task+0x268>
80005d52:	90 08       	ld.sh	r8,r8[0x0]
80005d54:	ef 58 ff fa 	st.h	r7[-6],r8
			}
			break;
80005d58:	cc 28       	rjmp	80005edc <adc_process_task+0x23c>
		
		case 1:
			// Configure ADCIFA sequencer 1 shelf 2
			adcifa_configure_sequencer(adcifa, 1,
80005d5a:	4e 58       	lddpc	r8,80005eec <adc_process_task+0x24c>
80005d5c:	70 08       	ld.w	r8,r8[0x0]
80005d5e:	4e c9       	lddpc	r9,80005f0c <adc_process_task+0x26c>
80005d60:	4e 5a       	lddpc	r10,80005ef4 <adc_process_task+0x254>
80005d62:	30 1b       	mov	r11,1
80005d64:	10 9c       	mov	r12,r8
80005d66:	f0 1f 00 65 	mcall	80005ef8 <adc_process_task+0x258>
			&adcifa_sequence_opt,
			adcifa_sequence_conversion_opt_seq1_shelf2);

			// Start ADCIFA sequencer 1
			adcifa_start_sequencer(adcifa, 1);
80005d6a:	4e 18       	lddpc	r8,80005eec <adc_process_task+0x24c>
80005d6c:	70 08       	ld.w	r8,r8[0x0]
80005d6e:	30 1b       	mov	r11,1
80005d70:	10 9c       	mov	r12,r8
80005d72:	f0 1f 00 63 	mcall	80005efc <adc_process_task+0x25c>

			// Get Values from sequencer 1
			if (adcifa_get_values_from_sequencer(adcifa,
80005d76:	4d e8       	lddpc	r8,80005eec <adc_process_task+0x24c>
80005d78:	70 08       	ld.w	r8,r8[0x0]
80005d7a:	4e 69       	lddpc	r9,80005f10 <adc_process_task+0x270>
80005d7c:	4d ea       	lddpc	r10,80005ef4 <adc_process_task+0x254>
80005d7e:	30 1b       	mov	r11,1
80005d80:	10 9c       	mov	r12,r8
80005d82:	f0 1f 00 61 	mcall	80005f04 <adc_process_task+0x264>
80005d86:	18 98       	mov	r8,r12
80005d88:	10 99       	mov	r9,r8
80005d8a:	30 28       	mov	r8,2
80005d8c:	f0 09 18 00 	cp.b	r9,r8
80005d90:	c2 01       	brne	80005dd0 <adc_process_task+0x130>
			1,
			&adcifa_sequence_opt,
			adc_values_seq1) == ADCIFA_STATUS_COMPLETED) {
				for (i=BUFFER_LENGTH-1;i>=1;i--) {
80005d92:	e0 68 00 ff 	mov	r8,255
80005d96:	ef 48 ff fc 	st.w	r7[-4],r8
80005d9a:	c1 28       	rjmp	80005dbe <adc_process_task+0x11e>
					bluesense1_buf[i] = bluesense1_buf[i-1];
80005d9c:	ee fa ff fc 	ld.w	r10,r7[-4]
80005da0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005da4:	f0 c9 00 01 	sub	r9,r8,1
80005da8:	4d b8       	lddpc	r8,80005f14 <adc_process_task+0x274>
80005daa:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80005dae:	4d a9       	lddpc	r9,80005f14 <adc_process_task+0x274>
80005db0:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
			// Get Values from sequencer 1
			if (adcifa_get_values_from_sequencer(adcifa,
			1,
			&adcifa_sequence_opt,
			adc_values_seq1) == ADCIFA_STATUS_COMPLETED) {
				for (i=BUFFER_LENGTH-1;i>=1;i--) {
80005db4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005db8:	20 18       	sub	r8,1
80005dba:	ef 48 ff fc 	st.w	r7[-4],r8
80005dbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005dc2:	58 08       	cp.w	r8,0
80005dc4:	fe 99 ff ec 	brgt	80005d9c <adc_process_task+0xfc>
					bluesense1_buf[i] = bluesense1_buf[i-1];
				}
				bluesense1_buf[0] = adc_values_seq1[0];
80005dc8:	4d 28       	lddpc	r8,80005f10 <adc_process_task+0x270>
80005dca:	90 08       	ld.sh	r8,r8[0x0]
80005dcc:	4d 29       	lddpc	r9,80005f14 <adc_process_task+0x274>
80005dce:	b2 08       	st.h	r9[0x0],r8
			}
			retVal = bluesense1_buf[0];
80005dd0:	4d 18       	lddpc	r8,80005f14 <adc_process_task+0x274>
80005dd2:	90 08       	ld.sh	r8,r8[0x0]
80005dd4:	ef 58 ff fa 	st.h	r7[-6],r8
			break;
80005dd8:	c8 28       	rjmp	80005edc <adc_process_task+0x23c>
		
		case 2:
			// Configure ADCIFA sequencer 0 shelf 3
			adcifa_configure_sequencer(adcifa, 0,
80005dda:	4c 58       	lddpc	r8,80005eec <adc_process_task+0x24c>
80005ddc:	70 08       	ld.w	r8,r8[0x0]
80005dde:	4c f9       	lddpc	r9,80005f18 <adc_process_task+0x278>
80005de0:	4c 5a       	lddpc	r10,80005ef4 <adc_process_task+0x254>
80005de2:	30 0b       	mov	r11,0
80005de4:	10 9c       	mov	r12,r8
80005de6:	f0 1f 00 45 	mcall	80005ef8 <adc_process_task+0x258>
			&adcifa_sequence_opt,
			adcifa_sequence_conversion_opt_seq0_shelf3);

			// Start ADCIFA sequencer 0
			adcifa_start_sequencer(adcifa, 0);
80005dea:	4c 18       	lddpc	r8,80005eec <adc_process_task+0x24c>
80005dec:	70 08       	ld.w	r8,r8[0x0]
80005dee:	30 0b       	mov	r11,0
80005df0:	10 9c       	mov	r12,r8
80005df2:	f0 1f 00 43 	mcall	80005efc <adc_process_task+0x25c>

			// Get Values from sequencer 2
			if (adcifa_get_values_from_sequencer(adcifa,
80005df6:	4b e8       	lddpc	r8,80005eec <adc_process_task+0x24c>
80005df8:	70 08       	ld.w	r8,r8[0x0]
80005dfa:	4c 29       	lddpc	r9,80005f00 <adc_process_task+0x260>
80005dfc:	4b ea       	lddpc	r10,80005ef4 <adc_process_task+0x254>
80005dfe:	30 0b       	mov	r11,0
80005e00:	10 9c       	mov	r12,r8
80005e02:	f0 1f 00 41 	mcall	80005f04 <adc_process_task+0x264>
80005e06:	18 98       	mov	r8,r12
80005e08:	10 99       	mov	r9,r8
80005e0a:	30 28       	mov	r8,2
80005e0c:	f0 09 18 00 	cp.b	r9,r8
80005e10:	c2 01       	brne	80005e50 <adc_process_task+0x1b0>
			0,
			&adcifa_sequence_opt,
			adc_values_seq0) == ADCIFA_STATUS_COMPLETED) {
				for (i=BUFFER_LENGTH-1;i>=1;i--) {
80005e12:	e0 68 00 ff 	mov	r8,255
80005e16:	ef 48 ff fc 	st.w	r7[-4],r8
80005e1a:	c1 28       	rjmp	80005e3e <adc_process_task+0x19e>
					bluesense2_buf[i] = bluesense2_buf[i-1];
80005e1c:	ee fa ff fc 	ld.w	r10,r7[-4]
80005e20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e24:	f0 c9 00 01 	sub	r9,r8,1
80005e28:	4b d8       	lddpc	r8,80005f1c <adc_process_task+0x27c>
80005e2a:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80005e2e:	4b c9       	lddpc	r9,80005f1c <adc_process_task+0x27c>
80005e30:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
			// Get Values from sequencer 2
			if (adcifa_get_values_from_sequencer(adcifa,
			0,
			&adcifa_sequence_opt,
			adc_values_seq0) == ADCIFA_STATUS_COMPLETED) {
				for (i=BUFFER_LENGTH-1;i>=1;i--) {
80005e34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e38:	20 18       	sub	r8,1
80005e3a:	ef 48 ff fc 	st.w	r7[-4],r8
80005e3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e42:	58 08       	cp.w	r8,0
80005e44:	fe 99 ff ec 	brgt	80005e1c <adc_process_task+0x17c>
					bluesense2_buf[i] = bluesense2_buf[i-1];
				}
				bluesense2_buf[0] = adc_values_seq0[0];
80005e48:	4a e8       	lddpc	r8,80005f00 <adc_process_task+0x260>
80005e4a:	90 08       	ld.sh	r8,r8[0x0]
80005e4c:	4b 49       	lddpc	r9,80005f1c <adc_process_task+0x27c>
80005e4e:	b2 08       	st.h	r9[0x0],r8
			}
			retVal = bluesense2_buf[0];
80005e50:	4b 38       	lddpc	r8,80005f1c <adc_process_task+0x27c>
80005e52:	90 08       	ld.sh	r8,r8[0x0]
80005e54:	ef 58 ff fa 	st.h	r7[-6],r8
			break;
80005e58:	c4 28       	rjmp	80005edc <adc_process_task+0x23c>
		
		case 3:
			// Configure ADCIFA sequencer 1 shelf 4
			adcifa_configure_sequencer(adcifa, 1,
80005e5a:	4a 58       	lddpc	r8,80005eec <adc_process_task+0x24c>
80005e5c:	70 08       	ld.w	r8,r8[0x0]
80005e5e:	4b 19       	lddpc	r9,80005f20 <adc_process_task+0x280>
80005e60:	4a 5a       	lddpc	r10,80005ef4 <adc_process_task+0x254>
80005e62:	30 1b       	mov	r11,1
80005e64:	10 9c       	mov	r12,r8
80005e66:	f0 1f 00 25 	mcall	80005ef8 <adc_process_task+0x258>
			&adcifa_sequence_opt,
			adcifa_sequence_conversion_opt_seq1_shelf4);

			// Start ADCIFA sequencer 1
			adcifa_start_sequencer(adcifa, 1);
80005e6a:	4a 18       	lddpc	r8,80005eec <adc_process_task+0x24c>
80005e6c:	70 08       	ld.w	r8,r8[0x0]
80005e6e:	30 1b       	mov	r11,1
80005e70:	10 9c       	mov	r12,r8
80005e72:	f0 1f 00 23 	mcall	80005efc <adc_process_task+0x25c>

			// Get Values from sequencer 1
			if (adcifa_get_values_from_sequencer(adcifa,
80005e76:	49 e8       	lddpc	r8,80005eec <adc_process_task+0x24c>
80005e78:	70 08       	ld.w	r8,r8[0x0]
80005e7a:	4a 69       	lddpc	r9,80005f10 <adc_process_task+0x270>
80005e7c:	49 ea       	lddpc	r10,80005ef4 <adc_process_task+0x254>
80005e7e:	30 1b       	mov	r11,1
80005e80:	10 9c       	mov	r12,r8
80005e82:	f0 1f 00 21 	mcall	80005f04 <adc_process_task+0x264>
80005e86:	18 98       	mov	r8,r12
80005e88:	10 99       	mov	r9,r8
80005e8a:	30 28       	mov	r8,2
80005e8c:	f0 09 18 00 	cp.b	r9,r8
80005e90:	c2 01       	brne	80005ed0 <adc_process_task+0x230>
			1,
			&adcifa_sequence_opt,
			adc_values_seq1) == ADCIFA_STATUS_COMPLETED) {
				for (i=BUFFER_LENGTH-1;i>=1;i--) {
80005e92:	e0 68 00 ff 	mov	r8,255
80005e96:	ef 48 ff fc 	st.w	r7[-4],r8
80005e9a:	c1 28       	rjmp	80005ebe <adc_process_task+0x21e>
					bluesense3_buf[i] = bluesense3_buf[i-1];
80005e9c:	ee fa ff fc 	ld.w	r10,r7[-4]
80005ea0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ea4:	f0 c9 00 01 	sub	r9,r8,1
80005ea8:	49 f8       	lddpc	r8,80005f24 <adc_process_task+0x284>
80005eaa:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80005eae:	49 e9       	lddpc	r9,80005f24 <adc_process_task+0x284>
80005eb0:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
			// Get Values from sequencer 1
			if (adcifa_get_values_from_sequencer(adcifa,
			1,
			&adcifa_sequence_opt,
			adc_values_seq1) == ADCIFA_STATUS_COMPLETED) {
				for (i=BUFFER_LENGTH-1;i>=1;i--) {
80005eb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005eb8:	20 18       	sub	r8,1
80005eba:	ef 48 ff fc 	st.w	r7[-4],r8
80005ebe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ec2:	58 08       	cp.w	r8,0
80005ec4:	fe 99 ff ec 	brgt	80005e9c <adc_process_task+0x1fc>
					bluesense3_buf[i] = bluesense3_buf[i-1];
				}
				bluesense3_buf[0] = adc_values_seq1[0];
80005ec8:	49 28       	lddpc	r8,80005f10 <adc_process_task+0x270>
80005eca:	90 08       	ld.sh	r8,r8[0x0]
80005ecc:	49 69       	lddpc	r9,80005f24 <adc_process_task+0x284>
80005ece:	b2 08       	st.h	r9[0x0],r8
			}
			retVal = bluesense3_buf[0];
80005ed0:	49 58       	lddpc	r8,80005f24 <adc_process_task+0x284>
80005ed2:	90 08       	ld.sh	r8,r8[0x0]
80005ed4:	ef 58 ff fa 	st.h	r7[-6],r8
80005ed8:	c0 28       	rjmp	80005edc <adc_process_task+0x23c>
					bluesense0_buf[i] = bluesense0_buf[i-1];
				}
				bluesense0_buf[0] = adc_values_seq0[0];
				retVal = bluesense0_buf[0];
			}
			break;
80005eda:	d7 03       	nop
			}
			retVal = bluesense3_buf[0];
			break;
	}
	
	return retVal;
80005edc:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80005ee0:	5c 88       	casts.h	r8

}
80005ee2:	10 9c       	mov	r12,r8
80005ee4:	2f dd       	sub	sp,-12
80005ee6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005eea:	00 00       	add	r0,r0
80005eec:	00 00       	add	r0,r0
80005eee:	00 a8       	st.w	r0++,r8
80005ef0:	00 00       	add	r0,r0
80005ef2:	00 9b       	mov	r11,r0
80005ef4:	00 00       	add	r0,r0
80005ef6:	00 94       	mov	r4,r0
80005ef8:	80 00       	ld.sh	r0,r0[0x0]
80005efa:	35 ec       	mov	r12,94
80005efc:	80 00       	ld.sh	r0,r0[0x0]
80005efe:	3a fc       	mov	r12,-81
80005f00:	00 00       	add	r0,r0
80005f02:	03 08       	ld.w	r8,r1++
80005f04:	80 00       	ld.sh	r0,r0[0x0]
80005f06:	3b 88       	mov	r8,-72
80005f08:	00 00       	add	r0,r0
80005f0a:	03 0c       	ld.w	r12,r1++
80005f0c:	00 00       	add	r0,r0
80005f0e:	00 9e       	mov	lr,r0
80005f10:	00 00       	add	r0,r0
80005f12:	09 9c       	ld.ub	r12,r4[0x1]
80005f14:	00 00       	add	r0,r0
80005f16:	09 a8       	ld.ub	r8,r4[0x2]
80005f18:	00 00       	add	r0,r0
80005f1a:	00 a1       	st.w	r0++,r1
80005f1c:	00 00       	add	r0,r0
80005f1e:	05 0c       	ld.w	r12,r2++
80005f20:	00 00       	add	r0,r0
80005f22:	00 a4       	st.w	r0++,r4
80005f24:	00 00       	add	r0,r0
80005f26:	07 20       	ld.uh	r0,r3++

80005f28 <check_shelf_for_devices>:
	DEVICES_PRESENT
};

unsigned char check_shelf_for_devices(unsigned char shelfPosition);
unsigned char check_shelf_for_devices(unsigned char shelfPosition)
{
80005f28:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005f2c:	1a 97       	mov	r7,sp
80005f2e:	20 dd       	sub	sp,52
80005f30:	18 98       	mov	r8,r12
80005f32:	ef 68 ff cc 	st.b	r7[-52],r8
	U16 bluesense;
	unsigned char retVal;
	
	led_shelf(shelfPosition, LED_ON); //TODO: do we finish this task fast enough to not check the door latch in here? Can't have LEDs on if the door opens
80005f36:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80005f3a:	30 1b       	mov	r11,1
80005f3c:	10 9c       	mov	r12,r8
80005f3e:	f0 1f 00 7f 	mcall	80006138 <check_shelf_for_devices+0x210>
80005f42:	33 28       	mov	r8,50
80005f44:	ef 48 ff e4 	st.w	r7[-28],r8
80005f48:	e0 68 12 00 	mov	r8,4608
80005f4c:	ea 18 00 7a 	orh	r8,0x7a
80005f50:	ef 48 ff e0 	st.w	r7[-32],r8
80005f54:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005f58:	ef 48 ff ec 	st.w	r7[-20],r8
80005f5c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005f60:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005f64:	ee f0 ff ec 	ld.w	r0,r7[-20]
80005f68:	30 01       	mov	r1,0
80005f6a:	ee f2 ff e8 	ld.w	r2,r7[-24]
80005f6e:	30 03       	mov	r3,0
80005f70:	e2 02 02 4a 	mul	r10,r1,r2
80005f74:	e6 00 02 48 	mul	r8,r3,r0
80005f78:	10 0a       	add	r10,r8
80005f7a:	e0 02 06 48 	mulu.d	r8,r0,r2
80005f7e:	12 0a       	add	r10,r9
80005f80:	14 99       	mov	r9,r10
80005f82:	e0 6a 03 e7 	mov	r10,999
80005f86:	30 0b       	mov	r11,0
80005f88:	f0 0a 00 0a 	add	r10,r8,r10
80005f8c:	f2 0b 00 4b 	adc	r11,r9,r11
80005f90:	e0 68 03 e8 	mov	r8,1000
80005f94:	30 09       	mov	r9,0
80005f96:	f0 1f 00 6a 	mcall	8000613c <check_shelf_for_devices+0x214>
80005f9a:	14 98       	mov	r8,r10
80005f9c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005f9e:	ef 48 ff f4 	st.w	r7[-12],r8
80005fa2:	ee c8 00 30 	sub	r8,r7,48
80005fa6:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005faa:	e1 b8 00 42 	mfsr	r8,0x108
80005fae:	10 99       	mov	r9,r8
80005fb0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005fb4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005fb6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005fba:	70 09       	ld.w	r9,r8[0x0]
80005fbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fc0:	10 09       	add	r9,r8
80005fc2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005fc6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005fc8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005fcc:	30 08       	mov	r8,0
80005fce:	f3 68 00 08 	st.b	r9[8],r8
80005fd2:	ee c8 00 30 	sub	r8,r7,48
80005fd6:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005fda:	e1 b8 00 42 	mfsr	r8,0x108
80005fde:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005fe2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fe6:	f1 39 00 08 	ld.ub	r9,r8[8]
80005fea:	30 28       	mov	r8,2
80005fec:	f0 09 18 00 	cp.b	r9,r8
80005ff0:	c0 31       	brne	80005ff6 <check_shelf_for_devices+0xce>
    return false;
80005ff2:	30 08       	mov	r8,0
80005ff4:	c4 38       	rjmp	8000607a <check_shelf_for_devices+0x152>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005ff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ffa:	f1 39 00 08 	ld.ub	r9,r8[8]
80005ffe:	30 18       	mov	r8,1
80006000:	f0 09 18 00 	cp.b	r9,r8
80006004:	c0 31       	brne	8000600a <check_shelf_for_devices+0xe2>
    return true;
80006006:	30 18       	mov	r8,1
80006008:	c3 98       	rjmp	8000607a <check_shelf_for_devices+0x152>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000600a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000600e:	70 09       	ld.w	r9,r8[0x0]
80006010:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006014:	70 18       	ld.w	r8,r8[0x4]
80006016:	10 39       	cp.w	r9,r8
80006018:	e0 88 00 1a 	brls	8000604c <check_shelf_for_devices+0x124>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000601c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006020:	70 08       	ld.w	r8,r8[0x0]
80006022:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006026:	10 39       	cp.w	r9,r8
80006028:	c1 02       	brcc	80006048 <check_shelf_for_devices+0x120>
8000602a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000602e:	70 18       	ld.w	r8,r8[0x4]
80006030:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006034:	10 39       	cp.w	r9,r8
80006036:	e0 88 00 09 	brls	80006048 <check_shelf_for_devices+0x120>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000603a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000603e:	30 18       	mov	r8,1
80006040:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006044:	30 18       	mov	r8,1
80006046:	c1 a8       	rjmp	8000607a <check_shelf_for_devices+0x152>
    }
    return false;
80006048:	30 08       	mov	r8,0
8000604a:	c1 88       	rjmp	8000607a <check_shelf_for_devices+0x152>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000604c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006050:	70 08       	ld.w	r8,r8[0x0]
80006052:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006056:	10 39       	cp.w	r9,r8
80006058:	c0 93       	brcs	8000606a <check_shelf_for_devices+0x142>
8000605a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000605e:	70 18       	ld.w	r8,r8[0x4]
80006060:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006064:	10 39       	cp.w	r9,r8
80006066:	e0 88 00 09 	brls	80006078 <check_shelf_for_devices+0x150>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000606a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000606e:	30 18       	mov	r8,1
80006070:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006074:	30 18       	mov	r8,1
80006076:	c0 28       	rjmp	8000607a <check_shelf_for_devices+0x152>
    }
    return false;
80006078:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000607a:	58 08       	cp.w	r8,0
8000607c:	ca b0       	breq	80005fd2 <check_shelf_for_devices+0xaa>
	
	cpu_delay_ms(50, 8000000);
		
	//Read bluesense for this shelf
	bluesense = 0;
8000607e:	30 08       	mov	r8,0
80006080:	ef 58 ff dc 	st.h	r7[-36],r8
	bluesense = adc_process_task(shelfPosition);
80006084:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80006088:	10 9c       	mov	r12,r8
8000608a:	f0 1f 00 2e 	mcall	80006140 <check_shelf_for_devices+0x218>
8000608e:	18 98       	mov	r8,r12
80006090:	ef 58 ff dc 	st.h	r7[-36],r8

	led_shelf(shelfPosition, LED_OFF);
80006094:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80006098:	30 0b       	mov	r11,0
8000609a:	10 9c       	mov	r12,r8
8000609c:	f0 1f 00 27 	mcall	80006138 <check_shelf_for_devices+0x210>
	
	retVal = NO_DEVICES_PRESENT;
800060a0:	30 08       	mov	r8,0
800060a2:	ef 68 ff df 	st.b	r7[-33],r8

	switch(shelfPosition)
800060a6:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800060aa:	58 18       	cp.w	r8,1
800060ac:	c1 70       	breq	800060da <check_shelf_for_devices+0x1b2>
800060ae:	e0 89 00 05 	brgt	800060b8 <check_shelf_for_devices+0x190>
800060b2:	58 08       	cp.w	r8,0
800060b4:	c0 70       	breq	800060c2 <check_shelf_for_devices+0x19a>
800060b6:	c3 b8       	rjmp	8000612c <check_shelf_for_devices+0x204>
800060b8:	58 28       	cp.w	r8,2
800060ba:	c1 c0       	breq	800060f2 <check_shelf_for_devices+0x1ca>
800060bc:	58 38       	cp.w	r8,3
800060be:	c2 60       	breq	8000610a <check_shelf_for_devices+0x1e2>
800060c0:	c3 68       	rjmp	8000612c <check_shelf_for_devices+0x204>
	{
		case 0:
			if (bluesense > 0x800) {
800060c2:	ef 09 ff dc 	ld.sh	r9,r7[-36]
800060c6:	e0 68 08 00 	mov	r8,2048
800060ca:	f0 09 19 00 	cp.h	r9,r8
800060ce:	e0 88 00 2a 	brls	80006122 <check_shelf_for_devices+0x1fa>
				retVal = DEVICES_PRESENT;
800060d2:	30 18       	mov	r8,1
800060d4:	ef 68 ff df 	st.b	r7[-33],r8
			}
			break;
800060d8:	c2 a8       	rjmp	8000612c <check_shelf_for_devices+0x204>
		case 1:
			if (bluesense > 0x800) {
800060da:	ef 09 ff dc 	ld.sh	r9,r7[-36]
800060de:	e0 68 08 00 	mov	r8,2048
800060e2:	f0 09 19 00 	cp.h	r9,r8
800060e6:	e0 88 00 20 	brls	80006126 <check_shelf_for_devices+0x1fe>
				retVal = DEVICES_PRESENT;
800060ea:	30 18       	mov	r8,1
800060ec:	ef 68 ff df 	st.b	r7[-33],r8
			}
			break;
800060f0:	c1 e8       	rjmp	8000612c <check_shelf_for_devices+0x204>
		case 2:
			if (bluesense > 0x800) {
800060f2:	ef 09 ff dc 	ld.sh	r9,r7[-36]
800060f6:	e0 68 08 00 	mov	r8,2048
800060fa:	f0 09 19 00 	cp.h	r9,r8
800060fe:	e0 88 00 16 	brls	8000612a <check_shelf_for_devices+0x202>
				retVal = DEVICES_PRESENT;
80006102:	30 18       	mov	r8,1
80006104:	ef 68 ff df 	st.b	r7[-33],r8
			}
			break;
80006108:	c1 28       	rjmp	8000612c <check_shelf_for_devices+0x204>
		case 3:
			if (bluesense > 0x800) {
8000610a:	ef 09 ff dc 	ld.sh	r9,r7[-36]
8000610e:	e0 68 08 00 	mov	r8,2048
80006112:	f0 09 19 00 	cp.h	r9,r8
80006116:	e0 88 00 0b 	brls	8000612c <check_shelf_for_devices+0x204>
				retVal = DEVICES_PRESENT;
8000611a:	30 18       	mov	r8,1
8000611c:	ef 68 ff df 	st.b	r7[-33],r8
80006120:	c0 68       	rjmp	8000612c <check_shelf_for_devices+0x204>
	{
		case 0:
			if (bluesense > 0x800) {
				retVal = DEVICES_PRESENT;
			}
			break;
80006122:	d7 03       	nop
80006124:	c0 48       	rjmp	8000612c <check_shelf_for_devices+0x204>
		case 1:
			if (bluesense > 0x800) {
				retVal = DEVICES_PRESENT;
			}
			break;
80006126:	d7 03       	nop
80006128:	c0 28       	rjmp	8000612c <check_shelf_for_devices+0x204>
		case 2:
			if (bluesense > 0x800) {
				retVal = DEVICES_PRESENT;
			}
			break;
8000612a:	d7 03       	nop
			}
			break;
	}
	

	return retVal;
8000612c:	ef 38 ff df 	ld.ub	r8,r7[-33]
}
80006130:	10 9c       	mov	r12,r8
80006132:	2f 3d       	sub	sp,-52
80006134:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80006138:	80 00       	ld.sh	r0,r0[0x0]
8000613a:	57 34       	stdsp	sp[0x1cc],r4
8000613c:	80 00       	ld.sh	r0,r0[0x0]
8000613e:	71 c8       	ld.w	r8,r8[0x70]
80006140:	80 00       	ld.sh	r0,r0[0x0]
80006142:	5c a0       	swap.h	r0

80006144 <check_shelves_for_devices>:

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
80006144:	eb cd 40 c0 	pushm	r6-r7,lr
80006148:	1a 97       	mov	r7,sp
8000614a:	20 1d       	sub	sp,4
	for (int i=0; i<NUM_SHELVES; i++)
8000614c:	30 08       	mov	r8,0
8000614e:	ef 48 ff fc 	st.w	r7[-4],r8
80006152:	c1 28       	rjmp	80006176 <check_shelves_for_devices+0x32>
	{
		devicesPresentOnShelf[i] = check_shelf_for_devices(i);
80006154:	ee f6 ff fc 	ld.w	r6,r7[-4]
80006158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000615c:	5c 58       	castu.b	r8
8000615e:	10 9c       	mov	r12,r8
80006160:	f0 1f 00 0a 	mcall	80006188 <check_shelves_for_devices+0x44>
80006164:	18 98       	mov	r8,r12
80006166:	48 a9       	lddpc	r9,8000618c <check_shelves_for_devices+0x48>
80006168:	f2 06 0b 08 	st.b	r9[r6],r8
}

void check_shelves_for_devices(void);
void check_shelves_for_devices(void)
{
	for (int i=0; i<NUM_SHELVES; i++)
8000616c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006170:	2f f8       	sub	r8,-1
80006172:	ef 48 ff fc 	st.w	r7[-4],r8
80006176:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000617a:	58 38       	cp.w	r8,3
8000617c:	fe 9a ff ec 	brle	80006154 <check_shelves_for_devices+0x10>
	{
		devicesPresentOnShelf[i] = check_shelf_for_devices(i);
	}
}
80006180:	2f fd       	sub	sp,-4
80006182:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006186:	00 00       	add	r0,r0
80006188:	80 00       	ld.sh	r0,r0[0x0]
8000618a:	5f 28       	srhs	r8
8000618c:	00 00       	add	r0,r0
8000618e:	09 a0       	ld.ub	r0,r4[0x2]

80006190 <set_shelves_active_inactive>:

unsigned char topEflag0, topEflag1, botEflag0, botEflag1;

void set_shelves_active_inactive(void);
void set_shelves_active_inactive(void)
{
80006190:	eb cd 40 80 	pushm	r7,lr
80006194:	1a 97       	mov	r7,sp
80006196:	20 1d       	sub	sp,4
	numActiveShelves = 0;
80006198:	4c d9       	lddpc	r9,800062cc <set_shelves_active_inactive+0x13c>
8000619a:	30 08       	mov	r8,0
8000619c:	b2 88       	st.b	r9[0x0],r8
	/*
	 * The rest of the evaluation
	 */
	
	
	for (int i=0; i<NUM_SHELVES; i++)
8000619e:	30 08       	mov	r8,0
800061a0:	ef 48 ff fc 	st.w	r7[-4],r8
800061a4:	c0 c8       	rjmp	800061bc <set_shelves_active_inactive+0x2c>
	{
		shelfActive[i] = SHELF_INACTIVE;
800061a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800061aa:	4c aa       	lddpc	r10,800062d0 <set_shelves_active_inactive+0x140>
800061ac:	30 18       	mov	r8,1
800061ae:	f4 09 0b 08 	st.b	r10[r9],r8
	/*
	 * The rest of the evaluation
	 */
	
	
	for (int i=0; i<NUM_SHELVES; i++)
800061b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800061b6:	2f f8       	sub	r8,-1
800061b8:	ef 48 ff fc 	st.w	r7[-4],r8
800061bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800061c0:	58 38       	cp.w	r8,3
800061c2:	fe 9a ff f2 	brle	800061a6 <set_shelves_active_inactive+0x16>
		shelfActive[i] = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (ledBoardPresent[0] &&
800061c6:	4c 48       	lddpc	r8,800062d4 <set_shelves_active_inactive+0x144>
800061c8:	70 08       	ld.w	r8,r8[0x0]
800061ca:	58 08       	cp.w	r8,0
800061cc:	c1 d0       	breq	80006206 <set_shelves_active_inactive+0x76>
		ledBoardPresent[1] &&
800061ce:	4c 28       	lddpc	r8,800062d4 <set_shelves_active_inactive+0x144>
800061d0:	70 18       	ld.w	r8,r8[0x4]
		shelfActive[i] = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (ledBoardPresent[0] &&
800061d2:	58 08       	cp.w	r8,0
800061d4:	c1 90       	breq	80006206 <set_shelves_active_inactive+0x76>
		ledBoardPresent[1] &&
		devicesPresentOnShelf[0] && 
800061d6:	4c 18       	lddpc	r8,800062d8 <set_shelves_active_inactive+0x148>
800061d8:	11 88       	ld.ub	r8,r8[0x0]
		shelfActive[i] = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (ledBoardPresent[0] &&
800061da:	58 08       	cp.w	r8,0
800061dc:	c1 50       	breq	80006206 <set_shelves_active_inactive+0x76>
		ledBoardPresent[1] &&
		devicesPresentOnShelf[0] && 
		brdSideWithinLifetimeLimit[LED_BRD_0_BOT] &&
800061de:	4c 08       	lddpc	r8,800062dc <set_shelves_active_inactive+0x14c>
800061e0:	11 88       	ld.ub	r8,r8[0x0]
		shelfActive[i] = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (ledBoardPresent[0] &&
800061e2:	58 08       	cp.w	r8,0
800061e4:	c1 10       	breq	80006206 <set_shelves_active_inactive+0x76>
		ledBoardPresent[1] &&
		devicesPresentOnShelf[0] && 
		brdSideWithinLifetimeLimit[LED_BRD_0_BOT] &&
		brdSideWithinLifetimeLimit[LED_BRD_1_TOP] )
800061e6:	4b e8       	lddpc	r8,800062dc <set_shelves_active_inactive+0x14c>
800061e8:	11 98       	ld.ub	r8,r8[0x1]
		shelfActive[i] = SHELF_INACTIVE;
		
	}
	
	/* check shelf 0 */
	if (ledBoardPresent[0] &&
800061ea:	58 08       	cp.w	r8,0
800061ec:	c0 d0       	breq	80006206 <set_shelves_active_inactive+0x76>
		ledBoardPresent[1] &&
		devicesPresentOnShelf[0] && 
		brdSideWithinLifetimeLimit[LED_BRD_0_BOT] &&
		brdSideWithinLifetimeLimit[LED_BRD_1_TOP] )
	{
		shelfActive[0] = SHELF_ACTIVE;
800061ee:	4b 99       	lddpc	r9,800062d0 <set_shelves_active_inactive+0x140>
800061f0:	30 08       	mov	r8,0
800061f2:	b2 88       	st.b	r9[0x0],r8
		numActiveShelves++;
800061f4:	4b 68       	lddpc	r8,800062cc <set_shelves_active_inactive+0x13c>
800061f6:	11 88       	ld.ub	r8,r8[0x0]
800061f8:	2f f8       	sub	r8,-1
800061fa:	5c 58       	castu.b	r8
800061fc:	4b 49       	lddpc	r9,800062cc <set_shelves_active_inactive+0x13c>
800061fe:	b2 88       	st.b	r9[0x0],r8
		print_ssdbg("Shelf 0 active\r\n");
80006200:	4b 8c       	lddpc	r12,800062e0 <set_shelves_active_inactive+0x150>
80006202:	f0 1f 00 39 	mcall	800062e4 <set_shelves_active_inactive+0x154>
	}
	
	/* check shelf 1 */
	
	if (ledBoardPresent[1] &&
80006206:	4b 48       	lddpc	r8,800062d4 <set_shelves_active_inactive+0x144>
80006208:	70 18       	ld.w	r8,r8[0x4]
8000620a:	58 08       	cp.w	r8,0
8000620c:	c1 d0       	breq	80006246 <set_shelves_active_inactive+0xb6>
		ledBoardPresent[2] &&
8000620e:	4b 28       	lddpc	r8,800062d4 <set_shelves_active_inactive+0x144>
80006210:	70 28       	ld.w	r8,r8[0x8]
		print_ssdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (ledBoardPresent[1] &&
80006212:	58 08       	cp.w	r8,0
80006214:	c1 90       	breq	80006246 <set_shelves_active_inactive+0xb6>
		ledBoardPresent[2] &&
	devicesPresentOnShelf[1] &&
80006216:	4b 18       	lddpc	r8,800062d8 <set_shelves_active_inactive+0x148>
80006218:	11 98       	ld.ub	r8,r8[0x1]
		print_ssdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (ledBoardPresent[1] &&
8000621a:	58 08       	cp.w	r8,0
8000621c:	c1 50       	breq	80006246 <set_shelves_active_inactive+0xb6>
		ledBoardPresent[2] &&
	devicesPresentOnShelf[1] &&
	brdSideWithinLifetimeLimit[LED_BRD_1_BOT] &&
8000621e:	4b 08       	lddpc	r8,800062dc <set_shelves_active_inactive+0x14c>
80006220:	11 a8       	ld.ub	r8,r8[0x2]
		print_ssdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (ledBoardPresent[1] &&
80006222:	58 08       	cp.w	r8,0
80006224:	c1 10       	breq	80006246 <set_shelves_active_inactive+0xb6>
		ledBoardPresent[2] &&
	devicesPresentOnShelf[1] &&
	brdSideWithinLifetimeLimit[LED_BRD_1_BOT] &&
	brdSideWithinLifetimeLimit[LED_BRD_2_TOP] )
80006226:	4a e8       	lddpc	r8,800062dc <set_shelves_active_inactive+0x14c>
80006228:	11 b8       	ld.ub	r8,r8[0x3]
		print_ssdbg("Shelf 0 active\r\n");
	}
	
	/* check shelf 1 */
	
	if (ledBoardPresent[1] &&
8000622a:	58 08       	cp.w	r8,0
8000622c:	c0 d0       	breq	80006246 <set_shelves_active_inactive+0xb6>
		ledBoardPresent[2] &&
	devicesPresentOnShelf[1] &&
	brdSideWithinLifetimeLimit[LED_BRD_1_BOT] &&
	brdSideWithinLifetimeLimit[LED_BRD_2_TOP] )
	{
		shelfActive[1] = SHELF_ACTIVE;
8000622e:	4a 99       	lddpc	r9,800062d0 <set_shelves_active_inactive+0x140>
80006230:	30 08       	mov	r8,0
80006232:	b2 98       	st.b	r9[0x1],r8
		numActiveShelves++;
80006234:	4a 68       	lddpc	r8,800062cc <set_shelves_active_inactive+0x13c>
80006236:	11 88       	ld.ub	r8,r8[0x0]
80006238:	2f f8       	sub	r8,-1
8000623a:	5c 58       	castu.b	r8
8000623c:	4a 49       	lddpc	r9,800062cc <set_shelves_active_inactive+0x13c>
8000623e:	b2 88       	st.b	r9[0x0],r8
		print_ssdbg("Shelf 1 active\r\n");
80006240:	4a ac       	lddpc	r12,800062e8 <set_shelves_active_inactive+0x158>
80006242:	f0 1f 00 29 	mcall	800062e4 <set_shelves_active_inactive+0x154>
	}
	
	/* check shelf 2 */
	
	if (ledBoardPresent[2] &&
80006246:	4a 48       	lddpc	r8,800062d4 <set_shelves_active_inactive+0x144>
80006248:	70 28       	ld.w	r8,r8[0x8]
8000624a:	58 08       	cp.w	r8,0
8000624c:	c1 d0       	breq	80006286 <set_shelves_active_inactive+0xf6>
		ledBoardPresent[3] &&
8000624e:	4a 28       	lddpc	r8,800062d4 <set_shelves_active_inactive+0x144>
80006250:	70 38       	ld.w	r8,r8[0xc]
		print_ssdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (ledBoardPresent[2] &&
80006252:	58 08       	cp.w	r8,0
80006254:	c1 90       	breq	80006286 <set_shelves_active_inactive+0xf6>
		ledBoardPresent[3] &&
	devicesPresentOnShelf[2] &&
80006256:	4a 18       	lddpc	r8,800062d8 <set_shelves_active_inactive+0x148>
80006258:	11 a8       	ld.ub	r8,r8[0x2]
		print_ssdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (ledBoardPresent[2] &&
8000625a:	58 08       	cp.w	r8,0
8000625c:	c1 50       	breq	80006286 <set_shelves_active_inactive+0xf6>
		ledBoardPresent[3] &&
	devicesPresentOnShelf[2] &&
	brdSideWithinLifetimeLimit[LED_BRD_2_BOT] &&
8000625e:	4a 08       	lddpc	r8,800062dc <set_shelves_active_inactive+0x14c>
80006260:	11 c8       	ld.ub	r8,r8[0x4]
		print_ssdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (ledBoardPresent[2] &&
80006262:	58 08       	cp.w	r8,0
80006264:	c1 10       	breq	80006286 <set_shelves_active_inactive+0xf6>
		ledBoardPresent[3] &&
	devicesPresentOnShelf[2] &&
	brdSideWithinLifetimeLimit[LED_BRD_2_BOT] &&
	brdSideWithinLifetimeLimit[LED_BRD_3_TOP] )
80006266:	49 e8       	lddpc	r8,800062dc <set_shelves_active_inactive+0x14c>
80006268:	11 d8       	ld.ub	r8,r8[0x5]
		print_ssdbg("Shelf 1 active\r\n");
	}
	
	/* check shelf 2 */
	
	if (ledBoardPresent[2] &&
8000626a:	58 08       	cp.w	r8,0
8000626c:	c0 d0       	breq	80006286 <set_shelves_active_inactive+0xf6>
		ledBoardPresent[3] &&
	devicesPresentOnShelf[2] &&
	brdSideWithinLifetimeLimit[LED_BRD_2_BOT] &&
	brdSideWithinLifetimeLimit[LED_BRD_3_TOP] )
	{
		shelfActive[2] = SHELF_ACTIVE;
8000626e:	49 99       	lddpc	r9,800062d0 <set_shelves_active_inactive+0x140>
80006270:	30 08       	mov	r8,0
80006272:	b2 a8       	st.b	r9[0x2],r8
		numActiveShelves++;
80006274:	49 68       	lddpc	r8,800062cc <set_shelves_active_inactive+0x13c>
80006276:	11 88       	ld.ub	r8,r8[0x0]
80006278:	2f f8       	sub	r8,-1
8000627a:	5c 58       	castu.b	r8
8000627c:	49 49       	lddpc	r9,800062cc <set_shelves_active_inactive+0x13c>
8000627e:	b2 88       	st.b	r9[0x0],r8
		print_ssdbg("Shelf 2 active\r\n");
80006280:	49 bc       	lddpc	r12,800062ec <set_shelves_active_inactive+0x15c>
80006282:	f0 1f 00 19 	mcall	800062e4 <set_shelves_active_inactive+0x154>
	}
	
	/* check shelf 3 */
	
	if (ledBoardPresent[3] &&
80006286:	49 48       	lddpc	r8,800062d4 <set_shelves_active_inactive+0x144>
80006288:	70 38       	ld.w	r8,r8[0xc]
8000628a:	58 08       	cp.w	r8,0
8000628c:	c1 d0       	breq	800062c6 <set_shelves_active_inactive+0x136>
		ledBoardPresent[4] &&
8000628e:	49 28       	lddpc	r8,800062d4 <set_shelves_active_inactive+0x144>
80006290:	70 48       	ld.w	r8,r8[0x10]
		print_ssdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (ledBoardPresent[3] &&
80006292:	58 08       	cp.w	r8,0
80006294:	c1 90       	breq	800062c6 <set_shelves_active_inactive+0x136>
		ledBoardPresent[4] &&
	devicesPresentOnShelf[3] &&
80006296:	49 18       	lddpc	r8,800062d8 <set_shelves_active_inactive+0x148>
80006298:	11 b8       	ld.ub	r8,r8[0x3]
		print_ssdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (ledBoardPresent[3] &&
8000629a:	58 08       	cp.w	r8,0
8000629c:	c1 50       	breq	800062c6 <set_shelves_active_inactive+0x136>
		ledBoardPresent[4] &&
	devicesPresentOnShelf[3] &&
	brdSideWithinLifetimeLimit[LED_BRD_3_BOT] &&
8000629e:	49 08       	lddpc	r8,800062dc <set_shelves_active_inactive+0x14c>
800062a0:	11 e8       	ld.ub	r8,r8[0x6]
		print_ssdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (ledBoardPresent[3] &&
800062a2:	58 08       	cp.w	r8,0
800062a4:	c1 10       	breq	800062c6 <set_shelves_active_inactive+0x136>
		ledBoardPresent[4] &&
	devicesPresentOnShelf[3] &&
	brdSideWithinLifetimeLimit[LED_BRD_3_BOT] &&
	brdSideWithinLifetimeLimit[LED_BRD_4_TOP] )
800062a6:	48 e8       	lddpc	r8,800062dc <set_shelves_active_inactive+0x14c>
800062a8:	11 f8       	ld.ub	r8,r8[0x7]
		print_ssdbg("Shelf 2 active\r\n");
	}
	
	/* check shelf 3 */
	
	if (ledBoardPresent[3] &&
800062aa:	58 08       	cp.w	r8,0
800062ac:	c0 d0       	breq	800062c6 <set_shelves_active_inactive+0x136>
		ledBoardPresent[4] &&
	devicesPresentOnShelf[3] &&
	brdSideWithinLifetimeLimit[LED_BRD_3_BOT] &&
	brdSideWithinLifetimeLimit[LED_BRD_4_TOP] )
	{
		shelfActive[3] = SHELF_ACTIVE;
800062ae:	48 99       	lddpc	r9,800062d0 <set_shelves_active_inactive+0x140>
800062b0:	30 08       	mov	r8,0
800062b2:	b2 b8       	st.b	r9[0x3],r8
		numActiveShelves++;
800062b4:	48 68       	lddpc	r8,800062cc <set_shelves_active_inactive+0x13c>
800062b6:	11 88       	ld.ub	r8,r8[0x0]
800062b8:	2f f8       	sub	r8,-1
800062ba:	5c 58       	castu.b	r8
800062bc:	48 49       	lddpc	r9,800062cc <set_shelves_active_inactive+0x13c>
800062be:	b2 88       	st.b	r9[0x0],r8
		print_ssdbg("Shelf 3 active\r\n");
800062c0:	48 cc       	lddpc	r12,800062f0 <set_shelves_active_inactive+0x160>
800062c2:	f0 1f 00 09 	mcall	800062e4 <set_shelves_active_inactive+0x154>
	}
}
800062c6:	2f fd       	sub	sp,-4
800062c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800062cc:	00 00       	add	r0,r0
800062ce:	09 8c       	ld.ub	r12,r4[0x0]
800062d0:	00 00       	add	r0,r0
800062d2:	09 a4       	ld.ub	r4,r4[0x2]
800062d4:	00 00       	add	r0,r0
800062d6:	07 0c       	ld.w	r12,r3++
800062d8:	00 00       	add	r0,r0
800062da:	09 a0       	ld.ub	r0,r4[0x2]
800062dc:	00 00       	add	r0,r0
800062de:	09 84       	ld.ub	r4,r4[0x0]
800062e0:	80 00       	ld.sh	r0,r0[0x0]
800062e2:	58 8c       	cp.w	r12,8
800062e4:	80 00       	ld.sh	r0,r0[0x0]
800062e6:	33 a8       	mov	r8,58
800062e8:	80 00       	ld.sh	r0,r0[0x0]
800062ea:	58 a0       	cp.w	r0,10
800062ec:	80 00       	ld.sh	r0,r0[0x0]
800062ee:	58 b4       	cp.w	r4,11
800062f0:	80 00       	ld.sh	r0,r0[0x0]
800062f2:	58 c8       	cp.w	r8,12

800062f4 <num_active_shelves>:

unsigned char num_active_shelves(void);
unsigned char num_active_shelves(void)
{
800062f4:	eb cd 40 80 	pushm	r7,lr
800062f8:	1a 97       	mov	r7,sp
	return numActiveShelves;
800062fa:	48 38       	lddpc	r8,80006304 <num_active_shelves+0x10>
800062fc:	11 88       	ld.ub	r8,r8[0x0]
}
800062fe:	10 9c       	mov	r12,r8
80006300:	e3 cd 80 80 	ldm	sp++,r7,pc
80006304:	00 00       	add	r0,r0
80006306:	09 8c       	ld.ub	r12,r4[0x0]

80006308 <init_sys_clocks>:
/*
 * Using RC8M (internal 8MHz)
 */
void init_sys_clocks(void);
void init_sys_clocks(void)
{
80006308:	eb cd 40 80 	pushm	r7,lr
8000630c:	1a 97       	mov	r7,sp
8000630e:	20 3d       	sub	sp,12
	scif_gclk_opt_t gclkOpt = {SCIF_GCCTRL_RC8M, 0,0};
80006310:	30 28       	mov	r8,2
80006312:	ef 48 ff f4 	st.w	r7[-12],r8
80006316:	30 08       	mov	r8,0
80006318:	ef 48 ff f8 	st.w	r7[-8],r8
8000631c:	30 08       	mov	r8,0
8000631e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	// Start the 8Mhz Oscillator
	scif_start_rc8M();
80006322:	f0 1f 00 0a 	mcall	80006348 <init_sys_clocks+0x40>
	// Set the main clock source as being RC8MHz.
	pm_set_mclk_source(PM_CLK_SRC_RC8M);	
80006326:	30 5c       	mov	r12,5
80006328:	f0 1f 00 09 	mcall	8000634c <init_sys_clocks+0x44>


	/* put the clock out on PC19 so we can check to make sure we set it up correctly */
	//Note this code comes from ASF example AVR32 SCIF example 3
	scif_start_gclk(AVR32_SCIF_GCLK_GCLK0PIN, &gclkOpt);
8000632c:	ee c8 00 0c 	sub	r8,r7,12
80006330:	10 9b       	mov	r11,r8
80006332:	30 9c       	mov	r12,9
80006334:	f0 1f 00 07 	mcall	80006350 <init_sys_clocks+0x48>
	gpio_enable_module_pin(AVR32_SCIF_GCLK_0_1_PIN, AVR32_SCIF_GCLK_0_1_FUNCTION);
80006338:	30 1b       	mov	r11,1
8000633a:	35 3c       	mov	r12,83
8000633c:	f0 1f 00 06 	mcall	80006354 <init_sys_clocks+0x4c>
	
}
80006340:	2f dd       	sub	sp,-12
80006342:	e3 cd 80 80 	ldm	sp++,r7,pc
80006346:	00 00       	add	r0,r0
80006348:	80 00       	ld.sh	r0,r0[0x0]
8000634a:	45 60       	lddsp	r0,sp[0x158]
8000634c:	80 00       	ld.sh	r0,r0[0x0]
8000634e:	44 f0       	lddsp	r0,sp[0x13c]
80006350:	80 00       	ld.sh	r0,r0[0x0]
80006352:	45 e0       	lddsp	r0,sp[0x178]
80006354:	80 00       	ld.sh	r0,r0[0x0]
80006356:	3c d0       	mov	r0,-51

80006358 <adc_process_init>:
 *
 *
 */
void adc_process_init(void);
void adc_process_init(void)
{
80006358:	eb cd 40 80 	pushm	r7,lr
8000635c:	1a 97       	mov	r7,sp
		{INPUT3_ADC_PIN, INPUT3_ADC_FUNCTION},	//8apr15 TODO is this right??
		{INPUT4_ADC_PIN, INPUT4_ADC_FUNCTION}	//8apr15 TODO is this right??
	};

	// Assign and enable GPIO pins to the ADC function.
	gpio_enable_module(ADCIFA_GPIO_MAP,
8000635e:	30 7b       	mov	r11,7
80006360:	48 bc       	lddpc	r12,8000638c <adc_process_init+0x34>
80006362:	f0 1f 00 0c 	mcall	80006390 <adc_process_init+0x38>
			sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));

	// Get ADCIFA Factory Configuration
	adcifa_get_calibration_data(adcifa, &adc_config_t);
80006366:	48 c8       	lddpc	r8,80006394 <adc_process_init+0x3c>
80006368:	70 08       	ld.w	r8,r8[0x0]
8000636a:	48 cb       	lddpc	r11,80006398 <adc_process_init+0x40>
8000636c:	10 9c       	mov	r12,r8
8000636e:	f0 1f 00 0c 	mcall	8000639c <adc_process_init+0x44>

	// Configure ADCIFA core
//debug 10apr15 	adcifa_configure(adcifa, &adc_config_t, FOSC0);
	adcifa_configure(adcifa, &adc_config_t, 8000000); //10apr15
80006372:	48 98       	lddpc	r8,80006394 <adc_process_init+0x3c>
80006374:	70 08       	ld.w	r8,r8[0x0]
80006376:	e0 6a 12 00 	mov	r10,4608
8000637a:	ea 1a 00 7a 	orh	r10,0x7a
8000637e:	48 7b       	lddpc	r11,80006398 <adc_process_init+0x40>
80006380:	10 9c       	mov	r12,r8
80006382:	f0 1f 00 08 	mcall	800063a0 <adc_process_init+0x48>

}
80006386:	e3 cd 80 80 	ldm	sp++,r7,pc
8000638a:	00 00       	add	r0,r0
8000638c:	80 00       	ld.sh	r0,r0[0x0]
8000638e:	7a 00       	ld.w	r0,sp[0x0]
80006390:	80 00       	ld.sh	r0,r0[0x0]
80006392:	3c 60       	mov	r0,-58
80006394:	00 00       	add	r0,r0
80006396:	00 a8       	st.w	r0++,r8
80006398:	00 00       	add	r0,r0
8000639a:	00 80       	andn	r0,r0
8000639c:	80 00       	ld.sh	r0,r0[0x0]
8000639e:	33 f4       	mov	r4,63
800063a0:	80 00       	ld.sh	r0,r0[0x0]
800063a2:	34 88       	mov	r8,72

800063a4 <twi_init>:
 *
 *
 */
static void twi_init(void);
static void twi_init(void)
{
800063a4:	eb cd 40 80 	pushm	r7,lr
800063a8:	1a 97       	mov	r7,sp
800063aa:	20 8d       	sub	sp,32
	const gpio_map_t PCA9952_TWI_GPIO_MAP = {
		{PCA9952_TWI_SCL_PIN, PCA9952_TWI_SCL_FUNCTION},
		{PCA9952_TWI_SDA_PIN, PCA9952_TWI_SDA_FUNCTION}
	};
800063ac:	49 a9       	lddpc	r9,80006414 <twi_init+0x70>
800063ae:	ee c8 00 10 	sub	r8,r7,16
800063b2:	20 08       	sub	r8,0
800063b4:	20 09       	sub	r9,0
800063b6:	72 0a       	ld.w	r10,r9[0x0]
800063b8:	91 0a       	st.w	r8[0x0],r10
800063ba:	72 1a       	ld.w	r10,r9[0x4]
800063bc:	91 1a       	st.w	r8[0x4],r10
800063be:	72 2a       	ld.w	r10,r9[0x8]
800063c0:	91 2a       	st.w	r8[0x8],r10
800063c2:	72 39       	ld.w	r9,r9[0xc]
800063c4:	91 39       	st.w	r8[0xc],r9
		.pba_hz = FPBA_HZ,
		.speed = PCA9952_TWI_MASTER_SPEED,
//7apr15		.chip = PCA9952_TWI_ADDRESS,
		.chip = PCA9952_U7_TOPDRIVE_TWI_ADDRESS, //7apr15
		.smbus        = false,
	};
800063c6:	49 59       	lddpc	r9,80006418 <twi_init+0x74>
800063c8:	ee c8 00 20 	sub	r8,r7,32
800063cc:	20 08       	sub	r8,0
800063ce:	20 09       	sub	r9,0
800063d0:	72 0a       	ld.w	r10,r9[0x0]
800063d2:	91 0a       	st.w	r8[0x0],r10
800063d4:	72 1a       	ld.w	r10,r9[0x4]
800063d6:	91 1a       	st.w	r8[0x4],r10
800063d8:	72 2a       	ld.w	r10,r9[0x8]
800063da:	91 2a       	st.w	r8[0x8],r10
800063dc:	72 39       	ld.w	r9,r9[0xc]
800063de:	91 39       	st.w	r8[0xc],r9

	// Assign I/Os to TWI.
	gpio_enable_module(PCA9952_TWI_GPIO_MAP,
800063e0:	ee c8 00 10 	sub	r8,r7,16
800063e4:	30 2b       	mov	r11,2
800063e6:	10 9c       	mov	r12,r8
800063e8:	f0 1f 00 0d 	mcall	8000641c <twi_init+0x78>
	sizeof(PCA9952_TWI_GPIO_MAP) / sizeof(PCA9952_TWI_GPIO_MAP[0]));
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
800063ec:	ee c8 00 20 	sub	r8,r7,32
800063f0:	10 9b       	mov	r11,r8
800063f2:	fe 7c 38 00 	mov	r12,-51200
800063f6:	f0 1f 00 0b 	mcall	80006420 <twi_init+0x7c>
	
	
	PCA9952_TWI_OPTIONS.chip = PCA9952_U8_BOTDRIVE_TWI_ADDRESS;
800063fa:	36 18       	mov	r8,97
800063fc:	ef 48 ff e8 	st.w	r7[-24],r8
	// Initialize as master.
	twi_master_init(PCA9952_TWI, &PCA9952_TWI_OPTIONS);
80006400:	ee c8 00 20 	sub	r8,r7,32
80006404:	10 9b       	mov	r11,r8
80006406:	fe 7c 38 00 	mov	r12,-51200
8000640a:	f0 1f 00 06 	mcall	80006420 <twi_init+0x7c>
	
	
}
8000640e:	2f 8d       	sub	sp,-32
80006410:	e3 cd 80 80 	ldm	sp++,r7,pc
80006414:	80 00       	ld.sh	r0,r0[0x0]
80006416:	79 e0       	ld.w	r0,r12[0x78]
80006418:	80 00       	ld.sh	r0,r0[0x0]
8000641a:	79 f0       	ld.w	r0,r12[0x7c]
8000641c:	80 00       	ld.sh	r0,r0[0x0]
8000641e:	3c 60       	mov	r0,-58
80006420:	80 00       	ld.sh	r0,r0[0x0]
80006422:	48 a4       	lddpc	r4,80006448 <calc_sanitize_time+0x24>

80006424 <calc_sanitize_time>:
	STATE_SHUTDOWN_PROCESSES
};

unsigned long calc_sanitize_time(unsigned char shelfIdx);
unsigned long calc_sanitize_time(unsigned char shelfIdx)
{
80006424:	eb cd 40 80 	pushm	r7,lr
80006428:	1a 97       	mov	r7,sp
8000642a:	20 4d       	sub	sp,16
8000642c:	ef 6c ff f0 	st.b	r7[-16],r12
80006430:	e0 6c 03 e8 	mov	r12,1000
80006434:	ef 4c ff fc 	st.w	r7[-4],r12
80006438:	e0 6c 12 00 	mov	r12,4608
8000643c:	ea 1c 00 7a 	orh	r12,0x7a
80006440:	ef 4c ff f8 	st.w	r7[-8],r12
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80006444:	ee fa ff fc 	ld.w	r10,r7[-4]
80006448:	30 0b       	mov	r11,0
8000644a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000644e:	30 09       	mov	r9,0
80006450:	f6 08 02 4c 	mul	r12,r11,r8
80006454:	f2 0a 02 4e 	mul	lr,r9,r10
80006458:	1c 0c       	add	r12,lr
8000645a:	f4 08 06 48 	mulu.d	r8,r10,r8
8000645e:	12 0c       	add	r12,r9
80006460:	18 99       	mov	r9,r12
80006462:	e0 6a 03 e7 	mov	r10,999
80006466:	30 0b       	mov	r11,0
80006468:	f0 0a 00 0a 	add	r10,r8,r10
8000646c:	f2 0b 00 4b 	adc	r11,r9,r11
80006470:	e0 68 03 e8 	mov	r8,1000
80006474:	30 09       	mov	r9,0
80006476:	f0 1f 00 07 	mcall	80006490 <calc_sanitize_time+0x6c>
8000647a:	14 98       	mov	r8,r10
8000647c:	16 99       	mov	r9,r11
	uint32_t cyclesPerSec;
	
	cyclesPerSec = cpu_ms_2_cy(1000, 8000000);
8000647e:	ef 48 ff f4 	st.w	r7[-12],r8
	
	//TODO: put the real calculation here based on hours of usage
	
	return (8*cyclesPerSec); //fudge for now, show the string and let it wrap once, looks better for the show
80006482:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006486:	a3 78       	lsl	r8,0x3
	
}
80006488:	10 9c       	mov	r12,r8
8000648a:	2f cd       	sub	sp,-16
8000648c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006490:	80 00       	ld.sh	r0,r0[0x0]
80006492:	71 c8       	ld.w	r8,r8[0x70]

80006494 <door_latch_open_kill_all_shelves>:
unsigned char anyShelvesStillSanitizing;


void door_latch_open_kill_all_shelves(void);
void door_latch_open_kill_all_shelves(void)
{
80006494:	eb cd 40 80 	pushm	r7,lr
80006498:	1a 97       	mov	r7,sp
	led_shelf(0, LED_OFF);
8000649a:	30 0b       	mov	r11,0
8000649c:	30 0c       	mov	r12,0
8000649e:	f0 1f 00 09 	mcall	800064c0 <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(1, LED_OFF);
800064a2:	30 0b       	mov	r11,0
800064a4:	30 1c       	mov	r12,1
800064a6:	f0 1f 00 07 	mcall	800064c0 <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(2, LED_OFF);
800064aa:	30 0b       	mov	r11,0
800064ac:	30 2c       	mov	r12,2
800064ae:	f0 1f 00 05 	mcall	800064c0 <door_latch_open_kill_all_shelves+0x2c>
	led_shelf(3, LED_OFF);
800064b2:	30 0b       	mov	r11,0
800064b4:	30 3c       	mov	r12,3
800064b6:	f0 1f 00 03 	mcall	800064c0 <door_latch_open_kill_all_shelves+0x2c>
}
800064ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800064be:	00 00       	add	r0,r0
800064c0:	80 00       	ld.sh	r0,r0[0x0]
800064c2:	57 34       	stdsp	sp[0x1cc],r4

800064c4 <main>:
/*! \brief Main File Section:
 *          - Initialization (CPU, TWI, Usart,...)
 *          - Main loop with task management (CAN, LIN, ADC)
 */
int main(void)
{
800064c4:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
800064c8:	1a 97       	mov	r7,sp
800064ca:	fa cd 01 28 	sub	sp,sp,296
	static unsigned char sanitizeIdx = 0;
	
	// Initialize System Clock
	init_sys_clocks();
800064ce:	f0 1f 03 13 	mcall	80007118 <main+0xc54>

	init_io();
800064d2:	f0 1f 03 13 	mcall	8000711c <main+0xc58>
	

	// Initialize USART
	init_ssdbg_rs232(FPBA_HZ);
800064d6:	e0 6c 24 00 	mov	r12,9216
800064da:	ea 1c 00 f4 	orh	r12,0xf4
800064de:	f0 1f 03 11 	mcall	80007120 <main+0xc5c>
	init_display_rs232(FPBA_HZ);
800064e2:	e0 6c 24 00 	mov	r12,9216
800064e6:	ea 1c 00 f4 	orh	r12,0xf4
800064ea:	f0 1f 03 0f 	mcall	80007124 <main+0xc60>

	// Print Startup Message
	print_ssdbg("SEAL SHIELD DEMO \r\n Copyright (c) 2015 Technical Solutions Group, Inc.\r\n");
800064ee:	fe fc 0c 3a 	ld.w	r12,pc[3130]
800064f2:	f0 1f 03 0f 	mcall	8000712c <main+0xc68>
	display_text(IDX_READY);
800064f6:	30 0c       	mov	r12,0
800064f8:	f0 1f 03 0e 	mcall	80007130 <main+0xc6c>
	
	// Initialize ADC for bluesense channels which are used to see if there are any devices (phones, tablets, etc.) on the shelves
	adc_process_init();
800064fc:	f0 1f 03 0e 	mcall	80007134 <main+0xc70>

	
	// Initialize Interrupts
	irq_initialize_vectors(); //TODO: probably remove 5apr15
80006500:	f0 1f 03 0e 	mcall	80007138 <main+0xc74>

	cpu_irq_enable();
80006504:	d5 03       	csrf	0x10

	// Initialize TWI Interface
	twi_init();
80006506:	f0 1f 03 0e 	mcall	8000713c <main+0xc78>

	gpio_set_pin_high(SEALSHIELD_LED_OEn); //make sure outputs are disabled at the chip level
8000650a:	31 6c       	mov	r12,22
8000650c:	f0 1f 03 0d 	mcall	80007140 <main+0xc7c>
	PCA9952_init();
80006510:	f0 1f 03 0d 	mcall	80007144 <main+0xc80>
	
	sealShieldState = STATE_SS_IDLE;
80006514:	fe f9 0c 34 	ld.w	r9,pc[3124]
80006518:	30 08       	mov	r8,0
8000651a:	b2 88       	st.b	r9[0x0],r8
	
	//using this structure makes the timer IDs index-able
	shelfTimerPtr[0] = &timerShelf0;
8000651c:	fe f9 0c 30 	ld.w	r9,pc[3120]
80006520:	fe f8 0c 30 	ld.w	r8,pc[3120]
80006524:	93 08       	st.w	r9[0x0],r8
	shelfTimerPtr[1] = &timerShelf1;
80006526:	fe f9 0c 26 	ld.w	r9,pc[3110]
8000652a:	fe f8 0c 2a 	ld.w	r8,pc[3114]
8000652e:	93 18       	st.w	r9[0x4],r8
	shelfTimerPtr[2] = &timerShelf2;
80006530:	fe f9 0c 1c 	ld.w	r9,pc[3100]
80006534:	fe f8 0c 24 	ld.w	r8,pc[3108]
80006538:	93 28       	st.w	r9[0x8],r8
	shelfTimerPtr[3] = &timerShelf3;
8000653a:	fe f9 0c 12 	ld.w	r9,pc[3090]
8000653e:	fe f8 0c 1e 	ld.w	r8,pc[3102]
80006542:	93 38       	st.w	r9[0xc],r8
	
	gpio_set_pin_low(SEALSHIELD_LED_OEn); //...and we are live!
80006544:	31 6c       	mov	r12,22
80006546:	f0 1f 03 07 	mcall	80007160 <main+0xc9c>
	gpio_set_pin_low(SEALSHIELD_PSUPPLY_ONn); //turn the leds on first and then the power supply
8000654a:	31 7c       	mov	r12,23
8000654c:	f0 1f 03 05 	mcall	80007160 <main+0xc9c>
80006550:	e0 68 09 00 	mov	r8,2304
80006554:	ea 18 00 3d 	orh	r8,0x3d
80006558:	ef 48 ff 40 	st.w	r7[-192],r8
8000655c:	fe f8 0c 08 	ld.w	r8,pc[3080]
80006560:	ef 48 ff 3c 	st.w	r7[-196],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006564:	e1 b8 00 42 	mfsr	r8,0x108
80006568:	10 99       	mov	r9,r8
8000656a:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000656e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006570:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80006574:	70 09       	ld.w	r9,r8[0x0]
80006576:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000657a:	10 09       	add	r9,r8
8000657c:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80006580:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006582:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80006586:	30 08       	mov	r8,0
80006588:	f3 68 00 08 	st.b	r9[8],r8
8000658c:	c0 28       	rjmp	80006590 <main+0xcc>
		{
			cpu_stop_timeout(&timerDebugLed);
			cpu_set_timeout((SS_ONE_SECOND/2), &timerDebugLed);
			gpio_toggle_pin(SEALSHIELD_DEBUG_LED);
		}
	} //while(true)
8000658e:	d7 03       	nop
		{
			read_serial_ids();
		}
#endif

		switch(sealShieldState)
80006590:	fe f8 0b b8 	ld.w	r8,pc[3000]
80006594:	11 88       	ld.ub	r8,r8[0x0]
80006596:	10 99       	mov	r9,r8
80006598:	58 99       	cp.w	r9,9
8000659a:	e0 8b 04 79 	brhi	80006e8c <main+0x9c8>
8000659e:	fe f8 0b ca 	ld.w	r8,pc[3018]
800065a2:	f0 09 03 2f 	ld.w	pc,r8[r9<<0x2]
		{
			case STATE_SS_IDLE:
				if (SS_DOOR_LATCHED) {
800065a6:	33 ec       	mov	r12,62
800065a8:	f0 1f 02 f1 	mcall	8000716c <main+0xca8>
800065ac:	18 98       	mov	r8,r12
800065ae:	ec 18 00 01 	eorl	r8,0x1
800065b2:	5c 58       	castu.b	r8
800065b4:	e0 80 04 61 	breq	80006e76 <main+0x9b2>
					gpio_set_pin_low(SEALSHIELD_DEBUG_LED);
800065b8:	37 cc       	mov	r12,124
800065ba:	f0 1f 02 ea 	mcall	80007160 <main+0xc9c>
					print_ssdbg("Door latch detected\r\n");
800065be:	fe fc 0b b2 	ld.w	r12,pc[2994]
800065c2:	f0 1f 02 db 	mcall	8000712c <main+0xc68>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
800065c6:	30 0c       	mov	r12,0
800065c8:	f0 1f 02 da 	mcall	80007130 <main+0xc6c>
					sealShieldState = STATE_DOOR_LATCHED;
800065cc:	fe f9 0b 7c 	ld.w	r9,pc[2940]
800065d0:	30 18       	mov	r8,1
800065d2:	b2 88       	st.b	r9[0x0],r8
					firstTimeThrough = 1;
800065d4:	fe f9 0b a0 	ld.w	r9,pc[2976]
800065d8:	30 18       	mov	r8,1
800065da:	b2 88       	st.b	r9[0x0],r8
				}
				break;
800065dc:	e0 8f 04 58 	bral	80006e8c <main+0x9c8>
				
			case STATE_DOOR_LATCHED:
				if (!SS_ACTION_PB) {
800065e0:	33 fc       	mov	r12,63
800065e2:	f0 1f 02 e3 	mcall	8000716c <main+0xca8>
800065e6:	18 98       	mov	r8,r12
800065e8:	58 08       	cp.w	r8,0
800065ea:	e0 80 04 48 	breq	80006e7a <main+0x9b6>
					print_ssdbg("Action push button press detected\r\n");
800065ee:	fe fc 0b 8a 	ld.w	r12,pc[2954]
800065f2:	f0 1f 02 cf 	mcall	8000712c <main+0xc68>
					sealShieldState = STATE_ACTION_PB_PRESSED;
800065f6:	fe f9 0b 52 	ld.w	r9,pc[2898]
800065fa:	30 28       	mov	r8,2
800065fc:	b2 88       	st.b	r9[0x0],r8
					read_serial_ids();
800065fe:	f0 1f 02 e0 	mcall	8000717c <main+0xcb8>
				}
				break;
80006602:	e0 8f 04 45 	bral	80006e8c <main+0x9c8>
				
			case STATE_ACTION_PB_PRESSED:
				if (SS_ACTION_PB)
80006606:	33 fc       	mov	r12,63
80006608:	f0 1f 02 d9 	mcall	8000716c <main+0xca8>
8000660c:	18 98       	mov	r8,r12
8000660e:	ec 18 00 01 	eorl	r8,0x1
80006612:	5c 58       	castu.b	r8
80006614:	e0 80 04 35 	breq	80006e7e <main+0x9ba>
				{
					print_ssdbg("Action push button release detected\r\n");
80006618:	fe fc 0b 68 	ld.w	r12,pc[2920]
8000661c:	f0 1f 02 c4 	mcall	8000712c <main+0xc68>
					sealShieldState = STATE_ACTION_PB_RELEASED;	
80006620:	fe f9 0b 28 	ld.w	r9,pc[2856]
80006624:	30 38       	mov	r8,3
80006626:	b2 88       	st.b	r9[0x0],r8
					read_serial_ids();
80006628:	f0 1f 02 d5 	mcall	8000717c <main+0xcb8>
				}
				break;
8000662c:	e0 8f 04 30 	bral	80006e8c <main+0x9c8>
				
			case STATE_ACTION_PB_RELEASED:
				read_serial_ids();
80006630:	f0 1f 02 d3 	mcall	8000717c <main+0xcb8>
				check_led_brd_side_lifetimes();
80006634:	f0 1f 02 d4 	mcall	80007184 <main+0xcc0>
				check_shelves_for_devices();
80006638:	f0 1f 02 d4 	mcall	80007188 <main+0xcc4>
				set_shelves_active_inactive();
8000663c:	f0 1f 02 d4 	mcall	8000718c <main+0xcc8>
				
				if (num_active_shelves() != 0) {
80006640:	f0 1f 02 d4 	mcall	80007190 <main+0xccc>
80006644:	18 98       	mov	r8,r12
80006646:	58 08       	cp.w	r8,0
80006648:	e0 80 01 72 	breq	8000692c <main+0x468>
					sealShieldState = STATE_START_SANITIZE;	
8000664c:	fe f9 0a fc 	ld.w	r9,pc[2812]
80006650:	30 48       	mov	r8,4
80006652:	b2 88       	st.b	r9[0x0],r8
					print_ssdbg("Start sanitizing\r\n");
80006654:	fe fc 0b 40 	ld.w	r12,pc[2880]
80006658:	f0 1f 02 b5 	mcall	8000712c <main+0xc68>
					display_text(IDX_CLEAR);
8000665c:	30 9c       	mov	r12,9
8000665e:	f0 1f 02 b5 	mcall	80007130 <main+0xc6c>
80006662:	e0 68 01 f4 	mov	r8,500
80006666:	ef 48 ff 48 	st.w	r7[-184],r8
8000666a:	e0 68 12 00 	mov	r8,4608
8000666e:	ea 18 00 7a 	orh	r8,0x7a
80006672:	ef 48 ff 44 	st.w	r7[-188],r8
80006676:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000667a:	ef 48 ff 50 	st.w	r7[-176],r8
8000667e:	ee f8 ff 44 	ld.w	r8,r7[-188]
80006682:	ef 48 ff 4c 	st.w	r7[-180],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80006686:	ee fc ff 50 	ld.w	r12,r7[-176]
8000668a:	ef 4c fe e4 	st.w	r7[-284],r12
8000668e:	30 0a       	mov	r10,0
80006690:	ef 4a fe e0 	st.w	r7[-288],r10
80006694:	ee f8 ff 4c 	ld.w	r8,r7[-180]
80006698:	ef 48 fe dc 	st.w	r7[-292],r8
8000669c:	30 0c       	mov	r12,0
8000669e:	ef 4c fe d8 	st.w	r7[-296],r12
800066a2:	ee f9 fe e0 	ld.w	r9,r7[-288]
800066a6:	ee fa fe dc 	ld.w	r10,r7[-292]
800066aa:	b5 39       	mul	r9,r10
800066ac:	ee f8 fe d8 	ld.w	r8,r7[-296]
800066b0:	ee fc fe e4 	ld.w	r12,r7[-284]
800066b4:	b9 38       	mul	r8,r12
800066b6:	10 09       	add	r9,r8
800066b8:	ee f8 fe e4 	ld.w	r8,r7[-284]
800066bc:	ee fc fe dc 	ld.w	r12,r7[-292]
800066c0:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800066c4:	16 09       	add	r9,r11
800066c6:	12 9b       	mov	r11,r9
800066c8:	e0 68 03 e7 	mov	r8,999
800066cc:	30 09       	mov	r9,0
800066ce:	10 0a       	add	r10,r8
800066d0:	f6 09 00 4b 	adc	r11,r11,r9
800066d4:	e0 68 03 e8 	mov	r8,1000
800066d8:	30 09       	mov	r9,0
800066da:	f0 1f 02 b0 	mcall	80007198 <main+0xcd4>
800066de:	14 98       	mov	r8,r10
800066e0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800066e2:	ef 48 ff 58 	st.w	r7[-168],r8
800066e6:	ee c8 00 f8 	sub	r8,r7,248
800066ea:	ef 48 ff 54 	st.w	r7[-172],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800066ee:	e1 b8 00 42 	mfsr	r8,0x108
800066f2:	10 99       	mov	r9,r8
800066f4:	ee f8 ff 54 	ld.w	r8,r7[-172]
800066f8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800066fa:	ee f8 ff 54 	ld.w	r8,r7[-172]
800066fe:	70 09       	ld.w	r9,r8[0x0]
80006700:	ee f8 ff 58 	ld.w	r8,r7[-168]
80006704:	10 09       	add	r9,r8
80006706:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000670a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000670c:	ee f9 ff 54 	ld.w	r9,r7[-172]
80006710:	30 08       	mov	r8,0
80006712:	f3 68 00 08 	st.b	r9[8],r8
80006716:	ee c8 00 f8 	sub	r8,r7,248
8000671a:	ef 48 ff 5c 	st.w	r7[-164],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000671e:	e1 b8 00 42 	mfsr	r8,0x108
80006722:	ef 48 ff 60 	st.w	r7[-160],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006726:	ee f8 ff 5c 	ld.w	r8,r7[-164]
8000672a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000672e:	30 28       	mov	r8,2
80006730:	f0 09 18 00 	cp.b	r9,r8
80006734:	c0 31       	brne	8000673a <main+0x276>
    return false;
80006736:	30 08       	mov	r8,0
80006738:	c4 38       	rjmp	800067be <main+0x2fa>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000673a:	ee f8 ff 5c 	ld.w	r8,r7[-164]
8000673e:	f1 39 00 08 	ld.ub	r9,r8[8]
80006742:	30 18       	mov	r8,1
80006744:	f0 09 18 00 	cp.b	r9,r8
80006748:	c0 31       	brne	8000674e <main+0x28a>
    return true;
8000674a:	30 18       	mov	r8,1
8000674c:	c3 98       	rjmp	800067be <main+0x2fa>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000674e:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80006752:	70 09       	ld.w	r9,r8[0x0]
80006754:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80006758:	70 18       	ld.w	r8,r8[0x4]
8000675a:	10 39       	cp.w	r9,r8
8000675c:	e0 88 00 1a 	brls	80006790 <main+0x2cc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006760:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80006764:	70 09       	ld.w	r9,r8[0x0]
80006766:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000676a:	12 38       	cp.w	r8,r9
8000676c:	c1 02       	brcc	8000678c <main+0x2c8>
8000676e:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80006772:	70 19       	ld.w	r9,r8[0x4]
80006774:	ee f8 ff 60 	ld.w	r8,r7[-160]
80006778:	12 38       	cp.w	r8,r9
8000677a:	e0 88 00 09 	brls	8000678c <main+0x2c8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000677e:	ee f9 ff 5c 	ld.w	r9,r7[-164]
80006782:	30 18       	mov	r8,1
80006784:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006788:	30 18       	mov	r8,1
8000678a:	c1 a8       	rjmp	800067be <main+0x2fa>
    }
    return false;
8000678c:	30 08       	mov	r8,0
8000678e:	c1 88       	rjmp	800067be <main+0x2fa>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006790:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80006794:	70 09       	ld.w	r9,r8[0x0]
80006796:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000679a:	12 38       	cp.w	r8,r9
8000679c:	c0 93       	brcs	800067ae <main+0x2ea>
8000679e:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800067a2:	70 19       	ld.w	r9,r8[0x4]
800067a4:	ee f8 ff 60 	ld.w	r8,r7[-160]
800067a8:	12 38       	cp.w	r8,r9
800067aa:	e0 88 00 09 	brls	800067bc <main+0x2f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800067ae:	ee f9 ff 5c 	ld.w	r9,r7[-164]
800067b2:	30 18       	mov	r8,1
800067b4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800067b8:	30 18       	mov	r8,1
800067ba:	c0 28       	rjmp	800067be <main+0x2fa>
    }
    return false;
800067bc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800067be:	58 08       	cp.w	r8,0
800067c0:	ca b0       	breq	80006716 <main+0x252>
					cpu_delay_ms(500, 8000000);
					display_text(IDX_CLEANING);
800067c2:	30 2c       	mov	r12,2
800067c4:	f0 1f 02 5b 	mcall	80007130 <main+0xc6c>
800067c8:	e0 68 0b b8 	mov	r8,3000
800067cc:	ef 48 ff 68 	st.w	r7[-152],r8
800067d0:	e0 68 12 00 	mov	r8,4608
800067d4:	ea 18 00 7a 	orh	r8,0x7a
800067d8:	ef 48 ff 64 	st.w	r7[-156],r8
800067dc:	ee f8 ff 68 	ld.w	r8,r7[-152]
800067e0:	ef 48 ff 70 	st.w	r7[-144],r8
800067e4:	ee f8 ff 64 	ld.w	r8,r7[-156]
800067e8:	ef 48 ff 6c 	st.w	r7[-148],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800067ec:	ee fa ff 70 	ld.w	r10,r7[-144]
800067f0:	ef 4a fe f4 	st.w	r7[-268],r10
800067f4:	30 08       	mov	r8,0
800067f6:	ef 48 fe f0 	st.w	r7[-272],r8
800067fa:	ee fc ff 6c 	ld.w	r12,r7[-148]
800067fe:	ef 4c fe ec 	st.w	r7[-276],r12
80006802:	30 0a       	mov	r10,0
80006804:	ef 4a fe e8 	st.w	r7[-280],r10
80006808:	ee f9 fe f0 	ld.w	r9,r7[-272]
8000680c:	ee f8 fe ec 	ld.w	r8,r7[-276]
80006810:	b1 39       	mul	r9,r8
80006812:	ee f8 fe e8 	ld.w	r8,r7[-280]
80006816:	ee fc fe f4 	ld.w	r12,r7[-268]
8000681a:	b9 38       	mul	r8,r12
8000681c:	10 09       	add	r9,r8
8000681e:	ee f8 fe f4 	ld.w	r8,r7[-268]
80006822:	ee fc fe ec 	ld.w	r12,r7[-276]
80006826:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000682a:	16 09       	add	r9,r11
8000682c:	12 9b       	mov	r11,r9
8000682e:	e0 68 03 e7 	mov	r8,999
80006832:	30 09       	mov	r9,0
80006834:	10 0a       	add	r10,r8
80006836:	f6 09 00 4b 	adc	r11,r11,r9
8000683a:	e0 68 03 e8 	mov	r8,1000
8000683e:	30 09       	mov	r9,0
80006840:	f0 1f 02 56 	mcall	80007198 <main+0xcd4>
80006844:	14 98       	mov	r8,r10
80006846:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80006848:	ef 48 ff 78 	st.w	r7[-136],r8
8000684c:	ee c8 00 ec 	sub	r8,r7,236
80006850:	ef 48 ff 74 	st.w	r7[-140],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006854:	e1 b8 00 42 	mfsr	r8,0x108
80006858:	10 99       	mov	r9,r8
8000685a:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000685e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006860:	ee f8 ff 74 	ld.w	r8,r7[-140]
80006864:	70 09       	ld.w	r9,r8[0x0]
80006866:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000686a:	10 09       	add	r9,r8
8000686c:	ee f8 ff 74 	ld.w	r8,r7[-140]
80006870:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006872:	ee f9 ff 74 	ld.w	r9,r7[-140]
80006876:	30 08       	mov	r8,0
80006878:	f3 68 00 08 	st.b	r9[8],r8
8000687c:	ee c8 00 ec 	sub	r8,r7,236
80006880:	ef 48 ff 7c 	st.w	r7[-132],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006884:	e1 b8 00 42 	mfsr	r8,0x108
80006888:	ef 48 ff 80 	st.w	r7[-128],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000688c:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80006890:	f1 39 00 08 	ld.ub	r9,r8[8]
80006894:	30 28       	mov	r8,2
80006896:	f0 09 18 00 	cp.b	r9,r8
8000689a:	c0 31       	brne	800068a0 <main+0x3dc>
    return false;
8000689c:	30 08       	mov	r8,0
8000689e:	c4 38       	rjmp	80006924 <main+0x460>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800068a0:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800068a4:	f1 39 00 08 	ld.ub	r9,r8[8]
800068a8:	30 18       	mov	r8,1
800068aa:	f0 09 18 00 	cp.b	r9,r8
800068ae:	c0 31       	brne	800068b4 <main+0x3f0>
    return true;
800068b0:	30 18       	mov	r8,1
800068b2:	c3 98       	rjmp	80006924 <main+0x460>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800068b4:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800068b8:	70 09       	ld.w	r9,r8[0x0]
800068ba:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800068be:	70 18       	ld.w	r8,r8[0x4]
800068c0:	10 39       	cp.w	r9,r8
800068c2:	e0 88 00 1a 	brls	800068f6 <main+0x432>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800068c6:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800068ca:	70 09       	ld.w	r9,r8[0x0]
800068cc:	ee f8 ff 80 	ld.w	r8,r7[-128]
800068d0:	12 38       	cp.w	r8,r9
800068d2:	c1 02       	brcc	800068f2 <main+0x42e>
800068d4:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800068d8:	70 19       	ld.w	r9,r8[0x4]
800068da:	ee f8 ff 80 	ld.w	r8,r7[-128]
800068de:	12 38       	cp.w	r8,r9
800068e0:	e0 88 00 09 	brls	800068f2 <main+0x42e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800068e4:	ee f9 ff 7c 	ld.w	r9,r7[-132]
800068e8:	30 18       	mov	r8,1
800068ea:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800068ee:	30 18       	mov	r8,1
800068f0:	c1 a8       	rjmp	80006924 <main+0x460>
    }
    return false;
800068f2:	30 08       	mov	r8,0
800068f4:	c1 88       	rjmp	80006924 <main+0x460>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800068f6:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800068fa:	70 09       	ld.w	r9,r8[0x0]
800068fc:	ee f8 ff 80 	ld.w	r8,r7[-128]
80006900:	12 38       	cp.w	r8,r9
80006902:	c0 93       	brcs	80006914 <main+0x450>
80006904:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80006908:	70 19       	ld.w	r9,r8[0x4]
8000690a:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000690e:	12 38       	cp.w	r8,r9
80006910:	e0 88 00 09 	brls	80006922 <main+0x45e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006914:	ee f9 ff 7c 	ld.w	r9,r7[-132]
80006918:	30 18       	mov	r8,1
8000691a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000691e:	30 18       	mov	r8,1
80006920:	c0 28       	rjmp	80006924 <main+0x460>
    }
    return false;
80006922:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006924:	58 08       	cp.w	r8,0
80006926:	ca b0       	breq	8000687c <main+0x3b8>
					sealShieldState = STATE_START_CLEAN;
					print_ssdbg("Either no devices or shelves are past lifetime, charging devices\r\n");
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
				}
				break;
80006928:	e0 8f 02 b2 	bral	80006e8c <main+0x9c8>
					cpu_delay_ms(500, 8000000);
					display_text(IDX_CLEANING);
					cpu_delay_ms(3000, 8000000); //give display time to update, scroll all the way across
				}
				else {
					sealShieldState = STATE_START_CLEAN;
8000692c:	fe f9 08 1c 	ld.w	r9,pc[2076]
80006930:	30 78       	mov	r8,7
80006932:	b2 88       	st.b	r9[0x0],r8
					print_ssdbg("Either no devices or shelves are past lifetime, charging devices\r\n");
80006934:	fe fc 08 68 	ld.w	r12,pc[2152]
80006938:	f0 1f 01 fd 	mcall	8000712c <main+0xc68>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
8000693c:	30 0c       	mov	r12,0
8000693e:	f0 1f 01 fd 	mcall	80007130 <main+0xc6c>
				}
				break;
80006942:	e0 8f 02 a5 	bral	80006e8c <main+0x9c8>
				
			case STATE_START_SANITIZE:
				sanitizeIdx = 0xFF; //this means not assigned yet
80006946:	fe f9 08 5a 	ld.w	r9,pc[2138]
8000694a:	3f f8       	mov	r8,-1
8000694c:	b2 88       	st.b	r9[0x0],r8
				for (int i = 0; i<NUM_SHELVES; i++) {
8000694e:	30 08       	mov	r8,0
80006950:	ef 48 ff 38 	st.w	r7[-200],r8
80006954:	c3 78       	rjmp	800069c2 <main+0x4fe>
					if (shelfActive[i] == SHELF_ACTIVE) {
80006956:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000695a:	fe f8 08 4a 	ld.w	r8,pc[2122]
8000695e:	f0 09 07 08 	ld.ub	r8,r8[r9]
80006962:	58 08       	cp.w	r8,0
80006964:	c2 31       	brne	800069aa <main+0x4e6>
						shelfTimerInitSeconds[i] = calc_sanitize_time(i);
80006966:	ee f6 ff 38 	ld.w	r6,r7[-200]
8000696a:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000696e:	5c 58       	castu.b	r8
80006970:	10 9c       	mov	r12,r8
80006972:	f0 1f 02 0e 	mcall	800071a8 <main+0xce4>
80006976:	18 99       	mov	r9,r12
80006978:	fe f8 08 34 	ld.w	r8,pc[2100]
8000697c:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
						
						led_shelf(i, LED_ON); //12apr15 turning the shelves on and leaving them on for the show. Use the timers I set up to cycle through the display text.
80006980:	ee f8 ff 38 	ld.w	r8,r7[-200]
80006984:	5c 58       	castu.b	r8
80006986:	30 1b       	mov	r11,1
80006988:	10 9c       	mov	r12,r8
8000698a:	f0 1f 02 0a 	mcall	800071b0 <main+0xcec>
						
						if (sanitizeIdx == 0xFF)
8000698e:	fe f8 08 12 	ld.w	r8,pc[2066]
80006992:	11 89       	ld.ub	r9,r8[0x0]
80006994:	3f f8       	mov	r8,-1
80006996:	f0 09 18 00 	cp.b	r9,r8
8000699a:	c0 f1       	brne	800069b8 <main+0x4f4>
						{
							sanitizeIdx = i; //set this to the first active shelf
8000699c:	ee f8 ff 38 	ld.w	r8,r7[-200]
800069a0:	5c 58       	castu.b	r8
800069a2:	fe f9 07 fe 	ld.w	r9,pc[2046]
800069a6:	b2 88       	st.b	r9[0x0],r8
800069a8:	c0 88       	rjmp	800069b8 <main+0x4f4>
						}
					}
					else {
						shelfTimerInitSeconds[i] = 0; //Don't run this shelf
800069aa:	ee fa ff 38 	ld.w	r10,r7[-200]
800069ae:	fe f9 07 fe 	ld.w	r9,pc[2046]
800069b2:	30 08       	mov	r8,0
800069b4:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
				}
				break;
				
			case STATE_START_SANITIZE:
				sanitizeIdx = 0xFF; //this means not assigned yet
				for (int i = 0; i<NUM_SHELVES; i++) {
800069b8:	ee f8 ff 38 	ld.w	r8,r7[-200]
800069bc:	2f f8       	sub	r8,-1
800069be:	ef 48 ff 38 	st.w	r7[-200],r8
800069c2:	ee f8 ff 38 	ld.w	r8,r7[-200]
800069c6:	58 38       	cp.w	r8,3
800069c8:	fe 9a ff c7 	brle	80006956 <main+0x492>
					else {
						shelfTimerInitSeconds[i] = 0; //Don't run this shelf
					}
				}
				
				sealShieldState = STATE_SANITIZE_1;
800069cc:	fe f9 07 7c 	ld.w	r9,pc[1916]
800069d0:	30 58       	mov	r8,5
800069d2:	b2 88       	st.b	r9[0x0],r8
				break;
800069d4:	e0 8f 02 5c 	bral	80006e8c <main+0x9c8>
				
			case STATE_SANITIZE_1:
				display_text(IDX_CLEAR);
800069d8:	30 9c       	mov	r12,9
800069da:	f0 1f 01 d6 	mcall	80007130 <main+0xc6c>
800069de:	e0 68 01 f4 	mov	r8,500
800069e2:	ef 48 ff 88 	st.w	r7[-120],r8
800069e6:	e0 68 12 00 	mov	r8,4608
800069ea:	ea 18 00 7a 	orh	r8,0x7a
800069ee:	ef 48 ff 84 	st.w	r7[-124],r8
800069f2:	ee f8 ff 88 	ld.w	r8,r7[-120]
800069f6:	ef 48 ff 90 	st.w	r7[-112],r8
800069fa:	ee f8 ff 84 	ld.w	r8,r7[-124]
800069fe:	ef 48 ff 8c 	st.w	r7[-116],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80006a02:	ee fa ff 90 	ld.w	r10,r7[-112]
80006a06:	ef 4a ff 04 	st.w	r7[-252],r10
80006a0a:	30 08       	mov	r8,0
80006a0c:	ef 48 ff 00 	st.w	r7[-256],r8
80006a10:	ee fc ff 8c 	ld.w	r12,r7[-116]
80006a14:	ef 4c fe fc 	st.w	r7[-260],r12
80006a18:	30 0a       	mov	r10,0
80006a1a:	ef 4a fe f8 	st.w	r7[-264],r10
80006a1e:	ee f9 ff 00 	ld.w	r9,r7[-256]
80006a22:	ee f8 fe fc 	ld.w	r8,r7[-260]
80006a26:	b1 39       	mul	r9,r8
80006a28:	ee f8 fe f8 	ld.w	r8,r7[-264]
80006a2c:	ee fc ff 04 	ld.w	r12,r7[-252]
80006a30:	b9 38       	mul	r8,r12
80006a32:	10 09       	add	r9,r8
80006a34:	ee f8 ff 04 	ld.w	r8,r7[-252]
80006a38:	ee fc fe fc 	ld.w	r12,r7[-260]
80006a3c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80006a40:	16 09       	add	r9,r11
80006a42:	12 9b       	mov	r11,r9
80006a44:	e0 68 03 e7 	mov	r8,999
80006a48:	30 09       	mov	r9,0
80006a4a:	10 0a       	add	r10,r8
80006a4c:	f6 09 00 4b 	adc	r11,r11,r9
80006a50:	e0 68 03 e8 	mov	r8,1000
80006a54:	30 09       	mov	r9,0
80006a56:	f0 1f 01 d1 	mcall	80007198 <main+0xcd4>
80006a5a:	14 98       	mov	r8,r10
80006a5c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80006a5e:	ef 48 ff 98 	st.w	r7[-104],r8
80006a62:	ee c8 00 e0 	sub	r8,r7,224
80006a66:	ef 48 ff 94 	st.w	r7[-108],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006a6a:	e1 b8 00 42 	mfsr	r8,0x108
80006a6e:	10 99       	mov	r9,r8
80006a70:	ee f8 ff 94 	ld.w	r8,r7[-108]
80006a74:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006a76:	ee f8 ff 94 	ld.w	r8,r7[-108]
80006a7a:	70 09       	ld.w	r9,r8[0x0]
80006a7c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80006a80:	10 09       	add	r9,r8
80006a82:	ee f8 ff 94 	ld.w	r8,r7[-108]
80006a86:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006a88:	ee f9 ff 94 	ld.w	r9,r7[-108]
80006a8c:	30 08       	mov	r8,0
80006a8e:	f3 68 00 08 	st.b	r9[8],r8
80006a92:	ee c8 00 e0 	sub	r8,r7,224
80006a96:	ef 48 ff 9c 	st.w	r7[-100],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006a9a:	e1 b8 00 42 	mfsr	r8,0x108
80006a9e:	ef 48 ff a0 	st.w	r7[-96],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006aa2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80006aa6:	f1 39 00 08 	ld.ub	r9,r8[8]
80006aaa:	30 28       	mov	r8,2
80006aac:	f0 09 18 00 	cp.b	r9,r8
80006ab0:	c0 31       	brne	80006ab6 <main+0x5f2>
    return false;
80006ab2:	30 08       	mov	r8,0
80006ab4:	c4 38       	rjmp	80006b3a <main+0x676>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006ab6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80006aba:	f1 39 00 08 	ld.ub	r9,r8[8]
80006abe:	30 18       	mov	r8,1
80006ac0:	f0 09 18 00 	cp.b	r9,r8
80006ac4:	c0 31       	brne	80006aca <main+0x606>
    return true;
80006ac6:	30 18       	mov	r8,1
80006ac8:	c3 98       	rjmp	80006b3a <main+0x676>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006aca:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80006ace:	70 09       	ld.w	r9,r8[0x0]
80006ad0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80006ad4:	70 18       	ld.w	r8,r8[0x4]
80006ad6:	10 39       	cp.w	r9,r8
80006ad8:	e0 88 00 1a 	brls	80006b0c <main+0x648>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006adc:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80006ae0:	70 09       	ld.w	r9,r8[0x0]
80006ae2:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006ae6:	12 38       	cp.w	r8,r9
80006ae8:	c1 02       	brcc	80006b08 <main+0x644>
80006aea:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80006aee:	70 19       	ld.w	r9,r8[0x4]
80006af0:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006af4:	12 38       	cp.w	r8,r9
80006af6:	e0 88 00 09 	brls	80006b08 <main+0x644>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006afa:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80006afe:	30 18       	mov	r8,1
80006b00:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006b04:	30 18       	mov	r8,1
80006b06:	c1 a8       	rjmp	80006b3a <main+0x676>
    }
    return false;
80006b08:	30 08       	mov	r8,0
80006b0a:	c1 88       	rjmp	80006b3a <main+0x676>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006b0c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80006b10:	70 09       	ld.w	r9,r8[0x0]
80006b12:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006b16:	12 38       	cp.w	r8,r9
80006b18:	c0 93       	brcs	80006b2a <main+0x666>
80006b1a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80006b1e:	70 19       	ld.w	r9,r8[0x4]
80006b20:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006b24:	12 38       	cp.w	r8,r9
80006b26:	e0 88 00 09 	brls	80006b38 <main+0x674>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006b2a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80006b2e:	30 18       	mov	r8,1
80006b30:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006b34:	30 18       	mov	r8,1
80006b36:	c0 28       	rjmp	80006b3a <main+0x676>
    }
    return false;
80006b38:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006b3a:	58 08       	cp.w	r8,0
80006b3c:	ca b0       	breq	80006a92 <main+0x5ce>
				cpu_delay_ms(500, 8000000); //half second
				
				if (shelfTimerInitSeconds[sanitizeIdx] != 0)
80006b3e:	fe f8 06 62 	ld.w	r8,pc[1634]
80006b42:	11 88       	ld.ub	r8,r8[0x0]
80006b44:	10 99       	mov	r9,r8
80006b46:	fe f8 06 66 	ld.w	r8,pc[1638]
80006b4a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006b4e:	58 08       	cp.w	r8,0
80006b50:	c4 d0       	breq	80006bea <main+0x726>
				{
					cpu_set_timeout(shelfTimerInitSeconds[sanitizeIdx], shelfTimerPtr[sanitizeIdx]); //cpu cycle counts and the pointer to the timer variable for this particular shelf
80006b52:	fe f8 06 4e 	ld.w	r8,pc[1614]
80006b56:	11 88       	ld.ub	r8,r8[0x0]
80006b58:	10 99       	mov	r9,r8
80006b5a:	fe f8 05 f2 	ld.w	r8,pc[1522]
80006b5e:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80006b62:	fe f8 06 3e 	ld.w	r8,pc[1598]
80006b66:	11 88       	ld.ub	r8,r8[0x0]
80006b68:	10 99       	mov	r9,r8
80006b6a:	fe f8 06 42 	ld.w	r8,pc[1602]
80006b6e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006b72:	ef 48 ff a8 	st.w	r7[-88],r8
80006b76:	ef 4a ff a4 	st.w	r7[-92],r10
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006b7a:	e1 b8 00 42 	mfsr	r8,0x108
80006b7e:	10 99       	mov	r9,r8
80006b80:	ee f8 ff a4 	ld.w	r8,r7[-92]
80006b84:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006b86:	ee f8 ff a4 	ld.w	r8,r7[-92]
80006b8a:	70 09       	ld.w	r9,r8[0x0]
80006b8c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80006b90:	10 09       	add	r9,r8
80006b92:	ee f8 ff a4 	ld.w	r8,r7[-92]
80006b96:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006b98:	ee f9 ff a4 	ld.w	r9,r7[-92]
80006b9c:	30 08       	mov	r8,0
80006b9e:	f3 68 00 08 	st.b	r9[8],r8
					switch (sanitizeIdx)
80006ba2:	fe f8 05 fe 	ld.w	r8,pc[1534]
80006ba6:	11 88       	ld.ub	r8,r8[0x0]
80006ba8:	58 18       	cp.w	r8,1
80006baa:	c0 f0       	breq	80006bc8 <main+0x704>
80006bac:	e0 89 00 05 	brgt	80006bb6 <main+0x6f2>
80006bb0:	58 08       	cp.w	r8,0
80006bb2:	c0 70       	breq	80006bc0 <main+0x6fc>
80006bb4:	c1 58       	rjmp	80006bde <main+0x71a>
80006bb6:	58 28       	cp.w	r8,2
80006bb8:	c0 c0       	breq	80006bd0 <main+0x70c>
80006bba:	58 38       	cp.w	r8,3
80006bbc:	c0 e0       	breq	80006bd8 <main+0x714>
80006bbe:	c1 08       	rjmp	80006bde <main+0x71a>
					{
						case 0:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF1);
80006bc0:	30 5c       	mov	r12,5
80006bc2:	f0 1f 01 5c 	mcall	80007130 <main+0xc6c>
							break;
80006bc6:	c0 c8       	rjmp	80006bde <main+0x71a>
						case 1:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF2);
80006bc8:	30 6c       	mov	r12,6
80006bca:	f0 1f 01 5a 	mcall	80007130 <main+0xc6c>
							break;
80006bce:	c0 88       	rjmp	80006bde <main+0x71a>
						case 2:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF3);
80006bd0:	30 7c       	mov	r12,7
80006bd2:	f0 1f 01 58 	mcall	80007130 <main+0xc6c>
							break;
80006bd6:	c0 48       	rjmp	80006bde <main+0x71a>
						case 3:
							//								display_text(IDX_CLEAR);
							display_text(IDX_SHELF4);
80006bd8:	30 8c       	mov	r12,8
80006bda:	f0 1f 01 56 	mcall	80007130 <main+0xc6c>
					}

//12apr15 shelf st					led_shelf(sanitizeIdx, LED_ON);	//NOTE we need to be careful here, we need to be able to shut off the shelf LEDs the *instant* the door latch opens, this is important for safety
					//this means we need as little logic between turning the shelf on and turning it off so we can react as quickly as possible to the door latch
										
					sealShieldState = STATE_SANITIZE_2;
80006bde:	fe f9 05 6a 	ld.w	r9,pc[1386]
80006be2:	30 68       	mov	r8,6
80006be4:	b2 88       	st.b	r9[0x0],r8
					if (++sanitizeIdx >= NUM_SHELVES)
					{
						sanitizeIdx = 0; //12apr15 wrap around
					} 
				}
				break;
80006be6:	e0 8f 01 53 	bral	80006e8c <main+0x9c8>
					sealShieldState = STATE_SANITIZE_2;
				}
				else
				{
					//Nothing on that shelf, go to the next shelf
					if (++sanitizeIdx >= NUM_SHELVES)
80006bea:	fe f8 05 b6 	ld.w	r8,pc[1462]
80006bee:	11 88       	ld.ub	r8,r8[0x0]
80006bf0:	2f f8       	sub	r8,-1
80006bf2:	5c 58       	castu.b	r8
80006bf4:	fe f9 05 ac 	ld.w	r9,pc[1452]
80006bf8:	b2 88       	st.b	r9[0x0],r8
80006bfa:	fe f8 05 a6 	ld.w	r8,pc[1446]
80006bfe:	11 89       	ld.ub	r9,r8[0x0]
80006c00:	30 38       	mov	r8,3
80006c02:	f0 09 18 00 	cp.b	r9,r8
80006c06:	e0 88 01 3e 	brls	80006e82 <main+0x9be>
					{
						sanitizeIdx = 0; //12apr15 wrap around
80006c0a:	fe f9 05 96 	ld.w	r9,pc[1430]
80006c0e:	30 08       	mov	r8,0
80006c10:	b2 88       	st.b	r9[0x0],r8
					} 
				}
				break;
80006c12:	c3 d9       	rjmp	80006e8c <main+0x9c8>
				
			case STATE_SANITIZE_2:
				if (cpu_is_timeout(shelfTimerPtr[sanitizeIdx])) {
80006c14:	fe f8 05 8c 	ld.w	r8,pc[1420]
80006c18:	11 88       	ld.ub	r8,r8[0x0]
80006c1a:	10 99       	mov	r9,r8
80006c1c:	fe f8 05 30 	ld.w	r8,pc[1328]
80006c20:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006c24:	ef 48 ff ac 	st.w	r7[-84],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006c28:	e1 b8 00 42 	mfsr	r8,0x108
80006c2c:	ef 48 ff b0 	st.w	r7[-80],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006c30:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006c34:	f1 39 00 08 	ld.ub	r9,r8[8]
80006c38:	30 28       	mov	r8,2
80006c3a:	f0 09 18 00 	cp.b	r9,r8
80006c3e:	c0 31       	brne	80006c44 <main+0x780>
    return false;
80006c40:	30 08       	mov	r8,0
80006c42:	c4 38       	rjmp	80006cc8 <main+0x804>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006c44:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006c48:	f1 39 00 08 	ld.ub	r9,r8[8]
80006c4c:	30 18       	mov	r8,1
80006c4e:	f0 09 18 00 	cp.b	r9,r8
80006c52:	c0 31       	brne	80006c58 <main+0x794>
    return true;
80006c54:	30 18       	mov	r8,1
80006c56:	c3 98       	rjmp	80006cc8 <main+0x804>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006c58:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006c5c:	70 09       	ld.w	r9,r8[0x0]
80006c5e:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006c62:	70 18       	ld.w	r8,r8[0x4]
80006c64:	10 39       	cp.w	r9,r8
80006c66:	e0 88 00 1a 	brls	80006c9a <main+0x7d6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006c6a:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006c6e:	70 09       	ld.w	r9,r8[0x0]
80006c70:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006c74:	12 38       	cp.w	r8,r9
80006c76:	c1 02       	brcc	80006c96 <main+0x7d2>
80006c78:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006c7c:	70 19       	ld.w	r9,r8[0x4]
80006c7e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006c82:	12 38       	cp.w	r8,r9
80006c84:	e0 88 00 09 	brls	80006c96 <main+0x7d2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006c88:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006c8c:	30 18       	mov	r8,1
80006c8e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006c92:	30 18       	mov	r8,1
80006c94:	c1 a8       	rjmp	80006cc8 <main+0x804>
    }
    return false;
80006c96:	30 08       	mov	r8,0
80006c98:	c1 88       	rjmp	80006cc8 <main+0x804>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006c9a:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006c9e:	70 09       	ld.w	r9,r8[0x0]
80006ca0:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006ca4:	12 38       	cp.w	r8,r9
80006ca6:	c0 93       	brcs	80006cb8 <main+0x7f4>
80006ca8:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006cac:	70 19       	ld.w	r9,r8[0x4]
80006cae:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006cb2:	12 38       	cp.w	r8,r9
80006cb4:	e0 88 00 09 	brls	80006cc6 <main+0x802>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006cb8:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006cbc:	30 18       	mov	r8,1
80006cbe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006cc2:	30 18       	mov	r8,1
80006cc4:	c0 28       	rjmp	80006cc8 <main+0x804>
    }
    return false;
80006cc6:	30 08       	mov	r8,0
80006cc8:	58 08       	cp.w	r8,0
80006cca:	e0 80 00 de 	breq	80006e86 <main+0x9c2>
//12apr15 leave shelves on indefinitely for the show					led_shelf(sanitizeIdx, LED_OFF);
					cpu_stop_timeout(shelfTimerPtr[sanitizeIdx]);
80006cce:	fe f8 04 d2 	ld.w	r8,pc[1234]
80006cd2:	11 88       	ld.ub	r8,r8[0x0]
80006cd4:	10 99       	mov	r9,r8
80006cd6:	fe f8 04 76 	ld.w	r8,pc[1142]
80006cda:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006cde:	ef 48 ff b4 	st.w	r7[-76],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80006ce2:	ee f9 ff b4 	ld.w	r9,r7[-76]
80006ce6:	30 28       	mov	r8,2
80006ce8:	f3 68 00 08 	st.b	r9[8],r8
					print_ssdbg("Shelf clean\r\n");
80006cec:	fe fc 04 c8 	ld.w	r12,pc[1224]
80006cf0:	f0 1f 01 0f 	mcall	8000712c <main+0xc68>

					//All done, go to the next shelf
					if (++sanitizeIdx >= NUM_SHELVES)
80006cf4:	fe f8 04 ac 	ld.w	r8,pc[1196]
80006cf8:	11 88       	ld.ub	r8,r8[0x0]
80006cfa:	2f f8       	sub	r8,-1
80006cfc:	5c 58       	castu.b	r8
80006cfe:	fe f9 04 a2 	ld.w	r9,pc[1186]
80006d02:	b2 88       	st.b	r9[0x0],r8
80006d04:	fe f8 04 9c 	ld.w	r8,pc[1180]
80006d08:	11 89       	ld.ub	r9,r8[0x0]
80006d0a:	30 38       	mov	r8,3
80006d0c:	f0 09 18 00 	cp.b	r9,r8
80006d10:	e0 88 00 0b 	brls	80006d26 <main+0x862>
					{
						sanitizeIdx = 0;
80006d14:	fe f9 04 8c 	ld.w	r9,pc[1164]
80006d18:	30 08       	mov	r8,0
80006d1a:	b2 88       	st.b	r9[0x0],r8
						sealShieldState = STATE_SANITIZE_1; //that was the last shelf, get out of sanitizing
80006d1c:	fe f9 04 2c 	ld.w	r9,pc[1068]
80006d20:	30 58       	mov	r8,5
80006d22:	b2 88       	st.b	r9[0x0],r8
					else
					{
						sealShieldState = STATE_SANITIZE_1; //more shelves to clean possibly
					}
				}
				break;
80006d24:	cb 48       	rjmp	80006e8c <main+0x9c8>
						sanitizeIdx = 0;
						sealShieldState = STATE_SANITIZE_1; //that was the last shelf, get out of sanitizing
					}
					else
					{
						sealShieldState = STATE_SANITIZE_1; //more shelves to clean possibly
80006d26:	fe f9 04 22 	ld.w	r9,pc[1058]
80006d2a:	30 58       	mov	r8,5
80006d2c:	b2 88       	st.b	r9[0x0],r8
					}
				}
				break;
80006d2e:	ca f8       	rjmp	80006e8c <main+0x9c8>
				
			case STATE_START_CLEAN:
				display_text(IDX_CLEAN);
80006d30:	30 1c       	mov	r12,1
80006d32:	f0 1f 01 00 	mcall	80007130 <main+0xc6c>
				sealShieldState = STATE_CLEAN;
80006d36:	fe f9 04 12 	ld.w	r9,pc[1042]
80006d3a:	30 88       	mov	r8,8
80006d3c:	b2 88       	st.b	r9[0x0],r8
80006d3e:	e0 68 7e 00 	mov	r8,32256
80006d42:	ea 18 03 56 	orh	r8,0x356
80006d46:	ef 48 ff bc 	st.w	r7[-68],r8
80006d4a:	fe f8 04 6e 	ld.w	r8,pc[1134]
80006d4e:	ef 48 ff b8 	st.w	r7[-72],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006d52:	e1 b8 00 42 	mfsr	r8,0x108
80006d56:	10 99       	mov	r9,r8
80006d58:	ee f8 ff b8 	ld.w	r8,r7[-72]
80006d5c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006d5e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80006d62:	70 09       	ld.w	r9,r8[0x0]
80006d64:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006d68:	10 09       	add	r9,r8
80006d6a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80006d6e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006d70:	ee f9 ff b8 	ld.w	r9,r7[-72]
80006d74:	30 08       	mov	r8,0
80006d76:	f3 68 00 08 	st.b	r9[8],r8
				cpu_set_timeout((7*SS_ONE_SECOND), &timerClean); //Fixed for now just to make the display look good, show the string and let it wrap once TODO: make this what it needs to be
				break;	
80006d7a:	c8 98       	rjmp	80006e8c <main+0x9c8>
80006d7c:	fe f8 04 3c 	ld.w	r8,pc[1084]
80006d80:	ef 48 ff c0 	st.w	r7[-64],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006d84:	e1 b8 00 42 	mfsr	r8,0x108
80006d88:	ef 48 ff c4 	st.w	r7[-60],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006d8c:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006d90:	f1 39 00 08 	ld.ub	r9,r8[8]
80006d94:	30 28       	mov	r8,2
80006d96:	f0 09 18 00 	cp.b	r9,r8
80006d9a:	c0 31       	brne	80006da0 <main+0x8dc>
    return false;
80006d9c:	30 08       	mov	r8,0
80006d9e:	c4 38       	rjmp	80006e24 <main+0x960>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006da0:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006da4:	f1 39 00 08 	ld.ub	r9,r8[8]
80006da8:	30 18       	mov	r8,1
80006daa:	f0 09 18 00 	cp.b	r9,r8
80006dae:	c0 31       	brne	80006db4 <main+0x8f0>
    return true;
80006db0:	30 18       	mov	r8,1
80006db2:	c3 98       	rjmp	80006e24 <main+0x960>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006db4:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006db8:	70 09       	ld.w	r9,r8[0x0]
80006dba:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006dbe:	70 18       	ld.w	r8,r8[0x4]
80006dc0:	10 39       	cp.w	r9,r8
80006dc2:	e0 88 00 1a 	brls	80006df6 <main+0x932>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006dc6:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006dca:	70 09       	ld.w	r9,r8[0x0]
80006dcc:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006dd0:	12 38       	cp.w	r8,r9
80006dd2:	c1 02       	brcc	80006df2 <main+0x92e>
80006dd4:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006dd8:	70 19       	ld.w	r9,r8[0x4]
80006dda:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006dde:	12 38       	cp.w	r8,r9
80006de0:	e0 88 00 09 	brls	80006df2 <main+0x92e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006de4:	ee f9 ff c0 	ld.w	r9,r7[-64]
80006de8:	30 18       	mov	r8,1
80006dea:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006dee:	30 18       	mov	r8,1
80006df0:	c1 a8       	rjmp	80006e24 <main+0x960>
    }
    return false;
80006df2:	30 08       	mov	r8,0
80006df4:	c1 88       	rjmp	80006e24 <main+0x960>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006df6:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006dfa:	70 09       	ld.w	r9,r8[0x0]
80006dfc:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006e00:	12 38       	cp.w	r8,r9
80006e02:	c0 93       	brcs	80006e14 <main+0x950>
80006e04:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006e08:	70 19       	ld.w	r9,r8[0x4]
80006e0a:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006e0e:	12 38       	cp.w	r8,r9
80006e10:	e0 88 00 09 	brls	80006e22 <main+0x95e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006e14:	ee f9 ff c0 	ld.w	r9,r7[-64]
80006e18:	30 18       	mov	r8,1
80006e1a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006e1e:	30 18       	mov	r8,1
80006e20:	c0 28       	rjmp	80006e24 <main+0x960>
    }
    return false;
80006e22:	30 08       	mov	r8,0
				
			case STATE_CLEAN:
				if (cpu_is_timeout(&timerClean)) {
80006e24:	58 08       	cp.w	r8,0
80006e26:	c3 20       	breq	80006e8a <main+0x9c6>
80006e28:	fe f8 03 90 	ld.w	r8,pc[912]
80006e2c:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80006e30:	ee f9 ff c8 	ld.w	r9,r7[-56]
80006e34:	30 28       	mov	r8,2
80006e36:	f3 68 00 08 	st.b	r9[8],r8
					cpu_stop_timeout(&timerClean);
					sealShieldState = STATE_ACTION_PB_RELEASED;	
80006e3a:	fe f9 03 0e 	ld.w	r9,pc[782]
80006e3e:	30 38       	mov	r8,3
80006e40:	b2 88       	st.b	r9[0x0],r8
					print_ssdbg("Start sanitizing\r\n");
80006e42:	fe fc 03 52 	ld.w	r12,pc[850]
80006e46:	f0 1f 00 ba 	mcall	8000712c <main+0xc68>

				}
				break;
80006e4a:	c2 18       	rjmp	80006e8c <main+0x9c8>
				
			case STATE_SHUTDOWN_PROCESSES:
				//Shutdown all processes that could harm the user or equipment if the door is open
				led_shelf(0, LED_OFF);
80006e4c:	30 0b       	mov	r11,0
80006e4e:	30 0c       	mov	r12,0
80006e50:	f0 1f 00 d8 	mcall	800071b0 <main+0xcec>
				led_shelf(1, LED_OFF);
80006e54:	30 0b       	mov	r11,0
80006e56:	30 1c       	mov	r12,1
80006e58:	f0 1f 00 d6 	mcall	800071b0 <main+0xcec>
				led_shelf(2, LED_OFF);
80006e5c:	30 0b       	mov	r11,0
80006e5e:	30 2c       	mov	r12,2
80006e60:	f0 1f 00 d4 	mcall	800071b0 <main+0xcec>
				led_shelf(3, LED_OFF);
80006e64:	30 0b       	mov	r11,0
80006e66:	30 3c       	mov	r12,3
80006e68:	f0 1f 00 d2 	mcall	800071b0 <main+0xcec>
				sealShieldState = STATE_SS_IDLE;
80006e6c:	fe f9 02 dc 	ld.w	r9,pc[732]
80006e70:	30 08       	mov	r8,0
80006e72:	b2 88       	st.b	r9[0x0],r8
80006e74:	c0 c8       	rjmp	80006e8c <main+0x9c8>
//					display_text(IDX_CLEAR);
					display_text(IDX_READY);
					sealShieldState = STATE_DOOR_LATCHED;
					firstTimeThrough = 1;
				}
				break;
80006e76:	d7 03       	nop
80006e78:	c0 a8       	rjmp	80006e8c <main+0x9c8>
				if (!SS_ACTION_PB) {
					print_ssdbg("Action push button press detected\r\n");
					sealShieldState = STATE_ACTION_PB_PRESSED;
					read_serial_ids();
				}
				break;
80006e7a:	d7 03       	nop
80006e7c:	c0 88       	rjmp	80006e8c <main+0x9c8>
				{
					print_ssdbg("Action push button release detected\r\n");
					sealShieldState = STATE_ACTION_PB_RELEASED;	
					read_serial_ids();
				}
				break;
80006e7e:	d7 03       	nop
80006e80:	c0 68       	rjmp	80006e8c <main+0x9c8>
					if (++sanitizeIdx >= NUM_SHELVES)
					{
						sanitizeIdx = 0; //12apr15 wrap around
					} 
				}
				break;
80006e82:	d7 03       	nop
80006e84:	c0 48       	rjmp	80006e8c <main+0x9c8>
					else
					{
						sealShieldState = STATE_SANITIZE_1; //more shelves to clean possibly
					}
				}
				break;
80006e86:	d7 03       	nop
80006e88:	c0 28       	rjmp	80006e8c <main+0x9c8>
					cpu_stop_timeout(&timerClean);
					sealShieldState = STATE_ACTION_PB_RELEASED;	
					print_ssdbg("Start sanitizing\r\n");

				}
				break;
80006e8a:	d7 03       	nop
		
		/*
		 * This check overrides everything going on in the state machine, if the user opens the door,
		 * shut down all processes for safety
		 */
		if (!SS_DOOR_LATCHED) {
80006e8c:	33 ec       	mov	r12,62
80006e8e:	f0 1f 00 b8 	mcall	8000716c <main+0xca8>
80006e92:	18 98       	mov	r8,r12
80006e94:	58 08       	cp.w	r8,0
80006e96:	e0 80 00 c1 	breq	80007018 <main+0xb54>
		
			if (firstTimeThrough)
80006e9a:	fe f8 02 da 	ld.w	r8,pc[730]
80006e9e:	11 88       	ld.ub	r8,r8[0x0]
80006ea0:	58 08       	cp.w	r8,0
80006ea2:	e0 80 00 bb 	breq	80007018 <main+0xb54>
			{
				door_latch_open_kill_all_shelves();
80006ea6:	f0 1f 00 c6 	mcall	800071bc <main+0xcf8>

				display_text(IDX_CLEAR);
80006eaa:	30 9c       	mov	r12,9
80006eac:	f0 1f 00 a1 	mcall	80007130 <main+0xc6c>
80006eb0:	e0 68 01 f4 	mov	r8,500
80006eb4:	ef 48 ff d0 	st.w	r7[-48],r8
80006eb8:	e0 68 12 00 	mov	r8,4608
80006ebc:	ea 18 00 7a 	orh	r8,0x7a
80006ec0:	ef 48 ff cc 	st.w	r7[-52],r8
80006ec4:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006ec8:	ef 48 ff d8 	st.w	r7[-40],r8
80006ecc:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006ed0:	ef 48 ff d4 	st.w	r7[-44],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80006ed4:	ee f2 ff d8 	ld.w	r2,r7[-40]
80006ed8:	30 03       	mov	r3,0
80006eda:	ee f0 ff d4 	ld.w	r0,r7[-44]
80006ede:	30 01       	mov	r1,0
80006ee0:	e6 00 02 49 	mul	r9,r3,r0
80006ee4:	e2 02 02 48 	mul	r8,r1,r2
80006ee8:	10 09       	add	r9,r8
80006eea:	e4 00 06 4a 	mulu.d	r10,r2,r0
80006eee:	16 09       	add	r9,r11
80006ef0:	12 9b       	mov	r11,r9
80006ef2:	e0 68 03 e7 	mov	r8,999
80006ef6:	30 09       	mov	r9,0
80006ef8:	10 0a       	add	r10,r8
80006efa:	f6 09 00 4b 	adc	r11,r11,r9
80006efe:	e0 68 03 e8 	mov	r8,1000
80006f02:	30 09       	mov	r9,0
80006f04:	f0 1f 00 a5 	mcall	80007198 <main+0xcd4>
80006f08:	14 98       	mov	r8,r10
80006f0a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80006f0c:	ef 48 ff e0 	st.w	r7[-32],r8
80006f10:	ee c8 00 d4 	sub	r8,r7,212
80006f14:	ef 48 ff dc 	st.w	r7[-36],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006f18:	e1 b8 00 42 	mfsr	r8,0x108
80006f1c:	10 99       	mov	r9,r8
80006f1e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006f22:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006f24:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006f28:	70 09       	ld.w	r9,r8[0x0]
80006f2a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006f2e:	10 09       	add	r9,r8
80006f30:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006f34:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006f36:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006f3a:	30 08       	mov	r8,0
80006f3c:	f3 68 00 08 	st.b	r9[8],r8
80006f40:	ee c8 00 d4 	sub	r8,r7,212
80006f44:	ef 48 ff e4 	st.w	r7[-28],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006f48:	e1 b8 00 42 	mfsr	r8,0x108
80006f4c:	ef 48 ff e8 	st.w	r7[-24],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006f50:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006f54:	f1 39 00 08 	ld.ub	r9,r8[8]
80006f58:	30 28       	mov	r8,2
80006f5a:	f0 09 18 00 	cp.b	r9,r8
80006f5e:	c0 31       	brne	80006f64 <main+0xaa0>
    return false;
80006f60:	30 08       	mov	r8,0
80006f62:	c4 38       	rjmp	80006fe8 <main+0xb24>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006f64:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006f68:	f1 39 00 08 	ld.ub	r9,r8[8]
80006f6c:	30 18       	mov	r8,1
80006f6e:	f0 09 18 00 	cp.b	r9,r8
80006f72:	c0 31       	brne	80006f78 <main+0xab4>
    return true;
80006f74:	30 18       	mov	r8,1
80006f76:	c3 98       	rjmp	80006fe8 <main+0xb24>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006f78:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006f7c:	70 09       	ld.w	r9,r8[0x0]
80006f7e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006f82:	70 18       	ld.w	r8,r8[0x4]
80006f84:	10 39       	cp.w	r9,r8
80006f86:	e0 88 00 1a 	brls	80006fba <main+0xaf6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006f8a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006f8e:	70 09       	ld.w	r9,r8[0x0]
80006f90:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006f94:	12 38       	cp.w	r8,r9
80006f96:	c1 02       	brcc	80006fb6 <main+0xaf2>
80006f98:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006f9c:	70 19       	ld.w	r9,r8[0x4]
80006f9e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006fa2:	12 38       	cp.w	r8,r9
80006fa4:	e0 88 00 09 	brls	80006fb6 <main+0xaf2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006fa8:	ee f9 ff e4 	ld.w	r9,r7[-28]
80006fac:	30 18       	mov	r8,1
80006fae:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006fb2:	30 18       	mov	r8,1
80006fb4:	c1 a8       	rjmp	80006fe8 <main+0xb24>
    }
    return false;
80006fb6:	30 08       	mov	r8,0
80006fb8:	c1 88       	rjmp	80006fe8 <main+0xb24>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006fba:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006fbe:	70 09       	ld.w	r9,r8[0x0]
80006fc0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006fc4:	12 38       	cp.w	r8,r9
80006fc6:	c0 93       	brcs	80006fd8 <main+0xb14>
80006fc8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006fcc:	70 19       	ld.w	r9,r8[0x4]
80006fce:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006fd2:	12 38       	cp.w	r8,r9
80006fd4:	e0 88 00 09 	brls	80006fe6 <main+0xb22>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006fd8:	ee f9 ff e4 	ld.w	r9,r7[-28]
80006fdc:	30 18       	mov	r8,1
80006fde:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006fe2:	30 18       	mov	r8,1
80006fe4:	c0 28       	rjmp	80006fe8 <main+0xb24>
    }
    return false;
80006fe6:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006fe8:	58 08       	cp.w	r8,0
80006fea:	ca b0       	breq	80006f40 <main+0xa7c>
				cpu_delay_ms(500, 8000000);
				switch (sealShieldState)
80006fec:	4d 78       	lddpc	r8,80007148 <main+0xc84>
80006fee:	11 88       	ld.ub	r8,r8[0x0]
80006ff0:	20 58       	sub	r8,5
80006ff2:	58 18       	cp.w	r8,1
80006ff4:	e0 8b 00 06 	brhi	80007000 <main+0xb3c>
				{
					case STATE_SANITIZE_1:
					case STATE_SANITIZE_2:
						display_text(IDX_DIRTY);
80006ff8:	30 3c       	mov	r12,3
80006ffa:	f0 1f 00 4e 	mcall	80007130 <main+0xc6c>
						break;
80006ffe:	c0 48       	rjmp	80007006 <main+0xb42>
					
					default:
						display_text(IDX_CLEAN);
80007000:	30 1c       	mov	r12,1
80007002:	f0 1f 00 4c 	mcall	80007130 <main+0xc6c>
						break;
				}

				sealShieldState = STATE_SHUTDOWN_PROCESSES;
80007006:	4d 19       	lddpc	r9,80007148 <main+0xc84>
80007008:	30 98       	mov	r8,9
8000700a:	b2 88       	st.b	r9[0x0],r8
				print_ssdbg("Door latch opened, shutting down all processes\r\n");
8000700c:	4e dc       	lddpc	r12,800071c0 <main+0xcfc>
8000700e:	f0 1f 00 48 	mcall	8000712c <main+0xc68>
				firstTimeThrough = 0;
80007012:	4d 99       	lddpc	r9,80007174 <main+0xcb0>
80007014:	30 08       	mov	r8,0
80007016:	b2 88       	st.b	r9[0x0],r8
80007018:	4d 38       	lddpc	r8,80007164 <main+0xca0>
8000701a:	ef 48 ff ec 	st.w	r7[-20],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000701e:	e1 b8 00 42 	mfsr	r8,0x108
80007022:	ef 48 ff f0 	st.w	r7[-16],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80007026:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000702a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000702e:	30 28       	mov	r8,2
80007030:	f0 09 18 00 	cp.b	r9,r8
80007034:	c0 31       	brne	8000703a <main+0xb76>
    return false;
80007036:	30 08       	mov	r8,0
80007038:	c4 38       	rjmp	800070be <main+0xbfa>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000703a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000703e:	f1 39 00 08 	ld.ub	r9,r8[8]
80007042:	30 18       	mov	r8,1
80007044:	f0 09 18 00 	cp.b	r9,r8
80007048:	c0 31       	brne	8000704e <main+0xb8a>
    return true;
8000704a:	30 18       	mov	r8,1
8000704c:	c3 98       	rjmp	800070be <main+0xbfa>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000704e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007052:	70 09       	ld.w	r9,r8[0x0]
80007054:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007058:	70 18       	ld.w	r8,r8[0x4]
8000705a:	10 39       	cp.w	r9,r8
8000705c:	e0 88 00 1a 	brls	80007090 <main+0xbcc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80007060:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007064:	70 09       	ld.w	r9,r8[0x0]
80007066:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000706a:	12 38       	cp.w	r8,r9
8000706c:	c1 02       	brcc	8000708c <main+0xbc8>
8000706e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007072:	70 19       	ld.w	r9,r8[0x4]
80007074:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007078:	12 38       	cp.w	r8,r9
8000707a:	e0 88 00 09 	brls	8000708c <main+0xbc8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000707e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007082:	30 18       	mov	r8,1
80007084:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80007088:	30 18       	mov	r8,1
8000708a:	c1 a8       	rjmp	800070be <main+0xbfa>
    }
    return false;
8000708c:	30 08       	mov	r8,0
8000708e:	c1 88       	rjmp	800070be <main+0xbfa>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80007090:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007094:	70 09       	ld.w	r9,r8[0x0]
80007096:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000709a:	12 38       	cp.w	r8,r9
8000709c:	c0 93       	brcs	800070ae <main+0xbea>
8000709e:	ee f8 ff ec 	ld.w	r8,r7[-20]
800070a2:	70 19       	ld.w	r9,r8[0x4]
800070a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800070a8:	12 38       	cp.w	r8,r9
800070aa:	e0 88 00 09 	brls	800070bc <main+0xbf8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800070ae:	ee f9 ff ec 	ld.w	r9,r7[-20]
800070b2:	30 18       	mov	r8,1
800070b4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800070b8:	30 18       	mov	r8,1
800070ba:	c0 28       	rjmp	800070be <main+0xbfa>
    }
    return false;
800070bc:	30 08       	mov	r8,0
				
			}
		} //if (!SS_DOOR_LATCHED)
		
		if (cpu_is_timeout(&timerDebugLed))
800070be:	58 08       	cp.w	r8,0
800070c0:	fe 90 fa 67 	breq	8000658e <main+0xca>
800070c4:	4a 88       	lddpc	r8,80007164 <main+0xca0>
800070c6:	ef 48 ff f4 	st.w	r7[-12],r8
 *
 * \param  cpu_time:   (input) internal information used by the timer API.
 */
__always_inline static void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
800070ca:	ee f9 ff f4 	ld.w	r9,r7[-12]
800070ce:	30 28       	mov	r8,2
800070d0:	f3 68 00 08 	st.b	r9[8],r8
800070d4:	e0 68 09 00 	mov	r8,2304
800070d8:	ea 18 00 3d 	orh	r8,0x3d
800070dc:	ef 48 ff fc 	st.w	r7[-4],r8
800070e0:	4a 18       	lddpc	r8,80007164 <main+0xca0>
800070e2:	ef 48 ff f8 	st.w	r7[-8],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800070e6:	e1 b8 00 42 	mfsr	r8,0x108
800070ea:	10 99       	mov	r9,r8
800070ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070f0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800070f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070f6:	70 09       	ld.w	r9,r8[0x0]
800070f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800070fc:	10 09       	add	r9,r8
800070fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007102:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80007104:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007108:	30 08       	mov	r8,0
8000710a:	f3 68 00 08 	st.b	r9[8],r8
		{
			cpu_stop_timeout(&timerDebugLed);
			cpu_set_timeout((SS_ONE_SECOND/2), &timerDebugLed);
			gpio_toggle_pin(SEALSHIELD_DEBUG_LED);
8000710e:	37 cc       	mov	r12,124
80007110:	f0 1f 00 2d 	mcall	800071c4 <main+0xd00>
		}
	} //while(true)
80007114:	fe 9f fa 3e 	bral	80006590 <main+0xcc>
80007118:	80 00       	ld.sh	r0,r0[0x0]
8000711a:	63 08       	ld.w	r8,r1[0x40]
8000711c:	80 00       	ld.sh	r0,r0[0x0]
8000711e:	5a 80       	cp.w	r0,-24
80007120:	80 00       	ld.sh	r0,r0[0x0]
80007122:	32 a8       	mov	r8,42
80007124:	80 00       	ld.sh	r0,r0[0x0]
80007126:	32 cc       	mov	r12,44
80007128:	80 00       	ld.sh	r0,r0[0x0]
8000712a:	58 dc       	cp.w	r12,13
8000712c:	80 00       	ld.sh	r0,r0[0x0]
8000712e:	33 a8       	mov	r8,58
80007130:	80 00       	ld.sh	r0,r0[0x0]
80007132:	5a 28       	cp.w	r8,-30
80007134:	80 00       	ld.sh	r0,r0[0x0]
80007136:	63 58       	ld.w	r8,r1[0x54]
80007138:	80 00       	ld.sh	r0,r0[0x0]
8000713a:	43 60       	lddsp	r0,sp[0xd8]
8000713c:	80 00       	ld.sh	r0,r0[0x0]
8000713e:	63 a4       	ld.w	r4,r1[0x68]
80007140:	80 00       	ld.sh	r0,r0[0x0]
80007142:	42 26       	lddsp	r6,sp[0x88]
80007144:	80 00       	ld.sh	r0,r0[0x0]
80007146:	54 d8       	stdsp	sp[0x134],r8
80007148:	00 00       	add	r0,r0
8000714a:	03 0a       	ld.w	r10,r1++
8000714c:	00 00       	add	r0,r0
8000714e:	00 ac       	st.w	r0++,r12
80007150:	00 00       	add	r0,r0
80007152:	09 78       	ld.ub	r8,--r4
80007154:	00 00       	add	r0,r0
80007156:	09 6c       	ld.uh	r12,--r4
80007158:	00 00       	add	r0,r0
8000715a:	09 90       	ld.ub	r0,r4[0x1]
8000715c:	00 00       	add	r0,r0
8000715e:	09 20       	ld.uh	r0,r4++
80007160:	80 00       	ld.sh	r0,r0[0x0]
80007162:	42 60       	lddsp	r0,sp[0x98]
80007164:	00 00       	add	r0,r0
80007166:	09 60       	ld.uh	r0,--r4
80007168:	80 00       	ld.sh	r0,r0[0x0]
8000716a:	79 b8       	ld.w	r8,r12[0x6c]
8000716c:	80 00       	ld.sh	r0,r0[0x0]
8000716e:	41 ea       	lddsp	r10,sp[0x78]
80007170:	80 00       	ld.sh	r0,r0[0x0]
80007172:	59 28       	cp.w	r8,18
80007174:	00 00       	add	r0,r0
80007176:	00 bc       	st.h	r0++,r12
80007178:	80 00       	ld.sh	r0,r0[0x0]
8000717a:	59 40       	cp.w	r0,20
8000717c:	80 00       	ld.sh	r0,r0[0x0]
8000717e:	5b 44       	cp.w	r4,-12
80007180:	80 00       	ld.sh	r0,r0[0x0]
80007182:	59 64       	cp.w	r4,22
80007184:	80 00       	ld.sh	r0,r0[0x0]
80007186:	5c 54       	castu.b	r4
80007188:	80 00       	ld.sh	r0,r0[0x0]
8000718a:	61 44       	ld.w	r4,r0[0x50]
8000718c:	80 00       	ld.sh	r0,r0[0x0]
8000718e:	61 90       	ld.w	r0,r0[0x64]
80007190:	80 00       	ld.sh	r0,r0[0x0]
80007192:	62 f4       	ld.w	r4,r1[0x3c]
80007194:	80 00       	ld.sh	r0,r0[0x0]
80007196:	59 8c       	cp.w	r12,24
80007198:	80 00       	ld.sh	r0,r0[0x0]
8000719a:	71 c8       	ld.w	r8,r8[0x70]
8000719c:	80 00       	ld.sh	r0,r0[0x0]
8000719e:	59 a0       	cp.w	r0,26
800071a0:	00 00       	add	r0,r0
800071a2:	02 b4       	st.h	r1++,r4
800071a4:	00 00       	add	r0,r0
800071a6:	09 a4       	ld.ub	r4,r4[0x2]
800071a8:	80 00       	ld.sh	r0,r0[0x0]
800071aa:	64 24       	ld.w	r4,r2[0x8]
800071ac:	00 00       	add	r0,r0
800071ae:	02 f8       	st.b	--r1,r8
800071b0:	80 00       	ld.sh	r0,r0[0x0]
800071b2:	57 34       	stdsp	sp[0x1cc],r4
800071b4:	80 00       	ld.sh	r0,r0[0x0]
800071b6:	59 e4       	cp.w	r4,30
800071b8:	00 00       	add	r0,r0
800071ba:	02 e8       	st.h	--r1,r8
800071bc:	80 00       	ld.sh	r0,r0[0x0]
800071be:	64 94       	ld.w	r4,r2[0x24]
800071c0:	80 00       	ld.sh	r0,r0[0x0]
800071c2:	59 f4       	cp.w	r4,31
800071c4:	80 00       	ld.sh	r0,r0[0x0]
800071c6:	42 9a       	lddsp	r10,sp[0xa4]

800071c8 <__avr32_udiv64>:
800071c8:	d4 31       	pushm	r0-r7,lr
800071ca:	1a 97       	mov	r7,sp
800071cc:	20 3d       	sub	sp,12
800071ce:	10 9c       	mov	r12,r8
800071d0:	12 9e       	mov	lr,r9
800071d2:	14 93       	mov	r3,r10
800071d4:	58 09       	cp.w	r9,0
800071d6:	e0 81 00 bd 	brne	80007350 <__avr32_udiv64+0x188>
800071da:	16 38       	cp.w	r8,r11
800071dc:	e0 88 00 40 	brls	8000725c <__avr32_udiv64+0x94>
800071e0:	f0 08 12 00 	clz	r8,r8
800071e4:	c0 d0       	breq	800071fe <__avr32_udiv64+0x36>
800071e6:	f6 08 09 4b 	lsl	r11,r11,r8
800071ea:	f0 09 11 20 	rsub	r9,r8,32
800071ee:	f8 08 09 4c 	lsl	r12,r12,r8
800071f2:	f4 09 0a 49 	lsr	r9,r10,r9
800071f6:	f4 08 09 43 	lsl	r3,r10,r8
800071fa:	f3 eb 10 0b 	or	r11,r9,r11
800071fe:	f8 0e 16 10 	lsr	lr,r12,0x10
80007202:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80007206:	f6 0e 0d 00 	divu	r0,r11,lr
8000720a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000720e:	00 99       	mov	r9,r0
80007210:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80007214:	e0 0a 02 48 	mul	r8,r0,r10
80007218:	10 3b       	cp.w	r11,r8
8000721a:	c0 a2       	brcc	8000722e <__avr32_udiv64+0x66>
8000721c:	20 19       	sub	r9,1
8000721e:	18 0b       	add	r11,r12
80007220:	18 3b       	cp.w	r11,r12
80007222:	c0 63       	brcs	8000722e <__avr32_udiv64+0x66>
80007224:	10 3b       	cp.w	r11,r8
80007226:	f7 b9 03 01 	sublo	r9,1
8000722a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000722e:	f6 08 01 01 	sub	r1,r11,r8
80007232:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80007236:	e2 0e 0d 00 	divu	r0,r1,lr
8000723a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000723e:	00 98       	mov	r8,r0
80007240:	e0 0a 02 4a 	mul	r10,r0,r10
80007244:	14 33       	cp.w	r3,r10
80007246:	c0 82       	brcc	80007256 <__avr32_udiv64+0x8e>
80007248:	20 18       	sub	r8,1
8000724a:	18 03       	add	r3,r12
8000724c:	18 33       	cp.w	r3,r12
8000724e:	c0 43       	brcs	80007256 <__avr32_udiv64+0x8e>
80007250:	14 33       	cp.w	r3,r10
80007252:	f7 b8 03 01 	sublo	r8,1
80007256:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000725a:	cd f8       	rjmp	80007418 <__avr32_udiv64+0x250>
8000725c:	58 08       	cp.w	r8,0
8000725e:	c0 51       	brne	80007268 <__avr32_udiv64+0xa0>
80007260:	30 19       	mov	r9,1
80007262:	f2 08 0d 08 	divu	r8,r9,r8
80007266:	10 9c       	mov	r12,r8
80007268:	f8 06 12 00 	clz	r6,r12
8000726c:	c0 41       	brne	80007274 <__avr32_udiv64+0xac>
8000726e:	18 1b       	sub	r11,r12
80007270:	30 19       	mov	r9,1
80007272:	c4 08       	rjmp	800072f2 <__avr32_udiv64+0x12a>
80007274:	ec 01 11 20 	rsub	r1,r6,32
80007278:	f4 01 0a 49 	lsr	r9,r10,r1
8000727c:	f8 06 09 4c 	lsl	r12,r12,r6
80007280:	f6 06 09 48 	lsl	r8,r11,r6
80007284:	f6 01 0a 41 	lsr	r1,r11,r1
80007288:	f3 e8 10 08 	or	r8,r9,r8
8000728c:	f8 03 16 10 	lsr	r3,r12,0x10
80007290:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80007294:	e2 03 0d 00 	divu	r0,r1,r3
80007298:	f0 0b 16 10 	lsr	r11,r8,0x10
8000729c:	00 9e       	mov	lr,r0
8000729e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800072a2:	e0 05 02 49 	mul	r9,r0,r5
800072a6:	12 3b       	cp.w	r11,r9
800072a8:	c0 a2       	brcc	800072bc <__avr32_udiv64+0xf4>
800072aa:	20 1e       	sub	lr,1
800072ac:	18 0b       	add	r11,r12
800072ae:	18 3b       	cp.w	r11,r12
800072b0:	c0 63       	brcs	800072bc <__avr32_udiv64+0xf4>
800072b2:	12 3b       	cp.w	r11,r9
800072b4:	f7 be 03 01 	sublo	lr,1
800072b8:	f7 dc e3 0b 	addcs	r11,r11,r12
800072bc:	12 1b       	sub	r11,r9
800072be:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800072c2:	f6 03 0d 02 	divu	r2,r11,r3
800072c6:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800072ca:	04 99       	mov	r9,r2
800072cc:	e4 05 02 4b 	mul	r11,r2,r5
800072d0:	16 38       	cp.w	r8,r11
800072d2:	c0 a2       	brcc	800072e6 <__avr32_udiv64+0x11e>
800072d4:	20 19       	sub	r9,1
800072d6:	18 08       	add	r8,r12
800072d8:	18 38       	cp.w	r8,r12
800072da:	c0 63       	brcs	800072e6 <__avr32_udiv64+0x11e>
800072dc:	16 38       	cp.w	r8,r11
800072de:	f7 b9 03 01 	sublo	r9,1
800072e2:	f1 dc e3 08 	addcs	r8,r8,r12
800072e6:	f4 06 09 43 	lsl	r3,r10,r6
800072ea:	f0 0b 01 0b 	sub	r11,r8,r11
800072ee:	f3 ee 11 09 	or	r9,r9,lr<<0x10
800072f2:	f8 06 16 10 	lsr	r6,r12,0x10
800072f6:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800072fa:	f6 06 0d 00 	divu	r0,r11,r6
800072fe:	e6 0b 16 10 	lsr	r11,r3,0x10
80007302:	00 9a       	mov	r10,r0
80007304:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80007308:	e0 0e 02 48 	mul	r8,r0,lr
8000730c:	10 3b       	cp.w	r11,r8
8000730e:	c0 a2       	brcc	80007322 <__avr32_udiv64+0x15a>
80007310:	20 1a       	sub	r10,1
80007312:	18 0b       	add	r11,r12
80007314:	18 3b       	cp.w	r11,r12
80007316:	c0 63       	brcs	80007322 <__avr32_udiv64+0x15a>
80007318:	10 3b       	cp.w	r11,r8
8000731a:	f7 ba 03 01 	sublo	r10,1
8000731e:	f7 dc e3 0b 	addcs	r11,r11,r12
80007322:	f6 08 01 01 	sub	r1,r11,r8
80007326:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000732a:	e2 06 0d 00 	divu	r0,r1,r6
8000732e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80007332:	00 98       	mov	r8,r0
80007334:	e0 0e 02 4b 	mul	r11,r0,lr
80007338:	16 33       	cp.w	r3,r11
8000733a:	c0 82       	brcc	8000734a <__avr32_udiv64+0x182>
8000733c:	20 18       	sub	r8,1
8000733e:	18 03       	add	r3,r12
80007340:	18 33       	cp.w	r3,r12
80007342:	c0 43       	brcs	8000734a <__avr32_udiv64+0x182>
80007344:	16 33       	cp.w	r3,r11
80007346:	f7 b8 03 01 	sublo	r8,1
8000734a:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000734e:	c6 98       	rjmp	80007420 <__avr32_udiv64+0x258>
80007350:	16 39       	cp.w	r9,r11
80007352:	e0 8b 00 65 	brhi	8000741c <__avr32_udiv64+0x254>
80007356:	f2 09 12 00 	clz	r9,r9
8000735a:	c0 b1       	brne	80007370 <__avr32_udiv64+0x1a8>
8000735c:	10 3a       	cp.w	r10,r8
8000735e:	5f 2a       	srhs	r10
80007360:	1c 3b       	cp.w	r11,lr
80007362:	5f b8       	srhi	r8
80007364:	10 4a       	or	r10,r8
80007366:	f2 0a 18 00 	cp.b	r10,r9
8000736a:	c5 90       	breq	8000741c <__avr32_udiv64+0x254>
8000736c:	30 18       	mov	r8,1
8000736e:	c5 98       	rjmp	80007420 <__avr32_udiv64+0x258>
80007370:	f0 09 09 46 	lsl	r6,r8,r9
80007374:	f2 03 11 20 	rsub	r3,r9,32
80007378:	fc 09 09 4e 	lsl	lr,lr,r9
8000737c:	f0 03 0a 48 	lsr	r8,r8,r3
80007380:	f6 09 09 4c 	lsl	r12,r11,r9
80007384:	f4 03 0a 42 	lsr	r2,r10,r3
80007388:	ef 46 ff f4 	st.w	r7[-12],r6
8000738c:	f6 03 0a 43 	lsr	r3,r11,r3
80007390:	18 42       	or	r2,r12
80007392:	f1 ee 10 0c 	or	r12,r8,lr
80007396:	f8 01 16 10 	lsr	r1,r12,0x10
8000739a:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000739e:	e6 01 0d 04 	divu	r4,r3,r1
800073a2:	e4 03 16 10 	lsr	r3,r2,0x10
800073a6:	08 9e       	mov	lr,r4
800073a8:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800073ac:	e8 06 02 48 	mul	r8,r4,r6
800073b0:	10 33       	cp.w	r3,r8
800073b2:	c0 a2       	brcc	800073c6 <__avr32_udiv64+0x1fe>
800073b4:	20 1e       	sub	lr,1
800073b6:	18 03       	add	r3,r12
800073b8:	18 33       	cp.w	r3,r12
800073ba:	c0 63       	brcs	800073c6 <__avr32_udiv64+0x1fe>
800073bc:	10 33       	cp.w	r3,r8
800073be:	f7 be 03 01 	sublo	lr,1
800073c2:	e7 dc e3 03 	addcs	r3,r3,r12
800073c6:	10 13       	sub	r3,r8
800073c8:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800073cc:	e6 01 0d 00 	divu	r0,r3,r1
800073d0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800073d4:	00 98       	mov	r8,r0
800073d6:	e0 06 02 46 	mul	r6,r0,r6
800073da:	0c 3b       	cp.w	r11,r6
800073dc:	c0 a2       	brcc	800073f0 <__avr32_udiv64+0x228>
800073de:	20 18       	sub	r8,1
800073e0:	18 0b       	add	r11,r12
800073e2:	18 3b       	cp.w	r11,r12
800073e4:	c0 63       	brcs	800073f0 <__avr32_udiv64+0x228>
800073e6:	0c 3b       	cp.w	r11,r6
800073e8:	f7 dc e3 0b 	addcs	r11,r11,r12
800073ec:	f7 b8 03 01 	sublo	r8,1
800073f0:	f1 ee 11 08 	or	r8,r8,lr<<0x10
800073f4:	ee f4 ff f4 	ld.w	r4,r7[-12]
800073f8:	0c 1b       	sub	r11,r6
800073fa:	f0 04 06 42 	mulu.d	r2,r8,r4
800073fe:	06 95       	mov	r5,r3
80007400:	16 35       	cp.w	r5,r11
80007402:	e0 8b 00 0a 	brhi	80007416 <__avr32_udiv64+0x24e>
80007406:	5f 0b       	sreq	r11
80007408:	f4 09 09 49 	lsl	r9,r10,r9
8000740c:	12 32       	cp.w	r2,r9
8000740e:	5f b9       	srhi	r9
80007410:	f7 e9 00 09 	and	r9,r11,r9
80007414:	c0 60       	breq	80007420 <__avr32_udiv64+0x258>
80007416:	20 18       	sub	r8,1
80007418:	30 09       	mov	r9,0
8000741a:	c0 38       	rjmp	80007420 <__avr32_udiv64+0x258>
8000741c:	30 09       	mov	r9,0
8000741e:	12 98       	mov	r8,r9
80007420:	10 9a       	mov	r10,r8
80007422:	12 93       	mov	r3,r9
80007424:	10 92       	mov	r2,r8
80007426:	12 9b       	mov	r11,r9
80007428:	2f dd       	sub	sp,-12
8000742a:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80007600 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80007600:	c0 08       	rjmp	80007600 <_evba>
	...

80007604 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80007604:	c0 08       	rjmp	80007604 <_handle_TLB_Multiple_Hit>
	...

80007608 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80007608:	c0 08       	rjmp	80007608 <_handle_Bus_Error_Data_Fetch>
	...

8000760c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000760c:	c0 08       	rjmp	8000760c <_handle_Bus_Error_Instruction_Fetch>
	...

80007610 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80007610:	c0 08       	rjmp	80007610 <_handle_NMI>
	...

80007614 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80007614:	c0 08       	rjmp	80007614 <_handle_Instruction_Address>
	...

80007618 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80007618:	c0 08       	rjmp	80007618 <_handle_ITLB_Protection>
	...

8000761c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000761c:	c0 08       	rjmp	8000761c <_handle_Breakpoint>
	...

80007620 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80007620:	c0 08       	rjmp	80007620 <_handle_Illegal_Opcode>
	...

80007624 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80007624:	c0 08       	rjmp	80007624 <_handle_Unimplemented_Instruction>
	...

80007628 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80007628:	c0 08       	rjmp	80007628 <_handle_Privilege_Violation>
	...

8000762c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000762c:	c0 08       	rjmp	8000762c <_handle_Floating_Point>
	...

80007630 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80007630:	c0 08       	rjmp	80007630 <_handle_Coprocessor_Absent>
	...

80007634 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80007634:	c0 08       	rjmp	80007634 <_handle_Data_Address_Read>
	...

80007638 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80007638:	c0 08       	rjmp	80007638 <_handle_Data_Address_Write>
	...

8000763c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000763c:	c0 08       	rjmp	8000763c <_handle_DTLB_Protection_Read>
	...

80007640 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80007640:	c0 08       	rjmp	80007640 <_handle_DTLB_Protection_Write>
	...

80007644 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80007644:	c0 08       	rjmp	80007644 <_handle_DTLB_Modified>
	...

80007650 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80007650:	c0 08       	rjmp	80007650 <_handle_ITLB_Miss>
	...

80007660 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80007660:	c0 08       	rjmp	80007660 <_handle_DTLB_Miss_Read>
	...

80007670 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80007670:	c0 08       	rjmp	80007670 <_handle_DTLB_Miss_Write>
	...

80007700 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80007700:	c0 08       	rjmp	80007700 <_handle_Supervisor_Call>
	...

80007704 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80007704:	30 0c       	mov	r12,0
80007706:	f0 1f 00 0e 	mcall	8000773c <_int3+0xe>
8000770a:	58 0c       	cp.w	r12,0
8000770c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80007710:	d6 03       	rete

80007712 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80007712:	30 1c       	mov	r12,1
80007714:	f0 1f 00 0a 	mcall	8000773c <_int3+0xe>
80007718:	58 0c       	cp.w	r12,0
8000771a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000771e:	d6 03       	rete

80007720 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80007720:	30 2c       	mov	r12,2
80007722:	f0 1f 00 07 	mcall	8000773c <_int3+0xe>
80007726:	58 0c       	cp.w	r12,0
80007728:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000772c:	d6 03       	rete

8000772e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000772e:	30 3c       	mov	r12,3
80007730:	f0 1f 00 03 	mcall	8000773c <_int3+0xe>
80007734:	58 0c       	cp.w	r12,0
80007736:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000773a:	d6 03       	rete
8000773c:	80 00       	ld.sh	r0,r0[0x0]
8000773e:	42 dc       	lddsp	r12,sp[0xb4]
	...
